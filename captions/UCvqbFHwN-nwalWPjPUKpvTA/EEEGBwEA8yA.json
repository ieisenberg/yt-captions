[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "so shall we get started so hi everyone",
    "start": "30",
    "end": "5069"
  },
  {
    "text": "I'm Livi from Google and this is my github account and today I want to share",
    "start": "5069",
    "end": "11759"
  },
  {
    "text": "a topic that I personally find interesting during our daily routine of helping people debugging their services",
    "start": "11759",
    "end": "18029"
  },
  {
    "text": "and I hope this hobby will help you to build a more reliable service like",
    "start": "18029",
    "end": "23490"
  },
  {
    "text": "afternoon it is done and today we have three agendas we are going to answer the",
    "start": "23490",
    "end": "31650"
  },
  {
    "text": "three questions what is flow control wise flow control important and how GRC",
    "start": "31650",
    "end": "37200"
  },
  {
    "text": "solves it before we dive into the product itself let's refresh what is gr PC so jumpy C",
    "start": "37200",
    "end": "44879"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "packingtown 2015 was designed by engineers there who knows networking",
    "start": "44879",
    "end": "50219"
  },
  {
    "text": "system quite well and it has a bunch of powerful features that can ease the pain",
    "start": "50219",
    "end": "55410"
  },
  {
    "text": "of developing distributed systems and these are some highlighted features like",
    "start": "55410",
    "end": "60829"
  },
  {
    "text": "bi-directional streaming building flow control load balancing service conflict",
    "start": "60829",
    "end": "65909"
  },
  {
    "text": "interceptors API contract and today we are going to dive into the building flow",
    "start": "65909",
    "end": "71189"
  },
  {
    "text": "control so what is flow control that gives it a definition flow control is",
    "start": "71189",
    "end": "78270"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "the mechanism to throttle the traffic in order to protect the endpoints that are",
    "start": "78270",
    "end": "83340"
  },
  {
    "text": "under resource constraints so for people who are sitting here if you have unlimited budget sorry this talk is not",
    "start": "83340",
    "end": "90090"
  },
  {
    "text": "for you and also some of you may ask like why do I want to slow down my",
    "start": "90090",
    "end": "96240"
  },
  {
    "text": "traffic do you know how much effort I put into it to make it fast",
    "start": "96240",
    "end": "101720"
  },
  {
    "text": "so well to answer that we need to realize flow control is all about",
    "start": "101720",
    "end": "107189"
  },
  {
    "start": "102000",
    "end": "102000"
  },
  {
    "text": "scaling because first it's common to see computational power difference between",
    "start": "107189",
    "end": "113189"
  },
  {
    "text": "server and client in micro service architecture it is common to see a database node so be more than a hundred",
    "start": "113189",
    "end": "119689"
  },
  {
    "text": "different clients and it's also common to see a web server is serving tens of",
    "start": "119689",
    "end": "125549"
  },
  {
    "text": "thousands of devices at the same time also the infrastructure has evolved a",
    "start": "125549",
    "end": "132090"
  },
  {
    "text": "lot in the past luckily we have docker in 2013 we have kubernetes in 2014 and this is the fifth",
    "start": "132090",
    "end": "139890"
  },
  {
    "text": "cocoon so we are putting more and more fancy stuff into our architectures like",
    "start": "139890",
    "end": "145020"
  },
  {
    "text": "service mesh select proxies and various stuff so every single request",
    "start": "145020",
    "end": "151380"
  },
  {
    "text": "nowaday involving a large number of networking components and neglecting flow control may cause outages in one of",
    "start": "151380",
    "end": "158670"
  },
  {
    "text": "them and you will be extremely hard to debug also to make things worse people",
    "start": "158670",
    "end": "166470"
  },
  {
    "text": "love to maximize the concurrency of their application by using buffering caching or message queues which I agree",
    "start": "166470",
    "end": "174720"
  },
  {
    "text": "a boost the performance a lot but also put a lot of pressure on the own memory",
    "start": "174720",
    "end": "180120"
  },
  {
    "text": "resources so in a word if you're just writing unit tests or building toy",
    "start": "180120",
    "end": "186000"
  },
  {
    "text": "projects you don't need to worry about flow control but if you are serious you should pay attention to it to better",
    "start": "186000",
    "end": "194310"
  },
  {
    "start": "193000",
    "end": "193000"
  },
  {
    "text": "demonstrate the effect I draw this diagram imagine you have a busy application you",
    "start": "194310",
    "end": "200400"
  },
  {
    "text": "can see it as a database node or machine learning worker that is doing some heavy",
    "start": "200400",
    "end": "206280"
  },
  {
    "text": "lifting work and cannot keep up with the sender so what will happen is the",
    "start": "206280",
    "end": "211680"
  },
  {
    "text": "message will be puff up in the busy application and heel it out of memory so",
    "start": "211680",
    "end": "217830"
  },
  {
    "text": "if the application is that that which means no one is reading the buffer out of kernel and then the kernel will start",
    "start": "217830",
    "end": "224760"
  },
  {
    "text": "start to drop incoming packets then the message will start to pop up on the",
    "start": "224760",
    "end": "229980"
  },
  {
    "text": "standards I eventually the standard application is also out so in this way",
    "start": "229980",
    "end": "236370"
  },
  {
    "text": "the fast sender is sending so fast that it does not only overload the receiver",
    "start": "236370",
    "end": "241980"
  },
  {
    "text": "but also committed suicide so the idea",
    "start": "241980",
    "end": "249420"
  },
  {
    "start": "245000",
    "end": "245000"
  },
  {
    "text": "of flow control actually is very simple so when the message is buffered up in",
    "start": "249420",
    "end": "256620"
  },
  {
    "text": "the receiver application all you need to do is find out a way to signal the",
    "start": "256620",
    "end": "261959"
  },
  {
    "text": "sender please slow down and the sender will respect this command and righto is traffic so that's taken",
    "start": "261960",
    "end": "270180"
  },
  {
    "start": "269000",
    "end": "269000"
  },
  {
    "text": "another look at this and flow control so imagine you have a sequence of services",
    "start": "270180",
    "end": "276750"
  },
  {
    "text": "if you don't turn on the flow control which means all the service is sending",
    "start": "276750",
    "end": "281940"
  },
  {
    "text": "at its capacity ignoring the fact the downstream serve service may not capable",
    "start": "281940",
    "end": "287310"
  },
  {
    "text": "of handling or you may say okay then that's force flow control on some of the",
    "start": "287310",
    "end": "292860"
  },
  {
    "text": "credits that's their work nope because the push back message is not sent from",
    "start": "292860",
    "end": "299639"
  },
  {
    "start": "295000",
    "end": "295000"
  },
  {
    "text": "the end receiver to the original set original sender of the request and then",
    "start": "299639",
    "end": "306599"
  },
  {
    "text": "you will have some fun time debugging like which one is the one to blame so the valid solution of flow control",
    "start": "306599",
    "end": "314639"
  },
  {
    "start": "312000",
    "end": "312000"
  },
  {
    "text": "has to be from end to end next let's talk about the challenges of",
    "start": "314639",
    "end": "321539"
  },
  {
    "text": "implementing flow control so first in need to be performant because flow",
    "start": "321539",
    "end": "327389"
  },
  {
    "text": "control is in beta pass we do not want a protection mechanism that will slow down",
    "start": "327389",
    "end": "333659"
  },
  {
    "text": "the traffic by 30% it is unacceptable and we want fairness between our pcs",
    "start": "333659",
    "end": "338909"
  },
  {
    "text": "which means we do not want a malicious client sending a malicious request and",
    "start": "338909",
    "end": "344009"
  },
  {
    "text": "blocks and entire service and also we want algorithm to throttle based on",
    "start": "344009",
    "end": "349110"
  },
  {
    "text": "performance so we can utilize all the original proper and networking resources",
    "start": "349110",
    "end": "355849"
  },
  {
    "text": "last and most importantly we want a flow control mechanism that can deploy you",
    "start": "355849",
    "end": "362340"
  },
  {
    "text": "from end to end next if you still remember your networking system from",
    "start": "362340",
    "end": "369780"
  },
  {
    "start": "365000",
    "end": "365000"
  },
  {
    "text": "your undergrad you probably will remember remember this there is a similar concept to flow control which is",
    "start": "369780",
    "end": "376349"
  },
  {
    "text": "called congestion control they are similar by serving different purpose the",
    "start": "376349",
    "end": "381840"
  },
  {
    "text": "flow control the goal of flow control is protocol node is the node inside the",
    "start": "381840",
    "end": "386969"
  },
  {
    "text": "network while congestion control is protecting the network itself the trigger condition for flow control is",
    "start": "386969",
    "end": "393659"
  },
  {
    "text": "when the receiver is slower than the sender and the trigger condition for congestion control is low bang waste",
    "start": "393659",
    "end": "400350"
  },
  {
    "text": "lawsy network and in real world for most",
    "start": "400350",
    "end": "406410"
  },
  {
    "text": "of the time the flow control and congestion control are working together to protect your cluster but if only",
    "start": "406410",
    "end": "412200"
  },
  {
    "text": "congestion control is like kicking frequently maybe is a good indicator that you should contact your cloud",
    "start": "412200",
    "end": "418590"
  },
  {
    "text": "provider in necks since we're talking",
    "start": "418590",
    "end": "425580"
  },
  {
    "start": "420000",
    "end": "420000"
  },
  {
    "text": "about congestion control let's take a closer look at it like how you works and why it is not the best solution",
    "start": "425580",
    "end": "432300"
  },
  {
    "text": "quicks I know here if you are a Linux user you can try to type in the command below",
    "start": "432300",
    "end": "437340"
  },
  {
    "text": "to check your active TCP congestion control algorithm ok back to the topic",
    "start": "437340",
    "end": "442520"
  },
  {
    "text": "so the common algorithms are Reno big cubic I want IP to dip into them and the",
    "start": "442520",
    "end": "448530"
  },
  {
    "text": "general strategy is very simple it will increase the sending rate if a key is received and you will decrease the",
    "start": "448530",
    "end": "455130"
  },
  {
    "text": "sending speed if a kiss missed which means the packet has been dropped by switches routers up here in this way we",
    "start": "455130",
    "end": "464190"
  },
  {
    "start": "463000",
    "end": "463000"
  },
  {
    "text": "the TCT can achieve flow control by doing following steps when the path is",
    "start": "464190",
    "end": "469400"
  },
  {
    "text": "filled up in your application stop reading from the kernel buffers then the",
    "start": "469400",
    "end": "475230"
  },
  {
    "text": "receiver will drops any further incoming packets and in this way does the memory pressure of the receiver will not get",
    "start": "475230",
    "end": "482370"
  },
  {
    "text": "worse then the receiver is getting protected job done but it except there",
    "start": "482370",
    "end": "488760"
  },
  {
    "text": "are two drawbacks first the center is observing a lot of packet packet loss",
    "start": "488760",
    "end": "495810"
  },
  {
    "text": "which means it was think maybe I'm in a really crappy Network so you it will",
    "start": "495810",
    "end": "501720"
  },
  {
    "text": "reduce your support and eventually ended up with higher latency also you will",
    "start": "501720",
    "end": "507990"
  },
  {
    "text": "exactly we make the TCP multiplexing doesn't work not working",
    "start": "507990",
    "end": "514080"
  },
  {
    "text": "why is the multiplexing is so important let me give a quick reminder to people",
    "start": "514080",
    "end": "520289"
  },
  {
    "start": "515000",
    "end": "515000"
  },
  {
    "text": "who have forgot what what is it so imagine you are using your laptop and doing multiple tasks at the same time",
    "start": "520289",
    "end": "527040"
  },
  {
    "text": "and all the task is sharing the same network connection and they're happy",
    "start": "527040",
    "end": "532230"
  },
  {
    "text": "because they don't use a lot of penguins and here you're trying to download this 80 gigabytes care which will effectively",
    "start": "532230",
    "end": "539460"
  },
  {
    "text": "trend of your bandwidth and in this time the upstream will try to start all your",
    "start": "539460",
    "end": "546630"
  },
  {
    "text": "traffic but in front of the TCP protocol it cannot differentiate like which task",
    "start": "546630",
    "end": "552390"
  },
  {
    "text": "is which so when push back all of the task is going to be pushed back which",
    "start": "552390",
    "end": "557670"
  },
  {
    "text": "means a misbehaving task is influenced other normal tasks you are using and it",
    "start": "557670",
    "end": "563910"
  },
  {
    "text": "will be helpful also in data in data center case that port in your service",
    "start": "563910",
    "end": "570450"
  },
  {
    "text": "mesh may be not responding to your control panel due to congestion control so how to jab",
    "start": "570450",
    "end": "578640"
  },
  {
    "start": "577000",
    "end": "577000"
  },
  {
    "text": "he sees of this problem this is the GFC solution which is HTTP to flow control",
    "start": "578640",
    "end": "585540"
  },
  {
    "text": "the algorithm itself is highly similar to token packets you can imagine the flow control window as a bucket for",
    "start": "585540",
    "end": "592950"
  },
  {
    "text": "tokens and the sender will try to grab the amount of tokens as as many as the",
    "start": "592950",
    "end": "600000"
  },
  {
    "text": "size of the data frame if the tokens is not sufficient the sender will have to wait on the other hand read the receiver",
    "start": "600000",
    "end": "607589"
  },
  {
    "text": "can replenish tokens by sending window update frames which effectively means I",
    "start": "607589",
    "end": "613050"
  },
  {
    "text": "am ready to read more bytes as you can see here this algorithm is highly",
    "start": "613050",
    "end": "618780"
  },
  {
    "text": "performant because for the most of the time the sender is not blocked by flow control and you can stand at ease full",
    "start": "618780",
    "end": "626370"
  },
  {
    "text": "capacity also HDTV to provides fine grain structure which enables per stream",
    "start": "626370",
    "end": "634080"
  },
  {
    "text": "flow control and per connection flow control and the most important feature of this algorithm is the per stream flow",
    "start": "634080",
    "end": "641130"
  },
  {
    "text": "control which means enables the receiver to push back on their misbehaving RPC",
    "start": "641130",
    "end": "647010"
  },
  {
    "text": "instead of all of them next it also provides frame priority which means the",
    "start": "647010",
    "end": "654589"
  },
  {
    "text": "the push back only work on beta frame instead all the control frame can pass",
    "start": "654589",
    "end": "660959"
  },
  {
    "text": "and can come through even if it is under flow control so the current so frames are like Windows Update frame",
    "start": "660959",
    "end": "668800"
  },
  {
    "text": "settings ping recess ring etc so we",
    "start": "668800",
    "end": "675190"
  },
  {
    "text": "already have the design how our can it be to implement it not quite hard this",
    "start": "675190",
    "end": "680440"
  },
  {
    "text": "is the code from the icy self he says even wasteful awareness of the current",
    "start": "680440",
    "end": "686410"
  },
  {
    "text": "network situation implement the flow control can be hard failure to get all",
    "start": "686410",
    "end": "694240"
  },
  {
    "text": "the details right may lead to 10 lakhs so if you still remember the idea of",
    "start": "694240",
    "end": "700510"
  },
  {
    "start": "698000",
    "end": "698000"
  },
  {
    "text": "flow control is very simple you just want to signal the sender to slow down why do we need to know all these",
    "start": "700510",
    "end": "705700"
  },
  {
    "text": "complicate algorithms and comparisons well you don't because we got your PC",
    "start": "705700",
    "end": "711940"
  },
  {
    "start": "711000",
    "end": "711000"
  },
  {
    "text": "and as we know Java C has three major stack jpcc core jam PC Jawa and job",
    "start": "711940",
    "end": "719440"
  },
  {
    "text": "physical of them are natively integrated waste flow control and in most languages",
    "start": "719440",
    "end": "726310"
  },
  {
    "text": "it is turned on by default and here has two special case for Objective C and",
    "start": "726310",
    "end": "731530"
  },
  {
    "text": "Java because they want to provide a pure asynchronous API which means the",
    "start": "731530",
    "end": "737230"
  },
  {
    "text": "protection for the receiver is always own but the protection for sender is opt",
    "start": "737230",
    "end": "742600"
  },
  {
    "text": "in and also the GPC implementation is",
    "start": "742600",
    "end": "747820"
  },
  {
    "text": "quite robust it is validated in many productions GCC has adopted by many",
    "start": "747820",
    "end": "754300"
  },
  {
    "text": "companies and since I'm from Google I can only speak for Google's use case so",
    "start": "754300",
    "end": "759430"
  },
  {
    "text": "G OPC is the one of the cornerstone of goes infrastructure and it is handling",
    "start": "759430",
    "end": "764860"
  },
  {
    "text": "tens of millions of queries per second and next during our real world",
    "start": "764860",
    "end": "773440"
  },
  {
    "start": "770000",
    "end": "770000"
  },
  {
    "text": "deployment we found an issue with window size imagining the network as a pipe and",
    "start": "773440",
    "end": "780940"
  },
  {
    "text": "it takes time for data to flow from one side to the other if we set the window size too small",
    "start": "780940",
    "end": "787050"
  },
  {
    "text": "which means when the data is floating from one side to the other side the",
    "start": "787050",
    "end": "792220"
  },
  {
    "text": "sender is idling not doing anything but waiting for the window up a frame and this phenomena will get worse",
    "start": "792220",
    "end": "799750"
  },
  {
    "text": "when your take when your sender and receiver is not in the same not in the same data center maybe is why is in East",
    "start": "799750",
    "end": "807640"
  },
  {
    "text": "Coast when in West Kauai in Europe why in North America what we want here is we",
    "start": "807640",
    "end": "813520"
  },
  {
    "text": "want the window size to be as big as possible to utilize all the networking resources but we don't want it to be too",
    "start": "813520",
    "end": "820300"
  },
  {
    "text": "big that it can overflow either side the RPC solution here is the PDP estimator",
    "start": "820300",
    "end": "828970"
  },
  {
    "start": "825000",
    "end": "825000"
  },
  {
    "text": "so what is P DP DP is bandwidth delay product which means the amount of data",
    "start": "828970",
    "end": "834370"
  },
  {
    "text": "they can be interested in the network and the computation is easy you can",
    "start": "834370",
    "end": "839500"
  },
  {
    "text": "measure the bandwidth times the round-trip time which effectively you can get the volume of the network which",
    "start": "839500",
    "end": "845140"
  },
  {
    "text": "is the flying bytes on the wire here and this algorithm will measure the PTP and",
    "start": "845140",
    "end": "850930"
  },
  {
    "text": "instead the initial window size to PDP and by doing this you can intelligently",
    "start": "850930",
    "end": "856330"
  },
  {
    "text": "avoid triggering flow control so let's recap what were the challenges we had",
    "start": "856330",
    "end": "862900"
  },
  {
    "start": "860000",
    "end": "860000"
  },
  {
    "text": "before so first we need a flow control mechanism that is performant well Jam",
    "start": "862900",
    "end": "869320"
  },
  {
    "text": "pcs performance and we want fairness between our pcs HDTV flow control",
    "start": "869320",
    "end": "874780"
  },
  {
    "text": "supports multiplexing and throttle based on performance we got PDP estimator and",
    "start": "874780",
    "end": "881410"
  },
  {
    "text": "last flow control from end to end GBC has building flow control which",
    "start": "881410",
    "end": "887680"
  },
  {
    "text": "means by adopting geodesy you're protecting you're already protecting your cluster so probably soft everyone",
    "start": "887680",
    "end": "895630"
  },
  {
    "text": "is happy and next let's take a look at how to flow control actually works in",
    "start": "895630",
    "end": "901839"
  },
  {
    "text": "inside of actual code so this is a snippet from geophysical you can see",
    "start": "901839",
    "end": "908320"
  },
  {
    "text": "this is streaming hall and when you are trying to sell something the same API will block and here thus the message is",
    "start": "908320",
    "end": "916110"
  },
  {
    "text": "accepted by the flow control window the same thing happened to the ERP cpython",
    "start": "916110",
    "end": "923290"
  },
  {
    "text": "that the yield statement will block and here the message itself is accepted by",
    "start": "923290",
    "end": "929350"
  },
  {
    "text": "flow control this is a little bit different with Germany Java for inbound traffic",
    "start": "929350",
    "end": "935600"
  },
  {
    "text": "he has automatically flow control which means it won't request next message until the existing one is consumed and",
    "start": "935600",
    "end": "942980"
  },
  {
    "text": "for outbound traffic we provide two ways to two ways to handle the flow control",
    "start": "942980",
    "end": "950360"
  },
  {
    "text": "the first one is it there is a flag call is ready to check whether the pier is ready to receive your message and we you",
    "start": "950360",
    "end": "957200"
  },
  {
    "text": "can also set already handler which means if there is an opening whenever there is",
    "start": "957200",
    "end": "962330"
  },
  {
    "text": "an opening in flow control it will invoke your callback and even though",
    "start": "962330",
    "end": "969610"
  },
  {
    "text": "flow control is great in most of a scenario some of you may still think it",
    "start": "969610",
    "end": "975290"
  },
  {
    "text": "doesn't fit into my scenario I just want buffering whatsoever does that mean I cannot use G RPC well no because G RPC",
    "start": "975290",
    "end": "983330"
  },
  {
    "text": "also provides our message buffering in core and Java so in core based",
    "start": "983330",
    "end": "991700"
  },
  {
    "start": "990000",
    "end": "990000"
  },
  {
    "text": "implementation you can always flip a bit in the right option to signal the secret that this message does not need to be",
    "start": "991700",
    "end": "999110"
  },
  {
    "text": "accepted by flow control window and you can propagate it like as soon as well as",
    "start": "999110",
    "end": "1005770"
  },
  {
    "text": "soon as possible and also you can use the channel argument here to set the",
    "start": "1005770",
    "end": "1010810"
  },
  {
    "text": "right buffer size and if you really really don't like PDP estimation and you know what you are doing you can disable",
    "start": "1010810",
    "end": "1017920"
  },
  {
    "text": "PDP through this channel argument and in Java C Java for inbound traffic you can",
    "start": "1017920",
    "end": "1026829"
  },
  {
    "text": "disable flow control before the connection is even started but the",
    "start": "1026829",
    "end": "1031839"
  },
  {
    "text": "downside is that you need to call require requests in which is which tells the framework that how exactly how many",
    "start": "1031839",
    "end": "1039040"
  },
  {
    "text": "requests you are going to receive and you can call this API multiple time for",
    "start": "1039040",
    "end": "1044500"
  },
  {
    "text": "urban traffic to ignore flow control is simple you can just simply ignore the",
    "start": "1044500",
    "end": "1049990"
  },
  {
    "text": "Israeli flag but you may cause indefinitely buffering here and maybe it",
    "start": "1049990",
    "end": "1057010"
  },
  {
    "text": "will cause out of memory in your application so use waste caution so take",
    "start": "1057010",
    "end": "1064270"
  },
  {
    "start": "1062000",
    "end": "1062000"
  },
  {
    "text": "today we have the three question like first what is flow control flow control",
    "start": "1064270",
    "end": "1071030"
  },
  {
    "text": "is the mechanism to sort out the traffic to protect endpoints and second why is",
    "start": "1071030",
    "end": "1076040"
  },
  {
    "text": "flow control important because fast senders may cause excessive buffering on",
    "start": "1076040",
    "end": "1081740"
  },
  {
    "text": "both sides and how do you actually sauce it GPC provides easy-to-use building and",
    "start": "1081740",
    "end": "1087950"
  },
  {
    "text": "flow control okay that's all the content of this talk I hope it will be useful",
    "start": "1087950",
    "end": "1094450"
  },
  {
    "text": "[Applause]",
    "start": "1094450",
    "end": "1100420"
  },
  {
    "text": "now I take questions it can be related to flow control or GPC whatsoever oh",
    "start": "1100420",
    "end": "1108490"
  },
  {
    "text": "right also there is a gr PCM internal session we will be hold in the Google community",
    "start": "1108520",
    "end": "1115340"
  },
  {
    "text": "lunch just after this session if you're interesting GRDC you feel free to go",
    "start": "1115340",
    "end": "1121100"
  },
  {
    "text": "come questions oh yes you can just shout",
    "start": "1121100",
    "end": "1129680"
  },
  {
    "text": "please yeah you",
    "start": "1129680",
    "end": "1135550"
  },
  {
    "text": "hi hi I want this flow control mechanism that we talked about in G RPC is that is",
    "start": "1151800",
    "end": "1159000"
  },
  {
    "text": "that implemented in your client libraries for the cloud services like",
    "start": "1159000",
    "end": "1165360"
  },
  {
    "text": "BigTable and all that like the client yes by default it is turned off okay and",
    "start": "1165360",
    "end": "1171270"
  },
  {
    "text": "what what do you mean by infinite buffering when you mention on your slide",
    "start": "1171270",
    "end": "1177080"
  },
  {
    "text": "eirick do we want to discuss the infinite buffering",
    "start": "1177470",
    "end": "1183080"
  },
  {
    "start": "1179000",
    "end": "1179000"
  },
  {
    "text": "what was the precise question the question is can you explain like the",
    "start": "1189580",
    "end": "1195789"
  },
  {
    "text": "internet buffering for the hub on traffic on Java C Java yes so there we",
    "start": "1195789",
    "end": "1202269"
  },
  {
    "text": "go so the the API in Java is fully async that means it's not going to block and",
    "start": "1202269",
    "end": "1208509"
  },
  {
    "text": "that means that there's only a couple different ways that you can interact with it in order to deal with flow",
    "start": "1208509",
    "end": "1214690"
  },
  {
    "text": "control one way is we could throw an exception or something like that if you",
    "start": "1214690",
    "end": "1219850"
  },
  {
    "text": "know you made us unhappy there's there's a couple others for variations but lots",
    "start": "1219850",
    "end": "1226419"
  },
  {
    "text": "of times you might need to do you you get like a batch of messages all at once or something like that you can go ahead",
    "start": "1226419",
    "end": "1232600"
  },
  {
    "text": "and send them all to GRC like if you're just gonna hang on to them yourselves instead of doing that you can just send",
    "start": "1232600",
    "end": "1238989"
  },
  {
    "text": "them to the Java library and it will go ahead and send them whenever it's able to but the the is ready and",
    "start": "1238989",
    "end": "1249340"
  },
  {
    "text": "all on ready will still be operating during that period of time so you can send a bunch you know you",
    "start": "1249340",
    "end": "1254739"
  },
  {
    "text": "already have those in memory there now just queued whenever they actually get sent and whenever there's more memory",
    "start": "1254739",
    "end": "1260289"
  },
  {
    "text": "available then you'll still be able to get an on ready callback and continue sort of to have your nice proper flow",
    "start": "1260289",
    "end": "1267609"
  },
  {
    "text": "control and so it allows you to have a little bit more bursty behavior this is the primary reason that the the infinite",
    "start": "1267609",
    "end": "1273429"
  },
  {
    "text": "buffering is there just because we didn't because of the way the API is fully async it was sort of easiest way",
    "start": "1273429",
    "end": "1282100"
  },
  {
    "text": "for a lot of applications that means the applications didn't any buffer themselves if they were gonna be a buffering anyway hey great job thank you",
    "start": "1282100",
    "end": "1292419"
  },
  {
    "text": "in the c-sharp in.net core of the c-sharp version is now completely native",
    "start": "1292419",
    "end": "1297489"
  },
  {
    "text": "do you know if they implemented flow control the same way as the C version or",
    "start": "1297489",
    "end": "1303850"
  },
  {
    "text": "is it yet another version like Java or you mean for waste language it done at",
    "start": "1303850",
    "end": "1309279"
  },
  {
    "text": "Core 3 oh the G RPC client is now completely native so I I would so I",
    "start": "1309279",
    "end": "1314830"
  },
  {
    "text": "would expect it does not have any the bandwidth delay product measurements in place Oh actually we may be able to get",
    "start": "1314830",
    "end": "1321820"
  },
  {
    "text": "a more or native answer on it but I would expect",
    "start": "1321820",
    "end": "1326870"
  },
  {
    "text": "it yeah do you want to hi so I'm the author of the Donna core version of G",
    "start": "1326870",
    "end": "1333860"
  },
  {
    "text": "RPC so yes we support flow control because it's just built and age should",
    "start": "1333860",
    "end": "1340220"
  },
  {
    "text": "be - we support H should be - you get it I don't know what other measurements you offer and other implementations but we",
    "start": "1340220",
    "end": "1347600"
  },
  {
    "text": "probably don't do that you probably have a default flow control window size yes",
    "start": "1347600",
    "end": "1353179"
  },
  {
    "text": "and what is that set - initially I don't know it's configurable on the on the server yes so a lot of implementations",
    "start": "1353179",
    "end": "1361400"
  },
  {
    "text": "might start at 64 K as their initial window size that works pretty well in I mean that might seem really small so",
    "start": "1361400",
    "end": "1367880"
  },
  {
    "text": "some people 64 K wow I you know eat that for breakfast or whatever but the that's",
    "start": "1367880",
    "end": "1373790"
  },
  {
    "text": "actually a pretty good number for a lot of networks it's quite surprising how many networks it is a good number for",
    "start": "1373790",
    "end": "1379150"
  },
  {
    "text": "because as networks tend to get a faster as in less latency they tend to get",
    "start": "1379150",
    "end": "1385580"
  },
  {
    "text": "bigger as far as pipes and it just so happens that like Monta Tom on atera lee",
    "start": "1385580",
    "end": "1391299"
  },
  {
    "text": "64 K is just sort of how those two things even out the main case that that",
    "start": "1391299",
    "end": "1396320"
  },
  {
    "text": "doesn't work as well is whenever you've got big expensive pipes like between big",
    "start": "1396320",
    "end": "1401360"
  },
  {
    "text": "data centers or especially across continent those tend to be very very long and because they're so important",
    "start": "1401360",
    "end": "1407630"
  },
  {
    "text": "they tend to be pretty big and fat as well and so you may need to if you're going over some of those pipes increase",
    "start": "1407630",
    "end": "1413929"
  },
  {
    "text": "the default window size so the the bdp measurement figures this out for you so",
    "start": "1413929",
    "end": "1419929"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "you don't necessarily need to normally but for like a notation there you would get to figure it out and you can end up",
    "start": "1419929",
    "end": "1427809"
  },
  {
    "text": "monitoring your network if you know the throughput and if you know the latency just with ping you multiply those",
    "start": "1427809",
    "end": "1433160"
  },
  {
    "text": "together and that's pretty appropriate size but but like 64 K I said is what in",
    "start": "1433160",
    "end": "1439400"
  },
  {
    "text": "my default - so in these networks might eat four megabytes or eight megabytes it really scales quite high on that high",
    "start": "1439400",
    "end": "1446510"
  },
  {
    "text": "end which is why we don't know typically you want to use all that memory we want to use something less than that that's",
    "start": "1446510",
    "end": "1452450"
  },
  {
    "text": "more appropriate to the actual network you're using ah do you have any plan to officially",
    "start": "1452450",
    "end": "1460460"
  },
  {
    "text": "support rust um gigantic hey how's that question not right now but we welcome",
    "start": "1460460",
    "end": "1469460"
  },
  {
    "text": "community contributions and we're happy to support okay please sorry here say",
    "start": "1469460",
    "end": "1483260"
  },
  {
    "text": "that again",
    "start": "1483260",
    "end": "1485560"
  },
  {
    "text": "what is recurring then estrada ring is",
    "start": "1489520",
    "end": "1495350"
  },
  {
    "text": "occurring we have one use case that well",
    "start": "1495350",
    "end": "1501170"
  },
  {
    "text": "the people was confident they turn off the flow control before and after like because cut because they're confident",
    "start": "1501170",
    "end": "1508670"
  },
  {
    "text": "about what they're doing and when you put it back home they can observe a more than 50% decrease of meadow see there are some",
    "start": "1508670",
    "end": "1516440"
  },
  {
    "text": "possibly place settings in the environment you can enable any to put",
    "start": "1516440",
    "end": "1521870"
  },
  {
    "text": "some logs I will know though that like here it's it's not necessarily bad",
    "start": "1521870",
    "end": "1527390"
  },
  {
    "text": "whenever it's happening it's it's some of this is normal especially for burstiness behavior it's very normal for",
    "start": "1527390",
    "end": "1533150"
  },
  {
    "text": "like if you're gonna send 4 megabyte message or something like that you're going to get sort of temporarily",
    "start": "1533150",
    "end": "1538490"
  },
  {
    "text": "throttled but it's not actually harming anything because that's just the way the network walk rate and stuff so there you",
    "start": "1538490",
    "end": "1544190"
  },
  {
    "text": "have to be a little bit cautious to figure out what you're actually looking at if you're looking at sort of if",
    "start": "1544190",
    "end": "1550700"
  },
  {
    "text": "there's buffering like that because buffering is very normal we're not trying to actually remove a buffering instead a way to achieve a",
    "start": "1550700",
    "end": "1560150"
  },
  {
    "text": "flow control if we have a nest Gateway in front of gr PC server a rest gateway",
    "start": "1560150",
    "end": "1565400"
  },
  {
    "text": "yeah well the HTTP 1.1 flow control is done by the TCP congestion control which",
    "start": "1565400",
    "end": "1572630"
  },
  {
    "text": "means on that and you are not protected but after the Gateway it is protected so",
    "start": "1572630",
    "end": "1578450"
  },
  {
    "text": "the the the TCP flow control will still interact there yeah because that's just what HP one used and so if you're let's",
    "start": "1578450",
    "end": "1586940"
  },
  {
    "text": "say doing streaming without like soda streaming or something like that TCP will interact fine and",
    "start": "1586940",
    "end": "1592610"
  },
  {
    "text": "that can get converted fine into HB to flow control and things like that it depends a little bit if you're talking",
    "start": "1592610",
    "end": "1598010"
  },
  {
    "text": "about like just doing lots of requests all at once or more of a streaming situation oh yeah yeah also whenever",
    "start": "1598010",
    "end": "1608180"
  },
  {
    "text": "you're going through things like that every proxy sort of everything in the in the middle will have its own flow",
    "start": "1608180",
    "end": "1613460"
  },
  {
    "text": "control and so you might need to configure some of the proxy settings to be larger so so we said like for example",
    "start": "1613460",
    "end": "1620270"
  },
  {
    "text": "this 64k I mentioned proxies might have that as well and you might need to increase it or if you see their",
    "start": "1620270",
    "end": "1626240"
  },
  {
    "text": "buffering a lot you might decrease it and so there's no direct way of",
    "start": "1626240",
    "end": "1632030"
  },
  {
    "text": "leveraging G RPC flow control so flow control is sort of point-to-point",
    "start": "1632030",
    "end": "1637580"
  },
  {
    "text": "and then you add them all together nice or to get in the end so I'm basically saying that there's existing flow",
    "start": "1637580",
    "end": "1643400"
  },
  {
    "text": "control there and it'll just work fine like you because HP one has flow control",
    "start": "1643400",
    "end": "1649190"
  },
  {
    "text": "via TCP and then it gets converted into HP to flow control and if it gets converted into something else you can go",
    "start": "1649190",
    "end": "1656300"
  },
  {
    "text": "as many times as you need a sort of point-to-point so it should all just be fine the RPC load balancing the feature",
    "start": "1656300",
    "end": "1667880"
  },
  {
    "text": "is that implementation of application and to an application is like",
    "start": "1667880",
    "end": "1673130"
  },
  {
    "text": "replacement to the broker based like you know like message brokers or let's say I",
    "start": "1673130",
    "end": "1679280"
  },
  {
    "text": "mean is that the solution to the Hat or I mean what's the so-so message brokers",
    "start": "1679280",
    "end": "1689290"
  },
  {
    "text": "part of what they do is load balancing and so if you're using your message",
    "start": "1689290",
    "end": "1695150"
  },
  {
    "text": "broker predominantly for a load balancing it can be replacement to use the smart load balancer on client side",
    "start": "1695150",
    "end": "1702220"
  },
  {
    "text": "it's a little bit of a false dichotomy depending on exactly what you're using",
    "start": "1702220",
    "end": "1707240"
  },
  {
    "text": "the per core for the broker does provide other things commonly though you might",
    "start": "1707240",
    "end": "1713810"
  },
  {
    "text": "not need those or not using them in which case you can guess for the the cheaper as in cost",
    "start": "1713810",
    "end": "1720970"
  },
  {
    "text": "approach of using the client site load balancing and that can reduce latency and you can reduce the amount of i/o and",
    "start": "1720970",
    "end": "1727549"
  },
  {
    "text": "stuff that's happening in the",
    "start": "1727549",
    "end": "1730299"
  },
  {
    "text": "yes so the question is if actually to",
    "start": "1754300",
    "end": "1763190"
  },
  {
    "text": "every every obviously will appear open as a stream so if you open up an Andre",
    "start": "1763190",
    "end": "1769220"
  },
  {
    "text": "RPC does that means this 100 stream is a flow control separately or all together",
    "start": "1769220",
    "end": "1775840"
  },
  {
    "text": "so in most of the case there are flow control separately which means if you",
    "start": "1775840",
    "end": "1783050"
  },
  {
    "text": "are sending a large amount of unary requests you can still overload your server in that way and the her",
    "start": "1783050",
    "end": "1790160"
  },
  {
    "text": "connection flow control actually is quite similar to what we have for TCP congestion control yeah and the short",
    "start": "1790160",
    "end": "1798440"
  },
  {
    "text": "answer is both I like and it does depend on the implementations you're using especially many of your mixing proxies",
    "start": "1798440",
    "end": "1804830"
  },
  {
    "text": "and stuff there is a connection level of flow control there's also stream level flow control but connection flow level",
    "start": "1804830",
    "end": "1811070"
  },
  {
    "text": "flow controls a little bit I'm gonna say not dangerous I'm not necessarily saying that it might be a little temperamental",
    "start": "1811070",
    "end": "1817120"
  },
  {
    "text": "because I you can have the possibility that you end up starving streams because",
    "start": "1817120",
    "end": "1823610"
  },
  {
    "text": "of some streams that are very active and they just steal all the flow control from the others so you there's a couple",
    "start": "1823610",
    "end": "1830810"
  },
  {
    "text": "different ways it can be tuned there's a couple different things it's it's a little bit more complicated and in some",
    "start": "1830810",
    "end": "1836030"
  },
  {
    "text": "ways it's more to protect your more your entire processes memory and not as much",
    "start": "1836030",
    "end": "1843080"
  },
  {
    "text": "this particular this particular connection you might bring it down for multiple connections at a time or a",
    "start": "1843080",
    "end": "1849140"
  },
  {
    "text": "couple different things it's a very much nuanced conversation I think a lot of the implementations I'm saying GRC and",
    "start": "1849140",
    "end": "1855230"
  },
  {
    "text": "outside of G RPC are a little bit more simplistic there I think C core is has",
    "start": "1855230",
    "end": "1861770"
  },
  {
    "text": "has some very advanced things there but it would be a whole nother topic yeah yeah in C has a total memory limits",
    "start": "1861770",
    "end": "1869219"
  },
  {
    "text": "that you can apply to it and it'll bring down those connection windows in accordance",
    "start": "1869219",
    "end": "1876289"
  },
  {
    "text": "look the question is is there any plan to move geodesy to agita v3j do all who",
    "start": "1885960",
    "end": "1892900"
  },
  {
    "text": "I said yes when HTTP three comes I think quick is kind of the basis and we are",
    "start": "1892900",
    "end": "1898270"
  },
  {
    "text": "thinking we've seen benefits on mobile site so that's where we're trying to use",
    "start": "1898270",
    "end": "1906010"
  },
  {
    "text": "it and then as our experience grows definitely yeah we have it on mobile",
    "start": "1906010",
    "end": "1911920"
  },
  {
    "text": "platforms quick not exactly HTTP three but will become hope for the HTTP three",
    "start": "1911920",
    "end": "1920610"
  },
  {
    "text": "okay no more questions",
    "start": "1924450",
    "end": "1929490"
  },
  {
    "text": "[Applause]",
    "start": "1931590",
    "end": "1937690"
  }
]