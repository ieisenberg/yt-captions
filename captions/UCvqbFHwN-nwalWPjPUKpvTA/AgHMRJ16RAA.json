[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "thank you for coming to this session thank you for sticking around for the last session I know it's you know kind",
    "start": "140",
    "end": "6810"
  },
  {
    "text": "of late so we're excited to be here cube con and to tell you about multi-tenancy",
    "start": "6810",
    "end": "12990"
  },
  {
    "text": "I about nabla and cata containers a",
    "start": "12990",
    "end": "18439"
  },
  {
    "text": "little bit about ourselves so I'm Rico and I work branch metrics doing cloud",
    "start": "18439",
    "end": "23939"
  },
  {
    "text": "operations and my cotta containers contributor and I'm James I work for IBM",
    "start": "23939",
    "end": "29550"
  },
  {
    "text": "and IBM research I'm primarily a kernel developer so I work on the low-level nuts and bolts of container technology",
    "start": "29550",
    "end": "36989"
  },
  {
    "text": "which is why I'll be talking about most of the non kubernetes pieces of what goes on with nabla great so briefly what",
    "start": "36989",
    "end": "47309"
  },
  {
    "start": "45000",
    "end": "45000"
  },
  {
    "text": "we do a branch we were in containers everywhere we run kubernetes in all kinds of environments QA development and",
    "start": "47309",
    "end": "52920"
  },
  {
    "text": "production server in API services and all kinds of different languages we also run messes some of our data pipelines",
    "start": "52920",
    "end": "59640"
  },
  {
    "text": "run on top of messes sparklink and druid type of applications our main runtime is",
    "start": "59640",
    "end": "65909"
  },
  {
    "text": "doctor we run C and container D we're looking at some other ones and there's",
    "start": "65909",
    "end": "72030"
  },
  {
    "text": "still some big data in database type of stakeholder cases that we haven't gotten around to containerize yet still think",
    "start": "72030",
    "end": "79860"
  },
  {
    "text": "that they're not quite ready for some of the the stateful type of applications so",
    "start": "79860",
    "end": "86130"
  },
  {
    "start": "85000",
    "end": "85000"
  },
  {
    "text": "briefly what we're gonna be talking about today so why regular containers",
    "start": "86130",
    "end": "91920"
  },
  {
    "text": "are kind of harder or they're hard to have security implemented on them and a",
    "start": "91920",
    "end": "97770"
  },
  {
    "text": "little bit on cotta and the watts and wise and a little bit of containers and",
    "start": "97770",
    "end": "103320"
  },
  {
    "text": "v2 which is a new feature in cotta containers then we'll talk about nabla also um what's and why and some about",
    "start": "103320",
    "end": "111930"
  },
  {
    "text": "horizontal attack profile it's a metric developed at IBM and we'll talk about",
    "start": "111930",
    "end": "118079"
  },
  {
    "text": "kubernetes and how you can run these runtimes with container D and cryo and using the runtime class which became",
    "start": "118079",
    "end": "125880"
  },
  {
    "text": "available in kubernetes 112 and then we'll talk about the future in terms of workloads and also in terms of features",
    "start": "125880",
    "end": "132300"
  },
  {
    "text": "maybe couplet for some of these container runtimes and maybe some type of workload",
    "start": "132300",
    "end": "137540"
  },
  {
    "text": "that you can run such as AI and machine learning so traditional containers are",
    "start": "137540",
    "end": "143900"
  },
  {
    "start": "142000",
    "end": "142000"
  },
  {
    "text": "you probably seen this slide a few times so you have a regular kernel on top of",
    "start": "143900",
    "end": "149090"
  },
  {
    "text": "your hardware and you may have a virtual machine or you may not have a virtual machine but the thing about traditional",
    "start": "149090",
    "end": "154730"
  },
  {
    "text": "containers is that they share that kernel so if you run a container and",
    "start": "154730",
    "end": "160280"
  },
  {
    "text": "it's compromised and through a system call then your other containers might be",
    "start": "160280",
    "end": "165500"
  },
  {
    "text": "compromised so your host kernel gets compromised and everything and on that particular node might get compromised",
    "start": "165500",
    "end": "171970"
  },
  {
    "text": "and then so you can see it in this diagram so you have a something going",
    "start": "171970",
    "end": "178790"
  },
  {
    "text": "wrong with one of the containers and then the compromises your or your kernel so if you can see that Linux kernel has",
    "start": "178790",
    "end": "185510"
  },
  {
    "start": "183000",
    "end": "183000"
  },
  {
    "text": "over 300 system calls so every system call makes it possible for a point of",
    "start": "185510",
    "end": "192139"
  },
  {
    "text": "attack right so it common sense says if you have less of these system calls",
    "start": "192139",
    "end": "198109"
  },
  {
    "text": "available you have less potential vulnerabilities then if you look at the",
    "start": "198109",
    "end": "204919"
  },
  {
    "start": "203000",
    "end": "203000"
  },
  {
    "text": "darker succumb default profile you see that it only blocks about 40 for system",
    "start": "204919",
    "end": "211190"
  },
  {
    "text": "calls so there's still about 280 system calls available right so and it's really",
    "start": "211190",
    "end": "216440"
  },
  {
    "text": "hard to create a very generic set comm profile so it's loud and then you can",
    "start": "216440",
    "end": "222019"
  },
  {
    "text": "create some for very specific applications but it becomes really difficult so as you can see the default",
    "start": "222019",
    "end": "228470"
  },
  {
    "start": "227000",
    "end": "227000"
  },
  {
    "text": "second profile has an inductor has a",
    "start": "228470",
    "end": "233859"
  },
  {
    "text": "1500 1778 line so it becomes you know time tedious and difficult to figure out",
    "start": "233859",
    "end": "243579"
  },
  {
    "text": "for me I mean alright if you're an expert maybe a bit but for regular people it might be difficult",
    "start": "243579",
    "end": "249739"
  },
  {
    "start": "244000",
    "end": "244000"
  },
  {
    "text": "and then there's Linux capabilities so there's 39 of them and as you can see each one of them has this unique way of",
    "start": "249739",
    "end": "257269"
  },
  {
    "text": "isolating or doing different things of the Linux kernel level so it would take a lot of time for you to",
    "start": "257269",
    "end": "263120"
  },
  {
    "text": "understand or you can try jay-z ourselves contain that a half-game and",
    "start": "263120",
    "end": "269180"
  },
  {
    "text": "learn a little bit more about Linux capabilities but then again it will take you time to figure out another approach",
    "start": "269180",
    "end": "278240"
  },
  {
    "text": "that a lot of people use is using SC Linux to contain more of whatever",
    "start": "278240",
    "end": "284930"
  },
  {
    "text": "workloads are running on your system but then you have to create a base compile a",
    "start": "284930",
    "end": "290900"
  },
  {
    "text": "base module and it becomes kind of difficult to get it enable so to me this",
    "start": "290900",
    "end": "299090"
  },
  {
    "text": "is kind of what AC unit looks like you have all these different options it's like a galaxy and the stars are all the",
    "start": "299090",
    "end": "305660"
  },
  {
    "text": "kind of all the different options so what do most people do they actually disable I see Linux was like but don't",
    "start": "305660",
    "end": "313760"
  },
  {
    "start": "308000",
    "end": "308000"
  },
  {
    "text": "let Dan Walsh Harris Harris say that right don't repeat this yeah this is",
    "start": "313760",
    "end": "319699"
  },
  {
    "text": "what you do know what you say exactly so another approach is using a power bar",
    "start": "319699",
    "end": "325070"
  },
  {
    "start": "323000",
    "end": "323000"
  },
  {
    "text": "and similarly to Linux you have to enable it at the Linux kernel you have",
    "start": "325070",
    "end": "331220"
  },
  {
    "text": "to put armor and I don't know if a lot of people use it to be honest so to me",
    "start": "331220",
    "end": "338630"
  },
  {
    "text": "it's like that makes me have a headache besos like oh my god all the different options so ok kind of containers right",
    "start": "338630",
    "end": "346990"
  },
  {
    "text": "so you see that the difference here is that you have a Linux kernel and you",
    "start": "346990",
    "end": "353479"
  },
  {
    "start": "347000",
    "end": "347000"
  },
  {
    "text": "have a virtual machine and that virtual machine you run at your container so the virtual machine has its own unique",
    "start": "353479",
    "end": "360110"
  },
  {
    "text": "kernel color containers has a this lightweight kernel and I on top of that",
    "start": "360110",
    "end": "366169"
  },
  {
    "text": "you have your application so if you something goes wrong with that Linux kernel the other host Linux kernel",
    "start": "366169",
    "end": "372050"
  },
  {
    "text": "doesn't get compromised and the other Linux kernels don't get compromised either on for the other containers so",
    "start": "372050",
    "end": "380510"
  },
  {
    "start": "380000",
    "end": "380000"
  },
  {
    "text": "you can see the cauda has a trade-off between you know being fast and isolation so it's not quite as fast as a",
    "start": "380510",
    "end": "387229"
  },
  {
    "text": "regular container but if you have regular containers you I mean if you",
    "start": "387229",
    "end": "393349"
  },
  {
    "text": "have a second profile it slows down your container but yeah but you know the way most people run regular containers it's not us it's",
    "start": "393349",
    "end": "400120"
  },
  {
    "text": "actually faster than running cata containers and it's not as low as a regular virtual machine because it's",
    "start": "400120",
    "end": "405819"
  },
  {
    "text": "lightweight lightweight kernel and it's some lightweight virtual machine so",
    "start": "405819",
    "end": "411009"
  },
  {
    "start": "410000",
    "end": "410000"
  },
  {
    "text": "requirements for card are containers either very metal or nested virtualization obviously running on",
    "start": "411009",
    "end": "416169"
  },
  {
    "text": "Linux you can use public cloud providers like GCP or Asher but they support",
    "start": "416169",
    "end": "422199"
  },
  {
    "text": "necessary translation they don't have bare metal offerings right now we need oh yes you can use either your metal",
    "start": "422199",
    "end": "427840"
  },
  {
    "text": "instances and you can also use I five metal instances that are in the works and for private cloud you can run it",
    "start": "427840",
    "end": "434500"
  },
  {
    "text": "with anything OpenStack or you can use very anything bare metal or the supports",
    "start": "434500",
    "end": "439659"
  },
  {
    "text": "first next to virtualization and of course for platform anything kubernetes",
    "start": "439659",
    "end": "445300"
  },
  {
    "text": "with to orchestrate your workloads with would cry or container D or you can also",
    "start": "445300",
    "end": "450639"
  },
  {
    "text": "use plain daughter when you first install cotta containers you can just",
    "start": "450639",
    "end": "456190"
  },
  {
    "start": "452000",
    "end": "452000"
  },
  {
    "text": "run this utility cut a runtime cut a check and then it'll tell you whether you can run counter containers in that",
    "start": "456190",
    "end": "461860"
  },
  {
    "text": "host or not and if you run when around coordinate is you can use this cutout deploy utility and github and",
    "start": "461860",
    "end": "469030"
  },
  {
    "text": "automatically installed counter containers on all of your nodes or you can follow the cutter installation guide",
    "start": "469030",
    "end": "475029"
  },
  {
    "text": "likewise with docker you can also follow your color installation guide on github so contain Edition v2 so the problem",
    "start": "475029",
    "end": "484330"
  },
  {
    "text": "with cotta containers is that you have a lot of processes you have a cutter shim you have a kind of proxy you have a kind",
    "start": "484330",
    "end": "491169"
  },
  {
    "text": "of agent inside the VM so what containers you simply do this is it allows you to just have a single process",
    "start": "491169",
    "end": "499569"
  },
  {
    "text": "per pod and add container shim will handle the i/o and as opposed to this",
    "start": "499569",
    "end": "505509"
  },
  {
    "text": "cutter same process and then you will not have a kind of proxy if you use this be Sox support that became available and",
    "start": "505509",
    "end": "512320"
  },
  {
    "text": "1.1 or 1.2 and then also the quatre CLI doesn't need to be run CD compatible so",
    "start": "512320",
    "end": "522370"
  },
  {
    "start": "522000",
    "end": "522000"
  },
  {
    "text": "this is what it looks like with containers you need to before you have to see if you have a lot of processes you have a kind of container diem for",
    "start": "522370",
    "end": "529210"
  },
  {
    "text": "every single container in a pod and then also you have a cottage scene for every single container in a pod going through",
    "start": "529210",
    "end": "535840"
  },
  {
    "text": "a proxy and then you you see that you need a shame for the cada agent and you",
    "start": "535840",
    "end": "542080"
  },
  {
    "text": "assume for every single container in your pod so after you see that it got",
    "start": "542080",
    "end": "547090"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "simplified a lot more so this will be available in 1.5 and so you have a",
    "start": "547090",
    "end": "553800"
  },
  {
    "text": "continuum v2 and then that's handling the i/o is communicating where every",
    "start": "553800",
    "end": "558820"
  },
  {
    "text": "container and the pod and also communicating with the agent so there's",
    "start": "558820",
    "end": "566080"
  },
  {
    "text": "a beam Avila containers since we only actually have one working cliquey you can do the countdown timing for me so as",
    "start": "566080",
    "end": "573850"
  },
  {
    "text": "you heard one of the ways you can actually improve your container experience in terms of security is by",
    "start": "573850",
    "end": "581410"
  },
  {
    "text": "minimizing the amount of kernel surface you actually exposed to the system calls so part of what nabla containers was",
    "start": "581410",
    "end": "589450"
  },
  {
    "text": "based on was the idea somewhat similar to what G visor does that if you can",
    "start": "589450",
    "end": "594520"
  },
  {
    "text": "take parts of the kernel up here I suppose I should do it over there for you people isn't as well you can",
    "start": "594520",
    "end": "601870"
  },
  {
    "text": "actually move some parts of the system call from their natural place and the Linux kernel up into this what's called",
    "start": "601870",
    "end": "608890"
  },
  {
    "text": "an a blue tender which is basically a unicorn alight lib operating system thing and do emulation G visor is doing",
    "start": "608890",
    "end": "615610"
  },
  {
    "text": "almost exactly the same thing the only real difference between G visor and Yoona kernels is that you know kernels",
    "start": "615610",
    "end": "621130"
  },
  {
    "text": "are existing technology hopefully with more of the bugs worked out that we actually repurpose for running inside a",
    "start": "621130",
    "end": "627940"
  },
  {
    "text": "container as a library operating system G visor is exactly the same thing except",
    "start": "627940",
    "end": "632950"
  },
  {
    "text": "it's a new thing written in go and as we all know the main problems with new code as security people keep saying is the",
    "start": "632950",
    "end": "639280"
  },
  {
    "text": "most new stuff you write the more bugs you actually put in the code so all code goes through this",
    "start": "639280",
    "end": "644350"
  },
  {
    "text": "sort of exponential decay curve where the most number of bugs sit in the code at the instant it's released by the",
    "start": "644350",
    "end": "649750"
  },
  {
    "text": "developers and they go down over time as more bugs are found so using an existing",
    "start": "649750",
    "end": "654970"
  },
  {
    "text": "library OS kernel we can actually hopefully take something that is slightly more in the middle of that bug",
    "start": "654970",
    "end": "660970"
  },
  {
    "text": "cycle on the end and emulate most of the system calls and what this means is at the bottom of nabla containers we",
    "start": "660970",
    "end": "668530"
  },
  {
    "text": "actually have only seven system calls that we actually project into the Linux kernel so we've reduced the system call",
    "start": "668530",
    "end": "674560"
  },
  {
    "text": "surface from the huge 300 all the way down to seven and we can actually experimentally prove that this gives us",
    "start": "674560",
    "end": "682000"
  },
  {
    "text": "a much better what's called horizontal attack profile of the Linux kernel so an",
    "start": "682000",
    "end": "687580"
  },
  {
    "text": "attack profile is basically the number of lines of code you traverse multiplied by the bug density of that code and that",
    "start": "687580",
    "end": "694930"
  },
  {
    "text": "gives you a number that corresponds to the insecurities of your process of your per thing whatever you're running the",
    "start": "694930",
    "end": "701290"
  },
  {
    "text": "higher this number the more insecure you are horizontal attack profile is where",
    "start": "701290",
    "end": "706750"
  },
  {
    "text": "you actually hit the common shared components of the system and you have to do a traversal path through them down",
    "start": "706750",
    "end": "713170"
  },
  {
    "text": "and up to actually get whatever effect you're trying to do in your web server to function and the reason horizontal is",
    "start": "713170",
    "end": "720580"
  },
  {
    "text": "the problematic one is because it's a shared component if the user can come down and hit an exploit in the shared",
    "start": "720580",
    "end": "727180"
  },
  {
    "text": "component they can use that to compromise the entire physical system remember Ricoh told you that the kernel",
    "start": "727180",
    "end": "732910"
  },
  {
    "text": "is actually shared amongst all containers on a bare metal system if that's what you actually do so the thing",
    "start": "732910",
    "end": "741820"
  },
  {
    "text": "that we actually measure with the horizontal attack profile is the portion of the kernel that you're actually",
    "start": "741820",
    "end": "747820"
  },
  {
    "text": "exploitable as you come through the system and obviously every system call on this diagram is inside the kernel so",
    "start": "747820",
    "end": "754540"
  },
  {
    "text": "it represents a potential horizontal exploit so these 300 system calls in an",
    "start": "754540",
    "end": "759550"
  },
  {
    "text": "ordinary container contribute fairly enormous Lee to your horizontal attack profile just reducing it to says of 7",
    "start": "759550",
    "end": "765790"
  },
  {
    "text": "system calls effectively reduces your horizontal attack profile by pretty much",
    "start": "765790",
    "end": "771350"
  },
  {
    "text": "50 times which we can actually show somewhat in the measurements so the way",
    "start": "771350",
    "end": "777740"
  },
  {
    "start": "776000",
    "end": "776000"
  },
  {
    "text": "it's constructed as I said is so if you went to just in Cormac stalk he told you",
    "start": "777740",
    "end": "782750"
  },
  {
    "text": "that all code has to be modified for Yuna kernels because it's linked with the library operating system this is",
    "start": "782750",
    "end": "788300"
  },
  {
    "text": "actually untrue but the reason that's untrue is because most of you in this room like what are called web languages",
    "start": "788300",
    "end": "794360"
  },
  {
    "text": "web languages run on top of an interpreter so the way we get your web languages to work is that we modify the",
    "start": "794360",
    "end": "801019"
  },
  {
    "text": "interpreters link with the eunich earn 'l but your web language stuff goes on top of it so we can run nodejs",
    "start": "801019",
    "end": "807470"
  },
  {
    "text": "Redis nginx code all of that can actually be run unmodified inside the",
    "start": "807470",
    "end": "812839"
  },
  {
    "text": "unit kernel tender but if you wanted to run something like a vanilla C program",
    "start": "812839",
    "end": "817940"
  },
  {
    "text": "that would have to be modified and fortunately very few web programmers today actually write C code so most of",
    "start": "817940",
    "end": "825050"
  },
  {
    "text": "the code you write will actually run unmodified inside nabla then we use this",
    "start": "825050",
    "end": "830180"
  },
  {
    "text": "thing called run Trump run which is effectively a net bsd kernel that actually does the glue layer that gets",
    "start": "830180",
    "end": "836660"
  },
  {
    "text": "you between the application and the sort of solar v and the tender and the tender",
    "start": "836660",
    "end": "841790"
  },
  {
    "text": "is the thing that sits at the bottom and actually translates what solo v does down into what the Linux kernel expects",
    "start": "841790",
    "end": "848660"
  },
  {
    "text": "and the reason we need this tender thing is because we're running these things as pure containers there is no",
    "start": "848660",
    "end": "854209"
  },
  {
    "text": "virtualization layer underneath and run prong and the net BSD expect to be run",
    "start": "854209",
    "end": "859579"
  },
  {
    "text": "on top of a virtual machine so the tender converts from virtual machine into the Linux system calls and this",
    "start": "859579",
    "end": "866089"
  },
  {
    "text": "gives us the ability to run this thing purely inside a container and obviously",
    "start": "866089",
    "end": "872389"
  },
  {
    "start": "869000",
    "end": "869000"
  },
  {
    "text": "nablas requirements are pretty much the same as almost any other environment so",
    "start": "872389",
    "end": "878870"
  },
  {
    "text": "we can run and we ideally would run on regular bare metal obviously the operating system should be Linux but one",
    "start": "878870",
    "end": "885829"
  },
  {
    "text": "of the interesting things about nabla is that actually because we only use seven system calls and they're pretty generic",
    "start": "885829",
    "end": "892009"
  },
  {
    "text": "system calls almost any POSIX thing can actually run on them so in theory nabla",
    "start": "892009",
    "end": "897680"
  },
  {
    "text": "will run your applications unmodified on a Windows machine as well just using the seven system course in the",
    "start": "897680",
    "end": "904250"
  },
  {
    "text": "windows POSIX interface and something I didn't even consider because basically nowadays everybody of this conference",
    "start": "904250",
    "end": "910730"
  },
  {
    "text": "pretty much recognizes that Linux is almost the universality of the cloud but coming from IBM I did get one of the AIX",
    "start": "910730",
    "end": "917690"
  },
  {
    "text": "guys to sidle up to me and say would this system actually work on AIX as well",
    "start": "917690",
    "end": "923120"
  },
  {
    "text": "and the answer is absolutely of course there's no reason it has to be Linux kernel underneath there as long as you",
    "start": "923120",
    "end": "929330"
  },
  {
    "text": "can supply these seven system calls it can actually be an AIX kernel and then I said ax is still a thing and he said oh",
    "start": "929330",
    "end": "936500"
  },
  {
    "text": "yeah because he's part of the AIX group but the point is that we can use this narrowness of the system call interface",
    "start": "936500",
    "end": "942860"
  },
  {
    "text": "to get some universality here we can probably run on more things than Linux and obviously then we can run on any",
    "start": "942860",
    "end": "949370"
  },
  {
    "text": "public cloud because almost every public cloud is Linux or provides Linux interfaces if it's Azure we can run on",
    "start": "949370",
    "end": "955160"
  },
  {
    "text": "almost all the private clouds and we can run on almost all of the platforms provided the kubernetes thing has been",
    "start": "955160",
    "end": "961250"
  },
  {
    "text": "modified with the runtime class which Rico will actually talk about later the",
    "start": "961250",
    "end": "967310"
  },
  {
    "start": "965000",
    "end": "965000"
  },
  {
    "text": "requirements we currently have for nabla are this thing called run and C because every different runtime currently has a",
    "start": "967310",
    "end": "973250"
  },
  {
    "text": "different run C so we've got a run and C for run nabla containers divisor has run",
    "start": "973250",
    "end": "978500"
  },
  {
    "text": "SC for their run secure containers and so on but once we actually get the runtime class we can actually run them",
    "start": "978500",
    "end": "984860"
  },
  {
    "text": "all in a standard way and obviously we can run them with docker as well just using the particular runtime specifier",
    "start": "984860",
    "end": "991610"
  },
  {
    "text": "as long as you've got the docker version that actually accepts run C so",
    "start": "991610",
    "end": "996820"
  },
  {
    "text": "side-by-side comparison we can do this together these are some of the metrics that we actually did this is somewhat of",
    "start": "996820",
    "end": "1003339"
  },
  {
    "start": "999000",
    "end": "999000"
  },
  {
    "text": "a repetition of what you saw in the previous talk these are actually throughput metrics and the red at the",
    "start": "1003339",
    "end": "1009339"
  },
  {
    "text": "top is pure docker this is all running on bare metal so it didn't look at any virtualization penalties here which is",
    "start": "1009339",
    "end": "1015190"
  },
  {
    "text": "the most interesting use case and docker one is the bare metal one that we're all",
    "start": "1015190",
    "end": "1020440"
  },
  {
    "text": "chasing it's the high result so docker on bare metal as you can see the 2d",
    "start": "1020440",
    "end": "1025449"
  },
  {
    "text": "Weiser results are actually sitting down here and that mirror is pretty much what was seen in the last performance talk",
    "start": "1025449",
    "end": "1030970"
  },
  {
    "text": "JEE visors performance particularly on benchmarks like Redis get set Python tornado node Express is",
    "start": "1030970",
    "end": "1036780"
  },
  {
    "text": "not terribly good we actually have done the differential between this is actually the P trace G Visor and this is",
    "start": "1036780",
    "end": "1044939"
  },
  {
    "text": "the KVM G visor so as you can see if you have a significant system called penalty",
    "start": "1044940",
    "end": "1050010"
  },
  {
    "text": "P traces losses you a lot more performance than actually trying to do the KBM interface does and then you can",
    "start": "1050010",
    "end": "1057480"
  },
  {
    "text": "actually see cata containers here in all of these so by and large the difference between quatre and docker is not that",
    "start": "1057480",
    "end": "1064170"
  },
  {
    "text": "high which is sort of pretty much also what the previous talks told you and then for nabla containers nabla raw is",
    "start": "1064170",
    "end": "1072750"
  },
  {
    "text": "actually running in the KVM alike interface babbler container is actually running it through the standard",
    "start": "1072750",
    "end": "1079250"
  },
  {
    "text": "tenderized container interfaces and again the performance penalty is something but it's not as much as sort",
    "start": "1079250",
    "end": "1086250"
  },
  {
    "text": "of factors of two or three it's down in the percentile regions for almost all of",
    "start": "1086250",
    "end": "1092280"
  },
  {
    "text": "these throughput tests so I described a",
    "start": "1092280",
    "end": "1098070"
  },
  {
    "text": "bit what horizontal attack profile was but basically it's an attempt to measure",
    "start": "1098070",
    "end": "1103530"
  },
  {
    "text": "security in any system so this this measure doesn't just work for nabla it works for almost any system that claims",
    "start": "1103530",
    "end": "1110160"
  },
  {
    "text": "to have security what it's looking for is to ask how much code does the system",
    "start": "1110160",
    "end": "1115770"
  },
  {
    "text": "run through and multiply that by the bug density in the code and come up with a number corresponding to what your",
    "start": "1115770",
    "end": "1121380"
  },
  {
    "text": "vulnerability potentially is and then the horizontal piece of it looks at what your vulnerability is and the shared",
    "start": "1121380",
    "end": "1127590"
  },
  {
    "text": "piece that would actually give you a security violation which would effectively be a containment breach",
    "start": "1127590",
    "end": "1133220"
  },
  {
    "text": "it was done by IBM research because I got pretty tired I've been in containers",
    "start": "1133220",
    "end": "1138720"
  },
  {
    "text": "a long time and the low level of them and we've had endless arguments with hypervisor people about our container",
    "start": "1138720",
    "end": "1144660"
  },
  {
    "text": "secure our containers not secure in the early days IBM bluemix which is the old",
    "start": "1144660",
    "end": "1149730"
  },
  {
    "text": "IBM cloud was the world's first actually container bare metal cloud which meant",
    "start": "1149730",
    "end": "1155610"
  },
  {
    "text": "your containers were not running on a virtual machine they were actually running on native bare metal it was",
    "start": "1155610",
    "end": "1161280"
  },
  {
    "text": "actually built using the OpenStack docker Nova interface",
    "start": "1161280",
    "end": "1167740"
  },
  {
    "text": "which is something that really doesn't exist in our days so nowadays we were all about kubernetes in the cloud but in",
    "start": "1167740",
    "end": "1173590"
  },
  {
    "text": "those early days who are about docker but the point is that a bare-metal cloud",
    "start": "1173590",
    "end": "1179350"
  },
  {
    "text": "actually gives you far more performance and control than almost anything else so as Justin was saying in his talk",
    "start": "1179350",
    "end": "1185200"
  },
  {
    "text": "previously bare metal containers are things we all want to aim for so IBM initially aimed at them first but",
    "start": "1185200",
    "end": "1192030"
  },
  {
    "text": "everybody gets frightened by the fact that we have these problems with horizontal containment and forcing",
    "start": "1192030",
    "end": "1198460"
  },
  {
    "text": "customers to use virtual machines as one of the ways that cloud service providers can take this from being our problem as",
    "start": "1198460",
    "end": "1204760"
  },
  {
    "text": "a cloud service provider to your problem as a customer however if you think about the trends in clouds today the idea is",
    "start": "1204760",
    "end": "1212470"
  },
  {
    "text": "actually to reverse that we should be taking away more of your problems than actually pushing them back onto you",
    "start": "1212470",
    "end": "1217840"
  },
  {
    "text": "which is why clouds going towards bare metal would actually be a good thing the",
    "start": "1217840",
    "end": "1223390"
  },
  {
    "text": "way we actually measured it inside the Linux kernel is just to use F trace F traces just tells you as a trace of",
    "start": "1223390",
    "end": "1230320"
  },
  {
    "text": "everything that comes through the Linux kernel how many functions are called and you just multiply that by the bug",
    "start": "1230320",
    "end": "1235930"
  },
  {
    "text": "density which for the Lexx kernel horizontal piece we assume to be uniform it's not quite true we as a I'm actually",
    "start": "1235930",
    "end": "1242260"
  },
  {
    "text": "a driver developer for Linux I gotta confess that about 80% of Linux is bugs do tend to be in drivers the the rest of",
    "start": "1242260",
    "end": "1249760"
  },
  {
    "text": "the kernel only has about 20% of the bugs but in my defense I have to say that 80% of the Linux kernel is drivers",
    "start": "1249760",
    "end": "1256240"
  },
  {
    "text": "so on that measure potentially perhaps we're all uniform and obviously the",
    "start": "1256240",
    "end": "1262030"
  },
  {
    "text": "runtimes you can do this with and not just in a blur it scatter Docherty visor anything and these are the results so",
    "start": "1262030",
    "end": "1268720"
  },
  {
    "start": "1267000",
    "end": "1267000"
  },
  {
    "text": "this is looking at the actual footprint inside the kernel of all of this and as",
    "start": "1268720",
    "end": "1274690"
  },
  {
    "text": "you can see the interesting thing is the docker is not actually you'd expect it to have the highest possible footprint",
    "start": "1274690",
    "end": "1279970"
  },
  {
    "text": "and I should also stress that this is docker running an application so the docker here is not using all 300 system",
    "start": "1279970",
    "end": "1287740"
  },
  {
    "text": "calls that's why it's pretty low what this is showing is that if you could get a perfect set calm profile which lots of",
    "start": "1287740",
    "end": "1294070"
  },
  {
    "text": "people will claim can't be done and if you claim that I'll set Jessie Frizzell on you because she claims it can but if you could do it this is what",
    "start": "1294070",
    "end": "1301400"
  },
  {
    "text": "the banding sort of horizontal attack profile of docker would be right so the",
    "start": "1301400",
    "end": "1307370"
  },
  {
    "text": "point to make is that this is the bounding horizontal attack profile of cata right and these two are again not",
    "start": "1307370",
    "end": "1314929"
  },
  {
    "text": "very different if you talk to hypervisor people they would usually tell you that a hypervisor because it's only got about",
    "start": "1314929",
    "end": "1321140"
  },
  {
    "text": "you know ten hyper calls and a container has 300 system calls should be thirty times more secure than a container",
    "start": "1321140",
    "end": "1327919"
  },
  {
    "text": "that's not what these figures show primarily because this docker instance is not using all of the system calls and",
    "start": "1327919",
    "end": "1333890"
  },
  {
    "text": "there are actually reasons why hypervisors actually use much more of",
    "start": "1333890",
    "end": "1339260"
  },
  {
    "text": "the kernel interface than they let on through the hyper calls it's why any vulnerability and KVM is almost",
    "start": "1339260",
    "end": "1344929"
  },
  {
    "text": "instantly a fatal vulnerability of containment and hypervisor so on the horizontal attack profile the difference",
    "start": "1344929",
    "end": "1351590"
  },
  {
    "text": "here is only around 20% is in the or 30% that's not not significantly I mean on",
    "start": "1351590",
    "end": "1358520"
  },
  {
    "text": "some of the tests where docker uses more system calls I mean cata always sort of hides around",
    "start": "1358520",
    "end": "1364760"
  },
  {
    "text": "this line primarily it just depends how many functions inside the hyper calls",
    "start": "1364760",
    "end": "1370160"
  },
  {
    "text": "your exciting docker actually bounces around pretty significantly depending on the number of system calls it uses in",
    "start": "1370160",
    "end": "1375919"
  },
  {
    "text": "the test the interesting thing on this is that pretty universally G visor is on",
    "start": "1375919",
    "end": "1381740"
  },
  {
    "text": "some of its incarnations higher than docker that means that technically G visor is using more system calls than",
    "start": "1381740",
    "end": "1388160"
  },
  {
    "text": "docker is which looks like a paradoxical result how the hell is it doing this and the reason is G visor is implemented",
    "start": "1388160",
    "end": "1395870"
  },
  {
    "text": "entirely on a go runtime and it turns out that the go runtime is pretty profligate in the way the user system",
    "start": "1395870",
    "end": "1401840"
  },
  {
    "text": "calls so as its translating the kernel into go it's actually making more system calls than the system calls are",
    "start": "1401840",
    "end": "1408169"
  },
  {
    "text": "translated it's an interesting question as to whether the system calls it makes their exploitable or not and we'll get",
    "start": "1408169",
    "end": "1413960"
  },
  {
    "text": "into that but right right at the moment just on the horizontal attack profile G visor is actually more vulnerable than",
    "start": "1413960",
    "end": "1420559"
  },
  {
    "text": "docker and obviously since we tuned a blur against this horizontal profile",
    "start": "1420559",
    "end": "1425809"
  },
  {
    "text": "measure so we have a lead on almost everybody doing this because we invented the measure published it but then we tuned our",
    "start": "1425809",
    "end": "1432380"
  },
  {
    "text": "system to it nabla is sitting at about half of what katidis for most of the",
    "start": "1432380",
    "end": "1438680"
  },
  {
    "text": "time and the point is this is a pure container runtime with no virtualization that on the only known measure of",
    "start": "1438680",
    "end": "1445490"
  },
  {
    "text": "security profiles is showing itself to be about 50% more secure than a hypervisor which is the achievement we",
    "start": "1445490",
    "end": "1451670"
  },
  {
    "text": "were looking for there's also one interesting thing that we have on our",
    "start": "1451670",
    "end": "1457580"
  },
  {
    "start": "1453000",
    "end": "1453000"
  },
  {
    "text": "website which is a while back using the idea that you could actually",
    "start": "1457580",
    "end": "1463910"
  },
  {
    "text": "look at what interfaces the system was using in the kernel one of the things I set an IBM sort of in term was okay so",
    "start": "1463910",
    "end": "1470440"
  },
  {
    "text": "just saying that we can do this is one thing can you prove to me we can exploit it so look at the way that quatre is",
    "start": "1470440",
    "end": "1476960"
  },
  {
    "text": "using the interfaces and come up with an exploit based on an existing CVE point of basing it on an existing CV is",
    "start": "1476960",
    "end": "1483380"
  },
  {
    "text": "the exploit I show you only works and older kernels everybody has patched it now so it wouldn't work on the public",
    "start": "1483380",
    "end": "1489080"
  },
  {
    "text": "cloud you're taking it to so I'm trying to be a good white hat citizen instead of a black hat but the point is that it",
    "start": "1489080",
    "end": "1495200"
  },
  {
    "text": "turns out the 9-p interface in Katter is pretty much a handoff from the guest of the host any file system exploit i find",
    "start": "1495200",
    "end": "1503000"
  },
  {
    "text": "in the host kernel can actually be exploited over the 9p interface and kata and so this exploit actually shows",
    "start": "1503000",
    "end": "1509870"
  },
  {
    "text": "somebody firing up a binary running inside a virtual machine and cata and then oops Singh the host kernel",
    "start": "1509870",
    "end": "1516380"
  },
  {
    "text": "primarily because it does it through a fast an exploit but this is a classic illustration of the problem of",
    "start": "1516380",
    "end": "1523510"
  },
  {
    "text": "virtualization as an answer to your security which is that unless you're very careful about the interfaces you",
    "start": "1523510",
    "end": "1529820"
  },
  {
    "text": "don't get as much security as you think you're getting because some of the things we do to get containers to run in",
    "start": "1529820",
    "end": "1535280"
  },
  {
    "text": "virtual machines pokes holes straight through this virtual machine interface and makes you vulnerable again and this",
    "start": "1535280",
    "end": "1541790"
  },
  {
    "text": "was just an example of that so we'll get on to a side-by-side comparison Ricardo can go first because it's his",
    "start": "1541790",
    "end": "1548990"
  },
  {
    "text": "talk effectively he wrote the slides I'm not very good at this type of slide where yeah so in terms of comparing kata",
    "start": "1548990",
    "end": "1557170"
  },
  {
    "text": "now that you know you have Cara has that VM isolation and table has a solo we",
    "start": "1557170",
    "end": "1564700"
  },
  {
    "text": "have no VM isolation whatsoever we are a pure containerized system we have something that was designed to run on a",
    "start": "1564700",
    "end": "1570670"
  },
  {
    "text": "VM but we stripped out all the virtualization and it runs container native now and they cut up you can run",
    "start": "1570670",
    "end": "1578290"
  },
  {
    "text": "all the system calls we know no modification because there's a Linux kernel inside the VM right and with so",
    "start": "1578290",
    "end": "1586180"
  },
  {
    "text": "nabla is some binaries cannot be run unmodified because you have to link with",
    "start": "1586180",
    "end": "1591490"
  },
  {
    "text": "the Unicode so if your programming and a low-level language like C C double plus you have to modify your binary before it",
    "start": "1591490",
    "end": "1598540"
  },
  {
    "text": "will run inside a nabla tender however if you're running a something webby that",
    "start": "1598540",
    "end": "1603730"
  },
  {
    "text": "sits right at the top and has its own interpreter we can just modify the interpreter and the code that you care",
    "start": "1603730",
    "end": "1609700"
  },
  {
    "text": "about will run unmodified so we do not have complete university unlike cata",
    "start": "1609700",
    "end": "1614950"
  },
  {
    "text": "which does and for Kara we need the bare metal or nester virtualization and nabla",
    "start": "1614950",
    "end": "1623200"
  },
  {
    "text": "we just don't need any virtualization of tools so we run equally well either on bare metal or with nested virtualization",
    "start": "1623200",
    "end": "1629830"
  },
  {
    "text": "just because we don't use any of the virtualization calls but again as I said",
    "start": "1629830",
    "end": "1634840"
  },
  {
    "text": "I think the less virtualization you have the better you are because the more",
    "start": "1634840",
    "end": "1640420"
  },
  {
    "text": "responsible you're making your cloud service provider which is a good thing in my book Makara you have an",
    "start": "1640420",
    "end": "1646150"
  },
  {
    "text": "established community it's been around for over a year and even longer if you count the years of clear containers and",
    "start": "1646150",
    "end": "1653350"
  },
  {
    "text": "hyper data sage yeah where I mean this is a research project I'm not kidding you you've been to many talks about",
    "start": "1653350",
    "end": "1659890"
  },
  {
    "text": "doing this in production I probably is a research project I should be able to",
    "start": "1659890",
    "end": "1664930"
  },
  {
    "text": "tell you that obviously it's not in production however I know one person who is actually using nabla and production",
    "start": "1664930",
    "end": "1671290"
  },
  {
    "text": "surprisingly enough I didn't recommend they do it and I won't name them and shame them here but if one person is",
    "start": "1671290",
    "end": "1676720"
  },
  {
    "text": "actually running it in production but obviously ideally this is still a cutting-edge research project not",
    "start": "1676720",
    "end": "1682690"
  },
  {
    "text": "something you should be deploying on for everyday use and wakara you can run any type of Linux workload it's come",
    "start": "1682690",
    "end": "1689280"
  },
  {
    "text": "out-of-the-box with any type of got workload you can run on Linux yeah",
    "start": "1689280",
    "end": "1695130"
  },
  {
    "text": "enabler the tender is based on net bsd which means in theory we have a mismatch between linux and that bsd but the job",
    "start": "1695130",
    "end": "1702300"
  },
  {
    "text": "of this thing called run prong that you saw inside the delta is actually to shim that difference so effectively or any",
    "start": "1702300",
    "end": "1709590"
  },
  {
    "text": "program that runs on linux can be linked with enabler ten with the nabla a romper",
    "start": "1709590",
    "end": "1714810"
  },
  {
    "text": "on runtime run on the tender and it should all work but the key thing here is should we have explored a lot of",
    "start": "1714810",
    "end": "1720570"
  },
  {
    "text": "different applications including things like the go runtime the Python runtime so far it all seems to work but because",
    "start": "1720570",
    "end": "1727380"
  },
  {
    "text": "we're based on net bsd instead of linux at some point you might expect to find a problem down that round there cool let's",
    "start": "1727380",
    "end": "1734640"
  },
  {
    "text": "talk about kubernetes and how you can run this with kubernetes although both of these runtimes so you can run it with",
    "start": "1734640",
    "end": "1740850"
  },
  {
    "text": "either a crier or a container cry or support it's not quite there yet but it will be there at some point and",
    "start": "1740850",
    "end": "1745890"
  },
  {
    "text": "you can use the runtime class in kubernetes that became available and we're dead it's 112 so kind of",
    "start": "1745890",
    "end": "1752880"
  },
  {
    "text": "requirements again it's just we talked about that before per medal on extra virtualization you can use key emu or",
    "start": "1752880",
    "end": "1759750"
  },
  {
    "text": "newly available in 1.4 and emu which is faster stripped-down key um you",
    "start": "1759750",
    "end": "1766640"
  },
  {
    "text": "potentially you can run it with fire crackers they're both communities are talking with each other and eventually",
    "start": "1766640",
    "end": "1772110"
  },
  {
    "text": "their goal is to have cada run with firecracker and with Nava you either",
    "start": "1772110",
    "end": "1778950"
  },
  {
    "text": "bare metal or a virtual machine so anything so it can run in any any nest",
    "start": "1778950",
    "end": "1785090"
  },
  {
    "text": "environment so let's talk about the runtime class this is work what I call",
    "start": "1785090",
    "end": "1791370"
  },
  {
    "text": "the ec2 or kubernetes just because in just because in easy easy to you have",
    "start": "1791370",
    "end": "1798570"
  },
  {
    "text": "all kinds of different instance types so with the renter class you given all",
    "start": "1798570",
    "end": "1804420"
  },
  {
    "text": "kinds of different runtime classes right so you can mix and match and the types of workloads so you can mix in your",
    "start": "1804420",
    "end": "1811260"
  },
  {
    "text": "cluster depending on the type of runtimes are you using",
    "start": "1811260",
    "end": "1816480"
  },
  {
    "text": "so what he said we said you can run different runtimes and kubernetes available in kubernetes 1:12 and you",
    "start": "1816480",
    "end": "1825270"
  },
  {
    "text": "need to enable the feature gate installed customer service definition it covered a days you need to configure container D the CRI and then you need to",
    "start": "1825270",
    "end": "1833490"
  },
  {
    "text": "specify that runtime class name in the pod when you instantiate it so this is what it looks like running a runtime",
    "start": "1833490",
    "end": "1839970"
  },
  {
    "text": "class specification this is a single string and you need that runtime handler which is another string that gets",
    "start": "1839970",
    "end": "1846900"
  },
  {
    "text": "configure at the CRI level in container the or cryo and then when you want to",
    "start": "1846900",
    "end": "1852690"
  },
  {
    "text": "run your part you specify a string in and this could be something like add our runtime or novel at runtime and then",
    "start": "1852690",
    "end": "1860790"
  },
  {
    "start": "1860000",
    "end": "1860000"
  },
  {
    "text": "with the container Li configuration to specify the again the string which is a",
    "start": "1860790",
    "end": "1866520"
  },
  {
    "text": "CRI configuration and then the binary of the runtime that you want to use so",
    "start": "1866520",
    "end": "1872580"
  },
  {
    "start": "1872000",
    "end": "1872000"
  },
  {
    "text": "there's a feature in the works in sick note they will allow you to identify the runtimes automatically on the nose so as",
    "start": "1872580",
    "end": "1880260"
  },
  {
    "text": "soon as the cubelet boots up and register registers with the cube api server it will tell it you know what",
    "start": "1880260",
    "end": "1887250"
  },
  {
    "text": "kind of runtimes are available on that node and they will be available in curators by the time you issue like a",
    "start": "1887250",
    "end": "1893790"
  },
  {
    "text": "command like a cube CTL computer it'll get runtime command and then you'll get",
    "start": "1893790",
    "end": "1901080"
  },
  {
    "text": "the list of runtimes so briefly workloads that you can run with these runtimes anything goes so user going to",
    "start": "1901080",
    "end": "1908970"
  },
  {
    "text": "a load balancer it's just an example sto and running with unbeli proxy in",
    "start": "1908970",
    "end": "1914880"
  },
  {
    "text": "kubernetes other types of workloads api's credential store databases and",
    "start": "1914880",
    "end": "1921030"
  },
  {
    "start": "1916000",
    "end": "1916000"
  },
  {
    "text": "applications for big data and analytics example of running micro services this",
    "start": "1921030",
    "end": "1926640"
  },
  {
    "start": "1924000",
    "end": "1924000"
  },
  {
    "text": "is micro service with a back in and use of the database and kubernetes using a kubernetes ingress",
    "start": "1926640",
    "end": "1934680"
  },
  {
    "start": "1934000",
    "end": "1934000"
  },
  {
    "text": "credential store this is an opposite of what type of workload you would think you run in these types of runtimes",
    "start": "1934680",
    "end": "1941420"
  },
  {
    "text": "because they're not necessarily untrusted it's more like a trusted workload but it also goes with these if",
    "start": "1941420",
    "end": "1947640"
  },
  {
    "text": "you want to keep your workloads isolated where you want I have a user come through TLS and then",
    "start": "1947640",
    "end": "1952650"
  },
  {
    "text": "in the backend your services going through TLS as well through - to a data",
    "start": "1952650",
    "end": "1958650"
  },
  {
    "text": "store that can be anything like Cassandra did datastore at CD or Amazon",
    "start": "1958650",
    "end": "1963720"
  },
  {
    "text": "s3 an example or relational databases also can be run with something to be",
    "start": "1963720",
    "end": "1969900"
  },
  {
    "start": "1965000",
    "end": "1965000"
  },
  {
    "text": "natives and any of these runtimes and a brief word on multi-tenancy so so this",
    "start": "1969900",
    "end": "1976590"
  },
  {
    "start": "1973000",
    "end": "1973000"
  },
  {
    "text": "these runtimes will allow you to run in a cluster having maybe two namespaces",
    "start": "1976590",
    "end": "1983100"
  },
  {
    "text": "for different tenants and in an isolated way so in a single cluster so allowing",
    "start": "1983100",
    "end": "1989310"
  },
  {
    "text": "you to have that isolation across the board so briefly demo so we'll show you",
    "start": "1989310",
    "end": "1995940"
  },
  {
    "start": "1995000",
    "end": "1995000"
  },
  {
    "text": "Cara and Avila runtimes running together with kubernetes the runtime class and I'll show you that both runtimes are",
    "start": "1995940",
    "end": "2001490"
  },
  {
    "text": "running five minutes or something so I",
    "start": "2001490",
    "end": "2009170"
  },
  {
    "text": "have two definitions here for a power in Cara and it specifies the runtime class",
    "start": "2009170",
    "end": "2017060"
  },
  {
    "text": "cat a runtime here and I also have power in nabla and it specifies table runtime",
    "start": "2017060",
    "end": "2025460"
  },
  {
    "text": "here so these are pre-configured ahead of time to run in a in the CRI in our in",
    "start": "2025460",
    "end": "2033980"
  },
  {
    "text": "a kubernetes cluster running in DCP and this GCP cluster has nestled virtualization enable so I'm gonna go",
    "start": "2033980",
    "end": "2039980"
  },
  {
    "text": "ahead and up like these and I'm gonna do",
    "start": "2039980",
    "end": "2048200"
  },
  {
    "text": "keep CTL cat parts and you see that containers are being created you see the",
    "start": "2048200",
    "end": "2054919"
  },
  {
    "text": "nebula container got created this is novel and odious base container and to",
    "start": "2054919",
    "end": "2064070"
  },
  {
    "text": "show you that nebula is running I will show the logs and you can see the solo",
    "start": "2064070",
    "end": "2070100"
  },
  {
    "text": "guru actually boot it put it up here and then it's actually listening on port 8080 and then for cotta containers I",
    "start": "2070100",
    "end": "2078138"
  },
  {
    "text": "have to assess age - I'm going to go ahead and SSH to each one of my kubernetes nodes and run",
    "start": "2078139",
    "end": "2083540"
  },
  {
    "text": "a kata runtime list command and then and",
    "start": "2083540",
    "end": "2089629"
  },
  {
    "text": "one of the notes these this POTUS it was running and it will show you that the",
    "start": "2089630",
    "end": "2096290"
  },
  {
    "text": "containers are there for Okada so that's SS aging - so they're they're",
    "start": "2096290",
    "end": "2102890"
  },
  {
    "text": "my kind of runtime pods so yeah so this is a runtime class and you can run both",
    "start": "2102890",
    "end": "2111350"
  },
  {
    "text": "runtimes together on a single cluster pretty cool stuff so there's talk about",
    "start": "2111350",
    "end": "2117140"
  },
  {
    "text": "implementing and maybe more capabilities in the runtime class that I will specify maybe nabla has some certain",
    "start": "2117140",
    "end": "2123290"
  },
  {
    "text": "capabilities and Kara has some other certain capabilities and so that people can choose which one they want to use",
    "start": "2123290",
    "end": "2130160"
  },
  {
    "text": "and in other runtimes like divisor or any of the newer runtimes that get",
    "start": "2130160",
    "end": "2135590"
  },
  {
    "text": "created so the future for some of these",
    "start": "2135590",
    "end": "2143870"
  },
  {
    "text": "runtimes so in terms of hypervisors",
    "start": "2143870",
    "end": "2148940"
  },
  {
    "start": "2146000",
    "end": "2146000"
  },
  {
    "text": "maybe support for okada in others like Zion or VMware and hyper-v and maybe in",
    "start": "2148940",
    "end": "2154490"
  },
  {
    "text": "the public cloud support nest virtualization in AWS which is not supported now bare metal offerings in DC",
    "start": "2154490",
    "end": "2161000"
  },
  {
    "text": "and Google Cloud and asher and possibly support on the kubernetes engines from",
    "start": "2161000",
    "end": "2167240"
  },
  {
    "text": "all these cloud providers and also five Proctor support and cotta containers so like I mentioned before both communities",
    "start": "2167240",
    "end": "2173390"
  },
  {
    "text": "are getting together and trying to make cat I work with fire cracker and then",
    "start": "2173390",
    "end": "2178850"
  },
  {
    "text": "more features in terms of public support for networking and CPUs and then the",
    "start": "2178850",
    "end": "2185690"
  },
  {
    "text": "nebula containers obviously the thing that we come to the here for is kubernetes integration run ANSI is okay",
    "start": "2185690",
    "end": "2193400"
  },
  {
    "text": "but we it could be better obviously we need better universality if you want to run C applications although I'm not sure",
    "start": "2193400",
    "end": "2199880"
  },
  {
    "text": "we can get there we need lots of public cloud support we need more tooling",
    "start": "2199880",
    "end": "2205310"
  },
  {
    "text": "around the images if you want to create your own rump run images instead of using our preset ones even if you're",
    "start": "2205310",
    "end": "2211130"
  },
  {
    "text": "building things like Python and nodejs sometime you actually want to tune the Python and nodejs interpreters for the runtime",
    "start": "2211130",
    "end": "2217990"
  },
  {
    "text": "environment and obviously build listen server lists to applications were looking at nabla and in the ax use case",
    "start": "2217990",
    "end": "2224920"
  },
  {
    "text": "that I didn't actually put in here is obviously you can use nabla to bring containers to operating systems which",
    "start": "2224920",
    "end": "2230770"
  },
  {
    "text": "didn't previously had it have it because everything that sits inside nabla is actually fully containerized and if it",
    "start": "2230770",
    "end": "2236800"
  },
  {
    "text": "will run on anything with those seven system calls it's actually a ready-made prepackaged portable container runtime",
    "start": "2236800",
    "end": "2243460"
  },
  {
    "text": "for even operating systems that haven't even heard of containers and the main thing that we're looking at in the",
    "start": "2243460",
    "end": "2249580"
  },
  {
    "text": "future is one of the problems with nabla if you actually look at what's going on is that we're emulating most of the",
    "start": "2249580",
    "end": "2254980"
  },
  {
    "text": "system calls so effectively we're committing the hypervisor fault because any system call we emulate we've pushed",
    "start": "2254980",
    "end": "2260950"
  },
  {
    "text": "up into the layer that you effectively own as the person who's renting this instance the ideal would be to try and",
    "start": "2260950",
    "end": "2268000"
  },
  {
    "text": "actually push more back to the cloud service provider so make them responsible for the tender and so low",
    "start": "2268000",
    "end": "2273790"
  },
  {
    "text": "five and everything which we can do but one of the things we're actually going to be looking at is two different things",
    "start": "2273790",
    "end": "2278890"
  },
  {
    "text": "one is the idea of a horizontal attack profile where the actual measurement is",
    "start": "2278890",
    "end": "2285010"
  },
  {
    "text": "a number of bugs traversed a number of lines of code traversed x bug density is not quite right because if you look at",
    "start": "2285010",
    "end": "2292060"
  },
  {
    "text": "the CVE sprinkling throughout linux some system calls are much more vulnerable on",
    "start": "2292060",
    "end": "2297460"
  },
  {
    "text": "CVEs than others and this means that some interfaces are actually much safer than others one of the things we",
    "start": "2297460",
    "end": "2303609"
  },
  {
    "text": "actually need to do to refine the horizontal attack profile is to multiply by safety of the interface which will",
    "start": "2303609",
    "end": "2309520"
  },
  {
    "text": "give us a much more accurate number and then from my point of view as the kernel engine much more interesting is asking",
    "start": "2309520",
    "end": "2315430"
  },
  {
    "text": "the question these system calls that sit inside the Linux kernel right at the moment they're unsafe on a horizontal",
    "start": "2315430",
    "end": "2321099"
  },
  {
    "text": "attack profile because the kernel runs in the same address space any escape from that system call compromises the",
    "start": "2321099",
    "end": "2327730"
  },
  {
    "text": "entire kernel and therefore the entire system one thing that's interesting to look at from an operating system point",
    "start": "2327730",
    "end": "2334060"
  },
  {
    "text": "of view is could we actually run the Linux kernel and multiple address spaces for multiple different things that were",
    "start": "2334060",
    "end": "2339369"
  },
  {
    "text": "using it because if I were actually running in an address space that was different from Buttle ID to the actual",
    "start": "2339369",
    "end": "2345849"
  },
  {
    "text": "process runtime for my system cool I could still compromise that system call breakout but",
    "start": "2345849",
    "end": "2352000"
  },
  {
    "text": "the only thing I get access to is the thing I've already compromised anyway which is the container I can't actually",
    "start": "2352000",
    "end": "2357280"
  },
  {
    "text": "break horizontally into another container so effectively it allows you to run proper Linux kernel system calls",
    "start": "2357280",
    "end": "2364420"
  },
  {
    "text": "in a safe environment and this is one of the things we'll actually be looking at as future-looking research later and",
    "start": "2364420",
    "end": "2371190"
  },
  {
    "start": "2369000",
    "end": "2369000"
  },
  {
    "text": "obviously we have lots of future workloads for everything we're running out of time so we'll skip over them we",
    "start": "2371190",
    "end": "2378309"
  },
  {
    "start": "2376000",
    "end": "2376000"
  },
  {
    "text": "are looking at doing this on server list for both of us firecracker is the sort of thing for him and actually",
    "start": "2378309",
    "end": "2384460"
  },
  {
    "text": "firecracker is useful for me because the civilus people a year ago on I showed them nabla and IBM told me to go away",
    "start": "2384460",
    "end": "2390520"
  },
  {
    "text": "now suddenly they've come back to me and are interested in whether we have an ounce of firecracker or not it's amazing",
    "start": "2390520",
    "end": "2396069"
  },
  {
    "start": "2395000",
    "end": "2395000"
  },
  {
    "text": "what marketing does these are some of the resources they'll be online in the slides and with that we'd like to say",
    "start": "2396069",
    "end": "2401170"
  },
  {
    "text": "thank you and call for questions if you have any so I know we're over time but",
    "start": "2401170",
    "end": "2410170"
  },
  {
    "text": "okay so the question is have we tried",
    "start": "2410170",
    "end": "2415930"
  },
  {
    "text": "running docker inside and a below the answer is yes and it doesn't really work very well the reason it doesn't work",
    "start": "2415930",
    "end": "2421569"
  },
  {
    "text": "very well is because the go-go run time was not very that the problem with docker is that it claims to be written",
    "start": "2421569",
    "end": "2427329"
  },
  {
    "text": "in go which is an easy language to put a tender under but the big problem is it makes lots of system calls outside of",
    "start": "2427329",
    "end": "2433720"
  },
  {
    "text": "the go environment using that go system cool thing and they are much harder to poke through things like namespace",
    "start": "2433720",
    "end": "2439390"
  },
  {
    "text": "creation for instance so what we think we can do is the compromises we can't really get docker running but we can get",
    "start": "2439390",
    "end": "2446020"
  },
  {
    "text": "things like the process of kubernetes the Kubler and things we might actually be able to get them running in nabla",
    "start": "2446020",
    "end": "2451390"
  },
  {
    "text": "using proxies which as I told you were dangerous but it should be possible okay",
    "start": "2451390",
    "end": "2456819"
  },
  {
    "text": "okay one more question but this will be the last one",
    "start": "2456819",
    "end": "2461400"
  },
  {
    "text": "yeah the question is are cars using key um you and what's the reason why it's",
    "start": "2478220",
    "end": "2484790"
  },
  {
    "text": "using key mu I believe it for historical reasons so there is any mu support in",
    "start": "2484790",
    "end": "2492110"
  },
  {
    "text": "one point for which is a stripped-down key um you so you can make use of that and again like I mentioned we were",
    "start": "2492110",
    "end": "2498530"
  },
  {
    "text": "working with the Firecracker community that will allow us to around you know cut out with firecrackers so",
    "start": "2498530",
    "end": "2504740"
  },
  {
    "text": "firecrackers are stripped down EMM that has just whatever three three",
    "start": "2504740",
    "end": "2509870"
  },
  {
    "text": "devices yeah so very lightweight okay and with that we need to let you get to",
    "start": "2509870",
    "end": "2514910"
  },
  {
    "text": "lunch so the good guys can tidy up the hall thank you very much thank you so your dinner",
    "start": "2514910",
    "end": "2521080"
  }
]