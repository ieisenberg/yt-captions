[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "good morning everyone I guess it's time to get started so",
    "start": "8469",
    "end": "14090"
  },
  {
    "text": "welcome thanks you thanks everyone for coming my name is Michelle and this is",
    "start": "14090",
    "end": "20880"
  },
  {
    "text": "John we are both six stores contributors and are here today to talk about our",
    "start": "20880",
    "end": "26340"
  },
  {
    "text": "firsthand experiences with fixing a major security vulnerability in kubernetes well take you through the",
    "start": "26340",
    "end": "34410"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "whole process from when the issue was first reported to when the fix was publicly released along the way we will",
    "start": "34410",
    "end": "42149"
  },
  {
    "text": "deep dive into the technical details of the vulnerability and the fix suggest",
    "start": "42149",
    "end": "48960"
  },
  {
    "text": "some best practices that you can follow in your kubernetes clusters and also",
    "start": "48960",
    "end": "54149"
  },
  {
    "text": "give a sneak peek at future directions were exploring in kubernetes to make it",
    "start": "54149",
    "end": "59609"
  },
  {
    "text": "more secure so first how do we become",
    "start": "59609",
    "end": "65100"
  },
  {
    "text": "aware of this issue well in late November of 2017 a kubernetes issue was",
    "start": "65100",
    "end": "74040"
  },
  {
    "start": "69000",
    "end": "69000"
  },
  {
    "text": "opened with the title pop security policy can be sidestepped with innocent",
    "start": "74040",
    "end": "79439"
  },
  {
    "text": "and Peter and subpath the issue then goes on to describe the exploit in full",
    "start": "79439",
    "end": "86130"
  },
  {
    "text": "detail with the pod examples and output I want to emphasize here that this is",
    "start": "86130",
    "end": "95040"
  },
  {
    "text": "not the proper channel to report security issues in kubernetes github",
    "start": "95040",
    "end": "100890"
  },
  {
    "text": "issues are public and don't allow time for us to privately develop and release",
    "start": "100890",
    "end": "106950"
  },
  {
    "text": "a fix before others can start exploiting the vulnerability luckily for us a",
    "start": "106950",
    "end": "113219"
  },
  {
    "text": "member of the kubernetes product security team quickly spotted the issue and cleared out all the details so if",
    "start": "113219",
    "end": "122460"
  },
  {
    "text": "you ever think you have found a security issue in kubernetes please follow our",
    "start": "122460",
    "end": "128700"
  },
  {
    "text": "documented process on kubernetes i/o it starts with sending an email to security",
    "start": "128700",
    "end": "136020"
  },
  {
    "text": "at kubernetes IO with the details of the issue and a member of the product",
    "start": "136020",
    "end": "141360"
  },
  {
    "text": "security team will evaluate the impact respond back to you and then coordinate",
    "start": "141360",
    "end": "146910"
  },
  {
    "text": "the development of the fix and its release so now I'm going to go into the",
    "start": "146910",
    "end": "154950"
  },
  {
    "text": "technical details of this particular vulnerability that we worked on to",
    "start": "154950",
    "end": "161550"
  },
  {
    "start": "161000",
    "end": "161000"
  },
  {
    "text": "understand the vulnerability some basic background knowledge on volumes is",
    "start": "161550",
    "end": "167040"
  },
  {
    "text": "needed so to illustrate this I have an example pots back here and this pot is",
    "start": "167040",
    "end": "173370"
  },
  {
    "text": "using a volume when this pod gets scheduled to a node one of the first",
    "start": "173370",
    "end": "178590"
  },
  {
    "text": "steps is to set up and mount all the volumes that the pod uses onto the host",
    "start": "178590",
    "end": "184620"
  },
  {
    "text": "system and in this case this pot is using an empty dirt volume which is just",
    "start": "184620",
    "end": "191580"
  },
  {
    "text": "scratched based on the local file system so as part of the empty ters setup what",
    "start": "191580",
    "end": "197880"
  },
  {
    "text": "we do is we create a directory on the host file system underneath the pod",
    "start": "197880",
    "end": "204030"
  },
  {
    "text": "volumes root path as shown here and once",
    "start": "204030",
    "end": "209430"
  },
  {
    "text": "all the volumes have been set up and mounted on the host system then it's",
    "start": "209430",
    "end": "215370"
  },
  {
    "text": "time to start the containers to start the container cubelet needs to tell the",
    "start": "215370",
    "end": "222180"
  },
  {
    "text": "container run time in in this case it could be docker and needs to you need to",
    "start": "222180",
    "end": "228959"
  },
  {
    "text": "tell docker where on the host file system this volume is located at and",
    "start": "228959",
    "end": "235280"
  },
  {
    "text": "where in the container it should be mounted to you can also see in this",
    "start": "235280",
    "end": "242610"
  },
  {
    "text": "prospect that there is a sub path of data one specified what this sub path",
    "start": "242610",
    "end": "248970"
  },
  {
    "text": "lets you do is instead of mounting the root directory of the volume into the",
    "start": "248970",
    "end": "255390"
  },
  {
    "text": "container it lets you mount a subdirectory of the volume into the",
    "start": "255390",
    "end": "261239"
  },
  {
    "text": "container and to handle this what we do in kubernetes is instead of telling",
    "start": "261239",
    "end": "267870"
  },
  {
    "text": "docker the root directory of the volume we append the sub path to that root",
    "start": "267870",
    "end": "275340"
  },
  {
    "text": "directory and give that combined path to doctor so if we take this",
    "start": "275340",
    "end": "282759"
  },
  {
    "text": "specific example we'll take the root directory at the volume from before append the sub path of data 1 to it give",
    "start": "282759",
    "end": "290830"
  },
  {
    "text": "this entire path to doctor and then docker will go ahead take that path and",
    "start": "290830",
    "end": "298590"
  },
  {
    "text": "bind mount it into the container at the containers mount path of slash mount",
    "start": "298590",
    "end": "303789"
  },
  {
    "text": "slash data so can anyone take a guess as",
    "start": "303789",
    "end": "309819"
  },
  {
    "start": "307000",
    "end": "307000"
  },
  {
    "text": "to where the vulnerability it might be",
    "start": "309819",
    "end": "314490"
  },
  {
    "text": "anyone what about the sub path okay if",
    "start": "316080",
    "end": "325180"
  },
  {
    "text": "you put a dot dot before the sub path we thought about that so I think you can't actually specified dot thoughts in their",
    "start": "325180",
    "end": "332229"
  },
  {
    "text": "path does how safe symbolic Lake gray",
    "start": "332229",
    "end": "337479"
  },
  {
    "text": "yes someone paid attention to the title this talk great so if you take if you pay careful",
    "start": "337479",
    "end": "348289"
  },
  {
    "text": "attention here you'll notice that this data one which is specified in the sub path is a file that's created by the",
    "start": "348289",
    "end": "356210"
  },
  {
    "text": "user inside their volume and because it's created by the user that means this file can be anything",
    "start": "356210",
    "end": "364059"
  },
  {
    "text": "including a symlink so if we pretend",
    "start": "364059",
    "end": "370059"
  },
  {
    "text": "let's say this sim link points to something on the root file system of the",
    "start": "370059",
    "end": "375409"
  },
  {
    "text": "host then when we end up giving this path to docker docker will go and bind",
    "start": "375409",
    "end": "382460"
  },
  {
    "text": "mouth whatever that's in link points to into the container instead of the your",
    "start": "382460",
    "end": "388879"
  },
  {
    "text": "actual volume that you specified so now yon is going to go demonstrate",
    "start": "388879",
    "end": "394219"
  },
  {
    "start": "394000",
    "end": "394000"
  },
  {
    "text": "exactly how you can create such a sin link thanks so I hope it's readable",
    "start": "394219",
    "end": "401659"
  },
  {
    "text": "I have kubernetes 1.9 dot oh that is still vulnerable and I have a port",
    "start": "401659",
    "end": "408969"
  },
  {
    "text": "that's just very innocent pot that has one empty air volume called my volume as",
    "start": "408969",
    "end": "416180"
  },
  {
    "text": "on initial examples and I have an init on container that creates a simmering",
    "start": "416180",
    "end": "424099"
  },
  {
    "text": "inside the volume this tubing is called data one and it points to the root of",
    "start": "424099",
    "end": "430789"
  },
  {
    "text": "the container file system when the inner container is done the Simek is created I",
    "start": "430789",
    "end": "436909"
  },
  {
    "text": "start a real container that doesn't do anything useful but it uses the same",
    "start": "436909",
    "end": "443899"
  },
  {
    "text": "link as a sub path in MN and it mounted into M&T data inside the container so if",
    "start": "443899",
    "end": "452749"
  },
  {
    "text": "I create the pot it there in container",
    "start": "452749",
    "end": "461360"
  },
  {
    "text": "starts it creates a symlink and the real container starts and if I look inside the container I have the my volume there",
    "start": "461360",
    "end": "469370"
  },
  {
    "text": "and it contains what I created it contains just the same link to",
    "start": "469370",
    "end": "475350"
  },
  {
    "text": "root of the container and there is nothing wrong with the ceiling but the",
    "start": "475350",
    "end": "481470"
  },
  {
    "text": "magic happens if I look at the sub path data one it contains root of some file",
    "start": "481470",
    "end": "489180"
  },
  {
    "text": "system but it's not the host host is much smaller and this is sorry it's not",
    "start": "489180",
    "end": "495450"
  },
  {
    "text": "the root of the container and the sub path contains root of the host so I can",
    "start": "495450",
    "end": "501810"
  },
  {
    "text": "look around and I can see for example docker socket so I can kill or start any",
    "start": "501810",
    "end": "509880"
  },
  {
    "text": "containers on the note and the whole note is compromised I can do whatever I",
    "start": "509880",
    "end": "515789"
  },
  {
    "text": "can look at water Lape cubelet pots I don't run so many pots but I can see all",
    "start": "515789",
    "end": "525900"
  },
  {
    "text": "volumes mounted on the node I can see all the secrets mounted on the node if",
    "start": "525900",
    "end": "531660"
  },
  {
    "text": "there is database running with I don't know critical numbers I can see them and",
    "start": "531660",
    "end": "537140"
  },
  {
    "text": "all this is just because we don't check symlinks in kubernetes so if I look at",
    "start": "537140",
    "end": "544470"
  },
  {
    "text": "the host on the host this my volume is",
    "start": "544470",
    "end": "549540"
  },
  {
    "text": "10 PS mom did some very morally pure blood and what cubelet does it gives the",
    "start": "549540",
    "end": "561270"
  },
  {
    "text": "software it gives the data one two docker to mount inside a container and",
    "start": "561270",
    "end": "568550"
  },
  {
    "text": "dr. or any container runtime bind mounts the ceiling to the container but the",
    "start": "568550",
    "end": "574620"
  },
  {
    "text": "ceiling is avoided on the host so",
    "start": "574620",
    "end": "579500"
  },
  {
    "text": "so the host root filesystem gets exposed",
    "start": "586180",
    "end": "591590"
  },
  {
    "text": "to the container so how did they fix it the issues was reported just before cup",
    "start": "591590",
    "end": "599900"
  },
  {
    "text": "corn in Austin last year so in Austin we get together and brainstorm some",
    "start": "599900",
    "end": "605930"
  },
  {
    "text": "solutions and I'm going to illustrate our thought process because it wasn't easy to fix this issue the first and",
    "start": "605930",
    "end": "613670"
  },
  {
    "start": "612000",
    "end": "612000"
  },
  {
    "text": "most obvious solution was to check ceilings before we give them to contain runtime so if user wants volume my",
    "start": "613670",
    "end": "621500"
  },
  {
    "text": "volume and sub path data 1 we compute the whole path of the volume that user",
    "start": "621500",
    "end": "629930"
  },
  {
    "text": "once we receive all symlinks and if see if we see that the ceiling points",
    "start": "629930",
    "end": "635390"
  },
  {
    "text": "somewhere outside of the volume that means that the user is trying to chip very few such volume and we won't start",
    "start": "635390",
    "end": "644060"
  },
  {
    "text": "the pot if the sub path is not something at all which is what symlink instead in",
    "start": "644060",
    "end": "650270"
  },
  {
    "text": "that we get the same path as the result we can see the sub path points inside",
    "start": "650270",
    "end": "657950"
  },
  {
    "text": "the volume and it's safe to use so we allow that and if the stop bath is",
    "start": "657950",
    "end": "664280"
  },
  {
    "text": "symlink but the ceiling points inside the volume we want to allow that to because people",
    "start": "664280",
    "end": "670640"
  },
  {
    "text": "already use that and it's pretty useful feature of kubernetes so we want to allow this use case so when we evaluate",
    "start": "670640",
    "end": "677750"
  },
  {
    "text": "this we either allow or deny the pot and give the final destination of the",
    "start": "677750",
    "end": "684740"
  },
  {
    "text": "symlink to contain the runtime this is obviously wrong because user can modesty",
    "start": "684740",
    "end": "693710"
  },
  {
    "text": "or modify in the directories that we are checking so if we check that whatever",
    "start": "693710",
    "end": "700880"
  },
  {
    "text": "user wants to use the sub half is safe to use it's inside the volume the act of",
    "start": "700880",
    "end": "706370"
  },
  {
    "text": "the check user can remove for example in",
    "start": "706370",
    "end": "711680"
  },
  {
    "text": "this case directory C and replace it with a symlink to a bad place to the objector host and we give this a stir",
    "start": "711680",
    "end": "719960"
  },
  {
    "text": "to be /c to contain runtime but at this time see is a symlink to the host and again user can get",
    "start": "719960",
    "end": "730820"
  },
  {
    "text": "access to some bad places we don't want to we don't want them to use so we were",
    "start": "730820",
    "end": "739970"
  },
  {
    "text": "thinking we need to freeze the filesystem somehow while we are checking the siblings and when we are giving the",
    "start": "739970",
    "end": "747200"
  },
  {
    "start": "740000",
    "end": "740000"
  },
  {
    "text": "final destination to continue runtime on Windows the situation is pretty",
    "start": "747200",
    "end": "752990"
  },
  {
    "text": "straightforward because they have create five Cisco which not only creates file but with the",
    "start": "752990",
    "end": "759080"
  },
  {
    "text": "right parameters it opens them and it can open them exclusively so they can't",
    "start": "759080",
    "end": "764450"
  },
  {
    "text": "be replaced with symlinks so on Windows we just lock each component of the path",
    "start": "764450",
    "end": "770090"
  },
  {
    "text": "we check it's not a symlink and when everything is alright it looks",
    "start": "770090",
    "end": "775580"
  },
  {
    "text": "valid and it's inside the volume we give it to container runtime and container",
    "start": "775580",
    "end": "780980"
  },
  {
    "text": "runtime stars container after the container runs we unlock the path that's",
    "start": "780980",
    "end": "786500"
  },
  {
    "text": "easy on Linux we don't have such luxury we can't freeze file system while we can",
    "start": "786500",
    "end": "793370"
  },
  {
    "text": "but it would stop the application that's running and uses the file system and we",
    "start": "793370",
    "end": "799520"
  },
  {
    "text": "don't want to do that so if we were",
    "start": "799520",
    "end": "804590"
  },
  {
    "text": "thinking how how to make things safer and the solution was to use bind mounts",
    "start": "804590",
    "end": "810170"
  },
  {
    "start": "810000",
    "end": "810000"
  },
  {
    "text": "you don't want if you don't know what the bank mount is it takes piece of",
    "start": "810170",
    "end": "817030"
  },
  {
    "text": "filesystem hierarchy for example directory and makes it available somewhere else so in this example we",
    "start": "817030",
    "end": "824660"
  },
  {
    "text": "bind mount the volume and it's a path my",
    "start": "824660",
    "end": "830000"
  },
  {
    "text": "volume / a / b / see that's the step pass that user wants to make available",
    "start": "830000",
    "end": "835730"
  },
  {
    "text": "to his container and we bind mount to a safe place that it's outside of users",
    "start": "835730",
    "end": "841940"
  },
  {
    "text": "control user can modify my volume and its content but user can't modify this",
    "start": "841940",
    "end": "848810"
  },
  {
    "text": "safe place and benefit of this bind mount is that after the vine mount this my balloon ABC",
    "start": "848810",
    "end": "857360"
  },
  {
    "text": "shows the same content like the safe place but use and if user changes",
    "start": "857360",
    "end": "863900"
  },
  {
    "text": "anything in ABC for example create some bed symlinks it doesn't influence the safe place the safe place is still safe",
    "start": "863900",
    "end": "870620"
  },
  {
    "text": "and it's still shows the original content of the volume so another very",
    "start": "870620",
    "end": "879170"
  },
  {
    "start": "878000",
    "end": "878000"
  },
  {
    "text": "naive and very wrong solution we check the same lines as before in validate",
    "start": "879170",
    "end": "885770"
  },
  {
    "text": "that the symlinks are quoting inside the volume and user is not trying to cheat",
    "start": "885770",
    "end": "890980"
  },
  {
    "text": "we bind mount the final destination of any sim link that you user used to a",
    "start": "890980",
    "end": "897170"
  },
  {
    "text": "safe place in this case it's something var lip cubed pots volume - that path and",
    "start": "897170",
    "end": "902180"
  },
  {
    "text": "something unique and we give this safe place to contain a run time instead of",
    "start": "902180",
    "end": "910390"
  },
  {
    "text": "content of the volume so this way we have a safe way how to give that path",
    "start": "910390",
    "end": "918740"
  },
  {
    "text": "volume to contain runtime but everything before the bank mount is still unsafe",
    "start": "918740",
    "end": "924190"
  },
  {
    "text": "while we are resolving siblings while we are checking the destination users still",
    "start": "924190",
    "end": "929600"
  },
  {
    "text": "can't modify content of his volume or her volume and do bad things there for a",
    "start": "929600",
    "end": "938870"
  },
  {
    "start": "938000",
    "end": "938000"
  },
  {
    "text": "long time we didn't know how to fix it properly but then if somebody suggested",
    "start": "938870",
    "end": "944720"
  },
  {
    "text": "a smart trick to open file descriptor of the sub path and bind file descriptors",
    "start": "944720",
    "end": "950960"
  },
  {
    "text": "instead of directories or files we start",
    "start": "950960",
    "end": "956570"
  },
  {
    "text": "the same like before we dissolve the same link a and what this gives us is",
    "start": "956570",
    "end": "966800"
  },
  {
    "text": "that at some point in time not so long ago user wanted to use directory a slash",
    "start": "966800",
    "end": "973880"
  },
  {
    "text": "b /c as the sub as the suppose volume it doesn't need to the the data one sibling",
    "start": "973880",
    "end": "979730"
  },
  {
    "text": "can be now completely different but at some point in the history it was the volume that user wanted",
    "start": "979730",
    "end": "986570"
  },
  {
    "text": "and now the goal is to open the last component of the path that means C and",
    "start": "986570",
    "end": "993820"
  },
  {
    "text": "gets its file descriptor we can't just do open ABC because it would resolve all",
    "start": "993820",
    "end": "1000100"
  },
  {
    "text": "the same links in the path and user could replace already a or b or c if",
    "start": "1000100",
    "end": "1005650"
  },
  {
    "text": "siblings and but we must do it smarter and we can open the last directory",
    "start": "1005650",
    "end": "1014440"
  },
  {
    "text": "that's not an recent role my volume user can see content of the directory inside",
    "start": "1014440",
    "end": "1020800"
  },
  {
    "text": "the airport's but they can't replace my volume itself if a symlink and then we safely dive in into a into B",
    "start": "1020800",
    "end": "1029740"
  },
  {
    "text": "into C we don't follow any same links and we get safe file descriptor of the",
    "start": "1029740",
    "end": "1038199"
  },
  {
    "text": "volume that user once wanted that was once reachable as a slash b /c it",
    "start": "1038200",
    "end": "1045520"
  },
  {
    "text": "doesn't need to be reachable as h / b s / c now because user can rename things",
    "start": "1045520",
    "end": "1051040"
  },
  {
    "text": "and move them but the point is user can move them only inside the pot they can't",
    "start": "1051040",
    "end": "1057310"
  },
  {
    "text": "escape the container right now so now we have the file descriptor of the thing",
    "start": "1057310",
    "end": "1064090"
  },
  {
    "text": "that user who want it to use and how do we feel every bind mount file",
    "start": "1064090",
    "end": "1070000"
  },
  {
    "text": "descriptors that not possible you can bind mount fires or directories but not file descriptors the Lance doesn't make sense but there is there's the trick if",
    "start": "1070000",
    "end": "1078280"
  },
  {
    "text": "you look at the proc file system of cubelet broke is basically virtual file",
    "start": "1078280",
    "end": "1087520"
  },
  {
    "text": "system that shows two numbers and statistics of all processes on linux",
    "start": "1087520",
    "end": "1092820"
  },
  {
    "text": "there is a virtual directory called FD that contains all of open file descriptors and if you look at item item",
    "start": "1092820",
    "end": "1100870"
  },
  {
    "text": "name 13 is a sim link to the the location of the file as open and the",
    "start": "1100870",
    "end": "1108580"
  },
  {
    "text": "sibling is not tied to the path it's tied to I know so whenever user moves A or B or C",
    "start": "1108580",
    "end": "1115270"
  },
  {
    "text": "inside the container the sealing follows to the nudist destination",
    "start": "1115270",
    "end": "1120789"
  },
  {
    "text": "and we might buy Mount this magic",
    "start": "1120789",
    "end": "1125809"
  },
  {
    "text": "symlink instead of ABC directly and what can",
    "start": "1125809",
    "end": "1131929"
  },
  {
    "text": "cattle does he atomic leads off the sim link it chooses the right destination of",
    "start": "1131929",
    "end": "1137510"
  },
  {
    "text": "the sim link and bind mount it to safe place so that's the whole trick we clean",
    "start": "1137510",
    "end": "1144710"
  },
  {
    "text": "things up and we give the safe place to contain run time show the capitulation",
    "start": "1144710",
    "end": "1154510"
  },
  {
    "text": "we didn't follow any siblings why we are opening the file descriptor of the sub",
    "start": "1154510",
    "end": "1161390"
  },
  {
    "text": "path that user wanted to use and we can be sure that user could not escape the",
    "start": "1161390",
    "end": "1166789"
  },
  {
    "text": "container by moving parts of the filesystem hierarchy inside the",
    "start": "1166789",
    "end": "1172190"
  },
  {
    "text": "container because we can move things only inside the container and then we gave the final sub path to the container",
    "start": "1172190",
    "end": "1180679"
  },
  {
    "text": "runtime safely it took us quite a long time to implement this solution this was",
    "start": "1180679",
    "end": "1189950"
  },
  {
    "text": "just the high-level idea there were many hurdles to climb right end-to-end test",
    "start": "1189950",
    "end": "1195250"
  },
  {
    "text": "fix the issue also on Windows and so on and how could we do that actually in",
    "start": "1195250",
    "end": "1203929"
  },
  {
    "start": "1201000",
    "end": "1201000"
  },
  {
    "text": "secret in kubernetes if we develop the fix in kubernetes / kubernetes",
    "start": "1203929",
    "end": "1209390"
  },
  {
    "text": "repository we could create PR there and develop the fix there but the development would be open and somebody",
    "start": "1209390",
    "end": "1215960"
  },
  {
    "text": "smart could see hey this is security related I can I can I can misuse it so",
    "start": "1215960",
    "end": "1222080"
  },
  {
    "text": "there is a kubernetes / kubernetes - security repository on github you can",
    "start": "1222080",
    "end": "1227179"
  },
  {
    "text": "look at it and you won't find anything there you get four or four it's private",
    "start": "1227179",
    "end": "1235549"
  },
  {
    "text": "only the security product security team can access it and they give access to",
    "start": "1235549",
    "end": "1240890"
  },
  {
    "text": "the repository only to selected people who need to fix security issues so in",
    "start": "1240890",
    "end": "1245960"
  },
  {
    "text": "this case it was me it was Michelle and Andy from Microsoft nobody else could",
    "start": "1245960",
    "end": "1251710"
  },
  {
    "text": "know about the you and we immediate immediately lost",
    "start": "1251710",
    "end": "1257429"
  },
  {
    "text": "access to the repository when the fix was released I don't I don't have access there I don't know what security issues",
    "start": "1257429",
    "end": "1263309"
  },
  {
    "text": "are being fixed there now I have no clue but the rest in the repository is the",
    "start": "1263309",
    "end": "1269429"
  },
  {
    "text": "same like in kubernetes so you create pull requests you can comment on them you get the CI that you are used to",
    "start": "1269429",
    "end": "1275309"
  },
  {
    "text": "the only difference to me was that locks from the CI who are in private buckets",
    "start": "1275309",
    "end": "1282059"
  },
  {
    "text": "accessible only to Google employees so I'm from Red Hat and I'm in Europe and if CI geo failed and I needed to wait",
    "start": "1282059",
    "end": "1289110"
  },
  {
    "text": "for Michele to wake up and tell me what's wrong and we needed to be careful",
    "start": "1289110",
    "end": "1294360"
  },
  {
    "text": "where we push things because if we pushed our code to our public Forks on",
    "start": "1294360",
    "end": "1301260"
  },
  {
    "text": "github again it would make the issue publicly available and all the development is coordinated by product",
    "start": "1301260",
    "end": "1308460"
  },
  {
    "text": "security team so as a developer I just follow orders and I don't need to worry about the security aspect of the thing I",
    "start": "1308460",
    "end": "1314610"
  },
  {
    "text": "have a safe place to develop the issue and do some tests when we had the fix it",
    "start": "1314610",
    "end": "1322289"
  },
  {
    "start": "1318000",
    "end": "1318000"
  },
  {
    "text": "was time to start thinking about releasing it and again it was",
    "start": "1322289",
    "end": "1327360"
  },
  {
    "text": "coordinated by product security team me as the developer I just follow orders and the products even with security team",
    "start": "1327360",
    "end": "1335940"
  },
  {
    "text": "talked to all the branch managers when it's a good time to release the fix and",
    "start": "1335940",
    "end": "1341480"
  },
  {
    "text": "also the security issue could be announced to private distributors list",
    "start": "1341480",
    "end": "1349289"
  },
  {
    "text": "which is a list of third-party kubernetes distributors these distributors and vendors they get the",
    "start": "1349289",
    "end": "1355409"
  },
  {
    "text": "fix and the issue before it's publicly released under Margot so they can",
    "start": "1355409",
    "end": "1360780"
  },
  {
    "text": "prepare the fix they can patch their products and they can publish the fix",
    "start": "1360780",
    "end": "1367049"
  },
  {
    "text": "after the are Margaux is lifted so all the products earth are safe then the",
    "start": "1367049",
    "end": "1376500"
  },
  {
    "text": "issue is public so the public disclosure happened four months after the initial",
    "start": "1376500",
    "end": "1382070"
  },
  {
    "start": "1378000",
    "end": "1378000"
  },
  {
    "text": "discovery on github so it took us four months to prepare everything",
    "start": "1382070",
    "end": "1388519"
  },
  {
    "text": "again this was coordinated but by product security team and all the",
    "start": "1389539",
    "end": "1396020"
  },
  {
    "text": "kubernetes versions as they were supported were patched and released within one hour after the disclosure",
    "start": "1396020",
    "end": "1405710"
  },
  {
    "text": "when this was done then all the people who were involved in the security fix",
    "start": "1405710",
    "end": "1410909"
  },
  {
    "text": "that means developers testers release team told the security they met together",
    "start": "1410909",
    "end": "1417090"
  },
  {
    "text": "and created post-motor document this post mortem is public you can read it",
    "start": "1417090",
    "end": "1423600"
  },
  {
    "text": "and it contains like what went wrong but then right what can be improved in the future",
    "start": "1423600",
    "end": "1430610"
  },
  {
    "text": "yeah and that's about it like at this point we lost our access to security repository so we don't know I",
    "start": "1431539",
    "end": "1438210"
  },
  {
    "text": "can't even check the history of the pull request and I'm handing over back to",
    "start": "1438210",
    "end": "1444029"
  },
  {
    "text": "Michel Google to tell you something about how to protect yourself from this",
    "start": "1444029",
    "end": "1449580"
  },
  {
    "text": "issue if something like that is found in the future so now I'm going to shift",
    "start": "1449580",
    "end": "1455700"
  },
  {
    "text": "gears and talk about some best practices that you can follow in your own",
    "start": "1455700",
    "end": "1460710"
  },
  {
    "text": "kubernetes clusters first I recommend that you don't run your containers as",
    "start": "1460710",
    "end": "1467940"
  },
  {
    "start": "1463000",
    "end": "1463000"
  },
  {
    "text": "the root user whenever possible for this particular vulnerability if a container",
    "start": "1467940",
    "end": "1475529"
  },
  {
    "text": "was exploited and got access to the hosts file system then the damage it",
    "start": "1475529",
    "end": "1482190"
  },
  {
    "text": "could have done would be limited to only those files that the user has",
    "start": "1482190",
    "end": "1487260"
  },
  {
    "text": "permissions to access so you can enforce this by creating a pod security policy",
    "start": "1487260",
    "end": "1495330"
  },
  {
    "text": "to require your pods run as non-root users and you can also restrict the UID",
    "start": "1495330",
    "end": "1501419"
  },
  {
    "text": "range that your containers can run as there is a caveat in that your",
    "start": "1501419",
    "end": "1508440"
  },
  {
    "text": "containers will still run with the route group ID so if your container was",
    "start": "1508440",
    "end": "1515279"
  },
  {
    "text": "exploited then it could still access files gave permission to that route group this",
    "start": "1515279",
    "end": "1521320"
  },
  {
    "text": "is being addressed in kubernetes 110 with the runners group Alfa feature which lets you specify what group you",
    "start": "1521320",
    "end": "1528730"
  },
  {
    "text": "want your containers to run us I also recommend that you use pod security",
    "start": "1528730",
    "end": "1534790"
  },
  {
    "text": "policy to restrict the types of volumes that your containers are allowed to use",
    "start": "1534790",
    "end": "1540900"
  },
  {
    "text": "now for this particular issue it might not have been very practical but because",
    "start": "1540900",
    "end": "1547210"
  },
  {
    "text": "you would have had to blacklist almost every single volume type except for the",
    "start": "1547210",
    "end": "1552850"
  },
  {
    "text": "empty durval Yume's but neither nevertheless I still recommend you try to restrict them",
    "start": "1552850",
    "end": "1559540"
  },
  {
    "text": "whenever possible especially when using hosts path volumes if you still have to",
    "start": "1559540",
    "end": "1565840"
  },
  {
    "text": "use hosts path volumes then you should at least set both the allowed host path",
    "start": "1565840",
    "end": "1571420"
  },
  {
    "text": "prefixes and the read-only setting it's very important to note that the allowed",
    "start": "1571420",
    "end": "1577600"
  },
  {
    "text": "host path prefix setting in pod security policy is only effective if you also",
    "start": "1577600",
    "end": "1583150"
  },
  {
    "text": "require that your containers mount them as read-only as well so now I'm going to",
    "start": "1583150",
    "end": "1591370"
  },
  {
    "text": "talk about some future directions that we're currently exploring in kubernetes",
    "start": "1591370",
    "end": "1597150"
  },
  {
    "text": "to using sandboxed containers this is",
    "start": "1597150",
    "end": "1603040"
  },
  {
    "text": "using technologies such as G visor and kado containers with the aim to prevent",
    "start": "1603040",
    "end": "1609250"
  },
  {
    "text": "this entire class of vulnerabilities from happening again in the future some",
    "start": "1609250",
    "end": "1616090"
  },
  {
    "text": "of this work is based off of a core principle that we follow at Google which",
    "start": "1616090",
    "end": "1621430"
  },
  {
    "text": "is that any untrusted code must be protected by at least two security",
    "start": "1621430",
    "end": "1626560"
  },
  {
    "text": "boundaries the basic idea here is that if any one of the layers security layers",
    "start": "1626560",
    "end": "1634480"
  },
  {
    "text": "gets compromised then there are still other layers that can provide isolation",
    "start": "1634480",
    "end": "1641790"
  },
  {
    "text": "so how can we apply this principle to protect us from the subpath loner",
    "start": "1642390",
    "end": "1647970"
  },
  {
    "text": "ability going back the exploit involved",
    "start": "1647970",
    "end": "1653070"
  },
  {
    "text": "making the host system follow siblings that were created by the user so if",
    "start": "1653070",
    "end": "1661560"
  },
  {
    "text": "instead we have a sandbox environment that can provide our additional security",
    "start": "1661560",
    "end": "1667980"
  },
  {
    "start": "1663000",
    "end": "1663000"
  },
  {
    "text": "boundary and we and we moved that processing of the untrusted sub paths",
    "start": "1667980",
    "end": "1675350"
  },
  {
    "text": "into the sandbox then any send links that we would end up resolving could",
    "start": "1675350",
    "end": "1682350"
  },
  {
    "text": "only resolve two paths contained inside that sandbox preventing access to the",
    "start": "1682350",
    "end": "1688110"
  },
  {
    "text": "hosts file system so this is an idea that we are currently investigating",
    "start": "1688110",
    "end": "1693960"
  },
  {
    "text": "today so this doesn't exist yet in kubernetes but expect to see some",
    "start": "1693960",
    "end": "1701700"
  },
  {
    "text": "movement over the next year or so right",
    "start": "1701700",
    "end": "1706980"
  },
  {
    "start": "1706000",
    "end": "1706000"
  },
  {
    "text": "so that is our full story I know that was a lot of information that we packed",
    "start": "1706980",
    "end": "1714030"
  },
  {
    "text": "into here so to summarize the key points first if you ever think you found the",
    "start": "1714030",
    "end": "1720210"
  },
  {
    "text": "security issue in kubernetes please responsibly disclose the issue by following our documented process next be",
    "start": "1720210",
    "end": "1729360"
  },
  {
    "text": "extra cautious when handling untrusted paths in your own programs we detailed",
    "start": "1729360",
    "end": "1734610"
  },
  {
    "text": "today two common vulnerabilities a sibling race and a time of checked a",
    "start": "1734610",
    "end": "1740850"
  },
  {
    "text": "time of use race and lastly asset restrictive policies in your kubernetes",
    "start": "1740850",
    "end": "1746700"
  },
  {
    "text": "clusters by default and design your applications to provide multiple security boundaries vulnerabilities are",
    "start": "1746700",
    "end": "1754950"
  },
  {
    "text": "bound to happen so the best mitigations you can take are to have multiple layers of Defense I also want to give a special",
    "start": "1754950",
    "end": "1764580"
  },
  {
    "start": "1762000",
    "end": "1762000"
  },
  {
    "text": "thanks to maximize and off who initially reported the issue to us and worked with us to make kubernetes",
    "start": "1764580",
    "end": "1771000"
  },
  {
    "text": "more secure so if anything we talked about today interest you",
    "start": "1771000",
    "end": "1777149"
  },
  {
    "text": "check out these links first is the link to the product security team which coordinates and handles all the security",
    "start": "1777149",
    "end": "1785039"
  },
  {
    "text": "issues in kubernetes they are looking to four new members so you can check out",
    "start": "1785039",
    "end": "1790799"
  },
  {
    "text": "their page on the process on how to join second is the secure container isolation",
    "start": "1790799",
    "end": "1797429"
  },
  {
    "text": "project this is the project that is looking into providing sandbox environments and there's actually a talk",
    "start": "1797429",
    "end": "1804719"
  },
  {
    "text": "later today in this very room on this project so if you're interested in this",
    "start": "1804719",
    "end": "1810539"
  },
  {
    "text": "topic at all you want to learn about all the new secure runtimes then please",
    "start": "1810539",
    "end": "1815639"
  },
  {
    "text": "check that out and with that we can open it up for questions yeah okay so the question was",
    "start": "1815639",
    "end": "1843419"
  },
  {
    "start": "1843000",
    "end": "1843000"
  },
  {
    "text": "how did when did we how did we actually decide when to make the fix public well",
    "start": "1843419",
    "end": "1849479"
  },
  {
    "text": "when we had the fix the product security",
    "start": "1849479",
    "end": "1854489"
  },
  {
    "text": "team has some rules when a security issue can be made public can be published like never disclosed and",
    "start": "1854489",
    "end": "1863969"
  },
  {
    "text": "issues on Fridays and yeah they just took a random date when all the branch",
    "start": "1863969",
    "end": "1873179"
  },
  {
    "text": "managers had I don't want to say that time they had time all the day but they",
    "start": "1873179",
    "end": "1879749"
  },
  {
    "text": "were there was no release in the progress process and there was enough time to do let the kubernetes vendors",
    "start": "1879749",
    "end": "1888389"
  },
  {
    "text": "know before the issue is published so they can fix their all these details are",
    "start": "1888389",
    "end": "1894359"
  },
  {
    "text": "on the products that executed team page there is a process they follow when they",
    "start": "1894359",
    "end": "1901200"
  },
  {
    "text": "release things and you can find all the details there in general though it's",
    "start": "1901200",
    "end": "1907649"
  },
  {
    "text": "it's I think it's a best practice to try to fix vulnerabilities as soon as",
    "start": "1907649",
    "end": "1913710"
  },
  {
    "text": "possible so that you reduce the chance of someone actually finding it and you",
    "start": "1913710",
    "end": "1919649"
  },
  {
    "text": "know exploiting it in the wild oh it's",
    "start": "1919649",
    "end": "1926129"
  },
  {
    "text": "quite small yes okay the question was so",
    "start": "1926129",
    "end": "1943109"
  },
  {
    "text": "we said it took about four months to develop the fix how much time was spent actually developing and testing to fix",
    "start": "1943109",
    "end": "1948779"
  },
  {
    "text": "versus the release process I would probably say like three and a half",
    "start": "1948779",
    "end": "1954629"
  },
  {
    "text": "months were spent fixing and testing the fix we went through probably four or",
    "start": "1954629",
    "end": "1959999"
  },
  {
    "text": "five different iterations of the fix until we arrived at one that we were",
    "start": "1959999",
    "end": "1965869"
  },
  {
    "text": "confident that would actually patch the issue oh yeah and that was this was also",
    "start": "1965869",
    "end": "1975749"
  },
  {
    "text": "it was initially disclosed over like Thanksgiving ish or after Thanksgiving",
    "start": "1975749",
    "end": "1981899"
  },
  {
    "text": "so and then like a bunch of people went on to Christmas break like for half a",
    "start": "1981899",
    "end": "1987419"
  },
  {
    "text": "month so yeah it kind of yep yes",
    "start": "1987419",
    "end": "1993769"
  },
  {
    "text": "okay so the question was like our initial we we learned a lot of things",
    "start": "2013550",
    "end": "2019980"
  },
  {
    "text": "from the initial the whole CI process and everything and is there anything we would like to see improved",
    "start": "2019980",
    "end": "2026340"
  },
  {
    "text": "I know yan definitely wants access to the private logs I will folks but that's basically all",
    "start": "2026340",
    "end": "2033510"
  },
  {
    "text": "everything else was super yeah I think this was one of the first",
    "start": "2033510",
    "end": "2039330"
  },
  {
    "text": "vulnerabilities where we really tested the CI infrastructure for the this",
    "start": "2039330",
    "end": "2045090"
  },
  {
    "text": "private repo so I think actually the first like two months of it was the test",
    "start": "2045090",
    "end": "2050220"
  },
  {
    "text": "and for team trying to like get everything the CI to work so but",
    "start": "2050220",
    "end": "2056970"
  },
  {
    "text": "definitely in the post-mortem document which is public there's a whole list of action items and stuff on how to improve",
    "start": "2056970",
    "end": "2063060"
  },
  {
    "text": "the process so you can check that out if you're interested I think we are over",
    "start": "2063060",
    "end": "2069540"
  },
  {
    "text": "time okay so you can find us yeah we'll be uh we'll probably off to the side or something if you want to ask more",
    "start": "2069540",
    "end": "2075690"
  },
  {
    "text": "questions thank you thank you",
    "start": "2075690",
    "end": "2079220"
  }
]