[
  {
    "start": "0",
    "end": "138000"
  },
  {
    "text": "hello and welcome to cucon Paris nice to see so many people here and that you",
    "start": "359",
    "end": "5720"
  },
  {
    "text": "like to join us to start off your cucon journey today with 10 years of kubernetes P Evolution that's really",
    "start": "5720",
    "end": "12040"
  },
  {
    "text": "awesome so actually my name is Rand hus I'm from redhead and uh I've have or we",
    "start": "12040",
    "end": "17880"
  },
  {
    "text": "have written a book together with Bim yeah hello everybody my name is Bill gam",
    "start": "17880",
    "end": "23039"
  },
  {
    "text": "um I'm product manager at tyrd where we are working um with uh project called",
    "start": "23039",
    "end": "28960"
  },
  {
    "text": "dapper that's me okay so let's get started we have a lot of stuff for you in the next 35 minutes for that just my",
    "start": "28960",
    "end": "37000"
  },
  {
    "text": "presenter here okay so what we are have done so we have written that book we have collected a certain set of patterns",
    "start": "37000",
    "end": "43640"
  },
  {
    "text": "that we think are useful for you if you are a user of kubernetes and um yeah so",
    "start": "43640",
    "end": "50360"
  },
  {
    "text": "you can get take this URL you find a free download of the book If you like it's a PDF format it's kindly sponsored",
    "start": "50360",
    "end": "56600"
  },
  {
    "text": "by redhead so yeah and everything that you find here you find also of course in the PDF and much much more so so we have",
    "start": "56600",
    "end": "63000"
  },
  {
    "text": "26 or seven patterns I know don't know and today we are going to present around six of",
    "start": "63000",
    "end": "68880"
  },
  {
    "text": "them um yeah but before I start some quick introductions what we mean with",
    "start": "68880",
    "end": "74439"
  },
  {
    "text": "patterns or design patterns and uh also a very short introduction kubernetes but actually this will become very short so",
    "start": "74439",
    "end": "81759"
  },
  {
    "text": "this is a very famous book it's coming from 1977 and actually the fun thing it's not",
    "start": "81759",
    "end": "88159"
  },
  {
    "text": "kind of a computer book it's a book coming from the field of architecture and uh it has been written by Christoph",
    "start": "88159",
    "end": "94399"
  },
  {
    "text": "Alexander and he kind of invented the idea of design patterns this means repeatable solution for common problems",
    "start": "94399",
    "end": "101560"
  },
  {
    "text": "and they had in the books things like uh how do you have to design Beer Hall so that people meet each other and and what",
    "start": "101560",
    "end": "108280"
  },
  {
    "text": "not but actually what we when we talk as developers or or or it experts from of",
    "start": "108280",
    "end": "113880"
  },
  {
    "text": "design patterns we typically think about that book and most of us probably know that book already so this is design",
    "start": "113880",
    "end": "119240"
  },
  {
    "text": "patterns for object oriented language uh software and they kind of really transformed this idea to the field of it",
    "start": "119240",
    "end": "126880"
  },
  {
    "text": "so and we are going try to have the same form so the patterns are kind of selfcontained they have all a name they",
    "start": "126880",
    "end": "132400"
  },
  {
    "text": "are interconnected and they describe uh kind of a plint for class of",
    "start": "132400",
    "end": "138480"
  },
  {
    "start": "138000",
    "end": "337000"
  },
  {
    "text": "problems now as I said quick introduction it's not of course I'm I'm hop that everybody knows already what",
    "start": "138480",
    "end": "145160"
  },
  {
    "text": "given is in some sense but uh because while we talk about 10 years of",
    "start": "145160",
    "end": "151360"
  },
  {
    "text": "evolution of cetes uh qet itself has been started in 2014 and was created by Google where",
    "start": "151360",
    "end": "158480"
  },
  {
    "text": "they kind of make open source their internal way how to orchestrate their",
    "start": "158480",
    "end": "163720"
  },
  {
    "text": "containers with their internal system called Bor and uh gness provides everything what you need for this kind",
    "start": "163720",
    "end": "169959"
  },
  {
    "text": "of orchestration like scheduling selfhealing by and also automatic",
    "start": "169959",
    "end": "175400"
  },
  {
    "text": "scaling horizontally which means C uh duplicating your applications",
    "start": "175400",
    "end": "180519"
  },
  {
    "text": "or also vertically which means to to increase the size of your memory or CPU but also tons of other stuff that we see",
    "start": "180519",
    "end": "186879"
  },
  {
    "text": "and you probably know that already the I think the the most important thing that you need to know",
    "start": "186879",
    "end": "192760"
  },
  {
    "text": "about also that it's a declarative resource Centric API which means that you kind of declare your target State",
    "start": "192760",
    "end": "200360"
  },
  {
    "text": "and kuber's task is to actually get the current state more closer to the Target State and here's a 10,000 ft overview",
    "start": "200360",
    "end": "208879"
  },
  {
    "text": "how you act with kubernetes so you have a CLI or any other UI you have a kind of",
    "start": "208879",
    "end": "215159"
  },
  {
    "text": "API server or the control plane and this kind of talks with many nodes these nodes are kind of the compute thing in",
    "start": "215159",
    "end": "222760"
  },
  {
    "text": "your cluster and the control is also responsible to distribute all this workload to the different nodes and the",
    "start": "222760",
    "end": "229879"
  },
  {
    "text": "central element in is you know that it's a pot a pot is kind of higher level OB section of a container so a pot can",
    "start": "229879",
    "end": "236439"
  },
  {
    "text": "contain one or more containers and these containers can talk to each other either",
    "start": "236439",
    "end": "241519"
  },
  {
    "text": "via Network or if you configure it also via a disk a volume and these containers",
    "start": "241519",
    "end": "247599"
  },
  {
    "text": "are kind of OPAC so everything what is running in the container stays in the container and you can put anything what",
    "start": "247599",
    "end": "253360"
  },
  {
    "text": "you want in these containers and around this abstractions of pot you describe the pot with a yam file so with a",
    "start": "253360",
    "end": "260400"
  },
  {
    "text": "resources scriptor there are tons of other resources that are going around that we not going of course not into",
    "start": "260400",
    "end": "265680"
  },
  {
    "text": "detail of that one but everything at the end everything deals goes around your code so your code is running within a",
    "start": "265680",
    "end": "271520"
  },
  {
    "text": "container uh you describe how your code should be run and how it interconnects to the out outside world and this kind",
    "start": "271520",
    "end": "278240"
  },
  {
    "text": "of concludes our very quick crash tour through kuties and now let's start with uh our patterns so yeah so we tried to",
    "start": "278240",
    "end": "288280"
  },
  {
    "text": "to make kind of a categorization of those patterns where we we yeah we we",
    "start": "288280",
    "end": "294919"
  },
  {
    "text": "put together all the patterns that we think belong together and we start with Foundation patterns which more or less",
    "start": "294919",
    "end": "301160"
  },
  {
    "text": "direct reflections of the core cuetes ideas I have to say the cuet itself is",
    "start": "301160",
    "end": "306680"
  },
  {
    "text": "kind of a pattern machine so to say so they kuber tries to implement certain patterns that has been evolved uh when",
    "start": "306680",
    "end": "314039"
  },
  {
    "text": "running on on clusters uh together so if if some of the patterns really looks",
    "start": "314039",
    "end": "319319"
  },
  {
    "text": "like a part of the documentation of kubernetes this is not by accident this is really kind of intended uh so yeah let's start our our",
    "start": "319319",
    "end": "327240"
  },
  {
    "text": "journey so we have these uh six categories we will go through we have one example of each of these category",
    "start": "327240",
    "end": "333000"
  },
  {
    "text": "and uh try to give you a prev overview so right thanks Roland so we'll start",
    "start": "333000",
    "end": "340160"
  },
  {
    "start": "337000",
    "end": "636000"
  },
  {
    "text": "with the foundational patterns and really these patterns I would say are so",
    "start": "340160",
    "end": "345759"
  },
  {
    "text": "in so important that you can think of those as foundational principles that",
    "start": "345759",
    "end": "350800"
  },
  {
    "text": "every U containerized application must Implement in order to become a good",
    "start": "350800",
    "end": "356000"
  },
  {
    "text": "Cloud native citizens right uh and we will start with the help prop pattern uh",
    "start": "356000",
    "end": "362400"
  },
  {
    "text": "really the idea of the help prop is how can an application communicate its uh",
    "start": "362400",
    "end": "367919"
  },
  {
    "text": "health and status to the platform without exposing its internal uh",
    "start": "367919",
    "end": "373120"
  },
  {
    "text": "implementation right when you run an application on kubernetes right uh",
    "start": "373120",
    "end": "378479"
  },
  {
    "text": "kubernetes uh will perform process health checks on your application so if the process dies uh the cuet will make",
    "start": "378479",
    "end": "386199"
  },
  {
    "text": "sure the process is started on a note where the port was assigned to so just",
    "start": "386199",
    "end": "391560"
  },
  {
    "text": "by running your application on kubernetes you basically make your application more resilient but typically",
    "start": "391560",
    "end": "396759"
  },
  {
    "text": "that's not enough right from practice we know there are many cases when the process might be up but the application",
    "start": "396759",
    "end": "402319"
  },
  {
    "text": "might not be doing what you want it to do so that's why we need additional API so that the uh platform can find out",
    "start": "402319",
    "end": "409639"
  },
  {
    "text": "what's the state of your application and perform some corrective actions right there can be cases when your application",
    "start": "409639",
    "end": "415280"
  },
  {
    "text": "is in a dead uh deadlock or your application has not started yet or it has run out of memory so the",
    "start": "415280",
    "end": "421960"
  },
  {
    "text": "process might be up but it's not functioning uh as intended and there are different corrective actions you can",
    "start": "421960",
    "end": "428000"
  },
  {
    "text": "perform the platform can perform in this case in some cases it can restart your application or it can or it can wait for",
    "start": "428000",
    "end": "434319"
  },
  {
    "text": "it to recover or on its own with a transient error uh so what are those uh",
    "start": "434319",
    "end": "440080"
  },
  {
    "text": "Health propes there are three of those uh liveness prop is basically supposed",
    "start": "440080",
    "end": "445479"
  },
  {
    "text": "to detect when your application uh is in in some kind of Deadlock the process is",
    "start": "445479",
    "end": "450919"
  },
  {
    "text": "up but it's not functioning and the corrective action in this case is uh restarting your uh container now this",
    "start": "450919",
    "end": "458759"
  },
  {
    "text": "might not work in all kind of scenarios for example if your application is just starting up right the process might be",
    "start": "458759",
    "end": "464680"
  },
  {
    "text": "up but the application is not ready or if your application is waiting for some kind of external dependency like a",
    "start": "464680",
    "end": "470879"
  },
  {
    "text": "database to come online in these scenarios R starting your application will not help and that's why there is",
    "start": "470879",
    "end": "476639"
  },
  {
    "text": "the second prob which is the Readiness W and the idea of Readiness prop is that when when that uh prop fails the",
    "start": "476639",
    "end": "485199"
  },
  {
    "text": "application endpoint is removed from the list of end points from the service that means no further traffic is directed to",
    "start": "485199",
    "end": "492039"
  },
  {
    "text": "your application now that is useful if your application is processing incoming request to the service uh",
    "start": "492039",
    "end": "499879"
  },
  {
    "text": "abstraction but if your application is consuming messages from a message broker for example that will not help so you",
    "start": "499879",
    "end": "506159"
  },
  {
    "text": "have to really think whether the corrective action is what you want and and in some cases like when I used to",
    "start": "506159",
    "end": "512000"
  },
  {
    "text": "work in the jav world application used to take long time to start up right uh if you want to handle those kind of",
    "start": "512000",
    "end": "517560"
  },
  {
    "text": "cases there is the new startup probe that was added I would say quite recently compared to the two other",
    "start": "517560",
    "end": "523320"
  },
  {
    "text": "probes and the idea in this case is you can have more control how to detect that",
    "start": "523320",
    "end": "528880"
  },
  {
    "text": "application is starting and only when the startup prob passes then the Le Readiness and liveness propes take",
    "start": "528880",
    "end": "535279"
  },
  {
    "text": "effect uh there are different ways to implement these props right I have a",
    "start": "535279",
    "end": "540680"
  },
  {
    "text": "code sample here this is a pelo code so it's not meant to work if you copy and",
    "start": "540680",
    "end": "545760"
  },
  {
    "text": "try to run it but it shows you how easy it is to implement these props in your yaml file and you can do the props using",
    "start": "545760",
    "end": "552839"
  },
  {
    "text": "you know HTTP uh grpc which is also a new addition uh you can execute your",
    "start": "552839",
    "end": "558480"
  },
  {
    "text": "command or you can try to do a TCP connection to your application the whole point is if any of those different",
    "start": "558480",
    "end": "564480"
  },
  {
    "text": "methods fail uh the the probe fails and I would say the help prop was such a",
    "start": "564480",
    "end": "569800"
  },
  {
    "text": "fundamental when it was introduced in kubernetes now 10 years ago that most application runtime Frameworks Implement",
    "start": "569800",
    "end": "577000"
  },
  {
    "text": "uh this kind of health and propes uh out of the box so you you just have to plug your custom logic and it's also",
    "start": "577000",
    "end": "584040"
  },
  {
    "text": "implemented outside of uh kubernetes as well if you're running container as a service you have the concept of Health",
    "start": "584040",
    "end": "590040"
  },
  {
    "text": "props and finally just to wrap up the foundational patterns um these are also",
    "start": "590040",
    "end": "595880"
  },
  {
    "text": "you know interrelated and you kind of need to implement these uh in order to have your application work properly on",
    "start": "595880",
    "end": "602120"
  },
  {
    "text": "kubernetes for example if you want the automatic placement to work properly that's one of the patterns right you",
    "start": "602120",
    "end": "608120"
  },
  {
    "text": "want to declare what kind of resources your application needs that's the predictable demand not only that you",
    "start": "608120",
    "end": "613320"
  },
  {
    "text": "want to declare how the application should replace the old version with the new version that right that's the declarative deployment and for the",
    "start": "613320",
    "end": "619680"
  },
  {
    "text": "declarative deployment to work you want the application to listen to events coming from kubernetes which is the",
    "start": "619680",
    "end": "625120"
  },
  {
    "text": "manag life cycle and the help probe we we just covered so if you Implement those you'll make sure that your",
    "start": "625120",
    "end": "631399"
  },
  {
    "text": "containerized application is running fine on kubernetes right so next stop on our",
    "start": "631399",
    "end": "639480"
  },
  {
    "start": "636000",
    "end": "861000"
  },
  {
    "text": "quick crash course on patterns um let's talk about structural patterns so the the first thing that",
    "start": "639480",
    "end": "645560"
  },
  {
    "text": "you've seen these are really kind of Core Concepts of kubernetes so you probably already kind of know them maybe",
    "start": "645560",
    "end": "651000"
  },
  {
    "text": "but there are also some higher level patterns which are really based on those Core Concepts and that you typically do",
    "start": "651000",
    "end": "656320"
  },
  {
    "text": "not find directly in kues but you can easily Implement them so so we start with structural ones and from that list",
    "start": "656320",
    "end": "662560"
  },
  {
    "text": "we picked the side car which uh looks like um it's I think it's one of the",
    "start": "662560",
    "end": "670079"
  },
  {
    "text": "most famous pattern that you probably also know about from C and let's talk about this one it's really about how you",
    "start": "670079",
    "end": "676040"
  },
  {
    "text": "can enhance the functionality of your application in a container without touching directly the application that",
    "start": "676040",
    "end": "682040"
  },
  {
    "text": "is in the container so in some sense if you're coming from the programming world it's a little bit like aspect oriented",
    "start": "682040",
    "end": "688079"
  },
  {
    "text": "programming where you're also kind put on autal aspects to your application",
    "start": "688079",
    "end": "693440"
  },
  {
    "text": "just by reconfiguring and combining two two containers in there the nice thing is of course that they are uh only",
    "start": "693440",
    "end": "699480"
  },
  {
    "text": "Loosely coupled but these containers actually can communicate with with each other via Network and also via uh file",
    "start": "699480",
    "end": "707160"
  },
  {
    "text": "system via volumes and you can easily use separation of concerns examples of those",
    "start": "707160",
    "end": "713360"
  },
  {
    "text": "side cars are of course service measures like ISO for uh and and other service measures that really add functionality",
    "start": "713360",
    "end": "720760"
  },
  {
    "text": "Network related functionality typically to your application so how does it look like so here you see the pot outside and",
    "start": "720760",
    "end": "727600"
  },
  {
    "text": "inside the pot as I mentioned you can have multiple containers and uh in this case you have a main container which",
    "start": "727600",
    "end": "733680"
  },
  {
    "text": "just is an HTTP server and this HTP server serves static file so it doesn't know anything about the content that",
    "start": "733680",
    "end": "740120"
  },
  {
    "text": "that it serves and just by attaching a sidecar container that periodically pulls a good repository you can add a",
    "start": "740120",
    "end": "747000"
  },
  {
    "text": "new functionality namely updating files when something changes on your kit repository only via configuration adding",
    "start": "747000",
    "end": "754560"
  },
  {
    "text": "this type of container so you can really compose your applications also and give them more functionality than it",
    "start": "754560",
    "end": "759680"
  },
  {
    "text": "originally had um so there are some things so we already talked so let's come a little",
    "start": "759680",
    "end": "765959"
  },
  {
    "text": "bit back to the topic of evolution of patterns because kubernetes itself didn't had any all of the features at",
    "start": "765959",
    "end": "772839"
  },
  {
    "text": "once when it started and the C container actually turned out to be very useful and so useful that it nowadays in one of",
    "start": "772839",
    "end": "779720"
  },
  {
    "text": "the rec kubernetes versions you can have it as a high level Conta also within kubernetes itself there's one one",
    "start": "779720",
    "end": "787720"
  },
  {
    "text": "problem with Sida containers is that um if you start the Sida containers in the",
    "start": "787720",
    "end": "793120"
  },
  {
    "text": "startup the startup order is not really well defined because all the uh application containers really start in",
    "start": "793120",
    "end": "799399"
  },
  {
    "text": "parallel whereas the init containers which is another pattern but init containers are run before the",
    "start": "799399",
    "end": "804480"
  },
  {
    "text": "application container they are run sequentially so uh one after each other",
    "start": "804480",
    "end": "809680"
  },
  {
    "text": "and with uh kuet 1.29 you have a beta feature so you have to enable it with a feature flag um that you can specify a",
    "start": "809680",
    "end": "818199"
  },
  {
    "text": "so-called restart policy to an init container and this init container means if you the policy is always it means",
    "start": "818199",
    "end": "825519"
  },
  {
    "text": "that it just keeps running even if the inet containers has been finished and if it stops it just it just behaves like a",
    "start": "825519",
    "end": "832279"
  },
  {
    "text": "regular application container but it's a dedicated sard container uh so it",
    "start": "832279",
    "end": "837880"
  },
  {
    "text": "supports all the health probe that Belgium just mentioned including our startup probe so it also ensures that",
    "start": "837880",
    "end": "844480"
  },
  {
    "text": "the other application container only starts when for example this init uh",
    "start": "844480",
    "end": "849639"
  },
  {
    "text": "side car has been started so this is a good example how how really also the the internal feature set of kubernetes",
    "start": "849639",
    "end": "856079"
  },
  {
    "text": "evolves over time and of course we can expect much more later on okay up to the next",
    "start": "856079",
    "end": "863880"
  },
  {
    "start": "861000",
    "end": "1185000"
  },
  {
    "text": "PS all right so we seen how foundational patterns help help you create containers",
    "start": "863880",
    "end": "870959"
  },
  {
    "text": "that are good Cloud native citizens the structural patterns help you combine the containers in different formats within",
    "start": "870959",
    "end": "877480"
  },
  {
    "text": "the pot with init containers with a side car Etc and the idea of behavioral patterns",
    "start": "877480",
    "end": "883480"
  },
  {
    "text": "is that they dictate how the pl communicates with the kubernetes uh platform typically that's around the",
    "start": "883480",
    "end": "890079"
  },
  {
    "text": "life cycle whether your application is running as a long running process whether it's running as a stateful",
    "start": "890079",
    "end": "896079"
  },
  {
    "text": "application stateless application Etc and it's also about directing traffic to your application or metadata to your",
    "start": "896079",
    "end": "902120"
  },
  {
    "text": "application right these are the behavioral patterns what we'll look at is one of those the single ton pattern",
    "start": "902120",
    "end": "908360"
  },
  {
    "text": "um and really in essence the idea of Singleton patterns is how can you make sure that there is a single instance or",
    "start": "908360",
    "end": "915120"
  },
  {
    "text": "a single active component within the instances uh of a service right",
    "start": "915120",
    "end": "920480"
  },
  {
    "text": "kubernetes is really great in running uh multiple replicas of your stateless",
    "start": "920480",
    "end": "926240"
  },
  {
    "text": "applications right it can scale them uh quite easily it can sell them automatically Etc but in some scenarios",
    "start": "926240",
    "end": "932480"
  },
  {
    "text": "you may want to have a control over how many instances you want to have uh of an application for example if you have an",
    "start": "932480",
    "end": "939959"
  },
  {
    "text": "application that is pulling a file system or it's a pulling a database you want to have a control how many",
    "start": "939959",
    "end": "946079"
  },
  {
    "text": "instances at the same time can pull that instance another example would be if you have a service that is doing a regular",
    "start": "946079",
    "end": "952759"
  },
  {
    "text": "calls to an endpoint if you start multiple replicas you will have a duplicate request right you want to have",
    "start": "952759",
    "end": "958759"
  },
  {
    "text": "a control over over that a third example would be if you want to control uh if you want to have a sequential processing",
    "start": "958759",
    "end": "965440"
  },
  {
    "text": "consuming messages from a message Q right in that case you want to have a single consumer that is single threaded",
    "start": "965440",
    "end": "971160"
  },
  {
    "text": "that's the only way to guarantee uh ordering of messages and the easiest way to do that would be just to tell you",
    "start": "971160",
    "end": "977240"
  },
  {
    "text": "know kubernetes give me deployment give me a replica set with one replica and you have a singl ton right uh that's",
    "start": "977240",
    "end": "984639"
  },
  {
    "text": "that's not quite right so typically Singletons prefer consistent over",
    "start": "984639",
    "end": "989680"
  },
  {
    "text": "availability so they prefer to have you know a single replica or single instance",
    "start": "989680",
    "end": "995319"
  },
  {
    "text": "than being all the time available and replica set doesn't favor that with replica set there are cases where you",
    "start": "995319",
    "end": "1002160"
  },
  {
    "text": "may have more than one instance so replica set will uh favor availability",
    "start": "1002160",
    "end": "1007839"
  },
  {
    "text": "and if you have a note that's disconnected for example kubernetes will try to start another port on a healthy note if there is a capacity and you may",
    "start": "1007839",
    "end": "1014680"
  },
  {
    "text": "have scenarios where there are multiple ports running even if that's not what you want in this kind of scenarios you",
    "start": "1014680",
    "end": "1020519"
  },
  {
    "text": "can use a stateful set right which favors consistency over availability and",
    "start": "1020519",
    "end": "1025640"
  },
  {
    "text": "if a not is disconnected or if you have some other scenarios when you're moving a port between the noes Etc you will",
    "start": "1025640",
    "end": "1031079"
  },
  {
    "text": "never have more than the desired number of instances you may have less but not more right so this is an example how you",
    "start": "1031079",
    "end": "1037240"
  },
  {
    "text": "can have a single ton without the application being aware right it's handled at the kubernetes level uh but",
    "start": "1037240",
    "end": "1044000"
  },
  {
    "text": "that may not work always for example what about if somebody from the operations team decid at some point in",
    "start": "1044000",
    "end": "1049600"
  },
  {
    "text": "the application life cycle to scale or add an autoscaler and break the constraints that your application wants",
    "start": "1049600",
    "end": "1055280"
  },
  {
    "text": "in in that case you want to do uh locking betweenin your application right here I have on the diagram uh an",
    "start": "1055280",
    "end": "1061480"
  },
  {
    "text": "application with two replicas it doesn't matter whether it's stateful set or replica Set uh you have you know",
    "start": "1061480",
    "end": "1067400"
  },
  {
    "text": "containers you have some kind of business logic and you want only one of those to be active and the way to do",
    "start": "1067400",
    "end": "1072919"
  },
  {
    "text": "that is uh to acquire a lock on some kind of uh distributed lock right and uh",
    "start": "1072919",
    "end": "1079039"
  },
  {
    "text": "different Frameworks uh where you can do that for example I've used in the Java world I used the Apache camel for that",
    "start": "1079039",
    "end": "1085880"
  },
  {
    "text": "and there are also things that kubernetes can help you for example you can use a Pache camel to connect to",
    "start": "1085880",
    "end": "1090960"
  },
  {
    "text": "kubernetes ATD you can use config Max uh config Maps as a uh as a shared lock and",
    "start": "1090960",
    "end": "1098559"
  },
  {
    "text": "make sure that only the first app that starts acquires the lock and the other apps are waiting uh in a passive State",
    "start": "1098559",
    "end": "1106320"
  },
  {
    "text": "uh this is an example of in application locking right it's a active passive",
    "start": "1106320",
    "end": "1112320"
  },
  {
    "text": "topology there is only like a def set a number of instances that are active and",
    "start": "1112320",
    "end": "1117720"
  },
  {
    "text": "you can use different ways one of the new additions here was the lease object in kubernetes which is used by the nodes",
    "start": "1117720",
    "end": "1125960"
  },
  {
    "text": "uh uh to to communicate that they're up and healthy it's used by the control plane components of kubernetes so you",
    "start": "1125960",
    "end": "1132480"
  },
  {
    "text": "can use that but you have to implement your own uh operator to implement the Singleton um I would say a third way",
    "start": "1132480",
    "end": "1139159"
  },
  {
    "text": "would be to use a side card the pattern that Roland just covered right so rather than having a library within your",
    "start": "1139159",
    "end": "1146039"
  },
  {
    "text": "appliation to acquire a a log you can use a side car with the Dapper project",
    "start": "1146039",
    "end": "1151679"
  },
  {
    "text": "so Dapper is deployed as a side car and it exposes uh various apis for your",
    "start": "1151679",
    "end": "1156880"
  },
  {
    "text": "application to call one of those apis is a distributed lock in that case your application can call the side car on",
    "start": "1156880",
    "end": "1163280"
  },
  {
    "text": "Local Host to acquire the lock and the first instance that acquires the lock becomes the leader the other instances",
    "start": "1163280",
    "end": "1169280"
  },
  {
    "text": "will be waiting on that so this will obstruct the backing infrastructure such as red and it also makes it available to",
    "start": "1169280",
    "end": "1175600"
  },
  {
    "text": "all all kind of applications in every language that would be like an evolution of the singl ter uh pattern with the",
    "start": "1175600",
    "end": "1182159"
  },
  {
    "text": "side car let's to the next one yo up to the",
    "start": "1182159",
    "end": "1187919"
  },
  {
    "start": "1185000",
    "end": "1429000"
  },
  {
    "text": "next category which is about configuration so this category all is all about how",
    "start": "1187919",
    "end": "1194640"
  },
  {
    "text": "you can configure your applications so there of course there are different possibilities that you can use some some",
    "start": "1194640",
    "end": "1200039"
  },
  {
    "text": "are really at the heart of kubernetes like configuring with environment variables or config Maps but some are",
    "start": "1200039",
    "end": "1206000"
  },
  {
    "text": "also a little bit more advanced which goes beyond the Core Concepts and I would like to present the pattern of the",
    "start": "1206000",
    "end": "1212200"
  },
  {
    "text": "immutable configuration which means is all about how you can configure your application with immutable container",
    "start": "1212200",
    "end": "1219360"
  },
  {
    "text": "images so where you put all your container data into an image and then bring this to your",
    "start": "1219360",
    "end": "1225000"
  },
  {
    "text": "application if you're a Docker user you know this is quite easy you just make a volume mount with into the Container",
    "start": "1225000",
    "end": "1231000"
  },
  {
    "text": "itself unfortunately this core feature is not really directly possible with kubernetes so you cannot directly even",
    "start": "1231000",
    "end": "1237039"
  },
  {
    "text": "with sidecast directly access um I I will show a possibility later on but normally you cannot access the data",
    "start": "1237039",
    "end": "1243280"
  },
  {
    "text": "within the container image without copying it over into something else and this is what the pattern is actually but",
    "start": "1243280",
    "end": "1250960"
  },
  {
    "text": "uh before I show you the solution the IDE cly about the configuration uh",
    "start": "1250960",
    "end": "1256320"
  },
  {
    "text": "characteristic that it cannot be changed during the runtime time so every time you make a configuration change you have",
    "start": "1256320",
    "end": "1262000"
  },
  {
    "text": "kind of a redeployment or an update of your deployment which allows you to uh",
    "start": "1262000",
    "end": "1267400"
  },
  {
    "text": "for versioning and also auditing so you can really reason about your configuration quite easily and avoid",
    "start": "1267400",
    "end": "1273760"
  },
  {
    "text": "snowflake systems for example also you can prepare your containers for different environments like development",
    "start": "1273760",
    "end": "1279720"
  },
  {
    "text": "staging or production and the idea is really that you put in container images and oci",
    "start": "1279720",
    "end": "1284960"
  },
  {
    "text": "images that you can benefit from all the oci imag Machinery like versioning",
    "start": "1284960",
    "end": "1290279"
  },
  {
    "text": "teching and distributing all the images via Registries uh this looks like in the",
    "start": "1290279",
    "end": "1295799"
  },
  {
    "text": "technique how to implement this is going with an init container so init container is another pattern that we have not shown but actually as I mentioned it's",
    "start": "1295799",
    "end": "1302360"
  },
  {
    "text": "something that runs before your main containers are running and this inet container would just pick up some data",
    "start": "1302360",
    "end": "1308600"
  },
  {
    "text": "out of its own container image and copy it over into an so-called empty deer volume which is just an empty directory",
    "start": "1308600",
    "end": "1314960"
  },
  {
    "text": "that you can configure in kubernetes and then when the init container finishes the application container starts and",
    "start": "1314960",
    "end": "1320840"
  },
  {
    "text": "just picks up the data from this MTD volume so it goes over this shared directory uh however it involves copying",
    "start": "1320840",
    "end": "1328840"
  },
  {
    "text": "over of certain data which usually is not a big issue but if the configuration data is very large then this can become",
    "start": "1328840",
    "end": "1336640"
  },
  {
    "text": "an issue and uh so configuration data of course if you think about the files configuration data is probably very",
    "start": "1336640",
    "end": "1343080"
  },
  {
    "text": "feasible but if you think for example about Lang large language models and you want to run really big things like M",
    "start": "1343080",
    "end": "1349240"
  },
  {
    "text": "multi- gigabyt of size data then this becomes an issue and for that luckily",
    "start": "1349240",
    "end": "1354600"
  },
  {
    "text": "there's another maybe not so well-known uh well-known possibility that you can",
    "start": "1354600",
    "end": "1360840"
  },
  {
    "text": "use actually and this goes over this little innocent share process Nam space",
    "start": "1360840",
    "end": "1366039"
  },
  {
    "text": "field equals to true this allows you if you put this into the pots spec this allows you that your containers can",
    "start": "1366039",
    "end": "1372240"
  },
  {
    "text": "share the process space each other so they are not fully isolated anymore um",
    "start": "1372240",
    "end": "1378080"
  },
  {
    "text": "so if you make a PS in the container you see all the other containers as well and the the trick is that you also can",
    "start": "1378080",
    "end": "1384760"
  },
  {
    "text": "access the root file system of each uh uh other container via the proc file system so actually you see that you can",
    "start": "1384760",
    "end": "1391760"
  },
  {
    "text": "go over proc then the P of the target container main process and then SL root",
    "start": "1391760",
    "end": "1396880"
  },
  {
    "text": "and you can access directly the data without copying it over into an empd volume previously and the it's used",
    "start": "1396880",
    "end": "1403440"
  },
  {
    "text": "actually directly for example in the model cast feature of kerve so kerve is an add-on on is for um inference",
    "start": "1403440",
    "end": "1411039"
  },
  {
    "text": "Services of uh yeah machine learning models including large language models and of course this allows you to save",
    "start": "1411039",
    "end": "1417600"
  },
  {
    "text": "this copy step and make startups much quicker for example so this is the idea and uh yeah if you want to know more",
    "start": "1417600",
    "end": "1425000"
  },
  {
    "text": "about that just check out model cars for case of there's a detailed description how this really",
    "start": "1425000",
    "end": "1430039"
  },
  {
    "start": "1429000",
    "end": "1756000"
  },
  {
    "text": "works okay now up to the next p yeah",
    "start": "1430039",
    "end": "1435600"
  },
  {
    "text": "next one is one from the security category now security is really broad topic right",
    "start": "1435600",
    "end": "1442080"
  },
  {
    "text": "it touches the all the uh full software life cycle from development to build deployment right it also touches the",
    "start": "1442080",
    "end": "1449640"
  },
  {
    "text": "full uh application stack starting with securing the cloud your kubernetes cluster the containers the application",
    "start": "1449640",
    "end": "1457080"
  },
  {
    "text": "code Etc but in our patterns uh book we look into very specific angle so we look",
    "start": "1457080",
    "end": "1464000"
  },
  {
    "text": "at the interaction of the application of the Pod with the kubernetes resources at",
    "start": "1464000",
    "end": "1469440"
  },
  {
    "text": "run time uh so the four patterns here are uh really when you run a pod on the",
    "start": "1469440",
    "end": "1475159"
  },
  {
    "text": "noes you know one of the things it always does is it interacts with that note how can you constrain that",
    "start": "1475159",
    "end": "1481159"
  },
  {
    "text": "interaction with the process containment pattern the other thing a p will most likely need is it will need a uh CQ",
    "start": "1481159",
    "end": "1488600"
  },
  {
    "text": "configuration so Secrets password to databases Etc that's that's how it gets",
    "start": "1488600",
    "end": "1493960"
  },
  {
    "text": "some configurations in a secure manner to the bort that's the secure configuration pattern the other thing a",
    "start": "1493960",
    "end": "1500120"
  },
  {
    "text": "port may do is it may interact with other ports right it can do Network",
    "start": "1500120",
    "end": "1505240"
  },
  {
    "text": "calls it may receive Network call so how do you secure that interaction and the final one is in some cases the the",
    "start": "1505240",
    "end": "1511679"
  },
  {
    "text": "application Port also needs to interact with the kubernetes API server so you also have to secure that so this this I",
    "start": "1511679",
    "end": "1517559"
  },
  {
    "text": "think is a really good way to look into uh application Security on kubernetes",
    "start": "1517559",
    "end": "1523000"
  },
  {
    "text": "what we'll look at here is just one of those patterns is the process containment containment pattern pattern",
    "start": "1523000",
    "end": "1528960"
  },
  {
    "text": "and really the idea is how can we protect the node the kubernetes cluster from your deployed code actually that's",
    "start": "1528960",
    "end": "1536440"
  },
  {
    "text": "when it's exploited right and there are many ways to secure an application you",
    "start": "1536440",
    "end": "1542480"
  },
  {
    "text": "know you can do static code analysis you can do Dynamic scanning you can do image scanning uh Etc but whatever you do",
    "start": "1542480",
    "end": "1549640"
  },
  {
    "text": "there is no guarantee that your application is uh risk-free so one of the common exploits on kubernetes is",
    "start": "1549640",
    "end": "1556760"
  },
  {
    "text": "through the application workload and really this pattern says that you can use the uh the container and Port",
    "start": "1556760",
    "end": "1562679"
  },
  {
    "text": "abstraction to uh constrain what an application what can a process do on",
    "start": "1562679",
    "end": "1569240"
  },
  {
    "text": "kubernetes and that uh three concrete things I I'll give an example what you",
    "start": "1569240",
    "end": "1574880"
  },
  {
    "text": "can do to do that the first thing is you can make sure that your containers are not running as a root user um for",
    "start": "1574880",
    "end": "1582520"
  },
  {
    "text": "example if you are using Docker images that don't have the user specified they",
    "start": "1582520",
    "end": "1588320"
  },
  {
    "text": "they will run with the user ID zero which means they'll become a a root user",
    "start": "1588320",
    "end": "1593360"
  },
  {
    "text": "so that container that process gets root access to the note one thing you can do is you can specify a user ID uh on the",
    "start": "1593360",
    "end": "1601000"
  },
  {
    "text": "note for example in this case at run time I'm overwriting the user ID 2,000 that may work in some cases but some",
    "start": "1601000",
    "end": "1606880"
  },
  {
    "text": "containers rely on a specific user ID in order to work so this can break at run time your container a safer way and a",
    "start": "1606880",
    "end": "1614360"
  },
  {
    "text": "less intrusive way is just enforced uhu with run as non root uh parameter that",
    "start": "1614360",
    "end": "1620960"
  },
  {
    "text": "the container is not running as a you as a as a route that would be less intrusive way now once you secure the",
    "start": "1620960",
    "end": "1628120"
  },
  {
    "text": "user I'll say the next thing is to uh lock down the capabilities that user uh",
    "start": "1628120",
    "end": "1634919"
  },
  {
    "text": "has and one of the things you can do here is easily to prevent privilege escalation right uh user uh that would",
    "start": "1634919",
    "end": "1643000"
  },
  {
    "text": "be to preventing something like running a sud sudo command in your container and becoming a root user so we this flag you",
    "start": "1643000",
    "end": "1648840"
  },
  {
    "text": "can you can do that that's a kind of safe option unless you're doing something very Advanced and building",
    "start": "1648840",
    "end": "1654080"
  },
  {
    "text": "images and you need a specific access to the node and the other thing you can do",
    "start": "1654080",
    "end": "1659360"
  },
  {
    "text": "is you know these users that the user that your container process is running as by default it has a set of",
    "start": "1659360",
    "end": "1666159"
  },
  {
    "text": "capabilities that usually are quite uh open and wide you might be surprised how",
    "start": "1666159",
    "end": "1671600"
  },
  {
    "text": "many capabilities are added by your run time so one thing you can drop uh do there is you can clean up those",
    "start": "1671600",
    "end": "1677440"
  },
  {
    "text": "capabilities and only add the ones your application need in this case I have a container image an httpd server and in",
    "start": "1677440",
    "end": "1685240"
  },
  {
    "text": "order for it to start on Port 80 I'm giving it access with the uh net buying service so that it can start below uh",
    "start": "1685240",
    "end": "1692960"
  },
  {
    "text": "1024 uh port number it's not easy quite uh to find you know quite easy to find out what are those capabilities you may",
    "start": "1692960",
    "end": "1699880"
  },
  {
    "text": "have to run your app and check uh the logs uh with some uh specialized security tooling um and and the third",
    "start": "1699880",
    "end": "1706919"
  },
  {
    "text": "thing last thing you can do is you you know once you secure the user once you secure what capabilities it can do is to secure the file system if you are doing",
    "start": "1706919",
    "end": "1714440"
  },
  {
    "text": "you know Cloud native application you shouldn't have to write to The Container file system uh and a way to protect that",
    "start": "1714440",
    "end": "1720200"
  },
  {
    "text": "is by setting this R only flag if you don't do that if you're application is exploited there is a chance that they",
    "start": "1720200",
    "end": "1726720"
  },
  {
    "text": "install something on that container and uh uh get more capabilities to to attack the node right you can enforce that uh",
    "start": "1726720",
    "end": "1734360"
  },
  {
    "text": "with this flag and on the right hand side you see what we uh we have discussed uh because this is in the",
    "start": "1734360",
    "end": "1741000"
  },
  {
    "text": "application Port file this becomes uh a developer responsibility and it's quite hard to enforce that that's why it's",
    "start": "1741000",
    "end": "1748000"
  },
  {
    "text": "more often done done through uh through the administrator through policies which",
    "start": "1748000",
    "end": "1754200"
  },
  {
    "text": "we are not covering here um that's that's the security pattern yeah so now",
    "start": "1754200",
    "end": "1760720"
  },
  {
    "start": "1756000",
    "end": "2150000"
  },
  {
    "text": "for the last five minutes let's talk about some Advanced patterns and actually Advanced patterns are just",
    "start": "1760720",
    "end": "1766000"
  },
  {
    "text": "patterns that do not fit in any other category and really kind of really complex things um and we will focus this",
    "start": "1766000",
    "end": "1772240"
  },
  {
    "text": "time on the controller pattern and the operator pattern so first about on the controller pattern to understand the",
    "start": "1772240",
    "end": "1778640"
  },
  {
    "text": "controller pattern or to to think about what what the question actually controller pattern helps you to get from",
    "start": "1778640",
    "end": "1784159"
  },
  {
    "text": "a current state to a declared Target state so this is as I mentioned at the beginning this is kind of at the heart",
    "start": "1784159",
    "end": "1789600"
  },
  {
    "text": "of kubernetes to exactly make this Rec consolation um and if you think really",
    "start": "1789600",
    "end": "1796720"
  },
  {
    "text": "so is really are distributed State manager so it really needs to to manage the state on multiple distributed notes",
    "start": "1796720",
    "end": "1803000"
  },
  {
    "text": "or uh in the cluster and actually all not not all but actually the main thing",
    "start": "1803000",
    "end": "1808440"
  },
  {
    "text": "that K does is really to make the actual State or the state that is observed more closer to the declared Target state so",
    "start": "1808440",
    "end": "1815200"
  },
  {
    "text": "the target State you declare in these resource files that you have seen so the Y files here and this is a kind of an",
    "start": "1815200",
    "end": "1820960"
  },
  {
    "text": "endless cycle that goes on and on so first of all You observe observe means that your controller is listening on",
    "start": "1820960",
    "end": "1827640"
  },
  {
    "text": "events that the API server distributes to everybody who is interested in certain type of events then these events",
    "start": "1827640",
    "end": "1834200"
  },
  {
    "text": "are analyzed and compared to the configuration in the resource files and if they are the same and if they fit",
    "start": "1834200",
    "end": "1840440"
  },
  {
    "text": "then it's everything's fine nothing needs to be done but if there's a Dela then some action needs to be done and uh",
    "start": "1840440",
    "end": "1848000"
  },
  {
    "text": "this works like as I said the API server sends over events to to a controller the",
    "start": "1848000",
    "end": "1853919"
  },
  {
    "text": "controller analyzes and then acts also via the API server the API server then is responsible for talking to the node",
    "start": "1853919",
    "end": "1860799"
  },
  {
    "text": "components so these every node has a certain component running or multiple components running on them like cets and",
    "start": "1860799",
    "end": "1866919"
  },
  {
    "text": "C proxy and these are really acting on the actual data plane so on on on the",
    "start": "1866919",
    "end": "1872480"
  },
  {
    "text": "workloads there so the application run time is then managed by these node components and this kind of is uh is",
    "start": "1872480",
    "end": "1878720"
  },
  {
    "text": "what what qist does uh very well and you also can write your own controllers this",
    "start": "1878720",
    "end": "1884519"
  },
  {
    "text": "is what I mean so you can also write an application and perform exactly the same Loop and um this is quite nice but",
    "start": "1884519",
    "end": "1890480"
  },
  {
    "text": "there's an even more advanced concept that is based on the controller pattern which is the operator pattern and the",
    "start": "1890480",
    "end": "1896279"
  },
  {
    "text": "question Act is really here how you can encapsulate your operational knowledge into something which is",
    "start": "1896279",
    "end": "1903159"
  },
  {
    "text": "executable and uh this works I like this uh this quote here is that actually",
    "start": "1903159",
    "end": "1909519"
  },
  {
    "text": "operator is a KU controller that really understands two domains so one is of course kubernetes but the other one is",
    "start": "1909519",
    "end": "1914840"
  },
  {
    "text": "kind of a specialized maybe business domain something like for example promethos knows about the observability",
    "start": "1914840",
    "end": "1920559"
  },
  {
    "text": "domain and uh operator combines both of them so actually he has the knowledge",
    "start": "1920559",
    "end": "1925600"
  },
  {
    "text": "but actually tells them kubernetes actually what to be done and can automate all these tasks that are",
    "start": "1925600",
    "end": "1932200"
  },
  {
    "text": "actually not at the heart of kubernetes but outside and but you can benefit from from the whole Machinery that kubernetes",
    "start": "1932200",
    "end": "1938000"
  },
  {
    "text": "offers so actually for our for our task here this operator is just a controller plus a so-called custom resource",
    "start": "1938000",
    "end": "1944399"
  },
  {
    "text": "definition what a custom resource definition is we see in a second actually this kind of definition is a",
    "start": "1944399",
    "end": "1949519"
  },
  {
    "text": "little bit fuzzy of course some people don't agree with that but actually this is the working assumption for our book",
    "start": "1949519",
    "end": "1955200"
  },
  {
    "text": "here and a custom resource definition actually is uh actually encapsulates or",
    "start": "1955200",
    "end": "1961320"
  },
  {
    "text": "offers the configuration of your specific domain so actually you if you are a Java developer for example you can",
    "start": "1961320",
    "end": "1966559"
  },
  {
    "text": "think about a custom resource definition as a Java class so it's a type definition which uh specifies the schema",
    "start": "1966559",
    "end": "1973200"
  },
  {
    "text": "of the resource that you can apply and you install the customer s definition",
    "start": "1973200",
    "end": "1978279"
  },
  {
    "text": "cluster wide on your cluster so there's a single instance of the custom resource definition for a certain type in this",
    "start": "1978279",
    "end": "1983919"
  },
  {
    "text": "case example it's the config Watcher and the target of this or the goal of this config Watcher is to watch configuration",
    "start": "1983919",
    "end": "1990799"
  },
  {
    "text": "and restart Parts if the configuration changes so this is a very simple example operator you find the full example in",
    "start": "1990799",
    "end": "1997000"
  },
  {
    "text": "the book there but uh the idea is that you define the type and then you can create an instance of the type by just",
    "start": "1997000",
    "end": "2003880"
  },
  {
    "text": "creating a resource that looks like any other kubernetes resource but has a different kind so the type is here the",
    "start": "2003880",
    "end": "2009080"
  },
  {
    "text": "kind and this type has been introduced by the custom resource definition here and then you can specify here you see",
    "start": "2009080",
    "end": "2015519"
  },
  {
    "text": "there very specific Keys like config map and po selector and this schema of the",
    "start": "2015519",
    "end": "2020960"
  },
  {
    "text": "spec here you is what you have defined in your custom resource definition as a schema okay um you can of course try to",
    "start": "2020960",
    "end": "2029200"
  },
  {
    "text": "to categorize all the operator and the components and what what it's good for actually have here in a simple simple",
    "start": "2029200",
    "end": "2035720"
  },
  {
    "text": "graph I don't want to go into detail here much but actually there's a rough classification that you have you can",
    "start": "2035720",
    "end": "2042519"
  },
  {
    "text": "classify installation crds and application crds one is those which are installing full application set so where",
    "start": "2042519",
    "end": "2049960"
  },
  {
    "text": "at the configur global configuration of your application like for example if you want to install promethos in your cluster there's a promethos crd and then",
    "start": "2049960",
    "end": "2057520"
  },
  {
    "text": "you create an instance and then a controller watches whether somebody uh create such an in and if so then it just",
    "start": "2057520",
    "end": "2063839"
  },
  {
    "text": "installed in your cluster and the other one is more like for configuring these",
    "start": "2063839",
    "end": "2069000"
  },
  {
    "text": "installations which are called application crds like in the pr example it's a service monitor crd that",
    "start": "2069000",
    "end": "2074839"
  },
  {
    "text": "configures which metrics to monitor for promether uh if you look for operators",
    "start": "2074839",
    "end": "2081320"
  },
  {
    "text": "there's also the concept of an operator Hub so there's like a like a catalog where you can find pre conf configured",
    "start": "2081320",
    "end": "2088599"
  },
  {
    "text": "and U or published operators that you directly can use via installation so",
    "start": "2088599",
    "end": "2094320"
  },
  {
    "text": "this is kind of a an alternative to hel charts for example you can use this directly with operators and yeah so this",
    "start": "2094320",
    "end": "2102079"
  },
  {
    "text": "is kind of okay now we come to an end you see of course sorry this was very quick I I a apologize for that but you",
    "start": "2102079",
    "end": "2109480"
  },
  {
    "text": "find all the details in the in the book itself if you like and there will be two book signing sessions today so one is in",
    "start": "2109480",
    "end": "2115040"
  },
  {
    "text": "one hour approximately at the Ry booth and the other one is at the red booth and you can get your free uh book for",
    "start": "2115040",
    "end": "2122680"
  },
  {
    "text": "that signed by us if you like and as I said uh if you want more to know you go",
    "start": "2122680",
    "end": "2128880"
  },
  {
    "text": "to the site uh and download the PDF that's it we are by the way we are hanging around so so B will be the DI",
    "start": "2128880",
    "end": "2135560"
  },
  {
    "text": "Booth mostly and I'm also available in the ctive kiosk if you like to and also in the Reddit Booth so grab us and ask",
    "start": "2135560",
    "end": "2141720"
  },
  {
    "text": "questions thank you very",
    "start": "2141720",
    "end": "2144838"
  },
  {
    "text": "much",
    "start": "2149280",
    "end": "2152280"
  }
]