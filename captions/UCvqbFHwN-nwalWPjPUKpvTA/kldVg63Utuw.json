[
  {
    "text": "hello this is polymorphic reconciler z' advanced duck typing in kubernetes I'm",
    "start": "30",
    "end": "5250"
  },
  {
    "text": "Scott Nichols I work on Canada venting focused on sources and I work at VMware",
    "start": "5250",
    "end": "11910"
  },
  {
    "text": "and this is Matt hi I'm Matt I also work at VMware and I am focused on leading K",
    "start": "11910",
    "end": "21539"
  },
  {
    "text": "native serving a little bit of feedback all right a little bit of background Before we jump into the main event today",
    "start": "21539",
    "end": "28560"
  },
  {
    "text": "so custom resource definitions aka CR DS aka the new hotness are leading to an",
    "start": "28560",
    "end": "37170"
  },
  {
    "text": "interesting change in the kubernetes type system we've gone from a world where we have a relatively small fixed",
    "start": "37170",
    "end": "43020"
  },
  {
    "text": "number of types if we want a reason about compute things like deployments",
    "start": "43020",
    "end": "48360"
  },
  {
    "text": "daemon sets jobs staple sets types of compute to a world where any Schmo off",
    "start": "48360",
    "end": "56219"
  },
  {
    "text": "the street like us can start to build higher-level compute abstractions so for",
    "start": "56219",
    "end": "62340"
  },
  {
    "text": "instance inque native serving we have this service and configuration resources",
    "start": "62340",
    "end": "68070"
  },
  {
    "text": "a bunch of different things in the the fast landscape such as keema and open",
    "start": "68070",
    "end": "74970"
  },
  {
    "text": "fast and coulis have function CR DS and this list goes on and on and on and on and so we have",
    "start": "74970",
    "end": "80520"
  },
  {
    "text": "this now new unbounded ever-expanding space of compute abstractions so the",
    "start": "80520",
    "end": "85860"
  },
  {
    "text": "question we started to ask ourself is as controller writers how can we if I want",
    "start": "85860",
    "end": "91799"
  },
  {
    "text": "a reason about not just one particular thing but the class of compute resources",
    "start": "91799",
    "end": "97009"
  },
  {
    "text": "how do I write controllers that can deal with this entire class of unbounded app",
    "start": "97009",
    "end": "104009"
  },
  {
    "text": "resources so option a bake it it alright",
    "start": "104009",
    "end": "109200"
  },
  {
    "text": "so as these things come up you just play whack-a-mole and you build and in",
    "start": "109200",
    "end": "114510"
  },
  {
    "text": "and this gets really tedious so we",
    "start": "114510",
    "end": "120000"
  },
  {
    "text": "started looking for an option B",
    "start": "120000",
    "end": "125150"
  },
  {
    "text": "welcome to the untitled duck presentation this is our mascot view lay",
    "start": "130310",
    "end": "139110"
  },
  {
    "text": "[Applause]",
    "start": "139110",
    "end": "144860"
  },
  {
    "text": "alright so what we put on our wonderful hoodies yeah Beulah is going to be handing out",
    "start": "144860",
    "end": "151440"
  },
  {
    "text": "the duct agon stickers in the back at the end that's this wonderful logo folks",
    "start": "151440",
    "end": "157890"
  },
  {
    "text": "inkay native I created an emoji this morning alright so we gave a talk on",
    "start": "157890",
    "end": "163650"
  },
  {
    "text": "duck typing in Barcelona we'll put this link up at the end you can see scott got",
    "start": "163650",
    "end": "170400"
  },
  {
    "text": "to wear the costume then we'll put this link up so that you can see it with a wall of links at the end but we're gonna",
    "start": "170400",
    "end": "175440"
  },
  {
    "text": "quickly recap what duck typing is and try and cover a largely new content and",
    "start": "175440",
    "end": "180630"
  },
  {
    "text": "demos so the if you saw that talk you don't fall asleep so without further ado",
    "start": "180630",
    "end": "186540"
  },
  {
    "text": "the untitled duck presentation well I'm not keeping up okay the first thing",
    "start": "186540",
    "end": "192840"
  },
  {
    "text": "we're gonna do on our to-do list is quick recap so duck typing so duck",
    "start": "192840",
    "end": "202260"
  },
  {
    "text": "typing is here we have three different objects right that have this common",
    "start": "202260",
    "end": "207300"
  },
  {
    "text": "theme each of these has a food bar property and if I want to reason about this collection of different resources",
    "start": "207300",
    "end": "213780"
  },
  {
    "text": "and reason about that food up our property duck typing allows us to define",
    "start": "213780",
    "end": "220769"
  },
  {
    "text": "a partial schema that allows us to extract that information from different",
    "start": "220769",
    "end": "226590"
  },
  {
    "text": "resources within this class all right so how does this relate to",
    "start": "226590",
    "end": "236110"
  },
  {
    "text": "kubernetes so kubernetes actually has a number of instances where the idea of a",
    "start": "236110",
    "end": "241390"
  },
  {
    "text": "partial schema is very relevant so every single kubernetes resource embeds this",
    "start": "241390",
    "end": "248710"
  },
  {
    "text": "type meta thing this API version and kind it also embeds object meta this metadata",
    "start": "248710",
    "end": "254470"
  },
  {
    "text": "thing that everyone is every senior and gamal engineer in the room is very very",
    "start": "254470",
    "end": "259900"
  },
  {
    "text": "aware of so the apps resources also",
    "start": "259900",
    "end": "265360"
  },
  {
    "text": "define an interesting duck type which is they all embed a pod spec in the exact",
    "start": "265360",
    "end": "272020"
  },
  {
    "text": "same way expect that template is this thing corvy one pod template spec so",
    "start": "272020",
    "end": "277750"
  },
  {
    "text": "they all embed the same shape and one of the things we showed in our previous talk is by leveraging this we can",
    "start": "277750",
    "end": "284470"
  },
  {
    "text": "actually take arbitrary resources that that do this and we can extract that information we can leverage patching to",
    "start": "284470",
    "end": "291730"
  },
  {
    "text": "actually mutate those without knowing the full schema of these objects so",
    "start": "291730",
    "end": "297900"
  },
  {
    "text": "cross that off our two doodles next we are going to talk about the concept of",
    "start": "297900",
    "end": "303280"
  },
  {
    "text": "bindings so what is binding so the way I",
    "start": "303280",
    "end": "309670"
  },
  {
    "text": "think about bindings is largely in terms of runtime contracts so whenever I run",
    "start": "309670",
    "end": "316240"
  },
  {
    "text": "an application it runs in an environment that environment has certain facilities",
    "start": "316240",
    "end": "321850"
  },
  {
    "text": "that may be provided by the system an example of this would be the kubernetes service account token an endpoint that",
    "start": "321850",
    "end": "327850"
  },
  {
    "text": "allow you to sort of extract that information and talk to the API server as if it were magic when you're running",
    "start": "327850",
    "end": "332920"
  },
  {
    "text": "on a cluster a lot of cloud vendors provide HTTP metadata endpoints on the",
    "start": "332920",
    "end": "338260"
  },
  {
    "text": "network that you can talk to you to determine identity information and retrieve access tokens",
    "start": "338260",
    "end": "343600"
  },
  {
    "text": "there's also facilities like if I write to VAR log it may what my logs may",
    "start": "343600",
    "end": "350110"
  },
  {
    "text": "magically appear in some sort of durable logging system so as an application",
    "start": "350110",
    "end": "355780"
  },
  {
    "text": "developer this idea of binding is really powerful because it allows us to start",
    "start": "355780",
    "end": "361210"
  },
  {
    "text": "extending that run tract and interesting ways so the",
    "start": "361210",
    "end": "366430"
  },
  {
    "text": "application developer can just assume certain properties like those and build",
    "start": "366430",
    "end": "371590"
  },
  {
    "text": "their apps with that assumption and that him that can be late bound into it by the environment so what are some things",
    "start": "371590",
    "end": "378820"
  },
  {
    "text": "we might want to bind in right secrets config Maps sidecars so one of the",
    "start": "378820",
    "end": "384760"
  },
  {
    "text": "things we're going to show now is a proposed direction that builds on this",
    "start": "384760",
    "end": "390040"
  },
  {
    "text": "that we might want to use to implement a native event sources so we could call",
    "start": "390040",
    "end": "397330"
  },
  {
    "text": "this POC the sync binding so there's a couple key elements of the sync binding",
    "start": "397330",
    "end": "402630"
  },
  {
    "text": "there's the target this is the kubernetes resource whose runtime",
    "start": "402630",
    "end": "408880"
  },
  {
    "text": "contract we want to extend in this case we want to inject a simple environment",
    "start": "408880",
    "end": "414310"
  },
  {
    "text": "variable into that binding target that says hey send events here there's also",
    "start": "414310",
    "end": "421960"
  },
  {
    "text": "the events sync this is the kubernetes resource that we want to send events -",
    "start": "421960",
    "end": "428070"
  },
  {
    "text": "and then the sync binding basically is responsible for extracting the",
    "start": "428070",
    "end": "433870"
  },
  {
    "text": "information about how to send stuff to the event sync and projecting that into the binding target easy right so the",
    "start": "433870",
    "end": "443590"
  },
  {
    "text": "question is how do I stick a sync environment variable into all of these and how do we take all of the things we",
    "start": "443590",
    "end": "452590"
  },
  {
    "text": "might want to deliver events to and extract the the address to send those",
    "start": "452590",
    "end": "459220"
  },
  {
    "text": "things there the value to put in the sink environment variable option a we",
    "start": "459220",
    "end": "465010"
  },
  {
    "text": "baked it in right okay get the tedious option B as our duck",
    "start": "465010",
    "end": "472330"
  },
  {
    "text": "types so for the target and the sync we're going to use two different duck",
    "start": "472330",
    "end": "477700"
  },
  {
    "text": "types the first is that class that we talked about a little bit earlier",
    "start": "477700",
    "end": "483570"
  },
  {
    "text": "kubernetes application resources fit this mold and a few other resources like",
    "start": "483570",
    "end": "490240"
  },
  {
    "text": "the k' made of resources do as well basically if you embed a pods back at",
    "start": "490240",
    "end": "496360"
  },
  {
    "text": "spec template it forms a class we've started to refer to as pod spectable for",
    "start": "496360",
    "end": "504460"
  },
  {
    "text": "the sink this is OG duck typing this is what this is what we call our",
    "start": "504460",
    "end": "510759"
  },
  {
    "text": "addressable duck type and it's what the contract that has allowed us to effectively have surveying and venting",
    "start": "510759",
    "end": "517360"
  },
  {
    "text": "be loosely coupled but work really well together so oh so the question the next",
    "start": "517360",
    "end": "525790"
  },
  {
    "text": "question is how do I write controllers that can effectively operate in this",
    "start": "525790",
    "end": "530890"
  },
  {
    "text": "model first part is your traditional controller so it reconciles sync binding",
    "start": "530890",
    "end": "537430"
  },
  {
    "text": "resources and if I want to be able to have the sync change over time it can",
    "start": "537430",
    "end": "544060"
  },
  {
    "text": "basically extract that information and can it's continuously reconciling where the sync says you should send events",
    "start": "544060",
    "end": "550390"
  },
  {
    "text": "with a sync environment variable being present in the target however there's two interesting problems that just doing",
    "start": "550390",
    "end": "557290"
  },
  {
    "text": "this is our traditional controller doesn't work for so one is immutable",
    "start": "557290",
    "end": "562600"
  },
  {
    "text": "resources like a kubernetes job kubernetes jobs our pods peccable but as soon as they're committed to Etsy D you",
    "start": "562600",
    "end": "568480"
  },
  {
    "text": "can't patch it with where to send events another interesting case is when say",
    "start": "568480",
    "end": "575740"
  },
  {
    "text": "take a kubernetes deployment we created a kubernetes deployment when we stamp out key native revisions that's owned by",
    "start": "575740",
    "end": "583000"
  },
  {
    "text": "another controller if you start patching the deployment that we own we're gonna patch it back and we're gonna fight all",
    "start": "583000",
    "end": "589750"
  },
  {
    "text": "day and it won't end well so to address this we also run a mutating web hook so",
    "start": "589750",
    "end": "598480"
  },
  {
    "text": "this mutating web hook addresses both of these problems effectively for immutable resources allows us to perform the",
    "start": "598480",
    "end": "605350"
  },
  {
    "text": "binding before the resource hit set CD and for cases like a controlled",
    "start": "605350",
    "end": "612970"
  },
  {
    "text": "deployment basically by doing this in the mutating web hook it ends up looking",
    "start": "612970",
    "end": "618040"
  },
  {
    "text": "like really fancy service like defaulting and so well-written controllers already have to deal with the possibility that the create or",
    "start": "618040",
    "end": "625660"
  },
  {
    "text": "update operation has more values filled in and deal with that so that's the high-level overview of the",
    "start": "625660",
    "end": "634000"
  },
  {
    "text": "binding we're gonna walk through next let's see a demo of it okay so I am",
    "start": "634000",
    "end": "643090"
  },
  {
    "text": "going to open a whole bunch of examples",
    "start": "643090",
    "end": "649020"
  },
  {
    "text": "okay and the first thing we're going to do is I'm going to launch a simple",
    "start": "649020",
    "end": "654270"
  },
  {
    "text": "container called debug and it has it is",
    "start": "654270",
    "end": "661150"
  },
  {
    "text": "an abundant aenor that I've just installed curl on and we're going to exact into it and I just want to show",
    "start": "661150",
    "end": "667360"
  },
  {
    "text": "you that if I echo sync nothing right so our base runtime contract doesn't have",
    "start": "667360",
    "end": "673630"
  },
  {
    "text": "an environment variable named sink so now if I exit the container we have a simple sink binding defined here where",
    "start": "673630",
    "end": "680350"
  },
  {
    "text": "the deployment name debug which is what we just created is going to have the",
    "start": "680350",
    "end": "685930"
  },
  {
    "text": "address of a service named sock I basically projected into it so if we",
    "start": "685930",
    "end": "692760"
  },
  {
    "text": "let's see let's keep control this now",
    "start": "692760",
    "end": "700020"
  },
  {
    "text": "Sakai is a tool written by this fine gentleman I'll pull it up in just a",
    "start": "700020",
    "end": "705400"
  },
  {
    "text": "second because multitasking is hard all right so if I exact into this now an",
    "start": "705400",
    "end": "710770"
  },
  {
    "text": "echo sink will see hey the new pod has the sink environment variable defined and it",
    "start": "710770",
    "end": "717040"
  },
  {
    "text": "has the address of where to send events so the next thing we're gonna do is",
    "start": "717040",
    "end": "722560"
  },
  {
    "text": "we're gonna pull up Sakai default duct tagging that IO and we are going to grab this curl so as",
    "start": "722560",
    "end": "732160"
  },
  {
    "text": "soon as we curl this basically the way Sakai works as it opens a web socket to my browser and as soon as as soon as I",
    "start": "732160",
    "end": "745690"
  },
  {
    "text": "curl this event joke's on you I'm a",
    "start": "745690",
    "end": "750880"
  },
  {
    "text": "deployment shows up here so by curling the sink environment variable in that container where we extend the runtime",
    "start": "750880",
    "end": "758770"
  },
  {
    "text": "contract we know where to send events okay so for the next example this this is shows us",
    "start": "758770",
    "end": "765460"
  },
  {
    "text": "doing it with a mutable resource like a deployment what about an immutable resource where after it's created we",
    "start": "765460",
    "end": "772630"
  },
  {
    "text": "can't we can't change it alright so I'm going to exit the",
    "start": "772630",
    "end": "778270"
  },
  {
    "text": "container control example no more",
    "start": "778270",
    "end": "784090"
  },
  {
    "text": "bananas as soon as this job runs right we see hello from a job right and that",
    "start": "784090",
    "end": "789940"
  },
  {
    "text": "the curl it ran it ran the same container that is running in my deployment except we set the entry point to curl it and send this event so now",
    "start": "789940",
    "end": "797740"
  },
  {
    "text": "we've shown mutable thing immutable thing let's let's show what this looks",
    "start": "797740",
    "end": "803200"
  },
  {
    "text": "like with a key native service which is a tree if sorry a CR D that's defined",
    "start": "803200",
    "end": "808690"
  },
  {
    "text": "and we have no baked in knowledge of this in Sakai or the sync binding or",
    "start": "808690",
    "end": "813940"
  },
  {
    "text": "anything like that alright so if and here I have a simple proxy image all it does is it listens on",
    "start": "813940",
    "end": "821980"
  },
  {
    "text": "EDA T and every time it gets an event it sends it to the what the sync environment variable says to send it to",
    "start": "821980",
    "end": "827350"
  },
  {
    "text": "so if I apply this and then we are going",
    "start": "827350",
    "end": "836350"
  },
  {
    "text": "to curl a proxy and send it an event that says I went through at a native",
    "start": "836350",
    "end": "842020"
  },
  {
    "text": "service so let's see as soon as I hit",
    "start": "842020",
    "end": "849190"
  },
  {
    "text": "Send here boom I went through at a native service so we've shown mutable we've shown immutable we've shown",
    "start": "849190",
    "end": "854950"
  },
  {
    "text": "user-defined types so now we're gonna get kind of fancy so fancy okay so this",
    "start": "854950",
    "end": "862630"
  },
  {
    "text": "is goes back one example to the job except this version of the job instead of sending it to Sakai directly is gonna",
    "start": "862630",
    "end": "870010"
  },
  {
    "text": "send it to that proxy we just created which is also a service so also addressable and this shows that with",
    "start": "870010",
    "end": "875350"
  },
  {
    "text": "bindings really with the same job definition the binding can actually completely change where that application",
    "start": "875350",
    "end": "881170"
  },
  {
    "text": "is sending events so if we apply example",
    "start": "881170",
    "end": "888700"
  },
  {
    "text": "fancy as soon as we come over here let's see hello from a job through a service",
    "start": "888700",
    "end": "896460"
  },
  {
    "text": "okay so for the last demo I'm gonna apply it first and you'll see why in a second because this takes a sec okay",
    "start": "896460",
    "end": "904620"
  },
  {
    "text": "okay so now we're gonna get super fancy now and we're gonna do that same thing",
    "start": "904620",
    "end": "910930"
  },
  {
    "text": "we just did except we're gonna have those jobs stamped out by a cron the cron job every minute is going to create",
    "start": "910930",
    "end": "916630"
  },
  {
    "text": "a job that does the curl it's gonna label those jobs with app curl cron and",
    "start": "916630",
    "end": "922030"
  },
  {
    "text": "in place of the direct reference we're now selecting those jobs with a selector so every job every job that's labeled",
    "start": "922030",
    "end": "930310"
  },
  {
    "text": "with app curl prom is going to get sync bound in as its created it's gonna run it's gonna send an event to Sakai or",
    "start": "930310",
    "end": "936760"
  },
  {
    "text": "sorry to proxy which is going to sentence a sucker so you can see here that the cron has run curl a lot and if",
    "start": "936760",
    "end": "943630"
  },
  {
    "text": "we switch over to here we now have hello from a cron job via selector through ACK a native service ok",
    "start": "943630",
    "end": "950130"
  },
  {
    "text": "so just to recap right visualize it all",
    "start": "950130",
    "end": "960100"
  },
  {
    "text": "right so we created an immutable thing we created an immutable thing we created a user defined type thing that we use",
    "start": "960100",
    "end": "965740"
  },
  {
    "text": "the immutable thing to send things through the the service then we created",
    "start": "965740",
    "end": "971050"
  },
  {
    "text": "a cron job that stamped out jobs that sent things through the proxy onto the service so now I'm gonna hand things",
    "start": "971050",
    "end": "978640"
  },
  {
    "text": "over to Scott wrap up our to-do list",
    "start": "978640",
    "end": "984660"
  },
  {
    "text": "okay so now we're gonna talk about dynamic type controllers so Matt just",
    "start": "991470",
    "end": "998259"
  },
  {
    "text": "showed an example of there's a reconciler that's reconciling a concrete type in kubernetes in that case it was a",
    "start": "998259",
    "end": "1003839"
  },
  {
    "text": "sync binding and inside it had two known duct types that the controller could treat that as an interface because the",
    "start": "1003839",
    "end": "1010980"
  },
  {
    "text": "contract of the sync binding was that these two places the resource were pointing to adheres to this other kind",
    "start": "1010980",
    "end": "1017459"
  },
  {
    "text": "that we we know about that's great that's that's very useful but what about",
    "start": "1017459",
    "end": "1023819"
  },
  {
    "text": "the case where you have a reconciler that want that you would like to implement that reconciles on the duct",
    "start": "1023819",
    "end": "1029100"
  },
  {
    "text": "type directly you can't do this in kubernetes because all of the clients",
    "start": "1029100",
    "end": "1035880"
  },
  {
    "text": "and all the caches and all the reconciler queues are strongly typed with a kind because you have to set the",
    "start": "1035880",
    "end": "1041400"
  },
  {
    "text": "watch up kubernetes just doesn't let you ask for anything that matches things",
    "start": "1041400",
    "end": "1046709"
  },
  {
    "text": "like this so we have option a we could we could do manual config like it could",
    "start": "1046709",
    "end": "1053309"
  },
  {
    "text": "think map so we could every time we install the new CRD we could update the",
    "start": "1053309",
    "end": "1058799"
  },
  {
    "text": "config nut and we could have some sort of watcher watching config map changes",
    "start": "1058799",
    "end": "1063840"
  },
  {
    "text": "and stamping out copies of a reconciler injected with GPRS orgy b ches and it'll",
    "start": "1063840",
    "end": "1069710"
  },
  {
    "text": "the logic doesn't have to change but how we load stuff changes a little bit this",
    "start": "1069710",
    "end": "1075510"
  },
  {
    "text": "works until someone deletes that CRD and then now we have a reconciler reconciling on",
    "start": "1075510",
    "end": "1082260"
  },
  {
    "text": "an unknown type in kubernetes and your controller just starts throwing errors and you I bet you that whoever deleted",
    "start": "1082260",
    "end": "1090179"
  },
  {
    "text": "the CRD won't update your this config map so that's problem but we have we",
    "start": "1090179",
    "end": "1097110"
  },
  {
    "text": "have more options the thing that happened was that someone came to the cluster and deleted the the custom",
    "start": "1097110",
    "end": "1104370"
  },
  {
    "text": "resource definition so we could use that as a place to store metadata so in K",
    "start": "1104370",
    "end": "1110760"
  },
  {
    "text": "native we've been labeling our custom resources with the the duct type that",
    "start": "1110760",
    "end": "1116250"
  },
  {
    "text": "they implement so in this case serving implements addressable like Matt was just showing there's also an object",
    "start": "1116250",
    "end": "1122960"
  },
  {
    "text": "broker it's also addressable so we can label it that the duck type is",
    "start": "1122960",
    "end": "1128929"
  },
  {
    "text": "addressable and now we get to right at CRD another reconciler that reconciles",
    "start": "1128929",
    "end": "1134740"
  },
  {
    "text": "custom resource definitions but this time it it filters based on that label",
    "start": "1134740",
    "end": "1139940"
  },
  {
    "text": "that we've defined and then it can update that map internally just in",
    "start": "1139940",
    "end": "1146510"
  },
  {
    "text": "memory and stamp out reconciler is based on the types that it observes in the",
    "start": "1146510",
    "end": "1152029"
  },
  {
    "text": "system and this is awesome because if one goes away we can clean up by",
    "start": "1152029",
    "end": "1157940"
  },
  {
    "text": "yourself yeah ok so now we're gonna demo",
    "start": "1157940",
    "end": "1164470"
  },
  {
    "text": "what a dynamic type controller could do but first I'd give you a little bit of",
    "start": "1164470",
    "end": "1170270"
  },
  {
    "text": "context we're gonna leverage Canada eventing to do this so we have there's a",
    "start": "1170270",
    "end": "1178039"
  },
  {
    "text": "concept called a broker it's basically an event mesh that's the events go in they come across the the",
    "start": "1178039",
    "end": "1184909"
  },
  {
    "text": "broker and you can create a trigger that if the trigger matches the filters that you specified it takes the event a copy",
    "start": "1184909",
    "end": "1192320"
  },
  {
    "text": "of the event and delivers it to a consumer with one little gotcha you can respond with a new event and",
    "start": "1192320",
    "end": "1199340"
  },
  {
    "text": "it's just like it got ingress back into the broker so another trigger could filter on that new event so you can get",
    "start": "1199340",
    "end": "1205850"
  },
  {
    "text": "kind of these cyclical loops so we've already shown how we can solve the random deployment in two broker but what",
    "start": "1205850",
    "end": "1214460"
  },
  {
    "text": "about we have this problem where we want to make a function and we want to make a",
    "start": "1214460",
    "end": "1220520"
  },
  {
    "text": "trigger but if we make a copy of the function or the service or the whatever you need to manage the the other pair",
    "start": "1220520",
    "end": "1228590"
  },
  {
    "text": "the trigger as well so this becomes a little bit of a little cumbersome",
    "start": "1228590",
    "end": "1234529"
  },
  {
    "text": "because you'll delete the service and you'll still have the trigger or you'll accidentally delete the trigger and the",
    "start": "1234529",
    "end": "1239870"
  },
  {
    "text": "service is then a dangling node so started thinking about this and what we",
    "start": "1239870",
    "end": "1246529"
  },
  {
    "text": "could apply this this duck typing concept we could have a controller reconciling all addressable types",
    "start": "1246529",
    "end": "1252710"
  },
  {
    "text": "because we've we have that metadata and then I can stamp out copies of the",
    "start": "1252710",
    "end": "1257830"
  },
  {
    "text": "reconciler that implements the auto trigger controller and so in this case",
    "start": "1257830",
    "end": "1263679"
  },
  {
    "text": "it's a service and routes that reconciler sees a new service and it",
    "start": "1263679",
    "end": "1269289"
  },
  {
    "text": "sees some special annotations and labels it uses that metadata to create a trigger for the broker and now we can",
    "start": "1269289",
    "end": "1276370"
  },
  {
    "text": "automatically connect and we can we don't have to think about that sorry",
    "start": "1276370",
    "end": "1282269"
  },
  {
    "text": "okay so we're gonna demo this i mov i",
    "start": "1282269",
    "end": "1288610"
  },
  {
    "text": "user Matt uses Emacs so that's gonna",
    "start": "1288610",
    "end": "1293679"
  },
  {
    "text": "type so that's going to apply a cluster",
    "start": "1293679",
    "end": "1301450"
  },
  {
    "text": "configuration very similar to what we just showed there's gonna be a random number generator that's a sync bound",
    "start": "1301450",
    "end": "1307960"
  },
  {
    "text": "into the broker and it's gonna make the random numbers every second between 1 and 100 so very similar to the demo that",
    "start": "1307960",
    "end": "1316299"
  },
  {
    "text": "we showed earlier and then there is point there's a function that we call",
    "start": "1316299",
    "end": "1322629"
  },
  {
    "text": "classifier the logic is just it looks at the number and it says if it's odd it",
    "start": "1322629",
    "end": "1328960"
  },
  {
    "text": "labels it odd if it's even it labels it even so this is filtered on type and",
    "start": "1328960",
    "end": "1334419"
  },
  {
    "text": "then the we're gonna send those new classified objects to just a copy of",
    "start": "1334419",
    "end": "1340690"
  },
  {
    "text": "sock sock I but this time we're gonna use a cloud of an extension with the",
    "start": "1340690",
    "end": "1347710"
  },
  {
    "text": "custom label that we our rear news so it's a new event it goes back into the broker and the new trigger picks it up",
    "start": "1347710",
    "end": "1352929"
  },
  {
    "text": "so if we go and open up an odd or even Sakai",
    "start": "1352929",
    "end": "1358378"
  },
  {
    "text": "and we start seeing odd and even events",
    "start": "1363090",
    "end": "1369059"
  },
  {
    "text": "okay back to the presentation",
    "start": "1372660",
    "end": "1378870"
  },
  {
    "text": "done oh hey hey man what is that there's a bonus task Oh",
    "start": "1383220",
    "end": "1390249"
  },
  {
    "text": "visualize duck type relationships so we got to thinking and you don't just have",
    "start": "1390249",
    "end": "1395649"
  },
  {
    "text": "to write reconcile there's that run in your control point for these duck types the the duck types that we've been",
    "start": "1395649",
    "end": "1401109"
  },
  {
    "text": "playing with help you understand how the relationships between objects that we're creating so we're gonna show you a graph",
    "start": "1401109",
    "end": "1408639"
  },
  {
    "text": "program well that one on top looks familiar this guy's so above is the graphical",
    "start": "1408639",
    "end": "1415749"
  },
  {
    "text": "representation of the demo previously but graph the graph program doesn't understand sync bindings at all it only",
    "start": "1415749",
    "end": "1422830"
  },
  {
    "text": "understands it can find objects that are installed labeled with that source a",
    "start": "1422830",
    "end": "1429099"
  },
  {
    "text": "source label they can also see things that are addressable and we can infer",
    "start": "1429099",
    "end": "1435279"
  },
  {
    "text": "connections based on this because we know the shape so there's that graph",
    "start": "1435279",
    "end": "1440320"
  },
  {
    "text": "alright so you see that like the normal one straight to Sakai and then the super fancy one that goes into the proxy and",
    "start": "1440320",
    "end": "1446379"
  },
  {
    "text": "goes into Sakai and then we see basically the the same set up we saw so",
    "start": "1446379",
    "end": "1453849"
  },
  {
    "text": "we have a generator goes into the ingress of the broker and then each trigger but the interesting thing is",
    "start": "1453849",
    "end": "1460179"
  },
  {
    "text": "that because we are writing a controller for the auto trigger the consuming service that at is asking for a filter",
    "start": "1460179",
    "end": "1468639"
  },
  {
    "text": "for triggers we we know who it is so we can set its own irreverence and so we",
    "start": "1468639",
    "end": "1474879"
  },
  {
    "text": "can get automatic garbage collection all right so this this is it's actually",
    "start": "1474879",
    "end": "1480309"
  },
  {
    "text": "hosted Mackay native service running in a cluster it's dynamic so every time you load the page it'll read query so if we",
    "start": "1480309",
    "end": "1487690"
  },
  {
    "text": "reload real quick this week so graph actually uses three duck types that we",
    "start": "1487690",
    "end": "1494529"
  },
  {
    "text": "have in K native and one of them is it understands the general shape of it we",
    "start": "1494529",
    "end": "1499539"
  },
  {
    "text": "use for status so we can see arbitrary ready conditions I can look at that and",
    "start": "1499539",
    "end": "1505059"
  },
  {
    "text": "understand how to color the graph to give you hints about what's going on",
    "start": "1505059",
    "end": "1510590"
  },
  {
    "text": "so they've been ready so we added a new function that does prime classification",
    "start": "1510590",
    "end": "1516660"
  },
  {
    "text": "and if you would guess it it then filters events that come through it",
    "start": "1516660",
    "end": "1522030"
  },
  {
    "text": "labels things that are prime and it shows it upon the saw the Sakai service that's prime so yeah what you do as well",
    "start": "1522030",
    "end": "1540630"
  },
  {
    "text": "questions and we're gonna put up a wall of links thank you so much it's an open",
    "start": "1540630",
    "end": "1554370"
  },
  {
    "text": "mic ends up over there and yes I'm a",
    "start": "1554370",
    "end": "1559560"
  },
  {
    "text": "runner the first question is we have produce we've produced these stickers so",
    "start": "1559560",
    "end": "1571130"
  },
  {
    "text": "yeah so the duck hasn't been there this",
    "start": "1571130",
    "end": "1577740"
  },
  {
    "text": "looks really cool how I'm actually curious how you're determining shapes are you actually looking at like the CDE",
    "start": "1577740",
    "end": "1583470"
  },
  {
    "text": "specification and like the air pas API spec are you doing something at the go layer like where is that happening a",
    "start": "1583470",
    "end": "1590480"
  },
  {
    "text": "good question so right now we're not doing anything based on the open API",
    "start": "1590480",
    "end": "1596010"
  },
  {
    "text": "schema although that's an interesting thing we thought about we actually don't publish the open API spec in the key",
    "start": "1596010",
    "end": "1603210"
  },
  {
    "text": "native resources yet but we yeah we only",
    "start": "1603210",
    "end": "1608370"
  },
  {
    "text": "do partial schema from the parent down so yeah so it needs that one leaf and",
    "start": "1608370",
    "end": "1613740"
  },
  {
    "text": "all the way down so you can do merging so for the the second half we basically leverage labeling right so if c or DS",
    "start": "1613740",
    "end": "1622320"
  },
  {
    "text": "that are labeled saying I am addressable or I am a source or any of a variety of",
    "start": "1622320",
    "end": "1628560"
  },
  {
    "text": "different duck types you can basically reason reason about those resources with",
    "start": "1628560",
    "end": "1635100"
  },
  {
    "text": "the expectation they implement that shape they have that common partial schema for",
    "start": "1635100",
    "end": "1641879"
  },
  {
    "text": "the Sikh bindings basically it's somewhat on the user there isn't really a great way to validate this right now",
    "start": "1641879",
    "end": "1648269"
  },
  {
    "text": "or at least we haven't come up with one if you have ideas let us know the schema",
    "start": "1648269",
    "end": "1654479"
  },
  {
    "text": "one is definitely an interesting one that we haven't fully explored",
    "start": "1654479",
    "end": "1659549"
  },
  {
    "text": "but yeah so if you reference a pod spectable thing in the target of the",
    "start": "1659549",
    "end": "1666029"
  },
  {
    "text": "sync binding I mean ultimately if we try and start patching that or if it goes",
    "start": "1666029",
    "end": "1672210"
  },
  {
    "text": "through the mutating web hook and we try and apply a patch that we can't apply it'll actually get rejected assuming",
    "start": "1672210",
    "end": "1679019"
  },
  {
    "text": "there's good validation after the mutating weapon runs so hopefully that answers the question in both contexts if",
    "start": "1679019",
    "end": "1686759"
  },
  {
    "text": "not happy to keep discussing",
    "start": "1686759",
    "end": "1691759"
  },
  {
    "text": "so when you did the cron job the cron",
    "start": "1698960",
    "end": "1704580"
  },
  {
    "text": "job wasn't what was actually injected that was the job that it created through",
    "start": "1704580",
    "end": "1709679"
  },
  {
    "text": "the mid head in my book what if the thing that you wanted to actually work inject was the cron job which doesn't",
    "start": "1709679",
    "end": "1715440"
  },
  {
    "text": "have a templates back at the top but does two levels down have you thought",
    "start": "1715440",
    "end": "1720960"
  },
  {
    "text": "about where things they had the type but it's just not at the same path yeah so",
    "start": "1720960",
    "end": "1728509"
  },
  {
    "text": "you know yeah cron job actually is not pods peccable it has some extra layers",
    "start": "1728840",
    "end": "1734009"
  },
  {
    "text": "in there but yeah so if you wanted to do",
    "start": "1734009",
    "end": "1739529"
  },
  {
    "text": "it with a cron job it would either have to be well you would either have to",
    "start": "1739529",
    "end": "1746879"
  },
  {
    "text": "start teaching it about multiple shapes and a way to disambiguate when you use one shape or one to use another shape or",
    "start": "1746879",
    "end": "1757399"
  },
  {
    "text": "yeah I mean that's mainly it right so one of the one of them one of the things",
    "start": "1757879",
    "end": "1767460"
  },
  {
    "text": "that we were sort of fiddling around with and kind of wanted when we sort of",
    "start": "1767460",
    "end": "1773179"
  },
  {
    "text": "figured out that we could do this the way we're doing it with duck typing was the idea of custom sub resources so",
    "start": "1773179",
    "end": "1781009"
  },
  {
    "text": "kubernetes has for instance the status of resource the scale sub resource but",
    "start": "1781009",
    "end": "1786419"
  },
  {
    "text": "for c r-- DS there's really only those two I think there may be a third that",
    "start": "1786419",
    "end": "1792240"
  },
  {
    "text": "I'm blanking on but you certainly can't create your own so if you could",
    "start": "1792240",
    "end": "1798779"
  },
  {
    "text": "effectively say so when I'm defining my scale sub resource for instance I tell",
    "start": "1798779",
    "end": "1805230"
  },
  {
    "text": "kubernetes where to extract the various properties of the scale sub resource of",
    "start": "1805230",
    "end": "1810330"
  },
  {
    "text": "the selector the replicas count the desired an actual replica count but if",
    "start": "1810330",
    "end": "1817019"
  },
  {
    "text": "we could do that effectively for where in my object is the pods back that would be pretty cool and we could potentially",
    "start": "1817019",
    "end": "1822149"
  },
  {
    "text": "do something more powerful but then again that's sort of like having some",
    "start": "1822149",
    "end": "1827879"
  },
  {
    "text": "higher-level information could use to disambiguate and guide how we're doing it for various types so yeah",
    "start": "1827879",
    "end": "1836070"
  },
  {
    "text": "let like all things we are starting small we're building on condoms we we know and so now we have this if the",
    "start": "1836070",
    "end": "1842769"
  },
  {
    "text": "shape is exactly that what we expect but there's other noise around it we can deal with that we could probably work",
    "start": "1842769",
    "end": "1849609"
  },
  {
    "text": "now that we have this we can also add by the way you can look in a different half it seems reasonable all the way in the",
    "start": "1849609",
    "end": "1861309"
  },
  {
    "text": "back you did this on purpose after this it's it's your turn no more",
    "start": "1861309",
    "end": "1866320"
  },
  {
    "text": "than here thanks for so for the run so",
    "start": "1866320",
    "end": "1875200"
  },
  {
    "text": "any reason why you chose shapes for matching and not some kind of expression",
    "start": "1875200",
    "end": "1882489"
  },
  {
    "text": "language such as XPath we're trying to solve the problem is for venting",
    "start": "1882489",
    "end": "1890169"
  },
  {
    "text": "specifically in the the reason the first duck typing talk happened we have all",
    "start": "1890169",
    "end": "1895389"
  },
  {
    "text": "these consumers those consuming functions but that consuming function could be any other thing so custom",
    "start": "1895389",
    "end": "1901029"
  },
  {
    "text": "resources as long as they expose how to talk to them we can wire things together without actually understanding so we've",
    "start": "1901029",
    "end": "1907749"
  },
  {
    "text": "we've kind of started and focused on it must be this path and also there's a lot",
    "start": "1907749",
    "end": "1913719"
  },
  {
    "text": "of there's a nuri inside of kubernetes to give us the unstructured object and",
    "start": "1913719",
    "end": "1919599"
  },
  {
    "text": "then give it a JSON and it marshals it in and we can deal with that so that's that's basically why yeah I'll",
    "start": "1919599",
    "end": "1927369"
  },
  {
    "text": "give you a shorter answer at doing duck typing like this is I think slightly",
    "start": "1927369",
    "end": "1932379"
  },
  {
    "text": "harder than just having fixed types every we're taking it the next level and having it be a bit more dynamic that's",
    "start": "1932379",
    "end": "1938859"
  },
  {
    "text": "really really hard you know it may be something interesting to explore but I",
    "start": "1938859",
    "end": "1945399"
  },
  {
    "text": "mean where we are for some of the shapes we've had to reason about same shapes",
    "start": "1945399",
    "end": "1953109"
  },
  {
    "text": "been pretty effective partly because of API consistent seeing the API principles and kubernetes",
    "start": "1953109",
    "end": "1959470"
  },
  {
    "text": "right so one of the duck types is status conditions have a pretty regular shape across kubernetes resources all of the",
    "start": "1959470",
    "end": "1966580"
  },
  {
    "text": "apps resources did a really good job of consistency across that class and",
    "start": "1966580",
    "end": "1971670"
  },
  {
    "text": "there's some other like more practical examples where everyone tends to type",
    "start": "1971670",
    "end": "1976720"
  },
  {
    "text": "the kind but kubernetes doesn't operate on the kind it it operates on the",
    "start": "1976720",
    "end": "1981880"
  },
  {
    "text": "resource which is pluralized the pluralization operates on english and",
    "start": "1981880",
    "end": "1987010"
  },
  {
    "text": "that's broken right so to convert from kind to resource you can actually go and",
    "start": "1987010",
    "end": "1994600"
  },
  {
    "text": "query the keys or have a have a list or whatever so that's kind of the first iteration of what started some of the",
    "start": "1994600",
    "end": "2001260"
  },
  {
    "text": "polymorphic parts okay we have time for",
    "start": "2001260",
    "end": "2007380"
  },
  {
    "text": "one short question and short answer anyone back when you're building",
    "start": "2007380",
    "end": "2020850"
  },
  {
    "text": "controllers that are like doing this type of duck typing do you have any",
    "start": "2020850",
    "end": "2026100"
  },
  {
    "text": "thought towards actually being able to wire in like you know informers and",
    "start": "2026100",
    "end": "2031770"
  },
  {
    "text": "things like that for the subtypes that they actually generate as well so we we",
    "start": "2031770",
    "end": "2037170"
  },
  {
    "text": "actually have typed informers okay we can you set it up slightly different you",
    "start": "2037170",
    "end": "2043740"
  },
  {
    "text": "have to give it a gbk so that you can actually make that correct right yeah I call but then the controller gets back",
    "start": "2043740",
    "end": "2049830"
  },
  {
    "text": "the duct type thing so it reduces a step for us okay what I was thinking is like",
    "start": "2049830",
    "end": "2055260"
  },
  {
    "text": "from that top level type there gonna be other objects that are other types that",
    "start": "2055260",
    "end": "2060360"
  },
  {
    "text": "are generated by the controller that's managing that other type and you might also want to watch those like sub",
    "start": "2060360",
    "end": "2066750"
  },
  {
    "text": "objects a generator I think I think that's the next step yeah doing this the",
    "start": "2066750",
    "end": "2072240"
  },
  {
    "text": "the preparation for this demo we kind of we ran into a problem of great we understand some of the the dag in the",
    "start": "2072240",
    "end": "2080128"
  },
  {
    "text": "data plane but we we start to need to understand the ownerships for that exact reason we don't know what resource just",
    "start": "2080129",
    "end": "2086460"
  },
  {
    "text": "wants to be deleted because a child was deleted or if the deploy",
    "start": "2086460",
    "end": "2091560"
  },
  {
    "text": "made a replica set right so I think I think one of the interesting things in",
    "start": "2091560",
    "end": "2096919"
  },
  {
    "text": "this in this example so I think correct me if I'm wrong but we've got the CID",
    "start": "2096920",
    "end": "2102210"
  },
  {
    "text": "controller and that's your D controller is going to stamp out the duct piped controllers and so with what you're",
    "start": "2102210",
    "end": "2108930"
  },
  {
    "text": "talking about is effectively if those duct these these instances down here blue bar Baz those are creating",
    "start": "2108930",
    "end": "2114990"
  },
  {
    "text": "resources have it basically having informers for those resources yes so so",
    "start": "2114990",
    "end": "2122130"
  },
  {
    "text": "yeah so I would expect that generally whatever reconciliation process you're writing you are maybe taking this sort",
    "start": "2122130",
    "end": "2129270"
  },
  {
    "text": "of abstraction of the concrete types that the booth of are the bars and your",
    "start": "2129270",
    "end": "2134280"
  },
  {
    "text": "reasoning about it in terms of say what images are there and the types are actually instantiating are likely",
    "start": "2134280",
    "end": "2139800"
  },
  {
    "text": "concrete types so before you even stamp out blue bar and Baz you can actually start up Informers for those and then as",
    "start": "2139800",
    "end": "2148080"
  },
  {
    "text": "you stamp out the duct typed controllers they can basically leverage the the",
    "start": "2148080",
    "end": "2154530"
  },
  {
    "text": "existing shared and former that was started up and then just sort of pick up from that does that make sense okay I",
    "start": "2154530",
    "end": "2164360"
  },
  {
    "text": "think they said yes it made sense okay thank you so much for joining in Scott",
    "start": "2164360",
    "end": "2169500"
  },
  {
    "text": "and Matt run on a post [Applause]",
    "start": "2169500",
    "end": "2176390"
  }
]