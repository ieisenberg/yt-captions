[
  {
    "start": "0",
    "end": "115000"
  },
  {
    "text": "all right thank you everyone for joining us today and bearing with us through a couple",
    "start": "2480",
    "end": "7680"
  },
  {
    "text": "microphone issues but we are ready to roll welcome to today's cncf live webinar windows came second i'm libby",
    "start": "7680",
    "end": "15200"
  },
  {
    "text": "schultz and i'll be moderating today's webinar i'm going to read our code of conduct and then hand it over to daniel",
    "start": "15200",
    "end": "20400"
  },
  {
    "text": "prismant senior security researcher at unit 42 with palo alto networks",
    "start": "20400",
    "end": "25519"
  },
  {
    "text": "a few housekeeping items before we get started during the webinar you're not able to speak as an attendee but there's",
    "start": "25519",
    "end": "31920"
  },
  {
    "text": "a q a box that we have been using already at the bottom of your screen or the right side rather",
    "start": "31920",
    "end": "38160"
  },
  {
    "text": "please feel free to drop questions there and daniel will get to as many as he can at the end this is an official webinar",
    "start": "38160",
    "end": "44320"
  },
  {
    "text": "of the cncf and as such is subject to the cncf code of conduct please do not add anything to the chat",
    "start": "44320",
    "end": "50879"
  },
  {
    "text": "or questions that would be in violation of that code of conduct and please be respectful of all of your fellow participants and presenters please also",
    "start": "50879",
    "end": "58480"
  },
  {
    "text": "note that the recording and slides will be posted later today on the cncf online programs page",
    "start": "58480",
    "end": "65040"
  },
  {
    "text": "at community.cncf.io under online online programs they're also available via your",
    "start": "65040",
    "end": "71200"
  },
  {
    "text": "registration link and the recording will be available on our online programs youtube playlist with that i will hand",
    "start": "71200",
    "end": "78000"
  },
  {
    "text": "it over to daniel to kick things off so take it away",
    "start": "78000",
    "end": "83119"
  },
  {
    "text": "okay uh so uh hello everyone and uh welcome thank you for joining and",
    "start": "83119",
    "end": "89600"
  },
  {
    "text": "you're about to hear a story about how a single missing condition in an if statement enable one of the easiest",
    "start": "89600",
    "end": "97360"
  },
  {
    "text": "container escape of a recent year an escape that affected almost all of",
    "start": "97360",
    "end": "103600"
  },
  {
    "text": "their cloud providers in numerous products okay",
    "start": "103600",
    "end": "109280"
  },
  {
    "text": "so let's begin so today i want to talk about the container escape i found over",
    "start": "109280",
    "end": "114399"
  },
  {
    "text": "a year ago and how it could affect cloud solution we will start with motivation why we",
    "start": "114399",
    "end": "121840"
  },
  {
    "start": "115000",
    "end": "115000"
  },
  {
    "text": "should care about it and then explain some of the fundamentals of containers",
    "start": "121840",
    "end": "127840"
  },
  {
    "text": "in general and doing those containers in particular before moving on to the escape itself",
    "start": "127840",
    "end": "134720"
  },
  {
    "text": "after that we'll talk a little bit we'll talk a little bit more about",
    "start": "134720",
    "end": "140239"
  },
  {
    "text": "what could we do about it when it wasn't patched and then about the patch itself and how it fixes this particular problem",
    "start": "140239",
    "end": "149680"
  },
  {
    "text": "okay so let's start with an example of why what i'm going to talk about today",
    "start": "150239",
    "end": "155519"
  },
  {
    "text": "is important cytoscape was a model i discovered a few months ago which specifically targeted",
    "start": "155519",
    "end": "162560"
  },
  {
    "text": "kubernetes through windows containers",
    "start": "162560",
    "end": "167519"
  },
  {
    "text": "it abused the issue i am going to talk about today to break out of the container burial",
    "start": "167840",
    "end": "173519"
  },
  {
    "text": "and escape to the host which is less protected",
    "start": "173519",
    "end": "179120"
  },
  {
    "text": "from there we tried to use the kubernetes config file which only accessible from the host to spread to",
    "start": "179440",
    "end": "185840"
  },
  {
    "text": "the rest of the cluster escaping the windows machine itself it was it spread it to the rest",
    "start": "185840",
    "end": "192720"
  },
  {
    "text": "of the cluster so if the cluster had linux linux containers as well it could use",
    "start": "192720",
    "end": "198000"
  },
  {
    "text": "that too as part of my research i discovered it",
    "start": "198000",
    "end": "203440"
  },
  {
    "text": "had active victims each one being a kubernetes cluster with the possibility of huge amount of",
    "start": "203440",
    "end": "210640"
  },
  {
    "text": "processing power",
    "start": "210640",
    "end": "213840"
  },
  {
    "text": "okay [Music] okay now that we have the proper motivation let's begin",
    "start": "218560",
    "end": "226720"
  },
  {
    "text": "uh so other containers i know this is a cloud event so most people here probably",
    "start": "226720",
    "end": "232239"
  },
  {
    "text": "know what the container is but i will go over it quickly just in case so a container is basically an operating",
    "start": "232239",
    "end": "238799"
  },
  {
    "text": "system based virtual machine meaning it runs inside the operating system with the same kernel as the",
    "start": "238799",
    "end": "245120"
  },
  {
    "text": "operating system it uses operating system features to isolate the virtual machine from the",
    "start": "245120",
    "end": "250959"
  },
  {
    "text": "rest of the system unlike virtual machines like regular virtual machines which is the comp is",
    "start": "250959",
    "end": "257280"
  },
  {
    "start": "251000",
    "end": "251000"
  },
  {
    "text": "completely separated operate operating systems uh containers can run anything",
    "start": "257280",
    "end": "262320"
  },
  {
    "text": "from the desired container must must match the operating system's",
    "start": "262320",
    "end": "267360"
  },
  {
    "text": "version so for example you won't be able to run windows containers on the linux machine",
    "start": "267360",
    "end": "274160"
  },
  {
    "text": "and one of the most important features of containers is that they pack all the necessary files to on the application so",
    "start": "274160",
    "end": "281120"
  },
  {
    "text": "for instance if you have a special application with special dependencies you can pack it all in a lightweight",
    "start": "281120",
    "end": "287520"
  },
  {
    "text": "container and send it to the end user and",
    "start": "287520",
    "end": "293600"
  },
  {
    "start": "292000",
    "end": "292000"
  },
  {
    "text": "let's go over what is the difference between the containers and virtual machines so the main difference is that",
    "start": "293600",
    "end": "298960"
  },
  {
    "text": "containers rely on operating systems to make its isolation while virtual machines rely on the hardware so virtual",
    "start": "298960",
    "end": "305840"
  },
  {
    "text": "machines virtualize everything including the kernel while containers run on the",
    "start": "305840",
    "end": "311120"
  },
  {
    "text": "same kernel as their host because of that containers are much more portable and efficient so a container",
    "start": "311120",
    "end": "317520"
  },
  {
    "text": "image can be as small as a few kilobytes while a virtual machine image will usually be",
    "start": "317520",
    "end": "323280"
  },
  {
    "text": "at least few gigabyte in size all of that come with the price of course",
    "start": "323280",
    "end": "328400"
  },
  {
    "text": "containers are much less secure than virtual machine",
    "start": "328400",
    "end": "333759"
  },
  {
    "text": "so on the left side you can see a virtual machine infrastructure with hypervisor managing all the machines",
    "start": "334560",
    "end": "341360"
  },
  {
    "text": "each machine has a separate operating system and on the right there is an infrastructure of a docker machine",
    "start": "341360",
    "end": "348080"
  },
  {
    "text": "hosting a few different applications each application is inside a separate",
    "start": "348080",
    "end": "353120"
  },
  {
    "text": "container but they are all running on the same host operating system with the same kernel",
    "start": "353120",
    "end": "359840"
  },
  {
    "start": "360000",
    "end": "360000"
  },
  {
    "text": "okay diving deeper into the internals of containers here we are only talking about linux retails",
    "start": "361600",
    "end": "367440"
  },
  {
    "text": "for now what needs to be contained well obviously you would want to limit",
    "start": "367440",
    "end": "373120"
  },
  {
    "text": "the containers access to resources such as cpu ram network bandwidth disk bandwidth and",
    "start": "373120",
    "end": "379440"
  },
  {
    "text": "such this is done using a feature called see groups these features allow us to limit",
    "start": "379440",
    "end": "385919"
  },
  {
    "text": "resource usage for a group of processes you would want to limit the visibility",
    "start": "385919",
    "end": "392160"
  },
  {
    "text": "the containers have too so if we would only limit resources nothing would stop a malicious container from just changing",
    "start": "392160",
    "end": "399039"
  },
  {
    "text": "its own resource limitations uh and for that we would also want to uh we",
    "start": "399039",
    "end": "404960"
  },
  {
    "text": "would also want to limit the containers visibility to some of the host objects such as processor network interfaces",
    "start": "404960",
    "end": "412880"
  },
  {
    "text": "users mounts and such and this is done using a feature called namespace",
    "start": "412880",
    "end": "420400"
  },
  {
    "start": "419000",
    "end": "419000"
  },
  {
    "text": "okay but uh this talk is about windows containers so let's move forward to",
    "start": "421199",
    "end": "426400"
  },
  {
    "text": "windows uh in order to create a good solution for containers in windows the same",
    "start": "426400",
    "end": "432639"
  },
  {
    "text": "requirements i talked about i talked about in the last slide need to be implemented here",
    "start": "432639",
    "end": "438400"
  },
  {
    "text": "luckily windows had a solution for the resource limitation for years it's called job objects and they do pretty",
    "start": "438400",
    "end": "445440"
  },
  {
    "text": "much the same thing as c groups in linux there is nothing too interesting about",
    "start": "445440",
    "end": "451440"
  },
  {
    "text": "them just as i said in the last slide but it's important to know that the feature existed",
    "start": "451440",
    "end": "458000"
  },
  {
    "text": "in in windows four years it's not it's not new um windows version of c groups uh okay that",
    "start": "458000",
    "end": "465440"
  },
  {
    "text": "was java object was the windows version of sequels but what about the visibility isolation",
    "start": "465440",
    "end": "471440"
  },
  {
    "text": "so until recently windows didn't actually have a solution for this",
    "start": "471440",
    "end": "476800"
  },
  {
    "text": "and that's why windows containers didn't exist until only a few years ago",
    "start": "476800",
    "end": "483360"
  },
  {
    "text": "okay but luckily few years ago microsoft came up with a feature called server",
    "start": "486000",
    "end": "491680"
  },
  {
    "text": "silo which directly provides the missing feature that were necessary in order to",
    "start": "491680",
    "end": "497440"
  },
  {
    "text": "create a container solution so cello silos provide everything that",
    "start": "497440",
    "end": "502800"
  },
  {
    "text": "namespaces provide in linux they isolate the object manager the registry",
    "start": "502800",
    "end": "508080"
  },
  {
    "text": "networking devices and basically any named object that the process can access",
    "start": "508080",
    "end": "515518"
  },
  {
    "text": "there are two types of windows containers the high pelvic containers and several silo",
    "start": "518080",
    "end": "523279"
  },
  {
    "text": "containers um they are not officially called server style containers but they are using the",
    "start": "523279",
    "end": "528959"
  },
  {
    "start": "524000",
    "end": "524000"
  },
  {
    "text": "server style of feature as the isolation mechanism so they are referred to as",
    "start": "528959",
    "end": "534720"
  },
  {
    "text": "several side of containers and on the right you can see how a hyper-v container",
    "start": "534720",
    "end": "540480"
  },
  {
    "text": "architecture looks not not much different than a regular virtual machine and microsoft indeed calls this call",
    "start": "540480",
    "end": "548240"
  },
  {
    "text": "this containers lightweight virtual machines so they are not actually a container each container",
    "start": "548240",
    "end": "555200"
  },
  {
    "text": "has its own lightweight kernel basically it is the microsoft version of a vm",
    "start": "555200",
    "end": "561200"
  },
  {
    "text": "and is not what we are here to talk about today we are here to talk about the left side as you can see more traditional meaning",
    "start": "561200",
    "end": "568160"
  },
  {
    "text": "of the containers one kernel with few containers for different applications",
    "start": "568160",
    "end": "573440"
  },
  {
    "text": "and this is done using several cycles and as you can see all the containers",
    "start": "573440",
    "end": "578560"
  },
  {
    "text": "are using the same system processes and same kernel",
    "start": "578560",
    "end": "584000"
  },
  {
    "start": "588000",
    "end": "588000"
  },
  {
    "text": "okay in order to fully understand how server silos isolates containers one must",
    "start": "589200",
    "end": "597279"
  },
  {
    "text": "understand the basics of the wood directory object which is a key feature",
    "start": "597279",
    "end": "602399"
  },
  {
    "text": "in the windows operating systems without getting into too deep",
    "start": "602399",
    "end": "607839"
  },
  {
    "text": "about this mechanism it's suffice to say that all applications visible named objects",
    "start": "607839",
    "end": "614160"
  },
  {
    "text": "such as file registry keys events mutex rpc ports stuff like that are hosted in",
    "start": "614160",
    "end": "621200"
  },
  {
    "text": "a root namespace which allows applications to create locate and share",
    "start": "621200",
    "end": "626320"
  },
  {
    "text": "these objects among users and the key here is named objects so any objects",
    "start": "626320",
    "end": "632320"
  },
  {
    "text": "that you can access from your code using a name is a named object usually it's files and stuff like that",
    "start": "632320",
    "end": "638320"
  },
  {
    "text": "but there are other things uh okay so take a look at this screenshot from the object application",
    "start": "638320",
    "end": "646079"
  },
  {
    "text": "and there is application called when object it shows you the wood directory object it's by assisting terminals",
    "start": "646079",
    "end": "652240"
  },
  {
    "text": "and it shows the root directory object perfectly as you can see on the left there are many directories under the",
    "start": "652240",
    "end": "658000"
  },
  {
    "text": "wood directory object and under global question or questionnaire there are tons of symbolic links including the sea",
    "start": "658000",
    "end": "665279"
  },
  {
    "text": "letter symbolic links so when you are accessing your c drive in your windows machine it is in fact a symbol in clink",
    "start": "665279",
    "end": "672399"
  },
  {
    "text": "to the actual device and as you can see there are many more symbolic links over there but the most",
    "start": "672399",
    "end": "679200"
  },
  {
    "text": "relevant to us is indeed the ceiling which points to the actual file system",
    "start": "679200",
    "end": "684320"
  },
  {
    "text": "device which in this case is a hardest volume tree and in this screenshot you can see a",
    "start": "684320",
    "end": "691360"
  },
  {
    "text": "wood directory object of the host and not a container it can be a virtual machine but it is it",
    "start": "691360",
    "end": "698640"
  },
  {
    "text": "has its own camera i will soon see how i would directly object of a of a container looks like",
    "start": "698640",
    "end": "706399"
  },
  {
    "text": "okay so in this screenshot however you can see what the container looks like in the wood directory object",
    "start": "706560",
    "end": "712399"
  },
  {
    "text": "so notice on the left there is a silos directory every server silo container",
    "start": "712399",
    "end": "717680"
  },
  {
    "text": "will have its own subdirectory under this directory with the name being the",
    "start": "717680",
    "end": "722720"
  },
  {
    "text": "server silo id so in this particular case i had a single container with a server silo id",
    "start": "722720",
    "end": "728720"
  },
  {
    "text": "of 804 and as you can see the style directory is almost identical to the",
    "start": "728720",
    "end": "734000"
  },
  {
    "text": "host directory this is because windows tried to virtualize a mini operating system as accurately as",
    "start": "734000",
    "end": "740720"
  },
  {
    "text": "possible so most of the symbolic links that the host have the container have two",
    "start": "740720",
    "end": "747040"
  },
  {
    "text": "with different destinations of course so we'll discuss the server silo",
    "start": "747040",
    "end": "753120"
  },
  {
    "text": "directory objects further later in the talk",
    "start": "753120",
    "end": "757959"
  },
  {
    "text": "okay let's move to let's move on to an actual example of how the directory object is used",
    "start": "759440",
    "end": "766320"
  },
  {
    "text": "in a simple create file code so the crea file api receives a file",
    "start": "766320",
    "end": "771760"
  },
  {
    "text": "path and returns a handle to the file the process can read write or do other",
    "start": "771760",
    "end": "777200"
  },
  {
    "text": "actions with that handle depending on their permissions of their process asked",
    "start": "777200",
    "end": "782320"
  },
  {
    "text": "when they when calling their create file and in this example we are calling create file on on",
    "start": "782320",
    "end": "788959"
  },
  {
    "text": "on the c drive named secret.text note that the c part is just a symbolic",
    "start": "788959",
    "end": "795519"
  },
  {
    "text": "link as you can see in the screenshot below so c is first converted to something the",
    "start": "795519",
    "end": "802079"
  },
  {
    "text": "kernel can actually query it is converted to the root directory object",
    "start": "802079",
    "end": "807120"
  },
  {
    "text": "form of this path this is done in user mode before the call arrives to the kernel",
    "start": "807120",
    "end": "813600"
  },
  {
    "text": "and after that in the kernel the kernel queried that global c path in the good",
    "start": "813600",
    "end": "818720"
  },
  {
    "text": "directory object that they show earlier and received the destination of that symbolic link",
    "start": "818720",
    "end": "824560"
  },
  {
    "text": "it then queried that destination it received from the symbolic link still under the wood directory object but this",
    "start": "824560",
    "end": "831680"
  },
  {
    "text": "time the pulsing end with an actual device and not a symbolic link so the",
    "start": "831680",
    "end": "836959"
  },
  {
    "text": "passing is over at this point having at this point having an actual device the kernel",
    "start": "836959",
    "end": "842320"
  },
  {
    "text": "follows the request to the device driver in this case it's the file system driver",
    "start": "842320",
    "end": "849040"
  },
  {
    "text": "and from from here the file system driver takes the execution and",
    "start": "849040",
    "end": "854560"
  },
  {
    "text": "that part is less important for us but remember that the part where the kernel received the symbolic cleaning target",
    "start": "854560",
    "end": "861839"
  },
  {
    "text": "and query that under the wood directory object and until it found the actual device it",
    "start": "861839",
    "end": "868399"
  },
  {
    "text": "will be important for us later also remember that this query was an example of a query from the host and not",
    "start": "868399",
    "end": "876079"
  },
  {
    "text": "from inside the container it is slightly different from calls that come from",
    "start": "876079",
    "end": "881199"
  },
  {
    "text": "inside a container and we will talk about it about that scenario in a minute",
    "start": "881199",
    "end": "887279"
  },
  {
    "text": "okay so uh before giving an example of a file access from inside a container",
    "start": "888320",
    "end": "894160"
  },
  {
    "text": "let's discuss how the system decides that a call comes from a container as you can see on the",
    "start": "894160",
    "end": "901279"
  },
  {
    "text": "left there are plenty of functions that can decide if a call comes from a server side or not and the kind of the kernel",
    "start": "901279",
    "end": "908720"
  },
  {
    "text": "uses different functions in different scenarios but in our specific case",
    "start": "908720",
    "end": "913920"
  },
  {
    "start": "912000",
    "end": "912000"
  },
  {
    "text": "if the kernel decides a call can't form a container it queries the path we saw",
    "start": "913920",
    "end": "920000"
  },
  {
    "text": "before the global c path relative to the server side of subdirectory inside the wood",
    "start": "920000",
    "end": "926560"
  },
  {
    "text": "directory object and this will happen every x and every axis of a named object such as file so",
    "start": "926560",
    "end": "934320"
  },
  {
    "text": "as you can see on the right it will try to query and pause the symbol and click",
    "start": "934320",
    "end": "940320"
  },
  {
    "text": "relative to the silos 804 subdirectory instead from the root directory object",
    "start": "940320",
    "end": "948160"
  },
  {
    "text": "okay so in this case for ida you can see the branch in the kernel where it",
    "start": "948480",
    "end": "953519"
  },
  {
    "text": "decides if path will be queried to the actual directory object or to the server side of subdirectory in",
    "start": "953519",
    "end": "960480"
  },
  {
    "text": "the root directory object and this is done using the psg permanent silo",
    "start": "960480",
    "end": "966079"
  },
  {
    "text": "context scanner function which is one of the many functions that i showed earlier that the kernel decides if the call",
    "start": "966079",
    "end": "972800"
  },
  {
    "text": "comes from server side or not okay so let's go over an example of",
    "start": "972800",
    "end": "979199"
  },
  {
    "start": "977000",
    "end": "977000"
  },
  {
    "text": "accessing a file from a container as before we are accessing",
    "start": "979199",
    "end": "984639"
  },
  {
    "text": "a file named secret dot text under the c drive but this time from inside the container",
    "start": "984639",
    "end": "991519"
  },
  {
    "text": "i'm scoping the user mode part where the api has the global part before the c letter and because we covered it already",
    "start": "991519",
    "end": "998000"
  },
  {
    "text": "and jumping straight to the counterpart the camera calls ps get parallel inside",
    "start": "998000",
    "end": "1004240"
  },
  {
    "text": "a context and retrieves a silo context and not now so it takes the branch of of",
    "start": "1004240",
    "end": "1010800"
  },
  {
    "text": "a server silo in the kernel code 804 in our case and it queried the relevant",
    "start": "1010800",
    "end": "1017199"
  },
  {
    "text": "directory under the subdirectory of the silo in the wood directory object",
    "start": "1017199",
    "end": "1022399"
  },
  {
    "text": "and it does that until it finds the c symbol and clean exactly as he did from the host but this time relative to the",
    "start": "1022399",
    "end": "1029199"
  },
  {
    "text": "804 sub directory in the directory object and",
    "start": "1029199",
    "end": "1034400"
  },
  {
    "text": "this time the c symbolic link points to a virtual hard disk device",
    "start": "1034400",
    "end": "1039678"
  },
  {
    "text": "under the silo subdirectory in the wood directory object so before that it was how this device volume 3 to those we",
    "start": "1039679",
    "end": "1047199"
  },
  {
    "text": "will remember and this time it's virtual hard disk and some more numbers after it",
    "start": "1047199",
    "end": "1053440"
  },
  {
    "text": "this virtual hard disk eventually points to a path in the host file system",
    "start": "1053440",
    "end": "1059840"
  },
  {
    "text": "but it has its own device to do it in the file system driver",
    "start": "1059840",
    "end": "1067080"
  },
  {
    "text": "okay but take a look at the at the screenshot and this is the interesting part",
    "start": "1067120",
    "end": "1073440"
  },
  {
    "text": "that virtual hard disk device isn't a device at all it's a symbol in clink2",
    "start": "1073440",
    "end": "1078480"
  },
  {
    "text": "which points to itself a symbolic link so we end up in an infinite loop because",
    "start": "1078480",
    "end": "1084960"
  },
  {
    "text": "we query a symbolic link that its target is the same symbolic link so we will",
    "start": "1084960",
    "end": "1090320"
  },
  {
    "text": "query it again and symbolic link again and this was the point of my research when i realized there is something i'm",
    "start": "1090320",
    "end": "1097200"
  },
  {
    "text": "missing here because the request to the file was successful and i was able to",
    "start": "1097200",
    "end": "1102559"
  },
  {
    "text": "read and write to the file in my container so it was obviously working but on the other hand",
    "start": "1102559",
    "end": "1108640"
  },
  {
    "text": "it looked like we should have been stuck in an infinite loop so what's going on here",
    "start": "1108640",
    "end": "1115279"
  },
  {
    "start": "1114000",
    "end": "1114000"
  },
  {
    "text": "okay let's it's it's relevant let's go over uh what the requirements are every",
    "start": "1115360",
    "end": "1121280"
  },
  {
    "text": "container either in linux or in windows needs to be able to communicate with some of the host devices it can be a",
    "start": "1121280",
    "end": "1128320"
  },
  {
    "text": "screen to show output or a network device or a file system",
    "start": "1128320",
    "end": "1133440"
  },
  {
    "text": "so in the way windows works some of the symbolic links must point to the device in the hostel",
    "start": "1133440",
    "end": "1140640"
  },
  {
    "text": "directory object for the container to walk otherwise the container the container won't have any access to",
    "start": "1140640",
    "end": "1146160"
  },
  {
    "text": "anything so for example the virtual file system is eventually just a path in the",
    "start": "1146160",
    "end": "1151679"
  },
  {
    "text": "host file system and the container must have access to that path so it must have some access to the host",
    "start": "1151679",
    "end": "1159520"
  },
  {
    "text": "file system device and we are getting closer to the actual",
    "start": "1159520",
    "end": "1164559"
  },
  {
    "text": "escape i promise uh the way it is done in windows is that the process with the right permission",
    "start": "1164559",
    "end": "1170480"
  },
  {
    "text": "permissions can set a symbolic link as global a global symbolic link will",
    "start": "1170480",
    "end": "1176240"
  },
  {
    "start": "1173000",
    "end": "1173000"
  },
  {
    "text": "always be looked at relative to the host's root directory object regardless if the process that is trying",
    "start": "1176240",
    "end": "1183360"
  },
  {
    "text": "to pulse it is inside a container so and when a container is created docker sets some of the containers",
    "start": "1183360",
    "end": "1190480"
  },
  {
    "text": "symbolic link as global and that's why the container can maintain some sort of",
    "start": "1190480",
    "end": "1195600"
  },
  {
    "text": "communication with the host non-global symbolic links are passed past relative to the cells who would",
    "start": "1195600",
    "end": "1202640"
  },
  {
    "text": "direct the object as we discussed earlier",
    "start": "1202640",
    "end": "1207400"
  },
  {
    "text": "okay so in this scan shot you can clearly see",
    "start": "1207679",
    "end": "1213919"
  },
  {
    "text": "the condition in either eax holds one of the symbolic links parameter the one",
    "start": "1213919",
    "end": "1220159"
  },
  {
    "text": "that holds if a symbolic link is global or not and if it is the execution will take the",
    "start": "1220159",
    "end": "1226080"
  },
  {
    "text": "right branch will and will retrieve the rule directly object form a global variable",
    "start": "1226080",
    "end": "1233360"
  },
  {
    "text": "in the kernel and if not it will take the left branch and then we'll have to get the silo context first as you can",
    "start": "1233360",
    "end": "1240480"
  },
  {
    "text": "see the left branch called psg getter and style context so",
    "start": "1240480",
    "end": "1245679"
  },
  {
    "text": "when we are trying to process in bonnie link eventually there is a condition and if",
    "start": "1245679",
    "end": "1251840"
  },
  {
    "text": "the symbolic link is global the the link will be passed relative to the root directory object and if",
    "start": "1251840",
    "end": "1259280"
  },
  {
    "text": "if it's not global it will be passed relative to the server silos subdirectory object in our",
    "start": "1259280",
    "end": "1265840"
  },
  {
    "text": "case the 804 subdirector",
    "start": "1265840",
    "end": "1269760"
  },
  {
    "text": "so if the symbolic link is global the link will be passed from here instead from here it will be passed from the",
    "start": "1271600",
    "end": "1278640"
  },
  {
    "text": "944 in this case and not from the root",
    "start": "1278640",
    "end": "1283919"
  },
  {
    "text": "just a clarification it's not 804 anymore because it took me some time to",
    "start": "1288559",
    "end": "1293600"
  },
  {
    "text": "create this presentation and i wasn't able to get the exact container id again",
    "start": "1293600",
    "end": "1299440"
  },
  {
    "text": "for taking this screenshot uh so okay let's move to the house",
    "start": "1299440",
    "end": "1304480"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "uh how can we exploit that global symbolic link feature to break out of a container",
    "start": "1304480",
    "end": "1310799"
  },
  {
    "text": "so the function that is in charge of making symbolic global is the undocumented anti-set information",
    "start": "1310799",
    "end": "1316960"
  },
  {
    "text": "symbolically in function and after reversing it reverse engineering in order to understand what",
    "start": "1316960",
    "end": "1323440"
  },
  {
    "text": "parameters the function expects i discovered that it requires sc tcb",
    "start": "1323440",
    "end": "1328640"
  },
  {
    "text": "privilege permissions in order to make links global and sadly the regular",
    "start": "1328640",
    "end": "1334000"
  },
  {
    "text": "container user uh doesn't have those permissions uh but lucky for us there is another",
    "start": "1334000",
    "end": "1340320"
  },
  {
    "text": "process in the container scope meaning it is visible to the containers user",
    "start": "1340320",
    "end": "1345520"
  },
  {
    "text": "called cxlservice.exe and this process has in fact sctv",
    "start": "1345520",
    "end": "1351120"
  },
  {
    "text": "privilege among other privileges and lucky for us again by default the normal container user is",
    "start": "1351120",
    "end": "1358000"
  },
  {
    "text": "administrator okay so take a look at this screenshot from ida",
    "start": "1358000",
    "end": "1364000"
  },
  {
    "text": "as you can see there is a check for se tcp privilege before",
    "start": "1364000",
    "end": "1370080"
  },
  {
    "text": "moving forward with the execution in making a symbolic clean global",
    "start": "1370080",
    "end": "1376240"
  },
  {
    "start": "1377000",
    "end": "1377000"
  },
  {
    "text": "okay so let's go over the escape first we impersonate cxx service to gain",
    "start": "1377520",
    "end": "1384559"
  },
  {
    "text": "its tcp privileges there are numerous ways to do that such as trading personation or dll injection and after",
    "start": "1384559",
    "end": "1392159"
  },
  {
    "text": "that we create a regular symbolic link which at this point is not global it's",
    "start": "1392159",
    "end": "1397520"
  },
  {
    "text": "not globally and it points to our local containerized c drive doesn't help us",
    "start": "1397520",
    "end": "1403440"
  },
  {
    "text": "and then we call empty set information symbolic link with our newly created symbolic link to make this symbolic link",
    "start": "1403440",
    "end": "1410880"
  },
  {
    "text": "global and at this point we have full access to the host c drive by using our local x right",
    "start": "1410880",
    "end": "1417200"
  },
  {
    "text": "and from there the possibilities are endless okay so i'll explain it again a bit",
    "start": "1417200",
    "end": "1423120"
  },
  {
    "text": "slower we create a c we create a symbolic link it's not global yet we then we we named it x and we make it",
    "start": "1423120",
    "end": "1431760"
  },
  {
    "text": "points to c and so we basically have a redundant symbolic links x that points to a",
    "start": "1431760",
    "end": "1438320"
  },
  {
    "text": "symbolic link c inside a container after that we call the antecedent information symbol in",
    "start": "1438320",
    "end": "1444159"
  },
  {
    "text": "clinton because we impersonated a process that has the permissions and we give it the parameter we give the",
    "start": "1444159",
    "end": "1451279"
  },
  {
    "text": "entity information involving king function we gave it x and it makes it global so now we have an x",
    "start": "1451279",
    "end": "1458799"
  },
  {
    "text": "symbolic link inside the container that points to a c drive outside the container so we broke the containers",
    "start": "1458799",
    "end": "1465760"
  },
  {
    "text": "barrier in this graph you can see how siloscape",
    "start": "1465760",
    "end": "1471440"
  },
  {
    "start": "1467000",
    "end": "1467000"
  },
  {
    "text": "operated cytoscape the malware from the beginning after finding a vulnerable",
    "start": "1471440",
    "end": "1476480"
  },
  {
    "text": "cluster using services like shorthand it used known one days to get its payload",
    "start": "1476480",
    "end": "1483279"
  },
  {
    "text": "in the windows container it then used the container escape i described to get",
    "start": "1483279",
    "end": "1488880"
  },
  {
    "text": "access to the host and after that it used the kubernetes config file to get",
    "start": "1488880",
    "end": "1493919"
  },
  {
    "text": "control of the rest of the cluster it specifically targeted kubernetes using",
    "start": "1493919",
    "end": "1499600"
  },
  {
    "text": "using windows containers after after breaking out of the container and",
    "start": "1499600",
    "end": "1505520"
  },
  {
    "text": "gaining access to the to the host it issued a kubernetes command to see its",
    "start": "1505520",
    "end": "1512240"
  },
  {
    "text": "permissions in the cluster and if if he didn't have enough permissions to",
    "start": "1512240",
    "end": "1517520"
  },
  {
    "text": "create other deployments he just quitted and didn't even want didn't even use",
    "start": "1517520",
    "end": "1523200"
  },
  {
    "text": "that cluster so what i was thinking it it tried to just gain free processing power and if",
    "start": "1523200",
    "end": "1529120"
  },
  {
    "text": "it can't deploy a new new new containers it doesn't help it very",
    "start": "1529120",
    "end": "1534880"
  },
  {
    "text": "much so uh how are cloud providers affected",
    "start": "1534880",
    "end": "1540880"
  },
  {
    "start": "1537000",
    "end": "1537000"
  },
  {
    "text": "well the trivial thing is any kubernetes cluster with a windows node and attacker that gain access to that container can",
    "start": "1540880",
    "end": "1547120"
  },
  {
    "text": "just break out of the host and possibly spread from that like stylescape date",
    "start": "1547120",
    "end": "1552320"
  },
  {
    "text": "and depending on how the cluster is configured cell attacker will at least be able to",
    "start": "1552320",
    "end": "1558159"
  },
  {
    "text": "control every every container that the specific node he compromises hosting so even even if",
    "start": "1558159",
    "end": "1566720"
  },
  {
    "text": "the cluster is configured properly uh someone that broke out of the container",
    "start": "1566720",
    "end": "1572000"
  },
  {
    "text": "to the host will be able to con to control the containers that this particular host is hosting",
    "start": "1572000",
    "end": "1579120"
  },
  {
    "text": "um as cyloscape did and a tackle could possibly spread in the rest of the cluster as well if the cust the cluster",
    "start": "1579120",
    "end": "1585760"
  },
  {
    "text": "is not well configured and another possibility is the whole",
    "start": "1585760",
    "end": "1590799"
  },
  {
    "text": "container as a service service imagine a cloud provider offering windows containers as a service and not",
    "start": "1590799",
    "end": "1598640"
  },
  {
    "text": "part of an entire cluster an attacker can host a malicious container",
    "start": "1598640",
    "end": "1604000"
  },
  {
    "text": "and break out of his own container and gain access to other customers private containers and i'm not saying i found",
    "start": "1604000",
    "end": "1611600"
  },
  {
    "text": "out something like that uh happened or happening i just think it it it can be done",
    "start": "1611600",
    "end": "1618320"
  },
  {
    "start": "1618000",
    "end": "1618000"
  },
  {
    "text": "okay uh let's go over the timeline uh as you can see in the timeline the windows containers were vulnerable to this issue",
    "start": "1618480",
    "end": "1625679"
  },
  {
    "text": "for quite some time almost five years since release but the more important issue here is",
    "start": "1625679",
    "end": "1631840"
  },
  {
    "text": "that windows containers were vulnerable to this escape over a year and a half",
    "start": "1631840",
    "end": "1636960"
  },
  {
    "text": "after it was made public and though during this time anything that uses windows container was",
    "start": "1636960",
    "end": "1643679"
  },
  {
    "text": "vulnerable too as a byproduct uh as as we can as we as we saw there",
    "start": "1643679",
    "end": "1650720"
  },
  {
    "text": "are there were players in the in the community like for example stylescape that",
    "start": "1650720",
    "end": "1657279"
  },
  {
    "text": "used this vulnerable thing that made public to gain free processing power",
    "start": "1657279",
    "end": "1664480"
  },
  {
    "start": "1663000",
    "end": "1663000"
  },
  {
    "text": "okay so let's talk about what we as either cloud providers or users could do",
    "start": "1664640",
    "end": "1670159"
  },
  {
    "text": "about it while it was while while it was vulnerable",
    "start": "1670159",
    "end": "1675679"
  },
  {
    "text": "so we have a vendor in this case microsoft which takes some time to fix the container escape what could it do",
    "start": "1675679",
    "end": "1681840"
  },
  {
    "text": "about it about it well there are a few things first of all in order for an attacker to even be in a position to use",
    "start": "1681840",
    "end": "1688720"
  },
  {
    "text": "this issue he must need me must first gain access to your container",
    "start": "1688720",
    "end": "1693840"
  },
  {
    "text": "so most of the time this happens to an outdated application in your",
    "start": "1693840",
    "end": "1699279"
  },
  {
    "text": "container or a misconfigured container manager so keep your applications up to",
    "start": "1699279",
    "end": "1704559"
  },
  {
    "text": "date even if they are inside a container this is relevant to both linux and windows and this one isn't",
    "start": "1704559",
    "end": "1711919"
  },
  {
    "text": "relevant for cloud providers because this this one isn't relevant for cloud",
    "start": "1711919",
    "end": "1718640"
  },
  {
    "text": "provider because it uses user control i mean the cloud providers let the user",
    "start": "1718640",
    "end": "1724240"
  },
  {
    "text": "control the cluster so the user is is accountable for updating its own",
    "start": "1724240",
    "end": "1730240"
  },
  {
    "text": "applications and next and this is only relevant to users and",
    "start": "1730240",
    "end": "1735760"
  },
  {
    "text": "cloud providers i advise you to run your containers as container user instead of administrator",
    "start": "1735760",
    "end": "1743520"
  },
  {
    "text": "it would be and this one only only for windows it would be much harder to pull off something like that without",
    "start": "1743520",
    "end": "1750080"
  },
  {
    "text": "administrator permissions and kubernetes supports that as well so there is a",
    "start": "1750080",
    "end": "1755360"
  },
  {
    "text": "special variable you can set in your yaml to run your applications as container user instead of administrator",
    "start": "1755360",
    "end": "1762320"
  },
  {
    "text": "and this was a possible solution for cloud providers while while waiting for a fix",
    "start": "1762320",
    "end": "1767919"
  },
  {
    "text": "for microsoft simply changing the default user inside a container so if i'm a cloud provider right now and i'm",
    "start": "1767919",
    "end": "1775360"
  },
  {
    "text": "letting my user create windows containers inside the cluster but i don't want them to be",
    "start": "1775360",
    "end": "1781919"
  },
  {
    "text": "vulnerable i could change the defaults user of the windows container to contain a",
    "start": "1781919",
    "end": "1787600"
  },
  {
    "text": "user until microsoft fixes this issue and third after update your windows host",
    "start": "1787600",
    "end": "1794720"
  },
  {
    "text": "this is mostly relevant for cloud providers and not the user",
    "start": "1794720",
    "end": "1800399"
  },
  {
    "text": "or for users who are running their own cloud environment on their own machine and",
    "start": "1800399",
    "end": "1805919"
  },
  {
    "text": "so keep your windows host updated and last but not least and again this is",
    "start": "1805919",
    "end": "1811679"
  },
  {
    "text": "relevant for both users and cloud providers configure your kubernetes properly so for example",
    "start": "1811679",
    "end": "1819200"
  },
  {
    "text": "in the case of cyloscape was it managed to break out of uh out of",
    "start": "1819200",
    "end": "1825360"
  },
  {
    "text": "the container to the host and spreading the in the entire cluster and as i see",
    "start": "1825360",
    "end": "1830880"
  },
  {
    "text": "it there is no reason for a cluster for for a host for a specific cost to be",
    "start": "1830880",
    "end": "1836799"
  },
  {
    "text": "able to create deployments on other hosts and that's what happened with science",
    "start": "1836799",
    "end": "1844640"
  },
  {
    "start": "1845000",
    "end": "1845000"
  },
  {
    "text": "let's go over about on the microsoft patch so a few weeks ago microsoft actually patched the",
    "start": "1845919",
    "end": "1852080"
  },
  {
    "text": "antecedent information symbolic cleaning function and the patch is easy to understand and",
    "start": "1852080",
    "end": "1857360"
  },
  {
    "text": "straightforward any call to anti-set information symbolic link form a thread inside a container will be",
    "start": "1857360",
    "end": "1865120"
  },
  {
    "text": "blocked with the status privilege not held l code and this is done using the ps is current",
    "start": "1865120",
    "end": "1871600"
  },
  {
    "text": "thread insert the silo function which is one of the many functions that let the kernel decide if the process always",
    "start": "1871600",
    "end": "1878000"
  },
  {
    "text": "thread comes from a server side or not which is its name suggests checks",
    "start": "1878000",
    "end": "1883440"
  },
  {
    "text": "whether the current thread is associated with the process inside the server side",
    "start": "1883440",
    "end": "1890080"
  },
  {
    "text": "on the right you can see how the function looks after the patch and on the left it",
    "start": "1890080",
    "end": "1895440"
  },
  {
    "text": "how it looked before the path so they simply added the condition to check uh it makes sense to check if if",
    "start": "1895440",
    "end": "1903039"
  },
  {
    "text": "if call if the process that's calling the anticipated information symbolic line comes from a container",
    "start": "1903039",
    "end": "1908399"
  },
  {
    "text": "and if it is it won't it won't let it uh okay so",
    "start": "1908399",
    "end": "1914960"
  },
  {
    "text": "here are some some of my articles about about this subject i covered everything i talked",
    "start": "1914960",
    "end": "1920559"
  },
  {
    "text": "about it here in details if anyone is interested and that's it any questions",
    "start": "1920559",
    "end": "1929639"
  },
  {
    "text": "nice job are there any questions for daniel before we wrap up",
    "start": "1937840",
    "end": "1944760"
  },
  {
    "text": "was very thorough then okay all right well daniel thank you so much",
    "start": "1949519",
    "end": "1956880"
  },
  {
    "text": "for a wonderful presentation um if that's it then thank you everyone for",
    "start": "1956880",
    "end": "1963200"
  },
  {
    "text": "joining us and the webinar recording and slides will be online later today we'll",
    "start": "1963200",
    "end": "1968320"
  },
  {
    "text": "see you at another webinar soon",
    "start": "1968320",
    "end": "1972679"
  }
]