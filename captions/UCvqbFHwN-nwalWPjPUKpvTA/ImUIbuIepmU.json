[
  {
    "start": "0",
    "end": "152000"
  },
  {
    "text": "[Music] hello everyone good morning",
    "start": "50",
    "end": "5600"
  },
  {
    "text": "welcome to the day 2 of kcd chennai very happy to be here talking to you",
    "start": "5600",
    "end": "11519"
  },
  {
    "text": "about how to build reliability in cloud native i am omar mukhera head of chaos",
    "start": "11519",
    "end": "18880"
  },
  {
    "text": "engineering at honest i'm also co-creator and maintainer of litmus project which is an",
    "start": "18880",
    "end": "25519"
  },
  {
    "text": "incubating project at the cncf at the moment before we begin let's uh let me talk a",
    "start": "25519",
    "end": "32398"
  },
  {
    "text": "little bit about where i work and what i do um harness is a modern software delivery",
    "start": "32399",
    "end": "39200"
  },
  {
    "text": "platform it is various features like continuous integration continuous deployment",
    "start": "39200",
    "end": "44879"
  },
  {
    "text": "future flags cloud cost management security test orchestrations securities",
    "start": "44879",
    "end": "50960"
  },
  {
    "text": "service reliability management and of course chaos engineering",
    "start": "50960",
    "end": "57120"
  },
  {
    "text": "litmus is an end-to-end chaos engineering platform uh it's a complete framework for building chaos engineering",
    "start": "57600",
    "end": "65040"
  },
  {
    "text": "capability for devops in your cloud native organization",
    "start": "65040",
    "end": "71280"
  },
  {
    "text": "so what are we talking about this morning we're talking about",
    "start": "71280",
    "end": "76400"
  },
  {
    "text": "how to grow in cloud native uh many of us are moving",
    "start": "76400",
    "end": "81840"
  },
  {
    "text": "to cloud native uh we are well into cloud native",
    "start": "81840",
    "end": "87119"
  },
  {
    "text": "but how do you make sure that you grow in",
    "start": "87119",
    "end": "92240"
  },
  {
    "text": "cloud native very confidently without any hiccups also efficiently",
    "start": "92240",
    "end": "98799"
  },
  {
    "text": "which means that you know you are spending the right amount of resources and",
    "start": "98799",
    "end": "104159"
  },
  {
    "text": "you're including the cost as well as you're getting the right reliability or returns within",
    "start": "104159",
    "end": "113119"
  },
  {
    "text": "cloud native so",
    "start": "113119",
    "end": "118159"
  },
  {
    "text": "to grow within cloud native very efficiently and confidently you need to have a",
    "start": "118159",
    "end": "124880"
  },
  {
    "text": "reliability in cloud native so we'll talk about uh cloud native a",
    "start": "124880",
    "end": "131280"
  },
  {
    "text": "little bit and then what is reliability then what it means uh to have",
    "start": "131280",
    "end": "137120"
  },
  {
    "text": "reliability in cloud native which will help you grow within cloud",
    "start": "137120",
    "end": "142720"
  },
  {
    "text": "native very confidently so let's uh do a quick recap on what is cloud native",
    "start": "142720",
    "end": "152160"
  },
  {
    "start": "152000",
    "end": "152000"
  },
  {
    "text": "so as we all know cloud native will usually have lots and lots of micro",
    "start": "152160",
    "end": "158720"
  },
  {
    "text": "services you're basically moving away from either bare metal or virtualized",
    "start": "158720",
    "end": "164319"
  },
  {
    "text": "environments into containers where your focus is really the small",
    "start": "164319",
    "end": "169360"
  },
  {
    "text": "amount of software and you're writing um a good api around it and they can run",
    "start": "169360",
    "end": "175200"
  },
  {
    "text": "anywhere right so eventually your application is broken up into",
    "start": "175200",
    "end": "180400"
  },
  {
    "text": "multiple microservices and then in cloud native you're seeing",
    "start": "180400",
    "end": "185680"
  },
  {
    "text": "these micro services are being shipped out very fast right that's one of the advantages of um",
    "start": "185680",
    "end": "192159"
  },
  {
    "text": "our benefits of moving to cloud native right so your software ships fast",
    "start": "192159",
    "end": "198959"
  },
  {
    "text": "and of course this micro services are now run under",
    "start": "198959",
    "end": "204640"
  },
  {
    "text": "on any cloud wherever there is kubernetes abstraction many of the cloud",
    "start": "204640",
    "end": "210319"
  },
  {
    "text": "providers are providing kubernetes abstraction layer or community service so you can expect that",
    "start": "210319",
    "end": "216799"
  },
  {
    "text": "your microservice runs uh everywhere um almost all on clouds or on other",
    "start": "216799",
    "end": "223760"
  },
  {
    "text": "enterprise boundaries wherever kubernetes distributions are being deployed",
    "start": "223760",
    "end": "230000"
  },
  {
    "text": "so this is in summary what the cloud native is so you have heterogeneous environment you are",
    "start": "230000",
    "end": "237120"
  },
  {
    "text": "having multiple micro services containers which are being shipped out faster",
    "start": "237120",
    "end": "242879"
  },
  {
    "text": "and what's also new in cloud native compared to your legacy system is you",
    "start": "242879",
    "end": "248480"
  },
  {
    "start": "243000",
    "end": "243000"
  },
  {
    "text": "will generally see more and more dynamism right so basically they are being shipped out",
    "start": "248480",
    "end": "254480"
  },
  {
    "text": "faster there are too many components and also you have lots of",
    "start": "254480",
    "end": "259519"
  },
  {
    "text": "new personas or people who are bringing in um you know",
    "start": "259519",
    "end": "265520"
  },
  {
    "text": "new capabilities not like legacy system capabilities and um",
    "start": "265520",
    "end": "271280"
  },
  {
    "text": "you know these people are needed because you are bringing in new technologies you are building uh new pipelines",
    "start": "271280",
    "end": "277360"
  },
  {
    "text": "for your software delivery and operations and management and so on and so forth",
    "start": "277360",
    "end": "283280"
  },
  {
    "text": "right so eventually this is also leading to creation of new personas in your software",
    "start": "283280",
    "end": "290240"
  },
  {
    "text": "uh delivery management lifecycle systems for example the the concept of sre is becoming a site",
    "start": "290240",
    "end": "298080"
  },
  {
    "text": "reliability engineer is becoming more and more common nowadays in any cloud native uh system cloud native developers",
    "start": "298080",
    "end": "305280"
  },
  {
    "text": "are a class of uh you know a new software developers who",
    "start": "305280",
    "end": "310720"
  },
  {
    "text": "have to assume that your software is configurable uh declaratively and it can",
    "start": "310720",
    "end": "317520"
  },
  {
    "text": "run anywhere it has to have a good api so you need to be using new set of tools",
    "start": "317520",
    "end": "323440"
  },
  {
    "text": "um to to make sure that you know all these are being satisfied so basically",
    "start": "323440",
    "end": "328720"
  },
  {
    "text": "um cloud native environment development ecosystems devops ecosystem is uh",
    "start": "328720",
    "end": "334240"
  },
  {
    "text": "definitely a bit different and we sometimes call this as cloud native devops and so that's that's also one",
    "start": "334240",
    "end": "341759"
  },
  {
    "text": "thing to note about cloud native as you can see here there is a big change that is underway",
    "start": "341759",
    "end": "348639"
  },
  {
    "text": "and we call it as uh you know moving to cloud native and almost you see",
    "start": "348639",
    "end": "354000"
  },
  {
    "text": "uh product services uh vendors um you know participating in every area uh to",
    "start": "354000",
    "end": "360880"
  },
  {
    "text": "to make the journey of uh cloud native moment uh very very successful",
    "start": "360880",
    "end": "366880"
  },
  {
    "text": "so it's it's it's happening and cncf is leading um the entire change from the plant",
    "start": "366880",
    "end": "374639"
  },
  {
    "text": "so that's about uh cloud native let's also talk about uh what is reliability before we talk about",
    "start": "374639",
    "end": "381360"
  },
  {
    "text": "reliability in cloud native let's really touch upon what do we really mean when we say reliability",
    "start": "381360",
    "end": "389759"
  },
  {
    "start": "389000",
    "end": "389000"
  },
  {
    "text": "the reliability is actually a kind of a perspective everybody says that you know",
    "start": "389759",
    "end": "395680"
  },
  {
    "text": "we are reliable our products are reliable our services are reliable",
    "start": "395680",
    "end": "400960"
  },
  {
    "text": "but then why are we talking about reliability with such an importance reliability is a perspective it's always",
    "start": "400960",
    "end": "408479"
  },
  {
    "text": "about how many nines do you have in your service when you say",
    "start": "408479",
    "end": "414479"
  },
  {
    "text": "uh your service is reliable is it like four nines five nine six names etc",
    "start": "414479",
    "end": "420400"
  },
  {
    "text": "so it's always measured as uh you know a way of how many outages",
    "start": "420400",
    "end": "426240"
  },
  {
    "text": "that you had in the last year or so right so when the outages are increasing",
    "start": "426240",
    "end": "432479"
  },
  {
    "text": "you're less reliable your reliability you know decreases so how to actually uh increase the",
    "start": "432479",
    "end": "439680"
  },
  {
    "text": "reliability of your services really by reducing the outages right so",
    "start": "439680",
    "end": "445919"
  },
  {
    "text": "outages are the point to be noted here",
    "start": "445919",
    "end": "451360"
  },
  {
    "text": "so why is reliability so relevant uh now",
    "start": "451360",
    "end": "456639"
  },
  {
    "text": "in this modern uh digital era is um the digital services are growing very",
    "start": "456639",
    "end": "463039"
  },
  {
    "text": "fast we're of course uh seeing a lot of businesses moving to internet based",
    "start": "463039",
    "end": "469440"
  },
  {
    "text": "traffic because of all this coverage we have seen this digital transformation uh",
    "start": "469440",
    "end": "474800"
  },
  {
    "text": "you know um happening past uh already and the traffic is",
    "start": "474800",
    "end": "480720"
  },
  {
    "text": "probably 10 times more than what we had been seeing in a few years earlier right the reliability is really",
    "start": "480720",
    "end": "487520"
  },
  {
    "text": "important because there's so much of uh new traffic coming on on to your digital",
    "start": "487520",
    "end": "493680"
  },
  {
    "text": "system and when things are happening uh at such",
    "start": "493680",
    "end": "499120"
  },
  {
    "start": "495000",
    "end": "495000"
  },
  {
    "text": "rate uh the outages if what all they happen uh they're going to be very expensive as",
    "start": "499120",
    "end": "505759"
  },
  {
    "text": "you can see some examples here right um how much ever",
    "start": "505759",
    "end": "511039"
  },
  {
    "text": "you try outages are kind of you know",
    "start": "511039",
    "end": "516080"
  },
  {
    "text": "a common thing it only matters how often they happen or how rarely they happen",
    "start": "516080",
    "end": "522320"
  },
  {
    "text": "but they do happen and when they happen there are going to be you know",
    "start": "522320",
    "end": "527440"
  },
  {
    "text": "either financial uh issues losses or reputational losses",
    "start": "527440",
    "end": "532880"
  },
  {
    "text": "as we can see that you know the popular uh products or services that we do day",
    "start": "532880",
    "end": "538560"
  },
  {
    "text": "in and day out uh have gone under this outages and they of course are",
    "start": "538560",
    "end": "543839"
  },
  {
    "text": "um you know expensive to the owner right so the impact of outages",
    "start": "543839",
    "end": "550000"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "uh can be of various types uh there can be reputational uh outages uh just like",
    "start": "550000",
    "end": "556800"
  },
  {
    "text": "you know we're seeing here on slack sometimes you know they can be",
    "start": "556800",
    "end": "562880"
  },
  {
    "text": "causing a huge financial losses as well right if you are under sla or if you're you know a really critical",
    "start": "562880",
    "end": "570640"
  },
  {
    "text": "business that can you know cause huge losses for a bit of downtime",
    "start": "570640",
    "end": "577120"
  },
  {
    "text": "as well and this is another example uh wells fargo in 2019",
    "start": "577120",
    "end": "583519"
  },
  {
    "text": "and of course what happens is um also because of outages is",
    "start": "583519",
    "end": "589360"
  },
  {
    "text": "poor user experience your users nowadays digital age",
    "start": "589360",
    "end": "594800"
  },
  {
    "text": "and they can get really frustrated sometimes because of these outages and bringing back",
    "start": "594800",
    "end": "600959"
  },
  {
    "text": "bringing them back to your service or business is going to be you know a huge challenge right so sometimes",
    "start": "600959",
    "end": "608720"
  },
  {
    "text": "so impact of outages is very difficult to quantify um",
    "start": "608720",
    "end": "613920"
  },
  {
    "text": "they're usually bigger than what you would really assume for short term and long term right",
    "start": "613920",
    "end": "620480"
  },
  {
    "start": "620000",
    "end": "620000"
  },
  {
    "text": "and uh they are very important and now let's try to understand what causes",
    "start": "620480",
    "end": "625600"
  },
  {
    "text": "these outages right um there's not really one thing that",
    "start": "625600",
    "end": "631360"
  },
  {
    "text": "causes this outages but a set of things and usually it's um",
    "start": "631360",
    "end": "637200"
  },
  {
    "text": "you know there can be application failures right so um you have",
    "start": "637200",
    "end": "642640"
  },
  {
    "text": "something gets filled up because of logging and um something you",
    "start": "642640",
    "end": "647680"
  },
  {
    "text": "know when you try retry uh sometimes uh things can",
    "start": "647680",
    "end": "653040"
  },
  {
    "text": "go bad and certainly stomach can happens these are categorized into application values",
    "start": "653040",
    "end": "658959"
  },
  {
    "text": "and we have also seen infrastructure failures causing these outages right",
    "start": "658959",
    "end": "665279"
  },
  {
    "text": "um most of the times this infrastructure there is redundancy but still you know",
    "start": "665279",
    "end": "671279"
  },
  {
    "text": "you never know uh whenever there is a failure in infrastructure um things start to fail",
    "start": "671279",
    "end": "678560"
  },
  {
    "text": "somewhere else right sometimes big infrastructure uh values like you know the whole region becoming unavailable",
    "start": "678560",
    "end": "685920"
  },
  {
    "text": "uh it's not very um common but they do",
    "start": "685920",
    "end": "691279"
  },
  {
    "text": "happen and can happen and the other types of uh",
    "start": "691279",
    "end": "696720"
  },
  {
    "text": "values that can cause outages are operational failures right so capacity",
    "start": "696720",
    "end": "702240"
  },
  {
    "text": "issues here not um populated your service with enough capacity and then under high traffic",
    "start": "702240",
    "end": "709040"
  },
  {
    "text": "things can um you know go very bad and you're not scaling the way you are",
    "start": "709040",
    "end": "715839"
  },
  {
    "text": "expected to scale under that um that conditions or that traffic",
    "start": "715839",
    "end": "722320"
  },
  {
    "text": "and whenever there is an incident happen how well you manage that incident you know",
    "start": "722320",
    "end": "728000"
  },
  {
    "text": "are you recovering fast or is there an auto recovery for such a failure these are all you know part of operational",
    "start": "728000",
    "end": "735519"
  },
  {
    "text": "uh values and then you know a good incident management and monitoring is",
    "start": "735519",
    "end": "741120"
  },
  {
    "text": "very important um when you don't have very good uh monitoring and uh you know ops um uh",
    "start": "741120",
    "end": "749360"
  },
  {
    "text": "monitoring systems that itself uh could be a major factor that causes a longer",
    "start": "749360",
    "end": "756639"
  },
  {
    "text": "outage right so these are some of the generally observed things",
    "start": "756639",
    "end": "761839"
  },
  {
    "text": "and if these are very um the general reasons uh why outages can",
    "start": "761839",
    "end": "769360"
  },
  {
    "text": "happen let's talk about uh in cloud native environment what can cause an",
    "start": "769360",
    "end": "774639"
  },
  {
    "text": "outage right so before we go there uh let's just remind ourselves here uh the typical you",
    "start": "774639",
    "end": "782000"
  },
  {
    "start": "775000",
    "end": "775000"
  },
  {
    "text": "know nature of a cloud native stack it's a it's a kind of a pyramid here where your",
    "start": "782000",
    "end": "789440"
  },
  {
    "text": "app as a developer what you concentrate is really on the top of the pyramid and it's a cloud native app which really",
    "start": "789440",
    "end": "795920"
  },
  {
    "text": "means that you know it's a container and then there are a bunch of services that",
    "start": "795920",
    "end": "800959"
  },
  {
    "text": "your app requires to function right they can be uh you know the message bus",
    "start": "800959",
    "end": "807200"
  },
  {
    "text": "database basis or the cloud native services or kubernetes itself and then there is",
    "start": "807200",
    "end": "813120"
  },
  {
    "text": "uh underlying big platform on which kubernetes runs right so important thing to note here is",
    "start": "813120",
    "end": "820800"
  },
  {
    "text": "a bunch of them are also micro services it's not just your application or your",
    "start": "820800",
    "end": "825839"
  },
  {
    "text": "container uh the below layers all the way down to kubernetes they're all of microservices",
    "start": "825839",
    "end": "832560"
  },
  {
    "text": "uh based so in microservices uh",
    "start": "832560",
    "end": "838079"
  },
  {
    "text": "what can happen is uh especially on kubernetes um a deletion of a pod um is generally not",
    "start": "838079",
    "end": "847120"
  },
  {
    "text": "seen as a real failure right that can happen whenever some pressure is put",
    "start": "847120",
    "end": "853600"
  },
  {
    "text": "and kubernetes can just delete your pod and then relaunch it right so uh the architecture itself uh is um such",
    "start": "853600",
    "end": "862720"
  },
  {
    "text": "right so this is actually a kind of value but you know this is",
    "start": "862720",
    "end": "868800"
  },
  {
    "text": "your kubernetes is designed to withstand that value and is your app or service designed to",
    "start": "868800",
    "end": "875260"
  },
  {
    "text": "[Music] withstand such a failure and will it be",
    "start": "875260",
    "end": "880800"
  },
  {
    "text": "providing continuous service you know as expected or not is a bigger question",
    "start": "880800",
    "end": "885839"
  },
  {
    "text": "right so there are a lot of microservices that's a summary and then uh microservice",
    "start": "885839",
    "end": "893839"
  },
  {
    "text": "based pods can be deleted or such values are not very uncommon",
    "start": "893839",
    "end": "901680"
  },
  {
    "text": "so other important thing to consider in cloud native is how fast they are getting shipped out",
    "start": "901680",
    "end": "907760"
  },
  {
    "text": "so the changes into your pyramid are happening 10 times faster than they",
    "start": "907760",
    "end": "913760"
  },
  {
    "text": "would usually happen in legacy system so you have a continuous change of um",
    "start": "913760",
    "end": "921680"
  },
  {
    "text": "you know stack happening all the time in cloud native and port deletes can happen",
    "start": "921680",
    "end": "927279"
  },
  {
    "text": "anytime in your stack including your application uh these are apart from the regular",
    "start": "927279",
    "end": "933920"
  },
  {
    "text": "infrastructure values or operational videos or application failure right so the outages um",
    "start": "933920",
    "end": "940800"
  },
  {
    "text": "can happen more often if you're not taking care of it proactively in cloud",
    "start": "940800",
    "end": "946639"
  },
  {
    "text": "native and that's why we're talking about reliability as a separate subject in cloud native",
    "start": "946639",
    "end": "952839"
  },
  {
    "text": "today all right so just to summarize reliability in cloud native is more",
    "start": "952839",
    "end": "958320"
  },
  {
    "text": "important because of two reason it's a combined effect of proliferation of micro services as well as uh faster",
    "start": "958320",
    "end": "965120"
  },
  {
    "text": "shipping of this micro services coming into deployment or production",
    "start": "965120",
    "end": "972079"
  },
  {
    "text": "so we talked about what is reliability and why is it so important in cloud native",
    "start": "972079",
    "end": "979279"
  },
  {
    "text": "and we also talked about you know what real cloud native environment looks like",
    "start": "979279",
    "end": "985120"
  },
  {
    "text": "uh when you see with the lens of reliability and now let's also talk about how can",
    "start": "985120",
    "end": "992079"
  },
  {
    "text": "you plan to achieve this reliability in a systematic way right",
    "start": "992079",
    "end": "997120"
  },
  {
    "text": "so most of the time um the systems are deployed with redundancy uh there's no single point of",
    "start": "997120",
    "end": "1003440"
  },
  {
    "text": "value right so if not two or three or four",
    "start": "1003440",
    "end": "1008720"
  },
  {
    "text": "physical systems or you know replicas you always have",
    "start": "1008720",
    "end": "1014160"
  },
  {
    "text": "this redundancy in mind when services are deployed but you know outages still",
    "start": "1014160",
    "end": "1019519"
  },
  {
    "text": "happen because you know systems are very very complex and they're continuously in a state of",
    "start": "1019519",
    "end": "1025120"
  },
  {
    "text": "flux it's very difficult to define the state of uh system at a whole",
    "start": "1025120",
    "end": "1031520"
  },
  {
    "text": "a complete system at a given point of time right as the traffic increases",
    "start": "1031520",
    "end": "1037120"
  },
  {
    "text": "as the network traffic increases system uh state changes and load a lot of",
    "start": "1037120",
    "end": "1042558"
  },
  {
    "text": "things can be different from time to time and then when something goes wrong your",
    "start": "1042559",
    "end": "1048720"
  },
  {
    "text": "redundancy comes into the picture that expect most of the time yes it works but",
    "start": "1048720",
    "end": "1054080"
  },
  {
    "text": "you know it may not be the case all the time right so that's the criticality of service that we are",
    "start": "1054080",
    "end": "1060160"
  },
  {
    "text": "talking about so the problem with some of this approaches that",
    "start": "1060160",
    "end": "1066400"
  },
  {
    "text": "we are saying in with respect to reliability is",
    "start": "1066400",
    "end": "1072000"
  },
  {
    "text": "they're not proactively managed what it means is that most of the time",
    "start": "1072000",
    "end": "1077200"
  },
  {
    "text": "they are reactive when problems happen you go and try to recover them right",
    "start": "1077200",
    "end": "1082720"
  },
  {
    "text": "and they're not collaborative you don't have systems in place to collaborate of",
    "start": "1082720",
    "end": "1088240"
  },
  {
    "text": "failure uh and recovery uh value recovery basically",
    "start": "1088240",
    "end": "1094160"
  },
  {
    "text": "and you don't have [Music] this failure testings",
    "start": "1094160",
    "end": "1099919"
  },
  {
    "text": "that they do they may be ad hoc in nature they're not well integrated into your cse systems right",
    "start": "1099919",
    "end": "1107600"
  },
  {
    "text": "so what's the right approach to build reliability in cloud native",
    "start": "1107600",
    "end": "1114559"
  },
  {
    "text": "the right approach is what we call as take the chaos first approach in your dev of devops",
    "start": "1114559",
    "end": "1120559"
  },
  {
    "text": "right what is chaos first approach let's talk that chaos first approach is",
    "start": "1120559",
    "end": "1126160"
  },
  {
    "start": "1124000",
    "end": "1124000"
  },
  {
    "text": "to introduce chaos engineering as a tool to systematically build the culture of",
    "start": "1126160",
    "end": "1132000"
  },
  {
    "text": "um you know improving reliability into your devops right um reliability is uh not one person's",
    "start": "1132000",
    "end": "1140240"
  },
  {
    "text": "job it is everybody in everybody's job in devops you need to have",
    "start": "1140240",
    "end": "1146640"
  },
  {
    "text": "a certain predefined approach while building the software",
    "start": "1146640",
    "end": "1152720"
  },
  {
    "text": "then while delivering the software while deploying the software and then while managing the software right so the",
    "start": "1152720",
    "end": "1158880"
  },
  {
    "text": "entire devops need to be looking at chaos engineering as a tool that will help them",
    "start": "1158880",
    "end": "1165520"
  },
  {
    "text": "to build systematic improvements in to the reliability making sure that reliability is always",
    "start": "1165520",
    "end": "1172240"
  },
  {
    "text": "there so what is chaos engineering let's talk about that chaos engineering is the",
    "start": "1172240",
    "end": "1179039"
  },
  {
    "start": "1173000",
    "end": "1173000"
  },
  {
    "text": "practice of breaking things on purpose before",
    "start": "1179039",
    "end": "1184320"
  },
  {
    "text": "they happen you break things and then verify that",
    "start": "1184320",
    "end": "1189679"
  },
  {
    "text": "there is no system weakness even if there is a system weakness now you're going and",
    "start": "1189679",
    "end": "1194960"
  },
  {
    "text": "fixing it right so you start small you start with small faults on the system",
    "start": "1194960",
    "end": "1200559"
  },
  {
    "text": "uh in various different layers uh onto various different systems and keep proactively introducing these",
    "start": "1200559",
    "end": "1207200"
  },
  {
    "text": "faults all right introduce this fault compare it with the result with the",
    "start": "1207200",
    "end": "1212640"
  },
  {
    "text": "expected behavior which if it is same then you're good uh test your system is",
    "start": "1212640",
    "end": "1218960"
  },
  {
    "text": "resilient at that time against such failure if it is not then you have got something to learn and",
    "start": "1218960",
    "end": "1225760"
  },
  {
    "text": "because you are introducing this value um you are well prepared to deal with",
    "start": "1225760",
    "end": "1232159"
  },
  {
    "text": "the outcome of such an introduction of failure and you can either uh reverse it",
    "start": "1232159",
    "end": "1238240"
  },
  {
    "text": "quickly or automatically recover uh it's always better uh than you know a fault happening without",
    "start": "1238240",
    "end": "1245360"
  },
  {
    "text": "your knowledge right chaos engineering um is is done always in a controlled",
    "start": "1245360",
    "end": "1252320"
  },
  {
    "text": "environment um and you will have the ability to control the",
    "start": "1252320",
    "end": "1257679"
  },
  {
    "text": "blast radius and you're proactively verifying your system",
    "start": "1257679",
    "end": "1262960"
  },
  {
    "text": "against such faults one by one so that's chaos engineering and chaos engineering is a",
    "start": "1262960",
    "end": "1270000"
  },
  {
    "text": "practice that is now coming as a you know effective tool in",
    "start": "1270000",
    "end": "1276799"
  },
  {
    "text": "cloud native to improve reliability in all areas of devops right",
    "start": "1276799",
    "end": "1282480"
  },
  {
    "start": "1282000",
    "end": "1282000"
  },
  {
    "text": "so in other words uh chaos engineering has to become a kind of a culture in",
    "start": "1282480",
    "end": "1287760"
  },
  {
    "text": "devops and you go and introduce chaos tests in your development ci pipelines or in your",
    "start": "1287760",
    "end": "1295760"
  },
  {
    "text": "delivery mechanisms in cd or in your ops where you continuously",
    "start": "1295760",
    "end": "1301679"
  },
  {
    "text": "validate your slos service level objectives again such failures and then",
    "start": "1301679",
    "end": "1307360"
  },
  {
    "text": "you keep creating some random tests like game days and",
    "start": "1307360",
    "end": "1312640"
  },
  {
    "text": "even before you actually get into production you could be doing a failure",
    "start": "1312640",
    "end": "1317760"
  },
  {
    "text": "testing chaos testing you know very effectively um before actually your code can go",
    "start": "1317760",
    "end": "1325039"
  },
  {
    "text": "into the production environment so if you approach the failure testing from all",
    "start": "1325039",
    "end": "1331840"
  },
  {
    "text": "angles with good tools then chaos engineering becomes very effective and it actually aids uh you know retaining",
    "start": "1331840",
    "end": "1339120"
  },
  {
    "text": "the reliability even when your systems also dynamic and you know",
    "start": "1339120",
    "end": "1344159"
  },
  {
    "text": "and running at high scale so who can use chaos engineering",
    "start": "1344159",
    "end": "1350240"
  },
  {
    "start": "1347000",
    "end": "1347000"
  },
  {
    "text": "right chaos engineering is uh typically thought of it's a",
    "start": "1350240",
    "end": "1356159"
  },
  {
    "text": "supporting practice or a tool for sres or operation systems but",
    "start": "1356159",
    "end": "1363200"
  },
  {
    "text": "it is now increasingly being used by both uh you know qa teams as well as the",
    "start": "1363200",
    "end": "1368559"
  },
  {
    "text": "developers right so developers are using um chaos engineering practices uh",
    "start": "1368559",
    "end": "1374960"
  },
  {
    "text": "to test their microservices uh code uh you know",
    "start": "1374960",
    "end": "1381440"
  },
  {
    "text": "in in various different environments uh right at the development time similarly",
    "start": "1381440",
    "end": "1386559"
  },
  {
    "text": "qa teams uh they will have their large uh test setups and they can now test uh",
    "start": "1386559",
    "end": "1393679"
  },
  {
    "text": "against various failures uh before actually qualifying uh completely right",
    "start": "1393679",
    "end": "1399280"
  },
  {
    "text": "so and of course sres can actually use chaos engineering to perform annual",
    "start": "1399280",
    "end": "1405280"
  },
  {
    "text": "game days and once they're comfortable they go to the automated game days where",
    "start": "1405280",
    "end": "1410720"
  },
  {
    "text": "um you are basically introducing calls randomly and then checking your system",
    "start": "1410720",
    "end": "1416240"
  },
  {
    "text": "if it's reliable or not so basically uh all personas can be involved in chaos",
    "start": "1416240",
    "end": "1421679"
  },
  {
    "text": "engineering and we are seeing that um all this person are slowly taking else",
    "start": "1421679",
    "end": "1426799"
  },
  {
    "text": "engineering as a as a common practice in their day-to-day devops job all right",
    "start": "1426799",
    "end": "1432480"
  },
  {
    "text": "so let me talk a little bit about one such tool the tool that uh we work on",
    "start": "1432480",
    "end": "1437840"
  },
  {
    "text": "it's litmus chaos it's a complete chaos engineering platform to practice",
    "start": "1437840",
    "end": "1444720"
  },
  {
    "text": "end-to-end chaos experiments and the post-effects of the experiments",
    "start": "1444720",
    "end": "1451279"
  },
  {
    "text": "and effectively manage uh the entire chaos experience on kubernetes right so it is a cncf",
    "start": "1451279",
    "end": "1459279"
  },
  {
    "text": "project now and it's been there in uh use and development for about five years",
    "start": "1459279",
    "end": "1464400"
  },
  {
    "text": "now uh very stable uh we have done more than 50 uh enterprise uh releases um and",
    "start": "1464400",
    "end": "1471520"
  },
  {
    "text": "it's being used by many enterprise users and you can see that you know its growth",
    "start": "1471520",
    "end": "1478000"
  },
  {
    "text": "is increasing according by quarter basis so it's a very stable project",
    "start": "1478000",
    "end": "1484080"
  },
  {
    "text": "and feature complete for your basic uh chaos engineering needs uh in",
    "start": "1484080",
    "end": "1490320"
  },
  {
    "text": "cloud native right so uh it has uh",
    "start": "1490320",
    "end": "1495440"
  },
  {
    "text": "at the core um what we call as chaos center which is a",
    "start": "1495440",
    "end": "1500799"
  },
  {
    "text": "centralized platform where different personnels can come and collaborate on chaos",
    "start": "1500799",
    "end": "1506640"
  },
  {
    "text": "and that's what we call as clear as control plane and you have a bunch of",
    "start": "1506640",
    "end": "1512559"
  },
  {
    "text": "chaos experiments that are stored in a public or your own private chaos hubs",
    "start": "1512559",
    "end": "1518400"
  },
  {
    "text": "um where you use those experiments build your chaos workflows or scenarios or",
    "start": "1518400",
    "end": "1524000"
  },
  {
    "text": "chaos tests that make sense for you to your service or application and then you",
    "start": "1524000",
    "end": "1529520"
  },
  {
    "text": "can launch those uh chaos workflows or schedule them or execute them against",
    "start": "1529520",
    "end": "1535200"
  },
  {
    "text": "various different you know infrastructure or systems such as kubernetes or various",
    "start": "1535200",
    "end": "1541919"
  },
  {
    "text": "cloud platforms or bare metal uh or uh you know your on-prem vmware etc etc",
    "start": "1541919",
    "end": "1549840"
  },
  {
    "text": "that's that's how uh litmus structures and in litmus as i just said um your",
    "start": "1549840",
    "end": "1555919"
  },
  {
    "start": "1552000",
    "end": "1552000"
  },
  {
    "text": "teams collaborate around chaos tests and they can be launched uh in various ways",
    "start": "1555919",
    "end": "1562080"
  },
  {
    "text": "um right you can uh send them as a trigger uh to a certain event",
    "start": "1562080",
    "end": "1568080"
  },
  {
    "text": "or you can just schedule them every weekly or you can just put them into your ci or",
    "start": "1568080",
    "end": "1574400"
  },
  {
    "text": "cd pipelines um the developers use uh litmus chaos",
    "start": "1574400",
    "end": "1579600"
  },
  {
    "text": "workflows as you know as a way they do the other uh",
    "start": "1579600",
    "end": "1585440"
  },
  {
    "text": "program executions using uh cube ctr so basically a developer can do a cube ctl",
    "start": "1585440",
    "end": "1591679"
  },
  {
    "text": "apply a chaos workflow or wherever um they want right so that gives a bigger",
    "start": "1591679",
    "end": "1597919"
  },
  {
    "text": "and effective capability to include this in various cacd pipelines or in the unit",
    "start": "1597919",
    "end": "1604080"
  },
  {
    "text": "test or integration test etc etc",
    "start": "1604080",
    "end": "1609200"
  },
  {
    "start": "1609000",
    "end": "1609000"
  },
  {
    "text": "so at the end of um so how developers really um",
    "start": "1609200",
    "end": "1616640"
  },
  {
    "text": "use litmus chaos um and",
    "start": "1616640",
    "end": "1621760"
  },
  {
    "text": "deduce chaos uh tests into their pipelines this is how they do it",
    "start": "1621760",
    "end": "1627279"
  },
  {
    "text": "so they log into chaos center they will have a bunch of experiments available to them",
    "start": "1627279",
    "end": "1632880"
  },
  {
    "text": "and they can use those experiments and create a new scenario to match their um",
    "start": "1632880",
    "end": "1640720"
  },
  {
    "text": "application that they are writing and at the end of it you will have a ml file a",
    "start": "1640720",
    "end": "1646720"
  },
  {
    "text": "declarative file that describes your chaos scenario and you can push it into your gate and",
    "start": "1646720",
    "end": "1654960"
  },
  {
    "text": "that's one part of it and then you can come and uh inject that or call that a file through cubectl",
    "start": "1654960",
    "end": "1662559"
  },
  {
    "text": "into a pipeline and when you do that full chaos execution happens um the",
    "start": "1662559",
    "end": "1668240"
  },
  {
    "text": "litmus execution plane gets spun automatically chaos test run and chaos results are",
    "start": "1668240",
    "end": "1674480"
  },
  {
    "text": "pushed back into chaos center so the moment you introduce uh this",
    "start": "1674480",
    "end": "1680159"
  },
  {
    "text": "chaos stage into pipeline they get automatically run and you have your chaos analytics already available in",
    "start": "1680159",
    "end": "1686720"
  },
  {
    "text": "chaos center and you can compare them over a period of time how my application has been improving",
    "start": "1686720",
    "end": "1693039"
  },
  {
    "text": "or you know you can continuously verify that there is no actually new bug that you're introducing",
    "start": "1693039",
    "end": "1698399"
  },
  {
    "text": "um before you merge your code into your",
    "start": "1698399",
    "end": "1703679"
  },
  {
    "text": "repository so another way that developers are using is through git",
    "start": "1703679",
    "end": "1709520"
  },
  {
    "text": "um [Music] in your pre-production environment uh your apps are getting upgraded and",
    "start": "1709520",
    "end": "1716480"
  },
  {
    "text": "the moment the apps are upgraded a certain test can be run so before your app or code goes into",
    "start": "1716480",
    "end": "1724480"
  },
  {
    "text": "production uh the pre-production environment can actually",
    "start": "1724480",
    "end": "1729919"
  },
  {
    "text": "verify the new functionality against uh certain failures um",
    "start": "1729919",
    "end": "1735440"
  },
  {
    "text": "and those failures can be triggered automatically without developers knowing it right but this is the capability that",
    "start": "1735440",
    "end": "1742880"
  },
  {
    "text": "will help developers making sure that no new bug is introduced",
    "start": "1742880",
    "end": "1748880"
  },
  {
    "text": "in a larger larger play as well as",
    "start": "1748880",
    "end": "1754000"
  },
  {
    "text": "their verifying and their code before it actually gets shipped against such real-time",
    "start": "1754000",
    "end": "1759840"
  },
  {
    "text": "failures so where do you start is another question",
    "start": "1759840",
    "end": "1765360"
  },
  {
    "start": "1762000",
    "end": "1762000"
  },
  {
    "text": "uh there's no um specific way to start chaos test um you can start in pipelines and move",
    "start": "1765360",
    "end": "1772799"
  },
  {
    "text": "towards right right reproduction production sometimes people start uh in reproduction you know if there is an sre",
    "start": "1772799",
    "end": "1780960"
  },
  {
    "text": "uh that is interested in chaos engineering uh they will bring chaos engineering into that organization",
    "start": "1780960",
    "end": "1786720"
  },
  {
    "text": "and then uh start introducing uh failures or automating those failures tests in uh the cd and then ca pipelines",
    "start": "1786720",
    "end": "1795360"
  },
  {
    "text": "so we are seeing chaos engineering chaos test being done uh in all areas there is",
    "start": "1795360",
    "end": "1801039"
  },
  {
    "text": "no particular way um in starting and progressing uh you know",
    "start": "1801039",
    "end": "1806320"
  },
  {
    "text": "later on so this is how a good chaos maturity model",
    "start": "1806320",
    "end": "1813600"
  },
  {
    "start": "1808000",
    "end": "1808000"
  },
  {
    "text": "looks like um in reality right so you always start on basic infrastructure",
    "start": "1813600",
    "end": "1820480"
  },
  {
    "text": "introduce failures in infrastructure and you verify",
    "start": "1820480",
    "end": "1826559"
  },
  {
    "text": "your code or your service is reliable against such values and it could be",
    "start": "1826559",
    "end": "1833039"
  },
  {
    "text": "a various combinations of failure even at the infrastructure and slowly you will move up introducing values that are",
    "start": "1833039",
    "end": "1840640"
  },
  {
    "text": "related to middle layer which has message queues or api servers then go to",
    "start": "1840640",
    "end": "1845679"
  },
  {
    "text": "your data services right or your databases and finally you start writing chaos",
    "start": "1845679",
    "end": "1851919"
  },
  {
    "text": "tests that are specific to your application right and all these things happen over a period of time it could",
    "start": "1851919",
    "end": "1857840"
  },
  {
    "text": "take uh you know a few quarters to sometimes few years by the time that",
    "start": "1857840",
    "end": "1863360"
  },
  {
    "text": "you have a full-fledged uh chaos engineering practice where um",
    "start": "1863360",
    "end": "1870000"
  },
  {
    "text": "you have all sorts of chaos experiments or chaos tests and they are fully",
    "start": "1870000",
    "end": "1875200"
  },
  {
    "text": "automated into your divorce practices so chaos is not like a magic bullet you",
    "start": "1875200",
    "end": "1880640"
  },
  {
    "text": "have a good tool to start off with and it has to primarily become a culture",
    "start": "1880640",
    "end": "1885840"
  },
  {
    "text": "that is when you have a good way to measure reliability",
    "start": "1885840",
    "end": "1891600"
  },
  {
    "text": "and your measuring um the choice of our chance of",
    "start": "1891600",
    "end": "1899279"
  },
  {
    "text": "not introducing new failures uh into your software before they get shipped so",
    "start": "1899279",
    "end": "1904320"
  },
  {
    "text": "just to summarize uh the benefits of chaos engineering in your devops um",
    "start": "1904320",
    "end": "1909600"
  },
  {
    "start": "1905000",
    "end": "1905000"
  },
  {
    "text": "introducing chaos engineering in your devops will lead to um three major benefits um first uh you",
    "start": "1909600",
    "end": "1916480"
  },
  {
    "text": "will see the ability to introduce um you know a failure quickly uh it's called mpta mean",
    "start": "1916480",
    "end": "1924159"
  },
  {
    "text": "time to identify um this is a common problem in most of the systems",
    "start": "1924159",
    "end": "1929760"
  },
  {
    "text": "you know that a failure is happening but it's very difficult to reproduce when you have chaos engineering your",
    "start": "1929760",
    "end": "1935760"
  },
  {
    "text": "developers are well versed in the failure practices there are a bunch of",
    "start": "1935760",
    "end": "1941360"
  },
  {
    "text": "chaos tests that are already available so this new scenario can be quickly",
    "start": "1941360",
    "end": "1946880"
  },
  {
    "text": "reconstructed right so your time to identify a bug",
    "start": "1946880",
    "end": "1952799"
  },
  {
    "text": "or a scenario alternately reduce and because you are able to",
    "start": "1952799",
    "end": "1958480"
  },
  {
    "text": "you are actually reproducing this faults are introducing these faults all the time",
    "start": "1958480",
    "end": "1963679"
  },
  {
    "text": "uh your capability to recover uh from a potential outage uh will be very very",
    "start": "1963679",
    "end": "1969760"
  },
  {
    "text": "high and the recovery times will become slower and because uh you are",
    "start": "1969760",
    "end": "1975360"
  },
  {
    "text": "now going deep and debugging them your development systems are also practicing",
    "start": "1975360",
    "end": "1980480"
  },
  {
    "text": "chaos engineering values in general will reduce and that increases the distance",
    "start": "1980480",
    "end": "1985679"
  },
  {
    "text": "between the failures or entities this is the overall roi from chaos engineering and that when",
    "start": "1985679",
    "end": "1992559"
  },
  {
    "text": "you decrease the time to fail uh you're basically reducing the number of outages and then you're increasing",
    "start": "1992559",
    "end": "1999519"
  },
  {
    "text": "the reliability when you do this as a practice are guaranteeing um you know to your",
    "start": "1999519",
    "end": "2007200"
  },
  {
    "text": "customers that the service is reliable uh that's because you're already testing",
    "start": "2007200",
    "end": "2013440"
  },
  {
    "text": "all the time against potential failures in various areas right",
    "start": "2013440",
    "end": "2019760"
  },
  {
    "start": "2019000",
    "end": "2019000"
  },
  {
    "text": "so just to summarize um reliability should be a devops focus in cloud native",
    "start": "2019760",
    "end": "2026320"
  },
  {
    "text": "and introducing chaos engineering into devops your devops cloud native devops",
    "start": "2026320",
    "end": "2032799"
  },
  {
    "text": "will result in high roi and uh it yields uh structural improvements it's",
    "start": "2032799",
    "end": "2039840"
  },
  {
    "text": "not a magic bullet it heals structural improvements to your product and to your",
    "start": "2039840",
    "end": "2045039"
  },
  {
    "text": "uh devops practices and also your teams will be better",
    "start": "2045039",
    "end": "2050960"
  },
  {
    "text": "because they are aware of the product working uh whenever values do happen so they",
    "start": "2050960",
    "end": "2057118"
  },
  {
    "text": "have debugged the system many many times uh whenever these values are introduced and weaknesses are found so you're",
    "start": "2057119",
    "end": "2064000"
  },
  {
    "text": "basically having a much better engineering team that knows your product very very well right so the popular",
    "start": "2064000",
    "end": "2070800"
  },
  {
    "text": "resilience is a kind of a structural ladder here when you follow chaos and streaming as a practice in devops",
    "start": "2070800",
    "end": "2079040"
  },
  {
    "start": "2079000",
    "end": "2079000"
  },
  {
    "text": "that's uh mostly about what i want to talk right and you can",
    "start": "2079040",
    "end": "2084480"
  },
  {
    "text": "use litmus the open source version from github it's very easy to start",
    "start": "2084480",
    "end": "2090560"
  },
  {
    "text": "and you also have a freely available hosted version at elect musculosk.cloud",
    "start": "2090560",
    "end": "2096079"
  },
  {
    "text": "give it a try when you sign up you get a control plane you can connect your",
    "start": "2096079",
    "end": "2102640"
  },
  {
    "text": "target plane or execution plane or an agent and then start running chaos",
    "start": "2102640",
    "end": "2108640"
  },
  {
    "text": "that's all i have uh now i can take uh some q a uh here in the session",
    "start": "2108640",
    "end": "2115410"
  },
  {
    "text": "[Music]",
    "start": "2115410",
    "end": "2121609"
  }
]