[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "hi everyone welcome to my talk stop",
    "start": "3179",
    "end": "5339"
  },
  {
    "text": "Reinventing operator Wheels this is an",
    "start": "5339",
    "end": "7919"
  },
  {
    "text": "introduction to controller idioms which",
    "start": "7919",
    "end": "9720"
  },
  {
    "text": "is a golang library that we wrote to",
    "start": "9720",
    "end": "11820"
  },
  {
    "text": "make writing operators and controllers a",
    "start": "11820",
    "end": "13799"
  },
  {
    "text": "little bit easier",
    "start": "13799",
    "end": "15299"
  },
  {
    "text": "my name is Evan Cordell I'm a software",
    "start": "15299",
    "end": "17460"
  },
  {
    "text": "engineer at offset where we're building",
    "start": "17460",
    "end": "19380"
  },
  {
    "text": "a distributed permissions database",
    "start": "19380",
    "end": "21180"
  },
  {
    "text": "called spice DB similar to Google",
    "start": "21180",
    "end": "24180"
  },
  {
    "text": "Zanzibar system if you're familiar",
    "start": "24180",
    "end": "28039"
  },
  {
    "text": "I did want to mention before I get too",
    "start": "28260",
    "end": "30060"
  },
  {
    "text": "far into it that I'm going to assume",
    "start": "30060",
    "end": "31800"
  },
  {
    "text": "some prior knowledge of kubernetes and",
    "start": "31800",
    "end": "34020"
  },
  {
    "text": "controllers and operators and golang",
    "start": "34020",
    "end": "37500"
  },
  {
    "text": "so if those are not very familiar to you",
    "start": "37500",
    "end": "39660"
  },
  {
    "text": "you might want to check out some of the",
    "start": "39660",
    "end": "40920"
  },
  {
    "text": "resources before you watch this",
    "start": "40920",
    "end": "44399"
  },
  {
    "text": "but let's just get into it",
    "start": "44399",
    "end": "47600"
  },
  {
    "start": "48000",
    "end": "99000"
  },
  {
    "text": "so all operators and controllers do",
    "start": "49200",
    "end": "51600"
  },
  {
    "text": "pretty much the same types of work",
    "start": "51600",
    "end": "55199"
  },
  {
    "text": "they might ensure that some resource",
    "start": "55199",
    "end": "57180"
  },
  {
    "text": "exists in a cluster with a particular",
    "start": "57180",
    "end": "58800"
  },
  {
    "text": "configuration maybe creating a",
    "start": "58800",
    "end": "61199"
  },
  {
    "text": "deployment in response to some API call",
    "start": "61199",
    "end": "64320"
  },
  {
    "text": "making a job making a service",
    "start": "64320",
    "end": "66860"
  },
  {
    "text": "deleting duplicates that it doesn't",
    "start": "66860",
    "end": "69180"
  },
  {
    "text": "think need to exist",
    "start": "69180",
    "end": "71700"
  },
  {
    "text": "or they might do something like wait for",
    "start": "71700",
    "end": "73380"
  },
  {
    "text": "some condition to be present",
    "start": "73380",
    "end": "76020"
  },
  {
    "text": "um waiting for a job to finish a",
    "start": "76020",
    "end": "77700"
  },
  {
    "text": "deployment to be fully available uh",
    "start": "77700",
    "end": "79860"
  },
  {
    "text": "service to have endpoints things like",
    "start": "79860",
    "end": "81360"
  },
  {
    "text": "that",
    "start": "81360",
    "end": "83100"
  },
  {
    "text": "or they might need to start watching a",
    "start": "83100",
    "end": "84900"
  },
  {
    "text": "new resource because it's been",
    "start": "84900",
    "end": "86759"
  },
  {
    "text": "referenced by another object that it",
    "start": "86759",
    "end": "89100"
  },
  {
    "text": "watches and it needs to start watching",
    "start": "89100",
    "end": "90900"
  },
  {
    "text": "the new things so it can pull down",
    "start": "90900",
    "end": "92280"
  },
  {
    "text": "updates and update its local cache with",
    "start": "92280",
    "end": "94920"
  },
  {
    "text": "a representation of that API",
    "start": "94920",
    "end": "98659"
  },
  {
    "start": "99000",
    "end": "180000"
  },
  {
    "text": "so there's these really common building",
    "start": "100020",
    "end": "101759"
  },
  {
    "text": "blocks that we use to build operators",
    "start": "101759",
    "end": "103560"
  },
  {
    "text": "those are just some examples",
    "start": "103560",
    "end": "105360"
  },
  {
    "text": "but we end up writing them from scratch",
    "start": "105360",
    "end": "106920"
  },
  {
    "text": "almost every time there's a lot of great",
    "start": "106920",
    "end": "108900"
  },
  {
    "text": "libraries out there that help with some",
    "start": "108900",
    "end": "111119"
  },
  {
    "text": "of the low level complexity of talking",
    "start": "111119",
    "end": "113040"
  },
  {
    "text": "to kubernetes and building a controller",
    "start": "113040",
    "end": "115799"
  },
  {
    "text": "things like controller runtime",
    "start": "115799",
    "end": "117840"
  },
  {
    "text": "operator SDK Cube Builder",
    "start": "117840",
    "end": "121740"
  },
  {
    "text": "um but we still end up rewriting these",
    "start": "121740",
    "end": "123780"
  },
  {
    "text": "same basic workflows over and over again",
    "start": "123780",
    "end": "125399"
  },
  {
    "text": "you know create the service you know we",
    "start": "125399",
    "end": "127560"
  },
  {
    "text": "use a client to do that things like that",
    "start": "127560",
    "end": "132259"
  },
  {
    "text": "and operators are essentially State",
    "start": "132300",
    "end": "135300"
  },
  {
    "text": "machines they read the kubernetes state",
    "start": "135300",
    "end": "137760"
  },
  {
    "text": "from the API they make some decisions",
    "start": "137760",
    "end": "139800"
  },
  {
    "text": "based on that state and then they do",
    "start": "139800",
    "end": "142440"
  },
  {
    "text": "stuff based on it what's kind of",
    "start": "142440",
    "end": "144599"
  },
  {
    "text": "interesting about operators is that",
    "start": "144599",
    "end": "145920"
  },
  {
    "text": "they're really really big state machines",
    "start": "145920",
    "end": "148020"
  },
  {
    "text": "uh and I kind of think that this is what",
    "start": "148020",
    "end": "150720"
  },
  {
    "text": "drives our lack of reuse because when",
    "start": "150720",
    "end": "153540"
  },
  {
    "text": "you have big state machines like this",
    "start": "153540",
    "end": "155220"
  },
  {
    "text": "you're often using the previous States",
    "start": "155220",
    "end": "157379"
  },
  {
    "text": "the previous context to make decisions",
    "start": "157379",
    "end": "159360"
  },
  {
    "text": "about what to do",
    "start": "159360",
    "end": "161040"
  },
  {
    "text": "so you might decide whether or not to",
    "start": "161040",
    "end": "163019"
  },
  {
    "text": "create an object in the Kube API based",
    "start": "163019",
    "end": "165180"
  },
  {
    "text": "on other actions the operator's already",
    "start": "165180",
    "end": "166620"
  },
  {
    "text": "taken based on new information it gets",
    "start": "166620",
    "end": "168720"
  },
  {
    "text": "from events things like that and that",
    "start": "168720",
    "end": "170760"
  },
  {
    "text": "can make it really difficult to reuse",
    "start": "170760",
    "end": "172140"
  },
  {
    "text": "bits of a controller elsewhere",
    "start": "172140",
    "end": "175819"
  },
  {
    "start": "180000",
    "end": "462000"
  },
  {
    "text": "so that's kind of where controller",
    "start": "181319",
    "end": "183300"
  },
  {
    "text": "idioms comes in that's what we're trying",
    "start": "183300",
    "end": "184860"
  },
  {
    "text": "to solve how do we make",
    "start": "184860",
    "end": "186720"
  },
  {
    "text": "the steps in a state machine reusable",
    "start": "186720",
    "end": "189360"
  },
  {
    "text": "for a controller",
    "start": "189360",
    "end": "191280"
  },
  {
    "text": "but you might be asking why I'm talking",
    "start": "191280",
    "end": "193019"
  },
  {
    "text": "about this why we're talking about it",
    "start": "193019",
    "end": "194580"
  },
  {
    "text": "now what's going on so I mentioned this",
    "start": "194580",
    "end": "197879"
  },
  {
    "text": "at the top but we're building an open",
    "start": "197879",
    "end": "199319"
  },
  {
    "text": "source implementation of Zanzibar called",
    "start": "199319",
    "end": "201180"
  },
  {
    "text": "spice DB if you want to check that out",
    "start": "201180",
    "end": "203480"
  },
  {
    "text": "to run that we also wrote the space DB",
    "start": "203480",
    "end": "206459"
  },
  {
    "text": "operator to run it on kubernetes which",
    "start": "206459",
    "end": "207900"
  },
  {
    "text": "is open source you can look through it",
    "start": "207900",
    "end": "210120"
  },
  {
    "text": "and then our hosted Services we call off",
    "start": "210120",
    "end": "212280"
  },
  {
    "text": "the dedicated is built on top of a set",
    "start": "212280",
    "end": "214680"
  },
  {
    "text": "of additional operators that are",
    "start": "214680",
    "end": "215940"
  },
  {
    "text": "currently not open source a lot of us",
    "start": "215940",
    "end": "218159"
  },
  {
    "text": "are former kuros red hat and operator",
    "start": "218159",
    "end": "220019"
  },
  {
    "text": "framework Alum so we're familiar with",
    "start": "220019",
    "end": "222420"
  },
  {
    "text": "operators we really believe in their",
    "start": "222420",
    "end": "223860"
  },
  {
    "text": "value and they let us deliver software",
    "start": "223860",
    "end": "226620"
  },
  {
    "text": "to our own users quickly and safely",
    "start": "226620",
    "end": "230940"
  },
  {
    "text": "but because we're writing all these",
    "start": "230940",
    "end": "232319"
  },
  {
    "text": "operators we kept seeing these same",
    "start": "232319",
    "end": "233879"
  },
  {
    "text": "patterns across all of them and trying",
    "start": "233879",
    "end": "236459"
  },
  {
    "text": "to come up with a way to share them",
    "start": "236459",
    "end": "237780"
  },
  {
    "text": "between all of our implementations so",
    "start": "237780",
    "end": "239819"
  },
  {
    "text": "that's kind of why we're doing this",
    "start": "239819",
    "end": "241379"
  },
  {
    "text": "right now we're building lots of",
    "start": "241379",
    "end": "243599"
  },
  {
    "text": "operators we have experience building",
    "start": "243599",
    "end": "245099"
  },
  {
    "text": "operators and we want to make it simpler",
    "start": "245099",
    "end": "247620"
  },
  {
    "text": "for ourselves and share that with others",
    "start": "247620",
    "end": "251360"
  },
  {
    "text": "so now we're going to actually jump into",
    "start": "252540",
    "end": "254180"
  },
  {
    "text": "the basic idea here which is to come up",
    "start": "254180",
    "end": "256739"
  },
  {
    "text": "with an interface to let us break down",
    "start": "256739",
    "end": "259019"
  },
  {
    "text": "big controllers big state machines and",
    "start": "259019",
    "end": "261120"
  },
  {
    "text": "just talk about little pieces of them at",
    "start": "261120",
    "end": "262620"
  },
  {
    "text": "a time this isn't just for the ability",
    "start": "262620",
    "end": "265620"
  },
  {
    "text": "to reuse it's also really helpful for",
    "start": "265620",
    "end": "267360"
  },
  {
    "text": "things like testing and composition and",
    "start": "267360",
    "end": "270720"
  },
  {
    "text": "that kind of thing but I'm just going to",
    "start": "270720",
    "end": "272100"
  },
  {
    "text": "start with this basic interface handle",
    "start": "272100",
    "end": "275340"
  },
  {
    "text": "which probably looks pretty familiar if",
    "start": "275340",
    "end": "277259"
  },
  {
    "text": "you're familiar with golang because this",
    "start": "277259",
    "end": "278639"
  },
  {
    "text": "is essentially the same as the HTTP",
    "start": "278639",
    "end": "281639"
  },
  {
    "text": "server interface",
    "start": "281639",
    "end": "284580"
  },
  {
    "text": "and this is going to be our building",
    "start": "284580",
    "end": "286020"
  },
  {
    "text": "block for making large controllers I did",
    "start": "286020",
    "end": "289320"
  },
  {
    "text": "want to mention that this really isn't",
    "start": "289320",
    "end": "290699"
  },
  {
    "text": "any particular framework specific you",
    "start": "290699",
    "end": "292800"
  },
  {
    "text": "could do this with controller runtime",
    "start": "292800",
    "end": "294419"
  },
  {
    "text": "you could do this with client go or SDK",
    "start": "294419",
    "end": "296759"
  },
  {
    "text": "whatever you're you're using it's really",
    "start": "296759",
    "end": "299880"
  },
  {
    "text": "kind of at a different layer than a lot",
    "start": "299880",
    "end": "301979"
  },
  {
    "text": "of those tools work",
    "start": "301979",
    "end": "304940"
  },
  {
    "text": "so if all of our little bits of a big",
    "start": "306120",
    "end": "308520"
  },
  {
    "text": "controller are broken down into these",
    "start": "308520",
    "end": "310740"
  },
  {
    "text": "small handle functions these handlers we",
    "start": "310740",
    "end": "313979"
  },
  {
    "text": "still need a way to pass context between",
    "start": "313979",
    "end": "316680"
  },
  {
    "text": "them because we don't want to always",
    "start": "316680",
    "end": "318900"
  },
  {
    "text": "recompute all the data that we need we",
    "start": "318900",
    "end": "321120"
  },
  {
    "text": "can and controllers often have access to",
    "start": "321120",
    "end": "324240"
  },
  {
    "text": "huge swaths of cache data to recompute",
    "start": "324240",
    "end": "326520"
  },
  {
    "text": "state",
    "start": "326520",
    "end": "327380"
  },
  {
    "text": "but it's not ideal ideally we're not",
    "start": "327380",
    "end": "329639"
  },
  {
    "text": "recomputing things all the time in every",
    "start": "329639",
    "end": "332100"
  },
  {
    "text": "Handler just to keep them decoupled for",
    "start": "332100",
    "end": "333840"
  },
  {
    "text": "testing",
    "start": "333840",
    "end": "335280"
  },
  {
    "text": "um and so obviously golang has this",
    "start": "335280",
    "end": "337740"
  },
  {
    "text": "great context package that's used",
    "start": "337740",
    "end": "339240"
  },
  {
    "text": "everywhere",
    "start": "339240",
    "end": "340620"
  },
  {
    "text": "um but now with golang 118 we can build",
    "start": "340620",
    "end": "343320"
  },
  {
    "text": "some nicer abstractions around those",
    "start": "343320",
    "end": "345300"
  },
  {
    "text": "using typed accessors so one of the",
    "start": "345300",
    "end": "348300"
  },
  {
    "text": "things that controller idioms includes",
    "start": "348300",
    "end": "349800"
  },
  {
    "text": "is this typed accessory Library typed",
    "start": "349800",
    "end": "352320"
  },
  {
    "text": "context that lets you create keys that",
    "start": "352320",
    "end": "355740"
  },
  {
    "text": "index into a context and let you pop out",
    "start": "355740",
    "end": "358860"
  },
  {
    "text": "values of a particular kind this is not",
    "start": "358860",
    "end": "362039"
  },
  {
    "text": "really operator specific at all but it",
    "start": "362039",
    "end": "364680"
  },
  {
    "text": "ends up being really useful when you're",
    "start": "364680",
    "end": "366240"
  },
  {
    "text": "writing handlers and you want to",
    "start": "366240",
    "end": "367440"
  },
  {
    "text": "transmit values between them so in this",
    "start": "367440",
    "end": "369300"
  },
  {
    "text": "case I have two handlers one of them",
    "start": "369300",
    "end": "371580"
  },
  {
    "text": "does some expensive computation",
    "start": "371580",
    "end": "373740"
  },
  {
    "text": "stashes that into a context and then in",
    "start": "373740",
    "end": "377340"
  },
  {
    "text": "a later Handler we extract the value",
    "start": "377340",
    "end": "379919"
  },
  {
    "text": "back out",
    "start": "379919",
    "end": "382400"
  },
  {
    "text": "so it's probably not super obvious that",
    "start": "383160",
    "end": "385319"
  },
  {
    "text": "these compose well and I would say right",
    "start": "385319",
    "end": "388020"
  },
  {
    "text": "now they don't I haven't gotten to that",
    "start": "388020",
    "end": "390000"
  },
  {
    "text": "yet",
    "start": "390000",
    "end": "391139"
  },
  {
    "text": "um but you can imagine some sort of",
    "start": "391139",
    "end": "392880"
  },
  {
    "text": "synchronization function that's calling",
    "start": "392880",
    "end": "394680"
  },
  {
    "text": "these handlers you do step one Handler",
    "start": "394680",
    "end": "397440"
  },
  {
    "text": "one do step two Handler two but one of",
    "start": "397440",
    "end": "399720"
  },
  {
    "text": "the problems is that if if we're using",
    "start": "399720",
    "end": "401520"
  },
  {
    "text": "context like this to pass values between",
    "start": "401520",
    "end": "403440"
  },
  {
    "text": "handlers the second call Handler 2 can't",
    "start": "403440",
    "end": "407160"
  },
  {
    "text": "access anything that handler1 added to",
    "start": "407160",
    "end": "409080"
  },
  {
    "text": "the context because it doesn't have the",
    "start": "409080",
    "end": "411060"
  },
  {
    "text": "value back out and since we haven't Now",
    "start": "411060",
    "end": "414539"
  },
  {
    "text": "using pointers and we're not returning",
    "start": "414539",
    "end": "415800"
  },
  {
    "text": "the context we can't pass Handler to the",
    "start": "415800",
    "end": "418319"
  },
  {
    "text": "context value",
    "start": "418319",
    "end": "420860"
  },
  {
    "text": "so what we could do is we could do",
    "start": "421380",
    "end": "423120"
  },
  {
    "text": "something like this we could just say",
    "start": "423120",
    "end": "424199"
  },
  {
    "text": "okay we'll sync calls Handler one and",
    "start": "424199",
    "end": "426419"
  },
  {
    "text": "then Handler one calls Handler two which",
    "start": "426419",
    "end": "429060"
  },
  {
    "text": "does work because now Handler 2 has all",
    "start": "429060",
    "end": "431280"
  },
  {
    "text": "the context that handler1 had and can",
    "start": "431280",
    "end": "433080"
  },
  {
    "text": "grab values back out of it if you",
    "start": "433080",
    "end": "435180"
  },
  {
    "text": "imagine the earlier example with some",
    "start": "435180",
    "end": "437580"
  },
  {
    "text": "expensive computation done in Handler",
    "start": "437580",
    "end": "439259"
  },
  {
    "text": "one now Handler 2 can pull that back out",
    "start": "439259",
    "end": "441780"
  },
  {
    "text": "without recomputing it",
    "start": "441780",
    "end": "444060"
  },
  {
    "text": "but this does make it a little harder to",
    "start": "444060",
    "end": "445919"
  },
  {
    "text": "rearrange and it's not",
    "start": "445919",
    "end": "447660"
  },
  {
    "text": "um it's not super different from just",
    "start": "447660",
    "end": "449460"
  },
  {
    "text": "having a bunch of functions that are not",
    "start": "449460",
    "end": "452580"
  },
  {
    "text": "a standard interface right because it",
    "start": "452580",
    "end": "454380"
  },
  {
    "text": "doesn't give me anything new and I have",
    "start": "454380",
    "end": "456360"
  },
  {
    "text": "to",
    "start": "456360",
    "end": "457199"
  },
  {
    "text": "if I if I want to move Handler 2 to run",
    "start": "457199",
    "end": "459300"
  },
  {
    "text": "beforehandler one I have to rearrange",
    "start": "459300",
    "end": "461160"
  },
  {
    "text": "everything right",
    "start": "461160",
    "end": "462960"
  },
  {
    "start": "462000",
    "end": "700000"
  },
  {
    "text": "so this is where the Builder type comes",
    "start": "462960",
    "end": "465419"
  },
  {
    "text": "in which is a function that takes in a",
    "start": "465419",
    "end": "468720"
  },
  {
    "text": "set of handlers and returns a new",
    "start": "468720",
    "end": "470160"
  },
  {
    "text": "Handler which is maybe not too exciting",
    "start": "470160",
    "end": "472199"
  },
  {
    "text": "but what this lets us do is uh think",
    "start": "472199",
    "end": "474960"
  },
  {
    "text": "about injecting the next Handler that a",
    "start": "474960",
    "end": "477240"
  },
  {
    "text": "Handler calls dynamically in a way that",
    "start": "477240",
    "end": "479520"
  },
  {
    "text": "we can rearrange later",
    "start": "479520",
    "end": "481860"
  },
  {
    "text": "I'll show you some examples so it's not",
    "start": "481860",
    "end": "483300"
  },
  {
    "text": "as",
    "start": "483300",
    "end": "484020"
  },
  {
    "text": "nebulous",
    "start": "484020",
    "end": "487020"
  },
  {
    "text": "so here's an example using a function",
    "start": "487380",
    "end": "490020"
  },
  {
    "text": "chain which is part of controller idioms",
    "start": "490020",
    "end": "492120"
  },
  {
    "text": "which will uh first run the first",
    "start": "492120",
    "end": "495060"
  },
  {
    "text": "Builder to create a Handler then run the",
    "start": "495060",
    "end": "497880"
  },
  {
    "text": "second Builder to create a Handler and",
    "start": "497880",
    "end": "500400"
  },
  {
    "text": "it'll run the two handlers in order",
    "start": "500400",
    "end": "502800"
  },
  {
    "text": "passing the context in between them so",
    "start": "502800",
    "end": "505020"
  },
  {
    "text": "that they do have the the values shared",
    "start": "505020",
    "end": "509699"
  },
  {
    "text": "and you can imagine rearranging these",
    "start": "509699",
    "end": "512459"
  },
  {
    "text": "two you could flip them back around and",
    "start": "512459",
    "end": "514200"
  },
  {
    "text": "do second Builders and in first Builders",
    "start": "514200",
    "end": "516000"
  },
  {
    "text": "so the second one is called first",
    "start": "516000",
    "end": "518419"
  },
  {
    "text": "and I can rearrange this without",
    "start": "518419",
    "end": "520979"
  },
  {
    "text": "rewriting either of them now the only",
    "start": "520979",
    "end": "523440"
  },
  {
    "text": "caveat there is that they may have",
    "start": "523440",
    "end": "525300"
  },
  {
    "text": "different expectations around what",
    "start": "525300",
    "end": "528000"
  },
  {
    "text": "values exist in the context depending on",
    "start": "528000",
    "end": "530640"
  },
  {
    "text": "where they are in the chain",
    "start": "530640",
    "end": "532440"
  },
  {
    "text": "um and so that is why there's lots of",
    "start": "532440",
    "end": "533940"
  },
  {
    "text": "helpers around",
    "start": "533940",
    "end": "535440"
  },
  {
    "text": "ensuring that the context has what you",
    "start": "535440",
    "end": "537360"
  },
  {
    "text": "expect it to do and in a bigger",
    "start": "537360",
    "end": "539700"
  },
  {
    "text": "controller it's uh not every step in a",
    "start": "539700",
    "end": "543540"
  },
  {
    "text": "chain will depend on every other step of",
    "start": "543540",
    "end": "545820"
  },
  {
    "text": "the chain so it makes it a little easier",
    "start": "545820",
    "end": "547200"
  },
  {
    "text": "to do things like rearranging when when",
    "start": "547200",
    "end": "549300"
  },
  {
    "text": "needs change",
    "start": "549300",
    "end": "551959"
  },
  {
    "text": "so another example is the parallel",
    "start": "552000",
    "end": "554100"
  },
  {
    "text": "helper which does essentially the same",
    "start": "554100",
    "end": "556140"
  },
  {
    "text": "thing as the",
    "start": "556140",
    "end": "557640"
  },
  {
    "text": "chain function",
    "start": "557640",
    "end": "559740"
  },
  {
    "text": "but in this case both run in parallel",
    "start": "559740",
    "end": "562140"
  },
  {
    "text": "with the same input context so in this",
    "start": "562140",
    "end": "564600"
  },
  {
    "text": "case they don't actually aren't they",
    "start": "564600",
    "end": "566940"
  },
  {
    "text": "aren't able to affect each other's",
    "start": "566940",
    "end": "568260"
  },
  {
    "text": "context at all so kind of we fix the",
    "start": "568260",
    "end": "571140"
  },
  {
    "text": "problem with chain and now we've broken",
    "start": "571140",
    "end": "572580"
  },
  {
    "text": "it again with parallel we don't get the",
    "start": "572580",
    "end": "574740"
  },
  {
    "text": "values back out of context so I'm going",
    "start": "574740",
    "end": "576779"
  },
  {
    "text": "to come back to how this is solved",
    "start": "576779",
    "end": "579600"
  },
  {
    "text": "but another way that you can compose",
    "start": "579600",
    "end": "582380"
  },
  {
    "text": "handlers is via wrapping if I have some",
    "start": "582380",
    "end": "585060"
  },
  {
    "text": "existing Handler I can stick it inside",
    "start": "585060",
    "end": "587519"
  },
  {
    "text": "of another Handler and call it and then",
    "start": "587519",
    "end": "589920"
  },
  {
    "text": "I can check and see if there's been any",
    "start": "589920",
    "end": "591899"
  },
  {
    "text": "errors there now the thing here is that",
    "start": "591899",
    "end": "594420"
  },
  {
    "text": "the context",
    "start": "594420",
    "end": "595820"
  },
  {
    "text": "that is modified by the wrapped Handler",
    "start": "595820",
    "end": "600000"
  },
  {
    "text": "isn't accessible from the wrapper and so",
    "start": "600000",
    "end": "603240"
  },
  {
    "text": "there's some helpers in the same typed",
    "start": "603240",
    "end": "605160"
  },
  {
    "text": "context package that helps deal with",
    "start": "605160",
    "end": "606660"
  },
  {
    "text": "this problem",
    "start": "606660",
    "end": "607800"
  },
  {
    "text": "instead of",
    "start": "607800",
    "end": "609600"
  },
  {
    "text": "of just putting a value in the context",
    "start": "609600",
    "end": "611779"
  },
  {
    "text": "to start with we put a space for the",
    "start": "611779",
    "end": "615180"
  },
  {
    "text": "object in the context",
    "start": "615180",
    "end": "618360"
  },
  {
    "text": "and then when we call the wrapped",
    "start": "618360",
    "end": "620640"
  },
  {
    "text": "Handler it fills in the space that we",
    "start": "620640",
    "end": "622680"
  },
  {
    "text": "made which is the pointer",
    "start": "622680",
    "end": "624839"
  },
  {
    "text": "and then now after I've called Handler I",
    "start": "624839",
    "end": "627060"
  },
  {
    "text": "can access the values from the Handler",
    "start": "627060",
    "end": "628560"
  },
  {
    "text": "again later",
    "start": "628560",
    "end": "629940"
  },
  {
    "text": "so this is also how you could deal with",
    "start": "629940",
    "end": "632120"
  },
  {
    "text": "parallel values you can run both",
    "start": "632120",
    "end": "636120"
  },
  {
    "text": "handlers in parallel but then they can",
    "start": "636120",
    "end": "638220"
  },
  {
    "text": "put values back into context boxes",
    "start": "638220",
    "end": "641279"
  },
  {
    "text": "rather than context",
    "start": "641279",
    "end": "642959"
  },
  {
    "text": "and you can pull those values out when",
    "start": "642959",
    "end": "644519"
  },
  {
    "text": "you need them",
    "start": "644519",
    "end": "646880"
  },
  {
    "text": "and then one other way that we can",
    "start": "649800",
    "end": "651839"
  },
  {
    "text": "compose handlers is via branching in",
    "start": "651839",
    "end": "655140"
  },
  {
    "text": "this case we have these Handler keys",
    "start": "655140",
    "end": "657060"
  },
  {
    "text": "that identify a specific Handler out of",
    "start": "657060",
    "end": "659579"
  },
  {
    "text": "a big set so you could do something like",
    "start": "659579",
    "end": "662579"
  },
  {
    "text": "in this example I have",
    "start": "662579",
    "end": "665760"
  },
  {
    "text": "a sync function that first looks at the",
    "start": "665760",
    "end": "668339"
  },
  {
    "text": "object to decide if it's been deleted or",
    "start": "668339",
    "end": "670200"
  },
  {
    "text": "not and then branches into two different",
    "start": "670200",
    "end": "672480"
  },
  {
    "text": "Handler chains based on that decision so",
    "start": "672480",
    "end": "676140"
  },
  {
    "text": "this would let me have defined elsewhere",
    "start": "676140",
    "end": "678060"
  },
  {
    "text": "like a full chain of",
    "start": "678060",
    "end": "680459"
  },
  {
    "text": "if it's deleted hand layers versus a",
    "start": "680459",
    "end": "682380"
  },
  {
    "text": "full chain of if it's not deleted",
    "start": "682380",
    "end": "683640"
  },
  {
    "text": "handlers let me keep those things",
    "start": "683640",
    "end": "684959"
  },
  {
    "text": "separate rather than all jumbled in one",
    "start": "684959",
    "end": "687420"
  },
  {
    "text": "big state machine essentially",
    "start": "687420",
    "end": "691820"
  },
  {
    "text": "so there are these helpers for dealing",
    "start": "692399",
    "end": "694260"
  },
  {
    "text": "with sets of other handlers and picking",
    "start": "694260",
    "end": "696600"
  },
  {
    "text": "out the right one and giving them",
    "start": "696600",
    "end": "698000"
  },
  {
    "text": "identifiers and things like that",
    "start": "698000",
    "end": "700980"
  },
  {
    "start": "700000",
    "end": "983000"
  },
  {
    "text": "so now that we have a way to compose",
    "start": "700980",
    "end": "702899"
  },
  {
    "text": "controllers and build them up out of",
    "start": "702899",
    "end": "705600"
  },
  {
    "text": "smaller pieces we can also more easily",
    "start": "705600",
    "end": "708120"
  },
  {
    "text": "talk about you know Common patterns and",
    "start": "708120",
    "end": "710160"
  },
  {
    "text": "encoding those with these libraries",
    "start": "710160",
    "end": "712440"
  },
  {
    "text": "and that's kind of what the rest of",
    "start": "712440",
    "end": "713820"
  },
  {
    "text": "controller idioms is the first bit is",
    "start": "713820",
    "end": "716160"
  },
  {
    "text": "the basic building blocks to make things",
    "start": "716160",
    "end": "718140"
  },
  {
    "text": "reusable the next bit is some actual",
    "start": "718140",
    "end": "721680"
  },
  {
    "text": "patterns that we've identified that",
    "start": "721680",
    "end": "722940"
  },
  {
    "text": "we've used multiple times that we think",
    "start": "722940",
    "end": "725040"
  },
  {
    "text": "are generally useful",
    "start": "725040",
    "end": "727940"
  },
  {
    "text": "so the first idiom is adoption",
    "start": "728160",
    "end": "731399"
  },
  {
    "text": "this comes up a lot when controllers are",
    "start": "731399",
    "end": "733440"
  },
  {
    "text": "trying to be efficient with the",
    "start": "733440",
    "end": "734820"
  },
  {
    "text": "resources they watch so for example you",
    "start": "734820",
    "end": "738120"
  },
  {
    "text": "could write a controller that watches",
    "start": "738120",
    "end": "739740"
  },
  {
    "text": "every config map in a cluster and then",
    "start": "739740",
    "end": "742440"
  },
  {
    "text": "when someone references a config map in",
    "start": "742440",
    "end": "745200"
  },
  {
    "text": "an object you will have that config map",
    "start": "745200",
    "end": "747720"
  },
  {
    "text": "in your cache already because you're",
    "start": "747720",
    "end": "749100"
  },
  {
    "text": "watching all config Maps most people",
    "start": "749100",
    "end": "751740"
  },
  {
    "text": "don't want to watch all config Maps both",
    "start": "751740",
    "end": "753420"
  },
  {
    "text": "for like security reasons and then also",
    "start": "753420",
    "end": "755579"
  },
  {
    "text": "just for space reasons that means you",
    "start": "755579",
    "end": "757380"
  },
  {
    "text": "have to have every single config map in",
    "start": "757380",
    "end": "759839"
  },
  {
    "text": "Cache in your operator to work",
    "start": "759839",
    "end": "763380"
  },
  {
    "text": "so instead you when you open a watch",
    "start": "763380",
    "end": "765180"
  },
  {
    "text": "against the cube API you can give it a",
    "start": "765180",
    "end": "766800"
  },
  {
    "text": "label filter and that will only send the",
    "start": "766800",
    "end": "769440"
  },
  {
    "text": "objects down to you that match that",
    "start": "769440",
    "end": "771000"
  },
  {
    "text": "label",
    "start": "771000",
    "end": "772079"
  },
  {
    "text": "but then of course you have a problem",
    "start": "772079",
    "end": "774000"
  },
  {
    "text": "where if the operator is not the one",
    "start": "774000",
    "end": "776940"
  },
  {
    "text": "creating the config map it can't put",
    "start": "776940",
    "end": "778560"
  },
  {
    "text": "that label on it so it won't be in its",
    "start": "778560",
    "end": "780240"
  },
  {
    "text": "cache so this is an issue for any",
    "start": "780240",
    "end": "782459"
  },
  {
    "text": "resource that is used as input to a",
    "start": "782459",
    "end": "784620"
  },
  {
    "text": "controller rather than as output",
    "start": "784620",
    "end": "786660"
  },
  {
    "text": "and this is what we call the adoption",
    "start": "786660",
    "end": "788579"
  },
  {
    "text": "workflow when some custom resources",
    "start": "788579",
    "end": "791279"
  },
  {
    "text": "created that references another object",
    "start": "791279",
    "end": "793320"
  },
  {
    "text": "that's already existing in the cluster",
    "start": "793320",
    "end": "795480"
  },
  {
    "text": "we first check and see if it exists and",
    "start": "795480",
    "end": "799079"
  },
  {
    "text": "then if it does we add whatever the",
    "start": "799079",
    "end": "801540"
  },
  {
    "text": "special operator label is",
    "start": "801540",
    "end": "803579"
  },
  {
    "text": "the operator is watching and that brings",
    "start": "803579",
    "end": "805980"
  },
  {
    "text": "the object into the operator's watch",
    "start": "805980",
    "end": "808500"
  },
  {
    "text": "stream and cache and now the operator",
    "start": "808500",
    "end": "810959"
  },
  {
    "text": "can know that it's there and continue",
    "start": "810959",
    "end": "812639"
  },
  {
    "text": "working with that object going forward",
    "start": "812639",
    "end": "816440"
  },
  {
    "text": "um another one that we use a lot we call",
    "start": "818040",
    "end": "820200"
  },
  {
    "text": "the component idiom and this really is",
    "start": "820200",
    "end": "822300"
  },
  {
    "text": "just when the operator is in full",
    "start": "822300",
    "end": "824220"
  },
  {
    "text": "control over some external resource that",
    "start": "824220",
    "end": "826380"
  },
  {
    "text": "it creates in response to user input",
    "start": "826380",
    "end": "828779"
  },
  {
    "text": "so a user creates a custom object and",
    "start": "828779",
    "end": "831120"
  },
  {
    "text": "then we need to create a deployment",
    "start": "831120",
    "end": "832920"
  },
  {
    "text": "based on that object or",
    "start": "832920",
    "end": "834959"
  },
  {
    "text": "a service whatever",
    "start": "834959",
    "end": "836839"
  },
  {
    "text": "in that case the operator is creating it",
    "start": "836839",
    "end": "839760"
  },
  {
    "text": "and it's you know has some uniqueness",
    "start": "839760",
    "end": "842100"
  },
  {
    "text": "property it's one to one or many to one",
    "start": "842100",
    "end": "844260"
  },
  {
    "text": "with the object the user created",
    "start": "844260",
    "end": "845899"
  },
  {
    "text": "generally life cycled with it so it",
    "start": "845899",
    "end": "848160"
  },
  {
    "text": "might have owner references it's really",
    "start": "848160",
    "end": "850079"
  },
  {
    "text": "not supposed to be um",
    "start": "850079",
    "end": "852060"
  },
  {
    "text": "shared with other controllers this is a",
    "start": "852060",
    "end": "854579"
  },
  {
    "text": "relatively common pattern that some",
    "start": "854579",
    "end": "856139"
  },
  {
    "text": "operators use",
    "start": "856139",
    "end": "858839"
  },
  {
    "text": "and so we've encoded this in controller",
    "start": "858839",
    "end": "860820"
  },
  {
    "text": "idioms as well so that it will handle",
    "start": "860820",
    "end": "864420"
  },
  {
    "text": "the kind of the Dirty Work of creating",
    "start": "864420",
    "end": "865740"
  },
  {
    "text": "the object if it doesn't exist you know",
    "start": "865740",
    "end": "867779"
  },
  {
    "text": "checking for changes via hashing and",
    "start": "867779",
    "end": "870360"
  },
  {
    "text": "then deleting duplicate objects if it's",
    "start": "870360",
    "end": "872279"
  },
  {
    "text": "created in a way that there could be",
    "start": "872279",
    "end": "873720"
  },
  {
    "text": "duplicates for example",
    "start": "873720",
    "end": "876000"
  },
  {
    "text": "this just makes it easy to make a",
    "start": "876000",
    "end": "878519"
  },
  {
    "text": "controller that just ensures that a",
    "start": "878519",
    "end": "880560"
  },
  {
    "text": "bunch of stuff exists based on some",
    "start": "880560",
    "end": "882000"
  },
  {
    "text": "input object",
    "start": "882000",
    "end": "884660"
  },
  {
    "text": "another idiom we're calling static",
    "start": "885000",
    "end": "887100"
  },
  {
    "text": "resources which is when a controller is",
    "start": "887100",
    "end": "889980"
  },
  {
    "text": "given some definition of an object and",
    "start": "889980",
    "end": "891540"
  },
  {
    "text": "it just makes sure that object exists",
    "start": "891540",
    "end": "893160"
  },
  {
    "text": "and matches exactly",
    "start": "893160",
    "end": "895019"
  },
  {
    "text": "this can be really useful for",
    "start": "895019",
    "end": "897000"
  },
  {
    "text": "bootstrapping if you have a controller",
    "start": "897000",
    "end": "899459"
  },
  {
    "text": "that you know needs to create some",
    "start": "899459",
    "end": "901199"
  },
  {
    "text": "default resources when it starts up this",
    "start": "901199",
    "end": "903480"
  },
  {
    "text": "can be really a useful way to do that it",
    "start": "903480",
    "end": "906540"
  },
  {
    "text": "could also be some sort of",
    "start": "906540",
    "end": "908180"
  },
  {
    "text": "operator Global config if you have",
    "start": "908180",
    "end": "910800"
  },
  {
    "text": "something along those lines that needs",
    "start": "910800",
    "end": "912720"
  },
  {
    "text": "to just always exist when the operator",
    "start": "912720",
    "end": "914579"
  },
  {
    "text": "is running",
    "start": "914579",
    "end": "917000"
  },
  {
    "text": "another one is the positium",
    "start": "917399",
    "end": "920339"
  },
  {
    "text": "where it can often be useful to tell a",
    "start": "920339",
    "end": "923220"
  },
  {
    "text": "controller not to stop entirely but to",
    "start": "923220",
    "end": "925740"
  },
  {
    "text": "stop processing a specific object",
    "start": "925740",
    "end": "928079"
  },
  {
    "text": "it's going to be especially useful if",
    "start": "928079",
    "end": "929760"
  },
  {
    "text": "you need to go in and do some debugging",
    "start": "929760",
    "end": "932459"
  },
  {
    "text": "um deal with you know human operator",
    "start": "932459",
    "end": "934980"
  },
  {
    "text": "needs stop it from doing something crazy",
    "start": "934980",
    "end": "937500"
  },
  {
    "text": "that kind of thing",
    "start": "937500",
    "end": "939660"
  },
  {
    "text": "we also have a self pause idiom which is",
    "start": "939660",
    "end": "942660"
  },
  {
    "text": "maybe not a thing that you should use",
    "start": "942660",
    "end": "944779"
  },
  {
    "text": "much if at all that's really just for if",
    "start": "944779",
    "end": "948240"
  },
  {
    "text": "an operator can",
    "start": "948240",
    "end": "950279"
  },
  {
    "text": "definitely determined that it has no way",
    "start": "950279",
    "end": "952260"
  },
  {
    "text": "to make progress on its own maybe it's",
    "start": "952260",
    "end": "955320"
  },
  {
    "text": "too expensive to pull for State changes",
    "start": "955320",
    "end": "957600"
  },
  {
    "text": "for some reason in an external system or",
    "start": "957600",
    "end": "959339"
  },
  {
    "text": "it's rate limited or something doesn't",
    "start": "959339",
    "end": "961440"
  },
  {
    "text": "have access",
    "start": "961440",
    "end": "963240"
  },
  {
    "text": "to something it needs then it could self",
    "start": "963240",
    "end": "965399"
  },
  {
    "text": "pause the object and that not only sets",
    "start": "965399",
    "end": "968579"
  },
  {
    "text": "the an annotation that will tell the",
    "start": "968579",
    "end": "971100"
  },
  {
    "text": "controller to stop watching it but it",
    "start": "971100",
    "end": "973620"
  },
  {
    "text": "will also add a condition to the object",
    "start": "973620",
    "end": "976139"
  },
  {
    "text": "if you're using standard condition Spock",
    "start": "976139",
    "end": "979019"
  },
  {
    "text": "on the object and report that it's",
    "start": "979019",
    "end": "981120"
  },
  {
    "text": "paused and why and what you can do to",
    "start": "981120",
    "end": "983880"
  },
  {
    "start": "983000",
    "end": "1119000"
  },
  {
    "text": "in addition to the idioms we also have a",
    "start": "983880",
    "end": "986339"
  },
  {
    "text": "set of kubernetes utilities",
    "start": "986339",
    "end": "988320"
  },
  {
    "text": "I was going to briefly go over these I",
    "start": "988320",
    "end": "990480"
  },
  {
    "text": "think they're",
    "start": "990480",
    "end": "991920"
  },
  {
    "text": "they're really in support of everything",
    "start": "991920",
    "end": "993240"
  },
  {
    "text": "else but we have some basic caching",
    "start": "993240",
    "end": "995339"
  },
  {
    "text": "libraries that wrap",
    "start": "995339",
    "end": "996959"
  },
  {
    "text": "hashing and validating hashes there's",
    "start": "996959",
    "end": "999660"
  },
  {
    "text": "some utilities for work Key Management",
    "start": "999660",
    "end": "1002139"
  },
  {
    "text": "uh if you're if you're using",
    "start": "1002139",
    "end": "1005000"
  },
  {
    "text": "client go probably not something you'd",
    "start": "1005000",
    "end": "1008000"
  },
  {
    "text": "want to use if you're using controller",
    "start": "1008000",
    "end": "1009139"
  },
  {
    "text": "runtime",
    "start": "1009139",
    "end": "1010100"
  },
  {
    "text": "it has some common metrics to emit if",
    "start": "1010100",
    "end": "1013160"
  },
  {
    "text": "you're using standard conditions for",
    "start": "1013160",
    "end": "1015079"
  },
  {
    "text": "example this will emit metrics based on",
    "start": "1015079",
    "end": "1017300"
  },
  {
    "text": "the conditions",
    "start": "1017300",
    "end": "1019459"
  },
  {
    "text": "um it does come with a basic controller",
    "start": "1019459",
    "end": "1021259"
  },
  {
    "text": "and controller manager implementation",
    "start": "1021259",
    "end": "1023180"
  },
  {
    "text": "um",
    "start": "1023180",
    "end": "1024558"
  },
  {
    "text": "if you don't want to use one of the",
    "start": "1024559",
    "end": "1027079"
  },
  {
    "text": "other libraries like clango or um or",
    "start": "1027079",
    "end": "1029660"
  },
  {
    "text": "controller runtime for that it does have",
    "start": "1029660",
    "end": "1031760"
  },
  {
    "text": "a file Informer which essentially works",
    "start": "1031760",
    "end": "1035418"
  },
  {
    "text": "the same as other communities API",
    "start": "1035419",
    "end": "1036980"
  },
  {
    "text": "informers but it reads from a local file",
    "start": "1036980",
    "end": "1038839"
  },
  {
    "text": "instead this can be helpful if you're",
    "start": "1038839",
    "end": "1041058"
  },
  {
    "text": "trying to bootstrap some local config or",
    "start": "1041059",
    "end": "1044780"
  },
  {
    "text": "or you want to allow people to mount",
    "start": "1044780",
    "end": "1046938"
  },
  {
    "text": "volumes into your controller and control",
    "start": "1046939",
    "end": "1048919"
  },
  {
    "text": "the behavior in some way",
    "start": "1048919",
    "end": "1051080"
  },
  {
    "text": "and it also has some helpers for crd",
    "start": "1051080",
    "end": "1053600"
  },
  {
    "text": "bootstrapping which make use of the",
    "start": "1053600",
    "end": "1056360"
  },
  {
    "text": "controller runtime libraries for the",
    "start": "1056360",
    "end": "1057860"
  },
  {
    "text": "same thing",
    "start": "1057860",
    "end": "1060160"
  },
  {
    "text": "um so that's that's kind of it that's",
    "start": "1062539",
    "end": "1063860"
  },
  {
    "text": "the the overall that's uh the what the",
    "start": "1063860",
    "end": "1065900"
  },
  {
    "text": "problem is that's how we think about",
    "start": "1065900",
    "end": "1067760"
  },
  {
    "text": "breaking down the problem and how we've",
    "start": "1067760",
    "end": "1069320"
  },
  {
    "text": "built some abstractions to help with",
    "start": "1069320",
    "end": "1071480"
  },
  {
    "text": "this",
    "start": "1071480",
    "end": "1072200"
  },
  {
    "text": "uh at auth said if you want to know more",
    "start": "1072200",
    "end": "1074600"
  },
  {
    "text": "you can definitely check out the",
    "start": "1074600",
    "end": "1076400"
  },
  {
    "text": "controller idioms repo repo and now if",
    "start": "1076400",
    "end": "1078679"
  },
  {
    "text": "you have questions",
    "start": "1078679",
    "end": "1079940"
  },
  {
    "text": "or ideas",
    "start": "1079940",
    "end": "1081380"
  },
  {
    "text": "um or you know with still early days if",
    "start": "1081380",
    "end": "1083900"
  },
  {
    "text": "it's a lot of stuff we haven't",
    "start": "1083900",
    "end": "1085220"
  },
  {
    "text": "identified that would be a great",
    "start": "1085220",
    "end": "1086600"
  },
  {
    "text": "addition to the library so if you want",
    "start": "1086600",
    "end": "1088640"
  },
  {
    "text": "to add something there",
    "start": "1088640",
    "end": "1090320"
  },
  {
    "text": "uh it'd be a great opportunity",
    "start": "1090320",
    "end": "1094340"
  },
  {
    "text": "um if you want to see how controller",
    "start": "1094340",
    "end": "1095720"
  },
  {
    "text": "idioms are used in practice I have a",
    "start": "1095720",
    "end": "1097760"
  },
  {
    "text": "link to the spicyb operator here which",
    "start": "1097760",
    "end": "1100340"
  },
  {
    "text": "is open source you can look through how",
    "start": "1100340",
    "end": "1102020"
  },
  {
    "text": "we use controller idioms all over that",
    "start": "1102020",
    "end": "1104600"
  },
  {
    "text": "and then if you just want to chat or",
    "start": "1104600",
    "end": "1106520"
  },
  {
    "text": "just get in touch we have a Discord that",
    "start": "1106520",
    "end": "1108679"
  },
  {
    "text": "you can come talk about it or you can",
    "start": "1108679",
    "end": "1110960"
  },
  {
    "text": "get in touch on Twitter",
    "start": "1110960",
    "end": "1113539"
  },
  {
    "text": "so thanks for listening and um",
    "start": "1113539",
    "end": "1117080"
  },
  {
    "text": "have a nice day",
    "start": "1117080",
    "end": "1119919"
  }
]