[
  {
    "text": "uh so welcome to this talk uh fussing finding bugs and vulnerabilities automatically",
    "start": "1079",
    "end": "7560"
  },
  {
    "text": "I'm David and this is Adam and we're from a niche company called ideologix",
    "start": "7560",
    "end": "13080"
  },
  {
    "text": "where we specialize in various forms of Advanced software security uh",
    "start": "13080",
    "end": "19080"
  },
  {
    "text": "topics and the way that we are presenting in this talk is mainly work we have done in",
    "start": "19080",
    "end": "24900"
  },
  {
    "text": "collaboration with the coordinating Computing Foundation and effectively what we will talk about",
    "start": "24900",
    "end": "30119"
  },
  {
    "text": "is how we manage to fuss a lot of cncf projects bit about what the results were",
    "start": "30119",
    "end": "37140"
  },
  {
    "text": "and that's kind of it so I'll let Adam Adam",
    "start": "37140",
    "end": "44480"
  },
  {
    "text": "yeah so we have been forcing a bunch of the",
    "start": "44480",
    "end": "49940"
  },
  {
    "text": "graduated and incubating projects in the cncf landscape and including these ones",
    "start": "49940",
    "end": "56100"
  },
  {
    "text": "I believe there are a few missing for example istio",
    "start": "56100",
    "end": "62000"
  },
  {
    "text": "but but these projects are all being fast and so what we have done is we'll go",
    "start": "62000",
    "end": "70380"
  },
  {
    "text": "into this later but but we have taken a bunch of the amazing",
    "start": "70380",
    "end": "75420"
  },
  {
    "text": "open source capabilities into enforcing and brought this into these projects in",
    "start": "75420",
    "end": "81060"
  },
  {
    "text": "various ways um and each project has been different in our approach because the projects are",
    "start": "81060",
    "end": "88020"
  },
  {
    "text": "so different in nature but uh part of this talk is to present that",
    "start": "88020",
    "end": "96600"
  },
  {
    "text": "forcing works for so many different types of projects including these ones here",
    "start": "96600",
    "end": "102360"
  },
  {
    "text": "and that that even includes different languages as well so the projects are different in nature some of them are",
    "start": "102360",
    "end": "108420"
  },
  {
    "text": "like well I don't know if any of these are necessary libraries maybe home has some but they are very different in",
    "start": "108420",
    "end": "114000"
  },
  {
    "text": "nature but also different in architecture so like language is different and and so on",
    "start": "114000",
    "end": "121259"
  },
  {
    "text": "so agenda what is fussing why do we fast how do we fast and then we're going to",
    "start": "121259",
    "end": "127320"
  },
  {
    "text": "present a case study focused on HDL so in the in in very general terms",
    "start": "127320",
    "end": "135780"
  },
  {
    "text": "fasting is a way to automate test case generation and that's kind of the origins of it and",
    "start": "135780",
    "end": "142140"
  },
  {
    "text": "what it is in practice as well from a more pragmatic perspective is a way to find books and software or a way to",
    "start": "142140",
    "end": "149700"
  },
  {
    "text": "ensure that there's no boxing software and um around 10 so passing is a technique that",
    "start": "149700",
    "end": "157560"
  },
  {
    "text": "was used maybe maybe introduced sorry 20 years ago or so but around a decade ago 10 years ago maybe a little bit more",
    "start": "157560",
    "end": "164340"
  },
  {
    "text": "there came this uh Improvement in fasting which is coverage based feedback",
    "start": "164340",
    "end": "171000"
  },
  {
    "text": "driven flossing which essentially relies on instrumenting the target program in a",
    "start": "171000",
    "end": "176580"
  },
  {
    "text": "certain way observing how the target program behaves and kind of driving this automated test",
    "start": "176580",
    "end": "182879"
  },
  {
    "text": "case generation based on what You observe in the Target program so fussing is often referred to as",
    "start": "182879",
    "end": "188879"
  },
  {
    "text": "throwing a lot of random stuff at a program whereas these days it's more",
    "start": "188879",
    "end": "194099"
  },
  {
    "text": "like accurately described as like a genetic mutational algorithm and genetic",
    "start": "194099",
    "end": "200099"
  },
  {
    "text": "in this case means that it improves over time it mutates it improves and so on",
    "start": "200099",
    "end": "205260"
  },
  {
    "text": "based on what it what it observes um",
    "start": "205260",
    "end": "210420"
  },
  {
    "text": "so the way uh the weight testing is in practice is very closely related to how you write",
    "start": "210420",
    "end": "216720"
  },
  {
    "text": "unit tests in essence so what you see on the left is you have what you see on the",
    "start": "216720",
    "end": "222120"
  },
  {
    "text": "left hand the test column is if you haven't given API called my API the way you would test it",
    "start": "222120",
    "end": "228420"
  },
  {
    "text": "is you would give it just say three different inputs and you would hard code the inputs as such",
    "start": "228420",
    "end": "234120"
  },
  {
    "text": "whereas in the fasting world what you have on the right is you have a continuous loop that will",
    "start": "234120",
    "end": "241140"
  },
  {
    "text": "in essence run forever or however much time you allocate to it and you will",
    "start": "241140",
    "end": "246900"
  },
  {
    "text": "call this same function my API but instead of giving a fixed input you will ask the fossa to give you some input",
    "start": "246900",
    "end": "255180"
  },
  {
    "text": "and the main point here is that what is returned from generate input will change",
    "start": "255180",
    "end": "260940"
  },
  {
    "text": "and it will change based on what it observes in the Target program and it will change that according to",
    "start": "260940",
    "end": "266880"
  },
  {
    "text": "exploring a smart code as much code coverage in my API the goal is to generate a set of inputs",
    "start": "266880",
    "end": "274800"
  },
  {
    "text": "that explore optimally all of the code coverage in your given Target",
    "start": "274800",
    "end": "281940"
  },
  {
    "text": "so um it's a code coverage exploration technique in that sense",
    "start": "281940",
    "end": "287040"
  },
  {
    "text": "and what you see uh on in the lower right corner is actual goal line code of",
    "start": "287040",
    "end": "293340"
  },
  {
    "text": "such a fuzzer like it's really that simple at least from writing the software point of view",
    "start": "293340",
    "end": "300560"
  },
  {
    "text": "um fasting is something that is quite integrated into a like development",
    "start": "300600",
    "end": "306720"
  },
  {
    "text": "infrastructure now and it's not necessarily a third-party tool that you you know",
    "start": "306720",
    "end": "313320"
  },
  {
    "text": "download and install and then run it but for example in C it's actually",
    "start": "313320",
    "end": "318720"
  },
  {
    "text": "integrated into the client compiler so if you want to see fast CNC plus plus code",
    "start": "318720",
    "end": "324120"
  },
  {
    "text": "you have all you need in clang uh There's the link here to lip fossa is",
    "start": "324120",
    "end": "331380"
  },
  {
    "text": "integrated to clang and there's the following link will take you to the exact implementation of the fasting within the compiler infrastructure",
    "start": "331380",
    "end": "338699"
  },
  {
    "text": "there are also other fossils for CNC plus plus but this is the tooling so this is an overview of the tooling you",
    "start": "338699",
    "end": "343860"
  },
  {
    "text": "would use for each different language and you can see that we have both support for CNC",
    "start": "343860",
    "end": "349440"
  },
  {
    "text": "plus golang python Java and rust it is also encaps encapsulates a lot of",
    "start": "349440",
    "end": "354479"
  },
  {
    "text": "essentially uh the projects in the in the um cncf landscape perhaps with",
    "start": "354479",
    "end": "360120"
  },
  {
    "text": "exception of JavaScript and typescript which is uh relatively new in the fighting world so if you have a projects",
    "start": "360120",
    "end": "368280"
  },
  {
    "text": "in any of these languages you should be able to fuss them with the given links that are on this page",
    "start": "368280",
    "end": "375620"
  },
  {
    "text": "so in memory safe memory unsafe languages so fussing explores code and",
    "start": "377940",
    "end": "383880"
  },
  {
    "text": "the reason you want to explore code is that you want to identify certain corners of the code behaves unexpectedly",
    "start": "383880",
    "end": "391259"
  },
  {
    "text": "and what I mean by that is you aim to find books and the type of books that",
    "start": "391259",
    "end": "397139"
  },
  {
    "text": "you find depends a lot on the given language that you are forcing traditionally fussing is mainly focused",
    "start": "397139",
    "end": "403440"
  },
  {
    "text": "on memory unsafe languages because you want to find memory corruption vulnerabilities so if you work in C and",
    "start": "403440",
    "end": "410220"
  },
  {
    "text": "C plus plus or even in in golang for example where there's some some native code rust also has that and so on you",
    "start": "410220",
    "end": "418440"
  },
  {
    "text": "you or even python if you have native modules for your python code you you are going to look for a memory",
    "start": "418440",
    "end": "425220"
  },
  {
    "text": "corruption vulnerabilities and this works in collaboration with sanitizers we call them sanitizers and these types",
    "start": "425220",
    "end": "430860"
  },
  {
    "text": "of oracles such that when a given piece of code is executed it is you",
    "start": "430860",
    "end": "436919"
  },
  {
    "text": "inject the you collect compile the code with the sanitizer support and it will check whether you read out of out of a",
    "start": "436919",
    "end": "444599"
  },
  {
    "text": "given buffer where they have a buff overflow you can see there's a list here you'll check for use after freeze it will take out the double freeze which",
    "start": "444599",
    "end": "451199"
  },
  {
    "text": "would seek fault but it will also give you a little bit nicer report so we have different sanitizers in",
    "start": "451199",
    "end": "456599"
  },
  {
    "text": "particular in memory unsafe languages however in memory safe languages yeah so",
    "start": "456599",
    "end": "462300"
  },
  {
    "text": "like David said it varies a lot based on which language you force in any memory saying save languages we are looking for",
    "start": "462300",
    "end": "469919"
  },
  {
    "text": "um for some overlaps in terms of crashes uh um and panics",
    "start": "469919",
    "end": "476000"
  },
  {
    "text": "taking goaling as an example we have all out of bounds and out of range issues",
    "start": "476000",
    "end": "481919"
  },
  {
    "text": "that can be caught as in recovered but they can also if",
    "start": "481919",
    "end": "487199"
  },
  {
    "text": "they are not then they can be they can't be issues for for projects that have security relevance",
    "start": "487199",
    "end": "494400"
  },
  {
    "text": "um nil the references also can be called but they also they can also have",
    "start": "494400",
    "end": "499800"
  },
  {
    "text": "security implications um in in addition to those uh language panics we we can also fast for logical",
    "start": "499800",
    "end": "507360"
  },
  {
    "text": "issues in in a program this can be done via something like property-based",
    "start": "507360",
    "end": "512580"
  },
  {
    "text": "forcing um where we set up a set of rules",
    "start": "512580",
    "end": "517740"
  },
  {
    "text": "logical rules that we that we and that we kind of set up inside the fossa in",
    "start": "517740",
    "end": "523800"
  },
  {
    "text": "the first harness and which could for example be that we expect a certain return value from our Target API and if",
    "start": "523800",
    "end": "531959"
  },
  {
    "text": "we don't get that then we consider it a bug and then we we tell the Foster to",
    "start": "531959",
    "end": "537420"
  },
  {
    "text": "report that as a panic for example um then raise conditions",
    "start": "537420",
    "end": "542990"
  },
  {
    "text": "[Music] Troublesome in the cncf landscape",
    "start": "542990",
    "end": "549860"
  },
  {
    "text": "the the big one C CV many years ago was from a race condition if I'm not",
    "start": "549899",
    "end": "556440"
  },
  {
    "text": "completely wrong here but that's something that fussing can also find",
    "start": "556440",
    "end": "562500"
  },
  {
    "text": "it's an also an area where we can do better and we will get into the future work enforcing but we do catch race",
    "start": "562500",
    "end": "569940"
  },
  {
    "text": "conditions with forcing then off off by one's self-explanatory and timeouts",
    "start": "569940",
    "end": "575459"
  },
  {
    "text": "timeouts can have many root causes they can be severe and they can have security",
    "start": "575459",
    "end": "582240"
  },
  {
    "text": "implications but they can also just be a matter of runtime differences so if you don't allocate",
    "start": "582240",
    "end": "589140"
  },
  {
    "text": "enough resources to your fossa but but we do we have had examples of timeouts uh being assigned CVS type",
    "start": "589140",
    "end": "596880"
  },
  {
    "text": "confusions as well are issues in in memory saved languages but not as big",
    "start": "596880",
    "end": "603779"
  },
  {
    "text": "ones as in a memory unsafe languages and just to jump in here so these are the very specific issues that you run into",
    "start": "603779",
    "end": "610620"
  },
  {
    "text": "when you fast memory safe languages fasting of memory safe language is pretty new maybe like a year or two old",
    "start": "610620",
    "end": "616200"
  },
  {
    "text": "or so where I really got into the mainstream and what the security implications of most of these are",
    "start": "616200",
    "end": "621899"
  },
  {
    "text": "usually denial of service so that's usually like the dust like you can usually catch catch some type of",
    "start": "621899",
    "end": "627060"
  },
  {
    "text": "like availability issues in your programs that's kind of the security implication of that we'll get to",
    "start": "627060",
    "end": "632519"
  },
  {
    "text": "something more where you can find for example uh rce and that type of stuff using fussing",
    "start": "632519",
    "end": "638339"
  },
  {
    "text": "but traditionally traditionally as in the last two years mainly looking for the another Services what you can find",
    "start": "638339",
    "end": "643980"
  },
  {
    "text": "with forcing and memory safe languages yeah and uh so we touched on the on it",
    "start": "643980",
    "end": "650579"
  },
  {
    "text": "briefly uh that we want to to be better at finding box with forcing there are",
    "start": "650579",
    "end": "656100"
  },
  {
    "text": "like David said traditionally there are bugs that we don't find with forcing but refined by other means and we want to",
    "start": "656100",
    "end": "662820"
  },
  {
    "text": "bring those bug finders and park detectors into forcing um to",
    "start": "662820",
    "end": "668820"
  },
  {
    "text": "now that we have the capabilities that we have really mature forcing engines we",
    "start": "668820",
    "end": "673920"
  },
  {
    "text": "want to write new bug detectors to to find for example command injections and SQL injections because traditionally a",
    "start": "673920",
    "end": "681420"
  },
  {
    "text": "fossa will not would not catch if you can somehow execute commands in in from",
    "start": "681420",
    "end": "688440"
  },
  {
    "text": "untrusted input but we can write and we will write a bug detectors that detect these things",
    "start": "688440",
    "end": "694380"
  },
  {
    "text": "um and they do exist like we are writing them so there has been instances of where these custom bug detectors have",
    "start": "694380",
    "end": "701279"
  },
  {
    "text": "found rces we recently have an issue SUV and golang based on custom box",
    "start": "701279",
    "end": "707160"
  },
  {
    "text": "synthesizes but it is very modern as in just the last few months where this has become a thing in in the",
    "start": "707160",
    "end": "713519"
  },
  {
    "text": "golden fasting landscape yeah so David like they mentioned the last or the the",
    "start": "713519",
    "end": "719100"
  },
  {
    "text": "two two versions ago that go there were three CVS and uh go away and we thought one of them was found by also their",
    "start": "719100",
    "end": "726000"
  },
  {
    "text": "Logics with a custom box inside so with the flashing so it it does have promise and um it will go further in that",
    "start": "726000",
    "end": "733860"
  },
  {
    "text": "direction uh of course quickly disclosure of sensitive information um traditionally if if you somehow",
    "start": "733860",
    "end": "740640"
  },
  {
    "text": "disclose sensitive information in your logs or on disk uh a fossil would not catch catch that but that's something we",
    "start": "740640",
    "end": "747540"
  },
  {
    "text": "want to do we want to to be better at handling files so arbitrary file writes",
    "start": "747540",
    "end": "753720"
  },
  {
    "text": "and reads um is something we also want to catch those are security issues for for the",
    "start": "753720",
    "end": "759720"
  },
  {
    "text": "cloud native landscape and of course race conditions can also be done better as well",
    "start": "759720",
    "end": "766940"
  },
  {
    "text": "so let's have a short demo of riding a fossa say we want to fast this this piece of",
    "start": "767339",
    "end": "775019"
  },
  {
    "text": "code here we have selected this from from kubernetes from the client Go part",
    "start": "775019",
    "end": "781620"
  },
  {
    "text": "and let's see here we have we are in the in",
    "start": "781620",
    "end": "789060"
  },
  {
    "text": "the directory here and the API we want to fastest this one here",
    "start": "789060",
    "end": "795740"
  },
  {
    "text": "which is the same one as in the slides just cloned from this morning",
    "start": "795740",
    "end": "801240"
  },
  {
    "text": "um and this is an API that takes two strings a name and a text creates a new",
    "start": "801240",
    "end": "808380"
  },
  {
    "text": "password based on the name and then it passes the text so if we if we wanted to for example",
    "start": "808380",
    "end": "814800"
  },
  {
    "text": "first this API for panics we want to see if there's any input we can give it to",
    "start": "814800",
    "end": "822120"
  },
  {
    "text": "to cause a to cause a crash this is what we would write and it",
    "start": "822120",
    "end": "828180"
  },
  {
    "text": "one second and go through it real quick we declare",
    "start": "828180",
    "end": "836220"
  },
  {
    "text": "the package the Imports and then we have this standard for Signature here we are",
    "start": "836220",
    "end": "841620"
  },
  {
    "text": "using the native go fuzzing engine from which was available from 1.18",
    "start": "841620",
    "end": "847279"
  },
  {
    "text": "well and that means it's in goal line yeah so so in a second you will see",
    "start": "847279",
    "end": "852600"
  },
  {
    "text": "we'll we'll run this by way of the go binary itself and which which makes it",
    "start": "852600",
    "end": "858420"
  },
  {
    "text": "very easy for everyone to First locally you know if I was for example to the to",
    "start": "858420",
    "end": "863579"
  },
  {
    "text": "be contributing to this pass you know I would be coding this function here and I",
    "start": "863579",
    "end": "869639"
  },
  {
    "text": "wanted to check you know have I ruined everything and have I done anything to you know that can cause a crash then I",
    "start": "869639",
    "end": "875579"
  },
  {
    "text": "would write a fossil like this that takes uh testing.f and then we run this",
    "start": "875579",
    "end": "881519"
  },
  {
    "text": "F dot Foss that takes a function here with a testing.t and two and then we ask",
    "start": "881519",
    "end": "888360"
  },
  {
    "text": "the forcing engine to give us a two strings one we name we call name one we call text and then we pass that to pass",
    "start": "888360",
    "end": "897980"
  },
  {
    "text": "so this parameter here will create the path and this is the part that will be a",
    "start": "898040",
    "end": "903839"
  },
  {
    "text": "passed which which of these variables come from the father so in with the go",
    "start": "903839",
    "end": "910760"
  },
  {
    "text": "1.18 we can get as many or we can get many parameters of different types so",
    "start": "910760",
    "end": "917339"
  },
  {
    "text": "both of these come from the fussing engine so we tell the fussing engine give us two red",
    "start": "917339",
    "end": "923120"
  },
  {
    "text": "pseudo-random text sorry strings and then we use those here so name and text",
    "start": "923120",
    "end": "930180"
  },
  {
    "text": "are random stuff provided by the fuzzle yeah exactly uh and if we were to",
    "start": "930180",
    "end": "936959"
  },
  {
    "text": "run that we would use the go binary like this",
    "start": "936959",
    "end": "942860"
  },
  {
    "text": "and we would run the fossil like so another fossa is running and it is mutating over the Corpus and it really",
    "start": "943380",
    "end": "951240"
  },
  {
    "text": "is that easy in goaling and this is a completely valid photo it it will it is",
    "start": "951240",
    "end": "957779"
  },
  {
    "text": "something that you can use to test your code for for crashes panics and so and",
    "start": "957779",
    "end": "963360"
  },
  {
    "text": "we might Commit This to kubernetes later and this will keep running forever if we don't touch it you can see that it runs",
    "start": "963360",
    "end": "971279"
  },
  {
    "text": "how much is it two million execution yeah sorry this part here 109 109 100",
    "start": "971279",
    "end": "977820"
  },
  {
    "text": "000 executions per second which means it calls the parse function 100 000 executions per 100",
    "start": "977820",
    "end": "983880"
  },
  {
    "text": "000 times per second and each time name and text Will kind of be different to",
    "start": "983880",
    "end": "989940"
  },
  {
    "text": "what it previously were you will have you will have uh you know collisions and so on but in general it would just be",
    "start": "989940",
    "end": "996180"
  },
  {
    "text": "a hundred thousand different types of input each iteration",
    "start": "996180",
    "end": "1001540"
  },
  {
    "text": "so why do we fast we forced to find bugs and do we actually find bugs so this",
    "start": "1002480",
    "end": "1008920"
  },
  {
    "text": "graph you see here is the amount of issues opened and closed of the projects",
    "start": "1008920",
    "end": "1015560"
  },
  {
    "text": "that we showed on the uh first slide with all the projects which means the",
    "start": "1015560",
    "end": "1021380"
  },
  {
    "text": "more issues we have closed corresponds to issues that have been reported and then fixed okay so in June 2022",
    "start": "1021380",
    "end": "1031400"
  },
  {
    "text": "uh 1200 issues had been closed that means the forces of all of these cncf projects",
    "start": "1031400",
    "end": "1038900"
  },
  {
    "text": "had reported 1200 issues and they have all been triage and handled by developers and",
    "start": "1038900",
    "end": "1043938"
  },
  {
    "text": "fixed and done deal so that means that alone the the fasting of C of cncf projects up",
    "start": "1043939",
    "end": "1050960"
  },
  {
    "text": "until June 2022 have found more than a thousand issues that were also fixed",
    "start": "1050960",
    "end": "1057260"
  },
  {
    "text": "some of these will be false positives and this is also because fossils essentially",
    "start": "1057260",
    "end": "1063380"
  },
  {
    "text": "there can be issues in the fossil you can also over approximate when you call into an API because it will be",
    "start": "1063380",
    "end": "1069140"
  },
  {
    "text": "completely it will be all sorts of input that the fusser gives you meaning if you don't actually call the API in the right",
    "start": "1069140",
    "end": "1075559"
  },
  {
    "text": "manner you might break some things and there might be a false positive in a sense so you kind of have to fuss according to",
    "start": "1075559",
    "end": "1082460"
  },
  {
    "text": "the spec according to the thread model of the given Target that you are attacking",
    "start": "1082460",
    "end": "1088039"
  },
  {
    "text": "this is really important as it's easy to some apis may not be so well defined and",
    "start": "1088039",
    "end": "1094160"
  },
  {
    "text": "therefore it's easy to over approximate for example can you give a given application any arbitrary string or does",
    "start": "1094160",
    "end": "1100580"
  },
  {
    "text": "it actually not want to satisfy certain strings and so on that's that's the",
    "start": "1100580",
    "end": "1105860"
  },
  {
    "text": "point that that there will be a bunch of false positives and this is kind of dependent on how on who wrote the fusses",
    "start": "1105860",
    "end": "1111200"
  },
  {
    "text": "on how the the project is self-developed and so on so this is a bit different from Project to project how they like to",
    "start": "1111200",
    "end": "1118400"
  },
  {
    "text": "fuss the the project what is important also what is important as well to note here is 1200 issues takes a lot of time",
    "start": "1118400",
    "end": "1125480"
  },
  {
    "text": "to triage so the cncf projects have put in a lot of investment in terms of time",
    "start": "1125480",
    "end": "1131059"
  },
  {
    "text": "to actually handle fussing it's a serious effort in terms of time investment",
    "start": "1131059",
    "end": "1137059"
  },
  {
    "text": "so another reason why we fast here are some some quotes from some maintainers",
    "start": "1137059",
    "end": "1143780"
  },
  {
    "text": "from some of the important uh so like well used cncf projects around",
    "start": "1143780",
    "end": "1150200"
  },
  {
    "text": "the quotes come from a blog post we wrote which is linked at the bottom and Harvey from Envoy proxy",
    "start": "1150200",
    "end": "1158500"
  },
  {
    "text": "says the following fasting is foundational to Envoy security and reliability posture",
    "start": "1158500",
    "end": "1164419"
  },
  {
    "text": "we have realized the benefits via proactive discovery of cves and many non-security related improvements",
    "start": "1164419",
    "end": "1171559"
  },
  {
    "text": "fasting is not a right one's exercise for Envoy and there are some points to take here which is it's really important",
    "start": "1171559",
    "end": "1178880"
  },
  {
    "text": "for Envy Envoy to have the first thing running Envoy is written in C plus so this a memory on safety",
    "start": "1178880",
    "end": "1187419"
  },
  {
    "text": "the second point that I I highlight here is that they also found a lot of non-security related issues so you will",
    "start": "1187520",
    "end": "1194960"
  },
  {
    "text": "find reliability issues not all issues find by the fossa not also like",
    "start": "1194960",
    "end": "1200059"
  },
  {
    "text": "SEC faults and so on are actually security issues and the second the third thing is",
    "start": "1200059",
    "end": "1205580"
  },
  {
    "text": "fasting is not the right one's exercise put in hundreds if not perhaps",
    "start": "1205580",
    "end": "1212000"
  },
  {
    "text": "into their fussing uh architecture this is really important to keep in mind and",
    "start": "1212000",
    "end": "1218059"
  },
  {
    "text": "it's a continuous effort it's not something you do you know set up once and then forget about it as the project",
    "start": "1218059",
    "end": "1224600"
  },
  {
    "text": "evolves it's kind of like in parallel to unit testing and integration testing for",
    "start": "1224600",
    "end": "1229640"
  },
  {
    "text": "that matter second quote is from Jan Fisher from Marco CD not only did the fossils find quite a few hard to catch and serious",
    "start": "1229640",
    "end": "1236360"
  },
  {
    "text": "blocks in our code base we also learned a lot from analyzing and fixing the Box especially at the Assumption we make",
    "start": "1236360",
    "end": "1242179"
  },
  {
    "text": "while writing the code are not always correct even if we think there's a proper unit testing in place I think the point that I really want to",
    "start": "1242179",
    "end": "1249020"
  },
  {
    "text": "highlight from here is that it also teaches the developers a little bit more about their code it kind of lets them",
    "start": "1249020",
    "end": "1255080"
  },
  {
    "text": "think differently about it because when you throw any sort of arbitrary random",
    "start": "1255080",
    "end": "1260179"
  },
  {
    "text": "input on your your application weird things can happen and as he says a lot",
    "start": "1260179",
    "end": "1265340"
  },
  {
    "text": "of the assumptions that you may have are not necessarily true um",
    "start": "1265340",
    "end": "1270620"
  },
  {
    "text": "there's more quotes in in the block which are quite uh interesting from a developer's perspective",
    "start": "1270620",
    "end": "1277340"
  },
  {
    "text": "okay so in terms of how we set up fasting for all the cncf projects that",
    "start": "1277340",
    "end": "1282919"
  },
  {
    "text": "we showed in the second slide um we we start by writing a bunch of",
    "start": "1282919",
    "end": "1288620"
  },
  {
    "text": "photos for the project a bunch of uh tests and in the in the case study later",
    "start": "1288620",
    "end": "1294200"
  },
  {
    "text": "we give an approximation as an example but it varies but the approach is write",
    "start": "1294200",
    "end": "1299960"
  },
  {
    "text": "a bunch of a bunch of forces and run them locally to see if any",
    "start": "1299960",
    "end": "1305600"
  },
  {
    "text": "immediate things come up um after that we merged these forces into",
    "start": "1305600",
    "end": "1311720"
  },
  {
    "text": "our Salesforce [Music] and we also built integration for these",
    "start": "1311720",
    "end": "1317900"
  },
  {
    "text": "projects so it says first is a project run by Google that will run all the",
    "start": "1317900",
    "end": "1323539"
  },
  {
    "text": "forces for critical uh software projects open source software projects continuously and some of the forces will",
    "start": "1323539",
    "end": "1330980"
  },
  {
    "text": "run for hundreds or thousands of hours and it's it's something that all the we",
    "start": "1330980",
    "end": "1337340"
  },
  {
    "text": "want all the cloud the cncf projects to do that we want them all to be integrated into Access First",
    "start": "1337340",
    "end": "1343820"
  },
  {
    "text": "um and then we let them run we let the fossils run um uh unvoy as an example has been",
    "start": "1343820",
    "end": "1350240"
  },
  {
    "text": "running the forces and was one of the first CCF projects that integrated they have been running now for two years I",
    "start": "1350240",
    "end": "1356659"
  },
  {
    "text": "think five years or so five years and the same goes for kubernetes Argo as",
    "start": "1356659",
    "end": "1362360"
  },
  {
    "text": "well um they they they are running for years really um and there are cases where a box come",
    "start": "1362360",
    "end": "1369440"
  },
  {
    "text": "up after six months of running after um 20 billion executions a bug is found",
    "start": "1369440",
    "end": "1377919"
  },
  {
    "text": "and of course that takes a lot of infrastructure and um you know CPU power",
    "start": "1377919",
    "end": "1385220"
  },
  {
    "text": "and those source project offers that and whenever a box bug is found biosis was",
    "start": "1385220",
    "end": "1391159"
  },
  {
    "text": "the maintainers get notified and um with a bug report and a stack",
    "start": "1391159",
    "end": "1397520"
  },
  {
    "text": "Trace so in terms of getting started maybe you",
    "start": "1397520",
    "end": "1404360"
  },
  {
    "text": "saw we were down at the the project Pavilion with the cncf forcing Booth",
    "start": "1404360",
    "end": "1409760"
  },
  {
    "text": "um and we we get together with the cncf projects um in a meeting we usually catch the",
    "start": "1409760",
    "end": "1415460"
  },
  {
    "text": "catch the maintainers in a community community meeting and talk about how to to do this you know how to how do we",
    "start": "1415460",
    "end": "1421820"
  },
  {
    "text": "approach what we said in the last slide how do we approach writing a budget forces and integrating the project into",
    "start": "1421820",
    "end": "1428000"
  },
  {
    "text": "SS first um there are there are different opinions from Project to project different ways of doing this it's",
    "start": "1428000",
    "end": "1434960"
  },
  {
    "text": "usually not a big issue in terms of getting it done usually it's something",
    "start": "1434960",
    "end": "1440179"
  },
  {
    "text": "related to a release coming up and it might be too much to add a new thing to the project and",
    "start": "1440179",
    "end": "1448100"
  },
  {
    "text": "and then and then yes one after that we we do all the stuff write the forces and integrate into OSS",
    "start": "1448100",
    "end": "1455559"
  },
  {
    "text": "so let's do a case study about the istio that we've we did around a year ago I",
    "start": "1456200",
    "end": "1463940"
  },
  {
    "text": "think actually uh a year ago we were writing forces so I assume everyone knows knows istio if not it's a service",
    "start": "1463940",
    "end": "1472280"
  },
  {
    "text": "mesh under the cncf that is widely used um",
    "start": "1472280",
    "end": "1477799"
  },
  {
    "text": "and what we did was we over uh two three four months rode around 60 forces and",
    "start": "1477799",
    "end": "1485299"
  },
  {
    "text": "integrated those into us as well and just full disclaim like",
    "start": "1485299",
    "end": "1491419"
  },
  {
    "text": "it still maintains really really quality code you know just full disclaimer that we when we go into this case case study",
    "start": "1491419",
    "end": "1499640"
  },
  {
    "text": "um so we wrote a 60 000 random on osas bus and over the course of these four months there were almost 300 the all the",
    "start": "1499640",
    "end": "1506900"
  },
  {
    "text": "fossils combined uh ran for for almost 300 billion times",
    "start": "1506900",
    "end": "1512480"
  },
  {
    "text": "um and for for a total of almost 60 000 hours and of course that that takes a",
    "start": "1512480",
    "end": "1517640"
  },
  {
    "text": "tremendous amount of CPU resources and this is why you should integrate",
    "start": "1517640",
    "end": "1523159"
  },
  {
    "text": "into OSS first rather than running them locally on your machine for an hour every day or so OSS will throw a lot of",
    "start": "1523159",
    "end": "1531440"
  },
  {
    "text": "CPU on it right so one of one of the findings uh we found a bunch of issues I think we have",
    "start": "1531440",
    "end": "1538279"
  },
  {
    "text": "a blog post on this on our website um I think around 40 crashes that that were mostly",
    "start": "1538279",
    "end": "1545840"
  },
  {
    "text": "reliability related but one one vulnerability was found this one",
    "start": "1545840",
    "end": "1552140"
  },
  {
    "text": "um unauthenticated control plane denial of service attack",
    "start": "1552140",
    "end": "1557720"
  },
  {
    "text": "and it was a science CV of severity High and it was found by one of the forces",
    "start": "1557720",
    "end": "1564980"
  },
  {
    "text": "that we wrote and in this the the the the issue was found",
    "start": "1564980",
    "end": "1571340"
  },
  {
    "text": "in this API here extract JWT out that takes a string splits that string by",
    "start": "1571340",
    "end": "1578799"
  },
  {
    "text": "by dots and we then need to have and end",
    "start": "1578799",
    "end": "1585200"
  },
  {
    "text": "up with a slice of three different strings [Music] and if not we return",
    "start": "1585200",
    "end": "1591020"
  },
  {
    "text": "then we we assume that then we we want the payload which is the the second item",
    "start": "1591020",
    "end": "1597320"
  },
  {
    "text": "of the slice um and we decode that into this payload bytes",
    "start": "1597320",
    "end": "1604340"
  },
  {
    "text": "parameter then we create a JWT payload strut here",
    "start": "1604340",
    "end": "1610940"
  },
  {
    "text": "called structured payload and we pass the bytes into that strot here",
    "start": "1610940",
    "end": "1616960"
  },
  {
    "text": "if we if that fails we return an error and then finally we return the",
    "start": "1616960",
    "end": "1623840"
  },
  {
    "text": "structured payload dot out our item and the CV wasn't here and if if you can",
    "start": "1623840",
    "end": "1631340"
  },
  {
    "text": "see it um and hopefully you have read the blog post that we wrote about it but if not",
    "start": "1631340",
    "end": "1638240"
  },
  {
    "text": "it's uh it's a it's a really interesting case and in fact the istio maintainers",
    "start": "1638240",
    "end": "1643700"
  },
  {
    "text": "found this the same mistake done in a bunch of other high-profile projects",
    "start": "1643700",
    "end": "1650539"
  },
  {
    "text": "um so the issue was that if this payload bytes payload bytes ends up being the",
    "start": "1651080",
    "end": "1657980"
  },
  {
    "text": "about by slice of n-u-l-l",
    "start": "1657980",
    "end": "1663020"
  },
  {
    "text": "so so if if we had to have to buy slice n-u-l-l and pass that to Json on",
    "start": "1666100",
    "end": "1671539"
  },
  {
    "text": "Marshall and we passed a double pointer if you see here we pass a double pointer",
    "start": "1671539",
    "end": "1677059"
  },
  {
    "text": "here then uh the structured payload will end up being a nil value that's a that's a",
    "start": "1677059",
    "end": "1684320"
  },
  {
    "text": "feature of the golang and it was reported to golang but that's a feature and not a bug so in fact here with Json",
    "start": "1684320",
    "end": "1692240"
  },
  {
    "text": "dot on Marshall will not return an error it will just uh create a nil value here",
    "start": "1692240",
    "end": "1698240"
  },
  {
    "text": "so here down here we end with Neil dot out and obviously that that results in a",
    "start": "1698240",
    "end": "1703580"
  },
  {
    "text": "nailed reference and that was that was the that was the CV assigned 7.5 and the fix",
    "start": "1703580",
    "end": "1711500"
  },
  {
    "text": "don't pass a double pointer past a single pointer",
    "start": "1711500",
    "end": "1716860"
  },
  {
    "text": "I think the main point of that is the ECU team had no idea that passing a",
    "start": "1717500",
    "end": "1723620"
  },
  {
    "text": "specific type of bite slice could lead to that kind of very anomalies anomalous behavior and this is where the fussing",
    "start": "1723620",
    "end": "1730100"
  },
  {
    "text": "really came in and tried all forms of bite slices when they tried the nil or",
    "start": "1730100",
    "end": "1735980"
  },
  {
    "text": "the in url the issue hit but if you would never have identified this themselves yeah so writing unit",
    "start": "1735980",
    "end": "1743059"
  },
  {
    "text": "tests or whatever right so so I think this this code was one year old so it had been sitting for one year and um",
    "start": "1743059",
    "end": "1750260"
  },
  {
    "text": "again I mean the Easter team was like they maintained really really quality code and luckily this was the this was",
    "start": "1750260",
    "end": "1758659"
  },
  {
    "text": "the most severe issue so the next thing being the next thing",
    "start": "1758659",
    "end": "1763700"
  },
  {
    "text": "when you have started passing up your your project you've developed a lot of classes the questions really have you done enough",
    "start": "1763700",
    "end": "1769520"
  },
  {
    "text": "this is not so trivial to to assess you can use code coverage as the main kind",
    "start": "1769520",
    "end": "1774620"
  },
  {
    "text": "of like aspect of it but even code coverage can lie because you can also reach different states of a given piece of code",
    "start": "1774620",
    "end": "1781460"
  },
  {
    "text": "depending on which entry point you hit so we have this tool fast introspector which comes from ossf OSF is open source",
    "start": "1781460",
    "end": "1789500"
  },
  {
    "text": "security Foundation I think and we're just listing it here because it",
    "start": "1789500",
    "end": "1796399"
  },
  {
    "text": "will tell you a lot about thread model of your project how to attack it where your complex code is where the entry points is everything",
    "start": "1796399",
    "end": "1803179"
  },
  {
    "text": "statically reached you might have a faucet that statically reaches something as in",
    "start": "1803179",
    "end": "1809419"
  },
  {
    "text": "if you do static analysis like technically your fossils should reach an API but it might be blocked dynamically because of some configurations or so so",
    "start": "1809419",
    "end": "1816860"
  },
  {
    "text": "you can like overlap the dynamic analysis element of fussing with static program analysis",
    "start": "1816860",
    "end": "1824440"
  },
  {
    "text": "looking ahead well more projects need fasting so if",
    "start": "1824600",
    "end": "1829640"
  },
  {
    "text": "you are involved in a cncf project visit github.com cncf cncf fussing and",
    "start": "1829640",
    "end": "1836419"
  },
  {
    "text": "and we'll we'll write an issue you should write an issue that you'd like to probably fast and we'll come and help",
    "start": "1836419",
    "end": "1842720"
  },
  {
    "text": "you there's also a lot of work in terms of maintaining the existing projects uh also reach out on cncf fasting",
    "start": "1842720",
    "end": "1849740"
  },
  {
    "text": "repository if you're interested in getting involved improve tool support is also one of the",
    "start": "1849740",
    "end": "1854840"
  },
  {
    "text": "major ones such as the one I just mentioned fast introspective and finally also uh improving the",
    "start": "1854840",
    "end": "1860720"
  },
  {
    "text": "ability to identify security issues in memory safe languages it's a really high",
    "start": "1860720",
    "end": "1866480"
  },
  {
    "text": "priority for a lot of organizations because well you want to capture these",
    "start": "1866480",
    "end": "1872059"
  },
  {
    "text": "types of command injections and so on using these various bot oracles one of",
    "start": "1872059",
    "end": "1877220"
  },
  {
    "text": "the main points you should also take from this the fact that we are improving Bach oracles mean that",
    "start": "1877220",
    "end": "1883820"
  },
  {
    "text": "all the fossils that are written now whenever we push a new bug Oracle to for example OSS first all the existing",
    "start": "1883820",
    "end": "1890480"
  },
  {
    "text": "forces on OSS first will benefit from that bot Oracle so even if you choose to invest invest in fasting now in your",
    "start": "1890480",
    "end": "1897799"
  },
  {
    "text": "open source project you'll get a lot of rewards from a large community that are improving forcing so even though it",
    "start": "1897799",
    "end": "1904640"
  },
  {
    "text": "might not you will find some denial of service issues now but the fossils themselves might actually",
    "start": "1904640",
    "end": "1910460"
  },
  {
    "text": "find a lot more in a few months because we are doing a lot of work from the back end",
    "start": "1910460",
    "end": "1916179"
  },
  {
    "text": "if you are a cncf project reach out to us and we would like to acknowledge a few organizations here first of all most",
    "start": "1917120",
    "end": "1923779"
  },
  {
    "text": "first of all the maintainers of the various projects for collaborating the cncf as well for sponsoring this work",
    "start": "1923779",
    "end": "1929600"
  },
  {
    "text": "and then also the open source technology Improvement fund which has also helped sponsor some of the fasting work that is",
    "start": "1929600",
    "end": "1935360"
  },
  {
    "text": "going around that's it for my site [Applause]",
    "start": "1935360",
    "end": "1946359"
  },
  {
    "text": "just wave at me if you have any questions",
    "start": "1946460",
    "end": "1950380"
  },
  {
    "text": "thanks for the talk um just wanted to know",
    "start": "1958700",
    "end": "1964340"
  },
  {
    "text": "what you thought of how do you keep the uh how do you keep the types in check so",
    "start": "1964340",
    "end": "1971299"
  },
  {
    "text": "your example you gave today of the parse like it's just two text strings or two strings",
    "start": "1971299",
    "end": "1977539"
  },
  {
    "text": "um what do you do when you when the fuzzy generator could generate",
    "start": "1977539",
    "end": "1984679"
  },
  {
    "text": "a string that's a million bytes and then you know your function could actually check for that and say if it's over a",
    "start": "1984679",
    "end": "1991399"
  },
  {
    "text": "certain amount you know we return error so all your functions end up having to do lots of uh bounds checking because",
    "start": "1991399",
    "end": "1999260"
  },
  {
    "text": "the fuzzy gives absurd values that necessarily wouldn't be",
    "start": "1999260",
    "end": "2004360"
  },
  {
    "text": "be um you know kind of a normal case so you could do that you could argue well the code's not right the code could be",
    "start": "2004360",
    "end": "2010480"
  },
  {
    "text": "improved versus you know keeping it in check because that makes sense",
    "start": "2010480",
    "end": "2015519"
  },
  {
    "text": "yeah I mean in your given example if you have something that assumes a string of",
    "start": "2015519",
    "end": "2021340"
  },
  {
    "text": "maximum X size and you give it a string if and",
    "start": "2021340",
    "end": "2026559"
  },
  {
    "text": "if you don't put that constraint in your fusser so where where is the issue the positive",
    "start": "2026559",
    "end": "2032380"
  },
  {
    "text": "will give a false positive in a sense did the API document it if not the API",
    "start": "2032380",
    "end": "2038440"
  },
  {
    "text": "has perhaps a documentation error and stuff like that so now it comes to debate where's the buck and I mean this",
    "start": "2038440",
    "end": "2044200"
  },
  {
    "text": "can both be in the fusser it can be in the description of it can also be a lack of check in the function and so on so",
    "start": "2044200",
    "end": "2050138"
  },
  {
    "text": "this is the case where I was referring to some of them are false positive some of them are not and usually in the",
    "start": "2050139",
    "end": "2056260"
  },
  {
    "text": "situation you describe you you will talk to the developers it depends so much on what they on what what their their view",
    "start": "2056260",
    "end": "2062440"
  },
  {
    "text": "is basically um so this is almost a political issue in a sense but in terms of if we if we",
    "start": "2062440",
    "end": "2070118"
  },
  {
    "text": "say if we remove the political aspect in that sense and then say your forces should also take a lot of con that you",
    "start": "2070119",
    "end": "2076358"
  },
  {
    "text": "should take into consideration the code that that it's testing so in a sense you",
    "start": "2076359",
    "end": "2081580"
  },
  {
    "text": "should put the constraint up you should constrain you you'd say what you would do in this case you would say if if the",
    "start": "2081580",
    "end": "2086800"
  },
  {
    "text": "input given by the fusser is you know fuzzle code itself you'd say the input given by the fuzzing engine if that's",
    "start": "2086800",
    "end": "2092560"
  },
  {
    "text": "longer than x just return don't call into the API type of thing so you you",
    "start": "2092560",
    "end": "2097720"
  },
  {
    "text": "know some fusses will be like hundreds of lines 600 lines",
    "start": "2097720",
    "end": "2103060"
  },
  {
    "text": "of code just to prepare this random input the first engine gives you do a",
    "start": "2103060",
    "end": "2108339"
  },
  {
    "text": "lot of stuff on it until it calls into the target they can get very complex like the first the first tests",
    "start": "2108339",
    "end": "2114040"
  },
  {
    "text": "themselves so and that's like acceptable kind of because that's just one function you",
    "start": "2114040",
    "end": "2119140"
  },
  {
    "text": "would have to do that throughout potentially your whole code base right uh could you clarify a little bit what",
    "start": "2119140",
    "end": "2126220"
  },
  {
    "text": "you mean here well if you're dealing with strings that are super long you might have to do that throughout you",
    "start": "2126220",
    "end": "2131440"
  },
  {
    "text": "have to write a library or something that says handle these long strings because that those 600 lines you're",
    "start": "2131440",
    "end": "2136660"
  },
  {
    "text": "talking about that long bit the next function needs that same thing like oh I need to check if that string",
    "start": "2136660",
    "end": "2142359"
  },
  {
    "text": "is really big and that one needs to check and then sort of yeah I mean it is a lot of effort writing the process you you must study",
    "start": "2142359",
    "end": "2149020"
  },
  {
    "text": "the code that you're attacking in a sense uh what you would also what you also often try to do is",
    "start": "2149020",
    "end": "2155680"
  },
  {
    "text": "Force the functions that are very high level in that these functions reach all the rest of the code and if you just",
    "start": "2155680",
    "end": "2162280"
  },
  {
    "text": "satisfy the spec of that you know high level function that reach the rest of your project of your of your library",
    "start": "2162280",
    "end": "2167680"
  },
  {
    "text": "then I mean you should be good so you're trying to identify those large like high",
    "start": "2167680",
    "end": "2173560"
  },
  {
    "text": "level functions and then manage ensure that what you're giving it is what you actually should",
    "start": "2173560",
    "end": "2179260"
  },
  {
    "text": "what I also mean by that so for example you could also first stir land in C and you could give it just an aperture if",
    "start": "2179260",
    "end": "2185619"
  },
  {
    "text": "you just give it an arbitrary piece of memory you're going to find a lot of bugs and that's because it actually expects an",
    "start": "2185619",
    "end": "2191140"
  },
  {
    "text": "all terminated string so for example if you fast that function you should ensure that it's a null terminated string so",
    "start": "2191140",
    "end": "2196720"
  },
  {
    "text": "what you would do is you would take the input by the fusser you would add a null byte at the end and then you'd pass it",
    "start": "2196720",
    "end": "2202599"
  },
  {
    "text": "in so you do a lot of that stuff you do a lot a lot of that stuff we even have some",
    "start": "2202599",
    "end": "2207820"
  },
  {
    "text": "we have some libraries for how to do this in in golang if for example you were to fast inputs sorry functions that",
    "start": "2207820",
    "end": "2215260"
  },
  {
    "text": "accept struct Source input how do you kind of take the role by given by the first engine and convert it into a large",
    "start": "2215260",
    "end": "2221320"
  },
  {
    "text": "data structure that is essentially random before you then pass it into your Fe to your Target and Adam has a library",
    "start": "2221320",
    "end": "2228760"
  },
  {
    "text": "for for example converting random bytes into a nice structure that you can then pass into your library",
    "start": "2228760",
    "end": "2235300"
  },
  {
    "text": "great thanks a quick follow-up but you can go on others it's just uh how do you uh",
    "start": "2235300",
    "end": "2242140"
  },
  {
    "text": "your fuzz patterns or your your scripts in sync",
    "start": "2242140",
    "end": "2247480"
  },
  {
    "text": "with the code you know yeah yeah what's the challenge that's there the challenge there is it takes it takes",
    "start": "2247480",
    "end": "2254619"
  },
  {
    "text": "effort you know how do you keep you should think of it similar to how do you keep your tests in sync yeah and the the",
    "start": "2254619",
    "end": "2259900"
  },
  {
    "text": "answer is more or less the same the challenges that there are from the forcing perspectives is that less people know about footing it's a little bit",
    "start": "2259900",
    "end": "2266380"
  },
  {
    "text": "counterintuitive like it's not as intuitive as testing so usually it's a mix of",
    "start": "2266380",
    "end": "2272619"
  },
  {
    "text": "varies from Project to project sometimes we will do it for the project if they don't have the the resource available",
    "start": "2272619",
    "end": "2278020"
  },
  {
    "text": "sometimes they will do it sometimes no one will do it and it will",
    "start": "2278020",
    "end": "2283060"
  },
  {
    "text": "it's not working you know so um and then then it can get very bad in the sense",
    "start": "2283060",
    "end": "2288220"
  },
  {
    "text": "that it's not working because it's not working it will start to throw a lot of issues because it's doing things wrong and stuff like that",
    "start": "2288220",
    "end": "2294220"
  },
  {
    "text": "but for some projects it's difficult even to maintain that the forces still built",
    "start": "2294220",
    "end": "2302320"
  },
  {
    "text": "because I mean it is an effort and sometimes all right there's one over here and but",
    "start": "2302320",
    "end": "2310060"
  },
  {
    "text": "this is actually time so I would request to continue the discussions",
    "start": "2310060",
    "end": "2315160"
  },
  {
    "text": "thank you everyone for attending thank you for the speakers please come up and ask in case yeah exactly exactly so",
    "start": "2315160",
    "end": "2320560"
  },
  {
    "text": "please come over to the discussion thank you thank you very much",
    "start": "2320560",
    "end": "2327660"
  },
  {
    "text": "[Applause]",
    "start": "2328490",
    "end": "2331720"
  }
]