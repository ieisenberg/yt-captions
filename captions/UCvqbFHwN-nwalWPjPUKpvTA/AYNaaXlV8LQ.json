[
  {
    "text": "so good afternoon everyone I'm Seb I work at elastic um in this session",
    "start": "40",
    "end": "6799"
  },
  {
    "text": "behind a very long title on the slides we're going to talk about how we've been redesigning our Cloud platform at",
    "start": "6799",
    "end": "13400"
  },
  {
    "text": "elastic recently um and how we make heavy use of this controller pattern uh",
    "start": "13400",
    "end": "19920"
  },
  {
    "text": "that kuet provides so just a little bit of context",
    "start": "19920",
    "end": "25680"
  },
  {
    "text": "first so everybody sort of understands what I'm talking about um",
    "start": "25680",
    "end": "30800"
  },
  {
    "text": "that's what I work on elastic Cloud so if you don't know where elastic we the",
    "start": "30800",
    "end": "36280"
  },
  {
    "text": "company behind elastic search key and all those products um run a cloud service where you can basically create a",
    "start": "36280",
    "end": "44640"
  },
  {
    "text": "nastic stack um as a service by clicking a few buttons uh we run around the world",
    "start": "44640",
    "end": "51120"
  },
  {
    "text": "across three different Cloud providers um and across more than 50 regions and we've done that for quite",
    "start": "51120",
    "end": "59440"
  },
  {
    "text": "some time now with our own sort of home brew orchestration system which is not",
    "start": "59440",
    "end": "64720"
  },
  {
    "text": "kubernetes because it predates kubernetes and now we run more than 600,000 containers in",
    "start": "64720",
    "end": "71920"
  },
  {
    "text": "production um so that's what I'm working on and I think at elastic we've been",
    "start": "71920",
    "end": "79520"
  },
  {
    "text": "involved in the kinary space for a few years now um two things in particular I",
    "start": "79520",
    "end": "85439"
  },
  {
    "text": "can highlight one is our observability solution uh that AR monitoring",
    "start": "85439",
    "end": "90640"
  },
  {
    "text": "kubernetes and monitoring your services on kubernetes so we do metrics APM traces and things like that uh so we've",
    "start": "90640",
    "end": "97880"
  },
  {
    "text": "been heavy users of kubernetes in that sense like for developing that solution but we've also invested into",
    "start": "97880",
    "end": "105119"
  },
  {
    "text": "that project that we like to call the Eck operator so that's an operator that allows you to deploy elastic search uh",
    "start": "105119",
    "end": "112520"
  },
  {
    "text": "very easily on your KU cluster I I don't know if people here have used",
    "start": "112520",
    "end": "117759"
  },
  {
    "text": "dck yeah cool uh so I've worked on that one for I think the past few",
    "start": "117759",
    "end": "125719"
  },
  {
    "text": "years um and so while we were working on that I think we realized that we would",
    "start": "125719",
    "end": "130959"
  },
  {
    "text": "really benefit from also relying on communties internally and sort of slowly changing and redesigning our own clad",
    "start": "130959",
    "end": "137840"
  },
  {
    "text": "platform to be based on communes because we gained that experience of working with kues working um on developing",
    "start": "137840",
    "end": "144920"
  },
  {
    "text": "against kubernetes like building custom controllers and things like that um",
    "start": "144920",
    "end": "151120"
  },
  {
    "text": "I think with that experience we also did a few presentations like this one from 2019 that is also about kubernetes",
    "start": "151120",
    "end": "157440"
  },
  {
    "text": "controllers and operators if you want to have a look it's on YouTube now and so",
    "start": "157440",
    "end": "162560"
  },
  {
    "text": "we kind of know how to use kubernetes now we we're used to it and that's why I think two years ago we made this sort of",
    "start": "162560",
    "end": "168760"
  },
  {
    "text": "big decision that we would redesign entirely our Cloud platform and we would really Embrace communities fully like",
    "start": "168760",
    "end": "174720"
  },
  {
    "text": "that's where we are headed and we we started to think about how we would",
    "start": "174720",
    "end": "179879"
  },
  {
    "text": "would redesign that cloud platform for a very large scale like talking about million containers uh many many",
    "start": "179879",
    "end": "186239"
  },
  {
    "text": "kubernetes clusters and and doing that in such a way that everything is resilient to failure um highly available",
    "start": "186239",
    "end": "192640"
  },
  {
    "text": "and and that sort of considerations um yeah so that's what I started working on two years ago U no",
    "start": "192640",
    "end": "199400"
  },
  {
    "text": "pressure easy right um so I'm going to share a little bit of what that",
    "start": "199400",
    "end": "205519"
  },
  {
    "text": "architecture looks like now um sort of some insights and and uh design decisions that have been applied behind",
    "start": "205519",
    "end": "212040"
  },
  {
    "text": "this um so it basically looks like this um we can split it in two different half",
    "start": "212040",
    "end": "218720"
  },
  {
    "text": "there's the top half which we like to call the global control um which is made of services deployed in communities and",
    "start": "218720",
    "end": "225879"
  },
  {
    "text": "there's the bottom half which we like to call the regional application clusters",
    "start": "225879",
    "end": "231319"
  },
  {
    "text": "so if we start with the top um that Global Kunes cluster on the top is our",
    "start": "231319",
    "end": "237360"
  },
  {
    "text": "control plane from a user perspective so our users would basically talk to an API",
    "start": "237360",
    "end": "244079"
  },
  {
    "text": "and make a request to create a an elastic seret project for example um we",
    "start": "244079",
    "end": "250000"
  },
  {
    "text": "store that information somewhere and we have a bunch of controllers at the top that are going to process that request",
    "start": "250000",
    "end": "255840"
  },
  {
    "text": "to create a project and then in the bottle half bottom half is where we have really a",
    "start": "255840",
    "end": "262199"
  },
  {
    "text": "shitload of ctive clusters in many many regions in many many Cloud providers um and that's where we",
    "start": "262199",
    "end": "269080"
  },
  {
    "text": "actually run the workload so elastic search pods kibana and things along those lines uh so as a user when you",
    "start": "269080",
    "end": "275320"
  },
  {
    "text": "access your elastic search deployment you would go through these proxy service that we have and then we route request to the right",
    "start": "275320",
    "end": "281360"
  },
  {
    "text": "codes and there as well we have a bunch of controllers that's the green box that do a lot of stuff uh we're going to talk",
    "start": "281360",
    "end": "288600"
  },
  {
    "text": "about this so globally we have this split right a bunch of Global Services and a",
    "start": "288600",
    "end": "295560"
  },
  {
    "text": "bunch of regional services and we split things that way",
    "start": "295560",
    "end": "301639"
  },
  {
    "text": "one of the first thing we asked ourselves when we started designing for using kubernetes is how large can we",
    "start": "302000",
    "end": "309039"
  },
  {
    "text": "really push kubernetes we have these hundred thousands of containers how many can we",
    "start": "309039",
    "end": "315479"
  },
  {
    "text": "run in a single kubernetes cluster uh how many clusters can we have um this",
    "start": "315479",
    "end": "320800"
  },
  {
    "text": "sort of question and uh there's no easy answer to that I think uh there's an entire",
    "start": "320800",
    "end": "327880"
  },
  {
    "text": "group that is working on this problem there are many limits like it's not as simple as saying oh yeah you as soon as",
    "start": "327880",
    "end": "334759"
  },
  {
    "text": "you have 500 nodes it doesn't work or something like that like it has many dimensions um so I think what we sort of",
    "start": "334759",
    "end": "342240"
  },
  {
    "text": "quickly decided is that we don't really want to um be in the business of trying",
    "start": "342240",
    "end": "347280"
  },
  {
    "text": "to push communes to its limits uh is probably super fun but we like don't",
    "start": "347280",
    "end": "352560"
  },
  {
    "text": "really have time for that uh but rather we're going to try to scale the number of communties clusters horizontally uh",
    "start": "352560",
    "end": "360240"
  },
  {
    "text": "so we have many many clusters of 500 to 1,000 nodes rather than a small number",
    "start": "360240",
    "end": "367240"
  },
  {
    "text": "of very big clusters and we wanted to design in such a way that our communties clusters are",
    "start": "367240",
    "end": "374319"
  },
  {
    "text": "disposable so I think the the big idea here is something could happen and an entire",
    "start": "374319",
    "end": "381919"
  },
  {
    "text": "cluster gets destroyed like there's a failure on the cloud provider or we have",
    "start": "381919",
    "end": "387039"
  },
  {
    "text": "a problem and we basically lose the entire state in ETD um we want this to",
    "start": "387039",
    "end": "392680"
  },
  {
    "text": "not be a big problem um in the sense that we can easily sort of recreate that cluster and",
    "start": "392680",
    "end": "398880"
  },
  {
    "text": "repopulate everything that was in there uh from somewhere else like another source of",
    "start": "398880",
    "end": "404280"
  },
  {
    "text": "Truth um so in this analogy you may know about like pet versus cattle we treat",
    "start": "404280",
    "end": "410440"
  },
  {
    "text": "our cun classes themselves as as cattle like we don't want to stall anything so",
    "start": "410440",
    "end": "415960"
  },
  {
    "text": "important here that we could not tolerate the loss of it",
    "start": "415960",
    "end": "421520"
  },
  {
    "text": "and it's kind of nice because for us um it also means we don't really need to",
    "start": "422000",
    "end": "427360"
  },
  {
    "text": "deal with having a very solid story around LD backups and restall if we lose",
    "start": "427360",
    "end": "432400"
  },
  {
    "text": "a kuber cluster um you could say well maybe we can just",
    "start": "432400",
    "end": "437879"
  },
  {
    "text": "restore an LD backup uh from 5 seconds ago but but what do you do with that the",
    "start": "437879",
    "end": "443000"
  },
  {
    "text": "Delta of data that is missing now like that's very hard to deal with like maybe you you now have persistent volumes that",
    "start": "443000",
    "end": "449720"
  },
  {
    "text": "have been created but they are not in the backup um some resources that have been deleted but exist in the backup",
    "start": "449720",
    "end": "455199"
  },
  {
    "text": "like it's very very complicated so we we don't want to deal with that and we'd rather have good ways to recreate a",
    "start": "455199",
    "end": "461800"
  },
  {
    "text": "cluster and everything in there automatically um so going back to the",
    "start": "461800",
    "end": "468120"
  },
  {
    "text": "architecture I think we're going to uh Zoom a little bit into this this concept of controllers because we have",
    "start": "468120",
    "end": "473599"
  },
  {
    "text": "controllers all over the place here um",
    "start": "473599",
    "end": "480120"
  },
  {
    "text": "since we decided to embrace kubernetes a lot we really sort of embraced that pattern of controllers as well and I",
    "start": "480120",
    "end": "485520"
  },
  {
    "text": "think we've now written many many controllers ourselves we have a controller to manage kuun clusters",
    "start": "485520",
    "end": "491840"
  },
  {
    "text": "another one to manage servoless projects another one to manage elastic search to autoscale elastic search we also run a",
    "start": "491840",
    "end": "499039"
  },
  {
    "text": "bunch of controllers that uh come from the C ecosystem like this certificate manager uh some Ingress controllers and",
    "start": "499039",
    "end": "506520"
  },
  {
    "text": "of course kubernetes itself uh has a lot of controllers built in so the",
    "start": "506520",
    "end": "512039"
  },
  {
    "text": "deployment controller the replica set controller Etc so controllers all over the place uh it's not always easy to",
    "start": "512039",
    "end": "518959"
  },
  {
    "text": "navigate in that because you have chain of controllers like the the output of one could be the input of another one",
    "start": "518959",
    "end": "524360"
  },
  {
    "text": "etc etc but overall it's kind of useful because each little controller can have a very defined",
    "start": "524360",
    "end": "531920"
  },
  {
    "text": "scope um so I guess a lot of you have are sort of familiar with this concept of kubernetes controller now but I can",
    "start": "531920",
    "end": "538760"
  },
  {
    "text": "maybe um re explain a few things very quickly in case you're not um so when we say",
    "start": "538760",
    "end": "545680"
  },
  {
    "text": "controller I think in general we mean the same thing as when we say operator more or less uh naming right um but",
    "start": "545680",
    "end": "555959"
  },
  {
    "text": "basically it's that little white box here um which is a piece of code that",
    "start": "555959",
    "end": "561079"
  },
  {
    "text": "rewrites um which generally does one thing it's watching something that",
    "start": "561079",
    "end": "567680"
  },
  {
    "text": "represents the desired state so in that example that's an elastic sub cluster with three nodes at the",
    "start": "567680",
    "end": "574240"
  },
  {
    "text": "top and whenever there's an event related to that like there's a new one or this's one that has been",
    "start": "574240",
    "end": "580880"
  },
  {
    "text": "updated the controller is going to trigger what's called a Reconciliation so it's a basically sequential logic of",
    "start": "580880",
    "end": "588320"
  },
  {
    "text": "code that is going to compare that desired state which is what we want with the actual state of things and maybe",
    "start": "588320",
    "end": "595040"
  },
  {
    "text": "currently in communties we have a n6 cluster with two PS for example and so it's going to compare desired versus",
    "start": "595040",
    "end": "601360"
  },
  {
    "text": "actual and it's going to basically do the right thing so we eventually reach that desired State and it can run again",
    "start": "601360",
    "end": "608279"
  },
  {
    "text": "and again and again and again the same piece of codes on any event that may happen and it's going to retry if things",
    "start": "608279",
    "end": "614800"
  },
  {
    "text": "fail with some exponential back off logic um so it's not that",
    "start": "614800",
    "end": "622680"
  },
  {
    "text": "complicated um I think we don't",
    "start": "622720",
    "end": "628320"
  },
  {
    "text": "necessarily have to take everything from kubernetes like it's not always the the",
    "start": "628320",
    "end": "633680"
  },
  {
    "text": "best design in the world um not always the best thing in the world like the I guess the best",
    "start": "633680",
    "end": "639160"
  },
  {
    "text": "thing in the world is a bottle of French red wine probably but um still there are",
    "start": "639160",
    "end": "646680"
  },
  {
    "text": "very good things to take away from this controller pattern in kubernetes and it was useful for us to think about it when",
    "start": "646680",
    "end": "652560"
  },
  {
    "text": "we were U developing our services one of the nice properties is",
    "start": "652560",
    "end": "658399"
  },
  {
    "text": "that these control are generally resilient so if they crash if they",
    "start": "658399",
    "end": "664480"
  },
  {
    "text": "restart they're going to sort of self repair automatically the resources they",
    "start": "664480",
    "end": "670079"
  },
  {
    "text": "are responsible for and this pattern for us is kind of nice because I think we",
    "start": "670079",
    "end": "676279"
  },
  {
    "text": "moved from a system where we sort of execute things as a oneoff operation to A system that is able to continuously",
    "start": "676279",
    "end": "683720"
  },
  {
    "text": "repair everything we have it's also nice from a development perspective",
    "start": "683720",
    "end": "690720"
  },
  {
    "text": "because if if designed correctly um the code of this controller is really",
    "start": "690720",
    "end": "696279"
  },
  {
    "text": "idempotent it can run again and again and again um and and we reason about it",
    "start": "696279",
    "end": "701560"
  },
  {
    "text": "in terms of what's the desired State and I think that's we sometimes called a",
    "start": "701560",
    "end": "707040"
  },
  {
    "text": "level triggered pattern um I think the logic behind this naming is that the code just works based",
    "start": "707040",
    "end": "715680"
  },
  {
    "text": "on what's supposed to exist that's the desired state as opposed to Edge triggered where you would Implement some",
    "start": "715680",
    "end": "721639"
  },
  {
    "text": "code that deals with some particular change of state and that's harder to reason about because it leads you to",
    "start": "721639",
    "end": "727959"
  },
  {
    "text": "build State machines storing the state somewhere uh having small pieces of code that deal with one particular use case",
    "start": "727959",
    "end": "735800"
  },
  {
    "text": "um so we sort of like this in the in the development pattern as well and finally the other nice thing is",
    "start": "735800",
    "end": "745079"
  },
  {
    "text": "the controller runtime Library um so I don't know if you have control runtime maintainers in the",
    "start": "745079",
    "end": "751240"
  },
  {
    "text": "room uh yeah thank you uh that's a really great Library",
    "start": "751240",
    "end": "757399"
  },
  {
    "text": "like we use it a lot um it's really awesome to build controllers um it has a",
    "start": "757399",
    "end": "762800"
  },
  {
    "text": "lot of batteries included that it's it's really really nice uh so internally a controller has",
    "start": "762800",
    "end": "770320"
  },
  {
    "text": "what we call a work que um so remember I said there's something that is going to watch the desired State and this thing",
    "start": "770320",
    "end": "776600"
  },
  {
    "text": "goes through an event handler and the event Handler eventually pushes the",
    "start": "776600",
    "end": "781639"
  },
  {
    "text": "object we want to reconcile into a queue internally and then we have a a bunch of workers that are going to process the",
    "start": "781639",
    "end": "787399"
  },
  {
    "text": "items in that queue in parallel and there as well there are",
    "start": "787399",
    "end": "792720"
  },
  {
    "text": "some very nice properties that we can rely on um the items in the work are D",
    "start": "792720",
    "end": "798040"
  },
  {
    "text": "duplicated so in our case maybe there's a user that created a project and then",
    "start": "798040",
    "end": "804959"
  },
  {
    "text": "immediately they update it and they update it another time uh we don't have",
    "start": "804959",
    "end": "810040"
  },
  {
    "text": "we don't have to process that thing three times in a row we can just rely on the work you D duplicating the items for",
    "start": "810040",
    "end": "817040"
  },
  {
    "text": "us and similarly we uh don't have to reason about concurrency in the",
    "start": "817040",
    "end": "822279"
  },
  {
    "text": "processing of these objects because there's some guarantee in the work you here that the the reference of one",
    "start": "822279",
    "end": "829079"
  },
  {
    "text": "object is only going to be processed uh once concurrently so the code is simple",
    "start": "829079",
    "end": "834720"
  },
  {
    "text": "as well we don't need to take care of uh parallelism and race conditions",
    "start": "834720",
    "end": "841040"
  },
  {
    "text": "so it's nice it does a lot for us it also makes sure all the objects we need to reconcile are always reconcile",
    "start": "841480",
    "end": "848160"
  },
  {
    "text": "because at startup it's going to sort of reprocess the world automatically uh so",
    "start": "848160",
    "end": "854240"
  },
  {
    "text": "we know that we run things in the this area sort of State",
    "start": "854240",
    "end": "859880"
  },
  {
    "text": "basically um so I said we use controllers a lot um but we have a bunch",
    "start": "861160",
    "end": "867160"
  },
  {
    "text": "of services that we call the global controllers that run in This Global cluster here that are a bit special they",
    "start": "867160",
    "end": "873279"
  },
  {
    "text": "are not like regular kubernetes controllers like not like the ones you're used",
    "start": "873279",
    "end": "878639"
  },
  {
    "text": "to um you see for example in this diagram that they push stuff to",
    "start": "878639",
    "end": "884240"
  },
  {
    "text": "different kuun clusters so they don't like manipulate the actual state",
    "start": "884240",
    "end": "889600"
  },
  {
    "text": "in the current communties cluster rather than they do that in in different",
    "start": "889600",
    "end": "895199"
  },
  {
    "text": "clusters um so an example of of of a global controller for us is what we call the project controller so remember I",
    "start": "895680",
    "end": "902440"
  },
  {
    "text": "said when a user creates a project on elastic Cloud they would talk to what we call the project API that project API is",
    "start": "902440",
    "end": "910279"
  },
  {
    "text": "going to store the project information somewhere and then asynchronously we have a project controller that is going",
    "start": "910279",
    "end": "915560"
  },
  {
    "text": "to read what project should be created and that it's going to make sure that",
    "start": "915560",
    "end": "921519"
  },
  {
    "text": "this project is reconciled which for us means that project controller is going to make a scheduling decision of where",
    "start": "921519",
    "end": "929360"
  },
  {
    "text": "those elastic search PS are going to be located like on which kuet cluster and it's going to create some",
    "start": "929360",
    "end": "935319"
  },
  {
    "text": "custom resources in that particular cluster so some other controllers can",
    "start": "935319",
    "end": "940600"
  },
  {
    "text": "then take care of orchestrating elastics such in that cluster so conceptually it's very much",
    "start": "940600",
    "end": "946759"
  },
  {
    "text": "like a normal cun controller right like there's a desired State somewhere there's the actual State somewhere else",
    "start": "946759",
    "end": "952079"
  },
  {
    "text": "and there's a Reconciliation logic um however in our case there's",
    "start": "952079",
    "end": "959160"
  },
  {
    "text": "there's something that was bugging us a little bit which is that um because that thing looks like a",
    "start": "959160",
    "end": "965720"
  },
  {
    "text": "kubernetes controller we're very tempted to make it work with kubernetes um so",
    "start": "965720",
    "end": "971480"
  },
  {
    "text": "the desired state would be stalled in the API server",
    "start": "971480",
    "end": "976920"
  },
  {
    "text": "um but it's not particularly great in that case because remember we say we want to treat kubernetes clusters as",
    "start": "976920",
    "end": "982440"
  },
  {
    "text": "disposable so what if we lose thatd States and we lose the API server and",
    "start": "982440",
    "end": "987759"
  },
  {
    "text": "like where is the data basically how do we know which projects exist on the platform and that's complicated so we we",
    "start": "987759",
    "end": "994959"
  },
  {
    "text": "thought a little bit about it and I think in the end we quickly decided that we don't want to store our big data that",
    "start": "994959",
    "end": "1003639"
  },
  {
    "text": "is the source of Truth in ATD we want to store it somewhere else and there are a lot of nice properties that different",
    "start": "1003639",
    "end": "1009480"
  },
  {
    "text": "data stores uh provide to us like if you look at the very recent um features in Google spanner or",
    "start": "1009480",
    "end": "1018079"
  },
  {
    "text": "Asia Cosmos DB for example they have very very high um guarantees around",
    "start": "1018079",
    "end": "1023639"
  },
  {
    "text": "multi- region replication and if an entire region dies you immediately make",
    "start": "1023639",
    "end": "1029079"
  },
  {
    "text": "use of the other region and the replication is synchronous so there's a lot of benefits in",
    "start": "1029079",
    "end": "1034240"
  },
  {
    "text": "that um Additionally the the the data we are talking about here is like the",
    "start": "1034240",
    "end": "1040400"
  },
  {
    "text": "configurations of hundred thousands of projects and that's the same here we",
    "start": "1040400",
    "end": "1046199"
  },
  {
    "text": "don't really want to put that much data in it because maybe it's going to have to fit in Ram like maybe not but it's",
    "start": "1046199",
    "end": "1052039"
  },
  {
    "text": "going to be complicated and it would be nice to also do SQL queries on that data to serve the",
    "start": "1052039",
    "end": "1058160"
  },
  {
    "text": "needs of other apis Etc so anyway we decided let's not store",
    "start": "1058160",
    "end": "1064600"
  },
  {
    "text": "that data in ATV let's U put that somewhere",
    "start": "1064600",
    "end": "1068919"
  },
  {
    "text": "else but quickly we get into other problems because we we're used to develop controllers that work with the",
    "start": "1072360",
    "end": "1077679"
  },
  {
    "text": "API server so it's one thing to put the data somewhere else but we still want to have",
    "start": "1077679",
    "end": "1084880"
  },
  {
    "text": "controllers and the API server does provide quite a few things that we like um it provides this crd",
    "start": "1084880",
    "end": "1093000"
  },
  {
    "text": "mechanism sorry and we can deal with the version of those crds um it provides our",
    "start": "1093000",
    "end": "1098320"
  },
  {
    "text": "back to those objects so we don't need to care about this um it's easy to build",
    "start": "1098320",
    "end": "1103799"
  },
  {
    "text": "controllers with it so we we try to think about how we would um um still",
    "start": "1103799",
    "end": "1110159"
  },
  {
    "text": "sort of apply some of these properties but not by using the API server directly",
    "start": "1110159",
    "end": "1116320"
  },
  {
    "text": "um and and we brainstorm a little bit about many solutions to this uh those",
    "start": "1116320",
    "end": "1122039"
  },
  {
    "text": "brainstorms are the best thing like you sit in a room there's a white B and you leave at the end of the day knowing you",
    "start": "1122039",
    "end": "1127440"
  },
  {
    "text": "find a solution uh it's the the the best thing after French wine I guess um and",
    "start": "1127440",
    "end": "1133880"
  },
  {
    "text": "so we have several ideas we we thought maybe we should just propagate and duplicate those entities from our",
    "start": "1133880",
    "end": "1140000"
  },
  {
    "text": "database somewhere into the K API server where we run our controllers then we run",
    "start": "1140000",
    "end": "1145200"
  },
  {
    "text": "into the Troubles of how do we uh duplicate that data is it a synchronous",
    "start": "1145200",
    "end": "1150280"
  },
  {
    "text": "then do we have consistency issues and things like that and then we thought maybe we should",
    "start": "1150280",
    "end": "1155760"
  },
  {
    "text": "sort of still run the kuar API server would we just plug it to a different",
    "start": "1155760",
    "end": "1161039"
  },
  {
    "text": "data store and I think that's what some projects achieve um I think if you've",
    "start": "1161039",
    "end": "1166760"
  },
  {
    "text": "looked at k for example K is doing that is sort of allowing you to plug post",
    "start": "1166760",
    "end": "1172320"
  },
  {
    "text": "grass behind the API server uh there's also this interesting kcp project uh that you may want to look",
    "start": "1172320",
    "end": "1179600"
  },
  {
    "text": "at um but we were still not entirely sure there was the way to go and whether",
    "start": "1179600",
    "end": "1185240"
  },
  {
    "text": "the API server is really what we needed here and in the end I think we decided",
    "start": "1185240",
    "end": "1190280"
  },
  {
    "text": "to sort of do our own thing so we would do without the API server we would do",
    "start": "1190280",
    "end": "1195720"
  },
  {
    "text": "differently um so I think we end up with a pattern where for most of those global",
    "start": "1195720",
    "end": "1202200"
  },
  {
    "text": "controllers we have we also have an API that comes along with it so that API sort of replaces the API server for a",
    "start": "1202200",
    "end": "1209320"
  },
  {
    "text": "particular type of object and we we separate the database access uh so different services and access the same",
    "start": "1209320",
    "end": "1216880"
  },
  {
    "text": "table and and with this we actually sort of um",
    "start": "1216880",
    "end": "1222200"
  },
  {
    "text": "replaced what we were interested in that the API server provided by our our own custom tooling um um so we have we",
    "start": "1222200",
    "end": "1230360"
  },
  {
    "text": "developed a bunch of libraries to access the data store to deal with schema migration in the data store um backward",
    "start": "1230360",
    "end": "1237480"
  },
  {
    "text": "compatibility and things like that some API utilities to for those API services",
    "start": "1237480",
    "end": "1243159"
  },
  {
    "text": "to provide a watch endpoint uh sort of streaming data from the data store um and decentralized controlled",
    "start": "1243159",
    "end": "1251679"
  },
  {
    "text": "access we can actually use very easily do with mutual TLS and kubernetes and we're using cbin for authorization",
    "start": "1251679",
    "end": "1258039"
  },
  {
    "text": "between servic so that was actually not too hard and and I think it did bring us some um",
    "start": "1258039",
    "end": "1264200"
  },
  {
    "text": "flexibility in the API as well because the the community API model",
    "start": "1264200",
    "end": "1269960"
  },
  {
    "text": "of custom resources is is kind of nice but whenever there's a case where you need a slightly different type of API",
    "start": "1269960",
    "end": "1276880"
  },
  {
    "text": "maybe something that is slightly imperative rather than completely declarative or maybe something where the",
    "start": "1276880",
    "end": "1283360"
  },
  {
    "text": "payload for updating a resource should be different than the one to create a resource or to get resource then we sort",
    "start": "1283360",
    "end": "1290840"
  },
  {
    "text": "of have that flexibility that that that we needed as well um yeah so it was a little bit more",
    "start": "1290840",
    "end": "1297960"
  },
  {
    "text": "work but I think for us it was actually the right thing to",
    "start": "1297960",
    "end": "1303200"
  },
  {
    "text": "do um but the last bit is making this work with the controller runtime Library U which is what we wanted to do with",
    "start": "1303200",
    "end": "1309840"
  },
  {
    "text": "these controllers and it turned out that that was actually quite easy um so plug our",
    "start": "1309840",
    "end": "1318919"
  },
  {
    "text": "controllers to a different data source is just something you can natively do with controller runtime so you you",
    "start": "1318919",
    "end": "1324559"
  },
  {
    "text": "create a regular kubernetes controller um you create a go Channel which is sort of the source of the",
    "start": "1324559",
    "end": "1331520"
  },
  {
    "text": "events that you want to fit the controller with and you just populate",
    "start": "1331520",
    "end": "1337000"
  },
  {
    "text": "that go Channel with another source and in our case we're populating that go Channel with watches that come from our",
    "start": "1337000",
    "end": "1344080"
  },
  {
    "text": "own custom API which itself serves data from the watch endpoint of our data store",
    "start": "1344080",
    "end": "1350000"
  },
  {
    "text": "and then there's the regular reconcile function U that takes a request as parameter and from that request we",
    "start": "1350000",
    "end": "1356559"
  },
  {
    "text": "retrieve the ID of the object to reconcile and it basically works like a kubernetes controller but uh the state",
    "start": "1356559",
    "end": "1363640"
  },
  {
    "text": "is not in the API",
    "start": "1363640",
    "end": "1366520"
  },
  {
    "text": "server so things worked fine uh it was very easy to sort of hack around and and",
    "start": "1368919",
    "end": "1376080"
  },
  {
    "text": "make things worse uh but we we started doing like scale tests we wanted to scale the thing",
    "start": "1376080",
    "end": "1383240"
  },
  {
    "text": "to 300,000 resources to reconcile 300,000",
    "start": "1383240",
    "end": "1388559"
  },
  {
    "text": "projects in our case and remember one one thing I said",
    "start": "1388559",
    "end": "1393960"
  },
  {
    "text": "is is that whenever the controller restarts it's going to reprocess the entire world by",
    "start": "1393960",
    "end": "1399159"
  },
  {
    "text": "default and it it's something we want to do because maybe there's a new event",
    "start": "1399159",
    "end": "1404480"
  },
  {
    "text": "that um need to be processed that happen right before the controller crashed or",
    "start": "1404480",
    "end": "1409880"
  },
  {
    "text": "restarted so we don't want to miss that event so we need to process everything at at startup in doubt but also we want",
    "start": "1409880",
    "end": "1416480"
  },
  {
    "text": "to make sure that everything has been re reconciled at least once with the latest version of the code of the controller",
    "start": "1416480",
    "end": "1422840"
  },
  {
    "text": "because maybe the reason why we restarted the controller is that we made we made a change to its code so there's",
    "start": "1422840",
    "end": "1429000"
  },
  {
    "text": "more logic now so we need to run it game and like how do you deal with",
    "start": "1429000",
    "end": "1437200"
  },
  {
    "text": "300,000 it it to reconcile well you can throw more workers at it so you process",
    "start": "1437200",
    "end": "1443240"
  },
  {
    "text": "them in parallel by batches of a thousand for example um that's one way",
    "start": "1443240",
    "end": "1449039"
  },
  {
    "text": "so we we tried that um so the controller like sort of",
    "start": "1449039",
    "end": "1455000"
  },
  {
    "text": "looks like that at startup uh there's this massive amount of stuff that needs to be",
    "start": "1455000",
    "end": "1461000"
  },
  {
    "text": "reconciled and uh the CBU of the machine is like a a German call right it's like",
    "start": "1461000",
    "end": "1468159"
  },
  {
    "text": "it's going very high um one of the worst thing for us",
    "start": "1468159",
    "end": "1475120"
  },
  {
    "text": "was the database because even if we have a database that can scale very well um",
    "start": "1475120",
    "end": "1483720"
  },
  {
    "text": "we suddenly started to throw thousands of requests per second at it so started getting a lot of 429s",
    "start": "1483720",
    "end": "1492480"
  },
  {
    "text": "from the database but I think the worst experience was the impact on the",
    "start": "1492480",
    "end": "1499480"
  },
  {
    "text": "user so the user here is a real customer and what happens is that maybe that user",
    "start": "1499480",
    "end": "1507360"
  },
  {
    "text": "is um creating a new project right in the middle of the",
    "start": "1507360",
    "end": "1513600"
  },
  {
    "text": "controller just restarting and when the controller restarts it has 100,000 stuff",
    "start": "1513600",
    "end": "1519880"
  },
  {
    "text": "in the work que and so that new project that the user created it it gets at the end of the work que at this moment and",
    "start": "1519880",
    "end": "1526520"
  },
  {
    "text": "so if it takes 10 minutes to process the work q that new project is going to be created in 10 minutes and that sucks we",
    "start": "1526520",
    "end": "1533279"
  },
  {
    "text": "don't want that uh so again let's get together take",
    "start": "1533279",
    "end": "1539000"
  },
  {
    "text": "a white bu think about it a little bit um and I think what we ended up is sort",
    "start": "1539000",
    "end": "1545360"
  },
  {
    "text": "of realizing that we really have two different kinds of reconciliations that we want our controllers to do there's",
    "start": "1545360",
    "end": "1552919"
  },
  {
    "text": "what we call the high priority reconciliations so that's when we know",
    "start": "1552919",
    "end": "1558600"
  },
  {
    "text": "for sure there's actually been a change to a particular resource maybe because it has been newly created or maybe",
    "start": "1558600",
    "end": "1563960"
  },
  {
    "text": "because there's been an update to it and this we want to process as soon as possible so our users can be",
    "start": "1563960",
    "end": "1570480"
  },
  {
    "text": "happy and then there's the low priority reconciliations so those are for stuff",
    "start": "1570480",
    "end": "1575640"
  },
  {
    "text": "that we know we've successfully reconciled before we just want to reconcile again because maybe there's a",
    "start": "1575640",
    "end": "1581080"
  },
  {
    "text": "new version of the controller code so normally nothing should be broken right it's just that we we still want to",
    "start": "1581080",
    "end": "1587760"
  },
  {
    "text": "reconcil again in in doubt but that can happen slowly over",
    "start": "1587760",
    "end": "1593120"
  },
  {
    "text": "time um so figuring out how to divide this thing",
    "start": "1593120",
    "end": "1599640"
  },
  {
    "text": "between low and high priority is actually easy um what we did was introduce a new field",
    "start": "1599640",
    "end": "1605640"
  },
  {
    "text": "in our objects that we call revision and another one that we call last reconcile revision so whenever we",
    "start": "1605640",
    "end": "1612399"
  },
  {
    "text": "are completely done with the reconciliation we would update the last reconcile revision with the version of",
    "start": "1612399",
    "end": "1617640"
  },
  {
    "text": "the revision at the time the resource was processed and we know if something is high priority by just comparing these",
    "start": "1617640",
    "end": "1624320"
  },
  {
    "text": "two revisions right so if the new revision which has been increased because of a resource update is not the",
    "start": "1624320",
    "end": "1630880"
  },
  {
    "text": "same as the last reconcile revision we know for sure that this entity is pending some changes so we need to",
    "start": "1630880",
    "end": "1637480"
  },
  {
    "text": "reconcile it as soon as possible um naming is hard right U but I",
    "start": "1637480",
    "end": "1644399"
  },
  {
    "text": "think this is highly inspired from this concept of generation observe generation in in kubernetes",
    "start": "1644399",
    "end": "1652200"
  },
  {
    "text": "deployments um and then with the controller run time it's very easy to plug our own event handler like remember",
    "start": "1652799",
    "end": "1659880"
  },
  {
    "text": "this watch from the step that comes from the database uh we plug an event handler to it and what we had to change is that",
    "start": "1659880",
    "end": "1666880"
  },
  {
    "text": "the event that we receive now contains the entire object rather than just the a",
    "start": "1666880",
    "end": "1672320"
  },
  {
    "text": "of that object so then we can inspect from the object itself the the difference between the revisions and",
    "start": "1672320",
    "end": "1679360"
  },
  {
    "text": "there we can make a decision whether that's a high priority thing so we just",
    "start": "1679360",
    "end": "1684399"
  },
  {
    "text": "push it to the controller work or whether that's a low priority thing so we push it somewhere else and in our",
    "start": "1684399",
    "end": "1691440"
  },
  {
    "text": "case we push it in what we call the the low priority work what's the low priority",
    "start": "1691440",
    "end": "1697640"
  },
  {
    "text": "workc uh that's another little thing we twiced in those controllers",
    "start": "1697640",
    "end": "1702840"
  },
  {
    "text": "so the green box that you see controller work is the regular KU this work Que in",
    "start": "1702840",
    "end": "1709720"
  },
  {
    "text": "the controller I think what we added is another work que so we run two work cues",
    "start": "1709720",
    "end": "1715919"
  },
  {
    "text": "now and that's just a standard work que um except we consider it has low",
    "start": "1715919",
    "end": "1721840"
  },
  {
    "text": "priority so we would immediately add pretty much all the events that start up in that low priority work at least the",
    "start": "1721840",
    "end": "1728080"
  },
  {
    "text": "ones that don't need to be immediately U reconciled uh but we have the red box",
    "start": "1728080",
    "end": "1733840"
  },
  {
    "text": "here that is going to consume that extra work que at a fixed rate so maybe we have 100,000 events in the queue but",
    "start": "1733840",
    "end": "1741399"
  },
  {
    "text": "that that red consumer is going to consume those events at a rate of 10 per second maybe and it's going to add them",
    "start": "1741399",
    "end": "1747919"
  },
  {
    "text": "to the main work CU and and and the logic here can be even a little bit smarter than that because before it it",
    "start": "1747919",
    "end": "1754840"
  },
  {
    "text": "adds them to the to the regular work it can check the size of that regular work CU and only decide to add the low",
    "start": "1754840",
    "end": "1761559"
  },
  {
    "text": "priority items if the main work is not already I don't know uh made of more",
    "start": "1761559",
    "end": "1768799"
  },
  {
    "text": "than 50 items for example and because this this Yellow",
    "start": "1768799",
    "end": "1774000"
  },
  {
    "text": "Boxes a regular controller work que we sort of benefit from the same sort of",
    "start": "1774000",
    "end": "1780039"
  },
  {
    "text": "prometheous metrix that we have for the regular work CU so we can compare the depth of the queue for the low priority",
    "start": "1780039",
    "end": "1786120"
  },
  {
    "text": "stuff and the high priority stuff so it's it's very convenient um the code itself is really",
    "start": "1786120",
    "end": "1792799"
  },
  {
    "text": "not that complicated um I'm not going to go through it but you can uh look at the",
    "start": "1792799",
    "end": "1798039"
  },
  {
    "text": "slides there on the website all right I think we are already",
    "start": "1798039",
    "end": "1804320"
  },
  {
    "text": "at the end I'm going to startop here on the controller stuff there's a lot more",
    "start": "1804320",
    "end": "1809600"
  },
  {
    "text": "I can talk about about how we rebuil this um Cloud architecture based on",
    "start": "1809600",
    "end": "1814720"
  },
  {
    "text": "communities like how we do continuous deployment for example we do that based on Aro CD plus some custom tooling on",
    "start": "1814720",
    "end": "1820720"
  },
  {
    "text": "top uh this been presentation on Monday about it that you should check out on YouTube when it's available uh my team",
    "start": "1820720",
    "end": "1827320"
  },
  {
    "text": "here on the front um of course we used the elastic solution for observability and then we",
    "start": "1827320",
    "end": "1834480"
  },
  {
    "text": "we had to implement a lot of stuff like we do custom Moto scaling of the elastic search pods um we provision our kuties",
    "start": "1834480",
    "end": "1841399"
  },
  {
    "text": "clusters with crossplane and well there there's a lot so if you're interested in",
    "start": "1841399",
    "end": "1847120"
  },
  {
    "text": "any of this I'm happy to talk about it I'm going to be in the hallway probably after the",
    "start": "1847120",
    "end": "1853159"
  },
  {
    "text": "presentation and I guess that's it thanks everyone",
    "start": "1853159",
    "end": "1859919"
  },
  {
    "text": "I think I have like three minutes for questions and then I'm going to be in the round if you want to ask questions",
    "start": "1866679",
    "end": "1872440"
  },
  {
    "text": "after we're done so anybody that wants to ask questions there are microphones I think on on these two places I'm",
    "start": "1872440",
    "end": "1878960"
  },
  {
    "text": "pointing at yeah hello um I'm George from graan Labs I have a question",
    "start": "1878960",
    "end": "1885000"
  },
  {
    "text": "regarding memory so you mentioned that your adding the full objects to your",
    "start": "1885000",
    "end": "1890399"
  },
  {
    "text": "work cues so if you have a work cues with hundreds of thousands of objects",
    "start": "1890399",
    "end": "1895440"
  },
  {
    "text": "this can quickly grow in terms of memory so we especially if you have multiple",
    "start": "1895440",
    "end": "1900760"
  },
  {
    "text": "parts so how do you manage that so we don't add the the full object to the work in the work we only keep the the ID",
    "start": "1900760",
    "end": "1907279"
  },
  {
    "text": "of the object we use the full objects in the event handler before we push to the work",
    "start": "1907279",
    "end": "1913519"
  },
  {
    "text": "CU so as we are streaming changes we get the full object but then we immediately",
    "start": "1913519",
    "end": "1919000"
  },
  {
    "text": "get rid of it and we just put the ID in the work so there is no local cache on the exactly there's no local cach",
    "start": "1919000",
    "end": "1925919"
  },
  {
    "text": "yeah thanks yeah thank you David um do you",
    "start": "1925919",
    "end": "1931519"
  },
  {
    "text": "have any plan to contribute this low priority queue back to the controll controller runtime Library uh possibly",
    "start": "1931519",
    "end": "1939720"
  },
  {
    "text": "yeah we need to think about it a little bit um it's actually not that easy to",
    "start": "1939720",
    "end": "1944760"
  },
  {
    "text": "configure controller run time to swap the underlying work so we hacked around a little bit to make this happen so yeah",
    "start": "1944760",
    "end": "1952240"
  },
  {
    "text": "I think quite likely what's going to happen is we're going to open an issue on the controller rtime repo to mention this and and yeah that makes sense to",
    "start": "1952240",
    "end": "1959000"
  },
  {
    "text": "contribute the work Cube absolutely it's not a lot of code so",
    "start": "1959000",
    "end": "1964159"
  },
  {
    "text": "yeah uh hi yeah so when your Global controller launch a new community",
    "start": "1964519",
    "end": "1972559"
  },
  {
    "text": "cluster I guess it may need to provision some machine or some Cloud resource",
    "start": "1972559",
    "end": "1978399"
  },
  {
    "text": "then it may also install like uh some",
    "start": "1978399",
    "end": "1983679"
  },
  {
    "text": "CTIC components like a certificate manager or Ingress controller so what",
    "start": "1983679",
    "end": "1989080"
  },
  {
    "text": "kind of tool do you use to automate these kind of things so we like separate",
    "start": "1989080",
    "end": "1994600"
  },
  {
    "text": "to this process of provisioning projects we have an entire set of tooling to",
    "start": "1994600",
    "end": "2000279"
  },
  {
    "text": "provision kubernetes clusters right so we use crossplane for that to provision the Clusters themselves we have logic",
    "start": "2000279",
    "end": "2007480"
  },
  {
    "text": "around and having thresholds to detect when we need to provision new clusters because the existing ones are full and",
    "start": "2007480",
    "end": "2013840"
  },
  {
    "text": "then we use Helm and Aro CD to deploy all the services automatically in those clusters and then each of the cluster is",
    "start": "2013840",
    "end": "2020960"
  },
  {
    "text": "autoscale with cluster autoscaler automatically I see so you cross plan",
    "start": "2020960",
    "end": "2027240"
  },
  {
    "text": "and the hel this kind of thing yeah okay cool thank",
    "start": "2027240",
    "end": "2032880"
  },
  {
    "text": "you hi when you were considering the issue uh about the global controller did",
    "start": "2033200",
    "end": "2039600"
  },
  {
    "text": "you consider the kubernetes API aggregation layer um yes",
    "start": "2039600",
    "end": "2048638"
  },
  {
    "text": "although like remember one of the important thing for us here is that we don't want to use ATD as our data store",
    "start": "2048639",
    "end": "2055040"
  },
  {
    "text": "so yeah but with the API agregation layer you could have just implemented taken all of the advantages of the",
    "start": "2055040",
    "end": "2061398"
  },
  {
    "text": "kubernets API but have your own API aggregator storing objects on a SQL dat",
    "start": "2061399",
    "end": "2067158"
  },
  {
    "text": "Bas is not CD and having controllers reconciling those objects right yeah so",
    "start": "2067159",
    "end": "2072200"
  },
  {
    "text": "we we thought about this when we thought about using for example I think we we",
    "start": "2072200",
    "end": "2077720"
  },
  {
    "text": "realized that the API server abstraction like those uh CDs and how we interact",
    "start": "2077720",
    "end": "2084398"
  },
  {
    "text": "with them that was actually not good enough for us we wanted to do SQL queries for example on that data uh we",
    "start": "2084399",
    "end": "2091839"
  },
  {
    "text": "wanted to have different kind of transactions and things like that so the the actual Primitives of the this API",
    "start": "2091839",
    "end": "2098520"
  },
  {
    "text": "like this declarative objects I think we realize it was not the the best fit for",
    "start": "2098520",
    "end": "2104079"
  },
  {
    "text": "us but if you're a aggregator were starting the state on a SQL database instead of the CD you could have as well",
    "start": "2104079",
    "end": "2111520"
  },
  {
    "text": "done all of that on a SQL database right yeah yeah but I mean you if you put the",
    "start": "2111520",
    "end": "2117520"
  },
  {
    "text": "API server in front you you can you can do credit operations on these objects basically right but you can do you",
    "start": "2117520",
    "end": "2124839"
  },
  {
    "text": "cannot do things that are more specific specific than that like you know this thing about maybe your update endpoint",
    "start": "2124839",
    "end": "2131320"
  },
  {
    "text": "is different from your create endpoint and things like that so all those extra things I think we benefited from not",
    "start": "2131320",
    "end": "2138640"
  },
  {
    "text": "using the API server itself thanks um I think we are at the end I",
    "start": "2138640",
    "end": "2145680"
  },
  {
    "text": "can still take questions around here one more you said yeah okay it's quick I was",
    "start": "2145680",
    "end": "2151160"
  },
  {
    "text": "just wondering if you were going to share the slides they already on the website if you go on the SC websites",
    "start": "2151160",
    "end": "2156960"
  },
  {
    "text": "where you can build your schedule they they show here thank you very",
    "start": "2156960",
    "end": "2161720"
  },
  {
    "text": "much",
    "start": "2163480",
    "end": "2166480"
  }
]