[
  {
    "start": "0",
    "end": "59000"
  },
  {
    "text": "so my name is Sally I'm a software engineer at Google I started on the Google kubernetes team pretty early on",
    "start": "30",
    "end": "6299"
  },
  {
    "text": "way back in December of 2014 when the team was pretty small and it was before",
    "start": "6299",
    "end": "11759"
  },
  {
    "text": "kubernetes 1.0 I was a young engineer there was a lot that I didn't know and",
    "start": "11759",
    "end": "17100"
  },
  {
    "text": "I'm not very smart so you know I didn't really pick up on the kubernetes ideas very quickly for me when I start to",
    "start": "17100",
    "end": "23910"
  },
  {
    "text": "learn things learning all the little things how to do them doesn't really work for me what I need to do is try to",
    "start": "23910",
    "end": "30539"
  },
  {
    "text": "understand why things work the way that they do and that kind of sticks better in my head and so I recognized some",
    "start": "30539",
    "end": "37050"
  },
  {
    "text": "patterns that I've seen in kubernetes and that kind of helped me understand the API and understand how kubernetes",
    "start": "37050",
    "end": "43649"
  },
  {
    "text": "works a lot better at least for me so I was hoping to share some of that with you today for a lot of you this may be",
    "start": "43649",
    "end": "50280"
  },
  {
    "text": "material that you're already familiar with but it's interesting just to call it out and recognize it and see it apply",
    "start": "50280",
    "end": "57390"
  },
  {
    "text": "to future patterns so what's in it for me a deeper understanding of kubernetes",
    "start": "57390",
    "end": "63710"
  },
  {
    "start": "59000",
    "end": "59000"
  },
  {
    "text": "again an important tool for learning is to understand the problem the why not",
    "start": "63710",
    "end": "70350"
  },
  {
    "text": "just the what if you get a large collection of what's it's impossible to",
    "start": "70350",
    "end": "75659"
  },
  {
    "text": "memorize everything but if you understand the fundamentals of how things work then it's easy to extrapolate and under you know come up",
    "start": "75659",
    "end": "81930"
  },
  {
    "text": "with your own understanding of how things should work and that can lead you pretty far what is kubernetes I think",
    "start": "81930",
    "end": "90689"
  },
  {
    "text": "most people in this room probably probably already are familiar with that by a show of hands how many of you know",
    "start": "90689",
    "end": "96420"
  },
  {
    "text": "what communities is all right good how many of you have deployed a pod in production all right good",
    "start": "96420",
    "end": "105000"
  },
  {
    "text": "well just to recap and set the stage I want to introduce what the problem space",
    "start": "105000",
    "end": "110189"
  },
  {
    "text": "was that we were working with you know before kubernetes was a thing before docker was a thing folks were running",
    "start": "110189",
    "end": "117149"
  },
  {
    "text": "distributed systems largely either on bare metal or in virtual machines when containerization started to take off it",
    "start": "117149",
    "end": "124380"
  },
  {
    "text": "provided a way to be able to do consistent repeatable reliable deployments you could have multiple",
    "start": "124380",
    "end": "130259"
  },
  {
    "text": "applications coexist on the same machines and not have to worry about their dependencies colliding for example",
    "start": "130259",
    "end": "137930"
  },
  {
    "text": "but you know containers are great but you have to figure out how to actually deploy those containers at scale and",
    "start": "137930",
    "end": "144569"
  },
  {
    "text": "that's where kubernetes came in you didn't want to get into the business of actually writing your own system to be",
    "start": "144569",
    "end": "150389"
  },
  {
    "text": "able to you know SSH into every machine and start a docker container and write some monitoring service to monitor those",
    "start": "150389",
    "end": "156599"
  },
  {
    "text": "containers so kubernetes really filled that niche well let's take a step back",
    "start": "156599",
    "end": "164459"
  },
  {
    "text": "and talk about the very fundamental operations in kubernetes so how do you deploy a workload on kubernetes when I",
    "start": "164459",
    "end": "172650"
  },
  {
    "text": "first came to kubernetes my understanding was kind of based on my previous knowledge which was very much a",
    "start": "172650",
    "end": "178319"
  },
  {
    "text": "you know there is two entities and there's a master and a slave and the master tells the slave what to do in",
    "start": "178319",
    "end": "185010"
  },
  {
    "text": "this case you know you have a user a user wants to start a container the",
    "start": "185010",
    "end": "190169"
  },
  {
    "text": "model in my head traditionally would be they pick a machine and they say start you know this container on that machine",
    "start": "190169",
    "end": "198079"
  },
  {
    "text": "of course there's a set of problems with this approach what happens if that",
    "start": "198079",
    "end": "203849"
  },
  {
    "text": "container crashes so this was the model that I was talking about before kubernetes where if you were SSH into",
    "start": "203849",
    "end": "210959"
  },
  {
    "text": "machines and starting your container that container died or that node died or you know for some reason that SSH",
    "start": "210959",
    "end": "217260"
  },
  {
    "text": "connection dropped for a second and you weren't able to actually get that container started what happens you have",
    "start": "217260",
    "end": "222900"
  },
  {
    "text": "to write a lot of custom recovery logic to monitor your service monitor your",
    "start": "222900",
    "end": "228209"
  },
  {
    "text": "application and then you have to take recovery action so if you know the service isn't behaving as you expect it",
    "start": "228209",
    "end": "234870"
  },
  {
    "text": "to you'd have to write custom logic to recover it and so you're writing a lot of custom logic just to keep your",
    "start": "234870",
    "end": "240870"
  },
  {
    "text": "application running so this is where the first principle of kubernetes comes in",
    "start": "240870",
    "end": "246930"
  },
  {
    "start": "243000",
    "end": "243000"
  },
  {
    "text": "and that is that the kubernetes api is declarative rather than imperative so in",
    "start": "246930",
    "end": "252299"
  },
  {
    "text": "kubernetes you do not tell the system start this container on this machine",
    "start": "252299",
    "end": "258620"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "instead used to define the desired state you say that I want to have a container",
    "start": "258620",
    "end": "264539"
  },
  {
    "text": "running please make it so this is the difference between for example a pilot flying a an airplane",
    "start": "264539",
    "end": "273270"
  },
  {
    "text": "themselves versus setting an autopilot when they're flying the plane themselves they're constantly providing input",
    "start": "273270",
    "end": "279810"
  },
  {
    "text": "they're monitoring their trying to figure out where it should go when they set an autopilot the computer takes over",
    "start": "279810",
    "end": "285120"
  },
  {
    "text": "and there's control systems that monitor and make sure that whatever the requested altitude is maintained so you",
    "start": "285120",
    "end": "290940"
  },
  {
    "text": "can think of the declarative API in a similar way it's a way to say this is what I want my intended state to look",
    "start": "290940",
    "end": "297060"
  },
  {
    "text": "like please make it so and the difference is basically this is what kubernetes is all about instead of",
    "start": "297060",
    "end": "304890"
  },
  {
    "text": "having to provide a set of instructions and monitor things and then provide more instructions you just say make this",
    "start": "304890",
    "end": "310440"
  },
  {
    "text": "happen and that's the basis of kubernetes so let's get a little bit",
    "start": "310440",
    "end": "319020"
  },
  {
    "text": "more concrete the way that you create or do anything in the kubernetes api is that you create an API object that is",
    "start": "319020",
    "end": "326220"
  },
  {
    "text": "persisted on the cube api server until you delete it and all the components within kubernetes will work in parallel",
    "start": "326220",
    "end": "333030"
  },
  {
    "text": "to drive towards that state so for example when you want to get a workload running you can use one of the basic",
    "start": "333030",
    "end": "339660"
  },
  {
    "text": "primitives the replica set which many of you are probably familiar with that says I want to create a container maybe an",
    "start": "339660",
    "end": "347340"
  },
  {
    "text": "engine X container and I want one replica that running across my system once that object is created the system",
    "start": "347340",
    "end": "354780"
  },
  {
    "text": "kind of figures out what needs to be done next and schedules the workload",
    "start": "354780",
    "end": "360240"
  },
  {
    "text": "appropriately and gets it started you're pretty much hands-off at that point you don't need to go in and monitor the",
    "start": "360240",
    "end": "366810"
  },
  {
    "text": "status of your workloads that all kubernetes will take care of it and what",
    "start": "366810",
    "end": "372780"
  },
  {
    "start": "371000",
    "end": "371000"
  },
  {
    "text": "is the benefit of this approach this declarative approach and the primary benefit is automatic recovery meaning if",
    "start": "372780",
    "end": "380400"
  },
  {
    "text": "something happens to your application if the application crashes if the node crashes kubernetes will automatically",
    "start": "380400",
    "end": "388080"
  },
  {
    "text": "take care of recovering that application for you moving it around so now let's",
    "start": "388080",
    "end": "395840"
  },
  {
    "start": "393000",
    "end": "393000"
  },
  {
    "text": "revisit this or deep dive into this a little bit more so what act Tooley happens when you create a replica",
    "start": "395840",
    "end": "402659"
  },
  {
    "text": "object on the kubernetes api server you say I want a pod of you know a certain",
    "start": "402659",
    "end": "410849"
  },
  {
    "text": "definition created on my cluster how does the node figure out that it's",
    "start": "410849",
    "end": "417000"
  },
  {
    "text": "supposed to be running this does the master tell it like how does all of that work my natural inclination would be",
    "start": "417000",
    "end": "423930"
  },
  {
    "text": "that since you have a master the master would figure out which node this particular workload would be scheduled",
    "start": "423930",
    "end": "429870"
  },
  {
    "text": "on and then it would just call out to that node to say please start this container and that's if you look at a",
    "start": "429870",
    "end": "436259"
  },
  {
    "text": "lot of traditional you know server client setups this is the way that things work you may you issue in a",
    "start": "436259",
    "end": "442879"
  },
  {
    "text": "network RPC and the caller tells the server or the client what to do I'm",
    "start": "442879",
    "end": "451110"
  },
  {
    "text": "sorry this the client tells the server what to do and the server will execute that action in return either a success",
    "start": "451110",
    "end": "456449"
  },
  {
    "text": "or a failure so in this case that was an option the kubernetes master api server",
    "start": "456449",
    "end": "461490"
  },
  {
    "text": "could have been built in a way where it could call out to the node that it selected and say please start a",
    "start": "461490",
    "end": "468029"
  },
  {
    "text": "container but there were the same set of problems that we discussed with a user",
    "start": "468029",
    "end": "474000"
  },
  {
    "text": "manually telling you know a specific machine to start a container apply here",
    "start": "474000",
    "end": "479759"
  },
  {
    "text": "as well right think about what happens if a container",
    "start": "479759",
    "end": "485580"
  },
  {
    "text": "dies or if the node itself dies or if the node is unable to accept that",
    "start": "485580",
    "end": "492629"
  },
  {
    "text": "command at the moment that the master decided to send it that command how would it recover from that if we had",
    "start": "492629",
    "end": "499949"
  },
  {
    "text": "an imperative API where the master was calling into the nodes to tell the nodes what to do",
    "start": "499949",
    "end": "505400"
  },
  {
    "text": "that means the master would have to be infinitely more complicated the master",
    "start": "505400",
    "end": "511169"
  },
  {
    "text": "would have to begin to store the state of every single component that it was responsible for it would have to play",
    "start": "511169",
    "end": "516328"
  },
  {
    "text": "catch-up every time it discovered that these components weren't doing what they were expected to so first it's figuring",
    "start": "516329",
    "end": "522448"
  },
  {
    "text": "out what they're supposed to do understand that they're not doing what they're supposed to do and then issue",
    "start": "522449",
    "end": "527839"
  },
  {
    "text": "follow-up commands to fix that so that means that every time uber Nettie's is extended every time a",
    "start": "527839",
    "end": "534250"
  },
  {
    "text": "new component is added this master control plane grows larger and larger and larger and if kubernetes had been",
    "start": "534250",
    "end": "541209"
  },
  {
    "text": "built that way honestly I don't think it would have been very successful it would have made the master very complex",
    "start": "541209",
    "end": "547629"
  },
  {
    "text": "brittle difficult to extend so this is where the second principle of kubernetes comes in and that is that the kubernetes",
    "start": "547629",
    "end": "554829"
  },
  {
    "start": "550000",
    "end": "550000"
  },
  {
    "text": "control plane is transparent and that there are no hidden internal api's this",
    "start": "554829",
    "end": "560500"
  },
  {
    "text": "is extremely powerful for multiple reasons what does it mean actually what",
    "start": "560500",
    "end": "565720"
  },
  {
    "text": "it means is that that same declarative API that we exposed to the end users is",
    "start": "565720",
    "end": "571149"
  },
  {
    "text": "the same API that all the internal kubernetes components use to interact with each other and so the benefits of",
    "start": "571149",
    "end": "577810"
  },
  {
    "text": "that declarative API then apply to the components themselves so whereas before",
    "start": "577810",
    "end": "584529"
  },
  {
    "text": "the if we had followed the model that I was suggesting earlier where the master would call out to individual nodes to",
    "start": "584529",
    "end": "590170"
  },
  {
    "text": "tell them what to do if we follow that model you would imagine a master would have to provide a exact set of",
    "start": "590170",
    "end": "595779"
  },
  {
    "text": "instructions to say the node should do something the node would execute those instructions and return a response and",
    "start": "595779",
    "end": "603730"
  },
  {
    "text": "then the master would have to have some sort of way to monitor those nodes and then issue you know commands to rectify",
    "start": "603730",
    "end": "609130"
  },
  {
    "text": "anything that went wrong instead what happens is that the master basically",
    "start": "609130",
    "end": "614259"
  },
  {
    "text": "defines a desired state for a node to be in once the master figures out that a",
    "start": "614259",
    "end": "619540"
  },
  {
    "text": "workload should be scheduled on a particular node it will essentially state that in the API server so the",
    "start": "619540",
    "end": "626769"
  },
  {
    "text": "master just talks to the API server and then all the components including the node work independently to drive",
    "start": "626769",
    "end": "633160"
  },
  {
    "text": "themselves towards that state so let's take a look at what that looks like more concretely so the way to think about it",
    "start": "633160",
    "end": "640779"
  },
  {
    "text": "is that the kubernetes api server is the center of everything in the kubernetes world this is what you interact with but",
    "start": "640779",
    "end": "647980"
  },
  {
    "text": "it's also what every other component in kubernetes interacts with so basically what happens is that all the nodes when",
    "start": "647980",
    "end": "654459"
  },
  {
    "text": "they first come up will monitor the kubernetes api server to try and figure out what are they supposed to be doing",
    "start": "654459",
    "end": "660790"
  },
  {
    "text": "so instead of having the decision being centralized and being sent out every component is responsible for its own",
    "start": "660790",
    "end": "667170"
  },
  {
    "text": "health and keeping itself running so whenever a component comes up it goes to the API server to figure out what it",
    "start": "667170",
    "end": "674190"
  },
  {
    "text": "should be doing the benefits of this approach are that if a component crashes",
    "start": "674190",
    "end": "679680"
  },
  {
    "text": "for some reason and it comes back up it can easily recover just by looking at the API server and figuring out what",
    "start": "679680",
    "end": "684900"
  },
  {
    "text": "it's supposed to be doing this pattern is called level triggered instead of",
    "start": "684900",
    "end": "690270"
  },
  {
    "text": "edge triggered you can imagine a system that's based on events to be edge",
    "start": "690270",
    "end": "696030"
  },
  {
    "text": "triggered where you issue an event and then the system will do something but if the system is down for some reason and",
    "start": "696030",
    "end": "702720"
  },
  {
    "text": "didn't receive that event you're responsible for sending that event again versus level triggered meaning you set",
    "start": "702720",
    "end": "708420"
  },
  {
    "text": "this state and then if there's a momentary issue with any of the system",
    "start": "708420",
    "end": "714150"
  },
  {
    "text": "systems components whenever the system comes back up it can just look at what",
    "start": "714150",
    "end": "719220"
  },
  {
    "text": "the current state of the signal is and be able to operate off of that so this is the way that the kubernetes API works",
    "start": "719220",
    "end": "726090"
  },
  {
    "text": "again and let's just walk through that so you as a end user operate against the",
    "start": "726090",
    "end": "732150"
  },
  {
    "text": "same kubernetes api you declare that you want a workload running you define what that should look like and then your",
    "start": "732150",
    "end": "738510"
  },
  {
    "text": "hands off now there's a object that exists in the API server that defines",
    "start": "738510",
    "end": "745140"
  },
  {
    "text": "what should be happening and all the other components are watching the kubernetes api server going oh something",
    "start": "745140",
    "end": "751380"
  },
  {
    "text": "needs to happen here I need to make sure that I do something the scheduler is",
    "start": "751380",
    "end": "757020"
  },
  {
    "text": "just another component in kubernetes that all it does is monitor the kubernetes api server looking for",
    "start": "757020",
    "end": "762930"
  },
  {
    "text": "unscheduled pods unscheduled pods are just API objects that are of type pod",
    "start": "762930",
    "end": "768600"
  },
  {
    "text": "and don't have the node field filled in so if it finds one of those it starts executing its logic to figure out what",
    "start": "768600",
    "end": "775440"
  },
  {
    "text": "the best placement for this particular pot is going to be once it makes that determination instead of calling out to",
    "start": "775440",
    "end": "782970"
  },
  {
    "text": "that node it just updates the API object to say hey this object has now officially been scheduled to a",
    "start": "782970",
    "end": "789930"
  },
  {
    "text": "particular node and then the node that it gets scheduled to is also watching",
    "start": "789930",
    "end": "795720"
  },
  {
    "text": "for pod objects but it's filtering those pod objects too pods that match the same name as itself",
    "start": "795720",
    "end": "801839"
  },
  {
    "text": "so it's a very simple concept but very powerful and once a node recognizes that",
    "start": "801839",
    "end": "807329"
  },
  {
    "text": "there is a pod that should be scheduled to itself it can look locally and see if that the containers for that pot are",
    "start": "807329",
    "end": "814199"
  },
  {
    "text": "running or not and start the process of getting those things running and as long as that as that API object exists the",
    "start": "814199",
    "end": "822680"
  },
  {
    "text": "the node agent the cubelet can basically ensure that it's remains in that state",
    "start": "822680",
    "end": "829170"
  },
  {
    "text": "so if that application crashes for some reason and the pod indicates that it should be restarted the the the node the",
    "start": "829170",
    "end": "836579"
  },
  {
    "text": "cubelet agent can automatically do that so then when you're when you decide that",
    "start": "836579",
    "end": "842639"
  },
  {
    "text": "you don't want that workload you simply remove the API object from the master",
    "start": "842639",
    "end": "847649"
  },
  {
    "text": "and then the components see that there's a difference there's something running in the system and that doesn't",
    "start": "847649",
    "end": "854060"
  },
  {
    "text": "correspond to the desired state set by the user so all the components will work",
    "start": "854060",
    "end": "859079"
  },
  {
    "text": "to drive towards the desired state which in this case is please stop work running this workload it should not be running",
    "start": "859079",
    "end": "866990"
  },
  {
    "start": "867000",
    "end": "867000"
  },
  {
    "text": "so what are the benefits of this no hidden internal API principle I think I",
    "start": "868069",
    "end": "875430"
  },
  {
    "text": "talked a little bit about this already components that are level triggered instead of edge trigger tend to be more",
    "start": "875430",
    "end": "882089"
  },
  {
    "text": "robust especially for distributed systems where you have to expect that",
    "start": "882089",
    "end": "887100"
  },
  {
    "text": "you're gonna have so many components that make up your system something is always going to be failing and so you",
    "start": "887100",
    "end": "893759"
  },
  {
    "text": "have to design your system for reliability and tolerate be able to tolerate failure if any one of those",
    "start": "893759",
    "end": "899519"
  },
  {
    "text": "components so if your system did was edge triggered it would have to be much more complicated in order to have one",
    "start": "899519",
    "end": "906389"
  },
  {
    "text": "component constantly figure out what the state of everything should be and figure out where what it should be doing",
    "start": "906389",
    "end": "911610"
  },
  {
    "text": "instead if you distribute that responsibility to every single component",
    "start": "911610",
    "end": "917279"
  },
  {
    "text": "to figure out what that component itself should be doing it makes the system more reliable but also more extensible and",
    "start": "917279",
    "end": "925889"
  },
  {
    "text": "there is also no more single point of failure so in the previous example if",
    "start": "925889",
    "end": "931110"
  },
  {
    "text": "the master was calling out to everything if the master goes down your cluster is down in with the with a model",
    "start": "931110",
    "end": "938630"
  },
  {
    "text": "that kubernetes has with a kubernetes api server acting as a central point if the kubernetes api server goes down all",
    "start": "938630",
    "end": "945380"
  },
  {
    "text": "the components continue to operate on whatever the last date was that they saw and when the kubernetes api server comes",
    "start": "945380",
    "end": "951860"
  },
  {
    "text": "up again they can start operating on whatever the new state is and if any one of those components goes down the other",
    "start": "951860",
    "end": "958460"
  },
  {
    "text": "components can continue to function independently of that so the there is no single point of failure and the system",
    "start": "958460",
    "end": "965930"
  },
  {
    "text": "overall is more robust and it also makes",
    "start": "965930",
    "end": "973250"
  },
  {
    "text": "kubernetes very extensible and this is I think the big reason that kubernetes has become as large as it is is because it's",
    "start": "973250",
    "end": "981020"
  },
  {
    "text": "very simple to add on to it because all the components within kubernetes use the",
    "start": "981020",
    "end": "986960"
  },
  {
    "text": "same API that you used to interact with it you could swap out any one of these components with your own implementation",
    "start": "986960",
    "end": "992570"
  },
  {
    "text": "so for example if you wanted to write your own scheduler all you need to do is write a binary that is able to interact",
    "start": "992570",
    "end": "998750"
  },
  {
    "text": "with the kubernetes api server and fill in the node field of a pod object that",
    "start": "998750",
    "end": "1005680"
  },
  {
    "text": "is what a scheduler does it it looks at pod objects it runs some algorithm to",
    "start": "1005680",
    "end": "1011170"
  },
  {
    "text": "figure out where it should be run and it updates the API server so you could write a custom schedule or for",
    "start": "1011170",
    "end": "1016360"
  },
  {
    "text": "kubernetes pretty easily of course writing a custom scheduler is not an easy task of course but the the idea is",
    "start": "1016360",
    "end": "1024490"
  },
  {
    "text": "that kubernetes makes it possible and this is true for all the components that exist within the kubernetes ecosystem ok",
    "start": "1024490",
    "end": "1035439"
  },
  {
    "text": "now let's talk about some of the interesting information that exists on",
    "start": "1035440",
    "end": "1041230"
  },
  {
    "text": "the kubernetes api server we have the idea of secrets you know if you have",
    "start": "1041230",
    "end": "1048430"
  },
  {
    "text": "some sensitive information you should not be putting those inside a few containers obviously that information",
    "start": "1048430",
    "end": "1055660"
  },
  {
    "text": "should somehow be injected inside your container at runtime so that these sensitive things aren't going to be",
    "start": "1055660",
    "end": "1061510"
  },
  {
    "text": "leaked along with your container and the facility that kubernetes provides to do this is the secret API",
    "start": "1061510",
    "end": "1067400"
  },
  {
    "text": "object in kubernetes it's just another API object and you can declare a secret",
    "start": "1067400",
    "end": "1074330"
  },
  {
    "text": "give it a name and then provide set of key value fields similarly there is a way to be able to provide configuration",
    "start": "1074330",
    "end": "1080809"
  },
  {
    "text": "information to your application so for example your application may have some set of startup parameters for a",
    "start": "1080809",
    "end": "1086720"
  },
  {
    "text": "particular configuration or whatever other configuration information you may",
    "start": "1086720",
    "end": "1092120"
  },
  {
    "text": "have and downward api is another kubernetes api that allows you to fetch",
    "start": "1092120",
    "end": "1097809"
  },
  {
    "text": "basically name namespace UID pod information about the pod that this",
    "start": "1097809",
    "end": "1103460"
  },
  {
    "text": "workload is running in all of this information can be very valuable to the",
    "start": "1103460",
    "end": "1108740"
  },
  {
    "text": "application itself so how does a kubernetes application get access to",
    "start": "1108740",
    "end": "1114710"
  },
  {
    "text": "this information we talked about the fact that this kubernetes api is you",
    "start": "1114710",
    "end": "1121490"
  },
  {
    "start": "1116000",
    "end": "1116000"
  },
  {
    "text": "know it's the same api that's used by the internal components which means that",
    "start": "1121490",
    "end": "1127010"
  },
  {
    "text": "if you write an application that needs to use a secret you could basically have that application call out to the",
    "start": "1127010",
    "end": "1133280"
  },
  {
    "text": "kubernetes api server to fetch that secret and use it within your application you can also have a call out",
    "start": "1133280",
    "end": "1138830"
  },
  {
    "text": "to the kubernetes api server to fetch information about the pod that it's running in or any configuration",
    "start": "1138830",
    "end": "1145429"
  },
  {
    "text": "information from the config map api objects this is possible but it's not",
    "start": "1145429",
    "end": "1152480"
  },
  {
    "text": "necessarily the best solution because of kubernetes principle number three which",
    "start": "1152480",
    "end": "1158720"
  },
  {
    "start": "1156000",
    "end": "1156000"
  },
  {
    "text": "is meet the users where they are what we want to do with kubernetes is make it",
    "start": "1158720",
    "end": "1166309"
  },
  {
    "text": "easy for folks that already have applications running to transition into kubernetes if we required folks to",
    "start": "1166309",
    "end": "1172880"
  },
  {
    "text": "actually modify their application in order to work within kubernetes that would be a non-starter for a lot of",
    "start": "1172880",
    "end": "1178700"
  },
  {
    "text": "folks I you can you're all probably aware of some legacy application which",
    "start": "1178700",
    "end": "1184250"
  },
  {
    "text": "hasn't been touched in a very long time it knows how to consume secrets from a volume or an environment variable but",
    "start": "1184250",
    "end": "1191780"
  },
  {
    "text": "nobody's going to go in and modify that to have a new kubernetes api right so what we did was in addition to being",
    "start": "1191780",
    "end": "1199669"
  },
  {
    "text": "able to call out to the kubernetes api server there is the ability for you to consume secrets config maps and downward",
    "start": "1199669",
    "end": "1206690"
  },
  {
    "text": "api objects as files within the container or as environment variables so",
    "start": "1206690",
    "end": "1212240"
  },
  {
    "text": "as part of your pod definition you can specify please expose to my containers",
    "start": "1212240",
    "end": "1217480"
  },
  {
    "text": "this set of secrets or config map information and kubernetes will automatically make sure that that",
    "start": "1217480",
    "end": "1223549"
  },
  {
    "text": "information is either mounted in as a file into that container or as an environment variable and so your",
    "start": "1223549",
    "end": "1230330"
  },
  {
    "text": "application doesn't have to be modified as long as it knows how to read a file or read from an environment variable so",
    "start": "1230330",
    "end": "1241460"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "why did we do this and of course the reason is to minimize the hurdles for developing applications to deploy on",
    "start": "1241460",
    "end": "1249139"
  },
  {
    "text": "kubernetes we want to make it as seamless and easy to transition to kubernetes as possible again I keep",
    "start": "1249139",
    "end": "1254299"
  },
  {
    "text": "mentioning that you know there are these are the reasons why kubernetes has been",
    "start": "1254299",
    "end": "1259309"
  },
  {
    "text": "successful and I think one of the reasons is because it made it easy to transition some of the existing",
    "start": "1259309",
    "end": "1264649"
  },
  {
    "text": "applications to kubernetes ok next up",
    "start": "1264649",
    "end": "1272179"
  },
  {
    "start": "1267000",
    "end": "1267000"
  },
  {
    "text": "let's talk about remote storage this is an area that I am very familiar with I'm",
    "start": "1272179",
    "end": "1278029"
  },
  {
    "text": "the storage stake lead and the idea here",
    "start": "1278029",
    "end": "1284179"
  },
  {
    "text": "is that you know you containers alone are not sufficient because they are",
    "start": "1284179",
    "end": "1289399"
  },
  {
    "text": "ephemeral if you start a container and you write anything inside of that container that file system gets",
    "start": "1289399",
    "end": "1295279"
  },
  {
    "text": "basically deleted as soon as that container is terminated if you're running any sort of stateful application",
    "start": "1295279",
    "end": "1301429"
  },
  {
    "text": "you need some way to be able to persist state beyond the life of an individual pod and the facility that kubernetes",
    "start": "1301429",
    "end": "1308659"
  },
  {
    "text": "provides to do this our kubernetes volume plugins we have a number of volume plugins that allow you to plug",
    "start": "1308659",
    "end": "1314659"
  },
  {
    "text": "into remote storage systems so if you're running in a cloud environment you could",
    "start": "1314659",
    "end": "1319850"
  },
  {
    "text": "be using for example GC persistent disks or Amazon EBS block volumes you could",
    "start": "1319850",
    "end": "1326000"
  },
  {
    "text": "use an NFS share of different options exist one way to be",
    "start": "1326000",
    "end": "1332200"
  },
  {
    "text": "able to use them is in your pod definition to directly reference the type of volume plug-in that you want",
    "start": "1332200",
    "end": "1338770"
  },
  {
    "text": "this of course isn't the exact gamal that you're going to use but the idea is that inside your pod configuration file",
    "start": "1338770",
    "end": "1346450"
  },
  {
    "text": "you specify the volume that you're going to use so in this case I would say that",
    "start": "1346450",
    "end": "1352360"
  },
  {
    "text": "I want to use a GC persistent disk named PD one so as soon as I define that on",
    "start": "1352360",
    "end": "1357910"
  },
  {
    "text": "the API server kubernetes now needs to figure out how to make that volume available to the container and how does",
    "start": "1357910",
    "end": "1365950"
  },
  {
    "text": "it do that so first up we have our lovely scheduler that'll kick in and try",
    "start": "1365950",
    "end": "1371560"
  },
  {
    "text": "to figure out where this volume of this workload should be scheduled it realizes",
    "start": "1371560",
    "end": "1377380"
  },
  {
    "text": "that node one has availability so it's going to schedule Tod a to node one simply by updating the pod configuration",
    "start": "1377380",
    "end": "1385320"
  },
  {
    "text": "API to add a field that says it's been scheduled to node one now there's a",
    "start": "1385320",
    "end": "1391750"
  },
  {
    "text": "second component this is the attached detached controller the attached",
    "start": "1391750",
    "end": "1396940"
  },
  {
    "text": "detached controller like every other component in kubernetes is monitoring the kubernetes api and acting on a set",
    "start": "1396940",
    "end": "1402850"
  },
  {
    "text": "of API objects in this case it is looking for pods that have been",
    "start": "1402850",
    "end": "1409390"
  },
  {
    "text": "scheduled to a node and are also referencing a remote volume when it finds one of these pods what it does is",
    "start": "1409390",
    "end": "1416350"
  },
  {
    "text": "figure out if that if that volume is available on this on the node that it",
    "start": "1416350",
    "end": "1422500"
  },
  {
    "text": "has been scheduled to so for example in this case pod a has been scheduled to",
    "start": "1422500",
    "end": "1427840"
  },
  {
    "text": "node one but GCE PD one is not available on node one so what this attached detached",
    "start": "1427840",
    "end": "1433450"
  },
  {
    "text": "controller would do is take action to call out to the GCP back-end to say",
    "start": "1433450",
    "end": "1439030"
  },
  {
    "text": "please attach gcpd one to node one there's a step that I'm skipping here",
    "start": "1439030",
    "end": "1446320"
  },
  {
    "text": "which is it now actually updates the kubernetes api server to say that the",
    "start": "1446320",
    "end": "1451930"
  },
  {
    "text": "volume has been attached in a prior code it didn't use to do that",
    "start": "1451930",
    "end": "1457780"
  },
  {
    "text": "but with the current iteration with CSI one point and which is coming out in kubernetes",
    "start": "1457780",
    "end": "1464010"
  },
  {
    "text": "1.13 there's a new object called the volume attachment object which represents the state of a volume",
    "start": "1464010",
    "end": "1469650"
  },
  {
    "text": "attachment and that's used to communicate back and forth and that's through the the kubernetes api server so",
    "start": "1469650",
    "end": "1477600"
  },
  {
    "text": "once a volume is attached to the node the cubelet basically is just operating",
    "start": "1477600",
    "end": "1483780"
  },
  {
    "text": "on API objects and it notices that there should be a pod running and this pod is",
    "start": "1483780",
    "end": "1489690"
  },
  {
    "text": "referencing a GC persistent disk so it will monitor the node object to figure",
    "start": "1489690",
    "end": "1495870"
  },
  {
    "text": "out whether that volume has been attached to that node or not once it has been attached it'll go ahead and proceed",
    "start": "1495870",
    "end": "1502050"
  },
  {
    "text": "with making that volume available inside the container so when your container starts on this machine that remote",
    "start": "1502050",
    "end": "1509070"
  },
  {
    "text": "volume is now available inside your container and anything that you write to that directory will be persisted to that",
    "start": "1509070",
    "end": "1514620"
  },
  {
    "text": "disk if your volume dies for any reason it gets rescheduled to a different",
    "start": "1514620",
    "end": "1521250"
  },
  {
    "text": "machine the attached detached controller will move that volume to the other machine and your persist your storage is",
    "start": "1521250",
    "end": "1528330"
  },
  {
    "text": "available anything that you wrote is persisted whenever that container comes up on any other machine so this pattern",
    "start": "1528330",
    "end": "1536070"
  },
  {
    "text": "is very powerful and it uses a lot of what we've been talking about but it's not something that you should be doing",
    "start": "1536070",
    "end": "1542970"
  },
  {
    "text": "you should never reference a particular type of storage directly inside your pod",
    "start": "1542970",
    "end": "1549030"
  },
  {
    "text": "and let me talk about why that is the case the problem is that when you",
    "start": "1549030",
    "end": "1558660"
  },
  {
    "text": "reference a particular type of storage inside your pod your pod definition is no longer no longer portable so if I",
    "start": "1558660",
    "end": "1565770"
  },
  {
    "text": "reference a GC persistent disk directly inline in my pod definition if I were to",
    "start": "1565770",
    "end": "1571530"
  },
  {
    "text": "take that pod definition and move it to AWS or on-prem where that GC persistent",
    "start": "1571530",
    "end": "1577230"
  },
  {
    "text": "disk storage just doesn't exist my pod is not going to be able to start running so in order to fix this problem",
    "start": "1577230",
    "end": "1586170"
  },
  {
    "text": "we created an interface called the PVC and the PV a persistent volume claim and",
    "start": "1586170",
    "end": "1591480"
  },
  {
    "text": "a persistent volume the purpose of these objects is to decouple the request for storage from the actual",
    "start": "1591480",
    "end": "1599650"
  },
  {
    "text": "implementation of storage so now in your pod definition instead of referencing a",
    "start": "1599650",
    "end": "1607730"
  },
  {
    "text": "GC persistent disk what you would reference is a claim a persistent volume claim and a persistent volume claim is",
    "start": "1607730",
    "end": "1615320"
  },
  {
    "text": "simply another kubernetes api object this kubernetes api object contains",
    "start": "1615320",
    "end": "1620510"
  },
  {
    "text": "generic information about the type of storage that you want it could include things like the capacity of the storage",
    "start": "1620510",
    "end": "1627320"
  },
  {
    "text": "you want the access mode whether it's readwrite read-only information like that so it's a very generic way for you",
    "start": "1627320",
    "end": "1634460"
  },
  {
    "text": "to describe the requirements that this application needs for storage and then there is a controller that exists called",
    "start": "1634460",
    "end": "1641600"
  },
  {
    "text": "the persistent volume controller that will try to match your request for storage with what storage is available",
    "start": "1641600",
    "end": "1647830"
  },
  {
    "text": "in this case you have two options one is that as a cluster administrator you",
    "start": "1647830",
    "end": "1654290"
  },
  {
    "text": "could create PV objects ahead of time that represent the storage that's available on your cluster and then the",
    "start": "1654290",
    "end": "1660560"
  },
  {
    "text": "persistent volume controller will bind any PVCs that it sees with an available piece of storage",
    "start": "1660560",
    "end": "1666370"
  },
  {
    "text": "whenever the pvc object is created so what this means is that if you were to",
    "start": "1666370",
    "end": "1672770"
  },
  {
    "text": "transition into another environment your pod and PVC objects the objects that are",
    "start": "1672770",
    "end": "1678050"
  },
  {
    "text": "user-facing are now portable so as soon as you drop it onto a new cluster as",
    "start": "1678050",
    "end": "1684140"
  },
  {
    "text": "long as there are some PV available on that machine that can fulfill your PV C",
    "start": "1684140",
    "end": "1689150"
  },
  {
    "text": "they'll get bound and you'll have persistent storage available to you this",
    "start": "1689150",
    "end": "1694700"
  },
  {
    "text": "goes a step further with the storage class which allows automatic provisioning of storage so if the PVS",
    "start": "1694700",
    "end": "1701090"
  },
  {
    "text": "have don't pre exist and there's a storage class defined on your system when a PV C is created the storage class",
    "start": "1701090",
    "end": "1707750"
  },
  {
    "text": "defines how to create new storage from scratch and that storage class is",
    "start": "1707750",
    "end": "1713060"
  },
  {
    "text": "specific to that cluster environment and so as long as a storage class with the",
    "start": "1713060",
    "end": "1719270"
  },
  {
    "text": "same name exists in both environments some sort of storage will be able to be created for you",
    "start": "1719270",
    "end": "1726620"
  },
  {
    "text": "work load to be able to for for you to use and the application specific API",
    "start": "1726620",
    "end": "1732620"
  },
  {
    "text": "objects that you have remained portable across environments and this is",
    "start": "1732620",
    "end": "1738800"
  },
  {
    "start": "1736000",
    "end": "1736000"
  },
  {
    "text": "basically the fourth principle of kubernetes it's about workload portability and I think this is the most",
    "start": "1738800",
    "end": "1745190"
  },
  {
    "text": "critical piece of kubernetes the way that I think about it is like an",
    "start": "1745190",
    "end": "1752540"
  },
  {
    "text": "operating system if you went back before operating systems or a thing folks were",
    "start": "1752540",
    "end": "1758059"
  },
  {
    "text": "writing applications directly for specific hardware and those applications",
    "start": "1758059",
    "end": "1763160"
  },
  {
    "text": "were not portable across different machines and an operating systems basically said don't worry about the",
    "start": "1763160",
    "end": "1769400"
  },
  {
    "text": "underlying hardware that's available on this particular machine right to this interface that I provide you and as long",
    "start": "1769400",
    "end": "1775880"
  },
  {
    "text": "as this operating system is running on one of these environments your application will work and that allowed",
    "start": "1775880",
    "end": "1782440"
  },
  {
    "text": "application ecosystems to thrive in the distributed systems space we haven't",
    "start": "1782440",
    "end": "1788690"
  },
  {
    "text": "really had anything equivalent for a very very long time basically everybody",
    "start": "1788690",
    "end": "1793850"
  },
  {
    "text": "was writing custom applications for custom cluster implementations and what",
    "start": "1793850",
    "end": "1799490"
  },
  {
    "text": "kubernetes has done is it's acting like an operating system for distributed",
    "start": "1799490",
    "end": "1805070"
  },
  {
    "text": "systems it basically has southward facing API is that it'll hook into",
    "start": "1805070",
    "end": "1811309"
  },
  {
    "text": "different clusters and it has the kubernetes api that it exposes to end users and as long as application",
    "start": "1811309",
    "end": "1819200"
  },
  {
    "text": "developers deploy against that kubernetes api as long as kubernetes exists on that cluster their application",
    "start": "1819200",
    "end": "1826370"
  },
  {
    "text": "just works it doesn't need to be modified it can be moved around from cluster to cluster to cluster it",
    "start": "1826370",
    "end": "1833840"
  },
  {
    "text": "basically excuse me a decouples distributed system application development from cluster implementation",
    "start": "1833840",
    "end": "1839450"
  },
  {
    "text": "it acts like a true abstraction layer so",
    "start": "1839450",
    "end": "1844490"
  },
  {
    "text": "in review the four principles that I talked about were the cube API server",
    "start": "1844490",
    "end": "1849650"
  },
  {
    "text": "being declarative rather than imperative I want to get some audience participation can someone tell me why",
    "start": "1849650",
    "end": "1856010"
  },
  {
    "text": "that is important sorry say that again self-healing yes",
    "start": "1856010",
    "end": "1862090"
  },
  {
    "text": "able to rollback extensible so no hidden",
    "start": "1862090",
    "end": "1867409"
  },
  {
    "text": "internal api's immutable that is an",
    "start": "1867409",
    "end": "1880370"
  },
  {
    "text": "excellent point so act should include that in the presentation as well his point was that it's immutable regardless",
    "start": "1880370",
    "end": "1887750"
  },
  {
    "text": "of the the great thing about this kind of configuration that kubernetes has is",
    "start": "1887750",
    "end": "1894110"
  },
  {
    "start": "1890000",
    "end": "1890000"
  },
  {
    "text": "you can actually check it in two source code and it's repeatable you can deploy",
    "start": "1894110",
    "end": "1899480"
  },
  {
    "text": "you can you know how to create a application from scratch as long as you deployed this set of llamó files on any",
    "start": "1899480",
    "end": "1905690"
  },
  {
    "text": "cluster that has kubernetes you're going to have your application running so it",
    "start": "1905690",
    "end": "1910879"
  },
  {
    "text": "is immutable let's talk about meeting the users where they are why is that important Yussef",
    "start": "1910879",
    "end": "1919460"
  },
  {
    "text": "adoption yes and then finally workload portability why does that matter",
    "start": "1919460",
    "end": "1925570"
  },
  {
    "text": "cloud agnostic cluster agnostic that's",
    "start": "1927100",
    "end": "1933200"
  },
  {
    "text": "right it's a it's a portability layer it's an abstraction layer there is a principle of being able to separation of",
    "start": "1933200",
    "end": "1944960"
  },
  {
    "text": "concerns basically if you design your system with a separation of concerns and you isolate different components with",
    "start": "1944960",
    "end": "1952129"
  },
  {
    "text": "very distinct of basically contracts between them it becomes much more easier",
    "start": "1952129",
    "end": "1958190"
  },
  {
    "text": "to test much easier to upgrade and maintain overall and kubernetes",
    "start": "1958190",
    "end": "1963919"
  },
  {
    "text": "basically acts as a separation of concern abstraction layer that says don't worry about anything below this",
    "start": "1963919",
    "end": "1970279"
  },
  {
    "text": "layer I'll take care of that you worry about the application layer that is all",
    "start": "1970279",
    "end": "1975409"
  },
  {
    "text": "that I have if you have any questions uh please yes",
    "start": "1975409",
    "end": "1980840"
  },
  {
    "text": "you know Lightning talks they talk about custom definitions CRT idrd isomorphic",
    "start": "1980840",
    "end": "1994640"
  },
  {
    "text": "to",
    "start": "1994640",
    "end": "1997240"
  },
  {
    "text": "good question so the question is about CR DS custom resource definitions and",
    "start": "2007410",
    "end": "2013650"
  },
  {
    "text": "how they relate to pot objects or any",
    "start": "2013650",
    "end": "2019380"
  },
  {
    "text": "other API object that currently exists as a built-in type in the kubernetes api so for those of you who aren't familiar",
    "start": "2019380",
    "end": "2024780"
  },
  {
    "text": "with what CR DS r CR DS are a way to be able to write your own custom kubernetes",
    "start": "2024780",
    "end": "2031230"
  },
  {
    "text": "api object type so for example you are probably familiar with the node API object or the pod API object but if you",
    "start": "2031230",
    "end": "2039180"
  },
  {
    "text": "wanted to create your own API object the CRD allows you a very easy way to do that you define a new CRD of your type",
    "start": "2039180",
    "end": "2046980"
  },
  {
    "text": "and you define the schema for what that looks like and then you can create your own objects",
    "start": "2046980",
    "end": "2052679"
  },
  {
    "text": "you could call it you know foo or blah or whatever you want against the kubernetes api server and",
    "start": "2052679",
    "end": "2057960"
  },
  {
    "text": "then you could write your own custom controllers that use those CRS and C RDS",
    "start": "2057960",
    "end": "2063780"
  },
  {
    "text": "to basically act extend kubernetes and so the question is how they relate to",
    "start": "2063780",
    "end": "2069419"
  },
  {
    "text": "these built-in types I like to repeat what Tim Hawkins said about this which",
    "start": "2069419",
    "end": "2075240"
  },
  {
    "text": "is that if we had C or D Zonday 0 for kubernetes there would be no built-in types the idea is that the kubernetes",
    "start": "2075240",
    "end": "2084480"
  },
  {
    "text": "api machinery should be distilled down such that it can be used as just API",
    "start": "2084480",
    "end": "2091710"
  },
  {
    "text": "machinery for any project not just kubernetes so we're starting to see it be used for things like Sto and other",
    "start": "2091710",
    "end": "2097920"
  },
  {
    "text": "higher-level projects and there should be no built in API types meaning that if",
    "start": "2097920",
    "end": "2103710"
  },
  {
    "text": "we started from day 0 pods nodes everything else would also be a CR D",
    "start": "2103710",
    "end": "2110599"
  },
  {
    "text": "yes well persistent volume claim is similar to a pod when we first came up",
    "start": "2118090",
    "end": "2123980"
  },
  {
    "text": "with a persistent volume claim and PV it was kind of modeled after a pod in a",
    "start": "2123980",
    "end": "2129170"
  },
  {
    "text": "node where a node represents the cluster resource that's available and a pod represents kind of a request for using",
    "start": "2129170",
    "end": "2135560"
  },
  {
    "text": "that resource so a PV represents the resource the storage resource that's available on that cluster and a PV C",
    "start": "2135560",
    "end": "2142700"
  },
  {
    "text": "represents a user's desire to use that resource and they kind of bind together",
    "start": "2142700",
    "end": "2150700"
  },
  {
    "text": "it's a weakness of what system I missed the first part a declarative system",
    "start": "2161240",
    "end": "2167260"
  },
  {
    "text": "strong consistency guarantees in what regard",
    "start": "2169750",
    "end": "2175720"
  },
  {
    "text": "right yes so so the comment is that one",
    "start": "2187540",
    "end": "2193840"
  },
  {
    "text": "of the drawbacks of a declarative system is that you can't offer consistency",
    "start": "2193840",
    "end": "2201100"
  },
  {
    "text": "guarantees and this is absolutely true which is why kubernetes is an eventually consistent system it will try",
    "start": "2201100",
    "end": "2208510"
  },
  {
    "text": "essentially forever to drive towards the state that you specify and this works",
    "start": "2208510",
    "end": "2214480"
  },
  {
    "text": "well for a lot of the use cases that we have in kubernetes especially in terms",
    "start": "2214480",
    "end": "2220330"
  },
  {
    "text": "of getting workloads running and keeping them running but it is definitely a challenge when we have patterns that",
    "start": "2220330",
    "end": "2227890"
  },
  {
    "text": "don't necessarily fit into this model well so for example on the storage side of things we're looking at the ability",
    "start": "2227890",
    "end": "2234250"
  },
  {
    "text": "to take a snapshot a snapshot is a very point in time time constrained operation",
    "start": "2234250",
    "end": "2240400"
  },
  {
    "text": "and when you have something like that it is a little bit difficult to model in a declarative API if you're interested you",
    "start": "2240400",
    "end": "2248080"
  },
  {
    "text": "can come to the storage sake and we can talk about how we're trying to make that work there are issues with it but we",
    "start": "2248080",
    "end": "2257170"
  },
  {
    "text": "have been able to get something working any other questions",
    "start": "2257170",
    "end": "2264990"
  },
  {
    "text": "all right thank you very much [Applause]",
    "start": "2265890",
    "end": "2273960"
  }
]