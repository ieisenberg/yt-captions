[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "hello i'm kevin flansberg and welcome to",
    "start": "560",
    "end": "3120"
  },
  {
    "text": "cubelet deep dive",
    "start": "3120",
    "end": "4240"
  },
  {
    "text": "writing a cubelet in rust this talk",
    "start": "4240",
    "end": "6799"
  },
  {
    "text": "covers cubelet architecture and behavior",
    "start": "6799",
    "end": "8800"
  },
  {
    "text": "in detail",
    "start": "8800",
    "end": "9599"
  },
  {
    "text": "which was learned whilst rewriting",
    "start": "9599",
    "end": "11040"
  },
  {
    "text": "cubelet in rust it also covers the",
    "start": "11040",
    "end": "13519"
  },
  {
    "text": "benefits of rust for writing distributed",
    "start": "13519",
    "end": "15360"
  },
  {
    "text": "applications such as kubernetes",
    "start": "15360",
    "end": "17119"
  },
  {
    "text": "components",
    "start": "17119",
    "end": "18560"
  },
  {
    "text": "first a little bit about myself i have",
    "start": "18560",
    "end": "20960"
  },
  {
    "start": "19000",
    "end": "19000"
  },
  {
    "text": "been a rust developer for around three",
    "start": "20960",
    "end": "22880"
  },
  {
    "text": "years",
    "start": "22880",
    "end": "23920"
  },
  {
    "text": "during this time i've been responsible",
    "start": "23920",
    "end": "25840"
  },
  {
    "text": "for developing and deploying globally",
    "start": "25840",
    "end": "27760"
  },
  {
    "text": "distributed microservices as such",
    "start": "27760",
    "end": "30640"
  },
  {
    "text": "i'm pretty familiar with the rust",
    "start": "30640",
    "end": "32000"
  },
  {
    "text": "software development lifecycle",
    "start": "32000",
    "end": "34079"
  },
  {
    "text": "from running git init to ci cd and",
    "start": "34079",
    "end": "36960"
  },
  {
    "text": "finally monitoring",
    "start": "36960",
    "end": "38559"
  },
  {
    "text": "my devops journey began with docker",
    "start": "38559",
    "end": "40320"
  },
  {
    "text": "swarm however around a year ago i",
    "start": "40320",
    "end": "42480"
  },
  {
    "text": "migrated to kubernetes",
    "start": "42480",
    "end": "44160"
  },
  {
    "text": "i have found it to be a very powerful",
    "start": "44160",
    "end": "45840"
  },
  {
    "text": "tool even in a single developer shop",
    "start": "45840",
    "end": "48559"
  },
  {
    "text": "i most recently joined the crestlip",
    "start": "48559",
    "end": "50320"
  },
  {
    "text": "project which nicely combines my",
    "start": "50320",
    "end": "52160"
  },
  {
    "text": "interest in kubernetes and rust and was",
    "start": "52160",
    "end": "54160"
  },
  {
    "text": "the inspiration for this talk",
    "start": "54160",
    "end": "56800"
  },
  {
    "text": "crestlet is an open source project being",
    "start": "56800",
    "end": "59280"
  },
  {
    "text": "run by deus labs",
    "start": "59280",
    "end": "61120"
  },
  {
    "text": "it stands for kubernetes rust cubelet",
    "start": "61120",
    "end": "63840"
  },
  {
    "text": "and involves a number of interesting",
    "start": "63840",
    "end": "65518"
  },
  {
    "text": "components",
    "start": "65519",
    "end": "66720"
  },
  {
    "text": "the first is the cubelet crate which",
    "start": "66720",
    "end": "69200"
  },
  {
    "text": "seeks to implement common cubelet",
    "start": "69200",
    "end": "70960"
  },
  {
    "text": "functionality",
    "start": "70960",
    "end": "72000"
  },
  {
    "text": "and expose a flexible api with which",
    "start": "72000",
    "end": "74320"
  },
  {
    "text": "developers can build custom cubelets",
    "start": "74320",
    "end": "77280"
  },
  {
    "text": "this allows cubelets to be developed for",
    "start": "77280",
    "end": "79200"
  },
  {
    "text": "new architectures and types of workloads",
    "start": "79200",
    "end": "82240"
  },
  {
    "text": "in fact the second major component of",
    "start": "82240",
    "end": "84640"
  },
  {
    "text": "the project",
    "start": "84640",
    "end": "85600"
  },
  {
    "text": "are two cubelet implementations for",
    "start": "85600",
    "end": "87600"
  },
  {
    "text": "running wasm workloads",
    "start": "87600",
    "end": "89520"
  },
  {
    "text": "one using the wask runtime and the other",
    "start": "89520",
    "end": "92240"
  },
  {
    "text": "using wasmtime",
    "start": "92240",
    "end": "94479"
  },
  {
    "text": "these are exciting because you can",
    "start": "94479",
    "end": "96079"
  },
  {
    "text": "compile the wasm using rust",
    "start": "96079",
    "end": "98159"
  },
  {
    "text": "upload an oci compliant image to azure",
    "start": "98159",
    "end": "101040"
  },
  {
    "text": "and then deploy these workloads in",
    "start": "101040",
    "end": "102560"
  },
  {
    "text": "kubernetes using crestlet",
    "start": "102560",
    "end": "105040"
  },
  {
    "text": "these images are very small compared to",
    "start": "105040",
    "end": "107280"
  },
  {
    "text": "linux container images",
    "start": "107280",
    "end": "108720"
  },
  {
    "text": "and isolation is achieved using the wasm",
    "start": "108720",
    "end": "111040"
  },
  {
    "text": "runtimes themselves",
    "start": "111040",
    "end": "112640"
  },
  {
    "text": "resulting in a very performant and",
    "start": "112640",
    "end": "114399"
  },
  {
    "text": "efficient way of running microservices",
    "start": "114399",
    "end": "117680"
  },
  {
    "text": "i have also begun work on a cubelet",
    "start": "117680",
    "end": "119759"
  },
  {
    "text": "implementation which targets traditional",
    "start": "119759",
    "end": "121680"
  },
  {
    "text": "linux containers and makes use of the",
    "start": "121680",
    "end": "123600"
  },
  {
    "text": "container runtime interface",
    "start": "123600",
    "end": "126640"
  },
  {
    "text": "in the rest of the talk i will focus",
    "start": "126640",
    "end": "128479"
  },
  {
    "text": "primarily on cubelet in the abstract or",
    "start": "128479",
    "end": "130800"
  },
  {
    "text": "as it pertains to linux containers",
    "start": "130800",
    "end": "133040"
  },
  {
    "text": "but i think the use of wasm within",
    "start": "133040",
    "end": "134640"
  },
  {
    "text": "kubernetes is very exciting and i",
    "start": "134640",
    "end": "136400"
  },
  {
    "text": "encourage you to check out these",
    "start": "136400",
    "end": "137840"
  },
  {
    "text": "projects",
    "start": "137840",
    "end": "140319"
  },
  {
    "start": "140000",
    "end": "140000"
  },
  {
    "text": "i'd like to begin my tour of cubelet",
    "start": "140560",
    "end": "142720"
  },
  {
    "text": "architecture with a high level overview",
    "start": "142720",
    "end": "144800"
  },
  {
    "text": "of kubernetes architecture for those",
    "start": "144800",
    "end": "146800"
  },
  {
    "text": "that are unfamiliar",
    "start": "146800",
    "end": "148640"
  },
  {
    "text": "on the left side you have a number of",
    "start": "148640",
    "end": "150400"
  },
  {
    "text": "components which make up the control",
    "start": "150400",
    "end": "152160"
  },
  {
    "text": "plane of the cluster",
    "start": "152160",
    "end": "153760"
  },
  {
    "text": "these can run directly on the host in",
    "start": "153760",
    "end": "155920"
  },
  {
    "text": "control plane nodes",
    "start": "155920",
    "end": "157519"
  },
  {
    "text": "or in a self-hosted cluster in pods in",
    "start": "157519",
    "end": "160560"
  },
  {
    "text": "the cluster itself",
    "start": "160560",
    "end": "162160"
  },
  {
    "text": "or in the case of many cloud offerings",
    "start": "162160",
    "end": "165040"
  },
  {
    "text": "are managed by the vendor",
    "start": "165040",
    "end": "166720"
  },
  {
    "text": "and only the api server endpoint is made",
    "start": "166720",
    "end": "169280"
  },
  {
    "text": "available to the customer",
    "start": "169280",
    "end": "171599"
  },
  {
    "text": "within the control plane you have etcd",
    "start": "171599",
    "end": "174160"
  },
  {
    "text": "which is a distributed key value store",
    "start": "174160",
    "end": "176400"
  },
  {
    "text": "that kubernetes uses to persist",
    "start": "176400",
    "end": "178319"
  },
  {
    "text": "cluster state the kubernetes api server",
    "start": "178319",
    "end": "181760"
  },
  {
    "text": "then",
    "start": "181760",
    "end": "182080"
  },
  {
    "text": "exposes the data in etcd via an http",
    "start": "182080",
    "end": "185440"
  },
  {
    "text": "endpoint and additionally performs",
    "start": "185440",
    "end": "187360"
  },
  {
    "text": "authentication",
    "start": "187360",
    "end": "188480"
  },
  {
    "text": "and authorization on these requests",
    "start": "188480",
    "end": "191760"
  },
  {
    "text": "users and cubelets connect to kubernetes",
    "start": "191760",
    "end": "194560"
  },
  {
    "text": "via the api server endpoint",
    "start": "194560",
    "end": "196959"
  },
  {
    "text": "cubelets register themselves and monitor",
    "start": "196959",
    "end": "199280"
  },
  {
    "text": "for pods to run",
    "start": "199280",
    "end": "200640"
  },
  {
    "text": "and users can modify cluster state such",
    "start": "200640",
    "end": "203120"
  },
  {
    "text": "as submitting a new deployment to run",
    "start": "203120",
    "end": "206000"
  },
  {
    "text": "note that this slide isn't exhaustive",
    "start": "206000",
    "end": "208239"
  },
  {
    "text": "and leaves out components like cube",
    "start": "208239",
    "end": "210080"
  },
  {
    "text": "proxy",
    "start": "210080",
    "end": "210879"
  },
  {
    "text": "cloud controller manager and cluster dns",
    "start": "210879",
    "end": "214640"
  },
  {
    "text": "the scheduler is responsible for",
    "start": "214640",
    "end": "216480"
  },
  {
    "text": "assigning pods to nodes",
    "start": "216480",
    "end": "218159"
  },
  {
    "text": "and the controller manager runs cluster",
    "start": "218159",
    "end": "220400"
  },
  {
    "text": "control loops",
    "start": "220400",
    "end": "221599"
  },
  {
    "text": "such as adding endpoints to services",
    "start": "221599",
    "end": "224159"
  },
  {
    "text": "provisioning service accounts for new",
    "start": "224159",
    "end": "226000"
  },
  {
    "text": "namespaces and pruning dead nodes",
    "start": "226000",
    "end": "229360"
  },
  {
    "text": "these services leverage an extremely",
    "start": "229360",
    "end": "231360"
  },
  {
    "text": "central concept to kubernetes",
    "start": "231360",
    "end": "233280"
  },
  {
    "text": "the controller pattern a large number of",
    "start": "233280",
    "end": "236720"
  },
  {
    "start": "236000",
    "end": "236000"
  },
  {
    "text": "kubernetes components use this pattern",
    "start": "236720",
    "end": "239680"
  },
  {
    "text": "it begins with declarative manifests",
    "start": "239680",
    "end": "241760"
  },
  {
    "text": "which represent instances of the various",
    "start": "241760",
    "end": "244080"
  },
  {
    "text": "api resources that the cluster supports",
    "start": "244080",
    "end": "247599"
  },
  {
    "text": "most users will be familiar with these",
    "start": "247599",
    "end": "249599"
  },
  {
    "text": "manifests in the form of yaml files",
    "start": "249599",
    "end": "251840"
  },
  {
    "text": "which are submitted to the cluster to",
    "start": "251840",
    "end": "253360"
  },
  {
    "text": "create resources such as deployments and",
    "start": "253360",
    "end": "255519"
  },
  {
    "text": "services",
    "start": "255519",
    "end": "256880"
  },
  {
    "text": "these manifests are mostly immutable but",
    "start": "256880",
    "end": "259280"
  },
  {
    "text": "you can find some exceptions",
    "start": "259280",
    "end": "261840"
  },
  {
    "text": "controllers within the cluster watch for",
    "start": "261840",
    "end": "263919"
  },
  {
    "text": "changes to the types of resources they",
    "start": "263919",
    "end": "265759"
  },
  {
    "text": "manage",
    "start": "265759",
    "end": "266800"
  },
  {
    "text": "these changes are typically the creation",
    "start": "266800",
    "end": "268800"
  },
  {
    "text": "of a new instance of the resource",
    "start": "268800",
    "end": "270720"
  },
  {
    "text": "modifications or deletion watching a",
    "start": "270720",
    "end": "273840"
  },
  {
    "text": "resource for these types of changes is",
    "start": "273840",
    "end": "275759"
  },
  {
    "text": "typically referred to as the",
    "start": "275759",
    "end": "277440"
  },
  {
    "text": "informer pattern when changes are",
    "start": "277440",
    "end": "280240"
  },
  {
    "text": "detected",
    "start": "280240",
    "end": "281199"
  },
  {
    "text": "the controller will then drive cluster",
    "start": "281199",
    "end": "283199"
  },
  {
    "text": "state to match the desired state",
    "start": "283199",
    "end": "285040"
  },
  {
    "text": "specified in the manifest",
    "start": "285040",
    "end": "287520"
  },
  {
    "text": "in this way different components with",
    "start": "287520",
    "end": "289759"
  },
  {
    "text": "different responsibilities ensure that",
    "start": "289759",
    "end": "291520"
  },
  {
    "text": "the cluster is eventually consistent",
    "start": "291520",
    "end": "293360"
  },
  {
    "text": "with its desired state",
    "start": "293360",
    "end": "295040"
  },
  {
    "start": "295000",
    "end": "295000"
  },
  {
    "text": "as an aside there is also the operator",
    "start": "295040",
    "end": "297600"
  },
  {
    "text": "pattern",
    "start": "297600",
    "end": "298320"
  },
  {
    "text": "which you will see pretty often when",
    "start": "298320",
    "end": "299919"
  },
  {
    "text": "working with kubernetes",
    "start": "299919",
    "end": "301759"
  },
  {
    "text": "the distinction between an operator and",
    "start": "301759",
    "end": "303600"
  },
  {
    "text": "a controller is fairly subtle",
    "start": "303600",
    "end": "305360"
  },
  {
    "text": "but an operator is essentially a",
    "start": "305360",
    "end": "306960"
  },
  {
    "text": "controller that defines a custom api",
    "start": "306960",
    "end": "309199"
  },
  {
    "text": "resource",
    "start": "309199",
    "end": "310080"
  },
  {
    "text": "and is application or domain specific i",
    "start": "310080",
    "end": "312960"
  },
  {
    "text": "believe that the use of the two",
    "start": "312960",
    "end": "314240"
  },
  {
    "text": "different names here is a little",
    "start": "314240",
    "end": "315520"
  },
  {
    "text": "confusing and unnecessary",
    "start": "315520",
    "end": "319039"
  },
  {
    "text": "if we take a closer look at cubelet we",
    "start": "319039",
    "end": "321440"
  },
  {
    "text": "can see that it is a controller as well",
    "start": "321440",
    "end": "323759"
  },
  {
    "text": "with its resource type being the pod it",
    "start": "323759",
    "end": "326880"
  },
  {
    "text": "is a little special though because pods",
    "start": "326880",
    "end": "328800"
  },
  {
    "text": "represent",
    "start": "328800",
    "end": "329360"
  },
  {
    "text": "units of work and are the original and",
    "start": "329360",
    "end": "331680"
  },
  {
    "text": "most fundamental resource type in",
    "start": "331680",
    "end": "333360"
  },
  {
    "text": "kubernetes",
    "start": "333360",
    "end": "335120"
  },
  {
    "text": "primarily the cubelet watches for pod",
    "start": "335120",
    "end": "337600"
  },
  {
    "text": "changes and then configures the",
    "start": "337600",
    "end": "339360"
  },
  {
    "text": "container runtime to pull images",
    "start": "339360",
    "end": "341680"
  },
  {
    "text": "create namespaces and run containers",
    "start": "341680",
    "end": "344720"
  },
  {
    "text": "there is a grpc endpoint for this",
    "start": "344720",
    "end": "346800"
  },
  {
    "text": "communication called the container",
    "start": "346800",
    "end": "348320"
  },
  {
    "text": "runtime interface which was introduced",
    "start": "348320",
    "end": "350240"
  },
  {
    "text": "in 2016.",
    "start": "350240",
    "end": "352000"
  },
  {
    "text": "it is not 100 adopted however and you",
    "start": "352000",
    "end": "354560"
  },
  {
    "text": "can still find some cubelets configured",
    "start": "354560",
    "end": "356319"
  },
  {
    "text": "to use docker with its daemon socket",
    "start": "356319",
    "end": "359039"
  },
  {
    "text": "additionally kubota exposes an http",
    "start": "359039",
    "end": "362160"
  },
  {
    "text": "endpoint",
    "start": "362160",
    "end": "363039"
  },
  {
    "text": "for streaming logs and exec sessions to",
    "start": "363039",
    "end": "365280"
  },
  {
    "text": "clients",
    "start": "365280",
    "end": "366479"
  },
  {
    "text": "first class support for this via the api",
    "start": "366479",
    "end": "368960"
  },
  {
    "text": "server and cube cuddle is one of the",
    "start": "368960",
    "end": "370720"
  },
  {
    "text": "special things about cubelet",
    "start": "370720",
    "end": "373280"
  },
  {
    "text": "for configuring storage such as block",
    "start": "373280",
    "end": "375280"
  },
  {
    "text": "volumes there is the container storage",
    "start": "375280",
    "end": "377120"
  },
  {
    "text": "interface",
    "start": "377120",
    "end": "378000"
  },
  {
    "text": "another grpc protocol endpoint which",
    "start": "378000",
    "end": "380240"
  },
  {
    "text": "cuba interacts with",
    "start": "380240",
    "end": "382000"
  },
  {
    "text": "legacy storage drivers were originally",
    "start": "382000",
    "end": "384000"
  },
  {
    "text": "included in the cubelet source code so",
    "start": "384000",
    "end": "385759"
  },
  {
    "text": "you may find some in the wild that do",
    "start": "385759",
    "end": "387440"
  },
  {
    "text": "not make use of csi",
    "start": "387440",
    "end": "390000"
  },
  {
    "text": "interestingly the container network",
    "start": "390000",
    "end": "391919"
  },
  {
    "text": "interface is not grpc",
    "start": "391919",
    "end": "394240"
  },
  {
    "text": "and it is the responsibility of the",
    "start": "394240",
    "end": "395840"
  },
  {
    "text": "container runtime to configure this",
    "start": "395840",
    "end": "398479"
  },
  {
    "text": "this makes sense because the runtime is",
    "start": "398479",
    "end": "400479"
  },
  {
    "text": "directly responsible for configuring the",
    "start": "400479",
    "end": "402479"
  },
  {
    "text": "network namespace that the pod runs in",
    "start": "402479",
    "end": "404880"
  },
  {
    "text": "but it is a little unintuitive the fact",
    "start": "404880",
    "end": "408160"
  },
  {
    "text": "is",
    "start": "408160",
    "end": "408479"
  },
  {
    "text": "pods are very complex if the ops",
    "start": "408479",
    "end": "410960"
  },
  {
    "text": "community has learned one thing over the",
    "start": "410960",
    "end": "412720"
  },
  {
    "text": "last few decades",
    "start": "412720",
    "end": "414000"
  },
  {
    "text": "it is that hosting applications involves",
    "start": "414000",
    "end": "416160"
  },
  {
    "text": "a lot of moving parts",
    "start": "416160",
    "end": "417840"
  },
  {
    "text": "cubelet must interact with many other",
    "start": "417840",
    "end": "420000"
  },
  {
    "text": "components and does not just act as a",
    "start": "420000",
    "end": "422000"
  },
  {
    "text": "shim to the container run time",
    "start": "422000",
    "end": "424080"
  },
  {
    "text": "for instance at some point it must fetch",
    "start": "424080",
    "end": "426479"
  },
  {
    "text": "and configure secrets and config maps",
    "start": "426479",
    "end": "428960"
  },
  {
    "text": "respect the image pull policy and mount",
    "start": "428960",
    "end": "431520"
  },
  {
    "text": "service account tokens",
    "start": "431520",
    "end": "433680"
  },
  {
    "text": "the pod spec allows for a lot of",
    "start": "433680",
    "end": "435360"
  },
  {
    "text": "customization of behavior",
    "start": "435360",
    "end": "437199"
  },
  {
    "text": "which requires a lot of kubernetes",
    "start": "437199",
    "end": "438960"
  },
  {
    "text": "specific decisions to be made by cubelet",
    "start": "438960",
    "end": "441199"
  },
  {
    "text": "before the runtime can start the",
    "start": "441199",
    "end": "442800"
  },
  {
    "text": "container",
    "start": "442800",
    "end": "444800"
  },
  {
    "text": "i'd like to spend some time discussing",
    "start": "444800",
    "end": "446639"
  },
  {
    "start": "445000",
    "end": "445000"
  },
  {
    "text": "why i think rust is a great language for",
    "start": "446639",
    "end": "448639"
  },
  {
    "text": "developing distributed applications like",
    "start": "448639",
    "end": "450880"
  },
  {
    "text": "cubelet",
    "start": "450880",
    "end": "452160"
  },
  {
    "text": "first rust can produce very high",
    "start": "452160",
    "end": "454160"
  },
  {
    "text": "performance software",
    "start": "454160",
    "end": "455440"
  },
  {
    "text": "and frequently matches c plus in",
    "start": "455440",
    "end": "457599"
  },
  {
    "text": "performance benchmarks",
    "start": "457599",
    "end": "459360"
  },
  {
    "text": "in part this is achieved by a policy of",
    "start": "459360",
    "end": "461919"
  },
  {
    "text": "zero cost abstractions wherein abstract",
    "start": "461919",
    "end": "464800"
  },
  {
    "text": "programming features like generic types",
    "start": "464800",
    "end": "467360"
  },
  {
    "text": "incur zero runtime cost the result of",
    "start": "467360",
    "end": "470479"
  },
  {
    "text": "this focus on performance is not only",
    "start": "470479",
    "end": "472639"
  },
  {
    "text": "the ability to scale",
    "start": "472639",
    "end": "474080"
  },
  {
    "text": "but also efficiency which can have a big",
    "start": "474080",
    "end": "476639"
  },
  {
    "text": "impact in the data center",
    "start": "476639",
    "end": "478000"
  },
  {
    "text": "and at the edge next",
    "start": "478000",
    "end": "481280"
  },
  {
    "text": "rust employs a strong type system as",
    "start": "481280",
    "end": "483599"
  },
  {
    "text": "well as a borrow checker which enforces",
    "start": "483599",
    "end": "485599"
  },
  {
    "text": "memory safety at compile time",
    "start": "485599",
    "end": "487840"
  },
  {
    "text": "many first-time users of rust quickly",
    "start": "487840",
    "end": "490000"
  },
  {
    "text": "grow irritated with the compiler and",
    "start": "490000",
    "end": "491840"
  },
  {
    "text": "borrow checker",
    "start": "491840",
    "end": "492960"
  },
  {
    "text": "however i have found that nearly",
    "start": "492960",
    "end": "494479"
  },
  {
    "text": "everything that it catches is an",
    "start": "494479",
    "end": "496080"
  },
  {
    "text": "actual bug that would have been a",
    "start": "496080",
    "end": "497440"
  },
  {
    "text": "runtime error if it had not been caught",
    "start": "497440",
    "end": "500400"
  },
  {
    "text": "once you are familiar with certain error",
    "start": "500400",
    "end": "502319"
  },
  {
    "text": "types that are specific to rust",
    "start": "502319",
    "end": "504319"
  },
  {
    "text": "the compiler can feel a lot like pair",
    "start": "504319",
    "end": "506400"
  },
  {
    "text": "programming and can be a helpful guide",
    "start": "506400",
    "end": "508560"
  },
  {
    "text": "when conducting large refactors or",
    "start": "508560",
    "end": "510479"
  },
  {
    "text": "prototyping new features",
    "start": "510479",
    "end": "513200"
  },
  {
    "text": "as a result i can't help but be nervous",
    "start": "513200",
    "end": "515440"
  },
  {
    "text": "and code very defensively when i return",
    "start": "515440",
    "end": "517440"
  },
  {
    "text": "to a language like python",
    "start": "517440",
    "end": "520000"
  },
  {
    "text": "rust's strong concept of memory safety",
    "start": "520000",
    "end": "522320"
  },
  {
    "text": "contributes to easier concurrent and",
    "start": "522320",
    "end": "524080"
  },
  {
    "text": "parallel programming as well",
    "start": "524080",
    "end": "526160"
  },
  {
    "text": "it includes strong primitives for",
    "start": "526160",
    "end": "527760"
  },
  {
    "text": "coordinating and communicating between",
    "start": "527760",
    "end": "529440"
  },
  {
    "text": "threads",
    "start": "529440",
    "end": "530320"
  },
  {
    "text": "this leads to significantly reduced",
    "start": "530320",
    "end": "532160"
  },
  {
    "text": "cognitive overhead when developing",
    "start": "532160",
    "end": "533920"
  },
  {
    "text": "concurrent software",
    "start": "533920",
    "end": "535279"
  },
  {
    "text": "and frequently catches memory safety or",
    "start": "535279",
    "end": "537360"
  },
  {
    "text": "race condition bugs",
    "start": "537360",
    "end": "539279"
  },
  {
    "text": "additionally async await was stabilized",
    "start": "539279",
    "end": "541680"
  },
  {
    "text": "about a year ago",
    "start": "541680",
    "end": "542880"
  },
  {
    "text": "and although there are some friction",
    "start": "542880",
    "end": "544320"
  },
  {
    "text": "points surrounding the many run times",
    "start": "544320",
    "end": "545920"
  },
  {
    "text": "that there are to choose from",
    "start": "545920",
    "end": "547279"
  },
  {
    "text": "it is something that i basically default",
    "start": "547279",
    "end": "548959"
  },
  {
    "text": "to now unless i am seeking to minimize",
    "start": "548959",
    "end": "550880"
  },
  {
    "text": "latency",
    "start": "550880",
    "end": "553519"
  },
  {
    "text": "another great feature of rust is error",
    "start": "553600",
    "end": "555519"
  },
  {
    "text": "handling this can be a hot topic as many",
    "start": "555519",
    "end": "558320"
  },
  {
    "text": "find it somewhat cumbersome",
    "start": "558320",
    "end": "560240"
  },
  {
    "text": "i find it to be easy to understand",
    "start": "560240",
    "end": "562080"
  },
  {
    "text": "albeit verbose at times",
    "start": "562080",
    "end": "564480"
  },
  {
    "text": "rust's error handling gives me the",
    "start": "564480",
    "end": "566080"
  },
  {
    "text": "confidence that i'm actually handling",
    "start": "566080",
    "end": "567839"
  },
  {
    "text": "all of the error types that my code can",
    "start": "567839",
    "end": "569680"
  },
  {
    "text": "produce",
    "start": "569680",
    "end": "571200"
  },
  {
    "text": "this example shows obtaining a result",
    "start": "571200",
    "end": "573200"
  },
  {
    "text": "from a function that can fail",
    "start": "573200",
    "end": "575120"
  },
  {
    "text": "a result is an enum of either ok or",
    "start": "575120",
    "end": "577760"
  },
  {
    "text": "error",
    "start": "577760",
    "end": "578640"
  },
  {
    "text": "rust allows you to exhaustively match on",
    "start": "578640",
    "end": "580560"
  },
  {
    "text": "this enum ensuring at compile time that",
    "start": "580560",
    "end": "582800"
  },
  {
    "text": "you handle all possible variants",
    "start": "582800",
    "end": "585360"
  },
  {
    "text": "the second case shows a more terse",
    "start": "585360",
    "end": "587040"
  },
  {
    "text": "format this question mark will either",
    "start": "587040",
    "end": "589360"
  },
  {
    "text": "return the value if the result is okay",
    "start": "589360",
    "end": "592000"
  },
  {
    "text": "or it will exit the current method early",
    "start": "592000",
    "end": "594000"
  },
  {
    "text": "with the error",
    "start": "594000",
    "end": "595040"
  },
  {
    "text": "allowing errors to bubble up the rus",
    "start": "595040",
    "end": "597600"
  },
  {
    "text": "community is constantly working to make",
    "start": "597600",
    "end": "599279"
  },
  {
    "text": "error handling even better",
    "start": "599279",
    "end": "600880"
  },
  {
    "text": "and there are many great crates out",
    "start": "600880",
    "end": "602399"
  },
  {
    "text": "there that deal with ergonomics and",
    "start": "602399",
    "end": "604079"
  },
  {
    "text": "behavior related to error handling",
    "start": "604079",
    "end": "606560"
  },
  {
    "text": "the developers of rust have also done a",
    "start": "606560",
    "end": "608399"
  },
  {
    "text": "lot of work and continue to improve the",
    "start": "608399",
    "end": "610480"
  },
  {
    "text": "error messages produced by the compiler",
    "start": "610480",
    "end": "613120"
  },
  {
    "text": "while not all error messages are the",
    "start": "613120",
    "end": "615040"
  },
  {
    "text": "most informative",
    "start": "615040",
    "end": "616160"
  },
  {
    "text": "there is a great framework in place for",
    "start": "616160",
    "end": "618240"
  },
  {
    "text": "extremely descriptive messages which",
    "start": "618240",
    "end": "620240"
  },
  {
    "text": "underline the exact code the error is",
    "start": "620240",
    "end": "622160"
  },
  {
    "text": "referring to",
    "start": "622160",
    "end": "623120"
  },
  {
    "text": "and suggest exactly what needs to be",
    "start": "623120",
    "end": "625040"
  },
  {
    "text": "changed",
    "start": "625040",
    "end": "627519"
  },
  {
    "start": "627000",
    "end": "627000"
  },
  {
    "text": "rust also has an excellent ecosystem i'd",
    "start": "627760",
    "end": "630800"
  },
  {
    "text": "like to mention some crates which are",
    "start": "630800",
    "end": "632399"
  },
  {
    "text": "extremely high quality",
    "start": "632399",
    "end": "634079"
  },
  {
    "text": "the first is sergei which implements",
    "start": "634079",
    "end": "635760"
  },
  {
    "text": "serialization and deserialization",
    "start": "635760",
    "end": "638399"
  },
  {
    "text": "i genuinely miss serde in every other",
    "start": "638399",
    "end": "640560"
  },
  {
    "text": "language i use",
    "start": "640560",
    "end": "642160"
  },
  {
    "text": "many offer similar options but they are",
    "start": "642160",
    "end": "644079"
  },
  {
    "text": "simply not as useful",
    "start": "644079",
    "end": "645279"
  },
  {
    "text": "or feature complete sure automatically",
    "start": "645279",
    "end": "648079"
  },
  {
    "text": "derives the ability to convert rust",
    "start": "648079",
    "end": "649839"
  },
  {
    "text": "types to serialized strings such as json",
    "start": "649839",
    "end": "652560"
  },
  {
    "text": "yaml or avro",
    "start": "652560",
    "end": "653920"
  },
  {
    "text": "and vice versa the amount of control it",
    "start": "653920",
    "end": "656800"
  },
  {
    "text": "offers over dealing with little",
    "start": "656800",
    "end": "658079"
  },
  {
    "text": "serialization quirks is really",
    "start": "658079",
    "end": "659519"
  },
  {
    "text": "phenomenal",
    "start": "659519",
    "end": "661839"
  },
  {
    "text": "next is tracing tracing is being",
    "start": "661920",
    "end": "664240"
  },
  {
    "text": "developed by the tokyo project which is",
    "start": "664240",
    "end": "666240"
  },
  {
    "text": "one of the leading async runtimes",
    "start": "666240",
    "end": "668399"
  },
  {
    "text": "however tracing itself does not require",
    "start": "668399",
    "end": "670560"
  },
  {
    "text": "async",
    "start": "670560",
    "end": "672000"
  },
  {
    "text": "i think rust has a great story around",
    "start": "672000",
    "end": "673839"
  },
  {
    "text": "logging in general but tracing really",
    "start": "673839",
    "end": "675920"
  },
  {
    "text": "steps it up",
    "start": "675920",
    "end": "676959"
  },
  {
    "text": "it makes it very easy to introduce",
    "start": "676959",
    "end": "678720"
  },
  {
    "text": "structured logging to your application",
    "start": "678720",
    "end": "680640"
  },
  {
    "text": "which i consider to be necessary for",
    "start": "680640",
    "end": "682560"
  },
  {
    "text": "application monitoring",
    "start": "682560",
    "end": "684399"
  },
  {
    "text": "it also has the ability to instrument",
    "start": "684399",
    "end": "686079"
  },
  {
    "text": "your functions automatically",
    "start": "686079",
    "end": "687760"
  },
  {
    "text": "and you can configure it to output open",
    "start": "687760",
    "end": "690000"
  },
  {
    "text": "tracing data",
    "start": "690000",
    "end": "691040"
  },
  {
    "text": "which makes it very simple to slot your",
    "start": "691040",
    "end": "692800"
  },
  {
    "text": "rust application into your distributed",
    "start": "692800",
    "end": "694880"
  },
  {
    "text": "tracing architecture",
    "start": "694880",
    "end": "698000"
  },
  {
    "text": "last is prost which can generate rust",
    "start": "698399",
    "end": "700480"
  },
  {
    "text": "types from proto definitions",
    "start": "700480",
    "end": "702160"
  },
  {
    "text": "and tonic which can generate rpc clients",
    "start": "702160",
    "end": "704480"
  },
  {
    "text": "to use with these pros types",
    "start": "704480",
    "end": "707200"
  },
  {
    "text": "this makes it incredibly easy to develop",
    "start": "707200",
    "end": "709200"
  },
  {
    "text": "rust code to interact with grpc",
    "start": "709200",
    "end": "711200"
  },
  {
    "text": "endpoints like cri",
    "start": "711200",
    "end": "712560"
  },
  {
    "text": "and csi rust has also made great",
    "start": "712560",
    "end": "715600"
  },
  {
    "text": "documentation a major focus",
    "start": "715600",
    "end": "717680"
  },
  {
    "text": "it has first class language support for",
    "start": "717680",
    "end": "719519"
  },
  {
    "text": "doc strings and rust dock which ships",
    "start": "719519",
    "end": "721920"
  },
  {
    "text": "with rust",
    "start": "721920",
    "end": "722720"
  },
  {
    "text": "can be used to generate great",
    "start": "722720",
    "end": "724000"
  },
  {
    "text": "documentation pages including runnable",
    "start": "724000",
    "end": "726639"
  },
  {
    "text": "examples",
    "start": "726639",
    "end": "728079"
  },
  {
    "text": "rust also has strong support for",
    "start": "728079",
    "end": "730000"
  },
  {
    "text": "dependency management through its",
    "start": "730000",
    "end": "731440"
  },
  {
    "text": "package manager cargo",
    "start": "731440",
    "end": "733600"
  },
  {
    "text": "when working with crestlet we are",
    "start": "733600",
    "end": "735040"
  },
  {
    "text": "balancing a number of rapidly evolving",
    "start": "735040",
    "end": "736959"
  },
  {
    "text": "dependencies",
    "start": "736959",
    "end": "737920"
  },
  {
    "text": "changing kubernetes api versions and",
    "start": "737920",
    "end": "740160"
  },
  {
    "text": "complex combinations of libraries and",
    "start": "740160",
    "end": "742240"
  },
  {
    "text": "standalone binaries in a single",
    "start": "742240",
    "end": "744079"
  },
  {
    "text": "project cargo makes it a breeze to",
    "start": "744079",
    "end": "746320"
  },
  {
    "text": "manage all of this and is a very well",
    "start": "746320",
    "end": "748079"
  },
  {
    "text": "thought out tool",
    "start": "748079",
    "end": "750880"
  },
  {
    "text": "finally the rest community is very",
    "start": "751360",
    "end": "753279"
  },
  {
    "text": "welcoming and helpful",
    "start": "753279",
    "end": "754720"
  },
  {
    "text": "i found that their approach and attitude",
    "start": "754720",
    "end": "756880"
  },
  {
    "text": "is what makes the language",
    "start": "756880",
    "end": "758000"
  },
  {
    "text": "and crate so high quality and what makes",
    "start": "758000",
    "end": "760240"
  },
  {
    "text": "programming in rust a real pleasure",
    "start": "760240",
    "end": "763440"
  },
  {
    "text": "i would also like to mention some useful",
    "start": "763440",
    "end": "765440"
  },
  {
    "text": "crates specifically for kubernetes",
    "start": "765440",
    "end": "767360"
  },
  {
    "text": "development in rust",
    "start": "767360",
    "end": "769120"
  },
  {
    "text": "kate's open api contains automatically",
    "start": "769120",
    "end": "771600"
  },
  {
    "text": "generated types for the kubernetes open",
    "start": "771600",
    "end": "773920"
  },
  {
    "text": "api spec",
    "start": "773920",
    "end": "775440"
  },
  {
    "text": "it is very useful for manipulating",
    "start": "775440",
    "end": "777360"
  },
  {
    "text": "kubernetes manifests",
    "start": "777360",
    "end": "779040"
  },
  {
    "text": "and its documents are actually the main",
    "start": "779040",
    "end": "780959"
  },
  {
    "text": "docs i use for referencing kubernetes",
    "start": "780959",
    "end": "783200"
  },
  {
    "text": "api resources",
    "start": "783200",
    "end": "785360"
  },
  {
    "text": "second is cube which is the primary",
    "start": "785360",
    "end": "787440"
  },
  {
    "text": "kubernetes client for rust",
    "start": "787440",
    "end": "789680"
  },
  {
    "text": "it is what crestlet uses to parse cube",
    "start": "789680",
    "end": "791839"
  },
  {
    "text": "configs",
    "start": "791839",
    "end": "792720"
  },
  {
    "text": "connect to the api server patch",
    "start": "792720",
    "end": "794880"
  },
  {
    "text": "resources",
    "start": "794880",
    "end": "795839"
  },
  {
    "text": "and watch for pod changes finally kate",
    "start": "795839",
    "end": "798720"
  },
  {
    "text": "cri and kate csi",
    "start": "798720",
    "end": "800560"
  },
  {
    "text": "are crates that i have published which",
    "start": "800560",
    "end": "802160"
  },
  {
    "text": "provide automatically generated grpc",
    "start": "802160",
    "end": "804399"
  },
  {
    "text": "clients for cri and csi",
    "start": "804399",
    "end": "806480"
  },
  {
    "text": "respectively let's take a closer look at",
    "start": "806480",
    "end": "811040"
  },
  {
    "text": "the control loop used by cubelet to run",
    "start": "811040",
    "end": "813279"
  },
  {
    "text": "a pod",
    "start": "813279",
    "end": "814320"
  },
  {
    "text": "this is the loop that was developed for",
    "start": "814320",
    "end": "816000"
  },
  {
    "text": "the crestlet project based on observed",
    "start": "816000",
    "end": "818079"
  },
  {
    "text": "behavior in kubernetes",
    "start": "818079",
    "end": "820079"
  },
  {
    "text": "when a pot is added some validation",
    "start": "820079",
    "end": "822560"
  },
  {
    "text": "happens",
    "start": "822560",
    "end": "823120"
  },
  {
    "text": "and then the image pull policy is",
    "start": "823120",
    "end": "824720"
  },
  {
    "text": "evaluated to determine if images need to",
    "start": "824720",
    "end": "826959"
  },
  {
    "text": "be pulled",
    "start": "826959",
    "end": "828240"
  },
  {
    "text": "if an issue arises when pulling an image",
    "start": "828240",
    "end": "830720"
  },
  {
    "text": "an exponential back off is used to retry",
    "start": "830720",
    "end": "834079"
  },
  {
    "text": "after images are pulled we provision",
    "start": "834079",
    "end": "836480"
  },
  {
    "text": "storage volumes",
    "start": "836480",
    "end": "837760"
  },
  {
    "text": "which could also include collecting",
    "start": "837760",
    "end": "839279"
  },
  {
    "text": "config maps and secrets for the pod",
    "start": "839279",
    "end": "842399"
  },
  {
    "text": "next containers are started and we begin",
    "start": "842399",
    "end": "844720"
  },
  {
    "text": "monitoring for exits",
    "start": "844720",
    "end": "846959"
  },
  {
    "text": "if an error occurs the restart policy is",
    "start": "846959",
    "end": "849760"
  },
  {
    "text": "evaluated",
    "start": "849760",
    "end": "850720"
  },
  {
    "text": "and the pod either retries with back off",
    "start": "850720",
    "end": "853120"
  },
  {
    "text": "or enters a failed status",
    "start": "853120",
    "end": "856160"
  },
  {
    "text": "if no errors occurred the pod is",
    "start": "856160",
    "end": "858079"
  },
  {
    "text": "considered to have succeeded",
    "start": "858079",
    "end": "859600"
  },
  {
    "text": "this is useful for jobs finally",
    "start": "859600",
    "end": "862720"
  },
  {
    "text": "if the pod is marked for deletion by the",
    "start": "862720",
    "end": "864639"
  },
  {
    "text": "api cubelet sends signals to stop the",
    "start": "864639",
    "end": "867360"
  },
  {
    "text": "running containers",
    "start": "867360",
    "end": "868480"
  },
  {
    "text": "cleans up and exits this is a brief",
    "start": "868480",
    "end": "871680"
  },
  {
    "text": "overview and there are a lot of details",
    "start": "871680",
    "end": "873279"
  },
  {
    "text": "surrounding the behavior of cubelet",
    "start": "873279",
    "end": "875279"
  },
  {
    "text": "but i think this provides a good working",
    "start": "875279",
    "end": "877199"
  },
  {
    "text": "outline for debugging pods",
    "start": "877199",
    "end": "879600"
  },
  {
    "text": "note that inherent to this is our",
    "start": "879600",
    "end": "881279"
  },
  {
    "text": "control loop while sapod exists the",
    "start": "881279",
    "end": "884079"
  },
  {
    "text": "graph tries to get us into the running",
    "start": "884079",
    "end": "886079"
  },
  {
    "text": "state",
    "start": "886079",
    "end": "886959"
  },
  {
    "text": "the only way to get to states that",
    "start": "886959",
    "end": "888959"
  },
  {
    "text": "actually exit the loop are under",
    "start": "888959",
    "end": "890720"
  },
  {
    "text": "specific conditions such as pod deletion",
    "start": "890720",
    "end": "893199"
  },
  {
    "text": "or a restart policy of never",
    "start": "893199",
    "end": "896399"
  },
  {
    "start": "896000",
    "end": "896000"
  },
  {
    "text": "for crestlet we spent quite a bit of",
    "start": "896399",
    "end": "898160"
  },
  {
    "text": "time exploring how we could best",
    "start": "898160",
    "end": "899680"
  },
  {
    "text": "implement this control loop while still",
    "start": "899680",
    "end": "901600"
  },
  {
    "text": "allowing downstream developers to write",
    "start": "901600",
    "end": "903440"
  },
  {
    "text": "highly specialized cubelets",
    "start": "903440",
    "end": "905680"
  },
  {
    "text": "what we developed is thoroughly",
    "start": "905680",
    "end": "907040"
  },
  {
    "text": "documented in a blog post i wrote",
    "start": "907040",
    "end": "909040"
  },
  {
    "text": "earlier this year",
    "start": "909040",
    "end": "910560"
  },
  {
    "text": "to summarize we released a rust api for",
    "start": "910560",
    "end": "913360"
  },
  {
    "text": "building a state machine",
    "start": "913360",
    "end": "914720"
  },
  {
    "text": "which captures the logic of the control",
    "start": "914720",
    "end": "916560"
  },
  {
    "text": "loop and leverages rust's type system to",
    "start": "916560",
    "end": "919120"
  },
  {
    "text": "ensure correctness",
    "start": "919120",
    "end": "921040"
  },
  {
    "text": "this state machine is fully customizable",
    "start": "921040",
    "end": "923120"
  },
  {
    "text": "by the developer",
    "start": "923120",
    "end": "925040"
  },
  {
    "text": "the state machine has a number of",
    "start": "925040",
    "end": "926480"
  },
  {
    "text": "constraints which we believe",
    "start": "926480",
    "end": "928240"
  },
  {
    "text": "improve the reliability of the",
    "start": "928240",
    "end": "929680"
  },
  {
    "text": "application and these are enforced at",
    "start": "929680",
    "end": "931759"
  },
  {
    "text": "compile time",
    "start": "931759",
    "end": "933440"
  },
  {
    "text": "we ensure that only valid states are",
    "start": "933440",
    "end": "935440"
  },
  {
    "text": "used and only valid transitions between",
    "start": "935440",
    "end": "937839"
  },
  {
    "text": "states are taken",
    "start": "937839",
    "end": "939680"
  },
  {
    "text": "we also believe that the result of this",
    "start": "939680",
    "end": "941600"
  },
  {
    "text": "pattern is code that is much easier to",
    "start": "941600",
    "end": "943680"
  },
  {
    "text": "interpret and reason about",
    "start": "943680",
    "end": "945680"
  },
  {
    "text": "the cubic crate is responsible for",
    "start": "945680",
    "end": "947680"
  },
  {
    "text": "driving the state machine",
    "start": "947680",
    "end": "949279"
  },
  {
    "text": "and automatically handles updating the",
    "start": "949279",
    "end": "951199"
  },
  {
    "text": "pod status with the control plane on",
    "start": "951199",
    "end": "953120"
  },
  {
    "text": "state changes",
    "start": "953120",
    "end": "954720"
  },
  {
    "text": "the pattern also encourages that error",
    "start": "954720",
    "end": "956800"
  },
  {
    "text": "handling is done in the context of the",
    "start": "956800",
    "end": "958639"
  },
  {
    "text": "control loop",
    "start": "958639",
    "end": "959759"
  },
  {
    "text": "in other words rather than an exception",
    "start": "959759",
    "end": "962079"
  },
  {
    "text": "that prevents the pod from continuing",
    "start": "962079",
    "end": "964160"
  },
  {
    "text": "we explicitly transition to crash loop",
    "start": "964160",
    "end": "966320"
  },
  {
    "text": "back off and try again",
    "start": "966320",
    "end": "968240"
  },
  {
    "text": "matching the expected behavior of",
    "start": "968240",
    "end": "969839"
  },
  {
    "text": "kubernetes",
    "start": "969839",
    "end": "972639"
  },
  {
    "start": "972000",
    "end": "972000"
  },
  {
    "text": "to finish i would like to share an",
    "start": "973440",
    "end": "975279"
  },
  {
    "text": "overview of how the chrysler application",
    "start": "975279",
    "end": "977360"
  },
  {
    "text": "is architected",
    "start": "977360",
    "end": "978959"
  },
  {
    "text": "green boxes represent individual async",
    "start": "978959",
    "end": "981440"
  },
  {
    "text": "tasks",
    "start": "981440",
    "end": "982399"
  },
  {
    "text": "so this gives some idea of the",
    "start": "982399",
    "end": "983839"
  },
  {
    "text": "concurrency going on here",
    "start": "983839",
    "end": "986000"
  },
  {
    "text": "the yellow box represents the scope of",
    "start": "986000",
    "end": "988079"
  },
  {
    "text": "the cubelet crate",
    "start": "988079",
    "end": "989519"
  },
  {
    "text": "while the blue box is what is",
    "start": "989519",
    "end": "990959"
  },
  {
    "text": "implemented by downstream developers",
    "start": "990959",
    "end": "992800"
  },
  {
    "text": "when building a new cubelet",
    "start": "992800",
    "end": "995440"
  },
  {
    "text": "cubelet handles all communication with",
    "start": "995440",
    "end": "997440"
  },
  {
    "text": "the kubernetes control plane",
    "start": "997440",
    "end": "999199"
  },
  {
    "text": "including updating the node lease",
    "start": "999199",
    "end": "1001279"
  },
  {
    "text": "serving logs",
    "start": "1001279",
    "end": "1002480"
  },
  {
    "text": "monitoring for pod changes and updating",
    "start": "1002480",
    "end": "1005199"
  },
  {
    "text": "pod statuses",
    "start": "1005199",
    "end": "1006959"
  },
  {
    "text": "downstream developers implement a",
    "start": "1006959",
    "end": "1009040"
  },
  {
    "text": "provider trait",
    "start": "1009040",
    "end": "1010320"
  },
  {
    "text": "which is a set of methods that are",
    "start": "1010320",
    "end": "1011759"
  },
  {
    "text": "needed by cubelet including those for",
    "start": "1011759",
    "end": "1013759"
  },
  {
    "text": "reading pod logs",
    "start": "1013759",
    "end": "1015040"
  },
  {
    "text": "as well as initializing state for a pod",
    "start": "1015040",
    "end": "1017279"
  },
  {
    "text": "to run",
    "start": "1017279",
    "end": "1019680"
  },
  {
    "text": "when a new pod is created the pod event",
    "start": "1020240",
    "end": "1022720"
  },
  {
    "text": "dispatcher will spawn a new driver for",
    "start": "1022720",
    "end": "1024880"
  },
  {
    "text": "that pod",
    "start": "1024880",
    "end": "1026480"
  },
  {
    "text": "in step 1 this driver will call the",
    "start": "1026480",
    "end": "1029038"
  },
  {
    "text": "provider to initialize the pod state",
    "start": "1029039",
    "end": "1031600"
  },
  {
    "text": "and then create the initial state",
    "start": "1031600",
    "end": "1033280"
  },
  {
    "text": "machine state which is also specified by",
    "start": "1033280",
    "end": "1035918"
  },
  {
    "text": "the provider",
    "start": "1035919",
    "end": "1037760"
  },
  {
    "text": "in step 2 the pod driver will run the",
    "start": "1037760",
    "end": "1040079"
  },
  {
    "text": "handler associated with this initial",
    "start": "1040079",
    "end": "1042079"
  },
  {
    "text": "state",
    "start": "1042079",
    "end": "1042959"
  },
  {
    "text": "which will return the next state the pod",
    "start": "1042959",
    "end": "1045760"
  },
  {
    "text": "driver will iteratively",
    "start": "1045760",
    "end": "1047120"
  },
  {
    "text": "execute these state handlers until",
    "start": "1047120",
    "end": "1049600"
  },
  {
    "text": "either a state returns saying that it is",
    "start": "1049600",
    "end": "1051760"
  },
  {
    "text": "an",
    "start": "1051760",
    "end": "1052080"
  },
  {
    "text": "end state such as failed or succeeded or",
    "start": "1052080",
    "end": "1055200"
  },
  {
    "text": "the pod is deleted",
    "start": "1055200",
    "end": "1058320"
  },
  {
    "text": "when a pod is deleted or modified the",
    "start": "1058480",
    "end": "1060960"
  },
  {
    "text": "pod event dispatcher will notify the",
    "start": "1060960",
    "end": "1063120"
  },
  {
    "text": "appropriate pod driver",
    "start": "1063120",
    "end": "1065440"
  },
  {
    "text": "in step 3 after a pod is deleted the pod",
    "start": "1065440",
    "end": "1068880"
  },
  {
    "text": "driver will interrupt the execution of",
    "start": "1068880",
    "end": "1070799"
  },
  {
    "text": "the state machine",
    "start": "1070799",
    "end": "1072000"
  },
  {
    "text": "and jump to the terminated state which",
    "start": "1072000",
    "end": "1074000"
  },
  {
    "text": "is specified by the provider",
    "start": "1074000",
    "end": "1075840"
  },
  {
    "text": "and handle shutdown and cleanup",
    "start": "1075840",
    "end": "1080160"
  },
  {
    "text": "i think the takeaway from this slide is",
    "start": "1080160",
    "end": "1082160"
  },
  {
    "text": "that crestlet is a fairly complex",
    "start": "1082160",
    "end": "1084240"
  },
  {
    "text": "and highly concurrent application rust",
    "start": "1084240",
    "end": "1087200"
  },
  {
    "text": "gives our small team the confidence and",
    "start": "1087200",
    "end": "1089120"
  },
  {
    "text": "ability to iterate on apis",
    "start": "1089120",
    "end": "1091280"
  },
  {
    "text": "and rapidly add features while avoiding",
    "start": "1091280",
    "end": "1093919"
  },
  {
    "text": "entire classes of errors",
    "start": "1093919",
    "end": "1095520"
  },
  {
    "text": "and maintaining high code quality rust's",
    "start": "1095520",
    "end": "1098720"
  },
  {
    "text": "ecosystem provides many high quality",
    "start": "1098720",
    "end": "1101039"
  },
  {
    "text": "crates",
    "start": "1101039",
    "end": "1101840"
  },
  {
    "text": "a helpful community straightforward",
    "start": "1101840",
    "end": "1104000"
  },
  {
    "text": "dependency management",
    "start": "1104000",
    "end": "1105600"
  },
  {
    "text": "and automatic high quality documentation",
    "start": "1105600",
    "end": "1108880"
  },
  {
    "text": "many languages offer similar",
    "start": "1108880",
    "end": "1110480"
  },
  {
    "text": "capabilities but in my opinion rust",
    "start": "1110480",
    "end": "1112880"
  },
  {
    "text": "offers the least compromise",
    "start": "1112880",
    "end": "1115280"
  },
  {
    "text": "i feel that complex and highly",
    "start": "1115280",
    "end": "1116960"
  },
  {
    "text": "concurrent distributed applications like",
    "start": "1116960",
    "end": "1119039"
  },
  {
    "text": "this are especially suited for rust",
    "start": "1119039",
    "end": "1121280"
  },
  {
    "text": "and i hope you will check it out if you",
    "start": "1121280",
    "end": "1122799"
  },
  {
    "text": "haven't already",
    "start": "1122799",
    "end": "1124400"
  },
  {
    "text": "i'd like to wrap up with some key",
    "start": "1124400",
    "end": "1125840"
  },
  {
    "text": "takeaways from this talk",
    "start": "1125840",
    "end": "1127520"
  },
  {
    "text": "first we covered cubelet architecture",
    "start": "1127520",
    "end": "1129600"
  },
  {
    "text": "and communication patterns including the",
    "start": "1129600",
    "end": "1131600"
  },
  {
    "text": "components that it interacts with",
    "start": "1131600",
    "end": "1133360"
  },
  {
    "text": "and how it fits into a kubernetes",
    "start": "1133360",
    "end": "1135039"
  },
  {
    "text": "cluster i hope this information will be",
    "start": "1135039",
    "end": "1137360"
  },
  {
    "text": "useful to you in the future",
    "start": "1137360",
    "end": "1138799"
  },
  {
    "text": "for debugging and administration tasks",
    "start": "1138799",
    "end": "1140880"
  },
  {
    "text": "related to cubelet",
    "start": "1140880",
    "end": "1142640"
  },
  {
    "text": "next we covered pod behavior and pod",
    "start": "1142640",
    "end": "1144799"
  },
  {
    "text": "lifecycle",
    "start": "1144799",
    "end": "1145919"
  },
  {
    "text": "i have found a working understanding of",
    "start": "1145919",
    "end": "1147520"
  },
  {
    "text": "this to be extremely useful",
    "start": "1147520",
    "end": "1149440"
  },
  {
    "text": "for debugging pods that are failing to",
    "start": "1149440",
    "end": "1151200"
  },
  {
    "text": "run and understanding how deployment",
    "start": "1151200",
    "end": "1153280"
  },
  {
    "text": "stateful sets and jobs leverage this",
    "start": "1153280",
    "end": "1155200"
  },
  {
    "text": "behavior",
    "start": "1155200",
    "end": "1156720"
  },
  {
    "text": "finally we looked at rust and how it can",
    "start": "1156720",
    "end": "1159280"
  },
  {
    "text": "be an extremely strong language for",
    "start": "1159280",
    "end": "1161200"
  },
  {
    "text": "developing distributed applications",
    "start": "1161200",
    "end": "1163280"
  },
  {
    "text": "and in particular how you can develop",
    "start": "1163280",
    "end": "1164960"
  },
  {
    "text": "for kubernetes using rust",
    "start": "1164960",
    "end": "1167760"
  },
  {
    "text": "i'd also like to shout out the core",
    "start": "1167760",
    "end": "1169600"
  },
  {
    "text": "maintainers of the crestlip project",
    "start": "1169600",
    "end": "1171520"
  },
  {
    "text": "taylor matt and ivan who have been great",
    "start": "1171520",
    "end": "1174080"
  },
  {
    "text": "to work with",
    "start": "1174080",
    "end": "1174960"
  },
  {
    "text": "as we try to roll out some very",
    "start": "1174960",
    "end": "1176559"
  },
  {
    "text": "ambitious features",
    "start": "1176559",
    "end": "1178320"
  },
  {
    "text": "if you'd like to contribute to crustlet",
    "start": "1178320",
    "end": "1180320"
  },
  {
    "text": "you can find us on github and it would",
    "start": "1180320",
    "end": "1182080"
  },
  {
    "text": "be a great way to start working with",
    "start": "1182080",
    "end": "1183520"
  },
  {
    "text": "rust",
    "start": "1183520",
    "end": "1184960"
  },
  {
    "text": "thanks for coming to my talk and we now",
    "start": "1184960",
    "end": "1186799"
  },
  {
    "text": "have a few minutes for questions",
    "start": "1186799",
    "end": "1192399"
  }
]