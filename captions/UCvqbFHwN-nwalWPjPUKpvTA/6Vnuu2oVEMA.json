[
  {
    "text": "hello everyone uh thanks for joining today's session and today's session is about tips and tricks",
    "start": "359",
    "end": "7500"
  },
  {
    "text": "to migrate from eager to open Telemetry so first things first how many of you are using eager already",
    "start": "7500",
    "end": "15480"
  },
  {
    "text": "okay open Telemetry have you started using open telemetry",
    "start": "15480",
    "end": "20520"
  },
  {
    "text": "nice okay then I think you will understand most of the eager parts and open",
    "start": "20520",
    "end": "26039"
  },
  {
    "text": "Telemetry parts that I'll be discussing today so the agenda for today is prerequisites first setting the ground",
    "start": "26039",
    "end": "34399"
  },
  {
    "text": "correct first like what are the expectations from the talk and other things and why we have to migrate and we",
    "start": "34399",
    "end": "40980"
  },
  {
    "text": "will also go through a brief architectural overview of both eager and open Telemetry and we will be talking",
    "start": "40980",
    "end": "47760"
  },
  {
    "text": "about levels of migration and I also have a demo on how we migrate an application and the last one is eager",
    "start": "47760",
    "end": "54780"
  },
  {
    "text": "and open Telemetry boundaries so today everyone is a bit uh uh why are you didn't confuse that how",
    "start": "54780",
    "end": "60660"
  },
  {
    "text": "how and where do I plug agar over open telemetry so about me my name is vinit potlapati",
    "start": "60660",
    "end": "67380"
  },
  {
    "text": "I'm a product manager at timescale I work on the observability products at time scale primarily focused on Prom",
    "start": "67380",
    "end": "73439"
  },
  {
    "text": "scale and tops I'm also a maintainer of open Telemetry operator so if you're already using an open Telemetry operator",
    "start": "73439",
    "end": "79560"
  },
  {
    "text": "would love to hear out your experience and if you would like to check out the",
    "start": "79560",
    "end": "85259"
  },
  {
    "text": "products that I work from skill and tops they are open source so the links are shared at the bottom uh it's time scale",
    "start": "85259",
    "end": "92280"
  },
  {
    "text": "slash prom scale and time skill slash tops okay so the prerequisites so throughout the",
    "start": "92280",
    "end": "98460"
  },
  {
    "text": "session I'll also be using Tom as Hotel so open Telemetry synonym or a short",
    "start": "98460",
    "end": "103920"
  },
  {
    "text": "form is Hotel so the commonly used phrase so I'll be using that more often and the stock is focused on traces so",
    "start": "103920",
    "end": "111060"
  },
  {
    "text": "open Telemetry is also getting into metrics logs and other things but we will be confined and focusing on traces",
    "start": "111060",
    "end": "118200"
  },
  {
    "text": "the stock isn't intended to push the migration or I'm not selling anything here I'll just share what are the ways",
    "start": "118200",
    "end": "125880"
  },
  {
    "text": "how you can mix and match the things and what are the upsides of migrating and let's understand the components first",
    "start": "125880",
    "end": "132180"
  },
  {
    "text": "before we get into the talk so we know there are multiple components involved in",
    "start": "132180",
    "end": "137840"
  },
  {
    "text": "tracing both in eager and open Telemetry so the instrumentation layer usually has API and SDK so in eager we use open",
    "start": "137840",
    "end": "145860"
  },
  {
    "text": "tracing API and the SDK is eager client libraries",
    "start": "145860",
    "end": "151200"
  },
  {
    "text": "and the agent and collector is uh all eager so eager also has an agent and",
    "start": "151200",
    "end": "156239"
  },
  {
    "text": "collector and it also offers some native storage options within the collector uh",
    "start": "156239",
    "end": "161280"
  },
  {
    "text": "like Cassandra elasticsearch and there is a grpc based uh mechanism to plug the",
    "start": "161280",
    "end": "166620"
  },
  {
    "text": "external databases as well and eager also has a visualization layer which we'll be discussing later today and how",
    "start": "166620",
    "end": "173340"
  },
  {
    "text": "it helps you to visualize the traces even if you are using open Telemetry and in open Telemetry all it has is the",
    "start": "173340",
    "end": "180120"
  },
  {
    "text": "instrumentation layer and The Collector layer so eager is all the way from instrumentation to storage and",
    "start": "180120",
    "end": "186360"
  },
  {
    "text": "visualization but open telemetries on the instrumentation and collection stage okay why you have to migrate",
    "start": "186360",
    "end": "193739"
  },
  {
    "text": "now we have been hearing eager and been using agar for a while and igora served",
    "start": "193739",
    "end": "199800"
  },
  {
    "text": "really well for most of us and people love Jaeger and open Telemetry has been announced in 2019 cubicon na so exactly",
    "start": "199800",
    "end": "207720"
  },
  {
    "text": "it's like four years uh in San Diego and since then the project has been matured",
    "start": "207720",
    "end": "214140"
  },
  {
    "text": "and it's expanding itself into different observability signals and adding new capabilities so let's discuss on what",
    "start": "214140",
    "end": "221340"
  },
  {
    "text": "are those capabilities and why does migration would make sense so the first thing is eager client libraries have",
    "start": "221340",
    "end": "227340"
  },
  {
    "text": "been announced end of life support earlier this year and eager community",
    "start": "227340",
    "end": "232920"
  },
  {
    "text": "and the maintainers also are supportive and advocating towards open Telemetry SDK so if you are using eager already",
    "start": "232920",
    "end": "240299"
  },
  {
    "text": "you have to move from eager client libraries to the open Telemetry SDK and will be briefly talking on how to do the",
    "start": "240299",
    "end": "247980"
  },
  {
    "text": "instrumentation layer migration and the second one is open Telemetry is a new standard as we all know for in",
    "start": "247980",
    "end": "253680"
  },
  {
    "text": "instrumentation and collection of data so it takes some industry best practices",
    "start": "253680",
    "end": "259019"
  },
  {
    "text": "that were part of open tracing open sensors and all and it also adds new capabilities that were not existing in",
    "start": "259019",
    "end": "266360"
  },
  {
    "text": "eager instrumentation side so and the collection layer is really rich it gives you options to configure",
    "start": "266360",
    "end": "274380"
  },
  {
    "text": "different sources and destinations to ship your data and and the last thing is",
    "start": "274380",
    "end": "280440"
  },
  {
    "text": "open Telemetry does support Auto instrumentation which means you don't have to do any code changes you can just",
    "start": "280440",
    "end": "286580"
  },
  {
    "text": "run a sidecar and it just works so levels of migration so there are two",
    "start": "286580",
    "end": "292500"
  },
  {
    "text": "levels of migration one is the instrumentation layer the other one is the collector layer",
    "start": "292500",
    "end": "298080"
  },
  {
    "text": "before we get into the migrations and how it's done let's do a quick uh",
    "start": "298080",
    "end": "304199"
  },
  {
    "text": "walk through the in eager and open Telemetry architecture so the first slide is the eager",
    "start": "304199",
    "end": "310199"
  },
  {
    "text": "architecture you can see on the left side there is an application the eager client and the eager agent so the",
    "start": "310199",
    "end": "315660"
  },
  {
    "text": "application is instrumented using eager that's uh and the spans are being pushed",
    "start": "315660",
    "end": "321240"
  },
  {
    "text": "to eager agent and from there you can see there is eager collector and the database and the UI so this is the",
    "start": "321240",
    "end": "326880"
  },
  {
    "text": "complete echo system and the components that are involved in eager architecture and the spark jobs are something very",
    "start": "326880",
    "end": "333060"
  },
  {
    "text": "optional if you need them you can run uh coming to the open Telemetry architecture so here in the open",
    "start": "333060",
    "end": "338639"
  },
  {
    "text": "Telemetry architecture we do not see the UI layer or the storage layer as I said it's all about the instrumentation and",
    "start": "338639",
    "end": "344580"
  },
  {
    "text": "data processing pipeline which is open Telemetry collector itself so you can see here open Telemetry uh collector",
    "start": "344580",
    "end": "352199"
  },
  {
    "text": "being ran as an agent so um so there is so much of confusion between",
    "start": "352199",
    "end": "357660"
  },
  {
    "text": "this agent and collector so we collect the agent or something if it is run within the host or as a site card to the",
    "start": "357660",
    "end": "364560"
  },
  {
    "text": "application then we say it as an agent but it's the same collector that's being running and collector acts as a",
    "start": "364560",
    "end": "370919"
  },
  {
    "text": "centralized processing pipeline where directly your applications can send the",
    "start": "370919",
    "end": "376440"
  },
  {
    "text": "spans to The Collector or your agents can send the data to The Collector okay let's start with the",
    "start": "376440",
    "end": "383039"
  },
  {
    "text": "instrumentation layer so you can see in the instrumentation layer as I said there is this API and SDK so to",
    "start": "383039",
    "end": "389819"
  },
  {
    "text": "understand what are the components involved in API you can see this image it has the Tracer API context API and",
    "start": "389819",
    "end": "396000"
  },
  {
    "text": "the meter APS the meter apis for metrics and in the SDK you can see there is this",
    "start": "396000",
    "end": "401520"
  },
  {
    "text": "propagator span processor and aggregator so these are the functionalities that the API and SDK offer you during the",
    "start": "401520",
    "end": "408539"
  },
  {
    "text": "instrumentation so as I said the migration can be done in instrumentation using two ways which",
    "start": "408539",
    "end": "414900"
  },
  {
    "text": "is open Telemetry shim and complete reinstmentation so we will be doing a demo and discussing more about the",
    "start": "414900",
    "end": "421500"
  },
  {
    "text": "re-instrumentation but there are libraries already available uh in the internet uh on how to do the open",
    "start": "421500",
    "end": "428580"
  },
  {
    "text": "Telemetry migration using the shim there is a blog post in medium which uses the Java application as a demo to migrate",
    "start": "428580",
    "end": "435660"
  },
  {
    "text": "from open uh the eager client libraries to the uh open Telemetry using the shim so the",
    "start": "435660",
    "end": "442680"
  },
  {
    "text": "shim is all about it consists a set of classes that implement the open tracing while still using the open open",
    "start": "442680",
    "end": "449039"
  },
  {
    "text": "Telemetry construct so with a very minimal code change like the blog post that's been authored by jurassi's uh",
    "start": "449039",
    "end": "456300"
  },
  {
    "text": "published in the uh internet so it's already available and it's just hardly",
    "start": "456300",
    "end": "461520"
  },
  {
    "text": "takes five minutes to migrate by just swapping out the dependencies and the Imports and the second one is uh it's",
    "start": "461520",
    "end": "467520"
  },
  {
    "text": "all it's also helps you to do a to get on to the open Telemetry SDK in",
    "start": "467520",
    "end": "472919"
  },
  {
    "text": "no time you don't have to do the complete reinstmentation so if you have less bandwidth and if you want to use uh",
    "start": "472919",
    "end": "478500"
  },
  {
    "text": "some client base sampling in the open Telemetry or you want to use open Telemetry SDK for some reason you can",
    "start": "478500",
    "end": "484500"
  },
  {
    "text": "definitely start with a shim and this is the blog post that's I've been referencing to that's been",
    "start": "484500",
    "end": "490680"
  },
  {
    "text": "mentioned here and the complete reinstmentation so why you have to do the complete reinstrumentation so the",
    "start": "490680",
    "end": "496259"
  },
  {
    "text": "complete reinstrumentation offers a hotel as a package so you get all the capabilities right from the scratch from",
    "start": "496259",
    "end": "502080"
  },
  {
    "text": "the code of open Telemetry the semantics and in future you can also expand your",
    "start": "502080",
    "end": "507360"
  },
  {
    "text": "open Telemetry instrumentation into metrics and logs so this is just a starting point for you if you get",
    "start": "507360",
    "end": "513719"
  },
  {
    "text": "started with open Telemetry and it's also easily integrated with auto instrumentation application so if you if",
    "start": "513719",
    "end": "520740"
  },
  {
    "text": "you want to do an auto instrumentation for few applications and if you have other applications if you which you need",
    "start": "520740",
    "end": "526440"
  },
  {
    "text": "more granular details so the auto instrumentation gives more often higher level traces and spans with manual",
    "start": "526440",
    "end": "534240"
  },
  {
    "text": "instrumentation you'll have more flexibility over what you want to capture and what you want to measure so",
    "start": "534240",
    "end": "539700"
  },
  {
    "text": "it easily gets integrated with auto instrumentation and the normal apps",
    "start": "539700",
    "end": "544980"
  },
  {
    "text": "so it's demo time let's just get started so my demo is uh is a clone from open",
    "start": "544980",
    "end": "553740"
  },
  {
    "text": "tracing tutorial so there is an open tracing tutorial in uh in GitHub authored by Yuri to understand how the",
    "start": "553740",
    "end": "560700"
  },
  {
    "text": "instrumentation works so I'm just taking the same application I'll be showing you what's the eager instrumentation like",
    "start": "560700",
    "end": "566880"
  },
  {
    "text": "and how's the opened Elementary instrumentation is like and it's a very",
    "start": "566880",
    "end": "571920"
  },
  {
    "text": "simple app so we have a greeting client and we have a formatter and a publisher so the greeting client basically sends a",
    "start": "571920",
    "end": "578519"
  },
  {
    "text": "request to the formatter and the formatter basically formats the string and then greeting client publishes the string to the publisher just to do an",
    "start": "578519",
    "end": "585480"
  },
  {
    "text": "STD out so the demo is available in this GitHub repository so I just pushed the demo to",
    "start": "585480",
    "end": "591600"
  },
  {
    "text": "uh to the GitHub okay",
    "start": "591600",
    "end": "597420"
  },
  {
    "text": "I hope the demo works okay so let's jump into the code before",
    "start": "597420",
    "end": "604440"
  },
  {
    "text": "we run it and see the differences so I have the eager application here and the",
    "start": "604440",
    "end": "610019"
  },
  {
    "text": "this is the eager client go uh so no the this is a client application which basically sends the request to the",
    "start": "610019",
    "end": "616980"
  },
  {
    "text": "formatter and the publisher so here you can see it's all the normal",
    "start": "616980",
    "end": "622800"
  },
  {
    "text": "code it's nothing fancy it's a main uh here you have the main and then the interesting part is here in the tracing",
    "start": "622800",
    "end": "629339"
  },
  {
    "text": "you have to see the init Tracer so we all know that if we want to start with the tracing there is an init function which basically gives you the Tracer and",
    "start": "629339",
    "end": "636060"
  },
  {
    "text": "then you start using the Tracer referencing it across your life cycle of the code",
    "start": "636060",
    "end": "643080"
  },
  {
    "text": "so here we have started uh instrumenting and we are saying okay start span and",
    "start": "643080",
    "end": "648480"
  },
  {
    "text": "then finish and here we're also using the baggage as an example how you can",
    "start": "648480",
    "end": "653940"
  },
  {
    "text": "set the baggage to do the context propagation and pulling it so if you do not know the featured baggage so it's a",
    "start": "653940",
    "end": "662220"
  },
  {
    "text": "it's basically it gives you an ability to attach metadata during the context propagation without a need to change the",
    "start": "662220",
    "end": "669180"
  },
  {
    "text": "API so if you have to send some metadata from your application a to all the way down after four requests you can just",
    "start": "669180",
    "end": "676140"
  },
  {
    "text": "put it in the context and it just flows through the last application that you want to send it so without any",
    "start": "676140",
    "end": "681620"
  },
  {
    "text": "disturbance or changing the intermediate applications to capture it and forward it forward so it just gets attached to",
    "start": "681620",
    "end": "688320"
  },
  {
    "text": "the context so here uh we are calling the format string function and it's making an HTTP call to 8081 and we are",
    "start": "688320",
    "end": "697740"
  },
  {
    "text": "injecting a few data so the some data which is context and HTTP headers and",
    "start": "697740",
    "end": "702959"
  },
  {
    "text": "this is HTTP headers carrier here and yeah we are doing a request and",
    "start": "702959",
    "end": "710339"
  },
  {
    "text": "yeah then we are also calling the print hello which is a publisher service here is the publisher service",
    "start": "710339",
    "end": "715440"
  },
  {
    "text": "so yeah and the publisher the formulator service is nothing but a server just running uh just waiting for the request",
    "start": "715440",
    "end": "721620"
  },
  {
    "text": "to format the string and send it out and if you see the publisher service the",
    "start": "721620",
    "end": "727320"
  },
  {
    "text": "publisher service is all about just take the request and do an STD out okay so",
    "start": "727320",
    "end": "733320"
  },
  {
    "text": "first we will run the eager all in one which is uh which basically runs the eager UI eager collector and in memory",
    "start": "733320",
    "end": "740940"
  },
  {
    "text": "storage by default",
    "start": "740940",
    "end": "744019"
  },
  {
    "text": "I hope the font is visible okay",
    "start": "746339",
    "end": "750140"
  },
  {
    "text": "so the eager collector is up eager all in one",
    "start": "759540",
    "end": "764600"
  },
  {
    "text": "and now let's let's run the eager application so",
    "start": "765000",
    "end": "773279"
  },
  {
    "text": "now I'm first running the publisher go run publisher dot go it's up",
    "start": "773279",
    "end": "782060"
  },
  {
    "text": "okay foreign",
    "start": "797399",
    "end": "802579"
  },
  {
    "text": "so I'm sending a string as a greeting called hello cubicon from my client to",
    "start": "807000",
    "end": "812040"
  },
  {
    "text": "the formatter and then publisher so we can see now the formatter is running the publisher is running and the client is",
    "start": "812040",
    "end": "817440"
  },
  {
    "text": "uh here so first let's check the eager UI",
    "start": "817440",
    "end": "824000"
  },
  {
    "text": "so as I just uh restarted The Collector so now you can see uh",
    "start": "824760",
    "end": "830959"
  },
  {
    "text": "okay there are no services or no data because we haven't yet pushed the data",
    "start": "831240",
    "end": "836279"
  },
  {
    "text": "to Jaeger it's just the eager UI Egger query spans itself and now I'm just doing hello cubicon and",
    "start": "836279",
    "end": "844440"
  },
  {
    "text": "the demo just works as this is authored by Jurassic like this is this is not uh",
    "start": "844440",
    "end": "849540"
  },
  {
    "text": "not just Yuri so it's from open tracing demo and now let's check the traces here",
    "start": "849540",
    "end": "858120"
  },
  {
    "text": "so the traces are here and you can see it's it says hello and",
    "start": "858120",
    "end": "863220"
  },
  {
    "text": "you can see the request has went from Hello World to formatter to publisher",
    "start": "863220",
    "end": "868320"
  },
  {
    "text": "now let's just check the open Telemetry code and check how it works so I'll be a bit quick here yeah",
    "start": "868320",
    "end": "876839"
  },
  {
    "text": "uh the open this is the open Telemetry instrumentation so now you can see you have used the hotel Trace baggage and",
    "start": "876839",
    "end": "884220"
  },
  {
    "text": "all the inputs here so I'm not using anything from eager or open Telemetry and it's it's the same you just init the",
    "start": "884220",
    "end": "890579"
  },
  {
    "text": "Tracer and then you can start the context and uh I feel a few areas it's even simplifies for example doing the",
    "start": "890579",
    "end": "897720"
  },
  {
    "text": "context baggage and headers it felt easy for me at least in go and here we are",
    "start": "897720",
    "end": "903420"
  },
  {
    "text": "doing an HTTP request uh to uh formatter and here you have publisher so",
    "start": "903420",
    "end": "910079"
  },
  {
    "text": "let's now run open Telemetry and check the spans",
    "start": "910079",
    "end": "915440"
  },
  {
    "text": "okay",
    "start": "926100",
    "end": "928459"
  },
  {
    "text": "the formatter is up and now let's",
    "start": "956720",
    "end": "962399"
  },
  {
    "text": "do the same from the client but it's instrumented using Hotel",
    "start": "962399",
    "end": "968300"
  },
  {
    "text": "okay so I'm just doing the same now",
    "start": "974519",
    "end": "979560"
  },
  {
    "text": "hello cubicon",
    "start": "979560",
    "end": "982760"
  },
  {
    "text": "as I'm saying",
    "start": "985980",
    "end": "989000"
  },
  {
    "text": "did I change anything no",
    "start": "993120",
    "end": "996800"
  },
  {
    "text": "let's just check it out that's format",
    "start": "1009380",
    "end": "1014079"
  },
  {
    "text": "okay I'll just give it another 30 seconds let's just check I just",
    "start": "1030140",
    "end": "1036280"
  },
  {
    "text": "let's just check it is did the spans come out",
    "start": "1040459",
    "end": "1045938"
  },
  {
    "text": "now the spans aren't out from open Telemetry yet",
    "start": "1053360",
    "end": "1058360"
  },
  {
    "text": "okay I think I got it yep now it just worked it says the comma",
    "start": "1073760",
    "end": "1082120"
  },
  {
    "text": "yep now you here you can see the greeting client and uh it's just a few seconds ago it's",
    "start": "1082580",
    "end": "1088580"
  },
  {
    "text": "been it has come from the open Telemetry and here we can go to the formatter service and check the tags so now here",
    "start": "1088580",
    "end": "1096260"
  },
  {
    "text": "it says uh go client and it's instrumented using the library open telemetry.io so these",
    "start": "1096260",
    "end": "1103400"
  },
  {
    "text": "are the spans from open Telemetry instrumented using open Telemetry and they're the same so this is what I",
    "start": "1103400",
    "end": "1109760"
  },
  {
    "text": "wanted to show it's a very small demo But it includes all context propagation using the baggage doing an init trace",
    "start": "1109760",
    "end": "1116000"
  },
  {
    "text": "and all like the basic stuff that we use during the instrumentation",
    "start": "1116000",
    "end": "1121700"
  },
  {
    "text": "and yeah that's that's the demo I had just to show how easy it is like to run",
    "start": "1121700",
    "end": "1127760"
  },
  {
    "text": "and use agar alongside open Telemetry instrumentation so now the eager collector is running and uh the recent",
    "start": "1127760",
    "end": "1134000"
  },
  {
    "text": "feature in eager has supported uh ingesting the otlp uh traces uh coming",
    "start": "1134000",
    "end": "1139039"
  },
  {
    "text": "from your application so the data is coming in the otlp format as the exporter and now we are pushing it to",
    "start": "1139039",
    "end": "1145280"
  },
  {
    "text": "the eager and another interesting fact that I miss to explain is that okay if you",
    "start": "1145280",
    "end": "1152360"
  },
  {
    "text": "see the Tracer here you can I have written a code in a way that you can",
    "start": "1152360",
    "end": "1159340"
  },
  {
    "text": "okay you I have written a code in this way that now you can configure the eager",
    "start": "1159340",
    "end": "1164419"
  },
  {
    "text": "endpoint or open Telemetry endpoint it just uses the uh any Tracer if you want to use eager endpoint you want to send",
    "start": "1164419",
    "end": "1170240"
  },
  {
    "text": "to the eager it's it's this init provider for eager if you want to use open Telemetry you can use open",
    "start": "1170240",
    "end": "1176419"
  },
  {
    "text": "Telemetry it's just logic to send traces that are being instrumented using open Telemetry in both eager and open",
    "start": "1176419",
    "end": "1182900"
  },
  {
    "text": "Telemetry formats so if you have some limitation on the backend that you have to send traces only in the eager format",
    "start": "1182900",
    "end": "1188960"
  },
  {
    "text": "you can use something like this and it just works",
    "start": "1188960",
    "end": "1194200"
  },
  {
    "text": "okay and the question comes as the context",
    "start": "1195740",
    "end": "1201020"
  },
  {
    "text": "propagation like now you have tens of applications that are already instrumented using agar and you you are",
    "start": "1201020",
    "end": "1206539"
  },
  {
    "text": "starting a new application uh from scratch for the development the always the question is do I need to start with",
    "start": "1206539",
    "end": "1211700"
  },
  {
    "text": "eager or do I need to start with open Telemetry so the recommendation is you should start with open Telemetry and the",
    "start": "1211700",
    "end": "1217280"
  },
  {
    "text": "context propagation just works because eager supports eager supports the eager B3 and W3 see context propagation and",
    "start": "1217280",
    "end": "1223940"
  },
  {
    "text": "open Telemetry does support all three but if you have different applications talking to a same application in",
    "start": "1223940",
    "end": "1229100"
  },
  {
    "text": "different context propagation the open Telemetry SDK also supports uh enabling",
    "start": "1229100",
    "end": "1235100"
  },
  {
    "text": "or using multiple contacts at the same time so if application is instrumented",
    "start": "1235100",
    "end": "1240500"
  },
  {
    "text": "using open Telemetry it can understand it can receive the request using the context propagation eager w3c and B3 at",
    "start": "1240500",
    "end": "1248059"
  },
  {
    "text": "a time so you don't have to uh just stick with only one context propagation",
    "start": "1248059",
    "end": "1253160"
  },
  {
    "text": "so it just works and there is a article in medium written on explaining the same how you can do mix and match match of",
    "start": "1253160",
    "end": "1259460"
  },
  {
    "text": "context propagation between the applications okay the impact so now we have seen the",
    "start": "1259460",
    "end": "1264980"
  },
  {
    "text": "migration and how you can do the migration now what's the impact after you migrate so obviously you have an",
    "start": "1264980",
    "end": "1270980"
  },
  {
    "text": "improved Tracer implementation as I said the baggage and other things just work and the switch to the open Telemetry SDK",
    "start": "1270980",
    "end": "1277960"
  },
  {
    "text": "while using uh the open open tracing is also a possibility as using the shim",
    "start": "1277960",
    "end": "1283760"
  },
  {
    "text": "just makes this easy for you and there is also an improved performance I keep reading in the readme and in other",
    "start": "1283760",
    "end": "1289820"
  },
  {
    "text": "places so the open Telemetry sdks are more performant and access to open",
    "start": "1289820",
    "end": "1295100"
  },
  {
    "text": "Telemetry framework plugins so we are there is uh each language has its own",
    "start": "1295100",
    "end": "1300679"
  },
  {
    "text": "way of integrating into the SDK so it it has a feature Rich framework plugins",
    "start": "1300679",
    "end": "1306919"
  },
  {
    "text": "and now let us understand migrating in The Collector layer so as I said we have two levels of migration one is the",
    "start": "1306919",
    "end": "1313400"
  },
  {
    "text": "instrumentation layer that we have seen that's the code and now we will see the migration into open Telemetry without touching the code or without disturbing",
    "start": "1313400",
    "end": "1320000"
  },
  {
    "text": "your applications so this is uh the usual architecture",
    "start": "1320000",
    "end": "1326120"
  },
  {
    "text": "when you are deploying eager collector and on the left and on the right you can see how you can add open Telemetry",
    "start": "1326120",
    "end": "1333200"
  },
  {
    "text": "collector into your existing architecture so you don't have to do any open Telemetry code changes in your",
    "start": "1333200",
    "end": "1340700"
  },
  {
    "text": "applications you can just use open Telemetry character because open Telemetry collector can receive the data",
    "start": "1340700",
    "end": "1346100"
  },
  {
    "text": "from eager and different formats so we'll be talking about how you can configure the collectors in the upcoming",
    "start": "1346100",
    "end": "1351559"
  },
  {
    "text": "slides but this slide is all about if you have an architecture as a left acre collector your applications are sending",
    "start": "1351559",
    "end": "1357799"
  },
  {
    "text": "traces from eager to The Collector and it's going to the stage storage backend all you have to do is put an open Telemetry collector in between the",
    "start": "1357799",
    "end": "1364220"
  },
  {
    "text": "applications and regular collector so the question now comes is why you need an open Telemetry collector when you",
    "start": "1364220",
    "end": "1370400"
  },
  {
    "text": "already have an acre collector so the open Telemetry collector eases the",
    "start": "1370400",
    "end": "1375500"
  },
  {
    "text": "uses the data collection pipeline so if you have metrics traces logs all coming into from",
    "start": "1375500",
    "end": "1382940"
  },
  {
    "text": "your applications you can just run open Telemetry collector and it can do it can process all this you can configure the",
    "start": "1382940",
    "end": "1388280"
  },
  {
    "text": "pipelines for example you can also use span metrics processor which is which basically generates the metrics out of",
    "start": "1388280",
    "end": "1393980"
  },
  {
    "text": "your spans and the processor is available in The Collector and here in the bottom I'm just putting",
    "start": "1393980",
    "end": "1399860"
  },
  {
    "text": "a storage backend as prompt scale so it just works with open Telemetry and eager",
    "start": "1399860",
    "end": "1405080"
  },
  {
    "text": "and let's understand the differences between the eager and open Telemetry collectors so the eager collector has",
    "start": "1405080",
    "end": "1410120"
  },
  {
    "text": "more flexible sampling whereas open Telemetry collector has sampling processors too but the eager",
    "start": "1410120",
    "end": "1417500"
  },
  {
    "text": "collector has more in terms of for example the Adaptive sampling has been",
    "start": "1417500",
    "end": "1422539"
  },
  {
    "text": "released in eager one two six so it's available in collector I'm not sure it's there in the open Telemetry but yeah you",
    "start": "1422539",
    "end": "1428539"
  },
  {
    "text": "have wide uh options for you for the sampling and eager collector and an eager collector",
    "start": "1428539",
    "end": "1434059"
  },
  {
    "text": "you have entry uh storage options where you can use Cassandra elasticsearch or",
    "start": "1434059",
    "end": "1439580"
  },
  {
    "text": "use the grpc based storage plugin for the backend in open Telemetry collector as I said you can use receivers",
    "start": "1439580",
    "end": "1445340"
  },
  {
    "text": "exporters and processors which helps you to build the data pipelines com data coming from different sources to the",
    "start": "1445340",
    "end": "1451580"
  },
  {
    "text": "different destinations so this is the hotel collector",
    "start": "1451580",
    "end": "1456679"
  },
  {
    "text": "configuration you can see on the left it has the receivers exporters and services so in receivers you basically configure",
    "start": "1456679",
    "end": "1462559"
  },
  {
    "text": "what are your sources where will you receive the data from and in the exporters you will basically configure where you want to forward the data to in",
    "start": "1462559",
    "end": "1469580"
  },
  {
    "text": "Services you will basically map this receivers and exporters to build a pipeline so on the right hand side you",
    "start": "1469580",
    "end": "1475460"
  },
  {
    "text": "can see my open Telemetry collector is receiving data from applications which are instrumented using eager and in the",
    "start": "1475460",
    "end": "1481640"
  },
  {
    "text": "middle you can see the applications being instrumented using open Telemetry and you also have a Prometheus receiver",
    "start": "1481640",
    "end": "1488000"
  },
  {
    "text": "which can scrape the targets to get the metrics so you can just configure the",
    "start": "1488000",
    "end": "1493220"
  },
  {
    "text": "receivers and it just works and even during the exporters you can parallely stream the data to your SAS backends or",
    "start": "1493220",
    "end": "1499460"
  },
  {
    "text": "in in-house storage systems anywhere so you can also duplicate the data between systems and if you want to move away",
    "start": "1499460",
    "end": "1505400"
  },
  {
    "text": "from one storage engine to another there is zero lock in all you have to do is change some configuration in the open Telemetry collector and it just works so",
    "start": "1505400",
    "end": "1512360"
  },
  {
    "text": "this is the anatomy of the open Telemetry collector so you can see if you see The Collector on the left side",
    "start": "1512360",
    "end": "1517400"
  },
  {
    "text": "it's all receivers it's otlp receiver Zipkin eager receiver so if you have any Legacy applications or any other",
    "start": "1517400",
    "end": "1523640"
  },
  {
    "text": "applications which are sending you some data in different formats Hotel collector should definitely have the receivers for them I think there are",
    "start": "1523640",
    "end": "1530179"
  },
  {
    "text": "already like 20 plus receivers in the open Telemetry collector country we can just use them and these are the",
    "start": "1530179",
    "end": "1535460"
  },
  {
    "text": "exporters and you also have processors where you can translate the data do some",
    "start": "1535460",
    "end": "1540559"
  },
  {
    "text": "kind of sampling filtering and everything and the exporters basically map the state or send the data to the",
    "start": "1540559",
    "end": "1547460"
  },
  {
    "text": "backends and the impact so if you use the open Telemetry collector as I said this makes",
    "start": "1547460",
    "end": "1553820"
  },
  {
    "text": "the transition much easier and it's easy to start it's all about just running the open Telemetry collector and it's it",
    "start": "1553820",
    "end": "1559940"
  },
  {
    "text": "gives you the ability to build the pipelines on how you want to send the data and where you want to send the data",
    "start": "1559940",
    "end": "1565340"
  },
  {
    "text": "uh and all yep and in now you have seen in the in the",
    "start": "1565340",
    "end": "1572240"
  },
  {
    "text": "second migration which is okay you can add open Telemetry collector uh in in the",
    "start": "1572240",
    "end": "1578779"
  },
  {
    "text": "with your a good collector so now we will also see how why you have to use otil in Jaeger so you can receive data",
    "start": "1578779",
    "end": "1585740"
  },
  {
    "text": "from multiple sources and process the data using wide data processing tools and you can also export it to the",
    "start": "1585740",
    "end": "1592039"
  },
  {
    "text": "multiple backends and it also supports metrics traces and other things so here you can see uh it's the same but here we",
    "start": "1592039",
    "end": "1599059"
  },
  {
    "text": "are adding the open uh uh open Telemetry collector just in front of eager collector so that it just",
    "start": "1599059",
    "end": "1605059"
  },
  {
    "text": "works it just sends the data to the eager collector whereas in the past we have seen uh we are just replacing the",
    "start": "1605059",
    "end": "1611419"
  },
  {
    "text": "eager collector with open Telemetry collector so it just works so if you have any storage backend that's compatible with open Telemetry collector",
    "start": "1611419",
    "end": "1617900"
  },
  {
    "text": "you just put the exporter saying that hey I want to send the data to Cassandra",
    "start": "1617900",
    "end": "1623179"
  },
  {
    "text": "or prom scale you just configure the exporter and it just sends the data here",
    "start": "1623179",
    "end": "1628220"
  },
  {
    "text": "if you are using eager in memory or Badger storage you can still use the eager collector but all you have to do",
    "start": "1628220",
    "end": "1634400"
  },
  {
    "text": "is configure eager exporter and it forwards the data coming from your applications to open Telemetry collector",
    "start": "1634400",
    "end": "1640460"
  },
  {
    "text": "to the eager collector yep and the impact is you can get best in both the world so you can if you have",
    "start": "1640460",
    "end": "1646760"
  },
  {
    "text": "any sampling mechanisms that needs to be done you can do a sampling in open Telemetry collector and you can do a",
    "start": "1646760",
    "end": "1652340"
  },
  {
    "text": "sampling in eager collectors too but it gets complex you just need to take some conscious decisions on how you want to",
    "start": "1652340",
    "end": "1658400"
  },
  {
    "text": "do but you can Leverage The in-memory and Badger storages and eager",
    "start": "1658400",
    "end": "1664460"
  },
  {
    "text": "also offers a grpc based remote right plugin so it just plugs into the databases that offer that integration",
    "start": "1664460",
    "end": "1670580"
  },
  {
    "text": "and querying and visualizing the traces so if you move to the open Telemetry collector there is no uh path to how you",
    "start": "1670580",
    "end": "1679220"
  },
  {
    "text": "connect to your traces how you visualize the traces and where do you store the Tracer so the open Telemetry project is all about collecting the data",
    "start": "1679220",
    "end": "1686779"
  },
  {
    "text": "instrumenting the data and collecting the data whereas with eager you can use the the eager UI to visualize the data",
    "start": "1686779",
    "end": "1693140"
  },
  {
    "text": "so if you are moving from eager to open Telemetry you should make sure how does your eager UI integrate to for",
    "start": "1693140",
    "end": "1699919"
  },
  {
    "text": "querying the traces and these are the hotel and eager",
    "start": "1699919",
    "end": "1705260"
  },
  {
    "text": "boundaries so on the left side you can see uh its hotel is all about the API SDK and The Collector whereas uh eager",
    "start": "1705260",
    "end": "1712880"
  },
  {
    "text": "is the query and matured native storage backends so in future the eager will be evolving into a platform for uh traces",
    "start": "1712880",
    "end": "1720380"
  },
  {
    "text": "whereas open Telemetry will be more like a instrumentation and a collection pipeline for all the observability data",
    "start": "1720380",
    "end": "1728000"
  },
  {
    "text": "yep and in conclusion all I want to say is start with hotel in some capacity it",
    "start": "1728000",
    "end": "1733580"
  },
  {
    "text": "could be the instrumentation layer using the shim or it could be a complete reinstrumentation or you can just introduce the hotel collector and start",
    "start": "1733580",
    "end": "1741100"
  },
  {
    "text": "using the spanometric processor or the other features from the open Telemetry collector",
    "start": "1741100",
    "end": "1747260"
  },
  {
    "text": "that's all I have thank you thanks for joining my talk",
    "start": "1747260",
    "end": "1752740"
  },
  {
    "text": "before I end my talk I just want to just show you the eager UI has recently",
    "start": "1755360",
    "end": "1761299"
  },
  {
    "text": "launched a monitoring tab which can give you uh which can visualize use this red metrics coming from your spans so now",
    "start": "1761299",
    "end": "1768620"
  },
  {
    "text": "you can with open Telemetry collector you can use the span metric processor it generates the metrics and you can send it to a Prometheus backend and the eager",
    "start": "1768620",
    "end": "1776240"
  },
  {
    "text": "UI directly queries the data from your Prometheus and visualizes this so this is not built it's all out of the box",
    "start": "1776240",
    "end": "1783140"
  },
  {
    "text": "built by eager UI all you have to do is run an open Telemetry collector and configure this parametric processor so",
    "start": "1783140",
    "end": "1789500"
  },
  {
    "text": "it's really cool I just wanted to show it if you're using eager you can leverage this feature",
    "start": "1789500",
    "end": "1794899"
  },
  {
    "text": "yep and let's get back to questions",
    "start": "1794899",
    "end": "1800260"
  },
  {
    "text": "I'll I'll be around yeah if you have questions uh just you can join me",
    "start": "1801620",
    "end": "1807220"
  }
]