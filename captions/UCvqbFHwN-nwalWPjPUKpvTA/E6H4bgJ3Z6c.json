[
  {
    "text": "all right so hello and welcome again everybody this is the the test started my sequel on kubernetes seminar and my",
    "start": "5240",
    "end": "13380"
  },
  {
    "text": "name is Randi Abernathy I am a CNC F ambassador and I'm a managing partner at",
    "start": "13380",
    "end": "18779"
  },
  {
    "text": "our XM cloud native consulting and training shot and we're basically here to hear sue sue morons discussion about",
    "start": "18779",
    "end": "26340"
  },
  {
    "text": "the test sugu was one of the co-creators of the tests at youtube and now is the",
    "start": "26340",
    "end": "34050"
  },
  {
    "text": "CTO of planet-scale and so sue cool if you would like please take it away",
    "start": "34050",
    "end": "39200"
  },
  {
    "text": "thanks Randi hi so just quickly give a",
    "start": "39200",
    "end": "44579"
  },
  {
    "text": "background about myself and we test we started working on with",
    "start": "44579",
    "end": "52890"
  },
  {
    "text": "tests on 2010 so it test is about nine years old as a project it was actually",
    "start": "52890",
    "end": "60809"
  },
  {
    "text": "born out of the need that we had at YouTube where we were managing many mice",
    "start": "60809",
    "end": "67409"
  },
  {
    "text": "equal instances and it was beginning to go out of control there was just too",
    "start": "67409",
    "end": "73080"
  },
  {
    "text": "many outages and you were up against the wall so Mike my co-creator and I decided",
    "start": "73080",
    "end": "79799"
  },
  {
    "text": "to think about what can we do to leap ahead of all the problems that we had we",
    "start": "79799",
    "end": "86040"
  },
  {
    "text": "were currently facing and essentially that's how we test was born a quick",
    "start": "86040",
    "end": "93299"
  },
  {
    "text": "background on what we test is for those of you who may not be familiar with it is even though it started as a way to to",
    "start": "93299",
    "end": "103740"
  },
  {
    "text": "just take care of immediate problems that is immediate problems that we were facing at YouTube what it has now become",
    "start": "103740",
    "end": "111299"
  },
  {
    "text": "is basically full-fledged sharding middleware for my sequel what that means",
    "start": "111299",
    "end": "117899"
  },
  {
    "text": "is this that if you install witness on your my sequel instance then you can",
    "start": "117899",
    "end": "125939"
  },
  {
    "text": "shard it underneath and as far as the application is concerned you get the impression that you are still talking to",
    "start": "125939",
    "end": "132720"
  },
  {
    "text": "a you know if database and that's a huge win for a lot",
    "start": "132720",
    "end": "139050"
  },
  {
    "text": "of people because without something like the tests you have to make pretty big",
    "start": "139050",
    "end": "146280"
  },
  {
    "text": "changes to your app if you if you want the shoddier database so that is one big",
    "start": "146280",
    "end": "151800"
  },
  {
    "text": "problem that with tassels yeah because of the fact that we were running it at",
    "start": "151800",
    "end": "157530"
  },
  {
    "text": "YouTube it is naturally massively scalable so any solution that we came up",
    "start": "157530",
    "end": "163470"
  },
  {
    "text": "with had to scale into millions of QPS and tens of thousands of nodes and also",
    "start": "163470",
    "end": "171299"
  },
  {
    "text": "it had to be highly available available which means that down time beyond a few",
    "start": "171299",
    "end": "176970"
  },
  {
    "text": "seconds is something that was something that someone something like YouTube",
    "start": "176970",
    "end": "182220"
  },
  {
    "text": "would not tolerate so we toss comfortably gives you five nines of",
    "start": "182220",
    "end": "187920"
  },
  {
    "text": "availability in most of the production workloads that it is currently running and last but not the least with us is",
    "start": "187920",
    "end": "195600"
  },
  {
    "text": "cloud native cloud native is actually a term that it's somewhat of a buzzword",
    "start": "195600",
    "end": "202100"
  },
  {
    "text": "but actually there are some very specific technical terms that you can use to evaluate whether a product is",
    "start": "202100",
    "end": "208799"
  },
  {
    "text": "cloud 80 or not and so I will go into some of the very specific things that",
    "start": "208799",
    "end": "215280"
  },
  {
    "text": "makes with test cloud native all right so these are some of the stats about B",
    "start": "215280",
    "end": "221820"
  },
  {
    "text": "test like I said it was started in 2010 and has been gaining popularity so",
    "start": "221820",
    "end": "227549"
  },
  {
    "text": "initially even when we decided to start with tests we open sourced it but it",
    "start": "227549",
    "end": "236700"
  },
  {
    "text": "wasn't really the impact wasn't really to have other people adopted because mostly because we wanted to expose the",
    "start": "236700",
    "end": "246569"
  },
  {
    "text": "work that we had done and also not have to reinvent that wheel if we went somewhere else right and so it was",
    "start": "246569",
    "end": "252569"
  },
  {
    "text": "mostly we were submitting code into the open source but just it was mostly just",
    "start": "252569",
    "end": "257970"
  },
  {
    "text": "for YouTube's own sake we used to just import that code back into YouTube and then launch it inside but around 2000",
    "start": "257970",
    "end": "267330"
  },
  {
    "text": "fifteen or sixteen Flipkart found us and then they said hey it looks like this is",
    "start": "267330",
    "end": "273000"
  },
  {
    "text": "something that we can also use and so then they start they worked on adopting",
    "start": "273000",
    "end": "278220"
  },
  {
    "text": "it and over time more and more companies came and today actually the the biggest",
    "start": "278220",
    "end": "283949"
  },
  {
    "text": "pride of the test is who are the adopters of with us we have a pretty",
    "start": "283949",
    "end": "289020"
  },
  {
    "text": "impressive list of technology leaders that are adopting a witness like here is",
    "start": "289020",
    "end": "297090"
  },
  {
    "text": "some example slack is actually a major contributor to with us and also a major",
    "start": "297090",
    "end": "302759"
  },
  {
    "text": "adopter their intent is to actually fully migrate to with us and I think",
    "start": "302759",
    "end": "308909"
  },
  {
    "text": "their goal is to do it by end of this year at this point they are 30% migrated they actually talked about some of their",
    "start": "308909",
    "end": "316080"
  },
  {
    "text": "stats in our last meet up just a few days back they say that they peaked at",
    "start": "316080",
    "end": "321330"
  },
  {
    "text": "1.2 million QPS and they even gave some number of shards I think it was in the",
    "start": "321330",
    "end": "328259"
  },
  {
    "text": "high hundreds or maybe a thousand it's not shards thousand instances nodes of",
    "start": "328259",
    "end": "336229"
  },
  {
    "text": "test nodes square cache actually is the",
    "start": "336229",
    "end": "341250"
  },
  {
    "text": "classic case of with us use where they",
    "start": "341250",
    "end": "346289"
  },
  {
    "text": "had a single instance my sequel that was running on the biggest Hardware they could buy that money could buy and that",
    "start": "346289",
    "end": "354419"
  },
  {
    "text": "was running out of capacity and what they did was they launched with us on",
    "start": "354419",
    "end": "359849"
  },
  {
    "text": "top of that huge database and then charted it underneath",
    "start": "359849",
    "end": "364860"
  },
  {
    "text": "I believe they they're now at the last number was that they were at 32 shards",
    "start": "364860",
    "end": "371789"
  },
  {
    "text": "and we're looking at going to 64 so the one of their statement is that sharding",
    "start": "371789",
    "end": "379080"
  },
  {
    "text": "is addictive because once you shard things run battle and then you say oh let's start some more and let's start",
    "start": "379080",
    "end": "385229"
  },
  {
    "text": "some more so it just keeps going and you and it's mostly a lot of gain with very",
    "start": "385229",
    "end": "391680"
  },
  {
    "text": "little a little loss and Pinterest actually recently migrated to with us",
    "start": "391680",
    "end": "399990"
  },
  {
    "text": "one of the cool quotes is likely sharding is eventless almost boring so",
    "start": "399990",
    "end": "407909"
  },
  {
    "text": "that's one thing that we test makes really really easy for you to do so",
    "start": "407909",
    "end": "416639"
  },
  {
    "text": "here's another thing so Kashyap actually had which is from square grew so fast",
    "start": "416639",
    "end": "422819"
  },
  {
    "text": "that Jack Dorsey himself quit about it so now the top two apps and the top",
    "start": "422819",
    "end": "429270"
  },
  {
    "text": "charts are using with test and we are going after Burger King next cool so",
    "start": "429270",
    "end": "437190"
  },
  {
    "text": "here is a list of some of the bigger doctors that we test this slide actually means to be updated there are a few more",
    "start": "437190",
    "end": "444360"
  },
  {
    "text": "users that have that are beginning to come on board but we need to get them to",
    "start": "444360",
    "end": "450110"
  },
  {
    "text": "list their logos logos in yet these are the people that have agreed to have",
    "start": "450110",
    "end": "457080"
  },
  {
    "text": "their logos listed the most important takeaway from this is that with test",
    "start": "457080",
    "end": "463380"
  },
  {
    "text": "runs in a large number of environments because each of these companies runs has a different production setup some are on",
    "start": "463380",
    "end": "471719"
  },
  {
    "text": "bare metal some are on cloud like running ec2 instances some are running",
    "start": "471719",
    "end": "479310"
  },
  {
    "text": "kubernetes some are running other cloud orchestration software there is at least",
    "start": "479310",
    "end": "486539"
  },
  {
    "text": "one Vitesse instance I believe that runs on ASOS and there is another user that's looking at running it on Nomad so and",
    "start": "486539",
    "end": "494819"
  },
  {
    "text": "there is a reason for this is because which I will go into which which is",
    "start": "494819",
    "end": "501330"
  },
  {
    "text": "somehow related to making with test cloud native also so why is with that",
    "start": "501330",
    "end": "510060"
  },
  {
    "text": "cloud native why it does with us claim to be so compatible with",
    "start": "510060",
    "end": "516300"
  },
  {
    "text": "kubernetes is what we are going to talk about so this goes into the history of",
    "start": "516300",
    "end": "521820"
  },
  {
    "text": "with us so when we first developed with us we were it was actually developed",
    "start": "521820",
    "end": "527370"
  },
  {
    "text": "only for bare metal but in 2013",
    "start": "527370",
    "end": "532410"
  },
  {
    "text": "what happened and we were running with this on bare metal in YouTube's own data",
    "start": "532410",
    "end": "538140"
  },
  {
    "text": "centers we were not part of Google data centers in 2013",
    "start": "538140",
    "end": "544560"
  },
  {
    "text": "Snowden happened and Google pretty much mandated that we are not allowed to have",
    "start": "544560",
    "end": "551220"
  },
  {
    "text": "data sensitive data outside of Google data centers itself that we had to migrate everything inside Google's cloud",
    "start": "551220",
    "end": "558839"
  },
  {
    "text": "and that faced a pretty big challenge because we test was open source and we",
    "start": "558839",
    "end": "564450"
  },
  {
    "text": "were running it on this bare metal and I don't know how many of you have worked",
    "start": "564450",
    "end": "570360"
  },
  {
    "text": "at Google but if you develop software that runs inside Google's ecosystem it",
    "start": "570360",
    "end": "575670"
  },
  {
    "text": "is pretty much almost impossible to open source it the reason is because Google has so many custom api's right there is",
    "start": "575670",
    "end": "584040"
  },
  {
    "text": "chubbie there is stubby there's all these logging API is monitoring api's",
    "start": "584040",
    "end": "589110"
  },
  {
    "text": "and they are all internal to Google so if you write if you wrote software that ran inside the Google's Borg cloud that",
    "start": "589110",
    "end": "598260"
  },
  {
    "text": "is pretty much not open-source but when we decided to port with tests into",
    "start": "598260",
    "end": "604020"
  },
  {
    "text": "Google's borwein face to challenge we said okay do we just close it and then we like we test to use Google's internal",
    "start": "604020",
    "end": "611339"
  },
  {
    "text": "api's or do we try to keep it open source and somehow make it work inside Google's cloud so we went for the latter",
    "start": "611339",
    "end": "618329"
  },
  {
    "text": "decision and it was really really hard because what that meant was actually",
    "start": "618329",
    "end": "623790"
  },
  {
    "text": "building abstraction layers for every API of Google that we were using like",
    "start": "623790",
    "end": "630270"
  },
  {
    "text": "throttling and whatever else that that",
    "start": "630270",
    "end": "636270"
  },
  {
    "text": "was needed right like calling into Balkman calling it to chubbie calling",
    "start": "636270",
    "end": "641430"
  },
  {
    "text": "into stubby so we actually built abstraction layers for each of those things and that is how we finally",
    "start": "641430",
    "end": "649589"
  },
  {
    "text": "managed to get it working inside Borg so one cool property of with us that even I",
    "start": "649589",
    "end": "657870"
  },
  {
    "text": "believe not even a storage system inside Google has his Vitesse ran as a stage",
    "start": "657870",
    "end": "664980"
  },
  {
    "text": "less app in google's borg which means that we just as far as Google's cloud",
    "start": "664980",
    "end": "670800"
  },
  {
    "text": "was concerned with those was just an app it was not a special storage system with",
    "start": "670800",
    "end": "676170"
  },
  {
    "text": "any privileges about what it could do with storage it was not so other storage",
    "start": "676170",
    "end": "682500"
  },
  {
    "text": "systems in Borg were actually infrastructural elements API is that you",
    "start": "682500",
    "end": "688709"
  },
  {
    "text": "could call into that board provided as an API for storage we test is the only system that ran ran as an app so why",
    "start": "688709",
    "end": "696870"
  },
  {
    "text": "that story is important is because when kubernetes came out we were essentially",
    "start": "696870",
    "end": "702660"
  },
  {
    "text": "ready for it because because we could run as an as an app in a cloud all we",
    "start": "702660",
    "end": "708149"
  },
  {
    "text": "had to do was change our adapt change our layers to call into",
    "start": "708149",
    "end": "713190"
  },
  {
    "text": "kubernetes and we were ready so which is the reason why you can see here",
    "start": "713190",
    "end": "718380"
  },
  {
    "text": "kubernetes 1.0 came out in july but we actually announced that Vitesse was",
    "start": "718380",
    "end": "723420"
  },
  {
    "text": "ready for koukin it is before kubernetes 1.0 came out and we went out and told",
    "start": "723420",
    "end": "731010"
  },
  {
    "text": "people that you can use with us on kubernetes and people started using it",
    "start": "731010",
    "end": "737040"
  },
  {
    "text": "actually stitch labs was actually the first company to adopt and they were pretty running they are a small company",
    "start": "737040",
    "end": "744420"
  },
  {
    "text": "but they are running they were running pretty high QPS I think there is a percona taught by stitch labs where they",
    "start": "744420",
    "end": "751410"
  },
  {
    "text": "talk about running about 150,000 QPS and they migrated their entire traffic into",
    "start": "751410",
    "end": "758670"
  },
  {
    "text": "with us in 2016 and so which means that with us as the oldest Vitesse instance",
    "start": "758670",
    "end": "766889"
  },
  {
    "text": "is now nearly three years old and it has been serving so they are 100% on",
    "start": "766889",
    "end": "772260"
  },
  {
    "text": "kubernetes on with tasks and on on their own storage and it's been now going for",
    "start": "772260",
    "end": "779730"
  },
  {
    "text": "three years now no incidents no data loss and so they've been pretty happy",
    "start": "779730",
    "end": "786930"
  },
  {
    "text": "then came HubSpot well the big word that they did was they actually did a lot of",
    "start": "786930",
    "end": "792510"
  },
  {
    "text": "compatibility work to make a large number of queries work then JD dot-com came and",
    "start": "792510",
    "end": "798600"
  },
  {
    "text": "they actually scaled it massively also so these these companies have been",
    "start": "798600",
    "end": "804780"
  },
  {
    "text": "running with us on kubernetes for many years now so it is not a theory",
    "start": "804780",
    "end": "809790"
  },
  {
    "text": "it is now a proven thing and you can take this to the bank so nozzle is",
    "start": "809790",
    "end": "816030"
  },
  {
    "text": "actually the last entrant that started that migrated to kubernetes the coolest",
    "start": "816030",
    "end": "821130"
  },
  {
    "text": "story is that because they are fully on kubernetes they can move from one cloud to another whenever they want in fact",
    "start": "821130",
    "end": "828990"
  },
  {
    "text": "they actually started they started on Azure because as you gave them huge",
    "start": "828990",
    "end": "834570"
  },
  {
    "text": "credits and eventually they ran out of those credits and within one hour they",
    "start": "834570",
    "end": "840810"
  },
  {
    "text": "migrated from Azure into Google Cloud GCP and I don't like their learning gke",
    "start": "840810",
    "end": "848490"
  },
  {
    "text": "or their own kubernetes most likely gke but that is how easy it is for you to",
    "start": "848490",
    "end": "855210"
  },
  {
    "text": "migrate from one cloud to another if you are completely on kubernetes end-to-end so that's that's one one recommendation",
    "start": "855210",
    "end": "866730"
  },
  {
    "text": "which is if you instead use a storage that is provided by the cloud like RDS",
    "start": "866730",
    "end": "873030"
  },
  {
    "text": "or routes equal then migrating out of that is a lot harder whereas if you are",
    "start": "873030",
    "end": "878580"
  },
  {
    "text": "100% on kubernetes it is so easy to move but then after all this here Kelsey",
    "start": "878580",
    "end": "886560"
  },
  {
    "text": "keeps saying don't move your storage to kubernetes it is problematic run your",
    "start": "886560",
    "end": "893790"
  },
  {
    "text": "stateless upon kubernetes but storage I would not recommend right but there is a",
    "start": "893790",
    "end": "901440"
  },
  {
    "text": "reason why he says that he is because of this essentially what he is saying is if",
    "start": "901440",
    "end": "907770"
  },
  {
    "text": "you just took a storage system and just moved it to kubernetes you're going to regret it because there are there are",
    "start": "907770",
    "end": "914910"
  },
  {
    "text": "things missing there there are gaps between kubernetes and storage layer that need to be filled and existing",
    "start": "914910",
    "end": "922950"
  },
  {
    "text": "storage systems just don't run as is on kubernetes so that's essentially what you are trying to say and to explain why",
    "start": "922950",
    "end": "931260"
  },
  {
    "text": "we test which is the gap I'm going to show you the Vita's architecture here the way we test works",
    "start": "931260",
    "end": "937980"
  },
  {
    "text": "is even though it can scale really really massively the witness architecture is fairly simple it's just",
    "start": "937980",
    "end": "943980"
  },
  {
    "text": "a two layer architecture you can see the app server here it connects to these VT",
    "start": "943980",
    "end": "950940"
  },
  {
    "text": "gates these mitigates are stateless app servers so it can connect to any other through a load balancer and as far as",
    "start": "950940",
    "end": "957150"
  },
  {
    "text": "the app server is concerned a mitigate represents your entire cluster it's as",
    "start": "957150",
    "end": "962910"
  },
  {
    "text": "if it's connected to a single my sequel instance but under the under the covers what we decay does is when you send a",
    "start": "962910",
    "end": "969240"
  },
  {
    "text": "query to it it actually has a metadata called the V schema which is kind of a",
    "start": "969240",
    "end": "974990"
  },
  {
    "text": "schema but for a sharded system and it uses that schema to figure out where",
    "start": "974990",
    "end": "980400"
  },
  {
    "text": "that query should go and then once it figures it out it sends it to a bt",
    "start": "980400",
    "end": "985530"
  },
  {
    "text": "tablet and each VT tablet runs its own my sequel instance and what this VD",
    "start": "985530",
    "end": "992160"
  },
  {
    "text": "table does is actually completely manage that my sequel instance and there and",
    "start": "992160",
    "end": "998430"
  },
  {
    "text": "also it has other benefits like connection pooling it can also do housekeeping work like backups and",
    "start": "998430",
    "end": "1005480"
  },
  {
    "text": "restores and those kinds of things you can see here that there are many types of meaty tablets there is a master meaty",
    "start": "1005480",
    "end": "1014300"
  },
  {
    "text": "tablet which accepts writes and there are some replicas VD tablets that accept read traffic etc so this is one case one",
    "start": "1014300",
    "end": "1025760"
  },
  {
    "text": "architecture which you cannot directly get if you move your my sequel to",
    "start": "1025760",
    "end": "1031250"
  },
  {
    "text": "kubernetes so let's say you want to move you want to deploy my sequel on",
    "start": "1031250",
    "end": "1036980"
  },
  {
    "text": "kubernetes so gubin it is the the best the best part type to use is a stateful",
    "start": "1036980",
    "end": "1045050"
  },
  {
    "text": "set right the stateful set a workload gives you the ability to have a bunch of",
    "start": "1045050",
    "end": "1050750"
  },
  {
    "text": "instances but what the stateful set does not allow you to do is designate one of",
    "start": "1050750",
    "end": "1057110"
  },
  {
    "text": "those instances as a master as far as kubernetes is concerned they are all equal so if you want to",
    "start": "1057110",
    "end": "1063500"
  },
  {
    "text": "designate one part as a master what you have to do is actually pull that out",
    "start": "1063500",
    "end": "1070460"
  },
  {
    "text": "into a separate part type and if you did that then that part becomes a master and",
    "start": "1070460",
    "end": "1076070"
  },
  {
    "text": "then the rest of the parts become replicas so then you can say okay it's a direct traffic to the master part direct",
    "start": "1076070",
    "end": "1082640"
  },
  {
    "text": "traffic to the replicas but then what happens if a mass will goes down right so master goes down then you cannot fail",
    "start": "1082640",
    "end": "1090500"
  },
  {
    "text": "over to a replica and say now this part is designated at mass as a master so kubernetes doesn't allow you to change a",
    "start": "1090500",
    "end": "1097850"
  },
  {
    "text": "part type on the fly which means that you have to wait for the master to be",
    "start": "1097850",
    "end": "1103520"
  },
  {
    "text": "restarted so kubernetes to restart that part as a master and then once it comes",
    "start": "1103520",
    "end": "1108590"
  },
  {
    "text": "back up then you can send traffic to it so in other words if you deploy just my",
    "start": "1108590",
    "end": "1114740"
  },
  {
    "text": "sequel and did this type of separation then you cannot really have a higher",
    "start": "1114740",
    "end": "1120980"
  },
  {
    "text": "highly available system because if a master goes down you are pretty much out of luck and the only way you can solve",
    "start": "1120980",
    "end": "1127850"
  },
  {
    "text": "it is to and the way with that solves it is because it has this VD gate in the middle it can actually track where the",
    "start": "1127850",
    "end": "1135080"
  },
  {
    "text": "master is and if a master goes down we can repair it and designate existing replicas as a master and then",
    "start": "1135080",
    "end": "1141680"
  },
  {
    "text": "immediately VD gate can switch to that replica and start sending traffic and this can happen literally within seconds",
    "start": "1141680",
    "end": "1148700"
  },
  {
    "text": "and even during those seconds what VT gate does is it actually doesn't return",
    "start": "1148700",
    "end": "1154190"
  },
  {
    "text": "errors to the observer or it just waits for the new master to be elected so the only thing the absolute notices is a",
    "start": "1154190",
    "end": "1160160"
  },
  {
    "text": "brief latency spike and the other",
    "start": "1160160",
    "end": "1165260"
  },
  {
    "text": "problem is databases like my sickle",
    "start": "1165260",
    "end": "1171320"
  },
  {
    "text": "perform best when their storage is local right so but but the problem with",
    "start": "1171320",
    "end": "1176690"
  },
  {
    "text": "kubernetes is if you used a local storage then as soon as your pod is shut",
    "start": "1176690",
    "end": "1184580"
  },
  {
    "text": "down kubernetes wipes all your data and so in this case that is kind of scary",
    "start": "1184580",
    "end": "1192110"
  },
  {
    "text": "for anybody running on my sequel so most people that have so far moved my sequel to",
    "start": "1192110",
    "end": "1198890"
  },
  {
    "text": "kubernetes have ended up using mounted volume like EBS or a CSI based volume",
    "start": "1198890",
    "end": "1207140"
  },
  {
    "text": "that gives its own persistence guarantees there is still now there is now a local PV that kubernetes supports",
    "start": "1207140",
    "end": "1214840"
  },
  {
    "text": "but it hasn't seen much production use yet and it still has a limitation that",
    "start": "1214840",
    "end": "1221510"
  },
  {
    "text": "unless you're you're the pod gets rescheduled on the same node you still",
    "start": "1221510",
    "end": "1228320"
  },
  {
    "text": "don't have access to that the wave it has solves this problem is it actually does not rely on the local data ever",
    "start": "1228320",
    "end": "1236000"
  },
  {
    "text": "being present so if a pod goes down what we test can be made to do is to always",
    "start": "1236000",
    "end": "1241640"
  },
  {
    "text": "say well if a if a new pod comes up always go to to a backup restore from",
    "start": "1241640",
    "end": "1247760"
  },
  {
    "text": "that backup and then after you've restored pointed to the master let it catch up and after it has caught up then",
    "start": "1247760",
    "end": "1253160"
  },
  {
    "text": "start serving traffic so basically we test does not rely on local data being",
    "start": "1253160",
    "end": "1259520"
  },
  {
    "text": "preserved for for its sub time and we",
    "start": "1259520",
    "end": "1265250"
  },
  {
    "text": "there is an additional feature in my sequel called semi single application that guarantees that when a transaction",
    "start": "1265250",
    "end": "1272060"
  },
  {
    "text": "gets committed at least one other replica has it so which means that you will never lose a transaction if a pod",
    "start": "1272060",
    "end": "1279140"
  },
  {
    "text": "goes down you can learn with us to also use a mounted storage and some people do",
    "start": "1279140",
    "end": "1284810"
  },
  {
    "text": "run it but but you can also run it in this high-performance high availability",
    "start": "1284810",
    "end": "1291380"
  },
  {
    "text": "mode where you use local data and then if a pod goes don't just throw it away",
    "start": "1291380",
    "end": "1297260"
  },
  {
    "text": "and then bring up a new part let's storm replicas and keep moving forward and how",
    "start": "1297260",
    "end": "1304430"
  },
  {
    "text": "reliable is this methodology this is how with des langues in google cloud in the",
    "start": "1304430",
    "end": "1309680"
  },
  {
    "text": "Borg we we have never ever restored a",
    "start": "1309680",
    "end": "1314780"
  },
  {
    "text": "crash to my sequel we always threw it away and then brought up new new",
    "start": "1314780",
    "end": "1320210"
  },
  {
    "text": "instances and this is where and this is where running a shard at my sequel makes more sense if",
    "start": "1320210",
    "end": "1326820"
  },
  {
    "text": "so we don't run huge instances all our instances are like two to three hundred gigs of data size which means that if a",
    "start": "1326820",
    "end": "1333600"
  },
  {
    "text": "pod goes on a new pod comes back up and is ready to serve within like a few like five or ten minutes so that's how long",
    "start": "1333600",
    "end": "1340260"
  },
  {
    "text": "it takes for a new part to be a spinner so this is what makes Vitas cloud cloud",
    "start": "1340260",
    "end": "1346830"
  },
  {
    "text": "native and the final one is obviously the discovery mechanism where there is",
    "start": "1346830",
    "end": "1352170"
  },
  {
    "text": "this topology where we do doublet when it comes up it registers itself with the topology and these VT gates discover",
    "start": "1352170",
    "end": "1358200"
  },
  {
    "text": "them as new things come up and last but not the least it works across multiple",
    "start": "1358200",
    "end": "1364950"
  },
  {
    "text": "cells so you can have a full world wide deployment of it as running tens of",
    "start": "1364950",
    "end": "1370200"
  },
  {
    "text": "thousands of nodes all right moving forward we you can actually start using",
    "start": "1370200",
    "end": "1380340"
  },
  {
    "text": "with us right from the beginning it gives you benefits even if you have a",
    "start": "1380340",
    "end": "1386040"
  },
  {
    "text": "single instance of my sequel because you gives you connection pooling it gives",
    "start": "1386040",
    "end": "1391890"
  },
  {
    "text": "you deadlines it makes overall your my sequel run better but then as you scale you start",
    "start": "1391890",
    "end": "1398280"
  },
  {
    "text": "to beg using more and more features of it as the Vita's distributed system",
    "start": "1398280",
    "end": "1404520"
  },
  {
    "text": "capabilities it can route to replicas it can do load balance it can do master promotion and then eventually you can",
    "start": "1404520",
    "end": "1411810"
  },
  {
    "text": "char your system and as and as you shard your system as far as the app is",
    "start": "1411810",
    "end": "1417300"
  },
  {
    "text": "concerned you still get a unified view and eventually end up into a fully",
    "start": "1417300",
    "end": "1422790"
  },
  {
    "text": "worldwide deployment so this is how you would grow is with us and as you can see",
    "start": "1422790",
    "end": "1427800"
  },
  {
    "text": "on the left hand side I wouldn't want to say that app servers are completely unaffected sometimes you when you",
    "start": "1427800",
    "end": "1434940"
  },
  {
    "text": "distribute things you do have to rewrite things in the app because you are making",
    "start": "1434940",
    "end": "1441150"
  },
  {
    "text": "trade-offs in performance and not everything will continue to work that like it used to work before but the",
    "start": "1441150",
    "end": "1446880"
  },
  {
    "text": "impact is definitely minimized all right so I am going to show a demo and if I",
    "start": "1446880",
    "end": "1453900"
  },
  {
    "text": "have time at the end of the demo I will talk about the regret feature which is when you",
    "start": "1453900",
    "end": "1460789"
  },
  {
    "text": "decide to shard a system you have to make some trade-offs and decisions and sometimes those decisions are not the",
    "start": "1460789",
    "end": "1467600"
  },
  {
    "text": "right ones so the latest feature that we developed allows you to actually reach",
    "start": "1467600",
    "end": "1473360"
  },
  {
    "text": "out your system using a different key which is why it's called very good feature so I will talk about that at the",
    "start": "1473360",
    "end": "1479720"
  },
  {
    "text": "end if I have time so here's the demo I am going to show this is actually the",
    "start": "1479720",
    "end": "1486230"
  },
  {
    "text": "use cases let's say we are building a marketplace where we allow merchants to sell products to customers something",
    "start": "1486230",
    "end": "1493640"
  },
  {
    "text": "like Amazon one so this is a simplified schema where you have a product table",
    "start": "1493640",
    "end": "1499789"
  },
  {
    "text": "which has a list of products a customer table where all the customers are stored",
    "start": "1499789",
    "end": "1505010"
  },
  {
    "text": "and a merchants table that has all the merchants and merchants list their",
    "start": "1505010",
    "end": "1511309"
  },
  {
    "text": "products the customer comes in and they say when they place an order or an order Row is created and this order row has",
    "start": "1511309",
    "end": "1518929"
  },
  {
    "text": "foreign keys which means that there is an order ID which is its own ID the C ID which is the customer ID points back to",
    "start": "1518929",
    "end": "1525799"
  },
  {
    "text": "the customer that placed the order the PID is a product that they bought and the M name which is the merchant",
    "start": "1525799",
    "end": "1532610"
  },
  {
    "text": "name is the merchant from which they bought the product from so if you scale",
    "start": "1532610",
    "end": "1537679"
  },
  {
    "text": "this massively you're going to have billions of orders you're going to have",
    "start": "1537679",
    "end": "1543520"
  },
  {
    "text": "maybe a billion customers millions of merchants and thousands of thousands of",
    "start": "1543520",
    "end": "1550010"
  },
  {
    "text": "products right and then when you decide to short the system you are kind of",
    "start": "1550010",
    "end": "1555530"
  },
  {
    "text": "forced to split it into three databases one is the product database which contains a product one is the customer",
    "start": "1555530",
    "end": "1562850"
  },
  {
    "text": "database for the customer and the merchant database because they have different keys different route keys the",
    "start": "1562850",
    "end": "1570049"
  },
  {
    "text": "orders table is a decision that you have to make about where to put it you can say that orders can be with merchants or",
    "start": "1570049",
    "end": "1575960"
  },
  {
    "text": "or orders can be with customer or orders can be in its own shot if that is a decision that's also an option and each",
    "start": "1575960",
    "end": "1584330"
  },
  {
    "text": "one has a different trade off so if you say that an order can be with customer",
    "start": "1584330",
    "end": "1590330"
  },
  {
    "text": "then you then it's easy to join a customer with order you can easily query",
    "start": "1590330",
    "end": "1596630"
  },
  {
    "text": "whether you can a customer can come in and say show me all my orders or you can say show me all the orders for my",
    "start": "1596630",
    "end": "1604789"
  },
  {
    "text": "customer so you can do those kinds of queries but it becomes harder to query for example what's the product",
    "start": "1604789",
    "end": "1611510"
  },
  {
    "text": "description for a customer because the product description information is in this database or if a merchant comes in",
    "start": "1611510",
    "end": "1619070"
  },
  {
    "text": "and says oh I need to find out all my orders then it becomes a rather complicated query because you have to go",
    "start": "1619070",
    "end": "1625070"
  },
  {
    "text": "to each customer shard and find out all basically essentially do a scan of all",
    "start": "1625070",
    "end": "1631730"
  },
  {
    "text": "shards so in this case I'm going to assume that the product is uncharted because the product table is small a",
    "start": "1631730",
    "end": "1637600"
  },
  {
    "text": "customer has to be Charlotte because they are massive and the merchant is also sharded so I'm going to accelerate",
    "start": "1637600",
    "end": "1648250"
  },
  {
    "text": "and show you some pretty cool things we can do with with us but unlike these",
    "start": "1648250",
    "end": "1657350"
  },
  {
    "text": "stunts these are stunts that you can try at home so I'm going to bring up a so I",
    "start": "1657350",
    "end": "1663140"
  },
  {
    "text": "already have a cluster that I have brought up I can show you the cluster here so this cluster is the same cluster",
    "start": "1663140",
    "end": "1671120"
  },
  {
    "text": "that I showed in in my slide it has one product shard it has two merchant shards",
    "start": "1671120",
    "end": "1679309"
  },
  {
    "text": "and two customer shards the 80 means it's a hexadecimal so eight is in the",
    "start": "1679309",
    "end": "1685159"
  },
  {
    "text": "middle so which means that zero to eight is one shard and eight to infinity is",
    "start": "1685159",
    "end": "1690919"
  },
  {
    "text": "the other shot so in this and I have an app here this is my app my e-commerce",
    "start": "1690919",
    "end": "1698570"
  },
  {
    "text": "application except it is very raw what you have to do is you have to imagine that you are a customer and when you",
    "start": "1698570",
    "end": "1705950"
  },
  {
    "text": "sign up you go and execute the query to insert yourself into this customer if",
    "start": "1705950",
    "end": "1712370"
  },
  {
    "text": "you place an order you have to execute the query to insert an order into the table it's kind of a pretend application",
    "start": "1712370",
    "end": "1719450"
  },
  {
    "text": "but the cool part of it is you can basically this app you to send random queries to this with",
    "start": "1719450",
    "end": "1726450"
  },
  {
    "text": "a shortage system and as it executes it shows you what it does",
    "start": "1726450",
    "end": "1731850"
  },
  {
    "text": "so just to prime our I have this let me",
    "start": "1731850",
    "end": "1738630"
  },
  {
    "text": "show you for example what a B schema looks like so here is a V schema a V",
    "start": "1738630",
    "end": "1745350"
  },
  {
    "text": "schema basically is a schema is the description of how a system is charted for example for the merchant key space",
    "start": "1745350",
    "end": "1753570"
  },
  {
    "text": "this is the V schema where it says that the merchant key space has a prior is",
    "start": "1753570",
    "end": "1760080"
  },
  {
    "text": "charted by merchant name and it uses in with us we have these things calls be called wind X's which are essentially",
    "start": "1760080",
    "end": "1766680"
  },
  {
    "text": "the sharding key that not only define which column it is charted by but also how to what algorithm to use to shard in",
    "start": "1766680",
    "end": "1774420"
  },
  {
    "text": "this case I'm going to use a unicode md5 sharding key okay and I have some",
    "start": "1774420",
    "end": "1781710"
  },
  {
    "text": "greater here you can I have some recoup statements that insert data into this",
    "start": "1781710",
    "end": "1788670"
  },
  {
    "text": "database I'm going to run my MySQL client again sweetie gate and say import",
    "start": "1788670",
    "end": "1794370"
  },
  {
    "text": "all this data and then if I go and refresh this page all my data is",
    "start": "1794370",
    "end": "1800220"
  },
  {
    "text": "imported in here you can see that there there are different colors every time a",
    "start": "1800220",
    "end": "1805830"
  },
  {
    "text": "new row appears that row is highlighted by this axis is just for convenience so",
    "start": "1805830",
    "end": "1811260"
  },
  {
    "text": "if i refresh this everything will go blue so here's some data so as you saw",
    "start": "1811260",
    "end": "1816600"
  },
  {
    "text": "those are just regular my sequence is a regular insert statements but they went to different shots like sugu went to -",
    "start": "1816600",
    "end": "1823410"
  },
  {
    "text": "88 ml went to 80 - and but you can see that the orders for sugu are within",
    "start": "1823410",
    "end": "1831260"
  },
  {
    "text": "sugus chart and the orders for Demerol are within demo start the foreign key is",
    "start": "1831260",
    "end": "1837180"
  },
  {
    "text": "the cid which is a customer ID ID 1 and in this case ID 6 which is the demo shot",
    "start": "1837180",
    "end": "1844460"
  },
  {
    "text": "and now i can run queries here if i say select star from product so as far as",
    "start": "1844460",
    "end": "1851070"
  },
  {
    "text": "the clap is concerned this is one database even though it is now split into 3 into 5 different",
    "start": "1851070",
    "end": "1857400"
  },
  {
    "text": "basses if I say select star from product what we test us here it shows the",
    "start": "1857400",
    "end": "1863040"
  },
  {
    "text": "executed queries it says oh product it knows that it is in the product database it says I'm going to execute on product",
    "start": "1863040",
    "end": "1870000"
  },
  {
    "text": "and I'm going to send this query if I say select star from customer that is",
    "start": "1870000",
    "end": "1875910"
  },
  {
    "text": "actually a scatter query because customer is a sharded database it sends",
    "start": "1875910",
    "end": "1882210"
  },
  {
    "text": "it to both charts of the customers and then sends you the result if I did a",
    "start": "1882210",
    "end": "1887820"
  },
  {
    "text": "join of the customer with the order table you can see that I'm saying customer join with orders on the",
    "start": "1887820",
    "end": "1895140"
  },
  {
    "text": "customer ID as a foreign key this query with us knows that since all the orders",
    "start": "1895140",
    "end": "1901830"
  },
  {
    "text": "are of customer are within each shard it knows that it doesn't have to do anything crazy it basically pushes on",
    "start": "1901830",
    "end": "1908190"
  },
  {
    "text": "that entire joint into each of the shards and then returns the query so",
    "start": "1908190",
    "end": "1913440"
  },
  {
    "text": "this is the Vitesse's query routing capabilities however if I did this query",
    "start": "1913440",
    "end": "1922350"
  },
  {
    "text": "so what this query is doing is is joining customer with orders and then going to product and says fetch the",
    "start": "1922350",
    "end": "1930390"
  },
  {
    "text": "product description for each of those orders and please display that right so that is something of a cross short query",
    "start": "1930390",
    "end": "1938250"
  },
  {
    "text": "so what we tests will do I'm going to execute it and then explain what it did so what we test here does is actually",
    "start": "1938250",
    "end": "1945050"
  },
  {
    "text": "splits that query into two parts and the first query is a join of the customer with order and as I showed before",
    "start": "1945050",
    "end": "1951930"
  },
  {
    "text": "it's a within short query so that part of the query runs as a scatter query and",
    "start": "1951930",
    "end": "1956990"
  },
  {
    "text": "then it receives three rows that came as output and for each of those rows it has",
    "start": "1956990",
    "end": "1962850"
  },
  {
    "text": "to make a round trip into the product database to fetch the description which is actually the three queries that you",
    "start": "1962850",
    "end": "1969210"
  },
  {
    "text": "see that went into the product so this is so this works in with us but it is",
    "start": "1969210",
    "end": "1976110"
  },
  {
    "text": "not optimal and here with us gives you an option a solution which actually no",
    "start": "1976110",
    "end": "1982740"
  },
  {
    "text": "other charted system gives that I know of which is this product table is small",
    "start": "1982740",
    "end": "1989280"
  },
  {
    "text": "what if we just copy this product table inside each",
    "start": "1989280",
    "end": "1994380"
  },
  {
    "text": "of the shots of this customer then we can tell the test to say a join with the",
    "start": "1994380",
    "end": "2000110"
  },
  {
    "text": "local product then this query will be executed extremely efficiently so we",
    "start": "2000110",
    "end": "2007460"
  },
  {
    "text": "have this new feature that is called the materialized view you can say materialized product in to materialize",
    "start": "2007460",
    "end": "2014149"
  },
  {
    "text": "any table into any other table using certain rules like so I'm going to give",
    "start": "2014149",
    "end": "2019220"
  },
  {
    "text": "you that materialized command so here is",
    "start": "2019220",
    "end": "2026029"
  },
  {
    "text": "the command right so here I say I'm going to materialize the product dot",
    "start": "2026029",
    "end": "2031340"
  },
  {
    "text": "product table into customer dot product and it is a reference table what that",
    "start": "2031340",
    "end": "2037490"
  },
  {
    "text": "means is that I'm going to materialize all the rows into each of the shard",
    "start": "2037490",
    "end": "2042529"
  },
  {
    "text": "which means that it is not a Charlotte table it's a none Charlotte table with identical copies within each shard and",
    "start": "2042529",
    "end": "2048200"
  },
  {
    "text": "say I also want the table to be created because the table currently doesn't exist so I'm going to execute this as",
    "start": "2048200",
    "end": "2055579"
  },
  {
    "text": "soon as I execute this and then refresh it the product table has materialized",
    "start": "2055579",
    "end": "2060858"
  },
  {
    "text": "you can see that it has copied these rows the one thing you should remember is that this table can be multiple",
    "start": "2060859",
    "end": "2066800"
  },
  {
    "text": "terabytes which means that this materialization process can take a while it can take a few hours maybe even a",
    "start": "2066800",
    "end": "2072858"
  },
  {
    "text": "days and during that time this table is not visible so if I continue if I",
    "start": "2072859",
    "end": "2079608"
  },
  {
    "text": "reissue this query it will still go it",
    "start": "2079609",
    "end": "2084648"
  },
  {
    "text": "will still behave as if this product table doesn't exist but once this materialization is done and this table",
    "start": "2084649",
    "end": "2090618"
  },
  {
    "text": "is caught up I can now go say expose that materialized view to the application so I say oh - something",
    "start": "2090619",
    "end": "2100430"
  },
  {
    "text": "wrong oh not much it should be sorry I",
    "start": "2100430",
    "end": "2106730"
  },
  {
    "text": "did a copypasta problem oh it's the other one expose yeah so expose this so",
    "start": "2106730",
    "end": "2116690"
  },
  {
    "text": "I when I created the materialized I named this has a workflow I use that workflow to make changes to it and they",
    "start": "2116690",
    "end": "2123140"
  },
  {
    "text": "say expose whatever the subnetwork brought to the congregation now I'm going to re-execute the same",
    "start": "2123140",
    "end": "2128690"
  },
  {
    "text": "exact query and now you can see that it is the plan has changed it is now running it as a fully as a",
    "start": "2128690",
    "end": "2136850"
  },
  {
    "text": "scatter query where it is joining with the local product itself I can still say",
    "start": "2136850",
    "end": "2142760"
  },
  {
    "text": "that I want to specifically join with a product table and that is possible and",
    "start": "2142760",
    "end": "2150970"
  },
  {
    "text": "so this is so this is actually a very powerful feature because things that",
    "start": "2150970",
    "end": "2155990"
  },
  {
    "text": "were extremely inefficient can be made super efficient by just through much through this material is Asian feature",
    "start": "2155990",
    "end": "2161960"
  },
  {
    "text": "and if and more important thing is if I make changes to the source tables now",
    "start": "2161960",
    "end": "2167540"
  },
  {
    "text": "I'm going to insert a new product so as soon as I insert it immediately that row",
    "start": "2167540",
    "end": "2174950"
  },
  {
    "text": "is replicated into these target tables all right so now the next query is what",
    "start": "2174950",
    "end": "2182420"
  },
  {
    "text": "if the merchant wants to look at all their orders that's even harder query to",
    "start": "2182420",
    "end": "2188620"
  },
  {
    "text": "implement because it's actually a full scatter on all the merchants and for",
    "start": "2188620",
    "end": "2194540"
  },
  {
    "text": "each row that I received it is a full scatter on the customer key space right",
    "start": "2194540",
    "end": "2202580"
  },
  {
    "text": "so that's that's a query that's basically unimaginably expensive and",
    "start": "2202580",
    "end": "2208250"
  },
  {
    "text": "again the question is what if we materialize this orders table into the merchants table so in the case of a",
    "start": "2208250",
    "end": "2215630"
  },
  {
    "text": "product table it was easy right you just copied all the rows but in the case of a merchants table you can't just copy all",
    "start": "2215630",
    "end": "2221870"
  },
  {
    "text": "the rows because one is order is charted by customer ID on and on this side for",
    "start": "2221870",
    "end": "2229190"
  },
  {
    "text": "this materialisation to work effectively it needs to be shorted by M name which",
    "start": "2229190",
    "end": "2234470"
  },
  {
    "text": "is actually the sharding key for merchants so with us allows you to do that also which is essentially saying",
    "start": "2234470",
    "end": "2241930"
  },
  {
    "text": "materialized merchants the customer orders into merchants orders but when",
    "start": "2241930",
    "end": "2249710"
  },
  {
    "text": "you materialize use a different charting key and also create table right so now",
    "start": "2249710",
    "end": "2255110"
  },
  {
    "text": "I'm going to execute it so if you see that I refresh here and you can see that this table has",
    "start": "2255110",
    "end": "2262430"
  },
  {
    "text": "materialized but you can see that the rows are not the same way as they are in the source you can see that now all",
    "start": "2262430",
    "end": "2270319"
  },
  {
    "text": "monoprice rows are in the monoprice chart and the new egg rolls are in the new egg shard all right",
    "start": "2270319",
    "end": "2277430"
  },
  {
    "text": "and now if I now I'm going to as you saw",
    "start": "2277430",
    "end": "2282650"
  },
  {
    "text": "I need to expose this the expose in the demo it feels like an extra step but in",
    "start": "2282650",
    "end": "2289279"
  },
  {
    "text": "production you need to actually do this as two steps because you have to wait for the materialization to finish and",
    "start": "2289279",
    "end": "2295130"
  },
  {
    "text": "then you have to expose it so now that I've exposed it me if I rerun that same",
    "start": "2295130",
    "end": "2300469"
  },
  {
    "text": "query it now becomes a simple a simple",
    "start": "2300469",
    "end": "2306729"
  },
  {
    "text": "yeah a simple cross shot query in the previous case it was a must have",
    "start": "2306729",
    "end": "2311809"
  },
  {
    "text": "multiple nested loop join very expensive alright so if you look at so if you look",
    "start": "2311809",
    "end": "2320660"
  },
  {
    "text": "at the underlying feature that helps you do this is called the V replication feature the first case we actually",
    "start": "2320660",
    "end": "2326599"
  },
  {
    "text": "copied all the rows in the second case we applied filters to these roles and say it send some rows here send some",
    "start": "2326599",
    "end": "2334130"
  },
  {
    "text": "rows there what else can you do with V replication so V replication not only allows you to materialize and filter it",
    "start": "2334130",
    "end": "2341029"
  },
  {
    "text": "also allows you to transform what does transform mean is that you can specify",
    "start": "2341029",
    "end": "2346729"
  },
  {
    "text": "basically a select query as an expression as a transformation expression and and the Select query can",
    "start": "2346729",
    "end": "2355880"
  },
  {
    "text": "be actually can have aggregations and such which means that you can actually create real time roll-ups so here is an",
    "start": "2355880",
    "end": "2363019"
  },
  {
    "text": "example of a real time roll-up well what I'm going to do is I'm going to",
    "start": "2363019",
    "end": "2368259"
  },
  {
    "text": "materialize this is again the same",
    "start": "2368259",
    "end": "2373430"
  },
  {
    "text": "materialized command but here what I have done is instead of giving a target",
    "start": "2373430",
    "end": "2378859"
  },
  {
    "text": "table I say it I gave a target expression saying that materialized",
    "start": "2378859",
    "end": "2384440"
  },
  {
    "text": "sales as this expression so in this case I'm going to select product ID and the",
    "start": "2384440",
    "end": "2391369"
  },
  {
    "text": "number orders and the total price for each order and I say materialize it as a",
    "start": "2391369",
    "end": "2396610"
  },
  {
    "text": "sales table and now I'm going to also expose it shows it now if i refresh it",
    "start": "2396610",
    "end": "2403350"
  },
  {
    "text": "there is a sales table that has popped up that has automatically rolled up all the orders into their counts and amounts",
    "start": "2403350",
    "end": "2409930"
  },
  {
    "text": "and then I can now run queries directly into the sales table and if you actually",
    "start": "2409930",
    "end": "2417510"
  },
  {
    "text": "you can actually watch this row I'm going to change an order am I going to",
    "start": "2417510",
    "end": "2423490"
  },
  {
    "text": "yeah let's say I'm going to add an order here if I add an order see what happens",
    "start": "2423490",
    "end": "2429810"
  },
  {
    "text": "the order was added here that added order was replicated into the merchant key space and the sales amount has been",
    "start": "2429810",
    "end": "2437650"
  },
  {
    "text": "updated accordingly with the total of all orders and all this happens",
    "start": "2437650",
    "end": "2442840"
  },
  {
    "text": "efficiently because of how the replication works is because this happens by where we replication",
    "start": "2442840",
    "end": "2449410"
  },
  {
    "text": "subscribes to the bin logs and just basically looks at each event and applies just the incremental change to",
    "start": "2449410",
    "end": "2455920"
  },
  {
    "text": "the target tables so it is very efficient and very fast the only downside is that it is eventually",
    "start": "2455920",
    "end": "2463060"
  },
  {
    "text": "consistent which means that if there is a network partition between customer and product then the sales table will be",
    "start": "2463060",
    "end": "2471280"
  },
  {
    "text": "delayed in its update so that is the trade off for this feature and just",
    "start": "2471280",
    "end": "2478870"
  },
  {
    "text": "before concluding the V replication feature that we use can also be used for",
    "start": "2478870",
    "end": "2485320"
  },
  {
    "text": "the regret feature that I talked about if you looked at you if you have flipped the story around where you say let's say",
    "start": "2485320",
    "end": "2492400"
  },
  {
    "text": "I chose CID for the orders and I did not like the key I could have created a",
    "start": "2492400",
    "end": "2498340"
  },
  {
    "text": "workflow that migrated orders into the merchant orders and then we keyed it by",
    "start": "2498340",
    "end": "2503440"
  },
  {
    "text": "monoprice and all I had to tell with this is instead of sending rights to customers switch the rights to much end",
    "start": "2503440",
    "end": "2509290"
  },
  {
    "text": "and now ivory sharted a table that was shot at one way into a table that was",
    "start": "2509290",
    "end": "2515530"
  },
  {
    "text": "charted another way so going back to our",
    "start": "2515530",
    "end": "2521370"
  },
  {
    "text": "concluding remarks is the there are many use cases we are going to deploy with the test",
    "start": "2521370",
    "end": "2527820"
  },
  {
    "text": "materialize use real-time rollouts and reshoring is what I talked about but you can use",
    "start": "2527820",
    "end": "2534090"
  },
  {
    "text": "this Windex this fear application feature for schema deployments data migrations back filling of tables and",
    "start": "2534090",
    "end": "2541390"
  },
  {
    "text": "also change notification where you can subscribe to see what changes are going",
    "start": "2541390",
    "end": "2547420"
  },
  {
    "text": "through inside my database so that's a that concludes my presentation I am now",
    "start": "2547420",
    "end": "2554080"
  },
  {
    "text": "open for questions awesome super awesome thanks to you the test is very cool so",
    "start": "2554080",
    "end": "2561790"
  },
  {
    "text": "we've got a bunch of a bunch of questions in the queue a let me just kind of run through here so one of the",
    "start": "2561790",
    "end": "2567400"
  },
  {
    "text": "first ones from Jean is what versions of my sequel and/or other targets are",
    "start": "2567400",
    "end": "2574000"
  },
  {
    "text": "supported by the tests oh yes a good question we test supports my sequel five",
    "start": "2574000",
    "end": "2580990"
  },
  {
    "text": "point six all the way up to 8.0 it supports Maria DBE",
    "start": "2580990",
    "end": "2586600"
  },
  {
    "text": "ten dot X all versions of n dot X all versions of percona we test can also run",
    "start": "2586600",
    "end": "2593980"
  },
  {
    "text": "on all cloud databases like RDS and cloud sequel so it's a pretty wide range",
    "start": "2593980",
    "end": "2600910"
  },
  {
    "text": "of the only restrictions it has is that you need to have row based replication",
    "start": "2600910",
    "end": "2607330"
  },
  {
    "text": "and GT ID turned on so any my sequel or mariadb that supports those two features",
    "start": "2607330",
    "end": "2613240"
  },
  {
    "text": "it can run on cachi and any other tricky combinations you know kind of",
    "start": "2613240",
    "end": "2620920"
  },
  {
    "text": "interesting versions of my sequel with other storage engines or anything like that then used oh yes we have some proof",
    "start": "2620920",
    "end": "2627430"
  },
  {
    "text": "of concepts where we were able to run my sequel as well as MariaDB against rocks",
    "start": "2627430",
    "end": "2634090"
  },
  {
    "text": "DB and and some people have actually run it in production as far as I know there",
    "start": "2634090",
    "end": "2642580"
  },
  {
    "text": "was no Vitesse limitation itself those who ran it on production recently",
    "start": "2642580",
    "end": "2648280"
  },
  {
    "text": "migrated to in ODB because rocks vb itself has some limitations so if my",
    "start": "2648280",
    "end": "2653890"
  },
  {
    "text": "sequel with rocks DB will work for you you can totally run with us on it awesome great thanks",
    "start": "2653890",
    "end": "2659920"
  },
  {
    "text": "okay let's see I'm gonna mix it up a little bit to just try to make sure we get as many different people represented",
    "start": "2659920",
    "end": "2664930"
  },
  {
    "text": "here as possible and the time that we've got next next question is what what is",
    "start": "2664930",
    "end": "2670809"
  },
  {
    "text": "the benefit of using the tests over say Amazon my sequel the main difference is",
    "start": "2670809",
    "end": "2677759"
  },
  {
    "text": "I would say scalability is definitely",
    "start": "2677759",
    "end": "2683799"
  },
  {
    "text": "the biggest one the prod Amazon's my sequel even Aurora beyond certain limit",
    "start": "2683799",
    "end": "2690430"
  },
  {
    "text": "would not scale for you as we test you can keep scaling forever another big",
    "start": "2690430",
    "end": "2696460"
  },
  {
    "text": "advantage is even if you can scale with Amazon with things like RDS and Aurora",
    "start": "2696460",
    "end": "2702749"
  },
  {
    "text": "you don't necessarily get to choose the instance size that you like right once",
    "start": "2702749",
    "end": "2708999"
  },
  {
    "text": "you grow beyond a certain size you cannot really split your database within Amazon itself in that case you can still",
    "start": "2708999",
    "end": "2715900"
  },
  {
    "text": "bring with us in and run your database sizes at a sweeter spot that you would",
    "start": "2715900",
    "end": "2723369"
  },
  {
    "text": "like to have and but then the biggest one is the cloud native nature of it",
    "start": "2723369",
    "end": "2728739"
  },
  {
    "text": "test is that you can run with us within your kubernetes instance end-to-end",
    "start": "2728739",
    "end": "2735369"
  },
  {
    "text": "which gives you huge migration advantages so whereas if you use",
    "start": "2735369",
    "end": "2742450"
  },
  {
    "text": "something like RDS you are kind of stuck within that cloud right and you know I",
    "start": "2742450",
    "end": "2748690"
  },
  {
    "text": "would imagine that because with the tests you can tailor your sharding to your actual application patterns that",
    "start": "2748690",
    "end": "2755710"
  },
  {
    "text": "even on a apples to apples comparison you know scale wise you could",
    "start": "2755710",
    "end": "2762009"
  },
  {
    "text": "potentially get some pretty fantastic performance benefits yes totally totally",
    "start": "2762009",
    "end": "2767410"
  },
  {
    "text": "and and also it with the connection pooling features it runs your mice",
    "start": "2767410",
    "end": "2773980"
  },
  {
    "text": "equals much cooler and also the biggest nightmares of DBS is the sudden overload",
    "start": "2773980",
    "end": "2782739"
  },
  {
    "text": "spikes and which handles them really really well I don't know if I'm allowed",
    "start": "2782739",
    "end": "2790059"
  },
  {
    "text": "to talk about this but I there was a recent outrage on slack and they said we test just didn't even blink",
    "start": "2790059",
    "end": "2798660"
  },
  {
    "text": "fantastic like to hear that all right so",
    "start": "2798660",
    "end": "2803920"
  },
  {
    "text": "the next one hmm okay so so I think the questions around",
    "start": "2803920",
    "end": "2810550"
  },
  {
    "text": "replication the the it says how frequently is data backed up but I think really it's you know it's it's asking",
    "start": "2810550",
    "end": "2816820"
  },
  {
    "text": "about the replication and if the master goes down you know is any data lost so",
    "start": "2816820",
    "end": "2824920"
  },
  {
    "text": "yeah so that's a good question but go ahead yeah it depends on actually your",
    "start": "2824920",
    "end": "2830230"
  },
  {
    "text": "sensitivity so you can run with us in a way that you will not lose any data both",
    "start": "2830230",
    "end": "2836890"
  },
  {
    "text": "whether you are using mounted storage or local storage you can configure the test",
    "start": "2836890",
    "end": "2842500"
  },
  {
    "text": "to not use any data so if you are using local storage then semi sink replication",
    "start": "2842500",
    "end": "2849040"
  },
  {
    "text": "is highly recommended which means that if you configure it that way",
    "start": "2849040",
    "end": "2854620"
  },
  {
    "text": "no commit will be considered complete until one other replica a case has that data which means that if you lose that",
    "start": "2854620",
    "end": "2861070"
  },
  {
    "text": "master you're guaranteed to be able to failover to another master and find that transaction that completed or you could",
    "start": "2861070",
    "end": "2868570"
  },
  {
    "text": "use mounted storage but if you use mounted storage you definitely have to",
    "start": "2868570",
    "end": "2875200"
  },
  {
    "text": "run with the conservative settings of my sequel where every commit is flushed",
    "start": "2875200",
    "end": "2881950"
  },
  {
    "text": "into the storage and in that case you will not lose data and the somewhat sad",
    "start": "2881950",
    "end": "2889210"
  },
  {
    "text": "part is that if you configure it that way it does slow you down even further",
    "start": "2889210",
    "end": "2895080"
  },
  {
    "text": "so I would imagine that basically the only way to lose data is to lose every single replica in at the same time in",
    "start": "2895260",
    "end": "2902920"
  },
  {
    "text": "your shard at the same time right in that case at the same time so the so typically what I would recommend is if",
    "start": "2902920",
    "end": "2909670"
  },
  {
    "text": "you are using like if your workload has a large number of replicas anyway",
    "start": "2909670",
    "end": "2915070"
  },
  {
    "text": "because you have you are running a lot of Reap traffic and if you are",
    "start": "2915070",
    "end": "2920350"
  },
  {
    "text": "cross-sell because you you need that then local storage is by far",
    "start": "2920350",
    "end": "2925880"
  },
  {
    "text": "a huge win not only are you going to get huge performance benefits the fact that",
    "start": "2925880",
    "end": "2931850"
  },
  {
    "text": "you have these many replicas gives you huge survivability so it is very hard to",
    "start": "2931850",
    "end": "2937040"
  },
  {
    "text": "lose the more and more replicas you have and the more replicas you have cross-sell it is almost impossible to",
    "start": "2937040",
    "end": "2943220"
  },
  {
    "text": "lose all your data whereas if you are smaller where you need only one master",
    "start": "2943220",
    "end": "2949850"
  },
  {
    "text": "and nothing else you send all your queries to one master in that case it is",
    "start": "2949850",
    "end": "2955370"
  },
  {
    "text": "recommended that you go with mounted storage that is a much more cost effective way of running with us right",
    "start": "2955370",
    "end": "2962480"
  },
  {
    "text": "right you know I I was really intrigued by the whole kind of materialized sort",
    "start": "2962480",
    "end": "2968300"
  },
  {
    "text": "of master data distribution approach that's that's that's super slick and especially the fact that you can have",
    "start": "2968300",
    "end": "2974390"
  },
  {
    "text": "different you know partition keys on the data set you know to make it you know",
    "start": "2974390",
    "end": "2980060"
  },
  {
    "text": "fit with the with the model of the the parent that's that's pretty cool stuff and I'm guessing that in this case that",
    "start": "2980060",
    "end": "2987980"
  },
  {
    "text": "all of the replicated data there I mean even if you had the exact partition same",
    "start": "2987980",
    "end": "2993440"
  },
  {
    "text": "partition key that these these materialized guys they're not eligible for election right they're just they're",
    "start": "2993440",
    "end": "2999830"
  },
  {
    "text": "just copies of the data correct correct they are they are super they are to be treated as copies but you could you",
    "start": "2999830",
    "end": "3008770"
  },
  {
    "text": "could go through way so the there are two workflows that we plan to support one is this materialization on almost",
    "start": "3008770",
    "end": "3016660"
  },
  {
    "text": "identical workflow which is actually a migration right so instead of saying",
    "start": "3016660",
    "end": "3022030"
  },
  {
    "text": "materialized you should say migrate the exact same thing happens in but in that case what it allows you to do is",
    "start": "3022030",
    "end": "3028360"
  },
  {
    "text": "actually cut over your rights to the other table right so it becomes the",
    "start": "3028360",
    "end": "3033730"
  },
  {
    "text": "master and vice versa yeah so it is a fire it is a failover in that case but it is not a it is not meant for",
    "start": "3033730",
    "end": "3040390"
  },
  {
    "text": "unplanned use more of a planned thing being that it's not really efficient for",
    "start": "3040390",
    "end": "3046630"
  },
  {
    "text": "me to write data in this format I it's more efficient to do it that way so it's",
    "start": "3046630",
    "end": "3051910"
  },
  {
    "text": "more for a planned scenario yeah it is we covered a secure",
    "start": "3051910",
    "end": "3057520"
  },
  {
    "text": "wonderful ability for you to explore like what is going to be more efficient and then just sort of like you know",
    "start": "3057520",
    "end": "3063430"
  },
  {
    "text": "learn as you go exactly exactly like a lot of arguments that people have",
    "start": "3063430",
    "end": "3068500"
  },
  {
    "text": "about how to short things sometimes they get very heated so this at least lets",
    "start": "3068500",
    "end": "3075070"
  },
  {
    "text": "you at least says well we'll do it this way and if things great we can go we can always change our mind you know it's a",
    "start": "3075070",
    "end": "3082510"
  },
  {
    "text": "lot like micro-services right you want to be able to iteratively discover the right architecture yeah exactly",
    "start": "3082510",
    "end": "3087820"
  },
  {
    "text": "cool stuff okay let's see yeah so how about a general kind of commentary on Latin see in big deployments oh yes",
    "start": "3087820",
    "end": "3097930"
  },
  {
    "text": "that's a good one so the way so it does add a static overhead because it is",
    "start": "3097930",
    "end": "3104740"
  },
  {
    "text": "which is actually basically the number of hops that you have to go through before you reach my sequel it is",
    "start": "3104740",
    "end": "3112570"
  },
  {
    "text": "typically about two milliseconds so if yeah so if your query",
    "start": "3112570",
    "end": "3119290"
  },
  {
    "text": "some people are do are sensitive to it those that are used to directly sending",
    "start": "3119290",
    "end": "3124359"
  },
  {
    "text": "to my sequel and my secure response in millisecond and this suddenly is three",
    "start": "3124359",
    "end": "3129640"
  },
  {
    "text": "milliseconds but most people find it absorbable because typical my sequel",
    "start": "3129640",
    "end": "3136750"
  },
  {
    "text": "latency is runs in the five to ten millisecond range per query and in that",
    "start": "3136750",
    "end": "3142119"
  },
  {
    "text": "case this is something that you won't even notice yeah so you seven to twelve or something yeah and I would imagine if",
    "start": "3142119",
    "end": "3149680"
  },
  {
    "text": "you get into a massive scatter gather operation they just crushes my sequel yes totally",
    "start": "3149680",
    "end": "3156040"
  },
  {
    "text": "that's because when you do scatter gather now it's fall parallel right yeah",
    "start": "3156040",
    "end": "3162010"
  },
  {
    "text": "you run eight ten thirty day at 30x faster than you run before yeah yeah",
    "start": "3162010",
    "end": "3167440"
  },
  {
    "text": "that's awesome there's a question about joins across charge which I think maybe that happened before you download all",
    "start": "3167440",
    "end": "3172480"
  },
  {
    "text": "that how about let's see so there's a",
    "start": "3172480",
    "end": "3180160"
  },
  {
    "text": "question here on our the demo scripts available somewhere so that people could you know maybe retry your examples and",
    "start": "3180160",
    "end": "3186730"
  },
  {
    "text": "stuff yes I just pushed my later to branch into ssv demos six which is on",
    "start": "3186730",
    "end": "3195130"
  },
  {
    "text": "the planet scale let me show you I'll show it on the screen and maybe you can",
    "start": "3195130",
    "end": "3200860"
  },
  {
    "text": "post it later so branches so this so the",
    "start": "3200860",
    "end": "3208630"
  },
  {
    "text": "entire demo that I showed is in in in this branch of BTS so if you can see my",
    "start": "3208630",
    "end": "3218890"
  },
  {
    "text": "screen that's where it is and maybe I can send it to you if you send me an",
    "start": "3218890",
    "end": "3224080"
  },
  {
    "text": "email I can send you the link to this great match yeah I think there's like a summary email that comes up after and so",
    "start": "3224080",
    "end": "3230980"
  },
  {
    "text": "maybe we can drop it in there get it out to everybody that way maybe we've got time for maybe one more question there's",
    "start": "3230980",
    "end": "3237160"
  },
  {
    "text": "a lot of people interested in not being got them so excited about the test",
    "start": "3237160",
    "end": "3242710"
  },
  {
    "text": "they're like hey can I use this with other database engines like wins Postgres support coming and you know",
    "start": "3242710",
    "end": "3247810"
  },
  {
    "text": "other databases so can you comment on that so yes we toss architectural e is",
    "start": "3247810",
    "end": "3253090"
  },
  {
    "text": "not married to my sequel it is mostly an engine that looks as SQL and decides",
    "start": "3253090",
    "end": "3259120"
  },
  {
    "text": "where to send it and what to do with the results so there is nothing architectural that prevents the test",
    "start": "3259120",
    "end": "3265660"
  },
  {
    "text": "from being ported to my sequel from it has to be ported to Postgres it's just",
    "start": "3265660",
    "end": "3271570"
  },
  {
    "text": "that we have had our hands full with so much my sequel people asking for",
    "start": "3271570",
    "end": "3276700"
  },
  {
    "text": "features that we haven't had time to spend to port it to Postgres but it's",
    "start": "3276700",
    "end": "3281890"
  },
  {
    "text": "definitely and as more and more people are asking we are beginning to think that maybe we should do this sooner than",
    "start": "3281890",
    "end": "3288310"
  },
  {
    "text": "later if if a community member got really excited about this how many man-hours do you think they'd have to",
    "start": "3288310",
    "end": "3294220"
  },
  {
    "text": "put in to build the my sequel shim and is that easy as it is the test built to",
    "start": "3294220",
    "end": "3299680"
  },
  {
    "text": "be able to be pluggable there I mean I know you mentioned a lot of the other kind of facades that you could drop in",
    "start": "3299680",
    "end": "3305050"
  },
  {
    "text": "but is that one of them yeah yeah I think I would estimate something like six six to twelve percent months so if",
    "start": "3305050",
    "end": "3314170"
  },
  {
    "text": "you on it maybe in six months they can have with us on Postgres would be my",
    "start": "3314170",
    "end": "3320260"
  },
  {
    "text": "guess really not very very back of the envelope would be my guess all right so uh for",
    "start": "3320260",
    "end": "3328460"
  },
  {
    "text": "people working hardcore could get it done in a quarter yes but then the that",
    "start": "3328460",
    "end": "3334970"
  },
  {
    "text": "is that I'm popping right so Christmas we expected by Christmas yes okay cool well it is top of the hour",
    "start": "3334970",
    "end": "3345410"
  },
  {
    "text": "again so okay so go super awesome you know the tests great stuff and",
    "start": "3345410",
    "end": "3350870"
  },
  {
    "text": "thanks for the fantastic presentation hope everybody enjoyed sorry we didn't get to all the questions but I feel like",
    "start": "3350870",
    "end": "3356270"
  },
  {
    "text": "we you know covered a good swath of them so great show and hope to see you doing",
    "start": "3356270",
    "end": "3362150"
  },
  {
    "text": "another talk on the test soon thank you very much yeah take care bye everybody",
    "start": "3362150",
    "end": "3369400"
  }
]