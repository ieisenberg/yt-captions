[
  {
    "text": "Welcome to our presentation thank you for coming um even though it's late uh during the day um we will be giving you",
    "start": "40",
    "end": "8559"
  },
  {
    "text": "a presentation called from UI to storage unraveling unraveling the magic of Fus query processing and we hope that it",
    "start": "8559",
    "end": "16160"
  },
  {
    "text": "will be entertaining and useful for you and yeah isn't there a better way to",
    "start": "16160",
    "end": "24080"
  },
  {
    "text": "start a presentation then by talking about ourselves first just to pick your interest uh I'm GIS I'm a cability",
    "start": "24080",
    "end": "31720"
  },
  {
    "text": "engineer at Vinted Vinted is a mostly a secondhand fashion Marketplace uh it's",
    "start": "31720",
    "end": "37800"
  },
  {
    "text": "quite popular and especially in France and Paris so you you are probably familiar with it if you live here um so",
    "start": "37800",
    "end": "46120"
  },
  {
    "text": "we run a huge Thanos teack invented for all of our monitoring needs I've been personally a fos",
    "start": "46120",
    "end": "52840"
  },
  {
    "text": "maintainer for almost uh not almost but for five years and and and Counting so",
    "start": "52840",
    "end": "60239"
  },
  {
    "text": "it's been a quite a long journey and I'm still enjoying it and I hope that I will keep enjoying it for the next five years",
    "start": "60239",
    "end": "67960"
  },
  {
    "text": "and I also write a blog at gas. blog about infrastructure monitoring related",
    "start": "67960",
    "end": "74200"
  },
  {
    "text": "topics programming go um so if that's interest you please feel free to jump on",
    "start": "74200",
    "end": "80439"
  },
  {
    "text": "it and with me I have Michael who will now talk about himself a little bit and",
    "start": "80439",
    "end": "86240"
  },
  {
    "text": "do the rest of presentation hi I'm Michael uh an SRE at Ivan The Trusted",
    "start": "86240",
    "end": "92799"
  },
  {
    "text": "open source data platform for everyone uh we have a booth go check it out uh",
    "start": "92799",
    "end": "98040"
  },
  {
    "text": "though only for two more weeks I decided to start a new Journey at Cloud flare which is pretty cool uh I've been a",
    "start": "98040",
    "end": "104680"
  },
  {
    "text": "tanos maintainer for like 6 months or something mostly fixing the oddb here",
    "start": "104680",
    "end": "109799"
  },
  {
    "text": "and there and playing with the query engine which is a fairly captivating",
    "start": "109799",
    "end": "114960"
  },
  {
    "text": "project but uh enough about us so",
    "start": "114960",
    "end": "120520"
  },
  {
    "text": "why did we decide to give this talk want to introduce you to tanos of",
    "start": "120520",
    "end": "126280"
  },
  {
    "text": "course and we figured it might be a nice angle to approach this from the point of view of a query",
    "start": "126280",
    "end": "133080"
  },
  {
    "text": "execution and um we hope to give you a birs iie about how data flows to tanos",
    "start": "133080",
    "end": "138480"
  },
  {
    "text": "while it tries to answer your queries yeah what even is a",
    "start": "138480",
    "end": "144720"
  },
  {
    "text": "tanos um to put into one sentence it's a system of microservices designed to",
    "start": "144720",
    "end": "149959"
  },
  {
    "text": "scale promus and you can deploy tanas besides your running promus to Archive data into",
    "start": "149959",
    "end": "156720"
  },
  {
    "text": "object storage and Achieve very high retention rates uh typical months to years instead of",
    "start": "156720",
    "end": "162720"
  },
  {
    "text": "days in fact um yesterday I learned that the original working title for the project was PR LTS which tells you",
    "start": "162720",
    "end": "171080"
  },
  {
    "text": "everything and it also allows you to Cluster up your prous deployments horizontally and still keep a single",
    "start": "171080",
    "end": "177040"
  },
  {
    "text": "pane of Glass by proxying queries and merging results tanos is the incubating cncf",
    "start": "177040",
    "end": "184280"
  },
  {
    "text": "project which is the reason we allowed to speak here in the first place and in addition to be conceptually",
    "start": "184280",
    "end": "192560"
  },
  {
    "text": "really tied to promethus we also use promethus libraries for many Tas",
    "start": "192560",
    "end": "197760"
  },
  {
    "text": "tasks in fact um here's a wordcloud generated from our imports from internal",
    "start": "197760",
    "end": "206200"
  },
  {
    "text": "internal modules and you see promethus is super prominent there so safe to say um we love promethus a lot",
    "start": "206200",
    "end": "213640"
  },
  {
    "text": "and we hope promethus laughes us back a little too and since we rely so heavily on prus",
    "start": "213640",
    "end": "220000"
  },
  {
    "text": "libraries we also naturally try to Upstream the odd bug we find or any",
    "start": "220000",
    "end": "225280"
  },
  {
    "text": "improvements that we deem necessary so it's basically a great example of Open Source working",
    "start": "225280",
    "end": "233159"
  },
  {
    "text": "properly um I mentioned we feels a lot now so probably that warrants a short introduction a very short one",
    "start": "233159",
    "end": "241239"
  },
  {
    "text": "so um promus deals in time serus mainly identified by a name and this case HTTP",
    "start": "241239",
    "end": "248799"
  },
  {
    "text": "requests total and a few dis igora labels like the stos code for your HTTP",
    "start": "248799",
    "end": "256599"
  },
  {
    "text": "requests you would typically use promus client libraries to instrument your application and every time you answer an",
    "start": "257560",
    "end": "263759"
  },
  {
    "text": "HTP request you increment a counter and if you now point from meus to your",
    "start": "263759",
    "end": "268840"
  },
  {
    "text": "application it will go and collect those samples and build up an internal database of um time series for your",
    "start": "268840",
    "end": "275400"
  },
  {
    "text": "querying pleasure prus does much more it's a full-blown monitoring solution but for",
    "start": "275400",
    "end": "281759"
  },
  {
    "text": "the purpose of this talk talk this is enough to know so uh sorry for all the",
    "start": "281759",
    "end": "287400"
  },
  {
    "text": "prome of fishos in the audience if I left something important out um you probably want to experience",
    "start": "287400",
    "end": "294360"
  },
  {
    "text": "the same carrying pleasure with tnos too so naturally we implemented micros",
    "start": "294360",
    "end": "300400"
  },
  {
    "text": "service for that the app named quaria and the purpose of the quaria",
    "start": "300400",
    "end": "305840"
  },
  {
    "text": "that's the first component of tanos that we're going to touch today is uh to to evaluate queries",
    "start": "305840",
    "end": "313159"
  },
  {
    "text": "naturally a promethus query is based it's typically promql the the promus",
    "start": "313280",
    "end": "319039"
  },
  {
    "text": "query language and the query on the screen might be the query you issue if you want to count kubernetes notes in",
    "start": "319039",
    "end": "325280"
  },
  {
    "text": "your clusters this ambigu by a region and once you receive a query in the",
    "start": "325280",
    "end": "331440"
  },
  {
    "text": "querier it will go and talk to internal promus libraries to parse it into an syntax",
    "start": "331440",
    "end": "337960"
  },
  {
    "text": "tree which also corresponds very tightly to the physical plan that's actually getting executed by the promethus engine",
    "start": "337960",
    "end": "344720"
  },
  {
    "text": "in this case we would recursively evaluate this query by first looking at",
    "start": "344720",
    "end": "350199"
  },
  {
    "text": "the sum which would then request data from Cube node info in this case which is a leaf note so it would have to go to",
    "start": "350199",
    "end": "358080"
  },
  {
    "text": "storage to fetch data and storage in the prom engine is uh an interface it's",
    "start": "358080",
    "end": "365240"
  },
  {
    "text": "obstructed out the the call you would make is called select and in this case you would",
    "start": "365240",
    "end": "372000"
  },
  {
    "text": "select all time series that have a name label with the value Cube node",
    "start": "372000",
    "end": "378520"
  },
  {
    "text": "info now promus would Implement select by basically going into its time series",
    "start": "378639",
    "end": "384639"
  },
  {
    "text": "database fetching all the series with the name Cube note info fetching the",
    "start": "384639",
    "end": "389759"
  },
  {
    "text": "data from memory mapped blocks and returning it to the engine which then can pass it up the tree and evaluate the",
    "start": "389759",
    "end": "396319"
  },
  {
    "text": "expression that's pretty fast and great but uh the the tanos querer is a",
    "start": "396319",
    "end": "401880"
  },
  {
    "text": "stateless component so we don't have the same luxury to go to memory map blocks and fetch data from",
    "start": "401880",
    "end": "407840"
  },
  {
    "text": "disk so we have to implement select somewhat differently and we",
    "start": "407840",
    "end": "415520"
  },
  {
    "text": "do typically we point the the querer to to things we call store apis on the",
    "start": "415520",
    "end": "420879"
  },
  {
    "text": "right there and the store API is a defined trpc interface for retrieving time",
    "start": "420879",
    "end": "427080"
  },
  {
    "text": "serious data tanos shipped with a few built-in store apis that makes sense",
    "start": "427080",
    "end": "432440"
  },
  {
    "text": "given its mission to scale promethus but generally it's an interface anyone could Implement a new",
    "start": "432440",
    "end": "438759"
  },
  {
    "text": "store API if they want to and um gurus will int introduce the buil and store apis later on",
    "start": "438759",
    "end": "447879"
  },
  {
    "text": "and now we have many store apis potentially to fetch data from very",
    "start": "447879",
    "end": "453039"
  },
  {
    "text": "disparate sources so we don't have the luxury of uh one source of truth anymore",
    "start": "453039",
    "end": "458639"
  },
  {
    "text": "and in fact promus typically is deployed in h8 pairs this ambigu by the replica",
    "start": "458639",
    "end": "464720"
  },
  {
    "text": "label and if we now fan out to both of those uh we would get all the data for",
    "start": "464720",
    "end": "471720"
  },
  {
    "text": "example here Cube note info for node A and B but two pairs for replica one and",
    "start": "471720",
    "end": "476879"
  },
  {
    "text": "two this is no problematic right we if we sent it back to the query engine and bubble it up the execution tree we would",
    "start": "476879",
    "end": "483879"
  },
  {
    "text": "get the result four instead of the expected two which is not great but if you actually tell the querer that it has",
    "start": "483879",
    "end": "490960"
  },
  {
    "text": "to deal with replicated data um one of its responsibilities is to D duplicate",
    "start": "490960",
    "end": "498479"
  },
  {
    "text": "it so this is great we can we can answer from ql now but",
    "start": "498879",
    "end": "505039"
  },
  {
    "text": "um also comes with a few problems right instead of fetching data from memory met blocks we have to go over potentially",
    "start": "505039",
    "end": "512360"
  },
  {
    "text": "slow Network links and talk to many store apis which can also retrieve um",
    "start": "512360",
    "end": "519159"
  },
  {
    "text": "fair amount of data so um your responses will be as slow as the",
    "start": "519159",
    "end": "525880"
  },
  {
    "text": "slowest store this Alters the performance profile of tanos to a degree that kind",
    "start": "525880",
    "end": "532480"
  },
  {
    "text": "of justifies doing our own tanos specific optimizations to queres and in fact note that querer is",
    "start": "532480",
    "end": "538720"
  },
  {
    "text": "stateless it does nothing but answering queries so we can do different optimizations we don't have to worry",
    "start": "538720",
    "end": "544200"
  },
  {
    "text": "about queries interfering with data collection so we can throw more",
    "start": "544200",
    "end": "549320"
  },
  {
    "text": "resources at queries and adapt our execution to that so in short uh we wrote Our Own",
    "start": "549320",
    "end": "556480"
  },
  {
    "text": "prom queer engine to like do",
    "start": "556480",
    "end": "561000"
  },
  {
    "text": "that the query on this slide demonstrates like average amount of HTTP",
    "start": "563440",
    "end": "568600"
  },
  {
    "text": "requests that return with startus code 500 we might want to evaluate that",
    "start": "568600",
    "end": "574519"
  },
  {
    "text": "and um if we do that we pass it to the",
    "start": "574519",
    "end": "579640"
  },
  {
    "text": "abstract syntax Tree on the left which you see ends with two calls to storage right one's for HTTP reest total all of",
    "start": "579640",
    "end": "586399"
  },
  {
    "text": "it and once for status code 500 so if we would do that with the scheme I described earlier we would go to storage",
    "start": "586399",
    "end": "593560"
  },
  {
    "text": "twice like amplifying the amount of data we fetch over the network one optimization that we can do is we just",
    "start": "593560",
    "end": "600800"
  },
  {
    "text": "fetch it once and do client side filtering and then decode the chunks in",
    "start": "600800",
    "end": "607399"
  },
  {
    "text": "in parallel",
    "start": "607399",
    "end": "611839"
  },
  {
    "text": "um and we also have like plenty other optimizations but to be honest there is only so much you can optimize on the on",
    "start": "612959",
    "end": "620720"
  },
  {
    "text": "the query level once you are actually in the querer so one of our maintainers philli",
    "start": "620720",
    "end": "628160"
  },
  {
    "text": "recently dreamed up a another way of evaluating promql using our engine and that would be the",
    "start": "628160",
    "end": "636240"
  },
  {
    "text": "distributed mode of operating as you see U if you want to have the sum of your",
    "start": "636240",
    "end": "643600"
  },
  {
    "text": "Cube note info the amount of kubernetes nodes in all of your clusters that's",
    "start": "643600",
    "end": "648760"
  },
  {
    "text": "distributive right you could just fetch it in the individual clusters instead of",
    "start": "648760",
    "end": "654800"
  },
  {
    "text": "U asking for data from them you just ask for partial sums and sum the sums again",
    "start": "654800",
    "end": "660160"
  },
  {
    "text": "and if you shart your dat data in a way that guarantees that the sums are not overlapping this is actually well",
    "start": "660160",
    "end": "666720"
  },
  {
    "text": "defined and typically like query results are bers of magnitude smaller than raw",
    "start": "666720",
    "end": "673399"
  },
  {
    "text": "data so this is very promising but it doesn't look like much so I asked Philip to",
    "start": "673399",
    "end": "680480"
  },
  {
    "text": "provide us with some examples who runs it in production on at Shopify at a very",
    "start": "680480",
    "end": "685519"
  },
  {
    "text": "large scale and this is one of those please",
    "start": "685519",
    "end": "690880"
  },
  {
    "text": "understand there might be um industrial Espionage going on so I had to blur out the results it's very",
    "start": "690880",
    "end": "697320"
  },
  {
    "text": "business critical data but it's basically the same query I talked about evaluated once in the prus engine with",
    "start": "697320",
    "end": "704880"
  },
  {
    "text": "the with the um select scheme that I introduced and note it's returning in 15",
    "start": "704880",
    "end": "714000"
  },
  {
    "text": "seconds and please understand that's not a stab against the promus engine it's great this is um",
    "start": "714000",
    "end": "720240"
  },
  {
    "text": "only because of the way we have to implement select over Network so 15 seconds that's great if we",
    "start": "720240",
    "end": "728720"
  },
  {
    "text": "now configure the toos engine and configure it properly to use the distributed mode we can execute the same query and",
    "start": "728720",
    "end": "736199"
  },
  {
    "text": "it returns in two seconds that's a seven times speed up so yeah that's pretty Paradigm",
    "start": "736199",
    "end": "743920"
  },
  {
    "text": "shifting it's amazing like really excited about it so try it out if you",
    "start": "743920",
    "end": "751600"
  },
  {
    "text": "can yeah with thank",
    "start": "751600",
    "end": "756560"
  },
  {
    "text": "you yeah and with that I hand over to my lovely co-presenter to talk about the store API implementations that chip with",
    "start": "758880",
    "end": "765360"
  },
  {
    "text": "Thanos next slide next slide yeah what's a cury engine about the the storage",
    "start": "765360",
    "end": "771199"
  },
  {
    "text": "layer so we will go through uh different microservices that are part of fos uh",
    "start": "771199",
    "end": "779320"
  },
  {
    "text": "which implement the storage layer uh um we will go in the order in my",
    "start": "779320",
    "end": "785959"
  },
  {
    "text": "opinion of the sophistication of the different components and let's start with the simplest one the side car U for",
    "start": "785959",
    "end": "793560"
  },
  {
    "text": "many years it was the most popular component um so it does what it says it's a side",
    "start": "793560",
    "end": "801120"
  },
  {
    "text": "car it literally attaches to promethus and uses its interfaces and reads data",
    "start": "801120",
    "end": "806560"
  },
  {
    "text": "from the disk to implement the store API interface um so perus implements the",
    "start": "806560",
    "end": "814880"
  },
  {
    "text": "remote read API um not to be confused of the other API by the same name but REM",
    "start": "814880",
    "end": "821440"
  },
  {
    "text": "the remote read API allows you to read in a stream way from promus through the",
    "start": "821440",
    "end": "827639"
  },
  {
    "text": "HTT through HTTP um sidecar also has this component called shipper so whenever SAR notices",
    "start": "827639",
    "end": "835320"
  },
  {
    "text": "that promethus had produced a new block it hard links to it so that it wouldn't",
    "start": "835320",
    "end": "842440"
  },
  {
    "text": "disappear a hard link is another reference at least in Linux it might be",
    "start": "842440",
    "end": "847560"
  },
  {
    "text": "different on other systems but on Linux it's another reference to the to an inode and this means that even if perus",
    "start": "847560",
    "end": "856079"
  },
  {
    "text": "deletes that block it still exist on the dis like it doesn't get garbage",
    "start": "856079",
    "end": "861320"
  },
  {
    "text": "collected um and sore implements the story pii so whenever a query comes in",
    "start": "861320",
    "end": "866800"
  },
  {
    "text": "from an user the cier sends a serious request to the side car and then it",
    "start": "866800",
    "end": "872079"
  },
  {
    "text": "fetches the needed data from promus um yeah next side the",
    "start": "872079",
    "end": "879320"
  },
  {
    "text": "ruler um so we have all of the data that we need but prus also has the subsystem",
    "start": "879320",
    "end": "887560"
  },
  {
    "text": "which allows you to periodically execute alerting and recording rules and ruler",
    "start": "887560",
    "end": "892720"
  },
  {
    "text": "implements the same thing uh but in a separate uh process um Pro the ruler has an",
    "start": "892720",
    "end": "900720"
  },
  {
    "text": "integrated tsdb so we are quite literally starting another tsdb in the",
    "start": "900720",
    "end": "906120"
  },
  {
    "text": "ruler process um and that tsdb is used for storing the results of the recording",
    "start": "906120",
    "end": "913279"
  },
  {
    "text": "and alerting rules evaluation and of course the ruler just",
    "start": "913279",
    "end": "918440"
  },
  {
    "text": "like promethus can also send alerts to alert manager if it's",
    "start": "918440",
    "end": "924199"
  },
  {
    "text": "configured and yeah the same storyi interface uh The Courier sends a through",
    "start": "924199",
    "end": "929399"
  },
  {
    "text": "JPC and ruler reads from that tsdb and sends back the",
    "start": "929399",
    "end": "935800"
  },
  {
    "text": "data now we are upping up the sophistication an because the receiver",
    "start": "936720",
    "end": "942399"
  },
  {
    "text": "has more than one tsdb uh it has the multi tsdb component",
    "start": "942399",
    "end": "948560"
  },
  {
    "text": "so I think three years ago or so red hat has donated this component to the fos",
    "start": "948560",
    "end": "955440"
  },
  {
    "text": "project and the receiver component is responsible for",
    "start": "955440",
    "end": "960920"
  },
  {
    "text": "um responsible for storing data which comes over the remote right",
    "start": "961600",
    "end": "967120"
  },
  {
    "text": "interface so remote write is a Nifty way in promus to write data from one noes to",
    "start": "967120",
    "end": "973839"
  },
  {
    "text": "another um it's really just a protab encoded",
    "start": "973839",
    "end": "979079"
  },
  {
    "text": "metrics data get that gets sent over HTTP so you can see in this picture that",
    "start": "979079",
    "end": "985199"
  },
  {
    "text": "there are multiple promus agents scraping metrics data and they are all sending uh their the data that they have",
    "start": "985199",
    "end": "992959"
  },
  {
    "text": "through remote right um a cool thing about multi tsdb is that",
    "start": "992959",
    "end": "1001079"
  },
  {
    "text": "it reuses it also reuses the same the duplication Heap so Michael didn't mention that but whenever a serious",
    "start": "1001079",
    "end": "1009759"
  },
  {
    "text": "request comes in through grpc the response needs to be sorted so for example if someone asks for a metric",
    "start": "1009759",
    "end": "1017399"
  },
  {
    "text": "called up then the receiver has to look into all of the tdbs that it knows about",
    "start": "1017399",
    "end": "1024400"
  },
  {
    "text": "in this case there's like n tenants so it has to merge data coming",
    "start": "1024400",
    "end": "1031079"
  },
  {
    "text": "all coming from all of the tenants into one coherent sorted stream um yeah and that uses the same",
    "start": "1031079",
    "end": "1039280"
  },
  {
    "text": "shipper component because it's the same tsdb just like promethus um so whenever a new block is",
    "start": "1039280",
    "end": "1046400"
  },
  {
    "text": "produced the shipper not notices that and uploads it",
    "start": "1046400",
    "end": "1051520"
  },
  {
    "text": "to remote object storage and uh yeah last but not least",
    "start": "1051520",
    "end": "1056799"
  },
  {
    "text": "the store component we have all of the data in remote object storage now but we need to",
    "start": "1056799",
    "end": "1064080"
  },
  {
    "text": "fetch it just to complete the full circle so the star component does just",
    "start": "1064080",
    "end": "1071440"
  },
  {
    "text": "that and again the same problem reappears but in a different form the",
    "start": "1071440",
    "end": "1076919"
  },
  {
    "text": "store component knows about typically like hundreds and hundreds of blocks and",
    "start": "1076919",
    "end": "1082400"
  },
  {
    "text": "they might have the needed data and again because we want to fetch",
    "start": "1082400",
    "end": "1088600"
  },
  {
    "text": "data in parallel to make it as fast as possible this also means that we have to merge everything on the fly into one",
    "start": "1088600",
    "end": "1096039"
  },
  {
    "text": "stream so we use the same he",
    "start": "1096039",
    "end": "1101360"
  },
  {
    "text": "um yeah so we sold you the we sold you the idea of using Thanos",
    "start": "1101360",
    "end": "1107640"
  },
  {
    "text": "we told you about all the components the new engine but how to use the new",
    "start": "1107640",
    "end": "1113360"
  },
  {
    "text": "engine it's quite simple there's a parameter you can use to change the",
    "start": "1113360",
    "end": "1119240"
  },
  {
    "text": "default engine that is used whenever a request comes in through HTTP it's also possible to use that drop",
    "start": "1119240",
    "end": "1126720"
  },
  {
    "text": "down you also saw it in the screenshot in the in the screenshots before um you",
    "start": "1126720",
    "end": "1133919"
  },
  {
    "text": "can use that drop down to select a different engine for your query",
    "start": "1133919",
    "end": "1140720"
  },
  {
    "text": "um so use the pro um use this drop down to check how the queries are working and",
    "start": "1141320",
    "end": "1148960"
  },
  {
    "text": "if it looks good then just use that parameter to change the default engine",
    "start": "1148960",
    "end": "1155159"
  },
  {
    "text": "um and that's not all we also noticed an opportunity to prove to",
    "start": "1155159",
    "end": "1161400"
  },
  {
    "text": "improve the prom Co engine even more so technically pruse has this functionality",
    "start": "1161400",
    "end": "1168559"
  },
  {
    "text": "where where it can expose you certain statistics about the cury execution but it's kind of hard to use",
    "start": "1168559",
    "end": "1175640"
  },
  {
    "text": "because it's not really visible in the UI and and we thought we could improve",
    "start": "1175640",
    "end": "1182559"
  },
  {
    "text": "it so we implemented these two in my opinion cool",
    "start": "1182559",
    "end": "1188679"
  },
  {
    "text": "features the first one is the explain button so it shows you the whole",
    "start": "1188679",
    "end": "1194360"
  },
  {
    "text": "operator tree of the query without actually executing it",
    "start": "1194360",
    "end": "1199520"
  },
  {
    "text": "um in this screenshot you can see the same query that was used before um and",
    "start": "1199520",
    "end": "1205520"
  },
  {
    "text": "it shows you the whole query execution tree um so you can use it to optimize",
    "start": "1205520",
    "end": "1211400"
  },
  {
    "text": "your query without even executing it um you and yeah this was inspired by",
    "start": "1211400",
    "end": "1218280"
  },
  {
    "text": "the SQL analyze statement if you're familiar with it it kind of does the",
    "start": "1218280",
    "end": "1223640"
  },
  {
    "text": "same thing but there's another thing the analyze checkbox that you can",
    "start": "1223640",
    "end": "1229480"
  },
  {
    "text": "see yeah so the analyze checkbox",
    "start": "1229480",
    "end": "1235559"
  },
  {
    "text": "uh makes it so that the prom Co engine now will capture extra metadata about",
    "start": "1235559",
    "end": "1241080"
  },
  {
    "text": "the cury execution right now we only captured the Vault time of each",
    "start": "1241080",
    "end": "1247480"
  },
  {
    "text": "operator um you can see there are a bunch of them in this tree and it",
    "start": "1247480",
    "end": "1252960"
  },
  {
    "text": "captures the Vault time so VA time quite literally means the time that you see on",
    "start": "1252960",
    "end": "1258840"
  },
  {
    "text": "the wall it's not actually the time used by CPU executing all of the instructions",
    "start": "1258840",
    "end": "1264960"
  },
  {
    "text": "but the wall time and because of that you can see that the",
    "start": "1264960",
    "end": "1270000"
  },
  {
    "text": "top level operator is taking the most time and and just taking a look a look at the",
    "start": "1270000",
    "end": "1277880"
  },
  {
    "text": "screenshot you can see that data fetching took the most time and that the",
    "start": "1277880",
    "end": "1282960"
  },
  {
    "text": "query engine is quite fast it only took like 0.1 2 seconds to do all of its",
    "start": "1282960",
    "end": "1292520"
  },
  {
    "text": "calculations so yeah should you use tanos yeah yes you",
    "start": "1292679",
    "end": "1299520"
  },
  {
    "text": "should um there are lots of things that are uh",
    "start": "1299520",
    "end": "1305039"
  },
  {
    "text": "that we still want to implement of course nothing is perfect just like in life um so how what what could can we",
    "start": "1305039",
    "end": "1313880"
  },
  {
    "text": "do so we would like to invite you to try it out you can also join the fos community",
    "start": "1313880",
    "end": "1320480"
  },
  {
    "text": "on the on the cncf slack um I think there are more than 5,000 people on it",
    "start": "1320480",
    "end": "1326120"
  },
  {
    "text": "right now so on the S slack you can connect with like-minded people help others ask",
    "start": "1326120",
    "end": "1333200"
  },
  {
    "text": "questions yourself if you have any and contribute so we welcome any kind of",
    "start": "1333200",
    "end": "1339279"
  },
  {
    "text": "contributions whether it's code um documentation um we are a friendly",
    "start": "1339279",
    "end": "1347520"
  },
  {
    "text": "community that's",
    "start": "1347520",
    "end": "1352960"
  },
  {
    "text": "it can scan the code provide us with feedback if you have any questions",
    "start": "1359520",
    "end": "1364760"
  },
  {
    "text": "please approach the microphones and ask",
    "start": "1364760",
    "end": "1370760"
  },
  {
    "text": "questions question hello thank you for the great",
    "start": "1371080",
    "end": "1378120"
  },
  {
    "text": "present was very interesting to see how this actually looks from the inside uh I've got a question about the",
    "start": "1378120",
    "end": "1383880"
  },
  {
    "text": "duplication it always seemed like magic to me uh that something is retrieving data from different instances which",
    "start": "1383880",
    "end": "1390840"
  },
  {
    "text": "might have slightly different timestamps uh but still the labels which would allow the duplication to happen how is",
    "start": "1390840",
    "end": "1399720"
  },
  {
    "text": "the question of the time stamp drift resolved in the the duplication can you",
    "start": "1399720",
    "end": "1405200"
  },
  {
    "text": "elaborate on that a bit you want no",
    "start": "1405200",
    "end": "1410440"
  },
  {
    "text": "uh so yeah that happens but uh if there are more than one replica",
    "start": "1411559",
    "end": "1418960"
  },
  {
    "text": "with the same data it I think at first chooses the one with the newest data and",
    "start": "1418960",
    "end": "1424840"
  },
  {
    "text": "then it is based on gaps so for example we are iterating through",
    "start": "1424840",
    "end": "1431039"
  },
  {
    "text": "multiple through data from multiple replicas and there's a gap we switch to the other replica um",
    "start": "1431039",
    "end": "1439480"
  },
  {
    "text": "but overall like this time stamp drift problem is real and that's why I think",
    "start": "1439480",
    "end": "1445600"
  },
  {
    "text": "it's recommended to use the receivers because with receivers you can script once and then make a copy of the same",
    "start": "1445600",
    "end": "1451840"
  },
  {
    "text": "data and it is actually much more efficient because in the",
    "start": "1451840",
    "end": "1457200"
  },
  {
    "text": "querier uh we check whether it's an identical copy of the data and if it's",
    "start": "1457200",
    "end": "1462320"
  },
  {
    "text": "an identical copy of the data coming from multiple receiver instances we don't decode it twice or",
    "start": "1462320",
    "end": "1469880"
  },
  {
    "text": "so I would recommend you to use receivers thank",
    "start": "1469880",
    "end": "1475519"
  },
  {
    "text": "you um hi thanks for your presentation it was really nice to follow you uh I",
    "start": "1476120",
    "end": "1482080"
  },
  {
    "text": "have two questions my first question is the tanos PQ engine is it stable or",
    "start": "1482080",
    "end": "1488640"
  },
  {
    "text": "still in experimental State it's pretty much stable you can just use it we have",
    "start": "1488640",
    "end": "1494760"
  },
  {
    "text": "a like the thing with implementing your own prom Eng it's fairly easy to test",
    "start": "1494760",
    "end": "1500200"
  },
  {
    "text": "for correctness right you just execute the same query against the Upstream engine and against the prom cure engine",
    "start": "1500200",
    "end": "1506520"
  },
  {
    "text": "and you check that the results match right so actually one of our maintainers",
    "start": "1506520",
    "end": "1511720"
  },
  {
    "text": "implemented a fuzzer that just generates random prom C engines and queries and",
    "start": "1511720",
    "end": "1518000"
  },
  {
    "text": "data and executes 10,000 random queries on random data compares the results on",
    "start": "1518000",
    "end": "1524000"
  },
  {
    "text": "every pull request and then we also have thousands I think of uh accept tests so",
    "start": "1524000",
    "end": "1529919"
  },
  {
    "text": "um at this point I'm fairly sure it's it's absolutely correct so uh and also people are using it in production and",
    "start": "1529919",
    "end": "1536279"
  },
  {
    "text": "fairly sure Shopify uses it for the distributed modes uh it's you can just",
    "start": "1536279",
    "end": "1541360"
  },
  {
    "text": "use it mhm and we use it in and we use it ined I also us it it okay my second",
    "start": "1541360",
    "end": "1549640"
  },
  {
    "text": "question is um I saw the analyzer which I personally feels really helpful to",
    "start": "1549640",
    "end": "1555679"
  },
  {
    "text": "found issues in prom Qs and and um is this also feature available if I'm",
    "start": "1555679",
    "end": "1562000"
  },
  {
    "text": "thinking about ruler when I have for example 500 rules um I'm not able to go",
    "start": "1562000",
    "end": "1569000"
  },
  {
    "text": "by hand one by one each cby to find some performance issues so are there",
    "start": "1569000",
    "end": "1574399"
  },
  {
    "text": "statistics or even metrics available about the rule execution for for each",
    "start": "1574399",
    "end": "1580120"
  },
  {
    "text": "rule and then if there's an High um High Time gravy then I can",
    "start": "1580120",
    "end": "1586000"
  },
  {
    "text": "manually go deeper to it yeah that's how at least we approach it",
    "start": "1586000",
    "end": "1592000"
  },
  {
    "text": "because there's metrics about the query like",
    "start": "1592000",
    "end": "1597520"
  },
  {
    "text": "execution duration that come from promus itself and because we um Port the same",
    "start": "1597520",
    "end": "1602640"
  },
  {
    "text": "libraries MH it's the same rule manager so it exposes the same metrics so what",
    "start": "1602640",
    "end": "1608039"
  },
  {
    "text": "we do is uh take a look at like for example top 10 uh rules that take the",
    "start": "1608039",
    "end": "1613559"
  },
  {
    "text": "longest to execute and then you go through the Courier execute them manually and then see like what's",
    "start": "1613559",
    "end": "1619240"
  },
  {
    "text": "happening why is it taking so long okay",
    "start": "1619240",
    "end": "1624200"
  },
  {
    "text": "thanks I don't know thank you for your work on Thanos project and question is",
    "start": "1629320",
    "end": "1635760"
  },
  {
    "text": "like there is one more component of Tas there is Tas from Q connector yes",
    "start": "1635760",
    "end": "1644320"
  },
  {
    "text": "uh there are some more components actually there is the compactor the query front end",
    "start": "1644320",
    "end": "1650240"
  },
  {
    "text": "but okay it sounds like the query front end is directly um involved in the query",
    "start": "1650240",
    "end": "1655559"
  },
  {
    "text": "path and it is but it's not actually um it's more a proxy to Downstream query apis and it does from caching so um yeah",
    "start": "1655559",
    "end": "1663399"
  },
  {
    "text": "we chose to leave them out yes sorry so the question was like does this um",
    "start": "1663399",
    "end": "1669760"
  },
  {
    "text": "quaring distributed quaring does it have some changes in store IP so will it work",
    "start": "1669760",
    "end": "1675720"
  },
  {
    "text": "with uh Tas prq connector So Pro store API is the same",
    "start": "1675720",
    "end": "1684120"
  },
  {
    "text": "nothing changed in it just uh distributed uh querer works on querer",
    "start": "1684120",
    "end": "1689159"
  },
  {
    "text": "side as that's it the distributed querer actually doesn't use the store API there",
    "start": "1689159",
    "end": "1694200"
  },
  {
    "text": "is another API implemented the query API query RPC uh and downstream queriers Implement a",
    "start": "1694200",
    "end": "1702159"
  },
  {
    "text": "query API right and that's the way you distribute queries and then petch them back so it's not actually using a store",
    "start": "1702159",
    "end": "1707720"
  },
  {
    "text": "API I think there was a presentation during fos con Yesterday by btek about that",
    "start": "1707720",
    "end": "1714120"
  },
  {
    "text": "connector and they showed like a demo of the distributed mode yeah Y how it works",
    "start": "1714120",
    "end": "1720080"
  },
  {
    "text": "with the connector that fetches The Courier response from like the response",
    "start": "1720080",
    "end": "1726480"
  },
  {
    "text": "to the query from Google manage promus I believe so the distributed mode works",
    "start": "1726480",
    "end": "1733080"
  },
  {
    "text": "with that thank you uh again thank thank you for the",
    "start": "1733080",
    "end": "1738600"
  },
  {
    "text": "presentation um you did show this example where you parallelized the query based on the what was it the region",
    "start": "1738600",
    "end": "1745240"
  },
  {
    "text": "label how does the engine know which labels it can use to to split the query",
    "start": "1745240",
    "end": "1750360"
  },
  {
    "text": "app so that it can be rejoined back safely does it do know that magically or do I need to tell it so if you point the",
    "start": "1750360",
    "end": "1757200"
  },
  {
    "text": "query engine at uh Downstream carriers they they also expose an info RPC API",
    "start": "1757200",
    "end": "1764200"
  },
  {
    "text": "right and through that info API it can like know what labels what external labels your queriers know and then you",
    "start": "1764200",
    "end": "1771679"
  },
  {
    "text": "can chart on that in the engine there is an analyzer going over the query and Shing it with knowledge of the labels",
    "start": "1771679",
    "end": "1778039"
  },
  {
    "text": "that the downstream carriers expose that's the approximate mechanism there's nothing I need to configure like this is",
    "start": "1778039",
    "end": "1784799"
  },
  {
    "text": "this data center this is this kubernetes cluster this is just this region you just need to point it at remote quers",
    "start": "1784799",
    "end": "1791080"
  },
  {
    "text": "and the rest is automatic though you need to make sure that your data is actually shed well if it's actually",
    "start": "1791080",
    "end": "1796600"
  },
  {
    "text": "physical clusters that's perfectly fine but you probably can build weird",
    "start": "1796600",
    "end": "1801919"
  },
  {
    "text": "situations where the data is overlapping and then it wouldn't be well defined anymore but for region for example that's fairly sure to assume that the",
    "start": "1801919",
    "end": "1809039"
  },
  {
    "text": "data is uh shoted properly thank",
    "start": "1809039",
    "end": "1815720"
  },
  {
    "text": "you hi thank you for the presentation I have a a question maybe not about the",
    "start": "1816720",
    "end": "1822799"
  },
  {
    "text": "presentation but uh on the compactor can",
    "start": "1822799",
    "end": "1828159"
  },
  {
    "text": "expect native Instagram support uh",
    "start": "1828159",
    "end": "1833039"
  },
  {
    "text": "soon sorry to put you on spot accept pull [Laughter]",
    "start": "1835399",
    "end": "1841799"
  },
  {
    "text": "requests thank you yeah hi also thank you for your",
    "start": "1841799",
    "end": "1847559"
  },
  {
    "text": "presentation and I have a question about the ruler component actually because if",
    "start": "1847559",
    "end": "1852880"
  },
  {
    "text": "I understood it correctly does the ruler actually does the evaluation of",
    "start": "1852880",
    "end": "1858440"
  },
  {
    "text": "um the rules basically and does the computation which in Prometheus the",
    "start": "1858440",
    "end": "1865440"
  },
  {
    "text": "Prometheus does by itself so if I have a um now I'm missing the word the the the",
    "start": "1865440",
    "end": "1872080"
  },
  {
    "text": "very expensive CPU stuff does the ruler component does in Thanos no no you still",
    "start": "1872080",
    "end": "1879519"
  },
  {
    "text": "need another set of or one Courier which actually does that computation ruler",
    "start": "1879519",
    "end": "1885279"
  },
  {
    "text": "just ruler uses the cury HTTP API to",
    "start": "1885279",
    "end": "1890639"
  },
  {
    "text": "send quries to some kind of cier instances okay thank",
    "start": "1890639",
    "end": "1897639"
  },
  {
    "text": "you I missed the uh the presentation yesterday so how do we enable the",
    "start": "1897639",
    "end": "1902880"
  },
  {
    "text": "distributed queria um and is it released or is it going to be in the next release thanks for asking it was in the last",
    "start": "1902880",
    "end": "1910200"
  },
  {
    "text": "release I think right yeah you you can just um toggle a flag on the on the",
    "start": "1910200",
    "end": "1915919"
  },
  {
    "text": "querer I think it's the flag and then it should the magic will happen yeah you have to point it at quarius okay so you",
    "start": "1915919",
    "end": "1923440"
  },
  {
    "text": "have to set up the topology in a conductive way but once you do that you just need to um enable a flag I think",
    "start": "1923440",
    "end": "1930559"
  },
  {
    "text": "query do distributed mode or something or qu mode equals distributed I don't",
    "start": "1930559",
    "end": "1936320"
  },
  {
    "text": "know it's in the documentation but it's released perfect thank you like the key part is that you have",
    "start": "1936320",
    "end": "1942200"
  },
  {
    "text": "to have multiple layers of quers because one layer needs to do the the duplication",
    "start": "1942200",
    "end": "1949320"
  },
  {
    "text": "otherwise it's not possible to know which promus for example instance has gaps in data you have to do the",
    "start": "1949320",
    "end": "1958880"
  },
  {
    "text": "duplication so that's all thank you for coming",
    "start": "1962960",
    "end": "1969960"
  }
]