[
  {
    "text": "our tutorial developing production readiness applications this is Wally Cueto engineer at sanity and Nats",
    "start": "30",
    "end": "6839"
  },
  {
    "text": "maintainer I'm Colin Sullivan product manager Nats and can I just really quickly get a show of hands who's using",
    "start": "6839",
    "end": "13230"
  },
  {
    "text": "Nats today oh good good okay what about",
    "start": "13230",
    "end": "18960"
  },
  {
    "text": "in production about the same number of hands that's great that's great",
    "start": "18960",
    "end": "25890"
  },
  {
    "text": "so before we start you guys know a lot",
    "start": "25890",
    "end": "30929"
  },
  {
    "text": "about messaging or a fair amount but let's talk about some general messaging features and why we need messaging so",
    "start": "30929",
    "end": "37770"
  },
  {
    "text": "messaging deploying and developing applications in distributed systems it's hard it's hard it's complex and",
    "start": "37770",
    "end": "44399"
  },
  {
    "text": "difficult and all message oriented middleware vendors like Nats they provide a basic set of features to make",
    "start": "44399",
    "end": "50789"
  },
  {
    "text": "this easier not every vendor provides all these features but in general they'll provide things like multiple",
    "start": "50789",
    "end": "57870"
  },
  {
    "text": "messaging patterns bundled together in one tech location transparency the",
    "start": "57870",
    "end": "62879"
  },
  {
    "text": "decoupling of data producers and consumers I don't need to know exactly where my data producers are as a",
    "start": "62879",
    "end": "69270"
  },
  {
    "text": "consumer as a producer I don't need to know where my consumers are and I don't even have to know who sent the message",
    "start": "69270",
    "end": "76259"
  },
  {
    "text": "and also built-in load balancing as a",
    "start": "76259",
    "end": "81390"
  },
  {
    "text": "feature as well and that is extremely important and cloud deployments so what is Nats Nats as an 8-year old production",
    "start": "81390",
    "end": "88470"
  },
  {
    "text": "proven cloud native messaging system we made Nats for developers and operators who just want to do their jobs",
    "start": "88470",
    "end": "94950"
  },
  {
    "text": "who don't want to have to spend time worrying about how to do messaging or how to deploy a messaging our DNA is",
    "start": "94950",
    "end": "101939"
  },
  {
    "text": "performance simplicity security and availability and Nance is built from the ground up to the cloud native its first",
    "start": "101939",
    "end": "109049"
  },
  {
    "text": "use case was the underpinnings of Cloud Foundry we offer multiple qualities of",
    "start": "109049",
    "end": "114329"
  },
  {
    "text": "service at most once at least ones with streaming support for multiple communication patterns and over 30",
    "start": "114329",
    "end": "120420"
  },
  {
    "text": "client languages Nats was created by Derek Collison and Derek's been solving the really hard messaging problems for",
    "start": "120420",
    "end": "127350"
  },
  {
    "text": "over 20 five years he was SVT SVP & chief architect at tip co technical director",
    "start": "127350",
    "end": "133099"
  },
  {
    "text": "at Google he architected Cloud Foundry CTO and chief architect at VMware he",
    "start": "133099",
    "end": "139910"
  },
  {
    "text": "founded and was CEO at EPS era and now it's currently founder and CEO at Sanae dia where many of the Nats and",
    "start": "139910",
    "end": "146060"
  },
  {
    "text": "maintainer Tzar Dericks built a highly experienced messaging team around Nats and we've built an engaged user",
    "start": "146060",
    "end": "153890"
  },
  {
    "text": "community I mean I'm hoping after koukin we'll break a thousand slack users so a",
    "start": "153890",
    "end": "161180"
  },
  {
    "text": "quick bit before we dive into the tutorial about message patterns nat supports three message patterns",
    "start": "161180",
    "end": "166760"
  },
  {
    "text": "publish/subscribe load balance cue subscribers and request reply before",
    "start": "166760",
    "end": "172340"
  },
  {
    "text": "that we need to understand a little bit about subjects all this subject is is it's simply a string representing",
    "start": "172340",
    "end": "178940"
  },
  {
    "text": "interest in data it's what you publish to it's what you subscribe on so a",
    "start": "178940",
    "end": "184609"
  },
  {
    "text": "simple subject is foo and you can tokenize the subject hierarchically so",
    "start": "184609",
    "end": "189620"
  },
  {
    "text": "you can have food bar and then what you can do is add wild card subscriptions so you've got a star which matches one",
    "start": "189620",
    "end": "196519"
  },
  {
    "text": "token or greater than which matches everything beyond where you specify greater than in the subject so for",
    "start": "196519",
    "end": "203299"
  },
  {
    "text": "example food star matches food bar and food I pass food start our bar will match foo ate up our foo B bar and food",
    "start": "203299",
    "end": "211400"
  },
  {
    "text": "out greater than will match any of the above and you can use greater than which matches anything running through the NAT",
    "start": "211400",
    "end": "217639"
  },
  {
    "text": "system we have a publish/subscribe pattern and this is this is a radio",
    "start": "217639",
    "end": "223220"
  },
  {
    "text": "station this is where subscribers subscribe to a subject and anybody",
    "start": "223220",
    "end": "228769"
  },
  {
    "text": "publishing on that subject gets it so think of it like a radio station where you turn your dial and you're listening to that subject you'll get those",
    "start": "228769",
    "end": "235310"
  },
  {
    "text": "messages this is used for high fan-out or specialization or parallelization of work so for example a publisher might",
    "start": "235310",
    "end": "242299"
  },
  {
    "text": "publish sensor data honest on a subject",
    "start": "242299",
    "end": "247329"
  },
  {
    "text": "one subscriber might log that data another subscriber my updated UI a third",
    "start": "247329",
    "end": "253609"
  },
  {
    "text": "subscriber might check it and generate alerts we've got a low balance Q pattern",
    "start": "253609",
    "end": "259850"
  },
  {
    "text": "so this is similar to the sup except that what happens is when the",
    "start": "259850",
    "end": "266270"
  },
  {
    "text": "server gets a message you've got subscribers that you've told to belong to a group and any subscriber",
    "start": "266270",
    "end": "273740"
  },
  {
    "text": "in this group can receive the message but the message will go to only one subscriber effectively load-balancing so",
    "start": "273740",
    "end": "280820"
  },
  {
    "text": "if you publish messages 1 2 & 3 in this diagram here you'll see that the different subscribers in the group can",
    "start": "280820",
    "end": "286639"
  },
  {
    "text": "get this message this is used for load balancing for auto scaling and for lame-duck mode during upgrades so it's a",
    "start": "286639",
    "end": "293570"
  },
  {
    "text": "very smooth transition as you move from one application instance to another and then we have a request reply and this is",
    "start": "293570",
    "end": "301520"
  },
  {
    "text": "your conversation this is your phone call you can you you request the one",
    "start": "301520",
    "end": "307180"
  },
  {
    "text": "reply err and get a message back but underneath the hood everything in Nats",
    "start": "307180",
    "end": "313160"
  },
  {
    "text": "is a subject so we've offered some optimizations here you can request too many and tell the server I only want one",
    "start": "313160",
    "end": "319850"
  },
  {
    "text": "response back many reply errs will respond the server will get the first",
    "start": "319850",
    "end": "325490"
  },
  {
    "text": "response back and short-circuit it will it will prevent the other responses from",
    "start": "325490",
    "end": "330919"
  },
  {
    "text": "filtering through and this is a great way to get extremely low latency response from mini reply errs or you can",
    "start": "330919",
    "end": "338390"
  },
  {
    "text": "respond with cue subscribers to the load balance so quickly going back here's",
    "start": "338390",
    "end": "343700"
  },
  {
    "text": "your cue subscribers and the messages are going to be randomly distributed amongst the subscribers if you add this",
    "start": "343700",
    "end": "349490"
  },
  {
    "text": "in a request reply scenario you can have many reply errs their cue subscribers",
    "start": "349490",
    "end": "354889"
  },
  {
    "text": "and and they'll handle requests and randomly these requests will be distributed evenly you know generally",
    "start": "354889",
    "end": "362510"
  },
  {
    "text": "evenly amongst the subscribers giving you an improved quality of service or I'm sorry improves latency and groove",
    "start": "362510",
    "end": "369830"
  },
  {
    "text": "response times along with that we've added drain mode so supported clients",
    "start": "369830",
    "end": "375740"
  },
  {
    "text": "provide a drain mode to allow graceful shutdown so remember with cue subscribers I mentioned you can you can",
    "start": "375740",
    "end": "383030"
  },
  {
    "text": "use that for lame duck mode or upgrades now clients can just issue it instead of closing a connection draining a",
    "start": "383030",
    "end": "389570"
  },
  {
    "text": "connection they stopped listening stop subscribing and handle all the",
    "start": "389570",
    "end": "394910"
  },
  {
    "text": "for messages that they may have received in the mean time so this provides you a very graceful shutdown to eliminate data",
    "start": "394910",
    "end": "400430"
  },
  {
    "text": "loss allows you to smoothly downward scale and it's great again for upgrades",
    "start": "400430",
    "end": "406750"
  },
  {
    "text": "we also have in the server auto discovery so we've built Nats to be",
    "start": "406750",
    "end": "414010"
  },
  {
    "text": "extremely resilient and low config so in the cloud this is very important what",
    "start": "414010",
    "end": "421010"
  },
  {
    "text": "happens is you have a Nats cluster up and running you can add a NAT server and direct it",
    "start": "421010",
    "end": "427760"
  },
  {
    "text": "to point it to any one of the other servers in the cluster and they exchange topology information so the servers will",
    "start": "427760",
    "end": "435410"
  },
  {
    "text": "talk to each other saying hey I've got a new server or hey I've lost a server here's what the topology looks like now",
    "start": "435410",
    "end": "441850"
  },
  {
    "text": "it goes further the server's can send these to the clients and the clients get",
    "start": "441850",
    "end": "447200"
  },
  {
    "text": "updated topology information about the server cluster and this is great for",
    "start": "447200",
    "end": "452300"
  },
  {
    "text": "failover that means a client can failover to a server it never even originally knew about and it's great for",
    "start": "452300",
    "end": "458480"
  },
  {
    "text": "rolling upgrades in case you need to upgrade your NAT servers so now I'm gonna hand it over to Wally he's gonna",
    "start": "458480",
    "end": "465110"
  },
  {
    "text": "go through the tutorial our nifty service so ok the core of this tutorial",
    "start": "465110",
    "end": "473270"
  },
  {
    "text": "is - we're gonna show you how to its architect and developed one application",
    "start": "473270",
    "end": "479240"
  },
  {
    "text": "name on it which is kind of like a clone of like a lyft or basically a",
    "start": "479240",
    "end": "484910"
  },
  {
    "text": "ride-sharing service but using Nats so",
    "start": "484910",
    "end": "491200"
  },
  {
    "text": "we're gonna show you some of the newest features that are part of the server and also from the from the clients and also",
    "start": "491200",
    "end": "498260"
  },
  {
    "text": "one question is like how many of you have like mini cube installed and ok and",
    "start": "498260",
    "end": "504740"
  },
  {
    "text": "they go well basically go installed in the ok yeah so there is a public",
    "start": "504740",
    "end": "512599"
  },
  {
    "text": "repository here or is it if you want a cloning clone it and follow along there",
    "start": "512599",
    "end": "519950"
  },
  {
    "text": "are two branches one is the complete version of the repository and by default",
    "start": "519950",
    "end": "525380"
  },
  {
    "text": "you're going to be cloning the tutorial so I can give you a couple of some time",
    "start": "525380",
    "end": "535089"
  },
  {
    "text": "to clone if you want to try and will",
    "start": "535089",
    "end": "540190"
  },
  {
    "text": "basically we'll be browsing some of the code to learn some of the where I like best practices of what I've been being",
    "start": "540190",
    "end": "546970"
  },
  {
    "text": "so far and successful in applications that are using nets I've been using that for well over five years already",
    "start": "546970",
    "end": "556870"
  },
  {
    "text": "I've seen it I started with Cloud Foundry or at what point was a student and Ruby and also very advanced control",
    "start": "556870",
    "end": "566740"
  },
  {
    "text": "plane usage in as part of the app set up a platform where we're using a gold",
    "start": "566740",
    "end": "572529"
  },
  {
    "text": "version of the server and the Google client and that helped me to learn what are some of the techniques that work",
    "start": "572529",
    "end": "579639"
  },
  {
    "text": "really well for nets and I'll be sharing some of those lessons in this talk so",
    "start": "579639",
    "end": "588670"
  },
  {
    "text": "basically while qsr my github repo cube",
    "start": "588670",
    "end": "593740"
  },
  {
    "text": "con - Nats 2018 tutorial and I also",
    "start": "593740",
    "end": "604389"
  },
  {
    "text": "wrote a book on nets we're gonna be giving away copies of cube con you use",
    "start": "604389",
    "end": "611019"
  },
  {
    "text": "don't stand sing by your booth has anyone got the practical Nats book and",
    "start": "611019",
    "end": "619120"
  },
  {
    "text": "ready okay thank you so yeah we have",
    "start": "619120",
    "end": "624430"
  },
  {
    "text": "many copies of this book if you want to get your hands on it and some of these",
    "start": "624430",
    "end": "629769"
  },
  {
    "text": "materials well this kind of also covers newer features that are not part of the",
    "start": "629769",
    "end": "636730"
  },
  {
    "text": "nut server and we brought next year you need a new edition of the book so this",
    "start": "636730",
    "end": "642220"
  },
  {
    "text": "is more recent metric material than the book okay so on high-level this is the",
    "start": "642220",
    "end": "650709"
  },
  {
    "text": "architecture from the service this is like kind of like the classic and that's",
    "start": "650709",
    "end": "655829"
  },
  {
    "text": "microservices architecture where you have",
    "start": "655829",
    "end": "661050"
  },
  {
    "text": "an API server that speaks in HTTP the clients will be connecting to this HTTP",
    "start": "661050",
    "end": "667110"
  },
  {
    "text": "front-end then but behind the scenes all the communication is internal",
    "start": "667110",
    "end": "672540"
  },
  {
    "text": "communication is happening over Nats so we have a set of a layer of nodes",
    "start": "672540",
    "end": "680940"
  },
  {
    "text": "that are going to be component I called and that's the need service and that is",
    "start": "680940",
    "end": "686220"
  },
  {
    "text": "basically the the point where you start using pops up to make requests to find",
    "start": "686220",
    "end": "692760"
  },
  {
    "text": "an available driver so in the example application that I have my share in the repo you can send a request to find a",
    "start": "692760",
    "end": "700500"
  },
  {
    "text": "driver that is going to pick you up right other features can be is our left",
    "start": "700500",
    "end": "706260"
  },
  {
    "text": "as an exercise to the reader so we're going to cover how that request response",
    "start": "706260",
    "end": "711870"
  },
  {
    "text": "flow works and we're somewhere were to use solve the messaging patterns that",
    "start": "711870",
    "end": "718410"
  },
  {
    "text": "calling briefly well previously mentioned and so it's everyone okay with",
    "start": "718410",
    "end": "730140"
  },
  {
    "text": "the repo okay so yeah this is",
    "start": "730140",
    "end": "735690"
  },
  {
    "text": "architecture as an API server you can is a REST API that we receive a request and",
    "start": "735690",
    "end": "741270"
  },
  {
    "text": "we're going to add some discovery subjects as well and there's going to be",
    "start": "741270",
    "end": "747660"
  },
  {
    "text": "an ad agent installed that could be for example in a car that are going to so that it can be discovered to add sub",
    "start": "747660",
    "end": "753600"
  },
  {
    "text": "requests and the kuroh fits the NIST an IFFT service that is going to be the load-balanced service that the api",
    "start": "753600",
    "end": "762570"
  },
  {
    "text": "service connecting to to find an available driver I'll go to the repo",
    "start": "762570",
    "end": "770690"
  },
  {
    "text": "already ok start sharing code",
    "start": "770690",
    "end": "776300"
  },
  {
    "text": "hope this is",
    "start": "784300",
    "end": "787080"
  },
  {
    "text": "okay",
    "start": "794890",
    "end": "797670"
  },
  {
    "text": "this is okay",
    "start": "808069",
    "end": "811310"
  },
  {
    "text": "so another thing is that we're going to be using some of the latest features from Nats so I try to make a go get to",
    "start": "835460",
    "end": "842510"
  },
  {
    "text": "their units D and get the what's available in master for the kubernetes",
    "start": "842510",
    "end": "850940"
  },
  {
    "text": "help I prepared some H images that we can use okay so when developing the",
    "start": "850940",
    "end": "865820"
  },
  {
    "text": "application one thing what I like to",
    "start": "865820",
    "end": "870860"
  },
  {
    "text": "start is by crane component reducible library where that all of the other",
    "start": "870860",
    "end": "878470"
  },
  {
    "text": "components from the service are going to be importing and that is where we are going to be centralizing some of the",
    "start": "878470",
    "end": "885760"
  },
  {
    "text": "customer how we customize the Nats connection and then add adding some",
    "start": "885760",
    "end": "892690"
  },
  {
    "text": "default subjects that are helpful for example for discovery within the within the micro service units so that you can",
    "start": "892690",
    "end": "903370"
  },
  {
    "text": "have some so you can define some default",
    "start": "903370",
    "end": "908450"
  },
  {
    "text": "behavior for off any1 that's part of this service and in this case create the",
    "start": "908450",
    "end": "917290"
  },
  {
    "text": "component struct to identify each one of",
    "start": "917290",
    "end": "923480"
  },
  {
    "text": "the components from the service I'm going to label them with an ID which is going to be in this case and that's",
    "start": "923480",
    "end": "930800"
  },
  {
    "text": "unique identifier so we as per the Nats project we have our own library for",
    "start": "930800",
    "end": "936940"
  },
  {
    "text": "generating a very fast efficient and efficient and unique identifiers and",
    "start": "936940",
    "end": "943790"
  },
  {
    "text": "this is one of the mechanisms that it's used for the request response so we're just using this library once again to",
    "start": "943790",
    "end": "950000"
  },
  {
    "text": "generate a label each one of the components without unique ID in teen identity just for instead of an user ID",
    "start": "950000",
    "end": "959180"
  },
  {
    "text": "for example so we're going to label each one of the components with its own ID",
    "start": "959180",
    "end": "966350"
  },
  {
    "text": "using and and each one of the components can can",
    "start": "966350",
    "end": "972499"
  },
  {
    "text": "have a different behavior so we're also just and label which kind of component",
    "start": "972499",
    "end": "978079"
  },
  {
    "text": "there are going to be this could being in this case in case of this tutorial it could be a API server or it's going to",
    "start": "978079",
    "end": "983899"
  },
  {
    "text": "be the need to service or an if agent that's going to receive in the request",
    "start": "983899",
    "end": "991540"
  },
  {
    "text": "so this is a boilerplate for Salima blogging and tracing the APM the PID",
    "start": "991540",
    "end": "1000269"
  },
  {
    "text": "generating the Union and unique ideas and we are using undo it and this part",
    "start": "1000269",
    "end": "1006850"
  },
  {
    "text": "of the not cor organization so the first thing I'm going to share is how to",
    "start": "1006850",
    "end": "1012779"
  },
  {
    "text": "customize the Nats connection so we use the one pattern that's very popular for",
    "start": "1012779",
    "end": "1020109"
  },
  {
    "text": "gold libraries that is use them it's called well the friendly own function",
    "start": "1020109",
    "end": "1026230"
  },
  {
    "text": "i'm michelle options basically so when you are defining a gnat's connection but",
    "start": "1026230",
    "end": "1034600"
  },
  {
    "text": "not connect the API tells you that the first parameter is a list of the",
    "start": "1034600",
    "end": "1041829"
  },
  {
    "text": "server's it could be a comma separated list but they also could just be a very simple domain is going to default for",
    "start": "1041829",
    "end": "1049350"
  },
  {
    "text": "for example we could make it connect to them the more endpoint and just setting",
    "start": "1049350",
    "end": "1054460"
  },
  {
    "text": "them about not say yeah is it going to connecting into the publicly available endpoint that we have and it's going to",
    "start": "1054460",
    "end": "1062980"
  },
  {
    "text": "default to four two two two if you want to establish a TLS connection you can't",
    "start": "1062980",
    "end": "1068529"
  },
  {
    "text": "use the fine TLS of the scheme in this case for I",
    "start": "1068529",
    "end": "1074429"
  },
  {
    "text": "think it's 4 3 C 4 4 3 and that would",
    "start": "1074429",
    "end": "1082809"
  },
  {
    "text": "basically start a TLS connect secure connection against the server in this",
    "start": "1082809",
    "end": "1088870"
  },
  {
    "text": "case we are plumbing through the list of servers in each one of these part it is",
    "start": "1088870",
    "end": "1095260"
  },
  {
    "text": "one of these components and the rest is the it is the Braddock a",
    "start": "1095260",
    "end": "1102770"
  },
  {
    "text": "list of options that we're going to use to customize the server something that's",
    "start": "1102770",
    "end": "1108800"
  },
  {
    "text": "really useful to do is to set a name for",
    "start": "1108800",
    "end": "1114020"
  },
  {
    "text": "the connection so you can label your connection and that is going to be very",
    "start": "1114020",
    "end": "1119390"
  },
  {
    "text": "helpful for monitoring purposes because then you can pull the monitoring endpoint for the server which is hh2 to",
    "start": "1119390",
    "end": "1126620"
  },
  {
    "text": "you by default and list for example based on that not only the connection ID",
    "start": "1126620",
    "end": "1132470"
  },
  {
    "text": "that you have but using that label to quickly identify in the JSON blob that",
    "start": "1132470",
    "end": "1137750"
  },
  {
    "text": "the server returns to you which are there in and out messages and bytes per",
    "start": "1137750",
    "end": "1145010"
  },
  {
    "text": "se from this connection and the list of subscriptions for example so in this",
    "start": "1145010",
    "end": "1151640"
  },
  {
    "text": "case where they have a list of Nats options so I'm just going to pass it",
    "start": "1151640",
    "end": "1160010"
  },
  {
    "text": "here",
    "start": "1160010",
    "end": "1162220"
  },
  {
    "text": "it's production-ready applications always check your errors so yeah very",
    "start": "1167120",
    "end": "1176970"
  },
  {
    "text": "simple just setting a list of options so now let's use it for example in one of",
    "start": "1176970",
    "end": "1184320"
  },
  {
    "text": "them as part of the main from one of the components let's start the API sir API",
    "start": "1184320",
    "end": "1190650"
  },
  {
    "text": "server also some boilerplate code for setting up the version 4 for setting",
    "start": "1190650",
    "end": "1201059"
  },
  {
    "text": "explicitly what is the Nats server that is going to be connecting this component so we can skip this here we are starting",
    "start": "1201059",
    "end": "1209730"
  },
  {
    "text": "to use the component library that so I",
    "start": "1209730",
    "end": "1214920"
  },
  {
    "text": "made an constructor whether we can just pass it a string and this is going to set the which kind of component this",
    "start": "1214920",
    "end": "1220580"
  },
  {
    "text": "server is and a signal handler and going to that later and some basic login and",
    "start": "1220580",
    "end": "1228980"
  },
  {
    "text": "so here we are establishing a connection by default we're just using the default",
    "start": "1228980",
    "end": "1234630"
  },
  {
    "text": "parameters from nets but for example here we could now set their own",
    "start": "1234630",
    "end": "1242419"
  },
  {
    "text": "customizations let's say for example let's say that Matz reconnects we're",
    "start": "1242630",
    "end": "1249450"
  },
  {
    "text": "gonna set it to the 5 and this is just",
    "start": "1249450",
    "end": "1254640"
  },
  {
    "text": "going to be blown through their Nance as a baryonic objects from the net connect",
    "start": "1254640",
    "end": "1261420"
  },
  {
    "text": "so I found it this weight of using the net so connect the PI helpful and we it",
    "start": "1261420",
    "end": "1270660"
  },
  {
    "text": "is important to be able to allow how to customize the net connection to Nets",
    "start": "1270660",
    "end": "1275910"
  },
  {
    "text": "very component for because for example let's say that back to the architecture",
    "start": "1275910",
    "end": "1283470"
  },
  {
    "text": "and so these layers of nodes are going to be running in a cloud let's say one of the kubernetes cloud providers that",
    "start": "1283470",
    "end": "1291300"
  },
  {
    "text": "we have right now but the agents are going to be running in all the agents I",
    "start": "1291300",
    "end": "1296970"
  },
  {
    "text": "mean the drivers right so in case of this layer of nodes it's we want them to",
    "start": "1296970",
    "end": "1307450"
  },
  {
    "text": "eventually stop reconnecting and maybe exit but in case of some of the agent",
    "start": "1307450",
    "end": "1312860"
  },
  {
    "text": "nodes we just want them to continue to retry and never give up trying to",
    "start": "1312860",
    "end": "1318679"
  },
  {
    "text": "connect to Nets so in that case let's check how can we do this differently for",
    "start": "1318679",
    "end": "1330350"
  },
  {
    "text": "the agent so this is the agent and we are also using a list of options for",
    "start": "1330350",
    "end": "1339309"
  },
  {
    "text": "customize the connection just for this one and in this case we're going to set it so that it never stops reconnecting",
    "start": "1339309",
    "end": "1349730"
  },
  {
    "text": "to net and to X you can express that in the client by sending 2-1 then it's",
    "start": "1349730",
    "end": "1356750"
  },
  {
    "text": "going to be basically endlessly reconnecting the Nets we can also modify",
    "start": "1356750",
    "end": "1363159"
  },
  {
    "text": "further the reconnection logic reconnect time wait to let's say five seconds",
    "start": "1363159",
    "end": "1375158"
  },
  {
    "text": "so now this the way that this this component handles the nuts connection is",
    "start": "1380690",
    "end": "1385820"
  },
  {
    "text": "that quite a bit different you can make it a case-by-case so another very",
    "start": "1385820",
    "end": "1396679"
  },
  {
    "text": "important thing for nuts applications and then you definitely have to implement for production scenario is",
    "start": "1396679",
    "end": "1404479"
  },
  {
    "text": "that are the event callbacks the event callbacks are called whenever there is",
    "start": "1404479",
    "end": "1413960"
  },
  {
    "text": "the client changes the state from being",
    "start": "1413960",
    "end": "1419149"
  },
  {
    "text": "connected to being disconnected closed is a terminal state so if the client",
    "start": "1419149",
    "end": "1425299"
  },
  {
    "text": "ever reaches they close the state it will never try to reconnect once again",
    "start": "1425299",
    "end": "1430419"
  },
  {
    "text": "so at that point you have to recreate an app connection and you cannot continue",
    "start": "1430419",
    "end": "1435649"
  },
  {
    "text": "using the built in reconnection logic that the clients have and there's also they discovered handler for the case",
    "start": "1435649",
    "end": "1445940"
  },
  {
    "text": "where you have a new notes joining the cluster and then the new IP port from that note this gossiped all well all the",
    "start": "1445940",
    "end": "1453559"
  },
  {
    "text": "client ID bertrise that you have set from that server so that way you can trace whether you in notes are whether",
    "start": "1453559",
    "end": "1461509"
  },
  {
    "text": "this client in particular has been is perceiving these new notes that are joining the cluster so I'll go one by",
    "start": "1461509",
    "end": "1468470"
  },
  {
    "text": "one swing this set first its I'm gonna",
    "start": "1468470",
    "end": "1475909"
  },
  {
    "text": "set them reconnect handler",
    "start": "1475909",
    "end": "1481359"
  },
  {
    "text": "this is a nuts connection",
    "start": "1486370",
    "end": "1490230"
  },
  {
    "text": "and let's say that we're gonna log that as we connected has reconnected to well",
    "start": "1497400",
    "end": "1510160"
  },
  {
    "text": "you can choose the state from the connection that is closed over here okay",
    "start": "1510160",
    "end": "1518950"
  },
  {
    "text": "so this way you can identify to which server the client reconnected to so let",
    "start": "1518950",
    "end": "1527860"
  },
  {
    "text": "me try that very quick first let's start",
    "start": "1527860",
    "end": "1537600"
  },
  {
    "text": "the in that server started in",
    "start": "1537600",
    "end": "1544950"
  },
  {
    "text": "so - em port 82 - is for the monitoring port and the screen below I'm gonna have",
    "start": "1548500",
    "end": "1556220"
  },
  {
    "text": "a nut stop which is that utility you can use to check the clients that are connected and solve the state from the",
    "start": "1556220",
    "end": "1562940"
  },
  {
    "text": "server want to check whether okay so we have",
    "start": "1562940",
    "end": "1573110"
  },
  {
    "text": "the API server should be connecting and we can see now that's part of the data",
    "start": "1573110",
    "end": "1581660"
  },
  {
    "text": "that the monitoring endpoint sensed back to the client is that we have a component named API server and it's",
    "start": "1581660",
    "end": "1587720"
  },
  {
    "text": "uniquely identified by this IP my this label which is like the unique then the",
    "start": "1587720",
    "end": "1594350"
  },
  {
    "text": "new it so let's start another component",
    "start": "1594350",
    "end": "1599799"
  },
  {
    "text": "okay have a new component joining the cluster and that's nuts reconnect",
    "start": "1603490",
    "end": "1614380"
  },
  {
    "text": "it's max reconnects",
    "start": "1622470",
    "end": "1626179"
  },
  {
    "text": "and this one is reconnect wait we need",
    "start": "1629110",
    "end": "1637030"
  },
  {
    "text": "the time",
    "start": "1637030",
    "end": "1639390"
  },
  {
    "text": "hmm time seconds agent",
    "start": "1649870",
    "end": "1656950"
  },
  {
    "text": "where's it 57 sorry",
    "start": "1666850",
    "end": "1671398"
  },
  {
    "text": "oh yeah thank you",
    "start": "1673820",
    "end": "1680018"
  },
  {
    "text": "should go any person should be doing this okay okay not sure white confirmed",
    "start": "1684769",
    "end": "1695639"
  },
  {
    "text": "didn't get it okay so we have the new component join the cluster and we can",
    "start": "1695639",
    "end": "1701759"
  },
  {
    "text": "know what is then the mapping into the connection ID and we have a monitoring",
    "start": "1701759",
    "end": "1709229"
  },
  {
    "text": "endpoint and let's know kill the server",
    "start": "1709229",
    "end": "1714659"
  },
  {
    "text": "and I started we should see now that the",
    "start": "1714659",
    "end": "1720179"
  },
  {
    "text": "clients the law to which a component it is reconnecting so in this case we only",
    "start": "1720179",
    "end": "1726779"
  },
  {
    "text": "have a single node cluster but by default it is if you have a multiple",
    "start": "1726779",
    "end": "1733190"
  },
  {
    "text": "notes cluster then it's going to try to randomly reconnect to another one in the",
    "start": "1733190",
    "end": "1739139"
  },
  {
    "text": "pool",
    "start": "1739139",
    "end": "1741259"
  },
  {
    "text": "okay and so far any any questions if you can raise your hand I just let me know",
    "start": "1748490",
    "end": "1756370"
  },
  {
    "text": "okay so say customizing the reconnection logic per component then we can't set",
    "start": "1758650",
    "end": "1770120"
  },
  {
    "text": "the disconnected handler disconnect",
    "start": "1770120",
    "end": "1782320"
  },
  {
    "text": "is connected through nets",
    "start": "1794830",
    "end": "1798240"
  },
  {
    "text": "then and let's leave that them closed handler as well",
    "start": "1805460",
    "end": "1813370"
  },
  {
    "text": "okay so now if I leave the the server",
    "start": "1833260",
    "end": "1841210"
  },
  {
    "text": "shuts down for for too long the clients will try to reconnect the reconnection",
    "start": "1841210",
    "end": "1846290"
  },
  {
    "text": "attempts they are not logged as part of a part of handlers only when you reconnect so eventually they will run",
    "start": "1846290",
    "end": "1852410"
  },
  {
    "text": "into the close connection and if we want for example we could say that whenever",
    "start": "1852410",
    "end": "1862550"
  },
  {
    "text": "you disconnect from the server and just terminate this process and exit then you",
    "start": "1862550",
    "end": "1877730"
  },
  {
    "text": "can let a corrientes or well your cloud handle how we're starting to another",
    "start": "1877730",
    "end": "1884840"
  },
  {
    "text": "node for example so event handlers are very important for applications and",
    "start": "1884840",
    "end": "1891830"
  },
  {
    "text": "let's move to defining some of the",
    "start": "1891830",
    "end": "1896870"
  },
  {
    "text": "behavior from the system in this case we'll start with the API server that is",
    "start": "1896870",
    "end": "1903710"
  },
  {
    "text": "going to be receiving the requests I'd made a small tool that sends a request",
    "start": "1903710",
    "end": "1915980"
  },
  {
    "text": "to the service to try to find a driver and right now it is it's not receiving",
    "start": "1915980",
    "end": "1924830"
  },
  {
    "text": "any response back some",
    "start": "1924830",
    "end": "1928149"
  },
  {
    "text": "spinning",
    "start": "1931070",
    "end": "1933970"
  },
  {
    "text": "it's important when using nets in the so",
    "start": "1937429",
    "end": "1943229"
  },
  {
    "text": "for Nets the payload is opaque and so",
    "start": "1943229",
    "end": "1948269"
  },
  {
    "text": "whenever you publish a message internets is just that blob of bytes and the Nats doesn't transform that data and it",
    "start": "1948269",
    "end": "1956429"
  },
  {
    "text": "doesn't do any transformation to that data so in case you want to have",
    "start": "1956429",
    "end": "1961739"
  },
  {
    "text": "something like a request ID identifier and and investigate across multiple",
    "start": "1961739",
    "end": "1968879"
  },
  {
    "text": "components how's that request is being handled and for example purposes you can",
    "start": "1968879",
    "end": "1976049"
  },
  {
    "text": "also continue to use the fast Nets identifiers so in this case as part of",
    "start": "1976049",
    "end": "1981719"
  },
  {
    "text": "the agent request type I added a",
    "start": "1981719",
    "end": "1986909"
  },
  {
    "text": "requested ID field that is going to label uniquely label each one of the requests are sent to the API server and",
    "start": "1986909",
    "end": "1993509"
  },
  {
    "text": "then these request IDs plan pass through all the components and as it hops around",
    "start": "1993509",
    "end": "1999359"
  },
  {
    "text": "from component to component now then if you collect all of the logs together you can see that Apple this is the history",
    "start": "1999359",
    "end": "2006289"
  },
  {
    "text": "from this request and we're in to it up to which point it failed so now to undo",
    "start": "2006289",
    "end": "2013580"
  },
  {
    "text": "it goodies for you so you have to own your own define request in define the",
    "start": "2013580",
    "end": "2021229"
  },
  {
    "text": "request ID for the requests so let's",
    "start": "2021229",
    "end": "2027129"
  },
  {
    "text": "yeah use a string in this case just string",
    "start": "2029049",
    "end": "2033580"
  },
  {
    "text": "yeah yeah yeah yeah you can just reduce any request ID for example if you really",
    "start": "2038500",
    "end": "2045440"
  },
  {
    "text": "have some requests ID from the HTTP framework but you have anything you just continue to reduce that and set it here",
    "start": "2045440",
    "end": "2052429"
  },
  {
    "text": "when you're handing their requests yes",
    "start": "2052429",
    "end": "2058540"
  },
  {
    "text": "that's all up to the client yeah we can see that for example we follow the",
    "start": "2059379",
    "end": "2067010"
  },
  {
    "text": "protocol subscribe to anything for the",
    "start": "2067010",
    "end": "2078230"
  },
  {
    "text": "server everything is just just an array of a",
    "start": "2078230",
    "end": "2084079"
  },
  {
    "text": "slice of bytes and doesn't where's well",
    "start": "2084079",
    "end": "2089179"
  },
  {
    "text": "right now there's no it is not publishing we have to implement yes but there is essentially just bites",
    "start": "2089179",
    "end": "2094908"
  },
  {
    "text": "it doesn't do anything else okay so let's send the requests we set",
    "start": "2094909",
    "end": "2103310"
  },
  {
    "text": "an identifier for each one day the requests and in case that marshaling",
    "start": "2103310",
    "end": "2111890"
  },
  {
    "text": "error failed somehow then we failed there and here is where we are going to",
    "start": "2111890",
    "end": "2118270"
  },
  {
    "text": "sending the request to the layer of Nats nodes where well the clients that can",
    "start": "2118270",
    "end": "2126290"
  },
  {
    "text": "handle finding requests so the API server responsibility it is just to call",
    "start": "2126290",
    "end": "2132950"
  },
  {
    "text": "this order Nats API internally to find an available driver and it is that wait",
    "start": "2132950",
    "end": "2142550"
  },
  {
    "text": "well this is good for table to separate the concerns of scaling up that behavior",
    "start": "2142550",
    "end": "2149119"
  },
  {
    "text": "for example then you can use the queue subscriptions that we're going to use for as this as the in in the component",
    "start": "2149119",
    "end": "2160460"
  },
  {
    "text": "that is going to be receiving this request so yeah here we are making the",
    "start": "2160460",
    "end": "2166010"
  },
  {
    "text": "request into the drivers dot find a subject we're going to evolve after five seconds if that",
    "start": "2166010",
    "end": "2173030"
  },
  {
    "text": "doesn't fail then we know that this workers failed so now let's go to the",
    "start": "2173030",
    "end": "2182230"
  },
  {
    "text": "application and defined the queue",
    "start": "2183220",
    "end": "2191930"
  },
  {
    "text": "subscription that is going to be processing this we're using a queue",
    "start": "2191930",
    "end": "2198080"
  },
  {
    "text": "subscription here so that you can each one of the components of this type are",
    "start": "2198080",
    "end": "2204050"
  },
  {
    "text": "going to be randomly balanced one of the requests so that way well you can load",
    "start": "2204050",
    "end": "2211340"
  },
  {
    "text": "balanced and they work among all the components on that layer so let's go to",
    "start": "2211340",
    "end": "2217400"
  },
  {
    "text": "nets let's you subscribe",
    "start": "2217400",
    "end": "2224410"
  },
  {
    "text": "the Reapers don't find usually a manager group",
    "start": "2228740",
    "end": "2235190"
  },
  {
    "text": "and the function that is going to be handling this is here",
    "start": "2236000",
    "end": "2240550"
  },
  {
    "text": "which is with Romero",
    "start": "2253390",
    "end": "2256619"
  },
  {
    "text": "so whenever it whenever the API server sends this request to the drivers dot",
    "start": "2259570",
    "end": "2264980"
  },
  {
    "text": "find subject this nifty server is going to receive the request and then try to",
    "start": "2264980",
    "end": "2271160"
  },
  {
    "text": "look up for another agent available for to handle this request so the next step",
    "start": "2271160",
    "end": "2278750"
  },
  {
    "text": "is to define this drivers dot right subject that is going to be created by",
    "start": "2278750",
    "end": "2286810"
  },
  {
    "text": "the agents so let's go to the agents",
    "start": "2286810",
    "end": "2291640"
  },
  {
    "text": "here we're using here in a synchronous",
    "start": "2297730",
    "end": "2303250"
  },
  {
    "text": "subscription on the drivers rights subject this is not a cue subscription",
    "start": "2303250",
    "end": "2309109"
  },
  {
    "text": "so all of the agent components are going to be receiving this request and then they're going to decide whether to",
    "start": "2309109",
    "end": "2316480"
  },
  {
    "text": "accept it depending on some condition in this case and haven't implemented so",
    "start": "2316480",
    "end": "2321920"
  },
  {
    "text": "that each one will request you can specify the type of vehicle that you want for this particular right so in",
    "start": "2321920",
    "end": "2331040"
  },
  {
    "text": "case an agent has a small card then yet they can just defer and they can just",
    "start": "2331040",
    "end": "2336530"
  },
  {
    "text": "guilt and not reply to that request and also just to simulate some latency amnon",
    "start": "2336530",
    "end": "2343640"
  },
  {
    "text": "the notes I learned some delay to reply in this request this is a synchronous",
    "start": "2343640",
    "end": "2351320"
  },
  {
    "text": "subscription and something important to highlight here is that the internally",
    "start": "2351320",
    "end": "2357770"
  },
  {
    "text": "that the agents are going to be receiving other requests but they're going to be handling them one",
    "start": "2357770",
    "end": "2363640"
  },
  {
    "text": "sequentially so in case one of these responses takes longer than the it takes",
    "start": "2363640",
    "end": "2371660"
  },
  {
    "text": "takes very long then it's going to block the rest of their requests we can simulate that for example sending a lot",
    "start": "2371660",
    "end": "2378260"
  },
  {
    "text": "of traffic and you can see that you will see in the logs that some of the",
    "start": "2378260",
    "end": "2386829"
  },
  {
    "text": "responses are going to be one needs to restart them which one so",
    "start": "2387040",
    "end": "2402530"
  },
  {
    "text": "the question was how is ordering handled in the server do you wanna handle a while here should I sure its source",
    "start": "2402530",
    "end": "2411800"
  },
  {
    "text": "order delivery by subject so if one producer is producing on foo you're",
    "start": "2411800",
    "end": "2417860"
  },
  {
    "text": "guaranteed that messages from that producer on the consumer side you're guaranteed that messages from that",
    "start": "2417860",
    "end": "2422870"
  },
  {
    "text": "producer will arrive an order now if you have two producers on foo and one subscriber those messages might be",
    "start": "2422870",
    "end": "2429980"
  },
  {
    "text": "interlaced you just simply can't predict that right but yeah source order delivery guarantees",
    "start": "2429980",
    "end": "2437950"
  },
  {
    "text": "yeah I'm gonna rephrase your question the question was does ordering change on",
    "start": "2451620",
    "end": "2457450"
  },
  {
    "text": "wildcards is that that fair yeah so so even at that you you will still get",
    "start": "2457450",
    "end": "2466240"
  },
  {
    "text": "source order delivery by the publisher as a wild-card so let's say you you've subscribed to food at greater than and",
    "start": "2466240",
    "end": "2472660"
  },
  {
    "text": "somebody somebody's published to food at bar and food out bass you will get the",
    "start": "2472660",
    "end": "2479920"
  },
  {
    "text": "messages on food at bar and order and the messages and food out bass and order but not necessarily the exact order of",
    "start": "2479920",
    "end": "2488020"
  },
  {
    "text": "the server process that depending if they go through routes and that sort of stuff but you know again source order delivery that's sure",
    "start": "2488020",
    "end": "2498720"
  },
  {
    "text": "okay these surveys it's in connection to",
    "start": "2501900",
    "end": "2510269"
  },
  {
    "text": "a server",
    "start": "2510269",
    "end": "2512539"
  },
  {
    "text": "yeah",
    "start": "2517549",
    "end": "2520179"
  },
  {
    "text": "you start here",
    "start": "2523249",
    "end": "2526849"
  },
  {
    "text": "sending requests yeah I'm getting a bad",
    "start": "2531810",
    "end": "2537250"
  },
  {
    "text": "connection error here",
    "start": "2537250",
    "end": "2540720"
  },
  {
    "text": "maecenas it's the ancient",
    "start": "2558250",
    "end": "2563080"
  },
  {
    "text": "I'm chasing something sorry in the meantime are there any other questions anyone has as we're as we've gone along",
    "start": "2579730",
    "end": "2585400"
  },
  {
    "text": "oh yes we do so the question was do we",
    "start": "2585400",
    "end": "2593020"
  },
  {
    "text": "support MQTT not right now our plans sometime in 2019 is to provide actually",
    "start": "2593020",
    "end": "2600400"
  },
  {
    "text": "tightly integrated support for MQTT we we realize how ubiquitous it is and also",
    "start": "2600400",
    "end": "2606190"
  },
  {
    "text": "how Nats being so lightweight works really well on the edge so we are gonna",
    "start": "2606190",
    "end": "2611560"
  },
  {
    "text": "build something with mqtt some bridge or actually we're really looking at native",
    "start": "2611560",
    "end": "2617680"
  },
  {
    "text": "support inside the net server oh yes",
    "start": "2617680",
    "end": "2628349"
  },
  {
    "text": "okay the the question was will wildcards be available in that streaming yeah if",
    "start": "2640269",
    "end": "2646910"
  },
  {
    "text": "they aren't available today we're looking at we internally we call a project jet stream its NAT streaming",
    "start": "2646910",
    "end": "2652819"
  },
  {
    "text": "version two and we're looking at wildcard support there a lot of people have asked for that and so we're adding",
    "start": "2652819",
    "end": "2658910"
  },
  {
    "text": "it sure no no worries",
    "start": "2658910",
    "end": "2668528"
  },
  {
    "text": "yeah the question was does snatch streaming cover stateful aggregations as well as stateful topology",
    "start": "2674160",
    "end": "2682500"
  },
  {
    "text": "there's stateless yet NAB streaming so just taking a step back net streaming is",
    "start": "2682500",
    "end": "2688990"
  },
  {
    "text": "actually layer atop core Nats well while he's demonstrating here is what we call core Nats this is your",
    "start": "2688990",
    "end": "2694390"
  },
  {
    "text": "fire-and-forget if you lose a message well your application has to retry that",
    "start": "2694390",
    "end": "2699670"
  },
  {
    "text": "does sound fragile but if you think about it that's how the internet works today but then on top of cornets we have nat",
    "start": "2699670",
    "end": "2705490"
  },
  {
    "text": "streaming which gives you at least once messaging guarantees so you're gonna",
    "start": "2705490",
    "end": "2712119"
  },
  {
    "text": "you're guaranteed to get your message and if things go really bad you lose you know you lose and our connectivity to",
    "start": "2712119",
    "end": "2717670"
  },
  {
    "text": "come up there's a chance you might get the same message again but what net streaming does is it allows you to replay data by by time give me the last",
    "start": "2717670",
    "end": "2726040"
  },
  {
    "text": "hours worth of data by sequence number you know my last sequence number is 500 or give me everything from sequence",
    "start": "2726040",
    "end": "2732280"
  },
  {
    "text": "number 250 back and you're able to get the sequence numbers for messages in that streaming and then or last value",
    "start": "2732280",
    "end": "2738010"
  },
  {
    "text": "cache right my application comes up I need to know what was the last thing sent so net streaming does give you all",
    "start": "2738010",
    "end": "2744190"
  },
  {
    "text": "of those one other thing it gives use durable subscribers and what durable subscribers are are it's a subscription",
    "start": "2744190",
    "end": "2751750"
  },
  {
    "text": "where if something bad happens you have a network partition whenever it's repaired it just picks up exactly where",
    "start": "2751750",
    "end": "2758230"
  },
  {
    "text": "it left off there are a few other things we can we can go into more detail but that's a general gist yes",
    "start": "2758230",
    "end": "2767549"
  },
  {
    "text": "okay right right so the question was is",
    "start": "2785110",
    "end": "2796210"
  },
  {
    "text": "there a whitepaper comparison of you know products in this that we can",
    "start": "2796210",
    "end": "2802180"
  },
  {
    "text": "recommend you're asking me to recommend something other Nats really I'm teasing",
    "start": "2802180",
    "end": "2809820"
  },
  {
    "text": "yet so right right",
    "start": "2809820",
    "end": "2818110"
  },
  {
    "text": "you know the different messaging solutions provide different tool sets if you will so while something like AMQP",
    "start": "2818110",
    "end": "2825220"
  },
  {
    "text": "won't be a Swiss Army knife it does it does a lot of things Nats it's more of a scalpel it does a few",
    "start": "2825220",
    "end": "2831940"
  },
  {
    "text": "things very very well more than a few but it you know it does it does a subset",
    "start": "2831940",
    "end": "2837730"
  },
  {
    "text": "of things extremely well that's tailored for the cloud and edgy IOT but as far as",
    "start": "2837730",
    "end": "2844840"
  },
  {
    "text": "a comparison goes Tyler tree has written some blog posts with performance comparisons and in fact",
    "start": "2844840",
    "end": "2852430"
  },
  {
    "text": "with CNC F in the TOC we did a a small matrix with comparison of features but",
    "start": "2852430",
    "end": "2859390"
  },
  {
    "text": "generally when people ask we really prefer third parties to give their advice because I mean yeah I'll be as",
    "start": "2859390",
    "end": "2866140"
  },
  {
    "text": "honest as I can but yeah I'm a bit biased",
    "start": "2866140",
    "end": "2870090"
  },
  {
    "text": "okay sorry on that they found the bomb oh yes",
    "start": "2871230",
    "end": "2878040"
  },
  {
    "text": "yeah there's a couple things you can do there and it depends on the client but you in most clients you could actually",
    "start": "2905530",
    "end": "2911210"
  },
  {
    "text": "unsubscribe from within the callback so you receive your message and then you unsubscribe and then you're you're done",
    "start": "2911210",
    "end": "2918640"
  },
  {
    "text": "the other option is to do a synchronous subscriber so then you create your",
    "start": "2918640",
    "end": "2924110"
  },
  {
    "text": "subscription you wait for a message and then and you're actually block until the message is received and then you",
    "start": "2924110",
    "end": "2929930"
  },
  {
    "text": "unsubscribe did that answer your question okay sure sure yes so the question was",
    "start": "2929930",
    "end": "2959270"
  },
  {
    "text": "you know are there any general scalability recommendations for Nats you",
    "start": "2959270",
    "end": "2965030"
  },
  {
    "text": "know this is this is one of these areas where it really really varies on your network your bandwidth throughput we've",
    "start": "2965030",
    "end": "2974090"
  },
  {
    "text": "had a user with a cluster of four NAT servers able to query 50 thousand nodes",
    "start": "2974090",
    "end": "2981200"
  },
  {
    "text": "and get responses back in about two seconds in less than two seconds in fact I think it's less than one now we have",
    "start": "2981200",
    "end": "2988310"
  },
  {
    "text": "some just extremely large Nats users but again it's really up to your use case and your mileage will vary the question",
    "start": "2988310",
    "end": "3002530"
  },
  {
    "text": "was do wildcards have an effect on the efficiency of the server minimally just just minimally we use some level 1",
    "start": "3002530",
    "end": "3009070"
  },
  {
    "text": "caching techniques inside the server to make that subject routing extremely fast",
    "start": "3009070",
    "end": "3014130"
  },
  {
    "text": "so wildcards won't have a whole lot of effect the things that will affect the",
    "start": "3014130",
    "end": "3020350"
  },
  {
    "text": "net server is the sheer number of connections and subscribers and that's",
    "start": "3020350",
    "end": "3025600"
  },
  {
    "text": "where you want to look at scaling subscribers effect memory more than anything else connections you know naturally it's a",
    "start": "3025600",
    "end": "3031810"
  },
  {
    "text": "function of the instance you're on how many you can handle also if you're using TLS TLS is very CPU intensive",
    "start": "3031810",
    "end": "3039120"
  },
  {
    "text": "particularly bi-directional TLS so you have to watch out for thundering herd problems we've actually implemented",
    "start": "3039120",
    "end": "3046330"
  },
  {
    "text": "timeouts that allow you to avoid this but if you've got 10,000 TLS connections happening at the same time you're in a 2",
    "start": "3046330",
    "end": "3053050"
  },
  {
    "text": "of your CPU yes",
    "start": "3053050",
    "end": "3059220"
  },
  {
    "text": "so the the question is how geographically dispersed can we make",
    "start": "3069820",
    "end": "3075350"
  },
  {
    "text": "Nance this is a great question because as the Nats maintain errs we've been working on",
    "start": "3075350",
    "end": "3081230"
  },
  {
    "text": "Nats to actually solve this problem for Sanae dia and that's an idea we're",
    "start": "3081230",
    "end": "3086540"
  },
  {
    "text": "offering a global service so we've worked a lot with Nats to provide a concept of super clusters which are",
    "start": "3086540",
    "end": "3093770"
  },
  {
    "text": "clusters of clusters connected together that use a spline based connection",
    "start": "3093770",
    "end": "3100840"
  },
  {
    "text": "spline base connection routing and some some things like optimistic sense to",
    "start": "3100840",
    "end": "3105980"
  },
  {
    "text": "really create a resilient yet easy on",
    "start": "3105980",
    "end": "3114260"
  },
  {
    "text": "ran traffic solution so that's act a lot of that it's actually in master branch",
    "start": "3114260",
    "end": "3120410"
  },
  {
    "text": "right now today and and that'll be released you know very soon yep okay so",
    "start": "3120410",
    "end": "3127900"
  },
  {
    "text": "it works and just want to show you real quick how it now you can trace the flow",
    "start": "3127900",
    "end": "3133310"
  },
  {
    "text": "from the request of across the components in this case we're looking for an agent that has the regular I'm",
    "start": "3133310",
    "end": "3141650"
  },
  {
    "text": "regular bagel so you can see tracing using the new it's across components",
    "start": "3141650",
    "end": "3147290"
  },
  {
    "text": "which one how long it took the request and I call this code is in this repo and",
    "start": "3147290",
    "end": "3153800"
  },
  {
    "text": "then it's already took at some time here so the next thing I want to show you how to apply all of these in kubernetes",
    "start": "3153800",
    "end": "3159530"
  },
  {
    "text": "using the Nats operator Prometheus sidecars and how many of you",
    "start": "3159530",
    "end": "3165710"
  },
  {
    "text": "are already using a kubernetes in production okay and are you using the",
    "start": "3165710",
    "end": "3171500"
  },
  {
    "text": "operator that's operator okay so when is using it so I'll just give a quick demo",
    "start": "3171500",
    "end": "3180800"
  },
  {
    "text": "of the example of how to deploy on",
    "start": "3180800",
    "end": "3185930"
  },
  {
    "text": "kubernetes that's using the operator so here we have iridium",
    "start": "3185930",
    "end": "3193089"
  },
  {
    "text": "let's lead the cluster here we have a cluster running so let me this is the",
    "start": "3193329",
    "end": "3204589"
  },
  {
    "text": "result from running this manifest here",
    "start": "3204589",
    "end": "3209900"
  },
  {
    "text": "reducing the or using an edge version of the server you can enable Prometheus",
    "start": "3209900",
    "end": "3215599"
  },
  {
    "text": "sidecar for attach it to each one of the clusters by doing the using enable matrix and we have these cells also",
    "start": "3215599",
    "end": "3223479"
  },
  {
    "text": "permission that's exporter that is going to be pulling them from the monitoring",
    "start": "3223479",
    "end": "3229009"
  },
  {
    "text": "endpoint and then feeding into Prometheus all the data so it's",
    "start": "3229009",
    "end": "3235400"
  },
  {
    "text": "deploying Prometheus that's from a fuse",
    "start": "3235400",
    "end": "3243910"
  },
  {
    "text": "and let's deploy also some of them close",
    "start": "3244179",
    "end": "3254809"
  },
  {
    "text": "your nose let me delete this that's that's closer",
    "start": "3254809",
    "end": "3260859"
  },
  {
    "text": "you can see that's gonna be recreated",
    "start": "3273540",
    "end": "3279690"
  },
  {
    "text": "by the operator you can see that there are two ready containers one of the sidecar one is the net server it's",
    "start": "3285849",
    "end": "3294130"
  },
  {
    "text": "closer",
    "start": "3294130",
    "end": "3296518"
  },
  {
    "text": "and then let's deploy the agents from this service first I'm going to deploy",
    "start": "3304340",
    "end": "3310450"
  },
  {
    "text": "the the service itself then the agents",
    "start": "3310450",
    "end": "3324609"
  },
  {
    "text": "this one",
    "start": "3336100",
    "end": "3339060"
  },
  {
    "text": "okay and we have a graph on the plumbing here",
    "start": "3342940",
    "end": "3354760"
  },
  {
    "text": "so you can already used dashboard",
    "start": "3360160",
    "end": "3365250"
  },
  {
    "text": "good copy",
    "start": "3382970",
    "end": "3386299"
  },
  {
    "text": "you too",
    "start": "3390660",
    "end": "3393559"
  },
  {
    "text": "so you can see the traffic from the service in this cluster and I'll open a",
    "start": "3397800",
    "end": "3404310"
  },
  {
    "text": "port directly to into one of the Nets servers to generate load",
    "start": "3404310",
    "end": "3411920"
  },
  {
    "text": "there wasn't a request to",
    "start": "3434650",
    "end": "3438119"
  },
  {
    "text": "to the local court",
    "start": "3449560",
    "end": "3452820"
  },
  {
    "text": "company production okay",
    "start": "3455210",
    "end": "3458530"
  },
  {
    "text": "where is it now these requests are flowing through",
    "start": "3480900",
    "end": "3487650"
  },
  {
    "text": "the closeness cluster that we have in kubernetes and feeding through the",
    "start": "3487650",
    "end": "3493200"
  },
  {
    "text": "Prometheus dashboards by using the side cars that were deployed by the operator",
    "start": "3493200",
    "end": "3498480"
  },
  {
    "text": "and also another thing that is helping with the deployment of nets in",
    "start": "3498480",
    "end": "3504420"
  },
  {
    "text": "kubernetes the operator helps you to form the cluster and also you can just",
    "start": "3504420",
    "end": "3511619"
  },
  {
    "text": "add a field with the certificates for a TLS secret and then you will create them among the values for you for example",
    "start": "3511619",
    "end": "3520400"
  },
  {
    "text": "no yeah that's according to still the caisson master yeah we're but I think it yeah it's a good feature we're looking",
    "start": "3532130",
    "end": "3541109"
  },
  {
    "text": "into it probably something maybe in January will take up a new version that we have",
    "start": "3541109",
    "end": "3547380"
  },
  {
    "text": "addressed dietitian and yeah so right now we have two it is only going to",
    "start": "3547380",
    "end": "3552869"
  },
  {
    "text": "monitoring trading clusters within the default namespace so you have to create a right now and operator for namespace",
    "start": "3552869",
    "end": "3560579"
  },
  {
    "text": "if that some people really like that and what for others would like the flexibility of having a single operator",
    "start": "3560579",
    "end": "3566969"
  },
  {
    "text": "being able to monitor all the nodes all across namespaces so that's coming soon",
    "start": "3566969",
    "end": "3574940"
  },
  {
    "text": "and I want to show and some of them",
    "start": "3577369",
    "end": "3583969"
  },
  {
    "text": "something that is okay so this is num",
    "start": "3588620",
    "end": "3594950"
  },
  {
    "text": "within kubernetes and think there's a still time to show some of the accounts",
    "start": "3594950",
    "end": "3600010"
  },
  {
    "text": "functionality that we have in the latest versions from the servers so one of the",
    "start": "3600010",
    "end": "3606850"
  },
  {
    "text": "biggest features that the server has is that you can now define multiple",
    "start": "3606850",
    "end": "3613790"
  },
  {
    "text": "accounts to be able to have an for better suit better suited for",
    "start": "3613790",
    "end": "3619760"
  },
  {
    "text": "multi-tenancy and use cases so i'm gonna show you how these and how this looks so",
    "start": "3619760",
    "end": "3631130"
  },
  {
    "text": "in case in this case we have a new stance and within the net configuration",
    "start": "3631130",
    "end": "3636920"
  },
  {
    "text": "where you can define multiple accounts in this case we're gonna have three",
    "start": "3636920",
    "end": "3642710"
  },
  {
    "text": "different accounts one is for the clients that are connecting to the service another one for the the not",
    "start": "3642710",
    "end": "3653030"
  },
  {
    "text": "service it the Nifty service that is the cue subscription receiving the requests",
    "start": "3653030",
    "end": "3659290"
  },
  {
    "text": "so this is a for example denieth service account and as you remember from the",
    "start": "3664210",
    "end": "3670430"
  },
  {
    "text": "example we have had drivers that find subject that is the one that being load balanced without your subscription in",
    "start": "3670430",
    "end": "3676010"
  },
  {
    "text": "this case we have defined an IFFT service account where we say that okay I",
    "start": "3676010",
    "end": "3681290"
  },
  {
    "text": "did from this account we are going to export these drivers of fine subject and",
    "start": "3681290",
    "end": "3686390"
  },
  {
    "text": "then all of the users that are within this account in this case there's only one user name there the manager version",
    "start": "3686390",
    "end": "3693050"
  },
  {
    "text": "and also another good practices instead of using a user pass and if you use user",
    "start": "3693050",
    "end": "3700880"
  },
  {
    "text": "and password you should be creped your password so we can get rid of this pass credential and then in your part of you",
    "start": "3700880",
    "end": "3708460"
  },
  {
    "text": "configuration you can have the be creative decrypted version okay so in",
    "start": "3708460",
    "end": "3714980"
  },
  {
    "text": "this new service account we have an export that is for the drive is not fine subject and it also relies on",
    "start": "3714980",
    "end": "3722420"
  },
  {
    "text": "a couple of imports well one import from another accounting the agents so all the agents and the drivers are going to be",
    "start": "3722420",
    "end": "3728720"
  },
  {
    "text": "on this agents account and they're going to be accepting requests on these",
    "start": "3728720",
    "end": "3734089"
  },
  {
    "text": "drivers rights subject and this and then",
    "start": "3734089",
    "end": "3741980"
  },
  {
    "text": "from the need agents account we'll have a service export that name drivers dot",
    "start": "3741980",
    "end": "3748339"
  },
  {
    "text": "rights so that way they can reply back today to the requests",
    "start": "3748339",
    "end": "3755859"
  },
  {
    "text": "and this the other accounts the customers one that is going to be importing from the leaf service and the",
    "start": "3763350",
    "end": "3769050"
  },
  {
    "text": "drivers would find subject into its account and has a couple of users one for the API and another for for example",
    "start": "3769050",
    "end": "3776100"
  },
  {
    "text": "a generic client so let's start the server in this mode so to show how it",
    "start": "3776100",
    "end": "3782040"
  },
  {
    "text": "looks okay so now we have the latest",
    "start": "3782040",
    "end": "3795750"
  },
  {
    "text": "version from the server using the multi-tenancy features for segregating accounts and subjects in into multiple",
    "start": "3795750",
    "end": "3804270"
  },
  {
    "text": "users and we're gonna make our requests",
    "start": "3804270",
    "end": "3809060"
  },
  {
    "text": "once we need to start the components",
    "start": "3810770",
    "end": "3815300"
  },
  {
    "text": "you can specify the user as part of the URI",
    "start": "3822980",
    "end": "3829100"
  },
  {
    "text": "or since",
    "start": "3852800",
    "end": "3855550"
  },
  {
    "text": "it's API server it's the service",
    "start": "3858520",
    "end": "3865260"
  },
  {
    "text": "so this feature is really good to be able to control while someday what are",
    "start": "3871970",
    "end": "3877460"
  },
  {
    "text": "the actions that this each one of the components can do within the service for",
    "start": "3877460",
    "end": "3883880"
  },
  {
    "text": "example here I have the ground credentials should be mine here okay so",
    "start": "3883880",
    "end": "3892310"
  },
  {
    "text": "now sending a request with this set up from the server you will see that in the",
    "start": "3892310",
    "end": "3901550"
  },
  {
    "text": "logs things look a bit different",
    "start": "3901550",
    "end": "3907060"
  },
  {
    "text": "so this how it looks when the server is based essentially sharing data from from",
    "start": "3913349",
    "end": "3918359"
  },
  {
    "text": "an account to an account that's how and then importing and service functionality do the sharing between the accounts is",
    "start": "3918359",
    "end": "3926849"
  },
  {
    "text": "anonymous so in that naita well the native implementation the clients for",
    "start": "3926849",
    "end": "3932249"
  },
  {
    "text": "the request/response uses the ephemeral inboxes and subscriptions for doing the",
    "start": "3932249",
    "end": "3938009"
  },
  {
    "text": "request response so locally for an account it looks like this but as it",
    "start": "3938009",
    "end": "3944069"
  },
  {
    "text": "traverses that into different accounts it becomes transformed to in order to keep all the requests response and only",
    "start": "3944069",
    "end": "3953130"
  },
  {
    "text": "most between the accounts so that you cannot trace a certain subject so all the objects are now ephemeral in between",
    "start": "3953130",
    "end": "3959369"
  },
  {
    "text": "the accounts then any questions and this",
    "start": "3959369",
    "end": "3965940"
  },
  {
    "text": "one this accounts or data sharing yeah",
    "start": "3965940",
    "end": "3979670"
  },
  {
    "text": "yeah",
    "start": "3979819",
    "end": "3982819"
  },
  {
    "text": "uh-huh yeah yeah that a at a higher level accounts are a great way to take a",
    "start": "3985030",
    "end": "3991730"
  },
  {
    "text": "large deployment and ants globally even and put users and really policy into",
    "start": "3991730",
    "end": "4000550"
  },
  {
    "text": "different buckets so from an enterprise perspective you can set up a number of accounts when you know it's let's take a",
    "start": "4000550",
    "end": "4006280"
  },
  {
    "text": "traditional sales and support and something and something else right what",
    "start": "4006280",
    "end": "4012100"
  },
  {
    "text": "you can do is each of these accounts have a their own namespace so if you have somebody publishing in the sales",
    "start": "4012100",
    "end": "4018670"
  },
  {
    "text": "account on foo and somebody publishing in the support account on foo those messages will never cross but if you",
    "start": "4018670",
    "end": "4026020"
  },
  {
    "text": "explicitly export them and import them then they cross and what this allows you",
    "start": "4026020",
    "end": "4032050"
  },
  {
    "text": "to do is to manage accounts separately and you've decentralized management of",
    "start": "4032050",
    "end": "4038440"
  },
  {
    "text": "some of this stuff from a gnat's perspective although you know you may have different organizations in your",
    "start": "4038440",
    "end": "4043870"
  },
  {
    "text": "enterprise managing their own accounts only when the two accounts agree can data flow so this is a quick overview",
    "start": "4043870",
    "end": "4053770"
  },
  {
    "text": "was what we did the accounts gave basically separated into three different accounts depending on the behavior three",
    "start": "4053770",
    "end": "4060610"
  },
  {
    "text": "different components and so this way for example we can add users that are agents",
    "start": "4060610",
    "end": "4067090"
  },
  {
    "text": "that can accept the request to basically the the drivers agents in the",
    "start": "4067090",
    "end": "4072640"
  },
  {
    "text": "applications and all of those permissions are pertain to data",
    "start": "4072640",
    "end": "4077890"
  },
  {
    "text": "accountant you can't mitigate for example being able to act as a service for example and",
    "start": "4077890",
    "end": "4089080"
  },
  {
    "text": "so just to summarize so far some of them and I think so the practices I've shown",
    "start": "4089080",
    "end": "4097500"
  },
  {
    "text": "is very important to fournette the recognition logic it's really helpful",
    "start": "4097500",
    "end": "4102900"
  },
  {
    "text": "but it's also helpful to the book how is to check the stability of the connection",
    "start": "4102900",
    "end": "4109298"
  },
  {
    "text": "and to nuts by using the event handlers and a really good feature from Nancy",
    "start": "4109299",
    "end": "4114850"
  },
  {
    "text": "they accused subscribers and so that really helps for doing the load balancing and a lot of load balancing",
    "start": "4114850",
    "end": "4121838"
  },
  {
    "text": "which is in a very simple way and to allows you to keep things simple there",
    "start": "4121839",
    "end": "4128810"
  },
  {
    "text": "is a drain as well then I forgot to cover and there is a so when we have the",
    "start": "4128810",
    "end": "4137259"
  },
  {
    "text": "as part of the component I define that this a shutdown method and there is",
    "start": "4137260",
    "end": "4146240"
  },
  {
    "text": "there are two ways for the touching from",
    "start": "4146240",
    "end": "4151310"
  },
  {
    "text": "that one is to abruptly closing the connection and there is a that is the close API in this case let's see see",
    "start": "4151310",
    "end": "4161798"
  },
  {
    "text": "that's connection closed so what this",
    "start": "4161799",
    "end": "4168500"
  },
  {
    "text": "will do is that it will any pending data that was from the client at that point",
    "start": "4168500",
    "end": "4174798"
  },
  {
    "text": "is going to be flushed into the socket and then close the connection without waiting any further or in this case and",
    "start": "4174799",
    "end": "4181910"
  },
  {
    "text": "if there might be some requests in flight from the within this system it is",
    "start": "4181910",
    "end": "4188990"
  },
  {
    "text": "more graceful if you process all the pending requests that you already have in flight and there were delivered to",
    "start": "4188990",
    "end": "4195080"
  },
  {
    "text": "you before the touching from the system so for that there's a new API in the",
    "start": "4195080",
    "end": "4200720"
  },
  {
    "text": "clients called drain that will basically",
    "start": "4200720",
    "end": "4208550"
  },
  {
    "text": "first unsubscribe from all the topics that you were registered and then",
    "start": "4208550",
    "end": "4214270"
  },
  {
    "text": "internally in the client dispatch all the callbacks with the pending messages",
    "start": "4214270",
    "end": "4219530"
  },
  {
    "text": "that you have and process them and once you are done flush any remaining",
    "start": "4219530",
    "end": "4225590"
  },
  {
    "text": "publishing data and and closing the connection so they also leave leaves you at the closing estate from from the",
    "start": "4225590",
    "end": "4234110"
  },
  {
    "text": "server this is a good practice to be",
    "start": "4234110",
    "end": "4239570"
  },
  {
    "text": "able to more gracefully process the requests while operating for example a",
    "start": "4239570",
    "end": "4245270"
  },
  {
    "text": "version of the components and a big grip for passwords as also and",
    "start": "4245270",
    "end": "4254059"
  },
  {
    "text": "we have a new feature as well n keys then at its ad you can use it instead of",
    "start": "4254059",
    "end": "4261020"
  },
  {
    "text": "looking bigger than passwords so you can drop by but the demo and I can but by the booth scene area and we can show you",
    "start": "4261020",
    "end": "4267260"
  },
  {
    "text": "some of that clustering for fault tolerance and so the operator helps a",
    "start": "4267260",
    "end": "4273079"
  },
  {
    "text": "lot in kubernetes if you have a contest based deployment and the new feature for",
    "start": "4273079",
    "end": "4279920"
  },
  {
    "text": "the accounts really help you simplify something isolating the permissions and users and",
    "start": "4279920",
    "end": "4289400"
  },
  {
    "text": "also a TLS and there might not be enough time here to cover it but it's in the",
    "start": "4289400",
    "end": "4296900"
  },
  {
    "text": "repository we can try",
    "start": "4296900",
    "end": "4303520"
  },
  {
    "text": "well there are two TLS configuration that you need to think about there is",
    "start": "4303520",
    "end": "4309590"
  },
  {
    "text": "actually three with the latest version from the server and you have to establish TLS for the clients and also",
    "start": "4309590",
    "end": "4317449"
  },
  {
    "text": "you have to set up TLS for the internal routing from from the Nets cluster and",
    "start": "4317449",
    "end": "4324409"
  },
  {
    "text": "there's also the superclusters our functionality that we have the gateways it's also another port and also endpoint",
    "start": "4324409",
    "end": "4334250"
  },
  {
    "text": "that you have to secure and in this case",
    "start": "4334250",
    "end": "4341619"
  },
  {
    "text": "yep",
    "start": "4343590",
    "end": "4346590"
  },
  {
    "text": "the question is what's Nance relationship with envoy is that fair or you know are we competing yeah we really",
    "start": "4378270",
    "end": "4386920"
  },
  {
    "text": "see it as an Ann story so there's no reason an envoy can't actually use Nats",
    "start": "4386920",
    "end": "4392650"
  },
  {
    "text": "under the covers to do a lot of the work so we've we've started looking at that I know Wally's looked a little bit about",
    "start": "4392650",
    "end": "4398950"
  },
  {
    "text": "what it would take to plug Nats into envoy so yeah we're looking into that",
    "start": "4398950",
    "end": "4404980"
  },
  {
    "text": "but I don't necessarily see this competing head to head I mean it's it's an Ann story not necessarily nor",
    "start": "4404980",
    "end": "4412380"
  },
  {
    "text": "yeah you might have some some issues with TLS so Nats by default opens up a",
    "start": "4424699",
    "end": "4430469"
  },
  {
    "text": "connection with TCP and then it does a little bit it gets a little bit of metadata from the server giving it some",
    "start": "4430469",
    "end": "4437369"
  },
  {
    "text": "information do I need to upgrade to TLS this is something we know can cause problems in some environments so we'll",
    "start": "4437369",
    "end": "4445409"
  },
  {
    "text": "look at that but okay theoretically it should work",
    "start": "4445409",
    "end": "4457860"
  },
  {
    "text": "personally I haven't tried it but you know if you try it let us know please so",
    "start": "4457860",
    "end": "4467729"
  },
  {
    "text": "I'm sure",
    "start": "4467729",
    "end": "4470059"
  },
  {
    "text": "okay okay yeah that's a great suggestion to use envoy to potentially optimize",
    "start": "4494210",
    "end": "4499290"
  },
  {
    "text": "routing based on where partition data is in the cluster that would be great with NAT streaming actually there's another",
    "start": "4499290",
    "end": "4506490"
  },
  {
    "text": "question oh yes no worries",
    "start": "4506490",
    "end": "4514400"
  },
  {
    "text": "oh absolutely by default gnats is payload agnostic and the API is the the",
    "start": "4527850",
    "end": "4534300"
  },
  {
    "text": "basic API is just take a series of bytes in the example here Wally's marshalling",
    "start": "4534300",
    "end": "4539580"
  },
  {
    "text": "some JSON - you know just easily pass fields in that streaming we use protobuf",
    "start": "4539580",
    "end": "4546440"
  },
  {
    "text": "/ / cornets so yeah yeah the NASA its payload agnostic you could send whatever",
    "start": "4546440",
    "end": "4552480"
  },
  {
    "text": "you want yeah the question was does the",
    "start": "4552480",
    "end": "4563730"
  },
  {
    "text": "the NASA streaming client or do you have to use protobuf to use streaming that's that's in that's under the hood and then",
    "start": "4563730",
    "end": "4570120"
  },
  {
    "text": "at streaming clients so we do that for you okay so what's the maximum message",
    "start": "4570120",
    "end": "4587250"
  },
  {
    "text": "size but by default and the NAT server it's a mega megabyte but it's",
    "start": "4587250",
    "end": "4592290"
  },
  {
    "text": "configurable so you can make it as big as you think you can handle or by policy",
    "start": "4592290",
    "end": "4597420"
  },
  {
    "text": "you might want to lower it and when that",
    "start": "4597420",
    "end": "4603240"
  },
  {
    "text": "happens when you send a message that's too big for the server you know because of its policy you actually get Nasik on",
    "start": "4603240",
    "end": "4608850"
  },
  {
    "text": "this error back saying you've had a published exception so let's a client know - sure",
    "start": "4608850",
    "end": "4619610"
  },
  {
    "text": "okay the question is does not support open tracing or are there plans to support open tracing we've looked at",
    "start": "4643050",
    "end": "4649870"
  },
  {
    "text": "this and one of the things we're gonna do is provide a reference architecture it sits in our near-term plans on how to",
    "start": "4649870",
    "end": "4657340"
  },
  {
    "text": "use open tracing or or one of the open tracing project products projects with",
    "start": "4657340",
    "end": "4663070"
  },
  {
    "text": "Nats but Nats cornets does not have the concept of headers so it's very hard to",
    "start": "4663070",
    "end": "4669790"
  },
  {
    "text": "take a sticky unique ID in without you know doing something with envelope being the payload so so do that and we'll",
    "start": "4669790",
    "end": "4678790"
  },
  {
    "text": "provide a reference architecture and how to do it and then users can choose to you know do this in their applications",
    "start": "4678790",
    "end": "4685660"
  },
  {
    "text": "one of the one of the really cool things that you can do though is remember when I said you can just subscribe to",
    "start": "4685660",
    "end": "4690760"
  },
  {
    "text": "everything and Nats if you use that wild card so what you can do is have a client that subscribes to all tracing data or",
    "start": "4690760",
    "end": "4698650"
  },
  {
    "text": "subscribes to everything and that's actually not interfering with your clients when they're tracing but it's",
    "start": "4698650",
    "end": "4705730"
  },
  {
    "text": "grabbing that tracing data from the net server as a separate client which offloads a lot of that processing",
    "start": "4705730",
    "end": "4712890"
  },
  {
    "text": "what",
    "start": "4728760",
    "end": "4731388"
  },
  {
    "text": "any other questions",
    "start": "4749530",
    "end": "4752820"
  },
  {
    "text": "so well yeah so the repo is there if you have any questions you know we'll be at the sign",
    "start": "4758510",
    "end": "4766980"
  },
  {
    "text": "ad booth so you want to continue discussing some of the new features and the server the server has evolved a lot",
    "start": "4766980",
    "end": "4773730"
  },
  {
    "text": "this year and it is there are very very cool features for the multi-tenancy more",
    "start": "4773730",
    "end": "4780240"
  },
  {
    "text": "graceful shutdown mode from the server know of security went into this release",
    "start": "4780240",
    "end": "4786570"
  },
  {
    "text": "and half an you as partisan idea team we have a new service tackled and NGS that",
    "start": "4786570",
    "end": "4794550"
  },
  {
    "text": "were also we can talk about it later so",
    "start": "4794550",
    "end": "4801140"
  },
  {
    "text": "thank you very much everyone and we're actually having Nats party tonight",
    "start": "4801140",
    "end": "4806790"
  },
  {
    "text": "so if you're interested swing by the Sanae dia booth what are we selfies 45",
    "start": "4806790",
    "end": "4812630"
  },
  {
    "text": "but yeah swing by and we'll give you a wristband southeast 45 right good yeah I",
    "start": "4812630",
    "end": "4824660"
  },
  {
    "text": "should know",
    "start": "4824660",
    "end": "4827840"
  },
  {
    "text": "Sanae dia yep thank you everyone thank",
    "start": "4831500",
    "end": "4841590"
  },
  {
    "text": "you [Applause]",
    "start": "4841590",
    "end": "4847220"
  }
]