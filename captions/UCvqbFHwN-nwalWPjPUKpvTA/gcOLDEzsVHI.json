[
  {
    "text": "hi thank you so much for coming and joining me with pki the wrong way",
    "start": "719",
    "end": "8320"
  },
  {
    "text": "i'm tabitha sable i work as system security engineer at datadog we're a cloud native monitoring provider",
    "start": "8320",
    "end": "15839"
  },
  {
    "text": "so we handle trillions of data points per day across product features like log analysis",
    "start": "15839",
    "end": "24000"
  },
  {
    "text": "metrics aggregation security monitoring and application performance monitoring",
    "start": "24000",
    "end": "30000"
  },
  {
    "text": "there's extensive infrastructure to support all of those product features with",
    "start": "30000",
    "end": "35200"
  },
  {
    "text": "dozens of kubernetes clusters tens of thousands of nodes i focus on hacking hardening and defending that",
    "start": "35200",
    "end": "41920"
  },
  {
    "text": "infrastructure and helping to ensure that our operations teams and security teams",
    "start": "41920",
    "end": "47600"
  },
  {
    "text": "are working together and always helping to level each other up i also try to chop wood and carry water",
    "start": "47600",
    "end": "54399"
  },
  {
    "text": "for upstream kubernetes by serving as co-chair of kubernetes security and an",
    "start": "54399",
    "end": "60960"
  },
  {
    "text": "associate member of the platform security committee the the goals for today what i'm really",
    "start": "60960",
    "end": "67119"
  },
  {
    "text": "hoping to uh to to do here is to share some lessons that i've learned",
    "start": "67119",
    "end": "72479"
  },
  {
    "text": "from some kubernetes security research that i've done and encourage you to think about your",
    "start": "72479",
    "end": "78240"
  },
  {
    "text": "clusters in the way that an adversary would think about them and also",
    "start": "78240",
    "end": "83360"
  },
  {
    "text": "i want to have fun and just have a chance to say hey watch this so what's on the hacker agenda",
    "start": "83360",
    "end": "89920"
  },
  {
    "text": "first we'll do a review of what is going on inside a kubernetes control",
    "start": "89920",
    "end": "95759"
  },
  {
    "text": "plane specifically around the use of tls and then we'll walk through four demos",
    "start": "95759",
    "end": "102000"
  },
  {
    "text": "where we will hack a misconfigured kubernetes cluster because of oversights in its configuration and use",
    "start": "102000",
    "end": "109360"
  },
  {
    "text": "of tls so we'll jump right into that review the first thing that we need to deal with",
    "start": "109360",
    "end": "115680"
  },
  {
    "text": "is too many acronyms this talk is going to be inevitably filled",
    "start": "115680",
    "end": "121600"
  },
  {
    "text": "with acronyms and i want to make sure that we all start off in the same place so one of the most key ones that's going",
    "start": "121600",
    "end": "128160"
  },
  {
    "text": "to be in this talk is tls transport layer security this is a protocol",
    "start": "128160",
    "end": "133200"
  },
  {
    "text": "that usually sits on top of tcp and it provides an encrypted and authenticated data",
    "start": "133200",
    "end": "140000"
  },
  {
    "text": "stream from a client to a server so it uses public key cryptography",
    "start": "140000",
    "end": "146319"
  },
  {
    "text": "for the server to prove its identity to the client mutual tls is an optional extension to",
    "start": "146319",
    "end": "153440"
  },
  {
    "text": "tls where the client also uses public key cryptography",
    "start": "153440",
    "end": "158560"
  },
  {
    "text": "to prove its identity to the server thus each has authenticated the other mutually the way that they do that is by",
    "start": "158560",
    "end": "166160"
  },
  {
    "text": "the use of a certifying authority this is a public key certificate that signs other",
    "start": "166160",
    "end": "172239"
  },
  {
    "text": "certificates and so if software trusts a particular",
    "start": "172239",
    "end": "177440"
  },
  {
    "text": "certifying authority then by extension it believes in and trusts every",
    "start": "177440",
    "end": "183440"
  },
  {
    "text": "certificate signed by that certifying authority this concept extends into the concept of",
    "start": "183440",
    "end": "191040"
  },
  {
    "text": "public key infrastructure which is like the entire family tree",
    "start": "191040",
    "end": "196640"
  },
  {
    "text": "of certifying authorities that have signed potentially other certifying authorities",
    "start": "196640",
    "end": "201680"
  },
  {
    "text": "to eventually sign certificates that are used for clients and servers",
    "start": "201680",
    "end": "207440"
  },
  {
    "text": "here is your basic kubernetes architecture diagram with fcd there holding all of the state the",
    "start": "207920",
    "end": "215040"
  },
  {
    "text": "api server in the center of the world and everything else talking to the api server",
    "start": "215040",
    "end": "220480"
  },
  {
    "text": "and of course occasionally the api server talks out to other things as well so within etcd etcd uses mutual tls",
    "start": "220480",
    "end": "230080"
  },
  {
    "text": "both to authenticate client connections into the fcd cluster and for peer connections between nodes",
    "start": "230080",
    "end": "237439"
  },
  {
    "text": "in an fct cluster the api server makes the most complex",
    "start": "237439",
    "end": "243439"
  },
  {
    "text": "use of tls within the kubernetes control plane it performs mutual tls authentication of clients",
    "start": "243439",
    "end": "250159"
  },
  {
    "text": "that connect to it but it is itself also a mutual tls client when it connects to etcd",
    "start": "250159",
    "end": "257840"
  },
  {
    "text": "the kubelet and various other control claim components furthermore there is this front proxy or",
    "start": "257840",
    "end": "266000"
  },
  {
    "text": "aggregation layer that's configured by the request header arguments to the api",
    "start": "266000",
    "end": "271199"
  },
  {
    "text": "server and it also performs separate mutual tls authentication of",
    "start": "271199",
    "end": "277840"
  },
  {
    "text": "requests that are coming in from a proxy server in front of the api server",
    "start": "277840",
    "end": "283440"
  },
  {
    "text": "or it also uses mutual tls to authenticate itself to other extension api servers when you",
    "start": "283440",
    "end": "291120"
  },
  {
    "text": "access them through it the kubelet and other parts of the control plane also use mutual tls when",
    "start": "291120",
    "end": "298560"
  },
  {
    "text": "they communicate with the api server and most of them offer a metrics",
    "start": "298560",
    "end": "303840"
  },
  {
    "text": "endpoint or some small api and they use mutual tls authentication of client connections to",
    "start": "303840",
    "end": "309919"
  },
  {
    "text": "that don't forget your own applications which",
    "start": "309919",
    "end": "314960"
  },
  {
    "text": "likely include plain tls servers like for web services and may include",
    "start": "314960",
    "end": "322240"
  },
  {
    "text": "mutual tls servers or clients like for example if you are using a service mesh or",
    "start": "322240",
    "end": "329280"
  },
  {
    "text": "if you're doing authentication between some application server and a backend",
    "start": "329280",
    "end": "334800"
  },
  {
    "text": "database so with that all taken care of let's hop",
    "start": "334800",
    "end": "340320"
  },
  {
    "text": "in and actually hack some cluster so the first situation that we'll work",
    "start": "340320",
    "end": "346000"
  },
  {
    "text": "through here is based on the idea that you're certifying authority controls",
    "start": "346000",
    "end": "353759"
  },
  {
    "text": "the issuance of credentials for your kubernetes cluster so no matter how sophisticated the rbac",
    "start": "353759",
    "end": "360800"
  },
  {
    "text": "configuration that you have in your kubernetes cluster may be if you're certifying authority",
    "start": "360800",
    "end": "366880"
  },
  {
    "text": "is too free in who it issues certificates to",
    "start": "366880",
    "end": "371919"
  },
  {
    "text": "then you may have a vulnerability there so we're going to access our certifying",
    "start": "371919",
    "end": "377919"
  },
  {
    "text": "authority require acquire a certificate inappropriately and use that to become cluster admin",
    "start": "377919",
    "end": "386400"
  },
  {
    "text": "i have a local kind cluster here that's been provisioned it's using hashicorp vault as an",
    "start": "386400",
    "end": "392560"
  },
  {
    "text": "external certifying authority that has provisioned the many certificates and keys that are",
    "start": "392560",
    "end": "398960"
  },
  {
    "text": "needed to make a kubernetes cluster work and in this case my vault configuration",
    "start": "398960",
    "end": "404800"
  },
  {
    "text": "is not very well locked down so one of the workloads on this kubernetes",
    "start": "404800",
    "end": "410720"
  },
  {
    "text": "cluster is a basic https web server",
    "start": "410720",
    "end": "415919"
  },
  {
    "text": "and this https web server is configured to be able to access",
    "start": "415919",
    "end": "422800"
  },
  {
    "text": "the vault cluster in order to generate the ssl keys that it the tls keys that",
    "start": "422800",
    "end": "430240"
  },
  {
    "text": "it needs to be able to offer web service so let's take a quick look",
    "start": "430240",
    "end": "436240"
  },
  {
    "text": "at this certificate you know it's issued for www.example.net by the demo example.net pki great",
    "start": "436240",
    "end": "444720"
  },
  {
    "text": "and the way that it's able to do that is because it has a vault token mounted into it",
    "start": "444720",
    "end": "451360"
  },
  {
    "text": "and this particular vault token is a human readable string because this is a demo and i wanted it to be easy to set up",
    "start": "451360",
    "end": "457840"
  },
  {
    "text": "but usually this would be some long random secret value so with this certificate",
    "start": "457840",
    "end": "465759"
  },
  {
    "text": "i shouldn't be able to do anything interesting but i know that i can access vault so if i'm able to access",
    "start": "465759",
    "end": "473280"
  },
  {
    "text": "more within vault than i should be able to maybe i can get a better certificate that's useful in",
    "start": "473280",
    "end": "479280"
  },
  {
    "text": "the kubernetes cluster so i want a certificate",
    "start": "479280",
    "end": "484960"
  },
  {
    "text": "specifically that has the organization system masters in the distinguished name",
    "start": "484960",
    "end": "491039"
  },
  {
    "text": "of the certificate because in a default kubernetes cluster there's a cluster role binding from that",
    "start": "491039",
    "end": "497680"
  },
  {
    "text": "group to cluster admin and furthermore that particular group is special and has",
    "start": "497680",
    "end": "504319"
  },
  {
    "text": "all privileges within the kubernetes control plane even if you delete that role binding",
    "start": "504319",
    "end": "510160"
  },
  {
    "text": "this is kind of confusing but it's necessary for internal communication within the",
    "start": "510160",
    "end": "516159"
  },
  {
    "text": "api server itself so i'm going to make this openssl configuration file",
    "start": "516159",
    "end": "522800"
  },
  {
    "text": "so that i can run an openssl rec command to generate a certificate",
    "start": "522800",
    "end": "528880"
  },
  {
    "text": "signing request now normally i should not be able to",
    "start": "528880",
    "end": "535040"
  },
  {
    "text": "access the dangerous sign verbatim endpoint of vault because",
    "start": "535040",
    "end": "542240"
  },
  {
    "text": "then vault will sign anything i send it but in this case vault administrators have not been very",
    "start": "542240",
    "end": "548399"
  },
  {
    "text": "careful and i do have access to that so i can use this vault command vault right",
    "start": "548399",
    "end": "554720"
  },
  {
    "text": "with the path to the kubernetes pki notice not the demo example net pki and i can",
    "start": "554720",
    "end": "562399"
  },
  {
    "text": "submit this certificate signing request now i have the resulting certificate in this shell",
    "start": "562399",
    "end": "569200"
  },
  {
    "text": "variable json so i'll use jq to write it out in a nice format into a certificate file",
    "start": "569200",
    "end": "576480"
  },
  {
    "text": "and we can look at the resulting certificate issued by the demo kubernetes pki",
    "start": "576480",
    "end": "583600"
  },
  {
    "text": "for august who's a member of your system administrators group",
    "start": "583600",
    "end": "590240"
  },
  {
    "text": "this is exactly the key that we wanted so with this certificate we can talk to the",
    "start": "590240",
    "end": "596959"
  },
  {
    "text": "api server i don't have kubectl inside this web server pod and it looked pretty suspicious if i",
    "start": "596959",
    "end": "603760"
  },
  {
    "text": "downloaded it so instead i'll use the notorious hacker tool curl to communicate with the api server and",
    "start": "603760",
    "end": "610880"
  },
  {
    "text": "say can i please have all of the secrets out of the kube system namespace",
    "start": "610880",
    "end": "617600"
  },
  {
    "text": "of course i can because that's what the certificate says i should have access to",
    "start": "617600",
    "end": "624879"
  },
  {
    "text": "so what do we learn from this how can we mitigate this i mean treat your certifying authority",
    "start": "626079",
    "end": "632959"
  },
  {
    "text": "permissions with care your ca configuration is an overlay over your rbac configuration and",
    "start": "632959",
    "end": "640800"
  },
  {
    "text": "so if your ca is willing to dispense certificates that people or services shouldn't have",
    "start": "640800",
    "end": "647760"
  },
  {
    "text": "then they will be able to get them use least privilege when you're configuring your ca",
    "start": "647760",
    "end": "654000"
  },
  {
    "text": "so like specifically for vault you can set up roles that specify",
    "start": "654000",
    "end": "659760"
  },
  {
    "text": "exactly what settings are allowed to be in the certificate and then that can prevent access to",
    "start": "659760",
    "end": "668000"
  },
  {
    "text": "other settings that would be inappropriate we'll move on to another demo here",
    "start": "668000",
    "end": "675279"
  },
  {
    "text": "which is what happens if you only have one independent pki",
    "start": "675279",
    "end": "682240"
  },
  {
    "text": "in your kubernetes cluster well as we discussed before fcd uses mutual tls to",
    "start": "682240",
    "end": "689760"
  },
  {
    "text": "authenticate clients that are connecting to it and in the usual configuration in a",
    "start": "689760",
    "end": "695279"
  },
  {
    "text": "kubernetes cluster every certificate signed by the fcdca has full access to the",
    "start": "695279",
    "end": "703360"
  },
  {
    "text": "contents of etcd and of course etcd stores everything for your control plane",
    "start": "703360",
    "end": "709760"
  },
  {
    "text": "so therefore if etcd trusts the same certifying authority",
    "start": "709760",
    "end": "715279"
  },
  {
    "text": "that kubernetes client credentials are issued from you can simply submit a kubernetes",
    "start": "715279",
    "end": "721519"
  },
  {
    "text": "client certificate to etcd and access anything you want let's see what that would look like",
    "start": "721519",
    "end": "730399"
  },
  {
    "text": "here we are back at a normal shell and i have a kubernetes",
    "start": "730399",
    "end": "737040"
  },
  {
    "text": "client certificate you see it's issued by the demo kubernetes pki and it's issued to me personally tabby",
    "start": "737040",
    "end": "744560"
  },
  {
    "text": "from the group cats now i happen to have etcd ctl installed",
    "start": "744560",
    "end": "751519"
  },
  {
    "text": "on my system because i'm a system administrator and so what happens if i take this kubernetes",
    "start": "751519",
    "end": "758320"
  },
  {
    "text": "client cert and pass it to fcdctl and tell it to talk to my cd cluster",
    "start": "758320",
    "end": "765519"
  },
  {
    "text": "i can just read out whatever values that i want from etcd i also could write whatever values i",
    "start": "766240",
    "end": "772399"
  },
  {
    "text": "wanted into etcd so this client cert doesn't let me do very much when i pass",
    "start": "772399",
    "end": "779519"
  },
  {
    "text": "it to the api server but because i'm also able to inappropriately pass it to etcd",
    "start": "779519",
    "end": "786480"
  },
  {
    "text": "i can do anything that i can imagine now this doesn't have to be this way",
    "start": "786480",
    "end": "795360"
  },
  {
    "text": "what if i don't have etcd ctl installed time was you could just talk to etcd",
    "start": "795360",
    "end": "801760"
  },
  {
    "text": "with curl and uh in the fcd api version 2",
    "start": "801760",
    "end": "807040"
  },
  {
    "text": "that's how that works but fcd api version 3 uses grpc it's not nearly as human",
    "start": "807040",
    "end": "813920"
  },
  {
    "text": "readable but at cd developers have taken care of us there is a fcd feature that's on by",
    "start": "813920",
    "end": "821680"
  },
  {
    "text": "default that lets you access ecd v3 through normal http requests in addition",
    "start": "821680",
    "end": "828800"
  },
  {
    "text": "to the grpc protocol so you have to read a little bit of the documentation to learn how to access it",
    "start": "828800",
    "end": "834959"
  },
  {
    "text": "but once you've done so you can submit a post request to the appropriate endpoint with some",
    "start": "834959",
    "end": "842160"
  },
  {
    "text": "json and base64 encoded query parameters and you can pull the keys out of xcd",
    "start": "842160",
    "end": "848880"
  },
  {
    "text": "with curl as well this does not have to be this way",
    "start": "848880",
    "end": "854399"
  },
  {
    "text": "at cd supports our back to use fcdctl i have to pass all these",
    "start": "854399",
    "end": "861040"
  },
  {
    "text": "ugly arguments so i'll make a shell alias so that the the remaining commands look easier to read",
    "start": "861040",
    "end": "866880"
  },
  {
    "text": "we can enable at cdr back and that can make this particular attack",
    "start": "866880",
    "end": "873040"
  },
  {
    "text": "harder to pull off it's relatively easy you use fcd",
    "start": "873040",
    "end": "878720"
  },
  {
    "text": "add user and grant role commands so it's necessary to create a root user and",
    "start": "878720",
    "end": "886079"
  },
  {
    "text": "no password equals true means that you can't log in with a password only with mutual tls then we'll also",
    "start": "886079",
    "end": "893040"
  },
  {
    "text": "create a user called cube api server at cd client because that's the default",
    "start": "893040",
    "end": "898880"
  },
  {
    "text": "cn in the client cert used by the api server when it accesses etcd",
    "start": "898880",
    "end": "904880"
  },
  {
    "text": "we have bound the root role to both of these because we're not trying to restrict what the api server can do we're only",
    "start": "904880",
    "end": "912000"
  },
  {
    "text": "trying to restrict access to only the api server after we've created",
    "start": "912000",
    "end": "917440"
  },
  {
    "text": "those users and role claims we can enable authentication",
    "start": "917440",
    "end": "922560"
  },
  {
    "text": "now that we've enabled authentication what happens when i use fcdctl and pass my kubernetes",
    "start": "922560",
    "end": "929920"
  },
  {
    "text": "client cert in permission denied because tabby",
    "start": "929920",
    "end": "935199"
  },
  {
    "text": "isn't one of the users that has access to etcd anymore but kubernetes is still working",
    "start": "935199",
    "end": "942880"
  },
  {
    "text": "i can still access the api server and do things i'm going to go ahead and disable at cd",
    "start": "944560",
    "end": "951279"
  },
  {
    "text": "authentication because if i left it on it would break some of the subsequent demos",
    "start": "951279",
    "end": "956959"
  },
  {
    "text": "what have we learned from this and how can we mitigate this it's really critical to have separate",
    "start": "957120",
    "end": "962639"
  },
  {
    "text": "pkis for your etcd cluster and for your kubernetes api server",
    "start": "962639",
    "end": "968800"
  },
  {
    "text": "additionally you can use network policy either like with a firewall or with",
    "start": "968800",
    "end": "974320"
  },
  {
    "text": "cloud provider or apples um or if you're inside kubernetes with kubernetes network policy",
    "start": "974320",
    "end": "981040"
  },
  {
    "text": "to restrict who can even communicate with the cd port and if you like you can enable",
    "start": "981040",
    "end": "987680"
  },
  {
    "text": "xcd authorization using fcd authorization is a relatively uncommon configuration",
    "start": "987680",
    "end": "994720"
  },
  {
    "text": "so i definitely recommend that you test it first if you decide that you want to use it but this can mitigate some of the hazard",
    "start": "994720",
    "end": "1002399"
  },
  {
    "text": "that comes from having this pki shared but it's really best to have separate pkis",
    "start": "1002399",
    "end": "1009519"
  },
  {
    "text": "we'll get into the next demo here which involves my least favorite api server feature",
    "start": "1009519",
    "end": "1015519"
  },
  {
    "text": "and the reason for that is that it enables two different features at once the dangerous and uncommon front proxy",
    "start": "1015519",
    "end": "1022839"
  },
  {
    "text": "authentication where a proxy server passes headers to the api server and tells it who you",
    "start": "1022839",
    "end": "1029280"
  },
  {
    "text": "are and the harmless and common aggregation layer where the api server functions as a",
    "start": "1029280",
    "end": "1036400"
  },
  {
    "text": "proxy in order to talk to some other part of the kubernetes api",
    "start": "1036400",
    "end": "1042000"
  },
  {
    "text": "so front proxy authentication looks like this the user uses mutual tls or some other",
    "start": "1042000",
    "end": "1048880"
  },
  {
    "text": "method to communicate with a proxy server the api server trusts then that proxy server communicates with",
    "start": "1048880",
    "end": "1056160"
  },
  {
    "text": "the api server and passes special http headers specifying the user on whose behalf it's working",
    "start": "1056160",
    "end": "1064880"
  },
  {
    "text": "the aggregation layer to an extension api server looks very similar because it's actually",
    "start": "1064880",
    "end": "1070880"
  },
  {
    "text": "the same workflow except that the api server itself is the proxy",
    "start": "1070880",
    "end": "1076240"
  },
  {
    "text": "in front of the extension api server so like for example if you're using the",
    "start": "1076240",
    "end": "1082080"
  },
  {
    "text": "metric server that supports horizontal pod auto scaler and coupe ctl top this is how this is how it works your",
    "start": "1082080",
    "end": "1089120"
  },
  {
    "text": "user talks to the api server and the api server communicates with the extension api server metric server by",
    "start": "1089120",
    "end": "1095679"
  },
  {
    "text": "using request header off so how this attack is going to work it",
    "start": "1095679",
    "end": "1101600"
  },
  {
    "text": "depends on a little bit of setup so the in this case in this cluster",
    "start": "1101600",
    "end": "1106720"
  },
  {
    "text": "the aggregation layer trusts the same ca as the main kubernetes api server and",
    "start": "1106720",
    "end": "1113360"
  },
  {
    "text": "the command line argument request header allowed names is missing on the api server so this",
    "start": "1113360",
    "end": "1120160"
  },
  {
    "text": "means that right now in this cluster any kubernetes client cert",
    "start": "1120160",
    "end": "1125360"
  },
  {
    "text": "can pass the appropriate http headers to enable front proxy authentication so",
    "start": "1125360",
    "end": "1132720"
  },
  {
    "text": "that's what we're going to do we'll submit our kubernetes user cert to the api server including the appropriate headers which",
    "start": "1132720",
    "end": "1139600"
  },
  {
    "text": "will allow us to authenticate as anyone and become cluster admin",
    "start": "1139600",
    "end": "1145279"
  },
  {
    "text": "to be able to communicate directly with the api server from this shell first i need to find",
    "start": "1146400",
    "end": "1153840"
  },
  {
    "text": "what port number my kind cluster is running the api server on so we'll do that and now",
    "start": "1153840",
    "end": "1160720"
  },
  {
    "text": "i'm going to just use my kubernetes client sir to try to get all the secrets from the coop system namespace",
    "start": "1160720",
    "end": "1166880"
  },
  {
    "text": "and of course it smacks my hand for that tabby can't list secrets in coop system namespace because",
    "start": "1166880",
    "end": "1173440"
  },
  {
    "text": "that's not allowed i'm not a cluster administrator but that's fine",
    "start": "1173440",
    "end": "1178559"
  },
  {
    "text": "because i know that this cluster is misconfigured or i'm willing to try it and find out if this cluster is",
    "start": "1178559",
    "end": "1184240"
  },
  {
    "text": "misconfigured so now i'm doing the same curl call to the api server",
    "start": "1184240",
    "end": "1189919"
  },
  {
    "text": "but i'm saying by the way i'm a proxy server and i'm communicating with you on behalf",
    "start": "1189919",
    "end": "1196240"
  },
  {
    "text": "of this goose that is honking around in your system administrators group can i please have those coop system",
    "start": "1196240",
    "end": "1202640"
  },
  {
    "text": "secrets for a goose like you anything",
    "start": "1202640",
    "end": "1208720"
  },
  {
    "text": "what can we do to mitigate this it's important to use a separate pki",
    "start": "1212480",
    "end": "1217840"
  },
  {
    "text": "for the request header auth options with very strict access controls on it",
    "start": "1217840",
    "end": "1222960"
  },
  {
    "text": "because this pki is more powerful than the usual one also when you're configuring this make",
    "start": "1222960",
    "end": "1229840"
  },
  {
    "text": "sure to pass all of the relevant arguments to the api server look it up in the documentation",
    "start": "1229840",
    "end": "1236080"
  },
  {
    "text": "alternately you can pass no request header arguments at all this will cause the",
    "start": "1236080",
    "end": "1242210"
  },
  {
    "text": "[Music] the front proxy and extension api server",
    "start": "1242210",
    "end": "1247840"
  },
  {
    "text": "feature to be unconfigured the downside of doing this is that extension api servers can't use an auto",
    "start": "1247840",
    "end": "1255919"
  },
  {
    "text": "discovery feature to learn how to configure themselves you will have to pass command line arguments to them in order to tell them",
    "start": "1255919",
    "end": "1263200"
  },
  {
    "text": "how to be configured to accept connections from the api server so that would be adopting an unusual",
    "start": "1263200",
    "end": "1270159"
  },
  {
    "text": "configuration but if you're willing to if you're willing to research which extension api servers",
    "start": "1270159",
    "end": "1276640"
  },
  {
    "text": "you're using and how to configure them that way it can reduce your need for having",
    "start": "1276640",
    "end": "1281760"
  },
  {
    "text": "separate pkis and help to harden your configuration against these sorts of errors",
    "start": "1281760",
    "end": "1288400"
  },
  {
    "text": "a uh another demo that we can do here has to do with inappropriate trusting of chained pkis",
    "start": "1289440",
    "end": "1297200"
  },
  {
    "text": "so earlier i said that a certifying authority can sign another certifying authority",
    "start": "1297200",
    "end": "1302400"
  },
  {
    "text": "this is a diagram of the cas that are currently in the vault cluster",
    "start": "1302400",
    "end": "1308559"
  },
  {
    "text": "that's set up for our demo there is one root ca which has signed an intermediate ca and",
    "start": "1308559",
    "end": "1315520"
  },
  {
    "text": "that intermediate ca has signed five other cas for use by",
    "start": "1315520",
    "end": "1321080"
  },
  {
    "text": "example.net the front proxy feature of the api server the fcd the api server itself",
    "start": "1321080",
    "end": "1329200"
  },
  {
    "text": "and another non-production kubernetes cluster but when those certificates have been",
    "start": "1329200",
    "end": "1336799"
  },
  {
    "text": "loaded into the cluster for the mutual tls client trust",
    "start": "1336799",
    "end": "1342880"
  },
  {
    "text": "the root certificate is the one that has been loaded in as being trusted and so let's see some",
    "start": "1342880",
    "end": "1349520"
  },
  {
    "text": "of the things that can happen when you trust too much of your pki tree",
    "start": "1349520",
    "end": "1355520"
  },
  {
    "text": "for example if the root ca is in the client ca file argument to etcd",
    "start": "1355520",
    "end": "1361360"
  },
  {
    "text": "then every certificate issued anywhere in the pki tree is trusted by etcd",
    "start": "1361360",
    "end": "1369440"
  },
  {
    "text": "um we will uh we'll be able to send any certificate we want such as an",
    "start": "1369440",
    "end": "1375919"
  },
  {
    "text": "application certificate in and we'll be able to",
    "start": "1375919",
    "end": "1381440"
  },
  {
    "text": "access etcd so let's go ahead and do",
    "start": "1381440",
    "end": "1386158"
  },
  {
    "text": "that",
    "start": "1386840",
    "end": "1389840"
  },
  {
    "text": "first we'll hop back into our web server pod here and review what the web server config",
    "start": "1394480",
    "end": "1403120"
  },
  {
    "text": "looks like and we'll paste in one of these curl",
    "start": "1403120",
    "end": "1411039"
  },
  {
    "text": "calls that talks to etcd so the web server certificate is here in webserver.pem",
    "start": "1411039",
    "end": "1418320"
  },
  {
    "text": "but because it's signed by the example.net pki which is a grandchild of the root ca",
    "start": "1418320",
    "end": "1425760"
  },
  {
    "text": "trusted by etcd i can take my web server cert",
    "start": "1425760",
    "end": "1431039"
  },
  {
    "text": "and send it to etcd say give me all the kube system secrets and it says i'm happy to oblige",
    "start": "1431039",
    "end": "1439440"
  },
  {
    "text": "um let's do another one of these",
    "start": "1439440",
    "end": "1444799"
  },
  {
    "text": "let's do another one of these hacks so if the root ca is in the client ca file",
    "start": "1444799",
    "end": "1451760"
  },
  {
    "text": "argument of the api server then we can have cross cluster access so",
    "start": "1451760",
    "end": "1460320"
  },
  {
    "text": "here's a coupe config for my kubernetes client",
    "start": "1460320",
    "end": "1466640"
  },
  {
    "text": "here is another coupe config for being a goose that is cluster admin of the",
    "start": "1466640",
    "end": "1472640"
  },
  {
    "text": "non-prod cluster notice the issuer is different between these two certificates in these two",
    "start": "1472640",
    "end": "1478080"
  },
  {
    "text": "coupe configs but because the api server is trusting the root ca and not the leaf",
    "start": "1478080",
    "end": "1486159"
  },
  {
    "text": "ca we can probably do some inappropriate access",
    "start": "1486159",
    "end": "1491679"
  },
  {
    "text": "anyway so we'll specify the non-prod kubernetes admin coop config",
    "start": "1491679",
    "end": "1498400"
  },
  {
    "text": "to coupe ctl get secrets into our production cluster and of course it",
    "start": "1498400",
    "end": "1504559"
  },
  {
    "text": "gives them to us because it doesn't know any better",
    "start": "1504559",
    "end": "1509840"
  },
  {
    "text": "another hack that we can do here is similar but it combines that trust",
    "start": "1510159",
    "end": "1517039"
  },
  {
    "text": "with the request header allowed names or a ca that allows issuing search for any name",
    "start": "1517039",
    "end": "1523760"
  },
  {
    "text": "in that case we can submit our application certificate like from a web server",
    "start": "1523760",
    "end": "1528799"
  },
  {
    "text": "directly to the api server our web server cert won't have the appropriate",
    "start": "1528799",
    "end": "1533840"
  },
  {
    "text": "u equals o equals in the in the certificate subject but",
    "start": "1533840",
    "end": "1540960"
  },
  {
    "text": "with request header allowed names that doesn't matter if we pass in the appropriate http headers",
    "start": "1540960",
    "end": "1547039"
  },
  {
    "text": "or if the ca allows signing assert with any name we can go and sign a cert with the",
    "start": "1547039",
    "end": "1552240"
  },
  {
    "text": "appropriate name and pass it in so let's go ahead and do that",
    "start": "1552240",
    "end": "1558399"
  },
  {
    "text": "again we'll need to get into our web server and let's take a quick look at the web",
    "start": "1558799",
    "end": "1566400"
  },
  {
    "text": "servers certificate we try and pass it into the api server and it the api server is",
    "start": "1566400",
    "end": "1574880"
  },
  {
    "text": "not having it the user www.example.net can't access secrets of course not www.example.net",
    "start": "1574880",
    "end": "1582880"
  },
  {
    "text": "isn't even a kubernetes user this is this is not right but even this is showing us something scary",
    "start": "1582880",
    "end": "1589679"
  },
  {
    "text": "the fact that we got permission denied here proves that the api server trusted our certificate and it",
    "start": "1589679",
    "end": "1597760"
  },
  {
    "text": "believes that we really are www.example.net this is because it's misconfigured to",
    "start": "1597760",
    "end": "1603679"
  },
  {
    "text": "trust the root ca so because this cluster is",
    "start": "1603679",
    "end": "1609200"
  },
  {
    "text": "also poorly configured with missing request header allowed names option",
    "start": "1609200",
    "end": "1614480"
  },
  {
    "text": "we can pass in the appropriate http headers to say",
    "start": "1614480",
    "end": "1621440"
  },
  {
    "text": "we're a system admin goose you should give us those secrets and of course it is obliged to do so",
    "start": "1621440",
    "end": "1630240"
  },
  {
    "text": "so what can we do to mitigate all of these kind of problems the number one thing that we can do to",
    "start": "1632320",
    "end": "1639120"
  },
  {
    "text": "save ourselves from this issue is use standalone certifying authorities",
    "start": "1639120",
    "end": "1644480"
  },
  {
    "text": "the chaining really has very little benefit in a kubernetes context",
    "start": "1644480",
    "end": "1649679"
  },
  {
    "text": "and leaves you open to making these sorts of mistakes so just don't do it use standalone cas",
    "start": "1649679",
    "end": "1657360"
  },
  {
    "text": "and then you can't make this mistake in the first place if for some reason you feel that you",
    "start": "1657360",
    "end": "1662880"
  },
  {
    "text": "must use change cas be very careful to only trust the leaf ca so like in this case",
    "start": "1662880",
    "end": "1670720"
  },
  {
    "text": "for the cube api server client ca file argument we would pass in",
    "start": "1670720",
    "end": "1677120"
  },
  {
    "text": "this ca that's circled in green here on the diagram not the root ca like what we did",
    "start": "1677120",
    "end": "1684480"
  },
  {
    "text": "other mitigations are also possible make sure that you have tight permissions on all of your cas",
    "start": "1684480",
    "end": "1690640"
  },
  {
    "text": "because going back to the beginning of the presentation your cas access control",
    "start": "1690640",
    "end": "1696320"
  },
  {
    "text": "is a gate to your kubernetes access control while you're configuring those ca permissions set client off and server",
    "start": "1696320",
    "end": "1703919"
  },
  {
    "text": "auth flags specifically on the certificates that need them in the case of the",
    "start": "1703919",
    "end": "1709200"
  },
  {
    "text": "web server cert being used to access the api server if the ca had removed the client auth",
    "start": "1709200",
    "end": "1716320"
  },
  {
    "text": "flag from that web server cert it wouldn't have worked even though the other misconfigurations were present",
    "start": "1716320",
    "end": "1722640"
  },
  {
    "text": "and again if you wish to you can enable fcd authentication which would make",
    "start": "1722640",
    "end": "1728320"
  },
  {
    "text": "doing some of these exploits harder to wrap this up",
    "start": "1728320",
    "end": "1733760"
  },
  {
    "text": "pki is really complex the configuration is complex there are many different command line options but all",
    "start": "1733760",
    "end": "1740720"
  },
  {
    "text": "of those details matter in nearly every case if you misconfigure something",
    "start": "1740720",
    "end": "1746159"
  },
  {
    "text": "it creates some kind of opportunity to do something inappropriate so you need to look at it creatively",
    "start": "1746159",
    "end": "1752399"
  },
  {
    "text": "because these particular hacks are just fun examples that i cooked up for us to share",
    "start": "1752399",
    "end": "1757520"
  },
  {
    "text": "there are certainly other ways in which pki misconfigurations could be exploited in kubernetes the",
    "start": "1757520",
    "end": "1764799"
  },
  {
    "text": "take home message here is really use three separate certifying authorities per cluster",
    "start": "1764799",
    "end": "1770799"
  },
  {
    "text": "and make them stand alone and if you're unable to follow those rules that keep your life",
    "start": "1770799",
    "end": "1777200"
  },
  {
    "text": "simpler be very careful that you understand every option you're choosing",
    "start": "1777200",
    "end": "1782799"
  },
  {
    "text": "thank you so much for spending this time with me it's been it's been a lot of fun to",
    "start": "1782799",
    "end": "1789200"
  },
  {
    "text": "to honk at this cluster with you and share you know the the things that i've learned about some other ways that tls",
    "start": "1789200",
    "end": "1796480"
  },
  {
    "text": "can go wrong if you think that this kind of thing is interesting note that we are hiring like datadog is looking",
    "start": "1796480",
    "end": "1803919"
  },
  {
    "text": "for both security and operations people across all parts of the organization you can",
    "start": "1803919",
    "end": "1810480"
  },
  {
    "text": "talk to me online i'm on kubernetes slack i'm on twitter can send me email and if",
    "start": "1810480",
    "end": "1815840"
  },
  {
    "text": "you want to play along with some of these exploits you can go to my github and you can download the setup script and the demo",
    "start": "1815840",
    "end": "1822640"
  },
  {
    "text": "notes that were used to do this demo so again thanks a lot and go have fun with your",
    "start": "1822640",
    "end": "1829039"
  },
  {
    "text": "clusters",
    "start": "1829039",
    "end": "1831840"
  }
]