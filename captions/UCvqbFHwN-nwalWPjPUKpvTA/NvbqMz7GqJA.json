[
  {
    "text": "oh thank you for joining this session my",
    "start": "1560",
    "end": "4319"
  },
  {
    "text": "name is rohini gankar and I'm a senior",
    "start": "4319",
    "end": "6779"
  },
  {
    "text": "developer Advocate at AWS today we are",
    "start": "6779",
    "end": "9960"
  },
  {
    "text": "talking about Carpenter an open source",
    "start": "9960",
    "end": "12240"
  },
  {
    "text": "kubernetes cluster Auto scalar if you",
    "start": "12240",
    "end": "14759"
  },
  {
    "text": "have more questions feel free to reach",
    "start": "14759",
    "end": "16740"
  },
  {
    "text": "out to me via LinkedIn on the given",
    "start": "16740",
    "end": "18900"
  },
  {
    "text": "website so let's quickly look at",
    "start": "18900",
    "end": "21119"
  },
  {
    "text": "different ways we can do kubernetes",
    "start": "21119",
    "end": "22980"
  },
  {
    "text": "scaling remember the goal here is to",
    "start": "22980",
    "end": "26640"
  },
  {
    "text": "efficiently use the infrastructure have",
    "start": "26640",
    "end": "29279"
  },
  {
    "text": "less V stage and save cost and ensure a",
    "start": "29279",
    "end": "33059"
  },
  {
    "text": "more highly available application so",
    "start": "33059",
    "end": "35579"
  },
  {
    "text": "there are three main concerts and let's",
    "start": "35579",
    "end": "37559"
  },
  {
    "text": "look at each of them",
    "start": "37559",
    "end": "39480"
  },
  {
    "text": "in the horizontal pod order scaling or",
    "start": "39480",
    "end": "42540"
  },
  {
    "text": "HPA you scale or add more number of PODS",
    "start": "42540",
    "end": "45899"
  },
  {
    "text": "based on the resource metrics so it is",
    "start": "45899",
    "end": "49020"
  },
  {
    "text": "forward level scaling you simply start",
    "start": "49020",
    "end": "51780"
  },
  {
    "text": "adding more and more number of Parts as",
    "start": "51780",
    "end": "54360"
  },
  {
    "text": "your demand increases and if your demand",
    "start": "54360",
    "end": "56640"
  },
  {
    "text": "decreases you simply automatically stop",
    "start": "56640",
    "end": "59520"
  },
  {
    "text": "the pods to free the resources so you",
    "start": "59520",
    "end": "62219"
  },
  {
    "text": "scale out and scale in as your as per",
    "start": "62219",
    "end": "65338"
  },
  {
    "text": "your need",
    "start": "65339",
    "end": "66720"
  },
  {
    "text": "with vertical scaling as it suggests",
    "start": "66720",
    "end": "69479"
  },
  {
    "text": "adding capacity to the same resource so",
    "start": "69479",
    "end": "72720"
  },
  {
    "text": "the kubernetes vpa automatically adjusts",
    "start": "72720",
    "end": "75299"
  },
  {
    "text": "the CPU and memory reservation for your",
    "start": "75299",
    "end": "78299"
  },
  {
    "text": "pods to help right size your",
    "start": "78299",
    "end": "80159"
  },
  {
    "text": "applications",
    "start": "80159",
    "end": "81299"
  },
  {
    "text": "and finally the kubernetes cluster order",
    "start": "81299",
    "end": "84180"
  },
  {
    "text": "scaler which is a popular cluster order",
    "start": "84180",
    "end": "86400"
  },
  {
    "text": "scaling solution maintained by Sig Auto",
    "start": "86400",
    "end": "88500"
  },
  {
    "text": "scaling",
    "start": "88500",
    "end": "89700"
  },
  {
    "text": "it automatically adjusts the number of",
    "start": "89700",
    "end": "92159"
  },
  {
    "text": "nodes in your cluster so when your pods",
    "start": "92159",
    "end": "94979"
  },
  {
    "text": "fail or are rescheduled onto other nodes",
    "start": "94979",
    "end": "98939"
  },
  {
    "text": "it is responsible for ensuring that your",
    "start": "98939",
    "end": "101460"
  },
  {
    "text": "cluster has enough nodes to schedule",
    "start": "101460",
    "end": "103740"
  },
  {
    "text": "your pods without wasting resources",
    "start": "103740",
    "end": "106860"
  },
  {
    "text": "so it watches for pods that I failed to",
    "start": "106860",
    "end": "109560"
  },
  {
    "text": "schedule and for nodes that are",
    "start": "109560",
    "end": "111840"
  },
  {
    "text": "underutilized and it then simulates the",
    "start": "111840",
    "end": "114659"
  },
  {
    "text": "addition or removal of nodes before",
    "start": "114659",
    "end": "117119"
  },
  {
    "text": "applying the change to your cluster",
    "start": "117119",
    "end": "119820"
  },
  {
    "text": "now the AWS cloud provider",
    "start": "119820",
    "end": "122280"
  },
  {
    "text": "implementation within the cluster order",
    "start": "122280",
    "end": "124320"
  },
  {
    "text": "scalar controls the desired replicas",
    "start": "124320",
    "end": "127500"
  },
  {
    "text": "field of the ec2 order scaling group",
    "start": "127500",
    "end": "130860"
  },
  {
    "text": "easy to order scaling group is a feature",
    "start": "130860",
    "end": "133020"
  },
  {
    "text": "of AWS that's used by cluster Auto",
    "start": "133020",
    "end": "135420"
  },
  {
    "text": "scaling",
    "start": "135420",
    "end": "137959"
  },
  {
    "text": "order scalar works with HPA so the",
    "start": "138780",
    "end": "142500"
  },
  {
    "text": "horizontal pod or the scalar changes the",
    "start": "142500",
    "end": "145020"
  },
  {
    "text": "deployments or the applications number",
    "start": "145020",
    "end": "147120"
  },
  {
    "text": "of replica based on the current let's",
    "start": "147120",
    "end": "149940"
  },
  {
    "text": "say CPU workload",
    "start": "149940",
    "end": "151800"
  },
  {
    "text": "if the CPU load increases HPA will",
    "start": "151800",
    "end": "155280"
  },
  {
    "text": "create new replicas for which there may",
    "start": "155280",
    "end": "158580"
  },
  {
    "text": "or may not have enough space in your",
    "start": "158580",
    "end": "160800"
  },
  {
    "text": "cluster",
    "start": "160800",
    "end": "161760"
  },
  {
    "text": "so if there are not enough resources",
    "start": "161760",
    "end": "164160"
  },
  {
    "text": "cluster Auto scalar will bring up some",
    "start": "164160",
    "end": "166800"
  },
  {
    "text": "of these nodes",
    "start": "166800",
    "end": "168720"
  },
  {
    "text": "so that the HPA created pulse will have",
    "start": "168720",
    "end": "171540"
  },
  {
    "text": "a place to run",
    "start": "171540",
    "end": "173819"
  },
  {
    "text": "now if the load decreases HPA will stop",
    "start": "173819",
    "end": "177060"
  },
  {
    "text": "these some of these replicas which will",
    "start": "177060",
    "end": "180239"
  },
  {
    "text": "result in some nodes may be",
    "start": "180239",
    "end": "181739"
  },
  {
    "text": "underutilized or even empty and that's",
    "start": "181739",
    "end": "184440"
  },
  {
    "text": "when cluster Auto scalar will actually",
    "start": "184440",
    "end": "186239"
  },
  {
    "text": "terminate these unneeded nodes",
    "start": "186239",
    "end": "189239"
  },
  {
    "text": "so as I just saw cluster order scalar",
    "start": "189239",
    "end": "192659"
  },
  {
    "text": "relies on the concept of node groups and",
    "start": "192659",
    "end": "195480"
  },
  {
    "text": "ec2 auto scaling groups to manage the",
    "start": "195480",
    "end": "198180"
  },
  {
    "text": "cluster capacity",
    "start": "198180",
    "end": "199860"
  },
  {
    "text": "now cluster Auto scaler here assumes",
    "start": "199860",
    "end": "202500"
  },
  {
    "text": "that the instance types are all",
    "start": "202500",
    "end": "204540"
  },
  {
    "text": "identical in a given group so if you",
    "start": "204540",
    "end": "207300"
  },
  {
    "text": "want to use a node group with let's say",
    "start": "207300",
    "end": "209459"
  },
  {
    "text": "mixed instance types you need to make",
    "start": "209459",
    "end": "212340"
  },
  {
    "text": "sure that each type has roughly the same",
    "start": "212340",
    "end": "215640"
  },
  {
    "text": "amount of CPU and memory resources",
    "start": "215640",
    "end": "217980"
  },
  {
    "text": "otherwise resources might be wasted or",
    "start": "217980",
    "end": "221220"
  },
  {
    "text": "insufficient during a scale up",
    "start": "221220",
    "end": "224459"
  },
  {
    "text": "to support different instance types you",
    "start": "224459",
    "end": "226920"
  },
  {
    "text": "need multiple node curves also as I",
    "start": "226920",
    "end": "229980"
  },
  {
    "text": "mentioned it's recommended that each",
    "start": "229980",
    "end": "232319"
  },
  {
    "text": "node group span only one availability",
    "start": "232319",
    "end": "234720"
  },
  {
    "text": "zone so to make sure that if you want",
    "start": "234720",
    "end": "237599"
  },
  {
    "text": "your workload to span across multiple",
    "start": "237599",
    "end": "239400"
  },
  {
    "text": "availability zones for high availability",
    "start": "239400",
    "end": "241019"
  },
  {
    "text": "you need a node group for instance type",
    "start": "241019",
    "end": "244440"
  },
  {
    "text": "for availability Zone",
    "start": "244440",
    "end": "246959"
  },
  {
    "text": "well cluster Auto scale was not",
    "start": "246959",
    "end": "249180"
  },
  {
    "text": "originally built with the flexibility to",
    "start": "249180",
    "end": "251159"
  },
  {
    "text": "handle hundreds of instance types across",
    "start": "251159",
    "end": "253860"
  },
  {
    "text": "multiple availability zones it loads the",
    "start": "253860",
    "end": "256799"
  },
  {
    "text": "entire cluster State into memory the",
    "start": "256799",
    "end": "259320"
  },
  {
    "text": "nodes then paths and the node groups",
    "start": "259320",
    "end": "261479"
  },
  {
    "text": "identifies unscheduled paths in the",
    "start": "261479",
    "end": "264120"
  },
  {
    "text": "cluster and simulates the scheduling for",
    "start": "264120",
    "end": "266520"
  },
  {
    "text": "each node group",
    "start": "266520",
    "end": "267840"
  },
  {
    "text": "so when you have lots of node groups",
    "start": "267840",
    "end": "269880"
  },
  {
    "text": "this gets very complicated",
    "start": "269880",
    "end": "272699"
  },
  {
    "text": "and when Granite scale it often takes up",
    "start": "272699",
    "end": "275160"
  },
  {
    "text": "to five minutes to actually scale Your",
    "start": "275160",
    "end": "277320"
  },
  {
    "text": "Capacity in your cluster",
    "start": "277320",
    "end": "279120"
  },
  {
    "text": "this can have significant impact in use",
    "start": "279120",
    "end": "282120"
  },
  {
    "text": "cases where the speed of capacity",
    "start": "282120",
    "end": "284280"
  },
  {
    "text": "scaling is very critical",
    "start": "284280",
    "end": "286860"
  },
  {
    "text": "it could also have a real customer",
    "start": "286860",
    "end": "289259"
  },
  {
    "text": "impact as customers are not able to meet",
    "start": "289259",
    "end": "292199"
  },
  {
    "text": "the commitments of their end users",
    "start": "292199",
    "end": "295860"
  },
  {
    "text": "so it's hard to get the high cluster",
    "start": "295860",
    "end": "298620"
  },
  {
    "text": "utilization and efficiency of operations",
    "start": "298620",
    "end": "301919"
  },
  {
    "text": "customers of AWS I have over provisioned",
    "start": "301919",
    "end": "305340"
  },
  {
    "text": "resources to ensure that a consistent",
    "start": "305340",
    "end": "308400"
  },
  {
    "text": "end user experience I've seen our",
    "start": "308400",
    "end": "311460"
  },
  {
    "text": "customers over provisioned their",
    "start": "311460",
    "end": "313199"
  },
  {
    "text": "infrastructure by 20 to 25 percent in",
    "start": "313199",
    "end": "315660"
  },
  {
    "text": "some cases",
    "start": "315660",
    "end": "316860"
  },
  {
    "text": "and then there are some use cases like",
    "start": "316860",
    "end": "319440"
  },
  {
    "text": "machine learning or batch workloads but",
    "start": "319440",
    "end": "322380"
  },
  {
    "text": "I need to quickly experiment something",
    "start": "322380",
    "end": "324600"
  },
  {
    "text": "so instead of having sorry so instead of",
    "start": "324600",
    "end": "327539"
  },
  {
    "text": "having to get a node group configured",
    "start": "327539",
    "end": "330539"
  },
  {
    "text": "then get other resources which actually",
    "start": "330539",
    "end": "333720"
  },
  {
    "text": "slows down the pace of innovation",
    "start": "333720",
    "end": "336419"
  },
  {
    "text": "and that's where we need Carpenter",
    "start": "336419",
    "end": "339360"
  },
  {
    "text": "Carpenter is an open source flexible",
    "start": "339360",
    "end": "341820"
  },
  {
    "text": "high performance kubernetes cluster Auto",
    "start": "341820",
    "end": "344820"
  },
  {
    "text": "scaler that helps improve your",
    "start": "344820",
    "end": "346979"
  },
  {
    "text": "application's ability and cluster",
    "start": "346979",
    "end": "348900"
  },
  {
    "text": "efficiency",
    "start": "348900",
    "end": "350039"
  },
  {
    "text": "it launches the right sized computer",
    "start": "350039",
    "end": "352380"
  },
  {
    "text": "sources for example in our case Amazon",
    "start": "352380",
    "end": "354840"
  },
  {
    "text": "ec2 instances in response to changing",
    "start": "354840",
    "end": "358139"
  },
  {
    "text": "application load in under a minute",
    "start": "358139",
    "end": "361919"
  },
  {
    "text": "through integrating kubernetes with AWS",
    "start": "361919",
    "end": "365220"
  },
  {
    "text": "copy token provision just in time",
    "start": "365220",
    "end": "367680"
  },
  {
    "text": "computer sources that precisely meet",
    "start": "367680",
    "end": "370560"
  },
  {
    "text": "your the requirements of your workload",
    "start": "370560",
    "end": "373620"
  },
  {
    "text": "what's that asterisks well AWS is the",
    "start": "373620",
    "end": "377220"
  },
  {
    "text": "first cloud provider supported by",
    "start": "377220",
    "end": "378900"
  },
  {
    "text": "Carpenter although it is designed to be",
    "start": "378900",
    "end": "381600"
  },
  {
    "text": "vendor neutral",
    "start": "381600",
    "end": "383660"
  },
  {
    "text": "Carpenter Works in tandem with",
    "start": "383660",
    "end": "386280"
  },
  {
    "text": "kubernetes scheduler by observing the",
    "start": "386280",
    "end": "388979"
  },
  {
    "text": "incoming pods over the lifetime of your",
    "start": "388979",
    "end": "391259"
  },
  {
    "text": "cluster",
    "start": "391259",
    "end": "392220"
  },
  {
    "text": "so it will launch or terminate your",
    "start": "392220",
    "end": "394860"
  },
  {
    "text": "notes to maximize your application",
    "start": "394860",
    "end": "397020"
  },
  {
    "text": "availability and cluster utilization",
    "start": "397020",
    "end": "400080"
  },
  {
    "text": "when there is enough capacity in the",
    "start": "400080",
    "end": "402000"
  },
  {
    "text": "cluster the kubernetes scheduler will",
    "start": "402000",
    "end": "404580"
  },
  {
    "text": "place the incoming Parts as usual",
    "start": "404580",
    "end": "407460"
  },
  {
    "text": "when ports are launched and they cannot",
    "start": "407460",
    "end": "409860"
  },
  {
    "text": "be scheduled using the existing capacity",
    "start": "409860",
    "end": "412259"
  },
  {
    "text": "of yours cluster Carpenter will actually",
    "start": "412259",
    "end": "415199"
  },
  {
    "text": "bypass the kubernetes scheduler and work",
    "start": "415199",
    "end": "417840"
  },
  {
    "text": "directly with your provider's compute",
    "start": "417840",
    "end": "419880"
  },
  {
    "text": "service for example Amazon ec2 instead",
    "start": "419880",
    "end": "422940"
  },
  {
    "text": "of Auto scaling groups in cluster Auto",
    "start": "422940",
    "end": "425639"
  },
  {
    "text": "scalar so to launch the minimal compute",
    "start": "425639",
    "end": "429180"
  },
  {
    "text": "resources that are needed to fit those",
    "start": "429180",
    "end": "431819"
  },
  {
    "text": "pending pods and binds those ports to",
    "start": "431819",
    "end": "434940"
  },
  {
    "text": "the nodes that it provisioned so as the",
    "start": "434940",
    "end": "437699"
  },
  {
    "text": "pods are removed or rescheduled to other",
    "start": "437699",
    "end": "440099"
  },
  {
    "text": "nodes Carpenter looks for opportunities",
    "start": "440099",
    "end": "442319"
  },
  {
    "text": "to terminate the underutilized nodes as",
    "start": "442319",
    "end": "444900"
  },
  {
    "text": "well",
    "start": "444900",
    "end": "445800"
  },
  {
    "text": "running fewer larger nodes in your",
    "start": "445800",
    "end": "449280"
  },
  {
    "text": "cluster reduces the overhead for demon",
    "start": "449280",
    "end": "452160"
  },
  {
    "text": "sets and component is system components",
    "start": "452160",
    "end": "455400"
  },
  {
    "text": "and provides more opportunities for",
    "start": "455400",
    "end": "457680"
  },
  {
    "text": "efficient wind packing",
    "start": "457680",
    "end": "459720"
  },
  {
    "text": "the central Concept in Carpenter is",
    "start": "459720",
    "end": "462900"
  },
  {
    "text": "provisional so we do this using the",
    "start": "462900",
    "end": "466380"
  },
  {
    "text": "kubernetes custom resources this is a",
    "start": "466380",
    "end": "469080"
  },
  {
    "text": "kind of modern way or standard way to",
    "start": "469080",
    "end": "472139"
  },
  {
    "text": "write controllers",
    "start": "472139",
    "end": "473639"
  },
  {
    "text": "so a provisioner is how you define how",
    "start": "473639",
    "end": "476280"
  },
  {
    "text": "Carpenter will manage the unshadable",
    "start": "476280",
    "end": "478919"
  },
  {
    "text": "parts and the expired notes",
    "start": "478919",
    "end": "481979"
  },
  {
    "text": "the provisioner comes with some smart",
    "start": "481979",
    "end": "484020"
  },
  {
    "text": "defaults but these are fully",
    "start": "484020",
    "end": "486060"
  },
  {
    "text": "configurable and these default include",
    "start": "486060",
    "end": "488699"
  },
  {
    "text": "the configuration of the instance type",
    "start": "488699",
    "end": "490979"
  },
  {
    "text": "selection the launch template generation",
    "start": "490979",
    "end": "493319"
  },
  {
    "text": "the subnet security groups",
    "start": "493319",
    "end": "495720"
  },
  {
    "text": "etc etc",
    "start": "495720",
    "end": "497280"
  },
  {
    "text": "so you could think of two Persona okay",
    "start": "497280",
    "end": "499560"
  },
  {
    "text": "there's an administrator and there's an",
    "start": "499560",
    "end": "501419"
  },
  {
    "text": "application developer it is expected",
    "start": "501419",
    "end": "503940"
  },
  {
    "text": "that a cluster administrator would",
    "start": "503940",
    "end": "505919"
  },
  {
    "text": "install and update Carpenter Define the",
    "start": "505919",
    "end": "508979"
  },
  {
    "text": "provisioners to segment the",
    "start": "508979",
    "end": "510840"
  },
  {
    "text": "infrastructure space as needed so they",
    "start": "510840",
    "end": "513120"
  },
  {
    "text": "can Define the provisionals based on",
    "start": "513120",
    "end": "514620"
  },
  {
    "text": "purchase options the capacity type the",
    "start": "514620",
    "end": "516899"
  },
  {
    "text": "instance type the availability zones Etc",
    "start": "516899",
    "end": "519300"
  },
  {
    "text": "and the application developer who is",
    "start": "519300",
    "end": "522300"
  },
  {
    "text": "actually deploying these pods my",
    "start": "522300",
    "end": "525680"
  },
  {
    "text": "which might be evaluated by Carpenter",
    "start": "525680",
    "end": "528920"
  },
  {
    "text": "they write the Pod manifest so as long",
    "start": "528920",
    "end": "533339"
  },
  {
    "text": "as the requests are not outside of the",
    "start": "533339",
    "end": "535980"
  },
  {
    "text": "provisioner's constraints Carpenter will",
    "start": "535980",
    "end": "538500"
  },
  {
    "text": "look for the best match the request",
    "start": "538500",
    "end": "541399"
  },
  {
    "text": "comparing the same well-known labels of",
    "start": "541399",
    "end": "544080"
  },
  {
    "text": "kubernetes defined by the Pod scheduling",
    "start": "544080",
    "end": "546959"
  },
  {
    "text": "constraints",
    "start": "546959",
    "end": "548160"
  },
  {
    "text": "note if the constraints are such that a",
    "start": "548160",
    "end": "551399"
  },
  {
    "text": "match is not possible the Pod will",
    "start": "551399",
    "end": "554220"
  },
  {
    "text": "remain unscheduled",
    "start": "554220",
    "end": "555660"
  },
  {
    "text": "kubernetes features that Carpenter",
    "start": "555660",
    "end": "558120"
  },
  {
    "text": "supports for scheduling Parts include",
    "start": "558120",
    "end": "560220"
  },
  {
    "text": "the node Affinity the node selector it",
    "start": "560220",
    "end": "563100"
  },
  {
    "text": "also supports for disruption budgets",
    "start": "563100",
    "end": "565080"
  },
  {
    "text": "topology spread constraints interpod",
    "start": "565080",
    "end": "567839"
  },
  {
    "text": "affinity and anti-affinity as well",
    "start": "567839",
    "end": "570959"
  },
  {
    "text": "so let's quickly look at our demo and",
    "start": "570959",
    "end": "575399"
  },
  {
    "text": "this demo I have already set up a",
    "start": "575399",
    "end": "577140"
  },
  {
    "text": "kubernetes cluster uh it also has",
    "start": "577140",
    "end": "579720"
  },
  {
    "text": "Carpenter installed you can find all the",
    "start": "579720",
    "end": "581640"
  },
  {
    "text": "steps in the carpenter documentation",
    "start": "581640",
    "end": "583680"
  },
  {
    "text": "I'll provide the link towards the end of",
    "start": "583680",
    "end": "586140"
  },
  {
    "text": "this presentation okay I've already set",
    "start": "586140",
    "end": "588420"
  },
  {
    "text": "that up uh I've also defined a default",
    "start": "588420",
    "end": "591480"
  },
  {
    "text": "provisioner so this is something your",
    "start": "591480",
    "end": "593360"
  },
  {
    "text": "administrator could do so they have",
    "start": "593360",
    "end": "595200"
  },
  {
    "text": "defined a default provisioner and in",
    "start": "595200",
    "end": "597420"
  },
  {
    "text": "there I've mentioned that any capacity",
    "start": "597420",
    "end": "599220"
  },
  {
    "text": "that you launch should be a spot uh",
    "start": "599220",
    "end": "602279"
  },
  {
    "text": "should be of this instance type family",
    "start": "602279",
    "end": "604860"
  },
  {
    "text": "and it could be of a certain instance",
    "start": "604860",
    "end": "607260"
  },
  {
    "text": "size right now it's uh I have just",
    "start": "607260",
    "end": "610560"
  },
  {
    "text": "commented it out but you can have it of",
    "start": "610560",
    "end": "613019"
  },
  {
    "text": "a certain instance of size and I've also",
    "start": "613019",
    "end": "616140"
  },
  {
    "text": "mentioned that it should be um uh sorry",
    "start": "616140",
    "end": "618120"
  },
  {
    "text": "it should be AMD based uh instances as",
    "start": "618120",
    "end": "621660"
  },
  {
    "text": "well you can also mention what is the",
    "start": "621660",
    "end": "623820"
  },
  {
    "text": "limit of number of CPUs that we would",
    "start": "623820",
    "end": "625920"
  },
  {
    "text": "want uh how can uh Carpenter understand",
    "start": "625920",
    "end": "629160"
  },
  {
    "text": "where to launch these exoto instances",
    "start": "629160",
    "end": "631620"
  },
  {
    "text": "well I've also mentioned the where the",
    "start": "631620",
    "end": "633779"
  },
  {
    "text": "subnets are and security groups are I've",
    "start": "633779",
    "end": "635940"
  },
  {
    "text": "already detect them so it will go ahead",
    "start": "635940",
    "end": "637860"
  },
  {
    "text": "and discover that hey these are the",
    "start": "637860",
    "end": "639540"
  },
  {
    "text": "subnets that you want to go ahead and",
    "start": "639540",
    "end": "641220"
  },
  {
    "text": "launch your ec2 instances or the nodes",
    "start": "641220",
    "end": "643620"
  },
  {
    "text": "that you would need and there's an",
    "start": "643620",
    "end": "645360"
  },
  {
    "text": "important uh Point here that I have",
    "start": "645360",
    "end": "648420"
  },
  {
    "text": "mentioned that TTL seconds after MTS 10.",
    "start": "648420",
    "end": "651120"
  },
  {
    "text": "what does this mean is that once a node",
    "start": "651120",
    "end": "654000"
  },
  {
    "text": "is empty there are no pods running on it",
    "start": "654000",
    "end": "656339"
  },
  {
    "text": "it will wait for 10 seconds Carpenter",
    "start": "656339",
    "end": "659040"
  },
  {
    "text": "will wait for 10 seconds before",
    "start": "659040",
    "end": "660660"
  },
  {
    "text": "terminating that node or that ec2",
    "start": "660660",
    "end": "663120"
  },
  {
    "text": "instance uh I've kept it low because",
    "start": "663120",
    "end": "665220"
  },
  {
    "text": "it's a demo I want to show it quickly",
    "start": "665220",
    "end": "667019"
  },
  {
    "text": "but you can keep it higher if you are",
    "start": "667019",
    "end": "669300"
  },
  {
    "text": "running a production workload so I've",
    "start": "669300",
    "end": "671339"
  },
  {
    "text": "already applied the default provisioner",
    "start": "671339",
    "end": "673140"
  },
  {
    "text": "all could what I'm going to do next is",
    "start": "673140",
    "end": "676079"
  },
  {
    "text": "going to see",
    "start": "676079",
    "end": "677459"
  },
  {
    "text": "that will create more",
    "start": "677459",
    "end": "680040"
  },
  {
    "text": "um you know replicas in this case so",
    "start": "680040",
    "end": "682320"
  },
  {
    "text": "before we do that you can see that there",
    "start": "682320",
    "end": "684060"
  },
  {
    "text": "are no pods running right now uh you can",
    "start": "684060",
    "end": "687720"
  },
  {
    "text": "see that there is only one node running",
    "start": "687720",
    "end": "689820"
  },
  {
    "text": "right now and uh these are the carpenter",
    "start": "689820",
    "end": "692940"
  },
  {
    "text": "logs so generally I start with one and",
    "start": "692940",
    "end": "695399"
  },
  {
    "text": "you know escalate it further but now to",
    "start": "695399",
    "end": "697380"
  },
  {
    "text": "save time what I'm going to do is I am",
    "start": "697380",
    "end": "699839"
  },
  {
    "text": "going to just ask for maybe",
    "start": "699839",
    "end": "702839"
  },
  {
    "text": "uh four uh four uh pots that I wanted to",
    "start": "702839",
    "end": "707459"
  },
  {
    "text": "create the moment I say yes what it is",
    "start": "707459",
    "end": "709800"
  },
  {
    "text": "going to do is it is going to have four",
    "start": "709800",
    "end": "711839"
  },
  {
    "text": "parts that are in pending State and you",
    "start": "711839",
    "end": "714180"
  },
  {
    "text": "can see in the locks let's go up a",
    "start": "714180",
    "end": "716579"
  },
  {
    "text": "little bit it says that hey uh",
    "start": "716579",
    "end": "720120"
  },
  {
    "text": "create a node with four parts requesting",
    "start": "720120",
    "end": "722820"
  },
  {
    "text": "certain capacity okay that yes it is now",
    "start": "722820",
    "end": "726300"
  },
  {
    "text": "waiting for this ec2 instance so it has",
    "start": "726300",
    "end": "728760"
  },
  {
    "text": "already created that ec2 instance and",
    "start": "728760",
    "end": "730800"
  },
  {
    "text": "you can find that it has already",
    "start": "730800",
    "end": "732000"
  },
  {
    "text": "launched an ec2 instance 23 seconds ago",
    "start": "732000",
    "end": "734279"
  },
  {
    "text": "what is this ec2 instance size the size",
    "start": "734279",
    "end": "737459"
  },
  {
    "text": "is obviously anything that would fit all",
    "start": "737459",
    "end": "740279"
  },
  {
    "text": "these four parts on but it is of C5 it",
    "start": "740279",
    "end": "744000"
  },
  {
    "text": "is AMD 64 and if you move a little bit",
    "start": "744000",
    "end": "746700"
  },
  {
    "text": "here you could see that it is or D Spot",
    "start": "746700",
    "end": "748680"
  },
  {
    "text": "and The instance is already running so",
    "start": "748680",
    "end": "750720"
  },
  {
    "text": "it's 39 seconds but you can see the",
    "start": "750720",
    "end": "752459"
  },
  {
    "text": "status has changed from pending to",
    "start": "752459",
    "end": "754440"
  },
  {
    "text": "container creating so as we talked about",
    "start": "754440",
    "end": "756899"
  },
  {
    "text": "this in the presentation uh when",
    "start": "756899",
    "end": "759420"
  },
  {
    "text": "kubernetes is creating those ec2",
    "start": "759420",
    "end": "761820"
  },
  {
    "text": "instances it's not only uh considering",
    "start": "761820",
    "end": "764220"
  },
  {
    "text": "that hey I need to schedule these uh",
    "start": "764220",
    "end": "767399"
  },
  {
    "text": "it's not only creating that ec2",
    "start": "767399",
    "end": "769320"
  },
  {
    "text": "instances but also taking a scheduling",
    "start": "769320",
    "end": "771360"
  },
  {
    "text": "decision so when it is creating these",
    "start": "771360",
    "end": "773700"
  },
  {
    "text": "reset instances it is bypassing the cube",
    "start": "773700",
    "end": "775980"
  },
  {
    "text": "scheduler and it's by directly binding",
    "start": "775980",
    "end": "778320"
  },
  {
    "text": "these parts to these uh there are two of",
    "start": "778320",
    "end": "781380"
  },
  {
    "text": "these notes as well so you can see",
    "start": "781380",
    "end": "783600"
  },
  {
    "text": "within few seconds like I think it was",
    "start": "783600",
    "end": "785880"
  },
  {
    "text": "58 or 60 seconds you can see that all",
    "start": "785880",
    "end": "788820"
  },
  {
    "text": "these spots are actually running on",
    "start": "788820",
    "end": "791040"
  },
  {
    "text": "these easy turn splences let's escalate",
    "start": "791040",
    "end": "793440"
  },
  {
    "text": "it a little bit let's make it instead of",
    "start": "793440",
    "end": "795300"
  },
  {
    "text": "four let's say I want 100",
    "start": "795300",
    "end": "798180"
  },
  {
    "text": "um Perth and we'll see how quickly",
    "start": "798180",
    "end": "800880"
  },
  {
    "text": "Carpenter is able to compute that how",
    "start": "800880",
    "end": "804120"
  },
  {
    "text": "many nodes it needs for all these",
    "start": "804120",
    "end": "806100"
  },
  {
    "text": "hundred parts and is going to quickly",
    "start": "806100",
    "end": "808079"
  },
  {
    "text": "launch all these ec2 instances",
    "start": "808079",
    "end": "810600"
  },
  {
    "text": "you can see that within seconds uh that",
    "start": "810600",
    "end": "813480"
  },
  {
    "text": "uh the ec2 instance is that it has",
    "start": "813480",
    "end": "815700"
  },
  {
    "text": "calculated so let's go up and see okay",
    "start": "815700",
    "end": "819240"
  },
  {
    "text": "so create a node with 85 parts so it",
    "start": "819240",
    "end": "822420"
  },
  {
    "text": "could fit few pods on the other ec2",
    "start": "822420",
    "end": "824700"
  },
  {
    "text": "instance so it has gone ahead and",
    "start": "824700",
    "end": "826260"
  },
  {
    "text": "deployed that that is something that",
    "start": "826260",
    "end": "828120"
  },
  {
    "text": "Cube shuttler will do quickly so if you",
    "start": "828120",
    "end": "830579"
  },
  {
    "text": "want we can also check",
    "start": "830579",
    "end": "833339"
  },
  {
    "text": "um right away",
    "start": "833339",
    "end": "835139"
  },
  {
    "text": "of how many boards are actually in the",
    "start": "835139",
    "end": "838019"
  },
  {
    "text": "running state right now",
    "start": "838019",
    "end": "841320"
  },
  {
    "text": "so right now 15 are actually running on",
    "start": "841320",
    "end": "844200"
  },
  {
    "text": "the ec2 instance that was ready or the",
    "start": "844200",
    "end": "846420"
  },
  {
    "text": "node that was already ready the one that",
    "start": "846420",
    "end": "848399"
  },
  {
    "text": "is not ready that's where the other 85",
    "start": "848399",
    "end": "851279"
  },
  {
    "text": "spots are going to be placed okay and",
    "start": "851279",
    "end": "854160"
  },
  {
    "text": "you can see that it's already 75 seconds",
    "start": "854160",
    "end": "856260"
  },
  {
    "text": "and",
    "start": "856260",
    "end": "857820"
  },
  {
    "text": "um this A2 instance will get ready in",
    "start": "857820",
    "end": "860279"
  },
  {
    "text": "couple of few more seconds or a couple",
    "start": "860279",
    "end": "863700"
  },
  {
    "text": "of minutes more uh before it can",
    "start": "863700",
    "end": "866040"
  },
  {
    "text": "actually have all these pods going and",
    "start": "866040",
    "end": "869100"
  },
  {
    "text": "placed on a running state so",
    "start": "869100",
    "end": "872459"
  },
  {
    "text": "and by bypassing Auto scaling groups and",
    "start": "872459",
    "end": "875579"
  },
  {
    "text": "directly talking to ec2 instances we are",
    "start": "875579",
    "end": "878160"
  },
  {
    "text": "able to save 30 to 35 seconds actually",
    "start": "878160",
    "end": "882300"
  },
  {
    "text": "when you are trying to schedule a lot of",
    "start": "882300",
    "end": "884880"
  },
  {
    "text": "pots and if you have been if you've seen",
    "start": "884880",
    "end": "886980"
  },
  {
    "text": "this that in 108 seconds our ec2",
    "start": "886980",
    "end": "890160"
  },
  {
    "text": "instance was up and running let's see",
    "start": "890160",
    "end": "891779"
  },
  {
    "text": "how many parts are up and running right",
    "start": "891779",
    "end": "893519"
  },
  {
    "text": "now you can see that yes 20 plots are up",
    "start": "893519",
    "end": "895860"
  },
  {
    "text": "and running there are some in container",
    "start": "895860",
    "end": "897660"
  },
  {
    "text": "creating mode so they are downloading",
    "start": "897660",
    "end": "899160"
  },
  {
    "text": "that image and getting ready and if you",
    "start": "899160",
    "end": "902399"
  },
  {
    "text": "want you can also keep checking that how",
    "start": "902399",
    "end": "904440"
  },
  {
    "text": "many of these are",
    "start": "904440",
    "end": "906000"
  },
  {
    "text": "at all getting created so you can now",
    "start": "906000",
    "end": "908040"
  },
  {
    "text": "see that that number has quickly uh",
    "start": "908040",
    "end": "910019"
  },
  {
    "text": "started escalating and you can within",
    "start": "910019",
    "end": "912839"
  },
  {
    "text": "what it's been two minutes uh since that",
    "start": "912839",
    "end": "915779"
  },
  {
    "text": "ec2 instance has been launched and you",
    "start": "915779",
    "end": "917579"
  },
  {
    "text": "can see already uh most of the parts",
    "start": "917579",
    "end": "919560"
  },
  {
    "text": "have been deployed so that's how quickly",
    "start": "919560",
    "end": "922260"
  },
  {
    "text": "Carpenter can actually get the Institute",
    "start": "922260",
    "end": "924600"
  },
  {
    "text": "instances up and running great so all",
    "start": "924600",
    "end": "927060"
  },
  {
    "text": "the hundred parts are up and running so",
    "start": "927060",
    "end": "928680"
  },
  {
    "text": "what we'll do next is actually just go",
    "start": "928680",
    "end": "931380"
  },
  {
    "text": "ahead and remove all these spots okay so",
    "start": "931380",
    "end": "934260"
  },
  {
    "text": "I'm just going to say hey just go ahead",
    "start": "934260",
    "end": "936060"
  },
  {
    "text": "and have zero and you can see how",
    "start": "936060",
    "end": "938040"
  },
  {
    "text": "quickly it is going to scale down so the",
    "start": "938040",
    "end": "940380"
  },
  {
    "text": "parts will go off instantly but for the",
    "start": "940380",
    "end": "943260"
  },
  {
    "text": "ec2 instances you can see that it has",
    "start": "943260",
    "end": "945120"
  },
  {
    "text": "added TTL if you see the logs that I've",
    "start": "945120",
    "end": "948360"
  },
  {
    "text": "highlighted it says that added detail to",
    "start": "948360",
    "end": "950399"
  },
  {
    "text": "the empty node and because it was just",
    "start": "950399",
    "end": "952560"
  },
  {
    "text": "10 seconds it's saying that it's",
    "start": "952560",
    "end": "954120"
  },
  {
    "text": "triggered the terminations are within 10",
    "start": "954120",
    "end": "955980"
  },
  {
    "text": "seconds all my ec2 instances uh have",
    "start": "955980",
    "end": "959040"
  },
  {
    "text": "been deleted if I want to make it more",
    "start": "959040",
    "end": "961440"
  },
  {
    "text": "interesting I can also go ahead and",
    "start": "961440",
    "end": "963120"
  },
  {
    "text": "let's say patch the deployment and say",
    "start": "963120",
    "end": "965699"
  },
  {
    "text": "hey instead of AMD I want Arm based ec2",
    "start": "965699",
    "end": "969300"
  },
  {
    "text": "instances and once that is done I'm",
    "start": "969300",
    "end": "971820"
  },
  {
    "text": "going to ask for let's say two ports",
    "start": "971820",
    "end": "973920"
  },
  {
    "text": "that need a node that is Arm based now",
    "start": "973920",
    "end": "976740"
  },
  {
    "text": "in this case uh let's scroll down",
    "start": "976740",
    "end": "979680"
  },
  {
    "text": "we also got our base ec2 instances but",
    "start": "979680",
    "end": "982920"
  },
  {
    "text": "we will be like when didn't you mention",
    "start": "982920",
    "end": "984899"
  },
  {
    "text": "AMD uh already but yes I have also",
    "start": "984899",
    "end": "988500"
  },
  {
    "text": "mentioned applied another uh so you'll",
    "start": "988500",
    "end": "992040"
  },
  {
    "text": "you'll be able to see that here one",
    "start": "992040",
    "end": "994440"
  },
  {
    "text": "second okay so you can see that it",
    "start": "994440",
    "end": "996720"
  },
  {
    "text": "already found a provisioner for arm 64",
    "start": "996720",
    "end": "999000"
  },
  {
    "text": "and the request that I just had matched",
    "start": "999000",
    "end": "1002660"
  },
  {
    "text": "that on 64",
    "start": "1002660",
    "end": "1004339"
  },
  {
    "text": "um a requirement it was there in one of",
    "start": "1004339",
    "end": "1007279"
  },
  {
    "text": "the provisioners and so it went ahead",
    "start": "1007279",
    "end": "1009440"
  },
  {
    "text": "and deployed that ec2 instance with um",
    "start": "1009440",
    "end": "1012740"
  },
  {
    "text": "64. so you can have multiple",
    "start": "1012740",
    "end": "1014480"
  },
  {
    "text": "provisioners in this case these",
    "start": "1014480",
    "end": "1016519"
  },
  {
    "text": "provisioners could have different uh",
    "start": "1016519",
    "end": "1018680"
  },
  {
    "text": "constraints different requirements and",
    "start": "1018680",
    "end": "1021019"
  },
  {
    "text": "Carpenter will automatically pick up",
    "start": "1021019",
    "end": "1022759"
  },
  {
    "text": "that hey there is already a provisioner",
    "start": "1022759",
    "end": "1024678"
  },
  {
    "text": "if there was not there was no",
    "start": "1024679",
    "end": "1026660"
  },
  {
    "text": "provisioner for arm 64 it wouldn't have",
    "start": "1026660",
    "end": "1028699"
  },
  {
    "text": "allowed the user to actually go ahead",
    "start": "1028699",
    "end": "1030860"
  },
  {
    "text": "and deploy uh this particular",
    "start": "1030860",
    "end": "1033558"
  },
  {
    "text": "application so that's it that's the",
    "start": "1033559",
    "end": "1035600"
  },
  {
    "text": "simple demo uh let's go back to our",
    "start": "1035600",
    "end": "1037819"
  },
  {
    "text": "presentation and wrap up the section the",
    "start": "1037819",
    "end": "1040640"
  },
  {
    "text": "key takeaway so you use the default",
    "start": "1040640",
    "end": "1042319"
  },
  {
    "text": "provisioner for diverse instant types",
    "start": "1042319",
    "end": "1044660"
  },
  {
    "text": "and availability zones you can add up",
    "start": "1044660",
    "end": "1046760"
  },
  {
    "text": "additional provisioners as you need you",
    "start": "1046760",
    "end": "1048919"
  },
  {
    "text": "can also control your scheduling based",
    "start": "1048919",
    "end": "1051620"
  },
  {
    "text": "on their topology spreads",
    "start": "1051620",
    "end": "1053919"
  },
  {
    "text": "attains and tolerations and provisioners",
    "start": "1053919",
    "end": "1056720"
  },
  {
    "text": "Etc use HPA with Carpenter to scale in",
    "start": "1056720",
    "end": "1060679"
  },
  {
    "text": "and out and you can schedule these pods",
    "start": "1060679",
    "end": "1063620"
  },
  {
    "text": "with spot if you need to to save cost",
    "start": "1063620",
    "end": "1066559"
  },
  {
    "text": "right if you want to install Carpenter",
    "start": "1066559",
    "end": "1069080"
  },
  {
    "text": "you want to play with it you want to",
    "start": "1069080",
    "end": "1070460"
  },
  {
    "text": "contribute to Carpenter do check out the",
    "start": "1070460",
    "end": "1073580"
  },
  {
    "text": "documentation and the GitHub link I have",
    "start": "1073580",
    "end": "1076820"
  },
  {
    "text": "mentioned here there are some best",
    "start": "1076820",
    "end": "1078080"
  },
  {
    "text": "practices that we discussed about how to",
    "start": "1078080",
    "end": "1080660"
  },
  {
    "text": "use this with eks there are also certain",
    "start": "1080660",
    "end": "1082820"
  },
  {
    "text": "workshops if you want to do more",
    "start": "1082820",
    "end": "1084380"
  },
  {
    "text": "Hands-On with respect to Carpenter and",
    "start": "1084380",
    "end": "1087260"
  },
  {
    "text": "you can find all that detail on these",
    "start": "1087260",
    "end": "1089299"
  },
  {
    "text": "resources so that's it that's me thank",
    "start": "1089299",
    "end": "1092000"
  },
  {
    "text": "you for joining me for this quick demo",
    "start": "1092000",
    "end": "1094400"
  },
  {
    "text": "uh and discussion about Carpenter I hope",
    "start": "1094400",
    "end": "1097520"
  },
  {
    "text": "this was insightful and this was useful",
    "start": "1097520",
    "end": "1100220"
  },
  {
    "text": "and I hope we all experiment and",
    "start": "1100220",
    "end": "1103520"
  },
  {
    "text": "continue innovating in the way our",
    "start": "1103520",
    "end": "1105679"
  },
  {
    "text": "kubernetes clusters are clean today so",
    "start": "1105679",
    "end": "1108020"
  },
  {
    "text": "thank you again see you again next time",
    "start": "1108020",
    "end": "1111620"
  },
  {
    "text": "thank you rohini yeah that was great",
    "start": "1111620",
    "end": "1114020"
  },
  {
    "text": "tool when you're working with Cube class",
    "start": "1114020",
    "end": "1117280"
  }
]