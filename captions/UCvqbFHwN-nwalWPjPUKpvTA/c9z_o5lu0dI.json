[
  {
    "text": "so today we're going to talk about efficient IOT with protocol buffers my name is vladimir vivian software",
    "start": "870",
    "end": "8010"
  },
  {
    "text": "engineer with vmware I work in a cloud native group where I get to play with",
    "start": "8010",
    "end": "14820"
  },
  {
    "text": "cloud native applications like kubernetes more recently I've been contributing to the CSI code which is",
    "start": "14820",
    "end": "22109"
  },
  {
    "text": "part of the storage subsystem in kubernetes and CSI uses your RPC and",
    "start": "22109",
    "end": "29250"
  },
  {
    "text": "that kind of got me interested in looking further into G RPC and play with it extensively also I'm into go I write",
    "start": "29250",
    "end": "39329"
  },
  {
    "text": "a lot of go ended up writing a book on go so that's that so today we're gonna",
    "start": "39329",
    "end": "45980"
  },
  {
    "text": "explore the use of protocol buffers in G RPC for efficient IOT so we'll see what",
    "start": "45980",
    "end": "51390"
  },
  {
    "text": "that means it may be something that you find interesting and it may be may not be so we'll see",
    "start": "51390",
    "end": "58350"
  },
  {
    "text": "so to get started the internet of all things it said it turns out that everything wants to be connected to the",
    "start": "58350",
    "end": "64228"
  },
  {
    "text": "internet now not just traditional computers everything is getting an IP",
    "start": "64229",
    "end": "69950"
  },
  {
    "text": "one of the projections that I found interesting is that in 2020 supposedly",
    "start": "69950",
    "end": "76380"
  },
  {
    "text": "there will be about 50 billion of these devices all connected to the internet doing what God knows I don't know so",
    "start": "76380",
    "end": "84240"
  },
  {
    "text": "there's been an explosion of chipsets and sensors and device platforms all",
    "start": "84240",
    "end": "90509"
  },
  {
    "text": "claiming to do IOT multitude of protocols from you name it and cloud",
    "start": "90509",
    "end": "98930"
  },
  {
    "text": "providers and other type of platforms providing services for IOT so IOT is all",
    "start": "98930",
    "end": "105600"
  },
  {
    "text": "over the place now modern IOT service stack probably will look something like",
    "start": "105600",
    "end": "112409"
  },
  {
    "text": "this where you have sensors out in the field collecting data you may have edge",
    "start": "112409",
    "end": "118469"
  },
  {
    "text": "devices with a little bit more capability doing computing locally",
    "start": "118469",
    "end": "123950"
  },
  {
    "text": "you're gonna have back-end compute devices somewhere in a data center yes",
    "start": "123950",
    "end": "129629"
  },
  {
    "text": "you're gonna have mobile devices those are not going away and your traditional desktop and laptop",
    "start": "129629",
    "end": "135680"
  },
  {
    "text": "will still be talking to the Internet and since there are things they are part of IOT as well now the problem is you",
    "start": "135680",
    "end": "146330"
  },
  {
    "text": "get to the point where you have a bunch of devices with heterogeneous capabilities varied constraints",
    "start": "146330",
    "end": "153650"
  },
  {
    "text": "requirements diverse OS platforms all over the place many computing languages",
    "start": "153650",
    "end": "160010"
  },
  {
    "text": "and sometimes you're going to need a a translation layer for these devices to talk to each other",
    "start": "160010",
    "end": "165890"
  },
  {
    "text": "now the proposition is what if we use something like a uniform communication",
    "start": "165890",
    "end": "173000"
  },
  {
    "text": "protocol that allows us to do interoperability between those components and the whole point of this",
    "start": "173000",
    "end": "180410"
  },
  {
    "text": "presentation is to show you that you can do that with using protocol buffers and in G RPC so let's take a look at",
    "start": "180410",
    "end": "188390"
  },
  {
    "text": "protocol buffers by itself anybody know what I'm talking about when I say protocol buffers alright awesome right",
    "start": "188390",
    "end": "195500"
  },
  {
    "text": "group so it's a language and platform neutral mechanism for binary civilizational structured data so what",
    "start": "195500",
    "end": "200630"
  },
  {
    "text": "does that mean it's open source created that Google efficient binary format",
    "start": "200630",
    "end": "207220"
  },
  {
    "text": "allows serialization of type data structures support many languages which",
    "start": "207220",
    "end": "212780"
  },
  {
    "text": "is very interesting from C++ Python Java Go is one of the supported languages and",
    "start": "212780",
    "end": "221420"
  },
  {
    "text": "it turns out that protocol buffers is ideal for wire format and and storage",
    "start": "221420",
    "end": "228920"
  },
  {
    "text": "specifically if you're doing Iowa team and we'll see why so you may say well",
    "start": "228920",
    "end": "233989"
  },
  {
    "text": "what about Jason I could do the same thing with Jason and you will be right Jason would be a good solution it's",
    "start": "233989",
    "end": "241130"
  },
  {
    "text": "simple flexible university accepted well-documented and has a healthy ecosystem of tools built around it",
    "start": "241130",
    "end": "247840"
  },
  {
    "text": "however it comes with its own drawbacks jason has a weak data typing can be",
    "start": "247840",
    "end": "256340"
  },
  {
    "text": "inefficient because we're using text characters to the mark the surface of",
    "start": "256340",
    "end": "261979"
  },
  {
    "text": "our data when we use Jason so that can be an if you have small devices where you know",
    "start": "261979",
    "end": "269030"
  },
  {
    "text": "sending a byte can can can be costly and",
    "start": "269030",
    "end": "274160"
  },
  {
    "text": "clients can be implemented and consistently so if I give you a piece of JSON I gave her a piece of Jason we may",
    "start": "274160",
    "end": "281510"
  },
  {
    "text": "end up talking differently to that same piece of of encoded data lastly versioning and versioning is",
    "start": "281510",
    "end": "289360"
  },
  {
    "text": "important to you and I'm talking about versioning at the at the field level or",
    "start": "289360",
    "end": "295190"
  },
  {
    "text": "backward compatibility that could be problematic with Jason now protocol",
    "start": "295190",
    "end": "300830"
  },
  {
    "text": "buffers and IOT it turns out that protocol buffers could be ideal for",
    "start": "300830",
    "end": "306890"
  },
  {
    "text": "serializing data for small devices for logging metric monitoring etc generally",
    "start": "306890",
    "end": "314570"
  },
  {
    "text": "when we're using protocol buffers we do that in three steps so the first thing we do is to define an ideal and the",
    "start": "314570",
    "end": "320630"
  },
  {
    "text": "ideal is the interface definition language and it basically declare",
    "start": "320630",
    "end": "326300"
  },
  {
    "text": "structure to represent the data that we want to one end code and then we'll compile that IDL and the compilation",
    "start": "326300",
    "end": "333620"
  },
  {
    "text": "step takes that IDL and generate generate code for a targeted language",
    "start": "333620",
    "end": "340010"
  },
  {
    "text": "and we can take that code and integrate it into whatever it is we're building so",
    "start": "340010",
    "end": "346010"
  },
  {
    "text": "let's look at how you would build a something that would collect temperature data and using a small small device",
    "start": "346010",
    "end": "355310"
  },
  {
    "text": "using protocol buffers so first we start",
    "start": "355310",
    "end": "361130"
  },
  {
    "text": "with a device it's well we'll look at the device later on but we're just going",
    "start": "361130",
    "end": "366260"
  },
  {
    "text": "to collect temperature data from them from a microcontroller using a temperature sensor we're gonna use",
    "start": "366260",
    "end": "372500"
  },
  {
    "text": "protocol buffer to serialize that data right on the device itself and then",
    "start": "372500",
    "end": "377690"
  },
  {
    "text": "we're gonna send that data using over tcp/ip to a back-end server and we're",
    "start": "377690",
    "end": "384110"
  },
  {
    "text": "gonna post that data into a time series database and since we're you know we're",
    "start": "384110",
    "end": "389840"
  },
  {
    "text": "at cube con we're gonna use something to visualize it so let's look at the the",
    "start": "389840",
    "end": "397520"
  },
  {
    "text": "server code",
    "start": "397520",
    "end": "400030"
  },
  {
    "text": "the first thing we do is to define the the IDL again the IDL is the interface",
    "start": "403080",
    "end": "409240"
  },
  {
    "text": "definition language it has it shows the surface of the data that we want to define that we want to serialize over",
    "start": "409240",
    "end": "416530"
  },
  {
    "text": "the wire and first we declare a version for that a protocol buffer version there",
    "start": "416530",
    "end": "423700"
  },
  {
    "text": "are two major version 4 protocol buffers one is proto 2 and proto 3 for this one",
    "start": "423700",
    "end": "428740"
  },
  {
    "text": "we'll use for the 2 like I said we define a message which the message is a container for the data types that we",
    "start": "428740",
    "end": "436750"
  },
  {
    "text": "want to send over the wires and as you can see each field inside that message",
    "start": "436750",
    "end": "442840"
  },
  {
    "text": "is it's typed so on both end understanding and in the receiving end",
    "start": "442840",
    "end": "448450"
  },
  {
    "text": "we know what to expect when that data arrives next we we use a tool called",
    "start": "448450",
    "end": "454750"
  },
  {
    "text": "proto C to compile that data into to compile the IDL into a target language",
    "start": "454750",
    "end": "462550"
  },
  {
    "text": "so for my example the server is written go so I use - - go out and it'll take",
    "start": "462550",
    "end": "469180"
  },
  {
    "text": "that IDL and generate a generate a piece",
    "start": "469180",
    "end": "475510"
  },
  {
    "text": "of a type that represents the the data type that was defined in the IDL so you",
    "start": "475510",
    "end": "480580"
  },
  {
    "text": "could see there's almost a one-to-one mapping between the between the",
    "start": "480580",
    "end": "486250"
  },
  {
    "text": "generated code and the idea that was Jenna there was defined earlier so in",
    "start": "486250",
    "end": "491770"
  },
  {
    "text": "this piece of code I'm showing that in the very top line I'm reading into above",
    "start": "491770",
    "end": "497290"
  },
  {
    "text": "for the bytes that represents the type that was sent from the from the device",
    "start": "497290",
    "end": "504370"
  },
  {
    "text": "and then later on we unmarshal that that series of by into the actual type that",
    "start": "504370",
    "end": "510670"
  },
  {
    "text": "we generated with the proto see that that gave us that type that to represent",
    "start": "510670",
    "end": "516159"
  },
  {
    "text": "the type coming from the server from the from the client and here we just take",
    "start": "516160",
    "end": "521650"
  },
  {
    "text": "that we take the the data as we get it",
    "start": "521650",
    "end": "527290"
  },
  {
    "text": "and we shove it into and flex DB as a time series database so",
    "start": "527290",
    "end": "534940"
  },
  {
    "text": "we can do something interesting with it so now let's look at the device itself",
    "start": "534940",
    "end": "542279"
  },
  {
    "text": "it's super low cost microcontroller device those go for a couple of dollars",
    "start": "542279",
    "end": "549070"
  },
  {
    "text": "u.s. dollars and basically esp8266 is",
    "start": "549070",
    "end": "555010"
  },
  {
    "text": "one of the is one of the ones I've used before we're talking very low-power a",
    "start": "555010",
    "end": "562269"
  },
  {
    "text": "whole 32 kilobyte of program space to",
    "start": "562269",
    "end": "567430"
  },
  {
    "text": "run your program but you have a Wi-Fi radio and it supports full tcp/ip and",
    "start": "567430",
    "end": "575459"
  },
  {
    "text": "you also get TLS so if you want to go through the trouble it probably should",
    "start": "575459",
    "end": "580930"
  },
  {
    "text": "if you're doing production stuff go to the top of using TLS to secure your",
    "start": "580930",
    "end": "586180"
  },
  {
    "text": "connectivity you can now you don't get an operating system but you can use C or",
    "start": "586180",
    "end": "592450"
  },
  {
    "text": "C++ or do we know to program that device",
    "start": "592450",
    "end": "598709"
  },
  {
    "text": "so programming the device consists of the three steps that we we talked",
    "start": "598709",
    "end": "604269"
  },
  {
    "text": "earlier we we use the same IDL that we use to generate the types on the server",
    "start": "604269",
    "end": "610269"
  },
  {
    "text": "side because we're gonna share data between the device and the server we're",
    "start": "610269",
    "end": "616089"
  },
  {
    "text": "going to use the same idea to generate the same types but this time we're gonna",
    "start": "616089",
    "end": "621670"
  },
  {
    "text": "use proto C to generate C code we're gonna use a different plug-in called",
    "start": "621670",
    "end": "628149"
  },
  {
    "text": "nano PB and nano PB will generate C NC C that with a small footprint that can run",
    "start": "628149",
    "end": "636100"
  },
  {
    "text": "on small devices like these and we see",
    "start": "636100",
    "end": "641829"
  },
  {
    "text": "the the type that's generated again it's it's at C and you also get a bunch of",
    "start": "641829",
    "end": "647769"
  },
  {
    "text": "serializer code to go with the generated type so here we're using the a function",
    "start": "647769",
    "end": "655449"
  },
  {
    "text": "call to generate to serialize the the",
    "start": "655449",
    "end": "660550"
  },
  {
    "text": "the type or the value that's being passed here and further down we use a a tcp/ip",
    "start": "660550",
    "end": "669350"
  },
  {
    "text": "client to write that data down to the wire and send the data to the server and",
    "start": "669350",
    "end": "676070"
  },
  {
    "text": "this happened over and over as we read the temperature in a loop we read the",
    "start": "676070",
    "end": "681770"
  },
  {
    "text": "temperature and code it and then serialize it and sending it out to the to the server in the backend and lastly",
    "start": "681770",
    "end": "689600"
  },
  {
    "text": "we take the code and and burn it onto the the device and you ready to go so",
    "start": "689600",
    "end": "698480"
  },
  {
    "text": "how does it all work now I don't have a setup it would have been kind of hard to to set it up here so",
    "start": "698480",
    "end": "704810"
  },
  {
    "text": "we'll just walk through how it actually works so this is the device is in the",
    "start": "704810",
    "end": "710240"
  },
  {
    "text": "actual picture of the device just a demo of running the demo for the device and",
    "start": "710240",
    "end": "717490"
  },
  {
    "text": "you can see the temperature sensor sitting right there and it's plugged into the data line for the device and as",
    "start": "717490",
    "end": "726350"
  },
  {
    "text": "soon as the device is plugged in its going to start reading the temperature from the temperature device sensor next",
    "start": "726350",
    "end": "733460"
  },
  {
    "text": "we start grow fauna hookah find out is what I'm using to to do to show you the",
    "start": "733460",
    "end": "739790"
  },
  {
    "text": "the visualization for the data again we're using a flex TV so we start our in flux DB server and once that's online we",
    "start": "739790",
    "end": "749480"
  },
  {
    "text": "start our actual goal code now again the go code is basically a very simple server that pretty much opens a tcp/ip",
    "start": "749480",
    "end": "758030"
  },
  {
    "text": "port that the device will look for as soon as it comes on the same network connect to it and immediately start",
    "start": "758030",
    "end": "764510"
  },
  {
    "text": "sending data non-stop until you unplug it from the wall now this is what you",
    "start": "764510",
    "end": "772910"
  },
  {
    "text": "end up with and this is a go fine and showing temperature reading using that",
    "start": "772910",
    "end": "779630"
  },
  {
    "text": "device for but I think it was about six hours and that was in my office and it",
    "start": "779630",
    "end": "785690"
  },
  {
    "text": "you could see the the the thermostat loop as the temperature rises the AC",
    "start": "785690",
    "end": "792290"
  },
  {
    "text": "kicks in and it drops and then the whole pattern keeps repeating throughout the the",
    "start": "792290",
    "end": "797520"
  },
  {
    "text": "morning and it gets a little hotter and then at the bottom is another reading that the device will send is the",
    "start": "797520",
    "end": "803190"
  },
  {
    "text": "humidity the humidity reading that that",
    "start": "803190",
    "end": "808800"
  },
  {
    "text": "it also reads up and sends over using using protocol buffers so here we you",
    "start": "808800",
    "end": "819060"
  },
  {
    "text": "know we're using protocol buffer on a tiny device running see we send that",
    "start": "819060",
    "end": "824160"
  },
  {
    "text": "data to a back-end server running go and the only thing we had to do is use the",
    "start": "824160",
    "end": "830520"
  },
  {
    "text": "protocol buffer to compile the to compile the to generate the code that we",
    "start": "830520",
    "end": "836400"
  },
  {
    "text": "need to create our serialize errs there's no translation code we didn't have to do anything crazy everything",
    "start": "836400",
    "end": "843210"
  },
  {
    "text": "just works now an option that I could have done but I didn't but I just wanted",
    "start": "843210",
    "end": "848880"
  },
  {
    "text": "to point that out you could have set up the that particular device there's a",
    "start": "848880",
    "end": "855710"
  },
  {
    "text": "implementation for MQTT client out there where you can have used the imputed client if you so desire to have a",
    "start": "855710",
    "end": "863730"
  },
  {
    "text": "message bus a message bus with messaging capabilities such as durability etc so",
    "start": "863730",
    "end": "871500"
  },
  {
    "text": "you could have I could have done that and put that in the middle but this is optional and then what you do is you",
    "start": "871500",
    "end": "877710"
  },
  {
    "text": "take your you dump your your binary reading of your protocol buffer types",
    "start": "877710",
    "end": "882750"
  },
  {
    "text": "onto the message onto a message queue now let's talk about G RPC since you're",
    "start": "882750",
    "end": "894240"
  },
  {
    "text": "all here I'm guessing everybody knows what I'm talking about when I said your RPC right no all right so let's talk",
    "start": "894240",
    "end": "905400"
  },
  {
    "text": "about G RPC will cover at a higher level so universal open source our fec",
    "start": "905400",
    "end": "911880"
  },
  {
    "text": "framework designed to create efficient fast services now it uses protocol",
    "start": "911880",
    "end": "918900"
  },
  {
    "text": "buffer underneath the covers for efficient binary encoding so you don't",
    "start": "918900",
    "end": "923910"
  },
  {
    "text": "get to see the protocol buffer directly but that's what it's using it so",
    "start": "923910",
    "end": "931050"
  },
  {
    "text": "earlier when we just used protocol buffer directly we just defined messages but when we're using G RPC will not only",
    "start": "931050",
    "end": "937649"
  },
  {
    "text": "define messages in our idea we also define service and methods for those",
    "start": "937649",
    "end": "943470"
  },
  {
    "text": "services it relies on HTTP 2 for fast multiplex transport it has the ability for",
    "start": "943470",
    "end": "950370"
  },
  {
    "text": "bi-directional and streaming data I'm not gonna demo streaming data here but",
    "start": "950370",
    "end": "956029"
  },
  {
    "text": "there's some services out there that can leverage streaming data like if you're",
    "start": "956029",
    "end": "961320"
  },
  {
    "text": "doing real-time translation will see some an example but if you're doing",
    "start": "961320",
    "end": "967680"
  },
  {
    "text": "real-time translation as you send voice and it streams the result as you're",
    "start": "967680",
    "end": "973110"
  },
  {
    "text": "sending it to the server pretty cool it uses an extensive and",
    "start": "973110",
    "end": "978209"
  },
  {
    "text": "extensible middleware where you can define authorization and authentication tracing logging built right in right",
    "start": "978209",
    "end": "985829"
  },
  {
    "text": "into G RPC and I think one of the main interesting thing about G RPC itself is",
    "start": "985829",
    "end": "991920"
  },
  {
    "text": "the fact that it support tons of languages 11 last time I counted so",
    "start": "991920",
    "end": "997829"
  },
  {
    "text": "chances are your favorite language is supported if not I don't know",
    "start": "997829",
    "end": "1004959"
  },
  {
    "text": "so gr FEC and IOT so the example we did with protocol but protocol buffer is",
    "start": "1005420",
    "end": "1013250"
  },
  {
    "text": "basically something where we're gathering data we sent it over the wall and later on with batch it and do",
    "start": "1013250",
    "end": "1018950"
  },
  {
    "text": "analysis so that's one type of IOT application but another type is where",
    "start": "1018950",
    "end": "1026540"
  },
  {
    "text": "you want to do real-time interactivity maybe you press a button on a wall and you want something to happen immediately",
    "start": "1026540",
    "end": "1032260"
  },
  {
    "text": "well when you do that it's you know how would you do something like that right",
    "start": "1032260",
    "end": "1038589"
  },
  {
    "text": "so again if you go on the internet in your search chances are you gonna come",
    "start": "1038589",
    "end": "1044270"
  },
  {
    "text": "across this model where you know it's prescribed to set up to use a messaging",
    "start": "1044270",
    "end": "1050210"
  },
  {
    "text": "with with two topics one topic is a request topic and then set up another topic for a response topic for for his",
    "start": "1050210",
    "end": "1057679"
  },
  {
    "text": "fun topic and then when you get a broker in the middle and then you send your data on the request",
    "start": "1057679",
    "end": "1064880"
  },
  {
    "text": "you listen to for the response and then you correlate based on some idea et cetera et cetera now that works but it's",
    "start": "1064880",
    "end": "1071540"
  },
  {
    "text": "a lot of moving parts right so let's take all these out and let's replace",
    "start": "1071540",
    "end": "1077150"
  },
  {
    "text": "this with GRDC so what gr FPC allow us to do is basically use idioms from from",
    "start": "1077150",
    "end": "1086420"
  },
  {
    "text": "the language we're using to make our service call look like a local method",
    "start": "1086420",
    "end": "1093950"
  },
  {
    "text": "call so let's see again gr Fe see how we use it generally it's three steps as you would",
    "start": "1093950",
    "end": "1101840"
  },
  {
    "text": "expect so you define an ID L you compile it ideal and during the compilation you",
    "start": "1101840",
    "end": "1107750"
  },
  {
    "text": "get clients stubs which are methods that",
    "start": "1107750",
    "end": "1112820"
  },
  {
    "text": "make your service call look like it's a remote call and you also get some sort",
    "start": "1112820",
    "end": "1119240"
  },
  {
    "text": "of service interface that you're responsible for implementing so we're",
    "start": "1119240",
    "end": "1125210"
  },
  {
    "text": "going to look at how we could build a speech transcription with G RPC and what",
    "start": "1125210",
    "end": "1131900"
  },
  {
    "text": "does that mean so we're gonna start with a more capable device this time instead",
    "start": "1131900",
    "end": "1138770"
  },
  {
    "text": "of a esp8266 we're gonna use a Raspberry Pi",
    "start": "1138770",
    "end": "1143810"
  },
  {
    "text": "we're gonna attach the microphone to that PI and we're gonna use Python 2 to",
    "start": "1143810",
    "end": "1150890"
  },
  {
    "text": "read data from the microphone or to capture voice basically and then and generate a wave file and then use an RPC",
    "start": "1150890",
    "end": "1159950"
  },
  {
    "text": "use RPC to send that data to a back-end service in this case it's a Google",
    "start": "1159950",
    "end": "1165170"
  },
  {
    "text": "speech feature text service and then the response when it comes back we're gonna",
    "start": "1165170",
    "end": "1171160"
  },
  {
    "text": "take that response and the response will continue contain the transcription and",
    "start": "1171160",
    "end": "1176440"
  },
  {
    "text": "we'll have the device react to that response and all of that happens in you",
    "start": "1176440",
    "end": "1182630"
  },
  {
    "text": "know seamlessly using the idioms idioms of Python as we'll see so let's look at",
    "start": "1182630",
    "end": "1190310"
  },
  {
    "text": "the service again the service is from Google so we're not responsible for creating that service was already created for us it provides",
    "start": "1190310",
    "end": "1198160"
  },
  {
    "text": "real-time speech transcription it's available as both rest and as well as an",
    "start": "1198160",
    "end": "1203590"
  },
  {
    "text": "RPC API using G RPC and it supports several languages go Python c-sharp etc",
    "start": "1203590",
    "end": "1213390"
  },
  {
    "text": "now the device again it's a raspberry pi supports Wi-Fi Ethernet full-blown OS",
    "start": "1213390",
    "end": "1222000"
  },
  {
    "text": "and on that PI we're gonna run Python with that with a gr PC client and we're",
    "start": "1222000",
    "end": "1230200"
  },
  {
    "text": "gonna talk to our speech service in the backend so the way we do that when we",
    "start": "1230200",
    "end": "1236710"
  },
  {
    "text": "program the device we're not going to create our own idea of the IDL will come from Google itself because it's their",
    "start": "1236710",
    "end": "1243700"
  },
  {
    "text": "service all right now to show you the",
    "start": "1243700",
    "end": "1248730"
  },
  {
    "text": "flexibility of G RPC and protocol buffers is that we're gonna use proto C",
    "start": "1248730",
    "end": "1256300"
  },
  {
    "text": "to compile that IDL into Python so we've we've proved compile our ideal and to C",
    "start": "1256300",
    "end": "1264970"
  },
  {
    "text": "go and now as an example we're doing it for Python and then so we generate the",
    "start": "1264970",
    "end": "1275860"
  },
  {
    "text": "code but the next slide shows that this is an optional steps are optional",
    "start": "1275860",
    "end": "1281350"
  },
  {
    "text": "because when you download the Google libraries for Python they already have",
    "start": "1281350",
    "end": "1288970"
  },
  {
    "text": "those stubs precompile for you so it's an optional stuff but you can go through that step and do it yourself but it's",
    "start": "1288970",
    "end": "1295570"
  },
  {
    "text": "already it's already there for you so",
    "start": "1295570",
    "end": "1300670"
  },
  {
    "text": "let's walk through the code real quick so this is the Python code what we're",
    "start": "1300670",
    "end": "1306580"
  },
  {
    "text": "seeing is is we're importing PI audio as the the library we're going to use to do",
    "start": "1306580",
    "end": "1314920"
  },
  {
    "text": "voice capturing and then toward the bottom we're also importing the Google",
    "start": "1314920",
    "end": "1321010"
  },
  {
    "text": "cloud clients again the the speech package is where our client lives it",
    "start": "1321010",
    "end": "1328090"
  },
  {
    "text": "includes the the G RPC stubs that we're going to call to to talk to the back-end server we're",
    "start": "1328090",
    "end": "1336190"
  },
  {
    "text": "initializing our audio library now I didn't go through the every step to show",
    "start": "1336190",
    "end": "1342550"
  },
  {
    "text": "you how to do the voice capture to create a WAV file but basically you you create the you initialize the library",
    "start": "1342550",
    "end": "1349330"
  },
  {
    "text": "and you use variable P further down to to capture the voice and write that",
    "start": "1349330",
    "end": "1356890"
  },
  {
    "text": "whatever was captured to a file now here we're initializing the actual back",
    "start": "1356890",
    "end": "1364740"
  },
  {
    "text": "service client for the speech client for the google voice text-to-speech now this",
    "start": "1364740",
    "end": "1373720"
  },
  {
    "text": "is the you know the this is what we've worked up to so here we're making a RPC",
    "start": "1373720",
    "end": "1380260"
  },
  {
    "text": "call to a back-end service and it's a synchronous synchronous call meaning that once we make the call we're going",
    "start": "1380260",
    "end": "1386080"
  },
  {
    "text": "to wait we're gonna send we pass it a configuration object and the actual",
    "start": "1386080",
    "end": "1393310"
  },
  {
    "text": "audio data that we've captured and then it sends it to the to the back-end",
    "start": "1393310",
    "end": "1399070"
  },
  {
    "text": "server and wait and when the result comes back everything gets everything",
    "start": "1399070",
    "end": "1405400"
  },
  {
    "text": "gets DC realized and unmarshal into a type that was defining the IDL and then",
    "start": "1405400",
    "end": "1411880"
  },
  {
    "text": "we take the type and we use it down here so that the device can react to what",
    "start": "1411880",
    "end": "1417460"
  },
  {
    "text": "came back so what this shows is we're basically making a call to a remote",
    "start": "1417460",
    "end": "1423370"
  },
  {
    "text": "service and it looks like we're making a local call using idiomatic Python call",
    "start": "1423370",
    "end": "1430260"
  },
  {
    "text": "to a remote service what we're not seeing is the plumbing that goes",
    "start": "1430260",
    "end": "1435400"
  },
  {
    "text": "underneath all that all of that has been extracted for us so we don't get to see it we just concentrate on the the call",
    "start": "1435400",
    "end": "1442510"
  },
  {
    "text": "and it looks like it's it's a local call so again I don't have this the full gear",
    "start": "1442510",
    "end": "1449380"
  },
  {
    "text": "setup but I do have this hopefully it",
    "start": "1449380",
    "end": "1455110"
  },
  {
    "text": "won't so this is me playing with ok so",
    "start": "1455110",
    "end": "1461190"
  },
  {
    "text": "Internet will fail me now oh there you go so I'm just sure come on",
    "start": "1461190",
    "end": "1468850"
  },
  {
    "text": "okay eventually we'll play because I did that earlier and it kind of played but",
    "start": "1468850",
    "end": "1473919"
  },
  {
    "text": "anyway I'm just showing the actual device and this is the microphone it's a USB microphone connected to the PI right",
    "start": "1473919",
    "end": "1481450"
  },
  {
    "text": "here and you know what I think I have",
    "start": "1481450",
    "end": "1488049"
  },
  {
    "text": "that",
    "start": "1488049",
    "end": "1490230"
  },
  {
    "text": "oh wait was it there's a sofa twist all",
    "start": "1502700",
    "end": "1511580"
  },
  {
    "text": "right thought I had this wait I do right today",
    "start": "1511580",
    "end": "1520070"
  },
  {
    "text": "was a good day oh crap alright so today was a good day",
    "start": "1520070",
    "end": "1526640"
  },
  {
    "text": "as what I read into the microphone and the it is anniversary of the Chernobyl",
    "start": "1526640",
    "end": "1534260"
  },
  {
    "text": "nuclear disaster and I started to read a piece of article and it translated so it",
    "start": "1534260",
    "end": "1540350"
  },
  {
    "text": "went kind of by a fast but basically it shows you that just reading into the microphone they transmit did the",
    "start": "1540350",
    "end": "1546890"
  },
  {
    "text": "transcription and displayed the and displayed the data so what did we see we",
    "start": "1546890",
    "end": "1557120"
  },
  {
    "text": "saw that we were able to create we're",
    "start": "1557120",
    "end": "1563090"
  },
  {
    "text": "able to talk to several devices several types of devices and one was a service",
    "start": "1563090",
    "end": "1570950"
  },
  {
    "text": "sitting somewhere we don't even know where but we were able to seamlessly talk to it using using G RPC just by",
    "start": "1570950",
    "end": "1580910"
  },
  {
    "text": "defining the the IDL and compiling that IDL into local code and that we can we",
    "start": "1580910",
    "end": "1587420"
  },
  {
    "text": "can we can make a remote call to the service and we also saw how we can use",
    "start": "1587420",
    "end": "1595480"
  },
  {
    "text": "protocol buffers to run on tiny devices no more than the size of a stamp that",
    "start": "1595480",
    "end": "1602660"
  },
  {
    "text": "will collect data and send data to you know pretty much anywhere in the world",
    "start": "1602660",
    "end": "1608020"
  },
  {
    "text": "and have that data be consumed by something that is completely written in",
    "start": "1608020",
    "end": "1613490"
  },
  {
    "text": "a different language so everything that I've discussed is is on github probably",
    "start": "1613490",
    "end": "1622820"
  },
  {
    "text": "need a little polish as far as documentation but everything that that we we talked about here is on github and",
    "start": "1622820",
    "end": "1629990"
  },
  {
    "text": "if you're interested in looking that into that kind of activity because to me it's fun",
    "start": "1629990",
    "end": "1635580"
  },
  {
    "text": "you're welcome to and and I'm on github and this is my my handle so if you want",
    "start": "1635580",
    "end": "1640950"
  },
  {
    "text": "to contact me we can you know we can chat and that's it I think I got five",
    "start": "1640950",
    "end": "1646679"
  },
  {
    "text": "minutes to spare if you have questions question say it again yeah come oh thank",
    "start": "1646679",
    "end": "1663300"
  },
  {
    "text": "you sir that's a lot I want to ask if",
    "start": "1663300",
    "end": "1668970"
  },
  {
    "text": "you could elaborate a brief moment when to use protocol buffers and meant to use",
    "start": "1668970",
    "end": "1675000"
  },
  {
    "text": "flatbuffers yeah I looked up so I ran into flatbuffers now the thing about",
    "start": "1675000",
    "end": "1681690"
  },
  {
    "text": "flatbuffers I'm not sure if the amount of support as far as language is as",
    "start": "1681690",
    "end": "1689850"
  },
  {
    "text": "widely you is as wide as protocol buffers now flatbuffers claim to fame is",
    "start": "1689850",
    "end": "1696179"
  },
  {
    "text": "that they it's even smaller than protocol buffers and they've been more efficient I think if flatbuffers get to",
    "start": "1696179",
    "end": "1704400"
  },
  {
    "text": "a point where it is well supported then it probably wouldn't make even more sense to to bring it on unto smaller",
    "start": "1704400",
    "end": "1711150"
  },
  {
    "text": "devices flatbuffers I can see would work even better on the tiny device like you",
    "start": "1711150",
    "end": "1717900"
  },
  {
    "text": "know something with 32 kilobit but I didn't I didn't look I didn't go further",
    "start": "1717900",
    "end": "1723480"
  },
  {
    "text": "down that rabbit hole I just concentrate on on on protocol buffers but thanks for",
    "start": "1723480",
    "end": "1729809"
  },
  {
    "text": "the question yeah what about the the the",
    "start": "1729809",
    "end": "1737970"
  },
  {
    "text": "let's say IOT you related tooling so when shipping a product to actual customers my back-end services obviously",
    "start": "1737970",
    "end": "1745860"
  },
  {
    "text": "have to be a multi-tenant and capable to solve each customer of course is",
    "start": "1745860",
    "end": "1751980"
  },
  {
    "text": "seperated from each other in the state they are data as well so and and the typical MQTT brokers have yeah have",
    "start": "1751980",
    "end": "1759990"
  },
  {
    "text": "utilities for that I have a device registry where you can say okay this is device right XYZ it has a it has a pop",
    "start": "1759990",
    "end": "1767580"
  },
  {
    "text": "key in a fingerprint and this is this device and all the stuff is missing for",
    "start": "1767580",
    "end": "1772950"
  },
  {
    "text": "me here yeah well so MQ right so you're",
    "start": "1772950",
    "end": "1778500"
  },
  {
    "text": "absolutely right so two things I didn't I didn't do here the program that I",
    "start": "1778500",
    "end": "1783600"
  },
  {
    "text": "wrote could have easily been pushed onto a kubernetes that's that's one secondly",
    "start": "1783600",
    "end": "1790100"
  },
  {
    "text": "I want to make it clear that MQTT doesn't go away it just solves the",
    "start": "1790100",
    "end": "1798330"
  },
  {
    "text": "problem one way whereas this solves the problem slightly better because it so",
    "start": "1798330",
    "end": "1805460"
  },
  {
    "text": "you can still do so gr feces does support the it's you can put security",
    "start": "1805460",
    "end": "1812970"
  },
  {
    "text": "around it this one now as far as multi-tenancy it depends on how you want",
    "start": "1812970",
    "end": "1820770"
  },
  {
    "text": "to solve it because on the on the server all it is is a HTTP endpoint so ideally",
    "start": "1820770",
    "end": "1828990"
  },
  {
    "text": "I would want I don't know some kind of software that is a device I mean it's",
    "start": "1828990",
    "end": "1834870"
  },
  {
    "text": "agnostic to the transport I don't care well they writes ok so they do have they",
    "start": "1834870",
    "end": "1841080"
  },
  {
    "text": "do have those platforms out there they do have you know they do have a iot",
    "start": "1841080",
    "end": "1848550"
  },
  {
    "text": "platforms that solve some of that for you some of it I don't think I may be",
    "start": "1848550",
    "end": "1854400"
  },
  {
    "text": "completely wrong I didn't see any that uses the G RPC yet right right",
    "start": "1854400",
    "end": "1864840"
  },
  {
    "text": "all of them are using or not all but the majority of what I've came across were MQTT MQTT ready right but it sounds like",
    "start": "1864840",
    "end": "1874890"
  },
  {
    "text": "an opportunity for them to widen their widen their uh their feature base right",
    "start": "1874890",
    "end": "1881460"
  },
  {
    "text": "yeah my question is are going into that direction if you know if there is some",
    "start": "1881460",
    "end": "1887700"
  },
  {
    "text": "good open source tool or or server that does that kind of stuff it handles the",
    "start": "1887700",
    "end": "1894450"
  },
  {
    "text": "authentication and you can register your devices there but you can block the",
    "start": "1894450",
    "end": "1899760"
  },
  {
    "text": "transport stuff in yeah I don't know I don't know no one",
    "start": "1899760",
    "end": "1904830"
  },
  {
    "text": "yeah I don't like I said the the transport that I've came across and that's why I started looking through",
    "start": "1904830",
    "end": "1910200"
  },
  {
    "text": "this and I'm like well why isn't anybody doing GRCC because to me it it kind of",
    "start": "1910200",
    "end": "1917210"
  },
  {
    "text": "you know it's shorten or make the the surface the solution surface a little",
    "start": "1917210",
    "end": "1922559"
  },
  {
    "text": "smaller because all I need is just spare now I should also professor say that",
    "start": "1922559",
    "end": "1929179"
  },
  {
    "text": "this is only for real-time interactive",
    "start": "1929179",
    "end": "1935370"
  },
  {
    "text": "IOT if you're doing something else then MQTT makes sense if you can if you're",
    "start": "1935370",
    "end": "1942360"
  },
  {
    "text": "gathering information and collecting information batching it and do analysis and you still want something like a",
    "start": "1942360",
    "end": "1949860"
  },
  {
    "text": "messaging service and especially if you're interested in you know if you're",
    "start": "1949860",
    "end": "1955380"
  },
  {
    "text": "looking for guaranteed delivery you know that kind of those kind of those kind of",
    "start": "1955380",
    "end": "1961919"
  },
  {
    "text": "a features so but I don't know of any platform that coalesce all of this and",
    "start": "1961919",
    "end": "1968429"
  },
  {
    "text": "make it look seamless and you don't even care about what what you know what the protocol is I don't know if any of",
    "start": "1968429",
    "end": "1975419"
  },
  {
    "text": "anything like that thanks I think I had one more yeah he",
    "start": "1975419",
    "end": "1982650"
  },
  {
    "text": "has his hand I'm sorry I do sorry okay",
    "start": "1982650",
    "end": "1989450"
  },
  {
    "text": "can you repeat that please yeah I'm still hard of hearing your demo",
    "start": "1993980",
    "end": "2001280"
  },
  {
    "text": "you did protobuf on the ESP device and then gr pc on the raspberry device did",
    "start": "2001280",
    "end": "2007669"
  },
  {
    "text": "you try with the GRP cos on the SPU I know there's no there's no there's no",
    "start": "2007669",
    "end": "2014780"
  },
  {
    "text": "project so the only reason why the only reason why I was able to run protocol",
    "start": "2014780",
    "end": "2020960"
  },
  {
    "text": "buffer on the ESP devices because I found the Nano PB project there are a couple of others out there but this one",
    "start": "2020960",
    "end": "2027140"
  },
  {
    "text": "was the better maintain project but as far as protocol G RPC itself",
    "start": "2027140",
    "end": "2035120"
  },
  {
    "text": "first of all you only get 30 to kill a bit 32 kilobyte to run so no and not to",
    "start": "2035120",
    "end": "2042350"
  },
  {
    "text": "say it's impossible but I just didn't run into it cord is hard-coded a server IP address",
    "start": "2042350",
    "end": "2049550"
  },
  {
    "text": "on the SPU guys yeah you have yes that's one of the reason why I couldn't run it because it you have to hard code yes",
    "start": "2049550",
    "end": "2056000"
  },
  {
    "text": "yeah yeah so you still have to do that yeah thanks no no problem I think some is that it we're done",
    "start": "2056000",
    "end": "2065419"
  },
  {
    "text": "one more so if I understand the question",
    "start": "2065420",
    "end": "2088820"
  },
  {
    "text": "is how big is it overhead once you put a power buffer I think it was 24 percent",
    "start": "2088820",
    "end": "2097600"
  },
  {
    "text": "so I use 24 percent of that 32 kilobyte",
    "start": "2097600",
    "end": "2102850"
  },
  {
    "text": "yeah so because so I use Arduino and after I upload the code it tells you a",
    "start": "2105340",
    "end": "2113570"
  },
  {
    "text": "percentage of what you've used it was a I think it was 24 percent yeah so right",
    "start": "2113570",
    "end": "2120340"
  },
  {
    "text": "you're sure I think I have one more in the back still",
    "start": "2120340",
    "end": "2126160"
  },
  {
    "text": "thank you so my questions around the middleware that you mentioned earlier and I'm trying to figure out like where",
    "start": "2131970",
    "end": "2139180"
  },
  {
    "text": "does the middleware actually sit within the lifecycle of defining the IDL compiling you have to ask the hardest",
    "start": "2139180",
    "end": "2146020"
  },
  {
    "text": "question yeah now I'm kidding so it's part of the gr",
    "start": "2146020",
    "end": "2151750"
  },
  {
    "text": "PC API itself so you can write code so what you do is you compile your idea all",
    "start": "2151750",
    "end": "2159370"
  },
  {
    "text": "right and part of what you get with gr FEC is a set of libraries okay and as",
    "start": "2159370",
    "end": "2167680"
  },
  {
    "text": "part of the library you can write extension points so when and in these",
    "start": "2167680",
    "end": "2173260"
  },
  {
    "text": "extension points what you could do is insert code where right before I'm just",
    "start": "2173260",
    "end": "2179560"
  },
  {
    "text": "giving you an example right before it makes say a Senate request out to the server you can your code get gets called",
    "start": "2179560",
    "end": "2188920"
  },
  {
    "text": "as a call back to do something that thing may be logging it may be security",
    "start": "2188920",
    "end": "2197190"
  },
  {
    "text": "there's a tons of other stuff you can do right and as it stands are they any like",
    "start": "2197190",
    "end": "2203410"
  },
  {
    "text": "high profile bits of middleware that are openly available that are being made use of for somebody using GRDC yeah actually",
    "start": "2203410",
    "end": "2211150"
  },
  {
    "text": "there is there is a I forget the name but there is a a project that is a",
    "start": "2211150",
    "end": "2219280"
  },
  {
    "text": "collection of middleware type code that you can that's already defined that you can use in your own",
    "start": "2219280",
    "end": "2225820"
  },
  {
    "text": "projects I just can't remember the name like right now it escapes me but if you do a search on google for geo RPC middleware",
    "start": "2225820",
    "end": "2233050"
  },
  {
    "text": "yep chances are it'll come up okay thank you sure anything else all right guys",
    "start": "2233050",
    "end": "2240460"
  },
  {
    "text": "thank you",
    "start": "2240460",
    "end": "2243030"
  }
]