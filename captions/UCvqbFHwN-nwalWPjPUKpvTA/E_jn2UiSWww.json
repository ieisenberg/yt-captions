[
  {
    "text": "hello everyone welcome to recent advancements in container isolation I",
    "start": "30",
    "end": "5720"
  },
  {
    "text": "think we're gonna get started so hi my",
    "start": "5720",
    "end": "11550"
  },
  {
    "text": "name is Tim all Claire I'm a software engineer at Google and I'm also co-chair",
    "start": "11550",
    "end": "17460"
  },
  {
    "text": "of criminais cig auth and a member of the product security team and I'm Aiden scandal I'm also a software engineer I",
    "start": "17460",
    "end": "23730"
  },
  {
    "text": "work on G Weiser so today we're going to talk to you about container isolation",
    "start": "23730",
    "end": "30119"
  },
  {
    "text": "but before we dive into that I want to make sure we're all on the same same page about what we're actually talking",
    "start": "30119",
    "end": "35219"
  },
  {
    "text": "about when we say isolation a model of security that I really like is the confident she can potentiality integrity",
    "start": "35219",
    "end": "42690"
  },
  {
    "text": "and availability model or CIA model these are three key properties that we",
    "start": "42690",
    "end": "48000"
  },
  {
    "text": "want to maintain across any isolation boundary but there's two other properties that I want to call out the",
    "start": "48000",
    "end": "54570"
  },
  {
    "text": "first is that isolation is really a multi-dimensional problem it's not enough to just isolate the network when",
    "start": "54570",
    "end": "61230"
  },
  {
    "text": "an attacker can potentially escalate privileges through unsecured sis calls",
    "start": "61230",
    "end": "66689"
  },
  {
    "text": "and then attack the network from a different angle and security really requires a holistic approach the second",
    "start": "66689",
    "end": "74549"
  },
  {
    "text": "property to call out is that isolation is a directional problem just because a",
    "start": "74549",
    "end": "80159"
  },
  {
    "text": "container is well hardened and the node is isolated from processes in that container doesn't mean the inverse is",
    "start": "80159",
    "end": "86460"
  },
  {
    "text": "true process running as root on the node for instance the cubelet can easily",
    "start": "86460",
    "end": "91920"
  },
  {
    "text": "reach into that container read its data and use its credentials that sort of thing so with that I'll hand it off to",
    "start": "91920",
    "end": "98909"
  },
  {
    "text": "Aidan to tell you a story so we're gonna tell a story to help frame some of these",
    "start": "98909",
    "end": "104759"
  },
  {
    "text": "ideas in more concrete terms now we're until this story with a help of a little bit of time travel",
    "start": "104759",
    "end": "109920"
  },
  {
    "text": "so everyone arriving late might be really confused but that's okay everyone here will know what's going on so almost",
    "start": "109920",
    "end": "116549"
  },
  {
    "text": "no one knows this about me but I don't really care about containers my true passion is actually meme based",
    "start": "116549",
    "end": "122159"
  },
  {
    "text": "cryptocurrency and in 2019 Tim and I both leave Google to start an online me",
    "start": "122159",
    "end": "127619"
  },
  {
    "text": "I'll coin exchange now everyone knows that the past few years have been rough for cryptocurrency generally",
    "start": "127619",
    "end": "133860"
  },
  {
    "text": "but meow coin just takes off like a rocket unfortunately our success is rather short-lived and we're back here",
    "start": "133860",
    "end": "140730"
  },
  {
    "text": "in 2020 to present a retrospective of the great meow coin theft so our story",
    "start": "140730",
    "end": "149910"
  },
  {
    "text": "starts with an attacker Eve who manages to penetrate our clusters the way she",
    "start": "149910",
    "end": "157200"
  },
  {
    "text": "does this is by hiding a backdoor in the popular NPM library declawed we made",
    "start": "157200",
    "end": "163770"
  },
  {
    "text": "heavy use of this library in our meme service which attaches a meme to every meow coin transaction and Eve exploited",
    "start": "163770",
    "end": "171060"
  },
  {
    "text": "the backdoor to gain a foothold into our cluster in the memes pod prod or memes",
    "start": "171060",
    "end": "176820"
  },
  {
    "text": "prod pod so we start here Eve has code",
    "start": "176820",
    "end": "181920"
  },
  {
    "text": "execution in memes prod and the very first thing she is gonna do is attack",
    "start": "181920",
    "end": "187020"
  },
  {
    "text": "the API server because she knows she can get full access to the cluster from there fortunately we're using best",
    "start": "187020",
    "end": "194070"
  },
  {
    "text": "practices and since memes prod doesn't need to talk to the API server we haven't even mounted a service account",
    "start": "194070",
    "end": "199590"
  },
  {
    "text": "credential into memes prod so that's a dead end next she goes after the meow wallet",
    "start": "199590",
    "end": "206640"
  },
  {
    "text": "where the goods are fortunately we're using sto to implement a least",
    "start": "206640",
    "end": "212970"
  },
  {
    "text": "privileged model of network access we use fine-grained authorization policies",
    "start": "212970",
    "end": "218310"
  },
  {
    "text": "through ISTE Oh sto is 1.0 since 2018 as I'm sure you",
    "start": "218310",
    "end": "224100"
  },
  {
    "text": "all know and we're not going to say too much more about this here but there's an entire track on service message meshes",
    "start": "224100",
    "end": "231180"
  },
  {
    "text": "on Thursday and I encourage you to check it out if you're interested in this topic so here is where we got a little",
    "start": "231180",
    "end": "240390"
  },
  {
    "text": "bit lucky we were running our memes prod service inside a sandbox and the reason is that it's exposed to the public",
    "start": "240390",
    "end": "246299"
  },
  {
    "text": "Internet and we use every random dependency we can find from every corner of github so we decided would be prudent",
    "start": "246299",
    "end": "253170"
  },
  {
    "text": "to to keep it inside a sandbox so Eve was was not able to escalate directly",
    "start": "253170",
    "end": "258479"
  },
  {
    "text": "now the reason you might use a sandbox is that you want to mitigate the risk of a kernel owner ability if there's a high",
    "start": "258479",
    "end": "264479"
  },
  {
    "text": "chance of running potentially malicious code inside that container and this may be",
    "start": "264479",
    "end": "269940"
  },
  {
    "text": "running user code directly or it may be some front-end that you feel there's a high chance that's exploited or you're",
    "start": "269940",
    "end": "276990"
  },
  {
    "text": "running some media transcoder or operating on some other potentially malicious user input or maybe just like",
    "start": "276990",
    "end": "282240"
  },
  {
    "text": "us you have a big pile of third-party dependencies that you don't necessarily trust or can't audit so the way a",
    "start": "282240",
    "end": "288479"
  },
  {
    "text": "sandbox can add protection depends on the type of sandbox since this is a very hot topic we're gonna be talking about a",
    "start": "288479",
    "end": "294690"
  },
  {
    "text": "few different variants in general when you run an application or a container they're interacting directly with a",
    "start": "294690",
    "end": "301020"
  },
  {
    "text": "fairly broad complex kernel surface and the whole point of a sandbox is that you",
    "start": "301020",
    "end": "306240"
  },
  {
    "text": "want to either transform limit or somehow insert an additional boundary in",
    "start": "306240",
    "end": "311460"
  },
  {
    "text": "this layer to prevent or mitigate the risk of criminal abilities leading to privilege escalations so just to",
    "start": "311460",
    "end": "317190"
  },
  {
    "text": "reinforce this a little bit this table shows a list of linux kernel owner abilities actually coda code execution",
    "start": "317190",
    "end": "323759"
  },
  {
    "text": "vulnerabilities published in 2017 and this isn't a rag on the kernel at all kernel is an incredible piece of",
    "start": "323759",
    "end": "329789"
  },
  {
    "text": "software but its enormous Lee complex and has broad range of responsibilities",
    "start": "329789",
    "end": "335490"
  },
  {
    "text": "so with any large complex piece of software there's bound to be bugs people can exploit including the sandbox layers that I'll talk about and you just want",
    "start": "335490",
    "end": "342479"
  },
  {
    "text": "additional boundaries additional layers of Defense so the first thing to",
    "start": "342479",
    "end": "348060"
  },
  {
    "text": "consider is that the host kernel itself has a bunch of mechanisms built-in for limiting that surface assume things like",
    "start": "348060",
    "end": "353520"
  },
  {
    "text": "the SATCOM PPF policy for filtering system calls or LSM modules and these are fantastically useful and you should",
    "start": "353520",
    "end": "359699"
  },
  {
    "text": "use it as part of your security best practice even for applications you trust because they're very very high performance very low overhead and they",
    "start": "359699",
    "end": "367530"
  },
  {
    "text": "don't really change the semantics of the container at all the one challenge with using these for sort of arbitrary workloads is that there's a fundamental",
    "start": "367530",
    "end": "374159"
  },
  {
    "text": "trade-off between the the degree of restrictive nough C's so the degree you can lock down that kernel surface and",
    "start": "374159",
    "end": "380490"
  },
  {
    "text": "the the diversity of workloads you can run so it's not necessarily feasible to take an arbitrary container that you",
    "start": "380490",
    "end": "385860"
  },
  {
    "text": "know nothing about and run it using a very restrictive set comp policy so that leads to the first class of sandbox that",
    "start": "385860",
    "end": "391740"
  },
  {
    "text": "we'll talk about which is machine virtualization the idea here is you take a container or a pod and you insert you",
    "start": "391740",
    "end": "398250"
  },
  {
    "text": "you put that in its own the so VMs are fantastic mature technology",
    "start": "398250",
    "end": "403360"
  },
  {
    "text": "on bare metal you typically have very good performance now there's a stream of sort of cloud native hypervisors that",
    "start": "403360",
    "end": "410229"
  },
  {
    "text": "are coming out that are focused on low overhead fastboot times no legacy stuff but there's a couple of challenges with",
    "start": "410229",
    "end": "417370"
  },
  {
    "text": "with VMs in this model in general the first is that there's a separate guest kernel inside this VM M that's generally",
    "start": "417370",
    "end": "423789"
  },
  {
    "text": "talking physical cores and physical memory and so you'll have a second scheduler a second page cache that can",
    "start": "423789",
    "end": "429940"
  },
  {
    "text": "reclaim mechanism and the degree to that's to which that's a problem really depends on the kind of workload that",
    "start": "429940",
    "end": "435370"
  },
  {
    "text": "you're running here the second challenge is that hypervisors don't natively run containers right they're run machine",
    "start": "435370",
    "end": "440919"
  },
  {
    "text": "images and so you need proxies and various plumbing and infrastructure to actually wire together containers that",
    "start": "440919",
    "end": "446590"
  },
  {
    "text": "are running inside those VMs and that's what projects like cata containers are focused on doing so the second category",
    "start": "446590",
    "end": "452380"
  },
  {
    "text": "of sandbox that I'll talk about I'm calling kernel virtualization and the idea here is that the sandbox isn't",
    "start": "452380",
    "end": "457960"
  },
  {
    "text": "talking directly the kernel anymore but is talking to some other kernel interface and you can do this for",
    "start": "457960",
    "end": "463000"
  },
  {
    "text": "compatibility reasons there's a couple of very famous examples so Alex owns four smart OS allows you to run Linux",
    "start": "463000",
    "end": "468400"
  },
  {
    "text": "containers windows subsystem for Linux another great example where the applications obviously not talking directly to Windows talking to some",
    "start": "468400",
    "end": "475120"
  },
  {
    "text": "other component that is brining Linux ABI or you can do this for isolation which is what G visor is focused on doing so",
    "start": "475120",
    "end": "481599"
  },
  {
    "text": "at the bottom there is a diagram of how do you guys it works and it's effectively a second user kernel that is",
    "start": "481599",
    "end": "487990"
  },
  {
    "text": "interpreting and implementing all of the application system calls and it does that not talking physical cores in",
    "start": "487990",
    "end": "494110"
  },
  {
    "text": "physical memory but rather speaking threads and memory mappings so it's trying to preserve the original",
    "start": "494110",
    "end": "500050"
  },
  {
    "text": "container semantics which makes it suitable for small high-density services it doesn't impose large fixed overheads",
    "start": "500050",
    "end": "505930"
  },
  {
    "text": "and it has a very fast sort of time so but this is a separate kernel",
    "start": "505930",
    "end": "511240"
  },
  {
    "text": "implementation it runs most things today but it's evolving fast there's some challenges around compatibility and",
    "start": "511240",
    "end": "517719"
  },
  {
    "text": "performance particularly for cases where we haven't really optimized for those things so the last class of sandbox that",
    "start": "517719",
    "end": "524770"
  },
  {
    "text": "I'll talk about I'm gonna call non Linux environments and I get asked about these a lot so I thought it would be really useful to",
    "start": "524770",
    "end": "530079"
  },
  {
    "text": "have a slide about them but these are things that are not necessarily running containers to running different kinds of workloads so a good example is",
    "start": "530079",
    "end": "537580"
  },
  {
    "text": "nabla containers which is a runtime that runs so low five of you know kernels and these can be really efficient they can",
    "start": "537580",
    "end": "544060"
  },
  {
    "text": "expose a very very small host system surface but you're only able to run certain kinds of workloads that have",
    "start": "544060",
    "end": "549880"
  },
  {
    "text": "been built for these environments you're only able to run you know kernels you're not able to like pull something off the shelf and run arbitrary docker",
    "start": "549880",
    "end": "555790"
  },
  {
    "text": "containers the next thing isolates CloudFlare had this famous blog post where they're talking about doing",
    "start": "555790",
    "end": "561430"
  },
  {
    "text": "multi-tenancy using using v8 and isolates and this is very similar you're running JavaScript and web assembly",
    "start": "561430",
    "end": "567340"
  },
  {
    "text": "programs you're able achieve high efficiency and performance but it's not running containers or what we what we",
    "start": "567340",
    "end": "573040"
  },
  {
    "text": "normally talk about is containers so all of these things are available there's",
    "start": "573040",
    "end": "578650"
  },
  {
    "text": "this new mechanism that you can use starting in kubernetes 112 called the runtime class this allows you to define",
    "start": "578650",
    "end": "584560"
  },
  {
    "text": "a distinct set of runtimes and then configure on a per pod basis which runtime to use and there's a number of",
    "start": "584560",
    "end": "591190"
  },
  {
    "text": "improvements that are landing including accounting for sandbox overhead being a",
    "start": "591190",
    "end": "597070"
  },
  {
    "text": "bit smarter about how you can match features how what how to know what can run with what and of course a whole bunch of stability performance testing",
    "start": "597070",
    "end": "603580"
  },
  {
    "text": "for the runtimes themselves so our",
    "start": "603580",
    "end": "609610"
  },
  {
    "text": "sandbox successfully contained Eve and protected our kernel surface from her",
    "start": "609610",
    "end": "615600"
  },
  {
    "text": "however we were running another meme service in our cluster the memes dev",
    "start": "615600",
    "end": "620620"
  },
  {
    "text": "service since this wasn't exposed to the Internet we hadn't bothered to sandbox it but our sto rules allowed for cross",
    "start": "620620",
    "end": "628030"
  },
  {
    "text": "communication between meme services and so she was able to exploit the same backdoor and jump to memes dev which is",
    "start": "628030",
    "end": "635140"
  },
  {
    "text": "non sandboxed so from here we'll talk a little about audit logging and how we",
    "start": "635140",
    "end": "640390"
  },
  {
    "text": "were able to piece together these these this attack so container ID back in 2018",
    "start": "640390",
    "end": "648010"
  },
  {
    "text": "was being actively discussed for extending the audit subsystem of Linux",
    "start": "648010",
    "end": "653670"
  },
  {
    "text": "this is actually the first native container concept in the kernel what we",
    "start": "653670",
    "end": "659830"
  },
  {
    "text": "think of containers as today are mostly pieced together through different different features of Linux",
    "start": "659830",
    "end": "666880"
  },
  {
    "text": "and there's no kind of native container concept within there so container ID",
    "start": "666880",
    "end": "672190"
  },
  {
    "text": "adds that that adds a way to tie audit events to a specific container but Eve",
    "start": "672190",
    "end": "680470"
  },
  {
    "text": "knew that we had a good at audit system so she decided to attack our to try and",
    "start": "680470",
    "end": "686350"
  },
  {
    "text": "obfuscate the logs by changing the system time thanks to the new time namespace that we were running and are",
    "start": "686350",
    "end": "693430"
  },
  {
    "text": "super up-to-date colonel when she changed the system time it only changed",
    "start": "693430",
    "end": "698589"
  },
  {
    "text": "the time within her container we're also using best practices even though we",
    "start": "698589",
    "end": "705130"
  },
  {
    "text": "didn't have a full virtualized machine or kernel we were still using various",
    "start": "705130",
    "end": "711100"
  },
  {
    "text": "host kernel mechanisms to contain that container as well so docker enables an",
    "start": "711100",
    "end": "718209"
  },
  {
    "text": "app armored profile by default on a Parmer enabled nodes but a new feature",
    "start": "718209",
    "end": "723610"
  },
  {
    "text": "called policy namespaces and with that policy stacking lets us layer on an",
    "start": "723610",
    "end": "728980"
  },
  {
    "text": "additional application specific profile to harden that even more so thanks to",
    "start": "728980",
    "end": "736480"
  },
  {
    "text": "those improvements she was only had a very small kernel surface exposed to her",
    "start": "736480",
    "end": "741839"
  },
  {
    "text": "but she attacked it anyway although we had a lot of vulnerabilities in 2017 we",
    "start": "741839",
    "end": "749529"
  },
  {
    "text": "saw much fewer in 2019 and 2020 thanks to the kernel self protection project",
    "start": "749529",
    "end": "755639"
  },
  {
    "text": "this is a project that aims to harden the kernel as opposed to adding new security features",
    "start": "755639",
    "end": "761889"
  },
  {
    "text": "I mean it's doing this through sea hardened c programming techniques things",
    "start": "761889",
    "end": "768730"
  },
  {
    "text": "that aren't necessarily new ideas but are very difficult to apply to a project as complex and as old as the Linux",
    "start": "768730",
    "end": "775720"
  },
  {
    "text": "kernel so just to highlight a few improvements the elimination of variable-length arrays protects against",
    "start": "775720",
    "end": "783279"
  },
  {
    "text": "stack exhaustion type attacks fixing bugs in switch statements through",
    "start": "783279",
    "end": "790769"
  },
  {
    "text": "incorrect fall through z' initializing local variables checking downs that sort",
    "start": "790769",
    "end": "796240"
  },
  {
    "text": "of thing another improvement comes through control low integrity so back in say 2017 a",
    "start": "796240",
    "end": "805280"
  },
  {
    "text": "buffer overflow attack would typically lead to an attacker writing some code on",
    "start": "805280",
    "end": "811310"
  },
  {
    "text": "to the Sun to the stack and then changing the the return address to jump",
    "start": "811310",
    "end": "816590"
  },
  {
    "text": "to that address on the stack from there they've gained code execution we fix this by setting the stack and the heap",
    "start": "816590",
    "end": "823850"
  },
  {
    "text": "to non-executable since programs don't typically run code out of the stack",
    "start": "823850",
    "end": "829660"
  },
  {
    "text": "this led attackers to use a technique called return oriented programming where",
    "start": "829660",
    "end": "835250"
  },
  {
    "text": "rather than writing the code directly to the stack they would just modify the return addresses to call existing",
    "start": "835250",
    "end": "841760"
  },
  {
    "text": "functions with arguments that control and by chaining together those function calls they effectively gained code",
    "start": "841760",
    "end": "847700"
  },
  {
    "text": "execution again that's what we fix with control flow integrity and two different",
    "start": "847700",
    "end": "852740"
  },
  {
    "text": "mechanisms around this one is to separate the call stack from the data",
    "start": "852740",
    "end": "857900"
  },
  {
    "text": "stack so a buffer overflow on the data stack wouldn't it would be hard to go",
    "start": "857900",
    "end": "863810"
  },
  {
    "text": "from there to modifying the call stack itself there's also some preliminary",
    "start": "863810",
    "end": "869150"
  },
  {
    "text": "hardware support coming out through Intel's control flow enforcement technology and arms pointer",
    "start": "869150",
    "end": "875390"
  },
  {
    "text": "authentication so everyone remembers",
    "start": "875390",
    "end": "881330"
  },
  {
    "text": "20:18 was a rough year for many reasons but one of those reasons was that we discovered that Hardware doesn't really",
    "start": "881330",
    "end": "886640"
  },
  {
    "text": "work the way we think it should work and so Eve started scratching at the",
    "start": "886640",
    "end": "891890"
  },
  {
    "text": "hardware to figure out if there any secrets or credentials that she could steal from the node itself and so as a",
    "start": "891890",
    "end": "898370"
  },
  {
    "text": "quick background on how spec e to execution works is an attacker will try to trick the processor into executing",
    "start": "898370",
    "end": "906350"
  },
  {
    "text": "down some path where it's accessing some data that they wouldn't normally be able to see and this is a problem because it",
    "start": "906350",
    "end": "912740"
  },
  {
    "text": "turns out that processors don't necessarily respect page table permission bits bounds checks or even",
    "start": "912740",
    "end": "919910"
  },
  {
    "text": "EPT translations in the speculative path which is very bad and then the on that",
    "start": "919910",
    "end": "926000"
  },
  {
    "text": "same path they use that data to generate some side effects in some shared architectural state that they can then",
    "start": "926000",
    "end": "932720"
  },
  {
    "text": "observe once the processor realizes oh that's not the path that I'm taking and unwise",
    "start": "932720",
    "end": "937810"
  },
  {
    "text": "that execution they can still infer the original data that they wanted to get access to so this could allow someone to",
    "start": "937810",
    "end": "944649"
  },
  {
    "text": "steal credentials keys anything on that on that same host unfortunate there was a lot of progress through 2018 and 2019",
    "start": "944649",
    "end": "950769"
  },
  {
    "text": "on this front including a lot of software mitigations so compilers have incorporated various fences to prevent",
    "start": "950769",
    "end": "958060"
  },
  {
    "text": "the bound check bypass vector variants the kernel now has two sets of page tables to ensure that users don't have",
    "start": "958060",
    "end": "964000"
  },
  {
    "text": "access to mappings that they shouldn't have access to the kernel can be compiled with ret killeen to ensure that",
    "start": "964000",
    "end": "969480"
  },
  {
    "text": "user space can't poison branch targets or use steering to access gadgets that they want and the kernel poisons",
    "start": "969480",
    "end": "976709"
  },
  {
    "text": "physical addresses for page tables aren't present to defeat the foreshadow attack and of course there's no more",
    "start": "976709",
    "end": "982450"
  },
  {
    "text": "lazy floating-point which is actually a performance gain anyways so our main lesson here we didn't actually take any action but our main lesson was to keep",
    "start": "982450",
    "end": "988420"
  },
  {
    "text": "all your kernels and tool chains up-to-date because this stuff is continuing to land there are also a number of hardware mitigations that",
    "start": "988420",
    "end": "994720"
  },
  {
    "text": "landed on 2018-2019 these include mechanisms to basically new control registers that allow the",
    "start": "994720",
    "end": "1000600"
  },
  {
    "text": "kernel to partition the branch target buffer to prevent using user values from",
    "start": "1000600",
    "end": "1006420"
  },
  {
    "text": "the branch target buffer or values from a lower privilege level allowed to flush that buffer on privileged transitions",
    "start": "1006420",
    "end": "1012740"
  },
  {
    "text": "and various things to prevent other kinds of attacks here so the lesson here",
    "start": "1012740",
    "end": "1018630"
  },
  {
    "text": "is also make sure you're keeping your firmware up-to-date principally because the kernel will select the most appropriate mechanism to use which could",
    "start": "1018630",
    "end": "1025798"
  },
  {
    "text": "be some mix of hardware and software mitigations so at this point Eve was pretty frustrated and she decided",
    "start": "1025799",
    "end": "1032160"
  },
  {
    "text": "instead of trying to attack our service she would just disrupt it by by degrading the service and being a noisy",
    "start": "1032160",
    "end": "1037829"
  },
  {
    "text": "neighbor so software is rarely bound purely by cycles it's usually bound by some other mix of",
    "start": "1037829",
    "end": "1044280"
  },
  {
    "text": "different architectural components like cache bandwidth memory bandwidth and so Eve for example just started running a",
    "start": "1044280",
    "end": "1051179"
  },
  {
    "text": "random video transcoding service and chewing up all of the memory bandwidth available and degrading the performance",
    "start": "1051179",
    "end": "1056610"
  },
  {
    "text": "of our memes prod service dramatically so this is an active research area particularly in light of the last things",
    "start": "1056610",
    "end": "1062640"
  },
  {
    "text": "I just talked about there's all these interesting side channels and so people are looking at how to isolate all of these shared arc four components but one thing you could",
    "start": "1062640",
    "end": "1069250"
  },
  {
    "text": "try today is Intel rdt which available in recent kernels and run C to impose",
    "start": "1069250",
    "end": "1075279"
  },
  {
    "text": "limits on cache bandwidth and memory bandwidth and prevent the noisy neighbor problem unfortunately we like everyone else were",
    "start": "1075279",
    "end": "1082990"
  },
  {
    "text": "taken by surprise in 2019 when some security researchers discovered impossible execution and he was able to",
    "start": "1082990",
    "end": "1089320"
  },
  {
    "text": "escalate privileges right to the node so",
    "start": "1089320",
    "end": "1095529"
  },
  {
    "text": "this brings us to chapter three escalating privileges Eve has now gained code execution as a root on the node and",
    "start": "1095529",
    "end": "1102669"
  },
  {
    "text": "we'll see what she can do from there so the first thing is now Eve has access to",
    "start": "1102669",
    "end": "1109120"
  },
  {
    "text": "all of the credentials running on the nude this includes the cubelets credentials as well as any other",
    "start": "1109120",
    "end": "1114340"
  },
  {
    "text": "services that are running on that same note so now she's going to go back to the API server and let's take a look at",
    "start": "1114340",
    "end": "1121000"
  },
  {
    "text": "a session log and see what what exactly she did so first she uses the cubelets",
    "start": "1121000",
    "end": "1126549"
  },
  {
    "text": "cube config which includes its credentials to start making requests to",
    "start": "1126549",
    "end": "1132220"
  },
  {
    "text": "the API server she looks at the pods that are running and here we see an",
    "start": "1132220",
    "end": "1137409"
  },
  {
    "text": "abbreviated list of just the ones we care about and now she's going to try and exec into that Miao wallet now coin",
    "start": "1137409",
    "end": "1145570"
  },
  {
    "text": "wallet but fortunately since the cubelet doesn't need to exec into pods",
    "start": "1145570",
    "end": "1151860"
  },
  {
    "text": "especially pods on on their nodes we forbid this through least privileged",
    "start": "1151860",
    "end": "1157409"
  },
  {
    "text": "scoping on that so she takes a closer look at the Miao coin wallet and sees",
    "start": "1157409",
    "end": "1162970"
  },
  {
    "text": "that it uses this wallet key secret that sounds pretty juicy so she tries to grab",
    "start": "1162970",
    "end": "1168549"
  },
  {
    "text": "that secret fortunately this is forbidden through something called the nude authorizer which has been in",
    "start": "1168549",
    "end": "1175570"
  },
  {
    "text": "communities since 1:7 and what that does is it maintains a graph of all the",
    "start": "1175570",
    "end": "1180820"
  },
  {
    "text": "resources that are required by all the pods that are running on a node and so",
    "start": "1180820",
    "end": "1186460"
  },
  {
    "text": "in this case there weren't any pods running on node one that used the wallet key and therefore node one has no",
    "start": "1186460",
    "end": "1193750"
  },
  {
    "text": "business reading wall at key and it can forbid it but Eve has another trick up",
    "start": "1193750",
    "end": "1199389"
  },
  {
    "text": "her sleeve she says what if I can coerce the wallet to be rescheduled on",
    "start": "1199389",
    "end": "1204790"
  },
  {
    "text": "to node1 so she takes a closer look at the wallet and sees that it's using a",
    "start": "1204790",
    "end": "1210430"
  },
  {
    "text": "node affinity term to schedule the the wallet workload onto a node that's",
    "start": "1210430",
    "end": "1216190"
  },
  {
    "text": "labeled with a sensitivity of greater than 10 no problem she says I'll just",
    "start": "1216190",
    "end": "1221559"
  },
  {
    "text": "patch node 1 to have that set that sensitivity to 11 but this is forbidden",
    "start": "1221559",
    "end": "1227380"
  },
  {
    "text": "as of 113 because the node restriction kubernetes dot IO label prefix is always",
    "start": "1227380",
    "end": "1235540"
  },
  {
    "text": "forbidden we're also going to work on kind of ramping up the the number of",
    "start": "1235540",
    "end": "1241300"
  },
  {
    "text": "labels that are forbidden as well but so",
    "start": "1241300",
    "end": "1246610"
  },
  {
    "text": "far we've only been talking about using the cubelet credentials itself one of",
    "start": "1246610",
    "end": "1252760"
  },
  {
    "text": "the the open areas going into 2019 or I guess we did this in 2019 is to apply",
    "start": "1252760",
    "end": "1260770"
  },
  {
    "text": "these same restrictions to the demon sets and the other workloads that might be running on the node because those if",
    "start": "1260770",
    "end": "1266679"
  },
  {
    "text": "they need to say edit the node then then those workloads would be able to change those labels so at this point",
    "start": "1266679",
    "end": "1275230"
  },
  {
    "text": "Eva's starting to starting to get a little worried and she wants to at least maintain persistence on this node so she",
    "start": "1275230",
    "end": "1282370"
  },
  {
    "text": "tries to leave a rootkit behind fortunately we're using a container",
    "start": "1282370",
    "end": "1288400"
  },
  {
    "text": "specific image with a read-only root filesystem and we've also heard it protected the kernel via boot",
    "start": "1288400",
    "end": "1296110"
  },
  {
    "text": "attestation to make sure a custom kernel or any unsigned kernel modules can't be",
    "start": "1296110",
    "end": "1301270"
  },
  {
    "text": "loaded but she has one other idea there's this metrics pusher service",
    "start": "1301270",
    "end": "1307510"
  },
  {
    "text": "running on node 1 and the metrics pusher receives metrics requests from other",
    "start": "1307510",
    "end": "1313600"
  },
  {
    "text": "workloads in the cluster in order to make sure that those other workloads are",
    "start": "1313600",
    "end": "1318610"
  },
  {
    "text": "pushing metrics for themselves it delegates authentication to the API server through token review so the in",
    "start": "1318610",
    "end": "1327550"
  },
  {
    "text": "this case the meow wallet sends its service count token along with the request and",
    "start": "1327550",
    "end": "1333620"
  },
  {
    "text": "then metrics pusher delegates that authentication check to the API server",
    "start": "1333620",
    "end": "1339700"
  },
  {
    "text": "the problem is that metrics server now has a copy of the Miao wallets service",
    "start": "1339700",
    "end": "1345440"
  },
  {
    "text": "count credentials and it can do anything that that that service count is capable",
    "start": "1345440",
    "end": "1350480"
  },
  {
    "text": "of fortunately we now have enhanced service counts which add a few nice",
    "start": "1350480",
    "end": "1359090"
  },
  {
    "text": "features the first is expiration so those tokens that are stolen can only be",
    "start": "1359090",
    "end": "1364700"
  },
  {
    "text": "used for so long also per pod information is attached to the service",
    "start": "1364700",
    "end": "1370940"
  },
  {
    "text": "account so from the audit logs we can see exactly which pod or token was compromised and most importantly in this",
    "start": "1370940",
    "end": "1377900"
  },
  {
    "text": "scenario we have something called audiences so with audiences when now",
    "start": "1377900",
    "end": "1384350"
  },
  {
    "text": "Wallet sends that request to metrics pusher it's actually going to send a special token that's intended only to",
    "start": "1384350",
    "end": "1392150"
  },
  {
    "text": "talk to metrics pusher and cryptographically signed so that if Eve then uses that same token to try and",
    "start": "1392150",
    "end": "1399140"
  },
  {
    "text": "talk to the API server the API server will say no this isn't intended for me",
    "start": "1399140",
    "end": "1405250"
  },
  {
    "text": "so at this point we thought that Eve must have been pretty frustrated she",
    "start": "1407320",
    "end": "1412700"
  },
  {
    "text": "tried a lot of paths been pretty successful but she still did not have her closet any of our Miao coins so she",
    "start": "1412700",
    "end": "1419840"
  },
  {
    "text": "took a step back and reconsidered her strategy after a quick google search she",
    "start": "1419840",
    "end": "1428210"
  },
  {
    "text": "actually found some credentials admin credentials for our cluster on one of",
    "start": "1428210",
    "end": "1434720"
  },
  {
    "text": "our engineers github files repos so",
    "start": "1434720",
    "end": "1440230"
  },
  {
    "text": "thankfully none of that happened and as far as I know Miao coins are not a real thing maybe they are but we were",
    "start": "1440230",
    "end": "1447440"
  },
  {
    "text": "able to present and talk about a number of recent advancements in container isolation these are in various degrees",
    "start": "1447440",
    "end": "1454040"
  },
  {
    "text": "of development the things in black and green are things that you can use today the things that are yellow are things",
    "start": "1454040",
    "end": "1460280"
  },
  {
    "text": "that you can use today but are moving fast and improving fast and the things in red are stuff that will hopefully be",
    "start": "1460280",
    "end": "1467390"
  },
  {
    "text": "usable in the near future so just to",
    "start": "1467390",
    "end": "1475310"
  },
  {
    "text": "recap at the beginning we talked about the multidimensionality of isolation and here we saw a lot of examples about how",
    "start": "1475310",
    "end": "1482390"
  },
  {
    "text": "our attacker was able to attack from all different angles and slowly kind of weave her way through the system and so",
    "start": "1482390",
    "end": "1489770"
  },
  {
    "text": "remember that it's really important to kind of consider every angle when trying to get achieved secure isolation and",
    "start": "1489770",
    "end": "1496910"
  },
  {
    "text": "also we saw some examples of directionality where she was able to once she had escalated to the node",
    "start": "1496910",
    "end": "1503350"
  },
  {
    "text": "access the credentials of other services running on that node and there's one",
    "start": "1503350",
    "end": "1509210"
  },
  {
    "text": "takeaway that we want to make sure we get across today which is we talked about all of these really cool",
    "start": "1509210",
    "end": "1514270"
  },
  {
    "text": "technologies that prevent all sorts of advanced attacks but none of that matters at all if you don't get your",
    "start": "1514270",
    "end": "1520940"
  },
  {
    "text": "basics right and so kind of just to highlight three important ones use best",
    "start": "1520940",
    "end": "1527420"
  },
  {
    "text": "practices for credential management don't post your admin password to github",
    "start": "1527420",
    "end": "1533170"
  },
  {
    "text": "protect your network and services I this is something that I see for customers",
    "start": "1533170",
    "end": "1539570"
  },
  {
    "text": "forgetting occasionally you can isolate your container all you want but if you have wide open services on the network",
    "start": "1539570",
    "end": "1546080"
  },
  {
    "text": "that doesn't matter and finally of course keep everything up to date patch patch and patch some more so that thank",
    "start": "1546080",
    "end": "1553820"
  },
  {
    "text": "you [Applause]",
    "start": "1553820",
    "end": "1560690"
  },
  {
    "text": "I think we have a little time for",
    "start": "1561680",
    "end": "1569900"
  },
  {
    "text": "questions if anyone has anything the",
    "start": "1569900",
    "end": "1577850"
  },
  {
    "text": "question is can we talk about overheads for sandboxing and the optimizations",
    "start": "1577850",
    "end": "1583280"
  },
  {
    "text": "that have gone into it so did you mean one particular kind in Jimmy a specific",
    "start": "1583280",
    "end": "1589580"
  },
  {
    "text": "kind of sandbox thing or 4G Visor sure",
    "start": "1589580",
    "end": "1596690"
  },
  {
    "text": "so I mean it the different types of sandboxing are going to impose different",
    "start": "1596690",
    "end": "1602510"
  },
  {
    "text": "kinds of overheads so it's really hard to say one number for any given case for",
    "start": "1602510",
    "end": "1608780"
  },
  {
    "text": "example the I'm gonna get to a specific answer to your question but I'm just gonna frame it first the the machine",
    "start": "1608780",
    "end": "1615440"
  },
  {
    "text": "virtualization case where I mentioned it runs really efficiently on bare metal right but if you're running in a already",
    "start": "1615440",
    "end": "1621530"
  },
  {
    "text": "virtualized environment you want to carve things up all of a sudden you don't have bare metal anymore you're gonna incur massive overhead from nasty",
    "start": "1621530",
    "end": "1626570"
  },
  {
    "text": "virtualization so that's a particular cost that you'll pay in that environment for gee visor there are there are really",
    "start": "1626570",
    "end": "1632570"
  },
  {
    "text": "two specific kinds of overhead that you'll pay one is the for trapping for",
    "start": "1632570",
    "end": "1638750"
  },
  {
    "text": "intercepting the system calls from the application it really depends on the underlying platform so similarly if you",
    "start": "1638750",
    "end": "1644660"
  },
  {
    "text": "have bare metal and you can use like a KVM based platform you're doing Hardware interception that is not that high cost",
    "start": "1644660",
    "end": "1650720"
  },
  {
    "text": "but if you're running virtualized it's a much higher cost because you're using P trace or some other interception",
    "start": "1650720",
    "end": "1656120"
  },
  {
    "text": "mechanism but it again it depends on the exact environmental constraints because it could still be faster than nested",
    "start": "1656120",
    "end": "1661940"
  },
  {
    "text": "virtualization in many cases the other kind of overhead for 4G visor that I mentioned there is it's a separate",
    "start": "1661940",
    "end": "1667220"
  },
  {
    "text": "kernel implementation and so I said we haven't optimized for a lot of use cases yet the static file serving and sort of",
    "start": "1667220",
    "end": "1674450"
  },
  {
    "text": "big scalability use cases are two that I mentioned and that's just still really about the the implementation itself the",
    "start": "1674450",
    "end": "1679790"
  },
  {
    "text": "implementation of kernel and the these sort of things that you've looked at right we've looked at serve web application servers principally where",
    "start": "1679790",
    "end": "1686990"
  },
  {
    "text": "you're not trying to get as much static content out as you possibly can and they're typically pretty small right we're focused on the scale to zero",
    "start": "1686990",
    "end": "1692540"
  },
  {
    "text": "problem versus the let's run one enormous machine and this is a bunch",
    "start": "1692540",
    "end": "1698019"
  },
  {
    "text": "of scalability work that we have to do does that answer your question at all maybe not",
    "start": "1698019",
    "end": "1705508"
  },
  {
    "text": "so the question is docker the minimum kernel version for docker is much older",
    "start": "1742830",
    "end": "1750540"
  },
  {
    "text": "than what we consider a modern kernel you can go pretty far back and still run",
    "start": "1750540",
    "end": "1755820"
  },
  {
    "text": "docker and what are the chances of advancing that minimum requirement i-i-i",
    "start": "1755820",
    "end": "1763560"
  },
  {
    "text": "don't work on docker directly so I can't speak exactly for them but I'm guessing",
    "start": "1763560",
    "end": "1768750"
  },
  {
    "text": "that's more of a technical requirement so if you run on that kernel it will",
    "start": "1768750",
    "end": "1773880"
  },
  {
    "text": "work and it sounds like what you're asking about is more of a kind of a compliance thing to say for to comply",
    "start": "1773880",
    "end": "1781890"
  },
  {
    "text": "with whatever standard we want a minimum kernel version that sounds reasonable",
    "start": "1781890",
    "end": "1788250"
  },
  {
    "text": "but I don't know off the top of my head what's what's happening in that area",
    "start": "1788250",
    "end": "1793790"
  },
  {
    "text": "yeah so the question is about isolation of storage so we didn't touch on that",
    "start": "1802190",
    "end": "1810060"
  },
  {
    "text": "too much today because this is really an active research area and we don't know exactly what the plans are here but you",
    "start": "1810060",
    "end": "1817620"
  },
  {
    "text": "might have remote you may remember the sibling vulnerability that we talked about what was it last year at the end",
    "start": "1817620",
    "end": "1825420"
  },
  {
    "text": "of last year I think or I guess the beginning of this year we came out with the patch for it there's actually a",
    "start": "1825420",
    "end": "1830460"
  },
  {
    "text": "session I can't remember exactly when it is but talking about that vulnerability",
    "start": "1830460",
    "end": "1836250"
  },
  {
    "text": "and the fixes to it if you're interested just search for assembling comma schedule this morning oh it was this",
    "start": "1836250",
    "end": "1843840"
  },
  {
    "text": "morning oh sorry but so that's so we patched that",
    "start": "1843840",
    "end": "1849750"
  },
  {
    "text": "vulnerability by checking very manually for symlinks when volumes are mounted but that's a very kind of specific fix",
    "start": "1849750",
    "end": "1857790"
  },
  {
    "text": "for that one issue and even if you're using sandboxes the way we do it today",
    "start": "1857790",
    "end": "1863040"
  },
  {
    "text": "is we we basically mount that volume on",
    "start": "1863040",
    "end": "1868380"
  },
  {
    "text": "the host and then sort of pass it through to the sandbox through basically",
    "start": "1868380",
    "end": "1873600"
  },
  {
    "text": "you know the sandbox equivalent of a bind mount and this means that it's actually exposed to the",
    "start": "1873600",
    "end": "1879420"
  },
  {
    "text": "same types of vulnerabilities and we really only have one security boundary there but we want to for sandboxes so",
    "start": "1879420",
    "end": "1886170"
  },
  {
    "text": "we're starting to think about ways to maybe handle some of that mounting directly within the sandbox context so",
    "start": "1886170",
    "end": "1892200"
  },
  {
    "text": "it doesn't actually have to be mounted to the host but as I as I mentioned these are kind of like open an open",
    "start": "1892200",
    "end": "1898830"
  },
  {
    "text": "research area that we'll be looking into more in 2019",
    "start": "1898830",
    "end": "1903920"
  },
  {
    "text": "so I mean every distribution carries security patches right and you want to",
    "start": "1922020",
    "end": "1927790"
  },
  {
    "text": "just make sure that you're using a distribution that you trust to patch appropriately and up to date on all of",
    "start": "1927790",
    "end": "1934420"
  },
  {
    "text": "those trees right Lee I don't think there's a general answer to you know version X is gonna fix all your problems",
    "start": "1934420",
    "end": "1941640"
  },
  {
    "text": "but it's a very very very important best practice that's the point I wanted to hammer home on that one yeah so the",
    "start": "1941640",
    "end": "1962020"
  },
  {
    "text": "question is can we give access to multiple service accounts from one container the technical answer is yes if",
    "start": "1962020",
    "end": "1970300"
  },
  {
    "text": "you are willing to manage those service accounts yourself a basic way that you",
    "start": "1970300",
    "end": "1976330"
  },
  {
    "text": "could do that is to give permission to the main service account that you're attaching to the pod to act as or",
    "start": "1976330",
    "end": "1982570"
  },
  {
    "text": "impersonate the other accounts you can also manually mount those service",
    "start": "1982570",
    "end": "1987640"
  },
  {
    "text": "account tokens into the pod assuming it's running in the same namespace but",
    "start": "1987640",
    "end": "1993460"
  },
  {
    "text": "also I would kind of caveat that with once we have audiences for service",
    "start": "1993460",
    "end": "1999850"
  },
  {
    "text": "accounts hopefully the need for that for having multiple accounts isn't as high I",
    "start": "1999850",
    "end": "2005630"
  },
  {
    "text": "think we're just about out of time but I'll stick around outside if you have",
    "start": "2005630",
    "end": "2010770"
  },
  {
    "text": "any more questions",
    "start": "2010770",
    "end": "2013460"
  }
]