[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "hi my name is malta i'm an engineer at",
    "start": "240",
    "end": "2399"
  },
  {
    "text": "stack rocks",
    "start": "2399",
    "end": "3439"
  },
  {
    "text": "and today i'm going to talk about",
    "start": "3439",
    "end": "5120"
  },
  {
    "text": "talking to go drpc services via http1",
    "start": "5120",
    "end": "8720"
  },
  {
    "text": "that's a problem that i recently had to",
    "start": "8720",
    "end": "10400"
  },
  {
    "text": "solve at stackrocks",
    "start": "10400",
    "end": "11920"
  },
  {
    "text": "and i want to jump right in at",
    "start": "11920",
    "end": "14480"
  },
  {
    "text": "stackrocks we're building an application",
    "start": "14480",
    "end": "16240"
  },
  {
    "text": "which is deployed in the kubernetes",
    "start": "16240",
    "end": "18480"
  },
  {
    "text": "cluster running",
    "start": "18480",
    "end": "19520"
  },
  {
    "text": "um our customers and our application",
    "start": "19520",
    "end": "22800"
  },
  {
    "text": "uh is based on a microservice",
    "start": "22800",
    "end": "24480"
  },
  {
    "text": "architecture so we have a fleet of",
    "start": "24480",
    "end": "26160"
  },
  {
    "text": "microservice deployed in the kubernetes",
    "start": "26160",
    "end": "28000"
  },
  {
    "text": "cluster",
    "start": "28000",
    "end": "28720"
  },
  {
    "text": "and those microservers talk to each",
    "start": "28720",
    "end": "30320"
  },
  {
    "text": "other and we're using grpc for that",
    "start": "30320",
    "end": "32719"
  },
  {
    "text": "communication",
    "start": "32719",
    "end": "34239"
  },
  {
    "text": "this intra cluster service to service",
    "start": "34239",
    "end": "35920"
  },
  {
    "text": "communication using grpc",
    "start": "35920",
    "end": "37920"
  },
  {
    "text": "works great however we're also using",
    "start": "37920",
    "end": "41440"
  },
  {
    "text": "grpc",
    "start": "41440",
    "end": "42480"
  },
  {
    "text": "to communicate from uh entities outside",
    "start": "42480",
    "end": "45600"
  },
  {
    "text": "of the cluster to services running",
    "start": "45600",
    "end": "47039"
  },
  {
    "text": "inside the cluster",
    "start": "47039",
    "end": "48160"
  },
  {
    "text": "for example we have a command line",
    "start": "48160",
    "end": "49520"
  },
  {
    "text": "utility called drugscuttle",
    "start": "49520",
    "end": "51440"
  },
  {
    "text": "and for this command line usability",
    "start": "51440",
    "end": "53280"
  },
  {
    "text": "we're also using grpc",
    "start": "53280",
    "end": "54800"
  },
  {
    "text": "to talk to our backend service and in",
    "start": "54800",
    "end": "57039"
  },
  {
    "text": "such a setup the traffic from outside of",
    "start": "57039",
    "end": "59039"
  },
  {
    "text": "the cluster has to enter",
    "start": "59039",
    "end": "61039"
  },
  {
    "text": "the cluster and it typically does that",
    "start": "61039",
    "end": "63280"
  },
  {
    "text": "by using a load balancer service",
    "start": "63280",
    "end": "65280"
  },
  {
    "text": "or an ingress controller um",
    "start": "65280",
    "end": "68799"
  },
  {
    "text": "the problem with such a setup is that",
    "start": "68799",
    "end": "72000"
  },
  {
    "text": "basically it boils down to jrpc being",
    "start": "72000",
    "end": "74960"
  },
  {
    "text": "based on http 2",
    "start": "74960",
    "end": "76880"
  },
  {
    "text": "and a lot of load balancers don't like",
    "start": "76880",
    "end": "79520"
  },
  {
    "text": "or don't support http 2.",
    "start": "79520",
    "end": "81920"
  },
  {
    "text": "more precisely i'm talking about level 7",
    "start": "81920",
    "end": "84240"
  },
  {
    "text": "or application level load balancers",
    "start": "84240",
    "end": "86240"
  },
  {
    "text": "the most prominent example of such a low",
    "start": "86240",
    "end": "88000"
  },
  {
    "text": "balancer is",
    "start": "88000",
    "end": "89360"
  },
  {
    "text": "alb by aws but there are also like some",
    "start": "89360",
    "end": "92400"
  },
  {
    "text": "other load balancers which have",
    "start": "92400",
    "end": "94240"
  },
  {
    "text": "problem with http 2 and grpc such as",
    "start": "94240",
    "end": "97759"
  },
  {
    "text": "nginx in older versions",
    "start": "97759",
    "end": "101040"
  },
  {
    "text": "what can we do in such a scenario well",
    "start": "101040",
    "end": "104159"
  },
  {
    "text": "there are a couple of options we could",
    "start": "104159",
    "end": "105759"
  },
  {
    "text": "opt for tcp only load balancing",
    "start": "105759",
    "end": "108479"
  },
  {
    "text": "for example if we use a tls encrypted",
    "start": "108479",
    "end": "110479"
  },
  {
    "text": "connection we can",
    "start": "110479",
    "end": "111600"
  },
  {
    "text": "configure it to use tls pass through in",
    "start": "111600",
    "end": "114479"
  },
  {
    "text": "which case the",
    "start": "114479",
    "end": "115360"
  },
  {
    "text": "um the load balancer would not terminate",
    "start": "115360",
    "end": "117360"
  },
  {
    "text": "the tls connection but instead just",
    "start": "117360",
    "end": "119520"
  },
  {
    "text": "uh forward the bytes one by one from the",
    "start": "119520",
    "end": "121840"
  },
  {
    "text": "client to the server",
    "start": "121840",
    "end": "123600"
  },
  {
    "text": "we could also use a load balancer that",
    "start": "123600",
    "end": "125200"
  },
  {
    "text": "supports http 2 between the client and",
    "start": "125200",
    "end": "127520"
  },
  {
    "text": "the server",
    "start": "127520",
    "end": "128879"
  },
  {
    "text": "the l7 load balancer available at google",
    "start": "128879",
    "end": "131200"
  },
  {
    "text": "cloud platform",
    "start": "131200",
    "end": "133120"
  },
  {
    "text": "makes it possible for example but also",
    "start": "133120",
    "end": "134800"
  },
  {
    "text": "sufficiently recent versions of nginx or",
    "start": "134800",
    "end": "137040"
  },
  {
    "text": "h.a proxy",
    "start": "137040",
    "end": "138720"
  },
  {
    "text": "there's also a module for envoy the",
    "start": "138720",
    "end": "141040"
  },
  {
    "text": "android proxy",
    "start": "141040",
    "end": "142080"
  },
  {
    "text": "which is called the grpc http 1.1 bridge",
    "start": "142080",
    "end": "144959"
  },
  {
    "text": "this is actually pretty similar to the",
    "start": "144959",
    "end": "146879"
  },
  {
    "text": "technique i'm going to present",
    "start": "146879",
    "end": "148800"
  },
  {
    "text": "in this talk the main reason why we",
    "start": "148800",
    "end": "151360"
  },
  {
    "text": "didn't",
    "start": "151360",
    "end": "152000"
  },
  {
    "text": "up to use it was we felt it was to um",
    "start": "152000",
    "end": "156239"
  },
  {
    "text": "too heavy way to kind of like spin up an",
    "start": "156239",
    "end": "158400"
  },
  {
    "text": "envoy proxy",
    "start": "158400",
    "end": "159760"
  },
  {
    "text": "sidecar for all of our services um we",
    "start": "159760",
    "end": "162239"
  },
  {
    "text": "don't assume that we run in an issue",
    "start": "162239",
    "end": "164080"
  },
  {
    "text": "environment",
    "start": "164080",
    "end": "164720"
  },
  {
    "text": "necessarily and i also put an asterisk",
    "start": "164720",
    "end": "167680"
  },
  {
    "text": "nest",
    "start": "167680",
    "end": "168080"
  },
  {
    "text": "viable because those are the technical",
    "start": "168080",
    "end": "171040"
  },
  {
    "text": "technically viable options",
    "start": "171040",
    "end": "172640"
  },
  {
    "text": "that doesn't necessarily translate into",
    "start": "172640",
    "end": "174400"
  },
  {
    "text": "practical viability",
    "start": "174400",
    "end": "176560"
  },
  {
    "text": "our customers might be more or less",
    "start": "176560",
    "end": "178239"
  },
  {
    "text": "opinionated on what technologies they",
    "start": "178239",
    "end": "180080"
  },
  {
    "text": "want to use",
    "start": "180080",
    "end": "180720"
  },
  {
    "text": "for exposing services and if we tell",
    "start": "180720",
    "end": "184239"
  },
  {
    "text": "them they can't use",
    "start": "184239",
    "end": "185920"
  },
  {
    "text": "alb which they use for everything else",
    "start": "185920",
    "end": "188720"
  },
  {
    "text": "and that they need to use tls pass",
    "start": "188720",
    "end": "190400"
  },
  {
    "text": "through and can't",
    "start": "190400",
    "end": "192000"
  },
  {
    "text": "use managed certificates in their",
    "start": "192000",
    "end": "193599"
  },
  {
    "text": "infrastructure provider they might be",
    "start": "193599",
    "end": "195440"
  },
  {
    "text": "less enthusiastic",
    "start": "195440",
    "end": "196560"
  },
  {
    "text": "about that so um the functional",
    "start": "196560",
    "end": "199840"
  },
  {
    "text": "requirement for the solution",
    "start": "199840",
    "end": "201360"
  },
  {
    "text": "uh that we are that we are looking for",
    "start": "201360",
    "end": "203680"
  },
  {
    "text": "is to replace the grpc",
    "start": "203680",
    "end": "205360"
  },
  {
    "text": "which is used in a rocks called cli with",
    "start": "205360",
    "end": "207599"
  },
  {
    "text": "something",
    "start": "207599",
    "end": "208400"
  },
  {
    "text": "like grpc that works via http http1",
    "start": "208400",
    "end": "212799"
  },
  {
    "text": "preferably it would be something that's",
    "start": "212799",
    "end": "214560"
  },
  {
    "text": "just as nice to use and just as reliable",
    "start": "214560",
    "end": "216720"
  },
  {
    "text": "as grpc",
    "start": "216720",
    "end": "218480"
  },
  {
    "text": "there are also some compatibility",
    "start": "218480",
    "end": "220159"
  },
  {
    "text": "constraints obviously",
    "start": "220159",
    "end": "222480"
  },
  {
    "text": "the new functionality of being able to",
    "start": "222480",
    "end": "224400"
  },
  {
    "text": "work through a grpc incompatible load",
    "start": "224400",
    "end": "226239"
  },
  {
    "text": "balancer",
    "start": "226239",
    "end": "227120"
  },
  {
    "text": "only needs to be available when using",
    "start": "227120",
    "end": "228879"
  },
  {
    "text": "new versions of both the cli",
    "start": "228879",
    "end": "231120"
  },
  {
    "text": "and the server but we can't always",
    "start": "231120",
    "end": "233840"
  },
  {
    "text": "expect our customers to upgrade the",
    "start": "233840",
    "end": "235280"
  },
  {
    "text": "software in lockstep",
    "start": "235280",
    "end": "236560"
  },
  {
    "text": "so if they use a combination of a new",
    "start": "236560",
    "end": "238319"
  },
  {
    "text": "cli with an old service or vice versa",
    "start": "238319",
    "end": "241760"
  },
  {
    "text": "this should at least preserve the",
    "start": "241760",
    "end": "243760"
  },
  {
    "text": "existing functionality",
    "start": "243760",
    "end": "245680"
  },
  {
    "text": "of working through a grpc compatible",
    "start": "245680",
    "end": "248239"
  },
  {
    "text": "load balancer",
    "start": "248239",
    "end": "249280"
  },
  {
    "text": "one thing that that for example",
    "start": "249280",
    "end": "251680"
  },
  {
    "text": "precludes us from just switching to a",
    "start": "251680",
    "end": "253280"
  },
  {
    "text": "different rpc",
    "start": "253280",
    "end": "254000"
  },
  {
    "text": "protocol altogether because that would",
    "start": "254000",
    "end": "256160"
  },
  {
    "text": "only be supported in the new software",
    "start": "256160",
    "end": "258560"
  },
  {
    "text": "and not in the old software",
    "start": "258560",
    "end": "260639"
  },
  {
    "text": "so the first idea we came up with was to",
    "start": "260639",
    "end": "263120"
  },
  {
    "start": "262000",
    "end": "362000"
  },
  {
    "text": "use rest apis",
    "start": "263120",
    "end": "264320"
  },
  {
    "text": "and that sounds a little bit like",
    "start": "264320",
    "end": "266240"
  },
  {
    "text": "contradiction to what i just",
    "start": "266240",
    "end": "267840"
  },
  {
    "text": "lined out as a compatibility requirement",
    "start": "267840",
    "end": "269600"
  },
  {
    "text": "however we have",
    "start": "269600",
    "end": "270960"
  },
  {
    "text": "rest equivalents for pretty much all our",
    "start": "270960",
    "end": "272800"
  },
  {
    "text": "grpc apis",
    "start": "272800",
    "end": "274240"
  },
  {
    "text": "throughout the product thanks to the",
    "start": "274240",
    "end": "275600"
  },
  {
    "text": "grpc gateway which automatically",
    "start": "275600",
    "end": "277840"
  },
  {
    "text": "takes care of the translation what it",
    "start": "277840",
    "end": "280080"
  },
  {
    "text": "would look like on a technical level",
    "start": "280080",
    "end": "282000"
  },
  {
    "text": "we have our cli and that cli makes a",
    "start": "282000",
    "end": "284080"
  },
  {
    "text": "request",
    "start": "284080",
    "end": "285280"
  },
  {
    "text": "a grpc request which technically is an",
    "start": "285280",
    "end": "287680"
  },
  {
    "text": "http 2 post request",
    "start": "287680",
    "end": "290400"
  },
  {
    "text": "to the server and we specify the",
    "start": "290400",
    "end": "292479"
  },
  {
    "text": "respective jpc content type and",
    "start": "292479",
    "end": "294880"
  },
  {
    "text": "encoding scheme usually protobuf and",
    "start": "294880",
    "end": "297360"
  },
  {
    "text": "instead of doing such a",
    "start": "297360",
    "end": "298720"
  },
  {
    "text": "grpc request we instead do a plain http",
    "start": "298720",
    "end": "301759"
  },
  {
    "text": "1.1",
    "start": "301759",
    "end": "302720"
  },
  {
    "text": "rest request for example to a v1",
    "start": "302720",
    "end": "306000"
  },
  {
    "text": "metadata",
    "start": "306000",
    "end": "307280"
  },
  {
    "text": "rest endpoint and using json as the",
    "start": "307280",
    "end": "309840"
  },
  {
    "text": "encoding scheme for all our payloads",
    "start": "309840",
    "end": "312240"
  },
  {
    "text": "um to use that on the code level our",
    "start": "312240",
    "end": "314880"
  },
  {
    "text": "idea was to use protoc gen swagger to",
    "start": "314880",
    "end": "317520"
  },
  {
    "text": "generate open api specifications from",
    "start": "317520",
    "end": "319600"
  },
  {
    "text": "our jpc server subscriptions",
    "start": "319600",
    "end": "321520"
  },
  {
    "text": "and then generate go bindings for these",
    "start": "321520",
    "end": "324800"
  },
  {
    "text": "open apis back",
    "start": "324800",
    "end": "326080"
  },
  {
    "text": "using swagger code gen we weren't really",
    "start": "326080",
    "end": "329600"
  },
  {
    "text": "thrilled with the result it would have",
    "start": "329600",
    "end": "331360"
  },
  {
    "text": "required lots of changes in our code",
    "start": "331360",
    "end": "333520"
  },
  {
    "text": "it will also kind of has led to a",
    "start": "333520",
    "end": "335199"
  },
  {
    "text": "duplication of our data structures",
    "start": "335199",
    "end": "337520"
  },
  {
    "text": "instead of using protobufs everywhere",
    "start": "337520",
    "end": "339360"
  },
  {
    "text": "we'd also be using",
    "start": "339360",
    "end": "340720"
  },
  {
    "text": "the open api generated data structure",
    "start": "340720",
    "end": "343039"
  },
  {
    "text": "somewhere",
    "start": "343039",
    "end": "343919"
  },
  {
    "text": "we also found some bugs in the generated",
    "start": "343919",
    "end": "345680"
  },
  {
    "text": "code in all fairness that",
    "start": "345680",
    "end": "347360"
  },
  {
    "text": "might well have been due to user error i",
    "start": "347360",
    "end": "350000"
  },
  {
    "text": "didn't dig",
    "start": "350000",
    "end": "350800"
  },
  {
    "text": "too uh too deeply because it became",
    "start": "350800",
    "end": "353360"
  },
  {
    "text": "apparent",
    "start": "353360",
    "end": "354080"
  },
  {
    "text": "uh pretty early on that we should find a",
    "start": "354080",
    "end": "357680"
  },
  {
    "text": "better option",
    "start": "357680",
    "end": "358479"
  },
  {
    "text": "that the less invasive in the changes",
    "start": "358479",
    "end": "360160"
  },
  {
    "text": "that require",
    "start": "360160",
    "end": "361520"
  },
  {
    "text": "so for finding such a solution um",
    "start": "361520",
    "end": "365199"
  },
  {
    "start": "362000",
    "end": "544000"
  },
  {
    "text": "an important first step would be to look",
    "start": "365199",
    "end": "367120"
  },
  {
    "text": "at some background as to why jrpc uses",
    "start": "367120",
    "end": "369600"
  },
  {
    "text": "http 2",
    "start": "369600",
    "end": "370560"
  },
  {
    "text": "and what http 2 actually entails",
    "start": "370560",
    "end": "374160"
  },
  {
    "text": "the difference between http 2 and http 1",
    "start": "374160",
    "end": "377360"
  },
  {
    "text": "some of these differences are",
    "start": "377360",
    "end": "378319"
  },
  {
    "text": "performance related for example http 2",
    "start": "378319",
    "end": "380560"
  },
  {
    "text": "is based on a binary format",
    "start": "380560",
    "end": "382160"
  },
  {
    "text": "and it also supports multiplexing of",
    "start": "382160",
    "end": "383840"
  },
  {
    "text": "multiple streams onto a single tcp",
    "start": "383840",
    "end": "385759"
  },
  {
    "text": "connection",
    "start": "385759",
    "end": "387680"
  },
  {
    "text": "those are advantages for performance on",
    "start": "387680",
    "end": "389520"
  },
  {
    "text": "the functionality side",
    "start": "389520",
    "end": "391520"
  },
  {
    "text": "there is support for full duplex client",
    "start": "391520",
    "end": "394080"
  },
  {
    "text": "streaming",
    "start": "394080",
    "end": "394639"
  },
  {
    "text": "that's important for some rpg calls and",
    "start": "394639",
    "end": "396800"
  },
  {
    "text": "there's also support for trailers in",
    "start": "396800",
    "end": "398880"
  },
  {
    "text": "http 2.",
    "start": "398880",
    "end": "400240"
  },
  {
    "text": "um and there are also some other aspects",
    "start": "400240",
    "end": "403600"
  },
  {
    "text": "in http 2 such as server push",
    "start": "403600",
    "end": "406000"
  },
  {
    "text": "it's really not relevant for this",
    "start": "406000",
    "end": "407440"
  },
  {
    "text": "presentation or even for jrpc",
    "start": "407440",
    "end": "409199"
  },
  {
    "text": "at all um so the first aspect we want to",
    "start": "409199",
    "end": "412720"
  },
  {
    "text": "take a look",
    "start": "412720",
    "end": "413360"
  },
  {
    "text": "at is client streaming client spring",
    "start": "413360",
    "end": "415120"
  },
  {
    "text": "basically means we can interleave the",
    "start": "415120",
    "end": "416639"
  },
  {
    "text": "request flow between server and client",
    "start": "416639",
    "end": "418720"
  },
  {
    "text": "um http one the client talks and then",
    "start": "418720",
    "end": "420960"
  },
  {
    "text": "finishes talking sends all the data",
    "start": "420960",
    "end": "422960"
  },
  {
    "text": "and then the server responds in http 2",
    "start": "422960",
    "end": "426080"
  },
  {
    "text": "the client starts talking by sending a",
    "start": "426080",
    "end": "428000"
  },
  {
    "text": "request and request headers",
    "start": "428000",
    "end": "429360"
  },
  {
    "text": "and the server may start responding at",
    "start": "429360",
    "end": "430960"
  },
  {
    "text": "any time regardless of whether the",
    "start": "430960",
    "end": "432720"
  },
  {
    "text": "client still has more data to send",
    "start": "432720",
    "end": "434720"
  },
  {
    "text": "or not grpc uses this for client",
    "start": "434720",
    "end": "437039"
  },
  {
    "text": "streaming rpc calls",
    "start": "437039",
    "end": "438400"
  },
  {
    "text": "and bidirectional streaming rpc calls",
    "start": "438400",
    "end": "440960"
  },
  {
    "text": "client streaming is actually a pretty",
    "start": "440960",
    "end": "443039"
  },
  {
    "text": "significant step in terms of",
    "start": "443039",
    "end": "445199"
  },
  {
    "text": "functionality",
    "start": "445199",
    "end": "446639"
  },
  {
    "text": "over http one you cannot emulate client",
    "start": "446639",
    "end": "449520"
  },
  {
    "text": "streaming in http one",
    "start": "449520",
    "end": "451039"
  },
  {
    "text": "you would need to resort to a technique",
    "start": "451039",
    "end": "452880"
  },
  {
    "text": "such as websockets in order to do",
    "start": "452880",
    "end": "454639"
  },
  {
    "text": "something similar",
    "start": "454639",
    "end": "457039"
  },
  {
    "text": "uh the good thing is rockstar cli only",
    "start": "457039",
    "end": "459520"
  },
  {
    "text": "uses unary rpc calls so no client",
    "start": "459520",
    "end": "461759"
  },
  {
    "text": "streaming",
    "start": "461759",
    "end": "462840"
  },
  {
    "text": "required uh the second aspect is",
    "start": "462840",
    "end": "465280"
  },
  {
    "text": "trailers",
    "start": "465280",
    "end": "466240"
  },
  {
    "text": "trailer method is metadata sent by the",
    "start": "466240",
    "end": "468960"
  },
  {
    "text": "server after the response body",
    "start": "468960",
    "end": "470879"
  },
  {
    "text": "you can think of traders as kind of like",
    "start": "470879",
    "end": "472560"
  },
  {
    "text": "deferred headers",
    "start": "472560",
    "end": "474000"
  },
  {
    "text": "the typical use case for trailers is to",
    "start": "474000",
    "end": "476240"
  },
  {
    "text": "calculate",
    "start": "476240",
    "end": "477120"
  },
  {
    "text": "checksum on the fly of a response body",
    "start": "477120",
    "end": "479360"
  },
  {
    "text": "without having to",
    "start": "479360",
    "end": "480319"
  },
  {
    "text": "to buffer the entire response body on",
    "start": "480319",
    "end": "482800"
  },
  {
    "text": "the server side before sending it back",
    "start": "482800",
    "end": "484879"
  },
  {
    "text": "jpc uses trailers in order to",
    "start": "484879",
    "end": "487360"
  },
  {
    "text": "communicate",
    "start": "487360",
    "end": "488639"
  },
  {
    "text": "status information and error messages",
    "start": "488639",
    "end": "491280"
  },
  {
    "text": "for example think of a server streaming",
    "start": "491280",
    "end": "493360"
  },
  {
    "text": "rpc call the server sends a message",
    "start": "493360",
    "end": "495759"
  },
  {
    "text": "message after message until eventually a",
    "start": "495759",
    "end": "497840"
  },
  {
    "text": "deadline expires",
    "start": "497840",
    "end": "499120"
  },
  {
    "text": "and then this deadline expires status",
    "start": "499120",
    "end": "501440"
  },
  {
    "text": "should be transmitted to the client so",
    "start": "501440",
    "end": "503039"
  },
  {
    "text": "even though the server has already sent",
    "start": "503039",
    "end": "504560"
  },
  {
    "text": "data",
    "start": "504560",
    "end": "506080"
  },
  {
    "text": "the the server can still indicate that",
    "start": "506080",
    "end": "508319"
  },
  {
    "text": "the request failed",
    "start": "508319",
    "end": "509599"
  },
  {
    "text": "and thus the status needs to be",
    "start": "509599",
    "end": "511199"
  },
  {
    "text": "transmitted cannot be transmitted in the",
    "start": "511199",
    "end": "512800"
  },
  {
    "text": "headers",
    "start": "512800",
    "end": "513360"
  },
  {
    "text": "but needs to come after the response",
    "start": "513360",
    "end": "514880"
  },
  {
    "text": "body",
    "start": "514880",
    "end": "516959"
  },
  {
    "text": "the advantage here is that traders",
    "start": "516959",
    "end": "520000"
  },
  {
    "text": "are not significantly different from",
    "start": "520000",
    "end": "522959"
  },
  {
    "text": "http anything http one offers",
    "start": "522959",
    "end": "525040"
  },
  {
    "text": "compared to client streaming",
    "start": "525040",
    "end": "528160"
  },
  {
    "text": "they are on the hcpe protocol level but",
    "start": "528160",
    "end": "530640"
  },
  {
    "text": "if we",
    "start": "530640",
    "end": "531440"
  },
  {
    "text": "can assume that we can make",
    "start": "531440",
    "end": "532720"
  },
  {
    "text": "modifications to the application level",
    "start": "532720",
    "end": "534240"
  },
  {
    "text": "protocol",
    "start": "534240",
    "end": "534959"
  },
  {
    "text": "we can just embed trailer information as",
    "start": "534959",
    "end": "537519"
  },
  {
    "text": "part of the response buddy",
    "start": "537519",
    "end": "538959"
  },
  {
    "text": "just conca like append it to the",
    "start": "538959",
    "end": "541200"
  },
  {
    "text": "original response body",
    "start": "541200",
    "end": "544240"
  },
  {
    "start": "544000",
    "end": "585000"
  },
  {
    "text": "and that brings us to jrpc web jpc web",
    "start": "544240",
    "end": "546880"
  },
  {
    "text": "is an alternative transport",
    "start": "546880",
    "end": "548320"
  },
  {
    "text": "specification for jpc",
    "start": "548320",
    "end": "550160"
  },
  {
    "text": "um specifically uh targeting web clients",
    "start": "550160",
    "end": "553120"
  },
  {
    "text": "such as browsers",
    "start": "553120",
    "end": "554560"
  },
  {
    "text": "in a grpc web you can you have support",
    "start": "554560",
    "end": "557519"
  },
  {
    "text": "for",
    "start": "557519",
    "end": "557839"
  },
  {
    "text": "unary and server streaming rpcs so",
    "start": "557839",
    "end": "559920"
  },
  {
    "text": "client or bi-directional streaming are",
    "start": "559920",
    "end": "561519"
  },
  {
    "text": "not supported",
    "start": "561519",
    "end": "562480"
  },
  {
    "text": "due to lack of http 2 features and",
    "start": "562480",
    "end": "565680"
  },
  {
    "text": "in grpc web trailers are encoded as part",
    "start": "565680",
    "end": "568640"
  },
  {
    "text": "of the",
    "start": "568640",
    "end": "569360"
  },
  {
    "text": "response body so gpc response body is a",
    "start": "569360",
    "end": "573120"
  },
  {
    "text": "sequence of messages and a jpc web",
    "start": "573120",
    "end": "576160"
  },
  {
    "text": "the trailers are contained in a",
    "start": "576160",
    "end": "579600"
  },
  {
    "text": "specifically designated message which is",
    "start": "579600",
    "end": "581920"
  },
  {
    "text": "sent after the last message of the",
    "start": "581920",
    "end": "583360"
  },
  {
    "text": "server response",
    "start": "583360",
    "end": "585040"
  },
  {
    "start": "585000",
    "end": "1031000"
  },
  {
    "text": "um that sounds like this is exactly what",
    "start": "585040",
    "end": "587040"
  },
  {
    "text": "we're looking for and it would solve all",
    "start": "587040",
    "end": "588480"
  },
  {
    "text": "our problems",
    "start": "588480",
    "end": "589440"
  },
  {
    "text": "uh unfortunately it's not quite that",
    "start": "589440",
    "end": "591120"
  },
  {
    "text": "easy um i wasn't able to find the golang",
    "start": "591120",
    "end": "593839"
  },
  {
    "text": "based",
    "start": "593839",
    "end": "594480"
  },
  {
    "text": "client library for grpc web which we",
    "start": "594480",
    "end": "596480"
  },
  {
    "text": "would have needed to use",
    "start": "596480",
    "end": "598240"
  },
  {
    "text": "on the on the cli side um their support",
    "start": "598240",
    "end": "601360"
  },
  {
    "text": "for jpc",
    "start": "601360",
    "end": "602160"
  },
  {
    "text": "web in the envoy proxy um but we cannot",
    "start": "602160",
    "end": "605120"
  },
  {
    "text": "expect the onboard proxy to be present",
    "start": "605120",
    "end": "606880"
  },
  {
    "text": "in our customer setups",
    "start": "606880",
    "end": "608240"
  },
  {
    "text": "um there are also standalone proxies for",
    "start": "608240",
    "end": "610320"
  },
  {
    "text": "jrpc web and translating",
    "start": "610320",
    "end": "612079"
  },
  {
    "text": "between grpc web and grpc but",
    "start": "612079",
    "end": "615519"
  },
  {
    "text": "deploying them in front of application",
    "start": "615519",
    "end": "617279"
  },
  {
    "text": "breaks compatibility requirements",
    "start": "617279",
    "end": "618880"
  },
  {
    "text": "because",
    "start": "618880",
    "end": "619920"
  },
  {
    "text": "again it will require our client like",
    "start": "619920",
    "end": "621600"
  },
  {
    "text": "all of our clients to use grpc",
    "start": "621600",
    "end": "623519"
  },
  {
    "text": "web requests",
    "start": "623519",
    "end": "627120"
  },
  {
    "text": "so the solution we came up with is",
    "start": "627120",
    "end": "630240"
  },
  {
    "text": "what we call automatic jpc web",
    "start": "630240",
    "end": "632000"
  },
  {
    "text": "downgrading",
    "start": "632000",
    "end": "633360"
  },
  {
    "text": "and this is uh instead of just using jpc",
    "start": "633360",
    "end": "636240"
  },
  {
    "text": "web for everything it's an adaptive",
    "start": "636240",
    "end": "638079"
  },
  {
    "text": "technique um which works by the client",
    "start": "638079",
    "end": "640959"
  },
  {
    "text": "sending",
    "start": "640959",
    "end": "641440"
  },
  {
    "text": "a regular jrpc request to the server",
    "start": "641440",
    "end": "644640"
  },
  {
    "text": "but also indicating that it is able to",
    "start": "644640",
    "end": "647120"
  },
  {
    "text": "accept and process",
    "start": "647120",
    "end": "648160"
  },
  {
    "text": "grpc web responses and we use the",
    "start": "648160",
    "end": "650880"
  },
  {
    "text": "standard",
    "start": "650880",
    "end": "651680"
  },
  {
    "text": "accept header to indicate our readiness",
    "start": "651680",
    "end": "654640"
  },
  {
    "text": "for that",
    "start": "654640",
    "end": "655519"
  },
  {
    "text": "and the server looks at an incoming",
    "start": "655519",
    "end": "657600"
  },
  {
    "text": "request and",
    "start": "657600",
    "end": "659279"
  },
  {
    "text": "if certain conditions are met it decides",
    "start": "659279",
    "end": "661279"
  },
  {
    "text": "that the response will be sent",
    "start": "661279",
    "end": "662959"
  },
  {
    "text": "uh as jrpc web and not just regular jrpc",
    "start": "662959",
    "end": "666320"
  },
  {
    "text": "and those conditions are on one hand",
    "start": "666320",
    "end": "669360"
  },
  {
    "text": "the ability of the client to accept grpc",
    "start": "669360",
    "end": "671920"
  },
  {
    "text": "web responses that's communicated via",
    "start": "671920",
    "end": "673839"
  },
  {
    "text": "the accept header",
    "start": "673839",
    "end": "675680"
  },
  {
    "text": "we also look at the http protocol if the",
    "start": "675680",
    "end": "677839"
  },
  {
    "text": "hp protocol major version is one",
    "start": "677839",
    "end": "680000"
  },
  {
    "text": "then probably there's an incompatible",
    "start": "680000",
    "end": "681680"
  },
  {
    "text": "proxy in between",
    "start": "681680",
    "end": "683279"
  },
  {
    "text": "and the more reliable indicator is the",
    "start": "683279",
    "end": "685120"
  },
  {
    "text": "te header te stands for transfer",
    "start": "685120",
    "end": "687120"
  },
  {
    "text": "encoding",
    "start": "687120",
    "end": "688000"
  },
  {
    "text": "and if the of all the proxies are",
    "start": "688000",
    "end": "690560"
  },
  {
    "text": "compatible",
    "start": "690560",
    "end": "691680"
  },
  {
    "text": "um the te header will have a value of",
    "start": "691680",
    "end": "694560"
  },
  {
    "text": "trailers",
    "start": "694560",
    "end": "695519"
  },
  {
    "text": "um if there's an incompatible proxy in",
    "start": "695519",
    "end": "698079"
  },
  {
    "text": "between",
    "start": "698079",
    "end": "699200"
  },
  {
    "text": "those this te header will be stripped",
    "start": "699200",
    "end": "702880"
  },
  {
    "text": "so making a grpc request from our",
    "start": "702880",
    "end": "705360"
  },
  {
    "text": "rockscaller cli",
    "start": "705360",
    "end": "706720"
  },
  {
    "text": "to our backend servers we start the",
    "start": "706720",
    "end": "709839"
  },
  {
    "text": "the regular jpc request as an http 2",
    "start": "709839",
    "end": "712160"
  },
  {
    "text": "post request with the te trailers header",
    "start": "712160",
    "end": "714959"
  },
  {
    "text": "assuming a compatible proxy this request",
    "start": "714959",
    "end": "717600"
  },
  {
    "text": "gets forwarded as is to the backend",
    "start": "717600",
    "end": "719279"
  },
  {
    "text": "servers",
    "start": "719279",
    "end": "720399"
  },
  {
    "text": "we have http 2 we have te trailers",
    "start": "720399",
    "end": "723120"
  },
  {
    "text": "everyone is happy",
    "start": "723120",
    "end": "724079"
  },
  {
    "text": "the server is happy and can respond with",
    "start": "724079",
    "end": "726399"
  },
  {
    "text": "the normal http",
    "start": "726399",
    "end": "727600"
  },
  {
    "text": "to 200 okay jpc response",
    "start": "727600",
    "end": "732320"
  },
  {
    "text": "what happens now if we have an",
    "start": "732320",
    "end": "733600"
  },
  {
    "text": "incompatible proxy in between so",
    "start": "733600",
    "end": "735360"
  },
  {
    "text": "if we have a proxy that drops the",
    "start": "735360",
    "end": "737360"
  },
  {
    "text": "traders header",
    "start": "737360",
    "end": "738639"
  },
  {
    "text": "well in that case um and also we",
    "start": "738639",
    "end": "741760"
  },
  {
    "text": "assume it downgrades the connection to",
    "start": "741760",
    "end": "744079"
  },
  {
    "text": "http one",
    "start": "744079",
    "end": "745040"
  },
  {
    "text": "we don't have a traders header we don't",
    "start": "745040",
    "end": "746800"
  },
  {
    "text": "have a http 2 request",
    "start": "746800",
    "end": "749120"
  },
  {
    "text": "the server doesn't know it can't process",
    "start": "749120",
    "end": "752560"
  },
  {
    "text": "this request in a normal grpc fashion",
    "start": "752560",
    "end": "754880"
  },
  {
    "text": "the server is unhappy",
    "start": "754880",
    "end": "756320"
  },
  {
    "text": "and it just will send back an error",
    "start": "756320",
    "end": "759440"
  },
  {
    "text": "response",
    "start": "759440",
    "end": "761279"
  },
  {
    "text": "now using our automatic downgrading",
    "start": "761279",
    "end": "764399"
  },
  {
    "text": "we modify the client to inject the",
    "start": "764399",
    "end": "766480"
  },
  {
    "text": "accept header on the client side",
    "start": "766480",
    "end": "768480"
  },
  {
    "text": "we say accept application jrpc and also",
    "start": "768480",
    "end": "771279"
  },
  {
    "text": "application jpc web",
    "start": "771279",
    "end": "772880"
  },
  {
    "text": "accept as a standard request header and",
    "start": "772880",
    "end": "775200"
  },
  {
    "text": "the product proxy",
    "start": "775200",
    "end": "776560"
  },
  {
    "text": "will forward this header to the backend",
    "start": "776560",
    "end": "779360"
  },
  {
    "text": "note that we still",
    "start": "779360",
    "end": "780320"
  },
  {
    "text": "the backend still sees an http1 request",
    "start": "780320",
    "end": "782480"
  },
  {
    "text": "incoming without te trailers header",
    "start": "782480",
    "end": "785200"
  },
  {
    "text": "in that case however we see the client",
    "start": "785200",
    "end": "787200"
  },
  {
    "text": "is able to accept a jfc web response",
    "start": "787200",
    "end": "790320"
  },
  {
    "text": "server is happy again and it can send",
    "start": "790320",
    "end": "792560"
  },
  {
    "text": "back a jrpc web response",
    "start": "792560",
    "end": "794880"
  },
  {
    "text": "the client having indicated so can also",
    "start": "794880",
    "end": "797680"
  },
  {
    "text": "process this grpc web response and the",
    "start": "797680",
    "end": "800320"
  },
  {
    "text": "client is happy as well",
    "start": "800320",
    "end": "803760"
  },
  {
    "text": "how did we go about implementing this",
    "start": "805279",
    "end": "807839"
  },
  {
    "text": "functionality",
    "start": "807839",
    "end": "808880"
  },
  {
    "text": "on the client side we spun up a local",
    "start": "808880",
    "end": "812639"
  },
  {
    "text": "reverse proxy that's actually very",
    "start": "812639",
    "end": "814480"
  },
  {
    "text": "simple to implement in go",
    "start": "814480",
    "end": "816399"
  },
  {
    "text": "there's a reverse proxy utility type",
    "start": "816399",
    "end": "819760"
  },
  {
    "text": "the reverse proxy modifies the outgoing",
    "start": "819760",
    "end": "821600"
  },
  {
    "text": "request by injecting the accept header",
    "start": "821600",
    "end": "823760"
  },
  {
    "text": "and it modifies the incoming responses",
    "start": "823760",
    "end": "825760"
  },
  {
    "text": "by transcoding the grpc web",
    "start": "825760",
    "end": "827760"
  },
  {
    "text": "payload to regular grpc over http 2",
    "start": "827760",
    "end": "832800"
  },
  {
    "text": "traffic and it does so by by detecting",
    "start": "832880",
    "end": "835199"
  },
  {
    "text": "jpc web payloads through the content",
    "start": "835199",
    "end": "837120"
  },
  {
    "text": "type header sent by the server",
    "start": "837120",
    "end": "838800"
  },
  {
    "text": "this transcoding effectively means we",
    "start": "838800",
    "end": "841120"
  },
  {
    "text": "look at the last message in the stream",
    "start": "841120",
    "end": "843120"
  },
  {
    "text": "we verify that there's a traders message",
    "start": "843120",
    "end": "845040"
  },
  {
    "text": "we pass the traders from this message",
    "start": "845040",
    "end": "846639"
  },
  {
    "text": "and we forward them",
    "start": "846639",
    "end": "847680"
  },
  {
    "text": "to the client as actual native http 2",
    "start": "847680",
    "end": "850480"
  },
  {
    "text": "trailers",
    "start": "850480",
    "end": "852079"
  },
  {
    "text": "what's also relevant to consider in the",
    "start": "852079",
    "end": "854000"
  },
  {
    "text": "setup is that",
    "start": "854000",
    "end": "855279"
  },
  {
    "text": "the the connection between the",
    "start": "855279",
    "end": "856560"
  },
  {
    "text": "application and the reverse proxy",
    "start": "856560",
    "end": "858800"
  },
  {
    "text": "uses a local in-memory pipe so it's not",
    "start": "858800",
    "end": "861839"
  },
  {
    "text": "hijackable",
    "start": "861839",
    "end": "862880"
  },
  {
    "text": "and uh does we don't tls encrypt it",
    "start": "862880",
    "end": "866079"
  },
  {
    "text": "um the reverse proxy needs to uh",
    "start": "866079",
    "end": "869279"
  },
  {
    "text": "needs to uh intercept the request anyway",
    "start": "869279",
    "end": "871920"
  },
  {
    "text": "and then",
    "start": "871920",
    "end": "872560"
  },
  {
    "text": "the reverse proxy makes an outgoing tcp",
    "start": "872560",
    "end": "874880"
  },
  {
    "text": "connection",
    "start": "874880",
    "end": "875600"
  },
  {
    "text": "with tls encryption and that even allows",
    "start": "875600",
    "end": "878399"
  },
  {
    "text": "us to if we have a direct connection to",
    "start": "878399",
    "end": "880079"
  },
  {
    "text": "the remote pr to use client certificate",
    "start": "880079",
    "end": "882480"
  },
  {
    "text": "authentication because tls really only",
    "start": "882480",
    "end": "884800"
  },
  {
    "text": "starts at the reverse proxy and is not",
    "start": "884800",
    "end": "887760"
  },
  {
    "text": "terminated or men in the middle in",
    "start": "887760",
    "end": "889680"
  },
  {
    "text": "between",
    "start": "889680",
    "end": "892079"
  },
  {
    "text": "on the server side we use a function a",
    "start": "892160",
    "end": "895120"
  },
  {
    "text": "feature from the grpc server",
    "start": "895120",
    "end": "896839"
  },
  {
    "text": "implementation",
    "start": "896839",
    "end": "898000"
  },
  {
    "text": "which is that the jpc server supports or",
    "start": "898000",
    "end": "900720"
  },
  {
    "text": "offers the serv http method",
    "start": "900720",
    "end": "902800"
  },
  {
    "text": "that's a standardized go http server",
    "start": "902800",
    "end": "905199"
  },
  {
    "text": "handler",
    "start": "905199",
    "end": "906800"
  },
  {
    "text": "it it handles a request and it writes",
    "start": "906800",
    "end": "908880"
  },
  {
    "text": "back a response",
    "start": "908880",
    "end": "910000"
  },
  {
    "text": "and we wrap the server handler by um",
    "start": "910000",
    "end": "912880"
  },
  {
    "text": "adding logic",
    "start": "912880",
    "end": "913839"
  },
  {
    "text": "to to see if we need to do gfpc web",
    "start": "913839",
    "end": "916160"
  },
  {
    "text": "downgrading",
    "start": "916160",
    "end": "917279"
  },
  {
    "text": "um and if we can do jfc web downgrading",
    "start": "917279",
    "end": "919600"
  },
  {
    "text": "so we look for we test for the presence",
    "start": "919600",
    "end": "921199"
  },
  {
    "text": "of the accept",
    "start": "921199",
    "end": "922000"
  },
  {
    "text": "gpc web header and for the absence of",
    "start": "922000",
    "end": "924720"
  },
  {
    "text": "the te trailers header",
    "start": "924720",
    "end": "926720"
  },
  {
    "text": "we modify the request to",
    "start": "926720",
    "end": "929759"
  },
  {
    "text": "fake an http 2 protocol information",
    "start": "929759",
    "end": "932880"
  },
  {
    "text": "and also to re-add the te trailers uh",
    "start": "932880",
    "end": "935600"
  },
  {
    "text": "header",
    "start": "935600",
    "end": "936160"
  },
  {
    "text": "and that is to kind of like prevent the",
    "start": "936160",
    "end": "938240"
  },
  {
    "text": "grpc server implementation from",
    "start": "938240",
    "end": "939759"
  },
  {
    "text": "complaining about the malformed or",
    "start": "939759",
    "end": "942000"
  },
  {
    "text": "not processable request we also",
    "start": "942000",
    "end": "944320"
  },
  {
    "text": "intercept the responsewriter for this",
    "start": "944320",
    "end": "946240"
  },
  {
    "text": "server handler such that it will",
    "start": "946240",
    "end": "948639"
  },
  {
    "text": "transcode http2 trailers",
    "start": "948639",
    "end": "950639"
  },
  {
    "text": "into trailers sent as a message as part",
    "start": "950639",
    "end": "953360"
  },
  {
    "text": "of the response body",
    "start": "953360",
    "end": "954720"
  },
  {
    "text": "and then with this modified request we",
    "start": "954720",
    "end": "956320"
  },
  {
    "text": "delegate we make a delegate call",
    "start": "956320",
    "end": "958160"
  },
  {
    "text": "to the original grpc server serve http",
    "start": "958160",
    "end": "961759"
  },
  {
    "text": "implementation so",
    "start": "961759",
    "end": "965040"
  },
  {
    "text": "showing this in one picture i have to",
    "start": "965040",
    "end": "967440"
  },
  {
    "text": "apologize for the",
    "start": "967440",
    "end": "968480"
  },
  {
    "text": "low resolution of the picture i didn't",
    "start": "968480",
    "end": "970160"
  },
  {
    "text": "have the raw materials anymore",
    "start": "970160",
    "end": "972079"
  },
  {
    "text": "um the client makes a http 2 post",
    "start": "972079",
    "end": "975839"
  },
  {
    "text": "request",
    "start": "975839",
    "end": "976480"
  },
  {
    "text": "to the reverse proxy and again this is",
    "start": "976480",
    "end": "979040"
  },
  {
    "text": "slightly outdated we no longer use a",
    "start": "979040",
    "end": "981199"
  },
  {
    "text": "localhost tcp listen socket but just an",
    "start": "981199",
    "end": "984000"
  },
  {
    "text": "in-memory pipe",
    "start": "984000",
    "end": "985839"
  },
  {
    "text": "and local reverse proxy injects the",
    "start": "985839",
    "end": "989360"
  },
  {
    "text": "accept jrpc web header it goes to the",
    "start": "989360",
    "end": "992240"
  },
  {
    "text": "proxy",
    "start": "992240",
    "end": "993600"
  },
  {
    "text": "the modified handler on the server side",
    "start": "993600",
    "end": "996000"
  },
  {
    "text": "uh",
    "start": "996000",
    "end": "997759"
  },
  {
    "text": "re uh basically replaces the protocol",
    "start": "997759",
    "end": "999920"
  },
  {
    "text": "information http one to http two",
    "start": "999920",
    "end": "1002240"
  },
  {
    "text": "and strips the accept header the server",
    "start": "1002240",
    "end": "1004480"
  },
  {
    "text": "is happy about the request um",
    "start": "1004480",
    "end": "1006320"
  },
  {
    "text": "there's also the te trailers header",
    "start": "1006320",
    "end": "1007759"
  },
  {
    "text": "which is injected and it sends back",
    "start": "1007759",
    "end": "1010079"
  },
  {
    "text": "a normal grpc response which then gets",
    "start": "1010079",
    "end": "1013040"
  },
  {
    "text": "transcoded by the handler to a jpc web",
    "start": "1013040",
    "end": "1015279"
  },
  {
    "text": "response",
    "start": "1015279",
    "end": "1016079"
  },
  {
    "text": "and the jpc web response reaches the",
    "start": "1016079",
    "end": "1017920"
  },
  {
    "text": "local client proxy",
    "start": "1017920",
    "end": "1019360"
  },
  {
    "text": "and again gets transcoded to a grpc over",
    "start": "1019360",
    "end": "1022639"
  },
  {
    "text": "http 2 payload which the",
    "start": "1022639",
    "end": "1025120"
  },
  {
    "text": "original vanilla grpc client can",
    "start": "1025120",
    "end": "1028240"
  },
  {
    "text": "consume so if you think that's cool",
    "start": "1028240",
    "end": "1031678"
  },
  {
    "start": "1031000",
    "end": "1163000"
  },
  {
    "text": "or think it could be potentially useful",
    "start": "1031679",
    "end": "1034000"
  },
  {
    "text": "we decided to",
    "start": "1034000",
    "end": "1035038"
  },
  {
    "text": "publish this code as an open source",
    "start": "1035039",
    "end": "1037120"
  },
  {
    "text": "library hosted on github",
    "start": "1037120",
    "end": "1039360"
  },
  {
    "text": "it's written in go so you will only be",
    "start": "1039360",
    "end": "1042240"
  },
  {
    "text": "able to use if you use go for both your",
    "start": "1042240",
    "end": "1044079"
  },
  {
    "text": "client and your server",
    "start": "1044079",
    "end": "1045520"
  },
  {
    "text": "while it's not true you can use it on",
    "start": "1045520",
    "end": "1047038"
  },
  {
    "text": "either the client or the server but you",
    "start": "1047039",
    "end": "1048640"
  },
  {
    "text": "won't really get any benefit",
    "start": "1048640",
    "end": "1050320"
  },
  {
    "text": "out of it if you're not using it on both",
    "start": "1050320",
    "end": "1052480"
  },
  {
    "text": "sides but at least you also",
    "start": "1052480",
    "end": "1053600"
  },
  {
    "text": "won't break any any compatibility if you",
    "start": "1053600",
    "end": "1056080"
  },
  {
    "text": "use it only on the client or only on the",
    "start": "1056080",
    "end": "1057919"
  },
  {
    "text": "server",
    "start": "1057919",
    "end": "1059039"
  },
  {
    "text": "you can install it with a simple go get",
    "start": "1059039",
    "end": "1061120"
  },
  {
    "text": "command",
    "start": "1061120",
    "end": "1062080"
  },
  {
    "text": "and the source code is hosted as on",
    "start": "1062080",
    "end": "1064240"
  },
  {
    "text": "github and published under the apache 2",
    "start": "1064240",
    "end": "1066400"
  },
  {
    "text": "license",
    "start": "1066400",
    "end": "1068080"
  },
  {
    "text": "now i want to give you a very brief",
    "start": "1068080",
    "end": "1069520"
  },
  {
    "text": "overview on how it used the library",
    "start": "1069520",
    "end": "1071600"
  },
  {
    "text": "so the first example is showing you",
    "start": "1071600",
    "end": "1074799"
  },
  {
    "text": "how you would use grpc normally without",
    "start": "1074799",
    "end": "1077520"
  },
  {
    "text": "our library",
    "start": "1077520",
    "end": "1079120"
  },
  {
    "text": "you have a tls configuration you have",
    "start": "1079120",
    "end": "1081360"
  },
  {
    "text": "some dial options for establishing",
    "start": "1081360",
    "end": "1083520"
  },
  {
    "text": "connection you would call grpc dial",
    "start": "1083520",
    "end": "1087280"
  },
  {
    "text": "context",
    "start": "1087280",
    "end": "1087919"
  },
  {
    "text": "function you give it an endpoint",
    "start": "1087919",
    "end": "1090640"
  },
  {
    "text": "transport credentials tls",
    "start": "1090640",
    "end": "1092799"
  },
  {
    "text": "and connection options and then from",
    "start": "1092799",
    "end": "1095120"
  },
  {
    "text": "this grpc",
    "start": "1095120",
    "end": "1096480"
  },
  {
    "text": "client connections you can instantiate",
    "start": "1096480",
    "end": "1098640"
  },
  {
    "text": "service clients",
    "start": "1098640",
    "end": "1099919"
  },
  {
    "text": "do rpc calls on the server and",
    "start": "1099919",
    "end": "1102640"
  },
  {
    "text": "eventually also close the connection",
    "start": "1102640",
    "end": "1105039"
  },
  {
    "text": "now when using our library the code",
    "start": "1105039",
    "end": "1107440"
  },
  {
    "text": "doesn't change",
    "start": "1107440",
    "end": "1108080"
  },
  {
    "text": "all that match you you import the client",
    "start": "1108080",
    "end": "1111120"
  },
  {
    "text": "package from a library",
    "start": "1111120",
    "end": "1112960"
  },
  {
    "text": "and then instead of calling jrpc dial",
    "start": "1112960",
    "end": "1115760"
  },
  {
    "text": "you call the function",
    "start": "1115760",
    "end": "1117200"
  },
  {
    "text": "client connect via proxy you still pass",
    "start": "1117200",
    "end": "1120559"
  },
  {
    "text": "it the connection context",
    "start": "1120559",
    "end": "1122559"
  },
  {
    "text": "an endpoint the tls configuration",
    "start": "1122559",
    "end": "1124799"
  },
  {
    "text": "becomes a first",
    "start": "1124799",
    "end": "1125600"
  },
  {
    "text": "class configuration option it's not just",
    "start": "1125600",
    "end": "1127840"
  },
  {
    "text": "another dial option",
    "start": "1127840",
    "end": "1129120"
  },
  {
    "text": "but if you have other dial options you",
    "start": "1129120",
    "end": "1130640"
  },
  {
    "text": "can also pass them to this function",
    "start": "1130640",
    "end": "1132960"
  },
  {
    "text": "just as we pass them to grpc dial and",
    "start": "1132960",
    "end": "1136000"
  },
  {
    "text": "the return value of this function",
    "start": "1136000",
    "end": "1138000"
  },
  {
    "text": "is a normal grpc client connection you",
    "start": "1138000",
    "end": "1140320"
  },
  {
    "text": "can use that in",
    "start": "1140320",
    "end": "1141520"
  },
  {
    "text": "same way as you use the one obtained",
    "start": "1141520",
    "end": "1144240"
  },
  {
    "text": "with grpc dial",
    "start": "1144240",
    "end": "1146160"
  },
  {
    "text": "you can use it to instantiate a service",
    "start": "1146160",
    "end": "1148320"
  },
  {
    "text": "client",
    "start": "1148320",
    "end": "1149280"
  },
  {
    "text": "make rpc calls and you can also",
    "start": "1149280",
    "end": "1151120"
  },
  {
    "text": "eventually close it in the same way",
    "start": "1151120",
    "end": "1152960"
  },
  {
    "text": "and if you close this connection the",
    "start": "1152960",
    "end": "1154799"
  },
  {
    "text": "reverse proxy which runs",
    "start": "1154799",
    "end": "1156799"
  },
  {
    "text": "in the background will also get",
    "start": "1156799",
    "end": "1158240"
  },
  {
    "text": "automatically shut down there's no need",
    "start": "1158240",
    "end": "1160320"
  },
  {
    "text": "to do this explicitly",
    "start": "1160320",
    "end": "1163600"
  },
  {
    "text": "on the server side uh the example",
    "start": "1163600",
    "end": "1166640"
  },
  {
    "text": "i have is pretty simple um and then very",
    "start": "1166640",
    "end": "1169200"
  },
  {
    "text": "stripped down and",
    "start": "1169200",
    "end": "1170400"
  },
  {
    "text": "it actually won't work like that out of",
    "start": "1170400",
    "end": "1172240"
  },
  {
    "text": "the box but yeah",
    "start": "1172240",
    "end": "1173679"
  },
  {
    "text": "just to give you an idea um you create a",
    "start": "1173679",
    "end": "1176240"
  },
  {
    "text": "new grpc server you register",
    "start": "1176240",
    "end": "1178720"
  },
  {
    "text": "your service handlers to this like the",
    "start": "1178720",
    "end": "1180480"
  },
  {
    "text": "echo server in this case",
    "start": "1180480",
    "end": "1182240"
  },
  {
    "text": "and then you call grpc serve with a",
    "start": "1182240",
    "end": "1185039"
  },
  {
    "text": "respective listener in this case we",
    "start": "1185039",
    "end": "1186799"
  },
  {
    "text": "listen on port 843",
    "start": "1186799",
    "end": "1188880"
  },
  {
    "text": "with the tls settings uh when using our",
    "start": "1188880",
    "end": "1192480"
  },
  {
    "text": "library",
    "start": "1192480",
    "end": "1193120"
  },
  {
    "text": "that injects your hpc web downgrading",
    "start": "1193120",
    "end": "1196400"
  },
  {
    "text": "handler",
    "start": "1196400",
    "end": "1197520"
  },
  {
    "text": "um you would start with creating the gpc",
    "start": "1197520",
    "end": "1201200"
  },
  {
    "text": "server in the same way you register your",
    "start": "1201200",
    "end": "1203039"
  },
  {
    "text": "service handlers",
    "start": "1203039",
    "end": "1204240"
  },
  {
    "text": "but instead of having the jpc server",
    "start": "1204240",
    "end": "1206080"
  },
  {
    "text": "directly serve network connections",
    "start": "1206080",
    "end": "1208640"
  },
  {
    "text": "um you create a go http http",
    "start": "1208640",
    "end": "1212000"
  },
  {
    "text": "server with respect with a handler which",
    "start": "1212000",
    "end": "1214960"
  },
  {
    "text": "is",
    "start": "1214960",
    "end": "1215520"
  },
  {
    "text": "populated by calling the create",
    "start": "1215520",
    "end": "1218400"
  },
  {
    "text": "downgrading handler",
    "start": "1218400",
    "end": "1219840"
  },
  {
    "text": "from our library and this create",
    "start": "1219840",
    "end": "1221600"
  },
  {
    "text": "downgrading handler function",
    "start": "1221600",
    "end": "1222960"
  },
  {
    "text": "returns an http handler which does the",
    "start": "1222960",
    "end": "1226240"
  },
  {
    "text": "grpc web downgrading in an adapter",
    "start": "1226240",
    "end": "1228559"
  },
  {
    "text": "fashion",
    "start": "1228559",
    "end": "1229840"
  },
  {
    "text": "you pass this function the grpc server",
    "start": "1229840",
    "end": "1232720"
  },
  {
    "text": "object",
    "start": "1232720",
    "end": "1233600"
  },
  {
    "text": "and possibly also another http handler",
    "start": "1233600",
    "end": "1237039"
  },
  {
    "text": "and it can be used to multiplex the same",
    "start": "1237039",
    "end": "1239280"
  },
  {
    "text": "port for grpc",
    "start": "1239280",
    "end": "1240799"
  },
  {
    "text": "and plain http traffic you don't need to",
    "start": "1240799",
    "end": "1243840"
  },
  {
    "text": "use that you can also just pass nail",
    "start": "1243840",
    "end": "1245440"
  },
  {
    "text": "here",
    "start": "1245440",
    "end": "1246640"
  },
  {
    "text": "and then you have that http server serve",
    "start": "1246640",
    "end": "1249120"
  },
  {
    "text": "network connections they can also be tls",
    "start": "1249120",
    "end": "1250960"
  },
  {
    "text": "enabled",
    "start": "1250960",
    "end": "1252159"
  },
  {
    "text": "and that's really it and then you're",
    "start": "1252159",
    "end": "1253440"
  },
  {
    "text": "basically ready to go you won't be used",
    "start": "1253440",
    "end": "1256000"
  },
  {
    "text": "be able to use client streaming calls",
    "start": "1256000",
    "end": "1258559"
  },
  {
    "text": "but you can use",
    "start": "1258559",
    "end": "1259760"
  },
  {
    "text": "unary and server streaming calls and no",
    "start": "1259760",
    "end": "1262720"
  },
  {
    "text": "further",
    "start": "1262720",
    "end": "1263760"
  },
  {
    "text": "changes required to the application code",
    "start": "1263760",
    "end": "1267679"
  },
  {
    "start": "1268000",
    "end": "1393000"
  },
  {
    "text": "before i conclude i just want to talk",
    "start": "1268320",
    "end": "1271039"
  },
  {
    "text": "about",
    "start": "1271039",
    "end": "1271679"
  },
  {
    "text": "two lines of future work that we're",
    "start": "1271679",
    "end": "1273600"
  },
  {
    "text": "planning",
    "start": "1273600",
    "end": "1274799"
  },
  {
    "text": "the existing code is not really",
    "start": "1274799",
    "end": "1275919"
  },
  {
    "text": "performance optimized because the usage",
    "start": "1275919",
    "end": "1278159"
  },
  {
    "text": "is not",
    "start": "1278159",
    "end": "1278720"
  },
  {
    "text": "performance sensitive at least not at a",
    "start": "1278720",
    "end": "1281120"
  },
  {
    "text": "kind of like",
    "start": "1281120",
    "end": "1281760"
  },
  {
    "text": "individual rpg call overhead uh we",
    "start": "1281760",
    "end": "1284640"
  },
  {
    "text": "definitely want to do some performance",
    "start": "1284640",
    "end": "1286000"
  },
  {
    "text": "optimizations and one",
    "start": "1286000",
    "end": "1287280"
  },
  {
    "text": "idea that i have is to basically do an",
    "start": "1287280",
    "end": "1289679"
  },
  {
    "text": "auto sensing request",
    "start": "1289679",
    "end": "1290799"
  },
  {
    "text": "to determine if we actually need",
    "start": "1290799",
    "end": "1294240"
  },
  {
    "text": "that proxy on the client side",
    "start": "1294240",
    "end": "1297840"
  },
  {
    "text": "uh or we can just bypass it because we",
    "start": "1297840",
    "end": "1299840"
  },
  {
    "text": "know that the connection is going",
    "start": "1299840",
    "end": "1301679"
  },
  {
    "text": "either directly to the remote peer or",
    "start": "1301679",
    "end": "1303760"
  },
  {
    "text": "only through",
    "start": "1303760",
    "end": "1304799"
  },
  {
    "text": "compatible proxies in between",
    "start": "1304799",
    "end": "1307840"
  },
  {
    "text": "the other line of work is to support",
    "start": "1307840",
    "end": "1309840"
  },
  {
    "text": "client streaming and bi-directional",
    "start": "1309840",
    "end": "1311280"
  },
  {
    "text": "streaming rpcs",
    "start": "1311280",
    "end": "1313280"
  },
  {
    "text": "as i said earlier that is generally",
    "start": "1313280",
    "end": "1315679"
  },
  {
    "text": "client streaming is not possible over",
    "start": "1315679",
    "end": "1317280"
  },
  {
    "text": "http1",
    "start": "1317280",
    "end": "1318320"
  },
  {
    "text": "but we could use websockets websockets",
    "start": "1318320",
    "end": "1321919"
  },
  {
    "text": "are generally wider supported among",
    "start": "1321919",
    "end": "1325440"
  },
  {
    "text": "proxies and reverse proxies for example",
    "start": "1325440",
    "end": "1327840"
  },
  {
    "text": "aws's alb",
    "start": "1327840",
    "end": "1329520"
  },
  {
    "text": "does in fact support websockets and by",
    "start": "1329520",
    "end": "1332400"
  },
  {
    "text": "using web sockets for the connections",
    "start": "1332400",
    "end": "1334720"
  },
  {
    "text": "and implementing a grpc over websocket",
    "start": "1334720",
    "end": "1337120"
  },
  {
    "text": "logic",
    "start": "1337120",
    "end": "1337840"
  },
  {
    "text": "we could actually also realize client",
    "start": "1337840",
    "end": "1340640"
  },
  {
    "text": "streaming calls",
    "start": "1340640",
    "end": "1342480"
  },
  {
    "text": "that's work that's actually actively",
    "start": "1342480",
    "end": "1344960"
  },
  {
    "text": "ongoing and",
    "start": "1344960",
    "end": "1346480"
  },
  {
    "text": "it's being implemented it's already",
    "start": "1346480",
    "end": "1348000"
  },
  {
    "text": "implemented in our",
    "start": "1348000",
    "end": "1349919"
  },
  {
    "text": "product offering and we are currently",
    "start": "1349919",
    "end": "1351760"
  },
  {
    "text": "working on upstreaming this to the open",
    "start": "1351760",
    "end": "1354240"
  },
  {
    "text": "source",
    "start": "1354240",
    "end": "1354720"
  },
  {
    "text": "repository to make it available for",
    "start": "1354720",
    "end": "1357039"
  },
  {
    "text": "everyone",
    "start": "1357039",
    "end": "1359039"
  },
  {
    "text": "this concludes my talk i want to thank",
    "start": "1359039",
    "end": "1361200"
  },
  {
    "text": "all of you for listening",
    "start": "1361200",
    "end": "1362720"
  },
  {
    "text": "i've added here my email address in case",
    "start": "1362720",
    "end": "1364720"
  },
  {
    "text": "you have any questions or feedback or",
    "start": "1364720",
    "end": "1366640"
  },
  {
    "text": "comments or maybe",
    "start": "1366640",
    "end": "1367679"
  },
  {
    "text": "ideas feature requests",
    "start": "1367679",
    "end": "1370799"
  },
  {
    "text": "you're also welcome to use the github",
    "start": "1370799",
    "end": "1373440"
  },
  {
    "text": "issue tracker",
    "start": "1373440",
    "end": "1374480"
  },
  {
    "text": "for leaving this the url is i've printed",
    "start": "1374480",
    "end": "1377360"
  },
  {
    "text": "here at the bottom of the slide",
    "start": "1377360",
    "end": "1378880"
  },
  {
    "text": "just file a feature request or back or",
    "start": "1378880",
    "end": "1381840"
  },
  {
    "text": "just drop a note",
    "start": "1381840",
    "end": "1382960"
  },
  {
    "text": "to saying that you found it helpful and",
    "start": "1382960",
    "end": "1385919"
  },
  {
    "text": "that's it",
    "start": "1385919",
    "end": "1386799"
  },
  {
    "text": "i want to thank everyone for listening",
    "start": "1386799",
    "end": "1388400"
  },
  {
    "text": "again",
    "start": "1388400",
    "end": "1390080"
  },
  {
    "text": "good night",
    "start": "1390080",
    "end": "1395279"
  }
]