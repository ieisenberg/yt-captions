[
  {
    "text": "hey everyone welcome to our talk and thanks for coming my name is Zorya i'm",
    "start": "240",
    "end": "6080"
  },
  {
    "text": "an engineer working at Red Hat on the Open Shift networking team",
    "start": "6080",
    "end": "11200"
  },
  {
    "text": "and I'm Dan i also work at Red Hat on Open Shift networking so we're here",
    "start": "11200",
    "end": "16800"
  },
  {
    "text": "today to talk a little bit about Cublet probes it's an informal talk so we want to make it more interactive if there are",
    "start": "16800",
    "end": "23760"
  },
  {
    "text": "questions you want to you know um interrupt please feel free to raise your hands and you know we this is not a",
    "start": "23760",
    "end": "28880"
  },
  {
    "text": "monologue where Tan and I are going to talk things it's about also getting feedback from all of you and this is",
    "start": "28880",
    "end": "34880"
  },
  {
    "text": "centered around the ke 4558 that I have linked on the slide nine",
    "start": "34880",
    "end": "41680"
  },
  {
    "text": "I realized you 4558 is the PR the issue number yes 4559 so 4559 is the kept",
    "start": "41680",
    "end": "48399"
  },
  {
    "text": "number eight is the issue number so we're actually here to talk about",
    "start": "48399",
    "end": "53840"
  },
  {
    "text": "some of the problems that probes have today especially with regards to networking and network policies and the",
    "start": "53840",
    "end": "61280"
  },
  {
    "text": "ke outlines all of that in depth but we have tried to consolidate that into the slide deck today so firstly I'll be",
    "start": "61280",
    "end": "67760"
  },
  {
    "text": "talking about some of the the motivation behind even thinking about probes and",
    "start": "67760",
    "end": "73600"
  },
  {
    "text": "you know redesigning probes is a huge word right like in that sense but then we're going to try to talk about some of",
    "start": "73600",
    "end": "79119"
  },
  {
    "text": "the problems that are existing today with probes and Dan will cover some of the potential solutions that we have in",
    "start": "79119",
    "end": "85600"
  },
  {
    "text": "mind as part of the ke but again those are not set in stone which is precisely why we have this talk today we're hoping",
    "start": "85600",
    "end": "91920"
  },
  {
    "text": "to hear from you and to incorporate that feedback maybe there are other ways ways of solving the problems which we haven't",
    "start": "91920",
    "end": "98479"
  },
  {
    "text": "thought about so this is a brainstorming session uh and we would definitely love to have more co-authors and contributors",
    "start": "98479",
    "end": "105920"
  },
  {
    "text": "from the SIG node community because Dan and I are from SIG network we don't know what we're doing with the CRI and the",
    "start": "105920",
    "end": "112079"
  },
  {
    "text": "cubelet side of things so we would definitely you know love your um feedback and also maybe if you are",
    "start": "112079",
    "end": "118240"
  },
  {
    "text": "volunteering to help us out that would be awesome so for those of you who do not know what",
    "start": "118240",
    "end": "123840"
  },
  {
    "text": "probes are and are coming to the maintainer summit for the first time and for new to Kubernetes in general I would",
    "start": "123840",
    "end": "130720"
  },
  {
    "text": "like to give a TLDDR they are simply health monitoring diagnostic tools used to check the health of your pods and",
    "start": "130720",
    "end": "138000"
  },
  {
    "text": "there are different types of handlers both for the life cycle management of the pod and the probing of the pod like",
    "start": "138000",
    "end": "143040"
  },
  {
    "text": "the exec probes HTTP probes TCP type and gRPC and there are mainly three types of",
    "start": "143040",
    "end": "149680"
  },
  {
    "text": "probes startup probes as the name suggests is used for knowing if this",
    "start": "149680",
    "end": "155840"
  },
  {
    "text": "application has started up especially used when you have an initialization process and it's going to take longer",
    "start": "155840",
    "end": "161120"
  },
  {
    "text": "for your pod to come up in that case you can use startup probes to know if your application has started or not and if it",
    "start": "161120",
    "end": "167760"
  },
  {
    "text": "hasn't and if the probe has failed the check to know if your application has started up or not the part goes into a",
    "start": "167760",
    "end": "173200"
  },
  {
    "text": "failed state so that's literally what startup probes are the second type is the readiness probes usually used in",
    "start": "173200",
    "end": "178400"
  },
  {
    "text": "conjunction with services usually when your pod is a backend to a service or an endpoint when the readiness of the pod",
    "start": "178400",
    "end": "185440"
  },
  {
    "text": "has not succeeded which is is the pod ready to receive traffic is the tlddr there it doesn't join the endpoint",
    "start": "185440",
    "end": "192480"
  },
  {
    "text": "slices group right so it stays there in fail state and based on your parameters of how many times you're checking for",
    "start": "192480",
    "end": "198239"
  },
  {
    "text": "the failure state and how many times you are going to do the readiness probe this will continue to retry the last one is",
    "start": "198239",
    "end": "204800"
  },
  {
    "text": "the livveness probe which is the third type which is commonly used to check if your application is healthy is it alive",
    "start": "204800",
    "end": "211040"
  },
  {
    "text": "are you having any crash loop backups are you having any restarts is there a deadlock is your application alive and",
    "start": "211040",
    "end": "218080"
  },
  {
    "text": "if yes we continue things are good if no based on the parameters again it restarts to make sure that your part is",
    "start": "218080",
    "end": "224400"
  },
  {
    "text": "healthy this is like a very nice feature these are the three types of probes that we have in Kubernetes today and getting",
    "start": "224400",
    "end": "231599"
  },
  {
    "text": "to the problem statement and the crux of our talk here is how do probes work with",
    "start": "231599",
    "end": "236879"
  },
  {
    "text": "network policies i think during and Dan mentioned this i wasn't there when network policies were designed but when",
    "start": "236879",
    "end": "243360"
  },
  {
    "text": "network policies were designed I think by design it was kind of documented that",
    "start": "243360",
    "end": "249040"
  },
  {
    "text": "the cubelet should always be able to reach all pods on your cluster and this",
    "start": "249040",
    "end": "254080"
  },
  {
    "text": "is because there is no good way to solve this problem in general but really when",
    "start": "254080",
    "end": "259440"
  },
  {
    "text": "the Kubernetes networking is open by default and one of the main reasons for using network policies is to restrict",
    "start": "259440",
    "end": "265360"
  },
  {
    "text": "traffic to your pod so when you do create a network policy and you have an ingress deny default I think the",
    "start": "265360",
    "end": "271040"
  },
  {
    "text": "expectation is that you only want to allow traffic that you want to be allowed but in this case anything from",
    "start": "271040",
    "end": "276960"
  },
  {
    "text": "the host gets allowed so you have to open a hole from the host for cublet probes to work and this is documented in",
    "start": "276960",
    "end": "283520"
  },
  {
    "text": "all CNIs expect this like uh SIG network expects all CNIs to implement it this",
    "start": "283520",
    "end": "288720"
  },
  {
    "text": "way but maybe we can do better here right this is by design and one of the reasons why this came up is because we",
    "start": "288720",
    "end": "294960"
  },
  {
    "text": "also have admin network policy API which is the new API that is out of tree which is network policies for admins and there",
    "start": "294960",
    "end": "302160"
  },
  {
    "text": "today we don't support ingress from the host but if we do we don't want to make the same assumption for the user on",
    "start": "302160",
    "end": "309120"
  },
  {
    "text": "their behalf that cublet probes are expected to work for pods with policies in",
    "start": "309120",
    "end": "314919"
  },
  {
    "text": "place the second use case here or the problem is with dual stack clusters",
    "start": "314919",
    "end": "320320"
  },
  {
    "text": "there's been issues opened by our community users and members around how it's not possible for cublet probes to",
    "start": "320320",
    "end": "328320"
  },
  {
    "text": "have a way to define which pod IP you want to do the probing at by default it's the V4 but what if the application",
    "start": "328320",
    "end": "335680"
  },
  {
    "text": "is only V6 aware maybe it doesn't know V4 right in that case for IP families",
    "start": "335680",
    "end": "340880"
  },
  {
    "text": "there's not a convenient good way to do this today maybe you can use the host field and you know have a local host set",
    "start": "340880",
    "end": "347840"
  },
  {
    "text": "to your v6 but this is not intuitive so maybe there is another way by redesigning probes where we can solve",
    "start": "347840",
    "end": "353520"
  },
  {
    "text": "this problem and an extension of that is also when you include multi networks on",
    "start": "353520",
    "end": "358560"
  },
  {
    "text": "pods right there is a sig network multi network working group that's working on some of these aspects but what if the",
    "start": "358560",
    "end": "365360"
  },
  {
    "text": "pod actually has more than one IP and Kubernetes today the core Kubernetes is not aware of any of these concepts and",
    "start": "365360",
    "end": "373440"
  },
  {
    "text": "it defines that you have to have a unique part IP in your cluster and if",
    "start": "373440",
    "end": "378560"
  },
  {
    "text": "the part has more than one IP if you want your probe to work on that IP there is no way to do this right it's the same",
    "start": "378560",
    "end": "384319"
  },
  {
    "text": "as the dual stack issue and the last one which is interesting is the overlapping part ips and like I mentioned by default",
    "start": "384319",
    "end": "390720"
  },
  {
    "text": "we expect in networking for Kubernetes that All pods in your cluster should have a unique IP but this is not true",
    "start": "390720",
    "end": "397440"
  },
  {
    "text": "anymore with a lot of ecosystem projects a lot of CNI support having more than one pod with the same IP for multiple",
    "start": "397440",
    "end": "404560"
  },
  {
    "text": "use cases especially in context of multi networking and in that case cublet doesn't know because it assumes that all",
    "start": "404560",
    "end": "410639"
  },
  {
    "text": "your pods should have unique IP and I'm a maintainer of the UV and Kubernetes CNI where we implemented a opinionated",
    "start": "410639",
    "end": "418319"
  },
  {
    "text": "way of doing multi-etworking and as part of that we support overlapping pod ips and we had to get around this problem by",
    "start": "418319",
    "end": "424479"
  },
  {
    "text": "doing a hack of sorts cuz we had to keep the default network as is so nothing is",
    "start": "424479",
    "end": "430000"
  },
  {
    "text": "allowed on the default network except cublet probes which is the ETH0 interface that you see there the primary interface for the part is the UDN0 right",
    "start": "430000",
    "end": "437039"
  },
  {
    "text": "which is where we would love the probes to work but doesn't because cublet is not simply aware of this but maybe this",
    "start": "437039",
    "end": "443120"
  },
  {
    "text": "is also one problem to consider with DR and everything that's happening how will probes work for these extranet devices",
    "start": "443120",
    "end": "449520"
  },
  {
    "text": "on your pods can we solve it by rethinking how probes work or maybe",
    "start": "449520",
    "end": "454560"
  },
  {
    "text": "redefine the semantics a bit and the final one is the security loophole which has been a long-standing issue in",
    "start": "454560",
    "end": "460960"
  },
  {
    "text": "Kubernetes there is a host field in your probes and this host field can be set to",
    "start": "460960",
    "end": "467599"
  },
  {
    "text": "basically anything anything in your cluster can be an external endpoint could be a load balancer IP which was",
    "start": "467599",
    "end": "473919"
  },
  {
    "text": "the primary use case for wanting the probes to work at that endpoint but cublet is not going to verify what that",
    "start": "473919",
    "end": "480160"
  },
  {
    "text": "is it's simply going to probe that endpoint that IP and this can lead to server side request forgery attacks",
    "start": "480160",
    "end": "487280"
  },
  {
    "text": "which is bad so maybe we didn't think this the right way when we designed it so now we are rethinking this right like",
    "start": "487280",
    "end": "493520"
  },
  {
    "text": "how can we prevent users from shooting themselves in their foot and now it's like a fun question for all of you if",
    "start": "493520",
    "end": "500560"
  },
  {
    "text": "you were to put the local host IP here 127001 what would you expect your probes",
    "start": "500560",
    "end": "507680"
  },
  {
    "text": "to do would you expect it to be probing the local host of the pod raise of hands if you think that's",
    "start": "507680",
    "end": "515039"
  },
  {
    "text": "how it works actually it's the local host of the node",
    "start": "515039",
    "end": "520240"
  },
  {
    "text": "which is which is not intuitive right like I saw two of you raise hands and it's really not intuitive because maybe",
    "start": "520240",
    "end": "525279"
  },
  {
    "text": "people don't think but it's you're basically telling cublet to probe the node and also you can even probe the",
    "start": "525279",
    "end": "532080"
  },
  {
    "text": "metrics endpoint or some other local process running on your host so this is a huge hole in security in terms of how",
    "start": "532080",
    "end": "537839"
  },
  {
    "text": "it's done today but we have a stop gap solution in the interim which is the ke",
    "start": "537839",
    "end": "543240"
  },
  {
    "text": "4942 which is a smaller version with sigoth where we're trying to add a pod security admission where admins can use",
    "start": "543240",
    "end": "550880"
  },
  {
    "text": "the enforced model or the restricted model to define how this should look like and this is a sample work in",
    "start": "550880",
    "end": "557120"
  },
  {
    "text": "progress PR that I have so if you create a pod with the host field set and if based on what the admin has you will get",
    "start": "557120",
    "end": "563920"
  },
  {
    "text": "this failure right so you can even block users from being able to create the pods and the and to warn the or you can even",
    "start": "563920",
    "end": "570720"
  },
  {
    "text": "have it in the warn mode or audit mode saying you're setting a field that has a security loophole right so that's like",
    "start": "570720",
    "end": "576959"
  },
  {
    "text": "an interim stop gap solution the reason why we're doing this is because you have no way to deprecate APIs in Kubernetes",
    "start": "576959",
    "end": "583360"
  },
  {
    "text": "they live on forever maybe you can deprecate it in the docs but that's it you can't really block the API or remove",
    "start": "583360",
    "end": "589279"
  },
  {
    "text": "that field there is no good way to do it so we're adding a PSA as a stop gap solution but yeah over to Dan for",
    "start": "589279",
    "end": "596880"
  },
  {
    "text": "talking about some of the semantics and taking it away with the potential solutions",
    "start": "596880",
    "end": "603120"
  },
  {
    "text": "thanks um so broadly there are two different approaches that we could take to trying",
    "start": "603120",
    "end": "609360"
  },
  {
    "text": "to fix things one is that we could keep the semantics exactly the same and then",
    "start": "609360",
    "end": "614640"
  },
  {
    "text": "but make them better somehow um and then we can reuse the existing probe types but if we want to change the semantics",
    "start": "614640",
    "end": "620959"
  },
  {
    "text": "then we have to worry about API compatibility and so then it might be necessary to deprecate the existing",
    "start": "620959",
    "end": "626079"
  },
  {
    "text": "probe types and introduce new probe types that do the same things but with different semantics and we're not",
    "start": "626079",
    "end": "631839"
  },
  {
    "text": "totally sure exactly where the boundary between those two approaches are there are some things that seem pretty",
    "start": "631839",
    "end": "638000"
  },
  {
    "text": "strongly API like in in the semantics of probes they can't be blocked by network policy they answer the question is the",
    "start": "638000",
    "end": "645440"
  },
  {
    "text": "serving process running you know that that's the main thing that probes do people also think of them as answering",
    "start": "645440",
    "end": "651040"
  },
  {
    "text": "the question is the pod connected to the pod network and it sort of answers that but really all it tells you is can",
    "start": "651040",
    "end": "657440"
  },
  {
    "text": "cublet on the same node as the pod talk to the pod over the pod network that doesn't mean that any other pod on the",
    "start": "657440",
    "end": "663839"
  },
  {
    "text": "same node could talk to it because it's possible that the network policies aren't fully programmed at that point and it's not it's possible that no other",
    "start": "663839",
    "end": "670880"
  },
  {
    "text": "nodes can talk to it u because the probe doesn't check that at all there's another thing called um pod readiness",
    "start": "670880",
    "end": "679920"
  },
  {
    "text": "gates that let you program your own more complicated startup livveness readiness",
    "start": "679920",
    "end": "686079"
  },
  {
    "text": "whatever checks um but uh the the third API like thing is that probes are sent",
    "start": "686079",
    "end": "692480"
  },
  {
    "text": "to pod status pod ip zero um in particular they are not sent to local host and what this means is that it's",
    "start": "692480",
    "end": "700320"
  },
  {
    "text": "possible to run a pod that is only listening on exactly one IP address and it will be able to answer probe requests",
    "start": "700320",
    "end": "706640"
  },
  {
    "text": "and so if we change probes to probe a different IP like localhost that might break some existing pods and would",
    "start": "706640",
    "end": "712959"
  },
  {
    "text": "require us to do the non-backward compatible solution uh Hyram's law which some of",
    "start": "712959",
    "end": "719279"
  },
  {
    "text": "you may be familiar with says that basically any exposed behavior eventually becomes an API um there may",
    "start": "719279",
    "end": "726480"
  },
  {
    "text": "be people doing incredibly weird things like having their server respond differently if the client IP is the node",
    "start": "726480",
    "end": "733360"
  },
  {
    "text": "IP and only doing the health check case in that case and doing something different in another case that would be",
    "start": "733360",
    "end": "738959"
  },
  {
    "text": "really weird but it theoretically is something people might do um likewise",
    "start": "738959",
    "end": "744000"
  },
  {
    "text": "people might be assuming somehow that probes come from outside the network namespace like maybe they have ebpf on",
    "start": "744000",
    "end": "750720"
  },
  {
    "text": "their ETH zero that that answers the probe somehow and so if we change the way it worked it would screw them up um",
    "start": "750720",
    "end": "757920"
  },
  {
    "text": "so these are things that we have to think about with the solutions um so the the solutions these",
    "start": "757920",
    "end": "764480"
  },
  {
    "text": "are all suggestions ideas uh we're looking for feedback if if you have you",
    "start": "764480",
    "end": "770000"
  },
  {
    "text": "know even right now during the talk like if you're like \"Oh this can't possibly work because of whatever or you know",
    "start": "770000",
    "end": "776399"
  },
  {
    "text": "raise your hand or or something or go up to the mic.\" We we should have time for questions at the end",
    "start": "776399",
    "end": "782120"
  },
  {
    "text": "too so potential solution number one CRI has a port forward function where you",
    "start": "782120",
    "end": "788480"
  },
  {
    "text": "say \"I want a connection to port 8080 on this pod.\" And CRI will open a connection within the pod's network",
    "start": "788480",
    "end": "794800"
  },
  {
    "text": "namespace uh it actually opens it to localhost which ends up resolving to",
    "start": "794800",
    "end": "800399"
  },
  {
    "text": "either 127001 or the IPv6 version col one uh depending on what's available and",
    "start": "800399",
    "end": "807200"
  },
  {
    "text": "what's work or that what works and then you can send bytes over the gRPC",
    "start": "807200",
    "end": "813760"
  },
  {
    "text": "connection to CRI and CRI will forward them to the pod and forward the result back so it's like having a connection to",
    "start": "813760",
    "end": "819920"
  },
  {
    "text": "the port but it's it's actually tunnneled through gRPC um so this solves the network policy",
    "start": "819920",
    "end": "827120"
  },
  {
    "text": "problem because the the connection never goes over the pod network it's it's going directly into the pod it solves",
    "start": "827120",
    "end": "833279"
  },
  {
    "text": "the IP family po problem because if assuming that your pod is listening on local host at all it will work with",
    "start": "833279",
    "end": "838959"
  },
  {
    "text": "either IPv4 or IPv6 it solves the overlapping IP problem because we don't",
    "start": "838959",
    "end": "845120"
  },
  {
    "text": "care about the pod's actual IPs we're just going into its network namespace and connecting to localhost it doesn't",
    "start": "845120",
    "end": "850800"
  },
  {
    "text": "require changes to CRI because we already have this method and the change to cublet isn't that big you're just",
    "start": "850800",
    "end": "856480"
  },
  {
    "text": "changing your net call to a gRPC method cons it changes the probe",
    "start": "856480",
    "end": "863440"
  },
  {
    "text": "semantics it requires the pod to be listening on all interfaces or at least to be listening on local host",
    "start": "863440",
    "end": "869880"
  },
  {
    "text": "um it results in more CPU usage from CRI because it's actually copying packets",
    "start": "869880",
    "end": "876399"
  },
  {
    "text": "back and forth between the the server and Cublet uh which also makes it less",
    "start": "876399",
    "end": "882600"
  },
  {
    "text": "efficient um side note there it's possible that we could you know make this work slightly",
    "start": "882600",
    "end": "889199"
  },
  {
    "text": "better you could use an ebpf program to splice sockets together to get CRI out of the way or maybe hand a file",
    "start": "889199",
    "end": "896560"
  },
  {
    "text": "descriptor over a socket back to Cublet so that again to get CRI out of the way",
    "start": "896560",
    "end": "901839"
  },
  {
    "text": "so there there are possible fixes there uh solution two what if we just",
    "start": "901839",
    "end": "908880"
  },
  {
    "text": "give up on probing over the network and say we'll use exec probes for everything so if if your uh pod definition says I",
    "start": "908880",
    "end": "916800"
  },
  {
    "text": "want to use an HTTP get probe cublet would just instead do an exec probe that runs curl inside your",
    "start": "916800",
    "end": "925040"
  },
  {
    "text": "pod so again pros it solves the same set of problems because again you would just be curling with inside the pod network",
    "start": "925560",
    "end": "932920"
  },
  {
    "text": "namespace doesn't require change to CRI unlike the previous solution it doesn't cause extra CRI CPU usage changes the",
    "start": "932920",
    "end": "941279"
  },
  {
    "text": "probe semantics in the same way as the other one um as another con we've heard",
    "start": "941279",
    "end": "947120"
  },
  {
    "text": "exec probes are slow and if there are people heavily involved with CRI yeah okay I'm seeing people nodding so exec",
    "start": "947120",
    "end": "953040"
  },
  {
    "text": "probes are slow so you wouldn't want to do this um and then of course the other thing is it only works if you actually",
    "start": "953040",
    "end": "958160"
  },
  {
    "text": "have a curl binary in your pod which not all pods would have so Cublet would have",
    "start": "958160",
    "end": "963839"
  },
  {
    "text": "to do something weird like attach an extra volume to the pod that just contains a curl binary so that it would",
    "start": "963839",
    "end": "969279"
  },
  {
    "text": "have access to that and that seems kind of weird we thought about you could do a",
    "start": "969279",
    "end": "975199"
  },
  {
    "text": "slightly lighter weight version of this rather than actually doing a full exec probe we could add a new API to CRI that",
    "start": "975199",
    "end": "982480"
  },
  {
    "text": "just does ns enter to only change one of of the name spaces um but would",
    "start": "982480",
    "end": "989040"
  },
  {
    "text": "otherwise be very similar um and this is also nice because then it doesn't require you to have curl in the pod",
    "start": "989040",
    "end": "995360"
  },
  {
    "text": "because you can just use whatever binaries you have on the local disk other than that it's fairly similar to the the previous solution um and and and",
    "start": "995360",
    "end": "1003920"
  },
  {
    "text": "you you seem to be nodding that you like it so I think maybe the third point in the cons maybe doesn't actually solve",
    "start": "1003920",
    "end": "1009120"
  },
  {
    "text": "the exact probe performance problems it sounds like you're saying it does solve those problems it'd be better it'd be",
    "start": "1009120",
    "end": "1015040"
  },
  {
    "text": "better i mean you're still starting up a curl binary whatever rather than just doing it",
    "start": "1015040",
    "end": "1020920"
  },
  {
    "text": "Right it's it's not involving an OCI runtime thing is is what Peter was saying",
    "start": "1020920",
    "end": "1026918"
  },
  {
    "text": "there um potential solution four we could add a big heavyweight probing API",
    "start": "1026919",
    "end": "1033038"
  },
  {
    "text": "to CRI where Cublet would just say okay this pod has you know a gRPC probe",
    "start": "1033039",
    "end": "1039038"
  },
  {
    "text": "request with these details go do that for me and then CRI would periodically",
    "start": "1039039",
    "end": "1044079"
  },
  {
    "text": "probe and report status back to to Cublet um possibly as part of the",
    "start": "1044079",
    "end": "1049919"
  },
  {
    "text": "existing status uh reporting check stuff that Cublet does um solves the same problem probably",
    "start": "1049919",
    "end": "1058799"
  },
  {
    "text": "more efficient than having Cublet constantly poking CRI um same changes to",
    "start": "1058799",
    "end": "1065760"
  },
  {
    "text": "probe semantics this requires a big new CRI API and maybe it's too big like maybe we don't want CRI to know that",
    "start": "1065760",
    "end": "1072480"
  },
  {
    "text": "much about probes you know if we had done this originally then when they introduced gRPC probes people would have",
    "start": "1072480",
    "end": "1078240"
  },
  {
    "text": "had to make changes to both Cublet and CRI and then that would have delayed the",
    "start": "1078240",
    "end": "1083520"
  },
  {
    "text": "implementation because every we'd have to wait till everyone had a new version of cryo or",
    "start": "1083520",
    "end": "1088760"
  },
  {
    "text": "containerd so this might not be the best solution because of that",
    "start": "1088760",
    "end": "1094760"
  },
  {
    "text": "um the last two are a little weird um I think so one idea was that we have this",
    "start": "1094760",
    "end": "1103200"
  },
  {
    "text": "problem with network policy because you can't distinguish cublet probes from any",
    "start": "1103200",
    "end": "1109280"
  },
  {
    "text": "other connection coming from a host network process so what if we moved the",
    "start": "1109280",
    "end": "1114480"
  },
  {
    "text": "probing out of host network into a pod network pod so in in this solution",
    "start": "1114480",
    "end": "1119600"
  },
  {
    "text": "cublet would launch a pod that just existed to do probes for cublet and report status back um in this case you",
    "start": "1119600",
    "end": "1128320"
  },
  {
    "text": "can recognize specifically what requests are coming from that pod and so you could use admin network policy to say",
    "start": "1128320",
    "end": "1134400"
  },
  {
    "text": "this pod is allowed to talk to every other pod to do probing",
    "start": "1134400",
    "end": "1139960"
  },
  {
    "text": "um to minimize the privileges that the pod had you would probably still want cublet to do the actual updating of pod",
    "start": "1139960",
    "end": "1146400"
  },
  {
    "text": "status um so this is closer to the current uh",
    "start": "1146400",
    "end": "1153440"
  },
  {
    "text": "semantics and maybe we could do this without having to add new probing API",
    "start": "1153440",
    "end": "1158640"
  },
  {
    "text": "doesn't require changes to CRI um we when we brought this up to SIG",
    "start": "1158640",
    "end": "1164400"
  },
  {
    "text": "node some people were excited about it because if you're doing a managed Kubernetes platform the fact that Cublet",
    "start": "1164400",
    "end": "1172240"
  },
  {
    "text": "does some like platform work and some enduser work for the probes is is bad",
    "start": "1172240",
    "end": "1179039"
  },
  {
    "text": "for accounting reasons and they they liked that this would move all of the probes into a separate process and make",
    "start": "1179039",
    "end": "1184480"
  },
  {
    "text": "it easier to do the the cost accounting um cons if you do it with a host network",
    "start": "1184480",
    "end": "1191280"
  },
  {
    "text": "pod it doesn't actually get you any closer to solving the network policy problem but if you do it with a pod network pod it it only works if you have",
    "start": "1191280",
    "end": "1198640"
  },
  {
    "text": "an admin network policy in place to create the to to allow the connections",
    "start": "1198640",
    "end": "1204720"
  },
  {
    "text": "um it's weird for Cublet to be launching this pod like that that's one of the the big downsides it seems to me and then if",
    "start": "1204720",
    "end": "1211360"
  },
  {
    "text": "this pod gets compromised well you have an admin network policy saying it's allowed to talk to every other pod in",
    "start": "1211360",
    "end": "1216480"
  },
  {
    "text": "the cluster and that's kind of bad um so it's we would have to be very careful",
    "start": "1216480",
    "end": "1221919"
  },
  {
    "text": "about that pod um and then the the the last one is",
    "start": "1221919",
    "end": "1227520"
  },
  {
    "text": "rather than having a probing pod we could just attach a sidecar to each pod um that does the the probing this is",
    "start": "1227520",
    "end": "1235440"
  },
  {
    "text": "kind of like the making CRI do it except we don't have to change CRI at all uh Cublet would just attach an extra uh",
    "start": "1235440",
    "end": "1243039"
  },
  {
    "text": "ephemeral container to each pod that pod would do the probing and report back to",
    "start": "1243039",
    "end": "1248520"
  },
  {
    "text": "Cublet uh so it has a mix of the pros and cons of other solutions it solves the same problems it doesn't require",
    "start": "1248520",
    "end": "1253760"
  },
  {
    "text": "changes to CRI but it changes probe semantics and and again we have this weirdness that Cubit is now suddenly",
    "start": "1253760",
    "end": "1259280"
  },
  {
    "text": "managing these other things that it didn't used to have to manage um so that's that's what we have",
    "start": "1259280",
    "end": "1266360"
  },
  {
    "text": "um and then the questions this is just sort of you know restating what we said at the beginning is this really a good",
    "start": "1266360",
    "end": "1272400"
  },
  {
    "text": "idea we wanted to solve this for admin network policy so that we don't have to make a rule that says admin network policy does not affect this one",
    "start": "1272400",
    "end": "1278960"
  },
  {
    "text": "particular set of connections and there's no way to make it do that um",
    "start": "1278960",
    "end": "1284240"
  },
  {
    "text": "other stuff got pulled in as we started looking at it but how much do we want to solve here the security problem is",
    "start": "1284240",
    "end": "1290559"
  },
  {
    "text": "pretty much already fixed with the the PSA thing um maybe the IPv4 versus IPv6 thing",
    "start": "1290559",
    "end": "1297600"
  },
  {
    "text": "isn't a big enough problem for us to care um so that's what we have um we would",
    "start": "1297600",
    "end": "1304480"
  },
  {
    "text": "like feedback questions concerns",
    "start": "1304480",
    "end": "1310120"
  },
  {
    "text": "help uh there is a mic out there",
    "start": "1310120",
    "end": "1315360"
  },
  {
    "text": "for Yeah thanks um for all the context i feel like there's like a fundamental",
    "start": "1317000",
    "end": "1323760"
  },
  {
    "text": "disagreement between two of the different um like concepts that we're trying to balance here whereas like what",
    "start": "1323760",
    "end": "1330480"
  },
  {
    "text": "is the purpose of a probe versus how to do this probe really efficiently like if like the the admin the network policy",
    "start": "1330480",
    "end": "1336799"
  },
  {
    "text": "piece of it is like is the probe reachable via network any of these like optimizations that we make basically",
    "start": "1336799",
    "end": "1343039"
  },
  {
    "text": "mean that we're not answering that question um I personally CRI maintainer",
    "start": "1343039",
    "end": "1348799"
  },
  {
    "text": "um like the idea of a special case CRI call for it just because that's more",
    "start": "1348799",
    "end": "1353919"
  },
  {
    "text": "idiomatic and um allows us to handle it closer too and like get more efficient",
    "start": "1353919",
    "end": "1360640"
  },
  {
    "text": "but um like this one I like this one the but then the the problem is like this is",
    "start": "1360640",
    "end": "1367280"
  },
  {
    "text": "answering can the CRI implementation talk to the pod's network not can anyone",
    "start": "1367280",
    "end": "1374000"
  },
  {
    "text": "talk to the pod so it almost feels like we need separate mechanisms to like",
    "start": "1374000",
    "end": "1380080"
  },
  {
    "text": "answer both those questions yeah so I guess the assumption here was that internally this would be doing one of",
    "start": "1380080",
    "end": "1386799"
  },
  {
    "text": "the other solutions like the the port forward or the NS enter or or something well but even so that still doesn't",
    "start": "1386799",
    "end": "1392880"
  },
  {
    "text": "answer the question like can a pod in within the network contact this pod yeah",
    "start": "1392880",
    "end": "1398400"
  },
  {
    "text": "and and I had um talked about that here the second point on the API like",
    "start": "1398400",
    "end": "1405200"
  },
  {
    "text": "semantics people want the the the probe to mean is the pod reachable over the",
    "start": "1405200",
    "end": "1410720"
  },
  {
    "text": "network but it only answers one small part of that and and maybe we need a better is the po pod",
    "start": "1410720",
    "end": "1419679"
  },
  {
    "text": "fully reachable over the network thing yeah i'm perfectly happy with the answer to this question being we can ignore",
    "start": "1419679",
    "end": "1426799"
  },
  {
    "text": "that for the the purposes of this like we just say like that's not the question we're answering so like do something",
    "start": "1426799",
    "end": "1432080"
  },
  {
    "text": "else for that that's fine with me um but I think we should make that clear in the design proposal yeah definitely need to",
    "start": "1432080",
    "end": "1437440"
  },
  {
    "text": "make it clear",
    "start": "1437440",
    "end": "1440679"
  },
  {
    "text": "yeah so Mike Mic suggest gesting that we pass basically from the CRI to the CNI",
    "start": "1451039",
    "end": "1456159"
  },
  {
    "text": "and have the CNI be the entity that's doing this checking right um which I I agree that there's a degree",
    "start": "1456159",
    "end": "1463520"
  },
  {
    "text": "of like I can imagine a world where the CRI is taught how to do this probing and then CNI is doing something funky um",
    "start": "1463520",
    "end": "1471279"
  },
  {
    "text": "like this like ETH and then UDP separate separate uh network thing and the C CRI",
    "start": "1471279",
    "end": "1477679"
  },
  {
    "text": "is actually not the entity that knows the best about the networking uh architecture of the pod and maybe it",
    "start": "1477679",
    "end": "1483120"
  },
  {
    "text": "really should be answered as close to the deciding like entity as possible",
    "start": "1483120",
    "end": "1489039"
  },
  {
    "text": "that can't really happen though as long as CNI is is fully execrandom binary",
    "start": "1489039",
    "end": "1495120"
  },
  {
    "text": "based because you don't want to have to you know have every probe jump through all those hoops",
    "start": "1495120",
    "end": "1501520"
  },
  {
    "text": "and then there's also host networking which has just been mentioned oh or sorry did you have more or",
    "start": "1501520",
    "end": "1508559"
  },
  {
    "text": "I was just relaying relaying something that was mentioned back here which is that there's also host networking but",
    "start": "1508559",
    "end": "1514400"
  },
  {
    "text": "right uh my biggest feedback please don't even",
    "start": "1514400",
    "end": "1520480"
  },
  {
    "text": "consider a situation where you bypass the runtimes because like if if a klet",
    "start": "1520480",
    "end": "1526559"
  },
  {
    "text": "doing something overhead of runtime it means what you are losing like implementation of different runtime",
    "start": "1526559",
    "end": "1532919"
  },
  {
    "text": "handlers so like if you have anything implemented as a VM per port or anything",
    "start": "1532919",
    "end": "1538880"
  },
  {
    "text": "in confidential containers trying to NS enter to something from the host doesn't",
    "start": "1538880",
    "end": "1544960"
  },
  {
    "text": "bring you to the actual name space so trust the runtime ask them to do a thing",
    "start": "1544960",
    "end": "1550799"
  },
  {
    "text": "for you but don't try to go and assume how it's implemented i think in the ke",
    "start": "1550799",
    "end": "1557039"
  },
  {
    "text": "it actually like in the NSenter one there's a footnote saying you know obviously this only works for you know",
    "start": "1557039",
    "end": "1563120"
  },
  {
    "text": "Linux containerbased runtimes but we could consider this to be an optimization on top of one of the other",
    "start": "1563120",
    "end": "1568880"
  },
  {
    "text": "things like you know if you're on Windows then it would just use an exec probe you know well even in Windows if",
    "start": "1568880",
    "end": "1575039"
  },
  {
    "text": "containerd implements something like a port forwarding to a appropriate namespace or whatever is called it in",
    "start": "1575039",
    "end": "1580720"
  },
  {
    "text": "the Windows world anyway like don't assume how a container is implemented on",
    "start": "1580720",
    "end": "1586400"
  },
  {
    "text": "low level we have API we have a contract between the kublet and runtime you need",
    "start": "1586400",
    "end": "1591679"
  },
  {
    "text": "to uh something in addition to that contract let's change where API let's not overwrite it from external right",
    "start": "1591679",
    "end": "1598720"
  },
  {
    "text": "like the the plan with the nsenter one was not that cublet would be doing that it was that cublet would invoke a CRI",
    "start": "1598720",
    "end": "1605640"
  },
  {
    "text": "API that would would have a lighter weight exec semantics you know",
    "start": "1605640",
    "end": "1613440"
  },
  {
    "text": "hi yeah uh probably missing something but you you mentioned briefly the uh the",
    "start": "1613440",
    "end": "1618960"
  },
  {
    "text": "possibility that the admin network policy might not be completely programmed before the probe",
    "start": "1618960",
    "end": "1624440"
  },
  {
    "text": "executes what's the big deal like could you just say if you want to use a probe you have to have an admin network policy",
    "start": "1624440",
    "end": "1630320"
  },
  {
    "text": "that allows the cublet to talk to the pot is that is that bad it's it's not great and it's not",
    "start": "1630320",
    "end": "1637919"
  },
  {
    "text": "backward compatible so that would force us into one of the solutions where we have to do an API break to introduce the",
    "start": "1637919",
    "end": "1644000"
  },
  {
    "text": "new semantics that makes sense would catch people by surprise in some sense it would catch people by surprise if you",
    "start": "1644000",
    "end": "1649919"
  },
  {
    "text": "didn't suddenly you would have a cluster with everything failing till you had that created so yeah that makes sense",
    "start": "1649919",
    "end": "1655440"
  },
  {
    "text": "thanks so like this uh would be really happy to",
    "start": "1655440",
    "end": "1660960"
  },
  {
    "text": "see something like this change um I guess two one clarification question and",
    "start": "1660960",
    "end": "1666240"
  },
  {
    "text": "then one like suggestion question clarification question i felt like on the cons for every option it seemed like",
    "start": "1666240",
    "end": "1672400"
  },
  {
    "text": "the semantics were changing did I make that up or is is did I miss one",
    "start": "1672400",
    "end": "1677840"
  },
  {
    "text": "the beginning uh to Oh actually Oh okay five doesn't have it okay",
    "start": "1677840",
    "end": "1684799"
  },
  {
    "text": "awesome um the second question I have is on um yeah the probing pod um I I like",
    "start": "1684799",
    "end": "1690960"
  },
  {
    "text": "this option i'm wondering does I know in some places in in Kubernetes there are static pods that are created does that",
    "start": "1690960",
    "end": "1697279"
  },
  {
    "text": "help at all is that what we pre-proposing here is there a reason a static pod wouldn't work here so if you",
    "start": "1697279",
    "end": "1704080"
  },
  {
    "text": "want it to be pod network then it can't be a static pod really um it's at least",
    "start": "1704080",
    "end": "1710559"
  },
  {
    "text": "not well defined in that case okay thank you",
    "start": "1710559",
    "end": "1715840"
  },
  {
    "text": "hello thanks for the session um so it seems to me that there is quite an",
    "start": "1715840",
    "end": "1720960"
  },
  {
    "text": "interest about using a variation of X8 probes so this is quite out uh direction",
    "start": "1720960",
    "end": "1728080"
  },
  {
    "text": "but in that case there is one specific use case about the containers which have very low latency requirement with those",
    "start": "1728080",
    "end": "1735039"
  },
  {
    "text": "careful pinning and something exacts into that disrupts basically all the",
    "start": "1735039",
    "end": "1740240"
  },
  {
    "text": "latency guarantees so just a I I I think just a heads up to take this this case",
    "start": "1740240",
    "end": "1747200"
  },
  {
    "text": "into consideration because it's kind of limited but when this happens disrupts pretty much everything I guess it could",
    "start": "1747200",
    "end": "1754799"
  },
  {
    "text": "be solved somehow with the runtime help if there is maybe a new I see Peter nodding a new CRI option to run",
    "start": "1754799",
    "end": "1763520"
  },
  {
    "text": "something in a specific CPU but still this is something that when people say",
    "start": "1763520",
    "end": "1769200"
  },
  {
    "text": "exact probe quite some people you know yeah like the the basic exec probe idea",
    "start": "1769200",
    "end": "1776240"
  },
  {
    "text": "I think the performance just wouldn't work um so that that was sort of",
    "start": "1776240",
    "end": "1781600"
  },
  {
    "text": "suggested because it's simple to explain and then you know we had the improvements on that as as the you know",
    "start": "1781600",
    "end": "1788799"
  },
  {
    "text": "other things but yeah the the basic exec probe version I think is is not a",
    "start": "1788799",
    "end": "1794520"
  },
  {
    "text": "possibility so but we have exec probes today right which have the Um but people",
    "start": "1794520",
    "end": "1801440"
  },
  {
    "text": "choose to use them and yeah you know not terribly efficient",
    "start": "1801440",
    "end": "1807720"
  },
  {
    "text": "hey couple things if I could can I just clarify first is this just focusing on",
    "start": "1808440",
    "end": "1814080"
  },
  {
    "text": "uh HTTP probes or is the idea here that as part of this you may re rearchitect",
    "start": "1814080",
    "end": "1820559"
  },
  {
    "text": "exec probes as well yeah so the the three network probe",
    "start": "1820559",
    "end": "1826240"
  },
  {
    "text": "types HTTP TCP and gRPC would all be covered by this but we were not looking",
    "start": "1826240",
    "end": "1832080"
  },
  {
    "text": "at exact probes at all right okay um second thing I haven't thought this through but as a possible solution is",
    "start": "1832080",
    "end": "1839200"
  },
  {
    "text": "something along the lines that's similar to like the pause container a possible thing here like a container that's run",
    "start": "1839200",
    "end": "1845039"
  },
  {
    "text": "within that same uh uh name space but yeah similar to",
    "start": "1845039",
    "end": "1851039"
  },
  {
    "text": "this but not necessarily exposed not not needing to be exposed through the API perhaps but like just in in the runtime",
    "start": "1851039",
    "end": "1857760"
  },
  {
    "text": "on on the node yeah so so it again in the cap that we go into more detail on a",
    "start": "1857760",
    "end": "1863039"
  },
  {
    "text": "lot of these things and yeah the idea was that this would not necessarily be visible to the end user i had actually",
    "start": "1863039",
    "end": "1868880"
  },
  {
    "text": "originally suggested oh we could just make the pause container do that and then people were like no no no that's going away it's going away i don't I",
    "start": "1868880",
    "end": "1876480"
  },
  {
    "text": "don't know someone said that trying working on it oh okay okay that's that's",
    "start": "1876480",
    "end": "1882159"
  },
  {
    "text": "news okay thank you related to the ephemeral containers um",
    "start": "1882159",
    "end": "1887679"
  },
  {
    "text": "could you go over like the pros and cons of the sidecar solution",
    "start": "1887679",
    "end": "1893159"
  },
  {
    "text": "like again because I I have you really investigated that or I came from the s I",
    "start": "1893159",
    "end": "1899360"
  },
  {
    "text": "did STTO for a while so I'm kind of somewhat fond of side so the the pros",
    "start": "1899360",
    "end": "1904720"
  },
  {
    "text": "and cons of it are not particularly related to the use of sidecars as a technology the the big con I think is is",
    "start": "1904720",
    "end": "1911200"
  },
  {
    "text": "that it's weird for Cublet to suddenly be creating this thing on the user's",
    "start": "1911200",
    "end": "1916720"
  },
  {
    "text": "behalf without the user knowing um and and and then having to manage it like you know what if the sidecar crashes",
    "start": "1916720",
    "end": "1923039"
  },
  {
    "text": "does you know you so that's the thing that makes that weird um and then you",
    "start": "1923039",
    "end": "1929679"
  },
  {
    "text": "know all the other changes semantics if you're depending on which IP it's probing but yeah it's not really about",
    "start": "1929679",
    "end": "1935919"
  },
  {
    "text": "the the the sidecar in a way that is related to the ISTO's use of sidecars it's like whether",
    "start": "1935919",
    "end": "1942640"
  },
  {
    "text": "they make sense for this use case okay and can I ask another question um have has any maybe this has been done before",
    "start": "1942640",
    "end": "1950480"
  },
  {
    "text": "and maybe but um rather than uh probing and grabbing information out of it would",
    "start": "1950480",
    "end": "1957039"
  },
  {
    "text": "it make sense for um the psychic or the ephemeral pod or whatever to be dropping",
    "start": "1957039",
    "end": "1964399"
  },
  {
    "text": "SNMP packets onto the uh simple network management protocol or",
    "start": "1964399",
    "end": "1972399"
  },
  {
    "text": "simple network monitoring protocol snmp is a very lightweight protocol and it's ancient and many things use it and even",
    "start": "1972399",
    "end": "1981120"
  },
  {
    "text": "uh Prometheus can read that data and present it in real time so I'm wondering",
    "start": "1981120",
    "end": "1987600"
  },
  {
    "text": "if if if we're considering some of these ancient things",
    "start": "1987600",
    "end": "1994278"
  },
  {
    "text": "we could we could try to put that also as a part of the Kip but then I think I was thinking more on will cube still be",
    "start": "1996480",
    "end": "2002640"
  },
  {
    "text": "involved in that right like who it feels like you're shifting the responsibility of who's checking that this is working",
    "start": "2002640",
    "end": "2009760"
  },
  {
    "text": "correctly to you know in that case what would that look like it's it's not a bad idea but then",
    "start": "2009760",
    "end": "2016320"
  },
  {
    "text": "the semantics of how it looks like today and the fact that it's cublet who is",
    "start": "2016320",
    "end": "2023039"
  },
  {
    "text": "finally dictating the status on the card would change right right maybe I mean",
    "start": "2023039",
    "end": "2029120"
  },
  {
    "text": "because you could pull out the data and then drop it drop the SNMP data",
    "start": "2029120",
    "end": "2034559"
  },
  {
    "text": "where you want it yeah where you you know just an implementation it it",
    "start": "2034559",
    "end": "2040240"
  },
  {
    "text": "probably is but you know I'm I'm always advocating for SNMP",
    "start": "2040240",
    "end": "2046480"
  },
  {
    "text": "um so lunch is starting now we can stick around and keep answering questions if people have more questions but um I'm",
    "start": "2046480",
    "end": "2054638"
  },
  {
    "text": "not sure if this is a question or a comment in all of these it seems that you run",
    "start": "2054639",
    "end": "2060960"
  },
  {
    "text": "the very real risk of suddenly changing probes indicating that the thing is",
    "start": "2060960",
    "end": "2066079"
  },
  {
    "text": "ready to be an end point on the network and that's a little disconcerting",
    "start": "2066079",
    "end": "2073280"
  },
  {
    "text": "because that particular aspect of probes at least from my point of view tends to",
    "start": "2073280",
    "end": "2080398"
  },
  {
    "text": "be a little important and what are you I recognize that I think it was you",
    "start": "2080399",
    "end": "2087118"
  },
  {
    "text": "actually who was pointing out that you know there is that semantic we should perhaps consider that semantic",
    "start": "2087119",
    "end": "2092158"
  },
  {
    "text": "separately from how it is implemented but it does seem to me that that is a particularly important semantic to",
    "start": "2092159",
    "end": "2098440"
  },
  {
    "text": "maintain we've we already see plenty of situations where a pod will pass",
    "start": "2098440",
    "end": "2104000"
  },
  {
    "text": "readiness and not actually be ready to be an endpoint in a in a in a service",
    "start": "2104000",
    "end": "2109760"
  },
  {
    "text": "and that causes a lot of problems right now it's usually because somebody misconfigured the readiness probe um or",
    "start": "2109760",
    "end": "2116000"
  },
  {
    "text": "because they've allowed the pod to respond true when it's not actually ready but this seems like it could make",
    "start": "2116000",
    "end": "2123240"
  },
  {
    "text": "that more common yeah um you know part of the answer to that is that it's it's",
    "start": "2123240",
    "end": "2129760"
  },
  {
    "text": "all probes already don't work that way particularly becau if you have network policy that applies to a pod then it's",
    "start": "2129760",
    "end": "2137040"
  },
  {
    "text": "possible that cublet will be able to access the pod before anybody else can um in which case you know the the",
    "start": "2137040",
    "end": "2143359"
  },
  {
    "text": "readiness probe would would complete and yet it wouldn't be reachable you know the other thing is what we were saying",
    "start": "2143359",
    "end": "2148920"
  },
  {
    "text": "about the fact that it's reachable from within node does not mean that it's reachable from other nodes yeah",
    "start": "2148920",
    "end": "2155960"
  },
  {
    "text": "um maybe there does need to be some better way of of proving reachability",
    "start": "2155960",
    "end": "2164160"
  },
  {
    "text": "although you know you don't want to delay until you've proved that every",
    "start": "2164160",
    "end": "2169599"
  },
  {
    "text": "node can reach the the pod so yeah I don't know what the best answer is but",
    "start": "2169599",
    "end": "2175119"
  },
  {
    "text": "but yes I recognize the the concern that this might cause pods to claim readiness",
    "start": "2175119",
    "end": "2180800"
  },
  {
    "text": "before the the network plugin has fully wired them them up to everything yeah I",
    "start": "2180800",
    "end": "2186400"
  },
  {
    "text": "recognize that that does happen right now and to your point about especially",
    "start": "2186400",
    "end": "2191839"
  },
  {
    "text": "if you have O policy in place the nice thing about those situations is that right now you can almost always point at",
    "start": "2191839",
    "end": "2197920"
  },
  {
    "text": "a situation where you you can say either you've miswritten your pro your probe entirely so it's the fault of the person",
    "start": "2197920",
    "end": "2205040"
  },
  {
    "text": "who created the pod or you've done something strange with O policies",
    "start": "2205040",
    "end": "2210480"
  },
  {
    "text": "usually you get to say one of those two things as opposed to oh yeah that's just the way probes work which feels like it",
    "start": "2210480",
    "end": "2217680"
  },
  {
    "text": "would be a a harder cell in a lot of situations",
    "start": "2217680",
    "end": "2223000"
  },
  {
    "text": "thank you yeah I think um I think as I'm thinking about this just jumping off a",
    "start": "2224079",
    "end": "2230480"
  },
  {
    "text": "little bit on that real quick the I think that that's what we need to do is to like as a Kubernetes community",
    "start": "2230480",
    "end": "2236480"
  },
  {
    "text": "declare like this is how probes work this is what they're for if you wanted to do something else you should do something else just so that we have like",
    "start": "2236480",
    "end": "2242960"
  },
  {
    "text": "we can narrow the scope i came back up here because in thinking about it and specifically I'm thinking about Sasha's",
    "start": "2242960",
    "end": "2249520"
  },
  {
    "text": "point about um I think implicitly about Kotta but then also a little bit about",
    "start": "2249520",
    "end": "2254560"
  },
  {
    "text": "like Windows containers like other sort of non Linux containers i I find myself actually leaning more towards the",
    "start": "2254560",
    "end": "2260560"
  },
  {
    "text": "probing sidecar piece like we were chatting a little bit um and like you know obviously there's an accounting",
    "start": "2260560",
    "end": "2266880"
  },
  {
    "text": "problem of like you know how much should that container have inside inside of the pod but that actually answers the",
    "start": "2266880",
    "end": "2272480"
  },
  {
    "text": "accounting problem that we currently have which is like we're charging the infrastructure um for you know what is",
    "start": "2272480",
    "end": "2278800"
  },
  {
    "text": "actually workload behavior um and that's like going against the system C group and so like that's like you know means",
    "start": "2278800",
    "end": "2284880"
  },
  {
    "text": "that the um nodes need to have like weirdly accounted for resources so",
    "start": "2284880",
    "end": "2290400"
  },
  {
    "text": "obviously there's like a question of how much should you give a a probing sidecar but um if we can answer that question",
    "start": "2290400",
    "end": "2296880"
  },
  {
    "text": "well then we can actually properly account for the amount of overhead that like probes uh like do and that's good",
    "start": "2296880",
    "end": "2304400"
  },
  {
    "text": "and then also it feels like a tighter solution because that entity is in the",
    "start": "2304400",
    "end": "2309520"
  },
  {
    "text": "pod network name space so we have like a very succinct answer like um is the you",
    "start": "2309520",
    "end": "2315200"
  },
  {
    "text": "know we we're answering the question is this pod like is the is the server",
    "start": "2315200",
    "end": "2321200"
  },
  {
    "text": "running over local host that's like that's the answer that we're answering and then anything else like would have",
    "start": "2321200",
    "end": "2326240"
  },
  {
    "text": "to probe from externally which we're not even doing anyway today um and it's like feels like a clean solution so I'm",
    "start": "2326240",
    "end": "2332000"
  },
  {
    "text": "actually I'm I've moved I'm voting for this and you're not worried about the weirdness of cublet we're doing that",
    "start": "2332000",
    "end": "2337040"
  },
  {
    "text": "already with the infra container and obviously like I'm personally like advocate we drop the input container for most cases but like there are cases",
    "start": "2337040",
    "end": "2343200"
  },
  {
    "text": "we'll need it um anyway so it's like not like and so this is not unprecedented where the cubic like does something",
    "start": "2343200",
    "end": "2349680"
  },
  {
    "text": "interpreting what like the podspec means but then like doing something on the",
    "start": "2349680",
    "end": "2354960"
  },
  {
    "text": "side because like we need to do that so like that's not I don't feel like that that's too much of a problem as long as",
    "start": "2354960",
    "end": "2360000"
  },
  {
    "text": "we can figure out the accounting piece of it because the pod container takes like practically no resources and this would take some resources so we need to",
    "start": "2360000",
    "end": "2365680"
  },
  {
    "text": "like sort of figure out how to interpret like you know the the resources the pot is allocated but be able to take a",
    "start": "2365680",
    "end": "2371599"
  },
  {
    "text": "little bit of a slice of it but once we've solved that problem it feels more idiomatic to me i have a possible answer",
    "start": "2371599",
    "end": "2376640"
  },
  {
    "text": "for that actually so possible answer haven't thought about this too much but it just came to me as we were talking",
    "start": "2376640",
    "end": "2382480"
  },
  {
    "text": "about this for the sidecar situation what if instead of a sidecar container we use the unshar call to sort of run a",
    "start": "2382480",
    "end": "2390720"
  },
  {
    "text": "process in the net name space like run a go routine in the pot net name space to do the probing",
    "start": "2390720",
    "end": "2397119"
  },
  {
    "text": "as like part of cublet potentially yeah is that worse",
    "start": "2397119",
    "end": "2404359"
  },
  {
    "text": "overwriting the CI yeah you're you're assuming that that",
    "start": "2404800",
    "end": "2409839"
  },
  {
    "text": "containers are implemented in a particular way yeah that that's fair yeah okay fair enough i just want to",
    "start": "2409839",
    "end": "2417440"
  },
  {
    "text": "kind of say that I've been personally looking into this problem for a long",
    "start": "2417440",
    "end": "2422880"
  },
  {
    "text": "time and I just want to say what we ended up looking at and some of the use cases like around this that we have",
    "start": "2422880",
    "end": "2429599"
  },
  {
    "text": "which problem specifically like the problem of the probes how they work and the fact that the cublet is assuming",
    "start": "2429599",
    "end": "2434960"
  },
  {
    "text": "that can talk directly to the pod which is not an assumption we have in the way we run things today so we had to poke",
    "start": "2434960",
    "end": "2442720"
  },
  {
    "text": "hole through our network security for a long time in order for this to happen",
    "start": "2442720",
    "end": "2448240"
  },
  {
    "text": "and over the time we have evaluated different things one is the NS center",
    "start": "2448240",
    "end": "2453839"
  },
  {
    "text": "patch that you mentioned we have a patch to the cube that is doing NS center in order to kind of exec like the probe",
    "start": "2453839",
    "end": "2460480"
  },
  {
    "text": "into the container today it works but as I said like it only works on Linux and",
    "start": "2460480",
    "end": "2467359"
  },
  {
    "text": "we also run microvm and kata and this is why like we look into making this part",
    "start": "2467359",
    "end": "2473599"
  },
  {
    "text": "of the gpc API of the container runtime I think my experience is if you're going",
    "start": "2473599",
    "end": "2479440"
  },
  {
    "text": "to go for the sidecar approach if you want to go like with whatever thing let's make it part of the responsibility",
    "start": "2479440",
    "end": "2485040"
  },
  {
    "text": "of the runtime versus like making assumption in the cubelet because it's going to be very different depending on",
    "start": "2485040",
    "end": "2490400"
  },
  {
    "text": "the runtime that you have There we ourselves we have not looked into batching the runtime right now because",
    "start": "2490400",
    "end": "2495599"
  },
  {
    "text": "it's of effort we would like to drive with the community but if we have a gpc interface that is specifically about",
    "start": "2495599",
    "end": "2500960"
  },
  {
    "text": "probes this is going to be lead any implementation of the runtime choose the best solution to deliver this like of",
    "start": "2500960",
    "end": "2507599"
  },
  {
    "text": "course as you said you can shortcut everything do n center in the container runtime for a Linux only word or like",
    "start": "2507599",
    "end": "2513599"
  },
  {
    "text": "potentially drop a specific container I also want to say something about accounting you're all right about",
    "start": "2513599",
    "end": "2518880"
  },
  {
    "text": "accounting but what happens if you have very intense probe and coming from the experience of overhead in runtime",
    "start": "2518880",
    "end": "2524800"
  },
  {
    "text": "classes for microVM we run databases for instance that we have different like runtime classes with different overhead",
    "start": "2524800",
    "end": "2531359"
  },
  {
    "text": "depending on the order they do on the storage same problem we will have with the probes there is no size that fit all",
    "start": "2531359",
    "end": "2536880"
  },
  {
    "text": "so that means that we need to go and change the PI we expose to the user in order to decide how many resources they",
    "start": "2536880",
    "end": "2543440"
  },
  {
    "text": "want to have there so even the accounting problem why is very good to solve it i would like to decouple and",
    "start": "2543440",
    "end": "2548880"
  },
  {
    "text": "maybe considering decoupling it from this specific implementation because otherwise we're going to have to take on",
    "start": "2548880",
    "end": "2553920"
  },
  {
    "text": "lot of API changes in order to let user customize how much resources their prop needs it's not going to be 100 mill core",
    "start": "2553920",
    "end": "2561200"
  },
  {
    "text": "128 megabytes of memory for everyone maybe you're going to have different sizes there just because we've been",
    "start": "2561200",
    "end": "2566560"
  },
  {
    "text": "looking into these things as well i just want to share like our experience and why this is a very hard problem and maybe the coupling the semantics from",
    "start": "2566560",
    "end": "2573280"
  },
  {
    "text": "the implementation is great and I feel like however we deliver it I feel based on our experience probably working on",
    "start": "2573280",
    "end": "2579760"
  },
  {
    "text": "the runtime could be something very good versus acting around the runtime",
    "start": "2579760",
    "end": "2584800"
  },
  {
    "text": "okay thank you sorry to interrupt you know it's lunch time yes",
    "start": "2584800",
    "end": "2592440"
  },
  {
    "text": "did you want to see thanks everyone for",
    "start": "2592640",
    "end": "2597760"
  }
]