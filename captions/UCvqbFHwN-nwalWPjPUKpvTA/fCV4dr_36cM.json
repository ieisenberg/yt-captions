[
  {
    "text": "well thank you all for coming to this wonderful session with about 25 other",
    "start": "30",
    "end": "6060"
  },
  {
    "text": "competing sessions so I really appreciate you showing up and coming this is the intro to from source to",
    "start": "6060",
    "end": "12389"
  },
  {
    "text": "image it was written up as source to image and I'm obviously with OpenShift",
    "start": "12389",
    "end": "18510"
  },
  {
    "text": "and I have a bias towards our tool source to image but we all know that there's many many tools out there and",
    "start": "18510",
    "end": "25590"
  },
  {
    "text": "tool chains for building images and what we'd really like today too is to go into",
    "start": "25590",
    "end": "31439"
  },
  {
    "text": "some of the key concepts around that today and tomorrow we have a deeper dive at 3:40 and we are not really going to",
    "start": "31439",
    "end": "40320"
  },
  {
    "text": "be source to image centric like that tool what we're really gonna try and do is have a conversation about what it",
    "start": "40320",
    "end": "46410"
  },
  {
    "text": "means to be going from source code to image and we'd really love to hear feedback from you on where we should be",
    "start": "46410",
    "end": "53219"
  },
  {
    "text": "going next where there could possibly be any convergence on all the different toolings and approaches so that we could",
    "start": "53219",
    "end": "59730"
  },
  {
    "text": "maybe not have so many but or just have one bunch of wonderful ones so today we",
    "start": "59730",
    "end": "65820"
  },
  {
    "text": "have been paris' and Matt Moore from Google and they're gonna walk you through an introduction to the keys",
    "start": "65820",
    "end": "71700"
  },
  {
    "text": "concepts and then I'm gonna get out of the way all right welcome so yeah I am",
    "start": "71700",
    "end": "77790"
  },
  {
    "text": "Ben priest I lead the developer experience team for OpenShift and that one of the main core missions",
    "start": "77790",
    "end": "83220"
  },
  {
    "text": "for us is enabling developers to take their application source code and turn",
    "start": "83220",
    "end": "88320"
  },
  {
    "text": "it into an image on the OpenShift platform and then get that image running so one of the tools we maintain is what",
    "start": "88320",
    "end": "94530"
  },
  {
    "text": "I'll refer to as s2i which is specifically the command line tool for doing source damage as opposed to the",
    "start": "94530",
    "end": "100439"
  },
  {
    "text": "general concept of going from source to image which is what we're gonna talk about today I'm Matt Moore I'm with Google and I",
    "start": "100439",
    "end": "109710"
  },
  {
    "text": "wear a lot of hats in the container space for the purposes of this talk let's say I'm the uber TL for container",
    "start": "109710",
    "end": "117299"
  },
  {
    "text": "development stuff alright so first off",
    "start": "117299",
    "end": "122700"
  },
  {
    "text": "we're just going to lay out the framework of so what do we mean we've now confused you about s2i versus source to image so we'll try and explain that",
    "start": "122700",
    "end": "129599"
  },
  {
    "text": "get through why you should care about that you probably already have some idea since you came to this session and then",
    "start": "129599",
    "end": "136360"
  },
  {
    "text": "we're gonna go through some of the different approaches that are starting to evolve in the ecosystem around how",
    "start": "136360",
    "end": "142120"
  },
  {
    "text": "you do this and then that should be a relatively short part of the session because we want to open the floor to",
    "start": "142120",
    "end": "147819"
  },
  {
    "text": "discussion as Dan said we want to hear what people in the community are doing what challenges do you have what are",
    "start": "147819",
    "end": "153700"
  },
  {
    "text": "some of your thoughts on this if you don't have those questions we have backup slides so you know yes that's the",
    "start": "153700",
    "end": "160959"
  },
  {
    "text": "threat so what do we mean when we talk",
    "start": "160959",
    "end": "166120"
  },
  {
    "text": "about source to image in general we're talking about just a way to go from I've",
    "start": "166120",
    "end": "171489"
  },
  {
    "text": "got my source code in a repository somewhere and I need to turn it into a runnable application image probably cuz",
    "start": "171489",
    "end": "177790"
  },
  {
    "text": "I want to run on kubernetes so I've got a bunch of source code how do I make that into an artifact that I can run on",
    "start": "177790",
    "end": "184000"
  },
  {
    "text": "my cluster and then more ideally we want to do that by hiding the details that",
    "start": "184000",
    "end": "191019"
  },
  {
    "text": "are going on when you're constructing the image so when you write a docker file you're exposed to some pretty ugly",
    "start": "191019",
    "end": "196540"
  },
  {
    "text": "details of what it means to construct an image and application developers shouldn't have to care about those",
    "start": "196540",
    "end": "202209"
  },
  {
    "text": "things and it's actually dangerous in some cases to let them do it they might produce less secure images they might",
    "start": "202209",
    "end": "208840"
  },
  {
    "text": "produce less efficient images they're not going to follow up best practices so by limiting the things they have to",
    "start": "208840",
    "end": "215230"
  },
  {
    "text": "worry about you can guide them down those best practices and then you're",
    "start": "215230",
    "end": "221049"
  },
  {
    "text": "also just keeping them from having to learn about things that they don't need to know about they know their source",
    "start": "221049",
    "end": "226060"
  },
  {
    "text": "code they know how to build source code they don't necessarily know docker files they're certainly not experts in the right way to construct docker files all",
    "start": "226060",
    "end": "237790"
  },
  {
    "text": "right so why do you want to go from source to image well kubernetes runs images so you need to figure how to get",
    "start": "237790",
    "end": "244030"
  },
  {
    "text": "your application source code into an image you therefore need to be able to build images and this is kind of leading",
    "start": "244030",
    "end": "253690"
  },
  {
    "text": "to what we're gonna talk about more tomorrow in the deep dive but if you're gonna have to build images why not do it",
    "start": "253690",
    "end": "259000"
  },
  {
    "text": "on the cluster you already have to run anyway don't have a separate set of infrastructure certainly you don't want developers just building their images",
    "start": "259000",
    "end": "265150"
  },
  {
    "text": "locally and shipping them interpret so you've got a cluster let's build our images on the scalable cluster of",
    "start": "265150",
    "end": "271250"
  },
  {
    "text": "resources that we already have and important note we have to do that securely because we don't want to",
    "start": "271250",
    "end": "278210"
  },
  {
    "text": "produce a exploit in our cluster when we start building images on the cluster so",
    "start": "278210",
    "end": "283540"
  },
  {
    "text": "just an advertisement for our deep-dive session tomorrow today will be less cluster focused and more specific tool",
    "start": "283540",
    "end": "289460"
  },
  {
    "text": "focused alright so going through some of",
    "start": "289460",
    "end": "295730"
  },
  {
    "text": "the approaches so we're starting with the basic one that I would imagine everyone in this room has used you are",
    "start": "295730",
    "end": "301550"
  },
  {
    "text": "just gonna use traditional docker build you've got a docker daemon available you invoke docker build from a directory",
    "start": "301550",
    "end": "307310"
  },
  {
    "text": "that's got your source code and a docker file the docker file knows how to assemble your source code and then you",
    "start": "307310",
    "end": "313790"
  },
  {
    "text": "docker push that image to somewhere that you're ultimately going to deploy on to your cluster what's good about it",
    "start": "313790",
    "end": "320320"
  },
  {
    "text": "everybody who's doing stuff on kubernetes probably knows how to do this today so kind of a low barrier to entry",
    "start": "320320",
    "end": "328190"
  },
  {
    "text": "the downside is to do it you need to hand out docker sockets and so either that means the developer doing it on",
    "start": "328190",
    "end": "334370"
  },
  {
    "text": "their own machine where they have a docker socket or you start handing out access to the docker socket on a shared",
    "start": "334370",
    "end": "339650"
  },
  {
    "text": "cluster which is a really bad idea there's lots of ways that people can essentially root your host system if",
    "start": "339650",
    "end": "345680"
  },
  {
    "text": "you've given them access to the docker socket or doctrine docker which is just",
    "start": "345680",
    "end": "352100"
  },
  {
    "text": "as bad all right so with that table",
    "start": "352100",
    "end": "361040"
  },
  {
    "text": "stakes out of the way we move on to some of the more sophisticated techniques which we'll refer to as daemon list a",
    "start": "361040",
    "end": "367640"
  },
  {
    "text": "cravat builds so your input artifact still a docker file but you're not using",
    "start": "367640",
    "end": "372860"
  },
  {
    "text": "the docker daemon to build that image you're going to use a different tool that will not require a talker daemon so",
    "start": "372860",
    "end": "381200"
  },
  {
    "text": "most of these techniques involve running a container themselves and then",
    "start": "381200",
    "end": "386810"
  },
  {
    "text": "essentially executing your docker or file commands within that container and then committing that container as a new",
    "start": "386810",
    "end": "393260"
  },
  {
    "text": "image there are some other tools that if you want to talk a little bit what they do",
    "start": "393260",
    "end": "399090"
  },
  {
    "text": "next time sure we didn't get a lot of time to practice this together so yeah",
    "start": "399090",
    "end": "408090"
  },
  {
    "text": "but the other learner is just constructing the image layers directly which we'll get into so what's good",
    "start": "408090",
    "end": "413639"
  },
  {
    "text": "about this well it's similar to your docker build experience so if you're used to writing docker files you're",
    "start": "413639",
    "end": "418800"
  },
  {
    "text": "still writing docker files still works it gives you a little bit more control over what image layers are produced or",
    "start": "418800",
    "end": "424860"
  },
  {
    "text": "at least the tool itself has more control that tool may expose that control to you so that means that",
    "start": "424860",
    "end": "430710"
  },
  {
    "text": "instead of a docker file that might produce an image with 20 layers you might be able to produce an image that",
    "start": "430710",
    "end": "436260"
  },
  {
    "text": "only has two or three thicker layers and that might be better for caching reuse and pushing and pulling those images or",
    "start": "436260",
    "end": "444479"
  },
  {
    "text": "a lot of layers right which can lead to better performance and potentially",
    "start": "444479",
    "end": "449850"
  },
  {
    "text": "better cache hit rates right yeah right and could could go both ways on that but",
    "start": "449850",
    "end": "456150"
  },
  {
    "text": "gives you gives you a little more control over that and it also again the aim here is greater security because",
    "start": "456150",
    "end": "461550"
  },
  {
    "text": "you're not requiring the docker Daymond so you're able to let people do these docker builds in a more secure way the",
    "start": "461550",
    "end": "469500"
  },
  {
    "text": "downsides to these approaches in general and again we'll get into more specific tools but docker file fidelity is the",
    "start": "469500",
    "end": "476250"
  },
  {
    "text": "biggest one so docker build is going to do one thing with that docker file these",
    "start": "476250",
    "end": "481919"
  },
  {
    "text": "other tools are going to do their best to keep up with the docker file spec and perform the actions that would be",
    "start": "481919",
    "end": "488669"
  },
  {
    "text": "expected in that case both because of the docker file spec moving from time to",
    "start": "488669",
    "end": "494250"
  },
  {
    "text": "time as well as because of the technologies that these tools use it may not match exactly the behavior that a",
    "start": "494250",
    "end": "500910"
  },
  {
    "text": "docker build would produce for that docker file that said I think the state",
    "start": "500910",
    "end": "507990"
  },
  {
    "text": "of things today is significantly better than a number of years ago of trying to do this since I think a lot of the sort",
    "start": "507990",
    "end": "513659"
  },
  {
    "text": "of handling in the daemon for how those are parsed and whatnot has actually been factored in to a more reasonable library",
    "start": "513659",
    "end": "519390"
  },
  {
    "text": "than it once was so you can actually leverage a lot of the same facilities for parsing that and interpreting the",
    "start": "519390",
    "end": "526950"
  },
  {
    "text": "file then you used to be able to do which was pretty much rolling around",
    "start": "526950",
    "end": "533150"
  },
  {
    "text": "and then the other thing to consider with this is the also perk of the different approaches to image layer",
    "start": "534320",
    "end": "540350"
  },
  {
    "text": "construction that may be a negative or some of the tools that don't give you control they might give you only one fat",
    "start": "540350",
    "end": "548779"
  },
  {
    "text": "layer and you don't want only one fat layer because you're not getting cash reuse when you rebuild the thing or its",
    "start": "548779",
    "end": "555410"
  },
  {
    "text": "resulting in having to push that layer the whole fat layer every time because it one bite changed in it and you're not getting any layer reuse so that that's",
    "start": "555410",
    "end": "563839"
  },
  {
    "text": "both a pro and a con potentially so",
    "start": "563839",
    "end": "575260"
  },
  {
    "text": "there's a couple of tools that we wanted to go through that implement this daemon 'less approach so bilder is one that",
    "start": "575260",
    "end": "583149"
  },
  {
    "text": "based on the run C container runtime and so it rather than using the docker Damon",
    "start": "583149",
    "end": "589670"
  },
  {
    "text": "to spawn a container is able to actually launch a container itself directly and then as I mentioned earlier it runs",
    "start": "589670",
    "end": "596149"
  },
  {
    "text": "through the docker file commands within that container that it launched to add your source code run your run commands",
    "start": "596149",
    "end": "602450"
  },
  {
    "text": "and then again when it's done executing all those commands it commits the new",
    "start": "602450",
    "end": "607459"
  },
  {
    "text": "image as a single new layer so doesn't",
    "start": "607459",
    "end": "613160"
  },
  {
    "text": "require a dr. Damon but gives you docker file execution of those commands so IMG",
    "start": "613160",
    "end": "621620"
  },
  {
    "text": "as one you know neither of us was involved in but it was a you know game",
    "start": "621620",
    "end": "627170"
  },
  {
    "text": "came out recently from the readme it's I think fairly similar to build it in",
    "start": "627170",
    "end": "633709"
  },
  {
    "text": "terms of how it operates you know the quote from the readme is you could probably even use bilder as",
    "start": "633709",
    "end": "640040"
  },
  {
    "text": "unprivileged if you use the same instructions from unprivileged mounting so I think it's part of what bilder is",
    "start": "640040",
    "end": "646370"
  },
  {
    "text": "doing with run Z as its mounting in different things in doing filesystem snapshotting which I think require",
    "start": "646370",
    "end": "653930"
  },
  {
    "text": "certain capabilities even though you're not using a daemon to achieve those",
    "start": "653930",
    "end": "659089"
  },
  {
    "text": "things Conoco is a relatively",
    "start": "659089",
    "end": "664730"
  },
  {
    "text": "well an even more recent dockerfile centric build which it's I would say",
    "start": "664730",
    "end": "674780"
  },
  {
    "text": "optimized for being run invoked by a container orchestration system which",
    "start": "674780",
    "end": "679880"
  },
  {
    "text": "sort of speaks to the talk tomorrow but it expects to sort of be executed in an",
    "start": "679880",
    "end": "686360"
  },
  {
    "text": "empty container and then it does an evaluation of the dockerfile constructs and does its own snapshotting without",
    "start": "686360",
    "end": "693860"
  },
  {
    "text": "you know speaking to you know file system driver and publishes the image",
    "start": "693860",
    "end": "700040"
  },
  {
    "text": "directly to the registry so it's effectively making 0 privileged syscalls",
    "start": "700040",
    "end": "708140"
  },
  {
    "text": "aside from what you may have in your run commands but it expects to have been bootstrapped by a container",
    "start": "708140",
    "end": "714260"
  },
  {
    "text": "orchestration system in advance one of the things worth calling out here is when this came out G Weiser wasn't",
    "start": "714260",
    "end": "722450"
  },
  {
    "text": "announced yet but they are very complementary so if you haven't seen",
    "start": "722450",
    "end": "728600"
  },
  {
    "text": "that or read through that yet I would highly recommend it it's pretty cool",
    "start": "728600",
    "end": "734740"
  },
  {
    "text": "okay so that wraps up the tools we were going to cover at least or docker file",
    "start": "737230",
    "end": "742280"
  },
  {
    "text": "based builds so the second approach is what we call docker file lists builds so",
    "start": "742280",
    "end": "747800"
  },
  {
    "text": "in this case from a developer perspective there is no docker file to worry about this is getting to the real",
    "start": "747800",
    "end": "754370"
  },
  {
    "text": "I'm just a developer who only cares about source but I've got to produce this image because my boss told me that",
    "start": "754370",
    "end": "761240"
  },
  {
    "text": "we're deploying everything on kubernetes and I don't know what that is either but I'm gonna write my source code and I need to somehow get that source code",
    "start": "761240",
    "end": "767030"
  },
  {
    "text": "onto a cluster so the user is just specifying their intent and their source",
    "start": "767030",
    "end": "772040"
  },
  {
    "text": "code I've got a bunch of Java code and I want to run it on a wild fly server I've",
    "start": "772040",
    "end": "777290"
  },
  {
    "text": "got some node.js code I want a no js' server some of the tools can also even",
    "start": "777290",
    "end": "782420"
  },
  {
    "text": "incorporate detection into it Italy scaffold is one that will do some of that as well just detecting what sort of",
    "start": "782420",
    "end": "790250"
  },
  {
    "text": "language you're using and matching it to the right image to apply that source",
    "start": "790250",
    "end": "796100"
  },
  {
    "text": "code to so you manages to these dockerfile approaches are less configuration for the developer",
    "start": "796100",
    "end": "803330"
  },
  {
    "text": "again they're really only concerned with their source code and maybe what framework they need to be using to build",
    "start": "803330",
    "end": "808760"
  },
  {
    "text": "that source code and the tools can actually do some of that decision-making",
    "start": "808760",
    "end": "815120"
  },
  {
    "text": "about what should be a layer in the final image so the tool can say I'm",
    "start": "815120",
    "end": "821690"
  },
  {
    "text": "going to produce a layer that's the application framework and then maybe another layer for the dependencies for",
    "start": "821690",
    "end": "827390"
  },
  {
    "text": "the application because I'm not expecting those to change too often and then the top layer will be the application code that changes most",
    "start": "827390",
    "end": "833000"
  },
  {
    "text": "frequently and so you get really good reuse as you're iterating on building that application one thing I'll just add",
    "start": "833000",
    "end": "840050"
  },
  {
    "text": "write like and from my perspective write like this is the goal right I containers have been really hyped over the last few",
    "start": "840050",
    "end": "847190"
  },
  {
    "text": "years right but ultimately they're I I see them as sort of an infrastructural implementation detail and you shouldn't",
    "start": "847190",
    "end": "854060"
  },
  {
    "text": "have to worry about you know understanding how to hold every single aspect of it right in order to use them",
    "start": "854060",
    "end": "861140"
  },
  {
    "text": "really well I ideally write like you should just be able to containerize your application and then run your",
    "start": "861140",
    "end": "866450"
  },
  {
    "text": "application and not need to worry about all of the mechanics of how everything gets stitched together so so another",
    "start": "866450",
    "end": "877400"
  },
  {
    "text": "advantage to this is because the developer isn't responsible for writing the docker file and they're not",
    "start": "877400",
    "end": "882980"
  },
  {
    "text": "responsible for the base image that their application is going to end up running on it means that the",
    "start": "882980",
    "end": "888350"
  },
  {
    "text": "organization can produce a base image for your java workloads or your nodejs workloads that codifies the best",
    "start": "888350",
    "end": "895520"
  },
  {
    "text": "practices for that image so again what libraries you want in it what ports",
    "start": "895520",
    "end": "900710"
  },
  {
    "text": "should the image expose what layers should it have how many layers should it have all of that is again just baked",
    "start": "900710",
    "end": "908270"
  },
  {
    "text": "into the image or handled by the tool so you don't have to worry about the developer having to understand those",
    "start": "908270",
    "end": "913370"
  },
  {
    "text": "nuances or getting them wrong so one other thing that some some some platform",
    "start": "913370",
    "end": "921590"
  },
  {
    "text": "providers are taking advantage of with this approach is if you if you control the process of how things are",
    "start": "921590",
    "end": "927710"
  },
  {
    "text": "containerized you can also constrain the ways it's constructed so that doing things",
    "start": "927710",
    "end": "933230"
  },
  {
    "text": "like rebasing which scares me a lot in the presence of arbitrary",
    "start": "933230",
    "end": "938360"
  },
  {
    "text": "docker files it is actually a more approachable problem right you can",
    "start": "938360",
    "end": "944029"
  },
  {
    "text": "actually decoupling service the the base runtime independent of rebuilding the",
    "start": "944029",
    "end": "949819"
  },
  {
    "text": "whole thing because the build itself may actually be expensive and you may just want to be able to swap it in a new",
    "start": "949819",
    "end": "955370"
  },
  {
    "text": "version of your base runtime image whatever that is to pick up a julep see",
    "start": "955370",
    "end": "960889"
  },
  {
    "text": "update or something right so the downsides to this are it is gonna",
    "start": "960889",
    "end": "968990"
  },
  {
    "text": "be significantly less flexible again depending on the tool that you're picking to implement this approach but",
    "start": "968990",
    "end": "974629"
  },
  {
    "text": "just as an example the s2i command-line tool is by design less flexible because",
    "start": "974629",
    "end": "980509"
  },
  {
    "text": "we were trying to to some extent take power away from developers power that we didn't want them to have to shoot",
    "start": "980509",
    "end": "987050"
  },
  {
    "text": "themselves in the foot so the at least with default configurations when you do s2i builds on OpenShift you can't",
    "start": "987050",
    "end": "993829"
  },
  {
    "text": "perform any root operations as part of your build so you're restricted to standard user",
    "start": "993829",
    "end": "998870"
  },
  {
    "text": "operations within that container just as one example and then the other challenges you'll see on the next slide",
    "start": "998870",
    "end": "1005529"
  },
  {
    "text": "is there is no standard here there are a lot of different ways to go at this they're all kind of trying to solve the",
    "start": "1005529",
    "end": "1011920"
  },
  {
    "text": "same problem but in very different ways and so it still means the developer may have to learn one of these tools and",
    "start": "1011920",
    "end": "1019629"
  },
  {
    "text": "understand the nuances of it or the organization has to pick one to adopt so",
    "start": "1019629",
    "end": "1028959"
  },
  {
    "text": "the ones that we were going to cover today in brief are s2i which has been",
    "start": "1028959",
    "end": "1035890"
  },
  {
    "text": "around for a number of years at this point it was sort of the first thing that we had Red Hat came up with to try",
    "start": "1035890",
    "end": "1040990"
  },
  {
    "text": "and approach the problem of how to enable developers to do secure builds on a multi-tenant platform that we saw that",
    "start": "1040990",
    "end": "1047168"
  },
  {
    "text": "we were gonna be building on top of kubernetes so with source to image the it's sort of what I described earlier",
    "start": "1047169",
    "end": "1053440"
  },
  {
    "text": "the user provides their source code that source code gets built and layered into",
    "start": "1053440",
    "end": "1058570"
  },
  {
    "text": "an application image based on top of what we refer to as a builder image so it's dependent on this ecosystem",
    "start": "1058570",
    "end": "1064990"
  },
  {
    "text": "of builder images and we supply a number of them but the hope is for other people",
    "start": "1064990",
    "end": "1070450"
  },
  {
    "text": "to contribute their own or within an enterprise they may just build their own internally which we see sometimes based",
    "start": "1070450",
    "end": "1076960"
  },
  {
    "text": "on their own language or because they have a specific version of a framework that they want or they want to bake",
    "start": "1076960",
    "end": "1082420"
  },
  {
    "text": "specific dependencies in but you provide those builder images and then the Builder image understands how to consume",
    "start": "1082420",
    "end": "1088179"
  },
  {
    "text": "the source code and produce the application image so another example in",
    "start": "1088179",
    "end": "1095590"
  },
  {
    "text": "this space is actually build packs which you know I were invented by Heroku and",
    "start": "1095590",
    "end": "1102220"
  },
  {
    "text": "I'll adopt it by cloud foundry in Vegas and some work has been done to bring",
    "start": "1102220",
    "end": "1109570"
  },
  {
    "text": "these into the world of producing container images where you know you you",
    "start": "1109570",
    "end": "1114730"
  },
  {
    "text": "do a build to produce an application slug and then these are then bound to a base image in order to actually create a",
    "start": "1114730",
    "end": "1123520"
  },
  {
    "text": "runnable container image and these are one of the contexts in which having that",
    "start": "1123520",
    "end": "1128590"
  },
  {
    "text": "contract for rebasing is actually kind of nice and it's enabled by the fact that they have control over how it's",
    "start": "1128590",
    "end": "1135070"
  },
  {
    "text": "built and ultimately composed FTL is",
    "start": "1135070",
    "end": "1140580"
  },
  {
    "text": "sort of a technique that's used for a number of purpose-built source to image",
    "start": "1140580",
    "end": "1147550"
  },
  {
    "text": "builders that are used oh yeah FTL stands for faster than light which was",
    "start": "1147550",
    "end": "1153820"
  },
  {
    "text": "sort of a tongue-in-cheek name for the technique ultimately it's the the",
    "start": "1153820",
    "end": "1161470"
  },
  {
    "text": "insight is taking sort of looking at sort of application dependencies in the",
    "start": "1161470",
    "end": "1168130"
  },
  {
    "text": "same way build systems do and projecting sort of the incrementality that gives",
    "start": "1168130",
    "end": "1174309"
  },
  {
    "text": "build systems into the layering of the application image so that you get very",
    "start": "1174309",
    "end": "1179580"
  },
  {
    "text": "incremental pushes and pulls of images ultimately to give you faster cycle",
    "start": "1179580",
    "end": "1184630"
  },
  {
    "text": "times want one of the instances of FTL",
    "start": "1184630",
    "end": "1191440"
  },
  {
    "text": "is jib with some of the folks for involved in that are here in the",
    "start": "1191440",
    "end": "1197770"
  },
  {
    "text": "audience and let's see the the fourth is Basel",
    "start": "1197770",
    "end": "1204250"
  },
  {
    "text": "which actually has a lot of configuration but a lot of the ideas",
    "start": "1204250",
    "end": "1209679"
  },
  {
    "text": "that went into FTL which is not Basel based stem from work done in Basel long",
    "start": "1209679",
    "end": "1218860"
  },
  {
    "text": "ago to bring to give Google the capacity",
    "start": "1218860",
    "end": "1224590"
  },
  {
    "text": "to build produce docker meters from our internal infrastructure we're sort of the the fundamental constraint was",
    "start": "1224590",
    "end": "1230759"
  },
  {
    "text": "Googlers don't have privilege on our internal distributed build so how are we",
    "start": "1230759",
    "end": "1236200"
  },
  {
    "text": "going to produce docker images since we can't run a daemon so that that was sort of the origin of some of that work and",
    "start": "1236200",
    "end": "1242740"
  },
  {
    "text": "that inspired a lot of the sort of direct image assembly stuff that went into stuff like FTL okay so a number of",
    "start": "1242740",
    "end": "1256500"
  },
  {
    "text": "observations from sort of looking over the landscape is that you know there's",
    "start": "1256500",
    "end": "1262389"
  },
  {
    "text": "there's a clear trend towards trying to make the image build process more secure this is you know going on both in the",
    "start": "1262389",
    "end": "1268870"
  },
  {
    "text": "context of these source to image builders as well as you know it's become",
    "start": "1268870",
    "end": "1274299"
  },
  {
    "text": "a hot topic in the last couple months certainly around producing docker images",
    "start": "1274299",
    "end": "1280090"
  },
  {
    "text": "from docker files as well and this is often in support of trying to enable on",
    "start": "1280090",
    "end": "1287529"
  },
  {
    "text": "cluster builds which again is what we're gonna talk about tomorrow there's a",
    "start": "1287529",
    "end": "1293350"
  },
  {
    "text": "clear interest in trying to produce better layered images either fewer",
    "start": "1293350",
    "end": "1299320"
  },
  {
    "text": "layers or many more layers depending on what it is you're trying to do it's really easy to actually end up with",
    "start": "1299320",
    "end": "1305399"
  },
  {
    "text": "redundant stuff and layers and whatnot so trying to get better control of that",
    "start": "1305399",
    "end": "1313720"
  },
  {
    "text": "is definitely one of the things that's often discussed and there seems to be a",
    "start": "1313720",
    "end": "1319629"
  },
  {
    "text": "you know a lot of interest but sort of a clear gap and standardizing a way to do",
    "start": "1319629",
    "end": "1324700"
  },
  {
    "text": "this sort of process of taking the source and producing the image and so",
    "start": "1324700",
    "end": "1331750"
  },
  {
    "text": "yeah no I think you covered it this is yeah what we always see the state of the",
    "start": "1331750",
    "end": "1338680"
  },
  {
    "text": "landscape as being and and where we see it headed as well so now we'd like to",
    "start": "1338680",
    "end": "1347559"
  },
  {
    "text": "open the floor here a little bit about some of your experiences with how you're building your images today whether you",
    "start": "1347559",
    "end": "1353410"
  },
  {
    "text": "have experience with some of these tools or maybe there's some other tools that we didn't cover this wasn't meant to be",
    "start": "1353410",
    "end": "1360520"
  },
  {
    "text": "exhaustive just to be sort of a sampling of things that either we're involved with or no folks involved we have there",
    "start": "1360520",
    "end": "1367330"
  },
  {
    "text": "heard about all right we'll repeat the question if so is there anyone there's a",
    "start": "1367330",
    "end": "1374050"
  },
  {
    "text": "jib person in the room were there any other people who are building tools along this state I think I saw a few",
    "start": "1374050",
    "end": "1379660"
  },
  {
    "text": "people in the back who come in that were there's people hiding in the audience a",
    "start": "1379660",
    "end": "1386410"
  },
  {
    "text": "bunch of them will just shine a spotlight on them if someone asked the right question I also do want to mention",
    "start": "1386410",
    "end": "1392620"
  },
  {
    "text": "the slides are online but we have links to all the tools we talked about so if you download the slides later you can go",
    "start": "1392620",
    "end": "1398559"
  },
  {
    "text": "to all the various cool repositories for those",
    "start": "1398559",
    "end": "1403860"
  },
  {
    "text": "well I think I mean you have to consider",
    "start": "1456220",
    "end": "1461380"
  },
  {
    "text": "the context of are the requirements valid or are they just I just want to be able to do this because I can and do it",
    "start": "1461380",
    "end": "1468070"
  },
  {
    "text": "and you know if the processes say well you don't have to do it we're not going to let you do it and then you can",
    "start": "1468070",
    "end": "1474010"
  },
  {
    "text": "enforce that but I think that's also where some of the dockerfile",
    "start": "1474010",
    "end": "1479230"
  },
  {
    "text": "the Damon lists dockerfile approaches are probably going to be useful for those scenarios where you're still able",
    "start": "1479230",
    "end": "1484840"
  },
  {
    "text": "to empower people to do their dockerfile build without the risks of a dr. Damon",
    "start": "1484840",
    "end": "1491470"
  },
  {
    "text": "based build and I think that's I think",
    "start": "1491470",
    "end": "1498040"
  },
  {
    "text": "there's a use for both and I think that we need a better solution for both I",
    "start": "1498040",
    "end": "1503950"
  },
  {
    "text": "think that ultimately I think I see it",
    "start": "1503950",
    "end": "1511240"
  },
  {
    "text": "sort of partitioning a little bit I think that ultimately having the",
    "start": "1511240",
    "end": "1517270"
  },
  {
    "text": "capacity to containerize applications is really useful but a lot of the times those applications have sort of system",
    "start": "1517270",
    "end": "1524020"
  },
  {
    "text": "dependencies that may not be in a base image like I I want to shell out to get or something so I need you know a",
    "start": "1524020",
    "end": "1529810"
  },
  {
    "text": "package manager to install something right and so I think you could I think an interesting knob I've seen in terms",
    "start": "1529810",
    "end": "1536680"
  },
  {
    "text": "of sort of source to image stuff is okay well curate curate a base image using a",
    "start": "1536680",
    "end": "1544600"
  },
  {
    "text": "docker file approach but you can still then could potentially consume that base image with sort of source to image style",
    "start": "1544600",
    "end": "1551740"
  },
  {
    "text": "techniques and so I think in practice having that knob as has felt like a an",
    "start": "1551740",
    "end": "1558670"
  },
  {
    "text": "interesting you know way of toggling between those and blending those worlds but rather than expose",
    "start": "1558670",
    "end": "1565330"
  },
  {
    "text": "those knobs in at the source to image layer that makes it yeah just to follow",
    "start": "1565330",
    "end": "1570879"
  },
  {
    "text": "up on that because Matt sort of reminded me and we see this a lot with s2i which is we produce this curated set of sty",
    "start": "1570879",
    "end": "1577600"
  },
  {
    "text": "builder images but they don't necessarily include every library that",
    "start": "1577600",
    "end": "1582879"
  },
  {
    "text": "you might want to use with that framework and you can't necessarily add those libraries with the assemble script",
    "start": "1582879",
    "end": "1588399"
  },
  {
    "text": "if they have to go into the system directory or something like that and yeah our message around that is great",
    "start": "1588399",
    "end": "1594820"
  },
  {
    "text": "it's a docker image right a docker file that extends it and adds whatever else you want one time and then tell your",
    "start": "1594820",
    "end": "1602440"
  },
  {
    "text": "organization here is our s2i builder image for this framework that includes our internal libraries or these other",
    "start": "1602440",
    "end": "1609129"
  },
  {
    "text": "dependencies we even have s2i builder images for databases where the source",
    "start": "1609129",
    "end": "1614830"
  },
  {
    "text": "you're injecting is your configuration but again if you need to add additional drivers or plugins then maybe you extend",
    "start": "1614830",
    "end": "1620590"
  },
  {
    "text": "that image with a docker file but you don't let everybody do those docker file builds you know those are there's a",
    "start": "1620590",
    "end": "1626799"
  },
  {
    "text": "group that is curating your ecosystem of images for the organization and then there's the people who are consuming",
    "start": "1626799",
    "end": "1633159"
  },
  {
    "text": "those and just layering on their source code I think there's also a number of",
    "start": "1633159",
    "end": "1640059"
  },
  {
    "text": "sort of enterprise scenarios where some of those restrictions you know are things where like you don't want people",
    "start": "1640059",
    "end": "1645220"
  },
  {
    "text": "doing certain things right and they just you should tell them no right you know at reaching out and installing arbitrary",
    "start": "1645220",
    "end": "1652359"
  },
  {
    "text": "packages you know it yeah yeah so the",
    "start": "1652359",
    "end": "1660820"
  },
  {
    "text": "non hermit hermiticity of it and whatnot right like if you can reach out to the internet pull down whatever you want",
    "start": "1660820",
    "end": "1666789"
  },
  {
    "text": "right like that can be a nightmare for a wide variety of sort of enterprise-e scenarios around provenance a",
    "start": "1666789",
    "end": "1674909"
  },
  {
    "text": "reproducibility etc etc etc so",
    "start": "1674909",
    "end": "1680759"
  },
  {
    "text": "just sayin or repeating I was wondering",
    "start": "1684460",
    "end": "1691190"
  },
  {
    "text": "if these framix does have an idea of limiting docker files or linking the",
    "start": "1691190",
    "end": "1696919"
  },
  {
    "text": "best practice that we are using in company it means what should be like it's not like OpenScape that you're",
    "start": "1696919",
    "end": "1703220"
  },
  {
    "text": "using like a wall or something it's the idea to have a linking of how it should looks like I mean there are source image",
    "start": "1703220",
    "end": "1710090"
  },
  {
    "text": "you have source image but we have custom builders and we have other stuff but I'm interesting if we can force it to",
    "start": "1710090",
    "end": "1716450"
  },
  {
    "text": "somehow linked it how should be a docker file look like so I'm sorry was that to",
    "start": "1716450",
    "end": "1726049"
  },
  {
    "text": "force s2i to do this or just a tool in general that's going to like lint to",
    "start": "1726049",
    "end": "1731330"
  },
  {
    "text": "your docker files essentially it's linting in general but the question is",
    "start": "1731330",
    "end": "1736639"
  },
  {
    "text": "if you give the end-user the freedom to adapt something on Yutaka file it should be in the same shape all the time or and",
    "start": "1736639",
    "end": "1743840"
  },
  {
    "text": "then you have to control it and and we didn't code we do that but can we do this also with in a docker file so one",
    "start": "1743840",
    "end": "1753289"
  },
  {
    "text": "thing I'll call out is you know I I won't speak to sui but sort of the",
    "start": "1753289",
    "end": "1761210"
  },
  {
    "text": "source to image techniques in general one of the things that is appealing about not going through a docker file",
    "start": "1761210",
    "end": "1768860"
  },
  {
    "text": "for or even at times a docker daemon to do that image assembly is that you you",
    "start": "1768860",
    "end": "1776690"
  },
  {
    "text": "aren't constrained to what layering can be expressed through a docker file so each directive in a docker file gives",
    "start": "1776690",
    "end": "1783169"
  },
  {
    "text": "you a layer so if you look at what fkl style builders like jib or the ones we",
    "start": "1783169",
    "end": "1790429"
  },
  {
    "text": "have for Python and noter doing we're basically producing a dynamic set",
    "start": "1790429",
    "end": "1795830"
  },
  {
    "text": "of layers based on the transitive dependencies of an app and you can sort",
    "start": "1795830",
    "end": "1800899"
  },
  {
    "text": "of reading that and spitting out a docker file it would be very challenging for you to write sort of a static docker",
    "start": "1800899",
    "end": "1807350"
  },
  {
    "text": "file that could produce that layering and one of the things that I think I'd",
    "start": "1807350",
    "end": "1812419"
  },
  {
    "text": "like to see from some of the demon less docker file builders is",
    "start": "1812419",
    "end": "1817520"
  },
  {
    "text": "in addition to supporting things like squashing layers which can eliminate redundant downloads for you know copied",
    "start": "1817520",
    "end": "1823580"
  },
  {
    "text": "or overwritten files is starting to embrace techniques around partitioning",
    "start": "1823580",
    "end": "1829820"
  },
  {
    "text": "that mega layer into a set of things that can be uploaded and downloaded in",
    "start": "1829820",
    "end": "1835640"
  },
  {
    "text": "parallel and potentially give you like if you know it's var food doesn't change",
    "start": "1835640",
    "end": "1842299"
  },
  {
    "text": "right then the layer with that won't need to be reapplied it won't need to be redownload it and so you can partition",
    "start": "1842299",
    "end": "1848360"
  },
  {
    "text": "the change in your application and get much faster cycle times it's the last",
    "start": "1848360",
    "end": "1857179"
  },
  {
    "text": "question I'm wondering how we can can we approach the multi stage environment",
    "start": "1857179",
    "end": "1864230"
  },
  {
    "text": "that means we normally creating somewhere something there's JDK and in the production area we just run GRE or",
    "start": "1864230",
    "end": "1872419"
  },
  {
    "text": "and how how is the way it is tooling helped me to have multi stage stuff I mean today I can do in docker file can",
    "start": "1872419",
    "end": "1879200"
  },
  {
    "text": "do a builder stage and and add stage from the output can this stuff here also",
    "start": "1879200",
    "end": "1886039"
  },
  {
    "text": "be done so when you're talking about",
    "start": "1886039",
    "end": "1891620"
  },
  {
    "text": "stages you're talking about sort of promoting the image through from you've done development and then a multi-stage",
    "start": "1891620",
    "end": "1899480"
  },
  {
    "text": "docker builds themselves so I believe that at least build a for example will",
    "start": "1899480",
    "end": "1907190"
  },
  {
    "text": "actually support that do you know offhand if Conoco Konica should support",
    "start": "1907190",
    "end": "1914450"
  },
  {
    "text": "it right in the future does it doesn't now but you know i'm i balling the",
    "start": "1914450",
    "end": "1920840"
  },
  {
    "text": "product manager and then for for the",
    "start": "1920840",
    "end": "1926000"
  },
  {
    "text": "tools like s2 i I would almost say s2 is already inherently a multi-stage build",
    "start": "1926000",
    "end": "1931130"
  },
  {
    "text": "your first stage being you produced the Builder image and your second stage is you add the application code to that",
    "start": "1931130",
    "end": "1936770"
  },
  {
    "text": "Builder image yeah so s2 I itself we",
    "start": "1936770",
    "end": "1944929"
  },
  {
    "text": "actually experimented with a feature called extended builds in s2 I where you could supply a separate",
    "start": "1944929",
    "end": "1951020"
  },
  {
    "text": "run-time image and what it would do is do a first build that invoked your assemble script produced artifacts",
    "start": "1951020",
    "end": "1957080"
  },
  {
    "text": "produced an image with those artifacts then extracted those artifacts and added them to your runtime image we briefly",
    "start": "1957080",
    "end": "1964880"
  },
  {
    "text": "introduced that in openshift and then decided that actually that was too inflexible and so we instead",
    "start": "1964880",
    "end": "1971030"
  },
  {
    "text": "promoted what we call chained builds an open shift where you actually just do multiple builds but we allow you to pull",
    "start": "1971030",
    "end": "1977060"
  },
  {
    "text": "artifacts from one image and use them in another build and so it was just a more flexible way rather than being",
    "start": "1977060",
    "end": "1982220"
  },
  {
    "text": "completely tied to s2i so to echo that",
    "start": "1982220",
    "end": "1987710"
  },
  {
    "text": "rate we have a slightly different approach in google container builder where you basically have multiple steps",
    "start": "1987710",
    "end": "1994460"
  },
  {
    "text": "in a build where there's a shared workspace you can use to copy things between things but it both predate",
    "start": "1994460",
    "end": "2000490"
  },
  {
    "text": "multistage docker files to your point though right I think this touches on the you know these these source to image",
    "start": "2000490",
    "end": "2007930"
  },
  {
    "text": "builders sort of enforcing best practices I think one of the best practices is jdk czar for building and",
    "start": "2007930",
    "end": "2015160"
  },
  {
    "text": "JRE czar for running right the the most extreme example of this is from go lang",
    "start": "2015160",
    "end": "2020380"
  },
  {
    "text": "add my source go build and then set the entry point of the binary write like that is a huge image that that's",
    "start": "2020380",
    "end": "2027460"
  },
  {
    "text": "invoking you know a statically linked you know couple mega executable and so",
    "start": "2027460",
    "end": "2032470"
  },
  {
    "text": "you're downloading huge amounts of data that's just pointless right so yeah I think that that's absolutely a best",
    "start": "2032470",
    "end": "2039100"
  },
  {
    "text": "practice that hopefully users don't have to you can use one of these tools",
    "start": "2039100",
    "end": "2044920"
  },
  {
    "text": "instead of having to curate their own multi-stage docker file and worry about how they copy things in between it but",
    "start": "2044920",
    "end": "2051780"
  },
  {
    "text": "but yeah then they'd have to live with the constraints",
    "start": "2051780",
    "end": "2056610"
  },
  {
    "text": "not a question so Kim is the product",
    "start": "2060350",
    "end": "2066600"
  },
  {
    "text": "manager for Conoco and scaffold and she",
    "start": "2066600",
    "end": "2071730"
  },
  {
    "text": "says there is a PR out to add multistage support to Konica yeah that would that",
    "start": "2071730",
    "end": "2078720"
  },
  {
    "text": "was really fast nice job to do yeah",
    "start": "2078720",
    "end": "2091050"
  },
  {
    "text": "that's that's a really good question raise your hand if you do docker file",
    "start": "2091050",
    "end": "2096780"
  },
  {
    "text": "based docker builds okay raise your hand",
    "start": "2096780",
    "end": "2104280"
  },
  {
    "text": "if you do some sort of source the image based docker and raise your hand if you",
    "start": "2104280",
    "end": "2115820"
  },
  {
    "text": "don't think you need docker file builds based on what you learned today cool are",
    "start": "2115820",
    "end": "2127410"
  },
  {
    "text": "there any other questions there's one here just a small question and have you",
    "start": "2127410",
    "end": "2144810"
  },
  {
    "text": "used hash Accord Packer I kind of looked forward to seeing something about it because it has like eight thousand stars somebody do know I haven't used it",
    "start": "2144810",
    "end": "2156450"
  },
  {
    "text": "directly my understanding is it's [Music]",
    "start": "2156450",
    "end": "2161540"
  },
  {
    "text": "similar to docker file builds in so much as you know you effectively entered the",
    "start": "2161540",
    "end": "2167520"
  },
  {
    "text": "Sun based container execute you know the set of commands and then it's snapshots it so while the docker well so while the",
    "start": "2167520",
    "end": "2175980"
  },
  {
    "text": "docker file daemon driving whatever you want to call it isn't isn't being done by docker via",
    "start": "2175980",
    "end": "2185100"
  },
  {
    "text": "docker build and it's still how the Packer process is driving that docker",
    "start": "2185100",
    "end": "2190680"
  },
  {
    "text": "build is my understanding don't quote me on that because I don't think I've looked at it in years but",
    "start": "2190680",
    "end": "2196160"
  },
  {
    "text": "that's that's my understanding of how that's working basically created only",
    "start": "2196160",
    "end": "2211680"
  },
  {
    "text": "one layer so didn't we work out because I had a very big layer and because it",
    "start": "2211680",
    "end": "2217770"
  },
  {
    "text": "was nice outside stupid party we can use for example I had some on Siebel also I thought it was nice I can we use that to",
    "start": "2217770",
    "end": "2223620"
  },
  {
    "text": "tree my image but yeah I went back to Tokyo fight with it yeah",
    "start": "2223620",
    "end": "2230940"
  },
  {
    "text": "if yes if that's how you're driving it in you're only doing the single snapshot how it which is what I think Packers",
    "start": "2230940",
    "end": "2237930"
  },
  {
    "text": "doing you end up with a single layer",
    "start": "2237930",
    "end": "2242359"
  }
]