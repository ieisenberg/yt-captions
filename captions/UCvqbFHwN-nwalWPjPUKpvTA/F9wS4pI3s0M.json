[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "okay let's get started like to thank everyone who is joining us today welcome to today's cncf webinar",
    "start": "6799",
    "end": "13920"
  },
  {
    "text": "let's untangle the service mesh i'm jerry fallon i'll be moderating today's webinar we would like to welcome our",
    "start": "13920",
    "end": "19119"
  },
  {
    "text": "presenter today dominic tornow president uh principal engineer at cisco",
    "start": "19119",
    "end": "25039"
  },
  {
    "text": "just a few housekeeping items before we get started during the webinar you are not able to talk as an attendee",
    "start": "25039",
    "end": "30240"
  },
  {
    "text": "there is a q a box at the bottom of your screen please feel free to drop your questions in there and we'll get to as",
    "start": "30240",
    "end": "35840"
  },
  {
    "text": "many as we can at the end this is an official webinar of the cncf and as such as subjects of the cncf code",
    "start": "35840",
    "end": "42079"
  },
  {
    "text": "of conduct please do not add anything to the chat or questions that would be in violation",
    "start": "42079",
    "end": "47520"
  },
  {
    "text": "of the code of conduct please be respectful of all of your fellow participants and presenters",
    "start": "47520",
    "end": "53039"
  },
  {
    "text": "please also note that the that the recording and slides will be posted later today to the cncf webinar page at cncf",
    "start": "53039",
    "end": "61039"
  },
  {
    "text": "dot io slash webinars with that i'll hand it over to dominic to kick off today's presentation",
    "start": "61039",
    "end": "68000"
  },
  {
    "text": "hey thank you very much and thank you everybody for joining untangling the service mesh",
    "start": "68000",
    "end": "74479"
  },
  {
    "text": "i am dominic torno i work at the office of the cto at cisco systems and i focus",
    "start": "74479",
    "end": "81600"
  },
  {
    "text": "on systems modeling to support the design development and the documentation of",
    "start": "81600",
    "end": "88000"
  },
  {
    "text": "complex software systems so first off what is systems modeling",
    "start": "88000",
    "end": "93119"
  },
  {
    "text": "and how is it different systems modeling is an analytical method",
    "start": "93119",
    "end": "99439"
  },
  {
    "text": "traditional analytical methods divide and conquer that is a process that is formerly",
    "start": "99439",
    "end": "105600"
  },
  {
    "text": "called analytical reduction the system is decomposed into subsystems",
    "start": "105600",
    "end": "111680"
  },
  {
    "text": "in individual subsystems are examined individually systems modeling focuses on the system",
    "start": "111680",
    "end": "119200"
  },
  {
    "text": "as a whole not on individual parts it is holistic",
    "start": "119200",
    "end": "124560"
  },
  {
    "text": "this webinar is all about the concepts behind service meshes it's not about a feature set or how to",
    "start": "124560",
    "end": "131680"
  },
  {
    "text": "use a specific service mesh we are going to develop a holistic mental",
    "start": "131680",
    "end": "136959"
  },
  {
    "text": "model but what is a model or what is a mental model",
    "start": "136959",
    "end": "144400"
  },
  {
    "text": "a model is a collection of facts so that every fact about the model",
    "start": "144400",
    "end": "149440"
  },
  {
    "text": "is also a fact about the system and a mental model is simply a",
    "start": "149440",
    "end": "155200"
  },
  {
    "text": "collection of internalized facts mental model are the foundation of human",
    "start": "155200",
    "end": "161280"
  },
  {
    "text": "reasoning if you acquire a holistic mental model of a system",
    "start": "161280",
    "end": "166319"
  },
  {
    "text": "that will enable you to reason confidently about that system",
    "start": "166319",
    "end": "171840"
  },
  {
    "text": "so to kick off let's revisit the traditional definition for a service mesh",
    "start": "172480",
    "end": "179680"
  },
  {
    "start": "179000",
    "end": "179000"
  },
  {
    "text": "a service mesh is a dedicated infrastructure layer for handling service to service",
    "start": "179920",
    "end": "185280"
  },
  {
    "text": "communication so this definition of a service mesh is in turn based on the definition of a",
    "start": "185280",
    "end": "192319"
  },
  {
    "text": "dedicated infrastructure layer as well as the definition of a service",
    "start": "192319",
    "end": "198400"
  },
  {
    "text": "problem there is no agreed upon definition neither for infrastructure layer nor for",
    "start": "198400",
    "end": "203840"
  },
  {
    "text": "service which leaves the initial definition open to a wide range of interpretations",
    "start": "203840",
    "end": "210239"
  },
  {
    "text": "this definition will not spark the same understanding of the term service mesh in different readers and certainly it",
    "start": "210239",
    "end": "217200"
  },
  {
    "text": "will not spark a holistic understanding of the term service mesh",
    "start": "217200",
    "end": "222319"
  },
  {
    "start": "221000",
    "end": "221000"
  },
  {
    "text": "next up a service mesh is a set of users-based proxies executing alongside your services and a",
    "start": "222640",
    "end": "228959"
  },
  {
    "text": "set of management processes now this definition is based on the presence of a user space proxy",
    "start": "228959",
    "end": "235840"
  },
  {
    "text": "and the presence of management processes in effect this definition elevates an",
    "start": "235840",
    "end": "242239"
  },
  {
    "text": "implementation detail to a defining criteria because according to this definition any",
    "start": "242239",
    "end": "249040"
  },
  {
    "text": "system that acts like a service mesh that is any system that handles service to service",
    "start": "249040",
    "end": "254640"
  },
  {
    "text": "communication but that it is not implemented as a set of users-based proxies and a set of",
    "start": "254640",
    "end": "260479"
  },
  {
    "text": "management proxies would in fact not be considered a service mesh",
    "start": "260479",
    "end": "266240"
  },
  {
    "text": "that seems to be an arbitrary criteria so let's try this again in part one",
    "start": "266240",
    "end": "274479"
  },
  {
    "text": "we will develop three distinct yet related mental models each providing a foundation for the next",
    "start": "274479",
    "end": "282720"
  },
  {
    "text": "first a mental model to reason about networking then a mental model to reason about",
    "start": "282720",
    "end": "288560"
  },
  {
    "text": "services and finally a mental model to reason about service meshes",
    "start": "288560",
    "end": "295360"
  },
  {
    "start": "295000",
    "end": "295000"
  },
  {
    "text": "so first up networking",
    "start": "295360",
    "end": "299599"
  },
  {
    "text": "in software engineering a distributed system is an unbounded set of components",
    "start": "300479",
    "end": "305919"
  },
  {
    "text": "from here on out called endpoints endpoints communicate by exchanging",
    "start": "305919",
    "end": "311520"
  },
  {
    "text": "messages via network so according to this definition",
    "start": "311520",
    "end": "317280"
  },
  {
    "text": "networking is the very foundation of distributed systems",
    "start": "317280",
    "end": "322880"
  },
  {
    "text": "the behavior of a distributed system is attributed to the behavior of its",
    "start": "323440",
    "end": "328560"
  },
  {
    "text": "endpoints and the communication between them and fun fact the complexity of a distributed",
    "start": "328560",
    "end": "335520"
  },
  {
    "text": "system is attributed to the autonomy of its endpoints and the intricacy of the communication",
    "start": "335520",
    "end": "342080"
  },
  {
    "text": "between them so without loss of generality let's focus this discussion on two endpoints",
    "start": "342080",
    "end": "348160"
  },
  {
    "text": "e1 and e2 an endpoint is connected to the network via an",
    "start": "348160",
    "end": "354639"
  },
  {
    "text": "outbox to send messages and an inbox to receive messages",
    "start": "354639",
    "end": "360720"
  },
  {
    "text": "we keep track of the sequence of send events and receive events in an endpoint's history",
    "start": "360880",
    "end": "368240"
  },
  {
    "text": "if an endpoint wants to send a message it will place that message in its outbox",
    "start": "368639",
    "end": "375120"
  },
  {
    "text": "placing a message in its outbox is represented by a send event",
    "start": "375440",
    "end": "381600"
  },
  {
    "text": "the network picks up the message from the sending endpoints outbox and determines the receiving endpoints",
    "start": "381600",
    "end": "388080"
  },
  {
    "text": "inbox the network places a message in the receiving endpoints inbox",
    "start": "388080",
    "end": "394880"
  },
  {
    "text": "and that is represented by a receive event this can also be represented graphically",
    "start": "394880",
    "end": "401840"
  },
  {
    "text": "as a time space diagram each timeline represents an endpoint's history",
    "start": "401840",
    "end": "407600"
  },
  {
    "text": "empty circles represent send events and filled circles represent receive events",
    "start": "407600",
    "end": "414400"
  },
  {
    "text": "if necessary we may also represent the network in the message exchange",
    "start": "414639",
    "end": "420720"
  },
  {
    "text": "a request response pair from here on out called a transaction is represented as two messages the",
    "start": "421199",
    "end": "428080"
  },
  {
    "text": "request and the response and four events the send request event receive request event",
    "start": "428080",
    "end": "434080"
  },
  {
    "text": "send response event and the receive is responsive end and again if necessary we may also",
    "start": "434080",
    "end": "440560"
  },
  {
    "text": "represent the network in the message exchange let's highlight two important aspects of",
    "start": "440560",
    "end": "447680"
  },
  {
    "text": "networking the global versus the local point of view and addressing",
    "start": "447680",
    "end": "454000"
  },
  {
    "text": "first off global versus local so far we have applied a global point of",
    "start": "454000",
    "end": "460960"
  },
  {
    "text": "view in this model we are able to take the viewpoint of an all-knowing observer we can",
    "start": "460960",
    "end": "468560"
  },
  {
    "text": "observe both the inbox and outbox of e1 and e2 at the same time [Music]",
    "start": "468560",
    "end": "474240"
  },
  {
    "text": "but conversely e1 or e2 cannot we see the requests appear in ebon's",
    "start": "474240",
    "end": "481360"
  },
  {
    "text": "outbox and subsequently we see the request appear in e2's inbox",
    "start": "481360",
    "end": "487759"
  },
  {
    "text": "then we see the response appear in e2's outbox and subsequently we see the response appear in events",
    "start": "487759",
    "end": "493599"
  },
  {
    "text": "inbox so from a global point of view we can",
    "start": "493599",
    "end": "499280"
  },
  {
    "text": "follow the entire transaction at all times but from a local point of view we simply",
    "start": "499280",
    "end": "506160"
  },
  {
    "text": "cannot e1 can only observe its own inbox and",
    "start": "506160",
    "end": "511440"
  },
  {
    "text": "its own outbox it simply cannot reach beyond",
    "start": "511440",
    "end": "516959"
  },
  {
    "text": "so from the point of view of e1 e1 places a request in its outbox",
    "start": "516959",
    "end": "522640"
  },
  {
    "text": "and eventually a response appears in its inbox the same is true for e2 e2 can only",
    "start": "522640",
    "end": "531519"
  },
  {
    "text": "observe its own inbox and its own outbox so from the point of view of e2 a",
    "start": "531519",
    "end": "537839"
  },
  {
    "text": "request appears in its inbox and eventually e2 places a response in",
    "start": "537839",
    "end": "542959"
  },
  {
    "text": "its outbox this is an absolutely fundamental realization",
    "start": "542959",
    "end": "549120"
  },
  {
    "text": "from the point of view of the all-knowing observer e1 interacts with e2",
    "start": "549120",
    "end": "555920"
  },
  {
    "text": "in this example e1 sends a request to e2 and in return e2 sends a response to e1",
    "start": "555920",
    "end": "563839"
  },
  {
    "text": "but from the point of view of e1 places a request in its outbox and eventually a",
    "start": "564240",
    "end": "569440"
  },
  {
    "text": "response appears in its inbox and similarly from the point of view of e2 a request appears in its inbox",
    "start": "569440",
    "end": "576080"
  },
  {
    "text": "and eventually places a response in its outbox from this point of view neither e1 nor",
    "start": "576080",
    "end": "582560"
  },
  {
    "text": "e2 interact directly with any other endpoints",
    "start": "582560",
    "end": "587680"
  },
  {
    "text": "it is this realization that lets us clearly define the concept of a service later on",
    "start": "587680",
    "end": "595040"
  },
  {
    "text": "but before we do so let's visit addressing so far we have explored the fact that",
    "start": "595440",
    "end": "602480"
  },
  {
    "text": "the network picks up a message from the sending endpoints outbox and places a message in the receiving",
    "start": "602480",
    "end": "607839"
  },
  {
    "text": "endpoints inbox however we have not at all explored how the network determines the receiving",
    "start": "607839",
    "end": "614160"
  },
  {
    "text": "endpoint by far the most common method is addressing",
    "start": "614160",
    "end": "620320"
  },
  {
    "text": "the network maintains an association between endpoints and addresses",
    "start": "620320",
    "end": "625440"
  },
  {
    "text": "messages are tagged with target addresses the network places a message in the",
    "start": "625440",
    "end": "632399"
  },
  {
    "text": "outbox or the endpoint whose address message the message target address",
    "start": "632399",
    "end": "638320"
  },
  {
    "text": "sorry inbox so in effect the network does not determine",
    "start": "638320",
    "end": "643360"
  },
  {
    "text": "the receiving endpoint the receiving endpoint is determined by the sending endpoint",
    "start": "643360",
    "end": "651040"
  },
  {
    "text": "this is referred to as smart endpoints dump pipes at the moment the message is",
    "start": "651120",
    "end": "658959"
  },
  {
    "text": "in the out box the eventual inbox is already determined the network delivers the message but",
    "start": "658959",
    "end": "665440"
  },
  {
    "text": "does not inspect or interpret the message beyond the target address",
    "start": "665440",
    "end": "671200"
  },
  {
    "start": "671000",
    "end": "671000"
  },
  {
    "text": "so to summarize we tend to reason about a distributed system from the viewpoint",
    "start": "671519",
    "end": "678000"
  },
  {
    "text": "of the all-knowing server the global viewpoint but we must not forget that the components of the",
    "start": "678000",
    "end": "684160"
  },
  {
    "text": "distributed system cannot look beyond their inboxes and outboxes the local point of view",
    "start": "684160",
    "end": "691600"
  },
  {
    "text": "and most commonly networks determine the target endpoint of a message via addressing",
    "start": "691680",
    "end": "697440"
  },
  {
    "text": "in that case the network is referred to as dumb pipes or sometimes a collection",
    "start": "697440",
    "end": "703440"
  },
  {
    "text": "of dump pipes so equipped with a solid mental model",
    "start": "703440",
    "end": "708560"
  },
  {
    "text": "about networking let's look at services",
    "start": "708560",
    "end": "713760"
  },
  {
    "text": "before we discuss the definition of a service let's first develop an intuition of a",
    "start": "713760",
    "end": "719040"
  },
  {
    "text": "service when following this example keep in mind messages are load balanced",
    "start": "719040",
    "end": "726240"
  },
  {
    "text": "that is a message may be processed by any process that constitutes a service",
    "start": "726240",
    "end": "733120"
  },
  {
    "text": "to develop an intuition let's examine the example of a recommendation service the contract of a recommendation service",
    "start": "733680",
    "end": "739920"
  },
  {
    "text": "consists of only one operation the get operation accepts a single id and yields a list of ids",
    "start": "739920",
    "end": "747120"
  },
  {
    "text": "an id may be a movie id so the recommendation service may recommend other movies to watch",
    "start": "747120",
    "end": "752959"
  },
  {
    "text": "or an id may be a product id so the recommendation service may recommend other products to buy",
    "start": "752959",
    "end": "759760"
  },
  {
    "text": "but whatever the recommendation service actually recommends the important aspect is a contract of",
    "start": "759760",
    "end": "765440"
  },
  {
    "text": "the service the service accepts a single id as a request",
    "start": "765440",
    "end": "771760"
  },
  {
    "text": "and yields a list of ideas a response now how could we implement this search",
    "start": "771760",
    "end": "779360"
  },
  {
    "text": "well we could implement this service as a python process or a python container",
    "start": "779360",
    "end": "785200"
  },
  {
    "text": "that connects to a database to retrieve recommendations specific to an id",
    "start": "785200",
    "end": "791600"
  },
  {
    "text": "here let us assume the process is stateless and the database itself is both scalable",
    "start": "791600",
    "end": "798480"
  },
  {
    "text": "and reliable however the connection to the database is not",
    "start": "798480",
    "end": "805760"
  },
  {
    "text": "so in this case service and process are congruent they are one in the same",
    "start": "806880",
    "end": "813360"
  },
  {
    "text": "but while this is functionally correct this service is neither scalable nor reliable",
    "start": "813360",
    "end": "820480"
  },
  {
    "text": "since one process is neither scalable nor reliable one process cannot withstand infinite",
    "start": "820480",
    "end": "827040"
  },
  {
    "text": "load and it cannot withstand a single failure",
    "start": "827040",
    "end": "831440"
  },
  {
    "text": "since we assume the process is stateless and the database is both scalable and reliable",
    "start": "833120",
    "end": "838959"
  },
  {
    "text": "we may mitigate load and failure by redundancy that is we simply duplicate the recommendation",
    "start": "838959",
    "end": "844560"
  },
  {
    "text": "process in this case the service consists of",
    "start": "844560",
    "end": "849920"
  },
  {
    "text": "multiple processes but we previously assumed the connection",
    "start": "849920",
    "end": "856240"
  },
  {
    "text": "to the database is neither scalable nor reliable itself so what can we do with the connection to",
    "start": "856240",
    "end": "862320"
  },
  {
    "text": "the database fails well we could deploy two different",
    "start": "862320",
    "end": "867839"
  },
  {
    "text": "groups of recommendation processes one the primary group returns the",
    "start": "867839",
    "end": "873199"
  },
  {
    "text": "optimal recommendations in case the connection to the database is healthy the other the backup group returns",
    "start": "873199",
    "end": "879519"
  },
  {
    "text": "static recommendations in case the connection to the database is not healthy",
    "start": "879519",
    "end": "885440"
  },
  {
    "text": "so while the primary group retrieves recommendations from a sometimes available remote database",
    "start": "885440",
    "end": "892720"
  },
  {
    "text": "the secondary group retrieves recommendations from an always available local file",
    "start": "892720",
    "end": "899839"
  },
  {
    "text": "in this case the service still consists of multiple processes yet not all processes are equal we are",
    "start": "900560",
    "end": "907680"
  },
  {
    "text": "dealing with two distinct groups of processes but we are still missing a lot of",
    "start": "907680",
    "end": "914320"
  },
  {
    "text": "machinery to make this work so for layout reasons we will not",
    "start": "914320",
    "end": "919360"
  },
  {
    "text": "display the recommendation stores anymore yet please consider both the remote and local recommendation",
    "start": "919360",
    "end": "926480"
  },
  {
    "text": "stores still present so in order to mitigate load and failure both process groups",
    "start": "926480",
    "end": "932639"
  },
  {
    "text": "employ auto scaling however now the auto scalers themselves cannot",
    "start": "932639",
    "end": "938399"
  },
  {
    "text": "withstand load and failure well a situation we can once again address with redundancy",
    "start": "938399",
    "end": "946160"
  },
  {
    "text": "now in order to distribute requests among processes we employ a load balancer",
    "start": "947040",
    "end": "953360"
  },
  {
    "text": "but since we are dealing with two different process groups we need to employ a smart load balancer for example the",
    "start": "953680",
    "end": "960880"
  },
  {
    "text": "load balancer may default the request to a process in the primary group but if that process returns an error",
    "start": "960880",
    "end": "967279"
  },
  {
    "text": "retry the request to a process in the backup group however once again now the load balancer",
    "start": "967279",
    "end": "973839"
  },
  {
    "text": "itself cannot be standard failure a situation b once again one trig pony",
    "start": "973839",
    "end": "980079"
  },
  {
    "text": "addressed with redundancy so no so now one service consists of a",
    "start": "980079",
    "end": "987519"
  },
  {
    "text": "ton of processes all with varying tasks and responsibilities that interact with each other in non-trivial",
    "start": "987519",
    "end": "994839"
  },
  {
    "text": "ways and this graphic looks much simpler much cleaner than an",
    "start": "994839",
    "end": "1000240"
  },
  {
    "text": "actual system this graphic implies a one-to-one relationship between parts of",
    "start": "1000240",
    "end": "1006160"
  },
  {
    "text": "the system that may not exist for example some instances of an order",
    "start": "1006160",
    "end": "1011680"
  },
  {
    "text": "scalar may be responsible for more than one process group that constitutes a service",
    "start": "1011680",
    "end": "1017839"
  },
  {
    "text": "or worse some instances of an older scalar may be responsible for more than one process group across",
    "start": "1017839",
    "end": "1024319"
  },
  {
    "text": "different services and all of that is true for the load balancers",
    "start": "1024319",
    "end": "1030319"
  },
  {
    "text": "so from the point of view a service is an individual component",
    "start": "1030799",
    "end": "1037360"
  },
  {
    "text": "a component with identity and integrity that is identity and clear boundaries",
    "start": "1037360",
    "end": "1045600"
  },
  {
    "text": "yet from another point of view a service is an aggregate a set of components with",
    "start": "1045839",
    "end": "1052559"
  },
  {
    "text": "complex interactions so fundamentally there exists two",
    "start": "1052559",
    "end": "1058559"
  },
  {
    "text": "different levels a service level and a process level",
    "start": "1058559",
    "end": "1064160"
  },
  {
    "text": "the levels form a hierarchy with the service level above and the process level below",
    "start": "1064160",
    "end": "1070960"
  },
  {
    "text": "levels are populated by components that characterize the level in question",
    "start": "1070960",
    "end": "1077360"
  },
  {
    "text": "so the service level is unsurprisingly composed of components that we call services and the",
    "start": "1077360",
    "end": "1084240"
  },
  {
    "text": "process level is composed of components that we call processes",
    "start": "1084240",
    "end": "1089679"
  },
  {
    "text": "the set of elements at the service level and the set of elements at the process level",
    "start": "1089679",
    "end": "1095039"
  },
  {
    "text": "they are disjunct they do not overlap services are not processes and processes",
    "start": "1095039",
    "end": "1101360"
  },
  {
    "text": "are not services however that is not to say that the",
    "start": "1101360",
    "end": "1108240"
  },
  {
    "text": "service level and the process level do not relate to each other on the contrary the service level and",
    "start": "1108240",
    "end": "1113840"
  },
  {
    "text": "the process level relate to each other in the most meaningful way",
    "start": "1113840",
    "end": "1119039"
  },
  {
    "text": "from a bottom-up point of view a service is an emergent concept",
    "start": "1119039",
    "end": "1126080"
  },
  {
    "text": "processes the subsystems and their interactions on the process level",
    "start": "1126080",
    "end": "1131840"
  },
  {
    "text": "integrate into services the super systems on the service level",
    "start": "1131840",
    "end": "1138000"
  },
  {
    "text": "when subsystems integrate into super systems new characteristics emerge these",
    "start": "1138000",
    "end": "1145000"
  },
  {
    "text": "characteristics are in fact characteristic for the super level they are irreducible",
    "start": "1145000",
    "end": "1151280"
  },
  {
    "text": "they do not trace back they do not exist on the sub-level",
    "start": "1151280",
    "end": "1156640"
  },
  {
    "text": "for instance in our example the recommendation service was scalable and reliable however",
    "start": "1156640",
    "end": "1164640"
  },
  {
    "text": "no individual process on the process level was scalable or reliable",
    "start": "1164640",
    "end": "1171280"
  },
  {
    "text": "so the whole is more than the sum of its parts",
    "start": "1172720",
    "end": "1179840"
  },
  {
    "text": "from a bottom-up point of view i'm sorry from a top-down point of view",
    "start": "1180080",
    "end": "1187600"
  },
  {
    "text": "a service is a controlling concept services on a service level",
    "start": "1187600",
    "end": "1194640"
  },
  {
    "text": "manifest as constraints on processes and their interactions on the process level",
    "start": "1194640",
    "end": "1202399"
  },
  {
    "text": "in turn constraints on processes and their interactions on the",
    "start": "1202720",
    "end": "1208000"
  },
  {
    "text": "process level yield characteristics that are meaningful on the service level",
    "start": "1208000",
    "end": "1221840"
  },
  {
    "text": "since the service level imposes constraints on the process level a valid point of view is that the",
    "start": "1222480",
    "end": "1229520"
  },
  {
    "text": "service level is the control plane and the process level",
    "start": "1229520",
    "end": "1235360"
  },
  {
    "text": "is the data plane of the overall system and leaping forward to the topic of",
    "start": "1235360",
    "end": "1242240"
  },
  {
    "text": "service meshes another valid point of view is that a service mesh is a",
    "start": "1242240",
    "end": "1247679"
  },
  {
    "text": "system that imposes constraints of the service level onto the process",
    "start": "1247679",
    "end": "1253919"
  },
  {
    "text": "level but now i'm getting ahead of myself",
    "start": "1253919",
    "end": "1258480"
  },
  {
    "start": "1257000",
    "end": "1257000"
  },
  {
    "text": "so in the previous subsection we were developing an intuition but we have been informally",
    "start": "1259120",
    "end": "1265679"
  },
  {
    "text": "using the terms contract service and process",
    "start": "1265679",
    "end": "1270240"
  },
  {
    "text": "let's have a look at the definition when following this example keep in mind",
    "start": "1271520",
    "end": "1276799"
  },
  {
    "text": "that here messages are not load balanced they are partitioned that is",
    "start": "1276799",
    "end": "1281919"
  },
  {
    "text": "a message must be processed by a specific process that constitutes a service",
    "start": "1281919",
    "end": "1289039"
  },
  {
    "text": "so to develop the definition of a service let's take a look at an example of a key",
    "start": "1289200",
    "end": "1294960"
  },
  {
    "text": "value store the contract of the key value store consists of two operations",
    "start": "1294960",
    "end": "1300400"
  },
  {
    "text": "a get operation that gets the value for a key and a put operation that sets a value",
    "start": "1300400",
    "end": "1305679"
  },
  {
    "text": "for a key and here keys are integers and values or strings",
    "start": "1305679",
    "end": "1311600"
  },
  {
    "text": "and the mechanics of the key value store are straightforward getting the value of a key that has not",
    "start": "1311600",
    "end": "1318240"
  },
  {
    "text": "been set yet yields an empty string and getting the value of a key that has",
    "start": "1318240",
    "end": "1324799"
  },
  {
    "text": "been set to a value yields that value no surprises",
    "start": "1324799",
    "end": "1331120"
  },
  {
    "text": "in order to discuss the concepts of contracts services and processes holistically",
    "start": "1331679",
    "end": "1338159"
  },
  {
    "text": "we need to discuss different points of views the service to service or service level",
    "start": "1338159",
    "end": "1344400"
  },
  {
    "text": "point of view the process to process or process level point of view",
    "start": "1344400",
    "end": "1350880"
  },
  {
    "text": "the behavioral view and finally the structural view",
    "start": "1350880",
    "end": "1357280"
  },
  {
    "text": "and furthermore to make matters worse we will subdivide the structural view into direct communication and indirect",
    "start": "1357280",
    "end": "1364799"
  },
  {
    "text": "communication via network the term service itself is actually",
    "start": "1364799",
    "end": "1372840"
  },
  {
    "start": "1368000",
    "end": "1368000"
  },
  {
    "text": "overloaded service may either refer to a contract",
    "start": "1372840",
    "end": "1378080"
  },
  {
    "text": "or to a component providing that contract so first let us examine service as a",
    "start": "1378080",
    "end": "1384240"
  },
  {
    "text": "contract a contract is an agreement on the",
    "start": "1384240",
    "end": "1389280"
  },
  {
    "text": "sequence of send and receive events on the service consumers in point in inbox and outbox",
    "start": "1389280",
    "end": "1398000"
  },
  {
    "text": "in the case of our key value store the contract states that if a service consumer sends",
    "start": "1398000",
    "end": "1404000"
  },
  {
    "text": "a put message via its outbox it will eventually receive an okay a confirmation via its inbox",
    "start": "1404000",
    "end": "1411280"
  },
  {
    "text": "then if the service consumer sends a get message via its outbox it will eventually receive the value via its inbox",
    "start": "1411280",
    "end": "1420400"
  },
  {
    "text": "once again from the local point of view of the service consumer here the endpoint e if e sends a",
    "start": "1421120",
    "end": "1429039"
  },
  {
    "text": "put message it will eventually receive an ok then the service consumer sends a get",
    "start": "1429039",
    "end": "1435760"
  },
  {
    "text": "message it will eventually receive the value",
    "start": "1435760",
    "end": "1441600"
  },
  {
    "text": "next up let's examine services not as contracts but services",
    "start": "1443440",
    "end": "1448799"
  },
  {
    "text": "as components that implement the contract first from a service to service point of",
    "start": "1448799",
    "end": "1456840"
  },
  {
    "text": "view from a structural direct communication point of view",
    "start": "1456840",
    "end": "1463520"
  },
  {
    "text": "this graphic shows a service consumer and a service provider the key value store from this point of view we reason about",
    "start": "1463760",
    "end": "1470640"
  },
  {
    "text": "the system in terms of services that communicate directly we ignore the",
    "start": "1470640",
    "end": "1475679"
  },
  {
    "text": "network but let's add a twist for our scenario",
    "start": "1475679",
    "end": "1481200"
  },
  {
    "text": "instead of one instance of a key value store we have two instances of a key value store",
    "start": "1481200",
    "end": "1487760"
  },
  {
    "text": "and let's add another twist we require that key value store one must be able to hold up to a thousand",
    "start": "1487760",
    "end": "1494000"
  },
  {
    "text": "keys and key values store two must be able to hold up to two thousand keys",
    "start": "1494000",
    "end": "1501520"
  },
  {
    "text": "note that if we reason about the system as if its components communicate",
    "start": "1501520",
    "end": "1507039"
  },
  {
    "text": "communicate directly addressing is not an issue a message",
    "start": "1507039",
    "end": "1512320"
  },
  {
    "text": "from the service consumer will simply find its target because it was put on the right channel in the first place",
    "start": "1512320",
    "end": "1519600"
  },
  {
    "text": "but now let's examine services as components from a service to service structural indirect communication point",
    "start": "1520320",
    "end": "1527600"
  },
  {
    "text": "of view from this point of view we reason about the system still in terms of services",
    "start": "1527600",
    "end": "1535039"
  },
  {
    "text": "but now they communicate indirectly via a network here a message from the service consumer",
    "start": "1535039",
    "end": "1542000"
  },
  {
    "text": "will not simply find its target the message itself must indicate the target typically via an address",
    "start": "1542000",
    "end": "1551039"
  },
  {
    "text": "here we agree that messages that are designed to key value store one must be",
    "start": "1551279",
    "end": "1556320"
  },
  {
    "text": "addressed to a one dot local and messages that are designed to key value store two must be addressed to two",
    "start": "1556320",
    "end": "1562000"
  },
  {
    "text": "dot local so in effect a service",
    "start": "1562000",
    "end": "1567600"
  },
  {
    "text": "is not just a contract or an instance of a component it is also an addressing concept",
    "start": "1567600",
    "end": "1576240"
  },
  {
    "text": "next let's check out the service as components from a behavioral point of",
    "start": "1577279",
    "end": "1582840"
  },
  {
    "text": "view let's have a closer look at the interaction of the service consumer and",
    "start": "1582840",
    "end": "1588640"
  },
  {
    "text": "key value store one here the service consumer sends a put request",
    "start": "1588640",
    "end": "1594559"
  },
  {
    "text": "to set key 0 to value a subsequently the service consumer sends",
    "start": "1594559",
    "end": "1599600"
  },
  {
    "text": "a put request to set key one to value b then",
    "start": "1599600",
    "end": "1604640"
  },
  {
    "text": "when the service consumer sends a get request it will receive a response a and finally the service consumer sends",
    "start": "1604640",
    "end": "1611440"
  },
  {
    "text": "another get request and it will receive the response b",
    "start": "1611440",
    "end": "1616880"
  },
  {
    "text": "let's have a look at the interaction of the service consumer and key value store 2.",
    "start": "1618159",
    "end": "1624080"
  },
  {
    "text": "well the interactions the sequence of events are absolutely identical",
    "start": "1624640",
    "end": "1630480"
  },
  {
    "text": "but most notably the sequence of events at the service consumer are identical and in line with the",
    "start": "1630480",
    "end": "1637840"
  },
  {
    "text": "contract of the key value store",
    "start": "1637840",
    "end": "1641840"
  },
  {
    "start": "1642000",
    "end": "1642000"
  },
  {
    "text": "now let's leap over to the process to process model",
    "start": "1644159",
    "end": "1649919"
  },
  {
    "text": "first let's implement the key value store process here we implement the key value store as",
    "start": "1650960",
    "end": "1657279"
  },
  {
    "text": "a python application using the flask http framework storing key value pairs in a local variable",
    "start": "1657279",
    "end": "1665919"
  },
  {
    "text": "if the process receives an http get request the process yields the value for a key",
    "start": "1666080",
    "end": "1672799"
  },
  {
    "text": "and if the process receives an http put request the process sets a value for a key",
    "start": "1672799",
    "end": "1679039"
  },
  {
    "text": "but i added a little gotcha there the process stores up to a thousand keys",
    "start": "1679039",
    "end": "1685520"
  },
  {
    "text": "reaching that threshold the process will reject any more keys so one process up to a thousand keys",
    "start": "1685520",
    "end": "1695760"
  },
  {
    "text": "now from a process to process structure direct communication point of view",
    "start": "1695760",
    "end": "1702640"
  },
  {
    "text": "according to our requirements we need two key value stores key value store one",
    "start": "1702640",
    "end": "1707840"
  },
  {
    "text": "that can handle a thousand keys and key values for two that can handle two thousand keys so",
    "start": "1707840",
    "end": "1714240"
  },
  {
    "text": "since one process is able to store up to a thousand keys intuitively we need three key value stored processes",
    "start": "1714240",
    "end": "1724960"
  },
  {
    "text": "that we may compose to get the desired results one process constitutes key value store",
    "start": "1724960",
    "end": "1731039"
  },
  {
    "text": "one two processes constitute key values or two",
    "start": "1731039",
    "end": "1737120"
  },
  {
    "text": "but how will this composition actually look like well for that let's explore processes",
    "start": "1737120",
    "end": "1743520"
  },
  {
    "text": "from a process to process structural indirect communication point of view",
    "start": "1743520",
    "end": "1749200"
  },
  {
    "text": "again three processes again composed and again",
    "start": "1749520",
    "end": "1756640"
  },
  {
    "text": "now a message must indicate its target via an address",
    "start": "1756640",
    "end": "1762320"
  },
  {
    "text": "notably even though we are on a process to process level we use",
    "start": "1763520",
    "end": "1770720"
  },
  {
    "text": "a service address so again even on a process to process level",
    "start": "1770720",
    "end": "1778320"
  },
  {
    "text": "a service is an addressing concept",
    "start": "1778320",
    "end": "1783200"
  },
  {
    "text": "next up the behavioral point of view let's have a look at the interaction of",
    "start": "1784159",
    "end": "1790240"
  },
  {
    "text": "the service consumer and key value store one well for key value store one the",
    "start": "1790240",
    "end": "1796159"
  },
  {
    "text": "sequence of events on a process level is absolutely identical to the sequence of events on a service level",
    "start": "1796159",
    "end": "1803919"
  },
  {
    "text": "but let's have a look at the interaction of the service consumer and key value store 2.",
    "start": "1805440",
    "end": "1810799"
  },
  {
    "text": "this looks very different both process 1 and profis 2 are able to store up to 1",
    "start": "1810799",
    "end": "1816960"
  },
  {
    "text": "000 keys so in order to store 2 000 keys in total",
    "start": "1816960",
    "end": "1822000"
  },
  {
    "text": "we need to partition the key space here we will store the keys 0 2 4 and",
    "start": "1822000",
    "end": "1828240"
  },
  {
    "text": "all even keys in process 1 and 1 3 5 and all odd keys in process 2.",
    "start": "1828240",
    "end": "1836320"
  },
  {
    "text": "so when the service provider sends a put 0 a message to set the key 0 to value a that message",
    "start": "1836320",
    "end": "1844480"
  },
  {
    "text": "has to be received at process1 and when the service provider sends a",
    "start": "1844480",
    "end": "1850080"
  },
  {
    "text": "put 1b message to set key 1 to value b that message has to be received at",
    "start": "1850080",
    "end": "1855760"
  },
  {
    "text": "process 2. so while on a service to service level",
    "start": "1855760",
    "end": "1861279"
  },
  {
    "text": "the sequence of events between the service provider and key value store one and the sequence",
    "start": "1861279",
    "end": "1866720"
  },
  {
    "text": "of events between the service provider and key value store two are identical",
    "start": "1866720",
    "end": "1872960"
  },
  {
    "text": "on a process to process level clearly they are different",
    "start": "1872960",
    "end": "1878480"
  },
  {
    "text": "however they are still identical where it counts",
    "start": "1878480",
    "end": "1883278"
  },
  {
    "text": "the sequence of events at the service consumer are identical and in line with both the sequence of",
    "start": "1884159",
    "end": "1891840"
  },
  {
    "text": "events on the service to service level as well as the contract",
    "start": "1891840",
    "end": "1897440"
  },
  {
    "text": "of the key value store so to summarize what is a service",
    "start": "1897440",
    "end": "1905519"
  },
  {
    "start": "1901000",
    "end": "1901000"
  },
  {
    "text": "first off colloquially sometimes we equate service with a pod with a container or",
    "start": "1905519",
    "end": "1911440"
  },
  {
    "text": "generally services with processes that is incorrect services are not processes and processes",
    "start": "1911440",
    "end": "1918559"
  },
  {
    "text": "or not services one valid definition of the term service",
    "start": "1918559",
    "end": "1924240"
  },
  {
    "text": "is that service is a contract another valid yet competing definition",
    "start": "1924240",
    "end": "1931039"
  },
  {
    "text": "of the term service is that a service is a component with identity and integrity that",
    "start": "1931039",
    "end": "1937840"
  },
  {
    "text": "implements that contract from a top-down point of view a service",
    "start": "1937840",
    "end": "1945919"
  },
  {
    "text": "controls the interaction of the processes that constitutes a service",
    "start": "1945919",
    "end": "1952480"
  },
  {
    "text": "so that the contract provided by the service is identical to the contract",
    "start": "1952640",
    "end": "1958000"
  },
  {
    "text": "provided by the process set so now we know",
    "start": "1958000",
    "end": "1964080"
  },
  {
    "text": "what a service is but we do not know how a service is actually implemented",
    "start": "1964080",
    "end": "1970320"
  },
  {
    "text": "that is how are the constraints of the service level imposed on the process level",
    "start": "1970320",
    "end": "1978158"
  },
  {
    "start": "1978000",
    "end": "1978000"
  },
  {
    "text": "now this is where service meshes come in let's explore some options",
    "start": "1979440",
    "end": "1986080"
  },
  {
    "text": "for this example please keep in mind again that messages are load balanced once again that is a",
    "start": "1987600",
    "end": "1994559"
  },
  {
    "text": "message may be processed by any process that constitutes a service",
    "start": "1994559",
    "end": "2001039"
  },
  {
    "text": "here we stay more general we'll just assume the existence of some unspecified",
    "start": "2001039",
    "end": "2006320"
  },
  {
    "text": "service s and process 2 and process 6 constitute",
    "start": "2006320",
    "end": "2012320"
  },
  {
    "text": "services furthermore we assume a dumb pipes",
    "start": "2012320",
    "end": "2018880"
  },
  {
    "text": "network where each process has an ip address no trickery",
    "start": "2018880",
    "end": "2023919"
  },
  {
    "text": "no surprises we won't always illustrate the ip",
    "start": "2023919",
    "end": "2029360"
  },
  {
    "text": "addresses we will instead simply use the alias process 1 and process 2 and so on",
    "start": "2029360",
    "end": "2036240"
  },
  {
    "text": "so if a process sends a message in with a target address of s",
    "start": "2036799",
    "end": "2044080"
  },
  {
    "text": "we want that message to be received either at process2 or processes of course not both",
    "start": "2044080",
    "end": "2052240"
  },
  {
    "text": "so let's scroll towards service implementation we do what we always do we did this",
    "start": "2053200",
    "end": "2061040"
  },
  {
    "text": "before we load balance but from a conceptual point of view load",
    "start": "2061040",
    "end": "2068560"
  },
  {
    "text": "balancing amounts to cheating we do not address the message to a service we address a",
    "start": "2068560",
    "end": "2076240"
  },
  {
    "text": "message to a process the load balancer",
    "start": "2076240",
    "end": "2081359"
  },
  {
    "text": "the load balancer is responsible for service resolution that is it examines a message and",
    "start": "2081919",
    "end": "2088720"
  },
  {
    "text": "determines the target process knowledge of a service does not exist in",
    "start": "2088720",
    "end": "2096398"
  },
  {
    "text": "the network knowledge of the service exists in the endpoints",
    "start": "2096399",
    "end": "2102000"
  },
  {
    "text": "process 3 needed to know to send the message to the load balancer if it",
    "start": "2102000",
    "end": "2107280"
  },
  {
    "text": "intended to consume service s and in turn the load balancer needs to",
    "start": "2107280",
    "end": "2112400"
  },
  {
    "text": "know to forward the message to either process 2 or process 6 if it intends to provide",
    "start": "2112400",
    "end": "2119040"
  },
  {
    "text": "services so here the load balancer picked process",
    "start": "2119040",
    "end": "2124560"
  },
  {
    "text": "2 and in this case we are all about smart endpoints",
    "start": "2124560",
    "end": "2130640"
  },
  {
    "text": "and dumb pipes the same is true for api gateways",
    "start": "2130640",
    "end": "2136480"
  },
  {
    "text": "even though api gateways typically provide way more sophisticated service",
    "start": "2136480",
    "end": "2141760"
  },
  {
    "text": "resolution conceptually load balancers and api gateways",
    "start": "2141760",
    "end": "2146960"
  },
  {
    "text": "are identical you're still talking smart endpoints downpipes now let's walk",
    "start": "2146960",
    "end": "2155760"
  },
  {
    "text": "towards the service implementation up to this point smart endpoints dom",
    "start": "2155760",
    "end": "2163040"
  },
  {
    "text": "pipes knowledge of services existed in the endpoints but not in the network",
    "start": "2163040",
    "end": "2169200"
  },
  {
    "text": "well if knowledge about services is scattered throughout endpoints why not bundle that knowledge",
    "start": "2169200",
    "end": "2174960"
  },
  {
    "text": "in the library now when a process wants to send a",
    "start": "2174960",
    "end": "2180160"
  },
  {
    "text": "message it does not do so directly it hands a message to a library first",
    "start": "2180160",
    "end": "2187760"
  },
  {
    "text": "now the knowledge about services is bundled in the library the library near its configuration needs",
    "start": "2187760",
    "end": "2195040"
  },
  {
    "text": "to know to forward the message to either process 2 or process 6 if it intends to provide the service s",
    "start": "2195040",
    "end": "2204319"
  },
  {
    "text": "so in effect the library is the new edge of the network but this network is",
    "start": "2208800",
    "end": "2216400"
  },
  {
    "text": "different this network is not a collection of dump pipes",
    "start": "2216400",
    "end": "2223359"
  },
  {
    "text": "this network is a collection of smart pipes the term smart pipes refers to a network",
    "start": "2224079",
    "end": "2231440"
  },
  {
    "text": "with configurable or programmable service semantics generally speaking about a network",
    "start": "2231440",
    "end": "2238720"
  },
  {
    "text": "that knows about services well now let's run towards the service",
    "start": "2238720",
    "end": "2246720"
  },
  {
    "text": "implementation instead of bundling knowledge about services in a library",
    "start": "2246720",
    "end": "2254079"
  },
  {
    "text": "let's externalize that knowledge and put it in a proxy that executes alongside the processes",
    "start": "2254079",
    "end": "2263520"
  },
  {
    "text": "from here on out everything is equivalent to the previous example",
    "start": "2264560",
    "end": "2271839"
  },
  {
    "text": "so in effect now the proxy is the new edge of the network",
    "start": "2274720",
    "end": "2280880"
  },
  {
    "text": "and again the network is a collection of smart pipes a network with configurable or",
    "start": "2280880",
    "end": "2287200"
  },
  {
    "text": "programmable service semantics and indeed a network that is a",
    "start": "2287200",
    "end": "2294320"
  },
  {
    "text": "collection of smart pipes a network that is configurable and programmable",
    "start": "2294320",
    "end": "2299680"
  },
  {
    "text": "a network that knows about services as first-class citizens",
    "start": "2299680",
    "end": "2304720"
  },
  {
    "text": "is a service mesh but how do you configure or program this",
    "start": "2304720",
    "end": "2311280"
  },
  {
    "start": "2308000",
    "end": "2308000"
  },
  {
    "text": "configurable and programmable network this service mesh and what can it do",
    "start": "2311280",
    "end": "2317359"
  },
  {
    "text": "well the bad news that depends that depends on the implementation",
    "start": "2317359",
    "end": "2322960"
  },
  {
    "text": "but the good news there is indeed a standard that covers the most prominent use cases",
    "start": "2322960",
    "end": "2328400"
  },
  {
    "text": "the service mesh interface the service mesh interface defines how",
    "start": "2328400",
    "end": "2333680"
  },
  {
    "text": "to specify traffic management like for example probabilistic traffic splits how to specify traffic observability",
    "start": "2333680",
    "end": "2341119"
  },
  {
    "text": "like collecting metrics and how to specify a traffic policy who is allowed to talk to whom",
    "start": "2341119",
    "end": "2348240"
  },
  {
    "text": "in effect the service mesh interface defines a smart pipe configuration language",
    "start": "2348720",
    "end": "2357040"
  },
  {
    "text": "and it configures your proxy network accordingly",
    "start": "2357040",
    "end": "2362079"
  },
  {
    "text": "to learn more check out smi spec i o",
    "start": "2362079",
    "end": "2367040"
  },
  {
    "start": "2367000",
    "end": "2367000"
  },
  {
    "text": "so to summarize whether implemented via a library or via",
    "start": "2367200",
    "end": "2373119"
  },
  {
    "text": "a proxy a service mesh is a collection of smart pipes",
    "start": "2373119",
    "end": "2379200"
  },
  {
    "text": "a network with configurable or programmable service semantics a network that knows about services",
    "start": "2379200",
    "end": "2386480"
  },
  {
    "text": "so again we got networks and networks are split into dump pipes",
    "start": "2386480",
    "end": "2393440"
  },
  {
    "text": "and smart pipes and smart pipes may be implemented with proxies or",
    "start": "2393440",
    "end": "2400000"
  },
  {
    "text": "without proxies usually we think of service meshes as smart pipes implemented via proxies",
    "start": "2400000",
    "end": "2408319"
  },
  {
    "text": "but really service meshes are just smart pipes in general",
    "start": "2408319",
    "end": "2414720"
  },
  {
    "text": "they are configurable and programmable networks",
    "start": "2414720",
    "end": "2420240"
  },
  {
    "text": "so in part two we will develop a mental model of linker d",
    "start": "2420640",
    "end": "2427440"
  },
  {
    "text": "but no worries was a long ride only three more slides to go",
    "start": "2427440",
    "end": "2433440"
  },
  {
    "text": "linker d is a proxy based service mesh for kubernetes and the cloud native computing",
    "start": "2434240",
    "end": "2439359"
  },
  {
    "text": "foundation incubation project linker d is split into a control plane",
    "start": "2439359",
    "end": "2445440"
  },
  {
    "text": "and a data plane who interact via the linker dgrpc",
    "start": "2445440",
    "end": "2450839"
  },
  {
    "text": "protocol the control plane corresponds closely to the service to service level",
    "start": "2450839",
    "end": "2458240"
  },
  {
    "text": "the control plane provides a user-facing api that enables the user to configure the",
    "start": "2458240",
    "end": "2464079"
  },
  {
    "text": "network that is to enable the user to tell the network about the available services",
    "start": "2464079",
    "end": "2470400"
  },
  {
    "text": "for example the user may configure probabilistic traffic splits trim outs or retries",
    "start": "2470400",
    "end": "2477839"
  },
  {
    "text": "the data plane corresponds closely to the process to process level the data plane is proxy based proxies",
    "start": "2477839",
    "end": "2485599"
  },
  {
    "text": "execute alongside other containers in a part but proxies do not have to be added",
    "start": "2485599",
    "end": "2490960"
  },
  {
    "text": "manually but they are injected by a mutating admission controller automatically",
    "start": "2490960",
    "end": "2497440"
  },
  {
    "text": "the proxies communicate with the control plane via the grpc protocol",
    "start": "2497440",
    "end": "2505760"
  },
  {
    "text": "they retrieve the service level configuration and translate that configuration to a process level",
    "start": "2505760",
    "end": "2511119"
  },
  {
    "text": "configuration in effect the network of proxies enforce",
    "start": "2511119",
    "end": "2517440"
  },
  {
    "text": "the constraints set by the service level configuration",
    "start": "2517440",
    "end": "2523359"
  },
  {
    "text": "the linker d control plane and therefore the linker dgrpc protocol",
    "start": "2523359",
    "end": "2528560"
  },
  {
    "text": "are split into two main subsystems the destination subsystem and the",
    "start": "2528560",
    "end": "2533680"
  },
  {
    "text": "identity subsystem the destination subsystem of linker d is",
    "start": "2533680",
    "end": "2538960"
  },
  {
    "text": "responsible to determine the correct destination that is the correct part for a message",
    "start": "2538960",
    "end": "2544960"
  },
  {
    "text": "based on the user's service level configuration and the identity subsystem is responsible to",
    "start": "2544960",
    "end": "2551520"
  },
  {
    "text": "determine the correct mtls certificates for the exchange",
    "start": "2551520",
    "end": "2557440"
  },
  {
    "text": "and in addition the linker d control plane uses promethois to collect the wide area of metrics from the link d",
    "start": "2557440",
    "end": "2563440"
  },
  {
    "text": "data plane more specifically from each linked d proxy",
    "start": "2563440",
    "end": "2569280"
  },
  {
    "text": "note now the following statements reflect my own opinion they do not necessarily reflect the",
    "start": "2570560",
    "end": "2575599"
  },
  {
    "text": "opinion of the linker d community buoyant cisco or the cncf i'm also not",
    "start": "2575599",
    "end": "2581119"
  },
  {
    "text": "affiliated with linker d or buoyant beyond cisco being a member of the cncf as well",
    "start": "2581119",
    "end": "2587440"
  },
  {
    "text": "if you are interested in exploring or implementing service meshes i highly recommend have a closer look at",
    "start": "2587440",
    "end": "2593520"
  },
  {
    "text": "linkerd linkert is a concise implementation of a proxy based",
    "start": "2593520",
    "end": "2599040"
  },
  {
    "text": "service mesh on kubernetes each component in the control plane a go application",
    "start": "2599040",
    "end": "2605839"
  },
  {
    "text": "and the data plane the link d proxy a rust application is purpose built for linkade therefore there are no",
    "start": "2605839",
    "end": "2614240"
  },
  {
    "text": "detours there is no concept mapping there is no translation the code for both is straightforward to",
    "start": "2614240",
    "end": "2621040"
  },
  {
    "text": "follow and straightforward to understand as a starting point i recommend to",
    "start": "2621040",
    "end": "2627680"
  },
  {
    "text": "explore the linkad grpc protocol if you study the protocol in itself",
    "start": "2627680",
    "end": "2634079"
  },
  {
    "text": "small and concise you will get an instant idea about the concerns",
    "start": "2634079",
    "end": "2639440"
  },
  {
    "text": "of the control plane the concerns of the data plane and how they interact so if you want to get started",
    "start": "2639440",
    "end": "2646560"
  },
  {
    "text": "on service meshes give link could be a try so for anyone who made it this far",
    "start": "2646560",
    "end": "2652960"
  },
  {
    "text": "thank you very much and now i would like to hand it back and we open up for",
    "start": "2652960",
    "end": "2658079"
  },
  {
    "text": "questions okay thank you very much dominic for a wonderful presentation",
    "start": "2658079",
    "end": "2664720"
  },
  {
    "text": "uh we have a couple of questions here how is the process not scalable in terms of k-8s",
    "start": "2664720",
    "end": "2672560"
  },
  {
    "text": "we scale pods which run processes and when it comes to service it is the",
    "start": "2672560",
    "end": "2678960"
  },
  {
    "text": "thing that exposes to the outer world so we scale processes and not service anywhere",
    "start": "2678960",
    "end": "2686799"
  },
  {
    "text": "so a single process or in this case also a single part",
    "start": "2687760",
    "end": "2693839"
  },
  {
    "text": "and let's assume for the example it only has a single container in itself that process that container",
    "start": "2693839",
    "end": "2701280"
  },
  {
    "text": "that part is not scalable it cannot handle infinite load you need",
    "start": "2701280",
    "end": "2708319"
  },
  {
    "text": "more processes more containers more parts and it's also not reliable just one",
    "start": "2708319",
    "end": "2715440"
  },
  {
    "text": "crash fault in that process that container that part is gone",
    "start": "2715440",
    "end": "2721119"
  },
  {
    "text": "now the it is on the on the service level",
    "start": "2721119",
    "end": "2726160"
  },
  {
    "text": "that makes a set of ports and their interactions scalable and reliable the scalability",
    "start": "2726160",
    "end": "2732400"
  },
  {
    "text": "and reliability is an emergent concept it emerges from a set of parts and their",
    "start": "2732400",
    "end": "2739200"
  },
  {
    "text": "interactions and coordination but not from an individual one if you have let's take an example one",
    "start": "2739200",
    "end": "2745680"
  },
  {
    "text": "individual python process running on one machine you cannot scale that beyond a certain",
    "start": "2745680",
    "end": "2752400"
  },
  {
    "text": "limit and it cannot withstand a single failure one crash fault in the process is gone",
    "start": "2752400",
    "end": "2757520"
  },
  {
    "text": "however if you apply redundancy if you have more processes that all aggregate into a service",
    "start": "2757520",
    "end": "2765119"
  },
  {
    "text": "then you have scalability and reliability okay how do libraries make smart",
    "start": "2765119",
    "end": "2774240"
  },
  {
    "text": "pipes wouldn't it overload one particular process and not balance the messages",
    "start": "2774240",
    "end": "2781440"
  },
  {
    "text": "i'm sorry can you repeat that",
    "start": "2781599",
    "end": "2784880"
  },
  {
    "text": "how do libraries make smart pipes won't it overload one particular process",
    "start": "2787040",
    "end": "2792319"
  },
  {
    "text": "and not balance the messages so libraries make smart",
    "start": "2792319",
    "end": "2798800"
  },
  {
    "text": "pipes only in effect because your new inbox and outbox so to say is from the",
    "start": "2798800",
    "end": "2806000"
  },
  {
    "text": "from the rest of your process that houses this library the new inbox in outbox conceptually now",
    "start": "2806000",
    "end": "2812160"
  },
  {
    "text": "is not with the network anymore conceptually it is with that library",
    "start": "2812160",
    "end": "2817760"
  },
  {
    "text": "so you could argue the very same local viewpoint that the rest of the process",
    "start": "2817760",
    "end": "2822880"
  },
  {
    "text": "now cannot look beyond the library so the library is is the new edge of the network and",
    "start": "2822880",
    "end": "2830319"
  },
  {
    "text": "the library itself reading from configuration or most likely being connected to a",
    "start": "2830319",
    "end": "2837920"
  },
  {
    "text": "control plane gets its information about the services so one of the first",
    "start": "2837920",
    "end": "2844319"
  },
  {
    "text": "libraries and i think a precursor to linkedin one if i'm not mistaken is finagle",
    "start": "2844319",
    "end": "2850319"
  },
  {
    "text": "so finagle defined an entire network stack that had load balancing but also other concerns",
    "start": "2850319",
    "end": "2856319"
  },
  {
    "text": "like timeouts and retries all bundled up and to the rest of your application it looked like the network",
    "start": "2856319",
    "end": "2863839"
  },
  {
    "text": "and if i'm not mistaken also google with the recent release of traffic manager has",
    "start": "2863839",
    "end": "2870960"
  },
  {
    "text": "a scenario running where the control plane actually configures grpc directly so it configures a library",
    "start": "2870960",
    "end": "2879200"
  },
  {
    "text": "instead of a set of proxies okay is it a correct statement",
    "start": "2879200",
    "end": "2886960"
  },
  {
    "text": "that service mesh is a highly abstracted implementation of the legacy remote",
    "start": "2886960",
    "end": "2892800"
  },
  {
    "text": "procedure calls",
    "start": "2892800",
    "end": "2895920"
  },
  {
    "text": "rpc",
    "start": "2898839",
    "end": "2901839"
  },
  {
    "text": "i would tend to say yes i did not think that through in general please my email is on the",
    "start": "2906960",
    "end": "2914079"
  },
  {
    "text": "screen do not hesitate to reach out to me if you want to discuss anything but i have to pass on this on this question",
    "start": "2914079",
    "end": "2920880"
  },
  {
    "text": "gut feeling yes but please do not quote me on it okay unlimited to linkard",
    "start": "2920880",
    "end": "2929359"
  },
  {
    "text": "how are the steps to learn beginning from a simple api to service mesh in terms of fundamentals concepts",
    "start": "2929359",
    "end": "2937520"
  },
  {
    "text": "so uh my journey started with kubernetes services",
    "start": "2938160",
    "end": "2945599"
  },
  {
    "text": "so i would recommend that you check out kubernetes services",
    "start": "2945599",
    "end": "2951040"
  },
  {
    "text": "and understand or or try to internalize build a mental",
    "start": "2951040",
    "end": "2957359"
  },
  {
    "text": "model of how kubernetes services work and what they are and i strongly recommend uh try to apply",
    "start": "2957359",
    "end": "2965440"
  },
  {
    "text": "the viewpoint where you have two different two different hierarchical levels a",
    "start": "2965440",
    "end": "2971599"
  },
  {
    "text": "service to service communication and a process to process communication and see how kubernetes itself",
    "start": "2971599",
    "end": "2978000"
  },
  {
    "text": "orchestrates the the ports into services",
    "start": "2978000",
    "end": "2984079"
  },
  {
    "text": "and from there on then it is actually a a small step into the world of service",
    "start": "2984079",
    "end": "2991359"
  },
  {
    "text": "meshes because you can argue that the kubernetes implementation is a non-configurable non-programmable",
    "start": "2991359",
    "end": "2999040"
  },
  {
    "text": "service mesh implementation so if you now add configurability and programmability you are actually again",
    "start": "2999040",
    "end": "3005359"
  },
  {
    "text": "in service mesh land so start with kubernetes services and then",
    "start": "3005359",
    "end": "3011119"
  },
  {
    "text": "make the leap into service meshes and as i said if you want to if you want",
    "start": "3011119",
    "end": "3016559"
  },
  {
    "text": "to dig into the code a little bit i recommend link id as the individual components of purpose built",
    "start": "3016559",
    "end": "3023280"
  },
  {
    "text": "so they communicate clearly their purpose and their their intent in terms of",
    "start": "3023280",
    "end": "3031599"
  },
  {
    "text": "observable observability and telemetry what elements does service mesh support oh",
    "start": "3031599",
    "end": "3040240"
  },
  {
    "text": "that depends on the individual implementation of the service measures but uh general they implement the the",
    "start": "3040240",
    "end": "3047119"
  },
  {
    "text": "golden metrics so anything that happens on a on a request level you are pretty well",
    "start": "3047119",
    "end": "3053359"
  },
  {
    "text": "covered but um i would recommend if you want to know about the the",
    "start": "3053359",
    "end": "3059599"
  },
  {
    "text": "observability that you actually check out the observability capabilities of the",
    "start": "3059599",
    "end": "3064800"
  },
  {
    "text": "individual meshes",
    "start": "3064800",
    "end": "3069839"
  },
  {
    "text": "i'm sorry either me or you just cut out there um it doesn't provide",
    "start": "3080800",
    "end": "3088480"
  },
  {
    "text": "abstractions such as object requests",
    "start": "3088480",
    "end": "3093119"
  },
  {
    "text": "brokering no okay",
    "start": "3094839",
    "end": "3101280"
  },
  {
    "text": "well that is also that's actually also tricky question if you want to discuss that further um as i said please do do reach out",
    "start": "3101280",
    "end": "3109200"
  },
  {
    "text": "actually i'm sorry let me revisit that answer so um the service meshes that are most popular and that we also",
    "start": "3109680",
    "end": "3116800"
  },
  {
    "text": "implicitly discussed here are service meshes that are all about http requests",
    "start": "3116800",
    "end": "3123040"
  },
  {
    "text": "but you can imagine service meshes with any other l7 any other application",
    "start": "3123040",
    "end": "3130160"
  },
  {
    "text": "level protocol so on that from that point of view you could argue that v-tess",
    "start": "3130160",
    "end": "3135599"
  },
  {
    "text": "is actually a service mesh that is able to speak the mysql protocol",
    "start": "3135599",
    "end": "3143040"
  },
  {
    "text": "and apply constraints on the communication between service consumers and multiple",
    "start": "3143040",
    "end": "3149760"
  },
  {
    "text": "service providers so any l7 protocol is potentially service measurable",
    "start": "3149760",
    "end": "3157280"
  },
  {
    "text": "but classically you you think at least of today you think of service",
    "start": "3157280",
    "end": "3162400"
  },
  {
    "text": "meshes as http based so i would i would still say no but potentially yes",
    "start": "3162400",
    "end": "3170400"
  },
  {
    "text": "as an architect if i were to convince my client to use linker d versus piggy how should i go about it",
    "start": "3171680",
    "end": "3180559"
  },
  {
    "text": "i'm sorry linker t versus what uh apigee",
    "start": "3180559",
    "end": "3186319"
  },
  {
    "text": "um actually i do not know i i'm sorry i cannot i cannot answer that",
    "start": "3187040",
    "end": "3192839"
  },
  {
    "text": "question can you tell us what the main",
    "start": "3192839",
    "end": "3197920"
  },
  {
    "text": "differences are between isoteo and link or d",
    "start": "3197920",
    "end": "3203599"
  },
  {
    "text": "um also that i i rather not",
    "start": "3204000",
    "end": "3209839"
  },
  {
    "text": "this is all i'm sorry for for interrupting this would this would be this would be evading very much in the",
    "start": "3210559",
    "end": "3216800"
  },
  {
    "text": "into the territory of my own opinion so i'd rather stay away from that",
    "start": "3216800",
    "end": "3223680"
  },
  {
    "text": "where did the virtual load balancing where did the virtual load balancing take place in link or d",
    "start": "3223680",
    "end": "3229920"
  },
  {
    "text": "is it in a data plane itself or on the control plane",
    "start": "3229920",
    "end": "3236640"
  },
  {
    "text": "well um that that depends on your uh point of view so of course it has to",
    "start": "3236640",
    "end": "3243839"
  },
  {
    "text": "happen on uh the data plane because it is uh it is the actual um routing of messages",
    "start": "3243839",
    "end": "3250880"
  },
  {
    "text": "in the sense of determining the the receiving end point",
    "start": "3250880",
    "end": "3255920"
  },
  {
    "text": "for for a message but of course the control plane is involved in that",
    "start": "3255920",
    "end": "3263119"
  },
  {
    "text": "so the it is it is information from the control plane that allows the",
    "start": "3263119",
    "end": "3268800"
  },
  {
    "text": "proxy to examine a message to determine",
    "start": "3268800",
    "end": "3273839"
  },
  {
    "text": "what service that message is intended for and then to determine what endpoint it may choose in order to",
    "start": "3273839",
    "end": "3282400"
  },
  {
    "text": "fulfill this service so i would always recommend",
    "start": "3282400",
    "end": "3288559"
  },
  {
    "text": "to not apply the analytical reduction or overly apply the analytical reduction",
    "start": "3288559",
    "end": "3295280"
  },
  {
    "text": "the divide and conquer try to see the interaction between the",
    "start": "3295280",
    "end": "3301599"
  },
  {
    "text": "control plane and the data plane and then you will see that [Music] most most questions have an answer that",
    "start": "3301599",
    "end": "3309839"
  },
  {
    "text": "lives both in the control plane and the data plane",
    "start": "3309839",
    "end": "3314319"
  },
  {
    "text": "okay well thank you very much dominic for your time that's all the time we have for today",
    "start": "3316559",
    "end": "3322160"
  },
  {
    "text": "as i said before today's presentation and slides will be available later today on the cncf website",
    "start": "3322160",
    "end": "3327280"
  },
  {
    "text": "thank you again for your time dominic and everyone have a wonderful rest of your day thank you for having me",
    "start": "3327280",
    "end": "3335838"
  }
]