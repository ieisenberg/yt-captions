[
  {
    "text": "hello everyone and welcome to the S instrumentation uh introduction and deep dive session um I'm today with Rich with",
    "start": "40",
    "end": "8280"
  },
  {
    "text": "over there with David and with Han um we are all uh part of SE",
    "start": "8280",
    "end": "14440"
  },
  {
    "text": "instrumentation um and today we will you will learn what is s instrumentation",
    "start": "14440",
    "end": "20960"
  },
  {
    "text": "also you will learn about the three big signals observ signals that we are responsible for in kubernetes and the",
    "start": "20960",
    "end": "27320"
  },
  {
    "text": "ecosystem uh we also talk about our future PL uh the sub project that uh we developed",
    "start": "27320",
    "end": "33960"
  },
  {
    "text": "on a continuous basis uh and we will also tell you how to contribute and where you can find a substream um so our",
    "start": "33960",
    "end": "41399"
  },
  {
    "text": "Charter so what we stand by as a group is to cover the best practices for cluster observability across all the the",
    "start": "41399",
    "end": "47239"
  },
  {
    "text": "kubernetes component and develop any component that would be relevant to solve that",
    "start": "47239",
    "end": "52480"
  },
  {
    "text": "problem uh to do that we have sub projects um there are a few named on the slides metric kog metric data those are",
    "start": "52480",
    "end": "59640"
  },
  {
    "text": "the most most famous one and the most used ones um and we are also responsible for uh dup ability",
    "start": "59640",
    "end": "66000"
  },
  {
    "text": "signals um how do we do that today we have uh some Tri session where we go",
    "start": "66000",
    "end": "71280"
  },
  {
    "text": "through all um the issues and pull requests that are lab for our SE uh in",
    "start": "71280",
    "end": "77280"
  },
  {
    "text": "um the upam community we review the code changes for the metric to make sure that they're align with our best practices",
    "start": "77280",
    "end": "83560"
  },
  {
    "text": "and we develop new features and announcement to improve that whole ecosystem uh and I would let and",
    "start": "83560",
    "end": "90520"
  },
  {
    "text": "introduce what we do for the logs hey everyone I'm Han um yeah I'm",
    "start": "90520",
    "end": "95840"
  },
  {
    "text": "going to be talking a little bit about logs today uh in kubernetes so in kubernetes we use this",
    "start": "95840",
    "end": "101920"
  },
  {
    "text": "Library called kog it's short for kubernetes logger it is uh actually forked from a different Library called",
    "start": "101920",
    "end": "108520"
  },
  {
    "text": "glog which is short for Google logger and klog is specifically patched so that",
    "start": "108520",
    "end": "115759"
  },
  {
    "text": "it understands kubernetes objects specifically um you can pass an object graft and it will",
    "start": "115759",
    "end": "122560"
  },
  {
    "text": "automatically uh break apart the object graph into uh constituent",
    "start": "122560",
    "end": "128720"
  },
  {
    "text": "strings uh this library conforms to the logger interface which is a library created by Tim Hawkin um it basically",
    "start": "128720",
    "end": "137160"
  },
  {
    "text": "allows you to inject uh different logging implementations and it has uh a",
    "start": "137160",
    "end": "143160"
  },
  {
    "text": "logging interface the logs in kubernetes uh defaults to text based logging um though",
    "start": "143160",
    "end": "150360"
  },
  {
    "text": "you can output logs in Json format so one of the big efforts that we",
    "start": "150360",
    "end": "157040"
  },
  {
    "text": "have in kubernetes is structured logging um if you've ever parsed logs in",
    "start": "157040",
    "end": "163840"
  },
  {
    "text": "kubernetes uh you're generally going to be grepping maybe for an error string or",
    "start": "163840",
    "end": "169080"
  },
  {
    "text": "whatnot um structured logging actually helps because it structures the data",
    "start": "169080",
    "end": "174720"
  },
  {
    "text": "that you're passing into the logs so that you can more easily parse uh the things that you're looking for",
    "start": "174720",
    "end": "181159"
  },
  {
    "text": "and not only does structured logging allow you to uh grap a little bit more",
    "start": "181159",
    "end": "186239"
  },
  {
    "text": "intelligently but structured logs allow you even to parse these logs and put them into structured database tables or",
    "start": "186239",
    "end": "193799"
  },
  {
    "text": "whatnot and uh some of our log injection is simplified through um an optional",
    "start": "193799",
    "end": "200720"
  },
  {
    "text": "Json format so when we embarked on this effort we also started realizing that it",
    "start": "200720",
    "end": "207159"
  },
  {
    "text": "was not sufficient just to Output stuff INR Ed format uh it turns out it's not",
    "start": "207159",
    "end": "213120"
  },
  {
    "text": "super practical to pass pod information or node information everywhere in the",
    "start": "213120",
    "end": "218840"
  },
  {
    "text": "kubernetes code base um as you can see this is actually",
    "start": "218840",
    "end": "224159"
  },
  {
    "text": "what the structured logs look",
    "start": "224159",
    "end": "227519"
  },
  {
    "text": "like so in order to make structured logs a little bit easier to use in kubernetes",
    "start": "231400",
    "end": "236640"
  },
  {
    "text": "codebase uh we embarked on this effort called contextual logging which um allows you to pass uh to derive",
    "start": "236640",
    "end": "244000"
  },
  {
    "text": "key value pairs from the context that way you don't actually have to pass pods and nodes into deeply nested methods uh",
    "start": "244000",
    "end": "252360"
  },
  {
    "text": "interspersed throughout kubernetes uh this makes logging considerably simpler for kubernetes",
    "start": "252360",
    "end": "259079"
  },
  {
    "text": "developers and uh yeah you can make very consistent the the information that",
    "start": "259079",
    "end": "265360"
  },
  {
    "text": "you're logging um this greatly simplifies the method signatures in the kubernetes",
    "start": "265360",
    "end": "271720"
  },
  {
    "text": "codebase again you don't have to pass like pod name and node name everywhere in the codebase and instead you just",
    "start": "271720",
    "end": "278960"
  },
  {
    "text": "pass the context which is supposed to be goang best practice anyway",
    "start": "278960",
    "end": "286680"
  },
  {
    "text": "um if you want to contribute to our logging efforts um you can join our",
    "start": "288000",
    "end": "293080"
  },
  {
    "text": "working group uh Patrick is the one leading our structured logging efforts",
    "start": "293080",
    "end": "298440"
  },
  {
    "text": "and contextual logging efforts and we have a dedicated select channnel for this and uh yeah we could definitely use",
    "start": "298440",
    "end": "304720"
  },
  {
    "text": "your help if you're interested in participating uh next we have",
    "start": "304720",
    "end": "310680"
  },
  {
    "text": "metrics thank you Han hi everyone I'm Richa going to be talking about metrics in",
    "start": "310680",
    "end": "316360"
  },
  {
    "text": "communities um metrics in communities codebase are instrumented using the Prometheus client libraries and are",
    "start": "316360",
    "end": "322840"
  },
  {
    "text": "exposed by HTTP on a/ metrics end point so any monitoring system that",
    "start": "322840",
    "end": "328600"
  },
  {
    "text": "understands the Prometheus metric format can scrap uh scrape these metrics from these endpoints uh which are exposed by",
    "start": "328600",
    "end": "336000"
  },
  {
    "text": "all the core uh kuties components um and uh establish monitoring on top of these",
    "start": "336000",
    "end": "342919"
  },
  {
    "text": "metrics uh in the forms of dashboards and alerts this is one uh lesson that we try",
    "start": "342919",
    "end": "349960"
  },
  {
    "text": "to uh reinforce every year is that uh One does not simply rename metrics and",
    "start": "349960",
    "end": "357280"
  },
  {
    "text": "this is actually a realization that we have a interesting backstory with uh the",
    "start": "357280",
    "end": "362919"
  },
  {
    "text": "interesting backstory being that years ago we had a metrics overhaul uh project",
    "start": "362919",
    "end": "369479"
  },
  {
    "text": "that was happening where we were trying to bring the existing uh communities metrics at that time follow the",
    "start": "369479",
    "end": "376000"
  },
  {
    "text": "Prometheus uh standard and in that process we ended up renaming a bunch of",
    "start": "376000",
    "end": "382240"
  },
  {
    "text": "metrics uh that existed and when you rename a metric you're basically replacing the old metric so",
    "start": "382240",
    "end": "389280"
  },
  {
    "text": "that's ceases to exist and you're creating a new one in its place so what that ends up doing is that whoever was",
    "start": "389280",
    "end": "395199"
  },
  {
    "text": "depending on the original metric for their law for their uh dashboards and alerts all those alerts and dashboards",
    "start": "395199",
    "end": "401080"
  },
  {
    "text": "stop working because the original metric is gone now so essentially with this",
    "start": "401080",
    "end": "406280"
  },
  {
    "text": "metrics overhaul project what we ended up doing was breaking monitoring for a ton of users who were depending on the",
    "start": "406280",
    "end": "411759"
  },
  {
    "text": "original metrics so this leaded to uh",
    "start": "411759",
    "end": "417639"
  },
  {
    "text": "establishing a metrics framework work uh that Sig instrumentation came up with which provided a framework to express U",
    "start": "417639",
    "end": "425960"
  },
  {
    "text": "metric stability guarantees uh this allowed us to have",
    "start": "425960",
    "end": "431319"
  },
  {
    "text": "some automation around uh metric so that developers were trying to contribute to the community's metrics they did not end",
    "start": "431319",
    "end": "438240"
  },
  {
    "text": "up introducing breaking changes uh to metrics that could you know cause",
    "start": "438240",
    "end": "443639"
  },
  {
    "text": "monitoring breakages for users uh we also had uh mean uh",
    "start": "443639",
    "end": "449800"
  },
  {
    "text": "communities metrics framework gave us a mechanism to centralize instrumentation related code changes uh gave us a place",
    "start": "449800",
    "end": "455680"
  },
  {
    "text": "to put all of the instrumentation stuff in and there's a link here uh that you can visit to know more about the",
    "start": "455680",
    "end": "461800"
  },
  {
    "text": "communities metrics framework so stability for these metrics are expressed in the form of certain",
    "start": "461800",
    "end": "468720"
  },
  {
    "text": "levels uh we have as you can see here uh the stable level beta level uh Alpha and",
    "start": "468720",
    "end": "475840"
  },
  {
    "text": "internal levels stable level is the one one that has the most stability",
    "start": "475840",
    "end": "481319"
  },
  {
    "text": "guarantees uh you cannot just deprecate a stable level or stable metric any time",
    "start": "481319",
    "end": "486800"
  },
  {
    "text": "uh nor can you change its labels arbitrarily beta has certain relaxed uh",
    "start": "486800",
    "end": "492479"
  },
  {
    "text": "stability guarantees as shown here Alpha metrics are the ones that are just",
    "start": "492479",
    "end": "497520"
  },
  {
    "text": "starting out absolutely have no guarantees and for internal metrics they are more tightly coupled with the code",
    "start": "497520",
    "end": "504319"
  },
  {
    "text": "uh also do not have any stability guarantees and uh they're likely to change structure as the community code",
    "start": "504319",
    "end": "510639"
  },
  {
    "text": "base evolves so uh we do not generally recommend people to scrape these metrics",
    "start": "510639",
    "end": "515919"
  },
  {
    "text": "and you know establish monitoring on top of these to know more about the stability levels we have this link here",
    "start": "515919",
    "end": "522440"
  },
  {
    "text": "and to know more about the process of deprecating a metric there's the second link",
    "start": "522440",
    "end": "527880"
  },
  {
    "text": "mentioned uh we also have very nicely automated uh generated documentation for",
    "start": "527880",
    "end": "533680"
  },
  {
    "text": "all the metrics that exist in communities uh we have done this through a very elaborate static analysis",
    "start": "533680",
    "end": "539600"
  },
  {
    "text": "pipeline uh which passes through the entire Community code base it finds out all the places where metrics are",
    "start": "539600",
    "end": "545320"
  },
  {
    "text": "instrumented and then it generates this nicely formatted document uh listing all",
    "start": "545320",
    "end": "550519"
  },
  {
    "text": "the available metrics for you to use uh especially handy when you're trying to debug any issue in your kuties cluster",
    "start": "550519",
    "end": "557160"
  },
  {
    "text": "and you want to find out what are the signals that you can look at what are the metrics that you can try to see uh",
    "start": "557160",
    "end": "562440"
  },
  {
    "text": "to identify the cause of the issue uh we also have metametrics so we",
    "start": "562440",
    "end": "567920"
  },
  {
    "text": "have metrics about the metrics that exist kuties um things like the total",
    "start": "567920",
    "end": "573399"
  },
  {
    "text": "number of metrics that are stable uh or beta or Alpha we have a total number of",
    "start": "573399",
    "end": "579720"
  },
  {
    "text": "metrics that are disabled or hidden uh we have feature enable metrics",
    "start": "579720",
    "end": "587959"
  },
  {
    "text": "another handy metric that you can use if you want to quickly find out which communities feature is enabled in your",
    "start": "587959",
    "end": "594440"
  },
  {
    "text": "uh cluster at a given point in time uh you can just look at this metric which shows you the name of the feature its",
    "start": "594440",
    "end": "600560"
  },
  {
    "text": "stage and whether it's enabled or disabled in your cluster which I think is pretty",
    "start": "600560",
    "end": "607399"
  },
  {
    "text": "useful next we have a component Health sis I think this is the uh most recently",
    "start": "607399",
    "end": "613000"
  },
  {
    "text": "added um metrics for our uh control plane components um each core kuties",
    "start": "613000",
    "end": "619160"
  },
  {
    "text": "component exposes these metrics in a/ metrics SL SLI endpoint where we expose",
    "start": "619160",
    "end": "626200"
  },
  {
    "text": "the health of the kubernetes uh components uh in a metric format these health",
    "start": "626200",
    "end": "633440"
  },
  {
    "text": "checks are done uh whenever you hit the metric SLI endpoint uh and it basically",
    "start": "633440",
    "end": "640480"
  },
  {
    "text": "gives you uh the Liv Z and the Readiness health check data in a nicely formatted metric uh",
    "start": "640480",
    "end": "646639"
  },
  {
    "text": "format uh it exposes two metrics here one is the community's health check metric that's showing you the last",
    "start": "646639",
    "end": "652720"
  },
  {
    "text": "health check that was done for a particular component on the which for which you have hit the the",
    "start": "652720",
    "end": "660000"
  },
  {
    "text": "metric SLI end point showing you the health check that was performed and uh the value for the last health check that",
    "start": "660000",
    "end": "666200"
  },
  {
    "text": "was done and the other metric that is exposed here is the cumulative result of",
    "start": "666200",
    "end": "671279"
  },
  {
    "text": "all the health checks that were done for this component so far uh these metrics are meant to be",
    "start": "671279",
    "end": "678440"
  },
  {
    "text": "scraped at a high frequency because especially you can see these are very low cardinality metrics uh so you don't",
    "start": "678440",
    "end": "685600"
  },
  {
    "text": "suffer uh if you just scrape them at a very high frequency and and uh they help",
    "start": "685600",
    "end": "691160"
  },
  {
    "text": "you calculate slos and availability stats for uh for your components because",
    "start": "691160",
    "end": "696839"
  },
  {
    "text": "they're doing these health checks and uh giving you more information about how your control pin components are",
    "start": "696839",
    "end": "703600"
  },
  {
    "text": "doing uh next uh is a very uh exciting announcement that we have uh as one of",
    "start": "703600",
    "end": "709839"
  },
  {
    "text": "the rec most recent efforts from Sig instrumentation is that we are introducing uh another tool for users to",
    "start": "709839",
    "end": "716639"
  },
  {
    "text": "use uh to debug their communities clust clusters in the form of uh some new",
    "start": "716639",
    "end": "722279"
  },
  {
    "text": "endpoints that we are exposing again exposed by all communities control plane components uh just merged in 132 uh",
    "start": "722279",
    "end": "729480"
  },
  {
    "text": "right now is only supported in API server uh what we have done is we are exposing two new endpoints uh the status",
    "start": "729480",
    "end": "736920"
  },
  {
    "text": "Z endpoint and the flag Z endpoint for API server right now which is going to be supported for other components too",
    "start": "736920",
    "end": "742920"
  },
  {
    "text": "soon uh the stat asy endpoint like you can see here is showing you real time information about uh when when your API",
    "start": "742920",
    "end": "750279"
  },
  {
    "text": "server or the component was started uh what version Go version It's using what binary version it is at and what is the",
    "start": "750279",
    "end": "756680"
  },
  {
    "text": "emation version that it is at uh flag z uh another I think very useful endpoint",
    "start": "756680",
    "end": "762839"
  },
  {
    "text": "that you can hit to find out uh all the flags that you had started your component binary with so whenever you're",
    "start": "762839",
    "end": "770399"
  },
  {
    "text": "trying to debug uh you know any issue in your cluster and you want to quickly know like what was the value of the flag that you had passed at the time of",
    "start": "770399",
    "end": "776160"
  },
  {
    "text": "starting your component uh this will tell you exactly that uh I think that was all about metrics",
    "start": "776160",
    "end": "782160"
  },
  {
    "text": "and we have David for traces thanks Rich okay um so traces is",
    "start": "782160",
    "end": "787720"
  },
  {
    "text": "the most recent signal we've added to kubernetes I think we first added it maybe back in 2019 for those of you who aren't",
    "start": "787720",
    "end": "794800"
  },
  {
    "text": "familiar distributed tracing um for a single request tracks what",
    "start": "794800",
    "end": "801959"
  },
  {
    "text": "happens for that request as it passes through all the components or",
    "start": "801959",
    "end": "807320"
  },
  {
    "text": "microservices that you're running so so in this picture here a request passes from the front end to the back end and",
    "start": "807320",
    "end": "813560"
  },
  {
    "text": "back and what you'll end up seeing in a trace is this nice uh Tree View where",
    "start": "813560",
    "end": "819440"
  },
  {
    "text": "you can see how much time was spent uh in each particular component it's very nice for debugging problems you aren't",
    "start": "819440",
    "end": "826360"
  },
  {
    "text": "familiar with or getting a highle picture of what's happening in the system even if you don't have a ton of",
    "start": "826360",
    "end": "832240"
  },
  {
    "text": "knowledge about exactly uh how the system is designed so in kubernetes we have a",
    "start": "832240",
    "end": "839160"
  },
  {
    "text": "couple pieces of kubernetes that look kind of like this one is um the API",
    "start": "839160",
    "end": "845120"
  },
  {
    "text": "server and etcd and it's actually very helpful to be able to use tracing to debug issues where um something happens",
    "start": "845120",
    "end": "852399"
  },
  {
    "text": "in the API server and maybe it's slow because of uh whatever etcd is doing right and normally those might be",
    "start": "852399",
    "end": "858560"
  },
  {
    "text": "difficult to correlate because etcd has its own notion of IDs that it uses in",
    "start": "858560",
    "end": "864480"
  },
  {
    "text": "its logs and metrics whereas the API server if you look at its metrics are going to be mostly about objects and",
    "start": "864480",
    "end": "870160"
  },
  {
    "text": "name spaces and such so this is a great way to tie together different components",
    "start": "870160",
    "end": "875480"
  },
  {
    "text": "um to get a view of what's happening for a single request and get very detailed debug",
    "start": "875480",
    "end": "881880"
  },
  {
    "text": "information so what have we done so far so as I said we've um instrumented the",
    "start": "881880",
    "end": "887680"
  },
  {
    "text": "API server and etcd um and we've also instrumented the cuet and some of the",
    "start": "887680",
    "end": "893480"
  },
  {
    "text": "container run times so um those are the two places today where you can enable tracing and get those Trace views to",
    "start": "893480",
    "end": "900880"
  },
  {
    "text": "figure out what's happening um we've been getting a lot of feedback which I very much appreciate um and have made a",
    "start": "900880",
    "end": "907120"
  },
  {
    "text": "bunch of fixes over the past year or two um will likely stabilize in the next",
    "start": "907120",
    "end": "912199"
  },
  {
    "text": "release or two um whenever I guess we feel like",
    "start": "912199",
    "end": "918399"
  },
  {
    "text": "it um just for some fun examples this is what a trace would look like for the API",
    "start": "918399",
    "end": "925120"
  },
  {
    "text": "server and ETD this is displayed using Jagger which is one of the open source",
    "start": "925120",
    "end": "930199"
  },
  {
    "text": "uh front ends for Trace data and as you can see um you can see on the left hand",
    "start": "930199",
    "end": "935959"
  },
  {
    "text": "side the breakdown of which component is involved so you can see the API servers is doing a bunch of stuff and then you",
    "start": "935959",
    "end": "942199"
  },
  {
    "text": "can see ETD in the list handling the request um and the API server then doing",
    "start": "942199",
    "end": "947399"
  },
  {
    "text": "some additional things um and it's nice to be able to drill into uh exactly if you were to click on some of",
    "start": "947399",
    "end": "954000"
  },
  {
    "text": "these you would get very detailed attributes about this particular request which makes it a great way to get uh to",
    "start": "954000",
    "end": "961160"
  },
  {
    "text": "root cause say problems that might have happened with this request and the cuid is a similar story",
    "start": "961160",
    "end": "967759"
  },
  {
    "text": "except it actually does a lot more talking to the container runtime when it spins up a pod you can see here um the",
    "start": "967759",
    "end": "975720"
  },
  {
    "text": "time taken is mostly dominated by pulling images which is not a surprise and also spinning up the the like",
    "start": "975720",
    "end": "982319"
  },
  {
    "text": "network name space and such so kind of very cool to see helps you understand actually if you're not that familiar",
    "start": "982319",
    "end": "988319"
  },
  {
    "text": "with the Cub but what's going on um and also very useful for debugging the kind of really tricky difficult problems with",
    "start": "988319",
    "end": "994680"
  },
  {
    "text": "pod startup or other things so now that we've got traces and",
    "start": "994680",
    "end": "1000839"
  },
  {
    "text": "metrics and logs let's talk about signal correlation and why that's important and what we're doing about",
    "start": "1000839",
    "end": "1006600"
  },
  {
    "text": "it so I say current but this is sort of the way that at least when I was",
    "start": "1006600",
    "end": "1012680"
  },
  {
    "text": "participating in Sig node we would go and debug problems so mostly we would see a metric that we weren't happy with",
    "start": "1012680",
    "end": "1020279"
  },
  {
    "text": "right long latencies for some operation or a high number of failures and we'd",
    "start": "1020279",
    "end": "1025798"
  },
  {
    "text": "say okay let's go debug the issue I'd go look at the cuet logs and either search",
    "start": "1025799",
    "end": "1031839"
  },
  {
    "text": "the time period that I thought something was happening in for something that looked unusual maybe look at errors and try and see what correlated with the",
    "start": "1031839",
    "end": "1038918"
  },
  {
    "text": "thing that I was measuring with my metric if I found something that I would you know GP for a pod name but sometimes",
    "start": "1038919",
    "end": "1046079"
  },
  {
    "text": "logs use pod uid instead so this was pretty error prone and took me a lot of time um back when I was doing those",
    "start": "1046079",
    "end": "1053200"
  },
  {
    "text": "sorts of things um and with the introduction of tracing it's kind of its own thing like maybe you get lucky and",
    "start": "1053200",
    "end": "1060400"
  },
  {
    "text": "there's a trace that shows exactly your problem but maybe not when in which case it's um kind of a niche use case",
    "start": "1060400",
    "end": "1069000"
  },
  {
    "text": "tool the way that traces and metrics and logs should be used together is that you",
    "start": "1069000",
    "end": "1074720"
  },
  {
    "text": "should be able to start with your metrics get an alert or notice that something's not right uh use exemplars which are a sample of a",
    "start": "1074720",
    "end": "1084679"
  },
  {
    "text": "trace that occurred during um a particular measurement of a metric so for example um in the chart here if the",
    "start": "1084679",
    "end": "1092880"
  },
  {
    "text": "Exemplar was up really high that means that it's an example of something that happened in one of the higher buckets in",
    "start": "1092880",
    "end": "1098600"
  },
  {
    "text": "a histogram right so it's a good way to find an example of something that you're",
    "start": "1098600",
    "end": "1103760"
  },
  {
    "text": "seeing in your graph and most Trace uis will let you navigate using exemp is",
    "start": "1103760",
    "end": "1109200"
  },
  {
    "text": "from your metric graph to that particular Trace which is really powerful and at that point you've got a",
    "start": "1109200",
    "end": "1115200"
  },
  {
    "text": "very detailed view of um exactly what the flow was you get the context as well",
    "start": "1115200",
    "end": "1121039"
  },
  {
    "text": "like you know what was going on when this thing was slow were they trying to start a pod or was this a pod crash",
    "start": "1121039",
    "end": "1127799"
  },
  {
    "text": "looping right those pieces of information are very useful and then finally you know you can actually go",
    "start": "1127799",
    "end": "1134200"
  },
  {
    "text": "look at the logs that have Trace ID and span ID or or that are like part of the",
    "start": "1134200",
    "end": "1139960"
  },
  {
    "text": "trace to get exactly what the steps were that might have contributed to something going wrong maybe you get the detailed",
    "start": "1139960",
    "end": "1146000"
  },
  {
    "text": "error messages or something like that so that's where we want to get to um this release we've added exemplars",
    "start": "1146000",
    "end": "1154039"
  },
  {
    "text": "to the API server metrics um so those should be assuming you're using the open",
    "start": "1154039",
    "end": "1159400"
  },
  {
    "text": "metrics format those should be um usable and we're working on adding span",
    "start": "1159400",
    "end": "1165120"
  },
  {
    "text": "CeX to structured logs in the next release or so so look forward to",
    "start": "1165120",
    "end": "1172559"
  },
  {
    "text": "those and now to Daman for sub projects so as I mentioned in the",
    "start": "1172679",
    "end": "1177799"
  },
  {
    "text": "introduction um there are some signal that we can Implement at the kubernetes level which is what um they've been",
    "start": "1177799",
    "end": "1184400"
  },
  {
    "text": "presenting so far but we also have seen some gaps that cannot be covered at the kubernetes level and we need to develop",
    "start": "1184400",
    "end": "1190799"
  },
  {
    "text": "some new components for that um I will go through four of the major one and",
    "start": "1190799",
    "end": "1197000"
  },
  {
    "text": "usage metrix collector is the new wor addition that we've had as part of our Sig um metric Ser even if you don't know",
    "start": "1197000",
    "end": "1205320"
  },
  {
    "text": "it's very likely that you have it running uh in your cluster uh it solved the Gap that initially in kubernetes",
    "start": "1205320",
    "end": "1211880"
  },
  {
    "text": "like there was no way to easily tell what was the resource usage of your application of your node uh in the",
    "start": "1211880",
    "end": "1219159"
  },
  {
    "text": "cluster so we needed to introduce a presentation layer to surface that",
    "start": "1219159",
    "end": "1225080"
  },
  {
    "text": "information out of the node and the cuet um so that's uh where metrix server",
    "start": "1225080",
    "end": "1231280"
  },
  {
    "text": "comes from and the presentation layer we decided was an API which is the resource metrix API and it is the source of Truth",
    "start": "1231280",
    "end": "1238039"
  },
  {
    "text": "to date for commment such as cube cutle top that you use to get information about the resour usage of your pod nodes",
    "start": "1238039",
    "end": "1244440"
  },
  {
    "text": "and so on uh and this is also the source of Truth for autoscaling based on",
    "start": "1244440",
    "end": "1249960"
  },
  {
    "text": "resource usage of your application um so to do so metrix server would collect",
    "start": "1249960",
    "end": "1256280"
  },
  {
    "text": "matric from your nodes um in each of the cubet instances that are running and expose that to the Cub API server for",
    "start": "1256280",
    "end": "1263600"
  },
  {
    "text": "ease of uh querying uh it's a pretty mature project and uh besides maintaining it we don't",
    "start": "1263600",
    "end": "1270640"
  },
  {
    "text": "have much planned for the future so um I would go into what we will do for the future for this one but for metrix for",
    "start": "1270640",
    "end": "1278120"
  },
  {
    "text": "PR adapter like it covers another gap which was that um once users started a",
    "start": "1278120",
    "end": "1283720"
  },
  {
    "text": "scaling based on the resource of their application they found that this was not enough",
    "start": "1283720",
    "end": "1289240"
  },
  {
    "text": "like what if um they wanted to autoscale their web server based on the number of",
    "start": "1289240",
    "end": "1294679"
  },
  {
    "text": "uh queries that they were receiving at one point um that was not possible with metrix server so we introduced two",
    "start": "1294679",
    "end": "1301840"
  },
  {
    "text": "different API um for that which are the custom and external metrix API uh which",
    "start": "1301840",
    "end": "1308559"
  },
  {
    "text": "allow uh to plug in any kind of metrix uh and expose them to the QB API server",
    "start": "1308559",
    "end": "1316400"
  },
  {
    "text": "for uh to be queried by Theo scaler um so perus adapter is one implementation of these apis uh and it Bridges between",
    "start": "1316400",
    "end": "1325640"
  },
  {
    "text": "uh the kubernetes cluster and a pretus instance so promus adapter would carry",
    "start": "1325640",
    "end": "1330799"
  },
  {
    "text": "your pretus metrics on your pritus database and expose them to the autoscale of Auto",
    "start": "1330799",
    "end": "1336840"
  },
  {
    "text": "scaling um the the problem with that project is is that it is very old like",
    "start": "1336840",
    "end": "1343159"
  },
  {
    "text": "and it has a pretty pool in the ecosystem uh and it has been needed kind",
    "start": "1343159",
    "end": "1348360"
  },
  {
    "text": "of overall for quite some time now I found an issue dating back from 2019",
    "start": "1348360",
    "end": "1354440"
  },
  {
    "text": "about that because like it has a very complex configuration if you've tried using it in the past uh you might see",
    "start": "1354440",
    "end": "1362039"
  },
  {
    "text": "where where I'm coming with that uh even for maintainer perspective that's difficult to work with uh it's like one",
    "start": "1362039",
    "end": "1368559"
  },
  {
    "text": "of the other problem is that it doesn't allow user to dynamically provide new metric so you would have to restart your",
    "start": "1368559",
    "end": "1374279"
  },
  {
    "text": "application every time uh you would want to add a new metric to youro scaling pipeline which is very not ideal um and",
    "start": "1374279",
    "end": "1383440"
  },
  {
    "text": "these days like there are better solution and more complete solution that exist in the ecosystem such as kada if",
    "start": "1383440",
    "end": "1389440"
  },
  {
    "text": "you don't know much about this project it's a not new like it's a graduated project from the cncf uh that allows you",
    "start": "1389440",
    "end": "1396840"
  },
  {
    "text": "to expose um information about your platform from various sources I think",
    "start": "1396840",
    "end": "1403640"
  },
  {
    "text": "they have more than like 60 different scalers uh to plug into your Autos scaling Pipelines so they have way more",
    "start": "1403640",
    "end": "1409279"
  },
  {
    "text": "option and they also support prets they also support uh Autos scaling based on",
    "start": "1409279",
    "end": "1415520"
  },
  {
    "text": "uh the resource usage of your application and so on so that would be it for pit",
    "start": "1415520",
    "end": "1421520"
  },
  {
    "text": "adapter um another Gap that was found more recently um the with the more",
    "start": "1421520",
    "end": "1428919"
  },
  {
    "text": "people started to scale their application they wanted quick response",
    "start": "1428919",
    "end": "1434000"
  },
  {
    "text": "um on the autoscaling pipeline they wanted application to react fast to",
    "start": "1434000",
    "end": "1439080"
  },
  {
    "text": "increase in CPUs AG of their node and so on but uh it turns out that like metrix",
    "start": "1439080",
    "end": "1445039"
  },
  {
    "text": "Server doesn't allow um short scrape interval and short uh autoscaling uh",
    "start": "1445039",
    "end": "1452919"
  },
  {
    "text": "period because uh the problem is that cuet doesn't allow for fast scraping and",
    "start": "1452919",
    "end": "1459200"
  },
  {
    "text": "fast scraping of uh resource usage so usage metrix collector is uh one way to",
    "start": "1459200",
    "end": "1466520"
  },
  {
    "text": "work around that problem because doesn't rely on cuet and does the metrix collection itself so it allows for I",
    "start": "1466520",
    "end": "1473559"
  },
  {
    "text": "utilization Matrix resolution um down to 1 second where metric server for example can only do that down to 15 seconds um",
    "start": "1473559",
    "end": "1481919"
  },
  {
    "text": "and it has also some pretty neat features such as that it can aggregate metrics at collection time and then",
    "start": "1481919",
    "end": "1488000"
  },
  {
    "text": "expose them to your pritus database uh and it doesn't require pom knowledge",
    "start": "1488000",
    "end": "1493600"
  },
  {
    "text": "which is kind of a barer for some people um and also like",
    "start": "1493600",
    "end": "1499120"
  },
  {
    "text": "if you've attended this talk before it was mentioned that there was a big problem with that project which is which",
    "start": "1499120",
    "end": "1505760"
  },
  {
    "text": "was that it doesn't it didn't supported c groups Z2 yet which has been generally available in kubernetes since",
    "start": "1505760",
    "end": "1512399"
  },
  {
    "text": "125 and disabling c groups V2 just for this project was kind of a big drawback",
    "start": "1512399",
    "end": "1517960"
  },
  {
    "text": "I guess for the users um but since the latest release release that has been uh",
    "start": "1517960",
    "end": "1523840"
  },
  {
    "text": "cut maybe two months ago it now support both coup Z1 and C Z2 so now the project",
    "start": "1523840",
    "end": "1529320"
  },
  {
    "text": "is full and ready to be used uh in the newest kubernetes",
    "start": "1529320",
    "end": "1534440"
  },
  {
    "text": "versions um and as an example this is the configuration that could be used um to gather um CPU utilization uh like the",
    "start": "1534440",
    "end": "1543960"
  },
  {
    "text": "199 percentile of CPU utilization of a one second sampling rate and as you can see like it doesn't require any prq",
    "start": "1543960",
    "end": "1550760"
  },
  {
    "text": "knowledge uh and it's simpler uh than prit adapter for example by far",
    "start": "1550760",
    "end": "1558799"
  },
  {
    "text": "um another big project that we have uh I think it's the one that is the most used",
    "start": "1558799",
    "end": "1565799"
  },
  {
    "text": "or like set up by uh users um in our",
    "start": "1565799",
    "end": "1570840"
  },
  {
    "text": "platform uh it's Cube State metric and Cube State metric allow for generating metrics from any kubernetes resource or",
    "start": "1570840",
    "end": "1578440"
  },
  {
    "text": "object so you might have encountered some of these metrics before which is like for example Cube deployment spec",
    "start": "1578440",
    "end": "1584279"
  },
  {
    "text": "replicas uh where Cube set metric would generate metrics out of your replicas that are not uh there by default in",
    "start": "1584279",
    "end": "1591120"
  },
  {
    "text": "kubernetes so you need an add-on to have these metrics so you would have that for your pods deployment State set and so",
    "start": "1591120",
    "end": "1598399"
  },
  {
    "text": "on uh and more recently one feature that has been requested for a while that we've added was the support for uh crd",
    "start": "1598399",
    "end": "1605279"
  },
  {
    "text": "metric so before like it was impossible for users to add metrics about their own",
    "start": "1605279",
    "end": "1612559"
  },
  {
    "text": "resource uh which was kind of a big gap uh from the project uh in in the sense",
    "start": "1612559",
    "end": "1618640"
  },
  {
    "text": "that it couldn't be extended at all like we had the native resources but that was about it um and now there is a way to do",
    "start": "1618640",
    "end": "1624720"
  },
  {
    "text": "that uh and you can configure the project in a way that you could generate",
    "start": "1624720",
    "end": "1630159"
  },
  {
    "text": "metrics for your objects um but like I",
    "start": "1630159",
    "end": "1635679"
  },
  {
    "text": "think it has been around for a bit more than a year and a half and we've seen a lot of gaps and issues with the original",
    "start": "1635679",
    "end": "1642799"
  },
  {
    "text": "implementation um and the biggest one was that uh this is not not a very",
    "start": "1642799",
    "end": "1648799"
  },
  {
    "text": "mature feature yet and the fact that we've introduced it as part of Cate metric caus cuite metric to fail and",
    "start": "1648799",
    "end": "1657640"
  },
  {
    "text": "panic sometime because of this particular feature so it kind of um reduced the stability of cube State",
    "start": "1657640",
    "end": "1664200"
  },
  {
    "text": "metric when we introduced it so one way to improve that in the future would be to separate both cuate metric and the",
    "start": "1664200",
    "end": "1670799"
  },
  {
    "text": "crd metrics part of it into two different projects that would share the",
    "start": "1670799",
    "end": "1676159"
  },
  {
    "text": "same core IDs but would be still different uh and we have also found some",
    "start": "1676159",
    "end": "1681640"
  },
  {
    "text": "gaps in how to how to configure um the CD metric part these days it's not very",
    "start": "1681640",
    "end": "1687519"
  },
  {
    "text": "trivial and doesn't support all the use cases that the users want today um so this will be covered in the cap that uh",
    "start": "1687519",
    "end": "1693679"
  },
  {
    "text": "branchu reag good is working on he already has a PC for it uh and this is",
    "start": "1693679",
    "end": "1699279"
  },
  {
    "text": "uh like the new big thing that will happen uh soon inate metric another",
    "start": "1699279",
    "end": "1704360"
  },
  {
    "text": "aspect is that this hasn't convert some problem or like some issues with some",
    "start": "1704360",
    "end": "1710399"
  },
  {
    "text": "Cube metric idas like over the years we've kind of diverged into different um",
    "start": "1710399",
    "end": "1715760"
  },
  {
    "text": "ideas on best practices we've kept some um metrix naming from a long time ago",
    "start": "1715760",
    "end": "1722960"
  },
  {
    "text": "and we never convert into one uh particular documentation around those",
    "start": "1722960",
    "end": "1728080"
  },
  {
    "text": "and we never converge the metric convention in one place same for their stability our stability meaning were",
    "start": "1728080",
    "end": "1734039"
  },
  {
    "text": "different than the one in kubernetes for example and we there is a bigger for to converge into one single thing that we",
    "start": "1734039",
    "end": "1740480"
  },
  {
    "text": "would share with also kubernetes uh in the next major version of cuate",
    "start": "1740480",
    "end": "1746440"
  },
  {
    "text": "metric um and yeah feel free to get involved we always need help around the sub project and even uh in kubernetes",
    "start": "1747000",
    "end": "1753720"
  },
  {
    "text": "directly um to do so you can attend our s meetings we have uh a meeting every week uh one every two weeks it's like uh",
    "start": "1753720",
    "end": "1762200"
  },
  {
    "text": "is a triage or a Sig meeting between all of us to discuss uh new initiatives",
    "start": "1762200",
    "end": "1767600"
  },
  {
    "text": "issues and so on if you want to be involved in any of the sub projects I've shared some contacts over",
    "start": "1767600",
    "end": "1774600"
  },
  {
    "text": "there um for the time of our meetings it's usually 9:30 a.m. Pacific time",
    "start": "1774600",
    "end": "1780279"
  },
  {
    "text": "by-weekly as I mentioned or you can directly reach out to any of us here if you have any question I want to",
    "start": "1780279",
    "end": "1785320"
  },
  {
    "text": "contribute and there is also a SL channel that you can interact with uh with us there",
    "start": "1785320",
    "end": "1792360"
  },
  {
    "text": "on all right and that would be about it for today thank you everyone for attending",
    "start": "1792360",
    "end": "1797690"
  },
  {
    "text": "[Applause]",
    "start": "1797690",
    "end": "1805159"
  },
  {
    "text": "yeah do you want to sure if anyone has any questions we happy to take",
    "start": "1806640",
    "end": "1812440"
  },
  {
    "text": "them is I have a question if I can use this one can you hear me oh yeah perfect",
    "start": "1812440",
    "end": "1817600"
  },
  {
    "text": "yeah I'm curious um there are lots of nice logging kind of like improvements there but like have is there any plan to",
    "start": "1817600",
    "end": "1823320"
  },
  {
    "text": "adopt slog essentially so anyone who Imports stuff can have just one less",
    "start": "1823320",
    "end": "1829960"
  },
  {
    "text": "dependency so ASL you know this go go library that is kind of like getting adopted slowly Patrick you want to take",
    "start": "1829960",
    "end": "1836279"
  },
  {
    "text": "this I'm maintaining the basically logging infrastructure uh kubernetes is compatible with s log so what you can do",
    "start": "1836279",
    "end": "1843720"
  },
  {
    "text": "is you can store uh an S logger implementation in your context and any kubernetes",
    "start": "1843720",
    "end": "1851159"
  },
  {
    "text": "component helper package client goal once we have converted it contextual logging will'll use v s logger",
    "start": "1851159",
    "end": "1858000"
  },
  {
    "text": "implementation in the context and you can also that's the alternative thing if you don't do contextual logging you can",
    "start": "1858000",
    "end": "1864840"
  },
  {
    "text": "convert an S loger implementation into the corresponding go loger or actually I think we actually have a klog",
    "start": "1864840",
    "end": "1872559"
  },
  {
    "text": "z s log log function but you can store your eslog implementation in klog and",
    "start": "1872559",
    "end": "1878679"
  },
  {
    "text": "then anything that uses klog will actually write through to",
    "start": "1878679",
    "end": "1884480"
  },
  {
    "text": "eslog and I have another question uh if I may so this communities framework um",
    "start": "1884600",
    "end": "1890840"
  },
  {
    "text": "around stability of metrics is super super cool and like what I noticed as a prous maintainer is that you know open",
    "start": "1890840",
    "end": "1897559"
  },
  {
    "text": "tetric semantic convention is building similar tooling around stability and and really defining the metric and given",
    "start": "1897559",
    "end": "1905240"
  },
  {
    "text": "promus in promus we try to make sure that you know the naming of open Telemetry with those dots kind of works",
    "start": "1905240",
    "end": "1910840"
  },
  {
    "text": "smoothly whatever if you're pushing or pulling metrics so assuming this kind of getting there like is there any path",
    "start": "1910840",
    "end": "1917159"
  },
  {
    "text": "forward kind of like maybe reusing the open semantic conventions or maybe kind of bringing some features to semantic",
    "start": "1917159",
    "end": "1923519"
  },
  {
    "text": "conventions or or back kind of like consolidating this",
    "start": "1923519",
    "end": "1928679"
  },
  {
    "text": "part yeah I mean we've actually talked to the Prometheus uh Community about it",
    "start": "1929679",
    "end": "1934840"
  },
  {
    "text": "um I'm not sure that the stability framework would be extensible to",
    "start": "1934840",
    "end": "1940240"
  },
  {
    "text": "Prometheus um it's quite kubernetes specific and it's also codebase specific",
    "start": "1940240",
    "end": "1947080"
  },
  {
    "text": "right because each codebase has you know its own set of metrics and metrics are",
    "start": "1947080",
    "end": "1953000"
  },
  {
    "text": "going to be dynamic based off of the individual code base that you have right",
    "start": "1953000",
    "end": "1958760"
  },
  {
    "text": "like people are declaring new metrics for different code bases so um it's",
    "start": "1958760",
    "end": "1964320"
  },
  {
    "text": "unlikely I think and to add to what an said like for example we cannot even",
    "start": "1964320",
    "end": "1969360"
  },
  {
    "text": "extend it to cuite metric today as is like we would need some additional work in order to make it work for cite Matrix",
    "start": "1969360",
    "end": "1975240"
  },
  {
    "text": "specifically so even for us it's kind of difficult I guess makes sense yeah um",
    "start": "1975240",
    "end": "1982279"
  },
  {
    "text": "anyway I'm looking forward to also have a way to collaborate to on renaming",
    "start": "1982279",
    "end": "1987600"
  },
  {
    "text": "sounds like renaming is a big problem I know and like it's there is no good Solutions and I'll be looking as a pruse",
    "start": "1987600",
    "end": "1993159"
  },
  {
    "text": "maintainer on ways to kind of like make renaming easier either on query side either or right side either collection",
    "start": "1993159",
    "end": "1999799"
  },
  {
    "text": "side so any of those Frameworks and really Tools around renaming for people to make it super easy for us to really",
    "start": "1999799",
    "end": "2005799"
  },
  {
    "text": "like make a and dynamically change those uh that would be super beautiful so yeah looking for feedback as well as ause",
    "start": "2005799",
    "end": "2014240"
  },
  {
    "text": "maintainer yeah if I can just pick a minute uh you mentioned Cube State",
    "start": "2017159",
    "end": "2022360"
  },
  {
    "text": "metrics not being to stable and we've been relying on that a lot so for custom",
    "start": "2022360",
    "end": "2028279"
  },
  {
    "text": "resources uh I I would you mind like going a bit more in depth into what we",
    "start": "2028279",
    "end": "2033559"
  },
  {
    "text": "should be aware of what we should be careful about yeah sure um so Cube metric as a whole I'd say is very stable",
    "start": "2033559",
    "end": "2041600"
  },
  {
    "text": "but the custom Matrix uh like the crd Matrix feature has been like it's quite",
    "start": "2041600",
    "end": "2047679"
  },
  {
    "text": "recent um and we have seen some bugs in it uh over time um normally they tend to",
    "start": "2047679",
    "end": "2054358"
  },
  {
    "text": "be fixed pretty fast once they are noticed uh but still like we went from a",
    "start": "2054359",
    "end": "2060000"
  },
  {
    "text": "very stable Cube site metric that never crash really um to adding this feature",
    "start": "2060000",
    "end": "2065320"
  },
  {
    "text": "that can crash sometime or it appeared that it C like we had a couple of bug",
    "start": "2065320",
    "end": "2070800"
  },
  {
    "text": "that caused issues um so it definitely like reduced the stability that Cube",
    "start": "2070800",
    "end": "2076800"
  },
  {
    "text": "metric has and I guess the Assumption as well that you have um though it is very",
    "start": "2076800",
    "end": "2082878"
  },
  {
    "text": "unlikely uh that you run into this issue because hopefully they will be fixed before you run into them uh but it can",
    "start": "2082879",
    "end": "2090158"
  },
  {
    "text": "still happen definitely okay the way you you mentioned it I was expecting like a design flaw that that was like",
    "start": "2090159",
    "end": "2097160"
  },
  {
    "text": "preventing it from working but it's really just occasional bugs right yeah it's it's a new feature so if you want",
    "start": "2097160",
    "end": "2103680"
  },
  {
    "text": "stability then it's probably a good idea not to dynamically generate crd metric",
    "start": "2103680",
    "end": "2109000"
  },
  {
    "text": "in the same binary as your KSM metric thank you yeah and yeah that's",
    "start": "2109000",
    "end": "2115320"
  },
  {
    "text": "one thing that an mentioned like there's still the possibility today and we have the option to run uh Cube State metric",
    "start": "2115320",
    "end": "2120839"
  },
  {
    "text": "and CD metrics separately like both endpoints in two different binaries so you could do that to make it more stable",
    "start": "2120839",
    "end": "2126480"
  },
  {
    "text": "for sure to make sure that at least the metrics about your custom metrics about your crd cannot make your metrics about",
    "start": "2126480",
    "end": "2135359"
  },
  {
    "text": "the native resource crash that that would be one way to make it more stable for sure",
    "start": "2135359",
    "end": "2142160"
  }
]