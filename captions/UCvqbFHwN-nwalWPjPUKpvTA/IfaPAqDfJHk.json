[
  {
    "text": "okay uh welcome folks uh today we're",
    "start": "240",
    "end": "3399"
  },
  {
    "text": "going to be looking at Cost validation",
    "start": "3399",
    "end": "5279"
  },
  {
    "text": "budgets or validation cost budgets I",
    "start": "5279",
    "end": "6720"
  },
  {
    "text": "should say uh within cell in kubernetes",
    "start": "6720",
    "end": "10000"
  },
  {
    "text": "and what they mean and in particular why",
    "start": "10000",
    "end": "13200"
  },
  {
    "text": "why they might error and how to avoid",
    "start": "13200",
    "end": "14839"
  },
  {
    "text": "that so what we're going to look at",
    "start": "14839",
    "end": "17080"
  },
  {
    "text": "today we'll start off by taking a look",
    "start": "17080",
    "end": "18560"
  },
  {
    "text": "at what cell is and working out why we",
    "start": "18560",
    "end": "20199"
  },
  {
    "text": "might actually want to use that feature",
    "start": "20199",
    "end": "22439"
  },
  {
    "text": "uh we'll talk about what and why we have",
    "start": "22439",
    "end": "24359"
  },
  {
    "text": "these validation cost budgets we'll",
    "start": "24359",
    "end": "26359"
  },
  {
    "text": "start looking at the rule cost and",
    "start": "26359",
    "end": "27960"
  },
  {
    "text": "cardinality two elements of the total",
    "start": "27960",
    "end": "29759"
  },
  {
    "text": "cost",
    "start": "29759",
    "end": "30759"
  },
  {
    "text": "and then we'll finish up by making sure",
    "start": "30759",
    "end": "32398"
  },
  {
    "text": "that we all understand how to avoid high",
    "start": "32399",
    "end": "34079"
  },
  {
    "text": "cost validations uh High validation",
    "start": "34079",
    "end": "36559"
  },
  {
    "text": "costs in our",
    "start": "36559",
    "end": "38000"
  },
  {
    "text": "crds uh before we go too far though I'm",
    "start": "38000",
    "end": "40239"
  },
  {
    "text": "Joel I'm a principal software engineer",
    "start": "40239",
    "end": "42039"
  },
  {
    "text": "at Red Hat I focus primarily on cloud",
    "start": "42039",
    "end": "43719"
  },
  {
    "text": "technology CCMS and cppy uh but I'm also",
    "start": "43719",
    "end": "46360"
  },
  {
    "text": "one of our open shift API review team",
    "start": "46360",
    "end": "48000"
  },
  {
    "text": "and last year contributed a library as",
    "start": "48000",
    "end": "50039"
  },
  {
    "text": "part of the cell project",
    "start": "50039",
    "end": "51680"
  },
  {
    "text": "Upstream so what is",
    "start": "51680",
    "end": "54640"
  },
  {
    "text": "cell well it's this thing called the",
    "start": "54640",
    "end": "56680"
  },
  {
    "text": "common expression language and it came",
    "start": "56680",
    "end": "58000"
  },
  {
    "text": "out of Google the idea was to create",
    "start": "58000",
    "end": "60000"
  },
  {
    "text": "something simple that would be able to",
    "start": "60000",
    "end": "61320"
  },
  {
    "text": "be used for kind of common Expressions",
    "start": "61320",
    "end": "65000"
  },
  {
    "text": "uh that could then be embedded into",
    "start": "65000",
    "end": "66320"
  },
  {
    "text": "other projects so the idea was that it",
    "start": "66320",
    "end": "68320"
  },
  {
    "text": "would be SE like non-t incomplete",
    "start": "68320",
    "end": "71000"
  },
  {
    "text": "deliberately so that it's not too",
    "start": "71000",
    "end": "72520"
  },
  {
    "text": "complex lightweight fast execution and",
    "start": "72520",
    "end": "75240"
  },
  {
    "text": "ideally extensible meaning that not only",
    "start": "75240",
    "end": "77840"
  },
  {
    "text": "do you have the built-in syntax of the",
    "start": "77840",
    "end": "79400"
  },
  {
    "text": "language but we can start adding new",
    "start": "79400",
    "end": "81280"
  },
  {
    "text": "functions on top of the language to make",
    "start": "81280",
    "end": "83360"
  },
  {
    "text": "it more usable in specific use cases the",
    "start": "83360",
    "end": "86320"
  },
  {
    "text": "bottom box here the sort of dark box",
    "start": "86320",
    "end": "88000"
  },
  {
    "text": "with the green text is an example of of",
    "start": "88000",
    "end": "90000"
  },
  {
    "text": "a cell expression account and",
    "start": "90000",
    "end": "91720"
  },
  {
    "text": "transaction are objects they have Fields",
    "start": "91720",
    "end": "93600"
  },
  {
    "text": "within them we've got operators that",
    "start": "93600",
    "end": "95280"
  },
  {
    "text": "you'll probably recognize and this",
    "start": "95280",
    "end": "97399"
  },
  {
    "text": "condition evaluates to a Boolean true or",
    "start": "97399",
    "end": "99840"
  },
  {
    "text": "false now this started being used in",
    "start": "99840",
    "end": "102320"
  },
  {
    "text": "Cube for crd validation so ex kubernetes",
    "start": "102320",
    "end": "105079"
  },
  {
    "text": "validations we brought that in GA in",
    "start": "105079",
    "end": "108520"
  },
  {
    "text": "129 and that the idea here was basically",
    "start": "108520",
    "end": "111240"
  },
  {
    "text": "to make crds more self-contained and",
    "start": "111240",
    "end": "113600"
  },
  {
    "text": "easier to M easier to develop the idea",
    "start": "113600",
    "end": "116880"
  },
  {
    "text": "is that we can BR bring complex",
    "start": "116880",
    "end": "118799"
  },
  {
    "text": "validation into the C schema have it",
    "start": "118799",
    "end": "120960"
  },
  {
    "text": "execute within the API server and get",
    "start": "120960",
    "end": "123079"
  },
  {
    "text": "rid of web hooks uh an example of this",
    "start": "123079",
    "end": "126320"
  },
  {
    "text": "is this immutable field schema this is",
    "start": "126320",
    "end": "128399"
  },
  {
    "text": "quite common uh across apis where you",
    "start": "128399",
    "end": "130200"
  },
  {
    "text": "have some data and you don't want it to",
    "start": "130200",
    "end": "131360"
  },
  {
    "text": "be changed with cell all I have to do is",
    "start": "131360",
    "end": "134120"
  },
  {
    "text": "write self equals old self and that's",
    "start": "134120",
    "end": "136239"
  },
  {
    "text": "solve for me that data can no longer be",
    "start": "136239",
    "end": "138080"
  },
  {
    "text": "changed once it's set in that",
    "start": "138080",
    "end": "140040"
  },
  {
    "text": "API it's also used in other places uh",
    "start": "140040",
    "end": "142760"
  },
  {
    "text": "one of which is validating admission",
    "start": "142760",
    "end": "144160"
  },
  {
    "text": "policy um I'll touch on this one briefly",
    "start": "144160",
    "end": "146400"
  },
  {
    "text": "but I'm not going too much detail this",
    "start": "146400",
    "end": "148720"
  },
  {
    "text": "was feature was GA and 1 30 and it's",
    "start": "148720",
    "end": "150640"
  },
  {
    "text": "kind of like the same validations but",
    "start": "150640",
    "end": "152519"
  },
  {
    "text": "you can apply it to anything apply it to",
    "start": "152519",
    "end": "154599"
  },
  {
    "text": "a buil-in type apply it to a crd that",
    "start": "154599",
    "end": "156599"
  },
  {
    "text": "you don't own the schema of you can kind",
    "start": "156599",
    "end": "158560"
  },
  {
    "text": "of write whatever you want there and",
    "start": "158560",
    "end": "159920"
  },
  {
    "text": "it's slightly more",
    "start": "159920",
    "end": "161680"
  },
  {
    "text": "powerful the example here actually is",
    "start": "161680",
    "end": "164040"
  },
  {
    "text": "something from production that uh that",
    "start": "164040",
    "end": "165560"
  },
  {
    "text": "we use in open shift um it's to prevent",
    "start": "165560",
    "end": "168440"
  },
  {
    "text": "something called trampoline pods and if",
    "start": "168440",
    "end": "169680"
  },
  {
    "text": "you want to know what those are there",
    "start": "169680",
    "end": "170640"
  },
  {
    "text": "was a talk Yesterday by Joe and David go",
    "start": "170640",
    "end": "172680"
  },
  {
    "text": "look at it um but the idea here is we",
    "start": "172680",
    "end": "175720"
  },
  {
    "text": "have two expressions and if both",
    "start": "175720",
    "end": "177720"
  },
  {
    "text": "Expressions evaluate to true then the",
    "start": "177720",
    "end": "179519"
  },
  {
    "text": "request requ EST is allowed the top one",
    "start": "179519",
    "end": "181640"
  },
  {
    "text": "here is actually looking into the",
    "start": "181640",
    "end": "182720"
  },
  {
    "text": "request metadata so when a pod uses a",
    "start": "182720",
    "end": "186040"
  },
  {
    "text": "service account token it gets extra",
    "start": "186040",
    "end": "187640"
  },
  {
    "text": "information added to it part of that is",
    "start": "187640",
    "end": "189599"
  },
  {
    "text": "the node name that it's running on we",
    "start": "189599",
    "end": "191920"
  },
  {
    "text": "check that that is exists so we know",
    "start": "191920",
    "end": "194440"
  },
  {
    "text": "that the request came from a pod with a",
    "start": "194440",
    "end": "196440"
  },
  {
    "text": "bound service token then the second line",
    "start": "196440",
    "end": "199440"
  },
  {
    "text": "here checks that the object we're",
    "start": "199440",
    "end": "201000"
  },
  {
    "text": "updating matches that node name so the",
    "start": "201000",
    "end": "204000"
  },
  {
    "text": "idea here is that we have a Damon set",
    "start": "204000",
    "end": "205760"
  },
  {
    "text": "and we make sure that it can only update",
    "start": "205760",
    "end": "207200"
  },
  {
    "text": "the node it's running on a really nice",
    "start": "207200",
    "end": "210120"
  },
  {
    "text": "and Powerful use case to prevent kind of",
    "start": "210120",
    "end": "212959"
  },
  {
    "text": "security leaks you don't want your Dam",
    "start": "212959",
    "end": "215080"
  },
  {
    "text": "set on one node updating the node that",
    "start": "215080",
    "end": "216640"
  },
  {
    "text": "it's not on very similar to how key node",
    "start": "216640",
    "end": "219040"
  },
  {
    "text": "admission",
    "start": "219040",
    "end": "220519"
  },
  {
    "text": "works so what else can it do well",
    "start": "220519",
    "end": "223239"
  },
  {
    "text": "there's loads of stuff uh we can",
    "start": "223239",
    "end": "225599"
  },
  {
    "text": "validate the dependencies between Fields",
    "start": "225599",
    "end": "227280"
  },
  {
    "text": "if you've ever heard of a discriminated",
    "start": "227280",
    "end": "228640"
  },
  {
    "text": "Union where you have one field that",
    "start": "228640",
    "end": "230080"
  },
  {
    "text": "tells you which type or which member of",
    "start": "230080",
    "end": "232200"
  },
  {
    "text": "the rest of the struct can be allowed we",
    "start": "232200",
    "end": "234000"
  },
  {
    "text": "can validate that using a Turner if you",
    "start": "234000",
    "end": "236360"
  },
  {
    "text": "wanted to validate that your field has a",
    "start": "236360",
    "end": "237760"
  },
  {
    "text": "URL in it and that that URL is secure",
    "start": "237760",
    "end": "240159"
  },
  {
    "text": "you can do that too as of cube 131 we",
    "start": "240159",
    "end": "243200"
  },
  {
    "text": "have the ability to validate IP",
    "start": "243200",
    "end": "244519"
  },
  {
    "text": "addresses directly in the IP in the CD",
    "start": "244519",
    "end": "246920"
  },
  {
    "text": "schema and in this case we can check",
    "start": "246920",
    "end": "249599"
  },
  {
    "text": "that the families are distinct this",
    "start": "249599",
    "end": "251519"
  },
  {
    "text": "validation will give us for a list of",
    "start": "251519",
    "end": "253000"
  },
  {
    "text": "two IP addresses whether one is ipv4 and",
    "start": "253000",
    "end": "255159"
  },
  {
    "text": "one is",
    "start": "255159",
    "end": "256120"
  },
  {
    "text": "IPv6 we can make sure lists are additive",
    "start": "256120",
    "end": "258880"
  },
  {
    "text": "and if we have a field that looks like",
    "start": "258880",
    "end": "260919"
  },
  {
    "text": "uh a size maybe it's memory or uh",
    "start": "260919",
    "end": "263400"
  },
  {
    "text": "storage we could also check there's a",
    "start": "263400",
    "end": "265120"
  },
  {
    "text": "minimum with an easy",
    "start": "265120",
    "end": "267160"
  },
  {
    "text": "validation okay so this sounds great",
    "start": "267160",
    "end": "269039"
  },
  {
    "text": "right let's do this every everywhere",
    "start": "269039",
    "end": "270560"
  },
  {
    "text": "well yes the more validation you can put",
    "start": "270560",
    "end": "272120"
  },
  {
    "text": "into your crd schema the better means",
    "start": "272120",
    "end": "274199"
  },
  {
    "text": "fewer web hooks but as with all good",
    "start": "274199",
    "end": "276639"
  },
  {
    "text": "things there is a catch the validations",
    "start": "276639",
    "end": "279039"
  },
  {
    "text": "are not",
    "start": "279039",
    "end": "280080"
  },
  {
    "text": "free all of these validations run in the",
    "start": "280080",
    "end": "282680"
  },
  {
    "text": "API server in tree so whenever you send",
    "start": "282680",
    "end": "285280"
  },
  {
    "text": "a create or an update for your custom",
    "start": "285280",
    "end": "287039"
  },
  {
    "text": "resource it has to run these validations",
    "start": "287039",
    "end": "289479"
  },
  {
    "text": "and that cost CPU Cycles when you've got",
    "start": "289479",
    "end": "292360"
  },
  {
    "text": "one request that's probably not going to",
    "start": "292360",
    "end": "294199"
  },
  {
    "text": "be too bad but I don't think anyone's",
    "start": "294199",
    "end": "296160"
  },
  {
    "text": "API server is serving one request at a",
    "start": "296160",
    "end": "298280"
  },
  {
    "text": "time so to prevent the API server from",
    "start": "298280",
    "end": "301320"
  },
  {
    "text": "being overwhelmed cell and in particular",
    "start": "301320",
    "end": "304039"
  },
  {
    "text": "the implementation within the API server",
    "start": "304039",
    "end": "305759"
  },
  {
    "text": "uses what we call resource constraints",
    "start": "305759",
    "end": "308080"
  },
  {
    "text": "and it does this in two ways so one is",
    "start": "308080",
    "end": "310639"
  },
  {
    "text": "estimated cost when you create your CD",
    "start": "310639",
    "end": "313280"
  },
  {
    "text": "or update it you have the schema within",
    "start": "313280",
    "end": "315759"
  },
  {
    "text": "that resource it iterates through the",
    "start": "315759",
    "end": "318319"
  },
  {
    "text": "schema looks at all of the rules you've",
    "start": "318319",
    "end": "320440"
  },
  {
    "text": "provided and works out what is the worst",
    "start": "320440",
    "end": "322759"
  },
  {
    "text": "case of this runtime validation",
    "start": "322759",
    "end": "325960"
  },
  {
    "text": "cost by doing that and comparing it to a",
    "start": "325960",
    "end": "328520"
  },
  {
    "text": "fixed uh budget",
    "start": "328520",
    "end": "330240"
  },
  {
    "text": "it can say ahead of time when you're",
    "start": "330240",
    "end": "331639"
  },
  {
    "text": "installing the crd no I think this is",
    "start": "331639",
    "end": "333840"
  },
  {
    "text": "too",
    "start": "333840",
    "end": "334600"
  },
  {
    "text": "expensive then as a backup there's also",
    "start": "334600",
    "end": "336919"
  },
  {
    "text": "runtime cost uh and this is actually",
    "start": "336919",
    "end": "339080"
  },
  {
    "text": "what happens for validating emission",
    "start": "339080",
    "end": "341199"
  },
  {
    "text": "policy uh but when you updating the",
    "start": "341199",
    "end": "343800"
  },
  {
    "text": "custom resource again it will look at",
    "start": "343800",
    "end": "346120"
  },
  {
    "text": "the input that it has check the cost and",
    "start": "346120",
    "end": "348360"
  },
  {
    "text": "if the cost is going to be too high it",
    "start": "348360",
    "end": "349840"
  },
  {
    "text": "will prevent that API request from going",
    "start": "349840",
    "end": "351560"
  },
  {
    "text": "through all in the kind of effort to",
    "start": "351560",
    "end": "354120"
  },
  {
    "text": "stop the API server being",
    "start": "354120",
    "end": "356360"
  },
  {
    "text": "overwhelmed so has anyone ever seen an",
    "start": "356360",
    "end": "358880"
  },
  {
    "text": "error message like this",
    "start": "358880",
    "end": "361840"
  },
  {
    "text": "before this is a genuine error message",
    "start": "361840",
    "end": "364319"
  },
  {
    "text": "that I got while I was reviewing",
    "start": "364319",
    "end": "365520"
  },
  {
    "text": "someone's API they wanted to put this",
    "start": "365520",
    "end": "367319"
  },
  {
    "text": "reject in and match against it but the",
    "start": "367319",
    "end": "369919"
  },
  {
    "text": "API server came back and said you've",
    "start": "369919",
    "end": "371759"
  },
  {
    "text": "exceeded your budget by a 100",
    "start": "371759",
    "end": "374880"
  },
  {
    "text": "times how does it even come to that",
    "start": "374880",
    "end": "377240"
  },
  {
    "text": "number well that's what we're going to",
    "start": "377240",
    "end": "379360"
  },
  {
    "text": "find",
    "start": "379360",
    "end": "380440"
  },
  {
    "text": "out so before we get too deep there's",
    "start": "380440",
    "end": "382880"
  },
  {
    "text": "two big numbers I need to introduce you",
    "start": "382880",
    "end": "384199"
  },
  {
    "text": "to 10 million and 100 million each rule",
    "start": "384199",
    "end": "387759"
  },
  {
    "text": "that you have in your crd schema will be",
    "start": "387759",
    "end": "389280"
  },
  {
    "text": "valid ated against a per rule limit of",
    "start": "389280",
    "end": "391479"
  },
  {
    "text": "10 million cost units if you have lots",
    "start": "391479",
    "end": "394479"
  },
  {
    "text": "and lots of small rules that's fine but",
    "start": "394479",
    "end": "397960"
  },
  {
    "text": "if the total sum of all of those rule",
    "start": "397960",
    "end": "399680"
  },
  {
    "text": "costs exceeds 100 million then your crd",
    "start": "399680",
    "end": "402560"
  },
  {
    "text": "is still too complex and the crd in",
    "start": "402560",
    "end": "404680"
  },
  {
    "text": "total will also be rejected so 10",
    "start": "404680",
    "end": "407680"
  },
  {
    "text": "million is an important number we're",
    "start": "407680",
    "end": "408680"
  },
  {
    "text": "going to focus on that one we need to",
    "start": "408680",
    "end": "409680"
  },
  {
    "text": "keep out all of our budget underneath 10",
    "start": "409680",
    "end": "412479"
  },
  {
    "text": "million there are two factors that we",
    "start": "412479",
    "end": "414720"
  },
  {
    "text": "comp pair against this budget rule cost",
    "start": "414720",
    "end": "417000"
  },
  {
    "text": "and cardinality Rule cost is let's take",
    "start": "417000",
    "end": "420080"
  },
  {
    "text": "this rule let's execute it once what is",
    "start": "420080",
    "end": "422319"
  },
  {
    "text": "that going to cost and cardinality is",
    "start": "422319",
    "end": "424840"
  },
  {
    "text": "well how many times are we going to run",
    "start": "424840",
    "end": "426000"
  },
  {
    "text": "this rule not every field exists in a",
    "start": "426000",
    "end": "428199"
  },
  {
    "text": "schema only once and therefore it's",
    "start": "428199",
    "end": "430199"
  },
  {
    "text": "possible with certain custom resources",
    "start": "430199",
    "end": "432199"
  },
  {
    "text": "certain fields that will need to execute",
    "start": "432199",
    "end": "434039"
  },
  {
    "text": "the validation multiple",
    "start": "434039",
    "end": "436400"
  },
  {
    "text": "times so let's break down a little bit",
    "start": "436400",
    "end": "438919"
  },
  {
    "text": "of a cell rule if we take a look at the",
    "start": "438919",
    "end": "440840"
  },
  {
    "text": "top line here this is relatively",
    "start": "440840",
    "end": "442800"
  },
  {
    "text": "straightforward we have some objects we",
    "start": "442800",
    "end": "444560"
  },
  {
    "text": "have some operators we've got",
    "start": "444560",
    "end": "446360"
  },
  {
    "text": "conditional logical and all of these",
    "start": "446360",
    "end": "449080"
  },
  {
    "text": "things are fixed cost so we can work out",
    "start": "449080",
    "end": "450919"
  },
  {
    "text": "the cost of this line 10 cost",
    "start": "450919",
    "end": "453039"
  },
  {
    "text": "units on the second line we start",
    "start": "453039",
    "end": "454960"
  },
  {
    "text": "introducing functions now some functions",
    "start": "454960",
    "end": "457199"
  },
  {
    "text": "are pretty straightforward taking the",
    "start": "457199",
    "end": "459240"
  },
  {
    "text": "size of a list for example again has a",
    "start": "459240",
    "end": "461479"
  },
  {
    "text": "fixed cost so this line is also a",
    "start": "461479",
    "end": "463800"
  },
  {
    "text": "relatively easy one to work out nine",
    "start": "463800",
    "end": "465720"
  },
  {
    "text": "cost units but what happens when you",
    "start": "465720",
    "end": "467879"
  },
  {
    "text": "take a look at that third example now we",
    "start": "467879",
    "end": "470199"
  },
  {
    "text": "have an input we have a string that",
    "start": "470199",
    "end": "471560"
  },
  {
    "text": "we're taking and that string could vary",
    "start": "471560",
    "end": "473039"
  },
  {
    "text": "in length this is where things start to",
    "start": "473039",
    "end": "475080"
  },
  {
    "text": "get more",
    "start": "475080",
    "end": "476759"
  },
  {
    "text": "complicated if we take this example uh",
    "start": "476759",
    "end": "479759"
  },
  {
    "text": "we're going to look at what we call",
    "start": "479759",
    "end": "480800"
  },
  {
    "text": "proportional cost so things like",
    "start": "480800",
    "end": "483520"
  },
  {
    "text": "contains or matches starts with ends",
    "start": "483520",
    "end": "485360"
  },
  {
    "text": "with all of these are calculated based",
    "start": "485360",
    "end": "488240"
  },
  {
    "text": "on the length of their input so in this",
    "start": "488240",
    "end": "490479"
  },
  {
    "text": "example we have a string there self uh I",
    "start": "490479",
    "end": "492680"
  },
  {
    "text": "don't know if that's a valid URL I just",
    "start": "492680",
    "end": "494039"
  },
  {
    "text": "kind of made it up and we're going to",
    "start": "494039",
    "end": "495800"
  },
  {
    "text": "match it against the Rex on the second",
    "start": "495800",
    "end": "497520"
  },
  {
    "text": "line uh if you don't recognize this Rex",
    "start": "497520",
    "end": "500000"
  },
  {
    "text": "it's DNS 11123 subdomain it's used",
    "start": "500000",
    "end": "502919"
  },
  {
    "text": "across Cube for object meta name and all",
    "start": "502919",
    "end": "505520"
  },
  {
    "text": "sorts of",
    "start": "505520",
    "end": "506720"
  },
  {
    "text": "things and we're going to work out the",
    "start": "506720",
    "end": "508759"
  },
  {
    "text": "cost of this to do that we take the",
    "start": "508759",
    "end": "510560"
  },
  {
    "text": "length of the input uh we times that by",
    "start": "510560",
    "end": "513240"
  },
  {
    "text": "the string traversal cost Factor take",
    "start": "513240",
    "end": "514760"
  },
  {
    "text": "the ceiling of that mult multiply that",
    "start": "514760",
    "end": "517320"
  },
  {
    "text": "all then by the seeding of the length of",
    "start": "517320",
    "end": "519560"
  },
  {
    "text": "the Rex times the Rex traversal cost",
    "start": "519560",
    "end": "521640"
  },
  {
    "text": "factor in that case we can get the",
    "start": "521640",
    "end": "523719"
  },
  {
    "text": "formula on the bottom the string",
    "start": "523719",
    "end": "524800"
  },
  {
    "text": "traversal cost factor is 0.1 re X",
    "start": "524800",
    "end": "526959"
  },
  {
    "text": "traversal is 0.25 and so with this input",
    "start": "526959",
    "end": "530279"
  },
  {
    "text": "and this rule we have a cost of",
    "start": "530279",
    "end": "533160"
  },
  {
    "text": "113 we can also look at lists so while I",
    "start": "533160",
    "end": "536600"
  },
  {
    "text": "said it's non sure in complete and we",
    "start": "536600",
    "end": "537800"
  },
  {
    "text": "don't have four Loops we do have some",
    "start": "537800",
    "end": "539880"
  },
  {
    "text": "macros that iterate so all exists exist",
    "start": "539880",
    "end": "543320"
  },
  {
    "text": "one uh can iterate over arrays in your",
    "start": "543320",
    "end": "546839"
  },
  {
    "text": "API so in this case you can approximate",
    "start": "546839",
    "end": "550160"
  },
  {
    "text": "the cost uh of this by taking the length",
    "start": "550160",
    "end": "552600"
  },
  {
    "text": "of the list working out the perst step",
    "start": "552600",
    "end": "554880"
  },
  {
    "text": "cost so in this case what does X matches",
    "start": "554880",
    "end": "557880"
  },
  {
    "text": "cost for us then there's some additional",
    "start": "557880",
    "end": "559959"
  },
  {
    "text": "cost for each step of the loop the and",
    "start": "559959",
    "end": "562160"
  },
  {
    "text": "the assignment of variables and then the",
    "start": "562160",
    "end": "564360"
  },
  {
    "text": "cost of the arguments as well so for",
    "start": "564360",
    "end": "566519"
  },
  {
    "text": "this particular example we can get 31",
    "start": "566519",
    "end": "570279"
  },
  {
    "text": "18 and you might be sat there thinking",
    "start": "570279",
    "end": "572360"
  },
  {
    "text": "well 10 million is a big number Joel",
    "start": "572360",
    "end": "573839"
  },
  {
    "text": "we're nowhere near this well yes we",
    "start": "573839",
    "end": "576560"
  },
  {
    "text": "aren't there",
    "start": "576560",
    "end": "577640"
  },
  {
    "text": "yet but what happens at crd admission",
    "start": "577640",
    "end": "581240"
  },
  {
    "text": "well we don't actually have real data to",
    "start": "581240",
    "end": "582959"
  },
  {
    "text": "work with what we have is a schema and",
    "start": "582959",
    "end": "586720"
  },
  {
    "text": "an unknown amount of data so this is",
    "start": "586720",
    "end": "589200"
  },
  {
    "text": "where the API server has to work out",
    "start": "589200",
    "end": "591279"
  },
  {
    "text": "what is the worst case we don't know the",
    "start": "591279",
    "end": "593440"
  },
  {
    "text": "length of the strings in this list and",
    "start": "593440",
    "end": "594920"
  },
  {
    "text": "we don't know how long the list is I",
    "start": "594920",
    "end": "596480"
  },
  {
    "text": "can't complete this",
    "start": "596480",
    "end": "597760"
  },
  {
    "text": "formula so if we look at the string case",
    "start": "597760",
    "end": "601040"
  },
  {
    "text": "this time we have that string we don't",
    "start": "601040",
    "end": "602880"
  },
  {
    "text": "know what it is we've got one thing",
    "start": "602880",
    "end": "604519"
  },
  {
    "text": "missing in our formula what is the",
    "start": "604519",
    "end": "606279"
  },
  {
    "text": "length of that string the API server",
    "start": "606279",
    "end": "608839"
  },
  {
    "text": "will look at the schema and it will say",
    "start": "608839",
    "end": "611120"
  },
  {
    "text": "okay well the max length is",
    "start": "611120",
    "end": "612839"
  },
  {
    "text": "256 now an important thing to note here",
    "start": "612839",
    "end": "614959"
  },
  {
    "text": "if you look at this formula it's",
    "start": "614959",
    "end": "615920"
  },
  {
    "text": "slightly different to before there's a",
    "start": "615920",
    "end": "617240"
  },
  {
    "text": "times four there uh something I learned",
    "start": "617240",
    "end": "620720"
  },
  {
    "text": "recently open API schemers use runes for",
    "start": "620720",
    "end": "623560"
  },
  {
    "text": "their max length and if you convert a",
    "start": "623560",
    "end": "625839"
  },
  {
    "text": "rune into a bite the worst case is four",
    "start": "625839",
    "end": "627839"
  },
  {
    "text": "byes per rune so to work out the",
    "start": "627839",
    "end": "630320"
  },
  {
    "text": "accurate cost in the worst case we have",
    "start": "630320",
    "end": "632040"
  },
  {
    "text": "to multiply that length by four so again",
    "start": "632040",
    "end": "634680"
  },
  {
    "text": "we can plug this in a max length of 256",
    "start": "634680",
    "end": "636839"
  },
  {
    "text": "with that Rex and we end up at 2,885",
    "start": "636839",
    "end": "640639"
  },
  {
    "text": "Cost units starting to creep",
    "start": "640639",
    "end": "644279"
  },
  {
    "text": "up but what happens when you don't have",
    "start": "644279",
    "end": "646920"
  },
  {
    "text": "a length I'm going to wager that most of",
    "start": "646920",
    "end": "649240"
  },
  {
    "text": "us in this room at some point have",
    "start": "649240",
    "end": "650320"
  },
  {
    "text": "written a crd and forgotten to put a max",
    "start": "650320",
    "end": "652000"
  },
  {
    "text": "length on that string field well that's",
    "start": "652000",
    "end": "654720"
  },
  {
    "text": "where again the API server has to work",
    "start": "654720",
    "end": "656279"
  },
  {
    "text": "out the worst case so what it does is",
    "start": "656279",
    "end": "658800"
  },
  {
    "text": "assume that your entire request is that",
    "start": "658800",
    "end": "661000"
  },
  {
    "text": "field so the maximum request size is 3",
    "start": "661000",
    "end": "664320"
  },
  {
    "text": "megabytes uh a string has to be in",
    "start": "664320",
    "end": "666680"
  },
  {
    "text": "quoted uh to be valid Jason so we take",
    "start": "666680",
    "end": "669519"
  },
  {
    "text": "three megabites we take the two off and",
    "start": "669519",
    "end": "671880"
  },
  {
    "text": "that is our worst case in bytes that",
    "start": "671880",
    "end": "674279"
  },
  {
    "text": "would be equivalent to roughly",
    "start": "674279",
    "end": "676590"
  },
  {
    "text": "[Music]",
    "start": "676590",
    "end": "677680"
  },
  {
    "text": "790,000 characters in the in the",
    "start": "677680",
    "end": "680880"
  },
  {
    "text": "schema so when we flood that in suddenly",
    "start": "680880",
    "end": "684000"
  },
  {
    "text": "we're at cost of 8.8 million cost units",
    "start": "684000",
    "end": "687240"
  },
  {
    "text": "88% of our budget just on that one",
    "start": "687240",
    "end": "691320"
  },
  {
    "text": "rule now going back to the list so this",
    "start": "691320",
    "end": "695079"
  },
  {
    "text": "time we've taken that same rule we've",
    "start": "695079",
    "end": "697000"
  },
  {
    "text": "got the X matches with the same",
    "start": "697000",
    "end": "698760"
  },
  {
    "text": "validation we had before the items again",
    "start": "698760",
    "end": "700800"
  },
  {
    "text": "have a max length of 256 so the step",
    "start": "700800",
    "end": "703600"
  },
  {
    "text": "cost here we know from the previous",
    "start": "703600",
    "end": "705160"
  },
  {
    "text": "slide 2885 but again we don't know the",
    "start": "705160",
    "end": "707880"
  },
  {
    "text": "length of this",
    "start": "707880",
    "end": "709040"
  },
  {
    "text": "list well that's where it looks at Max",
    "start": "709040",
    "end": "711880"
  },
  {
    "text": "items so if you've put Max items 1024",
    "start": "711880",
    "end": "715000"
  },
  {
    "text": "1024 times the rest of that formula and",
    "start": "715000",
    "end": "717519"
  },
  {
    "text": "we work out about 3 million cost units",
    "start": "717519",
    "end": "720160"
  },
  {
    "text": "so that's fairly straightforward you may",
    "start": "720160",
    "end": "722519"
  },
  {
    "text": "be predicting where this is going but",
    "start": "722519",
    "end": "724920"
  },
  {
    "text": "what if we don't know so again we have",
    "start": "724920",
    "end": "728160"
  },
  {
    "text": "to work out what is the worst case",
    "start": "728160",
    "end": "729639"
  },
  {
    "text": "length for this list and for that we",
    "start": "729639",
    "end": "732160"
  },
  {
    "text": "have to work out how many items could we",
    "start": "732160",
    "end": "735199"
  },
  {
    "text": "possibly have in the list if this was",
    "start": "735199",
    "end": "737279"
  },
  {
    "text": "the only field in the API and to do that",
    "start": "737279",
    "end": "740360"
  },
  {
    "text": "we need to know the minimum size of the",
    "start": "740360",
    "end": "741680"
  },
  {
    "text": "item in the list so in this case we've",
    "start": "741680",
    "end": "743800"
  },
  {
    "text": "got a string list minimum size of a",
    "start": "743800",
    "end": "745800"
  },
  {
    "text": "string is the empty string it's a pair",
    "start": "745800",
    "end": "747199"
  },
  {
    "text": "of quotes so we can take the formula",
    "start": "747199",
    "end": "750120"
  },
  {
    "text": "uh 3 megab minus the two for the ends of",
    "start": "750120",
    "end": "752720"
  },
  {
    "text": "the array uh over Min size plus one and",
    "start": "752720",
    "end": "757399"
  },
  {
    "text": "you get just over a million items in",
    "start": "757399",
    "end": "760040"
  },
  {
    "text": "this list now that number three billion",
    "start": "760040",
    "end": "763519"
  },
  {
    "text": "is 300 times my cost budget that's why",
    "start": "763519",
    "end": "766760"
  },
  {
    "text": "it said 100 times earlier it's very easy",
    "start": "766760",
    "end": "769079"
  },
  {
    "text": "if you forget ad Max items to end up way",
    "start": "769079",
    "end": "771959"
  },
  {
    "text": "way over budget now not every list is",
    "start": "771959",
    "end": "775120"
  },
  {
    "text": "built equal not every list is a list of",
    "start": "775120",
    "end": "777079"
  },
  {
    "text": "strings in fact here's an example of a",
    "start": "777079",
    "end": "779360"
  },
  {
    "text": "list where you have a key and a value",
    "start": "779360",
    "end": "781480"
  },
  {
    "text": "and both of those are required Fields",
    "start": "781480",
    "end": "783560"
  },
  {
    "text": "now for objects the way to calculate the",
    "start": "783560",
    "end": "785160"
  },
  {
    "text": "minimum size is slightly different what",
    "start": "785160",
    "end": "787320"
  },
  {
    "text": "you need to do is take the minimum size",
    "start": "787320",
    "end": "788560"
  },
  {
    "text": "of adjacent object which is an empty",
    "start": "788560",
    "end": "790519"
  },
  {
    "text": "pair of braces and then add the size of",
    "start": "790519",
    "end": "793199"
  },
  {
    "text": "each required field so in this case we",
    "start": "793199",
    "end": "795560"
  },
  {
    "text": "have key and value we take the length of",
    "start": "795560",
    "end": "798079"
  },
  {
    "text": "the name the minimum serialized size of",
    "start": "798079",
    "end": "799920"
  },
  {
    "text": "the thing within it be that an object or",
    "start": "799920",
    "end": "801399"
  },
  {
    "text": "a string again this could be",
    "start": "801399",
    "end": "803120"
  },
  {
    "text": "recursive and then plus four for the",
    "start": "803120",
    "end": "805199"
  },
  {
    "text": "quotes the colon and the comma and you",
    "start": "805199",
    "end": "808160"
  },
  {
    "text": "can work out the",
    "start": "808160",
    "end": "809880"
  },
  {
    "text": "the minimum size of this object so this",
    "start": "809880",
    "end": "812560"
  },
  {
    "text": "is 22 if we go back then to working out",
    "start": "812560",
    "end": "815519"
  },
  {
    "text": "what the worst case is on this we plug",
    "start": "815519",
    "end": "817800"
  },
  {
    "text": "that back into the formula we had before",
    "start": "817800",
    "end": "819920"
  },
  {
    "text": "and we're down to 395 million cost units",
    "start": "819920",
    "end": "823519"
  },
  {
    "text": "still nearly 40 times over budget but",
    "start": "823519",
    "end": "826480"
  },
  {
    "text": "only 137,000 items this time not the 1",
    "start": "826480",
    "end": "829639"
  },
  {
    "text": "million we had in the previous",
    "start": "829639",
    "end": "831720"
  },
  {
    "text": "example so you might also be thinking",
    "start": "831720",
    "end": "835759"
  },
  {
    "text": "well these rules are the same right",
    "start": "835759",
    "end": "838000"
  },
  {
    "text": "you've you've done the same thing you've",
    "start": "838000",
    "end": "839279"
  },
  {
    "text": "selfed all with the same Rex well why",
    "start": "839279",
    "end": "840959"
  },
  {
    "text": "don't we just move that back down into",
    "start": "840959",
    "end": "842240"
  },
  {
    "text": "the items so in this case we know the",
    "start": "842240",
    "end": "845360"
  },
  {
    "text": "cost of that right the max length is 256",
    "start": "845360",
    "end": "847519"
  },
  {
    "text": "we've seen this example 2885 is our cost",
    "start": "847519",
    "end": "850839"
  },
  {
    "text": "well that's pretty clever and In",
    "start": "850839",
    "end": "853240"
  },
  {
    "text": "fairness I would totally do that bring",
    "start": "853240",
    "end": "854920"
  },
  {
    "text": "the validation down as low as you can",
    "start": "854920",
    "end": "857000"
  },
  {
    "text": "but now we need to talk about what",
    "start": "857000",
    "end": "858040"
  },
  {
    "text": "cardinality is so audience participation",
    "start": "858040",
    "end": "862920"
  },
  {
    "text": "point if this R is part of the schema",
    "start": "862920",
    "end": "865680"
  },
  {
    "text": "how many times do we think this R is",
    "start": "865680",
    "end": "867000"
  },
  {
    "text": "going to execute on the worst case",
    "start": "867000",
    "end": "871040"
  },
  {
    "text": "okay",
    "start": "874199",
    "end": "875519"
  },
  {
    "text": "once you can only have this field in the",
    "start": "875519",
    "end": "877560"
  },
  {
    "text": "schema once uh the open API V3 schema at",
    "start": "877560",
    "end": "880000"
  },
  {
    "text": "the top is like this is the entire",
    "start": "880000",
    "end": "881880"
  },
  {
    "text": "schema that we have if we move on to a",
    "start": "881880",
    "end": "884759"
  },
  {
    "text": "list again we have this rule here in the",
    "start": "884759",
    "end": "887720"
  },
  {
    "text": "list acting on the list anyone want to",
    "start": "887720",
    "end": "893000"
  },
  {
    "text": "guess it's not a thousand it's only once",
    "start": "893040",
    "end": "896519"
  },
  {
    "text": "we're operating on the list itself but",
    "start": "896519",
    "end": "899040"
  },
  {
    "text": "but if I come back to you on the next",
    "start": "899040",
    "end": "900560"
  },
  {
    "text": "one what do you think this one",
    "start": "900560",
    "end": "904360"
  },
  {
    "text": "is this time is a thousand exactly and",
    "start": "904680",
    "end": "907759"
  },
  {
    "text": "that's why that previous example",
    "start": "907759",
    "end": "908959"
  },
  {
    "text": "wouldn't work right we have to take the",
    "start": "908959",
    "end": "911480"
  },
  {
    "text": "rule that's in the items and multiply it",
    "start": "911480",
    "end": "913519"
  },
  {
    "text": "by the number of items that could be in",
    "start": "913519",
    "end": "915079"
  },
  {
    "text": "the list so it would have been whatever",
    "start": "915079",
    "end": "916839"
  },
  {
    "text": "the size of that list was times a",
    "start": "916839",
    "end": "920240"
  },
  {
    "text": "2885 now what's the",
    "start": "920440",
    "end": "923880"
  },
  {
    "text": "cardinality so again we don't know",
    "start": "924920",
    "end": "927519"
  },
  {
    "text": "there's no Max items so again the API",
    "start": "927519",
    "end": "930120"
  },
  {
    "text": "server has to fall back to what is the",
    "start": "930120",
    "end": "932000"
  },
  {
    "text": "worst case now this time and I don't",
    "start": "932000",
    "end": "934759"
  },
  {
    "text": "actually know why this is there's a",
    "start": "934759",
    "end": "936519"
  },
  {
    "text": "different formula used and because this",
    "start": "936519",
    "end": "939600"
  },
  {
    "text": "all has to be stable otherwise it's a",
    "start": "939600",
    "end": "940880"
  },
  {
    "text": "breaking change this will never change",
    "start": "940880",
    "end": "942319"
  },
  {
    "text": "cube is stuck with this",
    "start": "942319",
    "end": "945319"
  },
  {
    "text": "inconsistency this time to work out the",
    "start": "945319",
    "end": "948279"
  },
  {
    "text": "we call this unbounded cardinality the",
    "start": "948279",
    "end": "950560"
  },
  {
    "text": "maximum number of times we could",
    "start": "950560",
    "end": "951680"
  },
  {
    "text": "possibly execute this we do the 3",
    "start": "951680",
    "end": "953720"
  },
  {
    "text": "megabytes over Min size plus one we are",
    "start": "953720",
    "end": "955680"
  },
  {
    "text": "missing the minus two off that top uh of",
    "start": "955680",
    "end": "957920"
  },
  {
    "text": "the denominator so again it makes very",
    "start": "957920",
    "end": "960800"
  },
  {
    "text": "negligable difference we're still at 3",
    "start": "960800",
    "end": "962800"
  },
  {
    "text": "billion cost units we're still 300 times",
    "start": "962800",
    "end": "965600"
  },
  {
    "text": "over now when I saw this that got me",
    "start": "965600",
    "end": "968880"
  },
  {
    "text": "thinking which of these do we",
    "start": "968880",
    "end": "971560"
  },
  {
    "text": "prefer anyone anyone prefer",
    "start": "971560",
    "end": "975000"
  },
  {
    "text": "left anyone prefer",
    "start": "975000",
    "end": "977440"
  },
  {
    "text": "right well I prefer the left it is ever",
    "start": "977440",
    "end": "981199"
  },
  {
    "text": "so slightly cheaper um it's 0.1% cheaper",
    "start": "981199",
    "end": "984800"
  },
  {
    "text": "for some reason uh I say some reason on",
    "start": "984800",
    "end": "987680"
  },
  {
    "text": "the right hand side by doing self. all",
    "start": "987680",
    "end": "990000"
  },
  {
    "text": "we're actually including the cost of",
    "start": "990000",
    "end": "991519"
  },
  {
    "text": "that iteration within the cost analysis",
    "start": "991519",
    "end": "994240"
  },
  {
    "text": "but on the left hand side the iteration",
    "start": "994240",
    "end": "997399"
  },
  {
    "text": "and going over the loop is outside of",
    "start": "997399",
    "end": "998920"
  },
  {
    "text": "cell and therefore isn't calculated into",
    "start": "998920",
    "end": "1000519"
  },
  {
    "text": "the cost again I don't know why there's",
    "start": "1000519",
    "end": "1002839"
  },
  {
    "text": "this minor discrepancy I haven't talked",
    "start": "1002839",
    "end": "1004360"
  },
  {
    "text": "to API Machinery about it but there is a",
    "start": "1004360",
    "end": "1006519"
  },
  {
    "text": "slight",
    "start": "1006519",
    "end": "1007560"
  },
  {
    "text": "difference that also got me wondering",
    "start": "1007560",
    "end": "1009519"
  },
  {
    "text": "well what happens then if we wanted to",
    "start": "1009519",
    "end": "1011800"
  },
  {
    "text": "go the other way is there a time where",
    "start": "1011800",
    "end": "1013120"
  },
  {
    "text": "the right hand side is better so I put",
    "start": "1013120",
    "end": "1015279"
  },
  {
    "text": "together some silly maths and Tred to",
    "start": "1015279",
    "end": "1016440"
  },
  {
    "text": "work this out and I worked out that if",
    "start": "1016440",
    "end": "1018160"
  },
  {
    "text": "we have yal 3x the rule cost is three",
    "start": "1018160",
    "end": "1020120"
  },
  {
    "text": "times calculated cardinality then they",
    "start": "1020120",
    "end": "1021680"
  },
  {
    "text": "would be equilibrium and if we went",
    "start": "1021680",
    "end": "1023639"
  },
  {
    "text": "further then the right hand side would",
    "start": "1023639",
    "end": "1025520"
  },
  {
    "text": "be the cheaper option but to do this the",
    "start": "1025520",
    "end": "1028839"
  },
  {
    "text": "rule cost would either have to be",
    "start": "1028839",
    "end": "1030240"
  },
  {
    "text": "incredibly high or the calculat",
    "start": "1030240",
    "end": "1032959"
  },
  {
    "text": "cardinality would have to be incredibly",
    "start": "1032959",
    "end": "1034400"
  },
  {
    "text": "low and to get that you'd have to have a",
    "start": "1034400",
    "end": "1036480"
  },
  {
    "text": "massive massive object with lots of",
    "start": "1036480",
    "end": "1037959"
  },
  {
    "text": "required Fields I also then worked out",
    "start": "1037959",
    "end": "1040480"
  },
  {
    "text": "that actually this is a rounding error",
    "start": "1040480",
    "end": "1042000"
  },
  {
    "text": "anyway and unless you happen to have an",
    "start": "1042000",
    "end": "1045280"
  },
  {
    "text": "exactly",
    "start": "1045280",
    "end": "1047360"
  },
  {
    "text": "uh factor of 3 megabytes as your minimum",
    "start": "1047360",
    "end": "1050400"
  },
  {
    "text": "serialized size this formula falls apart",
    "start": "1050400",
    "end": "1053039"
  },
  {
    "text": "and you end up with y equals z so it",
    "start": "1053039",
    "end": "1054320"
  },
  {
    "text": "doesn't",
    "start": "1054320",
    "end": "1055200"
  },
  {
    "text": "work now as I mentioned earlier some of",
    "start": "1055200",
    "end": "1058039"
  },
  {
    "text": "you have probably sat there thinking oh",
    "start": "1058039",
    "end": "1059440"
  },
  {
    "text": "well my API doesn't have any limits so",
    "start": "1059440",
    "end": "1062200"
  },
  {
    "text": "what does it mean then that I can do",
    "start": "1062200",
    "end": "1065240"
  },
  {
    "text": "well if we take the unbounded array of",
    "start": "1065240",
    "end": "1066720"
  },
  {
    "text": "strings option and we know that the",
    "start": "1066720",
    "end": "1068480"
  },
  {
    "text": "limit is 10,000 and we refactor the uh",
    "start": "1068480",
    "end": "1071240"
  },
  {
    "text": "formula and work backwards we can work",
    "start": "1071240",
    "end": "1073440"
  },
  {
    "text": "out if you do have an unbounded array of",
    "start": "1073440",
    "end": "1074760"
  },
  {
    "text": "strings you can afford nine units on",
    "start": "1074760",
    "end": "1077120"
  },
  {
    "text": "your validation any more than than that",
    "start": "1077120",
    "end": "1079159"
  },
  {
    "text": "and you blow the budget for the Rex",
    "start": "1079159",
    "end": "1081880"
  },
  {
    "text": "again if we rearrange that you could",
    "start": "1081880",
    "end": "1083799"
  },
  {
    "text": "have 127 characters in your Rex but no",
    "start": "1083799",
    "end": "1087600"
  },
  {
    "text": "more and",
    "start": "1087600",
    "end": "1090400"
  },
  {
    "text": "that's yeah I do need to start wrapping",
    "start": "1090400",
    "end": "1092760"
  },
  {
    "text": "up uh",
    "start": "1092760",
    "end": "1094679"
  },
  {
    "text": "so looking at what we've touched on so",
    "start": "1094679",
    "end": "1097919"
  },
  {
    "text": "far today primarily it's been focusing",
    "start": "1097919",
    "end": "1099960"
  },
  {
    "text": "on that matches function and that's what",
    "start": "1099960",
    "end": "1101480"
  },
  {
    "text": "because it's one of the more complicated",
    "start": "1101480",
    "end": "1102679"
  },
  {
    "text": "ones but there are lots of different",
    "start": "1102679",
    "end": "1104799"
  },
  {
    "text": "functions and they all have different",
    "start": "1104799",
    "end": "1105799"
  },
  {
    "text": "formulas for how they're calculated lots",
    "start": "1105799",
    "end": "1108000"
  },
  {
    "text": "of the functions you're just looking at",
    "start": "1108000",
    "end": "1109480"
  },
  {
    "text": "a string and paing it checking if it's a",
    "start": "1109480",
    "end": "1111200"
  },
  {
    "text": "valid URL or quantity the cost of that",
    "start": "1111200",
    "end": "1114360"
  },
  {
    "text": "is just proportional to the input string",
    "start": "1114360",
    "end": "1115960"
  },
  {
    "text": "there's nothing more complicated size of",
    "start": "1115960",
    "end": "1117480"
  },
  {
    "text": "the input times a traversal Factor where",
    "start": "1117480",
    "end": "1120000"
  },
  {
    "text": "you're doing allocations as well split",
    "start": "1120000",
    "end": "1122240"
  },
  {
    "text": "join and replace that's estimated as",
    "start": "1122240",
    "end": "1123880"
  },
  {
    "text": "double the size we've got the matches",
    "start": "1123880",
    "end": "1126000"
  },
  {
    "text": "and find all that we've already explored",
    "start": "1126000",
    "end": "1128360"
  },
  {
    "text": "accessing properties is constant we've",
    "start": "1128360",
    "end": "1130840"
  },
  {
    "text": "looked at the uh array iteration and",
    "start": "1130840",
    "end": "1133919"
  },
  {
    "text": "then there's some interesting sort of",
    "start": "1133919",
    "end": "1135440"
  },
  {
    "text": "side notes so some things in the cell",
    "start": "1135440",
    "end": "1138919"
  },
  {
    "text": "analysis are slightly more clever than",
    "start": "1138919",
    "end": "1140200"
  },
  {
    "text": "you might think when you pass an IP",
    "start": "1140200",
    "end": "1142960"
  },
  {
    "text": "address you're not paing it into a",
    "start": "1142960",
    "end": "1145400"
  },
  {
    "text": "string you're passing it into a list of",
    "start": "1145400",
    "end": "1146640"
  },
  {
    "text": "bites and so in the worst case that's an",
    "start": "1146640",
    "end": "1149080"
  },
  {
    "text": "IPv6 address so it' be 16 bytes so the",
    "start": "1149080",
    "end": "1151799"
  },
  {
    "text": "cost of comparing two IPv6 addresses is",
    "start": "1151799",
    "end": "1154840"
  },
  {
    "text": "32 * the string traversal cost Factor",
    "start": "1154840",
    "end": "1157720"
  },
  {
    "text": "not 39 * 2 * the string traversal cost",
    "start": "1157720",
    "end": "1161400"
  },
  {
    "text": "factor which is what it would be as a",
    "start": "1161400",
    "end": "1162960"
  },
  {
    "text": "string so there are a few of those",
    "start": "1162960",
    "end": "1164880"
  },
  {
    "text": "special cases in there there's links to",
    "start": "1164880",
    "end": "1166760"
  },
  {
    "text": "how this is all implemented at the",
    "start": "1166760",
    "end": "1167919"
  },
  {
    "text": "bottom of the slide if you you want to",
    "start": "1167919",
    "end": "1168960"
  },
  {
    "text": "go and look at it um and then also just",
    "start": "1168960",
    "end": "1171600"
  },
  {
    "text": "to recap some of those things you might",
    "start": "1171600",
    "end": "1173559"
  },
  {
    "text": "want to have on in your mind when you're",
    "start": "1173559",
    "end": "1175360"
  },
  {
    "text": "writing your validations the worst case",
    "start": "1175360",
    "end": "1177480"
  },
  {
    "text": "for the string just over 3 million we",
    "start": "1177480",
    "end": "1179960"
  },
  {
    "text": "should probably shrink that if we want",
    "start": "1179960",
    "end": "1181240"
  },
  {
    "text": "to uh working out the worst case length",
    "start": "1181240",
    "end": "1183559"
  },
  {
    "text": "of thebr and the unbounded cardinality",
    "start": "1183559",
    "end": "1185640"
  },
  {
    "text": "all useful things to know now as",
    "start": "1185640",
    "end": "1188720"
  },
  {
    "text": "promised what do we need to know to",
    "start": "1188720",
    "end": "1190559"
  },
  {
    "text": "avoid blowing the budget well I suggest",
    "start": "1190559",
    "end": "1193600"
  },
  {
    "text": "you make friends with these two markers",
    "start": "1193600",
    "end": "1195679"
  },
  {
    "text": "so CU Builder validation max length and",
    "start": "1195679",
    "end": "1197960"
  },
  {
    "text": "Max items",
    "start": "1197960",
    "end": "1199520"
  },
  {
    "text": "every string that you have in your",
    "start": "1199520",
    "end": "1200760"
  },
  {
    "text": "schema unless it has a particular format",
    "start": "1200760",
    "end": "1203440"
  },
  {
    "text": "say enum or date time needs to have a",
    "start": "1203440",
    "end": "1206280"
  },
  {
    "text": "maximum length every array that you have",
    "start": "1206280",
    "end": "1209440"
  },
  {
    "text": "should also have a maximum length and I",
    "start": "1209440",
    "end": "1211840"
  },
  {
    "text": "say this even if you're not currently",
    "start": "1211840",
    "end": "1213280"
  },
  {
    "text": "using cell if you've written a crd and",
    "start": "1213280",
    "end": "1215960"
  },
  {
    "text": "you've got an array and later you want",
    "start": "1215960",
    "end": "1217320"
  },
  {
    "text": "to add a new field that's optional",
    "start": "1217320",
    "end": "1218840"
  },
  {
    "text": "within that array and you haven't got an",
    "start": "1218840",
    "end": "1220880"
  },
  {
    "text": "Unbound if you haven't got a bound on",
    "start": "1220880",
    "end": "1223080"
  },
  {
    "text": "the length of your array you're going to",
    "start": "1223080",
    "end": "1225000"
  },
  {
    "text": "find it very difficult to add cell",
    "start": "1225000",
    "end": "1226400"
  },
  {
    "text": "validations in so make sure that you",
    "start": "1226400",
    "end": "1228960"
  },
  {
    "text": "even when you're not using cell add",
    "start": "1228960",
    "end": "1231080"
  },
  {
    "text": "those limits think about the use case",
    "start": "1231080",
    "end": "1233559"
  },
  {
    "text": "think about something sensible make sure",
    "start": "1233559",
    "end": "1235400"
  },
  {
    "text": "you've got enough head room um for a",
    "start": "1235400",
    "end": "1238000"
  },
  {
    "text": "concrete example of this in the cluster",
    "start": "1238000",
    "end": "1240400"
  },
  {
    "text": "API Community we recently are",
    "start": "1240400",
    "end": "1241840"
  },
  {
    "text": "refracturing the way that conditions",
    "start": "1241840",
    "end": "1243159"
  },
  {
    "text": "work we know that we have eight or nine",
    "start": "1243159",
    "end": "1245480"
  },
  {
    "text": "conditions on resources we set the",
    "start": "1245480",
    "end": "1247360"
  },
  {
    "text": "length limit to 32 it gives us plenty of",
    "start": "1247360",
    "end": "1249840"
  },
  {
    "text": "headro for expansion in the future and",
    "start": "1249840",
    "end": "1252799"
  },
  {
    "text": "even if you do need to expand that in",
    "start": "1252799",
    "end": "1254080"
  },
  {
    "text": "the future relaxing a validation is",
    "start": "1254080",
    "end": "1255840"
  },
  {
    "text": "easier as a breaking change than",
    "start": "1255840",
    "end": "1258039"
  },
  {
    "text": "restricting",
    "start": "1258039",
    "end": "1260039"
  },
  {
    "text": "and just kind of in case you really",
    "start": "1260039",
    "end": "1262120"
  },
  {
    "text": "can't work it out in all of my time",
    "start": "1262120",
    "end": "1264240"
  },
  {
    "text": "doing API reviews since I've been using",
    "start": "1264240",
    "end": "1265720"
  },
  {
    "text": "cell I've never seen anyone need more",
    "start": "1265720",
    "end": "1267520"
  },
  {
    "text": "than 256 items in a list and I've never",
    "start": "1267520",
    "end": "1269440"
  },
  {
    "text": "seen anyone need more than 4,096 items",
    "start": "1269440",
    "end": "1271679"
  },
  {
    "text": "in a in a string uh but yeah think about",
    "start": "1271679",
    "end": "1275159"
  },
  {
    "text": "your use",
    "start": "1275159",
    "end": "1276120"
  },
  {
    "text": "case and then just before I go think",
    "start": "1276120",
    "end": "1279440"
  },
  {
    "text": "about checking your work so there's two",
    "start": "1279440",
    "end": "1281440"
  },
  {
    "text": "ways that we do this um so one is using",
    "start": "1281440",
    "end": "1283919"
  },
  {
    "text": "integration tests if you're not familiar",
    "start": "1283919",
    "end": "1285880"
  },
  {
    "text": "with the m test project I thoroughly",
    "start": "1285880",
    "end": "1287360"
  },
  {
    "text": "recommend it uh part of Cu Builder and",
    "start": "1287360",
    "end": "1289360"
  },
  {
    "text": "controller runtime spins up a temporary",
    "start": "1289360",
    "end": "1291120"
  },
  {
    "text": "HPI server will install the cdes and",
    "start": "1291120",
    "end": "1294279"
  },
  {
    "text": "check all of this for you and then the",
    "start": "1294279",
    "end": "1296679"
  },
  {
    "text": "second project is something that",
    "start": "1296679",
    "end": "1297600"
  },
  {
    "text": "currently exists with an open shift but",
    "start": "1297600",
    "end": "1299000"
  },
  {
    "text": "we're working to Upstream this with Sig",
    "start": "1299000",
    "end": "1300440"
  },
  {
    "text": "API Machinery the idea behind this",
    "start": "1300440",
    "end": "1302880"
  },
  {
    "text": "Checker is it takes the crd schema",
    "start": "1302880",
    "end": "1305200"
  },
  {
    "text": "Compares it to the old one and finds",
    "start": "1305200",
    "end": "1306640"
  },
  {
    "text": "breaking changes but it's also being",
    "start": "1306640",
    "end": "1308679"
  },
  {
    "text": "used as a bit of a linter and can be",
    "start": "1308679",
    "end": "1310360"
  },
  {
    "text": "used in CI to kind of lint your schemers",
    "start": "1310360",
    "end": "1313279"
  },
  {
    "text": "now recently we added cell cost",
    "start": "1313279",
    "end": "1314960"
  },
  {
    "text": "validation to this and in fact earlier",
    "start": "1314960",
    "end": "1317480"
  },
  {
    "text": "this week we merged some stuff into this",
    "start": "1317480",
    "end": "1319279"
  },
  {
    "text": "to explain the validations so things",
    "start": "1319279",
    "end": "1322159"
  },
  {
    "text": "like finding your unbounded lists",
    "start": "1322159",
    "end": "1324000"
  },
  {
    "text": "working out what the cardinality is and",
    "start": "1324000",
    "end": "1325559"
  },
  {
    "text": "working out the rule cost this will all",
    "start": "1325559",
    "end": "1327400"
  },
  {
    "text": "get printed out so you can kind of",
    "start": "1327400",
    "end": "1328679"
  },
  {
    "text": "inspect that and understand that better",
    "start": "1328679",
    "end": "1330840"
  },
  {
    "text": "as part of your CI",
    "start": "1330840",
    "end": "1333640"
  },
  {
    "text": "run and that's all I have for today so",
    "start": "1333640",
    "end": "1336039"
  },
  {
    "text": "if you have any feedback QR codes there",
    "start": "1336039",
    "end": "1337799"
  },
  {
    "text": "and if you have any questions there's a",
    "start": "1337799",
    "end": "1339039"
  },
  {
    "text": "couple of microphones either side which",
    "start": "1339039",
    "end": "1341080"
  },
  {
    "text": "I'm hoping should be switched on shortly",
    "start": "1341080",
    "end": "1343279"
  },
  {
    "text": "thank you very much",
    "start": "1343279",
    "end": "1344910"
  },
  {
    "text": "[Applause]",
    "start": "1344910",
    "end": "1351339"
  },
  {
    "text": "I assume the budgets are hardcoded are",
    "start": "1353360",
    "end": "1355279"
  },
  {
    "text": "there any plans to make it configurable",
    "start": "1355279",
    "end": "1357240"
  },
  {
    "text": "in the future or would that just totally",
    "start": "1357240",
    "end": "1358799"
  },
  {
    "text": "upset the formula in terms of the",
    "start": "1358799",
    "end": "1360720"
  },
  {
    "text": "formula seems kind of aligned to the",
    "start": "1360720",
    "end": "1362520"
  },
  {
    "text": "budget uh so the budgets could be",
    "start": "1362520",
    "end": "1365000"
  },
  {
    "text": "configured in theory you could patch it",
    "start": "1365000",
    "end": "1367480"
  },
  {
    "text": "but as far as I'm aware Sig API",
    "start": "1367480",
    "end": "1369559"
  },
  {
    "text": "machinery would probably consider that a",
    "start": "1369559",
    "end": "1370799"
  },
  {
    "text": "breaking change bear in mind that if it",
    "start": "1370799",
    "end": "1372760"
  },
  {
    "text": "was restricted anything that exists",
    "start": "1372760",
    "end": "1374240"
  },
  {
    "text": "today would suddenly start failing the",
    "start": "1374240",
    "end": "1375840"
  },
  {
    "text": "validation and if it was relaxed in",
    "start": "1375840",
    "end": "1378039"
  },
  {
    "text": "theory anyone who anyone who was already",
    "start": "1378039",
    "end": "1381320"
  },
  {
    "text": "running it could start consuming more",
    "start": "1381320",
    "end": "1383000"
  },
  {
    "text": "CPU than it was so I expect that budget",
    "start": "1383000",
    "end": "1386840"
  },
  {
    "text": "will never",
    "start": "1386840",
    "end": "1389240"
  },
  {
    "text": "change okay if there's no other",
    "start": "1396000",
    "end": "1397880"
  },
  {
    "text": "questions then we can wrap thank you all",
    "start": "1397880",
    "end": "1401960"
  }
]