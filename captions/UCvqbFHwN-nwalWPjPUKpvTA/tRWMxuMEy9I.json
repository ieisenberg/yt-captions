[
  {
    "text": "hi my name is brandon and i'm here today with my co-speaker harsho and we're going to talk to you about a",
    "start": "80",
    "end": "7120"
  },
  {
    "text": "problem that would have been easy to answer 30 years ago which is where's my workload running",
    "start": "7120",
    "end": "12960"
  },
  {
    "text": "and the answer would be simple it'll be yeah you know it's a room it's in the room on the seventh floor or something",
    "start": "12960",
    "end": "19520"
  },
  {
    "text": "but today when asked about where my workload is we say the cloud with virtualization",
    "start": "19520",
    "end": "25480"
  },
  {
    "text": "containerization and layers of abstraction coming into place the answer to this is not as",
    "start": "25480",
    "end": "31840"
  },
  {
    "text": "straightforward anymore whereas my workload after all the",
    "start": "31840",
    "end": "37120"
  },
  {
    "text": "compute has to live somewhere both logically and physically in a country in a room in a server",
    "start": "37120",
    "end": "44480"
  },
  {
    "text": "in bare metal but why does this matter",
    "start": "44480",
    "end": "49600"
  },
  {
    "text": "there are several reasons why this would matter first there is if our container contains confidential",
    "start": "50719",
    "end": "56640"
  },
  {
    "text": "code trade secrets for example top secret trading or military algorithms we wouldn't want our code to",
    "start": "56640",
    "end": "62800"
  },
  {
    "text": "be accidentally run in data centers we don't own you know also even in someone's basement for",
    "start": "62800",
    "end": "68640"
  },
  {
    "text": "example the second is for compliance reasons and highly regulated industries like",
    "start": "68640",
    "end": "74479"
  },
  {
    "text": "financial federal and healthcare for these industries they go even a step further they not only require the",
    "start": "74479",
    "end": "81119"
  },
  {
    "text": "container workload to be tied to a physical location but they also want to ensure that the underlying technology stack of the",
    "start": "81119",
    "end": "86960"
  },
  {
    "text": "machine is attested and approved and finally the last is for things such",
    "start": "86960",
    "end": "93360"
  },
  {
    "text": "as export control or to enforce other legal regulations",
    "start": "93360",
    "end": "100159"
  },
  {
    "text": "so this is exactly the problem we're going to talk about today how do i tie compute execution of my container to a",
    "start": "100159",
    "end": "106159"
  },
  {
    "text": "specific location and this is also called execution geofencing",
    "start": "106159",
    "end": "111920"
  },
  {
    "text": "and by the end of the talk today we're going to learn how to do this with containers",
    "start": "111920",
    "end": "117758"
  },
  {
    "text": "our claim is container image encryption plus key management equals execution drill fencing and we",
    "start": "117840",
    "end": "124320"
  },
  {
    "text": "will show this so to start exploring that we're going",
    "start": "124320",
    "end": "129840"
  },
  {
    "text": "to first look at one of the underlying technologies which is container image encryption",
    "start": "129840",
    "end": "136080"
  },
  {
    "text": "so what is container image encryption so this is an effort that started almost two years ago",
    "start": "136959",
    "end": "142879"
  },
  {
    "text": "it basically allows the ability to encrypt a container image",
    "start": "142879",
    "end": "148000"
  },
  {
    "text": "the process of this is fairly simple on the left hand side during the build stage we add an encrypt",
    "start": "148000",
    "end": "153920"
  },
  {
    "text": "step and during the run time we add a decrypt step so between build and",
    "start": "153920",
    "end": "159200"
  },
  {
    "text": "runtime the container remains encrypted this means that the contents of the",
    "start": "159200",
    "end": "165280"
  },
  {
    "text": "image remains confidential over the network or even in the registry",
    "start": "165280",
    "end": "171840"
  },
  {
    "text": "so in a nutshell this technology enables us to encrypt a container image so that is only decryptable by a particular key",
    "start": "172640",
    "end": "179440"
  },
  {
    "text": "x and this means that we can retain the confidentiality of the image even if for example the registry is",
    "start": "179440",
    "end": "186560"
  },
  {
    "text": "hacked so this is a feature that's available today across various parts of the",
    "start": "186560",
    "end": "192319"
  },
  {
    "text": "ecosystem like builder scorpio container d cryo and the docker registry and we'll be",
    "start": "192319",
    "end": "198879"
  },
  {
    "text": "showing some of this in the demos today",
    "start": "198879",
    "end": "202720"
  },
  {
    "text": "so before we go ahead let's go through a quick um asymmetric crypto primer to see how this works",
    "start": "204319",
    "end": "212159"
  },
  {
    "text": "so in asymmetric cryptography such as rsa we use keepass made out of public portion which is not",
    "start": "212159",
    "end": "218239"
  },
  {
    "text": "secret and can be published and a private portion which is kept secret",
    "start": "218239",
    "end": "224480"
  },
  {
    "text": "we can encrypt a piece of data over here on the left with a public key to get the encrypted cipher text in red",
    "start": "224480",
    "end": "232319"
  },
  {
    "text": "and then the cipher text can then be decrypted by the private key which only the owner",
    "start": "232319",
    "end": "237599"
  },
  {
    "text": "has to obtain the plain text",
    "start": "237599",
    "end": "242239"
  },
  {
    "text": "so now let's go to example of encrypting image so over here we have address and we say we",
    "start": "243519",
    "end": "248640"
  },
  {
    "text": "want to encrypt an image for alice so let's go to the flow here so what else first has to do is to",
    "start": "248640",
    "end": "255840"
  },
  {
    "text": "generate an rsa key pair and then publish the public portion of a key",
    "start": "255840",
    "end": "262400"
  },
  {
    "text": "so given the key we can then go ahead and take our container image and encrypt it with a",
    "start": "262400",
    "end": "268400"
  },
  {
    "text": "public key we then take this encrypted image and push it to the registry",
    "start": "268400",
    "end": "273919"
  },
  {
    "text": "like docker hub",
    "start": "273919",
    "end": "276720"
  },
  {
    "text": "then find finally alice is able to pull the encrypted image and because only she has access to the",
    "start": "279680",
    "end": "285440"
  },
  {
    "text": "private key and no one else only she is able to successfully decrypt the image",
    "start": "285440",
    "end": "290720"
  },
  {
    "text": "and run the container so let's go ahead and take a quick look",
    "start": "290720",
    "end": "296400"
  },
  {
    "text": "at what the demo of this looks like so let's take a look at a demo on how we can encrypt an image for others um so on the left",
    "start": "296400",
    "end": "303280"
  },
  {
    "text": "hand side here we have lss workstation which is a brown terminal and the first step of it as we saw",
    "start": "303280",
    "end": "309199"
  },
  {
    "text": "earlier is generating the keys so we can do this by using the open ssl",
    "start": "309199",
    "end": "314720"
  },
  {
    "text": "command and we're generating our rsc keypad so over here we have a private and",
    "start": "314720",
    "end": "321600"
  },
  {
    "text": "public key as we saw earlier and what alice has to do now is she has to make a key",
    "start": "321600",
    "end": "327440"
  },
  {
    "text": "available so that we can encrypt an image for her so now we have the public key and we're",
    "start": "327440",
    "end": "334240"
  },
  {
    "text": "going to take this public key and we're going to simulate a different workstation and we are going to create an encrypted image",
    "start": "334240",
    "end": "340240"
  },
  {
    "text": "so that only address can decrypt it with a private key so on the right here i'm gonna copy and",
    "start": "340240",
    "end": "347199"
  },
  {
    "text": "as this public key and i'm gonna paste it in here and i'm",
    "start": "347199",
    "end": "352320"
  },
  {
    "text": "gonna build an image for alice so this is a really simple image uh it's a busy box that just cuts out",
    "start": "352320",
    "end": "359680"
  },
  {
    "text": "this is an encrypted image for alice and we are gonna use the builder tool to",
    "start": "359680",
    "end": "366720"
  },
  {
    "text": "build this image so builder but is kind of like docker build it takes",
    "start": "366720",
    "end": "371759"
  },
  {
    "text": "the docker file and builds an image and we are going to push this image to docker hub",
    "start": "371759",
    "end": "378240"
  },
  {
    "text": "so what we are going to do is we're going to say build up push and we're going to add additional flag",
    "start": "378240",
    "end": "384639"
  },
  {
    "text": "called encryption key to specify that we want to encrypt this so that it's only decryptable by azure's",
    "start": "384639",
    "end": "390720"
  },
  {
    "text": "private key so we say build a push encryption key and we have",
    "start": "390720",
    "end": "396080"
  },
  {
    "text": "the path in docker hub",
    "start": "396080",
    "end": "399280"
  },
  {
    "text": "and we can see that it's now successfully uploaded to docker hub",
    "start": "401840",
    "end": "408960"
  },
  {
    "text": "so now that this is done let us see where the address can then download and decrypt this image",
    "start": "408960",
    "end": "416240"
  },
  {
    "text": "so i'm just going to clear up the cache by just removing all the images currently in builder",
    "start": "416240",
    "end": "422479"
  },
  {
    "text": "and so what we're going to try now is we're going to say we're going to pull this image from docker hub",
    "start": "422479",
    "end": "428800"
  },
  {
    "text": "all right so you say build.pull with the image we just created",
    "start": "429680",
    "end": "435440"
  },
  {
    "text": "and we're going to see that it's going to try and pull the image but it's having some trouble with it",
    "start": "435440",
    "end": "441759"
  },
  {
    "text": "and so in a moment we're going to see here that it has an error that says missing",
    "start": "441759",
    "end": "447440"
  },
  {
    "text": "private keys needed for decryption now because the image was encrypted we",
    "start": "447440",
    "end": "452960"
  },
  {
    "text": "needed to provide a decryption key so that it can be decrypted so in this",
    "start": "452960",
    "end": "458319"
  },
  {
    "text": "case we have to add additional flag here to pass in as decrypt the private key",
    "start": "458319",
    "end": "465440"
  },
  {
    "text": "we have decryption key flag and then we say add this private key.pm",
    "start": "465440",
    "end": "472800"
  },
  {
    "text": "and what this is going to do now is it's going to successfully download and decrypt the image",
    "start": "472800",
    "end": "480800"
  },
  {
    "text": "we can then go ahead on addison's workstation we can run the image by using portman which is",
    "start": "480800",
    "end": "487520"
  },
  {
    "text": "kind of like docker run and we can see that it is running the encrypted image that we have created",
    "start": "487520",
    "end": "496000"
  },
  {
    "text": "all right so in the demo we just saw how we can create an encrypted image for others and how she was able to run it on her workstation",
    "start": "501120",
    "end": "509440"
  },
  {
    "text": "so next question adam says is how do i take this image and run it on my kubernetes cluster",
    "start": "509440",
    "end": "515200"
  },
  {
    "text": "so let's take a look at that so how encrypted container images work with kubernetes cluster is should",
    "start": "515200",
    "end": "522240"
  },
  {
    "text": "they contain a runtime such as cryo and container d these runtimes are responsible for",
    "start": "522240",
    "end": "528240"
  },
  {
    "text": "putting decrypting and unpacking the image and in order for the runtimes to be able to",
    "start": "528240",
    "end": "533360"
  },
  {
    "text": "decrypt the image they like address need to have access to the key material so today this can be",
    "start": "533360",
    "end": "540080"
  },
  {
    "text": "done by passing it to the file system and for example in cryo the default",
    "start": "540080",
    "end": "545600"
  },
  {
    "text": "directory for this is etsy cryo keys",
    "start": "545600",
    "end": "550480"
  },
  {
    "text": "so to help distribute the key to the container runtimes more easily we will make use of a key syncing",
    "start": "552399",
    "end": "558240"
  },
  {
    "text": "operator that we've written this is open source and is also available on operator hub",
    "start": "558240",
    "end": "565279"
  },
  {
    "text": "what the key syncing operator does is allows the ability to take a kubernetes secret",
    "start": "565279",
    "end": "571279"
  },
  {
    "text": "as a key and distribute it to the container runtimes so others can easily create a decryption",
    "start": "571279",
    "end": "577519"
  },
  {
    "text": "key by creating a secret with the specific type equals to key",
    "start": "577519",
    "end": "583360"
  },
  {
    "text": "so let's take a look at this now we're going to show how the address can take the encrypted",
    "start": "583600",
    "end": "588720"
  },
  {
    "text": "image from earlier and run it on the kubernetes cluster so the setup here we're using is very",
    "start": "588720",
    "end": "595360"
  },
  {
    "text": "simple it's a mini cube setup with the container runtime cryo",
    "start": "595360",
    "end": "600480"
  },
  {
    "text": "and what we're going to do first is to install the operator that we talked about which will synchronize the keys so this",
    "start": "600480",
    "end": "608000"
  },
  {
    "text": "operator is called the encryption keysync operator and you can get it in this repository",
    "start": "608000",
    "end": "614480"
  },
  {
    "text": "here and so we're going to install it using helm by first creating the name space",
    "start": "614480",
    "end": "620320"
  },
  {
    "text": "for it and then we're going to use the helm install",
    "start": "620320",
    "end": "626399"
  },
  {
    "text": "and so once we've successfully installed the operator here we'll be given some instructions but",
    "start": "626399",
    "end": "631839"
  },
  {
    "text": "before we do anything let's first try and run the image that we created earlier",
    "start": "631839",
    "end": "638320"
  },
  {
    "text": "so we're going to create a part here and we're going to see that it errored so let's take a look",
    "start": "644640",
    "end": "651040"
  },
  {
    "text": "about why it failed to run",
    "start": "651040",
    "end": "655440"
  },
  {
    "text": "so if we go all the way down we can see that the error message why i could not unpack the image was because it says",
    "start": "657120",
    "end": "664640"
  },
  {
    "text": "missing private key needed for decryption now this is expected because the image",
    "start": "664640",
    "end": "670000"
  },
  {
    "text": "is encrypted and we have not yet provided the key to the container runtimes to decrypt",
    "start": "670000",
    "end": "677200"
  },
  {
    "text": "so let's do just that so from the instructions in the operator we see that we can install a key by creating a",
    "start": "677200",
    "end": "682880"
  },
  {
    "text": "secret with type key and we're going to going to do exactly that",
    "start": "682880",
    "end": "688079"
  },
  {
    "text": "we're going to use this command and we're going to point it to the private key that we created earlier",
    "start": "688079",
    "end": "694800"
  },
  {
    "text": "which is in addition directory because we're decrypting we are using the private key and we're going to just",
    "start": "694800",
    "end": "701200"
  },
  {
    "text": "name the secret atlas key cool so once the secret has been created",
    "start": "701200",
    "end": "707279"
  },
  {
    "text": "let's now try and recreate the pod",
    "start": "707279",
    "end": "711760"
  },
  {
    "text": "so we are going to run the encrypted workload again here and we can see that is successfully",
    "start": "715040",
    "end": "720399"
  },
  {
    "text": "running and if we observe the port we can see that is indeed running the",
    "start": "720399",
    "end": "725519"
  },
  {
    "text": "image that we have created before",
    "start": "725519",
    "end": "731839"
  },
  {
    "text": "awesome so let's recap what we've kind of seen in the past few demos",
    "start": "734079",
    "end": "740320"
  },
  {
    "text": "so we started off by encrypting a container image that was only decryptable by alice's private key",
    "start": "740320",
    "end": "746880"
  },
  {
    "text": "in the first demo and in the first demo we saw that because atlas had a private key",
    "start": "746880",
    "end": "752560"
  },
  {
    "text": "accessible on her local workstation she was able to decrypt it and therefore",
    "start": "752560",
    "end": "759040"
  },
  {
    "text": "the container workload that was encrypted was only decryptable on addresses workstation",
    "start": "759040",
    "end": "764079"
  },
  {
    "text": "because the key was only available there so in the second example we went ahead",
    "start": "764079",
    "end": "770079"
  },
  {
    "text": "and others used operator to make her private key accessible to the nodes in the kubernetes cluster",
    "start": "770079",
    "end": "775839"
  },
  {
    "text": "so in the middle here we see that edison's private key is not accessible on both hobox station and kubernetes",
    "start": "775839",
    "end": "781680"
  },
  {
    "text": "cluster so this meant that the container workload was now decryptable",
    "start": "781680",
    "end": "787200"
  },
  {
    "text": "and executable on both her workstation and addison's kubernetes cluster",
    "start": "787200",
    "end": "794160"
  },
  {
    "text": "so if we take a step back and in this scenarios we see that you know alice has been this person that has been",
    "start": "794800",
    "end": "800480"
  },
  {
    "text": "generating the keys she's been making them available to different entities um what else is essentially doing is",
    "start": "800480",
    "end": "807760"
  },
  {
    "text": "manual key management right she's acting as a vault but just a person that's",
    "start": "807760",
    "end": "812880"
  },
  {
    "text": "generating keys and putting it in the correct locations so if we generalize this right uh as his",
    "start": "812880",
    "end": "820000"
  },
  {
    "text": "key mentioned what does key management do for us so key management says that a certain",
    "start": "820000",
    "end": "825839"
  },
  {
    "text": "key x for example in this case x is alice's private key is only accessible",
    "start": "825839",
    "end": "831519"
  },
  {
    "text": "by a set of entities e where e in this case is addison's workstation and as",
    "start": "831519",
    "end": "837680"
  },
  {
    "text": "kubernetes cluster so we take the definition of container",
    "start": "837680",
    "end": "842880"
  },
  {
    "text": "image encryption that we got from earlier we get that container image encryption",
    "start": "842880",
    "end": "848480"
  },
  {
    "text": "allows us to encrypt a container workload so that is only decryptable by a particular key",
    "start": "848480",
    "end": "853600"
  },
  {
    "text": "x key management says i can say a key x is only accessible by entities e and so if we put this",
    "start": "853600",
    "end": "861360"
  },
  {
    "text": "together we can get the statement that says the container workload is only decryptable on the particular entities e",
    "start": "861360",
    "end": "869120"
  },
  {
    "text": "and this is exactly geofencing because if entities e may be a set of workers in a",
    "start": "869120",
    "end": "875680"
  },
  {
    "text": "particular location that would be able to allow us to do a fancy execution",
    "start": "875680",
    "end": "882720"
  },
  {
    "text": "awesome so now that we have this capability harsha will show you how we can use this enterprise scenario",
    "start": "882880",
    "end": "890560"
  },
  {
    "text": "thanks manden so uh now extending on what brandon said that you have a key",
    "start": "893360",
    "end": "898959"
  },
  {
    "text": "management and you have image encryption so let's let's get to the actual",
    "start": "898959",
    "end": "904480"
  },
  {
    "text": "scenario where i have like a u.s cluster here in red and then a cluster in european union and i want",
    "start": "904480",
    "end": "911519"
  },
  {
    "text": "to make sure that the container images that i am creating are only able to run on specific uh",
    "start": "911519",
    "end": "917680"
  },
  {
    "text": "cluster for example if i create a container image that i want to be able to able to make sure that it only",
    "start": "917680",
    "end": "923600"
  },
  {
    "text": "runs on european union cluster and nowhere else so what what we can do here",
    "start": "923600",
    "end": "929120"
  },
  {
    "text": "is we can use image encryption and the key management in combination such that",
    "start": "929120",
    "end": "934639"
  },
  {
    "text": "the the images will be able to run on uh appropriate cluster",
    "start": "934639",
    "end": "941440"
  },
  {
    "text": "so to elaborate the point further if you if you create ima if you encrypt the image and use the proper key management",
    "start": "941440",
    "end": "948880"
  },
  {
    "text": "where cluster gets authenticated the the keys are only provisioned to the cluster",
    "start": "948880",
    "end": "954160"
  },
  {
    "text": "if it gets properly authenticated uh with the key management uh only the in this case you can see the",
    "start": "954160",
    "end": "960399"
  },
  {
    "text": "cluster in eu cluster uh the u cluster will get the keys and the us cluster will not be able to",
    "start": "960399",
    "end": "966800"
  },
  {
    "text": "get the required keys let's jump into demo to see this in live in action",
    "start": "966800",
    "end": "973839"
  },
  {
    "text": "welcome to the demo in this demo we'll see how you can use image encryption to do uh jio fencing for your container",
    "start": "979920",
    "end": "987120"
  },
  {
    "text": "images i have two clusters here one running in european union and another running in us the one",
    "start": "987120",
    "end": "995360"
  },
  {
    "text": "running in european union is using container d as a crm time while one running in united states is using",
    "start": "995360",
    "end": "1002399"
  },
  {
    "text": "kaio as his cri run time both cryo and continuity support",
    "start": "1002399",
    "end": "1007920"
  },
  {
    "text": "image decryption so let's try to build some sample workload",
    "start": "1007920",
    "end": "1013680"
  },
  {
    "text": "so i have a simple docker file here i just want to make sure that this sample workload only",
    "start": "1016320",
    "end": "1023040"
  },
  {
    "text": "runs on the cluster that's running inside european union so",
    "start": "1023040",
    "end": "1030400"
  },
  {
    "text": "let's build this using build now once it's built you can use the same",
    "start": "1030400",
    "end": "1036000"
  },
  {
    "text": "builder command to encrypt this image using a public key once it's encrypted",
    "start": "1036000",
    "end": "1041438"
  },
  {
    "text": "it can only be decrypted using this private key so it's very important that you copy",
    "start": "1041439",
    "end": "1048160"
  },
  {
    "text": "this private key to the worker nodes no where you will run this image you can",
    "start": "1048160",
    "end": "1054720"
  },
  {
    "text": "manually copy this private key or you can use this operator here which will copy it safely to the worker",
    "start": "1054720",
    "end": "1062000"
  },
  {
    "text": "nodes and it will place it in a right location where cleo or contender d can find those",
    "start": "1062000",
    "end": "1067360"
  },
  {
    "text": "keys so now that we have built it let's push it and while pushing as i mentioned",
    "start": "1067360",
    "end": "1072400"
  },
  {
    "text": "we'll use this public key to encrypt the",
    "start": "1072400",
    "end": "1076320"
  },
  {
    "text": "image",
    "start": "1078840",
    "end": "1081840"
  },
  {
    "text": "done good so now that we have built it encrypted and uploaded let's try to run",
    "start": "1093919",
    "end": "1099840"
  },
  {
    "text": "this on our cluster now this has found",
    "start": "1099840",
    "end": "1105520"
  },
  {
    "text": "so i have a sample demand set here which will use the image that we just created here",
    "start": "1105520",
    "end": "1112480"
  },
  {
    "text": "so let's go ahead and create it",
    "start": "1112480",
    "end": "1123840"
  },
  {
    "text": "it's creating it's running right that's good so now uh",
    "start": "1128799",
    "end": "1135919"
  },
  {
    "text": "now that we have we are able to download the image and uh decrypt it and run it successfully",
    "start": "1135919",
    "end": "1142160"
  },
  {
    "text": "let's see what happens if if the cluster that doesn't have this required private keys tries to",
    "start": "1142160",
    "end": "1149360"
  },
  {
    "text": "run this container image so on the us cluster i have this i can run the same workload",
    "start": "1149360",
    "end": "1158559"
  },
  {
    "text": "which refers to the same image that we just built here in european for the european union cluster let's see",
    "start": "1158559",
    "end": "1164720"
  },
  {
    "text": "if we try to run it here what happens",
    "start": "1164720",
    "end": "1179840"
  },
  {
    "text": "and you're getting an error let's see what this error means",
    "start": "1183280",
    "end": "1193840"
  },
  {
    "text": "so the error says that none of the private keys could be used for decryption",
    "start": "1194559",
    "end": "1200080"
  },
  {
    "text": "it means that this cluster is not able to use this image because it doesn't have the required",
    "start": "1200080",
    "end": "1205200"
  },
  {
    "text": "private keys and this this is how we are able to prevent the cluster running in us uh from using the",
    "start": "1205200",
    "end": "1211679"
  },
  {
    "text": "image that was built for running the uh for from running the cluster that is running",
    "start": "1211679",
    "end": "1218320"
  },
  {
    "text": "inside european union so let's try to do it other way around",
    "start": "1218320",
    "end": "1224240"
  },
  {
    "text": "so we have a docker file here",
    "start": "1224240",
    "end": "1229039"
  },
  {
    "text": "and this is just a sample code we want to make sure it's only able to run inside the cluster",
    "start": "1229919",
    "end": "1235600"
  },
  {
    "text": "which is running in us let's build using builder and once it's built",
    "start": "1235600",
    "end": "1241200"
  },
  {
    "text": "we gonna encrypt it using this public key and this is the corresponding private key i",
    "start": "1241200",
    "end": "1248159"
  },
  {
    "text": "have already copied this private key on the worker nodes of this cluster so that we can successfully decrypt it",
    "start": "1248159",
    "end": "1255280"
  },
  {
    "text": "now that i built it let's encrypt it and push it to registry",
    "start": "1255280",
    "end": "1263840"
  },
  {
    "text": "let me go ahead and delete delete the deployment that we created sometime back",
    "start": "1277600",
    "end": "1286159"
  },
  {
    "text": "not from here",
    "start": "1286159",
    "end": "1291840"
  },
  {
    "text": "and now that we have built uh an encrypted and pushed image for us cluster let's try to use it",
    "start": "1296640",
    "end": "1305520"
  },
  {
    "text": "on this cluster so i have this ml you can refer the sim we just build this",
    "start": "1305520",
    "end": "1311600"
  },
  {
    "text": "image keeps it l create minus f",
    "start": "1311600",
    "end": "1319840"
  },
  {
    "text": "get parts it's creating",
    "start": "1322320",
    "end": "1327440"
  },
  {
    "text": "and almost there yes and it's running so now we can do the same thing that we",
    "start": "1328240",
    "end": "1335760"
  },
  {
    "text": "did earlier with the image that we built uh built for european indian cluster",
    "start": "1335760",
    "end": "1341200"
  },
  {
    "text": "what happens if the image that you just built for us cluster",
    "start": "1341200",
    "end": "1348320"
  },
  {
    "text": "if you try to use it on the cluster that's running in a european union let's see that",
    "start": "1348320",
    "end": "1354960"
  },
  {
    "text": "okay it parsed let me delete that um cat usa",
    "start": "1355440",
    "end": "1363120"
  },
  {
    "text": "so this is the image that we built here so let's go ahead and",
    "start": "1363120",
    "end": "1371120"
  },
  {
    "text": "deploy it get parts get",
    "start": "1371679",
    "end": "1379280"
  },
  {
    "text": "parts it's creating and it gives the same error that we saw",
    "start": "1379280",
    "end": "1386240"
  },
  {
    "text": "here when you try to use the container image which where the the required keys are not",
    "start": "1386240",
    "end": "1392159"
  },
  {
    "text": "present on a cluster that concludes my demo thank you",
    "start": "1392159",
    "end": "1398000"
  },
  {
    "text": "all right thanks archer so before we end of the talk i'd like to address uh one aspect of key mention that we",
    "start": "1400880",
    "end": "1406799"
  },
  {
    "text": "talked about earlier we said that key management allows the enforcement that",
    "start": "1406799",
    "end": "1412159"
  },
  {
    "text": "key x is only accessible by particular entities e however today how do we ensure that",
    "start": "1412159",
    "end": "1419280"
  },
  {
    "text": "those entities can access those keys and we today rely a lot on secure",
    "start": "1419280",
    "end": "1424640"
  },
  {
    "text": "process or reliance on the trusted administrator however this introduces a lot of human error and i",
    "start": "1424640",
    "end": "1432159"
  },
  {
    "text": "think that this is an area that we can do a little bit better so in research today we are exploring",
    "start": "1432159",
    "end": "1438640"
  },
  {
    "text": "how to do this um to do something even more which is to tie it to a highway route of trust like a dpm and",
    "start": "1438640",
    "end": "1446000"
  },
  {
    "text": "even go ahead and have the ability to attach the firmware all the way up to the operating system",
    "start": "1446000",
    "end": "1451440"
  },
  {
    "text": "level so this way not only do you have tie into a particular set of hardware",
    "start": "1451440",
    "end": "1458559"
  },
  {
    "text": "you also are able to know what is exactly running in the underlying stack of your container",
    "start": "1458559",
    "end": "1465760"
  },
  {
    "text": "so there are a couple open source technologies that do this today",
    "start": "1465760",
    "end": "1471360"
  },
  {
    "text": "there's key line which is developed but mainly by red hat and then we have",
    "start": "1471360",
    "end": "1476640"
  },
  {
    "text": "intel data center secure libraries also known as ice echo which is a set of libraries that allow",
    "start": "1476640",
    "end": "1482799"
  },
  {
    "text": "you to perform attestation and get attestation reports back",
    "start": "1482799",
    "end": "1488158"
  },
  {
    "text": "so in addition there's a there's been a publication by this and this is something that we collaborated on with them and this",
    "start": "1489440",
    "end": "1496799"
  },
  {
    "text": "article talks about how you use these type of technologies together with the container platform to bootstrap",
    "start": "1496799",
    "end": "1503440"
  },
  {
    "text": "trust all the way from the hardware route of truss to the containers so this is a piece of",
    "start": "1503440",
    "end": "1509760"
  },
  {
    "text": "world that's pretty interesting in itself it kind of is a topic in",
    "start": "1509760",
    "end": "1515120"
  },
  {
    "text": "itself so we don't have time to really go in depth but this is something that we are",
    "start": "1515120",
    "end": "1520400"
  },
  {
    "text": "constantly looking at when we'd like more people to engage on this topic so",
    "start": "1520400",
    "end": "1528159"
  },
  {
    "text": "to summarize uh we talked about um the question of where are my",
    "start": "1528159",
    "end": "1533200"
  },
  {
    "text": "continuous running we talked about why and sub-scenarios can be important and how we can achieve",
    "start": "1533200",
    "end": "1538400"
  },
  {
    "text": "this through encrypted container images as well as key management we showed you how to use encrypted",
    "start": "1538400",
    "end": "1545039"
  },
  {
    "text": "container images on various components and parts of the ecosystem like container the aquarium",
    "start": "1545039",
    "end": "1551279"
  },
  {
    "text": "builder and docker distribution and lastly we touched a little bit on",
    "start": "1551279",
    "end": "1556799"
  },
  {
    "text": "talking about highly regulated industries and high assurance uh how do we kind of get to the next",
    "start": "1556799",
    "end": "1563360"
  },
  {
    "text": "step in being able to bootstrap trust into our container platform and this is something that um we want to",
    "start": "1563360",
    "end": "1570640"
  },
  {
    "text": "continuously work on and we would like to be engaged with this so we have a repository here that",
    "start": "1570640",
    "end": "1576640"
  },
  {
    "text": "we we've created so that people can join into the discussion so please do feel free to come and engage",
    "start": "1576640",
    "end": "1582640"
  },
  {
    "text": "with us so that's all we had for today um thank",
    "start": "1582640",
    "end": "1587679"
  },
  {
    "text": "you very much a quick shout out also to stefan phil who did a lot of work during the initial",
    "start": "1587679",
    "end": "1594480"
  },
  {
    "text": "stages of the future and also with the other collaborators from oci container the",
    "start": "1594480",
    "end": "1600559"
  },
  {
    "text": "cryo and the containers repository so with that i'd like to open up the",
    "start": "1600559",
    "end": "1606480"
  },
  {
    "text": "questions and also there are links to various components",
    "start": "1606480",
    "end": "1611600"
  },
  {
    "text": "that we talked about in the slides if you can download them thank you",
    "start": "1611600",
    "end": "1627840"
  },
  {
    "text": "oh well uh can you hear me i think i have sorry i wasn't mute uh so must images be decrypted in order",
    "start": "1649039",
    "end": "1656320"
  },
  {
    "text": "for static vulnerability scanners there's a question from casper came in uh casper kramer uh",
    "start": "1656320",
    "end": "1662240"
  },
  {
    "text": "about uh if you need to use the scanning tools like trivia or claire do",
    "start": "1662240",
    "end": "1667679"
  },
  {
    "text": "you need to decrypt and yes i mean uh so the way it would work is you you can when you encrypt the image you can",
    "start": "1667679",
    "end": "1674000"
  },
  {
    "text": "have a multiple recipients so let's say i encrypt the image that i need to run on",
    "start": "1674000",
    "end": "1679039"
  },
  {
    "text": "my cluster and then i can add the a private key that i will associate with",
    "start": "1679039",
    "end": "1684240"
  },
  {
    "text": "the clear for example so when the when you know your build pipeline you will",
    "start": "1684240",
    "end": "1690000"
  },
  {
    "text": "be able to that clear instance will be able to decrypt the image uh do your scanning and uh",
    "start": "1690000",
    "end": "1696720"
  },
  {
    "text": "no it can go ahead with that so that way uh you don't have to disclose this image",
    "start": "1696720",
    "end": "1702960"
  },
  {
    "text": "to everyone except your instance where you're running the scanning so that's question from casper i think",
    "start": "1702960",
    "end": "1709440"
  },
  {
    "text": "you have another one more question now",
    "start": "1709440",
    "end": "1715600"
  },
  {
    "text": "are the manifest and config files of the image also equipped with a question from",
    "start": "1717679",
    "end": "1722840"
  },
  {
    "text": "alexandro i know right now the uh the first implementation we have layers of the images that are encrypted",
    "start": "1722840",
    "end": "1730399"
  },
  {
    "text": "not the manifest itself hey brandon okay cool i'm i'm sorry i had some technical",
    "start": "1730399",
    "end": "1736840"
  },
  {
    "text": "difficulties um so i just want to kind of add a little bit",
    "start": "1736840",
    "end": "1743120"
  },
  {
    "text": "more to what hashtag says about the image scanning so",
    "start": "1743120",
    "end": "1749039"
  },
  {
    "text": "one way that he mentioned was you have a key so something that we're looking at is um",
    "start": "1749039",
    "end": "1756640"
  },
  {
    "text": "you can encrypt so there's a question in the q a as well on do i need to have different private keys",
    "start": "1756640",
    "end": "1764720"
  },
  {
    "text": "to be able to um can i use different private keys for different machines if i want to or can does the image is an image only tied",
    "start": "1764720",
    "end": "1772159"
  },
  {
    "text": "to a single private key and the answer is you can use different private keys uh you can encrypt an image",
    "start": "1772159",
    "end": "1777600"
  },
  {
    "text": "for multiple using multiple public keys and this is kind of like an approach that",
    "start": "1777600",
    "end": "1784080"
  },
  {
    "text": "we were thinking about in terms of how one will use this for scanning service so",
    "start": "1784080",
    "end": "1789520"
  },
  {
    "text": "for example a service like trivia or cloud or something would expose a public",
    "start": "1789520",
    "end": "1795600"
  },
  {
    "text": "key and if you trust the service you will encrypt your image both for your hardware as well as for the",
    "start": "1795600",
    "end": "1804000"
  },
  {
    "text": "for the scanning services that you trust um that is one way to do it there are a",
    "start": "1804000",
    "end": "1810080"
  },
  {
    "text": "couple other approaches to this so what um the image encryption is also",
    "start": "1810080",
    "end": "1815279"
  },
  {
    "text": "done on a layer level uh so what you could do is for example if your confidential code",
    "start": "1815279",
    "end": "1821760"
  },
  {
    "text": "is only a small portion of the entire image right because we serve the operating system because of the middleware",
    "start": "1821760",
    "end": "1828720"
  },
  {
    "text": "you could also leave your middle middleware operating system layers",
    "start": "1828720",
    "end": "1834480"
  },
  {
    "text": "decrypted because there's no uh confidential material that and only encrypt your topmost layer",
    "start": "1834480",
    "end": "1841360"
  },
  {
    "text": "um so that's another way of doing it um and if you're using things like openscap or things that can scan locally",
    "start": "1841360",
    "end": "1849520"
  },
  {
    "text": "another thing that we recommend you know if if you're already in a high assurance scenario and you don't trust anyone",
    "start": "1849520",
    "end": "1854960"
  },
  {
    "text": "including external providers you want to do your own scanning in-house um you could do you could do this by",
    "start": "1854960",
    "end": "1862960"
  },
  {
    "text": "doing the scanning before sending before uploading the images to the",
    "start": "1862960",
    "end": "1869120"
  },
  {
    "text": "registry yep yeah",
    "start": "1869120",
    "end": "1876640"
  },
  {
    "text": "we have a question for philip village about what is the benefit of using asymmetric keys here instead of",
    "start": "1876640",
    "end": "1883919"
  },
  {
    "text": "symmetric keys so the symmetric keys are we do use symmetric keys to uh encrypt",
    "start": "1883919",
    "end": "1889440"
  },
  {
    "text": "the layers we just wrap them in a sigmetric keys so that you can have recipients for that uh so brandon you want to add",
    "start": "1889440",
    "end": "1896880"
  },
  {
    "text": "in that um no i think you said it pretty well um we use both of them",
    "start": "1896880",
    "end": "1902720"
  },
  {
    "text": "we didn't go to the spec over here but if you if you go to the we have a couple links",
    "start": "1902720",
    "end": "1908480"
  },
  {
    "text": "in the last slide uh some of them and if you want to download the presentation there's a couple links there",
    "start": "1908480",
    "end": "1914559"
  },
  {
    "text": "the spec will contain more detail about how we use both symmetric for the data and this we're",
    "start": "1914559",
    "end": "1920480"
  },
  {
    "text": "using asymmetric jets for the uh key wrapping and um key delivery",
    "start": "1920480",
    "end": "1926559"
  },
  {
    "text": "now we know uh it's available in docker hub uh there's a question whether it's it's available azure container registry",
    "start": "1926559",
    "end": "1932960"
  },
  {
    "text": "i haven't checked uh if it's available i will assume i continue i know it's available on ibm",
    "start": "1932960",
    "end": "1939120"
  },
  {
    "text": "container registry yeah it's yeah ibm continuously docker",
    "start": "1939120",
    "end": "1944640"
  },
  {
    "text": "has supports it and as soon as any other provider will upgrade to the latest uh version of the",
    "start": "1944640",
    "end": "1950480"
  },
  {
    "text": "registry distribution uh they will get the support because the code is upstream anyway i think we tested this with",
    "start": "1950480",
    "end": "1957679"
  },
  {
    "text": "registry if you're using docker distribution it's we were testing this as 2.7.1",
    "start": "1957679",
    "end": "1964480"
  },
  {
    "text": "so i think anything above 2.7 should be fine",
    "start": "1964480",
    "end": "1969840"
  },
  {
    "text": "i'm just going with questions okay um there's a question for alejandro",
    "start": "1973200",
    "end": "1981919"
  },
  {
    "text": "about other manufacturing conflict files also encrypted um so right now only the layers are",
    "start": "1981919",
    "end": "1988559"
  },
  {
    "text": "being encrypted um we had a lot of conversations about encrypting the conflict as well",
    "start": "1988559",
    "end": "1994960"
  },
  {
    "text": "um it seems like there are some technical challenges in terms of how a lot of the tooling is",
    "start": "1994960",
    "end": "2002000"
  },
  {
    "text": "written where the code paths are not um",
    "start": "2002000",
    "end": "2007440"
  },
  {
    "text": "are not kind of similar to the layers so we started off with layers conflict is conflicts are kind of from",
    "start": "2007919",
    "end": "2013519"
  },
  {
    "text": "the roadmap manifests we weren't",
    "start": "2013519",
    "end": "2019840"
  },
  {
    "text": "we couldn't really figure out the use case for manifest conflict we definitely",
    "start": "2019919",
    "end": "2025200"
  },
  {
    "text": "think it should be encrypted um what we are",
    "start": "2025200",
    "end": "2030639"
  },
  {
    "text": "what the next step for this is we're actually proposing this encryption scheme",
    "start": "2031200",
    "end": "2036399"
  },
  {
    "text": "at the ocr artifacts level uh so what this would mean would be you could encrypt",
    "start": "2036399",
    "end": "2043200"
  },
  {
    "text": "any um oci",
    "start": "2043200",
    "end": "2048080"
  },
  {
    "text": "media type right so you could have uh if you had a manifest you could have layers",
    "start": "2048240",
    "end": "2053679"
  },
  {
    "text": "and then um if there are new oci media types it would just be a suffix so if you look at the media type of the spec",
    "start": "2053679",
    "end": "2060320"
  },
  {
    "text": "um if for the layers you have like tar.gzip and what we're doing is we're just",
    "start": "2060320",
    "end": "2066480"
  },
  {
    "text": "adding a plus encrypted suffix and so what this is just tells it that",
    "start": "2066480",
    "end": "2072320"
  },
  {
    "text": "this blob is encrypted that kind of answers the question ron chitaro has is there any signature details in",
    "start": "2072320",
    "end": "2079919"
  },
  {
    "text": "image manifest that can be read by admission controller you know when you if you can fetch the image and if you read the",
    "start": "2079919",
    "end": "2086000"
  },
  {
    "text": "layers the layers will be tagged as not as these it will be tagged and then",
    "start": "2086000",
    "end": "2091118"
  },
  {
    "text": "enc will be at the end of it yeah and and i um i would say that",
    "start": "2091119",
    "end": "2098800"
  },
  {
    "text": "this will be used in tandem with any signing solutions like doctor content trust overhead simple signing",
    "start": "2098800",
    "end": "2105119"
  },
  {
    "text": "um just because we are only the encryptions are really focused on",
    "start": "2105119",
    "end": "2110320"
  },
  {
    "text": "the integrity of the um the granular level blobs like the",
    "start": "2110320",
    "end": "2115760"
  },
  {
    "text": "layers but in terms of like the entire manifest and the provenance we're not really looking at that",
    "start": "2115760",
    "end": "2121680"
  },
  {
    "text": "so i would say both can be used together",
    "start": "2121680",
    "end": "2131359"
  },
  {
    "text": "i'm just going on more questions yeah",
    "start": "2131359",
    "end": "2136078"
  },
  {
    "text": "okay looks like we had time um oh yeah yeah it's inside well time um",
    "start": "2137920",
    "end": "2143839"
  },
  {
    "text": "i'll i guess we'll be on psych if there are any more questions and then we can go from there yep",
    "start": "2143839",
    "end": "2152960"
  }
]