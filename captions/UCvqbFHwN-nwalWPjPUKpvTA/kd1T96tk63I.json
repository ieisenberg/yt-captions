[
  {
    "start": "0",
    "end": "88000"
  },
  {
    "text": "all right we're going to go ahead and get started now I'd like to thank everyone who is joining us today welcome",
    "start": "30",
    "end": "5490"
  },
  {
    "text": "to today's cncs webinar the event-driven UI bridging the gap' I'm Kaitlin Barnard",
    "start": "5490",
    "end": "11040"
  },
  {
    "text": "Marketing Manager at CNCs and I'll be helping to moderate today's webinar I'd like to welcome today's presenter Kevin",
    "start": "11040",
    "end": "17760"
  },
  {
    "text": "Beier from Accenture so just a few housekeeping items before we get started during the webinar you're not able to",
    "start": "17760",
    "end": "24359"
  },
  {
    "text": "talk as an attendee so there is a Q&A box at the bottom of your screen so you feel free to drop any questions in there",
    "start": "24359",
    "end": "30599"
  },
  {
    "text": "and then we'll hold those to the end and get to as many as we have time for the session is also being recorded and will",
    "start": "30599",
    "end": "36660"
  },
  {
    "text": "be sent out afterwards along with the length of the presentation so with that I'll hand it over to Kevin to kick off",
    "start": "36660",
    "end": "42420"
  },
  {
    "text": "today's presentation Thank You Kaitlyn hi everyone my name is Kevin bottom I",
    "start": "42420",
    "end": "48420"
  },
  {
    "text": "work for example technology for a specialized in distributed systems and event-driven architecture two years ago",
    "start": "48420",
    "end": "55350"
  },
  {
    "text": "my interest in this type of architecture got me involved in one of our internal projects an event-driven approach was",
    "start": "55350",
    "end": "61770"
  },
  {
    "text": "used to solve a series of industry specific use cases we're trying to find elegant ways to add an event-driven",
    "start": "61770",
    "end": "67770"
  },
  {
    "text": "front-end to the micro service based application we've noticed that there wasn't really a good solution to do that",
    "start": "67770",
    "end": "73950"
  },
  {
    "text": "at least not for micro service setups in this session I'd like to talk about the challenges that we saw and share the",
    "start": "73950",
    "end": "81090"
  },
  {
    "text": "open source project called reactive interaction gateway that we've created to address them first I'm going to",
    "start": "81090",
    "end": "89909"
  },
  {
    "text": "outline where we are right now and how we could do better then I'll define the vision which basically describes where I",
    "start": "89909",
    "end": "96930"
  },
  {
    "text": "think we should be the challenges are the problems that we set out to solve and after that I will finally present an",
    "start": "96930",
    "end": "103890"
  },
  {
    "text": "open source project as a solution to those challenges with the expectation",
    "start": "103890",
    "end": "109290"
  },
  {
    "text": "set let's take a look at the SS picture first the simple one with a single back",
    "start": "109290",
    "end": "116579"
  },
  {
    "text": "end and a single front end there is only one source of data and with that also only one source of events which makes it",
    "start": "116579",
    "end": "124229"
  },
  {
    "text": "pretty simple to figure out where to get the data from in such a scenario implementing server-side push of",
    "start": "124229",
    "end": "130770"
  },
  {
    "text": "real-time data can be simple as adding a WebSocket and point to a micro service if that service goes",
    "start": "130770",
    "end": "137519"
  },
  {
    "text": "down we'd lose all the client connections but since we've lost the only server as well this doesn't matter",
    "start": "137519",
    "end": "143220"
  },
  {
    "text": "a lot now let's head over to the micro service void micro services are best",
    "start": "143220",
    "end": "150540"
  },
  {
    "text": "designed around business domains and capabilities which enables teens to largely work autonomously",
    "start": "150540",
    "end": "157340"
  },
  {
    "text": "we often strengthen this independence further by making micro services event-driven micro services published",
    "start": "157340",
    "end": "165540"
  },
  {
    "text": "two main events that other micro services can subscribe to which decouples applications and lets us at",
    "start": "165540",
    "end": "171599"
  },
  {
    "text": "downstream micro services easily as an example this picture shows two micro",
    "start": "171599",
    "end": "177510"
  },
  {
    "text": "services that implement an authentication context and the customer profile context the customer profile",
    "start": "177510",
    "end": "184530"
  },
  {
    "text": "service deals with customer profiles but not with login sessions for example",
    "start": "184530",
    "end": "189620"
  },
  {
    "text": "let's say the customer profile service would like to use session statistics to",
    "start": "189620",
    "end": "194879"
  },
  {
    "text": "enrich its customer profile data in order to gather those statistics the",
    "start": "194879",
    "end": "200730"
  },
  {
    "text": "service could subscribe to session related events published by the authentication service on the backend",
    "start": "200730",
    "end": "208049"
  },
  {
    "text": "this makes the micro services as well as the implementing teams loosely coupled",
    "start": "208049",
    "end": "213450"
  },
  {
    "text": "but there is still only one front-end often maintained by a single team and",
    "start": "213450",
    "end": "219359"
  },
  {
    "text": "meant to include data from multiple if not all micro services so we asked",
    "start": "219359",
    "end": "225060"
  },
  {
    "text": "ourselves wouldn't it be nice if the front-end team could selectively subscribe to events the same way that",
    "start": "225060",
    "end": "231630"
  },
  {
    "text": "micro services teams do and this exactly is our vision micro",
    "start": "231630",
    "end": "239230"
  },
  {
    "text": "services and front-ends produced and consumed events in the same way this",
    "start": "239230",
    "end": "245799"
  },
  {
    "text": "should of course only rely on open standards and to keep true to loose coupling friend and should not be aware",
    "start": "245799",
    "end": "252700"
  },
  {
    "text": "of how events are stored on the back end this means that if we using cough-cough petitions on the back end for example",
    "start": "252700",
    "end": "259690"
  },
  {
    "text": "the front end should neither care about Kafka nor should it know anything about the petitioning scheme used for those",
    "start": "259690",
    "end": "266139"
  },
  {
    "text": "topics a naive approach would be to have each",
    "start": "266139",
    "end": "273770"
  },
  {
    "text": "micro service maintain a long-lived connection to the front end but that approach has some drawbacks firstly the",
    "start": "273770",
    "end": "281060"
  },
  {
    "text": "infrastructure would have to deal with vast amounts of connections for example with 50,000 online users and 50 micro",
    "start": "281060",
    "end": "288530"
  },
  {
    "text": "services we'd have to provision not for 50,000 connections but instead for 1.25 million",
    "start": "288530",
    "end": "295550"
  },
  {
    "text": "connections in talk but what's even worse is that it forces micro services to maintain connection state in turn",
    "start": "295550",
    "end": "303590"
  },
  {
    "text": "this means that we deploy micro services for its front end Connect",
    "start": "303590",
    "end": "308949"
  },
  {
    "text": "messages and facing the load of 50,000 connecting clients right off the startup",
    "start": "311700",
    "end": "316920"
  },
  {
    "text": "of course that's doable but it would be much better to offload their connection",
    "start": "316920",
    "end": "322020"
  },
  {
    "text": "handling to a dedicated service instead that service wouldn't contain any business logic and because of this",
    "start": "322020",
    "end": "328770"
  },
  {
    "text": "wouldn't need to be redeployed but often we want the micro service to not care",
    "start": "328770",
    "end": "334800"
  },
  {
    "text": "about who consumes its event which is kind of the whole point of event based decoupling consequently a micro service",
    "start": "334800",
    "end": "343080"
  },
  {
    "text": "shouldn't need to publish some kind of special event for front-end consumption instead any published events should be",
    "start": "343080",
    "end": "350010"
  },
  {
    "text": "consumable by both our the micro services and front ends we define some",
    "start": "350010",
    "end": "356250"
  },
  {
    "text": "goals for the front end as well as mentioned already front end should be agnostic of the way events are stored in",
    "start": "356250",
    "end": "363000"
  },
  {
    "text": "the backend to easily support support browser-based apps there shouldn't be",
    "start": "363000",
    "end": "368040"
  },
  {
    "text": "any proprietary formats involved front ends should be enabled to publish even",
    "start": "368040",
    "end": "373200"
  },
  {
    "text": "towards micro services prominence should also be able to control what kind of events to receive when maintaining event",
    "start": "373200",
    "end": "379620"
  },
  {
    "text": "subscriptions themselves let's look at",
    "start": "379620",
    "end": "386610"
  },
  {
    "start": "384000",
    "end": "593000"
  },
  {
    "text": "the technique challenges in detail the first one is about scaling with the number of users",
    "start": "386610",
    "end": "391830"
  },
  {
    "text": "and with the rate of events the second item is about different sources of events the third one is about an",
    "start": "391830",
    "end": "399330"
  },
  {
    "text": "interesting problem around how to give an event-driven micro service ecosystem a classical synchro synchronous boundary",
    "start": "399330",
    "end": "406610"
  },
  {
    "text": "finally we touch on the topic of authorisation let's start with",
    "start": "406610",
    "end": "412229"
  },
  {
    "text": "scalability in general a typical system",
    "start": "412229",
    "end": "418229"
  },
  {
    "text": "has way more users in total learn online at any given point in time however",
    "start": "418229",
    "end": "424139"
  },
  {
    "text": "depending on the business domain this can still mean a five or six digit number of connections to deal with if",
    "start": "424139",
    "end": "430410"
  },
  {
    "text": "this doesn't already call for horizontal scaling dealing with large amounts of events certainly does not searching",
    "start": "430410",
    "end": "437910"
  },
  {
    "text": "systems like Apache Kafka typically organize topics and petitions to distribute the load a singer' consumer",
    "start": "437910",
    "end": "445169"
  },
  {
    "text": "that is subscribed to all of those petitions is overloaded quickly given",
    "start": "445169",
    "end": "450840"
  },
  {
    "text": "the events already grouped into those petitions it would be easy to let brundin subscribe to positions directly",
    "start": "450840",
    "end": "456800"
  },
  {
    "text": "however that would violate one of our goals as front-ends will need to know",
    "start": "456800",
    "end": "462090"
  },
  {
    "text": "how the event topics are petitioned on the backend instead we need to",
    "start": "462090",
    "end": "467370"
  },
  {
    "text": "reposition events according to the event type because the event type is what is",
    "start": "467370",
    "end": "472800"
  },
  {
    "text": "relevant to front ends as that's what they ultimately subscribe to now if you",
    "start": "472800",
    "end": "483400"
  },
  {
    "text": "and sauces of course not everyone is using Kafka but while initially we've seen the need",
    "start": "483400",
    "end": "490660"
  },
  {
    "text": "to support other message brokers as well it seems that Kafka has become the de facto standard for implementing this",
    "start": "490660",
    "end": "497260"
  },
  {
    "text": "type of architecture by now you have the conference Kafka platform that many companies use and additionally each",
    "start": "497260",
    "end": "503860"
  },
  {
    "text": "cloud provider now has enough around kavkaza service for example even though Asha event hubs might have an own Kafka",
    "start": "503860",
    "end": "511210"
  },
  {
    "text": "implementation under the hood it still provides a Kafka compatible interface to its clients as a synchronous alternative",
    "start": "511210",
    "end": "518890"
  },
  {
    "text": "to Kafka it should also be publicly possible to publish events using a simple HTTP core while this appears to",
    "start": "518890",
    "end": "526420"
  },
  {
    "text": "violate the bilham published special events goal we've defined earlier it actually doesn't the submitted event is",
    "start": "526420",
    "end": "534040"
  },
  {
    "text": "still an event and it should be processed the same way one example where this can be helpful is publishing events",
    "start": "534040",
    "end": "540970"
  },
  {
    "text": "while decrypting them on the fly we were without revealing the encryption key",
    "start": "540970",
    "end": "547860"
  },
  {
    "text": "going for micro services and event-driven architecture also means embracing eventual consistency in such a",
    "start": "549300",
    "end": "556990"
  },
  {
    "text": "model most interactions are asynchronous which makes it easy to do so makes it",
    "start": "556990",
    "end": "563980"
  },
  {
    "text": "easy to add and remove services among other things but the way we implement",
    "start": "563980",
    "end": "569020"
  },
  {
    "text": "processes internally shouldn't affect our public api's most third-party",
    "start": "569020",
    "end": "574209"
  },
  {
    "text": "clients expect the traditional HTTP API that doesn't respond with I'll do this",
    "start": "574209",
    "end": "579670"
  },
  {
    "text": "later but with what was requested this requires some sort of conversion between",
    "start": "579670",
    "end": "585970"
  },
  {
    "text": "the two paradigms and god I'll go into details on this a bit later nos but not",
    "start": "585970",
    "end": "593770"
  },
  {
    "start": "593000",
    "end": "654000"
  },
  {
    "text": "least there is also the concern of authorization authorization is essential in the set up as the ideas to",
    "start": "593770",
    "end": "600760"
  },
  {
    "text": "potentially subscribe to any event which of course includes those that contain",
    "start": "600760",
    "end": "605890"
  },
  {
    "text": "sensitive information at the same time the solution should contain as little business logic as",
    "start": "605890",
    "end": "611800"
  },
  {
    "text": "possible meaning the authorization mechanism should be plugged into it in some way next I'll talk about two",
    "start": "611800",
    "end": "622480"
  },
  {
    "text": "candidate solutions and point out why they didn't meet a meet our requirements the first one is Microsoft signal our",
    "start": "622480",
    "end": "629790"
  },
  {
    "text": "this is from the official documentation and shows how to set up a real-time dashboard for IOT devices here's the",
    "start": "629790",
    "end": "637690"
  },
  {
    "text": "relevant part the authenticated clients connect to the signal our service via WebSockets the data sources publishes",
    "start": "637690",
    "end": "645580"
  },
  {
    "text": "events towards a signal our service which then forwards them to the client",
    "start": "645580",
    "end": "651720"
  },
  {
    "text": "single are endless WebSocket connections to front ends a big bonus is that there",
    "start": "654279",
    "end": "660709"
  },
  {
    "text": "is a managed signal a service an Asha that can be used in server dysfunctions",
    "start": "660709",
    "end": "666249"
  },
  {
    "text": "micro services so that that's a plus micro services publish events using a",
    "start": "666249",
    "end": "672399"
  },
  {
    "text": "remote procedure call on the front end through the signal or hub a micro",
    "start": "672399",
    "end": "677839"
  },
  {
    "text": "service can target is specifically user a user group or all users at once unfortunately this is far from our idea",
    "start": "677839",
    "end": "685490"
  },
  {
    "text": "of publishing events in a decoupled way front ends are agnostic of the back end",
    "start": "685490",
    "end": "691220"
  },
  {
    "text": "setup but they are required to use signal you use a signal our client implementation the protocol is open and",
    "start": "691220",
    "end": "698869"
  },
  {
    "text": "available on github and front-ends can run remote procedure calls too but since",
    "start": "698869",
    "end": "705559"
  },
  {
    "text": "they also need to target the specific service they can publish events in a sense finally as microservices target",
    "start": "705559",
    "end": "713689"
  },
  {
    "text": "uses and user groups explicitly front-ends cannot choose what to receive out-of-the-box there is no notion of the",
    "start": "713689",
    "end": "719959"
  },
  {
    "text": "event subscription to move on to the next candidate which",
    "start": "719959",
    "end": "726350"
  },
  {
    "text": "is pushpin pushpin looks pretty solid and there are key ideas seem to align",
    "start": "726350",
    "end": "732650"
  },
  {
    "text": "very well with our goals transparency towards clients statelessness and share",
    "start": "732650",
    "end": "737990"
  },
  {
    "text": "nothing architecture to support high scalability and a publish/subscribe model for data transmission let's see",
    "start": "737990",
    "end": "744590"
  },
  {
    "text": "how this relates to our goals and also copied paragraph from the website here",
    "start": "744590",
    "end": "751120"
  },
  {
    "text": "where they say that pushpin has no built-in support for connecting to specific user brokers like Kafka but",
    "start": "751120",
    "end": "758450"
  },
  {
    "text": "they have an example for adding a small blocker program that runs alongside pushpin that should add that capability",
    "start": "758450",
    "end": "764690"
  },
  {
    "text": "so push pin handles connection to front",
    "start": "764690",
    "end": "770240"
  },
  {
    "text": "and connections to front ends via s as a web sockets along polling micro-services",
    "start": "770240",
    "end": "777590"
  },
  {
    "text": "publish messages using HTTP calls against pushpin with a special HTTP header cept disty v8 Swimmer goals of",
    "start": "777590",
    "end": "784730"
  },
  {
    "text": "unifying the concepts of publishing an event or a microservices and publishing an event towards a from that phone",
    "start": "784730",
    "end": "793430"
  },
  {
    "text": "inside mastic of the backend set up as pushpin strips to special headers sent by micro services the protocol is simple",
    "start": "793430",
    "end": "800000"
  },
  {
    "text": "and build them standard abstractions through the WebSocket connections from",
    "start": "800000",
    "end": "805250"
  },
  {
    "text": "Lincoln Cent big data but again this targets specific services and cannot be used to publish events finally front",
    "start": "805250",
    "end": "813320"
  },
  {
    "text": "ends cannot choose what to receive push pin routes events according to channels that are assigned by the micro service",
    "start": "813320",
    "end": "820370"
  },
  {
    "text": "that sends the data although both both solutions look promising at first we",
    "start": "820370",
    "end": "826850"
  },
  {
    "text": "felt that there must be a better way to do this so we've set out to create a new",
    "start": "826850",
    "end": "831890"
  },
  {
    "text": "open source project called the reactive into action gateway after working on it",
    "start": "831890",
    "end": "836930"
  },
  {
    "text": "internally for a year we've released it on the Apache 2.0 license and gets up to",
    "start": "836930",
    "end": "842180"
  },
  {
    "text": "years ago since then we have used it successfully in client projects and are",
    "start": "842180",
    "end": "847580"
  },
  {
    "text": "happy with the results so far it is currently a scene CF landscape project",
    "start": "847580",
    "end": "853720"
  },
  {
    "text": "director the action gateway handles long lift service and events connections over H to",
    "start": "854380",
    "end": "860029"
  },
  {
    "start": "855000",
    "end": "1224000"
  },
  {
    "text": "b2 or alternatively also WebSocket connections over HTTP one as a fallback",
    "start": "860029",
    "end": "865310"
  },
  {
    "text": "support for classical HDTV long polling is in the works as well it is designed",
    "start": "865310",
    "end": "870499"
  },
  {
    "text": "to listen to all events that occur in the background and quickly drop those not relevant to any front-end there is",
    "start": "870499",
    "end": "877490"
  },
  {
    "text": "no target there is no need to target a specific fund and events it can be",
    "start": "877490",
    "end": "883819"
  },
  {
    "text": "picked up by other micro services can also be picked up by from that's a repositioning events according to then",
    "start": "883819",
    "end": "890839"
  },
  {
    "text": "types and subscription constraints the reactive in the action gateway hides the backends partitioning scheme to the",
    "start": "890839",
    "end": "897139"
  },
  {
    "text": "front end there is only one source of events",
    "start": "897139",
    "end": "901720"
  },
  {
    "text": "and actually a also relies only on established web standards like sse and web socket and all SoundCloud events the",
    "start": "902380",
    "end": "908710"
  },
  {
    "text": "upcoming since a specification for events through it it should be HTTP",
    "start": "908710",
    "end": "914830"
  },
  {
    "text": "reverse proxy the reactive of the actual gateway allows front-ends to publish events using a simple HTTP core and",
    "start": "914830",
    "end": "921100"
  },
  {
    "text": "because subscriptions are maintained by front ends rather than by beckons the front end team is in control over which",
    "start": "921100",
    "end": "927160"
  },
  {
    "text": "events they receive now let's head back to the challenges",
    "start": "927160",
    "end": "934279"
  },
  {
    "text": "that I've described earlier the first one was about scalability Ricca is designed to be deployed in a",
    "start": "934279",
    "end": "941569"
  },
  {
    "text": "cluster set up on kubernetes we're using a kubernetes headless service for peer discovery and rick connects newly",
    "start": "941569",
    "end": "948290"
  },
  {
    "text": "spawned nodes to the cluster automatically towards Kafka and Kinesis their nodes from a consumer group which",
    "start": "948290",
    "end": "955549"
  },
  {
    "text": "means the craft competitions in Canisius shards are distributed among the nodes",
    "start": "955549",
    "end": "961399"
  },
  {
    "text": "in the cluster each petition or shot is assigned to one node and when a node fails the petition",
    "start": "961399",
    "end": "968029"
  },
  {
    "text": "arshad assignment is rebalanced in the case and you know despond the assignment",
    "start": "968029",
    "end": "973670"
  },
  {
    "text": "is rebalance to so new nodes get their share of events aventure",
    "start": "973670",
    "end": "979910"
  },
  {
    "text": "towards clients Rick's primary primary channel is service and events over HTTP",
    "start": "979910",
    "end": "985709"
  },
  {
    "text": "- but due to the popularity of WebSockets we've added support further that as well as a side note I'd like to",
    "start": "985709",
    "end": "993359"
  },
  {
    "text": "mention that due to the way WebSockets work it's quite unlikely they will ever be supported over 8gb - plus a Z is a",
    "start": "993359",
    "end": "1001220"
  },
  {
    "text": "very good fit for use case like this which is why I strongly strongly recommend going sse on the right side of",
    "start": "1001220",
    "end": "1008959"
  },
  {
    "text": "the slide you can see further details and how we implement this there are",
    "start": "1008959",
    "end": "1014199"
  },
  {
    "text": "connection processes at top and kafka consumer processes in the bottle that",
    "start": "1014199",
    "end": "1020869"
  },
  {
    "text": "are both local to a No session processes that exist only once",
    "start": "1020869",
    "end": "1026050"
  },
  {
    "text": "for each session they can receive messages from any node the session",
    "start": "1026050",
    "end": "1031390"
  },
  {
    "text": "processes are subscribed to event filter processes and every node there is one",
    "start": "1031390",
    "end": "1036520"
  },
  {
    "text": "filter process for each event type encountered and the event subscriptions are replicated Amanda an incoming event",
    "start": "1036520",
    "end": "1044680"
  },
  {
    "text": "is dispatched to the local filter process it makes that matches its event",
    "start": "1044680",
    "end": "1049720"
  },
  {
    "text": "type the filter process compares the event with the subscriptions if there is",
    "start": "1049720",
    "end": "1054730"
  },
  {
    "text": "a match the event is forwarded to the respective session process and in turn to the touch front ends the reactive and",
    "start": "1054730",
    "end": "1064960"
  },
  {
    "text": "action gateway currently supports a Patrick Kafka and Emerson Kinesis for consuming events there are also HP",
    "start": "1064960",
    "end": "1071860"
  },
  {
    "text": "endpoints that allow micro services as well as front ends to publish events using HTTP calls",
    "start": "1071860",
    "end": "1079560"
  },
  {
    "text": "our Gateway also allows us to provide a traditional API to an event-driven",
    "start": "1083260",
    "end": "1089030"
  },
  {
    "text": "back-end one of our clients deals with third-party clients that strictly",
    "start": "1089030",
    "end": "1094250"
  },
  {
    "text": "require a restful HP interface using Rik the client is able to provide this while",
    "start": "1094250",
    "end": "1100070"
  },
  {
    "text": "keeping internal processes asynchronous let's see how this works when an",
    "start": "1100070",
    "end": "1105710"
  },
  {
    "text": "external client of London sends an HTTP request to Rick I call directive",
    "start": "1105710",
    "end": "1110840"
  },
  {
    "text": "interaction gateway now Rick for sure Rick produces a message representing",
    "start": "1110840",
    "end": "1115880"
  },
  {
    "text": "this request to a Kafka topic adding a correlation I need to it micro-service",
    "start": "1115880",
    "end": "1121610"
  },
  {
    "text": "picks up the message and does some processing when processing is complete the micro services produce the response",
    "start": "1121610",
    "end": "1128570"
  },
  {
    "text": "to another cup Kafka topic retaining the correlation ID from the original request message",
    "start": "1128570",
    "end": "1133730"
  },
  {
    "text": "Rick picks up the response finds the Associated HTTP request using the correlation ID and finalizes to still",
    "start": "1133730",
    "end": "1141290"
  },
  {
    "text": "open a GP request by sending back the response read from the Kafka topic this",
    "start": "1141290",
    "end": "1148520"
  },
  {
    "text": "also works with Kinesis charts in a similar way also note that Rick can of course also",
    "start": "1148520",
    "end": "1154880"
  },
  {
    "text": "forward the HTTP request like a normal reverse proxy board",
    "start": "1154880",
    "end": "1159940"
  },
  {
    "text": "Micke supports three ways to tackle authorization the simplest one is not to",
    "start": "1162690",
    "end": "1169060"
  },
  {
    "text": "do off the recession at all and just assume that requests have already been checked by another service the more",
    "start": "1169060",
    "end": "1175390"
  },
  {
    "text": "common one is expecting innate ability and verifying the JWT signature before",
    "start": "1175390",
    "end": "1180460"
  },
  {
    "text": "accepting subscription requests in case you don't have a herd of JW teats and for JSON web token and is basically an",
    "start": "1180460",
    "end": "1188680"
  },
  {
    "text": "authorization token that is sent along with the authorization header in DHCP requests the most flexible one is to the",
    "start": "1188680",
    "end": "1197650"
  },
  {
    "text": "most flexible authorization scheme is to specify a custom endpoint that accepts subscription requests Ric for words such",
    "start": "1197650",
    "end": "1205900"
  },
  {
    "text": "requests to that endpoint and accepts all i9 subscriptions according to the response code sent by the custom",
    "start": "1205900",
    "end": "1213010"
  },
  {
    "text": "endpoint a similar mechanism is in place for event submissions as depicted in the",
    "start": "1213010",
    "end": "1219430"
  },
  {
    "text": "diagram here is the summary",
    "start": "1219430",
    "end": "1226410"
  },
  {
    "start": "1224000",
    "end": "1259000"
  },
  {
    "text": "of the license and standards we use in the project mentioned all of them sir",
    "start": "1226410",
    "end": "1232110"
  },
  {
    "text": "come to the next slide Rick doesn't have any external dependencies so it's very easy to run it",
    "start": "1232110",
    "end": "1238880"
  },
  {
    "text": "basically it can be operated like a stateless service all configuration",
    "start": "1238880",
    "end": "1244560"
  },
  {
    "text": "options are exposed by a environment variables and the document is available on docker hub under the Accenture",
    "start": "1244560",
    "end": "1252030"
  },
  {
    "text": "reactive and actual gateway repository",
    "start": "1252030",
    "end": "1256190"
  },
  {
    "start": "1259000",
    "end": "1292000"
  },
  {
    "text": "so I'm already at the end of my talk basically to conclude it let me say that",
    "start": "1259170",
    "end": "1267040"
  },
  {
    "text": "real tiny is our state of the art and the way to go for modern UX design we",
    "start": "1267040",
    "end": "1273220"
  },
  {
    "text": "believe that extending the event-driven architecture style to the front end is a great way to implement this I have shown",
    "start": "1273220",
    "end": "1279040"
  },
  {
    "text": "various challenges that come with a pet them and ways how to address those challenges I've introduced directive",
    "start": "1279040",
    "end": "1285940"
  },
  {
    "text": "into action gateway which is our implementation of those ideas feel free",
    "start": "1285940",
    "end": "1292840"
  },
  {
    "start": "1292000",
    "end": "1354000"
  },
  {
    "text": "to check out the project and get up and please let us know what you think also we always looking for contributors",
    "start": "1292840",
    "end": "1299070"
  },
  {
    "text": "I'd like to shout out to Dominic varnished who came up with the original",
    "start": "1299070",
    "end": "1304990"
  },
  {
    "text": "idea two days also to mario Makai who's been working with me over this on this",
    "start": "1304990",
    "end": "1311020"
  },
  {
    "text": "over the past four years and to the software innovation team at Accenture for their continuing support thanks a",
    "start": "1311020",
    "end": "1317140"
  },
  {
    "text": "lot for your attention I'm free free to send me your comments in Twitter and also ask questions in the queue a forum",
    "start": "1317140",
    "end": "1323680"
  },
  {
    "text": "here so thank you very attention",
    "start": "1323680",
    "end": "1329130"
  },
  {
    "text": "awesome thanks Kevin for the presentation so as you mentioned we have some time for questions now just a",
    "start": "1329190",
    "end": "1335940"
  },
  {
    "text": "reminder there is a Q&A box at the bottom of your screen so please drop any questions in there and we should have",
    "start": "1335940",
    "end": "1342000"
  },
  {
    "text": "plenty of time to get to them so there was one question that came in here and",
    "start": "1342000",
    "end": "1347340"
  },
  {
    "text": "it's more of a clarification back on I believe it was slide 19 as to what you",
    "start": "1347340",
    "end": "1353700"
  },
  {
    "text": "will refer to what exactly you meant by events on that that slide I believe and please follow up if I have the have the",
    "start": "1353700",
    "end": "1360090"
  },
  {
    "start": "1354000",
    "end": "1433000"
  },
  {
    "text": "wrong slide here what exactly I meant with vents yes",
    "start": "1360090",
    "end": "1368480"
  },
  {
    "text": "so if a micro-service would publish an event to a Kafka topic for example Rick",
    "start": "1371289",
    "end": "1381710"
  },
  {
    "text": "would pick up the devant because Rick is supposed to listen to all those Kafka topics and then if a front-end is",
    "start": "1381710",
    "end": "1389419"
  },
  {
    "text": "subscribed to that event type it will get that event forwarded and the event",
    "start": "1389419",
    "end": "1395269"
  },
  {
    "text": "might be any business event like in the in the example I had earlier with the customer profile event customer profile",
    "start": "1395269",
    "end": "1402649"
  },
  {
    "text": "service and I'm session service it could be the session service could have made an event for a user user logging in or",
    "start": "1402649",
    "end": "1411799"
  },
  {
    "text": "data that describes that a user has locked in and an event that describes that the user has locked out something",
    "start": "1411799",
    "end": "1418639"
  },
  {
    "text": "like this so it could really be any kind of business event that might be",
    "start": "1418639",
    "end": "1424279"
  },
  {
    "text": "interesting on the front end to show or to react to and that answers the",
    "start": "1424279",
    "end": "1431090"
  },
  {
    "text": "question thanks for the clarification another",
    "start": "1431090",
    "end": "1436740"
  },
  {
    "start": "1433000",
    "end": "1487000"
  },
  {
    "text": "question here is this bound to kubernetes or can it be run outside of kubernetes it can of course run outside",
    "start": "1436740",
    "end": "1444030"
  },
  {
    "text": "of kubernetes and you can run the docker image stand-alone yeah I just wanted to",
    "start": "1444030",
    "end": "1453180"
  },
  {
    "text": "show that it's easy to run it on kubernetes because since it has no external dependencies it can just be",
    "start": "1453180",
    "end": "1460620"
  },
  {
    "text": "scale obscured on you don't have to maintain stateful stats or something like this so I just wanted to showcase",
    "start": "1460620",
    "end": "1467640"
  },
  {
    "text": "this but it does not depend in any way on kubernetes so we have actually we",
    "start": "1467640",
    "end": "1472770"
  },
  {
    "text": "have multiple ways to do pure discovery also so you could also use DNS based",
    "start": "1472770",
    "end": "1477960"
  },
  {
    "text": "peer discovery and we have two other ways to do this",
    "start": "1477960",
    "end": "1483590"
  },
  {
    "start": "1487000",
    "end": "1548000"
  },
  {
    "text": "all right another one here um what are the scaling limit we are currently",
    "start": "1487299",
    "end": "1496220"
  },
  {
    "text": "conducting benchmarks on this so far we have been doing only a small series of",
    "start": "1496220",
    "end": "1503149"
  },
  {
    "text": "benchmarks where we were operating with I think it was four or five notes and",
    "start": "1503149",
    "end": "1511450"
  },
  {
    "text": "I'm a WS t t 5x national thing but I",
    "start": "1511450",
    "end": "1516710"
  },
  {
    "text": "have to I have we will publish a blog post in this because we are in the",
    "start": "1516710",
    "end": "1521899"
  },
  {
    "text": "process of trying to figure out what the limits actually are but it should be",
    "start": "1521899",
    "end": "1527149"
  },
  {
    "text": "pretty good because it's built on the Erlang runtime um in case you know it",
    "start": "1527149",
    "end": "1534229"
  },
  {
    "text": "which is basically built for horizontal scalability so yeah I don't have two",
    "start": "1534229",
    "end": "1540710"
  },
  {
    "text": "numbers right now but we're in the process of doing the benchmarks you",
    "start": "1540710",
    "end": "1547550"
  },
  {
    "start": "1548000",
    "end": "1636000"
  },
  {
    "text": "all right and then how would you handle more than six open tabs when using SSE",
    "start": "1549170",
    "end": "1556059"
  },
  {
    "text": "it's easy if you have if you're using it should be - because HTTP - is",
    "start": "1558570",
    "end": "1565830"
  },
  {
    "text": "multiplexing individual connections of what a single TCP connection so with",
    "start": "1565830",
    "end": "1573490"
  },
  {
    "text": "HTTP - you have two thousand streams I think available half of it upstream so",
    "start": "1573490",
    "end": "1579730"
  },
  {
    "text": "you can open a thousand as easy connections to a single host if you use",
    "start": "1579730",
    "end": "1586120"
  },
  {
    "text": "HTTP one though you have to be careful not to open too many of those",
    "start": "1586120",
    "end": "1591400"
  },
  {
    "text": "connections so what you would typically do then is in your front end of a singer",
    "start": "1591400",
    "end": "1598590"
  },
  {
    "text": "a single location where you would open their connection and then use the",
    "start": "1598590",
    "end": "1604960"
  },
  {
    "text": "callbacks - I don't know if you for example if you use Redux you could",
    "start": "1604960",
    "end": "1611280"
  },
  {
    "text": "dispatch an event when something when an event comes in through SSE and you don't",
    "start": "1611280",
    "end": "1616510"
  },
  {
    "text": "have to open an SDC connection in every one of your rack components for example",
    "start": "1616510",
    "end": "1622470"
  },
  {
    "text": "that's also one of the reasons why we recommend using HTTP to over it should be one because of that multiplexing",
    "start": "1622880",
    "end": "1629870"
  },
  {
    "text": "because it makes things so much easier",
    "start": "1629870",
    "end": "1633549"
  },
  {
    "start": "1636000",
    "end": "1722000"
  },
  {
    "text": "awesome how would you filter for events",
    "start": "1636890",
    "end": "1641930"
  },
  {
    "text": "for specific clients for example each unique client will get a topic to subscribe to so Rick supports it so the",
    "start": "1641930",
    "end": "1653900"
  },
  {
    "text": "main way to subscribe to events is by event type but in addition to this",
    "start": "1653900",
    "end": "1658960"
  },
  {
    "text": "subscriptions can also contain a set of constraints and those constraints point",
    "start": "1658960",
    "end": "1667970"
  },
  {
    "text": "to specific fields in an event now let's say for example that each that there are",
    "start": "1667970",
    "end": "1675530"
  },
  {
    "text": "you say events and the user session ID is included in the event at a specific",
    "start": "1675530",
    "end": "1683380"
  },
  {
    "text": "location so it can be extracted using adjacent points",
    "start": "1683380",
    "end": "1688410"
  },
  {
    "text": "and then the subscription can contain a constraint it says this session ID field",
    "start": "1688410",
    "end": "1694830"
  },
  {
    "text": "has to have that value and then you subscribe to different types of events",
    "start": "1694830",
    "end": "1701460"
  },
  {
    "text": "but only then if that session ID field has a relative specified in the subscription so you can use those",
    "start": "1701460",
    "end": "1708270"
  },
  {
    "text": "constraints to further filter down events not only by type but also by",
    "start": "1708270",
    "end": "1714030"
  },
  {
    "text": "value of arbitrary fields within delegate",
    "start": "1714030",
    "end": "1718880"
  },
  {
    "text": "you all right and then are there any limitations of this platform as of now",
    "start": "1720900",
    "end": "1730640"
  },
  {
    "start": "1722000",
    "end": "1791000"
  },
  {
    "text": "aware of I'm I know that we have to deliver the benchmarks and the performance numbers I cannot really I",
    "start": "1733470",
    "end": "1741240"
  },
  {
    "text": "cannot really give you any specific numbers on this year but other than that I'm not really a verified imitations",
    "start": "1741240",
    "end": "1748370"
  },
  {
    "text": "what I would be curious about - or what I would be but would really be",
    "start": "1748370",
    "end": "1755340"
  },
  {
    "text": "interesting to know is whether this concept of subscriptions and constrains",
    "start": "1755340",
    "end": "1761210"
  },
  {
    "text": "resonates with the community whether this is powerful enough or already too",
    "start": "1761210",
    "end": "1768030"
  },
  {
    "text": "confusing so I would really love to get some feedback on this right now for the",
    "start": "1768030",
    "end": "1774210"
  },
  {
    "text": "use cases that we have used Rick and it",
    "start": "1774210",
    "end": "1779220"
  },
  {
    "text": "was sufficient yeah as I said a bit curious to learn about new use cases",
    "start": "1779220",
    "end": "1787940"
  },
  {
    "start": "1791000",
    "end": "1920000"
  },
  {
    "text": "another one here have you thought about event versioning between the back-end",
    "start": "1791700",
    "end": "1796810"
  },
  {
    "text": "service services and client-side code something like the schema file in",
    "start": "1796810",
    "end": "1802330"
  },
  {
    "text": "protobuf so we currently don't support",
    "start": "1802330",
    "end": "1809800"
  },
  {
    "text": "protobuf but we do support Ebro because it's prevalent and with a confident",
    "start": "1809800",
    "end": "1815440"
  },
  {
    "text": "platform but so with every we convert",
    "start": "1815440",
    "end": "1822210"
  },
  {
    "text": "the Ebro encoded events to jason so kind",
    "start": "1822210",
    "end": "1827650"
  },
  {
    "text": "of loses that attached schema in a way but it's still the same fields with the",
    "start": "1827650",
    "end": "1833860"
  },
  {
    "text": "same semantics and they're those fields and this data is simply forwarded by",
    "start": "1833860",
    "end": "1840700"
  },
  {
    "text": "brick so if you upgrade or if you if you do backwards or forwards compatible",
    "start": "1840700",
    "end": "1847110"
  },
  {
    "text": "change to a schema you have to you have to do that with your clients so with",
    "start": "1847110",
    "end": "1854470"
  },
  {
    "text": "your front-ends and backends and Rick doesn't really do a lot with that data except if you use it in in a constraint",
    "start": "1854470",
    "end": "1862090"
  },
  {
    "text": "for example so Rick doesn't",
    "start": "1862090",
    "end": "1867620"
  },
  {
    "text": "so you don't have to update Rick in that sense but also Rick doesn't help you",
    "start": "1867620",
    "end": "1872660"
  },
  {
    "text": "with that see if we have a change that requires all your let's say you have a service that publishes that used to",
    "start": "1872660",
    "end": "1880940"
  },
  {
    "text": "publish an event in a specific format and a lot of friends depend on it and now that service completely changes that",
    "start": "1880940",
    "end": "1887480"
  },
  {
    "text": "event doesn't publish the old event anymore but only the new format that no one can read then your front ends will",
    "start": "1887480",
    "end": "1895010"
  },
  {
    "text": "break Rick will happily forward the events but the front ends cannot read it so in that sense Rick is really an",
    "start": "1895010",
    "end": "1902870"
  },
  {
    "text": "infrastructure component and doesn't interpret the event formats or the event",
    "start": "1902870",
    "end": "1910160"
  },
  {
    "text": "data did you send around so that's completely different concern in that sense all right and when does reg",
    "start": "1910160",
    "end": "1922730"
  },
  {
    "start": "1920000",
    "end": "2005000"
  },
  {
    "text": "aligned with the CNCs Cloud event standard yes we're working hard on",
    "start": "1922730",
    "end": "1928929"
  },
  {
    "text": "supporting supporting most of it there is there is currently an open so we",
    "start": "1928929",
    "end": "1938720"
  },
  {
    "text": "conformed with 0.2 standard of cloud events itself and we also working",
    "start": "1938720",
    "end": "1944270"
  },
  {
    "text": "towards support of the transport binding",
    "start": "1944270",
    "end": "1949429"
  },
  {
    "text": "spec there is currently an open pull request for the transport binding 0.2",
    "start": "1949429",
    "end": "1956500"
  },
  {
    "text": "for HTTP for the HTTP endpoints we've also added initial support for the",
    "start": "1956500",
    "end": "1965990"
  },
  {
    "text": "transport binding as we think it will turn out for Kafka but there is no",
    "start": "1965990",
    "end": "1973820"
  },
  {
    "text": "official binding for Kafka yet so that's basically the HDB HTTP binding adapted",
    "start": "1973820",
    "end": "1986570"
  },
  {
    "text": "to Kafka and Kafka headers yeah but the short answer to this is yes",
    "start": "1986570",
    "end": "1992940"
  },
  {
    "text": "we are working hard on following the spec and implementing implementing it",
    "start": "1992940",
    "end": "1999210"
  },
  {
    "text": "properly you",
    "start": "1999210",
    "end": "2005140"
  },
  {
    "text": "okay so this next question is a two-part question here so is written solely",
    "start": "2005140",
    "end": "2010310"
  },
  {
    "text": "stateless and in theory it could scale indefinitely that's the first part if that's correct and then how does the",
    "start": "2010310",
    "end": "2017120"
  },
  {
    "text": "client know which particular rigged node to connect to",
    "start": "2017120",
    "end": "2022210"
  },
  {
    "text": "okay answer the last question first the clan doesn't have to know which now to",
    "start": "2022770",
    "end": "2030280"
  },
  {
    "text": "connect you you can just put a load balancer like you're in this picture also can just put a load balance in",
    "start": "2030280",
    "end": "2036460"
  },
  {
    "text": "front of it Rick will take care that the events are routed internally to the connection",
    "start": "2036460",
    "end": "2043470"
  },
  {
    "text": "regardless of where the connection connects to our better connection ends up so that was the second question and",
    "start": "2043470",
    "end": "2051940"
  },
  {
    "text": "the first question was about whether Rick can be stateless and in theory",
    "start": "2051940",
    "end": "2058780"
  },
  {
    "text": "could scale indefinitely of course nothing can scale indefinitely there are",
    "start": "2058780",
    "end": "2065730"
  },
  {
    "text": "so with a default setup off of the urn",
    "start": "2065730",
    "end": "2071110"
  },
  {
    "text": "and run time you should be able to scale up to 50 to 60 nodes after that you need",
    "start": "2071110",
    "end": "2079620"
  },
  {
    "text": "you need to tune what in Erlang is called distribution so a default all the",
    "start": "2079620",
    "end": "2088148"
  },
  {
    "text": "nodes talk to each other and this doesn't work with more than 50 or 60",
    "start": "2088149",
    "end": "2094030"
  },
  {
    "text": "nodes you have to use something else there so far and no client has had a",
    "start": "2094030",
    "end": "2102100"
  },
  {
    "text": "need for this but that would be a fun experiment so yeah I actually don't know how to",
    "start": "2102100",
    "end": "2110380"
  },
  {
    "text": "what extent this is scalable yet but I will find it out and of course Rick does",
    "start": "2110380",
    "end": "2118150"
  },
  {
    "text": "have internal state because it holds connections it has to come as to maintain connection state and there are",
    "start": "2118150",
    "end": "2126100"
  },
  {
    "text": "also other features in reg like for example I've mentioned JWT validation",
    "start": "2126100",
    "end": "2132060"
  },
  {
    "text": "reg also support chat chat ability blacklist which means that a client that",
    "start": "2132060",
    "end": "2138400"
  },
  {
    "text": "connect with a shed ability that has not expired yet but is on that blacklist",
    "start": "2138400",
    "end": "2145890"
  },
  {
    "text": "will be thrown out that blacklist of course is also States and all the",
    "start": "2145890",
    "end": "2152190"
  },
  {
    "text": "audience state within the cluster is replicated in an eventually",
    "start": "2152190",
    "end": "2158900"
  },
  {
    "text": "consistent way among among the cluster this is implemented using see oddities",
    "start": "2158900",
    "end": "2165460"
  },
  {
    "text": "so as long as one of those nodes lives you can one of those nodes live you can",
    "start": "2165460",
    "end": "2171710"
  },
  {
    "text": "scale up again and the nodes will rebalance and and replicate the data",
    "start": "2171710",
    "end": "2180338"
  },
  {
    "text": "so that's why I mentioned for for scaling out Rick it feels like a",
    "start": "2182310",
    "end": "2187720"
  },
  {
    "text": "stateless service because it's actually not stateless but it only has in memory state and it's self-healing that's why",
    "start": "2187720",
    "end": "2195070"
  },
  {
    "text": "it feels like a stateless service",
    "start": "2195070",
    "end": "2198510"
  },
  {
    "start": "2202000",
    "end": "2238000"
  },
  {
    "text": "and then are there examples or sample apps using this architecture on github",
    "start": "2202620",
    "end": "2209370"
  },
  {
    "text": "no not yet but I'd love to season we only using it at client projects right",
    "start": "2209370",
    "end": "2216400"
  },
  {
    "text": "now and those projects are of course not public so I cannot show anything but",
    "start": "2216400",
    "end": "2224010"
  },
  {
    "text": "please reach out to me if you have if you have a project and you want to",
    "start": "2224010",
    "end": "2229270"
  },
  {
    "text": "include Rick I'd be more than happy to help out",
    "start": "2229270",
    "end": "2234630"
  },
  {
    "text": "and then another question in here how is Rick doing doing discovery",
    "start": "2237700",
    "end": "2245020"
  },
  {
    "start": "2238000",
    "end": "2332000"
  },
  {
    "text": "is this about peer discovery so if you ask yeah specifically using zookeeper or",
    "start": "2246390",
    "end": "2254430"
  },
  {
    "text": "just DNS discovery I as I mentioned you can have multiple",
    "start": "2254430",
    "end": "2259800"
  },
  {
    "text": "ways the default on kubernetes is to have a headless service that were all",
    "start": "2259800",
    "end": "2267510"
  },
  {
    "text": "the notes where you can basically written retrieve the endpoints of the",
    "start": "2267510",
    "end": "2272910"
  },
  {
    "text": "other notes that are on line [Music]",
    "start": "2272910",
    "end": "2281699"
  },
  {
    "text": "I have to check the other ways I know that we have the in-house discovery but",
    "start": "2284950",
    "end": "2290410"
  },
  {
    "text": "I don't actually know whether we support zookeeper because we are basically using a library to do this so it's not",
    "start": "2290410",
    "end": "2297310"
  },
  {
    "text": "something we implemented ourselves you",
    "start": "2297310",
    "end": "2304020"
  },
  {
    "text": "you",
    "start": "2304980",
    "end": "2307040"
  },
  {
    "text": "so yeah also udp-based discovery in case it helps but I think that the dns-based",
    "start": "2311109",
    "end": "2318969"
  },
  {
    "text": "discovery and and this command eddies based discovery should be enough for",
    "start": "2318969",
    "end": "2324759"
  },
  {
    "text": "most use cases",
    "start": "2324759",
    "end": "2327239"
  },
  {
    "start": "2332000",
    "end": "2561000"
  },
  {
    "text": "alright these next questions this is a long one so if you can filter by event",
    "start": "2332329",
    "end": "2339359"
  },
  {
    "text": "field value how do you dispatch particular front-end clients to a particular node since Costco partitions",
    "start": "2339359",
    "end": "2345900"
  },
  {
    "text": "can be partitioned totally differently so given that events for a single front-end can be on all Costco",
    "start": "2345900",
    "end": "2352349"
  },
  {
    "text": "partitions how would you solve that",
    "start": "2352349",
    "end": "2355940"
  },
  {
    "text": "let me go back to a difference night",
    "start": "2358579",
    "end": "2363619"
  },
  {
    "text": "transcendent",
    "start": "2363619",
    "end": "2366619"
  },
  {
    "text": "so what if I got the question correctly it's about that events are grouped here",
    "start": "2369299",
    "end": "2377529"
  },
  {
    "text": "by a petition and that petition could be something totally different than even typed so for example this could be",
    "start": "2377529",
    "end": "2384220"
  },
  {
    "text": "petitioned by a user ID which makes a lot of sense because for example Kafka",
    "start": "2384220",
    "end": "2389440"
  },
  {
    "text": "only guarantees ordering within a single petition so if you don't want as I use",
    "start": "2389440",
    "end": "2394480"
  },
  {
    "text": "it to have her events kind of shuffled all the time you would like repetition",
    "start": "2394480",
    "end": "2401529"
  },
  {
    "text": "by use already and then here because of that subscriptions you need team events",
    "start": "2401529",
    "end": "2407470"
  },
  {
    "text": "group event type now what Rick does here is it routes",
    "start": "2407470",
    "end": "2413970"
  },
  {
    "text": "events to the note where the client is actually connected to and all their all",
    "start": "2413970",
    "end": "2420789"
  },
  {
    "text": "the notes know of all the subscriptions so that's what what's replicated among",
    "start": "2420789",
    "end": "2426249"
  },
  {
    "text": "the cluster I have a picture in this it was here all the time so here I have the",
    "start": "2426249",
    "end": "2433599"
  },
  {
    "text": "event filter that notes about there is one event filter for each event type and",
    "start": "2433599",
    "end": "2438940"
  },
  {
    "text": "who knows about all the subscriptions so it has a pointer to the session",
    "start": "2438940",
    "end": "2445450"
  },
  {
    "text": "parenthesis so if for example this client here connects to the two the",
    "start": "2445450",
    "end": "2451809"
  },
  {
    "text": "leftmost note here but the CAF competition where they then type that",
    "start": "2451809",
    "end": "2457299"
  },
  {
    "text": "the from that is interested in as contained is over here so that note will",
    "start": "2457299",
    "end": "2464380"
  },
  {
    "text": "actually receive the event from Kafka then what happens is that this note also",
    "start": "2464380",
    "end": "2472599"
  },
  {
    "text": "knows about the subscriptions for the session process for accession process that is on the other note and it was",
    "start": "2472599",
    "end": "2480009"
  },
  {
    "text": "sent over within the cluster they went to that note and this note will then",
    "start": "2480009",
    "end": "2486779"
  },
  {
    "text": "push down the events to defendant",
    "start": "2486779",
    "end": "2491999"
  },
  {
    "text": "you so in a way rick is repositioning the",
    "start": "2492140",
    "end": "2501580"
  },
  {
    "text": "cough competitions that are attached to it you",
    "start": "2501580",
    "end": "2508400"
  },
  {
    "text": "you you",
    "start": "2509240",
    "end": "2515550"
  },
  {
    "text": "awesome it up through a lot of questions there do you want to just go back to that final slide you had Kevin so",
    "start": "2521400",
    "end": "2527230"
  },
  {
    "text": "everyone has your information if they have any other questions later on",
    "start": "2527230",
    "end": "2533550"
  },
  {
    "text": "you awesome well thank you again for a great",
    "start": "2536630",
    "end": "2542930"
  },
  {
    "text": "presentation like I said the webinar recording and slides will be online later today and thank you to everyone",
    "start": "2542930",
    "end": "2550250"
  },
  {
    "text": "who joined us today we look forward to seeing you at a future CNCs webinar thanks everyone thank you very much for",
    "start": "2550250",
    "end": "2557809"
  },
  {
    "text": "having me",
    "start": "2557809",
    "end": "2560170"
  }
]