[
  {
    "text": "good morning today we're pulling back the curtain on shopify's mtls journey it's been quite",
    "start": "240",
    "end": "7919"
  },
  {
    "text": "the ride and we've got some fascinating insights and lessons to share but first some quick introductions",
    "start": "7919",
    "end": "15440"
  },
  {
    "text": "i'm michelle mali i've been at shopify for nearly 5 years and joined",
    "start": "15440",
    "end": "20920"
  },
  {
    "text": "inf i was a contributor on the mtls project and continue to work on securing",
    "start": "20920",
    "end": "26240"
  },
  {
    "text": "shopify's infrastructure and hey i'm dennis santos i'm a senior",
    "start": "26240",
    "end": "32320"
  },
  {
    "text": "infosac engineer and i joined the team in shopify back in 2020 my recent projects involve increasing the adoption",
    "start": "32320",
    "end": "38000"
  },
  {
    "text": "of mtls for internal service authentication and using attested identities for",
    "start": "38000",
    "end": "43719"
  },
  {
    "text": "acl here's what we're going to be covering today uh we're going to start with a brief refresher on zero trust and",
    "start": "43719",
    "end": "50160"
  },
  {
    "text": "then we move on to talk about workload identity and adopting spiffy then we",
    "start": "50160",
    "end": "55199"
  },
  {
    "text": "cover some options for service to service authentication we also talk about how we do certificate management",
    "start": "55199",
    "end": "60800"
  },
  {
    "text": "observ observability and we finish with a demo followed by key takeaways we're",
    "start": "60800",
    "end": "66080"
  },
  {
    "text": "going to be showing snippets of the demo throughout the slides but we will have a final session with a video showing all",
    "start": "66080",
    "end": "71760"
  },
  {
    "text": "the pieces together but first things first why does zero trust",
    "start": "71760",
    "end": "77560"
  },
  {
    "text": "matter zero trust is a concept founded by this fine gentleman john kindervag",
    "start": "77560",
    "end": "83920"
  },
  {
    "text": "it's been around since 2009 and it centers around the belief that trusting is a vulnerability and security must be",
    "start": "83920",
    "end": "90240"
  },
  {
    "text": "designed with the strategy never trust always verify we have seen a growing push for",
    "start": "90240",
    "end": "96479"
  },
  {
    "text": "the zero trust model across companies and government agencies the latest technology trends for 2025 published by",
    "start": "96479",
    "end": "103280"
  },
  {
    "text": "o'reilly states that there was a 13% rise in interest in the topic now let's",
    "start": "103280",
    "end": "109200"
  },
  {
    "text": "take a step back and try to understand why this is the case oops",
    "start": "109200",
    "end": "117040"
  },
  {
    "text": "you remember in 2020 we had the pandemic and it triggered an unprecedented shift",
    "start": "117040",
    "end": "123680"
  },
  {
    "text": "in how organizations operate and this global crisis accelerated the consumption of toilet",
    "start": "123680",
    "end": "130280"
  },
  {
    "text": "paper and also accelerated the adoption of cloud infrastructure as companies rapidly adapted to support remote work",
    "start": "130280",
    "end": "137599"
  },
  {
    "text": "and digital operations also bring your own device policies fundamentally changed how organizations approach",
    "start": "137599",
    "end": "144280"
  },
  {
    "text": "security with scattered workforce across various locations and devices relying on",
    "start": "144280",
    "end": "149680"
  },
  {
    "text": "the traditional perimeter security model or castle emote became problematic to",
    "start": "149680",
    "end": "155200"
  },
  {
    "text": "say the least um in zero trust we always verify the identity of every entity",
    "start": "155200",
    "end": "160560"
  },
  {
    "text": "requesting access both human and non-human non-human entities like vms",
    "start": "160560",
    "end": "165680"
  },
  {
    "text": "containers applications and services are called workloads this verification process can be achieved through various",
    "start": "165680",
    "end": "171920"
  },
  {
    "text": "mechanisms but because mutual tls or mtls ensures that both parties at each end of the network connection are what",
    "start": "171920",
    "end": "178640"
  },
  {
    "text": "they claim to be it is one of the primary and recommended mechanisms for servicetoervice authentication this talk",
    "start": "178640",
    "end": "186239"
  },
  {
    "text": "is going to focus on how we implement mtls at shopify to verify these identities",
    "start": "186239",
    "end": "193560"
  },
  {
    "text": "okay so what makes up a workload identity what are some of the challenges",
    "start": "193560",
    "end": "199440"
  },
  {
    "text": "organizations such as shopify face when implementing and managing them to",
    "start": "199440",
    "end": "204640"
  },
  {
    "text": "illustrate how workload identities work consider how we use passports as identity documents what makes a passport",
    "start": "204640",
    "end": "211519"
  },
  {
    "text": "different from any other piece of paper with your name written on it well they are issued by recognized",
    "start": "211519",
    "end": "218159"
  },
  {
    "text": "authorities and include unique identifiers such as physical attributes and a passport number they also use",
    "start": "218159",
    "end": "225040"
  },
  {
    "text": "watermarks and laser perforation to prove authenticity this same concept applies",
    "start": "225040",
    "end": "231280"
  },
  {
    "text": "in the digital world instead of passports we use digital identity documents like x509 certificates to",
    "start": "231280",
    "end": "238400"
  },
  {
    "text": "authenticate humans and workloads instead of government authorities we have certificate",
    "start": "238400",
    "end": "244840"
  },
  {
    "text": "authorities subject names and the serial number serve as unique identifiers and instead of watermarks and laser",
    "start": "244840",
    "end": "251360"
  },
  {
    "text": "perforation cryptographic signatures are used machine identity management is",
    "start": "251360",
    "end": "257320"
  },
  {
    "text": "complicated let's see why that is machine identities greatly outnumber",
    "start": "257320",
    "end": "262639"
  },
  {
    "text": "human identities about 45 to1 and they can't rely on traditional security like",
    "start": "262639",
    "end": "267880"
  },
  {
    "text": "mfa also their creation is often spontaneous and decentralized they tend to accumulate",
    "start": "267880",
    "end": "274800"
  },
  {
    "text": "excessive permissions and outlive their purpose finally a small change in permissions could break critical systems",
    "start": "274800",
    "end": "282720"
  },
  {
    "text": "but machine identities aren't alone in their complexity today's infrastructure as a whole presents another set of",
    "start": "282720",
    "end": "289639"
  },
  {
    "text": "challenges organizations are juggling multiple technology stacks they're also",
    "start": "289639",
    "end": "295280"
  },
  {
    "text": "managing a mix of cloud services and on-prem systems as these systems grow",
    "start": "295280",
    "end": "300800"
  },
  {
    "text": "more interconnected and development accelerates one thing becomes clear we",
    "start": "300800",
    "end": "306080"
  },
  {
    "text": "need these different systems to work together seamlessly that is why spiffy secure",
    "start": "306080",
    "end": "312720"
  },
  {
    "text": "production identity framework for everyone was created the cncf graduated project is an open-source framework",
    "start": "312720",
    "end": "319199"
  },
  {
    "text": "designed to provide a secure and standardized way to manage identity in cloudnative",
    "start": "319199",
    "end": "325160"
  },
  {
    "text": "environments a uri which serves as the spiffy id is crucial for uniquely identifying your workloads in your",
    "start": "325160",
    "end": "331759"
  },
  {
    "text": "infrastructure there are some specific constraints in place for example the ad symbol cannot be part of the uri the",
    "start": "331759",
    "end": "339280"
  },
  {
    "text": "meaning behind the path is left open-ended and is the responsibility of the implement to",
    "start": "339280",
    "end": "345320"
  },
  {
    "text": "define at shopify this is how we structure the uri to give us enough metadata the trust domain is in purple",
    "start": "345320",
    "end": "352800"
  },
  {
    "text": "and the subject path is in yellow this structure captures our workload identity pool the identity of the google service",
    "start": "352800",
    "end": "359759"
  },
  {
    "text": "account and the corresponding project all within the subject alternative name of the",
    "start": "359759",
    "end": "365880"
  },
  {
    "text": "certificate we use common expression language to format the path to our desired structure danny tell us about",
    "start": "365880",
    "end": "373039"
  },
  {
    "text": "spire yeah thanks so to implement spiffy you can use spire it's also a cncf",
    "start": "373039",
    "end": "379280"
  },
  {
    "text": "graduated project stands for spiffy runtime environment you get agents running on every node managing the full",
    "start": "379280",
    "end": "385360"
  },
  {
    "text": "identity life cycle for you while aspire is the reference implementation spiffy",
    "start": "385360",
    "end": "390639"
  },
  {
    "text": "concepts can be implemented through various platforms and services google cloud is one of the officially",
    "start": "390639",
    "end": "396400"
  },
  {
    "text": "recognized integrations at shopify we use google cloud certificate authority service for our private certificate",
    "start": "396400",
    "end": "402880"
  },
  {
    "text": "authorities and we leverage identity reflection for federated workloads to obtain a spiffy id this means we don't",
    "start": "402880",
    "end": "410000"
  },
  {
    "text": "run spire agents ourselves but we get all the benefits of standardized identities across our",
    "start": "410000",
    "end": "415960"
  },
  {
    "text": "infrastructure when adopting spiffy ids though we did run into some challenges",
    "start": "415960",
    "end": "421440"
  },
  {
    "text": "one notable example has to do with our kafka infrastructure by default kafka requires",
    "start": "421440",
    "end": "427759"
  },
  {
    "text": "the use of the distinguished name for managing access control lists as you can see in the highlighted documentation",
    "start": "427759",
    "end": "434160"
  },
  {
    "text": "however when obtaining a certificate from google's ca service using reflected spiffy mode we face a mismatch because",
    "start": "434160",
    "end": "441440"
  },
  {
    "text": "the distinguished name is mutable and can't be verified google ignores it and all we get back is the sendi with a",
    "start": "441440",
    "end": "448000"
  },
  {
    "text": "spiffy id and this creates a challenge for cfka authorization which expects to use the jn for access control",
    "start": "448000",
    "end": "455240"
  },
  {
    "text": "decisions the way we solved it was by building a custom principle builder in kafka there are some open source",
    "start": "455240",
    "end": "461520"
  },
  {
    "text": "solutions as you can see here on this github repo and this kafka improvement proposal but we have our own",
    "start": "461520",
    "end": "467080"
  },
  {
    "text": "implementation our custom build builder parses the san uri containing the spiffy id format and maps these identities to",
    "start": "467080",
    "end": "474160"
  },
  {
    "text": "appropriate cafka acl speaking of challenges with workload identity let's explore some broader",
    "start": "474160",
    "end": "480479"
  },
  {
    "text": "challenges we faced when implementing mtls at scale at shopify we have millions of pods",
    "start": "480479",
    "end": "488080"
  },
  {
    "text": "thousands of nodes and hundreds of clusters this scale makes internal service-to-service communication",
    "start": "488080",
    "end": "493960"
  },
  {
    "text": "challenging to address this we require robust solutions for service discovery",
    "start": "493960",
    "end": "499360"
  },
  {
    "text": "load balancing and traffic management that ensure performance and resilience across our distributed system in the",
    "start": "499360",
    "end": "506560"
  },
  {
    "text": "industry there are several established approaches to serviceto-service authentication these include service",
    "start": "506560",
    "end": "512399"
  },
  {
    "text": "mesh solutions like istto cloud provider solutions like google's application load balancers and kubernetes native",
    "start": "512399",
    "end": "518800"
  },
  {
    "text": "approaches with ingress controllers each of these approaches represents different trade-offs between security complexity",
    "start": "518800",
    "end": "525600"
  },
  {
    "text": "and operational overhead let's examine why these trade-offs matter at scale starting with perhaps the most talked",
    "start": "525600",
    "end": "532399"
  },
  {
    "text": "about solution service mesh service mesh technologies like istto",
    "start": "532399",
    "end": "537519"
  },
  {
    "text": "offer an appealing solution for serviceto-service authentication the mesh provides strong workload identity",
    "start": "537519",
    "end": "543279"
  },
  {
    "text": "through x059 certificates automatic certificate rotation and mtls between",
    "start": "543279",
    "end": "548959"
  },
  {
    "text": "services all managed through sidecar proxies on paper it's a comprehensive",
    "start": "548959",
    "end": "554399"
  },
  {
    "text": "security layer that handles the complexity of service authentication for you but let's talk about some cons",
    "start": "554399",
    "end": "561600"
  },
  {
    "text": "you're adding significant complexity because each pod needs a sidecar container consuming extra cpu and memory",
    "start": "561600",
    "end": "568880"
  },
  {
    "text": "at our scale of millions of pods this overhead becomes substantial there's",
    "start": "568880",
    "end": "574000"
  },
  {
    "text": "also the operational burden you need to manage the mesh itself it's not just",
    "start": "574000",
    "end": "579120"
  },
  {
    "text": "another layer but a whole new control plane to maintain alongside kubernetes",
    "start": "579120",
    "end": "584480"
  },
  {
    "text": "while we do use endway proxies for specific use cases for example in elastic search for the majority of our",
    "start": "584480",
    "end": "590880"
  },
  {
    "text": "services we've opted for a different approach there are also some cloud provider solutions for service-to-ervice",
    "start": "590880",
    "end": "598440"
  },
  {
    "text": "authentication google cloud like many other providers offers internal application load balancers mtls can be",
    "start": "598440",
    "end": "605760"
  },
  {
    "text": "configured on the target https proxy resource with the solution you are",
    "start": "605760",
    "end": "611839"
  },
  {
    "text": "provided custom mtls headers by default that can be passed to the back end this solution does have trade-offs a",
    "start": "611839",
    "end": "620160"
  },
  {
    "text": "managed service means there is no need to manage replica sets or worry about node failures there is seamless",
    "start": "620160",
    "end": "625920"
  },
  {
    "text": "integration with other cloud services like am or cloud monitoring solutions and you get built-in security features",
    "start": "625920",
    "end": "632720"
  },
  {
    "text": "like dos protection however vendor lockin is a con cons requiring a massive",
    "start": "632720",
    "end": "638399"
  },
  {
    "text": "infrastructure overhaul when changing providers you are also restricted to features provided by the cloud provider",
    "start": "638399",
    "end": "645519"
  },
  {
    "text": "and costs can quickly escalate with high traffic danny what are some other options yeah um ingress engine x you",
    "start": "645519",
    "end": "654399"
  },
  {
    "text": "might be thinking nightmare luckily we didn't get affected no public admission",
    "start": "654399",
    "end": "659600"
  },
  {
    "text": "web hooks anyway um it has been a core component of our infrastructure since 2018 when we",
    "start": "659600",
    "end": "666880"
  },
  {
    "text": "adopted kubernetes and some teams are currently exploring the gateway api but",
    "start": "666880",
    "end": "672000"
  },
  {
    "text": "ingress engine x is still a primary tool for servicetoervice authentication i mean internal one um it supports",
    "start": "672000",
    "end": "678240"
  },
  {
    "text": "multiple authentication methods including basic o basic map ooth and",
    "start": "678240",
    "end": "685199"
  },
  {
    "text": "mtls well um i have a confession to make we might have some internal services",
    "start": "685240",
    "end": "692000"
  },
  {
    "text": "authenticating using basic o but we've been on a continuous journey to get rid of basic o everywhere in favor of mtls",
    "start": "692000",
    "end": "699839"
  },
  {
    "text": "but let's see why basic o could be problematic from a security standpoint username is our only way to",
    "start": "699839",
    "end": "706560"
  },
  {
    "text": "identify clients and it's not verified multiple services often share the same",
    "start": "706560",
    "end": "711880"
  },
  {
    "text": "credentials and there's no automatic key rotation which means we have longived credentials by the way the lack of",
    "start": "711880",
    "end": "719440"
  },
  {
    "text": "automated rotation isn't just a basic off problem developers often forget to rotate or simply don't spend time doing",
    "start": "719440",
    "end": "725839"
  },
  {
    "text": "it because it's working until it's not anymore some keys might expire or",
    "start": "725839",
    "end": "731440"
  },
  {
    "text": "someone might delete them accidentally with automatic key rotation teams don't need to worry it's way less errorprone",
    "start": "731440",
    "end": "738959"
  },
  {
    "text": "here's a quick story once upon a time there was a cloudflare key with admin",
    "start": "738959",
    "end": "744000"
  },
  {
    "text": "powers and used by a service it was set to expire after 4 months the team in",
    "start": "744000",
    "end": "749040"
  },
  {
    "text": "charge didn't know when it's time to rotate and it resulted in a partial outage i'm sure this is a story that",
    "start": "749040",
    "end": "755519"
  },
  {
    "text": "you've heard many many times before uh maybe some admin uh got an email warning from cloudflare about the expiry or they",
    "start": "755519",
    "end": "763120"
  },
  {
    "text": "saw it on some dashboard but the developers maintaining the service had no idea until end users reported",
    "start": "763120",
    "end": "769600"
  },
  {
    "text": "problems and came complaining on slack um so yeah storing keys with no automatic rotation is a common issue",
    "start": "769600",
    "end": "776160"
  },
  {
    "text": "across the industry here we have ben erren from teleport i saw their booth there uh he's vouching for zero trust",
    "start": "776160",
    "end": "783360"
  },
  {
    "text": "access for github they mention forever living ssh keys or personal access tokens used to access github repost um",
    "start": "783360",
    "end": "791920"
  },
  {
    "text": "once the ssh key key pair is generated do developers actually often rotate them",
    "start": "791920",
    "end": "797200"
  },
  {
    "text": "or they do so only when they have to when they're assigned new laptops um how about personal access",
    "start": "797200",
    "end": "804079"
  },
  {
    "text": "tokens do they always set them to expire anyway um the solution here is",
    "start": "804079",
    "end": "810560"
  },
  {
    "text": "also sslerts which auto expire give us better auditability etc now back to",
    "start": "810560",
    "end": "817040"
  },
  {
    "text": "ingress engineext and our beloved authentication method nts um here's an",
    "start": "817040",
    "end": "822800"
  },
  {
    "text": "example of configuration you can use specific annotations they can all be found uh in the official ingress",
    "start": "822800",
    "end": "829200"
  },
  {
    "text": "engineext docs i'm just going to go over the key ones used for the demo oftls secret points to the",
    "start": "829200",
    "end": "837040"
  },
  {
    "text": "kubernetes secret containing the client certs verify depth sets the verification",
    "start": "837040",
    "end": "842480"
  },
  {
    "text": "depth for the certificate chain for example you can set it to two if you have a root and a subordinate ca or one",
    "start": "842480",
    "end": "849040"
  },
  {
    "text": "for self-signed searchs in our demo we have otls verify client set to on which",
    "start": "849040",
    "end": "855120"
  },
  {
    "text": "means that the client search must be signed by a certificate that is included in the secret key",
    "start": "855120",
    "end": "861560"
  },
  {
    "text": "ca.rert have um tls pass certificate to upstream it passes the entire raw client",
    "start": "861560",
    "end": "868720"
  },
  {
    "text": "certificate to the server this is the only way we can access the spiffy uri",
    "start": "868720",
    "end": "874079"
  },
  {
    "text": "which we're using for our acl unfortunately ing grass engine x does not forward this value alone as a",
    "start": "874079",
    "end": "879920"
  },
  {
    "text": "request header and this is what the content of the header looks like in our experience",
    "start": "879920",
    "end": "886560"
  },
  {
    "text": "it was a hard cell getting teams parsing this we get this ugly url encoded string",
    "start": "886560",
    "end": "892240"
  },
  {
    "text": "uh a string notice the percent 20 for spaces and stuff basically we have to clean the pam uh it would be so much",
    "start": "892240",
    "end": "899199"
  },
  {
    "text": "nicer if we could just get a header with a sand ui field only just like what google offers as michelle showed before",
    "start": "899199",
    "end": "905680"
  },
  {
    "text": "um but at shopify we have something called hack days we have three days to hack on whatever we want and experiment",
    "start": "905680",
    "end": "912959"
  },
  {
    "text": "so we created a project to dynamically extract the subject alternative name spiffy from the client certificates and",
    "start": "912959",
    "end": "919199"
  },
  {
    "text": "forward it as a request header but that involves writing lua scripts and no one",
    "start": "919199",
    "end": "925279"
  },
  {
    "text": "on our team knows lua so we resorted to our friend gpt this code here takes the",
    "start": "925279",
    "end": "931440"
  },
  {
    "text": "pancer it converts it to dur format pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par pass par passes the asn it does a bunch of things um but we never open the",
    "start": "931440",
    "end": "939519"
  },
  {
    "text": "pr upstream as we thought it wouldn't be accepted and we can't really attach to the code quality has a bunch of nested",
    "start": "939519",
    "end": "947440"
  },
  {
    "text": "loops but it works kind of there was a lot of back and forth with the bot",
    "start": "947440",
    "end": "954000"
  },
  {
    "text": "meaning there's considerable craft in this diff anyway uh there's an option to",
    "start": "954000",
    "end": "959199"
  },
  {
    "text": "create some helper uh function or you can use some library to help with the parsing for example in golang url query",
    "start": "959199",
    "end": "966160"
  },
  {
    "text": "on escape is your friend well we all agree that mtls is",
    "start": "966160",
    "end": "971680"
  },
  {
    "text": "great but with mtls certificate management grows more complex right yes",
    "start": "971680",
    "end": "978320"
  },
  {
    "text": "managing multiple certificate authorities can quickly become challenging to simplify this at shopify",
    "start": "978320",
    "end": "984240"
  },
  {
    "text": "we chose to implement a shared private ca for all of our internal serviceto-service mtls",
    "start": "984240",
    "end": "990040"
  },
  {
    "text": "communication this is how we set up our pki we went with a three tier approach",
    "start": "990040",
    "end": "995199"
  },
  {
    "text": "for our certificate hierarchy first there's our root ca we keep this one",
    "start": "995199",
    "end": "1000320"
  },
  {
    "text": "locked down it's basically just there to sign our intermediate ca the intermediate ca does all the heavy",
    "start": "1000320",
    "end": "1006480"
  },
  {
    "text": "lifting this middle layer gives us an extra buffer of security so we're not putting all our eggs in one basket",
    "start": "1006480",
    "end": "1012800"
  },
  {
    "text": "finally we've got the leaf certificates that our services actually use day-to-day for mtls these are what our",
    "start": "1012800",
    "end": "1018639"
  },
  {
    "text": "services present to each other to prove their identity adding that intermediate layer might seem like extra work but it",
    "start": "1018639",
    "end": "1025678"
  },
  {
    "text": "gives you additional guarantees if something goes wrong with the intermediate ca we can revoke and rotate",
    "start": "1025679",
    "end": "1032160"
  },
  {
    "text": "without having to touch our root of trust talking about rotation one of the",
    "start": "1032160",
    "end": "1037280"
  },
  {
    "text": "most difficult aspects of certificate management is rotation how do we rotate",
    "start": "1037280",
    "end": "1042558"
  },
  {
    "text": "certificate authorities we begin the certificate rotation process for our shared ca well",
    "start": "1042559",
    "end": "1048880"
  },
  {
    "text": "in advance of expiry to ensure a smooth transition the rotation process for the root ca begins one year before expiry",
    "start": "1048880",
    "end": "1056880"
  },
  {
    "text": "and for subordinate cas it begins six months before expiry at shopify we use an alert rule",
    "start": "1056880",
    "end": "1064080"
  },
  {
    "text": "like this to notify when cas are nearing expiry to rotate root cas we follow",
    "start": "1064080",
    "end": "1071280"
  },
  {
    "text": "these steps first create a new root ca then add the new rootert from the new ca",
    "start": "1071280",
    "end": "1077360"
  },
  {
    "text": "to the trust stores next create new subordinate cas and lastly delete the",
    "start": "1077360",
    "end": "1082799"
  },
  {
    "text": "old root ca for rotating subordinate cas first we create a new subordinate ca",
    "start": "1082799",
    "end": "1089360"
  },
  {
    "text": "then we disable existing subordinate cas and finally we delete the expired subordinate",
    "start": "1089360",
    "end": "1095320"
  },
  {
    "text": "ca after ca rotation we test with our certificate management tool locally we",
    "start": "1095320",
    "end": "1101600"
  },
  {
    "text": "verify it can successfully request and receive certificates from the new ca so",
    "start": "1101600",
    "end": "1107760"
  },
  {
    "text": "that's for certificate authority management how about client and server certificates here's another cncf",
    "start": "1107760",
    "end": "1115120"
  },
  {
    "text": "graduated project a wellestablished tool for managingerts in kubernetes cert manager we use cert manager to automate",
    "start": "1115120",
    "end": "1122559"
  },
  {
    "text": "the issuance and renewal oferts for many of our gke workloads as a team we love",
    "start": "1122559",
    "end": "1127840"
  },
  {
    "text": "using it because its open- source nature means we don't have to worry about maintenance cert manager seamlessly",
    "start": "1127840",
    "end": "1134559"
  },
  {
    "text": "integrates with multiple cloud providers and services initially we were using hashi cororps vault but then",
    "start": "1134559",
    "end": "1140880"
  },
  {
    "text": "transitioned to using google certificate authority service and the transition was",
    "start": "1140880",
    "end": "1146160"
  },
  {
    "text": "easy thanks to google ca's issuer it serves as an external issuer for search",
    "start": "1146160",
    "end": "1151280"
  },
  {
    "text": "manager that uses google ca service to issue searchs through manage private cas",
    "start": "1151280",
    "end": "1158679"
  },
  {
    "text": "yeah manager is great when you're talking about kubernetes environment but how about non- kubernetes",
    "start": "1158919",
    "end": "1165240"
  },
  {
    "text": "environment we have this in-house tool written in golang which allows engineers to mint assert using their own",
    "start": "1165240",
    "end": "1171520"
  },
  {
    "text": "credentials for local development it's been in use for four years now it's a binary that can be installed with",
    "start": "1171520",
    "end": "1177919"
  },
  {
    "text": "homebrew and there have been use cases where this is needed for vms as well we also have some resources running in",
    "start": "1177919",
    "end": "1184720"
  },
  {
    "text": "clusters uh without search manager installed and for those the general recommendation is to run the tool as a",
    "start": "1184720",
    "end": "1190480"
  },
  {
    "text": "scikar container it's lightweight and provides a flexible method to get certificates it can be run as a",
    "start": "1190480",
    "end": "1196799"
  },
  {
    "text": "background process or as a one-time job we also have some serverless",
    "start": "1196799",
    "end": "1202400"
  },
  {
    "text": "applications more specifically we use google cloud run when we talk about containers running on demand we can't",
    "start": "1202400",
    "end": "1208160"
  },
  {
    "text": "run our tool as a demon if the instance doesn't get requested it shuts down and only reboots when a request is sent so",
    "start": "1208160",
    "end": "1215280"
  },
  {
    "text": "for this we use uh cloud run schedule jobs um the job is set to run several",
    "start": "1215280",
    "end": "1221200"
  },
  {
    "text": "times during the day and takes care of renewal in case of upcoming expiry and the certificates are stored in google",
    "start": "1221200",
    "end": "1227600"
  },
  {
    "text": "secret manager exposed to the instances as environment variables talking about secret manager uh this in-house tool",
    "start": "1227600",
    "end": "1234400"
  },
  {
    "text": "offers four storage options catering to different use cases uh local file system",
    "start": "1234400",
    "end": "1239840"
  },
  {
    "text": "google cloud storage bucket google secret manager and kubernetes secret it does require specific im permissions for",
    "start": "1239840",
    "end": "1246400"
  },
  {
    "text": "the google services and uh to store it as a kubernetes secret it needs specific role binding here's an example of the",
    "start": "1246400",
    "end": "1253760"
  },
  {
    "text": "configuration uh we created for the demo first we have a specific service account for the job",
    "start": "1253760",
    "end": "1260960"
  },
  {
    "text": "we give a create to create the secret initially and get an update for the renewal logic",
    "start": "1260960",
    "end": "1267520"
  },
  {
    "text": "given the rise in interest in serverless applications internally and also noticing a rise in the use of our",
    "start": "1267520",
    "end": "1273200"
  },
  {
    "text": "certificate loading tool at some point we had a lack of clarity and consistency in our certificate management",
    "start": "1273200",
    "end": "1279480"
  },
  {
    "text": "infrastructure so it also became kind of like hard to maintain both manager and",
    "start": "1279480",
    "end": "1285039"
  },
  {
    "text": "the tool to do the same thing and after some research and talking with other teams we decided on using our custom",
    "start": "1285039",
    "end": "1292320"
  },
  {
    "text": "tool to manage all client certificates we decided to follow a pattern similar",
    "start": "1292320",
    "end": "1297600"
  },
  {
    "text": "to the one we were using for serverless applications where jobs handle certificate creation and updates one",
    "start": "1297600",
    "end": "1304320"
  },
  {
    "text": "critical consideration with this approach is the order of operations certificate data must be available",
    "start": "1304320",
    "end": "1310720"
  },
  {
    "text": "before a service container initializes to address this we deploy an initial job",
    "start": "1310720",
    "end": "1316400"
  },
  {
    "text": "that runs once to mount the kubernetes secret making the tls searchert immediately available for the",
    "start": "1316400",
    "end": "1322080"
  },
  {
    "text": "application at bootstrap time and then subsequent uh certificate issuance and updates are handled by the crown job",
    "start": "1322080",
    "end": "1329280"
  },
  {
    "text": "running on a scheduled basis to guarantee that the certificate loader job completes before the",
    "start": "1329280",
    "end": "1335280"
  },
  {
    "text": "deployment is created we use carval kapp with kap we can wait for specific",
    "start": "1335280",
    "end": "1340880"
  },
  {
    "text": "resources types to reach a ready or uh ready or completed state before proceeding in our demo though we chose",
    "start": "1340880",
    "end": "1348799"
  },
  {
    "text": "to implement argo cd sync waves which also effectively manage deployment sequencing michelle will demonstrate",
    "start": "1348799",
    "end": "1355039"
  },
  {
    "text": "this later in our demo session here we have a demo job deployed to our service",
    "start": "1355039",
    "end": "1360480"
  },
  {
    "text": "a name space similar to the one we have internally the job runs our binary when",
    "start": "1360480",
    "end": "1366720"
  },
  {
    "text": "we run it we call the new store function and we know we're running in a kubernetes environment by checking if",
    "start": "1366720",
    "end": "1372159"
  },
  {
    "text": "the namespace information is mounted meaning we're going to store the certificate data as a",
    "start": "1372159",
    "end": "1377400"
  },
  {
    "text": "secret we create a secret called mtlserts containing tls.ert which has",
    "start": "1377400",
    "end": "1382640"
  },
  {
    "text": "the subordinate and leave certificate bundle tls.key with a private key and",
    "start": "1382640",
    "end": "1387760"
  },
  {
    "text": "ca.ert with the shared root ca which is trusted by both the client and the server let's see this in action we",
    "start": "1387760",
    "end": "1395840"
  },
  {
    "text": "deploy the initial job and then we wait for the job to finish running and after",
    "start": "1395840",
    "end": "1401120"
  },
  {
    "text": "it's done we can see the secret created there when we describe the secret we see",
    "start": "1401120",
    "end": "1406159"
  },
  {
    "text": "that it correctly injects the data as expected um and when we decode the",
    "start": "1406159",
    "end": "1412159"
  },
  {
    "text": "client certificate we see the spiffy uri right there",
    "start": "1412159",
    "end": "1417240"
  },
  {
    "text": "yeah our deployment resource mounts the search volume and creates files using",
    "start": "1417240",
    "end": "1422320"
  },
  {
    "text": "the secret mtlsert which was created by the initial job run and our client finds",
    "start": "1422320",
    "end": "1428320"
  },
  {
    "text": "the bundle with the subordinate and leaf as well as the key to make the request to the server it also uses the ca doser",
    "start": "1428320",
    "end": "1434960"
  },
  {
    "text": "to validate the service certificate for subsequent renewals we use chrome jobs which run every six",
    "start": "1434960",
    "end": "1441679"
  },
  {
    "text": "hours four times a day however if every service uses the same chron expression",
    "start": "1441679",
    "end": "1447120"
  },
  {
    "text": "we might run into an issue where we have several containers making thousands of concurrent requests and then so we",
    "start": "1447120",
    "end": "1453120"
  },
  {
    "text": "address this uh by using a customized function to dynamic dynamically generate",
    "start": "1453120",
    "end": "1458320"
  },
  {
    "text": "the schedule for each service randomizing minutes and hours this is done in a deterministic way so",
    "start": "1458320",
    "end": "1465200"
  },
  {
    "text": "that every time someone renders the configuration it doesn't generate a brand new schedule for the same service",
    "start": "1465200",
    "end": "1471200"
  },
  {
    "text": "triggering redeployments of the crown job all the time so we use the name of the service to create this unique",
    "start": "1471200",
    "end": "1476960"
  },
  {
    "text": "fingerprint by using a salt function so how often do renewals occur",
    "start": "1476960",
    "end": "1483440"
  },
  {
    "text": "the cert tool checks the time to live of the certificate and when a cert reaches 50% of its lifetime the tool run as a",
    "start": "1483440",
    "end": "1490720"
  },
  {
    "text": "crown job will attempt to renew it let's imagine here a c a certificate that's",
    "start": "1490720",
    "end": "1496159"
  },
  {
    "text": "valid for 10 days and let's imagine there's a failure of some sort say someone accidentally deleted im",
    "start": "1496159",
    "end": "1502960"
  },
  {
    "text": "permissions since the chrome job runs four times a day any error in issuing",
    "start": "1502960",
    "end": "1508080"
  },
  {
    "text": "the certificate will result in four alerts per day um for the next 5 days",
    "start": "1508080",
    "end": "1513679"
  },
  {
    "text": "until expiry that's a total of 20 alerts uh this should provide service owners with enough time to take action so",
    "start": "1513679",
    "end": "1520880"
  },
  {
    "text": "talking about alerts and monitoring let's take a closer look at our observability stack there you",
    "start": "1520880",
    "end": "1526440"
  },
  {
    "text": "go another key part of the certificate management life cycle is collecting metrics to better understand potential",
    "start": "1526440",
    "end": "1533360"
  },
  {
    "text": "failures our observability stack uses graphfana prometheus tempo and gcp logs",
    "start": "1533360",
    "end": "1540320"
  },
  {
    "text": "explorer graphfana is a web-based platform for visualizing metrics logs and traces through customizable",
    "start": "1540320",
    "end": "1546360"
  },
  {
    "text": "dashboards prometheus is a time series database that collects and queries metrics and we get application traces",
    "start": "1546360",
    "end": "1553360"
  },
  {
    "text": "from tempo and ca logs from gcp's logs explorer this is an example of the types",
    "start": "1553360",
    "end": "1560000"
  },
  {
    "text": "of logs we ingest from gcp if you're interested in learning more about observability at shopify",
    "start": "1560000",
    "end": "1567039"
  },
  {
    "text": "check out this recent talk by sebastian and matt cool uh let's go over some metrics if",
    "start": "1567039",
    "end": "1574559"
  },
  {
    "text": "you're using sr manager you get metrics exposed in the prometheus formats already from the controller web hook and",
    "start": "1574559",
    "end": "1580240"
  },
  {
    "text": "ca injector component they're available at the standard metrics endpoint on port 9402 of each component pod search",
    "start": "1580240",
    "end": "1587440"
  },
  {
    "text": "manager exposes metrics such as the date after with which the search expires the number of seconds within which the",
    "start": "1587440",
    "end": "1593279"
  },
  {
    "text": "certificate should renew it also exports metrics about the health of the certificate object and sync error count",
    "start": "1593279",
    "end": "1599440"
  },
  {
    "text": "for example um they allow us to capture failed certificate issuance and renewal problems being critical for preventing",
    "start": "1599440",
    "end": "1605120"
  },
  {
    "text": "outages related to search expiry our in-house tool emits metrics similar to the way manager does however since this",
    "start": "1605120",
    "end": "1612400"
  },
  {
    "text": "tool focuses on client certificates for mcls we don't use uh we don't have acme",
    "start": "1612400",
    "end": "1617840"
  },
  {
    "text": "related uh metrics some of the metrics we expose are sync success sync failure",
    "start": "1617840",
    "end": "1622960"
  },
  {
    "text": "search expires in seconds we use stats d for these metrics and we use tags for",
    "start": "1622960",
    "end": "1628400"
  },
  {
    "text": "better error classification sync failure uses error type tags to provide more information about issuance or storage",
    "start": "1628400",
    "end": "1634559"
  },
  {
    "text": "related errors we mentioned our unorthodox approach where we have jobs and chron jobs managing certificates",
    "start": "1634559",
    "end": "1641919"
  },
  {
    "text": "unlike longunning services where prometheus can regularly scrape the metrics jobs are ephemeral by nature",
    "start": "1641919",
    "end": "1648000"
  },
  {
    "text": "they start execute their task and terminate often before prometheus has a chance to collect metrics so how do we",
    "start": "1648000",
    "end": "1655360"
  },
  {
    "text": "ensure continuous monitoring one way to get indicators that there's something wrong when issuing the certificates is",
    "start": "1655360",
    "end": "1661679"
  },
  {
    "text": "by observing the job status by using cube state metrics directly um if you're",
    "start": "1661679",
    "end": "1667360"
  },
  {
    "text": "using cube prometheus stack you get it out of the box you can see it in action here the key metric we're looking at is",
    "start": "1667360",
    "end": "1673840"
  },
  {
    "text": "cube job status failed why is this useful uh it's an early warning system",
    "start": "1673840",
    "end": "1679760"
  },
  {
    "text": "it won't tell you exactly why the job failed or give you business specific metrics but it's an excellent first line",
    "start": "1679760",
    "end": "1685039"
  },
  {
    "text": "of defense but if you want to reliably capture metrics like issuance failure or request",
    "start": "1685039",
    "end": "1690559"
  },
  {
    "text": "duration one option is to use prometheus push gateway which acts as an intermediary the job actively pushes it",
    "start": "1690559",
    "end": "1697600"
  },
  {
    "text": "the metrics before termination and the push gateway exposes them to prometheus we chose to instrument our",
    "start": "1697600",
    "end": "1704080"
  },
  {
    "text": "in-house tool with stats d with stats d we have immediate metric pushing through",
    "start": "1704080",
    "end": "1710000"
  },
  {
    "text": "udp before the pod terminates we also deploy stats uh exporters that convert these metrics to prometheus format which",
    "start": "1710000",
    "end": "1716720"
  },
  {
    "text": "are then consumed in our graphana interface allowing us to set alerts and dashboards well so as i i i said before",
    "start": "1716720",
    "end": "1725679"
  },
  {
    "text": "we've been showing bits of the demo throughout the talk so far a series of uh short films or reals and it's time",
    "start": "1725679",
    "end": "1732240"
  },
  {
    "text": "for a feature length version where we get to see all the pieces together but let's take a look at the syn take a look",
    "start": "1732240",
    "end": "1737919"
  },
  {
    "text": "at the synopsis first we have two services a and service b",
    "start": "1737919",
    "end": "1744240"
  },
  {
    "text": "running in separate name spaces in the local kind cluster they communicate via ingress and genx controller using mtls",
    "start": "1744240",
    "end": "1751600"
  },
  {
    "text": "the controller handles tls termination for us the ingress controller validates the client certificate and then the",
    "start": "1751600",
    "end": "1758799"
  },
  {
    "text": "request is forwarded to service b service b performs additional identity verification and access control",
    "start": "1758799",
    "end": "1765840"
  },
  {
    "text": "the search tool manages the certificates that both services use for their authentication the process begins with",
    "start": "1765840",
    "end": "1772080"
  },
  {
    "text": "the generation of a key pair by the search tool which will be used for the certificate signing",
    "start": "1772080",
    "end": "1777720"
  },
  {
    "text": "request um the search tool authenticates with",
    "start": "1777720",
    "end": "1782960"
  },
  {
    "text": "google's am workload identity federation it obtains an id token which is",
    "start": "1782960",
    "end": "1788480"
  },
  {
    "text": "exchanged for an access token provided by the security token service and then",
    "start": "1788480",
    "end": "1794240"
  },
  {
    "text": "with uh the access token the search tool makes a csr request in reflected spiffy",
    "start": "1794240",
    "end": "1799520"
  },
  {
    "text": "mode to get the spiffy uri which acts as a workload identity finally the search",
    "start": "1799520",
    "end": "1805440"
  },
  {
    "text": "tool stores the certificate data in a kubernetes secret and the s tool is going to be",
    "start": "1805440",
    "end": "1810960"
  },
  {
    "text": "pushing metrics using prometheus g push gateway giving prometheus enough time to script them prometheus rules evaluate",
    "start": "1810960",
    "end": "1817760"
  },
  {
    "text": "the metrics and generate alerts for issues like failed requests the metrics and alerts are visualized in graphana",
    "start": "1817760",
    "end": "1823840"
  },
  {
    "text": "show time yeah",
    "start": "1823840",
    "end": "1828960"
  },
  {
    "text": "cool to start the demo i want to walk through a common problem i have a",
    "start": "1830440",
    "end": "1835520"
  },
  {
    "text": "directory here with many kubernetes manifest files that i want to apply at once a standard apply should do the",
    "start": "1835520",
    "end": "1842240"
  },
  {
    "text": "trick but as we see that didn't work resources were applied in the wrong order resulting in errors doing another",
    "start": "1842240",
    "end": "1848880"
  },
  {
    "text": "apply will fix this but it is not an ideal flow there has to be a better way to conveniently conveniently deploy",
    "start": "1848880",
    "end": "1855760"
  },
  {
    "text": "everything with one command in the correct order well the answer to that is",
    "start": "1855760",
    "end": "1860799"
  },
  {
    "text": "argo i'm going to begin with ensuring that the argo ui is up and running and to do that i'm just going to simply port",
    "start": "1860799",
    "end": "1866799"
  },
  {
    "text": "forward the argo service and we should see that the ui is available so i'm in",
    "start": "1866799",
    "end": "1872080"
  },
  {
    "text": "the same directory as the previous scenario but this time i defined an argo application and added the necessary sync",
    "start": "1872080",
    "end": "1878480"
  },
  {
    "text": "wave annotations to my manifest files now all i have to do is apply the argo application manifest file let's go to",
    "start": "1878480",
    "end": "1885679"
  },
  {
    "text": "the ui and see the syncing in action awesome all my kubernetes resources have successfully deployed in the correct",
    "start": "1885679",
    "end": "1892240"
  },
  {
    "text": "order i get an amazing overview of all the objects with the built-in ui and i can easily see the health of everything",
    "start": "1892240",
    "end": "1899440"
  },
  {
    "text": "and here we have some information about the latest commit from our repo that argo is choosing to sync from to better",
    "start": "1899440",
    "end": "1905360"
  },
  {
    "text": "understand how this works let's take a look at the argo annotations present on the manifest files the name space is",
    "start": "1905360",
    "end": "1912240"
  },
  {
    "text": "configured with a sync wave annotation value of negative one lower numbers indicate earlier creation while higher",
    "start": "1912240",
    "end": "1919039"
  },
  {
    "text": "numbers trigger later creation by setting it to negative one this name space is prioritized to be created",
    "start": "1919039",
    "end": "1925360"
  },
  {
    "text": "before other resources in the cluster for the job we have the sync wave set to one meaning that it will be deployed",
    "start": "1925360",
    "end": "1932000"
  },
  {
    "text": "after the namespace our deployments first need the job to run to mount theerterts which is why for them the",
    "start": "1932000",
    "end": "1939039"
  },
  {
    "text": "sync wave is set to the number two similar logic is applied to services and",
    "start": "1939039",
    "end": "1944480"
  },
  {
    "text": "ingresses where services have to be created before ingresses now let's demonstrate how access control lists",
    "start": "1944480",
    "end": "1951039"
  },
  {
    "text": "work with mtls on the top left terminal we have service a and on the top right",
    "start": "1951039",
    "end": "1956080"
  },
  {
    "text": "terminal we have service b first watch what happens when service a tries to access the /in internal/50ippy endpoint",
    "start": "1956080",
    "end": "1964799"
  },
  {
    "text": "as you can see service a successfully authenticates using its certificate and gets access to the endpoint i'm going to",
    "start": "1964799",
    "end": "1972640"
  },
  {
    "text": "zoom in on the spiffy id that identified service a to service b during the mtls",
    "start": "1972640",
    "end": "1978360"
  },
  {
    "text": "flow now let's test our acl in a different way when service a tries to",
    "start": "1978360",
    "end": "1983919"
  },
  {
    "text": "access / internal/z something different should happen even though service a is still",
    "start": "1983919",
    "end": "1990640"
  },
  {
    "text": "using the same valid certificate for authentication notice the red error message access denied this is our acl in",
    "start": "1990640",
    "end": "1998960"
  },
  {
    "text": "action service a is authenticated but not authorized to access this specific",
    "start": "1998960",
    "end": "2004760"
  },
  {
    "text": "endpoint now for our failure scenario some users are reporting issues with the",
    "start": "2004760",
    "end": "2010000"
  },
  {
    "text": "application to find out why i'm going to head over to graphana and then go under the alert rule section and then i'm going to",
    "start": "2010000",
    "end": "2016720"
  },
  {
    "text": "filter the alerts to those that are firing as i i notice at the bottom an",
    "start": "2016720",
    "end": "2023279"
  },
  {
    "text": "error coming from theert tool as i expand i see that it's an error with certificate",
    "start": "2023279",
    "end": "2028360"
  },
  {
    "text": "issuance i will further expand and get a lot more information about the rule that is firing my hunch is that the job that",
    "start": "2028360",
    "end": "2034960"
  },
  {
    "text": "is responsible for issuing certificates to our pods seems to have encountered an issue let's go to the terminal to",
    "start": "2034960",
    "end": "2041600"
  },
  {
    "text": "confirm this i'm going to look at the status of the job and it looks like it never completed we should dive deeper",
    "start": "2041600",
    "end": "2048878"
  },
  {
    "text": "and take a look at the logs from the pod of the job and there we go we found an error",
    "start": "2048879",
    "end": "2055280"
  },
  {
    "text": "message the service account didn't have the correct permissions which caused the alert rule to fire and this marks the",
    "start": "2055280",
    "end": "2062240"
  },
  {
    "text": "end of our demo so what are the big ideas you should walk away with zero trust",
    "start": "2062240",
    "end": "2068480"
  },
  {
    "text": "adoption continues to accelerate making mtls not just important but essential",
    "start": "2068480",
    "end": "2074079"
  },
  {
    "text": "for secure service-to-service communication when it comes to workload identity spiffy stands out as the",
    "start": "2074079",
    "end": "2080320"
  },
  {
    "text": "industry standard solution offering a robust framework for service identification and",
    "start": "2080320",
    "end": "2086839"
  },
  {
    "text": "authentication remember that authentication isn't one-sizefits-all your solution must",
    "start": "2086839",
    "end": "2092398"
  },
  {
    "text": "scale with your organization and address your unique security requirements",
    "start": "2092399",
    "end": "2097440"
  },
  {
    "text": "for certificate management you have options while proven open-source tools",
    "start": "2097440",
    "end": "2102720"
  },
  {
    "text": "exist don't rule out building a custom solution if your needs demand it ca",
    "start": "2102720",
    "end": "2108160"
  },
  {
    "text": "rotations deserve special attention they require thorough planning and precise",
    "start": "2108160",
    "end": "2113400"
  },
  {
    "text": "execution finally comprehensive monitoring and alerting are critical you",
    "start": "2113400",
    "end": "2118960"
  },
  {
    "text": "need to catch certificate issues early before they impact your services and users",
    "start": "2118960",
    "end": "2125599"
  },
  {
    "text": "thank you for taking the time to attend our talk these qr codes link to our socials where you can connect with us um",
    "start": "2125599",
    "end": "2132320"
  },
  {
    "text": "i'll stay on this slide for a moment",
    "start": "2132320",
    "end": "2136440"
  }
]