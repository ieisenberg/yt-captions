[
  {
    "text": "thank you",
    "start": "2179",
    "end": "4319"
  },
  {
    "text": "so fast",
    "start": "4319",
    "end": "7580"
  },
  {
    "text": "online",
    "start": "30539",
    "end": "33539"
  },
  {
    "text": "in the past three years",
    "start": "38040",
    "end": "41780"
  },
  {
    "text": "implementation of a c plus function",
    "start": "66020",
    "end": "69720"
  },
  {
    "text": "this function unescapes new line",
    "start": "69720",
    "end": "71880"
  },
  {
    "text": "characters in the input string",
    "start": "71880",
    "end": "74040"
  },
  {
    "text": "it works generally well for the majority",
    "start": "74040",
    "end": "76860"
  },
  {
    "text": "of inputs but there are a few problems",
    "start": "76860",
    "end": "78900"
  },
  {
    "text": "with it",
    "start": "78900",
    "end": "79979"
  },
  {
    "text": "let's focus on the indexing",
    "start": "79979",
    "end": "82680"
  },
  {
    "text": "notice that the index I is incremented",
    "start": "82680",
    "end": "85080"
  },
  {
    "text": "in two places",
    "start": "85080",
    "end": "87000"
  },
  {
    "text": "under CERN inputs we might end up",
    "start": "87000",
    "end": "89580"
  },
  {
    "text": "incrementing outside the bounds of the",
    "start": "89580",
    "end": "91439"
  },
  {
    "text": "string and read a character that's not",
    "start": "91439",
    "end": "93540"
  },
  {
    "text": "part of the string that is invalid",
    "start": "93540",
    "end": "95880"
  },
  {
    "text": "behavior in C plus",
    "start": "95880",
    "end": "97920"
  },
  {
    "text": "let's write a fuzzer that can catch edge",
    "start": "97920",
    "end": "100079"
  },
  {
    "text": "cases like this",
    "start": "100079",
    "end": "102979"
  },
  {
    "text": "so first to write a fuzzer an Envoy we",
    "start": "103140",
    "end": "106380"
  },
  {
    "text": "need to create a fuzz input schema the",
    "start": "106380",
    "end": "108659"
  },
  {
    "text": "input schema indicates to the fuzzing",
    "start": "108659",
    "end": "110880"
  },
  {
    "text": "engine the types of data to generate",
    "start": "110880",
    "end": "113280"
  },
  {
    "text": "the previous library takes then one",
    "start": "113280",
    "end": "115439"
  },
  {
    "text": "single input parameter a string so we",
    "start": "115439",
    "end": "118259"
  },
  {
    "text": "create a protocol message that has a",
    "start": "118259",
    "end": "120240"
  },
  {
    "text": "string field now the fuzzing engine will",
    "start": "120240",
    "end": "122579"
  },
  {
    "text": "Generate random strings",
    "start": "122579",
    "end": "125040"
  },
  {
    "text": "next rewrite our fuzzer for this Library",
    "start": "125040",
    "end": "127799"
  },
  {
    "text": "it's very simple three lines of code we",
    "start": "127799",
    "end": "130560"
  },
  {
    "text": "use the standard lib Pro to buff mutator",
    "start": "130560",
    "end": "132480"
  },
  {
    "text": "macro to define a callback function this",
    "start": "132480",
    "end": "135180"
  },
  {
    "text": "callback ingests a generated input and",
    "start": "135180",
    "end": "138360"
  },
  {
    "text": "passes it down to the library under test",
    "start": "138360",
    "end": "140700"
  },
  {
    "text": "the unescape function",
    "start": "140700",
    "end": "143340"
  },
  {
    "text": "now when the fuzzer runs it generates",
    "start": "143340",
    "end": "145739"
  },
  {
    "text": "random strings one string per iteration",
    "start": "145739",
    "end": "148739"
  },
  {
    "text": "here is some possible strings in my",
    "start": "148739",
    "end": "150959"
  },
  {
    "text": "generate our hope is that the fuzzer",
    "start": "150959",
    "end": "153660"
  },
  {
    "text": "will generate that last string the",
    "start": "153660",
    "end": "155819"
  },
  {
    "text": "string with a trailing backslash",
    "start": "155819",
    "end": "158040"
  },
  {
    "text": "this input will cause the undefined",
    "start": "158040",
    "end": "160319"
  },
  {
    "text": "behavior in the library under test",
    "start": "160319",
    "end": "162720"
  },
  {
    "text": "our fuzzer running with C plus plus",
    "start": "162720",
    "end": "164580"
  },
  {
    "text": "sanitizers will catch that and Report",
    "start": "164580",
    "end": "167280"
  },
  {
    "text": "the error to the developer",
    "start": "167280",
    "end": "170879"
  },
  {
    "text": "so now the key question is how does",
    "start": "170879",
    "end": "173879"
  },
  {
    "text": "fuzzing engine generate strings like",
    "start": "173879",
    "end": "175800"
  },
  {
    "text": "this",
    "start": "175800",
    "end": "176640"
  },
  {
    "text": "if the strings are completely random it",
    "start": "176640",
    "end": "179459"
  },
  {
    "text": "might take it a lot of trial and error",
    "start": "179459",
    "end": "181019"
  },
  {
    "text": "to create a backslash at the end",
    "start": "181019",
    "end": "183480"
  },
  {
    "text": "so the answer is that it's not",
    "start": "183480",
    "end": "185819"
  },
  {
    "text": "completely random this is where",
    "start": "185819",
    "end": "187319"
  },
  {
    "text": "continuous fuzzing coverage guided",
    "start": "187319",
    "end": "189360"
  },
  {
    "text": "fuzzers come in",
    "start": "189360",
    "end": "191879"
  },
  {
    "text": "continuous fuzzing is essentially",
    "start": "191879",
    "end": "194220"
  },
  {
    "text": "running our fuzzers 24 7 in the",
    "start": "194220",
    "end": "196800"
  },
  {
    "text": "background",
    "start": "196800",
    "end": "197760"
  },
  {
    "text": "we combine this with coverage guided",
    "start": "197760",
    "end": "199920"
  },
  {
    "text": "fuzzers",
    "start": "199920",
    "end": "201000"
  },
  {
    "text": "coverage guided fuzzers employ a",
    "start": "201000",
    "end": "202860"
  },
  {
    "text": "feedback loop to generate inputs these",
    "start": "202860",
    "end": "205440"
  },
  {
    "text": "fuzzers use code coverage as the input",
    "start": "205440",
    "end": "207840"
  },
  {
    "text": "signal in the feedback loop",
    "start": "207840",
    "end": "210000"
  },
  {
    "text": "so every time these fuzzers run they",
    "start": "210000",
    "end": "213060"
  },
  {
    "text": "generate a random input and then score",
    "start": "213060",
    "end": "215940"
  },
  {
    "text": "or rate that input based on code",
    "start": "215940",
    "end": "217739"
  },
  {
    "text": "coverage",
    "start": "217739",
    "end": "218879"
  },
  {
    "text": "the fuzzers can then explore other state",
    "start": "218879",
    "end": "221400"
  },
  {
    "text": "space new inputs that rate higher that",
    "start": "221400",
    "end": "224519"
  },
  {
    "text": "have higher code coverage it boils down",
    "start": "224519",
    "end": "227159"
  },
  {
    "text": "to an optimization problem the fuzzers",
    "start": "227159",
    "end": "230220"
  },
  {
    "text": "are trying to optimize against the input",
    "start": "230220",
    "end": "231959"
  },
  {
    "text": "space and the loss function is inversely",
    "start": "231959",
    "end": "234840"
  },
  {
    "text": "proportional to code coverage",
    "start": "234840",
    "end": "237840"
  },
  {
    "text": "so this whole concept of continuous",
    "start": "237840",
    "end": "240420"
  },
  {
    "text": "buzzing with coverage guided fuzzers is",
    "start": "240420",
    "end": "242580"
  },
  {
    "text": "a solve problem at Google we have two",
    "start": "242580",
    "end": "245040"
  },
  {
    "text": "open source Frameworks that any",
    "start": "245040",
    "end": "246480"
  },
  {
    "text": "developers can use if you're a high",
    "start": "246480",
    "end": "249299"
  },
  {
    "text": "impact open source project that is used",
    "start": "249299",
    "end": "251340"
  },
  {
    "text": "widely across the web you can integrate",
    "start": "251340",
    "end": "253560"
  },
  {
    "text": "with OSS fuzz this is managed by Google",
    "start": "253560",
    "end": "256560"
  },
  {
    "text": "and it's completely free for you to use",
    "start": "256560",
    "end": "259019"
  },
  {
    "text": "if your project doesn't meet those",
    "start": "259019",
    "end": "260639"
  },
  {
    "text": "requirements you can run clusterfuzz on",
    "start": "260639",
    "end": "262620"
  },
  {
    "text": "your own infrastructure",
    "start": "262620",
    "end": "265020"
  },
  {
    "text": "that is all I have thank you",
    "start": "265020",
    "end": "267480"
  },
  {
    "text": "[Applause]",
    "start": "267480",
    "end": "271449"
  }
]