[
  {
    "text": "hello everybody the goal of this maintainers track is to look at one of the main interesting parts of falco",
    "start": "80",
    "end": "6080"
  },
  {
    "text": "falco is a cncf incubated project that aims to provide cloud-native runtime security",
    "start": "6080",
    "end": "11679"
  },
  {
    "text": "we look at the part of falco that uses grpc as an output interface that exposes the rule",
    "start": "11679",
    "end": "17359"
  },
  {
    "text": "alerts matched thanks to an ebpf program able to trace all the c schools happening in the",
    "start": "17359",
    "end": "23920"
  },
  {
    "text": "kernel falco was created as an open source project from day one by assisting in",
    "start": "23920",
    "end": "29840"
  },
  {
    "text": "2016 to pass libsyn's p events to match security policies against them at runtime about",
    "start": "29840",
    "end": "36719"
  },
  {
    "text": "years later it was donated to the cncf this past january falca's been the first",
    "start": "36719",
    "end": "41920"
  },
  {
    "text": "ever and time security project to be promoted to the cncf incubation level",
    "start": "41920",
    "end": "47200"
  },
  {
    "text": "anyways my name is leonardo di donato i'm an open source software engineer at sysdig where my daily job",
    "start": "47200",
    "end": "52800"
  },
  {
    "text": "is to code falco evaluate and maintain it as a material farco i also have to advocate and present its",
    "start": "52800",
    "end": "58960"
  },
  {
    "text": "technology and all the artwork we do to continuously improve it so here i am here there's a photo of me",
    "start": "58960",
    "end": "65360"
  },
  {
    "text": "moving as like a real italian in san diego falconswag to the first one guessing the exact meaning",
    "start": "65360",
    "end": "71280"
  },
  {
    "text": "you can usually find me on twitter github and generally the webverse with the nickname leodido feel free to",
    "start": "71280",
    "end": "78320"
  },
  {
    "text": "drop me a line follow me ask me questions about falco bpf kernel whatever",
    "start": "78320",
    "end": "83680"
  },
  {
    "text": "no problem at all i like to socialize the plans for the next 30 minutes are to",
    "start": "83680",
    "end": "89520"
  },
  {
    "text": "look at photos of my beautiful homeland in southern italy while trying to get the skin on our",
    "start": "89520",
    "end": "95119"
  },
  {
    "text": "falco's solves during time security problem even for cloud native environments based on our beloved kubernetes",
    "start": "95119",
    "end": "101759"
  },
  {
    "text": "by tracing the c schools using a cool kit technology called dbpf finally we will see how",
    "start": "101759",
    "end": "108079"
  },
  {
    "text": "falco collects these events from the kernel as rules against them and now it",
    "start": "108079",
    "end": "113520"
  },
  {
    "text": "eventually outputs outlets via grpc to make them more usable in a cognitive context",
    "start": "113520",
    "end": "120159"
  },
  {
    "text": "since we are going to deep dive into all of these by the end of this talk you'll have a",
    "start": "120159",
    "end": "125280"
  },
  {
    "text": "deep technical knowledge of some very crucial parts of falco and hopefully you will be also able to start",
    "start": "125280",
    "end": "131920"
  },
  {
    "text": "contributing to it what does security mean at least to me i want to control things that can happen",
    "start": "131920",
    "end": "138239"
  },
  {
    "text": "and things that cannot since preemptive control is not always possible i also want deep visibility",
    "start": "138239",
    "end": "144319"
  },
  {
    "text": "into my systems to be able to know as soon as possible what just happened i think of security in terms of two",
    "start": "144319",
    "end": "150319"
  },
  {
    "text": "words prevention and detection what these two concepts have in common policies both use some",
    "start": "150319",
    "end": "158080"
  },
  {
    "text": "kind of policies to describe the allowed or disallowed mirror for a process in terms of system calls their arguments",
    "start": "158080",
    "end": "165200"
  },
  {
    "text": "and asked resources assessed the differences are that the first concept prevention",
    "start": "165200",
    "end": "170640"
  },
  {
    "text": "is about enforcement do not allow some actions for some person to happen at all",
    "start": "170640",
    "end": "175760"
  },
  {
    "text": "because of some policies on the other side the second handle of security is to use",
    "start": "175760",
    "end": "181120"
  },
  {
    "text": "the policies to monitor the behavior of a process and notify when it steps outside those policies at runtime",
    "start": "181120",
    "end": "189360"
  },
  {
    "text": "some examples of enforcement tools are sitcom second bpf selinux apartment",
    "start": "189680",
    "end": "194879"
  },
  {
    "text": "even deuterization mechanisms like kubernetes serve back or the policy based admission plugins",
    "start": "194879",
    "end": "200319"
  },
  {
    "text": "feed this category since they will prevent something to happen depending on some policies",
    "start": "200319",
    "end": "205840"
  },
  {
    "text": "while tools like auditd and falco itself belong to the auditing side of the security topic",
    "start": "205840",
    "end": "211519"
  },
  {
    "text": "a topic that especially in cloud native security environments has not been solved yet falco runs mostly user space and this",
    "start": "211519",
    "end": "219040"
  },
  {
    "text": "makes it somewhat a software target but on the other end this also makes",
    "start": "219040",
    "end": "225120"
  },
  {
    "text": "it able to have a much richer set of information powering its policies an augmented kind of policies",
    "start": "225120",
    "end": "231360"
  },
  {
    "text": "so taking into account things like container metadata that's very very difficult to implement completely at the",
    "start": "231360",
    "end": "236879"
  },
  {
    "text": "turner level so can falco solve all our security concerns",
    "start": "236879",
    "end": "243760"
  },
  {
    "text": "honestly not at all software is made of layers and soy security",
    "start": "243760",
    "end": "248959"
  },
  {
    "text": "this is even more true in cloud native environments nowadays as you can see in the scheme i drew into",
    "start": "248959",
    "end": "255360"
  },
  {
    "text": "the slide falco is here to fit into this picture together with the other tools",
    "start": "255360",
    "end": "261040"
  },
  {
    "text": "you'll have to combine it with other layers in many way using a defense in that strategy the idea is to defend a system against",
    "start": "261040",
    "end": "268000"
  },
  {
    "text": "any particular attack using several independent methods in case you are still not convinced that there's no",
    "start": "268000",
    "end": "274720"
  },
  {
    "text": "such thing as perfectly safe software and the layered approach is the best",
    "start": "274720",
    "end": "280320"
  },
  {
    "text": "possible strategy for software security just allow me to stress some points",
    "start": "280320",
    "end": "286400"
  },
  {
    "text": "how to trust cloud providers and their ability to detect malicious or compromised insiders",
    "start": "286400",
    "end": "292720"
  },
  {
    "text": "how to prevent an undisclosed vulnerability or a zero debug that allows someone to break into your",
    "start": "292720",
    "end": "298800"
  },
  {
    "text": "systems i mean cv still happens linux kubernetes",
    "start": "298800",
    "end": "303919"
  },
  {
    "text": "name an open source software that does not experience the cv and suffered an explorer",
    "start": "303919",
    "end": "310400"
  },
  {
    "text": "i think it's clear now that enforcement tools alone are not enough we also need runtime security solutions",
    "start": "310400",
    "end": "317280"
  },
  {
    "text": "and these two approaches are and must be complementary and not mutually exclusive",
    "start": "317280",
    "end": "323039"
  },
  {
    "text": "so what's runtime security in the context i've just described runtime security is often the last line of",
    "start": "323039",
    "end": "328400"
  },
  {
    "text": "defense let's try with a metaphor she's scaly look how beautiful she was i have locks on my door and",
    "start": "328400",
    "end": "335120"
  },
  {
    "text": "dolls on alarm think of them as compliance rules but she hollers me when things are not going",
    "start": "335120",
    "end": "341199"
  },
  {
    "text": "right policy violations when little bro is misbehaving think of him like a compromised insider",
    "start": "341199",
    "end": "347919"
  },
  {
    "text": "or if there's something suspicious happening outside or nearby anomaly or zero day she detects runtime",
    "start": "347919",
    "end": "355280"
  },
  {
    "text": "anomalies in my life at two and she was may she rest in peace very serious about her job i mean",
    "start": "355280",
    "end": "361440"
  },
  {
    "text": "look at her in the picture so while prevention is about locking the",
    "start": "361440",
    "end": "366479"
  },
  {
    "text": "doors detection is about continuously monitoring the inside of the perimeter",
    "start": "366479",
    "end": "372560"
  },
  {
    "text": "the faulty unique way to do this is by tracing and detecting everything happening inside the box from the bottom",
    "start": "373120",
    "end": "379360"
  },
  {
    "text": "the kernel up instead of using the usual top-down approach like other security monitoring engines do",
    "start": "379360",
    "end": "385680"
  },
  {
    "text": "how that's possible tracing cisco's at their source and asserting rules against events",
    "start": "385680",
    "end": "391440"
  },
  {
    "text": "containing the syscalls plus other context info like arguments kubernetes metadata containing metadata",
    "start": "391440",
    "end": "397360"
  },
  {
    "text": "and so on somebody could argue why tracing the c schools",
    "start": "397360",
    "end": "402720"
  },
  {
    "text": "well nowadays the production environments are filled with so many pods services",
    "start": "402720",
    "end": "407759"
  },
  {
    "text": "containers monitoring tools generally software i tried to do a nice layered diagram to",
    "start": "407759",
    "end": "414639"
  },
  {
    "text": "slide before and well it turns out that complexity is the exact reason we go look under the um",
    "start": "414639",
    "end": "423280"
  },
  {
    "text": "in the end whatever program we run it will end up making a lot of syscalls this because system calls are the way",
    "start": "423280",
    "end": "430319"
  },
  {
    "text": "programs ask the kernel where everything happens to perform some tasks",
    "start": "430319",
    "end": "435360"
  },
  {
    "text": "whether the task regards networking io processes this does not matter thus instead of",
    "start": "435360",
    "end": "442639"
  },
  {
    "text": "looking into every one of the hundreds of layers and abstractions we run our applications onto",
    "start": "442639",
    "end": "448639"
  },
  {
    "text": "the folk approach to the tech security threats at runtime is to go at the lowest",
    "start": "448639",
    "end": "454080"
  },
  {
    "text": "possible level and trace all the footprints and the context in which they happened",
    "start": "454080",
    "end": "459360"
  },
  {
    "text": "we need to combine these events with metadata from other layers of interest like kubernetes audit logs container",
    "start": "459360",
    "end": "464720"
  },
  {
    "text": "metadata and so on for example we need to have the cisco arguments in a readable",
    "start": "464720",
    "end": "470000"
  },
  {
    "text": "way we need to know when events are happening asynchronously we also",
    "start": "470000",
    "end": "476000"
  },
  {
    "text": "need to know if a cisco was originated in a container what was the idea of the container and from what",
    "start": "476000",
    "end": "482080"
  },
  {
    "text": "image the container was created also we would like to know the cluster nodes where all of these happened",
    "start": "482080",
    "end": "488000"
  },
  {
    "text": "how to get cisco to user space and use them as one of the inputs for runtime security",
    "start": "488000",
    "end": "493120"
  },
  {
    "text": "falcos solves this with three alternative approaches that we can call falco drivers a kernel",
    "start": "493120",
    "end": "499520"
  },
  {
    "text": "module a pitrass-based producer we call pdig which is slower than other methods and",
    "start": "499520",
    "end": "505280"
  },
  {
    "text": "very yucky but it's the only possible solution in some environments like managed kubernetes",
    "start": "505280",
    "end": "510319"
  },
  {
    "text": "clusters fargate and places where you cannot install camera module either in bpf probes",
    "start": "510319",
    "end": "516159"
  },
  {
    "text": "and finally an mbpf probe forget the first few drivers i mentioned",
    "start": "516159",
    "end": "522080"
  },
  {
    "text": "in this talk we are gonna focus only on the latter before a while using something it's good",
    "start": "522080",
    "end": "527279"
  },
  {
    "text": "practice trying to understand what it is right ebpf is an easy way to program the linux",
    "start": "527279",
    "end": "532640"
  },
  {
    "text": "kernel unlike kernel models ebpf programs are guaranteed to complete without crashing",
    "start": "532640",
    "end": "538480"
  },
  {
    "text": "if you ever brought a kernel model i know you can feel the greatness of such achievement so the name of this technology stands",
    "start": "538480",
    "end": "545279"
  },
  {
    "text": "for extended berkeley parket filter it's the evolution of bpf a technology born in 1992 to perform",
    "start": "545279",
    "end": "552560"
  },
  {
    "text": "very efficient packet filtering avoiding unnecessary user space allocations",
    "start": "552560",
    "end": "557839"
  },
  {
    "text": "so ebpf is very flexible and capable of tracing almost any aspect of all major linux subsystem",
    "start": "557839",
    "end": "563600"
  },
  {
    "text": "ranging from cpu scheduler memory manager networking system calls and so on with abpf",
    "start": "563600",
    "end": "570640"
  },
  {
    "text": "one can attach custom sandbox bytecode to virtually every function exported by a kernel simple table without the fear",
    "start": "570640",
    "end": "577200"
  },
  {
    "text": "of breaking the kernel ebpf emphasizes the importance of safety when crossing user space boundaries",
    "start": "577200",
    "end": "583680"
  },
  {
    "text": "the internal verifier will refuse to load any bpf program if invalid point the references are detected or the",
    "start": "583680",
    "end": "590320"
  },
  {
    "text": "maximum stack size limit is reached loops are not generally allowed and only a small subset of",
    "start": "590320",
    "end": "598000"
  },
  {
    "text": "specific bpf helper functions is permitted to be called within generated by the code",
    "start": "598000",
    "end": "604480"
  },
  {
    "text": "thus a bpf programs are guaranteed to terminate at some point in time and never exhaust system resources",
    "start": "604480",
    "end": "610480"
  },
  {
    "text": "furthermore the performance already induced by bpf is soft negligible making it a great fit for monitoring and",
    "start": "610480",
    "end": "617600"
  },
  {
    "text": "tracing evenly loaded systems for all these reasons ebpf superpowers are perfect for our need to",
    "start": "617600",
    "end": "624480"
  },
  {
    "text": "trace all the syscalls i know when we are most ready to look at our bpf driver implementation no worries",
    "start": "624480",
    "end": "631200"
  },
  {
    "text": "let's first give a glance at how abpf architecture works in general let's pretend we have an bpf",
    "start": "631200",
    "end": "637279"
  },
  {
    "text": "source file ready the first step is to compile it to a bpf byte code once it is successfully compiled and the",
    "start": "637279",
    "end": "644480"
  },
  {
    "text": "object file is generated we are ready to inject it into the kernel attaching it to a given hook or making",
    "start": "644480",
    "end": "650640"
  },
  {
    "text": "it run on a specific event for this purpose we used bpf system code",
    "start": "650640",
    "end": "655760"
  },
  {
    "text": "this seemingly simple cisco does a lot more apart from loading a bpf byte code it attaches the particle to the event",
    "start": "655760",
    "end": "662160"
  },
  {
    "text": "and it also creates and manipulates in kernel maps then the verifier statically analyzes the program before loading it",
    "start": "662160",
    "end": "668160"
  },
  {
    "text": "to ensure that it cannot harm the running system as we briefly explained before and it's important to observe how there",
    "start": "668160",
    "end": "674800"
  },
  {
    "text": "are plenty of events to which we can look up various bpf program types",
    "start": "674800",
    "end": "679839"
  },
  {
    "text": "we have events for monitoring and tracing purposes others for security others for assess",
    "start": "679839",
    "end": "685279"
  },
  {
    "text": "control and clear for networking too finally a bpf also provides the ability",
    "start": "685279",
    "end": "691440"
  },
  {
    "text": "and to assess shared data structure such as ebpf maps well the ebpf maps are likely the most",
    "start": "691440",
    "end": "698240"
  },
  {
    "text": "compelling feature of abpf without any dubbed without maps and falco driver will not have been possible",
    "start": "698240",
    "end": "704720"
  },
  {
    "text": "at all maps come to the rescue for sharing state between user and kernel space they represent a very",
    "start": "704720",
    "end": "710800"
  },
  {
    "text": "efficient in kernel key values tool for data aggregation and can be assessed asynchronously from user speech there",
    "start": "710800",
    "end": "718240"
  },
  {
    "text": "are many types of bpf maps as you can see looking at the slide maps that store delta per cpu usual hash",
    "start": "718240",
    "end": "726720"
  },
  {
    "text": "maps arrays maps to store other programs to tell cool later that we use a lot in our",
    "start": "726720",
    "end": "732480"
  },
  {
    "text": "driver and so on ebpf does not allow you by design to move memory from kernel space to user space and for",
    "start": "732480",
    "end": "739920"
  },
  {
    "text": "reasons its purpose to be safe will there been a completely filed soap in that case",
    "start": "739920",
    "end": "745360"
  },
  {
    "text": "but luckily as said ebpf has maps as you can see in the diagram here the",
    "start": "745360",
    "end": "750959"
  },
  {
    "text": "bpf maps are a vital part of the falc architecture when using the bpf probe",
    "start": "750959",
    "end": "756720"
  },
  {
    "text": "here we have a library called libscap that loads the alph of the bpf driver into the kernel bpf",
    "start": "756720",
    "end": "763040"
  },
  {
    "text": "virtual machine which executes it under the odds libscop also sends literally bpf programs to be",
    "start": "763040",
    "end": "769120"
  },
  {
    "text": "executed at runtime the goal of these little bpf programs that we call fillers",
    "start": "769120",
    "end": "774639"
  },
  {
    "text": "is to augment the traced c schools so that in an input event we'll have the actual value c score",
    "start": "774639",
    "end": "780160"
  },
  {
    "text": "parameter head not some random x values at this point ebpf does its magic",
    "start": "780160",
    "end": "786560"
  },
  {
    "text": "and data flows to libs cap and dental insist thanks to those fancy bpf maps now",
    "start": "786560",
    "end": "793040"
  },
  {
    "text": "libsys can finally enrich the events flowing in with container metadata",
    "start": "793040",
    "end": "798399"
  },
  {
    "text": "and all the other fancy cloud native things we see it suppose you want to contribute to our",
    "start": "798399",
    "end": "804320"
  },
  {
    "text": "abpf driver now the first step would be to build the existing one from source right",
    "start": "804320",
    "end": "811040"
  },
  {
    "text": "so create a build directory go into it configure cmake to create make files to compile the bpf probe 2",
    "start": "811040",
    "end": "818000"
  },
  {
    "text": "as shown in the slide once this configuration step is done execute make bpf to build it if",
    "start": "818000",
    "end": "824320"
  },
  {
    "text": "everything went well you will end up having a 0.2 object file to falcon bpf probe into the build slash drivers bpf",
    "start": "824320",
    "end": "831440"
  },
  {
    "text": "directory pretty simple as long you already have clang installed the either for your specific current",
    "start": "831440",
    "end": "838320"
  },
  {
    "text": "release installed and the bug file system mounted well the next natural step is to load the bpf",
    "start": "838320",
    "end": "844639"
  },
  {
    "text": "probe we just build and use it as the falco inputs driver long story short you can execute falco",
    "start": "844639",
    "end": "850720"
  },
  {
    "text": "putting before its binary the falco bpf probe environment variable it can be either empty in which case",
    "start": "850720",
    "end": "857279"
  },
  {
    "text": "falco expects the bpf object file to be into the dot file called slash falco dash bpf.2",
    "start": "857279",
    "end": "863360"
  },
  {
    "text": "file into your room directory or directly pointing to the path where you put the compiled bpf object",
    "start": "863360",
    "end": "870399"
  },
  {
    "text": "file let's now dive into some details so what does happen when we run falco with",
    "start": "870399",
    "end": "877440"
  },
  {
    "text": "one of the two comments in the previous slide first of all the provided arguments are",
    "start": "877440",
    "end": "882480"
  },
  {
    "text": "passed then falco instantiates the sys class obtaining the spectre",
    "start": "882480",
    "end": "888480"
  },
  {
    "text": "which is what we call libsynsp it passes this inspector instance to the falco",
    "start": "888480",
    "end": "893600"
  },
  {
    "text": "engine which in turn also passes the rules that we started falco weed and to the falco outputs which is the",
    "start": "893600",
    "end": "900320"
  },
  {
    "text": "piece of falco responsible for initializing the output methods and",
    "start": "900320",
    "end": "905440"
  },
  {
    "text": "handle the events when they will flow in from this pack at this point falco is ready",
    "start": "905440",
    "end": "910560"
  },
  {
    "text": "to instruct the inspector to start live capturing syscalls their arguments the context within the",
    "start": "910560",
    "end": "916639"
  },
  {
    "text": "happening container metadata generate what we call input themes it does so by calling the open method of",
    "start": "916639",
    "end": "923760"
  },
  {
    "text": "the sims class which starts the capture by calling the scap open method of the libs cup library the",
    "start": "923760",
    "end": "930560"
  },
  {
    "text": "lib's cup main duty in this scenario is to actually load the bpf program into the kernel and finally",
    "start": "930560",
    "end": "936639"
  },
  {
    "text": "start the capture this only slide will need a wall torque dedicated to it but",
    "start": "936639",
    "end": "942079"
  },
  {
    "text": "let me try briefly summarize it to perform the loading it first tries to",
    "start": "942079",
    "end": "947759"
  },
  {
    "text": "locate the bpf object file depending on the environment variable we passed the falco before",
    "start": "947759",
    "end": "952959"
  },
  {
    "text": "then it collects some machining for like number of online cores enables a bpf just in time compilation",
    "start": "952959",
    "end": "959519"
  },
  {
    "text": "for better performances and starts passing the alpha of the opacity in abpf object 5.",
    "start": "959519",
    "end": "965519"
  },
  {
    "text": "while passing it lipscope first checks if the bpf pro version has been compiled for the current current",
    "start": "965519",
    "end": "971440"
  },
  {
    "text": "release and if the ebpf version matches the one that the current falcon version",
    "start": "971440",
    "end": "976720"
  },
  {
    "text": "requires then it looks for ebpf map sections into the elf to define and create them",
    "start": "976720",
    "end": "983519"
  },
  {
    "text": "accordingly dbpf probe uses various maps to define and share its setting its state",
    "start": "983519",
    "end": "989279"
  },
  {
    "text": "and its behavior it does a map to represent cisco through system independent codes",
    "start": "989279",
    "end": "996399"
  },
  {
    "text": "look for c school code routing table a map to represent whether a specific c school",
    "start": "996399",
    "end": "1002480"
  },
  {
    "text": "should be traded or ignored look for c school table",
    "start": "1002480",
    "end": "1007600"
  },
  {
    "text": "another map to describe the events in terms of the cisco they are created from",
    "start": "1007600",
    "end": "1013040"
  },
  {
    "text": "its argument and their tabs look for event info tables a map to link every",
    "start": "1013040",
    "end": "1019759"
  },
  {
    "text": "cisco to the entry and exit fillers to execute when it occurs",
    "start": "1019759",
    "end": "1025678"
  },
  {
    "text": "filler stable then it has also maps to store measurements about all processes",
    "start": "1025679",
    "end": "1031520"
  },
  {
    "text": "and threads per cpu lipscope loads all of these from the elf and populates them",
    "start": "1031520",
    "end": "1038558"
  },
  {
    "text": "then it looks for elf sections starting with trace point or raw trace",
    "start": "1038559",
    "end": "1044640"
  },
  {
    "text": "point prefix and loads them too to do so it uses bpfc school using bpf prog type trace",
    "start": "1044640",
    "end": "1052559"
  },
  {
    "text": "point or bpf prototype raw trace point once loaded it attaches them either by",
    "start": "1052559",
    "end": "1059600"
  },
  {
    "text": "opening the transparent file into the backfile system and using ioctl",
    "start": "1059600",
    "end": "1064960"
  },
  {
    "text": "command with perth event ioc set bpl flag or by using bpf row trace point open",
    "start": "1064960",
    "end": "1073039"
  },
  {
    "text": "bpf command for root response if they are supported when a trace point with a bpf program",
    "start": "1073039",
    "end": "1079120"
  },
  {
    "text": "attached to it fires that program will be run and this is how our bpf driver traces",
    "start": "1079120",
    "end": "1085600"
  },
  {
    "text": "all the c scores finally libs cap looks for elf sections starting with the filler",
    "start": "1085600",
    "end": "1091679"
  },
  {
    "text": "prefix it grabs the corresponding bpf program from the fillers table",
    "start": "1091679",
    "end": "1098000"
  },
  {
    "text": "and setups it to be executed when the related c school get traced by populating the",
    "start": "1098000",
    "end": "1103840"
  },
  {
    "text": "corresponding ebpf map of type bpf map type prog",
    "start": "1103840",
    "end": "1108960"
  },
  {
    "text": "array these little bpf programs are responsible for reading the c school arguments at the entry or the exit of",
    "start": "1108960",
    "end": "1116160"
  },
  {
    "text": "the corresponding c school and make them useful for libsyns",
    "start": "1116160",
    "end": "1121760"
  },
  {
    "text": "alongside libscap also retrieved the process and user lists and now it is ready to scan the profile",
    "start": "1121760",
    "end": "1129200"
  },
  {
    "text": "system to gather thread ids read sockets retrieve various other process information",
    "start": "1129200",
    "end": "1136000"
  },
  {
    "text": "now how all of these events are carried to user space well falco is now ready to go grab them",
    "start": "1136000",
    "end": "1144320"
  },
  {
    "text": "to do so it simply loops through the events by continuously calling the next",
    "start": "1144320",
    "end": "1149520"
  },
  {
    "text": "middle of the inspector such method does three main things it gets pending container",
    "start": "1149520",
    "end": "1156160"
  },
  {
    "text": "events if any it calls the scapenex function of libscap and updates the kubernetes",
    "start": "1156160",
    "end": "1161919"
  },
  {
    "text": "state by connecting to the kubernetes api server and asynchronously collecting its metadata",
    "start": "1161919",
    "end": "1167840"
  },
  {
    "text": "and events reconciling them later with the corresponding event the piece of code responsible to",
    "start": "1167840",
    "end": "1175120"
  },
  {
    "text": "effectively grab the cisco events since again into libscott it's the scope next method that reads",
    "start": "1175120",
    "end": "1182240"
  },
  {
    "text": "the actual events collected into the bpf maps we mentioned before once this",
    "start": "1182240",
    "end": "1187840"
  },
  {
    "text": "process is completed we do have the input event at the user space level and we instruct",
    "start": "1187840",
    "end": "1193039"
  },
  {
    "text": "the falco engine to check it against the currently loaded falco rule set",
    "start": "1193039",
    "end": "1198480"
  },
  {
    "text": "if a match with a rule is found the event gets immediately passed to the falco outputs which will",
    "start": "1198480",
    "end": "1205360"
  },
  {
    "text": "handle it by calling the andal jrpc function in this case this function reshape the information",
    "start": "1205360",
    "end": "1211280"
  },
  {
    "text": "contained in the event to create an output alert and push this final object to a queue",
    "start": "1211280",
    "end": "1216880"
  },
  {
    "text": "from which the actual rpc implementation will pop let's now peek",
    "start": "1216880",
    "end": "1222240"
  },
  {
    "text": "into the design of a jrpc server and one or more rpc methods to",
    "start": "1222240",
    "end": "1227600"
  },
  {
    "text": "serve those alerts jrpc is an rpc framework originally developed by google",
    "start": "1227600",
    "end": "1232960"
  },
  {
    "text": "where it was called stubby then it was open sourced under the cncf umbrella and evolved a lot since then",
    "start": "1232960",
    "end": "1240000"
  },
  {
    "text": "for sure it's one of the more high performance standards based general purpose and feature reach",
    "start": "1240000",
    "end": "1245679"
  },
  {
    "text": "rpc frameworks out there it's built on top of http 2 which is a binary protocol that",
    "start": "1245679",
    "end": "1252080"
  },
  {
    "text": "implements the same semantics of http protocol making more efficient use of network resources",
    "start": "1252080",
    "end": "1259200"
  },
  {
    "text": "it also provides some nice capabilities like stream multiplexing within a single connection",
    "start": "1259200",
    "end": "1265280"
  },
  {
    "text": "flow control and leader compression usually your apc implementation",
    "start": "1265280",
    "end": "1270480"
  },
  {
    "text": "use some generated code obtained from serialization formats that define the services you want to",
    "start": "1270480",
    "end": "1276480"
  },
  {
    "text": "implement in terms of rpc calls their type and their messages very often but not always this format is",
    "start": "1276480",
    "end": "1284320"
  },
  {
    "text": "protobuf such generated code looks into the core apis directly",
    "start": "1284320",
    "end": "1291520"
  },
  {
    "text": "which is the api implementing the main features of the jrpc on top of a lower level api like system",
    "start": "1291520",
    "end": "1297760"
  },
  {
    "text": "calls and transport protocols depending on the programming languages we use jrpc has",
    "start": "1297760",
    "end": "1303600"
  },
  {
    "text": "like different stacks since falco is mainly written in c plus plus we are going to",
    "start": "1303600",
    "end": "1309440"
  },
  {
    "text": "look only at the jpc stack as depicted on the right part of this slide",
    "start": "1309440",
    "end": "1315120"
  },
  {
    "text": "at the bottom we do have tcps transport going up we have ch2 which is a custom",
    "start": "1315120",
    "end": "1322000"
  },
  {
    "text": "http 2 basin transport implementation that uses 0pc data structures",
    "start": "1322000",
    "end": "1328080"
  },
  {
    "text": "and it's easily optimized for it but you can also bring your room such as",
    "start": "1328080",
    "end": "1333120"
  },
  {
    "text": "chronet the chrome networking library above we have the jpc core where the main",
    "start": "1333120",
    "end": "1339200"
  },
  {
    "text": "functionalities are implemented as said and where a thin c api is",
    "start": "1339200",
    "end": "1346320"
  },
  {
    "text": "this thin c api is meant to support rapid languages implementations like the",
    "start": "1346320",
    "end": "1351760"
  },
  {
    "text": "c plus plus one to go synchronous or to go asynchronous that's the question",
    "start": "1351760",
    "end": "1357520"
  },
  {
    "text": "the jrpc programming api comes in both synchronous and asynchronous flavors these two",
    "start": "1357520",
    "end": "1363919"
  },
  {
    "text": "closely correlate to the threading model in play the asynchronous model gives the",
    "start": "1363919",
    "end": "1369440"
  },
  {
    "text": "application code full control over the trading model the synchros model can",
    "start": "1369440",
    "end": "1374559"
  },
  {
    "text": "surely handle multiple recourses in parallel but they are serviced from a zero pc thread pool so in the synchronous model",
    "start": "1374559",
    "end": "1382640"
  },
  {
    "text": "the implementer only has to care about handling the actual rpc called implementation making it an",
    "start": "1382640",
    "end": "1389280"
  },
  {
    "text": "easier model to work with but if you want finer control over the trading aspect of the",
    "start": "1389280",
    "end": "1395360"
  },
  {
    "text": "rpcs then the aciculus api is the better model even though it's",
    "start": "1395360",
    "end": "1400799"
  },
  {
    "text": "considerably more difficult to work with honestly in this model the application",
    "start": "1400799",
    "end": "1406640"
  },
  {
    "text": "tells the grpc core that it wants to handle an rfpc and provide it a tag that acts as a key for the",
    "start": "1406640",
    "end": "1413600"
  },
  {
    "text": "completion of events then it blocks on a completion queue waiting for a completion key to",
    "start": "1413600",
    "end": "1419840"
  },
  {
    "text": "become available once the key is available the application code executes the associated",
    "start": "1419840",
    "end": "1425120"
  },
  {
    "text": "pc this model provides the best performances to who is willing to go the extra mile",
    "start": "1425120",
    "end": "1430720"
  },
  {
    "text": "the cost to pay is that such api needs considerably glucose to be written and we will see in",
    "start": "1430720",
    "end": "1437279"
  },
  {
    "text": "a bit and a good amount of patience to deal with implicit behaviors that",
    "start": "1437279",
    "end": "1442559"
  },
  {
    "text": "dogs do not cool out very well honestly but in the end it allows us to bring our",
    "start": "1442559",
    "end": "1449039"
  },
  {
    "text": "trading model and to overcome scaling limitations since no one knows when some falco rules",
    "start": "1449039",
    "end": "1454880"
  },
  {
    "text": "violation happens i needed a way to let people start a lpc and then it just sit there waiting for",
    "start": "1454880",
    "end": "1461760"
  },
  {
    "text": "some violation to happen so to notify the clients watching i want people able to say hey falco i am",
    "start": "1461760",
    "end": "1467840"
  },
  {
    "text": "interested in violations about this topic and falco will tell them the violations regarding the topic if any",
    "start": "1467840",
    "end": "1474960"
  },
  {
    "text": "and then if other violations occur it will go ahead immediately send them to the people",
    "start": "1474960",
    "end": "1480159"
  },
  {
    "text": "still watching this way clients would need to wait and start new rpc calls",
    "start": "1480159",
    "end": "1485600"
  },
  {
    "text": "randomly while this mechanism serves well the just described use cases it",
    "start": "1485600",
    "end": "1491679"
  },
  {
    "text": "also reduces the latency it reduces the pair alert setup cost and it gives us some sort of puppy lining of",
    "start": "1491679",
    "end": "1499039"
  },
  {
    "text": "falco alerts this is what it's usually called long-lived streaming",
    "start": "1499039",
    "end": "1504720"
  },
  {
    "text": "api long-lead rpcr calls lasting minutes hours or even days in some cases",
    "start": "1504720",
    "end": "1512559"
  },
  {
    "text": "as you can see in slide i use this jrpc bi-directional api to define and then",
    "start": "1512559",
    "end": "1517600"
  },
  {
    "text": "implement it anyways long leave the rpc do not come for free there are a lot of complexity involved",
    "start": "1517600",
    "end": "1524880"
  },
  {
    "text": "buffing the implementation of such apis and into their own nature for example",
    "start": "1524880",
    "end": "1530480"
  },
  {
    "text": "the jrpc flow control may have large buffer retry strategies at the framework level",
    "start": "1530480",
    "end": "1536080"
  },
  {
    "text": "stop aiming much sense in this case which means we need to implement our own at the application",
    "start": "1536080",
    "end": "1542000"
  },
  {
    "text": "level furthermore we also know that this type of service fails when there are tcp disconnects",
    "start": "1542000",
    "end": "1549039"
  },
  {
    "text": "and also it takes time to detect such network failures we also know it creates issues with load",
    "start": "1549039",
    "end": "1554960"
  },
  {
    "text": "balancers the alternative is that a falco client does",
    "start": "1554960",
    "end": "1560720"
  },
  {
    "text": "a repc call and asks if violations already happen to the falco jrpg server in case they",
    "start": "1560720",
    "end": "1567520"
  },
  {
    "text": "happen the client receives all of them otherwise it comes back to sleep and it will try again later",
    "start": "1567520",
    "end": "1573520"
  },
  {
    "text": "issuing a new rpc of the same type since having long lead rpc as the only",
    "start": "1573520",
    "end": "1579360"
  },
  {
    "text": "approach would not be sufficient to fit all the use cases i ended up providing also this approach",
    "start": "1579360",
    "end": "1586000"
  },
  {
    "text": "by implementing a server streaming pc the client does a single request to the server",
    "start": "1586000",
    "end": "1592080"
  },
  {
    "text": "falco which can stream back as many alerts he needs to send and then if it does not have any other",
    "start": "1592080",
    "end": "1599200"
  },
  {
    "text": "alerts left to send it completes the rpc it's like emptying a few of falco alerts",
    "start": "1599200",
    "end": "1606880"
  },
  {
    "text": "at once so just to recap the falco jpg server implements",
    "start": "1606880",
    "end": "1613440"
  },
  {
    "text": "the bi-directional and the server streaming rfpc for outputs this way we can eventually start more",
    "start": "1613440",
    "end": "1620799"
  },
  {
    "text": "rpc calls without blocking its current thread honestly as you can imagine this process",
    "start": "1620799",
    "end": "1626960"
  },
  {
    "text": "was not easy at all and it's far to be yet completed but after writing ebpf code nothing can",
    "start": "1626960",
    "end": "1633760"
  },
  {
    "text": "scare us right improving the performances and the behavioral falco jrpg server was",
    "start": "1633760",
    "end": "1639919"
  },
  {
    "text": "essential so during the development i needed to use various tools to profile it like g",
    "start": "1639919",
    "end": "1645279"
  },
  {
    "text": "proof and pproof trying to maximize the time spent on cisco",
    "start": "1645279",
    "end": "1650880"
  },
  {
    "text": "since more cisco's time means better overall application performances",
    "start": "1650880",
    "end": "1656080"
  },
  {
    "text": "you can see a bit of this process in place in pull request 1241 if you are interested in learning",
    "start": "1656080",
    "end": "1662159"
  },
  {
    "text": "more i can say that in general what matters when implementing such jrpc apis in c",
    "start": "1662159",
    "end": "1667760"
  },
  {
    "text": "plus plus is to use the synchronous api tune the trading model while also reducing the contention",
    "start": "1667760",
    "end": "1674640"
  },
  {
    "text": "using tools like valgrind or mutrus by making different hypotheses and measuring the outcomes",
    "start": "1674640",
    "end": "1680240"
  },
  {
    "text": "for example i found that having a number of threads equal to the number of online cpus works pretty well for falco",
    "start": "1680240",
    "end": "1688320"
  },
  {
    "text": "you should also tune the number of completion cues having the completion cue per tread is",
    "start": "1688320",
    "end": "1694240"
  },
  {
    "text": "known to be the best performance tradeoff in common asynchronous use cases",
    "start": "1694240",
    "end": "1700240"
  },
  {
    "text": "also you should try to reduce the allocations and try to reduce copies anyways as said i consider the current",
    "start": "1700240",
    "end": "1707039"
  },
  {
    "text": "falco's europc apis far to be dfinity for sure there are still a lot of areas where performances",
    "start": "1707039",
    "end": "1713520"
  },
  {
    "text": "can improve but also from an architectural point of view there are still existential questions to",
    "start": "1713520",
    "end": "1719679"
  },
  {
    "text": "be asked for for example does it make any sense to design the output cpi as a",
    "start": "1719679",
    "end": "1724880"
  },
  {
    "text": "unity call rather than a long live bi-directional stream one this alternative api will return a",
    "start": "1724880",
    "end": "1731279"
  },
  {
    "text": "response containing the current list of folk rule violations which use case",
    "start": "1731279",
    "end": "1736880"
  },
  {
    "text": "not already covered up with itself will it be more efficient for sure it will be simpler to write and",
    "start": "1736880",
    "end": "1743600"
  },
  {
    "text": "maintain but out to the side we need to wait whether the added complexity for streaming long lead rpcs",
    "start": "1743600",
    "end": "1750480"
  },
  {
    "text": "provides a large enough benefit or not any which scenarios sending a message on a stream is indeed",
    "start": "1750480",
    "end": "1757679"
  },
  {
    "text": "faster than a new unity air pc every time but the improvement is fixed and has a",
    "start": "1757679",
    "end": "1763840"
  },
  {
    "text": "higher complexity so this is not a done deal yet as said in the previous slide the only real way",
    "start": "1763840",
    "end": "1771200"
  },
  {
    "text": "to find answers is to write a code and measure it so i invite anyone willing to take this",
    "start": "1771200",
    "end": "1778480"
  },
  {
    "text": "task to join our community code and discuss this with us let's now jump into some diagrams to",
    "start": "1778480",
    "end": "1785679"
  },
  {
    "text": "describe the current falco jrpc flow in more detail we are at the point that falco can now",
    "start": "1785679",
    "end": "1791600"
  },
  {
    "text": "read the configuration file and initialize the jpc server by providing it",
    "start": "1791600",
    "end": "1796799"
  },
  {
    "text": "config values like the server paths and the address to bind",
    "start": "1796799",
    "end": "1801919"
  },
  {
    "text": "it also automatically guesses the number of online cores and uses this number as its treadiness",
    "start": "1801919",
    "end": "1808880"
  },
  {
    "text": "value at this point falco is ready to spawn a new thread responsible for running the entire jrpg server",
    "start": "1808880",
    "end": "1816080"
  },
  {
    "text": "which main operation is to set up its own trading model as said finally the server also ensures to stay",
    "start": "1816080",
    "end": "1822880"
  },
  {
    "text": "awake until it's running or to stop itself otherwise when the grpc server is sold to start",
    "start": "1822880",
    "end": "1828720"
  },
  {
    "text": "the first thing it does is to register the asynchronous services automatically generated from the protobuf definitions",
    "start": "1828720",
    "end": "1836000"
  },
  {
    "text": "and get told of the completion cues once this is done we can ask the jrpc call to build and",
    "start": "1836000",
    "end": "1841520"
  },
  {
    "text": "start the jpg server soon after the falco jrpc server spawns one thread dedicated to surveying and",
    "start": "1841520",
    "end": "1848799"
  },
  {
    "text": "processing the requests for every online cpu and while doing so it also locates",
    "start": "1848799",
    "end": "1854880"
  },
  {
    "text": "10 different contexts of three different types bi-directional streaming and unary",
    "start": "1854880",
    "end": "1860399"
  },
  {
    "text": "for each trade think of them as sessions these contexts contain references to the",
    "start": "1860399",
    "end": "1866559"
  },
  {
    "text": "actual service implementation to call processbank and to the generated asynchronous",
    "start": "1866559",
    "end": "1873120"
  },
  {
    "text": "service method to start serving the session request bank they have three main functionalities start session",
    "start": "1873120",
    "end": "1881360"
  },
  {
    "text": "that we do as we allocate them right now process it when recourses are coming",
    "start": "1881360",
    "end": "1888880"
  },
  {
    "text": "and eventually complete the associated rpc or keep it going contacts is also keep track of the state",
    "start": "1888880",
    "end": "1895679"
  },
  {
    "text": "of the rivers whether it is in the initial state in the writing one",
    "start": "1895679",
    "end": "1900880"
  },
  {
    "text": "or in the finished state when a new jrpc event series available from the",
    "start": "1900880",
    "end": "1905919"
  },
  {
    "text": "completion queue every thread process function running in its thread as said",
    "start": "1905919",
    "end": "1912080"
  },
  {
    "text": "decides depending on the contact state whether to ask it to complete and end the rpc or to process the",
    "start": "1912080",
    "end": "1919600"
  },
  {
    "text": "current event we use the address of the context as the tag uniquely identifying the current",
    "start": "1919600",
    "end": "1925600"
  },
  {
    "text": "jrpc event available from the completion queue when it's time to process the event the request",
    "start": "1925600",
    "end": "1931519"
  },
  {
    "text": "contacts dispatch the current concrete implementation of the rpc call using the reference",
    "start": "1931519",
    "end": "1936640"
  },
  {
    "text": "contained into the process func in the shown case it calls the submethod that is",
    "start": "1936640",
    "end": "1942799"
  },
  {
    "text": "responsible to pop the last falco alert if any from the falco outputs queue",
    "start": "1942799",
    "end": "1948960"
  },
  {
    "text": "we mentioned before and write it into the response stream in case there are more file colors to",
    "start": "1948960",
    "end": "1955440"
  },
  {
    "text": "pop and to stream it continues to write them into the response stream",
    "start": "1955440",
    "end": "1960960"
  },
  {
    "text": "this operation generates another jrpc event and causes the completion queue to trigger",
    "start": "1960960",
    "end": "1966480"
  },
  {
    "text": "again and restart the work process in case there are no more falco alerts left to send",
    "start": "1966480",
    "end": "1972320"
  },
  {
    "text": "this process notifies the jrpc core to be able to read requests again",
    "start": "1972320",
    "end": "1977600"
  },
  {
    "text": "also this operation triggers the completion queue mechanism again and so this bidirectional streaming api",
    "start": "1977600",
    "end": "1983679"
  },
  {
    "text": "keeps going we have an official go client that uses a timeout mechanism for a tries",
    "start": "1983679",
    "end": "1990640"
  },
  {
    "text": "to avoid spamming the falco jrpg at application level for sure there are smarter approaches to",
    "start": "1990640",
    "end": "1997039"
  },
  {
    "text": "implement and this is one of those improvements arya i was mentioning before",
    "start": "1997039",
    "end": "2003679"
  },
  {
    "text": "we also have an official python client and the rest one for the grpc file kpis",
    "start": "2003679",
    "end": "2008960"
  },
  {
    "text": "both need some serious love so regardless you're interested in contributing and improving the c plus",
    "start": "2008960",
    "end": "2015440"
  },
  {
    "text": "plus farco jr pc server and methods or to the clients please",
    "start": "2015440",
    "end": "2020960"
  },
  {
    "text": "join our community and help us also in case you need direction or support",
    "start": "2020960",
    "end": "2026559"
  },
  {
    "text": "feel free to drop me a line over twitter always glad to help so thanks everyone",
    "start": "2026559",
    "end": "2032880"
  },
  {
    "text": "for staying here for so long my direct messages are open you can find me with ludio nickname on twitter or",
    "start": "2032880",
    "end": "2039519"
  },
  {
    "text": "github feel free to follow me get in touch for even more details in case you don't",
    "start": "2039519",
    "end": "2045440"
  },
  {
    "text": "have had enough ciao",
    "start": "2045440",
    "end": "2050158"
  }
]