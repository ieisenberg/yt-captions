[
  {
    "text": "[Applause] thank you thank you very much i'm really glad to be here uh this is actually my first kubecon",
    "start": "0",
    "end": "6480"
  },
  {
    "text": "done a little bit of workshop support in ancillary events in past but this is the first time actually attending a kubecon",
    "start": "6480",
    "end": "12719"
  },
  {
    "text": "and i'm super excited so i'm not going to talk for five minutes about myself um just so you know",
    "start": "12719",
    "end": "18800"
  },
  {
    "text": "where i'm coming from software engineer got into architecture after that and",
    "start": "18800",
    "end": "23840"
  },
  {
    "text": "then um i've been worked in defense and in hospitality and for some reason i always try to get myself on whatever the",
    "start": "23840",
    "end": "31519"
  },
  {
    "text": "project is that the company is betting the business on so that's where i seem to end up",
    "start": "31519",
    "end": "36880"
  },
  {
    "text": "that has led me into some interesting spaces a lot of distributed systems",
    "start": "36880",
    "end": "42800"
  },
  {
    "text": "so that got me into apache cassandra and kubernetes and then now putting them",
    "start": "42800",
    "end": "47840"
  },
  {
    "text": "together so that's kind of the genesis of how i got involved in this kind of thing um",
    "start": "47840",
    "end": "53600"
  },
  {
    "text": "so on the way over here i was grabbing a snack and i went outside",
    "start": "53600",
    "end": "59440"
  },
  {
    "text": "to the coffee station and i'm walking past a table and i don't i don't recognize anybody",
    "start": "59440",
    "end": "65280"
  },
  {
    "text": "here so maybe i'll be okay uh so i'm walking past the table and there's a group of folks and they're like hey did",
    "start": "65280",
    "end": "71760"
  },
  {
    "text": "you see that um data stacks is going to be doing a talk about how to put a database in in kubernetes and one and",
    "start": "71760",
    "end": "78000"
  },
  {
    "text": "one guy goes why would you do that that's what oh",
    "start": "78000",
    "end": "83119"
  },
  {
    "text": "there is still skepticism out here around this now you know i'm in a world where um i'm used to this and i've",
    "start": "83119",
    "end": "90400"
  },
  {
    "text": "already bought into it this is an article that i'm showing up here that a colleague of mine chris",
    "start": "90400",
    "end": "95600"
  },
  {
    "text": "bradford wrote about his personal journey from being very anti you know running",
    "start": "95600",
    "end": "102960"
  },
  {
    "text": "databases and containers just even that idea to how he kind of went through that progression of running",
    "start": "102960",
    "end": "109280"
  },
  {
    "text": "databases on kubernetes so what i thought i would do is this is not the why you should run a database in",
    "start": "109280",
    "end": "116880"
  },
  {
    "text": "kubernetes talk it's more of the assuming that you agree with the premise",
    "start": "116880",
    "end": "123040"
  },
  {
    "text": "of doing it how do we actually go about doing it that's kind of where i'm coming from if you want to ask me questions about why",
    "start": "123040",
    "end": "129599"
  },
  {
    "text": "at the end let's do it there's a whole community of people that are working on putting stateful",
    "start": "129599",
    "end": "136000"
  },
  {
    "text": "workloads on to kubernetes it's the data on kubernetes community we had a great",
    "start": "136000",
    "end": "143520"
  },
  {
    "text": "full day of sessions here on tuesday you can go and watch a lot of those sessions",
    "start": "143520",
    "end": "149040"
  },
  {
    "text": "online i may even stole a couple of my points that you'll see later in the talk from",
    "start": "149040",
    "end": "154720"
  },
  {
    "text": "things i heard on tuesday so i'm an active and avid learner in this space as well there's a whole community of",
    "start": "154720",
    "end": "160640"
  },
  {
    "text": "innovators doing great things here one of the things that",
    "start": "160640",
    "end": "165920"
  },
  {
    "text": "i learned recently is a survey that the dok community commissioned i'm talking",
    "start": "165920",
    "end": "171519"
  },
  {
    "text": "to a lot of developers architects cios you know kind of all range of the the",
    "start": "171519",
    "end": "176720"
  },
  {
    "text": "i.t workforce looking at who is adopting kubernetes for stateful workloads and",
    "start": "176720",
    "end": "185040"
  },
  {
    "text": "it's kind of encouraging and a little bit surprising these numbers that that were",
    "start": "185040",
    "end": "191200"
  },
  {
    "text": "that were able to come through now who knows is there confirmation bias from people who are willing to fill out a survey about data on kubernetes yeah it",
    "start": "191200",
    "end": "197760"
  },
  {
    "text": "may be okay but look at this okay so 70 percent of uh people have at least some",
    "start": "197760",
    "end": "204239"
  },
  {
    "text": "that are using kubernetes have at least some stateful workflows there 90 percent think that kubernetes is ready for it",
    "start": "204239",
    "end": "211680"
  },
  {
    "text": "which to me says you're at least thinking about doing it so how do we get there",
    "start": "211680",
    "end": "218480"
  },
  {
    "text": "uh i want to be clear and you know set expectations and you probably saw this when you were looking for sessions this",
    "start": "218480",
    "end": "224000"
  },
  {
    "text": "is an introductory level session so i'm hitting the wave caps and what i",
    "start": "224000",
    "end": "229519"
  },
  {
    "text": "want to present to you is a way of thinking about how you put databases and possibly other stateful workloads",
    "start": "229519",
    "end": "236959"
  },
  {
    "text": "onto kubernetes so i've tried to break it down into a few simple steps",
    "start": "236959",
    "end": "242640"
  },
  {
    "text": "and it starts with making sure that you understand the kubernetes primitives uh for stateful",
    "start": "242640",
    "end": "248400"
  },
  {
    "text": "data including the persistent volume subsystem you want to pick a storage provider because",
    "start": "248400",
    "end": "255360"
  },
  {
    "text": "ultimately your data needs to end up somewhere unless you're just doing caching you need to pick a database and then i'm",
    "start": "255360",
    "end": "261600"
  },
  {
    "text": "going to highly recommend that you find an operator assuming that you're using a pretty common or popular database so",
    "start": "261600",
    "end": "268639"
  },
  {
    "text": "those are the steps uh what we'll begin with is making sure that we understand these kubernetes",
    "start": "268639",
    "end": "274800"
  },
  {
    "text": "primitives and especially the ones for managing state for stateful workloads but",
    "start": "274800",
    "end": "280560"
  },
  {
    "text": "actually we're going to look at some some of the other primitives as well that are not exclusively for managing state they're all involved in putting a",
    "start": "280560",
    "end": "286880"
  },
  {
    "text": "database on kubernetes so here we go uh",
    "start": "286880",
    "end": "292240"
  },
  {
    "text": "i want to start with uh demystifying something now when i was a junior developer",
    "start": "292240",
    "end": "298479"
  },
  {
    "text": "i was afraid of databases okay database was like there was one guy",
    "start": "298479",
    "end": "303840"
  },
  {
    "text": "on the team that knew how to interact with the database to be the dba create the tables",
    "start": "303840",
    "end": "308960"
  },
  {
    "text": "and manage all of that you wanted anything you went to the guy and this was a bad thing because",
    "start": "308960",
    "end": "315759"
  },
  {
    "text": "mitch got stuck there for a while like he got pigeonholed and he was the only he wanted to go and do other things but",
    "start": "315759",
    "end": "321199"
  },
  {
    "text": "he was the database guy he was the only one that knew how to do it so let's demystify a database is an",
    "start": "321199",
    "end": "327520"
  },
  {
    "text": "application in applications when we deploy them in kubernetes or anywhere else",
    "start": "327520",
    "end": "334639"
  },
  {
    "text": "they're really an assemblage of compute network and storage those are their needs right it's code it needs somewhere",
    "start": "334639",
    "end": "341440"
  },
  {
    "text": "to run it knows how to talk to other things and it's got to have some place to put its data that fits a database just as well as",
    "start": "341440",
    "end": "348560"
  },
  {
    "text": "any other application okay so let's look at what kubernetes gives us and break it",
    "start": "348560",
    "end": "355199"
  },
  {
    "text": "down organize the community kubernetes primitives in terms of compute network and storage okay",
    "start": "355199",
    "end": "361360"
  },
  {
    "text": "so we have these primitives uh for running pods on worker nodes we have",
    "start": "361360",
    "end": "368639"
  },
  {
    "text": "replica sets and deployments that we can use to run multiple copies of things uh we have now stateful sets that",
    "start": "368639",
    "end": "375759"
  },
  {
    "text": "kubernetes gives us to run stateful workloads for exposing our capabilities as",
    "start": "375759",
    "end": "382240"
  },
  {
    "text": "services we have a kubernetes service we have things like kubernetes ingress so these",
    "start": "382240",
    "end": "388400"
  },
  {
    "text": "are primitives that kubernetes gives us for allowing things to find each other and talk to each other",
    "start": "388400",
    "end": "394319"
  },
  {
    "text": "and then in terms of storage we have a whole persistent volume subsystem that",
    "start": "394319",
    "end": "399680"
  },
  {
    "text": "you know we're definitely going to focus on those but in order to deploy a database we just need to pick the right",
    "start": "399680",
    "end": "405120"
  },
  {
    "text": "pieces from kind of this grab bag of resources that kubernetes gives us",
    "start": "405120",
    "end": "410560"
  },
  {
    "text": "i'm going to show you some code here there's going to be some yaml there will be yaml in this presentation",
    "start": "410560",
    "end": "416479"
  },
  {
    "text": "this is all available on github we have a repo that patrick mcfadden and i have created",
    "start": "416479",
    "end": "422960"
  },
  {
    "text": "for a book that we're working on that yes i'll plug at the end of course you know i will but that's where the material is being",
    "start": "422960",
    "end": "429120"
  },
  {
    "text": "drawn from and most of the images that you're going to see are also drawn from the book as well",
    "start": "429120",
    "end": "436160"
  },
  {
    "text": "okay so i want to talk about the persistent volume subsystem portion of kubernetes",
    "start": "436160",
    "end": "442479"
  },
  {
    "text": "so our pods can mount volumes uh and then the volumes can be of",
    "start": "442479",
    "end": "447759"
  },
  {
    "text": "various types now in production systems what we see most commonly is the use of",
    "start": "447759",
    "end": "453440"
  },
  {
    "text": "persistent volume claims so that's a a pvc mount is the most most common type",
    "start": "453440",
    "end": "459280"
  },
  {
    "text": "of volume that we see mounted for an application that's doing something that's stateful",
    "start": "459280",
    "end": "465280"
  },
  {
    "text": "okay so the way this breaks down is uh i create my pod i uh create a persistent volume claim",
    "start": "465280",
    "end": "472240"
  },
  {
    "text": "that's gonna uh basically represent a request for storage that my pod has",
    "start": "472240",
    "end": "477680"
  },
  {
    "text": "and then the um kubernetes is going to leverage a storage class which is managed managing",
    "start": "477680",
    "end": "484400"
  },
  {
    "text": "a section of storage in order to create persistent volumes and then when we create",
    "start": "484400",
    "end": "490240"
  },
  {
    "text": "uh pods and replicas sets and stateful sets then that's when the process of",
    "start": "490240",
    "end": "496800"
  },
  {
    "text": "creating those persistent volumes and associating with them with persist volume claims",
    "start": "496800",
    "end": "501840"
  },
  {
    "text": "happens generally what we see is administrators being involved with configuring the storage",
    "start": "501840",
    "end": "508800"
  },
  {
    "text": "classes and developers are more concerned on that consumption side with creating",
    "start": "508800",
    "end": "514719"
  },
  {
    "text": "persistent volume claims so we'll talk through this is kind of a big picture of you and we'll talk through some more of",
    "start": "514719",
    "end": "519760"
  },
  {
    "text": "the details so a persistent volume is the kubernetes",
    "start": "519760",
    "end": "525040"
  },
  {
    "text": "way of getting access to storage that outlives the lifecycle of a pod and there are different types of",
    "start": "525040",
    "end": "531120"
  },
  {
    "text": "persistent volumes so we have local persistent volumes and those are going",
    "start": "531120",
    "end": "536240"
  },
  {
    "text": "to leverage storage that lives on your kubernetes worker nodes",
    "start": "536240",
    "end": "541600"
  },
  {
    "text": "other persistent volumes types provide access to storage that is",
    "start": "541839",
    "end": "546959"
  },
  {
    "text": "maybe outside the cluster network storage maybe it's provided by your preferred cloud that you're running on",
    "start": "546959",
    "end": "553279"
  },
  {
    "text": "um there are also third-party services maybe you are running in an on-prem situation and you actually have storage",
    "start": "553279",
    "end": "559440"
  },
  {
    "text": "arrays that you're trying to allocate storage from so all of these are legit",
    "start": "559440",
    "end": "565200"
  },
  {
    "text": "types of persistent volumes that you can use to provide storage to your application and we'll talk a little bit",
    "start": "565200",
    "end": "570320"
  },
  {
    "text": "more about selecting a storage provider in a bit so this is an example of a persistent",
    "start": "570320",
    "end": "576800"
  },
  {
    "text": "volume declaration it references a volume size it",
    "start": "576800",
    "end": "581839"
  },
  {
    "text": "references allowed access modes so you can have read only read write you can",
    "start": "581839",
    "end": "587440"
  },
  {
    "text": "have volumes that can only be written by a single writer at a time these kinds of",
    "start": "587440",
    "end": "593600"
  },
  {
    "text": "parameters now this particular definition is an example of a local volume that is mapped",
    "start": "593600",
    "end": "599360"
  },
  {
    "text": "to a specific kubernetes worker node using node affinity and again this is something that would",
    "start": "599360",
    "end": "605519"
  },
  {
    "text": "typically be configured by someone who's responsible for for the administration of your",
    "start": "605519",
    "end": "611040"
  },
  {
    "text": "kubernetes cluster so more on the op side than the app dev",
    "start": "611040",
    "end": "616839"
  },
  {
    "text": "site once a persistent volume has been made available for application use",
    "start": "616839",
    "end": "622399"
  },
  {
    "text": "either manually or they can be dynamically created by storage classes as we'll see",
    "start": "622399",
    "end": "627440"
  },
  {
    "text": "we can reference the persistent volume in our pod specifications through creating a persistent volume",
    "start": "627440",
    "end": "633519"
  },
  {
    "text": "claim and this provides a really good separation of concerns this allows us to",
    "start": "633519",
    "end": "639200"
  },
  {
    "text": "as an app developer just ask for the storage that we need and the characteristics that it should have",
    "start": "639200",
    "end": "644480"
  },
  {
    "text": "without having to have the knowledge about the specific provider that's in use this also makes our applications",
    "start": "644480",
    "end": "650959"
  },
  {
    "text": "more easily portable so that they can run in a different environment as long as we the persistent volume claim can be",
    "start": "650959",
    "end": "657440"
  },
  {
    "text": "satisfied by some persistent volume that's available in the target environment then we should be good to go",
    "start": "657440",
    "end": "665519"
  },
  {
    "text": "there's also a second layer of separation so a persistent volume claim is actually",
    "start": "667440",
    "end": "673120"
  },
  {
    "text": "defined externally to the pod that references it so persistent volume claim",
    "start": "673120",
    "end": "678240"
  },
  {
    "text": "just represents kind of in the abstract a request for storage so on the left side we see the",
    "start": "678240",
    "end": "684560"
  },
  {
    "text": "definition of a pvc it includes a desired amount of storage and access mode um",
    "start": "684560",
    "end": "690720"
  },
  {
    "text": "as similar to what we saw before with persistent volumes it can optionally specify a desired",
    "start": "690720",
    "end": "697120"
  },
  {
    "text": "storage class and that's in the case where you actually would like or are okay with your persistent volume claim",
    "start": "697120",
    "end": "703440"
  },
  {
    "text": "being satisfied dynamically by the storage provider provisioning more storage on your behalf",
    "start": "703440",
    "end": "710399"
  },
  {
    "text": "so on the right side you see a pod that has been defined to reference that",
    "start": "710399",
    "end": "715680"
  },
  {
    "text": "particular pvc so pods linked to pvcs which link to",
    "start": "715680",
    "end": "721120"
  },
  {
    "text": "persistent volumes which are created by storage classes all right so speaking of storage classes",
    "start": "721120",
    "end": "728560"
  },
  {
    "text": "this is where the idea of picking a provider comes into play so we understand the kubernetes primitives at",
    "start": "728560",
    "end": "735120"
  },
  {
    "text": "this point now we're ready to take what we've learned and assemble things to deploy applications",
    "start": "735120",
    "end": "743120"
  },
  {
    "text": "okay so uh storage class is responsible for the dynamic provisioning of storage on persistent volumes in order to help",
    "start": "743120",
    "end": "750480"
  },
  {
    "text": "satisfy our pvcs so the storage class handles the details of interfacing with our requested",
    "start": "750480",
    "end": "757600"
  },
  {
    "text": "provider or the provider that we've configured so that the requested amount of storage can be set",
    "start": "757600",
    "end": "763360"
  },
  {
    "text": "aside so there's actually a ton of different",
    "start": "763360",
    "end": "768800"
  },
  {
    "text": "storage providers i didn't i did like sort of like an",
    "start": "768800",
    "end": "773839"
  },
  {
    "text": "informal survey uh i didn't count on my fingers or anything but as i was going through the kind of",
    "start": "773839",
    "end": "779600"
  },
  {
    "text": "the solution showcase there are a lot of storage providers here at kubecon um",
    "start": "779600",
    "end": "784800"
  },
  {
    "text": "this is a rich area of you know competition and innovation uh and and so there's a lot of options",
    "start": "784800",
    "end": "790880"
  },
  {
    "text": "that are available and that's just even from third-party vendors i'm not even counting the the",
    "start": "790880",
    "end": "796240"
  },
  {
    "text": "what's available from uh our standard public cloud providers so",
    "start": "796240",
    "end": "801839"
  },
  {
    "text": "one of the things that's pretty cool is this little tool recently discovered new to me",
    "start": "801839",
    "end": "807920"
  },
  {
    "text": "at the bottom of the slide here the kubester which is a tool that's going to allow",
    "start": "807920",
    "end": "813360"
  },
  {
    "text": "you to see what storage classes are already available in your cluster and make sure that they are configured",
    "start": "813360",
    "end": "818959"
  },
  {
    "text": "correctly so that's a that's a pretty fun way to educate yourself the example that i'm showing here of",
    "start": "818959",
    "end": "825360"
  },
  {
    "text": "declaring a storage class is a really simple example of a free storage provider from you know",
    "start": "825360",
    "end": "831600"
  },
  {
    "text": "open source from rancho labs that basically just allows you to provision your your desktop or laptop computer as",
    "start": "831600",
    "end": "838639"
  },
  {
    "text": "a storage provider if you're just running kubernetes on your desktop kind of for you know local dev purposes so i",
    "start": "838639",
    "end": "844880"
  },
  {
    "text": "use this i use this one all the time if you want to peel back the covers a",
    "start": "844880",
    "end": "851279"
  },
  {
    "text": "little bit this is where i for a one second kind of stray into non-introductory material but i think",
    "start": "851279",
    "end": "857440"
  },
  {
    "text": "it's interesting so there is a specification called the container storage interface it's",
    "start": "857440",
    "end": "863040"
  },
  {
    "text": "actually not unique to kubernetes or tied to kubernetes you can use",
    "start": "863040",
    "end": "868160"
  },
  {
    "text": "csi compliant storage providers on other uh container orchestration platforms as",
    "start": "868160",
    "end": "874320"
  },
  {
    "text": "well but uh this provides a specification and basically an api for providing",
    "start": "874320",
    "end": "880399"
  },
  {
    "text": "cloud native storage and most of these cs csi providers um not",
    "start": "880399",
    "end": "886160"
  },
  {
    "text": "necessarily all but most of them actually uh implement their control plane on kubernetes so i think it's",
    "start": "886160",
    "end": "892959"
  },
  {
    "text": "really cool that you know you can have your storage actually managed on the kubernetes platform",
    "start": "892959",
    "end": "900000"
  },
  {
    "text": "uh and so anyway i love geeking out peeking under the covers for just a second",
    "start": "900000",
    "end": "905920"
  },
  {
    "text": "okay so now that we know about the primitives that we have and uh the the",
    "start": "905920",
    "end": "911600"
  },
  {
    "text": "storage providers that we have available to us so we pick a storage provider now we're gonna pick a database um and i'm",
    "start": "911600",
    "end": "918320"
  },
  {
    "text": "gonna give you two options here of different deployments for databases uh we're gonna",
    "start": "918320",
    "end": "923600"
  },
  {
    "text": "look at a single node deployment of my sql now i understand that multi-node",
    "start": "923600",
    "end": "929040"
  },
  {
    "text": "deployments of my sql are possible so don't get us up with me i know that there is the test which",
    "start": "929040",
    "end": "934240"
  },
  {
    "text": "helps you to do all that and there are other and other operators that help you do that for different",
    "start": "934240",
    "end": "940240"
  },
  {
    "text": "different types of relational databases i'm just going to do a sim simple one note example here and then we'll look at a cassandra",
    "start": "940240",
    "end": "946000"
  },
  {
    "text": "deployment that is a multi-node deployment maybe compare and contrast and look at",
    "start": "946000",
    "end": "951519"
  },
  {
    "text": "using some of the different application compute primitives that we introduced earlier namely replica sets and",
    "start": "951519",
    "end": "959279"
  },
  {
    "text": "deployments and staple sets okay so",
    "start": "959279",
    "end": "964639"
  },
  {
    "text": "here's a sample deployment of sequel and this is based on an example that you",
    "start": "964639",
    "end": "969920"
  },
  {
    "text": "can find in the kubernetes documentation um i've kind of forked it on our our",
    "start": "969920",
    "end": "975519"
  },
  {
    "text": "repo that i shared with you earlier that that data on kate kate's",
    "start": "975519",
    "end": "980959"
  },
  {
    "text": "book repo or github org and uh so very you know",
    "start": "980959",
    "end": "987360"
  },
  {
    "text": "relatively minor modifications to that standard kubernetes documentation example uh what this does is deploy wordpress a",
    "start": "987360",
    "end": "995440"
  },
  {
    "text": "single node of wordpress on top of a single node of mysql and one thing that's that's kind of",
    "start": "995440",
    "end": "1001519"
  },
  {
    "text": "interesting around this example is that it shows not only my sql creating a pvc and getting some storage",
    "start": "1001519",
    "end": "1008560"
  },
  {
    "text": "allocated to it but then also wordpress is using mysql and also on top of that",
    "start": "1008560",
    "end": "1014880"
  },
  {
    "text": "getting its own volume where it wants to store some configuration data so",
    "start": "1014880",
    "end": "1020079"
  },
  {
    "text": "it's a good demonstration of the idea that applications can use databases which use",
    "start": "1020079",
    "end": "1025678"
  },
  {
    "text": "persistent volumes and applications can also assign volume or acquire volumes directly themselves",
    "start": "1025679",
    "end": "1032959"
  },
  {
    "text": "so because we are only deploying a single node of mysql in this example",
    "start": "1033439",
    "end": "1038640"
  },
  {
    "text": "a kubernetes deployment is a good choice now a deployment is a compute construct that",
    "start": "1038640",
    "end": "1047520"
  },
  {
    "text": "is going to sit on top of replica sets so deployments manage the life cycle of",
    "start": "1047520",
    "end": "1052960"
  },
  {
    "text": "replica sets which in turn create pods according to a number of replicas that",
    "start": "1052960",
    "end": "1058080"
  },
  {
    "text": "we request so this is better than just running a",
    "start": "1058080",
    "end": "1063360"
  },
  {
    "text": "database in a bear pod by itself because when you create it as part of a deployment kubernetes is going to take",
    "start": "1063360",
    "end": "1069520"
  },
  {
    "text": "on responsibility for that life cycle for making sure that your desired number of replicas in this case one is running",
    "start": "1069520",
    "end": "1076640"
  },
  {
    "text": "so we're gonna this this might not be uh super high availability because we could",
    "start": "1076640",
    "end": "1082240"
  },
  {
    "text": "have some downtime if a pod dies and has to be recreated we're down from a database perspective during that restart",
    "start": "1082240",
    "end": "1088559"
  },
  {
    "text": "period but it is going to give us some measure of availability the other thing that's curious to note",
    "start": "1088559",
    "end": "1094640"
  },
  {
    "text": "here is you see on this slide that there's two replicas that are created by this replica set they're both pointing to the",
    "start": "1094640",
    "end": "1101039"
  },
  {
    "text": "same pvc so this is a characteristic of these replica sets is that there's only",
    "start": "1101039",
    "end": "1106559"
  },
  {
    "text": "one pvc that is defined in the replica set if you create multiple replicas",
    "start": "1106559",
    "end": "1111840"
  },
  {
    "text": "they're all pointing to that one pvc now this is a great config this is a great configuration if you have read only data",
    "start": "1111840",
    "end": "1118880"
  },
  {
    "text": "you could certainly get some efficiencies out of this but if you want to actually have",
    "start": "1118880",
    "end": "1124240"
  },
  {
    "text": "a mold situation with multiple nodes that you're writing to like cassandra which we'll see later this wouldn't be",
    "start": "1124240",
    "end": "1130160"
  },
  {
    "text": "an appropriate configuration for you and you would want to use something other than the deployments in",
    "start": "1130160",
    "end": "1135520"
  },
  {
    "text": "replica sets okay so to deploy our single my sql node",
    "start": "1135520",
    "end": "1141200"
  },
  {
    "text": "there's a couple of things that we need to create to start out the first thing is on the left there is",
    "start": "1141200",
    "end": "1146559"
  },
  {
    "text": "you see security credentials now one of the things i love about working with kubernetes is that things are secure by",
    "start": "1146559",
    "end": "1153039"
  },
  {
    "text": "default right you can't get out of port unless you expose it so",
    "start": "1153039",
    "end": "1158320"
  },
  {
    "text": "we want to apply these same principles when we're talking about databases so the mysql that we're deploying",
    "start": "1158320",
    "end": "1165120"
  },
  {
    "text": "uh has a administrator username and password we can actually control what that is by defining it in a secret which",
    "start": "1165120",
    "end": "1172000"
  },
  {
    "text": "we will then pass into uh you know leverage in the definition of",
    "start": "1172000",
    "end": "1177760"
  },
  {
    "text": "our deployment for mysql on the right side we see",
    "start": "1177760",
    "end": "1183200"
  },
  {
    "text": "the definition of the pvc that's going to be referenced by our replica set",
    "start": "1183200",
    "end": "1189440"
  },
  {
    "text": "okay so these are two ingredients that we create up front now we are ready to specify the yaml for our deployment for",
    "start": "1189440",
    "end": "1197280"
  },
  {
    "text": "mysql okay so again we're not creating an individual pod we're creating a",
    "start": "1197280",
    "end": "1202640"
  },
  {
    "text": "deployment that wraps it and so part of this definition is not the",
    "start": "1202640",
    "end": "1207760"
  },
  {
    "text": "actual pod but a template for a pod so every time the",
    "start": "1207760",
    "end": "1212880"
  },
  {
    "text": "deployment is going to create an additional pod it's going to use this template or kind of the recipe for creating that pod",
    "start": "1212880",
    "end": "1219440"
  },
  {
    "text": "and again you see in there the reference to the single pvc that we declared earlier",
    "start": "1219440",
    "end": "1225440"
  },
  {
    "text": "all right the next piece that we're going to talk about is how do you actually make a database",
    "start": "1226000",
    "end": "1231280"
  },
  {
    "text": "accessible to your applications again it would kind of be lame to address our",
    "start": "1231280",
    "end": "1236640"
  },
  {
    "text": "applications to a single pod instance a kind of a hard-coded instance or ip address because that pod",
    "start": "1236640",
    "end": "1243520"
  },
  {
    "text": "could die and get restarted so we want to stick a kubernetes service in front of that",
    "start": "1243520",
    "end": "1248799"
  },
  {
    "text": "and this is going to abstract the details of where that database instance is actually living on the network",
    "start": "1248799",
    "end": "1254880"
  },
  {
    "text": "so even if we're only running a single pod this is still useful",
    "start": "1254880",
    "end": "1259760"
  },
  {
    "text": "we have different types of services that are defined in the kubernetes world so you have a cluster ip service which is",
    "start": "1260480",
    "end": "1266880"
  },
  {
    "text": "only within the scope of that cluster you can use load balancers",
    "start": "1266880",
    "end": "1272320"
  },
  {
    "text": "and those are services typically you typically implementation of a load balancer is tied to your cloud provider",
    "start": "1272320",
    "end": "1278640"
  },
  {
    "text": "so incoming calls might be round robin to different instances behind that service you might find that useful",
    "start": "1278640",
    "end": "1284880"
  },
  {
    "text": "um we have other things like external ports we have ingress that can",
    "start": "1284880",
    "end": "1292159"
  },
  {
    "text": "be defined and what we see most often if we're talking about a database tier is",
    "start": "1292159",
    "end": "1297760"
  },
  {
    "text": "the use of a cluster ip service or maybe a load balancer that's that's what i",
    "start": "1297760",
    "end": "1302960"
  },
  {
    "text": "tend to see most often usually you have an application that's sitting on top of your database and the application is",
    "start": "1302960",
    "end": "1309200"
  },
  {
    "text": "what is providing an interface outside of kubernetes so not that you couldn't expose the database directly but i just don't see",
    "start": "1309200",
    "end": "1315679"
  },
  {
    "text": "that very often so this is an example of a simple",
    "start": "1315679",
    "end": "1321280"
  },
  {
    "text": "cluster ip service this is what is known as a headless service",
    "start": "1321280",
    "end": "1327360"
  },
  {
    "text": "so what this does is when you do the dns lookup based on this name of a wordpress mic sql service what",
    "start": "1327360",
    "end": "1335840"
  },
  {
    "text": "you would get back is the ip addresses of everything that's sitting underneath it and again in this case it's just a single ip address",
    "start": "1335840",
    "end": "1342320"
  },
  {
    "text": "so headless service is a great way to go to put in front of your database instance",
    "start": "1342320",
    "end": "1348880"
  },
  {
    "text": "all right so that was a quick fly through of a mysql deployment example again i want to refer",
    "start": "1349840",
    "end": "1355600"
  },
  {
    "text": "you to the github repo in the book if you want kind of the more blow by blow detailed",
    "start": "1355600",
    "end": "1361360"
  },
  {
    "text": "description we try to go through all the the various options kind of at a high level and then refer you to the the",
    "start": "1361360",
    "end": "1367840"
  },
  {
    "text": "points in the kubernetes documentation where you can deep dive and get the lower level details so just hitting the",
    "start": "1367840",
    "end": "1374159"
  },
  {
    "text": "wave caps for you right now we want to talk about deployment of cassandra now so the way that cassandra",
    "start": "1374159",
    "end": "1380720"
  },
  {
    "text": "works is it's a multi-node architecture no one",
    "start": "1380720",
    "end": "1385919"
  },
  {
    "text": "runs one node of cassandra in production not very many people run three nodes of",
    "start": "1385919",
    "end": "1391200"
  },
  {
    "text": "cassandra in production generally you have a lot of data if you're using cassandra and those are organized in",
    "start": "1391200",
    "end": "1397200"
  },
  {
    "text": "there's two different ways to think about how cassandra organizes itself and the data that it's storing so there's two viewpoints on",
    "start": "1397200",
    "end": "1403919"
  },
  {
    "text": "this slide they both refer to the same cluster one of them is a kind of a more physical layout in terms of where the",
    "start": "1403919",
    "end": "1409679"
  },
  {
    "text": "machines are located within your network so a lot of times you'll have multiple",
    "start": "1409679",
    "end": "1414880"
  },
  {
    "text": "data centers what can what cassandra calls a data center and multiple racks so in cloud",
    "start": "1414880",
    "end": "1421760"
  },
  {
    "text": "deployments most people map a cassandra data center to a cloud provider region",
    "start": "1421760",
    "end": "1427840"
  },
  {
    "text": "and they map a rack to a particular availability zone so that's what you'll see in the if you look at the code",
    "start": "1427840",
    "end": "1434240"
  },
  {
    "text": "details of the example uh so cassandra is aware of where you",
    "start": "1434240",
    "end": "1439520"
  },
  {
    "text": "are placing this nodes because you you tell it where the nodes are in terms of the network topology and then it's going",
    "start": "1439520",
    "end": "1445200"
  },
  {
    "text": "to try to store multiple copies of your data so that they are distributed across the different availability zones and",
    "start": "1445200",
    "end": "1451440"
  },
  {
    "text": "even regions if you have a multi-region cluster so those are kind of the two viewpoints of the world",
    "start": "1451440",
    "end": "1457279"
  },
  {
    "text": "cassandra uses something called partitioning which is similar to the concept of sharding but it's managed entirely by cassandra so you're never",
    "start": "1457279",
    "end": "1465200"
  },
  {
    "text": "interacting with what what that kind of starting our algorithm looks like when you're using cassandra",
    "start": "1465200",
    "end": "1471360"
  },
  {
    "text": "so i wanted to give you those details about the topology so that this slide would",
    "start": "1471360",
    "end": "1476640"
  },
  {
    "text": "make sense if you have some familiarity with stateful sets um the way that what's shown here is a",
    "start": "1476640",
    "end": "1483279"
  },
  {
    "text": "cassandra deployment that has three racks so one data center",
    "start": "1483279",
    "end": "1488880"
  },
  {
    "text": "consisting of three racks and there's a single pod that's shown here in each rack and so we have a stateful",
    "start": "1488880",
    "end": "1495600"
  },
  {
    "text": "set that is managing each of the racks",
    "start": "1495600",
    "end": "1501279"
  },
  {
    "text": "uh and then as you can see here there's a there's a key difference from the my sequel example",
    "start": "1501279",
    "end": "1506320"
  },
  {
    "text": "uh that we saw before in that each pod is actually getting its own persistent volume claim so this means each",
    "start": "1506320",
    "end": "1513120"
  },
  {
    "text": "cassandra node has its own dedicated storage um and and that's what we want",
    "start": "1513120",
    "end": "1520000"
  },
  {
    "text": "okay so we'll talk up front here uh about the idea of creating these uh",
    "start": "1520960",
    "end": "1526320"
  },
  {
    "text": "standards uh a service that is pretty much like the my the service that we put in front of my sql it's very very",
    "start": "1526320",
    "end": "1532000"
  },
  {
    "text": "similar and this time we're exposing the standard constant report of 9042",
    "start": "1532000",
    "end": "1538000"
  },
  {
    "text": "and i'm i'm showing it to you now because we're actually going to reference it on this next slide",
    "start": "1538000",
    "end": "1543679"
  },
  {
    "text": "so this is probably our most complicated complicated yaml that we're going to see so",
    "start": "1543679",
    "end": "1550720"
  },
  {
    "text": "trigger warning for anyone who doesn't like reading yaml on",
    "start": "1550720",
    "end": "1556080"
  },
  {
    "text": "slides possibly including me but uh this is better than me um scrolling through a terminal window and screwing",
    "start": "1556080",
    "end": "1562000"
  },
  {
    "text": "it up so uh this is a the definition of a stateful set for for a cassandra cluster",
    "start": "1562000",
    "end": "1568799"
  },
  {
    "text": "it's going to span a couple slides we'll just walk through it a little at a time and i'll try to to guide you through so the left side we see the name of the",
    "start": "1568799",
    "end": "1575760"
  },
  {
    "text": "staple set and we're going to reference that service that we just created so we're telling kubernetes that we that that is the",
    "start": "1575760",
    "end": "1582640"
  },
  {
    "text": "service that we want to put in front of our nodes uh also on this left side we're looking",
    "start": "1582640",
    "end": "1589120"
  },
  {
    "text": "at we're defining which policies we want kubernetes to use there are some options for how it manages the life cycle of the",
    "start": "1589120",
    "end": "1595919"
  },
  {
    "text": "pods as it's as it spins them up and down to scale up and and destroys pods in order to scale",
    "start": "1595919",
    "end": "1602080"
  },
  {
    "text": "down in the stateful set so the options that i've specified here are actually the defaults and",
    "start": "1602080",
    "end": "1608320"
  },
  {
    "text": "they represent a more conservative approach to to managing the stateful set in that",
    "start": "1608320",
    "end": "1615120"
  },
  {
    "text": "they're going to start one note at a time and they're going to wait for each node to to report that it's ready before",
    "start": "1615120",
    "end": "1621039"
  },
  {
    "text": "starting to spin up the next note and the the restart policy that's here uh is",
    "start": "1621039",
    "end": "1626559"
  },
  {
    "text": "it functions in a similar way so restarting a single node at a time uh",
    "start": "1626559",
    "end": "1631679"
  },
  {
    "text": "when you so the the uh stateful set does support the idea of a rolling update so you can",
    "start": "1631679",
    "end": "1637760"
  },
  {
    "text": "deploy updates to the to the stateful set that will be rolled out individually to the pots",
    "start": "1637760",
    "end": "1643919"
  },
  {
    "text": "there's other things that we see here on the right side of the slide exposing ports for the different",
    "start": "1643919",
    "end": "1650000"
  },
  {
    "text": "interfaces that cassandra has for client access with this with cql",
    "start": "1650000",
    "end": "1655200"
  },
  {
    "text": "cassandra query language management apis uh interfaces for talking to other nodes and so on",
    "start": "1655200",
    "end": "1661919"
  },
  {
    "text": "and the last little thing on the bottom right there is is kind of cool defining a pre-stop command this helps us",
    "start": "1661919",
    "end": "1668880"
  },
  {
    "text": "have each cassandra node be a good citizen in instead of just ghosting the rest of",
    "start": "1668880",
    "end": "1674320"
  },
  {
    "text": "the cluster when we when we scale down the cluster it's going to actually communicate and",
    "start": "1674320",
    "end": "1679520"
  },
  {
    "text": "offload its data nicely to other nodes within the cluster so",
    "start": "1679520",
    "end": "1685360"
  },
  {
    "text": "there are other hooks that we can define uh in terms of we can we can customize the liveness and readiness probes that",
    "start": "1685360",
    "end": "1691520"
  },
  {
    "text": "are used on each node as well as this pre-stop that you see here okay we're halfway through the yaml",
    "start": "1691520",
    "end": "1699760"
  },
  {
    "text": "all right so what we see here on the left side is overriding some environment variables",
    "start": "1700240",
    "end": "1706240"
  },
  {
    "text": "the particular cassandra image that we're using in this example actually allows configuration by",
    "start": "1706240",
    "end": "1712960"
  },
  {
    "text": "providing a yaml file which you can swap in uh and override cassandra's built-in",
    "start": "1712960",
    "end": "1718159"
  },
  {
    "text": "yaml configuration or you know there's also several environment variables that are supported that you can kind of",
    "start": "1718159",
    "end": "1723760"
  },
  {
    "text": "override the the location of various things and and some different properties and then finally we need storage so",
    "start": "1723760",
    "end": "1730399"
  },
  {
    "text": "we're going to define a pvc template and every time the stateful set is going to stamp out a new pod it's going to",
    "start": "1730399",
    "end": "1738559"
  },
  {
    "text": "create a new a new pvc according to the template that we have defined here and this functions much the same way as the",
    "start": "1738559",
    "end": "1744720"
  },
  {
    "text": "other pvc definitions that you've seen in the previous slides so",
    "start": "1744720",
    "end": "1750559"
  },
  {
    "text": "that's that's the great thing about stateful sets is that it's going to manage the uh the creation of these pods and the",
    "start": "1750559",
    "end": "1757120"
  },
  {
    "text": "creation of the storage that they need at the same time um one of the things that they do not do",
    "start": "1757120",
    "end": "1763279"
  },
  {
    "text": "is when you scale down a cluster and uh nodes are eliminated from the stateful",
    "start": "1763279",
    "end": "1768480"
  },
  {
    "text": "set it does not automatically delete the pvcs for you so",
    "start": "1768480",
    "end": "1774240"
  },
  {
    "text": "you're welcome your data is still there even when the cluster scales down you actually have to go and explicitly delay",
    "start": "1774240",
    "end": "1779760"
  },
  {
    "text": "delete those pvcs in order to free the data",
    "start": "1779760",
    "end": "1783840"
  },
  {
    "text": "all right so staple sets are are pretty powerful and you can see that a simple example",
    "start": "1786240",
    "end": "1792159"
  },
  {
    "text": "can involve quite a bit of yaml configuration so you might ask do you is that you know is that too complicated do",
    "start": "1792159",
    "end": "1798799"
  },
  {
    "text": "i want to manage that complexity uh you may or may not so and that's just all i've shown you here",
    "start": "1798799",
    "end": "1805600"
  },
  {
    "text": "is some brief talk about you know initial deployment of the database and then maybe a little bit we've talked about scaling up and scaling down or",
    "start": "1805600",
    "end": "1812399"
  },
  {
    "text": "kind of hinted at that now what about things that databases need care and feeding tuning",
    "start": "1812399",
    "end": "1819120"
  },
  {
    "text": "you know debugging things uh long you know identifying long-running queries",
    "start": "1819120",
    "end": "1824480"
  },
  {
    "text": "there's all kinds of things that go into the operations of a database that that we need on top of that initial",
    "start": "1824480",
    "end": "1830559"
  },
  {
    "text": "deployment so this is where the idea of operators comes in",
    "start": "1830559",
    "end": "1837360"
  },
  {
    "text": "so this is a great quote from tuesday this is very likely a paraphrase of what",
    "start": "1837360",
    "end": "1842559"
  },
  {
    "text": "was actually said but i remember rick vasquez from western digital saying something like this and a great panel",
    "start": "1842559",
    "end": "1848399"
  },
  {
    "text": "discussion that was part of that dok day and his his words of wisdom were basically",
    "start": "1848399",
    "end": "1854000"
  },
  {
    "text": "yeah if you're you know deploy if you're going to deploy a database in kubernetes you should use an operator and that was",
    "start": "1854000",
    "end": "1859919"
  },
  {
    "text": "like a word to everyone not not you know not just noobs or you know",
    "start": "1859919",
    "end": "1865519"
  },
  {
    "text": "uh people that maybe have less experience doing this basically like you should be using an operator that's",
    "start": "1865519",
    "end": "1870640"
  },
  {
    "text": "really gonna save you a lot of pain um and i would concur with that opinion",
    "start": "1870640",
    "end": "1876640"
  },
  {
    "text": "okay so this is where the operator pattern comes into play this is a kubernetes native way of managing",
    "start": "1876640",
    "end": "1881760"
  },
  {
    "text": "applications that take advantage of the kubernetes deploy the the kubernetes control loop",
    "start": "1881760",
    "end": "1888080"
  },
  {
    "text": "um so there's very likely uh an operator available for the database that you're using um and and in particular in the",
    "start": "1888080",
    "end": "1895120"
  },
  {
    "text": "cassandra world we had like five or six of them as of uh uh earlier this year we've kind",
    "start": "1895120",
    "end": "1901519"
  },
  {
    "text": "of reconciled as a community down to one called cass operator and you can find it",
    "start": "1901519",
    "end": "1907120"
  },
  {
    "text": "at the address shown on there and then we've actually kind of broadened beyond that so cast",
    "start": "1907120",
    "end": "1914080"
  },
  {
    "text": "operator manages the provision and running of your nodes but you also need other things and this is a common thing",
    "start": "1914080",
    "end": "1919279"
  },
  {
    "text": "for other databases as well you need to manage backup and restores maybe you need secure provisioning of keys or",
    "start": "1919279",
    "end": "1925440"
  },
  {
    "text": "different access credentials there's a lot of things that go into it right so",
    "start": "1925440",
    "end": "1931200"
  },
  {
    "text": "an example of something innovative that we're doing in the cassandra community is this kate sander project in which",
    "start": "1931200",
    "end": "1936720"
  },
  {
    "text": "we're actually building an ecosystem of things around the core cassandra project",
    "start": "1936720",
    "end": "1942720"
  },
  {
    "text": "it includes cass operator to run cassandra but then also tools called medusa",
    "start": "1942720",
    "end": "1948399"
  },
  {
    "text": "and reaper that perform operational tasks including backup and restore capabilities",
    "start": "1948399",
    "end": "1954880"
  },
  {
    "text": "we've integrated the cube prometheus stack so that we have metrics",
    "start": "1954880",
    "end": "1959919"
  },
  {
    "text": "reporting you can you can use the q prometheus stack that comes with kate sandra or you can swap in your own",
    "start": "1959919",
    "end": "1966640"
  },
  {
    "text": "instances if you would like and then on top of that we've put stargate which is basically an api layer",
    "start": "1966640",
    "end": "1974240"
  },
  {
    "text": "that we built on top of cassandra and uh you know my this is not a plug for",
    "start": "1974240",
    "end": "1979679"
  },
  {
    "text": "our our database as a service but we have astra our database as a service what we're basically doing with that",
    "start": "1979679",
    "end": "1985519"
  },
  {
    "text": "is a lot of the technology that that runs that goes into stargate and",
    "start": "1985519",
    "end": "1991279"
  },
  {
    "text": "the kate sander projects so when people ask are you you know can you run a database on kubernetes well i mean",
    "start": "1991279",
    "end": "1997440"
  },
  {
    "text": "that's what we're doing we have a whole database as a service business that is running in kubernetes",
    "start": "1997440",
    "end": "2004080"
  },
  {
    "text": "so if you want to hear more about this kind of stuff there's a talk that my colleague chris bradford is is",
    "start": "2004080",
    "end": "2010399"
  },
  {
    "text": "co-presenting with tai from google this afternoon i recommend checking that talk out especially if you",
    "start": "2010399",
    "end": "2016799"
  },
  {
    "text": "want to talk about multi-cluster going having a database that spans multiple kubernetes clusters this is a really",
    "start": "2016799",
    "end": "2022799"
  },
  {
    "text": "interesting and innovative area and there's a lot of work going on here uh this is the book plug that i promised",
    "start": "2022799",
    "end": "2029760"
  },
  {
    "text": "that you i know that you really wanted to see the first three chapters are out and",
    "start": "2029760",
    "end": "2035200"
  },
  {
    "text": "available if you have an o'reilly account you can see them on the learning platform and i'm really grateful to",
    "start": "2035200",
    "end": "2041919"
  },
  {
    "text": "portworx who have agreed to sponsor the book and you can actually get the first three",
    "start": "2041919",
    "end": "2047039"
  },
  {
    "text": "chapters for free that's what the first three that are available uh from them right now they've been handing out cards",
    "start": "2047039",
    "end": "2053280"
  },
  {
    "text": "and i'm giving you an address here that you can use um this is something that uh",
    "start": "2053280",
    "end": "2060158"
  },
  {
    "text": "i don't we're not the world class experts like no one there is no one that has all of the knowledge so i'm really",
    "start": "2060159",
    "end": "2067760"
  },
  {
    "text": "happy to be corrected and fault to be found with things that we have written and things that can be made",
    "start": "2067760",
    "end": "2073520"
  },
  {
    "text": "better so i'd love to have feedback from people that are looking at the early release of the book and i'm going",
    "start": "2073520",
    "end": "2079440"
  },
  {
    "text": "to go hang out at the datasacks booth after this we are giving away a video game machine",
    "start": "2079440",
    "end": "2086878"
  },
  {
    "text": "but i know that you're not all about the swag and the prizes so i know that you want to hear my",
    "start": "2086879",
    "end": "2092720"
  },
  {
    "text": "colleague rags come and give some demos he's going to be doing some hands-on stuff with kate sandra at the booth and",
    "start": "2092720",
    "end": "2097760"
  },
  {
    "text": "i think he also has a couple of t-shirts to give away um if we have folks to that want to ask questions and i'm sorry",
    "start": "2097760",
    "end": "2104320"
  },
  {
    "text": "virtual people i cannot send you a virtual t-shirt okay so i'm ready for questions if we have",
    "start": "2104320",
    "end": "2109920"
  },
  {
    "text": "time you know i think we might be out but uh yeah thank you very much jeffrey all",
    "start": "2109920",
    "end": "2115119"
  },
  {
    "text": "right thank you [Applause]",
    "start": "2115119",
    "end": "2121089"
  }
]