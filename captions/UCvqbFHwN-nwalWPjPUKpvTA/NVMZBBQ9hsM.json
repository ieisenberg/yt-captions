[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "good afternoon everyone thanks for coming to our talk let everybody get seated for a sec thank you for being",
    "start": "60",
    "end": "10500"
  },
  {
    "text": "here we're excited to give this talk this is the first time we've given this when externally debugging @cd is a big",
    "start": "10500",
    "end": "17850"
  },
  {
    "text": "part of our daily jobs it's something that we care a lot about constantly trying to get better at we do it both to",
    "start": "17850",
    "end": "24240"
  },
  {
    "text": "solve customer issues and gke and keep their clusters healthy and it's also important so that we can get to the root",
    "start": "24240",
    "end": "31080"
  },
  {
    "text": "cause of issues and I mean the real root cause of an issue in @cd so we can fix it an open source and make the software",
    "start": "31080",
    "end": "38340"
  },
  {
    "text": "better for everyone with each release and that's where the community all of you really come in we'd like to share",
    "start": "38340",
    "end": "45180"
  },
  {
    "text": "our learnings with you and our experiences to enable you to be more effective at keeping clusters healthy",
    "start": "45180",
    "end": "50430"
  },
  {
    "text": "and also maybe contributing back to the projects my name is Joe batts I'm a",
    "start": "50430",
    "end": "55829"
  },
  {
    "text": "Google I'm a Google engineer I work as a maintainer on the LCD project and I also",
    "start": "55829",
    "end": "62129"
  },
  {
    "text": "contribute to kubernetes and joining me today is Jing Yi who is also my colleague and an active contributor to",
    "start": "62129",
    "end": "69180"
  },
  {
    "text": "both at CD and kubernetes we'll start the talk today with a brief recap of",
    "start": "69180",
    "end": "74220"
  },
  {
    "text": "that CD I won't spend too much time on that and then we'll dive down a little more into some components of how Etsy DS",
    "start": "74220",
    "end": "80220"
  },
  {
    "text": "serves and stores data it's essential to understand that to be able to inform",
    "start": "80220",
    "end": "85380"
  },
  {
    "text": "yourself when you're looking at error messages and logs and metrics to be able to make sense of what they're trying to",
    "start": "85380",
    "end": "91320"
  },
  {
    "text": "tell you well then spend a few minutes on some of the main tools that we use for debugging at CD some of the things",
    "start": "91320",
    "end": "97500"
  },
  {
    "text": "have been really helpful for us some things we've built or improved will then dive into some techniques that we found",
    "start": "97500",
    "end": "103740"
  },
  {
    "text": "to be most effective at getting from you know the initial issue report down to the cause of a problem and we'll close",
    "start": "103740",
    "end": "111149"
  },
  {
    "text": "out the talk with some proactive measures you can use to keep your clusters healthy so let's just start",
    "start": "111149",
    "end": "117719"
  },
  {
    "start": "116000",
    "end": "350000"
  },
  {
    "text": "with a brief recap of that CD this is my opinion you could say that CD is a distributed key-value store and that",
    "start": "117719",
    "end": "124049"
  },
  {
    "text": "would be true but it doesn't really capture much detail about what we're trying to say at CD is there are many",
    "start": "124049",
    "end": "129840"
  },
  {
    "text": "distributed key-value stores some does are designed to store petabytes of data that's not at CDs purpose another thing",
    "start": "129840",
    "end": "136080"
  },
  {
    "text": "you could say about it is that it's a consensus data store and that refers to the fact that it relies on the RAF",
    "start": "136080",
    "end": "141690"
  },
  {
    "text": "consensus algorithm to replicate the state to all the members of a cluster for high availability but again we're",
    "start": "141690",
    "end": "147930"
  },
  {
    "text": "not totally getting to the intent of the system so the way I like to think about it is it's a system to reliably manage",
    "start": "147930",
    "end": "154080"
  },
  {
    "text": "the coordination state of a distributed system so what we're really saying here is that we're gonna build bigger",
    "start": "154080",
    "end": "160010"
  },
  {
    "text": "distributed systems on top of a TD and it's gonna provide that core coordination in the example of",
    "start": "160010",
    "end": "166320"
  },
  {
    "text": "kubernetes it's storing all of your resource objects and providing a way so",
    "start": "166320",
    "end": "171330"
  },
  {
    "text": "that users and the various components of kubernetes can all interact with those resources to share state and coordinate",
    "start": "171330",
    "end": "179040"
  },
  {
    "text": "their behavior it's not the first of these systems Google chubbie was a early example and Apache zookeeper is another",
    "start": "179040",
    "end": "185730"
  },
  {
    "text": "major open-source project which serves this purpose and they share some common properties they're designed to be highly",
    "start": "185730",
    "end": "191370"
  },
  {
    "text": "available they need to be because the distributed systems you build on top of them and eat that availability they are",
    "start": "191370",
    "end": "198930"
  },
  {
    "text": "being used for coordination so they require a strong consistency model and",
    "start": "198930",
    "end": "204570"
  },
  {
    "text": "typically the distributed system has many components in it all of which need to observe some subset of the state in",
    "start": "204570",
    "end": "211170"
  },
  {
    "text": "this store and so there's usually some kind of watch mechanism that allows them to subscribe and receive near real-time",
    "start": "211170",
    "end": "218130"
  },
  {
    "text": "updates to some set of that data so that they have fast access to it lastly these systems typically include a",
    "start": "218130",
    "end": "225420"
  },
  {
    "text": "variety of concurrency control primitives so this could be a check and set operation to allow you to do",
    "start": "225420",
    "end": "230790"
  },
  {
    "text": "optimistic concurrency control it could be leases to allow you to build a leader election things like that just really",
    "start": "230790",
    "end": "238950"
  },
  {
    "text": "briefly about raft this is a whole topic and I can't cover it in this in this presentation and give it full justice",
    "start": "238950",
    "end": "244050"
  },
  {
    "text": "but raft is the concurrency is the consensus algorithm that city uses and",
    "start": "244050",
    "end": "250530"
  },
  {
    "text": "its leader election based so when you see things in that city about leader election we're talking about raft and",
    "start": "250530",
    "end": "256109"
  },
  {
    "text": "the way that it basically works is that you require a cluster to have a majority",
    "start": "256109",
    "end": "261540"
  },
  {
    "text": "vote on who the leader is so if you have a cluster of size 3 the majority would be too and as long as",
    "start": "261540",
    "end": "268960"
  },
  {
    "text": "two members can vote and agree on the leader the system is available one of those members could fail it could be",
    "start": "268960",
    "end": "275650"
  },
  {
    "text": "because it's you know been partitioned from the network or the machine is crashed and the system will can still",
    "start": "275650",
    "end": "281320"
  },
  {
    "text": "continue to function sometimes and so three is a common number of members in",
    "start": "281320",
    "end": "287710"
  },
  {
    "text": "that city cluster that you would run the other most common number is five because now you've gotten up to a failure",
    "start": "287710",
    "end": "293139"
  },
  {
    "text": "tolerance of two that could allow you to have one planned failure so for example",
    "start": "293139",
    "end": "298240"
  },
  {
    "text": "if you're planning an upgrade you know you'll lose one member ask you do that rolling upgrade and then you can also at",
    "start": "298240",
    "end": "303490"
  },
  {
    "text": "the same time support one unplanned failure and still be available we'll",
    "start": "303490",
    "end": "309520"
  },
  {
    "text": "talk about three major subcomponents of SED throughout this talk there's Prometheus which is the metric system so",
    "start": "309520",
    "end": "315639"
  },
  {
    "text": "all of stds metrics are exposed to a metrics endpoint and are easily accessible as Prometheus we're really",
    "start": "315639",
    "end": "321340"
  },
  {
    "text": "happy about our use of that system the major API endpoints are provided through G RPC and it's also worth noting",
    "start": "321340",
    "end": "328900"
  },
  {
    "text": "that if you want to explore those directly there there re-exposed in addition to the high-performance binary",
    "start": "328900",
    "end": "335169"
  },
  {
    "text": "protocol they're available at the JSON HTTP endpoint and then the last major",
    "start": "335169",
    "end": "340360"
  },
  {
    "text": "subsystem is both DB SED needs a backing sort of persistence data to disk and it",
    "start": "340360",
    "end": "345970"
  },
  {
    "text": "uses the system for that we'll talk a little bit more about it later let's talk briefly about how sed serves and",
    "start": "345970",
    "end": "352630"
  },
  {
    "text": "stores data this is a sampling of a key space this is from kubernetes and the",
    "start": "352630",
    "end": "358750"
  },
  {
    "text": "key space is organized hierarchically you can see that there are the first prefix you can kind of ignore but the",
    "start": "358750",
    "end": "364780"
  },
  {
    "text": "second the second directory is the kubernetes types and then followed by",
    "start": "364780",
    "end": "369940"
  },
  {
    "text": "the namespaces and the resource names and kubernetes chose this because at CD provides an index over the key space",
    "start": "369940",
    "end": "376539"
  },
  {
    "text": "which is lexically ordered and that allows you to do what's called a range read which you can get you basically",
    "start": "376539",
    "end": "382030"
  },
  {
    "text": "anything that has the same common prefix or anything it's in in this example anything that's in the same subdirectory",
    "start": "382030",
    "end": "387960"
  },
  {
    "text": "that allows you to for example here you could get all of the replicas sets with",
    "start": "387960",
    "end": "394990"
  },
  {
    "text": "a single query or you could get all of the replicas sets for a particular namespacing we're note however you could not get",
    "start": "394990",
    "end": "401830"
  },
  {
    "text": "everything in the production namespace in a single query because it's not all within the same prefix here it's spread",
    "start": "401830",
    "end": "408820"
  },
  {
    "text": "across multiple types here's a couple of the other major at CD operations to",
    "start": "408820",
    "end": "414490"
  },
  {
    "text": "watch out for there's a single write operation called put delete works kind of like the range read and that you can",
    "start": "414490",
    "end": "421840"
  },
  {
    "text": "delete multiple entries in a single request if you need it and then there's an interesting operation called transaction this is a multi-purpose",
    "start": "421840",
    "end": "428650"
  },
  {
    "text": "operation what it includes is a condition and zero or more operations",
    "start": "428650",
    "end": "434500"
  },
  {
    "text": "that you were going to execute if that condition is true and zero more that you can execute if it's false so for example",
    "start": "434500",
    "end": "440500"
  },
  {
    "text": "you could use this as a check and set operation you could say if the value of some key is what I expect it to be only",
    "start": "440500",
    "end": "447370"
  },
  {
    "text": "then updated which would prevent you from accidentally clobbering anybody else's rights or you could use it as a",
    "start": "447370",
    "end": "452740"
  },
  {
    "text": "way of performing multiple operations atomically you could just hardwire the condition to be true and then you could",
    "start": "452740",
    "end": "458440"
  },
  {
    "text": "put to put rights in that operation all",
    "start": "458440",
    "end": "463930"
  },
  {
    "text": "of these operations are what we call linearize ibly consistent it's kind of a big word another term for it is external",
    "start": "463930",
    "end": "470230"
  },
  {
    "text": "consistency and if you're unfamiliar with that that means I'll just give you a brief intuition it's a fairly strong",
    "start": "470230",
    "end": "476020"
  },
  {
    "text": "form of consistency where say you have a client and it performs a put on one member in that CD cluster and then",
    "start": "476020",
    "end": "482200"
  },
  {
    "text": "subsequently it gets a response back acknowledging that that put was successful it then does a read on maybe",
    "start": "482200",
    "end": "489040"
  },
  {
    "text": "a different member of that cluster is it guaranteed to see the write that it performed previously and the answer is",
    "start": "489040",
    "end": "494200"
  },
  {
    "text": "yes it's guaranteed to see its own writes in the absence of course any",
    "start": "494200",
    "end": "499450"
  },
  {
    "text": "other clients interacting here because those are not atomic operations so if another client jumped in and wrote in",
    "start": "499450",
    "end": "504670"
  },
  {
    "text": "between it could but it's guaranteed to logically see a view of the world from after its own right those things happen",
    "start": "504670",
    "end": "510220"
  },
  {
    "text": "in sequence a other type of major type of operation that HCD house is a watch",
    "start": "510220",
    "end": "517349"
  },
  {
    "text": "this is a streaming operation and what at CD does is it establishes a G RPC",
    "start": "517349",
    "end": "523539"
  },
  {
    "text": "bi-directional stream with a server and then it sends requests one way and receives updates in the other direction",
    "start": "523540",
    "end": "530020"
  },
  {
    "text": "so it can ask to establish watches over a particular agents of the key space and then it will",
    "start": "530020",
    "end": "535430"
  },
  {
    "text": "eventually receive acknowledgments that the watch has been created and then receive events for any changes to that",
    "start": "535430",
    "end": "541400"
  },
  {
    "text": "region of the key space in order this is of course is eventually consistent so",
    "start": "541400",
    "end": "547070"
  },
  {
    "text": "just to follow through with that example say we have a client that client has a cache and we've configured that cache to",
    "start": "547070",
    "end": "553220"
  },
  {
    "text": "be updated using a watch from Etsy D a particular member but then if we were to again perform a right to a different",
    "start": "553220",
    "end": "559970"
  },
  {
    "text": "member and receive an acknowledgement that that rights been completed if we go to our cache or guaranteed to see that",
    "start": "559970",
    "end": "565970"
  },
  {
    "text": "right well know there's a race right it depends if if the event processes",
    "start": "565970",
    "end": "572030"
  },
  {
    "text": "through the system in time before I read is is mix it to the cache then we are",
    "start": "572030",
    "end": "577130"
  },
  {
    "text": "guaranteed then we will see the right but that's not guaranteed it could be that the read happens first so you need",
    "start": "577130",
    "end": "582860"
  },
  {
    "text": "to be aware of those different consistency models for these different operations I'm gonna dive down into just",
    "start": "582860",
    "end": "588170"
  },
  {
    "text": "a couple elements of storage and we'll talk a little more about debugging when debugging sed it's important to",
    "start": "588170",
    "end": "593570"
  },
  {
    "text": "understand that it retains a global revision number and every time you perform an operation it increments that",
    "start": "593570",
    "end": "599510"
  },
  {
    "text": "number and it keeps the history of all the objects so it doesn't do in place updates of objects it's just kind of a",
    "start": "599510",
    "end": "604850"
  },
  {
    "text": "copy-on-write mechanism and we refer to this the the this ability to keep a",
    "start": "604850",
    "end": "611690"
  },
  {
    "text": "history and be able to read things in history as a multi-version concurrency control system and it exact aspect of",
    "start": "611690",
    "end": "618350"
  },
  {
    "text": "the system exists in two layers the most obvious one is up in the ad key space well you can actually see the old",
    "start": "618350",
    "end": "624140"
  },
  {
    "text": "revisions and where the watches can be replay history by traversing that history of objects there's also a second",
    "start": "624140",
    "end": "632060"
  },
  {
    "text": "more subtle layer of multi-version concurrency control hidden down on both DB this enables the storage layer to",
    "start": "632060",
    "end": "639550"
  },
  {
    "text": "execute well at least one read or one write and as many reads as it needs",
    "start": "639550",
    "end": "644900"
  },
  {
    "text": "concurrently most data systems would be exclusive you could do one read or in right or sorry one write or n reads but",
    "start": "644900",
    "end": "652460"
  },
  {
    "text": "not one write and and reads and it does that by keeping a history of objects that it compacts why am I telling you",
    "start": "652460",
    "end": "659540"
  },
  {
    "text": "this well there this actually shows up in that CD when you're debugging it there's two major operations that show",
    "start": "659540",
    "end": "664580"
  },
  {
    "text": "up one is called compaction and compaction is the mechanism by which sed goes through and removes old version",
    "start": "664580",
    "end": "670889"
  },
  {
    "text": "of revisions once you no longer need them you have to tell it what you want it to do it'll keep everything by default and you",
    "start": "670889",
    "end": "677189"
  },
  {
    "text": "can configure it to automatically compact all the revisions or if you're using kubernetes the client will",
    "start": "677189",
    "end": "682769"
  },
  {
    "text": "actually request the compactions automatically in the case of kubernetes every five minutes it will request that",
    "start": "682769",
    "end": "687839"
  },
  {
    "text": "everything's older than five minutes is removed and kubernetes is tolerant to not having a full revision history so",
    "start": "687839",
    "end": "693990"
  },
  {
    "text": "that works fine down at the bolt DB layer there's some potential for",
    "start": "693990",
    "end": "699269"
  },
  {
    "text": "fragmentation this is less common in modern versions of vet CD but in 3:1 in",
    "start": "699269",
    "end": "704399"
  },
  {
    "text": "particular it was more common that we would see a database file get quite large either because there were rights",
    "start": "704399",
    "end": "710970"
  },
  {
    "text": "of different sizes or at one point you'd reached a higher high-water mark in size and then sed never automatically",
    "start": "710970",
    "end": "718050"
  },
  {
    "text": "downsized the file so there is an operation to defrag a CD and if you need to if you see a large file and you're",
    "start": "718050",
    "end": "724709"
  },
  {
    "text": "had seen poor behavior one option would be to go through and defrag both DB using that ste cuttle command but be",
    "start": "724709",
    "end": "731790"
  },
  {
    "text": "aware that that is a stop the world operation if you look at the sed data",
    "start": "731790",
    "end": "737459"
  },
  {
    "text": "directory you'll see this and you might get a little bit intimidated but when debugging this is a great way to get answers to questions so I'm going to",
    "start": "737459",
    "end": "744000"
  },
  {
    "text": "point out a couple things one is that main DB file under snap that is the mean",
    "start": "744000",
    "end": "749009"
  },
  {
    "text": "file that live reads are performed from and then there's these snap files and wall files and it's better to explain",
    "start": "749009",
    "end": "755220"
  },
  {
    "text": "those through kind of a logical view of the system so let's start with the wall file the wall file stands for right",
    "start": "755220",
    "end": "761309"
  },
  {
    "text": "ahead blog if we were to create new some files in the system we might call them ceiling files or floor files but this",
    "start": "761309",
    "end": "767189"
  },
  {
    "text": "this wall file it's it's it's the first place the right happens and once that right to the wall file is",
    "start": "767189",
    "end": "773180"
  },
  {
    "text": "synced to disk that right is now permanent of course you can't really",
    "start": "773180",
    "end": "778589"
  },
  {
    "text": "effectively serve rights from a file light or reads from a file like that so at CD immediately then also writes",
    "start": "778589",
    "end": "784439"
  },
  {
    "text": "that to the main DB file which is efficient for performing reads of course at CD could crash between when that",
    "start": "784439",
    "end": "790589"
  },
  {
    "text": "first write occurs and the second one does so if it does it's gonna need to replay the wall file to recreate the DB",
    "start": "790589",
    "end": "796170"
  },
  {
    "text": "file that's how it recovers there's another problem with this which is that wall file would grow",
    "start": "796170",
    "end": "801420"
  },
  {
    "text": "indefinitely over time and that's not acceptable so what we need to do is we need to keep it from doing that and Etsy",
    "start": "801420",
    "end": "807540"
  },
  {
    "text": "does that by periodically introducing snapshots yeah it writes a copy of the",
    "start": "807540",
    "end": "812820"
  },
  {
    "text": "key space to a file a periodic cleaning associated that with the exact position in the log and then if it needs to",
    "start": "812820",
    "end": "818910"
  },
  {
    "text": "recover it finds the newest snapshot loads that and then replays the",
    "start": "818910",
    "end": "824370"
  },
  {
    "text": "remainder of the wall to recreate this state all right now we have some",
    "start": "824370",
    "end": "830070"
  },
  {
    "start": "828000",
    "end": "951000"
  },
  {
    "text": "intuition about some details in Etsy dee let's talk about a couple of the main tools that we use at CD cuddle is one of",
    "start": "830070",
    "end": "836579"
  },
  {
    "text": "the most well known tools and it's actually pretty useful for debugging as well you can use it to examine the state",
    "start": "836579",
    "end": "842670"
  },
  {
    "text": "of a key space see what's in there oftentimes when you're untried to understand why it cities behaving on a",
    "start": "842670",
    "end": "848339"
  },
  {
    "text": "certain way under certain systems knowing you know how many keys you have do you have like a million jobs stored",
    "start": "848339",
    "end": "854880"
  },
  {
    "text": "in a kubernetes database and expensive ragin trees against those is that the problem with just looking at the key",
    "start": "854880",
    "end": "860220"
  },
  {
    "text": "space and glassy and I can really helpful about kubernetes is efficient it stores things in in a binary protocol so",
    "start": "860220",
    "end": "867510"
  },
  {
    "text": "if you actually try and look at a particular object you might run run into trouble you might see something like this so we've written a tool called",
    "start": "867510",
    "end": "873540"
  },
  {
    "text": "augur it's a pretty simple tool and what it does is it allows you to examine kubernetes objects in sed it's aware of",
    "start": "873540",
    "end": "881220"
  },
  {
    "text": "all the kubernetes datatypes and you can easily just add it to that previous command that we ran and decode that back",
    "start": "881220",
    "end": "887310"
  },
  {
    "text": "into Hamill or JSON whatever you want that's handy it's even more handy sometimes if say you have a user who",
    "start": "887310",
    "end": "894240"
  },
  {
    "text": "accidentally deleted an object in the kubernetes cluster they might want that object back one thing you could do is",
    "start": "894240",
    "end": "900360"
  },
  {
    "text": "find the newest backup you have where that object hasn't been deleted yet and use augur to just directly extract that",
    "start": "900360",
    "end": "905670"
  },
  {
    "text": "one object out of that backup file for them it's a great way to remediate an",
    "start": "905670",
    "end": "910920"
  },
  {
    "text": "issue without too many steps the other tool I'll mention is called Etsy dee-dum",
    "start": "910920",
    "end": "919410"
  },
  {
    "text": "plugs this is a great way to look at the wall file the other of the two main file types we had you can see every operation",
    "start": "919410",
    "end": "926819"
  },
  {
    "text": "that occurs in Etsy D in the order that they occurred this is going to be useful for trying to exactly what's gone wrong we've even",
    "start": "926819",
    "end": "933610"
  },
  {
    "text": "added a utility to this that I haven't shown here where you can have it decode the value types using augur so you can",
    "start": "933610",
    "end": "939429"
  },
  {
    "text": "see like for example we've got some severely escaped kubernetes data in here",
    "start": "939429",
    "end": "944889"
  },
  {
    "text": "you could you could see that in its in a more readable format and I will hand it",
    "start": "944889",
    "end": "952239"
  },
  {
    "start": "951000",
    "end": "1690000"
  },
  {
    "text": "over to Jing Yi thanks sure so I'll talk a little bit about the debugging",
    "start": "952239",
    "end": "959350"
  },
  {
    "text": "approaches I'll offer show you this graph it's something I created when I",
    "start": "959350",
    "end": "966759"
  },
  {
    "text": "first started working on at CDI feel like I need some systematic way of debugging when a cluster is not",
    "start": "966759",
    "end": "974589"
  },
  {
    "text": "functioning very well so I started to create this debugging flow graph",
    "start": "974589",
    "end": "980040"
  },
  {
    "text": "initially in my head but now it ends up to become something like this it's been",
    "start": "980040",
    "end": "986439"
  },
  {
    "text": "useful to me so I'm happy to share it with you you can see starting from the",
    "start": "986439",
    "end": "992019"
  },
  {
    "text": "left side of the graph it starts with some some of these sanity checks and as",
    "start": "992019",
    "end": "997600"
  },
  {
    "text": "it flows towards the right-hand side of the graph it leads you towards the root",
    "start": "997600",
    "end": "1003779"
  },
  {
    "text": "cause of the issue so let's start with the sanity checks is at city running",
    "start": "1003779",
    "end": "1009919"
  },
  {
    "text": "that's probably the first thing I want to check there are lots of ways you can",
    "start": "1009919",
    "end": "1017009"
  },
  {
    "text": "track the first thing I usually do is the example here at cities running in",
    "start": "1017009",
    "end": "1023009"
  },
  {
    "text": "containers so I'll just do a dark IPS and grab the keyword you can see you can",
    "start": "1023009",
    "end": "1028798"
  },
  {
    "text": "see the container is good was created two days ago and spin up and running since then the next example is sort of",
    "start": "1028799",
    "end": "1037019"
  },
  {
    "text": "like at a bad example where you can see it was created two days ago but it's no longer running oh by the way so I",
    "start": "1037019",
    "end": "1044510"
  },
  {
    "text": "highlighted issues or the bad examples in the red color and just for reference",
    "start": "1044510",
    "end": "1051649"
  },
  {
    "text": "another check you can do is so the LCD has the health its HTTP endpoint check",
    "start": "1051649",
    "end": "1060389"
  },
  {
    "text": "if you're familiar with kubernetes you use the cube Caudill some people call it cube control get component statuses as",
    "start": "1060389",
    "end": "1068740"
  },
  {
    "text": "city is one of the component and you can see it actually carries the health and",
    "start": "1068740",
    "end": "1074950"
  },
  {
    "text": "point of debt CD and in this case it returns health true alternatively you",
    "start": "1074950",
    "end": "1080650"
  },
  {
    "text": "can just require that endpoint directly using curl again this is a good example",
    "start": "1080650",
    "end": "1086320"
  },
  {
    "text": "the last line is the bad example where the client or you cannot even talk to",
    "start": "1086320",
    "end": "1092320"
  },
  {
    "text": "the server you can see the connection refused some of the other checks you can",
    "start": "1092320",
    "end": "1098350"
  },
  {
    "text": "do this is AB city cuddle or STD control and point status what it does is it",
    "start": "1098350",
    "end": "1105400"
  },
  {
    "text": "queries the end point at the status of an individual cluster at city node in a",
    "start": "1105400",
    "end": "1111340"
  },
  {
    "text": "cluster it is sort of like a weaker check as compared to the health check I",
    "start": "1111340",
    "end": "1117910"
  },
  {
    "text": "just mentioned because as part of the health check actually your cluster has",
    "start": "1117910",
    "end": "1123160"
  },
  {
    "text": "to have a leader and it has quorum as part of that check actually tries to do",
    "start": "1123160",
    "end": "1128530"
  },
  {
    "text": "a quorum right so for that to success but this just gives you the status of",
    "start": "1128530",
    "end": "1134860"
  },
  {
    "text": "the individual at city node another check you can do is add city control",
    "start": "1134860",
    "end": "1139960"
  },
  {
    "text": "member list it sorts of gives you the view of from each at City node in the",
    "start": "1139960",
    "end": "1149080"
  },
  {
    "text": "cluster so for example when you have like bad connections between our city node you you suspect that there might be",
    "start": "1149080",
    "end": "1156070"
  },
  {
    "text": "a network or partition you can use this to check each one's view of the cluster",
    "start": "1156070",
    "end": "1161790"
  },
  {
    "text": "so what might be the so these are the possible outcomes after you run those",
    "start": "1161790",
    "end": "1168220"
  },
  {
    "text": "checks you might find that the server fail to start if you follow the arrows",
    "start": "1168220",
    "end": "1174780"
  },
  {
    "text": "think in most cases it could be due to you have a bad configuration when you",
    "start": "1174780",
    "end": "1180100"
  },
  {
    "text": "start a server or it could be that if there is already data file under your at City data directory at when at City",
    "start": "1180100",
    "end": "1188350"
  },
  {
    "text": "stars will try to read a file and catch up to state if that file itself is bad",
    "start": "1188350",
    "end": "1194160"
  },
  {
    "text": "corrupted then the server will fail to start in that case another possible scenario is",
    "start": "1194160",
    "end": "1201220"
  },
  {
    "text": "that the server started you can see the process is running but when you query",
    "start": "1201220",
    "end": "1206230"
  },
  {
    "text": "for example the endpoint health it's not responding to you and that could be like",
    "start": "1206230",
    "end": "1211810"
  },
  {
    "text": "most possible reasons could be either due to simply a networking issue where",
    "start": "1211810",
    "end": "1217450"
  },
  {
    "text": "you just cannot reach your server or it could be that the server is overloaded and it's not being able to respond to",
    "start": "1217450",
    "end": "1223480"
  },
  {
    "text": "you another possible scenario is that the server was able to start you can see",
    "start": "1223480",
    "end": "1230020"
  },
  {
    "text": "it's running but then crashed I'll give you an example here if you look at the",
    "start": "1230020",
    "end": "1235510"
  },
  {
    "text": "server log I sort of highlighted in red the capital letter C that means crash",
    "start": "1235510",
    "end": "1242020"
  },
  {
    "text": "when you see that in a log it's a bad thing and here it's an example where",
    "start": "1242020",
    "end": "1248190"
  },
  {
    "text": "it's probably too much detail but it's a free list corruption in the both DB data",
    "start": "1248190",
    "end": "1253870"
  },
  {
    "text": "data database that's been used by @cd if you're interested in details I have",
    "start": "1253870",
    "end": "1259900"
  },
  {
    "text": "included a link to the actual fix of that issue another type of sanity checks",
    "start": "1259900",
    "end": "1266650"
  },
  {
    "text": "I usually do is to see if the space quota is exceeded there are a couple of",
    "start": "1266650",
    "end": "1272200"
  },
  {
    "text": "ways you can see that for example the first command we just use that it's a",
    "start": "1272200",
    "end": "1278710"
  },
  {
    "text": "city control endpoint status one of the field it returns is the database size",
    "start": "1278710",
    "end": "1284110"
  },
  {
    "text": "you can see here it says 8 gigabytes that's the default maximum space called",
    "start": "1284110",
    "end": "1290440"
  },
  {
    "text": "a allowed in at CD if you see that it sort of tells you you exceeded or you're",
    "start": "1290440",
    "end": "1295750"
  },
  {
    "text": "reaching the maximum space quota or alternatively you can just directly go",
    "start": "1295750",
    "end": "1301750"
  },
  {
    "text": "to the ED CD data directory and check the size of the DB file in case your",
    "start": "1301750",
    "end": "1306970"
  },
  {
    "text": "server is not running or it's not responding to your to your query the end point status Kure you can just check the",
    "start": "1306970",
    "end": "1313180"
  },
  {
    "text": "size of that file directly there are a couple more places where you can see this issue for example if you do STD",
    "start": "1313180",
    "end": "1320500"
  },
  {
    "text": "control alarm list normally if the city cluster is running correctly there will be no alarms but here is so",
    "start": "1320500",
    "end": "1328360"
  },
  {
    "text": "it shows no space alarm or if you are issuing a",
    "start": "1328360",
    "end": "1333670"
  },
  {
    "text": "command request from the client to the server and the server responded to you with an arrow says database space",
    "start": "1333670",
    "end": "1340660"
  },
  {
    "text": "exceeded it basically means what it says when this happens usually you might want",
    "start": "1340660",
    "end": "1347530"
  },
  {
    "text": "to do a compaction to remove the old history of your data or you might want to do a defragmentation and don't forget",
    "start": "1347530",
    "end": "1355870"
  },
  {
    "text": "to disarm the alarm so that you can go back and running another type of sanity",
    "start": "1355870",
    "end": "1363130"
  },
  {
    "text": "checks I usually do is to see if there are requests taken to taking a server",
    "start": "1363130",
    "end": "1369460"
  },
  {
    "text": "too long to response a couple of ways to see that indirectly like we're issuing",
    "start": "1369460",
    "end": "1377740"
  },
  {
    "text": "we're using the same example a same command sed control endpoint status in this case what happens is that your",
    "start": "1377740",
    "end": "1385780"
  },
  {
    "text": "command actually times out so there is a default of five seconds timeout for each",
    "start": "1385780",
    "end": "1393160"
  },
  {
    "text": "of these commands in this case the server's not responding to you in time so your clients or your command actually",
    "start": "1393160",
    "end": "1400210"
  },
  {
    "text": "times out or alternatively if you check the the server log and search for the",
    "start": "1400210",
    "end": "1406660"
  },
  {
    "text": "keyword apply entry stick - alone you can see here's the facts and hole where it's applying one entries but took like",
    "start": "1406660",
    "end": "1413980"
  },
  {
    "text": "12 seconds which is really long so these",
    "start": "1413980",
    "end": "1419080"
  },
  {
    "text": "are I've listed for most likely next steps or for most likely reasons that",
    "start": "1419080",
    "end": "1426430"
  },
  {
    "text": "could cause this issue they are actually corresponding to the graph if I just",
    "start": "1426430",
    "end": "1432370"
  },
  {
    "text": "briefly go back to this graph if you'll follow the arrows there were four arrows",
    "start": "1432370",
    "end": "1437440"
  },
  {
    "text": "which are basically the four things I listed here so one possible reason is",
    "start": "1437440",
    "end": "1443080"
  },
  {
    "text": "that your request itself is too large meaning you're reading a lot of things",
    "start": "1443080",
    "end": "1449050"
  },
  {
    "text": "or you're modifying a lot of things another possible reason is that the server is overloaded so your your",
    "start": "1449050",
    "end": "1456160"
  },
  {
    "text": "request might be small but there are other large expensive that's using authorizing all the server",
    "start": "1456160",
    "end": "1463370"
  },
  {
    "text": "resource another possible reason could be due to pure disk performance a way to",
    "start": "1463370",
    "end": "1470840"
  },
  {
    "text": "check that is so at CDE has this slash matrix endpoint that you can use expose",
    "start": "1470840",
    "end": "1477110"
  },
  {
    "text": "lots of matrix I've listed two matrix that are directly related to this",
    "start": "1477110",
    "end": "1484640"
  },
  {
    "text": "performance here and it could be networking issue so I think so far we've",
    "start": "1484640",
    "end": "1491870"
  },
  {
    "text": "talked about all of the sanity checks listed on the left side now I would like",
    "start": "1491870",
    "end": "1497450"
  },
  {
    "text": "to go through two things that I think to debugging approaches I think are mostly",
    "start": "1497450",
    "end": "1505850"
  },
  {
    "text": "common mostly used first one is trace the request for example you might start",
    "start": "1505850",
    "end": "1514130"
  },
  {
    "text": "with the sanity checks and you found all the space quota it's exceeded then you",
    "start": "1514130",
    "end": "1520460"
  },
  {
    "text": "check the data stored in your @ çd you couldn't understand why there were so many things stored in in it or you can",
    "start": "1520460",
    "end": "1528200"
  },
  {
    "text": "understand remember each each right request actually create a new version of",
    "start": "1528200",
    "end": "1534080"
  },
  {
    "text": "the data instead of in-place update so you might found someone is frequently",
    "start": "1534080",
    "end": "1539870"
  },
  {
    "text": "updating the data that uses all the space but you don't know who's actually writing or updating that in that case",
    "start": "1539870",
    "end": "1546920"
  },
  {
    "text": "you might need to trace the rec request another example would be your starting",
    "start": "1546920",
    "end": "1552620"
  },
  {
    "text": "from the sanity checks and you found oh one of the requests is taking too long to respond and the request itself is",
    "start": "1552620",
    "end": "1559550"
  },
  {
    "text": "actually really large like it's probably reading a lot of things and you don't know who is reading that in that case",
    "start": "1559550",
    "end": "1565880"
  },
  {
    "text": "you also want might want to trace the request here I have a concrete example",
    "start": "1565880",
    "end": "1571100"
  },
  {
    "text": "of how to do the tracing this is an example from the kubernetes so in",
    "start": "1571100",
    "end": "1577790"
  },
  {
    "text": "kubernetes the only component that talks directly to at CD is QB API server so in",
    "start": "1577790",
    "end": "1583610"
  },
  {
    "text": "this case naturally we're tracing to the cube API server log so in the log I'll",
    "start": "1583610",
    "end": "1590270"
  },
  {
    "text": "describe what happens here so it basically says there is a single request take the API",
    "start": "1590270",
    "end": "1596929"
  },
  {
    "text": "server 33 seconds to finish and there are two major parts of this time the",
    "start": "1596929",
    "end": "1606170"
  },
  {
    "text": "first part is takes like 20 21 seconds which is server reading stuff from dead",
    "start": "1606170",
    "end": "1612860"
  },
  {
    "text": "CD the next step is transforming those readings from at CD to the HTTP response",
    "start": "1612860",
    "end": "1618530"
  },
  {
    "text": "which is then sent back to the server client so the first step is kind of",
    "start": "1618530",
    "end": "1627140"
  },
  {
    "text": "problematic you can see it takes 21 seconds for dead city server to respond and if you look carefully closely you",
    "start": "1627140",
    "end": "1635780"
  },
  {
    "text": "can see the request actually reads 320 KN items from at CD in this single",
    "start": "1635780",
    "end": "1642830"
  },
  {
    "text": "request so this is how you can tell the request is very large and if you want to trace little further the log actually",
    "start": "1642830",
    "end": "1649940"
  },
  {
    "text": "tells you it is from a controller called crown job controller so so the request",
    "start": "1649940",
    "end": "1655730"
  },
  {
    "text": "is from the cron job controller to the kewpie api server then to that CD which",
    "start": "1655730",
    "end": "1661070"
  },
  {
    "text": "is a really large request if you want to trace even further you can look at the source code I've included them here you",
    "start": "1661070",
    "end": "1667820"
  },
  {
    "text": "can see this line is actually calling the listing so if you by the way if",
    "start": "1667820",
    "end": "1674179"
  },
  {
    "text": "you're familiar with kubernetes you can see at this line probably can be optimized a little bit because this",
    "start": "1674179",
    "end": "1679280"
  },
  {
    "text": "controller here it's not using sharing former it's just listing directly from LCD and is not using pagination here",
    "start": "1679280",
    "end": "1686380"
  },
  {
    "text": "this is an example of how do you trace the request another debugging approaches",
    "start": "1686380",
    "end": "1692660"
  },
  {
    "start": "1690000",
    "end": "1843000"
  },
  {
    "text": "i want to talk about is inspect data chill actually already mentioned in the previous slides to use augur to inspect",
    "start": "1692660",
    "end": "1700820"
  },
  {
    "text": "data here i guess i just want to emphasize that it really it's really",
    "start": "1700820",
    "end": "1706400"
  },
  {
    "text": "important to remember there are like three dimensions in the database how",
    "start": "1706400",
    "end": "1711710"
  },
  {
    "text": "many objects do you have in our database how big are those objects and also the",
    "start": "1711710",
    "end": "1716929"
  },
  {
    "text": "third one might be not so obvious but majorities try to emphasize on that the",
    "start": "1716929",
    "end": "1722150"
  },
  {
    "text": "revisions so whenever whenever you try to update an object",
    "start": "1722150",
    "end": "1727790"
  },
  {
    "text": "even though the objects already in @cd but it will not update that object in place it will create a new version or a",
    "start": "1727790",
    "end": "1734750"
  },
  {
    "text": "new copy of that so even though you don't you might not have a lot of objects and they individually they're",
    "start": "1734750",
    "end": "1740990"
  },
  {
    "text": "not so big but if we were updating them very frequently you can still use a lot of space to be precise the third",
    "start": "1740990",
    "end": "1749390"
  },
  {
    "text": "dimension is the compacted revisions so if you're if you find yourself if you find that cities using a lot of space",
    "start": "1749390",
    "end": "1755840"
  },
  {
    "text": "you might want a better fine-tuned the compaction parameters try to remove the",
    "start": "1755840",
    "end": "1763040"
  },
  {
    "text": "old revisions to keep your data usage a data size usage under control",
    "start": "1763040",
    "end": "1769780"
  },
  {
    "text": "this this part I want you to talk about the relation between the workload and",
    "start": "1770090",
    "end": "1775460"
  },
  {
    "text": "the data volume the workload I mean the server requests like the example requests we just saw earlier so I think",
    "start": "1775460",
    "end": "1783620"
  },
  {
    "text": "it's I want to I want to mention that the workload can increase the volume",
    "start": "1783620",
    "end": "1788870"
  },
  {
    "text": "like I just described each right operation creates a new version and it",
    "start": "1788870",
    "end": "1794720"
  },
  {
    "text": "might not be so obvious in the reverse data volume can can also increase the",
    "start": "1794720",
    "end": "1801230"
  },
  {
    "text": "workload for example if you have lots of stuff stored in at CD and either",
    "start": "1801230",
    "end": "1808780"
  },
  {
    "text": "intentionally or accidentally you're reading a lot of a lot of them then it's is creating a huge large request for",
    "start": "1808780",
    "end": "1818360"
  },
  {
    "text": "this is the same example I just copied from the previous slides I sort of highlight a different part it's it's",
    "start": "1818360",
    "end": "1824720"
  },
  {
    "text": "enlist request it actually requests to list all the job objects in at CD but",
    "start": "1824720",
    "end": "1832610"
  },
  {
    "text": "you might not aware that there are 320k job objects in your ad CD so",
    "start": "1832610",
    "end": "1838850"
  },
  {
    "text": "accidentally in you might create a huge request all right so now I want to",
    "start": "1838850",
    "end": "1845720"
  },
  {
    "start": "1843000",
    "end": "2001000"
  },
  {
    "text": "briefly talk about keeping your ad City healthy these are some I guess some",
    "start": "1845720",
    "end": "1853880"
  },
  {
    "text": "recommendations from us first as Astro mentioned previously as CDE support",
    "start": "1853880",
    "end": "1859550"
  },
  {
    "text": "promises and I mentioned earlier there is an matrix endpoint which you can use we",
    "start": "1859550",
    "end": "1867910"
  },
  {
    "text": "recommend that you monitor these metrics carefully maybe select the the ones that are most",
    "start": "1867910",
    "end": "1873309"
  },
  {
    "text": "important to you and create a dashboard like this we also recommend that you use",
    "start": "1873309",
    "end": "1879400"
  },
  {
    "text": "the officially maintained versions we're currently maintaining three versions",
    "start": "1879400",
    "end": "1885160"
  },
  {
    "text": "three minor versions 3.1 3.2 and 3.3 and there is a minimum recommended versions",
    "start": "1885160",
    "end": "1892590"
  },
  {
    "text": "sent to the at City dev mailing list earlier this year backups we recommend",
    "start": "1892590",
    "end": "1901480"
  },
  {
    "text": "you do backups for discovery out for disaster recovery purpose we also recommend that you do per backup check",
    "start": "1901480",
    "end": "1908500"
  },
  {
    "text": "meaning that whenever you got a backup new back hub you want to do some integrity check on that if you're using",
    "start": "1908500",
    "end": "1915210"
  },
  {
    "text": "the newer at city control versions you can just do sed control snapshot status",
    "start": "1915210",
    "end": "1922000"
  },
  {
    "text": "as part of it it will do this the track for you or because the underlying",
    "start": "1922000",
    "end": "1927400"
  },
  {
    "text": "database is ball DB you can use there is a command line tool called B bolt you can also use that we also recommend that",
    "start": "1927400",
    "end": "1935140"
  },
  {
    "text": "you regularly verify you can actually restore your cluster from the backup file created upgrades again we recommend",
    "start": "1935140",
    "end": "1942820"
  },
  {
    "text": "you upgrade to the officially maintained versions upgrade itself is not trivial",
    "start": "1942820",
    "end": "1948429"
  },
  {
    "text": "but there is a well-documented process on the github document downgrades",
    "start": "1948429",
    "end": "1954540"
  },
  {
    "text": "currently the only possible way to downgrade is if you back up everything",
    "start": "1954540",
    "end": "1959830"
  },
  {
    "text": "before upgrade but there is ongoing support for one minor version downgrade",
    "start": "1959830",
    "end": "1966850"
  },
  {
    "text": "if you want to track the process it's in that github issue",
    "start": "1966850",
    "end": "1971970"
  },
  {
    "text": "one last thing it's very important I think at City Community needs your help",
    "start": "1972070",
    "end": "1978669"
  },
  {
    "text": "if you want to help there are some ways we can reach the current people who are",
    "start": "1978669",
    "end": "1984340"
  },
  {
    "text": "working on on CD I want to mention we have a community meeting where I think",
    "start": "1984340",
    "end": "1990460"
  },
  {
    "text": "it's currently Paul's during the holiday seasons but we're going to resume it early next year early",
    "start": "1990460",
    "end": "1995970"
  },
  {
    "text": "January with that thank you we have a",
    "start": "1995970",
    "end": "2009210"
  },
  {
    "start": "2001000",
    "end": "2182000"
  },
  {
    "text": "couple minutes for questions the",
    "start": "2009210",
    "end": "2018240"
  },
  {
    "text": "question was one of the most common user origin aiding issues we face I would say",
    "start": "2018240",
    "end": "2024390"
  },
  {
    "text": "probably the number one is creating way too many of a particular type of object that is by far the number one",
    "start": "2024390",
    "end": "2032210"
  },
  {
    "text": "what's the recommended frequency of @cd backups I'm not sure I can give one",
    "start": "2041889",
    "end": "2047659"
  },
  {
    "text": "number to that I think it's a little use case dependent but I will say a couple things less than once an hour seems rare",
    "start": "2047659",
    "end": "2055579"
  },
  {
    "text": "to me and there are critical moments where you will most want backups right",
    "start": "2055579",
    "end": "2062030"
  },
  {
    "text": "before you do an upgrade probably right before you do a rollback if you have to do a rollback from an upgrade and the",
    "start": "2062030",
    "end": "2069319"
  },
  {
    "text": "upgrade I would include not only a net CD upgrade but a system upgrade on top of it so right before kubernetes upgrade",
    "start": "2069319",
    "end": "2074810"
  },
  {
    "text": "as well",
    "start": "2074810",
    "end": "2076960"
  },
  {
    "text": "how do we separate noise from the logs well I don't think currently at CD is",
    "start": "2095560",
    "end": "2103480"
  },
  {
    "text": "emitting a lot of things into the Lord maybe you turn on the debug flag I don't",
    "start": "2103480",
    "end": "2110810"
  },
  {
    "text": "know but usually if you look at the starting from the line you will see if it's information which it's I or a warning a",
    "start": "2110810",
    "end": "2119930"
  },
  {
    "text": "w those are I mean more worse thing is II era or even worse II crash",
    "start": "2119930",
    "end": "2129310"
  },
  {
    "text": "is it taking too much space because otherwise I mean you keep all the logs and do a search do a grab then you will",
    "start": "2144840",
    "end": "2150850"
  },
  {
    "text": "find all did everything crashes yeah yeah fortunately that is very credible",
    "start": "2150850",
    "end": "2156670"
  },
  {
    "text": "because right at the beginning right before that pipe operator you've got that single character it identifies it so you could use that or write your own",
    "start": "2156670",
    "end": "2163600"
  },
  {
    "text": "tool to pipe through it I believe there are also some log level settings that you could tie with a net CD if you need",
    "start": "2163600",
    "end": "2170110"
  },
  {
    "text": "but that's typically to get more and not less and I think you want less so you might want to just um pipe it through a",
    "start": "2170110",
    "end": "2175150"
  },
  {
    "text": "tool that filters if that's what you need on your diagram where it showed the",
    "start": "2175150",
    "end": "2186540"
  },
  {
    "text": "NCD server not running we had a cluster that was healthy for probably eight months to a year and then",
    "start": "2186540",
    "end": "2193450"
  },
  {
    "text": "it started dying and we found out that the docker container had a memory limit",
    "start": "2193450",
    "end": "2200770"
  },
  {
    "text": "that apparently the at CD had grown to the point where it hit that memory limit and docker was killing it as out of",
    "start": "2200770",
    "end": "2207160"
  },
  {
    "text": "memory and so that might be another thing to add to your triage by just changing the the upper memory limit for",
    "start": "2207160",
    "end": "2214180"
  },
  {
    "text": "the docker container it started up and it was perfectly healthy so that was kind of a surprise where everything was",
    "start": "2214180",
    "end": "2219190"
  },
  {
    "text": "working just fine forever nothing changed no upgrades but it started crashing great no good thank you thank",
    "start": "2219190",
    "end": "2227380"
  },
  {
    "text": "you that is useful I think",
    "start": "2227380",
    "end": "2233490"
  },
  {
    "text": "right",
    "start": "2241410",
    "end": "2244130"
  },
  {
    "text": "the question was for the disc to slow how do you how do you know if your disc",
    "start": "2266030",
    "end": "2271310"
  },
  {
    "text": "is to slow what could you look at how would you learn more about that yeah I",
    "start": "2271310",
    "end": "2276410"
  },
  {
    "text": "would say the the the UH ops metrics are one of the great things to watch if you see that latency reaching a limit there",
    "start": "2276410",
    "end": "2283280"
  },
  {
    "text": "that is a pretty strong indicator and that's a metric that you could alarm on that you've probably exceeded the limits",
    "start": "2283280",
    "end": "2290930"
  },
  {
    "text": "of your disk there's also an additional section yes there is I don't remember it",
    "start": "2290930",
    "end": "2304580"
  },
  {
    "text": "off the top of my head but I can tell you - where to look for it I believe if you search the 4s CD document there is",
    "start": "2304580",
    "end": "2317869"
  },
  {
    "text": "specific hardware recommendations yeah it's either in the FAQ or the recommendation operational guide there",
    "start": "2317869",
    "end": "2323480"
  },
  {
    "text": "are very specific mentions of that",
    "start": "2323480",
    "end": "2327369"
  },
  {
    "text": "yeah the question was you can you can create a lot of pods in kubernetes and that can end up overloading at CD is",
    "start": "2347570",
    "end": "2353280"
  },
  {
    "text": "there work being done to improve things like this the answer is yes that's why some of us or both of us actually are commuters on both projects in that",
    "start": "2353280",
    "end": "2360750"
  },
  {
    "text": "specific example the pod sent heartbeats to kubernetes which puts load on at CD there is an alpha status fix to move",
    "start": "2360750",
    "end": "2367920"
  },
  {
    "text": "that out into a separate object that is much cheaper to update and that's that's really how we fix some of these things",
    "start": "2367920",
    "end": "2373980"
  },
  {
    "text": "you can we could try and get more capacity out of that city and improve its scalability and performance but if",
    "start": "2373980",
    "end": "2379260"
  },
  {
    "text": "the load that's coming to it is unreasonable we need to go back and improve that load absolutely right now",
    "start": "2379260",
    "end": "2390330"
  },
  {
    "text": "the the tools that SVD cuttle provides the direct tools is seemed seemed appropriate if you are using a toolkit",
    "start": "2390330",
    "end": "2398490"
  },
  {
    "text": "like you know that CD operator or at CD admin then I would look to their",
    "start": "2398490",
    "end": "2405090"
  },
  {
    "text": "documentation on what they recommend but those are those that those are the correct backups to take",
    "start": "2405090",
    "end": "2411020"
  },
  {
    "text": "I think it's a building built into the",
    "start": "2418530",
    "end": "2424350"
  },
  {
    "text": "log when there is a very long request of the API server it will show the tracing",
    "start": "2424350",
    "end": "2430380"
  },
  {
    "text": "yeah you can reconfigure the Kubb API",
    "start": "2430380",
    "end": "2441900"
  },
  {
    "text": "server to compact more often if you need you can also do your own manual compactions but I would kind of",
    "start": "2441900",
    "end": "2448290"
  },
  {
    "text": "recommend if you're using kubernetes to work with it to do the compactions it's it can tolerate the loss of",
    "start": "2448290",
    "end": "2454590"
  },
  {
    "text": "historical data so it should be safe but I've never done it",
    "start": "2454590",
    "end": "2458600"
  },
  {
    "text": "the question was sometimes it takes me snapshots some snapshots can be widely larger than others and it's not clear",
    "start": "2480270",
    "end": "2486510"
  },
  {
    "text": "why well one of the reasons is if you if you do a snapshot right at the tail end right before compaction happens and",
    "start": "2486510",
    "end": "2492360"
  },
  {
    "text": "there's a lot of activity in that cluster there could be a lot of revision counts and then if you did one right after the compaction happen you could",
    "start": "2492360",
    "end": "2498240"
  },
  {
    "text": "see a drastically lower number because it's you know if you're doing it every five minutes removing everything all there five minutes that could be a 2 X",
    "start": "2498240",
    "end": "2504450"
  },
  {
    "text": "interval and if you're doing something different it could be even bigger take one more here and then we'll talk after",
    "start": "2504450",
    "end": "2512299"
  },
  {
    "text": "yes large compactions can get expensive there's been work to make those",
    "start": "2516710",
    "end": "2522120"
  },
  {
    "text": "increasingly concurrent but I would still say that is not an entirely solved problem in NCD making those fully",
    "start": "2522120",
    "end": "2527940"
  },
  {
    "text": "concurrent and low priority with so that they're completely invisible is is an",
    "start": "2527940",
    "end": "2533760"
  },
  {
    "text": "aspirational goal that's not been achieved and yeah so if you are seeing large compactions you will see them",
    "start": "2533760",
    "end": "2539190"
  },
  {
    "text": "written in the logs and you will see how long they took and you may see latency",
    "start": "2539190",
    "end": "2544290"
  },
  {
    "text": "spikes that are visible up through the system from there so I would keep an eye on that Malaga's we'll take more questions after thank",
    "start": "2544290",
    "end": "2551430"
  },
  {
    "text": "you everyone thank you [Applause]",
    "start": "2551430",
    "end": "2557979"
  }
]