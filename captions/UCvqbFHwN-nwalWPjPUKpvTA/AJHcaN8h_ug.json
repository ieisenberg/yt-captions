[
  {
    "text": "okay Hey everybody my name is Conrad I",
    "start": "9000",
    "end": "11840"
  },
  {
    "text": "work on the Swift team at Apple Uh my",
    "start": "11840",
    "end": "14400"
  },
  {
    "text": "focus is primarily uh concurrency and",
    "start": "14400",
    "end": "16720"
  },
  {
    "text": "server use cases Uh you may remember me",
    "start": "16720",
    "end": "19359"
  },
  {
    "text": "from uh my Java life in which I worked",
    "start": "19359",
    "end": "21680"
  },
  {
    "text": "on aka or the reactive streams spec And",
    "start": "21680",
    "end": "25119"
  },
  {
    "text": "yeah it's great to be back and working a",
    "start": "25119",
    "end": "27039"
  },
  {
    "text": "little bit with the JVM",
    "start": "27039",
    "end": "29519"
  },
  {
    "text": "So uh I will introduce Swift a little",
    "start": "29519",
    "end": "31359"
  },
  {
    "text": "bit A quick show of kinds Who is aware",
    "start": "31359",
    "end": "33040"
  },
  {
    "text": "of Swift who has used",
    "start": "33040",
    "end": "35880"
  },
  {
    "text": "Swift okay not so bad So uh Swift is a",
    "start": "35880",
    "end": "39200"
  },
  {
    "text": "open source language Uh works on many",
    "start": "39200",
    "end": "41120"
  },
  {
    "text": "platforms anywhere from Linux Windows to",
    "start": "41120",
    "end": "43440"
  },
  {
    "text": "embedded systems and firmware and",
    "start": "43440",
    "end": "45360"
  },
  {
    "text": "anything between Uh also Wesm which I",
    "start": "45360",
    "end": "47760"
  },
  {
    "text": "don't have on the line slide but I just",
    "start": "47760",
    "end": "49800"
  },
  {
    "text": "remembered and it's a natively compiled",
    "start": "49800",
    "end": "52480"
  },
  {
    "text": "language It has an explicit goal to feel",
    "start": "52480",
    "end": "54719"
  },
  {
    "text": "familiar to people coming from other",
    "start": "54719",
    "end": "56559"
  },
  {
    "text": "ecosystems including Java It has a you",
    "start": "56559",
    "end": "60160"
  },
  {
    "text": "know it's memory safe by default and has",
    "start": "60160",
    "end": "62239"
  },
  {
    "text": "pretty cool features like concurrency",
    "start": "62239",
    "end": "63920"
  },
  {
    "text": "safety verified at compile time as well",
    "start": "63920",
    "end": "67200"
  },
  {
    "text": "Uh since day one swift had a amazing C",
    "start": "67200",
    "end": "70560"
  },
  {
    "text": "and Objective C interrop story which is",
    "start": "70560",
    "end": "72799"
  },
  {
    "text": "how it managed to slowly replace",
    "start": "72799",
    "end": "74479"
  },
  {
    "text": "Objective C on Apple platforms and we",
    "start": "74479",
    "end": "77759"
  },
  {
    "text": "since then added the amazing C++",
    "start": "77759",
    "end": "80080"
  },
  {
    "text": "interrop which is really cool and today",
    "start": "80080",
    "end": "82479"
  },
  {
    "text": "we're adding Java to that",
    "start": "82479",
    "end": "84600"
  },
  {
    "text": "list So why do we even care about this",
    "start": "84600",
    "end": "88479"
  },
  {
    "text": "uh primarily because of memory safety So",
    "start": "88479",
    "end": "91200"
  },
  {
    "text": "why do we care about memory safety well",
    "start": "91200",
    "end": "93360"
  },
  {
    "text": "memory vulner memory safety",
    "start": "93360",
    "end": "95079"
  },
  {
    "text": "vulnerabilities are the number one uh",
    "start": "95079",
    "end": "97520"
  },
  {
    "text": "security vulnerability So if we want to",
    "start": "97520",
    "end": "100079"
  },
  {
    "text": "reduce those it would be great to adopt",
    "start": "100079",
    "end": "102240"
  },
  {
    "text": "memory safe languages across the whole",
    "start": "102240",
    "end": "104119"
  },
  {
    "text": "stack And while Java is a good solution",
    "start": "104119",
    "end": "107360"
  },
  {
    "text": "to that you know Java's memory safe",
    "start": "107360",
    "end": "109280"
  },
  {
    "text": "that's fine But Java programs very often",
    "start": "109280",
    "end": "111759"
  },
  {
    "text": "end up calling into native code at some",
    "start": "111759",
    "end": "113759"
  },
  {
    "text": "point and then you lose this safety So",
    "start": "113759",
    "end": "116640"
  },
  {
    "text": "it's our opinion that whenever you're",
    "start": "116640",
    "end": "118479"
  },
  {
    "text": "writing native code Swift should be the",
    "start": "118479",
    "end": "120640"
  },
  {
    "text": "tool you should be using for that So in",
    "start": "120640",
    "end": "123040"
  },
  {
    "text": "order to facilitate that we need to be",
    "start": "123040",
    "end": "126000"
  },
  {
    "text": "uh supporting incremental adoption of",
    "start": "126000",
    "end": "128080"
  },
  {
    "text": "Swift and that also means",
    "start": "128080",
    "end": "129560"
  },
  {
    "text": "interoperability with many languages and",
    "start": "129560",
    "end": "132160"
  },
  {
    "text": "making it both easy and efficient to do",
    "start": "132160",
    "end": "134520"
  },
  {
    "text": "that My colleague Doug earlier on in the",
    "start": "134520",
    "end": "136959"
  },
  {
    "text": "main track had a talk just about that So",
    "start": "136959",
    "end": "139360"
  },
  {
    "text": "a decade of moving more and more of an",
    "start": "139360",
    "end": "142160"
  },
  {
    "text": "ecosystem into Swift and memory safety",
    "start": "142160",
    "end": "144800"
  },
  {
    "text": "So uh you know that was in the past",
    "start": "144800",
    "end": "146720"
  },
  {
    "text": "already but you can check the video Uh",
    "start": "146720",
    "end": "149280"
  },
  {
    "text": "and where do we care about this uh a",
    "start": "149280",
    "end": "152080"
  },
  {
    "text": "great example is of course servers So",
    "start": "152080",
    "end": "154319"
  },
  {
    "text": "there's a lot of Java services out there",
    "start": "154319",
    "end": "156319"
  },
  {
    "text": "and there's increasing number of native",
    "start": "156319",
    "end": "158560"
  },
  {
    "text": "coding libraries written in Swift and we",
    "start": "158560",
    "end": "160879"
  },
  {
    "text": "would like to be able to call them both",
    "start": "160879",
    "end": "162640"
  },
  {
    "text": "efficiently and nicely Uh the other",
    "start": "162640",
    "end": "165680"
  },
  {
    "text": "situation is that is interesting for",
    "start": "165680",
    "end": "167599"
  },
  {
    "text": "Java and native interop is Android Uh a",
    "start": "167599",
    "end": "170640"
  },
  {
    "text": "common thing that happens is people want",
    "start": "170640",
    "end": "172319"
  },
  {
    "text": "to have a shared library that is the",
    "start": "172319",
    "end": "174239"
  },
  {
    "text": "core of their apps or maybe interesting",
    "start": "174239",
    "end": "176959"
  },
  {
    "text": "algorithms and they want to use it in",
    "start": "176959",
    "end": "178800"
  },
  {
    "text": "the server on their mobile apps and",
    "start": "178800",
    "end": "180879"
  },
  {
    "text": "anywhere really So we think again Swift",
    "start": "180879",
    "end": "183040"
  },
  {
    "text": "is a good language to do",
    "start": "183040",
    "end": "184760"
  },
  {
    "text": "that Uh goals and directions here Uh",
    "start": "184760",
    "end": "188400"
  },
  {
    "text": "there's a small distinction on the di",
    "start": "188400",
    "end": "190560"
  },
  {
    "text": "primarily written in some language where",
    "start": "190560",
    "end": "193599"
  },
  {
    "text": "you can be primarily written in Swift",
    "start": "193599",
    "end": "195440"
  },
  {
    "text": "and maybe you need to call a Java",
    "start": "195440",
    "end": "197040"
  },
  {
    "text": "library and we do support that we have",
    "start": "197040",
    "end": "199200"
  },
  {
    "text": "some swift macros and JNI wrappers and",
    "start": "199200",
    "end": "201599"
  },
  {
    "text": "you can kind of do that but that's not",
    "start": "201599",
    "end": "203599"
  },
  {
    "text": "what this talk is about The second",
    "start": "203599",
    "end": "205920"
  },
  {
    "text": "situation is when you have a primarily",
    "start": "205920",
    "end": "207680"
  },
  {
    "text": "written in Java application and you want",
    "start": "207680",
    "end": "209920"
  },
  {
    "text": "to call into native code as the previous",
    "start": "209920",
    "end": "212879"
  },
  {
    "text": "talk uh gracefully explained with the",
    "start": "212879",
    "end": "215360"
  },
  {
    "text": "new APIs that we just got with FFM So",
    "start": "215360",
    "end": "218720"
  },
  {
    "text": "this is we this is what I will be",
    "start": "218720",
    "end": "220480"
  },
  {
    "text": "talking about today",
    "start": "220480",
    "end": "222959"
  },
  {
    "text": "Um so Java and Swift of course have many",
    "start": "222959",
    "end": "225760"
  },
  {
    "text": "differences but you'll be surprised to",
    "start": "225760",
    "end": "227760"
  },
  {
    "text": "find that they're actually a bit similar",
    "start": "227760",
    "end": "229519"
  },
  {
    "text": "when you when you look deeper Of course",
    "start": "229519",
    "end": "232400"
  },
  {
    "text": "uh Java is all about classes and objects",
    "start": "232400",
    "end": "234400"
  },
  {
    "text": "but it has primitives and Vcala is",
    "start": "234400",
    "end": "236319"
  },
  {
    "text": "bringing value types to the JVM as well",
    "start": "236319",
    "end": "238959"
  },
  {
    "text": "Swift on the other hand has classes but",
    "start": "238959",
    "end": "241120"
  },
  {
    "text": "is very much focused on rich value types",
    "start": "241120",
    "end": "244159"
  },
  {
    "text": "So again something that you know the",
    "start": "244159",
    "end": "246000"
  },
  {
    "text": "slogan of valhalla that codes like a",
    "start": "246000",
    "end": "247920"
  },
  {
    "text": "class works like an int very much",
    "start": "247920",
    "end": "249680"
  },
  {
    "text": "applies to swift value types Uh of",
    "start": "249680",
    "end": "252720"
  },
  {
    "text": "course both are memory managed so we",
    "start": "252720",
    "end": "255360"
  },
  {
    "text": "have a GC here in the JVM and automatic",
    "start": "255360",
    "end": "258320"
  },
  {
    "text": "reference counting So yes there is a",
    "start": "258320",
    "end": "259919"
  },
  {
    "text": "difference but for the most part of a",
    "start": "259919",
    "end": "262800"
  },
  {
    "text": "developer's day is very similar user",
    "start": "262800",
    "end": "265280"
  },
  {
    "text": "experience and generics of course have a",
    "start": "265280",
    "end": "268000"
  },
  {
    "text": "slight difference as well So the JVM has",
    "start": "268000",
    "end": "270000"
  },
  {
    "text": "type type eraser at runtime and swift",
    "start": "270000",
    "end": "272800"
  },
  {
    "text": "has generics but with fully reified",
    "start": "272800",
    "end": "275440"
  },
  {
    "text": "types that will be an interesting thing",
    "start": "275440",
    "end": "277600"
  },
  {
    "text": "to dig into the smaller differences as",
    "start": "277600",
    "end": "279680"
  },
  {
    "text": "well So with errors with values versus",
    "start": "279680",
    "end": "282000"
  },
  {
    "text": "exceptions with stack traces and the",
    "start": "282000",
    "end": "284240"
  },
  {
    "text": "threading model so virtual threads",
    "start": "284240",
    "end": "286560"
  },
  {
    "text": "versus sync and actors are a bit",
    "start": "286560",
    "end": "289120"
  },
  {
    "text": "different but again something we can",
    "start": "289120",
    "end": "291040"
  },
  {
    "text": "work with So a typical application",
    "start": "291040",
    "end": "295440"
  },
  {
    "text": "uh you will have some swift sources that",
    "start": "295440",
    "end": "297759"
  },
  {
    "text": "either are from a library or it's your",
    "start": "297759",
    "end": "299759"
  },
  {
    "text": "swift sources and you will have some",
    "start": "299759",
    "end": "301440"
  },
  {
    "text": "java sources that will want to use this",
    "start": "301440",
    "end": "303520"
  },
  {
    "text": "native code So we will build a dynamic",
    "start": "303520",
    "end": "306560"
  },
  {
    "text": "library depending on the platform you",
    "start": "306560",
    "end": "308320"
  },
  {
    "text": "want to run it on and here's the new",
    "start": "308320",
    "end": "311199"
  },
  {
    "text": "things Uh we will have a tool that will",
    "start": "311199",
    "end": "313840"
  },
  {
    "text": "generate Java sources that will make",
    "start": "313840",
    "end": "316000"
  },
  {
    "text": "calling this native library easy This is",
    "start": "316000",
    "end": "318400"
  },
  {
    "text": "where we will be using the FFM APIs the",
    "start": "318400",
    "end": "320880"
  },
  {
    "text": "foreign function interfaces uh to call",
    "start": "320880",
    "end": "323199"
  },
  {
    "text": "down to this uh dynamic library We will",
    "start": "323199",
    "end": "327360"
  },
  {
    "text": "also have to generate a bit of swift",
    "start": "327360",
    "end": "329199"
  },
  {
    "text": "code which is a bit unfortunate because",
    "start": "329199",
    "end": "331520"
  },
  {
    "text": "with a plain C styler language you",
    "start": "331520",
    "end": "334320"
  },
  {
    "text": "wouldn't need to do that and I will",
    "start": "334320",
    "end": "336000"
  },
  {
    "text": "explain in depth why we why we have to",
    "start": "336000",
    "end": "338320"
  },
  {
    "text": "do this u bridging there at the end of",
    "start": "338320",
    "end": "341120"
  },
  {
    "text": "the day you put it in a jar or you ship",
    "start": "341120",
    "end": "343199"
  },
  {
    "text": "the dynamic library separately and you",
    "start": "343199",
    "end": "345360"
  },
  {
    "text": "can just call these",
    "start": "345360",
    "end": "346759"
  },
  {
    "text": "functions So um we do have a tool that",
    "start": "346759",
    "end": "349759"
  },
  {
    "text": "is called J extract swift The name is",
    "start": "349759",
    "end": "352160"
  },
  {
    "text": "very much inspired by uh the J extract",
    "start": "352160",
    "end": "354560"
  },
  {
    "text": "tool which is uh something from the JDK",
    "start": "354560",
    "end": "356960"
  },
  {
    "text": "that takes C header files and turns it",
    "start": "356960",
    "end": "359440"
  },
  {
    "text": "into these Java wrappers that you can",
    "start": "359440",
    "end": "361840"
  },
  {
    "text": "use to call these C functions So our",
    "start": "361840",
    "end": "364160"
  },
  {
    "text": "tool is very much inspired on that looks",
    "start": "364160",
    "end": "366800"
  },
  {
    "text": "more or less like this where instead of",
    "start": "366800",
    "end": "369680"
  },
  {
    "text": "accepting C header files we take swift",
    "start": "369680",
    "end": "372080"
  },
  {
    "text": "sources and again generate the Java code",
    "start": "372080",
    "end": "374400"
  },
  {
    "text": "that it makes it possible and easy to",
    "start": "374400",
    "end": "376080"
  },
  {
    "text": "call into these native functions The",
    "start": "376080",
    "end": "378560"
  },
  {
    "text": "tool is split up in a few phases There's",
    "start": "378560",
    "end": "380639"
  },
  {
    "text": "an analysis phase So Swift is a very",
    "start": "380639",
    "end": "383039"
  },
  {
    "text": "expressive language with for example you",
    "start": "383039",
    "end": "384960"
  },
  {
    "text": "can have extensions on types located in",
    "start": "384960",
    "end": "387440"
  },
  {
    "text": "other modules or sources So we have to",
    "start": "387440",
    "end": "390160"
  },
  {
    "text": "do a little bit of analysis to figure",
    "start": "390160",
    "end": "391600"
  },
  {
    "text": "out what which type has what which",
    "start": "391600",
    "end": "394440"
  },
  {
    "text": "methods and later on of course versus",
    "start": "394440",
    "end": "397360"
  },
  {
    "text": "the source generation step Uh today we",
    "start": "397360",
    "end": "400240"
  },
  {
    "text": "use the foreign uh for function and",
    "start": "400240",
    "end": "402400"
  },
  {
    "text": "memory APIs Uh we could have a source",
    "start": "402400",
    "end": "405199"
  },
  {
    "text": "generation step that would use the",
    "start": "405199",
    "end": "406560"
  },
  {
    "text": "legacy you know JNI APIs for platforms",
    "start": "406560",
    "end": "409759"
  },
  {
    "text": "that just don't have FFM yet And we do",
    "start": "409759",
    "end": "413360"
  },
  {
    "text": "generate these swift funks as well Uh so",
    "start": "413360",
    "end": "416960"
  },
  {
    "text": "how does it look like when we extract",
    "start": "416960",
    "end": "418560"
  },
  {
    "text": "some source um let's say we want to",
    "start": "418560",
    "end": "420960"
  },
  {
    "text": "extract a swift class A swift class is",
    "start": "420960",
    "end": "423840"
  },
  {
    "text": "imported as this wrapper type and we",
    "start": "423840",
    "end": "426240"
  },
  {
    "text": "implement the swift heap object We use",
    "start": "426240",
    "end": "428240"
  },
  {
    "text": "this primarily to know that aha this",
    "start": "428240",
    "end": "430240"
  },
  {
    "text": "object has to be reference counted",
    "start": "430240",
    "end": "431919"
  },
  {
    "text": "because we will try to do the right",
    "start": "431919",
    "end": "433680"
  },
  {
    "text": "thing on the Java side as well as we",
    "start": "433680",
    "end": "435440"
  },
  {
    "text": "import these types When we extract a",
    "start": "435440",
    "end": "438400"
  },
  {
    "text": "strct uh we implement the swift value",
    "start": "438400",
    "end": "441120"
  },
  {
    "text": "which again is a signal for us that okay",
    "start": "441120",
    "end": "442960"
  },
  {
    "text": "we will be copying this swift value",
    "start": "442960",
    "end": "445039"
  },
  {
    "text": "around rather than reference counting",
    "start": "445039",
    "end": "447319"
  },
  {
    "text": "it Next we will be uh generating all of",
    "start": "447319",
    "end": "450240"
  },
  {
    "text": "this these uh foreign foreign function",
    "start": "450240",
    "end": "452960"
  },
  {
    "text": "descriptors the previous talk uh very",
    "start": "452960",
    "end": "455759"
  },
  {
    "text": "much explained So we generate those so",
    "start": "455759",
    "end": "458080"
  },
  {
    "text": "you don't have to write you know the",
    "start": "458080",
    "end": "459599"
  },
  {
    "text": "function signatures by your h by hand",
    "start": "459599",
    "end": "462000"
  },
  {
    "text": "and we finally generate the actual",
    "start": "462000",
    "end": "464560"
  },
  {
    "text": "methods that Java developers will call",
    "start": "464560",
    "end": "466960"
  },
  {
    "text": "which kind of mirror the native shapes",
    "start": "466960",
    "end": "469360"
  },
  {
    "text": "of the methods we'll be calling Uh an",
    "start": "469360",
    "end": "471840"
  },
  {
    "text": "interesting thing here is at the bottom",
    "start": "471840",
    "end": "473520"
  },
  {
    "text": "one you can see that uh these types can",
    "start": "473520",
    "end": "477120"
  },
  {
    "text": "have other imported types So I'm passing",
    "start": "477120",
    "end": "480000"
  },
  {
    "text": "a my swift strct in the Java side of",
    "start": "480000",
    "end": "482960"
  },
  {
    "text": "things And yes this will be wrapping a",
    "start": "482960",
    "end": "485199"
  },
  {
    "text": "swift strct and we can",
    "start": "485199",
    "end": "488280"
  },
  {
    "text": "just call a collection of swift",
    "start": "488280",
    "end": "490720"
  },
  {
    "text": "libraries without doing like weird",
    "start": "490720",
    "end": "492479"
  },
  {
    "text": "dances We can just use them all and it",
    "start": "492479",
    "end": "494560"
  },
  {
    "text": "all fits",
    "start": "494560",
    "end": "495960"
  },
  {
    "text": "together So uh I did say that we're",
    "start": "495960",
    "end": "498960"
  },
  {
    "text": "using swift sources I feel that I have",
    "start": "498960",
    "end": "501039"
  },
  {
    "text": "to explain that uh for swift it is",
    "start": "501039",
    "end": "504080"
  },
  {
    "text": "typical to use uh swift sources as",
    "start": "504080",
    "end": "506400"
  },
  {
    "text": "package distribution mechanism So when",
    "start": "506400",
    "end": "508400"
  },
  {
    "text": "you publish a package it's a git",
    "start": "508400",
    "end": "510080"
  },
  {
    "text": "repository you get the sources So we",
    "start": "510080",
    "end": "512080"
  },
  {
    "text": "always have the sources available Um but",
    "start": "512080",
    "end": "514399"
  },
  {
    "text": "if you don't have the sources available",
    "start": "514399",
    "end": "516240"
  },
  {
    "text": "for example you're using an operating",
    "start": "516240",
    "end": "517839"
  },
  {
    "text": "system provided library or just closed",
    "start": "517839",
    "end": "519839"
  },
  {
    "text": "source code uh the same tool will",
    "start": "519839",
    "end": "522320"
  },
  {
    "text": "actually work the same way because Swift",
    "start": "522320",
    "end": "524240"
  },
  {
    "text": "does have something alike header files",
    "start": "524240",
    "end": "526880"
  },
  {
    "text": "which is the Swift interface files which",
    "start": "526880",
    "end": "529200"
  },
  {
    "text": "are basically like Swift source files",
    "start": "529200",
    "end": "531040"
  },
  {
    "text": "but except having actual bodies of in",
    "start": "531040",
    "end": "534000"
  },
  {
    "text": "and implementations It's just cut out",
    "start": "534000",
    "end": "536240"
  },
  {
    "text": "without the bodies uh so the same tool",
    "start": "536240",
    "end": "538640"
  },
  {
    "text": "works the same way with uh closed source",
    "start": "538640",
    "end": "540800"
  },
  {
    "text": "or you know operating system provided",
    "start": "540800",
    "end": "543200"
  },
  {
    "text": "libraries like this okay let's dive in",
    "start": "543200",
    "end": "546720"
  },
  {
    "text": "and we will start from an interesting",
    "start": "546720",
    "end": "548480"
  },
  {
    "text": "point which is initializers because they",
    "start": "548480",
    "end": "551360"
  },
  {
    "text": "will lead us to some interesting",
    "start": "551360",
    "end": "553120"
  },
  {
    "text": "discoveries I want to talk about",
    "start": "553120",
    "end": "555160"
  },
  {
    "text": "today so let's say I want to extract uh",
    "start": "555160",
    "end": "558560"
  },
  {
    "text": "from this swift source file so it's an",
    "start": "558560",
    "end": "560959"
  },
  {
    "text": "initializer takes a length and it takes",
    "start": "560959",
    "end": "562959"
  },
  {
    "text": "a capacity the capacity is another value",
    "start": "562959",
    "end": "565440"
  },
  {
    "text": "type and I want import that into",
    "start": "565440",
    "end": "568760"
  },
  {
    "text": "Java Uh so of course we generate the",
    "start": "568760",
    "end": "571440"
  },
  {
    "text": "function descriptor as you can see here",
    "start": "571440",
    "end": "573519"
  },
  {
    "text": "It will return a swift pointer which is",
    "start": "573519",
    "end": "576320"
  },
  {
    "text": "you know the initialized object and we",
    "start": "576320",
    "end": "579200"
  },
  {
    "text": "accept the length and we accept the",
    "start": "579200",
    "end": "581040"
  },
  {
    "text": "capacity The capacity is a pointer to",
    "start": "581040",
    "end": "583279"
  },
  {
    "text": "that strct and oh wait what's that um we",
    "start": "583279",
    "end": "586880"
  },
  {
    "text": "didn't see that in the swift signature",
    "start": "586880",
    "end": "589040"
  },
  {
    "text": "It's another parameter here that is the",
    "start": "589040",
    "end": "591600"
  },
  {
    "text": "swift type So somehow we will have to",
    "start": "591600",
    "end": "594720"
  },
  {
    "text": "find out um you know at runtime the",
    "start": "594720",
    "end": "598480"
  },
  {
    "text": "swift type metadata that we have to pass",
    "start": "598480",
    "end": "600560"
  },
  {
    "text": "to this native function initi native",
    "start": "600560",
    "end": "603480"
  },
  {
    "text": "initializer to be able to call it So how",
    "start": "603480",
    "end": "606560"
  },
  {
    "text": "can we find",
    "start": "606560",
    "end": "607640"
  },
  {
    "text": "that uh luckily you we can just ask",
    "start": "607640",
    "end": "611360"
  },
  {
    "text": "swift to give us the the type So on the",
    "start": "611360",
    "end": "614000"
  },
  {
    "text": "Java side we generate a little call that",
    "start": "614000",
    "end": "616640"
  },
  {
    "text": "will basically down call into Swift",
    "start": "616640",
    "end": "618560"
  },
  {
    "text": "using a well-known function name And on",
    "start": "618560",
    "end": "620959"
  },
  {
    "text": "the Swift side it's very simple in",
    "start": "620959",
    "end": "623440"
  },
  {
    "text": "because we just write the type and we",
    "start": "623440",
    "end": "626000"
  },
  {
    "text": "just return it Uh I'll talk about the",
    "start": "626000",
    "end": "628480"
  },
  {
    "text": "details of these functions a bit later",
    "start": "628480",
    "end": "630240"
  },
  {
    "text": "but basically I'm just returning the",
    "start": "630240",
    "end": "632640"
  },
  {
    "text": "value out of Swift back into Java Um and",
    "start": "632640",
    "end": "636000"
  },
  {
    "text": "this should feel familiar because on the",
    "start": "636000",
    "end": "637839"
  },
  {
    "text": "JVM we have class objects and the type",
    "start": "637839",
    "end": "640560"
  },
  {
    "text": "metadata is exactly that It's the",
    "start": "640560",
    "end": "642079"
  },
  {
    "text": "equivalent of a class object It",
    "start": "642079",
    "end": "643680"
  },
  {
    "text": "describes hey this type is this and that",
    "start": "643680",
    "end": "646720"
  },
  {
    "text": "uh the type is immortal so I don't have",
    "start": "646720",
    "end": "648480"
  },
  {
    "text": "to worry about like retaining it or",
    "start": "648480",
    "end": "650160"
  },
  {
    "text": "anything like that I can just return it",
    "start": "650160",
    "end": "651760"
  },
  {
    "text": "like that That's fine We then store that",
    "start": "651760",
    "end": "654720"
  },
  {
    "text": "on the Java side and we're ready to call",
    "start": "654720",
    "end": "656560"
  },
  {
    "text": "initializers directly Very cool So this",
    "start": "656560",
    "end": "659519"
  },
  {
    "text": "way I can literally do a down call and I",
    "start": "659519",
    "end": "663040"
  },
  {
    "text": "get back a Swift instance that I now",
    "start": "663040",
    "end": "665360"
  },
  {
    "text": "have a reference to in the Java site",
    "start": "665360",
    "end": "668839"
  },
  {
    "text": "Um what about value types which is where",
    "start": "668839",
    "end": "672560"
  },
  {
    "text": "I think we'll spend most of the talk",
    "start": "672560",
    "end": "674399"
  },
  {
    "text": "because they're more interesting Um",
    "start": "674399",
    "end": "677279"
  },
  {
    "text": "value types are interesting because of",
    "start": "677279",
    "end": "678959"
  },
  {
    "text": "course on the Swift side they will be",
    "start": "678959",
    "end": "680640"
  },
  {
    "text": "stack allocated That's the reason you",
    "start": "680640",
    "end": "682240"
  },
  {
    "text": "want to have value types They can be",
    "start": "682240",
    "end": "683760"
  },
  {
    "text": "stack allocated and they're nicer and",
    "start": "683760",
    "end": "685600"
  },
  {
    "text": "efficient to pass around So if we were",
    "start": "685600",
    "end": "688160"
  },
  {
    "text": "to just return the same way as we did",
    "start": "688160",
    "end": "690320"
  },
  {
    "text": "with the class point to that it would be",
    "start": "690320",
    "end": "692320"
  },
  {
    "text": "pointing to the stack which you know",
    "start": "692320",
    "end": "694640"
  },
  {
    "text": "could very easily be not valid anymore",
    "start": "694640",
    "end": "697279"
  },
  {
    "text": "as I use it in Java So instead what we",
    "start": "697279",
    "end": "700399"
  },
  {
    "text": "do is we create a small allocation of",
    "start": "700399",
    "end": "703360"
  },
  {
    "text": "the exact right size that the swift",
    "start": "703360",
    "end": "705600"
  },
  {
    "text": "initializer will fill in with the data",
    "start": "705600",
    "end": "707839"
  },
  {
    "text": "of the strct Now the question becomes",
    "start": "707839",
    "end": "710880"
  },
  {
    "text": "well I don't know the size of the strct",
    "start": "710880",
    "end": "712800"
  },
  {
    "text": "in Java How do I find out we have an",
    "start": "712800",
    "end": "716000"
  },
  {
    "text": "analysis phase So maybe I can do that",
    "start": "716000",
    "end": "718880"
  },
  {
    "text": "Maybe I can use the analysis to just do",
    "start": "718880",
    "end": "721760"
  },
  {
    "text": "the math and figure out the size of the",
    "start": "721760",
    "end": "723680"
  },
  {
    "text": "strct We can do that You know that's an",
    "start": "723680",
    "end": "726480"
  },
  {
    "text": "integer that's uh two eight bytes Then",
    "start": "726480",
    "end": "729680"
  },
  {
    "text": "okay I know that my Swift class is is a",
    "start": "729680",
    "end": "732160"
  },
  {
    "text": "class that's a pointer again eight bytes",
    "start": "732160",
    "end": "734639"
  },
  {
    "text": "And then it's a strct I have to look at",
    "start": "734639",
    "end": "737120"
  },
  {
    "text": "that strct and recursively keep",
    "start": "737120",
    "end": "739519"
  },
  {
    "text": "descending to figure out the size of",
    "start": "739519",
    "end": "741279"
  },
  {
    "text": "that And eventually I can find that out",
    "start": "741279",
    "end": "743440"
  },
  {
    "text": "Cool",
    "start": "743440",
    "end": "744880"
  },
  {
    "text": "Um I could also ask the Swift runtime to",
    "start": "744880",
    "end": "747360"
  },
  {
    "text": "just tell me So the Swift runtime u the",
    "start": "747360",
    "end": "749760"
  },
  {
    "text": "Swift a there's a Swift API called",
    "start": "749760",
    "end": "751680"
  },
  {
    "text": "memory layout You can give it a type and",
    "start": "751680",
    "end": "753680"
  },
  {
    "text": "ask these kinds of questions So you get",
    "start": "753680",
    "end": "755279"
  },
  {
    "text": "the size the stride The stride is just",
    "start": "755279",
    "end": "758000"
  },
  {
    "text": "the size plus any necessary padding to",
    "start": "758000",
    "end": "760399"
  },
  {
    "text": "align it properly Uh so we could ask",
    "start": "760399",
    "end": "762959"
  },
  {
    "text": "Swift as well But before we do that I",
    "start": "762959",
    "end": "766880"
  },
  {
    "text": "want to explain why we have to do that",
    "start": "766880",
    "end": "769519"
  },
  {
    "text": "So what is the size of this strct it's",
    "start": "769519",
    "end": "772880"
  },
  {
    "text": "the same strct but now the value and now",
    "start": "772880",
    "end": "776079"
  },
  {
    "text": "the value and object types are generic I",
    "start": "776079",
    "end": "778800"
  },
  {
    "text": "know nothing about them And more",
    "start": "778800",
    "end": "780800"
  },
  {
    "text": "interestingly well they could be",
    "start": "780800",
    "end": "782560"
  },
  {
    "text": "reference types they could be value",
    "start": "782560",
    "end": "784240"
  },
  {
    "text": "types So the size of this strct at",
    "start": "784240",
    "end": "787360"
  },
  {
    "text": "runtime really depends on how exactly it",
    "start": "787360",
    "end": "790399"
  },
  {
    "text": "was used And I don't know by looking at",
    "start": "790399",
    "end": "792880"
  },
  {
    "text": "this type declaration at all So I don't",
    "start": "792880",
    "end": "795519"
  },
  {
    "text": "know how to generate this initializer",
    "start": "795519",
    "end": "798760"
  },
  {
    "text": "So another cool thing about that is you",
    "start": "798760",
    "end": "801920"
  },
  {
    "text": "may know if you've looked at Valhalla",
    "start": "801920",
    "end": "804079"
  },
  {
    "text": "which is we can produce tightly packed",
    "start": "804079",
    "end": "807200"
  },
  {
    "text": "uh you know arrays and other structures",
    "start": "807200",
    "end": "809360"
  },
  {
    "text": "using these uh kinds of mechanisms But",
    "start": "809360",
    "end": "812320"
  },
  {
    "text": "again we have to know the exact type at",
    "start": "812320",
    "end": "814959"
  },
  {
    "text": "runtime at the moment we're trying to",
    "start": "814959",
    "end": "816720"
  },
  {
    "text": "initialize a thing So how could we do",
    "start": "816720",
    "end": "819519"
  },
  {
    "text": "that we already have the type metadata",
    "start": "819519",
    "end": "822240"
  },
  {
    "text": "and okay the type metadata doesn't",
    "start": "822240",
    "end": "824000"
  },
  {
    "text": "actually have this information but we",
    "start": "824000",
    "end": "826079"
  },
  {
    "text": "can calculate a simple offset and jump",
    "start": "826079",
    "end": "828000"
  },
  {
    "text": "to something called the value witness",
    "start": "828000",
    "end": "830160"
  },
  {
    "text": "table So the value witness table is",
    "start": "830160",
    "end": "832959"
  },
  {
    "text": "something that contains uh a lot of",
    "start": "832959",
    "end": "835120"
  },
  {
    "text": "interesting both functions and values",
    "start": "835120",
    "end": "837920"
  },
  {
    "text": "that we'll be using to work with value",
    "start": "837920",
    "end": "839600"
  },
  {
    "text": "types specifically how to initialize how",
    "start": "839600",
    "end": "842800"
  },
  {
    "text": "to copy how to destroy these values and",
    "start": "842800",
    "end": "845600"
  },
  {
    "text": "oh great we have the size and all the",
    "start": "845600",
    "end": "848240"
  },
  {
    "text": "data we need to uh do our initial",
    "start": "848240",
    "end": "851360"
  },
  {
    "text": "allocation for how can I use that so",
    "start": "851360",
    "end": "854720"
  },
  {
    "text": "that is actually a crruct so I can just",
    "start": "854720",
    "end": "857839"
  },
  {
    "text": "describe it using the memory layout",
    "start": "857839",
    "end": "859600"
  },
  {
    "text": "strct layout I literally just lay out",
    "start": "859600",
    "end": "861760"
  },
  {
    "text": "okay this is this field this is that",
    "start": "861760",
    "end": "863360"
  },
  {
    "text": "field I know this is an integer this",
    "start": "863360",
    "end": "865279"
  },
  {
    "text": "user addresses and as I'm done with that",
    "start": "865279",
    "end": "867839"
  },
  {
    "text": "I can get a var handle at the",
    "start": "867839",
    "end": "870160"
  },
  {
    "text": "appropriate offset for a given value",
    "start": "870160",
    "end": "872800"
  },
  {
    "text": "witness table uh because I have that I",
    "start": "872800",
    "end": "876720"
  },
  {
    "text": "can get the size of any uh swift",
    "start": "876720",
    "end": "879360"
  },
  {
    "text": "metadata swift type metadata that I",
    "start": "879360",
    "end": "882279"
  },
  {
    "text": "pass so now we're able to not only just",
    "start": "882279",
    "end": "885760"
  },
  {
    "text": "get oh I got the size we can go a bit",
    "start": "885760",
    "end": "888160"
  },
  {
    "text": "nicer and get the entire memory ary",
    "start": "888160",
    "end": "890079"
  },
  {
    "text": "layout description based on this",
    "start": "890079",
    "end": "891800"
  },
  {
    "text": "information So I get the size str or I",
    "start": "891800",
    "end": "894320"
  },
  {
    "text": "calculate the padding and I can return a",
    "start": "894320",
    "end": "896639"
  },
  {
    "text": "strct layout that you know it has the",
    "start": "896639",
    "end": "899120"
  },
  {
    "text": "proper name that describes the swift",
    "start": "899120",
    "end": "901360"
  },
  {
    "text": "type name and well today at least it's",
    "start": "901360",
    "end": "904399"
  },
  {
    "text": "going to look a little bit like this",
    "start": "904399",
    "end": "906240"
  },
  {
    "text": "from the JVM's perspective it's you know",
    "start": "906240",
    "end": "908720"
  },
  {
    "text": "native uh memory layout and it's a blob",
    "start": "908720",
    "end": "912160"
  },
  {
    "text": "At least it's the right size of blob So",
    "start": "912160",
    "end": "914320"
  },
  {
    "text": "we're happy because we can initialize",
    "start": "914320",
    "end": "916079"
  },
  {
    "text": "and copy it using the value witness",
    "start": "916079",
    "end": "917800"
  },
  {
    "text": "functions But maybe we could do that a",
    "start": "917800",
    "end": "921120"
  },
  {
    "text": "little bit better in the future Today we",
    "start": "921120",
    "end": "922720"
  },
  {
    "text": "don't have that metadata uh we could do",
    "start": "922720",
    "end": "924800"
  },
  {
    "text": "that and then we could describe exactly",
    "start": "924800",
    "end": "926959"
  },
  {
    "text": "oh I know this is an int and this is an",
    "start": "926959",
    "end": "928959"
  },
  {
    "text": "int and we could do the absolutely",
    "start": "928959",
    "end": "931199"
  },
  {
    "text": "correct metadata and then even do direct",
    "start": "931199",
    "end": "933600"
  },
  {
    "text": "accesses to the offsets rather than",
    "start": "933600",
    "end": "935519"
  },
  {
    "text": "going to uh rather than doing down calls",
    "start": "935519",
    "end": "939920"
  },
  {
    "text": "Okay so we can check that if I got that",
    "start": "939920",
    "end": "941839"
  },
  {
    "text": "right I can implement the initializer",
    "start": "941839",
    "end": "943600"
  },
  {
    "text": "for the value type I talked before",
    "start": "943600",
    "end": "945360"
  },
  {
    "text": "because I just pass the value uh layout",
    "start": "945360",
    "end": "948480"
  },
  {
    "text": "as we do the arena allocation and then",
    "start": "948480",
    "end": "950320"
  },
  {
    "text": "we initialize that using the initializer",
    "start": "950320",
    "end": "952720"
  },
  {
    "text": "As you can see uh we can just print that",
    "start": "952720",
    "end": "954959"
  },
  {
    "text": "on the Java side and it always has the",
    "start": "954959",
    "end": "956720"
  },
  {
    "text": "right uh amount of bytes we need to uh",
    "start": "956720",
    "end": "959680"
  },
  {
    "text": "be passing around It's really cool We",
    "start": "959680",
    "end": "962000"
  },
  {
    "text": "just taught Java to understand the",
    "start": "962000",
    "end": "963839"
  },
  {
    "text": "layouts of native Swift objects",
    "start": "963839",
    "end": "967120"
  },
  {
    "text": "Now let's actually call some methods on",
    "start": "967120",
    "end": "968959"
  },
  {
    "text": "things and this will be also interesting",
    "start": "968959",
    "end": "971839"
  },
  {
    "text": "Uh let's have a again my strct and I",
    "start": "971839",
    "end": "975120"
  },
  {
    "text": "want to call a method called capacity on",
    "start": "975120",
    "end": "977199"
  },
  {
    "text": "it Uh capacity is another value type So",
    "start": "977199",
    "end": "981680"
  },
  {
    "text": "first thing first I describe the",
    "start": "981680",
    "end": "983680"
  },
  {
    "text": "function The function is a member",
    "start": "983680",
    "end": "985680"
  },
  {
    "text": "function So we need to pass the this",
    "start": "985680",
    "end": "988160"
  },
  {
    "text": "self as we call it in Swift Let's say I",
    "start": "988160",
    "end": "990560"
  },
  {
    "text": "pass it as the first parameter here And",
    "start": "990560",
    "end": "992800"
  },
  {
    "text": "then we describe the rest of the",
    "start": "992800",
    "end": "994240"
  },
  {
    "text": "function It's going to return again",
    "start": "994240",
    "end": "995920"
  },
  {
    "text": "indirectly because it's a value type as",
    "start": "995920",
    "end": "998320"
  },
  {
    "text": "we talked before in initializers I do",
    "start": "998320",
    "end": "1000880"
  },
  {
    "text": "the dance with getting the value layout",
    "start": "1000880",
    "end": "1002959"
  },
  {
    "text": "allocate that do the down call and as I",
    "start": "1002959",
    "end": "1005600"
  },
  {
    "text": "return I wrap it again with the",
    "start": "1005600",
    "end": "1007040"
  },
  {
    "text": "appropriate wrapper",
    "start": "1007040",
    "end": "1008920"
  },
  {
    "text": "type Now how do I make this call uh as",
    "start": "1008920",
    "end": "1013519"
  },
  {
    "text": "as any other non C language would today",
    "start": "1013519",
    "end": "1016000"
  },
  {
    "text": "which is I have to generate a small funk",
    "start": "1016000",
    "end": "1018320"
  },
  {
    "text": "that will be calling using the C calling",
    "start": "1018320",
    "end": "1020320"
  },
  {
    "text": "convention and we make sure using the C",
    "start": "1020320",
    "end": "1022959"
  },
  {
    "text": "decal attribute on on the swift side",
    "start": "1022959",
    "end": "1025280"
  },
  {
    "text": "that okay this has to use the C calling",
    "start": "1025280",
    "end": "1027520"
  },
  {
    "text": "convention and you know don't use",
    "start": "1027520",
    "end": "1029199"
  },
  {
    "text": "features that C wouldn't understand like",
    "start": "1029199",
    "end": "1031038"
  },
  {
    "text": "generics and you know other things that",
    "start": "1031039",
    "end": "1033199"
  },
  {
    "text": "Swift has uh this fun this function",
    "start": "1033199",
    "end": "1035760"
  },
  {
    "text": "doesn't really do much except cast the",
    "start": "1035760",
    "end": "1038079"
  },
  {
    "text": "things to the appropriate types and down",
    "start": "1038079",
    "end": "1040319"
  },
  {
    "text": "call into the actual swift function",
    "start": "1040319",
    "end": "1042798"
  },
  {
    "text": "using the swift convention because it's",
    "start": "1042799",
    "end": "1044480"
  },
  {
    "text": "swift calling swift now in an ideal",
    "start": "1044480",
    "end": "1047600"
  },
  {
    "text": "world we wouldn't do any of that and",
    "start": "1047600",
    "end": "1049760"
  },
  {
    "text": "just call directly right this",
    "start": "1049760",
    "end": "1051679"
  },
  {
    "text": "indirection costs us both build",
    "start": "1051679",
    "end": "1053679"
  },
  {
    "text": "complexity I have to generate these",
    "start": "1053679",
    "end": "1055280"
  },
  {
    "text": "these things build times I have to",
    "start": "1055280",
    "end": "1057520"
  },
  {
    "text": "compile them and of course performance",
    "start": "1057520",
    "end": "1059600"
  },
  {
    "text": "because there's yet another indirection",
    "start": "1059600",
    "end": "1061200"
  },
  {
    "text": "in the way so it would be cool if we",
    "start": "1061200",
    "end": "1063440"
  },
  {
    "text": "could call directly",
    "start": "1063440",
    "end": "1065280"
  },
  {
    "text": "Um and you know maybe to explain even",
    "start": "1065280",
    "end": "1068080"
  },
  {
    "text": "more so why do we even need this",
    "start": "1068080",
    "end": "1070360"
  },
  {
    "text": "indirection well uh Swift actually has",
    "start": "1070360",
    "end": "1072960"
  },
  {
    "text": "its own calling convention and that's",
    "start": "1072960",
    "end": "1074720"
  },
  {
    "text": "because it's you know optimized to",
    "start": "1074720",
    "end": "1077120"
  },
  {
    "text": "patterns and invocation uh invocations",
    "start": "1077120",
    "end": "1080080"
  },
  {
    "text": "that it often does and one of those",
    "start": "1080080",
    "end": "1082480"
  },
  {
    "text": "optimizations in this API is that self",
    "start": "1082480",
    "end": "1085200"
  },
  {
    "text": "must be passed in a register So it's not",
    "start": "1085200",
    "end": "1087280"
  },
  {
    "text": "like passed in a parameter it must be",
    "start": "1087280",
    "end": "1089760"
  },
  {
    "text": "passed in a register But Swift has a a",
    "start": "1089760",
    "end": "1092720"
  },
  {
    "text": "stable API So we can easily find out",
    "start": "1092720",
    "end": "1095520"
  },
  {
    "text": "where we should be passing it So the API",
    "start": "1095520",
    "end": "1097760"
  },
  {
    "text": "is stable on some platforms It's well",
    "start": "1097760",
    "end": "1099679"
  },
  {
    "text": "described You can check it out here So",
    "start": "1099679",
    "end": "1101600"
  },
  {
    "text": "specifically on ARM this register on x86",
    "start": "1101600",
    "end": "1104880"
  },
  {
    "text": "in this one Cool Um so can we fix the",
    "start": "1104880",
    "end": "1109520"
  },
  {
    "text": "JDK to use the Swift calling convention",
    "start": "1109520",
    "end": "1112000"
  },
  {
    "text": "so I can get my magical Dreamland",
    "start": "1112000",
    "end": "1113760"
  },
  {
    "text": "version of directly calling uh yes and",
    "start": "1113760",
    "end": "1116400"
  },
  {
    "text": "no I believe the code is very well",
    "start": "1116400",
    "end": "1118559"
  },
  {
    "text": "structured and we have an opportunity to",
    "start": "1118559",
    "end": "1120400"
  },
  {
    "text": "do that Uh it would be here in the",
    "start": "1120400",
    "end": "1122240"
  },
  {
    "text": "caller ranger of a specific platform or",
    "start": "1122240",
    "end": "1124960"
  },
  {
    "text": "maybe the uh calling sequence builder",
    "start": "1124960",
    "end": "1126799"
  },
  {
    "text": "which would you know we would maybe tell",
    "start": "1126799",
    "end": "1128559"
  },
  {
    "text": "it hey this parameter is special Uh so",
    "start": "1128559",
    "end": "1131039"
  },
  {
    "text": "that's the good news Uh the bad news is",
    "start": "1131039",
    "end": "1133039"
  },
  {
    "text": "these types are JDK internal So that's",
    "start": "1133039",
    "end": "1135360"
  },
  {
    "text": "not something we did today Uh but it's",
    "start": "1135360",
    "end": "1137679"
  },
  {
    "text": "certainly a possibility and other",
    "start": "1137679",
    "end": "1139840"
  },
  {
    "text": "runtimes like the at runtime in version",
    "start": "1139840",
    "end": "1142480"
  },
  {
    "text": "9 have actually explored that a bit and",
    "start": "1142480",
    "end": "1144320"
  },
  {
    "text": "that's a PR that implements parts of",
    "start": "1144320",
    "end": "1147600"
  },
  {
    "text": "Swift calling convention again to be",
    "start": "1147600",
    "end": "1149840"
  },
  {
    "text": "able to call directly rather than from",
    "start": "1149840",
    "end": "1152320"
  },
  {
    "text": "some C",
    "start": "1152320",
    "end": "1153720"
  },
  {
    "text": "shims and finally a little bit of object",
    "start": "1153720",
    "end": "1156640"
  },
  {
    "text": "lifetime discussion because object",
    "start": "1156640",
    "end": "1159120"
  },
  {
    "text": "lifetimes and memory safety is kind of",
    "start": "1159120",
    "end": "1162000"
  },
  {
    "text": "the core of our goal here right we want",
    "start": "1162000",
    "end": "1164880"
  },
  {
    "text": "to have this integration have it nice",
    "start": "1164880",
    "end": "1166799"
  },
  {
    "text": "and safe so how do we do that but before",
    "start": "1166799",
    "end": "1171039"
  },
  {
    "text": "I say how I need to explain what really",
    "start": "1171039",
    "end": "1174000"
  },
  {
    "text": "destroying a value means in Swiftland",
    "start": "1174000",
    "end": "1176400"
  },
  {
    "text": "because it's actually a a little bit",
    "start": "1176400",
    "end": "1177840"
  },
  {
    "text": "different than on the JVM So again value",
    "start": "1177840",
    "end": "1180799"
  },
  {
    "text": "types I have a value type called",
    "start": "1180799",
    "end": "1182400"
  },
  {
    "text": "container it contains a number cool",
    "start": "1182400",
    "end": "1184799"
  },
  {
    "text": "primitive uh a person and the person is",
    "start": "1184799",
    "end": "1187679"
  },
  {
    "text": "a reference type So if I create this",
    "start": "1187679",
    "end": "1190160"
  },
  {
    "text": "container and then assign n to it",
    "start": "1190160",
    "end": "1192559"
  },
  {
    "text": "because we're a reference count you know",
    "start": "1192559",
    "end": "1194400"
  },
  {
    "text": "the way swift works this will be then uh",
    "start": "1194400",
    "end": "1198240"
  },
  {
    "text": "this will call destroy on this value",
    "start": "1198240",
    "end": "1200320"
  },
  {
    "text": "type from our good friend the value",
    "start": "1200320",
    "end": "1202400"
  },
  {
    "text": "witness table This will then go through",
    "start": "1202400",
    "end": "1204799"
  },
  {
    "text": "all the fields and call destroy on them",
    "start": "1204799",
    "end": "1207039"
  },
  {
    "text": "or if it's a reference type eventually",
    "start": "1207039",
    "end": "1209360"
  },
  {
    "text": "just release",
    "start": "1209360",
    "end": "1211960"
  },
  {
    "text": "a retain count release on it If that",
    "start": "1211960",
    "end": "1215200"
  },
  {
    "text": "hits zero we have to run the D the",
    "start": "1215200",
    "end": "1217880"
  },
  {
    "text": "initializer And we're going to run the D",
    "start": "1217880",
    "end": "1220400"
  },
  {
    "text": "the initializer right now and not at",
    "start": "1220400",
    "end": "1222320"
  },
  {
    "text": "some later point like it would be with",
    "start": "1222320",
    "end": "1224000"
  },
  {
    "text": "finalizers on the JVM So developers",
    "start": "1224000",
    "end": "1226559"
  },
  {
    "text": "expect this to work like this So what do",
    "start": "1226559",
    "end": "1229840"
  },
  {
    "text": "we do to make it work like this um we",
    "start": "1229840",
    "end": "1233520"
  },
  {
    "text": "actually got inspired from the arenas",
    "start": "1233520",
    "end": "1236400"
  },
  {
    "text": "API and we offer something called a",
    "start": "1236400",
    "end": "1239200"
  },
  {
    "text": "swift arena in the you know support",
    "start": "1239200",
    "end": "1241600"
  },
  {
    "text": "library that comes with all of this And",
    "start": "1241600",
    "end": "1243760"
  },
  {
    "text": "yes it's a segment allocator same as",
    "start": "1243760",
    "end": "1245600"
  },
  {
    "text": "arenas in the JDK But we also when we do",
    "start": "1245600",
    "end": "1249039"
  },
  {
    "text": "initializers or return types we register",
    "start": "1249039",
    "end": "1251720"
  },
  {
    "text": "them with the swift",
    "start": "1251720",
    "end": "1254200"
  },
  {
    "text": "arena Now we register them of course to",
    "start": "1254200",
    "end": "1257600"
  },
  {
    "text": "manage the lifetimes So as I have",
    "start": "1257600",
    "end": "1259440"
  },
  {
    "text": "registered for example in a uh swift",
    "start": "1259440",
    "end": "1262320"
  },
  {
    "text": "arena of confine style which is again",
    "start": "1262320",
    "end": "1264640"
  },
  {
    "text": "inspired by the open JDK arena At the",
    "start": "1264640",
    "end": "1267360"
  },
  {
    "text": "end of the scope we will call destroy on",
    "start": "1267360",
    "end": "1269919"
  },
  {
    "text": "all the types that were registered with",
    "start": "1269919",
    "end": "1271520"
  },
  {
    "text": "it Again the destroyer will do the right",
    "start": "1271520",
    "end": "1273760"
  },
  {
    "text": "thing",
    "start": "1273760",
    "end": "1274679"
  },
  {
    "text": "here Uh the same pattern applies for",
    "start": "1274679",
    "end": "1277200"
  },
  {
    "text": "reference types You can just register",
    "start": "1277200",
    "end": "1279120"
  },
  {
    "text": "them create them in the scope and we",
    "start": "1279120",
    "end": "1280559"
  },
  {
    "text": "will just reference count down on them",
    "start": "1280559",
    "end": "1282720"
  },
  {
    "text": "Uh today if we re if we don't reach",
    "start": "1282720",
    "end": "1285600"
  },
  {
    "text": "reference count zero here we assert Uh",
    "start": "1285600",
    "end": "1288320"
  },
  {
    "text": "but I think you could totally see valid",
    "start": "1288320",
    "end": "1291600"
  },
  {
    "text": "use cases for maybe you want to assert",
    "start": "1291600",
    "end": "1293440"
  },
  {
    "text": "if it didn't get released and destroyed",
    "start": "1293440",
    "end": "1295360"
  },
  {
    "text": "at the end of the scope or maybe you do",
    "start": "1295360",
    "end": "1297120"
  },
  {
    "text": "actually want to you know just keep this",
    "start": "1297120",
    "end": "1299360"
  },
  {
    "text": "style for maintaining reference counting",
    "start": "1299360",
    "end": "1302400"
  },
  {
    "text": "So this is something we can do and we",
    "start": "1302400",
    "end": "1305200"
  },
  {
    "text": "also try to guard against uh programmer",
    "start": "1305200",
    "end": "1307760"
  },
  {
    "text": "errors So on the Java side you could",
    "start": "1307760",
    "end": "1310640"
  },
  {
    "text": "make a mistake and unsafeely escape uh",
    "start": "1310640",
    "end": "1313280"
  },
  {
    "text": "the value created during this scope and",
    "start": "1313280",
    "end": "1315760"
  },
  {
    "text": "you try to escape it outside of it So of",
    "start": "1315760",
    "end": "1318000"
  },
  {
    "text": "course after the scope this value would",
    "start": "1318000",
    "end": "1319520"
  },
  {
    "text": "have been destroyed You would be",
    "start": "1319520",
    "end": "1320559"
  },
  {
    "text": "pointing its tail memory So on the Java",
    "start": "1320559",
    "end": "1323120"
  },
  {
    "text": "side as we do the destroys uh we mark",
    "start": "1323120",
    "end": "1325520"
  },
  {
    "text": "them so we don't try to down call into",
    "start": "1325520",
    "end": "1328799"
  },
  {
    "text": "memory that was already",
    "start": "1328799",
    "end": "1330760"
  },
  {
    "text": "deallocated Again all in the name of",
    "start": "1330760",
    "end": "1333039"
  },
  {
    "text": "safety uh so we don't do bad things here",
    "start": "1333039",
    "end": "1337039"
  },
  {
    "text": "Uh we do have an auto arena as well",
    "start": "1337039",
    "end": "1339120"
  },
  {
    "text": "again inspired by the open JDK where we",
    "start": "1339120",
    "end": "1341600"
  },
  {
    "text": "use u phantom references and a cleaner",
    "start": "1341600",
    "end": "1343919"
  },
  {
    "text": "thread to clean up these objects",
    "start": "1343919",
    "end": "1346480"
  },
  {
    "text": "eventually I think it's great for",
    "start": "1346480",
    "end": "1348159"
  },
  {
    "text": "prototyping if you want to show you know",
    "start": "1348159",
    "end": "1350240"
  },
  {
    "text": "either a Java or swift de developer hey",
    "start": "1350240",
    "end": "1352880"
  },
  {
    "text": "please give this a go I think that's a",
    "start": "1352880",
    "end": "1354640"
  },
  {
    "text": "good one to start and there may be other",
    "start": "1354640",
    "end": "1356240"
  },
  {
    "text": "situations where you want to rely just",
    "start": "1356240",
    "end": "1358480"
  },
  {
    "text": "on the GC to release things as well Of",
    "start": "1358480",
    "end": "1360960"
  },
  {
    "text": "course it's less predictable then So for",
    "start": "1360960",
    "end": "1363200"
  },
  {
    "text": "Swift developers this would be a bit uh",
    "start": "1363200",
    "end": "1365840"
  },
  {
    "text": "can be a bit",
    "start": "1365840",
    "end": "1367799"
  },
  {
    "text": "surprising As you can see uh this is a",
    "start": "1367799",
    "end": "1370799"
  },
  {
    "text": "very deep integration We're not just",
    "start": "1370799",
    "end": "1372880"
  },
  {
    "text": "saying hey you can call simple functions",
    "start": "1372880",
    "end": "1375520"
  },
  {
    "text": "No we're shooting for integration of",
    "start": "1375520",
    "end": "1377200"
  },
  {
    "text": "both a programming model and trying to",
    "start": "1377200",
    "end": "1379440"
  },
  {
    "text": "ensure its safety as well as you know",
    "start": "1379440",
    "end": "1382080"
  },
  {
    "text": "making it a pleasant thing to",
    "start": "1382080",
    "end": "1384760"
  },
  {
    "text": "use and with the end goal of being able",
    "start": "1384760",
    "end": "1387520"
  },
  {
    "text": "to import really most if not all Swift",
    "start": "1387520",
    "end": "1389840"
  },
  {
    "text": "code we have laying around Um so if you",
    "start": "1389840",
    "end": "1393280"
  },
  {
    "text": "walk away from this talk I'd like to",
    "start": "1393280",
    "end": "1394799"
  },
  {
    "text": "remember uh I'd like you to remember one",
    "start": "1394799",
    "end": "1397200"
  },
  {
    "text": "thing that our goal is here to have",
    "start": "1397200",
    "end": "1399760"
  },
  {
    "text": "memory safety all the way We don't have",
    "start": "1399760",
    "end": "1401760"
  },
  {
    "text": "to lose memory safety as we cross into",
    "start": "1401760",
    "end": "1403919"
  },
  {
    "text": "native land And if we collaborate from",
    "start": "1403919",
    "end": "1406400"
  },
  {
    "text": "both sides the JVM and the native native",
    "start": "1406400",
    "end": "1409600"
  },
  {
    "text": "language uh you know enforcing each",
    "start": "1409600",
    "end": "1411919"
  },
  {
    "text": "other's patterns then we can pull that",
    "start": "1411919",
    "end": "1414480"
  },
  {
    "text": "off Uh Swift and the FFM APIs really",
    "start": "1414480",
    "end": "1417760"
  },
  {
    "text": "works well together I didn't show like",
    "start": "1417760",
    "end": "1420000"
  },
  {
    "text": "super crazy advanced cases but we can uh",
    "start": "1420000",
    "end": "1422880"
  },
  {
    "text": "integrate them very deeply even with uh",
    "start": "1422880",
    "end": "1425280"
  },
  {
    "text": "you know more generics and use cases I",
    "start": "1425280",
    "end": "1427280"
  },
  {
    "text": "didn't show today And you know value",
    "start": "1427280",
    "end": "1429679"
  },
  {
    "text": "types are the core of Swift and we can",
    "start": "1429679",
    "end": "1432000"
  },
  {
    "text": "actually deal with them pretty well in",
    "start": "1432000",
    "end": "1433600"
  },
  {
    "text": "Java which has been great So there's",
    "start": "1433600",
    "end": "1436080"
  },
  {
    "text": "ongoing work on J extract Swift Uh if",
    "start": "1436080",
    "end": "1438559"
  },
  {
    "text": "you're interested in you know",
    "start": "1438559",
    "end": "1440000"
  },
  {
    "text": "integration between languages like that",
    "start": "1440000",
    "end": "1442080"
  },
  {
    "text": "please let us know Uh and what are the",
    "start": "1442080",
    "end": "1445520"
  },
  {
    "text": "like upcoming next steps we can uh look",
    "start": "1445520",
    "end": "1447679"
  },
  {
    "text": "into of course performance If you're",
    "start": "1447679",
    "end": "1449440"
  },
  {
    "text": "interested in performance that's a",
    "start": "1449440",
    "end": "1451600"
  },
  {
    "text": "never- ending story here of course Um",
    "start": "1451600",
    "end": "1454320"
  },
  {
    "text": "we're we'd like to challenge a little",
    "start": "1454320",
    "end": "1456400"
  },
  {
    "text": "bit of a generics because we want to",
    "start": "1456400",
    "end": "1458400"
  },
  {
    "text": "support optionals and conductions and",
    "start": "1458400",
    "end": "1460640"
  },
  {
    "text": "then we will have to handle generics as",
    "start": "1460640",
    "end": "1462480"
  },
  {
    "text": "well as swift closures and you know",
    "start": "1462480",
    "end": "1465039"
  },
  {
    "text": "passing a closure to a swift function",
    "start": "1465039",
    "end": "1467600"
  },
  {
    "text": "and then calling that on the swift side",
    "start": "1467600",
    "end": "1469679"
  },
  {
    "text": "we can implement using up calls into the",
    "start": "1469679",
    "end": "1471520"
  },
  {
    "text": "JVM as well and you know express swift",
    "start": "1471520",
    "end": "1474080"
  },
  {
    "text": "closures as functional interfaces and",
    "start": "1474080",
    "end": "1477679"
  },
  {
    "text": "you know there's other calling",
    "start": "1477679",
    "end": "1478880"
  },
  {
    "text": "convention uh differences for example",
    "start": "1478880",
    "end": "1481200"
  },
  {
    "text": "for errors or async code And last but",
    "start": "1481200",
    "end": "1484400"
  },
  {
    "text": "not least build build tool integrations",
    "start": "1484400",
    "end": "1487200"
  },
  {
    "text": "So that's all I had If you have",
    "start": "1487200",
    "end": "1489120"
  },
  {
    "text": "questions uh please check me uh outside",
    "start": "1489120",
    "end": "1492000"
  },
  {
    "text": "later on And thank you very much",
    "start": "1492000",
    "end": "1494850"
  },
  {
    "text": "[Applause]",
    "start": "1494850",
    "end": "1498039"
  }
]