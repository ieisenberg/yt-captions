[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "hello everyone",
    "start": "2240",
    "end": "3280"
  },
  {
    "text": "welcome to coop count 2020 and welcome",
    "start": "3280",
    "end": "6560"
  },
  {
    "text": "to the session of multitendon networking",
    "start": "6560",
    "end": "8880"
  },
  {
    "text": "for kubernetes",
    "start": "8880",
    "end": "10559"
  },
  {
    "text": "my name is incheon i'm with virtual",
    "start": "10559",
    "end": "12960"
  },
  {
    "text": "technologies",
    "start": "12960",
    "end": "14400"
  },
  {
    "text": "in this talk today giraffe who is now",
    "start": "14400",
    "end": "17359"
  },
  {
    "text": "with",
    "start": "17359",
    "end": "17680"
  },
  {
    "text": "microsoft he and i will present a",
    "start": "17680",
    "end": "20640"
  },
  {
    "text": "multi-tenant scalable network solution",
    "start": "20640",
    "end": "23199"
  },
  {
    "text": "for kubernetes we hope you will enjoy",
    "start": "23199",
    "end": "26800"
  },
  {
    "text": "the talk",
    "start": "26800",
    "end": "27840"
  },
  {
    "text": "and and the end of the session hopefully",
    "start": "27840",
    "end": "30160"
  },
  {
    "text": "you'll learn something",
    "start": "30160",
    "end": "31519"
  },
  {
    "text": "and interested in contributing to this",
    "start": "31519",
    "end": "33760"
  },
  {
    "text": "project",
    "start": "33760",
    "end": "34559"
  },
  {
    "text": "or building your own network solutions",
    "start": "34559",
    "end": "38879"
  },
  {
    "start": "38000",
    "end": "93000"
  },
  {
    "text": "with that let's get started this is the",
    "start": "38960",
    "end": "42239"
  },
  {
    "text": "agenda for today's talk",
    "start": "42239",
    "end": "44399"
  },
  {
    "text": "i will give a introduction and some",
    "start": "44399",
    "end": "46719"
  },
  {
    "text": "background on the project",
    "start": "46719",
    "end": "48399"
  },
  {
    "text": "why we are doing this and what's the",
    "start": "48399",
    "end": "50399"
  },
  {
    "text": "context",
    "start": "50399",
    "end": "51760"
  },
  {
    "text": "i will also talking about current",
    "start": "51760",
    "end": "53600"
  },
  {
    "text": "network model in kubernetes",
    "start": "53600",
    "end": "55760"
  },
  {
    "text": "and introduce you the high level design",
    "start": "55760",
    "end": "58320"
  },
  {
    "text": "of our new",
    "start": "58320",
    "end": "59280"
  },
  {
    "text": "multi-tenant model for kubernetes",
    "start": "59280",
    "end": "62320"
  },
  {
    "text": "we have a forked version of kubernetes",
    "start": "62320",
    "end": "64640"
  },
  {
    "text": "called actors",
    "start": "64640",
    "end": "66159"
  },
  {
    "text": "you can consider actors as a",
    "start": "66159",
    "end": "68000"
  },
  {
    "text": "multi-tenant",
    "start": "68000",
    "end": "69439"
  },
  {
    "text": "kubernetes i will introduce actors more",
    "start": "69439",
    "end": "72479"
  },
  {
    "text": "in next slides",
    "start": "72479",
    "end": "74640"
  },
  {
    "text": "after that sheriff will give you how",
    "start": "74640",
    "end": "77520"
  },
  {
    "text": "will",
    "start": "77520",
    "end": "77840"
  },
  {
    "text": "implement the multi-tender network model",
    "start": "77840",
    "end": "79840"
  },
  {
    "text": "in kubernetes",
    "start": "79840",
    "end": "81040"
  },
  {
    "text": "and introduce you the misa project misa",
    "start": "81040",
    "end": "84400"
  },
  {
    "text": "is a virtual network solution",
    "start": "84400",
    "end": "86000"
  },
  {
    "text": "that has both control plane and a data",
    "start": "86000",
    "end": "88880"
  },
  {
    "text": "plane",
    "start": "88880",
    "end": "89360"
  },
  {
    "text": "based on the xdp technology",
    "start": "89360",
    "end": "93439"
  },
  {
    "text": "so misa project is a part of an umbrella",
    "start": "94240",
    "end": "97280"
  },
  {
    "text": "project called",
    "start": "97280",
    "end": "98159"
  },
  {
    "text": "centaurus centerra's project includes",
    "start": "98159",
    "end": "101600"
  },
  {
    "text": "two independent projects one is called",
    "start": "101600",
    "end": "104320"
  },
  {
    "text": "actors",
    "start": "104320",
    "end": "104880"
  },
  {
    "text": "one is called visa misa again is what we",
    "start": "104880",
    "end": "108560"
  },
  {
    "text": "discussed today",
    "start": "108560",
    "end": "109520"
  },
  {
    "text": "in this talk however i'd like to briefly",
    "start": "109520",
    "end": "112799"
  },
  {
    "text": "introduce actress project",
    "start": "112799",
    "end": "114320"
  },
  {
    "text": "first so that you understand some of the",
    "start": "114320",
    "end": "117200"
  },
  {
    "text": "contents",
    "start": "117200",
    "end": "118719"
  },
  {
    "text": "as i mentioned earlier actors project is",
    "start": "118719",
    "end": "121759"
  },
  {
    "text": "a",
    "start": "121759",
    "end": "122079"
  },
  {
    "text": "focused version of kubernetes with a",
    "start": "122079",
    "end": "124079"
  },
  {
    "text": "major change in design",
    "start": "124079",
    "end": "126640"
  },
  {
    "text": "there are three goals for actors project",
    "start": "126640",
    "end": "130239"
  },
  {
    "text": "first we want to unify vmware campaign",
    "start": "130239",
    "end": "133120"
  },
  {
    "text": "orchestration",
    "start": "133120",
    "end": "133920"
  },
  {
    "text": "and the runtime for that we explain",
    "start": "133920",
    "end": "136720"
  },
  {
    "text": "product path definition",
    "start": "136720",
    "end": "138480"
  },
  {
    "text": "and then make the runtime agent which is",
    "start": "138480",
    "end": "140640"
  },
  {
    "text": "kubernetes",
    "start": "140640",
    "end": "141760"
  },
  {
    "text": "to be a unified agent that supports both",
    "start": "141760",
    "end": "144319"
  },
  {
    "text": "vm and containers",
    "start": "144319",
    "end": "146720"
  },
  {
    "text": "second we want kubernetes to support",
    "start": "146720",
    "end": "149760"
  },
  {
    "text": "from 50k to 100k nodes in a cluster",
    "start": "149760",
    "end": "154239"
  },
  {
    "text": "for that we have to partition kubernetes",
    "start": "154239",
    "end": "156959"
  },
  {
    "text": "components",
    "start": "156959",
    "end": "157760"
  },
  {
    "text": "such as api server schedulers",
    "start": "157760",
    "end": "160160"
  },
  {
    "text": "controllers and",
    "start": "160160",
    "end": "160959"
  },
  {
    "text": "etcd third we want to build a true",
    "start": "160959",
    "end": "164879"
  },
  {
    "text": "multi-tenant platform so we design a",
    "start": "164879",
    "end": "168239"
  },
  {
    "text": "multi-tenant solution for kubernetes",
    "start": "168239",
    "end": "170720"
  },
  {
    "text": "including a new tendon object",
    "start": "170720",
    "end": "173840"
  },
  {
    "text": "and a new network model so we believe",
    "start": "173840",
    "end": "177360"
  },
  {
    "text": "with",
    "start": "177360",
    "end": "177680"
  },
  {
    "text": "those three goals octos takes",
    "start": "177680",
    "end": "181200"
  },
  {
    "text": "kubernetes to the next level make it a",
    "start": "181200",
    "end": "183680"
  },
  {
    "text": "true",
    "start": "183680",
    "end": "184239"
  },
  {
    "text": "cloud infrastructure platform",
    "start": "184239",
    "end": "187599"
  },
  {
    "start": "187000",
    "end": "241000"
  },
  {
    "text": "so back to the main topic we have today",
    "start": "188480",
    "end": "192000"
  },
  {
    "text": "which is mesa",
    "start": "192000",
    "end": "193519"
  },
  {
    "text": "meteor network solution is trying to",
    "start": "193519",
    "end": "195440"
  },
  {
    "text": "address the following problems",
    "start": "195440",
    "end": "199280"
  },
  {
    "text": "and first we want to provide a virtual",
    "start": "199280",
    "end": "201840"
  },
  {
    "text": "network solution for kubernetes",
    "start": "201840",
    "end": "203760"
  },
  {
    "text": "so that kubernetes apart that from",
    "start": "203760",
    "end": "206400"
  },
  {
    "text": "different tendons",
    "start": "206400",
    "end": "207599"
  },
  {
    "text": "that will reside in a different virtual",
    "start": "207599",
    "end": "210000"
  },
  {
    "text": "network",
    "start": "210000",
    "end": "211519"
  },
  {
    "text": "second we want to address the problem of",
    "start": "211519",
    "end": "214159"
  },
  {
    "text": "fast provisioning",
    "start": "214159",
    "end": "216159"
  },
  {
    "text": "of network resources for parts it's",
    "start": "216159",
    "end": "218799"
  },
  {
    "text": "basically",
    "start": "218799",
    "end": "219519"
  },
  {
    "text": "how to get a pilot ready as quick as",
    "start": "219519",
    "end": "222080"
  },
  {
    "text": "possible",
    "start": "222080",
    "end": "222959"
  },
  {
    "text": "from network perspective third",
    "start": "222959",
    "end": "226000"
  },
  {
    "text": "we want to have a scalable virtual",
    "start": "226000",
    "end": "228319"
  },
  {
    "text": "network solution",
    "start": "228319",
    "end": "229440"
  },
  {
    "text": "to support the networking within a",
    "start": "229440",
    "end": "232159"
  },
  {
    "text": "cluster of",
    "start": "232159",
    "end": "233200"
  },
  {
    "text": "more than 100k hosts and that's the",
    "start": "233200",
    "end": "237040"
  },
  {
    "text": "problems we try to solve from misa",
    "start": "237040",
    "end": "238840"
  },
  {
    "text": "perspective",
    "start": "238840",
    "end": "241840"
  },
  {
    "start": "241000",
    "end": "321000"
  },
  {
    "text": "as most of most of you already know that",
    "start": "242480",
    "end": "245920"
  },
  {
    "text": "current network model for in kubernetes",
    "start": "245920",
    "end": "248319"
  },
  {
    "text": "is a flat model",
    "start": "248319",
    "end": "249599"
  },
  {
    "text": "it's a single address space and they",
    "start": "249599",
    "end": "251840"
  },
  {
    "text": "share the single dnas",
    "start": "251840",
    "end": "253760"
  },
  {
    "text": "and by default every part or containers",
    "start": "253760",
    "end": "256959"
  },
  {
    "text": "can communicate",
    "start": "256959",
    "end": "258239"
  },
  {
    "text": "with every other part of containers in",
    "start": "258239",
    "end": "260560"
  },
  {
    "text": "the clusters",
    "start": "260560",
    "end": "262000"
  },
  {
    "text": "so by default there is no water tendon",
    "start": "262000",
    "end": "264639"
  },
  {
    "text": "for network perspective",
    "start": "264639",
    "end": "267600"
  },
  {
    "text": "kubernetes introduce network policy to",
    "start": "267600",
    "end": "270160"
  },
  {
    "text": "isolate",
    "start": "270160",
    "end": "270880"
  },
  {
    "text": "container apart each other however",
    "start": "270880",
    "end": "274240"
  },
  {
    "text": "network policy is not secure or as not",
    "start": "274240",
    "end": "277440"
  },
  {
    "text": "strong isolated as virtual network can",
    "start": "277440",
    "end": "279759"
  },
  {
    "text": "do",
    "start": "279759",
    "end": "280639"
  },
  {
    "text": "for example network policy does not",
    "start": "280639",
    "end": "283440"
  },
  {
    "text": "prevent",
    "start": "283440",
    "end": "284400"
  },
  {
    "text": "packet sleeping put in somewhere where",
    "start": "284400",
    "end": "287120"
  },
  {
    "text": "the traffic is passing by",
    "start": "287120",
    "end": "288560"
  },
  {
    "text": "and extract the information intensity of",
    "start": "288560",
    "end": "290960"
  },
  {
    "text": "the information or data",
    "start": "290960",
    "end": "292160"
  },
  {
    "text": "out of the packet additionally some of",
    "start": "292160",
    "end": "295280"
  },
  {
    "text": "network policies are implemented based",
    "start": "295280",
    "end": "297840"
  },
  {
    "text": "on unix feature",
    "start": "297840",
    "end": "299520"
  },
  {
    "text": "called net filter which uses ip table",
    "start": "299520",
    "end": "302560"
  },
  {
    "text": "rules",
    "start": "302560",
    "end": "304000"
  },
  {
    "text": "in reality epi table rules could get",
    "start": "304000",
    "end": "306720"
  },
  {
    "text": "huge",
    "start": "306720",
    "end": "307680"
  },
  {
    "text": "and then cause overhead and increased",
    "start": "307680",
    "end": "309840"
  },
  {
    "text": "network of network",
    "start": "309840",
    "end": "311039"
  },
  {
    "text": "latency not a security issue but",
    "start": "311039",
    "end": "314080"
  },
  {
    "text": "is a not desirable solutions we want",
    "start": "314080",
    "end": "319758"
  },
  {
    "start": "321000",
    "end": "403000"
  },
  {
    "text": "so in actors we introduce a network",
    "start": "322560",
    "end": "325759"
  },
  {
    "text": "object",
    "start": "325759",
    "end": "326720"
  },
  {
    "text": "a new crd object that represents a vpc",
    "start": "326720",
    "end": "330400"
  },
  {
    "text": "or subnet each part to be created",
    "start": "330400",
    "end": "333759"
  },
  {
    "text": "has to be associated with a network",
    "start": "333759",
    "end": "335680"
  },
  {
    "text": "object and each never object",
    "start": "335680",
    "end": "338400"
  },
  {
    "text": "has its own ip address space so",
    "start": "338400",
    "end": "341520"
  },
  {
    "text": "paths or containers created in a",
    "start": "341520",
    "end": "343520"
  },
  {
    "text": "different network",
    "start": "343520",
    "end": "345120"
  },
  {
    "text": "are naturally isolated with the network",
    "start": "345120",
    "end": "347520"
  },
  {
    "text": "boundary",
    "start": "347520",
    "end": "348800"
  },
  {
    "text": "as you can see from this diagram under",
    "start": "348800",
    "end": "351919"
  },
  {
    "text": "slice",
    "start": "351919",
    "end": "353360"
  },
  {
    "text": "now within each network you can still",
    "start": "353360",
    "end": "356479"
  },
  {
    "text": "use network policies to manage network",
    "start": "356479",
    "end": "358800"
  },
  {
    "text": "security",
    "start": "358800",
    "end": "360000"
  },
  {
    "text": "within a single attendant",
    "start": "360000",
    "end": "363919"
  },
  {
    "text": "the new navigator objects will introduce",
    "start": "363919",
    "end": "366080"
  },
  {
    "text": "is the abstraction",
    "start": "366080",
    "end": "367440"
  },
  {
    "text": "of network resources but not actual",
    "start": "367440",
    "end": "370479"
  },
  {
    "text": "implementation",
    "start": "370479",
    "end": "372319"
  },
  {
    "text": "someone still needs to actually create",
    "start": "372319",
    "end": "374960"
  },
  {
    "text": "vpcs create a subnet",
    "start": "374960",
    "end": "377120"
  },
  {
    "text": "and manage the api address spaces and",
    "start": "377120",
    "end": "379759"
  },
  {
    "text": "the road network traffic",
    "start": "379759",
    "end": "382000"
  },
  {
    "text": "this is where misa comes into play",
    "start": "382000",
    "end": "385840"
  },
  {
    "text": "misa is one of the network",
    "start": "385840",
    "end": "387600"
  },
  {
    "text": "implementation for multi-tenant network",
    "start": "387600",
    "end": "389919"
  },
  {
    "text": "model",
    "start": "389919",
    "end": "390400"
  },
  {
    "text": "in kubernetes so now i will pass",
    "start": "390400",
    "end": "394160"
  },
  {
    "text": "on to cherev he will present the detail",
    "start": "394160",
    "end": "397840"
  },
  {
    "text": "of",
    "start": "397840",
    "end": "398160"
  },
  {
    "text": "misa design and implementation thank you",
    "start": "398160",
    "end": "403120"
  },
  {
    "start": "403000",
    "end": "503000"
  },
  {
    "text": "hi everyone this is sharif i led the",
    "start": "403840",
    "end": "407120"
  },
  {
    "text": "development of the mizar project",
    "start": "407120",
    "end": "408880"
  },
  {
    "text": "and i am now a software engineer with",
    "start": "408880",
    "end": "410479"
  },
  {
    "text": "microsoft",
    "start": "410479",
    "end": "412319"
  },
  {
    "text": "we built mizor from the ground up to",
    "start": "412319",
    "end": "414720"
  },
  {
    "text": "accelerate pulse network provisioning at",
    "start": "414720",
    "end": "416880"
  },
  {
    "text": "scale",
    "start": "416880",
    "end": "418400"
  },
  {
    "text": "actually to rethink cloud networking in",
    "start": "418400",
    "end": "421440"
  },
  {
    "text": "missouri",
    "start": "421440",
    "end": "422080"
  },
  {
    "text": "all together to build it in the exact",
    "start": "422080",
    "end": "425280"
  },
  {
    "text": "same way",
    "start": "425280",
    "end": "426080"
  },
  {
    "text": "as we build distributed systems in the",
    "start": "426080",
    "end": "428240"
  },
  {
    "text": "cloud to make cloud networks simple to",
    "start": "428240",
    "end": "430639"
  },
  {
    "text": "understand",
    "start": "430639",
    "end": "431440"
  },
  {
    "text": "and simpler to operate in the rest of",
    "start": "431440",
    "end": "434960"
  },
  {
    "text": "this talk",
    "start": "434960",
    "end": "436000"
  },
  {
    "text": "i will walk you through our thought",
    "start": "436000",
    "end": "437680"
  },
  {
    "text": "process and how mazar works",
    "start": "437680",
    "end": "440240"
  },
  {
    "text": "from a high level missouri consists of a",
    "start": "440240",
    "end": "442720"
  },
  {
    "text": "crd operators",
    "start": "442720",
    "end": "444000"
  },
  {
    "text": "a demon and a cni the operators the",
    "start": "444000",
    "end": "447199"
  },
  {
    "text": "demon",
    "start": "447199",
    "end": "447680"
  },
  {
    "text": "and the cni are mazar's management plan",
    "start": "447680",
    "end": "450319"
  },
  {
    "text": "components",
    "start": "450319",
    "end": "452319"
  },
  {
    "text": "the demon exposes a grpc interface for",
    "start": "452319",
    "end": "455520"
  },
  {
    "text": "the operator",
    "start": "455520",
    "end": "456319"
  },
  {
    "text": "and the c9 we eliminate any api from the",
    "start": "456319",
    "end": "460000"
  },
  {
    "text": "worker nodes to the api server",
    "start": "460000",
    "end": "462639"
  },
  {
    "text": "this prevents operators failures to",
    "start": "462639",
    "end": "464960"
  },
  {
    "text": "amplify",
    "start": "464960",
    "end": "465840"
  },
  {
    "text": "as we add more workers to the cluster",
    "start": "465840",
    "end": "469919"
  },
  {
    "text": "on the met on the data plan side mizar",
    "start": "471199",
    "end": "473840"
  },
  {
    "text": "consists of a set of multiple",
    "start": "473840",
    "end": "475520"
  },
  {
    "text": "xdp programs the processed nodes packets",
    "start": "475520",
    "end": "478639"
  },
  {
    "text": "i will detail exactly how the xdb",
    "start": "478639",
    "end": "481039"
  },
  {
    "text": "program processes the packets later",
    "start": "481039",
    "end": "484080"
  },
  {
    "text": "in this architecture we rethink the data",
    "start": "484080",
    "end": "486479"
  },
  {
    "text": "plan programming model",
    "start": "486479",
    "end": "488080"
  },
  {
    "text": "to scale the management plan accelerate",
    "start": "488080",
    "end": "490560"
  },
  {
    "text": "pub provisioning",
    "start": "490560",
    "end": "491759"
  },
  {
    "text": "and develop customized logic for network",
    "start": "491759",
    "end": "493840"
  },
  {
    "text": "services",
    "start": "493840",
    "end": "495039"
  },
  {
    "text": "as a result in mazar enables scalable",
    "start": "495039",
    "end": "498479"
  },
  {
    "text": "and multi-tenant",
    "start": "498479",
    "end": "500560"
  },
  {
    "text": "kubernetes networking",
    "start": "500560",
    "end": "503840"
  },
  {
    "start": "503000",
    "end": "576000"
  },
  {
    "text": "before i detail how misar works i would",
    "start": "504400",
    "end": "506879"
  },
  {
    "text": "like to discuss the limitations of",
    "start": "506879",
    "end": "508479"
  },
  {
    "text": "flow-based network programming",
    "start": "508479",
    "end": "511039"
  },
  {
    "text": "load-based network programming is the de",
    "start": "511039",
    "end": "513039"
  },
  {
    "text": "facto programming model",
    "start": "513039",
    "end": "514479"
  },
  {
    "text": "in virtual switches including open",
    "start": "514479",
    "end": "516320"
  },
  {
    "text": "v-switch",
    "start": "516320",
    "end": "517839"
  },
  {
    "text": "i will take ovn and ovs as an example",
    "start": "517839",
    "end": "521680"
  },
  {
    "text": "ovn uses the concept of logical ports to",
    "start": "521680",
    "end": "524959"
  },
  {
    "text": "create a large",
    "start": "524959",
    "end": "525920"
  },
  {
    "text": "logical switch that spans multiple hosts",
    "start": "525920",
    "end": "529360"
  },
  {
    "text": "with this model creating 10 000 logical",
    "start": "529360",
    "end": "532480"
  },
  {
    "text": "ports generates more than 40 000 support",
    "start": "532480",
    "end": "535440"
  },
  {
    "text": "bindings",
    "start": "535440",
    "end": "537040"
  },
  {
    "text": "the logical switch approach does not",
    "start": "537040",
    "end": "538959"
  },
  {
    "text": "scale as we increase the number of",
    "start": "538959",
    "end": "540880"
  },
  {
    "text": "worker nodes",
    "start": "540880",
    "end": "541839"
  },
  {
    "text": "of a cluster moreover",
    "start": "541839",
    "end": "545200"
  },
  {
    "text": "during flow programming it's not",
    "start": "545200",
    "end": "547040"
  },
  {
    "text": "uncommon to observe an",
    "start": "547040",
    "end": "548560"
  },
  {
    "text": "increase in the cpu utilization during",
    "start": "548560",
    "end": "550880"
  },
  {
    "text": "flow parsing",
    "start": "550880",
    "end": "553279"
  },
  {
    "text": "with the logical switch architecture the",
    "start": "553279",
    "end": "555200"
  },
  {
    "text": "time to provision network resources for",
    "start": "555200",
    "end": "557360"
  },
  {
    "text": "each new container",
    "start": "557360",
    "end": "558640"
  },
  {
    "text": "depends on the number of containers that",
    "start": "558640",
    "end": "560720"
  },
  {
    "text": "already exist in the system and the",
    "start": "560720",
    "end": "562560"
  },
  {
    "text": "number of worker nodes of the cluster",
    "start": "562560",
    "end": "564560"
  },
  {
    "text": "so clearly the logical switch approach",
    "start": "564560",
    "end": "566959"
  },
  {
    "text": "restricts",
    "start": "566959",
    "end": "567680"
  },
  {
    "text": "scale and is not suitable for dynamic",
    "start": "567680",
    "end": "570240"
  },
  {
    "text": "cloud applications that have a short",
    "start": "570240",
    "end": "572080"
  },
  {
    "text": "lifetime span",
    "start": "572080",
    "end": "573360"
  },
  {
    "text": "like serverless",
    "start": "573360",
    "end": "576720"
  },
  {
    "text": "with the limitations of flow programming",
    "start": "576720",
    "end": "578560"
  },
  {
    "text": "model in mind",
    "start": "578560",
    "end": "579920"
  },
  {
    "text": "we redesigned the host networking in",
    "start": "579920",
    "end": "581920"
  },
  {
    "text": "mizor to interconnect",
    "start": "581920",
    "end": "583440"
  },
  {
    "text": "containers only with xdb programs",
    "start": "583440",
    "end": "587040"
  },
  {
    "text": "and to do this we attach an xdp program",
    "start": "587040",
    "end": "589839"
  },
  {
    "text": "on each physical interface of a worker",
    "start": "589839",
    "end": "591920"
  },
  {
    "text": "node",
    "start": "591920",
    "end": "592959"
  },
  {
    "text": "we name this program transit xdp",
    "start": "592959",
    "end": "596720"
  },
  {
    "text": "this program processes all english",
    "start": "596720",
    "end": "598880"
  },
  {
    "text": "packets to the worker nodes",
    "start": "598880",
    "end": "602160"
  },
  {
    "text": "we also attach another xtp program on",
    "start": "602160",
    "end": "604959"
  },
  {
    "text": "the v",
    "start": "604959",
    "end": "605360"
  },
  {
    "text": "if peer connecting a container in the",
    "start": "605360",
    "end": "607760"
  },
  {
    "text": "root namespace",
    "start": "607760",
    "end": "610079"
  },
  {
    "text": "we call this program the transit agent",
    "start": "610079",
    "end": "613519"
  },
  {
    "text": "the transit agent attaches to the v if",
    "start": "613519",
    "end": "616079"
  },
  {
    "text": "pier to process",
    "start": "616079",
    "end": "617279"
  },
  {
    "text": "all the egress traffic from each",
    "start": "617279",
    "end": "619279"
  },
  {
    "text": "container",
    "start": "619279",
    "end": "621200"
  },
  {
    "text": "from a management plan perspective all",
    "start": "621200",
    "end": "623760"
  },
  {
    "text": "what we needed to do next",
    "start": "623760",
    "end": "625120"
  },
  {
    "text": "is to expose the eppf user space api",
    "start": "625120",
    "end": "628399"
  },
  {
    "text": "as grpc interfaces the operator",
    "start": "628399",
    "end": "632240"
  },
  {
    "text": "programs logical functions of the xdb",
    "start": "632240",
    "end": "635200"
  },
  {
    "text": "program through these rpc interfaces",
    "start": "635200",
    "end": "639279"
  },
  {
    "start": "638000",
    "end": "707000"
  },
  {
    "text": "to understand the rule of virtual",
    "start": "639279",
    "end": "641519"
  },
  {
    "text": "function",
    "start": "641519",
    "end": "642560"
  },
  {
    "text": "we need to look into the new network",
    "start": "642560",
    "end": "644720"
  },
  {
    "text": "organization of kubernetes",
    "start": "644720",
    "end": "646160"
  },
  {
    "text": "that mizar enables we extended",
    "start": "646160",
    "end": "649279"
  },
  {
    "text": "kubernetes with two resources that we",
    "start": "649279",
    "end": "651200"
  },
  {
    "text": "typically find in any multicannon cloud",
    "start": "651200",
    "end": "653760"
  },
  {
    "text": "system",
    "start": "653760",
    "end": "654800"
  },
  {
    "text": "virtual private clouds vpcs and subnets",
    "start": "654800",
    "end": "657760"
  },
  {
    "text": "within the vpcs",
    "start": "657760",
    "end": "660160"
  },
  {
    "text": "creating vpcs and subnets is",
    "start": "660160",
    "end": "662160"
  },
  {
    "text": "straightforward in kubernetes with crds",
    "start": "662160",
    "end": "664560"
  },
  {
    "text": "and operators",
    "start": "664560",
    "end": "666160"
  },
  {
    "text": "on the data plan we introduced new",
    "start": "666160",
    "end": "668240"
  },
  {
    "text": "logical functions",
    "start": "668240",
    "end": "669440"
  },
  {
    "text": "within the xdb programs the first",
    "start": "669440",
    "end": "672560"
  },
  {
    "text": "logical function is bouncers",
    "start": "672560",
    "end": "674560"
  },
  {
    "text": "within the network scope and the second",
    "start": "674560",
    "end": "678240"
  },
  {
    "text": "are dividers within the vpc scope",
    "start": "678240",
    "end": "681760"
  },
  {
    "text": "unlike logical routers or switches the",
    "start": "681760",
    "end": "684240"
  },
  {
    "text": "bouncers and dividers are in-network",
    "start": "684240",
    "end": "686480"
  },
  {
    "text": "distributed hash tables",
    "start": "686480",
    "end": "689040"
  },
  {
    "text": "and i will detail exactly how they work",
    "start": "689040",
    "end": "691279"
  },
  {
    "text": "in the next few slides",
    "start": "691279",
    "end": "694000"
  },
  {
    "text": "bouncers and dividers are the logical",
    "start": "694000",
    "end": "696320"
  },
  {
    "text": "functions that make up the vpcs",
    "start": "696320",
    "end": "698640"
  },
  {
    "text": "to isolate pulse traffic for",
    "start": "698640",
    "end": "700839"
  },
  {
    "text": "multi-tenant and allow",
    "start": "700839",
    "end": "702560"
  },
  {
    "text": "tenants to reuse the same network",
    "start": "702560",
    "end": "704640"
  },
  {
    "text": "address space",
    "start": "704640",
    "end": "707279"
  },
  {
    "start": "707000",
    "end": "767000"
  },
  {
    "text": "the user creates a vpc like any object",
    "start": "710000",
    "end": "712720"
  },
  {
    "text": "in kubernetes as a yaml file",
    "start": "712720",
    "end": "715440"
  },
  {
    "text": "the user specifies the side range of the",
    "start": "715440",
    "end": "717839"
  },
  {
    "text": "vpc",
    "start": "717839",
    "end": "718480"
  },
  {
    "text": "and the number of vpc dividers",
    "start": "718480",
    "end": "721600"
  },
  {
    "text": "because the divider is a distributed",
    "start": "721600",
    "end": "723519"
  },
  {
    "text": "hash table we can provide",
    "start": "723519",
    "end": "725440"
  },
  {
    "text": "any number of dividers in the object",
    "start": "725440",
    "end": "727360"
  },
  {
    "text": "definition with one being the default",
    "start": "727360",
    "end": "731839"
  },
  {
    "text": "when the vpc operator receives the vpc",
    "start": "731839",
    "end": "734399"
  },
  {
    "text": "object it schedules the vpc divider on",
    "start": "734399",
    "end": "737040"
  },
  {
    "text": "one of the worker nodes of the cluster",
    "start": "737040",
    "end": "740000"
  },
  {
    "text": "scheduling the divider does not mean",
    "start": "740000",
    "end": "741839"
  },
  {
    "text": "that the operator runs",
    "start": "741839",
    "end": "743279"
  },
  {
    "text": "any new code on the node all what the",
    "start": "743279",
    "end": "745920"
  },
  {
    "text": "operator does",
    "start": "745920",
    "end": "747200"
  },
  {
    "text": "is labeling the selected host as a",
    "start": "747200",
    "end": "749279"
  },
  {
    "text": "divider for the vpc",
    "start": "749279",
    "end": "752480"
  },
  {
    "text": "the kubernetes operator also assigns a",
    "start": "752480",
    "end": "755120"
  },
  {
    "text": "unique",
    "start": "755120",
    "end": "755600"
  },
  {
    "text": "identifier for the vpc that the data",
    "start": "755600",
    "end": "758160"
  },
  {
    "text": "plan uses",
    "start": "758160",
    "end": "759279"
  },
  {
    "text": "to separate traffic which is known as",
    "start": "759279",
    "end": "762000"
  },
  {
    "text": "the virtual network identifier",
    "start": "762000",
    "end": "765600"
  },
  {
    "start": "767000",
    "end": "827000"
  },
  {
    "text": "after creating a vpc the user now",
    "start": "767680",
    "end": "770480"
  },
  {
    "text": "creates a subnet",
    "start": "770480",
    "end": "771600"
  },
  {
    "text": "without within the vpc we also provide",
    "start": "771600",
    "end": "775200"
  },
  {
    "text": "any number of pouncers to create for",
    "start": "775200",
    "end": "777440"
  },
  {
    "text": "each network",
    "start": "777440",
    "end": "778399"
  },
  {
    "text": "with one being the default when the",
    "start": "778399",
    "end": "781279"
  },
  {
    "text": "network operator receives the subnet",
    "start": "781279",
    "end": "783360"
  },
  {
    "text": "object",
    "start": "783360",
    "end": "784079"
  },
  {
    "text": "it schedules the bouncers on some of the",
    "start": "784079",
    "end": "786160"
  },
  {
    "text": "worker nodes of the cluster",
    "start": "786160",
    "end": "788800"
  },
  {
    "text": "scheduling the bouncer involves two",
    "start": "788800",
    "end": "790800"
  },
  {
    "text": "actions first",
    "start": "790800",
    "end": "792399"
  },
  {
    "text": "the operator labels the host as bouncers",
    "start": "792399",
    "end": "794720"
  },
  {
    "text": "on the management plan",
    "start": "794720",
    "end": "796560"
  },
  {
    "text": "second it programs the divider's worker",
    "start": "796560",
    "end": "799120"
  },
  {
    "text": "node through rpc calls",
    "start": "799120",
    "end": "802000"
  },
  {
    "text": "the rpc call simply populates an eppf",
    "start": "802000",
    "end": "804720"
  },
  {
    "text": "map in the transit xdb",
    "start": "804720",
    "end": "806320"
  },
  {
    "text": "program within the network within the",
    "start": "806320",
    "end": "808800"
  },
  {
    "text": "vpc",
    "start": "808800",
    "end": "810160"
  },
  {
    "text": "and the ip addresses of the host that",
    "start": "810160",
    "end": "812480"
  },
  {
    "text": "are bouncers to these networks",
    "start": "812480",
    "end": "814880"
  },
  {
    "text": "in this example net1 has a bouncer 1",
    "start": "814880",
    "end": "818240"
  },
  {
    "text": "and net 2 has a bouncer 2 and both of",
    "start": "818240",
    "end": "821600"
  },
  {
    "text": "them",
    "start": "821600",
    "end": "822079"
  },
  {
    "text": "are populated in the eppf map of the",
    "start": "822079",
    "end": "824560"
  },
  {
    "text": "divider host",
    "start": "824560",
    "end": "827360"
  },
  {
    "text": "now comes the interesting part where the",
    "start": "827519",
    "end": "829839"
  },
  {
    "text": "user creates a pod within a",
    "start": "829839",
    "end": "831600"
  },
  {
    "text": "multi-network",
    "start": "831600",
    "end": "832399"
  },
  {
    "text": "a multi-tenant network natively in",
    "start": "832399",
    "end": "835199"
  },
  {
    "text": "kubernetes and similar to what you",
    "start": "835199",
    "end": "836720"
  },
  {
    "text": "typically find in any cloud system",
    "start": "836720",
    "end": "840160"
  },
  {
    "text": "to do that we use annotations of the",
    "start": "840160",
    "end": "842720"
  },
  {
    "text": "pulled object to specify the vpc",
    "start": "842720",
    "end": "845040"
  },
  {
    "text": "and the subnet of the pod arctos",
    "start": "845040",
    "end": "848079"
  },
  {
    "text": "controller",
    "start": "848079",
    "end": "848800"
  },
  {
    "text": "adds the network and neck annotations",
    "start": "848800",
    "end": "851600"
  },
  {
    "text": "that i'm showing in these slides",
    "start": "851600",
    "end": "854720"
  },
  {
    "text": "the missile operator uses these",
    "start": "854720",
    "end": "856480"
  },
  {
    "text": "annotations to",
    "start": "856480",
    "end": "858160"
  },
  {
    "text": "provision the pod within the requested",
    "start": "858160",
    "end": "860160"
  },
  {
    "text": "vpc and network boundary",
    "start": "860160",
    "end": "862880"
  },
  {
    "text": "the missouri operator provisioned the",
    "start": "862880",
    "end": "864320"
  },
  {
    "text": "network resources with a constant number",
    "start": "864320",
    "end": "866720"
  },
  {
    "text": "of rpc calls",
    "start": "866720",
    "end": "868160"
  },
  {
    "text": "typically too the number of rpc calls",
    "start": "868160",
    "end": "871680"
  },
  {
    "text": "does not depend",
    "start": "871680",
    "end": "872880"
  },
  {
    "text": "on the number of worker nodes in the",
    "start": "872880",
    "end": "874639"
  },
  {
    "text": "cluster or the pulse already provisioned",
    "start": "874639",
    "end": "877680"
  },
  {
    "text": "this is what allows the network",
    "start": "877680",
    "end": "879120"
  },
  {
    "text": "provisioning to scale",
    "start": "879120",
    "end": "882160"
  },
  {
    "text": "the operator makes one call to the",
    "start": "882160",
    "end": "884079"
  },
  {
    "text": "bouncer host of the subnet",
    "start": "884079",
    "end": "886320"
  },
  {
    "text": "and this call effectively adds an entry",
    "start": "886320",
    "end": "888720"
  },
  {
    "text": "in one ebpf map",
    "start": "888720",
    "end": "890320"
  },
  {
    "text": "with the ip address of the node hosting",
    "start": "890320",
    "end": "892560"
  },
  {
    "text": "the pod",
    "start": "892560",
    "end": "894320"
  },
  {
    "text": "the other code provisions the vif peer",
    "start": "894320",
    "end": "896880"
  },
  {
    "text": "interface for the pod",
    "start": "896880",
    "end": "898320"
  },
  {
    "text": "and make it ready for the c9 to consume",
    "start": "898320",
    "end": "901440"
  },
  {
    "text": "internally when the cni adds the network",
    "start": "901440",
    "end": "904560"
  },
  {
    "text": "interface",
    "start": "904560",
    "end": "905519"
  },
  {
    "text": "it makes a local call to the misar",
    "start": "905519",
    "end": "907519"
  },
  {
    "text": "daemon to consume that interface",
    "start": "907519",
    "end": "910480"
  },
  {
    "text": "this design significantly simplifies the",
    "start": "910480",
    "end": "912959"
  },
  {
    "text": "cni",
    "start": "912959",
    "end": "914880"
  },
  {
    "text": "when the cni adds an interface it only",
    "start": "914880",
    "end": "917440"
  },
  {
    "text": "consumes",
    "start": "917440",
    "end": "918240"
  },
  {
    "text": "the interface that is already created by",
    "start": "918240",
    "end": "920560"
  },
  {
    "text": "the missouri demon",
    "start": "920560",
    "end": "923440"
  },
  {
    "text": "the effect of this provisioning workflow",
    "start": "924240",
    "end": "926639"
  },
  {
    "text": "is significantly better scale",
    "start": "926639",
    "end": "928560"
  },
  {
    "text": "and significantly better time to",
    "start": "928560",
    "end": "930320"
  },
  {
    "text": "provision networking for the pub",
    "start": "930320",
    "end": "933680"
  },
  {
    "text": "the time to provision network resources",
    "start": "933680",
    "end": "935759"
  },
  {
    "text": "for the pod is now constant",
    "start": "935759",
    "end": "937759"
  },
  {
    "text": "and independent on the number of worker",
    "start": "937759",
    "end": "940000"
  },
  {
    "text": "nodes of the cluster",
    "start": "940000",
    "end": "941759"
  },
  {
    "text": "or even the number of pods already",
    "start": "941759",
    "end": "943519"
  },
  {
    "text": "provisioned in the cluster",
    "start": "943519",
    "end": "945600"
  },
  {
    "text": "compare this to obvious which does not",
    "start": "945600",
    "end": "948079"
  },
  {
    "text": "scale well as we add more nodes in the",
    "start": "948079",
    "end": "950000"
  },
  {
    "text": "cluster or if the number of poles",
    "start": "950000",
    "end": "952000"
  },
  {
    "text": "existing already increases",
    "start": "952000",
    "end": "955120"
  },
  {
    "text": "up until this point i describe the",
    "start": "955120",
    "end": "957120"
  },
  {
    "text": "management plan operations",
    "start": "957120",
    "end": "958720"
  },
  {
    "text": "and in the next few slides i will",
    "start": "958720",
    "end": "960800"
  },
  {
    "text": "describe in detail",
    "start": "960800",
    "end": "962079"
  },
  {
    "text": "how the xdb program on holds process",
    "start": "962079",
    "end": "964639"
  },
  {
    "text": "packets",
    "start": "964639",
    "end": "967040"
  },
  {
    "text": "consider the case in which a pod with ip",
    "start": "967440",
    "end": "970000"
  },
  {
    "text": "address 1001 on host a",
    "start": "970000",
    "end": "972800"
  },
  {
    "text": "sends a packet to a pod with an ip",
    "start": "972800",
    "end": "975040"
  },
  {
    "text": "address 1002",
    "start": "975040",
    "end": "976720"
  },
  {
    "text": "on host b an xdp program",
    "start": "976720",
    "end": "980079"
  },
  {
    "text": "intercepts the outgoing packet from the",
    "start": "980079",
    "end": "982560"
  },
  {
    "text": "pod",
    "start": "982560",
    "end": "983120"
  },
  {
    "text": "when the vehicle receives it in the root",
    "start": "983120",
    "end": "985759"
  },
  {
    "text": "name space",
    "start": "985759",
    "end": "987759"
  },
  {
    "text": "the xdp program simply looks up a static",
    "start": "987759",
    "end": "990480"
  },
  {
    "text": "configuration in an eppf map",
    "start": "990480",
    "end": "992800"
  },
  {
    "text": "and encapsulates the packet into a",
    "start": "992800",
    "end": "994800"
  },
  {
    "text": "geneve packet",
    "start": "994800",
    "end": "996639"
  },
  {
    "text": "it also assigns the virtual network",
    "start": "996639",
    "end": "998959"
  },
  {
    "text": "identifier of the vpc",
    "start": "998959",
    "end": "1000560"
  },
  {
    "text": "in the geneve header several tenants",
    "start": "1000560",
    "end": "1003920"
  },
  {
    "text": "still use the same address space of the",
    "start": "1003920",
    "end": "1006240"
  },
  {
    "text": "vpc where the network distinguishes",
    "start": "1006240",
    "end": "1008480"
  },
  {
    "text": "traffic within a vpc by the v9i field",
    "start": "1008480",
    "end": "1012240"
  },
  {
    "text": "the only information available to the",
    "start": "1012240",
    "end": "1014079"
  },
  {
    "text": "transit agent at this stage is the ip",
    "start": "1014079",
    "end": "1016800"
  },
  {
    "text": "address of the bouncer",
    "start": "1016800",
    "end": "1018959"
  },
  {
    "text": "so it sends the packets to the bouncer",
    "start": "1018959",
    "end": "1021920"
  },
  {
    "text": "by redirecting it for transmission",
    "start": "1021920",
    "end": "1024079"
  },
  {
    "text": "on the physical interface when the",
    "start": "1024079",
    "end": "1026959"
  },
  {
    "text": "bouncer receives the packet",
    "start": "1026959",
    "end": "1028959"
  },
  {
    "text": "that an xdp program is first to process",
    "start": "1028959",
    "end": "1031520"
  },
  {
    "text": "it on the bouncer host",
    "start": "1031520",
    "end": "1034160"
  },
  {
    "text": "the xdb program looks up the inner",
    "start": "1034160",
    "end": "1036240"
  },
  {
    "text": "destination address of an eppf map",
    "start": "1036240",
    "end": "1039438"
  },
  {
    "text": "then it rewrite the outer destination ip",
    "start": "1039439",
    "end": "1042240"
  },
  {
    "text": "address to host c",
    "start": "1042240",
    "end": "1043839"
  },
  {
    "text": "which is the worker node running the",
    "start": "1043839",
    "end": "1045600"
  },
  {
    "text": "destination pod 1002",
    "start": "1045600",
    "end": "1049200"
  },
  {
    "text": "when the packet arrives at host c the",
    "start": "1049200",
    "end": "1051440"
  },
  {
    "text": "xdp program decapsulates the packet",
    "start": "1051440",
    "end": "1054000"
  },
  {
    "text": "and redirected to the vehicle of the pod",
    "start": "1054000",
    "end": "1056559"
  },
  {
    "text": "to receive it",
    "start": "1056559",
    "end": "1058559"
  },
  {
    "text": "this approach greatly simplifies the",
    "start": "1058559",
    "end": "1060880"
  },
  {
    "text": "prop provisioning",
    "start": "1060880",
    "end": "1061919"
  },
  {
    "text": "but it has a serious drawback all the",
    "start": "1061919",
    "end": "1064720"
  },
  {
    "text": "packets now traverse",
    "start": "1064720",
    "end": "1066160"
  },
  {
    "text": "one extra hop to reach their destination",
    "start": "1066160",
    "end": "1070080"
  },
  {
    "text": "i will now describe how we solve this",
    "start": "1070080",
    "end": "1072160"
  },
  {
    "text": "entirely in xdp",
    "start": "1072160",
    "end": "1075200"
  },
  {
    "start": "1074000",
    "end": "1123000"
  },
  {
    "text": "overcome the extra hub problem we",
    "start": "1075679",
    "end": "1077760"
  },
  {
    "text": "modified the xdb",
    "start": "1077760",
    "end": "1079120"
  },
  {
    "text": "program running on the bouncer host to",
    "start": "1079120",
    "end": "1081360"
  },
  {
    "text": "respond to arp",
    "start": "1081360",
    "end": "1082559"
  },
  {
    "text": "queries since we already have the pulse",
    "start": "1082559",
    "end": "1085520"
  },
  {
    "text": "ip and mac address configured by the",
    "start": "1085520",
    "end": "1087600"
  },
  {
    "text": "missouri operator",
    "start": "1087600",
    "end": "1088640"
  },
  {
    "text": "when we provision the pulse network so",
    "start": "1088640",
    "end": "1090480"
  },
  {
    "text": "it makes sense to respond to our",
    "start": "1090480",
    "end": "1092240"
  },
  {
    "text": "queries at this stage",
    "start": "1092240",
    "end": "1095520"
  },
  {
    "text": "when the pod at host a sends an arp",
    "start": "1095520",
    "end": "1097679"
  },
  {
    "text": "query the bouncer responds with the mac",
    "start": "1097679",
    "end": "1099679"
  },
  {
    "text": "address of 1002",
    "start": "1099679",
    "end": "1101600"
  },
  {
    "text": "but it does not only respond to art",
    "start": "1101600",
    "end": "1104240"
  },
  {
    "text": "queries",
    "start": "1104240",
    "end": "1105280"
  },
  {
    "text": "the bouncer also adds a geneve option in",
    "start": "1105280",
    "end": "1107760"
  },
  {
    "text": "the outer packet to tell the transit",
    "start": "1107760",
    "end": "1109760"
  },
  {
    "text": "agent the 1002",
    "start": "1109760",
    "end": "1111840"
  },
  {
    "text": "is hosted at house c when host a",
    "start": "1111840",
    "end": "1114880"
  },
  {
    "text": "receives the arp reply",
    "start": "1114880",
    "end": "1116640"
  },
  {
    "text": "it extracts the geneve option and adds",
    "start": "1116640",
    "end": "1119440"
  },
  {
    "text": "the host mapping",
    "start": "1119440",
    "end": "1120320"
  },
  {
    "text": "information in its ebpf map",
    "start": "1120320",
    "end": "1124400"
  },
  {
    "start": "1123000",
    "end": "1201000"
  },
  {
    "text": "now the transit agent of 1001",
    "start": "1124400",
    "end": "1127520"
  },
  {
    "text": "sends packets directly to the",
    "start": "1127520",
    "end": "1129200"
  },
  {
    "text": "destination fault",
    "start": "1129200",
    "end": "1130880"
  },
  {
    "text": "and this direct communication happens",
    "start": "1130880",
    "end": "1132960"
  },
  {
    "text": "from the very first packet of the flow",
    "start": "1132960",
    "end": "1135360"
  },
  {
    "text": "and it remains throughout the pods",
    "start": "1135360",
    "end": "1137039"
  },
  {
    "text": "lifetime",
    "start": "1137039",
    "end": "1139280"
  },
  {
    "text": "there is no more there is one more",
    "start": "1139280",
    "end": "1140880"
  },
  {
    "text": "detail here",
    "start": "1140880",
    "end": "1142799"
  },
  {
    "text": "when the transit agent sends a packet",
    "start": "1142799",
    "end": "1145039"
  },
  {
    "text": "directly to the destination pod",
    "start": "1145039",
    "end": "1147120"
  },
  {
    "text": "it toggles one pit in a geneve option to",
    "start": "1147120",
    "end": "1149760"
  },
  {
    "text": "tell the destination host",
    "start": "1149760",
    "end": "1151360"
  },
  {
    "text": "that the packet is sent directly from",
    "start": "1151360",
    "end": "1153600"
  },
  {
    "text": "the source spot worker nodes",
    "start": "1153600",
    "end": "1155200"
  },
  {
    "text": "and not from the bouncer this allows the",
    "start": "1155200",
    "end": "1158400"
  },
  {
    "text": "transit xdp",
    "start": "1158400",
    "end": "1159520"
  },
  {
    "text": "at host c to also return package",
    "start": "1159520",
    "end": "1161919"
  },
  {
    "text": "directly to the source pod",
    "start": "1161919",
    "end": "1164480"
  },
  {
    "text": "and this simple mechanism allows all",
    "start": "1164480",
    "end": "1166480"
  },
  {
    "text": "flows in the cluster to be direct",
    "start": "1166480",
    "end": "1168160"
  },
  {
    "text": "without traversing the bouncer",
    "start": "1168160",
    "end": "1170720"
  },
  {
    "text": "and at the same time allows the",
    "start": "1170720",
    "end": "1172320"
  },
  {
    "text": "management plan to provision the network",
    "start": "1172320",
    "end": "1174480"
  },
  {
    "text": "by only making few rpc calls to a couple",
    "start": "1174480",
    "end": "1177520"
  },
  {
    "text": "of hosts",
    "start": "1177520",
    "end": "1178080"
  },
  {
    "text": "in the cluster not all the hosts in the",
    "start": "1178080",
    "end": "1180400"
  },
  {
    "text": "customer",
    "start": "1180400",
    "end": "1182240"
  },
  {
    "text": "and if you think about the role of the",
    "start": "1182240",
    "end": "1183919"
  },
  {
    "text": "bouncer now comparing to it to a logical",
    "start": "1183919",
    "end": "1186480"
  },
  {
    "text": "switch or a logical router in ovn",
    "start": "1186480",
    "end": "1189200"
  },
  {
    "text": "it is an in-network as the in-controller",
    "start": "1189200",
    "end": "1191440"
  },
  {
    "text": "rather than a virtual switch",
    "start": "1191440",
    "end": "1194400"
  },
  {
    "text": "it's like a microservice in the network",
    "start": "1194400",
    "end": "1196960"
  },
  {
    "text": "that prove it that provides distributed",
    "start": "1196960",
    "end": "1199120"
  },
  {
    "text": "functions to the endpoints",
    "start": "1199120",
    "end": "1202640"
  },
  {
    "start": "1201000",
    "end": "1320000"
  },
  {
    "text": "we take this observation to extend",
    "start": "1202640",
    "end": "1204559"
  },
  {
    "text": "missouri functionality beyond",
    "start": "1204559",
    "end": "1206159"
  },
  {
    "text": "providing simple connectivity between",
    "start": "1206159",
    "end": "1208159"
  },
  {
    "text": "the bots",
    "start": "1208159",
    "end": "1209600"
  },
  {
    "text": "essentially we extended the balancer",
    "start": "1209600",
    "end": "1211679"
  },
  {
    "text": "functionality",
    "start": "1211679",
    "end": "1212720"
  },
  {
    "text": "to implement kupernet's services as well",
    "start": "1212720",
    "end": "1216320"
  },
  {
    "text": "this is best to be explained by an",
    "start": "1216320",
    "end": "1218080"
  },
  {
    "text": "example consider the 1001 pod",
    "start": "1218080",
    "end": "1221919"
  },
  {
    "text": "went with sending packets to one to the",
    "start": "1221919",
    "end": "1224559"
  },
  {
    "text": "192",
    "start": "1224559",
    "end": "1225480"
  },
  {
    "text": "1680 service the transit agent xdp",
    "start": "1225480",
    "end": "1229600"
  },
  {
    "text": "program",
    "start": "1229600",
    "end": "1230080"
  },
  {
    "text": "first processed the packet which knows",
    "start": "1230080",
    "end": "1232799"
  },
  {
    "text": "nothing about the network",
    "start": "1232799",
    "end": "1234000"
  },
  {
    "text": "except sending the packet to the bouncer",
    "start": "1234000",
    "end": "1235919"
  },
  {
    "text": "at host b",
    "start": "1235919",
    "end": "1238000"
  },
  {
    "text": "when the bouncer receives the packet it",
    "start": "1238000",
    "end": "1239840"
  },
  {
    "text": "looks up the destination ip address of",
    "start": "1239840",
    "end": "1241679"
  },
  {
    "text": "the inner packet",
    "start": "1241679",
    "end": "1242799"
  },
  {
    "text": "and determines it is for a service ip",
    "start": "1242799",
    "end": "1246640"
  },
  {
    "text": "there are several decisions that the",
    "start": "1246640",
    "end": "1248320"
  },
  {
    "text": "bouncer can make right now",
    "start": "1248320",
    "end": "1250240"
  },
  {
    "text": "including rewriting the inner",
    "start": "1250240",
    "end": "1251760"
  },
  {
    "text": "destination ip address and sending the",
    "start": "1251760",
    "end": "1253679"
  },
  {
    "text": "packet to a back-end pod",
    "start": "1253679",
    "end": "1255760"
  },
  {
    "text": "like any conventional net or load",
    "start": "1255760",
    "end": "1257440"
  },
  {
    "text": "balancer device",
    "start": "1257440",
    "end": "1259280"
  },
  {
    "text": "but i will describe a different approach",
    "start": "1259280",
    "end": "1262000"
  },
  {
    "text": "the bouncer instead",
    "start": "1262000",
    "end": "1263600"
  },
  {
    "text": "has the geneve option of its decision",
    "start": "1263600",
    "end": "1267120"
  },
  {
    "text": "it instructs the pulse transit agent how",
    "start": "1267120",
    "end": "1269919"
  },
  {
    "text": "the service should modify the inner",
    "start": "1269919",
    "end": "1271600"
  },
  {
    "text": "packet",
    "start": "1271600",
    "end": "1273120"
  },
  {
    "text": "in the clone example the modification",
    "start": "1273120",
    "end": "1275520"
  },
  {
    "text": "option says to rewrite the service ip",
    "start": "1275520",
    "end": "1277919"
  },
  {
    "text": "address to 1004",
    "start": "1277919",
    "end": "1279760"
  },
  {
    "text": "and port 80. then the bouncer returns",
    "start": "1279760",
    "end": "1282880"
  },
  {
    "text": "the packet to the sender host which is",
    "start": "1282880",
    "end": "1284720"
  },
  {
    "text": "host",
    "start": "1284720",
    "end": "1285120"
  },
  {
    "text": "a the transit xdp program on the",
    "start": "1285120",
    "end": "1288799"
  },
  {
    "text": "client's host",
    "start": "1288799",
    "end": "1289679"
  },
  {
    "text": "add this information option in any in an",
    "start": "1289679",
    "end": "1292400"
  },
  {
    "text": "eppf map entry",
    "start": "1292400",
    "end": "1294720"
  },
  {
    "text": "then it rewrites the packet according to",
    "start": "1294720",
    "end": "1297360"
  },
  {
    "text": "the",
    "start": "1297360",
    "end": "1297840"
  },
  {
    "text": "accordingly and rescinds the packet",
    "start": "1297840",
    "end": "1299600"
  },
  {
    "text": "again but this time",
    "start": "1299600",
    "end": "1301520"
  },
  {
    "text": "not to the service ip but at the back",
    "start": "1301520",
    "end": "1303520"
  },
  {
    "text": "end pod",
    "start": "1303520",
    "end": "1304840"
  },
  {
    "text": "n004 from this point forward the transit",
    "start": "1304840",
    "end": "1309200"
  },
  {
    "text": "agent sends all the packets for this",
    "start": "1309200",
    "end": "1311280"
  },
  {
    "text": "flow",
    "start": "1311280",
    "end": "1312080"
  },
  {
    "text": "to the back end pod and again without",
    "start": "1312080",
    "end": "1314559"
  },
  {
    "text": "going through the bouncers",
    "start": "1314559",
    "end": "1316000"
  },
  {
    "text": "ip tables or any other intermediate step",
    "start": "1316000",
    "end": "1320720"
  },
  {
    "text": "this powerful concept enabled by xdb",
    "start": "1321360",
    "end": "1324480"
  },
  {
    "text": "and kubernetes operators allow us to",
    "start": "1324480",
    "end": "1326880"
  },
  {
    "text": "scale the services and replace qproxy",
    "start": "1326880",
    "end": "1329440"
  },
  {
    "text": "without compromising the advantage of",
    "start": "1329440",
    "end": "1331520"
  },
  {
    "text": "direct communication between pulse over",
    "start": "1331520",
    "end": "1333520"
  },
  {
    "text": "service ips",
    "start": "1333520",
    "end": "1336320"
  },
  {
    "start": "1336000",
    "end": "1381000"
  },
  {
    "text": "missouri scales out the number of",
    "start": "1336320",
    "end": "1337840"
  },
  {
    "text": "bouncers and dividers in the network to",
    "start": "1337840",
    "end": "1340080"
  },
  {
    "text": "become a distributed in-network",
    "start": "1340080",
    "end": "1342000"
  },
  {
    "text": "controller",
    "start": "1342000",
    "end": "1343039"
  },
  {
    "text": "that serves any traffic the transit",
    "start": "1343039",
    "end": "1346640"
  },
  {
    "text": "agent also",
    "start": "1346640",
    "end": "1347440"
  },
  {
    "text": "implements a load balancing function on",
    "start": "1347440",
    "end": "1350159"
  },
  {
    "text": "the outer ip header",
    "start": "1350159",
    "end": "1351760"
  },
  {
    "text": "to rebalance the traffic at 2d bouncers",
    "start": "1351760",
    "end": "1355679"
  },
  {
    "text": "but we typically find that a single",
    "start": "1355679",
    "end": "1357600"
  },
  {
    "text": "bouncer is enough",
    "start": "1357600",
    "end": "1359039"
  },
  {
    "text": "in most cases as it only processes arp",
    "start": "1359039",
    "end": "1362080"
  },
  {
    "text": "queries and the first packets of flows",
    "start": "1362080",
    "end": "1365280"
  },
  {
    "text": "with this i have provided an overview of",
    "start": "1365280",
    "end": "1367679"
  },
  {
    "text": "miser and there is a lot of",
    "start": "1367679",
    "end": "1369360"
  },
  {
    "text": "a lot more to it in the probe map and i",
    "start": "1369360",
    "end": "1372400"
  },
  {
    "text": "conclude this talk and we will now play",
    "start": "1372400",
    "end": "1374480"
  },
  {
    "text": "a recorded demo",
    "start": "1374480",
    "end": "1375919"
  },
  {
    "text": "before moving to the q a thank you very",
    "start": "1375919",
    "end": "1378559"
  },
  {
    "text": "much",
    "start": "1378559",
    "end": "1380799"
  },
  {
    "start": "1381000",
    "end": "1681000"
  },
  {
    "text": "hi for this demo today we have a three",
    "start": "1386080",
    "end": "1387840"
  },
  {
    "text": "node kubernetes cluster",
    "start": "1387840",
    "end": "1389200"
  },
  {
    "text": "using kind with mesar installed miser is",
    "start": "1389200",
    "end": "1392480"
  },
  {
    "text": "installed on this cluster via a daemon",
    "start": "1392480",
    "end": "1394080"
  },
  {
    "text": "set",
    "start": "1394080",
    "end": "1394400"
  },
  {
    "text": "and an operator appointment we bootstrap",
    "start": "1394400",
    "end": "1397200"
  },
  {
    "text": "the cluster with a default vpc",
    "start": "1397200",
    "end": "1398880"
  },
  {
    "text": "and network each with their own divider",
    "start": "1398880",
    "end": "1400720"
  },
  {
    "text": "and bouncer",
    "start": "1400720",
    "end": "1402320"
  },
  {
    "text": "here we use misar's simple endpoints to",
    "start": "1402320",
    "end": "1404480"
  },
  {
    "text": "deploy pods",
    "start": "1404480",
    "end": "1407200"
  },
  {
    "text": "now on each node we see that an xv",
    "start": "1407840",
    "end": "1410000"
  },
  {
    "text": "program is loaded on the main interface",
    "start": "1410000",
    "end": "1412240"
  },
  {
    "text": "and on the v device in the root name",
    "start": "1412240",
    "end": "1413760"
  },
  {
    "text": "space we load the agent xp program",
    "start": "1413760",
    "end": "1417440"
  },
  {
    "text": "next we demonstrate ping on the two",
    "start": "1417440",
    "end": "1420000"
  },
  {
    "text": "recently created pods",
    "start": "1420000",
    "end": "1423120"
  },
  {
    "text": "next we will create another ppc with two",
    "start": "1426480",
    "end": "1429120"
  },
  {
    "text": "subnets",
    "start": "1429120",
    "end": "1430799"
  },
  {
    "text": "the vpc has two dividers and here each",
    "start": "1430799",
    "end": "1434400"
  },
  {
    "text": "of its subnets will have a single",
    "start": "1434400",
    "end": "1437919"
  },
  {
    "text": "bouncer",
    "start": "1442840",
    "end": "1445840"
  },
  {
    "text": "now for each of these subnets we will",
    "start": "1449840",
    "end": "1451600"
  },
  {
    "text": "create an endpoint",
    "start": "1451600",
    "end": "1453039"
  },
  {
    "text": "or a pod",
    "start": "1453039",
    "end": "1459840"
  },
  {
    "text": "now with these two recently created pods",
    "start": "1474400",
    "end": "1476240"
  },
  {
    "text": "we will demonstrate cross net ping",
    "start": "1476240",
    "end": "1478880"
  },
  {
    "text": "and here to demonstrate our isolation we",
    "start": "1478880",
    "end": "1480720"
  },
  {
    "text": "will try to ping across vpcs",
    "start": "1480720",
    "end": "1487840"
  },
  {
    "text": "now we will demonstrate our operator",
    "start": "1490480",
    "end": "1492320"
  },
  {
    "text": "provisioning 40 endpoints",
    "start": "1492320",
    "end": "1501520"
  },
  {
    "text": "regardless of the existing number of",
    "start": "1501520",
    "end": "1503760"
  },
  {
    "text": "endpoints or pods on the system",
    "start": "1503760",
    "end": "1506240"
  },
  {
    "text": "all subsequent endpoints are provisioned",
    "start": "1506240",
    "end": "1508240"
  },
  {
    "text": "at a constant time",
    "start": "1508240",
    "end": "1509600"
  },
  {
    "text": "of about 0.35 seconds",
    "start": "1509600",
    "end": "1515840"
  },
  {
    "text": "now in the next section we demonstrate",
    "start": "1522159",
    "end": "1524240"
  },
  {
    "text": "intra and inter network direct path",
    "start": "1524240",
    "end": "1527520"
  },
  {
    "text": "intern network direct path only the",
    "start": "1527520",
    "end": "1529360"
  },
  {
    "text": "first art packet goes through the",
    "start": "1529360",
    "end": "1530880"
  },
  {
    "text": "bouncer",
    "start": "1530880",
    "end": "1532880"
  },
  {
    "text": "once both sides have cached the endpoint",
    "start": "1532880",
    "end": "1534799"
  },
  {
    "text": "host information",
    "start": "1534799",
    "end": "1536159"
  },
  {
    "text": "any traffic thereafter will only flow",
    "start": "1536159",
    "end": "1538159"
  },
  {
    "text": "between the two endpoint hosts",
    "start": "1538159",
    "end": "1543840"
  },
  {
    "text": "for inter-network direct path the first",
    "start": "1546559",
    "end": "1549360"
  },
  {
    "text": "arp packet",
    "start": "1549360",
    "end": "1550159"
  },
  {
    "text": "goes through the divider and both",
    "start": "1550159",
    "end": "1551679"
  },
  {
    "text": "bouncers",
    "start": "1551679",
    "end": "1553919"
  },
  {
    "text": "here the divider and the two endpoint",
    "start": "1553919",
    "end": "1556640"
  },
  {
    "text": "hosts",
    "start": "1556640",
    "end": "1557120"
  },
  {
    "text": "must cache the host's information",
    "start": "1557120",
    "end": "1571840"
  },
  {
    "text": "once all three have cached the endpoint",
    "start": "1579520",
    "end": "1581200"
  },
  {
    "text": "host information",
    "start": "1581200",
    "end": "1582720"
  },
  {
    "text": "any traffic thereafter will flow between",
    "start": "1582720",
    "end": "1584400"
  },
  {
    "text": "the two endpoint hosts",
    "start": "1584400",
    "end": "1586080"
  },
  {
    "text": "and the divider as an intermediary",
    "start": "1586080",
    "end": "1590000"
  },
  {
    "text": "finally in this part of the demo we",
    "start": "1595679",
    "end": "1598240"
  },
  {
    "text": "demonstrate using",
    "start": "1598240",
    "end": "1599120"
  },
  {
    "text": "misar scale endpoint as a replacement",
    "start": "1599120",
    "end": "1601679"
  },
  {
    "text": "for the community's cluster ip service",
    "start": "1601679",
    "end": "1613840"
  },
  {
    "text": "when a service is created miser creates",
    "start": "1617520",
    "end": "1620000"
  },
  {
    "text": "a corresponding scaled endpoint",
    "start": "1620000",
    "end": "1627840"
  },
  {
    "text": "here we label the two recently created",
    "start": "1632960",
    "end": "1635039"
  },
  {
    "text": "pods",
    "start": "1635039",
    "end": "1636880"
  },
  {
    "text": "to add them as back ends for the scaled",
    "start": "1636880",
    "end": "1638880"
  },
  {
    "text": "endpoint",
    "start": "1638880",
    "end": "1641840"
  },
  {
    "text": "now for this demonstration we will curl",
    "start": "1653760",
    "end": "1655679"
  },
  {
    "text": "the surface from our third pod",
    "start": "1655679",
    "end": "1657360"
  },
  {
    "text": "and in the reply we will see that the",
    "start": "1657360",
    "end": "1658960"
  },
  {
    "text": "surface replies with the pod name of one",
    "start": "1658960",
    "end": "1660880"
  },
  {
    "text": "of the back ends",
    "start": "1660880",
    "end": "1663440"
  },
  {
    "text": "here both pod 1 and pod 2 reply to curl",
    "start": "1663440",
    "end": "1669840"
  },
  {
    "text": "we can also ping the service this is",
    "start": "1672720",
    "end": "1675440"
  },
  {
    "text": "possible because of the current",
    "start": "1675440",
    "end": "1676880"
  },
  {
    "text": "scaled endpoint implementation",
    "start": "1676880",
    "end": "1683760"
  }
]