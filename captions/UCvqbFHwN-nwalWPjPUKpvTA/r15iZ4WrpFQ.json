[
  {
    "text": "okay um I think we can get started um hey everyone uh welcome uh we are going",
    "start": "640",
    "end": "8000"
  },
  {
    "text": "to be talking about oidc and workload identity in",
    "start": "8000",
    "end": "13679"
  },
  {
    "text": "kubernetes uh starting off with a brief intro um I'm Anish Ram shiker I'm a",
    "start": "13679",
    "end": "19320"
  },
  {
    "text": "software engineer at Microsoft um I'm part of the Azure container Upstream team working on security projects I'm",
    "start": "19320",
    "end": "26599"
  },
  {
    "text": "one of the maintainers of Secret store CSI driver uh it's a kubernetes SE Goda",
    "start": "26599",
    "end": "31640"
  },
  {
    "text": "project um and I'm from Seattle Washington hi everyone I am mashos and I",
    "start": "31640",
    "end": "40200"
  },
  {
    "text": "work at elastic and I'm also a maintainer of cluster API provider",
    "start": "40200",
    "end": "46480"
  },
  {
    "text": "rer so let's get started um this is the agenda that we",
    "start": "46480",
    "end": "52840"
  },
  {
    "text": "are going to talk about so we are going to give an introduction around workload identity so how many of you know about",
    "start": "52840",
    "end": "59320"
  },
  {
    "text": "workload identity idty so far wow that's great um so when I was learning workload",
    "start": "59320",
    "end": "65720"
  },
  {
    "text": "identity uh I started to look into some Basics so we'll also do a refresher on",
    "start": "65720",
    "end": "71360"
  },
  {
    "text": "authentication and authorization it will not hurt us and then anise will help us",
    "start": "71360",
    "end": "77360"
  },
  {
    "text": "understand workload identity in details he'll go into how it works and explain in the context of",
    "start": "77360",
    "end": "83759"
  },
  {
    "text": "kubernetes and we have a demo for that and after that we are going to talk",
    "start": "83759",
    "end": "89280"
  },
  {
    "text": "about couple of usages about workload identity in kubernetes so let us get",
    "start": "89280",
    "end": "95840"
  },
  {
    "text": "started um so workloads deployed on kubernetes may require access to",
    "start": "95840",
    "end": "101720"
  },
  {
    "text": "external resources on public cloud or maybe a workload in kubernetes would",
    "start": "101720",
    "end": "107560"
  },
  {
    "text": "like to talk to another workload in kues and they need to identify each other so workload identity is a way to",
    "start": "107560",
    "end": "114479"
  },
  {
    "text": "authenticate workloads um and you can see in this",
    "start": "114479",
    "end": "120439"
  },
  {
    "text": "little diagram that I tried to make when I was trying to understand workload identity that let's say you have two",
    "start": "120439",
    "end": "125560"
  },
  {
    "text": "pods pod one and pod one so you can consider these two as a workload and there is some identity associated with",
    "start": "125560",
    "end": "132319"
  },
  {
    "text": "these two pods which will be used to authenticate um",
    "start": "132319",
    "end": "139160"
  },
  {
    "text": "let's Okay so let's get into some basics of uh you know some jargons that we want",
    "start": "139160",
    "end": "145319"
  },
  {
    "text": "to debunk here um entity it's something individual could be an individual or it",
    "start": "145319",
    "end": "151519"
  },
  {
    "text": "could be a service which and identity is set of attributes that can help you",
    "start": "151519",
    "end": "157440"
  },
  {
    "text": "identify these entities and authentication is a way of",
    "start": "157440",
    "end": "163599"
  },
  {
    "text": "proving the identity to someone and authorization helps you to tell that",
    "start": "163599",
    "end": "169120"
  },
  {
    "text": "what are the set of actions that an entity can",
    "start": "169120",
    "end": "173519"
  },
  {
    "text": "take um so we have this uh you know the traditional model of authentication you",
    "start": "174800",
    "end": "181360"
  },
  {
    "text": "have app you have server and server has protective resources and you could put your username and password to access the",
    "start": "181360",
    "end": "188239"
  },
  {
    "text": "resources from the server and it had a lot of drawbacks you know you couldn't do more fine grain tuning to that and if",
    "start": "188239",
    "end": "195239"
  },
  {
    "text": "you wanted to reok the access it was terrible um and also providing your",
    "start": "195239",
    "end": "201319"
  },
  {
    "text": "username and password could be risky you know if you want to provide that for a third party",
    "start": "201319",
    "end": "207439"
  },
  {
    "text": "app and here comes a to .0 um so o 2.0",
    "start": "207439",
    "end": "212599"
  },
  {
    "text": "is a standard it's based on RFC 6749 that tries to standardize the way of uh",
    "start": "212599",
    "end": "219159"
  },
  {
    "text": "you know delegated authorization and uh if you see there are four roles that I've written in the",
    "start": "219159",
    "end": "225720"
  },
  {
    "text": "slides like resource owner resource server client and authorization server",
    "start": "225720",
    "end": "231239"
  },
  {
    "text": "um so resource owner is someone who owns the resources the protected resources",
    "start": "231239",
    "end": "236840"
  },
  {
    "text": "and resource server is from the server from where you could access access the those resources and client is someone",
    "start": "236840",
    "end": "243159"
  },
  {
    "text": "whom you will you as a resource owner will delegate authority to access the resources and authorizing server will",
    "start": "243159",
    "end": "249920"
  },
  {
    "text": "help you to get access token to help you access the protected resources also it",
    "start": "249920",
    "end": "256120"
  },
  {
    "text": "is important to keep in mind that o 2.0 does not define any standards around",
    "start": "256120",
    "end": "262199"
  },
  {
    "text": "authentication um so let's move to this little diagram that I've made here so",
    "start": "262199",
    "end": "267840"
  },
  {
    "text": "you can see uh the client tries to do a request via resource owner and you you",
    "start": "267840",
    "end": "274280"
  },
  {
    "text": "you can see in step two I written authentication and oid O 2.0 does not",
    "start": "274280",
    "end": "280880"
  },
  {
    "text": "define anything around authentication so somehow let's say the resource owner authenticates to have a delegated",
    "start": "280880",
    "end": "286639"
  },
  {
    "text": "authorization to the client and now you see as that is authorizing server it",
    "start": "286639",
    "end": "292639"
  },
  {
    "text": "passes and access token to The Client app and this client app can now",
    "start": "292639",
    "end": "298560"
  },
  {
    "text": "Exchange present this access token to use the protected resources so this is a",
    "start": "298560",
    "end": "304400"
  },
  {
    "text": "Trad this is a client credentials flow in O 2.0 there are other flows that are more relevant for web applications but I",
    "start": "304400",
    "end": "311960"
  },
  {
    "text": "just wanted to give an example on how this access token mechanics",
    "start": "311960",
    "end": "317520"
  },
  {
    "text": "work um so now let us talk about IDC which is one of",
    "start": "317520",
    "end": "322639"
  },
  {
    "text": "the things that we'll talk when we talk about workload identity um so open ID",
    "start": "322639",
    "end": "328160"
  },
  {
    "text": "connect specifies couple of Standards to help do the authentication and one of the things",
    "start": "328160",
    "end": "334520"
  },
  {
    "text": "that we touch upon IDC is mostly around ID tokens uh that ydcs specifies it",
    "start": "334520",
    "end": "340160"
  },
  {
    "text": "should be a jot token um and this jot token will have U claims for example",
    "start": "340160",
    "end": "347800"
  },
  {
    "text": "email name Etc to identify the entity and yes",
    "start": "347800",
    "end": "355360"
  },
  {
    "text": "let's let's see how open ID connect works so you see the St prr again you have an application and you have a",
    "start": "355360",
    "end": "361479"
  },
  {
    "text": "authorizing server uh the client sends a request and there is the request data",
    "start": "361479",
    "end": "368240"
  },
  {
    "text": "that you can see it says profile open ID that is important when you are sending a request mentioning that I need an oidc",
    "start": "368240",
    "end": "374280"
  },
  {
    "text": "thing and you the client gets the authoriz in code and now the server",
    "start": "374280",
    "end": "379440"
  },
  {
    "text": "sends this authorization code to the authorization server and you see the difference here is that the",
    "start": "379440",
    "end": "384560"
  },
  {
    "text": "authorization server is now sending two things ID token and access token so the",
    "start": "384560",
    "end": "389880"
  },
  {
    "text": "server now can decide to uh do something based on this ID token and the server",
    "start": "389880",
    "end": "396000"
  },
  {
    "text": "will know how to use that ID token because it it will have a lot of details about the entity and again the same",
    "start": "396000",
    "end": "403759"
  },
  {
    "text": "process so how does our previous diagram look like if we put oidc into",
    "start": "403759",
    "end": "410319"
  },
  {
    "text": "perspective yeah this is just for a so here and now anise help us understand",
    "start": "410319",
    "end": "417280"
  },
  {
    "text": "workload identity okay um so we had a refresher on IDC um now jumping into",
    "start": "417280",
    "end": "424240"
  },
  {
    "text": "workload identity in kuity so first thing we start off is by defining what is a workload um so in kubernetes",
    "start": "424240",
    "end": "431319"
  },
  {
    "text": "context a workload is an application that's just running in a pod a pod is a set of containers that contains the",
    "start": "431319",
    "end": "437919"
  },
  {
    "text": "business logic and each pod runs in a name space and it has a unique name and",
    "start": "437919",
    "end": "443680"
  },
  {
    "text": "then it also has a service account tied to it uh so when we look at workload entity",
    "start": "443680",
    "end": "450720"
  },
  {
    "text": "in kues um some of the use cases that come up uh the first one is the Pod",
    "start": "450720",
    "end": "457960"
  },
  {
    "text": "trying to authenticate with the kubernetes API server uh so applications running within the pods in the cluster",
    "start": "457960",
    "end": "464840"
  },
  {
    "text": "often need to interact with a QBE API server and for this purpose what they do is they use the kubernetes service",
    "start": "464840",
    "end": "471319"
  },
  {
    "text": "account um that's tied to the part and this is crucial for applications to",
    "start": "471319",
    "end": "477680"
  },
  {
    "text": "perform actions like scale scaling pods accessing kubernetes Secrets getting data from config Maps or also inspecting",
    "start": "477680",
    "end": "485599"
  },
  {
    "text": "the cluster State uh the second most common scenario is authenticating",
    "start": "485599",
    "end": "491199"
  },
  {
    "text": "communication from between the workloads so workload to workload um so for PTO",
    "start": "491199",
    "end": "496840"
  },
  {
    "text": "pod Communication in kubernetes it is essential for uh ensuring that the security and the trustworthiness of",
    "start": "496840",
    "end": "502919"
  },
  {
    "text": "interactions between the workloads in the cluster and then I think the third",
    "start": "502919",
    "end": "508599"
  },
  {
    "text": "common use case that we see with workload identity is for pods that's running in the cluster uh they need to",
    "start": "508599",
    "end": "514320"
  },
  {
    "text": "access an external protected resource uh so this external protected resource",
    "start": "514320",
    "end": "520518"
  },
  {
    "text": "could be a database an API service or any managed service that's running in a cloud provider um that requires",
    "start": "520519",
    "end": "527880"
  },
  {
    "text": "authentication and authorization uh the first two scenarios have been broadly covered in a couple of",
    "start": "527880",
    "end": "534160"
  },
  {
    "text": "other talks and then like that's something that's widely talked about uh so for the purpose of this talk what we",
    "start": "534160",
    "end": "539880"
  },
  {
    "text": "want to do is focus mainly on the third one which is trying to access external",
    "start": "539880",
    "end": "545160"
  },
  {
    "text": "protected resources using workload entity um so when we look at workload",
    "start": "545160",
    "end": "551040"
  },
  {
    "text": "identity options like some of it that comes to mind is what you see here on the list like this is in no way the",
    "start": "551040",
    "end": "556760"
  },
  {
    "text": "entire list uh but just looking at it the first one is kubernetes certificates API uh so kubernetes has had support for",
    "start": "556760",
    "end": "564880"
  },
  {
    "text": "Native certificate provision flows for a long time now uh this can be done by",
    "start": "564880",
    "end": "570040"
  },
  {
    "text": "just creating a certificate signing request um and then a CSR is used to request that a certificate be signed by",
    "start": "570040",
    "end": "576720"
  },
  {
    "text": "a denoted signer and then it can be approved or denied by an approver before",
    "start": "576720",
    "end": "581760"
  },
  {
    "text": "it's actually signed uh the one caveat with this is uh it",
    "start": "581760",
    "end": "588160"
  },
  {
    "text": "requires a implementation of an approver which means there is upfront work that",
    "start": "588160",
    "end": "594720"
  },
  {
    "text": "needs to be done in order to consume this in a secure way um and and then the second one is service mesh so if you're",
    "start": "594720",
    "end": "601800"
  },
  {
    "text": "using a service mesh like estto linkd or Envoy uh these tools often provide",
    "start": "601800",
    "end": "606920"
  },
  {
    "text": "build-in features for secure authentication and authorization uh between the services uh including mtls",
    "start": "606920",
    "end": "613680"
  },
  {
    "text": "and fine grain Access Control uh and then the third one U SPI is a standard",
    "start": "613680",
    "end": "619959"
  },
  {
    "text": "and then Spire is an implementation of spi apis that performs node and workload",
    "start": "619959",
    "end": "625519"
  },
  {
    "text": "attestation uh to securely issue s wids and two workloads and then they verify",
    "start": "625519",
    "end": "631920"
  },
  {
    "text": "the Swit that's presented by other workloads uh so the thing with spif is it does workload to workload",
    "start": "631920",
    "end": "637880"
  },
  {
    "text": "authentication really well but in addition to that the jots that are generated can also be used for workload",
    "start": "637880",
    "end": "644160"
  },
  {
    "text": "identity to access external protected resources so before I talk about the",
    "start": "644160",
    "end": "649240"
  },
  {
    "text": "fourth one kubernetes service account like one thing is out of the for three options that we talked about uh service",
    "start": "649240",
    "end": "656240"
  },
  {
    "text": "mesh and Spire are add-ons that that need to be additionally installed in the",
    "start": "656240",
    "end": "661360"
  },
  {
    "text": "cluster like it's not something that comes by default and the certificates API definitely need some amount of",
    "start": "661360",
    "end": "668240"
  },
  {
    "text": "groundwork to implement an approval uh so this brings us to the last option",
    "start": "668240",
    "end": "673560"
  },
  {
    "text": "that we have on the slide here and that's the one that we're going to be discussing about in this talk which is kuity service account",
    "start": "673560",
    "end": "680720"
  },
  {
    "text": "tokens okay so why kuet service account tokens uh the first thing that comes to",
    "start": "680720",
    "end": "686240"
  },
  {
    "text": "mind is simplicity so kubernetes service account token tokens are built into the kubernetes platform uh making them the",
    "start": "686240",
    "end": "692839"
  },
  {
    "text": "simplest and the straightforward option for managing identity with kubernetes cluster uh you don't need to set up any",
    "start": "692839",
    "end": "700560"
  },
  {
    "text": "external services or additional components to use them uh and then the second one is native integration it's",
    "start": "700560",
    "end": "707560"
  },
  {
    "text": "tightly integrated it's conformant and it's tested um and when we talk about",
    "start": "707560",
    "end": "713600"
  },
  {
    "text": "kubernetes service accounts typically there are two of them one is the default service account token uh which is",
    "start": "713600",
    "end": "720120"
  },
  {
    "text": "existed in kuties for a very long time now um some of the issues with that was",
    "start": "720120",
    "end": "725560"
  },
  {
    "text": "one it was automatically generated and stored in a kubernetes secret for every workload that was created uh that was",
    "start": "725560",
    "end": "732360"
  },
  {
    "text": "until recently and uh there's a long cap that has been worked on to stop doing",
    "start": "732360",
    "end": "738440"
  },
  {
    "text": "that and move uh to a more secure projected service account uh but in terms of other issues like why we say",
    "start": "738440",
    "end": "744760"
  },
  {
    "text": "it's not secure is the jots are not audience bound the Json token uh so",
    "start": "744760",
    "end": "750279"
  },
  {
    "text": "basically any recipient of the service account J for for the default service account can masquerade as a presenter to",
    "start": "750279",
    "end": "756120"
  },
  {
    "text": "anyone else uh and then the other issues were these jots were also not time bound",
    "start": "756120",
    "end": "762240"
  },
  {
    "text": "so they wouldn't expire the lifetime of it was basically tied to the kubernetes service account existing in the cluster",
    "start": "762240",
    "end": "768680"
  },
  {
    "text": "and the scalability issue was every time a service account toen was generated a",
    "start": "768680",
    "end": "774160"
  },
  {
    "text": "kubernetes secret was created and then that secret was mounted into the volume which means you have if you had many",
    "start": "774160",
    "end": "779560"
  },
  {
    "text": "pods consuming a service account then you just had like a lot of Secrets uh so",
    "start": "779560",
    "end": "784920"
  },
  {
    "text": "in comes projected service account token so it's a bounded service account token that's time based uh these service",
    "start": "784920",
    "end": "791959"
  },
  {
    "text": "account tokens are useful for workload to workload communication um and can be used for accessing external resources",
    "start": "791959",
    "end": "798279"
  },
  {
    "text": "and they're also bounded service account so basically the kubernetes API server",
    "start": "798279",
    "end": "803560"
  },
  {
    "text": "will enforce uh the required attenuations that is the time binding",
    "start": "803560",
    "end": "809120"
  },
  {
    "text": "the audience binding and all of those okay so this is how you as a like",
    "start": "809120",
    "end": "816480"
  },
  {
    "text": "a pod can request a projected service account token so on the left side what you have is a volume config uh basically",
    "start": "816480",
    "end": "823720"
  },
  {
    "text": "the name there is the file name where the token will be uh mounted inside the",
    "start": "823720",
    "end": "829760"
  },
  {
    "text": "Pod and then the audience field is configurable and it's also required so you basically can say like I want a",
    "start": "829760",
    "end": "835720"
  },
  {
    "text": "token for a particular audience and the expirations seconds here denotes how long the issued token needs to be valid",
    "start": "835720",
    "end": "843120"
  },
  {
    "text": "um and then when we look on the right side uh this is what the new s account tokens look like so the audience field",
    "start": "843120",
    "end": "850079"
  },
  {
    "text": "there is what is configured in the volume config uh and then the issuer claim and then if you look at the",
    "start": "850079",
    "end": "856160"
  },
  {
    "text": "expired and I issued that like that should basically say one hour uh but in",
    "start": "856160",
    "end": "862560"
  },
  {
    "text": "addition to the standard claims that's available in the JW there's also kuber specific claims that are nested under",
    "start": "862560",
    "end": "869240"
  },
  {
    "text": "kubernetes doio that can uniquely identify a service account so there's information about the Pod for which this",
    "start": "869240",
    "end": "876079"
  },
  {
    "text": "token was generated and there's also information about the service account for which this part was generated and",
    "start": "876079",
    "end": "881720"
  },
  {
    "text": "it's just not the name but also the uid so if the same service account is deleted and recreated the token is no",
    "start": "881720",
    "end": "888880"
  },
  {
    "text": "longer valid okay uh so workload identity",
    "start": "888880",
    "end": "895240"
  },
  {
    "text": "Federation uh so the we talked about IDC we talked about workload identity what a",
    "start": "895240",
    "end": "900360"
  },
  {
    "text": "workload is and service account tokens so workload identity Federation is what ties all of this together and enables",
    "start": "900360",
    "end": "907680"
  },
  {
    "text": "you to basically access an external protected resource so work entity Federation allows you to use the",
    "start": "907680",
    "end": "913720"
  },
  {
    "text": "existing authentic authentication stack in Cloud providers to authenticate and authorize workloads running in a",
    "start": "913720",
    "end": "919440"
  },
  {
    "text": "kubernetes cluster um Federation basically allows you to bridge the gap",
    "start": "919440",
    "end": "925120"
  },
  {
    "text": "between the Clusters identity system and the cloud providers identity so enabling",
    "start": "925120",
    "end": "930880"
  },
  {
    "text": "a seamless and secure interaction between them uh it Federation basically",
    "start": "930880",
    "end": "936759"
  },
  {
    "text": "the work entity Federation follows the o o 2.0 exchange protocol specification so",
    "start": "936759",
    "end": "942319"
  },
  {
    "text": "you provide a credential from your IDP to a secure security token service so",
    "start": "942319",
    "end": "947959"
  },
  {
    "text": "SDS over here uh which verifies the identity on the credential and then returns a Federated token and exchange",
    "start": "947959",
    "end": "954040"
  },
  {
    "text": "and if you look at the flow diagram basically we have a kubernetes workload which is sending the the projected",
    "start": "954040",
    "end": "959240"
  },
  {
    "text": "service account token to an STDs the STDs uses the open ID connect Discovery",
    "start": "959240",
    "end": "964720"
  },
  {
    "text": "protocol uh to get the discovery document from the well-known open ID configuration and that Discovery doc",
    "start": "964720",
    "end": "972000"
  },
  {
    "text": "contains the Jo URI the Json web key Set uh which contains the public key of the",
    "start": "972000",
    "end": "978880"
  },
  {
    "text": "service account signer and using that the STDs can validate the authenticity",
    "start": "978880",
    "end": "984120"
  },
  {
    "text": "of the token that it just got and then there's also a trust relationship uh which basically says if I have a token",
    "start": "984120",
    "end": "990639"
  },
  {
    "text": "from a particular issuer and that matches the subject then give me a token so the STS performs those validation and",
    "start": "990639",
    "end": "998319"
  },
  {
    "text": "returns a Federated token that can be used by the app so this flow diagram is essentially",
    "start": "998319",
    "end": "1005519"
  },
  {
    "text": "the same as the previous similar to the previous one but it has two additional components uh so we have the cubet on",
    "start": "1005519",
    "end": "1011560"
  },
  {
    "text": "one side and then the external protected resource which covers the endtoend flow of what we're talking about today um and",
    "start": "1011560",
    "end": "1018120"
  },
  {
    "text": "also as an example in this one we are referring to the Microsoft identity platform uh and in terms of the entire",
    "start": "1018120",
    "end": "1025240"
  },
  {
    "text": "flow cuade generates the token gives it to the workload as part of the Pod startup the Pod can exchange that token",
    "start": "1025240",
    "end": "1032640"
  },
  {
    "text": "so it basically sends that to the identity platform uh and then the identity platform at that point is going",
    "start": "1032640",
    "end": "1038240"
  },
  {
    "text": "to check the Trust on the identity validate the incoming token uh using the",
    "start": "1038240",
    "end": "1043360"
  },
  {
    "text": "discovery protocol that we talked about and then it issues an Azure ad access token to the work Lo and at this point",
    "start": "1043360",
    "end": "1050320"
  },
  {
    "text": "the workload that's running on the cluster can send the a Azure ad access token and it can get it can access the",
    "start": "1050320",
    "end": "1059280"
  },
  {
    "text": "resource and and an example of that is a part trying to get a secret from Azure",
    "start": "1059280",
    "end": "1064520"
  },
  {
    "text": "key World um and that brings me to the next slide uh which is a demo so as part",
    "start": "1064520",
    "end": "1071919"
  },
  {
    "text": "of this demo what we're going to do is we're going to try setting up a kind cluster the hard way uh which",
    "start": "1071919",
    "end": "1079720"
  },
  {
    "text": "involves uh hosting the issuer URL um and the discovery document on the Json",
    "start": "1079720",
    "end": "1085360"
  },
  {
    "text": "web keid and after that I'm going to deploy a demo application that tries to use workload identity in Azure uh to get",
    "start": "1085360",
    "end": "1093240"
  },
  {
    "text": "a secret from keyword is the is the font visible or should we show me a",
    "start": "1093240",
    "end": "1100200"
  },
  {
    "text": "bit I have to see there",
    "start": "1102760",
    "end": "1110320"
  },
  {
    "text": "okay so the first thing we're doing is we're generating a service account signing key pair that will be used by the kind cluster and this this step of",
    "start": "1111720",
    "end": "1119679"
  },
  {
    "text": "setting up an Azure storage account for hosting issuer URL this is something that we are doing for the demo because",
    "start": "1119679",
    "end": "1125480"
  },
  {
    "text": "the oidc ISU URL and the discovery doc needs to be publicly accessible on https",
    "start": "1125480",
    "end": "1130919"
  },
  {
    "text": "but if you have any cloud provider and you create a cluster with it like all of this is handled by them and then they",
    "start": "1130919",
    "end": "1136880"
  },
  {
    "text": "also ensure that the service account signing keys are rotated on a regular basis okay so this sorry so this is an",
    "start": "1136880",
    "end": "1146039"
  },
  {
    "text": "example of the open ID Discovery Doc and as you can see it calls out the issuer",
    "start": "1146039",
    "end": "1152159"
  },
  {
    "text": "that would also be present in the token and then the Jo URI is basically the Json web key set where the public",
    "start": "1152159",
    "end": "1158200"
  },
  {
    "text": "signing keys are",
    "start": "1158200",
    "end": "1162039"
  },
  {
    "text": "so okay so this one is uploading the",
    "start": "1164480",
    "end": "1169559"
  },
  {
    "text": "Discovery doc to the storage account so that it's publicly accessible and once that's done the next thing we could to",
    "start": "1169559",
    "end": "1175840"
  },
  {
    "text": "do is verify that we can get it using",
    "start": "1175840",
    "end": "1181640"
  },
  {
    "text": "curl okay um so it's accessible the next thing we do is we're going to upload the",
    "start": "1183840",
    "end": "1189840"
  },
  {
    "text": "public key uh in The Jock doc uh and then for the purpose of this demo I am",
    "start": "1189840",
    "end": "1195159"
  },
  {
    "text": "using a CLI tool that we built in Azure which is called Azure workload identity CLI tool and what it does you can",
    "start": "1195159",
    "end": "1202520"
  },
  {
    "text": "basically pass in and uh input file which contains the public key and then",
    "start": "1202520",
    "end": "1208039"
  },
  {
    "text": "it will generate the jcks document for you so it outputs that to jock. Json",
    "start": "1208039",
    "end": "1213919"
  },
  {
    "text": "which uh if you know there is a key ID and then that's the public key the for the service accounts and that is also",
    "start": "1213919",
    "end": "1221559"
  },
  {
    "text": "being uploaded and then the next thing we do is very we verify that that endpoint is also publicly accessible",
    "start": "1221559",
    "end": "1228240"
  },
  {
    "text": "because uh the a needs to get access to it um and then the next thing we're",
    "start": "1228240",
    "end": "1233400"
  },
  {
    "text": "doing is creating a kind cluster uh it's a fairly simple config uh but the things",
    "start": "1233400",
    "end": "1238919"
  },
  {
    "text": "to note is we are reusing the keys that we generated at the start the service account signing keys and then in",
    "start": "1238919",
    "end": "1244960"
  },
  {
    "text": "addition to that we are configuring the Serv account issuer to be the URL that we just uh uh",
    "start": "1244960",
    "end": "1252640"
  },
  {
    "text": "hosted and that creates the cluster I'm just going to skip the",
    "start": "1252640",
    "end": "1260120"
  },
  {
    "text": "okay uh so the next thing we do is create an identity uh on the cloud",
    "start": "1263799",
    "end": "1269240"
  },
  {
    "text": "provider side so in case of azure I'm creating a managed identity to which I'm going to try the authorization rule so",
    "start": "1269240",
    "end": "1276520"
  },
  {
    "text": "the identity is created and then the next thing that's doing is setting a policy in key wall to say the identity",
    "start": "1276520",
    "end": "1282440"
  },
  {
    "text": "that we just created has get permissions for secrets and this is the trust that I",
    "start": "1282440",
    "end": "1290080"
  },
  {
    "text": "talked about while talking about Federation so basically this command is setting up a trust on the cloud provider",
    "start": "1290080",
    "end": "1296240"
  },
  {
    "text": "identity to say if I give you a jot that has this particular issuer that is there",
    "start": "1296240",
    "end": "1303159"
  },
  {
    "text": "and then is has this particular subject uh then you can trust that and then give",
    "start": "1303159",
    "end": "1308520"
  },
  {
    "text": "me a token and then as part of the demo I'm also installing the Azure workloud inty web hook here just so that it makes",
    "start": "1308520",
    "end": "1317000"
  },
  {
    "text": "my demo easier uh but this is not something that is required uh the purpose of the web Hook",
    "start": "1317000",
    "end": "1323159"
  },
  {
    "text": "is just to inject the environment variables that I need for the demo but in addition to that it will also add the",
    "start": "1323159",
    "end": "1329760"
  },
  {
    "text": "projected service account token that can be used for workload",
    "start": "1329760",
    "end": "1334640"
  },
  {
    "text": "identity okay uh and then in terms of the application so basically we're",
    "start": "1336679",
    "end": "1342279"
  },
  {
    "text": "creating a namespace called cucon demo and then we create a service account that can be used by by the demo app and",
    "start": "1342279",
    "end": "1350039"
  },
  {
    "text": "then The annotation that I'm doing here is also very specific to Azure it doesn't apply to every cloud",
    "start": "1350039",
    "end": "1356159"
  },
  {
    "text": "provider uh and once we do that the next thing I'm doing is deploying a simple pod and this pod is implemented using",
    "start": "1356159",
    "end": "1363080"
  },
  {
    "text": "Azure s Cas to get a secret from aure Key world and all it does is loads up the projected service account token",
    "start": "1363080",
    "end": "1369559"
  },
  {
    "text": "exchanges that using the workload identity Federation",
    "start": "1369559",
    "end": "1374039"
  },
  {
    "text": "flow okay so once we do an apply and then wait for the port to be running uh",
    "start": "1376960",
    "end": "1382679"
  },
  {
    "text": "we're going to look at three things the first thing is I want to show you the projected service account token that was injected into the Pod so like let's look",
    "start": "1382679",
    "end": "1389360"
  },
  {
    "text": "at the volume spec and towards the end we see that the Azure identity token is",
    "start": "1389360",
    "end": "1396120"
  },
  {
    "text": "there and then the lifetime of that is basically 1 hour and the audience field",
    "start": "1396120",
    "end": "1401240"
  },
  {
    "text": "is something that's static that's configured for Azure workload entity uh and then the next thing that we're going",
    "start": "1401240",
    "end": "1406960"
  },
  {
    "text": "to do is look at the actual projected service account token that was injected into the",
    "start": "1406960",
    "end": "1412640"
  },
  {
    "text": "Pod and I'm using the step CLI here to inspect it uh but the key things to note",
    "start": "1412640",
    "end": "1418080"
  },
  {
    "text": "is in there we have the audience field that we had configured and then the",
    "start": "1418080",
    "end": "1423240"
  },
  {
    "text": "issuer is also the service account issuer that was configured for the cluster and obviously the additional",
    "start": "1423240",
    "end": "1430000"
  },
  {
    "text": "claims and then the subject is account cation of the name space and the",
    "start": "1430000",
    "end": "1435600"
  },
  {
    "text": "name and then the last thing that we're going to do do is see if in the logs that the Pod is able to access it so the",
    "start": "1435600",
    "end": "1443039"
  },
  {
    "text": "Pod got the secret from keyo I'm using workload",
    "start": "1443039",
    "end": "1449480"
  },
  {
    "text": "identity okay thanks anise um though I just",
    "start": "1450039",
    "end": "1457159"
  },
  {
    "text": "wanted to ask one question anise like you already mentioned this web web hook thing you mentioned that it's not",
    "start": "1457159",
    "end": "1463080"
  },
  {
    "text": "required so if I deploy this workload or pod and have this configuration to do the project service account token and",
    "start": "1463080",
    "end": "1469720"
  },
  {
    "text": "establish the Federated credential we will be good yeah so the web Hook was",
    "start": "1469720",
    "end": "1475200"
  },
  {
    "text": "only for injecting certain environment variables that was required for the Azure SDK but uh as long as you put the",
    "start": "1475200",
    "end": "1483440"
  },
  {
    "text": "projected service account token volume in the Pod like you don't really need the Web book awesome um so let's touch",
    "start": "1483440",
    "end": "1490520"
  },
  {
    "text": "upon the other uses in kubernetes um so cluster AP provider asor a project which",
    "start": "1490520",
    "end": "1496840"
  },
  {
    "text": "I contribute to and it has started to use workload identity uh we'll see in",
    "start": "1496840",
    "end": "1501960"
  },
  {
    "text": "more detail how that works there also kubernetes Secret store CSI driver uses",
    "start": "1501960",
    "end": "1508000"
  },
  {
    "text": "workload identity",
    "start": "1508000",
    "end": "1512240"
  },
  {
    "text": "and folks who don't know what cluster API provider Azor is it's written on the",
    "start": "1513440",
    "end": "1518520"
  },
  {
    "text": "screen it's a it's a sick cluster life cycle project that helps you provision kubernetes cluster on Azor there are",
    "start": "1518520",
    "end": "1526240"
  },
  {
    "text": "other providers for Google ws and Etc and one of the basic ways to give",
    "start": "1526240",
    "end": "1533440"
  },
  {
    "text": "credentials to you know the aor uh cluster API provider AER manager is",
    "start": "1533440",
    "end": "1539440"
  },
  {
    "text": "using service principles uh you know so that that manager is able to create resources on azer and that is roughly",
    "start": "1539440",
    "end": "1548159"
  },
  {
    "text": "using username passwords which is not so",
    "start": "1548159",
    "end": "1554159"
  },
  {
    "text": "decent um so when we implemented workload identity in capy uh we saw the",
    "start": "1554799",
    "end": "1560559"
  },
  {
    "text": "demo that anise gave so this is on the top you can see the spec of uh the capc",
    "start": "1560559",
    "end": "1566679"
  },
  {
    "text": "manager which tries to have a service account token and this is what gets projected in into the Pod and you can",
    "start": "1566679",
    "end": "1574520"
  },
  {
    "text": "see on the top in the bottom this is the path where the token gets and then it uses the sdks to talk to you know as or",
    "start": "1574520",
    "end": "1582679"
  },
  {
    "text": "ad to access protected resources and",
    "start": "1582679",
    "end": "1588240"
  },
  {
    "text": "and you you were seeing in the demo where an is used in CLI to to create uh",
    "start": "1588240",
    "end": "1594640"
  },
  {
    "text": "identity here I'm just trying to give an example you can go onto the azer portal and create an app",
    "start": "1594640",
    "end": "1600880"
  },
  {
    "text": "registration uh that is the equivalent of what was done in CLI and once you you",
    "start": "1600880",
    "end": "1606440"
  },
  {
    "text": "create that application on azer you can now establish the Federation this is we",
    "start": "1606440",
    "end": "1611520"
  },
  {
    "text": "can call it like creating the Federated credentials and you can see that we put the cluster ISU URL and the name space",
    "start": "1611520",
    "end": "1618640"
  },
  {
    "text": "of the workload or the Pod that is going to access the resources here on Azor the",
    "start": "1618640",
    "end": "1623799"
  },
  {
    "text": "service account name and audience",
    "start": "1623799",
    "end": "1629799"
  },
  {
    "text": "right um so once we're done with all of this uh this is more uh capes specific",
    "start": "1629880",
    "end": "1635159"
  },
  {
    "text": "but the only thing that you now need to do is tell the client ID and the Tenant ID to that pod and you should be able to",
    "start": "1635159",
    "end": "1644120"
  },
  {
    "text": "create clusters on azer or talk to Azor to access",
    "start": "1644120",
    "end": "1649519"
  },
  {
    "text": "resources okay uh so the other usage that we wanted to talk about was Secret",
    "start": "1652279",
    "end": "1657919"
  },
  {
    "text": "store CSI driver uh so it's a Cod sub project um and it basically implements",
    "start": "1657919",
    "end": "1663880"
  },
  {
    "text": "the container storage interface uh and it what it does is it can talk to any",
    "start": "1663880",
    "end": "1669720"
  },
  {
    "text": "external Secret store so and it can get the secrets and then it it mounts them",
    "start": "1669720",
    "end": "1675480"
  },
  {
    "text": "in temp FS and uh in the demo we looked",
    "start": "1675480",
    "end": "1680519"
  },
  {
    "text": "at an app which was custom basically implementing Azure SDK to talk to keyword uh but if you were using a",
    "start": "1680519",
    "end": "1687000"
  },
  {
    "text": "secret storage CSI driver uh you would have to do any of that like you basically would have a generic code that",
    "start": "1687000",
    "end": "1692480"
  },
  {
    "text": "reads from the file system and then you would just install the driver and the provider uh that would use workload",
    "start": "1692480",
    "end": "1698279"
  },
  {
    "text": "entity to talk to your external Secret store get the secrets and mount it for you um so this is a very high level flow",
    "start": "1698279",
    "end": "1705519"
  },
  {
    "text": "of The Secret store CSI driver and I know it's a lot even for the high level uh but what it what happens underneath",
    "start": "1705519",
    "end": "1713640"
  },
  {
    "text": "is uh the cubet will generate the service account token on the Node and it",
    "start": "1713640",
    "end": "1720000"
  },
  {
    "text": "does this when a pod gets created and says hey I want a volume using Secret store CSI driver and I the cuet calls",
    "start": "1720000",
    "end": "1727760"
  },
  {
    "text": "the CSI driver on Unix domain socket so these tokens are sent as part of the RPC",
    "start": "1727760",
    "end": "1733080"
  },
  {
    "text": "call and at this point the CSR driver sends those service account to tokens to",
    "start": "1733080",
    "end": "1738360"
  },
  {
    "text": "a CSI provider which again is a Unix domain socket and we support four",
    "start": "1738360",
    "end": "1744240"
  },
  {
    "text": "different providers today like uh Azure Google AWS Hashi carp with many more out",
    "start": "1744240",
    "end": "1749919"
  },
  {
    "text": "there that have been implemented uh but the CSI Drive provider would use the",
    "start": "1749919",
    "end": "1755399"
  },
  {
    "text": "service account tokens and then workload identity to talk to the external Secret store uh get the secrets sends it back",
    "start": "1755399",
    "end": "1761880"
  },
  {
    "text": "to the provider and then the provider sends it back to the driver and mounts the secret as temp FS",
    "start": "1761880",
    "end": "1769320"
  },
  {
    "text": "um and also this token request in CSI driver was added in kubernetes 120 uh it",
    "start": "1770240",
    "end": "1776000"
  },
  {
    "text": "was majorly it's it's majorly used in Secret store but it could also be used by other CSI drivers uh for disc attach",
    "start": "1776000",
    "end": "1783640"
  },
  {
    "text": "detach basically instead of using a common identity for the driver you could",
    "start": "1783640",
    "end": "1789080"
  },
  {
    "text": "actually rely on the workloads identity for performing",
    "start": "1789080",
    "end": "1794399"
  },
  {
    "text": "operations okay uh so we wanted to put a meme so that's why we have the slide uh",
    "start": "1794399",
    "end": "1801120"
  },
  {
    "text": "but we have come towards the end of the talk uh and we talked about the what and",
    "start": "1801120",
    "end": "1807279"
  },
  {
    "text": "how of workload identity so far so we would like to end our talk with some of",
    "start": "1807279",
    "end": "1813120"
  },
  {
    "text": "the wise uh and so one thing is applications running uh use a secret or",
    "start": "1813120",
    "end": "1818960"
  },
  {
    "text": "a certificate to access protected resources in cloud provider uh the issue with this is secrets and certificates",
    "start": "1818960",
    "end": "1825039"
  },
  {
    "text": "POS a security risk and thing is they could also expire and once they expire",
    "start": "1825039",
    "end": "1830200"
  },
  {
    "text": "this could result in downtime uh and then the other thing is managing Secrets is just hard uh so workload identity",
    "start": "1830200",
    "end": "1837399"
  },
  {
    "text": "Federation essentially solves this problem uh because you no longer have secrets and in addition to that workload",
    "start": "1837399",
    "end": "1844360"
  },
  {
    "text": "identity also lets you assign distinct fine grained uh identities and authorization for each workload in your",
    "start": "1844360",
    "end": "1852639"
  },
  {
    "text": "cluster um these are some of the resources that you can look for if you want to understand",
    "start": "1855919",
    "end": "1862360"
  },
  {
    "text": "more around service account token or workload identity we we we talked about",
    "start": "1862360",
    "end": "1867559"
  },
  {
    "text": "in context of Azor because that's where we contributed to and we were experimenting with but workload identity",
    "start": "1867559",
    "end": "1873679"
  },
  {
    "text": "in GK is also something that's possible it's a it's a good read there",
    "start": "1873679",
    "end": "1880158"
  },
  {
    "text": "and we are done with the talk so thank you very much and if you have any questions feel free to ask",
    "start": "1880360",
    "end": "1888399"
  },
  {
    "text": "thank [Applause]",
    "start": "1888399",
    "end": "1894289"
  },
  {
    "text": "you um one more thing yeah you can send",
    "start": "1896760",
    "end": "1902120"
  },
  {
    "text": "feedback uh is there an equivalent to uh this in AWS can I map a roll into a",
    "start": "1902240",
    "end": "1908799"
  },
  {
    "text": "workload or uh yeah so workload entity is supported pretty much by most of the cloud providers uh but basically you can",
    "start": "1908799",
    "end": "1915919"
  },
  {
    "text": "map a service account token to one of",
    "start": "1915919",
    "end": "1920679"
  },
  {
    "text": "the so I played with this a little bit um one of the core problems that I have in Azure is that I need to or I think I",
    "start": "1924200",
    "end": "1933279"
  },
  {
    "text": "need to create a service account per pod",
    "start": "1933279",
    "end": "1938399"
  },
  {
    "text": "right uh so uh it depends so like names space is a security boundary so and you",
    "start": "1938399",
    "end": "1944880"
  },
  {
    "text": "would have one service account per workload essentially yeah yeah yeah so effectively to",
    "start": "1944880",
    "end": "1950240"
  },
  {
    "text": "separate workloads right I have to go through that process of creating an individual service account now of course",
    "start": "1950240",
    "end": "1956559"
  },
  {
    "text": "I have you know a thousand service accounts that I then have to manage uh sure I don't have any more secrets",
    "start": "1956559",
    "end": "1963399"
  },
  {
    "text": "but I still have to manage that those thousand service accounts right uh you I",
    "start": "1963399",
    "end": "1969519"
  },
  {
    "text": "think typically you already have service accounts tied to your workloads just to have like the rback tied down rather",
    "start": "1969519",
    "end": "1975600"
  },
  {
    "text": "than having a default service account MH but within the names space you would need to manage a service account per",
    "start": "1975600",
    "end": "1981960"
  },
  {
    "text": "workload like yes uh but also on the other end you would create a Federated",
    "start": "1981960",
    "end": "1987159"
  },
  {
    "text": "identity credential so you would establish trust I think your questions around having many fic's like is that",
    "start": "1987159",
    "end": "1993559"
  },
  {
    "text": "the concern so more do you have a recommendation for",
    "start": "1993559",
    "end": "1998760"
  },
  {
    "text": "a more scalable solution to you know managing identities rather than uh you",
    "start": "1998760",
    "end": "2005240"
  },
  {
    "text": "know tying them directly to service accounts in Azure specifically so I",
    "start": "2005240",
    "end": "2010639"
  },
  {
    "text": "think on the Azure side typically you would already have a user assign manag entity or an Azure ad service principle",
    "start": "2010639",
    "end": "2018159"
  },
  {
    "text": "and in terms of actual configuration it comes down to just configuring fic's on that right",
    "start": "2018159",
    "end": "2024159"
  },
  {
    "text": "like you would because you already have service accounts in the cluster so it comes down to managing fic's rather than",
    "start": "2024159",
    "end": "2030919"
  },
  {
    "text": "like individual service accounts uh and then I also know we're working on like a wild card support so you you would be",
    "start": "2030919",
    "end": "2037279"
  },
  {
    "text": "able to do something per Nam space rather than doing like individual ones yeah I'm waiting for the wild cards okay",
    "start": "2037279",
    "end": "2044320"
  },
  {
    "text": "but yeah I mean I would love to chat with you yeah absolutely awes hey guys thanks for talk uh",
    "start": "2044320",
    "end": "2051960"
  },
  {
    "text": "question for you if you're running multicontainer pods uh so say some business app container and then sidecar",
    "start": "2051960",
    "end": "2058800"
  },
  {
    "text": "containers to do something and you're using workload identity Federation are you aware of any controls",
    "start": "2058800",
    "end": "2065398"
  },
  {
    "text": "so that um say if a sidecar was compromised that workload identity the",
    "start": "2065399",
    "end": "2071839"
  },
  {
    "text": "Federation that the the compromised sidecar container wouldn't be able to Leverage The Federation that's been made",
    "start": "2071839",
    "end": "2078960"
  },
  {
    "text": "available for the business app yeah that's a good question um it applies on the Pod level uh so the thing is if if",
    "start": "2078960",
    "end": "2085599"
  },
  {
    "text": "you look at the claims that's added the subject is just the service account name and name space which is tied to just",
    "start": "2085599",
    "end": "2092320"
  },
  {
    "text": "every container in there so in case of a compromise you can't go to ask gr as a",
    "start": "2092320",
    "end": "2097480"
  },
  {
    "text": "single container like it would just essentially mean the entire pod is compromised so that's a no yes do you",
    "start": "2097480",
    "end": "2103920"
  },
  {
    "text": "know is anyone working on anything like that uh no get more granular within the Pod no but uh again I would love to chat",
    "start": "2103920",
    "end": "2110560"
  },
  {
    "text": "okay",
    "start": "2110560",
    "end": "2112760"
  },
  {
    "text": "cool yeah and if you have more questions we can chat up",
    "start": "2116079",
    "end": "2122200"
  },
  {
    "text": "here",
    "start": "2123400",
    "end": "2126400"
  }
]