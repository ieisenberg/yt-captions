[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "hello everyone thank you all for joining me today i'm very honored to share",
    "start": "1280",
    "end": "8000"
  },
  {
    "text": "how to develop ppl tools with live bpf and bpm siri and kubecoil",
    "start": "8000",
    "end": "16240"
  },
  {
    "text": "first of all let me introduce my little update my name is mumbo john",
    "start": "16240",
    "end": "22880"
  },
  {
    "start": "20000",
    "end": "20000"
  },
  {
    "text": "i come from pcat the company behind thai db and an actual contributor",
    "start": "22880",
    "end": "30560"
  },
  {
    "text": "to live vpn tools i was fortunate to get a lot of help",
    "start": "30560",
    "end": "36320"
  },
  {
    "text": "from andrew nikurico who is sir bpf and bpf's cre project",
    "start": "36320",
    "end": "43200"
  },
  {
    "text": "leader then i was contributing to live vpf jews i learned a lot from him and to",
    "start": "43200",
    "end": "50640"
  },
  {
    "text": "community and i enjoyed communicating with them now let's get down to the topic i will",
    "start": "50640",
    "end": "58239"
  },
  {
    "text": "share my experience about writing bpf applications with live ppf",
    "start": "58239",
    "end": "65119"
  },
  {
    "text": "i hope this topic is helpful to those who are interested in live ppf and it",
    "start": "65119",
    "end": "72240"
  },
  {
    "text": "could inspire them to further develop and improve ppf applications with live",
    "start": "72240",
    "end": "78479"
  },
  {
    "text": "ppf so let's first see what's ppf cy first",
    "start": "78479",
    "end": "86240"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "before talking about this concept let's think about what ppf portability",
    "start": "86240",
    "end": "92640"
  },
  {
    "text": "is we know that the development which kernel is very varied",
    "start": "92640",
    "end": "99280"
  },
  {
    "text": "although backwards compatibility can be guaranteed as a system core layer",
    "start": "99280",
    "end": "107920"
  },
  {
    "text": "changes within the kernel some system don't guarantee this compatibility",
    "start": "107920",
    "end": "115680"
  },
  {
    "text": "when we use bpf for system tracing we often need to get function parameters",
    "start": "115680",
    "end": "122719"
  },
  {
    "text": "read fields in the struct and so on obviously",
    "start": "122719",
    "end": "127840"
  },
  {
    "text": "ppf programs need to fix this compatibility problem",
    "start": "127840",
    "end": "133440"
  },
  {
    "text": "therefore we need to carry uh clarify the probability of bpf",
    "start": "133440",
    "end": "143040"
  },
  {
    "text": "bpf productivity is ability to write the bpf program that will successfully",
    "start": "143040",
    "end": "149760"
  },
  {
    "text": "compare past kernel variation and will work correctly across different",
    "start": "149760",
    "end": "155840"
  },
  {
    "text": "conversions we thought the need to recompile it for each particular kernel",
    "start": "155840",
    "end": "161920"
  },
  {
    "text": "the solution to bpf probability is ppf cre",
    "start": "161920",
    "end": "168840"
  },
  {
    "text": "some people may have some doubts on the necessary uh",
    "start": "170879",
    "end": "176400"
  },
  {
    "text": "necessary necessary day of bpmcy when they use pcc",
    "start": "176400",
    "end": "183200"
  },
  {
    "text": "it seems like we don't encounter any capability",
    "start": "183200",
    "end": "188720"
  },
  {
    "text": "issues so why do we need this new thing",
    "start": "188720",
    "end": "193760"
  },
  {
    "text": "the answer is yes we needed the reason is that",
    "start": "193760",
    "end": "199360"
  },
  {
    "text": "all those are emergencies of bcc is a major improvement in the bpf development",
    "start": "199360",
    "end": "207120"
  },
  {
    "text": "experience it has some not for shortcomings",
    "start": "207120",
    "end": "213599"
  },
  {
    "text": "it used to seal on front end to modify your writing ppf programs",
    "start": "213599",
    "end": "220000"
  },
  {
    "text": "when the program occurs when the problem occurs it's difficult",
    "start": "220000",
    "end": "225760"
  },
  {
    "text": "to find the problem and figure out the solution you have to remember naming",
    "start": "225760",
    "end": "232480"
  },
  {
    "text": "conversations and automatically generated transport",
    "start": "232480",
    "end": "237840"
  },
  {
    "text": "structures because the like pcc library contains a",
    "start": "237840",
    "end": "243680"
  },
  {
    "text": "huge llvm or cylon library when you usage",
    "start": "243680",
    "end": "249360"
  },
  {
    "text": "you might encounter some issues",
    "start": "249360",
    "end": "254040"
  },
  {
    "text": "when the two starts it takes mining cpu and memory resources to compile the bpf",
    "start": "255120",
    "end": "263919"
  },
  {
    "text": "program if it runs on a server light lags system resources",
    "start": "263919",
    "end": "272000"
  },
  {
    "text": "it might trigger a problem bcc depends on kernel header packages",
    "start": "272000",
    "end": "278479"
  },
  {
    "text": "which you have to install on each target host",
    "start": "278479",
    "end": "283680"
  },
  {
    "text": "if you need an exported context in the kernel you have to minority copy and paste tab",
    "start": "283680",
    "end": "292479"
  },
  {
    "text": "definition into the ppf code because ppf programs are compiled during",
    "start": "292479",
    "end": "300560"
  },
  {
    "text": "rentham many simple company",
    "start": "300560",
    "end": "305600"
  },
  {
    "text": "compilation arrows can only be detected at the runtime",
    "start": "305600",
    "end": "311199"
  },
  {
    "text": "this affects your development experience",
    "start": "311199",
    "end": "317039"
  },
  {
    "text": "by contrast stage bpm's ui has this advantage",
    "start": "321199",
    "end": "327280"
  },
  {
    "text": "when you implement bpm cre you can directly use the live bpf",
    "start": "327280",
    "end": "333759"
  },
  {
    "text": "library provided by kernel developer developers to develop ppf programs",
    "start": "333759",
    "end": "341520"
  },
  {
    "text": "their development method is the same as writing ordinary c user mode programs",
    "start": "341520",
    "end": "350400"
  },
  {
    "text": "one combination generates a small library a small binary file",
    "start": "350400",
    "end": "358479"
  },
  {
    "text": "lab ppf acts like a bpf program loader and relocates lose and checks ppf",
    "start": "358479",
    "end": "366800"
  },
  {
    "text": "programs ppf data firm developers only need to focus",
    "start": "366800",
    "end": "373759"
  },
  {
    "text": "on the bpm for programs correct correctness and performance",
    "start": "373759",
    "end": "380479"
  },
  {
    "text": "this approach minimize overhead and removes huge developments",
    "start": "380479",
    "end": "386319"
  },
  {
    "text": "which makes the overall development process smoother",
    "start": "386319",
    "end": "392000"
  },
  {
    "text": "this is why we need bpm cye and y is the future of ppf",
    "start": "392000",
    "end": "399840"
  },
  {
    "text": "bpm coie only consists of four parts ppf tab information",
    "start": "401600",
    "end": "410800"
  },
  {
    "text": "compiler bpf loader kernel i will work you through one by one",
    "start": "410800",
    "end": "418319"
  },
  {
    "text": "bpf tab information which allows to capture",
    "start": "418319",
    "end": "424000"
  },
  {
    "text": "roofer pieces of information about kernel and ppf to program caps and code",
    "start": "424000",
    "end": "431440"
  },
  {
    "text": "enables all the other parts of bpf coie puzzle what's exciting is that in the",
    "start": "431440",
    "end": "438160"
  },
  {
    "text": "latest clone version 4.11 kernel has also",
    "start": "438160",
    "end": "444479"
  },
  {
    "text": "implemented support for model ptf compiler",
    "start": "444479",
    "end": "450720"
  },
  {
    "text": "uh is long provides means for ppf program c code to express their intent",
    "start": "450720",
    "end": "459280"
  },
  {
    "text": "and record relocation information bpf loader",
    "start": "459280",
    "end": "465440"
  },
  {
    "text": "ties btfs from kernel and bpf program together to adjust compiled bpf code to",
    "start": "465440",
    "end": "474560"
  },
  {
    "text": "specify kernel on target hosts kernel",
    "start": "474560",
    "end": "479759"
  },
  {
    "text": "while staying complete uh completely bpmcrie",
    "start": "479759",
    "end": "487160"
  },
  {
    "text": "agnostic provides advanced vpn features to enable",
    "start": "488879",
    "end": "494960"
  },
  {
    "text": "some of the more advanced single celebrities",
    "start": "494960",
    "end": "501039"
  },
  {
    "start": "500000",
    "end": "500000"
  },
  {
    "text": "that's the hollywood with live ppf as mentioned before",
    "start": "503520",
    "end": "509919"
  },
  {
    "text": "the ppf application is divided uh it's divided into two parts",
    "start": "509919",
    "end": "516159"
  },
  {
    "text": "the ppf program that needs to be loaded into the kernel and the control part",
    "start": "516159",
    "end": "522959"
  },
  {
    "text": "on the left part of the finger is very simple bpf creasing program",
    "start": "522959",
    "end": "530080"
  },
  {
    "text": "is triggered when the right system call is",
    "start": "530080",
    "end": "535360"
  },
  {
    "text": "initiate it gets the person's id that triggers",
    "start": "535360",
    "end": "540640"
  },
  {
    "text": "the right request and prints it out the path with the right",
    "start": "540640",
    "end": "546720"
  },
  {
    "text": "is less than 30 percent let's talk more about it",
    "start": "546720",
    "end": "554160"
  },
  {
    "start": "553000",
    "end": "553000"
  },
  {
    "text": "bpf application typically goes through the following",
    "start": "556000",
    "end": "562080"
  },
  {
    "text": "fast open that ppf",
    "start": "562080",
    "end": "567200"
  },
  {
    "text": "object file is passed ppf maps bpf programs and global",
    "start": "567200",
    "end": "574560"
  },
  {
    "text": "variables are discovered but not yet graded after the bpf app is opened",
    "start": "574560",
    "end": "582000"
  },
  {
    "text": "it's possible to make any attentional adjustments citing ppf programming tabs",
    "start": "582000",
    "end": "588640"
  },
  {
    "text": "if necessary please setting initial values bookable values and so on",
    "start": "588640",
    "end": "595360"
  },
  {
    "text": "before all the intent before all the",
    "start": "595360",
    "end": "600399"
  },
  {
    "text": "entities are created and loaded loot pad load fast",
    "start": "600399",
    "end": "607279"
  },
  {
    "text": "ppf maps are created barriers relocations are resolved",
    "start": "607279",
    "end": "614160"
  },
  {
    "text": "ppf program problems are loaded into the kernel and the very first",
    "start": "614160",
    "end": "621200"
  },
  {
    "text": "at this point also has a bpf application uh",
    "start": "621200",
    "end": "627920"
  },
  {
    "text": "by decant and existed in curl where no ppf program is yet executed",
    "start": "627920",
    "end": "636240"
  },
  {
    "text": "after the load fast it's possible to set up initial bpf map state",
    "start": "636240",
    "end": "642000"
  },
  {
    "text": "without reaching with the bpf program called execution",
    "start": "642000",
    "end": "648880"
  },
  {
    "text": "attachment fast this is the fact at which bpf programs",
    "start": "652000",
    "end": "658399"
  },
  {
    "text": "get a attended to various bpf hope points",
    "start": "658399",
    "end": "663920"
  },
  {
    "text": "such as stress points key probes cigarette hooks network package",
    "start": "663920",
    "end": "669839"
  },
  {
    "text": "proceding pipeline and so on this is the face at which bpf starts",
    "start": "669839",
    "end": "675600"
  },
  {
    "text": "performing useful work and read or update ppf maps and global",
    "start": "675600",
    "end": "682000"
  },
  {
    "text": "variables kill down fast bpf programs",
    "start": "682000",
    "end": "688320"
  },
  {
    "text": "and are detached and unloaded from the curl ppf maps are destroyed and all the",
    "start": "688320",
    "end": "696399"
  },
  {
    "text": "sources used by the ppf app are freed generated bpf",
    "start": "696399",
    "end": "703680"
  },
  {
    "text": "security has corresponding functions to trigger it",
    "start": "703680",
    "end": "711920"
  },
  {
    "text": "fast",
    "start": "711920",
    "end": "714920"
  },
  {
    "text": "name open crease and opens bpf application",
    "start": "720720",
    "end": "726800"
  },
  {
    "text": "name load installation loads and verifies vpf",
    "start": "726800",
    "end": "733200"
  },
  {
    "text": "application parts named attach attaches all out to attack attachable",
    "start": "733200",
    "end": "740880"
  },
  {
    "text": "bpf programs it's optional",
    "start": "740880",
    "end": "746079"
  },
  {
    "text": "you can have more control by using level bp as apis directly",
    "start": "746079",
    "end": "753519"
  },
  {
    "text": "named destroy detaches all ppi for programs and freeze up or use the resources",
    "start": "753519",
    "end": "764160"
  },
  {
    "text": "we replace the name with minimal which looks like the picture on the",
    "start": "770800",
    "end": "777120"
  },
  {
    "text": "right in attention to these typical faces there are few motives about suffices to",
    "start": "777120",
    "end": "785519"
  },
  {
    "text": "share with you the first is combine open and load faces",
    "start": "785519",
    "end": "794880"
  },
  {
    "start": "787000",
    "end": "787000"
  },
  {
    "text": "we mentioned earlier that some setup work can be done after the open test",
    "start": "794880",
    "end": "802079"
  },
  {
    "text": "but if there are no such requirements we can compare the load fast and the open",
    "start": "802079",
    "end": "808160"
  },
  {
    "text": "fast gather the example in the filter",
    "start": "808160",
    "end": "814320"
  },
  {
    "text": "comes from the live bpf project which is used to measure the course of",
    "start": "814320",
    "end": "820160"
  },
  {
    "text": "autonoma selective attach",
    "start": "820160",
    "end": "826000"
  },
  {
    "start": "822000",
    "end": "822000"
  },
  {
    "text": "by default bpf skeleton will",
    "start": "826000",
    "end": "831680"
  },
  {
    "text": "automatically attach all bpf programs but sometimes we don't want to do this",
    "start": "831680",
    "end": "838880"
  },
  {
    "text": "we'd rather selectively attach certain ppf programs based on com command line",
    "start": "838880",
    "end": "846000"
  },
  {
    "text": "parameters so we can attach manually as shown in the finger",
    "start": "846000",
    "end": "852079"
  },
  {
    "text": "this is a tool from the live ppf tools project to detect the delay of the block",
    "start": "852079",
    "end": "859040"
  },
  {
    "text": "layer selective load earlier we might change that the program",
    "start": "859040",
    "end": "866959"
  },
  {
    "start": "860000",
    "end": "860000"
  },
  {
    "text": "can be attached mainly but this had two obvious job comings",
    "start": "866959",
    "end": "873360"
  },
  {
    "text": "one is that we load an unnecessary ppf program in addition",
    "start": "873360",
    "end": "879040"
  },
  {
    "text": "we can't use standard passes well",
    "start": "879040",
    "end": "884800"
  },
  {
    "text": "and the code looks unclear so the community has a new api to control",
    "start": "884800",
    "end": "891680"
  },
  {
    "text": "writer to load the ppf program automatically",
    "start": "891680",
    "end": "897279"
  },
  {
    "text": "this is a tool from the live ppf project for starting the",
    "start": "897279",
    "end": "902800"
  },
  {
    "text": "delay distribution of the of some visors in sd4",
    "start": "902800",
    "end": "910959"
  },
  {
    "text": "if these two runs are sitting working with kernel i suppose model btf",
    "start": "910959",
    "end": "916880"
  },
  {
    "text": "then we choose to load the fm3 bpf program otherwise we choose to",
    "start": "916880",
    "end": "924959"
  },
  {
    "text": "loads the keyboard programs",
    "start": "924959",
    "end": "928720"
  },
  {
    "start": "928000",
    "end": "928000"
  },
  {
    "text": "custom load and attach security is suitable for almost all",
    "start": "930000",
    "end": "937759"
  },
  {
    "text": "scenarios but there is a special case first events",
    "start": "937759",
    "end": "944000"
  },
  {
    "text": "in this case instead of using links from a struct name bpf",
    "start": "944000",
    "end": "949839"
  },
  {
    "text": "you need to define an struck array bpf links",
    "start": "949839",
    "end": "955759"
  },
  {
    "text": "struck a picture of link links the reason is that perf event needs to",
    "start": "955759",
    "end": "961440"
  },
  {
    "text": "be opened celebrate uh separatedly on each cpu",
    "start": "961440",
    "end": "967120"
  },
  {
    "text": "after this open and attach ppf event by yourself",
    "start": "967120",
    "end": "972320"
  },
  {
    "text": "finally during the teardown fast remember to destroy each link in the",
    "start": "972320",
    "end": "978639"
  },
  {
    "text": "links and then destroy links",
    "start": "978639",
    "end": "983839"
  },
  {
    "start": "985000",
    "end": "985000"
  },
  {
    "text": "multiple hundreds for the same event starting",
    "start": "989440",
    "end": "994839"
  },
  {
    "text": "in version 0.2 level dpf supports multiply entry point",
    "start": "994839",
    "end": "1002000"
  },
  {
    "text": "bpf programs between the same executable and the linkable format sessions",
    "start": "1002000",
    "end": "1008800"
  },
  {
    "text": "therefore you can attach multiply ppf4 programs to the same event",
    "start": "1008800",
    "end": "1015120"
  },
  {
    "text": "such as twist points or keyboards this was boring about erf session name",
    "start": "1015120",
    "end": "1022240"
  },
  {
    "text": "clash for details see at bpf",
    "start": "1022240",
    "end": "1027918"
  },
  {
    "text": "for support for bpf to bpf first now you can actually define multiply headers",
    "start": "1027919",
    "end": "1036480"
  },
  {
    "text": "for an event action on the right before that you need to define different",
    "start": "1036480",
    "end": "1042640"
  },
  {
    "text": "event styles for the same event",
    "start": "1042640",
    "end": "1046640"
  },
  {
    "start": "1046000",
    "end": "1046000"
  },
  {
    "text": "reading kernel structures fields you may be aware that at the present we",
    "start": "1048400",
    "end": "1054559"
  },
  {
    "text": "have only seen level bpf api related and didn't feel that it has anything to",
    "start": "1054559",
    "end": "1060799"
  },
  {
    "text": "do with the probability of bpf then we will now introduce some programming",
    "start": "1060799",
    "end": "1070160"
  },
  {
    "text": "content related to bpfc let's first look at",
    "start": "1070160",
    "end": "1075919"
  },
  {
    "text": "how to achieve bpf probability in reading structure members",
    "start": "1075919",
    "end": "1083120"
  },
  {
    "text": "the first is pccoe bcc will",
    "start": "1083120",
    "end": "1089520"
  },
  {
    "text": "can we replay rewrite task point to pid",
    "start": "1089520",
    "end": "1095679"
  },
  {
    "text": "into accord to bpf appropriate which is great",
    "start": "1095679",
    "end": "1101600"
  },
  {
    "text": "though sometimes might not work depending on the compatibility of an",
    "start": "1101600",
    "end": "1107520"
  },
  {
    "text": "expression used with like btf because it doesn't have",
    "start": "1107520",
    "end": "1112880"
  },
  {
    "text": "vcc called relative magic at its disposal",
    "start": "1112880",
    "end": "1118240"
  },
  {
    "text": "there are a few ways you can achieve the same result if you are using",
    "start": "1118240",
    "end": "1125280"
  },
  {
    "text": "recently i did bpf programming television ppf programs",
    "start": "1125280",
    "end": "1131440"
  },
  {
    "text": "then you have a smartness of bpf very fair on the other side",
    "start": "1131440",
    "end": "1137679"
  },
  {
    "text": "which now understands and checks bpf caps negatively and",
    "start": "1137679",
    "end": "1144640"
  },
  {
    "text": "allows you to do follow pointers and read kernel memory directory and simply",
    "start": "1144640",
    "end": "1151679"
  },
  {
    "text": "avoiding ppf will appropriate course so you don't need",
    "start": "1151679",
    "end": "1157760"
  },
  {
    "text": "compiler rewriting magic to get some nice and familiar",
    "start": "1157760",
    "end": "1164080"
  },
  {
    "text": "snack list you can also use slab ppf and ppf",
    "start": "1164080",
    "end": "1171520"
  },
  {
    "text": "program characteristic way pairing this functionality with bbmcre to support",
    "start": "1171520",
    "end": "1181039"
  },
  {
    "text": "portal such as relocatable field race",
    "start": "1181039",
    "end": "1186799"
  },
  {
    "text": "you have to include this code into built-in prisoner exercise intense",
    "start": "1186799",
    "end": "1193840"
  },
  {
    "text": "comparability you can also use ppf programming",
    "start": "1193840",
    "end": "1199840"
  },
  {
    "text": "calculating and ppf's urban that's it",
    "start": "1199840",
    "end": "1205039"
  },
  {
    "text": "it will work as you expect that will be portable between different current",
    "start": "1205039",
    "end": "1210240"
  },
  {
    "text": "versions but given the bleeding age",
    "start": "1210240",
    "end": "1216400"
  },
  {
    "text": "decency of bpf3 program uh type chasing",
    "start": "1216400",
    "end": "1223440"
  },
  {
    "text": "you might not have the luxury of using it yet",
    "start": "1223440",
    "end": "1230240"
  },
  {
    "text": "so you have to use level of ppf",
    "start": "1230240",
    "end": "1235280"
  },
  {
    "text": "property accessibility inside",
    "start": "1235280",
    "end": "1240640"
  },
  {
    "text": "non-coie lab behalf way now with seriale",
    "start": "1241320",
    "end": "1248480"
  },
  {
    "text": "and wpf there are two ways to do this",
    "start": "1248480",
    "end": "1253840"
  },
  {
    "text": "one directly replacing ppf book rate and bpf core rate",
    "start": "1253840",
    "end": "1260400"
  },
  {
    "text": "bpf core corridor is the simple macro which passes both arguments directly to",
    "start": "1260400",
    "end": "1267760"
  },
  {
    "text": "bpf appropriate but it also makes a c long record build",
    "start": "1267760",
    "end": "1273440"
  },
  {
    "text": "or offset relocation for third argument by parsing it through",
    "start": "1273440",
    "end": "1279919"
  },
  {
    "text": "built the embracer exercise index so the luckiest",
    "start": "1279919",
    "end": "1285919"
  },
  {
    "text": "example is actually just this under the hood",
    "start": "1285919",
    "end": "1292158"
  },
  {
    "start": "1293000",
    "end": "1293000"
  },
  {
    "text": "you might you may have a question if a field has been removed from the structure",
    "start": "1297760",
    "end": "1304640"
  },
  {
    "text": "is there a way to deal with this situation the answer is yes",
    "start": "1304640",
    "end": "1310080"
  },
  {
    "text": "you can use ppf call field exists macro to do this",
    "start": "1310080",
    "end": "1317520"
  },
  {
    "text": "here is the example",
    "start": "1317520",
    "end": "1321200"
  },
  {
    "text": "from kernel uh file point 50",
    "start": "1323200",
    "end": "1330320"
  },
  {
    "text": "was the member was struck has changed",
    "start": "1330320",
    "end": "1335679"
  },
  {
    "text": "so we can use this to existed to",
    "start": "1335679",
    "end": "1341280"
  },
  {
    "text": "find if it existed",
    "start": "1341280",
    "end": "1345080"
  },
  {
    "start": "1344000",
    "end": "1344000"
  },
  {
    "text": "another scenario that causes ppf capability issues is kernel api changes",
    "start": "1346720",
    "end": "1355039"
  },
  {
    "text": "for this case bpfcre provides two",
    "start": "1355039",
    "end": "1360960"
  },
  {
    "text": "compare camper",
    "start": "1360960",
    "end": "1366240"
  },
  {
    "text": "mercury solutions like ppf clearwise extern",
    "start": "1366240",
    "end": "1371840"
  },
  {
    "text": "kick kick config values and the struct flavors",
    "start": "1371840",
    "end": "1377679"
  },
  {
    "text": "let the bpf provides externs as a simple idea epfo program",
    "start": "1377679",
    "end": "1384640"
  },
  {
    "text": "can define an external white variable without name",
    "start": "1384640",
    "end": "1391200"
  },
  {
    "text": "such as conversion uh linux conversion to",
    "start": "1391200",
    "end": "1396640"
  },
  {
    "text": "extract a running conversion",
    "start": "1396640",
    "end": "1402799"
  },
  {
    "text": "all a name that matches one level quick fix i kis",
    "start": "1402799",
    "end": "1409840"
  },
  {
    "text": "case such as config hc",
    "start": "1409840",
    "end": "1415360"
  },
  {
    "text": "the value of hers that kernel was built with",
    "start": "1415360",
    "end": "1420799"
  },
  {
    "text": "and if the ppf will do its magic to set everything up in such a way",
    "start": "1420799",
    "end": "1427760"
  },
  {
    "text": "that your ppf program can use such external variables as any other global variable",
    "start": "1427760",
    "end": "1438000"
  },
  {
    "text": "this varieties will have correct values writing to a true kernel",
    "start": "1438000",
    "end": "1444159"
  },
  {
    "text": "your ppf program is executed in additional",
    "start": "1444159",
    "end": "1451279"
  },
  {
    "text": "ppf welfare will track those variables as known customs and will be able to use",
    "start": "1452640",
    "end": "1460640"
  },
  {
    "text": "them for advanced control flow analysis and that's called",
    "start": "1460640",
    "end": "1466480"
  },
  {
    "text": "an emergency here is an example for dealing with",
    "start": "1466480",
    "end": "1471600"
  },
  {
    "text": "transparent interface compatibility",
    "start": "1471600",
    "end": "1476840"
  },
  {
    "start": "1481000",
    "end": "1481000"
  },
  {
    "text": "after introducing how to deal with ppf compatibility issues",
    "start": "1483679",
    "end": "1489919"
  },
  {
    "text": "let's take a look at how to pass control information to bpfo programs",
    "start": "1489919",
    "end": "1496320"
  },
  {
    "text": "pcc's approach is achieved through string replacement",
    "start": "1496320",
    "end": "1502880"
  },
  {
    "text": "because the ppf program is the screen for vcc and can be modified at about",
    "start": "1502880",
    "end": "1511360"
  },
  {
    "text": "as well if a pcc is not reused the traditional",
    "start": "1511360",
    "end": "1518640"
  },
  {
    "text": "achievement is to write configuration information into the",
    "start": "1518640",
    "end": "1523679"
  },
  {
    "text": "my this mystery is not efficient although the information writing the mic map is",
    "start": "1523679",
    "end": "1532080"
  },
  {
    "text": "static the bpf welfare can't reorganize this situation",
    "start": "1532080",
    "end": "1538159"
  },
  {
    "text": "so some optimization can't be made",
    "start": "1538159",
    "end": "1543360"
  },
  {
    "text": "the solution to such a demand a monumentally",
    "start": "1543360",
    "end": "1549039"
  },
  {
    "text": "uh competitive use case is though using read-only",
    "start": "1549039",
    "end": "1556000"
  },
  {
    "text": "global date it is site once by the control",
    "start": "1556000",
    "end": "1561120"
  },
  {
    "text": "application before the bpf program is loaded into a kernel",
    "start": "1561120",
    "end": "1566799"
  },
  {
    "text": "from the bpf program side this looks like a normal global variable",
    "start": "1566799",
    "end": "1572400"
  },
  {
    "text": "excise there won't be any ppf map lookup overhead",
    "start": "1572400",
    "end": "1578640"
  },
  {
    "text": "global variables are implemented as directly memory excise",
    "start": "1578640",
    "end": "1586799"
  },
  {
    "text": "control application site view site intestinal initial configuration by use before ppr4",
    "start": "1586960",
    "end": "1595440"
  },
  {
    "text": "program is loaded so by the time ppf verifier will get to",
    "start": "1595440",
    "end": "1602120"
  },
  {
    "text": "[Music] with addition of program",
    "start": "1602120",
    "end": "1607440"
  },
  {
    "text": "configuration variables will be well known and read-only",
    "start": "1608799",
    "end": "1614320"
  },
  {
    "text": "this will allow bpf fairfield to track them as known consists and uses advanced",
    "start": "1614320",
    "end": "1622720"
  },
  {
    "text": "control flow analysis so here is an example",
    "start": "1622720",
    "end": "1628960"
  },
  {
    "text": "we can naturally have some future conditions to the ppf program",
    "start": "1628960",
    "end": "1635360"
  },
  {
    "text": "such as the pid that we want to filter",
    "start": "1635360",
    "end": "1641240"
  },
  {
    "start": "1641000",
    "end": "1641000"
  },
  {
    "text": "next let's talk about its storage related contrast",
    "start": "1643679",
    "end": "1649679"
  },
  {
    "text": "beginning in the curl need six bpm hash marks perform memory play",
    "start": "1649679",
    "end": "1658880"
  },
  {
    "text": "uh election fight board and introduce the bpf and no free alert",
    "start": "1658880",
    "end": "1665679"
  },
  {
    "text": "flag the motivation for doing so is to avoid",
    "start": "1665679",
    "end": "1673440"
  },
  {
    "text": "vps with a corrupt kick group with bpf deadlocks",
    "start": "1673440",
    "end": "1680799"
  },
  {
    "text": "the community had tried other solutions but in the end",
    "start": "1680799",
    "end": "1686480"
  },
  {
    "text": "pre-looking as my elements was the same placed solution and didn't",
    "start": "1686480",
    "end": "1693679"
  },
  {
    "text": "affect the user space with full behavior",
    "start": "1693679",
    "end": "1701440"
  },
  {
    "text": "when fulfilled a collection is turned memory",
    "start": "1701600",
    "end": "1706640"
  },
  {
    "text": "expensive defines a meet the bpf no prelog flight to keep old behavior",
    "start": "1706640",
    "end": "1715919"
  },
  {
    "text": "for details see bps map playground",
    "start": "1715919",
    "end": "1721760"
  },
  {
    "text": "when the map size is not large such as my entries is 256",
    "start": "1721760",
    "end": "1730080"
  },
  {
    "text": "this flag is not necessary bpff no break look is slower",
    "start": "1730080",
    "end": "1738919"
  },
  {
    "start": "1739000",
    "end": "1739000"
  },
  {
    "text": "one advantage overlapping bpf tools is that it's portable",
    "start": "1740559",
    "end": "1746080"
  },
  {
    "text": "so the maximum space required for the wife may be",
    "start": "1746080",
    "end": "1752240"
  },
  {
    "text": "different for different machines in this case you can define survive results specified",
    "start": "1752240",
    "end": "1760559"
  },
  {
    "text": "in the size and resize age before load for example",
    "start": "1760559",
    "end": "1767279"
  },
  {
    "text": "in name ppfdlc defines my ads",
    "start": "1767279",
    "end": "1773679"
  },
  {
    "text": "as this after the open test code ppf map resize",
    "start": "1774000",
    "end": "1781480"
  },
  {
    "start": "1782000",
    "end": "1782000"
  },
  {
    "text": "not only can you use global variables to",
    "start": "1786000",
    "end": "1792039"
  },
  {
    "text": "construct bpfl program logic you can use the",
    "start": "1792039",
    "end": "1799120"
  },
  {
    "text": "instead of maps to make your pro programs",
    "start": "1799120",
    "end": "1804320"
  },
  {
    "text": "simple and more efficient",
    "start": "1804320",
    "end": "1809520"
  },
  {
    "text": "global variables can be analyzed you just need to set global variables to",
    "start": "1809520",
    "end": "1817600"
  },
  {
    "text": "be a fixed size or at least with bonded",
    "start": "1817600",
    "end": "1823279"
  },
  {
    "text": "maximum size if you don't mind wasting some memory",
    "start": "1823279",
    "end": "1829039"
  },
  {
    "text": "for example because the number of soft lq tabs is",
    "start": "1829039",
    "end": "1834159"
  },
  {
    "text": "fixed you can defend global errors",
    "start": "1834159",
    "end": "1839440"
  },
  {
    "text": "to seal coins and stir gram",
    "start": "1839440",
    "end": "1844480"
  },
  {
    "text": "in software coding vpf dc then you can traverse the",
    "start": "1844480",
    "end": "1851200"
  },
  {
    "text": "ram directly in user space",
    "start": "1851200",
    "end": "1855840"
  },
  {
    "text": "if you want to know more details you can read the following articles",
    "start": "1857760",
    "end": "1862799"
  },
  {
    "text": "but first two articles were written by bpf martiner",
    "start": "1862799",
    "end": "1868880"
  },
  {
    "text": "which is very valuable and kills a lot of knowledge related to",
    "start": "1868880",
    "end": "1875360"
  },
  {
    "text": "principle the last one was written by me mainly related to actual compat",
    "start": "1875360",
    "end": "1884000"
  },
  {
    "text": "if you want to try it out you can start with following two projects",
    "start": "1884000",
    "end": "1891480"
  },
  {
    "text": "otherwise pincap is a software where servers provider",
    "start": "1894720",
    "end": "1900960"
  },
  {
    "text": "commented to delivering one stop experience to create deep business",
    "start": "1900960",
    "end": "1906799"
  },
  {
    "text": "solutions thaidb is an open source distributed new",
    "start": "1906799",
    "end": "1912720"
  },
  {
    "text": "circle database for elastic skill and real-time analysis",
    "start": "1912720",
    "end": "1920320"
  },
  {
    "text": "that's all thank you",
    "start": "1920320",
    "end": "1925000"
  }
]