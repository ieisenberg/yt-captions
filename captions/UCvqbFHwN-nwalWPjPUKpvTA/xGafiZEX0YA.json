[
  {
    "start": "0",
    "end": "165000"
  },
  {
    "text": "all right everyone let's get started so thank you so much for attending our talk",
    "start": "30",
    "end": "5460"
  },
  {
    "text": "and on custom resource definitions also known as CI DS it's great to be here in",
    "start": "5460",
    "end": "10740"
  },
  {
    "text": "Shanghai let's start off with some introductions so my name is Sam gonna",
    "start": "10740",
    "end": "16410"
  },
  {
    "text": "Radner I'm a software engineer working for pivotal and from London my name is",
    "start": "16410",
    "end": "21689"
  },
  {
    "text": "Ed King I work alongside Sam also from pivotal and also from London great so",
    "start": "21689",
    "end": "28380"
  },
  {
    "text": "there are a lot of talks about C IDs at this conference it's sort of a hot topic in the community at the moment so let's",
    "start": "28380",
    "end": "35579"
  },
  {
    "text": "just set the scene about what we'll be talking about in this talk specifically so ed will start us off just talking",
    "start": "35579",
    "end": "41250"
  },
  {
    "text": "about our motivations for giving this talk then since this is a beginners talk we'll just cover some basics about the",
    "start": "41250",
    "end": "47789"
  },
  {
    "text": "kate's api customer resource definitions and operators then we'll move on to",
    "start": "47789",
    "end": "53070"
  },
  {
    "text": "talking about what it means to build on top of the kubernetes api but things that are not workloads based on",
    "start": "53070",
    "end": "60120"
  },
  {
    "text": "kubernetes and we'll talk about the pros cons and some of the considerations for using coop the kubernetes api but some",
    "start": "60120",
    "end": "67140"
  },
  {
    "text": "things that are not so obvious all right so I'd like to just take a few moments",
    "start": "67140",
    "end": "74100"
  },
  {
    "text": "just to run through some of the motivations that we had for flying all the way out here to China to come and",
    "start": "74100",
    "end": "79860"
  },
  {
    "text": "talk to you today and so I hope that this will help you to understand exactly",
    "start": "79860",
    "end": "86520"
  },
  {
    "text": "where we're coming from and also to sort of better frame the rest of this talk and so this all started about six months",
    "start": "86520",
    "end": "93329"
  },
  {
    "text": "ago when Sam and I were assigned to a new team and we were tasked with building a brand new system component",
    "start": "93329",
    "end": "99630"
  },
  {
    "text": "that would eventually integrate into part of a bigger product that we were going to be shipping and so we went off",
    "start": "99630",
    "end": "105450"
  },
  {
    "text": "we did some research we spoke to some users and we eventually came up with an",
    "start": "105450",
    "end": "111210"
  },
  {
    "text": "idea for what we might like to build for our alpha and the question then became",
    "start": "111210",
    "end": "116850"
  },
  {
    "text": "okay so what technology should we use to build this alpha now traditionally we probably would have just reached out for",
    "start": "116850",
    "end": "123270"
  },
  {
    "text": "a classic web server probably written in golang with a backing relational database and that would have been great",
    "start": "123270",
    "end": "130640"
  },
  {
    "text": "however at the time we were very aware a lot of noise coming out of the kubernetes the kubernetes community",
    "start": "130640",
    "end": "137600"
  },
  {
    "text": "around the kubernetes api and specifically with regards to extending the api by a use of these things called",
    "start": "137600",
    "end": "144960"
  },
  {
    "text": "c RDS and so are a little ears pricked up and we thought okay what might it",
    "start": "144960",
    "end": "151050"
  },
  {
    "text": "look like for us to build this system component on top of the kubernetes api as to as opposed to a more like",
    "start": "151050",
    "end": "157020"
  },
  {
    "text": "traditional web server with a backing relational database and so we went off",
    "start": "157020",
    "end": "162060"
  },
  {
    "text": "again we did a lot of research we spoke to some of our colleagues we took a look at what was going on in the community",
    "start": "162060",
    "end": "168060"
  },
  {
    "start": "165000",
    "end": "421000"
  },
  {
    "text": "and we learnt quite a lot of stuff and so really the idea for this talk is we",
    "start": "168060",
    "end": "174060"
  },
  {
    "text": "just would like to go through some of our learnings and perhaps some of the pros cons and considerations for what it",
    "start": "174060",
    "end": "182160"
  },
  {
    "text": "might look like to build something on top of the kubernetes api so that if you are yourselves asking the same question",
    "start": "182160",
    "end": "188010"
  },
  {
    "text": "like should i be doing this hopefully by the end of this talk you'll have a better idea as to whether or not that's",
    "start": "188010",
    "end": "194400"
  },
  {
    "text": "something that you might like to look up further ok so let's take a quick step",
    "start": "194400",
    "end": "202320"
  },
  {
    "text": "back and talk about the kubernetes api from a high level so the kubernetes api is an api centric so what do I really",
    "start": "202320",
    "end": "209430"
  },
  {
    "text": "mean by this so when I first came to communities and I came from thinking about wanting to deploy workloads won't",
    "start": "209430",
    "end": "216360"
  },
  {
    "text": "use communities as an Orchestrator and a scheduler for my containers but the more I came to understand about kubernetes",
    "start": "216360",
    "end": "221940"
  },
  {
    "text": "the more I realized that one of the reasons that it is such a good scheduler is because it has this API with a set of",
    "start": "221940",
    "end": "228330"
  },
  {
    "text": "rich features that allows for the kubernetes ecosystem to evolve and four",
    "start": "228330",
    "end": "233459"
  },
  {
    "text": "features and api s-- to be added an extreme rate from companies all across the world and its really the kubernetes",
    "start": "233459",
    "end": "240630"
  },
  {
    "text": "api that facilitates this so let's have a little look at some of these high-level properties now the first is",
    "start": "240630",
    "end": "248880"
  },
  {
    "text": "of the communities API is declarative so this is the Watts versus how approach so",
    "start": "248880",
    "end": "255989"
  },
  {
    "text": "in an imperative procedure way you might say I would like to go to node a and",
    "start": "255989",
    "end": "262650"
  },
  {
    "text": "start one pod and then I'd like to go to node B start another pod you're telling the",
    "start": "262650",
    "end": "267849"
  },
  {
    "text": "system how to achieve something with a declarative system you say what you want",
    "start": "267849",
    "end": "273160"
  },
  {
    "text": "to happen so you say I won two pods and by the way don't have those pods running",
    "start": "273160",
    "end": "278199"
  },
  {
    "text": "run on the same note and there's been an evolution over time of how you treat",
    "start": "278199",
    "end": "285150"
  },
  {
    "text": "infrastructure moving from procedural to declarative so you might write have",
    "start": "285150",
    "end": "291099"
  },
  {
    "text": "written bash scripts ten years ago to manage your infrastructure and then you might have chosen something like chef or",
    "start": "291099",
    "end": "296740"
  },
  {
    "text": "ansible to manage your infrastructure and then things like terraform came along which is a purely declarative way",
    "start": "296740",
    "end": "303430"
  },
  {
    "text": "of defining infrastructure and cuba dennis takes that to the next level being declarative but also as you'll see",
    "start": "303430",
    "end": "308770"
  },
  {
    "text": "constantly reconciling that state of the world though next is the the cuban a's",
    "start": "308770",
    "end": "315159"
  },
  {
    "text": "api has this clear separation of states so there are two pieces of states one is",
    "start": "315159",
    "end": "320530"
  },
  {
    "text": "the desired state that is specified by a user or another system then the other is",
    "start": "320530",
    "end": "327400"
  },
  {
    "text": "the observed state of the system so you have this clear separation there's",
    "start": "327400",
    "end": "333280"
  },
  {
    "text": "uniform across the cuban api and that allows for ease of reasoning about the system next up is that the cuban a's api",
    "start": "333280",
    "end": "340990"
  },
  {
    "text": "is level based rather than edged based so what do i mean by that this is",
    "start": "340990",
    "end": "346360"
  },
  {
    "text": "terminology that sort of comes from system programming and electrical engineering and it's about how you",
    "start": "346360",
    "end": "351789"
  },
  {
    "text": "measure the changes on a wire over time so in a H based system you notice the",
    "start": "351789",
    "end": "357279"
  },
  {
    "text": "individual changes and you keep a track record of those changes level based",
    "start": "357279",
    "end": "362349"
  },
  {
    "text": "however you just periodically poll and check the value and so level based",
    "start": "362349",
    "end": "367990"
  },
  {
    "text": "systems are more forgiving for distributed systems for example if your",
    "start": "367990",
    "end": "373599"
  },
  {
    "text": "component crashes in an edge based system when it restores it has to understand the history of all the changes that have occurred over time",
    "start": "373599",
    "end": "379169"
  },
  {
    "text": "whereas a level based system just reads the current value and makes it so so",
    "start": "379169",
    "end": "385029"
  },
  {
    "text": "really it allows for less error-prone components to be written and as I said",
    "start": "385029",
    "end": "390669"
  },
  {
    "text": "it's more forgiving so next up is that the CUNY's api is transparent by default",
    "start": "390669",
    "end": "396580"
  },
  {
    "text": "so writing resources to the API you have a single control",
    "start": "396580",
    "end": "401800"
  },
  {
    "text": "plane for everything and permission allowing all of your components can access all the other resources from",
    "start": "401800",
    "end": "408610"
  },
  {
    "text": "other components so this allows for composability between teams controllers",
    "start": "408610",
    "end": "414430"
  },
  {
    "text": "can watch other teams resources and then extend the functionality all right so",
    "start": "414430",
    "end": "424390"
  },
  {
    "start": "421000",
    "end": "635000"
  },
  {
    "text": "those are some of the high-level features that make the kubernetes api really really interesting what I'd like",
    "start": "424390",
    "end": "430510"
  },
  {
    "text": "to do now is just dive down a little deeper and walk through a typical example in order to take a look at some",
    "start": "430510",
    "end": "436870"
  },
  {
    "text": "of these core components we're going to need to know about in order to understand the rest of the talk and",
    "start": "436870",
    "end": "442030"
  },
  {
    "text": "we're going to go with with the classic example of like creating a pot and I'm sure that some of you probably very",
    "start": "442030",
    "end": "447910"
  },
  {
    "text": "familiar with this so I try to keep it keep keep it quick I just want to make sure that we're all on the same page so",
    "start": "447910",
    "end": "453430"
  },
  {
    "text": "that we have the terminology understand the rest so at its cool the Kuban",
    "start": "453430",
    "end": "459460"
  },
  {
    "text": "Eddie's API is a restful api backed by an HDD datastore and there are a bunch",
    "start": "459460",
    "end": "465490"
  },
  {
    "text": "of resource objects that are available on that API so these are things like",
    "start": "465490",
    "end": "470920"
  },
  {
    "text": "your pod node deployment and these are the objects that users of the API are",
    "start": "470920",
    "end": "476800"
  },
  {
    "text": "able to interact with and to create update and delete and as a user of the",
    "start": "476800",
    "end": "482380"
  },
  {
    "text": "API it's up to me to declare my desired state of the world as Sam said the",
    "start": "482380",
    "end": "488800"
  },
  {
    "text": "kubernetes api is entirely declarative and so for this example i might say something like I want one pod to be",
    "start": "488800",
    "end": "494890"
  },
  {
    "text": "running and the way that you do this is by posting gamal into the API and",
    "start": "494890",
    "end": "500740"
  },
  {
    "text": "typically this is done with a cube CTL apply - eff take a quick look at that",
    "start": "500740",
    "end": "505870"
  },
  {
    "text": "Yama we tried really hard not to get any Amal into this presentation but that is",
    "start": "505870",
    "end": "511240"
  },
  {
    "text": "a really hard thing to do like when you're talking about the kubernetes api so we're try to keep it brief the",
    "start": "511240",
    "end": "516789"
  },
  {
    "text": "important points to note here are the kind in bold so here we're specifying the kind of resource object that we're",
    "start": "516790",
    "end": "524080"
  },
  {
    "text": "interested in and then also the spec where we are declaring our desired configuration for that object",
    "start": "524080",
    "end": "532680"
  },
  {
    "text": "and so we take this yeah Mille and we post it into the API and it goes and gets stored in the sed data store and so",
    "start": "532720",
    "end": "540250"
  },
  {
    "text": "at this point I need to introduce the next really important component in the kubernetes system and that is the controllers so the kubernetes api is",
    "start": "540250",
    "end": "548610"
  },
  {
    "text": "comprised of a number of controllers and each controller is watching for any",
    "start": "548610",
    "end": "553960"
  },
  {
    "text": "changes to certain objects of a certain type so for example this controller in",
    "start": "553960",
    "end": "560740"
  },
  {
    "text": "the top left may be looking for any changes to any object of type pod and when it notices a change in this case",
    "start": "560740",
    "end": "568690"
  },
  {
    "text": "that a new pod has been created it gets notified about it and it then goes",
    "start": "568690",
    "end": "573700"
  },
  {
    "text": "through a process that's known as reconciliation so essentially what happens here is the controller will go",
    "start": "573700",
    "end": "580570"
  },
  {
    "text": "and look and grab the desired state of the world so in this case the new",
    "start": "580570",
    "end": "586210"
  },
  {
    "text": "desired state is that we want one pot to be running and it will then go and look out to the current state of the world in",
    "start": "586210",
    "end": "592810"
  },
  {
    "text": "this case that's 0 quads are running and it will then take whatever actions are necessary in order to combine those two",
    "start": "592810",
    "end": "599590"
  },
  {
    "text": "worlds together such that the desired state is equal to the current observed state ie that one pot is running and",
    "start": "599590",
    "end": "609100"
  },
  {
    "text": "then once this has been done it will talk typically talk back to the kubernetes api to update that original",
    "start": "609100",
    "end": "616270"
  },
  {
    "text": "object to update its status so it might say something like status state running",
    "start": "616270",
    "end": "622780"
  },
  {
    "text": "true or whatever it might be and this is really important because this is how other components that are interested in",
    "start": "622780",
    "end": "629200"
  },
  {
    "text": "this object are able to find out its current state so we've got our resources",
    "start": "629200",
    "end": "637660"
  },
  {
    "start": "635000",
    "end": "749000"
  },
  {
    "text": "we've got our control is how the custom resource definitions fit into all of this well essentially custom resource",
    "start": "637660",
    "end": "645010"
  },
  {
    "text": "definitions or see IDs for short allow users of the API to define their own",
    "start": "645010",
    "end": "650320"
  },
  {
    "text": "custom resource types so perhaps I don't want to create a pod or a deployment",
    "start": "650320",
    "end": "656860"
  },
  {
    "text": "perhaps I want to create something more exciting let's take an example of a lovely piece of cake everybody loves",
    "start": "656860",
    "end": "663820"
  },
  {
    "text": "cake what if I wanted to create update delete cakes on my kubernetes api this",
    "start": "663820",
    "end": "669850"
  },
  {
    "text": "is what's the ideas allow us to do and so in this example we might say ok",
    "start": "669850",
    "end": "674880"
  },
  {
    "text": "actually I want a kind of cake right and in the specification that I'm saying",
    "start": "674880",
    "end": "679990"
  },
  {
    "text": "that I want a Victoria sponge type of cake and the nice thing here is that I can take this this declaration this yeah",
    "start": "679990",
    "end": "686230"
  },
  {
    "text": "Mille and post it into the kubernetes api in exactly the same way and using the same tooling as for any other",
    "start": "686230",
    "end": "692890"
  },
  {
    "text": "resource that would exist on that api and so i could post that off it gets",
    "start": "692890",
    "end": "698620"
  },
  {
    "text": "stored in the HDD database but there's now a problem because by default none of",
    "start": "698620",
    "end": "704710"
  },
  {
    "text": "the default kubernetes controllers know anything about my cake types right and",
    "start": "704710",
    "end": "709839"
  },
  {
    "text": "so at this point nothing's going to happen and what this means is that as me",
    "start": "709839",
    "end": "715600"
  },
  {
    "text": "as the author of the cid i also need to bring along my own custom controller and plug this all in and this new custom",
    "start": "715600",
    "end": "724180"
  },
  {
    "text": "controller will be watching for changes to type cake i will know how to reconcile the world upon any changes to",
    "start": "724180",
    "end": "731170"
  },
  {
    "text": "those objects and this is really at the core of the extensibility of the",
    "start": "731170",
    "end": "736480"
  },
  {
    "text": "kubernetes api using crts and your custom controllers and so you could imagine that you could keep going",
    "start": "736480",
    "end": "742300"
  },
  {
    "text": "building up your own custom types custom control is such that it looks a little something like this",
    "start": "742300",
    "end": "750030"
  },
  {
    "start": "749000",
    "end": "926000"
  },
  {
    "text": "ok so let's have a brief look at the timeline of extensibility in the",
    "start": "752010",
    "end": "757360"
  },
  {
    "text": "communities API so around I think communities 1.2 third party resources",
    "start": "757360",
    "end": "763000"
  },
  {
    "text": "are introduced and this is the first time that you had a way to add new things to the kubernetes api so shortly",
    "start": "763000",
    "end": "769990"
  },
  {
    "text": "after core OS introduced this thing called the operator framework and so really what they realized is the Kuban",
    "start": "769990",
    "end": "776470"
  },
  {
    "text": "is is great for running workloads especially like you know stateless workloads but when things have state and",
    "start": "776470",
    "end": "782050"
  },
  {
    "text": "a stateful you need to concern yourself with the day to operations like taking a",
    "start": "782050",
    "end": "788050"
  },
  {
    "text": "backup keeping the thing running making sure things have quorum that sort of stuff and so korres developed this",
    "start": "788050",
    "end": "795790"
  },
  {
    "text": "framework that allows you to extend the kubernetes api to run stateful workloads and a great",
    "start": "795790",
    "end": "802160"
  },
  {
    "text": "example is there will be an operator for my sequel and so that operator is job is",
    "start": "802160",
    "end": "808100"
  },
  {
    "text": "to replace a human operator that might treat it have traditionally looked after that my sequel cluster this operator",
    "start": "808100",
    "end": "815480"
  },
  {
    "text": "will ensure the cluster is alive and healthy and take backups and that sort of stuff and this has proved an",
    "start": "815480",
    "end": "822769"
  },
  {
    "text": "immensely popular pattern in the committee's community so the operator framework is one framework of actually",
    "start": "822769",
    "end": "829040"
  },
  {
    "text": "doing this but now there are more such as coop builder so in 2017 CRTs were",
    "start": "829040",
    "end": "834949"
  },
  {
    "text": "introduced as a replacement for third-party resources to have even closer alignment to the kubernetes",
    "start": "834949",
    "end": "840709"
  },
  {
    "text": "native resources and to be more powerful and then after that we started to see",
    "start": "840709",
    "end": "845779"
  },
  {
    "text": "bigger systems being built on top of see IDs it's a good example of this is Kay native which is an entire new platform",
    "start": "845779",
    "end": "852170"
  },
  {
    "text": "and set of abstractions on top of kubernetes another great example is sto",
    "start": "852170",
    "end": "857389"
  },
  {
    "text": "which allows you to get an entire service mesh on top of kubernetes and I think sto has something around 23 or so",
    "start": "857389",
    "end": "864470"
  },
  {
    "text": "custom resource definitions that it's made up of so next this is something",
    "start": "864470",
    "end": "872240"
  },
  {
    "text": "that was very interesting it was the AWS released an operator and this was",
    "start": "872240",
    "end": "877250"
  },
  {
    "text": "special because it didn't act on resources within your cluster instead it",
    "start": "877250",
    "end": "882259"
  },
  {
    "text": "acted on resources in AWS is public cloud so as a developer I created a",
    "start": "882259",
    "end": "887360"
  },
  {
    "text": "custom resource asking for infrastructure and the operator would go to Amazon's public cloud to provision",
    "start": "887360",
    "end": "893329"
  },
  {
    "text": "that and this is an interesting example of what the operator pattern being used to not manage workloads in your cluster",
    "start": "893329",
    "end": "898879"
  },
  {
    "text": "but managing something completely different and so this really got us thinking like what is the next step of",
    "start": "898879",
    "end": "904550"
  },
  {
    "text": "this transition Percy IDs so just in the near term series are hoping to go GA in",
    "start": "904550",
    "end": "909649"
  },
  {
    "text": "the next couple of releases there's this movement towards and desire to want to",
    "start": "909649",
    "end": "914720"
  },
  {
    "text": "use see IDs to replace some of the native resources in Corki binaries so",
    "start": "914720",
    "end": "920749"
  },
  {
    "text": "yeah we wanted to spend the rest of this talk thinking about where this might lead",
    "start": "920749",
    "end": "926110"
  },
  {
    "start": "926000",
    "end": "1328000"
  },
  {
    "text": "cool so let me paint you a picture so for the next part of this talk we're",
    "start": "926960",
    "end": "932850"
  },
  {
    "text": "going to be running through an example service and take a look at what it might look like to build something on top of",
    "start": "932850",
    "end": "939780"
  },
  {
    "text": "the cube kubernetes api and the example that we're going to go with is that of a home automation service so we're going",
    "start": "939780",
    "end": "946590"
  },
  {
    "text": "to imagine that Sam and I have a hugely successful home automation company and we've got a really great home automation",
    "start": "946590",
    "end": "952710"
  },
  {
    "text": "service that's used in loved by thousands of people all around the world and before taking a look at what it",
    "start": "952710",
    "end": "960000"
  },
  {
    "text": "might look like to build that on top of kubernetes let's just imagine what it may look like today right and perhaps it looks",
    "start": "960000",
    "end": "966780"
  },
  {
    "text": "something like this perhaps we've gone with a classic microservices architecture whereby some user of the",
    "start": "966780",
    "end": "974460"
  },
  {
    "text": "system posts some JSON into some front end some gateway and the micro services go off and do whatever they need to do so let's",
    "start": "974460",
    "end": "981660"
  },
  {
    "text": "take an example here or perhaps this is what it might look like to switch on some lights in our kitchen we take this",
    "start": "981660",
    "end": "990030"
  },
  {
    "text": "Jason we post it in the micro services go off and do that thing and because",
    "start": "990030",
    "end": "995580"
  },
  {
    "text": "we're a hugely successful company we have hundreds and hundreds of developers co-located all across the globe right",
    "start": "995580",
    "end": "1001670"
  },
  {
    "text": "and so it's quite likely that each service is going to have a corresponding team who are going to be responsible for",
    "start": "1001670",
    "end": "1009020"
  },
  {
    "text": "developing that service and really each team their main focus is that they want",
    "start": "1009020",
    "end": "1015110"
  },
  {
    "text": "to be delivering the absolute highest quality best lighting service that they",
    "start": "1015110",
    "end": "1020510"
  },
  {
    "text": "possibly can right and so let's let's draw some team boundaries around each of these so that it looks a little bit like",
    "start": "1020510",
    "end": "1027410"
  },
  {
    "text": "this and then we can also imagine that each service is going to need some data",
    "start": "1027410",
    "end": "1032900"
  },
  {
    "text": "and so each service is probably going to need a backing database right and so",
    "start": "1032900",
    "end": "1038030"
  },
  {
    "text": "it's going to look something like this and then we're going to imagine that we really care about a high availability",
    "start": "1038030",
    "end": "1043970"
  },
  {
    "text": "and the reliability of our service is really and really important if this goes down users are going to be locked out of",
    "start": "1043970",
    "end": "1049850"
  },
  {
    "text": "their home and it's going to be a disaster so let's add in a whole bunch of high availability to each of these",
    "start": "1049850",
    "end": "1055280"
  },
  {
    "text": "services but we know that nothing is ever perfect and things go wrong and so when things do go wrong",
    "start": "1055280",
    "end": "1062440"
  },
  {
    "text": "we're going to need to make sure that each of the services has a whole bunch of like retry logic baked in and then",
    "start": "1062440",
    "end": "1069460"
  },
  {
    "text": "finally we're probably also going to need some sort of like service discovery mechanism so that each of these services",
    "start": "1069460",
    "end": "1074860"
  },
  {
    "text": "can find each other in order to do the job and so actually like I look at that",
    "start": "1074860",
    "end": "1080530"
  },
  {
    "text": "and I think that there there's a lot going on there right and importantly",
    "start": "1080530",
    "end": "1085750"
  },
  {
    "text": "there's a lot of stuff going on that actually is distracting each of the teams away from delivering the features",
    "start": "1085750",
    "end": "1092350"
  },
  {
    "text": "on each of the services and that's really the thing that they want to be doing right so there are a lot of",
    "start": "1092350",
    "end": "1099580"
  },
  {
    "text": "distractions each team has to think about their storage the backing databases and all of the operational",
    "start": "1099580",
    "end": "1105370"
  },
  {
    "text": "overheads that come with that the high availability the reliability the API contracts between all of the services",
    "start": "1105370",
    "end": "1111250"
  },
  {
    "text": "all of this is just taking time and effort away from the main focus of each team which it's developing the best",
    "start": "1111250",
    "end": "1118179"
  },
  {
    "text": "service that they possibly can and so maybe maybe there's a better way okay so",
    "start": "1118179",
    "end": "1125559"
  },
  {
    "text": "we very well could have written this service with these micro services and then kubernetes would have been a great",
    "start": "1125559",
    "end": "1131020"
  },
  {
    "text": "tool to deploy these services into we could have created deployments and pods and run this service in kubernetes",
    "start": "1131020",
    "end": "1138270"
  },
  {
    "text": "however given that we now know that you know the community API has all these great features could we actually build",
    "start": "1138270",
    "end": "1143950"
  },
  {
    "text": "our service on top of the kubernetes api so not using kubernetes as a container",
    "start": "1143950",
    "end": "1149230"
  },
  {
    "text": "scheduler but just using its API to achieve this sort of business problem that we have here so let's go through",
    "start": "1149230",
    "end": "1154990"
  },
  {
    "text": "that example now the first of all each of the team wouldn't be responsible for creating a micro service like a restful",
    "start": "1154990",
    "end": "1161230"
  },
  {
    "text": "micro service there be responsible for creating a controller instead and we",
    "start": "1161230",
    "end": "1166420"
  },
  {
    "text": "wouldn't have a gateway instead we'd have our controllers watching a single kubernetes api and so before our teams",
    "start": "1166420",
    "end": "1173980"
  },
  {
    "text": "had to manage their in database now they can rely on the kubernetes api to store their data via C IDs so in this world",
    "start": "1173980",
    "end": "1183070"
  },
  {
    "text": "the user might express intent to the system declaratively saying I want the kitchen lights to be on and so they",
    "start": "1183070",
    "end": "1189850"
  },
  {
    "text": "could post this into the kubernetes api and they might have a resource that represents a room for example and I",
    "start": "1189850",
    "end": "1196410"
  },
  {
    "text": "have a specification for what I want the desired state of the room to be in terms of the lights here so you can see I have",
    "start": "1196410",
    "end": "1202200"
  },
  {
    "text": "I want two lights to be on with different brightnesses so that could be",
    "start": "1202200",
    "end": "1208410"
  },
  {
    "text": "posted in and we would have a controller the team that's responsible for that watching the API it would be notified it",
    "start": "1208410",
    "end": "1215220"
  },
  {
    "text": "would start to reconcile that request it would look at the system and say hey there's no lights on so what would it be",
    "start": "1215220",
    "end": "1220620"
  },
  {
    "text": "it would create some light resources and those light resources would represent the individual actions for each light",
    "start": "1220620",
    "end": "1227400"
  },
  {
    "text": "bulb in our room wherever it is so the light resource just has a single speck requesting the brightness and then this",
    "start": "1227400",
    "end": "1236220"
  },
  {
    "text": "would be picked up by our lights controller and this is the boundary between our two teams in this example",
    "start": "1236220",
    "end": "1241320"
  },
  {
    "text": "the room team just creates this light resource event it's another team's responsibility through its controller to",
    "start": "1241320",
    "end": "1247110"
  },
  {
    "text": "satisfy that request so the light controller then would go and look at the",
    "start": "1247110",
    "end": "1252300"
  },
  {
    "text": "actual state of the world go and talk to the LED bulbs wherever they are notice that they are not on turn them on and",
    "start": "1252300",
    "end": "1261500"
  },
  {
    "text": "then update the status in the kubernetes api you can see here at the bottom it's",
    "start": "1261500",
    "end": "1268110"
  },
  {
    "text": "set the status to reflect the spec because it is successfully reconciled the desired state and now be observed",
    "start": "1268110",
    "end": "1274020"
  },
  {
    "text": "state matches but then our team's",
    "start": "1274020",
    "end": "1279480"
  },
  {
    "text": "controller would be notified of this change because it's a parent of these light resources it created them it has",
    "start": "1279480",
    "end": "1284850"
  },
  {
    "text": "an interest of what's going on with them and then it would update the room resource with the status of the lights",
    "start": "1284850",
    "end": "1292110"
  },
  {
    "text": "and this is important because the user or whatever system component created the room maybe doesn't care so much about",
    "start": "1292110",
    "end": "1299070"
  },
  {
    "text": "the internal resources used to accomplish the request it cares about this abstraction and so it can just look",
    "start": "1299070",
    "end": "1305850"
  },
  {
    "text": "at the room resource to see the status of the request and obviously in this",
    "start": "1305850",
    "end": "1311760"
  },
  {
    "text": "world if one of our controllers goes down for example then it's decoupled from the API you can still post room",
    "start": "1311760",
    "end": "1317730"
  },
  {
    "text": "resources post light resources and then when the controller comes back up again it can just reconcile and because of",
    "start": "1317730",
    "end": "1323460"
  },
  {
    "text": "some of the aspects of the API being level based that will just work",
    "start": "1323460",
    "end": "1329000"
  },
  {
    "start": "1328000",
    "end": "1370000"
  },
  {
    "text": "all right so let's perhaps perhaps fairly I could like contrived example",
    "start": "1330130",
    "end": "1335900"
  },
  {
    "text": "I'm not suggesting that you should immediately go out and rewrite a home automation service on top of the",
    "start": "1335900",
    "end": "1341390"
  },
  {
    "text": "kubernetes api well maybe I am let's see if you are thinking about doing this",
    "start": "1341390",
    "end": "1347810"
  },
  {
    "text": "sort of thing there are going to be some pros cons and considerations right and",
    "start": "1347810",
    "end": "1353060"
  },
  {
    "text": "so for the rest of this talk we're just going to be walking through some of the main things that popped up during our research for this so I'm going to talk",
    "start": "1353060",
    "end": "1360680"
  },
  {
    "text": "through a few of the more purely sort of technical considerations and then Sam's going to talk through some of the wider",
    "start": "1360680",
    "end": "1366860"
  },
  {
    "text": "considerations around this as well I'm gonna kick things off by talking about storage and really here I'm referring to",
    "start": "1366860",
    "end": "1374930"
  },
  {
    "start": "1370000",
    "end": "1446000"
  },
  {
    "text": "this idea that if you are developing on top of the kubernetes api you",
    "start": "1374930",
    "end": "1380180"
  },
  {
    "text": "essentially get the backing at CD data store like for free right it's just",
    "start": "1380180",
    "end": "1385610"
  },
  {
    "text": "there it's part of that API control plane and it means that it's probably owned and operated by whoever is",
    "start": "1385610",
    "end": "1392270"
  },
  {
    "text": "responsible for keeping the convene Eddy's API up and running and so as a",
    "start": "1392270",
    "end": "1397340"
  },
  {
    "text": "developer who's developing on top of that API this is hugely enticing to me because it means that I no longer need",
    "start": "1397340",
    "end": "1402740"
  },
  {
    "text": "to worry about any of the operational overheads that are associated with",
    "start": "1402740",
    "end": "1407830"
  },
  {
    "text": "managing your own database but of course there's like there's no such thing as a",
    "start": "1407830",
    "end": "1414050"
  },
  {
    "text": "free lunch and there are some other considerations around here it's not quite that simple one of the one of the main things that",
    "start": "1414050",
    "end": "1419930"
  },
  {
    "text": "popped up while we were sort of looking at this is that HCD is not a relational database which means that some of the",
    "start": "1419930",
    "end": "1426290"
  },
  {
    "text": "relational features we've come to know and love unavailable and the example that we tend to give is what if you",
    "start": "1426290",
    "end": "1432380"
  },
  {
    "text": "needed to do a big join of your data right it's just not really possible and so I guess the key the key thing to note",
    "start": "1432380",
    "end": "1438710"
  },
  {
    "text": "here is like just make sure that your data model is suitable for running in this new model recently readily related",
    "start": "1438710",
    "end": "1448580"
  },
  {
    "start": "1446000",
    "end": "1514000"
  },
  {
    "text": "to the storage is this idea of high availability so when deployed in a multi master configuration the capes API is",
    "start": "1448580",
    "end": "1455440"
  },
  {
    "text": "highly available and again that's sort of highly available just for free right",
    "start": "1455440",
    "end": "1461180"
  },
  {
    "text": "again really really enticing to me because it means I don't have to worry about the availability of my API it's",
    "start": "1461180",
    "end": "1467780"
  },
  {
    "text": "just highly available for free and I then have more time to focus on writing my services and shipping the features",
    "start": "1467780",
    "end": "1475190"
  },
  {
    "text": "that I care about there is another aspect to this this idea of high high",
    "start": "1475190",
    "end": "1481580"
  },
  {
    "text": "availability I think Sam touched on it earlier when we were talking about high availability of the controllers",
    "start": "1481580",
    "end": "1487910"
  },
  {
    "text": "themselves and so there's maybe a question of like hey should I be running my controller is highly available and I",
    "start": "1487910",
    "end": "1494930"
  },
  {
    "text": "guess I guess the thing to note there again is that in this like level based system perhaps it's actually okay if",
    "start": "1494930",
    "end": "1500930"
  },
  {
    "text": "your controller goes down for some period of time because all that's going to happen when it comes back online is",
    "start": "1500930",
    "end": "1506360"
  },
  {
    "text": "it's going to read the desired state of the world trigger it's reconcile function and away you go",
    "start": "1506360",
    "end": "1513550"
  },
  {
    "text": "and the last thing I want to talk about is performance so again the performance",
    "start": "1513550",
    "end": "1520160"
  },
  {
    "start": "1514000",
    "end": "1614000"
  },
  {
    "text": "of your API is going to be largely dependent on the underlying EDD datastore and there have been some",
    "start": "1520160",
    "end": "1527300"
  },
  {
    "text": "concerns around the performance of EDD in the past I guess the key thing here is or maybe the key worry is that if",
    "start": "1527300",
    "end": "1535970"
  },
  {
    "text": "you've got a particularly noisy service that then could potentially have a very negative impact on the performance of",
    "start": "1535970",
    "end": "1542720"
  },
  {
    "text": "not only your system but also like any other system that is also running on that kubernetes api and so we've got to",
    "start": "1542720",
    "end": "1549590"
  },
  {
    "text": "be a little bit careful I guess the general advice is if you if you're developing something that's going to be",
    "start": "1549590",
    "end": "1554770"
  },
  {
    "text": "slamming the database quite a lot like maybe like a metrics thing or if you're doing something like dumping your logs",
    "start": "1554770",
    "end": "1561530"
  },
  {
    "text": "in the database probably not a good idea but we do also have this this idea that",
    "start": "1561530",
    "end": "1569960"
  },
  {
    "text": "there's a there's a big conversation going on in a community at the moment as to whether or not you should just be",
    "start": "1569960",
    "end": "1575480"
  },
  {
    "text": "running one huge kubernetes cluster or if perhaps it's better to run lots of little ones and if you're off the mind",
    "start": "1575480",
    "end": "1582590"
  },
  {
    "text": "that lots of little ones is the way to go then perhaps these sorts of considerations are actually not so bad",
    "start": "1582590",
    "end": "1588550"
  },
  {
    "text": "it's even possible that you may just have a separate dedicated cluster purely",
    "start": "1588550",
    "end": "1593600"
  },
  {
    "text": "for these like extension you may not even enable the scheduler one man for example so there's lots of",
    "start": "1593600",
    "end": "1599539"
  },
  {
    "text": "things to think about the final thing I want to say about performance is the API machinery folks are thinking about",
    "start": "1599539",
    "end": "1605809"
  },
  {
    "text": "scaling targets for CID as themselves and there's a survey there if you're interested please go put that out so if",
    "start": "1605809",
    "end": "1616070"
  },
  {
    "text": "we want to take advantage of all of the benefits of kubernetes being declarative",
    "start": "1616070",
    "end": "1622730"
  },
  {
    "text": "eventually consistent for our own needs of our own service then we need to put",
    "start": "1622730",
    "end": "1628640"
  },
  {
    "text": "in some work to actually achieve that one of those things that we need to do one of those things we need to do is we",
    "start": "1628640",
    "end": "1636590"
  },
  {
    "text": "can't just take our micro service and turn it into a controller very easily it's a completely different paradigm of",
    "start": "1636590",
    "end": "1642820"
  },
  {
    "text": "writing software your service it's probably like a restful service and it's request and response talking to a",
    "start": "1642820",
    "end": "1649070"
  },
  {
    "text": "database may be talking out to some other services through RPC or more rest",
    "start": "1649070",
    "end": "1654169"
  },
  {
    "text": "calls however writing a controller is running a reconcile function that is",
    "start": "1654169",
    "end": "1660020"
  },
  {
    "text": "watching an API and converging state it's a very different way of thinking and writing software and as I just said",
    "start": "1660020",
    "end": "1669049"
  },
  {
    "text": "saying not everything fits like the cumulates API is opinionated and for",
    "start": "1669049",
    "end": "1674210"
  },
  {
    "text": "good reasons but if what you're trying to model doesn't fit so you do need that request response synchronized",
    "start": "1674210",
    "end": "1680779"
  },
  {
    "text": "synchronicity you can't map your domain as resources or you have a very complex",
    "start": "1680779",
    "end": "1686899"
  },
  {
    "text": "domain model then it's going to be an uphill battle and you're going to be fighting the API to model it in",
    "start": "1686899",
    "end": "1692690"
  },
  {
    "text": "kubernetes next up and this is particularly interesting for us that",
    "start": "1692690",
    "end": "1699100"
  },
  {
    "start": "1694000",
    "end": "1755000"
  },
  {
    "text": "what we really want to do is collaborate the way the kate's community collaborates we want CRTs to be the",
    "start": "1699100",
    "end": "1706460"
  },
  {
    "text": "standard interface between our teams in the micro services example we should saw earlier maybe each team had to define",
    "start": "1706460",
    "end": "1713570"
  },
  {
    "text": "their own API and maybe you have company standards for that API we also had to",
    "start": "1713570",
    "end": "1718610"
  },
  {
    "text": "have a service discovery system so that we could discover all the other API is available so in kubernetes the CID is",
    "start": "1718610",
    "end": "1726740"
  },
  {
    "text": "the interface between our team and what's the ideas are available in",
    "start": "1726740",
    "end": "1731780"
  },
  {
    "text": "the cluster is the discovery mechanism and so this interest EDA leads to interesting collaboration patterns where",
    "start": "1731780",
    "end": "1738200"
  },
  {
    "text": "we can have different teams responsible for different see IDs and maybe independently another team can monitor",
    "start": "1738200",
    "end": "1744860"
  },
  {
    "text": "the status of one team and extend the functionality through this mechanism so it allows for real loose coupling of",
    "start": "1744860",
    "end": "1751700"
  },
  {
    "text": "interactions between teams and finally",
    "start": "1751700",
    "end": "1756830"
  },
  {
    "start": "1755000",
    "end": "1871000"
  },
  {
    "text": "we don't really have time to go through too many of these but there are a whole bunch of other API features that you",
    "start": "1756830",
    "end": "1761900"
  },
  {
    "text": "probably want to consider and research if you are thinking about doing something like this I just took through a couple so binary",
    "start": "1761900",
    "end": "1769460"
  },
  {
    "text": "data for example you should not be using sed to store to store binary data if you",
    "start": "1769460",
    "end": "1774590"
  },
  {
    "text": "do need this this might not be the right approach for you alternatively you could upload your data to something like s3",
    "start": "1774590",
    "end": "1781130"
  },
  {
    "text": "and then just refer to it in your specification in your custom resource next if command any supports defining",
    "start": "1781130",
    "end": "1789710"
  },
  {
    "text": "relationships between resources and there's sort of two main mechanisms for doing this the first is a owner",
    "start": "1789710",
    "end": "1796850"
  },
  {
    "text": "reference which allows you to set up child parent relationships between your resources and this gives you properties",
    "start": "1796850",
    "end": "1802880"
  },
  {
    "text": "such as if you delete the parent the child resources will be cleaned up the other common one is adding labels to",
    "start": "1802880",
    "end": "1810590"
  },
  {
    "text": "your resources however it should be noted that managing the integrity of those labels is up to you as the",
    "start": "1810590",
    "end": "1817430"
  },
  {
    "text": "controller writer so you have to ensure that those labels make sense in a changing system next versioning is",
    "start": "1817430",
    "end": "1824480"
  },
  {
    "text": "interesting so custom resources allow you to have multiple versions installed at the same time so you can imagine that",
    "start": "1824480",
    "end": "1829970"
  },
  {
    "text": "teams are writing new versions of their custom resource but other teams are",
    "start": "1829970",
    "end": "1836390"
  },
  {
    "text": "relying on older versions so there's some backwards compatibility features there and now in communities 1.5 there's",
    "start": "1836390",
    "end": "1843860"
  },
  {
    "text": "a feature that allows you to migrate from one custom resource version to another custom resource version and",
    "start": "1843860",
    "end": "1850150"
  },
  {
    "text": "finally since we have this one control plane the kubernetes api and everything is represented as c ids we can take",
    "start": "1850150",
    "end": "1857360"
  },
  {
    "text": "advantage of any tooling that exists for this control plane so couple will work any you eyes that are",
    "start": "1857360",
    "end": "1863159"
  },
  {
    "text": "developed that will work the way you list everything in your system will be ubiquitous and so all tooling will be",
    "start": "1863159",
    "end": "1869369"
  },
  {
    "text": "the same so I guess the question is sort of remains is it a good idea to use C",
    "start": "1869369",
    "end": "1876419"
  },
  {
    "start": "1871000",
    "end": "2284000"
  },
  {
    "text": "IDs outside of the scheduler so to see I do not to see ID so if you are wanting",
    "start": "1876419",
    "end": "1884069"
  },
  {
    "text": "to run complex workloads that maybe are stateful on kubernetes the operator pattern seems to be the emerging",
    "start": "1884069",
    "end": "1890939"
  },
  {
    "text": "technology and way to do this and as C IDs get more features they're going to",
    "start": "1890939",
    "end": "1896879"
  },
  {
    "text": "become even more applicable to other problems such as the home automation system we showed here and I think we'll",
    "start": "1896879",
    "end": "1903089"
  },
  {
    "text": "see maybe an explosion of experiments in this way in the next sort of 12 months to sort of see what things can we build",
    "start": "1903089",
    "end": "1909929"
  },
  {
    "text": "with the kubernetes api itself but just be careful of jumping on the bandwagon",
    "start": "1909929",
    "end": "1916019"
  },
  {
    "text": "when any new technology comes out there's a whole exploration of what is possible so I hope this talk has sort of",
    "start": "1916019",
    "end": "1921569"
  },
  {
    "text": "helped with some of these considerations and things you should be thinking about",
    "start": "1921569",
    "end": "1926449"
  },
  {
    "text": "yeah and so I think Mike one of the main things that we learn in in looking at",
    "start": "1926629",
    "end": "1933119"
  },
  {
    "text": "all of this over the past six months or so is that people have very strong opinions about this right some people",
    "start": "1933119",
    "end": "1939659"
  },
  {
    "text": "think this is a great idea and you should go all in and it's gonna be fantastic others are more concerned think that just stay away and so",
    "start": "1939659",
    "end": "1946979"
  },
  {
    "text": "whenever in doubt you know we'd like to look to Twitter to see what people are thinking there was actually like there",
    "start": "1946979",
    "end": "1953249"
  },
  {
    "text": "was a good tweet the other day there kind of some some of this up which was this one here and I guess the takeaway",
    "start": "1953249",
    "end": "1961019"
  },
  {
    "text": "is like yeah this is a new technology I think people are getting excited about it and I think quite rightly so I think",
    "start": "1961019",
    "end": "1967739"
  },
  {
    "text": "there is a lot of potential in this new way of working and I'm really really excited to see where it's going to go",
    "start": "1967739",
    "end": "1973739"
  },
  {
    "text": "but at the end of the day we need to remember like not everything has to be a CRV and with that I think that that's",
    "start": "1973739",
    "end": "1982409"
  },
  {
    "text": "all we've got time for so thank you very much I don't know if there's time for",
    "start": "1982409",
    "end": "1992710"
  },
  {
    "text": "questions perhaps if anyone has any or perhaps",
    "start": "1992710",
    "end": "1999370"
  },
  {
    "text": "just come speak to us afterwards oh yes",
    "start": "1999370",
    "end": "2003260"
  },
  {
    "text": "[Music]",
    "start": "2004490",
    "end": "2007929"
  },
  {
    "text": "so it was a very interesting talk thank you so I have a question so if I'm making a cluster wide ceoddi and if I",
    "start": "2017450",
    "end": "2024540"
  },
  {
    "text": "want to how only one instance of that CRD on my cluster is that a pattern to do that it's like a singleton CRD I",
    "start": "2024540",
    "end": "2035630"
  },
  {
    "text": "guess the honest answer is I'm not sure so there's quotas which have been introduced in a new version of cabinets",
    "start": "2037250",
    "end": "2043679"
  },
  {
    "text": "but I'm not sure that cost of white coats is I don't know if anybody knows I'm so your shakes have head so I don't think so think so you can set quotas",
    "start": "2043679",
    "end": "2049618"
  },
  {
    "text": "within a namespace but not a cluster wide but not today",
    "start": "2049619",
    "end": "2056090"
  },
  {
    "text": "you know there are questions",
    "start": "2064590",
    "end": "2067700"
  },
  {
    "text": "is those CIP controller only works deploy on master node or my question is",
    "start": "2070169",
    "end": "2078929"
  },
  {
    "text": "how those controller scale yeah yeah so",
    "start": "2078929",
    "end": "2086940"
  },
  {
    "text": "actually like your controllers don't even need to be running in kubernetes so for example like when we're developing",
    "start": "2086940",
    "end": "2092340"
  },
  {
    "text": "this control is one pattern we see is that you run your controller on your local developer machine and you just",
    "start": "2092340",
    "end": "2098369"
  },
  {
    "text": "have to point it and make sure that you have access to the master API so you can actually run these controllers from",
    "start": "2098369",
    "end": "2103920"
  },
  {
    "text": "anywhere I think the typical pattern is that you would typically run them inside the cluster but there's there's nothing that",
    "start": "2103920",
    "end": "2110220"
  },
  {
    "text": "says that you have to do that yes so I",
    "start": "2110220",
    "end": "2119100"
  },
  {
    "text": "have a kinda change about the mountain version and we all see IDs I'm not sure in your case how are you supporting the",
    "start": "2119100",
    "end": "2125910"
  },
  {
    "text": "mountain version for USAID for example for your case for Team a he wanted the",
    "start": "2125910",
    "end": "2131130"
  },
  {
    "text": "lightning service version but example version one but they added every team C",
    "start": "2131130",
    "end": "2136800"
  },
  {
    "text": "wants this version to how managing the relationship between the mountain versions and the other one and how you",
    "start": "2136800",
    "end": "2143130"
  },
  {
    "text": "validate your say at least gamer how you make sure all the same object it's",
    "start": "2143130",
    "end": "2149820"
  },
  {
    "text": "correct answering your second question first and so you now have structural",
    "start": "2149820",
    "end": "2157500"
  },
  {
    "text": "steamers for your customer resources so you can ensure that the customer resource has the correct structure but",
    "start": "2157500",
    "end": "2164130"
  },
  {
    "text": "then I guess it's up to your controller to do validation and you can do this file like an admission controller so that you can reject requests before",
    "start": "2164130",
    "end": "2170220"
  },
  {
    "text": "storage if it doesn't breaks any of your like business sort of logic that sort of",
    "start": "2170220",
    "end": "2176340"
  },
  {
    "text": "stuff question again okay",
    "start": "2176340",
    "end": "2184590"
  },
  {
    "text": "so I guess you're always gonna have to have communication between teams so the question was and how do you manage",
    "start": "2184590",
    "end": "2191670"
  },
  {
    "text": "having multiple customer resource definition versions and multiple teams that rely on different versions so I",
    "start": "2191670",
    "end": "2198090"
  },
  {
    "text": "think like you series allow you to have multiple versions install but you're",
    "start": "2198090",
    "end": "2203340"
  },
  {
    "text": "still going to have the problem of needing to know to some degree which teams are consuming that version because",
    "start": "2203340",
    "end": "2208500"
  },
  {
    "text": "you don't want to keep your old CI DS around forever as a team you want to know when you can deprecated them and I",
    "start": "2208500",
    "end": "2214830"
  },
  {
    "text": "don't think there's any sort of technology solution for that it's sort of a team collaboration sort of problem",
    "start": "2214830",
    "end": "2220400"
  },
  {
    "text": "so so you mean for example I have tuition our live service so if I have no",
    "start": "2220400",
    "end": "2228540"
  },
  {
    "text": "way to force that he may only use the version one but only by the collaboration between team it's the case",
    "start": "2228540",
    "end": "2237800"
  },
  {
    "text": "using the newer versions in communities and you can change you can migrate from",
    "start": "2237800",
    "end": "2243360"
  },
  {
    "text": "one version to the other but the other team has to be aware of that so that you don't break them or you have additive C",
    "start": "2243360",
    "end": "2250110"
  },
  {
    "text": "IDs so that they can still rely on the older versions so I want to know if there any way to fast an example the",
    "start": "2250110",
    "end": "2256980"
  },
  {
    "text": "team a only rely on question one but Tim being reliant version 2 is there any way",
    "start": "2256980",
    "end": "2263640"
  },
  {
    "text": "to do two for this no not I know of in",
    "start": "2263640",
    "end": "2269700"
  },
  {
    "text": "terms of forcing different teams to use different CID versions and I don't not",
    "start": "2269700",
    "end": "2275370"
  },
  {
    "text": "that I know okay thank you all right well thank you very much everybody",
    "start": "2275370",
    "end": "2282140"
  }
]