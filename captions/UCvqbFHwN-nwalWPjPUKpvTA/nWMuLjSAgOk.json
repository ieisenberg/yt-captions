[
  {
    "text": "hello everyone and welcome to this talk",
    "start": "40",
    "end": "1719"
  },
  {
    "text": "which is going to be about correlating",
    "start": "1719",
    "end": "3639"
  },
  {
    "text": "profiling with tracing my name is",
    "start": "3639",
    "end": "5600"
  },
  {
    "text": "chrisos calanis and I'm currently",
    "start": "5600",
    "end": "7640"
  },
  {
    "text": "working as a principal engineer at",
    "start": "7640",
    "end": "9000"
  },
  {
    "text": "elastic I'm also maintainer for the open",
    "start": "9000",
    "end": "11440"
  },
  {
    "text": "Telemetry profiling Sig and co-author",
    "start": "11440",
    "end": "14320"
  },
  {
    "text": "and maintainer of the open Telemetry",
    "start": "14320",
    "end": "16118"
  },
  {
    "text": "ebpf",
    "start": "16119",
    "end": "18800"
  },
  {
    "text": "profiler a profiler is profiling is",
    "start": "19439",
    "end": "22080"
  },
  {
    "text": "quickly becoming entranced in",
    "start": "22080",
    "end": "24119"
  },
  {
    "text": "observability as opposed to logs metrics",
    "start": "24119",
    "end": "26359"
  },
  {
    "text": "and traces which are focused on",
    "start": "26359",
    "end": "28359"
  },
  {
    "text": "answering uh what happened and when did",
    "start": "28359",
    "end": "31160"
  },
  {
    "text": "this happen type of questions profiling",
    "start": "31160",
    "end": "33480"
  },
  {
    "text": "can ER deeper into the system and focus",
    "start": "33480",
    "end": "36120"
  },
  {
    "text": "on the why now in this talk we're",
    "start": "36120",
    "end": "38600"
  },
  {
    "text": "relying on CPU profiling that uses",
    "start": "38600",
    "end": "41079"
  },
  {
    "text": "sampling to periodically capture system",
    "start": "41079",
    "end": "43680"
  },
  {
    "text": "stack traces for example 20 times a",
    "start": "43680",
    "end": "46920"
  },
  {
    "text": "second uh by running a low overhead CPU",
    "start": "46920",
    "end": "50160"
  },
  {
    "text": "profiler continuously in production we",
    "start": "50160",
    "end": "52239"
  },
  {
    "text": "can obtain a higher level of visibility",
    "start": "52239",
    "end": "54440"
  },
  {
    "text": "across our entire fleet and that uh lets",
    "start": "54440",
    "end": "57320"
  },
  {
    "text": "us unveil unknown unknowns",
    "start": "57320",
    "end": "61600"
  },
  {
    "text": "now in this slide we can see some of the",
    "start": "62359",
    "end": "63840"
  },
  {
    "text": "benefits of continuous profiling but",
    "start": "63840",
    "end": "66640"
  },
  {
    "text": "more specifically uh companies have",
    "start": "66640",
    "end": "69159"
  },
  {
    "text": "difficulties mapping CPU consumption to",
    "start": "69159",
    "end": "72680"
  },
  {
    "text": "actual lines of code and also tracking",
    "start": "72680",
    "end": "74720"
  },
  {
    "text": "performance regressions over",
    "start": "74720",
    "end": "77000"
  },
  {
    "text": "time for example hyperscalers like",
    "start": "77000",
    "end": "79360"
  },
  {
    "text": "Google have had uh data center-wide",
    "start": "79360",
    "end": "81640"
  },
  {
    "text": "continuous profiling for some time uh",
    "start": "81640",
    "end": "84119"
  },
  {
    "text": "Google has published a few papers about",
    "start": "84119",
    "end": "85640"
  },
  {
    "text": "it they call it Google wide profiling",
    "start": "85640",
    "end": "88240"
  },
  {
    "text": "and those papers have been very",
    "start": "88240",
    "end": "90400"
  },
  {
    "text": "influential but uh generally continuous",
    "start": "90400",
    "end": "93240"
  },
  {
    "text": "profiling has not been uh widely",
    "start": "93240",
    "end": "95200"
  },
  {
    "text": "available contemporary profilers have",
    "start": "95200",
    "end": "97880"
  },
  {
    "text": "problems uh with production binaries",
    "start": "97880",
    "end": "100680"
  },
  {
    "text": "that are usually compiled without frame",
    "start": "100680",
    "end": "102799"
  },
  {
    "text": "pointers and without symbols and they",
    "start": "102799",
    "end": "105159"
  },
  {
    "text": "typically don't support a high level",
    "start": "105159",
    "end": "107119"
  },
  {
    "text": "language run times without application",
    "start": "107119",
    "end": "109560"
  },
  {
    "text": "instrumentation it would be great if we",
    "start": "109560",
    "end": "111920"
  },
  {
    "text": "could make a low overhead uh continuous",
    "start": "111920",
    "end": "114640"
  },
  {
    "text": "CPU profiler that's easy to deploy",
    "start": "114640",
    "end": "116680"
  },
  {
    "text": "available to everyone",
    "start": "116680",
    "end": "120439"
  },
  {
    "text": "and this is exactly what we try to do in",
    "start": "121399",
    "end": "123680"
  },
  {
    "text": "a startup called optimize Cloud which in",
    "start": "123680",
    "end": "126719"
  },
  {
    "text": "2021 uh we launched a low overhead zero",
    "start": "126719",
    "end": "129640"
  },
  {
    "text": "instrumentation multi runtime profiler",
    "start": "129640",
    "end": "132920"
  },
  {
    "text": "uh shortly after we were acquired by",
    "start": "132920",
    "end": "134680"
  },
  {
    "text": "elastic and in 2024 elastic decided to",
    "start": "134680",
    "end": "137760"
  },
  {
    "text": "donate the profiling agent to open",
    "start": "137760",
    "end": "139239"
  },
  {
    "text": "Telemetry whilst continuing to support",
    "start": "139239",
    "end": "141760"
  },
  {
    "text": "and evolve its",
    "start": "141760",
    "end": "143160"
  },
  {
    "text": "functionality our profiler is based on",
    "start": "143160",
    "end": "145360"
  },
  {
    "text": "ebpf requires ebpf is a technology that",
    "start": "145360",
    "end": "148480"
  },
  {
    "text": "lets us insert and execute new code into",
    "start": "148480",
    "end": "151440"
  },
  {
    "text": "the Linux kernel in a safe manner",
    "start": "151440",
    "end": "153840"
  },
  {
    "text": "without having to implement and load the",
    "start": "153840",
    "end": "155560"
  },
  {
    "text": "kernel module uh the profile requires no",
    "start": "155560",
    "end": "158840"
  },
  {
    "text": "instrumentation no application or",
    "start": "158840",
    "end": "160120"
  },
  {
    "text": "restarts of any kind uh it gives us",
    "start": "160120",
    "end": "162879"
  },
  {
    "text": "whole system visibility starting from",
    "start": "162879",
    "end": "164319"
  },
  {
    "text": "the kernel into code uh running into",
    "start": "164319",
    "end": "166720"
  },
  {
    "text": "native code and also code running into",
    "start": "166720",
    "end": "168599"
  },
  {
    "text": "higher level language run times we",
    "start": "168599",
    "end": "170720"
  },
  {
    "text": "support most programming languages that",
    "start": "170720",
    "end": "172920"
  },
  {
    "text": "compil to native code but also uh most",
    "start": "172920",
    "end": "176440"
  },
  {
    "text": "of the widely used higher level",
    "start": "176440",
    "end": "178280"
  },
  {
    "text": "languages and on the performance front",
    "start": "178280",
    "end": "181360"
  },
  {
    "text": "we aim for very low CPU in memory",
    "start": "181360",
    "end": "183280"
  },
  {
    "text": "overheads because we want to enable",
    "start": "183280",
    "end": "185440"
  },
  {
    "text": "running the profiler in production",
    "start": "185440",
    "end": "187040"
  },
  {
    "text": "continuously at all times now the",
    "start": "187040",
    "end": "188720"
  },
  {
    "text": "typical case that we aim for is less",
    "start": "188720",
    "end": "191400"
  },
  {
    "text": "than 1% system CPU and less than 250",
    "start": "191400",
    "end": "194680"
  },
  {
    "text": "megabytes of Ram uh finally the profiler",
    "start": "194680",
    "end": "198879"
  },
  {
    "text": "runs on amd64 and R6 64",
    "start": "198879",
    "end": "202440"
  },
  {
    "text": "architectures uh it's an open project uh",
    "start": "202440",
    "end": "205080"
  },
  {
    "text": "I urge you all to contribute and I have",
    "start": "205080",
    "end": "208120"
  },
  {
    "text": "a talk on Thursday where I'm going to be",
    "start": "208120",
    "end": "209439"
  },
  {
    "text": "getting into much more detail about the",
    "start": "209439",
    "end": "210959"
  },
  {
    "text": "profiler how it works and also all the",
    "start": "210959",
    "end": "212680"
  },
  {
    "text": "relevant work that we're doing in open",
    "start": "212680",
    "end": "214360"
  },
  {
    "text": "Telemetry if that sounds like something",
    "start": "214360",
    "end": "216439"
  },
  {
    "text": "you're interested in please come and see",
    "start": "216439",
    "end": "218280"
  },
  {
    "text": "me and now without further Ado I will",
    "start": "218280",
    "end": "220239"
  },
  {
    "text": "pass this on to",
    "start": "220239",
    "end": "222879"
  },
  {
    "text": "Jonas so um so far we've heard from",
    "start": "224360",
    "end": "227560"
  },
  {
    "text": "Christos why profiling is nice why",
    "start": "227560",
    "end": "230360"
  },
  {
    "text": "continuous profiling uh is gives a lot",
    "start": "230360",
    "end": "233439"
  },
  {
    "text": "of benefits but uh with open Telemetry",
    "start": "233439",
    "end": "236879"
  },
  {
    "text": "it is not only a benefit of having a",
    "start": "236879",
    "end": "239239"
  },
  {
    "text": "single unified API for collecting all",
    "start": "239239",
    "end": "241560"
  },
  {
    "text": "kinds of of signals but also to allow a",
    "start": "241560",
    "end": "245120"
  },
  {
    "text": "easy correlation of the data directly uh",
    "start": "245120",
    "end": "248079"
  },
  {
    "text": "based on correlations happen happening",
    "start": "248079",
    "end": "250239"
  },
  {
    "text": "while collecting the data so for example",
    "start": "250239",
    "end": "253720"
  },
  {
    "text": "think of uh logs and tracing it is very",
    "start": "253720",
    "end": "256359"
  },
  {
    "text": "common to uh inject your Trace ID and",
    "start": "256359",
    "end": "259160"
  },
  {
    "text": "span ID into your locks so that you can",
    "start": "259160",
    "end": "261519"
  },
  {
    "text": "easily jump from your locks to your",
    "start": "261519",
    "end": "263360"
  },
  {
    "text": "traces and yeah vice versa and why",
    "start": "263360",
    "end": "266639"
  },
  {
    "text": "shouldn't the same benefits apply to",
    "start": "266639",
    "end": "268520"
  },
  {
    "text": "profiling so so uh for example you have",
    "start": "268520",
    "end": "271400"
  },
  {
    "text": "your your application called my app here",
    "start": "271400",
    "end": "274400"
  },
  {
    "text": "and it you identify it based on your",
    "start": "274400",
    "end": "277440"
  },
  {
    "text": "open Telemetry Telemetry so you search",
    "start": "277440",
    "end": "279880"
  },
  {
    "text": "in your solution for for its service",
    "start": "279880",
    "end": "281840"
  },
  {
    "text": "name now uh that application suddenly",
    "start": "281840",
    "end": "284759"
  },
  {
    "text": "has a high CPU usage now you want to",
    "start": "284759",
    "end": "287160"
  },
  {
    "text": "find out where does that CPU usage come",
    "start": "287160",
    "end": "289560"
  },
  {
    "text": "from so best to uh look into the",
    "start": "289560",
    "end": "291960"
  },
  {
    "text": "profiling data and wouldn't it be neat",
    "start": "291960",
    "end": "293880"
  },
  {
    "text": "to be able to do that just on the open",
    "start": "293880",
    "end": "295720"
  },
  {
    "text": "Telemetry service name and yeah it's",
    "start": "295720",
    "end": "300400"
  },
  {
    "text": "for uh for for traces it's it's the same",
    "start": "300400",
    "end": "303720"
  },
  {
    "text": "thing so uh for example imagine that",
    "start": "303720",
    "end": "307039"
  },
  {
    "text": "your get through end point seems to",
    "start": "307039",
    "end": "310080"
  },
  {
    "text": "seems to have a high latency which you",
    "start": "310080",
    "end": "311759"
  },
  {
    "text": "can't explain with with IO so it would",
    "start": "311759",
    "end": "314199"
  },
  {
    "text": "be great to to look at the CPU usage",
    "start": "314199",
    "end": "316840"
  },
  {
    "text": "focused on that single end point so in",
    "start": "316840",
    "end": "319520"
  },
  {
    "text": "the open Telemetry world you would have",
    "start": "319520",
    "end": "321720"
  },
  {
    "text": "traces on and spans for for that endo",
    "start": "321720",
    "end": "325639"
  },
  {
    "text": "and wouldn't it be great if you can like",
    "start": "325639",
    "end": "328000"
  },
  {
    "text": "get a flame graph focused on your",
    "start": "328000",
    "end": "330039"
  },
  {
    "text": "filtered",
    "start": "330039",
    "end": "331440"
  },
  {
    "text": "traces so first step of getting there",
    "start": "331440",
    "end": "334319"
  },
  {
    "text": "would be of course to add a profiler in",
    "start": "334319",
    "end": "336800"
  },
  {
    "text": "your application but um that profiler",
    "start": "336800",
    "end": "340240"
  },
  {
    "text": "sees the application from the operating",
    "start": "340240",
    "end": "343160"
  },
  {
    "text": "system level perspective so uh for",
    "start": "343160",
    "end": "346199"
  },
  {
    "text": "example on process level the profiler",
    "start": "346199",
    "end": "348400"
  },
  {
    "text": "doesn't see the service name internal to",
    "start": "348400",
    "end": "350800"
  },
  {
    "text": "your open Telemetry SDK it just sees the",
    "start": "350800",
    "end": "353400"
  },
  {
    "text": "process name uh startup arguments and",
    "start": "353400",
    "end": "356840"
  },
  {
    "text": "process ID for example and similar on on",
    "start": "356840",
    "end": "359800"
  },
  {
    "text": "the individual execution level the",
    "start": "359800",
    "end": "362000"
  },
  {
    "text": "profiler sees the Frets their fret IDs",
    "start": "362000",
    "end": "364319"
  },
  {
    "text": "their names but it doesn't know what the",
    "start": "364319",
    "end": "366360"
  },
  {
    "text": "Fret is actually doing except for the",
    "start": "366360",
    "end": "368039"
  },
  {
    "text": "stake trace it doesn't see the open",
    "start": "368039",
    "end": "370199"
  },
  {
    "text": "Telemetry traces on there so um one",
    "start": "370199",
    "end": "374319"
  },
  {
    "text": "attempt we could take to correlate this",
    "start": "374319",
    "end": "376680"
  },
  {
    "text": "data is to go through the operating",
    "start": "376680",
    "end": "379479"
  },
  {
    "text": "system uh view of the world so for",
    "start": "379479",
    "end": "382319"
  },
  {
    "text": "example on uh yeah to do an indirect",
    "start": "382319",
    "end": "385800"
  },
  {
    "text": "correlation on operating system level uh",
    "start": "385800",
    "end": "388479"
  },
  {
    "text": "resources so um for example we want to",
    "start": "388479",
    "end": "391840"
  },
  {
    "text": "look up the profiling data for all",
    "start": "391840",
    "end": "394800"
  },
  {
    "text": "instances of our my app open Telemetry",
    "start": "394800",
    "end": "397800"
  },
  {
    "text": "service then we need to do like a",
    "start": "397800",
    "end": "399599"
  },
  {
    "text": "two-step qu we first need to find all",
    "start": "399599",
    "end": "402319"
  },
  {
    "text": "Container IDs and process IDs for all",
    "start": "402319",
    "end": "405039"
  },
  {
    "text": "our service instances and then filter",
    "start": "405039",
    "end": "407720"
  },
  {
    "text": "our profiling data based on that which",
    "start": "407720",
    "end": "410919"
  },
  {
    "text": "uh yeah is doable but depending on your",
    "start": "410919",
    "end": "413319"
  },
  {
    "text": "backend that might involve uh joints",
    "start": "413319",
    "end": "415560"
  },
  {
    "text": "which are sometimes not so nice for",
    "start": "415560",
    "end": "417720"
  },
  {
    "text": "large data sets and on the trace level",
    "start": "417720",
    "end": "421960"
  },
  {
    "text": "things get even more hairy because um",
    "start": "421960",
    "end": "425400"
  },
  {
    "text": "what what you essentially would need to",
    "start": "425400",
    "end": "427400"
  },
  {
    "text": "do uh is on the profiler side capture",
    "start": "427400",
    "end": "430520"
  },
  {
    "text": "the thread ID and the time stamps and on",
    "start": "430520",
    "end": "432919"
  },
  {
    "text": "the tracing side do the same to bring uh",
    "start": "432919",
    "end": "435840"
  },
  {
    "text": "those two together so uh for time stamps",
    "start": "435840",
    "end": "439280"
  },
  {
    "text": "you have the first problem of clocks you",
    "start": "439280",
    "end": "442039"
  },
  {
    "text": "need to be very certain that the clock",
    "start": "442039",
    "end": "444000"
  },
  {
    "text": "used by the open Telemetry SDK and the",
    "start": "444000",
    "end": "446560"
  },
  {
    "text": "clock used by your profiler provide",
    "start": "446560",
    "end": "448800"
  },
  {
    "text": "exactly the same time stamps otherwise",
    "start": "448800",
    "end": "451199"
  },
  {
    "text": "your correlation is guarant to be",
    "start": "451199",
    "end": "453599"
  },
  {
    "text": "guaranteed to be off and the next thing",
    "start": "453599",
    "end": "456960"
  },
  {
    "text": "is uh collecting a tread ID also isn't",
    "start": "456960",
    "end": "460280"
  },
  {
    "text": "that easy because spans kind of uh",
    "start": "460280",
    "end": "464520"
  },
  {
    "text": "belongs somehow to threats but it it",
    "start": "464520",
    "end": "466520"
  },
  {
    "text": "isn't necessarily the same concept so",
    "start": "466520",
    "end": "468879"
  },
  {
    "text": "for example in the asynchronous exe",
    "start": "468879",
    "end": "471599"
  },
  {
    "text": "execution World your span can start on",
    "start": "471599",
    "end": "473840"
  },
  {
    "text": "one threet and later finish on another",
    "start": "473840",
    "end": "476159"
  },
  {
    "text": "threet and uh for another example would",
    "start": "476159",
    "end": "479680"
  },
  {
    "text": "you have like a CPU intense task covered",
    "start": "479680",
    "end": "482319"
  },
  {
    "text": "by a span and that task spawns some subs",
    "start": "482319",
    "end": "485919"
  },
  {
    "text": "or submits tasks to a worker queue this",
    "start": "485919",
    "end": "488400"
  },
  {
    "text": "means basically your same span does",
    "start": "488400",
    "end": "491199"
  },
  {
    "text": "spend CPU time but on other threets",
    "start": "491199",
    "end": "494080"
  },
  {
    "text": "that's why uh we decided to instead go",
    "start": "494080",
    "end": "497400"
  },
  {
    "text": "for an explicit approach of uh",
    "start": "497400",
    "end": "500000"
  },
  {
    "text": "explicitly correlating the data and not",
    "start": "500000",
    "end": "501960"
  },
  {
    "text": "going through this indirect uh operating",
    "start": "501960",
    "end": "505000"
  },
  {
    "text": "system level",
    "start": "505000",
    "end": "506680"
  },
  {
    "text": "attributes so um how do we do this the",
    "start": "506680",
    "end": "509840"
  },
  {
    "text": "profiler can in fact in addition uh to",
    "start": "509840",
    "end": "513399"
  },
  {
    "text": "seeing the threats and the process name",
    "start": "513399",
    "end": "515159"
  },
  {
    "text": "and stuff see something else very",
    "start": "515159",
    "end": "517159"
  },
  {
    "text": "important from from the process and that",
    "start": "517159",
    "end": "519360"
  },
  {
    "text": "is native memory so uh for example you",
    "start": "519360",
    "end": "522760"
  },
  {
    "text": "can in your application have a global",
    "start": "522760",
    "end": "524720"
  },
  {
    "text": "variable pointing to some native memory",
    "start": "524720",
    "end": "527360"
  },
  {
    "text": "space and then the profiler will be able",
    "start": "527360",
    "end": "530360"
  },
  {
    "text": "to actually read the contents of that",
    "start": "530360",
    "end": "532560"
  },
  {
    "text": "variable similar on a fret level there",
    "start": "532560",
    "end": "534920"
  },
  {
    "text": "is Fred local storage so each each fret",
    "start": "534920",
    "end": "537279"
  },
  {
    "text": "has its own storage space and and yeah",
    "start": "537279",
    "end": "539920"
  },
  {
    "text": "after some work the EBP ebpf profile is",
    "start": "539920",
    "end": "542959"
  },
  {
    "text": "also capable of reading a threed local",
    "start": "542959",
    "end": "546040"
  },
  {
    "text": "storage values and yeah this capability",
    "start": "546040",
    "end": "549600"
  },
  {
    "text": "now allows us to perform explicit",
    "start": "549600",
    "end": "551720"
  },
  {
    "text": "correlation so this means on the process",
    "start": "551720",
    "end": "554480"
  },
  {
    "text": "level we can um write the service name",
    "start": "554480",
    "end": "558720"
  },
  {
    "text": "and other resource attributes directly",
    "start": "558720",
    "end": "561079"
  },
  {
    "text": "into the native memory uh yeah in the",
    "start": "561079",
    "end": "564160"
  },
  {
    "text": "process level native memory pointed to",
    "start": "564160",
    "end": "566160"
  },
  {
    "text": "by a global variable and similar on the",
    "start": "566160",
    "end": "569399"
  },
  {
    "text": "on the trace level what we can do there",
    "start": "569399",
    "end": "571680"
  },
  {
    "text": "is whenever um whenever the trace",
    "start": "571680",
    "end": "574760"
  },
  {
    "text": "context on the threet changes so",
    "start": "574760",
    "end": "576279"
  },
  {
    "text": "whenever you for example make a spend",
    "start": "576279",
    "end": "578560"
  },
  {
    "text": "the current one in the open Telemetry",
    "start": "578560",
    "end": "580240"
  },
  {
    "text": "context or that scope is then closed um",
    "start": "580240",
    "end": "583920"
  },
  {
    "text": "we update the native Fred local storage",
    "start": "583920",
    "end": "587560"
  },
  {
    "text": "so basically there is no two places",
    "start": "587560",
    "end": "589760"
  },
  {
    "text": "where where the trace context is stored",
    "start": "589760",
    "end": "591959"
  },
  {
    "text": "one's at on the application side in the",
    "start": "591959",
    "end": "593880"
  },
  {
    "text": "open Telemetry SDK and on the uh Native",
    "start": "593880",
    "end": "598120"
  },
  {
    "text": "side in the Fred local",
    "start": "598120",
    "end": "600519"
  },
  {
    "text": "variable and the best thing about this",
    "start": "600519",
    "end": "603519"
  },
  {
    "text": "is that we can nicely wrap this up in an",
    "start": "603519",
    "end": "606079"
  },
  {
    "text": "open Telemetry SDK extension so uh All",
    "start": "606079",
    "end": "609760"
  },
  {
    "text": "The Hairy Bits and Pieces get wrapped up",
    "start": "609760",
    "end": "612680"
  },
  {
    "text": "in an extension you can very easily set",
    "start": "612680",
    "end": "615200"
  },
  {
    "text": "up and run so we've so far implemented",
    "start": "615200",
    "end": "619120"
  },
  {
    "text": "this for uh Java and yeah this",
    "start": "619120",
    "end": "623399"
  },
  {
    "text": "implementation uh has been done quite a",
    "start": "623399",
    "end": "626600"
  },
  {
    "text": "while ago so it is still for like the",
    "start": "626600",
    "end": "628920"
  },
  {
    "text": "Prest this is a product of the open",
    "start": "628920",
    "end": "631079"
  },
  {
    "text": "Telemetry ebpf profiler which uh",
    "start": "631079",
    "end": "634240"
  },
  {
    "text": "formerly was known as the elastic",
    "start": "634240",
    "end": "636240"
  },
  {
    "text": "Universal profiling so uh this is still",
    "start": "636240",
    "end": "638760"
  },
  {
    "text": "called Universal profiling processor but",
    "start": "638760",
    "end": "642000"
  },
  {
    "text": "uh we plan on yeah working with with the",
    "start": "642000",
    "end": "644720"
  },
  {
    "text": "open Telemetry folks to get this",
    "start": "644720",
    "end": "646800"
  },
  {
    "text": "contributed and have it go through like",
    "start": "646800",
    "end": "648480"
  },
  {
    "text": "the standardization process so that we",
    "start": "648480",
    "end": "650720"
  },
  {
    "text": "can also have it in the open Telemetry",
    "start": "650720",
    "end": "653079"
  },
  {
    "text": "ebpf profiler so um if you're interested",
    "start": "653079",
    "end": "656560"
  },
  {
    "text": "you can already find the source for this",
    "start": "656560",
    "end": "658440"
  },
  {
    "text": "implementation on get up uh via the",
    "start": "658440",
    "end": "660639"
  },
  {
    "text": "slides and yeah here you can basically",
    "start": "660639",
    "end": "662880"
  },
  {
    "text": "see the code snippet of what it takes to",
    "start": "662880",
    "end": "665000"
  },
  {
    "text": "set it up all you have to do is just",
    "start": "665000",
    "end": "667880"
  },
  {
    "text": "start the span processor and add the",
    "start": "667880",
    "end": "670880"
  },
  {
    "text": "span processor to your SDK and it it",
    "start": "670880",
    "end": "674639"
  },
  {
    "text": "registers all the required hooks in the",
    "start": "674639",
    "end": "676639"
  },
  {
    "text": "background it uh for Java loads a Java",
    "start": "676639",
    "end": "680160"
  },
  {
    "text": "native interface native library because",
    "start": "680160",
    "end": "682519"
  },
  {
    "text": "we have to write n and allocate native",
    "start": "682519",
    "end": "685399"
  },
  {
    "text": "memory and it especially registers a",
    "start": "685399",
    "end": "688519"
  },
  {
    "text": "listeners so uh that whenever your your",
    "start": "688519",
    "end": "692000"
  },
  {
    "text": "Trace context changes on a threet that",
    "start": "692000",
    "end": "694200"
  },
  {
    "text": "that change is propagated to uh to the",
    "start": "694200",
    "end": "697720"
  },
  {
    "text": "native threet local storage and by the",
    "start": "697720",
    "end": "699880"
  },
  {
    "text": "way for Java there is a new thing called",
    "start": "699880",
    "end": "702480"
  },
  {
    "text": "virual threets which makes things uh a",
    "start": "702480",
    "end": "705480"
  },
  {
    "text": "bit more difficult because your Java",
    "start": "705480",
    "end": "707160"
  },
  {
    "text": "threets don't exactly correspond anymore",
    "start": "707160",
    "end": "709519"
  },
  {
    "text": "to platform threets but that also works",
    "start": "709519",
    "end": "712200"
  },
  {
    "text": "because the native library takes care of",
    "start": "712200",
    "end": "714880"
  },
  {
    "text": "uh keeping that native Fred local",
    "start": "714880",
    "end": "716600"
  },
  {
    "text": "storage in sync whenever the vual Fred",
    "start": "716600",
    "end": "719240"
  },
  {
    "text": "switches its",
    "start": "719240",
    "end": "721160"
  },
  {
    "text": "career so enough uh talking about the",
    "start": "721160",
    "end": "724959"
  },
  {
    "text": "theory time for a demo we've decided to",
    "start": "724959",
    "end": "727839"
  },
  {
    "text": "use the uh official open Telemetry demos",
    "start": "727839",
    "end": "730639"
  },
  {
    "text": "some of you might know it's a web shop",
    "start": "730639",
    "end": "733480"
  },
  {
    "text": "for telescopes and related products and",
    "start": "733480",
    "end": "736880"
  },
  {
    "text": "it's built from built with lots and lots",
    "start": "736880",
    "end": "739800"
  },
  {
    "text": "of",
    "start": "739800",
    "end": "740839"
  },
  {
    "text": "microservices so uh yeah we will be",
    "start": "740839",
    "end": "743760"
  },
  {
    "text": "focusing on a certain Java microservice",
    "start": "743760",
    "end": "746880"
  },
  {
    "text": "within this demo which is the",
    "start": "746880",
    "end": "749199"
  },
  {
    "text": "advertisement service or short at",
    "start": "749199",
    "end": "751199"
  },
  {
    "text": "service this service is a Java GPC app",
    "start": "751199",
    "end": "755560"
  },
  {
    "text": "which has just a single endpoint and it",
    "start": "755560",
    "end": "757760"
  },
  {
    "text": "is responsible for uh serving ads to",
    "start": "757760",
    "end": "760760"
  },
  {
    "text": "users it has basically two categories of",
    "start": "760760",
    "end": "764480"
  },
  {
    "text": "requests it accepts which are both",
    "start": "764480",
    "end": "766480"
  },
  {
    "text": "served by the single endpoint one uh is",
    "start": "766480",
    "end": "769279"
  },
  {
    "text": "to just serve random advertisements to",
    "start": "769279",
    "end": "771360"
  },
  {
    "text": "users and the other one is for targeted",
    "start": "771360",
    "end": "773839"
  },
  {
    "text": "advertisements so this request then has",
    "start": "773839",
    "end": "776279"
  },
  {
    "text": "a parameter uh with the category of the",
    "start": "776279",
    "end": "779839"
  },
  {
    "text": "of the advertisement to serve and yeah",
    "start": "779839",
    "end": "782480"
  },
  {
    "text": "then serves advertisements of the",
    "start": "782480",
    "end": "784480"
  },
  {
    "text": "corresponding category and those will",
    "start": "784480",
    "end": "787760"
  },
  {
    "text": "have like the same uh entry span name in",
    "start": "787760",
    "end": "790320"
  },
  {
    "text": "the trace that's why they are",
    "start": "790320",
    "end": "792360"
  },
  {
    "text": "distinguishable while open Telemetry",
    "start": "792360",
    "end": "794399"
  },
  {
    "text": "span attributes recorded via explicit",
    "start": "794399",
    "end": "797320"
  },
  {
    "text": "instrumentation so this means that for",
    "start": "797320",
    "end": "799360"
  },
  {
    "text": "example for targeted advertisements we",
    "start": "799360",
    "end": "801800"
  },
  {
    "text": "get to see um the yeah the category used",
    "start": "801800",
    "end": "805760"
  },
  {
    "text": "for the request and the open Telemetry",
    "start": "805760",
    "end": "808639"
  },
  {
    "text": "demo also has some neat features which",
    "start": "808639",
    "end": "811440"
  },
  {
    "text": "are useful if you want to show CPU",
    "start": "811440",
    "end": "813360"
  },
  {
    "text": "profiling it's best if you also have a",
    "start": "813360",
    "end": "815680"
  },
  {
    "text": "CPU bottleneck in there so uh the demo",
    "start": "815680",
    "end": "818839"
  },
  {
    "text": "already has a buil-in uh CP background",
    "start": "818839",
    "end": "821560"
  },
  {
    "text": "CPU usage problem which we look at but",
    "start": "821560",
    "end": "824760"
  },
  {
    "text": "uh We've spiced things up a little more",
    "start": "824760",
    "end": "828040"
  },
  {
    "text": "and added some more problems one of them",
    "start": "828040",
    "end": "830240"
  },
  {
    "text": "being uh in addition performing memory",
    "start": "830240",
    "end": "833240"
  },
  {
    "text": "allocations in the background so that we",
    "start": "833240",
    "end": "835800"
  },
  {
    "text": "uh induce uh pressure on the garbage",
    "start": "835800",
    "end": "838120"
  },
  {
    "text": "collector and uh We've also added some",
    "start": "838120",
    "end": "841519"
  },
  {
    "text": "code PA dependent CPU bottlenecks to uh",
    "start": "841519",
    "end": "844519"
  },
  {
    "text": "to Showcase yeah the trace based",
    "start": "844519",
    "end": "847639"
  },
  {
    "text": "profiling",
    "start": "847639",
    "end": "849560"
  },
  {
    "text": "correlation so let's jump into it let's",
    "start": "849560",
    "end": "852079"
  },
  {
    "text": "hope that this",
    "start": "852079",
    "end": "853839"
  },
  {
    "text": "works so let's jump directly into the",
    "start": "853839",
    "end": "858160"
  },
  {
    "text": "profiling data and one of the best ways",
    "start": "858160",
    "end": "862519"
  },
  {
    "text": "to view profiling data is using a flame",
    "start": "862519",
    "end": "865519"
  },
  {
    "text": "graph we can see here one um for those",
    "start": "865519",
    "end": "868000"
  },
  {
    "text": "of you who haven't been earlier talks",
    "start": "868000",
    "end": "869800"
  },
  {
    "text": "where this ex was explained I will",
    "start": "869800",
    "end": "872600"
  },
  {
    "text": "quickly go through uh what what this",
    "start": "872600",
    "end": "874519"
  },
  {
    "text": "actually shows so um the profiler",
    "start": "874519",
    "end": "877519"
  },
  {
    "text": "periodically fetches stack traces from",
    "start": "877519",
    "end": "880040"
  },
  {
    "text": "your CPUs because that is where your",
    "start": "880040",
    "end": "882399"
  },
  {
    "text": "application spends its time you know",
    "start": "882399",
    "end": "884519"
  },
  {
    "text": "take those St traces and here basically",
    "start": "884519",
    "end": "887560"
  },
  {
    "text": "order them by the stack traces St traces",
    "start": "887560",
    "end": "891600"
  },
  {
    "text": "you see uh most often on the left side",
    "start": "891600",
    "end": "894360"
  },
  {
    "text": "to the least often on the right side so",
    "start": "894360",
    "end": "897160"
  },
  {
    "text": "uh this means that if you FOC focus on",
    "start": "897160",
    "end": "899399"
  },
  {
    "text": "the left and especially on the wider",
    "start": "899399",
    "end": "901560"
  },
  {
    "text": "bars then you will get to know where",
    "start": "901560",
    "end": "904360"
  },
  {
    "text": "like most of the CPU time is spent so in",
    "start": "904360",
    "end": "907880"
  },
  {
    "text": "this case here we see the flame graph",
    "start": "907880",
    "end": "910399"
  },
  {
    "text": "for the entire demo cluster which is",
    "start": "910399",
    "end": "912680"
  },
  {
    "text": "like 15 or 20 micros servic I don't know",
    "start": "912680",
    "end": "916279"
  },
  {
    "text": "and we can already spot like half of it",
    "start": "916279",
    "end": "918759"
  },
  {
    "text": "uh being due to a Java service you might",
    "start": "918759",
    "end": "921120"
  },
  {
    "text": "have a guess which one that is so like",
    "start": "921120",
    "end": "923399"
  },
  {
    "text": "half half the CPU usage of our cluster",
    "start": "923399",
    "end": "925920"
  },
  {
    "text": "is due to this service and the the",
    "start": "925920",
    "end": "929040"
  },
  {
    "text": "colors in the of the bar by the way",
    "start": "929040",
    "end": "931519"
  },
  {
    "text": "represent the technology or the language",
    "start": "931519",
    "end": "933880"
  },
  {
    "text": "it is recorded in so for example here on",
    "start": "933880",
    "end": "936639"
  },
  {
    "text": "the right we can see a a python service",
    "start": "936639",
    "end": "939279"
  },
  {
    "text": "in yellow and yeah we we see that for",
    "start": "939279",
    "end": "942519"
  },
  {
    "text": "example in this base event uh base event",
    "start": "942519",
    "end": "945440"
  },
  {
    "text": "Loop Run Forever uh P python function it",
    "start": "945440",
    "end": "949560"
  },
  {
    "text": "spends uh one it costs 1.2% of the",
    "start": "949560",
    "end": "953759"
  },
  {
    "text": "overall CPU usage of our entire cluster",
    "start": "953759",
    "end": "957480"
  },
  {
    "text": "so so far for the continuous profiling",
    "start": "957480",
    "end": "961040"
  },
  {
    "text": "let's now actually use our correlation",
    "start": "961040",
    "end": "963680"
  },
  {
    "text": "because what we can do now is not filter",
    "start": "963680",
    "end": "965880"
  },
  {
    "text": "on the container name but on the open",
    "start": "965880",
    "end": "967519"
  },
  {
    "text": "Telemetry service name and what we see",
    "start": "967519",
    "end": "970240"
  },
  {
    "text": "here now is basically the part of the",
    "start": "970240",
    "end": "972920"
  },
  {
    "text": "flame graph just by uh which is just uh",
    "start": "972920",
    "end": "977560"
  },
  {
    "text": "yeah the CPU usage our advertisement",
    "start": "977560",
    "end": "980519"
  },
  {
    "text": "service is responsible",
    "start": "980519",
    "end": "983040"
  },
  {
    "text": "for so we can then already see the first",
    "start": "983040",
    "end": "987120"
  },
  {
    "text": "CPU bottleneck based on the on the",
    "start": "987120",
    "end": "989399"
  },
  {
    "text": "method names we zoom in a little and",
    "start": "989399",
    "end": "992600"
  },
  {
    "text": "yeah there is a function called Problem",
    "start": "992600",
    "end": "994880"
  },
  {
    "text": "pattern uh CPU load logarithm iser run",
    "start": "994880",
    "end": "999000"
  },
  {
    "text": "and what this does what we can see a",
    "start": "999000",
    "end": "1001319"
  },
  {
    "text": "little in in its child calls is it in a",
    "start": "1001319",
    "end": "1004519"
  },
  {
    "text": "hot Loop periodically fetches the",
    "start": "1004519",
    "end": "1006319"
  },
  {
    "text": "current time which you can see even down",
    "start": "1006319",
    "end": "1008560"
  },
  {
    "text": "to the um to the to the system calls",
    "start": "1008560",
    "end": "1012360"
  },
  {
    "text": "here and then computes the logarithm of",
    "start": "1012360",
    "end": "1014959"
  },
  {
    "text": "that the logarithm doesn't show up it it",
    "start": "1014959",
    "end": "1017399"
  },
  {
    "text": "shows up as this jvm hotspot St routines",
    "start": "1017399",
    "end": "1020199"
  },
  {
    "text": "because there are some uh jvm intrinsics",
    "start": "1020199",
    "end": "1023120"
  },
  {
    "text": "were",
    "start": "1023120",
    "end": "1024000"
  },
  {
    "text": "used and further on the right we can see",
    "start": "1024000",
    "end": "1026640"
  },
  {
    "text": "our back second background uh problem",
    "start": "1026640",
    "end": "1029720"
  },
  {
    "text": "which is the background memory",
    "start": "1029720",
    "end": "1031319"
  },
  {
    "text": "allocation but the interesting part of",
    "start": "1031319",
    "end": "1033558"
  },
  {
    "text": "this is actually the CPU usage it",
    "start": "1033559",
    "end": "1037079"
  },
  {
    "text": "introduces because further on the right",
    "start": "1037079",
    "end": "1039199"
  },
  {
    "text": "we can see there are some uh some stack",
    "start": "1039199",
    "end": "1042160"
  },
  {
    "text": "traces which have no green on them which",
    "start": "1042160",
    "end": "1044640"
  },
  {
    "text": "means there is no Java code running",
    "start": "1044640",
    "end": "1046558"
  },
  {
    "text": "there but it costs a CPU a Java service",
    "start": "1046559",
    "end": "1050200"
  },
  {
    "text": "so if we zoom in there based on the",
    "start": "1050200",
    "end": "1053320"
  },
  {
    "text": "method names we can now guess what it is",
    "start": "1053320",
    "end": "1055679"
  },
  {
    "text": "this is the garbage collector doing its",
    "start": "1055679",
    "end": "1057640"
  },
  {
    "text": "Duty so we can even then see like based",
    "start": "1057640",
    "end": "1060600"
  },
  {
    "text": "on our allocation load where does the",
    "start": "1060600",
    "end": "1062559"
  },
  {
    "text": "garbage collector spend its time not",
    "start": "1062559",
    "end": "1064679"
  },
  {
    "text": "even uh not just that it spends",
    "start": "1064679",
    "end": "1068559"
  },
  {
    "text": "time",
    "start": "1068559",
    "end": "1070160"
  },
  {
    "text": "so let's go",
    "start": "1070160",
    "end": "1072960"
  },
  {
    "text": "deeper and jump to our Trace level",
    "start": "1072960",
    "end": "1077320"
  },
  {
    "text": "profiling correlation we'll navigate to",
    "start": "1077320",
    "end": "1080039"
  },
  {
    "text": "our advertisement service and look at it",
    "start": "1080039",
    "end": "1083679"
  },
  {
    "text": "the traces for its single end point",
    "start": "1083679",
    "end": "1085480"
  },
  {
    "text": "which is the grpc get ads",
    "start": "1085480",
    "end": "1088240"
  },
  {
    "text": "call and we can scroll down and view the",
    "start": "1088240",
    "end": "1091360"
  },
  {
    "text": "waterfall which isn't that interesting",
    "start": "1091360",
    "end": "1093600"
  },
  {
    "text": "for this service but we can see there is",
    "start": "1093600",
    "end": "1095480"
  },
  {
    "text": "like a a dark Gap in there where we",
    "start": "1095480",
    "end": "1098000"
  },
  {
    "text": "don't know where the time is being spent",
    "start": "1098000",
    "end": "1100600"
  },
  {
    "text": "and apparently there is no outbound call",
    "start": "1100600",
    "end": "1103559"
  },
  {
    "text": "or something so yeah might be good to",
    "start": "1103559",
    "end": "1106440"
  },
  {
    "text": "look at the CPU profiling data there so",
    "start": "1106440",
    "end": "1109559"
  },
  {
    "text": "what we can do now is again navigate to",
    "start": "1109559",
    "end": "1112559"
  },
  {
    "text": "the corresponding flame",
    "start": "1112559",
    "end": "1114880"
  },
  {
    "text": "graph and this is now the flame graph of",
    "start": "1114880",
    "end": "1118400"
  },
  {
    "text": "CPU time spand for processing just for",
    "start": "1118400",
    "end": "1121880"
  },
  {
    "text": "this endpoint so now it doesn't contain",
    "start": "1121880",
    "end": "1124440"
  },
  {
    "text": "our um our background CPU problems",
    "start": "1124440",
    "end": "1127600"
  },
  {
    "text": "anymore but just the time spent for",
    "start": "1127600",
    "end": "1130240"
  },
  {
    "text": "answering these requests if we scroll",
    "start": "1130240",
    "end": "1132480"
  },
  {
    "text": "down we see some GPC St traces and then",
    "start": "1132480",
    "end": "1135679"
  },
  {
    "text": "can spot here two main hot spots",
    "start": "1135679",
    "end": "1139400"
  },
  {
    "text": "where both around where where the CPU",
    "start": "1139400",
    "end": "1142480"
  },
  {
    "text": "time is distributed across both around",
    "start": "1142480",
    "end": "1145200"
  },
  {
    "text": "equally so on the left we have some have",
    "start": "1145200",
    "end": "1148240"
  },
  {
    "text": "a function called",
    "start": "1148240",
    "end": "1150360"
  },
  {
    "text": "Shenanigans and based on what it what it",
    "start": "1150360",
    "end": "1153360"
  },
  {
    "text": "calls we can see that it calls a message",
    "start": "1153360",
    "end": "1156039"
  },
  {
    "text": "digest update which is in Java a",
    "start": "1156039",
    "end": "1159000"
  },
  {
    "text": "function to compute uh to compute a shes",
    "start": "1159000",
    "end": "1162480"
  },
  {
    "text": "in this",
    "start": "1162480",
    "end": "1164000"
  },
  {
    "text": "case and on the right we can see that it",
    "start": "1164000",
    "end": "1167080"
  },
  {
    "text": "also spends a sign ific time in random",
    "start": "1167080",
    "end": "1169960"
  },
  {
    "text": "neck spites which is actually",
    "start": "1169960",
    "end": "1171679"
  },
  {
    "text": "interesting so this CPU bottleneck",
    "start": "1171679",
    "end": "1174400"
  },
  {
    "text": "spends almost the same time in uh for",
    "start": "1174400",
    "end": "1177679"
  },
  {
    "text": "computing random data like hashing it so",
    "start": "1177679",
    "end": "1182640"
  },
  {
    "text": "yeah and further on the right we can",
    "start": "1182640",
    "end": "1186320"
  },
  {
    "text": "spot the second CPU problem which based",
    "start": "1186320",
    "end": "1189520"
  },
  {
    "text": "on the name seems to be a recursive FIB",
    "start": "1189520",
    "end": "1192280"
  },
  {
    "text": "Fibonacci number computation which isn't",
    "start": "1192280",
    "end": "1195240"
  },
  {
    "text": "the most effective way to do this",
    "start": "1195240",
    "end": "1199760"
  },
  {
    "text": "so if we now um look at the latencies",
    "start": "1199760",
    "end": "1203039"
  },
  {
    "text": "for our endpoint we can see that the",
    "start": "1203039",
    "end": "1206280"
  },
  {
    "text": "distribution isn't like uh standard",
    "start": "1206280",
    "end": "1208559"
  },
  {
    "text": "distribution there are some requests",
    "start": "1208559",
    "end": "1211240"
  },
  {
    "text": "taking around half a second and uh other",
    "start": "1211240",
    "end": "1214600"
  },
  {
    "text": "requests all other requests are below",
    "start": "1214600",
    "end": "1217400"
  },
  {
    "text": "100 milliseconds so we can now try to",
    "start": "1217400",
    "end": "1220080"
  },
  {
    "text": "find some correlations in our span",
    "start": "1220080",
    "end": "1222799"
  },
  {
    "text": "attributes to see if we somehow get a",
    "start": "1222799",
    "end": "1226600"
  },
  {
    "text": "correlation for where this higher",
    "start": "1226600",
    "end": "1228200"
  },
  {
    "text": "latency comes from and in this case we",
    "start": "1228200",
    "end": "1230280"
  },
  {
    "text": "are lucky because I pre-recorded the",
    "start": "1230280",
    "end": "1232240"
  },
  {
    "text": "demo um so we can see that the the the",
    "start": "1232240",
    "end": "1236280"
  },
  {
    "text": "the context key span attribute with the",
    "start": "1236280",
    "end": "1238440"
  },
  {
    "text": "value binoculars seems to be very highly",
    "start": "1238440",
    "end": "1241120"
  },
  {
    "text": "correlated to the higher latency of that",
    "start": "1241120",
    "end": "1244520"
  },
  {
    "text": "endpoint so um yeah this me this this",
    "start": "1244520",
    "end": "1248640"
  },
  {
    "text": "span attribute is used for the targeted",
    "start": "1248640",
    "end": "1251799"
  },
  {
    "text": "advertisements to define the category um",
    "start": "1251799",
    "end": "1255520"
  },
  {
    "text": "for yeah for which the advertisement is",
    "start": "1255520",
    "end": "1258600"
  },
  {
    "text": "to be",
    "start": "1258600",
    "end": "1260000"
  },
  {
    "text": "served so what we can do based on that",
    "start": "1260000",
    "end": "1262840"
  },
  {
    "text": "now is filter our profiling data based",
    "start": "1262840",
    "end": "1266559"
  },
  {
    "text": "on the span attributes so we then get a",
    "start": "1266559",
    "end": "1269159"
  },
  {
    "text": "flame graph so we have we've added a",
    "start": "1269159",
    "end": "1271039"
  },
  {
    "text": "filter and now our flame graph will only",
    "start": "1271039",
    "end": "1274320"
  },
  {
    "text": "uh show requests which are targeted",
    "start": "1274320",
    "end": "1277240"
  },
  {
    "text": "advertisements for the category",
    "start": "1277240",
    "end": "1279159"
  },
  {
    "text": "binoculars so if we scroll through it",
    "start": "1279159",
    "end": "1281440"
  },
  {
    "text": "again we see just the basic GPC stuff",
    "start": "1281440",
    "end": "1287000"
  },
  {
    "text": "again and now the hotspots look slightly",
    "start": "1287000",
    "end": "1290200"
  },
  {
    "text": "different so the hotspots are still the",
    "start": "1290200",
    "end": "1292279"
  },
  {
    "text": "same but now it spends a much bigger",
    "start": "1292279",
    "end": "1295240"
  },
  {
    "text": "share of its time Computing the",
    "start": "1295240",
    "end": "1297600"
  },
  {
    "text": "Fibonacci",
    "start": "1297600",
    "end": "1299480"
  },
  {
    "text": "numbers and yeah the the the hashing is",
    "start": "1299480",
    "end": "1303000"
  },
  {
    "text": "now only around 10% so there seems to be",
    "start": "1303000",
    "end": "1305960"
  },
  {
    "text": "a difference here and something else we",
    "start": "1305960",
    "end": "1309840"
  },
  {
    "text": "can do now is look at the inverse set so",
    "start": "1309840",
    "end": "1312559"
  },
  {
    "text": "we can now afterwards uh look at all",
    "start": "1312559",
    "end": "1316840"
  },
  {
    "text": "requests which are not targeted",
    "start": "1316840",
    "end": "1319640"
  },
  {
    "text": "advertisements for",
    "start": "1319640",
    "end": "1322559"
  },
  {
    "text": "binoculars and then if you look at the",
    "start": "1326320",
    "end": "1328679"
  },
  {
    "text": "flame graph again just our",
    "start": "1328679",
    "end": "1332159"
  },
  {
    "text": "grpc stack",
    "start": "1332159",
    "end": "1334760"
  },
  {
    "text": "frames and if we look at the hotspots",
    "start": "1334760",
    "end": "1337559"
  },
  {
    "text": "now we can see that actually the",
    "start": "1337559",
    "end": "1340520"
  },
  {
    "text": "Fibonacci computation doesn't appear",
    "start": "1340520",
    "end": "1342960"
  },
  {
    "text": "here anymore so it looks like the",
    "start": "1342960",
    "end": "1345760"
  },
  {
    "text": "Fibonacci computation does only happen",
    "start": "1345760",
    "end": "1347840"
  },
  {
    "text": "for Target targeted advertisements for",
    "start": "1347840",
    "end": "1350279"
  },
  {
    "text": "binoculars don't know why that is",
    "start": "1350279",
    "end": "1352200"
  },
  {
    "text": "required but seems to be the case here",
    "start": "1352200",
    "end": "1355240"
  },
  {
    "text": "so so far for the demo and also for the",
    "start": "1355240",
    "end": "1358640"
  },
  {
    "text": "presentation first of all thanks for",
    "start": "1358640",
    "end": "1360440"
  },
  {
    "text": "being here I hope you enjoyed it and if",
    "start": "1360440",
    "end": "1363320"
  },
  {
    "text": "you have any questions because we are",
    "start": "1363320",
    "end": "1365400"
  },
  {
    "text": "short on time and uh you can e reach out",
    "start": "1365400",
    "end": "1368840"
  },
  {
    "text": "to Christos or me and yeah we are also",
    "start": "1368840",
    "end": "1371720"
  },
  {
    "text": "available on the cncs SL we've got",
    "start": "1371720",
    "end": "1374279"
  },
  {
    "text": "plenty of time for",
    "start": "1374279",
    "end": "1375799"
  },
  {
    "text": "questions you're just holding it back",
    "start": "1375799",
    "end": "1377640"
  },
  {
    "text": "from lunch",
    "start": "1377640",
    "end": "1379919"
  },
  {
    "text": "here I'm uh I'm curious you mentioned",
    "start": "1379919",
    "end": "1382960"
  },
  {
    "text": "you collect tread local information and",
    "start": "1382960",
    "end": "1386120"
  },
  {
    "text": "then you collect the stack Trace how do",
    "start": "1386120",
    "end": "1387799"
  },
  {
    "text": "you make sure this is like Atomic",
    "start": "1387799",
    "end": "1390400"
  },
  {
    "text": "operation and you get both for the right",
    "start": "1390400",
    "end": "1393400"
  },
  {
    "text": "um so when the when the profiler",
    "start": "1393400",
    "end": "1396400"
  },
  {
    "text": "collects its stack trace it basically",
    "start": "1396400",
    "end": "1398799"
  },
  {
    "text": "interrupts the application threet and",
    "start": "1398799",
    "end": "1400600"
  },
  {
    "text": "runs on that threet so you are",
    "start": "1400600",
    "end": "1402360"
  },
  {
    "text": "guaranteed that no one else is modifying",
    "start": "1402360",
    "end": "1404880"
  },
  {
    "text": "that threet local at that time because",
    "start": "1404880",
    "end": "1406760"
  },
  {
    "text": "you are the one who could modify it",
    "start": "1406760",
    "end": "1408960"
  },
  {
    "text": "that's why it's",
    "start": "1408960",
    "end": "1410600"
  },
  {
    "text": "Atomic we've also added some like memory",
    "start": "1410600",
    "end": "1414039"
  },
  {
    "text": "barriers in case the profiler happens to",
    "start": "1414039",
    "end": "1416840"
  },
  {
    "text": "interrupt uh the process exactly at a",
    "start": "1416840",
    "end": "1419640"
  },
  {
    "text": "time that it is trying to update the",
    "start": "1419640",
    "end": "1421240"
  },
  {
    "text": "Fred local storage so that is also",
    "start": "1421240",
    "end": "1425320"
  },
  {
    "text": "detected any other",
    "start": "1425320",
    "end": "1428039"
  },
  {
    "text": "questions hold on one second and I'll be",
    "start": "1428039",
    "end": "1430039"
  },
  {
    "text": "right",
    "start": "1430039",
    "end": "1432200"
  },
  {
    "text": "there sort of a follow-up question to",
    "start": "1434679",
    "end": "1437159"
  },
  {
    "text": "what um um what sort of a overhead does",
    "start": "1437159",
    "end": "1440559"
  },
  {
    "text": "it impose when this kind of",
    "start": "1440559",
    "end": "1442960"
  },
  {
    "text": "instrumentation happens you mean for",
    "start": "1442960",
    "end": "1445320"
  },
  {
    "text": "syncing from java the uh Trace context",
    "start": "1445320",
    "end": "1448440"
  },
  {
    "text": "to uh to the native red local storage",
    "start": "1448440",
    "end": "1451279"
  },
  {
    "text": "yes and then the you also mentioned that",
    "start": "1451279",
    "end": "1453159"
  },
  {
    "text": "you actually um um you explained that",
    "start": "1453159",
    "end": "1456520"
  },
  {
    "text": "you just to make sure it's Atomic you",
    "start": "1456520",
    "end": "1458480"
  },
  {
    "text": "have to sort of you know uh lock into",
    "start": "1458480",
    "end": "1461480"
  },
  {
    "text": "that threat that's what I want to do",
    "start": "1461480",
    "end": "1463200"
  },
  {
    "text": "yeah um yeah it's like a a memory",
    "start": "1463200",
    "end": "1465600"
  },
  {
    "text": "barrier so it's it it's not an atomic",
    "start": "1465600",
    "end": "1469080"
  },
  {
    "text": "just a memory barrier",
    "start": "1469080",
    "end": "1470720"
  },
  {
    "text": "ensuring actually it's not the memory",
    "start": "1470720",
    "end": "1473320"
  },
  {
    "text": "barrier isn't even required it's just we",
    "start": "1473320",
    "end": "1475039"
  },
  {
    "text": "Ed the volatile right in Java you",
    "start": "1475039",
    "end": "1477279"
  },
  {
    "text": "because you run on the same threet",
    "start": "1477279",
    "end": "1478720"
  },
  {
    "text": "that's why you're basically guaranteed",
    "start": "1478720",
    "end": "1481200"
  },
  {
    "text": "to uh that it works and you don't have a",
    "start": "1481200",
    "end": "1483880"
  },
  {
    "text": "reorder that's why we added the volatile",
    "start": "1483880",
    "end": "1486279"
  },
  {
    "text": "and for the overhead of writing Java has",
    "start": "1486279",
    "end": "1488960"
  },
  {
    "text": "always the problem that when you try to",
    "start": "1488960",
    "end": "1490919"
  },
  {
    "text": "do something native you have to go to",
    "start": "1490919",
    "end": "1492520"
  },
  {
    "text": "Java native interface which is slow and",
    "start": "1492520",
    "end": "1494919"
  },
  {
    "text": "what we've done instead is rep uh the",
    "start": "1494919",
    "end": "1497679"
  },
  {
    "text": "native threed loc the native Fred local",
    "start": "1497679",
    "end": "1500080"
  },
  {
    "text": "storage in a bite buffer so a Java",
    "start": "1500080",
    "end": "1502159"
  },
  {
    "text": "construct and that gets optimized by the",
    "start": "1502159",
    "end": "1504440"
  },
  {
    "text": "jvm that it's just the memory right so",
    "start": "1504440",
    "end": "1507320"
  },
  {
    "text": "yeah the overhead is basically just",
    "start": "1507320",
    "end": "1509200"
  },
  {
    "text": "serializing the trace to to uh to rather",
    "start": "1509200",
    "end": "1514159"
  },
  {
    "text": "de serializing the hex and having it as",
    "start": "1514159",
    "end": "1516279"
  },
  {
    "text": "a binary and writing that to to memory",
    "start": "1516279",
    "end": "1519120"
  },
  {
    "text": "so it is in the low nanc area we've",
    "start": "1519120",
    "end": "1522520"
  },
  {
    "text": "we've benchmarked that okay",
    "start": "1522520",
    "end": "1526840"
  }
]