[
  {
    "text": "hello and welcome to the introduction to",
    "start": "3040",
    "end": "4960"
  },
  {
    "text": "fluvia webinar i'm grant swanson your",
    "start": "4960",
    "end": "7520"
  },
  {
    "text": "host for today's session",
    "start": "7520",
    "end": "9440"
  },
  {
    "text": "and later i'll be joined by nick cardin",
    "start": "9440",
    "end": "12000"
  },
  {
    "text": "principal software engineer here at",
    "start": "12000",
    "end": "13599"
  },
  {
    "text": "infineon",
    "start": "13599",
    "end": "15280"
  },
  {
    "text": "we will start with a few introduction to",
    "start": "15280",
    "end": "17279"
  },
  {
    "text": "infineon slides then go into a live demo",
    "start": "17279",
    "end": "20720"
  },
  {
    "text": "and then finish up with q a",
    "start": "20720",
    "end": "23439"
  },
  {
    "text": "please enter any questions in the chat",
    "start": "23439",
    "end": "25199"
  },
  {
    "text": "window",
    "start": "25199",
    "end": "26320"
  },
  {
    "text": "we also have new content in the handout",
    "start": "26320",
    "end": "28720"
  },
  {
    "text": "section available for consumption",
    "start": "28720",
    "end": "32640"
  },
  {
    "text": "this slide shows infineon at a glance",
    "start": "36559",
    "end": "39760"
  },
  {
    "text": "our founders who built nginx's open",
    "start": "39760",
    "end": "42000"
  },
  {
    "text": "source service mesh",
    "start": "42000",
    "end": "43680"
  },
  {
    "text": "started the company in 2019",
    "start": "43680",
    "end": "46800"
  },
  {
    "text": "as companies progress on their journey",
    "start": "46800",
    "end": "49039"
  },
  {
    "text": "in digital transformation",
    "start": "49039",
    "end": "51120"
  },
  {
    "text": "we believe that we're perfectly fit to",
    "start": "51120",
    "end": "53680"
  },
  {
    "text": "drive the next stage of transformation",
    "start": "53680",
    "end": "56320"
  },
  {
    "text": "which is the use of real-time continuous",
    "start": "56320",
    "end": "58879"
  },
  {
    "text": "intelligence",
    "start": "58879",
    "end": "60160"
  },
  {
    "text": "to increase business impact",
    "start": "60160",
    "end": "62719"
  },
  {
    "text": "our engineering team has written over a",
    "start": "62719",
    "end": "64559"
  },
  {
    "text": "hundred thousand lines of code",
    "start": "64559",
    "end": "66799"
  },
  {
    "text": "and have built an enterprise-grade",
    "start": "66799",
    "end": "68400"
  },
  {
    "text": "platform from the ground up",
    "start": "68400",
    "end": "70560"
  },
  {
    "text": "that provides horizontal scale and",
    "start": "70560",
    "end": "72560"
  },
  {
    "text": "self-healing",
    "start": "72560",
    "end": "75040"
  },
  {
    "text": "nvidia's mission is to accelerate the",
    "start": "75040",
    "end": "77200"
  },
  {
    "text": "world's transition to the real-time",
    "start": "77200",
    "end": "79360"
  },
  {
    "text": "economy",
    "start": "79360",
    "end": "81840"
  },
  {
    "text": "fluvio is an open source programmable",
    "start": "85680",
    "end": "88320"
  },
  {
    "text": "platform for data in motion that's built",
    "start": "88320",
    "end": "91280"
  },
  {
    "text": "on rust",
    "start": "91280",
    "end": "93200"
  },
  {
    "text": "the platform features smart modules with",
    "start": "93200",
    "end": "96159"
  },
  {
    "text": "programmable stream processing",
    "start": "96159",
    "end": "98720"
  },
  {
    "text": "to clean transform",
    "start": "98720",
    "end": "101360"
  },
  {
    "text": "correlate and drive insights from data",
    "start": "101360",
    "end": "104240"
  },
  {
    "text": "in real time",
    "start": "104240",
    "end": "106799"
  },
  {
    "text": "it also features data streams that",
    "start": "106799",
    "end": "109119"
  },
  {
    "text": "utilize distributed processing",
    "start": "109119",
    "end": "111759"
  },
  {
    "text": "with redundancy and failover to prevent",
    "start": "111759",
    "end": "114399"
  },
  {
    "text": "data loss and minimize downtime",
    "start": "114399",
    "end": "118560"
  },
  {
    "text": "the platform also includes a mutable",
    "start": "118560",
    "end": "120640"
  },
  {
    "text": "store",
    "start": "120640",
    "end": "121600"
  },
  {
    "text": "with a long-lived immutable storage",
    "start": "121600",
    "end": "123439"
  },
  {
    "text": "layer",
    "start": "123439",
    "end": "124640"
  },
  {
    "text": "that persists data without compromising",
    "start": "124640",
    "end": "127040"
  },
  {
    "text": "legacy latency excuse me",
    "start": "127040",
    "end": "130959"
  },
  {
    "text": "bluvio has clients and connectors",
    "start": "130959",
    "end": "133920"
  },
  {
    "text": "that include native api support to the",
    "start": "133920",
    "end": "136319"
  },
  {
    "text": "most popular programming languages and a",
    "start": "136319",
    "end": "138800"
  },
  {
    "text": "connector catalog",
    "start": "138800",
    "end": "141520"
  },
  {
    "text": "the platform allows architects data",
    "start": "141520",
    "end": "143680"
  },
  {
    "text": "engineers and developers to build",
    "start": "143680",
    "end": "145520"
  },
  {
    "text": "intelligent pipelines quickly for a",
    "start": "145520",
    "end": "147440"
  },
  {
    "text": "broad set of use cases",
    "start": "147440",
    "end": "150879"
  },
  {
    "text": "pluvio is modern as it's written in rust",
    "start": "151200",
    "end": "154080"
  },
  {
    "text": "which means it's extremely fast and safe",
    "start": "154080",
    "end": "157599"
  },
  {
    "text": "and we'll go into some of those metrics",
    "start": "157599",
    "end": "159360"
  },
  {
    "text": "later",
    "start": "159360",
    "end": "160560"
  },
  {
    "text": "and is cloud native with kubernetes",
    "start": "160560",
    "end": "162400"
  },
  {
    "text": "integration",
    "start": "162400",
    "end": "164239"
  },
  {
    "text": "fluvio is powerful with programmable",
    "start": "164239",
    "end": "166319"
  },
  {
    "text": "smart modules",
    "start": "166319",
    "end": "167840"
  },
  {
    "text": "event correlation and hierarchical",
    "start": "167840",
    "end": "169760"
  },
  {
    "text": "pipelines",
    "start": "169760",
    "end": "172000"
  },
  {
    "text": "fluvio is also easy to use with the",
    "start": "172000",
    "end": "174160"
  },
  {
    "text": "ability to provision end-to-end",
    "start": "174160",
    "end": "176160"
  },
  {
    "text": "pipelines quickly",
    "start": "176160",
    "end": "179440"
  },
  {
    "text": "this is a comparison between java and",
    "start": "182400",
    "end": "185200"
  },
  {
    "text": "rust",
    "start": "185200",
    "end": "186640"
  },
  {
    "text": "java is a popular programming language",
    "start": "186640",
    "end": "188800"
  },
  {
    "text": "used by developers",
    "start": "188800",
    "end": "191040"
  },
  {
    "text": "and is",
    "start": "191040",
    "end": "192560"
  },
  {
    "text": "what most of the data streaming products",
    "start": "192560",
    "end": "195200"
  },
  {
    "text": "are built on",
    "start": "195200",
    "end": "197280"
  },
  {
    "text": "however rust has many advantages when it",
    "start": "197280",
    "end": "199840"
  },
  {
    "text": "comes to performance and security",
    "start": "199840",
    "end": "202800"
  },
  {
    "text": "with no run time or garbage collector it",
    "start": "202800",
    "end": "205599"
  },
  {
    "text": "can power performance critical services",
    "start": "205599",
    "end": "208879"
  },
  {
    "text": "run on embedded devices and easily",
    "start": "208879",
    "end": "211440"
  },
  {
    "text": "integrate with other languages",
    "start": "211440",
    "end": "214159"
  },
  {
    "text": "latency stays predictable at high",
    "start": "214159",
    "end": "216319"
  },
  {
    "text": "throughputs",
    "start": "216319",
    "end": "217440"
  },
  {
    "text": "over p99 which means that 99 of the",
    "start": "217440",
    "end": "220799"
  },
  {
    "text": "requests",
    "start": "220799",
    "end": "222080"
  },
  {
    "text": "should be faster than the given latency",
    "start": "222080",
    "end": "225599"
  },
  {
    "text": "rust is also completely memory safe",
    "start": "225599",
    "end": "228159"
  },
  {
    "text": "which separates it from java",
    "start": "228159",
    "end": "230640"
  },
  {
    "text": "with with its strong security guarantees",
    "start": "230640",
    "end": "235200"
  },
  {
    "text": "while other data streaming platforms use",
    "start": "235360",
    "end": "237360"
  },
  {
    "text": "polling to consume messages",
    "start": "237360",
    "end": "239680"
  },
  {
    "text": "fluvio use eight uses async synchronous",
    "start": "239680",
    "end": "242720"
  },
  {
    "text": "processing",
    "start": "242720",
    "end": "243920"
  },
  {
    "text": "for significantly lower latency",
    "start": "243920",
    "end": "246640"
  },
  {
    "text": "fluvio runs in pods and can collect",
    "start": "246640",
    "end": "250560"
  },
  {
    "text": "millions of events per second with just",
    "start": "250560",
    "end": "252720"
  },
  {
    "text": "a few dedicated servers",
    "start": "252720",
    "end": "255680"
  },
  {
    "text": "our technology can change servers and",
    "start": "255680",
    "end": "257840"
  },
  {
    "text": "can scale up to virtually any number of",
    "start": "257840",
    "end": "259919"
  },
  {
    "text": "concurrent connections",
    "start": "259919",
    "end": "263560"
  },
  {
    "text": "this diagram shows common components",
    "start": "269360",
    "end": "272160"
  },
  {
    "text": "which are configured with smart modules",
    "start": "272160",
    "end": "274560"
  },
  {
    "text": "performing inline computation",
    "start": "274560",
    "end": "278000"
  },
  {
    "text": "the diagram shows five places where",
    "start": "278000",
    "end": "280000"
  },
  {
    "text": "smart modules may currently be used",
    "start": "280000",
    "end": "284000"
  },
  {
    "text": "in source connectors and sync connectors",
    "start": "284000",
    "end": "287440"
  },
  {
    "text": "in programmatic producers consumers",
    "start": "287440",
    "end": "291040"
  },
  {
    "text": "and in the fluvio cli",
    "start": "291040",
    "end": "294240"
  },
  {
    "text": "smart smart modules are typically",
    "start": "294240",
    "end": "296320"
  },
  {
    "text": "applied to data before the data is sent",
    "start": "296320",
    "end": "298800"
  },
  {
    "text": "from one location to another",
    "start": "298800",
    "end": "302400"
  },
  {
    "text": "this is so that any filtering that",
    "start": "302560",
    "end": "304320"
  },
  {
    "text": "happens will resort result in less",
    "start": "304320",
    "end": "306880"
  },
  {
    "text": "network traffic and more savings",
    "start": "306880",
    "end": "309759"
  },
  {
    "text": "for example stream inputs source",
    "start": "309759",
    "end": "311840"
  },
  {
    "text": "connectors and producers will apply",
    "start": "311840",
    "end": "314160"
  },
  {
    "text": "smart modules before sending data to the",
    "start": "314160",
    "end": "316320"
  },
  {
    "text": "fluvio cluster",
    "start": "316320",
    "end": "318560"
  },
  {
    "text": "and stream outputs such as sync",
    "start": "318560",
    "end": "321039"
  },
  {
    "text": "connectors and consumers",
    "start": "321039",
    "end": "323360"
  },
  {
    "text": "or the fluvio cli will upload smart",
    "start": "323360",
    "end": "326320"
  },
  {
    "text": "modules to the fluvia cluster and",
    "start": "326320",
    "end": "328320"
  },
  {
    "text": "process data before the stream is sent",
    "start": "328320",
    "end": "330800"
  },
  {
    "text": "over the network",
    "start": "330800",
    "end": "332400"
  },
  {
    "text": "this helps to overcome data gravity by",
    "start": "332400",
    "end": "334800"
  },
  {
    "text": "moving only the minimal amount of data",
    "start": "334800",
    "end": "337280"
  },
  {
    "text": "necessary",
    "start": "337280",
    "end": "339840"
  },
  {
    "text": "we're going to take a second and give uh",
    "start": "342800",
    "end": "345440"
  },
  {
    "text": "provide sort of a reference architecture",
    "start": "345440",
    "end": "347919"
  },
  {
    "text": "for the before and after kafka versus",
    "start": "347919",
    "end": "350639"
  },
  {
    "text": "fluvio kafka is a",
    "start": "350639",
    "end": "353280"
  },
  {
    "text": "one of the most popular data streaming",
    "start": "353280",
    "end": "355199"
  },
  {
    "text": "open source platforms",
    "start": "355199",
    "end": "357120"
  },
  {
    "text": "in the world",
    "start": "357120",
    "end": "358240"
  },
  {
    "text": "um",
    "start": "358240",
    "end": "359360"
  },
  {
    "text": "and we wanted to just compare what a",
    "start": "359360",
    "end": "361120"
  },
  {
    "text": "reference architecture looks like so",
    "start": "361120",
    "end": "364560"
  },
  {
    "text": "in this kafka versus fluvio diagram you",
    "start": "364560",
    "end": "366880"
  },
  {
    "text": "will see the complexity of managing the",
    "start": "366880",
    "end": "369199"
  },
  {
    "text": "various clusters to build an end-to-end",
    "start": "369199",
    "end": "371759"
  },
  {
    "text": "pipe pipeline with kafka",
    "start": "371759",
    "end": "375440"
  },
  {
    "text": "now looking at the fluvial cluster we've",
    "start": "379280",
    "end": "381600"
  },
  {
    "text": "eliminated eliminated the need for etl",
    "start": "381600",
    "end": "385759"
  },
  {
    "text": "which is uh basically your extract",
    "start": "385759",
    "end": "388400"
  },
  {
    "text": "transform and load tools",
    "start": "388400",
    "end": "390960"
  },
  {
    "text": "as we're able to perform this function",
    "start": "390960",
    "end": "393280"
  },
  {
    "text": "in line with smart modules so no no etl",
    "start": "393280",
    "end": "396560"
  },
  {
    "text": "tools needed",
    "start": "396560",
    "end": "398479"
  },
  {
    "text": "in addition no apache zookeeper is",
    "start": "398479",
    "end": "400960"
  },
  {
    "text": "needed",
    "start": "400960",
    "end": "402080"
  },
  {
    "text": "no k stream cluster no k sql cluster",
    "start": "402080",
    "end": "406160"
  },
  {
    "text": "or flink clusters required so very very",
    "start": "406160",
    "end": "409360"
  },
  {
    "text": "simplified",
    "start": "409360",
    "end": "411039"
  },
  {
    "text": "um architecture",
    "start": "411039",
    "end": "414319"
  },
  {
    "text": "next we're going to go into a case study",
    "start": "417680",
    "end": "420160"
  },
  {
    "text": "uh for a current beta customer",
    "start": "420160",
    "end": "423280"
  },
  {
    "text": "um that's running fluvio and",
    "start": "423280",
    "end": "426880"
  },
  {
    "text": "we have a cost savings case study that",
    "start": "426880",
    "end": "429039"
  },
  {
    "text": "we produced",
    "start": "429039",
    "end": "430639"
  },
  {
    "text": "um",
    "start": "430639",
    "end": "431840"
  },
  {
    "text": "that will share after the webinar",
    "start": "431840",
    "end": "434160"
  },
  {
    "text": "um",
    "start": "434160",
    "end": "435759"
  },
  {
    "text": "so this company uh is building a",
    "start": "435759",
    "end": "438160"
  },
  {
    "text": "protocol for creating decentralized",
    "start": "438160",
    "end": "440960"
  },
  {
    "text": "applications quickly on ethereum and",
    "start": "440960",
    "end": "443440"
  },
  {
    "text": "ipfs",
    "start": "443440",
    "end": "445520"
  },
  {
    "text": "they recently received 50 million",
    "start": "445520",
    "end": "447280"
  },
  {
    "text": "dollars in funding have thousands of",
    "start": "447280",
    "end": "449520"
  },
  {
    "text": "users",
    "start": "449520",
    "end": "450400"
  },
  {
    "text": "and are gaining significant momentum in",
    "start": "450400",
    "end": "452240"
  },
  {
    "text": "the market",
    "start": "452240",
    "end": "454160"
  },
  {
    "text": "they reached out to infineon because",
    "start": "454160",
    "end": "455919"
  },
  {
    "text": "they hit a limit with their current",
    "start": "455919",
    "end": "457520"
  },
  {
    "text": "kafka architecture and had difficulty",
    "start": "457520",
    "end": "459840"
  },
  {
    "text": "scaling",
    "start": "459840",
    "end": "461440"
  },
  {
    "text": "they did a poc with fluvio with a use",
    "start": "461440",
    "end": "463840"
  },
  {
    "text": "case that required data streaming",
    "start": "463840",
    "end": "466319"
  },
  {
    "text": "and smart modules for extensive data",
    "start": "466319",
    "end": "468560"
  },
  {
    "text": "transformation",
    "start": "468560",
    "end": "470800"
  },
  {
    "text": "they've estimated the traffic volume",
    "start": "470800",
    "end": "472639"
  },
  {
    "text": "would require 22 000 partitions",
    "start": "472639",
    "end": "475599"
  },
  {
    "text": "excuse me",
    "start": "475599",
    "end": "476800"
  },
  {
    "text": "to run their network of users",
    "start": "476800",
    "end": "479599"
  },
  {
    "text": "for an average traffic volume kafka",
    "start": "479599",
    "end": "481759"
  },
  {
    "text": "needs one gigabit of ram per partition",
    "start": "481759",
    "end": "484800"
  },
  {
    "text": "with fluvio a partition requires 50",
    "start": "484800",
    "end": "487840"
  },
  {
    "text": "megabits of ram",
    "start": "487840",
    "end": "489840"
  },
  {
    "text": "by moving to fluvio they're able to",
    "start": "489840",
    "end": "491919"
  },
  {
    "text": "achieve a cost savings of over forty one",
    "start": "491919",
    "end": "494639"
  },
  {
    "text": "thousand dollars per month",
    "start": "494639",
    "end": "497919"
  },
  {
    "text": "this high level road map that we're",
    "start": "503680",
    "end": "505440"
  },
  {
    "text": "showing now",
    "start": "505440",
    "end": "507680"
  },
  {
    "text": "shows the progress and feature",
    "start": "507680",
    "end": "509759"
  },
  {
    "text": "development of fluvio",
    "start": "509759",
    "end": "512000"
  },
  {
    "text": "we launched fluvio in 2020",
    "start": "512000",
    "end": "514640"
  },
  {
    "text": "with immutable storage replication and",
    "start": "514640",
    "end": "516959"
  },
  {
    "text": "apis",
    "start": "516959",
    "end": "519360"
  },
  {
    "text": "in the early part of 2021",
    "start": "519360",
    "end": "521919"
  },
  {
    "text": "we launched smart modules that included",
    "start": "521919",
    "end": "524159"
  },
  {
    "text": "real-time in-line filtering and mapping",
    "start": "524159",
    "end": "526399"
  },
  {
    "text": "capabilities",
    "start": "526399",
    "end": "528640"
  },
  {
    "text": "this was followed by array maps and",
    "start": "528640",
    "end": "531040"
  },
  {
    "text": "aggregates",
    "start": "531040",
    "end": "532959"
  },
  {
    "text": "in 2022 we started to build out our",
    "start": "532959",
    "end": "535200"
  },
  {
    "text": "connector catalog",
    "start": "535200",
    "end": "536959"
  },
  {
    "text": "with mqtt http and postgres smart",
    "start": "536959",
    "end": "540640"
  },
  {
    "text": "connectors now available",
    "start": "540640",
    "end": "543120"
  },
  {
    "text": "we also have cassandra kafka",
    "start": "543120",
    "end": "546240"
  },
  {
    "text": "mongodb",
    "start": "546240",
    "end": "547760"
  },
  {
    "text": "redis",
    "start": "547760",
    "end": "548959"
  },
  {
    "text": "snowflake and slack connectors that are",
    "start": "548959",
    "end": "551600"
  },
  {
    "text": "in development",
    "start": "551600",
    "end": "554080"
  },
  {
    "text": "as we move into the second half of 2022",
    "start": "554080",
    "end": "556560"
  },
  {
    "text": "we will launch smart pipelines",
    "start": "556560",
    "end": "559279"
  },
  {
    "text": "with derived streams",
    "start": "559279",
    "end": "563000"
  },
  {
    "text": "now i'm going to pass the controls over",
    "start": "564240",
    "end": "566240"
  },
  {
    "text": "to nick cardin",
    "start": "566240",
    "end": "568160"
  },
  {
    "text": "our principal software engineer",
    "start": "568160",
    "end": "570720"
  },
  {
    "text": "here at infineon to show a live demo",
    "start": "570720",
    "end": "573440"
  },
  {
    "text": "of fluvio",
    "start": "573440",
    "end": "576680"
  },
  {
    "text": "give me just one second nick",
    "start": "580560",
    "end": "583279"
  },
  {
    "text": "all right",
    "start": "583279",
    "end": "584320"
  },
  {
    "text": "there we go",
    "start": "584320",
    "end": "587640"
  },
  {
    "text": "okay and you can see my screen",
    "start": "590720",
    "end": "593440"
  },
  {
    "text": "yes we can",
    "start": "593440",
    "end": "594880"
  },
  {
    "text": "okay thanks all right um",
    "start": "594880",
    "end": "597360"
  },
  {
    "text": "good morning um so today i'm going to",
    "start": "597360",
    "end": "600000"
  },
  {
    "text": "demonstrate creating a",
    "start": "600000",
    "end": "602079"
  },
  {
    "text": "flovio smart module for removing",
    "start": "602079",
    "end": "604160"
  },
  {
    "text": "sensitive information from a data stream",
    "start": "604160",
    "end": "606800"
  },
  {
    "text": "and uh to clarify a smart module is a",
    "start": "606800",
    "end": "609600"
  },
  {
    "text": "piece of logic that's compiled into web",
    "start": "609600",
    "end": "611519"
  },
  {
    "text": "assembly and is able to be hooked into",
    "start": "611519",
    "end": "613760"
  },
  {
    "text": "various parts of flovio to customize",
    "start": "613760",
    "end": "615760"
  },
  {
    "text": "functionality",
    "start": "615760",
    "end": "617839"
  },
  {
    "text": "so for this uh",
    "start": "617839",
    "end": "619680"
  },
  {
    "text": "demo i'm going to produce a set of",
    "start": "619680",
    "end": "621680"
  },
  {
    "text": "records with sensitive fields in a",
    "start": "621680",
    "end": "624000"
  },
  {
    "text": "fluvial cluster",
    "start": "624000",
    "end": "625760"
  },
  {
    "text": "then i will write a smart module to",
    "start": "625760",
    "end": "627760"
  },
  {
    "text": "transform the records",
    "start": "627760",
    "end": "629519"
  },
  {
    "text": "to remove fields and mask sensitive data",
    "start": "629519",
    "end": "633760"
  },
  {
    "text": "and i will apply this while consuming",
    "start": "633760",
    "end": "635600"
  },
  {
    "text": "the records to show the transformation",
    "start": "635600",
    "end": "638079"
  },
  {
    "text": "and",
    "start": "638079",
    "end": "638880"
  },
  {
    "text": "yeah like",
    "start": "638880",
    "end": "640480"
  },
  {
    "text": "grant said earlier like these smart",
    "start": "640480",
    "end": "642880"
  },
  {
    "text": "modules can be hooked in at any point",
    "start": "642880",
    "end": "644720"
  },
  {
    "text": "data enters or exits fluvio or moves",
    "start": "644720",
    "end": "646800"
  },
  {
    "text": "between topics",
    "start": "646800",
    "end": "648720"
  },
  {
    "text": "okay",
    "start": "648720",
    "end": "649680"
  },
  {
    "text": "and",
    "start": "649680",
    "end": "650480"
  },
  {
    "text": "the sample data is going to look like",
    "start": "650480",
    "end": "652560"
  },
  {
    "text": "this it's going to have some fields",
    "start": "652560",
    "end": "655200"
  },
  {
    "text": "and",
    "start": "655200",
    "end": "656959"
  },
  {
    "text": "some of them will be sensitive and need",
    "start": "656959",
    "end": "658560"
  },
  {
    "text": "to be redacted",
    "start": "658560",
    "end": "660880"
  },
  {
    "text": "okay",
    "start": "660880",
    "end": "661920"
  },
  {
    "text": "in this scenario i'm gonna um store some",
    "start": "661920",
    "end": "665200"
  },
  {
    "text": "user accounts",
    "start": "665200",
    "end": "666640"
  },
  {
    "text": "and they're gonna have phone numbers and",
    "start": "666640",
    "end": "668240"
  },
  {
    "text": "social security numbers and we wanna",
    "start": "668240",
    "end": "670240"
  },
  {
    "text": "omit the social security number and mask",
    "start": "670240",
    "end": "672720"
  },
  {
    "text": "the phone number",
    "start": "672720",
    "end": "674800"
  },
  {
    "text": "and for this i'm going to be using our",
    "start": "674800",
    "end": "677120"
  },
  {
    "text": "infineon cloud",
    "start": "677120",
    "end": "680160"
  },
  {
    "text": "and you're able to",
    "start": "680560",
    "end": "682800"
  },
  {
    "text": "perform these same steps by signing up",
    "start": "682800",
    "end": "684560"
  },
  {
    "text": "for a free account but for the demo i'm",
    "start": "684560",
    "end": "686480"
  },
  {
    "text": "going to use my demo account",
    "start": "686480",
    "end": "690399"
  },
  {
    "text": "and you can interact with your fluvia",
    "start": "691120",
    "end": "693040"
  },
  {
    "text": "cluster infineon cloud with either the",
    "start": "693040",
    "end": "695680"
  },
  {
    "text": "the web ui fluvio cli or any of the",
    "start": "695680",
    "end": "698000"
  },
  {
    "text": "client libraries",
    "start": "698000",
    "end": "700000"
  },
  {
    "text": "i think grand already mentioned that we",
    "start": "700000",
    "end": "701519"
  },
  {
    "text": "have libraries for uh rust",
    "start": "701519",
    "end": "703839"
  },
  {
    "text": "python node.js java and golang but for",
    "start": "703839",
    "end": "706640"
  },
  {
    "text": "the demo i'm only going to need the web",
    "start": "706640",
    "end": "708640"
  },
  {
    "text": "ui and the floovio cli",
    "start": "708640",
    "end": "711360"
  },
  {
    "text": "okay um",
    "start": "711360",
    "end": "713120"
  },
  {
    "text": "so first thing i need to do is create a",
    "start": "713120",
    "end": "715279"
  },
  {
    "text": "topic to hold the user accounts",
    "start": "715279",
    "end": "719680"
  },
  {
    "text": "okay",
    "start": "720399",
    "end": "721440"
  },
  {
    "text": "and then i'm going to switch back to",
    "start": "721440",
    "end": "723680"
  },
  {
    "text": "the fluvio cli",
    "start": "723680",
    "end": "726800"
  },
  {
    "text": "to populate the sample data",
    "start": "727279",
    "end": "731360"
  },
  {
    "text": "well first i need to log into my cloud",
    "start": "731360",
    "end": "733519"
  },
  {
    "text": "account",
    "start": "733519",
    "end": "734560"
  },
  {
    "text": "so i'm going to use the flovio cli",
    "start": "734560",
    "end": "737440"
  },
  {
    "text": "a cloud login command and use the same",
    "start": "737440",
    "end": "740160"
  },
  {
    "text": "credentials as i used when i first",
    "start": "740160",
    "end": "741839"
  },
  {
    "text": "signed up",
    "start": "741839",
    "end": "745040"
  },
  {
    "text": "and now i'm",
    "start": "745040",
    "end": "746480"
  },
  {
    "text": "my fluvio cli is synced up with my cloud",
    "start": "746480",
    "end": "748720"
  },
  {
    "text": "account",
    "start": "748720",
    "end": "751040"
  },
  {
    "text": "and now i want to just produce",
    "start": "751040",
    "end": "753519"
  },
  {
    "text": "the one record i'm showing you above",
    "start": "753519",
    "end": "757880"
  },
  {
    "text": "okay i understood fluvio produce to the",
    "start": "759360",
    "end": "761839"
  },
  {
    "text": "user accounts topic and the sample data",
    "start": "761839",
    "end": "765440"
  },
  {
    "text": "file you see above",
    "start": "765440",
    "end": "767360"
  },
  {
    "text": "okay",
    "start": "767360",
    "end": "769519"
  },
  {
    "text": "i'm going to switch back over to the web",
    "start": "769519",
    "end": "772160"
  },
  {
    "text": "ui and in the records tab for the user",
    "start": "772160",
    "end": "774880"
  },
  {
    "text": "accounts topic you're going to see that",
    "start": "774880",
    "end": "776240"
  },
  {
    "text": "what i just produced",
    "start": "776240",
    "end": "778399"
  },
  {
    "text": "and",
    "start": "778399",
    "end": "780399"
  },
  {
    "text": "i'm going to write my smart module in",
    "start": "780399",
    "end": "782240"
  },
  {
    "text": "the editor smart module editor tab",
    "start": "782240",
    "end": "785440"
  },
  {
    "text": "right here in the web ui",
    "start": "785440",
    "end": "788240"
  },
  {
    "text": "and",
    "start": "788240",
    "end": "789040"
  },
  {
    "text": "the web ui currently only supports",
    "start": "789040",
    "end": "791120"
  },
  {
    "text": "writing in wrestling",
    "start": "791120",
    "end": "794240"
  },
  {
    "text": "but",
    "start": "794240",
    "end": "795040"
  },
  {
    "text": "other language support is planned",
    "start": "795040",
    "end": "797680"
  },
  {
    "text": "so i'm going",
    "start": "797680",
    "end": "798839"
  },
  {
    "text": "to select the type",
    "start": "798839",
    "end": "801839"
  },
  {
    "text": "smart module to map",
    "start": "801839",
    "end": "805120"
  },
  {
    "text": "and here i need to write my map function",
    "start": "806240",
    "end": "808320"
  },
  {
    "text": "that's going to do the transformation",
    "start": "808320",
    "end": "810959"
  },
  {
    "text": "i'm going to be pasting code snippets",
    "start": "810959",
    "end": "812959"
  },
  {
    "text": "into the editor to save some time during",
    "start": "812959",
    "end": "814880"
  },
  {
    "text": "this demo",
    "start": "814880",
    "end": "816160"
  },
  {
    "text": "uh and that's why i'll point out that",
    "start": "816160",
    "end": "818560"
  },
  {
    "text": "flovio records or just arbitrary bytes",
    "start": "818560",
    "end": "821440"
  },
  {
    "text": "allows you to store any kind of data",
    "start": "821440",
    "end": "823040"
  },
  {
    "text": "that you need in this case we're using",
    "start": "823040",
    "end": "825040"
  },
  {
    "text": "json",
    "start": "825040",
    "end": "826399"
  },
  {
    "text": "and we need to deserialize it so",
    "start": "826399",
    "end": "830079"
  },
  {
    "text": "uh first thing i'm going to do is uh",
    "start": "830079",
    "end": "833199"
  },
  {
    "text": "define a struct here um",
    "start": "833199",
    "end": "835519"
  },
  {
    "text": "user account that represents the data",
    "start": "835519",
    "end": "837519"
  },
  {
    "text": "that i just produced earlier",
    "start": "837519",
    "end": "839839"
  },
  {
    "text": "uh and we need to bring in a",
    "start": "839839",
    "end": "842000"
  },
  {
    "text": "serialization library um in wrestling we",
    "start": "842000",
    "end": "844560"
  },
  {
    "text": "have sergey which is the most popular",
    "start": "844560",
    "end": "846560"
  },
  {
    "text": "one",
    "start": "846560",
    "end": "848000"
  },
  {
    "text": "and then we need to uh",
    "start": "848000",
    "end": "850560"
  },
  {
    "text": "decorate",
    "start": "850560",
    "end": "851760"
  },
  {
    "text": "the struct with the deserialized",
    "start": "851760",
    "end": "854720"
  },
  {
    "text": "procedural macro",
    "start": "854720",
    "end": "857600"
  },
  {
    "text": "and then we also need some",
    "start": "857600",
    "end": "859839"
  },
  {
    "text": "uh",
    "start": "859839",
    "end": "860639"
  },
  {
    "text": "modules from uh and types from the",
    "start": "860639",
    "end": "863839"
  },
  {
    "text": "fluvia smart module library",
    "start": "863839",
    "end": "867440"
  },
  {
    "text": "and then we're just going to define our",
    "start": "867600",
    "end": "868959"
  },
  {
    "text": "function and",
    "start": "868959",
    "end": "872480"
  },
  {
    "text": "so it's just going to be a map function",
    "start": "873680",
    "end": "876079"
  },
  {
    "text": "and it's going to take in a reference to",
    "start": "876079",
    "end": "877760"
  },
  {
    "text": "a record and the output is going to be a",
    "start": "877760",
    "end": "879760"
  },
  {
    "text": "tuple",
    "start": "879760",
    "end": "881040"
  },
  {
    "text": "of key value and the key is optional",
    "start": "881040",
    "end": "885639"
  },
  {
    "text": "and the",
    "start": "885680",
    "end": "887040"
  },
  {
    "text": "explanation around what is a how keys",
    "start": "887040",
    "end": "889279"
  },
  {
    "text": "work in fluvia is a little bit out of",
    "start": "889279",
    "end": "890639"
  },
  {
    "text": "scope for this demo but the information",
    "start": "890639",
    "end": "892399"
  },
  {
    "text": "is on the floyd",
    "start": "892399",
    "end": "893600"
  },
  {
    "text": "folio website at flovio.io",
    "start": "893600",
    "end": "897480"
  },
  {
    "text": "okay and the first thing we need to do",
    "start": "898320",
    "end": "900160"
  },
  {
    "text": "is uh actually do the deserialization in",
    "start": "900160",
    "end": "902720"
  },
  {
    "text": "this uh function so we're gonna do",
    "start": "902720",
    "end": "905360"
  },
  {
    "text": "serialize and store um the record um the",
    "start": "905360",
    "end": "909680"
  },
  {
    "text": "account deserialized account in this",
    "start": "909680",
    "end": "911519"
  },
  {
    "text": "account variable of type user account",
    "start": "911519",
    "end": "914079"
  },
  {
    "text": "this is the struct we've defined above",
    "start": "914079",
    "end": "916320"
  },
  {
    "text": "we're just using certain json or passing",
    "start": "916320",
    "end": "918959"
  },
  {
    "text": "in a reference to the record value",
    "start": "918959",
    "end": "922800"
  },
  {
    "text": "okay and now we want to create here is a",
    "start": "922800",
    "end": "926000"
  },
  {
    "text": "redacted version of the account",
    "start": "926000",
    "end": "929839"
  },
  {
    "text": "and we're just going to define this as a",
    "start": "930000",
    "end": "932639"
  },
  {
    "text": "directly like a json object it's going",
    "start": "932639",
    "end": "934399"
  },
  {
    "text": "to have full name email phone",
    "start": "934399",
    "end": "937120"
  },
  {
    "text": "and we're going to omit ssn",
    "start": "937120",
    "end": "940079"
  },
  {
    "text": "because we don't want that to be in the",
    "start": "940079",
    "end": "941839"
  },
  {
    "text": "output",
    "start": "941839",
    "end": "943440"
  },
  {
    "text": "and we also want to mask the phone",
    "start": "943440",
    "end": "945120"
  },
  {
    "text": "number so we need to",
    "start": "945120",
    "end": "947839"
  },
  {
    "text": "define another variable that's going to",
    "start": "947839",
    "end": "949600"
  },
  {
    "text": "hold",
    "start": "949600",
    "end": "950480"
  },
  {
    "text": "the last four of your phone number and",
    "start": "950480",
    "end": "952320"
  },
  {
    "text": "we're going to do this the quick way",
    "start": "952320",
    "end": "954160"
  },
  {
    "text": "we're going to take the phone number",
    "start": "954160",
    "end": "955279"
  },
  {
    "text": "from the account um",
    "start": "955279",
    "end": "957360"
  },
  {
    "text": "reverse split on the hyphen and then",
    "start": "957360",
    "end": "959279"
  },
  {
    "text": "just get the first item which will be",
    "start": "959279",
    "end": "960639"
  },
  {
    "text": "the last four of the phone",
    "start": "960639",
    "end": "963759"
  },
  {
    "text": "and we need to update the",
    "start": "963759",
    "end": "967360"
  },
  {
    "text": "the json output",
    "start": "967440",
    "end": "969360"
  },
  {
    "text": "to instead use um format it like this",
    "start": "969360",
    "end": "973120"
  },
  {
    "text": "where",
    "start": "973120",
    "end": "974160"
  },
  {
    "text": "all the stuff that's been masked out is",
    "start": "974160",
    "end": "975680"
  },
  {
    "text": "replaced with asterisks and we and we're",
    "start": "975680",
    "end": "977759"
  },
  {
    "text": "going to inject the last four",
    "start": "977759",
    "end": "980240"
  },
  {
    "text": "so look how you expect okay",
    "start": "980240",
    "end": "983360"
  },
  {
    "text": "and then all we need to do is serialize",
    "start": "983360",
    "end": "986000"
  },
  {
    "text": "it back",
    "start": "986000",
    "end": "986959"
  },
  {
    "text": "into a json string",
    "start": "986959",
    "end": "990000"
  },
  {
    "text": "and we're using certainty again um",
    "start": "990000",
    "end": "993920"
  },
  {
    "text": "and then we just need to return",
    "start": "993920",
    "end": "996560"
  },
  {
    "text": "bytes from this function right so",
    "start": "996560",
    "end": "998639"
  },
  {
    "text": "we're going to convert that string if",
    "start": "998639",
    "end": "1001120"
  },
  {
    "text": "since the output of this function is",
    "start": "1001120",
    "end": "1003040"
  },
  {
    "text": "record data it's go and by calling dot",
    "start": "1003040",
    "end": "1005120"
  },
  {
    "text": "into on the json string it's going to",
    "start": "1005120",
    "end": "1007519"
  },
  {
    "text": "automatically uh convert converted to",
    "start": "1007519",
    "end": "1009519"
  },
  {
    "text": "bytes and that's what's going to be sent",
    "start": "1009519",
    "end": "1011839"
  },
  {
    "text": "out",
    "start": "1011839",
    "end": "1012800"
  },
  {
    "text": "from this function and i think that",
    "start": "1012800",
    "end": "1015279"
  },
  {
    "text": "should be it",
    "start": "1015279",
    "end": "1016720"
  },
  {
    "text": "and so let's apply this",
    "start": "1016720",
    "end": "1019120"
  },
  {
    "text": "and what that's going to do is it's",
    "start": "1019120",
    "end": "1020720"
  },
  {
    "text": "going to compile this code",
    "start": "1020720",
    "end": "1023199"
  },
  {
    "text": "using the rust compiler but in our cloud",
    "start": "1023199",
    "end": "1025199"
  },
  {
    "text": "back-end",
    "start": "1025199",
    "end": "1026240"
  },
  {
    "text": "so that usually takes a few seconds at",
    "start": "1026240",
    "end": "1028400"
  },
  {
    "text": "least and",
    "start": "1028400",
    "end": "1030079"
  },
  {
    "text": "yeah and here you see that",
    "start": "1030079",
    "end": "1031760"
  },
  {
    "text": "the the data has been transformed um so",
    "start": "1031760",
    "end": "1034640"
  },
  {
    "text": "let's look at it again so this is what",
    "start": "1034640",
    "end": "1036880"
  },
  {
    "text": "went in um i guess i can actually show",
    "start": "1036880",
    "end": "1038798"
  },
  {
    "text": "you that in the records tab",
    "start": "1038799",
    "end": "1042000"
  },
  {
    "text": "right so that's what went in and",
    "start": "1047199",
    "end": "1050160"
  },
  {
    "text": "with this smart module i just written",
    "start": "1050160",
    "end": "1052000"
  },
  {
    "text": "this is what came up",
    "start": "1052000",
    "end": "1053520"
  },
  {
    "text": "so no ssn and the phone number has been",
    "start": "1053520",
    "end": "1055679"
  },
  {
    "text": "masked",
    "start": "1055679",
    "end": "1056640"
  },
  {
    "text": "okay so",
    "start": "1056640",
    "end": "1058080"
  },
  {
    "text": "um",
    "start": "1058080",
    "end": "1060399"
  },
  {
    "text": "the smart module will be applied to any",
    "start": "1060480",
    "end": "1062960"
  },
  {
    "text": "future record that's been uh being",
    "start": "1062960",
    "end": "1064799"
  },
  {
    "text": "produced and i can best demonstrate that",
    "start": "1064799",
    "end": "1066720"
  },
  {
    "text": "using our cli",
    "start": "1066720",
    "end": "1070000"
  },
  {
    "text": "so i have the same code",
    "start": "1071679",
    "end": "1074000"
  },
  {
    "text": "that",
    "start": "1074000",
    "end": "1074880"
  },
  {
    "text": "we wrote",
    "start": "1074880",
    "end": "1076320"
  },
  {
    "text": "in the editor i'll prepare this",
    "start": "1076320",
    "end": "1078960"
  },
  {
    "text": "here and i'm just going to compile it",
    "start": "1078960",
    "end": "1083360"
  },
  {
    "text": "and i'm going to",
    "start": "1087840",
    "end": "1090080"
  },
  {
    "text": "upload it to the fluvia cluster",
    "start": "1090080",
    "end": "1092799"
  },
  {
    "text": "under the name redact",
    "start": "1092799",
    "end": "1095360"
  },
  {
    "text": "so that's just",
    "start": "1095360",
    "end": "1096559"
  },
  {
    "text": "the path to the wasm binary that was",
    "start": "1096559",
    "end": "1099039"
  },
  {
    "text": "just built",
    "start": "1099039",
    "end": "1101519"
  },
  {
    "text": "and now i'm going to consume",
    "start": "1102080",
    "end": "1106200"
  },
  {
    "text": "um",
    "start": "1108720",
    "end": "1110080"
  },
  {
    "text": "using that smart module",
    "start": "1110080",
    "end": "1113679"
  },
  {
    "text": "okay",
    "start": "1118559",
    "end": "1119360"
  },
  {
    "text": "i'm sorry uh grant can you let me know",
    "start": "1119360",
    "end": "1121360"
  },
  {
    "text": "if uh you're seeing the right side of my",
    "start": "1121360",
    "end": "1123440"
  },
  {
    "text": "screen or if it's being blocked",
    "start": "1123440",
    "end": "1126240"
  },
  {
    "text": "oh we can see it",
    "start": "1126240",
    "end": "1127919"
  },
  {
    "text": "okay thanks",
    "start": "1127919",
    "end": "1129919"
  },
  {
    "text": "all right",
    "start": "1129919",
    "end": "1131360"
  },
  {
    "text": "um so now i'm going to produce a few",
    "start": "1131360",
    "end": "1133840"
  },
  {
    "text": "thousand records uh from a prepared",
    "start": "1133840",
    "end": "1137360"
  },
  {
    "text": "json",
    "start": "1137360",
    "end": "1138480"
  },
  {
    "text": "file like i just have um",
    "start": "1138480",
    "end": "1141360"
  },
  {
    "text": "5000 pre-generated records here of",
    "start": "1141360",
    "end": "1144160"
  },
  {
    "text": "user accounts",
    "start": "1144160",
    "end": "1145440"
  },
  {
    "text": "and i'm just going to um",
    "start": "1145440",
    "end": "1148720"
  },
  {
    "text": "produce it",
    "start": "1148720",
    "end": "1151840"
  },
  {
    "text": "you can see as a producer",
    "start": "1158240",
    "end": "1160000"
  },
  {
    "text": "the consume was active and with the",
    "start": "1160000",
    "end": "1162080"
  },
  {
    "text": "smart module automatically transformed",
    "start": "1162080",
    "end": "1164080"
  },
  {
    "text": "everything i just produced",
    "start": "1164080",
    "end": "1166080"
  },
  {
    "text": "um",
    "start": "1166080",
    "end": "1167440"
  },
  {
    "text": "but to kind of give you a better feel of",
    "start": "1167440",
    "end": "1169600"
  },
  {
    "text": "this happening",
    "start": "1169600",
    "end": "1170880"
  },
  {
    "text": "that",
    "start": "1170880",
    "end": "1171840"
  },
  {
    "text": "this actually happens real time i'm",
    "start": "1171840",
    "end": "1173280"
  },
  {
    "text": "going to do this in slow motion",
    "start": "1173280",
    "end": "1175520"
  },
  {
    "text": "so i'm going to use a",
    "start": "1175520",
    "end": "1178240"
  },
  {
    "text": "no jazz script that i wrote that's going",
    "start": "1178240",
    "end": "1180400"
  },
  {
    "text": "to",
    "start": "1180400",
    "end": "1181200"
  },
  {
    "text": "produce records slowly so you can kind",
    "start": "1181200",
    "end": "1182880"
  },
  {
    "text": "of just better visualize what's",
    "start": "1182880",
    "end": "1184559"
  },
  {
    "text": "happening",
    "start": "1184559",
    "end": "1185919"
  },
  {
    "text": "so it's going to produce",
    "start": "1185919",
    "end": "1189039"
  },
  {
    "text": "random",
    "start": "1189039",
    "end": "1190000"
  },
  {
    "text": "new user accounts",
    "start": "1190000",
    "end": "1192240"
  },
  {
    "text": "see as",
    "start": "1192240",
    "end": "1193679"
  },
  {
    "text": "it's being produced you can see that",
    "start": "1193679",
    "end": "1195120"
  },
  {
    "text": "it's being",
    "start": "1195120",
    "end": "1196400"
  },
  {
    "text": "redacted and",
    "start": "1196400",
    "end": "1198559"
  },
  {
    "text": "displayed here in the consume output",
    "start": "1198559",
    "end": "1201520"
  },
  {
    "text": "okay and",
    "start": "1201520",
    "end": "1202960"
  },
  {
    "text": "that concludes the demo",
    "start": "1202960",
    "end": "1206840"
  },
  {
    "text": "okay congrats",
    "start": "1206960",
    "end": "1209039"
  },
  {
    "text": "excellent thank you nick that was",
    "start": "1209039",
    "end": "1210720"
  },
  {
    "text": "awesome um",
    "start": "1210720",
    "end": "1212400"
  },
  {
    "text": "so if anybody has any questions um",
    "start": "1212400",
    "end": "1215120"
  },
  {
    "text": "please type them into the question",
    "start": "1215120",
    "end": "1217360"
  },
  {
    "text": "window nick we have a couple that have",
    "start": "1217360",
    "end": "1219200"
  },
  {
    "text": "just come in",
    "start": "1219200",
    "end": "1220799"
  },
  {
    "text": "um the first question is uh can fluvia",
    "start": "1220799",
    "end": "1224880"
  },
  {
    "text": "run in public clouds like aws",
    "start": "1224880",
    "end": "1229039"
  },
  {
    "text": "uh absolutely um our infineon cloud is",
    "start": "1229039",
    "end": "1231919"
  },
  {
    "text": "actually running in aws and even with",
    "start": "1231919",
    "end": "1234880"
  },
  {
    "text": "the open source uh",
    "start": "1234880",
    "end": "1237120"
  },
  {
    "text": "fluvia repository has",
    "start": "1237120",
    "end": "1240400"
  },
  {
    "text": "scripts to help you deploy that in eks",
    "start": "1240400",
    "end": "1243280"
  },
  {
    "text": "on aws",
    "start": "1243280",
    "end": "1245919"
  },
  {
    "text": "and",
    "start": "1245919",
    "end": "1246880"
  },
  {
    "text": "since it runs on kubernetes it should",
    "start": "1246880",
    "end": "1248720"
  },
  {
    "text": "run in any other cloud platform that",
    "start": "1248720",
    "end": "1251520"
  },
  {
    "text": "supports kubernetes",
    "start": "1251520",
    "end": "1254880"
  },
  {
    "text": "excellent um we just had another",
    "start": "1255840",
    "end": "1257679"
  },
  {
    "text": "question come in they're asking what",
    "start": "1257679",
    "end": "1260000"
  },
  {
    "text": "other kinds of smart modules can be",
    "start": "1260000",
    "end": "1262000"
  },
  {
    "text": "written",
    "start": "1262000",
    "end": "1263840"
  },
  {
    "text": "sure um i think you went over it earlier",
    "start": "1263840",
    "end": "1266400"
  },
  {
    "text": "um so we also support uh filter and",
    "start": "1266400",
    "end": "1270400"
  },
  {
    "text": "arraymap and aggregate and filter and i",
    "start": "1270400",
    "end": "1273120"
  },
  {
    "text": "can just quickly explain those like",
    "start": "1273120",
    "end": "1274559"
  },
  {
    "text": "filter is just where you have right",
    "start": "1274559",
    "end": "1277280"
  },
  {
    "text": "logic to make a decision is whether to",
    "start": "1277280",
    "end": "1279760"
  },
  {
    "text": "consume this record or not",
    "start": "1279760",
    "end": "1283440"
  },
  {
    "text": "and aggregate is a little more powerful",
    "start": "1283440",
    "end": "1285440"
  },
  {
    "text": "allows you to",
    "start": "1285440",
    "end": "1286960"
  },
  {
    "text": "look at",
    "start": "1286960",
    "end": "1288159"
  },
  {
    "text": "multiple records um in the stream and",
    "start": "1288159",
    "end": "1291200"
  },
  {
    "text": "then aggregate",
    "start": "1291200",
    "end": "1292640"
  },
  {
    "text": "some sort of value based on it much like",
    "start": "1292640",
    "end": "1294960"
  },
  {
    "text": "in relational database systems with",
    "start": "1294960",
    "end": "1297280"
  },
  {
    "text": "aggregate functions",
    "start": "1297280",
    "end": "1300159"
  },
  {
    "text": "awesome",
    "start": "1301280",
    "end": "1302720"
  },
  {
    "text": "um i don't see any other questions so i",
    "start": "1302720",
    "end": "1305919"
  },
  {
    "text": "would just like to let the audience know",
    "start": "1305919",
    "end": "1307520"
  },
  {
    "text": "you're welcome to go to",
    "start": "1307520",
    "end": "1310200"
  },
  {
    "text": "www.infinion.com",
    "start": "1310200",
    "end": "1311840"
  },
  {
    "text": "um there's a try now button if you'd",
    "start": "1311840",
    "end": "1314000"
  },
  {
    "text": "like to start your own infineon cloud",
    "start": "1314000",
    "end": "1315919"
  },
  {
    "text": "account and test out the real-time data",
    "start": "1315919",
    "end": "1318320"
  },
  {
    "text": "streaming um this is you know this is",
    "start": "1318320",
    "end": "1322000"
  },
  {
    "text": "the most modern platform available",
    "start": "1322000",
    "end": "1324000"
  },
  {
    "text": "written on rust as you can see the uh",
    "start": "1324000",
    "end": "1326480"
  },
  {
    "text": "the performance metrics the memory",
    "start": "1326480",
    "end": "1328240"
  },
  {
    "text": "metrics are are far better than any",
    "start": "1328240",
    "end": "1330400"
  },
  {
    "text": "other data streaming platform out there",
    "start": "1330400",
    "end": "1333280"
  },
  {
    "text": "and we're really excited to to show this",
    "start": "1333280",
    "end": "1335919"
  },
  {
    "text": "um so if anybody's available on march",
    "start": "1335919",
    "end": "1338799"
  },
  {
    "text": "24th",
    "start": "1338799",
    "end": "1339919"
  },
  {
    "text": "um we have our kafka versus fluvio event",
    "start": "1339919",
    "end": "1343120"
  },
  {
    "text": "streaming for high performance data",
    "start": "1343120",
    "end": "1344640"
  },
  {
    "text": "pipelines webinar uh feel free to",
    "start": "1344640",
    "end": "1347520"
  },
  {
    "text": "register for that we also have um some",
    "start": "1347520",
    "end": "1350480"
  },
  {
    "text": "great content in the handout section",
    "start": "1350480",
    "end": "1353760"
  },
  {
    "text": "and",
    "start": "1353760",
    "end": "1354640"
  },
  {
    "text": "uh we appreciate you joining us for the",
    "start": "1354640",
    "end": "1356799"
  },
  {
    "text": "webinar today and this concludes our",
    "start": "1356799",
    "end": "1358400"
  },
  {
    "text": "session thank you so much bye",
    "start": "1358400",
    "end": "1361840"
  }
]