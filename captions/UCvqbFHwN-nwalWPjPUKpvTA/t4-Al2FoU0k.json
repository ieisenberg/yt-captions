[
  {
    "text": "so uh yeah welcome to extending a high",
    "start": "40",
    "end": "2120"
  },
  {
    "text": "performance data streaming system with",
    "start": "2120",
    "end": "3399"
  },
  {
    "text": "web assmbly we're going to talk about um",
    "start": "3399",
    "end": "5720"
  },
  {
    "text": "both what is this system and why would",
    "start": "5720",
    "end": "7640"
  },
  {
    "text": "you want to uh extend this system with",
    "start": "7640",
    "end": "10000"
  },
  {
    "text": "web assembly um my name is Tyler",
    "start": "10000",
    "end": "11960"
  },
  {
    "text": "Rockwood I'm the tech lead for data",
    "start": "11960",
    "end": "13519"
  },
  {
    "text": "Transformations at red panda data um I'm",
    "start": "13519",
    "end": "16480"
  },
  {
    "text": "happy and we'll talk and dig into what",
    "start": "16480",
    "end": "18680"
  },
  {
    "text": "are data Transformations and yeah what",
    "start": "18680",
    "end": "20519"
  },
  {
    "text": "is red panda um so agenda we're going to",
    "start": "20519",
    "end": "23000"
  },
  {
    "text": "talk through three main points we're",
    "start": "23000",
    "end": "24320"
  },
  {
    "text": "going to talk about just a quick",
    "start": "24320",
    "end": "25800"
  },
  {
    "text": "introduction to what red panda is um",
    "start": "25800",
    "end": "28199"
  },
  {
    "text": "what data Transformations and streaming",
    "start": "28199",
    "end": "30240"
  },
  {
    "text": "is and um we'll work through a case",
    "start": "30240",
    "end": "32279"
  },
  {
    "text": "study and then last one is just what are",
    "start": "32279",
    "end": "34320"
  },
  {
    "text": "the challenges of embedding a web's",
    "start": "34320",
    "end": "35680"
  },
  {
    "text": "assembly runtime within red panda we",
    "start": "35680",
    "end": "37680"
  },
  {
    "text": "have a high performance Computing",
    "start": "37680",
    "end": "38840"
  },
  {
    "text": "environment so we impose a lot of",
    "start": "38840",
    "end": "40399"
  },
  {
    "text": "restrictions on ourselves which I'll get",
    "start": "40399",
    "end": "41680"
  },
  {
    "text": "into later um and that POS some",
    "start": "41680",
    "end": "43640"
  },
  {
    "text": "challenges so we'll work through some of",
    "start": "43640",
    "end": "45440"
  },
  {
    "text": "those um so first introduction what is",
    "start": "45440",
    "end": "48079"
  },
  {
    "text": "red panda in 60 seconds uh red panda is",
    "start": "48079",
    "end": "49920"
  },
  {
    "text": "a high performance data streaming engine",
    "start": "49920",
    "end": "51280"
  },
  {
    "text": "we speak the apachi Kafka API um so if",
    "start": "51280",
    "end": "54039"
  },
  {
    "text": "you're not familiar with Kafka that's",
    "start": "54039",
    "end": "55160"
  },
  {
    "text": "okay it's um think of the the simplest",
    "start": "55160",
    "end": "57399"
  },
  {
    "text": "primitive I can give you is it's a it's",
    "start": "57399",
    "end": "58879"
  },
  {
    "text": "a log and you can produce to the end of",
    "start": "58879",
    "end": "60879"
  },
  {
    "text": "that log and then you can consume from",
    "start": "60879",
    "end": "62280"
  },
  {
    "text": "some offset in that log to the end so",
    "start": "62280",
    "end": "63920"
  },
  {
    "text": "it's uses a message broker um to power a",
    "start": "63920",
    "end": "66439"
  },
  {
    "text": "lot of applications sort of decouple",
    "start": "66439",
    "end": "68040"
  },
  {
    "text": "your producing events um from your",
    "start": "68040",
    "end": "69920"
  },
  {
    "text": "consuming events um so these go into",
    "start": "69920",
    "end": "73040"
  },
  {
    "text": "partitions which is sort of the smallest",
    "start": "73040",
    "end": "75159"
  },
  {
    "text": "level of abstraction and then you can",
    "start": "75159",
    "end": "76560"
  },
  {
    "text": "kind of group those into topics um and",
    "start": "76560",
    "end": "79360"
  },
  {
    "text": "you get ordering for each of these logs",
    "start": "79360",
    "end": "81200"
  },
  {
    "text": "within a single partition so you can",
    "start": "81200",
    "end": "82360"
  },
  {
    "text": "think of a a partition is essentially a",
    "start": "82360",
    "end": "84200"
  },
  {
    "text": "log it's a distributed log as well um we",
    "start": "84200",
    "end": "86520"
  },
  {
    "text": "generally have lots of logs uh of these",
    "start": "86520",
    "end": "88960"
  },
  {
    "text": "partitions per cluster",
    "start": "88960",
    "end": "90360"
  },
  {
    "text": "and then each of these partitions is a",
    "start": "90360",
    "end": "92040"
  },
  {
    "text": "raft group so we use the raft consensus",
    "start": "92040",
    "end": "94320"
  },
  {
    "text": "protocol to ensure that your data is",
    "start": "94320",
    "end": "95799"
  },
  {
    "text": "replicated safely you don't have any",
    "start": "95799",
    "end": "97040"
  },
  {
    "text": "data loss things like that um and then",
    "start": "97040",
    "end": "99720"
  },
  {
    "text": "one of our major selling points besides",
    "start": "99720",
    "end": "101680"
  },
  {
    "text": "we're very high performance um low TCO",
    "start": "101680",
    "end": "104560"
  },
  {
    "text": "we also are simple to manage and and",
    "start": "104560",
    "end": "106320"
  },
  {
    "text": "deploy so uh it's not a bunch of",
    "start": "106320",
    "end": "108240"
  },
  {
    "text": "different Services you have to set up we",
    "start": "108240",
    "end": "109799"
  },
  {
    "text": "one single binary that you can deploy",
    "start": "109799",
    "end": "111680"
  },
  {
    "text": "that runs on any Linux",
    "start": "111680",
    "end": "113960"
  },
  {
    "text": "system okay so that's a real quick",
    "start": "113960",
    "end": "115840"
  },
  {
    "text": "overview into red panda I'll talk more",
    "start": "115840",
    "end": "117280"
  },
  {
    "text": "about some of the interesting bits of",
    "start": "117280",
    "end": "118880"
  },
  {
    "text": "red panda and its architecture in a",
    "start": "118880",
    "end": "120280"
  },
  {
    "text": "little bit uh I'm going to start by",
    "start": "120280",
    "end": "121799"
  },
  {
    "text": "talking about what is data",
    "start": "121799",
    "end": "122640"
  },
  {
    "text": "transformation in this streaming",
    "start": "122640",
    "end": "124039"
  },
  {
    "text": "pipeline when you're producing and",
    "start": "124039",
    "end": "125159"
  },
  {
    "text": "consuming events in these architectures",
    "start": "125159",
    "end": "127399"
  },
  {
    "text": "so this is a quick example of an",
    "start": "127399",
    "end": "129080"
  },
  {
    "text": "e-commerce sort of application use case",
    "start": "129080",
    "end": "131440"
  },
  {
    "text": "using um any sort of Kafka compatible",
    "start": "131440",
    "end": "133920"
  },
  {
    "text": "API like red panda or Apachi kofka",
    "start": "133920",
    "end": "136400"
  },
  {
    "text": "itself um this use case is sort of we",
    "start": "136400",
    "end": "139040"
  },
  {
    "text": "have transactions that are happening in",
    "start": "139040",
    "end": "140519"
  },
  {
    "text": "this uh business those get pushed into a",
    "start": "140519",
    "end": "143400"
  },
  {
    "text": "uh a log uh topic called transactions uh",
    "start": "143400",
    "end": "146360"
  },
  {
    "text": "which has the information about how much",
    "start": "146360",
    "end": "148720"
  },
  {
    "text": "U how much the transaction action was",
    "start": "148720",
    "end": "150280"
  },
  {
    "text": "who made the transaction credit card",
    "start": "150280",
    "end": "151560"
  },
  {
    "text": "information all these sorts of things",
    "start": "151560",
    "end": "152640"
  },
  {
    "text": "and then that gets consumed Downstream",
    "start": "152640",
    "end": "154360"
  },
  {
    "text": "by a separate application doing fraud",
    "start": "154360",
    "end": "155760"
  },
  {
    "text": "detection so this is a use case that we",
    "start": "155760",
    "end": "158040"
  },
  {
    "text": "see for data streaming in e-commerce um",
    "start": "158040",
    "end": "160480"
  },
  {
    "text": "applications so let's say you your",
    "start": "160480",
    "end": "162360"
  },
  {
    "text": "business then wants to go okay we want",
    "start": "162360",
    "end": "163519"
  },
  {
    "text": "to do like restocking of our inventory",
    "start": "163519",
    "end": "165560"
  },
  {
    "text": "very quickly so we want to consume this",
    "start": "165560",
    "end": "167080"
  },
  {
    "text": "real-time events of transactions and as",
    "start": "167080",
    "end": "168720"
  },
  {
    "text": "things are being bought we want to make",
    "start": "168720",
    "end": "170080"
  },
  {
    "text": "sure we replenish the uh our stock so if",
    "start": "170080",
    "end": "173239"
  },
  {
    "text": "you want to add this then you say oh",
    "start": "173239",
    "end": "174599"
  },
  {
    "text": "simple I just add in another component",
    "start": "174599",
    "end": "176640"
  },
  {
    "text": "that will sort of do this processing and",
    "start": "176640",
    "end": "178239"
  },
  {
    "text": "consume from this log however there's",
    "start": "178239",
    "end": "179840"
  },
  {
    "text": "one problem with this is that um there's",
    "start": "179840",
    "end": "182280"
  },
  {
    "text": "a bunch of like I said credit card",
    "start": "182280",
    "end": "183560"
  },
  {
    "text": "information and thing information in",
    "start": "183560",
    "end": "185560"
  },
  {
    "text": "there that the fraud detection system",
    "start": "185560",
    "end": "187000"
  },
  {
    "text": "needs but you don't want to expose to",
    "start": "187000",
    "end": "188720"
  },
  {
    "text": "sort of the supply chain side of the",
    "start": "188720",
    "end": "190360"
  },
  {
    "text": "Wheelhouse part of your company um so a",
    "start": "190360",
    "end": "192959"
  },
  {
    "text": "way that you can do this is well let's",
    "start": "192959",
    "end": "194480"
  },
  {
    "text": "just write this to a separate log um",
    "start": "194480",
    "end": "196400"
  },
  {
    "text": "that doesn't have any personal",
    "start": "196400",
    "end": "197400"
  },
  {
    "text": "identifiable information or any sort of",
    "start": "197400",
    "end": "200120"
  },
  {
    "text": "um uh sensitive information in it so uh",
    "start": "200120",
    "end": "203200"
  },
  {
    "text": "and then we'll just have the restocking",
    "start": "203200",
    "end": "205200"
  },
  {
    "text": "uh like subsystem kind of comp stream in",
    "start": "205200",
    "end": "208599"
  },
  {
    "text": "data and consume data from that so how",
    "start": "208599",
    "end": "210799"
  },
  {
    "text": "would you do this in a sort of today in",
    "start": "210799",
    "end": "212519"
  },
  {
    "text": "a normal sort of thing is youd stand up",
    "start": "212519",
    "end": "214200"
  },
  {
    "text": "a whole separate uh distributed",
    "start": "214200",
    "end": "216280"
  },
  {
    "text": "application to sort of read in this",
    "start": "216280",
    "end": "218439"
  },
  {
    "text": "transaction original data do this really",
    "start": "218439",
    "end": "220879"
  },
  {
    "text": "simple transform a strip out a few",
    "start": "220879",
    "end": "222159"
  },
  {
    "text": "fields and write it back in you can use",
    "start": "222159",
    "end": "223519"
  },
  {
    "text": "Apache flank there's lots of different",
    "start": "223519",
    "end": "224840"
  },
  {
    "text": "sort of solutions to these sorts of",
    "start": "224840",
    "end": "226239"
  },
  {
    "text": "really simple stateless Transformations",
    "start": "226239",
    "end": "227959"
  },
  {
    "text": "but now you're spinning up an entire new",
    "start": "227959",
    "end": "229879"
  },
  {
    "text": "infrastructure and cluster just to apply",
    "start": "229879",
    "end": "232439"
  },
  {
    "text": "these really simple small uh",
    "start": "232439",
    "end": "234519"
  },
  {
    "text": "Transformations on your data and now",
    "start": "234519",
    "end": "236519"
  },
  {
    "text": "you're may be seeing where web assembly",
    "start": "236519",
    "end": "238239"
  },
  {
    "text": "can come in so with red panda we have",
    "start": "238239",
    "end": "240079"
  },
  {
    "text": "the ability to um within the broker",
    "start": "240079",
    "end": "242680"
  },
  {
    "text": "itself as these events are being",
    "start": "242680",
    "end": "244480"
  },
  {
    "text": "streamed into one of the logs we can",
    "start": "244480",
    "end": "246840"
  },
  {
    "text": "read information that are on these logs",
    "start": "246840",
    "end": "249480"
  },
  {
    "text": "process it through whatever your custom",
    "start": "249480",
    "end": "251480"
  },
  {
    "text": "business logic is in your web assembly",
    "start": "251480",
    "end": "253280"
  },
  {
    "text": "module and then output it to a separate",
    "start": "253280",
    "end": "256000"
  },
  {
    "text": "uh topic for you to then consume so this",
    "start": "256000",
    "end": "258000"
  },
  {
    "text": "allows you to sort of build really nice",
    "start": "258000",
    "end": "259560"
  },
  {
    "text": "plugable extend your broker to satisfy",
    "start": "259560",
    "end": "262320"
  },
  {
    "text": "your business requirements without",
    "start": "262320",
    "end": "263680"
  },
  {
    "text": "needing to um set up a whole bunch of",
    "start": "263680",
    "end": "266040"
  },
  {
    "text": "extra infrastructure figure out how to",
    "start": "266040",
    "end": "267440"
  },
  {
    "text": "monitor it figure out the costing and",
    "start": "267440",
    "end": "269639"
  },
  {
    "text": "sizing and all those sorts of things",
    "start": "269639",
    "end": "270720"
  },
  {
    "text": "these can all be built into through the",
    "start": "270720",
    "end": "272320"
  },
  {
    "text": "broker we'll have all the metrics and",
    "start": "272320",
    "end": "274479"
  },
  {
    "text": "logs and things for you built in um so",
    "start": "274479",
    "end": "277080"
  },
  {
    "text": "this is sort of about a high level what",
    "start": "277080",
    "end": "278320"
  },
  {
    "text": "happens you have one log and each of",
    "start": "278320",
    "end": "279800"
  },
  {
    "text": "these in the log is a series of records",
    "start": "279800",
    "end": "281680"
  },
  {
    "text": "and we'll take each of these records",
    "start": "281680",
    "end": "283320"
  },
  {
    "text": "push it through your wasm transformation",
    "start": "283320",
    "end": "285440"
  },
  {
    "text": "and we'll get a record back out and then",
    "start": "285440",
    "end": "286800"
  },
  {
    "text": "we'll write these into the output uh log",
    "start": "286800",
    "end": "289960"
  },
  {
    "text": "on a different partition and these can",
    "start": "289960",
    "end": "291560"
  },
  {
    "text": "exist in sorts of all sorts of different",
    "start": "291560",
    "end": "292880"
  },
  {
    "text": "ways so here's a really high level I'm",
    "start": "292880",
    "end": "294520"
  },
  {
    "text": "going to kind of fly through this uh",
    "start": "294520",
    "end": "296039"
  },
  {
    "text": "overview of red panda's architecture so",
    "start": "296039",
    "end": "297800"
  },
  {
    "text": "we have the Cordova API compatibility",
    "start": "297800",
    "end": "300160"
  },
  {
    "text": "layer and that goes down into the raft",
    "start": "300160",
    "end": "301880"
  },
  {
    "text": "subsystem which then handles replication",
    "start": "301880",
    "end": "304199"
  },
  {
    "text": "of this to multiple nodes and getting",
    "start": "304199",
    "end": "305720"
  },
  {
    "text": "all the appropriate consensus and then",
    "start": "305720",
    "end": "308160"
  },
  {
    "text": "also FS syncing it to dis so it's safe",
    "start": "308160",
    "end": "310479"
  },
  {
    "text": "so that that happens today what we've",
    "start": "310479",
    "end": "312479"
  },
  {
    "text": "done is added web assembly on top of the",
    "start": "312479",
    "end": "315039"
  },
  {
    "text": "raft subsystem to then pull in data as",
    "start": "315039",
    "end": "317120"
  },
  {
    "text": "it's committed to the original input",
    "start": "317120",
    "end": "318880"
  },
  {
    "text": "topic we process it per each log and",
    "start": "318880",
    "end": "321720"
  },
  {
    "text": "then we'll write it to wherever it needs",
    "start": "321720",
    "end": "323000"
  },
  {
    "text": "to go so let's say in the example I have",
    "start": "323000",
    "end": "325600"
  },
  {
    "text": "you have your transactions and your",
    "start": "325600",
    "end": "326840"
  },
  {
    "text": "output of like cleaned transaction data",
    "start": "326840",
    "end": "329240"
  },
  {
    "text": "right so as transactions events records",
    "start": "329240",
    "end": "332199"
  },
  {
    "text": "are written into the input topic we'll",
    "start": "332199",
    "end": "334440"
  },
  {
    "text": "for each of those different partitions",
    "start": "334440",
    "end": "335880"
  },
  {
    "text": "we'll have a VM deployed on that core um",
    "start": "335880",
    "end": "338960"
  },
  {
    "text": "and we will pull in pull those logs and",
    "start": "338960",
    "end": "341479"
  },
  {
    "text": "push it through the web assembly run",
    "start": "341479",
    "end": "342919"
  },
  {
    "text": "time so um red panda is a thread per",
    "start": "342919",
    "end": "345199"
  },
  {
    "text": "core architecture I'll talk a little bit",
    "start": "345199",
    "end": "346479"
  },
  {
    "text": "more about that in a little bit so um we",
    "start": "346479",
    "end": "348639"
  },
  {
    "text": "run one of these on every core which",
    "start": "348639",
    "end": "350479"
  },
  {
    "text": "these are needed and um we run these",
    "start": "350479",
    "end": "352880"
  },
  {
    "text": "Transformations on the input partitions",
    "start": "352880",
    "end": "355240"
  },
  {
    "text": "leader in this raft leader so the raft",
    "start": "355240",
    "end": "357840"
  },
  {
    "text": "leader is the one that knows whether or",
    "start": "357840",
    "end": "359680"
  },
  {
    "text": "not something's committed it's been",
    "start": "359680",
    "end": "361319"
  },
  {
    "text": "successfully act and then that's when",
    "start": "361319",
    "end": "362720"
  },
  {
    "text": "you can then go ahead and process it so",
    "start": "362720",
    "end": "365759"
  },
  {
    "text": "we get the same sort of safety and",
    "start": "365759",
    "end": "367039"
  },
  {
    "text": "durability guarantees that we already",
    "start": "367039",
    "end": "369280"
  },
  {
    "text": "provide um so why use web assembly for",
    "start": "369280",
    "end": "371759"
  },
  {
    "text": "this task I mean so obviously the appeal",
    "start": "371759",
    "end": "374680"
  },
  {
    "text": "to use any language that you want um for",
    "start": "374680",
    "end": "376880"
  },
  {
    "text": "our use case of a high performance",
    "start": "376880",
    "end": "378639"
  },
  {
    "text": "broker is the very strict runtime limits",
    "start": "378639",
    "end": "380800"
  },
  {
    "text": "you can impose so I'm going to detail",
    "start": "380800",
    "end": "382319"
  },
  {
    "text": "here at the end some of the challenges",
    "start": "382319",
    "end": "383599"
  },
  {
    "text": "around these runtime limits and the",
    "start": "383599",
    "end": "384840"
  },
  {
    "text": "constraints that we have programming",
    "start": "384840",
    "end": "386560"
  },
  {
    "text": "within red panda that we're able to",
    "start": "386560",
    "end": "388160"
  },
  {
    "text": "impose on the web assembly",
    "start": "388160",
    "end": "390039"
  },
  {
    "text": "um virtual machine so that you don't",
    "start": "390039",
    "end": "392919"
  },
  {
    "text": "have any sort of latency hiccups or any",
    "start": "392919",
    "end": "394960"
  },
  {
    "text": "sort of performance issues as you're",
    "start": "394960",
    "end": "396319"
  },
  {
    "text": "running and deploying this sort of and",
    "start": "396319",
    "end": "398160"
  },
  {
    "text": "running these user code and then also um",
    "start": "398160",
    "end": "400160"
  },
  {
    "text": "the wasi standard is really great gives",
    "start": "400160",
    "end": "401560"
  },
  {
    "text": "us this sort of like sandbox posix",
    "start": "401560",
    "end": "403280"
  },
  {
    "text": "environment so for us we use this you",
    "start": "403280",
    "end": "404720"
  },
  {
    "text": "can deploy configure configuration via",
    "start": "404720",
    "end": "406759"
  },
  {
    "text": "environment variables so you can sort of",
    "start": "406759",
    "end": "408560"
  },
  {
    "text": "you know configure it you know in this",
    "start": "408560",
    "end": "409880"
  },
  {
    "text": "environment I have these different",
    "start": "409880",
    "end": "411120"
  },
  {
    "text": "policies or whatever it wants to be",
    "start": "411120",
    "end": "412720"
  },
  {
    "text": "whatever you want your application to do",
    "start": "412720",
    "end": "414160"
  },
  {
    "text": "you can embed these a sort of like",
    "start": "414160",
    "end": "415639"
  },
  {
    "text": "runtime injectable uh",
    "start": "415639",
    "end": "418120"
  },
  {
    "text": "configuration uh we we also use standard",
    "start": "418120",
    "end": "420240"
  },
  {
    "text": "out uh and Standard air as a logging",
    "start": "420240",
    "end": "422120"
  },
  {
    "text": "mechanism so you can just print print",
    "start": "422120",
    "end": "424599"
  },
  {
    "text": "Lin or however that is in your language",
    "start": "424599",
    "end": "426199"
  },
  {
    "text": "and you can um consume those via the",
    "start": "426199",
    "end": "428840"
  },
  {
    "text": "normal logging Frameworks so now how do",
    "start": "428840",
    "end": "431160"
  },
  {
    "text": "I actually use this so we have built we",
    "start": "431160",
    "end": "433240"
  },
  {
    "text": "have this tool called rpk which is our",
    "start": "433240",
    "end": "435520"
  },
  {
    "text": "sort of One-Stop shop for interacting",
    "start": "435520",
    "end": "437759"
  },
  {
    "text": "with red panda and built into arpk we've",
    "start": "437759",
    "end": "440280"
  },
  {
    "text": "provided the developer exper developer",
    "start": "440280",
    "end": "441960"
  },
  {
    "text": "experience so and a way to initialize",
    "start": "441960",
    "end": "444400"
  },
  {
    "text": "projects of um you know you can specify",
    "start": "444400",
    "end": "447160"
  },
  {
    "text": "what language you want you can give it a",
    "start": "447160",
    "end": "448360"
  },
  {
    "text": "name description some other metadata um",
    "start": "448360",
    "end": "450720"
  },
  {
    "text": "and then from there you get a single",
    "start": "450720",
    "end": "452199"
  },
  {
    "text": "file so this is example is using the",
    "start": "452199",
    "end": "453759"
  },
  {
    "text": "tiny go compiler to build um a transform",
    "start": "453759",
    "end": "456560"
  },
  {
    "text": "you can edit your transform uh to do",
    "start": "456560",
    "end": "458720"
  },
  {
    "text": "whatever business logic you want we'll",
    "start": "458720",
    "end": "460039"
  },
  {
    "text": "walk through sort of what that looks",
    "start": "460039",
    "end": "461080"
  },
  {
    "text": "like very briefly and then I will um and",
    "start": "461080",
    "end": "463879"
  },
  {
    "text": "then you can build it we for some more",
    "start": "463879",
    "end": "465759"
  },
  {
    "text": "obscure sort of Tool uh tool chains and",
    "start": "465759",
    "end": "468520"
  },
  {
    "text": "and compilers will embed a sort of tool",
    "start": "468520",
    "end": "470479"
  },
  {
    "text": "chain for you and download it and manage",
    "start": "470479",
    "end": "471840"
  },
  {
    "text": "it so you don't have to but then for",
    "start": "471840",
    "end": "473000"
  },
  {
    "text": "more common things we'll just use the",
    "start": "473000",
    "end": "474639"
  },
  {
    "text": "system compilers that you have installed",
    "start": "474639",
    "end": "476919"
  },
  {
    "text": "um and then lastly you can sort of you",
    "start": "476919",
    "end": "478360"
  },
  {
    "text": "can deploy these um to any sort of input",
    "start": "478360",
    "end": "480360"
  },
  {
    "text": "and output topics and we'll manage all",
    "start": "480360",
    "end": "482360"
  },
  {
    "text": "the uh Machinery around replicating this",
    "start": "482360",
    "end": "485039"
  },
  {
    "text": "safely persisting it making sure it runs",
    "start": "485039",
    "end": "487319"
  },
  {
    "text": "in all the right places within the",
    "start": "487319",
    "end": "488680"
  },
  {
    "text": "broker and within the entire",
    "start": "488680",
    "end": "491919"
  },
  {
    "text": "cluster um so here's a very short",
    "start": "491919",
    "end": "494280"
  },
  {
    "text": "snippet of code that is a sort of a a",
    "start": "494280",
    "end": "497120"
  },
  {
    "text": "hell world so to speak in in streaming",
    "start": "497120",
    "end": "499159"
  },
  {
    "text": "Transformations so um I'm going to walk",
    "start": "499159",
    "end": "501680"
  },
  {
    "text": "through this one for one if you're not",
    "start": "501680",
    "end": "503199"
  },
  {
    "text": "familiar with Go Hopefully is fine um so",
    "start": "503199",
    "end": "505520"
  },
  {
    "text": "I just want to talk about the signature",
    "start": "505520",
    "end": "506520"
  },
  {
    "text": "to start so this is sort of the",
    "start": "506520",
    "end": "507639"
  },
  {
    "text": "programming model that we expose to",
    "start": "507639",
    "end": "508919"
  },
  {
    "text": "people is that um you get a write event",
    "start": "508919",
    "end": "511440"
  },
  {
    "text": "which this means so an event has",
    "start": "511440",
    "end": "512880"
  },
  {
    "text": "happened post write we've successfully",
    "start": "512880",
    "end": "514880"
  },
  {
    "text": "confirmed as fsync to disk now you can",
    "start": "514880",
    "end": "517279"
  },
  {
    "text": "take that event it contains a record and",
    "start": "517279",
    "end": "519360"
  },
  {
    "text": "you can do some sort of transform and",
    "start": "519360",
    "end": "520719"
  },
  {
    "text": "you're going to return a set of Records",
    "start": "520719",
    "end": "522518"
  },
  {
    "text": "or an error um which is sort of like a",
    "start": "522519",
    "end": "524519"
  },
  {
    "text": "generic go pattern um but these set of",
    "start": "524519",
    "end": "526600"
  },
  {
    "text": "Records the nice thing about it is I can",
    "start": "526600",
    "end": "528120"
  },
  {
    "text": "do filters so I can do one record to",
    "start": "528120",
    "end": "530160"
  },
  {
    "text": "zero so say I want to just Fork a subset",
    "start": "530160",
    "end": "532200"
  },
  {
    "text": "of my data stream to another topic for",
    "start": "532200",
    "end": "534959"
  },
  {
    "text": "whatever reason um I can do that I can",
    "start": "534959",
    "end": "536959"
  },
  {
    "text": "also flatten uh records as well let's",
    "start": "536959",
    "end": "539040"
  },
  {
    "text": "say say I get in from some third party",
    "start": "539040",
    "end": "541000"
  },
  {
    "text": "like an an array of of Json events or",
    "start": "541000",
    "end": "543480"
  },
  {
    "text": "something and I want to flatten that so",
    "start": "543480",
    "end": "544600"
  },
  {
    "text": "it's one record per output um I could do",
    "start": "544600",
    "end": "547240"
  },
  {
    "text": "things like that as well um or also just",
    "start": "547240",
    "end": "549200"
  },
  {
    "text": "the standard sort of onetoone",
    "start": "549200",
    "end": "550560"
  },
  {
    "text": "transformations of I want to take Json",
    "start": "550560",
    "end": "552959"
  },
  {
    "text": "data in spit it out to Apache Avro",
    "start": "552959",
    "end": "555480"
  },
  {
    "text": "protuff whatever it is or if you want to",
    "start": "555480",
    "end": "557720"
  },
  {
    "text": "do like what we talked about in this",
    "start": "557720",
    "end": "559200"
  },
  {
    "text": "case study of just stripping out pii or",
    "start": "559200",
    "end": "561640"
  },
  {
    "text": "things like that so you can do any sorts",
    "start": "561640",
    "end": "563040"
  },
  {
    "text": "of uh simple Transformations so this is",
    "start": "563040",
    "end": "565160"
  },
  {
    "text": "a example of taking that uh taking some",
    "start": "565160",
    "end": "568000"
  },
  {
    "text": "XML input data",
    "start": "568000",
    "end": "569640"
  },
  {
    "text": "I I don't like working with XML I've",
    "start": "569640",
    "end": "571320"
  },
  {
    "text": "written lots of java and yeah much more",
    "start": "571320",
    "end": "574600"
  },
  {
    "text": "friendly to work with Json these days so",
    "start": "574600",
    "end": "576600"
  },
  {
    "text": "uh it takes a small go program that will",
    "start": "576600",
    "end": "578680"
  },
  {
    "text": "take the input XML data it'll unmarshal",
    "start": "578680",
    "end": "581399"
  },
  {
    "text": "it um into some sort of structure um and",
    "start": "581399",
    "end": "584519"
  },
  {
    "text": "then we'll re serialize it into Json and",
    "start": "584519",
    "end": "587200"
  },
  {
    "text": "then we'll output that copying the key",
    "start": "587200",
    "end": "589000"
  },
  {
    "text": "over a record in Kafka in parlance is a",
    "start": "589000",
    "end": "592480"
  },
  {
    "text": "basically a key in value pair um there's",
    "start": "592480",
    "end": "594959"
  },
  {
    "text": "also some headers if you for additional",
    "start": "594959",
    "end": "596760"
  },
  {
    "text": "information but for the most part",
    "start": "596760",
    "end": "597920"
  },
  {
    "text": "there's just key value pair",
    "start": "597920",
    "end": "599680"
  },
  {
    "text": "um and that's sort of a very simple",
    "start": "599680",
    "end": "601839"
  },
  {
    "text": "transformation that you can write in",
    "start": "601839",
    "end": "603399"
  },
  {
    "text": "just a few lines of code you can deploy",
    "start": "603399",
    "end": "605120"
  },
  {
    "text": "this to your red panda cluster and will",
    "start": "605120",
    "end": "607079"
  },
  {
    "text": "scale this up as many partitions that",
    "start": "607079",
    "end": "608600"
  },
  {
    "text": "you have and run it at very high high",
    "start": "608600",
    "end": "610800"
  },
  {
    "text": "scale and a High throughput um and all",
    "start": "610800",
    "end": "613040"
  },
  {
    "text": "the sort of tenants that we hold to at",
    "start": "613040",
    "end": "615160"
  },
  {
    "text": "red",
    "start": "615160",
    "end": "616040"
  },
  {
    "text": "panda um okay so that's s my sort of",
    "start": "616040",
    "end": "618200"
  },
  {
    "text": "Whirlwind talk through um sort of what",
    "start": "618200",
    "end": "621440"
  },
  {
    "text": "is data Transformations how it's",
    "start": "621440",
    "end": "622800"
  },
  {
    "text": "architected within red panda and I want",
    "start": "622800",
    "end": "624320"
  },
  {
    "text": "to dive into some of the more technical",
    "start": "624320",
    "end": "625640"
  },
  {
    "text": "challenges of embedding a web assembly",
    "start": "625640",
    "end": "627480"
  },
  {
    "text": "runtime into Panda itself so first uh we",
    "start": "627480",
    "end": "631079"
  },
  {
    "text": "going to talk about a little bit what",
    "start": "631079",
    "end": "632000"
  },
  {
    "text": "makes red panda efficient and fast you",
    "start": "632000",
    "end": "633360"
  },
  {
    "text": "know I mentioned it's a fast piece of",
    "start": "633360",
    "end": "635120"
  },
  {
    "text": "software we hold our hand we hold hang",
    "start": "635120",
    "end": "637200"
  },
  {
    "text": "our hat on um really efficient um low",
    "start": "637200",
    "end": "640399"
  },
  {
    "text": "resource utilization workloads um add",
    "start": "640399",
    "end": "643240"
  },
  {
    "text": "very high throughput and scale um so one",
    "start": "643240",
    "end": "646000"
  },
  {
    "text": "the ways that we do this is um we're a",
    "start": "646000",
    "end": "647720"
  },
  {
    "text": "thread per core architecture which is",
    "start": "647720",
    "end": "649160"
  },
  {
    "text": "something the high performance Computing",
    "start": "649160",
    "end": "650560"
  },
  {
    "text": "environment is very familiar with um but",
    "start": "650560",
    "end": "652360"
  },
  {
    "text": "we spin up one thread per each logical",
    "start": "652360",
    "end": "654800"
  },
  {
    "text": "core on your system and then we use all",
    "start": "654800",
    "end": "657279"
  },
  {
    "text": "asynchronous um system calls so whether",
    "start": "657279",
    "end": "659839"
  },
  {
    "text": "that's talking to network or dis um",
    "start": "659839",
    "end": "662000"
  },
  {
    "text": "nothing ever",
    "start": "662000",
    "end": "663079"
  },
  {
    "text": "blocks and then what we do is we run an",
    "start": "663079",
    "end": "665760"
  },
  {
    "text": "a reactor Loop uh similar to like an",
    "start": "665760",
    "end": "667600"
  },
  {
    "text": "event Loop in nodejs if you're familiar",
    "start": "667600",
    "end": "669519"
  },
  {
    "text": "with that programming Paradigm um to",
    "start": "669519",
    "end": "671399"
  },
  {
    "text": "each Loop to sort of process tasks as",
    "start": "671399",
    "end": "673240"
  },
  {
    "text": "they happen um and then we share nothing",
    "start": "673240",
    "end": "676040"
  },
  {
    "text": "in terms of memory between each of these",
    "start": "676040",
    "end": "677600"
  },
  {
    "text": "cores you can kind of think of each of",
    "start": "677600",
    "end": "678800"
  },
  {
    "text": "these cores its own logical little",
    "start": "678800",
    "end": "680200"
  },
  {
    "text": "computer and we uh take the we allocate",
    "start": "680200",
    "end": "683160"
  },
  {
    "text": "all the system memory up front um and",
    "start": "683160",
    "end": "685079"
  },
  {
    "text": "then we divide it up onto each core in",
    "start": "685079",
    "end": "686600"
  },
  {
    "text": "sort of a numa friendly sort of pattern",
    "start": "686600",
    "end": "689079"
  },
  {
    "text": "in dist distribution um and then we",
    "start": "689079",
    "end": "691320"
  },
  {
    "text": "communicate between cores um cores need",
    "start": "691320",
    "end": "693399"
  },
  {
    "text": "to talk for example Network requests may",
    "start": "693399",
    "end": "695279"
  },
  {
    "text": "come on in on core one but core two",
    "start": "695279",
    "end": "696839"
  },
  {
    "text": "needs to then um like actually process",
    "start": "696839",
    "end": "699839"
  },
  {
    "text": "the right for example um using a bunch",
    "start": "699839",
    "end": "701720"
  },
  {
    "text": "of single producer single consumer",
    "start": "701720",
    "end": "703040"
  },
  {
    "text": "message cues it sort of makes a little",
    "start": "703040",
    "end": "704600"
  },
  {
    "text": "mesh for them to talk to uh between and",
    "start": "704600",
    "end": "706800"
  },
  {
    "text": "we use a framework called sear for this",
    "start": "706800",
    "end": "708680"
  },
  {
    "text": "which is a really great high power",
    "start": "708680",
    "end": "710279"
  },
  {
    "text": "performance it's written in C++ 20",
    "start": "710279",
    "end": "711800"
  },
  {
    "text": "modern C++ which has a lot of great um",
    "start": "711800",
    "end": "713880"
  },
  {
    "text": "advantages I'll talk a little bit more",
    "start": "713880",
    "end": "715079"
  },
  {
    "text": "about but see we love SE starts it it's",
    "start": "715079",
    "end": "717320"
  },
  {
    "text": "what empowers us and is the framework of",
    "start": "717320",
    "end": "718800"
  },
  {
    "text": "what which we've built this high",
    "start": "718800",
    "end": "719720"
  },
  {
    "text": "performance message broker",
    "start": "719720",
    "end": "721279"
  },
  {
    "text": "upon so there's a little bit of",
    "start": "721279",
    "end": "723079"
  },
  {
    "text": "architecture overview and some of the",
    "start": "723079",
    "end": "724720"
  },
  {
    "text": "constraints that we uh I wanted to go",
    "start": "724720",
    "end": "726399"
  },
  {
    "text": "through some of the constraints by this",
    "start": "726399",
    "end": "727680"
  },
  {
    "text": "programming model that we sort of have",
    "start": "727680",
    "end": "728959"
  },
  {
    "text": "to apply so um we have these sort of",
    "start": "728959",
    "end": "730920"
  },
  {
    "text": "reactor Loops that I talked about so um",
    "start": "730920",
    "end": "733120"
  },
  {
    "text": "and we use async iio so um we use",
    "start": "733120",
    "end": "736120"
  },
  {
    "text": "Cooperative multitasking to sort of um",
    "start": "736120",
    "end": "739120"
  },
  {
    "text": "manage all the different tasks that are",
    "start": "739120",
    "end": "740440"
  },
  {
    "text": "happening to a single local core since",
    "start": "740440",
    "end": "742079"
  },
  {
    "text": "there's only one thread processing um a",
    "start": "742079",
    "end": "744680"
  },
  {
    "text": "a logical subset of the system and um",
    "start": "744680",
    "end": "747399"
  },
  {
    "text": "what this means is that each task is",
    "start": "747399",
    "end": "749480"
  },
  {
    "text": "responsible for giving up um its share",
    "start": "749480",
    "end": "753360"
  },
  {
    "text": "of the CPU um when after some period of",
    "start": "753360",
    "end": "756959"
  },
  {
    "text": "time so a failure to do this is known as",
    "start": "756959",
    "end": "758920"
  },
  {
    "text": "a what we call a reactor stall so the",
    "start": "758920",
    "end": "761279"
  },
  {
    "text": "important thing about these reactor",
    "start": "761279",
    "end": "762360"
  },
  {
    "text": "stalls is that they impact your P99",
    "start": "762360",
    "end": "764600"
  },
  {
    "text": "latencies which we care a lot about",
    "start": "764600",
    "end": "765959"
  },
  {
    "text": "keeping those very low so for example we",
    "start": "765959",
    "end": "768000"
  },
  {
    "text": "only have one core processing let's say",
    "start": "768000",
    "end": "769959"
  },
  {
    "text": "10 Network uh operations if one of those",
    "start": "769959",
    "end": "772760"
  },
  {
    "text": "operations takes you know 50",
    "start": "772760",
    "end": "774839"
  },
  {
    "text": "milliseconds for example to do some work",
    "start": "774839",
    "end": "776880"
  },
  {
    "text": "then that means there's 50 milliseconds",
    "start": "776880",
    "end": "778160"
  },
  {
    "text": "where those other network connections",
    "start": "778160",
    "end": "779600"
  },
  {
    "text": "nothing can happen you can't process IO",
    "start": "779600",
    "end": "781800"
  },
  {
    "text": "you can't do work for them so what we",
    "start": "781800",
    "end": "783800"
  },
  {
    "text": "need to do is any long computations we",
    "start": "783800",
    "end": "785639"
  },
  {
    "text": "need to break up to prevent blocking um",
    "start": "785639",
    "end": "788079"
  },
  {
    "text": "IO from happening on other workloads and",
    "start": "788079",
    "end": "790639"
  },
  {
    "text": "make sure they're shared scheduling In",
    "start": "790639",
    "end": "793040"
  },
  {
    "text": "fairness um so we heavily use stack",
    "start": "793040",
    "end": "796800"
  },
  {
    "text": "stackless Co routines to do this and",
    "start": "796800",
    "end": "798160"
  },
  {
    "text": "just for a sort of a mental model for us",
    "start": "798160",
    "end": "799720"
  },
  {
    "text": "a long task our budget that we use to",
    "start": "799720",
    "end": "802279"
  },
  {
    "text": "execute a single task is about half a",
    "start": "802279",
    "end": "803959"
  },
  {
    "text": "millisecond so 500 microseconds is our",
    "start": "803959",
    "end": "806279"
  },
  {
    "text": "policy for about how long a task should",
    "start": "806279",
    "end": "808040"
  },
  {
    "text": "go before it needs yield control so we",
    "start": "808040",
    "end": "810399"
  },
  {
    "text": "have lots of different ways of doing",
    "start": "810399",
    "end": "811519"
  },
  {
    "text": "this like I said stack uh stackless co-",
    "start": "811519",
    "end": "813399"
  },
  {
    "text": "routines and C++ 20 is a really uh nice",
    "start": "813399",
    "end": "816040"
  },
  {
    "text": "programming model for us to do this so",
    "start": "816040",
    "end": "817720"
  },
  {
    "text": "here's a simple example of taking some",
    "start": "817720",
    "end": "819600"
  },
  {
    "text": "data off an input stream let's say from",
    "start": "819600",
    "end": "821360"
  },
  {
    "text": "Network or even disk and just reading",
    "start": "821360",
    "end": "823279"
  },
  {
    "text": "some data now in a normal sort of system",
    "start": "823279",
    "end": "825959"
  },
  {
    "text": "you may use blocking iio and you'll just",
    "start": "825959",
    "end": "827320"
  },
  {
    "text": "have a while loop that kind of runs and",
    "start": "827320",
    "end": "828800"
  },
  {
    "text": "it sort of eats that thread while it's",
    "start": "828800",
    "end": "830560"
  },
  {
    "text": "processing and reading data right so we",
    "start": "830560",
    "end": "832519"
  },
  {
    "text": "don't we don't use this Paradigm so what",
    "start": "832519",
    "end": "835000"
  },
  {
    "text": "we use as co- routines you can kind of",
    "start": "835000",
    "end": "836759"
  },
  {
    "text": "see this co- awaits keyword here is a in",
    "start": "836759",
    "end": "840240"
  },
  {
    "text": "uh inserts a scheduling point and tells",
    "start": "840240",
    "end": "842040"
  },
  {
    "text": "the scheduler for sear of don't resume",
    "start": "842040",
    "end": "844600"
  },
  {
    "text": "this code until um this event has",
    "start": "844600",
    "end": "846880"
  },
  {
    "text": "finished so if you're familiar with",
    "start": "846880",
    "end": "848120"
  },
  {
    "text": "node.js programming this is sort of the",
    "start": "848120",
    "end": "849800"
  },
  {
    "text": "async await sort of Paradigm or if",
    "start": "849800",
    "end": "852040"
  },
  {
    "text": "you're familiar with rust even it's sort",
    "start": "852040",
    "end": "853959"
  },
  {
    "text": "of the same async A8 sort of model",
    "start": "853959",
    "end": "855839"
  },
  {
    "text": "although Tokyo for rust uses a work",
    "start": "855839",
    "end": "858040"
  },
  {
    "text": "stealing um sort of scheduler which we",
    "start": "858040",
    "end": "859959"
  },
  {
    "text": "don't we don't use um everything is",
    "start": "859959",
    "end": "861720"
  },
  {
    "text": "locked onto a single core so it's of",
    "start": "861720",
    "end": "863959"
  },
  {
    "text": "utmost importance that we yield CPU",
    "start": "863959",
    "end": "865959"
  },
  {
    "text": "control because we don't allow any",
    "start": "865959",
    "end": "867680"
  },
  {
    "text": "sharing",
    "start": "867680",
    "end": "869440"
  },
  {
    "text": "um so that's sort of the the Paradigm",
    "start": "869440",
    "end": "871399"
  },
  {
    "text": "here so now how do we prevent as we're",
    "start": "871399",
    "end": "872880"
  },
  {
    "text": "embedding a a web assembly um runtime",
    "start": "872880",
    "end": "875839"
  },
  {
    "text": "how do we prevent that runtime from",
    "start": "875839",
    "end": "877440"
  },
  {
    "text": "stalling and hogging up the CPU for a",
    "start": "877440",
    "end": "879160"
  },
  {
    "text": "second let's say you have a a transform",
    "start": "879160",
    "end": "880720"
  },
  {
    "text": "that's relatively expensive and takes",
    "start": "880720",
    "end": "882360"
  },
  {
    "text": "you know let's say 50 milliseconds of",
    "start": "882360",
    "end": "884399"
  },
  {
    "text": "compute I I think the average developer",
    "start": "884399",
    "end": "886399"
  },
  {
    "text": "probably doesn't blink or at that long",
    "start": "886399",
    "end": "888399"
  },
  {
    "text": "of a computation but for us within red",
    "start": "888399",
    "end": "890240"
  },
  {
    "text": "panda we we can't allow that um because",
    "start": "890240",
    "end": "892199"
  },
  {
    "text": "that means there's a ton of requests now",
    "start": "892199",
    "end": "894040"
  },
  {
    "text": "that just encountered a 50 millisecond",
    "start": "894040",
    "end": "896600"
  },
  {
    "text": "latency Spike so how we do this within",
    "start": "896600",
    "end": "899360"
  },
  {
    "text": "red panda is we use uh stack full Co",
    "start": "899360",
    "end": "901639"
  },
  {
    "text": "routines um stack switching so we run",
    "start": "901639",
    "end": "904480"
  },
  {
    "text": "all of red panda in the sort of",
    "start": "904480",
    "end": "906199"
  },
  {
    "text": "stackless go routines within red panda",
    "start": "906199",
    "end": "908600"
  },
  {
    "text": "as normal the event Loop runs um and",
    "start": "908600",
    "end": "911120"
  },
  {
    "text": "then within the web assembly VM we",
    "start": "911120",
    "end": "912920"
  },
  {
    "text": "allocate a separate stack to execute",
    "start": "912920",
    "end": "914639"
  },
  {
    "text": "that on so that allows us to swap back",
    "start": "914639",
    "end": "916360"
  },
  {
    "text": "and forth between executing the VM and",
    "start": "916360",
    "end": "918560"
  },
  {
    "text": "ex executing our actual code itself um",
    "start": "918560",
    "end": "922079"
  },
  {
    "text": "and and these the the advantage of using",
    "start": "922079",
    "end": "924920"
  },
  {
    "text": "um these sort of Stack full code",
    "start": "924920",
    "end": "926240"
  },
  {
    "text": "routines over a actual like spinning up",
    "start": "926240",
    "end": "928279"
  },
  {
    "text": "a separate thread for the web assembly",
    "start": "928279",
    "end": "929519"
  },
  {
    "text": "VM is these contact switches are very",
    "start": "929519",
    "end": "931000"
  },
  {
    "text": "cheap most of the premise of red panda",
    "start": "931000",
    "end": "933240"
  },
  {
    "text": "allows us to do kernel bypass for very",
    "start": "933240",
    "end": "935519"
  },
  {
    "text": "fast and efficient processing so these",
    "start": "935519",
    "end": "938120"
  },
  {
    "text": "uh these kernel switches or these excuse",
    "start": "938120",
    "end": "940639"
  },
  {
    "text": "me these stack switches only take about",
    "start": "940639",
    "end": "942079"
  },
  {
    "text": "nine uh nine CPU Cycles on sort of",
    "start": "942079",
    "end": "944319"
  },
  {
    "text": "modern machines um so we sort of",
    "start": "944319",
    "end": "946600"
  },
  {
    "text": "allocate these separate stacks and then",
    "start": "946600",
    "end": "948240"
  },
  {
    "text": "the nice thing is a lot of these uh very",
    "start": "948240",
    "end": "949959"
  },
  {
    "text": "Advanced um web assembly VMS such as",
    "start": "949959",
    "end": "952160"
  },
  {
    "text": "wasm time allow you to inject into the",
    "start": "952160",
    "end": "954480"
  },
  {
    "text": "compiled code uh sort of instruction",
    "start": "954480",
    "end": "956839"
  },
  {
    "text": "counts so you can say after X number of",
    "start": "956839",
    "end": "958759"
  },
  {
    "text": "instructions yield control um VM and",
    "start": "958759",
    "end": "962480"
  },
  {
    "text": "switch back to my stack so that I can",
    "start": "962480",
    "end": "963959"
  },
  {
    "text": "run we've also been able to do this sort",
    "start": "963959",
    "end": "965839"
  },
  {
    "text": "same model in other Frameworks that",
    "start": "965839",
    "end": "967480"
  },
  {
    "text": "don't support um the native stack",
    "start": "967480",
    "end": "969399"
  },
  {
    "text": "switching as well you can do stack",
    "start": "969399",
    "end": "970839"
  },
  {
    "text": "switching sort of in user land so to",
    "start": "970839",
    "end": "972319"
  },
  {
    "text": "speak as well um so that's sort of that",
    "start": "972319",
    "end": "975880"
  },
  {
    "text": "that's how we prevent these stalls is",
    "start": "975880",
    "end": "977800"
  },
  {
    "text": "what we do is we we'll run our web",
    "start": "977800",
    "end": "980360"
  },
  {
    "text": "assembly VM for you know our task budget",
    "start": "980360",
    "end": "983120"
  },
  {
    "text": "and then we'll we'll swap it out for",
    "start": "983120",
    "end": "985160"
  },
  {
    "text": "running the actual like client IO and",
    "start": "985160",
    "end": "987160"
  },
  {
    "text": "other sort of important information",
    "start": "987160",
    "end": "989360"
  },
  {
    "text": "important task the broker needs to do um",
    "start": "989360",
    "end": "991360"
  },
  {
    "text": "this also allows us to do sort of I",
    "start": "991360",
    "end": "992720"
  },
  {
    "text": "talked about this sort of message",
    "start": "992720",
    "end": "994079"
  },
  {
    "text": "passing model this allows us to use that",
    "start": "994079",
    "end": "996079"
  },
  {
    "text": "within the VM as well so there are",
    "start": "996079",
    "end": "998040"
  },
  {
    "text": "certain host calls that we expose within",
    "start": "998040",
    "end": "999720"
  },
  {
    "text": "red panda in our sdks to be able to read",
    "start": "999720",
    "end": "1002120"
  },
  {
    "text": "data on uh different cores so for",
    "start": "1002120",
    "end": "1003880"
  },
  {
    "text": "example some of our data is sharded to",
    "start": "1003880",
    "end": "1005399"
  },
  {
    "text": "every core for memory reasons um because",
    "start": "1005399",
    "end": "1007600"
  },
  {
    "text": "we don't have a ton of memory on a",
    "start": "1007600",
    "end": "1008560"
  },
  {
    "text": "single core so it may be that there's a",
    "start": "1008560",
    "end": "1010440"
  },
  {
    "text": "transform running on core one that needs",
    "start": "1010440",
    "end": "1011839"
  },
  {
    "text": "to go grab data from Core 2 so what we",
    "start": "1011839",
    "end": "1013759"
  },
  {
    "text": "do with the stack switching is we're",
    "start": "1013759",
    "end": "1015000"
  },
  {
    "text": "able to uh switch out the stack R and",
    "start": "1015000",
    "end": "1018120"
  },
  {
    "text": "run other sorts of computation while um",
    "start": "1018120",
    "end": "1021959"
  },
  {
    "text": "there's a a uh message in flight to talk",
    "start": "1021959",
    "end": "1025400"
  },
  {
    "text": "to Core 2 get the information at need",
    "start": "1025400",
    "end": "1027120"
  },
  {
    "text": "and bring it back to Core 1 so that we",
    "start": "1027120",
    "end": "1028558"
  },
  {
    "text": "can then copy it into the uh web",
    "start": "1028559",
    "end": "1030600"
  },
  {
    "text": "assembly",
    "start": "1030600",
    "end": "1032640"
  },
  {
    "text": "VM U next I want to talk so that was",
    "start": "1032640",
    "end": "1034640"
  },
  {
    "text": "sort of an overview of memory and some",
    "start": "1034640",
    "end": "1036280"
  },
  {
    "text": "of the things there I want to talk a",
    "start": "1036280",
    "end": "1037319"
  },
  {
    "text": "little bit about uh or excuse me that",
    "start": "1037319",
    "end": "1038880"
  },
  {
    "text": "was talking about CPU I want to not talk",
    "start": "1038880",
    "end": "1040199"
  },
  {
    "text": "to memory talk about memory and some of",
    "start": "1040199",
    "end": "1041678"
  },
  {
    "text": "the constraints here so I talked about",
    "start": "1041679",
    "end": "1042959"
  },
  {
    "text": "each core has its own equal share of",
    "start": "1042959",
    "end": "1044558"
  },
  {
    "text": "memory on Startup there's a buddy",
    "start": "1044559",
    "end": "1046079"
  },
  {
    "text": "alcator we run on each Shard um so",
    "start": "1046079",
    "end": "1047959"
  },
  {
    "text": "there's no synchronization of memory",
    "start": "1047959",
    "end": "1049600"
  },
  {
    "text": "between shards at all um we also don't",
    "start": "1049600",
    "end": "1051760"
  },
  {
    "text": "use a page cast for any of our IO it's a",
    "start": "1051760",
    "end": "1053880"
  },
  {
    "text": "sort of a separate detail um but we do",
    "start": "1053880",
    "end": "1056080"
  },
  {
    "text": "all of our caching within the",
    "start": "1056080",
    "end": "1057400"
  },
  {
    "text": "application we don't rely on the colonel",
    "start": "1057400",
    "end": "1058720"
  },
  {
    "text": "to do that for us we use dma rights and",
    "start": "1058720",
    "end": "1060360"
  },
  {
    "text": "things like that um so that you know we",
    "start": "1060360",
    "end": "1062600"
  },
  {
    "text": "can get the optimal caching strategy for",
    "start": "1062600",
    "end": "1065000"
  },
  {
    "text": "our application not the generic one for",
    "start": "1065000",
    "end": "1066600"
  },
  {
    "text": "the kernel um one of these things about",
    "start": "1066600",
    "end": "1068640"
  },
  {
    "text": "this model is since we allocate",
    "start": "1068640",
    "end": "1070039"
  },
  {
    "text": "everything and you have these fixed",
    "start": "1070039",
    "end": "1071039"
  },
  {
    "text": "pools up front is the allocation can",
    "start": "1071039",
    "end": "1072840"
  },
  {
    "text": "fail of memory uh during the execution",
    "start": "1072840",
    "end": "1075159"
  },
  {
    "text": "of our program normally if you Malo",
    "start": "1075159",
    "end": "1076880"
  },
  {
    "text": "stuff in a normal C program the the OS",
    "start": "1076880",
    "end": "1079760"
  },
  {
    "text": "will sort of hand out virtual memory",
    "start": "1079760",
    "end": "1081520"
  },
  {
    "text": "until it sort of runs out um or it'll",
    "start": "1081520",
    "end": "1083640"
  },
  {
    "text": "swap or things like that so um we don't",
    "start": "1083640",
    "end": "1085679"
  },
  {
    "text": "allow that mostly because those are end",
    "start": "1085679",
    "end": "1086880"
  },
  {
    "text": "up being like sort of soft fa soft",
    "start": "1086880",
    "end": "1088520"
  },
  {
    "text": "failure scenarios in your applications",
    "start": "1088520",
    "end": "1090159"
  },
  {
    "text": "where um you're you're swapping memory",
    "start": "1090159",
    "end": "1092640"
  },
  {
    "text": "and performance starts to tank so using",
    "start": "1092640",
    "end": "1094720"
  },
  {
    "text": "this sort of constrained memory model",
    "start": "1094720",
    "end": "1096440"
  },
  {
    "text": "allows us to make sure we're we're um",
    "start": "1096440",
    "end": "1099080"
  },
  {
    "text": "going very fast so we need to reforce",
    "start": "1099080",
    "end": "1101919"
  },
  {
    "text": "web assembly to also respect these",
    "start": "1101919",
    "end": "1103640"
  },
  {
    "text": "constraints um web assembly defines a",
    "start": "1103640",
    "end": "1105760"
  },
  {
    "text": "linear memory um as sort of one large",
    "start": "1105760",
    "end": "1108480"
  },
  {
    "text": "continuous address space and this is",
    "start": "1108480",
    "end": "1110320"
  },
  {
    "text": "sort of for performance reasons um and",
    "start": "1110320",
    "end": "1112480"
  },
  {
    "text": "things like that so um and there's also",
    "start": "1112480",
    "end": "1114320"
  },
  {
    "text": "another structure called a table that",
    "start": "1114320",
    "end": "1115919"
  },
  {
    "text": "stores things like references to",
    "start": "1115919",
    "end": "1117799"
  },
  {
    "text": "functions and things like that so both",
    "start": "1117799",
    "end": "1119039"
  },
  {
    "text": "of these are are potentially large",
    "start": "1119039",
    "end": "1120960"
  },
  {
    "text": "contiguous chunks of memory that as red",
    "start": "1120960",
    "end": "1122799"
  },
  {
    "text": "panda runs um memory fragmentation",
    "start": "1122799",
    "end": "1125159"
  },
  {
    "text": "builds up we may not be able to allocate",
    "start": "1125159",
    "end": "1126559"
  },
  {
    "text": "those large structures as we boot up VM",
    "start": "1126559",
    "end": "1128360"
  },
  {
    "text": "so you don't want to deploy um a web",
    "start": "1128360",
    "end": "1130559"
  },
  {
    "text": "assembly function and then all of a",
    "start": "1130559",
    "end": "1132200"
  },
  {
    "text": "sudden not have enough memory to do that",
    "start": "1132200",
    "end": "1133919"
  },
  {
    "text": "and that either ooms your uh red panda",
    "start": "1133919",
    "end": "1136000"
  },
  {
    "text": "broker or something else so what we do",
    "start": "1136000",
    "end": "1137480"
  },
  {
    "text": "is um for linear memory these are large",
    "start": "1137480",
    "end": "1139200"
  },
  {
    "text": "pools of memory we have a budget we sort",
    "start": "1139200",
    "end": "1141280"
  },
  {
    "text": "of have a budget of like under this",
    "start": "1141280",
    "end": "1143200"
  },
  {
    "text": "fixed amount of memory we can always say",
    "start": "1143200",
    "end": "1144720"
  },
  {
    "text": "we can allocate um a contiguous chunk of",
    "start": "1144720",
    "end": "1148360"
  },
  {
    "text": "anything over that um our strategy is to",
    "start": "1148360",
    "end": "1151080"
  },
  {
    "text": "reserve a pool of memory up front so",
    "start": "1151080",
    "end": "1152679"
  },
  {
    "text": "sort of the Computing model is since",
    "start": "1152679",
    "end": "1153840"
  },
  {
    "text": "you're now sharing the Computing model",
    "start": "1153840",
    "end": "1155799"
  },
  {
    "text": "that we use in red panda when you're",
    "start": "1155799",
    "end": "1157240"
  },
  {
    "text": "embedding your own functions is you have",
    "start": "1157240",
    "end": "1159280"
  },
  {
    "text": "to carve out how much memory you want",
    "start": "1159280",
    "end": "1160919"
  },
  {
    "text": "that we can allocate for the VM so on",
    "start": "1160919",
    "end": "1163200"
  },
  {
    "text": "Startup each core sort of reserves some",
    "start": "1163200",
    "end": "1165080"
  },
  {
    "text": "you know few megabytes maybe multiple",
    "start": "1165080",
    "end": "1167080"
  },
  {
    "text": "megabytes if you're running something",
    "start": "1167080",
    "end": "1168120"
  },
  {
    "text": "like like JavaScript um on each core so",
    "start": "1168120",
    "end": "1170799"
  },
  {
    "text": "that we can then use that memory that's",
    "start": "1170799",
    "end": "1172799"
  },
  {
    "text": "pre-allocated um and isn't subject to",
    "start": "1172799",
    "end": "1175080"
  },
  {
    "text": "fragmentation for the VMS itself and",
    "start": "1175080",
    "end": "1177200"
  },
  {
    "text": "then for the tables themselves those are",
    "start": "1177200",
    "end": "1178760"
  },
  {
    "text": "usually fairly small so we just limit",
    "start": "1178760",
    "end": "1180159"
  },
  {
    "text": "that to our maximum allocation size that",
    "start": "1180159",
    "end": "1181760"
  },
  {
    "text": "we try to fit everything into um awesome",
    "start": "1181760",
    "end": "1184559"
  },
  {
    "text": "so takeaways so red panda can help you",
    "start": "1184559",
    "end": "1186760"
  },
  {
    "text": "transform your data directly into broker",
    "start": "1186760",
    "end": "1188600"
  },
  {
    "text": "message broker at a high performance way",
    "start": "1188600",
    "end": "1190720"
  },
  {
    "text": "um you can you know use your whatever",
    "start": "1190720",
    "end": "1193200"
  },
  {
    "text": "language that compiles to web assembly",
    "start": "1193200",
    "end": "1194600"
  },
  {
    "text": "to you to use this sort of simple",
    "start": "1194600",
    "end": "1196480"
  },
  {
    "text": "programming model that we've ex we've uh",
    "start": "1196480",
    "end": "1198960"
  },
  {
    "text": "exposed web assembly itself is friendly",
    "start": "1198960",
    "end": "1201559"
  },
  {
    "text": "to thread Pere architectures and sort of",
    "start": "1201559",
    "end": "1203480"
  },
  {
    "text": "these more advanced EMB better",
    "start": "1203480",
    "end": "1204760"
  },
  {
    "text": "requirements and then web assembly run",
    "start": "1204760",
    "end": "1206880"
  },
  {
    "text": "times itself have yeah support these",
    "start": "1206880",
    "end": "1208480"
  },
  {
    "text": "sort of advanced use cases of thread per",
    "start": "1208480",
    "end": "1210200"
  },
  {
    "text": "core or limited memory usage um thanks",
    "start": "1210200",
    "end": "1213280"
  },
  {
    "text": "for joining I'd love to take some",
    "start": "1213280",
    "end": "1214480"
  },
  {
    "text": "questions we're going to be in the main",
    "start": "1214480",
    "end": "1216200"
  },
  {
    "text": "section at Booth f-13 if you want to",
    "start": "1216200",
    "end": "1217919"
  },
  {
    "text": "talk more um there's a link for feedback",
    "start": "1217919",
    "end": "1220320"
  },
  {
    "text": "I would love to hear your feedback on",
    "start": "1220320",
    "end": "1221760"
  },
  {
    "text": "the session um the talk the content um",
    "start": "1221760",
    "end": "1224320"
  },
  {
    "text": "and also if you're interested we are",
    "start": "1224320",
    "end": "1225720"
  },
  {
    "text": "hiring as well on my team and other",
    "start": "1225720",
    "end": "1227679"
  },
  {
    "text": "teams um within red panda so if this",
    "start": "1227679",
    "end": "1229880"
  },
  {
    "text": "sounds like an exciting sort of space",
    "start": "1229880",
    "end": "1231640"
  },
  {
    "text": "for you um I'm happy to talk talk more",
    "start": "1231640",
    "end": "1234240"
  },
  {
    "text": "um thank you any",
    "start": "1234240",
    "end": "1237320"
  },
  {
    "text": "[Applause]",
    "start": "1238500",
    "end": "1243819"
  },
  {
    "text": "questions I've got a question for you",
    "start": "1245840",
    "end": "1248280"
  },
  {
    "text": "you know I think one of the things that",
    "start": "1248280",
    "end": "1249799"
  },
  {
    "text": "really uh you guys have crushed is um",
    "start": "1249799",
    "end": "1252440"
  },
  {
    "text": "making sure that you're always zero copy",
    "start": "1252440",
    "end": "1254280"
  },
  {
    "text": "you know and uh just really fast",
    "start": "1254280",
    "end": "1255960"
  },
  {
    "text": "transformations of data um what's the",
    "start": "1255960",
    "end": "1258240"
  },
  {
    "text": "performance impact um for the inside you",
    "start": "1258240",
    "end": "1260600"
  },
  {
    "text": "know inline web assembly Transformations",
    "start": "1260600",
    "end": "1262919"
  },
  {
    "text": "um right now you're you're pulling the",
    "start": "1262919",
    "end": "1264679"
  },
  {
    "text": "data into web assembly processing and",
    "start": "1264679",
    "end": "1266400"
  },
  {
    "text": "then coming back out um soon you'll be",
    "start": "1266400",
    "end": "1268440"
  },
  {
    "text": "able to keep it outside I believe um uh",
    "start": "1268440",
    "end": "1270840"
  },
  {
    "text": "to the guest house barrier but what what",
    "start": "1270840",
    "end": "1272880"
  },
  {
    "text": "performance are you seeing yeah so right",
    "start": "1272880",
    "end": "1275120"
  },
  {
    "text": "now you have to copy every record into",
    "start": "1275120",
    "end": "1277200"
  },
  {
    "text": "the VM and record out we do this on a",
    "start": "1277200",
    "end": "1278880"
  },
  {
    "text": "per record basis for like lower memory",
    "start": "1278880",
    "end": "1280919"
  },
  {
    "text": "overhead um but we've been able to push",
    "start": "1280919",
    "end": "1283080"
  },
  {
    "text": "like a a few megabytes in our sort of uh",
    "start": "1283080",
    "end": "1286039"
  },
  {
    "text": "constrained uh environment per core per",
    "start": "1286039",
    "end": "1288760"
  },
  {
    "text": "second um with web assembly and I I've",
    "start": "1288760",
    "end": "1291919"
  },
  {
    "text": "done some benchmarking where we've been",
    "start": "1291919",
    "end": "1293120"
  },
  {
    "text": "able to get over a gigabyte a second on",
    "start": "1293120",
    "end": "1294520"
  },
  {
    "text": "larger a few like medium siiz clusters",
    "start": "1294520",
    "end": "1297320"
  },
  {
    "text": "um pushing through the web assembly VM",
    "start": "1297320",
    "end": "1299559"
  },
  {
    "text": "so that's sort of the uh I think power",
    "start": "1299559",
    "end": "1301400"
  },
  {
    "text": "of sort of just in time compilation and",
    "start": "1301400",
    "end": "1303520"
  },
  {
    "text": "um there's a lot of other things I",
    "start": "1303520",
    "end": "1304679"
  },
  {
    "text": "didn't talk about like some there's a",
    "start": "1304679",
    "end": "1306000"
  },
  {
    "text": "lot of tricks that web assembly run",
    "start": "1306000",
    "end": "1307520"
  },
  {
    "text": "times use to prevent um bounds checking",
    "start": "1307520",
    "end": "1310039"
  },
  {
    "text": "for all the memory accesses by using",
    "start": "1310039",
    "end": "1311600"
  },
  {
    "text": "some virtual memory tricks we can't",
    "start": "1311600",
    "end": "1312840"
  },
  {
    "text": "necessarily do that in our environment",
    "start": "1312840",
    "end": "1314279"
  },
  {
    "text": "so we have to enable a lot of the extra",
    "start": "1314279",
    "end": "1316120"
  },
  {
    "text": "security steps that um advance VMS have",
    "start": "1316120",
    "end": "1318559"
  },
  {
    "text": "removed in in more generic contexts um",
    "start": "1318559",
    "end": "1321640"
  },
  {
    "text": "just so it works for our embedding but",
    "start": "1321640",
    "end": "1322960"
  },
  {
    "text": "we're still able to push the performance",
    "start": "1322960",
    "end": "1324120"
  },
  {
    "text": "envelope quite",
    "start": "1324120",
    "end": "1325400"
  },
  {
    "text": "well great other questions here in the",
    "start": "1325400",
    "end": "1327720"
  },
  {
    "text": "back",
    "start": "1327720",
    "end": "1329840"
  },
  {
    "text": "Sean thanks all right so I have a bit of",
    "start": "1332760",
    "end": "1335480"
  },
  {
    "text": "a technical question um one of the",
    "start": "1335480",
    "end": "1337520"
  },
  {
    "text": "performance bottlenecks in really highly",
    "start": "1337520",
    "end": "1339679"
  },
  {
    "text": "parallel systems with web assembly in",
    "start": "1339679",
    "end": "1341400"
  },
  {
    "text": "the runtime side can be in how you use",
    "start": "1341400",
    "end": "1344919"
  },
  {
    "text": "the web assembly store and how you use",
    "start": "1344919",
    "end": "1346799"
  },
  {
    "text": "the Linker for example in wasm time so",
    "start": "1346799",
    "end": "1349320"
  },
  {
    "text": "there are cases where are there cases",
    "start": "1349320",
    "end": "1351440"
  },
  {
    "text": "where you're like spinning up a new",
    "start": "1351440",
    "end": "1352760"
  },
  {
    "text": "Linker for every transformation that's",
    "start": "1352760",
    "end": "1355240"
  },
  {
    "text": "being applied or you know like like what",
    "start": "1355240",
    "end": "1357279"
  },
  {
    "text": "does the parallelism model actually look",
    "start": "1357279",
    "end": "1359000"
  },
  {
    "text": "like in the in the runtime con yeah yeah",
    "start": "1359000",
    "end": "1361240"
  },
  {
    "text": "that's that's a great question we've",
    "start": "1361240",
    "end": "1362679"
  },
  {
    "text": "done numerous iterations of our ABI to",
    "start": "1362679",
    "end": "1365120"
  },
  {
    "text": "sort of like figure out what the right",
    "start": "1365120",
    "end": "1366400"
  },
  {
    "text": "model is so we actually only compose we",
    "start": "1366400",
    "end": "1368480"
  },
  {
    "text": "generate a single instance of uh of a",
    "start": "1368480",
    "end": "1372000"
  },
  {
    "text": "module within WM time on per so one per",
    "start": "1372000",
    "end": "1375600"
  },
  {
    "text": "process so we do one and then what we do",
    "start": "1375600",
    "end": "1377799"
  },
  {
    "text": "is is every core then gets a not a copy",
    "start": "1377799",
    "end": "1380120"
  },
  {
    "text": "of that but uh a a reference to that",
    "start": "1380120",
    "end": "1383000"
  },
  {
    "text": "module and then at runtime we look up",
    "start": "1383000",
    "end": "1385240"
  },
  {
    "text": "the host data through the embedding to",
    "start": "1385240",
    "end": "1387880"
  },
  {
    "text": "um make sure we're grabbing information",
    "start": "1387880",
    "end": "1389640"
  },
  {
    "text": "for that instance of the VM um in",
    "start": "1389640",
    "end": "1392200"
  },
  {
    "text": "particular if that makes sense so",
    "start": "1392200",
    "end": "1393200"
  },
  {
    "text": "there's a way to like within a store",
    "start": "1393200",
    "end": "1395120"
  },
  {
    "text": "embed very spe information and one of",
    "start": "1395120",
    "end": "1397360"
  },
  {
    "text": "the pieces of information we embed is",
    "start": "1397360",
    "end": "1399640"
  },
  {
    "text": "what the underlying what we call engine",
    "start": "1399640",
    "end": "1402039"
  },
  {
    "text": "is that has the actual records being",
    "start": "1402039",
    "end": "1403840"
  },
  {
    "text": "pushed through for metadata and things",
    "start": "1403840",
    "end": "1405159"
  },
  {
    "text": "so we only have to compile a module once",
    "start": "1405159",
    "end": "1406760"
  },
  {
    "text": "for an entire broker based on our ABI",
    "start": "1406760",
    "end": "1408880"
  },
  {
    "text": "and how we sort of structured um our",
    "start": "1408880",
    "end": "1410640"
  },
  {
    "text": "embedding okay that makes sense",
    "start": "1410640",
    "end": "1412320"
  },
  {
    "text": "appreciate it yeah of course there's a",
    "start": "1412320",
    "end": "1414520"
  },
  {
    "text": "question back",
    "start": "1414520",
    "end": "1416960"
  },
  {
    "text": "here uh hi great talk I found your use",
    "start": "1417240",
    "end": "1421000"
  },
  {
    "text": "case kind of fascinating being able to",
    "start": "1421000",
    "end": "1422640"
  },
  {
    "text": "like strip up you know privacy sensitive",
    "start": "1422640",
    "end": "1424679"
  },
  {
    "text": "data and offer sort of like two copies",
    "start": "1424679",
    "end": "1426320"
  },
  {
    "text": "of the record in different logs um I'm",
    "start": "1426320",
    "end": "1428320"
  },
  {
    "text": "wondering first off is that",
    "start": "1428320",
    "end": "1429960"
  },
  {
    "text": "transactional um and if so how does that",
    "start": "1429960",
    "end": "1432840"
  },
  {
    "text": "handle the the case where like the web",
    "start": "1432840",
    "end": "1434960"
  },
  {
    "text": "assembly runtime you know the code in",
    "start": "1434960",
    "end": "1436760"
  },
  {
    "text": "there fails and like throws an exception",
    "start": "1436760",
    "end": "1438840"
  },
  {
    "text": "or doesn't deliver a record and what",
    "start": "1438840",
    "end": "1441039"
  },
  {
    "text": "does that mean does that like the raft",
    "start": "1441039",
    "end": "1442960"
  },
  {
    "text": "leader reject the record or do you get",
    "start": "1442960",
    "end": "1445480"
  },
  {
    "text": "like how does that work yeah no that's a",
    "start": "1445480",
    "end": "1447000"
  },
  {
    "text": "great question so um first of all is um",
    "start": "1447000",
    "end": "1450000"
  },
  {
    "text": "we we support at at most or sorry at",
    "start": "1450000",
    "end": "1452799"
  },
  {
    "text": "least once delivery semantics we don't",
    "start": "1452799",
    "end": "1454720"
  },
  {
    "text": "have exactly once yet we want to get",
    "start": "1454720",
    "end": "1456480"
  },
  {
    "text": "there there's some ideas we have to get",
    "start": "1456480",
    "end": "1458039"
  },
  {
    "text": "there but they larger system changes so",
    "start": "1458039",
    "end": "1459960"
  },
  {
    "text": "uh it's fairly common in Kafka to have",
    "start": "1459960",
    "end": "1461880"
  },
  {
    "text": "at least at least once processing so",
    "start": "1461880",
    "end": "1463400"
  },
  {
    "text": "that's sort of the model we've rolled",
    "start": "1463400",
    "end": "1464760"
  },
  {
    "text": "out at first um with that model and the",
    "start": "1464760",
    "end": "1467159"
  },
  {
    "text": "other thing is mentioned with the raft",
    "start": "1467159",
    "end": "1468679"
  },
  {
    "text": "leader um these are all an asynchronous",
    "start": "1468679",
    "end": "1470799"
  },
  {
    "text": "sort of process so we don't ever block",
    "start": "1470799",
    "end": "1472600"
  },
  {
    "text": "incoming rights and throughput from",
    "start": "1472600",
    "end": "1474760"
  },
  {
    "text": "clients directly to process these there",
    "start": "1474760",
    "end": "1476799"
  },
  {
    "text": "are ideas that we want to do this later",
    "start": "1476799",
    "end": "1478720"
  },
  {
    "text": "on um to be able to validate payloads",
    "start": "1478720",
    "end": "1481279"
  },
  {
    "text": "and things like that but for now this is",
    "start": "1481279",
    "end": "1482480"
  },
  {
    "text": "sort of you can think of it as like a",
    "start": "1482480",
    "end": "1483399"
  },
  {
    "text": "background process running in within the",
    "start": "1483399",
    "end": "1485080"
  },
  {
    "text": "broker that sort of consumes this data",
    "start": "1485080",
    "end": "1487320"
  },
  {
    "text": "and then writes it back out um that's",
    "start": "1487320",
    "end": "1488960"
  },
  {
    "text": "sort of the processing model which",
    "start": "1488960",
    "end": "1490120"
  },
  {
    "text": "allows us to do for failure modes um you",
    "start": "1490120",
    "end": "1492480"
  },
  {
    "text": "know we can just sort of restart and and",
    "start": "1492480",
    "end": "1494000"
  },
  {
    "text": "reapply for at least once and sort of",
    "start": "1494000",
    "end": "1496279"
  },
  {
    "text": "periodically commit data um but we we",
    "start": "1496279",
    "end": "1498640"
  },
  {
    "text": "would like to do more things like you",
    "start": "1498640",
    "end": "1500320"
  },
  {
    "text": "know if your codee's just failing",
    "start": "1500320",
    "end": "1501520"
  },
  {
    "text": "throwing exception whatever it is then",
    "start": "1501520",
    "end": "1503799"
  },
  {
    "text": "the uh web assembly run times oing what",
    "start": "1503799",
    "end": "1505919"
  },
  {
    "text": "we can do is um like create a dead",
    "start": "1505919",
    "end": "1507960"
  },
  {
    "text": "letter queue or something for that so",
    "start": "1507960",
    "end": "1509159"
  },
  {
    "text": "you can resume processing for now we",
    "start": "1509159",
    "end": "1510559"
  },
  {
    "text": "sort of Hal processing is sort of a safe",
    "start": "1510559",
    "end": "1512080"
  },
  {
    "text": "default but we would like to do more",
    "start": "1512080",
    "end": "1513799"
  },
  {
    "text": "dead letter queue which is more like I",
    "start": "1513799",
    "end": "1515480"
  },
  {
    "text": "think standard uh for stream processing",
    "start": "1515480",
    "end": "1517399"
  },
  {
    "text": "applications great question thank you",
    "start": "1517399",
    "end": "1519080"
  },
  {
    "text": "right please join me in thanking",
    "start": "1519080",
    "end": "1522039"
  },
  {
    "text": "Tyler",
    "start": "1523080",
    "end": "1526080"
  }
]