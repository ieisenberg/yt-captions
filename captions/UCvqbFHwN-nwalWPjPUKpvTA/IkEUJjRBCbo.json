[
  {
    "text": "to there we want to share with you our",
    "start": "0",
    "end": "2100"
  },
  {
    "text": "learning using open Telemetry to monitor",
    "start": "2100",
    "end": "4620"
  },
  {
    "text": "graphql queries in production and how",
    "start": "4620",
    "end": "7020"
  },
  {
    "text": "sres and developer can best work",
    "start": "7020",
    "end": "10019"
  },
  {
    "text": "together to troubleshoot these issues",
    "start": "10019",
    "end": "14340"
  },
  {
    "text": "for this talk Ahmed is going to",
    "start": "14340",
    "end": "16800"
  },
  {
    "text": "represent the developer side opening and",
    "start": "16800",
    "end": "19619"
  },
  {
    "text": "I'm going to represent the operation",
    "start": "19619",
    "end": "21300"
  },
  {
    "text": "side of things",
    "start": "21300",
    "end": "22619"
  },
  {
    "text": "so I am responsible to make sure that",
    "start": "22619",
    "end": "25680"
  },
  {
    "text": "everything runs smoothly in production",
    "start": "25680",
    "end": "27560"
  },
  {
    "text": "that these developers they keep coming",
    "start": "27560",
    "end": "31320"
  },
  {
    "text": "up with new technologies introducing new",
    "start": "31320",
    "end": "34079"
  },
  {
    "text": "problems and complexity in production it",
    "start": "34079",
    "end": "37140"
  },
  {
    "text": "gets very overwhelming and today Ahmed",
    "start": "37140",
    "end": "40620"
  },
  {
    "text": "he wants to push a new release to",
    "start": "40620",
    "end": "42540"
  },
  {
    "text": "production using graphql",
    "start": "42540",
    "end": "45379"
  },
  {
    "text": "why do you even want to use graphql like",
    "start": "45379",
    "end": "48300"
  },
  {
    "text": "what is that thing",
    "start": "48300",
    "end": "50879"
  },
  {
    "text": "well accessories you've probably heard",
    "start": "50879",
    "end": "53340"
  },
  {
    "text": "about graphql your development teams",
    "start": "53340",
    "end": "55620"
  },
  {
    "text": "might be thinking about using it or",
    "start": "55620",
    "end": "58020"
  },
  {
    "text": "you've started adopting it but might not",
    "start": "58020",
    "end": "59579"
  },
  {
    "text": "be fully up to speed on the pros the",
    "start": "59579",
    "end": "61559"
  },
  {
    "text": "cons the nuances of graphql or even what",
    "start": "61559",
    "end": "64260"
  },
  {
    "text": "it's useful for",
    "start": "64260",
    "end": "65580"
  },
  {
    "text": "so over the next few minutes we'll just",
    "start": "65580",
    "end": "67260"
  },
  {
    "text": "go through a quick introduction to make",
    "start": "67260",
    "end": "69299"
  },
  {
    "text": "sure you've got enough information to",
    "start": "69299",
    "end": "70979"
  },
  {
    "text": "understand what what we're going to be",
    "start": "70979",
    "end": "72780"
  },
  {
    "text": "dealing with",
    "start": "72780",
    "end": "74520"
  },
  {
    "text": "SQL as I'm sure we all know is a query",
    "start": "74520",
    "end": "76799"
  },
  {
    "text": "language that's used to manage and",
    "start": "76799",
    "end": "78600"
  },
  {
    "text": "manipulate data in a database it allows",
    "start": "78600",
    "end": "81119"
  },
  {
    "text": "you to access many records with a single",
    "start": "81119",
    "end": "83280"
  },
  {
    "text": "declarative query and introduces the",
    "start": "83280",
    "end": "85439"
  },
  {
    "text": "concept of accessing records by some key",
    "start": "85439",
    "end": "88560"
  },
  {
    "text": "operations that can be performed on data",
    "start": "88560",
    "end": "90659"
  },
  {
    "text": "within a database",
    "start": "90659",
    "end": "92180"
  },
  {
    "text": "include select insert update and delete",
    "start": "92180",
    "end": "95040"
  },
  {
    "text": "and with a single query we can access",
    "start": "95040",
    "end": "97560"
  },
  {
    "text": "data across multiple tables using a join",
    "start": "97560",
    "end": "100500"
  },
  {
    "text": "so these Concepts they made their way",
    "start": "100500",
    "end": "102360"
  },
  {
    "text": "into rest which allows us access to",
    "start": "102360",
    "end": "105020"
  },
  {
    "text": "resources using different HTTP methods",
    "start": "105020",
    "end": "107759"
  },
  {
    "text": "like get post put and delete but to",
    "start": "107759",
    "end": "110880"
  },
  {
    "text": "access those a specific resource or",
    "start": "110880",
    "end": "113159"
  },
  {
    "text": "nested resources you need to do so via",
    "start": "113159",
    "end": "115500"
  },
  {
    "text": "different endpoint URLs you can't",
    "start": "115500",
    "end": "117540"
  },
  {
    "text": "perform joins using rest",
    "start": "117540",
    "end": "119880"
  },
  {
    "text": "to me graphql takes ideas that were",
    "start": "119880",
    "end": "122460"
  },
  {
    "text": "originally developed to query databases",
    "start": "122460",
    "end": "124740"
  },
  {
    "text": "and applies them to the wider internet",
    "start": "124740",
    "end": "127680"
  },
  {
    "text": "so that we can expose them as an API a",
    "start": "127680",
    "end": "130140"
  },
  {
    "text": "single graphql query can return",
    "start": "130140",
    "end": "131819"
  },
  {
    "text": "connected data like SQL you can use",
    "start": "131819",
    "end": "135360"
  },
  {
    "text": "graphql queries to change or remove data",
    "start": "135360",
    "end": "137700"
  },
  {
    "text": "too but unlike SQL though rather than",
    "start": "137700",
    "end": "140220"
  },
  {
    "text": "just querying data stored in a database",
    "start": "140220",
    "end": "142080"
  },
  {
    "text": "table graphql is a bit more general",
    "start": "142080",
    "end": "144420"
  },
  {
    "text": "purpose",
    "start": "144420",
    "end": "145680"
  },
  {
    "text": "data can and does reside almost anywhere",
    "start": "145680",
    "end": "148800"
  },
  {
    "text": "a database across multiple databases",
    "start": "148800",
    "end": "151260"
  },
  {
    "text": "different file systems other rest grpc",
    "start": "151260",
    "end": "154440"
  },
  {
    "text": "soap services and even event-based",
    "start": "154440",
    "end": "156660"
  },
  {
    "text": "systems like Kafka",
    "start": "156660",
    "end": "158220"
  },
  {
    "text": "so just like SQL is a declarative query",
    "start": "158220",
    "end": "160739"
  },
  {
    "text": "language for databases graphql is a",
    "start": "160739",
    "end": "163500"
  },
  {
    "text": "declarative query language for the",
    "start": "163500",
    "end": "164879"
  },
  {
    "text": "internet",
    "start": "164879",
    "end": "165900"
  },
  {
    "text": "okay this this sounds cool okay but",
    "start": "165900",
    "end": "169140"
  },
  {
    "text": "graphql you know what problem does it",
    "start": "169140",
    "end": "171300"
  },
  {
    "text": "serve and like isn't rest good enough",
    "start": "171300",
    "end": "174660"
  },
  {
    "text": "well in the above three requests",
    "start": "174660",
    "end": "177120"
  },
  {
    "text": "SQL rest and graphql they're all roughly",
    "start": "177120",
    "end": "180000"
  },
  {
    "text": "equivalent we need to get all the posts",
    "start": "180000",
    "end": "181800"
  },
  {
    "text": "which have been published and also to",
    "start": "181800",
    "end": "183300"
  },
  {
    "text": "find out the author's name in order to",
    "start": "183300",
    "end": "185280"
  },
  {
    "text": "populate the front end for a new page",
    "start": "185280",
    "end": "186900"
  },
  {
    "text": "and a blog site",
    "start": "186900",
    "end": "188220"
  },
  {
    "text": "we just need two properties from authors",
    "start": "188220",
    "end": "190580"
  },
  {
    "text": "ID and name and three properties from",
    "start": "190580",
    "end": "194099"
  },
  {
    "text": "Posts title author ID and status",
    "start": "194099",
    "end": "197700"
  },
  {
    "text": "so overfetching is simply when an API",
    "start": "197700",
    "end": "200459"
  },
  {
    "text": "request returns far too much data that",
    "start": "200459",
    "end": "203159"
  },
  {
    "text": "you're not going to use",
    "start": "203159",
    "end": "204599"
  },
  {
    "text": "with rest we get back the entire",
    "start": "204599",
    "end": "206459"
  },
  {
    "text": "resource so we end up over fetching from",
    "start": "206459",
    "end": "208739"
  },
  {
    "text": "the API and this can be really",
    "start": "208739",
    "end": "210120"
  },
  {
    "text": "inefficient especially for large",
    "start": "210120",
    "end": "212040"
  },
  {
    "text": "Resources with list based responses my",
    "start": "212040",
    "end": "214680"
  },
  {
    "text": "rest API call queried all the posts with",
    "start": "214680",
    "end": "216840"
  },
  {
    "text": "the published status but still gets back",
    "start": "216840",
    "end": "218940"
  },
  {
    "text": "too much information all I need is the",
    "start": "218940",
    "end": "221159"
  },
  {
    "text": "post title and the author ID",
    "start": "221159",
    "end": "223980"
  },
  {
    "text": "under fetching is when an API call",
    "start": "223980",
    "end": "226140"
  },
  {
    "text": "doesn't have enough data that it",
    "start": "226140",
    "end": "228239"
  },
  {
    "text": "necessitates extra calls to enrich that",
    "start": "228239",
    "end": "230400"
  },
  {
    "text": "data I might need multiple entities at",
    "start": "230400",
    "end": "232920"
  },
  {
    "text": "one time and if each request is under",
    "start": "232920",
    "end": "235200"
  },
  {
    "text": "fetching the data that we want we need",
    "start": "235200",
    "end": "237239"
  },
  {
    "text": "to perform several round trips to the",
    "start": "237239",
    "end": "238799"
  },
  {
    "text": "server to build our required data model",
    "start": "238799",
    "end": "241080"
  },
  {
    "text": "so in the same example I got back the",
    "start": "241080",
    "end": "243360"
  },
  {
    "text": "author IDs and now I need to request",
    "start": "243360",
    "end": "245819"
  },
  {
    "text": "each author endpoint in order to obtain",
    "start": "245819",
    "end": "247920"
  },
  {
    "text": "the author name",
    "start": "247920",
    "end": "249420"
  },
  {
    "text": "wow that's a lot of coal wasted",
    "start": "249420",
    "end": "252659"
  },
  {
    "text": "bandwidth added latency and pain for the",
    "start": "252659",
    "end": "255420"
  },
  {
    "text": "end users every additional API calls add",
    "start": "255420",
    "end": "258959"
  },
  {
    "text": "precious latency to each interaction",
    "start": "258959",
    "end": "260940"
  },
  {
    "text": "increasing the response time and adds a",
    "start": "260940",
    "end": "263639"
  },
  {
    "text": "lot of complexity for our customers to",
    "start": "263639",
    "end": "266220"
  },
  {
    "text": "integrate with us boom you got it",
    "start": "266220",
    "end": "270380"
  },
  {
    "text": "so now that you know a little bit about",
    "start": "271380",
    "end": "273419"
  },
  {
    "text": "what kind of problems that graphql",
    "start": "273419",
    "end": "275280"
  },
  {
    "text": "solves let's take a look at what graphql",
    "start": "275280",
    "end": "277800"
  },
  {
    "text": "looks like",
    "start": "277800",
    "end": "278759"
  },
  {
    "text": "we can see an example schema a query",
    "start": "278759",
    "end": "281340"
  },
  {
    "text": "operation",
    "start": "281340",
    "end": "282780"
  },
  {
    "text": "and an example response you'll see that",
    "start": "282780",
    "end": "285360"
  },
  {
    "text": "when you query the API your graphql",
    "start": "285360",
    "end": "287580"
  },
  {
    "text": "requests syntax conveniently mirrors the",
    "start": "287580",
    "end": "290160"
  },
  {
    "text": "shape of the Json that you'd expect in",
    "start": "290160",
    "end": "291900"
  },
  {
    "text": "the response",
    "start": "291900",
    "end": "293160"
  },
  {
    "text": "for API consumers they can request",
    "start": "293160",
    "end": "295440"
  },
  {
    "text": "exactly the data that they need with",
    "start": "295440",
    "end": "297540"
  },
  {
    "text": "absolute flexibility so that they know",
    "start": "297540",
    "end": "299639"
  },
  {
    "text": "exactly what data is going to be",
    "start": "299639",
    "end": "301620"
  },
  {
    "text": "returned nothing more nothing less and",
    "start": "301620",
    "end": "304199"
  },
  {
    "text": "for API producers they can Define their",
    "start": "304199",
    "end": "306360"
  },
  {
    "text": "schema and write some clever code or do",
    "start": "306360",
    "end": "309720"
  },
  {
    "text": "it to Clarity declaratively with a tool",
    "start": "309720",
    "end": "311940"
  },
  {
    "text": "like tyke to dynamically resolve those",
    "start": "311940",
    "end": "314280"
  },
  {
    "text": "requests",
    "start": "314280",
    "end": "315840"
  },
  {
    "text": "because we've got a shared schema for",
    "start": "315840",
    "end": "317520"
  },
  {
    "text": "both producers and consumers we get the",
    "start": "317520",
    "end": "319680"
  },
  {
    "text": "benefit of being able to scaffold and",
    "start": "319680",
    "end": "321300"
  },
  {
    "text": "generate both service dubs and typesafe",
    "start": "321300",
    "end": "323400"
  },
  {
    "text": "clients too just like with grpc okay I",
    "start": "323400",
    "end": "327060"
  },
  {
    "text": "get it that sounds interesting tell me",
    "start": "327060",
    "end": "330360"
  },
  {
    "text": "service you are about to push to",
    "start": "330360",
    "end": "332340"
  },
  {
    "text": "production like what do I need to know",
    "start": "332340",
    "end": "333840"
  },
  {
    "text": "about it",
    "start": "333840",
    "end": "335639"
  },
  {
    "text": "so let's move the way from our contrived",
    "start": "335639",
    "end": "338340"
  },
  {
    "text": "blog example for a moment and start",
    "start": "338340",
    "end": "340139"
  },
  {
    "text": "talking about a contrived travel",
    "start": "340139",
    "end": "341639"
  },
  {
    "text": "business",
    "start": "341639",
    "end": "343440"
  },
  {
    "text": "um if you can imagine that every type in",
    "start": "343440",
    "end": "345539"
  },
  {
    "text": "graphql might be represented by a",
    "start": "345539",
    "end": "347639"
  },
  {
    "text": "microservice we could think of graphql",
    "start": "347639",
    "end": "349979"
  },
  {
    "text": "as an Ingress which can conveniently",
    "start": "349979",
    "end": "352139"
  },
  {
    "text": "expose those microservices as a combined",
    "start": "352139",
    "end": "354660"
  },
  {
    "text": "purposefully designed API product",
    "start": "354660",
    "end": "357180"
  },
  {
    "text": "we've got three different microservices",
    "start": "357180",
    "end": "358919"
  },
  {
    "text": "here a country service image service and",
    "start": "358919",
    "end": "361500"
  },
  {
    "text": "a Weather Service",
    "start": "361500",
    "end": "362759"
  },
  {
    "text": "and a graphql schema which neatly",
    "start": "362759",
    "end": "364860"
  },
  {
    "text": "provides an API product for these",
    "start": "364860",
    "end": "366600"
  },
  {
    "text": "microservices",
    "start": "366600",
    "end": "368400"
  },
  {
    "text": "in the simplest of use case I just have",
    "start": "368400",
    "end": "370560"
  },
  {
    "text": "one client which happens to be an",
    "start": "370560",
    "end": "372900"
  },
  {
    "text": "internal react app for our website",
    "start": "372900",
    "end": "375000"
  },
  {
    "text": "given that the react app is an internal",
    "start": "375000",
    "end": "377039"
  },
  {
    "text": "consumer of our Cube traveler service",
    "start": "377039",
    "end": "379320"
  },
  {
    "text": "our Dev team will probably reach out via",
    "start": "379320",
    "end": "381479"
  },
  {
    "text": "slack if something isn't working quite",
    "start": "381479",
    "end": "382979"
  },
  {
    "text": "right",
    "start": "382979",
    "end": "384240"
  },
  {
    "text": "but in reality if we just have one",
    "start": "384240",
    "end": "386759"
  },
  {
    "text": "consumer graphql is probably a little",
    "start": "386759",
    "end": "388680"
  },
  {
    "text": "bit overboard",
    "start": "388680",
    "end": "390960"
  },
  {
    "text": "given that Cube travel is an API product",
    "start": "390960",
    "end": "392759"
  },
  {
    "text": "there might be a whole slew of different",
    "start": "392759",
    "end": "394860"
  },
  {
    "text": "apps different consumer types built by",
    "start": "394860",
    "end": "397199"
  },
  {
    "text": "different developers from internal",
    "start": "397199",
    "end": "399180"
  },
  {
    "text": "through to Partners even the general",
    "start": "399180",
    "end": "400680"
  },
  {
    "text": "public building against our graphql API",
    "start": "400680",
    "end": "403500"
  },
  {
    "text": "and even publishing back to our API",
    "start": "403500",
    "end": "405539"
  },
  {
    "text": "Marketplace if something goes wrong we",
    "start": "405539",
    "end": "407940"
  },
  {
    "text": "need to know about it because our users",
    "start": "407940",
    "end": "409440"
  },
  {
    "text": "aren't going to be so forgiving",
    "start": "409440",
    "end": "412639"
  },
  {
    "text": "another question right how do we monitor",
    "start": "414419",
    "end": "416759"
  },
  {
    "text": "graphql to",
    "start": "416759",
    "end": "418139"
  },
  {
    "text": "let's try to apply the red method as a",
    "start": "418139",
    "end": "421500"
  },
  {
    "text": "reminder the red method is a monitoring",
    "start": "421500",
    "end": "424020"
  },
  {
    "text": "strategy used to gain insight into the",
    "start": "424020",
    "end": "426660"
  },
  {
    "text": "health and performance of distributed",
    "start": "426660",
    "end": "428639"
  },
  {
    "text": "systems wed stands for air rate the",
    "start": "428639",
    "end": "432600"
  },
  {
    "text": "number of requests per second your",
    "start": "432600",
    "end": "434280"
  },
  {
    "text": "service are serving errors the number of",
    "start": "434280",
    "end": "437220"
  },
  {
    "text": "fields requests per second and duration",
    "start": "437220",
    "end": "439860"
  },
  {
    "text": "how long each request takes and based on",
    "start": "439860",
    "end": "443099"
  },
  {
    "text": "this metrics you can understand how good",
    "start": "443099",
    "end": "445020"
  },
  {
    "text": "your service is doing and set up your",
    "start": "445020",
    "end": "446880"
  },
  {
    "text": "SLO alerting and everything that you",
    "start": "446880",
    "end": "449340"
  },
  {
    "text": "need",
    "start": "449340",
    "end": "450979"
  },
  {
    "text": "so how are we going to do that with",
    "start": "450979",
    "end": "453120"
  },
  {
    "text": "application the first step is to",
    "start": "453120",
    "end": "455280"
  },
  {
    "text": "instrument our graphql service with open",
    "start": "455280",
    "end": "457740"
  },
  {
    "text": "Telemetry to get distributed traces now",
    "start": "457740",
    "end": "460740"
  },
  {
    "text": "there are different implementation of",
    "start": "460740",
    "end": "462660"
  },
  {
    "text": "graphql available on the market",
    "start": "462660",
    "end": "464220"
  },
  {
    "text": "including tax implementation but here we",
    "start": "464220",
    "end": "467400"
  },
  {
    "text": "are going to use a node.js",
    "start": "467400",
    "end": "468840"
  },
  {
    "text": "implementation of graphql using a",
    "start": "468840",
    "end": "471599"
  },
  {
    "text": "node.js with the Express framework",
    "start": "471599",
    "end": "474479"
  },
  {
    "text": "okay so let's take a look if there's",
    "start": "474479",
    "end": "477720"
  },
  {
    "text": "already an instrumentation for open",
    "start": "477720",
    "end": "479400"
  },
  {
    "text": "Telemetry that is available for node.js",
    "start": "479400",
    "end": "481620"
  },
  {
    "text": "and graphql",
    "start": "481620",
    "end": "483360"
  },
  {
    "text": "we can go to the open Telemetry website",
    "start": "483360",
    "end": "485759"
  },
  {
    "text": "and under ecosystem you can have a look",
    "start": "485759",
    "end": "488699"
  },
  {
    "text": "at all the instrumentation that are",
    "start": "488699",
    "end": "490319"
  },
  {
    "text": "available and if we search for graphql",
    "start": "490319",
    "end": "492479"
  },
  {
    "text": "we see ah we're lucky there is already",
    "start": "492479",
    "end": "494340"
  },
  {
    "text": "an instrumentation library for graphql",
    "start": "494340",
    "end": "497419"
  },
  {
    "text": "node.js so this is what we are going to",
    "start": "497419",
    "end": "500160"
  },
  {
    "text": "use in this presentation",
    "start": "500160",
    "end": "503419"
  },
  {
    "text": "in node.js we can use a trace GS file to",
    "start": "505440",
    "end": "509699"
  },
  {
    "text": "instrument a service with open Telemetry",
    "start": "509699",
    "end": "512279"
  },
  {
    "text": "like you see here",
    "start": "512279",
    "end": "514140"
  },
  {
    "text": "and this is where we add our",
    "start": "514140",
    "end": "515640"
  },
  {
    "text": "instrumentation so this is where we",
    "start": "515640",
    "end": "517080"
  },
  {
    "text": "added a graphql instrumentation into the",
    "start": "517080",
    "end": "519719"
  },
  {
    "text": "list of the HTTP instrumentation and",
    "start": "519719",
    "end": "522479"
  },
  {
    "text": "express instrumentation that we were",
    "start": "522479",
    "end": "524219"
  },
  {
    "text": "already using",
    "start": "524219",
    "end": "526940"
  },
  {
    "text": "and if you if you look at the code you",
    "start": "527220",
    "end": "529560"
  },
  {
    "text": "will notice that we're exporting the",
    "start": "529560",
    "end": "531060"
  },
  {
    "text": "spans to an open Telemetry collector",
    "start": "531060",
    "end": "535160"
  },
  {
    "text": "and here's the result so we have an",
    "start": "536820",
    "end": "539279"
  },
  {
    "text": "end-to-end distributed traces in Jaeger",
    "start": "539279",
    "end": "542160"
  },
  {
    "text": "we can see text API Gateway starting the",
    "start": "542160",
    "end": "544680"
  },
  {
    "text": "transaction reporting some spans then we",
    "start": "544680",
    "end": "547140"
  },
  {
    "text": "see the graphql service also reporting",
    "start": "547140",
    "end": "549899"
  },
  {
    "text": "its spans and finally the graphql",
    "start": "549899",
    "end": "552720"
  },
  {
    "text": "service is calling a rest service which",
    "start": "552720",
    "end": "554700"
  },
  {
    "text": "is also instrumented and we get also the",
    "start": "554700",
    "end": "556800"
  },
  {
    "text": "span so the end-to-end distributed",
    "start": "556800",
    "end": "558480"
  },
  {
    "text": "traces is now available in Jaeger",
    "start": "558480",
    "end": "561660"
  },
  {
    "text": "okay we have tracing in place but to",
    "start": "561660",
    "end": "564060"
  },
  {
    "text": "monitor in production we need some",
    "start": "564060",
    "end": "566220"
  },
  {
    "text": "metrics the red metrics that we talked",
    "start": "566220",
    "end": "568380"
  },
  {
    "text": "earlier so how do we get from the traces",
    "start": "568380",
    "end": "570839"
  },
  {
    "text": "to those red metrics",
    "start": "570839",
    "end": "573480"
  },
  {
    "text": "well Jaeger has an out of the box",
    "start": "573480",
    "end": "576000"
  },
  {
    "text": "integration for webmetrics it uses a",
    "start": "576000",
    "end": "579060"
  },
  {
    "text": "component on the open Telemetry",
    "start": "579060",
    "end": "580800"
  },
  {
    "text": "collector called span Matrix connector",
    "start": "580800",
    "end": "583500"
  },
  {
    "text": "or previously called spam Matrix",
    "start": "583500",
    "end": "585660"
  },
  {
    "text": "processor and it generates the metrics",
    "start": "585660",
    "end": "588360"
  },
  {
    "text": "based on the spam",
    "start": "588360",
    "end": "589980"
  },
  {
    "text": "the span Matrix connector creates two",
    "start": "589980",
    "end": "592380"
  },
  {
    "text": "metrics on this based on the span the",
    "start": "592380",
    "end": "594779"
  },
  {
    "text": "course total which is the number of",
    "start": "594779",
    "end": "596880"
  },
  {
    "text": "spans including aerospan so the error",
    "start": "596880",
    "end": "599480"
  },
  {
    "text": "identified as a Time series with a",
    "start": "599480",
    "end": "602880"
  },
  {
    "text": "labeled status card and a latency which",
    "start": "602880",
    "end": "605580"
  },
  {
    "text": "is reported as histogram and those",
    "start": "605580",
    "end": "608220"
  },
  {
    "text": "metrics are then stored in parameters",
    "start": "608220",
    "end": "609899"
  },
  {
    "text": "and Jaeger is able to connect to",
    "start": "609899",
    "end": "611760"
  },
  {
    "text": "parameters to display those metrics",
    "start": "611760",
    "end": "615360"
  },
  {
    "text": "and here's the result in Jaeger so there",
    "start": "615360",
    "end": "618060"
  },
  {
    "text": "is the monitor tab when this is set up",
    "start": "618060",
    "end": "619980"
  },
  {
    "text": "and I have known my request to it error",
    "start": "619980",
    "end": "623220"
  },
  {
    "text": "rate and duration for my graphql service",
    "start": "623220",
    "end": "626220"
  },
  {
    "text": "hey Amit that's good right like I'm",
    "start": "626220",
    "end": "628440"
  },
  {
    "text": "ready to monitor this in production what",
    "start": "628440",
    "end": "630420"
  },
  {
    "text": "do you think what could go wrong",
    "start": "630420",
    "end": "634579"
  },
  {
    "text": "so let's start to look at two different",
    "start": "635580",
    "end": "637680"
  },
  {
    "text": "error scenarios involving graphql",
    "start": "637680",
    "end": "639600"
  },
  {
    "text": "queries upstream and resolver errors",
    "start": "639600",
    "end": "643080"
  },
  {
    "text": "I'm going to send a request to get some",
    "start": "643080",
    "end": "645000"
  },
  {
    "text": "information from Italy along with its",
    "start": "645000",
    "end": "647579"
  },
  {
    "text": "weather data but it's not working are",
    "start": "647579",
    "end": "649560"
  },
  {
    "text": "you able to detect those kinds of issues",
    "start": "649560",
    "end": "651120"
  },
  {
    "text": "let's check",
    "start": "651120",
    "end": "653100"
  },
  {
    "text": "okay let's try this out yes you see scn",
    "start": "653100",
    "end": "656640"
  },
  {
    "text": "increased air weight here on my",
    "start": "656640",
    "end": "659399"
  },
  {
    "text": "dashboards let's check the traces to",
    "start": "659399",
    "end": "661680"
  },
  {
    "text": "understand the issue",
    "start": "661680",
    "end": "663959"
  },
  {
    "text": "I can find the traces with error in",
    "start": "663959",
    "end": "666720"
  },
  {
    "text": "Jaeger but filtering them using the air",
    "start": "666720",
    "end": "669060"
  },
  {
    "text": "attack and looking at those traces that",
    "start": "669060",
    "end": "671579"
  },
  {
    "text": "have errors I can quickly catch that the",
    "start": "671579",
    "end": "674100"
  },
  {
    "text": "graphql service is whether is returning",
    "start": "674100",
    "end": "676560"
  },
  {
    "text": "a 500 HTTP error code because the",
    "start": "676560",
    "end": "679500"
  },
  {
    "text": "Weather Service it was calling returned",
    "start": "679500",
    "end": "682019"
  },
  {
    "text": "the 400 error status code so in that",
    "start": "682019",
    "end": "684779"
  },
  {
    "text": "example I get all the information I need",
    "start": "684779",
    "end": "687600"
  },
  {
    "text": "from open telemetry",
    "start": "687600",
    "end": "690800"
  },
  {
    "text": "and take a look I can even check out",
    "start": "692579",
    "end": "696240"
  },
  {
    "text": "which queries having the issue so having",
    "start": "696240",
    "end": "697980"
  },
  {
    "text": "a look at the errors and then I have the",
    "start": "697980",
    "end": "699540"
  },
  {
    "text": "query so you can fix it okay",
    "start": "699540",
    "end": "703260"
  },
  {
    "text": "I fixed the bag let's try again",
    "start": "703260",
    "end": "705959"
  },
  {
    "text": "ah an error with the temperature not",
    "start": "705959",
    "end": "708300"
  },
  {
    "text": "being shown in the customer app",
    "start": "708300",
    "end": "710279"
  },
  {
    "text": "okay let's try again",
    "start": "710279",
    "end": "712019"
  },
  {
    "text": "let me check",
    "start": "712019",
    "end": "713399"
  },
  {
    "text": "hmm",
    "start": "713399",
    "end": "715579"
  },
  {
    "text": "no let's check the traces",
    "start": "715579",
    "end": "721459"
  },
  {
    "text": "no no all good um can you maybe try to",
    "start": "723300",
    "end": "726899"
  },
  {
    "text": "reproduce it",
    "start": "726899",
    "end": "728339"
  },
  {
    "text": "look Sonia my error is in the response",
    "start": "728339",
    "end": "730800"
  },
  {
    "text": "body here it is",
    "start": "730800",
    "end": "732540"
  },
  {
    "text": "graphql error is fundamentally different",
    "start": "732540",
    "end": "734640"
  },
  {
    "text": "from rest API errors we can't rely on",
    "start": "734640",
    "end": "737220"
  },
  {
    "text": "the HTTP status codes and Status texts",
    "start": "737220",
    "end": "739740"
  },
  {
    "text": "according to the spec the response of a",
    "start": "739740",
    "end": "741899"
  },
  {
    "text": "graphql endpoint should contain either a",
    "start": "741899",
    "end": "744180"
  },
  {
    "text": "data field or an errors field and in",
    "start": "744180",
    "end": "746279"
  },
  {
    "text": "some cases both",
    "start": "746279",
    "end": "748620"
  },
  {
    "text": "um in this particular case we can see",
    "start": "748620",
    "end": "750660"
  },
  {
    "text": "that the error object returned is an",
    "start": "750660",
    "end": "752459"
  },
  {
    "text": "array and it contains the following",
    "start": "752459",
    "end": "753899"
  },
  {
    "text": "Fields a message and locations locations",
    "start": "753899",
    "end": "757019"
  },
  {
    "text": "so the message represents the actual",
    "start": "757019",
    "end": "758700"
  },
  {
    "text": "error message and the locations contains",
    "start": "758700",
    "end": "761399"
  },
  {
    "text": "the line and the column and the location",
    "start": "761399",
    "end": "763079"
  },
  {
    "text": "of the query",
    "start": "763079",
    "end": "764880"
  },
  {
    "text": "so what can we do to catch these kinds",
    "start": "764880",
    "end": "767160"
  },
  {
    "text": "of errors",
    "start": "767160",
    "end": "769440"
  },
  {
    "text": "right now we are",
    "start": "769440",
    "end": "770880"
  },
  {
    "text": "miss error information",
    "start": "770880",
    "end": "772519"
  },
  {
    "text": "and maybe let's take a look at open",
    "start": "772519",
    "end": "774779"
  },
  {
    "text": "Telemetry semantic convention to see if",
    "start": "774779",
    "end": "777000"
  },
  {
    "text": "there's an attribute we can use for that",
    "start": "777000",
    "end": "779279"
  },
  {
    "text": "the semantic conventions are a set of",
    "start": "779279",
    "end": "781320"
  },
  {
    "text": "recommended attributes for different",
    "start": "781320",
    "end": "782940"
  },
  {
    "text": "Technologies it's not mandatory to use",
    "start": "782940",
    "end": "785399"
  },
  {
    "text": "them but it's recommended and it's",
    "start": "785399",
    "end": "787440"
  },
  {
    "text": "useful to process the information on the",
    "start": "787440",
    "end": "789540"
  },
  {
    "text": "observability backend and each and every",
    "start": "789540",
    "end": "792300"
  },
  {
    "text": "instrumentation libraries then",
    "start": "792300",
    "end": "793860"
  },
  {
    "text": "responsible for implementing them",
    "start": "793860",
    "end": "796380"
  },
  {
    "text": "and we can see here in the semantic",
    "start": "796380",
    "end": "798660"
  },
  {
    "text": "convention from graphql that it contains",
    "start": "798660",
    "end": "800700"
  },
  {
    "text": "only a couple of attributes so the",
    "start": "800700",
    "end": "802320"
  },
  {
    "text": "operation name the type and the document",
    "start": "802320",
    "end": "804899"
  },
  {
    "text": "but there's nothing specific about",
    "start": "804899",
    "end": "807000"
  },
  {
    "text": "graphql errors",
    "start": "807000",
    "end": "809820"
  },
  {
    "text": "so let's add it by ourselves so we've",
    "start": "809820",
    "end": "812459"
  },
  {
    "text": "discussed we are adding an additional",
    "start": "812459",
    "end": "814560"
  },
  {
    "text": "spans that will report the error with",
    "start": "814560",
    "end": "817260"
  },
  {
    "text": "our own attributes called graphql error",
    "start": "817260",
    "end": "819779"
  },
  {
    "text": "message",
    "start": "819779",
    "end": "820500"
  },
  {
    "text": "with the instrumentation",
    "start": "820500",
    "end": "823740"
  },
  {
    "text": "and if we do that and have run into the",
    "start": "823740",
    "end": "826740"
  },
  {
    "text": "same error we can see the error being",
    "start": "826740",
    "end": "828720"
  },
  {
    "text": "recorded on the span",
    "start": "828720",
    "end": "830579"
  },
  {
    "text": "you have to notice it's not the first",
    "start": "830579",
    "end": "832380"
  },
  {
    "text": "spam because the first pen that's going",
    "start": "832380",
    "end": "834060"
  },
  {
    "text": "to be still the one that gets traced by",
    "start": "834060",
    "end": "837120"
  },
  {
    "text": "the HTTP layer and this one says okay",
    "start": "837120",
    "end": "839399"
  },
  {
    "text": "200 error codes everything's fine but at",
    "start": "839399",
    "end": "842220"
  },
  {
    "text": "least we can start logging our graphql",
    "start": "842220",
    "end": "844680"
  },
  {
    "text": "errors and we can report it",
    "start": "844680",
    "end": "847260"
  },
  {
    "text": "and still in Jaeger the Airways diagram",
    "start": "847260",
    "end": "850740"
  },
  {
    "text": "doesn't change because it's based on the",
    "start": "850740",
    "end": "852660"
  },
  {
    "text": "frostpans that comes",
    "start": "852660",
    "end": "854339"
  },
  {
    "text": "but we can use parameters and add custom",
    "start": "854339",
    "end": "857880"
  },
  {
    "text": "queries to retrieve the error rate for",
    "start": "857880",
    "end": "859980"
  },
  {
    "text": "the graphql queries based on the manual",
    "start": "859980",
    "end": "862639"
  },
  {
    "text": "instrumentation that we have added",
    "start": "862639",
    "end": "865440"
  },
  {
    "text": "so what we have learned here is graphql",
    "start": "865440",
    "end": "868139"
  },
  {
    "text": "error detection doesn't work like a",
    "start": "868139",
    "end": "870000"
  },
  {
    "text": "standard rest API and we need more logic",
    "start": "870000",
    "end": "872160"
  },
  {
    "text": "around it we solve that by adding a",
    "start": "872160",
    "end": "874560"
  },
  {
    "text": "graphql error attribute in our",
    "start": "874560",
    "end": "876600"
  },
  {
    "text": "instrumentation but that's something",
    "start": "876600",
    "end": "878160"
  },
  {
    "text": "that could be added to the",
    "start": "878160",
    "end": "879360"
  },
  {
    "text": "instrumentation Library down the line",
    "start": "879360",
    "end": "882660"
  },
  {
    "text": "so we have spoken about errors but what",
    "start": "882660",
    "end": "885899"
  },
  {
    "text": "about performance issue can we use the",
    "start": "885899",
    "end": "888540"
  },
  {
    "text": "open Telemetry data in Jaeger to detect",
    "start": "888540",
    "end": "890699"
  },
  {
    "text": "performance issue so Ahmed this is what",
    "start": "890699",
    "end": "893160"
  },
  {
    "text": "I have what do you think is it good",
    "start": "893160",
    "end": "895019"
  },
  {
    "text": "enough for performance",
    "start": "895019",
    "end": "897959"
  },
  {
    "text": "um",
    "start": "897959",
    "end": "900079"
  },
  {
    "text": "all the different queries that are being",
    "start": "901019",
    "end": "903060"
  },
  {
    "text": "sent to my graphql server are being",
    "start": "903060",
    "end": "905040"
  },
  {
    "text": "aggregated by the slash graphql endpoint",
    "start": "905040",
    "end": "907940"
  },
  {
    "text": "yeah because they're all you know they",
    "start": "907940",
    "end": "909959"
  },
  {
    "text": "are sending to graphql endpoints so yes",
    "start": "909959",
    "end": "912300"
  },
  {
    "text": "what's what's wrong with that",
    "start": "912300",
    "end": "914339"
  },
  {
    "text": "hmm",
    "start": "914339",
    "end": "915600"
  },
  {
    "text": "it's not that easy with graphql we don't",
    "start": "915600",
    "end": "918360"
  },
  {
    "text": "know what what queries clients are",
    "start": "918360",
    "end": "920459"
  },
  {
    "text": "sending us one client can send multiple",
    "start": "920459",
    "end": "922800"
  },
  {
    "text": "different queries and we could have",
    "start": "922800",
    "end": "924180"
  },
  {
    "text": "multiple clients consuming this API each",
    "start": "924180",
    "end": "926399"
  },
  {
    "text": "in their weird and wonderful way so each",
    "start": "926399",
    "end": "928560"
  },
  {
    "text": "client might have a different",
    "start": "928560",
    "end": "929459"
  },
  {
    "text": "performance profile on a per query basis",
    "start": "929459",
    "end": "931800"
  },
  {
    "text": "and whilst one client could experience",
    "start": "931800",
    "end": "934260"
  },
  {
    "text": "performance problems another client",
    "start": "934260",
    "end": "935699"
  },
  {
    "text": "could be performing perfectly fine it's",
    "start": "935699",
    "end": "937680"
  },
  {
    "text": "all about the type of query and the",
    "start": "937680",
    "end": "939360"
  },
  {
    "text": "resolvers",
    "start": "939360",
    "end": "941540"
  },
  {
    "text": "like with databases right yes but we",
    "start": "941540",
    "end": "944760"
  },
  {
    "text": "have the added complexity because you",
    "start": "944760",
    "end": "946440"
  },
  {
    "text": "wouldn't expose your SQL database to",
    "start": "946440",
    "end": "948180"
  },
  {
    "text": "your API consumers would you",
    "start": "948180",
    "end": "951620"
  },
  {
    "text": "so if we if we go back to that screen",
    "start": "951839",
    "end": "954360"
  },
  {
    "text": "the P95 latency doesn't really mean",
    "start": "954360",
    "end": "956760"
  },
  {
    "text": "anything because it's an average over",
    "start": "956760",
    "end": "958260"
  },
  {
    "text": "every single graphql query that it's",
    "start": "958260",
    "end": "960120"
  },
  {
    "text": "sent to the server we need more",
    "start": "960120",
    "end": "961560"
  },
  {
    "text": "granularity",
    "start": "961560",
    "end": "963959"
  },
  {
    "text": "also Sonia here's a couple of things you",
    "start": "963959",
    "end": "966060"
  },
  {
    "text": "need to know about performance we'll",
    "start": "966060",
    "end": "967620"
  },
  {
    "text": "touch on a couple of them",
    "start": "967620",
    "end": "969300"
  },
  {
    "text": "um from the M plus one problem to cyclic",
    "start": "969300",
    "end": "971279"
  },
  {
    "text": "queries",
    "start": "971279",
    "end": "972300"
  },
  {
    "text": "complex and deeply nested queries can",
    "start": "972300",
    "end": "974279"
  },
  {
    "text": "also impact performance",
    "start": "974279",
    "end": "976740"
  },
  {
    "text": "one of the most commonly used features",
    "start": "976740",
    "end": "978240"
  },
  {
    "text": "of graphql is the ability to get nested",
    "start": "978240",
    "end": "980699"
  },
  {
    "text": "data within a single server request",
    "start": "980699",
    "end": "983279"
  },
  {
    "text": "unfortunately it's very easy to",
    "start": "983279",
    "end": "985560"
  },
  {
    "text": "misconfigure the way that the data",
    "start": "985560",
    "end": "988440"
  },
  {
    "text": "loading in a way which won't scale as",
    "start": "988440",
    "end": "990300"
  },
  {
    "text": "the data grows and in this example you",
    "start": "990300",
    "end": "992880"
  },
  {
    "text": "can see what looks like a pretty",
    "start": "992880",
    "end": "994079"
  },
  {
    "text": "harmless query which requests the",
    "start": "994079",
    "end": "995760"
  },
  {
    "text": "continents in the world and then for",
    "start": "995760",
    "end": "997500"
  },
  {
    "text": "each continent to go grab the countries",
    "start": "997500",
    "end": "999180"
  },
  {
    "text": "and then for each country get some",
    "start": "999180",
    "end": "1001519"
  },
  {
    "text": "weather data",
    "start": "1001519",
    "end": "1002210"
  },
  {
    "text": "[Music]",
    "start": "1002210",
    "end": "1005320"
  },
  {
    "text": "you know what I think using open",
    "start": "1005420",
    "end": "1008180"
  },
  {
    "text": "Telemetry we can detect that so you can",
    "start": "1008180",
    "end": "1010820"
  },
  {
    "text": "nicely detect M plus one query let me",
    "start": "1010820",
    "end": "1013040"
  },
  {
    "text": "show you so in this particular example",
    "start": "1013040",
    "end": "1015380"
  },
  {
    "text": "in Jaeger when looking at the trace",
    "start": "1015380",
    "end": "1017360"
  },
  {
    "text": "diagram we can see 27 HTTP get cores",
    "start": "1017360",
    "end": "1021320"
  },
  {
    "text": "made to the Weather Service from one",
    "start": "1021320",
    "end": "1023300"
  },
  {
    "text": "single graphql query",
    "start": "1023300",
    "end": "1025100"
  },
  {
    "text": "and of course I would expect this kind",
    "start": "1025100",
    "end": "1027438"
  },
  {
    "text": "of query to work pretty well on the",
    "start": "1027439",
    "end": "1029178"
  },
  {
    "text": "development side on your machine but in",
    "start": "1029179",
    "end": "1030918"
  },
  {
    "text": "production this kind of query that will",
    "start": "1030919",
    "end": "1032480"
  },
  {
    "text": "not scale so we need to be able to catch",
    "start": "1032480",
    "end": "1034400"
  },
  {
    "text": "them",
    "start": "1034400",
    "end": "1035418"
  },
  {
    "text": "one thing that we could do is get that",
    "start": "1035419",
    "end": "1038720"
  },
  {
    "text": "number in parameters for example getting",
    "start": "1038720",
    "end": "1041058"
  },
  {
    "text": "the average number of outgoing requests",
    "start": "1041059",
    "end": "1043880"
  },
  {
    "text": "per graphql query and you can even use",
    "start": "1043880",
    "end": "1046880"
  },
  {
    "text": "it to set alerts in test or in",
    "start": "1046880",
    "end": "1049400"
  },
  {
    "text": "production environments very cool",
    "start": "1049400",
    "end": "1053380"
  },
  {
    "text": "so cyclic queries they reuse the same",
    "start": "1053540",
    "end": "1055640"
  },
  {
    "text": "component same objects one or more times",
    "start": "1055640",
    "end": "1058520"
  },
  {
    "text": "in a cyclical manner so despite being",
    "start": "1058520",
    "end": "1061039"
  },
  {
    "text": "pretty unusual I mean why would any",
    "start": "1061039",
    "end": "1062960"
  },
  {
    "text": "anybody actually want to grab all the",
    "start": "1062960",
    "end": "1065539"
  },
  {
    "text": "continents then for each continent grab",
    "start": "1065539",
    "end": "1067580"
  },
  {
    "text": "the countries then dive back into the",
    "start": "1067580",
    "end": "1069200"
  },
  {
    "text": "continent of that country and so on so",
    "start": "1069200",
    "end": "1071720"
  },
  {
    "text": "this could this could either be done in",
    "start": "1071720",
    "end": "1073820"
  },
  {
    "text": "error but more likely as a potential",
    "start": "1073820",
    "end": "1075440"
  },
  {
    "text": "vulnerability for graphql apis and they",
    "start": "1075440",
    "end": "1077720"
  },
  {
    "text": "need to be protected as they can lead to",
    "start": "1077720",
    "end": "1079520"
  },
  {
    "text": "a denial of service",
    "start": "1079520",
    "end": "1082240"
  },
  {
    "text": "and some queries they're easier for a",
    "start": "1083000",
    "end": "1084980"
  },
  {
    "text": "server to resolve than others the depth",
    "start": "1084980",
    "end": "1086840"
  },
  {
    "text": "of a query is the number of nesting",
    "start": "1086840",
    "end": "1088400"
  },
  {
    "text": "levels so in this example we've got a",
    "start": "1088400",
    "end": "1090620"
  },
  {
    "text": "query depth of three ABC",
    "start": "1090620",
    "end": "1093320"
  },
  {
    "text": "and the complexity of a query is",
    "start": "1093320",
    "end": "1095179"
  },
  {
    "text": "typically defined by the number of",
    "start": "1095179",
    "end": "1096799"
  },
  {
    "text": "fields that have been requested so in",
    "start": "1096799",
    "end": "1098720"
  },
  {
    "text": "this example to the right you'll see an",
    "start": "1098720",
    "end": "1100220"
  },
  {
    "text": "example query with a complexity of six",
    "start": "1100220",
    "end": "1103039"
  },
  {
    "text": "it's also possible to assign custom",
    "start": "1103039",
    "end": "1105080"
  },
  {
    "text": "complexity values on a per field basis",
    "start": "1105080",
    "end": "1108320"
  },
  {
    "text": "so we can assume that queries with a",
    "start": "1108320",
    "end": "1110900"
  },
  {
    "text": "high depth and higher complexity are",
    "start": "1110900",
    "end": "1112700"
  },
  {
    "text": "going to be more expensive for a server",
    "start": "1112700",
    "end": "1114799"
  },
  {
    "text": "to resolve than simpler queries and as",
    "start": "1114799",
    "end": "1117320"
  },
  {
    "text": "such add precious latency",
    "start": "1117320",
    "end": "1120880"
  },
  {
    "text": "okay let's try to see what we can do",
    "start": "1123799",
    "end": "1126320"
  },
  {
    "text": "better to track the performance of our",
    "start": "1126320",
    "end": "1128059"
  },
  {
    "text": "graphql service again we need to check",
    "start": "1128059",
    "end": "1130880"
  },
  {
    "text": "what information we have on our spans",
    "start": "1130880",
    "end": "1133220"
  },
  {
    "text": "and here we see we have the full query",
    "start": "1133220",
    "end": "1135559"
  },
  {
    "text": "and the field names actually this",
    "start": "1135559",
    "end": "1138320"
  },
  {
    "text": "doesn't really match the semantic",
    "start": "1138320",
    "end": "1139700"
  },
  {
    "text": "convention we have seen earlier so we",
    "start": "1139700",
    "end": "1141559"
  },
  {
    "text": "see that here we have a different the",
    "start": "1141559",
    "end": "1144140"
  },
  {
    "text": "libraries using something else than the",
    "start": "1144140",
    "end": "1146419"
  },
  {
    "text": "semantic convention",
    "start": "1146419",
    "end": "1148580"
  },
  {
    "text": "but still we can Leverage The attribute",
    "start": "1148580",
    "end": "1150740"
  },
  {
    "text": "that we have on our span to report new",
    "start": "1150740",
    "end": "1153260"
  },
  {
    "text": "sets of metrics so let's update our open",
    "start": "1153260",
    "end": "1155720"
  },
  {
    "text": "Telemetry collector configuration to add",
    "start": "1155720",
    "end": "1158539"
  },
  {
    "text": "those attributes we get as metric",
    "start": "1158539",
    "end": "1161299"
  },
  {
    "text": "Dimension to web on to report on the",
    "start": "1161299",
    "end": "1164000"
  },
  {
    "text": "metrics for the number of cores and the",
    "start": "1164000",
    "end": "1165679"
  },
  {
    "text": "latencies or the red metrics that we get",
    "start": "1165679",
    "end": "1167419"
  },
  {
    "text": "with this change tag getting new",
    "start": "1167419",
    "end": "1170120"
  },
  {
    "text": "dimension for graphql source which is",
    "start": "1170120",
    "end": "1172520"
  },
  {
    "text": "the query field name field path",
    "start": "1172520",
    "end": "1176860"
  },
  {
    "text": "and here you go so we could group them",
    "start": "1177320",
    "end": "1180860"
  },
  {
    "text": "by unit queries what do you think I",
    "start": "1180860",
    "end": "1183080"
  },
  {
    "text": "guess this could work but I mean if",
    "start": "1183080",
    "end": "1185539"
  },
  {
    "text": "we've got an API product we're simply",
    "start": "1185539",
    "end": "1187340"
  },
  {
    "text": "going to have too many similar looking",
    "start": "1187340",
    "end": "1189500"
  },
  {
    "text": "queries that are all different and it's",
    "start": "1189500",
    "end": "1191660"
  },
  {
    "text": "going to be very difficult to get any",
    "start": "1191660",
    "end": "1193160"
  },
  {
    "text": "kind of useful information",
    "start": "1193160",
    "end": "1195679"
  },
  {
    "text": "could there be any better way to group",
    "start": "1195679",
    "end": "1197299"
  },
  {
    "text": "them",
    "start": "1197299",
    "end": "1198090"
  },
  {
    "text": "[Music]",
    "start": "1198090",
    "end": "1200299"
  },
  {
    "text": "okay let's try to think about something",
    "start": "1200299",
    "end": "1203720"
  },
  {
    "text": "else let's look again back at the open",
    "start": "1203720",
    "end": "1206240"
  },
  {
    "text": "Telemetry semantic convention to see if",
    "start": "1206240",
    "end": "1208820"
  },
  {
    "text": "there's an attribute we could use for",
    "start": "1208820",
    "end": "1210320"
  },
  {
    "text": "that and maybe in the future we could",
    "start": "1210320",
    "end": "1213200"
  },
  {
    "text": "help contribute it to our library to the",
    "start": "1213200",
    "end": "1215840"
  },
  {
    "text": "instrumentation library to fix that so",
    "start": "1215840",
    "end": "1218360"
  },
  {
    "text": "we have again those three Fields the",
    "start": "1218360",
    "end": "1219919"
  },
  {
    "text": "operation name operation tab if this is",
    "start": "1219919",
    "end": "1222679"
  },
  {
    "text": "a query a magician or subscription and",
    "start": "1222679",
    "end": "1225620"
  },
  {
    "text": "the query itself",
    "start": "1225620",
    "end": "1228400"
  },
  {
    "text": "so what if we grouped the query",
    "start": "1228580",
    "end": "1232700"
  },
  {
    "text": "performance by the operation type and",
    "start": "1232700",
    "end": "1235880"
  },
  {
    "text": "name what do you think Hmm",
    "start": "1235880",
    "end": "1239120"
  },
  {
    "text": "that's much better but at the same time",
    "start": "1239120",
    "end": "1241280"
  },
  {
    "text": "we still lost a lot of detail for",
    "start": "1241280",
    "end": "1243380"
  },
  {
    "text": "example in query continents",
    "start": "1243380",
    "end": "1247419"
  },
  {
    "text": "we've got an average response time of",
    "start": "1247460",
    "end": "1249200"
  },
  {
    "text": "2.4 seconds",
    "start": "1249200",
    "end": "1250820"
  },
  {
    "text": "is this because most queries are deeply",
    "start": "1250820",
    "end": "1252440"
  },
  {
    "text": "nested",
    "start": "1252440",
    "end": "1254860"
  },
  {
    "text": "so maybe maybe we could try adding the",
    "start": "1256520",
    "end": "1259640"
  },
  {
    "text": "clients the client added the",
    "start": "1259640",
    "end": "1261860"
  },
  {
    "text": "identification so for each group of",
    "start": "1261860",
    "end": "1264260"
  },
  {
    "text": "operation name and type maybe we could",
    "start": "1264260",
    "end": "1268400"
  },
  {
    "text": "add the identification to the client",
    "start": "1268400",
    "end": "1270200"
  },
  {
    "text": "that is making to the call so you would",
    "start": "1270200",
    "end": "1272600"
  },
  {
    "text": "know if a mobile client is sending more",
    "start": "1272600",
    "end": "1275660"
  },
  {
    "text": "complex queries and where you should",
    "start": "1275660",
    "end": "1277460"
  },
  {
    "text": "look in particular",
    "start": "1277460",
    "end": "1279860"
  },
  {
    "text": "um I guess that might work but I guess",
    "start": "1279860",
    "end": "1281539"
  },
  {
    "text": "it's very much dependent on the client",
    "start": "1281539",
    "end": "1283039"
  },
  {
    "text": "specific query and those kind of",
    "start": "1283039",
    "end": "1284419"
  },
  {
    "text": "workloads I think we need to explore",
    "start": "1284419",
    "end": "1286640"
  },
  {
    "text": "this further with the community what do",
    "start": "1286640",
    "end": "1288559"
  },
  {
    "text": "you guys think",
    "start": "1288559",
    "end": "1290960"
  },
  {
    "text": "so we are almost at the end of our talk",
    "start": "1290960",
    "end": "1293600"
  },
  {
    "text": "and let's summarize what we have learned",
    "start": "1293600",
    "end": "1296360"
  },
  {
    "text": "so far",
    "start": "1296360",
    "end": "1298460"
  },
  {
    "text": "um but I'm sorry thank you so",
    "start": "1298460",
    "end": "1303200"
  },
  {
    "text": "um open Telemetry is helpful for",
    "start": "1303500",
    "end": "1306140"
  },
  {
    "text": "monitoring and troubleshooting graphql",
    "start": "1306140",
    "end": "1308179"
  },
  {
    "text": "queries in production but there are",
    "start": "1308179",
    "end": "1310520"
  },
  {
    "text": "still a couple of things we need to",
    "start": "1310520",
    "end": "1311720"
  },
  {
    "text": "improve together",
    "start": "1311720",
    "end": "1313480"
  },
  {
    "text": "the first one is the semantic convention",
    "start": "1313480",
    "end": "1316039"
  },
  {
    "text": "so you have seen there is a definition",
    "start": "1316039",
    "end": "1317480"
  },
  {
    "text": "and some Library don't use it and would",
    "start": "1317480",
    "end": "1320000"
  },
  {
    "text": "be super helpful to have all the",
    "start": "1320000",
    "end": "1322039"
  },
  {
    "text": "libraries using the concept the same",
    "start": "1322039",
    "end": "1323780"
  },
  {
    "text": "level of semantic convention and also we",
    "start": "1323780",
    "end": "1327380"
  },
  {
    "text": "are missing here a definition for",
    "start": "1327380",
    "end": "1328820"
  },
  {
    "text": "graphical errors because you have seen",
    "start": "1328820",
    "end": "1330799"
  },
  {
    "text": "that graphql doesn't work at the same",
    "start": "1330799",
    "end": "1332900"
  },
  {
    "text": "level as the standard HTTP call so we",
    "start": "1332900",
    "end": "1335240"
  },
  {
    "text": "would need additional attribute",
    "start": "1335240",
    "end": "1336980"
  },
  {
    "text": "information to understand what's",
    "start": "1336980",
    "end": "1338480"
  },
  {
    "text": "happening in graphql",
    "start": "1338480",
    "end": "1340100"
  },
  {
    "text": "it's neces it's required to understand",
    "start": "1340100",
    "end": "1342919"
  },
  {
    "text": "if there was an error to be able to",
    "start": "1342919",
    "end": "1344659"
  },
  {
    "text": "catch them but also if you think about",
    "start": "1344659",
    "end": "1346720"
  },
  {
    "text": "error based sampling where you just get",
    "start": "1346720",
    "end": "1349580"
  },
  {
    "text": "a certain amount of traces you want to",
    "start": "1349580",
    "end": "1351380"
  },
  {
    "text": "make sure that you capture all the",
    "start": "1351380",
    "end": "1353059"
  },
  {
    "text": "errors so you would need to have a kind",
    "start": "1353059",
    "end": "1354980"
  },
  {
    "text": "of attribute to be able to get the",
    "start": "1354980",
    "end": "1357200"
  },
  {
    "text": "graphql errors",
    "start": "1357200",
    "end": "1359480"
  },
  {
    "text": "and also the red method of monitoring",
    "start": "1359480",
    "end": "1362659"
  },
  {
    "text": "for graphql is useful but needs to be",
    "start": "1362659",
    "end": "1364880"
  },
  {
    "text": "extended to graphql specifics and those",
    "start": "1364880",
    "end": "1367340"
  },
  {
    "text": "specifics are a query type operation",
    "start": "1367340",
    "end": "1371120"
  },
  {
    "text": "name query depth maybe query depth maybe",
    "start": "1371120",
    "end": "1373580"
  },
  {
    "text": "query complexity and it also kind of",
    "start": "1373580",
    "end": "1375799"
  },
  {
    "text": "depend on the workload that you are",
    "start": "1375799",
    "end": "1377240"
  },
  {
    "text": "using if you're having different clients",
    "start": "1377240",
    "end": "1378919"
  },
  {
    "text": "or just one and who is making calls to",
    "start": "1378919",
    "end": "1382340"
  },
  {
    "text": "your graphql service",
    "start": "1382340",
    "end": "1385580"
  },
  {
    "text": "and using open Telemetry in production",
    "start": "1385580",
    "end": "1388159"
  },
  {
    "text": "the operation team now has all the",
    "start": "1388159",
    "end": "1390440"
  },
  {
    "text": "visibility they need to ensure the",
    "start": "1390440",
    "end": "1392419"
  },
  {
    "text": "reliability of the system",
    "start": "1392419",
    "end": "1395419"
  },
  {
    "text": "so thank you very much let us know if",
    "start": "1395419",
    "end": "1397880"
  },
  {
    "text": "you've got any questions however now or",
    "start": "1397880",
    "end": "1399740"
  },
  {
    "text": "online using this QR code and also a",
    "start": "1399740",
    "end": "1401960"
  },
  {
    "text": "copy of our slide decks available via",
    "start": "1401960",
    "end": "1403580"
  },
  {
    "text": "that QR code if you want to take it and",
    "start": "1403580",
    "end": "1405799"
  },
  {
    "text": "we've got the best stickers which are",
    "start": "1405799",
    "end": "1408140"
  },
  {
    "text": "special edition just for kubecon so make",
    "start": "1408140",
    "end": "1410360"
  },
  {
    "text": "sure you grab some on your way out thank",
    "start": "1410360",
    "end": "1411919"
  },
  {
    "text": "you",
    "start": "1411919",
    "end": "1414039"
  }
]