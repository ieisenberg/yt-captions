[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "hello and welcome to my talk about ebpf and kubernetes where appf came from how it's developed",
    "start": "80",
    "end": "6560"
  },
  {
    "text": "today and what it brings for the future and how it relates to kubernetes and taking one",
    "start": "6560",
    "end": "11840"
  },
  {
    "text": "example here of how it can scale kubernetes services i'm daniel berkman and i'm one of the",
    "start": "11840",
    "end": "18880"
  },
  {
    "text": "two eppf co-maintainers in the linux kernel so let's",
    "start": "18880",
    "end": "24000"
  },
  {
    "text": "dive right in kubernetes is basically eating the world today more and more enterprises are moving over to",
    "start": "24000",
    "end": "31599"
  },
  {
    "start": "25000",
    "end": "155000"
  },
  {
    "text": "containers and basically kubernetes is regarded as d-cloud os",
    "start": "31599",
    "end": "38000"
  },
  {
    "text": "these days and underneath all of that there's the linux kernel as a base foundation to provide all the",
    "start": "38000",
    "end": "44480"
  },
  {
    "text": "building blocks for kubernetes itself but also for the containers in terms of for example c groups network name spaces",
    "start": "44480",
    "end": "52079"
  },
  {
    "text": "in some of the core critical parts for those deployments they are delivered",
    "start": "52079",
    "end": "58800"
  },
  {
    "text": "to a so-called cni networking plug-in if we take the networking angle as an",
    "start": "58800",
    "end": "64400"
  },
  {
    "text": "example so what does this cni plug-in in kubernetes do basically",
    "start": "64400",
    "end": "69600"
  },
  {
    "text": "it provides general part connectivity and that means",
    "start": "69600",
    "end": "74720"
  },
  {
    "text": "when kubernetes is basically spawning a new part that cni plugin is then creating network",
    "start": "74720",
    "end": "81600"
  },
  {
    "text": "devices moving them into the new network namespaces and also assigning ip addresses",
    "start": "81600",
    "end": "89119"
  },
  {
    "text": "routing and so on basically it manages even several ip addresses an ip address",
    "start": "89119",
    "end": "95840"
  },
  {
    "text": "pool and some of the cni plug-ins",
    "start": "95840",
    "end": "101119"
  },
  {
    "text": "also take over kubernetes service handling in that they provide load balancing for",
    "start": "101119",
    "end": "106960"
  },
  {
    "text": "services and as well as network policies",
    "start": "106960",
    "end": "113520"
  },
  {
    "text": "given all that can be quite complex they also offer monitoring troubleshooting on top",
    "start": "113680",
    "end": "120079"
  },
  {
    "text": "of all that and today we are seeing two clear trends",
    "start": "120079",
    "end": "126000"
  },
  {
    "text": "one is the part density is increasing for a given",
    "start": "126000",
    "end": "132959"
  },
  {
    "text": "kubernetes node that means people are running more and more parts",
    "start": "132959",
    "end": "138080"
  },
  {
    "text": "in the same node and the other one is decreasing the part lifespan even down to seconds or a fraction of",
    "start": "138080",
    "end": "145200"
  },
  {
    "text": "seconds for their workloads there are some interesting user survey reports that",
    "start": "145200",
    "end": "151280"
  },
  {
    "text": "also back up this this data there are challenges from the operating",
    "start": "151280",
    "end": "157360"
  },
  {
    "start": "155000",
    "end": "225000"
  },
  {
    "text": "system kernel side of course with that because the linux kernel or general",
    "start": "157360",
    "end": "163280"
  },
  {
    "text": "kernel has to keep up with all the performance in skylab scalability requirements that",
    "start": "163280",
    "end": "168879"
  },
  {
    "text": "users have in their data center as well as the increasing complexity",
    "start": "168879",
    "end": "174959"
  },
  {
    "text": "of kernel subsystems one issue with that is that linux kernel is",
    "start": "174959",
    "end": "181440"
  },
  {
    "text": "not allowed to break user space that's of course a good thing but that also means that we have to keep",
    "start": "181440",
    "end": "187120"
  },
  {
    "text": "all the old legacy from five or ten years ago around and keep it",
    "start": "187120",
    "end": "192879"
  },
  {
    "text": "functioning so that we keep applications working and",
    "start": "192879",
    "end": "198159"
  },
  {
    "text": "that of course makes the kernel more complex and it can affect the fast path as well",
    "start": "198159",
    "end": "205120"
  },
  {
    "text": "it means that the kernel often suffers a feature creeping you can call it feature creeping",
    "start": "205280",
    "end": "211200"
  },
  {
    "text": "normality what does it mean well users at developers add more and more features to the linux kernel",
    "start": "211200",
    "end": "218319"
  },
  {
    "text": "it becomes more complex and nobody is potentially able to understand all of",
    "start": "218319",
    "end": "223599"
  },
  {
    "text": "those there's actually an interesting definition on creeping normality",
    "start": "223599",
    "end": "229280"
  },
  {
    "text": "on wikipedia even um and it's defined as a process by which a major change that would otherwise",
    "start": "229280",
    "end": "237599"
  },
  {
    "text": "be rejected when proposed as is can be accepted as normal or seen as",
    "start": "237599",
    "end": "244480"
  },
  {
    "text": "acceptable if it happens through small and incremental unnoticeable changes",
    "start": "244480",
    "end": "251360"
  },
  {
    "text": "and there's actually an interesting quote on that from linus torvalds on crazy new features for the colonel he",
    "start": "251360",
    "end": "258639"
  },
  {
    "text": "says he can work with crazy people it's not a problem but they need to sell their crazy stuff with",
    "start": "258639",
    "end": "265600"
  },
  {
    "text": "non-crazy rational arguments in small well-defined pieces",
    "start": "265600",
    "end": "270639"
  },
  {
    "text": "so when he's asking for killer features he wants actually to um",
    "start": "270639",
    "end": "277759"
  },
  {
    "text": "he wants actually those developers to log him into a safe and cozy world where the stuff that they are pushing is",
    "start": "277759",
    "end": "284880"
  },
  {
    "text": "useful for core kernel developers first in other words like those crazy features",
    "start": "284880",
    "end": "291120"
  },
  {
    "text": "should be wrapped as a torch and horse they should look obviously good at first sight and that's",
    "start": "291120",
    "end": "297680"
  },
  {
    "start": "297000",
    "end": "361000"
  },
  {
    "text": "pretty much what happened to ebpf back in the days when it first got merged",
    "start": "297680",
    "end": "303120"
  },
  {
    "text": "so it's a crazy new kernel feature but in the long term for the linux kernel it actually reduces the",
    "start": "303120",
    "end": "310080"
  },
  {
    "text": "kernel's feature creeping normality because all the weird corner cases that users",
    "start": "310080",
    "end": "317440"
  },
  {
    "text": "have and ask from the kernel instead of having them hard coded in the",
    "start": "317440",
    "end": "324479"
  },
  {
    "text": "kernel and potentially in the kernel's fast path they can instead live inside an ebpf program",
    "start": "324479",
    "end": "331680"
  },
  {
    "text": "where no one else has to suffer from potential performance",
    "start": "331680",
    "end": "337520"
  },
  {
    "text": "degradations meaning it allows to keep the kernels fast by fast",
    "start": "337520",
    "end": "343520"
  },
  {
    "text": "and also it allows to make the kernel fully and safely",
    "start": "343520",
    "end": "349039"
  },
  {
    "text": "programmable so users won't crash the kernel an ebpf has been designed to",
    "start": "349039",
    "end": "355520"
  },
  {
    "text": "solve real-world production issues and it still is with that in mind today",
    "start": "355520",
    "end": "361840"
  },
  {
    "text": "how does it look like ebpf is defined um or can be can be written in a",
    "start": "361840",
    "end": "368479"
  },
  {
    "text": "c-like language and that can for example either be generated",
    "start": "368479",
    "end": "374080"
  },
  {
    "text": "or managed by another user-space application or agent in our case here",
    "start": "374080",
    "end": "380080"
  },
  {
    "text": "psyllium is one example sodium is a kubernetes cni what i mentioned earlier and",
    "start": "380080",
    "end": "387199"
  },
  {
    "text": "that program gets compiled through a compiler in that case the llvm compiler suite and",
    "start": "387199",
    "end": "394000"
  },
  {
    "text": "it can generate a bpf object file and that object file is being handled by a bpf",
    "start": "394000",
    "end": "399440"
  },
  {
    "text": "loader where it creates all the necessary steps and pieces to load it into the",
    "start": "399440",
    "end": "405520"
  },
  {
    "text": "kernel those bpf instructions that have been generated",
    "start": "405520",
    "end": "410560"
  },
  {
    "text": "and they are passing inside the kernel to a bpf verifier which makes sure that for",
    "start": "410560",
    "end": "417360"
  },
  {
    "text": "example memory access is not happening out of bounds it cannot crash it or loop forever or all these",
    "start": "417360",
    "end": "423919"
  },
  {
    "text": "sort of things and once it determined that the program is safe it will be just in time compiled",
    "start": "423919",
    "end": "430479"
  },
  {
    "text": "in order to generate native code that can be run on the underlying",
    "start": "430479",
    "end": "436560"
  },
  {
    "text": "architecture for example x86 and in order to share",
    "start": "436560",
    "end": "441759"
  },
  {
    "text": "state bpf programs can use so called bpf maps those are shared storage that is",
    "start": "441759",
    "end": "448720"
  },
  {
    "text": "accessible from bpf program site but also from the users based site",
    "start": "448720",
    "end": "454240"
  },
  {
    "text": "and bpf needs to be triggered to an event and in case of networking which is the example here",
    "start": "454240",
    "end": "460720"
  },
  {
    "text": "that event is of course network packet so network packet basically triggers the execution of the",
    "start": "460720",
    "end": "466240"
  },
  {
    "text": "bpf program the bpf program can mangle the packet it can forward it and in the end it returns a",
    "start": "466240",
    "end": "474960"
  },
  {
    "text": "verdict so aside from forwarding what is also supported is dropping or pushing it up the stack",
    "start": "474960",
    "end": "480000"
  },
  {
    "text": "or and so on and the crucial part in all of that is again that it cannot crash the kernel",
    "start": "480000",
    "end": "486639"
  },
  {
    "text": "it is as fast as a kernel module and it provides stable api guarantees so what does that",
    "start": "486639",
    "end": "492000"
  },
  {
    "text": "mean it basically means that when the ppf program keeps working on an",
    "start": "492000",
    "end": "499520"
  },
  {
    "text": "old kernel version it will also continue to keep working on a new kernel version",
    "start": "499520",
    "end": "504720"
  },
  {
    "text": "without having to change the program itself it's similar to user space like the contract that the",
    "start": "504720",
    "end": "511840"
  },
  {
    "text": "kernel has to use this base where we don't break applications and kernel updates this similar thing is happening for the",
    "start": "511840",
    "end": "519440"
  },
  {
    "text": "ebpf world for example for the networking case",
    "start": "519440",
    "end": "525040"
  },
  {
    "start": "525000",
    "end": "654000"
  },
  {
    "text": "how does the packet flow look like in the traditional",
    "start": "525040",
    "end": "530880"
  },
  {
    "text": "case of kubernetes where it's using the cube proxy component in order to handle",
    "start": "531120",
    "end": "537040"
  },
  {
    "text": "kubernetes services what you can see here is that packets coming from a",
    "start": "537040",
    "end": "542640"
  },
  {
    "text": "nic are entering the stack the linux kernel is creating a packet representation called",
    "start": "542640",
    "end": "548800"
  },
  {
    "text": "skb then it's like pushing this the packet to the um",
    "start": "548800",
    "end": "555440"
  },
  {
    "text": "traffic control ingress hook and then all these orange boxes are net filter ap tables related so there's",
    "start": "555440",
    "end": "561440"
  },
  {
    "text": "pre-routing hooks then there's the actual routing lookup it determines that the packet needs to be forwarded to a different networking",
    "start": "561440",
    "end": "567600"
  },
  {
    "text": "device then there are just post routing hooks again tc egress one",
    "start": "567600",
    "end": "572880"
  },
  {
    "text": "and then it can determine that the program has to go through a local part then it",
    "start": "572880",
    "end": "578560"
  },
  {
    "text": "will forward it to a local weave device for example or a local service endpoint",
    "start": "578560",
    "end": "585279"
  },
  {
    "text": "or it will go back out of the node if the packet if the packet is destined at the remote",
    "start": "585279",
    "end": "592240"
  },
  {
    "text": "service endpoint on a different node can be the same network interface or a different one",
    "start": "592240",
    "end": "598480"
  },
  {
    "text": "so the same packet flow under ebpf for example when used with psyllium",
    "start": "598480",
    "end": "605200"
  },
  {
    "text": "looks quite different in the sense that a lot of the overhead and orange boxes",
    "start": "605200",
    "end": "611760"
  },
  {
    "text": "can be avoided simply by pushing the packet from the dc ingress right to the tce grass hook and",
    "start": "611760",
    "end": "617200"
  },
  {
    "text": "then forwarding it that way so psyllium would allow with together",
    "start": "617200",
    "end": "622320"
  },
  {
    "text": "with the ebbs with its ebpf data path to accomplish that and it can even go crazier than that",
    "start": "622320",
    "end": "628399"
  },
  {
    "text": "in the sense that you could forward those packets to remote service endpoints at the xtp",
    "start": "628399",
    "end": "634320"
  },
  {
    "text": "layer that xtp box basically called the express data path and it",
    "start": "634320",
    "end": "639839"
  },
  {
    "text": "allows for running bpf programs inside the driver layer and forwarding it them directly from there",
    "start": "639839",
    "end": "646320"
  },
  {
    "text": "without having to push it up to stack so we can save all the additional overhead and be super",
    "start": "646320",
    "end": "652160"
  },
  {
    "text": "fast so how did it look in the very early days",
    "start": "652160",
    "end": "657279"
  },
  {
    "start": "654000",
    "end": "900000"
  },
  {
    "text": "of bpf so basically we're speaking about pre 2013. you can consider it as the sdn landscape",
    "start": "657279",
    "end": "664880"
  },
  {
    "text": "for linux at that time if you will so back in the days there was openvswitch project",
    "start": "664880",
    "end": "670560"
  },
  {
    "text": "or called obs the traffic control and also the net filter subsystem consisting of for example ip tables ipvs",
    "start": "670560",
    "end": "678560"
  },
  {
    "text": "nf tables was there back then and those allowed you to let's say",
    "start": "678560",
    "end": "684320"
  },
  {
    "text": "program the data path ppf back then was used for tcp them to filter network packets",
    "start": "684320",
    "end": "691279"
  },
  {
    "text": "inside the kernel as early as possible and without crashing it and it was also used for seccomp in",
    "start": "691279",
    "end": "696399"
  },
  {
    "text": "order to do system call filtering but its use was very limited and also constrained not",
    "start": "696399",
    "end": "704399"
  },
  {
    "text": "the same as you can as we have today with the ebpf there was also a future creep and often",
    "start": "704399",
    "end": "710320"
  },
  {
    "text": "also code duplication between tc and net filter because both subsystems were sort of competing",
    "start": "710320",
    "end": "716000"
  },
  {
    "text": "with each other and open research back then was considered like the most advanced data plane in the",
    "start": "716000",
    "end": "722800"
  },
  {
    "text": "networking stack but it didn't integrate well with networking",
    "start": "722800",
    "end": "728079"
  },
  {
    "text": "and it was also considered as sort of a frankenstein by",
    "start": "728079",
    "end": "733120"
  },
  {
    "text": "other core developers so yeah so how does it compare those subsystems still exist",
    "start": "733120",
    "end": "739680"
  },
  {
    "text": "today so how do they compare to ebpf you can think of it this way that open with htc and net filter they allow you",
    "start": "739680",
    "end": "746480"
  },
  {
    "text": "to program the data path but only if the data path knows what you want to do only if those concrete",
    "start": "746480",
    "end": "753920"
  },
  {
    "text": "building blocks are in the kernel as code and ebpf instead",
    "start": "753920",
    "end": "761360"
  },
  {
    "text": "lets you freely create that data path instead because you provide everything",
    "start": "761360",
    "end": "767920"
  },
  {
    "text": "through a bpf program so the extended bpf that",
    "start": "767920",
    "end": "775519"
  },
  {
    "text": "initial first patch set was presented by alexis the wrightof back in",
    "start": "775519",
    "end": "781760"
  },
  {
    "text": "the days in 2013 as a big patch bomb it was like caused",
    "start": "781760",
    "end": "787200"
  },
  {
    "text": "plenty of discussions but it was considered too intrusive back then also nf tables was sort of on",
    "start": "787200",
    "end": "793360"
  },
  {
    "text": "the rise it was inspired by the old epf that tcp them had and",
    "start": "793360",
    "end": "800480"
  },
  {
    "text": "people weren't quite happy because it would like that patch said would add another bpf interpreter so two",
    "start": "800480",
    "end": "806240"
  },
  {
    "text": "would have to be maintained it was sort of a hurdle and it eventually got rejected",
    "start": "806240",
    "end": "811920"
  },
  {
    "text": "so you can see that here that linux the linux crazy rule of new kernel",
    "start": "811920",
    "end": "818320"
  },
  {
    "text": "features of light that i mentioned earlier you need to chuck it up into small incremental pieces to",
    "start": "818320",
    "end": "824480"
  },
  {
    "text": "give a safe and cozy world and in 2014 basically",
    "start": "824480",
    "end": "830639"
  },
  {
    "text": "we reworked the whole patch set and made it merchable and it also got merged",
    "start": "830639",
    "end": "836240"
  },
  {
    "text": "into the kernel so that's like the initial code on ebpf that we had and",
    "start": "836240",
    "end": "844480"
  },
  {
    "text": "what it did it was basically replacing the old bpf interpreter entirely so the kernel wouldn't have the",
    "start": "844480",
    "end": "850320"
  },
  {
    "text": "old tcp anymore but instead the new ebpf1 and the instructions instruction set got",
    "start": "850320",
    "end": "855680"
  },
  {
    "text": "heavily extended and the tcp dump bpf language back then",
    "start": "855680",
    "end": "861360"
  },
  {
    "text": "got translated inside the kernel to the new representation and later also the verifier and jit pieces got added and much more work on",
    "start": "861360",
    "end": "868320"
  },
  {
    "text": "top of that and we basically lexi myself basically became maintainers",
    "start": "868320",
    "end": "873839"
  },
  {
    "text": "because we spent most of the time hacking on working on epf on the kernel and overseeing the development since",
    "start": "873839",
    "end": "880480"
  },
  {
    "text": "then that's where it happened basically where david muller the networking",
    "start": "880480",
    "end": "886240"
  },
  {
    "text": "kernel maintainer applied the patch said yeah thanks a lot for that and what else happened in that year",
    "start": "886240",
    "end": "892320"
  },
  {
    "text": "actually it's quite interesting 2014 also the first kubernetes patch went public",
    "start": "892320",
    "end": "900480"
  },
  {
    "start": "900000",
    "end": "989000"
  },
  {
    "text": "so in 2015 the development of ebpf moved into two directions",
    "start": "900480",
    "end": "905920"
  },
  {
    "text": "networking and tracing and a major milestone that is still the base foundation for",
    "start": "905920",
    "end": "912639"
  },
  {
    "text": "all the work is that the bbf backend got merged into upstream llvm into the compiler suite so",
    "start": "912639",
    "end": "919519"
  },
  {
    "text": "you you saw that you were able to compile the c code into ppf instructions",
    "start": "919519",
    "end": "924959"
  },
  {
    "text": "and the first uh patch set so alexi worked mostly focused on tracing back in the",
    "start": "924959",
    "end": "931440"
  },
  {
    "text": "day and he added a batch that you allow to attach ebpf to tracing",
    "start": "931440",
    "end": "936959"
  },
  {
    "text": "to allow for system observability and i was mostly focusing on networking",
    "start": "936959",
    "end": "943240"
  },
  {
    "text": "[Music] and made tc the tc subsystem programmable to the",
    "start": "943240",
    "end": "948880"
  },
  {
    "text": "true ebpf in order to have a networking data path that is flexible and also fast",
    "start": "948880",
    "end": "956079"
  },
  {
    "text": "we also made the dc lockless so that it would be fast without any cpu",
    "start": "956079",
    "end": "963199"
  },
  {
    "text": "contention and also add next to an existing ingress also an egress hook so you have",
    "start": "963199",
    "end": "968240"
  },
  {
    "text": "both attachment points to see all the traffic yeah so there was plenty of other work",
    "start": "968240",
    "end": "974160"
  },
  {
    "text": "on top of that and back in 2015 the bcc project first got announced",
    "start": "974160",
    "end": "979759"
  },
  {
    "text": "that is a tracing front end and used by many people today to get introspection to the system and",
    "start": "979759",
    "end": "986399"
  },
  {
    "text": "solve production issues in 2016 there was another major milestone on the networking side",
    "start": "986399",
    "end": "993440"
  },
  {
    "start": "989000",
    "end": "1059000"
  },
  {
    "text": "the express data path also in short xtp got merged and that basically allowed to",
    "start": "993440",
    "end": "999040"
  },
  {
    "text": "attach bp of ppf programs into the driver's ingress layer without having to go up",
    "start": "999040",
    "end": "1006320"
  },
  {
    "text": "into the stack and also like the first networking card um came up in driver that was merged",
    "start": "1006320",
    "end": "1013759"
  },
  {
    "text": "that i would allow for offloading ppf programs the sodium project",
    "start": "1013759",
    "end": "1019839"
  },
  {
    "text": "was first announced in 2016 as well it was built for container networking and",
    "start": "1019839",
    "end": "1027839"
  },
  {
    "text": "back then mainly targeted for docker because kubernetes was still in the very early days not as",
    "start": "1027839",
    "end": "1035199"
  },
  {
    "text": "heavily used as today and it would allow for efficient label based policy nat 64 you would be",
    "start": "1036000",
    "end": "1043520"
  },
  {
    "text": "able to create tunnel meshes with vxlan and geneve and basically have an ebpf based data plane",
    "start": "1043520",
    "end": "1049200"
  },
  {
    "text": "the whole data plane forwarding happens through ebpf and no more docker or ovs bridge devices",
    "start": "1049200",
    "end": "1056160"
  },
  {
    "text": "and so on so that could be avoided entirely 2016-17 was basically the year where",
    "start": "1056160",
    "end": "1061840"
  },
  {
    "start": "1059000",
    "end": "1149000"
  },
  {
    "text": "ebpf began taking over production environments which is really exciting",
    "start": "1061840",
    "end": "1067360"
  },
  {
    "text": "brandon gregg from netflix called out the linux bpf superpowers he's been working on",
    "start": "1067360",
    "end": "1072960"
  },
  {
    "text": "tracing heavily on creating the necessary needed tools for the bcc project and he says it's",
    "start": "1072960",
    "end": "1081280"
  },
  {
    "text": "compared to the d trace where he has like 13 years of experience ebpf is worth way more and exciting even",
    "start": "1081280",
    "end": "1089120"
  },
  {
    "text": "though and just just in this short time span the capabilities are staggering",
    "start": "1089120",
    "end": "1095280"
  },
  {
    "text": "and facebook announced that they are were replacing their at that time",
    "start": "1095280",
    "end": "1101520"
  },
  {
    "text": "existing ipvs load balancing infrastructure over and they they migrated away from",
    "start": "1101520",
    "end": "1107440"
  },
  {
    "text": "that filter entirely to ebpf and they were attaching those programs to the xtp hook in order",
    "start": "1107440",
    "end": "1113679"
  },
  {
    "text": "to do layer 4 load balancing and ddos production and since 2017 every packet that goes to",
    "start": "1113679",
    "end": "1122160"
  },
  {
    "text": "facebook.com basically passes through xtp and ebbf so it really is battle",
    "start": "1122160",
    "end": "1127679"
  },
  {
    "text": "tested cloudflare basically also saw that potential",
    "start": "1127679",
    "end": "1132880"
  },
  {
    "text": "and they migrated from their net filter components away to ebpf as well similarly relying on x",
    "start": "1132880",
    "end": "1140400"
  },
  {
    "text": "on the xtp layer for their load balancing and ddos mitigation and in also went fully into production",
    "start": "1140400",
    "end": "1147039"
  },
  {
    "text": "in 2018 actually so yeah the evpf community grew and with",
    "start": "1147039",
    "end": "1152400"
  },
  {
    "start": "1149000",
    "end": "1304000"
  },
  {
    "text": "that also the features in the kernel and in order to handle all this",
    "start": "1152400",
    "end": "1158400"
  },
  {
    "text": "incoming kernel patches alexey myself and david miller a networking maintainer we sat together and",
    "start": "1158400",
    "end": "1164320"
  },
  {
    "text": "basically decided that ebbf has to become its own kernel subsystem so since then alexi and myself we manage",
    "start": "1164320",
    "end": "1170880"
  },
  {
    "text": "our own linux kernel trees for bpf and bpf next where all the features and fixes land",
    "start": "1170880",
    "end": "1177280"
  },
  {
    "text": "we have our own main list and we are pushing and collecting all the code that the whole community",
    "start": "1177280",
    "end": "1183520"
  },
  {
    "text": "contributes to bpf and handing that over to david miller and he",
    "start": "1183520",
    "end": "1188559"
  },
  {
    "text": "pushes this to linus torvalds which who merges it into the upstream kernel",
    "start": "1188559",
    "end": "1195520"
  },
  {
    "text": "back in that year we also worked on ebpf for ktls",
    "start": "1195520",
    "end": "1202480"
  },
  {
    "text": "what does it mean so ktls is a feature that allows to offload the",
    "start": "1202480",
    "end": "1210080"
  },
  {
    "text": "tls handling for example from openssl into the kernel and that allows the",
    "start": "1210080",
    "end": "1215520"
  },
  {
    "text": "kernel to also gain visibility so bpf programs could be attacked",
    "start": "1215520",
    "end": "1220960"
  },
  {
    "text": "can be attached and they can introspect the data and then enforce policy and these days actually",
    "start": "1220960",
    "end": "1226640"
  },
  {
    "text": "open ssl has it natively integrated which is great",
    "start": "1226640",
    "end": "1232720"
  },
  {
    "text": "and in the same year there was more tools got added for allowing to",
    "start": "1232880",
    "end": "1239679"
  },
  {
    "text": "introspect the kernel about what's going on in bpf land what programs are loaded what maps do we have",
    "start": "1239679",
    "end": "1245760"
  },
  {
    "text": "and therefore bpf tool got added which is a tool that still gets extended with all the features",
    "start": "1245760",
    "end": "1251440"
  },
  {
    "text": "today and also in or in order to ease application development for users",
    "start": "1251440",
    "end": "1259280"
  },
  {
    "text": "the lib bpf was added which is a c-based library",
    "start": "1259280",
    "end": "1264320"
  },
  {
    "text": "that takes over all the loading of bpf programs so that applications don't have",
    "start": "1264320",
    "end": "1269760"
  },
  {
    "text": "to deal with that because it can get quite complicated in 2018 sodium 1.0 was announced and",
    "start": "1269760",
    "end": "1277840"
  },
  {
    "text": "that basically first brought the ppf revolution to kubernetes networking and security it was added as",
    "start": "1277840",
    "end": "1285280"
  },
  {
    "text": "a cni plug-in in order to integrate into kubernetes and it allows for identity-based",
    "start": "1285280",
    "end": "1292799"
  },
  {
    "text": "policies from layer 3 up to layer 7 and also cluster ip services that were handled",
    "start": "1292799",
    "end": "1299760"
  },
  {
    "text": "through bpf and translated there efficiently",
    "start": "1299760",
    "end": "1304799"
  },
  {
    "start": "1304000",
    "end": "1379000"
  },
  {
    "text": "a component called btf or bpf type format was added into the kernel",
    "start": "1304799",
    "end": "1310880"
  },
  {
    "text": "it's basically a metadata format similar to debugging data that we have",
    "start": "1310880",
    "end": "1316480"
  },
  {
    "text": "with dwarf but it's significantly smaller in size and for the first time the kernel became",
    "start": "1316480",
    "end": "1322640"
  },
  {
    "text": "self-descriptive what does it mean from a running kernel you can actually it ships its own data format and",
    "start": "1322640",
    "end": "1330559"
  },
  {
    "text": "internal structures and you can introspect them and that's basically btf today is is the base for all the future",
    "start": "1330559",
    "end": "1337840"
  },
  {
    "text": "features like compile runs run everywhere kernel live patching to bpf global",
    "start": "1337840",
    "end": "1346000"
  },
  {
    "text": "data handling and so on there are many new features being added and they all rely on the fact that btf",
    "start": "1346000",
    "end": "1353120"
  },
  {
    "text": "can provide this rich metadata",
    "start": "1353120",
    "end": "1357360"
  },
  {
    "text": "in 2018 the linux plumbers conference also first got a bpf microconference and we also co-organized the",
    "start": "1358159",
    "end": "1365679"
  },
  {
    "text": "networking track and it got filled almost like half the talks with bpf and xdp topics because it's",
    "start": "1365679",
    "end": "1372799"
  },
  {
    "text": "an exciting feature and more and more people are using it and solving problems and",
    "start": "1372799",
    "end": "1379120"
  },
  {
    "start": "1379000",
    "end": "1529000"
  },
  {
    "text": "yeah af xdp is another uh socket type in linux networking that",
    "start": "1379120",
    "end": "1386080"
  },
  {
    "text": "got merged in the same year and what it basically provides is it provides zero copy for network packets right out",
    "start": "1386080",
    "end": "1393200"
  },
  {
    "text": "of the driver layer and you can then push them into user space it's similar to or it offers a similar",
    "start": "1393200",
    "end": "1401760"
  },
  {
    "text": "feature to what the dbdk toolkit for example does except",
    "start": "1401760",
    "end": "1406799"
  },
  {
    "text": "in the case of dbdk those network drivers have to be written and maintained in user space and with af xdp",
    "start": "1406799",
    "end": "1413360"
  },
  {
    "text": "you can get the same performance benefits while reusing kernel drivers so that",
    "start": "1413360",
    "end": "1420080"
  },
  {
    "text": "network device management is much much easier and all that happens at the xtp layer",
    "start": "1420080",
    "end": "1426720"
  },
  {
    "text": "that's why it's called af xdp and the bpf program that can be attached to it allows for steering this into the",
    "start": "1426720",
    "end": "1433520"
  },
  {
    "text": "socket there's also the bp filter prototype that we've worked on it and this allowed",
    "start": "1433520",
    "end": "1438880"
  },
  {
    "text": "for translating iptable rules into ppf to user mode",
    "start": "1438880",
    "end": "1444080"
  },
  {
    "text": "driver this was basically the first prototype where we can",
    "start": "1444080",
    "end": "1449360"
  },
  {
    "text": "take an existing iptables binary and generate epf underneath without the user",
    "start": "1449360",
    "end": "1454720"
  },
  {
    "text": "having to know or realize some of those components are used today also for extending",
    "start": "1454720",
    "end": "1460960"
  },
  {
    "text": "the kernel in other areas in 2018-19 ppf trace",
    "start": "1460960",
    "end": "1467600"
  },
  {
    "text": "first got announced next to bcc epf trace traces basically those are basically d2 main tracing",
    "start": "1467600",
    "end": "1474960"
  },
  {
    "text": "front ends for bpf brandon greg calls it dtrace 2.0 for linux because of his capabilities",
    "start": "1474960",
    "end": "1481600"
  },
  {
    "text": "and it allows it has a easy to use front end you don't have to",
    "start": "1481600",
    "end": "1487440"
  },
  {
    "text": "code c programs you can simply use one liners efficiently he also wrote an 880 page fake book on",
    "start": "1487440",
    "end": "1495919"
  },
  {
    "text": "bpf tracing which is really exciting his first book on first major book on bpf and he saw",
    "start": "1495919",
    "end": "1502559"
  },
  {
    "text": "brennan crack is also working on the new one for 2020 on his second edition of the system's",
    "start": "1502559",
    "end": "1508080"
  },
  {
    "text": "performance covering large parts with bpf and tracing as well",
    "start": "1508080",
    "end": "1514480"
  },
  {
    "text": "in that year also the psyllium 1.6 release actually appeared and for the first time it was replacing the iptable",
    "start": "1514480",
    "end": "1521279"
  },
  {
    "text": "based cube proxy component from kubernetes through bpf so all that service handling could be",
    "start": "1521279",
    "end": "1527679"
  },
  {
    "text": "done efficiently there are many other kernel features",
    "start": "1527679",
    "end": "1532880"
  },
  {
    "start": "1529000",
    "end": "1649000"
  },
  {
    "text": "added some of it like for the first time allowed live patching on the kernel",
    "start": "1532880",
    "end": "1538559"
  },
  {
    "text": "from the bpf core infrastructure it's been used to optimize the data path even more heavily",
    "start": "1538559",
    "end": "1545600"
  },
  {
    "text": "in order to avoid some of the issues that",
    "start": "1545600",
    "end": "1553120"
  },
  {
    "text": "we were seeing from the cpu box that where red bulletins had to be introduced",
    "start": "1553120",
    "end": "1558720"
  },
  {
    "text": "and it's also the base for several other features such as epf trampolines and so on if",
    "start": "1558720",
    "end": "1564880"
  },
  {
    "text": "you're interested you should look that up it's really an exciting topic is also the first limitation only",
    "start": "1564880",
    "end": "1570480"
  },
  {
    "text": "bpf con conference among the ppf kernel experts to exchange and discuss issues and features",
    "start": "1570480",
    "end": "1577600"
  },
  {
    "text": "and that's basically from the community side alternating with the linux plumbers conference and a half of your cadence the bpf",
    "start": "1577600",
    "end": "1584799"
  },
  {
    "text": "backend for gcc finally got merged as well so both gcc and lvm the two major compiler suites have ppf",
    "start": "1584799",
    "end": "1592320"
  },
  {
    "text": "back-end support eventually and in coming more to the present there's still",
    "start": "1592320",
    "end": "1599120"
  },
  {
    "text": "like a rentless growth on the whole bpf community and features and we are seeing a third",
    "start": "1599120",
    "end": "1605279"
  },
  {
    "text": "major direction in bpf so next to networking and tracing it's also ramping up on security",
    "start": "1605279",
    "end": "1612400"
  },
  {
    "text": "so google upstream their bpf lsm linux security module support that",
    "start": "1612400",
    "end": "1618240"
  },
  {
    "text": "they're using in their server fleet and aside from that also",
    "start": "1618240",
    "end": "1626240"
  },
  {
    "text": "that was based 2019 was basically the year of all the cpu bugs so bpf also had to protect the gain",
    "start": "1626240",
    "end": "1632400"
  },
  {
    "text": "spectra and that's actually quite interesting because the bpf verifier does a lot of work sometimes even more work",
    "start": "1632400",
    "end": "1638320"
  },
  {
    "text": "analyzing the programs that compilers do and it's here it even goes into analyzing the",
    "start": "1638320",
    "end": "1644720"
  },
  {
    "text": "safety of speculative program paths then on the xdp",
    "start": "1644720",
    "end": "1652640"
  },
  {
    "start": "1649000",
    "end": "1704000"
  },
  {
    "text": "land we there was a major milestone in terms of cloud providers because aws",
    "start": "1652640",
    "end": "1659600"
  },
  {
    "text": "and azure finally had xdp support for the networking drivers and that actually allows for easy",
    "start": "1659600",
    "end": "1666399"
  },
  {
    "text": "consumption for xdp for the masses because it's super easy to just create nodes",
    "start": "1666399",
    "end": "1674000"
  },
  {
    "text": "instances with accelerated networking and then you can use xdp on top of that",
    "start": "1674000",
    "end": "1680640"
  },
  {
    "text": "one of those users that can actually benefit as well is chilean because in the 1.8 release",
    "start": "1681120",
    "end": "1686640"
  },
  {
    "text": "it added xtp based service load balancing for kubernetes in order to efficiently",
    "start": "1686640",
    "end": "1694240"
  },
  {
    "text": "use the cpu for networking in a better way compared to the net filter based",
    "start": "1694240",
    "end": "1701200"
  },
  {
    "text": "approach for q proxy on the kernel site many other",
    "start": "1701200",
    "end": "1706399"
  },
  {
    "start": "1704000",
    "end": "1769000"
  },
  {
    "text": "interesting events happened here in that year facebook for example added a bpf based tcp congestion control",
    "start": "1706399",
    "end": "1713120"
  },
  {
    "text": "module that allows for experimentation for the data centers to quickly deploy",
    "start": "1713120",
    "end": "1718720"
  },
  {
    "text": "and add new features for the congestion control in tcp and also microsoft they converted their",
    "start": "1718720",
    "end": "1725520"
  },
  {
    "text": "windows monitoring tools which which are called sysmon over to linux",
    "start": "1725520",
    "end": "1730799"
  },
  {
    "text": "based on bpf what you can see here is a tweet from the microsoft azure cto",
    "start": "1730799",
    "end": "1736480"
  },
  {
    "text": "that is announcing it so yeah like in in those few years there",
    "start": "1736480",
    "end": "1743600"
  },
  {
    "text": "people are see there was actually like it's actually interesting to observe this tremendous um",
    "start": "1743600",
    "end": "1750399"
  },
  {
    "text": "change in the linux kernel and people are calling it one of the major os changes in the last",
    "start": "1750399",
    "end": "1757360"
  },
  {
    "text": "50 years and brennan craig actually says it's one of the biggest operating system changes that he has",
    "start": "1757360",
    "end": "1764080"
  },
  {
    "text": "seen his career and is thrilling to be part of it i can only agree with that",
    "start": "1764080",
    "end": "1770000"
  },
  {
    "start": "1769000",
    "end": "1849000"
  },
  {
    "text": "ebbf in numbers so basically the kernel community today if you look at how many patches have",
    "start": "1770159",
    "end": "1775840"
  },
  {
    "text": "been contributed it's around 5000 patches that went into the bpf subsystem by around 350 contributors which is quite nice",
    "start": "1775840",
    "end": "1783279"
  },
  {
    "text": "to have such a large community these days they are on average every day around 50 new emails on the",
    "start": "1783279",
    "end": "1790000"
  },
  {
    "text": "bpf kernel mailing list every day from monday to sunday and",
    "start": "1790000",
    "end": "1795279"
  },
  {
    "text": "around four patches on the ppf kernel subsystems are applied by alexey",
    "start": "1795279",
    "end": "1801760"
  },
  {
    "text": "myself there are many different program types and maps but the interesting",
    "start": "1801760",
    "end": "1808000"
  },
  {
    "text": "part is on the linux kernel that the bpf subsystem has over 3500",
    "start": "1808000",
    "end": "1813120"
  },
  {
    "text": "test cases usually kernel developers are not that good in writing unit tests or self tests but bpf",
    "start": "1813120",
    "end": "1819279"
  },
  {
    "text": "is one of the most tested subsystem these days",
    "start": "1819279",
    "end": "1824320"
  },
  {
    "text": "and aside from alexia myself as kernel maintainers for bpf they are also a team of six other core reviewers and major contributors",
    "start": "1824320",
    "end": "1832720"
  },
  {
    "text": "that help with the patch load that is coming at us and they're from from the companies",
    "start": "1832720",
    "end": "1840080"
  },
  {
    "text": "israel and facebook and google yeah overall it's one of the fastest growing subsystems",
    "start": "1840080",
    "end": "1845919"
  },
  {
    "text": "in the linux kernel so yeah it's like and you can see it as",
    "start": "1845919",
    "end": "1853840"
  },
  {
    "start": "1849000",
    "end": "1941000"
  },
  {
    "text": "in sort of an industry shift and you have those major adapters facebook running it for their layer four",
    "start": "1853840",
    "end": "1860559"
  },
  {
    "text": "load balancer and ddrs production as well as tracing but basically everywhere netflix similarly",
    "start": "1860559",
    "end": "1867200"
  },
  {
    "text": "very heavy user on the tracing site for bpf to google you you have it in running on android",
    "start": "1867200",
    "end": "1873360"
  },
  {
    "text": "phone devices but also using it in their server fleet for security and various other aspects",
    "start": "1873360",
    "end": "1879360"
  },
  {
    "text": "cloudflare for their load balancing ddos mitigation there are also a lot of",
    "start": "1879360",
    "end": "1885120"
  },
  {
    "text": "large-scale psyllium users that are running it in production and if you look at the one of the former",
    "start": "1885120",
    "end": "1891440"
  },
  {
    "text": "net filter maintainers rusty russell he actually what he actually has to say about bpf",
    "start": "1891440",
    "end": "1897200"
  },
  {
    "text": "it's quite interesting he says like you know iptables performance used to be mostly good enough back then",
    "start": "1897200",
    "end": "1903039"
  },
  {
    "text": "but replacing it has taken so long because it required a radically different approach",
    "start": "1903039",
    "end": "1909039"
  },
  {
    "text": "and it's nice to see it finally happening bpf so how can you bring this ebpf",
    "start": "1909039",
    "end": "1914960"
  },
  {
    "text": "revolution to kubernetes well basically bpf is becoming ubiquitous these days as",
    "start": "1914960",
    "end": "1920159"
  },
  {
    "text": "i mentioned and if you're still relying on ip tables and you have to fiddle around and debug with",
    "start": "1920159",
    "end": "1927120"
  },
  {
    "text": "a large number of rules that are installed by cube proxy to handle services",
    "start": "1927120",
    "end": "1934080"
  },
  {
    "text": "well there's a way out of it you can basically replace the q proxy component as one example with ppf",
    "start": "1934080",
    "end": "1941679"
  },
  {
    "start": "1941000",
    "end": "2104000"
  },
  {
    "text": "how is it done so basically the way that solium is handling services and the load",
    "start": "1941679",
    "end": "1947760"
  },
  {
    "text": "balancing of services its architecture basically consists of two",
    "start": "1947760",
    "end": "1953279"
  },
  {
    "text": "major components one is to run bpf programs at the socket layer and one is",
    "start": "1953279",
    "end": "1958320"
  },
  {
    "text": "to run bpf programs at the xdp and tc layer",
    "start": "1958320",
    "end": "1963840"
  },
  {
    "text": "so let's dive right in at the socket layer this is basically for handling all the east rest traffic",
    "start": "1964080",
    "end": "1970000"
  },
  {
    "text": "among sodium managed nodes so it's doing the service ip ports to the back end",
    "start": "1970000",
    "end": "1975919"
  },
  {
    "text": "translation add the socket so whenever applications call connect send message receive message hooks",
    "start": "1975919",
    "end": "1983840"
  },
  {
    "text": "it will basically hand translate the actual request into the back end",
    "start": "1983840",
    "end": "1989919"
  },
  {
    "text": "and the interesting thing here is that for this no expensive packet level network",
    "start": "1989919",
    "end": "1996000"
  },
  {
    "text": "address translation is required because at that syscall time the packet",
    "start": "1996000",
    "end": "2001760"
  },
  {
    "text": "hasn't even been created so what basically the bpf program here is doing it's telling the kernel that",
    "start": "2001760",
    "end": "2008320"
  },
  {
    "text": "the application is actually connecting directly to the back end whereas the application is thinking",
    "start": "2008320",
    "end": "2013760"
  },
  {
    "text": "it's connecting to the service ip and the bpf program has both of these contacts",
    "start": "2013760",
    "end": "2018880"
  },
  {
    "text": "and knows what to do with it and that allows for efficient service handling for the east",
    "start": "2018880",
    "end": "2024480"
  },
  {
    "text": "west case then there's also the north south case where external traffic from outside",
    "start": "2024480",
    "end": "2030480"
  },
  {
    "text": "world is basically coming onto the node and that's handled through ppf programs at the xtp and tc layer",
    "start": "2030480",
    "end": "2038080"
  },
  {
    "text": "what does it mean so basically it's doing the same service ap port to the back end translation",
    "start": "2038080",
    "end": "2044159"
  },
  {
    "text": "on the network driver layer and in case backends are on a remote node",
    "start": "2044159",
    "end": "2050878"
  },
  {
    "text": "not on the local one they have to be pushed back out of the node again so similarly as i showed you in the previous packet flow",
    "start": "2050879",
    "end": "2057919"
  },
  {
    "text": "diagram and what we've implemented here is basically",
    "start": "2057919",
    "end": "2062960"
  },
  {
    "text": "a asnet handling with native bpf and this functionality can be can",
    "start": "2062960",
    "end": "2070079"
  },
  {
    "text": "basically be compiled into for xdp itself as well as for the dc layer",
    "start": "2070079",
    "end": "2075679"
  },
  {
    "text": "and on the xdp layer as mentioned allows for high performance and low overhead load balancing you can",
    "start": "2075679",
    "end": "2082720"
  },
  {
    "text": "use those cpu cycles that you would otherwise have to use to handle",
    "start": "2082720",
    "end": "2088240"
  },
  {
    "text": "the service translation in cube proxy you can use those for user workloads instead that's how it",
    "start": "2088240",
    "end": "2094720"
  },
  {
    "text": "should be so basically the main principle here is to operate as close as possible to the socket for the east-west case and as",
    "start": "2094720",
    "end": "2101119"
  },
  {
    "text": "close as possible to the driver for the nerf south case so how does it look in numbers we did a",
    "start": "2101119",
    "end": "2106960"
  },
  {
    "start": "2104000",
    "end": "2259000"
  },
  {
    "text": "performance comparison on xdp and eppf as well",
    "start": "2106960",
    "end": "2112000"
  },
  {
    "text": "as cube proxy so we had basically two bare metal nodes and we pushed from one",
    "start": "2112000",
    "end": "2117599"
  },
  {
    "text": "node to another as many packets as possible with the packet generator so you get a load of 10 million packets",
    "start": "2117599",
    "end": "2124880"
  },
  {
    "text": "per second and we looked at how much those different um",
    "start": "2124880",
    "end": "2130640"
  },
  {
    "text": "systems so bpf bpf versus cube proxy would be able to handle under this load",
    "start": "2130640",
    "end": "2137440"
  },
  {
    "text": "so on those dark blue colored bars you can see how many packets um it was able to",
    "start": "2137440",
    "end": "2144320"
  },
  {
    "text": "handle in the xdp and bpf case we was basically there were basically zero drops and all the packets that were generated from the",
    "start": "2144320",
    "end": "2150720"
  },
  {
    "text": "other node were basically being pushed out um to the remote backend",
    "start": "2150720",
    "end": "2156560"
  },
  {
    "text": "when the service is basically on the kubernetes node uh remote and",
    "start": "2156560",
    "end": "2162920"
  },
  {
    "text": "[Music] in the tc layer uh that sodium is able to attach as well you are still",
    "start": "2162920",
    "end": "2169520"
  },
  {
    "text": "able to handle around 3.5 million packets per second whereas",
    "start": "2169520",
    "end": "2174960"
  },
  {
    "text": "the cube proxy there's still much more overhead because the net filter layer comes later in the",
    "start": "2174960",
    "end": "2180640"
  },
  {
    "text": "stack than the tc layer and it was only able to handle around 2.3 million packet per second and ipvs",
    "start": "2180640",
    "end": "2188079"
  },
  {
    "text": "even has slightly more overhead for just a small number of servers that was",
    "start": "2188079",
    "end": "2193520"
  },
  {
    "text": "tested here than the iptables one",
    "start": "2193520",
    "end": "2198560"
  },
  {
    "text": "in terms of cpu capacity how does it look here so we were generating a medium load to the",
    "start": "2198560",
    "end": "2206079"
  },
  {
    "text": "kubernetes node that is under test with the packet generator and we tested it under 1 million packets",
    "start": "2206079",
    "end": "2212240"
  },
  {
    "text": "per second 2 million packets per second and 4 million packets per second and what you can see here in those bars",
    "start": "2212240",
    "end": "2218240"
  },
  {
    "text": "are the free cpu capacity that can be used for applications",
    "start": "2218240",
    "end": "2223359"
  },
  {
    "text": "instead under xdp it is the most efficient way to handle",
    "start": "2223359",
    "end": "2230000"
  },
  {
    "text": "kubernetes services what you can see here is that the kernel spent the least overhead from",
    "start": "2230000",
    "end": "2238640"
  },
  {
    "text": "all the hydro solutions because the bpf program here is executed right at the driver layer without having it",
    "start": "2238640",
    "end": "2245359"
  },
  {
    "text": "to push it up into the stack the cube proxy in the ip tab was an ipvs configuration",
    "start": "2245359",
    "end": "2252480"
  },
  {
    "text": "there was a lot of cpu spent to handle the software interrupt load here",
    "start": "2252480",
    "end": "2259920"
  },
  {
    "start": "2259000",
    "end": "2368000"
  },
  {
    "text": "so yeah how does it look ebpf and kubernetes in the long future so you can think of the",
    "start": "2260320",
    "end": "2267599"
  },
  {
    "text": "linux kernel becoming slow turning slowly into a ppf powered microkernel that's actually",
    "start": "2267599",
    "end": "2274800"
  },
  {
    "text": "a really interesting thought here what you can think of in the long future that there's just a tiny",
    "start": "2274800",
    "end": "2280079"
  },
  {
    "text": "core kernel with the base functionality that is needed to boot it and to keep things",
    "start": "2280079",
    "end": "2285119"
  },
  {
    "text": "running but all the other stuff is around around that kernel is basically defined",
    "start": "2285119",
    "end": "2291520"
  },
  {
    "text": "through bpf functionality instead of kernel modules for example that allows",
    "start": "2291520",
    "end": "2297680"
  },
  {
    "text": "to reduce the attack surface because you have a tiny core kernel and",
    "start": "2297680",
    "end": "2304000"
  },
  {
    "text": "at the same time all this bpf code that is defined around it the safety verified to the verifier",
    "start": "2304000",
    "end": "2309839"
  },
  {
    "text": "and you can get rid of all the feature creep that is otherwise still in the kernel",
    "start": "2309839",
    "end": "2316640"
  },
  {
    "text": "but you're not going to use it and you can make a much better",
    "start": "2316640",
    "end": "2322160"
  },
  {
    "text": "use of that of the cpu resource",
    "start": "2322160",
    "end": "2327359"
  },
  {
    "text": "so you can think of like that potentially in the long term kubernetes could even ship custom kernel extensions that it would",
    "start": "2327359",
    "end": "2333520"
  },
  {
    "text": "need depending on the underlying workload that it has whether it's running on a data center",
    "start": "2333520",
    "end": "2339119"
  },
  {
    "text": "or on a small embedded system you can think of the q proxy replacement",
    "start": "2339119",
    "end": "2344880"
  },
  {
    "text": "that i mentioned here as one example where ppf can help just as a tiny dot in that universe of possibilities",
    "start": "2344880",
    "end": "2351520"
  },
  {
    "text": "so with that said yeah please go and try out the cube proxy free mode and",
    "start": "2351520",
    "end": "2356560"
  },
  {
    "text": "if you can also take a look at the code and help contribute",
    "start": "2356560",
    "end": "2362160"
  },
  {
    "text": "and with that i'm i'm opening up for questions thanks a lot",
    "start": "2362160",
    "end": "2369838"
  }
]