[
  {
    "text": "hi welcome to my session and I hope you are having a great time in Detroit",
    "start": "480",
    "end": "5819"
  },
  {
    "text": "and our workers dig angle and I'll be talking to you about container on time",
    "start": "5819",
    "end": "11460"
  },
  {
    "text": "our first introductions I am a developer evangelism program manager at gitlab",
    "start": "11460",
    "end": "17520"
  },
  {
    "text": "mainly my role is to uh find new ways in creating content and",
    "start": "17520",
    "end": "24060"
  },
  {
    "text": "also helping my team create the right content builds off leadership and",
    "start": "24060",
    "end": "30119"
  },
  {
    "text": "can catch results from the first leadership now I'm also a Google",
    "start": "30119",
    "end": "35219"
  },
  {
    "text": "developer expert in cloud and a cncf Ambassador I'm currently based in The Hague Netherlands and if you learn more",
    "start": "35219",
    "end": "41940"
  },
  {
    "text": "about me you can visit my website at abuango dot me now so let's get started",
    "start": "41940",
    "end": "50360"
  },
  {
    "text": "what are containers this session is meant for people who are new to",
    "start": "50360",
    "end": "56579"
  },
  {
    "text": "Containers I would like to learn more about how containers work in the background of starting we assumption",
    "start": "56579",
    "end": "62460"
  },
  {
    "text": "that the person listening to this does know a lot about containers now",
    "start": "62460",
    "end": "67799"
  },
  {
    "text": "traditional deployment of applications once you've built your software or your team have developed that awesome",
    "start": "67799",
    "end": "74400"
  },
  {
    "text": "projects you've been working on they can either deploy it by just installing it oh create a VM install a patio install",
    "start": "74400",
    "end": "81420"
  },
  {
    "text": "nginx and ship the application to the right folder and it runs",
    "start": "81420",
    "end": "88080"
  },
  {
    "text": "sometimes it works sometimes it doesn't and we always have this saying oh it works on my computers but how do you",
    "start": "88080",
    "end": "94200"
  },
  {
    "text": "ensure that something that works on your computer also works when it goes to production then came virtualization virtualizations",
    "start": "94200",
    "end": "101400"
  },
  {
    "text": "where there's a layer an extra layer on top of the operating system",
    "start": "101400",
    "end": "106920"
  },
  {
    "text": "which is the hypervisor and the function of it is to create isolated environment",
    "start": "106920",
    "end": "112740"
  },
  {
    "text": "virtual machines that contain operating system binary and everything",
    "start": "112740",
    "end": "118200"
  },
  {
    "text": "necessary application to run but this it's like a virtual machine it's",
    "start": "118200",
    "end": "123780"
  },
  {
    "text": "completely isolated from the host operating system and it has to come with everything that your application is",
    "start": "123780",
    "end": "130020"
  },
  {
    "text": "included operating system also except that if certain configurations all are made the best",
    "start": "130020",
    "end": "138180"
  },
  {
    "text": "environment the virtual machines do not have access to the host and the host also does not have access to the content",
    "start": "138180",
    "end": "145440"
  },
  {
    "text": "in the virtual machines except if some modifications are made to it then we",
    "start": "145440",
    "end": "150900"
  },
  {
    "text": "have and this isn't always uh uh the right solution to problems in the",
    "start": "150900",
    "end": "158700"
  },
  {
    "text": "organizations that when containers came up now containers in terms of Linux have",
    "start": "158700",
    "end": "164700"
  },
  {
    "text": "been around for some time and that's been different ways of isolating different processes on the Linux machine",
    "start": "164700",
    "end": "171420"
  },
  {
    "text": "so that the function without interrupting other processes or having access to resources of other processes",
    "start": "171420",
    "end": "179400"
  },
  {
    "text": "so now but after so many years it containers",
    "start": "179400",
    "end": "185700"
  },
  {
    "text": "has evolved to being able to deploy an application with all the dependencies it",
    "start": "185700",
    "end": "190800"
  },
  {
    "text": "needs any container while still",
    "start": "190800",
    "end": "196140"
  },
  {
    "text": "having access to the host resources or",
    "start": "196140",
    "end": "201239"
  },
  {
    "text": "the host resources disabled the host system is able to access the resources of the container so this happens instead",
    "start": "201239",
    "end": "208140"
  },
  {
    "text": "of in virtualization where you have an A hypervisor or a software that manages the creation of",
    "start": "208140",
    "end": "216000"
  },
  {
    "text": "virtual machines in terms of containers because containers are mainly a group of",
    "start": "216000",
    "end": "222840"
  },
  {
    "text": "processes that are running on the host machine but isolated from other resources there's what we call here",
    "start": "222840",
    "end": "228840"
  },
  {
    "text": "runtime container runtime that talks to the canal uses the canal to create this",
    "start": "228840",
    "end": "235260"
  },
  {
    "text": "isolation for your containers and all the resources that your container needs through function the main difference",
    "start": "235260",
    "end": "243060"
  },
  {
    "text": "between virtualization is the virtual machines are completely isolated from",
    "start": "243060",
    "end": "248760"
  },
  {
    "text": "the host machine for virtualization while for containers your containers are",
    "start": "248760",
    "end": "255480"
  },
  {
    "text": "just a group of processes running on the host machine were isolated from",
    "start": "255480",
    "end": "262440"
  },
  {
    "text": "other group of processes that are running now if we look basically how containers are",
    "start": "262440",
    "end": "270479"
  },
  {
    "text": "created is declined stocks for most of us are used to Docker desktop Docker see a library",
    "start": "270479",
    "end": "277740"
  },
  {
    "text": "just it will talk around Docker exed Stockard and so on and so for Docker",
    "start": "277740",
    "end": "283259"
  },
  {
    "text": "build and the client communicates with your Docker finds a application of CLI",
    "start": "283259",
    "end": "290400"
  },
  {
    "text": "communicate with the runtime the runtime is the one that does all the building of",
    "start": "290400",
    "end": "297479"
  },
  {
    "text": "the images all the buildings of the containers and communicating with the",
    "start": "297479",
    "end": "304580"
  },
  {
    "text": "operating system the canal to do what is required for the canal to run now when",
    "start": "304580",
    "end": "311340"
  },
  {
    "text": "your container images are built your client also communicates with the registry where images are stored and can",
    "start": "311340",
    "end": "317880"
  },
  {
    "text": "be pulled from any time they are required basically an image is a specification of how your container",
    "start": "317880",
    "end": "325500"
  },
  {
    "text": "should be built when it wants to run now but how did all this container training",
    "start": "325500",
    "end": "332340"
  },
  {
    "text": "start either started a long time ago when uh Linux Administration have been",
    "start": "332340",
    "end": "338340"
  },
  {
    "text": "looking for ways to isolate processes from one another okay files that a",
    "start": "338340",
    "end": "344880"
  },
  {
    "text": "certain process has access to should be isolated the process should not be able to access other files the resources is",
    "start": "344880",
    "end": "351780"
  },
  {
    "text": "used should be isolated to it without having access to what other processes",
    "start": "351780",
    "end": "357419"
  },
  {
    "text": "need and this has evolved right from the days of FreeBSD to uh c groups with",
    "start": "357419",
    "end": "365520"
  },
  {
    "text": "control groups being created at Google to limit resources that",
    "start": "365520",
    "end": "372780"
  },
  {
    "text": "processes can can use on the system up to the creation",
    "start": "372780",
    "end": "378960"
  },
  {
    "text": "of name species at Red Hat in 2008 to IBM creating LX lxc was the initial",
    "start": "378960",
    "end": "387919"
  },
  {
    "text": "panel of the OG Linux container",
    "start": "387919",
    "end": "393680"
  },
  {
    "text": "initiative that was created that uses c groups namespaces to isolate",
    "start": "393680",
    "end": "399840"
  },
  {
    "text": "uh what a group of processes can have access to then came Docker in 2013 and",
    "start": "399840",
    "end": "408539"
  },
  {
    "text": "Docker made container school it made containers to to be more easier to use",
    "start": "408539",
    "end": "414240"
  },
  {
    "text": "you just need to download the binary set it up you have the docker CLA client you",
    "start": "414240",
    "end": "421860"
  },
  {
    "text": "have Docker demon running on your system and it creates the containers but one thing Docker did very well which later",
    "start": "421860",
    "end": "429180"
  },
  {
    "text": "became a disadvantage kind of is it makes it very very easy to use that",
    "start": "429180",
    "end": "435440"
  },
  {
    "text": "when the use of container evolved to more complex use cases like uh container",
    "start": "435440",
    "end": "442259"
  },
  {
    "text": "orchestration in degree server environments during deployment at scale it was difficult to adapt Docker to",
    "start": "442259",
    "end": "451680"
  },
  {
    "text": "those use cases yeah it's easy to use as a developer to build things but when to",
    "start": "451680",
    "end": "456780"
  },
  {
    "text": "automate it and add it to more complex deployments like kubernetes there has to be a lot of overhead in trying to make",
    "start": "456780",
    "end": "463979"
  },
  {
    "text": "Docker work the way those platforms as opposed to",
    "start": "463979",
    "end": "469520"
  },
  {
    "text": "want to use Docker so which is why there has been a rise in different",
    "start": "469520",
    "end": "474720"
  },
  {
    "text": "implementations of containers aside from Docker now",
    "start": "474720",
    "end": "481560"
  },
  {
    "text": "let's look under the hood a bit of what",
    "start": "481560",
    "end": "486780"
  },
  {
    "text": "a container actually does in the background we know a container basically is just an isolation of",
    "start": "486780",
    "end": "493199"
  },
  {
    "text": "processes a group of processes that are running to execute or to run your",
    "start": "493199",
    "end": "499319"
  },
  {
    "text": "application you have your application you have the dependencies that your application needs to run so those",
    "start": "499319",
    "end": "504599"
  },
  {
    "text": "dependencies running that have been executed to run your",
    "start": "504599",
    "end": "511259"
  },
  {
    "text": "application runs as processes on the host Linux environment now but it has an",
    "start": "511259",
    "end": "518459"
  },
  {
    "text": "isolation for example what fastest does he has access to if",
    "start": "518459",
    "end": "523800"
  },
  {
    "text": "it's if you're within your container CD slash is executed where should it",
    "start": "523800",
    "end": "530160"
  },
  {
    "text": "present as the root file system of your operating system if the home director is",
    "start": "530160",
    "end": "537120"
  },
  {
    "text": "uh if someone within the container says okay CD and tile symbol which is home we",
    "start": "537120",
    "end": "544080"
  },
  {
    "text": "actually go to should it go it won't definitely go to the home of the host operating system of the uh root user of",
    "start": "544080",
    "end": "551940"
  },
  {
    "text": "the host operate system but a folder has been designated for that",
    "start": "551940",
    "end": "558480"
  },
  {
    "text": "group of processes for your container to be seen as its home now and all this",
    "start": "558480",
    "end": "564899"
  },
  {
    "text": "happen with the use of features of Linux which are namespaces",
    "start": "564899",
    "end": "571260"
  },
  {
    "text": "c groups and CH which will be looking more into those now the first one is",
    "start": "571260",
    "end": "576959"
  },
  {
    "text": "seeing truth now when a process is running on your system",
    "start": "576959",
    "end": "582240"
  },
  {
    "text": "on your Linux machine CH root can limit where",
    "start": "582240",
    "end": "589320"
  },
  {
    "text": "it accesses on your file system let's say for example in the slide image",
    "start": "589320",
    "end": "595560"
  },
  {
    "text": "you're seeing here we have our uh main Roots directory slash and we have home",
    "start": "595560",
    "end": "602940"
  },
  {
    "text": "we have me then within me we create let's say we created a folder called tests and within that test folder we're",
    "start": "602940",
    "end": "610440"
  },
  {
    "text": "not created other system folders like bin user and VAR then we jail a",
    "start": "610440",
    "end": "616620"
  },
  {
    "text": "particular process into the test directory now drilling the process into that",
    "start": "616620",
    "end": "623580"
  },
  {
    "text": "Health directions that any time means anytime the process tries to access a",
    "start": "623580",
    "end": "628800"
  },
  {
    "text": "root directory it doesn't go to the parent root it goes to its own new Roots",
    "start": "628800",
    "end": "634279"
  },
  {
    "text": "which is basically inside tests not the main route so this is one way to make",
    "start": "634279",
    "end": "640260"
  },
  {
    "text": "sure processes or groups of processes are limited to a particular directory or",
    "start": "640260",
    "end": "647339"
  },
  {
    "text": "section of the file system they won't be able to have access to other parts of the file system to make any modification",
    "start": "647339",
    "end": "654420"
  },
  {
    "text": "now this is not like the most secure thing because definitely there are ways giving the right amount of skill or",
    "start": "654420",
    "end": "662339"
  },
  {
    "text": "given the right amount of uh programming you can you processes can definitely",
    "start": "662339",
    "end": "667700"
  },
  {
    "text": "jump out and access the host file system now here's another representation of uh",
    "start": "667700",
    "end": "674220"
  },
  {
    "text": "of it so we have our Roots Direction at the top then we have a home and a folder called Joe inside our home",
    "start": "674220",
    "end": "682260"
  },
  {
    "text": "directory but we want to jail let's say the user do or the process do",
    "start": "682260",
    "end": "687420"
  },
  {
    "text": "to the jaw that actually you should not be able to access any other things they will create a new routes inside it its",
    "start": "687420",
    "end": "694620"
  },
  {
    "text": "own being user and other necessary folder like we have for the roots",
    "start": "694620",
    "end": "701220"
  },
  {
    "text": "directory now so anytime Joe or the process do transfer access route or",
    "start": "701220",
    "end": "706320"
  },
  {
    "text": "tries to see Slash bin or stress to see Slash bar slash this or slash whatever",
    "start": "706320",
    "end": "712760"
  },
  {
    "text": "they are limited to everything inside this slash home slash true directory",
    "start": "712760",
    "end": "721019"
  },
  {
    "text": "now another feature of Linux is name species like I mentioned",
    "start": "721019",
    "end": "728160"
  },
  {
    "text": "earlier new species was created was added what was the feature added to the kernel in version 2.6.24 and 28 2008.",
    "start": "728160",
    "end": "738360"
  },
  {
    "text": "now what is those basically is to give your process its own system view of certain",
    "start": "738360",
    "end": "744959"
  },
  {
    "text": "resources Within the Linux environment within your system okay for example like",
    "start": "744959",
    "end": "751019"
  },
  {
    "text": "the PID process ID uh like the PID namespace",
    "start": "751019",
    "end": "757740"
  },
  {
    "text": "when your we we already know that pid1 is the",
    "start": "757740",
    "end": "762839"
  },
  {
    "text": "system D or the init process that is running on your system now what becomes",
    "start": "762839",
    "end": "768000"
  },
  {
    "text": "the image one of your container so your container can have its own PID",
    "start": "768000",
    "end": "775139"
  },
  {
    "text": "name species whereby if there is a a if you want to check on pid1 it there's a",
    "start": "775139",
    "end": "782339"
  },
  {
    "text": "specified process that is running pid1 and for network resources like devices",
    "start": "782339",
    "end": "787740"
  },
  {
    "text": "Port Etc there can be an isolation of okay this is the eth1 or eth0 of your",
    "start": "787740",
    "end": "793980"
  },
  {
    "text": "container are not necessarily tied to the main ETF zero or eth1 of the host operating",
    "start": "793980",
    "end": "800880"
  },
  {
    "text": "system so basically namespaces provides an isolation for your container or your group of",
    "start": "800880",
    "end": "807720"
  },
  {
    "text": "processes to tell them that okay these are all the resources you have access to and these are all the resources within",
    "start": "807720",
    "end": "814860"
  },
  {
    "text": "your own environment like your own namespace that you can use now you have other name",
    "start": "814860",
    "end": "821100"
  },
  {
    "text": "sources like multi points you have IPC you have a host and domain name spaces",
    "start": "821100",
    "end": "827519"
  },
  {
    "text": "that containers can take advantage of from the namespace feature of Linux now",
    "start": "827519",
    "end": "833459"
  },
  {
    "text": "the next thing is c groups which is for",
    "start": "833459",
    "end": "838980"
  },
  {
    "text": "resource control now we've said from the beginning your",
    "start": "838980",
    "end": "844019"
  },
  {
    "text": "container is basically a group of processes that are that are executing uh",
    "start": "844019",
    "end": "850019"
  },
  {
    "text": "towards a common goal maybe running your specific application now your container",
    "start": "850019",
    "end": "856019"
  },
  {
    "text": "the process within your container can be allocated oh you all should share",
    "start": "856019",
    "end": "862019"
  },
  {
    "text": "uh one gigabyte of memory and this number of CPU and",
    "start": "862019",
    "end": "867720"
  },
  {
    "text": "the secrets ensures that those processes stay within the limits that has been specified for them if any of the",
    "start": "867720",
    "end": "875040"
  },
  {
    "text": "processes uses more memory than allowed and they get killed or and killed out of",
    "start": "875040",
    "end": "881399"
  },
  {
    "text": "memory kill or if they start using too much CPU than required they start",
    "start": "881399",
    "end": "887399"
  },
  {
    "text": "getting slowed down so c groups allows you to specify",
    "start": "887399",
    "end": "892699"
  },
  {
    "text": "resource limitation for the set of processes within your container now",
    "start": "892699",
    "end": "900240"
  },
  {
    "text": "um the image used here is from Julia Evans she creates very awesome representation of common",
    "start": "900240",
    "end": "906139"
  },
  {
    "text": "uh of terms of topics in technology you can visit on",
    "start": "906139",
    "end": "913860"
  },
  {
    "text": "Twitter to check out some of the awesome illustrations dashes that they have done",
    "start": "913860",
    "end": "919139"
  },
  {
    "text": "now let's revisit this image of a container how a container runs",
    "start": "919139",
    "end": "925560"
  },
  {
    "text": "basically you have the clients you have the runtime and you have the registry now but what happens under the hood in",
    "start": "925560",
    "end": "932699"
  },
  {
    "text": "the runtime now let's take this image for example for that of docker",
    "start": "932699",
    "end": "938699"
  },
  {
    "text": "Docker one thing Docker did at some point was to look at oh",
    "start": "938699",
    "end": "943980"
  },
  {
    "text": "there's a need to have a more representation within the community and",
    "start": "943980",
    "end": "949079"
  },
  {
    "text": "one way they can do is to give back to the community so they decoupled the",
    "start": "949079",
    "end": "954240"
  },
  {
    "text": "docker binary into uh container the runc and contributed it to the community",
    "start": "954240",
    "end": "960660"
  },
  {
    "text": "Through the open container initiative I will talk about more about that later",
    "start": "960660",
    "end": "966240"
  },
  {
    "text": "but basically the docker binary was splitted into you have the",
    "start": "966240",
    "end": "972720"
  },
  {
    "text": "clients too which is the docker that you execute then you have a runtime a high",
    "start": "972720",
    "end": "978540"
  },
  {
    "text": "level runtime now receives all the instructions from the client to handles",
    "start": "978540",
    "end": "985079"
  },
  {
    "text": "image creation and management and so on then passes the instructions to the low",
    "start": "985079",
    "end": "990420"
  },
  {
    "text": "level runtime which does the actual execution with the Linux panel to create",
    "start": "990420",
    "end": "996480"
  },
  {
    "text": "the container the low level runtime actually does the creation of the",
    "start": "996480",
    "end": "1002240"
  },
  {
    "text": "container processes now container D is like one of the most",
    "start": "1002240",
    "end": "1007519"
  },
  {
    "text": "common high level one time which Docker uses and run C is like the default most",
    "start": "1007519",
    "end": "1013940"
  },
  {
    "text": "other Halo level uh runtime uh run times I either deprecated or not really that I",
    "start": "1013940",
    "end": "1020300"
  },
  {
    "text": "use volunteer it's like the default that is being used and managed under uh oci as it's like the main oci runtime",
    "start": "1020300",
    "end": "1028400"
  },
  {
    "text": "now if you look at this illustration here it shows where when you execute Stockard Docker compost the instructions",
    "start": "1028400",
    "end": "1035120"
  },
  {
    "text": "are sent to Docker d and Dr D is like demon the container",
    "start": "1035120",
    "end": "1041000"
  },
  {
    "text": "engine that's receiving instruction and passing it down to container d now between container you have the",
    "start": "1041000",
    "end": "1047418"
  },
  {
    "text": "container Edition which uh abstract some of the low level uh",
    "start": "1047419",
    "end": "1052990"
  },
  {
    "text": "[Music] interactions that needs to be done with",
    "start": "1052990",
    "end": "1058039"
  },
  {
    "text": "the main runtime which is oci runtime that's run C and run C at the end of the",
    "start": "1058039",
    "end": "1063740"
  },
  {
    "text": "day creates all the Linux processes that is required for your container to run now",
    "start": "1063740",
    "end": "1071780"
  },
  {
    "text": "as time went the community decided okay let's have a standard different tools",
    "start": "1071780",
    "end": "1077960"
  },
  {
    "text": "are coming up on creating and managing containers let's have a standard that is agreed on okay this is what a container",
    "start": "1077960",
    "end": "1084440"
  },
  {
    "text": "should be called these are the things the container should do this is how your container should be created and so on",
    "start": "1084440",
    "end": "1089600"
  },
  {
    "text": "and so forth right then came the open container initiative now what should a",
    "start": "1089600",
    "end": "1095000"
  },
  {
    "text": "runtime do it should create it should start you should get the state it should kill you should delete a con a container",
    "start": "1095000",
    "end": "1101000"
  },
  {
    "text": "and how should you delete it what are the different ways you should do so the container open container initiative",
    "start": "1101000",
    "end": "1107660"
  },
  {
    "text": "which has a lot of people within the community a lot of companies within Community contributing to it specifies",
    "start": "1107660",
    "end": "1114799"
  },
  {
    "text": "what a container is and what a container runtime can do and some of the awesome things that have come out from the open",
    "start": "1114799",
    "end": "1121640"
  },
  {
    "text": "container initiatives are neuronsi which is like the default runtime that does all low level uh",
    "start": "1121640",
    "end": "1130340"
  },
  {
    "text": "creation a hundreds of containers it's very hard for you to see someone using round C themselves on their system it is",
    "start": "1130340",
    "end": "1137240"
  },
  {
    "text": "usually used along with a container manager like container D or Docker itself now and this ensures the Heavenly",
    "start": "1137240",
    "end": "1144980"
  },
  {
    "text": "standard ensures that containers work the same anywhere without your laptop on",
    "start": "1144980",
    "end": "1150200"
  },
  {
    "text": "the server or Cloud so there won't be ah it works on my system if it works on your system it should work anywhere else",
    "start": "1150200",
    "end": "1157280"
  },
  {
    "text": "now then in if we look at the cnco landscape",
    "start": "1157280",
    "end": "1163520"
  },
  {
    "text": "there are a couple of uh containers runtimes that are uh that have graduated",
    "start": "1163520",
    "end": "1169700"
  },
  {
    "text": "we have container D we have decree iot is the kubernetes interface that was created",
    "start": "1169700",
    "end": "1177559"
  },
  {
    "text": "for runtime interface that was created for communities to ensure that it's able",
    "start": "1177559",
    "end": "1183080"
  },
  {
    "text": "to communicate with different runtimes now we have a couple of others I'm going",
    "start": "1183080",
    "end": "1188179"
  },
  {
    "text": "to be looking at some of them and they they create and handle containers",
    "start": "1188179",
    "end": "1195080"
  },
  {
    "text": "differently now the first one is containerd basically it",
    "start": "1195080",
    "end": "1200120"
  },
  {
    "text": "manages the complete container life cycle of the host operating system which",
    "start": "1200120",
    "end": "1205280"
  },
  {
    "text": "includes like image creation storage supervision and execution and everything",
    "start": "1205280",
    "end": "1211400"
  },
  {
    "text": "around networking that ensures that it container works and it does this by talking to the",
    "start": "1211400",
    "end": "1218900"
  },
  {
    "text": "low level runtime container runtime which is run C now",
    "start": "1218900",
    "end": "1224900"
  },
  {
    "text": "run C basically is the low level CLI tool that does all the spinning and",
    "start": "1224900",
    "end": "1231080"
  },
  {
    "text": "running of the containers according to oci specification that is standard oci specification for",
    "start": "1231080",
    "end": "1238820"
  },
  {
    "text": "Conti for creating containers so that if a container is created with Docker or",
    "start": "1238820",
    "end": "1244039"
  },
  {
    "text": "with a builder with any runtime at all it should work regardless at any level",
    "start": "1244039",
    "end": "1251000"
  },
  {
    "text": "now run C was uh initially developed by",
    "start": "1251000",
    "end": "1256460"
  },
  {
    "text": "Docker like initial area but it was donated to oci as like the first runtime spec",
    "start": "1256460",
    "end": "1264080"
  },
  {
    "text": "compliance that's the oci created like a specification runtime specification and",
    "start": "1264080",
    "end": "1269480"
  },
  {
    "text": "this is like the first one that is compliant with the entire specification now then we have creio",
    "start": "1269480",
    "end": "1277100"
  },
  {
    "text": "now container runtime interface now I don't remember the meaning of the oh but",
    "start": "1277100",
    "end": "1282200"
  },
  {
    "text": "yeah creative now it's an implementation of the kubernetes container runtime interface",
    "start": "1282200",
    "end": "1288860"
  },
  {
    "text": "so which enables uh any oci compatible",
    "start": "1288860",
    "end": "1294580"
  },
  {
    "text": "runtime to be able to work with kubernetes so you can say oh I want to",
    "start": "1294580",
    "end": "1301880"
  },
  {
    "text": "use container D or I want to use this or I want to use that in my kubernetes",
    "start": "1301880",
    "end": "1306980"
  },
  {
    "text": "cluster I want to use Docker so this uh uh container on time interface allows",
    "start": "1306980",
    "end": "1314480"
  },
  {
    "text": "you to be able to use previously kubernetes both tied to docker but with",
    "start": "1314480",
    "end": "1320299"
  },
  {
    "text": "the container runtime interface of kubernetes allows you to be able to choose richer on time to use or you want",
    "start": "1320299",
    "end": "1327559"
  },
  {
    "text": "to use runc or you want to use device or in the background or you want to use something else in the background you to",
    "start": "1327559",
    "end": "1333080"
  },
  {
    "text": "run your containers you can do that with uh",
    "start": "1333080",
    "end": "1339140"
  },
  {
    "text": "now we also have podman which is a container manager on but unlike uh",
    "start": "1339400",
    "end": "1347419"
  },
  {
    "text": "continuity or Docker it also run ports if a feature that we all know for that",
    "start": "1347419",
    "end": "1353539"
  },
  {
    "text": "we all know kubernetes for it run pods it uh and another thing that it does it",
    "start": "1353539",
    "end": "1359299"
  },
  {
    "text": "allows you to be able to run ruthless containers as containers that run within",
    "start": "1359299",
    "end": "1365299"
  },
  {
    "text": "the context of the currency login user and except if it has limitations by the",
    "start": "1365299",
    "end": "1370520"
  },
  {
    "text": "way where there are certain activities that your containers cannot do except when you specify",
    "start": "1370520",
    "end": "1376299"
  },
  {
    "text": "privileged flag to allow them to then execute those commands but",
    "start": "1376299",
    "end": "1381620"
  },
  {
    "text": "if your use case doesn't require any privileged",
    "start": "1381620",
    "end": "1386799"
  },
  {
    "text": "use cases podman is like one of the features for you that is more secure because it",
    "start": "1386799",
    "end": "1395360"
  },
  {
    "text": "doesn't need any root level access now we have build that build that basically",
    "start": "1395360",
    "end": "1400460"
  },
  {
    "text": "is for building containers it doesn't run it doesn't",
    "start": "1400460",
    "end": "1405940"
  },
  {
    "text": "do any execution it basically builds your container images you can use podman",
    "start": "1405940",
    "end": "1412700"
  },
  {
    "text": "with Builder I think podman actually uses builder in the background to build images now we have a Scorpio which is",
    "start": "1412700",
    "end": "1420559"
  },
  {
    "text": "for inspecting images and also uh",
    "start": "1420559",
    "end": "1425780"
  },
  {
    "text": "publishing your images to do a container registry now",
    "start": "1425780",
    "end": "1431860"
  },
  {
    "text": "looking at around C we've talked before about Ron C but basically the goal of",
    "start": "1434360",
    "end": "1441020"
  },
  {
    "text": "Rossi is to make a standard for how containers run anyway",
    "start": "1441020",
    "end": "1448419"
  },
  {
    "text": "completely and the primary features of vonsi is it supports a full linuxilium",
    "start": "1448700",
    "end": "1456200"
  },
  {
    "text": "species all the non-linear spaces run C supports with a PID or network command",
    "start": "1456200",
    "end": "1461780"
  },
  {
    "text": "points it supports all of them at the low level and also support security features like SC Linux Hub ammo and so",
    "start": "1461780",
    "end": "1469820"
  },
  {
    "text": "on and because it is uh it's the specification for runs is governed by",
    "start": "1469820",
    "end": "1476480"
  },
  {
    "text": "the open container initiative which is unique Foundation there is guarantee that okay to still be maintained unlike",
    "start": "1476480",
    "end": "1482120"
  },
  {
    "text": "other ones like our kitty and so on which were being really popular for some",
    "start": "1482120",
    "end": "1487940"
  },
  {
    "text": "time and most of them have been deprecated this has a lot of backing with it and it's going to be around for",
    "start": "1487940",
    "end": "1494120"
  },
  {
    "text": "a long time now like I mentioned it was released as part of Docker container",
    "start": "1494120",
    "end": "1500000"
  },
  {
    "text": "platform but was later spinned out I think local contributed a lot to The Container ecosystem now when we have",
    "start": "1500000",
    "end": "1508400"
  },
  {
    "text": "other runtimes that are uh",
    "start": "1508400",
    "end": "1513860"
  },
  {
    "text": "that do things a bit differently like we said containers are not necessarily isolated completely from your host",
    "start": "1513860",
    "end": "1520520"
  },
  {
    "text": "operating system they are just a group of processes that are executing uh your",
    "start": "1520520",
    "end": "1527779"
  },
  {
    "text": "program but in an isolated environment but for security concerns some",
    "start": "1527779",
    "end": "1534320"
  },
  {
    "text": "folks have shared the concern that okay still yet processes within containers can go",
    "start": "1534320",
    "end": "1541460"
  },
  {
    "text": "beyond a isolation and probably read some hard work or escape from their",
    "start": "1541460",
    "end": "1546500"
  },
  {
    "text": "isolation so that is where sandbox container on times comes in like the G",
    "start": "1546500",
    "end": "1552320"
  },
  {
    "text": "visor or Kata and the way it does is they use virtualization",
    "start": "1552320",
    "end": "1558980"
  },
  {
    "text": "to completely isolate your containers from The Host so largely this the main reason behind",
    "start": "1558980",
    "end": "1566779"
  },
  {
    "text": "this is to have improved security especially for critical workloads where you have concerns around oh distribution",
    "start": "1566779",
    "end": "1574460"
  },
  {
    "text": "should be complete especially in regulated environments where security is a very very important but unlike simply",
    "start": "1574460",
    "end": "1581659"
  },
  {
    "text": "just using virtualization these runtimes are lightweights and have minimal",
    "start": "1581659",
    "end": "1589700"
  },
  {
    "text": "resource frequency okay it's not like it just goes create a battery box machine and run your container and it's no the",
    "start": "1589700",
    "end": "1596720"
  },
  {
    "text": "implementation is much more lightweight because you need to maximize resources and also",
    "start": "1596720",
    "end": "1603500"
  },
  {
    "text": "have improved performance now with this let's see if you use cases uh",
    "start": "1603500",
    "end": "1611600"
  },
  {
    "text": "the main use cases for containers the first one is build systems of course okay as a developer you want to build",
    "start": "1611600",
    "end": "1619700"
  },
  {
    "text": "your application and you want to package your applications around them then to run your applications to address trace",
    "start": "1619700",
    "end": "1625760"
  },
  {
    "text": "the containers but most likely push it to communities containers or you use",
    "start": "1625760",
    "end": "1630799"
  },
  {
    "text": "podman to run them as pods a pod is a group of containers that are running to",
    "start": "1630799",
    "end": "1637520"
  },
  {
    "text": "to run a particular application now and what are the main things you require",
    "start": "1637520",
    "end": "1644480"
  },
  {
    "text": "build systems for okay to either build your images to run your images and to",
    "start": "1644480",
    "end": "1649940"
  },
  {
    "text": "distribute your images but when it comes to Containers registration the images will have already been built",
    "start": "1649940",
    "end": "1656720"
  },
  {
    "text": "and they've already been distributed into your registry so the container just straight up basically just pulls and",
    "start": "1656720",
    "end": "1662659"
  },
  {
    "text": "uses in the case of kubernetes cubelet does all that pull the image and use the",
    "start": "1662659",
    "end": "1669080"
  },
  {
    "text": "image now let's see an example of the flow of a build system now you have your",
    "start": "1669080",
    "end": "1674900"
  },
  {
    "text": "image you have your image registry where you keep all your images and you have your local register in your system when",
    "start": "1674900",
    "end": "1681260"
  },
  {
    "text": "you do Docker pool it pulls those images to your system now if you when you are",
    "start": "1681260",
    "end": "1688460"
  },
  {
    "text": "using Docker your Docker CLI with the docker demon now",
    "start": "1688460",
    "end": "1693799"
  },
  {
    "text": "the docker demon Ducks does takes your request from the CLI and",
    "start": "1693799",
    "end": "1700100"
  },
  {
    "text": "handles it with the container during time and container D runtime creates the",
    "start": "1700100",
    "end": "1706220"
  },
  {
    "text": "containers with the help of UNC which talks to the Linux kernel but Portman",
    "start": "1706220",
    "end": "1711919"
  },
  {
    "text": "does things differently instead of having a demon that does all the execution as the roots",
    "start": "1711919",
    "end": "1718700"
  },
  {
    "text": "as as a root user or at root level does audience creating the containers Etc",
    "start": "1718700",
    "end": "1725799"
  },
  {
    "text": "podman can walk ruthless without privileged access but instead of using a",
    "start": "1725799",
    "end": "1733039"
  },
  {
    "text": "demon it creates all the containers as child processes of podman itself",
    "start": "1733039",
    "end": "1739159"
  },
  {
    "text": "so that means your containers can run in the context of the currently logged in user instead of root there are",
    "start": "1739159",
    "end": "1746539"
  },
  {
    "text": "limitations to that you can explore them more depending on your use case but this",
    "start": "1746539",
    "end": "1751580"
  },
  {
    "text": "makes podman to be more secure and more accessible to use now",
    "start": "1751580",
    "end": "1758659"
  },
  {
    "text": "also partner can be a drop in replacement for Docker you can install your podman and even create an alias",
    "start": "1758659",
    "end": "1765860"
  },
  {
    "text": "to anytime you execute Docker you should call the podman uh",
    "start": "1765860",
    "end": "1773140"
  },
  {
    "text": "executable in your system now Batman is part of this Suite of tools including",
    "start": "1773140",
    "end": "1780520"
  },
  {
    "text": "Builder including Scorpio and Kon Moon you can use all of them together while",
    "start": "1780520",
    "end": "1786980"
  },
  {
    "text": "Docker provides everything in the demon the demon checks the docker demon checks",
    "start": "1786980",
    "end": "1792260"
  },
  {
    "text": "your container for the entire life cycle okay it's running reports back no status",
    "start": "1792260",
    "end": "1798020"
  },
  {
    "text": "and everything podman creates the Works which onesie to create the",
    "start": "1798020",
    "end": "1805279"
  },
  {
    "text": "containers but it uses common to like monitor the",
    "start": "1805279",
    "end": "1811419"
  },
  {
    "text": "containers and handle any communication between the containers and I'll tell you okay this container is dead or and so on",
    "start": "1811419",
    "end": "1818419"
  },
  {
    "text": "now then podman uses Builder to build and distribute images and also scop you",
    "start": "1818419",
    "end": "1825260"
  },
  {
    "text": "to foreign",
    "start": "1825260",
    "end": "1828159"
  },
  {
    "text": "together for your containers now orchestration let's see here is in",
    "start": "1834919",
    "end": "1841279"
  },
  {
    "text": "kubernetes for example and with your cubelete you can decide oh I want to use",
    "start": "1841279",
    "end": "1848080"
  },
  {
    "text": "or to use create Creo or to use",
    "start": "1850240",
    "end": "1855580"
  },
  {
    "text": "a Qatar or to use devices because kubernetes",
    "start": "1855580",
    "end": "1861559"
  },
  {
    "text": "has the container runtime interface so and any oci compliance runtime can be",
    "start": "1861559",
    "end": "1869960"
  },
  {
    "text": "able can be blocked to the CRI kubernetes to use in running your",
    "start": "1869960",
    "end": "1877580"
  },
  {
    "text": "containers and it does that with 1C just the way the docker uses dock ID to work",
    "start": "1877580",
    "end": "1885080"
  },
  {
    "text": "with continuity to run your oci compliant images",
    "start": "1885080",
    "end": "1890120"
  },
  {
    "text": "now basically the wrong time you use depends on what",
    "start": "1890120",
    "end": "1896539"
  },
  {
    "text": "exactly your use case is if you are a developer Docker should be fine for you as long as",
    "start": "1896539",
    "end": "1903740"
  },
  {
    "text": "you are within the limits of usage that Docker specified they're using Docker as a company is becoming more difficult",
    "start": "1903740",
    "end": "1910340"
  },
  {
    "text": "because they are restrictions I would advise visiting Dockers website to learn",
    "start": "1910340",
    "end": "1915380"
  },
  {
    "text": "if you are able to use Docker but if you are unable to use or you want to stick",
    "start": "1915380",
    "end": "1920659"
  },
  {
    "text": "to the spirit of the community you can choose podman you can even use podman to",
    "start": "1920659",
    "end": "1926179"
  },
  {
    "text": "run your ports not just containers unlike Docker where you cannot run a pod",
    "start": "1926179",
    "end": "1932059"
  },
  {
    "text": "now also podman can be a drop in replacement for Docker basically",
    "start": "1932059",
    "end": "1937940"
  },
  {
    "text": "creating an alias for it all the department create podma a Docker pool",
    "start": "1937940",
    "end": "1944020"
  },
  {
    "text": "dockerdstocker.podman can't do that now my podman is part of the streets",
    "start": "1944020",
    "end": "1949899"
  },
  {
    "text": "it uses common in the background to handle you handle the monitoring of",
    "start": "1949899",
    "end": "1956779"
  },
  {
    "text": "uh your containers and also communication Docker demon does everything but because podman is",
    "start": "1956779",
    "end": "1963679"
  },
  {
    "text": "demon-less he doesn't use a demon it depends on a couple of other tools to do",
    "start": "1963679",
    "end": "1968840"
  },
  {
    "text": "all the activities needs for the entire life cycle of your container now",
    "start": "1968840",
    "end": "1974140"
  },
  {
    "text": "podman also uses builder in the program to build your images and scope you for",
    "start": "1974140",
    "end": "1979640"
  },
  {
    "text": "inspecting your images so you need uh to to use the full Suites to be able to get",
    "start": "1979640",
    "end": "1986240"
  },
  {
    "text": "the full benefit of the entire life cycle but if you work in a regulated environment or because of this system",
    "start": "1986240",
    "end": "1992120"
  },
  {
    "text": "regulation or just your need you need a more secure runtime to run your images",
    "start": "1992120",
    "end": "1997340"
  },
  {
    "text": "in a completely isolated environment then gviso",
    "start": "1997340",
    "end": "2002919"
  },
  {
    "text": "Kata and firecracker option you can look at and you can",
    "start": "2002919",
    "end": "2008039"
  },
  {
    "text": "you can even make your kubernetes cluster to use any of this sandbox run",
    "start": "2008039",
    "end": "2013360"
  },
  {
    "text": "times to run your application now when you are using uh uh",
    "start": "2013360",
    "end": "2019539"
  },
  {
    "text": "also know that if you're using kubernetes you can specify what because kubernetes previously kubernetes",
    "start": "2019539",
    "end": "2026500"
  },
  {
    "text": "basically was tightly copied to Docker but after the community the coupled",
    "start": "2026500",
    "end": "2031960"
  },
  {
    "text": "Docker which will give give which led to the Opera one-time R kubernetes is",
    "start": "2031960",
    "end": "2037720"
  },
  {
    "text": "removing Docker and Etc no kubernetes were not just removing Docker but it was making it possible for different oci",
    "start": "2037720",
    "end": "2045940"
  },
  {
    "text": "compliant runtimes to be able to work with communities including docker ah so elect if you want to use a",
    "start": "2045940",
    "end": "2055599"
  },
  {
    "text": "container with cubelet find you can set it in communities you can check the",
    "start": "2055599",
    "end": "2061060"
  },
  {
    "text": "kubernetes documentation for how to configure different runtime for your kubernetes cluster",
    "start": "2061060",
    "end": "2069220"
  },
  {
    "text": "now that's all from this session thank you very much for joining if you have any questions or you want to engage with",
    "start": "2069220",
    "end": "2076720"
  },
  {
    "text": "me I will be waiting to answer some of your questions in uh after this but you",
    "start": "2076720",
    "end": "2083740"
  },
  {
    "text": "can also which reach me at on Twitter at circle247 my website is aguango.me also",
    "start": "2083740",
    "end": "2091658"
  },
  {
    "text": "if you like to give feedback about this session you can scan this QR code or",
    "start": "2091659",
    "end": "2098320"
  },
  {
    "text": "follow any other instructions given after this session thank you very much for joining me on",
    "start": "2098320",
    "end": "2103420"
  },
  {
    "text": "hope to engage with you soon",
    "start": "2103420",
    "end": "2107040"
  }
]