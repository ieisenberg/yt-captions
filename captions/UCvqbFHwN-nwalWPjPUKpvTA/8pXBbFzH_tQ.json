[
  {
    "text": "okay everybody we're going to go ahead and get started um today we're going to be learning how to survive ebpf",
    "start": "160",
    "end": "7080"
  },
  {
    "text": "deployment on kubernetes with a new tool that we like to call",
    "start": "7080",
    "end": "12559"
  },
  {
    "text": "BPF I am Andrew stoas I'm a senior software engineer at Red Hat working in",
    "start": "12559",
    "end": "17600"
  },
  {
    "text": "the office of the CTO um I am a ppfd maintainer and one of my other cool projects is also Network policy API",
    "start": "17600",
    "end": "24439"
  },
  {
    "text": "which just got done with the talk on so if you want to check out the recording that'd be awesome and I'm Shane I'm a",
    "start": "24439",
    "end": "30519"
  },
  {
    "text": "Staff software it's a little louder isn't it staff software engineer at Kong and a chair Sig Network and a maintainer",
    "start": "30519",
    "end": "37160"
  },
  {
    "text": "at Gateway API and contribute to BPF which kind of happened through the Gateway API",
    "start": "37160",
    "end": "44320"
  },
  {
    "text": "project so um we're kind of thinking most people in this will be generally aware of abpf but if not we'll do a high",
    "start": "44760",
    "end": "51719"
  },
  {
    "text": "level and then if you need to learn more please do feel free to talk to us afterwards um but basically you can kind",
    "start": "51719",
    "end": "58039"
  },
  {
    "text": "of think of it similar to something like colonel module where you can write code that you can load into the uh the kernel",
    "start": "58039",
    "end": "64799"
  },
  {
    "text": "uh using the VM that's provided with BPF um so you can do things like networking",
    "start": "64799",
    "end": "70560"
  },
  {
    "text": "security observability and tracing by writing a little bit of code loading it into the kernel and it's a lot more",
    "start": "70560",
    "end": "76200"
  },
  {
    "text": "lightweight than kernel modules used to be um there's a bunch of different projects uh that do this um obviously",
    "start": "76200",
    "end": "82880"
  },
  {
    "text": "there's a ton of them at this point um and basically you have a variety of different ecosystems that have kind of",
    "start": "82880",
    "end": "88360"
  },
  {
    "text": "built up and all of these different projects and that's part of what we'll talk about today um but more importantly and more",
    "start": "88360",
    "end": "95640"
  },
  {
    "text": "specific to the purpose of this conference we're going to talk about why ebpf and kubernetes um and how actually",
    "start": "95640",
    "end": "104240"
  },
  {
    "text": "so ebpf is like we said it's very good framework to extend and like go into kernel space and do things that you want",
    "start": "104240",
    "end": "110079"
  },
  {
    "text": "to do like observability and networking but it comes with some costs um and there's many different uh examples all",
    "start": "110079",
    "end": "116880"
  },
  {
    "text": "of which do kind of different things like celium is and Calico are great examples of cni doing networking pixie",
    "start": "116880",
    "end": "122119"
  },
  {
    "text": "is open source observability CU armor does security uh Blix which is actually a project that's kind of Andrew and I",
    "start": "122119",
    "end": "128679"
  },
  {
    "text": "work on that's kind of connected uh to BPF um is a l Fork uh load balancer that",
    "start": "128679",
    "end": "135800"
  },
  {
    "text": "we started in the Gateway API project and then there's net observe which is network observability in open shift",
    "start": "135800",
    "end": "142280"
  },
  {
    "text": "there's lots more projects and uh we'll have some links to like the sites and stuff like that um but there are issues",
    "start": "142280",
    "end": "148599"
  },
  {
    "text": "with ebpf programs and kubernetes um it's difficult right now and we'll talk",
    "start": "148599",
    "end": "153800"
  },
  {
    "text": "about some of those difficulties one of the big ones is security security is a big problem with",
    "start": "153800",
    "end": "160120"
  },
  {
    "text": "ebpf today in especially in a kubernetes environment uh one of the top problems there is that ebpf programs are not",
    "start": "160120",
    "end": "166800"
  },
  {
    "text": "namespaced so they can easily Escape container isolation they're not isolated",
    "start": "166800",
    "end": "172200"
  },
  {
    "text": "um and that rely and they rely on highly privileged containers so people will like use highly privileged containers to",
    "start": "172200",
    "end": "177920"
  },
  {
    "text": "load these programs and work with them them and they're also pretty vulnerable to supply chain attacks which we'll be",
    "start": "177920",
    "end": "183360"
  },
  {
    "text": "talking about more in upcoming slides so digging in a little deeper uh",
    "start": "183360",
    "end": "188799"
  },
  {
    "text": "ebpf not being namespaced so like you have to be ebpf has to be loaded from root full containers so basically",
    "start": "188799",
    "end": "195000"
  },
  {
    "text": "they're just in the root name space so um even with basic permissions we've",
    "start": "195000",
    "end": "200200"
  },
  {
    "text": "seen evidence of like privilege escalations that were you know that have happened in the past we had like this",
    "start": "200200",
    "end": "205680"
  },
  {
    "text": "particular one which you can go look at if you want to with unprivileged mode which is now patched and that's gone but there will be more in the future um and",
    "start": "205680",
    "end": "212439"
  },
  {
    "text": "since ebpf and containers are able to modify the host kernel there it's just like I just said a couple of times",
    "start": "212439",
    "end": "217840"
  },
  {
    "text": "they're just not really contained uh it's not a container in in the way that you have to use the container to load",
    "start": "217840",
    "end": "223799"
  },
  {
    "text": "these programs um so some features are just not restricted too so like some",
    "start": "223799",
    "end": "228959"
  },
  {
    "text": "types of programs and that's what we got going on in this diagram here are just going to be able to do a lot of things",
    "start": "228959",
    "end": "234360"
  },
  {
    "text": "like a lot of things that you might not want them to be able to do so digging deeper into highly",
    "start": "234360",
    "end": "240480"
  },
  {
    "text": "privileged containers uh you at least need cap BPF um which we generally you",
    "start": "240480",
    "end": "246720"
  },
  {
    "text": "should just kind of look at that is I'm giving it root more or less in practice there are several different capabilities",
    "start": "246720",
    "end": "252439"
  },
  {
    "text": "that you can give it like uh CIS P trce net admin CIS admin um but in all cases",
    "start": "252439",
    "end": "257959"
  },
  {
    "text": "it's it's it's a lot of privileges you can't really get very fine grained uh privileges to like get least privilege",
    "start": "257959",
    "end": "264040"
  },
  {
    "text": "for your program the thing that it needs and it also has the problem of like you can't it's not common at least for",
    "start": "264040",
    "end": "269280"
  },
  {
    "text": "people I have like I load up and I use the capabilities briefly when I need them and then I don't have them anymore it's usually for the entire life cycle",
    "start": "269280",
    "end": "276039"
  },
  {
    "text": "of the application they have these high elevated privileges that they're they're running",
    "start": "276039",
    "end": "281400"
  },
  {
    "text": "with um so there's a lot of examples of how you can do scary things scary things",
    "start": "281400",
    "end": "287000"
  },
  {
    "text": "with ebpf um our friend alesandro over at the I project built Snoop which lets",
    "start": "287000",
    "end": "292919"
  },
  {
    "text": "you Snoop on uh or Snuffy it lets you Snoop on all SSL traffic you can do things like redirect and basically Al",
    "start": "292919",
    "end": "299840"
  },
  {
    "text": "like fish U SSH connections you can deploy uh there's all kinds of key loggers this is just one example if you",
    "start": "299840",
    "end": "305960"
  },
  {
    "text": "go on GitHub you can find others um you can also do things like just attach probes to things that are like",
    "start": "305960",
    "end": "311759"
  },
  {
    "text": "performance sensitive and then lag the system you know that's no good um and in particular we're going to show you a",
    "start": "311759",
    "end": "318080"
  },
  {
    "text": "demo of uh using the trampoline pod threat to exploit a",
    "start": "318080",
    "end": "323440"
  },
  {
    "text": "cluster so security issues yes uh we also have functional issues um so some",
    "start": "323840",
    "end": "329960"
  },
  {
    "text": "functional issues are like a lot of programs operate in these silos or at least they they present themselves in a",
    "start": "329960",
    "end": "335800"
  },
  {
    "text": "silo so like with cnis and particular um you have where a cni will be doing a",
    "start": "335800",
    "end": "341479"
  },
  {
    "text": "bunch of networking ebpf code and it has no awareness if there's another one out there so if you're running a cni that",
    "start": "341479",
    "end": "347080"
  },
  {
    "text": "does ebpf programs and then you maybe write your own program you might end up in a situation where it you load that",
    "start": "347080",
    "end": "353560"
  },
  {
    "text": "program and you don't really know which one's running first and you don't really know if you're like hijacking and like breaking traffic for and I it can become",
    "start": "353560",
    "end": "360280"
  },
  {
    "text": "hard to understand if you're having like interoperability problems and this can lead to",
    "start": "360280",
    "end": "365840"
  },
  {
    "text": "instability um the one that hurts me the most usually is just general visibility and debug ability like at the cluster",
    "start": "365840",
    "end": "372120"
  },
  {
    "text": "scope especially when you have large clusters trying to understand all what's",
    "start": "372120",
    "end": "378000"
  },
  {
    "text": "going on like all these evf programs running in there is really hard to look at today um and then there's also issues",
    "start": "378000",
    "end": "384440"
  },
  {
    "text": "with like versioning uh fine grain versioning so like your user space and kernel space so like you have some",
    "start": "384440",
    "end": "389520"
  },
  {
    "text": "people do embedded bite code some people don't like actually put the ebpf bite code into their project and some people",
    "start": "389520",
    "end": "395360"
  },
  {
    "text": "don't so it's not always clear like what version of which is running necessarily and with if you have different kinds of",
    "start": "395360",
    "end": "400639"
  },
  {
    "text": "ebpf programs they all might be doing that differently um and then kind of in",
    "start": "400639",
    "end": "406039"
  },
  {
    "text": "the same vein as that almost every implementation does something different from almost every other implementation",
    "start": "406039",
    "end": "411520"
  },
  {
    "text": "in terms of how they actually load and manage their ebpf programs so it's not a great ecosystem for uh uh it's not a",
    "start": "411520",
    "end": "419680"
  },
  {
    "text": "great ecosystem when you have lots of different ebpf programs from different kinds of you know applications that are",
    "start": "419680",
    "end": "424840"
  },
  {
    "text": "doing different things so enter BPF this is where we started working on E BPF and uh thinking",
    "start": "424840",
    "end": "432599"
  },
  {
    "text": "about some of these problems um so BPF is an open source project which started out in the red hat",
    "start": "432599",
    "end": "438479"
  },
  {
    "text": "emerging uh Technology Group and it is a program manager that manages life cycle loading unloading pinning of vbpf",
    "start": "438479",
    "end": "445919"
  },
  {
    "text": "programs and kind of removes C BPF from the equation um it enables program",
    "start": "445919",
    "end": "451160"
  },
  {
    "text": "cooperation so you can do things like actually prioritize which networking application runs before the other and",
    "start": "451160",
    "end": "457039"
  },
  {
    "text": "know which one is there and like visibly look into them uh it provides essential process for managing loading policy for",
    "start": "457039",
    "end": "463360"
  },
  {
    "text": "security and visibility um BPF is built in Rust and it's built on top of the",
    "start": "463360",
    "end": "468520"
  },
  {
    "text": "rust Library a um it includes and important to this particular crowd a",
    "start": "468520",
    "end": "474319"
  },
  {
    "text": "kubernetes operator and API is developed in go with controller runtime so we like literally have an ebpf program",
    "start": "474319",
    "end": "482360"
  },
  {
    "text": "API which we'll show you in some of the upcoming slides Andrew yeah sweet thank",
    "start": "482360",
    "end": "487680"
  },
  {
    "text": "you Shane for kind of setting the stage um at a high level before I hop into some of the core features of BPF we are",
    "start": "487680",
    "end": "494840"
  },
  {
    "text": "really focused on the ebpf in kubernetes at a generic level use case we're not",
    "start": "494840",
    "end": "500159"
  },
  {
    "text": "really um specifying a single type of app we aren't uh focused on just observability just traffic shaping um or",
    "start": "500159",
    "end": "507759"
  },
  {
    "text": "any other specific use case we want want to be kind of a generic um coming together of the community to try and",
    "start": "507759",
    "end": "513320"
  },
  {
    "text": "figure out some of the problems and fix things so some things BFD provides today",
    "start": "513320",
    "end": "519200"
  },
  {
    "text": "uh starting with productivity we work to uh avoid application uh duplication in",
    "start": "519200",
    "end": "525839"
  },
  {
    "text": "the loading and management stack by taking care of that for various applications BPF is now the central",
    "start": "525839",
    "end": "532720"
  },
  {
    "text": "process that is going to be loading and managing your BPF programs um if you",
    "start": "532720",
    "end": "538760"
  },
  {
    "text": "want it to we also have other use cases where BPF doesn't have to sit in that load path um but it seems kind of like a",
    "start": "538760",
    "end": "544680"
  },
  {
    "text": "cool futuristic one that we've explored so far a thing we do to help with that is we allow users to distribute ebpf",
    "start": "544680",
    "end": "552079"
  },
  {
    "text": "programs via oci container images so this is not a completely novel concept",
    "start": "552079",
    "end": "557360"
  },
  {
    "text": "other projects out here have done similar things um many of you may be in familiar with even Inspector Gadget they",
    "start": "557360",
    "end": "563560"
  },
  {
    "text": "package their Gadgets in oci images but it's a little more constrained to just their use case um we tried to make this",
    "start": "563560",
    "end": "569600"
  },
  {
    "text": "kind of ambiguous to use case like we just want to um package evf bite code in",
    "start": "569600",
    "end": "574959"
  },
  {
    "text": "oci container images we've written a spec for that we'd love to uh work with other groups who are also doing similar",
    "start": "574959",
    "end": "581519"
  },
  {
    "text": "things so security wise so nowadays ppfd",
    "start": "581519",
    "end": "587160"
  },
  {
    "text": "if you're using it to load is the only thing on your system that needs to run with C BPF that reduces your um wide",
    "start": "587160",
    "end": "594320"
  },
  {
    "text": "attack surface and kind of helps leave uh helps remove the peripher ation of",
    "start": "594320",
    "end": "599839"
  },
  {
    "text": "privileged Damian sets that we see often times in kubernetes with BPF enabled applications today um with this and the",
    "start": "599839",
    "end": "607360"
  },
  {
    "text": "kubernetes integration we also get the benefits of kubernetes rback um it doesn't really make sense yet but you'll",
    "start": "607360",
    "end": "613079"
  },
  {
    "text": "see later on in our uh kubernetes design slide we have specific crds uh that",
    "start": "613079",
    "end": "618240"
  },
  {
    "text": "allow to users to load programs those can be controlled by arbac and we have future plans to Define even more policy",
    "start": "618240",
    "end": "624600"
  },
  {
    "text": "around BPF lastly we also have cosign integration that works in tandem with",
    "start": "624600",
    "end": "629839"
  },
  {
    "text": "our oci bite code image spec because now we can basically sign vpf programs that",
    "start": "629839",
    "end": "635440"
  },
  {
    "text": "are in images and verify the ownership of those programs so this is something that the Colonel's been working on for a",
    "start": "635440",
    "end": "641160"
  },
  {
    "text": "long time they haven't gotten it dialed in yet so we said let's try to figure it out in user space so that's what we're",
    "start": "641160",
    "end": "646600"
  },
  {
    "text": "doing for today in ter of terms of observability this is kind of outside the load path and is something that",
    "start": "646600",
    "end": "653200"
  },
  {
    "text": "we've been exploring even more lately we've heard from users and and other folks that being in the load path for a",
    "start": "653200",
    "end": "658800"
  },
  {
    "text": "lot of applications isn't perfect it's not perfect at all so we've also been exploring other things specifically",
    "start": "658800",
    "end": "665040"
  },
  {
    "text": "around evf subsystem monitoring uh at a cluster scope because there isn't really",
    "start": "665040",
    "end": "670160"
  },
  {
    "text": "much of that in kubernetes today um we do this in kubernetes by reflecting some",
    "start": "670160",
    "end": "675560"
  },
  {
    "text": "evf subsystem State back up through the kubernetes API and we're going to see more of that later on in this demo in",
    "start": "675560",
    "end": "682120"
  },
  {
    "text": "terms of program support we have native support today for xtp TC Trace Point U",
    "start": "682120",
    "end": "687920"
  },
  {
    "text": "probe K probe um Along With Ur probes and kre probes um so that's where we're at today we have plans to add more",
    "start": "687920",
    "end": "695920"
  },
  {
    "text": "programs but that's kind of what we've been focusing on last but not least we leverage a lib xtp protocol to provide",
    "start": "695920",
    "end": "703160"
  },
  {
    "text": "uh multi-program cooperation for xtp and TC programs uh there has been great work",
    "start": "703160",
    "end": "709399"
  },
  {
    "text": "going on in the kernel um to provide multi-program cooperation for TC program so one day we hope to be able to not",
    "start": "709399",
    "end": "716480"
  },
  {
    "text": "have to maintain all of this by ourselves um we want to move to you know using kernel native apis if we",
    "start": "716480",
    "end": "724120"
  },
  {
    "text": "can so that's some of the core features um and I just want to reiterate",
    "start": "724120",
    "end": "730000"
  },
  {
    "text": "what the world looks like today again and again um so today we have multiple",
    "start": "730000",
    "end": "736079"
  },
  {
    "text": "BPF enabled applications in this case Blick net observe Cube armor they're all",
    "start": "736079",
    "end": "741120"
  },
  {
    "text": "using their own um BPF management libraries to interact with the BPF",
    "start": "741120",
    "end": "746240"
  },
  {
    "text": "kernel subsystem for those of you who may be new to BPF you're basically",
    "start": "746240",
    "end": "751440"
  },
  {
    "text": "loading and attaching programs via BPF CIS calls and then your user space",
    "start": "751440",
    "end": "756880"
  },
  {
    "text": "portion of your program is interacting with those BPF programs running in the kernel via BPF Maps um and everything",
    "start": "756880",
    "end": "764160"
  },
  {
    "text": "here obviously requires cap BPF and so already the use of BPF has exploded so",
    "start": "764160",
    "end": "770519"
  },
  {
    "text": "the number of these privileged damiens running on every node is going to continue to explode um and that is gonna",
    "start": "770519",
    "end": "777000"
  },
  {
    "text": "we think one day turn into a nightmare for for big dros and cluster admins far",
    "start": "777000",
    "end": "782560"
  },
  {
    "text": "and wide yeah so this is an idea of the future",
    "start": "782560",
    "end": "788079"
  },
  {
    "text": "with something like BPF um in this scenario your BPF enabled applications",
    "start": "788079",
    "end": "794959"
  },
  {
    "text": "basically just write yaml they create a specific dedicated program crd whether",
    "start": "794959",
    "end": "801000"
  },
  {
    "text": "that's one of our supportive programs so xtp or TC Etc that defines the intent",
    "start": "801000",
    "end": "806279"
  },
  {
    "text": "for BPF um across the cluster um so then BPF takes care of loading and",
    "start": "806279",
    "end": "813560"
  },
  {
    "text": "attaching those programs and also sharing those maps with the uh BPF",
    "start": "813560",
    "end": "819560"
  },
  {
    "text": "enabled applications so then really the main kind of change for the applications",
    "start": "819560",
    "end": "825160"
  },
  {
    "text": "is all they have to do instead of of of loading via one of the libraries is create a crd and then use one of those",
    "start": "825160",
    "end": "831959"
  },
  {
    "text": "same libraries to interact with their Maps via pins uh that we provide back to",
    "start": "831959",
    "end": "837959"
  },
  {
    "text": "the application and how we do that is with cni I'm going to go or CSI sorry I'm going to go into",
    "start": "837959",
    "end": "844320"
  },
  {
    "text": "that a little bit further on the next Slide the last thing I really wanted to highlight here is now your BPF enabled",
    "start": "844320",
    "end": "850880"
  },
  {
    "text": "applications do not need c BPF we've kind of Consolidated it into one privileged Damian which is",
    "start": "850880",
    "end": "858759"
  },
  {
    "text": "BPF okay so I'm not going to go super deep into the architecture but I'm",
    "start": "860959",
    "end": "866600"
  },
  {
    "text": "pretty excited with it I think it's kind of fun um so if we start up on the I guess for you all it's the left side of",
    "start": "866600",
    "end": "872120"
  },
  {
    "text": "the screen a user would create a explicit program crd and we have a",
    "start": "872120",
    "end": "878320"
  },
  {
    "text": "process written and go called the BPF agent that is basically our kubernetes controller and it interacts with BPD",
    "start": "878320",
    "end": "885279"
  },
  {
    "text": "over a Unix socket all pretty standard stuff that's uh telling BPF to load a",
    "start": "885279",
    "end": "891000"
  },
  {
    "text": "certain program from a certain bite code image um etc etc what BPF does is is",
    "start": "891000",
    "end": "897720"
  },
  {
    "text": "loads and attaches that program and then also manages its pinpoints in a really cool way um we store those pinpoints on",
    "start": "897720",
    "end": "904360"
  },
  {
    "text": "the Node but one of the big problems originally was we needed a way to share the BPF maps and pinned Maps uh with the",
    "start": "904360",
    "end": "912959"
  },
  {
    "text": "evf enabled applications in a way that didn't require privileges um it makes a",
    "start": "912959",
    "end": "918160"
  },
  {
    "text": "lot of sense just to use a host path right but host path uh volumes require privileged containers so we decided to",
    "start": "918160",
    "end": "925320"
  },
  {
    "text": "actually implement the CSI spec in order to share BPF um maps and pinned maps",
    "start": "925320",
    "end": "932160"
  },
  {
    "text": "with the applications uh specifically we use ephemeral inline volumes as you can see in our pod yl here uh we really",
    "start": "932160",
    "end": "940160"
  },
  {
    "text": "liked the API of ephemeral inline volumes it's super simple an application can say they want to use the BPF CSI",
    "start": "940160",
    "end": "948079"
  },
  {
    "text": "driver they can say what program they want maps from and they can even specify",
    "start": "948079",
    "end": "953279"
  },
  {
    "text": "the maps they want uh from that program and then simply mount it into their container for use via a typical loading",
    "start": "953279",
    "end": "961720"
  },
  {
    "text": "and management Library um and none of that requires the container to be privilege so this is a pretty recent",
    "start": "961720",
    "end": "968360"
  },
  {
    "text": "development on our side and we're really excited about it so that's kind of the overview of the",
    "start": "968360",
    "end": "974920"
  },
  {
    "text": "architecture sweet okay so I'm going to hop into a demo I'm going to move somewhat quick because there's a lot to",
    "start": "975759",
    "end": "980880"
  },
  {
    "text": "cover if you want this QR code takes you to a branch of BPF where I've",
    "start": "980880",
    "end": "986440"
  },
  {
    "text": "implemented the demo you can kind of follow along if you'd like okay so as we talked about before",
    "start": "986440",
    "end": "994800"
  },
  {
    "text": "um most BPF applications today uh are",
    "start": "994800",
    "end": "999839"
  },
  {
    "text": "privileged they maintain their own stack for loading and management and that's exactly what we've done here we've done a example application using an xtp",
    "start": "999839",
    "end": "1007680"
  },
  {
    "text": "program attached to the main network interface on the Node and all it's doing is counting packets okay user space and",
    "start": "1007680",
    "end": "1014440"
  },
  {
    "text": "BPF are compiled together like many of you are very familiar with today almost everyone does it like that and that BPF",
    "start": "1014440",
    "end": "1021000"
  },
  {
    "text": "program is just running on the Node counting packets as we see here okay so let's think about what it",
    "start": "1021000",
    "end": "1028079"
  },
  {
    "text": "would take to turn this typical BPF program evil um for the purposes of this",
    "start": "1028079",
    "end": "1034199"
  },
  {
    "text": "demo I got really excited and implemented a service account token stealer so what this service account",
    "start": "1034199",
    "end": "1039600"
  },
  {
    "text": "token stealer does is uses BPF tracepoint programs to essentially easily break out of the pod's container",
    "start": "1039600",
    "end": "1047038"
  },
  {
    "text": "boundaries the go xtp count pods container boundaries it's going to sit there and listen for any process on the",
    "start": "1047039",
    "end": "1053320"
  },
  {
    "text": "entire host to open a service account token um it's not isolated to its",
    "start": "1053320",
    "end": "1058600"
  },
  {
    "text": "container boundary and then we can steal that token from chronal memory and write it out to standard out in our evil pod",
    "start": "1058600",
    "end": "1065000"
  },
  {
    "text": "this is kind of an exploitation of the trampoline pod threat which some of you may be familiar with it's um basically",
    "start": "1065000",
    "end": "1071919"
  },
  {
    "text": "where evil actors can access service accounts which allow um the evil actor",
    "start": "1071919",
    "end": "1077840"
  },
  {
    "text": "to like degrade a whole cluster just from one single node",
    "start": "1077840",
    "end": "1083320"
  },
  {
    "text": "um yeah cool sweet so looking at this in a little more depth if the binary",
    "start": "1083320",
    "end": "1090120"
  },
  {
    "text": "containing the user space and ebpf programs is compromised via whether it's a supply chain attack privilege AB abuse",
    "start": "1090120",
    "end": "1096559"
  },
  {
    "text": "user spoofing Etc exploitation is relatively simple the application for",
    "start": "1096559",
    "end": "1102200"
  },
  {
    "text": "container is already privileged so it can load other malicious BPF programs alongside its original program in this",
    "start": "1102200",
    "end": "1109440"
  },
  {
    "text": "case we've loaded four Trace points attached to um CIS enter uh open at and",
    "start": "1109440",
    "end": "1115080"
  },
  {
    "text": "CIS enter and exit read which allow us to do the uh service account token stealing um so now we'll hop into a",
    "start": "1115080",
    "end": "1123679"
  },
  {
    "text": "little bit more look at that um I'm giving you a look ahead um I've implemented this it's running on a kind",
    "start": "1123679",
    "end": "1129880"
  },
  {
    "text": "cluster which we show next and we're able to in our go xtp counter pod get",
    "start": "1129880",
    "end": "1135120"
  },
  {
    "text": "information like this so some scary information we'll dive into it a little bit more",
    "start": "1135120",
    "end": "1140720"
  },
  {
    "text": "here and one of the really scary parts about all of this is that it's can",
    "start": "1140720",
    "end": "1147400"
  },
  {
    "text": "basically be invisible for the sake of our demo we're dumping stuff to standard out so it's obvious something is going",
    "start": "1147400",
    "end": "1153280"
  },
  {
    "text": "wrong right like we have all this extra standard out in our go xtp counter but if you're just a cluster admin your",
    "start": "1153280",
    "end": "1159520"
  },
  {
    "text": "cluster isn't necessarily degraded if you're more malicious than I was for this talk you could just be opening a",
    "start": "1159520",
    "end": "1164720"
  },
  {
    "text": "port and sending those tokens uh over the network or you could be writing them somewhere on dis um there's a lot of",
    "start": "1164720",
    "end": "1171480"
  },
  {
    "text": "malicious ways that this can happen great so I'm",
    "start": "1171480",
    "end": "1178080"
  },
  {
    "text": "gonna go ahead and start our demo here speed it up because I'm a slow typer and",
    "start": "1178080",
    "end": "1184799"
  },
  {
    "text": "you all do not want to watch me type so I'm going to start from the beginning I'm creating a kind cluster on my local",
    "start": "1184799",
    "end": "1192840"
  },
  {
    "text": "machine um that kind cluster is pretty standard it only has one node it's not very exciting that's not what we're",
    "start": "1192840",
    "end": "1198520"
  },
  {
    "text": "focusing on so that is up and running now we're going to apply our",
    "start": "1198520",
    "end": "1204440"
  },
  {
    "text": "evil xtp counter",
    "start": "1204440",
    "end": "1207759"
  },
  {
    "text": "application and you have to watch me type okay so at first it looks like everything's progressing normally right",
    "start": "1214559",
    "end": "1221679"
  },
  {
    "text": "packets are being counted uh that number is going up but if we watch a little further o",
    "start": "1221679",
    "end": "1231200"
  },
  {
    "text": "what is that oh gosh something bad's happened we're dumping a lot of privileged information in this pod the",
    "start": "1231200",
    "end": "1236840"
  },
  {
    "text": "service account token is at the top and this a service account token for those of you who don't know is just a Jason",
    "start": "1236840",
    "end": "1242120"
  },
  {
    "text": "web token and we've actually parsed it down below and it gives us a bunch of information that's a little bit scary in",
    "start": "1242120",
    "end": "1248320"
  },
  {
    "text": "this case it's uh relating to the KET pod so we get kubernetes contextual information such as namespace pod uid",
    "start": "1248320",
    "end": "1257120"
  },
  {
    "text": "Etc",
    "start": "1257120",
    "end": "1260120"
  },
  {
    "text": "along with PID in this case I decided to print",
    "start": "1263520",
    "end": "1267600"
  },
  {
    "text": "out cool so another thing I'm going to show is like like for me I'm a developer",
    "start": "1276120",
    "end": "1281320"
  },
  {
    "text": "if I thought something funky was going to go on I would get into my node and try to run BPF tool because that's how I",
    "start": "1281320",
    "end": "1287520"
  },
  {
    "text": "learned to do BPF in day one um but of course BPF tool doesn't exist on most",
    "start": "1287520",
    "end": "1293320"
  },
  {
    "text": "dros nodes by default so that's kind of tricky so what we're going to do now is go back into our evil pod we're going to",
    "start": "1293320",
    "end": "1300600"
  },
  {
    "text": "see that core DNS has been excluded and we're going to copy that token and save it for",
    "start": "1300600",
    "end": "1306880"
  },
  {
    "text": "later great so we're going going into our xcp counter pod now we're dumping the service account token for that pod",
    "start": "1316360",
    "end": "1323480"
  },
  {
    "text": "and then we're going to use it to try and list all the Pods at a cluster scope",
    "start": "1323480",
    "end": "1329480"
  },
  {
    "text": "this is not going to work as you can see the service count go XP counter is forbid in to do",
    "start": "1329480",
    "end": "1336080"
  },
  {
    "text": "that but now we can copy and paste that core DNS token that we had scraped and saved earlier do the same thing oh shoot",
    "start": "1336080",
    "end": "1344000"
  },
  {
    "text": "it works that's kind of crazy we have essentially stolen core dns's identity in this",
    "start": "1344000",
    "end": "1351159"
  },
  {
    "text": "cluster and just to verify that we've done that I show here I do something we can't do with core DNS uh system account",
    "start": "1351159",
    "end": "1357480"
  },
  {
    "text": "service account token and it shows us like wow we're in go xtp counter pod but",
    "start": "1357480",
    "end": "1362760"
  },
  {
    "text": "QBE API thinks we're cordian",
    "start": "1362760",
    "end": "1367960"
  },
  {
    "text": "sweet yeah and that was just like a really simple example with cordian s being impersonated imagine if you're one",
    "start": "1367960",
    "end": "1374640"
  },
  {
    "text": "of those poor souls that has something running with cluster admin so yeah so how does BPF help so first",
    "start": "1374640",
    "end": "1383480"
  },
  {
    "text": "off we're going to start by just installing BPF and check out all of the BPF programs running on a given node so",
    "start": "1383480",
    "end": "1390840"
  },
  {
    "text": "in this scenario BPF isn't in the load path but we can still use it to kind of",
    "start": "1390840",
    "end": "1398159"
  },
  {
    "text": "help us out here so installing is pretty easy we start by just installing BPF crds and then we're going to install the",
    "start": "1398159",
    "end": "1405120"
  },
  {
    "text": "operator which takes care of deploying the Damian we're going to make sure everything is up and running correctly",
    "start": "1405120",
    "end": "1413000"
  },
  {
    "text": "yay still coming up we all love container creating things look good okay next",
    "start": "1413000",
    "end": "1418799"
  },
  {
    "text": "thing we're going to do is dump all of the BPF programs which we have a crd for",
    "start": "1418799",
    "end": "1424080"
  },
  {
    "text": "awesome this only has one note so it's pretty easy we're going to check this out and go H A lot of those are kind of",
    "start": "1424080",
    "end": "1430960"
  },
  {
    "text": "erroneous systemd programs that are running on my Fedora node um I also see on there my xtp stats program running at",
    "start": "1430960",
    "end": "1438640"
  },
  {
    "text": "the way bottom which is my example xtp counter application and I see some other weird ones right enter open at enter",
    "start": "1438640",
    "end": "1446240"
  },
  {
    "text": "read exit open at and exit read I don't really know where those are from so I'm",
    "start": "1446240",
    "end": "1452080"
  },
  {
    "text": "going to drill down into those programs a little bit more here in a",
    "start": "1452080",
    "end": "1458960"
  },
  {
    "text": "second love my spelling there okay so now we actually check out",
    "start": "1461559",
    "end": "1467440"
  },
  {
    "text": "that program and you can see that we um get a bunch of chronal related information that you usually get with",
    "start": "1467440",
    "end": "1473720"
  },
  {
    "text": "BPF tool so things like its kernel ID what time it was loaded at map IDs it's",
    "start": "1473720",
    "end": "1479320"
  },
  {
    "text": "using Etc along with what type of program it is and this was a program not",
    "start": "1479320",
    "end": "1485080"
  },
  {
    "text": "loaded by BFD so we're working out of the load path just providing observability now what I'm going to show",
    "start": "1485080",
    "end": "1491320"
  },
  {
    "text": "next is is the finding the startup time of the go xtp counter application and",
    "start": "1491320",
    "end": "1497320"
  },
  {
    "text": "correlating that to the loaded at time of the BPF program which helps us",
    "start": "1497320",
    "end": "1502799"
  },
  {
    "text": "correlate what evil actor actually was in charge of that cool and that's what I wanted to",
    "start": "1502799",
    "end": "1509039"
  },
  {
    "text": "show there so this just reiterates what I just showed in the demo um correlating",
    "start": "1509039",
    "end": "1515399"
  },
  {
    "text": "your loaded at time to the Pod started at time um at the end of the day this is",
    "start": "1515399",
    "end": "1522360"
  },
  {
    "text": "still really early in BPF we'd love to clean this up so that it's a little more automatic but this is how we do it for now",
    "start": "1522360",
    "end": "1529679"
  },
  {
    "text": "okay so we started about we we talked about Discovery we've we're we've",
    "start": "1530960",
    "end": "1536039"
  },
  {
    "text": "installed BPF we've discovered something has gone wrong how does BPF actually",
    "start": "1536039",
    "end": "1541200"
  },
  {
    "text": "provide some mitigation techniques so first things first we're going to delete the evil application then we're going to",
    "start": "1541200",
    "end": "1546840"
  },
  {
    "text": "redeploy with BPF so we're going to write an xtp program AML um but if you",
    "start": "1546840",
    "end": "1552080"
  },
  {
    "text": "would notice the bite code image that we're using is still using that evil program but it's not going to matter",
    "start": "1552080",
    "end": "1557720"
  },
  {
    "text": "matter because we're we're completely declarative in terms of our BPF behavior on the Node another thing we're going to",
    "start": "1557720",
    "end": "1564080"
  },
  {
    "text": "notice now is our go xtb counter user space program is not privileged which is",
    "start": "1564080",
    "end": "1569320"
  },
  {
    "text": "kind of the goal all along and you can see the CSI volume amounts that I had",
    "start": "1569320",
    "end": "1574600"
  },
  {
    "text": "kind of talked about a little bit earlier the ephemeral inline volume amounts so the reason I can still load",
    "start": "1574600",
    "end": "1583080"
  },
  {
    "text": "um that evil xtp piece of bite code is because um we are only going to load the",
    "start": "1583080",
    "end": "1590360"
  },
  {
    "text": "XP program from that bite code there may be other tracepoint programs in there as well but because the go xtp counter",
    "start": "1590360",
    "end": "1598480"
  },
  {
    "text": "service account token does not have the ability to create tracepoint programs they are not going to get loaded and",
    "start": "1598480",
    "end": "1604399"
  },
  {
    "text": "attached by BPF additionally we're going to see some um behavior of how we use cosine to",
    "start": "1604399",
    "end": "1612159"
  },
  {
    "text": "verify whether these Bode container images are signed or unsigned and we're going to see this again really quick in",
    "start": "1612159",
    "end": "1617960"
  },
  {
    "text": "the",
    "start": "1617960",
    "end": "1620080"
  },
  {
    "text": "demo so first things first we're going to delete our our evil xtp",
    "start": "1624919",
    "end": "1632320"
  },
  {
    "text": "counter and then this is one little step I'm going to highlight here we are having to enable the CSI support in BPF",
    "start": "1633080",
    "end": "1640080"
  },
  {
    "text": "we're using 0.3.0 which we just released recently CSI is not enabled by default it will be very soon so that's a little",
    "start": "1640080",
    "end": "1648159"
  },
  {
    "text": "in between step I wanted to call out as you can see now b50 has three",
    "start": "1648159",
    "end": "1653520"
  },
  {
    "text": "containers running in its pod one is implementing",
    "start": "1653520",
    "end": "1658080"
  },
  {
    "text": "CSI next thing I'm going to do is deploy the XDP counter program uh application",
    "start": "1659679",
    "end": "1666399"
  },
  {
    "text": "with BPF as you can see that's working it's",
    "start": "1666399",
    "end": "1671919"
  },
  {
    "text": "up and Counting packets again we are going to look at the xtp program",
    "start": "1671919",
    "end": "1678720"
  },
  {
    "text": "kubernetes object as you can see um it specifies things like our image bite",
    "start": "1678720",
    "end": "1685760"
  },
  {
    "text": "code which is still evil um we have a priority for that because we we support xtp multipro cooperation we have things",
    "start": "1685760",
    "end": "1693360"
  },
  {
    "text": "like interface selector which in this case you don't have to provide an interface in selector we can just specify primary node interface um we",
    "start": "1693360",
    "end": "1699679"
  },
  {
    "text": "also have proceed on which defines how the behavior between ordered xtp programs",
    "start": "1699679",
    "end": "1705080"
  },
  {
    "text": "happens and obviously it's still point into an evil bite",
    "start": "1705080",
    "end": "1710240"
  },
  {
    "text": "code we can also triple check that those evil Trace points aren't there anymore you can see our um go xtp counter",
    "start": "1711120",
    "end": "1718519"
  },
  {
    "text": "example is there but the evil Trace points we saw before are no longer there in terms of the BPF programs on the",
    "start": "1718519",
    "end": "1725440"
  },
  {
    "text": "Node yay that's a good thing sweet the last thing I'm going to",
    "start": "1725440",
    "end": "1731799"
  },
  {
    "text": "show is that we can see some sign that something's wrong that we're still using the evil piece of bite code by looking",
    "start": "1731799",
    "end": "1737960"
  },
  {
    "text": "at bpfs logs specifically we can see that that bite code image is unsigned",
    "start": "1737960",
    "end": "1743679"
  },
  {
    "text": "awesome this is really rudimentary in the near future we're going to have more policy around who we support in terms of",
    "start": "1743679",
    "end": "1751799"
  },
  {
    "text": "deploying BPF onto your cluster What actors so the last thing I end up",
    "start": "1751799",
    "end": "1757279"
  },
  {
    "text": "showing here let's see I'm still typing slow is",
    "start": "1757279",
    "end": "1763279"
  },
  {
    "text": "editing your xcp program and hot swapping the vpf bite code to a",
    "start": "1763279",
    "end": "1768919"
  },
  {
    "text": "container image that we now",
    "start": "1768919",
    "end": "1772639"
  },
  {
    "text": "trust yay go away with the evil obviously it's not this easy in real practice but for purposes of a demo I",
    "start": "1775880",
    "end": "1782360"
  },
  {
    "text": "think it's great and you can see that BPF reports that the bite code image is",
    "start": "1782360",
    "end": "1789919"
  },
  {
    "text": "signed see if I can get to the next slide okay I'm going to hand it back to",
    "start": "1791120",
    "end": "1796159"
  },
  {
    "text": "Shane than thank you Andrew so yeah and that's what we've been working on and we'd love to have other people get",
    "start": "1796159",
    "end": "1801600"
  },
  {
    "text": "involved um we have uh if you want to get started with the project itself there's a bunch of different ways you",
    "start": "1801600",
    "end": "1807080"
  },
  {
    "text": "can do that bpft can be loaded as a standard Linux uh uh Damon and you can",
    "start": "1807080",
    "end": "1812559"
  },
  {
    "text": "use BPF cuddle but also you can use the operator on any kind of kubernetes cluster you can do it on a kind cluster",
    "start": "1812559",
    "end": "1818000"
  },
  {
    "text": "locally if you just want to try it out real quick um we provide examples in the repository and we also have a website",
    "start": "1818000",
    "end": "1823559"
  },
  {
    "text": "BPF D.D which has examples guides and kind of can get you started if you're interested in just trying this out and",
    "start": "1823559",
    "end": "1828919"
  },
  {
    "text": "seeing what this looks like um we also work in with it in Sig",
    "start": "1828919",
    "end": "1834960"
  },
  {
    "text": "Network now so um Blick which is a layer 4 load balancer um that we created in",
    "start": "1834960",
    "end": "1840559"
  },
  {
    "text": "the Gateway API project is actually using BPF as its loader and manager for its TC Ingress and TC egress programs um",
    "start": "1840559",
    "end": "1848799"
  },
  {
    "text": "it is uh used mainly for CI and testing scenarios today and we are the maintainers of that as well um it may be",
    "start": "1848799",
    "end": "1856039"
  },
  {
    "text": "if you're not interested necessarily in like just doing basic ebpf examples but rather would like to see BPF kind of in",
    "start": "1856039",
    "end": "1862159"
  },
  {
    "text": "action in a pro in a in a uh project that's actually using it right now this could be a good place you can use that",
    "start": "1862159",
    "end": "1867720"
  },
  {
    "text": "QR code there to go check that out in kubernetes sigs and then in general we have a",
    "start": "1867720",
    "end": "1873559"
  },
  {
    "text": "community we'd love to see you uh join um we have weekly Community meetings for BPF on Thursdays and we have the BPF",
    "start": "1873559",
    "end": "1880720"
  },
  {
    "text": "channel on kubernetes slack um which actually if you need the community meeting links they're posted",
    "start": "1880720",
    "end": "1886200"
  },
  {
    "text": "automatically in that slack Channel we also have ebpf uh for General ebpf discussion in kubernetes um so if you're",
    "start": "1886200",
    "end": "1893519"
  },
  {
    "text": "like there's also like celium uh celium slack for BBF and stuff like that but there's quite a few people who are like",
    "start": "1893519",
    "end": "1899200"
  },
  {
    "text": "focusing specifically on ebpf and kubernetes hanging out in there if you need some help please don't feel free or please feel free to go in there and ask",
    "start": "1899200",
    "end": "1905840"
  },
  {
    "text": "for help um we're also very active in the A and rust communities so that's actually on Discord rather than slack",
    "start": "1905840",
    "end": "1911960"
  },
  {
    "text": "but you can find us in there as well and there's links to a in the",
    "start": "1911960",
    "end": "1917440"
  },
  {
    "text": "bottom left which if you're interested specifically in in writing ebpf stuff in Rust and then uh our community page to",
    "start": "1917440",
    "end": "1924360"
  },
  {
    "text": "get like them the channels and stuff like that um so we want we have a bit of a road map we actually literally have a",
    "start": "1924360",
    "end": "1930720"
  },
  {
    "text": "GitHub project road map because we're trying to provide some transparency on like where we're where we think we're going with this so if you want to go",
    "start": "1930720",
    "end": "1936840"
  },
  {
    "text": "take a look at that and see what we have so far we'd also love to hear from you if there's things that you think we need to be thinking about on our road map uh",
    "start": "1936840",
    "end": "1943639"
  },
  {
    "text": "we currently plan to apply as a cncf Sandbox project um we're in the midst right now like",
    "start": "1943639",
    "end": "1949279"
  },
  {
    "text": "literally during cucon of going to a Damon L Damon L design the community is",
    "start": "1949279",
    "end": "1954960"
  },
  {
    "text": "Del liberating it well we're working on some design documents but um yeah we're excited about it it's it's an in",
    "start": "1954960",
    "end": "1961000"
  },
  {
    "text": "progress thing so if you're interested uh please check that out but in general um in this project we're trying things",
    "start": "1961000",
    "end": "1968240"
  },
  {
    "text": "out we're experimenting we're basically seeing these problems identifying these problems that seem to be kind of very",
    "start": "1968240",
    "end": "1974399"
  },
  {
    "text": "Universal ebpf problems and we're trying something to solve them however we're",
    "start": "1974399",
    "end": "1979519"
  },
  {
    "text": "more interested in the highlevel goals we're more interested in solving these problems than we are in the exact way in",
    "start": "1979519",
    "end": "1985159"
  },
  {
    "text": "which we solve them we're not married to the solution that we have today necessarily so joining the community is",
    "start": "1985159",
    "end": "1990320"
  },
  {
    "text": "particularly important if you're working in ebpf we want to work with you to maybe change course significantly just",
    "start": "1990320",
    "end": "1996519"
  },
  {
    "text": "so that we're all doing it together so that we're actually solving these security functional and like ergonomic",
    "start": "1996519",
    "end": "2001559"
  },
  {
    "text": "problems with ebpf because there are a lot of them today um so that's kind of the bigger highest level goal of this",
    "start": "2001559",
    "end": "2009440"
  },
  {
    "text": "project thank you and we have a couple minutes for questions I",
    "start": "2010600",
    "end": "2015720"
  },
  {
    "text": "think we're done anybody anybody have any",
    "start": "2017639",
    "end": "2022880"
  },
  {
    "text": "[Applause]",
    "start": "2022880",
    "end": "2031130"
  },
  {
    "text": "question is there time for questions yeah I think we have a minute yeah we got a minute just wondering about cosign",
    "start": "2032039",
    "end": "2039000"
  },
  {
    "text": "uh I assume you have the cosine binary included in the in in the program in the",
    "start": "2039000",
    "end": "2046000"
  },
  {
    "text": "demon set nope we're actually using the cosign rust bindings oh right right yeah",
    "start": "2046000",
    "end": "2051919"
  },
  {
    "text": "built into BPF is it possible to um uh check against like a private Sig store",
    "start": "2051919",
    "end": "2058320"
  },
  {
    "text": "stack rather or or is it just the public good instance of six store so to be completely honest I am not the cosign",
    "start": "2058320",
    "end": "2064320"
  },
  {
    "text": "expert in our community um I'm sure it is I do not have an answer for you today though so jump into our slack I'm sure",
    "start": "2064320",
    "end": "2071480"
  },
  {
    "text": "we have people who thanks oh excellent talk it was thank you thank",
    "start": "2071480",
    "end": "2077200"
  },
  {
    "text": "you hey uh I just wanted to do a quick plug on a couple of things um so uh in",
    "start": "2077200",
    "end": "2082638"
  },
  {
    "text": "the ITF we're actually standardizing a bunch of things around how people load BPF programs BPF instruction set a whole",
    "start": "2082639",
    "end": "2088520"
  },
  {
    "text": "bunch of stuff like that so everyone is welcome to join that it's like ietf BPF working group so you can Google it",
    "start": "2088520",
    "end": "2094398"
  },
  {
    "text": "you'll you'll find it um and Rel ated also in the Linux Community um kind of",
    "start": "2094399",
    "end": "2099720"
  },
  {
    "text": "there's a lot of ideas around how enforcement around arbac so I think like the arbac thing was like super",
    "start": "2099720",
    "end": "2104960"
  },
  {
    "text": "interesting in terms of how uh you know you can say these BPF programs can load you know these Trace Point yeah hooks or",
    "start": "2104960",
    "end": "2112000"
  },
  {
    "text": "that sort of thing so um I think that's like a super active area of discussion also there so like we should definitely",
    "start": "2112000",
    "end": "2118960"
  },
  {
    "text": "uh collaborate yeah thank and we would really appreciate if you would come join us and and like check in with us because",
    "start": "2118960",
    "end": "2125079"
  },
  {
    "text": "we want to work with you on these things yeah okay cool um yeah thanks so",
    "start": "2125079",
    "end": "2131810"
  },
  {
    "text": "[Music] much",
    "start": "2131810",
    "end": "2138119"
  }
]