[
  {
    "text": "how prometheus indexes its data and why",
    "start": "0",
    "end": "2720"
  },
  {
    "text": "you should care",
    "start": "2720",
    "end": "5439"
  },
  {
    "text": "do you ever wonder why a simple promql",
    "start": "5920",
    "end": "8480"
  },
  {
    "text": "query like this",
    "start": "8480",
    "end": "10240"
  },
  {
    "text": "takes more time to execute with more",
    "start": "10240",
    "end": "12480"
  },
  {
    "text": "instances to monitor",
    "start": "12480",
    "end": "14559"
  },
  {
    "text": "even when the instance label is not in",
    "start": "14559",
    "end": "16720"
  },
  {
    "text": "the query",
    "start": "16720",
    "end": "18000"
  },
  {
    "text": "or",
    "start": "18000",
    "end": "18880"
  },
  {
    "text": "why does the performance slows down",
    "start": "18880",
    "end": "20800"
  },
  {
    "text": "every time you query data with an",
    "start": "20800",
    "end": "22560"
  },
  {
    "text": "increased time range",
    "start": "22560",
    "end": "25279"
  },
  {
    "text": "this talk will give you an intuition for",
    "start": "25279",
    "end": "27199"
  },
  {
    "text": "query performance by understanding how",
    "start": "27199",
    "end": "29920"
  },
  {
    "text": "prometheus",
    "start": "29920",
    "end": "31119"
  },
  {
    "text": "indexes its data",
    "start": "31119",
    "end": "34239"
  },
  {
    "text": "a brief about me",
    "start": "35760",
    "end": "38160"
  },
  {
    "text": "hello everyone i am",
    "start": "38160",
    "end": "40320"
  },
  {
    "text": "singh i live in bhubaneshwar which is an",
    "start": "40320",
    "end": "42879"
  },
  {
    "text": "east coast of india",
    "start": "42879",
    "end": "44640"
  },
  {
    "text": "i work as a software engineer in a time",
    "start": "44640",
    "end": "46399"
  },
  {
    "text": "scale and contribute to prometheus",
    "start": "46399",
    "end": "48239"
  },
  {
    "text": "upstream regularly while developing and",
    "start": "48239",
    "end": "50640"
  },
  {
    "text": "maintaining prom scale which is an open",
    "start": "50640",
    "end": "52960"
  },
  {
    "text": "source observability backend that can",
    "start": "52960",
    "end": "55199"
  },
  {
    "text": "store prometheus metrics and open",
    "start": "55199",
    "end": "56800"
  },
  {
    "text": "telemetry traces",
    "start": "56800",
    "end": "58480"
  },
  {
    "text": "when i'm not working i read books and",
    "start": "58480",
    "end": "61280"
  },
  {
    "text": "play computer games",
    "start": "61280",
    "end": "63840"
  },
  {
    "text": "that's about me",
    "start": "63840",
    "end": "66400"
  },
  {
    "text": "this talk will cover three topics",
    "start": "66400",
    "end": "69119"
  },
  {
    "text": "we'll start with understanding the",
    "start": "69119",
    "end": "70560"
  },
  {
    "text": "prometheus data model",
    "start": "70560",
    "end": "72479"
  },
  {
    "text": "then learn about the indexing strategies",
    "start": "72479",
    "end": "74400"
  },
  {
    "text": "that prometheus uses to index its data",
    "start": "74400",
    "end": "77200"
  },
  {
    "text": "and finally learn the querying execution",
    "start": "77200",
    "end": "79360"
  },
  {
    "text": "flow with the help of prometheus",
    "start": "79360",
    "end": "81200"
  },
  {
    "text": "indexing strategies",
    "start": "81200",
    "end": "83600"
  },
  {
    "text": "that we learnt in part 2 and the effect",
    "start": "83600",
    "end": "86159"
  },
  {
    "text": "of high cardinality on it",
    "start": "86159",
    "end": "88799"
  },
  {
    "text": "let's begin with understanding the",
    "start": "88799",
    "end": "90240"
  },
  {
    "text": "prometheus data model",
    "start": "90240",
    "end": "93520"
  },
  {
    "text": "for me just uses a simple data model",
    "start": "93520",
    "end": "95439"
  },
  {
    "text": "that contains labels values and",
    "start": "95439",
    "end": "98000"
  },
  {
    "text": "timestamp",
    "start": "98000",
    "end": "99360"
  },
  {
    "text": "in this example we have a metric go",
    "start": "99360",
    "end": "101600"
  },
  {
    "text": "underscore go routines which has two",
    "start": "101600",
    "end": "103600"
  },
  {
    "text": "labels instance equals c advisor called",
    "start": "103600",
    "end": "106880"
  },
  {
    "text": "8080 and job equals c advisor",
    "start": "106880",
    "end": "110079"
  },
  {
    "text": "which has a value 125 followed by a",
    "start": "110079",
    "end": "112640"
  },
  {
    "text": "timestamp",
    "start": "112640",
    "end": "115640"
  },
  {
    "text": "now what are series",
    "start": "116719",
    "end": "118719"
  },
  {
    "text": "series are basically sets of labels",
    "start": "118719",
    "end": "121920"
  },
  {
    "text": "now if you change one label or even its",
    "start": "121920",
    "end": "124880"
  },
  {
    "text": "label value it's a completely new series",
    "start": "124880",
    "end": "127600"
  },
  {
    "text": "in prometheus data model",
    "start": "127600",
    "end": "129840"
  },
  {
    "text": "for example",
    "start": "129840",
    "end": "131200"
  },
  {
    "text": "the third label over here which is",
    "start": "131200",
    "end": "133040"
  },
  {
    "text": "instance has its value changed towards",
    "start": "133040",
    "end": "135200"
  },
  {
    "text": "the right",
    "start": "135200",
    "end": "136640"
  },
  {
    "text": "this leads to completely new series for",
    "start": "136640",
    "end": "138480"
  },
  {
    "text": "prometheus",
    "start": "138480",
    "end": "140959"
  },
  {
    "text": "what prometheus index cares about is",
    "start": "140959",
    "end": "143520"
  },
  {
    "text": "labels and time",
    "start": "143520",
    "end": "145360"
  },
  {
    "text": "these tools are collected when",
    "start": "145360",
    "end": "147200"
  },
  {
    "text": "prometheus monitors a target",
    "start": "147200",
    "end": "150640"
  },
  {
    "text": "the value part in the community's data",
    "start": "150640",
    "end": "152319"
  },
  {
    "text": "model which we learned previously",
    "start": "152319",
    "end": "154720"
  },
  {
    "text": "is not what prometheus index cares about",
    "start": "154720",
    "end": "158640"
  },
  {
    "text": "on a high level let's see the indexing",
    "start": "159360",
    "end": "161280"
  },
  {
    "text": "strategies that prometheus uses",
    "start": "161280",
    "end": "165280"
  },
  {
    "text": "let's start with understanding what a",
    "start": "165440",
    "end": "167280"
  },
  {
    "text": "prometheus block is",
    "start": "167280",
    "end": "169200"
  },
  {
    "text": "a block in prometheus is a basic need of",
    "start": "169200",
    "end": "171760"
  },
  {
    "text": "data storage that stores two hours worth",
    "start": "171760",
    "end": "174400"
  },
  {
    "text": "of data",
    "start": "174400",
    "end": "176959"
  },
  {
    "text": "let's see how a block looks like",
    "start": "178000",
    "end": "181680"
  },
  {
    "text": "on a high level the block contains two",
    "start": "182480",
    "end": "185440"
  },
  {
    "text": "things samples data and index",
    "start": "185440",
    "end": "188560"
  },
  {
    "text": "sample data is the data that promises",
    "start": "188560",
    "end": "190879"
  },
  {
    "text": "graves from the targets and stores it",
    "start": "190879",
    "end": "193120"
  },
  {
    "text": "inside the chunks directory",
    "start": "193120",
    "end": "195680"
  },
  {
    "text": "index is the actual indexing process",
    "start": "195680",
    "end": "198159"
  },
  {
    "text": "that promises users",
    "start": "198159",
    "end": "199840"
  },
  {
    "text": "for query evaluation or for indexing its",
    "start": "199840",
    "end": "202640"
  },
  {
    "text": "data",
    "start": "202640",
    "end": "204799"
  },
  {
    "text": "this is what we will learn about in the",
    "start": "204799",
    "end": "206799"
  },
  {
    "text": "next slides",
    "start": "206799",
    "end": "208480"
  },
  {
    "text": "the next is method.json which is the",
    "start": "208480",
    "end": "211120"
  },
  {
    "text": "method about the block",
    "start": "211120",
    "end": "213440"
  },
  {
    "text": "and finally we have tombstones",
    "start": "213440",
    "end": "216159"
  },
  {
    "text": "which contains a deleted series along",
    "start": "216159",
    "end": "218720"
  },
  {
    "text": "with information about its deletion",
    "start": "218720",
    "end": "220799"
  },
  {
    "text": "range",
    "start": "220799",
    "end": "223200"
  },
  {
    "text": "let's learn about what chunks are",
    "start": "223280",
    "end": "227200"
  },
  {
    "text": "chunks are a collection of samples in a",
    "start": "227200",
    "end": "229440"
  },
  {
    "text": "time range for a particular series",
    "start": "229440",
    "end": "232400"
  },
  {
    "text": "this organization of data makes it",
    "start": "232400",
    "end": "234879"
  },
  {
    "text": "easier for systems to drive samples for",
    "start": "234879",
    "end": "237840"
  },
  {
    "text": "a particular series",
    "start": "237840",
    "end": "239599"
  },
  {
    "text": "if the index can figure out which chunk",
    "start": "239599",
    "end": "243040"
  },
  {
    "text": "which set of chunks belong to a",
    "start": "243040",
    "end": "244799"
  },
  {
    "text": "particular series",
    "start": "244799",
    "end": "246640"
  },
  {
    "text": "we will cover this in the next slide",
    "start": "246640",
    "end": "250480"
  },
  {
    "text": "now let's see what an index file is",
    "start": "251280",
    "end": "254400"
  },
  {
    "text": "prometheus index file contains two types",
    "start": "254400",
    "end": "256639"
  },
  {
    "text": "of indexing the first is postings index",
    "start": "256639",
    "end": "259919"
  },
  {
    "text": "and the second is series index",
    "start": "259919",
    "end": "263840"
  },
  {
    "text": "a posting index is a relationship",
    "start": "264000",
    "end": "266080"
  },
  {
    "text": "between labels and a set of series that",
    "start": "266080",
    "end": "268960"
  },
  {
    "text": "contains that particular label",
    "start": "268960",
    "end": "272000"
  },
  {
    "text": "for example",
    "start": "272000",
    "end": "274800"
  },
  {
    "text": "name equals up",
    "start": "274880",
    "end": "276560"
  },
  {
    "text": "this label is contained in two series",
    "start": "276560",
    "end": "280479"
  },
  {
    "text": "and similarly the next example is",
    "start": "280479",
    "end": "283440"
  },
  {
    "text": "instance equals 9091 we have once",
    "start": "283440",
    "end": "287360"
  },
  {
    "text": "we have one series in our example which",
    "start": "287360",
    "end": "289120"
  },
  {
    "text": "contains this particular label",
    "start": "289120",
    "end": "292639"
  },
  {
    "text": "a series index is a relationship between",
    "start": "295680",
    "end": "298080"
  },
  {
    "text": "series and set of chunks that belongs to",
    "start": "298080",
    "end": "300720"
  },
  {
    "text": "that particular series",
    "start": "300720",
    "end": "304080"
  },
  {
    "text": "for example the first series contains",
    "start": "304080",
    "end": "306800"
  },
  {
    "text": "two chunks",
    "start": "306800",
    "end": "308240"
  },
  {
    "text": "the second series contains three chunks",
    "start": "308240",
    "end": "311919"
  },
  {
    "text": "none of these chunks are shared between",
    "start": "311919",
    "end": "313840"
  },
  {
    "text": "two series rather each chunk is specific",
    "start": "313840",
    "end": "317680"
  },
  {
    "text": "to the series itself",
    "start": "317680",
    "end": "320880"
  },
  {
    "text": "let's see how the blocks are placed",
    "start": "322160",
    "end": "324400"
  },
  {
    "text": "inside prometheus tsdb",
    "start": "324400",
    "end": "328000"
  },
  {
    "text": "blocks information tsdb are collection",
    "start": "329280",
    "end": "331600"
  },
  {
    "text": "of index and sample data which we",
    "start": "331600",
    "end": "334000"
  },
  {
    "text": "discussed previously",
    "start": "334000",
    "end": "337199"
  },
  {
    "text": "now imagine prometheus gets a query",
    "start": "337680",
    "end": "340479"
  },
  {
    "text": "say up with it with a label as job",
    "start": "340479",
    "end": "343280"
  },
  {
    "text": "equals prom which has a start with 2",
    "start": "343280",
    "end": "346000"
  },
  {
    "text": "hours and 30 minutes and ends at 5 hours",
    "start": "346000",
    "end": "350479"
  },
  {
    "text": "now",
    "start": "350479",
    "end": "351360"
  },
  {
    "text": "block 2",
    "start": "351360",
    "end": "352400"
  },
  {
    "text": "and block 3",
    "start": "352400",
    "end": "354240"
  },
  {
    "text": "overlap with the queries time range",
    "start": "354240",
    "end": "356720"
  },
  {
    "text": "which means we will consider block 2 and",
    "start": "356720",
    "end": "358960"
  },
  {
    "text": "block 3 for the evaluation of the",
    "start": "358960",
    "end": "360800"
  },
  {
    "text": "received query",
    "start": "360800",
    "end": "364280"
  },
  {
    "text": "let's understand the query execution",
    "start": "366960",
    "end": "368960"
  },
  {
    "text": "process on a very high level",
    "start": "368960",
    "end": "372479"
  },
  {
    "text": "but first what is a query",
    "start": "374960",
    "end": "377840"
  },
  {
    "text": "a query is formed of two things",
    "start": "377840",
    "end": "381120"
  },
  {
    "text": "labels and a time range",
    "start": "381120",
    "end": "383840"
  },
  {
    "text": "over here the labels are",
    "start": "383840",
    "end": "386240"
  },
  {
    "text": "name equals up and the job is from and",
    "start": "386240",
    "end": "389120"
  },
  {
    "text": "the instance is 9090.",
    "start": "389120",
    "end": "393160"
  },
  {
    "text": "let's understand a basic query execution",
    "start": "396560",
    "end": "398960"
  },
  {
    "text": "strategy",
    "start": "398960",
    "end": "401120"
  },
  {
    "text": "so a query has two things as we learned",
    "start": "401120",
    "end": "403440"
  },
  {
    "text": "which were labels and time",
    "start": "403440",
    "end": "406080"
  },
  {
    "text": "the first step uses the time component",
    "start": "406080",
    "end": "408240"
  },
  {
    "text": "of the query",
    "start": "408240",
    "end": "410639"
  },
  {
    "text": "which basically means",
    "start": "410639",
    "end": "412560"
  },
  {
    "text": "we see the queries time range and figure",
    "start": "412560",
    "end": "415280"
  },
  {
    "text": "out which block",
    "start": "415280",
    "end": "417440"
  },
  {
    "text": "overlaps the time range of the query",
    "start": "417440",
    "end": "420160"
  },
  {
    "text": "and then we consider those blocks for",
    "start": "420160",
    "end": "421840"
  },
  {
    "text": "query evaluation",
    "start": "421840",
    "end": "423680"
  },
  {
    "text": "next",
    "start": "423680",
    "end": "425599"
  },
  {
    "text": "we use the labels part of the query",
    "start": "425599",
    "end": "428639"
  },
  {
    "text": "to find out which series contains the",
    "start": "428639",
    "end": "431199"
  },
  {
    "text": "queries label",
    "start": "431199",
    "end": "433199"
  },
  {
    "text": "this is done using the postings index",
    "start": "433199",
    "end": "435599"
  },
  {
    "text": "which if you recall was the relationship",
    "start": "435599",
    "end": "437520"
  },
  {
    "text": "between labels followed by a set of",
    "start": "437520",
    "end": "439840"
  },
  {
    "text": "series that contains that particular",
    "start": "439840",
    "end": "441840"
  },
  {
    "text": "label",
    "start": "441840",
    "end": "443520"
  },
  {
    "text": "after step 2",
    "start": "443520",
    "end": "445039"
  },
  {
    "text": "we have list of series that satisfied",
    "start": "445039",
    "end": "447599"
  },
  {
    "text": "the queries label hence we move to the",
    "start": "447599",
    "end": "450880"
  },
  {
    "text": "next step",
    "start": "450880",
    "end": "452160"
  },
  {
    "text": "which is looping through each of the",
    "start": "452160",
    "end": "454400"
  },
  {
    "text": "series list which we've got from step",
    "start": "454400",
    "end": "457199"
  },
  {
    "text": "two",
    "start": "457199",
    "end": "458240"
  },
  {
    "text": "and",
    "start": "458240",
    "end": "459199"
  },
  {
    "text": "using the help of series index",
    "start": "459199",
    "end": "461759"
  },
  {
    "text": "which if you recall was relationship",
    "start": "461759",
    "end": "463680"
  },
  {
    "text": "between",
    "start": "463680",
    "end": "464800"
  },
  {
    "text": "series and a set of chunks that belongs",
    "start": "464800",
    "end": "467759"
  },
  {
    "text": "to that particular series only",
    "start": "467759",
    "end": "470479"
  },
  {
    "text": "so while we loop over the series",
    "start": "470479",
    "end": "473199"
  },
  {
    "text": "using the series index",
    "start": "473199",
    "end": "475280"
  },
  {
    "text": "we find the chunks that belong to that",
    "start": "475280",
    "end": "477039"
  },
  {
    "text": "particular theory",
    "start": "477039",
    "end": "478960"
  },
  {
    "text": "and then retrieve samples from the",
    "start": "478960",
    "end": "480720"
  },
  {
    "text": "chunks in step four",
    "start": "480720",
    "end": "484000"
  },
  {
    "text": "for understanding the querying process",
    "start": "487680",
    "end": "489840"
  },
  {
    "text": "it is important to understand that the",
    "start": "489840",
    "end": "492160"
  },
  {
    "text": "steps that i said",
    "start": "492160",
    "end": "494000"
  },
  {
    "text": "happens for each block then each series",
    "start": "494000",
    "end": "497199"
  },
  {
    "text": "and finally each chunk",
    "start": "497199",
    "end": "499759"
  },
  {
    "text": "this means any delay on step 1 will have",
    "start": "499759",
    "end": "503360"
  },
  {
    "text": "multiplicative effect on the following",
    "start": "503360",
    "end": "505680"
  },
  {
    "text": "steps similarly for step two and so on",
    "start": "505680",
    "end": "509840"
  },
  {
    "text": "for example",
    "start": "509840",
    "end": "511759"
  },
  {
    "text": "if there are a lot of blocks to",
    "start": "511759",
    "end": "514399"
  },
  {
    "text": "to consider for a query evaluation that",
    "start": "514399",
    "end": "516959"
  },
  {
    "text": "will slow down the series because we",
    "start": "516959",
    "end": "519440"
  },
  {
    "text": "have to go through each of the index",
    "start": "519440",
    "end": "521120"
  },
  {
    "text": "file in the block and then read",
    "start": "521120",
    "end": "523599"
  },
  {
    "text": "the the respective posting syntax and",
    "start": "523599",
    "end": "525680"
  },
  {
    "text": "the respective series index",
    "start": "525680",
    "end": "529959"
  },
  {
    "text": "let's look at some query examples to",
    "start": "535600",
    "end": "537360"
  },
  {
    "text": "understand the query execution process",
    "start": "537360",
    "end": "539440"
  },
  {
    "text": "better",
    "start": "539440",
    "end": "541839"
  },
  {
    "text": "now imagine that from meters gets a",
    "start": "542000",
    "end": "543920"
  },
  {
    "text": "query up with a time range",
    "start": "543920",
    "end": "546959"
  },
  {
    "text": "the first step is to find the blocks",
    "start": "546959",
    "end": "549440"
  },
  {
    "text": "that overlap the query based time range",
    "start": "549440",
    "end": "553040"
  },
  {
    "text": "say block 1 and block 2 were those",
    "start": "553040",
    "end": "555839"
  },
  {
    "text": "blocks which overlapped the query's time",
    "start": "555839",
    "end": "557839"
  },
  {
    "text": "range",
    "start": "557839",
    "end": "559279"
  },
  {
    "text": "next we use the postings index to find",
    "start": "559279",
    "end": "564480"
  },
  {
    "text": "which series satisfy the labels of the",
    "start": "564480",
    "end": "567279"
  },
  {
    "text": "query",
    "start": "567279",
    "end": "568399"
  },
  {
    "text": "over here the query as up which in other",
    "start": "568399",
    "end": "571519"
  },
  {
    "text": "words is name equals up",
    "start": "571519",
    "end": "574080"
  },
  {
    "text": "so we see the postings table and find",
    "start": "574080",
    "end": "576800"
  },
  {
    "text": "out which series contains this",
    "start": "576800",
    "end": "578399"
  },
  {
    "text": "particular label",
    "start": "578399",
    "end": "580240"
  },
  {
    "text": "in our example we have two series for",
    "start": "580240",
    "end": "582640"
  },
  {
    "text": "that",
    "start": "582640",
    "end": "584560"
  },
  {
    "text": "in the next step",
    "start": "584560",
    "end": "586560"
  },
  {
    "text": "we look through each of the series which",
    "start": "586560",
    "end": "588720"
  },
  {
    "text": "we got from step 2",
    "start": "588720",
    "end": "590480"
  },
  {
    "text": "and using the series index find the set",
    "start": "590480",
    "end": "593279"
  },
  {
    "text": "of chunks that belong to that particular",
    "start": "593279",
    "end": "595519"
  },
  {
    "text": "series",
    "start": "595519",
    "end": "597040"
  },
  {
    "text": "for example chunk 1 and chunk 2 belong",
    "start": "597040",
    "end": "600160"
  },
  {
    "text": "to series 1.",
    "start": "600160",
    "end": "602240"
  },
  {
    "text": "in the same way this will happen for the",
    "start": "602240",
    "end": "604000"
  },
  {
    "text": "second series as well",
    "start": "604000",
    "end": "606399"
  },
  {
    "text": "and then finally we'll try the samples",
    "start": "606399",
    "end": "608640"
  },
  {
    "text": "from only those chunks that overlap the",
    "start": "608640",
    "end": "611040"
  },
  {
    "text": "queries time range",
    "start": "611040",
    "end": "614160"
  },
  {
    "text": "now let's focus on the postings index to",
    "start": "617279",
    "end": "620399"
  },
  {
    "text": "understand a more advanced query",
    "start": "620399",
    "end": "622480"
  },
  {
    "text": "execution",
    "start": "622480",
    "end": "625120"
  },
  {
    "text": "let's add a label job equals prompt to",
    "start": "627839",
    "end": "630399"
  },
  {
    "text": "our previous query which was up",
    "start": "630399",
    "end": "634000"
  },
  {
    "text": "this query has two labels now",
    "start": "634000",
    "end": "636720"
  },
  {
    "text": "one is",
    "start": "636720",
    "end": "637920"
  },
  {
    "text": "name equals up and the other one is job",
    "start": "637920",
    "end": "640320"
  },
  {
    "text": "equals prom",
    "start": "640320",
    "end": "642240"
  },
  {
    "text": "when this query is given to the index",
    "start": "642240",
    "end": "644000"
  },
  {
    "text": "reader the index reader goes inside the",
    "start": "644000",
    "end": "646560"
  },
  {
    "text": "index file and looks at the postings",
    "start": "646560",
    "end": "649040"
  },
  {
    "text": "table and tries to find out a match",
    "start": "649040",
    "end": "652079"
  },
  {
    "text": "between the labels of the query and the",
    "start": "652079",
    "end": "654640"
  },
  {
    "text": "labels inside the postings table",
    "start": "654640",
    "end": "658079"
  },
  {
    "text": "over here we have two labels so the",
    "start": "658079",
    "end": "660800"
  },
  {
    "text": "first match is is received at the first",
    "start": "660800",
    "end": "664320"
  },
  {
    "text": "entry which is name equals up which has",
    "start": "664320",
    "end": "666720"
  },
  {
    "text": "three series",
    "start": "666720",
    "end": "668079"
  },
  {
    "text": "and the second match is received at the",
    "start": "668079",
    "end": "669839"
  },
  {
    "text": "second entry which is job equals from",
    "start": "669839",
    "end": "672560"
  },
  {
    "text": "which contains two series",
    "start": "672560",
    "end": "675040"
  },
  {
    "text": "now if we see the prompkill expression",
    "start": "675040",
    "end": "678000"
  },
  {
    "text": "it needs a series that contains name",
    "start": "678000",
    "end": "680720"
  },
  {
    "text": "equals up",
    "start": "680720",
    "end": "682000"
  },
  {
    "text": "and job equals prom",
    "start": "682000",
    "end": "684720"
  },
  {
    "text": "which means there's a and condition in",
    "start": "684720",
    "end": "686399"
  },
  {
    "text": "promql",
    "start": "686399",
    "end": "689040"
  },
  {
    "text": "since there's an and condition we do an",
    "start": "689040",
    "end": "691040"
  },
  {
    "text": "intersection between the series which we",
    "start": "691040",
    "end": "692880"
  },
  {
    "text": "got from postings table",
    "start": "692880",
    "end": "695120"
  },
  {
    "text": "intersecting the series of the first two",
    "start": "695120",
    "end": "697120"
  },
  {
    "text": "entries",
    "start": "697120",
    "end": "698240"
  },
  {
    "text": "will give us series 2 and series 3",
    "start": "698240",
    "end": "701279"
  },
  {
    "text": "as the result",
    "start": "701279",
    "end": "703360"
  },
  {
    "text": "so",
    "start": "703360",
    "end": "704160"
  },
  {
    "text": "the result of the promptq query",
    "start": "704160",
    "end": "706480"
  },
  {
    "text": "would be",
    "start": "706480",
    "end": "707519"
  },
  {
    "text": "samples of series 2 and series 3.",
    "start": "707519",
    "end": "711839"
  },
  {
    "text": "let's see another example",
    "start": "714800",
    "end": "716480"
  },
  {
    "text": "with another label instance equals 9090",
    "start": "716480",
    "end": "721800"
  },
  {
    "text": "now this query has three labels",
    "start": "722000",
    "end": "724720"
  },
  {
    "text": "first is name equals up the second one",
    "start": "724720",
    "end": "727600"
  },
  {
    "text": "is",
    "start": "727600",
    "end": "728399"
  },
  {
    "text": "job equals from and the third one is",
    "start": "728399",
    "end": "730720"
  },
  {
    "text": "instance equals 9090 so the index reader",
    "start": "730720",
    "end": "734079"
  },
  {
    "text": "goes inside the postings table",
    "start": "734079",
    "end": "736320"
  },
  {
    "text": "and tries to find a match for these",
    "start": "736320",
    "end": "738079"
  },
  {
    "text": "three labels",
    "start": "738079",
    "end": "740720"
  },
  {
    "text": "it gets a match for the first three",
    "start": "740800",
    "end": "742399"
  },
  {
    "text": "entries because these three entries",
    "start": "742399",
    "end": "744240"
  },
  {
    "text": "satisfy the queries labels",
    "start": "744240",
    "end": "747200"
  },
  {
    "text": "now",
    "start": "747200",
    "end": "749040"
  },
  {
    "text": "what the query wants is a series that",
    "start": "749040",
    "end": "751360"
  },
  {
    "text": "contains name equals up and job equals",
    "start": "751360",
    "end": "754399"
  },
  {
    "text": "prom and instance equals",
    "start": "754399",
    "end": "756839"
  },
  {
    "text": "9090. so we do an intersection between",
    "start": "756839",
    "end": "759920"
  },
  {
    "text": "the three entries",
    "start": "759920",
    "end": "761600"
  },
  {
    "text": "and we get series three as the result",
    "start": "761600",
    "end": "764959"
  },
  {
    "text": "so",
    "start": "764959",
    "end": "766000"
  },
  {
    "text": "the result of the chromical expression",
    "start": "766000",
    "end": "768639"
  },
  {
    "text": "would be samples of series three that",
    "start": "768639",
    "end": "771360"
  },
  {
    "text": "lie in the range of the promql's",
    "start": "771360",
    "end": "773200"
  },
  {
    "text": "expression",
    "start": "773200",
    "end": "775680"
  },
  {
    "text": "now let's learn how high cardinality",
    "start": "778240",
    "end": "780639"
  },
  {
    "text": "affects the situation",
    "start": "780639",
    "end": "783759"
  },
  {
    "text": "but first let's understand what high",
    "start": "784639",
    "end": "786399"
  },
  {
    "text": "cardinality is",
    "start": "786399",
    "end": "788160"
  },
  {
    "text": "if we recall the previous slides towards",
    "start": "788160",
    "end": "790079"
  },
  {
    "text": "the start",
    "start": "790079",
    "end": "792320"
  },
  {
    "text": "we learned that",
    "start": "792320",
    "end": "794959"
  },
  {
    "text": "every new value of a label creates a",
    "start": "794959",
    "end": "797519"
  },
  {
    "text": "whole new series for prometheus data",
    "start": "797519",
    "end": "799120"
  },
  {
    "text": "model that's what is high cardinality in",
    "start": "799120",
    "end": "801440"
  },
  {
    "text": "labels",
    "start": "801440",
    "end": "802560"
  },
  {
    "text": "so when you have multiple label values",
    "start": "802560",
    "end": "804639"
  },
  {
    "text": "for a particular level name that creates",
    "start": "804639",
    "end": "806800"
  },
  {
    "text": "a lot of series in prometheus system",
    "start": "806800",
    "end": "810480"
  },
  {
    "text": "in other words",
    "start": "810880",
    "end": "812240"
  },
  {
    "text": "having a lot of little values for label",
    "start": "812240",
    "end": "814320"
  },
  {
    "text": "names will create lots of series for the",
    "start": "814320",
    "end": "817440"
  },
  {
    "text": "prometheus",
    "start": "817440",
    "end": "820079"
  },
  {
    "text": "so",
    "start": "822959",
    "end": "824079"
  },
  {
    "text": "under high cardinality",
    "start": "824079",
    "end": "826160"
  },
  {
    "text": "for each block in point 2",
    "start": "826160",
    "end": "828959"
  },
  {
    "text": "the index reader has to go through a",
    "start": "828959",
    "end": "830720"
  },
  {
    "text": "long list of tables in the postings",
    "start": "830720",
    "end": "832959"
  },
  {
    "text": "table to find which series satisfy the",
    "start": "832959",
    "end": "836720"
  },
  {
    "text": "labels of the query",
    "start": "836720",
    "end": "839600"
  },
  {
    "text": "now",
    "start": "839600",
    "end": "840560"
  },
  {
    "text": "there is high level cardinality which",
    "start": "840560",
    "end": "842560"
  },
  {
    "text": "means lots of syriza in the prometheus",
    "start": "842560",
    "end": "844560"
  },
  {
    "text": "system",
    "start": "844560",
    "end": "845440"
  },
  {
    "text": "so the result of step two will give us a",
    "start": "845440",
    "end": "847920"
  },
  {
    "text": "long list of series that satisfy our",
    "start": "847920",
    "end": "850480"
  },
  {
    "text": "given labels",
    "start": "850480",
    "end": "853040"
  },
  {
    "text": "now in the step three we have to loop",
    "start": "853040",
    "end": "855279"
  },
  {
    "text": "through each of the long",
    "start": "855279",
    "end": "857040"
  },
  {
    "text": "each of the series in the long list",
    "start": "857040",
    "end": "860639"
  },
  {
    "text": "now in the step three",
    "start": "860639",
    "end": "862399"
  },
  {
    "text": "we have to loop through each of the",
    "start": "862399",
    "end": "864079"
  },
  {
    "text": "series in the long list which we got",
    "start": "864079",
    "end": "865920"
  },
  {
    "text": "from step two",
    "start": "865920",
    "end": "867519"
  },
  {
    "text": "and then for each series find the chunks",
    "start": "867519",
    "end": "872079"
  },
  {
    "text": "that belongs to that siri",
    "start": "872079",
    "end": "874399"
  },
  {
    "text": "and then in step four retrieve the",
    "start": "874399",
    "end": "876320"
  },
  {
    "text": "samples from each chunk",
    "start": "876320",
    "end": "879040"
  },
  {
    "text": "retrieving samples from chunk",
    "start": "879040",
    "end": "881680"
  },
  {
    "text": "is a seek operation on disk and if the",
    "start": "881680",
    "end": "884160"
  },
  {
    "text": "block is memory mapped or not memory",
    "start": "884160",
    "end": "886480"
  },
  {
    "text": "mapped",
    "start": "886480",
    "end": "887440"
  },
  {
    "text": "this can be expensive",
    "start": "887440",
    "end": "890560"
  },
  {
    "text": "similarly",
    "start": "893600",
    "end": "894880"
  },
  {
    "text": "a query with a long time range will",
    "start": "894880",
    "end": "897199"
  },
  {
    "text": "involve lots of blocks which overlap the",
    "start": "897199",
    "end": "899839"
  },
  {
    "text": "queries time range which means you have",
    "start": "899839",
    "end": "901760"
  },
  {
    "text": "to read index file from each of those",
    "start": "901760",
    "end": "904560"
  },
  {
    "text": "blocks that overlaps the query's time",
    "start": "904560",
    "end": "906639"
  },
  {
    "text": "range",
    "start": "906639",
    "end": "909040"
  },
  {
    "text": "this will cause the following steps to",
    "start": "911040",
    "end": "913120"
  },
  {
    "text": "slow down",
    "start": "913120",
    "end": "914320"
  },
  {
    "text": "since",
    "start": "914320",
    "end": "915360"
  },
  {
    "text": "step two has a dependency on step one",
    "start": "915360",
    "end": "920079"
  },
  {
    "text": "a long range in query also means that we",
    "start": "920959",
    "end": "923600"
  },
  {
    "text": "have to loop through lots of chunks",
    "start": "923600",
    "end": "925760"
  },
  {
    "text": "which we receive from step three which",
    "start": "925760",
    "end": "929040"
  },
  {
    "text": "overlap the query's time range",
    "start": "929040",
    "end": "931839"
  },
  {
    "text": "this can take good time",
    "start": "931839",
    "end": "935120"
  },
  {
    "text": "and this is why a simple prom ql query",
    "start": "937040",
    "end": "940320"
  },
  {
    "text": "without lots of labels when executed in",
    "start": "940320",
    "end": "943279"
  },
  {
    "text": "a high cardinality system",
    "start": "943279",
    "end": "945519"
  },
  {
    "text": "or",
    "start": "945519",
    "end": "946320"
  },
  {
    "text": "having long time range in queries",
    "start": "946320",
    "end": "948880"
  },
  {
    "text": "affects the querying performance and",
    "start": "948880",
    "end": "950959"
  },
  {
    "text": "slows them down",
    "start": "950959",
    "end": "953279"
  },
  {
    "text": "and with this",
    "start": "953279",
    "end": "954639"
  },
  {
    "text": "we complete the talk",
    "start": "954639",
    "end": "957759"
  },
  {
    "text": "and",
    "start": "959519",
    "end": "960399"
  },
  {
    "text": "we are hiring engineers that are excited",
    "start": "960399",
    "end": "962800"
  },
  {
    "text": "about building high performance systems",
    "start": "962800",
    "end": "964959"
  },
  {
    "text": "for observability and time series use",
    "start": "964959",
    "end": "967360"
  },
  {
    "text": "case",
    "start": "967360",
    "end": "969839"
  },
  {
    "text": "we work on prom scale which is a back",
    "start": "970800",
    "end": "973199"
  },
  {
    "text": "end for observability data which uses",
    "start": "973199",
    "end": "975920"
  },
  {
    "text": "timescale db a time series database",
    "start": "975920",
    "end": "978880"
  },
  {
    "text": "built on top of postgres which is",
    "start": "978880",
    "end": "981360"
  },
  {
    "text": "operationally mature",
    "start": "981360",
    "end": "983199"
  },
  {
    "text": "and sql compatible",
    "start": "983199",
    "end": "986240"
  },
  {
    "text": "we are also open source and fully remote",
    "start": "986240",
    "end": "989040"
  },
  {
    "text": "company",
    "start": "989040",
    "end": "991519"
  },
  {
    "text": "if you are interested please apply at",
    "start": "991519",
    "end": "993839"
  },
  {
    "text": "timeskill.com",
    "start": "993839",
    "end": "995519"
  },
  {
    "text": "couriers",
    "start": "995519",
    "end": "998160"
  },
  {
    "text": "please write your questions in the event",
    "start": "1005600",
    "end": "1007360"
  },
  {
    "text": "slack channel",
    "start": "1007360",
    "end": "1010759"
  },
  {
    "text": "thank you very much",
    "start": "1012240",
    "end": "1015880"
  }
]