[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "hello welcome to kubecon um today i'm going to be talking about setcomp what it can do for you",
    "start": "560",
    "end": "7200"
  },
  {
    "text": "um i'm going to talk all about what we've been doing in setcomp in the container ecosystem and what is it and why does it matter and",
    "start": "7200",
    "end": "13759"
  },
  {
    "text": "what is there what work is there to do in the future",
    "start": "13759",
    "end": "18560"
  },
  {
    "text": "um so um i i'm just in cormac i'm an engineer at",
    "start": "19600",
    "end": "26720"
  },
  {
    "start": "24000",
    "end": "24000"
  },
  {
    "text": "docker in cambridge and i've i'm also on the cncftsc and a naturey maintainer so i'm",
    "start": "26720",
    "end": "32078"
  },
  {
    "text": "and i'm very much involved in the container security ecosystem",
    "start": "32079",
    "end": "38160"
  },
  {
    "text": "um so what what is setcomp anyway and why does it matter",
    "start": "41120",
    "end": "46480"
  },
  {
    "start": "46000",
    "end": "46000"
  },
  {
    "text": "setcomp is a thing that stands for secure computing which sounds like a really great thing it's a bit of a",
    "start": "46480",
    "end": "53360"
  },
  {
    "text": "ambitious name perhaps um back in 2005 when it was first created it was basically an extreme",
    "start": "53360",
    "end": "60000"
  },
  {
    "text": "sandboxing method um when extreme sandboxing wasn't actually that common a thing",
    "start": "60000",
    "end": "66240"
  },
  {
    "text": "um it was really just for code that just does computer operations and it could only",
    "start": "66240",
    "end": "71920"
  },
  {
    "text": "read or write from existing files and basically exit it wasn't used very",
    "start": "71920",
    "end": "77840"
  },
  {
    "text": "much because there actually aren't very many programs that literally just read and write from files and can't for example make new",
    "start": "77840",
    "end": "84000"
  },
  {
    "text": "network connections or anything like that at all um so in 2013",
    "start": "84000",
    "end": "90159"
  },
  {
    "text": "uh a more general version was introduced which is called second bpf but it's usually just called setcom because it's",
    "start": "90159",
    "end": "95920"
  },
  {
    "text": "the most commonly used version and there's a small uh bpf program so",
    "start": "95920",
    "end": "102000"
  },
  {
    "text": "bpf is a technique originally used for in the network stack um you've probably heard about recently",
    "start": "102000",
    "end": "109040"
  },
  {
    "text": "about his grown-up ebpf extended version but bpf is the kind of original simple version lets you",
    "start": "109040",
    "end": "114880"
  },
  {
    "text": "write very simple programs to decide if system calls should be allowed or not or",
    "start": "114880",
    "end": "120479"
  },
  {
    "text": "if they're not allowed whether they should error or be logged or kill the processors running them so effectively",
    "start": "120479",
    "end": "127280"
  },
  {
    "text": "because system calls are the interface between applications and the kernel this",
    "start": "127280",
    "end": "133520"
  },
  {
    "text": "basically is a method of controlling what programs can actually um do",
    "start": "133520",
    "end": "139680"
  },
  {
    "text": "outside just computing stuff so what kind of interaction they have with the outside world which sounds",
    "start": "139680",
    "end": "145760"
  },
  {
    "text": "really useful so in theory you can take a look at what a program is doing",
    "start": "145760",
    "end": "150800"
  },
  {
    "start": "147000",
    "end": "147000"
  },
  {
    "text": "system calls are shown by s trace i show in the s trace of um adjusting ls um and for each of these",
    "start": "150800",
    "end": "157440"
  },
  {
    "text": "system calls you can basically say yeah that's fine no that's not fine you",
    "start": "157440",
    "end": "162480"
  },
  {
    "text": "haven't got permission to do that you can pretend the system call doesn't exist at all which is enosis",
    "start": "162480",
    "end": "168720"
  },
  {
    "text": "um or any other kind of operation so that's the theory in practice it's",
    "start": "168720",
    "end": "175280"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "not quite like that for so for our examples there when you open a file",
    "start": "175280",
    "end": "180959"
  },
  {
    "text": "um with setcomp you don't actually get your program doesn't actually get to see what the file name was",
    "start": "180959",
    "end": "186720"
  },
  {
    "text": "unfortunately because it just sees the direct arguments of the system call and the argument for a open system call",
    "start": "186720",
    "end": "194159"
  },
  {
    "text": "isn't directly a string it's actually just a pointer to a string and all you guess is the pointer and you can't",
    "start": "194159",
    "end": "200239"
  },
  {
    "text": "follow the pointer to see what it pointed at which is the name so you have to make",
    "start": "200239",
    "end": "206080"
  },
  {
    "text": "um decisions actually based on quite limited information compared to what you",
    "start": "206080",
    "end": "211200"
  },
  {
    "text": "might want um and and so and yours this is kind of limiting you",
    "start": "211200",
    "end": "218239"
  },
  {
    "text": "also you can't know what kind of file descriptor has been used if someone's doing a read it could be read from a network or read",
    "start": "218239",
    "end": "224879"
  },
  {
    "text": "from a local file and you might want to allow one and not the other you can't do that there's also weird",
    "start": "224879",
    "end": "230760"
  },
  {
    "text": "peculiarities um and you also didn't really get any context you're just called every time",
    "start": "230760",
    "end": "236159"
  },
  {
    "text": "the system call and you can't actually keep state in between those so you can't say",
    "start": "236159",
    "end": "242480"
  },
  {
    "text": "you can do this after you do that but not before or anything like that very easily so there's a bunch of real serious",
    "start": "242480",
    "end": "249760"
  },
  {
    "text": "limitations um the history of it applied to the container ecosystem",
    "start": "249760",
    "end": "256079"
  },
  {
    "start": "251000",
    "end": "251000"
  },
  {
    "text": "um back in early 2016 um one of the first things i worked on when i started talking with jesse frazelle",
    "start": "256079",
    "end": "262479"
  },
  {
    "text": "was adding sitcom support for docker and it was enabled by default which",
    "start": "262479",
    "end": "267520"
  },
  {
    "text": "was a nice um thing to have done and most people don't disable it so most",
    "start": "267520",
    "end": "272800"
  },
  {
    "text": "people get it got you know had the benefit of using it since then kubernetes um spent a long time",
    "start": "272800",
    "end": "280639"
  },
  {
    "text": "uh working out on its implementation and really only in 119 so not very long ago now",
    "start": "280639",
    "end": "287600"
  },
  {
    "text": "um finalized the um api or um and",
    "start": "287600",
    "end": "294560"
  },
  {
    "text": "it does not enable it by default um and it's still um somewhat complicated",
    "start": "294560",
    "end": "300400"
  },
  {
    "text": "to manage in kubernetes is because um sitcom profiles tend to be",
    "start": "300400",
    "end": "305600"
  },
  {
    "text": "at the moment very long files like the docker default one is 800 lines long and apparently 800 more lines of",
    "start": "305600",
    "end": "312720"
  },
  {
    "text": "yaml was seen as too much so you have to work out how to distribute files with this configuration on if you",
    "start": "312720",
    "end": "318720"
  },
  {
    "text": "want to customize the this or you can just use the runtime default",
    "start": "318720",
    "end": "324000"
  },
  {
    "text": "setting which will give you something that's pretty much like the um like the docker setup basically as given",
    "start": "324000",
    "end": "330880"
  },
  {
    "text": "you by the runtime it'll be the docker one if you're using docker if you're using container d it'll be or cryo it'll be similar",
    "start": "330880",
    "end": "338320"
  },
  {
    "text": "but um due to kind of maintenance things not exactly the same",
    "start": "338320",
    "end": "343759"
  },
  {
    "text": "um in the sort of oci um sort of structure of hierarchy we",
    "start": "344080",
    "end": "349680"
  },
  {
    "text": "have in the container thing where we have kubernetes and then cri and then um we have um run times",
    "start": "349680",
    "end": "358080"
  },
  {
    "text": "um it's kind of complicated set up because um and we'll talk about this a little bit more later but um",
    "start": "358080",
    "end": "364800"
  },
  {
    "text": "there's a bunch of abstraction layers this goes through um effectively everything's just passed",
    "start": "364800",
    "end": "370560"
  },
  {
    "text": "down all the way to run c which then um it calls the go binding to libset comp which is a simplified",
    "start": "370560",
    "end": "379280"
  },
  {
    "text": "version of what the actual sitcom ppf looks like um and this and these simplified calls are",
    "start": "379280",
    "end": "385919"
  },
  {
    "text": "generated from a json config that is slightly you know is basically",
    "start": "385919",
    "end": "393120"
  },
  {
    "text": "abstract again the kind of rules that you can use with um with lipset comp so there's this weird",
    "start": "393120",
    "end": "399199"
  },
  {
    "text": "um and then the runtime actually might have a different form of the json which has it has different runtime customizations it's a kind of",
    "start": "399199",
    "end": "406160"
  },
  {
    "text": "messy kind of process of converting jason to jason to go to c to ppf to running the kernel",
    "start": "406160",
    "end": "412160"
  },
  {
    "text": "um so it's it's a bit kind of messy what's the point of all this what are we",
    "start": "412160",
    "end": "418800"
  },
  {
    "text": "actually trying to achieve i think it's very important to understand that",
    "start": "418800",
    "end": "423840"
  },
  {
    "start": "424000",
    "end": "424000"
  },
  {
    "text": "there's some system calls in linux which are not really considered safe for",
    "start": "424960",
    "end": "431360"
  },
  {
    "text": "isolated programs to use some of these have a very very large attack surface and they've been a lot of",
    "start": "431360",
    "end": "437840"
  },
  {
    "text": "cves around them uh perfect open is one of those uh",
    "start": "437840",
    "end": "442880"
  },
  {
    "text": "username spaces when bpf we'll talk about a bit later these are just very large",
    "start": "442880",
    "end": "447919"
  },
  {
    "text": "subsystems that in general most containers don't actually need to use um often",
    "start": "447919",
    "end": "456080"
  },
  {
    "text": "these are used by runtimes and and other sort of software rather than actually",
    "start": "456080",
    "end": "461199"
  },
  {
    "text": "end user applications um and they've been a lot of cves that",
    "start": "461199",
    "end": "467199"
  },
  {
    "text": "basically meant that you can escape from a container if you can access these cisco so blocking them is actually",
    "start": "467199",
    "end": "473599"
  },
  {
    "text": "proven to be useful we'll talk about specific examples of where there's been a benefit later um",
    "start": "473599",
    "end": "479199"
  },
  {
    "text": "some syscalls can disable security features such as um uh the pr cuddle",
    "start": "479199",
    "end": "485440"
  },
  {
    "text": "adder no randomize which basically disables aslr address-based layout randomization which",
    "start": "485440",
    "end": "490639"
  },
  {
    "text": "is a security feature that's been added for good reasons um so we applications can simply turn it",
    "start": "490639",
    "end": "497360"
  },
  {
    "text": "off which is uh really unhelpful and some things are obsolete cis there's a cis kettle as opposed to using",
    "start": "497360",
    "end": "503759"
  },
  {
    "text": "csfs which in linux has historically been generally has been deprecated for",
    "start": "503759",
    "end": "510160"
  },
  {
    "text": "uh some decades now and has some attack surface and is not really maintained as some distress",
    "start": "510160",
    "end": "515839"
  },
  {
    "text": "i think have removed this now but not all of them and then there's always been some things",
    "start": "515839",
    "end": "521039"
  },
  {
    "text": "that have not been namespaced um time namespaces are very very new and",
    "start": "521039",
    "end": "526240"
  },
  {
    "text": "it came out a few months ago and key ring namespaces don't exist yet so there's a bunch of stuff that",
    "start": "526240",
    "end": "531680"
  },
  {
    "text": "in a container system it makes sense to just remove the ability of applications to use it",
    "start": "531680",
    "end": "538320"
  },
  {
    "text": "so what have we succeeded in doing with the sepca sitcom subsystem um",
    "start": "538320",
    "end": "544480"
  },
  {
    "start": "543000",
    "end": "543000"
  },
  {
    "text": "username spaces there's this quote from angela mursky is one of the kind of maintainers",
    "start": "544480",
    "end": "550240"
  },
  {
    "text": "you know basically um saying that the huge attack surface from user namespaces",
    "start": "550240",
    "end": "556800"
  },
  {
    "text": "is huge risk um and if unprivileged users can program ip tables they're bound to be some",
    "start": "556800",
    "end": "562800"
  },
  {
    "text": "privilege escalations he said this was before um this was you know this was actually",
    "start": "562800",
    "end": "568480"
  },
  {
    "text": "quite a few years ago before when this functionality was kind of new and shortly after that i think the same",
    "start": "568480",
    "end": "574080"
  },
  {
    "start": "571000",
    "end": "571000"
  },
  {
    "text": "year we saw cv 2016 33 134 and a bunch of related cvs here",
    "start": "574080",
    "end": "579920"
  },
  {
    "text": "where indeed the iptables code had some bounce checks missing and you",
    "start": "579920",
    "end": "586240"
  },
  {
    "text": "could basically exploit this to get full refull pros and container escape um",
    "start": "586240",
    "end": "594480"
  },
  {
    "text": "normally this needs cap net admin which is not granted so normally it's safe but if you're using the namespaces you get",
    "start": "594480",
    "end": "600399"
  },
  {
    "text": "capnet admin in your username space you can call these commands in your username space",
    "start": "600399",
    "end": "606000"
  },
  {
    "text": "you can't change root ip tables functions but you can compromise the kernel so it doesn't",
    "start": "606000",
    "end": "612160"
  },
  {
    "text": "really matter whether it's actually which namespace it's in um this was mitigated by docker's default um policy",
    "start": "612160",
    "end": "620079"
  },
  {
    "text": "and so users using that were not affected um more recently um",
    "start": "620079",
    "end": "626959"
  },
  {
    "start": "623000",
    "end": "623000"
  },
  {
    "text": "again the bpf verifier which again is is a is a new feature for",
    "start": "626959",
    "end": "632160"
  },
  {
    "text": "extended bpf um i had some uh bounds checks on 32-bit operations that",
    "start": "632160",
    "end": "639440"
  },
  {
    "text": "were not enforced and you could read and write kernel memory which basically means you can control the entire host um",
    "start": "639440",
    "end": "647519"
  },
  {
    "text": "again an unprivileged user with access to ppf cisco could do this again the docker policy blocks use the bpf by",
    "start": "647519",
    "end": "654800"
  },
  {
    "text": "default um unless you actually grant caps's admin which is basically a privilege to",
    "start": "654800",
    "end": "660560"
  },
  {
    "text": "access anyway um so this sounds good uh what went",
    "start": "660560",
    "end": "666800"
  },
  {
    "text": "wrong um actually we caused a lot of problems for users",
    "start": "666800",
    "end": "671839"
  },
  {
    "text": "during the last five years with setcomp um i had a bit of a war on emacs",
    "start": "671839",
    "end": "678160"
  },
  {
    "start": "673000",
    "end": "673000"
  },
  {
    "text": "i stopped people running emacs in containers with setcomp enabled for many years",
    "start": "678160",
    "end": "684399"
  },
  {
    "text": "um this was a really strange story it really surprised me when this the complaints came in about this",
    "start": "684399",
    "end": "690160"
  },
  {
    "text": "quite early on um emacs had this very very strange",
    "start": "690160",
    "end": "695760"
  },
  {
    "text": "thing that um a lot of people didn't like for other reasons um the muscle lipsy maintainer was",
    "start": "695760",
    "end": "703279"
  },
  {
    "text": "against it because it didn't work with muzzle lipsc as well but basically it in order to make startup of emacs",
    "start": "703279",
    "end": "710800"
  },
  {
    "text": "faster it used to um during a build time it would start running the binary then",
    "start": "710800",
    "end": "717120"
  },
  {
    "text": "dump the output and then instead of um re-running the code that generated this",
    "start": "717120",
    "end": "722720"
  },
  {
    "text": "the initial setup it would just load the memory snapshot basically but the way it",
    "start": "722720",
    "end": "728720"
  },
  {
    "text": "required to do this was very normal but it required memory locations to be loaded exactly the same way as they",
    "start": "728720",
    "end": "734399"
  },
  {
    "text": "were before and if you had aslr this was not the case because memory locations would be randomized and so",
    "start": "734399",
    "end": "740079"
  },
  {
    "text": "wouldn't work so it disabled it by disabling randomization",
    "start": "740079",
    "end": "745440"
  },
  {
    "text": "but this was one of the things was explicitly blocked because this basically is allowing applications to bypass a",
    "start": "745440",
    "end": "752560"
  },
  {
    "text": "security um mitigation eventually emacs realized that well computers were",
    "start": "752560",
    "end": "758720"
  },
  {
    "text": "fast enough you could just run the startup code normally like a normal application and not stop being so good quite so",
    "start": "758720",
    "end": "764800"
  },
  {
    "text": "weird um and so um this problem has gone away and now you",
    "start": "764800",
    "end": "770160"
  },
  {
    "text": "can happily run emacs in containers um but really i just felt it was not",
    "start": "770160",
    "end": "776399"
  },
  {
    "text": "worth changing the default policy to basically um reduce security for everyone just so",
    "start": "776399",
    "end": "781600"
  },
  {
    "text": "that emacs could be run more effectively with its weird things in a container",
    "start": "781600",
    "end": "787519"
  },
  {
    "start": "784000",
    "end": "784000"
  },
  {
    "text": "worse than that though worse than breaking emacs i also broke steam this was not on purpose and not",
    "start": "787519",
    "end": "793200"
  },
  {
    "text": "something i wanted to do um linux has made a bunch of",
    "start": "793200",
    "end": "798880"
  },
  {
    "text": "changes to 32-bit um this is called abi and steam happens to run 32-bit binaries",
    "start": "798880",
    "end": "804880"
  },
  {
    "text": "and it's widely used in containers um and this was something that happened really quite early on that um",
    "start": "804880",
    "end": "811120"
  },
  {
    "text": "debian i think has a habit of doing these things first they changed from the old socket call syscall that was",
    "start": "811120",
    "end": "816959"
  },
  {
    "text": "some it was a weird multiplex syscall that does that could do socket or bind or connect or any of the other socket calls and",
    "start": "816959",
    "end": "823839"
  },
  {
    "text": "switch to separate syscalls and we hadn't actually allowed for this",
    "start": "823839",
    "end": "829680"
  },
  {
    "text": "change um and i think debian did it early um and they did the same thing with",
    "start": "829680",
    "end": "835360"
  },
  {
    "text": "64-bit time support on those two-bit systems they again they switched early before it was officially upstream and um",
    "start": "835360",
    "end": "842480"
  },
  {
    "text": "these were all temporarily blocked by said comp until we fixed this problem so it is a problem and a fragility issue",
    "start": "842480",
    "end": "850079"
  },
  {
    "text": "with setcomp that because it requires exact cisco lists when some new set of syscalls that",
    "start": "850079",
    "end": "855279"
  },
  {
    "text": "suddenly everyone starts using how to come along you really have to update the code quickly which is",
    "start": "855279",
    "end": "861360"
  },
  {
    "text": "really problematic and apologies to the steam users um there's also a performance issue",
    "start": "861360",
    "end": "868839"
  },
  {
    "start": "864000",
    "end": "864000"
  },
  {
    "text": "um there's actually a lot of rules because we list the cisco's you can use and not the",
    "start": "868839",
    "end": "874959"
  },
  {
    "text": "ones you can't use and the list is very long um and it's not processed terribly efficiently",
    "start": "874959",
    "end": "881600"
  },
  {
    "text": "for reasons that as mostly somewhat fixable but require a lot of work",
    "start": "881600",
    "end": "886720"
  },
  {
    "text": "um only really i o intensive applications will notice this um and so actually very few people",
    "start": "886720",
    "end": "894880"
  },
  {
    "text": "complain but a few people have and they've generally disabled sitcom rather than actually fixing it and then there's some",
    "start": "894880",
    "end": "902240"
  },
  {
    "text": "interesting areas security issues where setcomp didn't actually help at all and we didn't do anything to help users",
    "start": "902240",
    "end": "911279"
  },
  {
    "start": "909000",
    "end": "909000"
  },
  {
    "text": "one of which is probably my favorite kernel cve that jan horn found um this is a",
    "start": "911600",
    "end": "918880"
  },
  {
    "text": "really interesting security issue in linux it's a cash invalidation bug um basically",
    "start": "918880",
    "end": "926320"
  },
  {
    "text": "um there's a there was a a 32-bit counter and if you did the right thing at the",
    "start": "926320",
    "end": "932560"
  },
  {
    "text": "point at which the counter wrapped around back to zero again um you could",
    "start": "932560",
    "end": "937839"
  },
  {
    "text": "basically um exploit the kernel and escape your",
    "start": "937839",
    "end": "943360"
  },
  {
    "text": "container and all you had to do to do this was some memory mapping and some cloning of",
    "start": "943360",
    "end": "949519"
  },
  {
    "text": "processes which is all totally normal normal stuff that we couldn't possibly block with setcomp",
    "start": "949519",
    "end": "956240"
  },
  {
    "text": "um so there was just no way we could protect against this kind of thing",
    "start": "956240",
    "end": "961680"
  },
  {
    "text": "um it eventually was changed but fixed by changing a counter to b64 bits",
    "start": "961680",
    "end": "966800"
  },
  {
    "text": "32 bits is too small for any kind of security um on anything you can always overflow a",
    "start": "966800",
    "end": "971920"
  },
  {
    "text": "32-bit counter but over flying a 64-bit counter is pretty impossible because it's so",
    "start": "971920",
    "end": "978639"
  },
  {
    "text": "huge um actually it was actually interesting that they were this was a this is still a really",
    "start": "978639",
    "end": "985120"
  },
  {
    "text": "interesting cv and worth looking at but it was hard to exploit without having some additional source of information to",
    "start": "985120",
    "end": "991120"
  },
  {
    "text": "know when exactly um you'd hit the conditions for the exploit",
    "start": "991120",
    "end": "996959"
  },
  {
    "text": "um and so actually we fixed an information leak",
    "start": "996959",
    "end": "1004000"
  },
  {
    "text": "that made it actually made it actually relatively exploitable in containers uh because of the information leak",
    "start": "1004000",
    "end": "1010720"
  },
  {
    "text": "rather than actually because of the um seg comp but um sitcom could definitely",
    "start": "1010720",
    "end": "1016079"
  },
  {
    "text": "not protect you against that um the question is like should we be",
    "start": "1016079",
    "end": "1022399"
  },
  {
    "text": "using setcomp in this way in the container ecosystem um why is the container platform",
    "start": "1022399",
    "end": "1029360"
  },
  {
    "text": "basically responsible for the the poor kind of state of limits kernel security and the fact that there are",
    "start": "1029360",
    "end": "1035120"
  },
  {
    "text": "container escape vulnerabilities in lurks and you know what why isn't that the kernel's problem",
    "start": "1035120",
    "end": "1041360"
  },
  {
    "text": "um and generally i think the answer is that we do want um efficient isolation without",
    "start": "1041360",
    "end": "1049840"
  },
  {
    "text": "going into using virtual machines for everything um it's actually",
    "start": "1049840",
    "end": "1055600"
  },
  {
    "text": "relatively um the number of container escapes has bee exploits has been not too bad over the",
    "start": "1055600",
    "end": "1064160"
  },
  {
    "text": "years for most people this level of security is actually kind of fine",
    "start": "1064160",
    "end": "1069440"
  },
  {
    "text": "um and also most of our applications don't use a whole you know the whole linux is called space",
    "start": "1069440",
    "end": "1076720"
  },
  {
    "text": "most applications use a kind of narrow a subset that doesn't include um",
    "start": "1076720",
    "end": "1082640"
  },
  {
    "text": "you know the sort of specialized things you get in linux doesn't most people's code doesn't run most",
    "start": "1082640",
    "end": "1088720"
  },
  {
    "text": "application code doesn't run bpf it doesn't um run username spaces those",
    "start": "1088720",
    "end": "1094160"
  },
  {
    "text": "things are being used um for security critical applications and often for control plane",
    "start": "1094160",
    "end": "1099600"
  },
  {
    "text": "applications but end user applications basically just use networking and storage and",
    "start": "1099600",
    "end": "1105840"
  },
  {
    "text": "i mean some people would say they should just use the posix subset and um and linux the lens cisco space is",
    "start": "1105840",
    "end": "1112720"
  },
  {
    "text": "just way too expensive i mean i think there's arguments about what the boundaries of um what normal",
    "start": "1112720",
    "end": "1119280"
  },
  {
    "text": "applications should care about are but um and it this does change over time with",
    "start": "1119280",
    "end": "1125919"
  },
  {
    "text": "kind of performance reasons for using different system calls and so on but um you know it's",
    "start": "1125919",
    "end": "1134320"
  },
  {
    "text": "there is actually a kind of set of things that most applications don't use and it's",
    "start": "1134320",
    "end": "1139679"
  },
  {
    "text": "sensible for us to isolate them off for security um because the common syscalls are",
    "start": "1139679",
    "end": "1144880"
  },
  {
    "text": "basically mostly most of the time other than that cve i just pointed you out",
    "start": "1144880",
    "end": "1150480"
  },
  {
    "text": "generally are actually safe um setcomp was designed that every",
    "start": "1150480",
    "end": "1156160"
  },
  {
    "text": "application would write its own profile but this is really and right really really",
    "start": "1156160",
    "end": "1161600"
  },
  {
    "text": "difficult for users to do it was not designed for kind of platform administrators and",
    "start": "1161600",
    "end": "1166880"
  },
  {
    "text": "like if you read the documentation we're kind of doing it wrong in the container space but it's actually too difficult for end",
    "start": "1166880",
    "end": "1173360"
  },
  {
    "text": "user applications to use and you only find very very specialist applications things like",
    "start": "1173360",
    "end": "1178480"
  },
  {
    "text": "you know firecracker use it and um a few other things but the the number of um general applications",
    "start": "1178480",
    "end": "1187440"
  },
  {
    "text": "that actually have set comp profiles is really really small and it's incredibly difficult to use for that function so i'm not",
    "start": "1187440",
    "end": "1193280"
  },
  {
    "text": "really surprised um i'm going to go through the things",
    "start": "1193280",
    "end": "1198880"
  },
  {
    "text": "that we could do choose your adventure what future paths could we take what what should we",
    "start": "1198880",
    "end": "1204000"
  },
  {
    "text": "do in this space i think it's definitely the case that things need doing",
    "start": "1204000",
    "end": "1209520"
  },
  {
    "text": "i'll talk about whether they will be done later um one option is almost the status quo",
    "start": "1209520",
    "end": "1215360"
  },
  {
    "start": "1212000",
    "end": "1212000"
  },
  {
    "text": "really is that almost no one will use setcomp um especially with kubernetes it's optional there's a few large companies i",
    "start": "1215360",
    "end": "1223760"
  },
  {
    "text": "know who take it very seriously and think it's important docker users got it by default but",
    "start": "1223760",
    "end": "1230799"
  },
  {
    "text": "gradually as people shift over to using uh you know kubernetes directly and things like",
    "start": "1230799",
    "end": "1236480"
  },
  {
    "text": "that where um even if you're using kubernetes with docker kubernetes disables the daca setcom policy",
    "start": "1236480",
    "end": "1242400"
  },
  {
    "text": "um docker's mostly now a development platform so i'm not sure it makes sense for docker to enforce it anymore",
    "start": "1242400",
    "end": "1249760"
  },
  {
    "text": "if you're not going to use it i recommend you update your kernel weekly that's a that's a burden",
    "start": "1249760",
    "end": "1256240"
  },
  {
    "text": "maybe using setcomp means you can do it less often than that",
    "start": "1256240",
    "end": "1261440"
  },
  {
    "text": "maybe you get a higher rate of zero days um but the rate's relatively low maybe you can live with it i i suspect that",
    "start": "1261440",
    "end": "1268159"
  },
  {
    "text": "a lot of people are going to just continue to ignore it um and just live with those",
    "start": "1268159",
    "end": "1275280"
  },
  {
    "text": "vulnerabilities um i don't think we could actually",
    "start": "1275280",
    "end": "1280640"
  },
  {
    "start": "1276000",
    "end": "1276000"
  },
  {
    "text": "um rationalize the policy we we went for an allow this not a block",
    "start": "1280640",
    "end": "1286480"
  },
  {
    "text": "list at the beginning because of the whole issue i mean it's the recommended thing with setcomp it's the",
    "start": "1286480",
    "end": "1292080"
  },
  {
    "text": "recommended thing with most security things just uh you know you know what you what's safe",
    "start": "1292080",
    "end": "1297760"
  },
  {
    "text": "you list what's safe and then everything else is blocked and so if there's a new dangerous syscall added and many",
    "start": "1297760",
    "end": "1305120"
  },
  {
    "text": "arguably the new cisco's office often do have security issues more than the old ones",
    "start": "1305120",
    "end": "1310799"
  },
  {
    "text": "um then you're safe however um the list of things we block is now",
    "start": "1310799",
    "end": "1317679"
  },
  {
    "text": "quite small and writing the block policy",
    "start": "1317679",
    "end": "1322960"
  },
  {
    "text": "is much easier and it's easier to understand it's less",
    "start": "1322960",
    "end": "1328640"
  },
  {
    "text": "likely to break something when new safe syscalls are added like the the time 64 ones for those stupid systems",
    "start": "1328640",
    "end": "1335679"
  },
  {
    "text": "which were you know these things it turns out that there's new safe cisco's added a lot of the time",
    "start": "1335679",
    "end": "1343440"
  },
  {
    "text": "because probably because of stupid things like there weren't enough flags allocated on cisco's and there's now",
    "start": "1343440",
    "end": "1348720"
  },
  {
    "text": "new cisco's with more flags being added for everything things like that um these block policies would be easier",
    "start": "1348720",
    "end": "1355600"
  },
  {
    "text": "to understand because you can see what they do rather than try and re work out the negative of what they do",
    "start": "1355600",
    "end": "1362159"
  },
  {
    "text": "um they wouldn't be 800 lines long they would be maybe 10 lines long so we could actually",
    "start": "1362159",
    "end": "1368720"
  },
  {
    "text": "inline them in the yaml we'd have to obviously change the kubernetes setcom format again to do this um",
    "start": "1368720",
    "end": "1374000"
  },
  {
    "text": "but you know i think this would be kind of nice if you could say allow bpf to remove the default block",
    "start": "1374000",
    "end": "1382799"
  },
  {
    "text": "list approach to bpf um and that would be the one line you need allow bpf allow open perf event um that kind of thing so",
    "start": "1382799",
    "end": "1391600"
  },
  {
    "text": "i think that would be easier to understand there would be less maintenance work you wouldn't get people complaining things",
    "start": "1391600",
    "end": "1398000"
  },
  {
    "text": "don't work and needing to suddenly fix them a lot of these problems have been like",
    "start": "1398000",
    "end": "1403440"
  },
  {
    "text": "cross architecture problems with architectures have different syscalls and new changes and people running",
    "start": "1403440",
    "end": "1409919"
  },
  {
    "text": "um you know a distro that expects one kernel on another and it behaves differently",
    "start": "1409919",
    "end": "1415919"
  },
  {
    "text": "so those kind of issues could be improved um the error the error support would",
    "start": "1415919",
    "end": "1422400"
  },
  {
    "text": "probably be better with um things like that so",
    "start": "1422400",
    "end": "1427600"
  },
  {
    "text": "um the downside is there's potentially that blockless the default block list gets very small",
    "start": "1427600",
    "end": "1432640"
  },
  {
    "text": "because everyone decides that these things are okay um so but i think this this is",
    "start": "1432640",
    "end": "1438799"
  },
  {
    "text": "attractive and um i think it's definitely worth considering",
    "start": "1438799",
    "end": "1444159"
  },
  {
    "start": "1443000",
    "end": "1443000"
  },
  {
    "text": "um we have a huge problem in the kubernetes ecosystem but whose problem is this should users",
    "start": "1444159",
    "end": "1451840"
  },
  {
    "text": "really have to understand about setcomp no um should applications have to",
    "start": "1451840",
    "end": "1457200"
  },
  {
    "text": "understand it too difficult is it but should it be done at the kubernetes level where you have to configure it now or",
    "start": "1457200",
    "end": "1463520"
  },
  {
    "text": "should it be the responsibility of the cri or run or the sort of run c",
    "start": "1463520",
    "end": "1469120"
  },
  {
    "text": "type layer of the actual container runtime currently we're pushing responsibility up to the user which is kind of terrible",
    "start": "1469120",
    "end": "1476720"
  },
  {
    "text": "um we why don't we have runtimes that provide actual security guarantees instead of",
    "start": "1476720",
    "end": "1482480"
  },
  {
    "text": "just letting you configure it and making it your choice we are starting to see some of these runtimes i mean arguably g visor which",
    "start": "1482480",
    "end": "1489440"
  },
  {
    "text": "i'll talk about in a second and vm runtimes are basically trying to make better security guarantees",
    "start": "1489440",
    "end": "1495520"
  },
  {
    "text": "um you know but why have we pushed down this whole",
    "start": "1495520",
    "end": "1500559"
  },
  {
    "text": "idea that you list a bunch of syscalls in json which is what's this called handling rules and",
    "start": "1500559",
    "end": "1506080"
  },
  {
    "text": "json which is what we're doing it's a it's not a good design and there's a definitely a layering and responsibility",
    "start": "1506080",
    "end": "1512640"
  },
  {
    "text": "issue that we need to solve g visor g visas a really interesting",
    "start": "1512640",
    "end": "1519120"
  },
  {
    "start": "1515000",
    "end": "1515000"
  },
  {
    "text": "response to this it basically um it basically reimplements",
    "start": "1519120",
    "end": "1524559"
  },
  {
    "text": "large portions of works in go um basically it kind of um you know has a",
    "start": "1524559",
    "end": "1530799"
  },
  {
    "text": "go tcp stack and everything it basically says well linux wasn't very secure we're going to re-implement it",
    "start": "1530799",
    "end": "1537039"
  },
  {
    "text": "in go in user space in a memory safe language and then we're going to wrap this up we're",
    "start": "1537039",
    "end": "1542720"
  },
  {
    "text": "going to use setcomp internally in it just to make because it doesn't actually use many syscalls",
    "start": "1542720",
    "end": "1547919"
  },
  {
    "text": "it has a performance hit and it potentially has compatibility here but it's a just like cut out all this security",
    "start": "1547919",
    "end": "1555039"
  },
  {
    "text": "issues from linux is as a solution it's a really interesting solution and definitely worth",
    "start": "1555039",
    "end": "1560240"
  },
  {
    "text": "looking at um something that i call the lambda-like solution um i don't know is lambda",
    "start": "1560240",
    "end": "1568159"
  },
  {
    "start": "1562000",
    "end": "1562000"
  },
  {
    "text": "kind of solved a lot of these problems by having a very restricted um i said container runtime it's strict",
    "start": "1568159",
    "end": "1574240"
  },
  {
    "text": "i mean people don't think of it as a container but it's a very similar problem space um user said comp um",
    "start": "1574240",
    "end": "1581760"
  },
  {
    "text": "i haven't actually probed this policy to see what exactly what it doesn't doesn't allow it has a custom learner's kernel with",
    "start": "1581760",
    "end": "1587919"
  },
  {
    "text": "features removed which is what um a lot of people who run secure systems",
    "start": "1587919",
    "end": "1594159"
  },
  {
    "text": "do is just disable a lot of parts of the linux kernel this has thousands and thousands of subsystems that",
    "start": "1594159",
    "end": "1600320"
  },
  {
    "text": "are not generally very secure and you can often access them by from user",
    "start": "1600320",
    "end": "1606240"
  },
  {
    "text": "space by opening weird kinds of sockets that you don't really use in practice much",
    "start": "1606240",
    "end": "1611520"
  },
  {
    "text": "and things like that um but the linux distro is",
    "start": "1611520",
    "end": "1617360"
  },
  {
    "text": "a very general purpose and they tend to ship with a kernel that does everything has everything as a module",
    "start": "1617360",
    "end": "1622880"
  },
  {
    "text": "loads anything because you know the general purpose you might want to do anything um",
    "start": "1622880",
    "end": "1628400"
  },
  {
    "text": "not many people have locked down those kernel configs um again you probably should consider",
    "start": "1628400",
    "end": "1635919"
  },
  {
    "text": "doing this but everyone's kind of um lives with their vendor configs for",
    "start": "1635919",
    "end": "1641760"
  },
  {
    "text": "support reasons and stuff like that and the vendors are not actually necessarily acting in your security interests all the time",
    "start": "1641760",
    "end": "1649279"
  },
  {
    "text": "um also in lambda no applications can run as root full stop it just doesn't allow it um again in container space we haven't",
    "start": "1649279",
    "end": "1655520"
  },
  {
    "text": "forced that again that's left to the user to enforce that um you know there's a restricted runtime",
    "start": "1655520",
    "end": "1661919"
  },
  {
    "text": "api most of the file system is not writable and things like that in lambda we could do something very much like",
    "start": "1661919",
    "end": "1667840"
  },
  {
    "text": "this we could have a you know a container runtime that made these choices",
    "start": "1667840",
    "end": "1673679"
  },
  {
    "text": "um and had a clear delineation of what you can and can't do and a security",
    "start": "1673679",
    "end": "1680000"
  },
  {
    "text": "model and testing and things like that in a way the um the sandboxed flag proposal for",
    "start": "1680000",
    "end": "1685840"
  },
  {
    "text": "kubernetes is kind of like this but it doesn't define any kind of specification it's a bit kind of some things can be",
    "start": "1685840",
    "end": "1692640"
  },
  {
    "text": "sandboxed and some things might not be but and they can decide what sandboxing is but there's no kind of linux",
    "start": "1692640",
    "end": "1698720"
  },
  {
    "text": "um runtime that makes these decisions um in effect the things like the",
    "start": "1698720",
    "end": "1704559"
  },
  {
    "text": "firecracker container to effectively kind of make those decisions for you um ish but um",
    "start": "1704559",
    "end": "1713279"
  },
  {
    "text": "but there isn't a kind of normal container runtime that does that um as of linux 5.7 there's something",
    "start": "1713279",
    "end": "1720640"
  },
  {
    "start": "1716000",
    "end": "1716000"
  },
  {
    "text": "that we've been talking about for a really really long time that got merged the ebf ebpf lsm lsm has done a security module",
    "start": "1720640",
    "end": "1728399"
  },
  {
    "text": "module these are things like se linux and app armor but selenius and f armor give you um",
    "start": "1728399",
    "end": "1735840"
  },
  {
    "text": "a kind of general purpose way of configuring these ls these security hooks in linux for",
    "start": "1735840",
    "end": "1743520"
  },
  {
    "text": "general purpose systems the ebpf lsm basically says you can inject at each of the decision",
    "start": "1743520",
    "end": "1750159"
  },
  {
    "text": "points in the kernel where it decides can a user do or not do something um",
    "start": "1750159",
    "end": "1756399"
  },
  {
    "text": "and there are a lot of these points they're much more than just at the syscall there they're all sorts of places like um",
    "start": "1756399",
    "end": "1762960"
  },
  {
    "text": "and there and you get much more specific information about what's going on at these places as well than you do at this",
    "start": "1762960",
    "end": "1768159"
  },
  {
    "text": "this is called abi um you can basically run an ebpf program that can make real",
    "start": "1768159",
    "end": "1774240"
  },
  {
    "text": "programmatic decisions about can this application do this at this point and it can",
    "start": "1774240",
    "end": "1780080"
  },
  {
    "text": "maintain more state and um can make you know basically have much more information",
    "start": "1780080",
    "end": "1786080"
  },
  {
    "text": "um to make these decisions this is not simple um i think as i said it's a",
    "start": "1786080",
    "end": "1793039"
  },
  {
    "text": "start-up size problem potentially um or perhaps an nsa sized problem i think the nsa",
    "start": "1793039",
    "end": "1799120"
  },
  {
    "text": "wrote sc linux in the first place um and basically defined the kind of shape",
    "start": "1799120",
    "end": "1805039"
  },
  {
    "text": "of what it looks like um and you know the nsa is an organization that's interested in this",
    "start": "1805039",
    "end": "1811200"
  },
  {
    "text": "type of problem um um but yeah it's the sort of thing that",
    "start": "1811200",
    "end": "1816480"
  },
  {
    "text": "you could you could potentially do with a you know a medium-sized team",
    "start": "1816480",
    "end": "1822399"
  },
  {
    "text": "and work on this problem for a few years um this is very much looking as a technical solution",
    "start": "1822399",
    "end": "1828720"
  },
  {
    "text": "it doesn't solve the human problems of really what kind of um what kind of policies do you need to",
    "start": "1828720",
    "end": "1834799"
  },
  {
    "text": "enforce and what kind of model you've actually got here and how does the human communicate intense over this",
    "start": "1834799",
    "end": "1841039"
  },
  {
    "text": "problem things like that so there's still a lot of human problems that you have to solve there so what is going",
    "start": "1841039",
    "end": "1847440"
  },
  {
    "text": "to happen with said comp um my prediction is that",
    "start": "1847440",
    "end": "1852880"
  },
  {
    "start": "1848000",
    "end": "1848000"
  },
  {
    "text": "the if you look at the state of the container ecosystem now there's a continuing lack of investment in the low levels of the",
    "start": "1852880",
    "end": "1859120"
  },
  {
    "text": "stack um there's really not many people working on these problems",
    "start": "1859120",
    "end": "1864399"
  },
  {
    "text": "it's not clear who's um who's going to work on these problems",
    "start": "1864399",
    "end": "1871760"
  },
  {
    "text": "um most people seem to expect someone else to do it and not get involved themselves",
    "start": "1871760",
    "end": "1878880"
  },
  {
    "text": "um i think setting up an ebp flsm container security starts up is probably quite easy to get funded but the other",
    "start": "1879200",
    "end": "1885519"
  },
  {
    "text": "options might not even happen um the serious service providers like the cloud",
    "start": "1885519",
    "end": "1890640"
  },
  {
    "text": "providers are basically just using vms um and so that's why you're seeing quite",
    "start": "1890640",
    "end": "1897200"
  },
  {
    "text": "mature things like firecracker the problem is that most no most other users of containers are",
    "start": "1897200",
    "end": "1904799"
  },
  {
    "text": "running their containers in vms already they're either running vmware on prem or they're running in cloud provider vms",
    "start": "1904799",
    "end": "1912000"
  },
  {
    "text": "and not cloud provider bare metal or other bare metal so most of them don't have the option of",
    "start": "1912000",
    "end": "1917919"
  },
  {
    "text": "using vms for containers at this point um so even though their stack is becoming",
    "start": "1917919",
    "end": "1924080"
  },
  {
    "text": "relatively mature most people are simply not using it um",
    "start": "1924080",
    "end": "1929360"
  },
  {
    "text": "so um we'll probably see the split where more and more people are using you know",
    "start": "1929360",
    "end": "1936480"
  },
  {
    "text": "provider services like you know cloud provider services and they will just use um vms vm based containers",
    "start": "1936480",
    "end": "1944320"
  },
  {
    "text": "um via providers or or things like that like you know things like um you know",
    "start": "1944320",
    "end": "1951279"
  },
  {
    "text": "this the fargate containers of kubernetes and aws things like that which are all vm based and",
    "start": "1951279",
    "end": "1956320"
  },
  {
    "text": "um just scale as as containers rather than as hosts um",
    "start": "1956320",
    "end": "1962559"
  },
  {
    "text": "we're not assuming security vendors solving this type of problem um there's a there's lots of reasons for",
    "start": "1962559",
    "end": "1969279"
  },
  {
    "text": "this um uh thomas dallian's done a bunch of talks which are interesting talk to me if",
    "start": "1969279",
    "end": "1974320"
  },
  {
    "text": "you're interested in the questions about why the security industry isn't interested in this kind of problem",
    "start": "1974320",
    "end": "1980240"
  },
  {
    "text": "and end user as if kubernetes find it difficult to contribute back to this sort of problem because",
    "start": "1980240",
    "end": "1987039"
  },
  {
    "text": "these problems are quite um technically difficult um there's",
    "start": "1987039",
    "end": "1992240"
  },
  {
    "text": "um not a lot of people who have the right kind of expertise around um the",
    "start": "1992240",
    "end": "1998720"
  },
  {
    "text": "learner's kernel and how things actually work in container runtimes and have time to work on these problems they",
    "start": "1998720",
    "end": "2005039"
  },
  {
    "text": "have other pressing problems to work on it's kind of um um difficult i mean",
    "start": "2005039",
    "end": "2010399"
  },
  {
    "text": "even very large end users have tend to have very little and it's kernel expertise",
    "start": "2010399",
    "end": "2015600"
  },
  {
    "text": "um and um they tend to work much mostly higher up in the stack so we're not really seeing much at the",
    "start": "2015600",
    "end": "2022399"
  },
  {
    "text": "moment much end user contribution to solving these problems so i'm actually not optimistic that a lot of",
    "start": "2022399",
    "end": "2028559"
  },
  {
    "text": "this stuff will happen quickly it's taken a long time you know to get where we are and there's been little",
    "start": "2028559",
    "end": "2034640"
  },
  {
    "text": "investment in it um so um thanks very much for that",
    "start": "2034640",
    "end": "2040559"
  },
  {
    "text": "um and i'll be around to answer questions and um hope you enjoyed",
    "start": "2040559",
    "end": "2048079"
  },
  {
    "text": "that talk and um it's been fun working on setcomp but i think you know there's a lot of interesting problems that",
    "start": "2048079",
    "end": "2054960"
  },
  {
    "text": "could be solved and actually aren't being so uh if you're looking for a fun problem",
    "start": "2054960",
    "end": "2060800"
  },
  {
    "text": "to work on it's absolutely open for doing that",
    "start": "2060800",
    "end": "2067838"
  }
]