[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "hi and welcome to from wcf to grpc uh my name is mark rendall",
    "start": "160",
    "end": "7120"
  },
  {
    "text": "and i was first exposed to the awesomeness that is grpc last year at the build conference",
    "start": "7120",
    "end": "15440"
  },
  {
    "text": "microsoft announced that they were no longer going to be supporting the wcf framework for",
    "start": "15440",
    "end": "21680"
  },
  {
    "text": "creating distributed applications in net core and beyond",
    "start": "21680",
    "end": "27039"
  },
  {
    "text": "and they recommended that people migrate to grpc and they have built first class support",
    "start": "27039",
    "end": "33200"
  },
  {
    "text": "for grpc into asp.net core to facilitate that",
    "start": "33200",
    "end": "38640"
  },
  {
    "text": "so in this talk i'm going to talk about how that's going to work the differences",
    "start": "38640",
    "end": "44960"
  },
  {
    "text": "between wcf and grpc and potential ways that",
    "start": "44960",
    "end": "51120"
  },
  {
    "text": "customers who have big investments in wcf can migrate to grpc running on.net core",
    "start": "51120",
    "end": "59199"
  },
  {
    "text": "with a minimum of effort and disruption",
    "start": "59199",
    "end": "64799"
  },
  {
    "text": "so microsoft have been on a journey with net for a few years now they created",
    "start": "64799",
    "end": "71159"
  },
  {
    "text": "created.net core back in 2016 and unlike",
    "start": "71159",
    "end": "76560"
  },
  {
    "text": "net which has been a windows only behemoth of a framework and proprietary",
    "start": "76560",
    "end": "82080"
  },
  {
    "text": "closed source dot net core is fully open source developed in the open on github",
    "start": "82080",
    "end": "88400"
  },
  {
    "text": "and it is cross-platform it runs on windows and linux and mac os and in the course of doing that",
    "start": "88400",
    "end": "97200"
  },
  {
    "text": "some things from net have been brought along some things have been changed along the",
    "start": "97200",
    "end": "103280"
  },
  {
    "text": "way and some things are just not being brought along at all and one of those is wcf",
    "start": "103280",
    "end": "110240"
  },
  {
    "start": "110000",
    "end": "292000"
  },
  {
    "text": "wcf was created in 2006 and at the time everybody who was doing",
    "start": "110240",
    "end": "116560"
  },
  {
    "text": "distributed applications or service oriented architecture as we called it then",
    "start": "116560",
    "end": "122798"
  },
  {
    "text": "soap was built into wcf it could do soap communications over http",
    "start": "123920",
    "end": "130239"
  },
  {
    "text": "and when it was talking soap it could talk to servers and clients written in other",
    "start": "130239",
    "end": "136080"
  },
  {
    "text": "languages like java or python it had a secondary mode which was called",
    "start": "136080",
    "end": "142879"
  },
  {
    "text": "net tcp and this was a much more high performance much more powerful binding for",
    "start": "142879",
    "end": "150400"
  },
  {
    "text": "wcf and it allowed used binary wire",
    "start": "150400",
    "end": "157120"
  },
  {
    "text": "format and a raw tcp connection and so it was much faster than soap",
    "start": "157120",
    "end": "164319"
  },
  {
    "text": "much more powerful but the problem was it was only implemented in wcfin.net and so wcf",
    "start": "164319",
    "end": "172720"
  },
  {
    "text": "services and clients could communicate using net tcp but only with other.net wcf",
    "start": "172720",
    "end": "179680"
  },
  {
    "text": "clients and so forth and then it was my favorite thing about wcf and the thing that caused me",
    "start": "179680",
    "end": "186560"
  },
  {
    "text": "to fail the wcf uh microsoft certified developer exam twice which was the configuration",
    "start": "186560",
    "end": "194159"
  },
  {
    "text": "so with wcf the implementation of your service was",
    "start": "194159",
    "end": "199200"
  },
  {
    "text": "completely separate from the specification of what bindings and contracts and wire formats and",
    "start": "199200",
    "end": "205920"
  },
  {
    "text": "everything else it should use to actually handle communication between client and server",
    "start": "205920",
    "end": "211519"
  },
  {
    "text": "and all of this was done through the wcf configuration xml files and this",
    "start": "211519",
    "end": "218640"
  },
  {
    "text": "really doesn't fit with microsoft's modern vision for net net core and moving forward",
    "start": "218640",
    "end": "226879"
  },
  {
    "text": "to the end of this year.net five um a lot of what made wcf work was",
    "start": "226879",
    "end": "232959"
  },
  {
    "text": "actually built into windows and not the dot-net framework itself and microsoft has finally embraced",
    "start": "232959",
    "end": "240159"
  },
  {
    "text": "a cross-platform world and in particular a world where people are running",
    "start": "240159",
    "end": "245760"
  },
  {
    "text": "dense clusters of linux containers in kubernetes in various cloud platforms",
    "start": "245760",
    "end": "252799"
  },
  {
    "text": "and so supporting linux as a target host operating system has become",
    "start": "252799",
    "end": "258479"
  },
  {
    "text": "increasingly important and re-implementing wcf to run on top of linux would require",
    "start": "258479",
    "end": "265199"
  },
  {
    "text": "not just migrating the net framework parts but also the parts that are built into windows",
    "start": "265199",
    "end": "272080"
  },
  {
    "text": "would have to be re-implemented to work properly on linux and so microsoft have decided it's 2020",
    "start": "272080",
    "end": "280720"
  },
  {
    "text": "and people are generally not using soap anymore and net tcp is too closed off",
    "start": "280720",
    "end": "287120"
  },
  {
    "text": "and two windows only and so they have embraced grpc",
    "start": "287120",
    "end": "292240"
  },
  {
    "start": "292000",
    "end": "424000"
  },
  {
    "text": "and grpc uh compared to wcf really provides the best of both worlds",
    "start": "292240",
    "end": "300320"
  },
  {
    "text": "because grpc is a binary protocol using protobuf it gets net tcp",
    "start": "300320",
    "end": "307280"
  },
  {
    "text": "style performance but of course grpc is implemented on",
    "start": "307280",
    "end": "312639"
  },
  {
    "text": "dozens of different platforms and so we get the soap interoperability and all of this is just out there and",
    "start": "312639",
    "end": "319360"
  },
  {
    "text": "microsoft have embraced this and decided that they are going to become part of this",
    "start": "319360",
    "end": "324560"
  },
  {
    "text": "grpc ecosystem which i'm sure we all agree is awesome grpc of course",
    "start": "324560",
    "end": "331680"
  },
  {
    "text": "supports net and java and go and you know an endless list if it's a",
    "start": "331680",
    "end": "337680"
  },
  {
    "text": "current programming language or a current development platform you can be pretty certain it supports grpc",
    "start": "337680",
    "end": "344400"
  },
  {
    "text": "whether that's officially or through third-party implementations for things like rust and haskell and so forth",
    "start": "344400",
    "end": "351280"
  },
  {
    "text": "one nice thing is that the grpc web proxy standard which",
    "start": "351280",
    "end": "357919"
  },
  {
    "text": "is commonly used to allow browsers to access grpc services",
    "start": "357919",
    "end": "362960"
  },
  {
    "text": "that normally requires running the grpc web proxy in a container or using an envoy proxy to provide the",
    "start": "362960",
    "end": "370880"
  },
  {
    "text": "grpc web interface microsoft have actually created an implementation of the grpc web",
    "start": "370880",
    "end": "376960"
  },
  {
    "text": "protocol and it's built into asp.net core so you can install it just as an",
    "start": "376960",
    "end": "382960"
  },
  {
    "text": "additional package into your grpc application and with a couple of configuration points",
    "start": "382960",
    "end": "388720"
  },
  {
    "text": "you can actually make your grpc service natively support grpc web and support",
    "start": "388720",
    "end": "395360"
  },
  {
    "text": "browsers connecting to it without any need for proxies or other sidecar",
    "start": "395360",
    "end": "403520"
  },
  {
    "text": "instances in production so that's pretty cool i think that's a good example of",
    "start": "403520",
    "end": "409039"
  },
  {
    "text": "how microsoft are actually embracing and attempting to uh really make the most of the grpc",
    "start": "409039",
    "end": "415680"
  },
  {
    "text": "ecosystem for um both for microsoft developers but for all other",
    "start": "415680",
    "end": "421680"
  },
  {
    "text": "developers as well so dot net core grpc micro",
    "start": "421680",
    "end": "428319"
  },
  {
    "start": "424000",
    "end": "597000"
  },
  {
    "text": "obviously the grpc project has provided uh nuget packages to implement grpc",
    "start": "428319",
    "end": "434960"
  },
  {
    "text": "in net applications for some time now and those the libraries for net are wrappers",
    "start": "434960",
    "end": "442560"
  },
  {
    "text": "around the native grpc implementation library dot net core grpc wanted to",
    "start": "442560",
    "end": "450000"
  },
  {
    "text": "provide the grpc protocol but in a fully managed way that meshed well",
    "start": "450000",
    "end": "456960"
  },
  {
    "text": "with net core and asp.net core applications and so they dedicated",
    "start": "456960",
    "end": "464639"
  },
  {
    "text": "some developers working on.net core 3.0 to create a.net core grpc implementation",
    "start": "464639",
    "end": "471120"
  },
  {
    "text": "which is available alongside the original grpc4.net or grpc for c-sharp",
    "start": "471120",
    "end": "478160"
  },
  {
    "text": "implementation so net core grpc is fully managed it doesn't use the grpc",
    "start": "478160",
    "end": "485199"
  },
  {
    "text": "native client at all or native components at all",
    "start": "485199",
    "end": "490400"
  },
  {
    "text": "it is part of the grpc project though it's under the grpc organization on github it's maintained by microsoft developers",
    "start": "490400",
    "end": "497840"
  },
  {
    "text": "but it's uh open source and there are other contributors to it as well and uh it is",
    "start": "497840",
    "end": "505199"
  },
  {
    "text": "playing very nicely in the grpc organization and ecosystem and it runs on the",
    "start": "505199",
    "end": "512080"
  },
  {
    "text": "kestrel http server which is an incredibly high performance http server",
    "start": "512080",
    "end": "517120"
  },
  {
    "text": "that's built into net core which is currently sitting somewhere near the top of the tech in power benchmarks",
    "start": "517120",
    "end": "523839"
  },
  {
    "text": "and the clients that you generate for net core use the system.net.http",
    "start": "523839",
    "end": "531760"
  },
  {
    "text": "client which again is a very high performance uh http",
    "start": "531760",
    "end": "536800"
  },
  {
    "text": "client um that's natively implemented in net core so adding grpc",
    "start": "536800",
    "end": "543600"
  },
  {
    "text": "to an asp.net core application looks much like adding anything else to an asp.net core application here you",
    "start": "543600",
    "end": "550160"
  },
  {
    "text": "can see the startup class that you get in all your asb net core applications where",
    "start": "550160",
    "end": "555200"
  },
  {
    "text": "we configure services which is the dependency injection and we just add grpc as uh dependency in there",
    "start": "555200",
    "end": "563760"
  },
  {
    "text": "and then in our configure method which is where we set up our routing and endpoints and middleware and everything",
    "start": "563760",
    "end": "569360"
  },
  {
    "text": "else we just map our grpc service and this will sit quite happily in an",
    "start": "569360",
    "end": "575360"
  },
  {
    "text": "application that also has http endpoints or signalr endpoints that's serving static",
    "start": "575360",
    "end": "582080"
  },
  {
    "text": "files it works with the built-in asb net core authentication libraries",
    "start": "582080",
    "end": "588240"
  },
  {
    "text": "encryption libraries compression libraries it is a full-on first-class part of the asp.net",
    "start": "588240",
    "end": "595120"
  },
  {
    "text": "core environment so it's clear that microsoft are all in on this",
    "start": "595120",
    "end": "601279"
  },
  {
    "start": "597000",
    "end": "780000"
  },
  {
    "text": "and that this is where we should be going with our distributed applications from",
    "start": "601279",
    "end": "607360"
  },
  {
    "text": "wcf so let's take a look at how wcf compares to grpc in terms of the actual",
    "start": "607360",
    "end": "614880"
  },
  {
    "text": "implementation so the first thing we have uh as part of any rpc or distributed",
    "start": "614880",
    "end": "621839"
  },
  {
    "text": "system is our services and in wcf these are defined using service",
    "start": "621839",
    "end": "627920"
  },
  {
    "text": "contracts service contracts are typically a c-sharp interface decorated with some attributes and",
    "start": "627920",
    "end": "635760"
  },
  {
    "text": "the attributes declare how the interface is going to be exposed as a",
    "start": "635760",
    "end": "641200"
  },
  {
    "text": "service you can put things in there to control authentication and various other components but you",
    "start": "641200",
    "end": "648160"
  },
  {
    "text": "define your service contract your your public interface using this c-sharp interface and then",
    "start": "648160",
    "end": "656160"
  },
  {
    "text": "you would implement that interface in an actual class in order to create the implementation of your",
    "start": "656160",
    "end": "662160"
  },
  {
    "text": "service in grpc we have a service definition and",
    "start": "662160",
    "end": "667760"
  },
  {
    "text": "this is written in the protobuf language and it looks pretty much the same",
    "start": "667760",
    "end": "675519"
  },
  {
    "text": "obviously it's a first-class dsl for defining services and messages",
    "start": "675519",
    "end": "680800"
  },
  {
    "text": "there are a couple of key differences with wcf and grpc the primary",
    "start": "680800",
    "end": "688000"
  },
  {
    "text": "one is that rpc methods in grpc can only take a single parameter whereas",
    "start": "688000",
    "end": "694800"
  },
  {
    "text": "wcf methods in service contracts can take multiple parameters also wcf methods can return",
    "start": "694800",
    "end": "703279"
  },
  {
    "text": "all kinds of types they can return plain old c-sharp objects but they can",
    "start": "703279",
    "end": "710079"
  },
  {
    "text": "also return lists and arrays of c-sharp objects and they can also return lists and arrays of primitives so",
    "start": "710079",
    "end": "716800"
  },
  {
    "text": "you could have a method that returned a list of strings whereas rpc",
    "start": "716800",
    "end": "722560"
  },
  {
    "text": "really just supports returning some kind of message type and so the first part of",
    "start": "722560",
    "end": "728720"
  },
  {
    "text": "migrating your wcf to grpc application is to",
    "start": "728720",
    "end": "736000"
  },
  {
    "text": "wrap those parameters in request objects and potentially wrap the",
    "start": "736000",
    "end": "743519"
  },
  {
    "text": "return type in a response object and when i'm working with customers who are looking to do this i always recommend",
    "start": "743519",
    "end": "750720"
  },
  {
    "text": "creating a specific request and response object for each method in the service just",
    "start": "750720",
    "end": "757279"
  },
  {
    "text": "because one of the great things about protobuf and grpc is the forwards and backwards",
    "start": "757279",
    "end": "762560"
  },
  {
    "text": "compatibility that you get from protobuf and if we have separate request and",
    "start": "762560",
    "end": "768240"
  },
  {
    "text": "response objects for each method it means less chance of breaking the",
    "start": "768240",
    "end": "773360"
  },
  {
    "text": "contract with an irreconcilable change in the future speaking of",
    "start": "773360",
    "end": "781760"
  },
  {
    "start": "780000",
    "end": "983000"
  },
  {
    "text": "contracts the next thing we want to look at is data contracts or what grpc calls messages so",
    "start": "781760",
    "end": "788959"
  },
  {
    "text": "in wcf a data contract is simply a plain old c-sharp object",
    "start": "788959",
    "end": "794079"
  },
  {
    "text": "with properties and again decorated with attributes you have the data contract to say this is a data contract",
    "start": "794079",
    "end": "800800"
  },
  {
    "text": "and then use the data member attribute to decorate all the properties that should be",
    "start": "800800",
    "end": "807360"
  },
  {
    "text": "serialized this matches fairly closely to a grpc message",
    "start": "807360",
    "end": "813600"
  },
  {
    "text": "we have here the equivalent message for the room uh type",
    "start": "813600",
    "end": "820880"
  },
  {
    "text": "obviously in grpc we're using the lowercase and underscores naming convention",
    "start": "820880",
    "end": "826880"
  },
  {
    "text": "in the generated c sharp code that will become pascal case because that's the way the c sharp code",
    "start": "826880",
    "end": "832880"
  },
  {
    "text": "generator works one thing that i ran into fairly quickly particularly working with enterprise",
    "start": "832880",
    "end": "838480"
  },
  {
    "text": "customers is that protobuf does not provide a built-in",
    "start": "838480",
    "end": "844320"
  },
  {
    "text": "type that matches to c-sharps decimal it has float and it has double and",
    "start": "844320",
    "end": "851120"
  },
  {
    "text": "we know that actually if you set a a float on the protobuf object and",
    "start": "851120",
    "end": "857519"
  },
  {
    "text": "send it over the wire and then extract that float at the other end it will still have exactly the same value and it's when you do maths with",
    "start": "857519",
    "end": "864720"
  },
  {
    "text": "floats that you discover that 4.99 times 5 is uh",
    "start": "864720",
    "end": "872000"
  },
  {
    "text": "24.9444449 but if you try and put floats and",
    "start": "873240",
    "end": "878320"
  },
  {
    "text": "doubles into a lot of enterprise customers software they are just they're not happy they don't like it and",
    "start": "878320",
    "end": "884240"
  },
  {
    "text": "so i had to find a way around this google within their api protobuf",
    "start": "884240",
    "end": "889920"
  },
  {
    "text": "definitions actually provide a money type which works by having units and nanos",
    "start": "889920",
    "end": "896000"
  },
  {
    "text": "and a currency field and so i just created a",
    "start": "896000",
    "end": "902160"
  },
  {
    "text": "a copy of that money type and left off the currency and called that decimal so this is",
    "start": "902160",
    "end": "909120"
  },
  {
    "text": "almost uh identical to google's money proto from their apis the only",
    "start": "909120",
    "end": "916639"
  },
  {
    "text": "difference is it doesn't have the currency field on there",
    "start": "916639",
    "end": "922160"
  },
  {
    "text": "so this builds quite nicely into a net core grpc application",
    "start": "923040",
    "end": "931040"
  },
  {
    "text": "you just drop this proto in and to make it even nicer and to make it",
    "start": "931040",
    "end": "937440"
  },
  {
    "text": "play nicely with the built-in decimals in c-sharp i use the fact that the classes generated by",
    "start": "937440",
    "end": "946240"
  },
  {
    "text": "protobufs by grpc and protobufs c-sharp generator it declares all the",
    "start": "946240",
    "end": "952160"
  },
  {
    "text": "classes as partial and that means that you can add additional properties and methods and",
    "start": "952160",
    "end": "958560"
  },
  {
    "text": "and other things to them and in this instance it means that we can add some implicit operators to",
    "start": "958560",
    "end": "965199"
  },
  {
    "text": "our decimal value class to allow it to be passed backwards and forwards with c-sharp decimals",
    "start": "965199",
    "end": "971680"
  },
  {
    "text": "without any casting or overloads or methods or anything like that so this makes that decimal value",
    "start": "971680",
    "end": "978399"
  },
  {
    "text": "type play nicely with c-sharp decimals",
    "start": "978399",
    "end": "983680"
  },
  {
    "text": "as i tend to be working with people who are moving from wcf to grpc",
    "start": "983680",
    "end": "988959"
  },
  {
    "text": "they usually already have a c-sharp equivalent of their data contract object their message",
    "start": "988959",
    "end": "995360"
  },
  {
    "text": "object as well and so what we quite often do is build a similar implicit conversion in to go from the",
    "start": "995360",
    "end": "1002800"
  },
  {
    "text": "plain old c-sharp object to the grpc message as you can see here",
    "start": "1002800",
    "end": "1008000"
  },
  {
    "text": "this converts the global colon colon hotel data room",
    "start": "1008000",
    "end": "1013920"
  },
  {
    "text": "that would be the pre-existing class from their old wcf application and this",
    "start": "1013920",
    "end": "1021120"
  },
  {
    "text": "partial declaration just cleanly converts between that type",
    "start": "1021120",
    "end": "1028079"
  },
  {
    "text": "and the protobuf generated room message type okay so",
    "start": "1028079",
    "end": "1034640"
  },
  {
    "start": "1033000",
    "end": "1287000"
  },
  {
    "text": "that makes migration a little bit easier then we get into the actual",
    "start": "1034640",
    "end": "1040160"
  },
  {
    "text": "implementation in uh wcf versus grpc",
    "start": "1040160",
    "end": "1045600"
  },
  {
    "text": "so with wcf you don't have a base class you inherit from the interface that you use",
    "start": "1045600",
    "end": "1051520"
  },
  {
    "text": "to define your service contract and then you just have methods on there that are implemented however you want to",
    "start": "1051520",
    "end": "1057919"
  },
  {
    "text": "implement them grpc implementations are different obviously you get a base",
    "start": "1057919",
    "end": "1064559"
  },
  {
    "text": "class and you inherit from that base class and override",
    "start": "1064559",
    "end": "1069600"
  },
  {
    "text": "the predefined methods to provide the implementation for your service and so that makes things a little bit",
    "start": "1069600",
    "end": "1076880"
  },
  {
    "text": "different also because for date and times and durations there is no",
    "start": "1076880",
    "end": "1084400"
  },
  {
    "text": "built-in implicit conversion between google's well-known timestamp and",
    "start": "1084400",
    "end": "1090880"
  },
  {
    "text": "duration types to net's built-in date time offset and time span",
    "start": "1090880",
    "end": "1098400"
  },
  {
    "text": "types we do actually have to do some manual conversion there so we have to turn the check-in date",
    "start": "1098400",
    "end": "1104960"
  },
  {
    "text": "which is a time stamp to a date time offset then we create our room data class",
    "start": "1104960",
    "end": "1111520"
  },
  {
    "text": "wherever that's coming from obviously normally in a net core application we'd be getting that from dependency injection but in this case",
    "start": "1111520",
    "end": "1118880"
  },
  {
    "text": "this is just for some demo code and then we create our response",
    "start": "1118880",
    "end": "1124559"
  },
  {
    "text": "from the protobuf message and in this instance because this is not asynchronous we just return a task from",
    "start": "1124559",
    "end": "1130799"
  },
  {
    "text": "result response but normally obviously this would be talking to databases or upstream services or other microservices",
    "start": "1130799",
    "end": "1137760"
  },
  {
    "text": "and so we would have various awaits in there so this",
    "start": "1137760",
    "end": "1144480"
  },
  {
    "text": "essentially moves the functionality from the old hotel service directly into the grpc",
    "start": "1144480",
    "end": "1153280"
  },
  {
    "text": "service in the new project however there is an easier way to do",
    "start": "1153280",
    "end": "1161200"
  },
  {
    "text": "this obviously this hotel service there's not a lot going on in that implementation",
    "start": "1161200",
    "end": "1166640"
  },
  {
    "text": "the majority of wcf services there will be quite a bit more logic in each of those",
    "start": "1166640",
    "end": "1172799"
  },
  {
    "text": "implementation methods and there may also be uh other private methods",
    "start": "1172799",
    "end": "1178080"
  },
  {
    "text": "in that hotel service class that are used to fulfill these requests and so",
    "start": "1178080",
    "end": "1184960"
  },
  {
    "text": "there's a quick cheat mode that i like to recommend where if you can get your hotel service",
    "start": "1184960",
    "end": "1191200"
  },
  {
    "text": "type to compile under net core which as long as you're not using",
    "start": "1191200",
    "end": "1198400"
  },
  {
    "text": "particularly edge case libraries or new get packages you should be able to do dot net core",
    "start": "1198400",
    "end": "1204000"
  },
  {
    "text": "3.1 and net 5 support ado.net for most of the databases out there they",
    "start": "1204000",
    "end": "1211039"
  },
  {
    "text": "also support entity framework 6.3 as well as entity framework core",
    "start": "1211039",
    "end": "1216559"
  },
  {
    "text": "so if you can copy your hotel service class across into your new project then we can",
    "start": "1216559",
    "end": "1222240"
  },
  {
    "text": "actually just inject that service contract type into our grpc",
    "start": "1222240",
    "end": "1227600"
  },
  {
    "text": "service implementation and just call directly into it so all our old code",
    "start": "1227600",
    "end": "1233760"
  },
  {
    "text": "stays in the same place and working the same way we just wrap grpc around it",
    "start": "1233760",
    "end": "1240960"
  },
  {
    "text": "and then we find it much easier to bring complex data across and so you can",
    "start": "1240960",
    "end": "1247280"
  },
  {
    "text": "see here hotel service is injected by dependency injection and then get available rooms just calls",
    "start": "1247280",
    "end": "1255120"
  },
  {
    "text": "into that service contract get available room so whatever logic was in there is now uh being exposed over a grpc",
    "start": "1255120",
    "end": "1263440"
  },
  {
    "text": "interface so that works really nicely and actually",
    "start": "1263440",
    "end": "1269200"
  },
  {
    "text": "i make a tool which i'll mention briefly later on that automates as much of this process as",
    "start": "1269200",
    "end": "1275039"
  },
  {
    "text": "possible and this is the pattern that it uses to migrate net 4 wcf code",
    "start": "1275039",
    "end": "1281039"
  },
  {
    "text": "into a net core 3.1 grpc application",
    "start": "1281039",
    "end": "1285919"
  },
  {
    "text": "so grpc has various modes and wcf has various different bindings and types of",
    "start": "1286720",
    "end": "1294480"
  },
  {
    "start": "1287000",
    "end": "1425000"
  },
  {
    "text": "service that it supports and so i want to talk about those briefly",
    "start": "1294480",
    "end": "1299679"
  },
  {
    "text": "wcf the the most straightforward mode and the mode that we've just been looking at",
    "start": "1299679",
    "end": "1305520"
  },
  {
    "text": "with that hotel service is just simple request response the client sends a request the server sends a response and that's",
    "start": "1305520",
    "end": "1312320"
  },
  {
    "text": "very straightforward and that maps perfectly to grpc's request response",
    "start": "1312320",
    "end": "1319120"
  },
  {
    "text": "model and makes it very very easy to copy things over",
    "start": "1319120",
    "end": "1325440"
  },
  {
    "text": "grpc also provides server streaming where the call from the client to the",
    "start": "1325440",
    "end": "1331679"
  },
  {
    "text": "server opens a persistent stream and then objects are sent one at a time over that stream",
    "start": "1331679",
    "end": "1339760"
  },
  {
    "text": "either until there are no more objects to send or until the client closes the stream again",
    "start": "1339760",
    "end": "1345760"
  },
  {
    "text": "and wcf could do something like this in certain bindings in net tcp and i",
    "start": "1345760",
    "end": "1352640"
  },
  {
    "text": "think a couple of other bindings if you returned an i innumerable from your wcf service it would actually send",
    "start": "1352640",
    "end": "1360240"
  },
  {
    "text": "the objects over the wire as they became available and so you could get this server streaming kind of",
    "start": "1360240",
    "end": "1366159"
  },
  {
    "text": "approach and so for wcf methods that return",
    "start": "1366159",
    "end": "1371280"
  },
  {
    "text": "are innumerable of something you can map that very nicely to a grpc",
    "start": "1371280",
    "end": "1377760"
  },
  {
    "text": "streaming service which in c looks like the code on the right",
    "start": "1377760",
    "end": "1384080"
  },
  {
    "text": "here where we get our response stream passed in and then we just enumerate through all the rooms",
    "start": "1384080",
    "end": "1390880"
  },
  {
    "text": "from our service contract and write those back to the response stream",
    "start": "1390880",
    "end": "1396640"
  },
  {
    "text": "and this gives us uh if you were using net tcp binding and using that",
    "start": "1396640",
    "end": "1402000"
  },
  {
    "text": "feature of via enumerable this gives you the same functionality if you weren't using a binding that",
    "start": "1402000",
    "end": "1407200"
  },
  {
    "text": "supported it then in wcf this would actually build the entire result set on the server side and",
    "start": "1407200",
    "end": "1412640"
  },
  {
    "text": "then send the whole thing over in one go and so moving to a grpc streaming approach",
    "start": "1412640",
    "end": "1418240"
  },
  {
    "text": "gives you actually extra benefits over what you could do in wcf and then finally",
    "start": "1418240",
    "end": "1425919"
  },
  {
    "start": "1425000",
    "end": "1727000"
  },
  {
    "text": "grpc i'm going the wrong way and then finally grpc supports",
    "start": "1425919",
    "end": "1432720"
  },
  {
    "text": "bi-directional streaming where you have a stream open from the client to the server and a stream open from the server to the",
    "start": "1432720",
    "end": "1440320"
  },
  {
    "text": "client and objects can just be asynchronously arbitrarily sent in both directions at the same time",
    "start": "1440320",
    "end": "1449200"
  },
  {
    "text": "and this actually maps sort of to wcf uh full duplex",
    "start": "1449200",
    "end": "1456400"
  },
  {
    "text": "bindings wcf had this concept of session so a full duplex",
    "start": "1456400",
    "end": "1462960"
  },
  {
    "text": "binding in wcf would mean that the client had a stub which it could use to",
    "start": "1462960",
    "end": "1468960"
  },
  {
    "text": "call methods on the server and the server had a stub which it could use to call methods on the client",
    "start": "1468960",
    "end": "1475600"
  },
  {
    "text": "and this allowed for quite complicated services to be built um with asynchronous messaging between",
    "start": "1475600",
    "end": "1482640"
  },
  {
    "text": "them it also meant that when a instance of the service contract type was created on",
    "start": "1482640",
    "end": "1488960"
  },
  {
    "text": "the server it could be held in memory and it basically created a persistent",
    "start": "1488960",
    "end": "1494080"
  },
  {
    "text": "session that the client was permanently connected to so if you had any fields for example on",
    "start": "1494080",
    "end": "1500480"
  },
  {
    "text": "that class then those fields would keep their value for as long as that session stayed",
    "start": "1500480",
    "end": "1505679"
  },
  {
    "text": "open for as long as the duplex binding was held a duplex binding",
    "start": "1505679",
    "end": "1512080"
  },
  {
    "text": "in wcf looked something like this so we would have our calculator service",
    "start": "1512080",
    "end": "1519200"
  },
  {
    "text": "um this is microsoft's canonical example of almost anything ever as a calculator and",
    "start": "1519200",
    "end": "1525279"
  },
  {
    "text": "so they illustrated the duplex service with a calculator where the client just kept sending",
    "start": "1525279",
    "end": "1531200"
  },
  {
    "text": "new um values and the server kept calling back a message",
    "start": "1531200",
    "end": "1537279"
  },
  {
    "text": "on the client saying here's the current result here's the current result and so that was implemented",
    "start": "1537279",
    "end": "1542480"
  },
  {
    "text": "something like this where you would get the callback interface which was a proxy",
    "start": "1542480",
    "end": "1549600"
  },
  {
    "text": "obviously wrapped around the interface declaration and then you could use that",
    "start": "1549600",
    "end": "1555360"
  },
  {
    "text": "to call methods on the client which obviously was something about sending a message and then invoking",
    "start": "1555360",
    "end": "1561200"
  },
  {
    "text": "something on the client with that messages parameters and we can actually duplicate this",
    "start": "1561200",
    "end": "1568960"
  },
  {
    "text": "in grpc with i like to call them action streams so if we have a",
    "start": "1568960",
    "end": "1575520"
  },
  {
    "text": "bidirectional streaming service in grpc and we have a stream of actions from the",
    "start": "1575520",
    "end": "1580880"
  },
  {
    "text": "client to the server and a stream of callbacks from the server to the client and the each of these",
    "start": "1580880",
    "end": "1589120"
  },
  {
    "text": "message types has a one-off field and that one of is set to more message",
    "start": "1589120",
    "end": "1595760"
  },
  {
    "text": "type so in this instance we have a clear action and an add to action and so on and the callback has a result",
    "start": "1595760",
    "end": "1602240"
  },
  {
    "text": "callback and uh an equation callback and so rather than looking like it's calling a method on",
    "start": "1602240",
    "end": "1608799"
  },
  {
    "text": "the server and the method on the client we send different messages between the",
    "start": "1608799",
    "end": "1616720"
  },
  {
    "text": "server and the client and then respond to those accordingly",
    "start": "1616720",
    "end": "1622080"
  },
  {
    "text": "which looks something like this in the implementation so this is our we have a start method",
    "start": "1622080",
    "end": "1629600"
  },
  {
    "text": "there opens the streams and then uh runs them effectively",
    "start": "1629600",
    "end": "1636400"
  },
  {
    "text": "it reads all the incoming messages off the request stream does a switch",
    "start": "1636400",
    "end": "1642640"
  },
  {
    "text": "on the action case which is how the c sharp code gen in grpc and protobuf says this is the",
    "start": "1642640",
    "end": "1649679"
  },
  {
    "text": "one-off field that was set and invokes the relevant method",
    "start": "1649679",
    "end": "1655120"
  },
  {
    "text": "based on which one of those values was set this is a fairly simple implementation you can get",
    "start": "1655120",
    "end": "1660880"
  },
  {
    "text": "yourself tied in knots with tasks and threading and so forth",
    "start": "1660880",
    "end": "1666480"
  },
  {
    "text": "but again this does provide a way to map from uh a wcf duplex service to",
    "start": "1666480",
    "end": "1674000"
  },
  {
    "text": "a grpc service and achieve the same end result we can even",
    "start": "1674000",
    "end": "1680640"
  },
  {
    "text": "map wrap our response stream with a class that",
    "start": "1680640",
    "end": "1687360"
  },
  {
    "text": "implements the old callback interface which would look something like this so here we have our",
    "start": "1687360",
    "end": "1692399"
  },
  {
    "text": "calculator callback which is what the old wcf code would have been",
    "start": "1692399",
    "end": "1697919"
  },
  {
    "text": "looking at to uh talk back to the client and we can just wrap the response stream and implement",
    "start": "1697919",
    "end": "1704799"
  },
  {
    "text": "the same methods and just write these callback messages onto the response stream and do",
    "start": "1704799",
    "end": "1711360"
  },
  {
    "text": "something similar on the client side to invoke those methods and again",
    "start": "1711360",
    "end": "1716720"
  },
  {
    "text": "my tooling for doing this will automatically generate most of the code for doing that but it is possible to",
    "start": "1716720",
    "end": "1722880"
  },
  {
    "text": "implement it manually as well so that basically covers most of the",
    "start": "1722880",
    "end": "1729600"
  },
  {
    "start": "1727000",
    "end": "1820000"
  },
  {
    "text": "functionality there are a couple more points i want to mention there is the",
    "start": "1729600",
    "end": "1734960"
  },
  {
    "text": "security aspect so with wcf because it was dot net only because it",
    "start": "1734960",
    "end": "1740159"
  },
  {
    "text": "was windows only it meant you could use basic authentication uh you could use ntlm or",
    "start": "1740159",
    "end": "1746000"
  },
  {
    "text": "kerberos or windows authentication also wcf didn't natively support",
    "start": "1746000",
    "end": "1751600"
  },
  {
    "text": "encryption but there were the ws encryption standards and you could run it over an https",
    "start": "1751600",
    "end": "1757039"
  },
  {
    "text": "connection if you were doing soap over http grpc because it uses http 2",
    "start": "1757039",
    "end": "1764000"
  },
  {
    "text": "kerberos windows authentication is actually impossible you just can't do it http 2 does not support it and so with grpc",
    "start": "1764000",
    "end": "1772320"
  },
  {
    "text": "the standard authentication method is bearer tokens you can combine that with adfs you can",
    "start": "1772320",
    "end": "1779360"
  },
  {
    "text": "get tokens from your active directory federation server and then you can use those as bearer",
    "start": "1779360",
    "end": "1785520"
  },
  {
    "text": "tokens in your grpc application and then you can use the asp.net core",
    "start": "1785520",
    "end": "1792159"
  },
  {
    "text": "built-in adfs authentication library to authenticate those calls on the",
    "start": "1792159",
    "end": "1798640"
  },
  {
    "text": "server and obviously grpc also provides mutual tls where the client and server",
    "start": "1798640",
    "end": "1804880"
  },
  {
    "text": "both provide a certificate and all communication is encrypted using that certificate and it also means that",
    "start": "1804880",
    "end": "1810399"
  },
  {
    "text": "both sides can uh verify that the other party is the correct thing they are",
    "start": "1810399",
    "end": "1816960"
  },
  {
    "text": "expecting to be connected to the final thing that i think is very",
    "start": "1816960",
    "end": "1822399"
  },
  {
    "text": "interesting for all these.net shops who are finding their way in this new world of grpc",
    "start": "1822399",
    "end": "1828960"
  },
  {
    "text": "is if they've been running on.net they are going to be used to a world of window",
    "start": "1828960",
    "end": "1834720"
  },
  {
    "text": "servers just the net framework iis web farms and that sort of thing and i think there's a",
    "start": "1834720",
    "end": "1840720"
  },
  {
    "text": "lot of companies out there who are going to be looking at",
    "start": "1840720",
    "end": "1845760"
  },
  {
    "text": "things like docker and kubernetes and service meshes whether that's on premise or in",
    "start": "1845760",
    "end": "1851200"
  },
  {
    "text": "different cloud environments and i think there's going to be some good opportunities for people to",
    "start": "1851200",
    "end": "1857600"
  },
  {
    "text": "work with companies like that on a consulting or training basis to provide an introduction to the",
    "start": "1857600",
    "end": "1866000"
  },
  {
    "text": "new ways of hosting applications now that dot net core runs nicely on uh",
    "start": "1866000",
    "end": "1872480"
  },
  {
    "text": "linux platforms as well as windows if you'd like more detail on anything",
    "start": "1872480",
    "end": "1878799"
  },
  {
    "text": "i've talked about in this presentation i have co-authored a book called grpc for wcf developers",
    "start": "1878799",
    "end": "1886720"
  },
  {
    "text": "which is published for free on microsoft's website in their architecture and patterns area",
    "start": "1886720",
    "end": "1893679"
  },
  {
    "text": "of their documentation website which you can find at that url",
    "start": "1893679",
    "end": "1898720"
  },
  {
    "text": "i have spent much of the last 18 months working on visual recode which is a tool that will automatically",
    "start": "1898720",
    "end": "1905679"
  },
  {
    "text": "take your wcf code and using some of the patterns that i've talked about here and some additional",
    "start": "1905679",
    "end": "1912480"
  },
  {
    "text": "tricks automatically migrate it to asp.net core grpc it is a commercial project",
    "start": "1912480",
    "end": "1920320"
  },
  {
    "text": "because it was too big to do as open source um and it's properly supported with",
    "start": "1920320",
    "end": "1927120"
  },
  {
    "text": "support contracts and uh consulting and so forth but that is available if anybody is interested in",
    "start": "1927120",
    "end": "1933760"
  },
  {
    "text": "that at the moment it does asp.net wcf to grpc",
    "start": "1933760",
    "end": "1938960"
  },
  {
    "text": "it will be doing some additional types of conversion as well",
    "start": "1938960",
    "end": "1944159"
  },
  {
    "text": "but that is available at visualrecode.com i hope that uh was helpful i hope it was",
    "start": "1944159",
    "end": "1952159"
  },
  {
    "text": "informative um i hope you enjoyed it and i hope that if you are using wcf this",
    "start": "1952159",
    "end": "1958159"
  },
  {
    "text": "has made you see that grpc can fulfill that need for you and if you're already using grpc",
    "start": "1958159",
    "end": "1964880"
  },
  {
    "text": "then maybe reach out to some wcf uh teams if you know any and try and",
    "start": "1964880",
    "end": "1971039"
  },
  {
    "text": "evangelize grpc to them and show them everything that it can do for them thank you very much and enjoy the rest",
    "start": "1971039",
    "end": "1976799"
  },
  {
    "text": "of the conference",
    "start": "1976799",
    "end": "1980559"
  }
]