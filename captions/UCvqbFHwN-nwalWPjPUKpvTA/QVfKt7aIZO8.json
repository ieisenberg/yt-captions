[
  {
    "text": "hello everyone welcome back again I think I have the honor of doing the same talk twice in the same day so that's",
    "start": "160",
    "end": "5879"
  },
  {
    "text": "something new for me um again let me if you missed it earlier um essentially",
    "start": "5879",
    "end": "11840"
  },
  {
    "text": "what happened was we started a little early so you know I'm doing a rerun again I'm going to introduce and start from the beginning my name is son",
    "start": "11840",
    "end": "17720"
  },
  {
    "text": "maheswar I work in a startup called firion and we are in the web assembly space and I've been working in the cloud",
    "start": "17720",
    "end": "24960"
  },
  {
    "text": "and Tech for a while now I used to be with AWS before and essentially I'm super happy to be here because a even",
    "start": "24960",
    "end": "31800"
  },
  {
    "text": "though I'm from I'm I live in the Netherlands I'm originally from bangal so it's always nice to come back to",
    "start": "31800",
    "end": "37719"
  },
  {
    "text": "Bangalore and also I'm glad we're talking about sustainability in Tech right because Tech is at the heart of",
    "start": "37719",
    "end": "44760"
  },
  {
    "text": "everything that we do latest estimates say that the software industry has the same amount or similar amounts of carbon",
    "start": "44760",
    "end": "51920"
  },
  {
    "text": "emissions as that of the airline industry which really is alarming and all of us as decision makers in Tech",
    "start": "51920",
    "end": "58600"
  },
  {
    "text": "it's time we can do something something about sustainability so I have to start off",
    "start": "58600",
    "end": "63800"
  },
  {
    "text": "with this formula which is defined by the green software Foundation they",
    "start": "63800",
    "end": "68840"
  },
  {
    "text": "Define software carbon intensity of a workload in the cloud as C per R which",
    "start": "68840",
    "end": "75400"
  },
  {
    "text": "is the carbon per rate again this is a rate so it means per user or per API or",
    "start": "75400",
    "end": "82520"
  },
  {
    "text": "per machine learning run or whatever and the C can be expanded",
    "start": "82520",
    "end": "87960"
  },
  {
    "text": "to O+ m which where o is operational emissions which is what is the carbon",
    "start": "87960",
    "end": "95280"
  },
  {
    "text": "emission of your software that is running on a piece of Hardware in the cloud and M is the embodied emissions",
    "start": "95280",
    "end": "102520"
  },
  {
    "text": "which means for that Hardware to exist and to run multiple pieces of software over a long period of",
    "start": "102520",
    "end": "108399"
  },
  {
    "text": "time there are carbon emissions and your software is a fraction of that so those",
    "start": "108399",
    "end": "113880"
  },
  {
    "text": "two things combined per rate is the software carbon intensity and essentially I want you I",
    "start": "113880",
    "end": "121880"
  },
  {
    "text": "want us today to take a look at everything in terms of how serverless web assembly can make your software more",
    "start": "121880",
    "end": "129280"
  },
  {
    "text": "energy efficient where you use less electricity to perform the same function",
    "start": "129280",
    "end": "134680"
  },
  {
    "text": "or make it more Hardware efficient where you're using fewer physical resources to",
    "start": "134680",
    "end": "140120"
  },
  {
    "text": "perform the same function so these are the two lenses that I want us to think about",
    "start": "140120",
    "end": "145640"
  },
  {
    "text": "today so let's dive into it and actually let's talk about web assembly itself",
    "start": "145640",
    "end": "150720"
  },
  {
    "text": "anyone here uses web assembly or has tried web assembly few of you all awesome so just to tell you what it is",
    "start": "150720",
    "end": "158519"
  },
  {
    "text": "essentially it's it's another bite code format right that's the boring answer web assembly is just another bite code",
    "start": "158519",
    "end": "165040"
  },
  {
    "text": "format it was designed as a portable compilation Target which means you can",
    "start": "165040",
    "end": "170200"
  },
  {
    "text": "write your code once in any language like python go rust JavaScript whatever",
    "start": "170200",
    "end": "175920"
  },
  {
    "text": "compile it to a web assembly format and run that code any anywhere as long as",
    "start": "175920",
    "end": "181280"
  },
  {
    "text": "that anywhere has a web assembly runtime now this compile once Run",
    "start": "181280",
    "end": "187760"
  },
  {
    "text": "Anywhere is possible because of run times which are meant to you know be very",
    "start": "187760",
    "end": "193360"
  },
  {
    "text": "portable similarly if I say the word wasum it's basically just shot for web assembly",
    "start": "193360",
    "end": "199599"
  },
  {
    "text": "they're one and the same thing this was invented and came about for the browser",
    "start": "199599",
    "end": "204920"
  },
  {
    "text": "and hence the name web assembly but sometime in around 20 1819",
    "start": "204920",
    "end": "210560"
  },
  {
    "text": "people thought hey web assembly is fast it's portable it's secure all of these things might make it good to run in a",
    "start": "210560",
    "end": "218680"
  },
  {
    "text": "server site as well right so originally it was only for the browser but now you",
    "start": "218680",
    "end": "224200"
  },
  {
    "text": "can also run it on the server site and it was made possible by something called",
    "start": "224200",
    "end": "229959"
  },
  {
    "text": "Wy which was invented in 2019 which is web assembly systems interface now for",
    "start": "229959",
    "end": "236040"
  },
  {
    "text": "anything to run on a server you need the things like um system clocks you need",
    "start": "236040",
    "end": "242879"
  },
  {
    "text": "access to files you need random number generators you need all of this for anything to be a server right and web",
    "start": "242879",
    "end": "249360"
  },
  {
    "text": "assembly didn't have that until Wy was invented so this is a very new piece of technology that's actually available",
    "start": "249360",
    "end": "256280"
  },
  {
    "text": "server side and the good thing is it works independent of a browser so all of",
    "start": "256280",
    "end": "261680"
  },
  {
    "text": "the security sandboxing model of web assembly in the browser is available for",
    "start": "261680",
    "end": "267160"
  },
  {
    "text": "us now on the server side as well and it also includes this sandboxing for things",
    "start": "267160",
    "end": "273120"
  },
  {
    "text": "like input and output and just to visualize how it works you have your code write it in any",
    "start": "273120",
    "end": "279120"
  },
  {
    "text": "language you know typescript JavaScript python go rust whatever you compile it",
    "start": "279120",
    "end": "284440"
  },
  {
    "text": "to a wasm format and this can run in any place that has a wasum runtime so it's",
    "start": "284440",
    "end": "291440"
  },
  {
    "text": "independent of architecture so Intel Mac armm it's independent of operating system so Linux Windows Mac whatever you",
    "start": "291440",
    "end": "299039"
  },
  {
    "text": "can run it on on kubernetes on your Raspberry Pi in the cloud you can run it in any place as long as there is a wasum",
    "start": "299039",
    "end": "305840"
  },
  {
    "text": "runtime now the good thing about web assembly is that all of these things that I",
    "start": "305840",
    "end": "312800"
  },
  {
    "text": "mentioned to you and we are going to look at it through the lens of this open source framework called spin it's",
    "start": "312800",
    "end": "319440"
  },
  {
    "text": "completely open source check it out on GitHub you know about four 4 and a half thousand stars right now uh supports 15",
    "start": "319440",
    "end": "325479"
  },
  {
    "text": "plus languages it's a framework to compose serverless web assembly app right and some of the benchmarks that we",
    "start": "325479",
    "end": "331720"
  },
  {
    "text": "have done today in comparing web assembly serverless versus other things that exist in the market right now are",
    "start": "331720",
    "end": "338080"
  },
  {
    "text": "done using spin so there are four things that make web assembly pretty cool to run on the",
    "start": "338080",
    "end": "344360"
  },
  {
    "text": "server side and again take a look at things in terms of being energy efficient and Hardware efficient when",
    "start": "344360",
    "end": "351039"
  },
  {
    "text": "you're looking at scale a metric like binary size actually makes a big difference right think of",
    "start": "351039",
    "end": "357280"
  },
  {
    "text": "all the deploys that we do on a day-to-day basis think of the number of deployments and builds that we run just",
    "start": "357280",
    "end": "363600"
  },
  {
    "text": "for our testing on a day-to-day basis just to give you an example a simple rust hello world compiled natively is",
    "start": "363600",
    "end": "370840"
  },
  {
    "text": "about 2 MB and if you do an ahead of time compilation where you are optimizing it for the architecture and",
    "start": "370840",
    "end": "378440"
  },
  {
    "text": "the OS you can bring that down to about 300 KB similarly a spin app a HTTP API which",
    "start": "378440",
    "end": "385080"
  },
  {
    "text": "I will show a live demo of you can do a just in time compilation of",
    "start": "385080",
    "end": "390160"
  },
  {
    "text": "where the size is about 2.3 MB and you can optimize it ahead of time for about",
    "start": "390160",
    "end": "395919"
  },
  {
    "text": "1.1 MB and again these are really small binary sizes if you take a look at any",
    "start": "395919",
    "end": "401759"
  },
  {
    "text": "comparison with you know uh apps that we run right now so I can just show you a",
    "start": "401759",
    "end": "406800"
  },
  {
    "text": "small piece of code perhaps so this is the CLI if I",
    "start": "406800",
    "end": "412440"
  },
  {
    "text": "can bring it yeah there we go all right so I've installed spin of",
    "start": "412440",
    "end": "418840"
  },
  {
    "text": "course I'm just going to do a simple spin new maybe I'll in um I'm going to choose rust because rust is lowlevel and",
    "start": "418840",
    "end": "426360"
  },
  {
    "text": "I'm going to call it Cube day India going keep this is simple hello world application nothing extremely fancy so I",
    "start": "426360",
    "end": "434120"
  },
  {
    "text": "will do Cube day and I will open this in my",
    "start": "434120",
    "end": "440280"
  },
  {
    "text": "visual studio code right here all right",
    "start": "440280",
    "end": "447080"
  },
  {
    "text": "so anyone here familiar with the concept of serverless in general or has used",
    "start": "447080",
    "end": "452120"
  },
  {
    "text": "either Lambda or Azure functions few of youall I'm sure yes perfect I'd be surprised if people weren't oh oh did I",
    "start": "452120",
    "end": "460360"
  },
  {
    "text": "open a Swift oh I'm so sorry I'm just going to do this again I want to show it to you in Rust my bad folks I'm just",
    "start": "460360",
    "end": "466440"
  },
  {
    "text": "going to a spin new again it's it's hard to look at the",
    "start": "466440",
    "end": "471599"
  },
  {
    "text": "screen there while writing code okay there we go that's rust finally",
    "start": "471599",
    "end": "480720"
  },
  {
    "text": "okay I'm going to call it Cube day this time all right and I'll",
    "start": "480720",
    "end": "488520"
  },
  {
    "text": "say and I'm going to open it in my browser sorry in my vs code yeah so you",
    "start": "488800",
    "end": "495599"
  },
  {
    "text": "don't have to be familiar with rust and things like that it's fairly simple this code is straightforward um if you're",
    "start": "495599",
    "end": "501879"
  },
  {
    "text": "familiar with the concept of servess it's a simple request in request out so there's a request that's coming in you",
    "start": "501879",
    "end": "507800"
  },
  {
    "text": "can see it here and there's a request that's going out I'll just change this to cube day for now I don't if that",
    "start": "507800",
    "end": "514599"
  },
  {
    "text": "spelling is correct yeah it is correct I think my eyesight's going bad and I might need",
    "start": "514599",
    "end": "520000"
  },
  {
    "text": "glasses okay I'm just going to do a build where it actually just builds this code and I can run it locally and we'll",
    "start": "520000",
    "end": "527160"
  },
  {
    "text": "actually see the binary size of it just so that you know you know I'm not just putting a metric out there there we go",
    "start": "527160",
    "end": "533880"
  },
  {
    "text": "it's just building the entire app and so this is using spin the framework that I was speaking speaking to you",
    "start": "533880",
    "end": "541680"
  },
  {
    "text": "about and the build is done now and I'm just going to do something called spin up which basically runs this app on a",
    "start": "541720",
    "end": "549839"
  },
  {
    "text": "local host right uh and I can just do a simple curl to the Local Host oh",
    "start": "549839",
    "end": "558079"
  },
  {
    "text": "again there we go yeah you can see Hello Cube day right uh so it's actually",
    "start": "561640",
    "end": "567800"
  },
  {
    "text": "running right now now and if I go deeper into the directory if I",
    "start": "567800",
    "end": "576320"
  },
  {
    "text": "do an LS minus L you can actually see the wasm file it's this is in by so it's",
    "start": "576320",
    "end": "581360"
  },
  {
    "text": "about 2.3 MB right that's what I was speaking to you about the binary size of a HTTP serverless app is only 2.3 MB",
    "start": "581360",
    "end": "589720"
  },
  {
    "text": "when it's written in web assembly using spin so I'm going to go back",
    "start": "589720",
    "end": "595120"
  },
  {
    "text": "to this right here now typically when you're taking calls about metrics like",
    "start": "595120",
    "end": "601240"
  },
  {
    "text": "sustainability there are tradeoffs you have to do and the trade-off in this case is the startup time itself because",
    "start": "601240",
    "end": "608440"
  },
  {
    "text": "when you're actually building an something natively it's a little faster than when you're building it on uh when",
    "start": "608440",
    "end": "614760"
  },
  {
    "text": "you uh when the startup time in um uh Spin and web assembly so it's about 2.3x",
    "start": "614760",
    "end": "620920"
  },
  {
    "text": "slower than compiling it natively the other other Advantage is the portability where you can build this",
    "start": "620920",
    "end": "627519"
  },
  {
    "text": "once and run the same piece of code anywhere right the same 2.3 MB file that I showed you will be able to run across",
    "start": "627519",
    "end": "634600"
  },
  {
    "text": "platforms across os's and so much more and the fourth thing is security",
    "start": "634600",
    "end": "640639"
  },
  {
    "text": "because web assembly is security sandboxed by default right so nothing can access that file that I just showed",
    "start": "640639",
    "end": "647600"
  },
  {
    "text": "you so as a web assembly module it's completely Security sandboxed even if it",
    "start": "647600",
    "end": "653560"
  },
  {
    "text": "needs access to a file you have to explicitly give it access to a file if you have to make a outbound HTTP call",
    "start": "653560",
    "end": "659839"
  },
  {
    "text": "you have to give it access saying make this call right similarly for an inbound HTTP call as well again this provides a",
    "start": "659839",
    "end": "666720"
  },
  {
    "text": "greater deal of security too just to compare it with Docker",
    "start": "666720",
    "end": "672079"
  },
  {
    "text": "because I'm I'm guessing that's a piece of software most of us are familiar with on the left you see uh again spin web",
    "start": "672079",
    "end": "678680"
  },
  {
    "text": "assembly app in Python Simple app on the right you see a Docker file with flask",
    "start": "678680",
    "end": "684200"
  },
  {
    "text": "if this is the file size in Docker the same thing in spin looks kind of like",
    "start": "684200",
    "end": "689399"
  },
  {
    "text": "this right and again in our benchmarks we actually saw a difference of 23 MB to",
    "start": "689399",
    "end": "694519"
  },
  {
    "text": "550 KB again look at it in the terms of being more energy efficient imagine",
    "start": "694519",
    "end": "701279"
  },
  {
    "text": "making builds and you know running production workloads at the scale using web assembly where the size of your",
    "start": "701279",
    "end": "707600"
  },
  {
    "text": "binary itself is reduced so much thereby reducing your carbon emissions so we spoke about web assembly",
    "start": "707600",
    "end": "715240"
  },
  {
    "text": "let's talk a little bit about the serverless aspect I'm assuming most people here are",
    "start": "715240",
    "end": "720639"
  },
  {
    "text": "familiar with the concept of seress U I'm old enough to remember using Data Centers back in the day you know you had",
    "start": "720639",
    "end": "727279"
  },
  {
    "text": "this machine physical machine in your office that people guarded very secretly",
    "start": "727279",
    "end": "732959"
  },
  {
    "text": "uh and you know you had to keep like an AC running so that it's cool but we've gone from that to things like ec2 and",
    "start": "732959",
    "end": "738959"
  },
  {
    "text": "virtual machines two containers kubernetes Docker to the concept of",
    "start": "738959",
    "end": "744199"
  },
  {
    "text": "serverless and we really see the next evolution of serverless being in the we assembly space because of these regions",
    "start": "744199",
    "end": "751480"
  },
  {
    "text": "right the reason that I just spoke about to understand the concept of servess means you have to understand",
    "start": "751480",
    "end": "759160"
  },
  {
    "text": "some of these Concepts behind how the system is actually being used when I talk about servess I could either say",
    "start": "759160",
    "end": "765600"
  },
  {
    "text": "it's a type of application which is shortlived it's completely event driven when an event happens a piece of code",
    "start": "765600",
    "end": "772199"
  },
  {
    "text": "runs in the cloud gives you a response back and that's it you can also think",
    "start": "772199",
    "end": "777560"
  },
  {
    "text": "about it like a development model where you as a developer you don't have to write any server code you don't have to",
    "start": "777560",
    "end": "784760"
  },
  {
    "text": "write server demons or maintain that server all you have to do is focus on your business logic and a lot of people",
    "start": "784760",
    "end": "792320"
  },
  {
    "text": "refer to this as fast or functions as a service it's become popular off late",
    "start": "792320",
    "end": "798000"
  },
  {
    "text": "because you're focusing only on your business Logic the scaling is faster and you're utilizing your Hardware better",
    "start": "798000",
    "end": "805320"
  },
  {
    "text": "right that's the key and because of this you're more green and you save money so",
    "start": "805320",
    "end": "810880"
  },
  {
    "text": "how do you utilize Hardware better to understand this you need to understand the concept of multi-tenancy right and",
    "start": "810880",
    "end": "818480"
  },
  {
    "text": "this I think is the key to understanding why serverless is actually great because with multi- tency you're saying you have",
    "start": "818480",
    "end": "825279"
  },
  {
    "text": "a piece of Hardware in the cloud you want to run as many applications on that",
    "start": "825279",
    "end": "830519"
  },
  {
    "text": "as possible to extract value of that piece of Hardware imagine you had this",
    "start": "830519",
    "end": "836560"
  },
  {
    "text": "huge server running somewhere but just one small small piece of code that ran there all day you're not extracting",
    "start": "836560",
    "end": "842160"
  },
  {
    "text": "enough value from that piece of Hardware right and you're not being Hardware efficient with the concept of",
    "start": "842160",
    "end": "848680"
  },
  {
    "text": "multi-tenancy right you're running many tenants in that same piece of Hardware each of those tenants are independent of",
    "start": "848680",
    "end": "856160"
  },
  {
    "text": "each other so their workloads their usage patterns they are all independent of each other and the more independent",
    "start": "856160",
    "end": "863199"
  },
  {
    "text": "they are of each other the better you're utilizing that hardware and overall over",
    "start": "863199",
    "end": "869000"
  },
  {
    "text": "a long period of time the value of that piece of Hardware has actually your extracted",
    "start": "869000",
    "end": "874560"
  },
  {
    "text": "value in fact we ran some benchmarks right so on your left so your left on my",
    "start": "874560",
    "end": "881160"
  },
  {
    "text": "right on on that side you will see uh there were two functions two serverless functions running in the cloud and the",
    "start": "881160",
    "end": "888120"
  },
  {
    "text": "idea is the gap between your Peak and the gap between the average should be as",
    "start": "888120",
    "end": "894839"
  },
  {
    "text": "low as possible because fundamentally as people designing for the cloud you don't",
    "start": "894839",
    "end": "899959"
  },
  {
    "text": "want to design for your Peaks right because that's when you get more expensive and you know your carbon",
    "start": "899959",
    "end": "905759"
  },
  {
    "text": "emissions are probably higher because you have idling machines so on the left you can see there's function a and",
    "start": "905759",
    "end": "912160"
  },
  {
    "text": "function B running your average is about 10 and your Peak is at about 17 so",
    "start": "912160",
    "end": "917199"
  },
  {
    "text": "that's a difference of seven but the minute we added on the right the minute we added two more functions so more",
    "start": "917199",
    "end": "923120"
  },
  {
    "text": "tenant to the same piece of Hardware the peak and the average of course increases",
    "start": "923120",
    "end": "928440"
  },
  {
    "text": "but but the gap between the two reduces right and that's really where The Sweet Spot is reducing the peak to average Gap",
    "start": "928440",
    "end": "936360"
  },
  {
    "text": "to extract value of a multi-tenant system and this multi-tenancy is",
    "start": "936360",
    "end": "943600"
  },
  {
    "text": "actually increasing with each wave of cloud computing in the early days of your data center you had just the one",
    "start": "943600",
    "end": "949360"
  },
  {
    "text": "tenant on one piece of Hardware right but with things like ec2 and virtual machines you could run few apps on one",
    "start": "949360",
    "end": "957319"
  },
  {
    "text": "piece of hardware now with things like wasum run times you can actually make very very dense",
    "start": "957319",
    "end": "964199"
  },
  {
    "text": "workloads where you have multiple tenants running at the same time only because of how lightweight these",
    "start": "964199",
    "end": "971040"
  },
  {
    "text": "programs are you saw the binary size of only couple of MB so you can actually",
    "start": "971040",
    "end": "976440"
  },
  {
    "text": "pack these runtimes and pack these applications in the same piece of Hardware using web assembly right so the",
    "start": "976440",
    "end": "983319"
  },
  {
    "text": "idea of serverless web assembly suddenly becomes so much more powerful because you're saving money and you're becoming",
    "start": "983319",
    "end": "989279"
  },
  {
    "text": "more green now I used to work in AWS and",
    "start": "989279",
    "end": "994639"
  },
  {
    "text": "there's a very interesting paper that you should read if you're interested in seres I've linked it at the bottom AWS",
    "start": "994639",
    "end": "1001319"
  },
  {
    "text": "Lambda is based on the firecracker VM it's a micro VM and that team wrote a",
    "start": "1001319",
    "end": "1006360"
  },
  {
    "text": "paper where they decided the six ideal characteristics of one serverless unit",
    "start": "1006360",
    "end": "1012199"
  },
  {
    "text": "right so if we were to have the ideal serverless unit what are the characteristics the first one they said",
    "start": "1012199",
    "end": "1018120"
  },
  {
    "text": "was is is olation like I said running many tenants on one piece where they don't interfere with each other CU we",
    "start": "1018120",
    "end": "1024360"
  },
  {
    "text": "wouldn't want that the second is to have density right",
    "start": "1024360",
    "end": "1029480"
  },
  {
    "text": "where you can run thousands of apps or thousands of functions on the same",
    "start": "1029480",
    "end": "1034558"
  },
  {
    "text": "tenant with minimal waste right extract value from that Hardware the third of",
    "start": "1034559",
    "end": "1040280"
  },
  {
    "text": "course is performance when you can bring NE native performance on the cloud in a",
    "start": "1040280",
    "end": "1045720"
  },
  {
    "text": "multi-tenant system nothing like it the fourth they said was the ability to fast",
    "start": "1045720",
    "end": "1052000"
  },
  {
    "text": "switch right when an event triggers that application it has to start do the thing",
    "start": "1052000",
    "end": "1057679"
  },
  {
    "text": "it's supposed to and then shut down yeah so the idea of a cold start",
    "start": "1057679",
    "end": "1063039"
  },
  {
    "text": "time and lastly um soft allocation which means you can overcommit resources like",
    "start": "1063039",
    "end": "1069880"
  },
  {
    "text": "CPU memory disk usage and so on and of course compatibility where at the end of",
    "start": "1069880",
    "end": "1075559"
  },
  {
    "text": "the day we all want to use our libraries and some other pieces of code which are compatible with what you're running in",
    "start": "1075559",
    "end": "1082159"
  },
  {
    "text": "the cloud so we actually did a benchmark between a microv VM like firecracker and",
    "start": "1082159",
    "end": "1089480"
  },
  {
    "text": "web assembly using the same thing so in terms of isolation both provide good isolation because microv VMS like",
    "start": "1089480",
    "end": "1096320"
  },
  {
    "text": "firecracker are sandboxed completely and web assembly by default and by Design as",
    "start": "1096320",
    "end": "1101840"
  },
  {
    "text": "a technology is sandboxed already there are a couple of places where web assembly really shines Right",
    "start": "1101840",
    "end": "1107960"
  },
  {
    "text": "In terms of overhead to run thousands per node with the micr VM you had to run",
    "start": "1107960",
    "end": "1113400"
  },
  {
    "text": "48 CES at 382 GB and 3,360 GB of RAM on a dis but the same thing on web assembly",
    "start": "1113400",
    "end": "1120960"
  },
  {
    "text": "because it's so lightweight you are able to run on 8 cores with 32 GB RAM and 100",
    "start": "1120960",
    "end": "1126600"
  },
  {
    "text": "GB disc and if you're wondering why what makes it so lightweight it's the technology itself right if you look at",
    "start": "1126600",
    "end": "1133440"
  },
  {
    "text": "the inerts of how web assembly is designed it's a reduced instruction set",
    "start": "1133440",
    "end": "1138480"
  },
  {
    "text": "so it's smaller already and it also uses a stack based BM so again it's a little",
    "start": "1138480",
    "end": "1143760"
  },
  {
    "text": "more efficient in how it's built and eventually compile so that's that's a different talk but you know that's what",
    "start": "1143760",
    "end": "1149799"
  },
  {
    "text": "makes it so lightweight in terms of performance again microv VMS are NE native same with",
    "start": "1149799",
    "end": "1155960"
  },
  {
    "text": "web assembly so very similar performance in terms of the ability to fast switch",
    "start": "1155960",
    "end": "1161000"
  },
  {
    "text": "or to cold start again web assembly really shines because things like Lambda",
    "start": "1161000",
    "end": "1166520"
  },
  {
    "text": "and Azure functions do have cold start times and how companies actually you",
    "start": "1166520",
    "end": "1171720"
  },
  {
    "text": "know change that is by keeping the instances kind of warm which is not really serverless because you're not",
    "start": "1171720",
    "end": "1177760"
  },
  {
    "text": "scaling down to zero so your coldstar times are typically about 125 Ms whereas",
    "start": "1177760",
    "end": "1183720"
  },
  {
    "text": "with web asembly we were able to see less than 1 millisecond uh coal start time so the ability to fast switch is",
    "start": "1183720",
    "end": "1190760"
  },
  {
    "text": "very good the thing is web assembly is untested in large production so over the",
    "start": "1190760",
    "end": "1196960"
  },
  {
    "text": "next couple of years we will see what performance will be at scale whereas of course micr VMS are running in",
    "start": "1196960",
    "end": "1203000"
  },
  {
    "text": "production with over subscription ratios as high as 10x also will probably get",
    "start": "1203000",
    "end": "1208240"
  },
  {
    "text": "better and in terms of compat compatibility in microv VMS you have Linux plus KVM only whereas with web",
    "start": "1208240",
    "end": "1215679"
  },
  {
    "text": "assembly it's platform agnostic OS agnostic architecture agnostic supports",
    "start": "1215679",
    "end": "1220760"
  },
  {
    "text": "a bunch of languages as long as they compatible with wasi which is what I had mentioned earlier as well so as you can",
    "start": "1220760",
    "end": "1227600"
  },
  {
    "text": "see there is very good performance and uh it really seems like the next evolution of",
    "start": "1227600",
    "end": "1233799"
  },
  {
    "text": "serverless computing which again becomes more energy efficient and Hardware efficient when you use",
    "start": "1233799",
    "end": "1240039"
  },
  {
    "text": "it we have a very quick demo and this is a pre-recorded demo of how we were able to run 10K apps or make 10K calls to",
    "start": "1240039",
    "end": "1248240"
  },
  {
    "text": "about 500 apps in 10 seconds using web assembly right so this was actually run locally so I've pre-recorded the demo uh",
    "start": "1248240",
    "end": "1255600"
  },
  {
    "text": "this is the architecture of what you're going to see we're using Nomad basically as our orchestrator here and there are",
    "start": "1255600",
    "end": "1261520"
  },
  {
    "text": "500 spin apps and about 10K calls to these spin apps right and essentially",
    "start": "1261520",
    "end": "1267159"
  },
  {
    "text": "the same app that I showed you earlier the Hello World app those are the apps that are running here this is our Nomad",
    "start": "1267159",
    "end": "1273880"
  },
  {
    "text": "dashboard you can actually is it check if it's playing playing now okay as you",
    "start": "1273880",
    "end": "1279080"
  },
  {
    "text": "can see we have uh traic we have bindle Journal we have our own multi-tenant",
    "start": "1279080",
    "end": "1284240"
  },
  {
    "text": "version of spin called spin multi-tenant and we have our own garbage collection as well so what you're going to see in",
    "start": "1284240",
    "end": "1291640"
  },
  {
    "text": "this demo is there are there's a text file with 500 URLs of these apps and",
    "start": "1291640",
    "end": "1297320"
  },
  {
    "text": "we're going to you know do a load test of 10K calls and we'll see the memory and disk usage at the same time",
    "start": "1297320",
    "end": "1306880"
  },
  {
    "text": "so yep so we're going to start with the deployment of 500 apps right now the key",
    "start": "1307480",
    "end": "1313679"
  },
  {
    "text": "thing to actually check is the memory usage that you will see right here this is running on my colleague Kate's",
    "start": "1313679",
    "end": "1319960"
  },
  {
    "text": "MacBook Pro and these are all the apps we have about 500 simple hello world rust apps that are running so as you can",
    "start": "1319960",
    "end": "1327080"
  },
  {
    "text": "see there CPU on the left and memory on the right right now it's just about 20%",
    "start": "1327080",
    "end": "1332840"
  },
  {
    "text": "CPU and about 50% memory standard computer that's running on a local",
    "start": "1332840",
    "end": "1337960"
  },
  {
    "text": "MacBook and we have a text file here with the 500 app URLs listed all right",
    "start": "1337960",
    "end": "1345480"
  },
  {
    "text": "so you can take a look these are the top five um we're just showing you what's in",
    "start": "1345480",
    "end": "1351400"
  },
  {
    "text": "the text file essentially and yeah this is the if you do a curl to any of these files you get the simple hello world and",
    "start": "1351400",
    "end": "1358240"
  },
  {
    "text": "that's it now we built our own load testing tool cuz you know Engineers like to engineer and you can actually see in",
    "start": "1358240",
    "end": "1366039"
  },
  {
    "text": "this load testing tool it's very similar to Siege or any other load testing tools that you may have used that we have said",
    "start": "1366039",
    "end": "1372720"
  },
  {
    "text": "there going to be 25 concurrent users and about that's the number of requests per",
    "start": "1372720",
    "end": "1380159"
  },
  {
    "text": "user will be about 400 so that's 10,000 in total and we'll also add some Jitter",
    "start": "1380159",
    "end": "1386120"
  },
  {
    "text": "to these calls to sort of mimic the real life right so we'll add a delay of about 01 and keep a look at the CPU and the",
    "start": "1386120",
    "end": "1394200"
  },
  {
    "text": "memory usage on the left when this starts right so we're going to start this right",
    "start": "1394200",
    "end": "1399840"
  },
  {
    "text": "now yeah so it started and you can see the CPU and memory usage slowly increase",
    "start": "1399840",
    "end": "1405080"
  },
  {
    "text": "goes up to about 90% CPU memory goes up to 52 and this is done right so in a",
    "start": "1405080",
    "end": "1412480"
  },
  {
    "text": "Laten you made 10,000 requests in a latency of about 9 milliseconds the",
    "start": "1412480",
    "end": "1418080"
  },
  {
    "text": "average length of test was 5.8 which I think is quite good and if you look on",
    "start": "1418080",
    "end": "1423360"
  },
  {
    "text": "the left you can actually see the CPU and memory already come back down to normal amounts that it was before the",
    "start": "1423360",
    "end": "1429360"
  },
  {
    "text": "test right and again this is because of the performance of web assembly right it's able to spring up all of these apps",
    "start": "1429360",
    "end": "1436760"
  },
  {
    "text": "make calls to them and and then scale down to zero in no time we're taking way less memory right and again being more",
    "start": "1436760",
    "end": "1443480"
  },
  {
    "text": "Hardware efficient and energy efficient if I had to do a two- slide",
    "start": "1443480",
    "end": "1449039"
  },
  {
    "text": "review of where we are at in terms of Hardware utilization today this would be it there are so many reports of how with",
    "start": "1449039",
    "end": "1457240"
  },
  {
    "text": "things like kubernetes clusters and Cloud deployments there's so much unused CPU and completely underutilized CPU out",
    "start": "1457240",
    "end": "1465080"
  },
  {
    "text": "there in the cloud right there was a test or there was a article by Cy dig recently and they said 69% of CPU is",
    "start": "1465080",
    "end": "1472840"
  },
  {
    "text": "unused in containerized cloud cloud deployments there's a very interesting",
    "start": "1472840",
    "end": "1479039"
  },
  {
    "text": "thing which is mentioned in the second bullet point there which is an idling computer actually spends about 30 to 60%",
    "start": "1479039",
    "end": "1486840"
  },
  {
    "text": "power and there is a nonr proportionality to how this works",
    "start": "1486840",
    "end": "1492720"
  },
  {
    "text": "because the more you use it doesn't mean it increases proportionally right you're supposed to use a system that's actually",
    "start": "1492720",
    "end": "1499960"
  },
  {
    "text": "running so the way to get maximum value from a system is by using it not by",
    "start": "1499960",
    "end": "1505799"
  },
  {
    "text": "keeping it idle in the cloud because that is not being Hardware efficient that is actually increasing your carbon",
    "start": "1505799",
    "end": "1511679"
  },
  {
    "text": "footprint yeah so think about getting maximum utilization of that",
    "start": "1511679",
    "end": "1518080"
  },
  {
    "text": "Hardware the way to think about it is the right seress is the solution uh in",
    "start": "1518080",
    "end": "1523480"
  },
  {
    "text": "another report there were they said that about 81% of azure functions are invoked",
    "start": "1523480",
    "end": "1528720"
  },
  {
    "text": "once per minute or less right so there is a significant cost of keeping these",
    "start": "1528720",
    "end": "1534120"
  },
  {
    "text": "serverless applications warm only to provide that speed and that lack of cold start times and usually you as a",
    "start": "1534120",
    "end": "1541200"
  },
  {
    "text": "customer take up that cost so again maybe with web assembly some of these",
    "start": "1541200",
    "end": "1546679"
  },
  {
    "text": "things will slowly start changing and we know that this is a priority for Tech",
    "start": "1546679",
    "end": "1552799"
  },
  {
    "text": "these days because just I think a month and a half ago meta launched their own servess Service as well called xfast",
    "start": "1552799",
    "end": "1559919"
  },
  {
    "text": "where they're claiming about 60% utilization of uh their Hardware which",
    "start": "1559919",
    "end": "1565399"
  },
  {
    "text": "which is very good uh of course by using that you do have vendor lock in because you're locked into you know meta",
    "start": "1565399",
    "end": "1570919"
  },
  {
    "text": "solution but I think it's worth checking out the thing I'm really excited about",
    "start": "1570919",
    "end": "1576960"
  },
  {
    "text": "is this thing that was just launched by the bite code Alliance this is the cncf uh equivalent but with web assembly",
    "start": "1576960",
    "end": "1584039"
  },
  {
    "text": "called the component model now there there's a very interesting thing called the 2400r problem which is if you take",
    "start": "1584039",
    "end": "1592559"
  },
  {
    "text": "any random thing like say parsing URLs fairly simple to do you get a host a",
    "start": "1592559",
    "end": "1597840"
  },
  {
    "text": "protocol some data every language has multiple URL passes of its own right",
    "start": "1597840",
    "end": "1604399"
  },
  {
    "text": "rust has one python has one whatever what if we could use just one that was",
    "start": "1604399",
    "end": "1610159"
  },
  {
    "text": "created and across languages you know and this thing called the component model will actually give you that",
    "start": "1610159",
    "end": "1617320"
  },
  {
    "text": "promise very soon so say You're Building A JavaScript app and you need a yaml passer and you need a date formatter you",
    "start": "1617320",
    "end": "1624159"
  },
  {
    "text": "don't have to write one from scratch nor is there a necessity to that you have to use a JavaScript yamula or a JavaScript",
    "start": "1624159",
    "end": "1632000"
  },
  {
    "text": "date formatter with this component model you can get a rust yamal Passa and a",
    "start": "1632000",
    "end": "1637480"
  },
  {
    "text": "python date formatter and that's it you know and again you can be more hardware",
    "start": "1637480",
    "end": "1643080"
  },
  {
    "text": "and energy efficient this was just launched it how it works essentially is you have these components or core",
    "start": "1643080",
    "end": "1649720"
  },
  {
    "text": "modules and any module can export some data and any module can import data",
    "start": "1649720",
    "end": "1656600"
  },
  {
    "text": "these modules don't even have to be written in the same language one can be written in Rust the other can be written in go for example both can be combined",
    "start": "1656600",
    "end": "1664679"
  },
  {
    "text": "to create a new module which now does something right and this opens up so many different possibilities of how we",
    "start": "1664679",
    "end": "1671320"
  },
  {
    "text": "can write software compared to how we have been writing software uh check it out it's it's very new it's still of",
    "start": "1671320",
    "end": "1678080"
  },
  {
    "text": "course there's a lot more work to be done by the bite code Alliance and all of that but this opens up possibilities",
    "start": "1678080",
    "end": "1685000"
  },
  {
    "text": "because how we build cicd now looks like this right on the left you have a yaml",
    "start": "1685000",
    "end": "1690240"
  },
  {
    "text": "file it's something written in go it's something called oath right and you can see there are multiple Go versions in",
    "start": "1690240",
    "end": "1696399"
  },
  {
    "text": "the same yaml file there are multiple builds this is how we write our yaml files for",
    "start": "1696399",
    "end": "1702000"
  },
  {
    "text": "cicd on the right you see uh Docker this is straight from the docker documentation",
    "start": "1702000",
    "end": "1707960"
  },
  {
    "text": "so for each build for testing for packaging you're throwing in your OS different language versions um different",
    "start": "1707960",
    "end": "1715840"
  },
  {
    "text": "architectures this is a huge binary this has so much footprint in the component",
    "start": "1715840",
    "end": "1721640"
  },
  {
    "text": "model you wouldn't need any of that right all you have to do is put one build you have a runtime which already",
    "start": "1721640",
    "end": "1728880"
  },
  {
    "text": "Works across architectures across operating systems across whatever and",
    "start": "1728880",
    "end": "1734159"
  },
  {
    "text": "you don't even need to package anything because as components they're already already packaged I don't even need to do",
    "start": "1734159",
    "end": "1740320"
  },
  {
    "text": "any bandwidth testing here you can tell that this is already more energy and Hardware efficient just by looking at it",
    "start": "1740320",
    "end": "1747039"
  },
  {
    "text": "right so this is really what the component model unlocks so keep your eye out on it because I I really think it's",
    "start": "1747039",
    "end": "1752799"
  },
  {
    "text": "going to change how we start building serverless and event driven and microservice architectures very",
    "start": "1752799",
    "end": "1758760"
  },
  {
    "text": "soon anyway um for next steps you can check out if you want to build your first web assembly app check out um it's",
    "start": "1758760",
    "end": "1765840"
  },
  {
    "text": "on GitHub uh the 2400r problem there's a blog post written there you can check",
    "start": "1765840",
    "end": "1771880"
  },
  {
    "text": "that out as well and also check out this block post we had written about carbon neutral AI inferencing we had friends",
    "start": "1771880",
    "end": "1778080"
  },
  {
    "text": "from coo speak here as well um coo basically also we work with them and we",
    "start": "1778080",
    "end": "1784919"
  },
  {
    "text": "we use their Hardware to do uh Ai inferencing and SEO works with deep",
    "start": "1784919",
    "end": "1790320"
  },
  {
    "text": "green and deep green does something cool where they take the heat generated in data centers to actually reheat swimming",
    "start": "1790320",
    "end": "1797120"
  },
  {
    "text": "pool tools in the UK right so your carbon your AI inferencing can actually be carbon neutral which I think is a",
    "start": "1797120",
    "end": "1803600"
  },
  {
    "text": "very cool thing so different ways to actually look at sustainability in Tech anyway I hope that opened your mind to",
    "start": "1803600",
    "end": "1810200"
  },
  {
    "text": "the idea of sustainability in Tech do check out um web assembly and serverless",
    "start": "1810200",
    "end": "1815640"
  },
  {
    "text": "I'll be around if you have any questions was lovely talking to you feel free to connect with me on LinkedIn or wherever",
    "start": "1815640",
    "end": "1821120"
  },
  {
    "text": "and enjoy the rest of the conference",
    "start": "1821120",
    "end": "1824799"
  }
]