[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "hi everybody at the cloud native security conference welcome today we're going to discuss from theory",
    "start": "960",
    "end": "7680"
  },
  {
    "text": "to practice with sean anderson myself anna mctaggart and michael hackett",
    "start": "7680",
    "end": "13519"
  },
  {
    "text": "here we are and michael hackett and i are at red hat i'm a security analyst and he is a",
    "start": "13519",
    "end": "20800"
  },
  {
    "text": "principal product experience engineer sean anderson is a phd student at portland state university with a focus",
    "start": "20800",
    "end": "27199"
  },
  {
    "text": "on formal methods so here's a little thing this is actually",
    "start": "27199",
    "end": "34000"
  },
  {
    "start": "30000",
    "end": "62000"
  },
  {
    "text": "from practice to theory the title was created prior to this decision we're going to be starting off",
    "start": "34000",
    "end": "40399"
  },
  {
    "text": "for clarity of this talk the practical security used in stuff the flaws with those methods",
    "start": "40399",
    "end": "47680"
  },
  {
    "text": "and a better way with theory we're going to start off by discussing rook forsaff moving into the shortfalls of this",
    "start": "47680",
    "end": "53120"
  },
  {
    "text": "current practice and other security features with saf and we're going to show how theory and",
    "start": "53120",
    "end": "58719"
  },
  {
    "text": "in particular formal methods will help us fix these flaws and i'm going to hand it over to michael",
    "start": "58719",
    "end": "64400"
  },
  {
    "start": "62000",
    "end": "140000"
  },
  {
    "text": "hackett now thanks anna so before we get into the practical",
    "start": "64400",
    "end": "70000"
  },
  {
    "text": "security side of of rook ceph i'd like to just give a quick overview on on why we're we're talking about rooksef today",
    "start": "70000",
    "end": "75680"
  },
  {
    "text": "right um we all know from a development standpoint that looking at deploying",
    "start": "75680",
    "end": "81360"
  },
  {
    "text": "cloud native applications in can be extremely complex and challenging when we're when we're looking at it from the outside in right large clouds um large",
    "start": "81360",
    "end": "89439"
  },
  {
    "text": "number of compute um can lead to a very overwhelming situation so why we're looking at rook",
    "start": "89439",
    "end": "95759"
  },
  {
    "text": "ceph is because we're we're simplifying the underlying storage aspect and allowing our developers or our our end",
    "start": "95759",
    "end": "103200"
  },
  {
    "text": "customers to focus on writing applications and and testing code",
    "start": "103200",
    "end": "108720"
  },
  {
    "text": "what we've done with workstaff is we've basically designed an um a way to automate packaging deployment cluster",
    "start": "108720",
    "end": "114960"
  },
  {
    "text": "management upgrading and and scaling of of storage um all underneath the stateful",
    "start": "114960",
    "end": "120960"
  },
  {
    "text": "applications as well as providing infrastructure services such as as an area to provide logging in metrics and",
    "start": "120960",
    "end": "126640"
  },
  {
    "text": "registry to kubernetes clusters we do this by augmenting kubernetes by",
    "start": "126640",
    "end": "132879"
  },
  {
    "text": "giving them access to storage services including block file system and object storage",
    "start": "132879",
    "end": "138080"
  },
  {
    "text": "and you can go to the next slide so so why are we focusing on rook seth",
    "start": "138080",
    "end": "143440"
  },
  {
    "start": "140000",
    "end": "202000"
  },
  {
    "text": "right um working at red hat we can see the container adoption is just exploding",
    "start": "143440",
    "end": "148800"
  },
  {
    "text": "throughout our customers um more and more businesses are looking at using kubernetes buzzwords",
    "start": "148800",
    "end": "154080"
  },
  {
    "text": "as ways to to uh automate and drive automation um just improve overall",
    "start": "154080",
    "end": "159200"
  },
  {
    "text": "efficiency with their teams um and and just be able to to to to scale at",
    "start": "159200",
    "end": "165760"
  },
  {
    "text": "at um at need be without the the requirements of of going out and",
    "start": "165760",
    "end": "170879"
  },
  {
    "text": "purchasing these these large storage arrays um the trouble that we have with cloud",
    "start": "170879",
    "end": "175920"
  },
  {
    "text": "native environments uh which we're looking to cover here is is how do we actually secure and protect this the all this data that's going in",
    "start": "175920",
    "end": "182560"
  },
  {
    "text": "here um this we don't want to leave this to the development engineer in in order to figure this out so we need to have",
    "start": "182560",
    "end": "188080"
  },
  {
    "text": "these these um these these features in place that are",
    "start": "188080",
    "end": "193920"
  },
  {
    "text": "able to provide the this type of security and protection for the data that resides in our kubernetes clusters",
    "start": "193920",
    "end": "200000"
  },
  {
    "text": "go ahead and go to the next slide please",
    "start": "200000",
    "end": "203680"
  },
  {
    "start": "202000",
    "end": "330000"
  },
  {
    "text": "so where are we currently at with rook rook gives us the ability to to",
    "start": "205680",
    "end": "212400"
  },
  {
    "text": "auto scale itself and also auto heal itself when we're facing any type of underlying hardware failure or or",
    "start": "212400",
    "end": "218319"
  },
  {
    "text": "something that may impact the underlying cluster situation or or data access for our end users there's no requirement to",
    "start": "218319",
    "end": "224080"
  },
  {
    "text": "go in there and and recover a filled object storage name in yourself the the rook operator",
    "start": "224080",
    "end": "230000"
  },
  {
    "text": "automatically goes out there um restarts the pod for you so we're dealing with a a self-healing cluster where the",
    "start": "230000",
    "end": "235439"
  },
  {
    "text": "developer doesn't have to take his time away from moving forward on on any of this application work uh to to",
    "start": "235439",
    "end": "242080"
  },
  {
    "text": "troubleshoot an issue and and um auto recover the class um self recover the cluster this is auto done all from uh",
    "start": "242080",
    "end": "248799"
  },
  {
    "text": "the the rook stuff operator we're also allowing um ceph which can be",
    "start": "248799",
    "end": "254319"
  },
  {
    "text": "a complex storage product to run on our kubernetes platform with these via the rook stuff operator this is",
    "start": "254319",
    "end": "259519"
  },
  {
    "text": "enabling the benefits of of containerization and the ease of using containers",
    "start": "259519",
    "end": "265199"
  },
  {
    "text": "and push that down to our developers the ease of using containers is obvious it gives us the the the auto packaging the",
    "start": "266240",
    "end": "271600"
  },
  {
    "text": "the auto upgrade and and those types of features that i discussed in the previous slide",
    "start": "271600",
    "end": "277600"
  },
  {
    "text": "looking at uh security from a practical standpoint we can apply these from from openshift to our rooksef clusters and we",
    "start": "278000",
    "end": "283360"
  },
  {
    "text": "can look them up these based upon a individual emo file or in your crds specified for each one of your um",
    "start": "283360",
    "end": "290479"
  },
  {
    "text": "your resources a crd is a custom resource definition um in ceph standalone outside of kubernetes",
    "start": "290479",
    "end": "297680"
  },
  {
    "text": "um you when you're when you're dealing with these types of of changes to any of the security policies or or features",
    "start": "297680",
    "end": "304080"
  },
  {
    "text": "inside ceph it's usually a a very manual process where you update configuration and then push out to a set",
    "start": "304080",
    "end": "310320"
  },
  {
    "text": "of nodes um that's a manual configuration when we're dealing with ceph um and the rook",
    "start": "310320",
    "end": "315440"
  },
  {
    "text": "ceph operator we're still dealing with somewhat of a manual configuration here but uh it's it's a a a lot less",
    "start": "315440",
    "end": "323199"
  },
  {
    "text": "overhead than it would be if we're dealing with a a set cluster outside a bare metal subcluster outside of kubernetes",
    "start": "323199",
    "end": "329360"
  },
  {
    "text": "and you can go to the next slide please so addressing a little bit where more",
    "start": "329360",
    "end": "335360"
  },
  {
    "text": "where we are from the practical side of security with seth um i want to go over a little bit of what we're currently",
    "start": "335360",
    "end": "340560"
  },
  {
    "text": "offering um we can we can deploy our object storage daemons which are your your underlying data storage devices in ceph",
    "start": "340560",
    "end": "348080"
  },
  {
    "text": "uh we can deploy these as being encrypted uh using dmc during the osd's creation uh these can be done in multiple",
    "start": "348080",
    "end": "354320"
  },
  {
    "text": "different ways using lux this can be done on the the actual device layer or we can do it on the lvm abstraction",
    "start": "354320",
    "end": "359520"
  },
  {
    "text": "layer um as of our nautilus release we're actually supporting external kms um via",
    "start": "359520",
    "end": "365840"
  },
  {
    "text": "hashicorp being the only kms server that um that we're that we're um supporting currently and that was made available",
    "start": "365840",
    "end": "371840"
  },
  {
    "text": "with a 1.5 release um this the way that we we set encryption on these osds does need to be",
    "start": "371840",
    "end": "378960"
  },
  {
    "text": "uh applied manually so this isn't in an automated concentrate that can be done or something that can done to an osd",
    "start": "378960",
    "end": "384000"
  },
  {
    "text": "that's already online unfortunately um this is done by updating a respected uh storage uh class device",
    "start": "384000",
    "end": "390880"
  },
  {
    "text": "yaml or template and setting your encryption value to true um by default this is stored in",
    "start": "390880",
    "end": "396080"
  },
  {
    "text": "kubernetes secret um which uh from a security standpoint",
    "start": "396080",
    "end": "401199"
  },
  {
    "text": "isn't as as um as secure as i i would i would that",
    "start": "401199",
    "end": "406319"
  },
  {
    "text": "would be fit for a certain requirements for users which is why we introduce support for the external kms hashicorp",
    "start": "406319",
    "end": "412319"
  },
  {
    "text": "vault when a requirement is for the key to live outside of kubernetes and on an external um vault device",
    "start": "412319",
    "end": "419599"
  },
  {
    "text": "we also in nautilus released um something called the v2 messenger protocol so what the v2 messenger",
    "start": "419919",
    "end": "425039"
  },
  {
    "text": "protocol is it actually introduces encryption on the wire when we're talking the the encrypted level of osds",
    "start": "425039",
    "end": "431360"
  },
  {
    "text": "we're talking data at rest encryption what we're doing with the v2 messenger is actually encrypting data that is",
    "start": "431360",
    "end": "436560"
  },
  {
    "text": "running through the network um and and this is done utilizing our own authentication system called suffix",
    "start": "436560",
    "end": "443360"
  },
  {
    "text": "um so what we do there is is is there is a a default method called crc",
    "start": "443360",
    "end": "448880"
  },
  {
    "text": "check which basically uh sets a valid crc on on traffic flowing through the the network and",
    "start": "448880",
    "end": "454639"
  },
  {
    "text": "validates it when we reach an additional endpoint crc check is the default method",
    "start": "454639",
    "end": "460080"
  },
  {
    "text": "of v2 messenger that we use but there is also a secure setting which is a a more in-depth full encryption of all the the",
    "start": "460080",
    "end": "467360"
  },
  {
    "text": "the traffic going through so we were looking at a full cryptographic integrity check of the traffic running through the network",
    "start": "467360",
    "end": "473199"
  },
  {
    "text": "um this requires a also a manual editing setting of the cluster crd during the",
    "start": "473199",
    "end": "478639"
  },
  {
    "text": "cluster creation so we can't just turn on secure mode during um uh that the cluster being up and running",
    "start": "478639",
    "end": "484720"
  },
  {
    "text": "this is the setting that required that is required to be set while the cluster is is in creation",
    "start": "484720",
    "end": "490479"
  },
  {
    "text": "this this is done by defining um your cluster crd",
    "start": "490479",
    "end": "496400"
  },
  {
    "text": "another area that that we look at instead from a security standpoint is actually the ability to modify user permissions per pulse",
    "start": "496639",
    "end": "502319"
  },
  {
    "text": "uh this is this is giving certain users read write or or executive access to any of the",
    "start": "502319",
    "end": "507759"
  },
  {
    "text": "pools this can be configured by setting a a the client custom resource definition for a specific client",
    "start": "507759",
    "end": "514399"
  },
  {
    "text": "looking at this primarily for for library use cases for example openstack running on open shift um where we may",
    "start": "514399",
    "end": "520560"
  },
  {
    "text": "have a registry or something like that where a user may may be required permissions to access specific pools",
    "start": "520560",
    "end": "526720"
  },
  {
    "text": "but um there are also other use cases for example your your radios gateway or object store user",
    "start": "526720",
    "end": "533440"
  },
  {
    "text": "crd can also be set to to specify specific users to to access different sets of object store pools",
    "start": "533440",
    "end": "539680"
  },
  {
    "text": "on the underlying subcluster as well",
    "start": "539680",
    "end": "543200"
  },
  {
    "text": "so that that that's currently uh from the the tactical standpoint what we're offering right now from the the",
    "start": "546080",
    "end": "552240"
  },
  {
    "text": "the the sephirok standpoint uh we we understand we are um",
    "start": "552240",
    "end": "557920"
  },
  {
    "text": "limiting in some areas in in particular we're we're looking at a a there's no automation right when we're",
    "start": "557920",
    "end": "563839"
  },
  {
    "text": "when we're looking at setting these these these types of security principles on this on on rook ceph we're looking at manual um additions to to to and changes",
    "start": "563839",
    "end": "572320"
  },
  {
    "text": "to anything required to enable these types of features hey you want to cover the next slide please yeah thank you michael",
    "start": "572320",
    "end": "580000"
  },
  {
    "text": "so this is really state of the art stuff and it's really important it's amazing",
    "start": "580000",
    "end": "585360"
  },
  {
    "text": "seth is continually improving our security as our media as are many other places in industry it's really good it's",
    "start": "585360",
    "end": "593120"
  },
  {
    "text": "not enough i still have a job analyzing cves day-to-day",
    "start": "593120",
    "end": "598320"
  },
  {
    "text": "stuff on work is really good it enables all the benefits of containerization it enables a lot of security benefits",
    "start": "598320",
    "end": "604959"
  },
  {
    "text": "but it doesn't formally guarantee a whole lot it's not bulletproof",
    "start": "604959",
    "end": "610160"
  },
  {
    "text": "we still get cves what causes our cves and how can we reduce the number of them",
    "start": "610160",
    "end": "615839"
  },
  {
    "text": "going from a whole lot of cves to just a few so let's think about some of our sources",
    "start": "615839",
    "end": "622160"
  },
  {
    "start": "619000",
    "end": "634000"
  },
  {
    "text": "of flaws and cves many of our flaws occur with access control and with",
    "start": "622160",
    "end": "627279"
  },
  {
    "text": "buffer overflow attacks going to discuss these categories of flaws and then how to prevent them in theory and in",
    "start": "627279",
    "end": "632800"
  },
  {
    "text": "practice so access control you know we deal with this we're dealing",
    "start": "632800",
    "end": "638399"
  },
  {
    "start": "634000",
    "end": "678000"
  },
  {
    "text": "with a lot of stuff by applying permissions checking user authorization making sure our key management is set up",
    "start": "638399",
    "end": "644320"
  },
  {
    "text": "it hasn't eliminated the flaws it has decreased the number of flaws down to about one percent under cwe 284",
    "start": "644320",
    "end": "652399"
  },
  {
    "text": "aka and proper access control in 2020 and it's a decrease from prior years but these flaws still exist",
    "start": "652399",
    "end": "659360"
  },
  {
    "text": "we could eliminate these flaws if we had formal guarantees that state only certain users are authorized to access",
    "start": "659360",
    "end": "665440"
  },
  {
    "text": "particular things we don't have a formal bulletproof guarantee we just have software that enables that and that",
    "start": "665440",
    "end": "672320"
  },
  {
    "text": "roughly provides a general way to generally prevent these flaws",
    "start": "672320",
    "end": "677920"
  },
  {
    "text": "another the most common and overwhelming source of cves are related to buffer overflow and memory buffer attacks this",
    "start": "677920",
    "end": "684240"
  },
  {
    "start": "678000",
    "end": "704000"
  },
  {
    "text": "is 21 of our cves in 2019. these are entirely preventable with guardrails from overflowing languages",
    "start": "684240",
    "end": "691440"
  },
  {
    "text": "from programming languages there is no need to have a buffer overflow in 2021",
    "start": "691440",
    "end": "696959"
  },
  {
    "text": "it happens due to the use of languages and of course we fix them when they occur but there are languages that prevent",
    "start": "696959",
    "end": "702959"
  },
  {
    "text": "buffer overflow attacks for example go and rust go in rough are",
    "start": "702959",
    "end": "708160"
  },
  {
    "start": "704000",
    "end": "762000"
  },
  {
    "text": "both memory safe meaning that you can't write to sections of memory that you don't mean to write to",
    "start": "708160",
    "end": "714320"
  },
  {
    "text": "they eliminate buffer overflow attacks just by having these guardrails from a programming language and taking",
    "start": "714320",
    "end": "721920"
  },
  {
    "text": "a little bit of a technique that says that you cannot have this you can design a system so that these attacks are impossible go undressed have different",
    "start": "721920",
    "end": "728320"
  },
  {
    "text": "benefits um you know go obviously has garbage collection rust does not and it",
    "start": "728320",
    "end": "734399"
  },
  {
    "text": "all depends but rust can be a little bit faster so it all depends on your goal as to which language you use but we can",
    "start": "734399",
    "end": "739440"
  },
  {
    "text": "eliminate buffer overflow attacks even with older languages with c you can have verifiable",
    "start": "739440",
    "end": "745680"
  },
  {
    "text": "verified compilers that do not allow security flaws the biggest downside is efficiency but as we're seeing it's",
    "start": "745680",
    "end": "752240"
  },
  {
    "text": "starting to be practical with languages such as go and rust being widely adopted in industry these techniques are not",
    "start": "752240",
    "end": "758800"
  },
  {
    "text": "just in the realm of theory they're very practical so how are we even enforcing security",
    "start": "758800",
    "end": "764720"
  },
  {
    "start": "762000",
    "end": "798000"
  },
  {
    "text": "nowadays on rel we're using sc linux and subcomp and this helps but it relies on",
    "start": "764720",
    "end": "770000"
  },
  {
    "text": "user configuration which as we touched on can be a huge pain doing all this manual user configuration",
    "start": "770000",
    "end": "776720"
  },
  {
    "text": "containerization really helps to contain flaws and decrease their security severity but alone it doesn't eliminate",
    "start": "776720",
    "end": "783920"
  },
  {
    "text": "the flaws it reduces it it provides a stop gap but we still get cves",
    "start": "783920",
    "end": "789760"
  },
  {
    "text": "again we want to eliminate these security flaws eventually so that there are no more cvs of these types",
    "start": "789760",
    "end": "796880"
  },
  {
    "text": "so how would we do that well we really need to make it so that security is impossible to mess up",
    "start": "796880",
    "end": "803519"
  },
  {
    "start": "798000",
    "end": "828000"
  },
  {
    "text": "again we are very optimistic we're making progress in reality",
    "start": "803519",
    "end": "809519"
  },
  {
    "text": "but we want to make this impossible to mess up and we want to make it so that programmer errors don't lead to exploits",
    "start": "809519",
    "end": "816560"
  },
  {
    "text": "a programmer error should not just be a personal flaw but it should be a flaw within your design",
    "start": "816560",
    "end": "822639"
  },
  {
    "text": "how do we make it so it's idiot proof you can't mess up you can't create a major security flaw",
    "start": "822639",
    "end": "828959"
  },
  {
    "start": "828000",
    "end": "857000"
  },
  {
    "text": "so we can do that using formal methods currently we're the deniedies we're bringing our",
    "start": "828959",
    "end": "835440"
  },
  {
    "text": "buckets of water our patches to a sieve that pours it out day in day out",
    "start": "835440",
    "end": "842399"
  },
  {
    "text": "for all of eternity um it's annoying",
    "start": "842399",
    "end": "848480"
  },
  {
    "text": "it's honest work to be fixing all of these cves but it can feel repetitive",
    "start": "848880",
    "end": "854839"
  },
  {
    "text": "so what's our way to the future i'm going to let sean here speak about",
    "start": "854839",
    "end": "860480"
  },
  {
    "start": "857000",
    "end": "1050000"
  },
  {
    "text": "formalizing security and formal methods and ways to actually stop these at the source we're no longer the denieties",
    "start": "860480",
    "end": "867440"
  },
  {
    "text": "we're no longer having it flow out the bottom but we're slapping on a cv we're going a little bit more than slapping on",
    "start": "867440",
    "end": "872959"
  },
  {
    "text": "a cv effects here and actually fixing that entire bucket so that it's",
    "start": "872959",
    "end": "879279"
  },
  {
    "text": "not just held together with the duct tape but there's a nice solid glass speaker up there",
    "start": "879279",
    "end": "885279"
  },
  {
    "text": "and over to sean all right thanks anna all right so um",
    "start": "885279",
    "end": "891040"
  },
  {
    "text": "we've been hearing this this term formal methods uh a bunch in this talk and uh one might reasonably wonder uh what",
    "start": "891040",
    "end": "898720"
  },
  {
    "text": "is that what what do i mean by formalizing and why is this helpful um and",
    "start": "898720",
    "end": "904079"
  },
  {
    "text": "why uh do we have these visions that one day this will you know take us beyond the era of flex tape security um so the",
    "start": "904079",
    "end": "912720"
  },
  {
    "text": "the essence of formal methods uh it's a kind of broad uh class of research uh",
    "start": "912720",
    "end": "918160"
  },
  {
    "text": "connected to programming language theory uh and formal logic uh the essence is that we're going to represent programs",
    "start": "918160",
    "end": "924079"
  },
  {
    "text": "uh and systems uh in some kind of logical system uh that is amenable to",
    "start": "924079",
    "end": "930160"
  },
  {
    "text": "uh mathematical proof um so we're we're going to uh rigorously model our",
    "start": "930160",
    "end": "936000"
  },
  {
    "text": "systems and uh programs um and what that means uh for instance in",
    "start": "936000",
    "end": "941440"
  },
  {
    "text": "the area of my research is that we can uh define logical propositions uh",
    "start": "941440",
    "end": "946560"
  },
  {
    "text": "representing uh the essence of some concept of security um",
    "start": "946560",
    "end": "951680"
  },
  {
    "text": "and so we can think of this as just a very rigorous way of specifying uh what our system is supposed to do uh and then",
    "start": "951680",
    "end": "958079"
  },
  {
    "text": "ideally uh we then take that specification and uh the fact that it's embedded in this formal logic and we",
    "start": "958079",
    "end": "963920"
  },
  {
    "text": "actually build a logical proof uh that guarantees uh that for a given system whatever property we've claimed we want",
    "start": "963920",
    "end": "971040"
  },
  {
    "text": "actually does apply to that system uh and then the very nice thing is that with uh recent technologies uh we can",
    "start": "971040",
    "end": "978720"
  },
  {
    "text": "we make these formal logics machine checkable uh so you know it's not just that i wrote down in my notebook a proof",
    "start": "978720",
    "end": "986000"
  },
  {
    "text": "that you know you take uh your eyeball and say it looks right but actually we can feed the uh the proof into a machine",
    "start": "986000",
    "end": "993120"
  },
  {
    "text": "that will say yes absolutely this proof holds um",
    "start": "993120",
    "end": "998720"
  },
  {
    "text": "now that is uh a pretty high bar and um as i'll get to in a couple of slides",
    "start": "998720",
    "end": "1006480"
  },
  {
    "text": "it's not always uh it's not currently viewed as super practical to do this for large scale projects um so for my part",
    "start": "1006480",
    "end": "1012560"
  },
  {
    "text": "of this talk uh i also kind of want to focus on um",
    "start": "1012560",
    "end": "1017920"
  },
  {
    "text": "the secondary benefit of formal methods um that which is that when you start",
    "start": "1017920",
    "end": "1023680"
  },
  {
    "text": "thinking in terms of these logical systems and properties uh you kind of change the way that you",
    "start": "1023680",
    "end": "1030160"
  },
  {
    "text": "think about security in a way that even absent the formal proofs can be helpful in",
    "start": "1030160",
    "end": "1035839"
  },
  {
    "text": "understanding the nature of security in a system um so we want to get beyond thinking about just um",
    "start": "1035839",
    "end": "1042000"
  },
  {
    "text": "individual exploits and examples of bad behavior and we want to think about at a higher level a more abstract",
    "start": "1042000",
    "end": "1047918"
  },
  {
    "text": "level hit the slide uh so we want to think in some sense in",
    "start": "1047919",
    "end": "1053360"
  },
  {
    "start": "1050000",
    "end": "1116000"
  },
  {
    "text": "terms of abstractions and this is something that as computer scientists uh we i i think you know most most",
    "start": "1053360",
    "end": "1059760"
  },
  {
    "text": "programmers have uh some natural natural ability to do this just by the nature of programming uh certainly we uh",
    "start": "1059760",
    "end": "1066720"
  },
  {
    "text": "we have many many layers of abstractions in all of our systems um and it's useful",
    "start": "1066720",
    "end": "1071760"
  },
  {
    "text": "to just think more explicitly about what those abstractions are and what they do for us um certainly",
    "start": "1071760",
    "end": "1077440"
  },
  {
    "text": "programmers uh you know perhaps our end user or perhaps the programmers working on a system like",
    "start": "1077440",
    "end": "1082799"
  },
  {
    "text": "rook steph um rely on abstractions that are given to them by the programming language uh they",
    "start": "1082799",
    "end": "1088480"
  },
  {
    "text": "rely on uh the idea that if i call alec i'm going to get a block of a particular size uh that is sort of separate from",
    "start": "1088480",
    "end": "1095840"
  },
  {
    "text": "everything else in the system that's memory safety um you know i expect that if i write through a pointer to this",
    "start": "1095840",
    "end": "1101440"
  },
  {
    "text": "block i don't accidentally write into this other block um that's an abstraction and that makes it",
    "start": "1101440",
    "end": "1108240"
  },
  {
    "text": "easier to to write a program but often uh those abstractions don't actually hold uh can you click twice",
    "start": "1108240",
    "end": "1115039"
  },
  {
    "text": "anna uh often the programmer's mental model of what's going on in the in the system",
    "start": "1115039",
    "end": "1122080"
  },
  {
    "start": "1116000",
    "end": "1182000"
  },
  {
    "text": "has some holes in it and um there are all sorts of different places",
    "start": "1122080",
    "end": "1128000"
  },
  {
    "text": "that these holes can exist and a lot of cves come from the fact that someone was thinking in terms of some",
    "start": "1128000",
    "end": "1134720"
  },
  {
    "text": "kind of higher level abstraction and missed the fact that uh underneath that abstraction there's",
    "start": "1134720",
    "end": "1141120"
  },
  {
    "text": "actually a much a lower level more concrete system that's doing something a little unexpected and um you know the",
    "start": "1141120",
    "end": "1148160"
  },
  {
    "text": "classic example that anna referenced is the memory uh you know the buffer overflow um you know the fact is that",
    "start": "1148160",
    "end": "1154559"
  },
  {
    "text": "our buffers are not separate from one another and in languages like c you can do simple pointer arithmetic and jump",
    "start": "1154559",
    "end": "1161440"
  },
  {
    "text": "from one to another and nothing will actually stop you even though it's not illegal um",
    "start": "1161440",
    "end": "1166960"
  },
  {
    "text": "and so these assumptions we can almost think of as being in our trusted computing base",
    "start": "1166960",
    "end": "1172080"
  },
  {
    "text": "um and that's sometimes a problem because we aren't actually uh we shouldn't actually trust them uh",
    "start": "1172080",
    "end": "1178640"
  },
  {
    "text": "so be to the next slide um",
    "start": "1178640",
    "end": "1183679"
  },
  {
    "start": "1182000",
    "end": "1388000"
  },
  {
    "text": "what the formal methods community uh will sometimes get into when we're talking about solutions to this is um",
    "start": "1184880",
    "end": "1191360"
  },
  {
    "text": "can be thought some people find it a bit utopian um it's the idea that we can uh",
    "start": "1191360",
    "end": "1197679"
  },
  {
    "text": "actually specify at all the layers of abstraction in a system uh what things do and how they work um and that gives",
    "start": "1197679",
    "end": "1204240"
  },
  {
    "text": "the programmers working up near the top the ability to prove and then verify um or sorry to specify and then verify",
    "start": "1204240",
    "end": "1211280"
  },
  {
    "text": "exactly what their program is supposed to do um and uh and then because the",
    "start": "1211280",
    "end": "1217919"
  },
  {
    "text": "specifications for the lower levels uh should also be verified um",
    "start": "1217919",
    "end": "1223120"
  },
  {
    "text": "they are actually able to trust uh that the abstractions they're relying on are going to hold um and that's very",
    "start": "1223120",
    "end": "1229840"
  },
  {
    "text": "important um you know there's really there's been plenty of work done in specific programs being verified um",
    "start": "1229840",
    "end": "1236480"
  },
  {
    "text": "a flagship example is concert a c compiler uh that's verified and um and the verification there is well",
    "start": "1236480",
    "end": "1244320"
  },
  {
    "text": "it does exactly what it's supposed to do um it's not that it doesn't have security vulnerabilities luckily with a",
    "start": "1244320",
    "end": "1250159"
  },
  {
    "text": "compiler you don't uh you're not you know running it actively on a production system so maybe",
    "start": "1250159",
    "end": "1255679"
  },
  {
    "text": "that's not as big a deal but um you know we we sort of have the like you",
    "start": "1255679",
    "end": "1261840"
  },
  {
    "text": "can verify our program uh and there's also a lot of work being done in like",
    "start": "1261840",
    "end": "1267440"
  },
  {
    "text": "mitigation of these um abstraction breaking things uh",
    "start": "1267440",
    "end": "1273280"
  },
  {
    "text": "in the in the lower levels of our system and that includes things like um",
    "start": "1273280",
    "end": "1278880"
  },
  {
    "text": "hardware and software security mechanisms uh you know there's a whole movement toward hardware that provides",
    "start": "1278880",
    "end": "1285039"
  },
  {
    "text": "security enforcement primitives um there's also when when anna's talking",
    "start": "1285039",
    "end": "1290159"
  },
  {
    "text": "about um programming languages feature programming language features that uh exclude certain kinds of bugs such as uh",
    "start": "1290159",
    "end": "1298480"
  },
  {
    "text": "memory safety and rust and go um you know these help us be more confident in the um",
    "start": "1298480",
    "end": "1306320"
  },
  {
    "text": "abstractions that we're giving the the final programmer uh even without actually doing all the work of uh",
    "start": "1306320",
    "end": "1313520"
  },
  {
    "text": "of specifying and verifying every level um",
    "start": "1313520",
    "end": "1319039"
  },
  {
    "text": "which is a lot of work uh you have to specify everything and then do a formal",
    "start": "1319039",
    "end": "1324320"
  },
  {
    "text": "proof and that involves uh you know we have we have good tools for writing those proofs now we have things like  and isabelle hall um that are",
    "start": "1324320",
    "end": "1332240"
  },
  {
    "text": "improve assistance and let us do that in an interactive environment um but it still is it's a lot of uh",
    "start": "1332240",
    "end": "1339039"
  },
  {
    "text": "person months to verify even fairly simple programs um and then you know you have to build up",
    "start": "1339039",
    "end": "1345520"
  },
  {
    "text": "this whole system or you just start at the top and you make assumptions um so often this is viewed as impractical um",
    "start": "1345520",
    "end": "1351280"
  },
  {
    "text": "maybe we'll be doing something in fact there there are some programs that are getting uh",
    "start": "1351280",
    "end": "1357679"
  },
  {
    "text": "you know close to making realistic uh attempts at this and there are many things um",
    "start": "1357679",
    "end": "1363360"
  },
  {
    "text": "that prove you know a core uh set of functionality um one thing i want to call attention to is micro v a recent",
    "start": "1363360",
    "end": "1369520"
  },
  {
    "text": "work uh that does this with a um fairly realistic hypervisor",
    "start": "1369520",
    "end": "1374960"
  },
  {
    "text": "um but you know given that this is not something that we're going to just start",
    "start": "1374960",
    "end": "1380559"
  },
  {
    "text": "being able to do overnight um what are some takeaways that we can do right now",
    "start": "1380559",
    "end": "1386400"
  },
  {
    "text": "uh hit the slide um i think one of the big ones is just kind",
    "start": "1386400",
    "end": "1391919"
  },
  {
    "start": "1388000",
    "end": "1448000"
  },
  {
    "text": "of on maybe a development philosophy level um",
    "start": "1391919",
    "end": "1397600"
  },
  {
    "text": "starting to think in terms of these abstractions uh in terms of the properties that uh we are depending on",
    "start": "1397600",
    "end": "1403600"
  },
  {
    "text": "and that we are offering further users of our software uh and then and this is where",
    "start": "1403600",
    "end": "1409120"
  },
  {
    "text": "uh you know if i want to connect this to seth i might think okay so we have all these different security features",
    "start": "1409120",
    "end": "1414640"
  },
  {
    "text": "uh that are being offered to the end user um",
    "start": "1414640",
    "end": "1419760"
  },
  {
    "text": "but what it what are the what is the end users are uh actually using these for what um",
    "start": "1419760",
    "end": "1426000"
  },
  {
    "text": "you know can can i write down a formal description of how the system should behave so that the end user can",
    "start": "1426000",
    "end": "1432480"
  },
  {
    "text": "uh rely on that um you know if if the end user were writing uh their",
    "start": "1432480",
    "end": "1437760"
  },
  {
    "text": "own code that they were going to verify in this very rigorous way and i were providing them with some axioms that they'll use in their proof",
    "start": "1437760",
    "end": "1445360"
  },
  {
    "text": "what would they want to assume uh can you get this slide um",
    "start": "1445360",
    "end": "1450880"
  },
  {
    "start": "1448000",
    "end": "1666000"
  },
  {
    "text": "and there is a whole uh area of research around just writing these properties i",
    "start": "1450880",
    "end": "1456559"
  },
  {
    "text": "won't spend a huge amount of time on them now um but like for example if we're talking about containers uh",
    "start": "1456559",
    "end": "1463360"
  },
  {
    "text": "the sort of official way in the security literature to describe a compartmentalization",
    "start": "1463360",
    "end": "1469440"
  },
  {
    "text": "system uh where containers don't talk to each other uh is something called non-interference um actually we use non-interference for a lot of different",
    "start": "1469440",
    "end": "1476000"
  },
  {
    "text": "uh purposes but in this case non-interference means you know if i'm a container living in some larger system",
    "start": "1476000",
    "end": "1483760"
  },
  {
    "text": "um well maybe that larger system could be two different systems",
    "start": "1483760",
    "end": "1489919"
  },
  {
    "text": "uh and i can't tell the difference between them because the parts of the system that i can see",
    "start": "1489919",
    "end": "1495760"
  },
  {
    "text": "my own memory my own storage uh between these two systems it's identical but but other containers in the system",
    "start": "1495760",
    "end": "1503120"
  },
  {
    "text": "might be doing who knows what uh right they might be different from one another uh so if i'm living in in either of these",
    "start": "1503120",
    "end": "1509039"
  },
  {
    "text": "environments and i can't tell which one and then we execute for a while uh i should still",
    "start": "1509039",
    "end": "1514960"
  },
  {
    "text": "not be able to tell the difference between uh the rest of the system you know if i'm in system a or system b",
    "start": "1514960",
    "end": "1521600"
  },
  {
    "text": "um and that means that that's kind of an abstract notion",
    "start": "1521600",
    "end": "1526880"
  },
  {
    "text": "but we can think about what that means that means that if out there in that system there is an attacker in system a",
    "start": "1526880",
    "end": "1532400"
  },
  {
    "text": "but no attacker in system b and i can't tell the difference then clearly i didn't get attacked right and uh on the flip side if i'm an",
    "start": "1532400",
    "end": "1538960"
  },
  {
    "text": "attacker and uh out there in system a there's some secret that i'm trying to uncover uh and",
    "start": "1538960",
    "end": "1545360"
  },
  {
    "text": "if there's a different secret in system b uh well if i still can't tell which system i'm in after executing for a",
    "start": "1545360",
    "end": "1550720"
  },
  {
    "text": "while then i must not have discovered that secret right and by phrasing things in this way um it may seem kind of convoluted or uh",
    "start": "1550720",
    "end": "1558400"
  },
  {
    "text": "you know just like too abstract um but it means that we don't have to talk about specific actions like memory",
    "start": "1558400",
    "end": "1565840"
  },
  {
    "text": "accesses or uh things like that and so um",
    "start": "1565840",
    "end": "1570880"
  },
  {
    "text": "we can actually capture a wider range of behaviors that lead to the leaking of data or the the interference with uh",
    "start": "1570880",
    "end": "1577200"
  },
  {
    "text": "programs um so you can get the slide the other thing to think about with uh",
    "start": "1577200",
    "end": "1583360"
  },
  {
    "text": "they suppose let's pretend that you sat down for a bit and said well how would i show my system obeys this",
    "start": "1583360",
    "end": "1589279"
  },
  {
    "text": "non-interference property and you start thinking about like okay in uh in a c semantics if we step and step",
    "start": "1589279",
    "end": "1597279"
  },
  {
    "text": "and step uh these are the different steps we can take and uh",
    "start": "1597279",
    "end": "1603279"
  },
  {
    "text": "at each of these steps i want to say well i'm only reading from my own uh from the things that i'm allowed to see",
    "start": "1604159",
    "end": "1609919"
  },
  {
    "text": "and i'm only writing to things that i'm about to change um well we might we'll pretty rapidly hit some circumstance",
    "start": "1609919",
    "end": "1615440"
  },
  {
    "text": "where actually uh this doesn't hold this this property as i've stated it here is too strong um",
    "start": "1615440",
    "end": "1622799"
  },
  {
    "text": "and that's kind of intentional uh this is like the utmost level of safety um so",
    "start": "1622799",
    "end": "1628080"
  },
  {
    "text": "if we want to think about applying it in practice we need maybe to make it probabilistic because there um the",
    "start": "1628080",
    "end": "1633760"
  },
  {
    "text": "underlying mechanisms that michael talked about uh rely on encryption and encryption uh gives us probabilistic",
    "start": "1633760",
    "end": "1640480"
  },
  {
    "text": "guarantees and not absolute ones um and of course many systems will have ways that containers are going to talk",
    "start": "1640480",
    "end": "1646720"
  },
  {
    "text": "to each other and so we'll need to model that and it's not going to be this nice straightforward isolation thing um but",
    "start": "1646720",
    "end": "1651840"
  },
  {
    "text": "the really powerful thing about a model like this is it gives us this starting point to say this is the",
    "start": "1651840",
    "end": "1656880"
  },
  {
    "text": "extreme of what security is and now here are the ways that it doesn't apply and we can",
    "start": "1656880",
    "end": "1662320"
  },
  {
    "text": "uh you know build our model from there and hit slide um and then",
    "start": "1662320",
    "end": "1669120"
  },
  {
    "start": "1666000",
    "end": "1805000"
  },
  {
    "text": "you know we can we can talk about what kind of security guarantees we do don't offer and um",
    "start": "1669120",
    "end": "1675120"
  },
  {
    "text": "so if if i'm gonna give any guidance as to you know how to use formal methods uh",
    "start": "1675120",
    "end": "1681039"
  },
  {
    "text": "without really formalizing everything and just informally getting value from these ideas",
    "start": "1681039",
    "end": "1686559"
  },
  {
    "text": "um it's that you know you think about these abstractions and the way that you're relying on them and you think about the",
    "start": "1686559",
    "end": "1692799"
  },
  {
    "text": "extractions that you offer and you kind of do in your head an",
    "start": "1692799",
    "end": "1698240"
  },
  {
    "text": "informal reasoning about what those are and you know why you",
    "start": "1698240",
    "end": "1703279"
  },
  {
    "text": "believe that your security mechanisms are sufficient to uh to offer them uh",
    "start": "1703279",
    "end": "1708559"
  },
  {
    "text": "and then you can tell your customers that and you can have some new buzzwords um you know we all love a good security",
    "start": "1708559",
    "end": "1715360"
  },
  {
    "text": "buzzword and i'm frankly a little surprised that non-interference isn't one of them yet i'm sure the marketing people would love to slap that on your",
    "start": "1715360",
    "end": "1721919"
  },
  {
    "text": "software if you have a reasonable belief that you can provide it",
    "start": "1721919",
    "end": "1726880"
  },
  {
    "text": "but just by going through that process of thinking about security in this way um",
    "start": "1727360",
    "end": "1734000"
  },
  {
    "text": "you have a kind of higher level view of the sort of security that you're trying to offer and the reasons that you might",
    "start": "1734000",
    "end": "1740720"
  },
  {
    "text": "fail to offer it um and that's even before you've started doing any",
    "start": "1740720",
    "end": "1745760"
  },
  {
    "text": "real formal methods work um and of course as a formal methods person i advocate for you",
    "start": "1745760",
    "end": "1752159"
  },
  {
    "text": "to also do the formal methods work but um i'm a little biased there um and then of",
    "start": "1752159",
    "end": "1758559"
  },
  {
    "text": "course the other thing is um you know as this uh talk is an example of uh it's good",
    "start": "1758559",
    "end": "1765840"
  },
  {
    "text": "for developers and product people and security people and formal methods people to all be talking",
    "start": "1765840",
    "end": "1772240"
  },
  {
    "text": "about the um our own different perspectives on uh on how to make systems more secure um",
    "start": "1772240",
    "end": "1781039"
  },
  {
    "text": "and you know i think that cross pollination is uh going to be very valuable um because at",
    "start": "1781039",
    "end": "1786799"
  },
  {
    "text": "the moment in industry at large and academia um these are kind of very",
    "start": "1786799",
    "end": "1792840"
  },
  {
    "text": "siloed uh disciplines and we really could use more",
    "start": "1792840",
    "end": "1798559"
  },
  {
    "text": "cross-pollination so i think that's it for this talk and we'll now take questions",
    "start": "1798559",
    "end": "1807520"
  }
]