[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "welcome it's about time it's 11:55 I know I am right before lunch so I'll",
    "start": "149",
    "end": "8670"
  },
  {
    "text": "promise to speak fast enough for you to pick up something from my talk of course",
    "start": "8670",
    "end": "14960"
  },
  {
    "text": "but at the same time to share my knowledge as much as I can with you",
    "start": "14960",
    "end": "22289"
  },
  {
    "text": "about the controllers my name is ma che I work for Red Hat and I'm part of the",
    "start": "22289",
    "end": "28199"
  },
  {
    "text": "both kubernetes core team and OpenShift core team if you have any questions",
    "start": "28199",
    "end": "33450"
  },
  {
    "text": "about either of the projects I'm very happy to to answer them all or at least",
    "start": "33450",
    "end": "38550"
  },
  {
    "text": "the one that I know the answer for so today we'll be talking about controllers",
    "start": "38550",
    "end": "45110"
  },
  {
    "text": "so okay better controllers how many of",
    "start": "45110",
    "end": "55350"
  },
  {
    "start": "55000",
    "end": "205000"
  },
  {
    "text": "you if you hear the word controller and thinks about this nobody like seriously",
    "start": "55350",
    "end": "61559"
  },
  {
    "text": "people people okay so you are at least there's a handful of you there a very",
    "start": "61559",
    "end": "67619"
  },
  {
    "text": "happy person and fun person unfortunately I'm I'm a little bit off",
    "start": "67619",
    "end": "73200"
  },
  {
    "text": "the hook because for me controller is this it's um",
    "start": "73200",
    "end": "79100"
  },
  {
    "text": "this is actually a a cron job controller I managed to fit in this four hundred",
    "start": "79100",
    "end": "85920"
  },
  {
    "text": "lines of codes but to be honest it's almost four four hundred lines of code",
    "start": "85920",
    "end": "91350"
  },
  {
    "text": "if you count the additional utilities etc it will be more close to a thousand",
    "start": "91350",
    "end": "97079"
  },
  {
    "text": "lines of code and but the good thing it's probably the smallest controller",
    "start": "97079",
    "end": "102600"
  },
  {
    "text": "that we have in kubernetes world so but still for a newcomer it might be quite",
    "start": "102600",
    "end": "109409"
  },
  {
    "text": "overwhelming to to look through it and figure out what's going on there's a lot",
    "start": "109409",
    "end": "114570"
  },
  {
    "text": "of use cases that we are covering in every single controller so during the",
    "start": "114570",
    "end": "120229"
  },
  {
    "text": "this presentation I'm hoping to give you the core components of every single",
    "start": "120229",
    "end": "126450"
  },
  {
    "text": "controller I'm hoping that after the presentation you will feel comfortable reading the code of a controller",
    "start": "126450",
    "end": "133560"
  },
  {
    "text": "or even writing your own controller let me raise your hand whoever wrote a controller or seen a source code over",
    "start": "133560",
    "end": "140430"
  },
  {
    "text": "controller this doesn't count okay there's some of you that's that's that's",
    "start": "140430",
    "end": "146610"
  },
  {
    "text": "nice so okay these four hundred lines of code let me try to squash it up so that it's",
    "start": "146610",
    "end": "154170"
  },
  {
    "text": "more comprehendible for you that's what the controller actually looks like this",
    "start": "154170",
    "end": "159720"
  },
  {
    "text": "is the core piece of a controller so after we created the controller",
    "start": "159720",
    "end": "164870"
  },
  {
    "text": "structure we initiated with some stuff that I'll be talking about in a few moments we do Girl teen that is",
    "start": "164870",
    "end": "173640"
  },
  {
    "text": "basically doing just this it's processing every single item from the queue picking it up do whatever you want",
    "start": "173640",
    "end": "180840"
  },
  {
    "text": "to do with your controller push it back to the queue or ignore it update the status and continue this is basically",
    "start": "180840",
    "end": "188430"
  },
  {
    "text": "the entire logic of every single controller within the kubernetes world and I'm not talking when I'm talking",
    "start": "188430",
    "end": "195930"
  },
  {
    "text": "about controllers this applies to see are these as well as the core controllers all of them are working in",
    "start": "195930",
    "end": "202709"
  },
  {
    "text": "the same way but then again if you're a",
    "start": "202709",
    "end": "208680"
  },
  {
    "start": "205000",
    "end": "375000"
  },
  {
    "text": "newcomer it's pretty overwhelming where do you start how to write your own",
    "start": "208680",
    "end": "213750"
  },
  {
    "text": "controller or where to look for stuff like the one that I just mentioned so you can start like just like me when I",
    "start": "213750",
    "end": "223380"
  },
  {
    "text": "was writing my first controller the job controller back in the old days when kubernetes was small and not that many",
    "start": "223380",
    "end": "230579"
  },
  {
    "text": "folks knew about it I actually opened replication controller and reading the",
    "start": "230579",
    "end": "237359"
  },
  {
    "text": "replication controller I was replicating the same logic within the job controller it worked pretty well",
    "start": "237359",
    "end": "244819"
  },
  {
    "text": "but my advantage was at the time that I was already a kubernetes contributor for some time and I knew more or less how to",
    "start": "244819",
    "end": "252510"
  },
  {
    "text": "go through the entire kubernetes stack besides there was nothing else at the",
    "start": "252510",
    "end": "259109"
  },
  {
    "text": "time that I could actually pick it up so thankfully for you the stuff is so much",
    "start": "259109",
    "end": "265890"
  },
  {
    "text": "easier these days you have two possibilities and numbers blog posts tutorials or the simplest",
    "start": "265890",
    "end": "274330"
  },
  {
    "text": "thing just reach out to myself personally on slag there was a Twitter",
    "start": "274330",
    "end": "280120"
  },
  {
    "text": "handle github and all like everything on the first slide and I'm gonna repeat it on them on my last slide I'll be more",
    "start": "280120",
    "end": "287800"
  },
  {
    "text": "than happy to help you with anything um and additionally like I said there's so many already written controllers",
    "start": "287800",
    "end": "294570"
  },
  {
    "text": "starting from simple all the way to the super advanced controllers so this is",
    "start": "294570",
    "end": "300580"
  },
  {
    "text": "per actually part of the main kubernetes repo it's being synced with the main",
    "start": "300580",
    "end": "306190"
  },
  {
    "text": "repo and we ensured that this is always working this sample controller the",
    "start": "306190",
    "end": "311500"
  },
  {
    "text": "sample controller is very simple it is supposed to help you get started",
    "start": "311500",
    "end": "316770"
  },
  {
    "text": "unfortunately writing controllers these days still requires writing some amount",
    "start": "316770",
    "end": "324310"
  },
  {
    "text": "of boilerplate and that's unfortunately something that we are hard working on to",
    "start": "324310",
    "end": "330070"
  },
  {
    "text": "get rid of but you need to know the boilerplate more or less to feel",
    "start": "330070",
    "end": "335200"
  },
  {
    "text": "comfortable with the rest there's other project that sets up the boilerplate for",
    "start": "335200",
    "end": "342010"
  },
  {
    "text": "you if you use queue builder queue builder is very helpful if you're",
    "start": "342010",
    "end": "347290"
  },
  {
    "text": "starting with building your own CR these it will generate that the types that go for you it will generate the the",
    "start": "347290",
    "end": "355810"
  },
  {
    "text": "framework for your controller and you can actually focus only on filling in",
    "start": "355810",
    "end": "362020"
  },
  {
    "text": "the logic but then again it is nice to know the base details for what fits with",
    "start": "362020",
    "end": "370090"
  },
  {
    "text": "which block and how the the blocks should interact with each other that",
    "start": "370090",
    "end": "376150"
  },
  {
    "start": "375000",
    "end": "485000"
  },
  {
    "text": "that make sense so far okay so ahead of us there's nifty grifted details we're",
    "start": "376150",
    "end": "384340"
  },
  {
    "text": "gonna be looking at some code I promise it won't be that hard and but I'm not",
    "start": "384340",
    "end": "391120"
  },
  {
    "text": "going to be throwing at you tons and tons of code as well because like I said there's the sample controller and the",
    "start": "391120",
    "end": "397720"
  },
  {
    "text": "queue builder that are very helpful too to get started so let me rish oh you",
    "start": "397720",
    "end": "404940"
  },
  {
    "text": "back of the main control loop and within that loop there are three elements that",
    "start": "404940",
    "end": "411180"
  },
  {
    "text": "I can already point you that we will be focusing on the first one is actually we're looking at the process next item",
    "start": "411180",
    "end": "418229"
  },
  {
    "text": "is the queue the second one will be the sync handler and this has to be",
    "start": "418229",
    "end": "423300"
  },
  {
    "text": "something that is filling in the queue so let's start with the Q the Q is pretty simple topic are you familiar",
    "start": "423300",
    "end": "431639"
  },
  {
    "text": "with queues generally that's a first hand fist up first out queue there's no",
    "start": "431639",
    "end": "437310"
  },
  {
    "text": "magic behind it you can set it up pretty easily there are several rate limiters",
    "start": "437310",
    "end": "444060"
  },
  {
    "text": "available within the cube project the default one and the other ones are",
    "start": "444060",
    "end": "449639"
  },
  {
    "text": "exponential failure rate limiter there's a fast slow rate limiter and there you",
    "start": "449639",
    "end": "454800"
  },
  {
    "text": "can you can also combine the limiters using Max of rate limiters although",
    "start": "454800",
    "end": "461550"
  },
  {
    "text": "personally I'm always using the the exponential fail rate limiter so that's",
    "start": "461550",
    "end": "468270"
  },
  {
    "text": "pretty obvious there's no magic behind it you put stuff into the queue you put it you take it out and the in the sync",
    "start": "468270",
    "end": "474750"
  },
  {
    "text": "loop and the work keeps going on over and over again so the most important",
    "start": "474750",
    "end": "480510"
  },
  {
    "text": "piece of every single controller is this the sheraton formers remember the cron",
    "start": "480510",
    "end": "488789"
  },
  {
    "start": "485000",
    "end": "640000"
  },
  {
    "text": "job controller that I showed you at the beginning of all the controllers that I showed you please do not take the cron",
    "start": "488789",
    "end": "497250"
  },
  {
    "text": "job controller as an example I wrote it but it has a major flaw that major flow",
    "start": "497250",
    "end": "506430"
  },
  {
    "text": "is that it is not using the Sheraton formers and the reason for that there is",
    "start": "506430",
    "end": "511500"
  },
  {
    "text": "a like very important reason the cron job controller was written before the",
    "start": "511500",
    "end": "516930"
  },
  {
    "text": "Sheraton formats were introduced I need to find the time to rewrite this the",
    "start": "516930",
    "end": "524250"
  },
  {
    "text": "cron job controller to use the Sheraton formers and it's the cron job controller",
    "start": "524250",
    "end": "531209"
  },
  {
    "text": "is slightly different than all the other con colors so it takes a little more time",
    "start": "531209",
    "end": "537480"
  },
  {
    "text": "for me to actually pick it up and and improve it if you have the time if",
    "start": "537480",
    "end": "542730"
  },
  {
    "text": "you're willing to do it I'll be more than happy to help you with this as well so let me know and you know we can get",
    "start": "542730",
    "end": "549750"
  },
  {
    "text": "some code cranking going on so the Sheraton format what it is that's",
    "start": "549750",
    "end": "555360"
  },
  {
    "text": "the funny thing I was looking through the entire kubernetes repo every kubernetes repo of every coronaries",
    "start": "555360",
    "end": "561769"
  },
  {
    "text": "developer if you ask him yeah yeah I know what I sure it informer is everybody everyone should be using it",
    "start": "561769",
    "end": "568800"
  },
  {
    "text": "and everyone are using it but there's to be honest there's no documentation about",
    "start": "568800",
    "end": "574439"
  },
  {
    "text": "what I shared Informer is it's it's this type of tribal knowledge that everyone",
    "start": "574439",
    "end": "581339"
  },
  {
    "text": "has that everyone possess but nobody is actually competent enough to write a dog",
    "start": "581339",
    "end": "588180"
  },
  {
    "text": "about it or even explain you in like human words what it does so I'm gonna",
    "start": "588180",
    "end": "595860"
  },
  {
    "text": "I'm gonna try so that's the definition that I put together so Sheraton former",
    "start": "595860",
    "end": "601920"
  },
  {
    "text": "is the shared data cache and it is distributing the data to all the",
    "start": "601920",
    "end": "609509"
  },
  {
    "text": "listeners that are interested in in knowing about the changes that are happening to those data towards the end",
    "start": "609509",
    "end": "616439"
  },
  {
    "text": "I have a pretty nifty picture that is",
    "start": "616439",
    "end": "622529"
  },
  {
    "text": "summarizing the interactions in the controller and that is actually focusing a lot on the Sheraton formers a lot so",
    "start": "622529",
    "end": "630540"
  },
  {
    "text": "I'm hoping that that that will help you to to get the I and get the idea more or",
    "start": "630540",
    "end": "637970"
  },
  {
    "text": "much better so the most important part of the Sheraton formers is the event",
    "start": "637970",
    "end": "644670"
  },
  {
    "start": "640000",
    "end": "820000"
  },
  {
    "text": "handlers this is how you register your interest in specific of object updates",
    "start": "644670",
    "end": "652279"
  },
  {
    "text": "whether that will be a a addition of an object creation of an object an update",
    "start": "652279",
    "end": "659339"
  },
  {
    "text": "to the object or removal of the objects there are three functions that you need to register your interest in",
    "start": "659339",
    "end": "667050"
  },
  {
    "text": "and basically if you look at every single controller that it is available out there all they do is they will look",
    "start": "667050",
    "end": "674750"
  },
  {
    "text": "what up what was what was sent in the eventlistener and they will put the the information",
    "start": "674750",
    "end": "681899"
  },
  {
    "text": "about that object into the queue sometimes the update handler is a little",
    "start": "681899",
    "end": "688950"
  },
  {
    "text": "bit more complicated in that it will verify if it's actually needed for the contour for the controller to process",
    "start": "688950",
    "end": "696300"
  },
  {
    "text": "the data during the sync loop does that",
    "start": "696300",
    "end": "702959"
  },
  {
    "text": "make sense so far this is the crucial bit basically of every single controller",
    "start": "702959",
    "end": "708240"
  },
  {
    "text": "the other important element of that cache that we just talked about it which",
    "start": "708240",
    "end": "714420"
  },
  {
    "text": "is a shared Informer is the Lister's there was a pretty good question",
    "start": "714420",
    "end": "721079"
  },
  {
    "text": "about two days ago during the contributor summit why the Lister's interface is different from the client",
    "start": "721079",
    "end": "728550"
  },
  {
    "text": "go and why would you use a listers versus regular client go so the reasons",
    "start": "728550",
    "end": "735510"
  },
  {
    "text": "for using Lister's is they are designed specifically for to be used within controllers they have the access to the",
    "start": "735510",
    "end": "743130"
  },
  {
    "text": "cache using client go you always hit the API server and obviously if you're",
    "start": "743130",
    "end": "750570"
  },
  {
    "text": "working with I don't know ten thousand deployments or even more you do care",
    "start": "750570",
    "end": "757260"
  },
  {
    "text": "about using the cache as much as possible rather than going back to the",
    "start": "757260",
    "end": "763020"
  },
  {
    "text": "API server this is the problem within the cron job contourer cron job controller currently lists",
    "start": "763020",
    "end": "771350"
  },
  {
    "text": "which is very expensive operation lists all the cron jobs within the cluster and",
    "start": "771350",
    "end": "777870"
  },
  {
    "text": "lists all the jobs within the cluster to be able to identify with jobs much to",
    "start": "777870",
    "end": "783480"
  },
  {
    "text": "which controller and what to do with them this is super expensive operation I",
    "start": "783480",
    "end": "788579"
  },
  {
    "text": "know that there are companies that are using cron jobs up to a couple thousands and it is working fine but with my",
    "start": "788579",
    "end": "797699"
  },
  {
    "text": "knowledge of the controller and what I do told you it will be harder if they exceed the number a little bit higher so",
    "start": "797699",
    "end": "805710"
  },
  {
    "text": "the Sheraton former's is the key for working with controllers so you add the",
    "start": "805710",
    "end": "811360"
  },
  {
    "text": "informers and then you yeah you register the event handlers and then you say for",
    "start": "811360",
    "end": "818920"
  },
  {
    "text": "yourself the the Lister's and now we go to the main loop this is where you",
    "start": "818920",
    "end": "825370"
  },
  {
    "start": "820000",
    "end": "1065000"
  },
  {
    "text": "actually implement the logic of your controller let's step by let's go one",
    "start": "825370",
    "end": "831910"
  },
  {
    "text": "line by one so the cue that I've mentioned you at the beginning is not",
    "start": "831910",
    "end": "837370"
  },
  {
    "text": "storing the actual objects it is storing something that we called a meta",
    "start": "837370",
    "end": "843070"
  },
  {
    "text": "namespace key which is basically a namespace and the name of the resource",
    "start": "843070",
    "end": "849870"
  },
  {
    "text": "bundled together there are even specific helper methods",
    "start": "849870",
    "end": "855430"
  },
  {
    "text": "that are designed to encode and decode those keys back and forth to namespace",
    "start": "855430",
    "end": "861820"
  },
  {
    "text": "name and and and in the other directions so that will be the first invocation of",
    "start": "861820",
    "end": "867100"
  },
  {
    "text": "every sync handler in your code to get the namespace of the resource that you",
    "start": "867100",
    "end": "872800"
  },
  {
    "text": "want to work with and the specific name of the resource after you've done with",
    "start": "872800",
    "end": "878200"
  },
  {
    "text": "that you will actually get the object from the cache depending of your",
    "start": "878200",
    "end": "886300"
  },
  {
    "text": "controller you might be getting more than just one object in my particular case I'm just getting apart because if I",
    "start": "886300",
    "end": "893560"
  },
  {
    "text": "would try to put more resources here then obviously that wouldn't won't fit into into the screen and I was very I",
    "start": "893560",
    "end": "900460"
  },
  {
    "text": "was very inclined to fill in as much of the code but not too much into the slide",
    "start": "900460",
    "end": "906940"
  },
  {
    "text": "does that make sense so far okay and here goes the most important thing of",
    "start": "906940",
    "end": "913390"
  },
  {
    "text": "all right after the Sheraton formers because you're using a shared cache all",
    "start": "913390",
    "end": "920950"
  },
  {
    "text": "the resources you're getting are come you're not getting a life you're not",
    "start": "920950",
    "end": "927070"
  },
  {
    "text": "getting a a an object you're getting a pointer",
    "start": "927070",
    "end": "932920"
  },
  {
    "text": "to the cash object which means if you're just reading the object you're fine you",
    "start": "932920",
    "end": "940149"
  },
  {
    "text": "don't have to do anything if you want to modify the object you need to invoke",
    "start": "940149",
    "end": "945220"
  },
  {
    "text": "deep copy on the object that was specifically that was purposefully done",
    "start": "945220",
    "end": "951610"
  },
  {
    "text": "for the contour for the controllers but every single controller writer has to",
    "start": "951610",
    "end": "957699"
  },
  {
    "text": "remember that we had tons of problems when we switched to this pattern",
    "start": "957699",
    "end": "962709"
  },
  {
    "text": "currently there were some weird controllers stuff happening if you don't",
    "start": "962709",
    "end": "968260"
  },
  {
    "text": "do that so always ensure to do a deep copy but be careful deep copy is very expensive",
    "start": "968260",
    "end": "974889"
  },
  {
    "text": "operation as well so only do deep copy if you will be modifying the object the",
    "start": "974889",
    "end": "981010"
  },
  {
    "text": "current deployment controller has a nice to do next to the deep copy we're doing the copy to soon because it's like",
    "start": "981010",
    "end": "988360"
  },
  {
    "text": "fourth operation in the sync handler if you go through the deployment controller so you should be 100% sure that yes I'm",
    "start": "988360",
    "end": "997480"
  },
  {
    "text": "gonna be updating the object and that I should do the deep copy that's pretty",
    "start": "997480",
    "end": "1004320"
  },
  {
    "text": "much it you should be now focusing on your logic your entire logic of your deployment",
    "start": "1004320",
    "end": "1009480"
  },
  {
    "text": "your job controller replica said whatever the controller you're working",
    "start": "1009480",
    "end": "1014730"
  },
  {
    "text": "on is actually where you put that the job controller will be looking through",
    "start": "1014730",
    "end": "1020070"
  },
  {
    "text": "the spec ensuring that there's this many pause running at the time fine I'm done I'm going to update the status yes it's",
    "start": "1020070",
    "end": "1026819"
  },
  {
    "text": "fine if I need to the deployment controller will ensure that yes there is a replica set created that it matches",
    "start": "1026819",
    "end": "1033120"
  },
  {
    "text": "the dispatch that the user provided the diamond set controller will ensure that",
    "start": "1033120",
    "end": "1038428"
  },
  {
    "text": "yes there is a pod running on every single note etc etc etc this is how",
    "start": "1038429",
    "end": "1043740"
  },
  {
    "text": "simple it actually is I know that I've heard lots of people saying that well",
    "start": "1043740",
    "end": "1049410"
  },
  {
    "text": "writing controllers is very hard but for me personally controllers are probably",
    "start": "1049410",
    "end": "1055710"
  },
  {
    "text": "the simplest things in the entire cube there are Hardware stuff like the API",
    "start": "1055710",
    "end": "1060809"
  },
  {
    "text": "machinery and that is a pain for me personally",
    "start": "1060809",
    "end": "1065870"
  },
  {
    "start": "1065000",
    "end": "1125000"
  },
  {
    "text": "okay remember the picture that I mention you this is basically how every how the",
    "start": "1065870",
    "end": "1071429"
  },
  {
    "text": "shirt and former's are interacting with the controllers and all the credit goes to this guy here either than I didn't",
    "start": "1071429",
    "end": "1080760"
  },
  {
    "text": "did I didn't do it and it pretty nicely depicts how the kubernetes api how the",
    "start": "1080760",
    "end": "1087600"
  },
  {
    "text": "shirt and formers are listening to changes coming from the kubernetes api and how they are then pushing those",
    "start": "1087600",
    "end": "1095700"
  },
  {
    "text": "changes to all the listeners and then the controllers are responsible for the",
    "start": "1095700",
    "end": "1101419"
  },
  {
    "text": "event handlers to place the information",
    "start": "1101419",
    "end": "1106860"
  },
  {
    "text": "about yes this object of mine was updated I'm gonna put it in the queue and then I'm gonna take it from the",
    "start": "1106860",
    "end": "1113429"
  },
  {
    "text": "queue do whatever I want to do within my controller update the resource status and on and on",
    "start": "1113429",
    "end": "1120990"
  },
  {
    "text": "and on does that make sense okay so as a",
    "start": "1120990",
    "end": "1126600"
  },
  {
    "start": "1125000",
    "end": "1370000"
  },
  {
    "text": "closing remarks let me let me show you with some ground rules for every single",
    "start": "1126600",
    "end": "1133500"
  },
  {
    "text": "controller within the kubernetes ecosystem there are there are there's a",
    "start": "1133500",
    "end": "1141029"
  },
  {
    "text": "link also in the contributors repo so",
    "start": "1141029",
    "end": "1146309"
  },
  {
    "text": "that you can read a little bit more but here are the eleven rules always operate on a single item at a time by by single",
    "start": "1146309",
    "end": "1155100"
  },
  {
    "text": "I mean if you're working with replication controllers it will be one replication controller but obviously a",
    "start": "1155100",
    "end": "1160770"
  },
  {
    "text": "replication controller operates on that replication controller but also on all",
    "start": "1160770",
    "end": "1165779"
  },
  {
    "text": "the parts that it is managing so it one resource at a time doesn't mean",
    "start": "1165779",
    "end": "1171480"
  },
  {
    "text": "literally just one resource because it won't be possible and feasible to do it a job will be always a job and that many",
    "start": "1171480",
    "end": "1179669"
  },
  {
    "text": "job that many parts that every single job instance is managing at a time so",
    "start": "1179669",
    "end": "1185460"
  },
  {
    "text": "that's very important number two you need to ensure that you are not",
    "start": "1185460",
    "end": "1192200"
  },
  {
    "text": "hard-coding any ordering between the items that you are processing in the",
    "start": "1192200",
    "end": "1197309"
  },
  {
    "text": "queue it should be entirely random there should not be any interconnection",
    "start": "1197309",
    "end": "1203250"
  },
  {
    "text": "between the objects that you are working on remember this is highly reliable super",
    "start": "1203250",
    "end": "1209700"
  },
  {
    "text": "scaled big system at the end of the day that we were talking about you shredded",
    "start": "1209700",
    "end": "1216630"
  },
  {
    "text": "Informer's this is highlighted and I've talked about it I've given you example",
    "start": "1216630",
    "end": "1221760"
  },
  {
    "text": "of poorly written controller or rather not updated yet but I'm working on it I",
    "start": "1221760",
    "end": "1228480"
  },
  {
    "text": "promise you there's one thing that I",
    "start": "1228480",
    "end": "1233580"
  },
  {
    "text": "haven't mentioned at the at the beginning of your controllers when you",
    "start": "1233580",
    "end": "1239070"
  },
  {
    "text": "are setting up everything you need to wait for the caches to be ready so",
    "start": "1239070",
    "end": "1244950"
  },
  {
    "text": "there's a nicely function that you just need to wait for to notify your",
    "start": "1244950",
    "end": "1250679"
  },
  {
    "text": "controller that yes the caches are ready they synced it might take some time at the beginning of the controller if you",
    "start": "1250679",
    "end": "1257910"
  },
  {
    "text": "forget about it it might happen that the initial actions of your controller will",
    "start": "1257910",
    "end": "1263550"
  },
  {
    "text": "not be reflecting the actual state of the of the cluster which is obviously as",
    "start": "1263550",
    "end": "1268800"
  },
  {
    "text": "bad as well in the long run it will be fine but the startup will be very bad so",
    "start": "1268800",
    "end": "1275400"
  },
  {
    "text": "you ensure that you wait for that I said",
    "start": "1275400",
    "end": "1282510"
  },
  {
    "text": "it before but I'm gonna repeat it there are a direct there are other actors in",
    "start": "1282510",
    "end": "1287550"
  },
  {
    "text": "the system so you're not the only controller be mindful when you're writing stuff to the API you need to be",
    "start": "1287550",
    "end": "1295980"
  },
  {
    "text": "prepared that for example when you're updating your resource there might be a",
    "start": "1295980",
    "end": "1301800"
  },
  {
    "text": "conflict because somebody else in the meantime updated your resource your controller",
    "start": "1301800",
    "end": "1307470"
  },
  {
    "text": "has to be prepared for the conflicts you need to resync your object once again or",
    "start": "1307470",
    "end": "1313740"
  },
  {
    "text": "repeat your update process ensure that",
    "start": "1313740",
    "end": "1321000"
  },
  {
    "text": "you are providing to users a reasonable error messages for your controllers",
    "start": "1321000",
    "end": "1328110"
  },
  {
    "text": "there are events and the events is the best options for you as a controller author to provide",
    "start": "1328110",
    "end": "1336200"
  },
  {
    "text": "information if there's any error happening with your resource that you cannot update it properly and queue the",
    "start": "1336200",
    "end": "1343460"
  },
  {
    "text": "same object once again so that it will be recent in a while again and maybe the",
    "start": "1343460",
    "end": "1349940"
  },
  {
    "text": "error is just a temporary issue that will be will be gone within a couple minutes we need to ensure that",
    "start": "1349940",
    "end": "1356120"
  },
  {
    "text": "kubernetes always keeps running and no matter what it has to provide constant",
    "start": "1356120",
    "end": "1363100"
  },
  {
    "text": "functionality to the users the the last",
    "start": "1363100",
    "end": "1372350"
  },
  {
    "start": "1370000",
    "end": "1430000"
  },
  {
    "text": "two that I'm gonna be talking about are very specific to your use case first one",
    "start": "1372350",
    "end": "1377899"
  },
  {
    "text": "is something that we called observed generation this is basically if your",
    "start": "1377899",
    "end": "1384169"
  },
  {
    "text": "resource provides something that is called a generation which means you are",
    "start": "1384169",
    "end": "1391010"
  },
  {
    "text": "encoding within the object specification and information that yes there's",
    "start": "1391010",
    "end": "1396140"
  },
  {
    "text": "something new happening to the object and the controller should pick it up you need to you should provide that",
    "start": "1396140",
    "end": "1404000"
  },
  {
    "text": "information in the observed generation field in the metadata of an object for example currently job controller I know",
    "start": "1404000",
    "end": "1413480"
  },
  {
    "text": "I'm gonna be talking about both job and cron job controller and the reason is that I know all about the box that they",
    "start": "1413480",
    "end": "1419510"
  },
  {
    "text": "have because I wrote both of them the job controller has this problem I'm",
    "start": "1419510",
    "end": "1424549"
  },
  {
    "text": "honest with all of that the job controller has this following problem it",
    "start": "1424549",
    "end": "1430870"
  },
  {
    "text": "currently requires all the parts created by the job controller to exist all the",
    "start": "1430870",
    "end": "1437390"
  },
  {
    "text": "time it's fine if your job is creating ten a hundred maybe a thousand parts but it",
    "start": "1437390",
    "end": "1444830"
  },
  {
    "text": "will be a problem if your job will start creating ten thousand a hundred thousand or a million parts the reason for that",
    "start": "1444830",
    "end": "1452299"
  },
  {
    "text": "is the current calculation that we have for the status of the job is based on the pots that finished or are currently",
    "start": "1452299",
    "end": "1460460"
  },
  {
    "text": "running or are to be run we should be calculating the status",
    "start": "1460460",
    "end": "1465680"
  },
  {
    "text": "based on a generation we should be encoding the information that yes these parts were already processed and updated",
    "start": "1465680",
    "end": "1476030"
  },
  {
    "text": "in the status and for that we should be using generation information it's slightly more complicated if you want to",
    "start": "1476030",
    "end": "1482180"
  },
  {
    "text": "know more about it please reach out to me I'll be more than happy to help to answer you maybe a little bit simpler",
    "start": "1482180",
    "end": "1488680"
  },
  {
    "text": "example is deployment so whenever you're updating deployment if there is a",
    "start": "1488680",
    "end": "1494780"
  },
  {
    "text": "modification to the specification of a deployment we're going to update the generation number to a higher number and",
    "start": "1494780",
    "end": "1500450"
  },
  {
    "text": "the controller just reads that instead of comparing the entire spec and the",
    "start": "1500450",
    "end": "1506810"
  },
  {
    "text": "last one is something that I did not talk about it before and I specifically won't want to cover at the end is owner",
    "start": "1506810",
    "end": "1515900"
  },
  {
    "text": "references owner reference this is a topic that we put together about two",
    "start": "1515900",
    "end": "1522440"
  },
  {
    "text": "releases two three releases ago this is about embedding the information about",
    "start": "1522440",
    "end": "1528770"
  },
  {
    "text": "your parents and the objects that you are creating for example a job",
    "start": "1528770",
    "end": "1534620"
  },
  {
    "text": "controller would put a owner a reference information within all the parts that it",
    "start": "1534620",
    "end": "1540410"
  },
  {
    "text": "is creating why it is important this is important when you are removing the",
    "start": "1540410",
    "end": "1545420"
  },
  {
    "text": "objects if I'm removing my job the majority of time I want all the parts",
    "start": "1545420",
    "end": "1552500"
  },
  {
    "text": "that are connected that are created by the job to be gone as well the current garbage collection mechanism",
    "start": "1552500",
    "end": "1559370"
  },
  {
    "text": "that we have within the kubernetes is looking at the owner references you can",
    "start": "1559370",
    "end": "1565040"
  },
  {
    "text": "explicitly say I don't care about the kids just leave them I want to have just my job removed but the default behavior is",
    "start": "1565040",
    "end": "1573520"
  },
  {
    "text": "remove job and all the parts and actually the Cronk the garbage",
    "start": "1573520",
    "end": "1579380"
  },
  {
    "text": "collection will find figure it out all the parts first remove the parts first",
    "start": "1579380",
    "end": "1585530"
  },
  {
    "text": "and only the job at the end obviously for for the job controller and pots",
    "start": "1585530",
    "end": "1591200"
  },
  {
    "text": "that's very simple there's only one level but for a deployment deployment creates replicas",
    "start": "1591200",
    "end": "1597380"
  },
  {
    "text": "which creates parts if you would be manually removing that and we were doing",
    "start": "1597380",
    "end": "1603110"
  },
  {
    "text": "that in a cube CTL command delete and cube CTL delete command then that was a",
    "start": "1603110",
    "end": "1608600"
  },
  {
    "text": "pain because we had to remove all the parts and we had to remove all the replicas set and only after that we were",
    "start": "1608600",
    "end": "1614270"
  },
  {
    "text": "able to remove the actual deployment with the garbage collection all you all",
    "start": "1614270",
    "end": "1619880"
  },
  {
    "text": "the deployment controller has to do is set the owner references appropriately at the replication controller the",
    "start": "1619880",
    "end": "1627230"
  },
  {
    "text": "replica replica set controller will set the owner references at the pod level then when I removing the deployment all",
    "start": "1627230",
    "end": "1635990"
  },
  {
    "text": "the way down is happening automatically because the garbage collection is looking at the owner references that's",
    "start": "1635990",
    "end": "1642860"
  },
  {
    "text": "it that is actually pretty straightforward idea the only reference is something like a",
    "start": "1642860",
    "end": "1647900"
  },
  {
    "text": "namespace and name and the type of the resource that owns the object that's",
    "start": "1647900",
    "end": "1654590"
  },
  {
    "text": "basically it um and that's basically all I had for you if you have any questions",
    "start": "1654590",
    "end": "1660380"
  },
  {
    "text": "I'll be more than happy to answer all of them [Applause] [Music]",
    "start": "1660380",
    "end": "1669079"
  },
  {
    "text": "sure yeah sure",
    "start": "1672830",
    "end": "1681690"
  },
  {
    "start": "1680000",
    "end": "1740000"
  },
  {
    "text": "uh the question was how it relates to the operator framework well the operator framework is it's very",
    "start": "1681690",
    "end": "1689460"
  },
  {
    "text": "similar to the controller you might say it is more to help you operate other",
    "start": "1689460",
    "end": "1694530"
  },
  {
    "text": "stuff and operator will be more targeted I specific at a specific application",
    "start": "1694530",
    "end": "1700760"
  },
  {
    "text": "like in the case that we have a TC d operator the a TC d operator know how to",
    "start": "1700760",
    "end": "1706110"
  },
  {
    "text": "interact with TC d specifically it has the knowledge of the the carrier key and",
    "start": "1706110",
    "end": "1713039"
  },
  {
    "text": "everything how dat dat C D should work so it is somehow a controller but it is",
    "start": "1713039",
    "end": "1719580"
  },
  {
    "text": "specific to running a particular application a controller is for running a particular resource within the",
    "start": "1719580",
    "end": "1726360"
  },
  {
    "text": "kubernetes ecosystem whether that be L deployment whether that'll be your particular CRD so that's that's",
    "start": "1726360",
    "end": "1734220"
  },
  {
    "text": "basically oh yeah that is a very good",
    "start": "1734220",
    "end": "1742080"
  },
  {
    "start": "1740000",
    "end": "1865000"
  },
  {
    "text": "question um so the question was about writing controllers in different",
    "start": "1742080",
    "end": "1748169"
  },
  {
    "text": "languages actually here was python and you have a like a beer for me just for asking about Python so unfortunately the",
    "start": "1748169",
    "end": "1758340"
  },
  {
    "text": "shirt and former's are not available in any other language then go and that is the biggest problem client go I mean",
    "start": "1758340",
    "end": "1766440"
  },
  {
    "text": "there are clients for kubernetes api in other languages and python was actually",
    "start": "1766440",
    "end": "1772080"
  },
  {
    "text": "the second one right after go there are java and something else but I can't",
    "start": "1772080",
    "end": "1779820"
  },
  {
    "text": "remember that are being generated from the API the only downside currently is",
    "start": "1779820",
    "end": "1785640"
  },
  {
    "text": "that you would have to implement your own shared and foremost type of a",
    "start": "1785640",
    "end": "1790650"
  },
  {
    "text": "functionality or you are dealing basically with the problems of interacting with the with the kubernetes",
    "start": "1790650",
    "end": "1799080"
  },
  {
    "text": "api directly instead of through the cache which is obviously the benefit of having",
    "start": "1799080",
    "end": "1805550"
  },
  {
    "text": "and not having a cache is a significant a significant problem but that but then",
    "start": "1805550",
    "end": "1811940"
  },
  {
    "text": "again it's fun and I think somebody wrote and actually a controller with Python for yeah that's that's awesome so",
    "start": "1811940",
    "end": "1820460"
  },
  {
    "text": "I would like to see that happening well I I remember that during the community summit we discussed about the shirt and",
    "start": "1820460",
    "end": "1829360"
  },
  {
    "start": "1865000",
    "end": "2085000"
  },
  {
    "text": "I'm not sure if I correctly understood you're asking about running controllers in a pod",
    "start": "1865300",
    "end": "1871430"
  },
  {
    "text": "your CRT controller in a pod or that's something huh yes okay",
    "start": "1871430",
    "end": "1880610"
  },
  {
    "text": "so currently in the coronaries all the controllers each controller is a",
    "start": "1880610",
    "end": "1885860"
  },
  {
    "text": "separate mechanism each is running in their own guru teen as is so if we're",
    "start": "1885860",
    "end": "1892160"
  },
  {
    "text": "talking about the CR DS every CR D will have their own controller because controller is always tied to a specific",
    "start": "1892160",
    "end": "1898900"
  },
  {
    "text": "type of a resource so yes in that case every CR D every odd every difference er",
    "start": "1898900",
    "end": "1905720"
  },
  {
    "text": "D but not instances like might you know",
    "start": "1905720",
    "end": "1911000"
  },
  {
    "text": "what I mean every instance of your CR D is not but the type overall has just one",
    "start": "1911000",
    "end": "1917030"
  },
  {
    "text": "controller for your but different CR these will have different controllers",
    "start": "1917030",
    "end": "1922870"
  },
  {
    "text": "does that answer your question more or less yeah well we can talk sure",
    "start": "1923350",
    "end": "1931210"
  },
  {
    "text": "so there are there are different levels how you can control how you should test your your controller there's no specific",
    "start": "1939640",
    "end": "1947900"
  },
  {
    "text": "patterns or recommendation obviously the",
    "start": "1947900",
    "end": "1953000"
  },
  {
    "text": "sink handler method will be the most important and the most heavily tested element in all the controllers if you go",
    "start": "1953000",
    "end": "1960260"
  },
  {
    "text": "through the current cork Banaras controllers the sink header where you feed the sink handler with some data in",
    "start": "1960260",
    "end": "1967370"
  },
  {
    "text": "and expect that at the end of the of the execution this state will be this and",
    "start": "1967370",
    "end": "1972860"
  },
  {
    "text": "not the other way around so for example for both job and cron job we have a lot",
    "start": "1972860",
    "end": "1978770"
  },
  {
    "text": "of tests and we're like literally good",
    "start": "1978770",
    "end": "1984260"
  },
  {
    "text": "couple hundred of table tests for just the specific use cases and whenever I'm",
    "start": "1984260",
    "end": "1989960"
  },
  {
    "text": "adding some new use cases because somebody created a buck or something I'm always trying to add those use cases",
    "start": "1989960",
    "end": "1997870"
  },
  {
    "text": "into those tables the tables are pretty nifty themselves but it takes a while to",
    "start": "1997870",
    "end": "2005110"
  },
  {
    "text": "get used to it because we we created lots of one letter variables so that you",
    "start": "2005110",
    "end": "2012370"
  },
  {
    "text": "can fit in in one line the entire specification for a test so it takes a",
    "start": "2012370",
    "end": "2018940"
  },
  {
    "text": "while every even for me sometimes when I'm returning to that oh yeah ok this is this this is that but it's at the end of",
    "start": "2018940",
    "end": "2026440"
  },
  {
    "text": "the day it it works pretty well and then that that covers the main functionality and then you need to have a été test",
    "start": "2026440",
    "end": "2035110"
  },
  {
    "text": "that will be actually stress testing your your particular controller whether it is interacting the way you expect it",
    "start": "2035110",
    "end": "2041950"
  },
  {
    "text": "to be and that includes creating deleting scaling up down removing parts",
    "start": "2041950",
    "end": "2049148"
  },
  {
    "text": "from the controller if you're managing parts or braking and ensuring that the",
    "start": "2049149",
    "end": "2056470"
  },
  {
    "text": "controller will pick it up the way you design it to be there's no patterns by itself but it's",
    "start": "2056470",
    "end": "2062500"
  },
  {
    "text": "these two areas that you will be focusing on for your tests sure oh there is nothing",
    "start": "2062500",
    "end": "2086649"
  },
  {
    "start": "2085000",
    "end": "2120000"
  },
  {
    "text": "like that to send notifications between the controllers you're always none of the current",
    "start": "2086650",
    "end": "2093700"
  },
  {
    "text": "controllers is running or actually we are if we are running the same controllers there always have the leader",
    "start": "2093700",
    "end": "2100990"
  },
  {
    "text": "that is actually working on it and the backup one as you know so that it picks",
    "start": "2100990",
    "end": "2106630"
  },
  {
    "text": "it up there's only one controller of any kind running once at a time at least",
    "start": "2106630",
    "end": "2111820"
  },
  {
    "text": "that's the that's the implementation that we have in OpenShift we always try",
    "start": "2111820",
    "end": "2122020"
  },
  {
    "start": "2120000",
    "end": "2175000"
  },
  {
    "text": "to keep some kind of a leader election for the controllers there's only one running at a time I like all of them are",
    "start": "2122020",
    "end": "2127300"
  },
  {
    "text": "running but only one is actually picking up the work that's that's that's what we implemented an open ship and if you look",
    "start": "2127300",
    "end": "2133390"
  },
  {
    "text": "at the kubernetes it I think they have something like that similarly two",
    "start": "2133390",
    "end": "2139090"
  },
  {
    "text": "different contours is a separate thing and like I said you cannot escape from",
    "start": "2139090",
    "end": "2144430"
  },
  {
    "text": "the fact that there are other actors in the system you just need to be prepared to reevaluate the same object once again",
    "start": "2144430",
    "end": "2153220"
  },
  {
    "text": "upon conflict or upon any other upon any other problem oh there was somebody else",
    "start": "2153220",
    "end": "2160960"
  },
  {
    "text": "that I had a question before I'm not sure if he left or okay go ahead",
    "start": "2160960",
    "end": "2168150"
  },
  {
    "start": "2175000",
    "end": "2242000"
  },
  {
    "text": "that depends on the order but we're trying hard to to have the core",
    "start": "2175210",
    "end": "2181100"
  },
  {
    "text": "controllers being part of the confirming suit Oh",
    "start": "2181100",
    "end": "2194530"
  },
  {
    "text": "there are several it also depends because some tests are specifically for",
    "start": "2194750",
    "end": "2204040"
  },
  {
    "text": "performance testing there will be in a separate suit but generally they all live in a one place it'll be only",
    "start": "2204040",
    "end": "2211150"
  },
  {
    "text": "labeled differently whether yeah the tags whether you want to have these run",
    "start": "2211150",
    "end": "2216200"
  },
  {
    "text": "as a confirm is for the conformance we're trying to focus only on the car functionality of every single controller",
    "start": "2216200",
    "end": "2222680"
  },
  {
    "text": "to be actually run within the conformers because then that also applies to all",
    "start": "2222680",
    "end": "2227870"
  },
  {
    "text": "the kubernetes distributions if you want to be a certified kubernetes distribution you need to pass all the",
    "start": "2227870",
    "end": "2234080"
  },
  {
    "text": "conformance testing ok thank you very much have a good lunch",
    "start": "2234080",
    "end": "2240720"
  },
  {
    "text": "[Applause]",
    "start": "2240720",
    "end": "2244390"
  }
]