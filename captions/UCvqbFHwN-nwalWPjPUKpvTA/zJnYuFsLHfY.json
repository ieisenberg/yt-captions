[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "good morning thank you all for coming this this is quite a crowd and it's not",
    "start": "60",
    "end": "5879"
  },
  {
    "text": "me that's obviously a testament to how popular and yeah the history of project",
    "start": "5879",
    "end": "11580"
  },
  {
    "text": "is how much interest everybody's gone in so this is this is awesome to see my name is Matt Turner I tweet and have a",
    "start": "11580",
    "end": "17850"
  },
  {
    "text": "website as you might imagine I'm a software engineer at Tetris we're a startup doing SEO and service mesh",
    "start": "17850",
    "end": "23570"
  },
  {
    "text": "related stuff we are of course hiring that's all I'll say on that and I'm here",
    "start": "23570",
    "end": "29070"
  },
  {
    "text": "to talk to you about SEO specifically the packets I view so what that means is",
    "start": "29070",
    "end": "35250"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "what we're going to try to learn today is how a packet traverses through an sto system and obviously that leans heavily",
    "start": "35250",
    "end": "40950"
  },
  {
    "text": "on the Envoy proxy as you probably know and the exposition I'm going to give is sto in a kubernetes cluster because",
    "start": "40950",
    "end": "46950"
  },
  {
    "text": "that's by far the most common deployment scenario and hopefully this is coupon we should all know a little bit of our",
    "start": "46950",
    "end": "52620"
  },
  {
    "text": "communities so already so that's that's the easiest way to explain it as well this isn't like an introduction to SEO",
    "start": "52620",
    "end": "60329"
  },
  {
    "text": "I'm not going to give you the pitch of artists ears features there's a bunch of great material out there on that already what I'm gonna cover is how a packet",
    "start": "60329",
    "end": "67770"
  },
  {
    "text": "goes kind of east to west through the system we're gonna see how envoi gets involved and we're gonna see all of the control plane components involved as",
    "start": "67770",
    "end": "74130"
  },
  {
    "text": "well on what they do and what this will hopefully do is build you a usable mental model for sort of reasoning about",
    "start": "74130",
    "end": "80759"
  },
  {
    "text": "sto for understanding the emergent behavior that you see from this whole service mesh for understanding how it",
    "start": "80759",
    "end": "86490"
  },
  {
    "text": "does what it does and why it does it that way there are a couple of interesting architectural features that",
    "start": "86490",
    "end": "91619"
  },
  {
    "text": "we'll cover so if you ever find yourself having to defend this do to our to a boss or somebody who says I don't like",
    "start": "91619",
    "end": "96780"
  },
  {
    "text": "it I don't think we should use it hopefully this will help and while this year is an extremely mature and stable",
    "start": "96780",
    "end": "102150"
  },
  {
    "text": "piece of software if if ever you should find a bug in the rare rare event that you find a bug",
    "start": "102150",
    "end": "107340"
  },
  {
    "text": "hopefully this mental model will help with with debugging as well just to get",
    "start": "107340",
    "end": "114210"
  },
  {
    "start": "112000",
    "end": "112000"
  },
  {
    "text": "the most out of this talk it would be useful if you knew a bit of basic networking knowledge right what's an IP address what's a root table a bit of",
    "start": "114210",
    "end": "120509"
  },
  {
    "text": "kubernetes knowledge this is cute con although I have talked to - you know crowds when nobody's even heard of kubernetes but if you know what a",
    "start": "120509",
    "end": "126000"
  },
  {
    "text": "deployment is a service you know the fact that there's no overlay network that will be that will be useful and as",
    "start": "126000",
    "end": "132330"
  },
  {
    "text": "I say this is a deep dive we're going to look at how its geo works so if it would be great if you already knew kind of",
    "start": "132330",
    "end": "138209"
  },
  {
    "text": "what it what it is and what it's trying to do other because I'm not I don't have the time to cover that thirty five",
    "start": "138209",
    "end": "143370"
  },
  {
    "text": "minutes isn't very long I've had to cut a lot of the introductory slides but hopefully everybody can keep up",
    "start": "143370",
    "end": "148940"
  },
  {
    "text": "so just to kick us off this is your standard sto diagram right straight off sto this is this is what we're aiming",
    "start": "148940",
    "end": "155760"
  },
  {
    "text": "for this is what would be explaining so what we're looking at here is is a service mesh as you know right and",
    "start": "155760",
    "end": "162660"
  },
  {
    "text": "ultimately what we've got is two services service a trying to talk to service B and the way I'm sure you know",
    "start": "162660",
    "end": "169769"
  },
  {
    "text": "that that happens in SEO is through a proxy it's especially the employ proxy which is just graduated into the CNC F",
    "start": "169769",
    "end": "176550"
  },
  {
    "text": "congratulations to those guys so we we use what's called the sidecar model of taking one of these employ HTTP proxies",
    "start": "176550",
    "end": "183840"
  },
  {
    "text": "and strapping it alongside every service in that services pot because we used to",
    "start": "183840",
    "end": "189060"
  },
  {
    "text": "have monoliths write service a and service be used to be classes in a Java program and service they used to talk to",
    "start": "189060",
    "end": "195000"
  },
  {
    "text": "service B by doing a method call then this on microservices thing happened and they're now separate UNIX processes on",
    "start": "195000",
    "end": "201360"
  },
  {
    "text": "in separate containers on separate machines so that method call became a network call and that can be slow and it",
    "start": "201360",
    "end": "206370"
  },
  {
    "text": "can be unreliable so for a very brief history you know the what we originally",
    "start": "206370",
    "end": "211409"
  },
  {
    "text": "did I guess was add a library like history or finical to our code right",
    "start": "211409",
    "end": "216720"
  },
  {
    "text": "which would do things that you now need now you're making those Network calls which is reach eyes and timeouts and all",
    "start": "216720",
    "end": "222180"
  },
  {
    "text": "those kind of things there are a few problems with that you know we've added we suddenly taken this this micro",
    "start": "222180",
    "end": "228269"
  },
  {
    "text": "service and we've built I'm going to call it add mini lift right we added a whole bunch of code back in like a really big fat library that did all of",
    "start": "228269",
    "end": "234209"
  },
  {
    "text": "this stuff that probably had way more code in it than our business logic and so every time that's got an upgrade or a",
    "start": "234209",
    "end": "240150"
  },
  {
    "text": "CVE we have to roll the whole thing we have to go to redeploy our service so you better hope the tests pass and it builds on master and they just use a lot",
    "start": "240150",
    "end": "246720"
  },
  {
    "text": "of memory and they're you know history it's a finical the JVM only that weren't these libraries didn't exist for every language so there are a few problems so",
    "start": "246720",
    "end": "253200"
  },
  {
    "text": "this has now come out of process so you know the sto team looked around and so the envoi proxy is a really great HTTP",
    "start": "253200",
    "end": "259049"
  },
  {
    "text": "proxy it has all of these features we need so what is do does is it's strapped it alongside so I guess a survey",
    "start": "259049",
    "end": "265570"
  },
  {
    "text": "mash if you're being pedantic is this mesh of services service alien service be with with their proxies what eise do",
    "start": "265570",
    "end": "271600"
  },
  {
    "text": "an sis do is this control plane these three pilot mixer and Citadel components that I'll go through and what they do is",
    "start": "271600",
    "end": "278380"
  },
  {
    "text": "they configure they do magic and they can figure the proxy to do magic to give you the emergent behavior that you want",
    "start": "278380",
    "end": "284560"
  },
  {
    "text": "now these three components have an API in front of them this control plane API which is how you as a user can figure",
    "start": "284560",
    "end": "290350"
  },
  {
    "text": "them like the three separate components are invisible to you you just interact with this API and this API is",
    "start": "290350",
    "end": "295720"
  },
  {
    "text": "declarative it's like the kubernetes api it's it takes yeah more files that declare the state of the world and the",
    "start": "295720",
    "end": "301810"
  },
  {
    "text": "behavior as you'd like to see it that's a really nice property of this system so we can begin our packet which looks like",
    "start": "301810",
    "end": "309850"
  },
  {
    "text": "a nyan cat because I think I've just dated myself there back to about 2005 this is a big room with some big PA I",
    "start": "309850",
    "end": "315520"
  },
  {
    "text": "should have had this slide like play the tune but there you go nyan co comes in and the first place and",
    "start": "315520",
    "end": "321520"
  },
  {
    "text": "so let's say the the request we're looking at is coming from one of your actual end-users on a laptop on on a mobile phone somewhere on the Internet",
    "start": "321520",
    "end": "327940"
  },
  {
    "text": "the first thing it has to do is cause ingress so there is an ingress this is standard ingress controller kubernetes",
    "start": "327940",
    "end": "333340"
  },
  {
    "text": "ingress controller yes tio provides you with an English controller based on the my proxy right and what this would replace the the",
    "start": "333340",
    "end": "339910"
  },
  {
    "text": "nginx or the H a proxy ingress controller that you use now you can mix and match you can keep your engine X in",
    "start": "339910",
    "end": "345460"
  },
  {
    "text": "ingress controller and just use the sort of service to service sort of mesh parts of its do but if Co does provide its own",
    "start": "345460",
    "end": "352060"
  },
  {
    "text": "ingress controller and it's based on all the way which is a great proxy and it's configured by the same configuration",
    "start": "352060",
    "end": "357250"
  },
  {
    "text": "files that configure the rest of the service mesh so if you go for this do and use their ingress controller as well then some configuration objects will",
    "start": "357250",
    "end": "364330"
  },
  {
    "text": "affect the behavior not only of the properties in the mesh but also this fits back of ingress so it's a generally",
    "start": "364330",
    "end": "369640"
  },
  {
    "text": "good idea TM those those own voice just do host and pathways routing like any",
    "start": "369640",
    "end": "375850"
  },
  {
    "text": "other ingress system they are controlled by the same control plane that can show off the rest of its do which we're going",
    "start": "375850",
    "end": "381550"
  },
  {
    "text": "to look at and in the sake of time I'm just going to skip this and I'm just going to kind of assume this works so the first thing is you in English",
    "start": "381550",
    "end": "387340"
  },
  {
    "text": "controller say your user wants API dot foo comm /v 1 slash users write routing happens that",
    "start": "387340",
    "end": "395650"
  },
  {
    "text": "Lai seven we decide that that's that's place service a QED I won't go into any of",
    "start": "395650",
    "end": "401340"
  },
  {
    "text": "that anymore so our packet is now on its way to service a and it gets there and what is it find well there's no big",
    "start": "401340",
    "end": "407730"
  },
  {
    "text": "reveal here we know that there's an envoy proxy alongside every service right this is kind of a logical diagram",
    "start": "407730",
    "end": "412890"
  },
  {
    "text": "so that gray box is is it's not a hostess like a service I need to the blue boxes is is a kubernetes pod so we",
    "start": "412890",
    "end": "419940"
  },
  {
    "text": "know there's m'boy in this pod along slices every say but what does that actually mean like what is a pod and how",
    "start": "419940",
    "end": "425700"
  },
  {
    "text": "does this interception work well that's it's early in the morning so let's go back to some theory what what even is a container well there's no such",
    "start": "425700",
    "end": "432840"
  },
  {
    "text": "thing as a container right there's no first class container construct in the",
    "start": "432840",
    "end": "437970"
  },
  {
    "text": "Linux kernel FreeBSD had a jails Solaris had zones plan nine has these fully",
    "start": "437970",
    "end": "443970"
  },
  {
    "text": "formed lanes basis line nine is the best operating system but we're on the wrong but we're on the wrong we're on the",
    "start": "443970",
    "end": "449100"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "wrong timeline so we're using a student's copy of 4.4 BSD instead what it has is it has these namespaces these",
    "start": "449100",
    "end": "456480"
  },
  {
    "text": "six namespaces you can see here in these colored boxes and they are software isolation mechanism so they isolate",
    "start": "456480",
    "end": "462930"
  },
  {
    "text": "various software resources in the system the first one is this grey box is the the mountain namespace it's a lot like",
    "start": "462930",
    "end": "469470"
  },
  {
    "text": "chroot if anybody remembers that it changes the processes view of of the file system right so what we have here",
    "start": "469470",
    "end": "475800"
  },
  {
    "text": "is is a sort of nginx container it's just called nginx and it's got two processes in it nginx and then a like a",
    "start": "475800",
    "end": "481350"
  },
  {
    "text": "supervisor D to keep that running these are standard Linux users based processes they're just in running in a slightly",
    "start": "481350",
    "end": "486870"
  },
  {
    "text": "different context they're a little bit isolated so the man namespace changes the view of the file system if you think",
    "start": "486870",
    "end": "491940"
  },
  {
    "text": "about that that's entirely necessary because containers run from images right so if if nginx here looks at user Lib it",
    "start": "491940",
    "end": "500880"
  },
  {
    "text": "might see Mazal Lib C and an alpine user space right whereas the hosts might be GFC and Ubuntu user space because it's running",
    "start": "500880",
    "end": "507360"
  },
  {
    "text": "from from an alpine based image so you need the mountain named space to change what it sees when it looks at /o the",
    "start": "507360",
    "end": "513659"
  },
  {
    "text": "root of the filesystem there's a few more the UTS namespace isolates the hostname so this container can have a",
    "start": "513660",
    "end": "519930"
  },
  {
    "text": "separate hostname to the other containers and to the wider host the PID namespace isolates processes the process",
    "start": "519930",
    "end": "526800"
  },
  {
    "text": "table process IDs no you like exec into a container you do it PS you can only see the processes in",
    "start": "526800",
    "end": "532770"
  },
  {
    "text": "that container the user namespace isolates user IDs you can't see other users and if your user 1000 in this",
    "start": "532770",
    "end": "539310"
  },
  {
    "text": "container that is not the same user 1000 in another container so you can't read their files you can't nmap their pages",
    "start": "539310",
    "end": "544910"
  },
  {
    "text": "the IPC namespaces if it I came it stops that barrier prevents system fly by PC",
    "start": "544910",
    "end": "550440"
  },
  {
    "text": "in SH M stuff that's more just preventing a sort of attack vector these days nobody really uses that and then",
    "start": "550440",
    "end": "556500"
  },
  {
    "text": "there's the network namespace that isolates networking stuff and what come on to that because I'll see that's very",
    "start": "556500",
    "end": "561810"
  },
  {
    "text": "important for our service mesh so what is a given it is pod as we know it's one",
    "start": "561810",
    "end": "568530"
  },
  {
    "start": "565000",
    "end": "565000"
  },
  {
    "text": "or more in this case two containers kind of kind of strapped together the kubernetes documentation healthfully",
    "start": "568530",
    "end": "575730"
  },
  {
    "text": "describes it as the atomic unit of deployment and if you unpack that it is it's that it's the unit of stuff that",
    "start": "575730",
    "end": "582060"
  },
  {
    "text": "you have to deploy together you can't split these containers up and the reason for that is they're not each one of them is in a full container they share some",
    "start": "582060",
    "end": "588570"
  },
  {
    "text": "of these namespaces so necessarily they have to share the same kernel right because namespaces suggest a kernel",
    "start": "588570",
    "end": "593940"
  },
  {
    "text": "thing so they have to be on the same host so they both have their own mount namespace if you think about it they need that because they're both running",
    "start": "593940",
    "end": "599730"
  },
  {
    "text": "from a separate image so they don't think that separate view with the filesystem they both have their own UTS namespace so they can both have",
    "start": "599730",
    "end": "604980"
  },
  {
    "text": "different host names but they share the same pid' namespace so these processes can see each other and signal each other",
    "start": "604980",
    "end": "610890"
  },
  {
    "text": "they share the same username space so user ID 1000 for one is the same as the other and they can share pages they can",
    "start": "610890",
    "end": "617970"
  },
  {
    "text": "system five IPC each other if they want to and also they're in the same network namespace the same network context so",
    "start": "617970",
    "end": "624810"
  },
  {
    "text": "you think of a very sort of beginner description of equipment it is pod it's",
    "start": "624810",
    "end": "630000"
  },
  {
    "text": "one or more containers that that share an IP right share an IP address so within this network namespace there are",
    "start": "630000",
    "end": "637070"
  },
  {
    "text": "several isolated networking things there",
    "start": "637070",
    "end": "642240"
  },
  {
    "text": "is there is as the most obvious example there is one interface it's called a zero you know one IP address so these",
    "start": "642240",
    "end": "648570"
  },
  {
    "text": "these processes all look for each zero they see any Sara with this with this IP this 42 that would be different in a",
    "start": "648570",
    "end": "655080"
  },
  {
    "text": "different part that's how you can tell it's a different interface in a different pot they also have a loopback interface that they can use to",
    "start": "655080",
    "end": "660880"
  },
  {
    "text": "to each other and that is different to the loopback interface in every other pod so the other Pods can't listen in",
    "start": "660880",
    "end": "667140"
  },
  {
    "text": "sockets right UNIX domain sockets open TCP streams they're isolated in here as well so is the root table and so is the",
    "start": "667140",
    "end": "675310"
  },
  {
    "text": "set of IP tables rules that are in play so I could write an IP tables rule that says drop off the traffic write anything",
    "start": "675310",
    "end": "682660"
  },
  {
    "text": "trying to come in or out Levin jannettek supervisor D fluently gets dropped on the floor but this doesn't take the whole host",
    "start": "682660",
    "end": "688000"
  },
  {
    "text": "down because this doesn't leak out of this container out of this network namespace into the wider host and it",
    "start": "688000",
    "end": "693340"
  },
  {
    "text": "doesn't affect any other any other containers or pods either so for example",
    "start": "693340",
    "end": "698740"
  },
  {
    "text": "nginx wants to offer a service it binds to port 8080 TCP anything that hits address 42 port 8080 TCP gets to nginx",
    "start": "698740",
    "end": "706420"
  },
  {
    "text": "flu and B can now not bind to 8080 because it's in the same network namespace it's just gonna get porting",
    "start": "706420",
    "end": "712600"
  },
  {
    "text": "use error so that was an original example I guess of the of the sidecar",
    "start": "712600",
    "end": "718780"
  },
  {
    "text": "pattern right of it's the UNIX philosophy you take one tool that does one job and does it it does it well",
    "start": "718780",
    "end": "724440"
  },
  {
    "text": "which is nginx and it knows nothing about for example log shipping right it just dumps to",
    "start": "724440",
    "end": "730690"
  },
  {
    "text": "standard out so you add a sidecar you had a fluent D alongside that who's the logs are can knows where your blk stack",
    "start": "730690",
    "end": "736090"
  },
  {
    "text": "is and says the logs off to there that's the cycle model so we can replace that flowing D with something a little bit",
    "start": "736090",
    "end": "741640"
  },
  {
    "text": "more interesting say a non-void proxy and what that can do is offer network",
    "start": "741640",
    "end": "747940"
  },
  {
    "text": "services like the fluid D offered logging services and the way that works is because we have one set of IP tables",
    "start": "747940",
    "end": "753850"
  },
  {
    "text": "rules within this network namespace that affect everything in this pot so on void could write out a bunch of my p tables",
    "start": "753850",
    "end": "759910"
  },
  {
    "text": "rules to say all traffic that comes through me so everything trying to get to that port 8080 across this little gap",
    "start": "759910",
    "end": "765730"
  },
  {
    "text": "is sort of redirected into on boy and then envoy actually spits it back out to live back and then from loop back there's more rules that get it there",
    "start": "765730",
    "end": "772270"
  },
  {
    "text": "that's how the interception works that's how it's transparent to to the",
    "start": "772270",
    "end": "778450"
  },
  {
    "text": "application you need no application code changes this is one of the big advantages of a service mesh you need no",
    "start": "778450",
    "end": "783940"
  },
  {
    "text": "application service didn't serve its code changes to take advantage of this and that that's how that's plumb",
    "start": "783940",
    "end": "789070"
  },
  {
    "text": "together so the how about the way the the way that's actually built",
    "start": "789070",
    "end": "794360"
  },
  {
    "start": "790000",
    "end": "790000"
  },
  {
    "text": "it's kind of interesting so when when kubernetes starts a pod when the cubelet starts a pod there's code while your CRI",
    "start": "794360",
    "end": "801619"
  },
  {
    "text": "plugins so contain a D or kayo or something we'll start we'll make the system calls to start to build these",
    "start": "801619",
    "end": "806959"
  },
  {
    "text": "namespaces let's write the conference chair who works Accra does actually does an amazing talk on this you kind of live",
    "start": "806959",
    "end": "813379"
  },
  {
    "text": "codes one or two hundred lines of go that goes through all the system calls to set up these names bases and",
    "start": "813379",
    "end": "818959"
  },
  {
    "text": "basically make a container I like strongly recommend you find a video for that but you'll see how I plug-in starts to build these namespaces",
    "start": "818959",
    "end": "824929"
  },
  {
    "text": "you know it kind of gets these far at this far and then it's about to run the container you've asked for now as they say is do is transparent so as a user",
    "start": "824929",
    "end": "831889"
  },
  {
    "text": "you submit a pod spec to the cube API server that's only got the one container and you just want to run nginx so that's",
    "start": "831889",
    "end": "837980"
  },
  {
    "text": "what you talk in minetti's sto uses a mutating web hook admission controller I couldn't say that when I was practicing",
    "start": "837980",
    "end": "844779"
  },
  {
    "text": "the Hat but changes that plot spec a bit so it adds a couple of init containers",
    "start": "844779",
    "end": "850069"
  },
  {
    "text": "as we'll see and they also adds that Envoy container to the list of containers so the first thing that",
    "start": "850069",
    "end": "856730"
  },
  {
    "text": "happens is an init container it's just the our point image and it just uses the",
    "start": "856730",
    "end": "861739"
  },
  {
    "text": "shell to run sissie TL and turn pour Dobbs on and that persist but for various reasons that you know that again",
    "start": "861739",
    "end": "868129"
  },
  {
    "text": "is isolated by these namespaces and that persist for their lifetime with this pot so that tells you something maybe about",
    "start": "868129",
    "end": "874669"
  },
  {
    "text": "this stability that the team is expecting that's not actually true anymore that that went away in one the",
    "start": "874669",
    "end": "880339"
  },
  {
    "text": "oh but it's a fun slide to live in right what does happen and does still happen is the next in that container is this",
    "start": "880339",
    "end": "886850"
  },
  {
    "text": "image called sto slash proxy in it it one's a very long shell script I've done like a three-hour version of this talk",
    "start": "886850",
    "end": "893149"
  },
  {
    "text": "if you want to if you can't get to sleep go watch that and I go through this in painful detail what it does very briefly",
    "start": "893149",
    "end": "901189"
  },
  {
    "text": "in a non so perfect way is to is to set up these iptables rules to do this interception right there's a couple of",
    "start": "901189",
    "end": "907759"
  },
  {
    "text": "reasons it's an inner container one is that again it's a single thing it does one job and it does it well on void the",
    "start": "907759",
    "end": "912949"
  },
  {
    "text": "Envoy container doesn't have to know how to do this and secondly manipulating iptables rules is a privileged operation",
    "start": "912949",
    "end": "918499"
  },
  {
    "text": "you can do it as route what you actually need is cat net admin that capability so this init container runs with that",
    "start": "918499",
    "end": "924619"
  },
  {
    "text": "capability it does its thing and then it goes away it drops privileges and then we're left with the list of containers right",
    "start": "924619",
    "end": "930330"
  },
  {
    "text": "the one that we submitted in the pod spec nginx and then the one that that mutating webhook admission controller",
    "start": "930330",
    "end": "935430"
  },
  {
    "text": "added which is is tier proxy and has envoy in it and by that point the IP tables rules are set up to do that",
    "start": "935430",
    "end": "941370"
  },
  {
    "text": "interception and all the way as it happens binds to 15,000 won on long loopback and that's how it locks into",
    "start": "941370",
    "end": "947520"
  },
  {
    "text": "the system so I think we've covered how the packet kind of gets into the pod",
    "start": "947520",
    "end": "952920"
  },
  {
    "text": "what a pot is and how it bounces through envoy to service a so it does that on the way in and on the way out so next",
    "start": "952920",
    "end": "961080"
  },
  {
    "text": "routing how does it know where to go so service a has asked for service B but",
    "start": "961080",
    "end": "968670"
  },
  {
    "text": "like where where is service B where should this packet be Stan how does it get there so you can't just let keep",
    "start": "968670",
    "end": "974070"
  },
  {
    "text": "proxy to it right you could you could throw this at the wire at the kubernetes network and then coup proxy would send",
    "start": "974070",
    "end": "980279"
  },
  {
    "text": "it to one of the service B parts at random you just get this round-robin load balancing as I say I don't really",
    "start": "980279",
    "end": "985980"
  },
  {
    "text": "have time to do the sto pitch but one of the the massive advantages of this do is",
    "start": "985980",
    "end": "991200"
  },
  {
    "text": "because it's on the wire because it sees all traffic and actually picks it up and passes it at all points because we have",
    "start": "991200",
    "end": "996600"
  },
  {
    "text": "this envoy sidecar everywhere we can do much more intelligent routing so rather than picking a service be pod at random",
    "start": "996600",
    "end": "1001970"
  },
  {
    "text": "like queue proxy does we know which ones got is currently offering like you know empirically a posterior I offering the",
    "start": "1001970",
    "end": "1008630"
  },
  {
    "text": "lowest latency which one has the lowest load we can even know which one is closest to us like in our hosts in our",
    "start": "1008630",
    "end": "1014690"
  },
  {
    "text": "zone so sto wants to take that decision it doesn't just want to let keep proxy do something so how would it do that",
    "start": "1014690",
    "end": "1021920"
  },
  {
    "text": "well if I look in cuban it is if I ask the API server you know what's going on well what is this service until we",
    "start": "1021920",
    "end": "1027949"
  },
  {
    "start": "1022000",
    "end": "1022000"
  },
  {
    "text": "actually go for HTTP we've been here but what is this service what I get is is one IP and this is the cost or IP so",
    "start": "1027949",
    "end": "1034970"
  },
  {
    "text": "this is no good I fling a packet at this and I end up on the queue proxy path and I just get one at random so we can and",
    "start": "1034970",
    "end": "1041449"
  },
  {
    "text": "we want to do better than that okay so we know this service discovery information is also exposed to have a",
    "start": "1041449",
    "end": "1047209"
  },
  {
    "start": "1043000",
    "end": "1043000"
  },
  {
    "text": "DNS so let's look in DNS know again one a record cluster IP this is cluster IP range this",
    "start": "1047209",
    "end": "1053480"
  },
  {
    "text": "is not a part IV this isn't really good enough so I could guess right I can look at the pods and I could kind of",
    "start": "1053480",
    "end": "1060139"
  },
  {
    "text": "when I can be like well it's HTTP bin so the pods probably have that kind of name the I got lucky here but obviously this",
    "start": "1060139",
    "end": "1066049"
  },
  {
    "text": "as I'm sure you all know isn't sufficient in the general case so that everybody here knows what a kubernetes services it's defined by that label",
    "start": "1066049",
    "end": "1072200"
  },
  {
    "text": "selector which can be arbitrarily complicated they can pick pods that are more than one deployment or daemon set",
    "start": "1072200",
    "end": "1077359"
  },
  {
    "text": "or whatever so we got lucky here but this this isn't good enough either luckily kubernetes does give you a way",
    "start": "1077359",
    "end": "1083450"
  },
  {
    "start": "1082000",
    "end": "1082000"
  },
  {
    "text": "to effectively get it to execute that label selectively for you so there's a resource type called endpoints so you",
    "start": "1083450",
    "end": "1088969"
  },
  {
    "text": "don't are usually program endpoints in but you can read them out every time you change a service endpoint resources are",
    "start": "1088969",
    "end": "1094549"
  },
  {
    "text": "made so if I curate the endpoints for HTTP bin what I do get is is pod addresses this is pod IP range that I",
    "start": "1094549",
    "end": "1101059"
  },
  {
    "text": "get three pod addresses so these are the pods so now this is just an example to show that is - in a kubernetes",
    "start": "1101059",
    "end": "1106789"
  },
  {
    "text": "environment it's geo can go and get hold of the actual workload endpoint addresses and then obviously it can look",
    "start": "1106789",
    "end": "1113450"
  },
  {
    "text": "could be information coming out of all the envoys in those and it can make a much more intelligent decision about where to send this packet all right yes",
    "start": "1113450",
    "end": "1120589"
  },
  {
    "text": "and if I look at if I dig into the endpoints object in cube I get some useful stuff like you know where it's running but the host and their zone in",
    "start": "1120589",
    "end": "1126200"
  },
  {
    "text": "the region so this is the first control plane component this is a thing called",
    "start": "1126200",
    "end": "1131239"
  },
  {
    "text": "pilot that sits up on there up there on the control plane and what it does is it sends this config to to the Envoy",
    "start": "1131239",
    "end": "1138039"
  },
  {
    "text": "proxies it effectively sets up the routing the path and host base routes to",
    "start": "1138039",
    "end": "1143509"
  },
  {
    "text": "tell the Envoy where to send these packets and as I've kind of kind of",
    "start": "1143509",
    "end": "1150799"
  },
  {
    "text": "alluded to one of the ways it does that is it goes and talks to all the different service discovery mechanisms that are in play it goes and finds out",
    "start": "1150799",
    "end": "1157190"
  },
  {
    "text": "where these endpoints are so in the case of us just running in this kubernetes cluster pilot doesn't even polka",
    "start": "1157190",
    "end": "1164599"
  },
  {
    "text": "vanities pilot establishes a watch on the endpoint objects in the kubernetes api server so every time a service or a",
    "start": "1164599",
    "end": "1170570"
  },
  {
    "text": "pod comes and goes it gets an update and it kind of thinks about it and crunches it and compiles it and then sends route",
    "start": "1170570",
    "end": "1178460"
  },
  {
    "text": "information to employee if you've ever configured nginx right you've got sort of server and location a host and path",
    "start": "1178460",
    "end": "1183529"
  },
  {
    "text": "based invoice data model it's not entirely dissimilar to that so it sends",
    "start": "1183529",
    "end": "1188869"
  },
  {
    "text": "those routes down to the Envoy as a quick aside envoy implements this",
    "start": "1188869",
    "end": "1195140"
  },
  {
    "text": "envoys is API driven and implements this API but the lift team have kind of pushed out as an open standard and",
    "start": "1195140",
    "end": "1201470"
  },
  {
    "text": "they're calling it the data plane API so this is meant to be an open spec for a comprehensive API for configuring",
    "start": "1201470",
    "end": "1206570"
  },
  {
    "text": "proxies the idea being that this is a nice open source ecosystem where you could swap them void a proxy out if you",
    "start": "1206570",
    "end": "1212990"
  },
  {
    "text": "wanted with any other conforming proxy that talks the data plane API I believe today nginx does that but like don't",
    "start": "1212990",
    "end": "1219980"
  },
  {
    "text": "quote me and I think maybe another one does so as I say pilot talks to the service discovery system if we're only",
    "start": "1219980",
    "end": "1226190"
  },
  {
    "text": "in kubernetes it's only going to talk to the cuban eTI's api server because every workload it's going to want to talk to",
    "start": "1226190",
    "end": "1232010"
  },
  {
    "text": "right every service is going to be a port and kubernetes is going to be able to tell you where it is if you're running outside of kubernetes",
    "start": "1232010",
    "end": "1237710"
  },
  {
    "text": "then you would configure pilot instead to maybe go talk to zookeeper if you're running on vm's and they all register",
    "start": "1237710",
    "end": "1242960"
  },
  {
    "text": "with zookeeper if you're in some hybrid mode and you can do this easily you can extend the mesh it's called so you can",
    "start": "1242960",
    "end": "1248659"
  },
  {
    "text": "say right though my service mesh covers everything in this kubernetes cluster and also these VMs outside it where I've",
    "start": "1248659",
    "end": "1254480"
  },
  {
    "text": "manually deployed an employ the you would discover the pods through the kubernetes api server and then again",
    "start": "1254480",
    "end": "1261950"
  },
  {
    "text": "your VMs might register themselves in console or zookeeper or something so pi that can be configured to talk to more",
    "start": "1261950",
    "end": "1267409"
  },
  {
    "text": "than one of these service discovery systems and it'll it'll pull all the data in it'll crunchy little",
    "start": "1267409",
    "end": "1272720"
  },
  {
    "text": "deduplicated and it'll write you know one consistent set of rules to all the invoice so what can pilot do because",
    "start": "1272720",
    "end": "1281240"
  },
  {
    "start": "1279000",
    "end": "1279000"
  },
  {
    "text": "pilot can eventually is effectively configure invoice its routing and in orderly so the proxy like features I",
    "start": "1281240",
    "end": "1287240"
  },
  {
    "text": "don't have time for demo in this slot either so what it can do is it can set up that ingress routing it can tell the the ingress controller to do all the",
    "start": "1287240",
    "end": "1294020"
  },
  {
    "text": "things we want and then it can use other envoy features so we can set up traffic mirroring which is an envoy feature",
    "start": "1294020",
    "end": "1299750"
  },
  {
    "text": "right let's at this apiece who configure a gift Envoy to say when you're routing to this path you're actually sending it to service a and to like service a prime",
    "start": "1299750",
    "end": "1306620"
  },
  {
    "text": "at the same time it can do traffic shifting right in classic every testing of course it can its proxy it can do",
    "start": "1306620",
    "end": "1313669"
  },
  {
    "text": "canary deployments now if you think about Canaries they're really just a special case of traffic shifting they're",
    "start": "1313669",
    "end": "1319070"
  },
  {
    "text": "just a much smaller you're just sending to do services but you want to send a very more amount 1% or one request a second",
    "start": "1319070",
    "end": "1325590"
  },
  {
    "text": "or something to one of those one of those end points but sto can do this",
    "start": "1325590",
    "end": "1332370"
  },
  {
    "text": "because envoy is on the wire you couldn't do this with kubernetes right if you've got three pods in a deployment",
    "start": "1332370",
    "end": "1337740"
  },
  {
    "text": "the best kind of traffic split you can do is one for there two thirds with the way that cube proxy works because we've",
    "start": "1337740",
    "end": "1342990"
  },
  {
    "text": "got it employed on the wire pilot can tell it to literally just do you know Rand times nor point not one then just",
    "start": "1342990",
    "end": "1348840"
  },
  {
    "text": "do a 1% thing and then everybody has other features because it's layer 7",
    "start": "1348840",
    "end": "1354390"
  },
  {
    "text": "right it's an HTTP proxy it knows what a bad HTTP response looks like you know you get bytes back but they're not just",
    "start": "1354390",
    "end": "1360360"
  },
  {
    "text": "white to employ it knows that that's an HTTP 500 as opposed to a 200 so we can",
    "start": "1360360",
    "end": "1365580"
  },
  {
    "text": "do circus braking it can do fault injection it can do all that kind of stuff and that's what pilot configures it with so can the packet come across",
    "start": "1365580",
    "end": "1373410"
  },
  {
    "text": "the void yet kind of gets serviced be well maybe there might be in noise where",
    "start": "1373410",
    "end": "1378540"
  },
  {
    "text": "service for years it knows how to talk to it you know whether to retry or whatever but there might be some policy",
    "start": "1378540",
    "end": "1383550"
  },
  {
    "text": "in place it might be that there's an ACL and access control this denying service a from talking to service B it might be",
    "start": "1383550",
    "end": "1390030"
  },
  {
    "text": "that service B has has a rate limit we don't want to talk to service be too often now in isolation in the dark you",
    "start": "1390030",
    "end": "1396480"
  },
  {
    "text": "know pilot could configure envoi to say there's a rate limit on service B if you're ever talking to service B you",
    "start": "1396480",
    "end": "1401970"
  },
  {
    "text": "know a thousand QPS max please in this case we've got three pods so or the service bees would get 3,000 QPS right",
    "start": "1401970",
    "end": "1409200"
  },
  {
    "text": "but let's say we ship a new service a that's just the codes a bit inefficient and the autoscaler makes suddenly means",
    "start": "1409200",
    "end": "1415170"
  },
  {
    "text": "there's 10 pods well there you've got 10,000 QPS coming across the service B as a side effect of that so that kind of",
    "start": "1415170",
    "end": "1422520"
  },
  {
    "text": "you can't make these decisions in the dark that kind of mechanism wouldn't be good enough and you need global coordination all right say all the",
    "start": "1422520",
    "end": "1428490"
  },
  {
    "text": "service bees we know every time they get a request they talk to a database that database has a certain size so however",
    "start": "1428490",
    "end": "1434010"
  },
  {
    "text": "many service beats there are between them they can only take a thousand QPS that kind of globally corded global rate",
    "start": "1434010",
    "end": "1440670"
  },
  {
    "text": "limit needs global coordination and that's where the second component comes in and that's a thing called mixer a",
    "start": "1440670",
    "end": "1446850"
  },
  {
    "text": "mixer is kind of on on the path if you want it's kind of on the wire every time anybody gets a request it calls to mixer",
    "start": "1446850",
    "end": "1453510"
  },
  {
    "text": "and it says what should i what should I do with this is okay to send it I hope we pop the rate limit for this minutes this second does",
    "start": "1453510",
    "end": "1461020"
  },
  {
    "text": "does the policy allow it so yeah things like ACLs things like are back service",
    "start": "1461020",
    "end": "1466330"
  },
  {
    "text": "to service are back you know if that changes you don't want to wait for pilot to recompute it and push it out you want",
    "start": "1466330",
    "end": "1471400"
  },
  {
    "text": "to make that decision like right now so those requests going to mix her as well and also it doesn't have to be",
    "start": "1471400",
    "end": "1478150"
  },
  {
    "text": "necessarily a thing that's in with in Sto so your policy decision of can",
    "start": "1478150",
    "end": "1483460"
  },
  {
    "text": "service a doctor service B might actually be farmed out to an external policy agent right so in which case all",
    "start": "1483460",
    "end": "1489430"
  },
  {
    "text": "of these M boys need rather than them knowing where that policy agent is and knowing how to talk to it and have",
    "start": "1489430",
    "end": "1495340"
  },
  {
    "text": "credentials for it they just talk to mixer thinking yeah this next diagram shows I do it better mixer will just",
    "start": "1495340",
    "end": "1500740"
  },
  {
    "text": "talk to those external systems so as I say every request that comes into an employ get sent it gets past the headers",
    "start": "1500740",
    "end": "1508540"
  },
  {
    "text": "the metadata get sent off to mixer and their mixer can do various online things okay so pilot does configuration that",
    "start": "1508540",
    "end": "1515590"
  },
  {
    "text": "kind of changes on human time you know new pods come and go maybe every few seconds but for things that are like per",
    "start": "1515590",
    "end": "1521770"
  },
  {
    "text": "request that's mixer so the metadata gets to end up to mixer and it does two broad categories of things the first is",
    "start": "1521770",
    "end": "1528340"
  },
  {
    "text": "to report so it'll it'll write logs about all the packets say into",
    "start": "1528340",
    "end": "1533500"
  },
  {
    "text": "elasticsearch it'll create metrics about all of these requests but because you've got an employ on both sides you know",
    "start": "1533500",
    "end": "1538900"
  },
  {
    "text": "what the real latency is you know what the actual bandwidth you know what the actual set of byte rates are so all of",
    "start": "1538900",
    "end": "1544390"
  },
  {
    "text": "that can become made into metrics and that can be reported up to for example a Prometheus system and again rather than",
    "start": "1544390",
    "end": "1550510"
  },
  {
    "text": "all the envoy's having to know where each of those systems is and have credentials for them they all just said it's a mixer mixer aggregated and mixer",
    "start": "1550510",
    "end": "1556780"
  },
  {
    "text": "sends it off when you install this to your out-of-the-box it'll it'll ship your Prometheus and then elasticsearch",
    "start": "1556780",
    "end": "1562390"
  },
  {
    "text": "just as an example and it'll configure itself to just put your metrics into",
    "start": "1562390",
    "end": "1567460"
  },
  {
    "text": "those systems but you can configure mixer to send metrics to stackdriver",
    "start": "1567460",
    "end": "1572590"
  },
  {
    "text": "or to cloud watch shorter and like sis diggle to any other system that you're using and you only have to do it once",
    "start": "1572590",
    "end": "1578290"
  },
  {
    "text": "right it's only mixer that has to know how to do that the other side of what it does is the check side of things which",
    "start": "1578290",
    "end": "1584680"
  },
  {
    "text": "is where it says while we're trying to make this request is it allowed and that's where it would I'd say a rate limit which it'll just",
    "start": "1584680",
    "end": "1592040"
  },
  {
    "text": "count up in memory for you throw some service to service our back rules for ACLs and again these are internal things",
    "start": "1592040",
    "end": "1598820"
  },
  {
    "text": "you ride sto config files that describe those our back walls but you can configure mixer to say every time you",
    "start": "1598820",
    "end": "1603980"
  },
  {
    "text": "get a packet I want you to go talk to my LDAP system and see if see if the owner of service a is allowed to talk to the",
    "start": "1603980",
    "end": "1610190"
  },
  {
    "text": "owner of service B so this all comes through mixer this has this makes a lot",
    "start": "1610190",
    "end": "1616700"
  },
  {
    "text": "of people squint right because this looks like a single performance bottleneck and it looks like a single",
    "start": "1616700",
    "end": "1622100"
  },
  {
    "text": "point of failure so why is the architecture like this well I mean it is a single point of failure in that it's a",
    "start": "1622100",
    "end": "1628010"
  },
  {
    "text": "single point that can't fail but the whole system is really designed to be to",
    "start": "1628010",
    "end": "1633890"
  },
  {
    "text": "be resilient to that and if anything makes a make to reliability better so",
    "start": "1633890",
    "end": "1639310"
  },
  {
    "text": "and the key to that is caching so for the reporting side of things you know we we passed the headers we send them up to",
    "start": "1639310",
    "end": "1645950"
  },
  {
    "text": "mixer mix them sends them on that's asynchronous so if mixer is down or can't be reached that doesn't block the",
    "start": "1645950",
    "end": "1651500"
  },
  {
    "text": "main m'boy thread and voice continues to forward packets that's a synchronous that's batch dot",
    "start": "1651500",
    "end": "1656900"
  },
  {
    "text": "some aggregation can also happen client-side so you said less stuff across the wire so that's absolutely",
    "start": "1656900",
    "end": "1661940"
  },
  {
    "text": "kept out of the main thread out of the out of the way and if it has to fail then it you know if that buffer gets that it will fail and envoi will",
    "start": "1661940",
    "end": "1667760"
  },
  {
    "text": "continue to honor the routes that it's been given by pilot verbs for the checks",
    "start": "1667760",
    "end": "1673490"
  },
  {
    "text": "the key there is caching so envoy has of what's called a filter it's got a",
    "start": "1673490",
    "end": "1679070"
  },
  {
    "text": "plug-in a plug-in mechanism so there's a there's an envoy plug-in that talks to mixer and gets these answers these",
    "start": "1679070",
    "end": "1684200"
  },
  {
    "text": "yes-or-no check answers and that that client for mixer is what's called fat right it's it's a big lump of code it's",
    "start": "1684200",
    "end": "1690770"
  },
  {
    "text": "got a lot of it's got a lot of logic in it most of that is around caching so",
    "start": "1690770",
    "end": "1696080"
  },
  {
    "text": "envoy pauses pauses to say an HTTP packet sends all of the headers up to mix her and says right a user was to",
    "start": "1696080",
    "end": "1703970"
  },
  {
    "text": "send service a wants to talk to service B and it's accepting the encoding Jason",
    "start": "1703970",
    "end": "1709070"
  },
  {
    "text": "and it wants gzip compression and the content length is like 72 mixer goes and",
    "start": "1709070",
    "end": "1714470"
  },
  {
    "text": "looks at all of its rules and says that's not allowed you can't do that that request can't go",
    "start": "1714470",
    "end": "1719690"
  },
  {
    "text": "ahead it's a no from me when makes the sense that reply it sends",
    "start": "1719690",
    "end": "1725000"
  },
  {
    "text": "the cash key with it so it says right so I looked at all of the headers you sent me but the reason it's a no is just your",
    "start": "1725000",
    "end": "1730700"
  },
  {
    "text": "source and your destination right service a is not allowed to talk to service B at all so I want you to cache",
    "start": "1730700",
    "end": "1736130"
  },
  {
    "text": "this no and I want you to cache it under a key of source service a destination service B so if another request comes in",
    "start": "1736130",
    "end": "1742340"
  },
  {
    "text": "from A to B it's automatically in though the fact that it's you know it's a different language it wants be zip",
    "start": "1742340",
    "end": "1747560"
  },
  {
    "text": "encoding right and it's you know XML rather than Jason doesn't matter that",
    "start": "1747560",
    "end": "1753830"
  },
  {
    "text": "the cache key for this is just it's just the source and destination so there's minimal cache keys to send backed by",
    "start": "1753830",
    "end": "1759650"
  },
  {
    "text": "mixer with its replies so that this cache can be as you know as wide-ranging and as optimal as possible mixer also",
    "start": "1759650",
    "end": "1766310"
  },
  {
    "text": "gives to TTLs for that answer so it gives a cache expiry in terms of wall",
    "start": "1766310",
    "end": "1771920"
  },
  {
    "text": "clock time I think it's a cache expiry in terms of the number of requests so we can say it's a no and it's valid for a",
    "start": "1771920",
    "end": "1777650"
  },
  {
    "text": "second or three hundred packets whichever you know tons first so that that's all about making sure that if",
    "start": "1777650",
    "end": "1784250"
  },
  {
    "text": "mixer goes down or is slow to respond that you know you you hit your cache absolutely as much as possible",
    "start": "1784250",
    "end": "1789260"
  },
  {
    "text": "but still you have this safety so if something comes into m'boy and it's not in the cache it's a new kind of request",
    "start": "1789260",
    "end": "1795770"
  },
  {
    "text": "pattern that we haven't seen before you know mixer will go in the ass and you've got you've got an online incident",
    "start": "1795770",
    "end": "1801110"
  },
  {
    "text": "policy check and you've got sort of global rate limit enforcement and that's kind of the reason that in this picture I took it out of this little hole up",
    "start": "1801110",
    "end": "1806780"
  },
  {
    "text": "here and I moved it down it's technically control plane but I would",
    "start": "1806780",
    "end": "1812210"
  },
  {
    "text": "say it's more more it's closer to the data plane it's more like this the sort of slow part of the data plane because",
    "start": "1812210",
    "end": "1817820"
  },
  {
    "text": "it is on that request flow but a lot of steps as I say have been taken to mitigate any any adverse effects of that",
    "start": "1817820",
    "end": "1827170"
  },
  {
    "start": "1827000",
    "end": "1827000"
  },
  {
    "text": "so what can mix to do well as I say to board things guessing arm reporting check the reporting is your three",
    "start": "1827230",
    "end": "1832610"
  },
  {
    "text": "pillars of logs tracing a metric but there are lots of pluggable backends it can talk to and you're checking is checking access control lists based on",
    "start": "1832610",
    "end": "1839420"
  },
  {
    "text": "our back policy and rate limits and a few other things so can we finally send",
    "start": "1839420",
    "end": "1846290"
  },
  {
    "text": "the packet across maybe not because this lady here is called Eve and she wants to",
    "start": "1846290",
    "end": "1851510"
  },
  {
    "text": "drop in on our conversation right so we said that services the business logic becomes",
    "start": "1851510",
    "end": "1857360"
  },
  {
    "text": "super simple these services they don't bother with retries or timeouts they don't throw circuit breakers and they",
    "start": "1857360",
    "end": "1862910"
  },
  {
    "text": "also only talk HTTP so no longer do I have to make like a TLS certificate",
    "start": "1862910",
    "end": "1868310"
  },
  {
    "text": "bundle it with my application worried about rotation which nobody ever does right these things always just really",
    "start": "1868310",
    "end": "1873890"
  },
  {
    "text": "long lived on weakened order that for me it can and it should and it does so what",
    "start": "1873890",
    "end": "1879320"
  },
  {
    "text": "the envoys will do is they will put that communication in a TLS tunnel on the wire so that the communication is",
    "start": "1879320",
    "end": "1886520"
  },
  {
    "text": "encrypted and you can't listen in that needs certificates and that brings us on to the third and final control plan",
    "start": "1886520",
    "end": "1892040"
  },
  {
    "text": "component which is Citadel which is basically a certificate management system that generates and rotates those",
    "start": "1892040",
    "end": "1897410"
  },
  {
    "text": "certificates and configures them into the air voice this is mutual TLS so if",
    "start": "1897410",
    "end": "1903200"
  },
  {
    "text": "you think about that the way the web works you know this server would offer up a certificate the client would check",
    "start": "1903200",
    "end": "1909320"
  },
  {
    "text": "it against its CA bundles that are installed but the server has no real way of validating the client like the client",
    "start": "1909320",
    "end": "1915260"
  },
  {
    "text": "doesn't your web browser doesn't present a certificate which is why websites have to ask you to login right they have to",
    "start": "1915260",
    "end": "1920600"
  },
  {
    "text": "move that out to an application layer because you have to prove who you are in this case Citadel gives certificates to",
    "start": "1920600",
    "end": "1926390"
  },
  {
    "text": "LS certificates to both sides so both their voice have assert and they can do mutual TLS mutual verification of each",
    "start": "1926390",
    "end": "1933350"
  },
  {
    "text": "other and then based on you know based on that I've got a certificate with a CN in you know an identity this is I'm",
    "start": "1933350",
    "end": "1939290"
  },
  {
    "text": "service a that's what the sort of services service are back authorization rules are based on the whole thing about",
    "start": "1939290",
    "end": "1946280"
  },
  {
    "text": "identity and or authentication and working out who these services are and if they really are who they say they are",
    "start": "1946280",
    "end": "1951800"
  },
  {
    "text": "or whether they should get a certificate with a surname is a whole nother talk it's the spec or the spiffy spec that's",
    "start": "1951800",
    "end": "1957470"
  },
  {
    "text": "quite interesting so I would say finally we are done the packet the packet has",
    "start": "1957470",
    "end": "1963200"
  },
  {
    "text": "reached the end we've seen it to come in it's been routed by by ingress provided by an Android proxy configured by these",
    "start": "1963200",
    "end": "1970040"
  },
  {
    "text": "to a control plane it's bounced in and out of employ with transparent injection of the proxy transparent interception of",
    "start": "1970040",
    "end": "1975680"
  },
  {
    "text": "the traffic it's come across an N TLS tunnel it's obeyed or the policy and again it's",
    "start": "1975680",
    "end": "1981680"
  },
  {
    "text": "done the same dance it's bouncer than out of employ on the other side a couple",
    "start": "1981680",
    "end": "1988130"
  },
  {
    "text": "more things to say I think I'm actually doing just about right on time another couple of things to say is that",
    "start": "1988130",
    "end": "1993260"
  },
  {
    "text": "it of course the control plan has an API which are used to could configure these",
    "start": "1993260",
    "end": "1998510"
  },
  {
    "text": "components but they need somewhere to store that config and they need to be a you know watch the configure updates all that kind of stuff so what you really",
    "start": "1998510",
    "end": "2005650"
  },
  {
    "text": "need is a sort of database and an API server to front it when we're in kubernetes we just hijack the kubernetes",
    "start": "2005650",
    "end": "2010870"
  },
  {
    "text": "one so when you install this geo it actually writes a bunch of CR DS into the kubernetes api server to say hey",
    "start": "2010870",
    "end": "2017200"
  },
  {
    "text": "you're expecting some more configuration documents with the following schemata and then what is do CTL does which is",
    "start": "2017200",
    "end": "2023350"
  },
  {
    "text": "the equivalent of cube CTL your user sends the STR config just off to the cuban Etta's api server there sto format",
    "start": "2023350",
    "end": "2030070"
  },
  {
    "text": "resources but cube is expecting them because the CR d's have reconfigured right and it uses the cube EDTV to store it if you are running outside",
    "start": "2030070",
    "end": "2037660"
  },
  {
    "text": "equipment at ease then you have to run this infrastructure yourself the one final feature that it has is is egress",
    "start": "2037660",
    "end": "2044530"
  },
  {
    "text": "control kubernetes obviously doesn't do this for you there's no real concept of an egress controller in kubernetes",
    "start": "2044530",
    "end": "2050290"
  },
  {
    "text": "normally there's no egress object sto does do it so again we can apply the same kind of network services to egress",
    "start": "2050290",
    "end": "2057159"
  },
  {
    "text": "let's say you know service B ultimately wants it gonna get a picture of a kitty off the internet we can have this this",
    "start": "2057160",
    "end": "2063850"
  },
  {
    "text": "Bank of egress proxies you know retry connections to Kitty comm in case it's a little bit unreliable apply a rate limit",
    "start": "2063850",
    "end": "2070510"
  },
  {
    "text": "so everything in the cluster is only making 10 requests a second to this to this website on the internet so they",
    "start": "2070510",
    "end": "2076570"
  },
  {
    "text": "don't think we'd do essing them you can do path rewrites host rewrites or you know all the features offered by the",
    "start": "2076570",
    "end": "2081580"
  },
  {
    "text": "egress and you or you could say what my cluster is an internal service you know I have my data and my logic are inside",
    "start": "2081580",
    "end": "2088450"
  },
  {
    "text": "this cluster I'm serving my users who are using my light on my iPhone app",
    "start": "2088450",
    "end": "2093840"
  },
  {
    "text": "nothing really should be reaching out to the Internet if anything tries to connect out I've probably been owned so",
    "start": "2093840",
    "end": "2099760"
  },
  {
    "text": "I'll actually want to deny it's quite a common configuration is I want to deny all connections to the Internet and if",
    "start": "2099760",
    "end": "2105550"
  },
  {
    "text": "anything tries it of course you know this this these n voice talk to mixer to so they will report that up into mix so",
    "start": "2105550",
    "end": "2112000"
  },
  {
    "text": "it'll appear in your logs and you can just set up at me Prometheus alert that says something's trying to talk to the Internet like is it just doing a shitty self",
    "start": "2112000",
    "end": "2118150"
  },
  {
    "text": "update or has it been owned so we saw how that packet",
    "start": "2118150",
    "end": "2123260"
  },
  {
    "start": "2121000",
    "end": "2121000"
  },
  {
    "text": "in traverses the SEO system leaning heavily on the my proxy and this was in the context of kubernetes which is",
    "start": "2123260",
    "end": "2128870"
  },
  {
    "text": "hopefully what you're using we saw how the control plane does that and how the various components do what they do and",
    "start": "2128870",
    "end": "2134780"
  },
  {
    "text": "the split between pilots kind of ahead of time human time static configuration our mixers online policy enforcement and",
    "start": "2134780",
    "end": "2143480"
  },
  {
    "text": "hopefully that's a useful mental model for for what's going on and what a virtual service does you can you can",
    "start": "2143480",
    "end": "2148520"
  },
  {
    "text": "imagine hopefully which one that is and what a destination rule does and yeah they go in take your take the lid off",
    "start": "2148520",
    "end": "2154670"
  },
  {
    "text": "from that and have a look around sto so thank you very much for your time",
    "start": "2154670",
    "end": "2160059"
  }
]