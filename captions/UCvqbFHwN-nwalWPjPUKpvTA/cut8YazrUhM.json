[
  {
    "text": "hello everyone my name is iron schneider i work at microsoft and i am a dapper",
    "start": "80",
    "end": "6720"
  },
  {
    "text": "core maintainer and with me is aman bird wash who's going to introduce himself",
    "start": "6720",
    "end": "11920"
  },
  {
    "text": "hi this is aman and i work at microsoft and work on dapper project with your own",
    "start": "11920",
    "end": "17039"
  },
  {
    "text": "as a core maintainer for it yeah and today we're going to be talking to you about stateless functions",
    "start": "17039",
    "end": "22480"
  },
  {
    "text": "and stateful actors so before we start talking about any",
    "start": "22480",
    "end": "29279"
  },
  {
    "text": "sort of solution let's talk about cloud native developers and some of the challenges that cloud native developers",
    "start": "29279",
    "end": "35040"
  },
  {
    "text": "face today so developers are being asked to write",
    "start": "35040",
    "end": "40160"
  },
  {
    "text": "very resilient scalable micro services based applications that mostly interact with other services",
    "start": "40160",
    "end": "46079"
  },
  {
    "text": "whether it's through direct service to service invocation or whether it's event driven and",
    "start": "46079",
    "end": "52879"
  },
  {
    "text": "those types of applications have multiple languages that they're written in so they're",
    "start": "52879",
    "end": "58399"
  },
  {
    "text": "becoming increasingly polyglot and that's also a challenge because you",
    "start": "58399",
    "end": "63520"
  },
  {
    "text": "sometimes need to um also leverage existing code introduce new code to the mix",
    "start": "63520",
    "end": "68560"
  },
  {
    "text": "and new languages need different sdks and those stuff um basically have",
    "start": "68560",
    "end": "74400"
  },
  {
    "text": "developers focus on things other than their core business logic like infrastructure",
    "start": "74400",
    "end": "80240"
  },
  {
    "text": "and then we have things like functions and workflows and actors which we're going to talk about",
    "start": "80240",
    "end": "86720"
  },
  {
    "text": "which really represent very powerful stateful programming models and stateless programming models",
    "start": "86720",
    "end": "92240"
  },
  {
    "text": "but each of them have their own specific challenges",
    "start": "92240",
    "end": "97200"
  },
  {
    "text": "so really a few things that are holding microservices um back are uh having to incrementally",
    "start": "98000",
    "end": "104799"
  },
  {
    "text": "migrate your existing code to a microservices architecture you know you need to deliver in your business logic and then um you want to",
    "start": "104799",
    "end": "111360"
  },
  {
    "text": "leverage the strengths of the microservices architecture but you don't want to rewrite your entire code base",
    "start": "111360",
    "end": "117119"
  },
  {
    "text": "so you go on to these new programming model runtimes but they have narrow language support",
    "start": "117119",
    "end": "122880"
  },
  {
    "text": "some of them are bound to one cloud provider or another they have very tightly controlled feature sets which really",
    "start": "122880",
    "end": "129679"
  },
  {
    "text": "uh have you tie into a very specific way in which you need to write your code um and some of them only run on specific",
    "start": "129679",
    "end": "136640"
  },
  {
    "text": "infrastructures and they're not that portable you know between the cloud and the edge and we're seeing more and more code",
    "start": "136640",
    "end": "142959"
  },
  {
    "text": "being transferred to the edge so we introduced dapper",
    "start": "142959",
    "end": "150879"
  },
  {
    "text": "to allow developers to solve these hard problems of distributed applications",
    "start": "150879",
    "end": "156160"
  },
  {
    "text": "and dapper really you can think about it as a runtime uh that runs as sidecar through",
    "start": "156160",
    "end": "162160"
  },
  {
    "text": "applications that gives developers sort of um super powers um just the same way that",
    "start": "162160",
    "end": "167599"
  },
  {
    "text": "kubernetes and a lot of other infrastructure oriented projects give developers and operators the ability um to run",
    "start": "167599",
    "end": "174480"
  },
  {
    "text": "distributed apps at scale with containers dapper really appeals more to the developer side of things",
    "start": "174480",
    "end": "180640"
  },
  {
    "text": "and give developers apis that help them focus on their business logic",
    "start": "180640",
    "end": "186720"
  },
  {
    "text": "some of the core goals of dapper are first of all to give developers best",
    "start": "187519",
    "end": "192720"
  },
  {
    "text": "practice building blocks meaning all the best practices that you can find",
    "start": "192720",
    "end": "198000"
  },
  {
    "text": "in distributed systems are basically built into this sidecar so whether you're doing a stateful",
    "start": "198000",
    "end": "203840"
  },
  {
    "text": "operations or pub sub or service invocation or any of the other features that dapper",
    "start": "203840",
    "end": "209519"
  },
  {
    "text": "gives you we make sure that they're due to best practices and that that really solves those hard",
    "start": "209519",
    "end": "216799"
  },
  {
    "text": "problems and then the second type of goal that we have is to be language or framework",
    "start": "216799",
    "end": "221920"
  },
  {
    "text": "independent meaning be as inclusive as possible to all developers out there no matter which language you're using or",
    "start": "221920",
    "end": "227840"
  },
  {
    "text": "which framework adapter supports it and then being consistent and portable so that you can take your code",
    "start": "227840",
    "end": "234080"
  },
  {
    "text": "and put it over to different environments we also want to adopt standards where we can so",
    "start": "234080",
    "end": "240400"
  },
  {
    "text": "things like w3 street trace headers and standards other standards that you can find inside of the cmcf ecosystem are being",
    "start": "240400",
    "end": "247920"
  },
  {
    "text": "leveraged by dapper extensible and pluggable components is also something we give great care for so that you can plug in",
    "start": "247920",
    "end": "255519"
  },
  {
    "text": "different components so that you do not need to tie yourself into any specific underlying implementation and",
    "start": "255519",
    "end": "262160"
  },
  {
    "text": "then being platform agnostic for cloud and edge meaning you can take your code and port it from one environment to the other whether",
    "start": "262160",
    "end": "268560"
  },
  {
    "text": "running on aws google cloud microsoft azure or the edge",
    "start": "268560",
    "end": "274080"
  },
  {
    "text": "then maybe even the most important thing is to be community driven and vendor neutral which is critical to",
    "start": "274080",
    "end": "279120"
  },
  {
    "text": "dapper to increase its adoption and really make sure that people coming from different companies",
    "start": "279120",
    "end": "284960"
  },
  {
    "text": "can collaborate on this project with us",
    "start": "284960",
    "end": "288880"
  },
  {
    "text": "so what is grappa really we can see our application code here at the top",
    "start": "290320",
    "end": "295360"
  },
  {
    "text": "meaning if you're a developer you can write your code in any code um in in any language really or",
    "start": "295360",
    "end": "302960"
  },
  {
    "text": "use any framework so it can be node go python java rust sql plus whatever you're using um you",
    "start": "302960",
    "end": "310160"
  },
  {
    "text": "can talk to dapper because dapper is a side card that exposes apis for developers with http and jrpc",
    "start": "310160",
    "end": "317280"
  },
  {
    "text": "so any type of programming language that comes in tomorrow even will be able to leverage dapper",
    "start": "317280",
    "end": "322720"
  },
  {
    "text": "using its native apis some of the capabilities that dapper gives are really",
    "start": "322720",
    "end": "328880"
  },
  {
    "text": "called building blocks which you can see here inside of the dapper block so service to service invocation is the",
    "start": "328880",
    "end": "335759"
  },
  {
    "text": "ability to find a different service in the cluster using a unique id and really get abstracted away from all",
    "start": "335759",
    "end": "342160"
  },
  {
    "text": "of the service discovery and reverse proxy uh mechanisms dapper will do discovery for you it'll do retries and it'll build",
    "start": "342160",
    "end": "349280"
  },
  {
    "text": "in resiliency into your calls state management is another",
    "start": "349280",
    "end": "354320"
  },
  {
    "text": "kind of building block that we have um which really gives you very nice abstractions over state",
    "start": "354320",
    "end": "360000"
  },
  {
    "text": "management so as a developer you can write your code once and target the key value api and then",
    "start": "360000",
    "end": "366319"
  },
  {
    "text": "plug in different components so for example if you're running on aws you can just configure it to use",
    "start": "366319",
    "end": "371600"
  },
  {
    "text": "dynamodb then if you're running on azure for example cosmos could be uniformly on-prem it can be cassandra redis or any one of",
    "start": "371600",
    "end": "379280"
  },
  {
    "text": "the other components they're supported by dapper pub sub is the ability to do a publish subscribe type of event driven scenario",
    "start": "379280",
    "end": "386639"
  },
  {
    "text": "we have publishers asynchronously send events to consumers that might or might not be listening at the",
    "start": "386639",
    "end": "392000"
  },
  {
    "text": "moment where the message was sent resource bindings and triggers allow you to trigger",
    "start": "392000",
    "end": "397600"
  },
  {
    "text": "application whenever an event comes in from external system um things like a twilio message or even",
    "start": "397600",
    "end": "404240"
  },
  {
    "text": "a twitter tweet that comes along or an event hubs message or aws kinesis",
    "start": "404240",
    "end": "411360"
  },
  {
    "text": "messages and then just like you can trigger an application based on that code you can also invoke other systems",
    "start": "411360",
    "end": "417840"
  },
  {
    "text": "using those bindings so your application can tell dapper hey take this piece of data and send it to",
    "start": "417840",
    "end": "422960"
  },
  {
    "text": "that particular binding actor is a really a special programming",
    "start": "422960",
    "end": "428560"
  },
  {
    "text": "model that encapsulates compute and stay together and we're going to touch specifically on actors during these slides",
    "start": "428560",
    "end": "436160"
  },
  {
    "text": "observability is um you getting distributed tracing for free with dapper because you talked",
    "start": "436160",
    "end": "442080"
  },
  {
    "text": "to the adapter apis that print knows to talk the language of",
    "start": "442080",
    "end": "447120"
  },
  {
    "text": "open senses and the protocols of open telemetry and it'll inject headers into the codes and create really this",
    "start": "447120",
    "end": "452880"
  },
  {
    "text": "application map for you where you can have end-to-end visibility um across the calls into your",
    "start": "452880",
    "end": "459199"
  },
  {
    "text": "applications and from your applications secrets are a really nice thing um think about you know your pod running in",
    "start": "459199",
    "end": "466080"
  },
  {
    "text": "kubernetes cluster and you need to extract secrets from hashicorp vault or the kubernetes secret store and you",
    "start": "466080",
    "end": "471199"
  },
  {
    "text": "don't want to start mounting um stuff on the pod so dapper has a really",
    "start": "471199",
    "end": "476479"
  },
  {
    "text": "easy api where developers can just call secrets and get them back and then everything else is really",
    "start": "476479",
    "end": "482800"
  },
  {
    "text": "extensible um those building blocks and and the components that they use um",
    "start": "482800",
    "end": "488960"
  },
  {
    "text": "are really uh plugable and there is actually a separate repository under the adapter organization",
    "start": "488960",
    "end": "494879"
  },
  {
    "text": "in which community members can contribute more and more components and then all of this runs on cloud or on",
    "start": "494879",
    "end": "501759"
  },
  {
    "text": "the edge so dapper does not have to run in a container that's important it can also run just as a",
    "start": "501759",
    "end": "507599"
  },
  {
    "text": "process on your machine so you get a really lenient lean development experience",
    "start": "507599",
    "end": "512880"
  },
  {
    "text": "running dapper on your machine whether it's mac windows or linux and then taking that",
    "start": "512880",
    "end": "519440"
  },
  {
    "text": "thing and running on kubernetes is really not that different from running it locally",
    "start": "519440",
    "end": "526320"
  },
  {
    "text": "this is dapper hosted on kubernetes so dapper like a service mesh really inject a side",
    "start": "528160",
    "end": "534480"
  },
  {
    "text": "car container into your pod so you have your application pod here um your application container inside the",
    "start": "534480",
    "end": "541200"
  },
  {
    "text": "pod and you have the dapper container being injected and because they're running under the same network namespace",
    "start": "541200",
    "end": "547120"
  },
  {
    "text": "your application code in the container just talks um via localhost to dapper so think about it like having a special",
    "start": "547120",
    "end": "553279"
  },
  {
    "text": "friend and localhost that does things like state management and pub sub and service invocation and tracing and secret extraction",
    "start": "553279",
    "end": "559839"
  },
  {
    "text": "for you dapper is really really lightweight it uses four megabytes of uh ram",
    "start": "559839",
    "end": "565440"
  },
  {
    "text": "of um committed memory uh it's a 23 megabytes image it's container image",
    "start": "565440",
    "end": "571200"
  },
  {
    "text": "size is smaller than envoy and the link4d property i think and it",
    "start": "571200",
    "end": "576399"
  },
  {
    "text": "uses only four system pods so um we have the sidecar injector which",
    "start": "576399",
    "end": "581440"
  },
  {
    "text": "is really lightweight and we have um a certificate authority called sentry which gives you end-to-end",
    "start": "581440",
    "end": "587279"
  },
  {
    "text": "encryption it does mtls for you much like a service mesh and then we have an operator which",
    "start": "587279",
    "end": "593680"
  },
  {
    "text": "updates the dapper side cars when whenever an operator developer changes their components",
    "start": "593680",
    "end": "598880"
  },
  {
    "text": "and if you're using the actors building block we also have a pod for doing the act replacement which really decides where each one of",
    "start": "598880",
    "end": "605680"
  },
  {
    "text": "the actor compute units are located inside the cluster",
    "start": "605680",
    "end": "610320"
  },
  {
    "text": "so um dapper and uh service images um dapper can um utilize any service",
    "start": "616720",
    "end": "624320"
  },
  {
    "text": "measures and uh amman can elaborate on that yeah so one one idea for dapper is that",
    "start": "624320",
    "end": "631760"
  },
  {
    "text": "it takes more of an additive approach and it doesn't preclude uh service developers from using any of the",
    "start": "631760",
    "end": "637200"
  },
  {
    "text": "existing cloud native technologies so in this uh slide you can see that uh dapper runs in the same part with the",
    "start": "637200",
    "end": "643200"
  },
  {
    "text": "user application and the link id and because dapper runs at an application level",
    "start": "643200",
    "end": "648560"
  },
  {
    "text": "and this and service meshes at more of a layer four level um so they all can coexist in in the",
    "start": "648560",
    "end": "655120"
  },
  {
    "text": "same part and and provided additive capabilities to the user applications",
    "start": "655120",
    "end": "661200"
  },
  {
    "text": "yes so leicemon said service meshes really work at the network level where they intercept traffic and",
    "start": "661200",
    "end": "667600"
  },
  {
    "text": "dapper is more of an application level concern there are some overlaps with mutual tls and tracing but everything in",
    "start": "667600",
    "end": "674640"
  },
  {
    "text": "dapper is also configurable so you can turn it off or on based on whether or not you're running a service mesh",
    "start": "674640",
    "end": "680000"
  },
  {
    "text": "so dapper plays really well with things like html link reading another cncf project that dap really",
    "start": "680000",
    "end": "687200"
  },
  {
    "text": "integrates well with is keda the kubernetes is a vendor of another scalar so because dapper supports a very",
    "start": "687200",
    "end": "692959"
  },
  {
    "text": "wide range of components a lot of them overlap with cada which means that you can use keda to auto-scale your adapter instances",
    "start": "692959",
    "end": "702880"
  },
  {
    "text": "uh so this slide shows the service invocation building block for dapper um service invocation provides the",
    "start": "702880",
    "end": "708880"
  },
  {
    "text": "capabilities to developers to directly invoke their service methods without worrying about service discovery",
    "start": "708880",
    "end": "715279"
  },
  {
    "text": "on a particular platform so uh using dapper services are deployed using an id",
    "start": "715279",
    "end": "720880"
  },
  {
    "text": "and and after that one service can talk to another service using that dapper service id",
    "start": "720880",
    "end": "726240"
  },
  {
    "text": "so in this example uh you can see the front end is trying to make a call to this this back-end card service and",
    "start": "726240",
    "end": "732560"
  },
  {
    "text": "it it just does that over an http post request to its dapper sidecar",
    "start": "732560",
    "end": "737680"
  },
  {
    "text": "and it says that hey i hate i want to talk to this card service and this is the method",
    "start": "737680",
    "end": "742800"
  },
  {
    "text": "checkout which i want to invoke and so the car call goes from uh front hand to its stepper side card episode",
    "start": "742800",
    "end": "749600"
  },
  {
    "text": "figures out where is the target service running it forwards the call to the target services sidecar and",
    "start": "749600",
    "end": "755519"
  },
  {
    "text": "it lands on the target service and the response comes back um to the to the front end uh using the",
    "start": "755519",
    "end": "761360"
  },
  {
    "text": "same route this is the service and location capabilities for dapper now moving on to observability uh dapper",
    "start": "761360",
    "end": "769600"
  },
  {
    "text": "provides certain building blocks for observability like metrics tracings and logs so that uh service operators can look at",
    "start": "769600",
    "end": "777360"
  },
  {
    "text": "the health and metrics coming out from the adapter systems services of the system parts",
    "start": "777360",
    "end": "782399"
  },
  {
    "text": "uh to to get more insight into what is going inside the dapper side cars and dapper",
    "start": "782399",
    "end": "789040"
  },
  {
    "text": "indicates currently with open sensors in future we will integrate with open telemetry so that",
    "start": "789040",
    "end": "794639"
  },
  {
    "text": "uh metrics and logs coming out of a dapper sidecar can be viewed with any of",
    "start": "794639",
    "end": "799920"
  },
  {
    "text": "the open source tools available like jager or datadog and and azure application insights as",
    "start": "799920",
    "end": "805600"
  },
  {
    "text": "well and this is a state management for",
    "start": "805600",
    "end": "812320"
  },
  {
    "text": "dapper so for example an application can talk to the dapper api",
    "start": "812320",
    "end": "817360"
  },
  {
    "text": "and this is a quite a simplistic view of a stateful operation the dapper does so",
    "start": "817360",
    "end": "822399"
  },
  {
    "text": "it supports a key value um api model at the moment where the application basically says hey",
    "start": "822399",
    "end": "827519"
  },
  {
    "text": "i want to save um two objects and they both have keys so we have star wars themes",
    "start": "827519",
    "end": "834800"
  },
  {
    "text": "examples here because we all have stores in dapper and then we're basically saving",
    "start": "834800",
    "end": "841120"
  },
  {
    "text": "two pairs of keys and their values so the value can be a primitive or it can even be a complex value",
    "start": "841120",
    "end": "846639"
  },
  {
    "text": "and that and then dapper based on the state story that you configured it to work with um will make sure that the state gets",
    "start": "846639",
    "end": "853839"
  },
  {
    "text": "written and dapper also supports some other advanced capabilities on top of those um",
    "start": "853839",
    "end": "858959"
  },
  {
    "text": "basic primitives for example you can choose between a first right wings and a last rate wins",
    "start": "858959",
    "end": "864320"
  },
  {
    "text": "model or you can choose between eventual and strong consistency and dapper has those capabilities um on",
    "start": "864320",
    "end": "870880"
  },
  {
    "text": "top of state stores that might not even natively support those so those are really powerful features",
    "start": "870880",
    "end": "876959"
  },
  {
    "text": "and for each one of the dapper building blocks dapper has uh more features that it provides on",
    "start": "876959",
    "end": "883440"
  },
  {
    "text": "top of the base implementations that it hooks up into",
    "start": "883440",
    "end": "888800"
  },
  {
    "text": "similarly this is a get statement where we saved some state and then we're calling dapper",
    "start": "889440",
    "end": "895040"
  },
  {
    "text": "this the http api to get the state back it's also important to know that all of those",
    "start": "895040",
    "end": "900880"
  },
  {
    "text": "calls are available via jrpc as well and not just http and we also have some sdks on top",
    "start": "900880",
    "end": "907279"
  },
  {
    "text": "but really the lowest common denominator for in terms of protocols are http so that we're",
    "start": "907279",
    "end": "912320"
  },
  {
    "text": "inclusive to all developers out there now um those are some examples of of the",
    "start": "912320",
    "end": "917519"
  },
  {
    "text": "dapper building blocks we're going to talk about actors next um we can't go into all the building blocks here but we encourage you to",
    "start": "917519",
    "end": "924399"
  },
  {
    "text": "check all of them out inside the adapter repository",
    "start": "924399",
    "end": "929279"
  },
  {
    "text": "um so before we move on to actors um this is for example what a map of our application for tracing would",
    "start": "929600",
    "end": "936800"
  },
  {
    "text": "look like inside the cluster so you get tracing basically for free with dapper you just set up your tracing",
    "start": "936800",
    "end": "943519"
  },
  {
    "text": "backhand configure it with a simple um yaml and then dapper will show you um the map for your application calls",
    "start": "943519",
    "end": "951600"
  },
  {
    "text": "what's nice about it is that unlike a service mesh which really traces between request response types of invocations",
    "start": "951600",
    "end": "958079"
  },
  {
    "text": "dapper will also hook up your event-driven messages they're coming through um external systems that might not go",
    "start": "958079",
    "end": "965120"
  },
  {
    "text": "through the service mesh so that's that's kind of nice",
    "start": "965120",
    "end": "970320"
  },
  {
    "text": "okay so the uh next we talk about the active building block for dapper actor pattern is a computational model",
    "start": "970399",
    "end": "977440"
  },
  {
    "text": "for concurrent or distributed systems in which a large number of these actors can execute execute simultaneously and",
    "start": "977440",
    "end": "984560"
  },
  {
    "text": "independently of each other and actors can communicate with each other and then they can create more actors",
    "start": "984560",
    "end": "990639"
  },
  {
    "text": "uh one thing which is unique about actors is that they are single-sided so one actor method can execute at at any given",
    "start": "990639",
    "end": "997759"
  },
  {
    "text": "particular amount of time um so to tell now actors existed in",
    "start": "997759",
    "end": "1002800"
  },
  {
    "text": "their own language uh frameworks like akav for java and i cannot net is the tottenham equivalent",
    "start": "1002800",
    "end": "1008959"
  },
  {
    "text": "for it and then there are other uh reliable active patterns available like all these",
    "start": "1008959",
    "end": "1014320"
  },
  {
    "text": "and service arabic actors uh what dapper does is it it encapsulates the core functionalities of",
    "start": "1014320",
    "end": "1019839"
  },
  {
    "text": "an active framework in the dapper sidecar like turn based actors timers reminders",
    "start": "1019839",
    "end": "1025360"
  },
  {
    "text": "and state management and distribution and failover so that users can write their active services services in",
    "start": "1025360",
    "end": "1032400"
  },
  {
    "text": "any language of their choice they just need to uh talk to dapper sidecar over http or grpc",
    "start": "1032400",
    "end": "1038558"
  },
  {
    "text": "and dapper will take care of all the core functionalities of an actor system and dapper can",
    "start": "1038559",
    "end": "1046558"
  },
  {
    "text": "can scale up or scale down your your active instances as and when you scale up scale up or",
    "start": "1046559",
    "end": "1051919"
  },
  {
    "text": "down your services so dapper has a placement service which takes care of distributing your acting instances across multiple parts of your",
    "start": "1051919",
    "end": "1058880"
  },
  {
    "text": "service uh of your service and as they come up and down adapter will redistribute their actual",
    "start": "1058880",
    "end": "1065120"
  },
  {
    "text": "instances across these parts it's a very powerful programming model uh for",
    "start": "1065120",
    "end": "1070320"
  },
  {
    "text": "iot devices and distribute systems yes so we can actually if you think of",
    "start": "1070320",
    "end": "1076640"
  },
  {
    "text": "drones for example you could model a drone as a pod and then you'd have maybe if you have a thousand drones",
    "start": "1076640",
    "end": "1082880"
  },
  {
    "text": "um you'll have a thousand pods but with actors you can actually host millions of actors inside of a",
    "start": "1082880",
    "end": "1088720"
  },
  {
    "text": "single container which is uh really powerful really okay uh let's stop talking now and show",
    "start": "1088720",
    "end": "1096160"
  },
  {
    "text": "some demos so i'm going to be sharing my screen",
    "start": "1096160",
    "end": "1109760"
  },
  {
    "text": "okay and here we have visual studio code and we're gonna see a very simple demo",
    "start": "1109760",
    "end": "1114880"
  },
  {
    "text": "um about running dapper locally and then on kubernetes with binding so um let's say i'm an ogs developer and i",
    "start": "1114880",
    "end": "1122080"
  },
  {
    "text": "want to start getting events coming in from kafka so this is my node app here and this is",
    "start": "1122080",
    "end": "1128400"
  },
  {
    "text": "extremely simple as you can see it's just node.js my application code is very lean no sdks no libraries",
    "start": "1128400",
    "end": "1134640"
  },
  {
    "text": "nothing here really all we have is a simple web server that listens to some endpoint called",
    "start": "1134640",
    "end": "1140960"
  },
  {
    "text": "sample topic and then we're printing hello from kafka and the body and just sending back a 200 response",
    "start": "1140960",
    "end": "1146559"
  },
  {
    "text": "what could be simpler than that um really i'm not tying into any uh fast this can be a long-running type of",
    "start": "1146559",
    "end": "1152880"
  },
  {
    "text": "application so this really meets me as a developer uh where i am um and so i'm listening to sample topic",
    "start": "1152880",
    "end": "1158960"
  },
  {
    "text": "here and the only thing as a developer uh that i need to do to start getting events is just",
    "start": "1158960",
    "end": "1164320"
  },
  {
    "text": "write this really simple dapper component which is a crd but also works outside of",
    "start": "1164320",
    "end": "1169600"
  },
  {
    "text": "kubernetes and here we have the name sample topic which is the end point that we're listening on here",
    "start": "1169600",
    "end": "1176880"
  },
  {
    "text": "and here we have some metadata about how to connect to kafka and some configuration options",
    "start": "1176880",
    "end": "1184559"
  },
  {
    "text": "so i will go over here to my terminal with my node app and i'm going",
    "start": "1185440",
    "end": "1190559"
  },
  {
    "text": "to use um the dapper cli um to allow me to run",
    "start": "1190559",
    "end": "1195840"
  },
  {
    "text": "both the dapper sidecar and my applications this is a developer facing tool that's really good for the inner dev",
    "start": "1195840",
    "end": "1202000"
  },
  {
    "text": "loop stage so i'm doing dapper run and i'm giving my application an id here",
    "start": "1202000",
    "end": "1207120"
  },
  {
    "text": "and i'm telling my i'm telling the apple which port my application is listening on and then i'm just launching my node",
    "start": "1207120",
    "end": "1212880"
  },
  {
    "text": "application so this will on after one time and my application side by side",
    "start": "1212880",
    "end": "1219039"
  },
  {
    "text": "so we can see that we're running and we have both the adapter logs and the application logs written to the same",
    "start": "1219039",
    "end": "1225600"
  },
  {
    "text": "session window and i'm going to do the same thing here for the python app",
    "start": "1225600",
    "end": "1232080"
  },
  {
    "text": "and the python is currently sending events to kafka also through dapper and we can see this here really simple",
    "start": "1233120",
    "end": "1239679"
  },
  {
    "text": "python application and we can see that um these this has the dapper url here",
    "start": "1239679",
    "end": "1245200"
  },
  {
    "text": "so the python application is just having a really simple loop and it's calling dapper on localhost uh",
    "start": "1245200",
    "end": "1250640"
  },
  {
    "text": "calling bindings and calling the sample topic name so the python app also has this",
    "start": "1250640",
    "end": "1255919"
  },
  {
    "text": "yaml that we saw before and it's ending a very simple payload so a very simple",
    "start": "1255919",
    "end": "1261280"
  },
  {
    "text": "you know sdk-less python app uh sending messages to a very slim uh node.js application if we go back",
    "start": "1261280",
    "end": "1268640"
  },
  {
    "text": "here uh we can see that we are getting the responses back now let's say we want to deploy this",
    "start": "1268640",
    "end": "1274400"
  },
  {
    "text": "thing to kubernetes and we've already containerized our applications so",
    "start": "1274400",
    "end": "1280240"
  },
  {
    "text": "we have the same crd which we're going to deploy to kubernetes and here we have kubernetes manifests",
    "start": "1280240",
    "end": "1289600"
  },
  {
    "text": "so this is a regular kubernetes deployment and the only thing we need to do",
    "start": "1289600",
    "end": "1294640"
  },
  {
    "text": "is annotate the deployment and say hey we want to adapt or enable it and then dapper will inject the sidecar",
    "start": "1294640",
    "end": "1301440"
  },
  {
    "text": "into our pods so we have the same for the node.js and the python application",
    "start": "1301440",
    "end": "1307039"
  },
  {
    "text": "um a really simple configuration so the way to get started with the app really is you can install it with helm",
    "start": "1307039",
    "end": "1314400"
  },
  {
    "text": "on kubernetes but if you just want to install it in dev test mode you can do adapter init",
    "start": "1314400",
    "end": "1319520"
  },
  {
    "text": "dash dash kubernetes and battle install dapper onto our cluster",
    "start": "1319520",
    "end": "1325200"
  },
  {
    "text": "and so we can see that it's already running and if we take a look at the dogs and we'll wait for them to come up and",
    "start": "1328320",
    "end": "1335840"
  },
  {
    "text": "uh everything seems to be up and running uh and we can use the damper cli see that we have the latest version",
    "start": "1335840",
    "end": "1344159"
  },
  {
    "text": "of the app running and the control plane is healthy so that's all it takes really now the only second step is to deploy",
    "start": "1344159",
    "end": "1350960"
  },
  {
    "text": "everything onto our kubernetes cluster so we're in the deployment folder here so i'm going to",
    "start": "1350960",
    "end": "1356000"
  },
  {
    "text": "deploy the python app the node app and the bindings for kafka",
    "start": "1356000",
    "end": "1361840"
  },
  {
    "text": "and while this is deploying uh we can see that we have um kafka installed inside",
    "start": "1365840",
    "end": "1372240"
  },
  {
    "text": "of our um kafka namespace and if we take a look at the pods that",
    "start": "1372240",
    "end": "1377679"
  },
  {
    "text": "we have here we can see that um the wrapper pods running",
    "start": "1377679",
    "end": "1382880"
  },
  {
    "text": "and our two apps are running too so we have two containers inside our pods one for the dapper sidecar and the other",
    "start": "1382880",
    "end": "1388640"
  },
  {
    "text": "for the user app and now if we take a look at the logs for the node app",
    "start": "1388640",
    "end": "1395360"
  },
  {
    "text": "we can see that the same code that was written on our machine just get containerized",
    "start": "1396640",
    "end": "1402799"
  },
  {
    "text": "and it's talking to kafka and um if we take a look at our components we",
    "start": "1402799",
    "end": "1408480"
  },
  {
    "text": "can see we have our sample topic component here and now um i can just switch the sample",
    "start": "1408480",
    "end": "1414080"
  },
  {
    "text": "topic to be um for example instead of kafka it can be rabbidmq or any other of the supported dapper",
    "start": "1414080",
    "end": "1420640"
  },
  {
    "text": "components and then without changing anything in my code i just get",
    "start": "1420640",
    "end": "1426400"
  },
  {
    "text": "events coming in from the system that i configured to work with dapper",
    "start": "1426400",
    "end": "1432080"
  },
  {
    "text": "so i'm going to be transitioning over to amman i am stopping my screen share here",
    "start": "1432720",
    "end": "1440000"
  },
  {
    "text": "let me start sharing my screen now",
    "start": "1440000",
    "end": "1445840"
  },
  {
    "text": "okay is it visible now yes it is okay sounds good so i'm gonna",
    "start": "1448159",
    "end": "1455039"
  },
  {
    "text": "demo the next two building blocks for dapper one of them is actors so devil provides first class support",
    "start": "1455039",
    "end": "1462799"
  },
  {
    "text": "for language sdks to write your actor applications this is an example using csharp sdk but we have language",
    "start": "1462799",
    "end": "1470480"
  },
  {
    "text": "sdks available for java and python and and more are more are on the way",
    "start": "1470480",
    "end": "1475760"
  },
  {
    "text": "so in c sharp you would uh write your actor by writing an interface which contains methods for your actors",
    "start": "1475760",
    "end": "1482159"
  },
  {
    "text": "in this case it's it's called i demo actor and it contains two methods save data and get data",
    "start": "1482159",
    "end": "1488240"
  },
  {
    "text": "uh if we look at the actual actor implementation now you just define your class demo",
    "start": "1488240",
    "end": "1493600"
  },
  {
    "text": "actor deriving from our base class and implementing the methods inside this item actor",
    "start": "1493600",
    "end": "1498720"
  },
  {
    "text": "if we look at the methods called save data and get data you can see that save data is interacting with the state manager to",
    "start": "1498720",
    "end": "1505760"
  },
  {
    "text": "save the state and then it's using state manager again in the get data method to get the state",
    "start": "1505760",
    "end": "1511600"
  },
  {
    "text": "so what it's doing behind the scenes is that it's making calls to the adapter side car to save the state",
    "start": "1511600",
    "end": "1516960"
  },
  {
    "text": "uh using the configured state store for for dapper and to configure a state store it's a",
    "start": "1516960",
    "end": "1523760"
  },
  {
    "text": "familiar component yaml it just says that i use reddest as the state store for actors and that",
    "start": "1523760",
    "end": "1530240"
  },
  {
    "text": "perside can start using it now how to make uh calls to the cost director service from a client",
    "start": "1530240",
    "end": "1537200"
  },
  {
    "text": "service uh it's pretty simple you just create an actor proxy and tell it that you want to talk to an actor id",
    "start": "1537200",
    "end": "1543440"
  },
  {
    "text": "and you and you make a call to a particular method and this gets calling it's making cost",
    "start": "1543440",
    "end": "1548880"
  },
  {
    "text": "to save data and to get data and to run this service you integrate with asp.net core while creating your",
    "start": "1548880",
    "end": "1557039"
  },
  {
    "text": "web host builder you just say dot use active center and then you register your actor type this will configure the",
    "start": "1557039",
    "end": "1564400"
  },
  {
    "text": "actor sdk runtime to talk to dapper site car and bring the whole functionality of vectors to you now let's try to run this",
    "start": "1564400",
    "end": "1572159"
  },
  {
    "text": "and we'll run this using our dapper cli it's it's just saying dapper run uh port",
    "start": "1572159",
    "end": "1578159"
  },
  {
    "text": "is 3500 for dapper application port is 5000 and then it's going to just run the active",
    "start": "1578159",
    "end": "1585120"
  },
  {
    "text": "service so once the active service is running you can run the client application which",
    "start": "1585120",
    "end": "1592640"
  },
  {
    "text": "i just showed you it's just going to make the calls to actor sidecar actor service using the dapper sidecar",
    "start": "1592640",
    "end": "1598880"
  },
  {
    "text": "and then invoking those two methods as these active services",
    "start": "1598880",
    "end": "1604640"
  },
  {
    "text": "can be written in any language so diaper allows for class language invocation so in this case i'm going to show you uh",
    "start": "1604640",
    "end": "1611279"
  },
  {
    "text": "invocation of the actor method using http and this could be any language of your choice so it's going to make a call to",
    "start": "1611279",
    "end": "1618400"
  },
  {
    "text": "local deposit card over port 3500 and it's saying that invoke this save data method for demo",
    "start": "1618400",
    "end": "1624960"
  },
  {
    "text": "actor type and the actor id is abc and once it does that it's going to save the state into the actor",
    "start": "1624960",
    "end": "1631440"
  },
  {
    "text": "uh using dapper sidecar and then you can query the state using",
    "start": "1631440",
    "end": "1637520"
  },
  {
    "text": "uh using the getdata method here so it's going to query the state back from the active site card",
    "start": "1637520",
    "end": "1643679"
  },
  {
    "text": "uh so the next building uh block i'm going to show you is is pub sub uh from",
    "start": "1643679",
    "end": "1650640"
  },
  {
    "text": "from dapper with pub sub uh you can have your application subscribe to a topic",
    "start": "1650640",
    "end": "1655840"
  },
  {
    "text": "and other application uh publish emails to that topic and your subscriber will will get notified so in this example",
    "start": "1655840",
    "end": "1662640"
  },
  {
    "text": "uh we have a node a very simple node.js application",
    "start": "1662640",
    "end": "1668159"
  },
  {
    "text": "it's just telling dapper hey i'm interested in topic a and topic b and these are the routes on which you should invoke me whenever",
    "start": "1668159",
    "end": "1674640"
  },
  {
    "text": "there is an event for that topic similarly there could be python application in this case",
    "start": "1674640",
    "end": "1680559"
  },
  {
    "text": "it's a python application telling tapper hey i'm interested in topic a and c and these are the routes",
    "start": "1680559",
    "end": "1687120"
  },
  {
    "text": "on which you should invoke me whenever you see a message for those topics",
    "start": "1687120",
    "end": "1692240"
  },
  {
    "text": "now let's run this node subscriber using that precisely",
    "start": "1692240",
    "end": "1697679"
  },
  {
    "text": "using the cli and then run the python subscriber using dapper cli now to uh to send messages to these",
    "start": "1697679",
    "end": "1705840"
  },
  {
    "text": "topics i have a very simple uh react form application which is going to send uh",
    "start": "1705840",
    "end": "1711760"
  },
  {
    "text": "topics to uh we're going to send emails to these topics let's take a look at this uh",
    "start": "1711760",
    "end": "1719759"
  },
  {
    "text": "this server application which is uh publishing the events to publish the events using dapper you",
    "start": "1719840",
    "end": "1726559"
  },
  {
    "text": "just make an http call to this publish endpoint and then you give it a topic name and",
    "start": "1726559",
    "end": "1732080"
  },
  {
    "text": "and the body of your of your message and it will be sent to the",
    "start": "1732080",
    "end": "1737120"
  },
  {
    "text": "side car which it will in turn invoke your subscriber applications uh so so this is",
    "start": "1737120",
    "end": "1744000"
  },
  {
    "text": "uh the web front end for the for the react form i'm just gonna send a test message to",
    "start": "1744000",
    "end": "1749919"
  },
  {
    "text": "this topic a so this goes to the react form it publishes the message using the",
    "start": "1749919",
    "end": "1756080"
  },
  {
    "text": "using its own dapper sidecar so if we go back to our python subscriber and note subscriber",
    "start": "1756080",
    "end": "1761919"
  },
  {
    "text": "you can see that they both have received the messages uh for for topic a this is the note subscriber",
    "start": "1761919",
    "end": "1768080"
  },
  {
    "text": "and this is the python subscriber um yeah that's all from",
    "start": "1768080",
    "end": "1773679"
  },
  {
    "text": "all right so stop sharing and go back to the slides",
    "start": "1773679",
    "end": "1781840"
  },
  {
    "text": "yep okay",
    "start": "1783120",
    "end": "1788880"
  },
  {
    "text": "um and so we invited to join the dapper community uh over on github getter youtube",
    "start": "1790559",
    "end": "1797120"
  },
  {
    "text": "we're pretty much everywhere um just join us open issues download the software try it",
    "start": "1797120",
    "end": "1804080"
  },
  {
    "text": "and uh yeah keep in touch with us we really want to onboard as many developers as we can to",
    "start": "1804080",
    "end": "1809919"
  },
  {
    "text": "dapper and with your help have it really solve all the problems of distributed computing we'll open it up",
    "start": "1809919",
    "end": "1816320"
  },
  {
    "text": "for questions now thank you all",
    "start": "1816320",
    "end": "1823840"
  },
  {
    "text": "uh so you're labeled in a solution with strict",
    "start": "1829600",
    "end": "1836080"
  },
  {
    "text": "latency requirements and is http or gipc calls to a sidecar on localhost going to be concerned",
    "start": "1836080",
    "end": "1844399"
  },
  {
    "text": "yeah that's a good question um so for that we are first of all we are",
    "start": "1844960",
    "end": "1850880"
  },
  {
    "text": "going to release uh performance benchmarks for adapter pretty soon so we'll know the exact latency",
    "start": "1850880",
    "end": "1856159"
  },
  {
    "text": "um and processing added latencies for dapper um if you were uh just having your",
    "start": "1856159",
    "end": "1862399"
  },
  {
    "text": "application for example publish a message or go to another app directly or through dapper we know today that the",
    "start": "1862399",
    "end": "1869519"
  },
  {
    "text": "network cost of calling into dapper is about um 600 microseconds and",
    "start": "1869519",
    "end": "1875360"
  },
  {
    "text": "we can also share that under load of 1000 requests per second",
    "start": "1875360",
    "end": "1882000"
  },
  {
    "text": "um with a one kilobyte payload the dapper uh sidecar will add 4.2 milliseconds",
    "start": "1882000",
    "end": "1888480"
  },
  {
    "text": "end-to-end network latency meaning um the application calls to dapper adapter",
    "start": "1888480",
    "end": "1894159"
  },
  {
    "text": "calls to dapper on another vm so a network hop and then um dapper calls into",
    "start": "1894159",
    "end": "1899919"
  },
  {
    "text": "the second app and all the way back so it really the answer is it depends on on your",
    "start": "1899919",
    "end": "1905039"
  },
  {
    "text": "latency requirements but what we're seeing so far is pretty good okay cool thanks everyone",
    "start": "1905039",
    "end": "1912320"
  },
  {
    "text": "could could you please provide a guidance uh provide a glimpse of what dapper needs to know about its",
    "start": "1913760",
    "end": "1919120"
  },
  {
    "text": "back-ends say dapper needs to understand that back-end access transaction",
    "start": "1919120",
    "end": "1924480"
  },
  {
    "text": "or two-phase commits so basically discovering the capabilities of the component that it's just talking to",
    "start": "1924480",
    "end": "1935840"
  },
  {
    "text": "okay uh liam can we still",
    "start": "1940000",
    "end": "1945279"
  },
  {
    "text": "access native apis with services like kafka we're limited by the interface uh you're limited by the interface",
    "start": "1945279",
    "end": "1951279"
  },
  {
    "text": "but um dapper provides sort of escape hatches into specific features so if you actually go",
    "start": "1951279",
    "end": "1958080"
  },
  {
    "text": "on our repositories and take a look at um uh the the specifications that we",
    "start": "1958080",
    "end": "1963840"
  },
  {
    "text": "have for the different components um you'll see that it's very easy to um",
    "start": "1963840",
    "end": "1968880"
  },
  {
    "text": "add very feature specific stuff so you don't have this lowest comment in a minute dominator",
    "start": "1968880",
    "end": "1974880"
  },
  {
    "text": "stuff um do you have plans for actor relationships or topologies aman you",
    "start": "1974880",
    "end": "1980799"
  },
  {
    "text": "probably want to take this one uh yes yeah so dapper follows the",
    "start": "1980799",
    "end": "1986960"
  },
  {
    "text": "reliable sorry a virtual actor model uh coming from orleans or service server reliable actors",
    "start": "1986960",
    "end": "1993279"
  },
  {
    "text": "so you should be able to create actors from within actors that can give you sort of a child parent relationship",
    "start": "1993279",
    "end": "2001440"
  },
  {
    "text": "there uh what is the governance model of dapper that's a very good question",
    "start": "2002840",
    "end": "2009120"
  },
  {
    "text": "um so currently we're actually building a governance model now uh which we're going to announce in the",
    "start": "2009120",
    "end": "2015279"
  },
  {
    "text": "next i want to say um i want to say the next month",
    "start": "2015279",
    "end": "2020799"
  },
  {
    "text": "at least announce the plans for it but if you check out the dapper announcement blog from",
    "start": "2020799",
    "end": "2027200"
  },
  {
    "text": "october of 2019 we made a commitment for open governance",
    "start": "2027200",
    "end": "2032480"
  },
  {
    "text": "and uh to donate the upper to a foundation so that's something that we announced",
    "start": "2032480",
    "end": "2037600"
  },
  {
    "text": "and we intend to follow up on that",
    "start": "2037600",
    "end": "2041039"
  },
  {
    "text": "so i think the next question is does dapper have in memory stores say for local development testing um so",
    "start": "2043760",
    "end": "2050240"
  },
  {
    "text": "for local development dapper cli uh when you do dapper and it sets up your local development environment",
    "start": "2050240",
    "end": "2056398"
  },
  {
    "text": "and it sets up a local uh redis instance running and docker container which can be used for local testing in",
    "start": "2056399",
    "end": "2062800"
  },
  {
    "text": "your dev environments",
    "start": "2062800",
    "end": "2065679"
  },
  {
    "text": "when can we expect a 1.0 release uh yeah that question comes up a lot um by",
    "start": "2070079",
    "end": "2076398"
  },
  {
    "text": "the end of the year calendar year so yeah um",
    "start": "2076399",
    "end": "2082000"
  },
  {
    "text": "we're shooting for i would say the october november time frame",
    "start": "2082000",
    "end": "2088878"
  },
  {
    "text": "something like that um everything's open if you go to the dapper organization page you will see",
    "start": "2088879",
    "end": "2094320"
  },
  {
    "text": "projects you will see the milestones anything that's marked as p1 needs to be done before the 1.0 release",
    "start": "2094320",
    "end": "2100240"
  },
  {
    "text": "so it's all um it really it's all out there uh and again we'd love for you to come and help",
    "start": "2100240",
    "end": "2106320"
  },
  {
    "text": "us because the sooner we get those items done um the sooner we can get 1.0 and so far we've seen",
    "start": "2106320",
    "end": "2112400"
  },
  {
    "text": "an amazing participation from the community",
    "start": "2112400",
    "end": "2117839"
  },
  {
    "text": "so we need to start wrapping up um we will be on the uh serverless slack channel to continue the",
    "start": "2118400",
    "end": "2124400"
  },
  {
    "text": "discussions we'd love to talk to all of you there um",
    "start": "2124400",
    "end": "2131839"
  },
  {
    "text": "yeah so there's not any more questions we can wrap it up",
    "start": "2133839",
    "end": "2139760"
  },
  {
    "text": "there thank you all thank you for watching and",
    "start": "2139760",
    "end": "2144960"
  },
  {
    "text": "thank you for participating thanks everyone",
    "start": "2144960",
    "end": "2151760"
  }
]