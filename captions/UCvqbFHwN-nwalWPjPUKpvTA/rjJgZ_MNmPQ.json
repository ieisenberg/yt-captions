[
  {
    "text": "uh welcome to the workshop uh this is intended to be hands-on so if",
    "start": "320",
    "end": "5440"
  },
  {
    "text": "you're wanting to follow along go ahead and go to this this link either via the qr code or the",
    "start": "5440",
    "end": "10800"
  },
  {
    "text": "the link up there and download the repo and then run docker compose up and the",
    "start": "10800",
    "end": "16800"
  },
  {
    "text": "route of the repo you'll be deploying a system that we will use uh to build some",
    "start": "16800",
    "end": "22240"
  },
  {
    "text": "grafana dashboards and explore traces i don't know how slow the wi-fi is here so go ahead and kick it off now",
    "start": "22240",
    "end": "28960"
  },
  {
    "text": "and uh you'll be ready when we're ready",
    "start": "28960",
    "end": "33038"
  },
  {
    "text": "all right so the the workshops called analyzing and visualizing open telemetry traces with sql",
    "start": "34559",
    "end": "42719"
  },
  {
    "text": "that's what we're going to do we're going to drop some traces in the database and see what we can see",
    "start": "42800",
    "end": "50000"
  },
  {
    "text": "i'm john pruitt i'm an engineer at timescale working on the prom scale product",
    "start": "50480",
    "end": "56399"
  },
  {
    "text": "prompt scale is a back end for prometheus metrics and open telemetry traces",
    "start": "56399",
    "end": "62239"
  },
  {
    "text": "and this is a preview of what we're going to build today uh the system you're going to deploy",
    "start": "63120",
    "end": "69040"
  },
  {
    "text": "which i should say the the postcards on the table have the link as well the qr code so",
    "start": "69040",
    "end": "75600"
  },
  {
    "text": "if you missed it before it can catch up we're going to deploy a system that's",
    "start": "75600",
    "end": "81200"
  },
  {
    "text": "going to generate traces no metrics no logs and we're going to build some grafana dashboards using that",
    "start": "81200",
    "end": "88320"
  },
  {
    "text": "data this this slide right here is focusing on the time series aspect of traces",
    "start": "88320",
    "end": "96640"
  },
  {
    "text": "and then we're also going to do a second dashboard that focuses on the tree structure of traces",
    "start": "96640",
    "end": "103439"
  },
  {
    "text": "and the topology of the system yes",
    "start": "103439",
    "end": "108960"
  },
  {
    "text": "so the repo actually has two different versions the question was are these manual traces or automatic",
    "start": "112159",
    "end": "119680"
  },
  {
    "text": "today we're going to use the manual version so the code is instrumented manually there's also a",
    "start": "119680",
    "end": "126000"
  },
  {
    "text": "version in the repo that uses only auto instrumentation",
    "start": "126000",
    "end": "131119"
  },
  {
    "text": "and please feel free to ask questions as we go so what we're going to do first we're",
    "start": "131200",
    "end": "136879"
  },
  {
    "text": "going to talk about the demo system just what make sure you understand what you just deployed",
    "start": "136879",
    "end": "143599"
  },
  {
    "text": "then we're going to talk a bit about tracing background just to make sure we understand enough to write sql",
    "start": "143599",
    "end": "149440"
  },
  {
    "text": "and then we're going to build a dashboard using the time series aspect of tracing",
    "start": "149440",
    "end": "154720"
  },
  {
    "text": "then we're going to build a second dashboard focusing on the tree structures and then wrap up",
    "start": "154720",
    "end": "161280"
  },
  {
    "text": "the demo system again here's the link pull it down it all runs a docker that's all you need",
    "start": "161840",
    "end": "168640"
  },
  {
    "text": "um i'll leave it up there for a second",
    "start": "168640",
    "end": "173760"
  },
  {
    "text": "when you get to the repo you know you hit the code button you can either use git clone download it as a zip i also want to note",
    "start": "176239",
    "end": "183599"
  },
  {
    "text": "that there is a workshop.md file in the root with",
    "start": "183599",
    "end": "189920"
  },
  {
    "text": "notes so basically everything i'm going to talk about is is recorded in that that markdown file as well so if you fall",
    "start": "189920",
    "end": "196879"
  },
  {
    "text": "behind or if later on you want to revisit and dig in a little deeper you can consult that",
    "start": "196879",
    "end": "204800"
  },
  {
    "text": "operating the demo system once you get it downloaded just docker compose up starts it i like",
    "start": "206319",
    "end": "212080"
  },
  {
    "text": "to run it detached if you want to pause it but not remove it a docker compose stop and docker",
    "start": "212080",
    "end": "218000"
  },
  {
    "text": "close start starts back up and if you want to get rid of it entirely docker compose down",
    "start": "218000",
    "end": "224319"
  },
  {
    "text": "so what are you deploying we've implemented a an absurd password generator",
    "start": "225200",
    "end": "231760"
  },
  {
    "text": "um the point of this is not to build a good password generator it's to emit interesting traces",
    "start": "231760",
    "end": "238400"
  },
  {
    "text": "so what we have are four services that each",
    "start": "238400",
    "end": "243599"
  },
  {
    "text": "return a random character so the lower service",
    "start": "243599",
    "end": "249360"
  },
  {
    "text": "serves up lowercase characters upper uppercase digit digits and special special case",
    "start": "249360",
    "end": "256079"
  },
  {
    "text": "then we have a generator system that uses those other services to produce a random generated password",
    "start": "256079",
    "end": "263199"
  },
  {
    "text": "and finally we've got a load script that just continuously exercises the system and we're running",
    "start": "263199",
    "end": "268800"
  },
  {
    "text": "three replicas of that and each of these services with the exception of the load generator",
    "start": "268800",
    "end": "276240"
  },
  {
    "text": "is instrumented with open telemetry libraries to emit traces",
    "start": "276240",
    "end": "282680"
  },
  {
    "text": "also in docker we've got an observability stack",
    "start": "282800",
    "end": "288240"
  },
  {
    "text": "the traces flow into the open telemetry collector first that's not strictly necessary but it's in the box to play",
    "start": "288240",
    "end": "294800"
  },
  {
    "text": "with right now it's configured only to do batching no sampling",
    "start": "294800",
    "end": "301039"
  },
  {
    "text": "though the collector then forwards those traces to the prom scale connector which puts them in the prom scale database",
    "start": "301039",
    "end": "306880"
  },
  {
    "text": "which is a time scale postgres database",
    "start": "306880",
    "end": "311919"
  },
  {
    "text": "also in the box you've got grafana and jaeger all configured to look at the database to",
    "start": "311919",
    "end": "318000"
  },
  {
    "text": "explore traces if you want to connect directly to the",
    "start": "318000",
    "end": "324479"
  },
  {
    "text": "database it's on local localhost 5999",
    "start": "324479",
    "end": "329600"
  },
  {
    "text": "the database name is hotel demo or you can jump directly onto the database",
    "start": "329600",
    "end": "334960"
  },
  {
    "text": "container and use the client installed there",
    "start": "334960",
    "end": "339840"
  },
  {
    "text": "grafana's at localhost 3000 jager is at localhost 16686",
    "start": "340160",
    "end": "347080"
  },
  {
    "text": "and each of the services are also exposed so you can poke them independently if you want",
    "start": "347280",
    "end": "353600"
  },
  {
    "text": "so just to show you we've got uh grafana here",
    "start": "353600",
    "end": "358720"
  },
  {
    "text": "we've got jager we can jump in and find traces with jaeger",
    "start": "358720",
    "end": "364160"
  },
  {
    "text": "and also this is the password service so i can poke that and try that again",
    "start": "364160",
    "end": "372720"
  },
  {
    "text": "there we go all right",
    "start": "372960",
    "end": "378240"
  },
  {
    "text": "so let's do some tracing background uh just to make sure we all are on the same page and have a good foundation",
    "start": "378240",
    "end": "385039"
  },
  {
    "text": "uh we have to understand the data model um to understand how to answer questions",
    "start": "385039",
    "end": "390880"
  },
  {
    "text": "about our system and how to write the sql so first of all a trace is a collection",
    "start": "390880",
    "end": "397039"
  },
  {
    "text": "of spans and a span can have one or zero or more children so in that way a trace is a tree",
    "start": "397039",
    "end": "403759"
  },
  {
    "text": "structure a trace is also a time series so",
    "start": "403759",
    "end": "411199"
  },
  {
    "text": "each span has a start time it has an end time and therefore a duration",
    "start": "411199",
    "end": "416479"
  },
  {
    "text": "and each parent span encompasses all of its children so span one as a parent span two and",
    "start": "416479",
    "end": "423440"
  },
  {
    "text": "span six first children the start and end times of them fall within",
    "start": "423440",
    "end": "428880"
  },
  {
    "text": "the uh time span of the parent",
    "start": "428880",
    "end": "433520"
  },
  {
    "text": "so you're probably familiar with looking at a trace in jager right you go over to jaeger you can see the tree structure",
    "start": "434720",
    "end": "441360"
  },
  {
    "text": "over here by the nested spans and you can see the time spiri time series aspect over here with the gantt",
    "start": "441360",
    "end": "447199"
  },
  {
    "text": "chart now the length of the lines here is the duration and you also get the start and end times",
    "start": "447199",
    "end": "453680"
  },
  {
    "text": "so this is this is cool and this is a powerful tool but you typically you're only looking at one trace at a time",
    "start": "453680",
    "end": "459680"
  },
  {
    "text": "so the cool thing about sql and what we're going to do today is we're going to look at a few thousand traces at a time",
    "start": "459680",
    "end": "465440"
  },
  {
    "text": "and see what we can what we can glean from that that's you know hard to do looking at a single",
    "start": "465440",
    "end": "471199"
  },
  {
    "text": "trace at the time",
    "start": "471199",
    "end": "473919"
  },
  {
    "text": "so also let's look at the perspective uh from the code side this is a",
    "start": "476560",
    "end": "482160"
  },
  {
    "text": "function in one of the services we've deployed is python uh you can see on line 37",
    "start": "482160",
    "end": "488400"
  },
  {
    "text": "we create a span and give it a name that span has a context and the beginning of the context and the",
    "start": "488400",
    "end": "494639"
  },
  {
    "text": "end of the context will determine the start time and the end time you can attach attributes to a span",
    "start": "494639",
    "end": "501759"
  },
  {
    "text": "you can attach events to a span which are just point in time markers",
    "start": "501759",
    "end": "507440"
  },
  {
    "text": "and a span can have child span so right here we've created a span with a different name it's a child of the one",
    "start": "507440",
    "end": "513279"
  },
  {
    "text": "that wraps it it has its own start and end time that is contained within the parent span",
    "start": "513279",
    "end": "520159"
  },
  {
    "text": "and finally you can record exceptions on the span so this is just to give you kind of a",
    "start": "520159",
    "end": "526160"
  },
  {
    "text": "sense of what this looks like in code and how to translate uh what we see in the sql with you know",
    "start": "526160",
    "end": "532480"
  },
  {
    "text": "what you would see on the code side the other thing i want to mention here is again like this is",
    "start": "532480",
    "end": "538800"
  },
  {
    "text": "not a great password generator it's created to make interesting traces and",
    "start": "538800",
    "end": "544720"
  },
  {
    "text": "so these calls to work are intentionally slowing down the code",
    "start": "544720",
    "end": "549760"
  },
  {
    "text": "just to make interesting data and we've got you know random exceptions being",
    "start": "549760",
    "end": "555600"
  },
  {
    "text": "purposefully emitted as well",
    "start": "555600",
    "end": "559800"
  },
  {
    "text": "so the tracing spec let's say we wanted to ingest these these traces this is a screenshot of the",
    "start": "562160",
    "end": "568959"
  },
  {
    "text": "protobuf definition for a trace there's a lot there it would take us all day to do this probably more so we're",
    "start": "568959",
    "end": "575680"
  },
  {
    "text": "not going to do that that's why we're piggybacking on prom scale which has done the hard work",
    "start": "575680",
    "end": "580880"
  },
  {
    "text": "for us so promscale is going to land this data",
    "start": "580880",
    "end": "587600"
  },
  {
    "text": "in a postgres database in a number of tables but today we're going to focus on only",
    "start": "587600",
    "end": "593440"
  },
  {
    "text": "one view and that's the span view so each row in the span view corresponds with a single",
    "start": "593440",
    "end": "600640"
  },
  {
    "text": "span right and many traces will be represented in this view",
    "start": "600640",
    "end": "607680"
  },
  {
    "text": "the the view has many columns as well and we're only going to look at eight of them and i think you'll be surprised at",
    "start": "607680",
    "end": "613279"
  },
  {
    "text": "just how much um value we can get out of eight columns",
    "start": "613279",
    "end": "619839"
  },
  {
    "text": "each span has a span id and a trace id all of the spans belonging to a given",
    "start": "620800",
    "end": "627519"
  },
  {
    "text": "trace will share the same trace id but each span will have its own span id and so the combination of a trace id and a",
    "start": "627519",
    "end": "633920"
  },
  {
    "text": "span id uniquely identifies a span",
    "start": "633920",
    "end": "638399"
  },
  {
    "text": "the service name column unsurprisingly gives you the name of the service that emitted the span",
    "start": "639279",
    "end": "646000"
  },
  {
    "text": "the span name corresponds to the name you give the span when you create it which is typically like a function name or some sort of operation",
    "start": "646000",
    "end": "654160"
  },
  {
    "text": "the start time in time and duration that's the time series aspect of a span",
    "start": "654480",
    "end": "660800"
  },
  {
    "text": "and the using the trace id and the parent span id you can find a parent and therefore you",
    "start": "660800",
    "end": "667760"
  },
  {
    "text": "get the tree structure of a span of a trace",
    "start": "667760",
    "end": "672480"
  },
  {
    "text": "so speaking of the tree tree structure i wanted to elaborate on that last point",
    "start": "673519",
    "end": "679040"
  },
  {
    "text": "you've got the span id and the parent span id on each span and the child's parents band id points to the parents",
    "start": "679040",
    "end": "686160"
  },
  {
    "text": "span id um saying that sounds weird so for me a visual helps",
    "start": "686160",
    "end": "694160"
  },
  {
    "text": "the other thing to note here is that the each trace is going to have a single root and the root's",
    "start": "694160",
    "end": "700320"
  },
  {
    "text": "parent's band id is null that's how we identify the root",
    "start": "700320",
    "end": "705519"
  },
  {
    "text": "all right so next we're gonna we're going to uh build a dashboard we got through all of the uh",
    "start": "707440",
    "end": "715040"
  },
  {
    "text": "the boring part now we're ready to do some fun stuff so get this picture back in your mind uh",
    "start": "715040",
    "end": "722079"
  },
  {
    "text": "time span um start end dates durations um",
    "start": "722079",
    "end": "729720"
  },
  {
    "text": "what we're going to do in grafana you know grafana has this time picker in the ui right here",
    "start": "730480",
    "end": "738240"
  },
  {
    "text": "we're going to have to use that in our sql so grafana gives you a start time and an",
    "start": "738240",
    "end": "744399"
  },
  {
    "text": "end time using that ui filter and what we're going to do is compare the start times of the span to that time",
    "start": "744399",
    "end": "751360"
  },
  {
    "text": "window that we've selected and so as you can imagine some spans will be fully contained in",
    "start": "751360",
    "end": "757839"
  },
  {
    "text": "that window some will overlap and some will will be excluded from the window",
    "start": "757839",
    "end": "764720"
  },
  {
    "text": "and note that that's true within a trace so if this were a trace some spans would",
    "start": "765040",
    "end": "771200"
  },
  {
    "text": "from the trace would be included and some would be excluded it's just something to keep in mind",
    "start": "771200",
    "end": "777120"
  },
  {
    "text": "any questions so far okay",
    "start": "777120",
    "end": "782320"
  },
  {
    "text": "so in grafana there's a macro called a dollar underscore underscore time filter",
    "start": "782320",
    "end": "787600"
  },
  {
    "text": "you can use that to tie your queries to that ui widget",
    "start": "787600",
    "end": "792639"
  },
  {
    "text": "and the way we're going to do that is in the where clause we'll use time filter and we're going to filter on the start time",
    "start": "792639",
    "end": "799120"
  },
  {
    "text": "that expands to something that looks like this where the start time is between the beginning and the end of the",
    "start": "799120",
    "end": "805680"
  },
  {
    "text": "filter that we've selected if you want to query directly against postgres without kerfana",
    "start": "805680",
    "end": "812800"
  },
  {
    "text": "the way you would do something like that is where the start time is greater than now minus an interval of 15 minutes",
    "start": "812800",
    "end": "818320"
  },
  {
    "text": "that'll give you all the spans in the last 15 minutes",
    "start": "818320",
    "end": "822560"
  },
  {
    "text": "all right so the first thing we're going to do is build this widget",
    "start": "824160",
    "end": "830160"
  },
  {
    "text": "so go over to grafana sorry excuse me uh go to browse",
    "start": "830160",
    "end": "835760"
  },
  {
    "text": "there's a demo folder and remember grifon is on localhost 3000.",
    "start": "835760",
    "end": "842079"
  },
  {
    "text": "in the demo folder are a number of dashboards the ones we're going to use for the workshop are workshop 1 workshop",
    "start": "842079",
    "end": "848720"
  },
  {
    "text": "1 finished workshop 2 and workshop 2 finished so what i've done",
    "start": "848720",
    "end": "854720"
  },
  {
    "text": "is workshop one and workshop one finished are copies of one another in workshop one",
    "start": "854720",
    "end": "861440"
  },
  {
    "text": "uh all of the queries are commented out so we're gonna talk about each one and we will uncomment them and enable them",
    "start": "861440",
    "end": "867519"
  },
  {
    "text": "as we go workshop one is finished uh workshop one finished everything's enabled so if you",
    "start": "867519",
    "end": "873120"
  },
  {
    "text": "want to cheat just go to the finish one yes",
    "start": "873120",
    "end": "879279"
  },
  {
    "text": "oh yeah yeah okay sorry uh so the first time you log in it's gonna ask for an username and password",
    "start": "881519",
    "end": "887360"
  },
  {
    "text": "it's admin admin it's gonna prompt you to set a new password use whatever you want always",
    "start": "887360",
    "end": "892959"
  },
  {
    "text": "use admin uh i should have mentioned that thank you",
    "start": "892959",
    "end": "899440"
  },
  {
    "text": "you in there now okay cool uh yeah so we jump into workshop one",
    "start": "899440",
    "end": "906880"
  },
  {
    "text": "and you should see something that looks like this and nothing's working right so what we're going to do is we're going",
    "start": "906880",
    "end": "912720"
  },
  {
    "text": "to enable this this panel right over here that says number of traces in the time window",
    "start": "912720",
    "end": "918480"
  },
  {
    "text": "and when we do it's going to look something like this so behind this panel is one query the",
    "start": "918480",
    "end": "926399"
  },
  {
    "text": "query is going to look at the span view that we've been talking about it's going to use the macro from grafana to filter on",
    "start": "926399",
    "end": "933680"
  },
  {
    "text": "the time window and we're going to filter where the parent span id is null",
    "start": "933680",
    "end": "940240"
  },
  {
    "text": "and as i mentioned before the root span of every trace has a null parent spin id",
    "start": "940240",
    "end": "946079"
  },
  {
    "text": "so basically what we're saying is give me all of the root spans in this time window that we've selected",
    "start": "946079",
    "end": "951759"
  },
  {
    "text": "and why is that important we know that every trace has a single root span",
    "start": "951759",
    "end": "957920"
  },
  {
    "text": "so by counting the number of root spans in the time window we know the number of traces in the time window right",
    "start": "957920",
    "end": "965040"
  },
  {
    "text": "so go back to grafana hit edit on the panel",
    "start": "965040",
    "end": "971120"
  },
  {
    "text": "and you should see some comments in the sql take those comments out",
    "start": "971120",
    "end": "977839"
  },
  {
    "text": "hit apply and you should see a number come up",
    "start": "977839",
    "end": "984079"
  },
  {
    "text": "so right now i've got my filter set to five minutes in the last five minutes there are a hundred and",
    "start": "984240",
    "end": "989839"
  },
  {
    "text": "sorry 712 traces again this is a terrible password generator it's horribly slow",
    "start": "989839",
    "end": "997360"
  },
  {
    "text": "on purpose everybody good there okay",
    "start": "997360",
    "end": "1004240"
  },
  {
    "text": "i should also say we're going to start with easy queries and work our way up",
    "start": "1005440",
    "end": "1010720"
  },
  {
    "text": "so each one builds on the next so next we're going to do throughput",
    "start": "1010720",
    "end": "1017440"
  },
  {
    "text": "we're going to build a panel that looks like this so if we know uh",
    "start": "1017440",
    "end": "1023040"
  },
  {
    "text": "every trace has a single root span and we don't have sampling turned on we",
    "start": "1023040",
    "end": "1028480"
  },
  {
    "text": "know that every trace corresponds with a request we can compute the throughput in the system by",
    "start": "1028480",
    "end": "1035199"
  },
  {
    "text": "counting spans over time right",
    "start": "1035199",
    "end": "1040400"
  },
  {
    "text": "or counting traces sorry over time so you'll note that the the query here",
    "start": "1040400",
    "end": "1046640"
  },
  {
    "text": "is using the span view again the same filters that we use from the last query",
    "start": "1046640",
    "end": "1051679"
  },
  {
    "text": "this time we're going to count traces as well but now we're going to group it into time buckets of 10 seconds",
    "start": "1051679",
    "end": "1058799"
  },
  {
    "text": "we're using a function from time scale db called time bucket",
    "start": "1058799",
    "end": "1065200"
  },
  {
    "text": "you could do this with standard sql functions like date trunk time book bucket is just more powerful and",
    "start": "1065200",
    "end": "1070480"
  },
  {
    "text": "flexible so if we group by time and order by time",
    "start": "1070480",
    "end": "1075679"
  },
  {
    "text": "what we're going to see for a five minute window is 10 second slices where we count",
    "start": "1075679",
    "end": "1081039"
  },
  {
    "text": "we get a count for each 10 10 second slice all right so jump over here we're gonna",
    "start": "1081039",
    "end": "1087280"
  },
  {
    "text": "go to the throughput panel right here edit",
    "start": "1087280",
    "end": "1092480"
  },
  {
    "text": "i didn't want you all to have to type so we're going to make this easy and just uncomment up with the comments there",
    "start": "1092720",
    "end": "1098960"
  },
  {
    "text": "and hit apply so what do we see here we see that at least on my system",
    "start": "1098960",
    "end": "1106240"
  },
  {
    "text": "i had a peak of 46 traces in a 10 second window in the last five",
    "start": "1106240",
    "end": "1112160"
  },
  {
    "text": "minutes and i've seen as few as five so already we know that there is",
    "start": "1112160",
    "end": "1118240"
  },
  {
    "text": "variability in the throughput of this system over time and if i scroll",
    "start": "1118240",
    "end": "1123440"
  },
  {
    "text": "back out to say 15 minutes we see a pattern even more uh clearly",
    "start": "1123440",
    "end": "1129760"
  },
  {
    "text": "right there are periods of time where the throughput is high and period of time periods of time where the throughput's",
    "start": "1129760",
    "end": "1135919"
  },
  {
    "text": "low um i don't know how you would get that from",
    "start": "1135919",
    "end": "1141440"
  },
  {
    "text": "jaeger right so we just looked at you know 1500",
    "start": "1141440",
    "end": "1147600"
  },
  {
    "text": "traces and we've we've already found a pattern in our system",
    "start": "1147600",
    "end": "1153679"
  },
  {
    "text": "we're going to look at the slowest traces in the time window",
    "start": "1159360",
    "end": "1164520"
  },
  {
    "text": "so we're going to take the same exact query as before the same filter logic",
    "start": "1164880",
    "end": "1169919"
  },
  {
    "text": "this time we're not going to do any aggregations we're just going to get the distinct trace ids and their durations",
    "start": "1169919",
    "end": "1176000"
  },
  {
    "text": "and by ordering by the duration descending and getting a limit of 10 we're going to get the 10 slowest traces",
    "start": "1176000",
    "end": "1183039"
  },
  {
    "text": "in the time window so jump back over here",
    "start": "1183039",
    "end": "1189679"
  },
  {
    "text": "top left enable the query",
    "start": "1189679",
    "end": "1196960"
  },
  {
    "text": "and hit apply so we can see now like in the last 15",
    "start": "1197919",
    "end": "1203919"
  },
  {
    "text": "minutes the worst requests latency was 7.2",
    "start": "1203919",
    "end": "1209200"
  },
  {
    "text": "seconds pretty terrible right so this is one place where you know",
    "start": "1209200",
    "end": "1214960"
  },
  {
    "text": "jager could help you could go grab these trace id's or the top 10 worse go look at them try to figure out",
    "start": "1214960",
    "end": "1221919"
  },
  {
    "text": "what's wrong",
    "start": "1221919",
    "end": "1224399"
  },
  {
    "text": "all right so now we're going to look at a histogram of latencies so we've seen uh the",
    "start": "1230000",
    "end": "1235679"
  },
  {
    "text": "throughput we've seen the top ten slowest ones but the top ten slowest one doesn't really give us a picture of",
    "start": "1235679",
    "end": "1242320"
  },
  {
    "text": "um you know what are the what are the fastest ones look like what do the average ones look like",
    "start": "1242320",
    "end": "1248640"
  },
  {
    "text": "so this histogram what it's going to tell us is it's going to break our latencies down into a number of",
    "start": "1248640",
    "end": "1254159"
  },
  {
    "text": "buckets and then count in those buckets for the entire time window",
    "start": "1254159",
    "end": "1260720"
  },
  {
    "text": "uh so this query is easy you know it's essentially the same one as the top ten",
    "start": "1261120",
    "end": "1266480"
  },
  {
    "text": "slowest we're just not grabbing the slowest ones we're grabbing all of them and handing them to grafana",
    "start": "1266480",
    "end": "1273799"
  },
  {
    "text": "so enable that query",
    "start": "1277600",
    "end": "1281120"
  },
  {
    "text": "and hit apply and so what does this tell us it says for this 15 minute window the vast",
    "start": "1283440",
    "end": "1290720"
  },
  {
    "text": "majority of our requests are happening in",
    "start": "1290720",
    "end": "1296480"
  },
  {
    "text": "like what is this bucket let's say if this is 800 milliseconds you know the vast majority are happening",
    "start": "1296480",
    "end": "1302400"
  },
  {
    "text": "under under 800 milliseconds but we're seeing this long tail that drags out to eight seconds basically",
    "start": "1302400",
    "end": "1309360"
  },
  {
    "text": "um so that's good to know that paints another detailed picture of what our",
    "start": "1309360",
    "end": "1315120"
  },
  {
    "text": "system looks like",
    "start": "1315120",
    "end": "1318760"
  },
  {
    "text": "uh one signal that a lot of people want to look at especially sres are the p95 latencies this this tells us",
    "start": "1321120",
    "end": "1329679"
  },
  {
    "text": "95 of requests happen at or under",
    "start": "1330960",
    "end": "1336159"
  },
  {
    "text": "this value this this amount of latency right and we're going to plot that over time",
    "start": "1336159",
    "end": "1342799"
  },
  {
    "text": "to do that we're going to start with the same basic query we've been using all along uh we're going to apply this time bucket",
    "start": "1344720",
    "end": "1351440"
  },
  {
    "text": "to get the 10 second buckets and then we're going to use a couple of time scale db functions percentile ag",
    "start": "1351440",
    "end": "1357840"
  },
  {
    "text": "and approx percentile to get the [Music] p95 duration",
    "start": "1357840",
    "end": "1364400"
  },
  {
    "text": "you could again use standard sql functions to do that they'd just be a little less flexible",
    "start": "1364400",
    "end": "1370159"
  },
  {
    "text": "and a little slower and we're going to group by the time bucket and order by time and that's",
    "start": "1370159",
    "end": "1376720"
  },
  {
    "text": "going to give us p95 plotted over time",
    "start": "1376720",
    "end": "1382320"
  },
  {
    "text": "so jump in here enable the query",
    "start": "1384480",
    "end": "1390158"
  },
  {
    "text": "and check it out so now we know uh not only does the throughput vary over",
    "start": "1392960",
    "end": "1399760"
  },
  {
    "text": "time but so does the latency which makes sense right and they're",
    "start": "1399760",
    "end": "1404799"
  },
  {
    "text": "pretty much the inverse of one another when the throughput is high the latency the p95 latency is low",
    "start": "1404799",
    "end": "1412080"
  },
  {
    "text": "and vice versa it didn't necessarily have to be the case but the fact that it is is another um",
    "start": "1412080",
    "end": "1420080"
  },
  {
    "text": "piece of information another pattern that we see about the way our system runs",
    "start": "1420080",
    "end": "1426960"
  },
  {
    "text": "and again this is just tracing data",
    "start": "1428799",
    "end": "1432880"
  },
  {
    "text": "so we we generated a histogram of latency up here right it's for the entire 15",
    "start": "1435520",
    "end": "1441679"
  },
  {
    "text": "minute bucket which is useful but it doesn't tell us if there's some variability in",
    "start": "1441679",
    "end": "1447760"
  },
  {
    "text": "in latency over time uh beyond the 15 the the p95",
    "start": "1447760",
    "end": "1454720"
  },
  {
    "text": "so now we're going to build a histogram of latencies over time and uh what this essentially gives you",
    "start": "1454720",
    "end": "1460799"
  },
  {
    "text": "is a think of it as like you have to kind of think of 3d right because it's not only going to give you",
    "start": "1460799",
    "end": "1466640"
  },
  {
    "text": "this the slowest and the fastest in each 10 second bucket it's going to give you the span the the the spread",
    "start": "1466640",
    "end": "1474640"
  },
  {
    "text": "and it will show you where most of the uh most of the traces are landing within",
    "start": "1474640",
    "end": "1480240"
  },
  {
    "text": "that spread so the brighter box the the more traces in that box that",
    "start": "1480240",
    "end": "1485679"
  },
  {
    "text": "makes sense let's do the query first again very simple query we're building",
    "start": "1485679",
    "end": "1491600"
  },
  {
    "text": "on the same queries we've been doing we're going to use time bucket we're going to use the duration",
    "start": "1491600",
    "end": "1496640"
  },
  {
    "text": "and we're going to let grafana build that",
    "start": "1496640",
    "end": "1502400"
  },
  {
    "text": "heat map for us jump in here",
    "start": "1502400",
    "end": "1507519"
  },
  {
    "text": "hit apply and now uh so you can see right above the p95 latencies that's only telling us",
    "start": "1510960",
    "end": "1517840"
  },
  {
    "text": "you know essentially the slow what the slow um slow requests look like",
    "start": "1517840",
    "end": "1524159"
  },
  {
    "text": "now with this picture we see for each vertical slice it broken down into buckets and the",
    "start": "1524159",
    "end": "1530880"
  },
  {
    "text": "color corresponds with how many traces fall into that bucket right so we can see there's variability",
    "start": "1530880",
    "end": "1537760"
  },
  {
    "text": "in in the latencies and we can see the spread right",
    "start": "1537760",
    "end": "1543919"
  },
  {
    "text": "uh it looks kind of like a sine wave what's wrong up here",
    "start": "1543919",
    "end": "1550480"
  },
  {
    "text": "i was aborted okay any questions",
    "start": "1550480",
    "end": "1557840"
  },
  {
    "text": "all right",
    "start": "1558640",
    "end": "1560960"
  },
  {
    "text": "okay so you may say this is great i know my system is slow and i know it's variably",
    "start": "1568400",
    "end": "1574720"
  },
  {
    "text": "slow but where do i go from there you know what if i want to",
    "start": "1574720",
    "end": "1580000"
  },
  {
    "text": "nail this down to a service or an operation how do i figure out where to go um",
    "start": "1580000",
    "end": "1587600"
  },
  {
    "text": "optimize first so that's what we're going to build now we're going to build this doughnut chart",
    "start": "1587600",
    "end": "1593200"
  },
  {
    "text": "this pie chart what we're going to do is for every operation which is like a",
    "start": "1593200",
    "end": "1599440"
  },
  {
    "text": "function uh we're going to compute the enti the amount of execution time that was spent",
    "start": "1599440",
    "end": "1605440"
  },
  {
    "text": "in that operation for the 15 minute window right and",
    "start": "1605440",
    "end": "1611600"
  },
  {
    "text": "you could say okay the function that's spending that we're spending the most execution time in is the bottleneck and",
    "start": "1611600",
    "end": "1617520"
  },
  {
    "text": "that's where we should go spend our time optimizing",
    "start": "1617520",
    "end": "1622080"
  },
  {
    "text": "so we have this query this one's going to be a little bit more advanced",
    "start": "1622799",
    "end": "1627840"
  },
  {
    "text": "so go back to the thought each span has zero or more children",
    "start": "1627840",
    "end": "1633440"
  },
  {
    "text": "a parent span's time frame encompasses all of his children so if we want to know",
    "start": "1633440",
    "end": "1638799"
  },
  {
    "text": "how much time is spent in a span exclusive of his children",
    "start": "1638799",
    "end": "1643919"
  },
  {
    "text": "we have to subtract the child's duration from the parents right and that's going to get let us pinpoint",
    "start": "1643919",
    "end": "1651200"
  },
  {
    "text": "whether the time was spent in the parent or in the child so what we've got here",
    "start": "1651200",
    "end": "1656640"
  },
  {
    "text": "is the same view the same filter what we're going to do is concatenate",
    "start": "1656640",
    "end": "1663279"
  },
  {
    "text": "the service name the span name and call that our operation and then we're going to sum",
    "start": "1663279",
    "end": "1669840"
  },
  {
    "text": "the duration that's spent in the parent and we're going to subtract out",
    "start": "1669840",
    "end": "1675120"
  },
  {
    "text": "the sum of the durations of the direct children so how do we do that",
    "start": "1675120",
    "end": "1680880"
  },
  {
    "text": "we do we reference the same uh view again we're going to arise it as",
    "start": "1680880",
    "end": "1687200"
  },
  {
    "text": "k for kids we have to find where the child's trace",
    "start": "1687200",
    "end": "1693520"
  },
  {
    "text": "id is the same as the parent's trace id and where the",
    "start": "1693520",
    "end": "1699440"
  },
  {
    "text": "child's parents ban id is this span's id right so that's going to be",
    "start": "1699440",
    "end": "1706080"
  },
  {
    "text": "all of the spans that are direct children of this span",
    "start": "1706080",
    "end": "1712240"
  },
  {
    "text": "the time filter here is a performance optimization so if we we find all the direct children",
    "start": "1712240",
    "end": "1718159"
  },
  {
    "text": "and some their durations subtract it from the parents duration we know how much time is spent in the",
    "start": "1718159",
    "end": "1724559"
  },
  {
    "text": "parent excluding the children",
    "start": "1724559",
    "end": "1728320"
  },
  {
    "text": "so we're going to go over here bottom left panel edit",
    "start": "1731120",
    "end": "1737720"
  },
  {
    "text": "enable the query and hit apply",
    "start": "1739679",
    "end": "1747200"
  },
  {
    "text": "now this query is a little bit slower we could optimize it but uh it would be",
    "start": "1749279",
    "end": "1754799"
  },
  {
    "text": "harder to understand so i left it slow",
    "start": "1754799",
    "end": "1759760"
  },
  {
    "text": "i'll move it to five minutes instead of 15. okay",
    "start": "1761200",
    "end": "1766720"
  },
  {
    "text": "so what do we see here we see that in this five minute window",
    "start": "1766720",
    "end": "1773919"
  },
  {
    "text": "we spent 10.4 minutes of execution time in the digit service in the random digit",
    "start": "1773919",
    "end": "1781440"
  },
  {
    "text": "operation right it vastly outstrips all of the",
    "start": "1781440",
    "end": "1786480"
  },
  {
    "text": "rest of the system so realize we're not just looking at one process",
    "start": "1786480",
    "end": "1791600"
  },
  {
    "text": "not just looking at one service we're looking at all five services we're looking at",
    "start": "1791600",
    "end": "1798320"
  },
  {
    "text": "you know a thousand traces for five minute window so you know maybe there are all",
    "start": "1798320",
    "end": "1804480"
  },
  {
    "text": "different kinds of requests happening in that five minute window and we've pinpointed a function",
    "start": "1804480",
    "end": "1811440"
  },
  {
    "text": "that is our culprit so with this panel alone you",
    "start": "1811440",
    "end": "1816480"
  },
  {
    "text": "you've identified the bottleneck and you know exactly where to go to spend your time optimizing right",
    "start": "1816480",
    "end": "1823039"
  },
  {
    "text": "that's pretty cool",
    "start": "1823039",
    "end": "1825759"
  },
  {
    "text": "so let's build a table with that data as well you know maybe we also want to see the average and the",
    "start": "1830159",
    "end": "1836640"
  },
  {
    "text": "p95 for each of those operations we're going to use the exact same query",
    "start": "1836640",
    "end": "1842799"
  },
  {
    "text": "to do that all we're going to do is wrap it so this is the query from the last panel",
    "start": "1842799",
    "end": "1849120"
  },
  {
    "text": "we're just going to wrap that in an outer query and instead of just using the",
    "start": "1849120",
    "end": "1856640"
  },
  {
    "text": "total execution time we're going to average it and we're going to do the p95 of it",
    "start": "1856640",
    "end": "1865799"
  },
  {
    "text": "go back to griffon",
    "start": "1869279",
    "end": "1872159"
  },
  {
    "text": "we're going to edit and enable this",
    "start": "1875039",
    "end": "1881559"
  },
  {
    "text": "all right so we see that this table uh verifies what we see in the pie chart the digit service has a random digit",
    "start": "1892559",
    "end": "1900159"
  },
  {
    "text": "operation on average it's taking over a second to complete at least on my laptop and the",
    "start": "1900159",
    "end": "1906799"
  },
  {
    "text": "p95 direction is 4.2 seconds so not only is it slow on average it's",
    "start": "1906799",
    "end": "1911919"
  },
  {
    "text": "extremely slow in the slowest case we also see you know",
    "start": "1911919",
    "end": "1917440"
  },
  {
    "text": "the next slowest operation is in the same service it's the render digit and you know the p95 of it is",
    "start": "1917440",
    "end": "1926200"
  },
  {
    "text": "363 milliseconds on my laptop so between the two of these you know",
    "start": "1926200",
    "end": "1931360"
  },
  {
    "text": "where to go to look to improve things",
    "start": "1931360",
    "end": "1936720"
  },
  {
    "text": "now one thing we don't see here is whether or not that varies over time",
    "start": "1937200",
    "end": "1943120"
  },
  {
    "text": "so let's go looking for another pattern",
    "start": "1943120",
    "end": "1947399"
  },
  {
    "text": "so we're going to build this uh you can think of this as taking the pie",
    "start": "1948960",
    "end": "1954399"
  },
  {
    "text": "graph and generating a pie graph every 10 seconds and plotting it as a stacked bar graph",
    "start": "1954399",
    "end": "1961519"
  },
  {
    "text": "right so",
    "start": "1961519",
    "end": "1966799"
  },
  {
    "text": "we take the same query as before we're doing the",
    "start": "1966799",
    "end": "1972799"
  },
  {
    "text": "the parents duration excluding the sum of the direct children's durations",
    "start": "1973760",
    "end": "1979840"
  },
  {
    "text": "and we're going to use time bucket to plot that in 10 second time windows",
    "start": "1979840",
    "end": "1986360"
  },
  {
    "text": "edit that enable the query",
    "start": "1990240",
    "end": "1994480"
  },
  {
    "text": "all right and i'm going to scale back out to 15 minutes",
    "start": "2002640",
    "end": "2006960"
  },
  {
    "text": "okay so that may just look like a bunch of colors at first but we can see that this orange",
    "start": "2012880",
    "end": "2020399"
  },
  {
    "text": "bar uh is one very big relative to the others and also",
    "start": "2020399",
    "end": "2026720"
  },
  {
    "text": "varies in size there there are times when the bar the orange bar is large there are times when the orange bar is",
    "start": "2026720",
    "end": "2033600"
  },
  {
    "text": "small and if we scroll up we can see that those uh the size of the orange bar",
    "start": "2033600",
    "end": "2040720"
  },
  {
    "text": "corresponds with what we see in the histogram of latencies and the p95 latencies and the throughput",
    "start": "2040720",
    "end": "2048878"
  },
  {
    "text": "so what is this orange bar it is",
    "start": "2048879",
    "end": "2054158"
  },
  {
    "text": "the random digits function from the digit service unsurprisingly like that's what all of",
    "start": "2054399",
    "end": "2059839"
  },
  {
    "text": "the patterns are pointing to but we've just confirmed it uh what else can we see we can also see",
    "start": "2059839",
    "end": "2066079"
  },
  {
    "text": "that occasionally this blue bar is tall and this red bar",
    "start": "2066079",
    "end": "2071200"
  },
  {
    "text": "uh you know and those look periodic as well we see the red bar is longer here then it goes away",
    "start": "2071200",
    "end": "2076878"
  },
  {
    "text": "it comes back here so what is that the red one is the",
    "start": "2076879",
    "end": "2083200"
  },
  {
    "text": "render digit from the digit service which we saw right here so while this confirms that render digit",
    "start": "2083200",
    "end": "2090079"
  },
  {
    "text": "is a problem this panel shows us that it's an intermittent problem it's a periodic problem it's not a",
    "start": "2090079",
    "end": "2096398"
  },
  {
    "text": "constant problem uh what is this blue guy the blue one",
    "start": "2096399",
    "end": "2103599"
  },
  {
    "text": "is process digit i believe",
    "start": "2103599",
    "end": "2107440"
  },
  {
    "text": "h generator get that was hard to tell",
    "start": "2112720",
    "end": "2117920"
  },
  {
    "text": "in any case we've we've found two problems we've now uh correlated",
    "start": "2117920",
    "end": "2124560"
  },
  {
    "text": "a given function with latency and throughput issues and we can tell that they uh",
    "start": "2124560",
    "end": "2131440"
  },
  {
    "text": "the second function is an intermittent problem that compounds things",
    "start": "2131440",
    "end": "2137520"
  },
  {
    "text": "so we have a grafana dashboard now we've",
    "start": "2137520",
    "end": "2142960"
  },
  {
    "text": "used nothing but traces no metrics no logs uh",
    "start": "2142960",
    "end": "2148000"
  },
  {
    "text": "i don't know about you but we started out with a very simple query and built upon it",
    "start": "2148000",
    "end": "2153839"
  },
  {
    "text": "so even the the most advanced queries in here are understandable",
    "start": "2153839",
    "end": "2159200"
  },
  {
    "text": "um and yeah you know i i think you get a lot of value out of this",
    "start": "2159200",
    "end": "2165599"
  },
  {
    "text": "any question before we move on yeah",
    "start": "2165599",
    "end": "2170680"
  },
  {
    "text": "yes so the question is about sampling um so remember we've got the collector",
    "start": "2179359",
    "end": "2186720"
  },
  {
    "text": "in our stack right and right now i've got sampling turned off",
    "start": "2186720",
    "end": "2193200"
  },
  {
    "text": "i'm not sampling at all so right yes so theoretically if you were",
    "start": "2195359",
    "end": "2201040"
  },
  {
    "text": "sampling um throughput is actually obviously not going to be",
    "start": "2201040",
    "end": "2206160"
  },
  {
    "text": "throughput right you could actually if you knew like you were doing uh 10 samples or something maybe you",
    "start": "2206160",
    "end": "2212160"
  },
  {
    "text": "could multiply it scale it up and get a approximation but it wouldn't be exact",
    "start": "2212160",
    "end": "2217200"
  },
  {
    "text": "right um slowest traces you know you're going to get",
    "start": "2217200",
    "end": "2222800"
  },
  {
    "text": "the slowest of the sampled traces so the more sampling you've got the more",
    "start": "2222800",
    "end": "2228880"
  },
  {
    "text": "imprecise these would be but they should still be",
    "start": "2228880",
    "end": "2234000"
  },
  {
    "text": "um representative but you do have to be careful because",
    "start": "2234000",
    "end": "2240240"
  },
  {
    "text": "you wouldn't want to label this throughput if you were if you were sampling because that would not be correct",
    "start": "2240240",
    "end": "2247440"
  },
  {
    "text": "any other questions",
    "start": "2247440",
    "end": "2250240"
  },
  {
    "text": "all right let's go back to where we were",
    "start": "2253119",
    "end": "2257559"
  },
  {
    "text": "okay so we're going to switch gears now and",
    "start": "2269040",
    "end": "2275599"
  },
  {
    "text": "we're going to build a second grafana dashboard that instead of looking at the time series",
    "start": "2275599",
    "end": "2280880"
  },
  {
    "text": "it's going to look at the tree structure this is powerful uh because",
    "start": "2280880",
    "end": "2288240"
  },
  {
    "text": "you can't really get this with metrics right that's the beauty of traces you start to get a",
    "start": "2288240",
    "end": "2293599"
  },
  {
    "text": "topology of your system yeah so now we're going to venture into",
    "start": "2293599",
    "end": "2298960"
  },
  {
    "text": "that territory so get this picture back in your mind each span can have zero or more children",
    "start": "2298960",
    "end": "2306400"
  },
  {
    "text": "um the root span obviously has no parents",
    "start": "2306400",
    "end": "2312079"
  },
  {
    "text": "um each span has a parent span id that points to the span id of the parent and",
    "start": "2312079",
    "end": "2317119"
  },
  {
    "text": "the root has a null parent spam id so if we were to query",
    "start": "2317119",
    "end": "2324800"
  },
  {
    "text": "a trace a given trace we use a uh explicit trace id here and started getting the span ids and the",
    "start": "2325040",
    "end": "2331599"
  },
  {
    "text": "parent span ids out i mean this is what it looked like it's just a list of numbers and i don't know about you but",
    "start": "2331599",
    "end": "2337200"
  },
  {
    "text": "like my brain can't make sense of that that doesn't really tell me anything",
    "start": "2337200",
    "end": "2343280"
  },
  {
    "text": "um but we can use sql to make sense of this",
    "start": "2343280",
    "end": "2348240"
  },
  {
    "text": "to do that first i've got to make sure you know how to count to 10 and sql all right so you may think",
    "start": "2348800",
    "end": "2355920"
  },
  {
    "text": "uh select one all right i've count i've counted to one that seems easy enough",
    "start": "2355920",
    "end": "2361280"
  },
  {
    "text": "right uh if i want to count to two you know select one union select two i've counted",
    "start": "2361280",
    "end": "2367119"
  },
  {
    "text": "to 2. great i can continue that pattern to 10 and i've got 10 rows that count to 10.",
    "start": "2367119",
    "end": "2375680"
  },
  {
    "text": "another way to do it was to use would be to use like the values clause and do it that way",
    "start": "2375680",
    "end": "2381280"
  },
  {
    "text": "but hopefully we can all admit that these are gross nobody wants to do this",
    "start": "2381280",
    "end": "2386480"
  },
  {
    "text": "right and if you're familiar with postgres you may know the uh the generate series",
    "start": "2386480",
    "end": "2391839"
  },
  {
    "text": "function uh we're going to consider that cheating for now uh that's that's the nice way to",
    "start": "2391839",
    "end": "2397440"
  },
  {
    "text": "do it right so ooh uh you know if we wanted to count to a million nobody's gonna do it that way",
    "start": "2397440",
    "end": "2403119"
  },
  {
    "text": "that's just gross so how can we do it uh recursion",
    "start": "2403119",
    "end": "2410559"
  },
  {
    "text": "is everyone familiar with recursion or",
    "start": "2410720",
    "end": "2415760"
  },
  {
    "text": "this is a lot of text but recursion is when a body of code executes itself",
    "start": "2415839",
    "end": "2422720"
  },
  {
    "text": "to solve its problem right so a function can call itself um",
    "start": "2422720",
    "end": "2428800"
  },
  {
    "text": "a query can call itself and it's a way of doing looping without a for loop without a while loop right",
    "start": "2428800",
    "end": "2436000"
  },
  {
    "text": "it's about taking a big problem and broke it on breaking it into smaller instances of the same problem to",
    "start": "2436000",
    "end": "2442640"
  },
  {
    "text": "solve the problem so you may or may not have known that sequel",
    "start": "2442640",
    "end": "2449440"
  },
  {
    "text": "can be recursive and the syntax looks like this this with this is a",
    "start": "2449440",
    "end": "2456560"
  },
  {
    "text": "common table expression and you use the recursive keyword here to say this is a recursive common table",
    "start": "2456560",
    "end": "2463839"
  },
  {
    "text": "expression aliased as x and the pattern is you'll have a query",
    "start": "2463839",
    "end": "2469520"
  },
  {
    "text": "union with another query and the second query is going to reference x so it's referencing itself",
    "start": "2469520",
    "end": "2477359"
  },
  {
    "text": "and how this works is the first query is the initialization step it's where you start in the recursion",
    "start": "2477359",
    "end": "2483760"
  },
  {
    "text": "the second query is the iterative step and then finally outside you can",
    "start": "2483760",
    "end": "2489599"
  },
  {
    "text": "reference the results of all of the recursion so if you want to count to 10 in",
    "start": "2489599",
    "end": "2494800"
  },
  {
    "text": "recursive sql you have the with recursive cte you start with one",
    "start": "2494800",
    "end": "2501520"
  },
  {
    "text": "you union all you refer to x so you're looking at the previous",
    "start": "2501520",
    "end": "2506839"
  },
  {
    "text": "iteration and you take the previous iterations number and add one to it and",
    "start": "2506839",
    "end": "2512160"
  },
  {
    "text": "that's this iterations number and then finally you're going to",
    "start": "2512160",
    "end": "2517200"
  },
  {
    "text": "return the results but there's one problem with this query and it's the first rule of recursive",
    "start": "2517200",
    "end": "2524160"
  },
  {
    "text": "sequel don't forget to stop if you were to run this it would either run forever or",
    "start": "2524160",
    "end": "2530000"
  },
  {
    "text": "eventually you know throw a um throw some sort of like",
    "start": "2530000",
    "end": "2536720"
  },
  {
    "text": "stack overflow problem so what do we add we add a where clause",
    "start": "2536720",
    "end": "2542240"
  },
  {
    "text": "to the second part of the recursive cte where the number is you know less than 10",
    "start": "2542240",
    "end": "2548000"
  },
  {
    "text": "and that lets us stop iterating and we get exactly what we want",
    "start": "2548000",
    "end": "2554960"
  },
  {
    "text": "so this is just counting but you can use recursion to explore tree structures and graphs for",
    "start": "2554960",
    "end": "2561280"
  },
  {
    "text": "that matter so we've got this picture in our mind",
    "start": "2561280",
    "end": "2566400"
  },
  {
    "text": "uh this is how we're going to start our recursion we're going to find a span in each",
    "start": "2566400",
    "end": "2571680"
  },
  {
    "text": "trace to start with so we're going to filter on the spans filter on the time",
    "start": "2571680",
    "end": "2577200"
  },
  {
    "text": "we're going to filter on a service and expand name and we'll find a bunch of samples",
    "start": "2577200",
    "end": "2583359"
  },
  {
    "text": "a bunch of spans in our time window of that operation",
    "start": "2583359",
    "end": "2588880"
  },
  {
    "text": "and that's where we're going to start in the trees if we want to walk upstream",
    "start": "2588880",
    "end": "2595440"
  },
  {
    "text": "in the tree structure we we're going to use",
    "start": "2595440",
    "end": "2601599"
  },
  {
    "text": "the results of the previous iteration where it's the same trace",
    "start": "2601599",
    "end": "2606880"
  },
  {
    "text": "and where this iteration span id is the previous iterations parent span",
    "start": "2606880",
    "end": "2611920"
  },
  {
    "text": "id all right so we're going to look at spans from the same trace where this",
    "start": "2611920",
    "end": "2618000"
  },
  {
    "text": "iteration span id is the previous iteration's parent span id",
    "start": "2618000",
    "end": "2623440"
  },
  {
    "text": "and then we're going to go one more up and we'll say where this iteration span id is the previous iterations parents band",
    "start": "2623440",
    "end": "2629280"
  },
  {
    "text": "id and in that way we start here we go up go up looping recursively",
    "start": "2629280",
    "end": "2635520"
  },
  {
    "text": "until we stop which is would be where the parent span id is null there's nothing nothing else to match on",
    "start": "2635520",
    "end": "2643839"
  },
  {
    "text": "so you can do the same thing in the opposite direction you can go downstream and it's really easy you take the same",
    "start": "2645040",
    "end": "2651520"
  },
  {
    "text": "query and you just swap this relationship here so you look where this spans span id is the next",
    "start": "2651520",
    "end": "2659920"
  },
  {
    "text": "uh spans parentspin id you go downstream",
    "start": "2659920",
    "end": "2665119"
  },
  {
    "text": "now why is this why would you want to do this you might say like okay i'm working on service x",
    "start": "2665119",
    "end": "2671680"
  },
  {
    "text": "um we just got pounded in production and we don't know",
    "start": "2671680",
    "end": "2677119"
  },
  {
    "text": "where it's coming from so that then you would want to look upstream right who's sending me requests",
    "start": "2677119",
    "end": "2684240"
  },
  {
    "text": "why are they sending more or let's say i'm responsible for service x",
    "start": "2684560",
    "end": "2692000"
  },
  {
    "text": "um i'm getting the same workload but now they're running more slowly uh",
    "start": "2692000",
    "end": "2697680"
  },
  {
    "text": "why you may want to look downstream and say something in in my stack is running more",
    "start": "2697680",
    "end": "2704640"
  },
  {
    "text": "slowly now than it was before show me everything that's downstream of me",
    "start": "2704640",
    "end": "2710240"
  },
  {
    "text": "all right so we're going to build a table that looks like this go back into grafana and go back into",
    "start": "2710240",
    "end": "2717200"
  },
  {
    "text": "the demo folder and swap over to workshop 2.",
    "start": "2717200",
    "end": "2722480"
  },
  {
    "text": "right and in workshop 2 we have added this",
    "start": "2725520",
    "end": "2731440"
  },
  {
    "text": "these two pickers up here you can pick the service and you can pick the span name within",
    "start": "2731440",
    "end": "2736880"
  },
  {
    "text": "that service and it's going to filter the whole dashboard on that selection",
    "start": "2736880",
    "end": "2744359"
  },
  {
    "text": "okay so don't freak out we're gonna break this down this right here",
    "start": "2746240",
    "end": "2752800"
  },
  {
    "text": "is the is where we start um",
    "start": "2752800",
    "end": "2759359"
  },
  {
    "text": "going to look at the span table we're going to filter by the time window we're going to filter by this dollar service",
    "start": "2759359",
    "end": "2765839"
  },
  {
    "text": "ties us to the picker for the service name and the dollar span ties us to the picker for the span name",
    "start": "2765839",
    "end": "2772960"
  },
  {
    "text": "we're we're gonna get the trace id span id parent spam id",
    "start": "2772960",
    "end": "2778079"
  },
  {
    "text": "um service name spam name the duration and we're gonna count so we're gonna",
    "start": "2778079",
    "end": "2783200"
  },
  {
    "text": "start the counting at zero so that's where our recursion starts",
    "start": "2783200",
    "end": "2788960"
  },
  {
    "text": "and what we're going to do right here is we're going to take the span for each iterative step look at the",
    "start": "2788960",
    "end": "2794880"
  },
  {
    "text": "previous step where we're in the same trace and",
    "start": "2794880",
    "end": "2800400"
  },
  {
    "text": "this steps span id is the parent of the previous so we're walking up the tree",
    "start": "2800400",
    "end": "2806800"
  },
  {
    "text": "right and what we're going to do is we're going to increment the distance by one",
    "start": "2806800",
    "end": "2811920"
  },
  {
    "text": "so we know uh distance one we're directly called the one we saw we selected on distance",
    "start": "2811920",
    "end": "2819200"
  },
  {
    "text": "two was the parent of that distance three is paired with that and we're going to pull all those out",
    "start": "2819200",
    "end": "2825440"
  },
  {
    "text": "we're gonna throw out distance zero which is the one we picked and we're going to get the p99",
    "start": "2825440",
    "end": "2831200"
  },
  {
    "text": "percentiles p95 percentiles all right so go over here",
    "start": "2831200",
    "end": "2838640"
  },
  {
    "text": "go into our panel and enable this query",
    "start": "2839040",
    "end": "2845839"
  },
  {
    "text": "hit apply and if it's set to six hours",
    "start": "2847359",
    "end": "2854000"
  },
  {
    "text": "change it to five minutes all right so we're going to look at the",
    "start": "2854000",
    "end": "2859839"
  },
  {
    "text": "digit service we've said a lot about the digit service and we'll look at the slash",
    "start": "2859839",
    "end": "2865680"
  },
  {
    "text": "operation the slash band name this is where the requests are coming into the digit service so we can see upstream of the slash",
    "start": "2865680",
    "end": "2873839"
  },
  {
    "text": "we're being called by the generator service and the lower service and we're getting called directly by the",
    "start": "2873839",
    "end": "2881359"
  },
  {
    "text": "http get spams and indirectly by these",
    "start": "2881359",
    "end": "2887280"
  },
  {
    "text": "operations here and pause for a second any questions",
    "start": "2887280",
    "end": "2895280"
  },
  {
    "text": "okay now we're going to do the same thing",
    "start": "2896720",
    "end": "2903119"
  },
  {
    "text": "but downstream so this is the same exact query the only thing we've done here is swap this",
    "start": "2903119",
    "end": "2908319"
  },
  {
    "text": "relationship so we're going to drop over here",
    "start": "2908319",
    "end": "2914400"
  },
  {
    "text": "hit edit enable it",
    "start": "2914400",
    "end": "2919760"
  },
  {
    "text": "hit apply",
    "start": "2921040",
    "end": "2923760"
  },
  {
    "text": "all right so now we know what is calling this operation and what it is calling right",
    "start": "2927359",
    "end": "2934640"
  },
  {
    "text": "upstream and downstream but my problem is i still can't really visualize this",
    "start": "2934640",
    "end": "2939760"
  },
  {
    "text": "this is the table it's got us we've got some numbers in it but it doesn't paint a picture so let's paint a picture",
    "start": "2939760",
    "end": "2947838"
  },
  {
    "text": "there's a a tool in grafana called the node graph and that's what we're going",
    "start": "2950079",
    "end": "2956319"
  },
  {
    "text": "to use and the node graph requires two queries one query to identify the distinct nodes in the graph and one",
    "start": "2956319",
    "end": "2962720"
  },
  {
    "text": "query to identify the edges so we're going to build a picture of upstream spans and first we're going to",
    "start": "2962720",
    "end": "2970640"
  },
  {
    "text": "start with a query to identify the nodes that are upstream and each node",
    "start": "2970640",
    "end": "2977119"
  },
  {
    "text": "in this picture is going to be an operation and each edge is going to be a call",
    "start": "2977119",
    "end": "2984079"
  },
  {
    "text": "so we're going to take the same recursive query that we had before for upstream uh but we're going to do a distinct on",
    "start": "2984079",
    "end": "2991200"
  },
  {
    "text": "the concatenation of the service name and the span id to give it an id so this grafana widget needs an id for",
    "start": "2991200",
    "end": "2997680"
  },
  {
    "text": "each node and we're going to use the service name and the span name as titles and",
    "start": "2997680",
    "end": "3003280"
  },
  {
    "text": "subtitles now you can't really see anything",
    "start": "3003280",
    "end": "3009200"
  },
  {
    "text": "yet but we're going to go ahead and enable it so we have two queries here",
    "start": "3009760",
    "end": "3016319"
  },
  {
    "text": "uh go to the first one it's got this comment in it that says nodes",
    "start": "3016319",
    "end": "3023200"
  },
  {
    "text": "enable that one and hit apply and now you see we have nodes but we don't have any edges",
    "start": "3024559",
    "end": "3031838"
  },
  {
    "text": "so let's get the edges in here same query as before",
    "start": "3034160",
    "end": "3041280"
  },
  {
    "text": "although the recursive query has changed a little bit so with an edge it's not enough to know",
    "start": "3041280",
    "end": "3046800"
  },
  {
    "text": "one span you need to know two spans you need the start and the end right so on the first iteration we actually",
    "start": "3046800",
    "end": "3052960"
  },
  {
    "text": "don't have enough information to draw an edge so we're gonna start with a null child service name and",
    "start": "3052960",
    "end": "3060000"
  },
  {
    "text": "a null child's band name on the second and following iterations",
    "start": "3060000",
    "end": "3065440"
  },
  {
    "text": "we know the prior iteration and this iteration so we're able to draw a line between the two",
    "start": "3065440",
    "end": "3072319"
  },
  {
    "text": "so you'll notice that we've got p for parent we've got the parent service name and the parent span name",
    "start": "3072319",
    "end": "3079040"
  },
  {
    "text": "and x is the previous iteration so we've got the child's service name and the child span name",
    "start": "3079040",
    "end": "3086800"
  },
  {
    "text": "so the grafana widget needs an id for the edge and then it needs the id of the source",
    "start": "3088480",
    "end": "3094319"
  },
  {
    "text": "node and the id of the target node and with those three pieces of information it knows how to draw that",
    "start": "3094319",
    "end": "3101200"
  },
  {
    "text": "so you'll see the source and the target are the concatenation of the",
    "start": "3101200",
    "end": "3106319"
  },
  {
    "text": "span service and span names as before and now we're doing the concatenation of",
    "start": "3106319",
    "end": "3112240"
  },
  {
    "text": "all four of those elements to give it a an id and we're doing distinct on it",
    "start": "3112240",
    "end": "3117760"
  },
  {
    "text": "all right so let's draw this picture",
    "start": "3117760",
    "end": "3122078"
  },
  {
    "text": "we're going to go to the second query which will give us the edges",
    "start": "3123119",
    "end": "3130559"
  },
  {
    "text": "and we're going to hit apply let's zoom out a little bit",
    "start": "3134720",
    "end": "3141359"
  },
  {
    "text": "so we've looked at the last five minutes which we know from the previous dashboards probably between a thousand",
    "start": "3141359",
    "end": "3147200"
  },
  {
    "text": "and twenty five hundred traces and we've looked at all of the distinct",
    "start": "3147200",
    "end": "3152319"
  },
  {
    "text": "traces in that time window that are upstream that",
    "start": "3152319",
    "end": "3157680"
  },
  {
    "text": "and we've looked at all those traces we've found the ones the spans that start in the um the digit slash and",
    "start": "3157680",
    "end": "3164559"
  },
  {
    "text": "we've we've walked every single one of those traces and found the distinct call paths",
    "start": "3164559",
    "end": "3170800"
  },
  {
    "text": "that came from the outside of the system and went through this digit",
    "start": "3170800",
    "end": "3176960"
  },
  {
    "text": "slash uh span name right and so now we've got a picture of what all of those look like",
    "start": "3176960",
    "end": "3185599"
  },
  {
    "text": "uh we can see this is the one that we filtered on we can see it's being called by the",
    "start": "3185599",
    "end": "3191520"
  },
  {
    "text": "lower service and the generator service we can see that the lower service eventually gets called by the generator",
    "start": "3191520",
    "end": "3198160"
  },
  {
    "text": "service and we can see inside the generator service and this generator generate",
    "start": "3198160",
    "end": "3204480"
  },
  {
    "text": "is where the requests enter the system so now we have a dynamic real-time",
    "start": "3204480",
    "end": "3211280"
  },
  {
    "text": "map of not just our service dependencies but our operations within those services",
    "start": "3211280",
    "end": "3218720"
  },
  {
    "text": "so it's like an x-ray of of all the services at once",
    "start": "3218720",
    "end": "3224079"
  },
  {
    "text": "right um and this is actually an easter egg you might want to you might say well why on",
    "start": "3224079",
    "end": "3230960"
  },
  {
    "text": "earth is the lower service calling the digit service there's zero reason why it's a",
    "start": "3230960",
    "end": "3236640"
  },
  {
    "text": "purposeful bug in there for for us to find uh and dig through and try to go",
    "start": "3236640",
    "end": "3243200"
  },
  {
    "text": "fix questions",
    "start": "3243200",
    "end": "3249119"
  },
  {
    "text": "cool okay so let's do the same thing for downstream uh",
    "start": "3249359",
    "end": "3256240"
  },
  {
    "text": "we're gonna do the nodes first it's the same query as before we're just you know we swapped that one relationship to go",
    "start": "3256240",
    "end": "3262240"
  },
  {
    "text": "downstream instead of upstream so you can go over to the the dashboard enable",
    "start": "3262240",
    "end": "3268720"
  },
  {
    "text": "or edit this one go to the first query enable it",
    "start": "3268720",
    "end": "3275680"
  },
  {
    "text": "and hit apply",
    "start": "3277520",
    "end": "3280480"
  },
  {
    "text": "and then we've got a second query for the edges",
    "start": "3282559",
    "end": "3289040"
  },
  {
    "text": "again as before this is the exact same query as we did on the last one except for that one",
    "start": "3289040",
    "end": "3294319"
  },
  {
    "text": "relationship change",
    "start": "3294319",
    "end": "3298520"
  },
  {
    "text": "hit apply and",
    "start": "3307040",
    "end": "3311599"
  },
  {
    "text": "so now we know we filtered on digit slash this shows us the map upstream of it and this shows us",
    "start": "3315040",
    "end": "3322160"
  },
  {
    "text": "the map downstream so we know that digit forward slash calls",
    "start": "3322160",
    "end": "3327280"
  },
  {
    "text": "digit process digit and digit random digit and",
    "start": "3327280",
    "end": "3333720"
  },
  {
    "text": "digit render digit and we also know that process digit calls extra process digit",
    "start": "3334240",
    "end": "3341119"
  },
  {
    "text": "so between the two of these you now know in the last five minutes",
    "start": "3341359",
    "end": "3346559"
  },
  {
    "text": "over the you know between one and two thousand traces in the last five minutes every trace",
    "start": "3346559",
    "end": "3352880"
  },
  {
    "text": "every request that went through the digit forward slash you know chunk of code",
    "start": "3352880",
    "end": "3358160"
  },
  {
    "text": "we know the distinct call tree above it and below it everything",
    "start": "3358160",
    "end": "3363760"
  },
  {
    "text": "uh everything that went through that that's pretty cool so if we combine the",
    "start": "3363760",
    "end": "3370319"
  },
  {
    "text": "previous dashboard in this one the previous dashboard showed us that there was this performance issue and it showed us the",
    "start": "3370319",
    "end": "3377599"
  },
  {
    "text": "exact operation where that performance issue was right now we can go over to this dashboard",
    "start": "3377599",
    "end": "3383040"
  },
  {
    "text": "and we can filter on the operation that we identified in the last and we know exactly",
    "start": "3383040",
    "end": "3389599"
  },
  {
    "text": "what's upstream of it exactly what's downstream of it so we know if we optimize this thing what's it going to impact",
    "start": "3389599",
    "end": "3396559"
  },
  {
    "text": "hopefully for the positive",
    "start": "3396559",
    "end": "3399680"
  },
  {
    "text": "all right any questions",
    "start": "3401839",
    "end": "3407760"
  },
  {
    "text": "we're at like just under an hour we've got about 15 minutes",
    "start": "3407760",
    "end": "3413520"
  },
  {
    "text": "any questions about the workshop the demo the queries um also any thoughts",
    "start": "3413520",
    "end": "3420240"
  },
  {
    "text": "i'd love to hear uh after seeing this are there any things that you think of that maybe we could",
    "start": "3420240",
    "end": "3426720"
  },
  {
    "text": "answer with sql and traces yes",
    "start": "3426720",
    "end": "3433160"
  },
  {
    "text": "diagram but the connections they're creating are from those like parent and child values",
    "start": "3435040",
    "end": "3440400"
  },
  {
    "text": "is that correct that's right so there's not a danger of like a circular infinite",
    "start": "3440400",
    "end": "3447040"
  },
  {
    "text": "that's right so the question uh for the recording is about um the node graph and the",
    "start": "3452400",
    "end": "3458640"
  },
  {
    "text": "recursion and whether or not there are any loops in it and so the nature of the traces",
    "start": "3458640",
    "end": "3465599"
  },
  {
    "text": "um at least in this system is that none of our",
    "start": "3465599",
    "end": "3470880"
  },
  {
    "text": "requests are going to go through the same chunk of code twice",
    "start": "3470880",
    "end": "3475920"
  },
  {
    "text": "and especially within a given trace each span is going to have one parent",
    "start": "3475920",
    "end": "3482480"
  },
  {
    "text": "and unless somehow yeah i don't see how you could have a",
    "start": "3482480",
    "end": "3488079"
  },
  {
    "text": "span that's calling a span that's already happened so i think by nature of the data we're",
    "start": "3488079",
    "end": "3495280"
  },
  {
    "text": "not in danger of an infinite loop",
    "start": "3495280",
    "end": "3499640"
  },
  {
    "text": "anything else so is that edge graph was that just an",
    "start": "3502960",
    "end": "3508880"
  },
  {
    "text": "aggregation of all the different scans",
    "start": "3508880",
    "end": "3513880"
  },
  {
    "text": "yeah right so we're doing the distinct uh let's let's go back to the",
    "start": "3518240",
    "end": "3524240"
  },
  {
    "text": "query so you'll see right here we're using distinct here so we're finding all of the distinct",
    "start": "3524240",
    "end": "3530319"
  },
  {
    "text": "paths so it's not necessarily the case that any one request would follow all of",
    "start": "3530319",
    "end": "3536240"
  },
  {
    "text": "this it's actually not the case we know that some of them go down this path",
    "start": "3536240",
    "end": "3541839"
  },
  {
    "text": "and some of them go down this path but we're we're building a picture of all of the distinct paths",
    "start": "3541839",
    "end": "3550359"
  },
  {
    "text": "yes yeah so i know this widget you know i'm not super familiar with it i know",
    "start": "3561040",
    "end": "3566079"
  },
  {
    "text": "there's a way to color these nodes um so i think you could compute you know",
    "start": "3566079",
    "end": "3571680"
  },
  {
    "text": "the throughput or the latency like we did before and then use that to color these",
    "start": "3571680",
    "end": "3578319"
  },
  {
    "text": "yeah i'd love to see a way to color or uh like impact the size of the edges as",
    "start": "3578319",
    "end": "3584319"
  },
  {
    "text": "well but i don't think this can do that this particular ui widget",
    "start": "3584319",
    "end": "3591920"
  },
  {
    "text": "yeah right i was sending some feature requests to grafana",
    "start": "3592160",
    "end": "3599880"
  },
  {
    "text": "what else",
    "start": "3600720",
    "end": "3603200"
  },
  {
    "text": "so a lot of the queries we saw i'm assuming those are like your macros",
    "start": "3608640",
    "end": "3614960"
  },
  {
    "text": "so prom scale is open source um you can download it for free and we have",
    "start": "3619920",
    "end": "3625119"
  },
  {
    "text": "an associated apm dashboard for grafana",
    "start": "3625119",
    "end": "3630240"
  },
  {
    "text": "it's also free we don't really have any enterprise",
    "start": "3630799",
    "end": "3635920"
  },
  {
    "text": "features and [Music] yeah so that's what this is about you download it you've got this data in the",
    "start": "3635920",
    "end": "3642880"
  },
  {
    "text": "database and unless you're you're you know strong with sql",
    "start": "3642880",
    "end": "3648720"
  },
  {
    "text": "uh and have some imagination you don't really know what to do with it right uh i actually built this for myself when",
    "start": "3648720",
    "end": "3654799"
  },
  {
    "text": "i i'm on the an engineer on the team building prom scale um and",
    "start": "3654799",
    "end": "3660799"
  },
  {
    "text": "you know i needed some demo data to play around with to make sure that my schema worked and",
    "start": "3660799",
    "end": "3666480"
  },
  {
    "text": "make sure these queries actually worked and so um yeah that's that's what where it came",
    "start": "3666480",
    "end": "3672319"
  },
  {
    "text": "from any other database servers",
    "start": "3672319",
    "end": "3677760"
  },
  {
    "text": "just postgres yeah let ribbon telemetry what do you",
    "start": "3677760",
    "end": "3683839"
  },
  {
    "text": "have like a prom scale exporter and that would send it to your poster",
    "start": "3683839",
    "end": "3690960"
  },
  {
    "text": "yeah let me go back to so the the question is do you have a",
    "start": "3692400",
    "end": "3700079"
  },
  {
    "text": "prom scale exporter and so what we have is",
    "start": "3700079",
    "end": "3705119"
  },
  {
    "text": "a prom scale connector which is written in go it's kind of like an agent",
    "start": "3705119",
    "end": "3712240"
  },
  {
    "text": "so you would have your traces forwarded to that and it knows how to load them into the database",
    "start": "3712240",
    "end": "3718400"
  },
  {
    "text": "it also supports prometheus metrics so you can have metrics and traces forwarded to prom",
    "start": "3718400",
    "end": "3724000"
  },
  {
    "text": "scale and put in the same database so what i haven't done in this and i hope to expand on is let's put both in the database metrics",
    "start": "3724000",
    "end": "3730880"
  },
  {
    "text": "and traces and now with sql you can correlate the two and build something even better",
    "start": "3730880",
    "end": "3737119"
  },
  {
    "text": "you know even deeper in science",
    "start": "3737119",
    "end": "3741558"
  },
  {
    "text": "so jaeger so the prom scale connector implements the api that jager needs to",
    "start": "3744480",
    "end": "3750880"
  },
  {
    "text": "get traces so if you want actually right here when you look at jaeger and the system",
    "start": "3750880",
    "end": "3756880"
  },
  {
    "text": "you're running it's actually going through prom scale to get these traces to visualize",
    "start": "3756880",
    "end": "3763280"
  },
  {
    "text": "so prom scale's the back end for jager",
    "start": "3763280",
    "end": "3767799"
  },
  {
    "text": "and obviously you can you can connect straight to the database with any postgres driver",
    "start": "3777359",
    "end": "3782960"
  },
  {
    "text": "so if you prefer you know tableau or some other",
    "start": "3782960",
    "end": "3788640"
  },
  {
    "text": "data analytics tool that's fully supported it's standard",
    "start": "3788640",
    "end": "3795839"
  },
  {
    "text": "queries work with all of it",
    "start": "3795839",
    "end": "3799760"
  },
  {
    "text": "uh on this sheet it mentions like storing and analyzing your metrics to trace things with chrome",
    "start": "3801440",
    "end": "3806720"
  },
  {
    "text": "i guess you mentioned metrics are in separate databases they're in the same database they're in different tables",
    "start": "3806720",
    "end": "3814079"
  },
  {
    "text": "and different schemas although the schemas may change so kind of bring them together",
    "start": "3814079",
    "end": "3819359"
  },
  {
    "text": "but yeah you'll have certain tables that the metrics land in a certain tables that the traces land in and then based",
    "start": "3819359",
    "end": "3826319"
  },
  {
    "text": "on the metadata that you attach to either metrics or traces you can correlate the two",
    "start": "3826319",
    "end": "3834838"
  },
  {
    "text": "we have exemplars yes and actually on the roadmap we have",
    "start": "3838400",
    "end": "3843599"
  },
  {
    "text": "planned to do logs open telemetry logs and metrics but",
    "start": "3843599",
    "end": "3849440"
  },
  {
    "text": "you know that's all down the line",
    "start": "3849440",
    "end": "3853480"
  },
  {
    "text": "good questions anything else any ideas like what else would you like to see",
    "start": "3859520",
    "end": "3866280"
  },
  {
    "text": "i think one of the biggest issues we have from like an azure monitor perspective is we give our customers a",
    "start": "3867039",
    "end": "3872720"
  },
  {
    "text": "lot of like really robust tooling but then we expect them to build a lot of these",
    "start": "3872720",
    "end": "3878000"
  },
  {
    "text": "experiences themselves",
    "start": "3878000",
    "end": "3881799"
  },
  {
    "text": "that's a really good question so the question is around um",
    "start": "3889760",
    "end": "3894960"
  },
  {
    "text": "you know we give we we give a way to store the data",
    "start": "3894960",
    "end": "3900799"
  },
  {
    "text": "and with sql we give a way to query the data but you know what's what's in the box what's out of",
    "start": "3900799",
    "end": "3906960"
  },
  {
    "text": "the box right um",
    "start": "3906960",
    "end": "3911760"
  },
  {
    "text": "so that's that's the beauty of sql i mean it's a it's a turing complete language for data",
    "start": "3912000",
    "end": "3917839"
  },
  {
    "text": "analytics so the the cool thing is we're giving you the data and a forum with a language to go with it where you can",
    "start": "3917839",
    "end": "3924160"
  },
  {
    "text": "answer whatever question um comes to your mind but again you have to like",
    "start": "3924160",
    "end": "3930000"
  },
  {
    "text": "know sql right so i think part of that is in these apm dashboards where we we",
    "start": "3930000",
    "end": "3935359"
  },
  {
    "text": "give you like grafana dashboards that are already pre-built um",
    "start": "3935359",
    "end": "3940640"
  },
  {
    "text": "i don't know what we might come up with in the future but for now you know",
    "start": "3940640",
    "end": "3945760"
  },
  {
    "text": "it's workshops and demos and blog posts and",
    "start": "3945760",
    "end": "3951559"
  },
  {
    "text": "because for us in a part of our thinking is through grafana you know how like you are free",
    "start": "3962960",
    "end": "3970480"
  },
  {
    "text": "and it's very powerful but what you're saying",
    "start": "3970480",
    "end": "3975319"
  },
  {
    "text": "did you find out info",
    "start": "3989440",
    "end": "3993039"
  },
  {
    "text": "uh we can keep talking i just wanted to put this up because we have a um a little google forms survey",
    "start": "3996079",
    "end": "4003280"
  },
  {
    "text": "uh where you know it's like three minutes if you don't mind going and giving us some feedback that'll help us",
    "start": "4003280",
    "end": "4010319"
  },
  {
    "text": "uh you know figure out what to build you know",
    "start": "4010319",
    "end": "4014798"
  },
  {
    "text": "um anything else",
    "start": "4015359",
    "end": "4021640"
  },
  {
    "text": "cool uh so now you have a running trace generating playground on your",
    "start": "4023839",
    "end": "4029680"
  },
  {
    "text": "system take it home um play around with it if you have any",
    "start": "4029680",
    "end": "4035760"
  },
  {
    "text": "questions uh timescale has a community slack you can jump in there uh there's a prom scale",
    "start": "4035760",
    "end": "4043200"
  },
  {
    "text": "channel and find me or anyone else in there with a little tiger logo next to their name",
    "start": "4043200",
    "end": "4050880"
  },
  {
    "text": "you can hit us up on our github repo for the demo file issues",
    "start": "4050880",
    "end": "4057119"
  },
  {
    "text": "contribute that'd be great yeah thank you thank you very much",
    "start": "4057119",
    "end": "4065160"
  }
]