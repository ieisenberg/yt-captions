[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "so first let me welcome you my name is Jeremy Cowan and I am a developer Advocate manager for Amazon eks and",
    "start": "0",
    "end": "8639"
  },
  {
    "text": "joining me today I'm Muhammad wasser and I'm a principal",
    "start": "8639",
    "end": "13740"
  },
  {
    "text": "security engineer with AWS in particular I work with Amazon guard Duty team",
    "start": "13740",
    "end": "20220"
  },
  {
    "text": "and today we're going to be talking to you about finding the needles in",
    "start": "20220",
    "end": "25439"
  },
  {
    "text": "Haystack or identifying suspicious behaviors with evpf",
    "start": "25439",
    "end": "31800"
  },
  {
    "text": "and I'd like to start by first looking at the challenges that you're likely to",
    "start": "31800",
    "end": "37320"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "encounter When developing a solution for detecting threats in runtime events now",
    "start": "37320",
    "end": "44100"
  },
  {
    "text": "for starters the solution should be lightweight and stable it also should be able to handle a high",
    "start": "44100",
    "end": "51960"
  },
  {
    "text": "volume of events and assuming that you can overcome those challenges you then",
    "start": "51960",
    "end": "59579"
  },
  {
    "text": "need to separate the wheat from the chaff so all that you're left with are",
    "start": "59579",
    "end": "64619"
  },
  {
    "text": "actionable insights and in this talk we'll explain how AWS",
    "start": "64619",
    "end": "70380"
  },
  {
    "text": "approached these these different problems and why we settled on ebpf",
    "start": "70380",
    "end": "77600"
  },
  {
    "start": "77000",
    "end": "77000"
  },
  {
    "text": "so there are various approaches to uh this problem",
    "start": "78659",
    "end": "85020"
  },
  {
    "text": "uh we could have tried to extend the linguist kernel and the advantage there",
    "start": "85020",
    "end": "91080"
  },
  {
    "text": "is that you have enormous flexibility however the likelihood that your change",
    "start": "91080",
    "end": "97259"
  },
  {
    "text": "is going to be accepted Upstream is significantly as is significantly small",
    "start": "97259",
    "end": "102740"
  },
  {
    "text": "because when modifying the kernel your changes typically have to be broadly",
    "start": "102740",
    "end": "109200"
  },
  {
    "text": "applicable and so it's unlikely that you would choose to extend the the Linux",
    "start": "109200",
    "end": "114899"
  },
  {
    "text": "kernel to solve this type of problem you could also write a a kernel module and",
    "start": "114899",
    "end": "121020"
  },
  {
    "text": "again that also gives you a lot of flexibility but a lot of folks are a little",
    "start": "121020",
    "end": "127979"
  },
  {
    "text": "apprehensive about installing kernel modules in their system as they can",
    "start": "127979",
    "end": "133140"
  },
  {
    "text": "affect the stability and security of the system of the operating system",
    "start": "133140",
    "end": "139560"
  },
  {
    "text": "um you could also try deploying a sidecar container and this is good because you have a separation of concerns you don't have to",
    "start": "139560",
    "end": "146959"
  },
  {
    "text": "muddy your application logic with um security code but this increases",
    "start": "146959",
    "end": "154860"
  },
  {
    "text": "overhead and it can be circumvented so for example if you're using an emission",
    "start": "154860",
    "end": "160500"
  },
  {
    "text": "controller to inject a sidecar into a container that's deployed into a particular particular namespace you",
    "start": "160500",
    "end": "168000"
  },
  {
    "text": "could you could circumvent that by deploying a pod into a different namespace for instance",
    "start": "168000",
    "end": "175040"
  },
  {
    "start": "175000",
    "end": "175000"
  },
  {
    "text": "and yet another option that has come to the fore recently is evpf",
    "start": "175860",
    "end": "181860"
  },
  {
    "text": "and evpf like kernel modules is extremely versatile in that it allows",
    "start": "181860",
    "end": "188519"
  },
  {
    "text": "you to capture a rich information about events that are occurring from within",
    "start": "188519",
    "end": "193560"
  },
  {
    "text": "the kernel and uh ebpf happens to address a lot of the challenges that I",
    "start": "193560",
    "end": "199019"
  },
  {
    "text": "mentioned at the beginning of the presentation for instance programs ebpf programs",
    "start": "199019",
    "end": "207200"
  },
  {
    "text": "are typically considered safe to run because they're sandboxed they also only",
    "start": "207200",
    "end": "214260"
  },
  {
    "text": "have read-only access to the system called parameters they can't modify uh the parameters of the of the syscalls",
    "start": "214260",
    "end": "222900"
  },
  {
    "text": "um they're also very performant because they run within kernel space and they",
    "start": "222900",
    "end": "228720"
  },
  {
    "text": "can be loaded dynamically that is they don't require you to reboot the system",
    "start": "228720",
    "end": "234420"
  },
  {
    "text": "which is really nice and ebpf has really evolved since it was",
    "start": "234420",
    "end": "240180"
  },
  {
    "text": "initially introduced in the Linux kernel 3.18 I believe it was and at that time",
    "start": "240180",
    "end": "247440"
  },
  {
    "text": "it was largely designed for filtering Network traffic but",
    "start": "247440",
    "end": "253400"
  },
  {
    "text": "it has since evolved and new capabilities have been added to it to",
    "start": "253400",
    "end": "258799"
  },
  {
    "text": "now where you can uh deny certain syscalls",
    "start": "258799",
    "end": "265740"
  },
  {
    "text": "um and the the implementation that we're probably uh a lot of us are probably familiar with is is SEC comp",
    "start": "265740",
    "end": "274039"
  },
  {
    "text": "okay so let me uh spend a moment here to explain uh how it works",
    "start": "275820",
    "end": "281040"
  },
  {
    "start": "276000",
    "end": "276000"
  },
  {
    "text": "um so first uh the uh the operating system uh loads your evpf program or the byte",
    "start": "281040",
    "end": "288360"
  },
  {
    "text": "code for your ebpf program verifies that it's safe to run it's typically run",
    "start": "288360",
    "end": "293639"
  },
  {
    "text": "through a verifier looking for things like infinite loops and that your program exits gracefully and so on the",
    "start": "293639",
    "end": "302400"
  },
  {
    "text": "program is then just just in time compiled and then run and typically there is a an accompanying",
    "start": "302400",
    "end": "309780"
  },
  {
    "text": "user space application that is used to load the ebpf program and then reads the",
    "start": "309780",
    "end": "315180"
  },
  {
    "text": "output or enriches the output with additional metadata like in a kubernetes",
    "start": "315180",
    "end": "321540"
  },
  {
    "text": "environment uh it's it's valuable to know the container ID or the Pod name but reading that output from ebbf is",
    "start": "321540",
    "end": "328020"
  },
  {
    "text": "completely optional you don't you don't have to do that",
    "start": "328020",
    "end": "333900"
  },
  {
    "start": "332000",
    "end": "332000"
  },
  {
    "text": "um and I feel like uh this is a replica of Liz's slide from this morning",
    "start": "333900",
    "end": "340259"
  },
  {
    "text": "um this basically is depicting how applications in user space uh communicate with uh with the kernel",
    "start": "340259",
    "end": "348180"
  },
  {
    "text": "um you know this happens when you have an application that has to access an area of memory or accessing a file on",
    "start": "348180",
    "end": "354600"
  },
  {
    "text": "disk it uh it interfaces through interfaces with the kernel through these",
    "start": "354600",
    "end": "360360"
  },
  {
    "text": "syscalls and ebpf can attach itself or an ebpf",
    "start": "360360",
    "end": "367020"
  },
  {
    "text": "program can attach itself to these to these syscalls and that's where you can",
    "start": "367020",
    "end": "373020"
  },
  {
    "text": "you can get additional information about the the program that invoked that",
    "start": "373020",
    "end": "378720"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "particular syscall so here's a very simplistic example of how guard duty is using ebpf in this",
    "start": "378720",
    "end": "384900"
  },
  {
    "text": "example we have a process that's running in user space that's attempting to open a file it calls the system Handler and",
    "start": "384900",
    "end": "393259"
  },
  {
    "text": "the the arguments that were that were used to call that Handler is passed to",
    "start": "393259",
    "end": "399900"
  },
  {
    "text": "the ebpf probe and then that ebpf probe has the ability to send that information",
    "start": "399900",
    "end": "407060"
  },
  {
    "text": "to a user space agent and with Zeke here he's going to run through this in",
    "start": "407060",
    "end": "413520"
  },
  {
    "text": "Greater detail a little later when we get to his part of the presentation",
    "start": "413520",
    "end": "419240"
  },
  {
    "start": "419000",
    "end": "419000"
  },
  {
    "text": "as for getting started with evpf I'll say this if you're if you're not a",
    "start": "419880",
    "end": "426240"
  },
  {
    "text": "seed programmer uh like like me writing your own ebpf program",
    "start": "426240",
    "end": "431940"
  },
  {
    "text": "um might not be very feasible practical or easy and having said that uh I I'm pretty",
    "start": "431940",
    "end": "439979"
  },
  {
    "text": "sure there are plans for ebpf to support rust and other languages in the near future which will make evpf a lot more",
    "start": "439979",
    "end": "447199"
  },
  {
    "text": "accessible to developers and in preparing for this talk I found three",
    "start": "447199",
    "end": "454020"
  },
  {
    "text": "really useful resources the first is a project from solo i o called Bumblebee",
    "start": "454020",
    "end": "460099"
  },
  {
    "text": "which I'll say automatically generates boilerplate code based on your answers",
    "start": "460099",
    "end": "467039"
  },
  {
    "text": "to a series of questions it also comes with the CLI which makes loading your evpf program relatively easy",
    "start": "467039",
    "end": "474860"
  },
  {
    "text": "the other resource is a book that appeared on Liz's slide this morning",
    "start": "474860",
    "end": "480979"
  },
  {
    "text": "called learning evpf um I managed to get through like the",
    "start": "480979",
    "end": "486180"
  },
  {
    "text": "first half dozen chapters uh very very good resource on ebpf especially if",
    "start": "486180",
    "end": "492419"
  },
  {
    "text": "you're getting started and then the last resource that I'll mention here is the ebpf summit",
    "start": "492419",
    "end": "498000"
  },
  {
    "text": "um all the talks from that event are now available to watch On Demand if you're so interested",
    "start": "498000",
    "end": "505039"
  },
  {
    "start": "506000",
    "end": "506000"
  },
  {
    "text": "and similar to the earlier slide where I showed you the advantages and",
    "start": "506879",
    "end": "512099"
  },
  {
    "text": "disadvantages of different approaches to threat detection I've created a table",
    "start": "512099",
    "end": "517140"
  },
  {
    "text": "here showing the advantages and disadvantages of evpf we know from earlier that it's extremely versatile",
    "start": "517140",
    "end": "524300"
  },
  {
    "text": "and faster to write and deploy than say Linux kernel module or to change the",
    "start": "524300",
    "end": "531060"
  },
  {
    "text": "kernel itself there are other advantages like memory safety and and great",
    "start": "531060",
    "end": "538380"
  },
  {
    "text": "performance and portability with things like compile once and run everywhere",
    "start": "538380",
    "end": "543560"
  },
  {
    "text": "along with BTF or ebpf type format yeah which",
    "start": "543560",
    "end": "553320"
  },
  {
    "text": "uh which can translate with data structures within the kernel between different kernel versions yeah now the",
    "start": "554279",
    "end": "561779"
  },
  {
    "text": "downside of evpf is that the tooling for it is relatively immature and debugging it is still",
    "start": "561779",
    "end": "569820"
  },
  {
    "text": "pretty hard but I'm sure that as it becomes increasingly popular that these",
    "start": "569820",
    "end": "576600"
  },
  {
    "text": "challenges will be overcome as for common use cases for evpf",
    "start": "576600",
    "end": "582000"
  },
  {
    "start": "578000",
    "end": "578000"
  },
  {
    "text": "security of course but it's also found in a lot of networking applications",
    "start": "582000",
    "end": "587839"
  },
  {
    "text": "and observability tools like Hubble which you saw a few pictures of during",
    "start": "587839",
    "end": "594000"
  },
  {
    "text": "the keynote along with Pixie and lots of other networking and observability tools",
    "start": "594000",
    "end": "600839"
  },
  {
    "text": "and at AWS we love evpf we have several",
    "start": "600839",
    "end": "605940"
  },
  {
    "text": "groups that are using it it's becoming increasingly uh popular at AWS here are",
    "start": "605940",
    "end": "610980"
  },
  {
    "start": "609000",
    "end": "609000"
  },
  {
    "text": "a smattering of examples of how AWS is making use of ebpf Lambda is using it",
    "start": "610980",
    "end": "619380"
  },
  {
    "text": "today to create pools of geneve network tunnels and this allowed us to reduce",
    "start": "619380",
    "end": "625220"
  },
  {
    "text": "the VPC function code start from 150 milliseconds to 150 microseconds a",
    "start": "625220",
    "end": "633360"
  },
  {
    "text": "pretty significant Improvement um and then VPC is actually using it in",
    "start": "633360",
    "end": "639300"
  },
  {
    "text": "several different places they're currently using it to observe TCP TCP flow level performance we have",
    "start": "639300",
    "end": "646680"
  },
  {
    "text": "applications like S3 that can be accessed in a variety of different ways",
    "start": "646680",
    "end": "651720"
  },
  {
    "text": "and so they're looking at the TCP flows for performance and then later they're",
    "start": "651720",
    "end": "657899"
  },
  {
    "text": "they're looking at to looking at dynamically tuning the performance of the TCP stack",
    "start": "657899",
    "end": "664040"
  },
  {
    "text": "for different uh for different services and uh and their access patterns",
    "start": "664040",
    "end": "670380"
  },
  {
    "text": "um we're also using it um or we have a a distributed packet processing pipeline",
    "start": "670380",
    "end": "676980"
  },
  {
    "text": "um written in ebpf and then it's also used to implement security groups and",
    "start": "676980",
    "end": "682380"
  },
  {
    "text": "and knackles and if if you used Amazon eks Amazon's",
    "start": "682380",
    "end": "689820"
  },
  {
    "text": "managed kubernetes offering it has its own vpcc cni today it does not include a",
    "start": "689820",
    "end": "697260"
  },
  {
    "text": "policy engine we make use of Calico policy engine or the psyllium policy",
    "start": "697260",
    "end": "704459"
  },
  {
    "text": "engine in the future we're going to add support for Network policy",
    "start": "704459",
    "end": "709640"
  },
  {
    "text": "using evpf and then uh why EBP why ebpf for guard",
    "start": "709640",
    "end": "718079"
  },
  {
    "start": "714000",
    "end": "714000"
  },
  {
    "text": "Duty ebpf elected to use",
    "start": "718079",
    "end": "723540"
  },
  {
    "text": "guard Duty elected to use ebpf for threat detection for a variety of",
    "start": "723540",
    "end": "728820"
  },
  {
    "text": "reasons first it can be implemented quickly as I mentioned there's less apprehension about",
    "start": "728820",
    "end": "735260"
  },
  {
    "text": "installing evpf programs than there is about kernel modules because they're",
    "start": "735260",
    "end": "741000"
  },
  {
    "text": "because evpf programs are sandboxed and ebpf programs are relatively easy to",
    "start": "741000",
    "end": "747240"
  },
  {
    "text": "install and update um finally ebpf provides Rich",
    "start": "747240",
    "end": "752820"
  },
  {
    "text": "information about kernel events and these these events",
    "start": "752820",
    "end": "758160"
  },
  {
    "text": "can be enriched with additional information like container ID and pod name which gives",
    "start": "758160",
    "end": "765380"
  },
  {
    "text": "gives the the user additional context to help identify threats to their",
    "start": "765380",
    "end": "772200"
  },
  {
    "text": "environment and ebpf can be used to provide",
    "start": "772200",
    "end": "778079"
  },
  {
    "text": "protection at runtime which also makes it very appealing for threat prevention which you might talk about later right",
    "start": "778079",
    "end": "785639"
  },
  {
    "text": "yeah so today car duty is primarily using it for threat detection but",
    "start": "785639",
    "end": "791600"
  },
  {
    "text": "the appealing thing about evpf is that it could be used to prevent prevent attacks",
    "start": "791600",
    "end": "798540"
  },
  {
    "text": "in addition to detecting them so with that I'm going to hand the Baton to lazique",
    "start": "798540",
    "end": "805459"
  },
  {
    "start": "799000",
    "end": "799000"
  },
  {
    "text": "yeah so I'm gonna go I'm going to dive into some",
    "start": "812279",
    "end": "817800"
  },
  {
    "text": "more details about how we are using evpf what choices we have made what type of events we are collecting",
    "start": "817800",
    "end": "824639"
  },
  {
    "text": "and we'll also go into a scenario and show you what type of events",
    "start": "824639",
    "end": "831139"
  },
  {
    "text": "will will result in that scenario and what type of detections we'll be able to",
    "start": "831139",
    "end": "836399"
  },
  {
    "text": "get um currently we are primarily using ebpf",
    "start": "836399",
    "end": "842279"
  },
  {
    "text": "for system called tracing because it's very effective for threat monitoring and",
    "start": "842279",
    "end": "848339"
  },
  {
    "text": "threat detection when uh when you're using system called",
    "start": "848339",
    "end": "854820"
  },
  {
    "text": "tracing For Thread detection there are three main objectives number one you",
    "start": "854820",
    "end": "860040"
  },
  {
    "text": "need to capture the input arguments of the system calls so that you could figure out what it is trying to do",
    "start": "860040",
    "end": "866760"
  },
  {
    "text": "number two you need to capture the details of the actor process or the process that invoke the system call",
    "start": "866760",
    "end": "873060"
  },
  {
    "text": "number three you may also need to capture the the written value of the",
    "start": "873060",
    "end": "878760"
  },
  {
    "text": "system call so you could figure out if the system call was successful or it returned an error",
    "start": "878760",
    "end": "885740"
  },
  {
    "text": "ebpf allows you to as Jeremy mentioned allows you to attach",
    "start": "885860",
    "end": "893279"
  },
  {
    "text": "ebpf code or ebpf probe to various Trace points or hook points inside the kernel",
    "start": "893279",
    "end": "900000"
  },
  {
    "text": "for system called tracing one such hook point is system called enter hook",
    "start": "900000",
    "end": "906600"
  },
  {
    "text": "or system call enter Trace point this Trace Point triggers as soon as the",
    "start": "906600",
    "end": "912120"
  },
  {
    "text": "kernel starts processing the system call when an ebpf probe is attached to this",
    "start": "912120",
    "end": "918839"
  },
  {
    "text": "Trace point the kernel passes all the input arguments of the system call",
    "start": "918839",
    "end": "924300"
  },
  {
    "text": "to the abpf probe the ebpf probe can also get the details",
    "start": "924300",
    "end": "929940"
  },
  {
    "text": "of the actor process from the task structure which is an internal kernel structure then it can send the input",
    "start": "929940",
    "end": "938100"
  },
  {
    "text": "arguments as well as the details of the actor process to user space for further processing",
    "start": "938100",
    "end": "944579"
  },
  {
    "text": "another option for system call processing or sorry system called tracing with ebpf",
    "start": "944579",
    "end": "950279"
  },
  {
    "text": "is to attach an ebpf probe to an internal kernel function which is",
    "start": "950279",
    "end": "955980"
  },
  {
    "text": "invoked as part of the kernel processing of the system call these type of",
    "start": "955980",
    "end": "961320"
  },
  {
    "text": "probes are called K probes when you attach an ebpf probe to to an",
    "start": "961320",
    "end": "967980"
  },
  {
    "text": "internal kernel function the kernel passes all the input arguments of that function to the eppf probe the ebpf",
    "start": "967980",
    "end": "975120"
  },
  {
    "text": "probe can then take these input arguments as well as the actor process details and send those to user space",
    "start": "975120",
    "end": "982920"
  },
  {
    "text": "for further processing in order to get the return value the",
    "start": "982920",
    "end": "988800"
  },
  {
    "text": "primary option is to hook into the system called exit Trace point or hook",
    "start": "988800",
    "end": "994199"
  },
  {
    "text": "when you attach a probe to that or ebpf probe to that the kernel passes the written value of the system call to your",
    "start": "994199",
    "end": "1001940"
  },
  {
    "text": "ebpf probe you can collect the return value and send it to the user space",
    "start": "1001940",
    "end": "1008380"
  },
  {
    "start": "1009000",
    "end": "1009000"
  },
  {
    "text": "now I'll also talk about you know solve the security considerations when",
    "start": "1009620",
    "end": "1014899"
  },
  {
    "text": "you are choosing a proper Trace point um I talked about the system called",
    "start": "1014899",
    "end": "1022040"
  },
  {
    "text": "enter Trace point for act for capturing system called arguments although it's an",
    "start": "1022040",
    "end": "1028280"
  },
  {
    "text": "easy and efficient way of capturing system call arguments it is vulnerable to race conditions or time of check time",
    "start": "1028280",
    "end": "1034938"
  },
  {
    "text": "of use issues let's consider the example of open syscall",
    "start": "1034939",
    "end": "1040459"
  },
  {
    "text": "in order to understand this point when you hook an abpf probe into open system call",
    "start": "1040459",
    "end": "1046760"
  },
  {
    "text": "as I said the kernel passes all the input arguments to your ebpf probe",
    "start": "1046760",
    "end": "1051799"
  },
  {
    "text": "one of those arguments in case of the open system call is path name which is a",
    "start": "1051799",
    "end": "1056900"
  },
  {
    "text": "pointer to a user space address that contains the path name of the file being opened",
    "start": "1056900",
    "end": "1063320"
  },
  {
    "text": "now your ebpf probe in this case has to read the path name from",
    "start": "1063320",
    "end": "1068660"
  },
  {
    "text": "from this user space address and some point later the kernel also",
    "start": "1068660",
    "end": "1075679"
  },
  {
    "text": "reads the same path name from the same user space address you can notice that there",
    "start": "1075679",
    "end": "1081140"
  },
  {
    "text": "is a Time window between the time when the ebpf probe reads the path name",
    "start": "1081140",
    "end": "1086419"
  },
  {
    "text": "and the kernel reads the path name right and an attacker can potentially exploit",
    "start": "1086419",
    "end": "1092360"
  },
  {
    "text": "this time window so since it's since",
    "start": "1092360",
    "end": "1097700"
  },
  {
    "text": "both the probe and the kernel are reading the path name at different times from user space a user space attacker",
    "start": "1097700",
    "end": "1104179"
  },
  {
    "text": "can modify the path name between in in that time window if that happens your probe is going to",
    "start": "1104179",
    "end": "1111980"
  },
  {
    "text": "read a different path name than what kernel reads and processes",
    "start": "1111980",
    "end": "1118419"
  },
  {
    "text": "a safe option or a safe alternative is to attach your ebpf probe to an internal",
    "start": "1120919",
    "end": "1127880"
  },
  {
    "text": "kernel function for example in case of open system call one such internal kernel function is security file open",
    "start": "1127880",
    "end": "1135500"
  },
  {
    "text": "when you hook to your ebpf probe to this internal kernel function",
    "start": "1135500",
    "end": "1140780"
  },
  {
    "text": "you can read the path name from internal kernel data structures for example the",
    "start": "1140780",
    "end": "1146780"
  },
  {
    "text": "file is struck in this case this is not vulnerable to race conditions or time of check time of use",
    "start": "1146780",
    "end": "1153080"
  },
  {
    "text": "exploitation because a user space attacker cannot manipulate the internal kernel function sorry the",
    "start": "1153080",
    "end": "1160100"
  },
  {
    "text": "internal kernel data structure so we have learned if you are interested",
    "start": "1160100",
    "end": "1166760"
  },
  {
    "text": "in more details of these type of attacks you can view this Defcon presentation",
    "start": "1166760",
    "end": "1171799"
  },
  {
    "text": "Phantom attack evading system called monitoring very interesting presentation",
    "start": "1171799",
    "end": "1177620"
  },
  {
    "text": "so we have learned from the research on these attacks and we have implemented our ebpf probe in Secure fashion",
    "start": "1177620",
    "end": "1184760"
  },
  {
    "text": "in particular none of our ebpf probe reads user space memory",
    "start": "1184760",
    "end": "1192760"
  },
  {
    "start": "1192000",
    "end": "1192000"
  },
  {
    "text": "now I'll talk a little bit about the the",
    "start": "1194419",
    "end": "1199179"
  },
  {
    "text": "level of context which ebpf provides us",
    "start": "1199700",
    "end": "1204820"
  },
  {
    "text": "a significant percentage of our customers now use container workloads on",
    "start": "1206360",
    "end": "1212059"
  },
  {
    "text": "platforms like um Amazon eks when it comes to threat detection the",
    "start": "1212059",
    "end": "1218299"
  },
  {
    "text": "primary demand is that the detections should contain container level details",
    "start": "1218299",
    "end": "1224059"
  },
  {
    "text": "in other words if a detection originated from inside a container it should have",
    "start": "1224059",
    "end": "1229160"
  },
  {
    "text": "the details of that container otherwise that detection is not very useful or actionable for them",
    "start": "1229160",
    "end": "1236000"
  },
  {
    "text": "ebpf allows us to not just provide the container and pod level details it also allows us to provide all the process",
    "start": "1236000",
    "end": "1242660"
  },
  {
    "text": "process level details which is a significant Improvement of on",
    "start": "1242660",
    "end": "1247700"
  },
  {
    "text": "ah on guard duties existing flow logs and DNS logs based detections which only",
    "start": "1247700",
    "end": "1253880"
  },
  {
    "text": "provide host level or ec2 level details",
    "start": "1253880",
    "end": "1259780"
  },
  {
    "start": "1260000",
    "end": "1260000"
  },
  {
    "text": "a little bit about how we are collecting the context details which details we are",
    "start": "1261320",
    "end": "1267440"
  },
  {
    "text": "collecting from kernel which from user space our strategy is is to collect as much",
    "start": "1267440",
    "end": "1274160"
  },
  {
    "text": "information or data from inside the kernel as much possible because that's more efficient and it's",
    "start": "1274160",
    "end": "1281059"
  },
  {
    "text": "also safer so we are able to get all the process level details from the kernel such as",
    "start": "1281059",
    "end": "1288380"
  },
  {
    "text": "the PID of the process executable path we are also even able to get the",
    "start": "1288380",
    "end": "1294080"
  },
  {
    "text": "container ID if if a process happens to be running inside a container from the kernel",
    "start": "1294080",
    "end": "1300260"
  },
  {
    "text": "of course there is some information which is not available inside the kernel we have to get it from the user space so",
    "start": "1300260",
    "end": "1306980"
  },
  {
    "text": "for example container image name image digest we have to get it from the user",
    "start": "1306980",
    "end": "1312559"
  },
  {
    "text": "space ah similarly kubernetes spot IDs namespace and name",
    "start": "1312559",
    "end": "1318140"
  },
  {
    "text": "is also obtained from the user space and then the shaw 256 hash of the executable",
    "start": "1318140",
    "end": "1323240"
  },
  {
    "text": "is also obtained from the user space",
    "start": "1323240",
    "end": "1327158"
  },
  {
    "start": "1328000",
    "end": "1328000"
  },
  {
    "text": "now what type of events we are collecting Linux supports or has 300 plus system",
    "start": "1328640",
    "end": "1336559"
  },
  {
    "text": "calls ebpf can capture all those but that wouldn't be very efficient",
    "start": "1336559",
    "end": "1342020"
  },
  {
    "text": "so what we do we try to collect all the relevant system call events which are",
    "start": "1342020",
    "end": "1347179"
  },
  {
    "text": "valuable in terms of thread detection ah some of the main ones that we collect",
    "start": "1347179",
    "end": "1353240"
  },
  {
    "text": "include process creation execution events",
    "start": "1353240",
    "end": "1359059"
  },
  {
    "text": "these events allow us to provide process level details they also allow us to",
    "start": "1359059",
    "end": "1364400"
  },
  {
    "text": "identify suspicious process executions they also allow us to",
    "start": "1364400",
    "end": "1369980"
  },
  {
    "text": "to profile or or track behavior of various executables and pods",
    "start": "1369980",
    "end": "1377179"
  },
  {
    "text": "and containers next up we also collect file system operations such as file open and file",
    "start": "1377179",
    "end": "1384740"
  },
  {
    "text": "mounts file system mounts um these events allow us to identify",
    "start": "1384740",
    "end": "1391820"
  },
  {
    "text": "suspicious file system operations they also allow us to track file system activity of various processes",
    "start": "1391820",
    "end": "1397659"
  },
  {
    "text": "executables pods and containers and then another useful category is",
    "start": "1397659",
    "end": "1404840"
  },
  {
    "text": "network connection events these events allow us to identify connections with",
    "start": "1404840",
    "end": "1410539"
  },
  {
    "text": "known bad IP addresses or known malicious IP addresses they also allow us to again track network based activity",
    "start": "1410539",
    "end": "1417980"
  },
  {
    "text": "of various processes executables pods and containers",
    "start": "1417980",
    "end": "1423520"
  },
  {
    "text": "ah DNS requests and responses are also another useful set of data",
    "start": "1423740",
    "end": "1431020"
  },
  {
    "text": "they allow us to detect when a process tries to look up a suspicious domain",
    "start": "1431020",
    "end": "1438140"
  },
  {
    "text": "name and then",
    "start": "1438140",
    "end": "1444320"
  },
  {
    "text": "um another category is inter-process interactions or when one process tries to inject into the memory of another",
    "start": "1444320",
    "end": "1451100"
  },
  {
    "text": "process we try to collect events relevant to this category because these",
    "start": "1451100",
    "end": "1458780"
  },
  {
    "text": "these these techniques or these system calls are commonly used for in attacks",
    "start": "1458780",
    "end": "1464360"
  },
  {
    "text": "like process injection and there are some other events that we",
    "start": "1464360",
    "end": "1471620"
  },
  {
    "text": "collect there's some miscellaneous events system call events that we collect which are primarily",
    "start": "1471620",
    "end": "1478299"
  },
  {
    "text": "commonly used in exploitation techniques like um",
    "start": "1478299",
    "end": "1484280"
  },
  {
    "text": "like halting kernel processing or interrupting kernel from from the user",
    "start": "1484280",
    "end": "1489380"
  },
  {
    "text": "space and last but not least we also collect",
    "start": "1489380",
    "end": "1495919"
  },
  {
    "text": "container creation events because these events allow us to provide container level details and pod level",
    "start": "1495919",
    "end": "1501740"
  },
  {
    "text": "details and they also allow us to track behavior of various containers and parts",
    "start": "1501740",
    "end": "1510158"
  },
  {
    "start": "1510000",
    "end": "1510000"
  },
  {
    "text": "the ebpf agent ah primarily collects events and sends",
    "start": "1513679",
    "end": "1520640"
  },
  {
    "text": "those events out to the back end it does not Implement any rules",
    "start": "1520640",
    "end": "1526400"
  },
  {
    "text": "within the agent this architecture allows us to update",
    "start": "1526400",
    "end": "1533659"
  },
  {
    "text": "and add rules quickly it also allows us to perform more complex processing on",
    "start": "1533659",
    "end": "1540200"
  },
  {
    "text": "the back end so after the agent sends the events we collect events at the back end",
    "start": "1540200",
    "end": "1546679"
  },
  {
    "text": "and then we pass all the events and we apply threat intelligence",
    "start": "1546679",
    "end": "1553400"
  },
  {
    "text": "to all those events to identify to identify connections with known bad",
    "start": "1553400",
    "end": "1559580"
  },
  {
    "text": "IP addresses and domains we then also Pass events to our estate",
    "start": "1559580",
    "end": "1565880"
  },
  {
    "text": "less rules these are the rules which are which use a single event in isolation",
    "start": "1565880",
    "end": "1572659"
  },
  {
    "text": "and then we also have more complex stateful rules which depend on more than",
    "start": "1572659",
    "end": "1578480"
  },
  {
    "text": "one events and in future we also plan to pass these",
    "start": "1578480",
    "end": "1583640"
  },
  {
    "text": "events to machine learning in order to profile behavior of various entities in",
    "start": "1583640",
    "end": "1589820"
  },
  {
    "text": "customers environment and use those learnings for anomaly",
    "start": "1589820",
    "end": "1595400"
  },
  {
    "text": "detection",
    "start": "1595400",
    "end": "1597760"
  },
  {
    "start": "1600000",
    "end": "1600000"
  },
  {
    "text": "now I'm going to go through a simple scenario in order to just illustrate what type of",
    "start": "1601880",
    "end": "1608860"
  },
  {
    "text": "detections that ebpf allows us to generate this is a",
    "start": "1608860",
    "end": "1614600"
  },
  {
    "text": "simple command injection scenario a command injection vulnerability exploitation inside a web application",
    "start": "1614600",
    "end": "1620539"
  },
  {
    "text": "which is running inside a container inside a pod so the attacker exploits or the threat",
    "start": "1620539",
    "end": "1627799"
  },
  {
    "text": "actor exploits this command injection vulnerability in order to First download a cryptominer",
    "start": "1627799",
    "end": "1635480"
  },
  {
    "text": "and then they download they execute the cryptominer and then the crypto Miner connects to a",
    "start": "1635480",
    "end": "1641720"
  },
  {
    "text": "mining pool so in the first step when the attacker",
    "start": "1641720",
    "end": "1647659"
  },
  {
    "start": "1644000",
    "end": "1644000"
  },
  {
    "text": "downloads the crypto Miner using file system operations we detect",
    "start": "1647659",
    "end": "1652700"
  },
  {
    "text": "that a new file has been downloaded at runtime which is kind of container runtime drift",
    "start": "1652700",
    "end": "1660140"
  },
  {
    "text": "right at this point we don't generate any detection we just maintain or store these States state that this is a new",
    "start": "1660140",
    "end": "1667159"
  },
  {
    "text": "file which has been downloaded to The Container at runtime in the next step when the attacker",
    "start": "1667159",
    "end": "1673820"
  },
  {
    "text": "executes this new file we detect that oh this was a new file",
    "start": "1673820",
    "end": "1680179"
  },
  {
    "text": "and it was executed inside the container so we generate new binary executed",
    "start": "1680179",
    "end": "1685700"
  },
  {
    "text": "detection so this detection is good in context of containers because containers are",
    "start": "1685700",
    "end": "1691760"
  },
  {
    "text": "supposed to be immutable at runtime so there is detections shows that you know",
    "start": "1691760",
    "end": "1697419"
  },
  {
    "text": "something was downloaded to The Container during runtime and execute it",
    "start": "1697419",
    "end": "1704200"
  },
  {
    "text": "next up using the execution process execution event",
    "start": "1706460",
    "end": "1712220"
  },
  {
    "text": "um we are also able to identify that in known binary which is a known",
    "start": "1712220",
    "end": "1718299"
  },
  {
    "text": "crypto Miner was executed using its short 256 hash as well as using the the",
    "start": "1718299",
    "end": "1725240"
  },
  {
    "text": "name of the binary and then when the crypto Miner connects to the mining pool",
    "start": "1725240",
    "end": "1732320"
  },
  {
    "text": "we have the the IP address of that mining pool as a known IP address or",
    "start": "1732320",
    "end": "1737720"
  },
  {
    "text": "known mining pool IP address when it connects to that IP address based on the threat intelligence we are able to",
    "start": "1737720",
    "end": "1743860"
  },
  {
    "text": "generate a Direction so these are the types of detections",
    "start": "1743860",
    "end": "1749179"
  },
  {
    "text": "which ebpf allows us to generate the main difference the the main point here is that that we are able to provide",
    "start": "1749179",
    "end": "1755559"
  },
  {
    "text": "detailed context information in these detections",
    "start": "1755559",
    "end": "1760580"
  },
  {
    "start": "1760000",
    "end": "1760000"
  },
  {
    "text": "so this is just an example of one of these detections so you can see that",
    "start": "1760580",
    "end": "1766880"
  },
  {
    "text": "we are able to provide pod level details and then container level details such as",
    "start": "1766880",
    "end": "1772340"
  },
  {
    "text": "container name and then we also are able to provide process level details all the details of",
    "start": "1772340",
    "end": "1779659"
  },
  {
    "text": "the process and even the lineage of the process or which which shows you the the",
    "start": "1779659",
    "end": "1786320"
  },
  {
    "text": "ancestors of the process like the direct parent grandparent of the process",
    "start": "1786320",
    "end": "1792700"
  },
  {
    "text": "and we are also able to provide the runtime context which is related to or",
    "start": "1792980",
    "end": "1799100"
  },
  {
    "text": "which is specific to the finding for example this is for the new binary executed file finding",
    "start": "1799100",
    "end": "1804980"
  },
  {
    "text": "and in this case binary path which is the path of the new binary which was executed and the process that created",
    "start": "1804980",
    "end": "1812539"
  },
  {
    "text": "the binary or modified the binary we are able to provide the details of that process",
    "start": "1812539",
    "end": "1818799"
  },
  {
    "text": "yeah so I'm going to pass to Jeremy",
    "start": "1818840",
    "end": "1824779"
  },
  {
    "text": "to wrap up the presentation great thanks Lucy",
    "start": "1824779",
    "end": "1830260"
  },
  {
    "start": "1831000",
    "end": "1831000"
  },
  {
    "text": "okay uh so to quickly summarize what we talked about here",
    "start": "1831860",
    "end": "1837820"
  },
  {
    "text": "ebpf is an attractive option for threat detection because it can capture events",
    "start": "1837820",
    "end": "1843679"
  },
  {
    "text": "from the kernel and the data can also be enriched to provide additional context",
    "start": "1843679",
    "end": "1851059"
  },
  {
    "text": "and it's really good for threat detection applications such as guard",
    "start": "1851059",
    "end": "1856460"
  },
  {
    "text": "Duty because it's lightweight it's portable and doesn't require changes to",
    "start": "1856460",
    "end": "1862220"
  },
  {
    "text": "the kernel and when it's combined with the power of the cloud it can be used to",
    "start": "1862220",
    "end": "1868820"
  },
  {
    "text": "find the proverbial needles in the haystack that allow you to focus on the",
    "start": "1868820",
    "end": "1874039"
  },
  {
    "text": "root cause of a security incident uh and with that I want to thank you for coming to the session today again my",
    "start": "1874039",
    "end": "1881179"
  },
  {
    "text": "name is Jeremy Cowan uh this is Muhammad and we'll be here if you have questions",
    "start": "1881179",
    "end": "1886760"
  },
  {
    "text": "thanks [Applause]",
    "start": "1886760",
    "end": "1895119"
  },
  {
    "text": "yes",
    "start": "1898159",
    "end": "1900460"
  },
  {
    "text": "not yet um",
    "start": "1906980",
    "end": "1913600"
  },
  {
    "text": "I I wouldn't I cannot say if there are any plans or like we are not actively",
    "start": "1914000",
    "end": "1919220"
  },
  {
    "text": "working just to be accurate on those second question is",
    "start": "1919220",
    "end": "1925419"
  },
  {
    "text": "a typical traffic site foreign",
    "start": "1926299",
    "end": "1930278"
  },
  {
    "text": "so is the question what is the size or what is the performance impact of running an ebpf program",
    "start": "1938720",
    "end": "1946179"
  },
  {
    "text": "yeah that's one of the major considerations right the volume of the events that you collect on Linux",
    "start": "1949820",
    "end": "1957380"
  },
  {
    "text": "workloads is pretty significant the size of individual events is not that much in",
    "start": "1957380",
    "end": "1965059"
  },
  {
    "text": "general um it's typically what we have noticed is that it's around 1K 1K bytes per",
    "start": "1965059",
    "end": "1972080"
  },
  {
    "text": "event but the the volume of events is pretty high so and this is the reason at the back",
    "start": "1972080",
    "end": "1978980"
  },
  {
    "text": "end we have to use certain several optimization techniques to bring down the cost",
    "start": "1978980",
    "end": "1986140"
  },
  {
    "text": "immigrated this is a feature we are thinking about",
    "start": "1993860",
    "end": "2000000"
  },
  {
    "text": "this is going to be part of guard Duty Patrol which was announced at re invent",
    "start": "2016659",
    "end": "2022480"
  },
  {
    "text": "last year it's looking at the kubernetes auto lock",
    "start": "2022480",
    "end": "2030960"
  },
  {
    "text": "yes",
    "start": "2031539",
    "end": "2034018"
  },
  {
    "text": "okay",
    "start": "2054760",
    "end": "2057760"
  },
  {
    "text": "yeah the question is Falco is deployed as Damon said",
    "start": "2069399",
    "end": "2074800"
  },
  {
    "text": "um then what's the demons had said and",
    "start": "2074800",
    "end": "2081220"
  },
  {
    "text": "what we are doing and then how we are managing the resources how we are making sure that enough resources are are",
    "start": "2081220",
    "end": "2087220"
  },
  {
    "text": "available on nodes and secondly what's the advantage over open source",
    "start": "2087220",
    "end": "2094500"
  },
  {
    "text": "so we are working to offer multiple deployment options one of the primary ones again would be using Daemon set on",
    "start": "2095560",
    "end": "2102700"
  },
  {
    "text": "eks right and we are trying to make it as hands-free as possible for customers",
    "start": "2102700",
    "end": "2108940"
  },
  {
    "text": "the customers that choose to choose to do it right and then there will be other options as well where customers will be",
    "start": "2108940",
    "end": "2116079"
  },
  {
    "text": "able to integrate the agent with their CID CD Pipeline and then deploy themselves",
    "start": "2116079",
    "end": "2122940"
  },
  {
    "text": "so we are working with to provide multiple options",
    "start": "2122940",
    "end": "2129180"
  },
  {
    "text": "in terms of advantages I believe it's it's it's",
    "start": "2130480",
    "end": "2137560"
  },
  {
    "text": "the primary benefit is is the customers just like guard Duty",
    "start": "2137560",
    "end": "2145359"
  },
  {
    "text": "um the customers the the the the customers are going to get",
    "start": "2145359",
    "end": "2150700"
  },
  {
    "text": "kind of a ready product where they don't have to really pick and choose what rules they need to enable what type of",
    "start": "2150700",
    "end": "2158020"
  },
  {
    "text": "settings that they need for Daemon set or you know what um",
    "start": "2158020",
    "end": "2163960"
  },
  {
    "text": "how they are going to set up the back end in order for backend processing of the events you know if the volume of the",
    "start": "2163960",
    "end": "2172420"
  },
  {
    "text": "events is too high then you need lots of engineering even for an individual",
    "start": "2172420",
    "end": "2177760"
  },
  {
    "text": "customer you may end up you know deploying lots of processing",
    "start": "2177760",
    "end": "2183760"
  },
  {
    "text": "capabilities in order to manage the volumes of the events so that's the",
    "start": "2183760",
    "end": "2189460"
  },
  {
    "text": "customers are going to be relieved from from that work",
    "start": "2189460",
    "end": "2195420"
  },
  {
    "text": "foreign",
    "start": "2197619",
    "end": "2200619"
  },
  {
    "text": "how it reduced the VPC function start time I don't I don't have the details on that",
    "start": "2204339",
    "end": "2211599"
  },
  {
    "text": "um I I didn't have an opportunity to talk to a member of the team before this this",
    "start": "2211599",
    "end": "2217480"
  },
  {
    "text": "presentation I did read a paper on it I have to admit I didn't understand",
    "start": "2217480",
    "end": "2223180"
  },
  {
    "text": "everything that was in that paper um but if you come see me afterwards I can give you my contact information",
    "start": "2223180",
    "end": "2230760"
  },
  {
    "text": "yeah as much as we could uh we we try to hook into LSM hook points or",
    "start": "2252280",
    "end": "2259000"
  },
  {
    "text": "or the internal kernel functions which are invoked after the kernel has read",
    "start": "2259000",
    "end": "2264700"
  },
  {
    "text": "the input arguments",
    "start": "2264700",
    "end": "2267660"
  },
  {
    "text": "more than just secure security exactly it was just an example okay okay there's several LSM hooks that",
    "start": "2282760",
    "end": "2288820"
  },
  {
    "text": "we are working in",
    "start": "2288820",
    "end": "2291420"
  },
  {
    "text": "any other questions all right well if there are other questions thanks again for coming to the",
    "start": "2299020",
    "end": "2304540"
  },
  {
    "text": "session I really appreciate it thank you oh and um don't forget to rate the session",
    "start": "2304540",
    "end": "2311700"
  }
]