[
  {
    "start": "0",
    "end": "101000"
  },
  {
    "text": "my talk today is on persistence storage with kubernetes in production which",
    "start": "30",
    "end": "5040"
  },
  {
    "text": "solution and why so my name is Cheryl I'm an ex-googler software engineer now",
    "start": "5040",
    "end": "11759"
  },
  {
    "text": "product manager at storage OS I'm also a CNC F ambassador I run the cloud native",
    "start": "11759",
    "end": "19020"
  },
  {
    "text": "London meetup group and these slides are at my blog or show comm if you want to",
    "start": "19020",
    "end": "24060"
  },
  {
    "text": "follow along on your laptop I also tweet it or show so tell me a little bit about",
    "start": "24060",
    "end": "29699"
  },
  {
    "text": "you guys so who here is new ish to kubernetes like half problem of the",
    "start": "29699",
    "end": "39420"
  },
  {
    "text": "audience how many people running kubernetes in some dev or test environment but not in production yet ok",
    "start": "39420",
    "end": "47520"
  },
  {
    "text": "so it's 2/3 probably how many people running just the stateless parts of",
    "start": "47520",
    "end": "53550"
  },
  {
    "text": "their application in production with kubernetes ok so maybe a quarter and how",
    "start": "53550",
    "end": "60180"
  },
  {
    "text": "many people are running everything including all the staple parts in production ok it's about a quarter as",
    "start": "60180",
    "end": "67740"
  },
  {
    "text": "well cool so the object of this talk is",
    "start": "67740",
    "end": "73049"
  },
  {
    "text": "to answer the following three questions so why is state so tricky in the first place",
    "start": "73049",
    "end": "78110"
  },
  {
    "text": "how do I go about comparing my storage options and then what storage options",
    "start": "78110",
    "end": "85470"
  },
  {
    "text": "should I look at with kubernetes and what are things to look out for plus one",
    "start": "85470",
    "end": "90720"
  },
  {
    "text": "anti objective so should I use a database or message queue or key value store or something else my application",
    "start": "90720",
    "end": "97229"
  },
  {
    "text": "so we're just going to talk about the storage layer here so first off why is",
    "start": "97229",
    "end": "104460"
  },
  {
    "start": "101000",
    "end": "235000"
  },
  {
    "text": "state so tricky anyway why do I even need storage because probably everyone's",
    "start": "104460",
    "end": "110610"
  },
  {
    "text": "heard that your container should be stateless your infrastructure should be stateless and immutable and you get some",
    "start": "110610",
    "end": "117000"
  },
  {
    "text": "really nice properties from them the problem is there is no such thing as a stateless architecture so assuming that",
    "start": "117000",
    "end": "124229"
  },
  {
    "text": "you want to do something useful with your application you need to store data somewhere which means you need to pick a",
    "start": "124229",
    "end": "129360"
  },
  {
    "text": "storage solution so if you either need to think of at yourself or you have outsourced that",
    "start": "129360",
    "end": "134970"
  },
  {
    "text": "problem to one of the card providers or your to your internal ops team so first",
    "start": "134970",
    "end": "142170"
  },
  {
    "text": "challenge of storage no pet storage this is the pet versus cat or analogy for",
    "start": "142170",
    "end": "147870"
  },
  {
    "text": "servers so you shouldn't treat your servers like pets that you name and you",
    "start": "147870",
    "end": "153630"
  },
  {
    "text": "lovingly look after them and when they fall ill you nurse them back to health again instead you should treat them like",
    "start": "153630",
    "end": "159600"
  },
  {
    "text": "cattle so you number them and when they fall over you take it up back you shoot it",
    "start": "159600",
    "end": "164610"
  },
  {
    "text": "and you plug in a new one so we're storage you want to avoid having special",
    "start": "164610",
    "end": "170190"
  },
  {
    "text": "servers that are your storage servers because then you've created pet servers that now you need to look after second",
    "start": "170190",
    "end": "178860"
  },
  {
    "text": "challenge is data needs to follow so your containers are small and lightweight and fast to move around the",
    "start": "178860",
    "end": "185310"
  },
  {
    "text": "cluster hopefully and your data needs to follow that around wherever it goes what you'll want to do is you want to avoid",
    "start": "185310",
    "end": "192230"
  },
  {
    "text": "saying these containers or these pods need to live on these exact nodes",
    "start": "192230",
    "end": "198870"
  },
  {
    "text": "because then you've tied that to that particular node and now you've lost the",
    "start": "198870",
    "end": "204330"
  },
  {
    "text": "portability and the mobility the third challenge is humans are fallible so if",
    "start": "204330",
    "end": "212310"
  },
  {
    "text": "you are relying on a human operator to fix something by running through a",
    "start": "212310",
    "end": "219240"
  },
  {
    "text": "manual playbook by typing in keyboard commands then they're going to make mistakes eventually 22 percent of data center",
    "start": "219240",
    "end": "226020"
  },
  {
    "text": "outages are caused by human error so as much as possible you want everything to be driven through an API not by human",
    "start": "226020",
    "end": "233370"
  },
  {
    "text": "typing on a keyboard okay now how do how",
    "start": "233370",
    "end": "238830"
  },
  {
    "start": "235000",
    "end": "461000"
  },
  {
    "text": "do I go about evaluating storage because obviously there's a lot of options out there so if you've seen the CNC F",
    "start": "238830",
    "end": "244800"
  },
  {
    "text": "landscape and if you zoom in from that giant thing just down to the cloud native storage options what 30 options",
    "start": "244800",
    "end": "252930"
  },
  {
    "text": "here already and there's all of the options from the various cloud providers",
    "start": "252930",
    "end": "258870"
  },
  {
    "text": "like as your and Google Cloud and AWS and all the others so I want to lay out",
    "start": "258870",
    "end": "265470"
  },
  {
    "text": "a framework for you to think about storage rather than giving you a one perfect storage solution for",
    "start": "265470",
    "end": "272400"
  },
  {
    "text": "everything because that evidently doesn't exist and I call this framework the eight principles of cloud native",
    "start": "272400",
    "end": "278790"
  },
  {
    "text": "storage what do I mean by cloud native so cloud native means horizontally",
    "start": "278790",
    "end": "287250"
  },
  {
    "text": "scalable so you add resources by adding more nodes to a cluster rather than",
    "start": "287250",
    "end": "292260"
  },
  {
    "text": "adding more resources to a single cluster to a single node there should be",
    "start": "292260",
    "end": "297419"
  },
  {
    "text": "no single point of failure and if there is a failure then the system needs to be",
    "start": "297419",
    "end": "302580"
  },
  {
    "text": "resilient and it needs to self-heal which means that everything needs to be",
    "start": "302580",
    "end": "307919"
  },
  {
    "text": "driven through api's so there should be minimal operator overhead and then it",
    "start": "307919",
    "end": "313050"
  },
  {
    "text": "needs to be decoupled from the underlying platform so that you can run things in different environments in exactly the same way and this is the one",
    "start": "313050",
    "end": "320400"
  },
  {
    "text": "which is difficult for storage because storage is inherently tied to that physical piece of hardware so let's go",
    "start": "320400",
    "end": "327660"
  },
  {
    "text": "through the eight principles of cloud native storage first one is that classically storage has been presented",
    "start": "327660",
    "end": "335220"
  },
  {
    "text": "to a operating system so to a single node which means that you're tied to a",
    "start": "335220",
    "end": "341850"
  },
  {
    "text": "specific instance of that so now we want to tie storage to the needs of the pod",
    "start": "341850",
    "end": "347400"
  },
  {
    "text": "not to the instance to the node that it's running on that means that now you",
    "start": "347400",
    "end": "354450"
  },
  {
    "text": "can move that storage and use that storage layer on any sort of platform",
    "start": "354450",
    "end": "359550"
  },
  {
    "text": "whether it's on Prem or cloud or hybrid or or multi cloud or anything third",
    "start": "359550",
    "end": "369270"
  },
  {
    "text": "principle is if you're going to be able to move this from environment to environment those resources need to be",
    "start": "369270",
    "end": "375120"
  },
  {
    "text": "declared and composed as part of your orchestration or in sociation and in",
    "start": "375120",
    "end": "383039"
  },
  {
    "text": "order to do that everything needs to be a API driven so you need to be able to provision your store and API manage it",
    "start": "383039",
    "end": "389130"
  },
  {
    "text": "through an API move it through an API and your developers need to be able to consume that storage via an API as well",
    "start": "389130",
    "end": "397909"
  },
  {
    "text": "if your developers are consumed storage through an API you need to think about security so security needs to be",
    "start": "397909",
    "end": "406410"
  },
  {
    "text": "part of the storage and how you access it through our back or anything else it's not a separate product that you",
    "start": "406410",
    "end": "412320"
  },
  {
    "text": "bolt on top of it sixth principle is the",
    "start": "412320",
    "end": "419880"
  },
  {
    "text": "whole goal behind for this cloud native thing is for agility we want to move our pods around we want to have kubernetes",
    "start": "419880",
    "end": "426060"
  },
  {
    "text": "orchestrate those and move those around and the data should move just as easily and if we're talking about distributed",
    "start": "426060",
    "end": "434850"
  },
  {
    "text": "environment then this has performance implications so for certain use cases",
    "start": "434850",
    "end": "440640"
  },
  {
    "text": "you need to think about how you're going to manage that and similarly you need to think about availability reliability",
    "start": "440640",
    "end": "446750"
  },
  {
    "text": "consistency and so on so those are the eight principles of cloud native storage",
    "start": "446750",
    "end": "452580"
  },
  {
    "text": "and hopefully you can start thinking about what storage features and",
    "start": "452580",
    "end": "458250"
  },
  {
    "text": "characteristics are offered by different platforms so let's get specific with",
    "start": "458250",
    "end": "463980"
  },
  {
    "start": "461000",
    "end": "613000"
  },
  {
    "text": "kubernetes and let's go over the kubernetes storage model so with",
    "start": "463980",
    "end": "471150"
  },
  {
    "text": "kubernetes an administrator has to create persistent volumes in a pool so a",
    "start": "471150",
    "end": "477390"
  },
  {
    "text": "persistent volume is a base abstraction for a piece of storage so it has a size",
    "start": "477390",
    "end": "483479"
  },
  {
    "text": "and it's backed by something like NFS or I scuzzy or Google cloud or whatever a",
    "start": "483479",
    "end": "491060"
  },
  {
    "text": "developer now who needs some storage will submit a persistent volume claim",
    "start": "491390",
    "end": "496919"
  },
  {
    "text": "which is a request for a certain amount of storage and then they will reference",
    "start": "496919",
    "end": "502470"
  },
  {
    "text": "that claim in their pod and now kubernetes can match up the exact volume with whatever the pod needs so this is",
    "start": "502470",
    "end": "511470"
  },
  {
    "text": "so far so good the problem with this is that this requires the admin to",
    "start": "511470",
    "end": "517200"
  },
  {
    "text": "provision these volumes in advance which is not how we think of other resources like CPU or memory so what if you need",
    "start": "517200",
    "end": "525990"
  },
  {
    "text": "wants to just create those volumes on demand so the alternative is called",
    "start": "525990",
    "end": "531990"
  },
  {
    "text": "dynamic provisioning and that's done with storage classes so instead of creating the admin creating those",
    "start": "531990",
    "end": "539220"
  },
  {
    "text": "volumes directly the administrator will create a couple of different profiles of",
    "start": "539220",
    "end": "546030"
  },
  {
    "text": "storage that they want to provide so let's say fast storage is always provisioned on SSD slow storage is",
    "start": "546030",
    "end": "553589"
  },
  {
    "text": "provisioned on hard drives now a developer does exactly the same thing",
    "start": "553589",
    "end": "559050"
  },
  {
    "text": "they claim or they submit a persistent volume claim but that volume is only",
    "start": "559050",
    "end": "564720"
  },
  {
    "text": "created at the moment that that claim is submitted and then attached to the pod so for",
    "start": "564720",
    "end": "571709"
  },
  {
    "text": "kubernetes this is the base model of how you do storage so let's work through an",
    "start": "571709",
    "end": "577530"
  },
  {
    "text": "example so meet Jane she's a DevOps engineer at a media company and she's",
    "start": "577530",
    "end": "584160"
  },
  {
    "text": "migrating some client wordpress websites she wants to follow this principles and she needs that to be highly available so",
    "start": "584160",
    "end": "593550"
  },
  {
    "text": "she goes to the kubernetes documentation for storage classes and goes Wow ok",
    "start": "593550",
    "end": "599250"
  },
  {
    "text": "that's already quite a few options then we've got to worry about flex volumes and CSI that contains a storage",
    "start": "599250",
    "end": "607140"
  },
  {
    "text": "interface that's coming later how do I go about picking what I need so there's",
    "start": "607140",
    "end": "614700"
  },
  {
    "start": "613000",
    "end": "821000"
  },
  {
    "text": "key information that she needs to think about for her problem number one what is",
    "start": "614700",
    "end": "620220"
  },
  {
    "text": "my use case number two what does that mean for my performance requirements",
    "start": "620220",
    "end": "625640"
  },
  {
    "text": "number three how my developer is going to access it and the number four where is that going to be deployed and managed",
    "start": "625640",
    "end": "633380"
  },
  {
    "text": "so what am I use case there's obviously a ton of use cases out there but the",
    "start": "633380",
    "end": "640740"
  },
  {
    "text": "common ones include storage for your application binaries storage for your",
    "start": "640740",
    "end": "645900"
  },
  {
    "text": "data configuration files and then backups what does that mean in terms of",
    "start": "645900",
    "end": "654390"
  },
  {
    "text": "performance so binary so ephemeral so you don't need a system storage really",
    "start": "654390",
    "end": "659850"
  },
  {
    "text": "for that application data is databases",
    "start": "659850",
    "end": "664860"
  },
  {
    "text": "message queues and so on and that's where you need to worry about high availability and latency and the",
    "start": "664860",
    "end": "671459"
  },
  {
    "text": "performance characteristics configuration data is generally small",
    "start": "671459",
    "end": "677760"
  },
  {
    "text": "but it doesn't need to be shared across multiple instances of a pod and then",
    "start": "677760",
    "end": "683490"
  },
  {
    "text": "finally backups you don't need you need it to be highly available but you don't",
    "start": "683490",
    "end": "688740"
  },
  {
    "text": "expect a high volume of transactions so you're now balancing cost versus performance and you might need to think",
    "start": "688740",
    "end": "695310"
  },
  {
    "text": "about backing up to a cloud as well am I",
    "start": "695310",
    "end": "700620"
  },
  {
    "text": "developed how will my developers accessing storage so this is a bit of revision of storage 101 lock file an",
    "start": "700620",
    "end": "707250"
  },
  {
    "text": "object store so block storage means I need to access a fixed amount of memory",
    "start": "707250",
    "end": "713519"
  },
  {
    "text": "at a certain location which is best for databases but don't use those directly",
    "start": "713519",
    "end": "720950"
  },
  {
    "text": "files are an abstraction of a an amount of data of arbitrary length it's",
    "start": "720950",
    "end": "727200"
  },
  {
    "text": "organized in a hierarchy it's probably POSIX compliant so it has readwrite and",
    "start": "727200",
    "end": "732630"
  },
  {
    "text": "executable permissions on it and so on and then object storage is I want to",
    "start": "732630",
    "end": "738899"
  },
  {
    "text": "access these things by some kind of ID",
    "start": "738899",
    "end": "743870"
  },
  {
    "text": "and finally where is the storage deployed and managed so this is on Pam",
    "start": "745610",
    "end": "752100"
  },
  {
    "text": "and cloud or managed as well but if you're thinking about kubernetes there's multiple ways that your storage system",
    "start": "752100",
    "end": "758610"
  },
  {
    "text": "can talk to your applications so one is directly another is to go through one of",
    "start": "758610",
    "end": "766860"
  },
  {
    "text": "the control pane interfaces like CSI or the doc of volume driver interface flex",
    "start": "766860",
    "end": "773370"
  },
  {
    "text": "volumes or native volumes or so on there's quite a few different frameworks and tools out there an example would be",
    "start": "773370",
    "end": "780240"
  },
  {
    "text": "rex way which allows multiple orchestrators to work with it and so you",
    "start": "780240",
    "end": "787560"
  },
  {
    "text": "need to think about how your storage system is going to interact with each of those",
    "start": "787560",
    "end": "793640"
  },
  {
    "text": "so let's get back to Jane and her example so Jane needs to store some",
    "start": "795730",
    "end": "801610"
  },
  {
    "text": "database locations and credentials and stuff she also needs a Postgres database",
    "start": "801610",
    "end": "807899"
  },
  {
    "text": "the WordPress site allows her users to upload media files and then she needs to",
    "start": "807899",
    "end": "815079"
  },
  {
    "text": "take regular backups for the database and for the website and to be able to restore those so let's take a look at",
    "start": "815079",
    "end": "824019"
  },
  {
    "start": "821000",
    "end": "845000"
  },
  {
    "text": "database at location credentials first what kind of data is this this is configured configuration data so",
    "start": "824019",
    "end": "831579"
  },
  {
    "text": "it's small it's shared across multiple instances and kubernetes provide some primitives for this already secrets and",
    "start": "831579",
    "end": "839440"
  },
  {
    "text": "config map so this is already tightly integrated with kubernetes the second",
    "start": "839440",
    "end": "847389"
  },
  {
    "start": "845000",
    "end": "1014000"
  },
  {
    "text": "one is user uploaded media so these are large blobs of data but they're not",
    "start": "847389",
    "end": "854370"
  },
  {
    "text": "frequently written to and these also need to be shared across multiple",
    "start": "854370",
    "end": "859899"
  },
  {
    "text": "instances of pods so this is actually a very good use case for a shared file system",
    "start": "859899",
    "end": "865470"
  },
  {
    "text": "there's cloud options such as managed NFS and I would be slightly wary about",
    "start": "865470",
    "end": "874480"
  },
  {
    "text": "AWS ZFS here I don't know if anyone has any experience with EFS does anyone use",
    "start": "874480",
    "end": "880420"
  },
  {
    "text": "EFS here a few like 10 15 people so there can be some performance issues",
    "start": "880420",
    "end": "886990"
  },
  {
    "text": "with it I see some nodding there that's like traumatized space yeah this is also",
    "start": "886990",
    "end": "894430"
  },
  {
    "text": "a good for object store if your application can be written to use object stores and what about on-prem so in a",
    "start": "894430",
    "end": "902649"
  },
  {
    "text": "non-home world there are some distributed file system options CFS is good one cluster FS is another good one",
    "start": "902649",
    "end": "909339"
  },
  {
    "text": "they're both open source products from Red Hat I put please not NFS so who here",
    "start": "909339",
    "end": "916660"
  },
  {
    "text": "is using NFS shame on you so the reason I don't like NFS is so NFS is your your",
    "start": "916660",
    "end": "925420"
  },
  {
    "text": "classic file server that you exports over the network to number of clients but of course your",
    "start": "925420",
    "end": "931559"
  },
  {
    "text": "file server then becomes that special pet server that you need to look after and you need to make sure that that is",
    "start": "931559",
    "end": "938939"
  },
  {
    "text": "always special on that server so if we're in a communities pod cloud native",
    "start": "938939",
    "end": "945329"
  },
  {
    "text": "world then NFS is actually not a very good option for that",
    "start": "945329",
    "end": "950959"
  },
  {
    "text": "okay database and website backup so this is backup in an archive in the database",
    "start": "952429",
    "end": "959970"
  },
  {
    "text": "on the website again you care more about durability and cost than you do about",
    "start": "959970",
    "end": "966799"
  },
  {
    "text": "high-throughput or high number of transactions this is a good option for",
    "start": "966799",
    "end": "971850"
  },
  {
    "text": "object store so managed objects store I'm guessing who uses s3 probably half",
    "start": "971850",
    "end": "980220"
  },
  {
    "text": "the room in here so yeah this is actually quite a good option for s3",
    "start": "980220",
    "end": "985649"
  },
  {
    "text": "there are specific options for this use case like Glacia AWS is Glacia for long",
    "start": "985649",
    "end": "993179"
  },
  {
    "text": "term cold storage as long as you don't need to access it very frequently because it gets expensive if you're",
    "start": "993179",
    "end": "998579"
  },
  {
    "text": "actually accessing it frequently unfair options there's also actually object",
    "start": "998579",
    "end": "1004129"
  },
  {
    "text": "stores which are s to be compatible but you can run them on them so Mineo is quite a good one or you could just use",
    "start": "1004129",
    "end": "1011239"
  },
  {
    "text": "it as well finally come to the Postgres",
    "start": "1011239",
    "end": "1017600"
  },
  {
    "start": "1014000",
    "end": "1469000"
  },
  {
    "text": "database this is probably the one that is the most difficult because you care about availability and latency and",
    "start": "1017600",
    "end": "1025308"
  },
  {
    "text": "having a deterministic of performance the developers are accessing it via",
    "start": "1025309",
    "end": "1030798"
  },
  {
    "text": "database connector but remember what we've mentioned earlier about databases running best on block storage so if you",
    "start": "1030799",
    "end": "1038000"
  },
  {
    "text": "were looking for a Postgres option then you'd want to look for something that runs on block storage what options do",
    "start": "1038000",
    "end": "1045709"
  },
  {
    "text": "this Jane have here so one is cloud volumes like AWS is EBS who's using EBS",
    "start": "1045709",
    "end": "1054679"
  },
  {
    "text": "here yeah okay about a third of people as well so one thing you have to watch",
    "start": "1054679",
    "end": "1060830"
  },
  {
    "text": "out for here is attach and detach times and this is the case whenever you have a physical block",
    "start": "1060830",
    "end": "1066210"
  },
  {
    "text": "device that needs to be attached and will be attached to a node so on EBS",
    "start": "1066210",
    "end": "1071850"
  },
  {
    "text": "that detaching and attaching can take between 45 seconds and an hour which if",
    "start": "1071850",
    "end": "1078720"
  },
  {
    "text": "you're expecting your pods to be able to move around on two different nodes easily it's a total killer and if you",
    "start": "1078720",
    "end": "1086370"
  },
  {
    "text": "have regulatory needs so you're storing biometric data for instance then you",
    "start": "1086370",
    "end": "1091590"
  },
  {
    "text": "also have to worry about compliance issues you have to have whatever compliance tools the providers provide",
    "start": "1091590",
    "end": "1097470"
  },
  {
    "text": "for you all those manage databases so who's using RDS or something along those",
    "start": "1097470",
    "end": "1104160"
  },
  {
    "text": "lines okay but a quarter so I put",
    "start": "1104160",
    "end": "1109950"
  },
  {
    "text": "limited offerings here because actually managed databases are really convenient they have all these high availability features it sort of built in for you as",
    "start": "1109950",
    "end": "1120090"
  },
  {
    "text": "long as you don't need any kind of custom configuration or you don't need a specific version of a database that's",
    "start": "1120090",
    "end": "1126300"
  },
  {
    "text": "not offered or you have a specific database that's not offered I mean Postgres is quite widely used but",
    "start": "1126300",
    "end": "1132810"
  },
  {
    "text": "my DB if your favorite Kyle provider doesn't offer it then you may not have this option okay so what about on promo",
    "start": "1132810",
    "end": "1141660"
  },
  {
    "text": "options so the best option for on poem is software-defined storage and",
    "start": "1141660",
    "end": "1146960"
  },
  {
    "text": "software-defined storage means it's a pure software layer that abstracts away",
    "start": "1146960",
    "end": "1152040"
  },
  {
    "text": "the underlying storage so I have a demo",
    "start": "1152040",
    "end": "1159200"
  },
  {
    "text": "and of course I'm usually storage OS for this demo so software so",
    "start": "1168360",
    "end": "1179050"
  },
  {
    "text": "software-defined storage in this particular example I'm just running a one node cluster but storage itself",
    "start": "1179050",
    "end": "1187470"
  },
  {
    "text": "storage OS itself runs as a single",
    "start": "1187470",
    "end": "1196180"
  },
  {
    "text": "container on each node so much like a demon said in this particular example",
    "start": "1196180",
    "end": "1205170"
  },
  {
    "text": "believe I just have yes I have a master and a one worker node so if I I create",
    "start": "1205170",
    "end": "1217000"
  },
  {
    "text": "that demon said then I'm expecting to see just one pod so that's going to",
    "start": "1217000",
    "end": "1224860"
  },
  {
    "text": "create itself in a little bit and by the way if you haven't used quatre Koda",
    "start": "1224860",
    "end": "1229900"
  },
  {
    "text": "before it's quite neat it's this sort of in Bowser tutorials and the kubernetes stocks youtube so it's quite fun and it",
    "start": "1229900",
    "end": "1238420"
  },
  {
    "text": "means that you can go and try this yourself as well later if you want to run through it again ok so let's take a",
    "start": "1238420",
    "end": "1248470"
  },
  {
    "text": "look at what that's doing so once you've been stored that one container and it's",
    "start": "1248470",
    "end": "1253840"
  },
  {
    "text": "figured out what storage is available on each node then it will create a virtual",
    "start": "1253840",
    "end": "1259090"
  },
  {
    "text": "storage pool that goes across the entire cluster so it will discover any block",
    "start": "1259090",
    "end": "1264280"
  },
  {
    "text": "storage and present that through the storage pore and create you can create virtual volumes from that storage pore",
    "start": "1264280",
    "end": "1271360"
  },
  {
    "text": "and mount them to containers the nice thing about that is now the containers or the pods can move around the cluster",
    "start": "1271360",
    "end": "1278950"
  },
  {
    "text": "onto different nodes and it they don't need to be aware of whether they're accessing local storage or storage on",
    "start": "1278950",
    "end": "1285670"
  },
  {
    "text": "another node in the cluster because it's all managed through the storage pool that spans the entire cluster so let's",
    "start": "1285670",
    "end": "1295780"
  },
  {
    "text": "go through the creating a storage class and",
    "start": "1295780",
    "end": "1301010"
  },
  {
    "text": "persistent volumes as if I was using this as a provider so I'm just going to encode the secret for this is the IP",
    "start": "1301010",
    "end": "1307940"
  },
  {
    "text": "address of the worker so let's have a look at what a storage to class looks",
    "start": "1307940",
    "end": "1314900"
  },
  {
    "text": "like so I've declared I should find a",
    "start": "1314900",
    "end": "1321290"
  },
  {
    "text": "story which class and behind it is the storage OS provisioner so I will create",
    "start": "1321290",
    "end": "1328340"
  },
  {
    "text": "that ok that storage class is called",
    "start": "1328340",
    "end": "1337610"
  },
  {
    "text": "first so that's my admin hat so I take off my admin hat and I put on my",
    "start": "1337610",
    "end": "1343340"
  },
  {
    "text": "developer hat now and I'm gonna ask for a specific volume so okay then let's",
    "start": "1343340",
    "end": "1354890"
  },
  {
    "text": "look at what that how that was defined as well so this is a persistent volume",
    "start": "1354890",
    "end": "1361040"
  },
  {
    "text": "claim the name was fast 0:01 and it's using the fast provisioner",
    "start": "1361040",
    "end": "1369620"
  },
  {
    "text": "fast storage class even and it's a five gigabyte volume okay",
    "start": "1369620",
    "end": "1377770"
  },
  {
    "text": "so let's look at what that persistent",
    "start": "1381990",
    "end": "1389080"
  },
  {
    "text": "funding can look like looks like so that's currently pending this is the",
    "start": "1389080",
    "end": "1398470"
  },
  {
    "text": "point where my demo is going to break down because demos always do this okay",
    "start": "1398470",
    "end": "1405419"
  },
  {
    "text": "okay I'm gonna come back to this in a little bit but it's basically this model",
    "start": "1410690",
    "end": "1417409"
  },
  {
    "text": "that we talked about before so create a storage class create a persistent volume create a pods that references that",
    "start": "1417409",
    "end": "1423409"
  },
  {
    "text": "persistent volume claim and it will return you a persistent volume so we're gonna be straightforward so let's just",
    "start": "1423409",
    "end": "1435619"
  },
  {
    "text": "go over quickly what we talked about and and then we've got a little bit more time so either I can do a different demo",
    "start": "1435619",
    "end": "1441470"
  },
  {
    "text": "or we can have some questions but let's move eyes what we talked about so far so",
    "start": "1441470",
    "end": "1448029"
  },
  {
    "text": "think about your storage needs and use those eight principles of cloud native",
    "start": "1448690",
    "end": "1454009"
  },
  {
    "text": "storage to understand whether storage is a good fit in this model ask yourself",
    "start": "1454009",
    "end": "1460129"
  },
  {
    "text": "what is your use case what does that mean for my performance requirements how my developers gonna access it and then",
    "start": "1460129",
    "end": "1465830"
  },
  {
    "text": "how where is that going to be deployed and managed so what's coming next",
    "start": "1465830",
    "end": "1471710"
  },
  {
    "start": "1469000",
    "end": "1491000"
  },
  {
    "text": "so CSI I mentioned before is container storage interface it was launched as an",
    "start": "1471710",
    "end": "1476960"
  },
  {
    "text": "alpha when kubernetes 1.9 and the goal is to have an interface that vendors can",
    "start": "1476960",
    "end": "1482749"
  },
  {
    "text": "write compatible plug-ins against and now users will be able to move between different vendors more easily so that's",
    "start": "1482749",
    "end": "1489950"
  },
  {
    "text": "going to be coming soon a bunch of resources you can try this demo out",
    "start": "1489950",
    "end": "1496609"
  },
  {
    "start": "1491000",
    "end": "1515000"
  },
  {
    "text": "yourself we have a QuickStart kubernetes guide and also we're hiring so if you",
    "start": "1496609",
    "end": "1501950"
  },
  {
    "text": "are looking for a role in C C++",
    "start": "1501950",
    "end": "1507049"
  },
  {
    "text": "go DevOps engineers pre-cell solutions architects so on then please let me know",
    "start": "1507049",
    "end": "1514609"
  },
  {
    "text": "so that's the end of my slides so I'm",
    "start": "1514609",
    "end": "1520460"
  },
  {
    "start": "1515000",
    "end": "1542000"
  },
  {
    "text": "gonna see if there are any questions now and then maybe do a demo got any more time so go ahead oh do you do you want",
    "start": "1520460",
    "end": "1527629"
  },
  {
    "text": "to go to the microphone I'll repeat yeah",
    "start": "1527629",
    "end": "1532779"
  },
  {
    "text": "so we're quite different from vexman isn't that let me come out to this",
    "start": "1536759",
    "end": "1544419"
  },
  {
    "start": "1542000",
    "end": "1627000"
  },
  {
    "text": "diagram so Rex Way fits in this frameworks and tools section it's a connector between say the kubernetes api",
    "start": "1544419",
    "end": "1551649"
  },
  {
    "text": "is and other ones storage OS is more on the storage systems side of this diagram",
    "start": "1551649",
    "end": "1559529"
  },
  {
    "text": "as to how we compare with port works I consider it not good form to",
    "start": "1559529",
    "end": "1565440"
  },
  {
    "text": "necessarily talk about competitors in that way so I might just avoid asking that question that's okay hey if you",
    "start": "1565440",
    "end": "1574179"
  },
  {
    "text": "have a besides the attach and detach times to EBS could you maybe expand on",
    "start": "1574179",
    "end": "1581259"
  },
  {
    "text": "why you'd avoid that for certain use cases and yeah because it's a virtual volume so there's no actual attaching",
    "start": "1581259",
    "end": "1587349"
  },
  {
    "text": "and detaching it's all done in software so it's instantaneous okay thank you",
    "start": "1587349",
    "end": "1594479"
  },
  {
    "text": "other questions yes sir Duke which one",
    "start": "1597479",
    "end": "1602709"
  },
  {
    "text": "quick one with the demo that maybe didn't go so great you were attaching to",
    "start": "1602709",
    "end": "1608919"
  },
  {
    "text": "the physical storage of that node is that correct yes okay and if I were to",
    "start": "1608919",
    "end": "1614349"
  },
  {
    "text": "add more nodes and that's deployed as a daemon set that automatically appears is",
    "start": "1614349",
    "end": "1619659"
  },
  {
    "text": "available yeah so because let me come back to this diagram so because storage",
    "start": "1619659",
    "end": "1626109"
  },
  {
    "text": "OS is just this abstraction layer it can scale horizontally so you just add more",
    "start": "1626109",
    "end": "1631389"
  },
  {
    "start": "1627000",
    "end": "1696000"
  },
  {
    "text": "storage by adding more nodes and they all contribute into that storage pool so",
    "start": "1631389",
    "end": "1637899"
  },
  {
    "text": "let's say that node has expandable storage on it if I expand the storage on that node it would become visible to the",
    "start": "1637899",
    "end": "1644409"
  },
  {
    "text": "clusters yeah cool thank you yeah Hey",
    "start": "1644409",
    "end": "1649829"
  },
  {
    "text": "hmm",
    "start": "1658240",
    "end": "1661170"
  },
  {
    "text": "so the question was can storage OS pick which kind of devices that are attached",
    "start": "1669240",
    "end": "1675929"
  },
  {
    "text": "to it to use so right yeah so we have",
    "start": "1675929",
    "end": "1683789"
  },
  {
    "text": "we're going to have some more tools and functionality around that yeah since",
    "start": "1683789",
    "end": "1689429"
  },
  {
    "text": "we've got a minute and actually I think this is quite interesting so I'm gonna add one more h2 slide which is past this",
    "start": "1689429",
    "end": "1697799"
  },
  {
    "start": "1696000",
    "end": "1784000"
  },
  {
    "text": "about how storage OS works so the model that we have is not it's a sort of",
    "start": "1697799",
    "end": "1705150"
  },
  {
    "text": "hybrid master replicas model so the entire volume is replicated on two different nodes as opposed to like a",
    "start": "1705150",
    "end": "1713070"
  },
  {
    "text": "distributed file system which shards the data across nodes instead the whole volume is replicated and that means that",
    "start": "1713070",
    "end": "1720620"
  },
  {
    "text": "for example this one this is a five node cluster with one master volume on node",
    "start": "1720620",
    "end": "1729090"
  },
  {
    "text": "one and then two replicas that are spread onto different nodes that means that if node one goes down then we can",
    "start": "1729090",
    "end": "1736380"
  },
  {
    "text": "just instantly switch from one of the replicas to become the master so there's",
    "start": "1736380",
    "end": "1742470"
  },
  {
    "text": "no fail over time compared to a distributed solution where because",
    "start": "1742470",
    "end": "1748289"
  },
  {
    "text": "you've shattered that data across different nodes you now need to read and byte to reconstruct it and then the",
    "start": "1748289",
    "end": "1754679"
  },
  {
    "text": "other nice thing is that in a distributed system you get that fan out of light so one light that comes in",
    "start": "1754679",
    "end": "1760919"
  },
  {
    "text": "generates a lot of lights on the packet and this is synchronous replication so",
    "start": "1760919",
    "end": "1766500"
  },
  {
    "text": "one write that comes in will just write two in parallel to any replicas when",
    "start": "1766500",
    "end": "1772080"
  },
  {
    "text": "they act back then that's marked as us as a success so there's no reconstruction or fell over like",
    "start": "1772080",
    "end": "1778429"
  },
  {
    "text": "instruction I think this guy was",
    "start": "1778429",
    "end": "1783570"
  },
  {
    "text": "standing here first so more of a call and then question you had a comment",
    "start": "1783570",
    "end": "1788610"
  },
  {
    "start": "1784000",
    "end": "1836000"
  },
  {
    "text": "about not using NFS for on pram and duty you said that your reasoning was because",
    "start": "1788610",
    "end": "1795149"
  },
  {
    "text": "it's more of a pest on cattle and my China argument is that first of all",
    "start": "1795149",
    "end": "1802650"
  },
  {
    "text": "NFS is just a protocol and the NFS server itself can be distributed",
    "start": "1802650",
    "end": "1807870"
  },
  {
    "text": "software define and you mentioned that self you know it's better because of",
    "start": "1807870",
    "end": "1813720"
  },
  {
    "text": "this whole pet notion and I'm gonna go sing a counter-argument that even in s",
    "start": "1813720",
    "end": "1820770"
  },
  {
    "text": "FPV you're specifying the end point which is not going to be any different than NFS end point so and also you can",
    "start": "1820770",
    "end": "1827520"
  },
  {
    "text": "use put your NFS end point beyond DNS so it's not tied to a specific server I I'm",
    "start": "1827520",
    "end": "1841770"
  },
  {
    "start": "1836000",
    "end": "1891000"
  },
  {
    "text": "not sure I believe the last one but let me put your NFS therapy i DNS I mean you",
    "start": "1841770",
    "end": "1847860"
  },
  {
    "text": "can put it behind DNS but I have something back in my head about why",
    "start": "1847860",
    "end": "1853350"
  },
  {
    "text": "anyway the whole point about this is not that there's one right solution or one",
    "start": "1853350",
    "end": "1858390"
  },
  {
    "text": "wrong solution so there are better things for different use cases NFS I'm saying is a is one where you can",
    "start": "1858390",
    "end": "1867390"
  },
  {
    "text": "you can distribute NFS to instance if you add on other products on top of it",
    "start": "1867390",
    "end": "1872880"
  },
  {
    "text": "so base NFS is just going to be one file server and that's a pet server not",
    "start": "1872880",
    "end": "1879030"
  },
  {
    "text": "necessarily there are implementations are NFS server that are distributed and scalable I don't to mention their names",
    "start": "1879030",
    "end": "1884040"
  },
  {
    "text": "but you know Isilon that happen you know various yes they just have offerings",
    "start": "1884040",
    "end": "1890460"
  },
  {
    "text": "that they well they're offering so you can I on top yeah I believe that Hey",
    "start": "1890460",
    "end": "1897140"
  },
  {
    "text": "yeah so the question was if in this",
    "start": "1921659",
    "end": "1926679"
  },
  {
    "text": "diagram if you took out one three and five simultaneously then that would be disastrous so there's soy dress provide",
    "start": "1926679",
    "end": "1933370"
  },
  {
    "text": "administrator tools to manage that yes is the answer so yeah yeah it does yeah",
    "start": "1933370",
    "end": "1945179"
  },
  {
    "text": "yes oh yeah sorry I should have",
    "start": "1945179",
    "end": "1954880"
  },
  {
    "text": "mentioned that so if the masternode goes down so the question was does it do the regeneration of data if if one of them",
    "start": "1954880",
    "end": "1962380"
  },
  {
    "text": "goes down yeah again so the master or one of the reps because it's lost then it will just rethink a new replica in",
    "start": "1962380",
    "end": "1967929"
  },
  {
    "text": "the background on a different node and you can choose between zero and five nodes which gives you up to four nodes",
    "start": "1967929",
    "end": "1975880"
  },
  {
    "text": "that could go down and then still remain serviceable yeah well it's the entire",
    "start": "1975880",
    "end": "1984159"
  },
  {
    "start": "1983000",
    "end": "2008000"
  },
  {
    "text": "volume that's replicated so every write that comes in gets replicated to each replica no yeah so real quick you talked",
    "start": "1984159",
    "end": "1994870"
  },
  {
    "text": "about how it understands there's a storage on each node does that include like EBS volumes if you're in the cloud yeah so then you've got a reliable",
    "start": "1994870",
    "end": "2002070"
  },
  {
    "text": "storage media that you're replicating between nodes you have an IV bs is reliable right",
    "start": "2002070",
    "end": "2007470"
  },
  {
    "text": "it's just persistent store it's not ephemeral like that the nodes so you replicate multiple EBS volumes to each",
    "start": "2007470",
    "end": "2013770"
  },
  {
    "start": "2008000",
    "end": "2041000"
  },
  {
    "text": "node like that so you'd run on top of the EBS volume yeah so the what's replicated is the virtual",
    "start": "2013770",
    "end": "2022860"
  },
  {
    "text": "volume rather than the EBS right but for whatever data you can assume it's stored on EBS three times on three different",
    "start": "2022860",
    "end": "2030149"
  },
  {
    "text": "EBS volumes yeah okay so so the downside as I mentioned we see it",
    "start": "2030149",
    "end": "2035700"
  },
  {
    "text": "with EBS is that is those attach and",
    "start": "2035700",
    "end": "2041129"
  },
  {
    "start": "2041000",
    "end": "2135000"
  },
  {
    "text": "detach times which is not a good fit for spinning up and down pods quickly yeah",
    "start": "2041129",
    "end": "2052440"
  },
  {
    "text": "so still address ones on top of EBS or ones on top of yeah sadly and it means",
    "start": "2052440",
    "end": "2062309"
  },
  {
    "text": "that you can move around from different cloud providers pretty easily go from on pen to cloud or whatever any other",
    "start": "2062309",
    "end": "2072059"
  },
  {
    "text": "questions",
    "start": "2072059",
    "end": "2074450"
  },
  {
    "text": "so the question was are there open source alternatives to storage OS not",
    "start": "2088100",
    "end": "2093648"
  },
  {
    "text": "with this not with the model that I described that I know of with them the master replicas so open source options",
    "start": "2093649",
    "end": "2101030"
  },
  {
    "text": "right now that are distributed who would probably be safe for Gluster",
    "start": "2101030",
    "end": "2107540"
  },
  {
    "text": "but those are distributed by shouting across nodes so then you have the fan",
    "start": "2107540",
    "end": "2112700"
  },
  {
    "text": "outs so that I don't think there's anything that I know of this do any similar cool",
    "start": "2112700",
    "end": "2124119"
  },
  {
    "text": "my time has just run out so thank you very much for coming to my talk",
    "start": "2124119",
    "end": "2129140"
  },
  {
    "text": "everybody and safe trip back if you're heading back [Applause]",
    "start": "2129140",
    "end": "2137459"
  }
]