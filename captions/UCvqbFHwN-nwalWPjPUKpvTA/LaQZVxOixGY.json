[
  {
    "text": "so we are excited to be here with you to talk about go web assembly and how we",
    "start": "199",
    "end": "5400"
  },
  {
    "text": "can profile uh VM application using uh WG Prof so uh this is the agenda for today",
    "start": "5400",
    "end": "13799"
  },
  {
    "text": "so we'll cover these topics uh in this talk so we use go every day but not",
    "start": "13799",
    "end": "19359"
  },
  {
    "text": "everyone does like not everyone uh is into goang and all so we'll start a quick slide with what is goang and uh go",
    "start": "19359",
    "end": "26160"
  },
  {
    "text": "tool CH all all all the stuff about goang will discuss about that then we'll move it to move into like profiling what",
    "start": "26160",
    "end": "32840"
  },
  {
    "text": "is profiling uh why it is needed and then uh bit intro about web assembly uh",
    "start": "32840",
    "end": "38320"
  },
  {
    "text": "how vasm Works what is vasm why why why it is uh used um in companies and",
    "start": "38320",
    "end": "44360"
  },
  {
    "text": "anything so uh then then we'll jump into like um prpr like it's a part of goang",
    "start": "44360",
    "end": "51399"
  },
  {
    "text": "toolchain like how we can use prpr and this um Library um project called WG",
    "start": "51399",
    "end": "57160"
  },
  {
    "text": "Prof to profile VM application so we'll be profiling CPU profiling memory profiling WG Prof so that's the main",
    "start": "57160",
    "end": "64040"
  },
  {
    "text": "topic for this uh today talk and also we explaining about how internally this things are working like how how the",
    "start": "64040",
    "end": "69720"
  },
  {
    "text": "stack u i mean stack memory and all our traces and all our like how we profiling",
    "start": "69720",
    "end": "75080"
  },
  {
    "text": "uh is been done by JG Prof and finally we'll talk about uh future of profiling like uh future of profiling future of",
    "start": "75080",
    "end": "82159"
  },
  {
    "text": "vasm and how these things are um integrated with goang uh uh tool chain",
    "start": "82159",
    "end": "87920"
  },
  {
    "text": "and go also we'll talk about uh wasi uh web system interface and vazi 2 so yeah",
    "start": "87920",
    "end": "95320"
  },
  {
    "text": "a lot of stuff and so bit about myself so my name is",
    "start": "95320",
    "end": "100960"
  },
  {
    "text": "Rajiv I'm originally from Bihar India I'm working as uh currently as software engineer uh job level three AT AP m m",
    "start": "100960",
    "end": "108680"
  },
  {
    "text": "Logistic Company and uh yeah I'm part of platforming Team uh I'm located in",
    "start": "108680",
    "end": "113920"
  },
  {
    "text": "bangaluru India and I graduated in 2022 from jss uh Bangalore India um I I",
    "start": "113920",
    "end": "121039"
  },
  {
    "text": "started working with go back in 2020 uh so I was uh Mente with season of dogs",
    "start": "121039",
    "end": "126280"
  },
  {
    "text": "program with grpc Gateway so it's a plugin on grpc and uh yeah I mean I'm",
    "start": "126280",
    "end": "131480"
  },
  {
    "text": "open source Enthusiast uh I did lot of contributions to um projects uh cncf projects and programs like Google summer",
    "start": "131480",
    "end": "138480"
  },
  {
    "text": "of C code LFX mentorship and uh season of dogs uh Toys also I'm mentoring I",
    "start": "138480",
    "end": "144800"
  },
  {
    "text": "Mentor for Google sum of cod uh in 2023 and 2024 with Jenkins uh Jenkins CI uh I",
    "start": "144800",
    "end": "151920"
  },
  {
    "text": "I have previously worked with a company like lumo red bus uh and economize in my college",
    "start": "151920",
    "end": "157599"
  },
  {
    "text": "days and I'm I'm here today with Naman so do you want to tell us bit about yourself Naman sure so hi everyone my",
    "start": "157599",
    "end": "165280"
  },
  {
    "text": "name is Naman Lani and currently I'm working as a software de developer at Len digital previously I have worked at",
    "start": "165280",
    "end": "172239"
  },
  {
    "text": "companies like bmwr and hacker rank I am a kubernetes contributor and shadowed",
    "start": "172239",
    "end": "178239"
  },
  {
    "text": "the kubernetes 1.26 and 1.30 release uh I was also a part of Google",
    "start": "178239",
    "end": "184840"
  },
  {
    "text": "summer of code and Linux Foundation mentorship programs during my college days",
    "start": "184840",
    "end": "190560"
  },
  {
    "text": "so uh let's start with go and see what is go many of you might be aware of this",
    "start": "190560",
    "end": "196959"
  },
  {
    "text": "language but just to set the context for further slides let's just get an overview of this language so go is a",
    "start": "196959",
    "end": "204400"
  },
  {
    "text": "programming language developed by Google in uh 2007 and it was released in public",
    "start": "204400",
    "end": "209959"
  },
  {
    "text": "in 2009 and since then it is maintained by Google as an open source",
    "start": "209959",
    "end": "216159"
  },
  {
    "text": "project so go is known for its built-in support for lightweight threads known as",
    "start": "216159",
    "end": "221879"
  },
  {
    "text": "go routines uh which makes it ideal for building concurrent and Es scalable",
    "start": "221879",
    "end": "228200"
  },
  {
    "text": "systems so golang compiles directly uh to machine code for excellent",
    "start": "228200",
    "end": "234239"
  },
  {
    "text": "performance like for uh similar to other languages like C and C+",
    "start": "234239",
    "end": "241040"
  },
  {
    "text": "plus uh golang is also very portable like it compiles to multitude of targets",
    "start": "241040",
    "end": "247120"
  },
  {
    "text": "including web assembly uh via the JS and vp1 ports which we will see in further",
    "start": "247120",
    "end": "253439"
  },
  {
    "text": "slides as well and in the demo as well so golang basically provides a lot of",
    "start": "253439",
    "end": "258959"
  },
  {
    "text": "standard tooling packages dependencies uh we can write and test the code but",
    "start": "258959",
    "end": "265199"
  },
  {
    "text": "also some more advanced constructs like CPU and memory profiling inbuilt in the in the language uh I'm sharing all of",
    "start": "265199",
    "end": "272919"
  },
  {
    "text": "this because when using go the entire uh tool chain uh is available when",
    "start": "272919",
    "end": "278160"
  },
  {
    "text": "compiling to web assembly uh so let's see what is",
    "start": "278160",
    "end": "283479"
  },
  {
    "text": "profiling we will see an overview of profiling so basically profiling provides insights into how a program",
    "start": "283479",
    "end": "290600"
  },
  {
    "text": "behaves during runtime uh enabling developers to optimize and debug their",
    "start": "290600",
    "end": "295840"
  },
  {
    "text": "code effectively so profiling is the process of analyzing like how a program behaves",
    "start": "295840",
    "end": "302280"
  },
  {
    "text": "during runtime how much resources it is consuming for example CPU memory dis how",
    "start": "302280",
    "end": "307440"
  },
  {
    "text": "much it is consuming and like the goal for profiling is to spot and fix these",
    "start": "307440",
    "end": "314320"
  },
  {
    "text": "problems so to provide better user experience uh there are various types of",
    "start": "314320",
    "end": "320400"
  },
  {
    "text": "profiling CPU profiling memory profiling go routine profiling uh this ensures efficient use",
    "start": "320400",
    "end": "327639"
  },
  {
    "text": "of CPU memory and other system resources as well so profiling basically we use to",
    "start": "327639",
    "end": "334080"
  },
  {
    "text": "identify botal NE uh in the code uh memory leaks or other performance",
    "start": "334080",
    "end": "339800"
  },
  {
    "text": "issues uh so see like profiling can be done at the application Level system level or even at the hardware level as",
    "start": "339800",
    "end": "348960"
  },
  {
    "text": "well uh now let's see what is prpr and how uh we can do profiling with prpr so",
    "start": "349319",
    "end": "356199"
  },
  {
    "text": "prpr basically stands for performance profiling uh",
    "start": "356199",
    "end": "361360"
  },
  {
    "text": "and is the inbuilt profiling tool in golang this is the powerful tool for",
    "start": "361360",
    "end": "366919"
  },
  {
    "text": "developers with the history backing date to 1970 when the first uh profiler tool",
    "start": "366919",
    "end": "372400"
  },
  {
    "text": "was developed Prof and it was for Unix and tools like Linux perf have",
    "start": "372400",
    "end": "378080"
  },
  {
    "text": "provided profiling Solutions since 2009 uh yet some Modern program programming",
    "start": "378080",
    "end": "383759"
  },
  {
    "text": "languages like uh efficient tools for profiling uh instrumenting observability",
    "start": "383759",
    "end": "391080"
  },
  {
    "text": "is crucial whether for uh investigating memory leaks or reducing uh and",
    "start": "391080",
    "end": "396599"
  },
  {
    "text": "applications computational footprint uh and is often significant part of the optimization",
    "start": "396599",
    "end": "403560"
  },
  {
    "text": "process so basically uh prpr uh is a tool uh by and this is the",
    "start": "403560",
    "end": "410599"
  },
  {
    "text": "inbuilt tool in Goen so using prpr you can uh profile your goaling application as well as uh visualize the data",
    "start": "410599",
    "end": "418160"
  },
  {
    "text": "generated by uh the PPR Tool uh go routine profiling is also",
    "start": "418160",
    "end": "424160"
  },
  {
    "text": "there which is used to understand the state of the go routines in the application and the package PR serves VI",
    "start": "424160",
    "end": "431160"
  },
  {
    "text": "its HTTP server runtime uh so profile this profile start in the format",
    "start": "431160",
    "end": "436360"
  },
  {
    "text": "expected by the P visualization Tool",
    "start": "436360",
    "end": "443520"
  },
  {
    "text": "uh so developing profilers that work across programming language is",
    "start": "443520",
    "end": "448680"
  },
  {
    "text": "challenging uh we will have to build uh profiler for each language but with web",
    "start": "448680",
    "end": "455000"
  },
  {
    "text": "assembly this solves the problem because any language can be compiled to web assembly bite code and if we have a web",
    "start": "455000",
    "end": "461160"
  },
  {
    "text": "assembly profiler it can be it can act as a universal profiler for any language",
    "start": "461160",
    "end": "466199"
  },
  {
    "text": "uh which we will see in further slides with Rajiv so over to you Rajiv yeah thank you Naman so we'll go through what",
    "start": "466199",
    "end": "473840"
  },
  {
    "text": "is web assembly so I mean web assembly started uh with browser Technologies and",
    "start": "473840",
    "end": "479240"
  },
  {
    "text": "then uh still it's growing it's it's a new and uh we have a component model",
    "start": "479240",
    "end": "485680"
  },
  {
    "text": "call it V vum V2 and all so basically in a nut cell it's just set of instruction",
    "start": "485680",
    "end": "491800"
  },
  {
    "text": "set of bite code for a stack based stack based virtual machine so what what is",
    "start": "491800",
    "end": "497120"
  },
  {
    "text": "stack Bas virtual machine is like any virtual machine which does the memory and compute using a stack data",
    "start": "497120",
    "end": "502240"
  },
  {
    "text": "structures so you have know like all the function calls go in the stack stack like that so any any virtual machine",
    "start": "502240",
    "end": "507560"
  },
  {
    "text": "which does uh which follow this back Bas data structure stuff so for that virtual machine it it is type of bite code type",
    "start": "507560",
    "end": "514159"
  },
  {
    "text": "of instruction in in a general so that's what web is so I mean in know also we",
    "start": "514159",
    "end": "521320"
  },
  {
    "text": "can say like web is purely just um memory and compute but uh using some run",
    "start": "521320",
    "end": "526880"
  },
  {
    "text": "times using some browser we can increase this capability of web so we can if if",
    "start": "526880",
    "end": "532040"
  },
  {
    "text": "you have a like any run time like there lot lot of run times for web only like vum time vum age so you can use those uh",
    "start": "532040",
    "end": "540160"
  },
  {
    "text": "function we can import those function host function to we module uh basically",
    "start": "540160",
    "end": "545760"
  },
  {
    "text": "the guest guest mod model uh so that's uh that's a power of like these uh host",
    "start": "545760",
    "end": "550959"
  },
  {
    "text": "environments like run times browser so basically we can extend the VM capabilities by exposing this uh guest",
    "start": "550959",
    "end": "556560"
  },
  {
    "text": "model to import and yeah I said you right I mean the vam web s run time so we have in",
    "start": "556560",
    "end": "563600"
  },
  {
    "text": "recent years there are lot of web run times like for any other languages we have like Java runtime and all those",
    "start": "563600",
    "end": "569600"
  },
  {
    "text": "like same as we can say in in same as like web only run time so we have V from T IO we have vam agage vam vmer so you",
    "start": "569600",
    "end": "578120"
  },
  {
    "text": "can use this dun time to compile any language to web modu or bite code uh the the best thing is that we",
    "start": "578120",
    "end": "585800"
  },
  {
    "text": "can use two uh two things with with with this run time so we can compile to vasm bite code and also you can um use as a",
    "start": "585800",
    "end": "593519"
  },
  {
    "text": "basically Shar Li Library so for example you can uh just write a plugin in a rust",
    "start": "593519",
    "end": "598839"
  },
  {
    "text": "and compile to web assembly and you can use this uh module as a shared library",
    "start": "598839",
    "end": "604000"
  },
  {
    "text": "to go application so that's a power of ASM so so because it doesn't depend on",
    "start": "604000",
    "end": "609760"
  },
  {
    "text": "the language you can compile to a V Code at end of the day it's a bite code you can use as a shared library to other languages too so you can you can compile",
    "start": "609760",
    "end": "618000"
  },
  {
    "text": "two vum that's one one one thing and one is like can act as a shared Library U one one more uh main feature",
    "start": "618000",
    "end": "624920"
  },
  {
    "text": "of vasm is like it's it's provide a provide a strong s boxing so what it",
    "start": "624920",
    "end": "630839"
  },
  {
    "text": "mean is like if you have a model V model one and if you have a v model 2 it's",
    "start": "630839",
    "end": "636399"
  },
  {
    "text": "both are totally isolated so V model one memory won't affect the V model other",
    "start": "636399",
    "end": "641639"
  },
  {
    "text": "memory so that's a strong sandboxing so even even in some cases it's allowed allow like running models from untrusted",
    "start": "641639",
    "end": "648360"
  },
  {
    "text": "sources so I will show you uh say like use cases for some companies so we have like cloudware workers so user scripts",
    "start": "648360",
    "end": "655600"
  },
  {
    "text": "uh people who submit the scripts and all you can you can uh those scripts run um I mean user are submitting those scripts",
    "start": "655600",
    "end": "661560"
  },
  {
    "text": "so they run in a very isolated environment so they are using the vum this sandboxing feature to run run the",
    "start": "661560",
    "end": "667680"
  },
  {
    "text": "scripts uh if you take example of figma so we have in figma we have lot of uh third party plugins so people make these",
    "start": "667680",
    "end": "673760"
  },
  {
    "text": "plugins and uh whatever they do uh they do so those plugins are like untrusted you can say like so those plugins can be",
    "start": "673760",
    "end": "680320"
  },
  {
    "text": "run in a very strong uh sandboxing environment more secure way sort of things so uh that's a strong sandboxing",
    "start": "680320",
    "end": "688279"
  },
  {
    "text": "like it's provide is environment for it memory safe and all the stuff and yeah",
    "start": "688279",
    "end": "694320"
  },
  {
    "text": "so these capabilities like I'm I'm talking of sandboxing and uh VM capity capabilities so to make this work we",
    "start": "694320",
    "end": "700800"
  },
  {
    "text": "need some sort of like specification like a guarantee so we know like APS specification Swagger and all the stuff",
    "start": "700800",
    "end": "707600"
  },
  {
    "text": "so we need we need some sort of like guarantee and all so that's there there it comes wasi web system interface so V",
    "start": "707600",
    "end": "715839"
  },
  {
    "text": "is something like sort of uh specification to uh like play with system calls uh in",
    "start": "715839",
    "end": "722839"
  },
  {
    "text": "input output stuff of os memory and all those stuff so we need we need sort of like system interface to talk to those",
    "start": "722839",
    "end": "730800"
  },
  {
    "text": "uh system calls C calls and all so that's that's what wasi is and uh we",
    "start": "730800",
    "end": "736760"
  },
  {
    "text": "have something called vasm import and VM export U so basically vasm vasm import",
    "start": "736760",
    "end": "742399"
  },
  {
    "text": "is type of direct tip is to import function function from web so you can import function from web module and also",
    "start": "742399",
    "end": "749519"
  },
  {
    "text": "we can export function from web model via VM export directive so these are two directives uh uh in uh go vasm uh uh",
    "start": "749519",
    "end": "758120"
  },
  {
    "text": "preview one so that's all that's all about web family and uh I will move it",
    "start": "758120",
    "end": "763399"
  },
  {
    "text": "to next slide about like uh WG Prof and how we can profile uh vasm",
    "start": "763399",
    "end": "769199"
  },
  {
    "text": "application using uh WG Prof so let's talk about what is WG Prof so Prof is",
    "start": "769199",
    "end": "775880"
  },
  {
    "text": "like comes from the P Prof thing and WG J is like uh so this WG Prof is built",
    "start": "775880",
    "end": "781279"
  },
  {
    "text": "upon P Prof data and vajo so I said vajo is a runtime we can you can use any runtime to compile any language to vam",
    "start": "781279",
    "end": "787839"
  },
  {
    "text": "module so it's based on vajo and P Prof that's that's the name come WG Prof so basically it's a cross language CPU and",
    "start": "787839",
    "end": "794880"
  },
  {
    "text": "memory profiler for uh web assembly and it was created by a company called dispatch run so so it's like dispatch",
    "start": "794880",
    "end": "801519"
  },
  {
    "text": "run is like they make um sort of like alternative to temporal U so also like",
    "start": "801519",
    "end": "807120"
  },
  {
    "text": "it's laying on the ground to become a univers profiler so U that's what like",
    "start": "807120",
    "end": "812160"
  },
  {
    "text": "you can compile any language to VM and it will profile uh the",
    "start": "812160",
    "end": "817320"
  },
  {
    "text": "application so I said you like it's based on vajo so let's talk about vajo what what vajo is so vajo project is",
    "start": "817320",
    "end": "824079"
  },
  {
    "text": "from tetr IO and we call it as zero dependency vasm uh runtime uh that can",
    "start": "824079",
    "end": "829800"
  },
  {
    "text": "run web on the server so V zero is written in go and uh but it is a vasum",
    "start": "829800",
    "end": "836240"
  },
  {
    "text": "runtime and uh it can run any vasam module regardless of progamming language uh from which it was built from so we",
    "start": "836240",
    "end": "842079"
  },
  {
    "text": "can write it is based on go but we can write any language in Rust and compile it to Vasa module using",
    "start": "842079",
    "end": "849000"
  },
  {
    "text": "vajo U also like uh what Nam talked about P data so WG Prof is based on PPR",
    "start": "849000",
    "end": "856160"
  },
  {
    "text": "data format so when you when you comp when you profile a VM application it will showcase those results in a PPR",
    "start": "856160",
    "end": "861920"
  },
  {
    "text": "data format um and yeah I mean it's a cross language profile so basically uh it doesn't depend on a language so since",
    "start": "861920",
    "end": "868759"
  },
  {
    "text": "people what n said p is only for goang but V module can be I mean we can compile any",
    "start": "868759",
    "end": "874120"
  },
  {
    "text": "language to V modu so we can bring the power of PPR to language like rust so we can write a code in Rust compile it to",
    "start": "874120",
    "end": "880480"
  },
  {
    "text": "vasam and I can profile uh that vasam modu using PPR so basically I wrote the",
    "start": "880480",
    "end": "885720"
  },
  {
    "text": "language in Rust so it doesn't depend on language and all so we can bring the power of P Prof to rust and other languages too using using the WG",
    "start": "885720",
    "end": "893959"
  },
  {
    "text": "Prof also u in further slide Nan will showcase a demo type how we can run this",
    "start": "893959",
    "end": "899120"
  },
  {
    "text": "PPR in HTTP end point so basically we exposed uh uh HTTP end point um",
    "start": "899120",
    "end": "904920"
  },
  {
    "text": "basically PPR data so since it's a end point we're exposing to some sort of end point so we can use any sort of like",
    "start": "904920",
    "end": "911120"
  },
  {
    "text": "continuous profiler so um to Prof profile it continuously so we have lot of continuous profile that one is from",
    "start": "911120",
    "end": "918040"
  },
  {
    "text": "Polar signal parka by polar signal and or we can use pyroscope by grafana Labs",
    "start": "918040",
    "end": "923320"
  },
  {
    "text": "so it's compatible for cess profiler to and the best thing about WG Pro is",
    "start": "923320",
    "end": "929319"
  },
  {
    "text": "like uh it instruments all the vasm function calls so I will talk about more about how it instrument those function",
    "start": "929319",
    "end": "935680"
  },
  {
    "text": "call so basically it capture the stack traces uh all of them and count",
    "start": "935680",
    "end": "940720"
  },
  {
    "text": "basically count the stack traces present in a more structured way using PR data uh prpr format uh so that it's",
    "start": "940720",
    "end": "947120"
  },
  {
    "text": "compatible with prpr ecosystem and all those stuff so basically it instrument all the function uh VM function calls",
    "start": "947120",
    "end": "956399"
  },
  {
    "text": "um okay so uh I will talk more about like how how profiling happens for application so I will basically give a",
    "start": "959120",
    "end": "965560"
  },
  {
    "text": "intuitive idea like how internet these things happen lot of things happen but I'll give a little bit of overview so",
    "start": "965560",
    "end": "971240"
  },
  {
    "text": "basically profiling for an application uh more in a general happens for like a two step one is like recording the St",
    "start": "971240",
    "end": "978160"
  },
  {
    "text": "traces recording the St traces and one is like resolving that St traces one by like that so I said like profiling",
    "start": "978160",
    "end": "984680"
  },
  {
    "text": "begins with capturing the stct Tres during the application ex execution time and then uh a stack TR is like a sort of",
    "start": "984680",
    "end": "991199"
  },
  {
    "text": "like sequence like a call for that specific moment function call sequence or some something like that and uh the",
    "start": "991199",
    "end": "997360"
  },
  {
    "text": "best thing like VM like web runtime are very suitable very well POS positioned to collect this data uh basically the",
    "start": "997360",
    "end": "1004639"
  },
  {
    "text": "when when you execute the guest code um vasam basically automatically inject",
    "start": "1004639",
    "end": "1010160"
  },
  {
    "text": "Hooks and all the stuff to the function to get those uh metrics and all and so",
    "start": "1010160",
    "end": "1017160"
  },
  {
    "text": "if you get uh so if you get that mat we can inspect the memory leakage we can inspect bottlenecks and all those stuff",
    "start": "1017160",
    "end": "1023120"
  },
  {
    "text": "uh so they basically inject instrument or basically we install hooks in that function uh uh to record everything what",
    "start": "1023120",
    "end": "1030160"
  },
  {
    "text": "is happening in the program uh at that execution time uh and uh yeah so after",
    "start": "1030160",
    "end": "1037079"
  },
  {
    "text": "that we record the St traces uh now we are going to resolve that uh stack traces so those raw stack traces uh",
    "start": "1037079",
    "end": "1043600"
  },
  {
    "text": "areum basically isol into some sort of like meaningful Insight uh via debug symbols so to resolve resolve that stes",
    "start": "1043600",
    "end": "1051480"
  },
  {
    "text": "we put some debug symbols uh in that function uh thing so vasm modeles carry",
    "start": "1051480",
    "end": "1057039"
  },
  {
    "text": "something called dwarf section uh so um DW RF dwarf section so basically dwarf",
    "start": "1057039",
    "end": "1063600"
  },
  {
    "text": "is some sort of like a uh um is a section where we we get all type of information how how the functions are",
    "start": "1063600",
    "end": "1070080"
  },
  {
    "text": "organized which variable is initialized in what way internally all those type of metrics all those type of in uh insights",
    "start": "1070080",
    "end": "1077440"
  },
  {
    "text": "it's sort of sort of like theing data format that contains like all detailed information about PR program structure",
    "start": "1077440",
    "end": "1083960"
  },
  {
    "text": "uh more of like internally like insights about variables are like defined a start",
    "start": "1083960",
    "end": "1089679"
  },
  {
    "text": "or end or something like that so what dwarf does is like dwarf uh section maps",
    "start": "1089679",
    "end": "1095440"
  },
  {
    "text": "compil code to the original source code so we have a source code and after compilation the code will be different",
    "start": "1095440",
    "end": "1101080"
  },
  {
    "text": "so it's just mapping thing that mapping thing is done by I mean uh dwarf does that so and and in line so by help of",
    "start": "1101080",
    "end": "1108559"
  },
  {
    "text": "this thing we can have like inline um level profiling so if you have inline level profiling we can find the bottle",
    "start": "1108559",
    "end": "1114880"
  },
  {
    "text": "next we can find whe whether the memory leakage so when you write a go program it's it's a mandatory not mandatory it's",
    "start": "1114880",
    "end": "1121000"
  },
  {
    "text": "a good uh whenever you open a go routine it's good to close that go routine when you whenever you open a DB you should",
    "start": "1121000",
    "end": "1127679"
  },
  {
    "text": "close that DB connect right it's a good so those things uh we can uh but manually we find it like okay if you",
    "start": "1127679",
    "end": "1133679"
  },
  {
    "text": "open a DV okay this is not closed manually but why are these things we can find okay this is not closed the good",
    "start": "1133679",
    "end": "1138760"
  },
  {
    "text": "routine is leaking or memory is leaking so those uh sort of stuff and yeah so uh",
    "start": "1138760",
    "end": "1145799"
  },
  {
    "text": "yeah again WG Prof so WG Prof provide two types of profiling one is like a CPU profiling and another is like a memory",
    "start": "1145799",
    "end": "1154159"
  },
  {
    "text": "profiling so uh I said you about like uh we uh in WM module we install Hooks and",
    "start": "1154159",
    "end": "1160640"
  },
  {
    "text": "all the stuff to instrument those uh things to get those inside metrics so how this happen so I said you like WG",
    "start": "1160640",
    "end": "1167360"
  },
  {
    "text": "Prof is based on P data format and one is vajo so vaj vajo has one good feature",
    "start": "1167360",
    "end": "1173200"
  },
  {
    "text": "called function functional listener facility so what is that is like um uh",
    "start": "1173200",
    "end": "1178400"
  },
  {
    "text": "so I'll say like WJ Prof instrument all the execution of aam models using this functional list facility uh which comes",
    "start": "1178400",
    "end": "1185159"
  },
  {
    "text": "from V zero so basically a functional listener facility is des designed to provide uh hooks so basically these",
    "start": "1185159",
    "end": "1191600"
  },
  {
    "text": "hooks added to the starting of function and the end of function so we we know",
    "start": "1191600",
    "end": "1196679"
  },
  {
    "text": "when these function are called and how long it takes and all those stuff so basically it allows developer to execute",
    "start": "1196679",
    "end": "1202159"
  },
  {
    "text": "sort of like custom code whenever the function VM function are called and when when it returns so even means this this",
    "start": "1202159",
    "end": "1209159"
  },
  {
    "text": "means you can collect data before the starting of function execution and after the function execution so basically in",
    "start": "1209159",
    "end": "1216400"
  },
  {
    "text": "internally just add a hooks to get those things so you know like when you write a code uh we have a timer and all like how",
    "start": "1216400",
    "end": "1223520"
  },
  {
    "text": "much time it takes uh but sometime we do like we Define a variable as start a function and then uh at the end of the",
    "start": "1223520",
    "end": "1229440"
  },
  {
    "text": "function we put a counter Plus+ right and while that also we count that how long it takes time and how many Loops it",
    "start": "1229440",
    "end": "1235799"
  },
  {
    "text": "done so basically analogous to that we put a hooks to the start of function and end of function to get those dwarf",
    "start": "1235799",
    "end": "1241600"
  },
  {
    "text": "matrics and all and uh yeah I mean it doesn't matter uh which language uh the Vasa model was",
    "start": "1241600",
    "end": "1248440"
  },
  {
    "text": "originally compiled from because uh when you write a code at end of the day it's just a bite code vam model bite code you",
    "start": "1248440",
    "end": "1255000"
  },
  {
    "text": "can run anywhere like it doesn't depend on architecture to like when you when you have a Docker images it depends on",
    "start": "1255000",
    "end": "1260159"
  },
  {
    "text": "architecture if you make a Docker image on a armm architecture you can't run it risk or something so that's a power of",
    "start": "1260159",
    "end": "1266559"
  },
  {
    "text": "vasm models so uh uh in next slide we'll talk more of like a demo type uh we'll write",
    "start": "1266559",
    "end": "1273440"
  },
  {
    "text": "a go program and will profile using WJ Pro so over to you n sure so in this",
    "start": "1273440",
    "end": "1280120"
  },
  {
    "text": "slide you can see there are three sections uh one is uh the code sample code then we are compiling it to web",
    "start": "1280120",
    "end": "1287679"
  },
  {
    "text": "assembly and then we are generating the CPU and memory profiles we will go uh through each section slowly and one by",
    "start": "1287679",
    "end": "1294360"
  },
  {
    "text": "one so in the first section we are writing a simple hello world goang program so we are just importing one fmt",
    "start": "1294360",
    "end": "1301679"
  },
  {
    "text": "package and printing hello WG Prof as a message in CMD in the second section we",
    "start": "1301679",
    "end": "1308440"
  },
  {
    "text": "are compiling this go code which we have return to web assembly and for this uh",
    "start": "1308440",
    "end": "1314320"
  },
  {
    "text": "the code we have saved in main.go file uh so if you see the command uh we are",
    "start": "1314320",
    "end": "1320080"
  },
  {
    "text": "building the main. go and setting the output file as main Dov so once the this",
    "start": "1320080",
    "end": "1326200"
  },
  {
    "text": "Goen code is compiled to web assembly by code it will be saved in the same directory with the name main",
    "start": "1326200",
    "end": "1332720"
  },
  {
    "text": "dovas uh and to build this we are set we will have to set go AR as vasm and go s",
    "start": "1332720",
    "end": "1339440"
  },
  {
    "text": "as uh vas P1 and we can also set as GS instead of rcp1 so there are two ports",
    "start": "1339440",
    "end": "1346159"
  },
  {
    "text": "which we discussed earlier so one once this uh main do file is uh generated",
    "start": "1346159",
    "end": "1351799"
  },
  {
    "text": "which contains the uh web assembly bite code for our go and code which we are seeing uh now our task is to generate uh",
    "start": "1351799",
    "end": "1359960"
  },
  {
    "text": "the memory and CPU profiles for this web assembly code so if you see this command we are using WG Prof which uh Rajiv",
    "start": "1359960",
    "end": "1367559"
  },
  {
    "text": "discussed in detail uh so with WG Prof Tool uh we are setting sample s one",
    "start": "1367559",
    "end": "1374240"
  },
  {
    "text": "which defines uh the number of samples to take per second uh for uh demo",
    "start": "1374240",
    "end": "1379400"
  },
  {
    "text": "purpose we have set it to one but it can be more uh then we are giving the path",
    "start": "1379400",
    "end": "1384760"
  },
  {
    "text": "uh to the output file like if you see in this uh it says users Rajiv Singh",
    "start": "1384760",
    "end": "1390520"
  },
  {
    "text": "desktop then the directory name hello vasm and then the main uh file name one",
    "start": "1390520",
    "end": "1397159"
  },
  {
    "text": "is memory M profile out out uh and second is CPU profile. out so it can",
    "start": "1397159",
    "end": "1403799"
  },
  {
    "text": "like it is um we can set it to our needs what name we want to set and the output",
    "start": "1403799",
    "end": "1410400"
  },
  {
    "text": "will be stored and saved in that file and then we are running uh this V main",
    "start": "1410400",
    "end": "1416440"
  },
  {
    "text": "Dov uh binary so once we run this we will get the CPU and memory profile data",
    "start": "1416440",
    "end": "1423279"
  },
  {
    "text": "stored in this files and now we can visualize this data and for this uh we will be",
    "start": "1423279",
    "end": "1430360"
  },
  {
    "text": "visualizing memory profile and CPU profile 1 by one so if you see in this slide we have we are visualizing the",
    "start": "1430360",
    "end": "1437120"
  },
  {
    "text": "memory profile uh to and to uh visualize it we have a we are using prpr uh",
    "start": "1437120",
    "end": "1443320"
  },
  {
    "text": "because prpr is a uh profile visualization Tool uh so for this we are",
    "start": "1443320",
    "end": "1449679"
  },
  {
    "text": "running go tool prpr and setting the HTTP Port this can be any free Port available in the system and then we are",
    "start": "1449679",
    "end": "1456960"
  },
  {
    "text": "uh passing the uh output file which we generated with the WG Prof command and",
    "start": "1456960",
    "end": "1463799"
  },
  {
    "text": "this is the path of that file for us it was in the same directory so we have set it to M profile. out but it's the actual",
    "start": "1463799",
    "end": "1470520"
  },
  {
    "text": "path of do file and once we run this we can see we can go to that httv port in",
    "start": "1470520",
    "end": "1476039"
  },
  {
    "text": "our browser and see this kind of uh graphs so this is a filim graph uh prpr",
    "start": "1476039",
    "end": "1482240"
  },
  {
    "text": "supports other types of graph as well like uh call graph tree map and some else uh so you can like visualize in",
    "start": "1482240",
    "end": "1490000"
  },
  {
    "text": "different forms as well but for this demo purpose we have we are visualizing it in uh film graph so if you see the",
    "start": "1490000",
    "end": "1497120"
  },
  {
    "text": "data it is around 27 KB but we have only run a goang hello world program so how",
    "start": "1497120",
    "end": "1503919"
  },
  {
    "text": "much so this is too much of memory it is consuming 27 KB it should be not that",
    "start": "1503919",
    "end": "1509080"
  },
  {
    "text": "much so from where it is coming so uh the go and time is just more go code",
    "start": "1509080",
    "end": "1514840"
  },
  {
    "text": "that runs in the same process as Goen code so this is not the only the uh",
    "start": "1514840",
    "end": "1520640"
  },
  {
    "text": "hello world program profiles but it also contains the uh go run time data as well",
    "start": "1520640",
    "end": "1526679"
  },
  {
    "text": "and uh it's not a separate process that can be profiled separately but if you want to just uh profile your uh goang",
    "start": "1526679",
    "end": "1534760"
  },
  {
    "text": "code goang application and not the runtime you can set uh while generating the data uh in WG Prof you can set",
    "start": "1534760",
    "end": "1541880"
  },
  {
    "text": "runtime as false so it will like exclude the runtime profiles and only uh",
    "start": "1541880",
    "end": "1547880"
  },
  {
    "text": "contains the vi application profiles therefore we need to initialize the gun time to uh obtain the profile so",
    "start": "1547880",
    "end": "1555000"
  },
  {
    "text": "in this graph if you see uh the Tex shows the process calls call stack like",
    "start": "1555000",
    "end": "1560399"
  },
  {
    "text": "which process called which process it's like in the stack form and the width of each process shows how much memory",
    "start": "1560399",
    "end": "1567039"
  },
  {
    "text": "consumed so that's how this flame grabs can be visualized for memory uh now we can now if you want to",
    "start": "1567039",
    "end": "1575720"
  },
  {
    "text": "profile like visualize the CPU profile data uh for the same uh vast binary we",
    "start": "1575720",
    "end": "1582600"
  },
  {
    "text": "will run like same command go tool prpr HTTP Port which should be a available",
    "start": "1582600",
    "end": "1588480"
  },
  {
    "text": "port and then the path of that CPU profile output binary so if you see in",
    "start": "1588480",
    "end": "1594039"
  },
  {
    "text": "this this is a different format and if you see it contains the name of the process and as well as the flat flat",
    "start": "1594039",
    "end": "1601840"
  },
  {
    "text": "percent as well as the cumulative percent so there are two datas in one is",
    "start": "1601840",
    "end": "1607080"
  },
  {
    "text": "like uh simple digits and one is in percent so with this you can visualize",
    "start": "1607080",
    "end": "1613880"
  },
  {
    "text": "like which process is consuming how much uh CPU and you can like optimize your your goang application according to that",
    "start": "1613880",
    "end": "1620240"
  },
  {
    "text": "this is not specific to goang like we have used so if you see here we have",
    "start": "1620240",
    "end": "1625520"
  },
  {
    "text": "written the code in goang but we are using wch Prof so we can compile any",
    "start": "1625520",
    "end": "1630720"
  },
  {
    "text": "code uh in any uh other language like C C++ rust and then we can compile it to a",
    "start": "1630720",
    "end": "1638720"
  },
  {
    "text": "web assembly using wgpr so like eventually we will have our web assembly",
    "start": "1638720",
    "end": "1645159"
  },
  {
    "text": "uh bite code and we can profile that application which is written in any other language so it acts as a universal",
    "start": "1645159",
    "end": "1652399"
  },
  {
    "text": "profiler basically so there are many things happening in web assembly these",
    "start": "1652399",
    "end": "1657760"
  },
  {
    "text": "days and we will listen about the future of web assembly from Rajiv yeah thank you n so uh yeah so so",
    "start": "1657760",
    "end": "1666600"
  },
  {
    "text": "web is a new thing not much new but yeah things are going rapidly recently now so",
    "start": "1666600",
    "end": "1672000"
  },
  {
    "text": "a lot of companies are building things on web friend and plugins and all those stuff so yeah I mean uh Prof is one of",
    "start": "1672000",
    "end": "1679320"
  },
  {
    "text": "the major step bringing the capabilities of go P Prof to the language like rust",
    "start": "1679320",
    "end": "1684360"
  },
  {
    "text": "and all so we don't have this P Prof thing in other languages so we can bring those stuff to the rust or any other",
    "start": "1684360",
    "end": "1690799"
  },
  {
    "text": "languages and yeah I mean uh could be done in depth too like if you want to do some kernel syis calls profiling and all",
    "start": "1690799",
    "end": "1698279"
  },
  {
    "text": "those stuff so even epbf is something we can use and things are going on like if if you can use epbf with these profiling",
    "start": "1698279",
    "end": "1705519"
  },
  {
    "text": "tools and all so yeah it it crossed the part with we and one more thing is like",
    "start": "1705519",
    "end": "1711320"
  },
  {
    "text": "U so yeah I mean in recently in go 1.21 uh wasi uh basically Wazi Port was added",
    "start": "1711320",
    "end": "1717640"
  },
  {
    "text": "so if you are a part of go contributors blogs and all those if you follow the go U what what things are coming up so in",
    "start": "1717640",
    "end": "1724080"
  },
  {
    "text": "go 1.21 vasi uh Port wi so uh when you compile uh basically uh you have seen",
    "start": "1724080",
    "end": "1729480"
  },
  {
    "text": "that go Arc and go OS so these are compilation Target we provide that so earlier it was only a JS Target so if",
    "start": "1729480",
    "end": "1735760"
  },
  {
    "text": "you want to compile go to v a module we put a JS Target JS Port now we have a",
    "start": "1735760",
    "end": "1741880"
  },
  {
    "text": "vaji port vaji preview one port so that was I didn't go one to uh one to um 1.21",
    "start": "1741880",
    "end": "1747880"
  },
  {
    "text": "so it's experimental port and yeah I mean wasi Preview 2 is already released so we have that in tiny go so we have a",
    "start": "1747880",
    "end": "1755399"
  },
  {
    "text": "big go and one is like a tiny go uh go for embedded systems and all so tiny go",
    "start": "1755399",
    "end": "1761279"
  },
  {
    "text": "we have a vaj preview 2 and vaj Preview 2 has to be added in go big go so things",
    "start": "1761279",
    "end": "1766559"
  },
  {
    "text": "are going on if you if you follow go thing you can see the proposals on vasam vasam 32bit architecture and all those",
    "start": "1766559",
    "end": "1772880"
  },
  {
    "text": "so I mean still things has to be discussed okay this this is okay or not go team and all the stuff so yeah I mean",
    "start": "1772880",
    "end": "1779640"
  },
  {
    "text": "we have the vaj preview two in tinyo and in big go we have vaj preview one uh",
    "start": "1779640",
    "end": "1784840"
  },
  {
    "text": "port and yeah I mean we lot of uh lot of exciting stuff uh there are so many opportunity uh we are excited about and",
    "start": "1784840",
    "end": "1792480"
  },
  {
    "text": "uh as we continue to explore the possibilities like we we unlock the different types of things profiling and",
    "start": "1792480",
    "end": "1797799"
  },
  {
    "text": "other the I mean in we website also like can we increase the performance of a",
    "start": "1797799",
    "end": "1803279"
  },
  {
    "text": "cash so if you if you a browser we have a local storage called index DB right so we if you have lot of assets and all",
    "start": "1803279",
    "end": "1809720"
  },
  {
    "text": "some some some website put those storage to local storage cash is one thing so",
    "start": "1809720",
    "end": "1815120"
  },
  {
    "text": "that is an index TV so we can we can improve that to using web smelly like you can use sqlite so you can read a",
    "start": "1815120",
    "end": "1821559"
  },
  {
    "text": "Blog by notion they have decreased the per cash performance using this cite and",
    "start": "1821559",
    "end": "1826679"
  },
  {
    "text": "web family um uh by using with index DV so that is one thing and yeah I mean figma like so figma and Photoshop so uh",
    "start": "1826679",
    "end": "1834559"
  },
  {
    "text": "you know you know right we can't run uh go in browser you can't run see in browser like JS related so that's what",
    "start": "1834559",
    "end": "1841360"
  },
  {
    "text": "web is you can bring those things to uh browser so if you have seen the code",
    "start": "1841360",
    "end": "1846559"
  },
  {
    "text": "code uh like any company code uh if you write a code and compile it so when you",
    "start": "1846559",
    "end": "1851600"
  },
  {
    "text": "see the inspect element basically it calls API to some other servers and all and if you uh put a code in a into B and",
    "start": "1851600",
    "end": "1858720"
  },
  {
    "text": "add it it basically calls to API but using vasm you can do that thing in the browser so you can have a server in go",
    "start": "1858720",
    "end": "1865360"
  },
  {
    "text": "and you can so that's a power of web just speed up figma we you have lot of elements and all those going you can't",
    "start": "1865360",
    "end": "1870720"
  },
  {
    "text": "do lot of API calls to some other place so I mean they are using it Cloud Fair",
    "start": "1870720",
    "end": "1876080"
  },
  {
    "text": "workers are using it we have fastly Edge they use for Edge Network so those things are still going on and one more",
    "start": "1876080",
    "end": "1883360"
  },
  {
    "text": "thing like as as for next step we are we are also looking to enable profiling for like",
    "start": "1883360",
    "end": "1888440"
  },
  {
    "text": "language like interpreted language like Python and all those stuff so yeah I mean yeah that's true I mean that's the",
    "start": "1888440",
    "end": "1894039"
  },
  {
    "text": "future of profiling uh web SM and uh WG Prof and web SM in",
    "start": "1894039",
    "end": "1900639"
  },
  {
    "text": "general and uh yeah I mean these are the links uh you can follow or you can scan the QR for our PP and all those uh",
    "start": "1900639",
    "end": "1908480"
  },
  {
    "text": "assets like blog from dispatch run and yeah man these are some references uh we",
    "start": "1908480",
    "end": "1913639"
  },
  {
    "text": "using this talk um and that's the end I mean thank you so much for listening and we are happy to take any question if you",
    "start": "1913639",
    "end": "1919960"
  },
  {
    "text": "have any uh thank you [Applause]",
    "start": "1919960",
    "end": "1928989"
  },
  {
    "text": "everyone oh yeah when you talked about uh the",
    "start": "1938559",
    "end": "1946080"
  },
  {
    "text": "universal profiling ability so over there if we profile a different language",
    "start": "1946080",
    "end": "1952039"
  },
  {
    "text": "which is compiled to wasm like sometimes compilers do their own optimization so won't the performance uh change in that",
    "start": "1952039",
    "end": "1959960"
  },
  {
    "text": "way um like so uh I think your question is like we if you write any code and",
    "start": "1959960",
    "end": "1965240"
  },
  {
    "text": "then compile to vasm so is it does it affect the performance of that code mean",
    "start": "1965240",
    "end": "1971360"
  },
  {
    "text": "right because uh the the compiler for that particular language will optimize it in a different way than the VM comp",
    "start": "1971360",
    "end": "1977840"
  },
  {
    "text": "compiler will so if you profile it after compiling into vasm then won't the",
    "start": "1977840",
    "end": "1984639"
  },
  {
    "text": "profiler give different results I no uh I mean so vasm doesn't",
    "start": "1984639",
    "end": "1990159"
  },
  {
    "text": "have any runtime or sort of like so in a language we have like scheduler and run times and all who which does do garbage",
    "start": "1990159",
    "end": "1997080"
  },
  {
    "text": "collection all the stuff right so vasm doesn't have that so it won't affect that basically what vasm WG Prof does is",
    "start": "1997080",
    "end": "2003080"
  },
  {
    "text": "like it basically uh in injects some hooks in the function okay and then profile so it doesn't affect anything so",
    "start": "2003080",
    "end": "2010159"
  },
  {
    "text": "what n shows right one graph so you are getting some extra data right those are runtime data you can filter it that out",
    "start": "2010159",
    "end": "2015600"
  },
  {
    "text": "by putting a symbol so as far I know it won't affect anything it won't add some extra Matrix to it which will be like a",
    "start": "2015600",
    "end": "2021720"
  },
  {
    "text": "false Matrix so it doesn't do that so using WG Prof yeah thank you",
    "start": "2021720",
    "end": "2028799"
  },
  {
    "text": "yeah okay okay yeah okay",
    "start": "2034519",
    "end": "2039440"
  },
  {
    "text": "I guess no question so thank you so much everyone for listening us thank you much yeah",
    "start": "2042799",
    "end": "2049879"
  }
]