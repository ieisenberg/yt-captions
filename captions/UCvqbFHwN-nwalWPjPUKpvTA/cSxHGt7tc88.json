[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "uh hi everyone uh i'm sanjay pujari a staff software engineer in google cloud",
    "start": "80",
    "end": "5839"
  },
  {
    "text": "and part of the grpc team i lead the psm security offering a psm being",
    "start": "5839",
    "end": "13120"
  },
  {
    "text": "proxima service mesh uh in this talk uh i'm going to cover",
    "start": "13120",
    "end": "20240"
  },
  {
    "start": "16000",
    "end": "94000"
  },
  {
    "text": "a grpc proxima service mesh intro and summary",
    "start": "20240",
    "end": "25279"
  },
  {
    "text": "uh i'll also talk about why we need security in the service mesh and why is it so painful today",
    "start": "25279",
    "end": "33920"
  },
  {
    "text": "i'll talk about how we added security to the grpc proxima service mesh and how it",
    "start": "33920",
    "end": "39200"
  },
  {
    "text": "works i'll i'll do a technical drill down with a deployment diagram",
    "start": "39200",
    "end": "45120"
  },
  {
    "text": "uh then i'll talk about what changes we made to the grpc library",
    "start": "45120",
    "end": "52160"
  },
  {
    "text": "specifically the grpc programming api for using this feature",
    "start": "52160",
    "end": "59520"
  },
  {
    "text": "and later on i'll i'll basically uh describe",
    "start": "59520",
    "end": "64960"
  },
  {
    "text": "a psm security deployment what it looks like in google cloud as an example",
    "start": "64960",
    "end": "71200"
  },
  {
    "text": "uh towards the end i'll cover the future roadmap and",
    "start": "71200",
    "end": "77600"
  },
  {
    "text": "i also have a slide that has some links to",
    "start": "77600",
    "end": "82880"
  },
  {
    "text": "resources for psm in case you're interested and towards the end",
    "start": "82880",
    "end": "88000"
  },
  {
    "text": "you know we'll have a few minutes for a q a",
    "start": "88000",
    "end": "92960"
  },
  {
    "start": "94000",
    "end": "201000"
  },
  {
    "text": "now i'll give a brief intro to service mesh so uh service mesh with proxies was the",
    "start": "97119",
    "end": "104960"
  },
  {
    "text": "initial model uh this is how the service mesh started uh in this uh",
    "start": "104960",
    "end": "111600"
  },
  {
    "text": "transparent proxies in red boxes allow existing applications to be in a",
    "start": "111600",
    "end": "117119"
  },
  {
    "text": "service mesh the applications shown in blue boxes are not aware of the service mesh",
    "start": "117119",
    "end": "124560"
  },
  {
    "text": "the proxies implement these",
    "start": "124560",
    "end": "128759"
  },
  {
    "text": "uh is it me okay cool uh so where was i okay so the service mesh includes uh",
    "start": "149840",
    "end": "158319"
  },
  {
    "text": "features like service discovery routing load balancing security and",
    "start": "158319",
    "end": "164160"
  },
  {
    "text": "observability uh now grpc is a popular framework for",
    "start": "164160",
    "end": "169360"
  },
  {
    "text": "service to service communication as randy just mentioned and so we were thinking can we add",
    "start": "169360",
    "end": "175920"
  },
  {
    "text": "service mesh features or awareness of the service mesh to grpc",
    "start": "175920",
    "end": "181760"
  },
  {
    "text": "so in this use case applications would still be uh",
    "start": "181760",
    "end": "186879"
  },
  {
    "text": "gen somewhat unaware of the service mesh around them but the service mesh policies would be",
    "start": "186879",
    "end": "193040"
  },
  {
    "text": "transparently applied uh to the grpc traffic by the grpc library",
    "start": "193040",
    "end": "200480"
  },
  {
    "start": "201000",
    "end": "258000"
  },
  {
    "text": "now let me talk about xts",
    "start": "202400",
    "end": "208959"
  },
  {
    "text": "because xdf frequently mentioned in the context of uh service meshes",
    "start": "208959",
    "end": "215519"
  },
  {
    "text": "uh xds is a protocol for control plane uh to talk to data plane entities uh",
    "start": "215519",
    "end": "221760"
  },
  {
    "text": "hence it's called a data plane api uh xts where x stands for something like",
    "start": "221760",
    "end": "229200"
  },
  {
    "text": "an unknown quantity uh in uh equations and ds is discovery service so like",
    "start": "229200",
    "end": "236159"
  },
  {
    "text": "discovery of clusters routes and listeners etc",
    "start": "236159",
    "end": "241760"
  },
  {
    "text": "xts was developed for envoy but it is a pretty open and extensible",
    "start": "241760",
    "end": "247519"
  },
  {
    "text": "for any kind of service mesh so grpc adopted it and extended it for the",
    "start": "247519",
    "end": "255120"
  },
  {
    "text": "proximity service mesh so when the pandemic was reaching",
    "start": "255120",
    "end": "262479"
  },
  {
    "start": "258000",
    "end": "308000"
  },
  {
    "text": "we were enhancing the proximal service mesh with grpc our first release last year in june had",
    "start": "262479",
    "end": "270400"
  },
  {
    "text": "basic load balancing and service discovery over the past year we added",
    "start": "270400",
    "end": "277040"
  },
  {
    "text": "various advanced traffic management features like traffic splitting circuit breaking and session affinity",
    "start": "277040",
    "end": "284479"
  },
  {
    "text": "um so i'm kind of curious at this audience how many uh of you have used a service",
    "start": "284479",
    "end": "291600"
  },
  {
    "text": "mesh with a proxy maybe a show of hands okay cool uh and how many of you uh know",
    "start": "291600",
    "end": "298080"
  },
  {
    "text": "about the grpc proxy service mesh how many of you have heard about it okay not that",
    "start": "298080",
    "end": "303840"
  },
  {
    "text": "many uh okay now before i dive into security uh so so",
    "start": "303840",
    "end": "310960"
  },
  {
    "start": "308000",
    "end": "370000"
  },
  {
    "text": "far i've talked about just proxy service mesh without security uh so uh just to recap",
    "start": "310960",
    "end": "316560"
  },
  {
    "text": "uh proxima service mesh uh the current status and there was a",
    "start": "316560",
    "end": "322639"
  },
  {
    "text": "previous uh uh kubecon presentation by our product manager megan",
    "start": "322639",
    "end": "327680"
  },
  {
    "text": "uh in may earlier this year that talks about the grpc proxy service mesh and",
    "start": "327680",
    "end": "333199"
  },
  {
    "text": "what we had until then uh you know basically the load balancing plus advanced traffic management features",
    "start": "333199",
    "end": "338880"
  },
  {
    "text": "so i've included links to the slide set and the video recording uh here",
    "start": "338880",
    "end": "344000"
  },
  {
    "text": "uh at google's traffic director side there are a couple of blogs that talk about",
    "start": "344000",
    "end": "349280"
  },
  {
    "text": "this now traffic director is google's implementation of the xds control plane uh the traffic director",
    "start": "349280",
    "end": "356720"
  },
  {
    "text": "user guide covers proxima service mesh and you can actually uh you know get a",
    "start": "356720",
    "end": "361759"
  },
  {
    "text": "test account i believe with some free credits on google cloud and and do a test drive of the proximity service mesh",
    "start": "361759",
    "end": "370800"
  },
  {
    "start": "370000",
    "end": "476000"
  },
  {
    "text": "now before i go into proxy service mesh security uh i i kind of wanted to",
    "start": "371039",
    "end": "377680"
  },
  {
    "text": "summarize why is security so important in service mesh right now you can think of a service mesh as",
    "start": "377680",
    "end": "385520"
  },
  {
    "text": "the equivalent to breaking up a monolithic application and what used to be in process communication",
    "start": "385520",
    "end": "393600"
  },
  {
    "text": "inside the monolith is now rpcs over the network and as a result of that",
    "start": "393600",
    "end": "401120"
  },
  {
    "text": "these rpcs need to be secure now these rpcs are routed and load",
    "start": "401120",
    "end": "407600"
  },
  {
    "text": "balanced as part of the service mesh orchestration uh so we need security",
    "start": "407600",
    "end": "414479"
  },
  {
    "text": "that's well integrated with other aspects of the mesh you know things like routing load balancing and service",
    "start": "414479",
    "end": "420639"
  },
  {
    "text": "discovery as an example each endpoint",
    "start": "420639",
    "end": "427199"
  },
  {
    "text": "needs to be able to validate its peer certificate and identity using",
    "start": "427199",
    "end": "433759"
  },
  {
    "text": "the control plane supplied information now in this picture",
    "start": "433759",
    "end": "439520"
  },
  {
    "text": "the yellow layer talks to the red layer and the red layer talks to the green layer and these rpcs",
    "start": "439520",
    "end": "446400"
  },
  {
    "text": "cross network and infrastructure boundaries the cloud-like lines show the various",
    "start": "446400",
    "end": "452319"
  },
  {
    "text": "boundaries the rpcs have to cross and the routing",
    "start": "452319",
    "end": "457599"
  },
  {
    "text": "across these boundaries is orchestrated by the control plane so we need a compatible security",
    "start": "457599",
    "end": "464319"
  },
  {
    "text": "configuration from the control plane for the endpoints to be able to authenticate and authorize their peers",
    "start": "464319",
    "end": "471360"
  },
  {
    "text": "and once that is done uh traffic is secure",
    "start": "471360",
    "end": "475919"
  },
  {
    "start": "476000",
    "end": "536000"
  },
  {
    "text": "um service identities are the foundation of",
    "start": "477440",
    "end": "483199"
  },
  {
    "text": "the service mesh and these are verified through mtls in a service mesh",
    "start": "483199",
    "end": "489440"
  },
  {
    "text": "server authorization and client authorization now also known as our bag at least in our grpc ecosystem",
    "start": "489440",
    "end": "496479"
  },
  {
    "text": "depend on service identities now all of these things ultimately enable a secure service mesh",
    "start": "496479",
    "end": "504960"
  },
  {
    "text": "there is another point i kind of want to make in passing uh for a real",
    "start": "504960",
    "end": "512000"
  },
  {
    "text": "effective security we also need a certificates and keys to be rotated um",
    "start": "512000",
    "end": "519039"
  },
  {
    "text": "do we want to burden the application developers with the overhead of uh certificate and",
    "start": "519039",
    "end": "524560"
  },
  {
    "text": "key management for doing that no so we ideally we would like the infrastructure and the framework",
    "start": "524560",
    "end": "531200"
  },
  {
    "text": "together to do these things for us and that's where",
    "start": "531200",
    "end": "537120"
  },
  {
    "start": "536000",
    "end": "616000"
  },
  {
    "text": "psm security comes in one more thing i kind of wanted to mention is",
    "start": "537120",
    "end": "543040"
  },
  {
    "text": "if you really want to do mtls yourself in your application it's a huge pain today because you have to do the",
    "start": "543040",
    "end": "548720"
  },
  {
    "text": "certificate management yourself you first of all have to modify the code",
    "start": "548720",
    "end": "553760"
  },
  {
    "text": "to load certificates and use them to create a tls or mpls connection",
    "start": "553760",
    "end": "559839"
  },
  {
    "text": "then you also have to add code to perform additional verification as per",
    "start": "559839",
    "end": "565440"
  },
  {
    "text": "your semantics for example only certificates with certain identities are",
    "start": "565440",
    "end": "571120"
  },
  {
    "text": "allowed for certain services and also it's a headache uh for uh folks",
    "start": "571120",
    "end": "577760"
  },
  {
    "text": "deploying and configuring your software you know they need to manage things like uh you know putting",
    "start": "577760",
    "end": "584000"
  },
  {
    "text": "certificates in respective directories configuration files uh",
    "start": "584000",
    "end": "589760"
  },
  {
    "text": "that are needed to kind of link to those directories and of course managing the code or the application that is going to",
    "start": "589760",
    "end": "598000"
  },
  {
    "text": "make use of those certificates in the directories so and you know another pain point is",
    "start": "598000",
    "end": "605279"
  },
  {
    "text": "what happens when the certificates expire and they need to be replaced uh in many cases you you actually have to",
    "start": "605279",
    "end": "611920"
  },
  {
    "text": "restart your application",
    "start": "611920",
    "end": "615120"
  },
  {
    "start": "616000",
    "end": "663000"
  },
  {
    "text": "uh so uh when it comes to proxies service mesh with grpc we have kind of seen the",
    "start": "617120",
    "end": "624959"
  },
  {
    "text": "advanced traffic management features i talked about but what about securing this traffic",
    "start": "624959",
    "end": "630240"
  },
  {
    "text": "automatically and that is where a psm security comes in it gives you service to service",
    "start": "630240",
    "end": "637440"
  },
  {
    "text": "security now this is transport security which is",
    "start": "637440",
    "end": "643120"
  },
  {
    "text": "mtls for xds managed grpc connections uh",
    "start": "643120",
    "end": "648480"
  },
  {
    "text": "just a refresher on mtrs it gives you authentication encryption",
    "start": "648480",
    "end": "653519"
  },
  {
    "text": "and server authorization i'll talk about server authorization uh in a",
    "start": "653519",
    "end": "659200"
  },
  {
    "text": "bit",
    "start": "659200",
    "end": "661839"
  },
  {
    "start": "663000",
    "end": "730000"
  },
  {
    "text": "now now how does it all work right uh",
    "start": "664320",
    "end": "669360"
  },
  {
    "text": "note that grpc is an rpg framework in a library it",
    "start": "669360",
    "end": "674399"
  },
  {
    "text": "cannot do everything we need infrastructure to provide us with certificates and keys",
    "start": "674399",
    "end": "681120"
  },
  {
    "text": "and have a way for grpc to consume them the xts control plane is needed to",
    "start": "681120",
    "end": "688000"
  },
  {
    "text": "orchestrate and secure connections between the workloads by providing the",
    "start": "688000",
    "end": "693519"
  },
  {
    "text": "security configuration and grpc is the glue that combines infrastructure provided",
    "start": "693519",
    "end": "700079"
  },
  {
    "text": "certificates and keys um xds control plane provided security configuration",
    "start": "700079",
    "end": "706160"
  },
  {
    "text": "and it kind of putting it all together it makes the traffic secure",
    "start": "706160",
    "end": "711440"
  },
  {
    "text": "so i mean another question to the audience how many of you kind of were missing",
    "start": "711440",
    "end": "717440"
  },
  {
    "text": "security in the service mesh and think that this would be like a cool feature something that you",
    "start": "717440",
    "end": "723360"
  },
  {
    "text": "thought might be interesting so okay",
    "start": "723360",
    "end": "729720"
  },
  {
    "start": "730000",
    "end": "813000"
  },
  {
    "text": "uh now this is a pictorial representation of how it all works uh",
    "start": "730959",
    "end": "737920"
  },
  {
    "text": "i have the client in the yellow box on the left uh sending rpcs to the server",
    "start": "737920",
    "end": "743040"
  },
  {
    "text": "in the red box over a secure channel the blue lock on that line indicates a",
    "start": "743040",
    "end": "749200"
  },
  {
    "text": "secure channel both the client and server are xds enabled and get their security",
    "start": "749200",
    "end": "754399"
  },
  {
    "text": "configuration from the xds control plane shown in blue at the top",
    "start": "754399",
    "end": "760079"
  },
  {
    "text": "the client and server needs certificates and keys that are provided by the underlying infrastructure to make it all",
    "start": "760079",
    "end": "766720"
  },
  {
    "text": "happen the green box represents the infrastructure components",
    "start": "766720",
    "end": "773040"
  },
  {
    "text": "uh which include the certification authorities uh or cas uh",
    "start": "773040",
    "end": "779279"
  },
  {
    "text": "to mint the certificates and a process to continuously generate csrs and",
    "start": "779279",
    "end": "785920"
  },
  {
    "text": "to use them to request certificates and a mechanism to make these",
    "start": "785920",
    "end": "791680"
  },
  {
    "text": "certificates and keys available to the grpc workload using uh",
    "start": "791680",
    "end": "797440"
  },
  {
    "text": "grpc's plugin feature so when all these things are put together the client and server are able",
    "start": "797440",
    "end": "802800"
  },
  {
    "text": "to secure their grpc traffic uh in a bit i'll actually so i'll show",
    "start": "802800",
    "end": "808720"
  },
  {
    "text": "an actual implementation of this in google cloud",
    "start": "808720",
    "end": "814279"
  },
  {
    "start": "813000",
    "end": "1010000"
  },
  {
    "text": "uh some more technical details for those of you who are kind of familiar with xds and specifically how xds works in grpc",
    "start": "814720",
    "end": "822800"
  },
  {
    "text": "i'm assuming some familiarity with the existing xds flow in proximity or pc",
    "start": "822800",
    "end": "829360"
  },
  {
    "text": "i have three columns here one for the client on the left",
    "start": "829360",
    "end": "834560"
  },
  {
    "text": "one for the control plane in the middle and one for the server on the right",
    "start": "834560",
    "end": "840000"
  },
  {
    "text": "this shows the configuration steps from the control plane uh here the client is trying to reach",
    "start": "840000",
    "end": "846880"
  },
  {
    "text": "uh something like a payment dot service and uses xts colon slash",
    "start": "846880",
    "end": "853680"
  },
  {
    "text": "slash payment.service as the target string so xts resolves it what i mean by xds is",
    "start": "853680",
    "end": "860560"
  },
  {
    "text": "the xts code in grpc plus the xds control plane collectively they resolve",
    "start": "860560",
    "end": "865760"
  },
  {
    "text": "it and the client receives cds and eds these are the xds uh",
    "start": "865760",
    "end": "871680"
  },
  {
    "text": "messages uh to help the client set up connections to the backend instances of the service",
    "start": "871680",
    "end": "878320"
  },
  {
    "text": "uh one instance uh here here is here with the ip address 10.3.9",
    "start": "878320",
    "end": "885360"
  },
  {
    "text": "and a certificate id of mesh one slash cluster to slash srv3",
    "start": "885360",
    "end": "893199"
  },
  {
    "text": "uh i'll i'll talk about spf the spf colon prefix later",
    "start": "893279",
    "end": "899839"
  },
  {
    "text": "but over here on the right uh the server in the red box receives lds which is a",
    "start": "899920",
    "end": "905600"
  },
  {
    "text": "listener discovery service message to help it set up the listener socket",
    "start": "905600",
    "end": "910639"
  },
  {
    "text": "for the service in this instance the back end with ip",
    "start": "910639",
    "end": "917240"
  },
  {
    "text": "10.3.19.7 receives the config to set up a tls listener",
    "start": "917240",
    "end": "922399"
  },
  {
    "text": "and to bind it to the port 8000 when the server receives uh",
    "start": "922399",
    "end": "929279"
  },
  {
    "text": "a client connection the server applies what is called a filter chain from xts",
    "start": "929279",
    "end": "935680"
  },
  {
    "text": "and that filter chain contains the required tls configuration for the transport socket now the idea of",
    "start": "935680",
    "end": "940959"
  },
  {
    "text": "interchange is you can actually have different security configuration for different clients so the filter chain has a filter chain",
    "start": "940959",
    "end": "947759"
  },
  {
    "text": "matcher and you know based on the matching that is happening the server is able to actually use",
    "start": "947759",
    "end": "953839"
  },
  {
    "text": "different security configuration for let's say different ip addresses different networks and all that stuff",
    "start": "953839",
    "end": "959759"
  },
  {
    "text": "so the filter chain has config to use the certificate with the cert id",
    "start": "959759",
    "end": "968759"
  },
  {
    "text": "of mesh one slash cluster two slash srv3 this is just a made up id",
    "start": "970000",
    "end": "976720"
  },
  {
    "text": "uh for the current client connection uh so as you see both the client and the",
    "start": "976720",
    "end": "981920"
  },
  {
    "text": "server receive the required configuration to set up mtrs connections",
    "start": "981920",
    "end": "988000"
  },
  {
    "text": "uh between them uh so this configuration enclosed things like the certificate and keys",
    "start": "988000",
    "end": "994720"
  },
  {
    "text": "whether it should be a tls mode or an mpls mode connection and server authorization uh information",
    "start": "994720",
    "end": "1003199"
  },
  {
    "text": "again like i said earlier i'll talk about several authorization in a bit",
    "start": "1003199",
    "end": "1009399"
  },
  {
    "start": "1010000",
    "end": "1078000"
  },
  {
    "text": "so the design and implementation details of the work we have done uh is as follows uh",
    "start": "1011839",
    "end": "1018000"
  },
  {
    "text": "we created a grfc uh a grfc is an rfc",
    "start": "1018000",
    "end": "1024400"
  },
  {
    "text": "or a spec in the grpc ecosystem to describe the design and i have provided the link here",
    "start": "1024400",
    "end": "1031600"
  },
  {
    "text": "the grc covers the programming api which i'll cover in a bit uh the implementation of the security",
    "start": "1031600",
    "end": "1038240"
  },
  {
    "text": "flow and something new what is that something new",
    "start": "1038240",
    "end": "1044640"
  },
  {
    "text": "that's something new is the certificate provider plug-in framework which is used by grpc to get the",
    "start": "1044640",
    "end": "1051600"
  },
  {
    "text": "required certificates and keys uh the stuff described in the grfc is",
    "start": "1051600",
    "end": "1057840"
  },
  {
    "text": "implemented in uh grpc go c plus plus java and python",
    "start": "1057840",
    "end": "1064799"
  },
  {
    "text": "so you can try this uh to use a psm security uh because we had",
    "start": "1064799",
    "end": "1070640"
  },
  {
    "text": "a public preview back in may for all four languages and i'll talk about that",
    "start": "1070640",
    "end": "1076559"
  },
  {
    "text": "later uh now some more details about the",
    "start": "1076559",
    "end": "1082559"
  },
  {
    "start": "1078000",
    "end": "1204000"
  },
  {
    "text": "certificate provider plugin uh so grpc was the first",
    "start": "1082559",
    "end": "1088000"
  },
  {
    "text": "uh one to propose the certificate provider plugin framework in the xts ecosystem",
    "start": "1088000",
    "end": "1094960"
  },
  {
    "text": "this is an extensible framework that enables various including custom mechanisms to",
    "start": "1094960",
    "end": "1101840"
  },
  {
    "text": "get certificates these extensions or plugins are loaded",
    "start": "1101840",
    "end": "1107280"
  },
  {
    "text": "and configured locally using a bootstrap file",
    "start": "1107280",
    "end": "1112320"
  },
  {
    "text": "the xts control plane just references an instance of a configured plugin so as an",
    "start": "1112320",
    "end": "1117679"
  },
  {
    "text": "example the xts control plane might reference an instance",
    "start": "1117679",
    "end": "1122720"
  },
  {
    "text": "called xyz which is looked up in the bootstrap file uh grpc expands xyz uh",
    "start": "1122720",
    "end": "1130160"
  },
  {
    "text": "to a plugin name and configuration and if necessary it will load the plugin",
    "start": "1130160",
    "end": "1137200"
  },
  {
    "text": "uh it will use these instantiated plugin to get certificates and keys",
    "start": "1137200",
    "end": "1142880"
  },
  {
    "text": "for a channel or a server and jrpc also makes sure",
    "start": "1142880",
    "end": "1148880"
  },
  {
    "text": "that it has set up a pipeline to properly uh you know a",
    "start": "1148880",
    "end": "1154320"
  },
  {
    "text": "pipeline is properly set up between the plug-in and the consuming channel or server",
    "start": "1154320",
    "end": "1159840"
  },
  {
    "text": "the pipeline is a dynamic which means when certificates and keys are updated",
    "start": "1159840",
    "end": "1166400"
  },
  {
    "text": "the updates are immediately reflected in the channel or the server now this simplified interface allows",
    "start": "1166400",
    "end": "1173760"
  },
  {
    "text": "both envoy and grpc to use this interface and this is made possible",
    "start": "1173760",
    "end": "1179120"
  },
  {
    "text": "because of the interaction provided between the implementation and the xds protocol it",
    "start": "1179120",
    "end": "1186480"
  },
  {
    "text": "uh abstracts out the certificate provider implementation in grpc",
    "start": "1186480",
    "end": "1192960"
  },
  {
    "text": "uh we currently have a plugin called file watcher that",
    "start": "1192960",
    "end": "1198240"
  },
  {
    "text": "watches certificates and keys in the file system",
    "start": "1198240",
    "end": "1202880"
  },
  {
    "start": "1204000",
    "end": "1271000"
  },
  {
    "text": "uh some more uh stuff uh this is a pictorial uh representation of the certificate",
    "start": "1204960",
    "end": "1211039"
  },
  {
    "text": "provider plugin framework and how it works uh a channel in the blue box on the left",
    "start": "1211039",
    "end": "1216640"
  },
  {
    "text": "is configured by xds credential the same thing on the server side",
    "start": "1216640",
    "end": "1222559"
  },
  {
    "text": "uh a server connection which is shown in in the yellow box",
    "start": "1222559",
    "end": "1228320"
  },
  {
    "text": "is configured using nxts credential the xts credential sets up a certificate",
    "start": "1228320",
    "end": "1235840"
  },
  {
    "text": "provider and an advanced tls handshaker it sets up a pipeline for the",
    "start": "1235840",
    "end": "1241760"
  },
  {
    "text": "certificate provider to provide dynamic certificate updates to the tls handshaker",
    "start": "1241760",
    "end": "1248000"
  },
  {
    "text": "so the certificate provider uh continuously get periodic updates and",
    "start": "1248000",
    "end": "1253120"
  },
  {
    "text": "certificate updates and gives it to the handshaker the advanced stairs handshaker is",
    "start": "1253120",
    "end": "1259360"
  },
  {
    "text": "responsible for uh channel or the server connections tiers",
    "start": "1259360",
    "end": "1265520"
  },
  {
    "text": "handshake based on the the certificates provided by the certificate provider",
    "start": "1265520",
    "end": "1272080"
  },
  {
    "start": "1271000",
    "end": "1334000"
  },
  {
    "text": "now as you have seen we kind of depended on",
    "start": "1272559",
    "end": "1278080"
  },
  {
    "text": "external components to make this whole thing work so what exactly is the value add of the grpc library right what's the",
    "start": "1278080",
    "end": "1285280"
  },
  {
    "text": "functionality added by grpc so within grpc library we have a new",
    "start": "1285280",
    "end": "1290320"
  },
  {
    "text": "programming api we have a new xts implementation of what",
    "start": "1290320",
    "end": "1295679"
  },
  {
    "text": "is called a transport socket config in grpc we also implemented the",
    "start": "1295679",
    "end": "1301679"
  },
  {
    "text": "certificate provider plugin framework and how it is indirectly referenced",
    "start": "1301679",
    "end": "1306799"
  },
  {
    "text": "via xds in grpc we also extended the bootstrap file schema",
    "start": "1306799",
    "end": "1314480"
  },
  {
    "text": "to add fields required by the certificate provider plugin framework and",
    "start": "1314480",
    "end": "1320640"
  },
  {
    "text": "of course as part of that we also implemented the file watcher certificate provider plugin",
    "start": "1320640",
    "end": "1326320"
  },
  {
    "text": "which supports dynamic certificate and key updates of file-based certificates and keys",
    "start": "1326320",
    "end": "1334720"
  },
  {
    "start": "1334000",
    "end": "1452000"
  },
  {
    "text": "uh now let me talk briefly about spacey i had mentioned the pc earlier for service",
    "start": "1335919",
    "end": "1342000"
  },
  {
    "text": "identities now this is not really a grpc thing but this is a new spec or standard for",
    "start": "1342000",
    "end": "1348799"
  },
  {
    "text": "identities in a service mesh so a species service identity is",
    "start": "1348799",
    "end": "1354000"
  },
  {
    "text": "assigned to a microservice and encoded in the services certificate and the",
    "start": "1354000",
    "end": "1359200"
  },
  {
    "text": "service uses the certificate both on its outbound uh which is on the client side",
    "start": "1359200",
    "end": "1365440"
  },
  {
    "text": "and the inbound or the server side uh a sample's pc implementation in google",
    "start": "1365440",
    "end": "1372640"
  },
  {
    "text": "cloud encodes a trust domain an identity within the trust domain",
    "start": "1372640",
    "end": "1380240"
  },
  {
    "text": "the trust domain in is an identifier for the trust infrastructure and in google cloud it is",
    "start": "1380320",
    "end": "1386880"
  },
  {
    "text": "typically the google cloud project id because the trust infrastructure is associated with the project the google",
    "start": "1386880",
    "end": "1393760"
  },
  {
    "text": "cloud project and the the rest the remaining part of this pc identity is uh is a unique",
    "start": "1393760",
    "end": "1401760"
  },
  {
    "text": "identity for the service and in our implementation with gke it typically is",
    "start": "1401760",
    "end": "1407520"
  },
  {
    "text": "the kubernetes uh namespace name and um the service account the kubernetes",
    "start": "1407520",
    "end": "1413120"
  },
  {
    "text": "service account for that uh particular part",
    "start": "1413120",
    "end": "1417840"
  },
  {
    "text": "so with specie identities it enables server authorization and",
    "start": "1418159",
    "end": "1425440"
  },
  {
    "text": "server authorization replaces the traditional hostname check",
    "start": "1425440",
    "end": "1430960"
  },
  {
    "text": "that happens in https a specie auditor is also enable a client",
    "start": "1430960",
    "end": "1437760"
  },
  {
    "text": "authorization or rbac using these pc identities now the client authorization is not",
    "start": "1437760",
    "end": "1445600"
  },
  {
    "text": "really part of you know psm security uh it's a another feature that is coming soon",
    "start": "1445600",
    "end": "1451919"
  },
  {
    "text": "so how does one use this stuff uh for example in java",
    "start": "1453919",
    "end": "1460320"
  },
  {
    "text": "the example in this slide is from the grfc you can look it up and see",
    "start": "1460320",
    "end": "1465760"
  },
  {
    "text": "this example there the usage in c plus plus python and go is similar",
    "start": "1465760",
    "end": "1473039"
  },
  {
    "text": "there is an xds channel credential that you supply to your channel builder and this credential tells grpc",
    "start": "1473039",
    "end": "1480159"
  },
  {
    "text": "to use xds supplied security configuration there is a similar uh server credential",
    "start": "1480159",
    "end": "1486320"
  },
  {
    "text": "on the server side that instructs grpc to use xda supplied security configuration for the server",
    "start": "1486320",
    "end": "1493840"
  },
  {
    "text": "uh now wonder what the insecure channel credentials are used inside the create method",
    "start": "1493840",
    "end": "1501360"
  },
  {
    "text": "here uh this is a fallback credential i'll talk about that in a bit",
    "start": "1501360",
    "end": "1508080"
  },
  {
    "text": "now xts channel credential is a way for a caller to obtain",
    "start": "1508960",
    "end": "1515440"
  },
  {
    "text": "the use of xts security configuration note that a caller can use",
    "start": "1515440",
    "end": "1520799"
  },
  {
    "text": "a different credential for example tls credential with a channel in which case",
    "start": "1520799",
    "end": "1526559"
  },
  {
    "text": "the xts supplied security configuration is ignored even if uh",
    "start": "1526559",
    "end": "1532159"
  },
  {
    "text": "for routing load balancing etc the x-rays configuration is used now in this example",
    "start": "1532159",
    "end": "1538320"
  },
  {
    "text": "uh because of the xds current scheme uh used in the target string xds code",
    "start": "1538320",
    "end": "1545039"
  },
  {
    "text": "payment.service the xts name resolver and eventually the xts load balancing routing config is",
    "start": "1545039",
    "end": "1551679"
  },
  {
    "text": "used but the security configuration from xds is not used",
    "start": "1551679",
    "end": "1557360"
  },
  {
    "text": "uh something about these notion of fallback credential uh",
    "start": "1557360",
    "end": "1562400"
  },
  {
    "text": "so an xts credential also takes something called a fallback credential which kicks in if xds doesn't supply a",
    "start": "1562400",
    "end": "1570400"
  },
  {
    "text": "security configuration so instead of choosing to treat this as a plain text or insecure communication a",
    "start": "1570400",
    "end": "1576960"
  },
  {
    "text": "caller can tell grpc to use the fallback tls credential as i have shown here",
    "start": "1576960",
    "end": "1584840"
  },
  {
    "start": "1584000",
    "end": "1641000"
  },
  {
    "text": "so where can you deploy and test this stuff",
    "start": "1585840",
    "end": "1591760"
  },
  {
    "text": "like i mentioned earlier you can get a test account on google cloud and use the traffic director user guide",
    "start": "1591760",
    "end": "1599120"
  },
  {
    "text": "uh with the section that talks about proxima service mesh security and try this out",
    "start": "1599120",
    "end": "1606080"
  },
  {
    "text": "the main elements of this uh this offering is traffic director the xcs control plane",
    "start": "1606080",
    "end": "1613200"
  },
  {
    "text": "something called google cas which is certification authority service",
    "start": "1613200",
    "end": "1619440"
  },
  {
    "text": "then of course gke which is the compute engine or the compute infrastructure you have",
    "start": "1619440",
    "end": "1625760"
  },
  {
    "text": "to use the user guide will help you understand the flow",
    "start": "1625760",
    "end": "1631200"
  },
  {
    "text": "and you can act there is a there are set up instructions you can follow",
    "start": "1631200",
    "end": "1637520"
  },
  {
    "text": "so let's look at the previous diagram which i have",
    "start": "1637520",
    "end": "1643360"
  },
  {
    "start": "1641000",
    "end": "1726000"
  },
  {
    "text": "modified to show the google cloud implementation using traffic director",
    "start": "1643360",
    "end": "1650880"
  },
  {
    "text": "we have the grpc client and the server traffic director is the xts control",
    "start": "1652240",
    "end": "1657440"
  },
  {
    "text": "plane supplying xcs configurations to the client and the server",
    "start": "1657440",
    "end": "1663039"
  },
  {
    "text": "i have the file watcher plugin inside the grpc certificate provider framework",
    "start": "1663039",
    "end": "1668960"
  },
  {
    "text": "that makes use of the something called gke mesh certificates",
    "start": "1668960",
    "end": "1674640"
  },
  {
    "text": "gke mesh certificates use gke workload identities and use specie encoding of",
    "start": "1674640",
    "end": "1680399"
  },
  {
    "text": "those identities and gke integrates with google cas",
    "start": "1680399",
    "end": "1686799"
  },
  {
    "text": "domain certificates and to make them available to the grpc workloads",
    "start": "1686799",
    "end": "1692320"
  },
  {
    "text": "now the four bullet points at the bottom right describe the layers bottom up so",
    "start": "1692320",
    "end": "1697919"
  },
  {
    "text": "at the bottom i have the cas a certificate infrastructure to main certificates",
    "start": "1697919",
    "end": "1703360"
  },
  {
    "text": "and then i have the layer above that which is the gke to cas integration",
    "start": "1703360",
    "end": "1708880"
  },
  {
    "text": "then about that i have gke supplying these certificates to the parts where the grpc workloads are running",
    "start": "1708880",
    "end": "1716240"
  },
  {
    "text": "and at the top i have the traffic director as the service mesh control plane",
    "start": "1716240",
    "end": "1721679"
  },
  {
    "text": "which is orchestrating the whole thing",
    "start": "1721679",
    "end": "1725840"
  },
  {
    "start": "1726000",
    "end": "1845000"
  },
  {
    "text": "uh so that was about psm security um",
    "start": "1727279",
    "end": "1733440"
  },
  {
    "text": "so i'll talk about some road map items in this area",
    "start": "1733440",
    "end": "1738720"
  },
  {
    "text": "i i did talk about something called xds authorization or rbac",
    "start": "1738720",
    "end": "1744080"
  },
  {
    "text": "that is described in a grfc a41 i have provided a link here",
    "start": "1744080",
    "end": "1750159"
  },
  {
    "text": "and there is something new uh called a specie federated trust bundle uh for",
    "start": "1750159",
    "end": "1755440"
  },
  {
    "text": "proper federation or uh as per the species spec in this what happens is there is a map",
    "start": "1755440",
    "end": "1762960"
  },
  {
    "text": "of a trust domain to root certificate so that you don't use the same root certificate to validate all the",
    "start": "1762960",
    "end": "1769520"
  },
  {
    "text": "trust domains most probably will use something called a configurable certificate validator",
    "start": "1769520",
    "end": "1776080"
  },
  {
    "text": "which is an xts extension point to support this federation of trust domains",
    "start": "1776080",
    "end": "1782480"
  },
  {
    "text": "one more thing that uh that could be coming is uh more certificate",
    "start": "1782480",
    "end": "1787760"
  },
  {
    "text": "provider plugins uh based on user demand there's one more interesting thing uh",
    "start": "1787760",
    "end": "1794159"
  },
  {
    "text": "which is uh something called a handshaker service or secure service agent",
    "start": "1794159",
    "end": "1800880"
  },
  {
    "text": "where the tls handshake is offloaded to the agent and now the advantage of that is",
    "start": "1800880",
    "end": "1806799"
  },
  {
    "text": "these certificates and the private key are never shared with the user space application",
    "start": "1806799",
    "end": "1813360"
  },
  {
    "text": "so this kind of prevents exfiltration of certificates and keys because these are",
    "start": "1813360",
    "end": "1819679"
  },
  {
    "text": "minted by our certificate uh you know the certification authorities",
    "start": "1819679",
    "end": "1826559"
  },
  {
    "text": "another potential development is envoy adopting the certificate provider",
    "start": "1827360",
    "end": "1832399"
  },
  {
    "text": "plug-in architecture and this will facilitate uh deployment of",
    "start": "1832399",
    "end": "1838480"
  },
  {
    "text": "interoperable envoy and grpc workloads uh in the same service mesh",
    "start": "1838480",
    "end": "1844720"
  },
  {
    "start": "1845000",
    "end": "1884000"
  },
  {
    "text": "uh so this is my last slide uh basically has links to uh",
    "start": "1845919",
    "end": "1852000"
  },
  {
    "text": "various uh resources to get more information the five grfcs uh psm security java",
    "start": "1852000",
    "end": "1858159"
  },
  {
    "text": "channel server credentials and you know stuff like uh oddsy uh that i talked about then couple",
    "start": "1858159",
    "end": "1864880"
  },
  {
    "text": "of links to a google cloud blog for an intro this feature in the context of google cloud",
    "start": "1864880",
    "end": "1872480"
  },
  {
    "text": "and of course there is the traffic director user guide for traffic for security with proxies",
    "start": "1872480",
    "end": "1878880"
  },
  {
    "text": "service mesh using grpc so that was it and questions",
    "start": "1878880",
    "end": "1886880"
  },
  {
    "start": "1884000",
    "end": "2047000"
  },
  {
    "text": "okay so we've got just a couple of minutes",
    "start": "1886880",
    "end": "1893279"
  },
  {
    "text": "for for questions here maybe i'll uh throw a couple from online if that's right yeah um",
    "start": "1893279",
    "end": "1899360"
  },
  {
    "text": "there's uh i think maybe for some of the folks newer to grpc some questions about",
    "start": "1899360",
    "end": "1905679"
  },
  {
    "text": "how does the the effort here um is it",
    "start": "1905679",
    "end": "1911919"
  },
  {
    "text": "something that can be abstracted to other environments or is it just specifically for grpc any support for",
    "start": "1911919",
    "end": "1917200"
  },
  {
    "text": "http 2 things like that in the mesh side of things i mean as far as i can see it is",
    "start": "1917200",
    "end": "1922320"
  },
  {
    "text": "specifically for grpc in terms of app starting it out or kind of",
    "start": "1922320",
    "end": "1927600"
  },
  {
    "text": "reusing it for other frameworks you could probably use ideas like using xds to orchestrate stuff like that but",
    "start": "1927600",
    "end": "1934559"
  },
  {
    "text": "the actual design and the implementation we have done is kind of very grpc specific yeah it's really about how grpc",
    "start": "1934559",
    "end": "1940960"
  },
  {
    "text": "is driving xds and those components right right and it's specifically about you know if you look at the",
    "start": "1940960",
    "end": "1946640"
  },
  {
    "text": "grpc channel and server architecture is kind of very tightly integrated with that great thank you",
    "start": "1946640",
    "end": "1952799"
  },
  {
    "text": "anyone in the room with a question yeah okay",
    "start": "1952799",
    "end": "1957039"
  },
  {
    "text": "thanks uh is this compatible with like if you build an application with jrpc and it's not part of a it's not deployed",
    "start": "1957840",
    "end": "1965279"
  },
  {
    "text": "in a mesh can this connect to the mesh without having to deploy proxy then",
    "start": "1965279",
    "end": "1971120"
  },
  {
    "text": "uh so when you say it's not deployed in a mesh uh you're saying there is no uh control plane okay the control plan",
    "start": "1971120",
    "end": "1977360"
  },
  {
    "text": "exists elsewhere",
    "start": "1977360",
    "end": "1980320"
  },
  {
    "text": "already oh yeah uh that i can't think of a way to make it work because grpc",
    "start": "1984960",
    "end": "1992000"
  },
  {
    "text": "needs the control plane uh to orchestrate many of these things",
    "start": "1992000",
    "end": "1997519"
  },
  {
    "text": "yes yeah great so maybe one more question",
    "start": "1998799",
    "end": "2004000"
  },
  {
    "text": "[Music]",
    "start": "2005860",
    "end": "2008940"
  },
  {
    "text": "i mean i talked about google cloud implementation because that is something that has been tested and works and all",
    "start": "2017200",
    "end": "2022720"
  },
  {
    "text": "otherwise everything we have done is uh conforming to the xds protocol without",
    "start": "2022720",
    "end": "2029039"
  },
  {
    "text": "any google specific extensions or google specific implementation so yeah you can you can take a a control plane",
    "start": "2029039",
    "end": "2036640"
  },
  {
    "text": "uh i well like istio and r and i can and try this out",
    "start": "2036640",
    "end": "2041760"
  },
  {
    "text": "fantastic sanji thank you very much okay thank you [Applause]",
    "start": "2041760",
    "end": "2049150"
  }
]