[
  {
    "text": "all right we're going to get started",
    "start": "199",
    "end": "2159"
  },
  {
    "text": "Yeah we actually can start on time this",
    "start": "2159",
    "end": "4720"
  },
  {
    "text": "time so who is interested in AI these",
    "start": "4720",
    "end": "9040"
  },
  {
    "text": "days all right many of you right so our",
    "start": "9040",
    "end": "12040"
  },
  {
    "text": "next speaker Angelas and Andrew is from",
    "start": "12040",
    "end": "15800"
  },
  {
    "text": "Intel please join me welcome them to",
    "start": "15800",
    "end": "18840"
  },
  {
    "text": "talk about explore explor pism for AI",
    "start": "18840",
    "end": "22400"
  },
  {
    "text": "workloads with wasm and open",
    "start": "22400",
    "end": "27320"
  },
  {
    "text": "MP thank you",
    "start": "27439",
    "end": "31160"
  },
  {
    "text": "hi my name is Andrew um I'm a software",
    "start": "31160",
    "end": "33760"
  },
  {
    "text": "engineer at Intel I'm here with uh eron",
    "start": "33760",
    "end": "36320"
  },
  {
    "text": "Dorney is not together with us but he",
    "start": "36320",
    "end": "38559"
  },
  {
    "text": "also worked on this project and I'm here",
    "start": "38559",
    "end": "40320"
  },
  {
    "text": "with atas also a software engineer at",
    "start": "40320",
    "end": "43280"
  },
  {
    "text": "tto yep so today we're going to give you",
    "start": "43280",
    "end": "45399"
  },
  {
    "text": "a little bit of an overview of some of",
    "start": "45399",
    "end": "47120"
  },
  {
    "text": "the kinds of things that Intel does when",
    "start": "47120",
    "end": "48840"
  },
  {
    "text": "it comes to web assembly we're trying to",
    "start": "48840",
    "end": "50640"
  },
  {
    "text": "optimize uh web assembly for our",
    "start": "50640",
    "end": "54039"
  },
  {
    "text": "Hardware um and today we're going to be",
    "start": "54039",
    "end": "56160"
  },
  {
    "text": "talking about open MP so that's a",
    "start": "56160",
    "end": "57840"
  },
  {
    "text": "parallel framework uh you can you can",
    "start": "57840",
    "end": "60559"
  },
  {
    "text": "run parallel programs um we're we're",
    "start": "60559",
    "end": "62480"
  },
  {
    "text": "going to try to do that in web assembly",
    "start": "62480",
    "end": "65198"
  },
  {
    "text": "but why um one of the reasons is openmp",
    "start": "65199",
    "end": "68320"
  },
  {
    "text": "has a long history um it's a it's a",
    "start": "68320",
    "end": "70920"
  },
  {
    "text": "well-known framework it's quite complex",
    "start": "70920",
    "end": "73799"
  },
  {
    "text": "um we do know that there's Edge",
    "start": "73799",
    "end": "75680"
  },
  {
    "text": "Computing use cases that do have a need",
    "start": "75680",
    "end": "77960"
  },
  {
    "text": "for parallel execution open andp could",
    "start": "77960",
    "end": "80360"
  },
  {
    "text": "fill that and it also sort of uh tests",
    "start": "80360",
    "end": "83280"
  },
  {
    "text": "web assembly as a as a suitable Target",
    "start": "83280",
    "end": "85759"
  },
  {
    "text": "for par parallel programs also it's a",
    "start": "85759",
    "end": "89200"
  },
  {
    "text": "challenge so let's see um let's talk",
    "start": "89200",
    "end": "92759"
  },
  {
    "text": "about threads in web assembly we had",
    "start": "92759",
    "end": "94479"
  },
  {
    "text": "some comments earlier about",
    "start": "94479",
    "end": "95840"
  },
  {
    "text": "multi-threading in web assembly and and",
    "start": "95840",
    "end": "97960"
  },
  {
    "text": "it is a challenge right it's still uh",
    "start": "97960",
    "end": "100560"
  },
  {
    "text": "early days when it comes to threads in",
    "start": "100560",
    "end": "103000"
  },
  {
    "text": "web assembly and what you have to do",
    "start": "103000",
    "end": "104399"
  },
  {
    "text": "today is if you take a some C code that",
    "start": "104399",
    "end": "107880"
  },
  {
    "text": "that uses P threads um you'd have to",
    "start": "107880",
    "end": "110520"
  },
  {
    "text": "either compile it with him scripton with",
    "start": "110520",
    "end": "112159"
  },
  {
    "text": "a certain Target you know generate your",
    "start": "112159",
    "end": "114280"
  },
  {
    "text": "web assembly file run it in a browser or",
    "start": "114280",
    "end": "117000"
  },
  {
    "text": "you could you know generate a web",
    "start": "117000",
    "end": "118600"
  },
  {
    "text": "assembly file with W SD k um different",
    "start": "118600",
    "end": "121759"
  },
  {
    "text": "Target and then run it in a standalone",
    "start": "121759",
    "end": "123320"
  },
  {
    "text": "engine like WM time or whammer or",
    "start": "123320",
    "end": "125360"
  },
  {
    "text": "something like that um that's that's the",
    "start": "125360",
    "end": "128160"
  },
  {
    "text": "path that we'll actually be using today",
    "start": "128160",
    "end": "129679"
  },
  {
    "text": "is the is the second path through wdk",
    "start": "129679",
    "end": "131840"
  },
  {
    "text": "but everything we're talking about here",
    "start": "131840",
    "end": "133360"
  },
  {
    "text": "today also applies to ins scripton as",
    "start": "133360",
    "end": "135560"
  },
  {
    "text": "well I should note that uh the story for",
    "start": "135560",
    "end": "139120"
  },
  {
    "text": "Threads and web should get better in the",
    "start": "139120",
    "end": "140920"
  },
  {
    "text": "future the post MVP threads proposal",
    "start": "140920",
    "end": "143640"
  },
  {
    "text": "that we've been working on is now phase",
    "start": "143640",
    "end": "145239"
  },
  {
    "text": "one in the core uh core web assembly",
    "start": "145239",
    "end": "148680"
  },
  {
    "text": "specification so",
    "start": "148680",
    "end": "150480"
  },
  {
    "text": "more to come there but this is using",
    "start": "150480",
    "end": "152560"
  },
  {
    "text": "wazzy threads which is a proposal we did",
    "start": "152560",
    "end": "154840"
  },
  {
    "text": "last year um you want to talk about open",
    "start": "154840",
    "end": "158120"
  },
  {
    "text": "MP yeah so yeah open MP has as we heard",
    "start": "158120",
    "end": "162800"
  },
  {
    "text": "very long history in in parallel",
    "start": "162800",
    "end": "164879"
  },
  {
    "text": "programming in specifically in HPC is",
    "start": "164879",
    "end": "167840"
  },
  {
    "text": "very widely used there and you see what",
    "start": "167840",
    "end": "170360"
  },
  {
    "text": "is actually behind it it's a fork joint",
    "start": "170360",
    "end": "172879"
  },
  {
    "text": "model uh you have a piece of cod uh",
    "start": "172879",
    "end": "176560"
  },
  {
    "text": "where through some pragma statement you",
    "start": "176560",
    "end": "178519"
  },
  {
    "text": "can Fork a group of threads working in",
    "start": "178519",
    "end": "181239"
  },
  {
    "text": "parallel on certain problem and then",
    "start": "181239",
    "end": "183319"
  },
  {
    "text": "when they're finished you join them uh",
    "start": "183319",
    "end": "185519"
  },
  {
    "text": "they they get synchronized and you get a",
    "start": "185519",
    "end": "187599"
  },
  {
    "text": "result um they are us using a shared",
    "start": "187599",
    "end": "190920"
  },
  {
    "text": "memory architecture basically on the",
    "start": "190920",
    "end": "193360"
  },
  {
    "text": "same note it's really on on on the same",
    "start": "193360",
    "end": "196560"
  },
  {
    "text": "note the whole polarization we don't",
    "start": "196560",
    "end": "198680"
  },
  {
    "text": "speak about distributed uh multiple",
    "start": "198680",
    "end": "201720"
  },
  {
    "text": "nodes next slide uh yeah so in in terms",
    "start": "201720",
    "end": "205680"
  },
  {
    "text": "of open MP it's a framework basic scpt",
    "start": "205680",
    "end": "208519"
  },
  {
    "text": "provided by a lot of the compilers",
    "start": "208519",
    "end": "210480"
  },
  {
    "text": "already natively if you think about",
    "start": "210480",
    "end": "212920"
  },
  {
    "text": "clang or or GCC those are compilers",
    "start": "212920",
    "end": "216680"
  },
  {
    "text": "which supported just by adding a flag",
    "start": "216680",
    "end": "219159"
  },
  {
    "text": "when compiling yourr code and uh yeah so",
    "start": "219159",
    "end": "222680"
  },
  {
    "text": "you have a bunch of features uh",
    "start": "222680",
    "end": "225319"
  },
  {
    "text": "basically the main thing is a statement",
    "start": "225319",
    "end": "228439"
  },
  {
    "text": "called Paro just to spawn to to Fork",
    "start": "228439",
    "end": "231159"
  },
  {
    "text": "those threats then you can uh control",
    "start": "231159",
    "end": "234000"
  },
  {
    "text": "how to share the work between them um",
    "start": "234000",
    "end": "236720"
  },
  {
    "text": "and you have some Primitives to do",
    "start": "236720",
    "end": "238680"
  },
  {
    "text": "synchronization between the threats um",
    "start": "238680",
    "end": "241519"
  },
  {
    "text": "barriers and locks and so on but also",
    "start": "241519",
    "end": "244480"
  },
  {
    "text": "you have very Advanced functionalities",
    "start": "244480",
    "end": "246799"
  },
  {
    "text": "to do more advanced math uh which is",
    "start": "246799",
    "end": "249920"
  },
  {
    "text": "nice for the machines what we have today",
    "start": "249920",
    "end": "252239"
  },
  {
    "text": "like SD instructions and recently there",
    "start": "252239",
    "end": "255480"
  },
  {
    "text": "is also support for device",
    "start": "255480",
    "end": "258720"
  },
  {
    "text": "offloading and yeah that that's uh",
    "start": "258720",
    "end": "261560"
  },
  {
    "text": "displayed on the right it's quite simple",
    "start": "261560",
    "end": "263479"
  },
  {
    "text": "actually to provise code with that",
    "start": "263479",
    "end": "265639"
  },
  {
    "text": "functionality you need a pragma",
    "start": "265639",
    "end": "267800"
  },
  {
    "text": "statement and you write pragma parallel",
    "start": "267800",
    "end": "270479"
  },
  {
    "text": "and this will for Threads and they will",
    "start": "270479",
    "end": "272639"
  },
  {
    "text": "work in parallel on the for Loop below",
    "start": "272639",
    "end": "275080"
  },
  {
    "text": "basically each thread will work on a",
    "start": "275080",
    "end": "277240"
  },
  {
    "text": "chunk of it what's this top language",
    "start": "277240",
    "end": "279479"
  },
  {
    "text": "here the top block the top one you see",
    "start": "279479",
    "end": "282199"
  },
  {
    "text": "is a fortron example so very similar um",
    "start": "282199",
    "end": "286560"
  },
  {
    "text": "right and uh in terms of architecture in",
    "start": "286560",
    "end": "289680"
  },
  {
    "text": "this work we looked on more on the big",
    "start": "289680",
    "end": "292520"
  },
  {
    "text": "block on the left at the open MP run",
    "start": "292520",
    "end": "295240"
  },
  {
    "text": "time so we which gives us the basic",
    "start": "295240",
    "end": "298000"
  },
  {
    "text": "functionality uh to do to run this kind",
    "start": "298000",
    "end": "300560"
  },
  {
    "text": "of parallel for join mechanism to do the",
    "start": "300560",
    "end": "304199"
  },
  {
    "text": "synchronization but we did not look into",
    "start": "304199",
    "end": "306400"
  },
  {
    "text": "the target um kind of functionality of",
    "start": "306400",
    "end": "309400"
  },
  {
    "text": "open MP which is responsible for the",
    "start": "309400",
    "end": "311400"
  },
  {
    "text": "offload we are very interested on",
    "start": "311400",
    "end": "313560"
  },
  {
    "text": "feedback if this will be of interest for",
    "start": "313560",
    "end": "318400"
  },
  {
    "text": "community so um if we're going to",
    "start": "318560",
    "end": "321840"
  },
  {
    "text": "compile the open MP runtime uh to web",
    "start": "321840",
    "end": "324560"
  },
  {
    "text": "assembly we need to start with lib",
    "start": "324560",
    "end": "327520"
  },
  {
    "text": ".a uh there's many part starts the uh",
    "start": "327520",
    "end": "330280"
  },
  {
    "text": "open MP the the offload targets we just",
    "start": "330280",
    "end": "332560"
  },
  {
    "text": "talked about we're not going to touch",
    "start": "332560",
    "end": "333880"
  },
  {
    "text": "that here we're going to just talk about",
    "start": "333880",
    "end": "335800"
  },
  {
    "text": "the the runtime itself limp there has",
    "start": "335800",
    "end": "338759"
  },
  {
    "text": "been previous work uh there's a a change",
    "start": "338759",
    "end": "341120"
  },
  {
    "text": "set for LM that sort of did some of this",
    "start": "341120",
    "end": "344680"
  },
  {
    "text": "uh but in in this project we actually",
    "start": "344680",
    "end": "346800"
  },
  {
    "text": "reworked that into a new PR which you",
    "start": "346800",
    "end": "349160"
  },
  {
    "text": "could see here and you know if if you",
    "start": "349160",
    "end": "351960"
  },
  {
    "text": "like this work please give it a thumbs",
    "start": "351960",
    "end": "353600"
  },
  {
    "text": "up so we can you know get that",
    "start": "353600",
    "end": "355759"
  },
  {
    "text": "reviewed um it's",
    "start": "355759",
    "end": "358479"
  },
  {
    "text": "not uh immediately trivial to compile",
    "start": "358479",
    "end": "362840"
  },
  {
    "text": "openmp to web assembly um as we tried to",
    "start": "362840",
    "end": "367560"
  },
  {
    "text": "do this we ran into many kinds of",
    "start": "367560",
    "end": "369160"
  },
  {
    "text": "problems compilation failures we got",
    "start": "369160",
    "end": "371120"
  },
  {
    "text": "claimed to crash and we even had",
    "start": "371120",
    "end": "373160"
  },
  {
    "text": "deadlocks in the code that we emitted",
    "start": "373160",
    "end": "375560"
  },
  {
    "text": "all of those are bad things so uh let me",
    "start": "375560",
    "end": "378639"
  },
  {
    "text": "talk through those problems real quick",
    "start": "378639",
    "end": "380120"
  },
  {
    "text": "one the first one is compilation",
    "start": "380120",
    "end": "381560"
  },
  {
    "text": "failures so some of the some of the apis",
    "start": "381560",
    "end": "384599"
  },
  {
    "text": "that openip uses aren't available in wzy",
    "start": "384599",
    "end": "387759"
  },
  {
    "text": "yet for example Wazi threads doesn't",
    "start": "387759",
    "end": "389680"
  },
  {
    "text": "expose P thread you know any any way to",
    "start": "389680",
    "end": "392039"
  },
  {
    "text": "exit a thread early right P thread exit",
    "start": "392039",
    "end": "394800"
  },
  {
    "text": "we don't know how to do that yet you",
    "start": "394800",
    "end": "396599"
  },
  {
    "text": "know that' have to be in a future",
    "start": "396599",
    "end": "398000"
  },
  {
    "text": "version of the spec so in order to solve",
    "start": "398000",
    "end": "400919"
  },
  {
    "text": "this we need to conditionally compile uh",
    "start": "400919",
    "end": "403840"
  },
  {
    "text": "different parts of openmp to say well in",
    "start": "403840",
    "end": "406560"
  },
  {
    "text": "this case we're not going to we're not",
    "start": "406560",
    "end": "407840"
  },
  {
    "text": "going to call that",
    "start": "407840",
    "end": "409520"
  },
  {
    "text": "API",
    "start": "409520",
    "end": "411599"
  },
  {
    "text": "um we found this in one of our examples",
    "start": "411599",
    "end": "414240"
  },
  {
    "text": "we use the uh the OM critical pragma and",
    "start": "414240",
    "end": "418080"
  },
  {
    "text": "we uh clang crashed on us and we thought",
    "start": "418080",
    "end": "420520"
  },
  {
    "text": "oh no what do we do now so looking into",
    "start": "420520",
    "end": "423680"
  },
  {
    "text": "a little bit further we figured out that",
    "start": "423680",
    "end": "425360"
  },
  {
    "text": "it's common symbols um are not",
    "start": "425360",
    "end": "428199"
  },
  {
    "text": "implemented for the web assembly back",
    "start": "428199",
    "end": "429520"
  },
  {
    "text": "end of lvm okay that's not as big of an",
    "start": "429520",
    "end": "432520"
  },
  {
    "text": "issue it's not a bug it's just",
    "start": "432520",
    "end": "434039"
  },
  {
    "text": "unimplemented and so what we did is",
    "start": "434039",
    "end": "436160"
  },
  {
    "text": "instead of using uh common symbols we",
    "start": "436160",
    "end": "438280"
  },
  {
    "text": "used external symbols it's just",
    "start": "438280",
    "end": "439840"
  },
  {
    "text": "different kinds of symbols inside the",
    "start": "439840",
    "end": "441800"
  },
  {
    "text": "lvm um you know elf kind of stuff if",
    "start": "441800",
    "end": "446800"
  },
  {
    "text": "you're interested in more details we can",
    "start": "446800",
    "end": "448720"
  },
  {
    "text": "talk more like",
    "start": "448720",
    "end": "450240"
  },
  {
    "text": "um and then you know we we finally",
    "start": "450240",
    "end": "452080"
  },
  {
    "text": "compiled Libo M.A we had it we like uh",
    "start": "452080",
    "end": "455080"
  },
  {
    "text": "compiled some examples we thought here",
    "start": "455080",
    "end": "456759"
  },
  {
    "text": "we go this is great we ran it in wasm",
    "start": "456759",
    "end": "458960"
  },
  {
    "text": "time and we deadlocked and so that's a",
    "start": "458960",
    "end": "462479"
  },
  {
    "text": "bummer um so what we had to do is",
    "start": "462479",
    "end": "464879"
  },
  {
    "text": "troubleshoot that deadlock and one of",
    "start": "464879",
    "end": "467120"
  },
  {
    "text": "the ways we did it is uh we we emitted",
    "start": "467120",
    "end": "470520"
  },
  {
    "text": "we as logs we emitted every weight and",
    "start": "470520",
    "end": "472759"
  },
  {
    "text": "notify pair uh in the in the code uh and",
    "start": "472759",
    "end": "476919"
  },
  {
    "text": "by examining the logs we figured out",
    "start": "476919",
    "end": "478639"
  },
  {
    "text": "which weights and notifiers weren't",
    "start": "478639",
    "end": "480159"
  },
  {
    "text": "matching up um we realized well we need",
    "start": "480159",
    "end": "483280"
  },
  {
    "text": "a stack Trace to figure out at which",
    "start": "483280",
    "end": "485639"
  },
  {
    "text": "point that's happening and so uh we",
    "start": "485639",
    "end": "488919"
  },
  {
    "text": "proposed wazzy back Trace it's a way of",
    "start": "488919",
    "end": "491280"
  },
  {
    "text": "sort of printing a a stack Trace at",
    "start": "491280",
    "end": "494000"
  },
  {
    "text": "whatever point you are in the web",
    "start": "494000",
    "end": "495520"
  },
  {
    "text": "assembly program um and eventually",
    "start": "495520",
    "end": "497759"
  },
  {
    "text": "figured out oh it's just the varargs so",
    "start": "497759",
    "end": "500720"
  },
  {
    "text": "the varag you know needed to be a PO",
    "start": "500720",
    "end": "503280"
  },
  {
    "text": "pointer to the varar list once we",
    "start": "503280",
    "end": "505639"
  },
  {
    "text": "figured out that out we got through",
    "start": "505639",
    "end": "507159"
  },
  {
    "text": "those",
    "start": "507159",
    "end": "507919"
  },
  {
    "text": "issues and",
    "start": "507919",
    "end": "510120"
  },
  {
    "text": "we could execute a simple program if you",
    "start": "510120",
    "end": "512479"
  },
  {
    "text": "take a look at this code on the right um",
    "start": "512479",
    "end": "515479"
  },
  {
    "text": "it just prints hello world from each of",
    "start": "515479",
    "end": "517518"
  },
  {
    "text": "the threads that uh openmp spawns and so",
    "start": "517519",
    "end": "521120"
  },
  {
    "text": "we're using all the special pragma stuff",
    "start": "521120",
    "end": "523800"
  },
  {
    "text": "but when we spawn it um you know open",
    "start": "523800",
    "end": "527399"
  },
  {
    "text": "and P takes it away runs these wazzy",
    "start": "527399",
    "end": "529440"
  },
  {
    "text": "threads all works great in W time now",
    "start": "529440",
    "end": "532399"
  },
  {
    "text": "I'm going to go over to our friend Aaron",
    "start": "532399",
    "end": "536640"
  },
  {
    "text": "and we're going to run his video right",
    "start": "536640",
    "end": "539360"
  },
  {
    "text": "so let me know open and p and w so here",
    "start": "539360",
    "end": "544399"
  },
  {
    "text": "we have an example C program that just",
    "start": "544399",
    "end": "547040"
  },
  {
    "text": "instantiate two square matrices of a",
    "start": "547040",
    "end": "549640"
  },
  {
    "text": "given size with random numbers and we",
    "start": "549640",
    "end": "552880"
  },
  {
    "text": "have some functions here set up to",
    "start": "552880",
    "end": "555240"
  },
  {
    "text": "multiply them so the first function is",
    "start": "555240",
    "end": "558079"
  },
  {
    "text": "just standard linear implementation of",
    "start": "558079",
    "end": "561320"
  },
  {
    "text": "matrix multiplication and we just uh",
    "start": "561320",
    "end": "564560"
  },
  {
    "text": "collect the time taken by the function",
    "start": "564560",
    "end": "567839"
  },
  {
    "text": "the second one the is using the open MP",
    "start": "567839",
    "end": "571920"
  },
  {
    "text": "parallel fragma notation so this is a",
    "start": "571920",
    "end": "575160"
  },
  {
    "text": "threaded",
    "start": "575160",
    "end": "577000"
  },
  {
    "text": "implementation so we are going to run",
    "start": "577000",
    "end": "580560"
  },
  {
    "text": "this program just with eight threads and",
    "start": "580560",
    "end": "583320"
  },
  {
    "text": "we're going to run it using a make file",
    "start": "583320",
    "end": "586240"
  },
  {
    "text": "that just generates a WM binary by",
    "start": "586240",
    "end": "589920"
  },
  {
    "text": "setting a WM 32 Wy threads targate and",
    "start": "589920",
    "end": "594079"
  },
  {
    "text": "linking in a customized version of open",
    "start": "594079",
    "end": "598519"
  },
  {
    "text": "MP",
    "start": "598519",
    "end": "600040"
  },
  {
    "text": "and so we're just going to run make and",
    "start": "600040",
    "end": "602200"
  },
  {
    "text": "it will then run the generated binary in",
    "start": "602200",
    "end": "605680"
  },
  {
    "text": "wasm",
    "start": "605680",
    "end": "608160"
  },
  {
    "text": "time I don't know",
    "start": "611880",
    "end": "615399"
  },
  {
    "text": "how and as you can see the linear",
    "start": "616079",
    "end": "618760"
  },
  {
    "text": "program took about 14",
    "start": "618760",
    "end": "622200"
  },
  {
    "text": "seconds whereas the parallel",
    "start": "624000",
    "end": "626279"
  },
  {
    "text": "implementation only took 1.7 now we",
    "start": "626279",
    "end": "629600"
  },
  {
    "text": "noticed with larger Matrix sizes that",
    "start": "629600",
    "end": "632279"
  },
  {
    "text": "there was a bit of a difference in",
    "start": "632279",
    "end": "636360"
  },
  {
    "text": "performance uh when compared with a",
    "start": "636360",
    "end": "639440"
  },
  {
    "text": "standard native openmp program we",
    "start": "639440",
    "end": "643880"
  },
  {
    "text": "noticed as well that the uh wasm uh",
    "start": "643880",
    "end": "647680"
  },
  {
    "text": "programs were quite cash bound and we",
    "start": "647680",
    "end": "650920"
  },
  {
    "text": "came to the conclusion that we were",
    "start": "650920",
    "end": "652720"
  },
  {
    "text": "missing out on certain cach",
    "start": "652720",
    "end": "655399"
  },
  {
    "text": "optimizations so we created another",
    "start": "655399",
    "end": "658040"
  },
  {
    "text": "function to transpose one of the",
    "start": "658040",
    "end": "662120"
  },
  {
    "text": "matrices to give us better cach",
    "start": "662120",
    "end": "665000"
  },
  {
    "text": "performance and we also used the openmp",
    "start": "665000",
    "end": "669000"
  },
  {
    "text": "tile notation to create some memory",
    "start": "669000",
    "end": "672639"
  },
  {
    "text": "blocks to also improve uh cachets so I'm",
    "start": "672639",
    "end": "677360"
  },
  {
    "text": "going to recompile with a larger Matrix",
    "start": "677360",
    "end": "684480"
  },
  {
    "text": "size",
    "start": "687959",
    "end": "690959"
  },
  {
    "text": "now in the initial run you can see that",
    "start": "691560",
    "end": "694440"
  },
  {
    "text": "only about 7 Seconds was shaved off of",
    "start": "694440",
    "end": "698639"
  },
  {
    "text": "the execution time whereas with a larger",
    "start": "698639",
    "end": "702200"
  },
  {
    "text": "Matrix",
    "start": "702200",
    "end": "703880"
  },
  {
    "text": "size uh the effect of cache performance",
    "start": "703880",
    "end": "708240"
  },
  {
    "text": "becomes more apparent so I'm just going",
    "start": "708240",
    "end": "710360"
  },
  {
    "text": "to disable the linear function because",
    "start": "710360",
    "end": "712600"
  },
  {
    "text": "that can take a few minutes to",
    "start": "712600",
    "end": "715880"
  },
  {
    "text": "run",
    "start": "717959",
    "end": "720959"
  },
  {
    "text": "and as you can see the parallel function",
    "start": "732240",
    "end": "734680"
  },
  {
    "text": "took about 17.6",
    "start": "734680",
    "end": "737800"
  },
  {
    "text": "seconds whereas the transposed blocked",
    "start": "737800",
    "end": "741920"
  },
  {
    "text": "function only took",
    "start": "741920",
    "end": "743920"
  },
  {
    "text": "7.5 so something we're also going to",
    "start": "743920",
    "end": "746959"
  },
  {
    "text": "take a quick look at is simd",
    "start": "746959",
    "end": "749760"
  },
  {
    "text": "vectorization",
    "start": "749760",
    "end": "751639"
  },
  {
    "text": "instructions uh so we're going to enable",
    "start": "751639",
    "end": "754279"
  },
  {
    "text": "those with some compiler flags and we're",
    "start": "754279",
    "end": "757839"
  },
  {
    "text": "going to decrease the Matrix size",
    "start": "757839",
    "end": "761760"
  },
  {
    "text": "again now even the linear function here",
    "start": "765800",
    "end": "769480"
  },
  {
    "text": "actually benefits from using simd",
    "start": "769480",
    "end": "772519"
  },
  {
    "text": "instructions um in the initial run it",
    "start": "772519",
    "end": "775480"
  },
  {
    "text": "takes about 14 seconds whereas with simd",
    "start": "775480",
    "end": "778000"
  },
  {
    "text": "enabled it's reduced to about nine uh",
    "start": "778000",
    "end": "781000"
  },
  {
    "text": "you can also see that the performance of",
    "start": "781000",
    "end": "783560"
  },
  {
    "text": "the two parallel functions is improved",
    "start": "783560",
    "end": "787199"
  },
  {
    "text": "now I'm going to disable the linear",
    "start": "787199",
    "end": "791319"
  },
  {
    "text": "function okay we're",
    "start": "795000",
    "end": "797639"
  },
  {
    "text": "back all right you want to take this",
    "start": "797639",
    "end": "800240"
  },
  {
    "text": "yeah so you saw the example for uh",
    "start": "800240",
    "end": "802880"
  },
  {
    "text": "matrix multiplication so it was quite",
    "start": "802880",
    "end": "805560"
  },
  {
    "text": "easy actually to get performance out of",
    "start": "805560",
    "end": "807959"
  },
  {
    "text": "Matrix multiply",
    "start": "807959",
    "end": "809279"
  },
  {
    "text": "we thought it's a good proxy to a lot of",
    "start": "809279",
    "end": "811760"
  },
  {
    "text": "workloads which have heavy compute like",
    "start": "811760",
    "end": "813839"
  },
  {
    "text": "in AI space if you think about uh",
    "start": "813839",
    "end": "816440"
  },
  {
    "text": "convolutional networks they're doing",
    "start": "816440",
    "end": "818480"
  },
  {
    "text": "multiplication with a convolutional",
    "start": "818480",
    "end": "820399"
  },
  {
    "text": "filter um so yeah and uh this was our",
    "start": "820399",
    "end": "825279"
  },
  {
    "text": "initial kind of look and uh so now some",
    "start": "825279",
    "end": "828920"
  },
  {
    "text": "some kind of analysis uh of of the",
    "start": "828920",
    "end": "832440"
  },
  {
    "text": "approach what we did so you see on the",
    "start": "832440",
    "end": "834720"
  },
  {
    "text": "left basically the tri uh matrix",
    "start": "834720",
    "end": "837920"
  },
  {
    "text": "multiplication three Net Loops uh like",
    "start": "837920",
    "end": "841040"
  },
  {
    "text": "we we know it from University or from",
    "start": "841040",
    "end": "843759"
  },
  {
    "text": "from from school um and then uh a a",
    "start": "843759",
    "end": "848120"
  },
  {
    "text": "parallel version with open m it's",
    "start": "848120",
    "end": "850360"
  },
  {
    "text": "doesn't change too much you still have",
    "start": "850360",
    "end": "852000"
  },
  {
    "text": "the three nested loops and you have this",
    "start": "852000",
    "end": "854199"
  },
  {
    "text": "kind of pragma statements pragma",
    "start": "854199",
    "end": "856600"
  },
  {
    "text": "parallel you can Define private",
    "start": "856600",
    "end": "858639"
  },
  {
    "text": "variables which uh tells basically to",
    "start": "858639",
    "end": "861480"
  },
  {
    "text": "the to the application those uh I JK",
    "start": "861480",
    "end": "865279"
  },
  {
    "text": "will be PR private for my threats and",
    "start": "865279",
    "end": "868360"
  },
  {
    "text": "then you have the shared ABC",
    "start": "868360",
    "end": "871519"
  },
  {
    "text": "variables collapse is another nice kind",
    "start": "871519",
    "end": "874279"
  },
  {
    "text": "of syntax from from open a where you can",
    "start": "874279",
    "end": "877399"
  },
  {
    "text": "collapse loops and split the work and uh",
    "start": "877399",
    "end": "880720"
  },
  {
    "text": "yeah the the main analysis here we",
    "start": "880720",
    "end": "882759"
  },
  {
    "text": "actually run into a memory bound problem",
    "start": "882759",
    "end": "885120"
  },
  {
    "text": "if we write the code like that and if we",
    "start": "885120",
    "end": "888399"
  },
  {
    "text": "do the analysis actually uh",
    "start": "888399",
    "end": "890600"
  },
  {
    "text": "mathematically about the complexity of",
    "start": "890600",
    "end": "892399"
  },
  {
    "text": "the code it's actually it should be a",
    "start": "892399",
    "end": "894399"
  },
  {
    "text": "compute bound problem so we are leaving",
    "start": "894399",
    "end": "897680"
  },
  {
    "text": "performance out on the",
    "start": "897680",
    "end": "900720"
  },
  {
    "text": "table and yeah so one way to deal with",
    "start": "900720",
    "end": "904120"
  },
  {
    "text": "that is actually uh look at the machine",
    "start": "904120",
    "end": "906880"
  },
  {
    "text": "architecture a little bit uh so actually",
    "start": "906880",
    "end": "909320"
  },
  {
    "text": "what happens is um you are not using the",
    "start": "909320",
    "end": "912440"
  },
  {
    "text": "cache correctly and one technique how",
    "start": "912440",
    "end": "915440"
  },
  {
    "text": "you can improve through that is blocking",
    "start": "915440",
    "end": "918320"
  },
  {
    "text": "and uh in in for Matrix multiply that",
    "start": "918320",
    "end": "921480"
  },
  {
    "text": "works very nice because uh the blocked",
    "start": "921480",
    "end": "924560"
  },
  {
    "text": "version of Matrix multiply is is",
    "start": "924560",
    "end": "926959"
  },
  {
    "text": "equivalent so we are just loading blocks",
    "start": "926959",
    "end": "930279"
  },
  {
    "text": "of the Matrix and doing the Matrix",
    "start": "930279",
    "end": "932759"
  },
  {
    "text": "multiply on the smaller problem um right",
    "start": "932759",
    "end": "936199"
  },
  {
    "text": "you see that it gets a little bit nasty",
    "start": "936199",
    "end": "938360"
  },
  {
    "text": "so we will have five nested nested Loops",
    "start": "938360",
    "end": "942639"
  },
  {
    "text": "uh but we turn the problem to a cach",
    "start": "942639",
    "end": "944639"
  },
  {
    "text": "pound Which is far better we speak about",
    "start": "944639",
    "end": "947319"
  },
  {
    "text": "orders of magnitudes of hundreds",
    "start": "947319",
    "end": "950079"
  },
  {
    "text": "faster um right and then uh if you are",
    "start": "950079",
    "end": "954240"
  },
  {
    "text": "lazy writing those four five Loops can",
    "start": "954240",
    "end": "957399"
  },
  {
    "text": "be done a little bit easier",
    "start": "957399",
    "end": "959199"
  },
  {
    "text": "with uh opening P51 which is actually",
    "start": "959199",
    "end": "962399"
  },
  {
    "text": "supported automatically through our uh",
    "start": "962399",
    "end": "964800"
  },
  {
    "text": "kind of implementation so you write open",
    "start": "964800",
    "end": "968279"
  },
  {
    "text": "and P tile sizes the the thing what Aon",
    "start": "968279",
    "end": "971319"
  },
  {
    "text": "should and this allows you just to do",
    "start": "971319",
    "end": "973800"
  },
  {
    "text": "this blocking very nicely with one",
    "start": "973800",
    "end": "977720"
  },
  {
    "text": "line and here are some results why this",
    "start": "977720",
    "end": "981399"
  },
  {
    "text": "can make sense um so it was very kind of",
    "start": "981399",
    "end": "985639"
  },
  {
    "text": "syn synthetic example with Matrix m",
    "start": "985639",
    "end": "988519"
  },
  {
    "text": "multiplication but you see basically if",
    "start": "988519",
    "end": "990959"
  },
  {
    "text": "you do uh do this optimizations use also",
    "start": "990959",
    "end": "994639"
  },
  {
    "text": "vectorization you can get something like",
    "start": "994639",
    "end": "997959"
  },
  {
    "text": "2000x performance Improvement versus",
    "start": "997959",
    "end": "1000839"
  },
  {
    "text": "native uh versus uh kind of 3ly written",
    "start": "1000839",
    "end": "1004759"
  },
  {
    "text": "Matrix multiply uh what happens with",
    "start": "1004759",
    "end": "1007279"
  },
  {
    "text": "wasm so we see there a little bit less",
    "start": "1007279",
    "end": "1009759"
  },
  {
    "text": "we can see 785 X which is still great uh",
    "start": "1009759",
    "end": "1014560"
  },
  {
    "text": "the difference is because of the",
    "start": "1014560",
    "end": "1016399"
  },
  {
    "text": "vectorization uh The Matrix move",
    "start": "1016399",
    "end": "1018440"
  },
  {
    "text": "multiply vectorization uh used by wasm",
    "start": "1018440",
    "end": "1022279"
  },
  {
    "text": "is mapped to SSE in the x86 architecture",
    "start": "1022279",
    "end": "1026678"
  },
  {
    "text": "228 bits and the architecture can",
    "start": "1026679",
    "end": "1029880"
  },
  {
    "text": "support more uh right and some little",
    "start": "1029880",
    "end": "1033720"
  },
  {
    "text": "some numbers about what we uh win if we",
    "start": "1033720",
    "end": "1038000"
  },
  {
    "text": "uh look at the vectorization 128 versus",
    "start": "1038000",
    "end": "1041120"
  },
  {
    "text": "AVX 512 basically the code is 0 * 3x",
    "start": "1041120",
    "end": "1046199"
  },
  {
    "text": "slower and yeah uh further so basically",
    "start": "1046199",
    "end": "1050039"
  },
  {
    "text": "the performance difference what you see",
    "start": "1050039",
    "end": "1051840"
  },
  {
    "text": "between a native uh kind of execution",
    "start": "1051840",
    "end": "1055400"
  },
  {
    "text": "with opening PF Matrix multiply versus",
    "start": "1055400",
    "end": "1058679"
  },
  {
    "text": "uh the wasm simd execution is it's only",
    "start": "1058679",
    "end": "1062320"
  },
  {
    "text": "because of the vectorization so it it",
    "start": "1062320",
    "end": "1064720"
  },
  {
    "text": "works quite good if we have future",
    "start": "1064720",
    "end": "1067080"
  },
  {
    "text": "vectorization capabilities with ROM we",
    "start": "1067080",
    "end": "1069760"
  },
  {
    "text": "can get more",
    "start": "1069760",
    "end": "1071960"
  },
  {
    "text": "performance and uh to close our examples",
    "start": "1071960",
    "end": "1075919"
  },
  {
    "text": "we looked a little bit to more complex",
    "start": "1075919",
    "end": "1077559"
  },
  {
    "text": "stuff convolutional networks AI it's",
    "start": "1077559",
    "end": "1081039"
  },
  {
    "text": "quite uh kind of Hot Topic today so",
    "start": "1081039",
    "end": "1084400"
  },
  {
    "text": "there was is very nice small kind of uh",
    "start": "1084400",
    "end": "1088760"
  },
  {
    "text": "um Academia like application uh from",
    "start": "1088760",
    "end": "1092000"
  },
  {
    "text": "from Berkeley University which I took",
    "start": "1092000",
    "end": "1094559"
  },
  {
    "text": "and basically we uh compiled that with",
    "start": "1094559",
    "end": "1097640"
  },
  {
    "text": "wasm and applied similar optimizations",
    "start": "1097640",
    "end": "1101200"
  },
  {
    "text": "like we we talked today uh we applied",
    "start": "1101200",
    "end": "1104240"
  },
  {
    "text": "the prma uh we applied Paro we applied",
    "start": "1104240",
    "end": "1108799"
  },
  {
    "text": "the simd vectorization and and so on to",
    "start": "1108799",
    "end": "1112080"
  },
  {
    "text": "uh and uh first uh some good news uh if",
    "start": "1112080",
    "end": "1116840"
  },
  {
    "text": "you use profiling tools in the past uh",
    "start": "1116840",
    "end": "1120000"
  },
  {
    "text": "with your uh favorite language they",
    "start": "1120000",
    "end": "1123159"
  },
  {
    "text": "actually work with wasm also very nicely",
    "start": "1123159",
    "end": "1125320"
  },
  {
    "text": "with wome time uh and we saw in that",
    "start": "1125320",
    "end": "1128520"
  },
  {
    "text": "example that convolution is the most",
    "start": "1128520",
    "end": "1130600"
  },
  {
    "text": "expensive layer in that uh neuron",
    "start": "1130600",
    "end": "1134559"
  },
  {
    "text": "Network and uh and similarly to metrix",
    "start": "1134559",
    "end": "1138360"
  },
  {
    "text": "multiply it was actually memory bound",
    "start": "1138360",
    "end": "1140840"
  },
  {
    "text": "you see it on this picture where we we",
    "start": "1140840",
    "end": "1143120"
  },
  {
    "text": "have So-Cal through fly model of the",
    "start": "1143120",
    "end": "1145159"
  },
  {
    "text": "machine uh this is basically uh how a",
    "start": "1145159",
    "end": "1149200"
  },
  {
    "text": "certain kernel dependent on uh the ratio",
    "start": "1149200",
    "end": "1152400"
  },
  {
    "text": "between operations mat operations and",
    "start": "1152400",
    "end": "1156039"
  },
  {
    "text": "memory access uh where does it fit in",
    "start": "1156039",
    "end": "1159960"
  },
  {
    "text": "the whole architecture is it limited by",
    "start": "1159960",
    "end": "1161720"
  },
  {
    "text": "memory speed or is it limited by compute",
    "start": "1161720",
    "end": "1165360"
  },
  {
    "text": "and more to the left means it's actually",
    "start": "1165360",
    "end": "1167640"
  },
  {
    "text": "Limited more by the memory and for the",
    "start": "1167640",
    "end": "1171200"
  },
  {
    "text": "low so and yeah to optimize it we want",
    "start": "1171200",
    "end": "1174559"
  },
  {
    "text": "to bring it",
    "start": "1174559",
    "end": "1176039"
  },
  {
    "text": "up and again we do nasty for Loops stuff",
    "start": "1176039",
    "end": "1180960"
  },
  {
    "text": "uh basically we we did pragma parallel",
    "start": "1180960",
    "end": "1183799"
  },
  {
    "text": "around our batch uh batch for Loop and",
    "start": "1183799",
    "end": "1188200"
  },
  {
    "text": "we could do also Loop unrolling if",
    "start": "1188200",
    "end": "1190559"
  },
  {
    "text": "you're familiar with that concept can",
    "start": "1190559",
    "end": "1192960"
  },
  {
    "text": "bring a lot of performance basically",
    "start": "1192960",
    "end": "1195000"
  },
  {
    "text": "simply or make the compiler uh know that",
    "start": "1195000",
    "end": "1199200"
  },
  {
    "text": "the the loop can execute those two",
    "start": "1199200",
    "end": "1201720"
  },
  {
    "text": "operations save some compiler work in",
    "start": "1201720",
    "end": "1204159"
  },
  {
    "text": "that um and then we can do the CD uh",
    "start": "1204159",
    "end": "1208000"
  },
  {
    "text": "reduction in the Inner Loop and this",
    "start": "1208000",
    "end": "1210039"
  },
  {
    "text": "gave us roughly 14x performance as we",
    "start": "1210039",
    "end": "1212480"
  },
  {
    "text": "see on or yeah 13. 46x in wasm case",
    "start": "1212480",
    "end": "1216440"
  },
  {
    "text": "natively we can do 40x with the",
    "start": "1216440",
    "end": "1219480"
  },
  {
    "text": "application uh the reason why we did not",
    "start": "1219480",
    "end": "1221919"
  },
  {
    "text": "get the 40x uh with with the the wasm",
    "start": "1221919",
    "end": "1225679"
  },
  {
    "text": "code was most probably due to memory",
    "start": "1225679",
    "end": "1228799"
  },
  {
    "text": "layout as we did not look too deep in",
    "start": "1228799",
    "end": "1232120"
  },
  {
    "text": "how how to um align everything to uh s",
    "start": "1232120",
    "end": "1236840"
  },
  {
    "text": "and 128 bits but still 14x was a good",
    "start": "1236840",
    "end": "1241480"
  },
  {
    "text": "good kind of",
    "start": "1241480",
    "end": "1244039"
  },
  {
    "text": "result okay so what did we show here",
    "start": "1244039",
    "end": "1246679"
  },
  {
    "text": "today we compiled the open MP runtime",
    "start": "1246679",
    "end": "1249559"
  },
  {
    "text": "using the WM 32 Wy threads",
    "start": "1249559",
    "end": "1251880"
  },
  {
    "text": "Target uh we were able to compile some",
    "start": "1251880",
    "end": "1255760"
  },
  {
    "text": "examples so this Matrix multipli",
    "start": "1255760",
    "end": "1258760"
  },
  {
    "text": "kernel we uh used openmp to speed that",
    "start": "1258760",
    "end": "1261720"
  },
  {
    "text": "up and we also optimized this image",
    "start": "1261720",
    "end": "1264600"
  },
  {
    "text": "classification kernel um all that and we",
    "start": "1264600",
    "end": "1269120"
  },
  {
    "text": "we compared the native to the web",
    "start": "1269120",
    "end": "1270760"
  },
  {
    "text": "assembly side using some simd in there",
    "start": "1270760",
    "end": "1273039"
  },
  {
    "text": "as well to get some additional speedups",
    "start": "1273039",
    "end": "1275200"
  },
  {
    "text": "so what we did not show is you know open",
    "start": "1275200",
    "end": "1278360"
  },
  {
    "text": "MP has a vast array of features um like",
    "start": "1278360",
    "end": "1281640"
  },
  {
    "text": "all the task parallelism stuff we didn't",
    "start": "1281640",
    "end": "1283360"
  },
  {
    "text": "go into all the lib o andp Target stuff",
    "start": "1283360",
    "end": "1285679"
  },
  {
    "text": "so that'd be like running it on a GPU we",
    "start": "1285679",
    "end": "1288200"
  },
  {
    "text": "didn't show any of that today that's",
    "start": "1288200",
    "end": "1289640"
  },
  {
    "text": "what he's referring to if you're",
    "start": "1289640",
    "end": "1290720"
  },
  {
    "text": "interested in that come talk to us we",
    "start": "1290720",
    "end": "1292320"
  },
  {
    "text": "got to figure that stuff out and so I",
    "start": "1292320",
    "end": "1294760"
  },
  {
    "text": "just want to you know little disclaimer",
    "start": "1294760",
    "end": "1296679"
  },
  {
    "text": "here uh if you go and use this today and",
    "start": "1296679",
    "end": "1300320"
  },
  {
    "text": "you use one of the features that we",
    "start": "1300320",
    "end": "1301760"
  },
  {
    "text": "didn't use I don't know if it works so",
    "start": "1301760",
    "end": "1304120"
  },
  {
    "text": "you're on your own um uh another thing",
    "start": "1304120",
    "end": "1307360"
  },
  {
    "text": "that we didn't really discuss today is",
    "start": "1307360",
    "end": "1308799"
  },
  {
    "text": "openmp has like reduced data types which",
    "start": "1308799",
    "end": "1311159"
  },
  {
    "text": "can be used for you know eeking out even",
    "start": "1311159",
    "end": "1314039"
  },
  {
    "text": "a little more performance like this N8",
    "start": "1314039",
    "end": "1316240"
  },
  {
    "text": "and bs16 stuff those data types aren't",
    "start": "1316240",
    "end": "1319360"
  },
  {
    "text": "really available in web assembly yet so",
    "start": "1319360",
    "end": "1321799"
  },
  {
    "text": "we'll have to wait a while till we can",
    "start": "1321799",
    "end": "1323360"
  },
  {
    "text": "use",
    "start": "1323360",
    "end": "1324320"
  },
  {
    "text": "that um okay so that's the end of our",
    "start": "1324320",
    "end": "1327840"
  },
  {
    "text": "slide I have a couple of things to say",
    "start": "1327840",
    "end": "1329440"
  },
  {
    "text": "about this before we take questions our",
    "start": "1329440",
    "end": "1331760"
  },
  {
    "text": "contact information is here if you want",
    "start": "1331760",
    "end": "1333600"
  },
  {
    "text": "to contact us and we would love to talk",
    "start": "1333600",
    "end": "1335679"
  },
  {
    "text": "more about this stuff if you're",
    "start": "1335679",
    "end": "1337400"
  },
  {
    "text": "interested in this openmp stuff um take",
    "start": "1337400",
    "end": "1340400"
  },
  {
    "text": "a look at the the pr give it a thumbs up",
    "start": "1340400",
    "end": "1342559"
  },
  {
    "text": "or whatever make some comments if you",
    "start": "1342559",
    "end": "1344440"
  },
  {
    "text": "want to run the beginnings of what uh",
    "start": "1344440",
    "end": "1347400"
  },
  {
    "text": "Aton was sort of explaining here today",
    "start": "1347400",
    "end": "1349360"
  },
  {
    "text": "go to this link uh there's a make file",
    "start": "1349360",
    "end": "1351799"
  },
  {
    "text": "that should be able to you know guide",
    "start": "1351799",
    "end": "1353520"
  },
  {
    "text": "you through getting this running on your",
    "start": "1353520",
    "end": "1355600"
  },
  {
    "text": "machine all right thank you so much",
    "start": "1355600",
    "end": "1358120"
  },
  {
    "text": "that's our",
    "start": "1358120",
    "end": "1360480"
  },
  {
    "text": "presentation all right",
    "start": "1363840",
    "end": "1367200"
  },
  {
    "text": "questions Obi-Wan trobi that's a name I",
    "start": "1372799",
    "end": "1375279"
  },
  {
    "text": "haven't heard in a long time it's hard",
    "start": "1375279",
    "end": "1377159"
  },
  {
    "text": "it's your question",
    "start": "1377159",
    "end": "1379960"
  },
  {
    "text": "okay so my question is about SD um so",
    "start": "1381080",
    "end": "1384279"
  },
  {
    "text": "The Benchmark is against AVX 512 on",
    "start": "1384279",
    "end": "1386400"
  },
  {
    "text": "Native which obviously uh you know the",
    "start": "1386400",
    "end": "1388600"
  },
  {
    "text": "the gaps in WM SD on 128 bit compared to",
    "start": "1388600",
    "end": "1391640"
  },
  {
    "text": "that are well known um my my I guess my",
    "start": "1391640",
    "end": "1394960"
  },
  {
    "text": "top question would be would relax simd",
    "start": "1394960",
    "end": "1399039"
  },
  {
    "text": "help maybe this use case yeah you know I",
    "start": "1399039",
    "end": "1402080"
  },
  {
    "text": "think what would really help is the",
    "start": "1402080",
    "end": "1403720"
  },
  {
    "text": "flexible vectors proposal okay um which",
    "start": "1403720",
    "end": "1406880"
  },
  {
    "text": "is I think phase one maybe trending",
    "start": "1406880",
    "end": "1409320"
  },
  {
    "text": "towards Phase 2 and that would be able",
    "start": "1409320",
    "end": "1411799"
  },
  {
    "text": "that would enable us to be able to use",
    "start": "1411799",
    "end": "1414279"
  },
  {
    "text": "512-bit simd so I think that's the",
    "start": "1414279",
    "end": "1417799"
  },
  {
    "text": "biggest thing to work on I I guess a",
    "start": "1417799",
    "end": "1420600"
  },
  {
    "text": "slightly related question have you",
    "start": "1420600",
    "end": "1421840"
  },
  {
    "text": "benchmarked on 256 at all since that is",
    "start": "1421840",
    "end": "1424559"
  },
  {
    "text": "kind of com on Native code avx2",
    "start": "1424559",
    "end": "1427880"
  },
  {
    "text": "basically natively yeah you basically",
    "start": "1427880",
    "end": "1431320"
  },
  {
    "text": "see 2x versus S is z at least Matrix",
    "start": "1431320",
    "end": "1435039"
  },
  {
    "text": "multiply 3x if you go 512 and and makes",
    "start": "1435039",
    "end": "1438320"
  },
  {
    "text": "sense",
    "start": "1438320",
    "end": "1439840"
  },
  {
    "text": "thanks got a question um uh Andrew you",
    "start": "1439840",
    "end": "1443279"
  },
  {
    "text": "know you worked on wnn before this and",
    "start": "1443279",
    "end": "1446000"
  },
  {
    "text": "now you're you know which is um a way to",
    "start": "1446000",
    "end": "1448279"
  },
  {
    "text": "pull um you know ml into um web assembly",
    "start": "1448279",
    "end": "1452679"
  },
  {
    "text": "like through a host guest boundary and",
    "start": "1452679",
    "end": "1454679"
  },
  {
    "text": "now you're pioneering um with the team",
    "start": "1454679",
    "end": "1457240"
  },
  {
    "text": "here web assembly inside of I'm sorry AI",
    "start": "1457240",
    "end": "1460799"
  },
  {
    "text": "inside of web assembly do you have any",
    "start": "1460799",
    "end": "1463279"
  },
  {
    "text": "thoughts on when you should use one te",
    "start": "1463279",
    "end": "1465480"
  },
  {
    "text": "one technique or",
    "start": "1465480",
    "end": "1466799"
  },
  {
    "text": "another",
    "start": "1466799",
    "end": "1468559"
  },
  {
    "text": "short answer would be uh if you're",
    "start": "1468559",
    "end": "1470840"
  },
  {
    "text": "looking for portability try to compile",
    "start": "1470840",
    "end": "1473039"
  },
  {
    "text": "it all into web assembly if you can if",
    "start": "1473039",
    "end": "1475559"
  },
  {
    "text": "you're looking for performance jump",
    "start": "1475559",
    "end": "1477919"
  },
  {
    "text": "outside of the sandbox um that would be",
    "start": "1477919",
    "end": "1480320"
  },
  {
    "text": "the short answer today I mean there's",
    "start": "1480320",
    "end": "1481760"
  },
  {
    "text": "like Nuance in that but that's how I",
    "start": "1481760",
    "end": "1485440"
  },
  {
    "text": "sort of if data movement is exp",
    "start": "1485440",
    "end": "1488080"
  },
  {
    "text": "expensive data copies",
    "start": "1488080",
    "end": "1491840"
  },
  {
    "text": "security other",
    "start": "1491840",
    "end": "1494279"
  },
  {
    "text": "questions all right huge round of",
    "start": "1494279",
    "end": "1496159"
  },
  {
    "text": "applause for these guys",
    "start": "1496159",
    "end": "1499760"
  },
  {
    "text": "[Applause]",
    "start": "1500760",
    "end": "1504019"
  }
]