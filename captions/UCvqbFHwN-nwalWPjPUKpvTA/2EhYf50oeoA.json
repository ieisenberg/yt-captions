[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hello everybody in this talk we will discuss how to build fault or tolerant distributed applications within portal",
    "start": "640",
    "end": "7520"
  },
  {
    "text": "my name is tichomir i'm a developer advocate at temporal and i'm also the project lead of the cncf serverless",
    "start": "7520",
    "end": "13040"
  },
  {
    "text": "workflow project so table of contents first we will give a quick",
    "start": "13040",
    "end": "19439"
  },
  {
    "start": "15000",
    "end": "15000"
  },
  {
    "text": "introduction to temporal we'll discuss how you use temporal to build resilient",
    "start": "19439",
    "end": "25199"
  },
  {
    "text": "micro services we will also take a look at the polygon aspect of building microservices using temporal as well as",
    "start": "25199",
    "end": "32160"
  },
  {
    "text": "some of the error handling features that it includes in the end i will present a demo to kind of tie it all together",
    "start": "32160",
    "end": "39280"
  },
  {
    "text": "so temporal is an open source distributed micro service orchestration platform and to get you started here are",
    "start": "39280",
    "end": "45440"
  },
  {
    "text": "some links like the website docs community forums and things like that",
    "start": "45440",
    "end": "51199"
  },
  {
    "start": "51000",
    "end": "51000"
  },
  {
    "text": "the portal is used by a ton of different companies out there and if you want to learn more and see more use cases and",
    "start": "51199",
    "end": "57680"
  },
  {
    "text": "types of applications those companies are building using temporal you can go to this link",
    "start": "57680",
    "end": "63280"
  },
  {
    "text": "and see a bunch of different case studies so to give an introduction to temporal",
    "start": "63280",
    "end": "69040"
  },
  {
    "start": "66000",
    "end": "66000"
  },
  {
    "text": "temporal is composed of two main parts one is the server the portal server one",
    "start": "69040",
    "end": "74240"
  },
  {
    "text": "is the sdks on the left hand side on the server it's basically a golang binary",
    "start": "74240",
    "end": "80400"
  },
  {
    "text": "that can be deployed in many different ways for example kubernetes docker or",
    "start": "80400",
    "end": "85840"
  },
  {
    "text": "really any of infrastructure that you might have available in addition to that temporal also provides a cloud offering",
    "start": "85840",
    "end": "92880"
  },
  {
    "text": "that you can use if you want to use that deployment rather than one that you do locally yourself",
    "start": "92880",
    "end": "99040"
  },
  {
    "text": "on the right hand side as far as the sdks goes temporal uh provides a programming language model",
    "start": "99040",
    "end": "104560"
  },
  {
    "text": "to building your business logic and applications also uh called workflows which are kind",
    "start": "104560",
    "end": "110320"
  },
  {
    "text": "of like units of execution and you can write them using programming languages so you can",
    "start": "110320",
    "end": "116320"
  },
  {
    "text": "use go php java node.js currently and again those applications that you build",
    "start": "116320",
    "end": "122159"
  },
  {
    "text": "using programming languages can be deployed on any framework within",
    "start": "122159",
    "end": "127920"
  },
  {
    "text": "infrastructure just like currently that you're you're using to build your applications",
    "start": "127920",
    "end": "134319"
  },
  {
    "start": "134000",
    "end": "134000"
  },
  {
    "text": "so looking at the temporal server the temporal server itself is composed",
    "start": "134319",
    "end": "139360"
  },
  {
    "text": "of multiple different services you can scale out the tempo or temporal",
    "start": "139360",
    "end": "144560"
  },
  {
    "start": "142000",
    "end": "142000"
  },
  {
    "text": "server horizontally but for example deploying multiple servers on different clusters",
    "start": "144560",
    "end": "150560"
  },
  {
    "text": "but each service individually can can be scaled as well",
    "start": "150560",
    "end": "156080"
  },
  {
    "start": "156000",
    "end": "156000"
  },
  {
    "text": "now just to take a little quick look into the different parts of the temporal",
    "start": "156080",
    "end": "161120"
  },
  {
    "text": "server uh we have the front-end service so all the communications of your client applications and your services can",
    "start": "161120",
    "end": "169280"
  },
  {
    "text": "communicate to the temporal server via grpc calls and the front-end service handles basically all the inbound calls",
    "start": "169280",
    "end": "176959"
  },
  {
    "text": "and allows for things like multi-cluster replication and things like that the history service manages workflow",
    "start": "176959",
    "end": "183760"
  },
  {
    "text": "state transitions meaning that temporal server does not execute your code directly however it assists",
    "start": "183760",
    "end": "191920"
  },
  {
    "text": "during this execution in terms of storing some sort of important events",
    "start": "191920",
    "end": "197280"
  },
  {
    "text": "execution events that then later on allow you to either resume workflow or your",
    "start": "197280",
    "end": "202720"
  },
  {
    "text": "application execution and deal with things like failures and stuff like that",
    "start": "202720",
    "end": "207760"
  },
  {
    "text": "the matching service provides host task queues which are basically endpoints dynamically generated through which you",
    "start": "207760",
    "end": "215360"
  },
  {
    "text": "can host multiple types of workflows or type of services at some particular",
    "start": "215360",
    "end": "221200"
  },
  {
    "text": "endpoints and in the end the worker service is a background processing temporal server",
    "start": "221200",
    "end": "227040"
  },
  {
    "text": "includes a bunch of different background uh system workflows and",
    "start": "227040",
    "end": "232239"
  },
  {
    "text": "replication cues and things like that in order to achieve but we will take a look in the next",
    "start": "232239",
    "end": "238480"
  },
  {
    "text": "couple slides as far as storage goes again temporal does not store um",
    "start": "238480",
    "end": "244799"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "anything uh your applications uh code or some sort of serialized application code",
    "start": "244799",
    "end": "250319"
  },
  {
    "text": "no all your code runs actually on your applications as we'll see soon but the server storage still stores some",
    "start": "250319",
    "end": "256400"
  },
  {
    "text": "information like events in the history of the execution of your different services and applications",
    "start": "256400",
    "end": "263360"
  },
  {
    "text": "temporal currently provides as far as storage go goes cassandra mysql and",
    "start": "263360",
    "end": "268720"
  },
  {
    "text": "postgresql and the scaling of your database really",
    "start": "268720",
    "end": "274160"
  },
  {
    "text": "depends on the database use so if you're using cassandra your scaling options would probably be somewhat different",
    "start": "274160",
    "end": "280160"
  },
  {
    "text": "than for example postgres i'm sorry",
    "start": "280160",
    "end": "285720"
  },
  {
    "start": "283000",
    "end": "283000"
  },
  {
    "text": "observability is very important when we start writing any sort of microservice or any polyglot type of",
    "start": "285720",
    "end": "292160"
  },
  {
    "text": "service or distributed service stuff so both the server and the temporal sd case",
    "start": "292160",
    "end": "297199"
  },
  {
    "text": "provide out-of-the-box provide metrics and these metrics can then be consumed by things like prometheus and grafana",
    "start": "297199",
    "end": "303840"
  },
  {
    "text": "and you can build um your dashboards and and metrics um",
    "start": "303840",
    "end": "309199"
  },
  {
    "text": "visualization that way in addition to that the temporal sdks also provide tracing information so during execution",
    "start": "309199",
    "end": "317280"
  },
  {
    "text": "of your application and services you can view the tracing information for example",
    "start": "317280",
    "end": "322720"
  },
  {
    "text": "with whatever you're tracing type of software is that you want to use",
    "start": "322720",
    "end": "328960"
  },
  {
    "text": "now i like to kind of like display the use of temporal from a point of view of",
    "start": "328960",
    "end": "335039"
  },
  {
    "start": "329000",
    "end": "329000"
  },
  {
    "text": "a particular user in this case let's focus on a developer as developers we want to really be able to focus on our",
    "start": "335039",
    "end": "341600"
  },
  {
    "text": "business logic and when we're dealing with writing very complex",
    "start": "341600",
    "end": "346639"
  },
  {
    "text": "applications especially distributed microservices we have to deal with a ton of different things with temporal as a",
    "start": "346639",
    "end": "353520"
  },
  {
    "text": "developer you really can focus on writing your own code and the temporal server on the right",
    "start": "353520",
    "end": "359199"
  },
  {
    "text": "hand side in the box is basically you can think of it as a black box that provides you things like",
    "start": "359199",
    "end": "364479"
  },
  {
    "text": "event handling durable timers durable storage transaction management queuing",
    "start": "364479",
    "end": "371440"
  },
  {
    "text": "analytics and as we've shown previously metrics so all the things you get out of the box are really your applications you",
    "start": "371440",
    "end": "377840"
  },
  {
    "text": "can write simple code and you have all those benefits that you can utilize",
    "start": "377840",
    "end": "385039"
  },
  {
    "text": "as far as what the temporal server provides now given of course some scaling options and",
    "start": "385039",
    "end": "391280"
  },
  {
    "text": "employments the temporal server is capable of executing hundreds of millions of this applications that we",
    "start": "391280",
    "end": "398080"
  },
  {
    "text": "call workflows concurrently um as we said in portal server does not directly",
    "start": "398080",
    "end": "403600"
  },
  {
    "text": "execute your code your code still executes on your premises and your deployment",
    "start": "403600",
    "end": "409199"
  },
  {
    "text": "you know the way you deploy your applications but it tracks and management",
    "start": "409199",
    "end": "414319"
  },
  {
    "text": "manages its execution state and um its application",
    "start": "414319",
    "end": "420880"
  },
  {
    "text": "kind of flow now as far as again looking at from",
    "start": "420880",
    "end": "425919"
  },
  {
    "start": "423000",
    "end": "423000"
  },
  {
    "text": "developer perspective um we can utilize the temporal sdks to",
    "start": "425919",
    "end": "431360"
  },
  {
    "text": "write our applications in different types of languages as we said go php",
    "start": "431360",
    "end": "436400"
  },
  {
    "text": "node and java and each one of these sdks provide apis for use that we can utilize",
    "start": "436400",
    "end": "442080"
  },
  {
    "text": "during development such as develop you know workflow development apis testing apis and also client",
    "start": "442080",
    "end": "448400"
  },
  {
    "text": "apis um because temporal again it takes a",
    "start": "448400",
    "end": "454479"
  },
  {
    "start": "451000",
    "end": "451000"
  },
  {
    "text": "programmatic approach rather than some sort of dsl or high level type of workflow language",
    "start": "454479",
    "end": "460639"
  },
  {
    "text": "we write our code as developers still in our favorite ide so we don't have to get our environment",
    "start": "460639",
    "end": "467360"
  },
  {
    "text": "we don't have to change our programming language use we can stay within the same type of environment that we're used to",
    "start": "467360",
    "end": "475039"
  },
  {
    "text": "um so what are we kind of targeting you know what are we as developers what we have to write and he has three things",
    "start": "475039",
    "end": "481599"
  },
  {
    "text": "really the first one is workflows so workflows are implementation of business logic so this is just code you know with",
    "start": "481599",
    "end": "489039"
  },
  {
    "text": "some restrictions that we will go over that you have you can write in order to",
    "start": "489039",
    "end": "494080"
  },
  {
    "text": "execute your business logic most likely orchestrate some third-party services or things like that uh the workflow code",
    "start": "494080",
    "end": "502240"
  },
  {
    "text": "that we write is becomes fault tolerant because of temporal um and there is many different",
    "start": "502240",
    "end": "509759"
  },
  {
    "text": "things like configuration based retries timeouts uh compensation and all those",
    "start": "509759",
    "end": "515120"
  },
  {
    "text": "things that in portal through sdks and with addition to the server that kind of manages these things uh allow",
    "start": "515120",
    "end": "522560"
  },
  {
    "text": "you to have out of the box as well the second thing are activities um so",
    "start": "522560",
    "end": "528320"
  },
  {
    "text": "activities are basically parts of your code where you can use you know any sort of library database access file access",
    "start": "528320",
    "end": "536399"
  },
  {
    "text": "you can do pretty much anything you want there um so activities um",
    "start": "536399",
    "end": "543360"
  },
  {
    "text": "can be of course invoked sync or async without you really having to specify any",
    "start": "543360",
    "end": "548480"
  },
  {
    "text": "of that information in your code or use some sort of third-party libraries uh for that it can be rate limited",
    "start": "548480",
    "end": "556000"
  },
  {
    "text": "and of course you know with temporal you get automatic retries without having anything to specify in your application",
    "start": "556000",
    "end": "563120"
  },
  {
    "text": "as far as coding for it goes the third things are workers workers are",
    "start": "563120",
    "end": "569279"
  },
  {
    "text": "processes that host your workflows and activities um and workers are responsible for",
    "start": "569279",
    "end": "576560"
  },
  {
    "text": "execution and and progress of execution of both your workflows and activities",
    "start": "576560",
    "end": "582160"
  },
  {
    "text": "workers then communicate with the temporal server and that communication",
    "start": "582160",
    "end": "587839"
  },
  {
    "text": "um is important in order to to to run invoke in running and continuing and",
    "start": "587839",
    "end": "594720"
  },
  {
    "text": "resuming your workflow execution as we'll see also in the later slides",
    "start": "594720",
    "end": "600560"
  },
  {
    "text": "in addition to uh the sdks and the programming model uh temporal also",
    "start": "600560",
    "end": "606079"
  },
  {
    "text": "provides for developers um a web ui through which you can see you know you know what's going on what workflows are",
    "start": "606079",
    "end": "612880"
  },
  {
    "text": "running what state they're in their execution history stack traces and stick like things like that but in addition it",
    "start": "612880",
    "end": "619680"
  },
  {
    "text": "provides a cli which is probably even more powerful where you can use to do a lot of different things like again start",
    "start": "619680",
    "end": "626800"
  },
  {
    "text": "workflows and you can have your batch executions of things and stuff like that",
    "start": "626800",
    "end": "633120"
  },
  {
    "start": "633000",
    "end": "633000"
  },
  {
    "text": "as far as testing and debugging goes which is important again you can use your ides and the",
    "start": "633120",
    "end": "639120"
  },
  {
    "text": "standard testing and debugging libraries and and the debuggers of your choice",
    "start": "639120",
    "end": "645360"
  },
  {
    "text": "there is nothing special that you have to download or use in particular",
    "start": "645360",
    "end": "650560"
  },
  {
    "text": "as far as testing goes you can test both your workflows and in activities and you",
    "start": "650560",
    "end": "655680"
  },
  {
    "text": "can use your uh mocking libs that you want to use to mock things",
    "start": "655680",
    "end": "660720"
  },
  {
    "text": "like that and important thing about testing workflows is because you might have workflows there running for weeks month",
    "start": "660720",
    "end": "667519"
  },
  {
    "text": "or even years so long running type of execution temporal testing framework for why it's a time advance feature which",
    "start": "667519",
    "end": "674560"
  },
  {
    "text": "allows you to test even workflows that might be running for multiple years within milliseconds so that's kind of",
    "start": "674560",
    "end": "681519"
  },
  {
    "text": "like an important thing to understand that you can really test any sort of",
    "start": "681519",
    "end": "686560"
  },
  {
    "text": "application or service that you write with temporal easily as far as activities goes that can be",
    "start": "686560",
    "end": "692079"
  },
  {
    "text": "tested and and debug independent and uh again because of the testing",
    "start": "692079",
    "end": "698079"
  },
  {
    "text": "framework that that temporal provides for most uh sdks you do not have to even",
    "start": "698079",
    "end": "703680"
  },
  {
    "text": "have the temporal server running in order to test your code",
    "start": "703680",
    "end": "709360"
  },
  {
    "start": "709000",
    "end": "709000"
  },
  {
    "text": "now from kind of like an architectural perspective or a little bit higher up view",
    "start": "709360",
    "end": "715279"
  },
  {
    "text": "we have to ask ourselves can we if we start adopting in the portal can we still use frameworks that we're",
    "start": "715279",
    "end": "721440"
  },
  {
    "text": "accustomed to and that we currently want to use and the answer is yes temporal is not intrusive in this way whatsoever",
    "start": "721440",
    "end": "728800"
  },
  {
    "text": "we talked about this can i use already can i use my current programming language and the answer is yes what",
    "start": "728800",
    "end": "734480"
  },
  {
    "text": "about the dev environment and again we kind of went through that for both testing and debugging and also writing",
    "start": "734480",
    "end": "740720"
  },
  {
    "text": "your code that's the case and can i use my testing libraries uh that i'm already",
    "start": "740720",
    "end": "746560"
  },
  {
    "text": "currently using such as junit php unit testify and again yes you can because",
    "start": "746560",
    "end": "752000"
  },
  {
    "text": "temporal does have the programming language approach you can use all those libraries and and tools as well",
    "start": "752000",
    "end": "759760"
  },
  {
    "text": "so that's a kind of one perspective of looking at let's say writing a new",
    "start": "759760",
    "end": "765279"
  },
  {
    "text": "applications and and things like that but what if we have an existing application and typically this is kind of like the",
    "start": "765279",
    "end": "771680"
  },
  {
    "text": "we have some data model uh we have some inventing platforms that we're using",
    "start": "771680",
    "end": "776720"
  },
  {
    "text": "our application itself in the middle in the box can provide some sort of object model and code that we currently might",
    "start": "776720",
    "end": "782560"
  },
  {
    "text": "have that communicates with for example third-party system systems and different uis",
    "start": "782560",
    "end": "788639"
  },
  {
    "text": "in order to accomplish our business logic or end goal of our application that we provide to our customers",
    "start": "788639",
    "end": "794240"
  },
  {
    "text": "so once if we wanted to incorporate them portal into the mix what we have to",
    "start": "794240",
    "end": "799279"
  },
  {
    "text": "really pick and choose is which parts of our code mostly that you know the",
    "start": "799279",
    "end": "805040"
  },
  {
    "text": "business logic to the core business logic code executions or the orchestration of",
    "start": "805040",
    "end": "810240"
  },
  {
    "text": "for example these services and ui's you want to turn into workflows and which parts of our code currently",
    "start": "810240",
    "end": "817680"
  },
  {
    "text": "interact with different file system database access invocation rest or ac you know async",
    "start": "817680",
    "end": "823920"
  },
  {
    "text": "sync invocation of this third-party systems we want to turn into activities",
    "start": "823920",
    "end": "830800"
  },
  {
    "start": "830000",
    "end": "830000"
  },
  {
    "text": "so finally what is the value proposition of temporal the value position is that",
    "start": "830800",
    "end": "836560"
  },
  {
    "text": "uh no matter what what we do or what our title is in the end we build services or",
    "start": "836560",
    "end": "842800"
  },
  {
    "text": "microservices in general and these services have to be durable",
    "start": "842800",
    "end": "848079"
  },
  {
    "text": "distributed scalable and of course polyglot in most cases",
    "start": "848079",
    "end": "853519"
  },
  {
    "text": "and it's up to you but temporal provides it for you really allows you to focus on",
    "start": "853519",
    "end": "859040"
  },
  {
    "text": "writing your business logic without having to think about all those benefits that you get pretty much for",
    "start": "859040",
    "end": "865920"
  },
  {
    "text": "free so let's take a look at a quick example this is a java example uh again",
    "start": "865920",
    "end": "872959"
  },
  {
    "start": "868000",
    "end": "868000"
  },
  {
    "text": "comportal provides us the case in in different languages but in the left-hand side let's say that we have an existing",
    "start": "872959",
    "end": "878639"
  },
  {
    "text": "class called my customer that has some state for example it holds a customer and it has a mind method",
    "start": "878639",
    "end": "885920"
  },
  {
    "text": "called update account account message uh where we want to update some information uh about this",
    "start": "885920",
    "end": "893360"
  },
  {
    "text": "customer it also has two methods on the bottom side called get customers which allows us to receive information of the",
    "start": "893360",
    "end": "899839"
  },
  {
    "text": "customer we're currently processing and he has an exit method where um",
    "start": "899839",
    "end": "905120"
  },
  {
    "text": "basically that method allows us to stop processing if that needs to be as you",
    "start": "905120",
    "end": "910399"
  },
  {
    "text": "know we're dealing with java we have some sort of interface my customer interface that are my our my customer",
    "start": "910399",
    "end": "916880"
  },
  {
    "text": "class implements and this is kind of like the blueprint it has the three main methods of the account message get",
    "start": "916880",
    "end": "923600"
  },
  {
    "text": "customer and exit so in order to turn that into a temporal workflow really we",
    "start": "923600",
    "end": "929199"
  },
  {
    "text": "have to start with the interface so we just use annotations for example at workflow interface",
    "start": "929199",
    "end": "934480"
  },
  {
    "text": "uh which basically says that any class that implements this particular interface should be considered a",
    "start": "934480",
    "end": "940959"
  },
  {
    "text": "workflow the update account message which is kind of like the core method or the main method of our",
    "start": "940959",
    "end": "948480"
  },
  {
    "text": "class that implements this business logic is annotated with workflow and workflow method",
    "start": "948480",
    "end": "954160"
  },
  {
    "text": "and our method get customer which allows different clients to get this",
    "start": "954160",
    "end": "961519"
  },
  {
    "text": "information from workflow is a query method and our exit which is basically receives",
    "start": "961519",
    "end": "966720"
  },
  {
    "text": "a signal an outside signal or data that we want to receive uh when during",
    "start": "966720",
    "end": "972000"
  },
  {
    "text": "execution of this class we annotate with that signal method",
    "start": "972000",
    "end": "977519"
  },
  {
    "text": "so with that itself our class on the left hand side has become a temporal",
    "start": "977519",
    "end": "982720"
  },
  {
    "text": "workflow and two things we have to take a look at how do we actually interact",
    "start": "982720",
    "end": "988320"
  },
  {
    "text": "now with our workflow how do we start it stop it and how do we get information out of it and how do we signal for",
    "start": "988320",
    "end": "994720"
  },
  {
    "text": "example send signals to it as well as how do we write this business logic that",
    "start": "994720",
    "end": "1000079"
  },
  {
    "text": "we want to actually implement this class with so let's take a look now at some of the",
    "start": "1000079",
    "end": "1006560"
  },
  {
    "start": "1004000",
    "end": "1004000"
  },
  {
    "text": "temporal features provided by the temporal sdk and and their apis",
    "start": "1006560",
    "end": "1012560"
  },
  {
    "text": "the first thing that you get out from the temporal uh apis is for example you can start workflow execution and you it",
    "start": "1012560",
    "end": "1020079"
  },
  {
    "text": "can be long running so on the left-hand side for example we showed that hey we want to start a workflow execution",
    "start": "1020079",
    "end": "1027360"
  },
  {
    "text": "implementation of your business logic and we're going to let it run you know up to a year",
    "start": "1027360",
    "end": "1032640"
  },
  {
    "text": "um workflow has stayed in the state you don't have to deal in your code yourself",
    "start": "1032640",
    "end": "1038240"
  },
  {
    "text": "as far as actually writing some sort of calls to databases or persisting yourself",
    "start": "1038240",
    "end": "1043438"
  },
  {
    "text": "that is done uh through temporal again it's not the actual class your code is persisted but it's event history and",
    "start": "1043439",
    "end": "1050240"
  },
  {
    "text": "we'll take a look at that a little later on as well um your workflow code can be fault",
    "start": "1050240",
    "end": "1056799"
  },
  {
    "text": "tolerance from the left hand side see that we can have automatic retries for activities we can have retries for your",
    "start": "1056799",
    "end": "1062799"
  },
  {
    "text": "workflows you can reset your workflows cancel terminate things like that there's apis for that and also because",
    "start": "1062799",
    "end": "1070480"
  },
  {
    "text": "this is programming language approach you can you know try catch and you can catch some certain exceptions even",
    "start": "1070480",
    "end": "1075919"
  },
  {
    "text": "perform things like compensation before uh ending your workflow execution",
    "start": "1075919",
    "end": "1082080"
  },
  {
    "text": "we can also define through the apis that we want periodic execution via some chrome for example",
    "start": "1082080",
    "end": "1088080"
  },
  {
    "text": "and we can invoke workflows and as well also as activities sync or async so",
    "start": "1088080",
    "end": "1094799"
  },
  {
    "text": "temporal provides full support and in some programming languages it is the default approach to to actually invoke",
    "start": "1094799",
    "end": "1101280"
  },
  {
    "text": "things async itself finally we also know that especially",
    "start": "1101280",
    "end": "1106400"
  },
  {
    "text": "when you have long long-running business logic or workflows you need some sort of versioning",
    "start": "1106400",
    "end": "1113280"
  },
  {
    "text": "changes happen so temporal ips provides you a way to version your code even while it's currently even running and",
    "start": "1113280",
    "end": "1120880"
  },
  {
    "text": "deploy a new version and and deal with updates um automatically",
    "start": "1120880",
    "end": "1127360"
  },
  {
    "text": "um of course we we talked about testing already so again all your workforce",
    "start": "1127360",
    "end": "1133120"
  },
  {
    "text": "activities or any code that you write using the temporal apis is fully testable",
    "start": "1133120",
    "end": "1138720"
  },
  {
    "start": "1138000",
    "end": "1138000"
  },
  {
    "text": "now let's take a look a little bit how we interact with our workflows so the left hand side let's say we have some",
    "start": "1138720",
    "end": "1144320"
  },
  {
    "text": "sort of client application a client actually wants to invoke an instance of",
    "start": "1144320",
    "end": "1149440"
  },
  {
    "text": "our business logic or our workflow workflows that we develop in our services so the client api can send",
    "start": "1149440",
    "end": "1155919"
  },
  {
    "text": "commands those are again commands they're based on grpc and we",
    "start": "1155919",
    "end": "1161679"
  },
  {
    "text": "send them to the temporal server to its front-end service so one of the commands that we can send is start but there are",
    "start": "1161679",
    "end": "1168799"
  },
  {
    "text": "many more we can signal query cancel things like that so in the left-hand",
    "start": "1168799",
    "end": "1173919"
  },
  {
    "text": "side let's say we have some code that actually uses the temporal java sdk and its apis to call a workflow",
    "start": "1173919",
    "end": "1180640"
  },
  {
    "text": "client.start this is an async invocation uh that will request this for the server",
    "start": "1180640",
    "end": "1186640"
  },
  {
    "text": "the server itself uh at this point does not really know what service or our service",
    "start": "1186640",
    "end": "1193679"
  },
  {
    "text": "is actually going to execute or or pick up the request to start a workflow",
    "start": "1193679",
    "end": "1199360"
  },
  {
    "text": "execution but what the server does it's going to put a message into a particular task queue now our application our",
    "start": "1199360",
    "end": "1206799"
  },
  {
    "text": "service on the bottom left that we're writing that includes our workflows and activities and our workers are we tell",
    "start": "1206799",
    "end": "1212880"
  },
  {
    "text": "our workers to listen to this particular last task queue and then when a message arrives or in this case on the right",
    "start": "1212880",
    "end": "1219840"
  },
  {
    "text": "hand side a little red circle uh that includes some information about wanting to start work for execution",
    "start": "1219840",
    "end": "1225760"
  },
  {
    "text": "arrives our work is going to pick it up is going to read the instructions and",
    "start": "1225760",
    "end": "1230799"
  },
  {
    "text": "start the execution of our new workflow instance so this is a fully",
    "start": "1230799",
    "end": "1237200"
  },
  {
    "text": "distributed system um uh workflow execution that starts let's say on our service here on the bottom left side can",
    "start": "1237200",
    "end": "1244480"
  },
  {
    "text": "actually during some time continue on a completely different service if in case of a failure in case this particular",
    "start": "1244480",
    "end": "1250880"
  },
  {
    "text": "service goes down and things like that so you see temporal and it is fully distributed meaning that",
    "start": "1250880",
    "end": "1258320"
  },
  {
    "text": "you have the ability to actually uh built in",
    "start": "1258320",
    "end": "1263520"
  },
  {
    "text": "fault tolerance and right reliability things like that into you know your whole equation",
    "start": "1263520",
    "end": "1269360"
  },
  {
    "text": "without really having to uh write their code yourself now once uh our task worker has picked",
    "start": "1269360",
    "end": "1277200"
  },
  {
    "text": "up the initial test to start the workflow it started processing to some point where it needs some more",
    "start": "1277200",
    "end": "1282320"
  },
  {
    "text": "information from the server for example schedule an activity execution or start",
    "start": "1282320",
    "end": "1287360"
  },
  {
    "text": "creating a timer in case where our workload says let's say sleep for 10 minutes or 10 days",
    "start": "1287360",
    "end": "1293440"
  },
  {
    "text": "um our workflow can send again a message to the important server",
    "start": "1293440",
    "end": "1298799"
  },
  {
    "text": "say basically saying i want to schedule an activity execution the activity",
    "start": "1298799",
    "end": "1304159"
  },
  {
    "text": "itself because again distributed system does not have to be even executed within our service but could be a completely",
    "start": "1304159",
    "end": "1310320"
  },
  {
    "text": "different service that hosts the particular activity and again temporal server is going to put a task on a",
    "start": "1310320",
    "end": "1317840"
  },
  {
    "text": "specific task queue that we request and it's going to be picked up by some worker and execution is going to move",
    "start": "1317840",
    "end": "1325520"
  },
  {
    "text": "forward with that um just going a little bit into this more",
    "start": "1325520",
    "end": "1332080"
  },
  {
    "start": "1329000",
    "end": "1329000"
  },
  {
    "text": "we talked that temporal is a very resilient system and once the messages arise from the task",
    "start": "1332080",
    "end": "1338880"
  },
  {
    "text": "queue and the worker picks it up on the left-hand side let's say we have a workflow code",
    "start": "1338880",
    "end": "1344320"
  },
  {
    "text": "that we want to execute the message the itself or the workflow task includes things like what should be executed next",
    "start": "1344320",
    "end": "1351280"
  },
  {
    "text": "and all the history and information that's happened so far um on the left hand side once this task",
    "start": "1351280",
    "end": "1359200"
  },
  {
    "text": "workflow task is received we use the past events or the workflow history to",
    "start": "1359200",
    "end": "1364720"
  },
  {
    "text": "put the workflow in the same state that it was before the task was received and",
    "start": "1364720",
    "end": "1370559"
  },
  {
    "text": "again this workflow can be uh you know replayed or the exe state can",
    "start": "1370559",
    "end": "1377039"
  },
  {
    "text": "be placed into into right before the workflow task was received in a",
    "start": "1377039",
    "end": "1383039"
  },
  {
    "text": "completely different machine uh once we have replayed and put the workflow state into the exact position",
    "start": "1383039",
    "end": "1389600"
  },
  {
    "text": "where we need it we can use the what's next part in order to continue workflow execution from that point on",
    "start": "1389600",
    "end": "1398000"
  },
  {
    "text": "again if this workflow history can place the state in the same uh state it was before it was it's",
    "start": "1398559",
    "end": "1405520"
  },
  {
    "text": "called deterministic so we can move on with the uh with the execution if the event history",
    "start": "1405520",
    "end": "1411600"
  },
  {
    "text": "does not match for example we made some changes to our code without versioning it we can run into some",
    "start": "1411600",
    "end": "1417200"
  },
  {
    "text": "non-deterministic errors as well and temporal survey will let you know and still give you the chance to fix the",
    "start": "1417200",
    "end": "1423120"
  },
  {
    "text": "error and not just fail your workflows so let's take a look now at service orchestration this is kind of like a",
    "start": "1423120",
    "end": "1429440"
  },
  {
    "start": "1426000",
    "end": "1426000"
  },
  {
    "text": "common way where we have let's say a food delivery service written in any programming language for which temple",
    "start": "1429440",
    "end": "1435600"
  },
  {
    "text": "has sdks where we want to basically with the use of temporal server orchestration",
    "start": "1435600",
    "end": "1440640"
  },
  {
    "text": "third-party services on the right-hand side like dispatch service restaurant service payment service and things like",
    "start": "1440640",
    "end": "1446480"
  },
  {
    "text": "that so with temporal you can deal with intermittent failures uh meaning that if",
    "start": "1446480",
    "end": "1452240"
  },
  {
    "text": "some of those third per party services are down uh does not mean that we have to um",
    "start": "1452240",
    "end": "1458720"
  },
  {
    "text": "fail uh if that happens or doesn't really mean that we have to write any code in order to deal with these",
    "start": "1458720",
    "end": "1464000"
  },
  {
    "text": "particular errors uh with temporal server and it's as the case you can deal",
    "start": "1464000",
    "end": "1469600"
  },
  {
    "text": "with intermittent failures without any worry and you can actually fix those errors",
    "start": "1469600",
    "end": "1475520"
  },
  {
    "text": "and and for example issue retries until those particular services come back up and are available another",
    "start": "1475520",
    "end": "1482880"
  },
  {
    "text": "things that we temporal provides this dealing with continuing failure let's say in this case our payment service is down and",
    "start": "1482880",
    "end": "1489120"
  },
  {
    "text": "it's not coming back up in this case we can deal with this error and actually do things like compensate",
    "start": "1489120",
    "end": "1495760"
  },
  {
    "text": "our workflow and do some other things in order to to deal with this particular",
    "start": "1495760",
    "end": "1502080"
  },
  {
    "text": "permanent or continuing failure as well another thing that temporal allows you to do is rate limit the services you're",
    "start": "1502080",
    "end": "1509440"
  },
  {
    "text": "invoking so even though in this case these are third party and we don't",
    "start": "1509440",
    "end": "1514480"
  },
  {
    "text": "particularly have anything to do with the code or the services itself we're just using them we still through",
    "start": "1514480",
    "end": "1520640"
  },
  {
    "text": "temporal server can rate limit so for example if the payment service has a cost associated with it and we don't",
    "start": "1520640",
    "end": "1527440"
  },
  {
    "text": "want to go for example over 100 invoking 100 times per second or per day or",
    "start": "1527440",
    "end": "1532640"
  },
  {
    "text": "whatever the time is you can define this rate limiting in your application and",
    "start": "1532640",
    "end": "1538159"
  },
  {
    "text": "temporal server will make sure that the rate limit operations are falling",
    "start": "1538159",
    "end": "1545120"
  },
  {
    "text": "another kind of way of looking at this is let's say we have two services that both",
    "start": "1545120",
    "end": "1551519"
  },
  {
    "text": "are talking through the temporal server food delivery service and let's start dispatch service in this case we can",
    "start": "1552480",
    "end": "1559840"
  },
  {
    "text": "rate limit our applications ourselves so we can define rate limiting in our own service code",
    "start": "1559840",
    "end": "1565760"
  },
  {
    "text": "we can still deal with error and propagation across the services so as in before where we had",
    "start": "1565760",
    "end": "1573600"
  },
  {
    "text": "third-party services we had to deal with things like http errors like 404 without",
    "start": "1573600",
    "end": "1578880"
  },
  {
    "text": "really having any ability to gain some specific errors if you have different services that are using temporal you can",
    "start": "1578880",
    "end": "1586559"
  },
  {
    "text": "have very very powerful error handling and propagation that we will see here in a minute in addition to that uh one",
    "start": "1586559",
    "end": "1593840"
  },
  {
    "text": "service that we write with temporal can be written in let's say go and the other service that we write that might be a",
    "start": "1593840",
    "end": "1599600"
  },
  {
    "text": "different team could be right in written in node.js and really in addition to what we can do",
    "start": "1599600",
    "end": "1608320"
  },
  {
    "start": "1603000",
    "end": "1603000"
  },
  {
    "text": "is we can have uh even further where our workflow for example could be written in one language",
    "start": "1608320",
    "end": "1614559"
  },
  {
    "text": "our worker can be written in a different language and on the service b side we can have",
    "start": "1614559",
    "end": "1619760"
  },
  {
    "text": "our activities again written in different so as far as the polyglot aspects go the temporal server is able",
    "start": "1619760",
    "end": "1626559"
  },
  {
    "text": "to serialize and deserialize the data and also workflow information so that we",
    "start": "1626559",
    "end": "1632320"
  },
  {
    "text": "can have this polyglot type of uh infra collaboration and communication",
    "start": "1632320",
    "end": "1638240"
  },
  {
    "text": "including um error message and propagation and things like that across distributed services in different",
    "start": "1638240",
    "end": "1645039"
  },
  {
    "text": "programming languages as well so let's take a look at this for a minute at um as far as polyglot goes",
    "start": "1645039",
    "end": "1652240"
  },
  {
    "text": "as far as air handling let's see on the left hand side we have our food service in our workflow",
    "start": "1652240",
    "end": "1658240"
  },
  {
    "text": "and activity written in go and our our application starts by making instance of our food delivery workflow this workflow",
    "start": "1658240",
    "end": "1665840"
  },
  {
    "text": "let's say calls our activity and then this activity through the temporal server and in the",
    "start": "1665840",
    "end": "1671760"
  },
  {
    "text": "sdk apis client apis invokes the restaurant service that's written in node.js and",
    "start": "1671760",
    "end": "1678399"
  },
  {
    "text": "the same thing here we go again and the restaurant service activity invokes uh the payment service activity",
    "start": "1678399",
    "end": "1687120"
  },
  {
    "text": "which is in this case let's say written in php now in systems or distributed systems like this",
    "start": "1687120",
    "end": "1693120"
  },
  {
    "text": "um let's say in our payment service we have an error or an exception happens",
    "start": "1693120",
    "end": "1698799"
  },
  {
    "text": "typically you know our food delivery service is going to have no idea what actually",
    "start": "1698799",
    "end": "1704240"
  },
  {
    "text": "happened and will not be able to receive the proper information of what",
    "start": "1704240",
    "end": "1709760"
  },
  {
    "text": "where and how things broke in order to be able to let's say compensate for it or fix the",
    "start": "1709760",
    "end": "1716559"
  },
  {
    "text": "air when you're using temporal the payment service actually we has through the temporal server error",
    "start": "1716559",
    "end": "1723919"
  },
  {
    "text": "propagation so we are going to propagate that error from php uh to the restaurant",
    "start": "1723919",
    "end": "1730880"
  },
  {
    "text": "service retinue node.js then we can propagate that air back to the restaurant service workflow and then",
    "start": "1730880",
    "end": "1738240"
  },
  {
    "text": "back to the full delivery service um which is again written in go and it's workflow so when this error propagates",
    "start": "1738240",
    "end": "1745360"
  },
  {
    "text": "back all the way to where we started uh our our execution this area is going to",
    "start": "1745360",
    "end": "1752240"
  },
  {
    "text": "be able to have all the details specifically the servers that have failed",
    "start": "1752240",
    "end": "1757600"
  },
  {
    "text": "all the information that the payments is added to the exception as well as the original exception and all these things",
    "start": "1757600",
    "end": "1764960"
  },
  {
    "text": "that do for example the restaurant service added to the air and again when we catch",
    "start": "1764960",
    "end": "1770320"
  },
  {
    "text": "this error and get it back in our food delivery service we know exactly what failed um and how to deal with a",
    "start": "1770320",
    "end": "1777039"
  },
  {
    "text": "particular air all right so we come to the demo part in this case i wanted to demo the resilient server orchestration",
    "start": "1777039",
    "end": "1784399"
  },
  {
    "start": "1778000",
    "end": "1778000"
  },
  {
    "text": "by showing actually a temporal workflow that invokes similarly to we've seen in the slides before",
    "start": "1784399",
    "end": "1790640"
  },
  {
    "text": "a couple of our services so in this case we have a patient onboarding workflow",
    "start": "1790640",
    "end": "1796000"
  },
  {
    "text": "and below is the url github url where you can um",
    "start": "1796000",
    "end": "1801840"
  },
  {
    "text": "clone it and run this project yourself all right so let's get started",
    "start": "1801840",
    "end": "1808960"
  },
  {
    "text": "in our case what we have is first our services",
    "start": "1808960",
    "end": "1814799"
  },
  {
    "text": "so let's go ahead and show you that we have a patient onboarding service",
    "start": "1814799",
    "end": "1821919"
  },
  {
    "text": "which has three endpoints assign a doctor assign a hospital and notify a",
    "start": "1821919",
    "end": "1827919"
  },
  {
    "text": "patient so basically with the service that we want to write or the core business logic is to invoke this",
    "start": "1827919",
    "end": "1834960"
  },
  {
    "text": "particular or orchestrating locations of the patient onboarding service and it endpoints in order to onboard",
    "start": "1834960",
    "end": "1842640"
  },
  {
    "text": "a customer we also have an application that we're running that's running our workflow so let's take a look at the",
    "start": "1842640",
    "end": "1848720"
  },
  {
    "text": "workflow itself the workflow is written in java it's an onboarding implementation and it",
    "start": "1848720",
    "end": "1854960"
  },
  {
    "text": "basically has a bunch of different activities that executing in order so",
    "start": "1854960",
    "end": "1860000"
  },
  {
    "text": "first we're going to assign hospital to a patient we're going to assign a doctor to a patient we're going to notify the",
    "start": "1860000",
    "end": "1866320"
  },
  {
    "text": "patient um that you know we have assigned them to a doctor and uh",
    "start": "1866320",
    "end": "1873279"
  },
  {
    "text": "the hospital and finally we have a final onboarding step that we want to perform",
    "start": "1873279",
    "end": "1879279"
  },
  {
    "text": "um so let's take a look at our application also has a ui",
    "start": "1879279",
    "end": "1885600"
  },
  {
    "text": "so our ui is basically you know very simple we have some patient information so let's say we have a customer called a",
    "start": "1885600",
    "end": "1892960"
  },
  {
    "text": "patient called john um let's see he has a zip condition",
    "start": "1892960",
    "end": "1898080"
  },
  {
    "text": "so they have asthma john at com and let's say 555",
    "start": "1898080",
    "end": "1906320"
  },
  {
    "text": "and prefer contact method is text so once we actually press this on board impatient",
    "start": "1906320",
    "end": "1913519"
  },
  {
    "text": "we're going to communicate with the temporal server to ask you for a creation of a workflow instance",
    "start": "1913519",
    "end": "1920240"
  },
  {
    "text": "um our application here that also hosts our workflow and activities and the workflow worker is going to pick up the",
    "start": "1920240",
    "end": "1926080"
  },
  {
    "text": "task from the temporal server and execute this particular workflow so let's go ahead",
    "start": "1926080",
    "end": "1931519"
  },
  {
    "text": "and do that as we do that ui shows all the activities so for example we are signing currently hospital to john we're",
    "start": "1931519",
    "end": "1938960"
  },
  {
    "text": "signing a doctor and this is again per our instructions in the workflow",
    "start": "1938960",
    "end": "1944960"
  },
  {
    "text": "we're notifying the patient and then we're going to finalize the on board once we're done",
    "start": "1944960",
    "end": "1952080"
  },
  {
    "text": "with that we can see that our ui updated and we see that our patient john was",
    "start": "1952080",
    "end": "1958080"
  },
  {
    "text": "assigned a hospital and a doctor it has been successfully onboarded uh if we look at",
    "start": "1958080",
    "end": "1965760"
  },
  {
    "text": "the temporal web ui we also see for example that we have a",
    "start": "1965760",
    "end": "1971120"
  },
  {
    "text": "particular workflow that is in status complete it's our onboarding workflow",
    "start": "1971120",
    "end": "1976240"
  },
  {
    "text": "and we also can have the history such as we can see the input which is the form input that we typed into our form as",
    "start": "1976240",
    "end": "1983120"
  },
  {
    "text": "well as can see the results there also we displayed on the page in addition as we talked about this is the actual",
    "start": "1983120",
    "end": "1989440"
  },
  {
    "text": "history of all the execution information that was stored within the temporal server and is able to",
    "start": "1989440",
    "end": "1996399"
  },
  {
    "text": "have the ability to actually resume workflows from a particular failure so let's go ahead and do this one more time",
    "start": "1996399",
    "end": "2003760"
  },
  {
    "text": "let's say we have mary let's say they have headaches",
    "start": "2003760",
    "end": "2011440"
  },
  {
    "text": "uh and i'm just gonna type in something here now what we want to do is show failure",
    "start": "2011440",
    "end": "2018720"
  },
  {
    "text": "so let's say for example we start our workflow execution and we're going to stop or fail our services",
    "start": "2018720",
    "end": "2026880"
  },
  {
    "text": "during the execution or workflow so what we have done the services their workforce has to communicate to uh have",
    "start": "2026880",
    "end": "2035360"
  },
  {
    "text": "an intermittent failure as you have seen here our ui has stopped showing progress and",
    "start": "2035360",
    "end": "2041039"
  },
  {
    "text": "we don't have this patient on board now if we look at the temporal web ui we see that",
    "start": "2041039",
    "end": "2046880"
  },
  {
    "text": "even though our services have failed we have not failed our workflow execution and we still see the onboarding workflow",
    "start": "2046880",
    "end": "2053280"
  },
  {
    "text": "in this case the new one is running so let's go ahead and bring our services back up let's say",
    "start": "2053280",
    "end": "2059839"
  },
  {
    "text": "our failure has been fixed and let's see what happens and again we",
    "start": "2059839",
    "end": "2065760"
  },
  {
    "text": "did not write any code for this we did not have to specify in our workflow anything this comes by default by using",
    "start": "2065760",
    "end": "2072240"
  },
  {
    "text": "temporal and let's see if temporal is able to deal with a failure see now our workflow",
    "start": "2072240",
    "end": "2078079"
  },
  {
    "text": "has resumed once our services came back up we were retrying basically our workflow was retrying to invoke these",
    "start": "2078079",
    "end": "2084960"
  },
  {
    "text": "activities as soon as they're back up the retry stopped and we were able to",
    "start": "2084960",
    "end": "2091760"
  },
  {
    "text": "onboard mary into our system and again if we look here we can see now",
    "start": "2092000",
    "end": "2098720"
  },
  {
    "text": "that our workflow has completed all right that's all i had for today i hope you guys enjoyed i hope you enjoy the",
    "start": "2098720",
    "end": "2105200"
  },
  {
    "text": "conference and have a great day thank you bye",
    "start": "2105200",
    "end": "2110680"
  }
]