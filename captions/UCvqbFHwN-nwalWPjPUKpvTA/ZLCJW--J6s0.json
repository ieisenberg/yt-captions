[
  {
    "text": "hello everyone and welcome to the talk titled uh bringing spify to Linker for mesh",
    "start": "160",
    "end": "7600"
  },
  {
    "text": "expansion and in this talk we are going to take a look at how linkerd the service mesh augmented its identity",
    "start": "7600",
    "end": "14799"
  },
  {
    "text": "system in order to allow for uh meshing external workloads or actually making",
    "start": "14799",
    "end": "21080"
  },
  {
    "text": "workloads that are not part of kubernetes part of the mesh um my name is zahari DV and I'm a",
    "start": "21080",
    "end": "29279"
  },
  {
    "text": "software engineer at buyant uh the creators of linker and if you ever want to connect or chat you can always reach",
    "start": "29279",
    "end": "35600"
  },
  {
    "text": "me on any of these channels I'm always happy to chat so in this talk we are",
    "start": "35600",
    "end": "41320"
  },
  {
    "text": "going to um first of all take a look at make the case for mesh expansion so what",
    "start": "41320",
    "end": "48280"
  },
  {
    "text": "is it and why might organizations actually need that",
    "start": "48280",
    "end": "53480"
  },
  {
    "text": "functionality and then we are going to look at why workload identity matters",
    "start": "53480",
    "end": "60079"
  },
  {
    "text": "both within and outside of the cluster and what are the guarantees that you get",
    "start": "60079",
    "end": "66240"
  },
  {
    "text": "with the encryption and identity that's implemented in modern service meshes",
    "start": "66240",
    "end": "72360"
  },
  {
    "text": "we're going to take a look at how that specifically Works in Linker D so with mtls and we are going to discuss some of",
    "start": "72360",
    "end": "79400"
  },
  {
    "text": "the challenges that appear once you once you cross the boundary and you",
    "start": "79400",
    "end": "85320"
  },
  {
    "text": "end up on a bare metal machine that's not part of kubernetes",
    "start": "85320",
    "end": "90600"
  },
  {
    "text": "and then we are going to look at how we use spire and spiffy and leverage this",
    "start": "90600",
    "end": "96119"
  },
  {
    "text": "technology in order to solve these problems and hopefully at the end we can have some time for a Q&A if you want to",
    "start": "96119",
    "end": "101720"
  },
  {
    "text": "ask questions about any of that so first of all let's actually um take a look at",
    "start": "101720",
    "end": "108280"
  },
  {
    "text": "what is mesh expansion and why organizations might need that so really",
    "start": "108280",
    "end": "115119"
  },
  {
    "text": "if I have to put it succinctly um mesh expansion is the process of actually um",
    "start": "115119",
    "end": "121560"
  },
  {
    "text": "making non- kubernetes workloads part of the service mesh and the main motivation",
    "start": "121560",
    "end": "129039"
  },
  {
    "text": "for doing that is to enable hybrid Cloud infrastructure scenarios where you have",
    "start": "129039",
    "end": "135239"
  },
  {
    "text": "part of your infrastructure on let's say bare metal machines or om",
    "start": "135239",
    "end": "140680"
  },
  {
    "text": "Prem boxes uh but you want to be able to connect uh this infrastructure to",
    "start": "140680",
    "end": "148560"
  },
  {
    "text": "kubernetes and the workloads in kubernetes communicate with it as if this infrastructure was native",
    "start": "148560",
    "end": "156160"
  },
  {
    "text": "kubernetes workloads and this is really for the reason to kind of gain this uh",
    "start": "156160",
    "end": "163760"
  },
  {
    "text": "to to to be able to be generic over the specifics of of your infrastructure so",
    "start": "163760",
    "end": "168879"
  },
  {
    "text": "whether this is whether this workload is hosted on a local data center or on the",
    "start": "168879",
    "end": "174640"
  },
  {
    "text": "cloud like that shouldn't really matter you should still be able to get all the",
    "start": "174640",
    "end": "179879"
  },
  {
    "text": "nice things that you get when you're Ser using a service mesh namely um security",
    "start": "179879",
    "end": "185760"
  },
  {
    "text": "guarantees reliability features such as uh circuit breaking load balancing uh",
    "start": "185760",
    "end": "192680"
  },
  {
    "text": "traffic policy and all of that so what are some of the specific scenarios that kind of motivates the you know using uh",
    "start": "192680",
    "end": "201599"
  },
  {
    "text": "a hybrid Cloud infrastructure and they're by mesh expansion well there are a few distinct",
    "start": "201599",
    "end": "207760"
  },
  {
    "text": "cases and I'm sure there are more but this is what we're going to look at uh so first of all there is the case for",
    "start": "207760",
    "end": "213439"
  },
  {
    "text": "the integration of edge devices so nowadays there are a lot of organizations that manage fleets of",
    "start": "213439",
    "end": "220360"
  },
  {
    "text": "devices that just cannot run on kubernetes so you know they're like out",
    "start": "220360",
    "end": "225959"
  },
  {
    "text": "in the field sensors that run on Specialized Hardware that you know you just can't run in",
    "start": "225959",
    "end": "231760"
  },
  {
    "text": "kubernetes um another reason is um cost",
    "start": "231760",
    "end": "237200"
  },
  {
    "text": "optimization and the use of specialized Hardware so you know again there are organizations that need to use Hardware",
    "start": "237200",
    "end": "244760"
  },
  {
    "text": "that's either not available from cloud vendors or it is kind of prohibitively",
    "start": "244760",
    "end": "250439"
  },
  {
    "text": "expensive to obtain and then there is the case for incremental infrastructure",
    "start": "250439",
    "end": "255600"
  },
  {
    "text": "modernization where organizations are trying to Shi to the cloud gradually and",
    "start": "255600",
    "end": "260720"
  },
  {
    "text": "they want to migrate just part of their stack to kubernetes so let's actually",
    "start": "260720",
    "end": "265840"
  },
  {
    "text": "look at like how each one of these might look like from an architecture perspective persective so let's say",
    "start": "265840",
    "end": "272000"
  },
  {
    "text": "you're working for an organization that um has a KS cluster and there is uh a",
    "start": "272000",
    "end": "277960"
  },
  {
    "text": "bunch of services there that their purpose is to communicate with uh Edge",
    "start": "277960",
    "end": "284400"
  },
  {
    "text": "devices and you have your team working um with like a dashboard that uses some",
    "start": "284400",
    "end": "291440"
  },
  {
    "text": "of these services in order to um observe these devices so you know look at health",
    "start": "291440",
    "end": "297919"
  },
  {
    "text": "health data that's been sent by the devices uh and all sorts of um",
    "start": "297919",
    "end": "303880"
  },
  {
    "text": "monitoring data around this and then on the other end you have devices such as",
    "start": "303880",
    "end": "308960"
  },
  {
    "text": "like watches that might be using some services in your cluster you have mobile",
    "start": "308960",
    "end": "314440"
  },
  {
    "text": "phones that are also need secure and reliable connection to the cluster and",
    "start": "314440",
    "end": "319560"
  },
  {
    "text": "you might even have software that actually runs on cars that also needs to",
    "start": "319560",
    "end": "324680"
  },
  {
    "text": "talk to the cluster so naturally like these things cannot um live on the cluster but you still want to expose the",
    "start": "324680",
    "end": "332120"
  },
  {
    "text": "cluster to them and vice versa then you also might be in a position where you are in need of",
    "start": "332120",
    "end": "339280"
  },
  {
    "text": "specialized hardware and there are organizations that namely financial institution",
    "start": "339280",
    "end": "345280"
  },
  {
    "text": "organizations that use data from providers such as Bloomberg and Reuters",
    "start": "345280",
    "end": "350639"
  },
  {
    "text": "and the likes and they're in the business of gathering large volumes of financial data so say prices that for",
    "start": "350639",
    "end": "358000"
  },
  {
    "text": "example might land in your kubernetes cluster where they are per persistent in a database and you have some analytic",
    "start": "358000",
    "end": "365880"
  },
  {
    "text": "services that is supposed to actually work with that data and you have a bunch",
    "start": "365880",
    "end": "371280"
  },
  {
    "text": "of clients in your organization that are using the service to compute some",
    "start": "371280",
    "end": "377960"
  },
  {
    "text": "statistical models on that data and we're talking about stuff like Monte Carlo simulations or heavy Ai workloads",
    "start": "377960",
    "end": "384840"
  },
  {
    "text": "and a lot of these workloads are fitted particularly well for",
    "start": "384840",
    "end": "390080"
  },
  {
    "text": "uh running on Specialized Hardware so either specialized GPU chips or as they",
    "start": "390080",
    "end": "396759"
  },
  {
    "text": "call them AI chips and you could be in a position where you want to host some of",
    "start": "396759",
    "end": "403400"
  },
  {
    "text": "that Hardware in your local on Prem infrastructure and not in a public Cloud",
    "start": "403400",
    "end": "408919"
  },
  {
    "text": "because it's either very expensive in the cloud or they just don't have this these these uh pieces of Hardware there",
    "start": "408919",
    "end": "416360"
  },
  {
    "text": "or you want to tweak something specifically uh and be able to to kind",
    "start": "416360",
    "end": "421400"
  },
  {
    "text": "of manage it yourself and you know but you still want this analytic service for",
    "start": "421400",
    "end": "428199"
  },
  {
    "text": "example like in this case to be able to talk to this box this Hardware box and",
    "start": "428199",
    "end": "434879"
  },
  {
    "text": "be able to get the advantage of the fact that you're using a service machine kubernetes also there is the case for",
    "start": "434879",
    "end": "442160"
  },
  {
    "text": "cloud migration so you know there's a number of organizations that um still",
    "start": "442160",
    "end": "449000"
  },
  {
    "text": "are running rning quite Legacy software on Prem so things like Cobble Services Mainframe apis and and I know we most of",
    "start": "449000",
    "end": "457160"
  },
  {
    "text": "us here probably live in this world where we are all running stuff on someone else's computer in the cloud and",
    "start": "457160",
    "end": "462800"
  },
  {
    "text": "and and and it's all virtualized but but this other world exists where there's",
    "start": "462800",
    "end": "467919"
  },
  {
    "text": "organizations that are Legacy in nature and in their Tech stack and they ideally want to move uh to the cloud using",
    "start": "467919",
    "end": "475479"
  },
  {
    "text": "kubernetes cluster and often times what what they do is they they can't just run",
    "start": "475479",
    "end": "481879"
  },
  {
    "text": "this migration from day 0 to one because it's just a big bank it's very risky so",
    "start": "481879",
    "end": "487800"
  },
  {
    "text": "they would kind of try and shift some of these Services onto the cluster root their traffic through an",
    "start": "487800",
    "end": "495240"
  },
  {
    "text": "API Gateway or something and just set up the grounds for this more modern infrastructure and then",
    "start": "495240",
    "end": "502360"
  },
  {
    "text": "gradually uh migrate their infrastructure to kubernetes but uh",
    "start": "502360",
    "end": "509520"
  },
  {
    "text": "while they're doing that they need connection to their legacy infrastructure in order to support operations and this way they could be",
    "start": "509520",
    "end": "517399"
  },
  {
    "text": "very strategic about uh when they are doing this migration how they're doing it at what pace and this gives them",
    "start": "517399",
    "end": "524560"
  },
  {
    "text": "optionality which is important so with all of these things",
    "start": "524560",
    "end": "531160"
  },
  {
    "text": "being said there is one theme that is kind of recurringly appears um and this",
    "start": "531160",
    "end": "536680"
  },
  {
    "text": "is the need for workload identity and security and encryption on this traffic",
    "start": "536680",
    "end": "542240"
  },
  {
    "text": "that is flying outside of your kubernetes cluster and the way modern service",
    "start": "542240",
    "end": "548399"
  },
  {
    "text": "measures Implement uh this is through uh mostly through TLS right so um and this",
    "start": "548399",
    "end": "556560"
  },
  {
    "text": "is nice because it gives you a certain number of properties that you know if",
    "start": "556560",
    "end": "562320"
  },
  {
    "text": "you don't have them you can get yourself into quite hairy situations so the first",
    "start": "562320",
    "end": "567839"
  },
  {
    "text": "thing that you get because of clot identity and encryption with a service mesh is authenticity and this really",
    "start": "567839",
    "end": "575800"
  },
  {
    "text": "is the idea that uh the parties on each side of uh the connection can prove that",
    "start": "575800",
    "end": "584680"
  },
  {
    "text": "they are who they say they are and this is important because if you actually don't have that what could end",
    "start": "584680",
    "end": "591760"
  },
  {
    "text": "up happening is that you could have an attacker so imagine like this service in a kubernetes cluster tries to talk to",
    "start": "591760",
    "end": "598680"
  },
  {
    "text": "some smart watch well if you don't have a principled way of identifying this",
    "start": "598680",
    "end": "604079"
  },
  {
    "text": "particular piece of Hardware then you're exposed to attacks where another another",
    "start": "604079",
    "end": "611079"
  },
  {
    "text": "actor could pretend to be that that piece of Hardware you also get confidentiality",
    "start": "611079",
    "end": "618079"
  },
  {
    "text": "which really is um the guarantee that no one could actually just read the data",
    "start": "618079",
    "end": "625720"
  },
  {
    "text": "that you're sending and of course if you don't have that you end up again in a situation",
    "start": "625720",
    "end": "632000"
  },
  {
    "text": "where somebody could listen in on your data and for some particular Industries this is",
    "start": "632000",
    "end": "638680"
  },
  {
    "text": "absolutely prohibitive so Industries like healthcare and defense that are heavily regulated like they can't allow",
    "start": "638680",
    "end": "645639"
  },
  {
    "text": "themselves to be in this situation you also get Integrity which",
    "start": "645639",
    "end": "650720"
  },
  {
    "text": "means that because you get a cryptographic Integrity that um helps",
    "start": "650720",
    "end": "656920"
  },
  {
    "text": "you verify the fact that that same data that is received is the data that was",
    "start": "656920",
    "end": "663600"
  },
  {
    "text": "sent and of course if you actually don't have that you could end up with man in",
    "start": "663600",
    "end": "669800"
  },
  {
    "text": "the middle attacks that allow a third party to kind of intercept and tamper",
    "start": "669800",
    "end": "675160"
  },
  {
    "text": "with your data which as you probably might imagine can lead to quite a lot of",
    "start": "675160",
    "end": "680320"
  },
  {
    "text": "bad outcomes so on top of that when you have",
    "start": "680320",
    "end": "685880"
  },
  {
    "text": "mtls you also get authorization which means is that you can attribute",
    "start": "685880",
    "end": "691240"
  },
  {
    "text": "granular access policies to certain clients so for example you can if you",
    "start": "691240",
    "end": "698200"
  },
  {
    "text": "know and can identify this particular instance of a piece of Hardware you can",
    "start": "698200",
    "end": "704320"
  },
  {
    "text": "configure the system to only allow traffic to one service originating from this from this uh pier and B traffic to",
    "start": "704320",
    "end": "714320"
  },
  {
    "text": "another service",
    "start": "714320",
    "end": "720360"
  },
  {
    "text": "so really let's actually talk about how this is currently implemented in Linker",
    "start": "720360",
    "end": "729040"
  },
  {
    "text": "so how do we actually achieve identity in Linker and how does it work with um",
    "start": "729040",
    "end": "737440"
  },
  {
    "text": "kubernetes specifically so identity in linkerd is effectively mtls so mutual",
    "start": "737440",
    "end": "744600"
  },
  {
    "text": "TLS for both client and server identities Linker uses uh short lift",
    "start": "744600",
    "end": "751079"
  },
  {
    "text": "x509 TLS certificates that each proxy is issued and that are rotated",
    "start": "751079",
    "end": "758240"
  },
  {
    "text": "periodically I think like every 24 hours or so and this document essentially the",
    "start": "758240",
    "end": "765720"
  },
  {
    "text": "certificate is used obviously for both like proving the identity of the workload to its peer and also um",
    "start": "765720",
    "end": "775560"
  },
  {
    "text": "encryption of the data so the identity attestation framework that Linker uses",
    "start": "775560",
    "end": "781279"
  },
  {
    "text": "is based on service account tokens so when I say identity attestation I mean that it is the",
    "start": "781279",
    "end": "788519"
  },
  {
    "text": "service account token is the principal way of a workload proving its identity",
    "start": "788519",
    "end": "794839"
  },
  {
    "text": "and kind of ensuring that it deserves to be given a",
    "start": "794839",
    "end": "801839"
  },
  {
    "text": "certificate and because both client and servers are you know authenticated",
    "start": "801839",
    "end": "807480"
  },
  {
    "text": "because this is a mtls con connection then you can apply traffic policies obviously on both ends so how does that",
    "start": "807480",
    "end": "814040"
  },
  {
    "text": "work in practice at the moment in kubernetes well whenever a pot starts",
    "start": "814040",
    "end": "821079"
  },
  {
    "text": "up you actually end up with a service account for the spot that uh is uh",
    "start": "821079",
    "end": "828560"
  },
  {
    "text": "either the default one or a specified one that you've configured now the service",
    "start": "828560",
    "end": "833839"
  },
  {
    "text": "account a service account token is issued based on the service account and",
    "start": "833839",
    "end": "839120"
  },
  {
    "text": "and it's mounted onto the file system of the pot so when the pot when the proxy",
    "start": "839120",
    "end": "844360"
  },
  {
    "text": "fires up initially one of the first thing it does is that well obviously it",
    "start": "844360",
    "end": "849759"
  },
  {
    "text": "needs a TLS certificate in order to talk to other peers so what it's going to do is that it's going to generate a private",
    "start": "849759",
    "end": "856519"
  },
  {
    "text": "key that never leaves the spot uh that is going to use for the certificate and",
    "start": "856519",
    "end": "862320"
  },
  {
    "text": "it's going to generate a certificate signing request essentially saying Okay I uh to to the",
    "start": "862320",
    "end": "870880"
  },
  {
    "text": "Upstream Authority that it needs a particular certificate with a particular identity and this identity is",
    "start": "870880",
    "end": "878040"
  },
  {
    "text": "based on the service account so it's the name of the service account do uh",
    "start": "878040",
    "end": "883279"
  },
  {
    "text": "namespace do service. cluster domain so now what it's going to do is that it's",
    "start": "883279",
    "end": "888600"
  },
  {
    "text": "going to package both the CSR so the certificate signing request and the",
    "start": "888600",
    "end": "893759"
  },
  {
    "text": "token and it's going to send them to the control plane to the identity service that's the Upstream",
    "start": "893759",
    "end": "900880"
  },
  {
    "text": "CA now this identity service needs to ensure that uh this workload actually is",
    "start": "900880",
    "end": "910399"
  },
  {
    "text": "the workload that it says it is because anyone can send a certificate signing request to it with some demands in order",
    "start": "910399",
    "end": "918279"
  },
  {
    "text": "to do that it checks the service account token that's part of the request with",
    "start": "918279",
    "end": "925040"
  },
  {
    "text": "the kubernetes API and essentially it's looking for the answer well does this service account token belong to this",
    "start": "925040",
    "end": "932480"
  },
  {
    "text": "service account that I'm being asked to issue an identity for and if that is the case and that's green",
    "start": "932480",
    "end": "939519"
  },
  {
    "text": "lit it replies back with a x509 certificate that contains the identity",
    "start": "939519",
    "end": "945759"
  },
  {
    "text": "in a DNS like form in the uh subject",
    "start": "945759",
    "end": "950920"
  },
  {
    "text": "alternative name the DNS subject alternative name metadata of the",
    "start": "950920",
    "end": "956360"
  },
  {
    "text": "certificate this certificate is used as follows uh when a proxy initiates",
    "start": "956360",
    "end": "962279"
  },
  {
    "text": "connection to another proxy first of all the server presents its certificate um",
    "start": "962279",
    "end": "967759"
  },
  {
    "text": "the client verifies that certificate in order to ensure that indeed the peer",
    "start": "967759",
    "end": "973759"
  },
  {
    "text": "that it's talking to is the peer that it intended to talk to right so when that's",
    "start": "973759",
    "end": "980800"
  },
  {
    "text": "when that's done um it's the opposite way around the Cent presents the TLs certificate so that's like normal mtls",
    "start": "980800",
    "end": "986880"
  },
  {
    "text": "handshake the Cent presents its certificate and the server verifies it with the",
    "start": "986880",
    "end": "992240"
  },
  {
    "text": "trust roots cryptographic cryptographically and it parses it and when it parses it it extracts the",
    "start": "992240",
    "end": "998360"
  },
  {
    "text": "identity of the client so now it knows which particular client is talking to it",
    "start": "998360",
    "end": "1003759"
  },
  {
    "text": "and it can consult the control plan for traffic policies and essentially",
    "start": "1003759",
    "end": "1009160"
  },
  {
    "text": "determine whether this particular traffic should be allowed so you know there could be a",
    "start": "1009160",
    "end": "1016000"
  },
  {
    "text": "policy that allows traffic only on port 8080 from this set of GS identities on this",
    "start": "1016000",
    "end": "1022319"
  },
  {
    "text": "particular HTTP path so it's like this kind of this kind of policies are also",
    "start": "1022319",
    "end": "1027600"
  },
  {
    "text": "up kind of layer seven aware so they protocol aware policies so this is all",
    "start": "1027600",
    "end": "1034319"
  },
  {
    "text": "great in terms of security right we get we get uh identity we can attribute",
    "start": "1034319",
    "end": "1041160"
  },
  {
    "text": "policy to it we get encryption and it has been working for a",
    "start": "1041160",
    "end": "1047280"
  },
  {
    "text": "while quite nicely in kubernetes now what happens about workloads that",
    "start": "1047280",
    "end": "1054600"
  },
  {
    "text": "are living outside of kubernetes though now the moment you cross that bridge you",
    "start": "1054600",
    "end": "1060240"
  },
  {
    "text": "end up with a couple of problems so first of all um there is no real way for an",
    "start": "1060240",
    "end": "1069600"
  },
  {
    "text": "external bare metal VM to attest its identity to the control plane because",
    "start": "1069600",
    "end": "1075919"
  },
  {
    "text": "you know it doesn't possess a service account token which is the main mechanism for attesting an identity and",
    "start": "1075919",
    "end": "1081159"
  },
  {
    "text": "getting a certificate and you know that makes it kind of hard to obtain a certificate",
    "start": "1081159",
    "end": "1088480"
  },
  {
    "text": "which makes everything else hard because you kind of need TLS to to to actually",
    "start": "1088480",
    "end": "1093600"
  },
  {
    "text": "be part of the mesh and get all the benefits so what are some of the potential solutions to that problem well",
    "start": "1093600",
    "end": "1100440"
  },
  {
    "text": "for starters um you could use some mechanism for manually provisioning TLS",
    "start": "1100440",
    "end": "1107000"
  },
  {
    "text": "certificates to these boxes which is not ideal because you know the whole like part of",
    "start": "1107000",
    "end": "1115200"
  },
  {
    "text": "the reason part of the appeal for using a service mesh is that you get certificate management for free like you",
    "start": "1115200",
    "end": "1121760"
  },
  {
    "text": "don't really need to care about rotating these certificates how long they're going to last what's the chain where is",
    "start": "1121760",
    "end": "1128080"
  },
  {
    "text": "the ca you kind of get it for free now you and you want to keep that because",
    "start": "1128080",
    "end": "1133640"
  },
  {
    "text": "this is error prone stuff especially at scale you can manually distribute service account token",
    "start": "1133640",
    "end": "1139240"
  },
  {
    "text": "so you know you could actually use the cetes API in order to",
    "start": "1139240",
    "end": "1145960"
  },
  {
    "text": "get yourself a service account token for a particular service account and just put it on the box that you want want to",
    "start": "1145960",
    "end": "1153280"
  },
  {
    "text": "mesh uh but then you end up in a situation where how do you actually do that securely like what you need to come",
    "start": "1153280",
    "end": "1159679"
  },
  {
    "text": "up with a process that in order to do that securely and that's hard an error",
    "start": "1159679",
    "end": "1164919"
  },
  {
    "text": "problem especially again at scale cuz it's just one machine yeah you can use use a flash drive right but you know if",
    "start": "1164919",
    "end": "1171400"
  },
  {
    "text": "it's thousands or hundreds of machines that's that's getting harder and harder",
    "start": "1171400",
    "end": "1177559"
  },
  {
    "text": "and and it's also associated with a lot of management costs around like keeping",
    "start": "1177559",
    "end": "1183600"
  },
  {
    "text": "track of rotating and the expiration of these tokens you can use other",
    "start": "1183600",
    "end": "1188840"
  },
  {
    "text": "mechanisms such as Cent grants access tokens and J WTS and whatnot um but this",
    "start": "1188840",
    "end": "1194039"
  },
  {
    "text": "is just like a different piece of technology with different attributes",
    "start": "1194039",
    "end": "1199480"
  },
  {
    "text": "um or you could use something that we've leverage which is piffy which is a framework for uh securely authenticating",
    "start": "1199480",
    "end": "1207320"
  },
  {
    "text": "software systems across heterogeneous environments and that's kind of a mouthful but uh really what this gives",
    "start": "1207320",
    "end": "1215159"
  },
  {
    "text": "you is um defines a standard way to prove and obtain workload identities",
    "start": "1215159",
    "end": "1222840"
  },
  {
    "text": "which really is in an Essence a replacement for this attestation bet",
    "start": "1222840",
    "end": "1228919"
  },
  {
    "text": "that we have in kubernetes but we're missing outside of kubernetes and Spire is the reference",
    "start": "1228919",
    "end": "1237080"
  },
  {
    "text": "implementation of this standard um that's we we are we are using in linky",
    "start": "1237080",
    "end": "1243760"
  },
  {
    "text": "now and it has integration with major Cloud providers and Upstream CA so it's very extensible it's very",
    "start": "1243760",
    "end": "1251080"
  },
  {
    "text": "customizable um and it can Cerf identities both in JWT form or x509",
    "start": "1251080",
    "end": "1257880"
  },
  {
    "text": "certificate which is what we actually care about so some of the Core Concepts of",
    "start": "1257880",
    "end": "1264400"
  },
  {
    "text": "this is the spey ID which is a string to uniquely identify uh a workload or a group of",
    "start": "1264400",
    "end": "1271360"
  },
  {
    "text": "workloads and this P ID is similar to what um in purpose to what uh we use in",
    "start": "1271360",
    "end": "1279919"
  },
  {
    "text": "kubernetes with the DNS like identities you've got an svit which is",
    "start": "1279919",
    "end": "1285400"
  },
  {
    "text": "essentially the document that you use in order to prove your identity that's either an x549 certificate or a JWT",
    "start": "1285400",
    "end": "1292799"
  },
  {
    "text": "token and the aset in this case contains the spify ID and you also have like the",
    "start": "1292799",
    "end": "1299159"
  },
  {
    "text": "workload API which runs locally on a Noe that your workloads can use in order to",
    "start": "1299159",
    "end": "1306039"
  },
  {
    "text": "um obtain identity so some of the core components are Aspire server which is responsible",
    "start": "1306039",
    "end": "1313240"
  },
  {
    "text": "for managing and issuing identities based on reg registration entries so you",
    "start": "1313240",
    "end": "1319159"
  },
  {
    "text": "know it it uses note attestation to identify agents that connect to it",
    "start": "1319159",
    "end": "1324720"
  },
  {
    "text": "essentially uh trying to determine the identity of the particular node that the",
    "start": "1324720",
    "end": "1331400"
  },
  {
    "text": "agent is running on and the workload is running on and based on registration entities it could give the correct",
    "start": "1331400",
    "end": "1338679"
  },
  {
    "text": "identity to the node so to the agent. connects and this could be extended with uh Upstream",
    "start": "1338679",
    "end": "1345760"
  },
  {
    "text": "plugins so you could get it to talk to your Upstream CA such as Vault and the",
    "start": "1345760",
    "end": "1351320"
  },
  {
    "text": "likes The Spar agent is what actually runs on the Node and exposes the SP",
    "start": "1351320",
    "end": "1357679"
  },
  {
    "text": "workload API to workloads that uh that that run on this particular note and it",
    "start": "1357679",
    "end": "1363640"
  },
  {
    "text": "serves identity to them um and it performs workload attestation and this",
    "start": "1363640",
    "end": "1369039"
  },
  {
    "text": "is really kind of proving ensuring that the workload that's asking for an",
    "start": "1369039",
    "end": "1374559"
  },
  {
    "text": "identity is indeed the workload that it says it is so if or rather it gives it",
    "start": "1374559",
    "end": "1381279"
  },
  {
    "text": "the identity that's prescribed to the workload so how does that actually how does this attestation work in practice",
    "start": "1381279",
    "end": "1388720"
  },
  {
    "text": "if you don't have a service account to prove uh to prove your identity or if you're not in the possession of a",
    "start": "1388720",
    "end": "1395039"
  },
  {
    "text": "service account token well um so on the Node",
    "start": "1395039",
    "end": "1401640"
  },
  {
    "text": "level essentially you could use selectors that kind of tie very well",
    "start": "1401640",
    "end": "1406919"
  },
  {
    "text": "with your uh infrastructure that you are running so for example if you are running on",
    "start": "1406919",
    "end": "1413840"
  },
  {
    "text": "AWS the agent itself can actually introspect the note that that's it's",
    "start": "1413840",
    "end": "1420440"
  },
  {
    "text": "running on and determine whether this is a note that has a particular instance ID",
    "start": "1420440",
    "end": "1426360"
  },
  {
    "text": "pattern or contains a particular set of AWS instance stacks and based on that",
    "start": "1426360",
    "end": "1432919"
  },
  {
    "text": "you can have a policy to issue a particular identity to this agent and same for the work but at a more granular",
    "start": "1432919",
    "end": "1440799"
  },
  {
    "text": "fashion when a workload connects the agent that's running on the no when the workload connects to the",
    "start": "1440799",
    "end": "1447559"
  },
  {
    "text": "grpc API that the agent exposes on a Unix domain socket what happens is that",
    "start": "1447559",
    "end": "1454360"
  },
  {
    "text": "um the agent could introspect this this this workload and it can actually",
    "start": "1454360",
    "end": "1460400"
  },
  {
    "text": "consult the caral to determine a lot of things about this workload such as um",
    "start": "1460400",
    "end": "1465799"
  },
  {
    "text": "what is the Unix user ID that this workload is running under or what",
    "start": "1465799",
    "end": "1470840"
  },
  {
    "text": "container ID it is running under or what is the image that this container ID is",
    "start": "1470840",
    "end": "1476600"
  },
  {
    "text": "using so in that sense you can Define very rich and granular policies for",
    "start": "1476600",
    "end": "1482000"
  },
  {
    "text": "Distributing these identities and this these identities",
    "start": "1482000",
    "end": "1488880"
  },
  {
    "text": "really come in the form of um x509 svits and these are the actual TLS",
    "start": "1488880",
    "end": "1496360"
  },
  {
    "text": "certificates so these are non CA and leaf certificates and they must contain",
    "start": "1496360",
    "end": "1503720"
  },
  {
    "text": "exactly one URI subject alternative name which is essentially the uh which is",
    "start": "1503720",
    "end": "1511840"
  },
  {
    "text": "essentially the the spify identity and the spify",
    "start": "1511840",
    "end": "1517399"
  },
  {
    "text": "identity if you read the standard there's a bunch of detail around how these identities need to be structured",
    "start": "1517399",
    "end": "1523480"
  },
  {
    "text": "and how they actually differ from youru eyes so you can't really have query parameters or uh port numbers and all",
    "start": "1523480",
    "end": "1532000"
  },
  {
    "text": "that because these things don't make sense in this particular uh scenario but it really is in the form of a the spify",
    "start": "1532000",
    "end": "1538880"
  },
  {
    "text": "prefix and then the trust domain and then the actual location of the workload",
    "start": "1538880",
    "end": "1546000"
  },
  {
    "text": "so it could be data center one SL databases SL instance a for",
    "start": "1546000",
    "end": "1552640"
  },
  {
    "text": "example so this is good right now you have a framework that can allow you to",
    "start": "1552640",
    "end": "1558760"
  },
  {
    "text": "actually obtain an identity in a secular Fashion on devices that are not part of the mesh",
    "start": "1558760",
    "end": "1565600"
  },
  {
    "text": "and you don't need service account tokens so how is all of that at the moment integrated with linkerd in order",
    "start": "1565600",
    "end": "1572240"
  },
  {
    "text": "to have this feature that's called mesh expansion well first of all you have your",
    "start": "1572240",
    "end": "1580399"
  },
  {
    "text": "kubernetes cluster and you want to mesh an external",
    "start": "1580399",
    "end": "1586960"
  },
  {
    "text": "workload you want to make it part of the mesh now often times if you're running in production you would have an upstream",
    "start": "1586960",
    "end": "1594159"
  },
  {
    "text": "CA such as uh Vault or the likes or AWS",
    "start": "1594159",
    "end": "1599799"
  },
  {
    "text": "secrets that contains and stores your trust routs so the root",
    "start": "1599799",
    "end": "1605840"
  },
  {
    "text": "certificate with its key so this will",
    "start": "1605840",
    "end": "1610960"
  },
  {
    "text": "probably be integrated with uh if you're running clinker D with something like uh",
    "start": "1610960",
    "end": "1616120"
  },
  {
    "text": "SE manager that would be be responsible for periodically issuing um periodically",
    "start": "1616120",
    "end": "1623720"
  },
  {
    "text": "issuing certificates intermediate certificates that the control plane uses in order to sign end certificates for",
    "start": "1623720",
    "end": "1631120"
  },
  {
    "text": "the proxy so then you will have your pots running in the cluster and the proxies and they will get these",
    "start": "1631120",
    "end": "1637559"
  },
  {
    "text": "certificates periodically but now you also want to mention an external workload well say",
    "start": "1637559",
    "end": "1644279"
  },
  {
    "text": "you have a VM with a bunch of applications that are running there",
    "start": "1644279",
    "end": "1649960"
  },
  {
    "text": "now there's the proxy that is on the VM and traffic is going to get rooted",
    "start": "1649960",
    "end": "1655640"
  },
  {
    "text": "through this proxy but it needs an identity so essentially what needs to happen is that",
    "start": "1655640",
    "end": "1661960"
  },
  {
    "text": "you need to have a Spire server hosted somewhere that is also integrated with",
    "start": "1661960",
    "end": "1668039"
  },
  {
    "text": "your Upstream CA so it can issue certificates that are um essentially",
    "start": "1668039",
    "end": "1673360"
  },
  {
    "text": "rooted in the same trust rout as the certificates that the proxies get",
    "start": "1673360",
    "end": "1678840"
  },
  {
    "text": "and then The Spar agent will be running on this particular note that that this",
    "start": "1678840",
    "end": "1685960"
  },
  {
    "text": "applications and the proxy are running and the proxy will contact the Spire",
    "start": "1685960",
    "end": "1691240"
  },
  {
    "text": "agent over the Unix domain socket using the grpc API the Spy agent will know",
    "start": "1691240",
    "end": "1696799"
  },
  {
    "text": "that this proxy runs under either on a particular AWS instance or an asure",
    "start": "1696799",
    "end": "1704640"
  },
  {
    "text": "instance or as a particular um user account ID and it will give it the",
    "start": "1704640",
    "end": "1712640"
  },
  {
    "text": "corresponding uh identity so because now this is uh the proxy gets an",
    "start": "1712640",
    "end": "1720600"
  },
  {
    "text": "identity that's rooted in the same trust domain like it can mesh with proxies on",
    "start": "1720600",
    "end": "1725919"
  },
  {
    "text": "the cluster so and and it can just like TLS can be terminated so you get the",
    "start": "1725919",
    "end": "1732320"
  },
  {
    "text": "identity you get encryption you get all of the security features and you can apply traffic policies and you know",
    "start": "1732320",
    "end": "1738240"
  },
  {
    "text": "exactly the identity of this proxy that that uh is",
    "start": "1738240",
    "end": "1743440"
  },
  {
    "text": "living over there on this VM so this is uh pretty cool but uh there is still",
    "start": "1743440",
    "end": "1751120"
  },
  {
    "text": "quite a bit of work that needs to happen and we have some future plans for extending all of that namely we're",
    "start": "1751120",
    "end": "1757120"
  },
  {
    "text": "thinking uh some of the things that we have considered are unifying the",
    "start": "1757120",
    "end": "1762480"
  },
  {
    "text": "identity models between Linker and spy Spire so really kind of maybe use or",
    "start": "1762480",
    "end": "1769360"
  },
  {
    "text": "have a mode where SP IDs are used only not only for external workloads but for",
    "start": "1769360",
    "end": "1776200"
  },
  {
    "text": "Proxes that are um that are outside that are in kubernetes as well or um allow",
    "start": "1776200",
    "end": "1784440"
  },
  {
    "text": "kubernetes proxies to actually obtain their certificates from spire and not",
    "start": "1784440",
    "end": "1790120"
  },
  {
    "text": "rely on the control plane at all and these things are perfectly possible like you know um it's just a matter of",
    "start": "1790120",
    "end": "1797159"
  },
  {
    "text": "changes uh uh that we need to get through but they are not particularly challenging we also need to work on",
    "start": "1797159",
    "end": "1803519"
  },
  {
    "text": "private Network support so um when there's no connectivity between two",
    "start": "1803519",
    "end": "1809240"
  },
  {
    "text": "networks so that's on the networking rather than the identity site and also",
    "start": "1809240",
    "end": "1815200"
  },
  {
    "text": "we thinking about also DNS proxying which will open quite a lot of doors for",
    "start": "1815200",
    "end": "1821320"
  },
  {
    "text": "optimizations uh that we can that we can do so in summary I would say that",
    "start": "1821320",
    "end": "1828480"
  },
  {
    "text": "um M mesh expansion has multiple applications across a wide variety of",
    "start": "1828480",
    "end": "1835240"
  },
  {
    "text": "Industries and it's something that uh we are going to see more and more need uh",
    "start": "1835240",
    "end": "1842519"
  },
  {
    "text": "of especially with like all the migration to the clouds the the the",
    "start": "1842519",
    "end": "1847640"
  },
  {
    "text": "integration of existing workloads and the likes um however securing workloads",
    "start": "1847640",
    "end": "1853440"
  },
  {
    "text": "is uh actually uh quite challenging especially when you when you have",
    "start": "1853440",
    "end": "1858720"
  },
  {
    "text": "completely different constructs compared to what you have in kubernetes and that's why we used SP spy in order to",
    "start": "1858720",
    "end": "1865639"
  },
  {
    "text": "leverage all of that and uh and actually achieve this the same things that we",
    "start": "1865639",
    "end": "1872320"
  },
  {
    "text": "achieved in the cluster work outside of the cluster as well and now there's some time for",
    "start": "1872320",
    "end": "1881960"
  },
  {
    "text": "Q&A I think yeah thank you",
    "start": "1881960",
    "end": "1889919"
  },
  {
    "text": "so I think there is microphones that you can use if you want to ask questions or",
    "start": "1891639",
    "end": "1896960"
  },
  {
    "text": "I can just repeat the question so um what I'm a bit unsure",
    "start": "1896960",
    "end": "1902679"
  },
  {
    "text": "about is this request this buyer receive um to say hey give me a a certificate",
    "start": "1902679",
    "end": "1909200"
  },
  {
    "text": "that is signed how does it know that this is not a random request from an untrusted Source I don't I think I got a",
    "start": "1909200",
    "end": "1916080"
  },
  {
    "text": "bit lost there are you talking about in the world ASP Pi or in kubernetes in in",
    "start": "1916080",
    "end": "1921320"
  },
  {
    "text": "the picture you had before where the external word load had an agent that called to the SP server yeah I didn't",
    "start": "1921320",
    "end": "1928279"
  },
  {
    "text": "really get why the this SP server trust this agent and give it a certificate",
    "start": "1928279",
    "end": "1934480"
  },
  {
    "text": "because the Spire server supposedly has a mechanism to actually introspect that like that's kind of the implementation",
    "start": "1934480",
    "end": "1940320"
  },
  {
    "text": "details of spire and spy so essentially it it it has its own",
    "start": "1940320",
    "end": "1946840"
  },
  {
    "text": "attestation implementation details that integrate with the particular cloud",
    "start": "1946840",
    "end": "1952200"
  },
  {
    "text": "provider so it would use like the apis of the specific vendors to verify that",
    "start": "1952200",
    "end": "1959279"
  },
  {
    "text": "oh so so it's an external mechanism that's like a trusted party that provide the info yeah okay thank you so they",
    "start": "1959279",
    "end": "1965919"
  },
  {
    "text": "yeah essentially they they use the underlying infrastructure as a trusted as the source of trust right",
    "start": "1965919",
    "end": "1974200"
  },
  {
    "text": "okay thank you y hi yeah hi um so most of the talk or",
    "start": "1974200",
    "end": "1983960"
  },
  {
    "text": "when you usually talk about mesh expansion you're talking about expanding the mesh to um between the cluster and",
    "start": "1983960",
    "end": "1990720"
  },
  {
    "text": "say a VM yeah but if we have say VMA that talks a bit to the cluster and also",
    "start": "1990720",
    "end": "1997240"
  },
  {
    "text": "to vmb so will the mesh expansion work also between the two VMS uh completely",
    "start": "1997240",
    "end": "2004720"
  },
  {
    "text": "outside of the cluster um yeah absolutely so that's a",
    "start": "2004720",
    "end": "2009880"
  },
  {
    "text": "matter on of Discovery rather than identity but it should there is no",
    "start": "2009880",
    "end": "2015639"
  },
  {
    "text": "reason for it to work so for example um you could have two VMS represented as",
    "start": "2015639",
    "end": "2023159"
  },
  {
    "text": "services in kubernetes cuz that's what ends up happening right like hvm is a service in kubernetes that could be",
    "start": "2023159",
    "end": "2029240"
  },
  {
    "text": "addressed from Services outside of kubernetes and it can also address services in kubernetes so if you have",
    "start": "2029240",
    "end": "2035840"
  },
  {
    "text": "two VMS that have correspond Services VMA can just Target the service that",
    "start": "2035840",
    "end": "2045000"
  },
  {
    "text": "corresponds to vmb that's on the cluster and essentially use that as a discovery",
    "start": "2045000",
    "end": "2050960"
  },
  {
    "text": "mechanism and the traffic will flow through these 2 VMS without even actually going to the cluster so yeah",
    "start": "2050960",
    "end": "2057398"
  },
  {
    "text": "that's that's actually now I understand what you're asking and that is possible we verify that this works yeah nice",
    "start": "2057399",
    "end": "2066480"
  },
  {
    "text": "thanks hey thanks for the talk um so the last example used like an AWS VM and it",
    "start": "2066480",
    "end": "2074440"
  },
  {
    "text": "used the the ads VM ID to allow it to issue a certificate so how would that",
    "start": "2074440",
    "end": "2081398"
  },
  {
    "text": "look for I I think you used an example of a smartwatch before like how would",
    "start": "2081399",
    "end": "2086520"
  },
  {
    "text": "how would that work there would you have to like preload the SmartWatch with a certain certificate or how would you",
    "start": "2086520",
    "end": "2093599"
  },
  {
    "text": "allow to issue Aspire certificate so no I think you need to to preload it again",
    "start": "2093599",
    "end": "2099320"
  },
  {
    "text": "like I am uh I'm a developer I'm not an operator like I don't really provision",
    "start": "2099320",
    "end": "2105200"
  },
  {
    "text": "you know SmartWatches with software but uh I I they as I said this was just an",
    "start": "2105200",
    "end": "2112640"
  },
  {
    "text": "example of a certain way to use the metadata attributed with the workload to",
    "start": "2112640",
    "end": "2119160"
  },
  {
    "text": "attest your identity but if you look at the Spire implementation there are a",
    "start": "2119160",
    "end": "2124640"
  },
  {
    "text": "number of plugins that you could use so I would not be surprised if there are",
    "start": "2124640",
    "end": "2129960"
  },
  {
    "text": "plugins that tie specifically to things like um and again I'm don't quote me on",
    "start": "2129960",
    "end": "2136960"
  },
  {
    "text": "that but I could imagine plugins being written where you have um your identity",
    "start": "2136960",
    "end": "2142680"
  },
  {
    "text": "being dependent on say a serial number of a particular device and the agent",
    "start": "2142680",
    "end": "2149760"
  },
  {
    "text": "being able to actually read that data via plugin so then you you you you end",
    "start": "2149760",
    "end": "2155319"
  },
  {
    "text": "up with a different different kind of uh metadata right so each device somewhere will have some metadata and if that's",
    "start": "2155319",
    "end": "2163240"
  },
  {
    "text": "obtained securely by a trusted party like Spire then that's fine to use right",
    "start": "2163240",
    "end": "2168760"
  },
  {
    "text": "and this metadata could range from instance IDs all the way through serial numbers on on on you know um on just",
    "start": "2168760",
    "end": "2177680"
  },
  {
    "text": "physical devices makes sense thanks a",
    "start": "2177680",
    "end": "2182599"
  },
  {
    "text": "lot all right well than thank you a lot uh for listening in on this talk",
    "start": "2185720",
    "end": "2192839"
  },
  {
    "text": "and have a good couple of days",
    "start": "2192839",
    "end": "2200240"
  }
]