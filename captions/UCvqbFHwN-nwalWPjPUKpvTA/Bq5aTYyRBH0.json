[
  {
    "text": "all right let's uh get started quick poll here raise your hand",
    "start": "399",
    "end": "5839"
  },
  {
    "text": "if you have ever compiled your application to web assembly",
    "start": "5839",
    "end": "10840"
  },
  {
    "text": "before okay I saw a few and keep your hands raised up if you ever compelled",
    "start": "10840",
    "end": "17720"
  },
  {
    "text": "web assembly to deploy web assembly to uh production clusters on",
    "start": "17720",
    "end": "24560"
  },
  {
    "text": "kubernetes okay I see a bit of drop off there not surprising and today I want to",
    "start": "24840",
    "end": "31400"
  },
  {
    "text": "make a case for web assembly as alternative to Containers or even as a",
    "start": "31400",
    "end": "36920"
  },
  {
    "text": "partner for containers and we'll do this as a case study for web assembly and",
    "start": "36920",
    "end": "44360"
  },
  {
    "text": "containers to run side by side and we will see how web assembly can be this uh",
    "start": "44360",
    "end": "50680"
  },
  {
    "text": "next ground breaking technology and my name is Joe I'm a soft",
    "start": "50680",
    "end": "55920"
  },
  {
    "text": "engineer Microsoft Azure and I build open source software I'm a maintainer of",
    "start": "55920",
    "end": "61079"
  },
  {
    "text": "the cncf contained the run Wazi project and I also maintain the spin Cube and",
    "start": "61079",
    "end": "67439"
  },
  {
    "text": "I'm a recognized contributor of The Bu code Alliance you can reach out to my socials",
    "start": "67439",
    "end": "73320"
  },
  {
    "text": "um I have LinkedIn GitHub and X where are we going",
    "start": "73320",
    "end": "80040"
  },
  {
    "text": "today first I want to talk about the concept of Scar containers and their",
    "start": "80040",
    "end": "85880"
  },
  {
    "text": "motivations and use cases and then I will talk about web assembly and how it",
    "start": "85880",
    "end": "91119"
  },
  {
    "text": "compare in contrast to containers and then I will do it C in action uh running web assembly with SARS",
    "start": "91119",
    "end": "98799"
  },
  {
    "text": "as SARS and I will do some future forward uh conclusion and in the last",
    "start": "98799",
    "end": "105159"
  },
  {
    "text": "five minutes we will do Q&A all right so cyar containers are a",
    "start": "105159",
    "end": "112320"
  },
  {
    "text": "old Concept in kubernetes it was introduced in 2015 um and the cyar term was refer to a",
    "start": "112320",
    "end": "120920"
  },
  {
    "text": "auxiliary container running alongside your main application in the same PA and",
    "start": "120920",
    "end": "126360"
  },
  {
    "text": "because they are running in the same part so they share the same name spaces in particular the network namespace and",
    "start": "126360",
    "end": "134040"
  },
  {
    "text": "c groups and those cyar containers um obviously by their name they're",
    "start": "134040",
    "end": "140400"
  },
  {
    "text": "lightweight and they're smaller than your main application and they're providing additional features to guide",
    "start": "140400",
    "end": "146440"
  },
  {
    "text": "your main application such as logging monitoring and networking and in",
    "start": "146440",
    "end": "151519"
  },
  {
    "text": "kubernetes uh v 1.29 as a beta feature they formally introduce cyard containers",
    "start": "151519",
    "end": "159000"
  },
  {
    "text": "as in neque containers while you have to specify the resar policy to be",
    "start": "159000",
    "end": "165120"
  },
  {
    "text": "always there are some interesting cyer use cases there's logging use case uh if you",
    "start": "165120",
    "end": "172760"
  },
  {
    "text": "can deploy your open slam CH collector as a scar container to your main application obviously there is serice",
    "start": "172760",
    "end": "179280"
  },
  {
    "text": "smash and one more interesting use case is called Dapper uh which is another",
    "start": "179280",
    "end": "184799"
  },
  {
    "text": "cncf project that gives you long time application apis such as State",
    "start": "184799",
    "end": "190159"
  },
  {
    "text": "Management servicing locations and message cues there are some downsides to the",
    "start": "190159",
    "end": "197599"
  },
  {
    "text": "scar containers though for one scars could be heavyweight and one example",
    "start": "197599",
    "end": "203560"
  },
  {
    "text": "would be the Linker D cyar could consume up to 150 megabytes",
    "start": "203560",
    "end": "210280"
  },
  {
    "text": "of dis space because they have boundled the entire jvm into the syar for two",
    "start": "210280",
    "end": "216159"
  },
  {
    "text": "syar containers consume additional CPU memory and network resources because",
    "start": "216159",
    "end": "221760"
  },
  {
    "text": "they're running as a cyard to a main application so they're actually competing with your main application for",
    "start": "221760",
    "end": "227879"
  },
  {
    "text": "resource consumption there are some operational complexity given that cyar",
    "start": "227879",
    "end": "233239"
  },
  {
    "text": "container and the main application can be managed by different teams they have different upgrades and controls and if",
    "start": "233239",
    "end": "241239"
  },
  {
    "text": "your site car upgrades too frequently it can interrupt your main application and",
    "start": "241239",
    "end": "246400"
  },
  {
    "text": "so all of the three points above will have a negative impact on part scaling",
    "start": "246400",
    "end": "251560"
  },
  {
    "text": "and cluster efficiency now I want to make a case for",
    "start": "251560",
    "end": "257759"
  },
  {
    "text": "web assembly as alternative to Containers but first I want to introduce you what web assembly is it was designed",
    "start": "257759",
    "end": "265280"
  },
  {
    "text": "originally as a compilation Target for the browser um it's portable it doesn't",
    "start": "265280",
    "end": "271240"
  },
  {
    "text": "have any assumptions on what what type of CPU architecture it runs on it can",
    "start": "271240",
    "end": "276320"
  },
  {
    "text": "run on any Modern Hardware um it has near native speed and the reason I",
    "start": "276320",
    "end": "281520"
  },
  {
    "text": "didn't say native speed is because web assembly is a virtual Isa or uh",
    "start": "281520",
    "end": "287400"
  },
  {
    "text": "instruction set architecture and in order to run web assembly you have to compile that to a machine code you can",
    "start": "287400",
    "end": "295080"
  },
  {
    "text": "do either aot compile orj in time comp compilation web assembly has a Sandbox",
    "start": "295080",
    "end": "301360"
  },
  {
    "text": "mechanism and it is proven in the spec that any WR time run two s Two web",
    "start": "301360",
    "end": "308840"
  },
  {
    "text": "assembly modules they cannot access the memory of each other well they have their own linear memory and they can do",
    "start": "308840",
    "end": "315479"
  },
  {
    "text": "whatever in their own memory but they cannot Escape their sandbox and web assembly is designed to",
    "start": "315479",
    "end": "321319"
  },
  {
    "text": "be compact because the the very designed goal was to be able to transfer web",
    "start": "321319",
    "end": "327160"
  },
  {
    "text": "assembly from the server to the browser so has to be Compact and has a very",
    "start": "327160",
    "end": "332479"
  },
  {
    "text": "compact binary form it is supported by many Maj many major programming",
    "start": "332479",
    "end": "337960"
  },
  {
    "text": "languages uh just to name a few C++ rust JavaScript and it has made no web",
    "start": "337960",
    "end": "345520"
  },
  {
    "text": "specific assumptions and that makes it very attractive to run on the server",
    "start": "345520",
    "end": "351960"
  },
  {
    "text": "side but in order to run web assembly on the server you have to teach web assembly how to talk to the opening",
    "start": "351960",
    "end": "359000"
  },
  {
    "text": "systems enter web assembly system interface or Wy Wy is a standard set of",
    "start": "359000",
    "end": "364840"
  },
  {
    "text": "apis to interact with any host and that brings web assembly use cases outside of",
    "start": "364840",
    "end": "370400"
  },
  {
    "text": "the browser it is designed with similar principles of web assembly eff",
    "start": "370400",
    "end": "375440"
  },
  {
    "text": "efficiency safe and portability especially has a capability",
    "start": "375440",
    "end": "381160"
  },
  {
    "text": "model where you just don't handle anything from the opening system to your W and Yi module by default it is given",
    "start": "381160",
    "end": "388680"
  },
  {
    "text": "by the wrong time for example a w module is whyi does not have a FAL system access by default you have to grant that",
    "start": "388680",
    "end": "396360"
  },
  {
    "text": "capability the first public release of wzi is called Wy preview one or Wy P1 in",
    "start": "396360",
    "end": "401720"
  },
  {
    "text": "short it has wide adoptions among languages and Tool Lings and in fact go",
    "start": "401720",
    "end": "408240"
  },
  {
    "text": "just introduced yp1 Target last year yp2 is the next major iteration of",
    "start": "408240",
    "end": "414880"
  },
  {
    "text": "Wy and it is based on the component model it was released early this year and it has two standardized worlds or",
    "start": "414880",
    "end": "422120"
  },
  {
    "text": "environment that your module targets to Y CI that models the COI programs and Y",
    "start": "422120",
    "end": "429800"
  },
  {
    "text": "HTP that models a HTP proxy environment all right so that's a brief",
    "start": "429800",
    "end": "437000"
  },
  {
    "text": "introduction of web assembly now let's see how it compare in contrast to",
    "start": "437000",
    "end": "442039"
  },
  {
    "text": "Containers containers have existed for a long time over decades so it's",
    "start": "442039",
    "end": "447520"
  },
  {
    "text": "production tested and people have General trust in containers container",
    "start": "447520",
    "end": "452919"
  },
  {
    "text": "can run native speed and it has broad ecosystem support with standard toolings like oci and kubernetes but there are",
    "start": "452919",
    "end": "460800"
  },
  {
    "text": "some downsized containers as well for example container can often be hundreds",
    "start": "460800",
    "end": "466120"
  },
  {
    "text": "of megabytes inside sometimes they bundle the entire opening system is inside of the container so that makes it",
    "start": "466120",
    "end": "473159"
  },
  {
    "text": "Blow and it has a some somewhat slow cold up cold",
    "start": "473159",
    "end": "478240"
  },
  {
    "text": "startup time that can up to a few seconds and that's not fast enough for",
    "start": "478240",
    "end": "483680"
  },
  {
    "text": "some use cases like bursty function workloads and containers must be built",
    "start": "483680",
    "end": "489560"
  },
  {
    "text": "per architecture a container built for x86 will not be able to run on arm and",
    "start": "489560",
    "end": "495639"
  },
  {
    "text": "interc container communication has a lot of overhead and if you go through the entire network stack you have to do",
    "start": "495639",
    "end": "502039"
  },
  {
    "text": "serialization deserialization Etc web assembly on the other hand has",
    "start": "502039",
    "end": "507879"
  },
  {
    "text": "submillisecond cold start and this is really attractive because",
    "start": "507879",
    "end": "512919"
  },
  {
    "text": "now you can start a new web assembly instance per request and it has fast",
    "start": "512919",
    "end": "518760"
  },
  {
    "text": "inter Wiis communication you can compose two wion components together",
    "start": "518760",
    "end": "524519"
  },
  {
    "text": "and the communication will be a local function in location and that will present a high density for your guest",
    "start": "524519",
    "end": "531760"
  },
  {
    "text": "applications there are some downit for web assembly as well for example it's not the case that any Linux",
    "start": "531760",
    "end": "538760"
  },
  {
    "text": "binary can be compile to web assembly there are some system cause that wi may not support and the language toolings",
    "start": "538760",
    "end": "545360"
  },
  {
    "text": "are not great I've been working on integrating the go language with W for",
    "start": "545360",
    "end": "551120"
  },
  {
    "text": "quite some time and we still don't have yp2 for go and W is a relatively new",
    "start": "551120",
    "end": "557240"
  },
  {
    "text": "technology so uh some of the security boundaries need need to be a production",
    "start": "557240",
    "end": "564800"
  },
  {
    "text": "tested all right so why do we want to run web assembly in kubernetes",
    "start": "564800",
    "end": "570120"
  },
  {
    "text": "throughout the years I've been working on web assembly I've been hearing people saying can we run web assembly in my own",
    "start": "570120",
    "end": "576680"
  },
  {
    "text": "ex existing infrastructure and by my infrastructure imend kubernetes so it is",
    "start": "576680",
    "end": "583320"
  },
  {
    "text": "imperative to make web assembly compatible or runable in kubernetes and so we have to tackle two",
    "start": "583320",
    "end": "590920"
  },
  {
    "text": "issues first issue is how do we distribute web assembly components and the second issue is how do we actually",
    "start": "590920",
    "end": "597200"
  },
  {
    "text": "execute them to container has a de facto standard for",
    "start": "597200",
    "end": "603839"
  },
  {
    "text": "packaging and deploying and that's oci Registries and we as a community come up",
    "start": "603839",
    "end": "609800"
  },
  {
    "text": "with a wion working group in the cncf that standardized an oci artifact format",
    "start": "609800",
    "end": "615560"
  },
  {
    "text": "for web assembly so that we can use the same storage mechanism that containers",
    "start": "615560",
    "end": "620640"
  },
  {
    "text": "use for over a decade for web assembly components now this is a snapshot of the",
    "start": "620640",
    "end": "627519"
  },
  {
    "text": "web web assembly OC artifact format in the config you can see there is a media type of application vnd d.w. config and",
    "start": "627519",
    "end": "636000"
  },
  {
    "text": "in the first layer there is a application slw so all of the run times and",
    "start": "636000",
    "end": "642360"
  },
  {
    "text": "platforms can now upload and retrieve won with the standardized oci artifact",
    "start": "642360",
    "end": "649240"
  },
  {
    "text": "format now that answers the question of how to distribute web assembly components the second question is how to",
    "start": "649240",
    "end": "656000"
  },
  {
    "text": "actually execute it well the naive way of doing that is you just bundle the wion run time and wion layers into a",
    "start": "656000",
    "end": "663880"
  },
  {
    "text": "container and you run that container in kubernetes obviously that works but we",
    "start": "663880",
    "end": "669360"
  },
  {
    "text": "want to do something better we want to offload the won run time into the shin",
    "start": "669360",
    "end": "674560"
  },
  {
    "text": "process that runs in continu D and because Contin D is the def facto run",
    "start": "674560",
    "end": "679600"
  },
  {
    "text": "time for kubernetes if it can execute in continu D it can be orchestrated by",
    "start": "679600",
    "end": "685560"
  },
  {
    "text": "kubernetes and that's exactly what we did I'm a maintainer of the cncf run",
    "start": "685560",
    "end": "691200"
  },
  {
    "text": "Wazi project and that is a library for authoring shims that can run web",
    "start": "691200",
    "end": "697360"
  },
  {
    "text": "assembly workloads and it support multiple web assembly run times was time",
    "start": "697360",
    "end": "703360"
  },
  {
    "text": "wasin Edge and spin just to give a few and it can run web assem side by side",
    "start": "703360",
    "end": "709440"
  },
  {
    "text": "with containers how do we do that well the magic lies in the shim architecture",
    "start": "709440",
    "end": "717800"
  },
  {
    "text": "when continuity gives a ttrpc request into the shim asking the shim to create",
    "start": "717800",
    "end": "723399"
  },
  {
    "text": "a container and start executing the container the container will the shim will create a new instance and that",
    "start": "723399",
    "end": "730079"
  },
  {
    "text": "instance will examine the binary first few bytes to see if this is a Linux",
    "start": "730079",
    "end": "735320"
  },
  {
    "text": "container or if this is a WM binary if this is a w binary we use a w run time",
    "start": "735320",
    "end": "742000"
  },
  {
    "text": "baked into the shim to execute that instance and if this is a Linux",
    "start": "742000",
    "end": "747440"
  },
  {
    "text": "container we just use the Linux run time to run that container and this is all",
    "start": "747440",
    "end": "753480"
  },
  {
    "text": "possible due to a amazing open source project called Yuki uh this is written in Rust and we use Yuki's lip container",
    "start": "753480",
    "end": "761199"
  },
  {
    "text": "executor to write our own won run time and we can dispatch the instance into",
    "start": "761199",
    "end": "767440"
  },
  {
    "text": "either the Linux case or the won case now this is a sample workload for a",
    "start": "767440",
    "end": "776920"
  },
  {
    "text": "um web assembly workload in btis and it's just grabbed from the continuity",
    "start": "776920",
    "end": "782320"
  },
  {
    "text": "shame spin Ripple and it's part of the spin Cube organization and you can",
    "start": "782320",
    "end": "787519"
  },
  {
    "text": "Define your own part and the only difference is you add this additional line called run class name runtime class",
    "start": "787519",
    "end": "794279"
  },
  {
    "text": "name and this is wi time being V2 but you can change the name depending on how",
    "start": "794279",
    "end": "800240"
  },
  {
    "text": "you uh Define your runtime class which is on the right side and in the runtime",
    "start": "800240",
    "end": "805760"
  },
  {
    "text": "class you define the name and the Handler to a shim binary and that Handler right now is called spin and",
    "start": "805760",
    "end": "812639"
  },
  {
    "text": "that's getting resolved into a continuity config file um and in the config file you have to register hey",
    "start": "812639",
    "end": "820120"
  },
  {
    "text": "this runtime spin is talking to io. continuity. spin. V2 and that gets",
    "start": "820120",
    "end": "826120"
  },
  {
    "text": "resolved by continuity into the path of the spin shim binary so that's the only",
    "start": "826120",
    "end": "832800"
  },
  {
    "text": "requirement you have to have a binary in the past you have to change the conf continuity config and now you deploy a",
    "start": "832800",
    "end": "840680"
  },
  {
    "text": "runtime class and you can use that runtime class in your part or",
    "start": "840680",
    "end": "847160"
  },
  {
    "text": "deployment okay so why do we want to run web side by side with",
    "start": "847360",
    "end": "853680"
  },
  {
    "text": "containers at the beginning I said this is a case study I really want to see how",
    "start": "853680",
    "end": "858759"
  },
  {
    "text": "container and web assembly compare and contrast so I want to replace cyars with",
    "start": "858759",
    "end": "865240"
  },
  {
    "text": "web assembly or I want to add cyars as a Linux container to enhance web assembly",
    "start": "865240",
    "end": "870480"
  },
  {
    "text": "use cases so that's our three two scenarios here one is a dropping",
    "start": "870480",
    "end": "877720"
  },
  {
    "text": "replacement for Linux containers because they're too heavy way we want to just rewrite that into web assembly but we",
    "start": "877720",
    "end": "883680"
  },
  {
    "text": "still want to use the side car containers to add logins open tetes and",
    "start": "883680",
    "end": "889120"
  },
  {
    "text": "such the second scenario is where you have a heavyweight Linux container you",
    "start": "889120",
    "end": "894199"
  },
  {
    "text": "can just compile to wiom because of the language two chain issues but you can cve out some of the features or some of",
    "start": "894199",
    "end": "901759"
  },
  {
    "text": "the code from your Linux container and compile that into WM and run as a cyar",
    "start": "901759",
    "end": "907079"
  },
  {
    "text": "container in the same part and at the end of the talk I'm going to present a",
    "start": "907079",
    "end": "912560"
  },
  {
    "text": "additional scenario and right now is just a mysterious",
    "start": "912560",
    "end": "918279"
  },
  {
    "text": "one oops all right so let's talk about the first scenario where your main",
    "start": "919519",
    "end": "925160"
  },
  {
    "text": "application is swon and you just want to run like an Eno proxy uh you want to",
    "start": "925160",
    "end": "931000"
  },
  {
    "text": "have a side card to manage state for storage and caching or you have a case where you have propri code that cannot",
    "start": "931000",
    "end": "937440"
  },
  {
    "text": "be compiled to Wi it's run that as a side car and I will do this demo with",
    "start": "937440",
    "end": "945160"
  },
  {
    "text": "e all right so in my local lap laptop I have a K3 s",
    "start": "945440",
    "end": "953959"
  },
  {
    "text": "cluster and using the k3d to create a k3s cluster K3 is basically uh k3s in",
    "start": "953959",
    "end": "961120"
  },
  {
    "text": "Darker and k3s is a lightweight kubernetes distribution uh the entire",
    "start": "961120",
    "end": "966600"
  },
  {
    "text": "binary is less than 100 megabyte which is amazing so I have a cluster running here",
    "start": "966600",
    "end": "974560"
  },
  {
    "text": "and I have a deployment called Product API and you can see the runtime class",
    "start": "975199",
    "end": "983079"
  },
  {
    "text": "here is was time spin V2 so this is running in the spin sham",
    "start": "983079",
    "end": "989440"
  },
  {
    "text": "and this is my web assembly container and I also have deployed e",
    "start": "989440",
    "end": "995560"
  },
  {
    "text": "proxy into this part so I show",
    "start": "995560",
    "end": "1000240"
  },
  {
    "text": "you and you can see that in the containers there is my main application",
    "start": "1002360",
    "end": "1009639"
  },
  {
    "text": "as wasen and there is a EO proxy now I can just do a while loop and do the uh",
    "start": "1009639",
    "end": "1018920"
  },
  {
    "text": "Cube control X exit deploy sleep and that will sleep for one second and do a",
    "start": "1018920",
    "end": "1024558"
  },
  {
    "text": "curl into my product API I also deployed a Kali",
    "start": "1024559",
    "end": "1034600"
  },
  {
    "text": "so we can do some visualization of the",
    "start": "1035600",
    "end": "1041600"
  },
  {
    "text": "steel and if we go back to my browser [Music]",
    "start": "1041880",
    "end": "1049120"
  },
  {
    "text": "you can see uh you can see the traffics logs inbound Matrix all of the good",
    "start": "1049120",
    "end": "1054320"
  },
  {
    "text": "stuff here so this is running Linex containers side by side with Wim",
    "start": "1054320",
    "end": "1061679"
  },
  {
    "text": "modules all right going back to my",
    "start": "1064240",
    "end": "1069120"
  },
  {
    "text": "slide cool so now let's go to the scenario to I want to do some case study",
    "start": "1069280",
    "end": "1075880"
  },
  {
    "text": "of web assembly as cards and really see how CPU memory and binary sites are",
    "start": "1075880",
    "end": "1084000"
  },
  {
    "text": "different and my assumption is that because we offload the WR time into the",
    "start": "1084000",
    "end": "1089280"
  },
  {
    "text": "shim every web assembly container will have significantly less binary sitze",
    "start": "1089280",
    "end": "1096440"
  },
  {
    "text": "comp compared to Linux containers and every won instance is per",
    "start": "1096440",
    "end": "1101640"
  },
  {
    "text": "request starts per request and provides that sandbox so there's no cost if",
    "start": "1101640",
    "end": "1106720"
  },
  {
    "text": "there's no traffic so in this case won is well suited for filtering validating",
    "start": "1106720",
    "end": "1111919"
  },
  {
    "text": "and transformation Data before request reach the main application I took out a sample",
    "start": "1111919",
    "end": "1118280"
  },
  {
    "text": "application from Dapper and this sample application has a nodejs application",
    "start": "1118280",
    "end": "1124440"
  },
  {
    "text": "running side by side with a Dapper run time and what does dapper do is it's providing a state management API so",
    "start": "1124440",
    "end": "1132080"
  },
  {
    "text": "whenever the nodejs code wants to create a new order or fetch a new uh fetch an",
    "start": "1132080",
    "end": "1137640"
  },
  {
    "text": "existing order the you will hit hit an HTTP endpoint into the Dapper round time",
    "start": "1137640",
    "end": "1143440"
  },
  {
    "text": "and Dapper will forward that request into whatever state store uh configure",
    "start": "1143440",
    "end": "1148600"
  },
  {
    "text": "tube so derer can talk to redis a custom DB or ad Dynamo",
    "start": "1148600",
    "end": "1154760"
  },
  {
    "text": "DB my experiment is replacing the daer around time at least the State",
    "start": "1154760",
    "end": "1161159"
  },
  {
    "text": "Management part with a web assembly module and run in a web assembly shame",
    "start": "1161159",
    "end": "1166640"
  },
  {
    "text": "and I want to see the CPU you usage memory usage and the binary size and",
    "start": "1166640",
    "end": "1173240"
  },
  {
    "text": "same code on the left on the right side it's the same nodejs application it makes HTTP call into the I call it State",
    "start": "1173240",
    "end": "1181480"
  },
  {
    "text": "engine and state engine is going to talk to radis all right so here is the second",
    "start": "1181480",
    "end": "1189840"
  },
  {
    "text": "demo this is the nodejs application uh it's using Express and it has a Dapper",
    "start": "1193559",
    "end": "1200039"
  },
  {
    "text": "HTP endpoint which is Local Host 3500 and it has a state URL which is uh",
    "start": "1200039",
    "end": "1206679"
  },
  {
    "text": "V1 of State of the State name and it it exposes two endpoint uh",
    "start": "1206679",
    "end": "1214159"
  },
  {
    "text": "an order and a new order so I have this deployment running",
    "start": "1214159",
    "end": "1221159"
  },
  {
    "text": "already in my cluster and you can see um",
    "start": "1221159",
    "end": "1230280"
  },
  {
    "text": "the node application is running as the main application and I have a side car called Cube count 24 but it's my state",
    "start": "1230280",
    "end": "1237679"
  },
  {
    "text": "engine uh Dapper clone implementation wring Ras compelled to won and executing",
    "start": "1237679",
    "end": "1244159"
  },
  {
    "text": "the Wen sham so now let's uh do port",
    "start": "1244159",
    "end": "1251760"
  },
  {
    "text": "forward and we can do a curve of the order um and the order",
    "start": "1253440",
    "end": "1260559"
  },
  {
    "text": "is saved in a radus store and we can do a new",
    "start": "1260559",
    "end": "1267520"
  },
  {
    "text": "order uh sending the sample. Json as the data into",
    "start": "1267520",
    "end": "1273240"
  },
  {
    "text": "here and if you're interested in what sample. Json is it's just order ID 42 um",
    "start": "1273240",
    "end": "1281240"
  },
  {
    "text": "and I can get a new order and they changed to 42 so this is to demonstrate",
    "start": "1281240",
    "end": "1286600"
  },
  {
    "text": "this state engine behave similar to the Dapper",
    "start": "1286600",
    "end": "1292200"
  },
  {
    "text": "engine and now when I distribute this wi and binary into the oci registry I found",
    "start": "1293720",
    "end": "1301720"
  },
  {
    "text": "out it's only one megabytes compared to Deo engine has 54 megabytes and that's a",
    "start": "1301720",
    "end": "1310440"
  },
  {
    "text": "huge reduction in terms of the size but in this experiment I found no significant difference in terms of CPU",
    "start": "1310440",
    "end": "1317960"
  },
  {
    "text": "and memory usage and I think because in part the CPU and memory are bonded by",
    "start": "1317960",
    "end": "1323320"
  },
  {
    "text": "the workload itself instead of the image so I asked myself this question",
    "start": "1323320",
    "end": "1330720"
  },
  {
    "text": "can we do better than that now web component model is a new",
    "start": "1330720",
    "end": "1338440"
  },
  {
    "text": "specification and it adds a new API and a weat ideal for composing a web",
    "start": "1338440",
    "end": "1346200"
  },
  {
    "text": "assembly modules together I think this is a game Cher it provides you high",
    "start": "1346200",
    "end": "1351880"
  },
  {
    "text": "level types like string record variant option and result and the concept the world is Central to the W components",
    "start": "1351880",
    "end": "1359679"
  },
  {
    "text": "it's a contract between the guest and the host so here's the catch with W",
    "start": "1359679",
    "end": "1366559"
  },
  {
    "text": "components you can literally compose them together and anying HTTP hander",
    "start": "1366559",
    "end": "1374039"
  },
  {
    "text": "the the invocation going from the stack doing serialization isation can be",
    "start": "1374039",
    "end": "1380000"
  },
  {
    "text": "eliminated and replaced with a function C because component allow you to compose",
    "start": "1380000",
    "end": "1385200"
  },
  {
    "text": "them together so here here is an example of two components one is my service that",
    "start": "1385200",
    "end": "1393000"
  },
  {
    "text": "export an incoming Handler and the other is a middleware that import a incoming",
    "start": "1393000",
    "end": "1398200"
  },
  {
    "text": "Handler and you can just hook the export and import together and you got a",
    "start": "1398200",
    "end": "1404760"
  },
  {
    "text": "composed component and bear in mind in yp2 there is a difference between",
    "start": "1404760",
    "end": "1411039"
  },
  {
    "text": "incoming Handler and outgoing Handler and that creates some challenges for composing YZ HTP components together and",
    "start": "1411039",
    "end": "1418960"
  },
  {
    "text": "that will be solved by the upcoming YZ P3 which incoming Handler and outgoing",
    "start": "1418960",
    "end": "1424520"
  },
  {
    "text": "hler will be unified to just Handler so once you have a Handler you can truly",
    "start": "1424520",
    "end": "1430279"
  },
  {
    "text": "compose multiple YY HTP component together like a chaining the services",
    "start": "1430279",
    "end": "1436360"
  },
  {
    "text": "and the best thing about it is any request comes in you don't have to do serialization distalization doing going",
    "start": "1436360",
    "end": "1443080"
  },
  {
    "text": "through the network stack you can just do local function cost and um that will",
    "start": "1443080",
    "end": "1448480"
  },
  {
    "text": "signif significantly reduce the latency so web assembly component they",
    "start": "1448480",
    "end": "1455640"
  },
  {
    "text": "can be developed by many different languages just like containers their communication is done by local function",
    "start": "1455640",
    "end": "1462600"
  },
  {
    "text": "invations they are optimized for resource consumption and they have a very clear security boundary",
    "start": "1462600",
    "end": "1469159"
  },
  {
    "text": "two components have their own linear memory and they do not share the memory they always copy by value and they",
    "start": "1469159",
    "end": "1477120"
  },
  {
    "text": "ultimately my um assumption is they will eliminate the needs for SAR containers",
    "start": "1477120",
    "end": "1483200"
  },
  {
    "text": "um just a a note here um in yp2 as I said you can truly compose yhp",
    "start": "1483200",
    "end": "1490720"
  },
  {
    "text": "handlers if you want to do it today for yp2 there are two great open source",
    "start": "1490720",
    "end": "1496240"
  },
  {
    "text": "projects one is spin Cube and the is was and Cloud spin Cube does this internal",
    "start": "1496240",
    "end": "1501880"
  },
  {
    "text": "chaining of services so it doesn't uh introduce any overhead if you have two",
    "start": "1501880",
    "end": "1507520"
  },
  {
    "text": "components implementing y HTP and W car is the same thing they use Nets and wrpc",
    "start": "1507520",
    "end": "1514200"
  },
  {
    "text": "to do those low latency communication um I contribute to won cloud and I maintain",
    "start": "1514200",
    "end": "1520600"
  },
  {
    "text": "spin Cube all right so to conclude Saar",
    "start": "1520600",
    "end": "1526159"
  },
  {
    "text": "containers are introduced a long time ago they're a powerful kubernetes design pattern to allow you easily adding",
    "start": "1526159",
    "end": "1532919"
  },
  {
    "text": "additional features into your main application and web assembly can take",
    "start": "1532919",
    "end": "1539000"
  },
  {
    "text": "the advantage of cyers to increase adoption reduce continuous sizes and",
    "start": "1539000",
    "end": "1544840"
  },
  {
    "text": "third is web assembly component present an opportunity to eliminate cyar use",
    "start": "1544840",
    "end": "1550240"
  },
  {
    "text": "case entirely while retaining the advantage of the CER such as the clear security",
    "start": "1550240",
    "end": "1556640"
  },
  {
    "text": "boundary and if you're interested in server side won I want to call out to my",
    "start": "1556640",
    "end": "1562440"
  },
  {
    "text": "colleague Dan for his upcoming book server side web assembly and you can",
    "start": "1562440",
    "end": "1569000"
  },
  {
    "text": "scan this QR code to get 45% off um with this book and it's currently in preview",
    "start": "1569000",
    "end": "1576960"
  },
  {
    "text": "it has four chapters published and I know Dan is working really hard to get the fifth chapter published and in this",
    "start": "1576960",
    "end": "1584399"
  },
  {
    "text": "talk if you have any questions or raise a question Dan is here to give you a",
    "start": "1584399",
    "end": "1589919"
  },
  {
    "text": "free copy of the book so that's the end of my talk thank",
    "start": "1589919",
    "end": "1596080"
  },
  {
    "text": "you any questions free copy of the",
    "start": "1601480",
    "end": "1606480"
  },
  {
    "text": "book with some of the broader kuties to uh integrate a little better saw",
    "start": "1611559",
    "end": "1619399"
  },
  {
    "text": "a lot of said you know container ID container registry things like that where I assume you're just putting in",
    "start": "1619399",
    "end": "1625559"
  },
  {
    "text": "the oci identif for are plans to work with thead",
    "start": "1625559",
    "end": "1632519"
  },
  {
    "text": "kuar yeah um I can answer part and we have David here he a chair of the W and",
    "start": "1632840",
    "end": "1638440"
  },
  {
    "text": "working group but yeah the the question is does wison working group have plans to in integrate",
    "start": "1638440",
    "end": "1647120"
  },
  {
    "text": "wison into the broader kubernets ecosystem and the answer is yes if you go to the WIS and working group Charter",
    "start": "1647120",
    "end": "1654080"
  },
  {
    "text": "you will see their object one of the objective is to integrate Wiis into the",
    "start": "1654080",
    "end": "1659760"
  },
  {
    "text": "kuet ecosystem did I answer your",
    "start": "1659760",
    "end": "1667279"
  },
  {
    "text": "question okay yes is that would the two",
    "start": "1667279",
    "end": "1673080"
  },
  {
    "text": "containers can talk to each other natively can you talk more about that as that like grpc or RPC or network called",
    "start": "1673080",
    "end": "1681399"
  },
  {
    "text": "or how how is that happening that they can just kind of natively as you said",
    "start": "1681399",
    "end": "1686840"
  },
  {
    "text": "speak yeah so in this case the question is how do two containers talk natively",
    "start": "1686840",
    "end": "1692720"
  },
  {
    "text": "to each other and the scenario I was describing is when two containers are compiled to webly modules and you link",
    "start": "1692720",
    "end": "1700039"
  },
  {
    "text": "them statically to become one component and then you can just do local function",
    "start": "1700039",
    "end": "1705640"
  },
  {
    "text": "invocation and like in a side like is that what you're saying so they so it's",
    "start": "1705640",
    "end": "1711000"
  },
  {
    "text": "like talking to the underlying WM binary on the host or something or I'm just",
    "start": "1711000",
    "end": "1716880"
  },
  {
    "text": "missing that part sorry can you repeat your question again like is so it's a",
    "start": "1716880",
    "end": "1721960"
  },
  {
    "text": "special protocol that they're talking to right yes uh with the are so your",
    "start": "1721960",
    "end": "1727360"
  },
  {
    "text": "question is is is there a special protocol for the communication of two wi components nwor still yes so the",
    "start": "1727360",
    "end": "1735559"
  },
  {
    "text": "component model defines an Abi and and the ABI will have a lowering and",
    "start": "1735559",
    "end": "1743039"
  },
  {
    "text": "lifting so you you lowering your high level types into canonical API types and",
    "start": "1743039",
    "end": "1748880"
  },
  {
    "text": "you do the communication there and you copy the value to another component into their linear memory and then you lift it",
    "start": "1748880",
    "end": "1755840"
  },
  {
    "text": "up to high level types so that's the",
    "start": "1755840",
    "end": "1761080"
  },
  {
    "text": "protocol it's called a canical ABI and we have tools like we Bon that will",
    "start": "1761080",
    "end": "1767159"
  },
  {
    "text": "generate those ABI bindings and you can just import them into your language as",
    "start": "1767159",
    "end": "1772519"
  },
  {
    "text": "like libraries to consume okay so they're not like talking over RPC no",
    "start": "1772519",
    "end": "1777960"
  },
  {
    "text": "okay that's why they're fast yes so so my understanding is that",
    "start": "1777960",
    "end": "1787200"
  },
  {
    "text": "the model is when you do a function in location it yeah thank you yeah so my",
    "start": "1787200",
    "end": "1793279"
  },
  {
    "text": "understanding today is that when you do a wasm invocation it instantiate a",
    "start": "1793279",
    "end": "1798840"
  },
  {
    "text": "container is there a plan to pack multiple function into the same container let's say I have a function",
    "start": "1798840",
    "end": "1805399"
  },
  {
    "text": "that is called 100 times in parallel could it be running as part of the same",
    "start": "1805399",
    "end": "1811559"
  },
  {
    "text": "container I guess you're really asking if we can reuse the",
    "start": "1811799",
    "end": "1818399"
  },
  {
    "text": "instances yeah reuse the P instance to run multiple function in parallel so if",
    "start": "1818399",
    "end": "1823600"
  },
  {
    "text": "I have a lot of concurrent request can they use the same container to run yeah",
    "start": "1823600",
    "end": "1831039"
  },
  {
    "text": "so when container is fetched into the local system it's basically bunch of files and whenever a request comes in",
    "start": "1831039",
    "end": "1837840"
  },
  {
    "text": "like for wasn't time or for spin it creates a new instance to handle that",
    "start": "1837840",
    "end": "1843279"
  },
  {
    "text": "request and there is optimization but it's not being done in the won time where you can reuse the instance for",
    "start": "1843279",
    "end": "1849720"
  },
  {
    "text": "multiple requests uh there is a plan for that I don't think it's implemented okay",
    "start": "1849720",
    "end": "1855159"
  },
  {
    "text": "thank you yes",
    "start": "1855159",
    "end": "1859919"
  },
  {
    "text": "my understanding with wasam is that uh some languages can compile natively to",
    "start": "1860919",
    "end": "1866440"
  },
  {
    "text": "it and some have to sort of bring their entire runtime with them have you noticed any difference in the like CPU",
    "start": "1866440",
    "end": "1873519"
  },
  {
    "text": "usage and startup time of something that has to bring a whole interpreter versus something that's natively",
    "start": "1873519",
    "end": "1879360"
  },
  {
    "text": "compiled yeah so obviously if you have a a language with a WR time say go go has",
    "start": "1879360",
    "end": "1885559"
  },
  {
    "text": "a WR time and you compile to won you obviously have to compile the wrong time into wison as well so the wison binary",
    "start": "1885559",
    "end": "1891519"
  },
  {
    "text": "will have go code and go wrong time code and so whenever you execute this wi you",
    "start": "1891519",
    "end": "1896919"
  },
  {
    "text": "have to initialize the wrong time first and then execute the code there is a",
    "start": "1896919",
    "end": "1902039"
  },
  {
    "text": "optimization project called wiser that will pre-initialized the wrong time um",
    "start": "1902039",
    "end": "1908679"
  },
  {
    "text": "and so when you ready to execute the code you don't have to uh initialize the run them again so that will speed it up",
    "start": "1908679",
    "end": "1915200"
  },
  {
    "text": "but again your observation is right wiser w e",
    "start": "1915200",
    "end": "1921159"
  },
  {
    "text": "r no okay never I don't know what that",
    "start": "1921159",
    "end": "1926360"
  },
  {
    "text": "is yes I'm coming there's",
    "start": "1928760",
    "end": "1935639"
  },
  {
    "text": "also you're at your choice now thanks so I'll I'll be the annoying",
    "start": "1935760",
    "end": "1942360"
  },
  {
    "text": "person um any chance for Crow support they do have a container D shim like compatibility layer",
    "start": "1942360",
    "end": "1948440"
  },
  {
    "text": "uh so you can you can run stuff that relies on a container D shim um I just we we use cryo almost exclusively right",
    "start": "1948440",
    "end": "1955080"
  },
  {
    "text": "now but this sounds cool I know there's other approaches with cryo like CR run things but um let me ask you this is C",
    "start": "1955080",
    "end": "1964600"
  },
  {
    "text": "like alternative to container D yeah it's it's it's just another container runtime um yeah does no yeah uh Ron Wazi",
    "start": "1964600",
    "end": "1973919"
  },
  {
    "text": "was specifically designed for container D and is used uses container D apis for",
    "start": "1973919",
    "end": "1979880"
  },
  {
    "text": "the Tas service the sbox apis gotcha so it's it's more than just the shim apis",
    "start": "1979880",
    "end": "1985399"
  },
  {
    "text": "like it makes additional calls back into because the cryo does have like a shim compatibility layer you can run like",
    "start": "1985399",
    "end": "1992360"
  },
  {
    "text": "cotta containers with the container D shim but I'm I'm guessing there's there may be tighter Integrations so I figured",
    "start": "1992360",
    "end": "1998159"
  },
  {
    "text": "I'd just ask uh C plug do you want CH I'm just going",
    "start": "1998159",
    "end": "2005240"
  },
  {
    "text": "to say this it's all open S I like somebody could implement the cry plug in for this but I don't think we've",
    "start": "2005240",
    "end": "2012120"
  },
  {
    "text": "explored that yet yeah I haven't tried it but yeah it may be as simple as just saying runtime type VM call this binary",
    "start": "2012120",
    "end": "2019320"
  },
  {
    "text": "and it could just work potentially as it is I just figured I'd ask if that had been tried or yeah I might need to",
    "start": "2019320",
    "end": "2024840"
  },
  {
    "text": "research into this but I'm assuming if there is interface for the shim apis",
    "start": "2024840",
    "end": "2030039"
  },
  {
    "text": "that is like consistent between continu the and cry then they can use the same",
    "start": "2030039",
    "end": "2035200"
  },
  {
    "text": "shim cool awesome thank you of",
    "start": "2035200",
    "end": "2040158"
  },
  {
    "text": "course any other questions",
    "start": "2042919",
    "end": "2048120"
  },
  {
    "text": "yes thank you",
    "start": "2052520",
    "end": "2056679"
  },
  {
    "text": "would this show up and as already functional it already being used that used by",
    "start": "2067839",
    "end": "2077200"
  },
  {
    "text": "Microsoft so your question is about how W and cloud is used in Azure I know how",
    "start": "2078320",
    "end": "2086118"
  },
  {
    "text": "I know how it's used yeah curious youro spbe right and then at the end you put I",
    "start": "2086119",
    "end": "2093240"
  },
  {
    "text": "was wondering when you use",
    "start": "2093240",
    "end": "2097520"
  },
  {
    "text": "oh",
    "start": "2100200",
    "end": "2102480"
  },
  {
    "text": "okay okay so like in general what's the difference between Spin Cube and Wen cloud and how is Microsoft using Okay so",
    "start": "2107920",
    "end": "2116079"
  },
  {
    "text": "the first question is well this Climer I'm a maintainer of spin Cube so I know",
    "start": "2116079",
    "end": "2121359"
  },
  {
    "text": "obviously more about spin but both round times uses was and time",
    "start": "2121359",
    "end": "2128200"
  },
  {
    "text": "as the low level R time so they can execute components and any components",
    "start": "2128200",
    "end": "2134160"
  },
  {
    "text": "that implements y hdp or YZ CI those standardized YZ interfaces can be",
    "start": "2134160",
    "end": "2140880"
  },
  {
    "text": "executed in both run times actually I have a demo about a go y HP application",
    "start": "2140880",
    "end": "2147200"
  },
  {
    "text": "and I do not have to change the code I can run in both Spin and run in was and",
    "start": "2147200",
    "end": "2152640"
  },
  {
    "text": "Cloud so I think both project are very um they they want to have guarantees on",
    "start": "2152640",
    "end": "2159599"
  },
  {
    "text": "be able to execute y standards um so the differences is that we have maintained a",
    "start": "2159599",
    "end": "2168319"
  },
  {
    "text": "wrong continuity shame for spin but I don't think there is a continuity shame for Wen Cloud they have their own",
    "start": "2168319",
    "end": "2175599"
  },
  {
    "text": "operator where you can deploy to kubernetes and run applications on Wen",
    "start": "2175599",
    "end": "2181000"
  },
  {
    "text": "Cloud um but by the way spin Cube has their own operator and crds as well to",
    "start": "2181000",
    "end": "2187280"
  },
  {
    "text": "simp simplified workloads so in that regard they're very similar um",
    "start": "2187280",
    "end": "2192920"
  },
  {
    "text": "and Microsoft has a uh Azure Marketplace offering for spin Cube and that's for",
    "start": "2192920",
    "end": "2200240"
  },
  {
    "text": "the open source offering it's free you can just go to the aure Marketplace search spin Cube and you can deploy to",
    "start": "2200240",
    "end": "2206520"
  },
  {
    "text": "your AKs cluster and we don't we don't have a offering for Wen Cloud",
    "start": "2206520",
    "end": "2213800"
  },
  {
    "text": "today yes John Enthusiast what is the current state of",
    "start": "2215800",
    "end": "2223359"
  },
  {
    "text": "debugging application be yeah um I don't know too much about",
    "start": "2223359",
    "end": "2230480"
  },
  {
    "text": "the debugging experience here but there are a lot of talks regarding debugging like when I like wasn't count was three",
    "start": "2230480",
    "end": "2237400"
  },
  {
    "text": "days ago and there is a talk about adding instrumentation into the Wasa modules for debugging and so I would",
    "start": "2237400",
    "end": "2244359"
  },
  {
    "text": "suggest you to check that out it's pretty cool",
    "start": "2244359",
    "end": "2248920"
  },
  {
    "text": "okay that's time uh I can take one last question I was curious you shared the state",
    "start": "2251119",
    "end": "2257240"
  },
  {
    "text": "container was built with rust and compiled to web assembly did you compare it versus like a scratch container to",
    "start": "2257240",
    "end": "2264040"
  },
  {
    "text": "see if there's differences I don't know if there's a Dao engine on the scratch",
    "start": "2264040",
    "end": "2269440"
  },
  {
    "text": "container um I'm assuming it won't work yeah",
    "start": "2269440",
    "end": "2277240"
  },
  {
    "text": "all right thank you everyone and have a great day",
    "start": "2278079",
    "end": "2283520"
  }
]