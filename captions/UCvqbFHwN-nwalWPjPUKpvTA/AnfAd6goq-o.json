[
  {
    "text": "hi everyone uh welcome to this tutorial well i will introduce the container storage interface primitives",
    "start": "1839",
    "end": "8080"
  },
  {
    "text": "and how to use those in kubernetes my name is michael matson i'm a tech marketing engineer and master",
    "start": "8080",
    "end": "14559"
  },
  {
    "text": "technologist with the hula packet enterprise i'm presenting this at cubecon virtual",
    "start": "14559",
    "end": "20000"
  },
  {
    "text": "2020 and if you're watching this live thank you so much for hanging in there this is",
    "start": "20000",
    "end": "25599"
  },
  {
    "text": "on the last day and if you're watching this as a rerun thank you so much for for watching this content i hope you",
    "start": "25599",
    "end": "32960"
  },
  {
    "text": "find it interesting so um this tutorial is basically all",
    "start": "32960",
    "end": "39440"
  },
  {
    "text": "about csi and what you can do with it in kubernetes and that is sort of",
    "start": "39440",
    "end": "44800"
  },
  {
    "text": "the introduction to csi i'm going to talk about some of the csi drivers that are out there and what csi is the the",
    "start": "44800",
    "end": "52879"
  },
  {
    "text": "second part of the presentation we'll talk a little bit about dynamic provisioning of persistent volumes in kubernetes it i",
    "start": "52879",
    "end": "59280"
  },
  {
    "text": "think it's important that we kind of nail down the basics before we go into the more advanced topics",
    "start": "59280",
    "end": "65518"
  },
  {
    "text": "and i also want to talk a little bit about how parts and controllers attach to persistent storage",
    "start": "65519",
    "end": "70640"
  },
  {
    "text": "as that is also a very um important primitive to understand while working with persistent storage um",
    "start": "70640",
    "end": "77600"
  },
  {
    "text": "the more fun stuff kind of begins when we start talking about csi snapshots and using data sources in your",
    "start": "77600",
    "end": "84240"
  },
  {
    "text": "persistent volume claims uh to be able to clone external storage into a new pod and leverage data sets",
    "start": "84240",
    "end": "91759"
  },
  {
    "text": "that already exist uh on your storage system uh using raw block volumes is something that",
    "start": "91759",
    "end": "97920"
  },
  {
    "text": "uh is uh introduced in csi as well has been around for a while and i'm going to show you how that works",
    "start": "97920",
    "end": "104479"
  },
  {
    "text": "and how those different use cases around using raw block volumes work",
    "start": "104479",
    "end": "111520"
  },
  {
    "text": "another interesting concept is using ephemeral volumes uh with the with your uh with your pods",
    "start": "111520",
    "end": "118880"
  },
  {
    "text": "and that basically makes your external persistent storage volume act like it",
    "start": "118880",
    "end": "124479"
  },
  {
    "text": "is a container right and there are various different ways on how to attach those ephemeral volumes to your",
    "start": "124479",
    "end": "131280"
  },
  {
    "text": "uh to your parts and and we're going to talk a little bit about how that works uh at the end of the at the end of the",
    "start": "131280",
    "end": "138239"
  },
  {
    "text": "presentation i will kind of summarize what we talked about and there will also be a live q a",
    "start": "138239",
    "end": "143680"
  },
  {
    "text": "right so this session is pre-recorded but at the end of the session there will be a live q a i will be there",
    "start": "143680",
    "end": "150000"
  },
  {
    "text": "in person answer any questions you might have on this presentation or or anything that kind of relates to this",
    "start": "150000",
    "end": "155840"
  },
  {
    "text": "subject uh i will also hang out in the slack channel and i've been i've been in the slack channel for up throughout the the event",
    "start": "155840",
    "end": "162319"
  },
  {
    "text": "as well and and one important detail i kind of want to touch on as well here that i'm obviously going to",
    "start": "162319",
    "end": "169120"
  },
  {
    "text": "deploy a lot of yaml files and and things like that and and run through a lot of hands-on labs i",
    "start": "169120",
    "end": "174720"
  },
  {
    "text": "got 11 hands-on labs for you so this presentation really goes to 11",
    "start": "174720",
    "end": "180480"
  },
  {
    "text": "and and i kind of put together a github repo where all these config files",
    "start": "180480",
    "end": "188000"
  },
  {
    "text": "and there's also asking ema cast files so this if there's any thing you actually see in the demo",
    "start": "188000",
    "end": "196480"
  },
  {
    "text": "in the video you can use the cast files and play them play them on your local computer and",
    "start": "196480",
    "end": "202480"
  },
  {
    "text": "basically copy and paste the text from from the demo right because that is really difficult to capture from",
    "start": "202480",
    "end": "208799"
  },
  {
    "text": "from a video file into a terminal and so that is the repo that we are",
    "start": "208799",
    "end": "214000"
  },
  {
    "text": "going to use throughout the entire tutorial so let let me uh",
    "start": "214000",
    "end": "220080"
  },
  {
    "text": "start off here and kind of talk a little bit about what is csi you know that csi stands for",
    "start": "220080",
    "end": "227200"
  },
  {
    "text": "container storage interface but uh what what is actually behind it uh so it's basically a specification",
    "start": "227200",
    "end": "235760"
  },
  {
    "text": "right uh it's a it's a set of specifications and the lack for a better comparison it's sort of like the",
    "start": "235760",
    "end": "241840"
  },
  {
    "text": "cinder for kubernetes right with the benefit of that the drivers and",
    "start": "241840",
    "end": "247680"
  },
  {
    "text": "the entire frameworks live outside the um the main kubernetes project right so the",
    "start": "247680",
    "end": "254239"
  },
  {
    "text": "drivers and and all the side cars i'm going to talk a little bit about this later they",
    "start": "254239",
    "end": "259280"
  },
  {
    "text": "they know they're not part of the main kubernetes upstream tree right so that their the sidecar",
    "start": "259280",
    "end": "265120"
  },
  {
    "text": "lives in their own repos all the csi drivers are delivered by vendors in in various different ways",
    "start": "265120",
    "end": "270639"
  },
  {
    "text": "right it's also governed by the special interest group kubernetes",
    "start": "270639",
    "end": "276880"
  },
  {
    "text": "storage they meet on a regular cadence and also put some links here into the csi",
    "start": "276880",
    "end": "284479"
  },
  {
    "text": "documentation itself and i'm going to reference that in the in in some of the demos as well on how",
    "start": "284479",
    "end": "290960"
  },
  {
    "text": "you kind of find stuff and such and the main goal for the csi specification is to provide",
    "start": "290960",
    "end": "299280"
  },
  {
    "text": "an interface standard on how to provision and attach storage to container orchestrators that",
    "start": "299280",
    "end": "305840"
  },
  {
    "text": "is often uh referred to as a ceo right and we're obviously going to talk about kubernetes",
    "start": "305840",
    "end": "311280"
  },
  {
    "text": "today but you can also use uh csi for nomad or cloud foundry and mesos and and those",
    "start": "311280",
    "end": "318880"
  },
  {
    "text": "are like the the less popular ones i know that no matter has got csi support uh in in in that container orchestrator",
    "start": "318880",
    "end": "327600"
  },
  {
    "text": "as well so we'll probably see a few more use cases for that coming up uh",
    "start": "327600",
    "end": "335840"
  },
  {
    "text": "so i just want to kind of touch a little bit on the history of the csi how how it kind of came to be right",
    "start": "335840",
    "end": "342720"
  },
  {
    "text": "so if we kind of go back to the early days of kubernetes uh we have these like intri persistent",
    "start": "342720",
    "end": "348880"
  },
  {
    "text": "volume plug-ins right and the two example plugins i have here like fiber channel and iscsi and they were kind of introduced in",
    "start": "348880",
    "end": "355039"
  },
  {
    "text": "kubernetes 101 iscsi in 0.15 right but there's a slew of",
    "start": "355039",
    "end": "360639"
  },
  {
    "text": "different plugins uh in the that is part of the main kubernetes distribution",
    "start": "360639",
    "end": "366000"
  },
  {
    "text": "right and somehow this became really unwieldy really early on because what happens is",
    "start": "366000",
    "end": "372080"
  },
  {
    "text": "that every vendor needed to learn how to contribute to kubernetes right",
    "start": "372080",
    "end": "377759"
  },
  {
    "text": "and that wasn't really an easy feat back then right and and everything needs to be code reviewed and",
    "start": "377759",
    "end": "383919"
  },
  {
    "text": "you also stuck to the release cadence of kubernetes and that prohibits the vendor to kind of innovate",
    "start": "383919",
    "end": "390800"
  },
  {
    "text": "at his pace and always have to wait for the next release for new features or bug fixes and things",
    "start": "390800",
    "end": "397039"
  },
  {
    "text": "like that and and that was pretty unmanageable what came along in kubernetes 1.2 is the",
    "start": "397039",
    "end": "405280"
  },
  {
    "text": "entry flex volume plug-in and and that introduced the concept of allowing",
    "start": "405280",
    "end": "411120"
  },
  {
    "text": "vendors to to write flex volume drivers and flex volume drivers were kind of useful",
    "start": "411120",
    "end": "416400"
  },
  {
    "text": "it was it was a pretty decent stop gap but somehow that become became very",
    "start": "416400",
    "end": "423360"
  },
  {
    "text": "unuser friendly as well right because the flex volume driver itself it was it's a self-contained binary that",
    "start": "423360",
    "end": "430080"
  },
  {
    "text": "needs to be needed to reside on every cubelet in the cluster that was supposed",
    "start": "430080",
    "end": "436800"
  },
  {
    "text": "to attach persistent storage and it did not have any dynamic provisioning",
    "start": "436800",
    "end": "442639"
  },
  {
    "text": "support either so if you had a if you were a vendor and want to provide a flex volume driver",
    "start": "442639",
    "end": "448080"
  },
  {
    "text": "you also have to write your own provisioner to be able to satisfy persistent volume claims with",
    "start": "448080",
    "end": "454319"
  },
  {
    "text": "that driver and and that's what kind of when we can't move into the face of the",
    "start": "454319",
    "end": "461280"
  },
  {
    "text": "container storage interface it's just completely lives outside of kubernetes there's like nothing",
    "start": "461280",
    "end": "466479"
  },
  {
    "text": "inside kubernetes that depends on the csi the delivery vehicles of csi or",
    "start": "466479",
    "end": "473840"
  },
  {
    "text": "the velocity of how things are introduced and such right and the entire",
    "start": "473840",
    "end": "479520"
  },
  {
    "text": "framework is actually deployed on top of kubernetes right so nothing lives entry and that allows",
    "start": "479520",
    "end": "486639"
  },
  {
    "text": "vendors then to once you have all the csi side cores and such in install on the kubernetes cluster",
    "start": "486639",
    "end": "494000"
  },
  {
    "text": "vendors can then provide their csi controller driver and their csi no driver right and that is",
    "start": "494000",
    "end": "501599"
  },
  {
    "text": "the vehicle that i'm going to talk about today on how to install csi drivers and how to use the",
    "start": "501599",
    "end": "507039"
  },
  {
    "text": "particular feature that the csi driver provides",
    "start": "507039",
    "end": "511759"
  },
  {
    "text": "so i also have this simplified architecture view of csi right so you",
    "start": "512800",
    "end": "518880"
  },
  {
    "text": "kind of have the the side cars that i've been talking about first you have the no driver registrar",
    "start": "518880",
    "end": "524080"
  },
  {
    "text": "and you will see like on every node that have csi drivers on them you will see what drivers they have and some of the",
    "start": "524080",
    "end": "529279"
  },
  {
    "text": "features that they provide like topology keys and such and and then you have the all the side",
    "start": "529279",
    "end": "535200"
  },
  {
    "text": "cars like the provisioner the attache the resizer the snapshotter uh they are all provided by the",
    "start": "535200",
    "end": "541519"
  },
  {
    "text": "kubernetes sig storage community right and then you have the external components",
    "start": "541519",
    "end": "547040"
  },
  {
    "text": "which is the csi controller driver and the csi no driver that that then then talks to a",
    "start": "547040",
    "end": "554320"
  },
  {
    "text": "external storage system the storage system can actually run on kubernetes itself or it can be outside the cluster",
    "start": "554320",
    "end": "561839"
  },
  {
    "text": "entirely right so if you have like an external nfs server or a block storage server",
    "start": "561839",
    "end": "567519"
  },
  {
    "text": "and that can live entirely outside and then you have the container native storage uh or container attached storage",
    "start": "567519",
    "end": "574640"
  },
  {
    "text": "solutions that are out there where you actually deploy everything on your cluster as well right",
    "start": "574640",
    "end": "581680"
  },
  {
    "text": "the communication that is between the sidecar images and and the um the controller driver and the",
    "start": "581680",
    "end": "588160"
  },
  {
    "text": "no driver is using a g or pc interface so some of these components they need to",
    "start": "588160",
    "end": "594560"
  },
  {
    "text": "run on the same nodes but the external storage system or the storage system component they can talk over an entirely different",
    "start": "594560",
    "end": "602240"
  },
  {
    "text": "interface like using rest and iscsi and whatnot another",
    "start": "602240",
    "end": "608560"
  },
  {
    "text": "uh detail you can see up there in the um in the uh light bulb there is that csi",
    "start": "608560",
    "end": "615120"
  },
  {
    "text": "drivers today they may provide either file or block storage and we're also seeing that there are a",
    "start": "615120",
    "end": "621360"
  },
  {
    "text": "few kubernetes enhancement proposals around providing object storage with sort of",
    "start": "621360",
    "end": "626800"
  },
  {
    "text": "similar semantics so we're surely looking forward to that",
    "start": "626800",
    "end": "632800"
  },
  {
    "text": "and we all almost have uh over a hundred drivers uh there is 90",
    "start": "632800",
    "end": "639200"
  },
  {
    "text": "some drivers available today right so if you go to the the url that is on the slide there",
    "start": "639200",
    "end": "645120"
  },
  {
    "text": "you will see a list of the different drivers and also what kind of features that they",
    "start": "645120",
    "end": "651200"
  },
  {
    "text": "support so i'm going to use the hp csi driver for kubernetes in the hands-on labs and",
    "start": "651200",
    "end": "657040"
  },
  {
    "text": "such but it doesn't really matter what csi driver you use as long as it supports the",
    "start": "657040",
    "end": "662079"
  },
  {
    "text": "different features and in the different specification levels of the csi specification",
    "start": "662079",
    "end": "668800"
  },
  {
    "text": "and if you pull up this page you will then be able to see that there are certain",
    "start": "668800",
    "end": "673920"
  },
  {
    "text": "aspects uh of each individual driver right so i i just took a good example here in the",
    "start": "673920",
    "end": "680240"
  },
  {
    "text": "driverless uh cfs and and ceph rdb which provides",
    "start": "680240",
    "end": "685440"
  },
  {
    "text": "block storage and they provide um sort of like different uh aspects of the spec that it",
    "start": "685440",
    "end": "693040"
  },
  {
    "text": "supports and and different features right so uh we can see that um",
    "start": "693040",
    "end": "699040"
  },
  {
    "text": "the modes that the driver support is persistent it doesn't support ephemeral so the mode could be either persistent or ephemeral",
    "start": "699040",
    "end": "705600"
  },
  {
    "text": "the access mode if you look at cfs they can do read write multiple pods i'm going to talk about that later in",
    "start": "705600",
    "end": "712320"
  },
  {
    "text": "this tutorial what that actually means but this is just a way for you to kind of assess the different drivers",
    "start": "712320",
    "end": "718320"
  },
  {
    "text": "depending on your use case you can see that the block storage",
    "start": "718320",
    "end": "724000"
  },
  {
    "text": "driver will only support read write a single pod and different features that are very",
    "start": "724480",
    "end": "729519"
  },
  {
    "text": "similar the only difference here what you can see here is that the the raw block volume or the block volume",
    "start": "729519",
    "end": "736800"
  },
  {
    "text": "driver will support raw block and it will also support topology and and and those keys are not needed",
    "start": "736800",
    "end": "744720"
  },
  {
    "text": "for using ceph the file system component right because it's a distributed file system",
    "start": "744720",
    "end": "750639"
  },
  {
    "text": "will be available everywhere and it does not have any block cap capabilities right so depending on your use case what",
    "start": "750639",
    "end": "757120"
  },
  {
    "text": "kind of apps you're deploying you kind of want to assess the driver list to make sure that the driver you're",
    "start": "757120",
    "end": "762160"
  },
  {
    "text": "using supported the specific capability that you're looking for",
    "start": "762160",
    "end": "767439"
  },
  {
    "text": "all right so these are the different features that we're going to talk about today",
    "start": "768800",
    "end": "773839"
  },
  {
    "text": "and and kind of run through the different tutorials uh for provisioning storage and",
    "start": "773839",
    "end": "780160"
  },
  {
    "text": "show you how to attach raw block volumes and and so forth and these all have",
    "start": "780160",
    "end": "786560"
  },
  {
    "text": "different maturity levels within kubernetes today right we have the the features made",
    "start": "786560",
    "end": "793600"
  },
  {
    "text": "ga and a few uh data features and we also have one alpha feature we're going to talk about today the",
    "start": "793600",
    "end": "800639"
  },
  {
    "text": "generic ephemeral volumes you got got introduced in 119 and it's a pretty neat",
    "start": "800639",
    "end": "805680"
  },
  {
    "text": "addition to if you compare that to the ephemeral local volumes and i'm going to talk in in depth about the difference around",
    "start": "805680",
    "end": "813680"
  },
  {
    "text": "that when we get there so and this is also something you need",
    "start": "813680",
    "end": "818720"
  },
  {
    "text": "to consider when you want to use persistent storage with your workloads in kubernetes and it also",
    "start": "818720",
    "end": "824959"
  },
  {
    "text": "the fact that different kubernetes distributions they may mature these features on on on a",
    "start": "824959",
    "end": "831040"
  },
  {
    "text": "different cadence or a faster cadence depending on um [Music]",
    "start": "831040",
    "end": "837440"
  },
  {
    "text": "the particular use cases that particular vendor want to cater for so that is also something to keep an eye",
    "start": "837440",
    "end": "843519"
  },
  {
    "text": "out our ielts on and all these different features are described in depth",
    "start": "843519",
    "end": "850079"
  },
  {
    "text": "um on the kubernetes csi github repo as well",
    "start": "850079",
    "end": "855680"
  },
  {
    "text": "and we're going to cover most of these i'm not going to talk that much about topology i'm going to touch a little bit",
    "start": "855680",
    "end": "861040"
  },
  {
    "text": "about that when we walk through the storage class volume limits i'm not going to talk",
    "start": "861040",
    "end": "866399"
  },
  {
    "text": "about that either but that's a way for the csi driver vendor to",
    "start": "866399",
    "end": "871440"
  },
  {
    "text": "put a node limit on on the node how many volumes you can",
    "start": "871440",
    "end": "877120"
  },
  {
    "text": "provision from that particular driver to that particular node which is quite useful but the rest of",
    "start": "877120",
    "end": "882639"
  },
  {
    "text": "the capabilities here i'm going to show volume expansion thermal local volumes",
    "start": "882639",
    "end": "887680"
  },
  {
    "text": "volume snapshots and also use the persistent volume clone",
    "start": "887680",
    "end": "893519"
  },
  {
    "text": "using the data source stanza in the persistent volume claim so we have a a full agenda uh",
    "start": "893519",
    "end": "900800"
  },
  {
    "text": "for sure and so we're kind of approaching the first kind of hands-on lab here",
    "start": "900800",
    "end": "906240"
  },
  {
    "text": "right so and that is basically installing and inspecting csi driver right and drivers are you can find most",
    "start": "906240",
    "end": "914480"
  },
  {
    "text": "drivers on artifact hub dot io most of them install as as helm charts",
    "start": "914480",
    "end": "921199"
  },
  {
    "text": "some of them have fully blown operators and some of the drivers you just reference",
    "start": "921199",
    "end": "928480"
  },
  {
    "text": "and a configuration file that points to lives in a ghetto brief or a web server",
    "start": "928480",
    "end": "934959"
  },
  {
    "text": "and that will install the driver for you and once you have a driver or if you have access to a cluster",
    "start": "934959",
    "end": "940079"
  },
  {
    "text": "now what you can do is it's just you do a cube codel get csi drivers that will list the the",
    "start": "940079",
    "end": "946079"
  },
  {
    "text": "drivers that you have installed on your cluster and the capabilities of the driver and if you do a coupe call get csi nodes",
    "start": "946079",
    "end": "953040"
  },
  {
    "text": "you will see what nodes in your cluster have csi drivers on them and you can do a like verbose output and see what driver they",
    "start": "953040",
    "end": "960320"
  },
  {
    "text": "actually have installed right so now we",
    "start": "960320",
    "end": "965360"
  },
  {
    "text": "are going to install a csi driver that's our first hands-on lab in this tutorial so i'm",
    "start": "965360",
    "end": "972880"
  },
  {
    "text": "going to switch over to my terminal and hang on for one second",
    "start": "972880",
    "end": "977920"
  },
  {
    "text": "all right as i mentioned i'm going to use the hpe csi driver for kubernetes and you",
    "start": "977920",
    "end": "983759"
  },
  {
    "text": "install that with helm right and i'm just going to add the helm repo to my cluster",
    "start": "983759",
    "end": "988959"
  },
  {
    "text": "do a helm repo update and then i'm going to create a separate namespace",
    "start": "988959",
    "end": "995440"
  },
  {
    "text": "for that driver that what i want to install it do a helm install",
    "start": "995440",
    "end": "1003040"
  },
  {
    "text": "namespace vendor csi driver name i've obviously made a",
    "start": "1004959",
    "end": "1011600"
  },
  {
    "text": "typo there i want to give the release a name because this is something",
    "start": "1011600",
    "end": "1017120"
  },
  {
    "text": "switching from helm2 to helm3 obviously provides that headache and once the driver is installed you can",
    "start": "1017120",
    "end": "1023040"
  },
  {
    "text": "do a cube called get csi drivers you will see the capabilities of the driver",
    "start": "1023040",
    "end": "1028720"
  },
  {
    "text": "and the driver name and you will also see on your nodes that you will have",
    "start": "1028720",
    "end": "1033918"
  },
  {
    "text": "i have four working nodes in my cluster and they all have the driver installed the drivers also have",
    "start": "1033919",
    "end": "1042400"
  },
  {
    "text": "a way to configure themselves right so for the um csi dr hpcs driver for kubernetes i'm",
    "start": "1042400",
    "end": "1050080"
  },
  {
    "text": "i need to provide a secret that provide a means for me to find the backend that i",
    "start": "1050080",
    "end": "1055600"
  },
  {
    "text": "want to use right so for me to be able to start provisioning storage from storage classes and such",
    "start": "1055600",
    "end": "1061520"
  },
  {
    "text": "and i need to create that secret to make sure that the csi provisioner attacher and such",
    "start": "1061520",
    "end": "1067679"
  },
  {
    "text": "will they be able to find that secret when they need to talk to the hp csi driver so i'm just going to",
    "start": "1067679",
    "end": "1074480"
  },
  {
    "text": "go ahead and create that and there we go driver installed",
    "start": "1074480",
    "end": "1080880"
  },
  {
    "text": "so now when we have the driver installed uh we can do a lot of things right and the first thing i want to talk",
    "start": "1080880",
    "end": "1087200"
  },
  {
    "text": "about is how we can do dynamic provisioning of persistent volumes",
    "start": "1087200",
    "end": "1092840"
  },
  {
    "text": "and dynamic provisioning in kubernetes is nothing that is exclusive to csi drivers in in any way",
    "start": "1092840",
    "end": "1099679"
  },
  {
    "text": "right so if we just uh imagine for a second here that we're we might be using a kubernetes entry",
    "start": "1099679",
    "end": "1105120"
  },
  {
    "text": "storage plug-in we might be leveraging a cloud providers manage communities service to provide",
    "start": "1105120",
    "end": "1111360"
  },
  {
    "text": "persistent storage and so forth or we might be using um a csi driver so on the left hand side",
    "start": "1111360",
    "end": "1119039"
  },
  {
    "text": "here you will see that the cluster administrator he will create something called a storage class",
    "start": "1119039",
    "end": "1124400"
  },
  {
    "text": "and that will reference the um the provisioner you want to use and you want to give it a name and you",
    "start": "1124400",
    "end": "1131039"
  },
  {
    "text": "also you might have a list of parameters that are specific to to that particular provisioner",
    "start": "1131039",
    "end": "1138640"
  },
  {
    "text": "for csi drivers you need to have a list of keys that references the the secret to the different side cars and if you're",
    "start": "1138640",
    "end": "1145760"
  },
  {
    "text": "you have your own side cars you need to call them out there as well",
    "start": "1145760",
    "end": "1151039"
  },
  {
    "text": "you want to specify things like file system type and things like that and there are some other keys in the",
    "start": "1151039",
    "end": "1156320"
  },
  {
    "text": "storage class that i'm going to talk about later in the presentation",
    "start": "1156320",
    "end": "1161280"
  },
  {
    "text": "the middle piece here the the user aspect of it is that users create persistent volume",
    "start": "1161360",
    "end": "1167360"
  },
  {
    "text": "claims and persistent volume claims are name-spaced right so uh",
    "start": "1167360",
    "end": "1172799"
  },
  {
    "text": "and that will in turn he will request the access mode i'm going to talk about that later as well what that is",
    "start": "1172799",
    "end": "1178640"
  },
  {
    "text": "and then you request a storage size right so that is where you specify the capacity",
    "start": "1178640",
    "end": "1184640"
  },
  {
    "text": "in you can do either terabyte gigabytes or kilobytes megabytes uh whatever uni unit you want and you",
    "start": "1184640",
    "end": "1192240"
  },
  {
    "text": "might want to call out the storage class there is a annotation you can do on the storage class i'm going to show you how",
    "start": "1192240",
    "end": "1197840"
  },
  {
    "text": "that works as well that will allow you to specify default storage class and that means that any persistent",
    "start": "1197840",
    "end": "1204880"
  },
  {
    "text": "volume claim without a storage class name called out explicitly it will be",
    "start": "1204880",
    "end": "1210080"
  },
  {
    "text": "provisioned from that storage class once the persistent volume claim has been submitted to the cluster",
    "start": "1210080",
    "end": "1215919"
  },
  {
    "text": "the dynamic provisioner which listens to the that pro pro specific provisioner",
    "start": "1215919",
    "end": "1222480"
  },
  {
    "text": "name will uh provision something called a persistent volume and that is a a stanza that",
    "start": "1222480",
    "end": "1229840"
  },
  {
    "text": "basically describes the backend storage right so that's where you will have your",
    "start": "1229840",
    "end": "1234880"
  },
  {
    "text": "your driver name and your implementation specific keys and such and how to find the volume on the back",
    "start": "1234880",
    "end": "1241039"
  },
  {
    "text": "end in the case of csi you will also have a bunch of secrets and things to to be able to attach and detach that",
    "start": "1241039",
    "end": "1247760"
  },
  {
    "text": "storage uh from a particular node at any given time right and you will also have the access",
    "start": "1247760",
    "end": "1253600"
  },
  {
    "text": "mode and all that metadata that the kubernetes needs to be able to attach and detach the volume and",
    "start": "1253600",
    "end": "1260000"
  },
  {
    "text": "provision the volume and so forth",
    "start": "1260000",
    "end": "1265760"
  },
  {
    "text": "so diving into the different uh objects here too if you look at the storage class here right as i mentioned",
    "start": "1266799",
    "end": "1272799"
  },
  {
    "text": "then having a default storage class is usually good hygiene right so if you",
    "start": "1272799",
    "end": "1279679"
  },
  {
    "text": "provision a managed kubernetes cluster on any of the public cloud providers uh you will see that you will have a",
    "start": "1279679",
    "end": "1285520"
  },
  {
    "text": "storage class right so do a coupe call get storage class you will see that there will be a storage class there it's mark default",
    "start": "1285520",
    "end": "1292240"
  },
  {
    "text": "and that will use the cloud providers storage solution to provide persistent storage to your",
    "start": "1292240",
    "end": "1297760"
  },
  {
    "text": "to your workloads in the case of csi you will have these keys that say says",
    "start": "1297760",
    "end": "1305120"
  },
  {
    "text": "csi.storage.cates.io and a set of um published secret names",
    "start": "1305159",
    "end": "1310559"
  },
  {
    "text": "or or secret namespace for the different side course and you need this for every site card right so the csi expander",
    "start": "1310559",
    "end": "1317120"
  },
  {
    "text": "sidecar that would need a secret and the publishing and and a few others that you need to",
    "start": "1317120",
    "end": "1323440"
  },
  {
    "text": "reference in the storage class need to be pointed out there explicitly you also have the ability to",
    "start": "1323440",
    "end": "1329360"
  },
  {
    "text": "set the reclaim policy on them on the persistent volume so it's basically when a user",
    "start": "1329360",
    "end": "1335039"
  },
  {
    "text": "deletes a persistent volume claim what is going to happen uh when that persistent volume claim",
    "start": "1335039",
    "end": "1340720"
  },
  {
    "text": "gets deleted will it be will the persistent volume that references to back-end storage",
    "start": "1340720",
    "end": "1346080"
  },
  {
    "text": "would be retained on the cluster or will it be deleted um another key here i'm",
    "start": "1346080",
    "end": "1352799"
  },
  {
    "text": "showcasing is the volume binding mode and if there's going to be immediate or wait for first consumer and that is",
    "start": "1352799",
    "end": "1359120"
  },
  {
    "text": "important if you're using a topology within your cluster right so if you have a driver that",
    "start": "1359120",
    "end": "1365120"
  },
  {
    "text": "supports topology you might want to be able to [Music]",
    "start": "1365120",
    "end": "1370720"
  },
  {
    "text": "separate your different controllers or your paws in different zones in your",
    "start": "1370720",
    "end": "1376159"
  },
  {
    "text": "cluster right and when you provision storage you want to make sure that you attach storage that is close to the node",
    "start": "1376159",
    "end": "1383200"
  },
  {
    "text": "right so what happens is once kubernetes have selected a node to provision your pod",
    "start": "1383200",
    "end": "1389760"
  },
  {
    "text": "that's when the persistent volume gets provisioned and the persistent volume will then be",
    "start": "1389760",
    "end": "1395440"
  },
  {
    "text": "attached to those set of nodes right because and it will then annotate the persistent volume",
    "start": "1395440",
    "end": "1402960"
  },
  {
    "text": "with the um with the affinity keys and that means that that persistent volume will only be able to be",
    "start": "1402960",
    "end": "1408960"
  },
  {
    "text": "attached to those particular sets of nodes if you want to allow the or if the csi",
    "start": "1408960",
    "end": "1416480"
  },
  {
    "text": "driver you want to use allows expansion uh you will set that in the storage class as well right so if it",
    "start": "1416480",
    "end": "1422240"
  },
  {
    "text": "allows expansion you will set that to true and you will then be able to resize your persistent volume claims as",
    "start": "1422240",
    "end": "1429440"
  },
  {
    "text": "you desire or not resize that's the wrong term because you can only expand you cannot shrink",
    "start": "1429440",
    "end": "1435440"
  },
  {
    "text": "and i'm going to show you how that works as well",
    "start": "1435440",
    "end": "1439120"
  },
  {
    "text": "so looking at the persistent volume claim uh it's it's is very straightforward very",
    "start": "1440799",
    "end": "1446720"
  },
  {
    "text": "basic and you need to specify the access mode i in my next slide i'm going to talk a little",
    "start": "1446720",
    "end": "1453120"
  },
  {
    "text": "bit broader about what access modes are and then you need to specify the uh the",
    "start": "1453120",
    "end": "1459039"
  },
  {
    "text": "resource request the capacity that i mentioned right so in this example i'm going to provision",
    "start": "1459039",
    "end": "1464880"
  },
  {
    "text": "or i'm going to actually request a two terabyte volume uh the volume mode is is set to file",
    "start": "1464880",
    "end": "1471520"
  },
  {
    "text": "system per default but this is where you would specify a volume mode block if you want to provision a block device and",
    "start": "1471520",
    "end": "1477279"
  },
  {
    "text": "the underlying driver supports that and you will also also be able to",
    "start": "1477279",
    "end": "1482720"
  },
  {
    "text": "specify the storage class name or or omit the storage class name if you have a default storage class but",
    "start": "1482720",
    "end": "1489360"
  },
  {
    "text": "in clusters where you have multiple tiers of storage say you have a gold silver bronze style thing or you have like fast ssd or",
    "start": "1489360",
    "end": "1496640"
  },
  {
    "text": "slow media kind of segregation right it might be useful for users to be able to make that",
    "start": "1496640",
    "end": "1502799"
  },
  {
    "text": "distinction between uh provisioning fast storage or slow storage because there's usually",
    "start": "1502799",
    "end": "1508080"
  },
  {
    "text": "cost associated with that and the billing and accounting apartment is will be happier if if the right",
    "start": "1508080",
    "end": "1515840"
  },
  {
    "text": "workload is running at the right place so pvc access mode or persistent volume",
    "start": "1515840",
    "end": "1523120"
  },
  {
    "text": "claim access mode this is a graphic i put together to kind of like illustrate what types of",
    "start": "1523120",
    "end": "1529760"
  },
  {
    "text": "applications require different types of storage right so one of the absolute absolute most",
    "start": "1529760",
    "end": "1536960"
  },
  {
    "text": "popular kubernetes controller to use with persistent storage is a stateful set right and you will",
    "start": "1536960",
    "end": "1544159"
  },
  {
    "text": "find like min io rook redis kafka all these different workloads that",
    "start": "1544159",
    "end": "1551440"
  },
  {
    "text": "you run on top of kubernetes they use something called a state for staple set and staple set in itself",
    "start": "1551440",
    "end": "1557919"
  },
  {
    "text": "i'm not going to cover that in detail but that is a controller that has a has ordered starts persistent",
    "start": "1557919",
    "end": "1564640"
  },
  {
    "text": "network naming and also persistent naming of the volumes that gets attached to each of",
    "start": "1564640",
    "end": "1569840"
  },
  {
    "text": "the parts as well right and what happens is that each part",
    "start": "1569840",
    "end": "1575840"
  },
  {
    "text": "that starts up will basically have its own file system so each part",
    "start": "1575840",
    "end": "1581200"
  },
  {
    "text": "will benefit greatly by having a read write once persistent volume claim right because",
    "start": "1581200",
    "end": "1587600"
  },
  {
    "text": "that storage will then be private to that pod for the duration of",
    "start": "1587600",
    "end": "1592880"
  },
  {
    "text": "that stateful set right so if you delete the pod the port will attach the exact same storage at the same time",
    "start": "1592880",
    "end": "1598960"
  },
  {
    "text": "and storage will also be provisioned dynamically and i'm going to talk about this in detail",
    "start": "1598960",
    "end": "1605279"
  },
  {
    "text": "later in the tutorial as well another very popular pattern for deploying legacy",
    "start": "1605279",
    "end": "1612320"
  },
  {
    "text": "applications on kubernetes is to use something called a deployment right and in this case if you're using single",
    "start": "1612320",
    "end": "1618960"
  },
  {
    "text": "replica deployment uh they usually leverage read write one's",
    "start": "1618960",
    "end": "1624880"
  },
  {
    "text": "persistent volume claims so as you can see here i have my sql both in the legacy app",
    "start": "1624880",
    "end": "1630080"
  },
  {
    "text": "single instance and the shared nothing distributed because you can run that database in two different modes right",
    "start": "1630080",
    "end": "1635360"
  },
  {
    "text": "you can have the replicated uh one as a stateful set where you have one main instance and multiple replica",
    "start": "1635360",
    "end": "1642559"
  },
  {
    "text": "instances and you can also run it as a single uh replica pod where you only have",
    "start": "1642559",
    "end": "1648320"
  },
  {
    "text": "one single part accessing one file system so that is a matter of preference how you would like to run that particular",
    "start": "1648320",
    "end": "1654960"
  },
  {
    "text": "application and the same goes for postgres it also postgres also has the same",
    "start": "1654960",
    "end": "1661279"
  },
  {
    "text": "pattern as my sequel in the stable set as well if you want to run it in a shared nothing distributed architecture",
    "start": "1661279",
    "end": "1669440"
  },
  {
    "text": "and when we get to scalable distributed applications uh that uh require shared storage right",
    "start": "1669440",
    "end": "1675840"
  },
  {
    "text": "so say that you have nginx a distributed front-end with a lot of content right it's really",
    "start": "1675840",
    "end": "1681919"
  },
  {
    "text": "practical to kind of have them reference the exact same storage across the cluster so when you scale",
    "start": "1681919",
    "end": "1689039"
  },
  {
    "text": "replicas up and down it will exactly it will attach the exact same storage to",
    "start": "1689039",
    "end": "1694399"
  },
  {
    "text": "that particular pawn uh also a lot of the uh ai ml based",
    "start": "1694399",
    "end": "1699600"
  },
  {
    "text": "workloads like running a jupiter hub or kubeflow they kind of see storage as a data lake",
    "start": "1699600",
    "end": "1707440"
  },
  {
    "text": "right so every instance that you spin up of uber or you you a certain uh aspect",
    "start": "1707440",
    "end": "1715039"
  },
  {
    "text": "in your ai ml pipeline requires all the different replicas of that particular workload to access the exact",
    "start": "1715039",
    "end": "1721840"
  },
  {
    "text": "same storage at any given point in time and you accomplish that by using something called a read write many",
    "start": "1721840",
    "end": "1728000"
  },
  {
    "text": "persistent volume claims so then multiple parts can access the same storage at any given time",
    "start": "1728000",
    "end": "1735840"
  },
  {
    "text": "so if you look at uh on the the content serving aspect of it where you want to provide",
    "start": "1736480",
    "end": "1742960"
  },
  {
    "text": "read write many access uh in read-only mode essentially",
    "start": "1742960",
    "end": "1748799"
  },
  {
    "text": "i see some of the use cases i see that you want to provide read-only content to nginx to serve",
    "start": "1748799",
    "end": "1755600"
  },
  {
    "text": "static content you might have a jenkins server that attach storage but you don't want your build",
    "start": "1755600",
    "end": "1762880"
  },
  {
    "text": "jobs to screw up your storage sort of thing and and running those jobs on a read-only file system",
    "start": "1762880",
    "end": "1769120"
  },
  {
    "text": "makes sense uh uh for that particular purpose right and and the way that you kind of",
    "start": "1769120",
    "end": "1775279"
  },
  {
    "text": "attach reader only many storage is essentially you request you you have to specify it in",
    "start": "1775279",
    "end": "1781200"
  },
  {
    "text": "the request that you do a read only many and then in the mount point you said i want to request this read only and that",
    "start": "1781200",
    "end": "1787120"
  },
  {
    "text": "is basically how you request a read only many or rwo",
    "start": "1787120",
    "end": "1792880"
  },
  {
    "text": "or rwx's it's called read write many so i hope that clarifies the different",
    "start": "1792880",
    "end": "1799760"
  },
  {
    "text": "aspects of the persistent volume claim access modes",
    "start": "1799760",
    "end": "1806480"
  },
  {
    "text": "so uh with that said so the last slide kind of in the dynamic provisioning piece here is i just want to lay out the",
    "start": "1806960",
    "end": "1812640"
  },
  {
    "text": "persistent volume overview here for our csi driver and this is kind of slightly abbreviated this object",
    "start": "1812640",
    "end": "1819279"
  },
  {
    "text": "contains a lot of information right so so once the csi",
    "start": "1819279",
    "end": "1824640"
  },
  {
    "text": "provisioner has provided instantiated this persistent volume it will have a lot of",
    "start": "1824640",
    "end": "1830480"
  },
  {
    "text": "metadata around the driver what parameters the driver needs to attach it all the secrets will be enumerated uh",
    "start": "1830480",
    "end": "1837840"
  },
  {
    "text": "there will also be something called a claim reference which which claim the pv is buying bound to",
    "start": "1837840",
    "end": "1845760"
  },
  {
    "text": "and so forth also you see the volume mode there and the volume handle there actually references the um",
    "start": "1845760",
    "end": "1851600"
  },
  {
    "text": "the back end that's basically the id that you send to the back-end storage to be able to uh",
    "start": "1851600",
    "end": "1857519"
  },
  {
    "text": "see what uh to be able to look up the volume and attach the volume and so forth and there's also a bunch of",
    "start": "1857519",
    "end": "1863840"
  },
  {
    "text": "finalizers up there at the top that you'll be able to see uh so that essentially",
    "start": "1863840",
    "end": "1869360"
  },
  {
    "text": "means that you cannot delete uh persistent volume if there's a pv holding a claim against",
    "start": "1869360",
    "end": "1874720"
  },
  {
    "text": "it and and such and and you can have other finalizers on there",
    "start": "1874720",
    "end": "1880480"
  },
  {
    "text": "that are all specific to your driver as well so um that leads me to uh",
    "start": "1880480",
    "end": "1888720"
  },
  {
    "text": "hands-on lab number two uh going to create a storage class we're going to create a persistent",
    "start": "1888720",
    "end": "1894240"
  },
  {
    "text": "volume claim and we're going to attach a workload to that persistent volume claim and i'm also going to show you how to",
    "start": "1894240",
    "end": "1901360"
  },
  {
    "text": "expand a volume for that running workload so hang on",
    "start": "1901360",
    "end": "1906559"
  },
  {
    "text": "while i switch over to my demo all right so what i'm going to do here",
    "start": "1906559",
    "end": "1911840"
  },
  {
    "text": "first is i'm going to show you the storage class that i'm going to use here i want to make this storage class a",
    "start": "1911840",
    "end": "1917519"
  },
  {
    "text": "default storage class this is the only storage class we're going to use for the entire tutorial",
    "start": "1917519",
    "end": "1923760"
  },
  {
    "text": "and it supports all the different capabilities that i talked about in the introduction there",
    "start": "1923760",
    "end": "1930159"
  },
  {
    "text": "and we need to specify all the different keys for the site and we also want to specify what file system",
    "start": "1930159",
    "end": "1936080"
  },
  {
    "text": "we want to use in this case xfs we want to specify the reclaim policy",
    "start": "1936080",
    "end": "1942880"
  },
  {
    "text": "and we want to allow volume expansion and we want to make",
    "start": "1942880",
    "end": "1949120"
  },
  {
    "text": "sure that the the volume binding mode is immediate so when the pv gets bound to the pvc we",
    "start": "1949120",
    "end": "1957360"
  },
  {
    "text": "can use it immediately and we don't care where kubernetes schedules in so we're going to create",
    "start": "1957360",
    "end": "1962880"
  },
  {
    "text": "that the next step here is",
    "start": "1962880",
    "end": "1968080"
  },
  {
    "text": "creating a persistent volume claim and you can also see here that in this",
    "start": "1968080",
    "end": "1973120"
  },
  {
    "text": "particular storage class we marked it as default",
    "start": "1973120",
    "end": "1977840"
  },
  {
    "text": "and this is the persistent volume claim i'm just going to give it a name specify access mode read write once",
    "start": "1979360",
    "end": "1985519"
  },
  {
    "text": "because it's a block storage back end i'm using and i'm going to make that volume",
    "start": "1985519",
    "end": "1991039"
  },
  {
    "text": "32 gig initially i'm going to resize this later i'm going to show you how that works",
    "start": "1991039",
    "end": "1996240"
  },
  {
    "text": "so we're just going to create that",
    "start": "1996240",
    "end": "2003919"
  },
  {
    "text": "persistent volume claim created and we can see here that the status is bound",
    "start": "2003919",
    "end": "2009600"
  },
  {
    "text": "and the volume is actually a reference in there in the volume columns referencing the actual pv",
    "start": "2009600",
    "end": "2015360"
  },
  {
    "text": "which is which shows here even more metadata about that particular",
    "start": "2015360",
    "end": "2021360"
  },
  {
    "text": "persistent volume all right let's uh see what we can do next let's",
    "start": "2022320",
    "end": "2029440"
  },
  {
    "text": "uh yeah so i'm going to deploy my sequel with the with help i'm going to specify my sql",
    "start": "2029440",
    "end": "2036799"
  },
  {
    "text": "root password as admin i don't recommend that and i'm going to use my existing claim that i just",
    "start": "2036799",
    "end": "2042159"
  },
  {
    "text": "created right so i'm just going to help install my sql reference the",
    "start": "2042159",
    "end": "2047360"
  },
  {
    "text": "the values file and specify stable slash mysql and i managed to get the",
    "start": "2047360",
    "end": "2052800"
  },
  {
    "text": "helm syntax right right in this example just going to wait for the um",
    "start": "2052800",
    "end": "2058320"
  },
  {
    "text": "by sql deployment to come up",
    "start": "2058320",
    "end": "2062079"
  },
  {
    "text": "we're waiting the dolphin there we go successfully uh rolled out",
    "start": "2067040",
    "end": "2074158"
  },
  {
    "text": "and uh then i'm gonna exec into the container here and then or into the pot i'd say and and and do",
    "start": "2074159",
    "end": "2081358"
  },
  {
    "text": "some inspection here for you to show how things are wired up so so i know that",
    "start": "2081359",
    "end": "2086720"
  },
  {
    "text": "uh the mount points for my sequel is usually my sequel something i'm just going to grab that uh we'll see that we have in",
    "start": "2086720",
    "end": "2094079"
  },
  {
    "text": "the um we have a multipath device uh mounted on slash mysql uh it's a xfs file system",
    "start": "2094079",
    "end": "2101440"
  },
  {
    "text": "and we can see here with the disk free command that we have a 32gb volume mounted there and i'm just",
    "start": "2101440",
    "end": "2108480"
  },
  {
    "text": "going to jump into the database here and create a new database",
    "start": "2108480",
    "end": "2114000"
  },
  {
    "text": "and you will see that a database gets created on the on the volume there we go",
    "start": "2114000",
    "end": "2121599"
  },
  {
    "text": "pop back out and when we can now see that we have that",
    "start": "2122160",
    "end": "2127280"
  },
  {
    "text": "database living in the file system",
    "start": "2127280",
    "end": "2131838"
  },
  {
    "text": "which references that persistent volume",
    "start": "2132480",
    "end": "2136320"
  },
  {
    "text": "all right we're going to pop out in the shell here again and i prepared a um a separate",
    "start": "2138240",
    "end": "2145200"
  },
  {
    "text": "persistent volume claim uh yaml specification that will essentially expand the volume",
    "start": "2145200",
    "end": "2151760"
  },
  {
    "text": "so i'm going to double the size of the volume and we also referenced the same pvc",
    "start": "2151760",
    "end": "2158640"
  },
  {
    "text": "there so i'm just going to apply that you can do different methods here right",
    "start": "2158640",
    "end": "2164079"
  },
  {
    "text": "so you can uh you can edit the pvc you can do a cube call edit and reference the pvc on the running",
    "start": "2164079",
    "end": "2169920"
  },
  {
    "text": "cluster you can also use the cube cuddle patch command",
    "start": "2169920",
    "end": "2175119"
  },
  {
    "text": "to to patch it and and and it doesn't really matter which",
    "start": "2175119",
    "end": "2181680"
  },
  {
    "text": "way you go right i mean you will get the exact same results so i'm just putting a cube color get uh",
    "start": "2181680",
    "end": "2189839"
  },
  {
    "text": "on my persistent volume claim here and i'm just going to wait for the capacity to expand here",
    "start": "2189839",
    "end": "2195040"
  },
  {
    "text": "so what happens here in the background is that the um the csi resizer sidecar",
    "start": "2195040",
    "end": "2203040"
  },
  {
    "text": "tells the underlying csi driver to expand the volume the volume gets expanded on the back-end",
    "start": "2203040",
    "end": "2208800"
  },
  {
    "text": "storage system and once that operation completes then there's a node expansion operation",
    "start": "2208800",
    "end": "2215839"
  },
  {
    "text": "that happens that talks to the csi node driver and that will essentially expand the file system on the um",
    "start": "2215839",
    "end": "2224160"
  },
  {
    "text": "on the node itself right so it will do xfs resize there we go 64 gig now",
    "start": "2224160",
    "end": "2231440"
  },
  {
    "text": "and once we kind of clear this watch here we'll jump back into the container and see",
    "start": "2231440",
    "end": "2238560"
  },
  {
    "text": "that we can actually leverage that extra capacity yeah so there we go uh 64 gig mounted on",
    "start": "2238560",
    "end": "2245200"
  },
  {
    "text": "slash wall in my sequel and you don't need to restore anything or doing any other operations so that is",
    "start": "2245200",
    "end": "2252400"
  },
  {
    "text": "basically how simple it is to expand a volume in kubernetes with a csi",
    "start": "2252400",
    "end": "2258079"
  },
  {
    "text": "driver that supports it and this is all user driven right so since the persistent volume",
    "start": "2258079",
    "end": "2264960"
  },
  {
    "text": "claims are namespaced you will then be able to the end user will basically be able to",
    "start": "2264960",
    "end": "2270640"
  },
  {
    "text": "uh to expand the persistent volume claim",
    "start": "2270640",
    "end": "2275200"
  },
  {
    "text": "all right that was the dynamic provisioning",
    "start": "2277760",
    "end": "2282800"
  },
  {
    "text": "101 i'd say uh i just want to talk a little bit about the workload controllers here you notice i i deploy the application",
    "start": "2282800",
    "end": "2289760"
  },
  {
    "text": "using a helm chart uh which is kind of practical on how to how and how you would manage",
    "start": "2289760",
    "end": "2296000"
  },
  {
    "text": "applications on on kubernetes right but what you see here in these two windows here",
    "start": "2296000",
    "end": "2301119"
  },
  {
    "text": "is sort of like most controllers they reference uh volumes in in the pod",
    "start": "2301119",
    "end": "2309359"
  },
  {
    "text": "specification right so you specify a mount path and then you give the volume out a name which is my mount",
    "start": "2309359",
    "end": "2315920"
  },
  {
    "text": "and then you have a volume section uh which points to the persistent volume claim claim name",
    "start": "2315920",
    "end": "2321839"
  },
  {
    "text": "and that's kind of how you key those two together right on the right hand side on this slide you will see the stateful set",
    "start": "2321839",
    "end": "2327760"
  },
  {
    "text": "and that is slightly different from the other controllers right there you have a construct called",
    "start": "2327760",
    "end": "2334480"
  },
  {
    "text": "a volume clamp claim template and that is basically a",
    "start": "2334480",
    "end": "2340160"
  },
  {
    "text": "it's more of a less a inline specification a persistent volume claim specification",
    "start": "2340160",
    "end": "2346320"
  },
  {
    "text": "where you call out the storage class name if you want you can leave that to the default one to resolve it",
    "start": "2346320",
    "end": "2352960"
  },
  {
    "text": "or and you also provide like how much capacity each of the volumes are supposed to have and but you still",
    "start": "2352960",
    "end": "2359680"
  },
  {
    "text": "use that uh keying with the volume mount for a particular path uh in the volume claim template",
    "start": "2359680",
    "end": "2365440"
  },
  {
    "text": "right so what happens here is when you deploy the stateful set say you you deploy a single replica stable set that",
    "start": "2365440",
    "end": "2371440"
  },
  {
    "text": "will provision one volume and after you as you scale the stateful set it will provision",
    "start": "2371440",
    "end": "2377280"
  },
  {
    "text": "a new volume for each replica that comes online right and and that's why it's very",
    "start": "2377280",
    "end": "2382320"
  },
  {
    "text": "practical to use read write one storage uh with with with a stateful set because that individual pod",
    "start": "2382320",
    "end": "2388079"
  },
  {
    "text": "will have private access to that particular volume and that is uh that was a short slide",
    "start": "2388079",
    "end": "2394640"
  },
  {
    "text": "because we are already on hands-on lab number three where we will deploy an application utilizing a stateful set",
    "start": "2394640",
    "end": "2400880"
  },
  {
    "text": "so hang on here while i'll switch over to my terminal",
    "start": "2400880",
    "end": "2405359"
  },
  {
    "text": "so what i'm going to do here is deploy redis i'm going to deploy it with a",
    "start": "2406240",
    "end": "2413920"
  },
  {
    "text": "a helm chart as well and this is the values file i'm going to provide a use password equals false",
    "start": "2413920",
    "end": "2422079"
  },
  {
    "text": "and i'm also going to uh prepare a watch command here right so this watch command will",
    "start": "2422079",
    "end": "2427200"
  },
  {
    "text": "watch my stateful sets my pods and my pvc as redis comes up right so i'm just",
    "start": "2427200",
    "end": "2433119"
  },
  {
    "text": "gonna do a helm install call it my redis reference my values",
    "start": "2433119",
    "end": "2438160"
  },
  {
    "text": "file and i'm going to use the bitnami distribution of redis and here we go",
    "start": "2438160",
    "end": "2445920"
  },
  {
    "text": "and here's my watch command that i had prepared and you will see here that the the main instance is already",
    "start": "2449200",
    "end": "2455920"
  },
  {
    "text": "coming up and there's also a a replica instance",
    "start": "2455920",
    "end": "2461680"
  },
  {
    "text": "being set up as well and down in the list of persistent volume claims you will see",
    "start": "2461680",
    "end": "2466800"
  },
  {
    "text": "that there are two claims uh that has been fulfilled and now you can see that there is another pod coming",
    "start": "2466800",
    "end": "2473359"
  },
  {
    "text": "up and it automatically created a new persistent volume claim right and once all these uh",
    "start": "2473359",
    "end": "2480079"
  },
  {
    "text": "ports have started uh all this uh that means that all the storage has been attached uh from the persistent volume claims",
    "start": "2480079",
    "end": "2486240"
  },
  {
    "text": "that were dynamically provisioned right and although you're using a helm chart here",
    "start": "2486240",
    "end": "2491680"
  },
  {
    "text": "uh it is a stateful set that red is leverages and you can see by the persistent naming",
    "start": "2491680",
    "end": "2497680"
  },
  {
    "text": "of the volumes here that there are derived from what you call the release name",
    "start": "2497680",
    "end": "2503599"
  },
  {
    "text": "and and so forth and that that means that you have predictive naming of the",
    "start": "2503599",
    "end": "2509040"
  },
  {
    "text": "volumes and the same thing with the with the network naming and stable sets as well that means that",
    "start": "2509040",
    "end": "2514319"
  },
  {
    "text": "the the pods and the instances that runs in those pods will be able to find each other",
    "start": "2514319",
    "end": "2520400"
  },
  {
    "text": "i'm just going to insert a key here um kubecon status what do we think it's",
    "start": "2520400",
    "end": "2526560"
  },
  {
    "text": "awesome right so i'm just going to put that key in here and make sure that we we flush the store to disk and",
    "start": "2526560",
    "end": "2534640"
  },
  {
    "text": "because i'm gonna i'm gonna use this in in subsequent uh labs throughout the presentation",
    "start": "2534640",
    "end": "2542560"
  },
  {
    "text": "so we have the kubecon status is awesome i'm gonna exit there and i will go back",
    "start": "2542560",
    "end": "2548400"
  },
  {
    "text": "to my powerpoint all right in this next section we're",
    "start": "2548400",
    "end": "2554640"
  },
  {
    "text": "going to talk about csi snapshots and using pvc data sources and this is kind",
    "start": "2554640",
    "end": "2559760"
  },
  {
    "text": "of where it starts to get interested we interesting because we kind of passed all the the basic stuff now",
    "start": "2559760",
    "end": "2565440"
  },
  {
    "text": "right so the way csi snapshots work in kubernetes is that",
    "start": "2565440",
    "end": "2571440"
  },
  {
    "text": "it works very similar to how persistent storage works right so you have something called a volume snapshot class",
    "start": "2571440",
    "end": "2577520"
  },
  {
    "text": "which allows users to create something called a volume snapshot and you will have the uh the csi",
    "start": "2577520",
    "end": "2584400"
  },
  {
    "text": "snapshotter will create something called a volume snapshot content that will basically point to the",
    "start": "2584400",
    "end": "2591359"
  },
  {
    "text": "physical resource that references the external snapshot right so we will",
    "start": "2591359",
    "end": "2596400"
  },
  {
    "text": "start the next hanson lab by creating the first of all uh yeah i forgot to mention",
    "start": "2596400",
    "end": "2602480"
  },
  {
    "text": "this right so so the csi snapshot sidecar is not installed by default by the csi",
    "start": "2602480",
    "end": "2610240"
  },
  {
    "text": "driver the csi snapshotter is provided by the kubernetes distribution right so you need to check with your",
    "start": "2610240",
    "end": "2616640"
  },
  {
    "text": "kubernetes distribution vendor if the csi snapshot or sidecar is installed or not",
    "start": "2616640",
    "end": "2622079"
  },
  {
    "text": "in this exercise since i'm leveraging vanilla upstream kubernetes",
    "start": "2622079",
    "end": "2627599"
  },
  {
    "text": "i'm going to deploy the external snapshotter as part of the hands-on lab but once we kind of pass this what you",
    "start": "2627599",
    "end": "2633359"
  },
  {
    "text": "can do is when once you have all these crds installed you can create a volume snapshot class",
    "start": "2633359",
    "end": "2640400"
  },
  {
    "text": "and reference the again the csi driver that you um",
    "start": "2640400",
    "end": "2647040"
  },
  {
    "text": "uh that you have installed on your cluster some uh some csi drivers provide custom keys to",
    "start": "2647040",
    "end": "2654640"
  },
  {
    "text": "set different values for the parameters that you provide to the volumes natural cloud very similar to what you would do in a storage class",
    "start": "2654640",
    "end": "2660720"
  },
  {
    "text": "if you have any specific parameters you want to supply to the driver when you've done it when you provision a snapshot or",
    "start": "2660720",
    "end": "2667040"
  },
  {
    "text": "provision a volume in the storage class case right and the volume snapshot is also",
    "start": "2667040",
    "end": "2672480"
  },
  {
    "text": "very simple all you have to do is specify a source is just what actual persistent volume claim do",
    "start": "2672480",
    "end": "2679280"
  },
  {
    "text": "you want to take a snapshot of and and that then will create a point in time copy of",
    "start": "2679280",
    "end": "2685680"
  },
  {
    "text": "that persistent volume claim with the content that's in that volume at that point in time",
    "start": "2685680",
    "end": "2691440"
  },
  {
    "text": "and the volume snapshot content again is that is sort of like the physical representation on how your back-end",
    "start": "2691440",
    "end": "2698000"
  },
  {
    "text": "storage system will be able to find that piece of storage uh and and reference that in that",
    "start": "2698000",
    "end": "2703040"
  },
  {
    "text": "particular snapshot so with that i'm going to dive into hands-on lab number four",
    "start": "2703040",
    "end": "2710400"
  },
  {
    "text": "where i'm going to start deploying the csi snapshotter i'm going to create a volume snapshot class and",
    "start": "2710400",
    "end": "2716800"
  },
  {
    "text": "i'm gonna create some volume snapshots so uh let's go ahead i'm gonna switch over to my",
    "start": "2716800",
    "end": "2722240"
  },
  {
    "text": "terminal uh one second all right uh let's start by cloning the",
    "start": "2722240",
    "end": "2727440"
  },
  {
    "text": "uh kubernetes csi external snapshotter repository",
    "start": "2727440",
    "end": "2735119"
  },
  {
    "text": "and then we need to create some resources that are provided in that",
    "start": "2736480",
    "end": "2741760"
  },
  {
    "text": "repository so it's the crds that provides the volume snatch up classes volume volume snapshot",
    "start": "2741760",
    "end": "2748560"
  },
  {
    "text": "contents and volume snapshot that i just talked about and then you actually need to deploy the actual uh csi",
    "start": "2748560",
    "end": "2755280"
  },
  {
    "text": "snapshot controller itself and this you kind of need to do once per cluster and once that's",
    "start": "2755280",
    "end": "2760960"
  },
  {
    "text": "deployed you can go right ahead and create volume snapshot classes",
    "start": "2760960",
    "end": "2767520"
  },
  {
    "text": "i'm going to create a default volume snapshot class i'm only going to leverage one in this particular exercise i want to",
    "start": "2767520",
    "end": "2773520"
  },
  {
    "text": "point out which driver i'm going to use and i also need to reference the",
    "start": "2773520",
    "end": "2778800"
  },
  {
    "text": "particular secret the side card needs to talk to the the back end that",
    "start": "2778800",
    "end": "2783920"
  },
  {
    "text": "we deployed",
    "start": "2783920",
    "end": "2789839"
  },
  {
    "text": "all right um we're going to create the volume snapshot class",
    "start": "2790720",
    "end": "2797359"
  },
  {
    "text": "there we go and i prepared a a bunch of volume",
    "start": "2797599",
    "end": "2804720"
  },
  {
    "text": "snapshots and and this will essentially create new",
    "start": "2804720",
    "end": "2810240"
  },
  {
    "text": "snapshots of the redis instance that i deployed right so here are the the three parts that make up my",
    "start": "2810240",
    "end": "2816880"
  },
  {
    "text": "running radius instance and i'm going to create a snapshot on each of those persistent volume claims",
    "start": "2816880",
    "end": "2821920"
  },
  {
    "text": "that got created when i deployed that radius instance",
    "start": "2821920",
    "end": "2830480"
  },
  {
    "text": "there we go i'm going to create those",
    "start": "2830480",
    "end": "2834640"
  },
  {
    "text": "they're usually created quite fast snapshots uh are nothing is not usually a heavy",
    "start": "2835599",
    "end": "2840880"
  },
  {
    "text": "operation for the back-end storage so i can do a get there we can see that they're uh i'm",
    "start": "2840880",
    "end": "2846800"
  },
  {
    "text": "immediately ready to use uh the source pvc that we're referencing and the restore size you can see in the column",
    "start": "2846800",
    "end": "2853359"
  },
  {
    "text": "uh there are a lot of columns here that have actually been truncated and you can check the outputs in the um",
    "start": "2853359",
    "end": "2861119"
  },
  {
    "text": "in the askinimacast files but there are there's a bunch of other columns there as well",
    "start": "2862800",
    "end": "2868480"
  },
  {
    "text": "so and that was actually how easy it was to create a volume snapshot class and",
    "start": "2868480",
    "end": "2874720"
  },
  {
    "text": "create a bunch of snapshots that references existing pvcs and now we have point in",
    "start": "2874720",
    "end": "2880480"
  },
  {
    "text": "time copies of our particular redis instance so i'm going to switch back to my",
    "start": "2880480",
    "end": "2886400"
  },
  {
    "text": "powerpoint here in this first exercise",
    "start": "2886400",
    "end": "2892960"
  },
  {
    "text": "where we created a volume snapshot class and a volume snapshot what i want to be able to do is to",
    "start": "2892960",
    "end": "2898079"
  },
  {
    "text": "create a new persistent volume claim uh that references my volume snapshot so this is an example",
    "start": "2898079",
    "end": "2904960"
  },
  {
    "text": "persistent volume claim how you would reference a snapshot when you create a pvc right so you have the data source stanza",
    "start": "2904960",
    "end": "2911359"
  },
  {
    "text": "here which calls out the the um the snapshot name you want to use what kind it is uh it could be a volume",
    "start": "2911359",
    "end": "2918559"
  },
  {
    "text": "snapshot or a persistent volume claim um so so far there are other things",
    "start": "2918559",
    "end": "2924240"
  },
  {
    "text": "coming here um that's not been released yet and then when you're using a volume",
    "start": "2924240",
    "end": "2931280"
  },
  {
    "text": "snapshot since the volume snapshot is a beta feature you need to call out the api group as well that you want to look for",
    "start": "2931280",
    "end": "2938000"
  },
  {
    "text": "this particular kind right and here is a very important detail that i i want to",
    "start": "2938000",
    "end": "2943520"
  },
  {
    "text": "just call out here is that when you create persistent volume claims from existing snapshots and such is that the",
    "start": "2943520",
    "end": "2950960"
  },
  {
    "text": "the storage request needs to match what the actual snapshot is so you cannot",
    "start": "2950960",
    "end": "2957359"
  },
  {
    "text": "say that you took a snapshot of a volume and it was two terabytes you actually need to uh create a new pvc",
    "start": "2957359",
    "end": "2964559"
  },
  {
    "text": "with the exact sign it's exact same size as the the volume",
    "start": "2964559",
    "end": "2970960"
  },
  {
    "text": "volume snapshot so uh without further ado i'm gonna dive into lab number five here",
    "start": "2970960",
    "end": "2976640"
  },
  {
    "text": "or the hands-on lab number five and create a new pvc uh from the volume snapshots that we",
    "start": "2976640",
    "end": "2983280"
  },
  {
    "text": "just created and attach a new redis instance to that so i'm just going to switch over to my",
    "start": "2983280",
    "end": "2989760"
  },
  {
    "text": "terminal so i'm going to use the the volume",
    "start": "2989760",
    "end": "2994960"
  },
  {
    "text": "snapshots that we just created right and how i'm going to attach those",
    "start": "2994960",
    "end": "3000559"
  },
  {
    "text": "is basically i have a set of pvcs that references those particular",
    "start": "3000559",
    "end": "3007040"
  },
  {
    "text": "snapshots right so in my data source stands here i reference the the snapshots i",
    "start": "3007040",
    "end": "3013200"
  },
  {
    "text": "want to use for each of the snapshots i'm basically going to start up a new redis instance",
    "start": "3013200",
    "end": "3019760"
  },
  {
    "text": "that i created initially in this tutorial and see if i have my",
    "start": "3019760",
    "end": "3027680"
  },
  {
    "text": "key that i inserted in the first exercise right so now i'm going to create those pvcs",
    "start": "3027680",
    "end": "3033440"
  },
  {
    "text": "from the snapshots i have a bunch of yaml here that you",
    "start": "3033440",
    "end": "3039119"
  },
  {
    "text": "might have already seen i now created the persistent volume claims and you can see here since the stateful",
    "start": "3039119",
    "end": "3046000"
  },
  {
    "text": "sets have predictive naming i know what those the persistent volumes are going to be called right so when i",
    "start": "3046000",
    "end": "3051920"
  },
  {
    "text": "bring up my redis instance i know what persistent volume claim is going to ask for right so that's so when i name my new instance",
    "start": "3051920",
    "end": "3060079"
  },
  {
    "text": "my new redis that means that it will either dynamically provision a",
    "start": "3060079",
    "end": "3066720"
  },
  {
    "text": "persistent volume claim of that name or use the existing one right and since i pre-created these",
    "start": "3066720",
    "end": "3072480"
  },
  {
    "text": "persistent volume claims what essentially happens is that those precision voltage claims will be",
    "start": "3072480",
    "end": "3078640"
  },
  {
    "text": "attached to the redis instance there we go i just want to make sure",
    "start": "3078640",
    "end": "3085040"
  },
  {
    "text": "that the instance come up here before we um",
    "start": "3085040",
    "end": "3089280"
  },
  {
    "text": "before we start poking around in it",
    "start": "3090319",
    "end": "3094000"
  },
  {
    "text": "thankfully uh helm makes it easy to find the resources that we want to look at so we can see here that my new redis",
    "start": "3095359",
    "end": "3103680"
  },
  {
    "text": "instance is coming up here i do not list the persistent volume claims here because",
    "start": "3103680",
    "end": "3109119"
  },
  {
    "text": "since i created a persistent volume claims and helm did not create that resource i wouldn't be able to qualify the label",
    "start": "3109119",
    "end": "3116400"
  },
  {
    "text": "with release equals my new redis but i know that the correct persistent volume claims are getting",
    "start": "3116400",
    "end": "3122960"
  },
  {
    "text": "connected",
    "start": "3122960",
    "end": "3125838"
  },
  {
    "text": "right we're up and running so i'm just going to exec into that",
    "start": "3129760",
    "end": "3136000"
  },
  {
    "text": "redis instance that i just created",
    "start": "3136000",
    "end": "3139839"
  },
  {
    "text": "typos are common i'm going to run the radius cli directly",
    "start": "3142960",
    "end": "3148319"
  },
  {
    "text": "and i should be able to get the kubecon status key",
    "start": "3148319",
    "end": "3153838"
  },
  {
    "text": "there we go it's awesome so that is basically how you would clone a an application",
    "start": "3155440",
    "end": "3162800"
  },
  {
    "text": "leveraging multiple persistent volume claims from multiple snapshots using predictive",
    "start": "3162800",
    "end": "3168880"
  },
  {
    "text": "naming thanks to the the stateful set right so now you would be able to",
    "start": "3168880",
    "end": "3174960"
  },
  {
    "text": "provision as many instances you want of that particular application and since",
    "start": "3174960",
    "end": "3182400"
  },
  {
    "text": "the snapshot pvcs that you just created are not impacting production you would be able",
    "start": "3182400",
    "end": "3188319"
  },
  {
    "text": "to do destructive changes on this particular application add keys remove keys and",
    "start": "3188319",
    "end": "3195440"
  },
  {
    "text": "connect an external application to it to do some testing and obviously this is a very tiny data",
    "start": "3195440",
    "end": "3200880"
  },
  {
    "text": "set but it wouldn't really matter if this could have been a multi-terabyte database right and that is very popular for ci cd use",
    "start": "3200880",
    "end": "3208400"
  },
  {
    "text": "cases where you want to attach production like data into",
    "start": "3208400",
    "end": "3214078"
  },
  {
    "text": "into your testing and dev environments so i'm just going to switch back to my powerpoint here hang on",
    "start": "3214559",
    "end": "3221520"
  },
  {
    "text": "right the next demo i'm going to do is basically create a",
    "start": "3221520",
    "end": "3227920"
  },
  {
    "text": "new persistent volume claim from an existing existing persistent volume claim and that means that you won't have a",
    "start": "3227920",
    "end": "3236480"
  },
  {
    "text": "intermediate snapshot right so you will create the new pvc directly from the from the source one",
    "start": "3236480",
    "end": "3242319"
  },
  {
    "text": "and this does not require the external csi snapshotter so as long as the the the csi driver",
    "start": "3242319",
    "end": "3249760"
  },
  {
    "text": "supports data source uh a persistent volume claim data source i'd say",
    "start": "3249760",
    "end": "3255359"
  },
  {
    "text": "you will be able to use this capability and features so without further ado i'm going to switch",
    "start": "3255359",
    "end": "3262079"
  },
  {
    "text": "over to hands-on lab number six and create a new pvc from an existing pvc",
    "start": "3262079",
    "end": "3267520"
  },
  {
    "text": "and attach an application i'm gonna switch back to my terminal all right so i'm just gonna show you the",
    "start": "3267520",
    "end": "3273200"
  },
  {
    "text": "uh my pvcs from pvcs and that this is very similar to what i showed in the powerpoint slide here",
    "start": "3273200",
    "end": "3279680"
  },
  {
    "text": "the data source what i'm going to use uh yeah again i'm going to use predictive name naming and i'm going to use",
    "start": "3279680",
    "end": "3286400"
  },
  {
    "text": "my clone redis as the name the data source i'm going to specify is a persistent volume claim",
    "start": "3286400",
    "end": "3291440"
  },
  {
    "text": "and these are the existing claims that got created initially",
    "start": "3291440",
    "end": "3296640"
  },
  {
    "text": "i'm going to create those pvcs from pvcs",
    "start": "3298799",
    "end": "3305119"
  },
  {
    "text": "and you will see that they will be instantly created as well",
    "start": "3305680",
    "end": "3310400"
  },
  {
    "text": "i forgot to list them here or rest assured they will be provisioned",
    "start": "3311440",
    "end": "3320000"
  },
  {
    "text": "so i'm going to install a third redis instance here and i'm going to call it my clone redis",
    "start": "3320000",
    "end": "3326240"
  },
  {
    "text": "i'm going to watch it",
    "start": "3326240",
    "end": "3335839"
  },
  {
    "text": "listed by label release equals my clone redis",
    "start": "3337599",
    "end": "3343519"
  },
  {
    "text": "hopefully all my cluster nodes have the redis image by now so this should be fairly quickly",
    "start": "3347680",
    "end": "3354160"
  },
  {
    "text": "it's creating",
    "start": "3360000",
    "end": "3363839"
  },
  {
    "text": "there we go all the instances are up and running",
    "start": "3365520",
    "end": "3370160"
  },
  {
    "text": "not running yet it's not ready yet there we are there we go ready one one",
    "start": "3375680",
    "end": "3382559"
  },
  {
    "text": "all right so we should now be able to uh exec into my new clone",
    "start": "3382559",
    "end": "3388839"
  },
  {
    "text": "redis clone radius instance yep that's right",
    "start": "3388839",
    "end": "3394559"
  },
  {
    "text": "that's the name and run this red cli",
    "start": "3394559",
    "end": "3400160"
  },
  {
    "text": "and i should be able to observe the key that we inserted in the initial deployment and there we go it's",
    "start": "3400160",
    "end": "3408160"
  },
  {
    "text": "awesome",
    "start": "3408160",
    "end": "3410558"
  },
  {
    "text": "and just to illustrate here i'm just going to list the volume snapshots and volume snapshot contents",
    "start": "3416640",
    "end": "3422720"
  },
  {
    "text": "uh that we had and and this only references the um the original snapshots that we",
    "start": "3422720",
    "end": "3429440"
  },
  {
    "text": "created right and what this basically means is that there is a snapshot created",
    "start": "3429440",
    "end": "3434480"
  },
  {
    "text": "uh on the backend storage system but it's a snapshot that um kubernetes is unaware of",
    "start": "3434480",
    "end": "3441280"
  },
  {
    "text": "so it's only the csi driver that knows how to create a snapshot from that existing pvc",
    "start": "3441280",
    "end": "3450079"
  },
  {
    "text": "and attach that to the pvc that is running in in in the",
    "start": "3450079",
    "end": "3455280"
  },
  {
    "text": "kubernetes cluster and and and resolve that and make sure it gets staged and",
    "start": "3455280",
    "end": "3461040"
  },
  {
    "text": "attached properly all right that concludes lab number six i believe",
    "start": "3461040",
    "end": "3467200"
  },
  {
    "text": "it was yep number six i'm gonna",
    "start": "3467200",
    "end": "3472160"
  },
  {
    "text": "show something uh very similar here uh so in this particular case here uh what",
    "start": "3473440",
    "end": "3480400"
  },
  {
    "text": "is fairly popular let's say that uh you accidentally delete a application",
    "start": "3480400",
    "end": "3487599"
  },
  {
    "text": "right but you still have the volume snapshot say that you you delete the um",
    "start": "3487599",
    "end": "3493520"
  },
  {
    "text": "you do a helmund install and you wipe your pvcs and all of a sudden oh",
    "start": "3493520",
    "end": "3499200"
  },
  {
    "text": "that was not my intention you just wanted to install the app and reinstall the app but you accidentally",
    "start": "3499200",
    "end": "3504880"
  },
  {
    "text": "wiped the pvcs but if you have the volume snapshots you will then be able to create a new a new instance from those",
    "start": "3504880",
    "end": "3512640"
  },
  {
    "text": "with the original names that you had when you initially deployed the application and sort of revert to your previous",
    "start": "3512640",
    "end": "3518960"
  },
  {
    "text": "state if you so will right so say that you would have a that's the other use case for using um",
    "start": "3518960",
    "end": "3527119"
  },
  {
    "text": "the restoration procedure right so you would essentially",
    "start": "3527119",
    "end": "3532400"
  },
  {
    "text": "uh yeah how would i describe this say that you're running your instance in production you",
    "start": "3533200",
    "end": "3540240"
  },
  {
    "text": "would accidentally trash your data set right but you know that you have a snapshot",
    "start": "3540240",
    "end": "3545359"
  },
  {
    "text": "from two hours before what you can do is that you can undeploy or uninstall the home chart in",
    "start": "3545359",
    "end": "3552160"
  },
  {
    "text": "this case and then remove your original pvcs and then create new pvcs",
    "start": "3552160",
    "end": "3558319"
  },
  {
    "text": "from the snapshots that you just created so i'm just going to dive into hands-on lab number seven and restore an application uh from",
    "start": "3558319",
    "end": "3566799"
  },
  {
    "text": "a volume snapshot just going to switch over to my terminal",
    "start": "3566799",
    "end": "3572319"
  },
  {
    "text": "we're back at the terminal and uh first i'm",
    "start": "3572319",
    "end": "3578000"
  },
  {
    "text": "going to exec into my",
    "start": "3578799",
    "end": "3583839"
  },
  {
    "text": "production instance and what i'm going to do here is i'm going to delete my status key right so",
    "start": "3584880",
    "end": "3592079"
  },
  {
    "text": "you will see that i will actually so this is kind of an accidental deletion use case right so you will see that i've",
    "start": "3592079",
    "end": "3597760"
  },
  {
    "text": "deleted the key doesn't exist there anymore i know that i have a good snapshot that i",
    "start": "3597760",
    "end": "3604000"
  },
  {
    "text": "want to be able to leverage to restore my radius instance i'm just going to",
    "start": "3604000",
    "end": "3610799"
  },
  {
    "text": "inspect the pvcs that i want to recreate and i'm going to recreate these with",
    "start": "3610799",
    "end": "3616559"
  },
  {
    "text": "with the original names right and the original names of my volumes is just my redis no",
    "start": "3616559",
    "end": "3622240"
  },
  {
    "text": "clone not my new whatever and the data source i'm going to reference is the um the",
    "start": "3622240",
    "end": "3628319"
  },
  {
    "text": "snapshots that i know i have and we know that those snapshots are good because we already restored to a new application",
    "start": "3628319",
    "end": "3635200"
  },
  {
    "text": "with uh with those particular snapshots we're gonna do a helmet uninstall my",
    "start": "3635200",
    "end": "3640839"
  },
  {
    "text": "redis and i'm also going to wipe the",
    "start": "3640839",
    "end": "3646480"
  },
  {
    "text": "persistent volume claims that um got created when we deploy that",
    "start": "3646480",
    "end": "3652240"
  },
  {
    "text": "so i'm just going to filter by label and now the claims are gone",
    "start": "3652240",
    "end": "3659039"
  },
  {
    "text": "and before we install the redis instance i just need to create my persistent volume claims make sure that",
    "start": "3662319",
    "end": "3669040"
  },
  {
    "text": "those gets recreated",
    "start": "3669040",
    "end": "3672240"
  },
  {
    "text": "i'm just going to list them here and we can see that yeah they're bound they're good uh we want to then attach",
    "start": "3675440",
    "end": "3683280"
  },
  {
    "text": "the redis instance i'm going to install the exact same instance name that we did for the",
    "start": "3683280",
    "end": "3688400"
  },
  {
    "text": "initial production and this should now",
    "start": "3688400",
    "end": "3693680"
  },
  {
    "text": "bring back ourselves to the state we were when we took the snapshots",
    "start": "3693680",
    "end": "3699040"
  },
  {
    "text": "and basically be ready to serve production yet again",
    "start": "3699040",
    "end": "3704318"
  },
  {
    "text": "we want to wait for the instance to come up here",
    "start": "3705599",
    "end": "3713838"
  },
  {
    "text": "the main instance is running we have one of the replica instance since this is running",
    "start": "3718000",
    "end": "3727838"
  },
  {
    "text": "right uh the second replica is up and we should be able to um exec into",
    "start": "3730880",
    "end": "3737760"
  },
  {
    "text": "the redis instance and list our key",
    "start": "3737760",
    "end": "3743280"
  },
  {
    "text": "awesome we've now successfully restored the application to the status it had when we took the",
    "start": "3745520",
    "end": "3752839"
  },
  {
    "text": "snapshot beautiful all right i'm going to switch back to my powerpoint here",
    "start": "3752839",
    "end": "3758960"
  },
  {
    "text": "and the next section is going to talk about using",
    "start": "3758960",
    "end": "3766880"
  },
  {
    "text": "raw block volumes and with that i just want to say that we kind of concluded the csi snapshots and cloning and using",
    "start": "3766880",
    "end": "3775440"
  },
  {
    "text": "volume data sources so uh using raw block volumes is quite",
    "start": "3775440",
    "end": "3782559"
  },
  {
    "text": "it's quite nifty so you may have this in the um persistent volume claims back in that",
    "start": "3782559",
    "end": "3788480"
  },
  {
    "text": "stance that you have volume mode block and you will also have the same ability to specify",
    "start": "3788480",
    "end": "3794160"
  },
  {
    "text": "particular storage class or not and but that is essentially everything you need to do to request a",
    "start": "3794160",
    "end": "3800480"
  },
  {
    "text": "block volume from a csi driver that supports block storage and",
    "start": "3800480",
    "end": "3806559"
  },
  {
    "text": "the way you would reference a a raw block volume in the port specification is slightly",
    "start": "3806559",
    "end": "3812319"
  },
  {
    "text": "different from how you would do if it were a file system right because all of a sudden you're dealing with devices you don't",
    "start": "3812319",
    "end": "3818960"
  },
  {
    "text": "have file systems on them right so that that's why the the volume mounts",
    "start": "3818960",
    "end": "3824160"
  },
  {
    "text": "stance has been replaced by volume devices and instead instead of a mount path you have",
    "start": "3824160",
    "end": "3829200"
  },
  {
    "text": "something called a device path and that's where you call out the virtual device uh and it's also",
    "start": "3829200",
    "end": "3834960"
  },
  {
    "text": "ordered right so the first device that comes up comes to mind is the xvda and you",
    "start": "3834960",
    "end": "3840000"
  },
  {
    "text": "will still have a volume standset persistent volume claim and a claim name and that you would reference and",
    "start": "3840000",
    "end": "3846960"
  },
  {
    "text": "in in this particular example i'm gonna not yeah i'm just gonna switch over to the",
    "start": "3846960",
    "end": "3852000"
  },
  {
    "text": "hands on lab number eight here and create a raw block device and attach a workload to that but this is a very",
    "start": "3852000",
    "end": "3858079"
  },
  {
    "text": "simple example on how this works so bear with me here for a second",
    "start": "3858079",
    "end": "3866400"
  },
  {
    "text": "so first i'm going to show you my block pvc here so i'm basically going to create a two terabyte block device uh",
    "start": "3866400",
    "end": "3872799"
  },
  {
    "text": "with a volume mode set to block and it's also always default set to file system",
    "start": "3872799",
    "end": "3881838"
  },
  {
    "text": "it's going to create that",
    "start": "3882960",
    "end": "3885920"
  },
  {
    "text": "and then i'm going to run the very simple part it's the same specification i had in the powerpoint actually and",
    "start": "3888000",
    "end": "3893039"
  },
  {
    "text": "it's just leveraging a tool called ioping and it calls the claim name that i just",
    "start": "3893039",
    "end": "3899760"
  },
  {
    "text": "created and here we have the um the stanza that calls out the volume device and the",
    "start": "3899760",
    "end": "3905520"
  },
  {
    "text": "device path and the results of this is essentially that we will",
    "start": "3905520",
    "end": "3910559"
  },
  {
    "text": "this tool ioping will um will perform perform an io on that",
    "start": "3910559",
    "end": "3917359"
  },
  {
    "text": "particular device once per second per default and you will see the results of that so",
    "start": "3917359",
    "end": "3924319"
  },
  {
    "text": "i'm just going to wait for the pod to come up here and then we will simply look at the logs",
    "start": "3924319",
    "end": "3929680"
  },
  {
    "text": "and see what it looks like",
    "start": "3929680",
    "end": "3937839"
  },
  {
    "text": "all right we're up and running we're going to tail the log here on that",
    "start": "3940240",
    "end": "3946720"
  },
  {
    "text": "particular pod and yeah there we go it's up and running it started",
    "start": "3946720",
    "end": "3952559"
  },
  {
    "text": "and what you can see happen here is by default this so there's a 4k i o being read from that particular",
    "start": "3952559",
    "end": "3959359"
  },
  {
    "text": "block device and you can see that the block device is a two terabyte device that's exactly what we requested and it",
    "start": "3959359",
    "end": "3965920"
  },
  {
    "text": "performs that i o once per second here and you can see the response time here in the request sequence",
    "start": "3965920",
    "end": "3971039"
  },
  {
    "text": "and that is essentially how you would address raw block storage from your from your",
    "start": "3971039",
    "end": "3976400"
  },
  {
    "text": "pod in kubernetes all right and that concludes lab number eight uh and",
    "start": "3976400",
    "end": "3983359"
  },
  {
    "text": "i'm going to switch back to my powerpoint here and um you might know you you might",
    "start": "3983359",
    "end": "3989760"
  },
  {
    "text": "wonder why would you need raw block storage in kubernetes and to be quite frank with",
    "start": "3989760",
    "end": "3996079"
  },
  {
    "text": "you there are not a lot of cloud-native workloads out there that leverages this paradigm but there is one",
    "start": "3996079",
    "end": "4003599"
  },
  {
    "text": "in particular that leverages raw block volumes and that is the cncf project called rook",
    "start": "4003599",
    "end": "4009440"
  },
  {
    "text": "which leverages seth in in the background right and i'm i'm not by any means a rook",
    "start": "4009440",
    "end": "4016559"
  },
  {
    "text": "or a ceph expert for that matter uh but i can talk a little bit about what it is right so it's an open source cloud",
    "start": "4016559",
    "end": "4022640"
  },
  {
    "text": "native uh storage solution for kubernetes it provides both file block",
    "start": "4022640",
    "end": "4027760"
  },
  {
    "text": "and object to kubernetes and it uses seth as i mentioned and the key um differentiator here is",
    "start": "4027760",
    "end": "4035359"
  },
  {
    "text": "that it allows you to manage distributed storage running on kubernetes with native",
    "start": "4035359",
    "end": "4040640"
  },
  {
    "text": "controllers on kubernetes pretty effortless right so you install it as an operator",
    "start": "4040640",
    "end": "4045680"
  },
  {
    "text": "and then you create something called a theft cluster crd and it may and",
    "start": "4045680",
    "end": "4052079"
  },
  {
    "text": "the key aspect here is that you can leverage existing pvcs right or you can create pvcs like volume",
    "start": "4052079",
    "end": "4057599"
  },
  {
    "text": "mode with volume mode block the most common pattern is that you simply leverage a raw block device that",
    "start": "4057599",
    "end": "4065119"
  },
  {
    "text": "attached to the server uh so you don't have to use upper external provisioner at all right you",
    "start": "4065119",
    "end": "4070880"
  },
  {
    "text": "would just use you just statically map in an nvme device or whatever you have",
    "start": "4070880",
    "end": "4078079"
  },
  {
    "text": "attached to your server but if you want to deploy multiple clusters and and kind of",
    "start": "4078079",
    "end": "4083839"
  },
  {
    "text": "get rid of the business of managing local hardware using a csi driver that can provide a",
    "start": "4083839",
    "end": "4089920"
  },
  {
    "text": "volume mode block is quite practical actually and so the hands-on lab number nine",
    "start": "4089920",
    "end": "4095599"
  },
  {
    "text": "is i'm going to show you how you would deploy rook with the with volume mode block with your csi",
    "start": "4095599",
    "end": "4102640"
  },
  {
    "text": "driver so i'm just going to switch over to my terminal here one second",
    "start": "4102640",
    "end": "4107838"
  },
  {
    "text": "most of the labs that i've been running throughout this tutorial i have not sped up and",
    "start": "4107839",
    "end": "4115838"
  },
  {
    "text": "this one i'm going to have to speed up because it pulls down a lot of imager images",
    "start": "4115839",
    "end": "4122480"
  },
  {
    "text": "for the operator itself it doesn't pull down as much content but once you create your set cluster it take",
    "start": "4122480",
    "end": "4128318"
  },
  {
    "text": "it took me around 10 minutes for for the cluster to",
    "start": "4128319",
    "end": "4133359"
  },
  {
    "text": "actually get created and and come up so i'm i i am going to speed up uh this",
    "start": "4133359",
    "end": "4139440"
  },
  {
    "text": "particular demo uh when we get to that point right but first we i'm just going to show you how the the operator gets installed and",
    "start": "4139440",
    "end": "4147520"
  },
  {
    "text": "then i'm going to show you the ceph cluster stanza the crd that instantiate the cluster so let's see if",
    "start": "4147520",
    "end": "4154480"
  },
  {
    "text": "this operator comes up here soon enough so i have prepared a sev",
    "start": "4154480",
    "end": "4159920"
  },
  {
    "text": "cluster yaml file here and this is a vanilla cef cluster i just uh copied",
    "start": "4159920",
    "end": "4165600"
  },
  {
    "text": "this from the the rook documentation and here you specify",
    "start": "4165600",
    "end": "4172880"
  },
  {
    "text": "something called a volume claim template right and you set the volume mode to block the access mode read write once uh",
    "start": "4172880",
    "end": "4180960"
  },
  {
    "text": "i omit the storage class and once you kind of create this cef cluster it will dynamically",
    "start": "4180960",
    "end": "4188400"
  },
  {
    "text": "provision storage resources that it needs from the default storage class so it",
    "start": "4188400",
    "end": "4194960"
  },
  {
    "text": "uses actually there's three volumes being created one once per replica",
    "start": "4194960",
    "end": "4200159"
  },
  {
    "text": "for the seth application or the rookie application depending on how you see it and then you will have uh for the actual",
    "start": "4200159",
    "end": "4208159"
  },
  {
    "text": "data pool the ceph file system or the osds that is called in ceph terminology will provision a",
    "start": "4208159",
    "end": "4216800"
  },
  {
    "text": "a block pvc and this is the point where i'm going to pause and",
    "start": "4216800",
    "end": "4223120"
  },
  {
    "text": "speed up the presentation and once it comes back we're going to start chatting on what we're seeing",
    "start": "4223120",
    "end": "4231199"
  },
  {
    "text": "so there it's finally up now so what you can see here what got provisioned dynamically is that",
    "start": "4231199",
    "end": "4237199"
  },
  {
    "text": "you have a file system volumes has been provisioned",
    "start": "4237199",
    "end": "4242880"
  },
  {
    "text": "named rook cephmon abc and then you have the data volumes that",
    "start": "4242880",
    "end": "4249120"
  },
  {
    "text": "basically references a a block device right and that is because the application components",
    "start": "4249120",
    "end": "4254400"
  },
  {
    "text": "require a file system and the actual distributed file system",
    "start": "4254400",
    "end": "4259679"
  },
  {
    "text": "the cep file systems require requires block storage so that's why it's very practical to have a driver",
    "start": "4259679",
    "end": "4266719"
  },
  {
    "text": "that can do both of those things to provide persistent storage to read",
    "start": "4266719",
    "end": "4272000"
  },
  {
    "text": "write one's stateful sets which is that basically presents so at this point you basically have a",
    "start": "4272000",
    "end": "4278480"
  },
  {
    "text": "ceph cluster running on your kubernetes cluster so you would be able to install this f2",
    "start": "4278480",
    "end": "4284000"
  },
  {
    "text": "ball toolbox and start creating new storage classes to provide data services on top of your",
    "start": "4284000",
    "end": "4291520"
  },
  {
    "text": "kubernetes but it's still backed by your backend csi driver being that a storage appliance or it",
    "start": "4291520",
    "end": "4298239"
  },
  {
    "text": "could be your cloud provider's storage block service so now you're you're more in the pattern of kind of",
    "start": "4298239",
    "end": "4304880"
  },
  {
    "text": "controlling your own destiny because you have your data services running on the kubernetes cluster itself",
    "start": "4304880",
    "end": "4311600"
  },
  {
    "text": "and that concludes the the use case overview for rook that was lab number nine i'm not",
    "start": "4311600",
    "end": "4317440"
  },
  {
    "text": "going to switch back to my powerpoint all right the next section and the last section is actually about",
    "start": "4317440",
    "end": "4324480"
  },
  {
    "text": "ephemeral volumes so something that is very comforting in the world of",
    "start": "4324480",
    "end": "4330320"
  },
  {
    "text": "containers and kind of one of the biggest selling points in my uh opinion is that when you start a",
    "start": "4330320",
    "end": "4336880"
  },
  {
    "text": "container you're more or less guaranteed that it will distort the exact same way on your",
    "start": "4336880",
    "end": "4342560"
  },
  {
    "text": "laptop in the cloud in your data center it doesn't really matter and it kind of eliminates the whole",
    "start": "4342560",
    "end": "4349520"
  },
  {
    "text": "problem of it runs on my computer right and but once we kind of start talking about",
    "start": "4349520",
    "end": "4357440"
  },
  {
    "text": "huge amount of data right it becomes very impractical i i remember patterns",
    "start": "4357440",
    "end": "4362800"
  },
  {
    "text": "back in the darker days where we had the customers shipping production databases inside the",
    "start": "4362800",
    "end": "4370640"
  },
  {
    "text": "container itself right see imagine shipping i mean this was in a large database",
    "start": "4370640",
    "end": "4375840"
  },
  {
    "text": "it was it was less than a terabyte i remember that much but still that is a very impractical",
    "start": "4375840",
    "end": "4383360"
  },
  {
    "text": "amount of content to to store in a in a container right because you need to pull",
    "start": "4383360",
    "end": "4389520"
  },
  {
    "text": "that instance down from a registry and it's just all that bandwidth it needs to consume store that locally",
    "start": "4389520",
    "end": "4395520"
  },
  {
    "text": "and it becomes a bit of a burden and it just like grows exponentially it just just becomes worse and worse and worse",
    "start": "4395520",
    "end": "4401040"
  },
  {
    "text": "as the database grows basically and this was for a dev test use case",
    "start": "4401040",
    "end": "4406560"
  },
  {
    "text": "obviously it wasn't for production or anything like that but that became very impractical but",
    "start": "4406560",
    "end": "4413520"
  },
  {
    "text": "so so that is sort of where ephemeral local volumes and generic ephemeral volumes i'm going to talk",
    "start": "4413520",
    "end": "4419760"
  },
  {
    "text": "about in the next section is that that allows you to attach a piece of storage",
    "start": "4419760",
    "end": "4426000"
  },
  {
    "text": "to your pod that will look exactly the same each time right and by default you will",
    "start": "4426000",
    "end": "4432000"
  },
  {
    "text": "obviously just provision an empty volume right but you can use a storage vendors the capability to to perform a snapshot",
    "start": "4432000",
    "end": "4439600"
  },
  {
    "text": "to clone a volume or have other pre-populated content in that volume",
    "start": "4439600",
    "end": "4445199"
  },
  {
    "text": "and that means that each time the product gets restarted that data gets reattached the way it",
    "start": "4445199",
    "end": "4451040"
  },
  {
    "text": "looked right the obvious use case here if you just use this as as a as a means to store data like",
    "start": "4451040",
    "end": "4460000"
  },
  {
    "text": "an empty file system is that this is the ideal use case to use useful scratch disks right and the other",
    "start": "4460000",
    "end": "4467840"
  },
  {
    "text": "uptake on this is that imagine that you have a high very high performance workload",
    "start": "4467840",
    "end": "4473360"
  },
  {
    "text": "that consume a lot of compa capacity in the compute phase of of that particular workload is that it",
    "start": "4473360",
    "end": "4480159"
  },
  {
    "text": "needs to store a lot of data locally and by default if you would store the data",
    "start": "4480159",
    "end": "4487679"
  },
  {
    "text": "inside the overlay file system of the container is that it will battle for iops and",
    "start": "4487679",
    "end": "4493760"
  },
  {
    "text": "capacity of all your other applications on that particular mount point where you have all your",
    "start": "4493760",
    "end": "4500159"
  },
  {
    "text": "containers running so provisioning an external volume uh",
    "start": "4500159",
    "end": "4505440"
  },
  {
    "text": "as an ephemeral entity you will be able to temporarily use that scratch disk for that compute workload and it will",
    "start": "4505440",
    "end": "4511120"
  },
  {
    "text": "consume storage resources wherever you have it configured right so it could be your cloud providers",
    "start": "4511120",
    "end": "4516320"
  },
  {
    "text": "the high performance tier for using flash disks so you might be using a cheaper tier for your temporary storage",
    "start": "4516320",
    "end": "4522880"
  },
  {
    "text": "right i mean the thing is you can kind of slice it and dice it however you want right but at the end of the day is that",
    "start": "4522880",
    "end": "4528159"
  },
  {
    "text": "you don't want to have your workloads that you know are ephemeral",
    "start": "4528159",
    "end": "4533520"
  },
  {
    "text": "and you know they're io intensive you don't want to have them in the gen pop of your applications right you want to",
    "start": "4533520",
    "end": "4539600"
  },
  {
    "text": "segregate them some vendors provide means to set very fine-grained uh",
    "start": "4539600",
    "end": "4544800"
  },
  {
    "text": "quality of service controls as well right to throttle those workloads and also",
    "start": "4544800",
    "end": "4549840"
  },
  {
    "text": "ensure the capacity limits are met right so looking at this very simple stanza here is that",
    "start": "4549840",
    "end": "4556000"
  },
  {
    "text": "you you're well familiar with this at this point right where you have a volume amount the amount the calls out",
    "start": "4556000",
    "end": "4562960"
  },
  {
    "text": "a a named volume and here is kind of where the the secret sauce comes in right you",
    "start": "4562960",
    "end": "4568159"
  },
  {
    "text": "you have the csi stanza here you call out your driver and these are the volume attributes",
    "start": "4568159",
    "end": "4573600"
  },
  {
    "text": "uh that you you will supply to your driver right you will say you will tell the driver i want an ephemeral volume if",
    "start": "4573600",
    "end": "4578800"
  },
  {
    "text": "the driver supports ephemerality and then you specify the",
    "start": "4578800",
    "end": "4584080"
  },
  {
    "text": "the secret uh where you can find it and which name space it is in and you specify a size right and",
    "start": "4584080",
    "end": "4591920"
  },
  {
    "text": "some vendors support multiple different options here how you want to provision storage and so forth there's also a slightly",
    "start": "4591920",
    "end": "4599199"
  },
  {
    "text": "different way to reference the secret right so if you have your secret to your",
    "start": "4599199",
    "end": "4604800"
  },
  {
    "text": "back in storage system sitting in the namespace with the application that you're actually where you're deploying the pod or the",
    "start": "4604800",
    "end": "4610960"
  },
  {
    "text": "staples at the home chart what not uh you can just reference it by name",
    "start": "4610960",
    "end": "4616080"
  },
  {
    "text": "right so you give the uh the alternative syntax here by node publish secret reference",
    "start": "4616080",
    "end": "4621600"
  },
  {
    "text": "and name it csi and i already skipped over to my",
    "start": "4621600",
    "end": "4627920"
  },
  {
    "text": "hands-on lab number 10 slide here about how to use a thermal local volume",
    "start": "4627920",
    "end": "4633760"
  },
  {
    "text": "so i'm just going to switch over to my terminal here real quick i have a very simple example",
    "start": "4633760",
    "end": "4639600"
  },
  {
    "text": "here in my inline.yaml i will have a mount path of an nginx web server",
    "start": "4639600",
    "end": "4648480"
  },
  {
    "text": "which is just a very simple stupid container and very stupid stupid example but it illustrates the",
    "start": "4648480",
    "end": "4653679"
  },
  {
    "text": "point i want to make right so we have this this inline stanza where i'm going to provision a volume",
    "start": "4653679",
    "end": "4659760"
  },
  {
    "text": "i'm going to wait for the pod to come up i'm then going to exec into the container and",
    "start": "4659760",
    "end": "4666800"
  },
  {
    "text": "simply put a file there to to prove my point so i'm going to go to slash user share",
    "start": "4666800",
    "end": "4672480"
  },
  {
    "text": "nginx html echo kubecon rocks",
    "start": "4672480",
    "end": "4678000"
  },
  {
    "text": "into index.html there we go content is there and then i'm going to",
    "start": "4678000",
    "end": "4684880"
  },
  {
    "text": "do the the brute thing of simply replacing the pod right and this will essentially",
    "start": "4684880",
    "end": "4690080"
  },
  {
    "text": "delete the pod and recreate the pod if we were referencing",
    "start": "4690080",
    "end": "4695600"
  },
  {
    "text": "a persistent volume claim externally the content would persist on that particular amount points",
    "start": "4695600",
    "end": "4702000"
  },
  {
    "text": "but the point i want to make here is that we're going to have a new volume provision there so i'm going to exec",
    "start": "4702000",
    "end": "4708239"
  },
  {
    "text": "into the pod go to my mount points there we go it's empty there's no index.html file",
    "start": "4708239",
    "end": "4715760"
  },
  {
    "text": "there and that concludes the first part of the ephemeral volumes use case i'm just going to switch back",
    "start": "4715760",
    "end": "4722000"
  },
  {
    "text": "to my powerpoints and i'm going to talk about something that got introduced in kubernetes 119",
    "start": "4722000",
    "end": "4728320"
  },
  {
    "text": "and that is called gener generic ephemeral volumes and this is a little bit simpler to",
    "start": "4728320",
    "end": "4734159"
  },
  {
    "text": "comprehend in in my uh opinion is because what this does essentially it",
    "start": "4734159",
    "end": "4739760"
  },
  {
    "text": "it kind of copies the behavior a little bit like you do with a stateful set so you would specify",
    "start": "4739760",
    "end": "4746719"
  },
  {
    "text": "essentially a ephemeral volume claim template that looks very similar to a inline",
    "start": "4746719",
    "end": "4753360"
  },
  {
    "text": "persistent volume claim and it supports like labels annotations and all those things",
    "start": "4753360",
    "end": "4758560"
  },
  {
    "text": "that you would expect to work in a in a persistent volume claim right and",
    "start": "4758560",
    "end": "4765040"
  },
  {
    "text": "and the key here is that it will be able to leverage any storage class you don't have to have a csi driver that",
    "start": "4765040",
    "end": "4771679"
  },
  {
    "text": "supports ephemerality you can just use the existing",
    "start": "4771679",
    "end": "4777840"
  },
  {
    "text": "existing csi drivers to support persistence right so i'm just going to switch over to my",
    "start": "4778560",
    "end": "4784000"
  },
  {
    "text": "last lab here and show you real quick how this works going",
    "start": "4784000",
    "end": "4790000"
  },
  {
    "text": "to switch over to my terminal so i have a yaml file here my ephemeral yaml",
    "start": "4790000",
    "end": "4795600"
  },
  {
    "text": "and here you can see that i have a um ephemeral volume claim template i input some metadata there so i will be",
    "start": "4795600",
    "end": "4802080"
  },
  {
    "text": "able to find the application and you can see here the access mode",
    "start": "4802080",
    "end": "4807280"
  },
  {
    "text": "how much storage i'm requesting and the the custom label",
    "start": "4807280",
    "end": "4813920"
  },
  {
    "text": "i'm going to create that and then i'm going to do the exact same exercise i did in in the previous",
    "start": "4813920",
    "end": "4819520"
  },
  {
    "text": "example with the inline local volume example",
    "start": "4819520",
    "end": "4824639"
  },
  {
    "text": "i'm going to wait for the part to come up it's running i'm going to get the pvc",
    "start": "4824639",
    "end": "4831920"
  },
  {
    "text": "by my app label you can see here that we have a determiner name mypodmymount and that maps to the",
    "start": "4831920",
    "end": "4838480"
  },
  {
    "text": "the the port name and the volume mount name that you saw in the yaml stanza",
    "start": "4838480",
    "end": "4845520"
  },
  {
    "text": "again i'm going to exec into my pod there we see we have a multi-path device",
    "start": "4845520",
    "end": "4852560"
  },
  {
    "text": "mounted on user share nginx kubecon rocks",
    "start": "4852560",
    "end": "4858960"
  },
  {
    "text": "into index.html there we go",
    "start": "4858960",
    "end": "4864320"
  },
  {
    "text": "i'm going to do the same replace operation that i did on the previous example i'm going to delete the pod",
    "start": "4865360",
    "end": "4873520"
  },
  {
    "text": "and it's been replaced all right let's exact back into it after it has come up i'd say",
    "start": "4873520",
    "end": "4882800"
  },
  {
    "text": "it's been a long day how you hanging in there there we go up and running all right",
    "start": "4882800",
    "end": "4888719"
  },
  {
    "text": "we'll see here that yep the director is empty there's no file there",
    "start": "4888719",
    "end": "4894800"
  },
  {
    "text": "uh the generic ephemeral volumes functionality worked as advertised although is a alpha feature",
    "start": "4894800",
    "end": "4902560"
  },
  {
    "text": "be careful and you will also see that the um the pvc has been replaced",
    "start": "4902560",
    "end": "4908639"
  },
  {
    "text": "from my default storage class there as you can see that the if you compare the ids of the the volume",
    "start": "4908639",
    "end": "4914960"
  },
  {
    "text": "names there they're different all right that concludes uh",
    "start": "4914960",
    "end": "4920159"
  },
  {
    "text": "hands-on lab number 11. i'm going to switch by back to my powerpoints and",
    "start": "4920159",
    "end": "4926159"
  },
  {
    "text": "congratulations you're done thank you so much for participating i'm just going to iterate here what",
    "start": "4926159",
    "end": "4932560"
  },
  {
    "text": "we've covered we introduced you to csi drivers how dynamic provisioning works in",
    "start": "4932560",
    "end": "4937840"
  },
  {
    "text": "kubernetes how csi snapshots csi restore and using pvc cloning",
    "start": "4937840",
    "end": "4944560"
  },
  {
    "text": "in depth and how you access raw block volumes and raw block storage and the last few",
    "start": "4944560",
    "end": "4951199"
  },
  {
    "text": "examples here how to use ephemeral volumes both local volumes using the",
    "start": "4951199",
    "end": "4956560"
  },
  {
    "text": "inline stanza and using generic generic ephemeral volumes",
    "start": "4956560",
    "end": "4962000"
  },
  {
    "text": "using your standard storage classes as i mentioned the source files the yaml",
    "start": "4962000",
    "end": "4968239"
  },
  {
    "text": "the powerpoint the asciinima cast files are all available in this particular github repository check out the csi",
    "start": "4968239",
    "end": "4976639"
  },
  {
    "text": "specification and and you can also see",
    "start": "4976639",
    "end": "4981920"
  },
  {
    "text": "all the past meetings and and the members of the kubernetes special interest group for storage on",
    "start": "4982000",
    "end": "4988800"
  },
  {
    "text": "the github url there and check out the csi documentation for more information about",
    "start": "4988800",
    "end": "4996560"
  },
  {
    "text": "the development of csi and the different maturity levels of different drivers and and",
    "start": "4996560",
    "end": "5001760"
  },
  {
    "text": "features and and god knows one so with that said um thank you so much for watching uh if",
    "start": "5001760",
    "end": "5008239"
  },
  {
    "text": "you're watching this live at kubecon uh please stick around we're gonna shut down this video stream",
    "start": "5008239",
    "end": "5014480"
  },
  {
    "text": "and we're going to switch over to the live q a and until if you're watching this offline",
    "start": "5014480",
    "end": "5020719"
  },
  {
    "text": "later please feel free to reach out to me if you have any questions",
    "start": "5020719",
    "end": "5025920"
  },
  {
    "text": "you can find me on twitter and all this social media networks out there the address is in the",
    "start": "5025920",
    "end": "5031840"
  },
  {
    "text": "beginning of the video so thank you so much for watching take care",
    "start": "5031840",
    "end": "5040800"
  }
]