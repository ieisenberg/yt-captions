[
  {
    "start": "0",
    "end": "87000"
  },
  {
    "text": "good afternoon",
    "start": "160",
    "end": "1520"
  },
  {
    "text": "everybody and welcome once again to GPC",
    "start": "1520",
    "end": "4920"
  },
  {
    "text": "con my name is iswar and I'm a software",
    "start": "4920",
    "end": "8519"
  },
  {
    "text": "engineer on the JPC go team at Google",
    "start": "8519",
    "end": "12360"
  },
  {
    "text": "and today I'll take you on a tour of",
    "start": "12360",
    "end": "14759"
  },
  {
    "text": "load balancing in",
    "start": "14759",
    "end": "18080"
  },
  {
    "text": "GPC so we'll get started off with uh a",
    "start": "18680",
    "end": "22600"
  },
  {
    "text": "very high level overview of what load",
    "start": "22600",
    "end": "24359"
  },
  {
    "text": "balancing is what options we have in",
    "start": "24359",
    "end": "26760"
  },
  {
    "text": "this space um some very high level",
    "start": "26760",
    "end": "29679"
  },
  {
    "text": "details of load balancing in grpc then",
    "start": "29679",
    "end": "33000"
  },
  {
    "text": "we'll dive a little deeper into the",
    "start": "33000",
    "end": "35000"
  },
  {
    "text": "client architecture and see where load",
    "start": "35000",
    "end": "37200"
  },
  {
    "text": "balancing fits in and finally we'll get",
    "start": "37200",
    "end": "40960"
  },
  {
    "text": "into the weeds and we'll look at the",
    "start": "40960",
    "end": "43360"
  },
  {
    "text": "load balancing API in JPC",
    "start": "43360",
    "end": "47079"
  },
  {
    "text": "go so if you're like the most",
    "start": "47079",
    "end": "49680"
  },
  {
    "text": "interesting man in the world and you run",
    "start": "49680",
    "end": "51960"
  },
  {
    "text": "a single server then load balancing is",
    "start": "51960",
    "end": "54520"
  },
  {
    "text": "not for you you can drink a beer and you",
    "start": "54520",
    "end": "56559"
  },
  {
    "text": "can go back home uh but for the most of",
    "start": "56559",
    "end": "59239"
  },
  {
    "text": "the rest of us",
    "start": "59239",
    "end": "61320"
  },
  {
    "text": "we run multiple",
    "start": "61320",
    "end": "62800"
  },
  {
    "text": "servers we have multiple clients sending",
    "start": "62800",
    "end": "65400"
  },
  {
    "text": "multiple requests to our servers um so",
    "start": "65400",
    "end": "68960"
  },
  {
    "text": "this talk is going to focus on L7 load",
    "start": "68960",
    "end": "72119"
  },
  {
    "text": "balancing or application Level load",
    "start": "72119",
    "end": "74680"
  },
  {
    "text": "balancing uh and not L4 load balancing",
    "start": "74680",
    "end": "77720"
  },
  {
    "text": "so in grpc load balancing happens on a",
    "start": "77720",
    "end": "80320"
  },
  {
    "text": "per RPC uh basis and not at a per",
    "start": "80320",
    "end": "84040"
  },
  {
    "text": "connection",
    "start": "84040",
    "end": "86520"
  },
  {
    "text": "level so the main goal of load balance",
    "start": "86920",
    "end": "89920"
  },
  {
    "text": "balancing is to ensure that your client",
    "start": "89920",
    "end": "92720"
  },
  {
    "text": "requests are uh distributed across your",
    "start": "92720",
    "end": "95360"
  },
  {
    "text": "server backends in a fair and",
    "start": "95360",
    "end": "97000"
  },
  {
    "text": "appropriate Manner and by doing this it",
    "start": "97000",
    "end": "99680"
  },
  {
    "text": "tries to guarantee that your service can",
    "start": "99680",
    "end": "101520"
  },
  {
    "text": "be highly available scalable and that it",
    "start": "101520",
    "end": "104439"
  },
  {
    "text": "can respond to client requests in a",
    "start": "104439",
    "end": "106880"
  },
  {
    "text": "timely",
    "start": "106880",
    "end": "108719"
  },
  {
    "text": "fashion so we have two uh options for",
    "start": "108719",
    "end": "112600"
  },
  {
    "text": "load balancing at a very high level and",
    "start": "112600",
    "end": "114680"
  },
  {
    "text": "applications have to make this",
    "start": "114680",
    "end": "116479"
  },
  {
    "text": "architectural Choice uh so it's either",
    "start": "116479",
    "end": "119200"
  },
  {
    "text": "server side or proxy based load",
    "start": "119200",
    "end": "121159"
  },
  {
    "text": "balancing or client",
    "start": "121159",
    "end": "123560"
  },
  {
    "text": "side so with serers side load balancing",
    "start": "123560",
    "end": "127000"
  },
  {
    "text": "you have your clients talking to a proxy",
    "start": "127000",
    "end": "129599"
  },
  {
    "text": "and the proxy talks to a bunch of server",
    "start": "129599",
    "end": "131560"
  },
  {
    "text": "backends an example of this would be a",
    "start": "131560",
    "end": "134080"
  },
  {
    "text": "Google front end or something like an",
    "start": "134080",
    "end": "136400"
  },
  {
    "text": "engine X um so the advantages with this",
    "start": "136400",
    "end": "140599"
  },
  {
    "text": "option is that the clients can be super",
    "start": "140599",
    "end": "143120"
  },
  {
    "text": "simple uh because the clients do not",
    "start": "143120",
    "end": "145440"
  },
  {
    "text": "need to know where the server backends",
    "start": "145440",
    "end": "147640"
  },
  {
    "text": "are running they don't need to know how",
    "start": "147640",
    "end": "149319"
  },
  {
    "text": "many of them running how loaded they are",
    "start": "149319",
    "end": "151400"
  },
  {
    "text": "or anything about uh the server backends",
    "start": "151400",
    "end": "153760"
  },
  {
    "text": "they just talk to the proxy and the",
    "start": "153760",
    "end": "155080"
  },
  {
    "text": "proxy takes care of everything else um",
    "start": "155080",
    "end": "157640"
  },
  {
    "text": "so in the same vein you as the service",
    "start": "157640",
    "end": "159760"
  },
  {
    "text": "owner you are running the proxy so you",
    "start": "159760",
    "end": "162040"
  },
  {
    "text": "have full control over the load",
    "start": "162040",
    "end": "164440"
  },
  {
    "text": "balancing that happens in the proxy but",
    "start": "164440",
    "end": "167200"
  },
  {
    "text": "the disadvantage here is that the proxy",
    "start": "167200",
    "end": "169840"
  },
  {
    "text": "is in the RPC path so it can become a",
    "start": "169840",
    "end": "172840"
  },
  {
    "text": "bottleneck especially for uh services",
    "start": "172840",
    "end": "175440"
  },
  {
    "text": "that require high",
    "start": "175440",
    "end": "177519"
  },
  {
    "text": "throughput so the other option is is",
    "start": "177519",
    "end": "179959"
  },
  {
    "text": "client side load balancing and here you",
    "start": "179959",
    "end": "182400"
  },
  {
    "text": "have your clients talking directly to",
    "start": "182400",
    "end": "184239"
  },
  {
    "text": "the server so you've eliminated the",
    "start": "184239",
    "end": "186480"
  },
  {
    "text": "proxy hop so this uh gives you better",
    "start": "186480",
    "end": "189440"
  },
  {
    "text": "performance but this comes with a bunch",
    "start": "189440",
    "end": "192239"
  },
  {
    "text": "of downsides as well so now the load",
    "start": "192239",
    "end": "196599"
  },
  {
    "text": "balancing logic is moved into the client",
    "start": "196599",
    "end": "199040"
  },
  {
    "text": "and so this makes for a thick and",
    "start": "199040",
    "end": "200840"
  },
  {
    "text": "complex client and in most cases you",
    "start": "200840",
    "end": "204200"
  },
  {
    "text": "want your services to be uh accessible",
    "start": "204200",
    "end": "207239"
  },
  {
    "text": "to clients written in multiple languages",
    "start": "207239",
    "end": "209400"
  },
  {
    "text": "so this means that the same complex",
    "start": "209400",
    "end": "211840"
  },
  {
    "text": "client logic needs to be implemented in",
    "start": "211840",
    "end": "213599"
  },
  {
    "text": "multiple languages and also since the",
    "start": "213599",
    "end": "216840"
  },
  {
    "text": "load balancing is happening in your",
    "start": "216840",
    "end": "218680"
  },
  {
    "text": "client you as a service owner need to",
    "start": "218680",
    "end": "220920"
  },
  {
    "text": "trust that the client uh will do the",
    "start": "220920",
    "end": "223400"
  },
  {
    "text": "right thing in terms of balancing load",
    "start": "223400",
    "end": "226840"
  },
  {
    "text": "appropriately the good thing here is",
    "start": "226840",
    "end": "229360"
  },
  {
    "text": "that if you're using grpc you get all",
    "start": "229360",
    "end": "232280"
  },
  {
    "text": "those for free because um grpc supports",
    "start": "232280",
    "end": "236159"
  },
  {
    "text": "client side load balancing um in",
    "start": "236159",
    "end": "238959"
  },
  {
    "text": "multiple languages is and you can trust",
    "start": "238959",
    "end": "241640"
  },
  {
    "text": "uh the grpc clients to do the right",
    "start": "241640",
    "end": "244200"
  },
  {
    "text": "thing so grpc can be used with both",
    "start": "244200",
    "end": "248200"
  },
  {
    "text": "serers side and client side load",
    "start": "248200",
    "end": "249840"
  },
  {
    "text": "balancing but it's really with client",
    "start": "249840",
    "end": "252319"
  },
  {
    "text": "side load balancing where JPC really",
    "start": "252319",
    "end": "255720"
  },
  {
    "text": "shines so the component that performs",
    "start": "255720",
    "end": "258239"
  },
  {
    "start": "256000",
    "end": "688000"
  },
  {
    "text": "client side load balancing in GPC is",
    "start": "258239",
    "end": "260880"
  },
  {
    "text": "known by different names in the",
    "start": "260880",
    "end": "262440"
  },
  {
    "text": "different uh GPC languages it's called",
    "start": "262440",
    "end": "265000"
  },
  {
    "text": "load balancing policy in C++ it's called",
    "start": "265000",
    "end": "267560"
  },
  {
    "text": "load balancer in Java and just balancer",
    "start": "267560",
    "end": "271120"
  },
  {
    "text": "in go so in this talk we'll mostly use",
    "start": "271120",
    "end": "274160"
  },
  {
    "text": "the term lb policy to refer to",
    "start": "274160",
    "end": "277840"
  },
  {
    "text": "them so an lb policy implementation",
    "start": "277840",
    "end": "280960"
  },
  {
    "text": "mainly consists of two components one is",
    "start": "280960",
    "end": "284440"
  },
  {
    "text": "the connection management component that",
    "start": "284440",
    "end": "286840"
  },
  {
    "text": "actually receives the backend addresses",
    "start": "286840",
    "end": "289039"
  },
  {
    "text": "from the name resolver and it decides",
    "start": "289039",
    "end": "292320"
  },
  {
    "text": "when and how to create connections to",
    "start": "292320",
    "end": "295479"
  },
  {
    "text": "those backend addresses um the second",
    "start": "295479",
    "end": "298320"
  },
  {
    "text": "one is the call management component and",
    "start": "298320",
    "end": "300919"
  },
  {
    "text": "this component is invoked for every",
    "start": "300919",
    "end": "302960"
  },
  {
    "text": "request so when an RPC is made by the",
    "start": "302960",
    "end": "305800"
  },
  {
    "text": "client the call management component",
    "start": "305800",
    "end": "308199"
  },
  {
    "text": "actually chooses the subchannel uh or",
    "start": "308199",
    "end": "311440"
  },
  {
    "text": "chooses the back end um that will be",
    "start": "311440",
    "end": "314160"
  },
  {
    "text": "used for that RPC and we call this",
    "start": "314160",
    "end": "316400"
  },
  {
    "text": "component the Picker in grpc we'll see",
    "start": "316400",
    "end": "318880"
  },
  {
    "text": "more about",
    "start": "318880",
    "end": "320919"
  },
  {
    "text": "this grpc also supports a plug-in",
    "start": "320919",
    "end": "323840"
  },
  {
    "text": "architecture for lb policies what we",
    "start": "323840",
    "end": "326400"
  },
  {
    "text": "mean by this is that JPC defines an",
    "start": "326400",
    "end": "328919"
  },
  {
    "text": "interface for lb policies and individual",
    "start": "328919",
    "end": "331800"
  },
  {
    "text": "lb policies Implement that interface and",
    "start": "331800",
    "end": "334319"
  },
  {
    "text": "register themselves with JPC at init",
    "start": "334319",
    "end": "337160"
  },
  {
    "text": "time and at runtime GPC actually selects",
    "start": "337160",
    "end": "340560"
  },
  {
    "text": "the lb policy to",
    "start": "340560",
    "end": "343560"
  },
  {
    "text": "use so GPC ships with a bunch of lb",
    "start": "344199",
    "end": "348080"
  },
  {
    "text": "policies um and the plug-in architecture",
    "start": "348080",
    "end": "350680"
  },
  {
    "text": "that I just mentioned also allows you to",
    "start": "350680",
    "end": "352880"
  },
  {
    "text": "write your own lb policies uh but given",
    "start": "352880",
    "end": "355720"
  },
  {
    "text": "how many lb policies we support we don't",
    "start": "355720",
    "end": "358080"
  },
  {
    "text": "expect you uh to have that need but if",
    "start": "358080",
    "end": "361919"
  },
  {
    "text": "you want to you can very well do that",
    "start": "361919",
    "end": "364759"
  },
  {
    "text": "with the plug-in architecture um so the",
    "start": "364759",
    "end": "367240"
  },
  {
    "text": "lb policies listed here are just a",
    "start": "367240",
    "end": "369680"
  },
  {
    "text": "subset we have many more as well uh and",
    "start": "369680",
    "end": "372840"
  },
  {
    "text": "if you're thinking about writing your",
    "start": "372840",
    "end": "374080"
  },
  {
    "text": "own lb policy please do come and talk to",
    "start": "374080",
    "end": "376120"
  },
  {
    "text": "us uh there's a good chance that we",
    "start": "376120",
    "end": "378319"
  },
  {
    "text": "already have something that can work for",
    "start": "378319",
    "end": "380039"
  },
  {
    "text": "you if not uh we'd welcome contributions",
    "start": "380039",
    "end": "383800"
  },
  {
    "text": "for new LP policies as",
    "start": "383800",
    "end": "386840"
  },
  {
    "text": "well so let's go through a couple of",
    "start": "386840",
    "end": "390400"
  },
  {
    "text": "examples um one is pick first you've",
    "start": "390400",
    "end": "394199"
  },
  {
    "text": "probably heard this a bunch of times in",
    "start": "394199",
    "end": "396440"
  },
  {
    "text": "this conference already but pick first",
    "start": "396440",
    "end": "398160"
  },
  {
    "text": "is one of the simplest lb policies uh",
    "start": "398160",
    "end": "400880"
  },
  {
    "text": "that all implementations of grpc ship",
    "start": "400880",
    "end": "402960"
  },
  {
    "text": "with and basically what it does is it",
    "start": "402960",
    "end": "405599"
  },
  {
    "text": "gets a bunch of addresses from the name",
    "start": "405599",
    "end": "407319"
  },
  {
    "text": "resolver and it starts connecting to",
    "start": "407319",
    "end": "409199"
  },
  {
    "text": "them in order and the moment it finds",
    "start": "409199",
    "end": "411720"
  },
  {
    "text": "one that is reachable it uses that for",
    "start": "411720",
    "end": "414599"
  },
  {
    "text": "all the",
    "start": "414599",
    "end": "416000"
  },
  {
    "text": "rpcs and the next one is round robin",
    "start": "416000",
    "end": "419000"
  },
  {
    "text": "which is in star contrast to pick first",
    "start": "419000",
    "end": "421479"
  },
  {
    "text": "in the sense that when it receives a",
    "start": "421479",
    "end": "423240"
  },
  {
    "text": "bunch of addresses from the name",
    "start": "423240",
    "end": "424400"
  },
  {
    "text": "resolver it basically blasts and",
    "start": "424400",
    "end": "426919"
  },
  {
    "text": "connects to all of",
    "start": "426919",
    "end": "428240"
  },
  {
    "text": "them and uh when it gets an RPC it tries",
    "start": "428240",
    "end": "432120"
  },
  {
    "text": "to uh spread those rpcs across those",
    "start": "432120",
    "end": "435080"
  },
  {
    "text": "ready back ends in a round robin",
    "start": "435080",
    "end": "438800"
  },
  {
    "text": "fashion now here are some very high",
    "start": "438800",
    "end": "441759"
  },
  {
    "text": "level guidelines on choosing an lb",
    "start": "441759",
    "end": "443879"
  },
  {
    "text": "policy for your service now again uh a",
    "start": "443879",
    "end": "446680"
  },
  {
    "text": "lot depends on the requirements of your",
    "start": "446680",
    "end": "448879"
  },
  {
    "text": "service but these are like super high",
    "start": "448879",
    "end": "451280"
  },
  {
    "text": "level um so if your clients are actually",
    "start": "451280",
    "end": "454160"
  },
  {
    "text": "going through a reverse proxy then uh",
    "start": "454160",
    "end": "456680"
  },
  {
    "text": "pick first mix sense or if you want soft",
    "start": "456680",
    "end": "459680"
  },
  {
    "text": "Affinity where um you want all your",
    "start": "459680",
    "end": "463720"
  },
  {
    "text": "client rpcs to reach the same server",
    "start": "463720",
    "end": "465560"
  },
  {
    "text": "back end because the back end is caching",
    "start": "465560",
    "end": "467960"
  },
  {
    "text": "some uh data specific to that client",
    "start": "467960",
    "end": "470639"
  },
  {
    "text": "then again pick first makes sense and in",
    "start": "470639",
    "end": "473879"
  },
  {
    "text": "the case where um your clients are",
    "start": "473879",
    "end": "476879"
  },
  {
    "text": "producing very small load compared to",
    "start": "476879",
    "end": "479520"
  },
  {
    "text": "the overall load on the server uh pick",
    "start": "479520",
    "end": "481919"
  },
  {
    "text": "first with randomized shuffling",
    "start": "481919",
    "end": "484520"
  },
  {
    "text": "works I don't know how many of you were",
    "start": "484520",
    "end": "487280"
  },
  {
    "text": "uh in Paul's stock but when he was",
    "start": "487280",
    "end": "489440"
  },
  {
    "text": "discussing uh about making some hacks to",
    "start": "489440",
    "end": "491919"
  },
  {
    "text": "make pick first work and I was thinking",
    "start": "491919",
    "end": "493680"
  },
  {
    "text": "like oh why are they not using uh the",
    "start": "493680",
    "end": "495479"
  },
  {
    "text": "randomized shuffling and then uh later",
    "start": "495479",
    "end": "497800"
  },
  {
    "text": "on he mentioned that okay grpc added",
    "start": "497800",
    "end": "500360"
  },
  {
    "text": "that support and then they're going to",
    "start": "500360",
    "end": "501720"
  },
  {
    "text": "use that um so in most of the other",
    "start": "501720",
    "end": "505039"
  },
  {
    "text": "cases uh round robin or weighted round",
    "start": "505039",
    "end": "507479"
  },
  {
    "text": "robin would work for you",
    "start": "507479",
    "end": "511440"
  },
  {
    "text": "so let's dive a little deeper now and",
    "start": "512000",
    "end": "515120"
  },
  {
    "text": "look at the JPC client architecture um",
    "start": "515120",
    "end": "518200"
  },
  {
    "text": "we'll see a typical client workflow and",
    "start": "518200",
    "end": "520200"
  },
  {
    "text": "we'll see where uh the lb policies fit",
    "start": "520200",
    "end": "522440"
  },
  {
    "text": "in so the client application um creates",
    "start": "522440",
    "end": "526440"
  },
  {
    "text": "a GPC Channel and it gives it the target",
    "start": "526440",
    "end": "529440"
  },
  {
    "text": "URI which basically represents the",
    "start": "529440",
    "end": "532040"
  },
  {
    "text": "server that it wants to talk to and at",
    "start": "532040",
    "end": "534519"
  },
  {
    "text": "this point the channel is not doing",
    "start": "534519",
    "end": "536320"
  },
  {
    "text": "anything it's just sitting idle there",
    "start": "536320",
    "end": "538560"
  },
  {
    "text": "until uh the client application either",
    "start": "538560",
    "end": "541920"
  },
  {
    "text": "asks the channel to explicitly connect",
    "start": "541920",
    "end": "544320"
  },
  {
    "text": "or it makes an RPC and now the channel",
    "start": "544320",
    "end": "547839"
  },
  {
    "text": "comes to life and it actually goes ahead",
    "start": "547839",
    "end": "551079"
  },
  {
    "text": "and creates a name resolver and it gives",
    "start": "551079",
    "end": "553279"
  },
  {
    "text": "the target URI to the name resolver the",
    "start": "553279",
    "end": "555640"
  },
  {
    "text": "name resolver will go and do its thing",
    "start": "555640",
    "end": "558160"
  },
  {
    "text": "and it'll come back with a bunch of",
    "start": "558160",
    "end": "561720"
  },
  {
    "text": "backend addresses and something called",
    "start": "561720",
    "end": "564120"
  },
  {
    "text": "service config so the service config is",
    "start": "564120",
    "end": "567360"
  },
  {
    "text": "a piece of configuration that that",
    "start": "567360",
    "end": "569920"
  },
  {
    "text": "controls or specifies how a grpc client",
    "start": "569920",
    "end": "573200"
  },
  {
    "text": "behaves when it's talking to a grpc",
    "start": "573200",
    "end": "575440"
  },
  {
    "text": "service so this piece of configuration",
    "start": "575440",
    "end": "578000"
  },
  {
    "text": "contains a bunch of knobs but the most",
    "start": "578000",
    "end": "580760"
  },
  {
    "text": "important one is it contains the name of",
    "start": "580760",
    "end": "583000"
  },
  {
    "text": "the lb policy to use and it also",
    "start": "583000",
    "end": "585399"
  },
  {
    "text": "contains the configuration to be passed",
    "start": "585399",
    "end": "587640"
  },
  {
    "text": "to the lb",
    "start": "587640",
    "end": "589240"
  },
  {
    "text": "policy So based on that the JPC Channel",
    "start": "589240",
    "end": "593120"
  },
  {
    "text": "actually creates an lb policy so this is",
    "start": "593120",
    "end": "595920"
  },
  {
    "text": "what I meant uh earlier when I said that",
    "start": "595920",
    "end": "598760"
  },
  {
    "text": "uh grp will uh select an lb policy at",
    "start": "598760",
    "end": "601839"
  },
  {
    "text": "run",
    "start": "601839",
    "end": "602680"
  },
  {
    "text": "time so it then passes the addresses and",
    "start": "602680",
    "end": "606279"
  },
  {
    "text": "the load balancing config um that was",
    "start": "606279",
    "end": "609320"
  },
  {
    "text": "given to it by the name",
    "start": "609320",
    "end": "611720"
  },
  {
    "text": "resolver and at this at this point the",
    "start": "611720",
    "end": "614480"
  },
  {
    "text": "lb policy will go ahead and create",
    "start": "614480",
    "end": "616800"
  },
  {
    "text": "subchannels to those backend addresses",
    "start": "616800",
    "end": "619079"
  },
  {
    "text": "so a subchannel is actually a real",
    "start": "619079",
    "end": "621160"
  },
  {
    "text": "connection to a backend server and the",
    "start": "621160",
    "end": "623760"
  },
  {
    "text": "lb policy will be monitoring the state",
    "start": "623760",
    "end": "627200"
  },
  {
    "text": "of these subchannels and it'll manage",
    "start": "627200",
    "end": "629720"
  },
  {
    "text": "the life cycle of",
    "start": "629720",
    "end": "632120"
  },
  {
    "text": "them and at some point the lb policy",
    "start": "632120",
    "end": "635360"
  },
  {
    "text": "will return an aggregated connectivity",
    "start": "635360",
    "end": "638360"
  },
  {
    "text": "state to the channel and it'll also",
    "start": "638360",
    "end": "641040"
  },
  {
    "text": "return what we call the Picker so the",
    "start": "641040",
    "end": "644560"
  },
  {
    "text": "Picker as I mentioned earlier is the",
    "start": "644560",
    "end": "647880"
  },
  {
    "text": "call management component basically it's",
    "start": "647880",
    "end": "649920"
  },
  {
    "text": "invoked for every RPC to select a sub",
    "start": "649920",
    "end": "653360"
  },
  {
    "text": "channel from the list of subchannels",
    "start": "653360",
    "end": "654959"
  },
  {
    "text": "that are",
    "start": "654959",
    "end": "656160"
  },
  {
    "text": "available so when an RPC is made the the",
    "start": "656160",
    "end": "659839"
  },
  {
    "text": "grpc channel calls the Picker and the",
    "start": "659839",
    "end": "662920"
  },
  {
    "text": "Picker will look at the ready",
    "start": "662920",
    "end": "664600"
  },
  {
    "text": "subchannels and it'll pick one based on",
    "start": "664600",
    "end": "667560"
  },
  {
    "text": "whatever uh algorithm it uses or",
    "start": "667560",
    "end": "670200"
  },
  {
    "text": "whatever policy it's",
    "start": "670200",
    "end": "672680"
  },
  {
    "text": "using so once a subchannel is returned",
    "start": "672680",
    "end": "675760"
  },
  {
    "text": "to the channel the RPC actually makes",
    "start": "675760",
    "end": "678240"
  },
  {
    "text": "its way out of that subchannel so this",
    "start": "678240",
    "end": "681000"
  },
  {
    "text": "is like a high level overview of where",
    "start": "681000",
    "end": "683600"
  },
  {
    "text": "lb policies sit in the overall",
    "start": "683600",
    "end": "687440"
  },
  {
    "text": "picture now let's look",
    "start": "687440",
    "end": "689800"
  },
  {
    "start": "688000",
    "end": "778000"
  },
  {
    "text": "a little deeper into subchannel",
    "start": "689800",
    "end": "692600"
  },
  {
    "text": "connectivity States so we saw that a",
    "start": "692600",
    "end": "694920"
  },
  {
    "text": "subchannel is an actual connection to a",
    "start": "694920",
    "end": "697639"
  },
  {
    "text": "backend server uh but it actually goes",
    "start": "697639",
    "end": "700279"
  },
  {
    "text": "through different connectivity States",
    "start": "700279",
    "end": "701880"
  },
  {
    "text": "during its",
    "start": "701880",
    "end": "702880"
  },
  {
    "text": "lifetime and the JPC Channel actually",
    "start": "702880",
    "end": "706639"
  },
  {
    "text": "notifies lb policies of these State",
    "start": "706639",
    "end": "710480"
  },
  {
    "text": "transitions so all subchannels start off",
    "start": "710480",
    "end": "713800"
  },
  {
    "text": "in idle so when they are created by the",
    "start": "713800",
    "end": "715839"
  },
  {
    "text": "lb policy they all start off in idle and",
    "start": "715839",
    "end": "718519"
  },
  {
    "text": "they're just sitting there they're doing",
    "start": "718519",
    "end": "719760"
  },
  {
    "text": "nothing and then at some point the lb",
    "start": "719760",
    "end": "722680"
  },
  {
    "text": "policy uh asks it to connect so then it",
    "start": "722680",
    "end": "726760"
  },
  {
    "text": "moves to connecting and based on whether",
    "start": "726760",
    "end": "730079"
  },
  {
    "text": "the connection succeeds or fails it",
    "start": "730079",
    "end": "732720"
  },
  {
    "text": "moves either to ready or to transient",
    "start": "732720",
    "end": "735560"
  },
  {
    "text": "failure and uh for a ready subchannel if",
    "start": "735560",
    "end": "739880"
  },
  {
    "text": "the connection fails it moves back to",
    "start": "739880",
    "end": "742760"
  },
  {
    "text": "idle and at this point it's up to the lb",
    "start": "742760",
    "end": "745959"
  },
  {
    "text": "policy to kick it to connect again it'll",
    "start": "745959",
    "end": "749639"
  },
  {
    "text": "just sit idle there",
    "start": "749639",
    "end": "752279"
  },
  {
    "text": "similarly uh subchannels which failed",
    "start": "752279",
    "end": "755480"
  },
  {
    "text": "earlier and are sitting in transient",
    "start": "755480",
    "end": "757639"
  },
  {
    "text": "failure will go through a period of",
    "start": "757639",
    "end": "759040"
  },
  {
    "text": "exponential backoff and once the backoff",
    "start": "759040",
    "end": "762279"
  },
  {
    "text": "expires they again move back to idle and",
    "start": "762279",
    "end": "764880"
  },
  {
    "text": "at this point again the lb policy has to",
    "start": "764880",
    "end": "766920"
  },
  {
    "text": "kick it to connect and from any of these",
    "start": "766920",
    "end": "770720"
  },
  {
    "text": "states the subchannel can move to shut",
    "start": "770720",
    "end": "772880"
  },
  {
    "text": "down if the lb policy decides to close",
    "start": "772880",
    "end": "775320"
  },
  {
    "text": "the sub Channel",
    "start": "775320",
    "end": "778720"
  },
  {
    "start": "778000",
    "end": "1150000"
  },
  {
    "text": "okay so now let's actually go and look",
    "start": "779240",
    "end": "781160"
  },
  {
    "text": "at the",
    "start": "781160",
    "end": "781959"
  },
  {
    "text": "API um just a note of caution that the",
    "start": "781959",
    "end": "784959"
  },
  {
    "text": "API is experimental in Java and go um",
    "start": "784959",
    "end": "789360"
  },
  {
    "text": "you are free to use them but you just",
    "start": "789360",
    "end": "791519"
  },
  {
    "text": "need to know that they're experimental",
    "start": "791519",
    "end": "793120"
  },
  {
    "text": "and we can make some changes to them",
    "start": "793120",
    "end": "795240"
  },
  {
    "text": "it's not yet public in C cor it's",
    "start": "795240",
    "end": "797120"
  },
  {
    "text": "blocked on the event engine migration",
    "start": "797120",
    "end": "799600"
  },
  {
    "text": "but we're hoping that uh we can make it",
    "start": "799600",
    "end": "801600"
  },
  {
    "text": "public very",
    "start": "801600",
    "end": "803880"
  },
  {
    "text": "soon okay so we're going to look at the",
    "start": "803880",
    "end": "807360"
  },
  {
    "text": "GPC go API",
    "start": "807360",
    "end": "810600"
  },
  {
    "text": "and it defines a bunch of interfaces so",
    "start": "810600",
    "end": "814000"
  },
  {
    "text": "we'll get started with the builder",
    "start": "814000",
    "end": "816040"
  },
  {
    "text": "interface so this is the interface that",
    "start": "816040",
    "end": "818800"
  },
  {
    "text": "every lb policy has to implement and",
    "start": "818800",
    "end": "821440"
  },
  {
    "text": "register with grpc so this interface is",
    "start": "821440",
    "end": "824680"
  },
  {
    "text": "the one that JPC uses to actually build",
    "start": "824680",
    "end": "828079"
  },
  {
    "text": "lb policies at runtime so it has two",
    "start": "828079",
    "end": "830480"
  },
  {
    "text": "methods one to build the lb policy and",
    "start": "830480",
    "end": "834079"
  },
  {
    "text": "two is uh to return the name of the lb",
    "start": "834079",
    "end": "837759"
  },
  {
    "text": "policy so this is the name that GPC will",
    "start": "837759",
    "end": "841000"
  },
  {
    "text": "look for when it gets a service config",
    "start": "841000",
    "end": "843720"
  },
  {
    "text": "which specifi specifies the name of the",
    "start": "843720",
    "end": "845880"
  },
  {
    "text": "lb",
    "start": "845880",
    "end": "847199"
  },
  {
    "text": "policy so the next one is the balancer",
    "start": "847199",
    "end": "850160"
  },
  {
    "text": "interface um this is called load",
    "start": "850160",
    "end": "853360"
  },
  {
    "text": "balancer in Java and load balancing",
    "start": "853360",
    "end": "855160"
  },
  {
    "text": "policy in C++ but this is basically the",
    "start": "855160",
    "end": "858440"
  },
  {
    "text": "heart of the lb policy implementation",
    "start": "858440",
    "end": "860959"
  },
  {
    "text": "and uh so this has a bunch of methods",
    "start": "860959",
    "end": "863600"
  },
  {
    "text": "but I've listed a couple which are the",
    "start": "863600",
    "end": "865680"
  },
  {
    "text": "most important and they correspond to",
    "start": "865680",
    "end": "868360"
  },
  {
    "text": "events from the name resolver so when",
    "start": "868360",
    "end": "870639"
  },
  {
    "text": "the name resolver comes back with",
    "start": "870639",
    "end": "872120"
  },
  {
    "text": "addresses and service config the grpc",
    "start": "872120",
    "end": "874720"
  },
  {
    "text": "channel will call update client con",
    "start": "874720",
    "end": "877160"
  },
  {
    "text": "state to give it that new state and the",
    "start": "877160",
    "end": "880680"
  },
  {
    "text": "lb policy is free to use that state in",
    "start": "880680",
    "end": "882720"
  },
  {
    "text": "whatever way that it wants basically it",
    "start": "882720",
    "end": "884839"
  },
  {
    "text": "can decide to connect to those addresses",
    "start": "884839",
    "end": "886639"
  },
  {
    "text": "immediately or it can decide to do",
    "start": "886639",
    "end": "889440"
  },
  {
    "text": "something else and the second API is uh",
    "start": "889440",
    "end": "893360"
  },
  {
    "text": "resolver error basically when the name",
    "start": "893360",
    "end": "895120"
  },
  {
    "text": "resolver comes back with an error JPC",
    "start": "895120",
    "end": "898240"
  },
  {
    "text": "Channel uses this API to notify the lb",
    "start": "898240",
    "end": "900920"
  },
  {
    "text": "policy of that",
    "start": "900920",
    "end": "903560"
  },
  {
    "text": "error the next interface is what we call",
    "start": "903560",
    "end": "907000"
  },
  {
    "text": "the client con interface um this is",
    "start": "907000",
    "end": "909920"
  },
  {
    "text": "called helper in um Java and control",
    "start": "909920",
    "end": "913720"
  },
  {
    "text": "Channel helper in C++ and this is",
    "start": "913720",
    "end": "916720"
  },
  {
    "text": "basically implemented in the grpc client",
    "start": "916720",
    "end": "919720"
  },
  {
    "text": "and the lb policies use this interface",
    "start": "919720",
    "end": "922680"
  },
  {
    "text": "to communicate with the channel so uh",
    "start": "922680",
    "end": "926759"
  },
  {
    "text": "again this interface has a bunch of",
    "start": "926759",
    "end": "928680"
  },
  {
    "text": "methods but I've listed uh a few of the",
    "start": "928680",
    "end": "931880"
  },
  {
    "text": "important ones here so the first one new",
    "start": "931880",
    "end": "934440"
  },
  {
    "text": "subcon is used by the lb policy when it",
    "start": "934440",
    "end": "937240"
  },
  {
    "text": "wants to create a new sub Channel and it",
    "start": "937240",
    "end": "940160"
  },
  {
    "text": "can pass it a bunch of options that",
    "start": "940160",
    "end": "942160"
  },
  {
    "text": "we'll look at in the next Slide the next",
    "start": "942160",
    "end": "944959"
  },
  {
    "text": "one is update state so whenever the",
    "start": "944959",
    "end": "948279"
  },
  {
    "text": "state of the lb policy changes and it",
    "start": "948279",
    "end": "950560"
  },
  {
    "text": "wants to generate a new picker and send",
    "start": "950560",
    "end": "953160"
  },
  {
    "text": "that to the channel it's going to use",
    "start": "953160",
    "end": "954759"
  },
  {
    "text": "that API and the last one is used by the",
    "start": "954759",
    "end": "958319"
  },
  {
    "text": "lb policy when it wants to request uh",
    "start": "958319",
    "end": "961800"
  },
  {
    "text": "like re- resolution of the name uh for",
    "start": "961800",
    "end": "964120"
  },
  {
    "text": "example like if the lb policy was given",
    "start": "964120",
    "end": "966480"
  },
  {
    "text": "a bunch of backend addresses and it",
    "start": "966480",
    "end": "968399"
  },
  {
    "text": "wasn't able to establish a connection to",
    "start": "968399",
    "end": "970000"
  },
  {
    "text": "any of them then the lb policy might",
    "start": "970000",
    "end": "971959"
  },
  {
    "text": "decide to ask the channel to re- resolve",
    "start": "971959",
    "end": "974040"
  },
  {
    "text": "the name to see if uh the resolution now",
    "start": "974040",
    "end": "977360"
  },
  {
    "text": "produces a different set of",
    "start": "977360",
    "end": "980560"
  },
  {
    "text": "addresses so to monitor the subchannel",
    "start": "980880",
    "end": "985319"
  },
  {
    "text": "state um we have an API in go where um",
    "start": "985319",
    "end": "990839"
  },
  {
    "text": "the lb policy can pass a call back when",
    "start": "990839",
    "end": "994120"
  },
  {
    "text": "it's creating a subchannel and this call",
    "start": "994120",
    "end": "996480"
  },
  {
    "text": "back gets invoked whenever the",
    "start": "996480",
    "end": "998160"
  },
  {
    "text": "subchannel state changes so this API is",
    "start": "998160",
    "end": "1000920"
  },
  {
    "text": "a little different in C++ and go in the",
    "start": "1000920",
    "end": "1003480"
  },
  {
    "text": "sense that it's part of the subchannel",
    "start": "1003480",
    "end": "1005319"
  },
  {
    "text": "interface itself but the concept is the",
    "start": "1005319",
    "end": "1007680"
  },
  {
    "text": "same that uh the lb policies will",
    "start": "1007680",
    "end": "1009639"
  },
  {
    "text": "receive a call back with uh the new",
    "start": "1009639",
    "end": "1012240"
  },
  {
    "text": "state or the sub",
    "start": "1012240",
    "end": "1014240"
  },
  {
    "text": "channel the last one is the",
    "start": "1014240",
    "end": "1017360"
  },
  {
    "text": "Picker so the Picker has a single method",
    "start": "1017360",
    "end": "1021360"
  },
  {
    "text": "called pick and uh it's",
    "start": "1021360",
    "end": "1025400"
  },
  {
    "text": "passed a few things basically it's",
    "start": "1025400",
    "end": "1027880"
  },
  {
    "text": "passed the full name of the RPC and it's",
    "start": "1027880",
    "end": "1030280"
  },
  {
    "text": "also passed uh any request headers that",
    "start": "1030280",
    "end": "1034079"
  },
  {
    "text": "it might use to decide how to uh how to",
    "start": "1034079",
    "end": "1038360"
  },
  {
    "text": "select a subchannel for that",
    "start": "1038360",
    "end": "1040079"
  },
  {
    "text": "RPC and one important thing to note is",
    "start": "1040079",
    "end": "1043480"
  },
  {
    "text": "that the pick call must not",
    "start": "1043480",
    "end": "1045918"
  },
  {
    "text": "block uh ideally it shouldn't do",
    "start": "1045919",
    "end": "1048120"
  },
  {
    "text": "anything um that is expensive because",
    "start": "1048120",
    "end": "1051919"
  },
  {
    "text": "this is going to be invoked for every",
    "start": "1051919",
    "end": "1053960"
  },
  {
    "text": "request so any delays here would",
    "start": "1053960",
    "end": "1057000"
  },
  {
    "text": "significantly increase um latency for",
    "start": "1057000",
    "end": "1059880"
  },
  {
    "text": "all",
    "start": "1059880",
    "end": "1060840"
  },
  {
    "text": "rpcs now the Picker can return a result",
    "start": "1060840",
    "end": "1065039"
  },
  {
    "text": "which can be one of the four types",
    "start": "1065039",
    "end": "1068160"
  },
  {
    "text": "listed here so the first one is complete",
    "start": "1068160",
    "end": "1071000"
  },
  {
    "text": "so this is the case where the Picker can",
    "start": "1071000",
    "end": "1072919"
  },
  {
    "text": "actually select a ready sub channel to",
    "start": "1072919",
    "end": "1075640"
  },
  {
    "text": "service the",
    "start": "1075640",
    "end": "1076640"
  },
  {
    "text": "RPC uh the second one is Q so this is",
    "start": "1076640",
    "end": "1080159"
  },
  {
    "text": "the case where the Picker can't find the",
    "start": "1080159",
    "end": "1082480"
  },
  {
    "text": "ready sub Channel but it's working on",
    "start": "1082480",
    "end": "1084360"
  },
  {
    "text": "getting one like for example it there",
    "start": "1084360",
    "end": "1086200"
  },
  {
    "text": "might be a connection request that's",
    "start": "1086200",
    "end": "1088159"
  },
  {
    "text": "ongoing so in this case the Picker lets",
    "start": "1088159",
    "end": "1090760"
  },
  {
    "text": "the channel know that it has to cue the",
    "start": "1090760",
    "end": "1092640"
  },
  {
    "text": "RPC and the channel will retry the RPC",
    "start": "1092640",
    "end": "1095640"
  },
  {
    "text": "when a new picker is generated the third",
    "start": "1095640",
    "end": "1098480"
  },
  {
    "text": "one is fail so in this case the Picker",
    "start": "1098480",
    "end": "1101640"
  },
  {
    "text": "can't find a ready sub Channel and it",
    "start": "1101640",
    "end": "1104840"
  },
  {
    "text": "doesn't see a way of uh finding one",
    "start": "1104840",
    "end": "1107760"
  },
  {
    "text": "either so",
    "start": "1107760",
    "end": "1109480"
  },
  {
    "text": "uh it asks the grpc channel to fail the",
    "start": "1109480",
    "end": "1112840"
  },
  {
    "text": "RPC so in this case uh rpcs which",
    "start": "1112840",
    "end": "1117640"
  },
  {
    "text": "specify wait for ready call option will",
    "start": "1117640",
    "end": "1120919"
  },
  {
    "text": "be queued but other rpcs will fail um",
    "start": "1120919",
    "end": "1125240"
  },
  {
    "text": "but there's also this concept of retries",
    "start": "1125240",
    "end": "1128400"
  },
  {
    "text": "which was mentioned uh by Ivy in her",
    "start": "1128400",
    "end": "1131600"
  },
  {
    "text": "talk so uh there could be further",
    "start": "1131600",
    "end": "1134159"
  },
  {
    "text": "retries further attempts by the retry",
    "start": "1134159",
    "end": "1136880"
  },
  {
    "text": "code the last one",
    "start": "1136880",
    "end": "1139400"
  },
  {
    "text": "is very similar to fail but uh even wait",
    "start": "1139400",
    "end": "1143480"
  },
  {
    "text": "for ready rpcs will fail and there won't",
    "start": "1143480",
    "end": "1146159"
  },
  {
    "text": "be any more retry",
    "start": "1146159",
    "end": "1149400"
  },
  {
    "text": "attempts so that's mostly uh all for the",
    "start": "1149880",
    "end": "1154799"
  },
  {
    "start": "1150000",
    "end": "1481000"
  },
  {
    "text": "API so let's take a quick",
    "start": "1154799",
    "end": "1158360"
  },
  {
    "text": "um so we're actually yeah running out of",
    "start": "1158360",
    "end": "1162159"
  },
  {
    "text": "time so I just have a couple of slides",
    "start": "1162159",
    "end": "1164640"
  },
  {
    "text": "but uh which show like the flow of the",
    "start": "1164640",
    "end": "1168480"
  },
  {
    "text": "AP but uh we can take questions instead",
    "start": "1168480",
    "end": "1171320"
  },
  {
    "text": "of going through those",
    "start": "1171320",
    "end": "1174480"
  },
  {
    "text": "slides",
    "start": "1180440",
    "end": "1183440"
  },
  {
    "text": "questions um when to when a channel is",
    "start": "1190919",
    "end": "1194280"
  },
  {
    "text": "connecting to the many different sub",
    "start": "1194280",
    "end": "1196440"
  },
  {
    "text": "channels MH is that like",
    "start": "1196440",
    "end": "1199320"
  },
  {
    "text": "uh you know cheap because they're all in",
    "start": "1199320",
    "end": "1201559"
  },
  {
    "text": "the same zone is that part of the idea",
    "start": "1201559",
    "end": "1204480"
  },
  {
    "text": "at",
    "start": "1204480",
    "end": "1205440"
  },
  {
    "text": "all um so that totally depends on the",
    "start": "1205440",
    "end": "1209960"
  },
  {
    "text": "addresses that are return returned by",
    "start": "1209960",
    "end": "1211720"
  },
  {
    "text": "the name resolver so if it's so happens",
    "start": "1211720",
    "end": "1215240"
  },
  {
    "text": "that the addresses returned by the name",
    "start": "1215240",
    "end": "1217240"
  },
  {
    "text": "resolver are in the same Zone um so grpc",
    "start": "1217240",
    "end": "1222400"
  },
  {
    "text": "doesn't control uh any of that so if it",
    "start": "1222400",
    "end": "1227000"
  },
  {
    "text": "is like whatever addresses it is given",
    "start": "1227000",
    "end": "1229440"
  },
  {
    "text": "it'll try connecting to",
    "start": "1229440",
    "end": "1231480"
  },
  {
    "text": "them so if you want um control over that",
    "start": "1231480",
    "end": "1236440"
  },
  {
    "text": "then you'll have to control the name",
    "start": "1236440",
    "end": "1238360"
  },
  {
    "text": "resolver so name resolver is also a",
    "start": "1238360",
    "end": "1240880"
  },
  {
    "text": "component in GPC that is configurable so",
    "start": "1240880",
    "end": "1243960"
  },
  {
    "text": "if you write your own name resolver to",
    "start": "1243960",
    "end": "1246400"
  },
  {
    "text": "control the set of backend addresses",
    "start": "1246400",
    "end": "1248400"
  },
  {
    "text": "that are given to a client then you can",
    "start": "1248400",
    "end": "1250280"
  },
  {
    "text": "do that but as long as a client gets a",
    "start": "1250280",
    "end": "1254159"
  },
  {
    "text": "set of addresses from the name resolver",
    "start": "1254159",
    "end": "1256520"
  },
  {
    "text": "uh it's going to treat them all the same",
    "start": "1256520",
    "end": "1259840"
  },
  {
    "text": "is that an optimization that many",
    "start": "1259840",
    "end": "1262440"
  },
  {
    "text": "companies uh use or no um so the lb",
    "start": "1262440",
    "end": "1267280"
  },
  {
    "text": "policy has a choice like there's no need",
    "start": "1267280",
    "end": "1271240"
  },
  {
    "text": "for the lb policy to connect to all the",
    "start": "1271240",
    "end": "1272960"
  },
  {
    "text": "addresses that it's given to so it can",
    "start": "1272960",
    "end": "1275679"
  },
  {
    "text": "decide what addresses it wants to",
    "start": "1275679",
    "end": "1277240"
  },
  {
    "text": "connect to for example there are lb",
    "start": "1277240",
    "end": "1279440"
  },
  {
    "text": "policies in GPC uh where the name",
    "start": "1279440",
    "end": "1282919"
  },
  {
    "text": "resolver adds certain extra",
    "start": "1282919",
    "end": "1286200"
  },
  {
    "text": "um attributes to the address something",
    "start": "1286200",
    "end": "1289039"
  },
  {
    "text": "like priority or um Zone and things like",
    "start": "1289039",
    "end": "1292320"
  },
  {
    "text": "that so in that case when the lb policy",
    "start": "1292320",
    "end": "1295200"
  },
  {
    "text": "understands those attributes it can make",
    "start": "1295200",
    "end": "1297480"
  },
  {
    "text": "that choice and say that okay this is",
    "start": "1297480",
    "end": "1300120"
  },
  {
    "text": "this zone is uh priority zero for me so",
    "start": "1300120",
    "end": "1303360"
  },
  {
    "text": "I'll try connecting to back ends in that",
    "start": "1303360",
    "end": "1305600"
  },
  {
    "text": "zone and if I can't connect to any of",
    "start": "1305600",
    "end": "1308320"
  },
  {
    "text": "them then I'll fall back to the next",
    "start": "1308320",
    "end": "1310039"
  },
  {
    "text": "Zone and things like that so all that is",
    "start": "1310039",
    "end": "1312080"
  },
  {
    "text": "open uh to the lb policy but if you're",
    "start": "1312080",
    "end": "1316320"
  },
  {
    "text": "using something as simple as pick first",
    "start": "1316320",
    "end": "1319200"
  },
  {
    "text": "or round robin uh then they probably",
    "start": "1319200",
    "end": "1321799"
  },
  {
    "text": "don't understand um those attributes so",
    "start": "1321799",
    "end": "1325600"
  },
  {
    "text": "round robin will try to connect to all",
    "start": "1325600",
    "end": "1327120"
  },
  {
    "text": "of them and Pi first will try to connect",
    "start": "1327120",
    "end": "1330520"
  },
  {
    "text": "to them in the given order but if your",
    "start": "1330520",
    "end": "1333000"
  },
  {
    "text": "lb policy understands that and the name",
    "start": "1333000",
    "end": "1334799"
  },
  {
    "text": "resolver specifies those attributes then",
    "start": "1334799",
    "end": "1337279"
  },
  {
    "text": "you have total control over how",
    "start": "1337279",
    "end": "1338960"
  },
  {
    "text": "connections are made does that answer",
    "start": "1338960",
    "end": "1341559"
  },
  {
    "text": "your question yes thanks cool",
    "start": "1341559",
    "end": "1346559"
  },
  {
    "text": "uh can you talk more about the",
    "start": "1348679",
    "end": "1350520"
  },
  {
    "text": "connection management sub subcomponent",
    "start": "1350520",
    "end": "1352679"
  },
  {
    "text": "in the lb policy like just an extension",
    "start": "1352679",
    "end": "1354480"
  },
  {
    "text": "to this question like uh will will that",
    "start": "1354480",
    "end": "1357520"
  },
  {
    "text": "help in configuring uh the connections",
    "start": "1357520",
    "end": "1361000"
  },
  {
    "text": "made like uh if we want to reduce the",
    "start": "1361000",
    "end": "1363640"
  },
  {
    "text": "number of connections to our server",
    "start": "1363640",
    "end": "1365159"
  },
  {
    "text": "let's say there are multiple clients and",
    "start": "1365159",
    "end": "1367159"
  },
  {
    "text": "we want to you know optimize that layer",
    "start": "1367159",
    "end": "1369720"
  },
  {
    "text": "so how can the connection uh connection",
    "start": "1369720",
    "end": "1372760"
  },
  {
    "text": "management subcomponent help you so",
    "start": "1372760",
    "end": "1375080"
  },
  {
    "text": "again um each lb policy decides",
    "start": "1375080",
    "end": "1380440"
  },
  {
    "text": "what it wants to do with the given set",
    "start": "1380760",
    "end": "1382520"
  },
  {
    "text": "of addresses um so there's no compulsion",
    "start": "1382520",
    "end": "1385880"
  },
  {
    "text": "that the lb policy has to create",
    "start": "1385880",
    "end": "1388320"
  },
  {
    "text": "connections to all of them based on the",
    "start": "1388320",
    "end": "1390960"
  },
  {
    "text": "algorithm that it uses it might decide",
    "start": "1390960",
    "end": "1393440"
  },
  {
    "text": "to do that or it might decide to do",
    "start": "1393440",
    "end": "1395960"
  },
  {
    "text": "something else and like if you're um if",
    "start": "1395960",
    "end": "1400240"
  },
  {
    "text": "you're using something like XTS uh to do",
    "start": "1400240",
    "end": "1404640"
  },
  {
    "text": "your name resolution you can do fancy",
    "start": "1404640",
    "end": "1406919"
  },
  {
    "text": "things there and uh Implement subsetting",
    "start": "1406919",
    "end": "1409520"
  },
  {
    "text": "in your control plane and have it give",
    "start": "1409520",
    "end": "1413000"
  },
  {
    "text": "the client only like a subset of your",
    "start": "1413000",
    "end": "1416039"
  },
  {
    "text": "backend addresses and at that point like",
    "start": "1416039",
    "end": "1418679"
  },
  {
    "text": "the logic in the client can become",
    "start": "1418679",
    "end": "1422039"
  },
  {
    "text": "simpler all is session Affinity involved",
    "start": "1432600",
    "end": "1435720"
  },
  {
    "text": "at all in the client lb layer so session",
    "start": "1435720",
    "end": "1438960"
  },
  {
    "text": "Affinity we do have an lb policy which",
    "start": "1438960",
    "end": "1441360"
  },
  {
    "text": "does session Affinity but I think at",
    "start": "1441360",
    "end": "1443919"
  },
  {
    "text": "this point it's only implemented in Java",
    "start": "1443919",
    "end": "1447200"
  },
  {
    "text": "um I might be wrong but uh I my feeling",
    "start": "1447200",
    "end": "1451720"
  },
  {
    "text": "is that it's only implemented in Java",
    "start": "1451720",
    "end": "1453440"
  },
  {
    "text": "and the other languages don't currently",
    "start": "1453440",
    "end": "1455600"
  },
  {
    "text": "support it uh but there is an lb policy",
    "start": "1455600",
    "end": "1459240"
  },
  {
    "text": "which does that",
    "start": "1459240",
    "end": "1462720"
  },
  {
    "text": "any other",
    "start": "1469240",
    "end": "1471720"
  },
  {
    "text": "questions no cool thank you so much for",
    "start": "1472720",
    "end": "1475840"
  },
  {
    "text": "coming",
    "start": "1475840",
    "end": "1478200"
  },
  {
    "text": "[Applause]",
    "start": "1478200",
    "end": "1483238"
  }
]