[
  {
    "text": "great let's get started so welcome to our talk today we're talking about supply chain and supply chain security",
    "start": "0",
    "end": "6270"
  },
  {
    "text": "and I'm Micah Trotsky I'm a product manager at Google and I work in security",
    "start": "6270",
    "end": "12870"
  },
  {
    "text": "and I'm Andrew Martin I'm a founder control plane which is continuous",
    "start": "12870",
    "end": "18630"
  },
  {
    "text": "infrastructure and engineering security practices with a focus on containerized deployments between us we've done a",
    "start": "18630",
    "end": "26609"
  },
  {
    "text": "little bit of everything from product security to development pen testing database administration and we want to",
    "start": "26609",
    "end": "33719"
  },
  {
    "text": "talk about the code that we run in production how it gets there and how we",
    "start": "33719",
    "end": "39090"
  },
  {
    "text": "know the code we thought we were shipping is the same code as we are running so what is this nebulous supply",
    "start": "39090",
    "end": "47850"
  },
  {
    "text": "chain it's anything that we depend upon in a military scenario the origins and",
    "start": "47850",
    "end": "55010"
  },
  {
    "text": "transit of all hardware and software has to be attested to both where it's from",
    "start": "55010",
    "end": "61109"
  },
  {
    "text": "and who builds it this protects us against adversarial or the nation-state",
    "start": "61109",
    "end": "66750"
  },
  {
    "text": "attacks and pharmaceutical companies they need to know the provenance of all",
    "start": "66750",
    "end": "71790"
  },
  {
    "text": "their ingredients because people are ingesting these things and of course kittens",
    "start": "71790",
    "end": "77040"
  },
  {
    "text": "well they need their next treats the supply chain for these kittens isn't",
    "start": "77040",
    "end": "82590"
  },
  {
    "text": "just the hands that feeds them but also the distributors of The Frisky bits the",
    "start": "82590",
    "end": "88530"
  },
  {
    "text": "warehouses that they were in for home delivery the manufacturers farmers that stewarded the chickens the food that",
    "start": "88530",
    "end": "95340"
  },
  {
    "text": "those chickens were fed so supply chains can be long and difficult to track and",
    "start": "95340",
    "end": "101630"
  },
  {
    "text": "when there are no guarantees that the upstream supply chain is competent tracking where these things came from",
    "start": "101630",
    "end": "108390"
  },
  {
    "text": "becomes even more important especially if we're feeding the Emperors cats so",
    "start": "108390",
    "end": "115560"
  },
  {
    "text": "how does this relate to software well this is a grossly oversimplified",
    "start": "115560",
    "end": "121200"
  },
  {
    "text": "software supply chain but ultimately a software supply chain is any code that",
    "start": "121200",
    "end": "126840"
  },
  {
    "text": "ends up running in production and the trusted mechanisms to build package and",
    "start": "126840",
    "end": "132209"
  },
  {
    "text": "this meet back code software supply chains can be exploited",
    "start": "132209",
    "end": "137230"
  },
  {
    "text": "so bugs and libraries that are depended upon by an application or deliberate",
    "start": "137230",
    "end": "142540"
  },
  {
    "text": "vulnerabilities snuck into popular dependencies either in the source code or by compromising the hosting service",
    "start": "142540",
    "end": "150730"
  },
  {
    "text": "or the infrastructure provider or perhaps through a compromised download",
    "start": "150730",
    "end": "156120"
  },
  {
    "text": "through a man-in-the-middle type attack or typos squatting which is becoming",
    "start": "156120",
    "end": "161230"
  },
  {
    "text": "increasingly popular for example a library with a - in its name is cloned",
    "start": "161230",
    "end": "167859"
  },
  {
    "text": "and re-uploaded without the hyphen so there are two parallel versions",
    "start": "167859",
    "end": "173169"
  },
  {
    "text": "controlled by different people the attackers are dead so people can happily resolve and download that",
    "start": "173169",
    "end": "179079"
  },
  {
    "text": "dependency because it has the same source code their applications continue to run correctly then once the new",
    "start": "179079",
    "end": "186549"
  },
  {
    "text": "malicious version has maybe a hundred thousand weekly downloads malicious code",
    "start": "186549",
    "end": "193060"
  },
  {
    "text": "is added by the attacker which for example dumped the environment variables",
    "start": "193060",
    "end": "198069"
  },
  {
    "text": "and posts them to a remote endpoint that means if the code is run on a build",
    "start": "198069",
    "end": "203409"
  },
  {
    "text": "server which is deploying directly to production production deployment keys are exfiltrated so when we talk about",
    "start": "203409",
    "end": "210729"
  },
  {
    "text": "supply chain security we're talking about protecting against all of these threats the equifax hack was an example",
    "start": "210729",
    "end": "218979"
  },
  {
    "text": "of a supply chain attack exploiting a vulnerable struts library and compounded",
    "start": "218979",
    "end": "224199"
  },
  {
    "text": "by a parameter focused network policy that allowed database access and",
    "start": "224199",
    "end": "229209"
  },
  {
    "text": "subsequent exfiltration detecting the vulnerable struts library through scanning would easily have prevented",
    "start": "229209",
    "end": "236019"
  },
  {
    "text": "this these were well known and published CVS so other attacks of malicious but",
    "start": "236019",
    "end": "243519"
  },
  {
    "text": "legitimately signed version of CC cleaner or when those cleanup tool was delivered to users via their official",
    "start": "243519",
    "end": "249759"
  },
  {
    "text": "download servers in 2017 the signing key could have been compromised at multiple",
    "start": "249759",
    "end": "255609"
  },
  {
    "text": "points in that deployment pipeline and a similar attack happened with Kingslayer and malicious but signed binary was",
    "start": "255609",
    "end": "263979"
  },
  {
    "text": "distributed so what in your supply chain will change if you use containers first let's look",
    "start": "263979",
    "end": "269659"
  },
  {
    "text": "at what your development pipeline looks like more traditionally with virtual machines historically you might have a monolithic application running on a VM",
    "start": "269659",
    "end": "276080"
  },
  {
    "text": "and to make a change or your developers would have to SSH into that machine or push code changes without necessarily",
    "start": "276080",
    "end": "282680"
  },
  {
    "text": "understanding the impact that it has on the rest of your environment you had to do a lot of manual adjustments including",
    "start": "282680",
    "end": "287990"
  },
  {
    "text": "for maintenance operations like we're starts you might not even know exactly what's running in your environment which",
    "start": "287990",
    "end": "293060"
  },
  {
    "text": "is kind of terrifying right you're changing things on the fly this isn't only hard to debug but there's very",
    "start": "293060",
    "end": "298250"
  },
  {
    "text": "little formal process you'll do the same thing again next time you'll just SSH again into your VM to debug debug patch",
    "start": "298250",
    "end": "304520"
  },
  {
    "text": "update we start or otherwise adjust your application it's not a great security story and your ops team is probably not",
    "start": "304520",
    "end": "310639"
  },
  {
    "text": "gonna love it either either because it's they really don't know what's going on in your environment anymore now with containers this changes",
    "start": "310639",
    "end": "316819"
  },
  {
    "text": "slightly things are a little bit different you can have a pipeline of things that end up in your environment you can write code and ensure that it",
    "start": "316819",
    "end": "323960"
  },
  {
    "text": "meets your desired requirements for build test scan etcetera and then deploy micro services are redeployed as",
    "start": "323960",
    "end": "331130"
  },
  {
    "text": "individual container images rather than changing specific lines of code it's easier to debug and it's also easier to",
    "start": "331130",
    "end": "336830"
  },
  {
    "text": "change this doesn't solve everything of course you still have hard problems to solve like dependency management and you'll need good integration testing to",
    "start": "336830",
    "end": "343250"
  },
  {
    "text": "get that right but so you know going back to the supply chain in general we're gonna break it down into five main",
    "start": "343250",
    "end": "349310"
  },
  {
    "text": "components that we'll cover in this talk the base image code build application image and deploy these are the pieces of",
    "start": "349310",
    "end": "355430"
  },
  {
    "text": "a secure software supply chain or in our case a container delivery lifecycle or a software development lifecycle whatever",
    "start": "355430",
    "end": "362449"
  },
  {
    "text": "you want to call it so your base image this is your from line that you build your container on top of you choose a",
    "start": "362449",
    "end": "367669"
  },
  {
    "text": "base image on which to build application which then runs in your container it's packaged as part of the container itself",
    "start": "367669",
    "end": "372940"
  },
  {
    "text": "code it's your application code it's what comes out of your software development process build this is how",
    "start": "372940",
    "end": "378590"
  },
  {
    "text": "you do the build of your container image from your code and various packages application image how your final",
    "start": "378590",
    "end": "384469"
  },
  {
    "text": "packaged up container image containing your application and deploy so now that you have your your image all together",
    "start": "384469",
    "end": "389900"
  },
  {
    "text": "it's time to deploy when you're deploying your image you can use something like an admission controller to determine what should I",
    "start": "389900",
    "end": "395600"
  },
  {
    "text": "we be deployed in your environment for example if the image hasn't gone through all of the steps that we've laid out so far you can verify any or you can't",
    "start": "395600",
    "end": "402260"
  },
  {
    "text": "verify its provenance which means where it came from then you might not want to deploy it at all so altogether these",
    "start": "402260",
    "end": "407660"
  },
  {
    "text": "make up the components that you would need and this talk will go through for each of these what best practices are",
    "start": "407660",
    "end": "412850"
  },
  {
    "text": "and then what open-source tools you can use to help get those best practices so let's dive in so in order to stay secure",
    "start": "412850",
    "end": "422150"
  },
  {
    "text": "testing needs to be baked in security testing as early in the development",
    "start": "422150",
    "end": "427340"
  },
  {
    "text": "lifecycle as possible so let's have a look what we can do at each stage of the",
    "start": "427340",
    "end": "432740"
  },
  {
    "text": "pipeline controlled base images and any external images should be pulled re",
    "start": "432740",
    "end": "438680"
  },
  {
    "text": "tagged and then copied into the organization's local image registry they",
    "start": "438680",
    "end": "444410"
  },
  {
    "text": "can then be subjected to your organization's internal compliance requirements and be rescanned for CVS or",
    "start": "444410",
    "end": "450530"
  },
  {
    "text": "policy on a regular basis this insulates us from upstream changes or compromise",
    "start": "450530",
    "end": "456170"
  },
  {
    "text": "and hash-based addressing in the same way that git tags reference and",
    "start": "456170",
    "end": "462290"
  },
  {
    "text": "immutable hash and the tags themselves can be changed and are vulnerable to replay attacks and attacks on the usage",
    "start": "462290",
    "end": "469850"
  },
  {
    "text": "of cryptography docker image tags are the same they are just a mutable pointer to an immutable content-addressable hash",
    "start": "469850",
    "end": "477380"
  },
  {
    "text": "and latest is just a tag that is transitory and so a possible risk in",
    "start": "477380",
    "end": "483890"
  },
  {
    "text": "terms of code you can scan your code for common misconfigurations or analyze dependencies so first static analysis of",
    "start": "483890",
    "end": "490610"
  },
  {
    "text": "your code will help you find more common security issues such as cross-site scripting in a web application or miss",
    "start": "490610",
    "end": "496400"
  },
  {
    "text": "configurations like leaving secrets encode this scans your code without actually executing it in addition to",
    "start": "496400",
    "end": "502340"
  },
  {
    "text": "good old manual reviews there are more sophisticated things you can do here such as abstract syntax tree analysis to",
    "start": "502340",
    "end": "507920"
  },
  {
    "text": "get a good overview of a program like like a compiler would a couple of things to keep in mind with static analysis",
    "start": "507920",
    "end": "513169"
  },
  {
    "text": "you're gonna need to plug that in to directly to your CI CD pipeline for example as part of your IDE",
    "start": "513169",
    "end": "518270"
  },
  {
    "text": "I often have users ask why they can't do this type of analysis later on when you have your full image built but at that",
    "start": "518270",
    "end": "524630"
  },
  {
    "text": "point it's already all bundled up so you actually have to do it here also scanners tend to be language",
    "start": "524630",
    "end": "530170"
  },
  {
    "text": "specific so you might be restricted and you're in terms of your choice of scanners if you're picking a particularly bespoke language or",
    "start": "530170",
    "end": "536520"
  },
  {
    "text": "environment the second item here dependency analysis helps you figure out both immediate dependencies and",
    "start": "536520",
    "end": "542380"
  },
  {
    "text": "transitive dependencies that is dependencies of dependencies so say you're pulling an open source packages",
    "start": "542380",
    "end": "547570"
  },
  {
    "text": "you'll want to better understand what you're using and that you're using the latest to patch version or if your",
    "start": "547570",
    "end": "553300"
  },
  {
    "text": "organization has a requirement to use one particular library over another one you want to check that that's actually what's happening in reality we also want",
    "start": "553300",
    "end": "563380"
  },
  {
    "text": "hermetic builds that this means no inter build data leakage for example a build",
    "start": "563380",
    "end": "569649"
  },
  {
    "text": "server sharing single docker server and socket could be giving access to all the",
    "start": "569649",
    "end": "575080"
  },
  {
    "text": "other builds intermediate layers that they reuse during their the development",
    "start": "575080",
    "end": "580720"
  },
  {
    "text": "and build of those other images of course again with caching build dependencies",
    "start": "580720",
    "end": "585730"
  },
  {
    "text": "for speed and fast feedback loops and ideally all those build dependencies are",
    "start": "585730",
    "end": "591130"
  },
  {
    "text": "cached within an organization's estate pinning versions for deterministic",
    "start": "591130",
    "end": "597490"
  },
  {
    "text": "builds depends upon the size of your team and organization pinning versions",
    "start": "597490",
    "end": "603190"
  },
  {
    "text": "removes the risk of silent semver upgrades that introduce bugs or of the",
    "start": "603190",
    "end": "608740"
  },
  {
    "text": "upstream being compromised however most operating system repository maintainer x' will remove the previous",
    "start": "608740",
    "end": "615459"
  },
  {
    "text": "version of an application when upgrading it this means that when the version of a",
    "start": "615459",
    "end": "620529"
  },
  {
    "text": "dependency is updated in the remote roger registry repository our builds",
    "start": "620529",
    "end": "626110"
  },
  {
    "text": "will just break arguably the manual advancement of cember is better but we",
    "start": "626110",
    "end": "632470"
  },
  {
    "text": "can also trusts ember and maintainer x' to some extent this is dependent upon",
    "start": "632470",
    "end": "637839"
  },
  {
    "text": "your organization's risk posture and to the future rootless builds docker has",
    "start": "637839",
    "end": "643899"
  },
  {
    "text": "been heavily criticised over the years for running a root daemon which means that a break outs or a code execution in",
    "start": "643899",
    "end": "651310"
  },
  {
    "text": "the daemons context is executing on the host as roots rootless builds our way of",
    "start": "651310",
    "end": "657610"
  },
  {
    "text": "mitigating this privilege and just means the docker bailed operation does not require",
    "start": "657610",
    "end": "662649"
  },
  {
    "text": "a root user this has historically been hampered by the fact that usernames",
    "start": "662649",
    "end": "668139"
  },
  {
    "text": "basis version one is not widely deployed tools such as you machi image builder",
    "start": "668139",
    "end": "674980"
  },
  {
    "text": "and kanuk oh and moving towards a safer rootless build environment although this",
    "start": "674980",
    "end": "680139"
  },
  {
    "text": "class of build clan attacks that they're mitigating against our best practices",
    "start": "680139",
    "end": "685389"
  },
  {
    "text": "best practices defensive security rather than protecting from in the wild attacks right now now that you've built your",
    "start": "685389",
    "end": "693850"
  },
  {
    "text": "image you're gonna want to verify that it means security best practices so first you can scan for vulnerabilities",
    "start": "693850",
    "end": "699430"
  },
  {
    "text": "this is about decoupling your image into a base image and many layers and verifying those for vulnerabilities you",
    "start": "699430",
    "end": "705310"
  },
  {
    "text": "end up scanning OS components binaries jars tarballs everything what happens if",
    "start": "705310",
    "end": "710920"
  },
  {
    "text": "you do find a vulnerability well your remediation options fall into three common categories first is just a patch",
    "start": "710920",
    "end": "716230"
  },
  {
    "text": "it if there's a patch available and if it's a severe vulnerability this is recommended that's the best option",
    "start": "716230",
    "end": "721709"
  },
  {
    "text": "something you should be doing on a regular basis anyways through your docker build files the second option to help improve your",
    "start": "721709",
    "end": "727839"
  },
  {
    "text": "vulnerability scan results is to just remove packages that you don't need so a stock system will come with many",
    "start": "727839",
    "end": "733300"
  },
  {
    "text": "packages on it and then in most cases you won't need to actually run your application having those on your system",
    "start": "733300",
    "end": "739089"
  },
  {
    "text": "creates a larger surface of attack unnecessarily and the third option is just taking that to the extreme which is",
    "start": "739089",
    "end": "744250"
  },
  {
    "text": "just moving to a smaller distribution something like Alpine deviance limb or distro less images going back to the",
    "start": "744250",
    "end": "749920"
  },
  {
    "text": "discussion on base images using a smaller base image helps you limit your surface of attack and reduces the",
    "start": "749920",
    "end": "754990"
  },
  {
    "text": "potential vulnerabilities in your environment next you can scan for configurations this is to help ensure that your dev",
    "start": "754990",
    "end": "761170"
  },
  {
    "text": "team is actually following best practices here again you scan for things like secrets and code but also container",
    "start": "761170",
    "end": "767079"
  },
  {
    "text": "specific configurations like images running with root privileges running as privileged or other privileged",
    "start": "767079",
    "end": "772959"
  },
  {
    "text": "escalation concerns by scanning for these things and warning developers early on you can make it easy for them",
    "start": "772959",
    "end": "778120"
  },
  {
    "text": "to do the right thing you can also scan for policies which are using user-defined things like the images must",
    "start": "778120",
    "end": "783880"
  },
  {
    "text": "not have any high severity vulnerabilities or have no exposed ports or specifics like extended file attributes it's kind of an aggregate of",
    "start": "783880",
    "end": "790600"
  },
  {
    "text": "the other types of scanning we talk about these kinds of policy checks will either happen here as part of your image",
    "start": "790600",
    "end": "796350"
  },
  {
    "text": "scans or in the next step as part of deployment we have followed all of these",
    "start": "796350",
    "end": "802110"
  },
  {
    "text": "best practices and now have a container image that were ready to deploy to production because we have the",
    "start": "802110",
    "end": "808829"
  },
  {
    "text": "guaranteed immutability of the images hash we can capture the metadata generated in the pipeline and associate",
    "start": "808829",
    "end": "816240"
  },
  {
    "text": "it with that version of the image and we can get an admission to production based",
    "start": "816240",
    "end": "822480"
  },
  {
    "text": "upon policy compliance and any other metadata that we have gathered from the",
    "start": "822480",
    "end": "827850"
  },
  {
    "text": "previous build stages this can validate that all previous build steps have not",
    "start": "827850",
    "end": "833040"
  },
  {
    "text": "only passed but have not been circumvented and that a malicious user with right access to the cube NASA's API",
    "start": "833040",
    "end": "839939"
  },
  {
    "text": "is enabled to deploy arbitrary attack code the simplest thing to do here is to",
    "start": "839939",
    "end": "845519"
  },
  {
    "text": "ensure that every image that is deployed comes from a registry that is defined in",
    "start": "845519",
    "end": "850920"
  },
  {
    "text": "metadata inside the cluster and block any image name could not match our",
    "start": "850920",
    "end": "856110"
  },
  {
    "text": "policy and finally runtime configuration it's all very well to configure these",
    "start": "856110",
    "end": "861809"
  },
  {
    "text": "images correctly but a major difference between a virtual machine and the container is that it is so easy to undo",
    "start": "861809",
    "end": "869730"
  },
  {
    "text": "all of the security on a container simply adding the privilege flag runs",
    "start": "869730",
    "end": "876059"
  },
  {
    "text": "the image and confined without seccomp without our Parma and also mounts the host devices into the container it's",
    "start": "876059",
    "end": "884009"
  },
  {
    "text": "probably one of the most dangerous flags in the history of computing so running staff analysis on the amyl pod",
    "start": "884009",
    "end": "891629"
  },
  {
    "text": "specifications and pod security policies inside the cluster prevents some of these possible configuration foot guns",
    "start": "891629",
    "end": "898699"
  },
  {
    "text": "cube Seck io quantifies risk based on runtime configuration of the images that",
    "start": "898699",
    "end": "904019"
  },
  {
    "text": "comprise a pod and can be used during development and as an admission controller to apply more granular levels",
    "start": "904019",
    "end": "910860"
  },
  {
    "text": "of policy than pod security policies so altogether as we seen running a",
    "start": "910860",
    "end": "917040"
  },
  {
    "text": "container on micro services leads to a fundamentally different security model than for VMs so to recap what's actually",
    "start": "917040",
    "end": "922829"
  },
  {
    "text": "different first containers are meant to be short-lived and frequently redeployed rather than",
    "start": "922829",
    "end": "927839"
  },
  {
    "text": "pushing a single line of code change your rebuilding and redeploying the entire image each time if you've other",
    "start": "927839",
    "end": "933120"
  },
  {
    "text": "processes that can take place passively like patching your OS for example you can be constantly doing these you don't",
    "start": "933120",
    "end": "938700"
  },
  {
    "text": "have to have a Sunday 2 a.m. 2 a.m. maintenance window constantly patching containers are also meant to be",
    "start": "938700",
    "end": "945180"
  },
  {
    "text": "immutable so they don't change once once they've been deployed you have content address ability which means that you actually know what's in the environment",
    "start": "945180",
    "end": "951079"
  },
  {
    "text": "this means that even when you scan your image when it's still in your repository and it's fine and then after you've",
    "start": "951079",
    "end": "957480"
  },
  {
    "text": "deployed it you discover vulnerability you don't have to scan your live environment you can just look at your registry to figure out if you're",
    "start": "957480",
    "end": "962790"
  },
  {
    "text": "affected note that I'm talking about image scanning here and not vulnerability standing you should still be scanning your lives your live app to",
    "start": "962790",
    "end": "969750"
  },
  {
    "text": "check that it doesn't have common bones since you're not changing single lines of code but whole containers you have a",
    "start": "969750",
    "end": "975660"
  },
  {
    "text": "single choke point for everything that gets deployed into your infrastructure that single choke point is critical and",
    "start": "975660",
    "end": "981510"
  },
  {
    "text": "what makes containers fundamentally different and I'd argue a better security model than VNC it's how you",
    "start": "981510",
    "end": "986640"
  },
  {
    "text": "enforce this governance it's named defer you know dev psych ops or dev sec oops or a continuous security whatever you",
    "start": "986640",
    "end": "993329"
  },
  {
    "text": "like to call it so to summarize what the good practices look like before we get into tools here across the whole supply",
    "start": "993329",
    "end": "998940"
  },
  {
    "text": "chain or a container delivery lifecycle you control your base images and choose",
    "start": "998940",
    "end": "1004370"
  },
  {
    "text": "minimal images that let you limit your service of attack you write your code scan it for potential security issues",
    "start": "1004370",
    "end": "1010070"
  },
  {
    "text": "and dependencies ideally you can perform more formal security reviews if you have time you build the image yourself and",
    "start": "1010070",
    "end": "1017420"
  },
  {
    "text": "ideally this is a hermetic reproducible build you scan the image for vulnerabilities misconfigurations and",
    "start": "1017420",
    "end": "1023449"
  },
  {
    "text": "also verify that they meet your up your policies and then you enforce specific requirements such that your images in",
    "start": "1023449",
    "end": "1029178"
  },
  {
    "text": "fact it did come out of your pipeline when something changes you can then you can just go back to whatever step that was what like when a new walnut is",
    "start": "1029179",
    "end": "1035870"
  },
  {
    "text": "covered and you rebuild and redeploy the whole image to fix the issue now this is",
    "start": "1035870",
    "end": "1040880"
  },
  {
    "text": "a lot to get done and you're po looking this and going oh my god I only do 10% of what's on the slide right now I don't",
    "start": "1040880",
    "end": "1047178"
  },
  {
    "text": "think anyone is doing all of these things but Charlie's help you focus your efforts and figure out how to best mitigate the risks in your pipeline and",
    "start": "1047179",
    "end": "1053150"
  },
  {
    "text": "since there is so much to take on in practice what should we do to implement these and what tool should we use",
    "start": "1053150",
    "end": "1059870"
  },
  {
    "text": "let's have a look at what's available to us today and what's coming tomorrow now",
    "start": "1059870",
    "end": "1067200"
  },
  {
    "text": "this should be caveated much of this tooling is still under active development but we'll go through and",
    "start": "1067200",
    "end": "1072809"
  },
  {
    "text": "have a look at them all in some detail so of course a registry is required to",
    "start": "1072809",
    "end": "1079290"
  },
  {
    "text": "hold base and application images docker hub is the biggest of these however it",
    "start": "1079290",
    "end": "1084960"
  },
  {
    "text": "no longer runs vulnerability scanning but other private registries do now",
    "start": "1084960",
    "end": "1090630"
  },
  {
    "text": "there's always some discussion over Alpine vs. Debian based images however whatever you use make its consistence as",
    "start": "1090630",
    "end": "1098190"
  },
  {
    "text": "base images share storage at rest and copy-on-write memory at runtime ensure",
    "start": "1098190",
    "end": "1104340"
  },
  {
    "text": "that you have proper access control and key rotation for auth to your registry",
    "start": "1104340",
    "end": "1109610"
  },
  {
    "text": "next up code updates there are two main projects in the code update space and no",
    "start": "1109610",
    "end": "1114690"
  },
  {
    "text": "tightly related both tough and notary are CN CF projects tough which stands for the update framework is a secure",
    "start": "1114690",
    "end": "1121830"
  },
  {
    "text": "distribution mechanism for signing software package updates for example when you update an app on your phone your OS will tell you hey we have an",
    "start": "1121830",
    "end": "1129120"
  },
  {
    "text": "update time to download a new version you know please update before performs the update though it verifies that that",
    "start": "1129120",
    "end": "1135120"
  },
  {
    "text": "update came from a valid source and that works in a closed OS in a closed system like your phone os where everything goes",
    "start": "1135120",
    "end": "1141059"
  },
  {
    "text": "through a central store however for your application code you're pulling from it for many different github repos and you",
    "start": "1141059",
    "end": "1147480"
  },
  {
    "text": "can't necessarily do that same kind of check so that's what tough is trying to address notary is just a specific",
    "start": "1147480",
    "end": "1152970"
  },
  {
    "text": "implementation of tough for container images since more and more applications are being containerized organizations",
    "start": "1152970",
    "end": "1158850"
  },
  {
    "text": "will more freely receive containers to run rather than arbitrary binaries to run notary helps verify that updates to",
    "start": "1158850",
    "end": "1164549"
  },
  {
    "text": "these container images are legitimate before you apply them in your infrastructure and this isn't the only reference implementation for example",
    "start": "1164549",
    "end": "1171299"
  },
  {
    "text": "there's also an implication of tough for over-the-air automobile updates called obtain so let's look at tough a little",
    "start": "1171299",
    "end": "1177240"
  },
  {
    "text": "bit more tough helps developers maintain the security of a software system update even against attackers that compromise",
    "start": "1177240",
    "end": "1183510"
  },
  {
    "text": "the repository or signing keys it's just a framework so it's a spec plus a few reference implementations now what kinds",
    "start": "1183510",
    "end": "1190950"
  },
  {
    "text": "of potential you know threats and texts we actually see two software updates while an attacker might try to",
    "start": "1190950",
    "end": "1196110"
  },
  {
    "text": "install arbitrary software in your system by tricking you into downloading the wrong file that's what people are the most worried about I think but they",
    "start": "1196110",
    "end": "1202290"
  },
  {
    "text": "can also create a malicious mirror to prevent a real update or forced you to download an older unpatched version of",
    "start": "1202290",
    "end": "1207420"
  },
  {
    "text": "the software a software update can then be considered more secure if according",
    "start": "1207420",
    "end": "1212910"
  },
  {
    "text": "to the tough spec it knows about the latest available updates in a timely manner any files that it downloads are",
    "start": "1212910",
    "end": "1219600"
  },
  {
    "text": "the correct files and moreover no harm results from checking or downloading files so tuff works by providing package",
    "start": "1219600",
    "end": "1226830"
  },
  {
    "text": "signing and creates a signed metadata file using a key fine there's nothing particularly innovative in the security",
    "start": "1226830",
    "end": "1231930"
  },
  {
    "text": "space plus a secure key distribution mechanism the main concept to understand",
    "start": "1231930",
    "end": "1237000"
  },
  {
    "text": "about tuff is that it uses a key hierarchy so it has a root key which is trusted and then you then derive from",
    "start": "1237000",
    "end": "1243300"
  },
  {
    "text": "that root key other keys and delegate trust to those if you know how certificate authorities work for the public web it's kind of like that you",
    "start": "1243300",
    "end": "1249210"
  },
  {
    "text": "have a root C of the internet that signs intermediate CAS and those CAS end sign search for individual individual",
    "start": "1249210",
    "end": "1255030"
  },
  {
    "text": "websites instead of digging more into tough let's instead look at the specifics for notaries since it's easier",
    "start": "1255030",
    "end": "1260160"
  },
  {
    "text": "to understand for containers specifically notary is an implementation of tough for containers that signs and",
    "start": "1260160",
    "end": "1268230"
  },
  {
    "text": "validates images when clients upload new metadata files the notary server checks them against",
    "start": "1268230",
    "end": "1274350"
  },
  {
    "text": "any previous versions for conflicts and verifies the signatures checksums and validity of the uploaded metadata notary",
    "start": "1274350",
    "end": "1283200"
  },
  {
    "text": "implements various recommendations from the tough framework including survivable key compromise and signing delegation",
    "start": "1283200",
    "end": "1289890"
  },
  {
    "text": "which essentially just means key delegation so best practices store the",
    "start": "1289890",
    "end": "1295590"
  },
  {
    "text": "most crucial key which is the GPT master key offline this makes it very difficult",
    "start": "1295590",
    "end": "1301350"
  },
  {
    "text": "for bursaries to compromise the trust chain and trust delegation allows for",
    "start": "1301350",
    "end": "1307110"
  },
  {
    "text": "very prompt key rotation one could for example rotate CI keys every month for",
    "start": "1307110",
    "end": "1313230"
  },
  {
    "text": "every week on to pipeline master data there is a lot of metadata about",
    "start": "1313230",
    "end": "1319740"
  },
  {
    "text": "artifacts and deployments generated in a pipeline we generally discard",
    "start": "1319740",
    "end": "1326040"
  },
  {
    "text": "but if we keep this information we can use it to make decisions and report on",
    "start": "1326040",
    "end": "1331440"
  },
  {
    "text": "policy as well as the efficiency and efficacy of the pipeline should we allow",
    "start": "1331440",
    "end": "1337980"
  },
  {
    "text": "builds that depend upon vulnerable components untested code that come from untested sources trusted sources excuse",
    "start": "1337980",
    "end": "1345210"
  },
  {
    "text": "me or are of unknown provenance so one",
    "start": "1345210",
    "end": "1350280"
  },
  {
    "text": "project must face is graph a which is an open source project to audit and governs software supply chain and you can use it",
    "start": "1350280",
    "end": "1356429"
  },
  {
    "text": "to track information like versioning and vulnerabilities as part of your container registry it's just a",
    "start": "1356429",
    "end": "1361590"
  },
  {
    "text": "structured metadata API it's a key value store plus the verification of the the data in that store Griffis stores",
    "start": "1361590",
    "end": "1368610"
  },
  {
    "text": "metadata about artifacts like images and information about those artifacts likelike vulnerabilities you don't need",
    "start": "1368610",
    "end": "1375120"
  },
  {
    "text": "to only use one source of metadata either you can have multiple providers so vulnerability scanners for example",
    "start": "1375120",
    "end": "1380790"
  },
  {
    "text": "can each write their own results some metadata providers include J frog Red Hat core OS IBM block Duck twist lock",
    "start": "1380790",
    "end": "1388530"
  },
  {
    "text": "and aqua as your software supply chain grows or evolves you can just add additional providers so then the real",
    "start": "1388530",
    "end": "1395280"
  },
  {
    "text": "benefit occur for us is that all of your metadata sits in one place you can query across all of this metadata in real time",
    "start": "1395280",
    "end": "1401400"
  },
  {
    "text": "this lets you answer interesting information about your images like if they're currently affected by any recently discovered vulnerabilities if",
    "start": "1401400",
    "end": "1408179"
  },
  {
    "text": "you see I always come back to the same point like am i affect it that's always the question that people have so the",
    "start": "1408179",
    "end": "1413370"
  },
  {
    "text": "group phase API has a few key concepts let's just go through these quickly a note is the definition of something that",
    "start": "1413370",
    "end": "1419460"
  },
  {
    "text": "can be found or detected through analysis it's like a note that you'd scribble in the margin of a book think of them as the dictionary of things that",
    "start": "1419460",
    "end": "1426030"
  },
  {
    "text": "Griffis knows about there are schemas for various predefined types of notes",
    "start": "1426030",
    "end": "1431340"
  },
  {
    "text": "and these include package so which packages are installed vulnerabilities where are there known vulnerabilities",
    "start": "1431340",
    "end": "1436890"
  },
  {
    "text": "discovery what type of analysis has happened for example a scan builds what",
    "start": "1436890",
    "end": "1441900"
  },
  {
    "text": "source was built from and who built it in which builder was used image bases",
    "start": "1441900",
    "end": "1446910"
  },
  {
    "text": "which base image was used deployment history when was it deployed by whom and",
    "start": "1446910",
    "end": "1452010"
  },
  {
    "text": "where and at a station which is how policy requirements been met all together this gives you a pretty good",
    "start": "1452010",
    "end": "1457980"
  },
  {
    "text": "idea of the security properties of your image an occurrence is the instance of a note it's when you",
    "start": "1457980",
    "end": "1464460"
  },
  {
    "text": "write new data to a note it might be the building of an artifact the discovery will evolve the discovery of a",
    "start": "1464460",
    "end": "1469590"
  },
  {
    "text": "vulnerability or the running of a scan a provider is a source of metadata it's something like a scanning tool or maybe",
    "start": "1469590",
    "end": "1476220"
  },
  {
    "text": "a teammate organization that wrote the note a project is the namespace for metadata notes belong to provider",
    "start": "1476220",
    "end": "1482490"
  },
  {
    "text": "projects so they belong to the scanner whereas occurrences belong to user projects think of this kind of like an",
    "start": "1482490",
    "end": "1488310"
  },
  {
    "text": "index in a book so the user project is the index and the provider project is the book or books each book contains a",
    "start": "1488310",
    "end": "1495570"
  },
  {
    "text": "lot of details about a particular topic and might get updated over time as new editions are published the index job is",
    "start": "1495570",
    "end": "1502080"
  },
  {
    "text": "to say oh there's a new there's some more information on that let me update that reference for you and record that information note that I only briefly",
    "start": "1502080",
    "end": "1509430"
  },
  {
    "text": "mentioned out of stations they aren't really parallel to notes or occurrences but are actually part of these items an",
    "start": "1509430",
    "end": "1514830"
  },
  {
    "text": "attestation is a cryptographic signature that allows for verification of these pieces the goal of signing the data is",
    "start": "1514830",
    "end": "1520680"
  },
  {
    "text": "that you can then verify it to ensure that it hasn't been tempered with this is just a GPG signed piece of information stored as metadata interface",
    "start": "1520680",
    "end": "1527370"
  },
  {
    "text": "and a verification time you use a public key to verify that the signature is the correct one in toto is a framework to",
    "start": "1527370",
    "end": "1537810"
  },
  {
    "text": "provide whole software supply chain security it provides tooling and metadata and the metadata format to",
    "start": "1537810",
    "end": "1545130"
  },
  {
    "text": "ensure that all steps are performed by the right party follow the expected",
    "start": "1545130",
    "end": "1550350"
  },
  {
    "text": "policy use the right artifacts and report the artifacts that were produced",
    "start": "1550350",
    "end": "1556460"
  },
  {
    "text": "its core configuration primitive is a layout layouts define what can be done",
    "start": "1556460",
    "end": "1562440"
  },
  {
    "text": "by whom what to use what to produce and what policy to follow in total layouts",
    "start": "1562440",
    "end": "1570090"
  },
  {
    "text": "are cryptographically signed by a manager to prevent tampering or circumvention in addition to that",
    "start": "1570090",
    "end": "1577770"
  },
  {
    "text": "manager or project owner there are additional in toto parties functionary",
    "start": "1577770",
    "end": "1584040"
  },
  {
    "text": "to enact a step or build stage and produce cryptographic evidence and a",
    "start": "1584040",
    "end": "1590070"
  },
  {
    "text": "verified to ensure the functionaries output matches the specification in the layout",
    "start": "1590070",
    "end": "1596670"
  },
  {
    "text": "finally links are used to record information about the execution environment and these links are",
    "start": "1596670",
    "end": "1602710"
  },
  {
    "text": "cryptographically signed by the party who performed the action the",
    "start": "1602710",
    "end": "1607930"
  },
  {
    "text": "verification step checks for compliance using link and layout method data and this verification can be done in many",
    "start": "1607930",
    "end": "1614290"
  },
  {
    "text": "steps as you see continuously upon installation when a package is installed",
    "start": "1614290",
    "end": "1619600"
  },
  {
    "text": "or before deployment in the kubernetes admission control flow compare these",
    "start": "1619600",
    "end": "1625780"
  },
  {
    "text": "projects Gracias has a strict API schema which means you can't store freeform metadata but it covers many types of",
    "start": "1625780",
    "end": "1633520"
  },
  {
    "text": "notes including the attestation notes which can be used to attest to arbitrary",
    "start": "1633520",
    "end": "1639100"
  },
  {
    "text": "events or notes on the other hand in toto is more adaptable and supports",
    "start": "1639100",
    "end": "1645220"
  },
  {
    "text": "unstructured or freeform data it can use various storage backends or metadata",
    "start": "1645220",
    "end": "1650350"
  },
  {
    "text": "transports and importantly can chain together after stations to assert the",
    "start": "1650350",
    "end": "1657280"
  },
  {
    "text": "sequence of a whole supply chain work has been done to integrate these two",
    "start": "1657280",
    "end": "1662500"
  },
  {
    "text": "projects together and they may end up converging around some elements of their specifications so now let's talk about",
    "start": "1662500",
    "end": "1669670"
  },
  {
    "text": "let's look at vulnerability scanning so image is vulnerability scanning is meant to detect potential issues with your",
    "start": "1669670",
    "end": "1675880"
  },
  {
    "text": "container image what's actually possible to detect it depends on how deep you go in that scanning so what depth the tool",
    "start": "1675880",
    "end": "1681309"
  },
  {
    "text": "you use to gets to more in depth tools will scan OS distribution packages application library packages",
    "start": "1681309",
    "end": "1688179"
  },
  {
    "text": "note that for these sometimes there's a paid at feed for that from the building but from the application so if your",
    "start": "1688179",
    "end": "1694150"
  },
  {
    "text": "scanner that hasn't purchased it you might not be covered compressed formats like jars bars and tars potentially",
    "start": "1694150",
    "end": "1700090"
  },
  {
    "text": "malicious code like malware root kits and back doors and miss configurations like secrets and code expose ports and",
    "start": "1700090",
    "end": "1705880"
  },
  {
    "text": "file system properties recall that your container image is actually made up of layers right so when you build your",
    "start": "1705880",
    "end": "1711070"
  },
  {
    "text": "image you're essentially just generating files by running successive commands Union mount is a way of combining a",
    "start": "1711070",
    "end": "1716590"
  },
  {
    "text": "bunch of file directories into a single directory that shows all of the content so for containers you would actually see",
    "start": "1716590",
    "end": "1721810"
  },
  {
    "text": "all the files until you're together rather than layer by layer there are two main approaches to image scanning you",
    "start": "1721810",
    "end": "1727929"
  },
  {
    "text": "either scan each layer individually layer by layer or you look only at the top layer of the unit FS filesystem",
    "start": "1727929",
    "end": "1733779"
  },
  {
    "text": "which takes all the files together using the latest version in both cases though",
    "start": "1733779",
    "end": "1738999"
  },
  {
    "text": "phone scanning generally works by comparing the hash of a particular package to an own package and seeing if",
    "start": "1738999",
    "end": "1744909"
  },
  {
    "text": "it has any known vulnerabilities most of the vulnerability information comes from the same cbss database but a particular",
    "start": "1744909",
    "end": "1751570"
  },
  {
    "text": "vendor might override some of the scoring based on additional information that they have the best scanners will",
    "start": "1751570",
    "end": "1756789"
  },
  {
    "text": "analyze multiple sources and will work heavily on refining false positives this",
    "start": "1756789",
    "end": "1762070"
  },
  {
    "text": "is a really critical step like if I was gonna start somewhere from today's talk I would probably start here because most",
    "start": "1762070",
    "end": "1767529"
  },
  {
    "text": "of the attacks that occur in the wild or just drive-by attacks right there are people who are looking for deployments with known foreign abilities and I'm not",
    "start": "1767529",
    "end": "1773919"
  },
  {
    "text": "talking about zero-day attacks I'm talking about things that have been around for years left unpatched so",
    "start": "1773919",
    "end": "1779289"
  },
  {
    "text": "patching no matter how unsexy the idea is it's what really helps protects you against some of these potential attacks",
    "start": "1779289",
    "end": "1785489"
  },
  {
    "text": "so if you're gonna do this what are some of the options you have there are three widely used open source phone scanners a",
    "start": "1785489",
    "end": "1791829"
  },
  {
    "text": "core West Clare aqua micros canner and encore open source engine as you'll notice none of these are standalone",
    "start": "1791829",
    "end": "1797859"
  },
  {
    "text": "projects but owned by companies with other offerings in the space like a paid scanner first off Clare lets you create an index",
    "start": "1797859",
    "end": "1804309"
  },
  {
    "text": "of container images and the features in them and then query a central vulnerability database for any",
    "start": "1804309",
    "end": "1809619"
  },
  {
    "text": "information with those features it's the same hash and compare I you know I was describing before images are only",
    "start": "1809619",
    "end": "1815109"
  },
  {
    "text": "scanned at ingest time which means that when new vulnerabilities are updated in the database you don't have to rescan",
    "start": "1815109",
    "end": "1820629"
  },
  {
    "text": "the image you can compare it to existing image dance project Harbert that was announces in the CNC F project yesterday",
    "start": "1820629",
    "end": "1826450"
  },
  {
    "text": "uses Clair for vulnerability scanning microscope looks a little bit differently it runs as part of a",
    "start": "1826450",
    "end": "1832719"
  },
  {
    "text": "container image build as an executable in your docker file if your image has any known high severity issue Microscan",
    "start": "1832719",
    "end": "1839289"
  },
  {
    "text": "err can actually fail the image built which makes it easy to include as a step in your CI CD pipeline lastly encore open source engine is",
    "start": "1839289",
    "end": "1846519"
  },
  {
    "text": "closer and designed to Claire it's a platform that includes a database of vulnerability information for images it",
    "start": "1846519",
    "end": "1852429"
  },
  {
    "text": "runs as a separate container in your environment your infrastructure and creates a searchable list of all the packages",
    "start": "1852429",
    "end": "1857620"
  },
  {
    "text": "files and software artifacts such as ruby gems and nodejs modules in your environment and finally admission",
    "start": "1857620",
    "end": "1866500"
  },
  {
    "text": "control an admission controller in cuba Nettie's is a piece of code that intercepts requests the cuban SS api",
    "start": "1866500",
    "end": "1873700"
  },
  {
    "text": "server after the request is authenticated and authorized there are",
    "start": "1873700",
    "end": "1879580"
  },
  {
    "text": "two types of admission controller and kubernetes mutating and validating or both and you taking controllers modify",
    "start": "1879580",
    "end": "1888430"
  },
  {
    "text": "object content whereas validating controllers verify their output so you",
    "start": "1888430",
    "end": "1894550"
  },
  {
    "text": "might run multiple mission controllers together if any controller rejects the request an error is returned to the",
    "start": "1894550",
    "end": "1901030"
  },
  {
    "text": "end-user and there are a whole bunch of these admission controllers not necessarily related to security in",
    "start": "1901030",
    "end": "1907590"
  },
  {
    "text": "general admission controllers decide whether you shall or shall not pass",
    "start": "1907590",
    "end": "1914490"
  },
  {
    "text": "kritis is cuba Nettie's admission controller that can block builds based on policy it has a policy engine to test",
    "start": "1914490",
    "end": "1922360"
  },
  {
    "text": "assertions before deploying containers into cuban s's and this ensures build vulnerability scanning before deployment",
    "start": "1922360",
    "end": "1928929"
  },
  {
    "text": "or can continuously verify deployed images at vulnerabilities are updated and verified build provenance before",
    "start": "1928929",
    "end": "1937120"
  },
  {
    "text": "deployment cluster administrators manually attest this image is okay to",
    "start": "1937120",
    "end": "1942400"
  },
  {
    "text": "use or it has been verified and quitters will then only allow pods that have been verified to access the cluster at",
    "start": "1942400",
    "end": "1950650"
  },
  {
    "text": "present krisis is not usable outside of GCP but work is underway to make this",
    "start": "1950650",
    "end": "1956350"
  },
  {
    "text": "application more generic here is an image security policy example we see",
    "start": "1956350",
    "end": "1961750"
  },
  {
    "text": "whitelist images that are latest or certain digests will block admission",
    "start": "1961750",
    "end": "1966880"
  },
  {
    "text": "here if the max vulnerability severity is too high in the attestation we've have in Chris's and we can ignore",
    "start": "1966880",
    "end": "1974140"
  },
  {
    "text": "certain whitelisted CVEs that may not be applicable to our runtime environment porty eros is another admission",
    "start": "1974140",
    "end": "1980650"
  },
  {
    "text": "controller this time for notary and this enforces content trust again at",
    "start": "1980650",
    "end": "1986350"
  },
  {
    "text": "deployment time into the cluster we can apply different levels of trusts for different images and mutating",
    "start": "1986350",
    "end": "1993270"
  },
  {
    "text": "admission webhook ensures that kubernetes pulls the signed version of the image",
    "start": "1993270",
    "end": "1999000"
  },
  {
    "text": "this enforces trust pinning and blocks the creation of resources are using untrusted images right now this supports",
    "start": "1999000",
    "end": "2006440"
  },
  {
    "text": "the IBM Cloud container registry key dot IO and docker hub although again work is",
    "start": "2006440",
    "end": "2011960"
  },
  {
    "text": "being done to make this more generic and other integrations are on the horizon so",
    "start": "2011960",
    "end": "2018710"
  },
  {
    "text": "to bring it all together and to get those photos you missed earlier an ideal software supply chain has security across five elements that we described",
    "start": "2018710",
    "end": "2025010"
  },
  {
    "text": "today base image code build application image and deploy minimal base images to",
    "start": "2025010",
    "end": "2031130"
  },
  {
    "text": "let you limit the surface of attack scan your code for potential security issues complete formal security reviews and",
    "start": "2031130",
    "end": "2036650"
  },
  {
    "text": "understand your dependencies build your image in a hermetic reproducible way once it's built scan your application",
    "start": "2036650",
    "end": "2043610"
  },
  {
    "text": "images for vulnerabilities in misconfigurations and at deployment time enforce any specific requirements you have using the",
    "start": "2043610",
    "end": "2049669"
  },
  {
    "text": "choke point provided by containers when something changes like a new vulnerability is discovered in a package",
    "start": "2049669",
    "end": "2054950"
  },
  {
    "text": "that you're using you can go back to earlier in the supply chain rebuild and redeploy the image to fix the issue",
    "start": "2054950",
    "end": "2061750"
  },
  {
    "text": "so the state of ecosystem docker hub provides official base images that we",
    "start": "2061750",
    "end": "2067610"
  },
  {
    "text": "can trust tuff protects automatic software deployments for attack and",
    "start": "2067610",
    "end": "2072620"
  },
  {
    "text": "makes them more resilient to compromised notary users tough to secure docker",
    "start": "2072620",
    "end": "2077870"
  },
  {
    "text": "image distribution from registries guaranteeing correctness and freshness the face holds information about your",
    "start": "2077870",
    "end": "2085669"
  },
  {
    "text": "systems compliance and risk state in toto secures build steps with",
    "start": "2085669",
    "end": "2090889"
  },
  {
    "text": "cryptographic metadata enhancing accountability of the individuals involved in the chain and the ordering",
    "start": "2090890",
    "end": "2096950"
  },
  {
    "text": "of their actions claire micro scanner and core and friends are essential to prevent known CVS being pushed to",
    "start": "2096950",
    "end": "2104090"
  },
  {
    "text": "production and you can protect your clusters at deployment time with admission control quizzes in toto",
    "start": "2104090",
    "end": "2110420"
  },
  {
    "text": "porty Eris and cube Seck and live a happy fulfilled life ahead of your vulnerabilities and secure forever thank",
    "start": "2110420",
    "end": "2119360"
  },
  {
    "text": "you very much [Applause]",
    "start": "2119360",
    "end": "2126260"
  }
]