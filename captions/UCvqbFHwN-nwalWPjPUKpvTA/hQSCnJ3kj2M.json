[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hello everyone my name is Fernando Maggio and I'm gonna talk about testing so a bit about me I'm the CTO and",
    "start": "30",
    "end": "7500"
  },
  {
    "text": "founder of a start-up called undefined labs or undefined labs we build tools for developers to make them more",
    "start": "7500",
    "end": "12809"
  },
  {
    "text": "efficient and we are focusing right now on solving the issue of testing complex",
    "start": "12809",
    "end": "18510"
  },
  {
    "text": "micro-services previously I co-founded another company called to them that was a container management platform and that",
    "start": "18510",
    "end": "24660"
  },
  {
    "text": "was acquired by doctor in 2015 where I spent a couple of years so as enough for",
    "start": "24660",
    "end": "30029"
  },
  {
    "text": "today is going to be first why testing and why testing is cool and you should do it why testing microservice is so hard a",
    "start": "30029",
    "end": "37129"
  },
  {
    "text": "bit about testing in production and different techniques that we can use to test directly in the production",
    "start": "37129",
    "end": "42989"
  },
  {
    "text": "environment and how can we use the distributed context propagation system of tracing in order to help with that",
    "start": "42989",
    "end": "49550"
  },
  {
    "text": "so the beginning machine production using our ability tools is great right we're all here because of that but it",
    "start": "49550",
    "end": "56789"
  },
  {
    "text": "should be really our last resort we shouldn't be using that every day it only it should only happen a few times",
    "start": "56789",
    "end": "62629"
  },
  {
    "text": "in the month why because solving an issue in production is extremely expensive if you",
    "start": "62629",
    "end": "69420"
  },
  {
    "start": "66000",
    "end": "66000"
  },
  {
    "text": "are solving an issue in production you have to think about all these costs so first is the detection cost can you",
    "start": "69420",
    "end": "75570"
  },
  {
    "text": "detect that your application is not behaving as I suspected you might be able to detect a spike in",
    "start": "75570",
    "end": "82259"
  },
  {
    "text": "latency and a spike in a row right but do you do you know if it's actually returning the right thing then it's",
    "start": "82259",
    "end": "87900"
  },
  {
    "text": "travel should in it have you added the right instrumentation in order to be able to troubleshoot that issue do you",
    "start": "87900",
    "end": "93360"
  },
  {
    "text": "have the right sampling do you have the right attention how much does it cost to store an analyzer all data for",
    "start": "93360",
    "end": "99509"
  },
  {
    "text": "troubleshooting then is the fixing course can any rollback I'm fixed are temporarily do I have to",
    "start": "99509",
    "end": "105479"
  },
  {
    "text": "roll forward we have to come up with a hot fix do I have the people that can do that so I have to clean up any data",
    "start": "105479",
    "end": "112200"
  },
  {
    "text": "stores that have been poisoned verification codes can I even verify that the fix actually fix the issue or",
    "start": "112200",
    "end": "119340"
  },
  {
    "text": "do we have to ask a user to basically verify it for me then is the user impact",
    "start": "119340",
    "end": "124590"
  },
  {
    "text": "course of course if you're debugging an issue in production is because some users have been impacted so how many for how long how much money have we lost how",
    "start": "124590",
    "end": "131220"
  },
  {
    "text": "much impact has our brand reputation had and it's also in TV burnout so",
    "start": "131220",
    "end": "137050"
  },
  {
    "text": "someone will get page because of this so we want to reduce those pages at a",
    "start": "137050",
    "end": "142660"
  },
  {
    "text": "minimum so as hitches get closer to the end user they are more expensive to",
    "start": "142660",
    "end": "148540"
  },
  {
    "text": "solve so how can we avoid that well there's a thing called testing that is",
    "start": "148540",
    "end": "154330"
  },
  {
    "text": "actually it will actually help with that so testing is available using the risk of your application not performing as",
    "start": "154330",
    "end": "161170"
  },
  {
    "text": "expected at the lowest possible cost so it's about reducing the risk because the thing will never be able to tell you",
    "start": "161170",
    "end": "167080"
  },
  {
    "text": "that your application 100% correct that's impossible but it's going to be able to reduce that that risk in a very",
    "start": "167080",
    "end": "172570"
  },
  {
    "text": "cost-efficient way and it's about reducing the risk of your application not yet forming a suspected not",
    "start": "172570",
    "end": "178510"
  },
  {
    "text": "performing a suspect that means robustness so that will be probably hitting your error rate as allows",
    "start": "178510",
    "end": "184200"
  },
  {
    "text": "performance will probably be some latency as allows and correctness is about your application returning the",
    "start": "184200",
    "end": "191260"
  },
  {
    "text": "right thing which is not so obvious so in the monolith era testing was was",
    "start": "191260",
    "end": "197739"
  },
  {
    "start": "195000",
    "end": "195000"
  },
  {
    "text": "great it was easy it was good times we had a three-tier architecture for example I'm developing the back-end",
    "start": "197739",
    "end": "203980"
  },
  {
    "text": "service so I could really replicate this stack anywhere in my laptop in seei stage in production I can run a few unit",
    "start": "203980",
    "end": "210670"
  },
  {
    "text": "tests integration tests internet I can run all this even in my laptop and then in production be taking and several",
    "start": "210670",
    "end": "217750"
  },
  {
    "text": "shooting issues was releases just monitoring some metrics using some logs to to troubleshoot what the problem is",
    "start": "217750",
    "end": "224400"
  },
  {
    "text": "so it was relatively easy but in the era of microservices this we can't have any",
    "start": "224400",
    "end": "231130"
  },
  {
    "start": "227000",
    "end": "227000"
  },
  {
    "text": "more complex now I'm the service owner of this little box that is part of our greater application and a greater thing",
    "start": "231130",
    "end": "236709"
  },
  {
    "text": "I still have to test that service in isolation I still have to to be able to",
    "start": "236709",
    "end": "241989"
  },
  {
    "text": "make sure that it's correct I can run unit tests I can run integration tests",
    "start": "241989",
    "end": "247120"
  },
  {
    "text": "but now because I don't have access to my time streams I cannot replicate them I can replicate the over architecture",
    "start": "247120",
    "end": "253209"
  },
  {
    "text": "that we saw before I'm forced to use mocks to could use contract tests to use",
    "start": "253209",
    "end": "258340"
  },
  {
    "text": "traffic replays and all these techniques in order to isolate my testing from my down streams and then we throw that",
    "start": "258340",
    "end": "265030"
  },
  {
    "text": "service to production we have now traced into the travel siliceous which is great but we have",
    "start": "265030",
    "end": "271000"
  },
  {
    "text": "created we have created a wide gap between the environment where my service is being tested and the matter man where",
    "start": "271000",
    "end": "278080"
  },
  {
    "text": "my service is actually running and actually serving request so that gap creates a big risk so if we can along",
    "start": "278080",
    "end": "286780"
  },
  {
    "text": "the replicate production because you know it's it's not the number of services that we have in production",
    "start": "286780",
    "end": "291810"
  },
  {
    "text": "configuration SSL certificate traffic patterns scale data release cadence so",
    "start": "291810",
    "end": "297460"
  },
  {
    "text": "different teams will release services at different times and that's very very hard to replicate in any environment",
    "start": "297460",
    "end": "302740"
  },
  {
    "text": "less directly the simple action but before we get too excited about that let",
    "start": "302740",
    "end": "309580"
  },
  {
    "text": "me say that production testing is not a replacement for people reduction testing we should still test in pre-production",
    "start": "309580",
    "end": "316210"
  },
  {
    "text": "before release into production it's much cheaper and we can do that in an",
    "start": "316210",
    "end": "321700"
  },
  {
    "text": "automated way so think about testing in production as another technique that you can use next",
    "start": "321700",
    "end": "327639"
  },
  {
    "text": "to pre-production testing and that it requires investment to do it right so testing production is not free is not",
    "start": "327639",
    "end": "333550"
  },
  {
    "text": "shipping my code to production and see what happens we actually have to call for it we actually have to do some",
    "start": "333550",
    "end": "338620"
  },
  {
    "text": "investment to do it right so when we think about testing in production we think about many techniques and that we",
    "start": "338620",
    "end": "345039"
  },
  {
    "text": "can apply to to make sure that our application works as expected when deployed in production so it goes from",
    "start": "345039",
    "end": "353320"
  },
  {
    "text": "the moment we deploy the new service and that service is running in production but not serving any real user traffic to",
    "start": "353320",
    "end": "360729"
  },
  {
    "text": "the point where that new service is actually handling a hundred percent of user traffic between those two points we",
    "start": "360729",
    "end": "367060"
  },
  {
    "text": "have a number of techniques that you might be familiar with in order to make",
    "start": "367060",
    "end": "372160"
  },
  {
    "text": "sure that our application is behaving as expected at any point in that process so",
    "start": "372160",
    "end": "378700"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "this all these techniques have some risks in common so the first one is user",
    "start": "378700",
    "end": "383950"
  },
  {
    "text": "impact if you are testing directly in production you have to make sure that that users are not affected or the",
    "start": "383950",
    "end": "389320"
  },
  {
    "text": "minimum amount of users are affected the second one is stay poisoning if you are releasing an untested version of your",
    "start": "389320",
    "end": "396099"
  },
  {
    "text": "application in production and you start throwing tests against that you have the risk of poisoning your data stores so then",
    "start": "396099",
    "end": "402460"
  },
  {
    "text": "you have to be able to clean them up if if something goes wrong which is not easy traffic saturation if we do load test",
    "start": "402460",
    "end": "409660"
  },
  {
    "text": "and stress test and gas production we can actually separate the user traffic and we can actually cause an outage",
    "start": "409660",
    "end": "416490"
  },
  {
    "text": "telemetry they tes Q so if we testing production and we have these versions of",
    "start": "416490",
    "end": "421600"
  },
  {
    "text": "our applications that are being tested we also have the risk of polluting our telemetry data so now we won't be able",
    "start": "421600",
    "end": "427840"
  },
  {
    "text": "to differentiate between what telemetry data is related to end-user traffic handling and what is related to test",
    "start": "427840",
    "end": "435310"
  },
  {
    "text": "traffic and because of that we have we can have misfire alerts so if we have a lead from this telemetry data we might",
    "start": "435310",
    "end": "442030"
  },
  {
    "text": "fire pages based on tests that go wrong so in order to mitigate all this risk we",
    "start": "442030",
    "end": "448420"
  },
  {
    "text": "have to make sure that our application is aware of tests being made in production so imagine for a moment that",
    "start": "448420",
    "end": "455080"
  },
  {
    "start": "454000",
    "end": "454000"
  },
  {
    "text": "we have a way to label every request that goes into our production application with a test label so it can",
    "start": "455080",
    "end": "463060"
  },
  {
    "text": "flow through our application and every service and every router or the routing layer will be aware of of those requests",
    "start": "463060",
    "end": "469900"
  },
  {
    "text": "being test requests will that solve the problem if we go to the to the risks we",
    "start": "469900",
    "end": "477610"
  },
  {
    "text": "have for example user impact how can we mitigate the user impact risk by using this label well if we use this label we",
    "start": "477610",
    "end": "483100"
  },
  {
    "text": "can actually be able to test services before they are released to users if I",
    "start": "483100",
    "end": "488410"
  },
  {
    "text": "were routing layer is able to differentiate between test requests and and user requests we can actually detect",
    "start": "488410",
    "end": "493570"
  },
  {
    "text": "those requests to services that are not receiving any end user traffic State",
    "start": "493570",
    "end": "499960"
  },
  {
    "text": "poisoning if our services are aware of test traffic they can actually handle that appropriately so for example",
    "start": "499960",
    "end": "506220"
  },
  {
    "text": "stateful services that need to write data can do so with a flag or offend database or even in table in order to",
    "start": "506220",
    "end": "513010"
  },
  {
    "text": "separate that test data from the actual end user data traffic saturation if we",
    "start": "513010",
    "end": "518620"
  },
  {
    "text": "do load test and stress test against production and we can label those requests as test requests we can make",
    "start": "518620",
    "end": "524140"
  },
  {
    "text": "sure that our routing layer can apply quality of service rules to that traffic so we can for example have less priority",
    "start": "524140",
    "end": "530620"
  },
  {
    "text": "for this request have rate limiting or even kill it if there's something going on in production and we want to stop all the load testing",
    "start": "530620",
    "end": "537490"
  },
  {
    "text": "production let the limited as data skew so we can mark all that elementary data",
    "start": "537490",
    "end": "542620"
  },
  {
    "text": "that we produce or metric loss and faces that come from test requests as test",
    "start": "542620",
    "end": "548079"
  },
  {
    "text": "telemetry so we can then later on use that label to differentiate to how different dashboards for what the end",
    "start": "548079",
    "end": "554649"
  },
  {
    "text": "user traffic telemetry looks like and the testing traffic coming because of",
    "start": "554649",
    "end": "560230"
  },
  {
    "text": "this we can make sure that our alerts are not fired because of testing telemetry",
    "start": "560230",
    "end": "567620"
  },
  {
    "text": "how can we implement this label this magic label well we have context propagation context propagation allows",
    "start": "567620",
    "end": "574830"
  },
  {
    "text": "us to attach arbitrary metadata to the current requester will be propagated automatically to along the dependencies",
    "start": "574830",
    "end": "581270"
  },
  {
    "text": "observability and and tracing is based on this primitive so context propagation",
    "start": "581270",
    "end": "588090"
  },
  {
    "start": "586000",
    "end": "586000"
  },
  {
    "text": "comes for free with tracing so if you are using up and trace in open sensor for open turn and read you will have conscious propagation Milton he has a",
    "start": "588090",
    "end": "594810"
  },
  {
    "text": "very developer friendly API so the developer can set and get any key values on this context at any point in the",
    "start": "594810",
    "end": "601260"
  },
  {
    "text": "request it's compatible with resin coating so is scope aware so it will",
    "start": "601260",
    "end": "606630"
  },
  {
    "text": "actually attach that context to the thread or coroutine that is handling that request that comes with the library",
    "start": "606630",
    "end": "613590"
  },
  {
    "text": "and it's compatible with multiple synchronous and asynchronous protocols so the context propagation will actually",
    "start": "613590",
    "end": "619170"
  },
  {
    "text": "work through synchronous protocol HTTP and the RPC but it can also be extended to asynchronous protocols like message",
    "start": "619170",
    "end": "625170"
  },
  {
    "text": "queues and we just have to be aware that everything that we add to the context will actually increase the request size",
    "start": "625170",
    "end": "630690"
  },
  {
    "text": "so it will make processing those requests a bit a bit longer so the",
    "start": "630690",
    "end": "636630"
  },
  {
    "text": "current state of context propagation for example in open tracing which is a an API it just defines the context",
    "start": "636630",
    "end": "643590"
  },
  {
    "text": "propagation the arbitrary context propagation has baggage so you can attach package to any request if key",
    "start": "643590",
    "end": "648930"
  },
  {
    "text": "value pairs and because it's just an API that phaser is the one that will actually define how that gets idealized",
    "start": "648930",
    "end": "656160"
  },
  {
    "text": "and deserialize so depending on the vendor and depending on the object register that you use that context will",
    "start": "656160",
    "end": "662970"
  },
  {
    "text": "be propagated using some headers or others or some format or other in open telemetry this is still working progress",
    "start": "662970",
    "end": "669600"
  },
  {
    "text": "but as of this morning he was called disobey the context it's still key value",
    "start": "669600",
    "end": "675300"
  },
  {
    "text": "but now we have some metadata we can attach to to that baggage like TTL this",
    "start": "675300",
    "end": "681690"
  },
  {
    "text": "annotation in this case is done by open telemetry SDK so it will be common",
    "start": "681690",
    "end": "686730"
  },
  {
    "text": "across all vendors and at the moment it's using the w3c standard correlation",
    "start": "686730",
    "end": "694860"
  },
  {
    "text": "context which I'm sure some of you are involving which defines what is the format for serialized in these",
    "start": "694860",
    "end": "701060"
  },
  {
    "text": "these contexts this baggage so at the top we have the format of the trace",
    "start": "701060",
    "end": "706520"
  },
  {
    "text": "context so that's how tracing information will get serialized this is just trace IDs param span ID sampling",
    "start": "706520",
    "end": "713990"
  },
  {
    "text": "information so just trace a specific information and that's actually in curriculum recommendation state and at",
    "start": "713990",
    "end": "721670"
  },
  {
    "text": "the bottom we have the correlation context draft which is how our arbitrary",
    "start": "721670",
    "end": "727370"
  },
  {
    "text": "metadata will get sterilized and as I said this is still working progress but this is the current state so we use this",
    "start": "727370",
    "end": "735590"
  },
  {
    "text": "project propagation technique for propagating tracing information so then we can troubleshoot issues in production",
    "start": "735590",
    "end": "741410"
  },
  {
    "text": "but we can also use it for any other for other things like for example our test traffic level we can use this this",
    "start": "741410",
    "end": "747950"
  },
  {
    "text": "system to mark individual requests as test requests and so we can then act",
    "start": "747950",
    "end": "753860"
  },
  {
    "text": "accordingly we can also use it for fall injection so on every request we can",
    "start": "753860",
    "end": "758990"
  },
  {
    "text": "actually specify instructions for falls in line that will only affect that",
    "start": "758990",
    "end": "765500"
  },
  {
    "text": "request and not an entire node or an entire service we can also attach things like user account information a feature",
    "start": "765500",
    "end": "771650"
  },
  {
    "text": "of life that will go into a bit more detail now so for example if we want to",
    "start": "771650",
    "end": "777860"
  },
  {
    "start": "775000",
    "end": "775000"
  },
  {
    "text": "do integration testing we are developing our service as we see and I have a bunch of dumb stirring dependencies that I",
    "start": "777860",
    "end": "783380"
  },
  {
    "text": "cannot replicate locally because they are too big about the date I don't have the configuration I don't know who who",
    "start": "783380",
    "end": "788570"
  },
  {
    "text": "is developing them so what if we point our service that we are developing locally against production and every",
    "start": "788570",
    "end": "795290"
  },
  {
    "text": "test that we that we make we actually attach a label to that request assess tenancy equals test so I'm marking that",
    "start": "795290",
    "end": "802130"
  },
  {
    "text": "every request I make to my downstreams is a test request so how do we do this as I said the API is very easy so as a",
    "start": "802130",
    "end": "810110"
  },
  {
    "start": "806000",
    "end": "806000"
  },
  {
    "text": "developer I just have to start a trace in my test this is an example using go I",
    "start": "810110",
    "end": "815720"
  },
  {
    "text": "start a trace and then I attach that package to the tracer in this test this trace is a test a test request so this",
    "start": "815720",
    "end": "823340"
  },
  {
    "text": "context will be propagated across all the all the requests are due to my",
    "start": "823340",
    "end": "828500"
  },
  {
    "text": "downstream dependencies now on the downstream dependency side in the server side we have to be able to",
    "start": "828500",
    "end": "834880"
  },
  {
    "start": "832000",
    "end": "832000"
  },
  {
    "text": "handle this request so you might end I have a stateful service and I'm making a request that will actually write some",
    "start": "834880",
    "end": "840400"
  },
  {
    "text": "data so in order to do so this is the first like the simplest way to support",
    "start": "840400",
    "end": "845530"
  },
  {
    "text": "that use case which will be deploying two separate instances of my service one",
    "start": "845530",
    "end": "850690"
  },
  {
    "text": "for handling end-user traffic and another one for handling test traffic and then letting the routing layer be",
    "start": "850690",
    "end": "856960"
  },
  {
    "text": "the one that actually decides where to send the request it will read the correlation context gather and which",
    "start": "856960",
    "end": "863440"
  },
  {
    "text": "okay this is a test request so I will redirect it to the test version of the part of my service and then every",
    "start": "863440",
    "end": "868960"
  },
  {
    "text": "service can have its own datastore so basically you have a new completely separate tenant in production for",
    "start": "868960",
    "end": "874360"
  },
  {
    "text": "testing and another one for initial traffic we can get a bit more sophisticated and we can make our service actually multi-tenant so we can",
    "start": "874360",
    "end": "880960"
  },
  {
    "text": "have the same instance of our service be able to read both end-user traffic and",
    "start": "880960",
    "end": "886060"
  },
  {
    "text": "test traffic and then if the data store doesn't support multi-tenancy we can still write two different databases in",
    "start": "886060",
    "end": "892390"
  },
  {
    "text": "order to separate that that state if we are digester that supports a multi-tenancy we can just have the same",
    "start": "892390",
    "end": "899050"
  },
  {
    "text": "service only one service and one datastore that actually supports multi-tenancy and we can use this",
    "start": "899050",
    "end": "904470"
  },
  {
    "text": "tenancy label to to decide where to store the data where to read the data",
    "start": "904470",
    "end": "909630"
  },
  {
    "text": "and then if we want to test against the actual end user data that is already there in our production environment and",
    "start": "909630",
    "end": "916330"
  },
  {
    "text": "we don't want to start from scratch and I start populating data we can actually make the service so it can read from end",
    "start": "916330",
    "end": "923830"
  },
  {
    "text": "user data but when it right if rise to a different tenant advice to the to the testament",
    "start": "923830",
    "end": "931560"
  },
  {
    "start": "931000",
    "end": "931000"
  },
  {
    "text": "we also have to manage telemetry data so as I said before if you if we don't we",
    "start": "932010",
    "end": "937410"
  },
  {
    "text": "are not careful with this we have telemetry data arrays for both tests and production traffic and real unusual",
    "start": "937410",
    "end": "942660"
  },
  {
    "text": "traffic so we have to be able to mark those metrics and and those traces and logs with that tenant label so this is",
    "start": "942660",
    "end": "949740"
  },
  {
    "text": "an example of go which is an API that is still working progress but the idea is",
    "start": "949740",
    "end": "954960"
  },
  {
    "text": "to for every metric that we create add the tenancy key add the tenancy label so",
    "start": "954960",
    "end": "961800"
  },
  {
    "text": "when we omit matrix as you sorry to request they are actually segregated to",
    "start": "961800",
    "end": "967830"
  },
  {
    "text": "the right tenant they are either end user metrics or test metrics this will allow us later on to build dashboards",
    "start": "967830",
    "end": "974010"
  },
  {
    "text": "that are for end user data or test data and then in order to manage other side",
    "start": "974010",
    "end": "980480"
  },
  {
    "start": "978000",
    "end": "978000"
  },
  {
    "text": "effects that you might have we can just read that tenancy label from the",
    "start": "980480",
    "end": "985880"
  },
  {
    "text": "disability context so for example with this we can actually implement the multi",
    "start": "985880",
    "end": "991100"
  },
  {
    "text": "tenant storage by asking to our tracing",
    "start": "991100",
    "end": "996470"
  },
  {
    "text": "library what is the value for the tenancy in this request so if it's a test tenancy I can actually use the",
    "start": "996470",
    "end": "1003490"
  },
  {
    "text": "testing the test database but also for example using sandbox accounts so if for",
    "start": "1003490",
    "end": "1009190"
  },
  {
    "text": "the if our application is using a third party service like stripe and we are",
    "start": "1009190",
    "end": "1015250"
  },
  {
    "text": "charging credit cards we can actually use this tenancy in order to use a sandbox account instead of a real",
    "start": "1015250",
    "end": "1021220"
  },
  {
    "text": "account so we can avoid these side effects another example of using",
    "start": "1021220",
    "end": "1027100"
  },
  {
    "start": "1025000",
    "end": "1025000"
  },
  {
    "text": "conscious propagation is in - in testing with services that are not yet released",
    "start": "1027100",
    "end": "1032560"
  },
  {
    "text": "so imagine that I have my service with one serving initial traffic in production I deploy but I'd not release",
    "start": "1032560",
    "end": "1039339"
  },
  {
    "text": "I don't release my v2 of my service so this is running in production but it's not actually receiving any inducer",
    "start": "1039340",
    "end": "1045160"
  },
  {
    "text": "traffic I can then send request against production that has a label saying I",
    "start": "1045160",
    "end": "1050650"
  },
  {
    "text": "want this request to target the v2 version of my service so if my routing layer is aware of tenancy like the the",
    "start": "1050650",
    "end": "1058780"
  },
  {
    "text": "routing layer can actually redirect that that request to my service when it goes to my service so it will use all the",
    "start": "1058780",
    "end": "1065350"
  },
  {
    "text": "production environment of my application but before it goes to my service the service that I'm responsible for it will",
    "start": "1065350",
    "end": "1071080"
  },
  {
    "text": "actually go through the new version and it can test that that service is behaving as expected without affecting",
    "start": "1071080",
    "end": "1077770"
  },
  {
    "text": "any user traffic like ng so traffic doesn't even know that I'm performing tests against production if this test",
    "start": "1077770",
    "end": "1083710"
  },
  {
    "text": "fails I can then roll back and I can I can clean them up another example is fall injection so",
    "start": "1083710",
    "end": "1090239"
  },
  {
    "start": "1087000",
    "end": "1087000"
  },
  {
    "text": "unlike traditional chaos engineering where the whole service will be affected",
    "start": "1090239",
    "end": "1095409"
  },
  {
    "text": "or a whole node will be affected using context propagation because he's tied to a specific request we can actually",
    "start": "1095409",
    "end": "1102960"
  },
  {
    "text": "inject instructions for for a specific test request to inject a failure",
    "start": "1102960",
    "end": "1108639"
  },
  {
    "text": "somewhere in the in the in the service so in this case I'm saying I want this",
    "start": "1108639",
    "end": "1113799"
  },
  {
    "text": "test request that goes against production to introduce for example an HTTP delay on every client request that",
    "start": "1113799",
    "end": "1120220"
  },
  {
    "text": "I make in my service so this test request will go through all the normal",
    "start": "1120220",
    "end": "1126059"
  },
  {
    "text": "flows of production but when it goes to my service my service will actually understand that instruction and it will",
    "start": "1126059",
    "end": "1133299"
  },
  {
    "text": "execute it so it will actually introduce that delay so with this we can synthetically test that my service will",
    "start": "1133299",
    "end": "1139840"
  },
  {
    "text": "and the entire application will behave as expected when I introduce this failure so this is a very fine-grain",
    "start": "1139840",
    "end": "1146080"
  },
  {
    "text": "fall injection that we can do use in context propagation feature flags for",
    "start": "1146080",
    "end": "1152259"
  },
  {
    "start": "1151000",
    "end": "1151000"
  },
  {
    "text": "example so so I have a some code in my service that is behind a feature flag",
    "start": "1152259",
    "end": "1157419"
  },
  {
    "text": "and I want to be able to test it before before we listen it to users because I want to mitigate the user impact so in",
    "start": "1157419",
    "end": "1164679"
  },
  {
    "text": "this case I can attach an instruction to my collection context and I want the",
    "start": "1164679",
    "end": "1170169"
  },
  {
    "text": "feature one of my service to be enabled for this specific request so nobody will will see that feature but I can run and",
    "start": "1170169",
    "end": "1177340"
  },
  {
    "text": "into and test against production that will actually go through that that code and test it proactively before we",
    "start": "1177340",
    "end": "1183460"
  },
  {
    "text": "release it to end-users another example is using test accounts",
    "start": "1183460",
    "end": "1189480"
  },
  {
    "start": "1187000",
    "end": "1187000"
  },
  {
    "text": "so the correlation context is not yet is not only set at the beginning or outside",
    "start": "1189480",
    "end": "1196050"
  },
  {
    "text": "of production any service in my application can actually add that label so for example we have a indication",
    "start": "1196050",
    "end": "1203040"
  },
  {
    "text": "service in our application and that looks up the database of users and and",
    "start": "1203040",
    "end": "1208230"
  },
  {
    "text": "see can see if the user is a test account or not you can actually inject that information into the into the",
    "start": "1208230",
    "end": "1214560"
  },
  {
    "text": "request that will be propagated across my application so I don't need my services to be looking up will be asking",
    "start": "1214560",
    "end": "1220890"
  },
  {
    "text": "my authentication service whether that you said is a test user or not I can add that information in band so every",
    "start": "1220890",
    "end": "1227880"
  },
  {
    "text": "service in my application will actually know that that is a test account and will avoid side effects like charging",
    "start": "1227880",
    "end": "1232920"
  },
  {
    "text": "credit cards or you know sending telemetry to a different uh different tenant",
    "start": "1232920",
    "end": "1239240"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "so what are the consequences of all this so the first thing is that if we design",
    "start": "1239420",
    "end": "1245520"
  },
  {
    "text": "our applications to be to be able to be tested in production we avoid the need",
    "start": "1245520",
    "end": "1251250"
  },
  {
    "text": "to have to replicate our application stack anywhere so we don't have to run it locally we don't have to run it on CI",
    "start": "1251250",
    "end": "1256620"
  },
  {
    "text": "or even a stake in stay in its heart so by testing in production and by having",
    "start": "1256620",
    "end": "1264920"
  },
  {
    "text": "test accounts and sub box accounts in in production we can avoid having to have",
    "start": "1264920",
    "end": "1269970"
  },
  {
    "text": "having to replicate that data stack which probably is impossible to replicate by segregating telemetry we",
    "start": "1269970",
    "end": "1276780"
  },
  {
    "text": "can actually monitor and troubleshoot test like we monitor and troubleshoot any end user traffic so this is much",
    "start": "1276780",
    "end": "1283040"
  },
  {
    "text": "more rich information that we can use in order to travel so why a test fail",
    "start": "1283040",
    "end": "1288830"
  },
  {
    "text": "instead of just a dump of logs and we can add other types of tests of traffic",
    "start": "1288830",
    "end": "1294390"
  },
  {
    "text": "to our application so by using this technique of using condense propagation we can actually add for example sandbox",
    "start": "1294390",
    "end": "1300540"
  },
  {
    "text": "accounts so if we are our application is actually a downstream dependency of a",
    "start": "1300540",
    "end": "1305790"
  },
  {
    "text": "customer we can actually mark all the requests that come from the customer using a sandbox account as sandbox",
    "start": "1305790",
    "end": "1311340"
  },
  {
    "text": "traffic so we can have different quality of service rules we can have different segregated metrics different alerts from",
    "start": "1311340",
    "end": "1319080"
  },
  {
    "text": "the actual production traffic or even development traffic maybe all our",
    "start": "1319080",
    "end": "1325170"
  },
  {
    "text": "services are developed against production so the user doesn't have to replicate anything locally it doesn't",
    "start": "1325170",
    "end": "1330810"
  },
  {
    "text": "have to connect to staging or anything but they can actually connect to production where all the services are there anyway so we can mark all the",
    "start": "1330810",
    "end": "1336810"
  },
  {
    "text": "requests I'll go through and I'll go to production with a development label so we can make sure that there are no",
    "start": "1336810",
    "end": "1342840"
  },
  {
    "text": "alerts filed if something goes wrong with the development traffic we can actually have different retention rules",
    "start": "1342840",
    "end": "1349620"
  },
  {
    "text": "for logs we had we can have different levels and so on",
    "start": "1349620",
    "end": "1354830"
  },
  {
    "text": "so the key takeaways is that we should catch issues before as early as possible",
    "start": "1354910",
    "end": "1361120"
  },
  {
    "start": "1355000",
    "end": "1355000"
  },
  {
    "text": "in the cycle through proactive testing because it's much cheaper than actually solving that issue in directly in",
    "start": "1361120",
    "end": "1367720"
  },
  {
    "text": "production testing in production can actually be the most efficient way to test and sometimes the only way to test",
    "start": "1367720",
    "end": "1373900"
  },
  {
    "text": "complex architectures because we just can't replicate it anywhere we should",
    "start": "1373900",
    "end": "1379510"
  },
  {
    "text": "design our applications to be able to be tested in production so it needs investment is not free it doesn't come",
    "start": "1379510",
    "end": "1385390"
  },
  {
    "text": "for free so just throw something production and and do some tests we actually have to be conscious that we",
    "start": "1385390",
    "end": "1391270"
  },
  {
    "text": "are testing in production and we have to be able to code for that and let's make sure let's make use of context",
    "start": "1391270",
    "end": "1397030"
  },
  {
    "text": "propagation we have instrumented our applications of ready with tracing so let's let's use that context propagation",
    "start": "1397030",
    "end": "1402430"
  },
  {
    "text": "system that we have in our applications for for testing so we can make the most of of that investment which is is a big",
    "start": "1402430",
    "end": "1410080"
  },
  {
    "text": "investment and with that thank you and if you want to talk about testing I'll",
    "start": "1410080",
    "end": "1416950"
  },
  {
    "text": "be available later see one in the front",
    "start": "1416950",
    "end": "1426280"
  },
  {
    "text": "here",
    "start": "1426280",
    "end": "1428460"
  },
  {
    "text": "hi so the magic sauce that you're using here is this you talk about envoy or is",
    "start": "1431650",
    "end": "1437860"
  },
  {
    "text": "the sto to enable this labeling and the routing so yeah so proxy support right",
    "start": "1437860",
    "end": "1444220"
  },
  {
    "text": "now no proxies or service messages actually understand this collation context but it",
    "start": "1444220",
    "end": "1449740"
  },
  {
    "text": "could actually be implemented in each tier or any API gateway to be honest so at the moment is an HCP heathered which",
    "start": "1449740",
    "end": "1457000"
  },
  {
    "text": "means that at the moment you have to code some red X on your service mesh East EO or even epi get what you can do",
    "start": "1457000",
    "end": "1464020"
  },
  {
    "text": "this with nginx and make sure that it reads this correlation context gather it matches the string that you want at the",
    "start": "1464020",
    "end": "1470530"
  },
  {
    "text": "moment is string matching and then if for example as a test request I want to",
    "start": "1470530",
    "end": "1475930"
  },
  {
    "text": "redirect it to the test version of my service hopefully when the standard the correlation context standard actually",
    "start": "1475930",
    "end": "1482920"
  },
  {
    "text": "gets through and approved and and all this service measures will actually start supporting collection context in a",
    "start": "1482920",
    "end": "1489160"
  },
  {
    "text": "better way so you can actually understand all the baggage that goes through them and you can actually have",
    "start": "1489160",
    "end": "1494500"
  },
  {
    "text": "more sophisticated rules based on that baggage so you can say okay I want every",
    "start": "1494500",
    "end": "1499900"
  },
  {
    "text": "request that has a test label actually do this or have these failure or we can",
    "start": "1499900",
    "end": "1506080"
  },
  {
    "text": "we can do more more things but either one because there's no standard is based on HTTP header so we have to make sure",
    "start": "1506080",
    "end": "1511660"
  },
  {
    "text": "that the service manager API whether you use actually can read that and can process it other questions you have time",
    "start": "1511660",
    "end": "1521950"
  },
  {
    "text": "for one or two more one backe",
    "start": "1521950",
    "end": "1525600"
  },
  {
    "text": "yeah hi I think you forgot the demo we at what point of time you are talking",
    "start": "1529560",
    "end": "1535030"
  },
  {
    "text": "about like at the testing to be done in production are we saying like immediately releasing it to the production are you talking purely from",
    "start": "1535030",
    "end": "1541690"
  },
  {
    "text": "the GCP i h2o which is coming up it's like a new kind of model or whatever so",
    "start": "1541690",
    "end": "1548130"
  },
  {
    "text": "at what point of time are we talking about like these production testing needs to be done at what point of time",
    "start": "1548130",
    "end": "1555250"
  },
  {
    "text": "is it immediately releasing the product is it after some time at what point of",
    "start": "1555250",
    "end": "1560320"
  },
  {
    "text": "time how far you test a introduction yeah when should we do one so yeah so we",
    "start": "1560320",
    "end": "1572530"
  },
  {
    "start": "1572000",
    "end": "1572000"
  },
  {
    "text": "can test in production across all these steps so what I would do is I will try",
    "start": "1572530",
    "end": "1578050"
  },
  {
    "text": "to test after deployment but before releasing so that's the moment where less we will have less user impact",
    "start": "1578050",
    "end": "1585940"
  },
  {
    "text": "because no one is actually exposed to the new version of the service so by",
    "start": "1585940",
    "end": "1591640"
  },
  {
    "text": "using this level we can actually very direct traffic to the to that version of",
    "start": "1591640",
    "end": "1598420"
  },
  {
    "text": "the service that is not yet exposed that that's that's the moment where there's",
    "start": "1598420",
    "end": "1603850"
  },
  {
    "text": "less impact so I will try to do that as much as possible if we can if you can",
    "start": "1603850",
    "end": "1609760"
  },
  {
    "text": "detect it in that in that step is much cheaper from an impact perspective but",
    "start": "1609760",
    "end": "1615340"
  },
  {
    "text": "you can do it later on like you can actually you can run these periodically if you want so you can run it again you",
    "start": "1615340",
    "end": "1622780"
  },
  {
    "text": "can run it after deployment but you can also have CI run end-to-end tests with",
    "start": "1622780",
    "end": "1628210"
  },
  {
    "text": "this label every five minutes every hour to make sure that your application in production still works as expected and",
    "start": "1628210",
    "end": "1635710"
  },
  {
    "text": "still have the segregation of telemetry and and avoiding side effects so what is",
    "start": "1635710",
    "end": "1641230"
  },
  {
    "text": "the benefit of naked running these stairs after some time when the once the product is released just to make sure",
    "start": "1641230",
    "end": "1647770"
  },
  {
    "text": "that your service is still compatible with all the other services that have been deployed so production will change",
    "start": "1647770",
    "end": "1654490"
  },
  {
    "text": "over time so this is more of a synthetic monitoring check",
    "start": "1654490",
    "end": "1659840"
  },
  {
    "text": "is not a test but you can do synthetic monitoring using requests with this",
    "start": "1659840",
    "end": "1665990"
  },
  {
    "text": "label and do more advanced checking of if your application actually behaving as",
    "start": "1665990",
    "end": "1671840"
  },
  {
    "text": "Specter or not than a ping - to an endpoint so is it not going to result in lower cost it will it would produce an",
    "start": "1671840",
    "end": "1679520"
  },
  {
    "text": "overhead but I think is better for to have that overhead in your production system and actually catching issues",
    "start": "1679520",
    "end": "1686240"
  },
  {
    "text": "before users do I think it's worth it and especially if you have coded your",
    "start": "1686240",
    "end": "1693470"
  },
  {
    "text": "application you have turned your application to not have side effects of those tests so yes you will have a bit of overhead but I don't I think the cost",
    "start": "1693470",
    "end": "1701540"
  },
  {
    "text": "justifies it because you will be able to catch issues before your users actually start complaining the same thing we do",
    "start": "1701540",
    "end": "1707540"
  },
  {
    "text": "before moving into production any hurry sorry the same thing we do before moving into products mini alright yes it can be",
    "start": "1707540",
    "end": "1714950"
  },
  {
    "text": "a subset of that it doesn't have to run your entire test suite against production but you can run a subset of",
    "start": "1714950",
    "end": "1720080"
  },
  {
    "text": "tests against production to make sure that it still works okay thank you you",
    "start": "1720080",
    "end": "1726980"
  },
  {
    "text": "no problem okay maybe one last question do we have MRA here the next speaker you",
    "start": "1726980",
    "end": "1733160"
  },
  {
    "text": "want to start getting set up and we'll do this one final question",
    "start": "1733160",
    "end": "1738370"
  },
  {
    "text": "do we see this as a security risk because anyone could add a baggage and",
    "start": "1745389",
    "end": "1752499"
  },
  {
    "text": "or send a request to you so yeah yeah that's sorry that's the sole question",
    "start": "1752499",
    "end": "1761950"
  },
  {
    "text": "yes do you have to make sure that you know unauthorized users can say the package arbitrarily so if you're inside",
    "start": "1761950",
    "end": "1768860"
  },
  {
    "text": "application that should be okay but from outside you have to have some way of authenticating that request outside of",
    "start": "1768860",
    "end": "1776809"
  },
  {
    "text": "the of the baggage so yes absolutely you have to make sure that like no",
    "start": "1776809",
    "end": "1782600"
  },
  {
    "text": "random user can adjust a net request with a package so probably your hn3 paralyzer edge router will strip that",
    "start": "1782600",
    "end": "1789110"
  },
  {
    "text": "out and you have some other way to submit requests against production that is not the standard like not the user",
    "start": "1789110",
    "end": "1795499"
  },
  {
    "text": "facing way but yeah that's a concern possible thank you congratulations",
    "start": "1795499",
    "end": "1802009"
  },
  {
    "text": "give it up for Fernando",
    "start": "1802009",
    "end": "1804999"
  }
]