[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "okay then hello and welcome to my presentation exploiting buffer overflows on risk 5 so maybe it's an words about",
    "start": "30",
    "end": "12469"
  },
  {
    "text": "me I'm yeah Cristina class I'm working as an embedded systems developer I",
    "start": "12469",
    "end": "19050"
  },
  {
    "text": "studied Electrical Engineering at tu Berlin and now I'm living in France and nice and my university I played IT",
    "start": "19050",
    "end": "26369"
  },
  {
    "text": "security CTF and that's how I got interested in security and that's what this talk would be about partly so",
    "start": "26369",
    "end": "33960"
  },
  {
    "start": "33000",
    "end": "63000"
  },
  {
    "text": "that's what I will be covering after the introduction I will give you an architectural overview over the architecture risk 5 I will tell you",
    "start": "33960",
    "end": "41489"
  },
  {
    "text": "about the differences to arm and x86 are and then we will directly dive into",
    "start": "41489",
    "end": "47660"
  },
  {
    "text": "hands-on examples how to exploit the buffer overflow how to write your own",
    "start": "47660",
    "end": "53520"
  },
  {
    "text": "child code first brisk fight and how to perform red tulip see and I hope all",
    "start": "53520",
    "end": "59670"
  },
  {
    "text": "those words will make more sense to you once this presentation is over so what",
    "start": "59670",
    "end": "64710"
  },
  {
    "text": "is risk 5 risk 5 is an ISA and instruction set architecture",
    "start": "64710",
    "end": "70680"
  },
  {
    "text": "it was started 2010 at the University of California and broccoli but since then",
    "start": "70680",
    "end": "76200"
  },
  {
    "text": "it has seen many contributions and in since 2018 VF ports out there in",
    "start": "76200",
    "end": "84090"
  },
  {
    "text": "hardware because before it was just a software written a program but you could flash on to your FPGA to simulate an CPU",
    "start": "84090",
    "end": "92070"
  },
  {
    "text": "but yeah nowadays you have hardware and since March 2019 diversion to to a",
    "start": "92070",
    "end": "98250"
  },
  {
    "text": "stable of this instruction set architecture and you can start using it in your doctor development projects and",
    "start": "98250",
    "end": "106310"
  },
  {
    "text": "to see how important this project actually is you can see it by which companies join the risk 5 Foundation",
    "start": "106310",
    "end": "114060"
  },
  {
    "text": "which are for example Google and XP and vdr cocom Samsung and so the advantage",
    "start": "114060",
    "end": "121619"
  },
  {
    "text": "of risk 5 is thatis release under a permissive open-source license which",
    "start": "121619",
    "end": "127860"
  },
  {
    "text": "means that anyone you meet and university can implement his own risk 5",
    "start": "127860",
    "end": "133740"
  },
  {
    "text": "architecture without needing to pay any royalties so yeah what is what is an",
    "start": "133740",
    "end": "139770"
  },
  {
    "text": "either actually is whatever you are CPU Hardware understand so it defines memory",
    "start": "139770",
    "end": "146430"
  },
  {
    "text": "and registers it defines logic ports which do the calculations between the registers yes basically like dimension",
    "start": "146430",
    "end": "154860"
  },
  {
    "text": "language which describes what your key was capable of carrying out and so what",
    "start": "154860",
    "end": "162090"
  },
  {
    "text": "you have CPU actually understands is binary data and that's what but it also",
    "start": "162090",
    "end": "169350"
  },
  {
    "text": "make it easier for us programmers yes the assembly in demonic language which we see here for example this one means",
    "start": "169350",
    "end": "176060"
  },
  {
    "text": "at the immediate 559 to whatever is stored in the register a five and stored",
    "start": "176060",
    "end": "182550"
  },
  {
    "text": "back into a five but what the CPU actually sees as just binary data which",
    "start": "182550",
    "end": "190200"
  },
  {
    "text": "means the same and so why do we care that there is an open hardware",
    "start": "190200",
    "end": "196730"
  },
  {
    "text": "implementation now why do we want to have an open hardware processor or CPU",
    "start": "196730",
    "end": "203750"
  },
  {
    "text": "yeah for one it's the license fees I managed nowadays for example if you want to implement your own ARM",
    "start": "203810",
    "end": "210270"
  },
  {
    "text": "architecture you would need to pay a royalty fees to arm or so if for example",
    "start": "210270",
    "end": "216510"
  },
  {
    "text": "a start-up wants to make a quick prototype or university wants to use an",
    "start": "216510",
    "end": "221880"
  },
  {
    "text": "architecture to teach it to the students there was nothing on the market until now so that's where s5 comes for example",
    "start": "221880",
    "end": "231450"
  },
  {
    "text": "interplay and the idea behind describes also dude democratize and the process so",
    "start": "231450",
    "end": "238860"
  },
  {
    "text": "you have documentation to the chip and anybody can join the risk right Foundation and discuss and find a",
    "start": "238860",
    "end": "246960"
  },
  {
    "text": "consensus how what kind of features to include in the architecture in which node and anybody can join which means be",
    "start": "246960",
    "end": "255090"
  },
  {
    "text": "it a company or an individual the",
    "start": "255090",
    "end": "260329"
  },
  {
    "text": "project was designed to take all good ideas of architect of we have now in",
    "start": "260330",
    "end": "265770"
  },
  {
    "text": "place and fix their shortcomings so they want to be performing on microcontrollers but",
    "start": "265770",
    "end": "271080"
  },
  {
    "text": "usually have are low on memory and have a low power consumption as well on",
    "start": "271080",
    "end": "276230"
  },
  {
    "text": "64-bit processors and so how did I play",
    "start": "276230",
    "end": "281760"
  },
  {
    "text": "around with the architecture one possibility would have been to yeah I take up one of the boards but I thought",
    "start": "281760",
    "end": "288870"
  },
  {
    "text": "it would be easier to just emulators in qmo so I downloaded the image from the federal website and launched it on ready",
    "start": "288870",
    "end": "296610"
  },
  {
    "text": "I had a usable risk 5 system with",
    "start": "296610",
    "end": "302610"
  },
  {
    "text": "toolchains where I had to build it and nipsey the gdb which I didn't need to",
    "start": "302610",
    "end": "309480"
  },
  {
    "text": "try to cross compile or anything but the problem is it's quite resource hungry so",
    "start": "309480",
    "end": "314730"
  },
  {
    "text": "it's on my system for example it needs three minutes to startup so it's not really optimized yet but at least you",
    "start": "314730",
    "end": "320850"
  },
  {
    "text": "have everything in place you can just directly start hacking and so what does",
    "start": "320850",
    "end": "326940"
  },
  {
    "start": "324000",
    "end": "436000"
  },
  {
    "text": "the you ascribe architecture it's a reduced instruction set computer which",
    "start": "326940",
    "end": "333150"
  },
  {
    "text": "means you have small instructions which are not complex with just to one task",
    "start": "333150",
    "end": "339320"
  },
  {
    "text": "until for example has push and pop operations to put things on a stack and",
    "start": "339320",
    "end": "344490"
  },
  {
    "text": "take things from the deck brisk Park doesn't have that you need to address your stack relative to your memory and",
    "start": "344490",
    "end": "353270"
  },
  {
    "text": "your program counter cannot be directly written instead you have to play around with the returned stack which is usually",
    "start": "353270",
    "end": "360060"
  },
  {
    "text": "put on a stack and you have to override that furthermore it's little-endian which means the least significant byte",
    "start": "360060",
    "end": "367260"
  },
  {
    "text": "comes first and the most significant byte camps laugh and the memory so if you want to write you exploit later you",
    "start": "367260",
    "end": "374010"
  },
  {
    "text": "need to kind of shift or alter bytes and we will see that later the risk five has",
    "start": "374010",
    "end": "380729"
  },
  {
    "text": "a modular approach which means there's only one minimal instruction set which",
    "start": "380729",
    "end": "386610"
  },
  {
    "text": "is obligatory to implement and everything is everything besides that is optional the minimal",
    "start": "386610",
    "end": "393030"
  },
  {
    "text": "instruction set has jumps branches logical operations or add and subtract",
    "start": "393030",
    "end": "399690"
  },
  {
    "text": "operations but you can also add multiplications on integers floating point operations",
    "start": "399690",
    "end": "406849"
  },
  {
    "text": "vector operations you can add a 64 bit instruction set on top of that and and",
    "start": "406849",
    "end": "414629"
  },
  {
    "text": "100 128 bit instruction size know an",
    "start": "414629",
    "end": "419719"
  },
  {
    "text": "instruction set as in works right now and also you can use compress and instructions which the compress and",
    "start": "419719",
    "end": "429449"
  },
  {
    "text": "extension uses to byte for one instructions and set up for so what else",
    "start": "429449",
    "end": "439979"
  },
  {
    "text": "are differences between architectures so on risk five as well as an arm you would have you can use your registers a zero",
    "start": "439979",
    "end": "449939"
  },
  {
    "text": "to a seven to pass functions to parameters to a function in x86 32-bit",
    "start": "449939",
    "end": "457229"
  },
  {
    "text": "it used to be that you have to put everything on the stack but that's not true for the 64-bit version right now",
    "start": "457229",
    "end": "464099"
  },
  {
    "text": "any more risk and arm have many more general-purpose registers they have 32",
    "start": "464099",
    "end": "470189"
  },
  {
    "text": "of them while x86 64 bit has only 16 and",
    "start": "470189",
    "end": "476069"
  },
  {
    "text": "the reason for that is on x86 most of",
    "start": "476069",
    "end": "481560"
  },
  {
    "text": "the instructions have access to memory so you can perform your ads or sub directly on a memory address",
    "start": "481560",
    "end": "487289"
  },
  {
    "text": "whereas on arm and risk height you first need to load the value from memory into a register then perform whatever",
    "start": "487289",
    "end": "494330"
  },
  {
    "text": "operation you want to perform and then put it back into memory um so yeah this",
    "start": "494330",
    "end": "503310"
  },
  {
    "text": "guy is therefore called a load store architecture why x86 as a riggis is a register memory architecture then risk 5",
    "start": "503310",
    "end": "512610"
  },
  {
    "text": "instructions are or memory accesses byte aligned while instruction act access to",
    "start": "512610",
    "end": "520828"
  },
  {
    "text": "instructions a memory is route aligned",
    "start": "520829",
    "end": "525139"
  },
  {
    "text": "which means every time you fetch an instruction you always fetch 4 bytes unless you are using the compressed",
    "start": "525980",
    "end": "532529"
  },
  {
    "text": "instructions which is only but support 2-byte instruction hmm and",
    "start": "532529",
    "end": "540550"
  },
  {
    "text": "risk life get inspired by many successful CPUs which are already on the market like spark and Power PC or MIPS",
    "start": "540550",
    "end": "548710"
  },
  {
    "text": "or on an autumn has have a fixed this instruction set while for example Intel",
    "start": "548710",
    "end": "554950"
  },
  {
    "text": "as known to have variable size instructions which are harder to schedule or pilot through fetch and",
    "start": "554950",
    "end": "561490"
  },
  {
    "text": "decode and the CPU and all those CPUs",
    "start": "561490",
    "end": "567190"
  },
  {
    "text": "have a vast number of registers so that you do you need less accesses to ram and",
    "start": "567190",
    "end": "574980"
  },
  {
    "text": "accessing and register takes much less time than exiting a value and RAM for",
    "start": "574980",
    "end": "580750"
  },
  {
    "text": "example and you have a very simple addressing mode so this is the important",
    "start": "580750",
    "end": "589420"
  },
  {
    "start": "587000",
    "end": "666000"
  },
  {
    "text": "registers we will be looking at later in our assembler code for example we have",
    "start": "589420",
    "end": "595089"
  },
  {
    "text": "the zero register which is basically only zero which is useful in programming",
    "start": "595089",
    "end": "600970"
  },
  {
    "text": "in general for example sometimes you want to compare a better pointer is null",
    "start": "600970",
    "end": "606040"
  },
  {
    "text": "or whether a value of zero and you already have just register at hand while",
    "start": "606040",
    "end": "611100"
  },
  {
    "text": "in other architectures you would need to clear this register first before you can",
    "start": "611100",
    "end": "617680"
  },
  {
    "text": "use it for comparison and furthermore having the zero register also reduces the instruction set because you can use",
    "start": "617680",
    "end": "625120"
  },
  {
    "text": "it for negation so instead of having and negation instruction you would just",
    "start": "625120",
    "end": "630640"
  },
  {
    "text": "calculate X 0 which is always 0 minus X 1 which contains your value and you have",
    "start": "630640",
    "end": "635830"
  },
  {
    "text": "the new value then our a is we a contains the you turn address SP is the",
    "start": "635830",
    "end": "642250"
  },
  {
    "text": "stack pointer then as zeros the frame pointer which you will find later in the",
    "start": "642250",
    "end": "649870"
  },
  {
    "text": "assembler code and in a 0 and a 2 a7 as",
    "start": "649870",
    "end": "655420"
  },
  {
    "text": "I said you pass the function arguments and return value of your function you can find after the execution of your",
    "start": "655420",
    "end": "661959"
  },
  {
    "text": "function in a 0 to a 1",
    "start": "661959",
    "end": "666360"
  },
  {
    "text": "so I'm showing you the function Pro and epilogue on risk five because you will",
    "start": "667759",
    "end": "673309"
  },
  {
    "text": "see this pattern basically later in assembler code and might be easier to understand so on the right side we see",
    "start": "673309",
    "end": "679669"
  },
  {
    "text": "SD SD stands for a store double which means it takes the value which is in RA",
    "start": "679669",
    "end": "685069"
  },
  {
    "text": "and sort source it at the memory address and stack pointer + 8 + LD is slow",
    "start": "685069",
    "end": "690980"
  },
  {
    "text": "Tuggle which does inverse it stores whatever or close whatever is located at",
    "start": "690980",
    "end": "696350"
  },
  {
    "text": "stack pointer + 8 into register RA and",
    "start": "696350",
    "end": "701619"
  },
  {
    "text": "so a typical prog and epilogue is whatever happens or whatever the",
    "start": "701619",
    "end": "707929"
  },
  {
    "text": "compiler puts without you knowing that like you write your little main function and the compiler takes care of",
    "start": "707929",
    "end": "714889"
  },
  {
    "text": "constructing e and distracting the stack which means he basically makes space on",
    "start": "714889",
    "end": "725089"
  },
  {
    "text": "the stack for 16 bytes and then he stores the you turn address and the",
    "start": "725089",
    "end": "731569"
  },
  {
    "text": "frame pointer from the prius function onto the stack and whenever d function",
    "start": "731569",
    "end": "737569"
  },
  {
    "text": "like he has normal function operation and then you have the compiler as 2d",
    "start": "737569",
    "end": "742669"
  },
  {
    "text": "current or the court has two destructor stack which he built up so he stores back the you turn address and the frame",
    "start": "742669",
    "end": "749839"
  },
  {
    "text": "pointer and yeah distracts the stack and jumps to this address which was yeah",
    "start": "749839",
    "end": "757519"
  },
  {
    "text": "stored before so that's how it looks",
    "start": "757519",
    "end": "763939"
  },
  {
    "start": "760000",
    "end": "784000"
  },
  {
    "text": "like on a buffer it says that this is your stack and stack grows downwards",
    "start": "763939",
    "end": "769850"
  },
  {
    "text": "first address space groans upwards so basically after lower",
    "start": "769850",
    "end": "775160"
  },
  {
    "text": "address here for example 0 X naught 0 0 and here the bigger address 0xffff",
    "start": "775160",
    "end": "782619"
  },
  {
    "text": "and so what happens if you have local variables they are basically just stored",
    "start": "782619",
    "end": "788660"
  },
  {
    "start": "784000",
    "end": "820000"
  },
  {
    "text": "after this a frame pointer so if you have a local variable and in a which is",
    "start": "788660",
    "end": "795019"
  },
  {
    "text": "5 you stored here and B as you stored afterwards on your stack",
    "start": "795019",
    "end": "800980"
  },
  {
    "text": "and maybe at this point you can if you have a function like mem copy or string",
    "start": "800980",
    "end": "806470"
  },
  {
    "text": "copy it will still start from the lower address and will overwrite to the upper",
    "start": "806470",
    "end": "811720"
  },
  {
    "text": "address and I guess at this point you can imagine how a buffer overflow can overwrite your attend address which you",
    "start": "811720",
    "end": "818860"
  },
  {
    "text": "will use later so for me hacking is like basically are",
    "start": "818860",
    "end": "824800"
  },
  {
    "start": "820000",
    "end": "837000"
  },
  {
    "text": "searching some blocks of Lego or DUPLO and you build up your Tower to create an",
    "start": "824800",
    "end": "832029"
  },
  {
    "text": "exploit and that's what we are gonna do we're gonna search for stones to build up our Tower let's start with a buffer",
    "start": "832029",
    "end": "839740"
  },
  {
    "start": "837000",
    "end": "904000"
  },
  {
    "text": "overflow so for example they have dysfunction which is yeah well number",
    "start": "839740",
    "end": "845110"
  },
  {
    "text": "two buffer overflow because you have a buffer of eight byte and you're not",
    "start": "845110",
    "end": "850510"
  },
  {
    "text": "checking the size of the buffer you just over writing whatever was passed to a",
    "start": "850510",
    "end": "856449"
  },
  {
    "text": "function in our Creek and then let's assume you have this magic function give shell which just opens a shell for you",
    "start": "856449",
    "end": "864010"
  },
  {
    "text": "and you can do whatever operation you want to do afterwards and so what you",
    "start": "864010",
    "end": "869350"
  },
  {
    "text": "want to do is use a buffer overflow to",
    "start": "869350",
    "end": "875670"
  },
  {
    "text": "override the veto an address of the usual function with our gift shell function which gives us all their rights",
    "start": "875670",
    "end": "883209"
  },
  {
    "text": "and so basically after the buffer overflow we don't care about us in the buffer we want to put any valid address",
    "start": "883209",
    "end": "891970"
  },
  {
    "text": "into the safe frame pointer or depends sometimes you don't care and we just want to be sure that in this address on",
    "start": "891970",
    "end": "899019"
  },
  {
    "text": "the stack you have the gift shell address later and so how do we go about how do we",
    "start": "899019",
    "end": "908260"
  },
  {
    "start": "904000",
    "end": "996000"
  },
  {
    "text": "approach this problem the first of all we have to find the address of crab shell and you can use object dump",
    "start": "908260",
    "end": "914709"
  },
  {
    "text": "- and decode for that so we have our address and then we just play around",
    "start": "914709",
    "end": "920620"
  },
  {
    "text": "with gdb so we pass some input into the our program and see where it crashes so",
    "start": "920620",
    "end": "926230"
  },
  {
    "text": "in our case it crashes at this address and for those have played around with",
    "start": "926230",
    "end": "931569"
  },
  {
    "text": "hex a lot that is basically hex byte zero X 41 is basically just a in hex and",
    "start": "931569",
    "end": "939309"
  },
  {
    "text": "you wonder right why this one is a 40 instead of a 41 as I said risk five",
    "start": "939309",
    "end": "946299"
  },
  {
    "text": "access to instructions is always at least two byte aligned or half word",
    "start": "946299",
    "end": "952239"
  },
  {
    "text": "aligned that's why you can never have a warning here so next step would just be",
    "start": "952239",
    "end": "959739"
  },
  {
    "text": "to replace whatever is here all those eighth with the adverse we found defined before and that's what we",
    "start": "959739",
    "end": "967899"
  },
  {
    "text": "do and as I said risk high is a little endian architecture which means you have",
    "start": "967899",
    "end": "973029"
  },
  {
    "text": "to put the least significant byte in our case 0 X C 0 0 first and then the rest",
    "start": "973029",
    "end": "979600"
  },
  {
    "text": "of the bytes and you see that shell is spawned and you can just do cap TC pass",
    "start": "979600",
    "end": "987369"
  },
  {
    "text": "VT for example this book yeah and then you just have to double check that it",
    "start": "987369",
    "end": "992919"
  },
  {
    "text": "works on your local system as well outside of jiminy so but what do we do",
    "start": "992919",
    "end": "997959"
  },
  {
    "start": "996000",
    "end": "1061000"
  },
  {
    "text": "if you happen you don't have this magical gift shell function what do you do to get a shell in this case that case",
    "start": "997959",
    "end": "1006509"
  },
  {
    "text": "you can write shell code what a shell code shellcode is some hex bytes you can pass to the CPU which will spawn a shell",
    "start": "1006509",
    "end": "1013769"
  },
  {
    "text": "for you it will basically do the equivalent of system with the string",
    "start": "1013769",
    "end": "1020790"
  },
  {
    "text": "business H in it or something and normally for known architectures you can",
    "start": "1020790",
    "end": "1026038"
  },
  {
    "text": "download most of your shell code from shell storm a website but simpler scribe",
    "start": "1026039",
    "end": "1031709"
  },
  {
    "text": "as a new architecture you have to do it by hand this time so yeah so this is the",
    "start": "1031709",
    "end": "1037350"
  },
  {
    "text": "basic idea you find some executable area in your memory like the stack or the",
    "start": "1037350",
    "end": "1042630"
  },
  {
    "text": "heap sometimes you have to leak the address that in our example to make it easy the program will just give us the address",
    "start": "1042630",
    "end": "1048750"
  },
  {
    "text": "and then you write some assembler code put your shellcode into your buffer",
    "start": "1048750",
    "end": "1054889"
  },
  {
    "text": "overwrite the return address and jump there directly so this is that's our",
    "start": "1054889",
    "end": "1064039"
  },
  {
    "start": "1061000",
    "end": "1097000"
  },
  {
    "text": "vulnerable function in this case again we have a buffer which in this case it's 128 byte big and",
    "start": "1064039",
    "end": "1072270"
  },
  {
    "text": "that's approximately that's a place the in space we have to put our shellcode it",
    "start": "1072270",
    "end": "1077370"
  },
  {
    "text": "can be up to 128 bytes in size and again we have a string copy which does not",
    "start": "1077370",
    "end": "1083790"
  },
  {
    "text": "check for any size of your buffer and just overrides whatever it finds and",
    "start": "1083790",
    "end": "1090050"
  },
  {
    "text": "again because of the arc v1 arguments or whatever is passed to your program and",
    "start": "1090050",
    "end": "1097520"
  },
  {
    "text": "so how do we go about um we can for example yeah start and take x ik v and",
    "start": "1097850",
    "end": "1105300"
  },
  {
    "text": "execute it will execute any program you pass at the first argument as a string and we will pass here the string VIN SH",
    "start": "1105300",
    "end": "1113280"
  },
  {
    "text": "and yeah for those arguments debate if you don't care so first you have to find",
    "start": "1113280",
    "end": "1119670"
  },
  {
    "text": "out also execute a source code so we have to find out the Cisco number and for that we can either look into the",
    "start": "1119670",
    "end": "1125430"
  },
  {
    "text": "header and see okay let's just call number 221 or we can again look at Lipsy",
    "start": "1125430",
    "end": "1132390"
  },
  {
    "text": "and see how how this function is called and Lipsey will just load the number two",
    "start": "1132390",
    "end": "1140400"
  },
  {
    "text": "and 21 into through justa a seven which is designated as is just call number or",
    "start": "1140400",
    "end": "1146520"
  },
  {
    "text": "juicer and then called the instruction ecole so yeah so that's what we",
    "start": "1146520",
    "end": "1152940"
  },
  {
    "text": "basically want to do we want to pass on Venus h2 x ik v and other arguments we",
    "start": "1152940",
    "end": "1158550"
  },
  {
    "text": "don't care just know so that my idea was",
    "start": "1158550",
    "end": "1163710"
  },
  {
    "text": "to make life easier I wouldn't start from scratch writing seminar code instead I will just",
    "start": "1163710",
    "end": "1169830"
  },
  {
    "text": "implement C function compile it and see what it does already so this is my C",
    "start": "1169830",
    "end": "1178890"
  },
  {
    "text": "function and this is the resulting shell code and as I as you can see that that's",
    "start": "1178890",
    "end": "1184560"
  },
  {
    "text": "basically the prologue and the but we don't have an epilogue in this case because we don't care what happens let's",
    "start": "1184560",
    "end": "1191490"
  },
  {
    "text": "attack afterwards but here you see the prologue fee so on the beginning but the problem now is",
    "start": "1191490",
    "end": "1198530"
  },
  {
    "text": "yeah but in that compile function is",
    "start": "1202249",
    "end": "1207509"
  },
  {
    "text": "using the P ot the procedure linkage table which is an mechanism where a",
    "start": "1207509",
    "end": "1214019"
  },
  {
    "text": "program kind can find dynamic Reaver Lipsy functions are located so basically",
    "start": "1214019",
    "end": "1219419"
  },
  {
    "text": "it's like a trampoline it goes to a place searches for the address of the real exit v and jumps there later and",
    "start": "1219419",
    "end": "1226009"
  },
  {
    "text": "yeah so instead of going round circles we can just directly put whatever the",
    "start": "1226009",
    "end": "1236490"
  },
  {
    "text": "execute function does in there and half our salting shell code yeah then you",
    "start": "1236490",
    "end": "1245190"
  },
  {
    "start": "1243000",
    "end": "1277000"
  },
  {
    "text": "compile it and you execute it and you double check that it works but at this point you have a problem because you",
    "start": "1245190",
    "end": "1250830"
  },
  {
    "text": "have snail bites and you know what happens with string copy if you pass",
    "start": "1250830",
    "end": "1256289"
  },
  {
    "text": "something which has now bytes it stops copying exactly so you won't have any",
    "start": "1256289",
    "end": "1264769"
  },
  {
    "text": "nail bytes in your shellcode because you will not copy the whole shellcode down so after having this base of the",
    "start": "1264769",
    "end": "1272129"
  },
  {
    "text": "shellcode you want to remove all the nail bytes and how can you do that yeah",
    "start": "1272129",
    "end": "1278580"
  },
  {
    "start": "1277000",
    "end": "1308000"
  },
  {
    "text": "for example in the original version it used power of two num number in order to",
    "start": "1278580",
    "end": "1289139"
  },
  {
    "text": "adjust the stack you can use an odd number let's say in the base 2 system in",
    "start": "1289139",
    "end": "1296009"
  },
  {
    "text": "order to F a function which doesn't use no bytes and then ya later have to",
    "start": "1296009",
    "end": "1301110"
  },
  {
    "text": "adjust the offset when you're referencing a zero as well but then here",
    "start": "1301110",
    "end": "1309840"
  },
  {
    "start": "1308000",
    "end": "1334000"
  },
  {
    "text": "for example we are loading the immediate value of 0 X 687 into our register a",
    "start": "1309840",
    "end": "1317820"
  },
  {
    "text": "five and instead of doing that we can take a larger byte a larger number 2",
    "start": "1317820",
    "end": "1323639"
  },
  {
    "text": "remove null lights and then we have to account for the offset we created by",
    "start": "1323639",
    "end": "1328649"
  },
  {
    "text": "doing more operation which makes our shellcode bigger but at least moved now",
    "start": "1328649",
    "end": "1333899"
  },
  {
    "text": "bytes and then the last probably has is eco instruction and you have to perform it s",
    "start": "1333899",
    "end": "1340850"
  },
  {
    "start": "1334000",
    "end": "1361000"
  },
  {
    "text": "is so in order to remove that in our",
    "start": "1340850",
    "end": "1346040"
  },
  {
    "text": "case we are lucky because we have writable stack as well so basic leave of the shellcode we are",
    "start": "1346040",
    "end": "1351470"
  },
  {
    "text": "creating exactly this combination of numbers and putting it on the stack and then we are jumping there but it's only",
    "start": "1351470",
    "end": "1359030"
  },
  {
    "text": "works if your stack is writable so um",
    "start": "1359030",
    "end": "1364630"
  },
  {
    "start": "1361000",
    "end": "1375000"
  },
  {
    "text": "what you see here is exactly the shellcode me just created and that's",
    "start": "1364630",
    "end": "1371450"
  },
  {
    "text": "exactly what we want to pass a pass into our buffer yeah so you find it here",
    "start": "1371450",
    "end": "1377510"
  },
  {
    "start": "1375000",
    "end": "1406000"
  },
  {
    "text": "again same shellcode and so we overwrite",
    "start": "1377510",
    "end": "1384020"
  },
  {
    "text": "the buffer of the shellcode and then the rest of the buffer size we fill up a face because we don't care this is where",
    "start": "1384020",
    "end": "1390170"
  },
  {
    "text": "the frame pointer would be located and this is the address we want to jump to because luckily our main program just",
    "start": "1390170",
    "end": "1395810"
  },
  {
    "text": "gave us the address where the buffer is located where our shellcode starts so we can just come there and we are greeted",
    "start": "1395810",
    "end": "1401810"
  },
  {
    "text": "from our shell here and so but what",
    "start": "1401810",
    "end": "1408800"
  },
  {
    "start": "1406000",
    "end": "1492000"
  },
  {
    "text": "happens if our stack or heap is not executable because that's what a program nominee is right you don't want anybody",
    "start": "1408800",
    "end": "1415070"
  },
  {
    "text": "to execute code on your stack then you can perform route to a red tulip C which",
    "start": "1415070",
    "end": "1421460"
  },
  {
    "text": "is a technique of Rob or via return-oriented programming so yeah",
    "start": "1421460",
    "end": "1427400"
  },
  {
    "text": "let's assume that's our vulnerable program and it just reads in whatever it",
    "start": "1427400",
    "end": "1433220"
  },
  {
    "text": "finds in the file we pass over FD and yeah that's it",
    "start": "1433220",
    "end": "1439250"
  },
  {
    "text": "and our stake is not executable we can try to perform rock now and Rob means",
    "start": "1439250",
    "end": "1447610"
  },
  {
    "text": "you basically search you know what slip C version is running on your system so",
    "start": "1447610",
    "end": "1453380"
  },
  {
    "text": "you know what possibility M the instructions we have in this Lipsy and you're searching for assembly",
    "start": "1453380",
    "end": "1460970"
  },
  {
    "text": "instructions we which do something do something and then do read in the best case at lost value permanent stack",
    "start": "1460970",
    "end": "1468260"
  },
  {
    "text": "in the registers who need and then it does return and you basically chain",
    "start": "1468260",
    "end": "1473300"
  },
  {
    "text": "those so-called rock gadgets one after another so that you have the execution",
    "start": "1473300",
    "end": "1479570"
  },
  {
    "text": "of the program you want to have to execute so for example in our case we",
    "start": "1479570",
    "end": "1485450"
  },
  {
    "text": "want to execute the function system which again we pass the string business",
    "start": "1485450",
    "end": "1490940"
  },
  {
    "text": "age and so yeah first we have to find a rope get it again we use object dump - D",
    "start": "1490940",
    "end": "1499250"
  },
  {
    "start": "1492000",
    "end": "1541000"
  },
  {
    "text": "code for that we grab around and out of the 1000 gadgets I found this one it's",
    "start": "1499250",
    "end": "1505610"
  },
  {
    "text": "nice because what we want to have after our buffer overflow is having the",
    "start": "1505610",
    "end": "1513410"
  },
  {
    "text": "address of system in our register RA the return address register we want to",
    "start": "1513410",
    "end": "1520730"
  },
  {
    "text": "have tea the address of the string - H in a 0 which happens here and the other",
    "start": "1520730",
    "end": "1526700"
  },
  {
    "text": "two we basically don't care and we want to overwrite our return address on the",
    "start": "1526700",
    "end": "1534440"
  },
  {
    "text": "stack with that one plus the offset wherever Lipsy is mapped so next step is",
    "start": "1534440",
    "end": "1543530"
  },
  {
    "text": "we have to find out where the address of system is actually we use object dump for that again and then there's the",
    "start": "1543530",
    "end": "1553000"
  },
  {
    "start": "1550000",
    "end": "1599000"
  },
  {
    "text": "Python script which will generate um D file with the exploited so we fill the",
    "start": "1553000",
    "end": "1560750"
  },
  {
    "text": "buffer with face because we don't care this is the frame pointer again and this is the gadget address we found so the",
    "start": "1560750",
    "end": "1567980"
  },
  {
    "text": "shell code I showed you which basically initializes the you an address and a",
    "start": "1567980",
    "end": "1573170"
  },
  {
    "text": "zero for us and then on this stack further you find the address of this",
    "start": "1573170",
    "end": "1578690"
  },
  {
    "text": "string - H yeah obviously you need to have address space layout randomization",
    "start": "1578690",
    "end": "1585430"
  },
  {
    "text": "disabled at this point because otherwise your address will change all the time and then yeah the address of system in",
    "start": "1585430",
    "end": "1595400"
  },
  {
    "text": "the buffer and the listeth the generated that the file",
    "start": "1595400",
    "end": "1603540"
  },
  {
    "text": "colored Explorer generated by Python code which is read in for a program into the buffer so obviously this is the ACE",
    "start": "1603540",
    "end": "1610169"
  },
  {
    "text": "for example the beast and the addresses you know any code as well so we just",
    "start": "1610169",
    "end": "1618270"
  },
  {
    "start": "1617000",
    "end": "1667000"
  },
  {
    "text": "passes to our function ball and it opens a shell for us and actually I used like",
    "start": "1618270",
    "end": "1626100"
  },
  {
    "text": "normally if you want to try out your exploit in this case in gdb",
    "start": "1626100",
    "end": "1631140"
  },
  {
    "text": "the problem is that gdb puts environment variables into your stack like vironment",
    "start": "1631140",
    "end": "1637860"
  },
  {
    "text": "variables are located on the stack so it will move around where your buffer is located in the end so in order to",
    "start": "1637860",
    "end": "1644929"
  },
  {
    "text": "facilitate that you can either remove it by hand or you use this fancy script",
    "start": "1644929",
    "end": "1650220"
  },
  {
    "text": "called fixed ends which you can get from github and it will adjust your stack for",
    "start": "1650220",
    "end": "1656610"
  },
  {
    "text": "you yeah that's basically it",
    "start": "1656610",
    "end": "1663980"
  },
  {
    "text": "if you have any questions feel free but",
    "start": "1664790",
    "end": "1670260"
  },
  {
    "text": "otherwise I'm giving away some risk 5 ports and hardware if you have some",
    "start": "1670260",
    "end": "1676559"
  },
  {
    "text": "fancy project come talk to me and I will hand you a board and maybe tweet about",
    "start": "1676559",
    "end": "1681929"
  },
  {
    "text": "what you want to do to motivate you more yeah that's oh do you have any questions",
    "start": "1681929",
    "end": "1691280"
  },
  {
    "start": "1690000",
    "end": "1879000"
  },
  {
    "text": "the rest you pass on is deck",
    "start": "1703130",
    "end": "1707120"
  },
  {
    "text": "look okay on you said earlier that we have 32 general-purpose registers but",
    "start": "1716390",
    "end": "1722910"
  },
  {
    "text": "only 0 to 7 is used through pass arguments and return values so I was",
    "start": "1722910",
    "end": "1728820"
  },
  {
    "text": "wondering what happened with the rest of them yeah the other is for example in L register or the return address register",
    "start": "1728820",
    "end": "1736260"
  },
  {
    "text": "or frame pointer yeah so basically they",
    "start": "1736260",
    "end": "1742440"
  },
  {
    "text": "are used but they are not used from argument passing or temporary registers",
    "start": "1742440",
    "end": "1747870"
  },
  {
    "text": "where you just store values but you don't they are not defined as passing",
    "start": "1747870",
    "end": "1753360"
  },
  {
    "text": "two functions registers yeah there was another question I think nope",
    "start": "1753360",
    "end": "1762680"
  },
  {
    "text": "hello wait I have some questions because",
    "start": "1771580",
    "end": "1776890"
  },
  {
    "text": "to shear the sharp point or we say the",
    "start": "1776890",
    "end": "1784460"
  },
  {
    "text": "function you quarter when you return that is the code you can access in your",
    "start": "1784460",
    "end": "1791410"
  },
  {
    "text": "Linux of OS which do you think everyone",
    "start": "1791410",
    "end": "1798860"
  },
  {
    "text": "likes um I'm sure you can return and create a shell shell command and console",
    "start": "1798860",
    "end": "1809980"
  },
  {
    "text": "okay yes yes you after you run this",
    "start": "1813610",
    "end": "1818780"
  },
  {
    "text": "program you just render vulnerable function yes and this function is a the",
    "start": "1818780",
    "end": "1825740"
  },
  {
    "text": "code decoder you can access all the memory you can access or because OS",
    "start": "1825740",
    "end": "1833530"
  },
  {
    "text": "links have some memory mm you yeah that'll will limit to you access the",
    "start": "1833530",
    "end": "1840860"
  },
  {
    "text": "page you you want to but you put it on a stack so basically you can access path",
    "start": "1840860",
    "end": "1849410"
  },
  {
    "text": "right so you can also access stuff plus 12 or above plus 42 okay is that that",
    "start": "1849410",
    "end": "1857270"
  },
  {
    "text": "pager you can access you don't have the authority to us access a page all the reads and writes and executions edit you",
    "start": "1857270",
    "end": "1865910"
  },
  {
    "text": "have the authority to write at least and it's example to execute as well okay you",
    "start": "1865910",
    "end": "1873890"
  },
  {
    "text": "cost you if you are in kernel space that you can access it but this one it's not in kernel space this one is for example",
    "start": "1873890",
    "end": "1878990"
  },
  {
    "text": "user space but I mean the same techniques apply in kernel space you're just excessing what you can use in your",
    "start": "1878990",
    "end": "1885500"
  },
  {
    "start": "1879000",
    "end": "2087000"
  },
  {
    "text": "program as well you're not you are in your thread you're not looking at threads two or three which does",
    "start": "1885500",
    "end": "1891560"
  },
  {
    "text": "something different Europe in your address space basically so if I have a",
    "start": "1891560",
    "end": "1897350"
  },
  {
    "text": "one one puncturing you might mean a PP application and another one is an",
    "start": "1897350",
    "end": "1903710"
  },
  {
    "text": "another users right there I actually don't so I cannot you can it would be much",
    "start": "1903710",
    "end": "1912170"
  },
  {
    "text": "more complicated this one they think the target gets one program what I can access it yeah the for memory",
    "start": "1912170",
    "end": "1920090"
  },
  {
    "text": "the examples yeah okay it is not the company okay that's example hello I have",
    "start": "1920090",
    "end": "1934430"
  },
  {
    "text": "a question about that about our ROP attack I think that you have a fix event",
    "start": "1934430",
    "end": "1942110"
  },
  {
    "text": "okay fixing environment to the shell script so I think that maybe the asar",
    "start": "1942110",
    "end": "1948980"
  },
  {
    "text": "are disabled yeah for all those examples basically s are stable because I mean",
    "start": "1948980",
    "end": "1956030"
  },
  {
    "text": "otherwise you have to run it 1000 times and might do the same and what is the",
    "start": "1956030",
    "end": "1963770"
  },
  {
    "text": "efforts were for you to find a net to catch it for normal architectures you",
    "start": "1963770",
    "end": "1970610"
  },
  {
    "text": "have actually programs like for are more x86 you can call Rob gadget or their",
    "start": "1970610",
    "end": "1977480"
  },
  {
    "text": "Python modules but I know you have a tool right to do that yeah since that one it's not it will be implemented I",
    "start": "1977480",
    "end": "1983540"
  },
  {
    "text": "think in the next month but but for now I just use grep okay okay and have you",
    "start": "1983540",
    "end": "1990950"
  },
  {
    "text": "compared the I mean the same application that compiled a four-poster PI on the",
    "start": "1990950",
    "end": "1998210"
  },
  {
    "text": "risk of Phi and that are any code size gender any I mean the total size chance",
    "start": "1998210",
    "end": "2006150"
  },
  {
    "text": "difference comparison that's in any case you have a different architecture you",
    "start": "2006150",
    "end": "2011260"
  },
  {
    "text": "have different instructions you have different code size yeah I mean which one is a smaller depends I mean my",
    "start": "2011260",
    "end": "2018790"
  },
  {
    "text": "shellcode is not very sophisticated quickly written so you can make it small",
    "start": "2018790",
    "end": "2023890"
  },
  {
    "text": "I think you can just put it in 32 byte or something depends on how much time you want to dedicate to write your",
    "start": "2023890",
    "end": "2030160"
  },
  {
    "text": "shellcode but actually risk 5 and armed are quite similar in terms of",
    "start": "2030160",
    "end": "2035350"
  },
  {
    "text": "instructions that in terms of philosophy most techniques you can apply on arm you",
    "start": "2035350",
    "end": "2040820"
  },
  {
    "text": "can also apply on risk I'd notice okay and so actually you and also income like",
    "start": "2040820",
    "end": "2048980"
  },
  {
    "text": "if you're asking about normal programs it depends highly on your compiler how well he can optimize for the platform",
    "start": "2048980",
    "end": "2054470"
  },
  {
    "text": "yeah you mean for GCC they have optimize down there yeah I don't know how good the optimization for risk fighters",
    "start": "2054470",
    "end": "2061159"
  },
  {
    "text": "okay yeah and can't go back to the general registered held as a slice",
    "start": "2061160",
    "end": "2069200"
  },
  {
    "text": "Mitch which is the difference in your arc yeah it's the next one yeah",
    "start": "2069200",
    "end": "2086440"
  },
  {
    "text": "what's everything compare each arm dead like the bank to register is aiming the risk if I denied",
    "start": "2086440",
    "end": "2095139"
  },
  {
    "text": "so again I mean the back to register yeah when you are switch to the context",
    "start": "2095140",
    "end": "2102500"
  },
  {
    "text": "and I means a privileged mode so the same Bank some register well to be",
    "start": "2102500",
    "end": "2108920"
  },
  {
    "text": "banked I didn't look into that okay but",
    "start": "2108920",
    "end": "2115190"
  },
  {
    "text": "I guess it depends on your",
    "start": "2115190",
    "end": "2121100"
  },
  {
    "text": "implementation okay and yeah I can",
    "start": "2121100",
    "end": "2126650"
  },
  {
    "text": "channel to an ask questions that you have a mentioned the citizens there are",
    "start": "2126650",
    "end": "2131750"
  },
  {
    "text": "compressed instructions yeah a comparator some mode so this is a it",
    "start": "2131750",
    "end": "2137270"
  },
  {
    "text": "dynamically changed like in arm we have a VIX but in risk by implicit yeah it",
    "start": "2137270",
    "end": "2146930"
  },
  {
    "text": "can directly decode you don't need to change between modes like you saw in the shell code for example I present it",
    "start": "2146930",
    "end": "2153170"
  },
  {
    "text": "mmm-hmm summer that you have",
    "start": "2153170",
    "end": "2160730"
  },
  {
    "start": "2159000",
    "end": "2182000"
  },
  {
    "text": "instructions which are two byte and size and instructions which are pro byte in size and you don't need an instruction",
    "start": "2160730",
    "end": "2166040"
  },
  {
    "text": "in between just works like that okay so that's it okay thank you yeah thank you time's up thanks a lot",
    "start": "2166040",
    "end": "2173720"
  },
  {
    "text": "for listening and if you have more questions come and talk to me I'm happy to talk about those topics",
    "start": "2173720",
    "end": "2179800"
  }
]