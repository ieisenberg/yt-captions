[
  {
    "text": "okay cool um apologies for my raspy voice it's the Midwest air I guess um",
    "start": "240",
    "end": "7600"
  },
  {
    "text": "coming from Toronto uh welcome to my talk it um it's about adopting service",
    "start": "7600",
    "end": "13719"
  },
  {
    "text": "side apply my name is Dave perosi jump in uh I am first intro I'm a Staff",
    "start": "13719",
    "end": "19840"
  },
  {
    "text": "engineer at VMware potentially soon to be broadcom to be determined who mystery",
    "start": "19840",
    "end": "26160"
  },
  {
    "text": "um uh I work on can of open source project I'm the serving lead and I'm",
    "start": "26160",
    "end": "31560"
  },
  {
    "text": "also on the technical oversight committee there um some links I still use the Twitter Bluebird because I like",
    "start": "31560",
    "end": "38879"
  },
  {
    "text": "it I haven't updated my Twitter W in two years so still works uh for the agenda today I'm going",
    "start": "38879",
    "end": "44719"
  },
  {
    "text": "to cover um kind of like what's the problem with client side apply kind of go into a",
    "start": "44719",
    "end": "50760"
  },
  {
    "text": "quick overview of server side apply kind of talk about K native and then how service side apply impacts how I view we",
    "start": "50760",
    "end": "58960"
  },
  {
    "text": "can adopt it in k and sort of like the status of um my work there and the",
    "start": "58960",
    "end": "64198"
  },
  {
    "text": "learnings that I have so client side update is essentially kind of like what most",
    "start": "64199",
    "end": "69960"
  },
  {
    "text": "controllers are doing also when you do cou cuto apply is the default application of applying resources to a",
    "start": "69960",
    "end": "76520"
  },
  {
    "text": "server so kind of like an example of a problem is let's say we have a config",
    "start": "76520",
    "end": "81560"
  },
  {
    "text": "map on the API server and we have two people trying to update it so the first",
    "start": "81560",
    "end": "89159"
  },
  {
    "text": "application from um let's say that's me uh will update it and then",
    "start": "89159",
    "end": "96479"
  },
  {
    "text": "subsequently another person doing an update uh potentially can cause a conflict if they have like resource",
    "start": "96479",
    "end": "102640"
  },
  {
    "text": "version set and so forth like that so what does the other person have to do they might need to redo the application",
    "start": "102640",
    "end": "109520"
  },
  {
    "text": "but if they don't properly update that um config map with what's from the server then event eventually you lose",
    "start": "109520",
    "end": "116840"
  },
  {
    "text": "and you have some data loss um and kind of what that means is you'll",
    "start": "116840",
    "end": "124439"
  },
  {
    "text": "get conflicts or most controllers encounter conflicts so if you see 409s when you do a lot of controller updates",
    "start": "124439",
    "end": "130759"
  },
  {
    "text": "that means then you got to do refetch and retry the request if you're ref fetching and retrying is very dumb for",
    "start": "130759",
    "end": "138120"
  },
  {
    "text": "whatever reason um you have potential data loss and a lot of um issues that I",
    "start": "138120",
    "end": "143360"
  },
  {
    "text": "see or we we've encountered is you get infinite churn where we have controllers fighting each other once try to update",
    "start": "143360",
    "end": "149920"
  },
  {
    "text": "one the other one's trying to update the other there's loss so they see something's not there they keep going",
    "start": "149920",
    "end": "155440"
  },
  {
    "text": "forever and then you'll see your observe Generation Um Spike up quite a bit um so",
    "start": "155440",
    "end": "162319"
  },
  {
    "text": "surface side apply um going to steal the definition from the docks it's actually pretty",
    "start": "162319",
    "end": "169200"
  },
  {
    "text": "useful uh mult or so first the fields of a single object I kind of just want to",
    "start": "169200",
    "end": "174400"
  },
  {
    "text": "cover this a little bit in detail so what is an object in kubernetes it has a structured scheme and there's endpoints",
    "start": "174400",
    "end": "180680"
  },
  {
    "text": "you can see the structure on the right you have API version kind you have metadata and then you have spec and you",
    "start": "180680",
    "end": "186920"
  },
  {
    "text": "have status and you can kind of see that you have below that um the different end points there's also other end points",
    "start": "186920",
    "end": "194720"
  },
  {
    "text": "that I haven't mentioned like scale sub resource instead of status and technically like different resources of",
    "start": "194720",
    "end": "200599"
  },
  {
    "text": "other ones um multiple appliers um in the example I had before",
    "start": "200599",
    "end": "207360"
  },
  {
    "text": "we have me and technically that's GitHub me at the bottom um and what are they trying to do",
    "start": "207360",
    "end": "213400"
  },
  {
    "text": "they're trying to manage what the changes that they want on the resource so what service Sly lets you do is when",
    "start": "213400",
    "end": "221159"
  },
  {
    "text": "you use this flag and you specify who you are as the field manager it will",
    "start": "221159",
    "end": "226439"
  },
  {
    "text": "essentially merge these in very cleanly because it kind of knows that hey I'm",
    "start": "226439",
    "end": "231680"
  },
  {
    "text": "only trying to apply the changes I need and I'm not like trumping and overriding the entire",
    "start": "231680",
    "end": "238079"
  },
  {
    "text": "resource um and this is kind of what it looks like when you um get the entire",
    "start": "238079",
    "end": "243519"
  },
  {
    "text": "resource and show the fields and it's these managed fields which kubernetes uses um in order to manage who has",
    "start": "243519",
    "end": "251040"
  },
  {
    "text": "ownership of which Fields so in the first part uh you can see like young me",
    "start": "251040",
    "end": "257199"
  },
  {
    "text": "over here in the blue I wanted to apply the city and I have sort of like let me",
    "start": "257199",
    "end": "262919"
  },
  {
    "text": "see if this works uh you can kind of see have the I own the city property in this config map and likewise uh new GitHub me",
    "start": "262919",
    "end": "271160"
  },
  {
    "text": "down here owns uh the conference field so then any potential further updates um",
    "start": "271160",
    "end": "277720"
  },
  {
    "text": "like with to those fields won't necessarily cause like a conflict I'm not going to go super deep in what",
    "start": "277720",
    "end": "283280"
  },
  {
    "text": "server side apply can do there's already been better talks to to see you can see",
    "start": "283280",
    "end": "288600"
  },
  {
    "text": "it on YouTube and also the docs are very good about um the semantics of how it works the details of it so forth like",
    "start": "288600",
    "end": "295160"
  },
  {
    "text": "that um I'm going to kind of talk about how that applies to K need so what is K",
    "start": "295160",
    "end": "300479"
  },
  {
    "text": "native K native is an open source project um there's a whole bunch of building blocks but you can use them all",
    "start": "300479",
    "end": "306320"
  },
  {
    "text": "to build essentially like a serverless um kind of platform um found in 2018 and",
    "start": "306320",
    "end": "312919"
  },
  {
    "text": "it's been incubating uh cncf as of last year I suggest visit the website go do",
    "start": "312919",
    "end": "318840"
  },
  {
    "text": "the getting started tutorials and um yeah so kind of the high level what",
    "start": "318840",
    "end": "325880"
  },
  {
    "text": "are all the components in K native you have kind of serving that does the auto scaling scaling to zero runs your",
    "start": "325880",
    "end": "332240"
  },
  {
    "text": "workloads Eventing lets you bind events from sources to the syns um so you can",
    "start": "332240",
    "end": "339080"
  },
  {
    "text": "handle it you also have sort of a client it's like a CLI that lets you create the KE of services and so forth and then you",
    "start": "339080",
    "end": "344919"
  },
  {
    "text": "have functions which let you turn a function into a container all these things are can be used separately",
    "start": "344919",
    "end": "351479"
  },
  {
    "text": "independently um and can be used together to build stuff but I'm going to kind of cover just the serving bit",
    "start": "351479",
    "end": "357840"
  },
  {
    "text": "that's kind of where I have the specialty so I'm going to keep going um",
    "start": "357840",
    "end": "363360"
  },
  {
    "text": "so I'm going to run through this really quick so the resource model at the top when you have a create a knen service",
    "start": "363360",
    "end": "370960"
  },
  {
    "text": "create we create like a service object that actually is just a helper to then",
    "start": "370960",
    "end": "377280"
  },
  {
    "text": "manage two separate objects a route and a config um config ends up producing and",
    "start": "377280",
    "end": "382800"
  },
  {
    "text": "stamping out revisions uh on the route side you end up getting um aade service and ing and",
    "start": "382800",
    "end": "389800"
  },
  {
    "text": "eventually this boils down to programming some networking layer and then from the revision side you end up",
    "start": "389800",
    "end": "396120"
  },
  {
    "text": "getting a deployment and a whole whole bunch of resources and those resources end up creating many more resources hey",
    "start": "396120",
    "end": "402400"
  },
  {
    "text": "why is this so complex let me show you it's a pluggable auto scaling system and this plugable Auto scaling lets you um",
    "start": "402400",
    "end": "409400"
  },
  {
    "text": "it's what captures all the metrics lets you scale to zero and so forth um and then the routes the HP routes here kind",
    "start": "409400",
    "end": "416319"
  },
  {
    "text": "of point to this public service um um in terms of actual components that are",
    "start": "416319",
    "end": "421520"
  },
  {
    "text": "running well let's say we have the kcpi we have controllers and web hooks um",
    "start": "421520",
    "end": "427160"
  },
  {
    "text": "eventally when you create and Stamp Out the workload as a pod you have a user container and we have a sidecar proxy",
    "start": "427160",
    "end": "433360"
  },
  {
    "text": "that helps you get metrics and so forth like that uh we wire in the Ingress to",
    "start": "433360",
    "end": "438560"
  },
  {
    "text": "serve traffic to that workload we have an autoscaler that scrapes those metrics",
    "start": "438560",
    "end": "444520"
  },
  {
    "text": "it will then scale that down to zero when it has nothing um when there's",
    "start": "444520",
    "end": "449639"
  },
  {
    "text": "nothing we need something to receive a request that's what we call the activator that sends metrics to",
    "start": "449639",
    "end": "455280"
  },
  {
    "text": "autoscaler saying hey we have traffic and then you'll scale about that back up to one or",
    "start": "455280",
    "end": "460840"
  },
  {
    "text": "more um I'm going to kind of dig into the controller a bit so our controllers",
    "start": "460840",
    "end": "466960"
  },
  {
    "text": "I kind of describing like the practices we follow um these I think are consider like best practices for kubernetes",
    "start": "466960",
    "end": "473240"
  },
  {
    "text": "controllers like level based um you don't react to edges you should be able to do resyncs of your resources and kind",
    "start": "473240",
    "end": "480199"
  },
  {
    "text": "of take action on that item potent it should always be same input same output and reconstructive so if um I need to",
    "start": "480199",
    "end": "488520"
  },
  {
    "text": "recreate the resource from scratch I should be able to get the same result um this is where gets interesting",
    "start": "488520",
    "end": "494800"
  },
  {
    "text": "so the control flow we have in our reconciliation is honestly is kind of",
    "start": "494800",
    "end": "500960"
  },
  {
    "text": "straightforward in theory hey you want to list your resource and get it if it doesn't exist then you go create it um",
    "start": "500960",
    "end": "508840"
  },
  {
    "text": "and then if it does exist we want to compare what's on the server with what we want and then if it's different we",
    "start": "508840",
    "end": "515240"
  },
  {
    "text": "have to do an update if it's the same we don't want to do an update um but guess what we're not using",
    "start": "515240",
    "end": "520599"
  },
  {
    "text": "server side apply so what do we have to do oh yeah and we also have multiple",
    "start": "520599",
    "end": "525680"
  },
  {
    "text": "appliers which means then we have some conflict so the way we kind of get",
    "start": "525680",
    "end": "530920"
  },
  {
    "text": "around it and I kind of put like the the fire and the Poo because it's kind of",
    "start": "530920",
    "end": "536200"
  },
  {
    "text": "like an unnecessary hack in in a way where because we have multiple appliers we have to know what Fields we're going",
    "start": "536200",
    "end": "543040"
  },
  {
    "text": "to be trumping and conflicting on so what we actually end up doing is preserving Fields um from the actual",
    "start": "543040",
    "end": "550680"
  },
  {
    "text": "resource to our desired spec um and then doing the comparison so I'm going to kind of",
    "start": "550680",
    "end": "557440"
  },
  {
    "text": "highlight the contention points that we have so we have a web hook and our web",
    "start": "557440",
    "end": "564360"
  },
  {
    "text": "hook actually updates the web hook and figs with like secrets and",
    "start": "564360",
    "end": "570040"
  },
  {
    "text": "client configs and stuff like that um but unfortunately there's other things that mutate our web hooks which is very",
    "start": "570040",
    "end": "576519"
  },
  {
    "text": "confusing and this was like an initial bug report where",
    "start": "576519",
    "end": "581760"
  },
  {
    "text": "uh K didn't work on AKs because the AKs control plane is actually adding and",
    "start": "581760",
    "end": "588200"
  },
  {
    "text": "mutating the mutating web hooks adding an extra um selector to exclude some name spaces there's an issue down there",
    "start": "588200",
    "end": "594959"
  },
  {
    "text": "it seems like they're going to resolve it but essentially this is an example um um we have a revision own that owns the",
    "start": "594959",
    "end": "601680"
  },
  {
    "text": "deployment what does that mean it means the component the controller reconciles the",
    "start": "601680",
    "end": "607040"
  },
  {
    "text": "deployment and it kind of owns the metadata in the spec but hey we have an autoscaler it needs to be able to set",
    "start": "607040",
    "end": "613200"
  },
  {
    "text": "the replicas and we also have some networking controllers trying to set some",
    "start": "613200",
    "end": "619040"
  },
  {
    "text": "labels um so the question is hey do we still need",
    "start": "619040",
    "end": "625760"
  },
  {
    "text": "server side apply if we have this fiery poo of a work around do we need do we need it um and this is I think like my",
    "start": "625760",
    "end": "634640"
  },
  {
    "text": "favorite issue so far is the answer is yes so I'll explain why",
    "start": "634640",
    "end": "640680"
  },
  {
    "text": "so this issue is from Sasha Sasha works at IBM and Sasha works on code engine",
    "start": "640680",
    "end": "648839"
  },
  {
    "text": "which is the hosted K native um on IBM's uh cloud and what he discovered is that um",
    "start": "648839",
    "end": "658160"
  },
  {
    "text": "even though we have these checks to do this comparison it never returns true so even though we had all these mitigations",
    "start": "658160",
    "end": "664279"
  },
  {
    "text": "and we thought we're being all clever with our um flaming poo workarounds um this check never worked",
    "start": "664279",
    "end": "671560"
  },
  {
    "text": "and the big reason why I highlighted is the defaulting and Paul helped to find that out too thanks Paul so what does",
    "start": "671560",
    "end": "677320"
  },
  {
    "text": "that mean that means that when we create a deployment well guess what the kubernetes API is going to default some",
    "start": "677320",
    "end": "683800"
  },
  {
    "text": "properties and we don't really know well you could find out what they are but then new version of kuber comes out and",
    "start": "683800",
    "end": "689800"
  },
  {
    "text": "then you don't know what it is and also technically any web hook can default",
    "start": "689800",
    "end": "695000"
  },
  {
    "text": "properties when you create it it can set something and so forth um so going give an example so when you do a apply of a",
    "start": "695000",
    "end": "702079"
  },
  {
    "text": "pod and you look at the manage Fields you can kind of see well you know what I didn't really set the DNS policy I",
    "start": "702079",
    "end": "709279"
  },
  {
    "text": "didn't set enable service links I didn't set restart policy like these are things that come from the default thing of",
    "start": "709279",
    "end": "715440"
  },
  {
    "text": "kubernetes and when you do a regular apply which is like Creator update dat it's going to assume your intent is you",
    "start": "715440",
    "end": "722440"
  },
  {
    "text": "own these fields in contrast if I do server side apply you can kind of see",
    "start": "722440",
    "end": "728360"
  },
  {
    "text": "that like hey actually what I applied is what I want right I want to have ownership of these",
    "start": "728360",
    "end": "735480"
  },
  {
    "text": "fields um and this is sort of the comparison on the right you have the",
    "start": "735480",
    "end": "740920"
  },
  {
    "text": "surface side apply on the left you have the regular update with the defaulting um the next thing I kind of",
    "start": "740920",
    "end": "747720"
  },
  {
    "text": "want to cover so we kind of the contention points um I kind of want to cover hey our API the serving API at",
    "start": "747720",
    "end": "755120"
  },
  {
    "text": "least kind of was um created in 2018 server s side apply when G in",
    "start": "755120",
    "end": "760720"
  },
  {
    "text": "2021 and what does that mean well if you take a look at kind of like our resource",
    "start": "760720",
    "end": "766600"
  },
  {
    "text": "graph you can kind of see all the arrows point in the same place or sorry it's",
    "start": "766600",
    "end": "773040"
  },
  {
    "text": "essentially a dag like you don't have arrows pointing to each other um and what does that mean that means like one",
    "start": "773040",
    "end": "779839"
  },
  {
    "text": "resource usually owns a different resource and you don't have any shared",
    "start": "779839",
    "end": "785199"
  },
  {
    "text": "cooperation and what's kind of weird too is like hey why does this HB route Point all the way to this like public",
    "start": "785199",
    "end": "791519"
  },
  {
    "text": "kubernetes service wouldn't it make sense that that might be some shared resource and what also ends up happening",
    "start": "791519",
    "end": "797600"
  },
  {
    "text": "is in order because we have these like this hierarchy some properties that",
    "start": "797600",
    "end": "802880"
  },
  {
    "text": "shouldn't be in the autoscaling system are being propagated through our spec so for example uh when the revision creates",
    "start": "802880",
    "end": "810040"
  },
  {
    "text": "like a pod autoscaler we say what protocol that revision is running and that propagates down because we're",
    "start": "810040",
    "end": "816040"
  },
  {
    "text": "creating the service right um ideally I think what would make sense is If",
    "start": "816040",
    "end": "822920"
  },
  {
    "text": "instead the revision could create um this public service specify the",
    "start": "822920",
    "end": "828560"
  },
  {
    "text": "container ports and all that stuff and then we have this other um serverless service just essentially owning the",
    "start": "828560",
    "end": "835800"
  },
  {
    "text": "selectors it can remove the selectors or change it and then instead you have this cooperation and then there's actually",
    "start": "835800",
    "end": "842320"
  },
  {
    "text": "would make the pluggable auto scaler simpler to write if you want to change it up and do something else in my",
    "start": "842320",
    "end": "849120"
  },
  {
    "text": "mind um so uh implementing service apply I'm",
    "start": "849120",
    "end": "856040"
  },
  {
    "text": "still prototyping it even though the talk kind of was a little bit of bait and switch cuz I'll tell you why",
    "start": "856040",
    "end": "862639"
  },
  {
    "text": "um my rough plan though is like I want to get um replace the web hooks with apply then we want want to solve the",
    "start": "862639",
    "end": "869480"
  },
  {
    "text": "deployment like a Reconciliation of our deployment to use server side apply then apply the autoscaler um do performance",
    "start": "869480",
    "end": "877120"
  },
  {
    "text": "analysis and then maybe we can create server side apply um when we create our",
    "start": "877120",
    "end": "884079"
  },
  {
    "text": "internal crds and so forth like that but from the work I've done these are kind of like the learnings that I have um so",
    "start": "884079",
    "end": "892360"
  },
  {
    "text": "if you haven't played with it yet so in client go you have API types when you",
    "start": "892360",
    "end": "898120"
  },
  {
    "text": "use ser side apply you're actually using a distinct set of go types they call they call them apply configuration the",
    "start": "898120",
    "end": "905320"
  },
  {
    "text": "reason why you do that is because in the existing go types you can't tell if",
    "start": "905320",
    "end": "910600"
  },
  {
    "text": "something's empty because you set it to empty um and in these apply",
    "start": "910600",
    "end": "915639"
  },
  {
    "text": "configurations everything is a pointer so a string if you it's unset is nil if",
    "start": "915639",
    "end": "921839"
  },
  {
    "text": "it's empty then it'll be a pointer to an empty string um and then there's some tooling to help generate um these apply",
    "start": "921839",
    "end": "929959"
  },
  {
    "text": "configurations similar to how you have like the client set tooling there's um tooling and code generator um project",
    "start": "929959",
    "end": "936959"
  },
  {
    "text": "called apply configuration gen um and then likewise the client set tooling to",
    "start": "936959",
    "end": "942639"
  },
  {
    "text": "generate your client sets now actually takes in this apply configuration package um the tooling needs a little",
    "start": "942639",
    "end": "949160"
  },
  {
    "text": "bit of work with custom resources so for example I was trying to add this to some apply configs and update the Gateway API",
    "start": "949160",
    "end": "956800"
  },
  {
    "text": "client set tooling and I kind of noticed that um in addition to this apply gen",
    "start": "956800",
    "end": "964079"
  },
  {
    "text": "config you have to run some other tooling and then kubernetes has some special code in order",
    "start": "964079",
    "end": "971680"
  },
  {
    "text": "to process some op API output that feeds into the supply gen configuration so it",
    "start": "971680",
    "end": "977160"
  },
  {
    "text": "kind of needed so I kind of copied that tooling from kubernetes to this Gateway",
    "start": "977160",
    "end": "984360"
  },
  {
    "text": "API so we could do it but that could easily be pulled in I think into the code generators um so that's something I've observed so",
    "start": "984360",
    "end": "991240"
  },
  {
    "text": "if you kind of want to see hey I want an apply uh config client and also these toolings I would say look at this PR",
    "start": "991240",
    "end": "998040"
  },
  {
    "text": "this will show you what you kind of need to do at this point in time to get it working with",
    "start": "998040",
    "end": "1003839"
  },
  {
    "text": "crds um the next thing I learned is unit testing so for those that aren't aware",
    "start": "1003839",
    "end": "1009079"
  },
  {
    "text": "ketive has its own kind of controller framework it's sort of just a symptom of it was built before controller runtime",
    "start": "1009079",
    "end": "1014720"
  },
  {
    "text": "was around um and I think in contrast to controller runtime we actually do",
    "start": "1014720",
    "end": "1021720"
  },
  {
    "text": "testing with client go and use fakes so we don't spin up an API server locally we don't spin up at CD it's really just",
    "start": "1021720",
    "end": "1028160"
  },
  {
    "text": "more like being able to test things um quickly and have the tight feedback loop",
    "start": "1028160",
    "end": "1034120"
  },
  {
    "text": "when we do unit testing um but unfortunately for server side apply the",
    "start": "1034120",
    "end": "1040558"
  },
  {
    "text": "there's a PR to land server side apply in the the fake support that's in the",
    "start": "1040559",
    "end": "1045918"
  },
  {
    "text": "client go um like the fake kubernetes client um so there's a poll request",
    "start": "1045919",
    "end": "1051720"
  },
  {
    "text": "that's been open for a while I've been talking to Antoine like it'd be great to like get that moving along so I'll",
    "start": "1051720",
    "end": "1057120"
  },
  {
    "text": "probably help review some of that stuff and test it out with K native at least but at least for now this is I think",
    "start": "1057120",
    "end": "1062799"
  },
  {
    "text": "What's blocking our adoption um because I I don't want to do",
    "start": "1062799",
    "end": "1069320"
  },
  {
    "text": "servery apply without having any unit testing for it that would be kind of scary um and here's another interesting",
    "start": "1069320",
    "end": "1077600"
  },
  {
    "text": "thing I kind of observed served too so when you so this manage field when you",
    "start": "1077600",
    "end": "1083000"
  },
  {
    "text": "look at it you can kind of see this operation it's an update this is what happens when you essentially do a um",
    "start": "1083000",
    "end": "1090799"
  },
  {
    "text": "your controller doesn't update or you do a coup cutle apply as an example and switching from an update to an apply",
    "start": "1090799",
    "end": "1097960"
  },
  {
    "text": "let's say you own the same Fields as well um requires you to force a conflict",
    "start": "1097960",
    "end": "1103679"
  },
  {
    "text": "so if you kind of go back in time to the slide where link out to the server side",
    "start": "1103679",
    "end": "1109559"
  },
  {
    "text": "apply docs when there is actually a conflict between um two appliers and",
    "start": "1109559",
    "end": "1116960"
  },
  {
    "text": "they want to own the same field you have to specify you want to force um",
    "start": "1116960",
    "end": "1122720"
  },
  {
    "text": "ownership of it so that way if someone owns it it'll return a conflict if you want it you say Force the true um I",
    "start": "1122720",
    "end": "1130520"
  },
  {
    "text": "found it a little bit surprising that if you already own the fuel via the update operation then you have to",
    "start": "1130520",
    "end": "1136840"
  },
  {
    "text": "um do do an apply but I think that's what it is that might be something that's worth to bring up with the API",
    "start": "1136840",
    "end": "1144480"
  },
  {
    "text": "Machinery folks to see if like I don't know what the intent was but it's just something that caught me off",
    "start": "1144480",
    "end": "1150360"
  },
  {
    "text": "guard um probably the other thing to talk about too is in the blog post the",
    "start": "1150360",
    "end": "1158039"
  },
  {
    "text": "which I ref here which is great um kind of what they're recommending as the",
    "start": "1158039",
    "end": "1164000"
  },
  {
    "text": "control flow for um controllers is get the resource extract from um that",
    "start": "1164000",
    "end": "1170840"
  },
  {
    "text": "resource what your intention is because you're able to use the manage fields and the spec to figure out what you want",
    "start": "1170840",
    "end": "1176960"
  },
  {
    "text": "make the modifications and apply them again um but I don't think this solves",
    "start": "1176960",
    "end": "1182120"
  },
  {
    "text": "Sasha's problem of the excessive updates so this is where like I'm C currently",
    "start": "1182120",
    "end": "1187960"
  },
  {
    "text": "thinking like what's the best way to kind of get around this problem where I think this is like me using right now",
    "start": "1187960",
    "end": "1194880"
  },
  {
    "text": "and um I think what we need to do is generate this apply configuration get",
    "start": "1194880",
    "end": "1200320"
  },
  {
    "text": "the existing resource extract what we want from it but we also want to prune our apply config so as an example if the",
    "start": "1200320",
    "end": "1207840"
  },
  {
    "text": "autoscaler or actually we've had in the K native serving uh slack Channel",
    "start": "1207840",
    "end": "1213559"
  },
  {
    "text": "someone saying Hey I want to pause the autoscaler for a little bit I want to set the replicas to one just just for",
    "start": "1213559",
    "end": "1219720"
  },
  {
    "text": "temporarily and it'd be great if we could like handoff ownership using service side apply to a user they could",
    "start": "1219720",
    "end": "1226240"
  },
  {
    "text": "do some debugging then they can hand off that back to um the autoscaler when it's",
    "start": "1226240",
    "end": "1233240"
  },
  {
    "text": "um ready to resume the default autoc scaling stuff and I think we need to",
    "start": "1233240",
    "end": "1240360"
  },
  {
    "text": "have this kind of like ability to prune our apply config and see who owns the fields to do that um and then we only",
    "start": "1240360",
    "end": "1247440"
  },
  {
    "text": "want to do the apply if what we the prun config if it um is different from what",
    "start": "1247440",
    "end": "1253240"
  },
  {
    "text": "it's existing on the server now um and overall this is is uh I think",
    "start": "1253240",
    "end": "1259120"
  },
  {
    "text": "a talk that's to be continued um and I would also want to say huge",
    "start": "1259120",
    "end": "1265080"
  },
  {
    "text": "thanks to the k maintainers for landing such an amazing feature like it's not simple to do it's actually seems very",
    "start": "1265080",
    "end": "1272760"
  },
  {
    "text": "complex when you dig into it and you dig into like the structured diffing um libraries and so forth like that there",
    "start": "1272760",
    "end": "1279600"
  },
  {
    "text": "was a maintainer talk I put it in my schedule but it's actually already happened this morning so uh thanks for",
    "start": "1279600",
    "end": "1285159"
  },
  {
    "text": "those that went there and I would also say I encourage a lot of people to get involved so as I've discovered",
    "start": "1285159",
    "end": "1293279"
  },
  {
    "text": "um where service I apply is there is I think a lot of opportunity for",
    "start": "1293279",
    "end": "1298480"
  },
  {
    "text": "contribution and Improvement so um I ped Antoine um who did a lot of the work I",
    "start": "1298480",
    "end": "1305200"
  },
  {
    "text": "think there and he actually had a dock like of all the things that he had in mind of to improve the workflow like",
    "start": "1305200",
    "end": "1311520"
  },
  {
    "text": "more tooling more etc etc so I kind of linked that dock here so I would suggest anyone it's like I call the action",
    "start": "1311520",
    "end": "1318640"
  },
  {
    "text": "um this feature I think is like 99% there and there's like a little extra 1%",
    "start": "1318640",
    "end": "1324360"
  },
  {
    "text": "to make it very useful um for a broad set of people and that's all I have um",
    "start": "1324360",
    "end": "1333760"
  },
  {
    "text": "so I have my pouty face here so please don't be harsh on the review or you can be very harsh maybe I won't read them",
    "start": "1333760",
    "end": "1341210"
  },
  {
    "text": "[Laughter] so uh and that's it I don't know if",
    "start": "1341210",
    "end": "1346600"
  },
  {
    "text": "anyone has any questions I think takeaway is um kind of learn about K native and how service I apply can be",
    "start": "1346600",
    "end": "1353840"
  },
  {
    "text": "applied to the problems we have I hope you see that there are similar problems and the controllers that you're writing",
    "start": "1353840",
    "end": "1359559"
  },
  {
    "text": "um and then we can rally around making improving the tooling and so forth in the Upstream gaze",
    "start": "1359559",
    "end": "1367799"
  },
  {
    "text": "Community oh I'm assuming you're going to take questions I can yes and wow",
    "start": "1368960",
    "end": "1374880"
  },
  {
    "text": "that's the voice of God okay um so so it seems like there's a big dance to get",
    "start": "1374880",
    "end": "1381520"
  },
  {
    "text": "this stuff right do you have any thoughts about how the libraries could be structured to make it easier to not",
    "start": "1381520",
    "end": "1387600"
  },
  {
    "text": "wander off into the weeds because right now it seems like there's some Choose Your Own Adventure going on yeah",
    "start": "1387600",
    "end": "1394960"
  },
  {
    "text": "so I've seen in the K slack Channel um some interesting discussions and I don't",
    "start": "1394960",
    "end": "1400760"
  },
  {
    "text": "know you should there's going to be a talk later today from uh John Howard who works on the iso control plane and",
    "start": "1400760",
    "end": "1409760"
  },
  {
    "text": "it's I I feel like the future and I think this John agrees with this I think this is his idea I'm going to claim it",
    "start": "1409760",
    "end": "1416400"
  },
  {
    "text": "as my own now but it's actually his idea um where really your reconciliation should just be returning apply configs",
    "start": "1416400",
    "end": "1423159"
  },
  {
    "text": "right it doesn't actually have to um do any sort of updates to the controllers",
    "start": "1423159",
    "end": "1429520"
  },
  {
    "text": "and then it could be like a shared framework that takes those apply configs and applies them and I think this also",
    "start": "1429520",
    "end": "1435240"
  },
  {
    "text": "leads to like yes there is this concept of like needing to force the conflict so",
    "start": "1435240",
    "end": "1440279"
  },
  {
    "text": "I feel like even the current API could benefit it's fine to do two",
    "start": "1440279",
    "end": "1446039"
  },
  {
    "text": "calls but you might want to control that hey I'm okay to own these fields um or I'm okay to relinquish",
    "start": "1446039",
    "end": "1453679"
  },
  {
    "text": "certain Fields but certain Fields I'm not so really I feel like as part of reconciliation you need two apply configurations one where it's like",
    "start": "1453679",
    "end": "1460000"
  },
  {
    "text": "strict and one where it's kind of loose um I don't know if it makes sense to collapse that into a single API call or",
    "start": "1460000",
    "end": "1466880"
  },
  {
    "text": "not I but there's a clear workaround for that but yeah I agree where I think with",
    "start": "1466880",
    "end": "1472360"
  },
  {
    "text": "the apply config you could kind of tweak all the controllers to make it much easier to write controllers in my",
    "start": "1472360",
    "end": "1480320"
  },
  {
    "text": "mind thanks for the question hi uh I'm David eids one of the tech leads on",
    "start": "1480320",
    "end": "1486840"
  },
  {
    "text": "Machinery uh I was just going to ask if you could make time to come to the meet and greet on Thursday with your wish",
    "start": "1486840",
    "end": "1494159"
  },
  {
    "text": "list uh yours coincides well with mine okay I would love to talk about it and",
    "start": "1494159",
    "end": "1500159"
  },
  {
    "text": "I'll let the next guy go okay cool yeah nice okay I if I understand correctly if",
    "start": "1500159",
    "end": "1508799"
  },
  {
    "text": "a mutation web hook changes the resource yeah and you in the matching part you",
    "start": "1508799",
    "end": "1515679"
  },
  {
    "text": "accept that change from the mutation it gets to the managed Fields part and it's",
    "start": "1515679",
    "end": "1521520"
  },
  {
    "text": "uh you accept it it says okay this was a result of my update and if you are using s say but",
    "start": "1521520",
    "end": "1529279"
  },
  {
    "text": "still if you have lists of resources like multiple containers in the spec part and you have a desired state in",
    "start": "1529279",
    "end": "1535799"
  },
  {
    "text": "first reconciliation like multiple items in the list but in the next reconciliation like instead of two let's",
    "start": "1535799",
    "end": "1542080"
  },
  {
    "text": "say one then you still see in the server that in the managed Fields there are",
    "start": "1542080",
    "end": "1547799"
  },
  {
    "text": "like two and you don't know if that two is was added there I mean the second by",
    "start": "1547799",
    "end": "1553960"
  },
  {
    "text": "the mutation hook or for your desire St from the first sequenc ation um so if it's the mutating web",
    "start": "1553960",
    "end": "1562640"
  },
  {
    "text": "hook that yeah I guess you're saying I guess to recap you're saying",
    "start": "1562640",
    "end": "1567679"
  },
  {
    "text": "you can't distinguish between a mutating web hook and or if you were to reconcile it later on I think what would happen is",
    "start": "1567679",
    "end": "1574720"
  },
  {
    "text": "you would probably end up with",
    "start": "1574720",
    "end": "1579760"
  },
  {
    "text": "um trying to think I don't know this is one of those things where I would need",
    "start": "1579760",
    "end": "1585159"
  },
  {
    "text": "to test it so because I'm implementing the same thing and it's still a problem also what did",
    "start": "1585159",
    "end": "1592520"
  },
  {
    "text": "you find any proper documentation like in the managing Fields there are these I's and v's and I know from the",
    "start": "1592520",
    "end": "1599640"
  },
  {
    "text": "developers one of them is not used at all yeah so this is what's interesting so that field I guess let me show it for",
    "start": "1599640",
    "end": "1608919"
  },
  {
    "text": "everyone go quickly this is what happens when I",
    "start": "1609039",
    "end": "1614120"
  },
  {
    "text": "don't do animations yeah so yeah you can see the F and then and those ones",
    "start": "1614120",
    "end": "1622320"
  },
  {
    "text": "um essentially everything under Fields V1 is considered internal at this point",
    "start": "1622320",
    "end": "1629399"
  },
  {
    "text": "in time this is something I mentioned to Antoine where in order to that sort of like extract and prune I need the parser",
    "start": "1629399",
    "end": "1637279"
  },
  {
    "text": "right for the resource um what does the parser do well it it knows like what fields are um where in the spec and and",
    "start": "1637279",
    "end": "1645240"
  },
  {
    "text": "so forth like that and",
    "start": "1645240",
    "end": "1649520"
  },
  {
    "text": "it's and I was asking why is it internal and they just took the cautious approach of just not opening it up because they",
    "start": "1650279",
    "end": "1657000"
  },
  {
    "text": "may want to change it or something like that so I think if there's no for example consensus on exposing it then I",
    "start": "1657000",
    "end": "1664399"
  },
  {
    "text": "might we might need to generate um like our own schemas or own own parsers like",
    "start": "1664399",
    "end": "1670320"
  },
  {
    "text": "technically all the tooling is there and it's all open stor so if you need to just like change internal to like not",
    "start": "1670320",
    "end": "1676600"
  },
  {
    "text": "internal is the package name then you could do that um but I for the schema I I don't know",
    "start": "1676600",
    "end": "1684919"
  },
  {
    "text": "but I think it's all the structured merge it's all the structured merged um",
    "start": "1684919",
    "end": "1690519"
  },
  {
    "text": "repo and I haven't read the repo in detail so I mean but still you need it",
    "start": "1690519",
    "end": "1697320"
  },
  {
    "text": "for pruning the object matching so that's why if they if there's no consensus on um making that parser",
    "start": "1697320",
    "end": "1704799"
  },
  {
    "text": "public then we'll probably generate our own parser from the tooling",
    "start": "1704799",
    "end": "1711120"
  },
  {
    "text": "So yeah thank you yeah oh stick around because I want to hear more about the yeah I'll put it in my notes how does",
    "start": "1711120",
    "end": "1717799"
  },
  {
    "text": "this compare to patch oh so what's interesting even though it's called server sight apply it",
    "start": "1717799",
    "end": "1723559"
  },
  {
    "text": "actually uses a patch call um to the server I think it's just a special type of",
    "start": "1723559",
    "end": "1730279"
  },
  {
    "text": "patch okay so yeah when you actually look at the implementation of the clients like the that it generates like",
    "start": "1730279",
    "end": "1737080"
  },
  {
    "text": "there I think like structure merge patch which will like try to merge nicely with",
    "start": "1737080",
    "end": "1742279"
  },
  {
    "text": "an existing resource this would just be called I think I don't know what the exact um mime type is but it is like a",
    "start": "1742279",
    "end": "1749799"
  },
  {
    "text": "new mime type and the API server knows how to handle this new M type to do a",
    "start": "1749799",
    "end": "1755159"
  },
  {
    "text": "proper proper merage okay and do you have to declare the managers for the fields to",
    "start": "1755159",
    "end": "1762799"
  },
  {
    "text": "be able to use S app yes so that's why like I guess I kind of glossed over it",
    "start": "1762799",
    "end": "1768320"
  },
  {
    "text": "so this field manager so I think by default it probably uses your username when you use CBE cuddle is my guess I I",
    "start": "1768320",
    "end": "1774880"
  },
  {
    "text": "forget now but you can override what the field manager is so that's why I kind of just jokes said who am I here um as a",
    "start": "1774880",
    "end": "1781159"
  },
  {
    "text": "subshell and that's just a string yeah so yeah exactly so for example a controller what we would do is like um",
    "start": "1781159",
    "end": "1788360"
  },
  {
    "text": "for the web hook I could just hardcode it as web hook and Sun if you look at",
    "start": "1788360",
    "end": "1794320"
  },
  {
    "text": "the um manager here it's just like a a random string So in theory you could",
    "start": "1794320",
    "end": "1799559"
  },
  {
    "text": "have a bad actor controller for some reason using the same string as you",
    "start": "1799559",
    "end": "1804919"
  },
  {
    "text": "maybe actually you might be very common because you could deploy um something ha",
    "start": "1804919",
    "end": "1810000"
  },
  {
    "text": "and there's multiple pliers if you don't do lease coordination correctly um doing the same updates but um yeah that's just",
    "start": "1810000",
    "end": "1817000"
  },
  {
    "text": "some random string so when you do the actual when you generate these typed apply methods on your client sets one of",
    "start": "1817000",
    "end": "1823679"
  },
  {
    "text": "the options that it requires is the field manager okay last question you you",
    "start": "1823679",
    "end": "1829640"
  },
  {
    "text": "may have touched on this sorry but controller on time has a method called",
    "start": "1829640",
    "end": "1835440"
  },
  {
    "text": "create or update it takes a mutate function so when it's updating it always",
    "start": "1835440",
    "end": "1840519"
  },
  {
    "text": "fetches the latest copy of the object then runs the mutate and you're mutating",
    "start": "1840519",
    "end": "1845880"
  },
  {
    "text": "just just the fields that you want to mutate and it applies immediately so the the time between Fetch and apply is so",
    "start": "1845880",
    "end": "1853200"
  },
  {
    "text": "small yeah that in my experience you know if if my controller owns those two",
    "start": "1853200",
    "end": "1859039"
  },
  {
    "text": "Fields I'm always updating just those two Fields yeah and and the nature of you know fetch immediately apply has",
    "start": "1859039",
    "end": "1867320"
  },
  {
    "text": "gotten rid of most of those you know resource version you know conflicts uh",
    "start": "1867320",
    "end": "1872639"
  },
  {
    "text": "yeah exactly so I would say it's only when you have these distinct appliers work like that are um is where servers",
    "start": "1872639",
    "end": "1880000"
  },
  {
    "text": "apply really makes sense if it's just a single controller doing upd to a single resource or multiple resources you might",
    "start": "1880000",
    "end": "1885880"
  },
  {
    "text": "not need it but but that's when for example that AKs example kind have proed",
    "start": "1885880",
    "end": "1892840"
  },
  {
    "text": "that you might still need it but yeah and that's multiple appliers changing",
    "start": "1892840",
    "end": "1899399"
  },
  {
    "text": "the same field right technically well I guess let let me backtrack a little bit if you",
    "start": "1899399",
    "end": "1905760"
  },
  {
    "text": "um it's not the same field it because what service side apply will do will merge ownership nicely",
    "start": "1905760",
    "end": "1913880"
  },
  {
    "text": "um so I would say say that server side apply would still be useful um in the",
    "start": "1913880",
    "end": "1921080"
  },
  {
    "text": "example that you mentioned if you have multiple pliers multi modifying different fields I think",
    "start": "1921080",
    "end": "1927519"
  },
  {
    "text": "like think of the contention point is not the field but the actual",
    "start": "1927519",
    "end": "1933000"
  },
  {
    "text": "resource",
    "start": "1933159",
    "end": "1936159"
  },
  {
    "text": "okay",
    "start": "1946080",
    "end": "1949080"
  },
  {
    "text": "yeah so to recap what Evan's saying is sort of like what I kind of highlighted uh here where you have anything it's",
    "start": "1954799",
    "end": "1962760"
  },
  {
    "text": "like your platform engineering team could include a web hook that does anything like set some labels like force",
    "start": "1962760",
    "end": "1970159"
  },
  {
    "text": "instruction like force some field like because it's so open-ended you the like",
    "start": "1970159",
    "end": "1975919"
  },
  {
    "text": "fetch what Evans loing the effects you're describing even though you're fetching it um if you do a technically",
    "start": "1975919",
    "end": "1982200"
  },
  {
    "text": "the create update since it does patch to the existing Reser should be fine but if you're doing any sort of comparison um",
    "start": "1982200",
    "end": "1990200"
  },
  {
    "text": "you might recognize like hey there's a new field I didn't set um so it might trigger the",
    "start": "1990200",
    "end": "1995919"
  },
  {
    "text": "update yeah thanks last thing I want to say on the internet most common advice",
    "start": "1995919",
    "end": "2002000"
  },
  {
    "text": "for resource version conflicts retry retry retry horrible idea it's it's DED",
    "start": "2002000",
    "end": "2008120"
  },
  {
    "text": "information is all over the place by the Yeah so I hope this reduces the amount of retrying you need like we literally",
    "start": "2008120",
    "end": "2015320"
  },
  {
    "text": "have in our controller framework like when we update status like oh we got a conflict just retry it we have a",
    "start": "2015320",
    "end": "2021919"
  },
  {
    "text": "conflict just retry we Loop like 10 times yeah so I was I was just looking",
    "start": "2021919",
    "end": "2027559"
  },
  {
    "text": "at the controler runtime issue that was on service out apply which I think it's been open for like two years now or",
    "start": "2027559",
    "end": "2033320"
  },
  {
    "text": "something like that um and I'm curious of like you've thought at all about how",
    "start": "2033320",
    "end": "2039399"
  },
  {
    "text": "this needs to get adopted into something like control runtime which you know probably a lot of us use for riding",
    "start": "2039399",
    "end": "2044919"
  },
  {
    "text": "controllers yeah I candidly have not used controller runtime um because I've",
    "start": "2044919",
    "end": "2052440"
  },
  {
    "text": "been in like I'm aware of it I know kind of like how it works I just been in the",
    "start": "2052440",
    "end": "2057679"
  },
  {
    "text": "key need of controller space because one I helped build it so it's kind of but also I worry about um too much adoption",
    "start": "2057679",
    "end": "2065679"
  },
  {
    "text": "because it's the same problem with controller runtime where I think there's only so many maintainers for a",
    "start": "2065679",
    "end": "2071040"
  },
  {
    "text": "lot of Feature work that needs to happen um so I don't have strict opinions about",
    "start": "2071040",
    "end": "2077520"
  },
  {
    "text": "controller runtime but um I would suggest asking one of one of the",
    "start": "2077520",
    "end": "2083079"
  },
  {
    "text": "maintainers yeah I would suspect that that's probably hindering adoption pretty heavily because yeah people are",
    "start": "2083079",
    "end": "2088679"
  },
  {
    "text": "not using it if it's not coming in the common Library package yeah like I'm not advertising people use the Cana of",
    "start": "2088679",
    "end": "2094358"
  },
  {
    "text": "controller framework here but but um I think yeah if controller runtime",
    "start": "2094359",
    "end": "2099800"
  },
  {
    "text": "supported this um I think the adoption would be much higher so yeah oh time and",
    "start": "2099800",
    "end": "2106640"
  },
  {
    "text": "we're ending at zero perfect [Applause]",
    "start": "2106640",
    "end": "2112720"
  },
  {
    "text": "A+",
    "start": "2112720",
    "end": "2115720"
  }
]