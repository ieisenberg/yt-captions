[
  {
    "text": "all right hello folks and thank you for coming to this talk i know i'm the last thing",
    "start": "560",
    "end": "6000"
  },
  {
    "text": "standing between you and uh a bunch of awesome gatherings this evening so it means a lot that you're here um also",
    "start": "6000",
    "end": "12559"
  },
  {
    "text": "before we start um just wanted to mention uh when you're leaving i'd appreciate if you give a thank you to",
    "start": "12559",
    "end": "17920"
  },
  {
    "text": "the av folks in this room they have been doing a great job uh and all the folks in all the rooms so definitely give them",
    "start": "17920",
    "end": "24080"
  },
  {
    "text": "a shout out uh when you're leaving today um this talk is called registries after dark part two",
    "start": "24080",
    "end": "30720"
  },
  {
    "text": "distributed random access merkle dags my name is dan mangum i work at upbound and i'm a maintainer",
    "start": "30720",
    "end": "36880"
  },
  {
    "text": "of the crossplane project and unfortunately jason is unable to be here this week but he",
    "start": "36880",
    "end": "43200"
  },
  {
    "text": "worked with me on preparing this and definitely had a large part in it i think he might be actually watching",
    "start": "43200",
    "end": "48320"
  },
  {
    "text": "virtually so if you're also watching virtually feel free to bug him about anything i get wrong in this",
    "start": "48320",
    "end": "54000"
  },
  {
    "text": "presentation um like i said this is part two and hopefully the clicker works yep it",
    "start": "54000",
    "end": "60239"
  },
  {
    "text": "looks like it does so the first part of this was given at kubecon north america a few months ago",
    "start": "60239",
    "end": "65920"
  },
  {
    "text": "with john johnson and in that presentation we talked about really how to get things out of",
    "start": "65920",
    "end": "72400"
  },
  {
    "text": "container registries we specifically focused on the advantages of pulling by digest",
    "start": "72400",
    "end": "78720"
  },
  {
    "text": "and kind of the general structure of how a registry works in this talk we're going to be focusing",
    "start": "78720",
    "end": "85200"
  },
  {
    "text": "a lot more on how to get things into the registry specifically some things that you may not expect to put into a",
    "start": "85200",
    "end": "92560"
  },
  {
    "text": "registry and why or why not different things would be a good idea to store in a container registry i'm going to be",
    "start": "92560",
    "end": "98720"
  },
  {
    "text": "moving pretty fast there's a lot of content in this so stick with me and i'll try to make it",
    "start": "98720",
    "end": "104079"
  },
  {
    "text": "interactive as well so feel free to pull out your laptop if you're interested in that",
    "start": "104079",
    "end": "109680"
  },
  {
    "text": "so we're going to take a bit of an interesting pattern in this talk we're gonna start off uh back at the very",
    "start": "109680",
    "end": "115600"
  },
  {
    "text": "beginning if you will and talk about how computers work in general so if you're sitting in this room or you're watching",
    "start": "115600",
    "end": "121439"
  },
  {
    "text": "virtually uh you probably have a laptop in your bag or maybe you're watching this on a laptop um and even you know a",
    "start": "121439",
    "end": "128160"
  },
  {
    "text": "laptop which is a pretty similar machine between all the ones we have uh is very different in the internals right there's",
    "start": "128160",
    "end": "134480"
  },
  {
    "text": "different components that make up the machine you have discrete processors you might have a cpu a gpu if you have maybe",
    "start": "134480",
    "end": "141920"
  },
  {
    "text": "an m1 mac you have a number of processors as well as memory all integrated on the same chip if you have",
    "start": "141920",
    "end": "148879"
  },
  {
    "text": "a pc like me you have more discrete components that are talking to each other so even in",
    "start": "148879",
    "end": "154400"
  },
  {
    "text": "very similar machines there are lots of different heterogeneous components",
    "start": "154400",
    "end": "160000"
  },
  {
    "text": "however even at the wider scale of types of computers this",
    "start": "160000",
    "end": "165840"
  },
  {
    "text": "heterogeneity can still be described through a logically similar model",
    "start": "165840",
    "end": "170959"
  },
  {
    "text": "and typically the way we do that is through five general components here in this talk we're only going to be",
    "start": "170959",
    "end": "177519"
  },
  {
    "text": "talking about the first three of them although input and output are obviously very critical especially today in a very",
    "start": "177519",
    "end": "183200"
  },
  {
    "text": "networked world we're going to be focusing on controlled data path and memory and we'll start off",
    "start": "183200",
    "end": "189040"
  },
  {
    "text": "with control and data path these are frequently referred to as the components that make up the cpu so it's",
    "start": "189040",
    "end": "195440"
  },
  {
    "text": "the brain or the decision making the thing that actually does the work uh in your computer",
    "start": "195440",
    "end": "201680"
  },
  {
    "text": "and broadly these two components operate on two different types of data really",
    "start": "201680",
    "end": "207920"
  },
  {
    "text": "instructions and the data the instructions operate on data is simply",
    "start": "207920",
    "end": "213280"
  },
  {
    "text": "any information that can be stored and retrieved right you can put it in memory somewhere you can take it back out",
    "start": "213280",
    "end": "219360"
  },
  {
    "text": "and the instructions tell us when we want to take it in and out of memory bring it into the processor as well as",
    "start": "219360",
    "end": "225519"
  },
  {
    "text": "what we want to do with it right how do we transform it how do we perform operations on it",
    "start": "225519",
    "end": "231920"
  },
  {
    "text": "to understand how we kind of got to this place where we have logically similar compute components in computers",
    "start": "232080",
    "end": "239120"
  },
  {
    "text": "it's helpful to go back and this is we could go back way farther but we'll stop around the late 40s early 50s with john",
    "start": "239120",
    "end": "246000"
  },
  {
    "text": "von neumann who i'm sure many of you have likely heard of and around that time and for actually a",
    "start": "246000",
    "end": "253040"
  },
  {
    "text": "number of decades after that there are computers that had memory right they could store data whether that",
    "start": "253040",
    "end": "259440"
  },
  {
    "text": "was magnetic core memory or earlier than that maybe a vacuum tube array something",
    "start": "259440",
    "end": "264479"
  },
  {
    "text": "like that there was ability to store memory and that greatly enhanced what we could use",
    "start": "264479",
    "end": "270240"
  },
  {
    "text": "computers for however programming a computer was a different",
    "start": "270240",
    "end": "275280"
  },
  {
    "text": "operation that was done outside of the actual execution of the machine this was typically done via paper tapes or later",
    "start": "275280",
    "end": "282800"
  },
  {
    "text": "punch cards some folks in this room might actually have experience with using these kind of technologies looking",
    "start": "282800",
    "end": "288800"
  },
  {
    "text": "at you jared and what von neumann realized",
    "start": "288800",
    "end": "294080"
  },
  {
    "text": "in the late 40s when he was working on the edvac which was the successor to the eniac in early computer was that we",
    "start": "294080",
    "end": "301039"
  },
  {
    "text": "could actually store the instructions uh not on paper tape not on something that was outside of the machine but also",
    "start": "301039",
    "end": "308160"
  },
  {
    "text": "in memory just like our data and not only could we store it in memory just like our data we could store it in the",
    "start": "308160",
    "end": "314240"
  },
  {
    "text": "same memory uh as our data so the same actual components",
    "start": "314240",
    "end": "319520"
  },
  {
    "text": "this became known as the stored program concept it's kind of a foundation of a lot of computing we do today it's why",
    "start": "319520",
    "end": "326000"
  },
  {
    "text": "you can actually write code on your machine compile it store it in memory and then run it as an executable this is",
    "start": "326000",
    "end": "332400"
  },
  {
    "text": "all because of the stored program concept and then von neumann specific",
    "start": "332400",
    "end": "337840"
  },
  {
    "text": "observation of that you could store the instructions and memory in the",
    "start": "337840",
    "end": "343680"
  },
  {
    "text": "data in the same memory is known as the von neumann architecture frequently talked about in contrast to something",
    "start": "343680",
    "end": "349919"
  },
  {
    "text": "like the harvard architecture which has discrete memories for instructions and data but still stores them both in",
    "start": "349919",
    "end": "356800"
  },
  {
    "text": "memory so if we're going to store instructions in the same way that we store data we",
    "start": "356800",
    "end": "363360"
  },
  {
    "text": "need a way to encode them and define them and this is known as an instruction",
    "start": "363360",
    "end": "368960"
  },
  {
    "text": "set architecture or an isa i'll use the term isa throughout the rest of the presentation",
    "start": "368960",
    "end": "374639"
  },
  {
    "text": "to refer to this and over the last 50 or so years there's kind of been two tracks of instruction",
    "start": "374639",
    "end": "380639"
  },
  {
    "text": "set architectures complex instruction sets or sisk and reduced instruction sets or risk",
    "start": "380639",
    "end": "388720"
  },
  {
    "text": "you're likely very familiar with complex instruction sets if you've ever heard of x86 that is the",
    "start": "388720",
    "end": "395039"
  },
  {
    "text": "most popular complex instruction set essentially the goal of a complex instruction set is to give you higher",
    "start": "395039",
    "end": "401360"
  },
  {
    "text": "level operations that allow you to achieve more functionality with a single instruction",
    "start": "401360",
    "end": "407199"
  },
  {
    "text": "and when instruction sets were first being defined this made a lot of sense because programmers were actually",
    "start": "407199",
    "end": "412800"
  },
  {
    "text": "writing assembly directly right so now that we have higher level languages that give us these really expressive",
    "start": "412800",
    "end": "418080"
  },
  {
    "text": "capabilities earlier on we tried to actually jam more of that into the capabilities of the hardware",
    "start": "418080",
    "end": "424960"
  },
  {
    "text": "reduced instruction sets have also been around for quite a while i mentioned m1 max earlier they're actually an an arm",
    "start": "424960",
    "end": "433120"
  },
  {
    "text": "isa and so it uses a reduced instruction set and it as you might expect is kind of",
    "start": "433120",
    "end": "439440"
  },
  {
    "text": "the converse of that so you have less instructions that are simpler easier to implement in hardware um but",
    "start": "439440",
    "end": "446800"
  },
  {
    "text": "you have to execute more of them to achieve the same kind of outcomes as you would with a complex instruction set",
    "start": "446800",
    "end": "454240"
  },
  {
    "text": "both of these are in service of making your computer faster that's actually all computer architecture is just finding",
    "start": "454880",
    "end": "461039"
  },
  {
    "text": "new ways to apply physics essentially to different computing domains",
    "start": "461039",
    "end": "467199"
  },
  {
    "text": "and this is the general equation that we use it's pretty simple if you hold the clock rate constant",
    "start": "467199",
    "end": "473440"
  },
  {
    "text": "the number of instructions in a program and the average cycle per instruction is going to dictate how long it takes us to",
    "start": "473440",
    "end": "479680"
  },
  {
    "text": "execute it so sys and risk both want to bring down the cpu time and since the two factors",
    "start": "479680",
    "end": "486960"
  },
  {
    "text": "that we can impact here are instructions and cpi",
    "start": "486960",
    "end": "492319"
  },
  {
    "text": "they take uh different approaches to making your program faster so a complex instruction set is going to reduce the",
    "start": "492319",
    "end": "499039"
  },
  {
    "text": "number of instructions required to execute a program required execute any logic you're trying to implement",
    "start": "499039",
    "end": "504800"
  },
  {
    "text": "thus bringing down the overall time and a reduced instruction set is going to",
    "start": "504800",
    "end": "509840"
  },
  {
    "text": "increase the number of instructions required to execute a program but bring down the average clock cycles per",
    "start": "509840",
    "end": "515919"
  },
  {
    "text": "instruction so different approaches both trying to achieve similar goals",
    "start": "515919",
    "end": "521120"
  },
  {
    "text": "over time we've started to lean more towards using risk architectures for a variety of reasons",
    "start": "521120",
    "end": "527120"
  },
  {
    "text": "including power consumption and hardware complexity if you follow me anywhere you know i'm a",
    "start": "527120",
    "end": "534160"
  },
  {
    "text": "big fan of risk five i'm not going to stand up here and say it's the best instruction set ever but i will say it's",
    "start": "534160",
    "end": "539600"
  },
  {
    "text": "a modern instruction set and what i mean by a modern instruction set is that it's",
    "start": "539600",
    "end": "544880"
  },
  {
    "text": "taking into account the current status quo of computing over the last few decades we've started",
    "start": "544880",
    "end": "550880"
  },
  {
    "text": "to see a decline in moore's law which is essentially the idea that you can put more transistors in a chip every couple",
    "start": "550880",
    "end": "557440"
  },
  {
    "text": "of years thus getting performance for free if you will you can just buy a new machine and it will be faster",
    "start": "557440",
    "end": "564399"
  },
  {
    "text": "since that started to decline we need to be more creative and create domain specific accelerators for a variety of",
    "start": "564399",
    "end": "571760"
  },
  {
    "text": "different computing domains there's also been just more computing domains that have come in vogue and have become",
    "start": "571760",
    "end": "577040"
  },
  {
    "text": "important in our business applications and there's been an explosion of devices right we have more embedded devices all",
    "start": "577040",
    "end": "583040"
  },
  {
    "text": "over the place there's tiny embedded devices that are in fields and agriculture",
    "start": "583040",
    "end": "588240"
  },
  {
    "text": "and we also have you know at the other end of the spectrum high performance computing um and data center servers and",
    "start": "588240",
    "end": "594399"
  },
  {
    "text": "that sort of thing so the way that risk five uh wants to propose a solution for this is to have a",
    "start": "594399",
    "end": "601600"
  },
  {
    "text": "single instruction set architecture but employ the common engineering principle of making it modular and extensible so",
    "start": "601600",
    "end": "608240"
  },
  {
    "text": "it can apply to all of these a wide variety of domains that we have",
    "start": "608240",
    "end": "613839"
  },
  {
    "text": "the way it does this is it defines some base instruction sets the four that it defines in its spec are listed here",
    "start": "613839",
    "end": "620480"
  },
  {
    "text": "rv32i and rv32e are the 32-bit integer base and embedded base instruction sets",
    "start": "620480",
    "end": "627120"
  },
  {
    "text": "and then 64 and 128 are corresponding integer base instruction sets for 64 bit and 128 bit",
    "start": "627120",
    "end": "635680"
  },
  {
    "text": "the risk 5 organization which by the way this is all open source which is another kind of embrace of a more modern",
    "start": "635680",
    "end": "641279"
  },
  {
    "text": "instruction set defines standard extensions so things that you need to do pretty much any of",
    "start": "641279",
    "end": "647440"
  },
  {
    "text": "the operations we do today with our higher level languages because as you'll remember right we're compiling down complex logic into these",
    "start": "647440",
    "end": "654160"
  },
  {
    "text": "simpler instructions so we have multiplication and division floating point operations atomics memory",
    "start": "654160",
    "end": "660720"
  },
  {
    "text": "fences those sorts of things are defined but there's also the ability to add custom extensions so if you're a vendor",
    "start": "660720",
    "end": "667680"
  },
  {
    "text": "and you make some custom hardware you have some some proprietary ip you can build your own compiler or you can",
    "start": "667680",
    "end": "673920"
  },
  {
    "text": "modify an existing one and this slide is a little bit",
    "start": "673920",
    "end": "680000"
  },
  {
    "text": "intimidating but please don't get up and leave we're not going to go through exactly what this means but i think it",
    "start": "680000",
    "end": "686000"
  },
  {
    "text": "conceptually helps us think about what a risk instruction set and how it differs from a cisc one so these are the",
    "start": "686000",
    "end": "693360"
  },
  {
    "text": "six core instruction formats in risk five so they are the way that we encode our",
    "start": "693360",
    "end": "699200"
  },
  {
    "text": "instructions as data and memory and i want to point out two specific things one if you see an operand such as the",
    "start": "699200",
    "end": "706720"
  },
  {
    "text": "opcode or rd or rs1 or something like that in any instruction format it's always in",
    "start": "706720",
    "end": "712480"
  },
  {
    "text": "the same location right it's always the same bits in this in the instruction format",
    "start": "712480",
    "end": "718079"
  },
  {
    "text": "that makes it a lot easier to decode these instructions and hardware because you can uh just generically pull out",
    "start": "718079",
    "end": "723920"
  },
  {
    "text": "these arguments and then select the ones with a multiplexer that allows you to you know",
    "start": "723920",
    "end": "729120"
  },
  {
    "text": "based off the op code decide what you want to do with the bits that are present in the instruction the other thing you'll notice is they're",
    "start": "729120",
    "end": "735680"
  },
  {
    "text": "all the same length every instruction and all of those architectures is 32 bits",
    "start": "735680",
    "end": "742000"
  },
  {
    "text": "with the exception of compressed extension which shortens them to 16 bits um but they're all the same length which",
    "start": "742000",
    "end": "748560"
  },
  {
    "text": "is in contrast to something like x86 if you've ever tried to parse x86 instructions it is very upsetting i",
    "start": "748560",
    "end": "755279"
  },
  {
    "text": "would not recommend doing it they have lots of different lengths and they depend on",
    "start": "755279",
    "end": "760639"
  },
  {
    "text": "kind of unorthodox things so anyway just want to take that away we don't have to understand exactly what's happening here",
    "start": "760639",
    "end": "766720"
  },
  {
    "text": "we're going to see a more applicable example here in a few moments also wanted to give example of some of",
    "start": "766720",
    "end": "772720"
  },
  {
    "text": "what these base instructions are just to tie maybe some of our high level languages down to what actual operations",
    "start": "772720",
    "end": "779120"
  },
  {
    "text": "happen in a cpu so we have our base things like addition and subtraction and variance for adding",
    "start": "779120",
    "end": "785760"
  },
  {
    "text": "a word which is 32 bits versus a double word which is 64 bits",
    "start": "785760",
    "end": "790800"
  },
  {
    "text": "we also have load and store operations another important thing to point out about risk architectures is they are",
    "start": "790800",
    "end": "797760"
  },
  {
    "text": "also known as load store architectures that means that anytime you access memory that's a discrete operation you",
    "start": "797760",
    "end": "804079"
  },
  {
    "text": "don't actually operate on the memory you access in order to be able to actually modify data you have to first load it",
    "start": "804079",
    "end": "811920"
  },
  {
    "text": "into memory then you can perform a modification of it and then store it back and that's what we mean by a load",
    "start": "811920",
    "end": "818000"
  },
  {
    "text": "store architecture so these are two categories of instructions another one that's not shown here is things like",
    "start": "818000",
    "end": "823760"
  },
  {
    "text": "control flow changing the program counter and jumping around",
    "start": "823760",
    "end": "829160"
  },
  {
    "text": "so that was a very quick overview i also want to give an extremely quick overview of memory hierarchy if there's",
    "start": "829279",
    "end": "836079"
  },
  {
    "text": "any computer architects in the audience i will take all your ridicule afterwards",
    "start": "836079",
    "end": "841839"
  },
  {
    "text": "but there are two big ideas in memory which is a brash simplification but the",
    "start": "841839",
    "end": "848079"
  },
  {
    "text": "first idea is that data that was accessed recently is likely to be accessed again a good example of this is",
    "start": "848079",
    "end": "855600"
  },
  {
    "text": "storing a value in a variable and then performing some operation on that variable",
    "start": "855600",
    "end": "861199"
  },
  {
    "text": "and the second one is that data that lives close to data that was accessed recently is likely to be accessed soon",
    "start": "861199",
    "end": "868000"
  },
  {
    "text": "the canonical example for this is iterating through an array or something like that so values that live close together",
    "start": "868000",
    "end": "873680"
  },
  {
    "text": "in memory we refer to the first one as temporal locality so it has to do with time",
    "start": "873680",
    "end": "879440"
  },
  {
    "text": "and the second one spatial locality has to do with how close together things are these are two big ideas",
    "start": "879440",
    "end": "885600"
  },
  {
    "text": "and they drive our memory hierarchy",
    "start": "885600",
    "end": "890639"
  },
  {
    "text": "which in theory we'll show here in a second so our memory hierarchy once again in a very simplified view looks something",
    "start": "890639",
    "end": "897600"
  },
  {
    "text": "like this registers live in the cpu in risk 5 we have 32 general purpose registers in the",
    "start": "897600",
    "end": "904240"
  },
  {
    "text": "base instruction set they have specific purposes which we'll once again see in a moment",
    "start": "904240",
    "end": "909680"
  },
  {
    "text": "but that's where the fastest operations can happen then we have cache we typically have multiple layers of cache",
    "start": "909680",
    "end": "916560"
  },
  {
    "text": "in most modern computers you'll have three levels of cache and then we'll have ram which is what",
    "start": "916560",
    "end": "922480"
  },
  {
    "text": "you configure when you buy your laptop on whatever website you're getting it from",
    "start": "922480",
    "end": "927680"
  },
  {
    "text": "these are made with different physical components so like i said the registers live in the cpu the cache is static",
    "start": "927680",
    "end": "934160"
  },
  {
    "text": "random access memory and the ram is dynamic random access memory we unfortunately do not have time to get",
    "start": "934160",
    "end": "940480"
  },
  {
    "text": "into what those individually mean but the big idea here is that as you move down the memory hierarchy you can",
    "start": "940480",
    "end": "946720"
  },
  {
    "text": "store more things but also as you move down things get slower what's not mentioned here is as",
    "start": "946720",
    "end": "953519"
  },
  {
    "text": "you move down things also get cheaper which might make sense given their other attributes",
    "start": "953519",
    "end": "960079"
  },
  {
    "text": "okay so now we're actually going to move to doing something to illustrate this a little bit so",
    "start": "960079",
    "end": "965360"
  },
  {
    "text": "there's going to be a lot of live demoing for the rest of this presentation and the odds that things go",
    "start": "965360",
    "end": "970880"
  },
  {
    "text": "wrong are extremely high so i expect you all to bear with me here",
    "start": "970880",
    "end": "976160"
  },
  {
    "text": "we are going to look at a very simple program we are declaring three 32-bit integers",
    "start": "976160",
    "end": "982720"
  },
  {
    "text": "we are assigning values to two of them we are then calculating a sum and we are",
    "start": "982720",
    "end": "987759"
  },
  {
    "text": "returning that sum this is a weird program i know you probably don't want to return a non-zero exit code from main",
    "start": "987759",
    "end": "993360"
  },
  {
    "text": "here but this is just to illustrate some of the instructions that are going to be generated so let's go ahead and compile",
    "start": "993360",
    "end": "999360"
  },
  {
    "text": "this for risk 5 here so i'm going to use my risk 5 cross compiler",
    "start": "999360",
    "end": "1005199"
  },
  {
    "text": "and i'm going to specify that we want to use a subset of the generic standard extensions we're just going to use",
    "start": "1005199",
    "end": "1011920"
  },
  {
    "text": "integer and double precision floating point so i can say that with rv64",
    "start": "1011920",
    "end": "1018240"
  },
  {
    "text": "id and we're going to compile main.c and we'll call the output cubecon",
    "start": "1018240",
    "end": "1026240"
  },
  {
    "text": "all right so we have cubecon there and let's look at what that actually",
    "start": "1026240",
    "end": "1032480"
  },
  {
    "text": "looks like in our main function you'll notice there that i didn't compile with any optimization so if you are actually",
    "start": "1032480",
    "end": "1038000"
  },
  {
    "text": "compiling this with any type of optimization this would all get factored away it would just be a simple function",
    "start": "1038000",
    "end": "1043038"
  },
  {
    "text": "it'll probably get inlined because it just returns five every time but we're intentionally not doing that here",
    "start": "1043039",
    "end": "1049280"
  },
  {
    "text": "so let's take a look at this we'll disassemble the instructions and we want to remove any pseudo instructions and",
    "start": "1049280",
    "end": "1056320"
  },
  {
    "text": "actually just look at exactly what it gives us and i'm going to search for our main",
    "start": "1056320",
    "end": "1064480"
  },
  {
    "text": "symbol here all right so this is the body of our main function the first uh",
    "start": "1064480",
    "end": "1069760"
  },
  {
    "text": "three instructions there are what's known as a function prologue um what we're doing there is setting up our",
    "start": "1069760",
    "end": "1075760"
  },
  {
    "text": "stack frame so we're first moving our stack pointer down 32 bytes",
    "start": "1075760",
    "end": "1082160"
  },
  {
    "text": "the the stack goes downwards in wrist five we're then taking s0 which is the",
    "start": "1082160",
    "end": "1087440"
  },
  {
    "text": "frame pointer register and we are storing that on our stack at the top of our stack that frame pointer is actually",
    "start": "1087440",
    "end": "1094640"
  },
  {
    "text": "from the calling method from crt0 so we're basically just saying we're going to save this and reinstate that for you",
    "start": "1094640",
    "end": "1100720"
  },
  {
    "text": "when we return and then we're going to set our own frame pointer to the top of the stack",
    "start": "1100720",
    "end": "1107440"
  },
  {
    "text": "right so our our frame pointer is now up here 32 bytes stack pointer this is what we're going to use for our stack for the",
    "start": "1107440",
    "end": "1113520"
  },
  {
    "text": "remainder of our procedure here then we're going to go through a variety of operations",
    "start": "1113520",
    "end": "1119520"
  },
  {
    "text": "you're going to see we're going to load two into one of our argument registers we're going to store that on the stack",
    "start": "1119520",
    "end": "1126000"
  },
  {
    "text": "right below where we stored that frame pointer then we're going to store the other argument and then we're going to load",
    "start": "1126000",
    "end": "1132160"
  },
  {
    "text": "them back in add them together return the sum then there's some uh function epilogue there",
    "start": "1132160",
    "end": "1138240"
  },
  {
    "text": "at the end as well um so like i said there's no need for us to",
    "start": "1138240",
    "end": "1143440"
  },
  {
    "text": "be putting things on the stack in this case right we could keep them all in registers which would be optimal but because i compiled with no optimization",
    "start": "1143440",
    "end": "1150160"
  },
  {
    "text": "so we can see more instructions this is what it looks like for this presentation i actually wrote a",
    "start": "1150160",
    "end": "1156400"
  },
  {
    "text": "risk five emulator in rust because i wanted us to be able to see exactly what was happening",
    "start": "1156400",
    "end": "1162640"
  },
  {
    "text": "and lots of emulators don't actually give you really good insight into instructions and just kind of assume you know what's going on",
    "start": "1162640",
    "end": "1168559"
  },
  {
    "text": "which i don't like very much so hopefully this one will do a bit of a",
    "start": "1168559",
    "end": "1173600"
  },
  {
    "text": "better job so with each instruction that we get it's going to describe what the actual",
    "start": "1173600",
    "end": "1178640"
  },
  {
    "text": "name of the instruction is as well as logically what's happening here it's also going to tell you the format the",
    "start": "1178640",
    "end": "1184160"
  },
  {
    "text": "exact binary of it and what the operands are so in this case we are adding an immediate which is negative 32 so we're",
    "start": "1184160",
    "end": "1191360"
  },
  {
    "text": "essentially subtracting uh 32 here from our stack pointer we're creating",
    "start": "1191360",
    "end": "1196799"
  },
  {
    "text": "our stack frame you can look at the registers if you want this is kind of hard to see on the screen",
    "start": "1196799",
    "end": "1202559"
  },
  {
    "text": "but you'll see that we have a frame pointer loaded in there at ox80010",
    "start": "1202559",
    "end": "1208799"
  },
  {
    "text": "um and we have our stack pointer set to eight zero zero zero zero uh so we're",
    "start": "1208799",
    "end": "1214559"
  },
  {
    "text": "gonna subtract 32 from that e is execute it's gonna let us know what happened now we're going to move to the next",
    "start": "1214559",
    "end": "1219919"
  },
  {
    "text": "instruction and this one we're going to store that frame pointer on our stack so this is a",
    "start": "1219919",
    "end": "1224960"
  },
  {
    "text": "memory access so we should expect for this to take a little bit more time and as you'll see here it is hanging a",
    "start": "1224960",
    "end": "1231280"
  },
  {
    "text": "little bit but it should let us know yep that the value that was in s0 which is",
    "start": "1231280",
    "end": "1236559"
  },
  {
    "text": "our frame pointer was now written to the address that was specified uh as a",
    "start": "1236559",
    "end": "1242480"
  },
  {
    "text": "24 byte offset from our stack pointer",
    "start": "1242480",
    "end": "1247520"
  },
  {
    "text": "we could also step through a few other instructions here once again any of them that are acting on registers are going",
    "start": "1247520",
    "end": "1252880"
  },
  {
    "text": "to complete uh much faster and any of them that once again are storing to memory are going to be a",
    "start": "1252880",
    "end": "1259520"
  },
  {
    "text": "little bit um slower so i am going to stop doing that for",
    "start": "1259520",
    "end": "1264640"
  },
  {
    "text": "just a moment because i want to show you uh one other thing let me make this one a little bit bigger",
    "start": "1264640",
    "end": "1271039"
  },
  {
    "text": "and let's see what we have here uh well i don't know what that play me",
    "start": "1271039",
    "end": "1276880"
  },
  {
    "text": "thing is did y'all see that earlier that looks like it's new let's take a",
    "start": "1276880",
    "end": "1282240"
  },
  {
    "text": "look at what that is i'm a little concerned",
    "start": "1282240",
    "end": "1286080"
  },
  {
    "text": "oh jason",
    "start": "1288799",
    "end": "1293600"
  },
  {
    "text": "jason can you can you hear us",
    "start": "1294880",
    "end": "1298400"
  },
  {
    "text": "are you there he uh hey dan uh i'm sorry sorry to",
    "start": "1300000",
    "end": "1305520"
  },
  {
    "text": "interrupt everyone hi uh i'm jason uh from the talk um dan i'm sorry to",
    "start": "1305520",
    "end": "1311360"
  },
  {
    "text": "interrupt this this is registries after dark right uh right i'm in am i in the right am i in the right room uh",
    "start": "1311360",
    "end": "1319039"
  },
  {
    "text": "thanks for the thanks for the super interesting deep dive in how computers work and everything but",
    "start": "1319039",
    "end": "1324720"
  },
  {
    "text": "i can't help but notice we haven't mentioned oci registries yet and i kind of thought that was",
    "start": "1324720",
    "end": "1329919"
  },
  {
    "text": "the point of the talk uh so uh if it's all right i think i'm gonna i think i'm gonna commandeer take over",
    "start": "1329919",
    "end": "1336559"
  },
  {
    "text": "for a little bit and uh try to get us back on topic so uh how's this related to ocr registries",
    "start": "1336559",
    "end": "1342159"
  },
  {
    "text": "um well i'm glad you asked um there is an interesting thing you mentioned um uh you said storing and",
    "start": "1342159",
    "end": "1349600"
  },
  {
    "text": "retrieving data is the foundation of all computing i thought that was a good uh maybe a good segue into oci",
    "start": "1349600",
    "end": "1355520"
  },
  {
    "text": "registries after all oci registries let you store and retrieve data you can you can put a blob you can get a blob",
    "start": "1355520",
    "end": "1362000"
  },
  {
    "text": "uh everything works out clients if you squint clients even do a form of caching with a temporal locality um",
    "start": "1362000",
    "end": "1371039"
  },
  {
    "text": "if you pull a blob and then pull it again a lot of clients will just say hey i have a copy already here on desktop",
    "start": "1371039",
    "end": "1376720"
  },
  {
    "text": "you don't need to you don't need to fetch it again so that's kind of like caching if you think about it",
    "start": "1376720",
    "end": "1382320"
  },
  {
    "text": "you may say but oci registries are just for container images right well you typically you know historically sure",
    "start": "1382320",
    "end": "1389200"
  },
  {
    "text": "um but it doesn't have to be uh in a lot of cases registries don't care what your blobs are if you if you put anything you",
    "start": "1389200",
    "end": "1395520"
  },
  {
    "text": "want in there uh they'll allow it and in fact in a lot of cases registries don't even know what your clubs are uh they're",
    "start": "1395520",
    "end": "1400799"
  },
  {
    "text": "just going to accept them and store them for you um so yeah you can put anything in there",
    "start": "1400799",
    "end": "1406640"
  },
  {
    "text": "why would you want to do that well you know uh content addressable storage is is a cool uh concept",
    "start": "1406640",
    "end": "1412320"
  },
  {
    "text": "you can apply meaningful tags for humans you can see registries after dark part",
    "start": "1412320",
    "end": "1418000"
  },
  {
    "text": "one for a lot more information and a lot of interesting demos about um",
    "start": "1418000",
    "end": "1423200"
  },
  {
    "text": "about storing things content addressably and with tags in registries oci provides a consistent portable api",
    "start": "1423200",
    "end": "1430159"
  },
  {
    "text": "it's widely implemented across a lot of clouds aws google everywhere",
    "start": "1430159",
    "end": "1435919"
  },
  {
    "text": "and even on-prem you can run a registry locally and in all those cases auth is mostly",
    "start": "1435919",
    "end": "1442080"
  },
  {
    "text": "mostly normal uh is the best i guess i could say about it um so like my friend drake here would say",
    "start": "1442080",
    "end": "1448480"
  },
  {
    "text": "uh uh you know you can you can keep your s3 and your vendor lock in uh it's oci for me every single day",
    "start": "1448480",
    "end": "1455360"
  },
  {
    "text": "um and we're not even alone storing a lot of other stuff in oci registries there's a lot of projects these days that are storing ammo of all kinds",
    "start": "1455360",
    "end": "1462640"
  },
  {
    "text": "in container registries tecton tasks can be pulled from registries cross plane packages helm",
    "start": "1462640",
    "end": "1468640"
  },
  {
    "text": "charts tons and tons and tons of other things you can even sign sign contents and attach s-bombs and",
    "start": "1468640",
    "end": "1475120"
  },
  {
    "text": "attestations to those things using cosine and tons of wasm thingies i didn't go to",
    "start": "1475120",
    "end": "1480159"
  },
  {
    "text": "wasm day but i hear wasm is all over oci registries these days",
    "start": "1480159",
    "end": "1485600"
  },
  {
    "text": "there's a whole ecosystem of stuff around oci registries anything any thingy in an oci registry can be",
    "start": "1485600",
    "end": "1491360"
  },
  {
    "text": "signed you can say i'm jason and i approve this thingy and here's a signature that proves that i'm me um",
    "start": "1491360",
    "end": "1496960"
  },
  {
    "text": "those signatures are actually also oci thingies which means they're also portable across registries and clouds",
    "start": "1496960",
    "end": "1502400"
  },
  {
    "text": "and on-prem with auth and everything so that's pretty cool um i would even go so far as to say you",
    "start": "1502400",
    "end": "1507840"
  },
  {
    "text": "know because registries can be sort of arbitrary storage in theory you could store your program's",
    "start": "1507840",
    "end": "1514240"
  },
  {
    "text": "memory in an oci registry but that's but dan that's crazy",
    "start": "1514240",
    "end": "1519600"
  },
  {
    "text": "dan that's not what you're doing is it dan oh no oh no",
    "start": "1519600",
    "end": "1526000"
  },
  {
    "text": "oh no well i didn't think that uh",
    "start": "1526000",
    "end": "1532240"
  },
  {
    "text": "jason was gonna join us but it turns out that he seemed to have dropped a little video for us uh and he also kind of",
    "start": "1532240",
    "end": "1539200"
  },
  {
    "text": "spoiled what i was doing so i'm gonna have to talk to him after this um but jason uh is in fact right um",
    "start": "1539200",
    "end": "1546960"
  },
  {
    "text": "when we were storing to a memory there that was actually writing to an oci",
    "start": "1546960",
    "end": "1553120"
  },
  {
    "text": "registry in this case uh it was docker hub and so um",
    "start": "1553120",
    "end": "1559360"
  },
  {
    "text": "let's kind of step through uh what's really going on here uh so most risk architectures follow",
    "start": "1559360",
    "end": "1565840"
  },
  {
    "text": "some variation or some evolution of this pipeline here starts off with fetching the instruction",
    "start": "1565840",
    "end": "1571919"
  },
  {
    "text": "then you need to decode it figure out what we need to do you need to execute it and then potentially access memory if",
    "start": "1571919",
    "end": "1577200"
  },
  {
    "text": "it's a loader store operation or write something back to a register",
    "start": "1577200",
    "end": "1582720"
  },
  {
    "text": "so in this case uh we were fetching uh an instruction we're looking specifically at that store double word",
    "start": "1582720",
    "end": "1588320"
  },
  {
    "text": "operation there we were fetching that from uh uh just local memory we read in",
    "start": "1588320",
    "end": "1593440"
  },
  {
    "text": "an elf file and just uh we're parsing that so we didn't actually pull that from the registry um we decoded that and that",
    "start": "1593440",
    "end": "1600880"
  },
  {
    "text": "looks something like this where we broke it down into those components we saw on the the format",
    "start": "1600880",
    "end": "1606000"
  },
  {
    "text": "slide earlier and then we combined them together found out what registers we were accessing so for instance rs2 is x8",
    "start": "1606000",
    "end": "1614720"
  },
  {
    "text": "which is the the eighth register or the ninth one since there's zero index um and that's the frame pointer",
    "start": "1614720",
    "end": "1621360"
  },
  {
    "text": "we also had rs1 pointing to the stack pointer and then we had our immediate value",
    "start": "1621360",
    "end": "1627039"
  },
  {
    "text": "each of these in binary another thing that you'll notice here is risk 5 is a little indian architecture meaning the",
    "start": "1627039",
    "end": "1632880"
  },
  {
    "text": "least significant bit is the rightmost one or is at the higher memory address",
    "start": "1632880",
    "end": "1639440"
  },
  {
    "text": "next we executed it in this case execution uh was just finding uh that",
    "start": "1639679",
    "end": "1644720"
  },
  {
    "text": "calculation of adding 24 to our stack pointer and getting our memory address",
    "start": "1644720",
    "end": "1649840"
  },
  {
    "text": "of where we wanted to store uh this double word and then we didn't have any write-back in this case but we did have a memory",
    "start": "1649840",
    "end": "1656799"
  },
  {
    "text": "access and it looked something like this with those layers included as well",
    "start": "1656799",
    "end": "1662399"
  },
  {
    "text": "so this is an oci manifest here for an image and you'll see that our single",
    "start": "1662399",
    "end": "1668000"
  },
  {
    "text": "layer is only eight bytes because we are storing a 64-bit double word or an eight",
    "start": "1668000",
    "end": "1673520"
  },
  {
    "text": "byte double word and we have the hash there you also see that we told a really big lie and said",
    "start": "1673520",
    "end": "1680320"
  },
  {
    "text": "this is a file system image layer and it's a tarball i don't know many eight byte tarballs",
    "start": "1680320",
    "end": "1686799"
  },
  {
    "text": "but that's what we said it was so let's actually see if that's",
    "start": "1686799",
    "end": "1693039"
  },
  {
    "text": "really what happened so uh just before while jason was talking",
    "start": "1693039",
    "end": "1698080"
  },
  {
    "text": "i went ahead and i posted a tweet that tells how you can follow along with this",
    "start": "1698080",
    "end": "1703679"
  },
  {
    "text": "um and actually pull these images this is a public repository so you're welcome to do the same",
    "start": "1703679",
    "end": "1709840"
  },
  {
    "text": "that i do here but the link to the actual repository is",
    "start": "1709840",
    "end": "1716720"
  },
  {
    "text": "this one if you want to look at the tags and if you want to pull down",
    "start": "1716720",
    "end": "1722480"
  },
  {
    "text": "kceu you can pick any of the tags there and",
    "start": "1722480",
    "end": "1727919"
  },
  {
    "text": "those will be memory addresses that we actually wrote to and so that's what i'm going to do now",
    "start": "1727919",
    "end": "1734559"
  },
  {
    "text": "let's make a new directory we'll call it image surgery and we'll go in",
    "start": "1734559",
    "end": "1741600"
  },
  {
    "text": "all right we don't have anything here i'm going to use crane you may have some trouble with docker if you're pulling down with it because",
    "start": "1741600",
    "end": "1748240"
  },
  {
    "text": "docker is not going to like that we lied about that tarble",
    "start": "1748240",
    "end": "1753679"
  },
  {
    "text": "but crane is a much more accommodating force here so what did i say it was kceu-22",
    "start": "1753679",
    "end": "1760960"
  },
  {
    "text": "and let's see if we can find one of those memory addresses we wrote how about that first",
    "start": "1760960",
    "end": "1766080"
  },
  {
    "text": "one that we were walking through looks like we wrote it to this address so that should be the tag",
    "start": "1766080",
    "end": "1772720"
  },
  {
    "text": "that we have and i'll put that just in a tarball let's see if that works",
    "start": "1772720",
    "end": "1778399"
  },
  {
    "text": "it looks like it did all right we have a tarball here and i'm going to go ahead and",
    "start": "1778399",
    "end": "1784480"
  },
  {
    "text": "untar this all right and it looks like we have what",
    "start": "1784480",
    "end": "1790320"
  },
  {
    "text": "we would expect from an image we have our manifest here we have a gzip tarball layer",
    "start": "1790320",
    "end": "1795600"
  },
  {
    "text": "and we also have our config in this case our config is uh not very useful uh i",
    "start": "1795600",
    "end": "1802399"
  },
  {
    "text": "just stuck rimu in there which is the name of the emulator so that's going to make things unhappy",
    "start": "1802399",
    "end": "1808240"
  },
  {
    "text": "but if we tried to look at our gzip tarball",
    "start": "1808240",
    "end": "1813440"
  },
  {
    "text": "that is not a gzip tarball at all it's just a data file so let's see what data is in",
    "start": "1813440",
    "end": "1820840"
  },
  {
    "text": "there so we're going to pipe that to a hex dump and i'm going to say this is little indian and we want to group by",
    "start": "1820840",
    "end": "1829679"
  },
  {
    "text": "8 bytes here and what we're going to see is we have 8 0 zero one zero",
    "start": "1829679",
    "end": "1837120"
  },
  {
    "text": "and we were wanting to store our frame pointer uh at this address let's see if",
    "start": "1837120",
    "end": "1842559"
  },
  {
    "text": "that is our frame pointer yep it does look like that's our frame pointer and i think we performed some other operations",
    "start": "1842559",
    "end": "1848720"
  },
  {
    "text": "as well let's see if our tags are present here yep it looks like we have a few other",
    "start": "1848720",
    "end": "1854399"
  },
  {
    "text": "memory addresses as well and if we wanted to go through and continue executing this program",
    "start": "1854399",
    "end": "1860880"
  },
  {
    "text": "we could continue to have as much fun as we've been having this whole time and continue to store new things",
    "start": "1860880",
    "end": "1867679"
  },
  {
    "text": "in our registry so we should see a new tag pop up here",
    "start": "1867679",
    "end": "1873600"
  },
  {
    "text": "and we do so we can continue to share this memory with everyone who uh",
    "start": "1875039",
    "end": "1880399"
  },
  {
    "text": "uh is likely watching this all over the world and very enthralled um",
    "start": "1880399",
    "end": "1886799"
  },
  {
    "text": "so why are we doing this right this is ridiculous you probably should never do this so why are we doing it well one of the",
    "start": "1886799",
    "end": "1893360"
  },
  {
    "text": "things we want to illustrate is everything is just bits right and it's just data on a wire",
    "start": "1893360",
    "end": "1898799"
  },
  {
    "text": "and frequently we think of things in different contexts right because it's useful for structuring it in our brain",
    "start": "1898799",
    "end": "1904320"
  },
  {
    "text": "but in reality uh we're just passing information around and jason mentioned a few different applications of putting",
    "start": "1904320",
    "end": "1910880"
  },
  {
    "text": "non-image things in a registry uh i work on crossplane we do that quite a lot um",
    "start": "1910880",
    "end": "1916799"
  },
  {
    "text": "and are big fans of doing it so i hope you know this kind of makes you think a little bit about what things might be",
    "start": "1916799",
    "end": "1922399"
  },
  {
    "text": "good to put in a registry that you wouldn't normally think of there's also distribution it allowed for",
    "start": "1922399",
    "end": "1927440"
  },
  {
    "text": "this cool demo where y'all could pull it down and look at that and go see it on docker hub if you wanted to",
    "start": "1927440",
    "end": "1933360"
  },
  {
    "text": "[Music] it also was free for me at least",
    "start": "1933360",
    "end": "1938559"
  },
  {
    "text": "i was able to push to docker hub and hopefully we didn't",
    "start": "1938559",
    "end": "1943760"
  },
  {
    "text": "abuse their rate limit too much but they're available and relatively cheap so it didn't take a lot of effort",
    "start": "1943760",
    "end": "1949919"
  },
  {
    "text": "i didn't even create that repository before it just push created so uh lots of cool things there but we obviously",
    "start": "1949919",
    "end": "1956399"
  },
  {
    "text": "don't want to do this right this doesn't make any sense uh why doesn't it make any sense well we're trying to emulate a",
    "start": "1956399",
    "end": "1961919"
  },
  {
    "text": "program and the network is very slow obviously i was stepping through it in this case if we tried to actually",
    "start": "1961919",
    "end": "1967200"
  },
  {
    "text": "execute it this would be a massive massive bottleneck also we don't really need distribution",
    "start": "1967200",
    "end": "1974080"
  },
  {
    "text": "here i hope that maybe some people looked at the the memory contents there but you really didn't need to i don't need to",
    "start": "1974080",
    "end": "1980240"
  },
  {
    "text": "share uh the memory of a process i'm debugging via a container registry so it's not a great",
    "start": "1980240",
    "end": "1986640"
  },
  {
    "text": "application of what it can give us and the last one and this is one that folks don't usually think about as much",
    "start": "1986640",
    "end": "1992320"
  },
  {
    "text": "but are you taking advantage of the data structure of a registry the subtitle of this talk was",
    "start": "1992320",
    "end": "1998320"
  },
  {
    "text": "distributed random access merkle dags a merkle dag is essentially a directed",
    "start": "1998320",
    "end": "2003519"
  },
  {
    "text": "acyclic graph but one where the nodes are a hash of their leaf labels which",
    "start": "2003519",
    "end": "2009120"
  },
  {
    "text": "are hash of their content in this case we're not getting a lot of benefits from that because we have very tiny payloads",
    "start": "2009120",
    "end": "2015679"
  },
  {
    "text": "and we're not really you know reusing them very much that being said in theory you would be",
    "start": "2015679",
    "end": "2022000"
  },
  {
    "text": "able to reuse the same layer if you push the same memory address but in general not a great use case of",
    "start": "2022000",
    "end": "2027919"
  },
  {
    "text": "it so what i hope you have kind of walking away from this because i know i'm probably cutting into q a here",
    "start": "2027919",
    "end": "2034640"
  },
  {
    "text": "is that there are some great applications jason listed a few of them uh and there is a good reason to use the",
    "start": "2034640",
    "end": "2040640"
  },
  {
    "text": "registry for some things uh but there's also good reason not to so so be judicious in your usage uh and",
    "start": "2040640",
    "end": "2048320"
  },
  {
    "text": "with that i'm open to any thoughts comments or questions uh and expressions of utter disgust",
    "start": "2048320",
    "end": "2056598"
  },
  {
    "text": "i'm not really surprised honestly",
    "start": "2071280",
    "end": "2075320"
  },
  {
    "text": "all right well i did go all the way up into the end i am more than happy to talk about any of this when jase and i",
    "start": "2076399",
    "end": "2082079"
  },
  {
    "text": "were making this presentation uh this is about five percent of the total content",
    "start": "2082079",
    "end": "2087118"
  },
  {
    "text": "that was in it and we've been systematically cutting it down uh which i think it was still kind of a fire hose",
    "start": "2087119",
    "end": "2093040"
  },
  {
    "text": "but would love to talk to anyone who found this interesting or wants to talk more about risk five or container registries",
    "start": "2093040",
    "end": "2099119"
  },
  {
    "text": "or anything like that but once again thank you for coming and i hope you'll have a great rest of your kubecon",
    "start": "2099119",
    "end": "2105270"
  },
  {
    "text": "[Applause]",
    "start": "2105270",
    "end": "2111500"
  }
]