[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "in this video i want to give you a short",
    "start": "320",
    "end": "2560"
  },
  {
    "text": "introduction to fluency",
    "start": "2560",
    "end": "4400"
  },
  {
    "text": "an open source log data collector to",
    "start": "4400",
    "end": "7600"
  },
  {
    "text": "understand what this actually means i",
    "start": "7600",
    "end": "9360"
  },
  {
    "text": "will first explain",
    "start": "9360",
    "end": "10800"
  },
  {
    "text": "why we actually need logs the challenges",
    "start": "10800",
    "end": "14160"
  },
  {
    "text": "of",
    "start": "14160",
    "end": "14480"
  },
  {
    "text": "collecting and consuming application",
    "start": "14480",
    "end": "16960"
  },
  {
    "text": "logs",
    "start": "16960",
    "end": "17920"
  },
  {
    "text": "how fluenty works and how it solves all",
    "start": "17920",
    "end": "20800"
  },
  {
    "text": "those challenges",
    "start": "20800",
    "end": "22240"
  },
  {
    "text": "and finally how to configure fluenty as",
    "start": "22240",
    "end": "24880"
  },
  {
    "text": "a user",
    "start": "24880",
    "end": "27439"
  },
  {
    "text": "let's say we have a microservices",
    "start": "28800",
    "end": "30880"
  },
  {
    "start": "29000",
    "end": "29000"
  },
  {
    "text": "application deployed in a kubernetes",
    "start": "30880",
    "end": "32880"
  },
  {
    "text": "cluster",
    "start": "32880",
    "end": "33920"
  },
  {
    "text": "two applications in node.js a couple of",
    "start": "33920",
    "end": "36640"
  },
  {
    "text": "python applications",
    "start": "36640",
    "end": "38000"
  },
  {
    "text": "maybe databases a message broker and",
    "start": "38000",
    "end": "40480"
  },
  {
    "text": "other services",
    "start": "40480",
    "end": "42000"
  },
  {
    "text": "all these applications talk to each",
    "start": "42000",
    "end": "44320"
  },
  {
    "text": "other and produce",
    "start": "44320",
    "end": "45760"
  },
  {
    "text": "log data so each of these services",
    "start": "45760",
    "end": "48879"
  },
  {
    "text": "is logging information about what the",
    "start": "48879",
    "end": "51199"
  },
  {
    "text": "application is doing",
    "start": "51199",
    "end": "53360"
  },
  {
    "text": "now what are some of the information",
    "start": "53360",
    "end": "55680"
  },
  {
    "text": "these applications are logging",
    "start": "55680",
    "end": "57680"
  },
  {
    "text": "and why do we need this log data this",
    "start": "57680",
    "end": "60160"
  },
  {
    "text": "may be some compliance data for example",
    "start": "60160",
    "end": "62640"
  },
  {
    "text": "like if you're required to log some",
    "start": "62640",
    "end": "64640"
  },
  {
    "text": "specific information",
    "start": "64640",
    "end": "66159"
  },
  {
    "text": "depending on your industry in order to",
    "start": "66159",
    "end": "68159"
  },
  {
    "text": "be compliant",
    "start": "68159",
    "end": "69439"
  },
  {
    "text": "it could be for your application",
    "start": "69439",
    "end": "71600"
  },
  {
    "text": "security for example",
    "start": "71600",
    "end": "73520"
  },
  {
    "text": "to detect suspicious requests in your",
    "start": "73520",
    "end": "76159"
  },
  {
    "text": "application",
    "start": "76159",
    "end": "77200"
  },
  {
    "text": "by logging all xs attempts with",
    "start": "77200",
    "end": "80400"
  },
  {
    "text": "ip address and user id etc or log who is",
    "start": "80400",
    "end": "84320"
  },
  {
    "text": "accessing what and when and an obvious",
    "start": "84320",
    "end": "87520"
  },
  {
    "text": "usage",
    "start": "87520",
    "end": "88479"
  },
  {
    "text": "for log data is debugging your",
    "start": "88479",
    "end": "90479"
  },
  {
    "text": "application when there is an",
    "start": "90479",
    "end": "91840"
  },
  {
    "text": "error analyzing all application blocks",
    "start": "91840",
    "end": "94799"
  },
  {
    "text": "to find the cause",
    "start": "94799",
    "end": "96560"
  },
  {
    "text": "these are some of the examples why log",
    "start": "96560",
    "end": "99119"
  },
  {
    "text": "data is so important",
    "start": "99119",
    "end": "101040"
  },
  {
    "text": "now the question is how do applications",
    "start": "101040",
    "end": "104399"
  },
  {
    "text": "log this data there are few options",
    "start": "104399",
    "end": "107200"
  },
  {
    "start": "107000",
    "end": "107000"
  },
  {
    "text": "first one is",
    "start": "107200",
    "end": "108720"
  },
  {
    "text": "applications right to a file which is a",
    "start": "108720",
    "end": "111680"
  },
  {
    "text": "common way of logging in applications",
    "start": "111680",
    "end": "114479"
  },
  {
    "text": "however as you can imagine it's",
    "start": "114479",
    "end": "116320"
  },
  {
    "text": "difficult to analyze",
    "start": "116320",
    "end": "118399"
  },
  {
    "text": "loads of data in raw log files",
    "start": "118399",
    "end": "121680"
  },
  {
    "text": "so it's not really for human consumption",
    "start": "121680",
    "end": "124799"
  },
  {
    "text": "and without user interface or",
    "start": "124799",
    "end": "126880"
  },
  {
    "text": "visualization for this data",
    "start": "126880",
    "end": "129039"
  },
  {
    "text": "how do you analyze logs properly",
    "start": "129039",
    "end": "131599"
  },
  {
    "text": "especially across",
    "start": "131599",
    "end": "132800"
  },
  {
    "text": "applications by checking each",
    "start": "132800",
    "end": "135520"
  },
  {
    "text": "application's",
    "start": "135520",
    "end": "136879"
  },
  {
    "text": "log file and trying to look for similar",
    "start": "136879",
    "end": "140239"
  },
  {
    "text": "times to check across applications",
    "start": "140239",
    "end": "142400"
  },
  {
    "text": "also logs will be in different formats",
    "start": "142400",
    "end": "145200"
  },
  {
    "text": "coming from different applications",
    "start": "145200",
    "end": "146959"
  },
  {
    "text": "like the timestamps and log levels etc",
    "start": "146959",
    "end": "150080"
  },
  {
    "text": "another option could be to log directly",
    "start": "150080",
    "end": "153280"
  },
  {
    "text": "into a log database like elastic for",
    "start": "153280",
    "end": "155599"
  },
  {
    "text": "example",
    "start": "155599",
    "end": "156400"
  },
  {
    "text": "to then have a visualization of this",
    "start": "156400",
    "end": "158720"
  },
  {
    "text": "data however in this case",
    "start": "158720",
    "end": "160800"
  },
  {
    "text": "each application developer must add a",
    "start": "160800",
    "end": "163519"
  },
  {
    "text": "library",
    "start": "163519",
    "end": "164400"
  },
  {
    "text": "for elastic search and configure it to",
    "start": "164400",
    "end": "167200"
  },
  {
    "text": "connect to elastic and",
    "start": "167200",
    "end": "168560"
  },
  {
    "text": "send those logs and also each developer",
    "start": "168560",
    "end": "170959"
  },
  {
    "text": "must configure the proper format",
    "start": "170959",
    "end": "173519"
  },
  {
    "text": "so again there's some challenges with",
    "start": "173519",
    "end": "175920"
  },
  {
    "text": "this option as well",
    "start": "175920",
    "end": "177440"
  },
  {
    "text": "now what about the third-party",
    "start": "177440",
    "end": "178879"
  },
  {
    "text": "applications in your cluster like",
    "start": "178879",
    "end": "181200"
  },
  {
    "text": "databases",
    "start": "181200",
    "end": "182159"
  },
  {
    "text": "and message broker also in kubernetes",
    "start": "182159",
    "end": "184879"
  },
  {
    "text": "requests go through",
    "start": "184879",
    "end": "186239"
  },
  {
    "text": "nginx controller so what if you want to",
    "start": "186239",
    "end": "188640"
  },
  {
    "text": "see those locks too",
    "start": "188640",
    "end": "190080"
  },
  {
    "text": "or what about system logs you can't",
    "start": "190080",
    "end": "192640"
  },
  {
    "text": "control how they look so",
    "start": "192640",
    "end": "194319"
  },
  {
    "text": "how do you collect logs from all these",
    "start": "194319",
    "end": "197519"
  },
  {
    "text": "different data sources all of these are",
    "start": "197519",
    "end": "200239"
  },
  {
    "text": "challenges",
    "start": "200239",
    "end": "200959"
  },
  {
    "text": "of collecting and consuming logs in",
    "start": "200959",
    "end": "204319"
  },
  {
    "text": "complex applications with",
    "start": "204319",
    "end": "206319"
  },
  {
    "text": "tons of useful data because you have",
    "start": "206319",
    "end": "208799"
  },
  {
    "text": "loads of data which you can't",
    "start": "208799",
    "end": "210560"
  },
  {
    "text": "really consume and analyze because you",
    "start": "210560",
    "end": "212799"
  },
  {
    "text": "don't have it",
    "start": "212799",
    "end": "213840"
  },
  {
    "text": "all in one place in a unified format to",
    "start": "213840",
    "end": "216799"
  },
  {
    "text": "be able to",
    "start": "216799",
    "end": "217599"
  },
  {
    "text": "visualize them properly so lots of",
    "start": "217599",
    "end": "220239"
  },
  {
    "text": "valuable data is kind of wasted",
    "start": "220239",
    "end": "222799"
  },
  {
    "text": "so what is a good solution to that",
    "start": "222799",
    "end": "224840"
  },
  {
    "text": "challenge a technology",
    "start": "224840",
    "end": "226799"
  },
  {
    "text": "that lets you collect all the data",
    "start": "226799",
    "end": "228959"
  },
  {
    "start": "227000",
    "end": "227000"
  },
  {
    "text": "regardless of",
    "start": "228959",
    "end": "230080"
  },
  {
    "text": "where they come from and transform in a",
    "start": "230080",
    "end": "233360"
  },
  {
    "text": "unified format",
    "start": "233360",
    "end": "235040"
  },
  {
    "text": "all in one place so that you can then",
    "start": "235040",
    "end": "237200"
  },
  {
    "text": "use that data",
    "start": "237200",
    "end": "238319"
  },
  {
    "text": "again for compliance or debugging etc",
    "start": "238319",
    "end": "241439"
  },
  {
    "text": "and that's exactly what fluentd does",
    "start": "241439",
    "end": "244720"
  },
  {
    "text": "and fluency does that reliably meaning",
    "start": "244720",
    "end": "248239"
  },
  {
    "text": "if there is a network outage or data",
    "start": "248239",
    "end": "250879"
  },
  {
    "text": "spikes",
    "start": "250879",
    "end": "252000"
  },
  {
    "text": "this shouldn't mess up data collection",
    "start": "252000",
    "end": "254400"
  },
  {
    "text": "right so fluency",
    "start": "254400",
    "end": "256079"
  },
  {
    "text": "handles such cases as well so how does",
    "start": "256079",
    "end": "259040"
  },
  {
    "text": "fluentd work",
    "start": "259040",
    "end": "260079"
  },
  {
    "text": "and how does it do all of this fluency",
    "start": "260079",
    "end": "263120"
  },
  {
    "text": "gets deployed into the cluster",
    "start": "263120",
    "end": "265360"
  },
  {
    "start": "264000",
    "end": "264000"
  },
  {
    "text": "and it starts collecting logs from all",
    "start": "265360",
    "end": "267680"
  },
  {
    "text": "the applications",
    "start": "267680",
    "end": "269040"
  },
  {
    "text": "it can be your own applications",
    "start": "269040",
    "end": "271199"
  },
  {
    "text": "third-party applications",
    "start": "271199",
    "end": "272880"
  },
  {
    "text": "all of it now these logs that fluently",
    "start": "272880",
    "end": "275440"
  },
  {
    "text": "collected",
    "start": "275440",
    "end": "276240"
  },
  {
    "text": "will be of different forms and formats",
    "start": "276240",
    "end": "278639"
  },
  {
    "text": "right like json format",
    "start": "278639",
    "end": "280479"
  },
  {
    "text": "nginx format some custom format maybe",
    "start": "280479",
    "end": "283840"
  },
  {
    "text": "and so on so fluentd will process them",
    "start": "283840",
    "end": "287280"
  },
  {
    "text": "and reformat them into a uniform way",
    "start": "287280",
    "end": "290320"
  },
  {
    "text": "now on top of that you can enrich your",
    "start": "290320",
    "end": "292800"
  },
  {
    "text": "data with fluency",
    "start": "292800",
    "end": "294479"
  },
  {
    "text": "so you can add additional information to",
    "start": "294479",
    "end": "296880"
  },
  {
    "text": "each",
    "start": "296880",
    "end": "297520"
  },
  {
    "text": "log entry like pod name namespace",
    "start": "297520",
    "end": "301600"
  },
  {
    "text": "container name and so on so for example",
    "start": "301600",
    "end": "304479"
  },
  {
    "text": "you can later",
    "start": "304479",
    "end": "305440"
  },
  {
    "text": "group logs of the same pod or logs of",
    "start": "305440",
    "end": "307919"
  },
  {
    "text": "the same namespace",
    "start": "307919",
    "end": "309600"
  },
  {
    "text": "or you can even modify the data in a log",
    "start": "309600",
    "end": "312479"
  },
  {
    "text": "so now you're streaming your logs from",
    "start": "312479",
    "end": "314720"
  },
  {
    "text": "all the applications into one unified",
    "start": "314720",
    "end": "317840"
  },
  {
    "text": "format",
    "start": "317840",
    "end": "318560"
  },
  {
    "text": "through fluentd what happens to these",
    "start": "318560",
    "end": "320800"
  },
  {
    "text": "logs after",
    "start": "320800",
    "end": "322080"
  },
  {
    "text": "fluency processes them well obviously in",
    "start": "322080",
    "end": "324880"
  },
  {
    "text": "most cases",
    "start": "324880",
    "end": "325919"
  },
  {
    "text": "the goal is to nicely visualize them",
    "start": "325919",
    "end": "328400"
  },
  {
    "text": "right so we can do some analysis on it",
    "start": "328400",
    "end": "331199"
  },
  {
    "text": "well fluency can send these logs to any",
    "start": "331199",
    "end": "333759"
  },
  {
    "text": "destination you want",
    "start": "333759",
    "end": "335280"
  },
  {
    "text": "this could be elasticsearch mongodb s3",
    "start": "335280",
    "end": "338880"
  },
  {
    "text": "kafka etc now what if you want your",
    "start": "338880",
    "end": "342000"
  },
  {
    "text": "python application logs",
    "start": "342000",
    "end": "343840"
  },
  {
    "text": "to go to mongodb storage for data",
    "start": "343840",
    "end": "346400"
  },
  {
    "text": "analysis",
    "start": "346400",
    "end": "347600"
  },
  {
    "text": "and all other application logs to go to",
    "start": "347600",
    "end": "349759"
  },
  {
    "text": "elasticsearch",
    "start": "349759",
    "end": "350960"
  },
  {
    "text": "or what if you want that node.js logs",
    "start": "350960",
    "end": "354160"
  },
  {
    "text": "also go to the mongodb in addition to",
    "start": "354160",
    "end": "356400"
  },
  {
    "text": "elasticsearch",
    "start": "356400",
    "end": "357759"
  },
  {
    "text": "you can actually very easily configure",
    "start": "357759",
    "end": "360240"
  },
  {
    "text": "that routing",
    "start": "360240",
    "end": "361440"
  },
  {
    "text": "in fluency which is a great thing about",
    "start": "361440",
    "end": "363759"
  },
  {
    "text": "fluenty because it gives you",
    "start": "363759",
    "end": "365600"
  },
  {
    "text": "such flexibility compared to alternative",
    "start": "365600",
    "end": "368160"
  },
  {
    "text": "tools",
    "start": "368160",
    "end": "369199"
  },
  {
    "text": "so you can send any data from any data",
    "start": "369199",
    "end": "371680"
  },
  {
    "text": "source",
    "start": "371680",
    "end": "372319"
  },
  {
    "text": "to any destination or storage",
    "start": "372319",
    "end": "376080"
  },
  {
    "text": "and this flexibility also comes from the",
    "start": "376080",
    "end": "378400"
  },
  {
    "text": "fact that fluenty is not",
    "start": "378400",
    "end": "380319"
  },
  {
    "text": "tied to any particular back end so you",
    "start": "380319",
    "end": "382800"
  },
  {
    "text": "have a wide choice of such",
    "start": "382800",
    "end": "384720"
  },
  {
    "text": "destination targets without a vendor",
    "start": "384720",
    "end": "387919"
  },
  {
    "text": "looking",
    "start": "387919",
    "end": "388720"
  },
  {
    "text": "when using fluentd now you're probably",
    "start": "388720",
    "end": "391440"
  },
  {
    "text": "wondering",
    "start": "391440",
    "end": "392560"
  },
  {
    "text": "what you as a fluent user need to",
    "start": "392560",
    "end": "394800"
  },
  {
    "text": "configure",
    "start": "394800",
    "end": "395919"
  },
  {
    "start": "395000",
    "end": "395000"
  },
  {
    "text": "and how you can actually use fluentd",
    "start": "395919",
    "end": "398639"
  },
  {
    "text": "first",
    "start": "398639",
    "end": "399199"
  },
  {
    "text": "you must install fluentd in kubernetes",
    "start": "399199",
    "end": "401440"
  },
  {
    "text": "as a daemon set",
    "start": "401440",
    "end": "403280"
  },
  {
    "text": "daemon set is a component that runs on",
    "start": "403280",
    "end": "407360"
  },
  {
    "text": "each kubernetes node so if you have five",
    "start": "407360",
    "end": "410080"
  },
  {
    "text": "nodes",
    "start": "410080",
    "end": "410880"
  },
  {
    "text": "they will all have a fluency pod running",
    "start": "410880",
    "end": "413680"
  },
  {
    "text": "on them",
    "start": "413680",
    "end": "414479"
  },
  {
    "text": "you can configure fluency using a",
    "start": "414479",
    "end": "416479"
  },
  {
    "text": "fluency configuration file",
    "start": "416479",
    "end": "418560"
  },
  {
    "text": "now fluency configuration may be a bit",
    "start": "418560",
    "end": "421280"
  },
  {
    "start": "419000",
    "end": "419000"
  },
  {
    "text": "complex to",
    "start": "421280",
    "end": "422000"
  },
  {
    "text": "get started with but it's very powerful",
    "start": "422000",
    "end": "424560"
  },
  {
    "text": "in terms of processing and reformatting",
    "start": "424560",
    "end": "426720"
  },
  {
    "text": "your data",
    "start": "426720",
    "end": "427840"
  },
  {
    "text": "and for that you will use fluency",
    "start": "427840",
    "end": "429919"
  },
  {
    "text": "plugins fluently has",
    "start": "429919",
    "end": "431680"
  },
  {
    "text": "tons of plugins for different use cases",
    "start": "431680",
    "end": "434960"
  },
  {
    "text": "first of all you can define the data",
    "start": "434960",
    "end": "436800"
  },
  {
    "text": "sources these are all the applications",
    "start": "436800",
    "end": "439919"
  },
  {
    "text": "from which fluenty will start collecting",
    "start": "439919",
    "end": "442080"
  },
  {
    "text": "the logs",
    "start": "442080",
    "end": "443039"
  },
  {
    "text": "so first you configure which application",
    "start": "443039",
    "end": "445520"
  },
  {
    "text": "logs",
    "start": "445520",
    "end": "446479"
  },
  {
    "text": "you want fluenty to start collecting",
    "start": "446479",
    "end": "449360"
  },
  {
    "text": "second you configure how these data",
    "start": "449360",
    "end": "451280"
  },
  {
    "text": "entries will be processed",
    "start": "451280",
    "end": "453039"
  },
  {
    "text": "line by line so you parse each log as an",
    "start": "453039",
    "end": "456319"
  },
  {
    "text": "individual key value pair you have log",
    "start": "456319",
    "end": "459120"
  },
  {
    "text": "level",
    "start": "459120",
    "end": "459680"
  },
  {
    "text": "message date user id",
    "start": "459680",
    "end": "462960"
  },
  {
    "text": "ip address etc and you do that in",
    "start": "462960",
    "end": "465599"
  },
  {
    "text": "fluentd using",
    "start": "465599",
    "end": "466639"
  },
  {
    "text": "parsers after that you can enrich the",
    "start": "466639",
    "end": "469360"
  },
  {
    "text": "data",
    "start": "469360",
    "end": "469840"
  },
  {
    "text": "using record transformers again to have",
    "start": "469840",
    "end": "472479"
  },
  {
    "text": "even more information",
    "start": "472479",
    "end": "474080"
  },
  {
    "text": "on that data or you can even modify the",
    "start": "474080",
    "end": "476720"
  },
  {
    "text": "data",
    "start": "476720",
    "end": "477280"
  },
  {
    "text": "a great use case would be if you want to",
    "start": "477280",
    "end": "479919"
  },
  {
    "text": "anonymize",
    "start": "479919",
    "end": "480800"
  },
  {
    "text": "personal data in the logs for data",
    "start": "480800",
    "end": "483039"
  },
  {
    "text": "protection for example",
    "start": "483039",
    "end": "484960"
  },
  {
    "text": "and finally you have the output where",
    "start": "484960",
    "end": "488240"
  },
  {
    "text": "should the logs go",
    "start": "488240",
    "end": "489840"
  },
  {
    "text": "and for each such output target",
    "start": "489840",
    "end": "493039"
  },
  {
    "text": "there is a plugin like elasticsearch",
    "start": "493039",
    "end": "495680"
  },
  {
    "text": "mongodb",
    "start": "495680",
    "end": "496720"
  },
  {
    "text": "and so on and as you see here in the",
    "start": "496720",
    "end": "499199"
  },
  {
    "start": "498000",
    "end": "498000"
  },
  {
    "text": "example configuration file",
    "start": "499199",
    "end": "501039"
  },
  {
    "text": "fluendy has a concept of text",
    "start": "501039",
    "end": "504160"
  },
  {
    "text": "which you can use to group together logs",
    "start": "504160",
    "end": "507039"
  },
  {
    "text": "or to filter logs",
    "start": "507039",
    "end": "508720"
  },
  {
    "text": "so using these tags you can say i want",
    "start": "508720",
    "end": "511919"
  },
  {
    "text": "all logs with tag my app to be parsed",
    "start": "511919",
    "end": "515360"
  },
  {
    "text": "like that or i want logs with the tag my",
    "start": "515360",
    "end": "518479"
  },
  {
    "text": "service",
    "start": "518479",
    "end": "519200"
  },
  {
    "text": "to go to elasticsearch and so on and",
    "start": "519200",
    "end": "521919"
  },
  {
    "text": "also using these tags",
    "start": "521919",
    "end": "523599"
  },
  {
    "text": "you can easily filter out any unneeded",
    "start": "523599",
    "end": "526800"
  },
  {
    "text": "logs to save resources for example",
    "start": "526800",
    "end": "529440"
  },
  {
    "text": "in the flexible routing that i mentioned",
    "start": "529440",
    "end": "531519"
  },
  {
    "text": "before",
    "start": "531519",
    "end": "532800"
  },
  {
    "text": "that's why it's easy to configure",
    "start": "532800",
    "end": "534560"
  },
  {
    "text": "because using this text",
    "start": "534560",
    "end": "536399"
  },
  {
    "text": "you can very easily configure which logs",
    "start": "536399",
    "end": "538800"
  },
  {
    "text": "should go where",
    "start": "538800",
    "end": "540160"
  },
  {
    "text": "so that's basically how you can use",
    "start": "540160",
    "end": "542560"
  },
  {
    "text": "fluentd",
    "start": "542560",
    "end": "543360"
  },
  {
    "text": "for your logs now one big advantage of",
    "start": "543360",
    "end": "546320"
  },
  {
    "text": "fluency is its built-in reliability",
    "start": "546320",
    "end": "549360"
  },
  {
    "text": "when fluent collects and processes the",
    "start": "549360",
    "end": "551839"
  },
  {
    "start": "550000",
    "end": "550000"
  },
  {
    "text": "data",
    "start": "551839",
    "end": "552560"
  },
  {
    "text": "it saves it on hard drive until it sends",
    "start": "552560",
    "end": "555200"
  },
  {
    "text": "that process data to the configured",
    "start": "555200",
    "end": "557519"
  },
  {
    "text": "output destination this means that if",
    "start": "557519",
    "end": "560160"
  },
  {
    "text": "fluency pod",
    "start": "560160",
    "end": "561120"
  },
  {
    "text": "restarts in the middle of collecting or",
    "start": "561120",
    "end": "563600"
  },
  {
    "text": "processing",
    "start": "563600",
    "end": "564720"
  },
  {
    "text": "the data or the whole server restarts",
    "start": "564720",
    "end": "567440"
  },
  {
    "text": "the data will still be there",
    "start": "567440",
    "end": "569120"
  },
  {
    "text": "and when fluentd starts again it can",
    "start": "569120",
    "end": "571600"
  },
  {
    "text": "pick up from where it left",
    "start": "571600",
    "end": "572880"
  },
  {
    "text": "off and it also means you don't have to",
    "start": "572880",
    "end": "575680"
  },
  {
    "text": "configure",
    "start": "575680",
    "end": "576399"
  },
  {
    "text": "any additional storage for fluency like",
    "start": "576399",
    "end": "578480"
  },
  {
    "text": "a redis database",
    "start": "578480",
    "end": "579920"
  },
  {
    "text": "and so on what can also happen is",
    "start": "579920",
    "end": "583600"
  },
  {
    "text": "when the backend the output target is",
    "start": "583600",
    "end": "586640"
  },
  {
    "text": "not accessible",
    "start": "586640",
    "end": "587760"
  },
  {
    "text": "can happen that elasticsearch is down or",
    "start": "587760",
    "end": "590399"
  },
  {
    "text": "mongodb",
    "start": "590399",
    "end": "591040"
  },
  {
    "text": "isn't accessible in that case fluentd",
    "start": "591040",
    "end": "594080"
  },
  {
    "text": "will handle that",
    "start": "594080",
    "end": "595040"
  },
  {
    "text": "by automatically retrying to send logs",
    "start": "595040",
    "end": "597760"
  },
  {
    "text": "until that",
    "start": "597760",
    "end": "598720"
  },
  {
    "text": "endpoint becomes available again and in",
    "start": "598720",
    "end": "601519"
  },
  {
    "text": "addition to that you can also cluster",
    "start": "601519",
    "end": "603279"
  },
  {
    "text": "your fluency",
    "start": "603279",
    "end": "604000"
  },
  {
    "text": "setup to make it even more performant",
    "start": "604000",
    "end": "606800"
  },
  {
    "text": "and highly available",
    "start": "606800",
    "end": "608560"
  },
  {
    "text": "i should mention here that this is one",
    "start": "608560",
    "end": "611040"
  },
  {
    "text": "of the use cases of fluency",
    "start": "611040",
    "end": "612880"
  },
  {
    "text": "which is logging in kubernetes however",
    "start": "612880",
    "end": "615839"
  },
  {
    "text": "logging is",
    "start": "615839",
    "end": "616959"
  },
  {
    "text": "a very important topic in iot",
    "start": "616959",
    "end": "619519"
  },
  {
    "text": "applications too",
    "start": "619519",
    "end": "621040"
  },
  {
    "text": "or in non-containerized applications",
    "start": "621040",
    "end": "624160"
  },
  {
    "text": "running on bare metal servers for",
    "start": "624160",
    "end": "625760"
  },
  {
    "text": "example and many projects are using",
    "start": "625760",
    "end": "628240"
  },
  {
    "text": "fluenty for those",
    "start": "628240",
    "end": "629600"
  },
  {
    "text": "use cases as well so fluenty can be used",
    "start": "629600",
    "end": "632480"
  },
  {
    "text": "in many different environments",
    "start": "632480",
    "end": "634640"
  },
  {
    "text": "if you are interested in learning more",
    "start": "634640",
    "end": "636480"
  },
  {
    "text": "about fluency",
    "start": "636480",
    "end": "637680"
  },
  {
    "text": "i recommend checking out the online",
    "start": "637680",
    "end": "639600"
  },
  {
    "text": "resources and documentation of",
    "start": "639600",
    "end": "642000"
  },
  {
    "text": "fluentd",
    "start": "642000",
    "end": "644880"
  }
]