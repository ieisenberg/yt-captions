[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "I'm Erik Anderson if you ever see me coming come across me on github I mean Jonah a six and I'm a software engineer",
    "start": "30",
    "end": "7049"
  },
  {
    "text": "at Google honestly I'd be okay if someone asked me a question while I go but it might be a",
    "start": "7049",
    "end": "14070"
  },
  {
    "text": "little easier for mics or things like that with your answer I can repeat back if we wait to the end but I'm not really",
    "start": "14070",
    "end": "19949"
  },
  {
    "text": "too upset one way or the other but there I do have time for questions",
    "start": "19949",
    "end": "25080"
  },
  {
    "text": "and so I'll be talking about modifying G RPC services over time where basically you've got your service apparently it's",
    "start": "25080",
    "end": "32640"
  },
  {
    "text": "not a fixed thing and you need to extend it so as far as intended audience there's",
    "start": "32640",
    "end": "38670"
  },
  {
    "start": "36000",
    "end": "36000"
  },
  {
    "text": "actually a couple different ways you can go about this sort of talk but I hope that you've",
    "start": "38670",
    "end": "44489"
  },
  {
    "text": "toyed at least with gypsy and protobuf you know what the protocol er is to give",
    "start": "44489",
    "end": "49860"
  },
  {
    "text": "you the generic code you have messed with a couple different primitive data types and protobuf those things aren't",
    "start": "49860",
    "end": "56129"
  },
  {
    "text": "scary to you in any way that's where I sort of hope that you're in that sort of that that place in order to really",
    "start": "56129",
    "end": "63090"
  },
  {
    "text": "understand the talk but it's I guess you'll pick you'll have to",
    "start": "63090",
    "end": "70020"
  },
  {
    "text": "do if you're not but also you've started making your own services you've started playing with it and then you start",
    "start": "70020",
    "end": "76740"
  },
  {
    "text": "getting questions so should I do this or that or surely there's a better way to do so this and so you're searching for",
    "start": "76740",
    "end": "82229"
  },
  {
    "text": "some best practices and idioms I need to make some assumptions though",
    "start": "82229",
    "end": "88470"
  },
  {
    "start": "85000",
    "end": "85000"
  },
  {
    "text": "because there's many many different ways to use this stuff so I am going to assume that we're caring about",
    "start": "88470",
    "end": "94860"
  },
  {
    "text": "cross-platform cross language and we can't do tricks that only work for some people for some clients or something",
    "start": "94860",
    "end": "102150"
  },
  {
    "text": "like that also I'm assuming this is G RPC native I know that rest using rest with GFC is is",
    "start": "102150",
    "end": "109200"
  },
  {
    "text": "is definitely thing I'm completely good with that but it's not gonna be as much of a focus",
    "start": "109200",
    "end": "115259"
  },
  {
    "text": "here there's actually some other documentation on how to build nice clean REST API s-- with G RPC although I am",
    "start": "115259",
    "end": "122939"
  },
  {
    "text": "aware of it so it'll it'll seep through some places and also I'm assuming that",
    "start": "122939",
    "end": "128129"
  },
  {
    "text": "servers are updated before clients this might seem completely obvious to you but if you have back in scenario that you're",
    "start": "128129",
    "end": "135060"
  },
  {
    "text": "using geography to communicate between two servers you can totally have you update one server before the other it's",
    "start": "135060",
    "end": "140520"
  },
  {
    "text": "actually a client and it sees some new updated proto's and fields and stuff before the other and so it's not as much",
    "start": "140520",
    "end": "146880"
  },
  {
    "text": "for those cases granted you've got some things that are harder in that case because you can upgrade",
    "start": "146880",
    "end": "152190"
  },
  {
    "text": "both ways but you also are in control more control so some things become easier but I'm not really talking about",
    "start": "152190",
    "end": "157980"
  },
  {
    "text": "that it's also not the case of someone to find a service and now there's gonna be multiple implementations if you're",
    "start": "157980",
    "end": "165660"
  },
  {
    "text": "doing those sorts of services you have to have a little bit different view of",
    "start": "165660",
    "end": "172070"
  },
  {
    "text": "what is supported by the server so we're talking about changing",
    "start": "172070",
    "end": "180240"
  },
  {
    "start": "175000",
    "end": "175000"
  },
  {
    "text": "something over time there have to be some constraints well that's actually compatibility with all people who are currently using your service",
    "start": "180240",
    "end": "186810"
  },
  {
    "text": "but there's lots of different types of compatibility you can have binary and source compatibility which relate more",
    "start": "186810",
    "end": "193050"
  },
  {
    "text": "to the generic generated code and that involves particular languages then you",
    "start": "193050",
    "end": "198390"
  },
  {
    "text": "have wire compatibility which would be however things see realized on the wire will",
    "start": "198390",
    "end": "205520"
  },
  {
    "text": "this it was doing that earlier as well and then you've got behavioral compatible behavioral compatibility",
    "start": "205520",
    "end": "212370"
  },
  {
    "text": "where everything's good on the wire everything seems fine but your application is now at let's say",
    "start": "212370",
    "end": "217440"
  },
  {
    "text": "interpreting something differently than it was before and that ends up breaking a client so to just start we'll take a",
    "start": "217440",
    "end": "224010"
  },
  {
    "text": "binary and source just at the same time and there's actually quite a few",
    "start": "224010",
    "end": "229230"
  },
  {
    "start": "226000",
    "end": "226000"
  },
  {
    "text": "languages that protobuf and G RPC support and so that means basically all",
    "start": "229230",
    "end": "234690"
  },
  {
    "text": "bets are off if you're trying to do something fancy if you rename or remove something those",
    "start": "234690",
    "end": "241590"
  },
  {
    "text": "totally will break someone that's not normal that's not surprise to anyone probably if you change a method type",
    "start": "241590",
    "end": "247650"
  },
  {
    "text": "from one name to another that's gonna change method signatures that'll totally break people",
    "start": "247650",
    "end": "254180"
  },
  {
    "text": "in in like statically compiled languages but maybe it wouldn't break broken someone if they were using Python or",
    "start": "254180",
    "end": "259739"
  },
  {
    "text": "something like that primitive type changes you're like oh this was an in 32 I'm now gonna make an",
    "start": "259739",
    "end": "265050"
  },
  {
    "text": "in 64 and you're like oh that's fine they're both integers but it's lots of languages",
    "start": "265050",
    "end": "270830"
  },
  {
    "text": "will not be happy with you on that because it'll be an implicit caste or something like that so that basically leaves us with adding services methods",
    "start": "270830",
    "end": "278000"
  },
  {
    "text": "messages and fields which if you've done much like library API mean and some stuff isn't surprising you can basically",
    "start": "278000",
    "end": "284360"
  },
  {
    "text": "add stuff that is the limitation and so as we sort of go through this",
    "start": "284360",
    "end": "291560"
  },
  {
    "start": "288000",
    "end": "288000"
  },
  {
    "text": "it's like okay how do we make use of this this knowledge so let's",
    "start": "291560",
    "end": "296660"
  },
  {
    "text": "say we just sort of have this conceptual library service which is in some is used as an example in some places",
    "start": "296660",
    "end": "303460"
  },
  {
    "text": "so we've got we want to be able to create a book go ahead and get above list stuff delete stuff and update to",
    "start": "303460",
    "end": "310700"
  },
  {
    "text": "the book as well and so like I put in this book here as a string that's going to be some identifier for the book it's",
    "start": "310700",
    "end": "318260"
  },
  {
    "text": "gonna be let's say the book name or but it's guaranteed to be unique and we're in list books if you're not",
    "start": "318260",
    "end": "325580"
  },
  {
    "text": "familiar with part about the Google protobuf empty that is just a message with nothing in it so it's the the",
    "start": "325580",
    "end": "332300"
  },
  {
    "text": "equivalent of a void in some languages so this is sort of what we're starting with I'm not saying that this actually",
    "start": "332300",
    "end": "339830"
  },
  {
    "text": "works but this is what we're wanting to do and we're sort of going from here to to further",
    "start": "339830",
    "end": "346960"
  },
  {
    "text": "to make it actually maintainable and so I introduced some of these best",
    "start": "346960",
    "end": "352430"
  },
  {
    "start": "350000",
    "end": "350000"
  },
  {
    "text": "practices we should plan for the replacement of the service ideally so right now it's suggested to include the",
    "start": "352430",
    "end": "359690"
  },
  {
    "text": "version number in the package name itself so with area top that we have the package that's what I'm talking about",
    "start": "359690",
    "end": "365630"
  },
  {
    "text": "here so you could include a v1 it's actually not that big video if you forget to do that because you can have a",
    "start": "365630",
    "end": "371060"
  },
  {
    "text": "v2 on the v2 but it's having a version in the package er or in the service name",
    "start": "371060",
    "end": "378320"
  },
  {
    "text": "itself can be a good way of of separating things whenever you have a",
    "start": "378320",
    "end": "383360"
  },
  {
    "text": "breaking API change in the service change in the future also we",
    "start": "383360",
    "end": "390310"
  },
  {
    "text": "GRDC doesn't let you have multiple arguments or some things like that it",
    "start": "390310",
    "end": "395390"
  },
  {
    "text": "relies very very heavily on on messages and you extending messages",
    "start": "395390",
    "end": "401250"
  },
  {
    "text": "so you want to use messages for your extending point because that's the intention if you if you sort of avoid",
    "start": "401250",
    "end": "407130"
  },
  {
    "text": "them you're gonna have some trouble so when in doubt create a new message for each RPC method so you've got foo method",
    "start": "407130",
    "end": "414720"
  },
  {
    "text": "and you're gonna have food method request and foo method response and you can just go about that just all day long",
    "start": "414720",
    "end": "421170"
  },
  {
    "text": "and that allows you to have a very very fine scope for adding things in the future",
    "start": "421170",
    "end": "427280"
  },
  {
    "text": "and then you can also feel free to add new services and methods as necessary",
    "start": "428630",
    "end": "433830"
  },
  {
    "text": "you don't have to limit yourself to just a very very few number of methods you can add them as they're useful but at",
    "start": "433830",
    "end": "439860"
  },
  {
    "text": "the same time don't have an explosion for every single different combination of",
    "start": "439860",
    "end": "445280"
  },
  {
    "text": "possible arguments this is probably nothing very special methods are great but if you have tons",
    "start": "445280",
    "end": "452100"
  },
  {
    "text": "of them you start drowning in just the the accounts that they are and so here's",
    "start": "452100",
    "end": "457500"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "some of the changes that I made to that earlier sort of conceptual model I've gone ahead and put a v1 in the package",
    "start": "457500",
    "end": "463669"
  },
  {
    "text": "and then I've created a request arguments for each of these",
    "start": "463669",
    "end": "469580"
  },
  {
    "text": "request messages for each of these methods and that it means that if in the future list books now all of a sudden we",
    "start": "469580",
    "end": "475710"
  },
  {
    "text": "want to let's say have a filter for you to be able to say only certain books am",
    "start": "475710",
    "end": "481470"
  },
  {
    "text": "i interested in you have a place to put that if you didn't do this it's not the worst thing the worst thing in the world",
    "start": "481470",
    "end": "486750"
  },
  {
    "text": "you would just need a new method that then has some message where you could",
    "start": "486750",
    "end": "492000"
  },
  {
    "text": "specify those things but adding adding extra parameters to a to",
    "start": "492000",
    "end": "498120"
  },
  {
    "text": "an RPC is just happens all the time and so you can plan for it a little bit and then you avoid having tons and tons of",
    "start": "498120",
    "end": "506070"
  },
  {
    "text": "methods to me that one was sort of resti let's say that we've got something more",
    "start": "506070",
    "end": "512039"
  },
  {
    "text": "functional like a computational and so let's say we've got this nice infrastructure we're in the",
    "start": "512039",
    "end": "518039"
  },
  {
    "text": "infrastructure and we're providing a clock service it's really really advanced you call it with no arguments",
    "start": "518039",
    "end": "524159"
  },
  {
    "text": "that's the empty and then you get back a timestamp this is this isn't some ways fine but you might instead choose to go",
    "start": "524159",
    "end": "532040"
  },
  {
    "text": "ahead and make the request make the response message types and there they would just be on the end so this is",
    "start": "532040",
    "end": "539649"
  },
  {
    "text": "it seems boilerplate lady again it would have been okay if we forgot we would",
    "start": "539649",
    "end": "545630"
  },
  {
    "text": "have just end up having a better time method later but doing this ahead of",
    "start": "545630",
    "end": "551510"
  },
  {
    "text": "time does save us that cost and really if for the users it's not that much",
    "start": "551510",
    "end": "556550"
  },
  {
    "text": "harder to use this API versus the one we had before so it's not with it too much cost oh",
    "start": "556550",
    "end": "564700"
  },
  {
    "text": "hey hello people chatting with me alright so that so that gets us binary",
    "start": "564700",
    "end": "571399"
  },
  {
    "text": "and source now we're gonna go ahead and go on to wire compatibility this one's a little bit more in-depth",
    "start": "571399",
    "end": "576760"
  },
  {
    "text": "so RBC's in GRC are only distant distinguished by their name so that is",
    "start": "576760",
    "end": "582680"
  },
  {
    "text": "the package they're in the service name itself and then the method name anything else than that is implicit and so that",
    "start": "582680",
    "end": "589880"
  },
  {
    "text": "means request and response types are implicit those names that are used the cardinality whether it's a streaming",
    "start": "589880",
    "end": "595610"
  },
  {
    "text": "request or a streaming response or just a single request those things are implicit that means you",
    "start": "595610",
    "end": "603290"
  },
  {
    "text": "could go ahead and add new services and methods because those have a different name and such they won't collide with",
    "start": "603290",
    "end": "608900"
  },
  {
    "text": "anything for it also means you could change a message from one type to another if you were really wanting to",
    "start": "608900",
    "end": "616040"
  },
  {
    "text": "and you could go ahead and add a stream keyword to an existing method but because of where we were before with",
    "start": "616040",
    "end": "623839"
  },
  {
    "text": "api's doing those last two will totally break break people in at compilation",
    "start": "623839",
    "end": "629390"
  },
  {
    "text": "time now granted if you can force people to get a compilation error and then they'll update but it doesn't work as",
    "start": "629390",
    "end": "636860"
  },
  {
    "text": "well why our compatibility for protobuf is is is even a little more granted a lot of",
    "start": "636860",
    "end": "643430"
  },
  {
    "start": "638000",
    "end": "638000"
  },
  {
    "text": "people have had familiar you are already familiar with protobuf so they may not be aware of some of this",
    "start": "643430",
    "end": "648760"
  },
  {
    "text": "and some of this is slightly different in proto 3 than proto - but message names are implicit so",
    "start": "648760",
    "end": "656170"
  },
  {
    "text": "if you change the message from one name to another it's it can act like the same",
    "start": "656170",
    "end": "662089"
  },
  {
    "text": "thing except when that's not the case like any",
    "start": "662089",
    "end": "667240"
  },
  {
    "text": "and except I guess metadata would also be a common case where it's sort of",
    "start": "667240",
    "end": "672560"
  },
  {
    "text": "leaks through fill beams are also implicit that's why we've got the tags when you know you've got the equals of one at the end of your field those are",
    "start": "672560",
    "end": "680150"
  },
  {
    "text": "also implicit except when they're not JSON converting to and from JSON is pretty common and field mask is maybe",
    "start": "680150",
    "end": "687470"
  },
  {
    "text": "something that you might want to use I'll talk about it later so you know I'm saying it is but then",
    "start": "687470",
    "end": "695330"
  },
  {
    "text": "it's also not we do know that field tags are explicit you cannot change the the tag where it",
    "start": "695330",
    "end": "701150"
  },
  {
    "text": "says equals one equals two equals three at the end if you change that yes you're totally gonna be breaking someone that",
    "start": "701150",
    "end": "707030"
  },
  {
    "text": "should not be a surprise one interesting thing is some tags are the same on the wire oh sorry some types",
    "start": "707030",
    "end": "713390"
  },
  {
    "text": "are the same on the wire in 32 is the same as in 64 so that means you could actually say ah I'm going to upgrade I",
    "start": "713390",
    "end": "719900"
  },
  {
    "text": "need some more bits I'm going to upgrade this to an n64 as far as protobuf concern is concerned that would be fine",
    "start": "719900",
    "end": "726400"
  },
  {
    "text": "but it's risky because of the API and the ABI stuff earlier",
    "start": "726400",
    "end": "733300"
  },
  {
    "text": "so really nothing new our limitations were pre-existing we're really just",
    "start": "733300",
    "end": "738890"
  },
  {
    "text": "limited by binary and source compatible compatibility so I",
    "start": "738890",
    "end": "744880"
  },
  {
    "text": "don't know what that same practices oh yes we follow the same practices we were talking about before with by with the",
    "start": "744880",
    "end": "751400"
  },
  {
    "text": "binary source now yes you've got more options here if you",
    "start": "751400",
    "end": "757130"
  },
  {
    "text": "don't care about that binary source you could do more fiddly bits here you think oh I control both the server and the",
    "start": "757130",
    "end": "763340"
  },
  {
    "text": "client that means I can control things however in a larger application even if you control both sides it's actually",
    "start": "763340",
    "end": "768560"
  },
  {
    "text": "really hard to make it breaking change all at once to the entire code base and so you store start having to to abide by",
    "start": "768560",
    "end": "777200"
  },
  {
    "text": "the earlier roles you you really only get to break stuff whenever it's a small enough project and you control both",
    "start": "777200",
    "end": "783470"
  },
  {
    "text": "sides and then that takes us to behavior compatibility which is actually a really",
    "start": "783470",
    "end": "791000"
  },
  {
    "start": "789000",
    "end": "789000"
  },
  {
    "text": "really wide scope most of your effort I think will actually be spent here the other stuff",
    "start": "791000",
    "end": "796550"
  },
  {
    "text": "you can add stuff that's easy we move on with life here is the application specific thesis",
    "start": "796550",
    "end": "801980"
  },
  {
    "text": "which means I can't necessarily solve all of your problems everyone's gonna have a different problem but there are",
    "start": "801980",
    "end": "807769"
  },
  {
    "text": "some common patterns that you all might actually want to know about",
    "start": "807769",
    "end": "812200"
  },
  {
    "text": "so here's some of the best practices I want to talk about we'll go ahead and start with the the new permanent fields",
    "start": "813430",
    "end": "819440"
  },
  {
    "text": "default to zero or empty string or the each primitive sir has its default now",
    "start": "819440",
    "end": "825260"
  },
  {
    "start": "825000",
    "end": "825000"
  },
  {
    "text": "that is actually a statement that is just true that is how new default fields work in proto 3 the point of this is to",
    "start": "825260",
    "end": "831829"
  },
  {
    "text": "actually accept that it that's how proto 3 works don't try to",
    "start": "831829",
    "end": "837399"
  },
  {
    "text": "to avoid it just because you think that that's silly there are ways to avoid it",
    "start": "837399",
    "end": "842899"
  },
  {
    "text": "there are ways to get around it but if you just let the zero value be the I don't care value or the default value",
    "start": "842899",
    "end": "849260"
  },
  {
    "text": "you'll you'll probably have a better time if you need to if you need to know field",
    "start": "849260",
    "end": "854810"
  },
  {
    "text": "presence because that was removed in proto 2 - proto 3 you there are these",
    "start": "854810",
    "end": "860510"
  },
  {
    "text": "these rappers I'm an in fact it's called rappers proto so every primitive field has one of these rappers and so it's",
    "start": "860510",
    "end": "867829"
  },
  {
    "text": "really really complexes and you've got a string value and it contains a value that's it contains a string value that's",
    "start": "867829",
    "end": "873529"
  },
  {
    "text": "that's all we're talking about these are not anything that are really special it's just that we need them and so",
    "start": "873529",
    "end": "879800"
  },
  {
    "text": "there's some well-defined ones that are already made for you so you're free to use those also if",
    "start": "879800",
    "end": "886490"
  },
  {
    "text": "there's a couple different fields that you need to sort of know about whether they're there or not together you can go",
    "start": "886490",
    "end": "892760"
  },
  {
    "text": "ahead and make one of your message that's custom that has those specific fields and that message overall is",
    "start": "892760",
    "end": "899240"
  },
  {
    "text": "either present or not but all this relies on the fact that while we lost field presence for primitives it's still",
    "start": "899240",
    "end": "905930"
  },
  {
    "text": "there for for messages and this is actually not really all that strange most programming languages actually deal",
    "start": "905930",
    "end": "912860"
  },
  {
    "text": "deal this way you have an int in your java or c and there is no oh this int",
    "start": "912860",
    "end": "919339"
  },
  {
    "text": "isn't there you're sort of forced to make it 0 or negative 1 or something like that and if you need it to if you",
    "start": "919339",
    "end": "927199"
  },
  {
    "text": "need to know whether it's there or not you end up making a pointer to it and then having you know or something like that that's the same thing as this this",
    "start": "927199",
    "end": "933889"
  },
  {
    "text": "is just normal boxing that that takes place in languages so moving on we there's updates",
    "start": "933889",
    "end": "942880"
  },
  {
    "text": "whenever you add a new field if you're not a little careful you could actually have some client that's doing an update",
    "start": "942880",
    "end": "949430"
  },
  {
    "text": "clearing that field so let's say that we we've got our library service before so",
    "start": "949430",
    "end": "954649"
  },
  {
    "start": "951000",
    "end": "951000"
  },
  {
    "text": "I just took out the important part hearts we've got update book and I ask alright this is the book I want the new",
    "start": "954649",
    "end": "960709"
  },
  {
    "text": "contents to be that's the in the request and then in the the book response is the",
    "start": "960709",
    "end": "966889"
  },
  {
    "text": "name the author in the title and that's that's really all we have right now",
    "start": "966889",
    "end": "972250"
  },
  {
    "text": "well and I guess let's let's say that I'm actually there's a client that's pre-existing today and it looks at the",
    "start": "972490",
    "end": "979519"
  },
  {
    "text": "book request and it goes ahead and updates the author name because it was misspelled or something like that so it",
    "start": "979519",
    "end": "987589"
  },
  {
    "text": "would commonly get the the current book you would modify the message and then it",
    "start": "987589",
    "end": "992750"
  },
  {
    "text": "would upload it again be an update book if we end up having a new field because",
    "start": "992750",
    "end": "998930"
  },
  {
    "text": "apparently users we're forced to keep on reading the same book over and over we're now going to introduce this field",
    "start": "998930",
    "end": "1004329"
  },
  {
    "text": "called read and if it's read now then we have a little icon or something on the UI to tell hey user you might not be as",
    "start": "1004329",
    "end": "1011410"
  },
  {
    "text": "interested in this book so if there's an existing client that was modifying the",
    "start": "1011410",
    "end": "1017410"
  },
  {
    "text": "author it downloaded it the the red bit was let's say on whenever it processed",
    "start": "1017410",
    "end": "1023319"
  },
  {
    "text": "that it would act that client which was older would throw it away because it wouldn't know about red and so then",
    "start": "1023319",
    "end": "1029530"
  },
  {
    "text": "whenever the client then modifies author and then uploads the the changed version",
    "start": "1029530",
    "end": "1035339"
  },
  {
    "text": "the server now thinks that this the client was clearing red because it looks",
    "start": "1035339",
    "end": "1040990"
  },
  {
    "text": "the value of red and it's now zero so it's now accidentally performing a change",
    "start": "1040990",
    "end": "1046409"
  },
  {
    "text": "this was not as much of a problem in proto 2 because you had field presence so you can see Oh rad isn't there it",
    "start": "1046409",
    "end": "1052210"
  },
  {
    "text": "must not be a set so film mask is actually a partial solution to this you might not have",
    "start": "1052210",
    "end": "1059380"
  },
  {
    "text": "looked at film mask before it's it's there but it's not necessarily advertised in a",
    "start": "1059380",
    "end": "1065509"
  },
  {
    "text": "lot of places and so basically all it is is you say which fields you care about this is useful for both query where you",
    "start": "1065509",
    "end": "1072860"
  },
  {
    "text": "say I only care about these three fields don't bother looking up the rest from the database but this can also be useful",
    "start": "1072860",
    "end": "1078019"
  },
  {
    "text": "for updating briefs say these are the fields that are actually selected and so it can have a basically a repeated field",
    "start": "1078019",
    "end": "1085399"
  },
  {
    "text": "of paths where you specify and it works fine with sub messages if you have messages nested inside of other messages",
    "start": "1085399",
    "end": "1091070"
  },
  {
    "text": "you can say just the fields you're interested in and it field most defaults to all fields",
    "start": "1091070",
    "end": "1096830"
  },
  {
    "text": "because this works pretty well for query where you say just get me everything and you don't need to field fill in the",
    "start": "1096830",
    "end": "1102919"
  },
  {
    "text": "field mask the the reason I say that this is a partial solution is while it",
    "start": "1102919",
    "end": "1108200"
  },
  {
    "text": "would solve our problem from before because the the client would say I only updated author and so the server would",
    "start": "1108200",
    "end": "1114769"
  },
  {
    "text": "know to only update author it's really annoying to use all the time it's it's",
    "start": "1114769",
    "end": "1120350"
  },
  {
    "text": "fine to use some places this doesn't hurt but if like every single API you started in throwing this in you'd get it",
    "start": "1120350",
    "end": "1126710"
  },
  {
    "text": "probably pretty annoyed with with specifying these fields but this is how you can use it so we had",
    "start": "1126710",
    "end": "1132019"
  },
  {
    "text": "our update book request from earlier and you just go ahead and specify a mask in that request and then this is what Java",
    "start": "1132019",
    "end": "1139909"
  },
  {
    "text": "would look like but each each language has some helper utility in",
    "start": "1139909",
    "end": "1146210"
  },
  {
    "text": "order to use this field mask and so we go ahead and get the name of the book and we load the book from the database",
    "start": "1146210",
    "end": "1153230"
  },
  {
    "text": "with its current values as they are right now then we do this utility function what",
    "start": "1153230",
    "end": "1160100"
  },
  {
    "text": "this does is it is it copies fields I can even point with this ya know we get",
    "start": "1160100",
    "end": "1166100"
  },
  {
    "text": "copies fills fields from the request book into the destination book into the",
    "start": "1166100",
    "end": "1172490"
  },
  {
    "text": "current version that we just grabbed from the database but it filters based on the mask so it only copies the ones",
    "start": "1172490",
    "end": "1178580"
  },
  {
    "text": "that are listed in the field mask and at the end of it all we'll go ahead and push the the book back into the database",
    "start": "1178580",
    "end": "1185480"
  },
  {
    "text": "at the very very end so that's basically the flow there are some options that on",
    "start": "1185480",
    "end": "1191330"
  },
  {
    "text": "the field Maskull util if you're doing this yourself you can you should probably take a look at those but it's",
    "start": "1191330",
    "end": "1196820"
  },
  {
    "text": "not important for this so going a little bit more I mentioned",
    "start": "1196820",
    "end": "1202220"
  },
  {
    "text": "it earlier there's actually some other API guides the rest one suggests not to",
    "start": "1202220",
    "end": "1208880"
  },
  {
    "text": "add new fields to things that are updated in this fashion not all of your messages are used with that sort of",
    "start": "1208880",
    "end": "1216679"
  },
  {
    "text": "update request that that's actually a little bit hard in my mind granted",
    "start": "1216679",
    "end": "1222850"
  },
  {
    "text": "there's reasons for it I think that this is still slightly an unsolved problem",
    "start": "1222850",
    "end": "1228590"
  },
  {
    "text": "except that protobuf three 5re adds unknown field support so the initial",
    "start": "1228590",
    "end": "1235610"
  },
  {
    "text": "problem was the client threw away the request sorry that the red field with",
    "start": "1235610",
    "end": "1241100"
  },
  {
    "text": "unknown fields the client would go ahead and save that and it has no clue what it is but it just saves it and if that",
    "start": "1241100",
    "end": "1247610"
  },
  {
    "text": "message gets serialized again so it didn't know it whenever it read it whenever it serialize is it again it'll",
    "start": "1247610",
    "end": "1253549"
  },
  {
    "text": "go ahead and re-add that that field and so it's just a pass-through mechanism",
    "start": "1253549",
    "end": "1258769"
  },
  {
    "text": "and that's useful if you end up persisting stuff in a database or something like that like a local data",
    "start": "1258769",
    "end": "1264019"
  },
  {
    "text": "cache or something like that whenever you do understand what these fields are you would be able to read them but also",
    "start": "1264019",
    "end": "1270919"
  },
  {
    "text": "in this case it allows pass-through and so the unknown fields are no longer",
    "start": "1270919",
    "end": "1276259"
  },
  {
    "text": "cleared so in a couple more months has heard about 35 seats more and more",
    "start": "1276259",
    "end": "1281720"
  },
  {
    "text": "clients using it this may be a problem that is just not an issue anymore it",
    "start": "1281720",
    "end": "1286909"
  },
  {
    "text": "just evaporates if you can require thread about 35",
    "start": "1286909",
    "end": "1292360"
  },
  {
    "text": "so some people don't necessarily know how to use air details with your PC that's completely fair so there is",
    "start": "1292659",
    "end": "1301179"
  },
  {
    "start": "1293000",
    "end": "1293000"
  },
  {
    "text": "so what what the suggestion is we've got the status code and that's good but it's",
    "start": "1301179",
    "end": "1306409"
  },
  {
    "text": "very very coarse for additional information you should make a message for it and you make that however you",
    "start": "1306409",
    "end": "1313490"
  },
  {
    "text": "want sits for whatever is useful for your application to say okay this failed clients whenever you need to know what",
    "start": "1313490",
    "end": "1319820"
  },
  {
    "text": "went wrong here's here's what you look at and you can use a message for each different type of failure or for a small",
    "start": "1319820",
    "end": "1326750"
  },
  {
    "text": "class there's actually some predefined ones in air details proto I just took a sampling here there's there's some more",
    "start": "1326750",
    "end": "1332420"
  },
  {
    "text": "a debug info is just like a list of stacks just justice strings quota failure has a little bit of information",
    "start": "1332420",
    "end": "1339050"
  },
  {
    "text": "say Oh was this a failure because that particular clients was doing too many QPS or is this a failure because the",
    "start": "1339050",
    "end": "1346370"
  },
  {
    "text": "user ran out of disk space so it can provide a little more information their",
    "start": "1346370",
    "end": "1351680"
  },
  {
    "text": "help just provides a link to a documentation so that whenever someone sees this they can actually go and look",
    "start": "1351680",
    "end": "1356990"
  },
  {
    "text": "up what the actual more words than can fit in the description they can look at",
    "start": "1356990",
    "end": "1362330"
  },
  {
    "text": "what went wrong and there's also localized message which is useful because in the normal description we'll",
    "start": "1362330",
    "end": "1368360"
  },
  {
    "text": "be in like English localized message can be localized string for whoever the client is and so then they can read it",
    "start": "1368360",
    "end": "1375520"
  },
  {
    "text": "so the recommended practice is to use these messages and they need to put them",
    "start": "1375520",
    "end": "1381050"
  },
  {
    "text": "somewhere that really is put them in metadata which is what we used to recommend it turned out to be hard to",
    "start": "1381050",
    "end": "1388190"
  },
  {
    "text": "pass that around in some languages and it was unclear you've got this metadata and you've got this error it was a",
    "start": "1388190",
    "end": "1394160"
  },
  {
    "text": "little unclear which how they related exactly what so was the particular",
    "start": "1394160",
    "end": "1399530"
  },
  {
    "text": "metadata key because of the error or was that just extra information let's say tracing",
    "start": "1399530",
    "end": "1405110"
  },
  {
    "text": "information or something like that and so Google RPC status is pretty simple",
    "start": "1405110",
    "end": "1411980"
  },
  {
    "text": "it's the code in the message which exists in G RPC today and then an inny for details",
    "start": "1411980",
    "end": "1419350"
  },
  {
    "text": "we actually G RPC actually used to use this exact message type for its response",
    "start": "1419410",
    "end": "1426080"
  },
  {
    "text": "status and there was a point that we decided to remove the dependency on protobuf and so we went ahead and",
    "start": "1426080",
    "end": "1431360"
  },
  {
    "text": "removed this this message but we did we decided not to put details anywhere",
    "start": "1431360",
    "end": "1437810"
  },
  {
    "text": "other than just the metadata because the metadata would work well for that it turns out that that it does work it's",
    "start": "1437810",
    "end": "1444080"
  },
  {
    "text": "just sort of a little bit hard in AP is to propagate all these things together",
    "start": "1444080",
    "end": "1449480"
  },
  {
    "text": "so languages are receiving utilities to",
    "start": "1449480",
    "end": "1455900"
  },
  {
    "text": "work nicely with Google RPC status not every language has it yet but it's coming and so for like Java here's the",
    "start": "1455900",
    "end": "1463250"
  },
  {
    "text": "difference of before now you end up getting a status this Google",
    "start": "1463250",
    "end": "1468570"
  },
  {
    "text": "are Cacique on Google RPC status as opposed to the normal status and this is",
    "start": "1468570",
    "end": "1474480"
  },
  {
    "text": "what the client code would look like but then you have that any field where you can put associate information if you're",
    "start": "1474480",
    "end": "1480390"
  },
  {
    "text": "propagating it with I guess exceptions and Java is a little handled already Java was was able to do it some other",
    "start": "1480390",
    "end": "1486870"
  },
  {
    "text": "languages it will propagate more nicely with error paths",
    "start": "1486870",
    "end": "1492290"
  },
  {
    "text": "and then the last thing because we like streams and we like long-lived RPC is",
    "start": "1493130",
    "end": "1499560"
  },
  {
    "start": "1497000",
    "end": "1497000"
  },
  {
    "text": "that's one of the things that are really nice to do because you can issue the request and just wait for an event to",
    "start": "1499560",
    "end": "1504900"
  },
  {
    "text": "happen I highly suggest that you break that occasionally because clients",
    "start": "1504900",
    "end": "1511380"
  },
  {
    "text": "are really easy at avoiding work that they don't have to do so whether in",
    "start": "1511380",
    "end": "1516990"
  },
  {
    "text": "whether on purpose or not and so if a client doesn't realize they need to",
    "start": "1516990",
    "end": "1522420"
  },
  {
    "text": "handle the fact that oh this RPC might fail before it completes then they very likely will have some bug in that code",
    "start": "1522420",
    "end": "1528900"
  },
  {
    "text": "path and so go ahead and if there's something that takes a while go ahead and sometimes purposefully complete the",
    "start": "1528900",
    "end": "1535710"
  },
  {
    "text": "RPC prematurely that could just be after a fixed age or randomly just to",
    "start": "1535710",
    "end": "1540750"
  },
  {
    "text": "introduce some noise and then the client will see that it it completed early and then go ahead and reissue their request",
    "start": "1540750",
    "end": "1547140"
  },
  {
    "text": "and then it'll it'll be able to wait a while longer there are some cases that this can free",
    "start": "1547140",
    "end": "1553020"
  },
  {
    "text": "up connections but as far as this goes I'm mainly talking about it for the",
    "start": "1553020",
    "end": "1558510"
  },
  {
    "text": "client code health and now we're to QA",
    "start": "1558510",
    "end": "1564530"
  },
  {
    "text": "thank thank you thank you he's he's in the room right here",
    "start": "1566360",
    "end": "1572270"
  },
  {
    "text": "oh",
    "start": "1572300",
    "end": "1574330"
  },
  {
    "text": "no it seems oh look oh [Laughter]",
    "start": "1578530",
    "end": "1585400"
  },
  {
    "text": "so does does anyone have any questions like this is I guess free for all",
    "start": "1585400",
    "end": "1590930"
  },
  {
    "text": "because people have probably dealt with their own problems did were people following what was happening with the unknown fields you might not have even",
    "start": "1590930",
    "end": "1598340"
  },
  {
    "text": "noticed that undone fields were being added in progra 3:5 I think a lot of people that probably makes them pretty",
    "start": "1598340",
    "end": "1603920"
  },
  {
    "text": "happy because that was a feature they sorely missed from protobuf too",
    "start": "1603920",
    "end": "1609880"
  },
  {
    "text": "so the question was how do the versions work or how do they they interact are",
    "start": "1616270",
    "end": "1621350"
  },
  {
    "text": "they compatible so to begin with most languages if it's supported produce to originally part of",
    "start": "1621350",
    "end": "1628940"
  },
  {
    "text": "a 3-run time also supports protobuf too so you can mix and match however you want in that case now granted read about",
    "start": "1628940",
    "end": "1636020"
  },
  {
    "text": "three supports more languages it was a simplification in part to allow more",
    "start": "1636020",
    "end": "1641420"
  },
  {
    "text": "languages to be supported and so you may not have as many LaPlante languages",
    "start": "1641420",
    "end": "1646730"
  },
  {
    "text": "that's can sport it but if you like prota - you can keep rota - in gypsy works find the prototype it is as far as wire compatibility",
    "start": "1646730",
    "end": "1655450"
  },
  {
    "text": "read about three and front about to use the same wire format there is some",
    "start": "1655450",
    "end": "1660800"
  },
  {
    "text": "compatibility there then the intended way of dealing with it is let's say",
    "start": "1660800",
    "end": "1666560"
  },
  {
    "text": "you've got a pret about three clients and then you've got a protobuf - server the product buff - server",
    "start": "1666560",
    "end": "1672340"
  },
  {
    "text": "sees a little bit more information than the protobuf three and so if you're going to have them differ you would",
    "start": "1672340",
    "end": "1678380"
  },
  {
    "text": "probably have the consuming side be protobuf - because you can then see a",
    "start": "1678380",
    "end": "1684500"
  },
  {
    "text": "little bit more information but it can work a little bit but both ways",
    "start": "1684500",
    "end": "1689930"
  },
  {
    "text": "if you're if you're careful as far as some of the features and stuff that we're adding Pro pro 3 there's all heard",
    "start": "1689930",
    "end": "1696170"
  },
  {
    "text": "about - equivalents to them and things like that so there is it was understood that you might need to mix and match a",
    "start": "1696170",
    "end": "1702680"
  },
  {
    "text": "little bit and as far as the the and put about three compatibility as far",
    "start": "1702680",
    "end": "1708950"
  },
  {
    "text": "as which type you use those you can actually have proto three messages include proto 2 messages and even that",
    "start": "1708950",
    "end": "1716390"
  },
  {
    "text": "level it's not like you have to have a particular tree of messages that you don't cross the streams",
    "start": "1716390",
    "end": "1721900"
  },
  {
    "text": "you can actually mix and match a little bit more than that",
    "start": "1721900",
    "end": "1726399"
  },
  {
    "text": "so the question is when do you know when you break compatibility between systems between proto 2 and Pro 2 3 is that we",
    "start": "1728440",
    "end": "1733850"
  },
  {
    "text": "are saying so that is basically getting here add stuff don't remove stuff don't change",
    "start": "1733850",
    "end": "1741770"
  },
  {
    "text": "names if you aren't wanting to support JSON or",
    "start": "1741770",
    "end": "1746960"
  },
  {
    "text": "field masks you can change names that was classically completely fine to do and Preta buff",
    "start": "1746960",
    "end": "1752380"
  },
  {
    "text": "but generally nowadays it's it's a little bit closer to just add",
    "start": "1752380",
    "end": "1757960"
  },
  {
    "text": "there was a question over here",
    "start": "1757960",
    "end": "1761590"
  },
  {
    "text": "so the question is was there any request from the community for json-rpc compatibility or translation i've not",
    "start": "1766870",
    "end": "1774470"
  },
  {
    "text": "seen any for reporters specifically json-rpc there is quite a bit of translation between protobuf and",
    "start": "1774470",
    "end": "1780740"
  },
  {
    "text": "javascript and json no granted that is that may not I think some people get a",
    "start": "1780740",
    "end": "1787100"
  },
  {
    "text": "little confused on that that is if you have a pretty buff message there is a JSON encoding for it and you can go back",
    "start": "1787100",
    "end": "1793940"
  },
  {
    "text": "and forth between it it's not I have some arbitrary JSON and I want a protobuf message for it it doesn't why",
    "start": "1793940",
    "end": "1800210"
  },
  {
    "text": "it's not quite as useful for that you may get lucky but you may not I've not seen anything for JSON RPC specifically",
    "start": "1800210",
    "end": "1806480"
  },
  {
    "text": "it seems very possible I think most of the tools are already there if you were so inclined",
    "start": "1806480",
    "end": "1813940"
  },
  {
    "text": "but I don't know of any movement in that print",
    "start": "1813940",
    "end": "1818740"
  },
  {
    "text": "oh so not many questions y'all have had no trouble making a pis and letting them",
    "start": "1819330",
    "end": "1826259"
  },
  {
    "text": "survive the test of time granted gr pcs only so old but this is must be really",
    "start": "1826259",
    "end": "1831960"
  },
  {
    "text": "really easy",
    "start": "1831960",
    "end": "1834289"
  },
  {
    "text": "[Music] okay so the question is is there any way",
    "start": "1840510",
    "end": "1847559"
  },
  {
    "text": "to add gzip compression after the server's already deployed and the the clients are using it actually so the",
    "start": "1847559",
    "end": "1855659"
  },
  {
    "text": "server doesn't support",
    "start": "1855659",
    "end": "1858529"
  },
  {
    "text": "and so you're worried that some clients may not have support gzip yes",
    "start": "1861379",
    "end": "1868020"
  },
  {
    "text": "[Music]",
    "start": "1868020",
    "end": "1871230"
  },
  {
    "text": "okay so this is dealing some with the the handshaking that goes in with gzip",
    "start": "1874220",
    "end": "1880350"
  },
  {
    "text": "in general you should be fine if you are wanting to respond with gzip basically",
    "start": "1880350",
    "end": "1886289"
  },
  {
    "text": "you should be able to generally just say I want to use gzip and then the services haha the client doesn't support that and",
    "start": "1886289",
    "end": "1893609"
  },
  {
    "text": "then just it'll send back uncompressed or and ap has make vary a little bit on",
    "start": "1893609",
    "end": "1898950"
  },
  {
    "text": "that per language but basically there should be no problem for the server to send back gzip whenever it wants to do gzip because the client informs the",
    "start": "1898950",
    "end": "1905850"
  },
  {
    "text": "server what it supports the much harder case is whenever the client wants to",
    "start": "1905850",
    "end": "1911369"
  },
  {
    "text": "send gzip because it doesn't know like it needs to know what the the the server",
    "start": "1911369",
    "end": "1917700"
  },
  {
    "text": "supports but the server there's not a handshake before you do the message and",
    "start": "1917700",
    "end": "1923129"
  },
  {
    "text": "so the main thing we did there is to make sure that service supported gzip before 1 oh so you've got that",
    "start": "1923129",
    "end": "1931259"
  },
  {
    "text": "going for you you know that you can make a client that goes against something this at least share pc/104 and things",
    "start": "1931259",
    "end": "1938220"
  },
  {
    "text": "should work but if there's let's say a new compression protocol or compression type you're still going to have that",
    "start": "1938220",
    "end": "1945269"
  },
  {
    "text": "problem I think that that part is unsolved I would liked I think that we",
    "start": "1945269",
    "end": "1950580"
  },
  {
    "text": "might be able to solve it some with a client config in order to notify the",
    "start": "1950580",
    "end": "1956340"
  },
  {
    "text": "client ahead of time but if you're just wanting to send back it were you wanting to respond with gzip",
    "start": "1956340",
    "end": "1963500"
  },
  {
    "text": "okay [Music]",
    "start": "1963500",
    "end": "1970179"
  },
  {
    "text": "okay so it sounds like you were maybe hitting a bug or an API gotcha",
    "start": "1981730",
    "end": "1987250"
  },
  {
    "text": "that Louie there should be a solution for that I'm not sure exactly which one you you had but we can maybe talk about",
    "start": "1987250",
    "end": "1992320"
  },
  {
    "text": "that and figure out which language here in to figure out if there was some demo stuff I think it may be possible for",
    "start": "1992320",
    "end": "1997990"
  },
  {
    "text": "some of the api's to let you choose a compression format that the client doesn't support because you know better",
    "start": "1997990",
    "end": "2004220"
  },
  {
    "text": "and maybe the client is hiding it from you but I'm not sure that that was",
    "start": "2004220",
    "end": "2009690"
  },
  {
    "text": "necessarily what you were using",
    "start": "2009690",
    "end": "2012799"
  },
  {
    "text": "how is the Hutus of the binary payload play into why using compression",
    "start": "2020690",
    "end": "2028640"
  },
  {
    "text": "so so the question is why would you use compression with ER PC so there's a",
    "start": "2032840",
    "end": "2038190"
  },
  {
    "text": "couple different reasons one you can compress just one message worth of content and so let's say that you're",
    "start": "2038190",
    "end": "2044640"
  },
  {
    "text": "transporting a bunch of bytes from a file well those bytes might be compressible and so you're like oh let's",
    "start": "2044640",
    "end": "2050340"
  },
  {
    "text": "compress them all so there's plenty of strings in Preda both messages apparently they only use so many bits",
    "start": "2050340",
    "end": "2056870"
  },
  {
    "text": "because they're ASCII and things like that and so you can also get some savings there",
    "start": "2056870",
    "end": "2061879"
  },
  {
    "text": "there is a further thing that we're working on although it's in various",
    "start": "2061880",
    "end": "2067379"
  },
  {
    "text": "forms and it may have stalled a little bit because of a push but we were working some on full stream",
    "start": "2067380",
    "end": "2074129"
  },
  {
    "text": "compression where you could actually send a stream and multiple messages would be able to be compressed with one",
    "start": "2074130",
    "end": "2080280"
  },
  {
    "text": "compression context the that's most similar I guess normally to if you have a repeated field and you've got very",
    "start": "2080280",
    "end": "2085860"
  },
  {
    "text": "similar data one message should in the next will be similar because lots of data happens to",
    "start": "2085860",
    "end": "2092429"
  },
  {
    "text": "be similar it's the same name over and over you've got a prefix as part of your ID name and so those go he stripped out",
    "start": "2092430",
    "end": "2098820"
  },
  {
    "text": "and the full stream and compression was was also assuming that fact also some",
    "start": "2098820",
    "end": "2105090"
  },
  {
    "text": "people will send like HTML back responses back sometimes or things like that and there's plenty of payloads that",
    "start": "2105090",
    "end": "2111480"
  },
  {
    "text": "compress I",
    "start": "2111480",
    "end": "2114180"
  },
  {
    "text": "don't remember the commute exact time this ends",
    "start": "2119279",
    "end": "2124170"
  },
  {
    "text": "okay so it's technically ended one minute ago yo are free",
    "start": "2127360",
    "end": "2134940"
  },
  {
    "text": "if you all have any more questions I'm gonna be around we all can catch me",
    "start": "2138210",
    "end": "2144630"
  }
]