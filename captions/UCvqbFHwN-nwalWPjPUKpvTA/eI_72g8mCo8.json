[
  {
    "text": "hello everybody thanks so much for",
    "start": "4920",
    "end": "6839"
  },
  {
    "text": "joining this session on nodeless key",
    "start": "6839",
    "end": "9660"
  },
  {
    "text": "native just in time all the way we're",
    "start": "9660",
    "end": "12000"
  },
  {
    "text": "all here for K native con so we don't",
    "start": "12000",
    "end": "14040"
  },
  {
    "text": "need to be sold on why we shouldn't have",
    "start": "14040",
    "end": "16440"
  },
  {
    "text": "always on applications it's about time",
    "start": "16440",
    "end": "18720"
  },
  {
    "text": "to move from always on apps to just in",
    "start": "18720",
    "end": "22020"
  },
  {
    "text": "time apps so treat apps as pets and not",
    "start": "22020",
    "end": "25619"
  },
  {
    "text": "as pets but as cattle and looking at the",
    "start": "25619",
    "end": "28920"
  },
  {
    "text": "infra backing serverless applications",
    "start": "28920",
    "end": "32119"
  },
  {
    "text": "kubernetes gives you a lot of",
    "start": "32120",
    "end": "34140"
  },
  {
    "text": "operational simplicity so it's awesome",
    "start": "34140",
    "end": "36239"
  },
  {
    "text": "to run your serverless applications on",
    "start": "36239",
    "end": "39660"
  },
  {
    "text": "kubernetes and again we are at K native",
    "start": "39660",
    "end": "41460"
  },
  {
    "text": "con so I don't have to sell you on that",
    "start": "41460",
    "end": "43219"
  },
  {
    "text": "but why stop at kubernetes why not take",
    "start": "43219",
    "end": "47700"
  },
  {
    "text": "the concept of just in time all the way",
    "start": "47700",
    "end": "49920"
  },
  {
    "text": "down to kubernetes infra itself that is",
    "start": "49920",
    "end": "53100"
  },
  {
    "text": "where Nautilus comes in nodeless",
    "start": "53100",
    "end": "54960"
  },
  {
    "text": "basically looks at compute as commodity",
    "start": "54960",
    "end": "57840"
  },
  {
    "text": "and not as pets so the idea of noodles",
    "start": "57840",
    "end": "60960"
  },
  {
    "text": "is to take your compute that's packing a",
    "start": "60960",
    "end": "64500"
  },
  {
    "text": "Cuban native's cluster or a fleet of",
    "start": "64500",
    "end": "67140"
  },
  {
    "text": "kubernetes clusters and convert it from",
    "start": "67140",
    "end": "70560"
  },
  {
    "text": "being hand managed and treated as pets",
    "start": "70560",
    "end": "72960"
  },
  {
    "text": "to commodity that comes up just in time",
    "start": "72960",
    "end": "75299"
  },
  {
    "text": "and goes away when it is no longer",
    "start": "75299",
    "end": "77760"
  },
  {
    "text": "needed and that's where nodeless comes",
    "start": "77760",
    "end": "81420"
  },
  {
    "text": "in so nodeless can work at in two phases",
    "start": "81420",
    "end": "84540"
  },
  {
    "text": "at the first phase if you think about a",
    "start": "84540",
    "end": "87240"
  },
  {
    "text": "single kubernetes cluster that's packing",
    "start": "87240",
    "end": "89400"
  },
  {
    "text": "your k-native functions you don't need",
    "start": "89400",
    "end": "92159"
  },
  {
    "text": "to have any compute nodes backing your",
    "start": "92159",
    "end": "94799"
  },
  {
    "text": "control plane at all the moment of",
    "start": "94799",
    "end": "97439"
  },
  {
    "text": "function starts up and its corresponding",
    "start": "97439",
    "end": "99840"
  },
  {
    "text": "pod is started just in time compute that",
    "start": "99840",
    "end": "103079"
  },
  {
    "text": "is bespoke and cost efficient for the",
    "start": "103079",
    "end": "105299"
  },
  {
    "text": "Pod is provision just in time it's a",
    "start": "105299",
    "end": "107880"
  },
  {
    "text": "regular cubelet worker node and it joins",
    "start": "107880",
    "end": "110280"
  },
  {
    "text": "the control plane your part is shipped",
    "start": "110280",
    "end": "112200"
  },
  {
    "text": "to the con to the just in time provision",
    "start": "112200",
    "end": "114360"
  },
  {
    "text": "compute node and once the Pod is",
    "start": "114360",
    "end": "116880"
  },
  {
    "text": "terminated the underlying compute",
    "start": "116880",
    "end": "118920"
  },
  {
    "text": "automatically goes away the nice thing",
    "start": "118920",
    "end": "121380"
  },
  {
    "text": "about nodeless for a single control",
    "start": "121380",
    "end": "124079"
  },
  {
    "text": "plane is that it will pull from the",
    "start": "124079",
    "end": "126780"
  },
  {
    "text": "latest and greatest Fleet of compute",
    "start": "126780",
    "end": "128700"
  },
  {
    "text": "that's available in your Cloud",
    "start": "128700",
    "end": "131099"
  },
  {
    "text": "environment whether it be armed device",
    "start": "131099",
    "end": "133620"
  },
  {
    "text": "shapes or on-demand spot fargate or any",
    "start": "133620",
    "end": "137459"
  },
  {
    "text": "kind of compute shape that's that is",
    "start": "137459",
    "end": "139319"
  },
  {
    "text": "available to your kubernetes cluster",
    "start": "139319",
    "end": "141780"
  },
  {
    "text": "account that will that will be used to",
    "start": "141780",
    "end": "144360"
  },
  {
    "text": "Source your just-in-time compute so",
    "start": "144360",
    "end": "147239"
  },
  {
    "text": "let's look at what are the options for",
    "start": "147239",
    "end": "150660"
  },
  {
    "text": "for using just-in-time compute for a",
    "start": "150660",
    "end": "153900"
  },
  {
    "text": "single kubernetes cluster there is the",
    "start": "153900",
    "end": "156420"
  },
  {
    "text": "default cluster order scalar which does",
    "start": "156420",
    "end": "158220"
  },
  {
    "text": "bin packing which is packing of your",
    "start": "158220",
    "end": "160260"
  },
  {
    "text": "parts into larger compute nodes but",
    "start": "160260",
    "end": "162840"
  },
  {
    "text": "there are also other options that do bin",
    "start": "162840",
    "end": "165120"
  },
  {
    "text": "selection which is basically provision a",
    "start": "165120",
    "end": "168239"
  },
  {
    "text": "single compute node per pod which suits",
    "start": "168239",
    "end": "171480"
  },
  {
    "text": "really well for k-native functions",
    "start": "171480",
    "end": "173400"
  },
  {
    "text": "because the form factor is pretty small",
    "start": "173400",
    "end": "176519"
  },
  {
    "text": "for these parts and there are",
    "start": "176519",
    "end": "179060"
  },
  {
    "text": "economical compute shapes like arm",
    "start": "179060",
    "end": "181319"
  },
  {
    "text": "shapes and smaller size on demand and",
    "start": "181319",
    "end": "183660"
  },
  {
    "text": "spot instances that are really good fit",
    "start": "183660",
    "end": "185879"
  },
  {
    "text": "from a resource footprint point of view",
    "start": "185879",
    "end": "188340"
  },
  {
    "text": "to fit your function Parts into the just",
    "start": "188340",
    "end": "191940"
  },
  {
    "text": "in time provisioned compute there is",
    "start": "191940",
    "end": "194879"
  },
  {
    "text": "Carpenter project from AWS there's",
    "start": "194879",
    "end": "196860"
  },
  {
    "text": "autopilot from gcp and there's also Luna",
    "start": "196860",
    "end": "199920"
  },
  {
    "text": "which is a cloud vendor agnostic and",
    "start": "199920",
    "end": "202680"
  },
  {
    "text": "control plane agnostic project so let's",
    "start": "202680",
    "end": "205680"
  },
  {
    "text": "look at how just in time compute would",
    "start": "205680",
    "end": "210120"
  },
  {
    "text": "look for a single kubernetes cluster",
    "start": "210120",
    "end": "214640"
  },
  {
    "text": "I hope the font size is large enough if",
    "start": "215580",
    "end": "218519"
  },
  {
    "text": "it is too small in the back rows can you",
    "start": "218519",
    "end": "220560"
  },
  {
    "text": "please let me know it's okay",
    "start": "220560",
    "end": "223140"
  },
  {
    "text": "cool",
    "start": "223140",
    "end": "224519"
  },
  {
    "text": "so out here I have a single kubernetes",
    "start": "224519",
    "end": "227700"
  },
  {
    "text": "cluster that is running on AWS on eks",
    "start": "227700",
    "end": "231599"
  },
  {
    "text": "and it has uh two k native Services",
    "start": "231599",
    "end": "234720"
  },
  {
    "text": "running hello and hello K nativecon and",
    "start": "234720",
    "end": "238319"
  },
  {
    "text": "I'm looking at the pods in the",
    "start": "238319",
    "end": "240659"
  },
  {
    "text": "environment and also the nodes in the",
    "start": "240659",
    "end": "242940"
  },
  {
    "text": "environment so this kubernetes cluster",
    "start": "242940",
    "end": "245580"
  },
  {
    "text": "is running Luna which is one of the",
    "start": "245580",
    "end": "247799"
  },
  {
    "text": "nodeless options for for any public",
    "start": "247799",
    "end": "251099"
  },
  {
    "text": "Cloud control plane and there are two",
    "start": "251099",
    "end": "253739"
  },
  {
    "text": "compute nodes that are currently running",
    "start": "253739",
    "end": "255659"
  },
  {
    "text": "and these are running system resources",
    "start": "255659",
    "end": "257760"
  },
  {
    "text": "systems system pods Etc now if I go",
    "start": "257760",
    "end": "261959"
  },
  {
    "text": "ahead and curl the tentative con",
    "start": "261959",
    "end": "266100"
  },
  {
    "text": "endpoint",
    "start": "266100",
    "end": "267660"
  },
  {
    "text": "what we want to see is we want to see",
    "start": "267660",
    "end": "270360"
  },
  {
    "text": "just in time pod come up and it is in",
    "start": "270360",
    "end": "273060"
  },
  {
    "text": "pending State it's that's because the",
    "start": "273060",
    "end": "276000"
  },
  {
    "text": "nodeless component looks at the parts",
    "start": "276000",
    "end": "278340"
  },
  {
    "text": "resource footprint and it Provisions",
    "start": "278340",
    "end": "280560"
  },
  {
    "text": "just in time compute that is right sized",
    "start": "280560",
    "end": "283199"
  },
  {
    "text": "and also the most cost effective for the",
    "start": "283199",
    "end": "285780"
  },
  {
    "text": "Pod so for the first connection this",
    "start": "285780",
    "end": "288600"
  },
  {
    "text": "would take a while because uh in my",
    "start": "288600",
    "end": "290820"
  },
  {
    "text": "current configuration I don't have",
    "start": "290820",
    "end": "292440"
  },
  {
    "text": "pre-warm nodes but there is also a",
    "start": "292440",
    "end": "294780"
  },
  {
    "text": "config option knob that you can turn",
    "start": "294780",
    "end": "296699"
  },
  {
    "text": "that will have pre-warm nodes so that",
    "start": "296699",
    "end": "298500"
  },
  {
    "text": "you don't pay this cold start overhead",
    "start": "298500",
    "end": "301580"
  },
  {
    "text": "once the once the compute node is",
    "start": "301580",
    "end": "304320"
  },
  {
    "text": "provisioned it should be available as",
    "start": "304320",
    "end": "307259"
  },
  {
    "text": "ready",
    "start": "307259",
    "end": "308639"
  },
  {
    "text": "in the bottom window and once the node",
    "start": "308639",
    "end": "311520"
  },
  {
    "text": "is available the Pod would be scheduled",
    "start": "311520",
    "end": "314220"
  },
  {
    "text": "to the gesturing time provision node and",
    "start": "314220",
    "end": "317040"
  },
  {
    "text": "your your app should get a response so",
    "start": "317040",
    "end": "319979"
  },
  {
    "text": "for the first call we might see a",
    "start": "319979",
    "end": "321840"
  },
  {
    "text": "timeout but from the second call onwards",
    "start": "321840",
    "end": "323820"
  },
  {
    "text": "and for auto scaling it should respond",
    "start": "323820",
    "end": "326280"
  },
  {
    "text": "as soon as possible so the kind of",
    "start": "326280",
    "end": "329820"
  },
  {
    "text": "worker node that is provisioned just in",
    "start": "329820",
    "end": "331800"
  },
  {
    "text": "time is a regular cubelet worker it is",
    "start": "331800",
    "end": "334139"
  },
  {
    "text": "nothing special it has the regular",
    "start": "334139",
    "end": "335759"
  },
  {
    "text": "cubelet worker stack running on it and",
    "start": "335759",
    "end": "338460"
  },
  {
    "text": "it's it pops up it's the most cost",
    "start": "338460",
    "end": "340500"
  },
  {
    "text": "effective compute node for the resource",
    "start": "340500",
    "end": "343320"
  },
  {
    "text": "footprint for your application for",
    "start": "343320",
    "end": "345479"
  },
  {
    "text": "example if you need one vcp one gig of",
    "start": "345479",
    "end": "347880"
  },
  {
    "text": "RAM",
    "start": "347880",
    "end": "348740"
  },
  {
    "text": "resources for your application pod the",
    "start": "348740",
    "end": "352620"
  },
  {
    "text": "compute node that's provisioned will",
    "start": "352620",
    "end": "354539"
  },
  {
    "text": "will be one vcpu one gig of RAM and it",
    "start": "354539",
    "end": "357060"
  },
  {
    "text": "can be an on-demand instance it could be",
    "start": "357060",
    "end": "359639"
  },
  {
    "text": "a spot instance it could be a far gate",
    "start": "359639",
    "end": "361740"
  },
  {
    "text": "launch type whatever launch types are",
    "start": "361740",
    "end": "363539"
  },
  {
    "text": "available for your cloud account for",
    "start": "363539",
    "end": "366120"
  },
  {
    "text": "that cluster they will be used for",
    "start": "366120",
    "end": "368900"
  },
  {
    "text": "sourcing the right size compute and once",
    "start": "368900",
    "end": "372120"
  },
  {
    "text": "the computer is available and ready the",
    "start": "372120",
    "end": "374280"
  },
  {
    "text": "Pod will transition into pod creating a",
    "start": "374280",
    "end": "377400"
  },
  {
    "text": "container creating State there you go",
    "start": "377400",
    "end": "380940"
  },
  {
    "text": "so The Horde has transitioned into",
    "start": "380940",
    "end": "383580"
  },
  {
    "text": "container creating State and once the",
    "start": "383580",
    "end": "385860"
  },
  {
    "text": "container is up and running we should",
    "start": "385860",
    "end": "387539"
  },
  {
    "text": "see the response so let me actually",
    "start": "387539",
    "end": "390539"
  },
  {
    "text": "create another curl my second endpoint",
    "start": "390539",
    "end": "394680"
  },
  {
    "text": "which is hello and we should see the",
    "start": "394680",
    "end": "397620"
  },
  {
    "text": "same workflow get repeated so the second",
    "start": "397620",
    "end": "399900"
  },
  {
    "text": "part is in pending State the first one",
    "start": "399900",
    "end": "403139"
  },
  {
    "text": "is in running State and we should see a",
    "start": "403139",
    "end": "405720"
  },
  {
    "text": "fourth compute node pop up just in time",
    "start": "405720",
    "end": "408120"
  },
  {
    "text": "there are also knobs that you can",
    "start": "408120",
    "end": "410039"
  },
  {
    "text": "configure where compute nodes after the",
    "start": "410039",
    "end": "412919"
  },
  {
    "text": "port terminates the compute node is",
    "start": "412919",
    "end": "415020"
  },
  {
    "text": "still alive for a little while so you",
    "start": "415020",
    "end": "417360"
  },
  {
    "text": "have a pre-warm node if the traffic is",
    "start": "417360",
    "end": "419580"
  },
  {
    "text": "spiking so there are there's a lot of",
    "start": "419580",
    "end": "421319"
  },
  {
    "text": "throttling that can be done on the",
    "start": "421319",
    "end": "422759"
  },
  {
    "text": "compute node side so you're not paying",
    "start": "422759",
    "end": "424560"
  },
  {
    "text": "for cold start times I'm going to pause",
    "start": "424560",
    "end": "427919"
  },
  {
    "text": "here to see if this makes sense because",
    "start": "427919",
    "end": "429840"
  },
  {
    "text": "we want to clarify that nodeless makes",
    "start": "429840",
    "end": "432780"
  },
  {
    "text": "sense for a single cluster before moving",
    "start": "432780",
    "end": "434819"
  },
  {
    "text": "to the multi-cluster scenario are there",
    "start": "434819",
    "end": "437400"
  },
  {
    "text": "any questions",
    "start": "437400",
    "end": "438720"
  },
  {
    "text": "nope",
    "start": "438720",
    "end": "441319"
  },
  {
    "text": "hey yep",
    "start": "443460",
    "end": "446840"
  },
  {
    "text": "deployment",
    "start": "450180",
    "end": "452720"
  },
  {
    "text": "so with this I guess with your",
    "start": "459900",
    "end": "461639"
  },
  {
    "text": "deployment is this assuming that you",
    "start": "461639",
    "end": "463680"
  },
  {
    "text": "always have defined requests and limit",
    "start": "463680",
    "end": "465599"
  },
  {
    "text": "Types on each deployment that's a really",
    "start": "465599",
    "end": "468060"
  },
  {
    "text": "good question so by default it works off",
    "start": "468060",
    "end": "471060"
  },
  {
    "text": "of the requests and limits but if",
    "start": "471060",
    "end": "473160"
  },
  {
    "text": "requests and limits are not set vertical",
    "start": "473160",
    "end": "475199"
  },
  {
    "text": "part autoscaler will right size the",
    "start": "475199",
    "end": "477780"
  },
  {
    "text": "requests and limits so if the part for",
    "start": "477780",
    "end": "479940"
  },
  {
    "text": "example if you did not specify a pod",
    "start": "479940",
    "end": "482520"
  },
  {
    "text": "requests and limits you nodeless will by",
    "start": "482520",
    "end": "486419"
  },
  {
    "text": "default pick the smallest instance type",
    "start": "486419",
    "end": "488400"
  },
  {
    "text": "and vertical part Auto scaler will",
    "start": "488400",
    "end": "490740"
  },
  {
    "text": "notice that it is using more CPU or more",
    "start": "490740",
    "end": "493620"
  },
  {
    "text": "RAM than what what is available and it",
    "start": "493620",
    "end": "496380"
  },
  {
    "text": "will adjust the requests and limits for",
    "start": "496380",
    "end": "498360"
  },
  {
    "text": "the Pod accordingly so that the next",
    "start": "498360",
    "end": "500340"
  },
  {
    "text": "iteration onwards it is going to get",
    "start": "500340",
    "end": "502800"
  },
  {
    "text": "larger compute shapes and not uh default",
    "start": "502800",
    "end": "506039"
  },
  {
    "text": "super small compute shapes does that",
    "start": "506039",
    "end": "508199"
  },
  {
    "text": "make sense yep and what is a store that",
    "start": "508199",
    "end": "510120"
  },
  {
    "text": "like inventory like when it takes that",
    "start": "510120",
    "end": "511919"
  },
  {
    "text": "snapshot and then recalibrates it",
    "start": "511919",
    "end": "514260"
  },
  {
    "text": "essentially where does it put that like",
    "start": "514260",
    "end": "516539"
  },
  {
    "text": "how does it know for the next",
    "start": "516539",
    "end": "517919"
  },
  {
    "text": "instantiation that it must have more",
    "start": "517919",
    "end": "519659"
  },
  {
    "text": "compute yeah yeah so that is vertical",
    "start": "519659",
    "end": "522000"
  },
  {
    "text": "part Auto scalar that is",
    "start": "522000",
    "end": "525560"
  },
  {
    "text": "part of the scale is is a kubernetes",
    "start": "527940",
    "end": "529740"
  },
  {
    "text": "project so it comes in three modes the",
    "start": "529740",
    "end": "532860"
  },
  {
    "text": "first mode is do not change the resource",
    "start": "532860",
    "end": "535740"
  },
  {
    "text": "spec for the Pod the second is forcibly",
    "start": "535740",
    "end": "538860"
  },
  {
    "text": "terminate the Pod and restart it with",
    "start": "538860",
    "end": "540959"
  },
  {
    "text": "the new updated resource recommendations",
    "start": "540959",
    "end": "543000"
  },
  {
    "text": "and the third one is only apply the",
    "start": "543000",
    "end": "546540"
  },
  {
    "text": "updated resource recommendations when",
    "start": "546540",
    "end": "549120"
  },
  {
    "text": "the operator restarts the Pod so um",
    "start": "549120",
    "end": "552720"
  },
  {
    "text": "based on how aggressive you want to be",
    "start": "552720",
    "end": "555360"
  },
  {
    "text": "with with adjusting your resource",
    "start": "555360",
    "end": "557459"
  },
  {
    "text": "recommendations you can pick one of the",
    "start": "557459",
    "end": "559680"
  },
  {
    "text": "three the most popularly used option is",
    "start": "559680",
    "end": "562760"
  },
  {
    "text": "restart when the next Don't force",
    "start": "562760",
    "end": "565380"
  },
  {
    "text": "restart but apply it when the next time",
    "start": "565380",
    "end": "567779"
  },
  {
    "text": "the Pod is started by the operator",
    "start": "567779",
    "end": "570660"
  },
  {
    "text": "does that make sense yeah",
    "start": "570660",
    "end": "573200"
  },
  {
    "text": "are there any other questions on single",
    "start": "573200",
    "end": "577620"
  },
  {
    "text": "sorry",
    "start": "577620",
    "end": "580100"
  },
  {
    "text": "uh hold on one second can we get that",
    "start": "585420",
    "end": "587760"
  },
  {
    "text": "off recording",
    "start": "587760",
    "end": "590480"
  },
  {
    "text": "so just to clarify Iranian full",
    "start": "591680",
    "end": "594480"
  },
  {
    "text": "kubernetes not for this function",
    "start": "594480",
    "end": "597540"
  },
  {
    "text": "what's that are you running like full uh",
    "start": "597540",
    "end": "600660"
  },
  {
    "text": "full kubernetes node for this function",
    "start": "600660",
    "end": "602640"
  },
  {
    "text": "yes yeah but are you worried about",
    "start": "602640",
    "end": "604740"
  },
  {
    "text": "overhead like Tech resources Docker Tech",
    "start": "604740",
    "end": "607380"
  },
  {
    "text": "resources yeah yeah that's a really good",
    "start": "607380",
    "end": "609360"
  },
  {
    "text": "question so",
    "start": "609360",
    "end": "610860"
  },
  {
    "text": "um nodeless actually does a cost",
    "start": "610860",
    "end": "614160"
  },
  {
    "text": "whether it makes sense to have one",
    "start": "614160",
    "end": "616740"
  },
  {
    "text": "compute node per function or stuff",
    "start": "616740",
    "end": "619140"
  },
  {
    "text": "multiple functions into a single compute",
    "start": "619140",
    "end": "621360"
  },
  {
    "text": "node so it is it does make the cost",
    "start": "621360",
    "end": "623880"
  },
  {
    "text": "benefit analysis of should we staff",
    "start": "623880",
    "end": "626220"
  },
  {
    "text": "multiple functions into a single worker",
    "start": "626220",
    "end": "628320"
  },
  {
    "text": "node or does it make sense to have one",
    "start": "628320",
    "end": "631019"
  },
  {
    "text": "function in a single in in one one",
    "start": "631019",
    "end": "633180"
  },
  {
    "text": "worker note say it makes that call based",
    "start": "633180",
    "end": "635640"
  },
  {
    "text": "on the resource footprint as well as the",
    "start": "635640",
    "end": "638459"
  },
  {
    "text": "behavior patterns of how the pods were",
    "start": "638459",
    "end": "640740"
  },
  {
    "text": "started and at what rate are they coming",
    "start": "640740",
    "end": "642899"
  },
  {
    "text": "in",
    "start": "642899",
    "end": "644399"
  },
  {
    "text": "so it doesn't always do one compute node",
    "start": "644399",
    "end": "647579"
  },
  {
    "text": "per pod it does it when it makes sense",
    "start": "647579",
    "end": "650339"
  },
  {
    "text": "from an economics point of view as well",
    "start": "650339",
    "end": "652500"
  },
  {
    "text": "as the rate at which the parts are being",
    "start": "652500",
    "end": "655620"
  },
  {
    "text": "provisioned and terminated point of view",
    "start": "655620",
    "end": "658620"
  },
  {
    "text": "does it answer your question yeah yeah",
    "start": "658620",
    "end": "660959"
  },
  {
    "text": "so it's not it obviously doesn't make",
    "start": "660959",
    "end": "663240"
  },
  {
    "text": "sense to have one compute node per pod",
    "start": "663240",
    "end": "665339"
  },
  {
    "text": "if the resource footprint is super super",
    "start": "665339",
    "end": "667560"
  },
  {
    "text": "small",
    "start": "667560",
    "end": "670160"
  },
  {
    "text": "um any other questions",
    "start": "671880",
    "end": "674760"
  },
  {
    "text": "on the single node",
    "start": "674760",
    "end": "676680"
  },
  {
    "text": "so we would eventually see the two nodes",
    "start": "676680",
    "end": "679680"
  },
  {
    "text": "that were provisioned for the functions",
    "start": "679680",
    "end": "682560"
  },
  {
    "text": "this one the 40.74 and",
    "start": "682560",
    "end": "686839"
  },
  {
    "text": "71.251 they should eventually go away",
    "start": "686839",
    "end": "689760"
  },
  {
    "text": "when we don't have any more traffic",
    "start": "689760",
    "end": "691680"
  },
  {
    "text": "coming in so we'll revisit this window",
    "start": "691680",
    "end": "694019"
  },
  {
    "text": "after a while",
    "start": "694019",
    "end": "696680"
  },
  {
    "text": "so taking it one step further do we",
    "start": "700500",
    "end": "702959"
  },
  {
    "text": "really even need control planes that are",
    "start": "702959",
    "end": "705540"
  },
  {
    "text": "sitting always on if you have if you",
    "start": "705540",
    "end": "709019"
  },
  {
    "text": "want to serve your functions on",
    "start": "709019",
    "end": "711300"
  },
  {
    "text": "back backed by hundreds of kubernetes",
    "start": "711300",
    "end": "714120"
  },
  {
    "text": "clusters should we have these control",
    "start": "714120",
    "end": "716640"
  },
  {
    "text": "planes that are always on and why can't",
    "start": "716640",
    "end": "718860"
  },
  {
    "text": "we take it one step further and have",
    "start": "718860",
    "end": "720660"
  },
  {
    "text": "just-in-time control planes that are",
    "start": "720660",
    "end": "722880"
  },
  {
    "text": "popping up if there is a workload that",
    "start": "722880",
    "end": "725459"
  },
  {
    "text": "is scheduled to that control plane and",
    "start": "725459",
    "end": "727500"
  },
  {
    "text": "if no workloads are running on the",
    "start": "727500",
    "end": "729660"
  },
  {
    "text": "control plane why should we even",
    "start": "729660",
    "end": "731279"
  },
  {
    "text": "maintain a control plane and why should",
    "start": "731279",
    "end": "733140"
  },
  {
    "text": "it be on so a nodeless when applied to a",
    "start": "733140",
    "end": "737760"
  },
  {
    "text": "multi-cluster environment it Provisions",
    "start": "737760",
    "end": "740940"
  },
  {
    "text": "just-in-time clusters the control planes",
    "start": "740940",
    "end": "743820"
  },
  {
    "text": "are provision in the right cloud",
    "start": "743820",
    "end": "745200"
  },
  {
    "text": "provider in the right region if a",
    "start": "745200",
    "end": "747660"
  },
  {
    "text": "workload is scheduled through that",
    "start": "747660",
    "end": "749399"
  },
  {
    "text": "control plane let's say your workload",
    "start": "749399",
    "end": "751440"
  },
  {
    "text": "needs ARM device shape X or GPU shape Y",
    "start": "751440",
    "end": "755700"
  },
  {
    "text": "and those shapes are only available in",
    "start": "755700",
    "end": "758519"
  },
  {
    "text": "region a in AWS and region B in gcp the",
    "start": "758519",
    "end": "763260"
  },
  {
    "text": "multi-cluster scheduler for just-in-time",
    "start": "763260",
    "end": "765720"
  },
  {
    "text": "clusters would be smart enough to figure",
    "start": "765720",
    "end": "767639"
  },
  {
    "text": "out hey this this function needs these",
    "start": "767639",
    "end": "770279"
  },
  {
    "text": "resource shapes and these around",
    "start": "770279",
    "end": "771240"
  },
  {
    "text": "available in these Cloud providers in",
    "start": "771240",
    "end": "773519"
  },
  {
    "text": "these regions so I'm going to spin up",
    "start": "773519",
    "end": "775440"
  },
  {
    "text": "just in time control planes in those",
    "start": "775440",
    "end": "777180"
  },
  {
    "text": "regions and schedule my function part to",
    "start": "777180",
    "end": "780540"
  },
  {
    "text": "that particular control plane and once",
    "start": "780540",
    "end": "783600"
  },
  {
    "text": "no workloads are running in the control",
    "start": "783600",
    "end": "785220"
  },
  {
    "text": "planes the control planes themselves",
    "start": "785220",
    "end": "786899"
  },
  {
    "text": "enter standby mode so they won't be",
    "start": "786899",
    "end": "789240"
  },
  {
    "text": "always on so you're not incurring the",
    "start": "789240",
    "end": "791459"
  },
  {
    "text": "overhead of maintaining control planes",
    "start": "791459",
    "end": "794160"
  },
  {
    "text": "and maintaining and figuring out hey",
    "start": "794160",
    "end": "795959"
  },
  {
    "text": "which version what what are the security",
    "start": "795959",
    "end": "798899"
  },
  {
    "text": "patches that are applied to all the",
    "start": "798899",
    "end": "800639"
  },
  {
    "text": "compute nodes in this control plane Etc",
    "start": "800639",
    "end": "802560"
  },
  {
    "text": "so let's go ahead and see how this would",
    "start": "802560",
    "end": "806579"
  },
  {
    "text": "work",
    "start": "806579",
    "end": "808800"
  },
  {
    "text": "the environment is slightly different",
    "start": "808800",
    "end": "811139"
  },
  {
    "text": "from the um",
    "start": "811139",
    "end": "815000"
  },
  {
    "text": "from the cluster environment from the",
    "start": "816000",
    "end": "818519"
  },
  {
    "text": "AWS environment so here I have",
    "start": "818519",
    "end": "821820"
  },
  {
    "text": "let me bring it up to the top",
    "start": "821820",
    "end": "825120"
  },
  {
    "text": "so here I have",
    "start": "825120",
    "end": "827339"
  },
  {
    "text": "um",
    "start": "827339",
    "end": "827880"
  },
  {
    "text": "a Federation of two clusters and these",
    "start": "827880",
    "end": "830639"
  },
  {
    "text": "are both kind clusters running on my",
    "start": "830639",
    "end": "833220"
  },
  {
    "text": "laptop and you see that they both they",
    "start": "833220",
    "end": "836279"
  },
  {
    "text": "both have ready set to fall so the",
    "start": "836279",
    "end": "838680"
  },
  {
    "text": "control planes are not ready they're",
    "start": "838680",
    "end": "840180"
  },
  {
    "text": "simply in standby mode idle set to True",
    "start": "840180",
    "end": "843839"
  },
  {
    "text": "which means that there are zero",
    "start": "843839",
    "end": "845279"
  },
  {
    "text": "workloads running on the control planes",
    "start": "845279",
    "end": "847079"
  },
  {
    "text": "and they are on standby which means that",
    "start": "847079",
    "end": "849959"
  },
  {
    "text": "if a workload happens to be scheduled to",
    "start": "849959",
    "end": "852240"
  },
  {
    "text": "this control plane it will come back up",
    "start": "852240",
    "end": "854040"
  },
  {
    "text": "alive so we also want to make sure that",
    "start": "854040",
    "end": "857760"
  },
  {
    "text": "there are no workloads running",
    "start": "857760",
    "end": "860060"
  },
  {
    "text": "on on this Federation of clusters so we",
    "start": "860060",
    "end": "863339"
  },
  {
    "text": "see that there are no parts running",
    "start": "863339",
    "end": "865680"
  },
  {
    "text": "um let's go ahead and and create an",
    "start": "865680",
    "end": "868740"
  },
  {
    "text": "application that's scheduled to",
    "start": "868740",
    "end": "872420"
  },
  {
    "text": "let me create",
    "start": "872639",
    "end": "874279"
  },
  {
    "text": "nginx that is scheduled to this",
    "start": "874279",
    "end": "876600"
  },
  {
    "text": "Federated kubernetes cluster",
    "start": "876600",
    "end": "880519"
  },
  {
    "text": "and what we want to see is that the one",
    "start": "885240",
    "end": "889860"
  },
  {
    "text": "of the Clusters should get out of",
    "start": "889860",
    "end": "892199"
  },
  {
    "text": "standby mode let me see where the pots",
    "start": "892199",
    "end": "895440"
  },
  {
    "text": "are running",
    "start": "895440",
    "end": "897740"
  },
  {
    "text": "okay so the part got for nginx",
    "start": "902579",
    "end": "905639"
  },
  {
    "text": "deployment the Pod got scheduled to the",
    "start": "905639",
    "end": "908699"
  },
  {
    "text": "first cluster",
    "start": "908699",
    "end": "911339"
  },
  {
    "text": "so it got scheduled to the first cluster",
    "start": "911339",
    "end": "913620"
  },
  {
    "text": "so if we look at the",
    "start": "913620",
    "end": "917220"
  },
  {
    "text": "get clusters again we see that the first",
    "start": "917220",
    "end": "920279"
  },
  {
    "text": "cluster",
    "start": "920279",
    "end": "921480"
  },
  {
    "text": "is now ready it's it's gotten out of",
    "start": "921480",
    "end": "924480"
  },
  {
    "text": "standby mode and it is now ready and it",
    "start": "924480",
    "end": "927660"
  },
  {
    "text": "is running the nginx deployment pods so",
    "start": "927660",
    "end": "930720"
  },
  {
    "text": "if we delete the nginx deployment we",
    "start": "930720",
    "end": "933300"
  },
  {
    "text": "should see that after a while the first",
    "start": "933300",
    "end": "935940"
  },
  {
    "text": "cluster should enter standby mode so if",
    "start": "935940",
    "end": "939120"
  },
  {
    "text": "we delete the nginx deployment we make",
    "start": "939120",
    "end": "941820"
  },
  {
    "text": "sure that the pods are terminated",
    "start": "941820",
    "end": "945000"
  },
  {
    "text": "what we want to see is let's watch",
    "start": "945000",
    "end": "950480"
  },
  {
    "text": "so after a while we'll see that the",
    "start": "953699",
    "end": "956339"
  },
  {
    "text": "cluster one because it's not running any",
    "start": "956339",
    "end": "958560"
  },
  {
    "text": "pods it should transition to a standby",
    "start": "958560",
    "end": "961560"
  },
  {
    "text": "set to true so we'll have just in time",
    "start": "961560",
    "end": "963899"
  },
  {
    "text": "control planes that will come up and",
    "start": "963899",
    "end": "965519"
  },
  {
    "text": "disappear based on the function life",
    "start": "965519",
    "end": "968339"
  },
  {
    "text": "cycle and if the function happens to be",
    "start": "968339",
    "end": "970560"
  },
  {
    "text": "scheduled to this control plane that has",
    "start": "970560",
    "end": "973440"
  },
  {
    "text": "the resources that are needed to run the",
    "start": "973440",
    "end": "975660"
  },
  {
    "text": "workload I'm going to pause here to see",
    "start": "975660",
    "end": "978180"
  },
  {
    "text": "if it makes sense and if there are any",
    "start": "978180",
    "end": "979560"
  },
  {
    "text": "questions",
    "start": "979560",
    "end": "981860"
  },
  {
    "text": "cool",
    "start": "991320",
    "end": "993060"
  },
  {
    "text": "so let's go back to takeaways we'll",
    "start": "993060",
    "end": "996839"
  },
  {
    "text": "revisit the slide in a bit",
    "start": "996839",
    "end": "1000339"
  },
  {
    "text": "always on apps if possible they it's",
    "start": "1002660",
    "end": "1007100"
  },
  {
    "text": "easier and simpler and more cost",
    "start": "1007100",
    "end": "1009440"
  },
  {
    "text": "effective to move towards event-driven",
    "start": "1009440",
    "end": "1012199"
  },
  {
    "text": "functions and that's why we are here and",
    "start": "1012199",
    "end": "1015019"
  },
  {
    "text": "backing your serverless functions by",
    "start": "1015019",
    "end": "1017000"
  },
  {
    "text": "kubernetes simplifies your operations",
    "start": "1017000",
    "end": "1018860"
  },
  {
    "text": "quite a bit and why stop with Justin's",
    "start": "1018860",
    "end": "1021680"
  },
  {
    "text": "time stack there why not",
    "start": "1021680",
    "end": "1024140"
  },
  {
    "text": "why not convert your kubernetes cluster",
    "start": "1024140",
    "end": "1027558"
  },
  {
    "text": "each kubernetes cluster into a nodeless",
    "start": "1027559",
    "end": "1029660"
  },
  {
    "text": "mode so you get just in time compute for",
    "start": "1029660",
    "end": "1031760"
  },
  {
    "text": "your adjustment time function and taking",
    "start": "1031760",
    "end": "1033980"
  },
  {
    "text": "it one step further having just-in-time",
    "start": "1033980",
    "end": "1036740"
  },
  {
    "text": "clusters themselves is actually making",
    "start": "1036740",
    "end": "1040160"
  },
  {
    "text": "sure that you have a just in time stack",
    "start": "1040160",
    "end": "1042380"
  },
  {
    "text": "end to end from your function all the",
    "start": "1042380",
    "end": "1044720"
  },
  {
    "text": "way to your infra so if you have zero",
    "start": "1044720",
    "end": "1047178"
  },
  {
    "text": "Parts running Zero apps running zero",
    "start": "1047179",
    "end": "1049160"
  },
  {
    "text": "functions running your resource",
    "start": "1049160",
    "end": "1051500"
  },
  {
    "text": "footprint and your infra footprint is",
    "start": "1051500",
    "end": "1053360"
  },
  {
    "text": "zero you're not maintaining Fleet of",
    "start": "1053360",
    "end": "1055700"
  },
  {
    "text": "clusters or compute nodes that are",
    "start": "1055700",
    "end": "1057919"
  },
  {
    "text": "always on waiting to run your resources",
    "start": "1057919",
    "end": "1060340"
  },
  {
    "text": "does it make sense",
    "start": "1060340",
    "end": "1062539"
  },
  {
    "text": "yep so let's go back and revisit the two",
    "start": "1062539",
    "end": "1068120"
  },
  {
    "text": "demo um",
    "start": "1068120",
    "end": "1071299"
  },
  {
    "text": "so we see that it entered standby the",
    "start": "1071299",
    "end": "1074960"
  },
  {
    "text": "first cluster entered standby so it",
    "start": "1074960",
    "end": "1077179"
  },
  {
    "text": "takes two minutes for each estate",
    "start": "1077179",
    "end": "1079220"
  },
  {
    "text": "transition so two minutes after it gets",
    "start": "1079220",
    "end": "1081440"
  },
  {
    "text": "idle it enter standby and after that",
    "start": "1081440",
    "end": "1084860"
  },
  {
    "text": "ready should get to be false pretty soon",
    "start": "1084860",
    "end": "1087200"
  },
  {
    "text": "and let's go back and look at the nodes",
    "start": "1087200",
    "end": "1090320"
  },
  {
    "text": "on the single cluster and we see that",
    "start": "1090320",
    "end": "1093080"
  },
  {
    "text": "the two nodes that were provisioned for",
    "start": "1093080",
    "end": "1096020"
  },
  {
    "text": "adjustment time function Parts have been",
    "start": "1096020",
    "end": "1097940"
  },
  {
    "text": "terminated so we are back to our stable",
    "start": "1097940",
    "end": "1099980"
  },
  {
    "text": "state of two worker nodes in your",
    "start": "1099980",
    "end": "1101840"
  },
  {
    "text": "kubernetes cluster",
    "start": "1101840",
    "end": "1103880"
  },
  {
    "text": "um let's watch until this thing",
    "start": "1103880",
    "end": "1106220"
  },
  {
    "text": "transitions to false while I take on any",
    "start": "1106220",
    "end": "1108679"
  },
  {
    "text": "more questions",
    "start": "1108679",
    "end": "1111159"
  },
  {
    "text": "I'll update the slide deck on sked and I",
    "start": "1113000",
    "end": "1116419"
  },
  {
    "text": "have a recorded version of both the demo",
    "start": "1116419",
    "end": "1118940"
  },
  {
    "text": "videos as well so I'll make sure that",
    "start": "1118940",
    "end": "1120620"
  },
  {
    "text": "I'll update it to scale as well so you",
    "start": "1120620",
    "end": "1122299"
  },
  {
    "text": "have a copy of it",
    "start": "1122299",
    "end": "1124340"
  },
  {
    "text": "yeah I guess I have a question so I",
    "start": "1124340",
    "end": "1128600"
  },
  {
    "text": "don't have to run the mic to myself",
    "start": "1128600",
    "end": "1130880"
  },
  {
    "text": "um",
    "start": "1130880",
    "end": "1132080"
  },
  {
    "text": "so in this example you're showing two",
    "start": "1132080",
    "end": "1134780"
  },
  {
    "text": "different clusters and you used Cube",
    "start": "1134780",
    "end": "1137000"
  },
  {
    "text": "control create",
    "start": "1137000",
    "end": "1138460"
  },
  {
    "text": "to create a deployment that was going to",
    "start": "1138460",
    "end": "1141200"
  },
  {
    "text": "end up in one cluster",
    "start": "1141200",
    "end": "1143179"
  },
  {
    "text": "um how does this work with k-native",
    "start": "1143179",
    "end": "1145900"
  },
  {
    "text": "where the deployment will exist but it",
    "start": "1145900",
    "end": "1148880"
  },
  {
    "text": "will be at zero replicas and there is",
    "start": "1148880",
    "end": "1151220"
  },
  {
    "text": "some sort of Ingress where does that",
    "start": "1151220",
    "end": "1152720"
  },
  {
    "text": "Ingress run e",
    "start": "1152720",
    "end": "1155419"
  },
  {
    "text": "this one for the multi-cluster demo I",
    "start": "1155419",
    "end": "1158179"
  },
  {
    "text": "did not use the K native stack I just",
    "start": "1158179",
    "end": "1160100"
  },
  {
    "text": "wanted to illustrate how the scheduling",
    "start": "1160100",
    "end": "1162260"
  },
  {
    "text": "works and all that so for for the",
    "start": "1162260",
    "end": "1164780"
  },
  {
    "text": "multi-cluster thing we would have",
    "start": "1164780",
    "end": "1166400"
  },
  {
    "text": "Federated K native stack running the",
    "start": "1166400",
    "end": "1169220"
  },
  {
    "text": "deployment the way multi-cluster",
    "start": "1169220",
    "end": "1171020"
  },
  {
    "text": "scheduling works is the main scheduler",
    "start": "1171020",
    "end": "1173539"
  },
  {
    "text": "which is called Nova it is simply an API",
    "start": "1173539",
    "end": "1176120"
  },
  {
    "text": "server so your K native stack will be",
    "start": "1176120",
    "end": "1178160"
  },
  {
    "text": "running there and it takes care of",
    "start": "1178160",
    "end": "1181580"
  },
  {
    "text": "scheduling and federating your",
    "start": "1181580",
    "end": "1183320"
  },
  {
    "text": "deployments so the moment your",
    "start": "1183320",
    "end": "1184640"
  },
  {
    "text": "deployment object is created and you're",
    "start": "1184640",
    "end": "1187820"
  },
  {
    "text": "scaling the number of replicas those",
    "start": "1187820",
    "end": "1190160"
  },
  {
    "text": "objects get scheduled to the right",
    "start": "1190160",
    "end": "1192380"
  },
  {
    "text": "workload cluster and it takes care of",
    "start": "1192380",
    "end": "1195799"
  },
  {
    "text": "the networking component and setting up",
    "start": "1195799",
    "end": "1197600"
  },
  {
    "text": "index components so the objects are",
    "start": "1197600",
    "end": "1199760"
  },
  {
    "text": "pushed down to the workload cluster so",
    "start": "1199760",
    "end": "1201799"
  },
  {
    "text": "there would be",
    "start": "1201799",
    "end": "1203200"
  },
  {
    "text": "Envoy and activators running somewhere",
    "start": "1203200",
    "end": "1206120"
  },
  {
    "text": "yes on one of one or more of those",
    "start": "1206120",
    "end": "1208460"
  },
  {
    "text": "clusters yes yeah okay yeah",
    "start": "1208460",
    "end": "1212120"
  },
  {
    "text": "yeah and we are also looking into a",
    "start": "1212120",
    "end": "1214520"
  },
  {
    "text": "tanzu service mesh as well trying to",
    "start": "1214520",
    "end": "1216440"
  },
  {
    "text": "make sure it makes uh to see the global",
    "start": "1216440",
    "end": "1218840"
  },
  {
    "text": "name spaces all of those can be used",
    "start": "1218840",
    "end": "1220640"
  },
  {
    "text": "because what uh the scheduler does is it",
    "start": "1220640",
    "end": "1223580"
  },
  {
    "text": "simply schedules the compute object so",
    "start": "1223580",
    "end": "1225500"
  },
  {
    "text": "it it has a smart to figure out hey I",
    "start": "1225500",
    "end": "1227720"
  },
  {
    "text": "want to schedule 80 of my workload to",
    "start": "1227720",
    "end": "1230360"
  },
  {
    "text": "Cluster a and 20 to Cluster B but it is",
    "start": "1230360",
    "end": "1233360"
  },
  {
    "text": "not taking care of inter-cluster",
    "start": "1233360",
    "end": "1234980"
  },
  {
    "text": "networking so we would need to integrate",
    "start": "1234980",
    "end": "1236720"
  },
  {
    "text": "with something like",
    "start": "1236720",
    "end": "1238179"
  },
  {
    "text": "Envoy or service mesh",
    "start": "1238179",
    "end": "1241220"
  },
  {
    "text": "does it answer your question I think so",
    "start": "1241220",
    "end": "1243620"
  },
  {
    "text": "I think you just said at the end if",
    "start": "1243620",
    "end": "1245900"
  },
  {
    "text": "you're your Envoy like your istio",
    "start": "1245900",
    "end": "1249640"
  },
  {
    "text": "ended up in one cluster and your K",
    "start": "1249640",
    "end": "1253400"
  },
  {
    "text": "native activator ended up in another you",
    "start": "1253400",
    "end": "1255080"
  },
  {
    "text": "might not get activations working",
    "start": "1255080",
    "end": "1257059"
  },
  {
    "text": "properly without extra work yes yeah",
    "start": "1257059",
    "end": "1259400"
  },
  {
    "text": "that's correct",
    "start": "1259400",
    "end": "1261820"
  },
  {
    "text": "right now the first phase we are",
    "start": "1261860",
    "end": "1264620"
  },
  {
    "text": "scheduling the whole stack to a single",
    "start": "1264620",
    "end": "1266840"
  },
  {
    "text": "cluster but what we're looking to see is",
    "start": "1266840",
    "end": "1269660"
  },
  {
    "text": "can we actually have a Federation of K",
    "start": "1269660",
    "end": "1271700"
  },
  {
    "text": "native stack that's running on the",
    "start": "1271700",
    "end": "1273799"
  },
  {
    "text": "multiple control planes as well that",
    "start": "1273799",
    "end": "1276559"
  },
  {
    "text": "would actually make it a lot more highly",
    "start": "1276559",
    "end": "1279080"
  },
  {
    "text": "available than scheduling the entire K",
    "start": "1279080",
    "end": "1281480"
  },
  {
    "text": "native serving stack onto a single",
    "start": "1281480",
    "end": "1283460"
  },
  {
    "text": "workload cluster",
    "start": "1283460",
    "end": "1284900"
  },
  {
    "text": "but first step we are trying to do",
    "start": "1284900",
    "end": "1287000"
  },
  {
    "text": "schedule everything into a siled",
    "start": "1287000",
    "end": "1288620"
  },
  {
    "text": "controlled Lane",
    "start": "1288620",
    "end": "1291158"
  },
  {
    "text": "any other questions",
    "start": "1292580",
    "end": "1295658"
  },
  {
    "text": "well thanks so much this was uh super",
    "start": "1296059",
    "end": "1297860"
  },
  {
    "text": "valuable to hear your questions",
    "start": "1297860",
    "end": "1299960"
  },
  {
    "text": "foreign",
    "start": "1299960",
    "end": "1300750"
  },
  {
    "text": "[Applause]",
    "start": "1300750",
    "end": "1304279"
  }
]