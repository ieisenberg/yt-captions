[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "hi thanks for coming this talk is about why rust is going to be a foundational",
    "start": "80",
    "end": "6480"
  },
  {
    "text": "technology to the future of cloud native infrastructure before i get to that let me introduce",
    "start": "6480",
    "end": "12160"
  },
  {
    "text": "myself my name is oliver gould these are my dogs and i'm the creator of a project called linkery a service mesh",
    "start": "12160",
    "end": "19039"
  },
  {
    "text": "that's been part of cncf since 2016. i'm also the cto of a company called buoyant where we make this and some",
    "start": "19039",
    "end": "25599"
  },
  {
    "text": "other infrastructure tools before that i worked at",
    "start": "25599",
    "end": "30880"
  },
  {
    "text": "internet companies like twitter and yahoo really focused on production operations and infrastructure",
    "start": "30880",
    "end": "36000"
  },
  {
    "text": "and that's really the lens to which this talk is going to be delivered",
    "start": "36000",
    "end": "40800"
  },
  {
    "text": "this talks basically three parts first i want to take you through a brief history of the cloud from my",
    "start": "41600",
    "end": "48079"
  },
  {
    "text": "perspective next i want to get into the details of why i think russ is so important to cloud technology",
    "start": "48079",
    "end": "54480"
  },
  {
    "text": "and then we'll wrap this up with a quick tour of the rust toolkit that we use in linkery",
    "start": "54480",
    "end": "60690"
  },
  {
    "text": "[Music] so i want to emphasize this is",
    "start": "60690",
    "end": "66880"
  },
  {
    "start": "62000",
    "end": "62000"
  },
  {
    "text": "when we talk about the history this is the history from my perspective like all history subjective and so if you may have been",
    "start": "66880",
    "end": "73119"
  },
  {
    "text": "in the industry through this whole time you may have a slightly different perspective of things that's fine but i i think it's important to set the",
    "start": "73119",
    "end": "79600"
  },
  {
    "text": "table for for where where we've come from before we talk about where we're going",
    "start": "79600",
    "end": "86080"
  },
  {
    "start": "86000",
    "end": "86000"
  },
  {
    "text": "so when i entered the industry when i started working at yahoo in 2007",
    "start": "86080",
    "end": "92880"
  },
  {
    "text": "yahoo was a big old internet company they had literally millions of physical",
    "start": "92880",
    "end": "99119"
  },
  {
    "text": "hosts that were managed and they were managed by dozens of hardware teams people and data centers",
    "start": "99119",
    "end": "104399"
  },
  {
    "text": "people provisioning hardware and also dozens of system and teams so our team in production operations was",
    "start": "104399",
    "end": "110240"
  },
  {
    "text": "one of many responsible for managing these hosts these fleet of hosts across the world",
    "start": "110240",
    "end": "115920"
  },
  {
    "text": "because of this because of all these legacy systems that accrued over time it was extremely heterogeneous lots of freebsd",
    "start": "115920",
    "end": "124320"
  },
  {
    "text": "linux creeping in os versions configurations proliferated in every",
    "start": "124320",
    "end": "129920"
  },
  {
    "text": "different way but the idea here is that they are largely what they call pets and not cattle",
    "start": "129920",
    "end": "135520"
  },
  {
    "text": "really bespoke configurations for millions of hosts",
    "start": "135520",
    "end": "140720"
  },
  {
    "text": "it also at the time if you wanted to get hardware if you wanted a new server you had to go",
    "start": "141360",
    "end": "146879"
  },
  {
    "text": "to something called the hardware request committee hardware review committee and this was literally a meeting with the cto of the",
    "start": "146879",
    "end": "153280"
  },
  {
    "text": "company david philo where you'd justify your need for a server or for a fleet of servers",
    "start": "153280",
    "end": "159760"
  },
  {
    "text": "and it was you know undoubtedly slow and laborious and a little bit stressful to",
    "start": "159760",
    "end": "165360"
  },
  {
    "text": "get hardware and this was done to save costs and make sure we're using things efficiently but it's really a different way of",
    "start": "165360",
    "end": "172239"
  },
  {
    "text": "requiring for getting hardware than we do today and the first problem i really started",
    "start": "172239",
    "end": "177440"
  },
  {
    "text": "working on there the problem i worked on through most of my time at yahoo was config management so across these millions of hosts",
    "start": "177440",
    "end": "185360"
  },
  {
    "text": "how do we make sure that they get security patches how do we make sure that new users of the company get access to",
    "start": "185360",
    "end": "191040"
  },
  {
    "text": "the host or when a user leaves the company that they no longer have access to the host how do we manage the proliferation of",
    "start": "191040",
    "end": "197280"
  },
  {
    "text": "configuration this is a hard problem and we worked on this for for years and this wasn't unique to",
    "start": "197280",
    "end": "203280"
  },
  {
    "text": "yahoo lots of companies at the time were going",
    "start": "203280",
    "end": "208319"
  },
  {
    "start": "205000",
    "end": "205000"
  },
  {
    "text": "through similar problems they all had to manage hosts to be connected to the internet securely",
    "start": "208319",
    "end": "214400"
  },
  {
    "text": "and so the proliferation of projects came around this first cf engine long time ago written in",
    "start": "214400",
    "end": "220000"
  },
  {
    "text": "c and then you know in the mid 2000s to late 2000s we saw new products coming on",
    "start": "220000",
    "end": "226400"
  },
  {
    "text": "mostly in ruby or python projects like puppet chef ansible and of course others and the job of a config",
    "start": "226400",
    "end": "234239"
  },
  {
    "text": "management system is kind of simple a little bit",
    "start": "234239",
    "end": "239599"
  },
  {
    "text": "they mostly have to run commands and generate templates these scripting languages that were really coming to popularity at the time were good fit for",
    "start": "239599",
    "end": "246720"
  },
  {
    "text": "that they're they're system scripting languages and the real job of config management",
    "start": "246720",
    "end": "253280"
  },
  {
    "text": "systems is to make the host able to run an application and frequently config management systems",
    "start": "253280",
    "end": "259600"
  },
  {
    "text": "were responsible for actually deploying code for getting application software ready to run this",
    "start": "259600",
    "end": "265199"
  },
  {
    "text": "meant there's a pretty tight coupling between your hostess database and your actual",
    "start": "265199",
    "end": "271440"
  },
  {
    "text": "application it's not really where we are today obviously",
    "start": "271440",
    "end": "278639"
  },
  {
    "start": "278000",
    "end": "278000"
  },
  {
    "text": "around the same time so early well really throughout the early 2000s",
    "start": "278960",
    "end": "285040"
  },
  {
    "text": "we saw a new proliferation of virtualization technology come online",
    "start": "285040",
    "end": "290320"
  },
  {
    "text": "so projects like freebsd jails kind of in the earlier side and then zen and solaris and building up to linux",
    "start": "290320",
    "end": "297759"
  },
  {
    "text": "c groups which so much of what we're talking about today is built on really the job of these virtualization",
    "start": "297759",
    "end": "303600"
  },
  {
    "text": "technologies made systems multi-tenant so no longer do i have to have a single host with a single",
    "start": "303600",
    "end": "311600"
  },
  {
    "text": "application or even a single user or customer now i can run multiple operating systems",
    "start": "311600",
    "end": "319039"
  },
  {
    "text": "on a single piece of hardware and this really really change the game",
    "start": "319039",
    "end": "324240"
  },
  {
    "text": "of course all this stuff is very low level operating system that's maybe written in c at best but",
    "start": "324240",
    "end": "330000"
  },
  {
    "text": "also lots of assembly to get this stuff done because you're virtualizing hardware you're actually you know mimicking what a machine does",
    "start": "330000",
    "end": "337520"
  },
  {
    "text": "this gave birth to a new set of products and services that we really call what we call the",
    "start": "337520",
    "end": "343199"
  },
  {
    "start": "338000",
    "end": "338000"
  },
  {
    "text": "cloud today and it really made the data center as a service or data center as a product",
    "start": "343199",
    "end": "348400"
  },
  {
    "text": "and ec2 is probably the first widely available one of these and of course in many have followed since",
    "start": "348400",
    "end": "356240"
  },
  {
    "text": "and i remember having a conversation with a colleague with netflix and probably 2009 or 2010 where he told me",
    "start": "357199",
    "end": "364880"
  },
  {
    "text": "how netflix was moving from their aix mainframe so netflix originally was on ax mainframes",
    "start": "364880",
    "end": "371199"
  },
  {
    "text": "uh and how they were moving to aws and this made no sense to me again i was working at yahoo with these",
    "start": "371199",
    "end": "378000"
  },
  {
    "text": "massive fleets of bespoke systems and the idea that a growing popular internet company would",
    "start": "378000",
    "end": "384400"
  },
  {
    "text": "go to amazon's infrastructure it didn't make any sense to me",
    "start": "384400",
    "end": "390319"
  },
  {
    "text": "boy was i wrong huh so the great thing about this as we all know is that it made",
    "start": "390319",
    "end": "396400"
  },
  {
    "text": "service accessible there's no longer a hardware review committee i have to go to",
    "start": "396400",
    "end": "402080"
  },
  {
    "text": "to get a new server there's no longer some of the data center i have to call to get out to fix a server",
    "start": "402080",
    "end": "409759"
  },
  {
    "text": "and i now just have an api and a credit card and i get access to a server i get an internet",
    "start": "409759",
    "end": "415840"
  },
  {
    "text": "connected server this means as students we actually can just get online and get server",
    "start": "415840",
    "end": "421520"
  },
  {
    "text": "technology easily and as startups and businesses we get access to these things without having to",
    "start": "421520",
    "end": "426880"
  },
  {
    "text": "get data center contracts or any of the kind of overhead that's really associated with the time before this",
    "start": "426880",
    "end": "432319"
  },
  {
    "text": "the other interesting thing here is that linux is really tied to this right linux does not generally require",
    "start": "432319",
    "end": "438639"
  },
  {
    "text": "licenses to operate and so this was a great fit i no longer have to get a microsoft or whatever",
    "start": "438639",
    "end": "444560"
  },
  {
    "text": "license to get into prod i now just get a free operating system",
    "start": "444560",
    "end": "450080"
  },
  {
    "text": "and i also no longer have to worry about the vast array of driver compatibility issues which were",
    "start": "450080",
    "end": "456880"
  },
  {
    "text": "kind of a headache before this so now i can just make an api call click a button",
    "start": "456880",
    "end": "461919"
  },
  {
    "text": "and i get a server that's ready to operate on the internet which is great really reduces the barriers to",
    "start": "461919",
    "end": "467599"
  },
  {
    "text": "getting involved in server technology however there's some downsides here",
    "start": "467599",
    "end": "474160"
  },
  {
    "text": "we're still dealing with her hooks even though we're dealing with virtual hosts vms we still have hosts as our primary abstraction which",
    "start": "474160",
    "end": "481039"
  },
  {
    "text": "means config management is still a big problem which is why we have all these configmatic companies coming online in projects",
    "start": "481039",
    "end": "488639"
  },
  {
    "text": "we also have no control over the hardware using very little control of the hardware we're using which means we have kind of less",
    "start": "488639",
    "end": "495919"
  },
  {
    "text": "reliability there we don't no longer are we trying to have one",
    "start": "495919",
    "end": "501520"
  },
  {
    "text": "super power machine stay online all the time now we're kind of dealing in a world where systems might fail and we can't call any data or",
    "start": "501520",
    "end": "508080"
  },
  {
    "text": "deal with them we really have to consider variable variable performance no longer do i have exclusive access to",
    "start": "508080",
    "end": "515440"
  },
  {
    "text": "a machine i might have other you know other businesses running on this machine that are dealing with",
    "start": "515440",
    "end": "521200"
  },
  {
    "text": "lots of traffic and so these concerns end up changing how we actually think about operating",
    "start": "521200",
    "end": "526800"
  },
  {
    "text": "services we have a whole new set of failures soft failures more frequent failures and this kind of",
    "start": "526800",
    "end": "533920"
  },
  {
    "text": "gives birth to a new way of testing a new methodology called chaos testing also coming out of",
    "start": "533920",
    "end": "539440"
  },
  {
    "text": "netflix probably in 2011 or so",
    "start": "539440",
    "end": "543279"
  },
  {
    "start": "544000",
    "end": "544000"
  },
  {
    "text": "building on that so this is kind of by the time we met twitter in 2010 we have a new set of",
    "start": "545040",
    "end": "551680"
  },
  {
    "text": "technologies coming online that really decouple applications from hosts",
    "start": "551680",
    "end": "556800"
  },
  {
    "text": "so no longer do we as as someone who's operating a service do i have to think about config management or ssh into a host or",
    "start": "556800",
    "end": "564000"
  },
  {
    "text": "kind of all the overhead of that now what we're thinking of through projects like mesos and aurora",
    "start": "564000",
    "end": "569440"
  },
  {
    "text": "are i just want to ship my workload i want to write software build an artifact get it running and this was really great",
    "start": "569440",
    "end": "576560"
  },
  {
    "text": "for twitter and other you know growing scaling companies uber",
    "start": "576560",
    "end": "581920"
  },
  {
    "text": "lyft etc where you now now need to focus on developer",
    "start": "581920",
    "end": "587120"
  },
  {
    "text": "productivity we have hundreds of engineers how do we get them to write software ship under prod quickly without having to think about",
    "start": "587120",
    "end": "593839"
  },
  {
    "text": "all the operational overhead how do we stratify that separate that the downsides of these projects were",
    "start": "593839",
    "end": "600160"
  },
  {
    "text": "that they were really operationally complex it was pretty hard or if not impossible",
    "start": "600160",
    "end": "605519"
  },
  {
    "text": "to run a full mesos cluster on your laptop um you actually need quite a bit of",
    "start": "605519",
    "end": "611600"
  },
  {
    "text": "hardware to get started or you need some pretty beefy cloud boxes to get started and so there is some overhead here this",
    "start": "611600",
    "end": "617839"
  },
  {
    "text": "is not a broadly accessible technology that didn't get started with also we're dealing with",
    "start": "617839",
    "end": "624480"
  },
  {
    "text": "a lot of you know jvm runtime which comes with runtime costs overhead memory cpu and",
    "start": "624480",
    "end": "631680"
  },
  {
    "text": "operational costs in terms of debugging gc and things like that and in this world we're dealing with you",
    "start": "631680",
    "end": "637680"
  },
  {
    "text": "know highly just highly dynamic systems where where mesos may reschedule pods or",
    "start": "637680",
    "end": "644320"
  },
  {
    "text": "instances without there being any kind of user involvement and so we have to deal with things like service discovery",
    "start": "644320",
    "end": "650160"
  },
  {
    "text": "and load balancing and retries and timeouts and all the things that kind of are necessary to manage services of the",
    "start": "650160",
    "end": "656959"
  },
  {
    "text": "scale and so twitter we were working on a library called finagle and that's really what came to be the",
    "start": "656959",
    "end": "664320"
  },
  {
    "text": "core of the first version of linkedin and so you know as we dealt with all of",
    "start": "664320",
    "end": "669600"
  },
  {
    "text": "these production issues and dealt with making communication more reliable in this library called finagle",
    "start": "669600",
    "end": "675279"
  },
  {
    "text": "the idea with linker to you as well how do we package that up into a proxy and make that accessible to folks who",
    "start": "675279",
    "end": "680560"
  },
  {
    "text": "are not writing software with finagle",
    "start": "680560",
    "end": "684880"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "following that or kind of around the same time there's what the you know a new set of technologies",
    "start": "686399",
    "end": "692079"
  },
  {
    "text": "coming on that what we call cloud native so it really kind of starts with docker in a lot of ways so docker is building",
    "start": "692079",
    "end": "699680"
  },
  {
    "text": "on linux c groups the technology we're talking about a little bit ago and docker makes it possible as many of",
    "start": "699680",
    "end": "706079"
  },
  {
    "text": "you know i'm sure to package up an application and ship it somewhere",
    "start": "706079",
    "end": "711519"
  },
  {
    "text": "and get it running with resource constraints and so it kind of avoid you know it",
    "start": "711519",
    "end": "717760"
  },
  {
    "text": "pulls in parts of the config management story and isolates them into a binary that",
    "start": "717760",
    "end": "722959"
  },
  {
    "text": "really is almost a whole operating system running in a binary and kubernetes extends that model and",
    "start": "722959",
    "end": "729839"
  },
  {
    "text": "makes it possible to take a cluster of servers and just run these docker containers anywhere",
    "start": "729839",
    "end": "738160"
  },
  {
    "text": "and with that we have this heavy reliance on the network what we call you know microservice",
    "start": "739600",
    "end": "745279"
  },
  {
    "text": "architectures are tiny services that are distributed in a data center or in a cluster",
    "start": "745279",
    "end": "751600"
  },
  {
    "text": "and they communicate over the network and so tools like grpc and envoy and linkerd fit into this",
    "start": "751600",
    "end": "758320"
  },
  {
    "text": "world to really focus on managing the complexity of a dynamic",
    "start": "758320",
    "end": "764480"
  },
  {
    "text": "system so we deal with fault tolerance we deal with the fact that we",
    "start": "764480",
    "end": "770000"
  },
  {
    "text": "have to load balance and a lot of these things kubernetes and linker d especially docker as well",
    "start": "770000",
    "end": "776079"
  },
  {
    "text": "focus on user experience on reducing the costs of managing it getting started of understanding it to",
    "start": "776079",
    "end": "782480"
  },
  {
    "text": "make it accessible for application owners to get running and so we focus on applications and not hosts we're finally",
    "start": "782480",
    "end": "789600"
  },
  {
    "text": "broken that those barriers down so let me take a little detour and",
    "start": "789600",
    "end": "795760"
  },
  {
    "start": "794000",
    "end": "794000"
  },
  {
    "text": "describe what linguine is in case you don't know and then we'll get into why this is so important for rust",
    "start": "795760",
    "end": "802399"
  },
  {
    "text": "so linguine is a service mission what a service mesh is it's a pattern of deploying rich data planes",
    "start": "802399",
    "end": "809920"
  },
  {
    "text": "as generally as a proxy as sidecar proxy that deal with this communication complexity and so we have to deal with",
    "start": "809920",
    "end": "816399"
  },
  {
    "text": "load balancing over a set of instances a set of replicas in a cluster and i have to deal with",
    "start": "816399",
    "end": "822000"
  },
  {
    "text": "making sure that everything gets tls by default because i may not trust the network that i'm running and i also want to have",
    "start": "822000",
    "end": "827760"
  },
  {
    "text": "identity on either side of this i want to know which workload is talking which workload and that's easily done through tls",
    "start": "827760",
    "end": "834639"
  },
  {
    "text": "and so what we do is we deploy a proxy sidecar next to every application instance and",
    "start": "834639",
    "end": "840639"
  },
  {
    "text": "this helps manage communication and complexity this is really in in linguity there's",
    "start": "840639",
    "end": "846399"
  },
  {
    "text": "kind of two halves of this we have a control plane which talks to the kubernetes api which deals with",
    "start": "846399",
    "end": "852720"
  },
  {
    "text": "a lot of the configuration and discovery and the fact that things are dynamic and",
    "start": "852720",
    "end": "860160"
  },
  {
    "text": "feeding them to proxies and the proxies are supposed to be very lightweight small instances that can fit you know many",
    "start": "860160",
    "end": "866639"
  },
  {
    "text": "many many on a host to serve this this traffic",
    "start": "866639",
    "end": "872079"
  },
  {
    "text": "and we can kind of look at it like this right where we have the kubernetes api kubernetes is of course written",
    "start": "872480",
    "end": "878079"
  },
  {
    "text": "go and we have a link red control plane which is also today where we go and we chose go for the control plane",
    "start": "878079",
    "end": "884720"
  },
  {
    "text": "because it's so coupled to the kubernetes api because we are we want to use client go",
    "start": "884720",
    "end": "891920"
  },
  {
    "text": "we don't want to have to write a kubernetes client from scratch and think about all the complexity of what's in a kubernetes client",
    "start": "891920",
    "end": "897760"
  },
  {
    "text": "and this is again three plus years ago when we were starting we wanted linker d's control plane to be",
    "start": "897760",
    "end": "903839"
  },
  {
    "text": "you know feel like part of the kubernetes ecosystem so we chose go for that but when we",
    "start": "903839",
    "end": "908959"
  },
  {
    "text": "start went to write the proxy the sidecar proxy we chose rust",
    "start": "908959",
    "end": "914160"
  },
  {
    "text": "and that has been a great experience um but when we were starting it was",
    "start": "914160",
    "end": "920720"
  },
  {
    "text": "really rough around the edges we had to bootstrap ourselves we had to build lots of technology we invest heavily in the",
    "start": "920720",
    "end": "926240"
  },
  {
    "text": "rust ecosystem to make this work",
    "start": "926240",
    "end": "930240"
  },
  {
    "start": "931000",
    "end": "931000"
  },
  {
    "text": "and so why is rust going to happen now what what about this moment meet why is",
    "start": "935120",
    "end": "942399"
  },
  {
    "text": "russ so appealing to us to us in this point of time",
    "start": "942399",
    "end": "948000"
  },
  {
    "text": "well rust gives us a bunch of primitives to build components right it's a programming language",
    "start": "948000",
    "end": "953199"
  },
  {
    "text": "which which focuses on safety efficiency and composability and really on making developers",
    "start": "953199",
    "end": "959279"
  },
  {
    "text": "productive right though i as an engineer can write a data plane",
    "start": "959279",
    "end": "964320"
  },
  {
    "text": "proxy a you know a micro service proxy and i can do that with high confidence",
    "start": "964320",
    "end": "971199"
  },
  {
    "text": "that it's not going to have memory leaks or memory safety issues",
    "start": "971199",
    "end": "976240"
  },
  {
    "text": "and that will do the job well and we want to use this to build cloud native technology and so the cloud native",
    "start": "976240",
    "end": "981680"
  },
  {
    "text": "systems are again dynamic network fault tolerant and loosely coupled and so these things end up actually",
    "start": "981680",
    "end": "989199"
  },
  {
    "text": "aligning pretty closely and i'm going to get into why but first let me take you back to the",
    "start": "989199",
    "end": "994560"
  },
  {
    "start": "993000",
    "end": "993000"
  },
  {
    "text": "osi model this is one of my favorite pictures every talk i do has this but",
    "start": "994560",
    "end": "1000560"
  },
  {
    "text": "we look at the application stack or the networking stack and we see all these layers but really",
    "start": "1000560",
    "end": "1006560"
  },
  {
    "text": "what we're talking about for for applications for the people building websites and and user-facing",
    "start": "1006560",
    "end": "1012880"
  },
  {
    "start": "1007000",
    "end": "1007000"
  },
  {
    "text": "applications this is how the world looks they should only really care about their application logic",
    "start": "1012880",
    "end": "1018480"
  },
  {
    "text": "whether it's tweets or pictures or payments or whatever and maybe the presentation whether",
    "start": "1018480",
    "end": "1023519"
  },
  {
    "text": "that's jason or protobuf or you know the details of how it's rendered and then",
    "start": "1023519",
    "end": "1028640"
  },
  {
    "text": "shared but everything beneath that is infrastructure it's the cloud but somebody has to build",
    "start": "1028640",
    "end": "1034079"
  },
  {
    "text": "that stuff and that stuff is us and so you know down at the bottom we have physical layers and link layers",
    "start": "1034079",
    "end": "1040079"
  },
  {
    "start": "1035000",
    "end": "1035000"
  },
  {
    "text": "which are really you know part of the cloud providers or or data center or hardware right",
    "start": "1040079",
    "end": "1047038"
  },
  {
    "text": "and in this middle glue layer is where we spend all our time as infrastructure developers",
    "start": "1047039",
    "end": "1052880"
  },
  {
    "text": "we built things like linker d and kubernetes really fit into this middle blue layer that is you know not",
    "start": "1052880",
    "end": "1060480"
  },
  {
    "text": "talked about too much this so what we're all becoming is",
    "start": "1060480",
    "end": "1067919"
  },
  {
    "start": "1064000",
    "end": "1064000"
  },
  {
    "text": "system programmers anyone working in the cloud native space is really not an application developer applications are",
    "start": "1067919",
    "end": "1074320"
  },
  {
    "text": "end user facing system programmers build software that supports applications",
    "start": "1074320",
    "end": "1080559"
  },
  {
    "text": "and generally these things have to be highly trustworthy meaning that they're going to work",
    "start": "1080559",
    "end": "1086080"
  },
  {
    "text": "safely and correctly and they're generally have you know pretty tight performance requirements",
    "start": "1086080",
    "end": "1092000"
  },
  {
    "text": "and this is really where rust fits in rust is a native language meaning reaction compiled a",
    "start": "1092000",
    "end": "1097679"
  },
  {
    "text": "native code we're not running in a you know a jit or a runtime a vm",
    "start": "1097679",
    "end": "1106080"
  },
  {
    "text": "and so we have access to low-level memory primitives and things like that but we also need to do that safely and",
    "start": "1106080",
    "end": "1112080"
  },
  {
    "text": "that's where i think rust really shines and so i'm going to walk through some comparisons i'm going to compare it to",
    "start": "1112080",
    "end": "1118000"
  },
  {
    "text": "go because go is what i know well and really what is the kind of state of the art in the cloud",
    "start": "1118000",
    "end": "1123039"
  },
  {
    "text": "native and we'll talk about where rust really makes improvements over the current",
    "start": "1123039",
    "end": "1129280"
  },
  {
    "text": "uh the current state of things so here's a really simple example a function that fails",
    "start": "1129280",
    "end": "1137360"
  },
  {
    "start": "1131000",
    "end": "1131000"
  },
  {
    "text": "and i call it and i ignore the error this is a great this is a bug right if",
    "start": "1137360",
    "end": "1143600"
  },
  {
    "text": "something fails we should have to handle it and russ makes that really easy and it uses the type system",
    "start": "1143600",
    "end": "1148880"
  },
  {
    "text": "to do that so one of the big advantages of rust has a really nice type system and types",
    "start": "1148880",
    "end": "1153919"
  },
  {
    "text": "let us express constraints in a much richer way and really the goal of all of",
    "start": "1153919",
    "end": "1161120"
  },
  {
    "text": "what we're doing here is taking things that might fail one at runtime when the application's",
    "start": "1161120",
    "end": "1167280"
  },
  {
    "text": "running and trying to make them fail before we even build the thing before we test it as early as possible during the",
    "start": "1167280",
    "end": "1173200"
  },
  {
    "text": "compilation phase and rust really excels at this so here same function that just fails if we",
    "start": "1173200",
    "end": "1179360"
  },
  {
    "text": "ignore the error russ will actually emit a compiler warning in linkerity this will prevent linker d from building",
    "start": "1179360",
    "end": "1185440"
  },
  {
    "text": "and we'll have to fix this before we go on another example pretty similar",
    "start": "1185440",
    "end": "1192320"
  },
  {
    "start": "1188000",
    "end": "1188000"
  },
  {
    "text": "here is a place where i access an initialized value and we've had this",
    "start": "1192320",
    "end": "1198400"
  },
  {
    "text": "type of bug in the linkedin control plane or cli uh countless times more times than i can",
    "start": "1198400",
    "end": "1205200"
  },
  {
    "text": "character that i than i wish right this this is a a big pain in my neck um",
    "start": "1205200",
    "end": "1213520"
  },
  {
    "text": "and russ again makes this simple with a type system so no longer can i access something that hasn't been",
    "start": "1213520",
    "end": "1218840"
  },
  {
    "text": "initialized if i try to do that i'll actually get a compilation error i have to deal with the fact",
    "start": "1218840",
    "end": "1224640"
  },
  {
    "text": "that something may not be set there's no null value and rust option is the closest thing we",
    "start": "1224640",
    "end": "1230159"
  },
  {
    "text": "have where it either exists or doesn't but it's part of the type system to fix this i actually have to i can get the same",
    "start": "1230159",
    "end": "1238000"
  },
  {
    "start": "1235000",
    "end": "1235000"
  },
  {
    "text": "thing that same runtime failure that i would get and go but i actually have to document that i have to write",
    "start": "1238000",
    "end": "1243760"
  },
  {
    "text": "expect with an error message so no longer just sight faulting because",
    "start": "1243760",
    "end": "1249120"
  },
  {
    "text": "i did something dumb rust makes me deal with these things before i even compile",
    "start": "1249120",
    "end": "1255280"
  },
  {
    "start": "1257000",
    "end": "1257000"
  },
  {
    "text": "similarly concurrency becomes a big issue especially in a proxy like linker d's we have multiple connections and",
    "start": "1259919",
    "end": "1266240"
  },
  {
    "text": "requests going at once we're talking the control plane there's lots of concurrent access and in go this can be quite dangerous by",
    "start": "1266240",
    "end": "1273440"
  },
  {
    "text": "default so here i've written just this actually from the the go by example",
    "start": "1273440",
    "end": "1279520"
  },
  {
    "text": "website um where they demonstrate how to use mutexes and here i've just left the",
    "start": "1279520",
    "end": "1285039"
  },
  {
    "text": "mutex out and go will happily compile and it'll even run so if i run this thing for a second",
    "start": "1285039",
    "end": "1291039"
  },
  {
    "text": "go works just fine which is great right unless i run it for longer so i increase",
    "start": "1291039",
    "end": "1296320"
  },
  {
    "text": "the runtime here to 10 seconds and all of a sudden i hit an error so this is completely non-deterministic",
    "start": "1296320",
    "end": "1302799"
  },
  {
    "text": "right i can write tests that pass and then when i ship it to prod this",
    "start": "1302799",
    "end": "1308240"
  },
  {
    "text": "thing can fail in an unexpected way this is virtually impossible to do in",
    "start": "1308240",
    "end": "1313840"
  },
  {
    "text": "rest so here's the same code effectively written in rust",
    "start": "1313840",
    "end": "1320640"
  },
  {
    "text": "and when i try to compile this i'll actually get an error that says hey this map you built you can't use it",
    "start": "1320880",
    "end": "1328159"
  },
  {
    "text": "multiple places at once somebody has to own this thing and so this idea of a borrower checker",
    "start": "1328159",
    "end": "1333520"
  },
  {
    "text": "is really an ownership model for who owns memory who is responsible for this",
    "start": "1333520",
    "end": "1338640"
  },
  {
    "text": "or what code is responsible for this means that i can't even compile this code in rest because i it's unsafe the axis",
    "start": "1338640",
    "end": "1346240"
  },
  {
    "text": "patterns aren't safe and so to fix this i actually have to go and put a mutex in this is the same fix effectively that",
    "start": "1346240",
    "end": "1353919"
  },
  {
    "text": "should exist in the go code but the compiler enforces in rest when i add the mutex",
    "start": "1353919",
    "end": "1359679"
  },
  {
    "text": "everything works pop as you'd expect which is great the rust has made my",
    "start": "1359679",
    "end": "1365520"
  },
  {
    "text": "program more safe without even writing tests",
    "start": "1365520",
    "end": "1371039"
  },
  {
    "start": "1371000",
    "end": "1371000"
  },
  {
    "text": "my last example here is that the rest is this idea called uh raii resource acquisition",
    "start": "1372320",
    "end": "1379760"
  },
  {
    "text": "is initialization and this deals with lifetimes and when um kind of tying back to that borrowing",
    "start": "1379760",
    "end": "1386000"
  },
  {
    "text": "and ownership model and once i drop something it no longer exists",
    "start": "1386000",
    "end": "1391840"
  },
  {
    "text": "and so here in the example on the left we have go code and that sends two messages on the",
    "start": "1391840",
    "end": "1399120"
  },
  {
    "text": "channel and then drops the sender and then i have another task that continually reads from that",
    "start": "1399120",
    "end": "1405679"
  },
  {
    "text": "channel and if i run this it runs until that error happens",
    "start": "1405679",
    "end": "1410960"
  },
  {
    "text": "and we hit a deadlock and go exits which is great i mean go should fail in this case because that's",
    "start": "1410960",
    "end": "1418320"
  },
  {
    "text": "the best it can do but we can do better in rust and rust i have this type system again",
    "start": "1418320",
    "end": "1424000"
  },
  {
    "text": "and what the type system tells lets me do is i get an optional value back and so there's no more runtime failure here",
    "start": "1424000",
    "end": "1432240"
  },
  {
    "text": "i can't even write the code to not work here i have to handle these conditions and",
    "start": "1432240",
    "end": "1437440"
  },
  {
    "text": "when i do that i actually uh we see that we get a some value back every time we do a",
    "start": "1437440",
    "end": "1445279"
  },
  {
    "text": "read so this is an example of the type of safety net that we get from rust and why",
    "start": "1445279",
    "end": "1452960"
  },
  {
    "text": "you know we haven't even gotten to any of the details around memory access or you know russ",
    "start": "1452960",
    "end": "1459200"
  },
  {
    "text": "kind of provable safety but these are all sorts of ways that we take failures that could happen at",
    "start": "1459200",
    "end": "1465520"
  },
  {
    "text": "runtime after i've shipped my software to production when i hit a weird corner case where things can crash and break the",
    "start": "1465520",
    "end": "1472720"
  },
  {
    "text": "whole up you know the rest of the system russ we want to push all ruts russ lets us take all of those",
    "start": "1472720",
    "end": "1479840"
  },
  {
    "text": "types of failures and bring them back in the development cycle so they have to be dealt with explicitly",
    "start": "1479840",
    "end": "1486559"
  },
  {
    "text": "and finally let me take you through a quick tour of what of tokyo's async ecosystem the tokyo",
    "start": "1486559",
    "end": "1493200"
  },
  {
    "start": "1487000",
    "end": "1487000"
  },
  {
    "text": "is a rust library that's kind of similar to neti if you're familiar with the jbm it gives us asynchronous i o",
    "start": "1493200",
    "end": "1501039"
  },
  {
    "text": "and so when i when i start a program i stood up to tokyo runtime and this lets us run io concurrently",
    "start": "1501039",
    "end": "1508559"
  },
  {
    "text": "without having to have a thread per connection or you know it gives us something you",
    "start": "1508559",
    "end": "1514000"
  },
  {
    "text": "can basically think of similar to goes runtime where go has these green threads that let you run things concurrently and just block",
    "start": "1514000",
    "end": "1521279"
  },
  {
    "text": "uh rust in tokyo give you kind of a similar set of primitives and tokyo has an ecosystem around it",
    "start": "1521279",
    "end": "1526720"
  },
  {
    "text": "that really lets us build up uh new technique build up",
    "start": "1526720",
    "end": "1531760"
  },
  {
    "text": "systems on these good primitives that are trustworthy",
    "start": "1531760",
    "end": "1536559"
  },
  {
    "start": "1536000",
    "end": "1536000"
  },
  {
    "text": "the first one which we've invested heavily in linkedin a lot of the towers primitives come out of linkerity is this",
    "start": "1537600",
    "end": "1544400"
  },
  {
    "text": "system called tower which is really similar to finagle's services and so it's a service abstraction where there's",
    "start": "1544400",
    "end": "1550320"
  },
  {
    "text": "a request and a response and a set of you know layers or middlewares that'll let us",
    "start": "1550320",
    "end": "1556880"
  },
  {
    "text": "layer stack these things together so they can be used and i can write loosely coupled components and then bind",
    "start": "1556880",
    "end": "1564240"
  },
  {
    "text": "them together so here's an example from the linker d proxy this is an http client",
    "start": "1564240",
    "end": "1571760"
  },
  {
    "text": "and so what this is for every endpoint we're talking to we build one of these services and this",
    "start": "1571760",
    "end": "1576960"
  },
  {
    "text": "has an http client it has a reconnect layer it lets us do linkers tap feature and adds metrics",
    "start": "1576960",
    "end": "1583120"
  },
  {
    "text": "and all of these compo all of these features are are you know orthogonal they have no",
    "start": "1583120",
    "end": "1588640"
  },
  {
    "text": "dependencies on each other really um and so i can write all of",
    "start": "1588640",
    "end": "1594000"
  },
  {
    "text": "these separate modules that are easily tested or easily shared and reused without having to",
    "start": "1594000",
    "end": "1601679"
  },
  {
    "text": "couple them together this is a really great building block i also",
    "start": "1601679",
    "end": "1608240"
  },
  {
    "text": "should emphasize that a lot of the primitives we've developed for lingerie are freely available in the tower uh",
    "start": "1608240",
    "end": "1615600"
  },
  {
    "text": "library and framework um that so you can use for instance linkedin's load balancer",
    "start": "1615600",
    "end": "1621600"
  },
  {
    "text": "without having to uh pull and link you that's that's a you know the tower balance project or",
    "start": "1621600",
    "end": "1628159"
  },
  {
    "text": "crate is um something we've contributed back upstream",
    "start": "1628159",
    "end": "1633760"
  },
  {
    "text": "so this is a again a set of reusable components that you can use to build new systems",
    "start": "1633760",
    "end": "1641840"
  },
  {
    "text": "another library that we've been heavily involved with is something called tonic the tonic is a grpc binding for rust",
    "start": "1643679",
    "end": "1652080"
  },
  {
    "text": "again cup really bound up with tower and tokyo's async runtime async",
    "start": "1652080",
    "end": "1658080"
  },
  {
    "text": "networking tonic lets me write little grpc services",
    "start": "1658080",
    "end": "1663440"
  },
  {
    "text": "so here on the right this is a load testing service that i wrote",
    "start": "1663440",
    "end": "1668640"
  },
  {
    "text": "and we just have to implement you know we take a a grpc protobuf and we write the",
    "start": "1668960",
    "end": "1676240"
  },
  {
    "text": "function that generated by that api and now we have a network server",
    "start": "1676240",
    "end": "1681279"
  },
  {
    "text": "and so this makes it really easy to build microservices or little pieces of services in rust again with",
    "start": "1681279",
    "end": "1688480"
  },
  {
    "text": "tokyo's async runtime finally i i want to call out",
    "start": "1688480",
    "end": "1695520"
  },
  {
    "text": "another library which is newer in this ecosystem called kubar-s and kubr-s",
    "start": "1695520",
    "end": "1702080"
  },
  {
    "text": "is basically client go for rust but it's uh so what it gives us",
    "start": "1702080",
    "end": "1708960"
  },
  {
    "text": "is kubernetes api bindings and primitives that use the tokyo primitives",
    "start": "1708960",
    "end": "1717360"
  },
  {
    "text": "that use that can be merged easily with tonic drpc services or tower services",
    "start": "1717360",
    "end": "1724559"
  },
  {
    "text": "and so here is an example from a prototype i'm building which uh watches all pods in the cluster",
    "start": "1724559",
    "end": "1732000"
  },
  {
    "text": "and it indexes which ports are available on those pods so this is something i'm really excited",
    "start": "1732000",
    "end": "1738320"
  },
  {
    "text": "about because this means we may actually start being able to replace or as we add new",
    "start": "1738320",
    "end": "1744320"
  },
  {
    "text": "controllers in linguity we can start doing them in rust where several years ago this was totally not possible now we",
    "start": "1744320",
    "end": "1752240"
  },
  {
    "text": "have a rich ecosystem of projects around rust and around tokyo specifically",
    "start": "1752240",
    "end": "1757919"
  },
  {
    "text": "that we can use to stamp out new infrastructure code that is going to",
    "start": "1757919",
    "end": "1763039"
  },
  {
    "text": "be much safer that we're going to get more we'll be more productive writing and generally",
    "start": "1763039",
    "end": "1768799"
  },
  {
    "text": "have a much easier time about it so in summary cloud computing creates",
    "start": "1768799",
    "end": "1776640"
  },
  {
    "start": "1771000",
    "end": "1771000"
  },
  {
    "text": "new ubiquitous abstractions we no longer have to deal with managing hosts or",
    "start": "1776640",
    "end": "1781679"
  },
  {
    "text": "acquiring hardware in nearly the same way that we did a decade ago now we have kubernetes apis and",
    "start": "1781679",
    "end": "1789919"
  },
  {
    "text": "we have lots of glue beneath the application and we need that to work well we've all",
    "start": "1789919",
    "end": "1796640"
  },
  {
    "text": "become system programmers anyone who would have been in operations a decade ago is basically a systems programmer now",
    "start": "1796640",
    "end": "1803919"
  },
  {
    "text": "but scaling that out having to have you know an industry of people writing c would",
    "start": "1803919",
    "end": "1810960"
  },
  {
    "text": "not be great it hasn't been great we have security vulnerabilities we have safety issues and",
    "start": "1810960",
    "end": "1816320"
  },
  {
    "text": "we actually have you know c has a pretty steep learning and development curve and rust makes this way more accessible",
    "start": "1816320",
    "end": "1823039"
  },
  {
    "text": "and one of the things i'm most excited about in the rust ecosystem is the number of young engineers getting involved here",
    "start": "1823039",
    "end": "1830320"
  },
  {
    "text": "people in school or just out of school are really gravitating towards rust and i think that the industry is going",
    "start": "1830320",
    "end": "1836640"
  },
  {
    "text": "to be transformed by this we're going to have a much richer more reliable",
    "start": "1836640",
    "end": "1843200"
  },
  {
    "text": "systems ecosystem that's built on rust finally this wasn't possible a few years",
    "start": "1843200",
    "end": "1849200"
  },
  {
    "text": "ago there's been a tremendous amount of investment our team has invested heavily in rust",
    "start": "1849200",
    "end": "1854880"
  },
  {
    "text": "and in these ecosystem libraries folks at amazon and microsoft google",
    "start": "1854880",
    "end": "1862720"
  },
  {
    "text": "you name it uh have have been investing in rust and i think that this really paints to a future that is going",
    "start": "1862720",
    "end": "1869919"
  },
  {
    "text": "to be much safer more efficient better for the environment and more reliable",
    "start": "1869919",
    "end": "1877200"
  },
  {
    "text": "and so finally thanks for coming i hope this talk was useful i hope you enjoy the rest of the talks",
    "start": "1877600",
    "end": "1883120"
  },
  {
    "text": "today have a good one",
    "start": "1883120",
    "end": "1888000"
  }
]