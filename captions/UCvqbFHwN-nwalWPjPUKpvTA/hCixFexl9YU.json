[
  {
    "text": "but because this is the first talk this morning i would like to briefly cover what is ebpf for those of you who have",
    "start": "1040",
    "end": "7520"
  },
  {
    "text": "never heard about it or are curious and this is essentially your first touch point",
    "start": "7520",
    "end": "13200"
  },
  {
    "text": "i think many of us of you have may have seen a slight similar to this kind of ebpf being able to execute code",
    "start": "13200",
    "end": "20720"
  },
  {
    "text": "in the kernel when some event happens and one very common one is when a system",
    "start": "20720",
    "end": "26080"
  },
  {
    "text": "call is happening and then instead of the system call being performed automatically by the kernel we can execute some code such as shown here",
    "start": "26080",
    "end": "33600"
  },
  {
    "text": "this is a common example on how some of the system call tracers would generate an event in the kernel to extract",
    "start": "33600",
    "end": "40160"
  },
  {
    "text": "visibility so if you run bcc or if you're on tracy if you're on falco they're using similar techniques like",
    "start": "40160",
    "end": "46399"
  },
  {
    "text": "this to run a piece of code in the kernel to extract visibility",
    "start": "46399",
    "end": "52160"
  },
  {
    "text": "but that sounds very very abstract let's let's take it a bit back and actually look at it a bit more broadly",
    "start": "52160",
    "end": "59199"
  },
  {
    "text": "i think what makes most sense to me and what is the easiest angle to understand ebpf is",
    "start": "59199",
    "end": "65198"
  },
  {
    "text": "that ebpf is to the kernel what javascript is to the browser what i",
    "start": "65199",
    "end": "72640"
  },
  {
    "text": "mean by that is when you think back 20 years ago many of us probably remember",
    "start": "72640",
    "end": "78960"
  },
  {
    "text": "we had to upgrade our browsers our netscape navigator our internet explorers whatever browser we're using",
    "start": "78960",
    "end": "85600"
  },
  {
    "text": "opera whatever to view certain websites and if you often see this message oh you cannot view this website because your",
    "start": "85600",
    "end": "91840"
  },
  {
    "text": "browser is trolled that has disappeared because of javascript because javascript",
    "start": "91840",
    "end": "97119"
  },
  {
    "text": "and other programming languages that are able to run sandboxed in the browser made the browser programmable so",
    "start": "97119",
    "end": "104880"
  },
  {
    "text": "web developers could innovate and write applications without having to build something into",
    "start": "104880",
    "end": "111600"
  },
  {
    "text": "the browser first and all of a sudden we no longer need to upgrade the browsers constantly",
    "start": "111600",
    "end": "117840"
  },
  {
    "text": "this led to massive innovation most of us would have probably never guessed that",
    "start": "117840",
    "end": "123439"
  },
  {
    "text": "something as complex as an entire word processing tool microsoft word would get",
    "start": "123439",
    "end": "129039"
  },
  {
    "text": "potentially replaced by something that's running in a browser but it has happened and it has happened because of this",
    "start": "129039",
    "end": "134080"
  },
  {
    "text": "programmability it has happened because web application engineers can safely innovate as part of the browser ebpf is",
    "start": "134080",
    "end": "141599"
  },
  {
    "text": "exactly the same for the linux kernel and hence it will lead to",
    "start": "141599",
    "end": "147120"
  },
  {
    "text": "a very similar wave of innovation and that's what we're exactly seeing on going on right now we're seeing a",
    "start": "147120",
    "end": "152319"
  },
  {
    "text": "massive innovation of networking security observability service smash",
    "start": "152319",
    "end": "157680"
  },
  {
    "text": "performance troubleshooting all of these fields are going through a massive leap of innovation because of this",
    "start": "157680",
    "end": "163280"
  },
  {
    "text": "programmability i was a kernel developer for about 20 years and this was a massive problem and",
    "start": "163280",
    "end": "169440"
  },
  {
    "text": "it shows the the reason why innovation was so challenging in in the",
    "start": "169440",
    "end": "174800"
  },
  {
    "text": "in the corner was often in this situation that somebody would ask me a question can i get this into",
    "start": "174800",
    "end": "180319"
  },
  {
    "text": "the kernel we need this feature i need to observe my app better i need this and yes that's cool and we did it and we",
    "start": "180319",
    "end": "186319"
  },
  {
    "text": "added it to the kernel but it took years and years and years for those kernel versions to make it into the hands of",
    "start": "186319",
    "end": "191360"
  },
  {
    "text": "users in particular if users were using enterprise linux distributions they would lag behind many years this made it",
    "start": "191360",
    "end": "197920"
  },
  {
    "text": "essentially impossible to innovate in the kernel because you were lagging behind so much",
    "start": "197920",
    "end": "203760"
  },
  {
    "text": "because of the dynamic programmability of ebpf this is solved and all of a sudden we",
    "start": "203760",
    "end": "209599"
  },
  {
    "text": "can innovate and give new code give new functionality into the hands of end users",
    "start": "209599",
    "end": "215360"
  },
  {
    "text": "essentially on a daily basis very similar to how javascript has done this to the browser and this is leading to",
    "start": "215360",
    "end": "221440"
  },
  {
    "text": "this massive innovation in the kernel space that was not possible before",
    "start": "221440",
    "end": "227840"
  },
  {
    "text": "some of you may have seen the ebpf landscape that is available on ebpf.io",
    "start": "228159",
    "end": "233680"
  },
  {
    "text": "for today i've created um a new landscape it's not an official one that's just",
    "start": "233680",
    "end": "239280"
  },
  {
    "text": "mine i've just put it together for educational purposes here with a a very",
    "start": "239280",
    "end": "245200"
  },
  {
    "text": "strict cloud native focus so i think not all of the projects that",
    "start": "245200",
    "end": "250319"
  },
  {
    "text": "you will find on ebpf.org are in here but the ones that are found are very compelling for a for a cloud native",
    "start": "250319",
    "end": "256639"
  },
  {
    "text": "world on the lower level we have like the platform layer layer we can see that ebpf can run on windows and on linux",
    "start": "256639",
    "end": "264639"
  },
  {
    "text": "then we have the sdk and packaging layer this is the layer that makes consuming ebpf easier because ebpf itself is very",
    "start": "264639",
    "end": "271840"
  },
  {
    "text": "low level byte code kernel level so this this middle layer makes it easier to actually use ebpf there's a variety of",
    "start": "271840",
    "end": "279600"
  },
  {
    "text": "programming or language bindings go rust c plus plus bumblebee making packets easier and then",
    "start": "279600",
    "end": "287440"
  },
  {
    "text": "application observability networking and service mesh and security and you can see a variety of projects some of them",
    "start": "287440",
    "end": "293759"
  },
  {
    "text": "are in the cloud id foundation spxe psyllium chachugon falco",
    "start": "293759",
    "end": "299440"
  },
  {
    "text": "we'll talk about chatagon in a little bit for many of you probably hear about it for the first time",
    "start": "299440",
    "end": "305520"
  },
  {
    "text": "requirement not all ebpf projects need to be in the cloud native foundation in order to be useful of course",
    "start": "305520",
    "end": "311759"
  },
  {
    "text": "if you look into that close into that lower level a bit more because that's what most people regard as ebpf it's",
    "start": "311759",
    "end": "317600"
  },
  {
    "text": "this runtime so how does that run time actually look like um i only have one slide here kind of on the technical side",
    "start": "317600",
    "end": "326000"
  },
  {
    "text": "this doesn't look exactly the same for all operating systems so ebpf for windows looks a little bit different but",
    "start": "326000",
    "end": "332320"
  },
  {
    "text": "the concepts are the same on the level essentially a set of",
    "start": "332320",
    "end": "337759"
  },
  {
    "text": "development tooling in this case i'm using clang as a way to",
    "start": "337759",
    "end": "344000"
  },
  {
    "text": "compile pseudo c code into ebpf bytecode but you could use another tool chain as well essentially what you",
    "start": "344000",
    "end": "350160"
  },
  {
    "text": "need is bytecode that you can then inject into the kernel you then use typically a library whether",
    "start": "350160",
    "end": "355600"
  },
  {
    "text": "it's lib ppf or go ppf or the rust or io or whatever it is to actually load the ebpf code into the",
    "start": "355600",
    "end": "362080"
  },
  {
    "text": "kernel with a system call so there's a specific ebpf system call the kernel will take that program run it through",
    "start": "362080",
    "end": "368319"
  },
  {
    "text": "the verifier determinate whether it is secure to run and if so give it to the just in time compiler compile it into",
    "start": "368319",
    "end": "375039"
  },
  {
    "text": "native ebpf code and load it into the specific hook that you have decided you",
    "start": "375039",
    "end": "380240"
  },
  {
    "text": "want to to run your your ebpf code on for example execute this program when a",
    "start": "380240",
    "end": "385280"
  },
  {
    "text": "certain system call is being made or when this network packet is being processed or when new data is available",
    "start": "385280",
    "end": "390319"
  },
  {
    "text": "in the socket or when a tcp retransmission happens or when a disk is being accessed and so on",
    "start": "390319",
    "end": "396319"
  },
  {
    "text": "then we have ebpf maps these are data structures uh and a great way to extract visibility from kernel space into user",
    "start": "396319",
    "end": "403759"
  },
  {
    "text": "space so these are hash tables maps and so on",
    "start": "403759",
    "end": "408960"
  },
  {
    "text": "so to summarize kind of the ebp for the zbpf ebff gives us amazing programmability and is it's leading to",
    "start": "408960",
    "end": "415520"
  },
  {
    "text": "this innovation very similar to what javascript has done to the browser i think most of us see the excellent",
    "start": "415520",
    "end": "421360"
  },
  {
    "text": "visibility and control as a as a cornerstone or everything we can see a lot more things with ebpf we have",
    "start": "421360",
    "end": "428240"
  },
  {
    "text": "deeper visibility but we also have a lot more control and we'll see a couple of examples of this control i mean we have control into",
    "start": "428240",
    "end": "434880"
  },
  {
    "text": "lower levels of the operating system but also inside of applications and i think what's also very fascinating is the",
    "start": "434880",
    "end": "441199"
  },
  {
    "text": "massively low overhead of ebpf allowing us to do observability where it was not",
    "start": "441199",
    "end": "446400"
  },
  {
    "text": "possible before because of because of overhead new networking use cases service mesh use cases and so on",
    "start": "446400",
    "end": "454800"
  },
  {
    "text": "so a bit of ebpf history before we go into the future",
    "start": "454800",
    "end": "460160"
  },
  {
    "text": "ebpf started in same year as kubernetes this was the the year when the first kernel patch was",
    "start": "461759",
    "end": "468639"
  },
  {
    "text": "merged into the kernel a year later the llvm compiler",
    "start": "468639",
    "end": "475759"
  },
  {
    "text": "received its ebpf backend back in these days ebpf was really really really low level so it was only meant for kernel",
    "start": "475759",
    "end": "482479"
  },
  {
    "text": "engineers kernel kernel developers so having an llbm background oh we can we can write sudo c code that's not that's",
    "start": "482479",
    "end": "489039"
  },
  {
    "text": "great that's a high level language like for kernel developers that's a high level language also this cls bpf was",
    "start": "489039",
    "end": "495199"
  },
  {
    "text": "merged this was the ability to run bpf programs for network packets",
    "start": "495199",
    "end": "501039"
  },
  {
    "text": "for example psyllium and others are using this hook today and also bcc and bcc was the first higher level end user",
    "start": "501039",
    "end": "508240"
  },
  {
    "text": "project around ebpf it was a set of python based scripts that would allow you to introspect",
    "start": "508240",
    "end": "514399"
  },
  {
    "text": "system applications and and so on and today even today bcc is massively used",
    "start": "514399",
    "end": "519760"
  },
  {
    "text": "it has a wide variety of use cases that it can cover a year later xdp was merged xdp is the",
    "start": "519760",
    "end": "527440"
  },
  {
    "text": "high performance networking layer of ppf allows ppf to compete with technologies like dpdk user space networking for",
    "start": "527440",
    "end": "534480"
  },
  {
    "text": "example and psyllium was it was announced so in 2016 we announced psyllium",
    "start": "534480",
    "end": "540160"
  },
  {
    "text": "a year later brandon coins brandon greg some of you may have heard him talk on ebpf",
    "start": "540160",
    "end": "545839"
  },
  {
    "text": "is a massive figure involved in the evolution of ebpf coin to term linux bpf superpowers and",
    "start": "545839",
    "end": "552399"
  },
  {
    "text": "it was very very fitting like bpf is a super power in the operating system that",
    "start": "552399",
    "end": "557920"
  },
  {
    "text": "allows us to do things that were not possible before also same year facebook came out and",
    "start": "557920",
    "end": "563680"
  },
  {
    "text": "basically said hey world this is how we do load balancing now and it's 10 times",
    "start": "563680",
    "end": "568959"
  },
  {
    "text": "faster as ipvf ipvs and by the way we're using vpf and the world was like",
    "start": "568959",
    "end": "574880"
  },
  {
    "text": "wow how did that happen like 10x 10x improvements are very rare like for",
    "start": "574880",
    "end": "581760"
  },
  {
    "text": "mature production in production in infrastructure this code is known as catron today it's available",
    "start": "581760",
    "end": "588720"
  },
  {
    "text": "open source also cloudflare started migrating um all of their ddos use cases",
    "start": "588720",
    "end": "594160"
  },
  {
    "text": "that these ddos codes over to bpf and i think in this year it became clear okay ebpf is going to be a thing",
    "start": "594160",
    "end": "601360"
  },
  {
    "text": "like there's massive players betting on ebpf ebpf is going to be a technology that",
    "start": "601360",
    "end": "607279"
  },
  {
    "text": "changes the world bpf trace was announced 2019 as a replacement or as an evolution of",
    "start": "607279",
    "end": "613839"
  },
  {
    "text": "bcc a couple of silly releases with ibv land support encryption cue proxy",
    "start": "613839",
    "end": "618959"
  },
  {
    "text": "replacement and so on and so on and also hubble hubble is the observability layer",
    "start": "618959",
    "end": "625040"
  },
  {
    "text": "of cilium that gives us network uh network visibility metrics and so on and",
    "start": "625040",
    "end": "630880"
  },
  {
    "text": "also brandon gregg published bpf performance tools probably the book today uh the most",
    "start": "630880",
    "end": "637279"
  },
  {
    "text": "detailed book on ebpf that is available today 2020 psyllium 1718 and then i think",
    "start": "637279",
    "end": "645120"
  },
  {
    "text": "another massive milestone google went out and said you're going to change all of gk networking and it's",
    "start": "645120",
    "end": "650480"
  },
  {
    "text": "going to be ebpf based and we're going to bait it on top of psyllium you may have seen to you may have seen",
    "start": "650480",
    "end": "656720"
  },
  {
    "text": "data plane we too in gk that's zillion-based it's ebpf-based um i think",
    "start": "656720",
    "end": "662560"
  },
  {
    "text": "major milestone for ebpf for like a major cloud provider is is making their",
    "start": "662560",
    "end": "667600"
  },
  {
    "text": "products based on ebpf so in one nine with maglev low balancing support and the first acquisitions happened so 2020",
    "start": "667600",
    "end": "674800"
  },
  {
    "text": "uh new relic acquired pixie in the observability space and pixi is today a sandbox project in the cncf",
    "start": "674800",
    "end": "683120"
  },
  {
    "text": "2021 amazon is following google's footsteps announced that for eks anywhere they're",
    "start": "683120",
    "end": "689680"
  },
  {
    "text": "going to use ebpf and again psyllium psyllium makes it into the cncf",
    "start": "689680",
    "end": "696240"
  },
  {
    "text": "it lives today in the cntf as an incubation level project i think this was the second ebpf summit",
    "start": "696240",
    "end": "701920"
  },
  {
    "text": "that we had completely overrun with over 3000 attendees virtually a massive event",
    "start": "701920",
    "end": "707760"
  },
  {
    "text": "still in 111 with topology routing bgp open telemetry support and so on like",
    "start": "707760",
    "end": "713600"
  },
  {
    "text": "lots of innovation going on which leads us to this year and the year is not even that old yet but we already",
    "start": "713600",
    "end": "718959"
  },
  {
    "text": "have a couple of very new thoroughly items still in service mesh we announced this",
    "start": "718959",
    "end": "724240"
  },
  {
    "text": "year and tetragon i will have a slide later on on this we're announcing this week an ebpf",
    "start": "724240",
    "end": "730079"
  },
  {
    "text": "summit 2022 will happen in the in september virtually again just the cfp",
    "start": "730079",
    "end": "736000"
  },
  {
    "text": "will open shortly that was a brief history and if you look back kind of it started in the same year",
    "start": "736000",
    "end": "742560"
  },
  {
    "text": "as kubernetes and ebpf has gone come a very very very long way and we're not",
    "start": "742560",
    "end": "748720"
  },
  {
    "text": "only seeing the big hyperscalers google facebook netflix and so on leverage ebpf",
    "start": "748720",
    "end": "754320"
  },
  {
    "text": "internally today ebpf is used in enterprises end users use ebpf directly",
    "start": "754320",
    "end": "760079"
  },
  {
    "text": "and there is a wide set of end user projects that are available if you look back into the landscape",
    "start": "760079",
    "end": "766639"
  },
  {
    "text": "let's look a little bit into the future as well like where will ebpf go like it",
    "start": "766639",
    "end": "772160"
  },
  {
    "text": "has already taken massive space observability networking security most",
    "start": "772160",
    "end": "778880"
  },
  {
    "text": "vendors have some evpf strategy now where will it where will it go from here",
    "start": "778880",
    "end": "784399"
  },
  {
    "text": "i think a big part will be service mesh um and i think",
    "start": "784399",
    "end": "790880"
  },
  {
    "text": "the appeal here is very very interesting service mesh is for those who have never",
    "start": "790880",
    "end": "796800"
  },
  {
    "text": "heard about service mesh service mesh is a concept where essentially code that used to live in applications themselves",
    "start": "796800",
    "end": "803760"
  },
  {
    "text": "to secure communication to perform client-side load balancing to gain",
    "start": "803760",
    "end": "808880"
  },
  {
    "text": "introspection um to do retries to move that code out of the",
    "start": "808880",
    "end": "813920"
  },
  {
    "text": "applications themselves and move it to somewhat transparent so that code doesn't have to be written for",
    "start": "813920",
    "end": "819519"
  },
  {
    "text": "each application separately and the most appealing first way of doing this was to run a so-called",
    "start": "819519",
    "end": "825839"
  },
  {
    "text": "sidecar and run this code in a proxy so the same proxy could be placed in front of every application",
    "start": "825839",
    "end": "832320"
  },
  {
    "text": "and run this code for example perform mtls or retries or layer 7 load balancing retrieve telemetry and so on",
    "start": "832320",
    "end": "840959"
  },
  {
    "text": "but if you look at service mesh and the desire for it it's actually close to tcp",
    "start": "840959",
    "end": "846560"
  },
  {
    "text": "or ipsec it's like we want visibility we want security we want connectivity it's",
    "start": "846560",
    "end": "851760"
  },
  {
    "text": "just a much better version of this so if we're talking about for example http",
    "start": "851760",
    "end": "856800"
  },
  {
    "text": "retries it's conceptually very similar to a tcp retry right we want reliable",
    "start": "856800",
    "end": "862399"
  },
  {
    "text": "consistent communication so why can't that layer why shouldn't that layer be",
    "start": "862399",
    "end": "867920"
  },
  {
    "text": "part of the operating system and be transparent to users if that's what all applications want why don't we move that",
    "start": "867920",
    "end": "874240"
  },
  {
    "text": "into the kernel and that's the focus that's the goal of the ebpf service mesh",
    "start": "874240",
    "end": "880320"
  },
  {
    "text": "so i think one way to look at this is not necessarily to think about that all the functionality that is currently done",
    "start": "880320",
    "end": "887519"
  },
  {
    "text": "by a proxy has to move into ebpf i think the concept should be move",
    "start": "887519",
    "end": "894000"
  },
  {
    "text": "some of it into the kernel actually integrates the proxy with ebpf",
    "start": "894000",
    "end": "900560"
  },
  {
    "text": "and collaborate i have one example here where it shows the impact on the lower left you can see",
    "start": "900560",
    "end": "907519"
  },
  {
    "text": "performance for http based visibility and the numbers shown here are latency",
    "start": "907519",
    "end": "913760"
  },
  {
    "text": "numbers so lower is better and you see a bar for no visibility you see a bar for ebpf based http parsing and a bar for a",
    "start": "913760",
    "end": "921920"
  },
  {
    "text": "site called or a proxy based http parsing and you can see the massive difference and i think",
    "start": "921920",
    "end": "927839"
  },
  {
    "text": "this is appealing the the complexity reduction is appealing so i think this will be a",
    "start": "927839",
    "end": "934480"
  },
  {
    "text": "major focus point of edpf overall observability i think we've already",
    "start": "934480",
    "end": "943120"
  },
  {
    "text": "seen a lot but we've only just begun",
    "start": "943120",
    "end": "948320"
  },
  {
    "text": "so there have been acquisitions there have been new tools announced but in terms of potential and what can be done",
    "start": "948320",
    "end": "954880"
  },
  {
    "text": "with ebpf we've just barely scratched the service i've listed several projects up here",
    "start": "954880",
    "end": "962560"
  },
  {
    "text": "that will provide observability that are providing observability i would say let's watch this space very very closely",
    "start": "962560",
    "end": "970160"
  },
  {
    "text": "not all of these tools provide the same visibility we have tools like pixi focusing really on application",
    "start": "970160",
    "end": "976320"
  },
  {
    "text": "monitoring and application visibility also for example performance troubleshooting where is my memory used",
    "start": "976320",
    "end": "982160"
  },
  {
    "text": "where does my where is my cpu being used up bcc it's a bit more focused on the",
    "start": "982160",
    "end": "987920"
  },
  {
    "text": "system level visibility what files are being opened uh what connections are happening uh who is doing right system",
    "start": "987920",
    "end": "994720"
  },
  {
    "text": "calls and so on cubecontrol trace is bringing bcc tooling to a kubernetes",
    "start": "994720",
    "end": "1000880"
  },
  {
    "text": "specific environment because bcc is not kubernetes aware apply tracing or function tracing",
    "start": "1000880",
    "end": "1007440"
  },
  {
    "text": "tetragon we'll talk in a bit inspector gadget similar to control trace making",
    "start": "1007440",
    "end": "1013600"
  },
  {
    "text": "visibility and ebpf very approachable on kubernetes parker i think similar to pixi",
    "start": "1013600",
    "end": "1020959"
  },
  {
    "text": "a new company created parka definitely something to watch out for tracy um from aqua system called tracing so i think",
    "start": "1020959",
    "end": "1027839"
  },
  {
    "text": "there will be more and more toolings here and i think we'll see this space explode in terms of observability that",
    "start": "1027839",
    "end": "1033438"
  },
  {
    "text": "is being provided with low overhead all right so to me what i'm most excited",
    "start": "1033439",
    "end": "1040400"
  },
  {
    "text": "about in terms of ebp future is actually the security angle because i feel we can",
    "start": "1040400",
    "end": "1046880"
  },
  {
    "text": "make together a huge leap forward in terms of security so you will see an announcement go out later today about",
    "start": "1046880",
    "end": "1053200"
  },
  {
    "text": "tetragon tetragon is the knowledge of the psyllium team of",
    "start": "1053200",
    "end": "1058720"
  },
  {
    "text": "like ebpf creators of salem craters apply that same knowledge to the to the runtime security and security",
    "start": "1058720",
    "end": "1065760"
  },
  {
    "text": "observability space so chaturgaon will provide both observability",
    "start": "1065760",
    "end": "1070799"
  },
  {
    "text": "and runtime enforcement it's part of the psyllium family so it's essentially part of the psyllium",
    "start": "1070799",
    "end": "1076799"
  },
  {
    "text": "governments which means we all automatically also contributed it to the cncf",
    "start": "1076799",
    "end": "1081919"
  },
  {
    "text": "and tetragon will be able to do two things really really really well one is to provide fantastic",
    "start": "1081919",
    "end": "1088400"
  },
  {
    "text": "observability across a lot of layers in the stack and i'm listing lots of examples here so",
    "start": "1088400",
    "end": "1095200"
  },
  {
    "text": "it runs as an agent in user space and it can connect to prometheus um to fluently grafana",
    "start": "1095200",
    "end": "1103840"
  },
  {
    "text": "elastic open telemetry and so on and it instruments the kernel to extract visibility",
    "start": "1103840",
    "end": "1109520"
  },
  {
    "text": "from very low levels like monitoring which disks are being accessed uh to network layers http parsing dns tls and",
    "start": "1109520",
    "end": "1116880"
  },
  {
    "text": "so on the name spacing like what sort of privilege escalations are going on",
    "start": "1116880",
    "end": "1122559"
  },
  {
    "text": "what processes are breaking out of their namespaces file access",
    "start": "1122559",
    "end": "1127679"
  },
  {
    "text": "tcp the whole stack for example tracing tcp sequence numbers obviously the",
    "start": "1127679",
    "end": "1132880"
  },
  {
    "text": "system call layer system calls that are being done process execution and all the way into the application bpf can do",
    "start": "1132880",
    "end": "1139440"
  },
  {
    "text": "function tracing bpf can generate stack traces bpf can even monitor the code",
    "start": "1139440",
    "end": "1144559"
  },
  {
    "text": "that is being executed so i think first of all the first kind of",
    "start": "1144559",
    "end": "1149679"
  },
  {
    "text": "part of tetragon is extracting all of that visibility in a very low overhead and make that available as locks as",
    "start": "1149679",
    "end": "1156320"
  },
  {
    "text": "metrics as events and as traces and the second and i think that's even more fascinating is that ebpf gives us a new",
    "start": "1156320",
    "end": "1164720"
  },
  {
    "text": "approach to doing security enforcement when we look at enforcement today",
    "start": "1164720",
    "end": "1170960"
  },
  {
    "text": "typically enforcement either happens strictly at the system call this would be something like seccomp",
    "start": "1170960",
    "end": "1177039"
  },
  {
    "text": "um where you are allowed to do this system called yes or no right like you this application can do this system",
    "start": "1177039",
    "end": "1183200"
  },
  {
    "text": "called yes or no and that's great it reduces the attack surface or we have security systems that for",
    "start": "1183200",
    "end": "1189280"
  },
  {
    "text": "example use ptrace or a kernel module extract visibility and then asynchronously kill the process if",
    "start": "1189280",
    "end": "1195919"
  },
  {
    "text": "something bad happens with tetragon we're using ebpf enforcement inside of the kernel",
    "start": "1195919",
    "end": "1202480"
  },
  {
    "text": "which means that instead of enforcing just at the system call level where we need to understand what is good and bad",
    "start": "1202480",
    "end": "1208320"
  },
  {
    "text": "we can monitor what are undesirable outcomes such as i don't want this container to ever",
    "start": "1208320",
    "end": "1215440"
  },
  {
    "text": "break its namespace boundary when that ever happens kill it immediately don't allow it to run",
    "start": "1215440",
    "end": "1220720"
  },
  {
    "text": "if you look at the upper right you see exactly this this a policy was loaded here that",
    "start": "1220720",
    "end": "1226400"
  },
  {
    "text": "essentially all it says is if any process matching these criteria for example",
    "start": "1226400",
    "end": "1232880"
  },
  {
    "text": "these power labels if they break out of the name space boundary immediately kill it",
    "start": "1232880",
    "end": "1238720"
  },
  {
    "text": "and it did and it did so without actually understanding that this was exploiting cv 2021 two two five five five it",
    "start": "1238720",
    "end": "1246320"
  },
  {
    "text": "doesn't actually need to understand the attack it can monitor the scope of the process changed and it",
    "start": "1246320",
    "end": "1253120"
  },
  {
    "text": "gains privileges or it changes namespace boundaries or breaking out of the container and i think that's very",
    "start": "1253120",
    "end": "1258720"
  },
  {
    "text": "fascinating and will lead us to a fundamentally better security posture and it's thanks to ebpf because all of a",
    "start": "1258720",
    "end": "1265280"
  },
  {
    "text": "sudden we can enforce in the kernel itself when it happens instead of just observing and then killing processes or",
    "start": "1265280",
    "end": "1272159"
  },
  {
    "text": "stopping processes or pausing containers from the outside what's even more fascinating is that is",
    "start": "1272159",
    "end": "1278400"
  },
  {
    "text": "extremely in line with bpf lsm so i'm eighty percent excited for try to go on",
    "start": "1278400",
    "end": "1284000"
  },
  {
    "text": "and twenty percent excited for lsm lsm bpf lsm is um the security modular framework inside of the",
    "start": "1284000",
    "end": "1290880"
  },
  {
    "text": "linux kernel it's giving an opportunity to load uh ppf programs at the variety of hook points as well and encode logic",
    "start": "1290880",
    "end": "1298320"
  },
  {
    "text": "in there the downside of ls and bpf is that it requires relatively recent kernels with five seven",
    "start": "1298320",
    "end": "1304480"
  },
  {
    "text": "tetragon runs on all the curls that's why i'm slightly more excited about tetragon but that's gonna need lsm bpf",
    "start": "1304480",
    "end": "1309919"
  },
  {
    "text": "can work together and ls and bpf can make tetragon even better",
    "start": "1309919",
    "end": "1315440"
  },
  {
    "text": "so with that i'm super excited for the future of ebpf um i think most of",
    "start": "1315840",
    "end": "1322720"
  },
  {
    "text": "the the real innovation is yet to happen even though we have done a lot of um in a lot of",
    "start": "1322720",
    "end": "1329760"
  },
  {
    "text": "innovation together and before i open it up for questions i do want to call out we have",
    "start": "1329760",
    "end": "1336880"
  },
  {
    "text": "formed an ebpf foundation together with many players in industry if you want to",
    "start": "1336880",
    "end": "1341919"
  },
  {
    "text": "collaborate uh feel free approach the linux foundation evpl foundation is up",
    "start": "1341919",
    "end": "1348000"
  },
  {
    "text": "for membership there's lots of great technical discussions lots of collaboration going on between all the",
    "start": "1348000",
    "end": "1354960"
  },
  {
    "text": "the players involved in ebpf space i think we have time for questions",
    "start": "1354960",
    "end": "1362880"
  },
  {
    "text": "questions we do have time for questions so does anyone have yes i have a hand raised",
    "start": "1363600",
    "end": "1369760"
  },
  {
    "text": "already thank you thomas i want to ask there",
    "start": "1369760",
    "end": "1376320"
  },
  {
    "text": "were many discussions about the kernel not just linux kernel regarding",
    "start": "1376320",
    "end": "1381919"
  },
  {
    "text": "design questions going from a monolithic kernel maybe to a kernel such as we know for example",
    "start": "1381919",
    "end": "1390000"
  },
  {
    "text": "from turbulence and tannenbaum so i wanted to ask do you see ebpf",
    "start": "1390000",
    "end": "1395760"
  },
  {
    "text": "basically redesigning the kernel from a monolithic towards a micro kernel and enabling all",
    "start": "1395760",
    "end": "1402240"
  },
  {
    "text": "those things to basically get out of the kernel code itself and be kind of like",
    "start": "1402240",
    "end": "1408799"
  },
  {
    "text": "plugins or add-ons yeah it's a fantastic question i think that's exactly what's happening but it's",
    "start": "1408799",
    "end": "1415280"
  },
  {
    "text": "obviously unrealistic to rewrite the entire linux kernel which means that",
    "start": "1415280",
    "end": "1420799"
  },
  {
    "text": "ebpf actually gives us a practical approach to achieving this we can replace certain parts of the kernel with",
    "start": "1420799",
    "end": "1426240"
  },
  {
    "text": "vbpf logic we can take side cuts or shortcuts we can make the kernel more modular",
    "start": "1426240",
    "end": "1433279"
  },
  {
    "text": "which is exactly what's happening it's even it's even going a step further some of the the big companies out there",
    "start": "1433279",
    "end": "1439520"
  },
  {
    "text": "who have owned kernel teams and who rely on writing kernel changes that need to go into a production kernel very quickly",
    "start": "1439520",
    "end": "1446880"
  },
  {
    "text": "they are essentially have started writing new code in ebpf instead of",
    "start": "1446880",
    "end": "1452159"
  },
  {
    "text": "natively because it's more secure because it is subject to the very fire and so so i think it's what you said is",
    "start": "1452159",
    "end": "1459039"
  },
  {
    "text": "absolutely correct i think we are moving to a more micro kernel based architecture but rewriting the kernel is",
    "start": "1459039",
    "end": "1466320"
  },
  {
    "text": "not an option so i think ebpf gives and it gives away to essentially",
    "start": "1466320",
    "end": "1471760"
  },
  {
    "text": "work around that and start to refactor without rewriting thank you thomas",
    "start": "1471760",
    "end": "1477919"
  },
  {
    "text": "thank you thomas do we have other questions oh yes we have another one here",
    "start": "1477919",
    "end": "1484880"
  },
  {
    "text": "thanks thomas so once we have celium installed in the system how is tetracon",
    "start": "1484880",
    "end": "1489919"
  },
  {
    "text": "different to hubble because even hubble provides observability right very good question yeah so hubble is strictly",
    "start": "1489919",
    "end": "1496240"
  },
  {
    "text": "dependent on psyllium so it's visibility based on the networking layer",
    "start": "1496240",
    "end": "1501520"
  },
  {
    "text": "of psyllium tetragon is a hundred percent independent it does not require psyllium in any way",
    "start": "1501520",
    "end": "1507679"
  },
  {
    "text": "it uses you don't need to run psyllium tetragon is is independent um and",
    "start": "1507679",
    "end": "1512720"
  },
  {
    "text": "obviously the focus point is a little bit different as well it's primarily about runtime but it can actually also",
    "start": "1512720",
    "end": "1518000"
  },
  {
    "text": "extract network visibility but it does that we're now parsing that or packets for example so difference essentially",
    "start": "1518000",
    "end": "1526480"
  },
  {
    "text": "more questions folks looking around",
    "start": "1526559",
    "end": "1532000"
  },
  {
    "text": "okay for some of you who were ebpf curious not the super deep",
    "start": "1532000",
    "end": "1537520"
  },
  {
    "text": "technical versions do any of you have questions",
    "start": "1537520",
    "end": "1542440"
  },
  {
    "text": "oh yes we have another fantastic",
    "start": "1543039",
    "end": "1547440"
  },
  {
    "text": "um hi i'm not so deep into the ebpf technology but what i'm interested in is",
    "start": "1549760",
    "end": "1556480"
  },
  {
    "text": "when i have observability for my program with ebpf tools that's absolutely great",
    "start": "1556480",
    "end": "1563200"
  },
  {
    "text": "can i have observability what resources cedpf program inside the kernel is using",
    "start": "1563200",
    "end": "1569760"
  },
  {
    "text": "and how much the overhead is yes that exists so there's actually ebpf",
    "start": "1569760",
    "end": "1575039"
  },
  {
    "text": "for ebpf there was a fantastic talk last in the last ebpf summit last summer",
    "start": "1575039",
    "end": "1580320"
  },
  {
    "text": "where you can use ebpf profiling technology to actually understand how much memory",
    "start": "1580320",
    "end": "1585919"
  },
  {
    "text": "which parts of the vpf program are consuming how much cpu and you can essentially create flame graphs of which",
    "start": "1585919",
    "end": "1592480"
  },
  {
    "text": "part of my epa program consume memory and so on and also i think in terms of other consumption",
    "start": "1592480",
    "end": "1598559"
  },
  {
    "text": "ebpf programs are subject to c groups and everything else just like any other process as well so the process that",
    "start": "1598559",
    "end": "1605919"
  },
  {
    "text": "installs the evpf programs they own the memory they own the cpu as well so",
    "start": "1605919",
    "end": "1611440"
  },
  {
    "text": "whatever c group that process is associated with we'll do",
    "start": "1611440",
    "end": "1616480"
  },
  {
    "text": "for it did that answer your question excellent other questions it is",
    "start": "1616480",
    "end": "1623360"
  },
  {
    "text": "seriously fine to ask questions that are early exploratory",
    "start": "1623360",
    "end": "1628799"
  },
  {
    "text": "hi er i was wondering if ebpf supports",
    "start": "1628799",
    "end": "1634799"
  },
  {
    "text": "hardware chipsets like cavium to do tls termination and things like that",
    "start": "1634799",
    "end": "1641039"
  },
  {
    "text": "so there is evpf offload to a variety of smartnic providers i'm assuming you're talking primarily networking use case",
    "start": "1641039",
    "end": "1647919"
  },
  {
    "text": "given the tls context it does exist i cannot tell you exactly which hardware vendors offer the tls offload part but",
    "start": "1647919",
    "end": "1656720"
  },
  {
    "text": "because ebpf is super generic for kernel level technology the offload is possible and",
    "start": "1656720",
    "end": "1662640"
  },
  {
    "text": "all the big smallnic providers have announced and will tell you that they offer ebpf offload but for more specific",
    "start": "1662640",
    "end": "1668640"
  },
  {
    "text": "questions you'll have to ask them okay others oh good i love that i asked",
    "start": "1668640",
    "end": "1675440"
  },
  {
    "text": "the the exploratory question questions hi",
    "start": "1675440",
    "end": "1681200"
  },
  {
    "text": "if i if i am new in in ebpf how do you recommend to get involved",
    "start": "1681200",
    "end": "1688080"
  },
  {
    "text": "excellent yes there is lots of opportunity right so i think we often quickly talk super low",
    "start": "1688080",
    "end": "1694399"
  },
  {
    "text": "level because it's super fascinating but it's actually a great opportunity to contribute to ebpf on all",
    "start": "1694399",
    "end": "1700480"
  },
  {
    "text": "levels i would start with go to ebpf.io that has i think first of all",
    "start": "1700480",
    "end": "1706559"
  },
  {
    "text": "material to get started it also has a link to a slack channel which has i",
    "start": "1706559",
    "end": "1711600"
  },
  {
    "text": "think by now over 8 000 people involved from all sorts of projects and you can quickly find",
    "start": "1711600",
    "end": "1716960"
  },
  {
    "text": "an ebpf project to collaborate on i would say if i go back",
    "start": "1716960",
    "end": "1722240"
  },
  {
    "text": "the best way to contribute to ebpf is essentially top down so i think in the",
    "start": "1722240",
    "end": "1728320"
  },
  {
    "text": "beginning collaboration on ebpf was all on this runtime kernel level and you have to be",
    "start": "1728320",
    "end": "1733360"
  },
  {
    "text": "a kernel developer to contribute to ebpf now you can essentially work on end user projects or you can work on one of the",
    "start": "1733360",
    "end": "1739440"
  },
  {
    "text": "libraries for example so let's say you are a go developer or you can do grost",
    "start": "1739440",
    "end": "1744960"
  },
  {
    "text": "all these projects they need help they need collaboration and you will learn about ebpf as you call as you contribute",
    "start": "1744960",
    "end": "1751200"
  },
  {
    "text": "to these to these libraries but i think even the understanding of that other language is sometimes and even more important than having in-depth ebpf",
    "start": "1751200",
    "end": "1757840"
  },
  {
    "text": "knowledge so that's a great way obviously also to work on uh projects like falco or psyllium or bcc and so on",
    "start": "1757840",
    "end": "1765039"
  },
  {
    "text": "that can also be a great way thanks thomas we've got at least one",
    "start": "1765039",
    "end": "1770159"
  },
  {
    "text": "more hey short question what could be a good way to introduce and advocate ebpf in the",
    "start": "1770159",
    "end": "1777440"
  },
  {
    "text": "company so not from a term i want to participate but they are different the the operation",
    "start": "1777440",
    "end": "1783200"
  },
  {
    "text": "folks and then the application developers they don't know anything and maybe you",
    "start": "1783200",
    "end": "1788320"
  },
  {
    "text": "have an idea i think yeah i think what usually works well is i think let's give a fantastic talk around what is",
    "start": "1788320",
    "end": "1794640"
  },
  {
    "text": "ebpf last year i think sharing that link is is an awesome first step because it gives this entry level what is evpf what",
    "start": "1794640",
    "end": "1801600"
  },
  {
    "text": "are the what are the benefits for everybody and then i think quickly going to",
    "start": "1801600",
    "end": "1806799"
  },
  {
    "text": "the projects that bring value so instead of talking like ebpf is fascinating on how it's being done but the actual value",
    "start": "1806799",
    "end": "1813679"
  },
  {
    "text": "is in the projects themselves so in what they provide oh here is how we could do like if you talk to your to your app",
    "start": "1813679",
    "end": "1820320"
  },
  {
    "text": "teams look at this demo on how you can figure out which parts of your app are using how much cpu and their eyes will lighten",
    "start": "1820320",
    "end": "1826480"
  },
  {
    "text": "up but when they see a flame graph for the first time they will say oh that's great i want that and then ebpf is more",
    "start": "1826480",
    "end": "1831600"
  },
  {
    "text": "of an implementation detail that allows this or hey we need to run networking at scale we can point them at psyllium or",
    "start": "1831600",
    "end": "1837919"
  },
  {
    "text": "you can say i want visibility you can try to tell them tracy falco whatever",
    "start": "1837919",
    "end": "1843200"
  },
  {
    "text": "tetragon that that's a great way to to to get the buy-in you don't need to",
    "start": "1843200",
    "end": "1848960"
  },
  {
    "text": "understand ebpf your company doesn't need to understand ebpf to make use to make use of it",
    "start": "1848960",
    "end": "1855840"
  },
  {
    "text": "we have more yeah yeah thank you uh actually i have a couple of questions",
    "start": "1855840",
    "end": "1861760"
  },
  {
    "text": "the first one is that like i had the feeling when you talked about the proxies in front of applications uh",
    "start": "1861760",
    "end": "1867279"
  },
  {
    "text": "i thought directly about sto and i thought is is going to be replaced entirely like",
    "start": "1867279",
    "end": "1873600"
  },
  {
    "text": "using some custom scripts with ebpf sdks like golang or rust this is the first",
    "start": "1873600",
    "end": "1879840"
  },
  {
    "text": "one and the second one perhaps i i will let you yeah let's do the first one and then you can ask the second one so",
    "start": "1879840",
    "end": "1885679"
  },
  {
    "text": "unfortunately i cannot cover everything in this talk around service mesh but in a nutshell we don't want to replace",
    "start": "1885679",
    "end": "1892399"
  },
  {
    "text": "service mesh control planes we are data path people",
    "start": "1892399",
    "end": "1898080"
  },
  {
    "text": "so and we also don't want to replace envoy there's actually we'll have a talk tomorrow at servicemeshcon if you're",
    "start": "1898080",
    "end": "1903120"
  },
  {
    "text": "there with a bit more details we want for users to be able to pick whatever control plane they want whether",
    "start": "1903120",
    "end": "1909360"
  },
  {
    "text": "this is istio whether it is smi whether this is just kubernetes oh i just want to use",
    "start": "1909360",
    "end": "1914640"
  },
  {
    "text": "ingress or gateway api doesn't matter and then we provide the most efficient data path with a combination of",
    "start": "1914640",
    "end": "1920880"
  },
  {
    "text": "envoy and ebpf together and move that into the kernel and essentially get rid of psi cards that's our motivation we're",
    "start": "1920880",
    "end": "1927919"
  },
  {
    "text": "not interested to create yet another set of crds that make the whole space more complicated yeah crystal clear",
    "start": "1927919",
    "end": "1936000"
  },
  {
    "text": "the second question is like i'm more like a devsecops and i'm so interested in these scripts",
    "start": "1936000",
    "end": "1943360"
  },
  {
    "text": "using rust and i was wondering how do you do the ci stuff like make it",
    "start": "1943360",
    "end": "1950159"
  },
  {
    "text": "deterministic like using ci pipelines and making sure that it",
    "start": "1950159",
    "end": "1955279"
  },
  {
    "text": "works with different kernels and so on is there some",
    "start": "1955279",
    "end": "1960799"
  },
  {
    "text": "good practices some recommendations to follow uh yeah yeah absolutely so i think",
    "start": "1960799",
    "end": "1966720"
  },
  {
    "text": "obviously all the projects all the bigger projects have these ci pipelines i think a good way for example psyllium",
    "start": "1966720",
    "end": "1972320"
  },
  {
    "text": "is doing this with github actions very successfully but actually one of the properties of",
    "start": "1972320",
    "end": "1977600"
  },
  {
    "text": "ebpf is that it's very portable it's much more portable than a linux kernel module",
    "start": "1977600",
    "end": "1983279"
  },
  {
    "text": "like the api that an ebpf program uses in the kernel is stable and with btf we can even access data",
    "start": "1983279",
    "end": "1991440"
  },
  {
    "text": "structures for observability in the kernel in a state manner as well and that actually reduces the need to test",
    "start": "1991440",
    "end": "1998399"
  },
  {
    "text": "every single kernel version and if something like corey like compile ones run anyway",
    "start": "1998399",
    "end": "2006360"
  }
]