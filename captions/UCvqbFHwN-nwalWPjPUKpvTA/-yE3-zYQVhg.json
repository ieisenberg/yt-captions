[
  {
    "text": "hi everybody so",
    "start": "0",
    "end": "5120"
  },
  {
    "text": "this is going to be a little different i'm not going to be presenting a brand new tool with uber capabilities and all",
    "start": "7839",
    "end": "14559"
  },
  {
    "text": "of that i'll focus more on building a custom tool",
    "start": "14559",
    "end": "19760"
  },
  {
    "text": "and today we'll be building a kubernetes tracer an abpf kubernetes tracer that will watch",
    "start": "19760",
    "end": "28560"
  },
  {
    "text": "file access basic but again the focus is on what it takes to build something",
    "start": "28560",
    "end": "36880"
  },
  {
    "text": "why do you want to do it why because well at some point you outgrow",
    "start": "39840",
    "end": "45440"
  },
  {
    "text": "the tools you start with and possibly you need custom business logic so what are those",
    "start": "45440",
    "end": "52320"
  },
  {
    "text": "tools bpf trace is probably the number one tool",
    "start": "52320",
    "end": "58079"
  },
  {
    "text": "you'll start with it provides a high level interface to eppf capabilities and",
    "start": "58079",
    "end": "64878"
  },
  {
    "text": "it's awesome it allows you to hook into a lot of",
    "start": "64879",
    "end": "70400"
  },
  {
    "text": "different parts of the kernel and the system in general but its functionality is limited there's",
    "start": "70720",
    "end": "77200"
  },
  {
    "text": "only so many functions they provide you and if you want something more you need to look",
    "start": "77200",
    "end": "83600"
  },
  {
    "text": "elsewhere so what about kubernetes so with kubernetes",
    "start": "83600",
    "end": "89520"
  },
  {
    "text": "you have cube control trace that pretty much provides an ability to run",
    "start": "89520",
    "end": "95920"
  },
  {
    "text": "bpf trays on kubernetes but actually one of the",
    "start": "95920",
    "end": "100960"
  },
  {
    "text": "newer capabilities in cube control trays is an ability to",
    "start": "100960",
    "end": "106079"
  },
  {
    "text": "run other things so in a way one potential",
    "start": "106079",
    "end": "111439"
  },
  {
    "text": "design option is to take cube control trace and create your own tracer and hook it",
    "start": "111439",
    "end": "117439"
  },
  {
    "text": "up together together so that that can be a shortcut if you're if you want to go that way",
    "start": "117439",
    "end": "124960"
  },
  {
    "text": "but before we look at the kubernetes side of things we'll take a look at the fundamentals and the",
    "start": "124960",
    "end": "132160"
  },
  {
    "text": "key ebpf concepts developers would care about",
    "start": "132160",
    "end": "137200"
  },
  {
    "text": "there's a couple of things you'll you'll want to explore when you're building",
    "start": "139360",
    "end": "144959"
  },
  {
    "text": "an application first where do you want to hook in you need to decide what part of the",
    "start": "145360",
    "end": "152080"
  },
  {
    "text": "system you need to hook in and how and that's covered by the different program types available in ebpf",
    "start": "152080",
    "end": "161120"
  },
  {
    "text": "then you also need to figure out the i o how are you going to talk to the kernel part of your application how you're",
    "start": "161120",
    "end": "168000"
  },
  {
    "text": "going to provide the config parameters how you're going to get the data out and all of that so usually when you",
    "start": "168000",
    "end": "174640"
  },
  {
    "text": "build an ebpf based application you have a kernel piece and a user piece",
    "start": "174640",
    "end": "180560"
  },
  {
    "text": "and then in the kernel you have a number of hooks",
    "start": "180560",
    "end": "185599"
  },
  {
    "text": "and you know for us it's going to be tracing hooks then you're going to have a map or a set",
    "start": "185599",
    "end": "191440"
  },
  {
    "text": "of maps where that you would use for input and output mostly configuration and basic stats on the way out and for",
    "start": "191440",
    "end": "199280"
  },
  {
    "text": "any kind of dynamic data you probably want to use perv buffers or ring buffers and ring buffers are kind of",
    "start": "199280",
    "end": "206720"
  },
  {
    "text": "perf buffers plus plus much nicer easier to use single queue",
    "start": "206720",
    "end": "213599"
  },
  {
    "text": "and all of that and then you might also if you're using newer versions you might also use global",
    "start": "213599",
    "end": "220319"
  },
  {
    "text": "variables for basic config parameters",
    "start": "220319",
    "end": "225519"
  },
  {
    "text": "so there are quite a few program types a",
    "start": "225760",
    "end": "232480"
  },
  {
    "text": "lot of different places where you can hook in and most of the program types uh they",
    "start": "232480",
    "end": "239040"
  },
  {
    "text": "fall into these um you know high level categories",
    "start": "239040",
    "end": "244720"
  },
  {
    "text": "and uh the most the biggest categories are tracing and networking",
    "start": "244720",
    "end": "252159"
  },
  {
    "text": "and today we'll focus on tracing but there's a lot you can do with networking and lots of great talks about that",
    "start": "252159",
    "end": "260000"
  },
  {
    "text": "so with tracing you um",
    "start": "260000",
    "end": "265040"
  },
  {
    "text": "you have a choice to make there are different program types to choose from and",
    "start": "265040",
    "end": "271440"
  },
  {
    "text": "they allow you to do static tracing or dynamic tracing so with static tracing",
    "start": "271440",
    "end": "277280"
  },
  {
    "text": "the nice thing about it you use stable hook points in the system",
    "start": "277280",
    "end": "284560"
  },
  {
    "text": "that will not change from one version of the system to another so that's great with dynamic",
    "start": "284560",
    "end": "291759"
  },
  {
    "text": "tracing you have more flexibility but it's more brittle",
    "start": "291759",
    "end": "297520"
  },
  {
    "text": "in the dynamic tracing bucket you have your k probes and k red probes or u probes",
    "start": "297520",
    "end": "303840"
  },
  {
    "text": "and your red probes and there you can hook any",
    "start": "303840",
    "end": "309120"
  },
  {
    "text": "function you want the problem there is that if all of a sudden you know the the function goes",
    "start": "309120",
    "end": "314639"
  },
  {
    "text": "away you're out of luck but with the static trace points there's a well-defined interface that's",
    "start": "314639",
    "end": "320880"
  },
  {
    "text": "stable so if you want a tracing app that's stable and it will run from one",
    "start": "320880",
    "end": "327520"
  },
  {
    "text": "version to another you definitely want to pick trace points and do static",
    "start": "327520",
    "end": "334080"
  },
  {
    "text": "tracing and that's gonna",
    "start": "334080",
    "end": "340639"
  },
  {
    "text": "simplify um a lot uh in in your application",
    "start": "340639",
    "end": "347840"
  },
  {
    "text": "and then with um you know with the trace points there are",
    "start": "347840",
    "end": "353360"
  },
  {
    "text": "a few different options for example in the kernel you have uh trace uh trace points and row trace",
    "start": "353360",
    "end": "359759"
  },
  {
    "text": "points and depending on you know how advanced your application is you might want to pick raw trace",
    "start": "359759",
    "end": "365280"
  },
  {
    "text": "points it's pretty much trace points but without",
    "start": "365280",
    "end": "369918"
  },
  {
    "text": "parameter pre-processing so if you need direct access to data",
    "start": "370639",
    "end": "375840"
  },
  {
    "text": "yeah you'll use those and tracy for example user uses a lot of those",
    "start": "375840",
    "end": "382240"
  },
  {
    "text": "so once you have a general idea of your system architecture you need to go",
    "start": "382240",
    "end": "389759"
  },
  {
    "text": "well you need to figure out what components and to use what kind of code and libraries",
    "start": "389759",
    "end": "396000"
  },
  {
    "text": "you'll want to use and this is actually one of the biggest challenges you'll have to deal with because there are a",
    "start": "396000",
    "end": "402240"
  },
  {
    "text": "lot of different libraries and lots of different languages and if you're new to ebpf",
    "start": "402240",
    "end": "409360"
  },
  {
    "text": "you're going to be lost you know so many things to choose from which one do you pick",
    "start": "409360",
    "end": "414960"
  },
  {
    "text": "and you don't want to invest in one thing and then hit a dead dead end",
    "start": "414960",
    "end": "421720"
  },
  {
    "text": "with cnc plus plus the most known library is pcc so",
    "start": "422240",
    "end": "427360"
  },
  {
    "text": "if you're not brand new to uh ebpf you know that it's it's probably the the",
    "start": "427360",
    "end": "432960"
  },
  {
    "text": "biggest [Music] library out there the biggest ecosystem",
    "start": "432960",
    "end": "438000"
  },
  {
    "text": "with lots of examples it's most known for its uh python wrapper so a lot of",
    "start": "438000",
    "end": "443840"
  },
  {
    "text": "talks this year previous years any talk about ebp almost",
    "start": "443840",
    "end": "449360"
  },
  {
    "text": "any talk about ebpf most likely included python snippets",
    "start": "449360",
    "end": "455759"
  },
  {
    "text": "the main gotcha with bcc and the wrappers around it is that you need to compile",
    "start": "455759",
    "end": "462880"
  },
  {
    "text": "the bpf program on the target machine and grant talked about that the the whole idea behind uh compiled ones and",
    "start": "462880",
    "end": "471440"
  },
  {
    "text": "running everywhere is is kind of the solution to the problem with the bcc",
    "start": "471440",
    "end": "476800"
  },
  {
    "text": "because you know when you distribute your application you don't want to bundle the compiler with it and you",
    "start": "476800",
    "end": "482639"
  },
  {
    "text": "don't want to deal with a brittle environment because you don't know what's going on so but lib bpf",
    "start": "482639",
    "end": "488879"
  },
  {
    "text": "you address that problem but with this new concept of compile wants run everywhere",
    "start": "488879",
    "end": "495919"
  },
  {
    "text": "it's it's low level it provides a lot of nice capabilities and the",
    "start": "495919",
    "end": "501759"
  },
  {
    "text": "the the skeleton it generates is actually super useful if",
    "start": "501759",
    "end": "507440"
  },
  {
    "text": "you you know even if you're not a c expert it makes it easier to work with",
    "start": "507440",
    "end": "512640"
  },
  {
    "text": "ebpf ebpf",
    "start": "512640",
    "end": "518800"
  },
  {
    "text": "pub is is a new library it was created for voice query it's a",
    "start": "518800",
    "end": "525279"
  },
  {
    "text": "simple wrapper for libby pf designed for tracing haven't used it",
    "start": "525279",
    "end": "531279"
  },
  {
    "text": "much but it looks interesting the code is pretty clean lots of go libraries the first one in the",
    "start": "531279",
    "end": "538560"
  },
  {
    "text": "original library is go bpf from io visor it's uh it's a wrapper for bcc and you",
    "start": "538560",
    "end": "546160"
  },
  {
    "text": "get the the same benefits most benefits of bcc and the uh you know the downsides",
    "start": "546160",
    "end": "552959"
  },
  {
    "text": "from it it's a good option for tracing and a lot of tracing tools",
    "start": "552959",
    "end": "559200"
  },
  {
    "text": "uh in the cloud native space have been built with this library",
    "start": "559200",
    "end": "564880"
  },
  {
    "text": "there's a library from celium it's a pure library pure gold library",
    "start": "565440",
    "end": "571760"
  },
  {
    "text": "it's interesting you know one of my personal uh complaints is that",
    "start": "571760",
    "end": "577040"
  },
  {
    "text": "it tried to invent its own terminology collections specs",
    "start": "577040",
    "end": "583920"
  },
  {
    "text": "i don't know it's it's confusing there's enough confusing stuff there but ebpf any more",
    "start": "583920",
    "end": "590880"
  },
  {
    "text": "confusing stuff is going to make things more complicated but one of the nice features there is",
    "start": "590880",
    "end": "597440"
  },
  {
    "text": "the bpf2go module so it allows you to embed",
    "start": "597440",
    "end": "602839"
  },
  {
    "text": "the ebpf program compiled ebpf program code into your go code and it provides a",
    "start": "602839",
    "end": "609839"
  },
  {
    "text": "nice wrapper to load it and to work with that and they're also working on the compile",
    "start": "609839",
    "end": "615040"
  },
  {
    "text": "once run everywhere support they they support a lot of it already and i've seen",
    "start": "615040",
    "end": "621040"
  },
  {
    "text": "samples but they're almost there",
    "start": "621040",
    "end": "625839"
  },
  {
    "text": "there's a library from dropbox it's pretty nice much nicer than",
    "start": "626240",
    "end": "631920"
  },
  {
    "text": "the serium library in terms of its structure and how easy it is to understand unfortunately it doesn't",
    "start": "631920",
    "end": "637839"
  },
  {
    "text": "support enough program types so if you want to build a",
    "start": "637839",
    "end": "643440"
  },
  {
    "text": "tracing application using trace points you're out of luck there's a library from",
    "start": "643440",
    "end": "650000"
  },
  {
    "text": "aqua libby pfgo and tracy is using it and this is actually one of the libraries",
    "start": "650000",
    "end": "656560"
  },
  {
    "text": "we'll be using today it's nice it's a thin wrapper",
    "start": "656560",
    "end": "661600"
  },
  {
    "text": "it exposes a lot of capabilities in terms of what you can attach i was",
    "start": "661600",
    "end": "667440"
  },
  {
    "text": "surprised to see an ability to attach traffic control",
    "start": "667440",
    "end": "673440"
  },
  {
    "text": "that's actually not something you get with a lot of libraries",
    "start": "673440",
    "end": "678560"
  },
  {
    "text": "one thing i wish it had was an ability to auto attach or default attach",
    "start": "678560",
    "end": "683600"
  },
  {
    "text": "programs you kind of need to explicitly attach the program that",
    "start": "683600",
    "end": "688880"
  },
  {
    "text": "you defined and we'll see what it looks like in the code",
    "start": "688880",
    "end": "694079"
  },
  {
    "text": "with python the the bcc wrapper is most known",
    "start": "694079",
    "end": "699839"
  },
  {
    "text": "to anybody out there working with bcc nice for prototyping on your local",
    "start": "699839",
    "end": "707200"
  },
  {
    "text": "machine that's probably the first thing i would do easy",
    "start": "707200",
    "end": "712320"
  },
  {
    "text": "i like pi ebpf because it tried to introduce this idea of",
    "start": "712320",
    "end": "717680"
  },
  {
    "text": "python only bpf experience where you don't need to write c code",
    "start": "717680",
    "end": "724079"
  },
  {
    "text": "it needs more attention it needs updates",
    "start": "724079",
    "end": "729760"
  },
  {
    "text": "with rust there are quite a few libraries there's a a lightweight wrapper",
    "start": "729760",
    "end": "736399"
  },
  {
    "text": "libby pfrs it's pretty much the official wrapper if you look at the",
    "start": "736399",
    "end": "741440"
  },
  {
    "text": "[Music] the libby pf bootstrap repo you'll see rust examples and i",
    "start": "741440",
    "end": "747440"
  },
  {
    "text": "think that's the library they use there red bpf was one of the original",
    "start": "747440",
    "end": "754240"
  },
  {
    "text": "libpf wrappers it has a number of other capabilities and",
    "start": "754240",
    "end": "759760"
  },
  {
    "text": "the most exciting rust library is aya and the author of aya at least one of",
    "start": "759760",
    "end": "765519"
  },
  {
    "text": "the primary authors used to work on red bpf as well it's pure it's",
    "start": "765519",
    "end": "773120"
  },
  {
    "text": "pure rust including the bpf program code",
    "start": "773120",
    "end": "779519"
  },
  {
    "text": "so it means that you don't need to write any c code and if you're a rust person",
    "start": "779519",
    "end": "784639"
  },
  {
    "text": "it's it's super cool it's still a little early the tooling ecosystem looks promising",
    "start": "784639",
    "end": "791040"
  },
  {
    "text": "um yeah a little tough i have a few samples to show there there are a few other",
    "start": "791040",
    "end": "797120"
  },
  {
    "text": "libraries but they're mostly bcc rappers the lua rapper is the",
    "start": "797120",
    "end": "802160"
  },
  {
    "text": "official wrapper now that we looked at a few fundamentals in the libraries we can",
    "start": "802160",
    "end": "811040"
  },
  {
    "text": "we can take a look at the kubernetes side of things and the first thing uh you probably want to",
    "start": "812000",
    "end": "818959"
  },
  {
    "text": "figure out is the cubecontrol plug-in so for the kubernetes side of things you'll",
    "start": "818959",
    "end": "825120"
  },
  {
    "text": "need to have two parts the uh the plug-in technically you can work around that with uh and just use cubecontrol",
    "start": "825120",
    "end": "834079"
  },
  {
    "text": "and and manually set up resources but it's nice that's what",
    "start": "834079",
    "end": "839519"
  },
  {
    "text": "cubecontrol trace does and then you also need to figure out uh the the the part that you run in the",
    "start": "839519",
    "end": "846959"
  },
  {
    "text": "cluster so with the but the cubecontrol plugins",
    "start": "846959",
    "end": "852320"
  },
  {
    "text": "technically you don't need any libraries uh you don't actually need any programming language to create a",
    "start": "852320",
    "end": "859040"
  },
  {
    "text": "plugin you can create a simple shell script put it in one of the bin folders and it will be picked up as",
    "start": "859040",
    "end": "865839"
  },
  {
    "text": "long as it starts with cube ctl dash and your plugin name it will be picked",
    "start": "865839",
    "end": "871600"
  },
  {
    "text": "up and you can use libraries if you want to",
    "start": "871600",
    "end": "878639"
  },
  {
    "text": "there's a there's a nice helper library for go cli runtime",
    "start": "878639",
    "end": "885519"
  },
  {
    "text": "that's what cubecontrol uses so you know internally i think it was extracted from it i",
    "start": "885519",
    "end": "891920"
  },
  {
    "text": "didn't find it super useful because i i don't use cobra for the cli",
    "start": "891920",
    "end": "898480"
  },
  {
    "text": "options and a lot of the you know helpers are around that but the client configuration helpers",
    "start": "898480",
    "end": "905920"
  },
  {
    "text": "they're actually nice and then with the tube control plug-in you also need to figure out how you'll",
    "start": "905920",
    "end": "912720"
  },
  {
    "text": "interact with the what kubernetes what client library you you'll want to use and technically",
    "start": "912720",
    "end": "920000"
  },
  {
    "text": "the the language you use for the cubecontrol plugin",
    "start": "920000",
    "end": "925120"
  },
  {
    "text": "and the language you use for the tracing engine they don't need to be the same so they can you know the the cube",
    "start": "925120",
    "end": "931839"
  },
  {
    "text": "control plugin could be go the the engine could be c",
    "start": "931839",
    "end": "938560"
  },
  {
    "text": "but there are a few options there's obviously the official client go library",
    "start": "938560",
    "end": "944079"
  },
  {
    "text": "and there's a an official python library it has a lot of examples",
    "start": "944079",
    "end": "950560"
  },
  {
    "text": "uh pretty nice there is an an unofficial rust library",
    "start": "950560",
    "end": "956079"
  },
  {
    "text": "cube rs also nice probably has the most examples i've seen",
    "start": "956079",
    "end": "961279"
  },
  {
    "text": "today i'm not going to show examples of in each language possible language",
    "start": "961279",
    "end": "968079"
  },
  {
    "text": "but uh it's it's nice to know that there are options there are a number of options for other languages but",
    "start": "968079",
    "end": "975759"
  },
  {
    "text": "yeah i feel free to explore i i'd stick with those three so once you figure out how you're going",
    "start": "975759",
    "end": "982000"
  },
  {
    "text": "to build your cubecontrol plugin and how you're going to talk to the kubernetes cluster",
    "start": "982000",
    "end": "987600"
  },
  {
    "text": "you'll need to figure out how you'll run the uh tracer application",
    "start": "987600",
    "end": "992880"
  },
  {
    "text": "in in kubernetes there are a few options the two major options are using jobs and",
    "start": "992880",
    "end": "1000880"
  },
  {
    "text": "demon sets jobs is what cubecontrol trace uses so when you want to run",
    "start": "1000880",
    "end": "1007680"
  },
  {
    "text": "cubecontrol trace when you type cube control trace run",
    "start": "1007680",
    "end": "1013040"
  },
  {
    "text": "something something something the the keep control plugin",
    "start": "1013040",
    "end": "1019279"
  },
  {
    "text": "will will schedule a job on demand",
    "start": "1019279",
    "end": "1025038"
  },
  {
    "text": "and it will uh figure out where to run it and and then uh",
    "start": "1025039",
    "end": "1031520"
  },
  {
    "text": "the uh the bpf trace or the other tracer will run on the selected uh nodes where",
    "start": "1031520",
    "end": "1037199"
  },
  {
    "text": "the job is running so when but when you're using jobs you need to figure out",
    "start": "1037199",
    "end": "1043438"
  },
  {
    "text": "how to where to run the jobs because if you need to create",
    "start": "1043439",
    "end": "1048640"
  },
  {
    "text": "an application in a certain pod you need to make sure that the job runs there there are a few options",
    "start": "1048640",
    "end": "1055440"
  },
  {
    "text": "available there the most basic one is to set the node name in the pod spec but",
    "start": "1055440",
    "end": "1061039"
  },
  {
    "text": "it's brittle and it's not recommended the next best option is to use node selectors",
    "start": "1061039",
    "end": "1066799"
  },
  {
    "text": "and that's pretty much the most basic option that's uh that you can use if you don't need any",
    "start": "1066799",
    "end": "1073600"
  },
  {
    "text": "kind of fancy way to select the nodes where you want to run the job that's",
    "start": "1073600",
    "end": "1079679"
  },
  {
    "text": "that would be the way to do it and the last one the last option is to use node affinity",
    "start": "1079679",
    "end": "1085600"
  },
  {
    "text": "but node affinity provides more advanced node selection",
    "start": "1085600",
    "end": "1091120"
  },
  {
    "text": "capabilities and this is i think that that's what uh",
    "start": "1091120",
    "end": "1097840"
  },
  {
    "text": "cube control trace uses internally um node affinity the other",
    "start": "1097840",
    "end": "1102960"
  },
  {
    "text": "option to use is demon sets and it's actually uh the option that a number of",
    "start": "1102960",
    "end": "1108480"
  },
  {
    "text": "other tools use the the trade-off there is that with with jobs you get uh tracing",
    "start": "1108480",
    "end": "1116880"
  },
  {
    "text": "on demand so if something happens and then you decide to run cube control trace",
    "start": "1116880",
    "end": "1122960"
  },
  {
    "text": "and it's nice on one hand on the other hand it's you know it it might have gaps because",
    "start": "1122960",
    "end": "1130320"
  },
  {
    "text": "by the time something happens and you run cube control trace with a job",
    "start": "1130320",
    "end": "1136160"
  },
  {
    "text": "what you need is already gone for example if you need to trace how an application binds to a port",
    "start": "1136160",
    "end": "1143600"
  },
  {
    "text": "using a job isn't really a good design there because by the time you decide that hey i want to run uh cubecontrol",
    "start": "1143600",
    "end": "1151200"
  },
  {
    "text": "trace uh the application already called the buying call and all of that so that's",
    "start": "1151200",
    "end": "1156640"
  },
  {
    "text": "when demon sets are nice uh kubernetes takes care of running your",
    "start": "1156640",
    "end": "1162240"
  },
  {
    "text": "pod on every machine the only got you there is that it's on you",
    "start": "1162240",
    "end": "1167600"
  },
  {
    "text": "to figure out to keep track of the containers that you want to",
    "start": "1167600",
    "end": "1173039"
  },
  {
    "text": "track and tools like inspector gadget have a number of tricks uh to detect",
    "start": "1173039",
    "end": "1179039"
  },
  {
    "text": "that for example with cryo they use pre-start hooks so they get notified when",
    "start": "1179039",
    "end": "1186240"
  },
  {
    "text": "a container is created but it's not running and then they can configure their gadgets their tracers to",
    "start": "1186240",
    "end": "1193440"
  },
  {
    "text": "trace the application before it even starts so",
    "start": "1193440",
    "end": "1199280"
  },
  {
    "text": "we have a few minutes left and i figured",
    "start": "1199280",
    "end": "1204720"
  },
  {
    "text": "it's a good opportunity to take a look at the code",
    "start": "1205600",
    "end": "1213360"
  },
  {
    "text": "so this is the yeah i'm gonna make it a little bigger",
    "start": "1215200",
    "end": "1221840"
  },
  {
    "text": "this is the cubecontrol plugin for the sample application and it's using go and like i said it",
    "start": "1223200",
    "end": "1229760"
  },
  {
    "text": "doesn't need to be go it doesn't even need to be a",
    "start": "1229760",
    "end": "1235120"
  },
  {
    "text": "in a real programming language but here it's it has this install command and",
    "start": "1235120",
    "end": "1242480"
  },
  {
    "text": "the install command connects to kubernetes and then it launches a daemon set",
    "start": "1242480",
    "end": "1249640"
  },
  {
    "text": "and most of the time and a lot of samples i've seen that they they use keep control and they use yaml",
    "start": "1255679",
    "end": "1262640"
  },
  {
    "text": "and all of that so i figured it would be a nice example to show how to create a demon set",
    "start": "1262640",
    "end": "1268400"
  },
  {
    "text": "programmatically uh it's pretty much the same things",
    "start": "1268400",
    "end": "1273520"
  },
  {
    "text": "you'll you'll do either way there's a couple of things you you need to",
    "start": "1273520",
    "end": "1278720"
  },
  {
    "text": "make sure you set one of them is uh privileged",
    "start": "1278720",
    "end": "1284640"
  },
  {
    "text": "uh mode because you're gonna have a",
    "start": "1284640",
    "end": "1290000"
  },
  {
    "text": "tracer it needs low level access and then you might need to mount certain",
    "start": "1290000",
    "end": "1295200"
  },
  {
    "text": "host files file system paths so with this",
    "start": "1295200",
    "end": "1302320"
  },
  {
    "text": "sensor i have a couple of",
    "start": "1302320",
    "end": "1305840"
  },
  {
    "text": "um right now it's configured to use the c sensor and",
    "start": "1309760",
    "end": "1314960"
  },
  {
    "text": "i'll have a little demo in a few minutes so yeah one",
    "start": "1314960",
    "end": "1320480"
  },
  {
    "text": "let's see",
    "start": "1320480",
    "end": "1323720"
  },
  {
    "text": "[Music]",
    "start": "1327490",
    "end": "1330579"
  },
  {
    "text": "oh yeah all right so here's an example of",
    "start": "1336480",
    "end": "1344000"
  },
  {
    "text": "cuba ctl",
    "start": "1344000",
    "end": "1347320"
  },
  {
    "text": "this is actually",
    "start": "1351360",
    "end": "1354840"
  },
  {
    "text": "this is actually a shell script",
    "start": "1362400",
    "end": "1366440"
  },
  {
    "text": "[Applause]",
    "start": "1376180",
    "end": "1379309"
  },
  {
    "text": "i don't need to be there but anyways so if i run cube ctl",
    "start": "1386080",
    "end": "1391919"
  },
  {
    "text": "file mon and that's the name of",
    "start": "1391919",
    "end": "1397000"
  },
  {
    "text": "that's the name of the plugin i created and it ends up being in one of the path directories so",
    "start": "1402960",
    "end": "1410400"
  },
  {
    "text": "if i run cube ctl file mon um install",
    "start": "1410400",
    "end": "1418320"
  },
  {
    "text": "it's going to install the the application on kubernetes",
    "start": "1418320",
    "end": "1426080"
  },
  {
    "text": "okay and then i have a demon set",
    "start": "1426400",
    "end": "1431679"
  },
  {
    "text": "right there",
    "start": "1431679",
    "end": "1434399"
  },
  {
    "text": "and if i look at the pods i see that i have a pod",
    "start": "1440320",
    "end": "1447039"
  },
  {
    "text": "and if i look at the logs this is what the sensor is doing it's just it's the c",
    "start": "1456400",
    "end": "1463360"
  },
  {
    "text": "sensor and it just shows me what different",
    "start": "1463360",
    "end": "1468840"
  },
  {
    "text": "applications um are accessing",
    "start": "1468840",
    "end": "1473840"
  },
  {
    "text": "and then so let's let's take a look at the",
    "start": "1475360",
    "end": "1481200"
  },
  {
    "text": "application so this is the go application the go sensor that gets",
    "start": "1481919",
    "end": "1488559"
  },
  {
    "text": "scheduled in the daemon set and",
    "start": "1488559",
    "end": "1493679"
  },
  {
    "text": "so that's the main code there when you when you started you create a file",
    "start": "1497919",
    "end": "1504480"
  },
  {
    "text": "monitor and then",
    "start": "1504480",
    "end": "1508919"
  },
  {
    "text": "yeah when you initialize it you're gonna load",
    "start": "1520240",
    "end": "1527360"
  },
  {
    "text": "the embedded and in this case it's embedding the",
    "start": "1527360",
    "end": "1532400"
  },
  {
    "text": "bpf byte code using",
    "start": "1532400",
    "end": "1536880"
  },
  {
    "text": "the new embedding feature in go",
    "start": "1538400",
    "end": "1543400"
  },
  {
    "text": "and then",
    "start": "1544559",
    "end": "1547120"
  },
  {
    "text": "then it loads the bpf module and then attaches the trace points so this is what i was",
    "start": "1553919",
    "end": "1561279"
  },
  {
    "text": "referring to you have to for each trace point you have",
    "start": "1561279",
    "end": "1566960"
  },
  {
    "text": "uh you need to call attach train support a trace point explicitly",
    "start": "1566960",
    "end": "1572240"
  },
  {
    "text": "with the lib bpf library there is a single call",
    "start": "1572240",
    "end": "1578480"
  },
  {
    "text": "that you can make to attach everything so it would be nice",
    "start": "1578480",
    "end": "1583679"
  },
  {
    "text": "to do that so once you attach everything",
    "start": "1583679",
    "end": "1588320"
  },
  {
    "text": "it it sets up buffers to get the events from the kernel component",
    "start": "1592159",
    "end": "1599120"
  },
  {
    "text": "and then in the run loop it consumes",
    "start": "1599120",
    "end": "1605440"
  },
  {
    "text": "events from the roy van channel and this is the channel",
    "start": "1605440",
    "end": "1613360"
  },
  {
    "text": "that was passed to the perv buffer uh setup call and that's one of the nice",
    "start": "1613360",
    "end": "1620400"
  },
  {
    "text": "things in in the lib bpf go library it provides a go abstraction to",
    "start": "1620400",
    "end": "1626880"
  },
  {
    "text": "interact with but the low level primitives",
    "start": "1626880",
    "end": "1632080"
  },
  {
    "text": "and the data that you get you need to decode it so the program itself",
    "start": "1632080",
    "end": "1638559"
  },
  {
    "text": "so the other side okay",
    "start": "1638559",
    "end": "1644399"
  },
  {
    "text": "this is the",
    "start": "1644399",
    "end": "1648320"
  },
  {
    "text": "map where that that we use for internal storage",
    "start": "1649600",
    "end": "1655440"
  },
  {
    "text": "and i'll get to it later and that's the events",
    "start": "1655440",
    "end": "1660720"
  },
  {
    "text": "perv buffer that we use to pass data to the user",
    "start": "1660720",
    "end": "1666000"
  },
  {
    "text": "space so the trace points we have is the c center open trace point",
    "start": "1666000",
    "end": "1672320"
  },
  {
    "text": "and this is exit",
    "start": "1672320",
    "end": "1677679"
  },
  {
    "text": "open trace point and says enter openeth",
    "start": "1678399",
    "end": "1683440"
  },
  {
    "text": "tracepoint and says exit open at tracepoint pretty much we hook",
    "start": "1683440",
    "end": "1688799"
  },
  {
    "text": "the the entry and the exit to the file operations so we can get the",
    "start": "1688799",
    "end": "1694640"
  },
  {
    "text": "status codes on the way out and get more information and this is what",
    "start": "1694640",
    "end": "1701440"
  },
  {
    "text": "the map is used for it's used for temporary storage so when we see",
    "start": "1701440",
    "end": "1706799"
  },
  {
    "text": "the entry trace point we save the data",
    "start": "1706799",
    "end": "1712640"
  },
  {
    "text": "into a structure for example here we create this info",
    "start": "1712640",
    "end": "1719200"
  },
  {
    "text": "info structure we save the the process id the thread id",
    "start": "1721039",
    "end": "1726159"
  },
  {
    "text": "flags the file name and then we save it in the map and on",
    "start": "1726159",
    "end": "1731440"
  },
  {
    "text": "the way out we look up that record and then we add stuff to it",
    "start": "1731440",
    "end": "1739200"
  },
  {
    "text": "for example we had the user id and then we also get the",
    "start": "1739200",
    "end": "1744480"
  },
  {
    "text": "process name and then you can also get the actual file name and all of that but that's",
    "start": "1744480",
    "end": "1750320"
  },
  {
    "text": "meant to be pretty straightforward and the c version",
    "start": "1750320",
    "end": "1757840"
  },
  {
    "text": "the c version is pretty similar so there's also",
    "start": "1757919",
    "end": "1763520"
  },
  {
    "text": "there's also a temporary map there is a ring buffer",
    "start": "1763520",
    "end": "1769120"
  },
  {
    "text": "and that that's the nicer version of the perf buffer",
    "start": "1769120",
    "end": "1774320"
  },
  {
    "text": "and the the coded side looks almost identical the user side of it looks",
    "start": "1774320",
    "end": "1780640"
  },
  {
    "text": "different and here's here's the call",
    "start": "1780640",
    "end": "1786559"
  },
  {
    "text": "that i like the most so you open the bpf program",
    "start": "1786559",
    "end": "1792320"
  },
  {
    "text": "the ppf module then you load the module and everything in it uh the",
    "start": "1792320",
    "end": "1797840"
  },
  {
    "text": "programs and maps and all of that then there's a single call to attach everything and",
    "start": "1797840",
    "end": "1803840"
  },
  {
    "text": "and there internally lib bpf uses these section definitions internally",
    "start": "1803840",
    "end": "1811120"
  },
  {
    "text": "to do the outer attaching magic i know we're out of time",
    "start": "1811120",
    "end": "1817480"
  },
  {
    "text": "is",
    "start": "1822080",
    "end": "1825080"
  },
  {
    "text": "[Applause]",
    "start": "1832180",
    "end": "1837279"
  },
  {
    "text": "yourself [Applause]",
    "start": "1839120",
    "end": "1848359"
  }
]