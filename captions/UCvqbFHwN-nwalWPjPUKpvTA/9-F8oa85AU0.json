[
  {
    "text": "I'm yossi Wiseman and with me is Ron pleasekin we are from Microsoft Defender",
    "start": "0",
    "end": "5160"
  },
  {
    "text": "for cloud and today we are going to talk about lateral movement in kubernetes",
    "start": "5160",
    "end": "10860"
  },
  {
    "text": "so uh this is the agenda for today uh we will start with talking about identities",
    "start": "10860",
    "end": "16198"
  },
  {
    "text": "in kubernetes then we will talk about inner cluster lateral Movement we will speak about",
    "start": "16199",
    "end": "22220"
  },
  {
    "text": "cluster to Cloud lateral movement in the various Cloud providers then we will talk about detections and",
    "start": "22220",
    "end": "28560"
  },
  {
    "text": "mitigations and then we will have some key takeaways so let's start",
    "start": "28560",
    "end": "33840"
  },
  {
    "text": "so let's start with an overview about identities in kubernetes so when we're",
    "start": "33840",
    "end": "39120"
  },
  {
    "text": "talking about identities in kubernetes we're usually talking about three main areas the first one is how do users or",
    "start": "39120",
    "end": "46559"
  },
  {
    "text": "applications in the cluster from outside the cluster authenticate who is the cluster so for example if I need if I",
    "start": "46559",
    "end": "53280"
  },
  {
    "text": "need to deploy resources or I have a devops pipeline that into deploy resources how do we authenticate with",
    "start": "53280",
    "end": "59219"
  },
  {
    "text": "the cluster the second one is how do workloads in the cluster authenticate within the",
    "start": "59219",
    "end": "65518"
  },
  {
    "text": "cluster with the kubernetes API server and the third one is how workloads in the cluster authenticate with resources",
    "start": "65519",
    "end": "71640"
  },
  {
    "text": "in cloud in in the cloud outside the cluster for example if I have a pod that needs access to cloud storage so how",
    "start": "71640",
    "end": "78960"
  },
  {
    "text": "does this pod authenticate with the cloud storage uh in our talk we will focus on point",
    "start": "78960",
    "end": "86580"
  },
  {
    "text": "two and three point two will be relevant for the inner cluster lateral movement and point three will be relevant for the",
    "start": "86580",
    "end": "93299"
  },
  {
    "text": "cluster to Cloud Delta movement so we are starting with inner cluster lateral movement and let's assume that",
    "start": "93299",
    "end": "99840"
  },
  {
    "text": "we have a pod in our cluster that is compromised now Parts can become com can become compromised in multiple ways",
    "start": "99840",
    "end": "105900"
  },
  {
    "text": "let's say that I have a pod that runs a web application and that web application is vulnerable and somebody exploited",
    "start": "105900",
    "end": "111960"
  },
  {
    "text": "this vulnerability so now we have a cluster with a vulnerable part",
    "start": "111960",
    "end": "116899"
  },
  {
    "text": "um so here we can see kubernetes cluster you can see uh the control plan and you can see the nodes that are running the",
    "start": "117119",
    "end": "122939"
  },
  {
    "text": "pods and here is POD a which is compromised so what is lateral movement in the",
    "start": "122939",
    "end": "129539"
  },
  {
    "text": "cluster so it could be multiple things it could be a movement from one pod to",
    "start": "129539",
    "end": "134580"
  },
  {
    "text": "another pod it could be a movement from a pod to a node",
    "start": "134580",
    "end": "140520"
  },
  {
    "text": "and ideally attackers would like to get a cluster takeover which means that they",
    "start": "140520",
    "end": "145800"
  },
  {
    "text": "would have a full control over the entire workload and the question is how can attackers",
    "start": "145800",
    "end": "152400"
  },
  {
    "text": "Leverage The compromised pod that they have access to to gain cluster takeover",
    "start": "152400",
    "end": "158819"
  },
  {
    "text": "in other words we are asking which tools does the attacker have to move laterally in the cluster so here we can see two",
    "start": "158819",
    "end": "166019"
  },
  {
    "text": "identity types that we have inside the Clusters the first one is uh the service",
    "start": "166019",
    "end": "171120"
  },
  {
    "text": "account that is used by pod a so if the attacker has access to pod a obviously",
    "start": "171120",
    "end": "176940"
  },
  {
    "text": "they also have access to the service account token of pod a and the second one is the notes identity",
    "start": "176940",
    "end": "184080"
  },
  {
    "text": "that is used by kublet so if attackers somehow managed to escape from pod a to",
    "start": "184080",
    "end": "189599"
  },
  {
    "text": "the underlying node or they somehow managed to get access to the file system of the underlying node and we will see",
    "start": "189599",
    "end": "196500"
  },
  {
    "text": "how they might achieve that shortly so they can also use this identity",
    "start": "196500",
    "end": "202440"
  },
  {
    "text": "all right so how can attackers leverage those identities",
    "start": "202440",
    "end": "208500"
  },
  {
    "text": "the good news are that it becomes a little bit more difficult now and it becomes a little bit more difficult",
    "start": "208500",
    "end": "213540"
  },
  {
    "text": "because in newer versions of kubernetes there are some security features that restrict operation that can lead to",
    "start": "213540",
    "end": "219780"
  },
  {
    "text": "Cluster takeover and lateral movement uh we are going to talk about two notable ones",
    "start": "219780",
    "end": "226080"
  },
  {
    "text": "um so the first one is that now um read secret access does not give you",
    "start": "226080",
    "end": "232200"
  },
  {
    "text": "um so read secret permissions isn't enough for lateral movement",
    "start": "232200",
    "end": "237239"
  },
  {
    "text": "um in the past as probably many of you know uh kubernetes store token of service accounts as secret objects uh so",
    "start": "237239",
    "end": "244379"
  },
  {
    "text": "if I could read secrets so I could also read tokens of service accounts",
    "start": "244379",
    "end": "251480"
  },
  {
    "text": "um in neural versions of kubernetes it's not the case and kubernetes doesn't store automatically Secrets um tokens of",
    "start": "251519",
    "end": "257820"
  },
  {
    "text": "service accounts as kubernetes secrets and if I want to acquire a token I must use a dedicated API call that gives me a",
    "start": "257820",
    "end": "264000"
  },
  {
    "text": "short-lived one the second thing is that node takeover",
    "start": "264000",
    "end": "269759"
  },
  {
    "text": "doesn't mean necessarily a cluster takeover so in the past once you obtain",
    "start": "269759",
    "end": "275880"
  },
  {
    "text": "the identity of the um of the node the cubelet identity you became practically cluster admin",
    "start": "275880",
    "end": "282660"
  },
  {
    "text": "because this identity is very permissive but in neural versions of kubernetes it's not the case because the couplet is",
    "start": "282660",
    "end": "288540"
  },
  {
    "text": "restricted and can only control resources that are scheduled on its own node which means on that particular node",
    "start": "288540",
    "end": "295919"
  },
  {
    "text": "so um so it doesn't mean a cluster takeover anymore this is achieved by the node",
    "start": "295919",
    "end": "302699"
  },
  {
    "text": "authorizer and the node restriction admission controller um so there were some improvement in",
    "start": "302699",
    "end": "309120"
  },
  {
    "text": "this area but some common misconfigurations",
    "start": "309120",
    "end": "314940"
  },
  {
    "text": "still uh still allow lateral movement and uh now we will see a real world",
    "start": "314940",
    "end": "320520"
  },
  {
    "text": "example that was the root cause of a vulnerability in a containers application all right so um in our example we have",
    "start": "320520",
    "end": "328080"
  },
  {
    "text": "application that has the permission to update itself so what does it mean so in this case we have a deployment",
    "start": "328080",
    "end": "334080"
  },
  {
    "text": "resource that uses a service account that there's the test premise has permissions to update uh the deployment",
    "start": "334080",
    "end": "342120"
  },
  {
    "text": "object so you can see here that we have a cluster role definition",
    "start": "342120",
    "end": "349080"
  },
  {
    "text": "that the service account uh is bound to and it has permissions to update this",
    "start": "349080",
    "end": "354840"
  },
  {
    "text": "specific deployment okay you can see the resource name that specified this specific deployment",
    "start": "354840",
    "end": "360960"
  },
  {
    "text": "um so this is um the cluster role definition so maybe it sounds harmless because now we have a",
    "start": "360960",
    "end": "367860"
  },
  {
    "text": "deployment that has a service account that can update itself only itself not other objects in the cluster so it",
    "start": "367860",
    "end": "373380"
  },
  {
    "text": "sounds maybe okay it sounds fine I mean it can update only itself but it means that now I can update my",
    "start": "373380",
    "end": "380880"
  },
  {
    "text": "own configuration and specifically it means that the application can change its configuration to run a privileged",
    "start": "380880",
    "end": "386580"
  },
  {
    "text": "container um and if the container is now privileged it can access to the",
    "start": "386580",
    "end": "392460"
  },
  {
    "text": "underlying node and if it can access to the underlying node it can access to the node node's identity like we said now as",
    "start": "392460",
    "end": "401280"
  },
  {
    "text": "we said right now achieving the notes identity doesn't necessarily mean a cluster",
    "start": "401280",
    "end": "406919"
  },
  {
    "text": "takeover like we explained but we can also specify in the configuration that",
    "start": "406919",
    "end": "412919"
  },
  {
    "text": "we want to be scheduled on a specific node by using the node selector so what we have now",
    "start": "412919",
    "end": "419400"
  },
  {
    "text": "is the ability to deploy a privileged container and we can decide on which node we want to deploy it so practically",
    "start": "419400",
    "end": "426780"
  },
  {
    "text": "we are cluster we achieve the class to take over let's see it so we have a pod it can change its own",
    "start": "426780",
    "end": "433800"
  },
  {
    "text": "deployment configuration so now we have a new pod um now this time the Pod is privileged",
    "start": "433800",
    "end": "441419"
  },
  {
    "text": "and it can access to the underlying node now we will schedule one on node two and",
    "start": "441419",
    "end": "447000"
  },
  {
    "text": "now we will schedule one on node three so now we have a cluster takeover",
    "start": "447000",
    "end": "454940"
  },
  {
    "text": "so in this example we saw a permission that may lead to Cluster takeover",
    "start": "458220",
    "end": "464940"
  },
  {
    "text": "and again it was based on the real world vulnerability let's go over a few more permissions",
    "start": "464940",
    "end": "470340"
  },
  {
    "text": "that also may lead to Cluster takeover all right so this is the table so the first one is very similar to what",
    "start": "470340",
    "end": "476819"
  },
  {
    "text": "we just saw if you can create a new pod or you can create a new controller in the cluster so you can use so you can",
    "start": "476819",
    "end": "484919"
  },
  {
    "text": "specify its configuration you can specify it to be privileged and you can specify also the node that you want to",
    "start": "484919",
    "end": "491160"
  },
  {
    "text": "be scheduled on and practically you can become um a cluster admin",
    "start": "491160",
    "end": "497819"
  },
  {
    "text": "the second one is actually what we just talked about it's the update controller in our case we updated a deployment but",
    "start": "497819",
    "end": "503819"
  },
  {
    "text": "it could be any other deploy any other controller as well",
    "start": "503819",
    "end": "508580"
  },
  {
    "text": "uh the third one is an interesting one because as we said before uh in your versions of kubernetes",
    "start": "508919",
    "end": "516000"
  },
  {
    "text": "kubernetes doesn't automatically create um secrets with tokens of service",
    "start": "516000",
    "end": "521159"
  },
  {
    "text": "accounts however as a user I can still manually create a secret and specify",
    "start": "521159",
    "end": "528660"
  },
  {
    "text": "that I want to I want it to be a token for a service account I just annotate the I annotate the secret with the name",
    "start": "528660",
    "end": "536160"
  },
  {
    "text": "of the service account that I want so if I have the permissions to create a new secret and then I have the permission to",
    "start": "536160",
    "end": "543300"
  },
  {
    "text": "read its value so I can get I can get the token a Long Live token of any",
    "start": "543300",
    "end": "549360"
  },
  {
    "text": "service account that I want and uh the fourth one here in the table",
    "start": "549360",
    "end": "556080"
  },
  {
    "text": "is the permission that you need in order to create short live token",
    "start": "556080",
    "end": "562620"
  },
  {
    "text": "so that was in a cluster lateral movement now we will move to the second topic which is lateral movement from the",
    "start": "562620",
    "end": "568800"
  },
  {
    "text": "cluster to the cloud and we will see how the two topics are actually sometimes related to each other",
    "start": "568800",
    "end": "576260"
  },
  {
    "text": "thanks Jose so after we talked about lateral movement inside kubernetes clusters we",
    "start": "580620",
    "end": "586140"
  },
  {
    "text": "will now move on to the second topic which is lateral movement form cluster to Cloud resources that are outside of",
    "start": "586140",
    "end": "592560"
  },
  {
    "text": "the cluster so let's let's try to assess the imminence of an attacker pivoting from a",
    "start": "592560",
    "end": "599580"
  },
  {
    "text": "cluster to the underlying Cloud environment coming to do so we should first acknowledge the different needs of which",
    "start": "599580",
    "end": "606540"
  },
  {
    "text": "a managed cluster interacts with Cloud resources and there are two type of interactions",
    "start": "606540",
    "end": "612120"
  },
  {
    "text": "first the maintenance routines ones for example with kubernetes being so Dynamic",
    "start": "612120",
    "end": "617519"
  },
  {
    "text": "it's frankly it frequently needs to allocate or decommission VM this is done by ongoing engagement with",
    "start": "617519",
    "end": "624720"
  },
  {
    "text": "Cloud apis the second type of interaction is sorry",
    "start": "624720",
    "end": "630920"
  },
  {
    "text": "the second type of interaction is sourcing from the need to support customer workloads for example customer",
    "start": "631860",
    "end": "637740"
  },
  {
    "text": "runs a pod that has a web service inside and this web service pushes that or",
    "start": "637740",
    "end": "642899"
  },
  {
    "text": "reads data from S3 bucket that is outside of the cluster so as you can expect clusters that lives inside the",
    "start": "642899",
    "end": "650640"
  },
  {
    "text": "cloud are tightly coupled with it with its resources so how kubernetes cluster authenticate",
    "start": "650640",
    "end": "658260"
  },
  {
    "text": "themselves against cloud apis and the answer for this is that there are",
    "start": "658260",
    "end": "663420"
  },
  {
    "text": "advancements in the way that kubernetes cluster can establish trust with Cloud resources in our talk today we will go",
    "start": "663420",
    "end": "670980"
  },
  {
    "text": "over the following method of authentications so the first one is by storing a file",
    "start": "670980",
    "end": "676940"
  },
  {
    "text": "locally on the kubernetes Node that stores Cloud credentials",
    "start": "676940",
    "end": "682260"
  },
  {
    "text": "then we will talk about direct and indirect access to imds lastly we will",
    "start": "682260",
    "end": "687720"
  },
  {
    "text": "show out kubernetes identities are being Federated as Cloud identities which is now powered by openid connect",
    "start": "687720",
    "end": "694620"
  },
  {
    "text": "and while we dive into each of these methods we will demonstrate how attackers can also leverage each of the",
    "start": "694620",
    "end": "702060"
  },
  {
    "text": "method to advance their foothold from cluster to Cloud",
    "start": "702060",
    "end": "707300"
  },
  {
    "text": "so we are starting off with the way that AKs used to authenticate with Azure",
    "start": "707700",
    "end": "712920"
  },
  {
    "text": "Resources with this method AKs stores a file that has a service principle secret",
    "start": "712920",
    "end": "718260"
  },
  {
    "text": "on it and it was stores on each of the kubernetes nodes",
    "start": "718260",
    "end": "723540"
  },
  {
    "text": "service principles are application-based identities in Azure they are like service accounts in kubernetes",
    "start": "723540",
    "end": "731100"
  },
  {
    "text": "with this authentication method access to the node's file system meant",
    "start": "731100",
    "end": "736560"
  },
  {
    "text": "elevation to a contributor role scope to the Azure Resource Group that hosts the",
    "start": "736560",
    "end": "741600"
  },
  {
    "text": "cluster so now let's see it in action our attackers can leverage it",
    "start": "741600",
    "end": "748560"
  },
  {
    "text": "so let's assume port a is compromised and it has a service account attached to it",
    "start": "748560",
    "end": "754200"
  },
  {
    "text": "now if this service account is authorized to create new ports that attacker can abuse this formation and",
    "start": "754200",
    "end": "761640"
  },
  {
    "text": "create a new pod with the configurations that mounts the credential the credential credential file to it",
    "start": "761640",
    "end": "770000"
  },
  {
    "text": "this month result with a new container that can access the local credit file and make calls under the SPN identity",
    "start": "771959",
    "end": "781740"
  },
  {
    "text": "and this is how attacker could have achieved a backdoor container with access to azure apis and as meant as as",
    "start": "781740",
    "end": "789560"
  },
  {
    "text": "mentioned this was the default configuration for AKs in the past",
    "start": "789560",
    "end": "796200"
  },
  {
    "text": "note that for this method the attacker needed access to the underlying node in",
    "start": "796200",
    "end": "802620"
  },
  {
    "text": "most deployment it's not a trivial to it's not trivial to break the container isolation in the next method coming up",
    "start": "802620",
    "end": "809459"
  },
  {
    "text": "we will see that escaping from a container is no longer a requirement",
    "start": "809459",
    "end": "814560"
  },
  {
    "text": "so let's move on to the second authentication method that is currently the default in Azure AWS and gcp",
    "start": "814560",
    "end": "822300"
  },
  {
    "text": "so we're going to talk about imds imds stands for instance metadata",
    "start": "822300",
    "end": "827880"
  },
  {
    "text": "service it is a local it is a special endpoint that is accessible for every VM",
    "start": "827880",
    "end": "832920"
  },
  {
    "text": "hosted in the cloud this type of service is implemented by all three major Cloud providers it",
    "start": "832920",
    "end": "840180"
  },
  {
    "text": "basically allows VM in the cloud to query parameters about themselves for example what is my cloud identifier in",
    "start": "840180",
    "end": "848639"
  },
  {
    "text": "which region I am I'm deployed or what I my network settings but also and perhaps most interestingly",
    "start": "848639",
    "end": "856399"
  },
  {
    "text": "VMS can ask imds for token that represent Cloud identities",
    "start": "856399",
    "end": "863160"
  },
  {
    "text": "all Cloud providers support attachment of identities to VM in Azure we call it",
    "start": "863160",
    "end": "868860"
  },
  {
    "text": "managed identity in AWS it's called ec2 role and a gcp it's a service account",
    "start": "868860",
    "end": "874740"
  },
  {
    "text": "so here you can see how those apis look in each of the cloud providers and",
    "start": "874740",
    "end": "880440"
  },
  {
    "text": "OneNote one one important note is that imds endpoints does not require Authentication",
    "start": "880440",
    "end": "887040"
  },
  {
    "text": "for security it relies on the fact that each VM can only query its own metadata",
    "start": "887040",
    "end": "892680"
  },
  {
    "text": "service in managed clusters kubernetes nodes are",
    "start": "892680",
    "end": "898560"
  },
  {
    "text": "VMS in the cloud right so as such they have access to the metadata service like any other VM so by default pods can also",
    "start": "898560",
    "end": "907560"
  },
  {
    "text": "access their node's metadata service that means the Pod can acquire token of",
    "start": "907560",
    "end": "913019"
  },
  {
    "text": "the identities assigned to the node they are running on and of course the permissions of these",
    "start": "913019",
    "end": "918660"
  },
  {
    "text": "tokens will have depend on the cloud provider and the specific configuration of the environment",
    "start": "918660",
    "end": "924240"
  },
  {
    "text": "which will now see how it looks like in Azure AWS and gcp",
    "start": "924240",
    "end": "930139"
  },
  {
    "text": "we will start with Azure so AKs cluster uses managed identities for their operation",
    "start": "930480",
    "end": "937339"
  },
  {
    "text": "perhaps worth calling out that a managed identity is behind the scene a service a",
    "start": "937339",
    "end": "942959"
  },
  {
    "text": "special type of service principle and the difference between managed identities to SPN is that managed",
    "start": "942959",
    "end": "949079"
  },
  {
    "text": "identities eliminates the need for developer to developers to to manage its",
    "start": "949079",
    "end": "955199"
  },
  {
    "text": "credentials so this is the this is the list of",
    "start": "955199",
    "end": "960839"
  },
  {
    "text": "default managed identities by AKs some of them are quite powerful in red you",
    "start": "960839",
    "end": "966480"
  },
  {
    "text": "can see that in some configuration the managed identities have a contributory role on the nodes Resource Group",
    "start": "966480",
    "end": "973160"
  },
  {
    "text": "also users can add more managed identities or modify existing permission",
    "start": "973160",
    "end": "978980"
  },
  {
    "text": "existing permissions of existing managed identities all depends on their need for",
    "start": "978980",
    "end": "985019"
  },
  {
    "text": "example if my applications need access to a storage account or to a key Vault I can add permissions to these resources",
    "start": "985019",
    "end": "990839"
  },
  {
    "text": "for an existing managed identity so like the table from previous slide",
    "start": "990839",
    "end": "996959"
  },
  {
    "text": "AWS operates in a similar manner AKs cluster uses ec2 roles for their",
    "start": "996959",
    "end": "1003199"
  },
  {
    "text": "operations so we see in three roles the first the first wall we see includes permission to fetch images from",
    "start": "1003199",
    "end": "1009800"
  },
  {
    "text": "container registry the second one is permissions of compute resources and the",
    "start": "1009800",
    "end": "1015259"
  },
  {
    "text": "third one is permissions to edit the network configuration of an eks cluster",
    "start": "1015259",
    "end": "1021579"
  },
  {
    "text": "GK also comes with built-in IIM service account but interestingly gke uses the",
    "start": "1022300",
    "end": "1029720"
  },
  {
    "text": "default compute engine service account that has editor all assigned to it",
    "start": "1029720",
    "end": "1034819"
  },
  {
    "text": "this annoyingly challenges the security boundary of the gke cluster it means",
    "start": "1034819",
    "end": "1041178"
  },
  {
    "text": "that if a pod in gke get compromised the permission the attacker can achieve goes",
    "start": "1041179",
    "end": "1046459"
  },
  {
    "text": "beyond the cluster it can impact the entire project",
    "start": "1046459",
    "end": "1051679"
  },
  {
    "text": "for folks here that works with JK it's true that the permission are limited by",
    "start": "1051679",
    "end": "1058400"
  },
  {
    "text": "access Scopes which restrict the apis that this service account can access to",
    "start": "1058400",
    "end": "1063820"
  },
  {
    "text": "but even with this limitation this soul is still quite powerful for example it",
    "start": "1063820",
    "end": "1071000"
  },
  {
    "text": "has read data permission it can read data permission it can read data from any cloud storage in the project as you",
    "start": "1071000",
    "end": "1078799"
  },
  {
    "text": "can see in the image in the image of the slide",
    "start": "1078799",
    "end": "1083440"
  },
  {
    "text": "so are those lateral movements look like in this method here again is a cluster",
    "start": "1084799",
    "end": "1091900"
  },
  {
    "text": "let's keep only one note to simplify things a bit so as we discussed this",
    "start": "1091900",
    "end": "1097280"
  },
  {
    "text": "node has access to an imds instance and now the port can retrieve token for",
    "start": "1097280",
    "end": "1103760"
  },
  {
    "text": "a cloud identity and the metadata service returns a value token and",
    "start": "1103760",
    "end": "1109280"
  },
  {
    "text": "depends on the permissions assigned to that identity this spot can query different Cloud apis right so for",
    "start": "1109280",
    "end": "1116240"
  },
  {
    "text": "example it can read files from cloud storage Services another example would be fetching secrets from Azure key Vault",
    "start": "1116240",
    "end": "1123440"
  },
  {
    "text": "or AWS KMS or even getting the credentials of other kubernetes clusters that are deployed in",
    "start": "1123440",
    "end": "1131179"
  },
  {
    "text": "the cloud it always boils down to the permission assigned to the identity which the",
    "start": "1131179",
    "end": "1137780"
  },
  {
    "text": "attacker can acquire tokens for so what problem we just saw on the one",
    "start": "1137780",
    "end": "1144679"
  },
  {
    "text": "hand we saw that pods can freely access their node's identity and we should probably want to limit that",
    "start": "1144679",
    "end": "1151100"
  },
  {
    "text": "but at the same time in some cases pods may need to legitimately acquire token",
    "start": "1151100",
    "end": "1156860"
  },
  {
    "text": "to support the workload they are running so we want to allocate a specific identity to each pod that's needed and",
    "start": "1156860",
    "end": "1164960"
  },
  {
    "text": "we want to make sure that pods have granular access to these these identities",
    "start": "1164960",
    "end": "1171440"
  },
  {
    "text": "luckily this can be achieved and we are going to see two concepts that serves",
    "start": "1171440",
    "end": "1177140"
  },
  {
    "text": "this goal the first one is indirect access to imds and the second is through",
    "start": "1177140",
    "end": "1183260"
  },
  {
    "text": "Federation of kubernetes identities as Cloud identities let's start with indirect access to imds",
    "start": "1183260",
    "end": "1191299"
  },
  {
    "text": "so we are not going to elaborate we are not going to elaborate too much",
    "start": "1191299",
    "end": "1197240"
  },
  {
    "text": "here because this mechanism is not commonly used anymore but in general in",
    "start": "1197240",
    "end": "1202760"
  },
  {
    "text": "this method when a pod calls imds its traffic is redirected to a local server",
    "start": "1202760",
    "end": "1208820"
  },
  {
    "text": "then the local server queries imds on the pods BF and this is implemented by",
    "start": "1208820",
    "end": "1215059"
  },
  {
    "text": "aadpod identity project which is now in duplication so we will quickly we will quickly go",
    "start": "1215059",
    "end": "1222140"
  },
  {
    "text": "over our aadpod identity operates the first step is that traffic form per day",
    "start": "1222140",
    "end": "1229400"
  },
  {
    "text": "to imds is intercepted and redirected to a local server that the nmi port that",
    "start": "1229400",
    "end": "1235039"
  },
  {
    "text": "you see in the screen then the local server requests per day per day identity",
    "start": "1235039",
    "end": "1240559"
  },
  {
    "text": "from the metadata service and with step 3 the nmi returns amds response the",
    "start": "1240559",
    "end": "1247220"
  },
  {
    "text": "token back to pod a a AAP pod identity has few limitation",
    "start": "1247220",
    "end": "1252919"
  },
  {
    "text": "and that we call that we want to really go over we won't really cover today but",
    "start": "1252919",
    "end": "1259700"
  },
  {
    "text": "I should just mention that Aid pod identity does not support all cnis",
    "start": "1259700",
    "end": "1264740"
  },
  {
    "text": "uh",
    "start": "1264740",
    "end": "1267460"
  },
  {
    "text": "all right uh thanks Ron so um now uh we'll move to the",
    "start": "1272480",
    "end": "1278120"
  },
  {
    "text": "um last method for uh Cloud authentication um it's the last method in which",
    "start": "1278120",
    "end": "1284780"
  },
  {
    "text": "um pods in the cluster can authenticate with um with the cloud and it is based on",
    "start": "1284780",
    "end": "1291080"
  },
  {
    "text": "oidc or open ID connect um so this method is implemented by all",
    "start": "1291080",
    "end": "1297080"
  },
  {
    "text": "major Cloud providers it's implemented by Azure AWS and UCP",
    "start": "1297080",
    "end": "1302960"
  },
  {
    "text": "um that um here you can see how each cloud",
    "start": "1302960",
    "end": "1308240"
  },
  {
    "text": "provider calls to this feature so in Asia with aad workload identity in AWS it's irsa and gcp it's working identity",
    "start": "1308240",
    "end": "1315460"
  },
  {
    "text": "in gcp they actually using their implementation some aspects of the",
    "start": "1315460",
    "end": "1321500"
  },
  {
    "text": "previous concept that we saw they use um they also intercept the traffic from",
    "start": "1321500",
    "end": "1326600"
  },
  {
    "text": "imds to a local to imds to a local server but generally the concept is similar",
    "start": "1326600",
    "end": "1333799"
  },
  {
    "text": "between the cloud providers so in this method the kubernetes cluster",
    "start": "1333799",
    "end": "1339320"
  },
  {
    "text": "is used as an oidc identity provider and it means that the cloud identity",
    "start": "1339320",
    "end": "1345080"
  },
  {
    "text": "platforms such as azio active directory or other identity platforms can trust tokens that are issued by the cluster",
    "start": "1345080",
    "end": "1352640"
  },
  {
    "text": "and because of this trust applications in the cluster can exchange a token of a",
    "start": "1352640",
    "end": "1358520"
  },
  {
    "text": "service account with a token of a cloud identity and this is a big advantage of this",
    "start": "1358520",
    "end": "1365000"
  },
  {
    "text": "method because it means that now pods can authenticate with the cloud using",
    "start": "1365000",
    "end": "1370580"
  },
  {
    "text": "their native identity native kubernetes identity which is their service accounts because and this is a big difference",
    "start": "1370580",
    "end": "1377000"
  },
  {
    "text": "between what we saw between this and what we saw so far because so far we saw that if a pod wants to authenticate with",
    "start": "1377000",
    "end": "1383659"
  },
  {
    "text": "the cloud so the Pod needs somehow to acquire a token of the cloud it needs a",
    "start": "1383659",
    "end": "1389120"
  },
  {
    "text": "cloud credential but now we can see that pods can authenticate with the cloud using their own identity using the",
    "start": "1389120",
    "end": "1396500"
  },
  {
    "text": "service accounts that they already have so they work the way it works is um so",
    "start": "1396500",
    "end": "1402380"
  },
  {
    "text": "users can bind between a kubernetes service account and the cloud identity and after this binding",
    "start": "1402380",
    "end": "1408919"
  },
  {
    "text": "um that is called Federation applications can exchange the kubernetes service account with the correlating",
    "start": "1408919",
    "end": "1414919"
  },
  {
    "text": "cloud identity all right so let's see in high level uh the flow how this works so",
    "start": "1414919",
    "end": "1421880"
  },
  {
    "text": "first kublet project assigned service account token to the Pod and this is a",
    "start": "1421880",
    "end": "1427280"
  },
  {
    "text": "valid JWT token that is signed by the cluster all right so now our pod has a",
    "start": "1427280",
    "end": "1433880"
  },
  {
    "text": "JWT token of the service account and then the Pod can send it to the cloud",
    "start": "1433880",
    "end": "1439220"
  },
  {
    "text": "identity service again like azioactive directory or AWS ion or gcp and it",
    "start": "1439220",
    "end": "1446360"
  },
  {
    "text": "requests to exchange the service account token with with an identity token",
    "start": "1446360",
    "end": "1452659"
  },
  {
    "text": "so now the cloud identity the cloud identity service verifies that this",
    "start": "1452659",
    "end": "1457880"
  },
  {
    "text": "service account token is indeed legitimate and the the cloud identity",
    "start": "1457880",
    "end": "1463280"
  },
  {
    "text": "service checks that the token was indeed issued by the cluster that the service",
    "start": "1463280",
    "end": "1469520"
  },
  {
    "text": "Trust and it does it by using the cluster oidc endpoint",
    "start": "1469520",
    "end": "1475039"
  },
  {
    "text": "and if there were if the verification was successful the cloud identity platform will return a cloud identity",
    "start": "1475039",
    "end": "1482480"
  },
  {
    "text": "token to the Pod so now our pod has a valid uh Cloud credential Cloud token",
    "start": "1482480",
    "end": "1489340"
  },
  {
    "text": "and it can use it to authenticate with Cloud resources for example again it can",
    "start": "1489340",
    "end": "1495640"
  },
  {
    "text": "authenticate with the cloud storage for example if it needs to",
    "start": "1495640",
    "end": "1500919"
  },
  {
    "text": "so this is an example from aad from Azure active directory and you can see",
    "start": "1500960",
    "end": "1506240"
  },
  {
    "text": "this binding this kind of federation so we have in this page you can see it's um it's a setting of specific aad",
    "start": "1506240",
    "end": "1513140"
  },
  {
    "text": "application and you can see that we bind to this application um the kubernetes service account",
    "start": "1513140",
    "end": "1519980"
  },
  {
    "text": "um you can see the name of the service account that will be bound and you can also see the oadc endpoint that aad will",
    "start": "1519980",
    "end": "1527539"
  },
  {
    "text": "use to validate this service account token",
    "start": "1527539",
    "end": "1532658"
  },
  {
    "text": "um all right so let's talk for a moment about gcp specifically um because in gcp there is something",
    "start": "1534320",
    "end": "1539840"
  },
  {
    "text": "interesting in gcp there is a unified identity pool for the entire project and what does it",
    "start": "1539840",
    "end": "1547159"
  },
  {
    "text": "mean it means that there is a single binding between a cloud identity and",
    "start": "1547159",
    "end": "1553039"
  },
  {
    "text": "service account and service account is represented by uh the namespace name",
    "start": "1553039",
    "end": "1558500"
  },
  {
    "text": "plus the service account name so let's see an example so we see two clusters here it's two clusters we have cluster a",
    "start": "1558500",
    "end": "1565520"
  },
  {
    "text": "and we have cluster B they are in the same project um both have namespaced with the same",
    "start": "1565520",
    "end": "1571640"
  },
  {
    "text": "name and the service account with the same name so both have a namespace called monitoring and the service account named sa1",
    "start": "1571640",
    "end": "1579020"
  },
  {
    "text": "and if we bind this service account with the CL with the cloud identities in this",
    "start": "1579020",
    "end": "1585679"
  },
  {
    "text": "case it's called My Cloud app so it means that both service accounts bound to the same Cloud identity all right",
    "start": "1585679",
    "end": "1592760"
  },
  {
    "text": "that's how it works now let's say that we have another cluster in our project let's call it a",
    "start": "1592760",
    "end": "1599600"
  },
  {
    "text": "cluster C and let's say that this cluster is compromised okay for example we saw in the first section how attacker",
    "start": "1599600",
    "end": "1607039"
  },
  {
    "text": "might get the cluster takeover um so this cluster cluster C is",
    "start": "1607039",
    "end": "1612980"
  },
  {
    "text": "compromised and now if the if Deckers can create a",
    "start": "1612980",
    "end": "1618080"
  },
  {
    "text": "namespace and the service account assuming they can if they got if they gain the cluster takeover so they can",
    "start": "1618080",
    "end": "1625520"
  },
  {
    "text": "impersonate to that cloud identity right because there is only one binding per",
    "start": "1625520",
    "end": "1630559"
  },
  {
    "text": "project so if they can create a service account and the namespace with the same name so they get access to This Cloud",
    "start": "1630559",
    "end": "1638000"
  },
  {
    "text": "identity um so as we said uh attackers has access",
    "start": "1638000",
    "end": "1643220"
  },
  {
    "text": "to the cloud identity just by creating resources in a specific name",
    "start": "1643220",
    "end": "1648760"
  },
  {
    "text": "so what we see here is that we must trust all our clusters in the project",
    "start": "1648799",
    "end": "1654500"
  },
  {
    "text": "okay and many times we consider our security boundary as the cluster that",
    "start": "1654500",
    "end": "1661039"
  },
  {
    "text": "everything in the cluster I mean that there is trust in the cluster but not outside the cluster but here we can see",
    "start": "1661039",
    "end": "1667940"
  },
  {
    "text": "that our security boundary is actually not the cluster but the entire project and we see it once again",
    "start": "1667940",
    "end": "1675940"
  },
  {
    "text": "so um this is what we saw so far uh we talked about inner cluster lateral",
    "start": "1677440",
    "end": "1682880"
  },
  {
    "text": "movement and we talked about cluster to Cloud lateral movement and now let's talk about how we can detect and prevent",
    "start": "1682880",
    "end": "1689120"
  },
  {
    "text": "those techniques all right so um we'll start with detection we'll talk",
    "start": "1689120",
    "end": "1695659"
  },
  {
    "text": "about detections and mitigations let's start with detections so as we already saw uh when we were",
    "start": "1695659",
    "end": "1702500"
  },
  {
    "text": "talking about kubernetes we must consider both kubernetes level and the cloud level and this applies also to",
    "start": "1702500",
    "end": "1708919"
  },
  {
    "text": "detections and mitigations in kubernetes when it comes to detection we have a very powerful tool for",
    "start": "1708919",
    "end": "1715460"
  },
  {
    "text": "monitoring the cluster and it's called kubernetes audit log it's native in kubernetes and it gives you visibility",
    "start": "1715460",
    "end": "1720799"
  },
  {
    "text": "to the operations in the cluster it basically monitors the kubernetes API server",
    "start": "1720799",
    "end": "1726200"
  },
  {
    "text": "um and you can use it for example to detect deployment of abnormal images a pod with",
    "start": "1726200",
    "end": "1732620"
  },
  {
    "text": "suspicious configurations for example with suspicious volume mounts and also a",
    "start": "1732620",
    "end": "1737840"
  },
  {
    "text": "color sensitivity and more suspicious operations uh Cloud providers also have auditing",
    "start": "1737840",
    "end": "1745760"
  },
  {
    "text": "Services each cloud provider has a auditing service that allow you to track the behavior of the of the cloud",
    "start": "1745760",
    "end": "1751760"
  },
  {
    "text": "identities now of course also the cloud identities that are used by the kubernetes workloads and here in this",
    "start": "1751760",
    "end": "1758299"
  },
  {
    "text": "example we can see um Azure activity log which is the audit auditing service of azure and you can see here in the image",
    "start": "1758299",
    "end": "1765260"
  },
  {
    "text": "that we see um we see a managed identity we see Cloud",
    "start": "1765260",
    "end": "1770299"
  },
  {
    "text": "identity that is used by kubernetes that reads storage account keys so maybe it's",
    "start": "1770299",
    "end": "1775340"
  },
  {
    "text": "suspicious it's something that we want to monitor in other clouds you have also such Services cloud trail in AWS and in",
    "start": "1775340",
    "end": "1781880"
  },
  {
    "text": "gcp Cloud audit logs all right so that was uh detections now",
    "start": "1781880",
    "end": "1788360"
  },
  {
    "text": "let's speak about mitigations so um in December we released the",
    "start": "1788360",
    "end": "1794360"
  },
  {
    "text": "seventh the third version of the threat Matrix for kubernetes uh the threat Matrix is a knowledge base of attacking",
    "start": "1794360",
    "end": "1800360"
  },
  {
    "text": "techniques of kubernetes um so the new version now also contains mitigation techniques the threat metrics",
    "start": "1800360",
    "end": "1808039"
  },
  {
    "text": "is completely open sourced and you can see it in this address so let's see how we can work with it so",
    "start": "1808039",
    "end": "1814580"
  },
  {
    "text": "here is the new threat metrics for kubernetes again it's open sourced so you can see the tactics and the",
    "start": "1814580",
    "end": "1820940"
  },
  {
    "text": "techniques in each tactic so let's go to the lateral movement tactic because it just talked about lateral movement and",
    "start": "1820940",
    "end": "1826760"
  },
  {
    "text": "let's pick pick a technique let's pick access to Cloud resources",
    "start": "1826760",
    "end": "1832100"
  },
  {
    "text": "so here is the technique that talks about lateral movement from the cluster to the cloud like our session and you",
    "start": "1832100",
    "end": "1838340"
  },
  {
    "text": "can see the uh the description of this uh of this technique and in the bottom you can now find the mitigation",
    "start": "1838340",
    "end": "1844279"
  },
  {
    "text": "techniques which can help you to prevent this attacking from happening so let's pick one mitigations so we",
    "start": "1844279",
    "end": "1851179"
  },
  {
    "text": "picked allocate specific identities to pods and here you can see the description of the of this mitigation",
    "start": "1851179",
    "end": "1857419"
  },
  {
    "text": "technique let's see another example quickly so let's go to the technique",
    "start": "1857419",
    "end": "1862520"
  },
  {
    "text": "container service account which talks about how attackers might use service accounts for lateral movement in the",
    "start": "1862520",
    "end": "1867919"
  },
  {
    "text": "cluster and once again you can see the description of the attacking technique",
    "start": "1867919",
    "end": "1873799"
  },
  {
    "text": "let's go to mitigations and let's pick one for example disable service account Auto Service account Auto Mount",
    "start": "1873799",
    "end": "1881779"
  },
  {
    "text": "and here you can see um the mitigation okay",
    "start": "1881779",
    "end": "1887419"
  },
  {
    "text": "um",
    "start": "1887419",
    "end": "1889419"
  },
  {
    "text": "thanks so as we enter the closing section of this presentation I will",
    "start": "1894020",
    "end": "1900080"
  },
  {
    "text": "share a bit about the process behind building this metrics in general we kicked off The Journey of",
    "start": "1900080",
    "end": "1906559"
  },
  {
    "text": "building knowledge base or threat matrixes for services that we put in the effort",
    "start": "1906559",
    "end": "1912520"
  },
  {
    "text": "of building security offerings for them we decided to rely on mild on mitral",
    "start": "1912520",
    "end": "1918740"
  },
  {
    "text": "attack framework as it becomes defect though the leading standard for the entire EDR industry",
    "start": "1918740",
    "end": "1926120"
  },
  {
    "text": "back at the time we knew that miterate attacks are too focused on the operating system level and it lacks visibility to",
    "start": "1926120",
    "end": "1933860"
  },
  {
    "text": "cloudish and container ptps together with kubernetes being so",
    "start": "1933860",
    "end": "1939740"
  },
  {
    "text": "rapidly adopted this drove us to experiment to experiment with building a",
    "start": "1939740",
    "end": "1945620"
  },
  {
    "text": "knowledge base of attack techniques dedicated for kubernetes and so we released the first the first",
    "start": "1945620",
    "end": "1952340"
  },
  {
    "text": "version of the micro Microsoft threat metrics for kubernetes in April 2020",
    "start": "1952340",
    "end": "1958840"
  },
  {
    "text": "shortly after the release we realized how well it was resonated within the",
    "start": "1958940",
    "end": "1964279"
  },
  {
    "text": "container ecosystem with customers starting to measure our coverage based on these metrics and even",
    "start": "1964279",
    "end": "1971720"
  },
  {
    "text": "competitors sharing their areas of strength on top of our metrics uh eventually this",
    "start": "1971720",
    "end": "1980179"
  },
  {
    "text": "led a tomato to embrace a large portion of Microsoft metrics into their",
    "start": "1980179",
    "end": "1985700"
  },
  {
    "text": "Enterprise attacks framework which was announced by a joint publication between Microsoft and miter in April",
    "start": "1985700",
    "end": "1994100"
  },
  {
    "text": "2021 and as you see just described we",
    "start": "1994100",
    "end": "1999320"
  },
  {
    "text": "released the third version of Microsoft metrics in December 2022 where we aim to",
    "start": "1999320",
    "end": "2005140"
  },
  {
    "text": "introduce a new layer that consists of mitigation techniques our motivation was to map each TTP to",
    "start": "2005140",
    "end": "2012820"
  },
  {
    "text": "correspondent mitigation steps that will instruct kubernetes user on how they should reduce their attack surface",
    "start": "2012820",
    "end": "2020019"
  },
  {
    "text": "hopefully this dimension of mitigation step will prevent kubernetes attacks to",
    "start": "2020019",
    "end": "2025240"
  },
  {
    "text": "begin with so key takeaways so we demonstrated here",
    "start": "2025240",
    "end": "2033159"
  },
  {
    "text": "today that even with the great security advancements that being pushed to kubernetes and even with the efforts",
    "start": "2033159",
    "end": "2042100"
  },
  {
    "text": "that led by Cloud providers that wrap kubernetes clusters there is still much",
    "start": "2042100",
    "end": "2048398"
  },
  {
    "text": "work ahead of us as a community to strengthen the overall security posture of managed clusters",
    "start": "2048399",
    "end": "2055000"
  },
  {
    "text": "as a quick recap of today's session so we saw the maturity of Shifting away",
    "start": "2055000",
    "end": "2060460"
  },
  {
    "text": "from storing locally permissive creates files to all major Cloud providers now",
    "start": "2060460",
    "end": "2066220"
  },
  {
    "text": "support Federation of kubernetes identities and binding them with Cloud",
    "start": "2066220",
    "end": "2071378"
  },
  {
    "text": "identities as an industry we have proven to take significant steps towards more secure",
    "start": "2071379",
    "end": "2077980"
  },
  {
    "text": "environments but in the meantime we also saw that built-in managed clusters",
    "start": "2077980",
    "end": "2084720"
  },
  {
    "text": "identities of built building identities of managed clusters can be abused and",
    "start": "2084720",
    "end": "2091240"
  },
  {
    "text": "manipulated and this is and how in some cases they themselves violating the",
    "start": "2091240",
    "end": "2096940"
  },
  {
    "text": "security boundary of the Clusters therefore we are calling you to",
    "start": "2096940",
    "end": "2102820"
  },
  {
    "text": "one Implement an holistic strategy for kubernetes security by considering both",
    "start": "2102820",
    "end": "2108220"
  },
  {
    "text": "cluster and Cloud levels identities are key aspect of kubernetes",
    "start": "2108220",
    "end": "2115060"
  },
  {
    "text": "security so monitor their activity using auditing auditing to auditing tools and",
    "start": "2115060",
    "end": "2120880"
  },
  {
    "text": "adhere to the least privileged principle and lastly use the mitigation metrics to",
    "start": "2120880",
    "end": "2126579"
  },
  {
    "text": "prevent potential attacks and with that thank you thank you",
    "start": "2126579",
    "end": "2132010"
  },
  {
    "text": "[Applause]",
    "start": "2132010",
    "end": "2135609"
  }
]