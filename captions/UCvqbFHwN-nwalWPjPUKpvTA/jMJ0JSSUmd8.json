[
  {
    "text": "great uh hi everyone my name is RM and thank you for joining our talk today",
    "start": "1520",
    "end": "8920"
  },
  {
    "text": "about giops rollbacks and database schema",
    "start": "8920",
    "end": "14040"
  },
  {
    "text": "changes so before we begin a few words about myself so over",
    "start": "14040",
    "end": "20800"
  },
  {
    "text": "the past four years I've been the CTO and co-founder of a company called arga",
    "start": "20800",
    "end": "25880"
  },
  {
    "text": "it's part of my job I have the pleasure of being the co-maintainer of two fairly large open- Source projects the first of",
    "start": "25880",
    "end": "33840"
  },
  {
    "text": "them is called an an is an Entity framework for go uh it was started by my",
    "start": "33840",
    "end": "39840"
  },
  {
    "text": "co-founder when he was working at Facebook today it's part of the Linux foundation and the second one is called",
    "start": "39840",
    "end": "45719"
  },
  {
    "text": "Atlas Atlas is a database schema management tool and we will be diving a",
    "start": "45719",
    "end": "50920"
  },
  {
    "text": "bit into it in the last portion of this talk so today we are talking about",
    "start": "50920",
    "end": "58640"
  },
  {
    "text": "rollbacks and roll backs in the context of the people sitting in this room of software delivery is all about undoing",
    "start": "58640",
    "end": "66320"
  },
  {
    "text": "some change or returning the system to a uh previous stable",
    "start": "66320",
    "end": "73000"
  },
  {
    "text": "State and rollbacks are a very important capability for teams that are doing",
    "start": "73000",
    "end": "80280"
  },
  {
    "text": "software delivery specifically when we are looking at a metric that is called",
    "start": "80280",
    "end": "87119"
  },
  {
    "text": "mttr I'm sure many of you know about this but but to recap mttr means the",
    "start": "87119",
    "end": "93040"
  },
  {
    "text": "mean time to recover so we deploy changes our developers uh evolve our",
    "start": "93040",
    "end": "101240"
  },
  {
    "text": "application we deploy it to production we make configuration changes we do all sorts of stuff and at some point",
    "start": "101240",
    "end": "110280"
  },
  {
    "text": "sometimes we have an outage we deploy a bad change it might be a",
    "start": "110280",
    "end": "115960"
  },
  {
    "text": "configuration uh change it might be a code problem it might be something else",
    "start": "115960",
    "end": "121280"
  },
  {
    "text": "but in any case our system is now suffering from some problem our business",
    "start": "121280",
    "end": "126680"
  },
  {
    "text": "objectives are uh harmed by this and we want to fix it so in general we have two",
    "start": "126680",
    "end": "132640"
  },
  {
    "text": "paths to recovering from an outage one is to tr as the issue try to",
    "start": "132640",
    "end": "139319"
  },
  {
    "text": "look at the metrics logs traces whatever we can uh to understand what is causing the issue issue a fix deploy a new",
    "start": "139319",
    "end": "147720"
  },
  {
    "text": "version and rejoice our problem is resolved alternatively",
    "start": "147720",
    "end": "154480"
  },
  {
    "text": "sometimes we don't have time sometimes we don't understand the problem well enough and we just want to return to the",
    "start": "154480",
    "end": "161519"
  },
  {
    "text": "previous known uh stable version this is called the roll back and whatever path your team chooses",
    "start": "161519",
    "end": "170920"
  },
  {
    "text": "if we look on aggregate at the average time that it takes our team to recover from a production outage we call this",
    "start": "170920",
    "end": "178159"
  },
  {
    "text": "the mttr and it's it's a very important metric if you want to provide good service to your a reliable service to",
    "start": "178159",
    "end": "185400"
  },
  {
    "text": "your customers now implementing an undo button in a client side application like",
    "start": "185400",
    "end": "192760"
  },
  {
    "text": "a word processor or a photo editor is not an easy task but it's",
    "start": "192760",
    "end": "198120"
  },
  {
    "text": "pretty straightforward you need to keep track of the different changes the user makes and when they hit command Z you go",
    "start": "198120",
    "end": "206519"
  },
  {
    "text": "back to a previous state but how is it even",
    "start": "206519",
    "end": "211959"
  },
  {
    "text": "possible to roll back a distributed application like the cloud native",
    "start": "211959",
    "end": "217920"
  },
  {
    "text": "applications that the people in this room are managing today which are comprised of hundreds of moving parts so",
    "start": "217920",
    "end": "225200"
  },
  {
    "text": "there is no one component that we can say let's return that to the last known",
    "start": "225200",
    "end": "230480"
  },
  {
    "text": "uh stable State well to answer that I want to offer a a look at an idea that",
    "start": "230480",
    "end": "236840"
  },
  {
    "text": "is described in the book accelerate by the authors Nicole",
    "start": "236840",
    "end": "242680"
  },
  {
    "text": "forren um jez humble and Jean Kim and they say something like this it",
    "start": "242680",
    "end": "251079"
  },
  {
    "text": "should be possible to provision our environments and build test and deploy our software in a fully automated",
    "start": "251079",
    "end": "256840"
  },
  {
    "text": "fashion purely from information stored in Source control and they call this",
    "start": "256840",
    "end": "264759"
  },
  {
    "text": "idea comprehensive configuration management now",
    "start": "264759",
    "end": "270680"
  },
  {
    "text": "if we have achieved comprehensive configuration management meaning we can",
    "start": "270680",
    "end": "276400"
  },
  {
    "text": "restore a system or provision our system from any specific commit in git in",
    "start": "276400",
    "end": "281919"
  },
  {
    "text": "theory rolling back is simply git revert the commit that you want out and we",
    "start": "281919",
    "end": "287639"
  },
  {
    "text": "should be found we should be fine but how do we do that in practice",
    "start": "287639",
    "end": "293840"
  },
  {
    "text": "this is an abstract idea we need a concrete implementation in order to be able to use it in our day-to-day lives",
    "start": "293840",
    "end": "300680"
  },
  {
    "text": "well from this idea we can see in the past decade stem two",
    "start": "300680",
    "end": "307840"
  },
  {
    "text": "similar uh ideas one is infrastructure as code AS popularized by projects like",
    "start": "307840",
    "end": "314000"
  },
  {
    "text": "terraform and the second one that we will be talking about today is giops with projects like Argo CD and flux CD",
    "start": "314000",
    "end": "320479"
  },
  {
    "text": "in the cncf now what giops gave us is a",
    "start": "320479",
    "end": "327800"
  },
  {
    "text": "concrete strategy and also a set of concrete tools that allow us to",
    "start": "327800",
    "end": "333000"
  },
  {
    "text": "provision the system in a stable way from a specific commit in git this is",
    "start": "333000",
    "end": "340919"
  },
  {
    "text": "why we call it git Ops and in",
    "start": "340919",
    "end": "346360"
  },
  {
    "text": "theory or actually in many cases also in practice giops gives us a concrete",
    "start": "346360",
    "end": "352520"
  },
  {
    "text": "answer of how to do comprehensive configuration management and if we simply revert a",
    "start": "352520",
    "end": "358400"
  },
  {
    "text": "commit our Aro CD or our controller would detect the change the state is",
    "start": "358400",
    "end": "365759"
  },
  {
    "text": "reconciled and our applications back to the stable",
    "start": "365759",
    "end": "371440"
  },
  {
    "text": "version end of talk but we know that things are more",
    "start": "371440",
    "end": "377120"
  },
  {
    "text": "nuanced and and more complicated and I guess that's why you you chose to attend this talk so let's see",
    "start": "377120",
    "end": "383000"
  },
  {
    "text": "how we're now starting the second part of the talk which is about the challenges uh when you teams try to",
    "start": "383000",
    "end": "389919"
  },
  {
    "text": "apply giops in practice and to fully adopt this mentality so famously giops and",
    "start": "389919",
    "end": "397039"
  },
  {
    "text": "kubernetes in general is super effective at managing stateless resources like",
    "start": "397039",
    "end": "403720"
  },
  {
    "text": "application containers think about it all you need to do to deploy a new version of an",
    "start": "403720",
    "end": "410120"
  },
  {
    "text": "application in kubernetes is to update the deployment object maybe change the container image or some",
    "start": "410120",
    "end": "417120"
  },
  {
    "text": "configuration kuber netics detects this spins up a new replica set replica set",
    "start": "417120",
    "end": "422479"
  },
  {
    "text": "spins up new pods we run health checks when everything is determined to be okay we start destroying the old",
    "start": "422479",
    "end": "430120"
  },
  {
    "text": "environment and this just works great for the stateless components but what do",
    "start": "430120",
    "end": "436800"
  },
  {
    "text": "we do about those uh stateful workloads",
    "start": "436800",
    "end": "442080"
  },
  {
    "text": "like our database or even if our database is running outside of kubernetes it still",
    "start": "442080",
    "end": "447520"
  },
  {
    "text": "has a database schema that is related to our application what would happen if we",
    "start": "447520",
    "end": "453680"
  },
  {
    "text": "apply the same strategy as we did for containers for our database schema",
    "start": "453680",
    "end": "459680"
  },
  {
    "text": "changes so just as a reminder why this is important and relevant to almost any",
    "start": "459680",
    "end": "466199"
  },
  {
    "text": "application when our data model change changes our database schema needs to",
    "start": "466199",
    "end": "472560"
  },
  {
    "text": "evolve as well so for example if I have a python class representing a user",
    "start": "472560",
    "end": "478240"
  },
  {
    "text": "entity and I want to add had a birthday attribute before deploying my backend code I have to create this column in the",
    "start": "478240",
    "end": "486000"
  },
  {
    "text": "database otherwise there would be an incompatibility between the backend and the database causing an",
    "start": "486000",
    "end": "493520"
  },
  {
    "text": "outage so let's say we could spin up a new database provision the new schema",
    "start": "493560",
    "end": "500720"
  },
  {
    "text": "from scratch run some health checks maybe some queries to make sure that they",
    "start": "500720",
    "end": "506039"
  },
  {
    "text": "work and finally kill our old database so this would get the job done",
    "start": "506039",
    "end": "513760"
  },
  {
    "text": "but we would probably be out of our own job so maybe that's not such a great idea so we need some specialized",
    "start": "513760",
    "end": "520919"
  },
  {
    "text": "software some that is built with databases in mind that would help us to",
    "start": "520919",
    "end": "528000"
  },
  {
    "text": "evolve uh the database schema as our application is evolving and the most common approach in",
    "start": "528000",
    "end": "533519"
  },
  {
    "text": "the industry is something that is called migration tools raise your hand if you've ever used a migration ation tool",
    "start": "533519",
    "end": "541200"
  },
  {
    "text": "yeah okay so just a sanity check for me so to summarize I've my companies in",
    "start": "541200",
    "end": "548480"
  },
  {
    "text": "this space we're building uh database schema management software so we researched a lot into this topic and the",
    "start": "548480",
    "end": "556120"
  },
  {
    "text": "vast vast majority of tools work with this Paradigm where when I want to initiate a change as a developer I need",
    "start": "556120",
    "end": "563200"
  },
  {
    "text": "to plan a migration sometimes I do it in SQL sometimes I do it in a specialized",
    "start": "563200",
    "end": "568320"
  },
  {
    "text": "DSL some sometimes I do it with my uh programming language but the concept remains that I need to",
    "start": "568320",
    "end": "575959"
  },
  {
    "text": "describe the uh change in a migration script and typically I do one migration script that",
    "start": "575959",
    "end": "584440"
  },
  {
    "text": "is named the up migration so if I'm moving forward how do I provision the change and in order to be able to",
    "start": "584440",
    "end": "591240"
  },
  {
    "text": "provide a roll back uh capability most tools also provide a way or demand the",
    "start": "591240",
    "end": "598200"
  },
  {
    "text": "developer also PL the inverse operation so that I can go back in time to the",
    "start": "598200",
    "end": "603360"
  },
  {
    "text": "previous ver version a few months ago my co-founder",
    "start": "603360",
    "end": "610680"
  },
  {
    "text": "and good friend Ariel published a blog post titled uh the myth of down",
    "start": "610680",
    "end": "617000"
  },
  {
    "text": "migrations and excuse D to for a wild hallucination on the spelling of the",
    "start": "617000",
    "end": "623600"
  },
  {
    "text": "word migration I tried to get it to spell it right didn't work and in the",
    "start": "623600",
    "end": "629959"
  },
  {
    "text": "process of uh our work in in arga working on Atlas we've interviewed over",
    "start": "629959",
    "end": "636880"
  },
  {
    "text": "100 uh engineering team about their uh practices when it comes to",
    "start": "636880",
    "end": "642959"
  },
  {
    "text": "managing database schemas and we found something very interesting that down",
    "start": "642959",
    "end": "648000"
  },
  {
    "text": "migrations are very very rarely used in production in local development sure",
    "start": "648000",
    "end": "653320"
  },
  {
    "text": "it's very convenient to be able to revert the Chang as I'm experimenting but in practice in production very very",
    "start": "653320",
    "end": "661959"
  },
  {
    "text": "rare and we um try to dig deep into this topic because it's a very widely",
    "start": "661959",
    "end": "668880"
  },
  {
    "text": "accepted um practice and we released when we released Atlas we released Atlas",
    "start": "668880",
    "end": "674440"
  },
  {
    "text": "without down migrations because of various considerations that you will see and everybody had this expectation that",
    "start": "674440",
    "end": "681399"
  },
  {
    "text": "if you're doing a migration tool it needs to have down migrations yet nobody uses them so",
    "start": "681399",
    "end": "687680"
  },
  {
    "text": "why first of all down migrations embody a very naive",
    "start": "687680",
    "end": "695079"
  },
  {
    "text": "assumption about the way uh changes happen and if you think about it the way",
    "start": "695079",
    "end": "701240"
  },
  {
    "text": "down migrations work is that they assume that all of the up statements were",
    "start": "701240",
    "end": "706279"
  },
  {
    "text": "executed successfully let me explain this with an example so suppose our migration from version 4 to version 5",
    "start": "706279",
    "end": "713880"
  },
  {
    "text": "contains three statements create table user profiles alter table table users",
    "start": "713880",
    "end": "720160"
  },
  {
    "text": "modify column email text to be not null we're adding a nullability con a not null",
    "start": "720160",
    "end": "725680"
  },
  {
    "text": "constraint and another create table typical migration when we are modifying",
    "start": "725680",
    "end": "731320"
  },
  {
    "text": "our data model as our application evolves when we deploy this the the",
    "start": "731320",
    "end": "736800"
  },
  {
    "text": "first statement will most likely succeed but the state the second",
    "start": "736800",
    "end": "741920"
  },
  {
    "text": "one actually in some cases will fail and if you think about it if this table",
    "start": "741920",
    "end": "747720"
  },
  {
    "text": "already exists and already contains data we might get a constraint violation basically we're trying to enforce a not",
    "start": "747720",
    "end": "753519"
  },
  {
    "text": "null value on a column that already contains uh null values so this will",
    "start": "753519",
    "end": "759120"
  },
  {
    "text": "fail and what will happen to the third statement it will not",
    "start": "759120",
    "end": "764480"
  },
  {
    "text": "run okay so our deployment failed now we want to",
    "start": "764480",
    "end": "771519"
  },
  {
    "text": "roll back to go back to the previous version so we can fix whatever we need to fix and move forward with our lives",
    "start": "771519",
    "end": "778720"
  },
  {
    "text": "so our down migration the first statement would be drop table user roles",
    "start": "778720",
    "end": "784519"
  },
  {
    "text": "which of course would fail because the third statement in our previous migration was not executed so now we are",
    "start": "784519",
    "end": "791720"
  },
  {
    "text": "stuck in this limbo State we're not at version four we're not at vers than five we tried to go back from 5 to four but",
    "start": "791720",
    "end": "797480"
  },
  {
    "text": "we're somewhere in this limbo in the middle secondly is that down migrations",
    "start": "797480",
    "end": "805040"
  },
  {
    "text": "are an ample opport provide an apple ample opportunity for data loss and I'll try to",
    "start": "805040",
    "end": "812360"
  },
  {
    "text": "explain if you think about it quite obvious that the inverse of an additive",
    "start": "812360",
    "end": "817480"
  },
  {
    "text": "operation is destructive and let's see this on a timeline so suppose we're deploying some change and we created a",
    "start": "817480",
    "end": "824959"
  },
  {
    "text": "table let's say the migration succeed the application version roll out succeeded everything technically on",
    "start": "824959",
    "end": "831120"
  },
  {
    "text": "paper is okay but we discovered some issue uh after a few hours now in The",
    "start": "831120",
    "end": "838560"
  },
  {
    "text": "Intern the application is up and data is being written into our new table at some point",
    "start": "838560",
    "end": "844320"
  },
  {
    "text": "for some business reason or some bug we later discover we decide to roll back",
    "start": "844320",
    "end": "850000"
  },
  {
    "text": "the change now if you think about our down migration what is the down migration from create table is drop",
    "start": "850000",
    "end": "856800"
  },
  {
    "text": "table which of course means that all of the data that was written in these few hours will be lost so if we naively",
    "start": "856800",
    "end": "863680"
  },
  {
    "text": "execute our down migrations without considering the state of the target table we might end uh end up deleting",
    "start": "863680",
    "end": "870440"
  },
  {
    "text": "precious data to our business and users the third thing which is we are",
    "start": "870440",
    "end": "877800"
  },
  {
    "text": "getting closer to to our actual uh topic today is that down migrations are in",
    "start": "877800",
    "end": "884000"
  },
  {
    "text": "various ways incompatible with modern cicd practices so as we said before in",
    "start": "884000",
    "end": "892759"
  },
  {
    "text": "theory if we accept the the idea of comprehensive configuration management or of giops",
    "start": "892759",
    "end": "899240"
  },
  {
    "text": "rolling back to a previous version is simply doing git revert and deploying that",
    "start": "899240",
    "end": "905199"
  },
  {
    "text": "commit however this does not work for schema migrations let me take a sip of",
    "start": "905199",
    "end": "914399"
  },
  {
    "text": "water and why is that let's show why using a concrete",
    "start": "915320",
    "end": "922240"
  },
  {
    "text": "example with Argo CD so the Argo CD",
    "start": "922240",
    "end": "927600"
  },
  {
    "text": "documentations suggest that we run schema migration using a job that is annotated with a prync hook what this",
    "start": "927600",
    "end": "936319"
  },
  {
    "text": "means is that we create a job a job is a way to run a oneoff pod until it runs to",
    "start": "936319",
    "end": "941519"
  },
  {
    "text": "completion we annotate it with Argo CD annotations with a Precinct and we specify a container to",
    "start": "941519",
    "end": "949079"
  },
  {
    "text": "execute this is usually a container that contains our migration tool plus the relevant migrations from the specific",
    "start": "949079",
    "end": "955880"
  },
  {
    "text": "git commit that we are deploying now what is supposed to happen or this",
    "start": "955880",
    "end": "962839"
  },
  {
    "text": "will happen correctly for the up migration the user creates a git commit",
    "start": "962839",
    "end": "968079"
  },
  {
    "text": "with a new Target version Argo CD detects the change the prync job is",
    "start": "968079",
    "end": "974240"
  },
  {
    "text": "recognized by Aro CD because of these annotations the precinct job runs before our application is deployed the",
    "start": "974240",
    "end": "980880"
  },
  {
    "text": "migration tool upgrades the database and we are we have arrived at our",
    "start": "980880",
    "end": "986360"
  },
  {
    "text": "destination which is uh where we want to be but what happens when we roll back so",
    "start": "986360",
    "end": "992600"
  },
  {
    "text": "let's take a closer look at this container image and consider what will happen so let's say we were at version",
    "start": "992600",
    "end": "1000360"
  },
  {
    "text": "four a commit representing version four and we have uh upgraded to ver to",
    "start": "1000360",
    "end": "1006360"
  },
  {
    "text": "version five now we have rolled back we are trying to run the migration",
    "start": "1006360",
    "end": "1011720"
  },
  {
    "text": "container for the previous version now in most figuration tools that I know of",
    "start": "1011720",
    "end": "1018360"
  },
  {
    "text": "the command line uh the command that we use for up and down migrations is",
    "start": "1018360",
    "end": "1024079"
  },
  {
    "text": "different so it can be migrate and roll back or migrate up and migrate down but it's not the same command meaning that",
    "start": "1024079",
    "end": "1031918"
  },
  {
    "text": "if we just naively run a job to to run the migrations for version four it will",
    "start": "1031919",
    "end": "1039038"
  },
  {
    "text": "not run the roll back command so we need some mechanism to bake in into this uh",
    "start": "1039039",
    "end": "1045959"
  },
  {
    "text": "migration image that will be able to understand the context are we in a roll back situation in which case we need to",
    "start": "1045959",
    "end": "1052400"
  },
  {
    "text": "run them the roll back container or the roll back command or are we migrating up",
    "start": "1052400",
    "end": "1058039"
  },
  {
    "text": "in which case we need to run the up uh migrations even if we manage to do that",
    "start": "1058039",
    "end": "1063480"
  },
  {
    "text": "and we insert some script there that inspects the current revision understands um what it needs to do we",
    "start": "1063480",
    "end": "1070960"
  },
  {
    "text": "still have uh a bigger problem which is that the down migrations needed to go",
    "start": "1070960",
    "end": "1077000"
  },
  {
    "text": "back from version 5 to version 4 did not exist in the commit that corresponds to",
    "start": "1077000",
    "end": "1083440"
  },
  {
    "text": "version four so this container image doesn't contain the instructions needed",
    "start": "1083440",
    "end": "1088640"
  },
  {
    "text": "to go back in time which of course is very unfortunate what will happen in practice",
    "start": "1088640",
    "end": "1095960"
  },
  {
    "text": "most migration tools will silently ignore the situation so they will see that the database is already at a more",
    "start": "1095960",
    "end": "1103159"
  },
  {
    "text": "advanced version and will simply not do anything this poses two issues one is",
    "start": "1103159",
    "end": "1110720"
  },
  {
    "text": "that the database is no longer in sync with the information stored in Source",
    "start": "1110720",
    "end": "1116760"
  },
  {
    "text": "control violating the most basic tenant of the git Ops philosophy the second",
    "start": "1116760",
    "end": "1124760"
  },
  {
    "text": "which is maybe more severe than a theoretical uh problem is that if we",
    "start": "1124760",
    "end": "1130679"
  },
  {
    "text": "want to reconcile the database with the desired State we actually need to manually intervene so this typically",
    "start": "1130679",
    "end": "1136919"
  },
  {
    "text": "looks like somebody uh obtaining direct network access to the database and",
    "start": "1136919",
    "end": "1142000"
  },
  {
    "text": "executing some command or some script to fix the issue which is of course something we want to avoid especially",
    "start": "1142000",
    "end": "1148960"
  },
  {
    "text": "when this database contains our users data so pretty nasty problem at hand but",
    "start": "1148960",
    "end": "1158039"
  },
  {
    "text": "luckily it's not unique to database migration if a similar issue occurs in kubernetes whenever we try to manage a",
    "start": "1158039",
    "end": "1165039"
  },
  {
    "text": "state full resource under this the cative Resource Management Paradigm and",
    "start": "1165039",
    "end": "1173080"
  },
  {
    "text": "some very smart people in our community have managed to distill a design pattern",
    "start": "1173080",
    "end": "1180159"
  },
  {
    "text": "that can actually handle this incompatibility uh between the two",
    "start": "1180159",
    "end": "1185280"
  },
  {
    "text": "worlds and this is called the operator pattern so an operator is typically",
    "start": "1185280",
    "end": "1191559"
  },
  {
    "text": "comprised of two important pieces one it introduces a new new CR these new custom",
    "start": "1191559",
    "end": "1199799"
  },
  {
    "text": "resources custom resource definitions basically extending the kubernetes API",
    "start": "1199799",
    "end": "1206320"
  },
  {
    "text": "such that we are able to uh describe new kinds of objects or new kinds of resources that we want to manage from",
    "start": "1206320",
    "end": "1213200"
  },
  {
    "text": "within kubernetes now extending the API is great but we actually need something to be able to reconcile or to manage",
    "start": "1213200",
    "end": "1220520"
  },
  {
    "text": "these resources and that thing is called a controller a controller is a specialized piece of",
    "start": "1220520",
    "end": "1227280"
  },
  {
    "text": "software that listens to changes for these custom resources in the kubernetes API it needs to react it needs to have",
    "start": "1227280",
    "end": "1235120"
  },
  {
    "text": "the to codify the operational knowledge needed for example to run schema",
    "start": "1235120",
    "end": "1242080"
  },
  {
    "text": "migrations so today I want to present to you a piece of software that that I had a pleasure of of working on one of on",
    "start": "1242159",
    "end": "1250080"
  },
  {
    "text": "its initial version and today it's my team that's maintaining and it's called The Atlas",
    "start": "1250080",
    "end": "1255760"
  },
  {
    "text": "operator the atlas operator is a kubernetes operator purpose built for",
    "start": "1255760",
    "end": "1262080"
  },
  {
    "text": "managing schema changes from within kubernetes you can find the source code on",
    "start": "1262080",
    "end": "1268080"
  },
  {
    "text": "GitHub the operator wraps another project that we manage which is called Atlas Atlas lets you manage your",
    "start": "1268080",
    "end": "1274799"
  },
  {
    "text": "database schema as code we open source it in 2021 has uh quite a large adoption",
    "start": "1274799",
    "end": "1281559"
  },
  {
    "text": "uh in our industry and because the operator B",
    "start": "1281559",
    "end": "1287120"
  },
  {
    "text": "bakes in all of the capabil ities that come from Atlas it uh inherits two very",
    "start": "1287120",
    "end": "1292960"
  },
  {
    "text": "important capabilities one is a sophisticated migration planner so it's something that",
    "start": "1292960",
    "end": "1300320"
  },
  {
    "text": "connect can connect to a Target database can read the desired State and can",
    "start": "1300320",
    "end": "1305360"
  },
  {
    "text": "calculate a safe migration plan to go from point A to point B and the second",
    "start": "1305360",
    "end": "1312000"
  },
  {
    "text": "one is a migration analysis engine you can think about it like static code",
    "start": "1312000",
    "end": "1317640"
  },
  {
    "text": "analysis but for schema immigration so it can look at a set of plan changes and",
    "start": "1317640",
    "end": "1323200"
  },
  {
    "text": "understand okay this statement might actually lock this table for rights which can cause downtime or here this is",
    "start": "1323200",
    "end": "1329600"
  },
  {
    "text": "a breaking change relative to previous versions of our application",
    "start": "1329600",
    "end": "1336000"
  },
  {
    "text": "so the atlas operator introduces two crds that correspond to two kinds of",
    "start": "1336000",
    "end": "1343960"
  },
  {
    "text": "workflows that are common in in uh schema management with Atlas the first first one is called an atlas schema",
    "start": "1343960",
    "end": "1351120"
  },
  {
    "text": "Atlas schema is for declarative schema migrations it has two important parts in the configuration one is the URL this is the",
    "start": "1351120",
    "end": "1359159"
  },
  {
    "text": "target database the connection string to the Target database that we are managing of course in your production system you",
    "start": "1359159",
    "end": "1365320"
  },
  {
    "text": "would store this in secret and not put the credentials in clear text and the",
    "start": "1365320",
    "end": "1371919"
  },
  {
    "text": "second part is the schema in this case we are defining the desired state of the database using the create table",
    "start": "1371919",
    "end": "1377760"
  },
  {
    "text": "statement but we support various other uh formats the desired schema can be",
    "start": "1377760",
    "end": "1383799"
  },
  {
    "text": "stored here in line on the crd it can be stored in a config map or in a schema registry in some remote",
    "start": "1383799",
    "end": "1391880"
  },
  {
    "text": "location the second kind of uh crd that we have with our Atlas operator is an",
    "start": "1391880",
    "end": "1399039"
  },
  {
    "text": "atlas migration which supports a more classic version migration flow in here",
    "start": "1399039",
    "end": "1404840"
  },
  {
    "text": "we still have the URL to the Target database and we uh reference some config",
    "start": "1404840",
    "end": "1410559"
  },
  {
    "text": "map that contains the actual uh migration files in this here also we can",
    "start": "1410559",
    "end": "1416600"
  },
  {
    "text": "inline it in the custom resource or reference something that it's stored uh",
    "start": "1416600",
    "end": "1421640"
  },
  {
    "text": "remotely if we don't want the bloated object in our um kubernetes",
    "start": "1421640",
    "end": "1427840"
  },
  {
    "text": "API some key features of the operator that make it uh stand out in the",
    "start": "1427840",
    "end": "1433159"
  },
  {
    "text": "ecosystem so we have something called lint policies which allow us to evaluate AIC specific set of changes if it",
    "start": "1433159",
    "end": "1439799"
  },
  {
    "text": "imposes some uh some risk div policies allow us to control uh Define policies",
    "start": "1439799",
    "end": "1446559"
  },
  {
    "text": "that govern the way in which Atlas will plan changes for us so for example if",
    "start": "1446559",
    "end": "1451720"
  },
  {
    "text": "you are using postgress and you have a large table and you don't want indexes to be created or you want always indexes",
    "start": "1451720",
    "end": "1459080"
  },
  {
    "text": "to be created concurrently so posters doesn't lock your table you can tell Atlas these policies and it will plan",
    "start": "1459080",
    "end": "1465200"
  },
  {
    "text": "the changes according to what you want down migrations are not defined ahead of",
    "start": "1465200",
    "end": "1471080"
  },
  {
    "text": "time Atlas knows how to look at the migration it's reverting and calculate in line the uh the specific",
    "start": "1471080",
    "end": "1478679"
  },
  {
    "text": "statements pre-immigration checks allowed us to check stuff like this table that we're dropping is it really empty can we uh proceed or",
    "start": "1478679",
    "end": "1486320"
  },
  {
    "text": "not and uh it integrates with a Argo CD",
    "start": "1486320",
    "end": "1491480"
  },
  {
    "text": "syn waves so that you can annotate your schema resources until Argo it needs to",
    "start": "1491480",
    "end": "1497080"
  },
  {
    "text": "do the migrations before uh it upgrades the application so you don't have a period of",
    "start": "1497080",
    "end": "1505120"
  },
  {
    "text": "incompatibility okay it's demo time and like my the the previous presenters it's",
    "start": "1505279",
    "end": "1510720"
  },
  {
    "text": "a pre-recorded demo uh but let's see how rollbacks actually happen with the atlas",
    "start": "1510720",
    "end": "1517520"
  },
  {
    "text": "operator uh and Argo CD so I have here an Argo application it",
    "start": "1517520",
    "end": "1522600"
  },
  {
    "text": "has a post database and an atlas schema custom resource here I have a very simple table just for this demo table T1",
    "start": "1522600",
    "end": "1529600"
  },
  {
    "text": "with one column I want to add a column to this table I'm now going to my source",
    "start": "1529600",
    "end": "1535039"
  },
  {
    "text": "code I'm modifying the custom resource I'm adding a new uh column hello cubec",
    "start": "1535039",
    "end": "1540200"
  },
  {
    "text": "con a text column I'm going to create a pull request this is just so it's more",
    "start": "1540200",
    "end": "1546880"
  },
  {
    "text": "uh easy for me to revert it in the UI um later once it's ready I can merge this",
    "start": "1546880",
    "end": "1554440"
  },
  {
    "text": "to my master Branch I'm now going to refresh my application on Argo CD and",
    "start": "1554440",
    "end": "1561480"
  },
  {
    "text": "you will see that it recognized that this resource has changed and if we look we see that the new column was created",
    "start": "1561480",
    "end": "1569159"
  },
  {
    "text": "now we're not happy with the change for whatever reason we want to revert it okay we go back to our pull request we",
    "start": "1569159",
    "end": "1576720"
  },
  {
    "text": "hit revert this is the git revert",
    "start": "1576720",
    "end": "1582039"
  },
  {
    "text": "operation we're going to merge this code back into git once it is merged",
    "start": "1582039",
    "end": "1589960"
  },
  {
    "text": "merged once it is merged we can resync our application Argo CD will detect the",
    "start": "1589960",
    "end": "1596080"
  },
  {
    "text": "change the atlas operator applies the change and lo and behold we have roll",
    "start": "1596080",
    "end": "1601240"
  },
  {
    "text": "backs with declarative schema management so before we wrap up a few",
    "start": "1601240",
    "end": "1610279"
  },
  {
    "text": "advantages of the operator pattern why it's better than just blindly running a job one is the operator codifies",
    "start": "1610279",
    "end": "1617679"
  },
  {
    "text": "operational knowledge so it has a piece in the code that can understand the difference between up and down and it",
    "start": "1617679",
    "end": "1623840"
  },
  {
    "text": "knows what it needs to do because it's different kind of operation the operator has access to",
    "start": "1623840",
    "end": "1629960"
  },
  {
    "text": "relevant information it can query the target database to check if a table is empty it can look in its history some",
    "start": "1629960",
    "end": "1636960"
  },
  {
    "text": "state that it stores what the migration directory looked like in the past it has intelligent diffing capabilities for",
    "start": "1636960",
    "end": "1643399"
  },
  {
    "text": "both declarative inversion workflows it can run safety checks to make sure we don't shoot ourself in the foot by",
    "start": "1643399",
    "end": "1649919"
  },
  {
    "text": "accident and also something that we're uh announcing this week in some cases",
    "start": "1649919",
    "end": "1655919"
  },
  {
    "text": "the operator cannot make the final decision for you what you need to do and there is an ability to uh integrate",
    "start": "1655919",
    "end": "1663679"
  },
  {
    "text": "approval flows and editing the plans from your",
    "start": "1663679",
    "end": "1669600"
  },
  {
    "text": "side key takeaways stuff that I hope you take home with",
    "start": "1670039",
    "end": "1675440"
  },
  {
    "text": "you so roll backs are a critical capability to maintain a low mttr in",
    "start": "1675440",
    "end": "1682000"
  },
  {
    "text": "theory getop solves all of this simply revert and commit datab based migrations",
    "start": "1682000",
    "end": "1687760"
  },
  {
    "text": "pose a unique challenge similar to other stateful resources to the G Up's",
    "start": "1687760",
    "end": "1694519"
  },
  {
    "text": "philosophy using existing migration tools gives us a false confidence that",
    "start": "1694519",
    "end": "1700640"
  },
  {
    "text": "we have a way to roll back if we want but if we look in practice we see that things are not so",
    "start": "1700640",
    "end": "1706840"
  },
  {
    "text": "bright and the operator pattern provides us a way to deal with stateful resources",
    "start": "1706840",
    "end": "1714919"
  },
  {
    "text": "finally the atlas operator can be used to handle schema changes for git Ops",
    "start": "1714919",
    "end": "1723159"
  },
  {
    "text": "workflows so uh before we uh head to questions thank you a lot for your time",
    "start": "1723159",
    "end": "1728840"
  },
  {
    "text": "and you can ping me on X invite you to try Atlas and we have a few minutes for",
    "start": "1728840",
    "end": "1734720"
  },
  {
    "text": "questions [Applause]",
    "start": "1734720",
    "end": "1743159"
  },
  {
    "text": "yes you mentioned early on one of the issues was the potential data loss",
    "start": "1743159",
    "end": "1748559"
  },
  {
    "text": "migration I don't this isn't directly addressing that particular problem it",
    "start": "1748559",
    "end": "1754559"
  },
  {
    "text": "well with Atlas you can configure the way that you want it to deal with a",
    "start": "1754559",
    "end": "1760640"
  },
  {
    "text": "destructive operation so there are two strategies basically that you can use with Atlas one is something that we call",
    "start": "1760640",
    "end": "1766159"
  },
  {
    "text": "pre-migration checks so you can make it such that before Atlas drops it asserts that the table is empty in which case",
    "start": "1766159",
    "end": "1772039"
  },
  {
    "text": "it's not really a destructive operation and the other thing you can do is you can define a diff policy that in certain",
    "start": "1772039",
    "end": "1778960"
  },
  {
    "text": "situations to Omit this uh drop operation so you can keep the column around knowing that when you return back",
    "start": "1778960",
    "end": "1784799"
  },
  {
    "text": "up it's still going to be there okay yes yeah um so I know with Argo CD you have",
    "start": "1784799",
    "end": "1791919"
  },
  {
    "text": "your Canary roll outs um is there any way to tie into your canaries to say",
    "start": "1791919",
    "end": "1797440"
  },
  {
    "text": "like hey this is a destructive operation like don't you know like either full",
    "start": "1797440",
    "end": "1803960"
  },
  {
    "text": "promote or don't promote this thing like don't do it only part way because like",
    "start": "1803960",
    "end": "1809200"
  },
  {
    "text": "you know sometimes when you have to do those destructive operations you're not going to be able to be in that two World",
    "start": "1809200",
    "end": "1815720"
  },
  {
    "text": "state where you're you know either you have to migrate and deploy your code at the same time or you need to roll it all",
    "start": "1815720",
    "end": "1822919"
  },
  {
    "text": "back at the same time so is there any concept of that so in general",
    "start": "1822919",
    "end": "1828279"
  },
  {
    "text": "databases and Canary releases are not exactly compatible because typically",
    "start": "1828279",
    "end": "1833960"
  },
  {
    "text": "there is one database so you can not have you can do a test on a separate environment for Atlas for example our",
    "start": "1833960",
    "end": "1841399"
  },
  {
    "text": "system Atlas cloud is a multi-tenant system we have a database per tenant so we can roll out stuff to specific",
    "start": "1841399",
    "end": "1847399"
  },
  {
    "text": "tenants and Route traffic by subdomain and do this kind of but if you have one big database I don't see how that kind",
    "start": "1847399",
    "end": "1854960"
  },
  {
    "text": "of quantum physics thing two realities uh exist in parallel is going to happen thank you yes yeah so I noticed",
    "start": "1854960",
    "end": "1863320"
  },
  {
    "text": "on your website you have like a list of all the different uh databases that you can connect to um do you have plans or",
    "start": "1863320",
    "end": "1870960"
  },
  {
    "text": "like a road map process for bringing in other database Management systems for example like trino or",
    "start": "1870960",
    "end": "1877880"
  },
  {
    "text": "Presto uh great question we have typically uh people ask for Integrations",
    "start": "1877880",
    "end": "1886320"
  },
  {
    "text": "in the gab issue tracker and we use that kind of as a proxy to",
    "start": "1886320",
    "end": "1891440"
  },
  {
    "text": "evaluate Community demand as uh yesterday I was in the startup",
    "start": "1891440",
    "end": "1897200"
  },
  {
    "text": "Fest uh discussing business models and and open source startups so naturally we",
    "start": "1897200",
    "end": "1902919"
  },
  {
    "text": "are directed by our Enterprise deals and customer that kind of tends to set priority but for example the we added",
    "start": "1902919",
    "end": "1909799"
  },
  {
    "text": "this year integration for click house and that was really based on demand and engagement on that issue and a lot of",
    "start": "1909799",
    "end": "1916360"
  },
  {
    "text": "people asking for it in Discord uh so we had a good clear signal that there was demand thank",
    "start": "1916360",
    "end": "1923240"
  },
  {
    "text": "you yes often times with the deployment uh we have a lot of schema changes as",
    "start": "1923240",
    "end": "1929720"
  },
  {
    "text": "well as a huge number of data changes in C data manipulations um transformations",
    "start": "1929720",
    "end": "1936440"
  },
  {
    "text": "of various types um in addition to that we may not know that we would want",
    "start": "1936440",
    "end": "1943320"
  },
  {
    "text": "to do a roll back until some period of time within maybe hours after we bring it back up online and we get reports",
    "start": "1943320",
    "end": "1949639"
  },
  {
    "text": "from users that something is significantly wrong at which time we've had additional data entries put into the database that",
    "start": "1949639",
    "end": "1957000"
  },
  {
    "text": "are important to keep with this additional complexity is there any hope",
    "start": "1957000",
    "end": "1962159"
  },
  {
    "text": "in doing a rollback versus just restoring from a snap it's",
    "start": "1962159",
    "end": "1968519"
  },
  {
    "text": "it's a really really great questions question and I will say that I when we",
    "start": "1968519",
    "end": "1974679"
  },
  {
    "text": "plan roll backs we are looking mostly at the schema changes and we don't have a",
    "start": "1974679",
    "end": "1979840"
  },
  {
    "text": "mechanism yet to write the reverse data script also not all operations are reversible for example if you trunk it",
    "start": "1979840",
    "end": "1986440"
  },
  {
    "text": "to table there's no way to restore the data the the way that it helps me to think about this is like when you",
    "start": "1986440",
    "end": "1994080"
  },
  {
    "text": "upgrade a piece of software from a vendor so you know there's a different between major minor and Patch patches so",
    "start": "1994080",
    "end": "2000840"
  },
  {
    "text": "you expect a patch to be easily rollable but some upgrades are inherently more",
    "start": "2000840",
    "end": "2007360"
  },
  {
    "text": "more Ry so as an operation team I think we should have some way to flag these changes that are we need to be more",
    "start": "2007360",
    "end": "2014559"
  },
  {
    "text": "attentive to and perhaps to think about my team upgraded some key component in our in our authorization infrastructure",
    "start": "2014559",
    "end": "2020720"
  },
  {
    "text": "this week and you know we took the time to plan and most of the time things are just really streamlined but if we can uh",
    "start": "2020720",
    "end": "2027720"
  },
  {
    "text": "isolate and and tag specific changes that are going to be really unroll back aable then uh we should be more careful",
    "start": "2027720",
    "end": "2034600"
  },
  {
    "text": "and more more perhaps create some uh snapshot uh to restore from or or",
    "start": "2034600",
    "end": "2041519"
  },
  {
    "text": "something that is more specific good points thank you thank you yes um as one of the steps in a",
    "start": "2041519",
    "end": "2050398"
  },
  {
    "text": "prior slide you mentioned that humans be can be kept in the loop y I guess I'm wondering the intersection between just",
    "start": "2050399",
    "end": "2057320"
  },
  {
    "text": "approving the pr because it's valid SQL and if you could elaborate on that human",
    "start": "2057320",
    "end": "2062480"
  },
  {
    "text": "intervention yeah so I'd love to talk about it after but I will say a few",
    "start": "2062480",
    "end": "2067520"
  },
  {
    "text": "words because we have 30 seconds so the way I think about it is similar to uh autonomous vehicles in fair weather",
    "start": "2067520",
    "end": "2074358"
  },
  {
    "text": "conditions lots of cars autonomous cars today can drive you know if there's not",
    "start": "2074359",
    "end": "2079599"
  },
  {
    "text": "super complex traffic or not really bad weather conditions they can you know get get to the destination but it's very",
    "start": "2079599",
    "end": "2087358"
  },
  {
    "text": "important that when these cars have low confidence score that they're able to achieve the the test they they stop and",
    "start": "2087359",
    "end": "2093679"
  },
  {
    "text": "defer to a human so in a similar way we have uh you can can define something called review",
    "start": "2093679",
    "end": "2100640"
  },
  {
    "text": "policies in which you can tell the operator in this set of circumstances or",
    "start": "2100640",
    "end": "2106280"
  },
  {
    "text": "when you find some diagnostic that you think I need to review the operator stops the status of the crd is pending",
    "start": "2106280",
    "end": "2113320"
  },
  {
    "text": "review and there's a mechanism to either edit the plan or approve it but the operator will say I'm not sure I can",
    "start": "2113320",
    "end": "2119680"
  },
  {
    "text": "make progress so for this you know one of a 100 use case we need an operator to take a look at it okay great thank you",
    "start": "2119680",
    "end": "2128640"
  },
  {
    "text": "everyone for staying I'll be here if you want Atlas swag I have some",
    "start": "2128640",
    "end": "2135960"
  }
]