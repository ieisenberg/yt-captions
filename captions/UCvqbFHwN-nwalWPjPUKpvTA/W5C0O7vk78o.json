[
  {
    "text": "uh good afternoon everyone my name is Jun and I'm maintaining a bunch of EVPF",
    "start": "240",
    "end": "6319"
  },
  {
    "text": "related opensource projects in organization called Yomia BPF and I'm",
    "start": "6319",
    "end": "13120"
  },
  {
    "text": "also a PhD student in Yoshi Santa Claus today I'm going to talk about",
    "start": "13120",
    "end": "18960"
  },
  {
    "text": "something that has been around the software industry for a really long time as",
    "start": "18960",
    "end": "24279"
  },
  {
    "text": "industless software extensions and introduce our use eBPF runtime called",
    "start": "24279",
    "end": "30640"
  },
  {
    "text": "BPF time specifically I want to talk about why we extensions what make them",
    "start": "30640",
    "end": "37840"
  },
  {
    "text": "challenging to handle correctly and how our current",
    "start": "37840",
    "end": "43120"
  },
  {
    "text": "approach to manage extension might not be good enough there will introduce a new approach to manage extensions called",
    "start": "43239",
    "end": "51280"
  },
  {
    "text": "the extension interface model and our useless EPF runtime BPI time and how we",
    "start": "51280",
    "end": "58239"
  },
  {
    "text": "implement this principles uh this so we have been maintaining the BPI",
    "start": "58239",
    "end": "65198"
  },
  {
    "text": "time project for over two years uh the research paper of it is 10 application",
    "start": "65199",
    "end": "71280"
  },
  {
    "text": "safely and efficiently has recently been got accepted into OSBI this",
    "start": "71280",
    "end": "78280"
  },
  {
    "text": "year so uh there's a link you can Google search it or just visit it",
    "start": "78280",
    "end": "86440"
  },
  {
    "text": "[Music] okay",
    "start": "86440",
    "end": "91720"
  },
  {
    "text": "so why we need to build a new EB use EBPF runtime why we build this use EBPF",
    "start": "92560",
    "end": "99840"
  },
  {
    "text": "runtime as yet another expansion framework first software extensions are",
    "start": "99840",
    "end": "106079"
  },
  {
    "text": "has a very long history they included web servers database editors and like VS",
    "start": "106079",
    "end": "113520"
  },
  {
    "text": "code or and also some cloud native applications like Kubernetes extensions",
    "start": "113520",
    "end": "119680"
  },
  {
    "text": "and web assembly models in kernel they also have EBI programs and kernel",
    "start": "119680",
    "end": "127040"
  },
  {
    "text": "modules but there's a question a lot of people may ask why don't we just",
    "start": "128759",
    "end": "134160"
  },
  {
    "text": "integrate everything into the main code bases why do we need to use extensions",
    "start": "134160",
    "end": "140000"
  },
  {
    "text": "the short answer is uh we need flex flexibility and isolation we want",
    "start": "140000",
    "end": "145760"
  },
  {
    "text": "flexibility and customization because it makes our software adaptable user",
    "start": "145760",
    "end": "152400"
  },
  {
    "text": "administrator want to tweak things to make meet their specific requirements",
    "start": "152400",
    "end": "157760"
  },
  {
    "text": "without waiting for core developers to implement changes but flexibility",
    "start": "157760",
    "end": "162879"
  },
  {
    "text": "without isolation is risky extensions by definition they can be third party or at",
    "start": "162879",
    "end": "168800"
  },
  {
    "text": "least externally developed code you may trust your core engineering team but",
    "start": "168800",
    "end": "174560"
  },
  {
    "text": "trusting external code is a different story even if it's not malicious external code can have bugs causing",
    "start": "174560",
    "end": "182159"
  },
  {
    "text": "crashes performance degression or security vulnerabilities so you need to protect",
    "start": "182159",
    "end": "188560"
  },
  {
    "text": "your core applications that's why main you need to is have extensions but uh in",
    "start": "188560",
    "end": "195120"
  },
  {
    "text": "real world extensions can be buggy uh for example a few years back a",
    "start": "195120",
    "end": "202680"
  },
  {
    "text": "popular video stream believe suffers a serious performance production outage",
    "start": "202680",
    "end": "209040"
  },
  {
    "text": "because one of the engine's attention got stuck in an infinity loop",
    "start": "209040",
    "end": "214560"
  },
  {
    "text": "uh Apache HTTP server has similar issues where buff overflow bugs in ru based",
    "start": "214560",
    "end": "220640"
  },
  {
    "text": "module can crash and security host like radius and a lot of applications they also have things uh",
    "start": "220640",
    "end": "230000"
  },
  {
    "text": "that really has or big companies and cost a lot of",
    "start": "230000",
    "end": "235080"
  },
  {
    "text": "monies we recently like did did a study to CV reports from some open source",
    "start": "235080",
    "end": "240959"
  },
  {
    "text": "projects we searched all the CVs in this software and found there uh like more",
    "start": "240959",
    "end": "247200"
  },
  {
    "text": "than 1,000 CVs related to extensions in 17,000 total CVs from this project uh",
    "start": "247200",
    "end": "254959"
  },
  {
    "text": "what we found was that extension related vulnerabilities made up significant portion about 7% of all",
    "start": "254959",
    "end": "263240"
  },
  {
    "text": "CVS of them could lead to system crashes or data leakage so isolation and safety",
    "start": "263240",
    "end": "269360"
  },
  {
    "text": "become absolutely critical we don't want our bug in one extension to crash our entire system we don't want our poorly",
    "start": "269360",
    "end": "276800"
  },
  {
    "text": "writing plugin cause our service to slow down we didn't want external code to",
    "start": "276800",
    "end": "282960"
  },
  {
    "text": "exposing our internal data to attackers",
    "start": "282960",
    "end": "288520"
  },
  {
    "text": "so as as the left left side shows this figure shows how a regular application",
    "start": "290160",
    "end": "296800"
  },
  {
    "text": "can be extended using a separate extension runtime think of the host application as",
    "start": "296800",
    "end": "302960"
  },
  {
    "text": "the original app which has its own space like variable and codes like functions",
    "start": "302960",
    "end": "309120"
  },
  {
    "text": "instead of directly modify the code the usual add new behaviors through its pensions this extension run in a",
    "start": "309120",
    "end": "316320"
  },
  {
    "text": "separate component called extension runtime each extension connect back to a",
    "start": "316320",
    "end": "321600"
  },
  {
    "text": "host use the define entry points like the entry entry one and entry",
    "start": "321600",
    "end": "328039"
  },
  {
    "text": "two for example the extension can also read or modify the variable in the host",
    "start": "328039",
    "end": "334320"
  },
  {
    "text": "application well they can also like call the host functions or in the host",
    "start": "334320",
    "end": "340639"
  },
  {
    "text": "application like the for here as we can see from this real world fe uh cases and",
    "start": "340639",
    "end": "349280"
  },
  {
    "text": "the extension use cases there are three core requirements for the extension runtime framework",
    "start": "349280",
    "end": "355360"
  },
  {
    "text": "intercon with seamless intercon safety and",
    "start": "355360",
    "end": "360520"
  },
  {
    "text": "efficiency first what do I mean by interconnect uh interconnect is how much",
    "start": "360520",
    "end": "366800"
  },
  {
    "text": "power we give extension to interact with the host application extension need to",
    "start": "366800",
    "end": "372639"
  },
  {
    "text": "do things meaningfully they need to read data modify space or call",
    "start": "372639",
    "end": "378840"
  },
  {
    "text": "it existing functions inside application different extension need different level",
    "start": "378840",
    "end": "384960"
  },
  {
    "text": "of interconnect for example a security extension need to re request details and",
    "start": "384960",
    "end": "390560"
  },
  {
    "text": "blocks suspicious requests while observability extensions just need to",
    "start": "390560",
    "end": "395680"
  },
  {
    "text": "read request details as we've discussed safety is how much we limit an",
    "start": "395680",
    "end": "401360"
  },
  {
    "text": "extension's ability to harm the main application if there's a bug in your",
    "start": "401360",
    "end": "408160"
  },
  {
    "text": "extension this back shouldn't crash your whole web server so compromise your",
    "start": "408160",
    "end": "413280"
  },
  {
    "text": "entire application without safety boundaries a single small mistakes in your application could take down",
    "start": "413280",
    "end": "419919"
  },
  {
    "text": "production system efficiency is easy to understand it's about performance how much overhead",
    "start": "419919",
    "end": "426560"
  },
  {
    "text": "extension framework add to your application uh different use cases have",
    "start": "426560",
    "end": "431680"
  },
  {
    "text": "different level of performance requirements like the distributed system and the kernel uh they have very",
    "start": "431680",
    "end": "438319"
  },
  {
    "text": "different latency the key challenge is that the interconis and safy fundamentally at o",
    "start": "438319",
    "end": "445840"
  },
  {
    "text": "the more interconis you allow the less inherently safe it becomes to keep",
    "start": "445840",
    "end": "451039"
  },
  {
    "text": "things safe you need to rest the interconis which limits it tension",
    "start": "451039",
    "end": "456440"
  },
  {
    "text": "usefulness balancing this tension while maintaining efficiencies will make it",
    "start": "456440",
    "end": "462240"
  },
  {
    "text": "tension framework so challenge to design here is a table of limitation of",
    "start": "462240",
    "end": "469639"
  },
  {
    "text": "sitting frameworks uh like first uh a lot of",
    "start": "469639",
    "end": "475440"
  },
  {
    "text": "extension implement just native execution approaches like LD preload or",
    "start": "475440",
    "end": "481680"
  },
  {
    "text": "dynamic modules they offers excellent performance and simple integration but",
    "start": "481680",
    "end": "487759"
  },
  {
    "text": "they provide no isolation a bug in your dynamic modules crash your entire application there's no safety boundaries",
    "start": "487759",
    "end": "494800"
  },
  {
    "text": "and no no fangground control over what tension can assess uh software for",
    "start": "494800",
    "end": "501440"
  },
  {
    "text": "isolation based technologies and also hardware based isolation uh like web",
    "start": "501440",
    "end": "507120"
  },
  {
    "text": "assembly and ru provide better isolation through runtime checks but they pro they",
    "start": "507120",
    "end": "512640"
  },
  {
    "text": "introduce performance overhead from this checks and binary crossing they also often rely on the host application to",
    "start": "512640",
    "end": "520560"
  },
  {
    "text": "implement the security binary correctly for example in what a lot of checks you",
    "start": "520560",
    "end": "527279"
  },
  {
    "text": "need to implement is manually corriting is this is buggy",
    "start": "527279",
    "end": "534399"
  },
  {
    "text": "and rely on manual efforts subprocess atolation or RPC",
    "start": "536360",
    "end": "542720"
  },
  {
    "text": "based approaches like a lot of clative applications and like uh model context",
    "start": "542720",
    "end": "549040"
  },
  {
    "text": "protos mcp in application and some other research projects here offer strong",
    "start": "549040",
    "end": "555839"
  },
  {
    "text": "isolation but expansion in separate process they suffer from contest visual",
    "start": "555839",
    "end": "560959"
  },
  {
    "text": "or has this is sometimes negligible but sometimes critical make them to slower",
    "start": "560959",
    "end": "568640"
  },
  {
    "text": "the performance critical applications some like per extension",
    "start": "568640",
    "end": "575839"
  },
  {
    "text": "control while others require significant challenge to the host application uh",
    "start": "575839",
    "end": "581200"
  },
  {
    "text": "here we also list like a verifier based approaches which is EVPF based use space",
    "start": "581200",
    "end": "587200"
  },
  {
    "text": "tracing like your pro is uh current implementation of your problem like fground control over extension",
    "start": "587200",
    "end": "594399"
  },
  {
    "text": "capabilities uh is tightly coupled with kernel security model and each extension core",
    "start": "594399",
    "end": "602800"
  },
  {
    "text": "requires a costly kernel contest which is make them inefficiency for high",
    "start": "602800",
    "end": "608399"
  },
  {
    "text": "frequency hooks we can see that current software",
    "start": "608399",
    "end": "614240"
  },
  {
    "text": "frameworks have not handled this trade-off very well i don't allow too much",
    "start": "614240",
    "end": "620440"
  },
  {
    "text": "intercon modules or they provide strong safety through heavy isolation like",
    "start": "620440",
    "end": "626720"
  },
  {
    "text": "sandbox crabing environments or subro subprocess isolation methods but list",
    "start": "626720",
    "end": "633440"
  },
  {
    "text": "can be valentions often become slow and",
    "start": "633440",
    "end": "640079"
  },
  {
    "text": "limiting in what they can do so what we found is that the key to manage this pension uh this",
    "start": "640079",
    "end": "647160"
  },
  {
    "text": "intercon virtual safety trade-offs is the interface we choose for",
    "start": "647160",
    "end": "655000"
  },
  {
    "text": "extensions it's the interface if your extension framework",
    "start": "655000",
    "end": "660399"
  },
  {
    "text": "interface can carefully define exactly what resource and functions and like",
    "start": "660399",
    "end": "666880"
  },
  {
    "text": "capabilities and extension can use you can precisely manage the tension ideally",
    "start": "666880",
    "end": "672079"
  },
  {
    "text": "you can you just give the extension just enough in the canon to do its jobs but",
    "start": "672079",
    "end": "677680"
  },
  {
    "text": "absolutely no more this uh this sounds simple but current systems struggle to",
    "start": "677680",
    "end": "682800"
  },
  {
    "text": "achieve this uh let's pick two popular approaches for",
    "start": "682800",
    "end": "688079"
  },
  {
    "text": "expansions web assembly and ebpf and see how they they approach this problem web",
    "start": "688079",
    "end": "694079"
  },
  {
    "text": "assembly is a binary instruction format used in many cloud native system as extension runtime it provide SFIs",
    "start": "694079",
    "end": "702160"
  },
  {
    "text": "through runtime tracks and while EBTF is mainly embedded in Linux kernel and also",
    "start": "702160",
    "end": "709360"
  },
  {
    "text": "using Windows kernel compared with web assembly EBPF has a history of focusing",
    "start": "709360",
    "end": "715040"
  },
  {
    "text": "on performance first which lead to design using a very toric track",
    "start": "715040",
    "end": "722839"
  },
  {
    "text": "safety of the extension at low time in instead of runtime",
    "start": "724720",
    "end": "730880"
  },
  {
    "text": "checks uh let's look at how these two approaches in achieve the interface",
    "start": "731160",
    "end": "738959"
  },
  {
    "text": "problem the web assembly components model repls web assembly's approach to software challenge uh is a spec",
    "start": "738959",
    "end": "746519"
  },
  {
    "text": "specification and a set of tools that defines how web assembly models can be",
    "start": "746519",
    "end": "751839"
  },
  {
    "text": "compromised together and as components and how they interact with their host of",
    "start": "751839",
    "end": "758440"
  },
  {
    "text": "environments the component models design with several key goals define portable interface that work across language",
    "start": "758440",
    "end": "765760"
  },
  {
    "text": "ensuring capability safety through uh split interface and supporting",
    "start": "765760",
    "end": "771639"
  },
  {
    "text": "virtualization in diverse environments uh from browsers to cloud systems uh as",
    "start": "771639",
    "end": "779440"
  },
  {
    "text": "called a component model introduce components as compressible units built",
    "start": "779440",
    "end": "784720"
  },
  {
    "text": "from web assembly models they interact through well definfined inter interface",
    "start": "784720",
    "end": "791320"
  },
  {
    "text": "writing w that's web assembly interface types as showing the fig figures",
    "start": "791320",
    "end": "801079"
  },
  {
    "text": "The component model also implements a capability based security through the",
    "start": "806800",
    "end": "812560"
  },
  {
    "text": "resource handlers uh they that's unforgettable reference that grand",
    "start": "812560",
    "end": "818720"
  },
  {
    "text": "assets to specific resource this handler can be passed between components allowing frame control over which",
    "start": "818720",
    "end": "825079"
  },
  {
    "text": "extension can assess which result for example in this direct interface",
    "start": "825079",
    "end": "830399"
  },
  {
    "text": "definitions in uh in the code block we see how components interact through well",
    "start": "830399",
    "end": "837199"
  },
  {
    "text": "through the request and response resource they are handlers that can only be assessed through a definitive",
    "start": "837199",
    "end": "844839"
  },
  {
    "text": "functions a component must in a handler interface to process requests in first",
    "start": "844839",
    "end": "851279"
  },
  {
    "text": "capability based assess control uh this capability based",
    "start": "851279",
    "end": "857279"
  },
  {
    "text": "approach religion with the principle of list privilege we discussed earlier",
    "start": "857279",
    "end": "862360"
  },
  {
    "text": "uh they have a rich cap system for interface but they are mainly based on functions",
    "start": "862360",
    "end": "870360"
  },
  {
    "text": "late pro uh the drawbacks is it also requires runtime checks at interface",
    "start": "872480",
    "end": "879360"
  },
  {
    "text": "boundaries and sometimes data coping when crosses boundaries that creates",
    "start": "879360",
    "end": "884399"
  },
  {
    "text": "overhead especially for extensions that frequently interace host",
    "start": "884399",
    "end": "890240"
  },
  {
    "text": "uh in EBPF uh they are mainly through low time verification so the runtime overhead is",
    "start": "890240",
    "end": "897360"
  },
  {
    "text": "minim minimized uh this verifier tracks all",
    "start": "897360",
    "end": "902880"
  },
  {
    "text": "possible execution path to ensure memory safety and prevent like infinite loops and a lot of issues in the",
    "start": "902880",
    "end": "911240"
  },
  {
    "text": "extensions the EPF interface in kernel was original based on like uh helper",
    "start": "911240",
    "end": "917519"
  },
  {
    "text": "functions and program types and attach types as showing the in the table here",
    "start": "917519",
    "end": "922639"
  },
  {
    "text": "we can see there's a lot of program types and attached types corresponding to",
    "start": "922639",
    "end": "929199"
  },
  {
    "text": "something similar to capability but this are hardcore in the",
    "start": "929199",
    "end": "935440"
  },
  {
    "text": "kernel and it's hard to extend them as EBTF",
    "start": "935440",
    "end": "942639"
  },
  {
    "text": "evolved to avoid a growing number of these helper functions and entry points the kernel community introduced more",
    "start": "942639",
    "end": "949600"
  },
  {
    "text": "interface mechanism like the structure ops and k funs uh which we will look next this provide more flexible ways for",
    "start": "949600",
    "end": "957759"
  },
  {
    "text": "extensions to interact with the kernel where maintain safety they use spia type format for this test similar to the wit",
    "start": "957759",
    "end": "966759"
  },
  {
    "text": "format uh for example the structure op is similar to the is",
    "start": "966759",
    "end": "972519"
  },
  {
    "text": "in web assembly allow user to register new EBPI program",
    "start": "972519",
    "end": "978240"
  },
  {
    "text": "types called by and this EBPI program can be called by a kernel uh this",
    "start": "978240",
    "end": "984160"
  },
  {
    "text": "starter ops can be registered through kernel modules and extend uh by and then you can write",
    "start": "984160",
    "end": "992959"
  },
  {
    "text": "a ebpf code to use this structure offs",
    "start": "992959",
    "end": "998240"
  },
  {
    "text": "uh k fun is similar to uh it's like similar to import allow register new",
    "start": "998240",
    "end": "1004240"
  },
  {
    "text": "kernel functions called by eBI programs in uh for example you can call this PCP",
    "start": "1004240",
    "end": "1011279"
  },
  {
    "text": "functions in in your eB program and this is no need to modify the verifier they",
    "start": "1011279",
    "end": "1018480"
  },
  {
    "text": "are using BTF for verification and types there's also some annotations and flags",
    "start": "1018480",
    "end": "1025918"
  },
  {
    "text": "you can use like this this where identify the resource acquired and",
    "start": "1025919",
    "end": "1032160"
  },
  {
    "text": "resource release like where this and some high level facts like where the",
    "start": "1032160",
    "end": "1037520"
  },
  {
    "text": "function is sleepable and destructive",
    "start": "1037520",
    "end": "1041438"
  },
  {
    "text": "As you can see the kernel module will registers the uh K funs with some flags",
    "start": "1042720",
    "end": "1049919"
  },
  {
    "text": "for this hello effects so they can you um be embedding the verifier",
    "start": "1049919",
    "end": "1057960"
  },
  {
    "text": "to summarize the EBPF interface approach we can see our trade-offs the EVP",
    "start": "1061440",
    "end": "1067840"
  },
  {
    "text": "provides strong verify based security but it can catch bugs before roll it can",
    "start": "1067840",
    "end": "1073039"
  },
  {
    "text": "provide better performance because it don't require runtime checks by tally couple with colonel EPF and the express",
    "start": "1073039",
    "end": "1080960"
  },
  {
    "text": "uh and also the expressiveness is limit because it's only using JC it's hard to",
    "start": "1080960",
    "end": "1087039"
  },
  {
    "text": "define fine grain safety so what we are proposing is try to combine the EVPF strength and web",
    "start": "1087039",
    "end": "1096000"
  },
  {
    "text": "assembly strength is in inspired by EPF verify and web assembly component models",
    "start": "1096000",
    "end": "1101520"
  },
  {
    "text": "capability based security our code insights treat all extension host",
    "start": "1101520",
    "end": "1107120"
  },
  {
    "text": "interaction as is splitted capabilities like web assembly so we can follow",
    "start": "1107120",
    "end": "1113600"
  },
  {
    "text": "principle of this privilege for extensions and use verifier allow us to",
    "start": "1113600",
    "end": "1119440"
  },
  {
    "text": "design for both safety and performance in use space extensions uh but also the",
    "start": "1119440",
    "end": "1125280"
  },
  {
    "text": "limitation of EPF style is because because of the express so it's a little",
    "start": "1125280",
    "end": "1132720"
  },
  {
    "text": "hard to write EVPF code uh so here is a EPS specification",
    "start": "1132720",
    "end": "1138000"
  },
  {
    "text": "example this is uh generated by the steady",
    "start": "1138000",
    "end": "1143440"
  },
  {
    "text": "allances code through all the eval verifier to verify this space",
    "start": "1143440",
    "end": "1151200"
  },
  {
    "text": "extension uh interface specifications so we can we have three",
    "start": "1151200",
    "end": "1157600"
  },
  {
    "text": "types of capabilities like state capabilities function capabilities and",
    "start": "1157600",
    "end": "1162799"
  },
  {
    "text": "extension entries which is similar to web assembly but you can by besides this simple",
    "start": "1162799",
    "end": "1170960"
  },
  {
    "text": "mechanism you can also in use constraints you can encode like binary relationship between arguments and",
    "start": "1170960",
    "end": "1177679"
  },
  {
    "text": "return values like high level semantic facts and bring operation over the",
    "start": "1177679",
    "end": "1183360"
  },
  {
    "text": "constraints then we can use uh the EVP verifier to check",
    "start": "1183360",
    "end": "1188840"
  },
  {
    "text": "them before the expansion slot so enter",
    "start": "1188840",
    "end": "1194520"
  },
  {
    "text": "our use space evf time uh we build a model on BPF time to",
    "start": "1194520",
    "end": "1203360"
  },
  {
    "text": "make an extension framework uh is uh it's a BPI time is a use space eBPF",
    "start": "1203360",
    "end": "1210720"
  },
  {
    "text": "runtime compatible with kernel it supports a B a bunch set of uh EBPFI",
    "start": "1210720",
    "end": "1216559"
  },
  {
    "text": "features and like your USD s points ADP",
    "start": "1216559",
    "end": "1223080"
  },
  {
    "text": "so the goal of this implementation is to leverage the",
    "start": "1223080",
    "end": "1229600"
  },
  {
    "text": "sitting eBPF ecosystem so uh we can we can try to overcome at least some of the",
    "start": "1229600",
    "end": "1238640"
  },
  {
    "text": "if expressiveness problem include a set of",
    "start": "1238640",
    "end": "1244400"
  },
  {
    "text": "ebpf map types and some helper supports and also u supports it can run together",
    "start": "1244400",
    "end": "1250960"
  },
  {
    "text": "with kernel ebpf and you can switch the VM inside it so BPI time is a runtime",
    "start": "1250960",
    "end": "1257360"
  },
  {
    "text": "instead of simple VM it's not like just UBPF and RBPF because",
    "start": "1257360",
    "end": "1263679"
  },
  {
    "text": "it it has a bunch of other things uh so you can see there's a set of supportive",
    "start": "1263679",
    "end": "1270120"
  },
  {
    "text": "features at least part of them here uh link include a bunch of share memory map",
    "start": "1270120",
    "end": "1277799"
  },
  {
    "text": "types your space kernel shared maps and some program types you can attach in",
    "start": "1277799",
    "end": "1283520"
  },
  {
    "text": "your space include some tracing types ADP and even some GPU features that's",
    "start": "1283520",
    "end": "1291280"
  },
  {
    "text": "recently added by community you can also define other",
    "start": "1291280",
    "end": "1296720"
  },
  {
    "text": "steady choints you can support a lot of helper functions and you support both kernel",
    "start": "1296720",
    "end": "1303360"
  },
  {
    "text": "and new space verifier this is the EBPF design BPF",
    "start": "1303360",
    "end": "1309760"
  },
  {
    "text": "time descent diagram white components are from EVPF orange components are new we add in",
    "start": "1309760",
    "end": "1317039"
  },
  {
    "text": "BPF time blue arrows shows the execution",
    "start": "1317039",
    "end": "1322799"
  },
  {
    "text": "flow while compiling and loading BPF application uh it is similar to how the",
    "start": "1322799",
    "end": "1328720"
  },
  {
    "text": "AVPF was originally performed so uh we use the BPF time loader to load",
    "start": "1328720",
    "end": "1337919"
  },
  {
    "text": "and operate the EB with the EVPF control plan application white arrow with black lines",
    "start": "1337919",
    "end": "1345200"
  },
  {
    "text": "indicate components that interact with EVPF maps here is a basic example to",
    "start": "1345200",
    "end": "1351039"
  },
  {
    "text": "show how you can run build and run EVPI leave VPI based EVPI program starts with",
    "start": "1351039",
    "end": "1356799"
  },
  {
    "text": "BPI time command line",
    "start": "1356799",
    "end": "1361520"
  },
  {
    "text": "instructions you can use upro to monitor use space macro functions in li",
    "start": "1362840",
    "end": "1369760"
  },
  {
    "text": "like just bpi time load to load the control plan application epi program and",
    "start": "1369760",
    "end": "1375440"
  },
  {
    "text": "start to trace the program here's the evaluation use",
    "start": "1375440",
    "end": "1381240"
  },
  {
    "text": "cases exflication can run with minimal fix with some additional",
    "start": "1381240",
    "end": "1387880"
  },
  {
    "text": "customized cases so the first use case is like for",
    "start": "1387880",
    "end": "1395679"
  },
  {
    "text": "observability why we use use space tracing because it's faster and more flexible it's much it's much faster than",
    "start": "1397880",
    "end": "1406080"
  },
  {
    "text": "you space your props and it has much faster use memory assets there's also no",
    "start": "1406080",
    "end": "1411760"
  },
  {
    "text": "tracing overhead on untrace process we can run a set of tools like BCN BPF",
    "start": "1411760",
    "end": "1418320"
  },
  {
    "text": "trace and also complete observability agents with Krom and your prop",
    "start": "1418320",
    "end": "1423880"
  },
  {
    "text": "together here is some microbenchmark we can see there about 10 times of",
    "start": "1423880",
    "end": "1429360"
  },
  {
    "text": "improvements in your prop and also some improvement in hash maps and your space",
    "start": "1429360",
    "end": "1435679"
  },
  {
    "text": "memory risk you can run the BPF trace and",
    "start": "1435679",
    "end": "1441080"
  },
  {
    "text": "BCC in BPF time just as you run the",
    "start": "1441080",
    "end": "1446440"
  },
  {
    "text": "kernel you can see the retest contour and SSL Smith tour uh",
    "start": "1446440",
    "end": "1454159"
  },
  {
    "text": "your space EVPF can significantly reduce the",
    "start": "1454159",
    "end": "1459400"
  },
  {
    "text": "overhead than the kernel EVPF uh it can be also be used for use",
    "start": "1459400",
    "end": "1465559"
  },
  {
    "text": "EV network like DP like combine EVPF with DBK and ADP so",
    "start": "1465559",
    "end": "1474159"
  },
  {
    "text": "you can use exiting EVPF ecosystem and tools but achieve better performance",
    "start": "1474159",
    "end": "1482278"
  },
  {
    "text": "we also build our EVPF VM with RVM T is uh RVM BPF is a steron EVP VM and",
    "start": "1485440",
    "end": "1494559"
  },
  {
    "text": "comparing tools it's a easy to use projects there's a bunch of more use",
    "start": "1494559",
    "end": "1501200"
  },
  {
    "text": "cases like engine plugins and fuse caches and radius durability tuning some",
    "start": "1501200",
    "end": "1507440"
  },
  {
    "text": "also include GPU tracing and error injection code patch please check our",
    "start": "1507440",
    "end": "1513200"
  },
  {
    "text": "coming papers for more detail you will be releasing next months I",
    "start": "1513200",
    "end": "1518600"
  },
  {
    "text": "think so there's still a long way to go because BPF time is not production ready",
    "start": "1518600",
    "end": "1523679"
  },
  {
    "text": "yet we still need to do a lot of improve stability and bug fix and make more easy",
    "start": "1523679",
    "end": "1529919"
  },
  {
    "text": "to use here's the takeaway here's the takeaways bpi time is a new approaches",
    "start": "1529919",
    "end": "1536240"
  },
  {
    "text": "to use space extensions we try to combine the strength from both worlds ebps verification and",
    "start": "1536240",
    "end": "1543400"
  },
  {
    "text": "performance and also web assembly like interface flexibility it can enable high",
    "start": "1543400",
    "end": "1549440"
  },
  {
    "text": "performance extensions and fun safety controls and it's also compatible with",
    "start": "1549440",
    "end": "1557120"
  },
  {
    "text": "existing EVPF ecosystems okay thank you",
    "start": "1557120",
    "end": "1563610"
  },
  {
    "text": "[Applause]",
    "start": "1563610",
    "end": "1570210"
  },
  {
    "text": "uh hi sorry I was a little e this uh any questions",
    "start": "1582799",
    "end": "1590080"
  },
  {
    "text": "or Oh no maybe maybe Okay",
    "start": "1592039",
    "end": "1597120"
  },
  {
    "text": "what are the largest problems",
    "start": "1597120",
    "end": "1602200"
  },
  {
    "text": "uh the main challenge is that how we can",
    "start": "1605919",
    "end": "1611440"
  },
  {
    "text": "keep compatible and leverage the kernel infrastructures",
    "start": "1611440",
    "end": "1616480"
  },
  {
    "text": "uh like how how how I can because libpf",
    "start": "1616480",
    "end": "1622480"
  },
  {
    "text": "and like kernel kernel ebpf runtime they they interact through the",
    "start": "1622480",
    "end": "1629440"
  },
  {
    "text": "ebpf cisco but they are tightly coupled so we need to have a",
    "start": "1629440",
    "end": "1637240"
  },
  {
    "text": "uh Cisco compatible layer to make sure they are compatible",
    "start": "1637240",
    "end": "1642279"
  },
  {
    "text": "and this also cause challenge and a lot of engineering efforts in the long run",
    "start": "1642279",
    "end": "1647600"
  },
  {
    "text": "long long run uh sorry I didn't see the the the",
    "start": "1647600",
    "end": "1652799"
  },
  {
    "text": "microphone before another question would be what kind of performance impacts do",
    "start": "1652799",
    "end": "1658240"
  },
  {
    "text": "you see using the using web assembly in this environment with respect to",
    "start": "1658240",
    "end": "1665200"
  },
  {
    "text": "straight ebpf sorry what can can you repeat again yes",
    "start": "1665200",
    "end": "1671520"
  },
  {
    "text": "what performance impact do you measure using web assembly in this",
    "start": "1671520",
    "end": "1678120"
  },
  {
    "text": "way in contrast to a native ebpf",
    "start": "1678120",
    "end": "1683840"
  },
  {
    "text": "uh we implemented the same use cases like some uh engines plugins and try to",
    "start": "1683840",
    "end": "1691679"
  },
  {
    "text": "measure their performance difference uh is that what you're asking okay",
    "start": "1691679",
    "end": "1700480"
  },
  {
    "text": "uh the exactly use cases and you can see it on our website and the",
    "start": "1700480",
    "end": "1706919"
  },
  {
    "text": "paper we will really see later",
    "start": "1706919",
    "end": "1711720"
  },
  {
    "text": "uh because I didn't heard the previous",
    "start": "1712399",
    "end": "1717960"
  },
  {
    "text": "question maybe you already partially entered it but how much",
    "start": "1717960",
    "end": "1723480"
  },
  {
    "text": "is coupled the was module to a specific kernel",
    "start": "1723480",
    "end": "1730039"
  },
  {
    "text": "version I mean do we must run this was module what is expected to be more",
    "start": "1730039",
    "end": "1737080"
  },
  {
    "text": "flexible to a specific kernel version so having all you align on the same version",
    "start": "1737080",
    "end": "1743039"
  },
  {
    "text": "or is it pretty flexible based on the minor version patch version i don't know",
    "start": "1743039",
    "end": "1750520"
  },
  {
    "text": "uh I'm not quite get it the the was plugin",
    "start": "1750520",
    "end": "1758720"
  },
  {
    "text": "is intended to work with EVPF but eBPF depends on the kernel yes",
    "start": "1758720",
    "end": "1765919"
  },
  {
    "text": "so let's say you run on Linux kernel 5.2 does your module is expected also to",
    "start": "1765919",
    "end": "1772799"
  },
  {
    "text": "work on kernel 5.6 how much is covered is it something where we must align all",
    "start": "1772799",
    "end": "1778799"
  },
  {
    "text": "the o on the same kernel or we have some flexibility uh the first we only use kernel for uh",
    "start": "1778799",
    "end": "1788480"
  },
  {
    "text": "in the EM model we we only use kernel for verification so you can just put",
    "start": "1788480",
    "end": "1795919"
  },
  {
    "text": "kernel in a VM and run it doesn't need to be",
    "start": "1795919",
    "end": "1801840"
  },
  {
    "text": "your actual kernel actual kernel so our attach version is like",
    "start": "1801840",
    "end": "1807880"
  },
  {
    "text": "kernel 6.10 and form but uh if you if you just",
    "start": "1807880",
    "end": "1816640"
  },
  {
    "text": "use your space verifier in BPF time you can uh ignore your kernel version and",
    "start": "1816640",
    "end": "1822640"
  },
  {
    "text": "don't need to care about that okay so minimum requirement is a kernel 6.10 as",
    "start": "1822640",
    "end": "1828880"
  },
  {
    "text": "you said to get the functionalities but outside of that",
    "start": "1828880",
    "end": "1834000"
  },
  {
    "text": "there is no requirement uh sorry maybe maybe you",
    "start": "1834000",
    "end": "1840360"
  },
  {
    "text": "you can you speak a little loudly yeah yeah I was saying so you say there is",
    "start": "1840360",
    "end": "1846399"
  },
  {
    "text": "requirement of a minimum qual version let's say 6.10 10 something like that to",
    "start": "1846399",
    "end": "1852000"
  },
  {
    "text": "get the functionality but have that it's flexible we are not attached",
    "start": "1852000",
    "end": "1857520"
  },
  {
    "text": "to one specific version uh the BPF time doesn't need like",
    "start": "1857520",
    "end": "1864480"
  },
  {
    "text": "minimal kernel version to get a functionality you can it can work with uh like low very low kernel versions",
    "start": "1864480",
    "end": "1871840"
  },
  {
    "text": "even without EPF support is that what you're asking okay Yeah uh",
    "start": "1871840",
    "end": "1879278"
  }
]