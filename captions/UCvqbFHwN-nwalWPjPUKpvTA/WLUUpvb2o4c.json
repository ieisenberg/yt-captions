[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "hi my name is liz rice i'm chief open source officer with isovalent which is",
    "start": "1839",
    "end": "8160"
  },
  {
    "text": "the company behind the sicilian networking project and until recently i was chair of the",
    "start": "8160",
    "end": "15440"
  },
  {
    "text": "technical oversight committee at the cloud native computing foundation and in that role i had the privilege to",
    "start": "15440",
    "end": "22880"
  },
  {
    "text": "see lots of technologies all across the cloud native landscape",
    "start": "22880",
    "end": "28240"
  },
  {
    "text": "and something that has particularly caught my eye over the last few years is",
    "start": "28240",
    "end": "33440"
  },
  {
    "text": "ebpf which i'm going to speak about today here at kubernetes community days",
    "start": "33440",
    "end": "39440"
  },
  {
    "text": "chennai so i want to explain why i'm so excited about it and how ebpf gives us super",
    "start": "39440",
    "end": "47440"
  },
  {
    "text": "powers for cloud native tooling particularly for networking for security",
    "start": "47440",
    "end": "53920"
  },
  {
    "text": "and for observability so let's start by seeing what ebpf",
    "start": "53920",
    "end": "59520"
  },
  {
    "text": "stands for so the letters stand for extended berkeley",
    "start": "59520",
    "end": "64878"
  },
  {
    "start": "60000",
    "end": "422000"
  },
  {
    "text": "packet filter but to be honest i'm not sure that's terribly helpful because",
    "start": "64879",
    "end": "70640"
  },
  {
    "text": "ebpf can do so much more now than packet filtering what we need to know is that ebpf allows",
    "start": "70640",
    "end": "79200"
  },
  {
    "text": "us to dynamically run custom programs in the kernel",
    "start": "79200",
    "end": "86080"
  },
  {
    "text": "so let's make sure we're on the same page about user space and kernel",
    "start": "86080",
    "end": "91759"
  },
  {
    "text": "as application developers we mostly write our applications in user",
    "start": "91759",
    "end": "97920"
  },
  {
    "text": "space and we're given abstractions that protect us",
    "start": "97920",
    "end": "103520"
  },
  {
    "text": "from the system calls that need to be made to the kernel",
    "start": "103520",
    "end": "109119"
  },
  {
    "text": "so for example if our application wants to do anything that",
    "start": "109119",
    "end": "114799"
  },
  {
    "text": "interfaces with hardware maybe that's writing to the screen or",
    "start": "114799",
    "end": "119920"
  },
  {
    "text": "receiving a network packet or writing something into a file all of these things require access to",
    "start": "119920",
    "end": "126719"
  },
  {
    "text": "hardware even accessing memory and user space can't do this directly it",
    "start": "126719",
    "end": "133360"
  },
  {
    "text": "has to ask for help from the kernel and the kernel provides that interface",
    "start": "133360",
    "end": "139360"
  },
  {
    "text": "between user space applications and the hardware they're running on and it also",
    "start": "139360",
    "end": "144480"
  },
  {
    "text": "coordinates multiple user space processes that are running simultaneously",
    "start": "144480",
    "end": "151599"
  },
  {
    "text": "so our user space application make system calls to ask for help from the",
    "start": "152080",
    "end": "157920"
  },
  {
    "text": "kernel but we typically don't write system calls directly in our",
    "start": "157920",
    "end": "163519"
  },
  {
    "text": "programming languages we're given higher level abstractions for example reading and writing to files will map to",
    "start": "163519",
    "end": "171200"
  },
  {
    "text": "read and write system calls at the system calling interface",
    "start": "171200",
    "end": "178159"
  },
  {
    "text": "so the color when things happen there are events in the kernel that could be",
    "start": "179440",
    "end": "187040"
  },
  {
    "text": "network packets arriving it could be um a user space application making a",
    "start": "187040",
    "end": "192560"
  },
  {
    "text": "system call all sorts of events constantly being triggered within the kernel",
    "start": "192560",
    "end": "198480"
  },
  {
    "text": "and we can attach ebpf programs to these events so that whenever the event happens our ebpf",
    "start": "198480",
    "end": "206159"
  },
  {
    "text": "program can run let's take a look at a concrete example",
    "start": "206159",
    "end": "213440"
  },
  {
    "text": "so here is my very basic hello world example in evpf",
    "start": "213440",
    "end": "220480"
  },
  {
    "text": "the code that's going to run in the kernel is here it's a very simple c",
    "start": "220480",
    "end": "226720"
  },
  {
    "text": "function uh ebpf programs are functions and",
    "start": "226720",
    "end": "232239"
  },
  {
    "text": "all it's going to do is write out some tracing let's",
    "start": "232239",
    "end": "237519"
  },
  {
    "text": "change this so okay so it's going to trace out",
    "start": "237519",
    "end": "244640"
  },
  {
    "text": "hello kcd chennai whenever my ebpf program is triggered",
    "start": "244640",
    "end": "250319"
  },
  {
    "text": "and i'm going to attach it here this the rest of the code is python it's",
    "start": "250319",
    "end": "255840"
  },
  {
    "text": "using a python framework called bcc which is quite a nice way to get started with",
    "start": "255840",
    "end": "261440"
  },
  {
    "text": "bpf programming because it makes it very easy to load programs into the kernel and attach",
    "start": "261440",
    "end": "267919"
  },
  {
    "text": "them to events here i'm attaching the",
    "start": "267919",
    "end": "274000"
  },
  {
    "text": "ebpf program to the system call called exec ve",
    "start": "274000",
    "end": "280000"
  },
  {
    "text": "and exec fee is what gets triggered when a new executable is being run",
    "start": "280000",
    "end": "285919"
  },
  {
    "text": "and as you'll see on the virtual machine that i'm running on there are lots of new executables being",
    "start": "285919",
    "end": "293680"
  },
  {
    "text": "run all the time so i need to be root to run this because",
    "start": "293680",
    "end": "300400"
  },
  {
    "text": "you need privileges to load bpf programs",
    "start": "300400",
    "end": "305759"
  },
  {
    "text": "and we immediately see tracing being generated by um",
    "start": "306320",
    "end": "311680"
  },
  {
    "text": "system calls that are running on this virtual machine and in another",
    "start": "311680",
    "end": "316880"
  },
  {
    "text": "terminal window on the same machine i can run let's say ps and we can see",
    "start": "316880",
    "end": "323120"
  },
  {
    "text": "the process number 74282 if i find that in the output there it is",
    "start": "323120",
    "end": "330720"
  },
  {
    "text": "so bash with the process id 74282",
    "start": "330720",
    "end": "335759"
  },
  {
    "text": "triggered exec ve and it wrote out the the line of tracing",
    "start": "335759",
    "end": "340880"
  },
  {
    "text": "as a result and we also got information like the timestamp and various flags",
    "start": "340880",
    "end": "347120"
  },
  {
    "text": "that information gives us some context about the",
    "start": "347120",
    "end": "353039"
  },
  {
    "text": "process that was running that triggered that event other types of event might give us",
    "start": "353039",
    "end": "358720"
  },
  {
    "text": "information about a network packet or um",
    "start": "358720",
    "end": "364479"
  },
  {
    "text": "the socket buffer being passed from an application into the kernel",
    "start": "364479",
    "end": "370960"
  },
  {
    "text": "and we get contextual information about whatever it is that triggered the event",
    "start": "370960",
    "end": "377360"
  },
  {
    "text": "that our ebpf program was attached to",
    "start": "377360",
    "end": "382319"
  },
  {
    "text": "so we have some code that runs in the kernel and we also have some user space code that loads the bpf program into the",
    "start": "382560",
    "end": "389440"
  },
  {
    "text": "kernel we might also write code that can communicate with bpf to",
    "start": "389440",
    "end": "396800"
  },
  {
    "text": "extract things like metrics so ebpf is often used in observability we",
    "start": "396800",
    "end": "402800"
  },
  {
    "text": "can attach a program to increment a counter every time an event happens and",
    "start": "402800",
    "end": "408400"
  },
  {
    "text": "then read that counter in what's called a bpf map",
    "start": "408400",
    "end": "414080"
  },
  {
    "text": "so that user space can read that information and display the metrics",
    "start": "414080",
    "end": "422680"
  },
  {
    "start": "422000",
    "end": "600000"
  },
  {
    "text": "so even with my tiny hello world example we dynamically change the way that the",
    "start": "423599",
    "end": "430319"
  },
  {
    "text": "kernel behaves and this is really quite a sea change in",
    "start": "430319",
    "end": "435440"
  },
  {
    "text": "what we can do in kernel technology normally if you want to make a change to",
    "start": "435440",
    "end": "440560"
  },
  {
    "text": "the kernel it takes a very long time not only is it complex to change the",
    "start": "440560",
    "end": "446800"
  },
  {
    "text": "kernel it's 30 million lines of code but also making a change to the kernel requires",
    "start": "446800",
    "end": "454000"
  },
  {
    "text": "that the entire kernel community are on board with that change and think that it's a good idea",
    "start": "454000",
    "end": "460560"
  },
  {
    "text": "not only that but getting the change into the upstream kernel",
    "start": "460560",
    "end": "466479"
  },
  {
    "text": "it still takes typically years for that kernel version to",
    "start": "466479",
    "end": "472000"
  },
  {
    "text": "become part of the linux distributions that we run the the distributions like",
    "start": "472000",
    "end": "477280"
  },
  {
    "text": "red hat or ubuntu or debian or arch all these different flavors of linux",
    "start": "477280",
    "end": "484560"
  },
  {
    "text": "are distributed with kernel versions that have typically been",
    "start": "484560",
    "end": "489680"
  },
  {
    "text": "released one two three four five years earlier",
    "start": "489680",
    "end": "494720"
  },
  {
    "text": "so it can take a really long time for features in the kernel to make it into",
    "start": "494720",
    "end": "500240"
  },
  {
    "text": "production environments that enterprises are using and this is why ebpf has suddenly become",
    "start": "500240",
    "end": "508160"
  },
  {
    "text": "so so popular and um we're seeing a lot of tools being built on ebpf because",
    "start": "508160",
    "end": "515440"
  },
  {
    "text": "the ebpf functionality that's required within the kernel to",
    "start": "515440",
    "end": "521120"
  },
  {
    "text": "enable this whole platform that is now sufficiently stable that",
    "start": "521120",
    "end": "526800"
  },
  {
    "text": "it's been in it's in the kernel releases that are typically being distributed today i",
    "start": "526800",
    "end": "533680"
  },
  {
    "text": "think there's all linux distributions are now um using enough",
    "start": "533680",
    "end": "539440"
  },
  {
    "text": "evpf technology or they have enough ebpf um platform built into them that we can for",
    "start": "539440",
    "end": "545920"
  },
  {
    "text": "example run psyllium where two or three years ago quite a lot of",
    "start": "545920",
    "end": "552399"
  },
  {
    "text": "production versions of linux were running a an older kernel that wouldn't",
    "start": "552399",
    "end": "558000"
  },
  {
    "text": "have sufficient ebpf capabilities so this is why we can use evpf for",
    "start": "558000",
    "end": "564080"
  },
  {
    "text": "tooling today so it takes a long time to get changes",
    "start": "564080",
    "end": "569360"
  },
  {
    "text": "into the kernel but with ebpf we can make changes",
    "start": "569360",
    "end": "575040"
  },
  {
    "text": "instantly all we need to do is write some code load it into the kernel and we can",
    "start": "575040",
    "end": "580560"
  },
  {
    "text": "change the behavior of that machine this means we can have bespoke behavior very",
    "start": "580560",
    "end": "585680"
  },
  {
    "text": "easily don't even need to do a reboot this can be",
    "start": "585680",
    "end": "591200"
  },
  {
    "text": "really useful for all sorts of reasons and one interesting application is for",
    "start": "591200",
    "end": "596720"
  },
  {
    "text": "mitigating internal vulnerabilities there's a class of vulnerabilities",
    "start": "596720",
    "end": "602160"
  },
  {
    "start": "600000",
    "end": "931000"
  },
  {
    "text": "called packet of death where a vulnerability in the kernel means it's",
    "start": "602160",
    "end": "607760"
  },
  {
    "text": "unable to handle a network packet that's been crafted in a particular way",
    "start": "607760",
    "end": "614640"
  },
  {
    "text": "and with ebpf we can easily mitigate these vulnerabilities when they when they're discovered",
    "start": "614640",
    "end": "621760"
  },
  {
    "text": "so if a packet of death vulnerability exists",
    "start": "621760",
    "end": "627120"
  },
  {
    "text": "when the host receives a packet that's crafted in a particular way it's unable",
    "start": "627120",
    "end": "632720"
  },
  {
    "text": "to handle it correctly and the kernel crashes and this is a very bad day",
    "start": "632720",
    "end": "637839"
  },
  {
    "text": "because it brings down the whole machine with ebpf we can write a program that",
    "start": "637839",
    "end": "643760"
  },
  {
    "text": "hooks into the event of receiving a network packet",
    "start": "643760",
    "end": "648800"
  },
  {
    "text": "look at that packet and see if it's crafted in the format that the",
    "start": "648800",
    "end": "655120"
  },
  {
    "text": "packet of death vulnerabilities requires to exploit that vulnerability",
    "start": "655120",
    "end": "662079"
  },
  {
    "text": "and if it is a packet of death then our ebpf program can simply discard it",
    "start": "662079",
    "end": "669360"
  },
  {
    "text": "and that means the colonel never gets to process that packet and the",
    "start": "669360",
    "end": "674640"
  },
  {
    "text": "vulnerability that's unable to process that packet well it never gets hit so",
    "start": "674640",
    "end": "680240"
  },
  {
    "text": "the the packet is is harmlessly discarded let's take a look at how easy it is to",
    "start": "680240",
    "end": "688079"
  },
  {
    "text": "discard network packets so i have a an ebpf program here",
    "start": "688079",
    "end": "694240"
  },
  {
    "text": "this is the c code that we're going to load into the kernel it's called goodbye ping",
    "start": "694240",
    "end": "701200"
  },
  {
    "text": "and at the moment all it does is trace out whether we receive",
    "start": "701200",
    "end": "706720"
  },
  {
    "text": "an icmp packet um icmp is also known as ping or a tcp packet so don't worry too much",
    "start": "706720",
    "end": "714480"
  },
  {
    "text": "about the details of this code is looking at each network packet to find",
    "start": "714480",
    "end": "719519"
  },
  {
    "text": "first of all whether it's an ipp packet and if it is it will look at the protocol type and",
    "start": "719519",
    "end": "725680"
  },
  {
    "text": "trace and trace out a message if it's either ping or tcp",
    "start": "725680",
    "end": "731760"
  },
  {
    "text": "also currently in either case i'm returning xdp pass as the return code",
    "start": "731760",
    "end": "737360"
  },
  {
    "text": "from this function and what that says to the kernel is just carry on handling this packet as",
    "start": "737360",
    "end": "743839"
  },
  {
    "text": "you were going to do if there was no uh bpf program here",
    "start": "743839",
    "end": "749920"
  },
  {
    "text": "so i'm gonna run this inside a container and that container",
    "start": "749920",
    "end": "756320"
  },
  {
    "text": "has a well it has an interface called f0 with the ip address 172.17.0.2",
    "start": "756320",
    "end": "765079"
  },
  {
    "text": "and i can start pinging that address from outside the container and we'll see",
    "start": "766160",
    "end": "773519"
  },
  {
    "text": "um every second a response is coming back to that ping",
    "start": "773519",
    "end": "778720"
  },
  {
    "text": "request so i'm gonna i've got to make file that",
    "start": "778720",
    "end": "784320"
  },
  {
    "text": "it compiles the um the c code and it detaches any previously existing",
    "start": "784320",
    "end": "792480"
  },
  {
    "text": "program on that s0 interface and container and then it loads",
    "start": "792480",
    "end": "798560"
  },
  {
    "text": "the version that we've just compiled onto that interface so every time a network packet is received on the s0",
    "start": "798560",
    "end": "804800"
  },
  {
    "text": "interface it should trigger my ebpf program",
    "start": "804800",
    "end": "809839"
  },
  {
    "text": "and i'm going to start cutting out the the trace output",
    "start": "809839",
    "end": "815040"
  },
  {
    "text": "and you can see here that every second we're getting",
    "start": "815040",
    "end": "820480"
  },
  {
    "text": "a message telling us that a pink packet has been received so we can see the sequence numbers",
    "start": "820480",
    "end": "825920"
  },
  {
    "text": "incrementing every second and we can see tracing being generated",
    "start": "825920",
    "end": "832000"
  },
  {
    "text": "so now let's modify the program and instead of saying that we're going to pass",
    "start": "832000",
    "end": "837760"
  },
  {
    "text": "the packet up let's just drop it so in other words every time we see a",
    "start": "837760",
    "end": "843199"
  },
  {
    "text": "picking packet it's going to just discard it",
    "start": "843199",
    "end": "848240"
  },
  {
    "text": "so i can make that and that will load my new",
    "start": "848560",
    "end": "854240"
  },
  {
    "text": "version and we instantly see that the sequence numbers have stopped incrementing because",
    "start": "854240",
    "end": "860399"
  },
  {
    "text": "the ping is being received in the container dropped and no response is being generated so",
    "start": "860399",
    "end": "866880"
  },
  {
    "text": "the ping application here is never seeing that response",
    "start": "866880",
    "end": "871920"
  },
  {
    "text": "but we continue to see the tracing because we trace out the fact that the packet has been received before we drop",
    "start": "871920",
    "end": "878240"
  },
  {
    "text": "it and i can very easily turn it back on again",
    "start": "878240",
    "end": "885000"
  },
  {
    "text": "to enable packets to be received make that one more time",
    "start": "886079",
    "end": "892399"
  },
  {
    "text": "and we instantly see the sequence numbers start incrementing again because we've changed",
    "start": "892399",
    "end": "898880"
  },
  {
    "text": "the behavior first of all we allowed them to pass then we dropped them and now we're allowing them to pass",
    "start": "898880",
    "end": "904560"
  },
  {
    "text": "again so",
    "start": "904560",
    "end": "911480"
  },
  {
    "text": "so again we've been able to change the behavior of the kernel",
    "start": "912880",
    "end": "919279"
  },
  {
    "text": "dynamically we didn't have to change the we didn't even have to stop ping from running we could instantly modify the",
    "start": "919279",
    "end": "926880"
  },
  {
    "text": "way that the kernel handles those packets",
    "start": "926880",
    "end": "931040"
  },
  {
    "start": "931000",
    "end": "1055000"
  },
  {
    "text": "now one thing you might be wondering is how is this safe",
    "start": "932480",
    "end": "938160"
  },
  {
    "text": "ebpdf code has to be safe to run because if it crashed or if it looped",
    "start": "938160",
    "end": "944000"
  },
  {
    "text": "indefinitely that would stop the kernel from working and that would essentially",
    "start": "944000",
    "end": "949600"
  },
  {
    "text": "cause it to like if it crashed it brings us down the whole machine if it hangs",
    "start": "949600",
    "end": "955199"
  },
  {
    "text": "all of your applications will hang so there is an important part of ebpf",
    "start": "955199",
    "end": "960399"
  },
  {
    "text": "called the verifier and when we load an ebpf program into the kernel the verifier",
    "start": "960399",
    "end": "967279"
  },
  {
    "text": "checks it to make sure that it's going to run to completion",
    "start": "967279",
    "end": "972560"
  },
  {
    "text": "that its memory access is all safe not only",
    "start": "972560",
    "end": "978560"
  },
  {
    "text": "that a given uh ebpf program can only look at",
    "start": "978560",
    "end": "983600"
  },
  {
    "text": "uh memory that's appropriate for it so for example if it's triggered by one process",
    "start": "983600",
    "end": "990000"
  },
  {
    "text": "it can't go off and look at memory owned by another process",
    "start": "990000",
    "end": "994800"
  },
  {
    "text": "and it also checks that we never dereference a null pointer in a ebpf program you",
    "start": "995279",
    "end": "1002720"
  },
  {
    "text": "have to explicitly check that your pointer is not null before you",
    "start": "1002720",
    "end": "1008639"
  },
  {
    "text": "dereference it so the verifier is used to make sure that our ebpf code is going to be",
    "start": "1008639",
    "end": "1015920"
  },
  {
    "text": "safe to run and this is one reason why sometimes ebpf gets called sandboxing",
    "start": "1015920",
    "end": "1023199"
  },
  {
    "text": "and to some extent that's true it's sandboxing our programs to make sure that they are",
    "start": "1023199",
    "end": "1028480"
  },
  {
    "text": "safe but i also think sandboxing can be a little bit of a confusing term to use in",
    "start": "1028480",
    "end": "1035199"
  },
  {
    "text": "the cloud native world because we also sometimes talk about sandboxing for",
    "start": "1035199",
    "end": "1040319"
  },
  {
    "text": "containers and ebpf is not a replacement technology for containers it's kind of",
    "start": "1040319",
    "end": "1047280"
  },
  {
    "text": "entirely orthogonal so let's have a look at what it does mean",
    "start": "1047280",
    "end": "1053440"
  },
  {
    "text": "to run evpf programs in a container environment or particularly",
    "start": "1053440",
    "end": "1060320"
  },
  {
    "text": "in a kubernetes environment",
    "start": "1060320",
    "end": "1064399"
  },
  {
    "text": "so in any given host whether that's a virtual machine or a bare metal machine",
    "start": "1065600",
    "end": "1073360"
  },
  {
    "text": "there's one kernel and that kernel looks after all of the user space",
    "start": "1073360",
    "end": "1079039"
  },
  {
    "text": "applications whether or not they're running inside containers inside pods okay environment",
    "start": "1079039",
    "end": "1085440"
  },
  {
    "text": "they typically are running in containers inside pods and whenever those",
    "start": "1085440",
    "end": "1092240"
  },
  {
    "text": "pods or the application code within those pods want to do anything interesting",
    "start": "1092240",
    "end": "1098080"
  },
  {
    "text": "like accessing the network or reading or writing to files or even",
    "start": "1098080",
    "end": "1104080"
  },
  {
    "text": "when kubernetes wants to create more containers on this host all of these things require support from the kernel",
    "start": "1104080",
    "end": "1112480"
  },
  {
    "text": "so the kernel is involved and aware whenever the pods do",
    "start": "1112480",
    "end": "1118400"
  },
  {
    "text": "anything and that means if we instrument the kernel with evpf programs",
    "start": "1118400",
    "end": "1125919"
  },
  {
    "text": "they can be aware of everything that's happening inside those user space",
    "start": "1125919",
    "end": "1131280"
  },
  {
    "text": "applications running within the pods so we can write observability tools that",
    "start": "1131280",
    "end": "1137919"
  },
  {
    "text": "can see events happening regardless of what pod triggered those events",
    "start": "1137919",
    "end": "1144480"
  },
  {
    "text": "and this is why ebpf is such a powerful tool for observability",
    "start": "1144480",
    "end": "1150720"
  },
  {
    "start": "1149000",
    "end": "1290000"
  },
  {
    "text": "evpf programs have this view across the entire node and it",
    "start": "1150720",
    "end": "1157120"
  },
  {
    "text": "enables really deep observability tooling so a couple of examples",
    "start": "1157120",
    "end": "1163600"
  },
  {
    "text": "one is from psyllium where we're using eppf to",
    "start": "1163600",
    "end": "1171600"
  },
  {
    "text": "connect network endpoints together we can observe",
    "start": "1171600",
    "end": "1177360"
  },
  {
    "text": "every network packet that's flowing to or from different pods but we also have this awareness of",
    "start": "1177360",
    "end": "1184160"
  },
  {
    "text": "kubernetes identities so we can map not just",
    "start": "1184160",
    "end": "1189280"
  },
  {
    "text": "what i p address and report that packets are going to and from but what's the pod name what's the",
    "start": "1189280",
    "end": "1196400"
  },
  {
    "text": "service name what's the the node what's the name space and",
    "start": "1196400",
    "end": "1201919"
  },
  {
    "text": "in a cloud native environment that's much much more powerful if in in",
    "start": "1201919",
    "end": "1208480"
  },
  {
    "text": "a cloud negative environment in a kubernetes environment ip addresses don't mean much for very long they're",
    "start": "1208480",
    "end": "1215360"
  },
  {
    "text": "only you know a pod can be created and destroyed dynamically and",
    "start": "1215360",
    "end": "1220640"
  },
  {
    "text": "that ip address could be reused for a different pod in the future so if you only know what ip address a packet went",
    "start": "1220640",
    "end": "1227600"
  },
  {
    "text": "to or from you're going to have a hard time figuring out what application was involved",
    "start": "1227600",
    "end": "1233280"
  },
  {
    "text": "what you really want to know is what was the kubernetes pod",
    "start": "1233280",
    "end": "1238960"
  },
  {
    "text": "that was involved in that network communication another example of really deep",
    "start": "1238960",
    "end": "1245679"
  },
  {
    "text": "observability that ebpdf enables is a pixie and this",
    "start": "1245679",
    "end": "1252640"
  },
  {
    "text": "enables all kinds of different observability measurements this is just one example",
    "start": "1252640",
    "end": "1257840"
  },
  {
    "text": "a flame graph and it's showing how cpu is being used for all the",
    "start": "1257840",
    "end": "1264640"
  },
  {
    "text": "applications across in fact in this case across the entire cluster because it can coordinate",
    "start": "1264640",
    "end": "1271440"
  },
  {
    "text": "information from multiple nodes so",
    "start": "1271440",
    "end": "1276559"
  },
  {
    "text": "cloud native cloud native is benefiting from really great observability tools and",
    "start": "1276559",
    "end": "1281840"
  },
  {
    "text": "they're highly performant because they run in the kernel giving us these deep insights to how our",
    "start": "1281840",
    "end": "1288080"
  },
  {
    "text": "applications are behaving we can also use this view across the",
    "start": "1288080",
    "end": "1294640"
  },
  {
    "start": "1290000",
    "end": "1483000"
  },
  {
    "text": "entire node to enable some really efficient networking connections",
    "start": "1294640",
    "end": "1301600"
  },
  {
    "text": "so let's look at how networking works in a",
    "start": "1301600",
    "end": "1306880"
  },
  {
    "text": "traditional pre-ebpf environment so",
    "start": "1306880",
    "end": "1312240"
  },
  {
    "text": "each of our pods is typically running in its own network namespace and that means",
    "start": "1312240",
    "end": "1317280"
  },
  {
    "text": "it's running a network stack that's separate from the host's network stack",
    "start": "1317280",
    "end": "1323520"
  },
  {
    "text": "and the pod is connected to the host through a virtual ethernet connection",
    "start": "1323520",
    "end": "1329280"
  },
  {
    "text": "so a network packet that's coming into this host and destined for that application",
    "start": "1329280",
    "end": "1335120"
  },
  {
    "text": "first of all has to traverse the network stack on the host and then it passes",
    "start": "1335120",
    "end": "1340159"
  },
  {
    "text": "across that virtual ethernet connection through the network stack in the pod and then finally it reaches",
    "start": "1340159",
    "end": "1347360"
  },
  {
    "text": "the application now with ebpf we can take responsibility for",
    "start": "1347360",
    "end": "1353440"
  },
  {
    "text": "connecting all of the different endpoints and when we receive a packet on that",
    "start": "1353440",
    "end": "1359679"
  },
  {
    "text": "physical interface we know that it's destined for that pod",
    "start": "1359679",
    "end": "1367280"
  },
  {
    "text": "because we're aware of the kubernetes identities and the addresses involved",
    "start": "1367280",
    "end": "1372480"
  },
  {
    "text": "so we can take that packet pass it straight to the pods networking namespace",
    "start": "1372480",
    "end": "1379520"
  },
  {
    "text": "and this makes the path for that network packet dramatically shorter and makes for faster networking",
    "start": "1379520",
    "end": "1388240"
  },
  {
    "text": "we can see this both in a flame graph this is uh taken from a blog post that we did",
    "start": "1388240",
    "end": "1394480"
  },
  {
    "text": "last year some benchmarking work that we did where you can see that some time is taken when a packet is",
    "start": "1394480",
    "end": "1401360"
  },
  {
    "text": "received some time is taken for it to be processed in evpf then it gets passed",
    "start": "1401360",
    "end": "1407600"
  },
  {
    "text": "directly into the pod and in the part where you can see",
    "start": "1407600",
    "end": "1413760"
  },
  {
    "text": "time being taken to traverse the network stack and then the socket",
    "start": "1413760",
    "end": "1420640"
  },
  {
    "text": "what this results in is more efficient networking",
    "start": "1421440",
    "end": "1426720"
  },
  {
    "text": "and this is true for psyllium is also true for calico in ebpf mode",
    "start": "1426720",
    "end": "1434000"
  },
  {
    "text": "the blue line on the left is a baseline of node to node host to host traffic",
    "start": "1434000",
    "end": "1439919"
  },
  {
    "text": "without any pods without any containers involved and we can see that we achieve nearly as",
    "start": "1439919",
    "end": "1446559"
  },
  {
    "text": "fast networking speeds using ebpf because we're able to bypass so much of",
    "start": "1446559",
    "end": "1452720"
  },
  {
    "text": "that additional networking stack whereas in the um legacy mode so not",
    "start": "1452720",
    "end": "1459600"
  },
  {
    "text": "using uh the short cutting process both psyllium and calico have",
    "start": "1459600",
    "end": "1468400"
  },
  {
    "text": "less they're able to handle fewer requests per second so ebpf is making a",
    "start": "1468400",
    "end": "1475360"
  },
  {
    "text": "significant improvement in the speed at which we can process",
    "start": "1475360",
    "end": "1480720"
  },
  {
    "text": "network packets",
    "start": "1480720",
    "end": "1483520"
  },
  {
    "start": "1483000",
    "end": "1700000"
  },
  {
    "text": "another really important aspect about ebpf is that not only does",
    "start": "1485760",
    "end": "1492000"
  },
  {
    "text": "ebpf programs have this ability to see it across the entire node",
    "start": "1492000",
    "end": "1497440"
  },
  {
    "text": "they can do it without having to make any changes to the applications",
    "start": "1497440",
    "end": "1503360"
  },
  {
    "text": "we don't have to change the way the application is configured we don't have to write any code within the application",
    "start": "1503360",
    "end": "1510799"
  },
  {
    "text": "the evpf program running in the kernel immediately gets visibility into those",
    "start": "1510799",
    "end": "1516320"
  },
  {
    "text": "programs even if the application was running before we load the ebpf program it's visible to ebpf",
    "start": "1516320",
    "end": "1524799"
  },
  {
    "text": "tooling nathan leclair did this really great cartoon uh about how we can use ebpf for",
    "start": "1524799",
    "end": "1533919"
  },
  {
    "text": "much more efficient instrumentation than the sidecar model",
    "start": "1533919",
    "end": "1539760"
  },
  {
    "text": "so what do we mean why is ebpf more efficient than side",
    "start": "1539760",
    "end": "1545200"
  },
  {
    "text": "cars well every time in the cycle model we have to",
    "start": "1545200",
    "end": "1550240"
  },
  {
    "text": "have a container inserted into every pod so that we can instrument that part",
    "start": "1550240",
    "end": "1556480"
  },
  {
    "text": "whether this is for logging or tracing or security tooling",
    "start": "1556480",
    "end": "1561919"
  },
  {
    "text": "you have to have that sidecar injected into the pod so that it can share the",
    "start": "1561919",
    "end": "1567440"
  },
  {
    "text": "namespace of that pod and see what's going on in that pod",
    "start": "1567440",
    "end": "1572799"
  },
  {
    "text": "and in order to inject that side container it has to be defined in the pods yaml",
    "start": "1572799",
    "end": "1580960"
  },
  {
    "text": "that probably isn't done manually you probably have some automated process to",
    "start": "1581279",
    "end": "1586640"
  },
  {
    "text": "inject the sidecar perhaps in admission control perhaps even in your ci cd system",
    "start": "1586640",
    "end": "1594480"
  },
  {
    "text": "but if the sidecar animal isn't there then the psycho won't get created it has",
    "start": "1594480",
    "end": "1601840"
  },
  {
    "text": "to be added through yaml so what if something goes wrong if the",
    "start": "1601840",
    "end": "1609279"
  },
  {
    "text": "uh the yaml doesn't get injected correctly then the sidecar will not have",
    "start": "1609279",
    "end": "1614400"
  },
  {
    "text": "visibility over what's happening inside that pod and that could be a misconfiguration",
    "start": "1614400",
    "end": "1621120"
  },
  {
    "text": "it could be you know a bug something that causes the sidecar to not be injected means the pod is invisible to",
    "start": "1621120",
    "end": "1627279"
  },
  {
    "text": "that tooling with the ebpf we don't need to modify the yaml at all we simply need to load",
    "start": "1627279",
    "end": "1634799"
  },
  {
    "text": "the ebpf code into the kernel and it immediately gets visibility",
    "start": "1634799",
    "end": "1640960"
  },
  {
    "text": "over all of the pods all of the containers within those pods",
    "start": "1640960",
    "end": "1646159"
  },
  {
    "text": "not only that but if there is something malicious running on the node",
    "start": "1646159",
    "end": "1652080"
  },
  {
    "text": "eppf tooling can see it so if you have an attacker who perhaps",
    "start": "1652080",
    "end": "1658799"
  },
  {
    "text": "they've compromised the node they've um they've started running some malicious",
    "start": "1658799",
    "end": "1664720"
  },
  {
    "text": "workloads in pods not in pods doesn't matter it's going to be visible to ebpf",
    "start": "1664720",
    "end": "1670480"
  },
  {
    "text": "code running in the kernel whereas if you're relying on the sidecar model",
    "start": "1670480",
    "end": "1676399"
  },
  {
    "text": "your attacker is probably not going to instrument their pods with your",
    "start": "1676399",
    "end": "1681679"
  },
  {
    "text": "observability tooling or your security tooling so evpf tooling makes it much more likely",
    "start": "1681679",
    "end": "1688960"
  },
  {
    "text": "that you will see any malicious activity happening on the node",
    "start": "1688960",
    "end": "1694640"
  },
  {
    "text": "the other very common use for side cars is with service mesh",
    "start": "1695520",
    "end": "1701039"
  },
  {
    "start": "1700000",
    "end": "1892000"
  },
  {
    "text": "and evpf is enabling service mesh models that don't require side cars",
    "start": "1701039",
    "end": "1708960"
  },
  {
    "text": "we launched the psyllium service mesh beta towards the end of 2021 and we've had",
    "start": "1708960",
    "end": "1715279"
  },
  {
    "text": "hundreds of people sign up to use it and the feedback has been phenomenal people",
    "start": "1715279",
    "end": "1720960"
  },
  {
    "text": "are very excited about it for a couple of reasons the first is",
    "start": "1720960",
    "end": "1726960"
  },
  {
    "text": "we don't need a sidecar in every pod and that reduces the complexity",
    "start": "1726960",
    "end": "1733840"
  },
  {
    "text": "and the resource usage so",
    "start": "1733840",
    "end": "1740240"
  },
  {
    "text": "take for example um well if you're going to inject a network of proxy into every pod",
    "start": "1740240",
    "end": "1747279"
  },
  {
    "text": "if that property has to have rooting information that rooting information is duplicated",
    "start": "1747279",
    "end": "1753679"
  },
  {
    "text": "in every sidecar whereas if we have one network proxy per node",
    "start": "1753679",
    "end": "1760480"
  },
  {
    "text": "then we only need one copy of that routing information it also makes it much less",
    "start": "1760480",
    "end": "1767279"
  },
  {
    "text": "complex to manage and we've had a lot of feedback from uh users who really want to avoid the um",
    "start": "1767279",
    "end": "1776159"
  },
  {
    "text": "the administrative overhead of dealing with a sidecar in every part",
    "start": "1776159",
    "end": "1782240"
  },
  {
    "text": "the other aspect that's a really significant improvement is network performance",
    "start": "1782240",
    "end": "1788480"
  },
  {
    "text": "so if we're using a sidecar a packet coming from the application has",
    "start": "1788480",
    "end": "1794159"
  },
  {
    "text": "to go through the loopback interface within the pods namespace so that it can",
    "start": "1794159",
    "end": "1799679"
  },
  {
    "text": "reach that network proxy that runs in user space and then the proxy can send the network",
    "start": "1799679",
    "end": "1805279"
  },
  {
    "text": "packet out through the well out through the podcast network namespace and then through the hosts",
    "start": "1805279",
    "end": "1812399"
  },
  {
    "text": "networking stack so it's quite a convoluted path for every network packet",
    "start": "1812399",
    "end": "1817440"
  },
  {
    "text": "here with ebpf and the psi sidecarless model we can dramatically shortcut that so",
    "start": "1817440",
    "end": "1825760"
  },
  {
    "text": "if traffic doesn't need layer 7 termination it can be sent very much",
    "start": "1825760",
    "end": "1831200"
  },
  {
    "text": "like the non-service mesh case it can go from the application",
    "start": "1831200",
    "end": "1837200"
  },
  {
    "text": "through the um through the ebpf network connection",
    "start": "1837200",
    "end": "1842320"
  },
  {
    "text": "directly to the physical interface in the case where there are packets that",
    "start": "1842320",
    "end": "1847840"
  },
  {
    "text": "do need to be terminated they can be sent to that network proxy",
    "start": "1847840",
    "end": "1853760"
  },
  {
    "text": "running in user space on the node but it's again a much shorter path",
    "start": "1853760",
    "end": "1859360"
  },
  {
    "text": "because we don't have to traverse network packets in both user specs",
    "start": "1859360",
    "end": "1864720"
  },
  {
    "text": "don't have to traverse network stacks in both the pod and the host",
    "start": "1864720",
    "end": "1871440"
  },
  {
    "text": "network namespaces",
    "start": "1871440",
    "end": "1874559"
  },
  {
    "text": "so service mesh is a great example where ebpf is",
    "start": "1877440",
    "end": "1884000"
  },
  {
    "text": "enabling us to think about cloud native problems in a in a new way in a in a",
    "start": "1884000",
    "end": "1889600"
  },
  {
    "text": "more efficient way ebpf is enabling a range of really powerful tools in cloud",
    "start": "1889600",
    "end": "1897760"
  },
  {
    "start": "1892000",
    "end": "1990000"
  },
  {
    "text": "native so on the landscape today there's psyllium has a networking plug-in it's",
    "start": "1897760",
    "end": "1904960"
  },
  {
    "text": "it's the only incubation level cni project",
    "start": "1904960",
    "end": "1910640"
  },
  {
    "text": "and within psyllium there's hubble observability which i showed you some examples of before to",
    "start": "1910640",
    "end": "1916799"
  },
  {
    "text": "collect network flow information and build up service maps for example",
    "start": "1916799",
    "end": "1924559"
  },
  {
    "text": "there's pixy which i showed you the example of a flame graph but again a very powerful",
    "start": "1924559",
    "end": "1930880"
  },
  {
    "text": "observability tool that can give you all sorts of insights into how your applications are running",
    "start": "1930880",
    "end": "1938158"
  },
  {
    "text": "a new sub project in the sillium family is tetragon which enables",
    "start": "1938320",
    "end": "1944240"
  },
  {
    "text": "security observability and runtime enforcement using ebpdf",
    "start": "1944240",
    "end": "1949919"
  },
  {
    "text": "and that falls into the security family of cncf tools along with falco which",
    "start": "1949919",
    "end": "1956399"
  },
  {
    "text": "also uses ebpf or a kernel module to provide",
    "start": "1956399",
    "end": "1963440"
  },
  {
    "text": "insight and observability for detecting malicious or suspicious",
    "start": "1963440",
    "end": "1969600"
  },
  {
    "text": "security events so there's this wide range of very",
    "start": "1969600",
    "end": "1975120"
  },
  {
    "text": "powerful tools and what they all have in common is you don't need to change your",
    "start": "1975120",
    "end": "1980159"
  },
  {
    "text": "application code to use them and they instantly get insight and control over",
    "start": "1980159",
    "end": "1986080"
  },
  {
    "text": "all of your cloud native applications running in the cluster",
    "start": "1986080",
    "end": "1991799"
  },
  {
    "text": "so ebpf makes the linux kernel programmable",
    "start": "1992399",
    "end": "1998320"
  },
  {
    "text": "linux is not the only operating system out there and ebpf is now being",
    "start": "1998320",
    "end": "2005360"
  },
  {
    "text": "created on windows we've recently seen the first demos of some psyllium",
    "start": "2005360",
    "end": "2010720"
  },
  {
    "text": "functionality running on windows through the ebpf on windows project",
    "start": "2010720",
    "end": "2018720"
  },
  {
    "text": "so we expect to see this powerful tooling capability extending",
    "start": "2018720",
    "end": "2025760"
  },
  {
    "text": "from linux but also into the windows world so that",
    "start": "2025760",
    "end": "2030799"
  },
  {
    "text": "you'll be able to run really powerful tooling on windows just as you can on",
    "start": "2030799",
    "end": "2036880"
  },
  {
    "text": "linux today so i hope that's given you some insight",
    "start": "2036880",
    "end": "2042320"
  },
  {
    "text": "into why i'm so excited about ebpf and why i believe it is the foundation for this new",
    "start": "2042320",
    "end": "2049919"
  },
  {
    "text": "generation of cloud native networking and security and observability tooling",
    "start": "2049919",
    "end": "2056000"
  },
  {
    "text": "if you want to find out more there are two free to download reports um that we've",
    "start": "2056000",
    "end": "2062560"
  },
  {
    "text": "published through o'reilly one is what is ebpf which is an introduction that i",
    "start": "2062560",
    "end": "2068079"
  },
  {
    "text": "wrote recently and another report on security observability with ebpf written by",
    "start": "2068079",
    "end": "2076240"
  },
  {
    "text": "natalia ivankov who's a colleague of mine at high surveillance and jed salazar",
    "start": "2076240",
    "end": "2081839"
  },
  {
    "text": "so both of these reports you can download from the i surveillance website if you want to check out psyllium",
    "start": "2081839",
    "end": "2088560"
  },
  {
    "text": "it is like all cncf projects available on github and very welcoming we would",
    "start": "2088560",
    "end": "2094000"
  },
  {
    "text": "love to get new contributions and uh there's a very very active slack",
    "start": "2094000",
    "end": "2099599"
  },
  {
    "text": "community that you'll find if you go to the sicilian website and and follow the",
    "start": "2099599",
    "end": "2104880"
  },
  {
    "text": "links to slack from there you'll find a community full of people who will help you out answer questions and get you",
    "start": "2104880",
    "end": "2111040"
  },
  {
    "text": "started on your psyllium journey so with that thank you very much for",
    "start": "2111040",
    "end": "2117200"
  },
  {
    "text": "hosting me today cubanetti's community day tonight i hope you've been having a wonderful day and i hope you have some",
    "start": "2117200",
    "end": "2124079"
  },
  {
    "text": "great questions for me thank you",
    "start": "2124079",
    "end": "2128240"
  }
]