[
  {
    "text": "excitement I introduce you to a remarkable technologist and influential leader in the cloud native ecosystem",
    "start": "0",
    "end": "5520"
  },
  {
    "text": "this rise as a chief open source officer at isowulin Liz has been instrumental in",
    "start": "5520",
    "end": "11880"
  },
  {
    "text": "shaping the future of container security Cloud native applications and eppf which you will learn more about it in a minute",
    "start": "11880",
    "end": "19260"
  },
  {
    "text": "list is a former chair of the cloud native Computing foundations technical oversight committee open UK board member",
    "start": "19260",
    "end": "26640"
  },
  {
    "text": "AWS container hero Google developer expert and so much more to introduce her",
    "start": "26640",
    "end": "31920"
  },
  {
    "text": "reasonable it would be a talk by itself in short she is a dedicated advocate for open source Technologies",
    "start": "31920",
    "end": "38579"
  },
  {
    "text": "her commitment to share her expertise earned a reputation as a trusted voice in the kubernetes and container security",
    "start": "38579",
    "end": "44820"
  },
  {
    "text": "communities this talent for breaking down technology into understandable bite sizes made her",
    "start": "44820",
    "end": "50940"
  },
  {
    "text": "more than well recognized in the open source world and Beyond she is also the",
    "start": "50940",
    "end": "56340"
  },
  {
    "text": "author of kubernetes security a go-to resource for understanding and implementing best practice and container",
    "start": "56340",
    "end": "62039"
  },
  {
    "text": "security and will publish soon next month her new book learning eppf",
    "start": "62039",
    "end": "68100"
  },
  {
    "text": "and here she is the influential and ever inspiring list rice",
    "start": "68100",
    "end": "73140"
  },
  {
    "text": "thank you so much for that very kind introduction Max um wonderful to be here thank you",
    "start": "73140",
    "end": "79500"
  },
  {
    "text": "everyone for joining us today in this event in support of the people in Ukraine shout out to anybody who's",
    "start": "79500",
    "end": "86580"
  },
  {
    "text": "watching us from there so um Max has given me an amazing introduction so I don't think I really",
    "start": "86580",
    "end": "92640"
  },
  {
    "text": "need to say any more about myself um",
    "start": "92640",
    "end": "97920"
  },
  {
    "text": "let's make sure I'm on the right screen there we go um max also mentioned my new",
    "start": "97920",
    "end": "103740"
  },
  {
    "text": "book it's actually already available electronically and the physical copies",
    "start": "103740",
    "end": "109500"
  },
  {
    "text": "are in at the printers right now so I haven't seen a physical copy myself yet but it's on its way",
    "start": "109500",
    "end": "117600"
  },
  {
    "text": "and it's called learning ebpf I've been really fascinated by this technology for",
    "start": "117600",
    "end": "123600"
  },
  {
    "text": "quite a few years now um and today I want to share some of that I guess enthusiasm as well as",
    "start": "123600",
    "end": "130800"
  },
  {
    "text": "knowledge I've got a ton to get through in this talk in a relatively short time so uh please do if you have questions",
    "start": "130800",
    "end": "138379"
  },
  {
    "text": "ask them in the chat if I don't have time during the talk I will try to answer them all afterwards",
    "start": "138379",
    "end": "146879"
  },
  {
    "text": "so the two maintainers of ebpf within the",
    "start": "147000",
    "end": "152340"
  },
  {
    "text": "Linux kernel Alexa and Daniel were kind enough to write some really nice quotes",
    "start": "152340",
    "end": "158220"
  },
  {
    "text": "about my book on the back and I wanted to particularly highlight this quote",
    "start": "158220",
    "end": "163500"
  },
  {
    "text": "from Daniel that evpf started a new infrastructure movement in the cloud native space and",
    "start": "163500",
    "end": "170879"
  },
  {
    "text": "that's really all I want to talk about today how we can make use of evpf to",
    "start": "170879",
    "end": "176400"
  },
  {
    "text": "really get a whole powerful new set of tools for managing our Cloud native",
    "start": "176400",
    "end": "184879"
  },
  {
    "text": "infrastructure and observing our applications and securing our applications",
    "start": "184879",
    "end": "191360"
  },
  {
    "text": "so what is it so the acronym kinda stands for",
    "start": "192720",
    "end": "198420"
  },
  {
    "text": "extended Barclay packet filter but it has so much more that it can do that has",
    "start": "198420",
    "end": "204900"
  },
  {
    "text": "nothing to do with packets and filtering that these days the EVP evpf acronym doesn't really carry all that much",
    "start": "204900",
    "end": "212879"
  },
  {
    "text": "meaning ebpf allows us to program the kernel we",
    "start": "212879",
    "end": "218819"
  },
  {
    "text": "can run custom programs within the kernel so let's just make sure we're all on the",
    "start": "218819",
    "end": "225780"
  },
  {
    "text": "same page about what that means when we talk about the kernel our operating system is divided into",
    "start": "225780",
    "end": "232620"
  },
  {
    "text": "user space and kernel and if we're writing applications we typically write",
    "start": "232620",
    "end": "238799"
  },
  {
    "text": "in user space whenever our applications want to do anything that touches Hardware",
    "start": "238799",
    "end": "246840"
  },
  {
    "text": "needs to ask for support for that through the system call interface to the",
    "start": "246840",
    "end": "252420"
  },
  {
    "text": "kernel now most of the time as developers we're blissfully unaware of this because our programming languages",
    "start": "252420",
    "end": "259019"
  },
  {
    "text": "take care of this for us but every time you want to read or write to a file or",
    "start": "259019",
    "end": "265380"
  },
  {
    "text": "communicate over a network allocates memory write something to the screen all",
    "start": "265380",
    "end": "270720"
  },
  {
    "text": "of these things will require support from the kernel and requires your application to make a system call to",
    "start": "270720",
    "end": "277919"
  },
  {
    "text": "support that activity is managing the interface to any hardware the kernels also coordinating",
    "start": "277919",
    "end": "285540"
  },
  {
    "text": "all the different user space processes that might be running on that machine",
    "start": "285540",
    "end": "291120"
  },
  {
    "text": "now with evpf we can insert programs into the kernel and attach them to",
    "start": "291120",
    "end": "297120"
  },
  {
    "text": "events that happen in the kernel that event might be a trace point in the",
    "start": "297120",
    "end": "302580"
  },
  {
    "text": "kernel code or in fact in user space code it could be uh the entry or exit",
    "start": "302580",
    "end": "308520"
  },
  {
    "text": "from a function it could be a network packet arriving it could there are all",
    "start": "308520",
    "end": "314040"
  },
  {
    "text": "sorts of different events that we can attach our ebpf program to we can literally instrument the entire system",
    "start": "314040",
    "end": "321380"
  },
  {
    "text": "with ebpf programs so this is a very simple example of the",
    "start": "321380",
    "end": "329280"
  },
  {
    "text": "kind of hello world program that you will see if you look at my book and if",
    "start": "329280",
    "end": "335039"
  },
  {
    "text": "you want to know more about evpf programming if we have a a line here that will generate",
    "start": "335039",
    "end": "342960"
  },
  {
    "text": "the trace hello world we attach this to the exact ve system",
    "start": "342960",
    "end": "349139"
  },
  {
    "text": "call that's the system call that's used when you want to run a new executable",
    "start": "349139",
    "end": "356340"
  },
  {
    "text": "that's an entire ebpf program in addition you need something in user",
    "start": "356340",
    "end": "362759"
  },
  {
    "text": "space to actually load that ebpf program into the kernels and I'm just going to",
    "start": "362759",
    "end": "367800"
  },
  {
    "text": "skip over that for today but if once we have that program loaded",
    "start": "367800",
    "end": "372840"
  },
  {
    "text": "into the kernel if we run anything any executable on the",
    "start": "372840",
    "end": "379919"
  },
  {
    "text": "same machine we would see a line of Trace generated and that tracing would also include some",
    "start": "379919",
    "end": "386340"
  },
  {
    "text": "information about the context of the event that triggered that particular ebpf program so here the",
    "start": "386340",
    "end": "393660"
  },
  {
    "text": "context is an exec the system call and we get some information about the process",
    "start": "393660",
    "end": "399900"
  },
  {
    "text": "that actually made the the call to accept for you and we get some the process ID and so on as well as the",
    "start": "399900",
    "end": "407220"
  },
  {
    "text": "trace generated so another example and this one I'll uh",
    "start": "407220",
    "end": "415020"
  },
  {
    "text": "I'll show this live so hopefully you can see my screen and I hope it's big enough",
    "start": "415020",
    "end": "422160"
  },
  {
    "text": "I hope someone will shout if it's if it's not so I could run an executable called open",
    "start": "422160",
    "end": "429539"
  },
  {
    "text": "Snape which uses uh evpf to monitor any file opening events",
    "start": "429539",
    "end": "438000"
  },
  {
    "text": "and if I run this on this virtual machine where I happen to be running kubernetes it's",
    "start": "438000",
    "end": "444599"
  },
  {
    "text": "actually a kind cluster I've got quite a lot of PODS running and as you can see",
    "start": "444599",
    "end": "450780"
  },
  {
    "text": "they're opening files a lot I'm just gonna",
    "start": "450780",
    "end": "455880"
  },
  {
    "text": "stop that and let's just concentrate on seeing any",
    "start": "455880",
    "end": "462060"
  },
  {
    "text": "uh opening any files being opened by bash",
    "start": "462060",
    "end": "468000"
  },
  {
    "text": "and oh that's interesting",
    "start": "468000",
    "end": "473300"
  },
  {
    "text": "okay that is a live demo excitement I don't know what it's complaining about",
    "start": "473400",
    "end": "479340"
  },
  {
    "text": "but that's going to take a minute I think to finish I'm going to kill that terminal",
    "start": "479340",
    "end": "486360"
  },
  {
    "text": "uh yes okay I'm gonna create another terminal I",
    "start": "486360",
    "end": "492660"
  },
  {
    "text": "think I've got another one already um ah okay I see what's happened my my pod",
    "start": "492660",
    "end": "499860"
  },
  {
    "text": "might have finished let's see if yeah run let me read this terminal off okay",
    "start": "499860",
    "end": "511039"
  },
  {
    "text": "let's try this again",
    "start": "512899",
    "end": "516860"
  },
  {
    "text": "see okay so that's working",
    "start": "518459",
    "end": "524600"
  },
  {
    "text": "and I'm just interested in Bash okay",
    "start": "524600",
    "end": "531240"
  },
  {
    "text": "so if I were to run bash in another terminal on the same virtual machine we",
    "start": "531240",
    "end": "536580"
  },
  {
    "text": "can see that bash opens a bunch of files but I also want to show what happens if",
    "start": "536580",
    "end": "542220"
  },
  {
    "text": "I uh to keep bash inside a pod",
    "start": "542220",
    "end": "549300"
  },
  {
    "text": "pod running called PCD and if I run bash in it I'm going to just clear the screen so",
    "start": "549300",
    "end": "555660"
  },
  {
    "text": "you can see what it generates yeah and my Alias isn't set up for cube",
    "start": "555660",
    "end": "561959"
  },
  {
    "text": "control and there we go so it doesn't matter",
    "start": "561959",
    "end": "567420"
  },
  {
    "text": "whether I was running bash inside a container in a pod or whether I",
    "start": "567420",
    "end": "574560"
  },
  {
    "text": "was running it directly on the host it's visible to this open Snoop executable",
    "start": "574560",
    "end": "581899"
  },
  {
    "text": "all right and that's one of the real powerful",
    "start": "582360",
    "end": "587459"
  },
  {
    "text": "um aspects characteristics of ebpf that makes it so useful for cloud native",
    "start": "587459",
    "end": "594120"
  },
  {
    "text": "tooling when we run applications under kubernetes we run them in containers",
    "start": "594120",
    "end": "600180"
  },
  {
    "text": "inside pods and those containers are essentially running in user space but",
    "start": "600180",
    "end": "605820"
  },
  {
    "text": "they all share one kernel per host machine so your machine or virtual",
    "start": "605820",
    "end": "613320"
  },
  {
    "text": "machine that's running a kubernetes node has a kernel that's common to all of those",
    "start": "613320",
    "end": "619380"
  },
  {
    "text": "pods and all of those containers that are running on it and whenever your applications want to",
    "start": "619380",
    "end": "625620"
  },
  {
    "text": "do anything interesting that whether it involves Hardware whether it involves creating new",
    "start": "625620",
    "end": "630899"
  },
  {
    "text": "containers all of those things are going to involve that common kernel that's",
    "start": "630899",
    "end": "636779"
  },
  {
    "text": "shared by all of those containers so the current",
    "start": "636779",
    "end": "642120"
  },
  {
    "text": "care of and involves volitions are doing regardless of what",
    "start": "642120",
    "end": "648480"
  },
  {
    "text": "pod they're running in if they're on that node they're using the same kernel",
    "start": "648480",
    "end": "655100"
  },
  {
    "text": "and that means that if we instrument the kernel with ebpf programs",
    "start": "655440",
    "end": "660720"
  },
  {
    "text": "those programs can be aware of and can influence what's happening across all of",
    "start": "660720",
    "end": "666720"
  },
  {
    "text": "our applications running on that machine and we don't have to make any changes to",
    "start": "666720",
    "end": "671820"
  },
  {
    "text": "our applications we don't have to change their configuration for them to be or",
    "start": "671820",
    "end": "677459"
  },
  {
    "text": "for their activity to be visible to those ebpf programs that are running in the kernel",
    "start": "677459",
    "end": "683700"
  },
  {
    "text": "and we can do all sorts of interesting things with those ebpf programs we can",
    "start": "683700",
    "end": "688740"
  },
  {
    "text": "use them to spot when events are happening and report on them I just showed you open",
    "start": "688740",
    "end": "695240"
  },
  {
    "text": "reporting on file open events we can be triggered by a network packing",
    "start": "695240",
    "end": "702839"
  },
  {
    "text": "a packet arriving at a certain point in the network stack and we can use that to",
    "start": "702839",
    "end": "709079"
  },
  {
    "text": "manipulate Network packets and we can even take security actions",
    "start": "709079",
    "end": "714839"
  },
  {
    "text": "from within the kernel so that allows us to use EPF to build",
    "start": "714839",
    "end": "720019"
  },
  {
    "text": "observability networking and security tools now one interesting thing I want to",
    "start": "720019",
    "end": "727860"
  },
  {
    "text": "convey today is that although I've written a book that's basically about writing evpf code for most of us we",
    "start": "727860",
    "end": "735540"
  },
  {
    "text": "don't need to write ebpf programs ourselves because there are already some",
    "start": "735540",
    "end": "740640"
  },
  {
    "text": "really amazing projects out there that can do really powerful things using this technology",
    "start": "740640",
    "end": "746519"
  },
  {
    "text": "so I'm going to show a few examples one of them is Inspector Gadget which just",
    "start": "746519",
    "end": "752100"
  },
  {
    "text": "got accepted into the sandbox in the cncf and I hope I can run a an example",
    "start": "752100",
    "end": "759540"
  },
  {
    "text": "of this let's see whether I can um",
    "start": "759540",
    "end": "765200"
  },
  {
    "text": "yes that has so I think I can do K gadgets uh Trace open and I think I can",
    "start": "765200",
    "end": "772440"
  },
  {
    "text": "do this in all namespaces",
    "start": "772440",
    "end": "776180"
  },
  {
    "text": "and that's very similar to the open Snoop example you already saw except",
    "start": "777660",
    "end": "783240"
  },
  {
    "text": "that now it's giving us some additional information about the kubernetes identities involved so we can see the",
    "start": "783240",
    "end": "790260"
  },
  {
    "text": "node and the namespace and the Pod name as well as things like the process ID",
    "start": "790260",
    "end": "796500"
  },
  {
    "text": "that's involved so that could",
    "start": "796500",
    "end": "804120"
  },
  {
    "text": "be crucial if we want to use ebpf tools to manage or secure Cloud native",
    "start": "804120",
    "end": "811800"
  },
  {
    "text": "applications we're going to need this kubernetes information so that we can correlate",
    "start": "811800",
    "end": "817279"
  },
  {
    "text": "events to the pods and the applications that are involved in that activity",
    "start": "817279",
    "end": "825440"
  },
  {
    "text": "so inspect Ive way of getting kubernetes",
    "start": "825899",
    "end": "831560"
  },
  {
    "text": "information from using that in conjunction with evpf tools",
    "start": "831560",
    "end": "837899"
  },
  {
    "text": "another example of something that is kubernetes aware is psyllium so psyllium",
    "start": "837899",
    "end": "843540"
  },
  {
    "text": "provides networking and Security in the form of things like Network policy and",
    "start": "843540",
    "end": "850019"
  },
  {
    "text": "network encryption so it's a cni a networking plug-in for",
    "start": "850019",
    "end": "855959"
  },
  {
    "text": "kubernetes I'm not going to run through all of its uh various capabilities",
    "start": "855959",
    "end": "862139"
  },
  {
    "text": "um other than to say that it is a very powerful full-featured way of connecting",
    "start": "862139",
    "end": "867240"
  },
  {
    "text": "your Cloud native applications to each other and to the outside world through",
    "start": "867240",
    "end": "872820"
  },
  {
    "text": "things like egress Gateway and multi-cluster support and so on we'll",
    "start": "872820",
    "end": "878100"
  },
  {
    "text": "talk a bit about some of these features a little bit more later",
    "start": "878100",
    "end": "883279"
  },
  {
    "text": "one of the things that we can do with ebpf is to manipulate Network packets I",
    "start": "883500",
    "end": "891360"
  },
  {
    "text": "mentioned that earlier now this diagram shows the path that a packet has to take",
    "start": "891360",
    "end": "898920"
  },
  {
    "text": "in traditional container networking to get to a pod so",
    "start": "898920",
    "end": "904800"
  },
  {
    "text": "by design a pod will typically have its own it will have a network name space of",
    "start": "904800",
    "end": "910260"
  },
  {
    "text": "its own it will not share the namespace of the host and that means it's connected to the",
    "start": "910260",
    "end": "916740"
  },
  {
    "text": "host's networking stack through a virtual ethernet connection",
    "start": "916740",
    "end": "921779"
  },
  {
    "text": "so a packet that wants to come from the outside world to reach that pod has to",
    "start": "921779",
    "end": "928079"
  },
  {
    "text": "come in through the hosts physical ethernet connection Traverse the host's networking stack",
    "start": "928079",
    "end": "934620"
  },
  {
    "text": "then go across this virtual ethernet connection into the Pod where it goes",
    "start": "934620",
    "end": "939720"
  },
  {
    "text": "through another copy of the networking stack to reach the application so that's quite a convoluted route for a",
    "start": "939720",
    "end": "947639"
  },
  {
    "text": "networking packet to take and the more the longer this path is the more it's",
    "start": "947639",
    "end": "953339"
  },
  {
    "text": "potentially going to affect latency with eppf we can intercept the packet as",
    "start": "953339",
    "end": "959160"
  },
  {
    "text": "it arrives on that physical interface and redirect redirect it straight into",
    "start": "959160",
    "end": "966120"
  },
  {
    "text": "the pods networking namespace so we get to bypass a lot of that host networking",
    "start": "966120",
    "end": "972600"
  },
  {
    "text": "stack and that creates some really uh important performance improvements",
    "start": "972600",
    "end": "979560"
  },
  {
    "text": "we also want to be able to see as operators of a uh of a deployment we",
    "start": "979560",
    "end": "986040"
  },
  {
    "text": "want to see what networking is happening and psyllium has a component called",
    "start": "986040",
    "end": "991500"
  },
  {
    "text": "Hubble that also uses ebpf to report on each individual Network packet and to",
    "start": "991500",
    "end": "998880"
  },
  {
    "text": "build that up into a picture of how different services are communicating with each other",
    "start": "998880",
    "end": "1004339"
  },
  {
    "text": "you can see it in this kind of UI view there's also a command line View and it",
    "start": "1004339",
    "end": "1010040"
  },
  {
    "text": "generates Prometheus metrics so if we combine psyllium Hubble and Prometheus",
    "start": "1010040",
    "end": "1015320"
  },
  {
    "text": "we can get some really powerful visualizations of",
    "start": "1015320",
    "end": "1020560"
  },
  {
    "text": "what's happening in our networking can also integrate that into grafana's",
    "start": "1020560",
    "end": "1027860"
  },
  {
    "text": "stack and this is an example showing how we can use Tempo tracing we can get",
    "start": "1027860",
    "end": "1035720"
  },
  {
    "text": "examples from uh from grafana and use that to see individual exemplars of",
    "start": "1035720",
    "end": "1042380"
  },
  {
    "text": "individual Network packets so this open source collection of tools can give",
    "start": "1042380",
    "end": "1048679"
  },
  {
    "text": "you this very powerful insight into how networking is behaving in your cluster",
    "start": "1048679",
    "end": "1054679"
  },
  {
    "text": "another really powerful observability tool in the cntf landscape is Pixie",
    "start": "1054679",
    "end": "1060640"
  },
  {
    "text": "this runs uh it's kind of similar to how Inspector Gadget runs at ebpf",
    "start": "1060640",
    "end": "1067580"
  },
  {
    "text": "programs and kind of Associates them with kubernetes identities pixie also",
    "start": "1067580",
    "end": "1073340"
  },
  {
    "text": "runs uh ebpf programs and Scripts and gives you visualizations of the",
    "start": "1073340",
    "end": "1080660"
  },
  {
    "text": "output this is just one example and it's showing how CPU usage is",
    "start": "1080660",
    "end": "1087280"
  },
  {
    "text": "behaving across an entire cluster so this is aggregating data from multiple",
    "start": "1087280",
    "end": "1094400"
  },
  {
    "text": "nodes and this is just one of the the different views that pixie can provide using the power of ebpf",
    "start": "1094400",
    "end": "1102820"
  },
  {
    "text": "if we tend to security and we want to observe security events one of the",
    "start": "1104299",
    "end": "1109880"
  },
  {
    "text": "well-known projects in this space is Falco which has an evpf mode for detecting",
    "start": "1109880",
    "end": "1116059"
  },
  {
    "text": "particular events much like my Hello World example this particular example",
    "start": "1116059",
    "end": "1121220"
  },
  {
    "text": "from the Falco docs is attached to the exact ve system call and",
    "start": "1121220",
    "end": "1128059"
  },
  {
    "text": "having detected that a binary is being executed there's a policy here that",
    "start": "1128059",
    "end": "1133460"
  },
  {
    "text": "checks whether or not it's running netcat which is probably not something",
    "start": "1133460",
    "end": "1139039"
  },
  {
    "text": "that you want to see running in your production clusters",
    "start": "1139039",
    "end": "1143980"
  },
  {
    "text": "salim's also recently added a security observability tool I saved recently it was a year ago or so ago now",
    "start": "1144440",
    "end": "1151880"
  },
  {
    "text": "and this uses ebpf to um observe not just observe the events",
    "start": "1151880",
    "end": "1160039"
  },
  {
    "text": "but also to filter events within the kernel so in this example we will",
    "start": "1160039",
    "end": "1166220"
  },
  {
    "text": "observe file activity associated with the FD install",
    "start": "1166220",
    "end": "1171380"
  },
  {
    "text": "function within the kernel and we're going to filter those events so that only activity related to the to",
    "start": "1171380",
    "end": "1180020"
  },
  {
    "text": "files in the ETC directory will actually generate an event",
    "start": "1180020",
    "end": "1185240"
  },
  {
    "text": "and then we can look at the output and see if",
    "start": "1185240",
    "end": "1190760"
  },
  {
    "text": "someone is opening writing reading from a file in that directory it will generate a",
    "start": "1190760",
    "end": "1197059"
  },
  {
    "text": "tetragon event so",
    "start": "1197059",
    "end": "1202880"
  },
  {
    "text": "it's given you an overview of the kind of powerful tools that we have already",
    "start": "1202880",
    "end": "1207919"
  },
  {
    "text": "in the cloud native landscape that are based on ebpf and using it to really",
    "start": "1207919",
    "end": "1214640"
  },
  {
    "text": "provide incredibly useful and performant tools I want to talk a bit about how that",
    "start": "1214640",
    "end": "1220640"
  },
  {
    "text": "differs from sidecars because a lot of that kind of tooling blogging tracing",
    "start": "1220640",
    "end": "1226160"
  },
  {
    "text": "even some Network capabilities have previously been implemented using sidecars",
    "start": "1226160",
    "end": "1232539"
  },
  {
    "text": "before we even had side cars we had libraries and the problem with libraries",
    "start": "1232539",
    "end": "1237919"
  },
  {
    "text": "is if you want to have the same common code running across all your different applications you would need a library",
    "start": "1237919",
    "end": "1245260"
  },
  {
    "text": "implemented in each of the programming languages that you use in your applications so if you want to do let's",
    "start": "1245260",
    "end": "1252740"
  },
  {
    "text": "say login you might need a python library for logging for your python applications and a go library for",
    "start": "1252740",
    "end": "1258799"
  },
  {
    "text": "logging for your go applications with containerization we're able to pull",
    "start": "1258799",
    "end": "1264980"
  },
  {
    "text": "that Library code out into a sidecar container and because those containers are",
    "start": "1264980",
    "end": "1272380"
  },
  {
    "text": "isolated from the application container they can be written in any language you like so we can just have one common",
    "start": "1272380",
    "end": "1279500"
  },
  {
    "text": "container that's shared and used by all of our different pods regardless of what",
    "start": "1279500",
    "end": "1285080"
  },
  {
    "text": "application so we can get common functionality implemented in a",
    "start": "1285080",
    "end": "1290299"
  },
  {
    "text": "consistent way across all our applications running in that cluster",
    "start": "1290299",
    "end": "1296299"
  },
  {
    "text": "the problem is that a sidecar container body design is running inside a pod and",
    "start": "1296299",
    "end": "1303860"
  },
  {
    "text": "can only see that pod and in order to get there",
    "start": "1303860",
    "end": "1309500"
  },
  {
    "text": "there has to be some yaml configuration that configures that sidecar container",
    "start": "1309500",
    "end": "1315320"
  },
  {
    "text": "you probably don't write that yaml by hand there's probably some automated process that injects the sidecar yaml",
    "start": "1315320",
    "end": "1323419"
  },
  {
    "text": "into your application yaml but if through some kind of misconfiguration or",
    "start": "1323419",
    "end": "1329360"
  },
  {
    "text": "error if the psychar doesn't get injected into any given pod then that",
    "start": "1329360",
    "end": "1335179"
  },
  {
    "text": "pod is not instrumented and your tool does not have visibility over it if it",
    "start": "1335179",
    "end": "1340760"
  },
  {
    "text": "were a logging Library you would not be getting logging if the sidecar or a",
    "start": "1340760",
    "end": "1345860"
  },
  {
    "text": "logging container logging cycle if that sidecar wasn't there you wouldn't be getting logs out of that pod",
    "start": "1345860",
    "end": "1354158"
  },
  {
    "text": "in contrast if we instrument the kernel as we've already seen that means it has",
    "start": "1354200",
    "end": "1360860"
  },
  {
    "text": "visibility to all of our different pods and we didn't have to make any changes to the pod",
    "start": "1360860",
    "end": "1366919"
  },
  {
    "text": "in order for the ebpf program to have visibility what's more if some kind of malicious",
    "start": "1366919",
    "end": "1374600"
  },
  {
    "text": "process starts running in your node whether that's directly on the host or within a pod",
    "start": "1374600",
    "end": "1380780"
  },
  {
    "text": "it's visible to ebpf programs because ebpf doesn't care whether a process is",
    "start": "1380780",
    "end": "1386419"
  },
  {
    "text": "in a pod or not sidecars also can require pretty",
    "start": "1386419",
    "end": "1393260"
  },
  {
    "text": "significant resource usage because they are by Design isolated from each other",
    "start": "1393260",
    "end": "1398960"
  },
  {
    "text": "using the Pod model they each need their own copy of any configuration routing",
    "start": "1398960",
    "end": "1404840"
  },
  {
    "text": "information that kind of thing if we're using ebpf we don't have to",
    "start": "1404840",
    "end": "1410299"
  },
  {
    "text": "have duplicate copies of that configuration or whatever other information we can have a single",
    "start": "1410299",
    "end": "1416840"
  },
  {
    "text": "instance of that information and access it using a mechanism called ebpf maps",
    "start": "1416840",
    "end": "1423440"
  },
  {
    "text": "that allows us to share information between a user space process and the kernel ebpf applications",
    "start": "1423440",
    "end": "1431740"
  },
  {
    "text": "this allows us to remove proxy sidecars",
    "start": "1431780",
    "end": "1438080"
  },
  {
    "text": "from service mesh so the traditional model for service mesh is to have a proxy container",
    "start": "1438080",
    "end": "1445280"
  },
  {
    "text": "running inside every application pod",
    "start": "1445280",
    "end": "1449740"
  },
  {
    "text": "just about a year ago we introduced psyllium service mesh which still has a",
    "start": "1450980",
    "end": "1456980"
  },
  {
    "text": "proxy still uses Envoy in fact as the proxy component but rather than having one",
    "start": "1456980",
    "end": "1463700"
  },
  {
    "text": "instance in every single pod we can have a single instance per node per host and",
    "start": "1463700",
    "end": "1470539"
  },
  {
    "text": "connect the network stack via that proxy when",
    "start": "1470539",
    "end": "1475880"
  },
  {
    "text": "necessary using evpf that problem of having multiple uh proxy",
    "start": "1475880",
    "end": "1484700"
  },
  {
    "text": "pods inserted into every single one of your applications has long been recognized as a problem for service mesh",
    "start": "1484700",
    "end": "1494539"
  },
  {
    "text": "and it doesn't just cost resources it also adds Network latency because the",
    "start": "1494539",
    "end": "1499700"
  },
  {
    "text": "path that a packet has to pass through to get through service mesh proxy inside every pod",
    "start": "1499700",
    "end": "1506120"
  },
  {
    "text": "gets even longer and you've Reus ebpf we can bypass a lot",
    "start": "1506120",
    "end": "1513320"
  },
  {
    "text": "of that stack even if we have to go through a layer 7 proxy we I have a much",
    "start": "1513320",
    "end": "1520280"
  },
  {
    "text": "shorter path than if there's a separate proxy in every pod",
    "start": "1520280",
    "end": "1525440"
  },
  {
    "text": "this becomes even more true if we're communicating between two different pods",
    "start": "1525440",
    "end": "1531440"
  },
  {
    "text": "if we're able to replace that with a single proxy if those pods are",
    "start": "1531440",
    "end": "1537679"
  },
  {
    "text": "co-located on the same node the path is dramatically shorter",
    "start": "1537679",
    "end": "1544179"
  },
  {
    "text": "we know that users have been really keen on the benefits of removing sidecars the um",
    "start": "1545179",
    "end": "1552679"
  },
  {
    "text": "not just removing the latency overhead but the reduction in complexity that it",
    "start": "1552679",
    "end": "1558020"
  },
  {
    "text": "provides and psyllium is not the only service mesh implementation that has",
    "start": "1558020",
    "end": "1564919"
  },
  {
    "text": "started to move away from the sidecar model istio have also introduced ambient",
    "start": "1564919",
    "end": "1570380"
  },
  {
    "text": "mesh which again avoids using sidecars we don't",
    "start": "1570380",
    "end": "1575480"
  },
  {
    "text": "have quite the same implementation but I think it shows the direction of travel",
    "start": "1575480",
    "end": "1581799"
  },
  {
    "text": "one question that comes up with this is what about encryption so",
    "start": "1581980",
    "end": "1587419"
  },
  {
    "text": "for many use cases transparent encryption which has been part of",
    "start": "1587419",
    "end": "1592580"
  },
  {
    "text": "psyllium for a long time is sufficient transparent because you don't have to",
    "start": "1592580",
    "end": "1597860"
  },
  {
    "text": "make any changes to your application you simply have the kernel at either end of",
    "start": "1597860",
    "end": "1603860"
  },
  {
    "text": "a communication do the encryption using the nodes identity for the encryption",
    "start": "1603860",
    "end": "1610400"
  },
  {
    "text": "keys foreign a lot of people have used mtls and",
    "start": "1610400",
    "end": "1615620"
  },
  {
    "text": "service mesh so that they can have layer 7 specific application identities for",
    "start": "1615620",
    "end": "1621740"
  },
  {
    "text": "encryption and that is now something that you can support in psyllium service",
    "start": "1621740",
    "end": "1627260"
  },
  {
    "text": "mesh using a Next Generation mtls implementation where we can inject",
    "start": "1627260",
    "end": "1634039"
  },
  {
    "text": "identities spiffy identities certificates into the kernel and use",
    "start": "1634039",
    "end": "1639799"
  },
  {
    "text": "that transparent encryption protocol to secure the connection but using a layer",
    "start": "1639799",
    "end": "1645140"
  },
  {
    "text": "7 identity so is ebpf going to mean the end of the",
    "start": "1645140",
    "end": "1650960"
  },
  {
    "text": "sidecar model there's this fantastic cartoon that Nathan Leclair did a few years ago I",
    "start": "1650960",
    "end": "1656779"
  },
  {
    "text": "think it's wonderful my other sidecar is a kernel and",
    "start": "1656779",
    "end": "1663200"
  },
  {
    "text": "while I think it is likely to be a better approach in many cases there",
    "start": "1663200",
    "end": "1669440"
  },
  {
    "text": "are a couple of reasons why you might still use sidecars one is if you're writing your own code",
    "start": "1669440",
    "end": "1675919"
  },
  {
    "text": "you may have your own sidecar container you don't necessarily want to re-implement that in the kernel because",
    "start": "1675919",
    "end": "1682820"
  },
  {
    "text": "evpf programming requires kernel knowledge might be an unnecessary",
    "start": "1682820",
    "end": "1689020"
  },
  {
    "text": "unnecessarily High bar to jump to avoid having sidecars",
    "start": "1689020",
    "end": "1695059"
  },
  {
    "text": "the other question is whether or not you actually have access to the node to install evpf if you're using a um kind",
    "start": "1695059",
    "end": "1703340"
  },
  {
    "text": "of serverless model or if you're using something like fargate and you don't actually have access to the underlying",
    "start": "1703340",
    "end": "1708980"
  },
  {
    "text": "nodes the underlying machines you may not have permissions or ability to",
    "start": "1708980",
    "end": "1715700"
  },
  {
    "text": "configure ebpf on those machines but I think the real reason why there",
    "start": "1715700",
    "end": "1723559"
  },
  {
    "text": "will be a push towards evpf is the improved performance that it gives us this is an example of layer 7 parsing",
    "start": "1723559",
    "end": "1731980"
  },
  {
    "text": "using evpf versus using a user space proxy to perform the same parsing and as",
    "start": "1731980",
    "end": "1739039"
  },
  {
    "text": "you can see ebpf is almost as fast as if we just weren't doing any parsing at all",
    "start": "1739039",
    "end": "1746559"
  },
  {
    "text": "so I hope that has in a very quick run through giving you an idea of why I'm so",
    "start": "1746900",
    "end": "1752900"
  },
  {
    "text": "excited about Cloud native ebpf superpowers as I said you don't have to",
    "start": "1752900",
    "end": "1758000"
  },
  {
    "text": "write ebpf code yourself but if you do want to well if you don't",
    "start": "1758000",
    "end": "1763039"
  },
  {
    "text": "want to I'm going to advise you if you want more detail I wrote a short report that's much sort of higher level",
    "start": "1763039",
    "end": "1770299"
  },
  {
    "text": "about how ebpf provides such powerful platform for new tooling",
    "start": "1770299",
    "end": "1776539"
  },
  {
    "text": "and if you do want to write evpf code then let me point you at my new book",
    "start": "1776539",
    "end": "1782320"
  },
  {
    "text": "either way there are lots of practical examples you can try out for yourself on",
    "start": "1782320",
    "end": "1788120"
  },
  {
    "text": "the eye surveillance Labs site and you can also download those books for the",
    "start": "1788120",
    "end": "1795799"
  },
  {
    "text": "cost of your contact details from I said valent.com with that",
    "start": "1795799",
    "end": "1802360"
  },
  {
    "text": "that's true I think of what I think ebpf is bringing to the",
    "start": "1802520",
    "end": "1807620"
  },
  {
    "text": "cloud native world I hope you will have some questions I'll be online here I'm",
    "start": "1807620",
    "end": "1813020"
  },
  {
    "text": "also if you want to contact me on the internet I'm Liz rice pretty much everywhere on the internet",
    "start": "1813020",
    "end": "1819320"
  },
  {
    "text": "so thank you very much for having me here today thank you very much Liz awesome to have",
    "start": "1819320",
    "end": "1826100"
  },
  {
    "text": "you I'm just checking shortly the Q a and the session chat if there's already some",
    "start": "1826100",
    "end": "1832399"
  },
  {
    "text": "questions dropping in um maybe one short one from my side is",
    "start": "1832399",
    "end": "1837860"
  },
  {
    "text": "um what do you think will be the next big step with eppf what are the next reason development this direction",
    "start": "1837860",
    "end": "1844220"
  },
  {
    "text": "so it's really interesting um working I surveillance I I get to",
    "start": "1844220",
    "end": "1850039"
  },
  {
    "text": "work with people like Daniel balkman who is maintaining ebpf in the kernel and you know they've been doing really",
    "start": "1850039",
    "end": "1856760"
  },
  {
    "text": "interesting things with uh things like um support for it's called Big TCP like",
    "start": "1856760",
    "end": "1863480"
  },
  {
    "text": "big data packets um which is going to enable some much",
    "start": "1863480",
    "end": "1869500"
  },
  {
    "text": "faster um yeah well higher performance networking",
    "start": "1869500",
    "end": "1875480"
  },
  {
    "text": "um there are some interesting things around the way that the ebpf language",
    "start": "1875480",
    "end": "1881299"
  },
  {
    "text": "itself is evolving or the C that we use for our ebpf language ebpf programs is",
    "start": "1881299",
    "end": "1887299"
  },
  {
    "text": "evolving um so yeah there's the interesting thing is that it takes quite a long time for",
    "start": "1887299",
    "end": "1894679"
  },
  {
    "text": "the new features in the kernel to actually reach production",
    "start": "1894679",
    "end": "1899960"
  },
  {
    "text": "so uh the versions of the Linux kernel that everyone's Now using in production",
    "start": "1899960",
    "end": "1906260"
  },
  {
    "text": "have certainly sufficient modern versions of",
    "start": "1906260",
    "end": "1912500"
  },
  {
    "text": "ebpf capabilities that they can use all of the tools that I've mentioned today",
    "start": "1912500",
    "end": "1918679"
  },
  {
    "text": "um but for things like you know these super efficient networking capabilities we're",
    "start": "1918679",
    "end": "1925460"
  },
  {
    "text": "probably going to have to wait for a year or two before those candles are available for production use unless you",
    "start": "1925460",
    "end": "1931760"
  },
  {
    "text": "want to go and use a cutting-edge bleeding edge kernel",
    "start": "1931760",
    "end": "1937000"
  },
  {
    "text": "awesome thank you very much I don't see any other question coming up except thanks very good which is not a question",
    "start": "1937000",
    "end": "1943700"
  },
  {
    "text": "but like a statement I would say well I appreciate it even if it's not a question",
    "start": "1943700",
    "end": "1950059"
  },
  {
    "text": "as Liz said you can reach out to her anytime or drop still questions here because time wise we need to keep it",
    "start": "1950059",
    "end": "1957380"
  },
  {
    "text": "rolling thank you again Liz have a great day thanks for being here thanks bye",
    "start": "1957380",
    "end": "1962480"
  },
  {
    "text": "everyone",
    "start": "1962480",
    "end": "1964539"
  },
  {
    "text": "[Music]",
    "start": "1976760",
    "end": "1986460"
  },
  {
    "text": "[Applause] [Music]",
    "start": "1986460",
    "end": "1993389"
  },
  {
    "text": "foreign [Music]",
    "start": "1994039",
    "end": "2034660"
  },
  {
    "text": "[Music]",
    "start": "2036950",
    "end": "2046189"
  },
  {
    "text": "[Music]",
    "start": "2049280",
    "end": "2052319"
  },
  {
    "text": "[Music]",
    "start": "2059150",
    "end": "2065358"
  },
  {
    "text": "foreign [Music] [Applause] [Music]",
    "start": "2094000",
    "end": "2100780"
  },
  {
    "text": "[Applause]",
    "start": "2110050",
    "end": "2114469"
  },
  {
    "text": "[Applause]",
    "start": "2116470",
    "end": "2124019"
  },
  {
    "text": "[Music]",
    "start": "2130860",
    "end": "2136380"
  }
]