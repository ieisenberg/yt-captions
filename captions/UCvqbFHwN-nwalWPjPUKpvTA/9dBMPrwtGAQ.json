[
  {
    "text": "all right the crowd work has come to an end it's 11 A.M so we can actually talk about grpc the thing that you're here to",
    "start": "9860",
    "end": "17279"
  },
  {
    "text": "hear about uh yes",
    "start": "17279",
    "end": "21800"
  },
  {
    "text": "clapping for our terrible jokes to end uh all right so this talk is the RPC",
    "start": "23340",
    "end": "28439"
  },
  {
    "text": "Revolution getting the most out of grpc I am Richard Belleville I'm a software engineer I'm the grpc team I work on the",
    "start": "28439",
    "end": "35579"
  },
  {
    "text": "python bindings but also a ton of other stuff Within grpc thank you Richard uh yeah my name is",
    "start": "35579",
    "end": "42600"
  },
  {
    "text": "Kevin Nelson and I'm one of the leads on the on the grpc team",
    "start": "42600",
    "end": "48000"
  },
  {
    "text": "uh I I you know we talked to folks before we got started and it seemed like about half of you were extremely",
    "start": "48000",
    "end": "54600"
  },
  {
    "text": "familiar with grpc and frequent users um but for the rest of you kind of you",
    "start": "54600",
    "end": "60059"
  },
  {
    "text": "know what is grpc um we are you know very very popular framework",
    "start": "60059",
    "end": "66479"
  },
  {
    "text": "um that has adoption across many languages ability for servers to talk to each other in different languages and a",
    "start": "66479",
    "end": "73320"
  },
  {
    "text": "lot of adoption and uh you know for us we really see ourselves if you are doing",
    "start": "73320",
    "end": "78960"
  },
  {
    "text": "micro services or thinking about microservices we feel like grpc is is really a great framework for doing that",
    "start": "78960",
    "end": "86400"
  },
  {
    "text": "and so if you're considering microservices or User it's a it's a great thing if you're not grpc is still",
    "start": "86400",
    "end": "92580"
  },
  {
    "text": "amazing so cool so uh I'm gonna go over a quick",
    "start": "92580",
    "end": "98220"
  },
  {
    "text": "kind of just you know adoption and some high level stuff and then I'll pass it off to Richard for more of the the",
    "start": "98220",
    "end": "104400"
  },
  {
    "text": "technical details uh and I wanted to share kind of some of the numbers some of the things that we're proud of and",
    "start": "104400",
    "end": "110640"
  },
  {
    "text": "the continued growth and Adoption of grpc uh as you can see here for node.js",
    "start": "110640",
    "end": "116119"
  },
  {
    "text": "uh six million weekly downloads so in npm and uh python we're actually the the",
    "start": "116119",
    "end": "122700"
  },
  {
    "text": "number 59 most downloaded package on Pipi so that's pretty impressive and",
    "start": "122700",
    "end": "128880"
  },
  {
    "text": "Richard here he's our our Tech lead for python and then finally uh in Java uh",
    "start": "128880",
    "end": "136080"
  },
  {
    "text": "you know for the for Maven Maven Central uh we have 12 and a half uh million",
    "start": "136080",
    "end": "141660"
  },
  {
    "text": "downloads uh every month and uh Sanjay in the front row here he's",
    "start": "141660",
    "end": "146879"
  },
  {
    "text": "uh he's on the on the Java team so here's a chart uh from Star history",
    "start": "146879",
    "end": "154140"
  },
  {
    "text": "from GitHub and this is our main grpc kind of grpc grpc repo not one of the",
    "start": "154140",
    "end": "160140"
  },
  {
    "text": "language repos but the main core repo and as you can see uh going way back",
    "start": "160140",
    "end": "166760"
  },
  {
    "text": "2016 to today continued kind of linear growth and adoption is is really really",
    "start": "166760",
    "end": "173700"
  },
  {
    "text": "strong and healthy and we want to thank all of you for that we're really proud of it hope it continues to grow and you",
    "start": "173700",
    "end": "181560"
  },
  {
    "text": "know just a reminder for those of you who are considering we're very active very vibrant and things are going well",
    "start": "181560",
    "end": "189900"
  },
  {
    "text": "uh one of the the key products that uh we're launching and I had a discussion",
    "start": "189900",
    "end": "196980"
  },
  {
    "text": "with the PMS I said can I say within hours or days or weeks",
    "start": "196980",
    "end": "202980"
  },
  {
    "text": "but anyway it's it's going to be very very soon in the next few days uh we're",
    "start": "202980",
    "end": "208980"
  },
  {
    "text": "going to launch um an observability um product for grpc and for those who",
    "start": "208980",
    "end": "216720"
  },
  {
    "text": "are using gcp this gives a lot of kind of power out of the box for you and we",
    "start": "216720",
    "end": "222900"
  },
  {
    "text": "recommend everyone look at it try it out see if it's great for you you know one",
    "start": "222900",
    "end": "229260"
  },
  {
    "text": "of the things that we're able to do as part of the framework is add a bunch of the insights and instrumentation",
    "start": "229260",
    "end": "235640"
  },
  {
    "text": "directly into the framework so you get this TurnKey you know add a few lines of configuration to turn this on and you",
    "start": "235640",
    "end": "243000"
  },
  {
    "text": "get the observability we actually launched a public preview at kubecon",
    "start": "243000",
    "end": "248700"
  },
  {
    "text": "Detroit and then now for this kubecon we're we're making it public so",
    "start": "248700",
    "end": "255900"
  },
  {
    "text": "oh I wanted to share a little bit of just where our thought is in the road map",
    "start": "255900",
    "end": "262440"
  },
  {
    "text": "kind of what we're working on where our focus is these days and you know",
    "start": "262440",
    "end": "267840"
  },
  {
    "text": "observability that I just talked about that is going to continue to be an area of focus for us we understand how",
    "start": "267840",
    "end": "274500"
  },
  {
    "text": "important those insights are to all of you and we have a bunch of stuff ideas and things that that we're driving there",
    "start": "274500",
    "end": "281600"
  },
  {
    "text": "the another big area of focus for the team is service mesh so trying to do",
    "start": "281600",
    "end": "287340"
  },
  {
    "text": "more to make you know grpc more and more the de facto standard for how you build",
    "start": "287340",
    "end": "293580"
  },
  {
    "text": "service mesh and you know add all the features and then finally one of the things that we're trying to do we have a",
    "start": "293580",
    "end": "300780"
  },
  {
    "text": "large effort around documentation and trying to revamp some of the documentation some of the feedbacks that",
    "start": "300780",
    "end": "306600"
  },
  {
    "text": "we heard in Detroit for folks you know we're working on that putting a big",
    "start": "306600",
    "end": "312060"
  },
  {
    "text": "effort in the team around documentation we actually have a big series of videos",
    "start": "312060",
    "end": "317300"
  },
  {
    "text": "that's going to launch you'll see some videos from both Richard and Sanjay",
    "start": "317300",
    "end": "322460"
  },
  {
    "text": "coming out and as soon as our observability piece launches we'll",
    "start": "322460",
    "end": "327600"
  },
  {
    "text": "launch those videos directly thereafter and those cover everything from intro to grpc talking about service mesh other",
    "start": "327600",
    "end": "335039"
  },
  {
    "text": "talks talking about observability so we've got a suite of videos that we",
    "start": "335039",
    "end": "340800"
  },
  {
    "text": "think you'll enjoy uh kind of the last real point I have",
    "start": "340800",
    "end": "347639"
  },
  {
    "text": "here is we really really like um you know all the help that all of you",
    "start": "347639",
    "end": "353699"
  },
  {
    "text": "give and uh wanted to thank everyone who you know does as little as submitting",
    "start": "353699",
    "end": "360300"
  },
  {
    "text": "issues you know if you see something wrong something that doesn't work how you expect it should work please open an",
    "start": "360300",
    "end": "366060"
  },
  {
    "text": "issue um we we really take those super seriously triage those daily we do a",
    "start": "366060",
    "end": "372840"
  },
  {
    "text": "weekly meeting with each of the language teams where we go through all of that um every week we're taking pull requests",
    "start": "372840",
    "end": "379860"
  },
  {
    "text": "from the community so that is something that we encourage everyone we love it",
    "start": "379860",
    "end": "385620"
  },
  {
    "text": "and we like having that that deep interaction with with with you and you",
    "start": "385620",
    "end": "391199"
  },
  {
    "text": "know helping you get the features in that that you want and then finally if you are interested in making a a deeper",
    "start": "391199",
    "end": "398100"
  },
  {
    "text": "commitment and a deeper engagement with the team we are looking for more",
    "start": "398100",
    "end": "403139"
  },
  {
    "text": "maintainers so if anybody's interested in that please see see me after the talk",
    "start": "403139",
    "end": "408300"
  },
  {
    "text": "and we can chat about that last thing real quick we got Sanjay in the front here",
    "start": "408300",
    "end": "414419"
  },
  {
    "text": "um he and costume they're going to do a talk on Friday at 11. um it's going to be a great talk so I",
    "start": "414419",
    "end": "420300"
  },
  {
    "text": "encourage all of you to come and help fill out that room um Auto scaling elastic kubernetes",
    "start": "420300",
    "end": "425940"
  },
  {
    "text": "infrastructure for stateful applications using proxylist grpc and istio and we'll",
    "start": "425940",
    "end": "431699"
  },
  {
    "text": "also have costan who's another colleague of ours from the istio team working on that so with that I'm going to hand it",
    "start": "431699",
    "end": "439440"
  },
  {
    "text": "over to Richard all right thank you Kevin all right on to the technical bit here so the",
    "start": "439440",
    "end": "446639"
  },
  {
    "text": "subtitle for this talk is getting the most out of grpc so the goal here is to",
    "start": "446639",
    "end": "452280"
  },
  {
    "text": "maybe teach you some things that you did not know about grpc even if you have what you think is a pretty good covering",
    "start": "452280",
    "end": "458759"
  },
  {
    "text": "of grpc knowledge already what that does mean though is that there is going to be some assumed knowledge there is going to",
    "start": "458759",
    "end": "465479"
  },
  {
    "text": "be a decent uh chunk of time at the end for questions so you don't feel like you",
    "start": "465479",
    "end": "471000"
  },
  {
    "text": "need to get up and leave right now if you don't have that basic knowledge there will be time to learn some more basic things too if you need that all",
    "start": "471000",
    "end": "477599"
  },
  {
    "text": "right so this is going to be full life cycle covering every aspect of the",
    "start": "477599",
    "end": "483479"
  },
  {
    "text": "process of running an RPC based system including API design developer velocity",
    "start": "483479",
    "end": "488580"
  },
  {
    "text": "and even operating the system in production and as a result we're going to be jumping around a little bit",
    "start": "488580",
    "end": "493860"
  },
  {
    "text": "between various topics uh so you know bear with me on that so first up uh",
    "start": "493860",
    "end": "499680"
  },
  {
    "text": "resource orientation and concurrency considerations then proto-c and produce plugins and then finally debugging",
    "start": "499680",
    "end": "506039"
  },
  {
    "text": "utilities all right so let's start out with something sort of philosophical as a",
    "start": "506039",
    "end": "512099"
  },
  {
    "text": "member of the grpc team I Google things related to grpc frequently it's literally part of my job uh and so",
    "start": "512099",
    "end": "518520"
  },
  {
    "text": "Google has figured out that I'm interested in grpc and it will insert grpc related things into my Google news",
    "start": "518520",
    "end": "524219"
  },
  {
    "text": "feed so I will get these clickbaity articles that have titles like grpc versus rest which is best fight to the",
    "start": "524219",
    "end": "530940"
  },
  {
    "text": "death and that sort of gets me to roll my eyes for several reasons so one I",
    "start": "530940",
    "end": "537300"
  },
  {
    "text": "don't think that these two technologies are completely mutually exclusive to each other and two I think that they're",
    "start": "537300",
    "end": "543120"
  },
  {
    "text": "actually sort of complementary so grpc can be restful",
    "start": "543120",
    "end": "549600"
  },
  {
    "text": "what do I mean by that so before I go into the details I want to bring up that uh Eric",
    "start": "549600",
    "end": "555839"
  },
  {
    "text": "Anderson's previous kubecon talk titled design decisions for communication systems uh covers like how grpc fits",
    "start": "555839",
    "end": "563519"
  },
  {
    "text": "into the broader communication system ecosystem in much more depth than I'm going to here I'm going to come at",
    "start": "563519",
    "end": "570180"
  },
  {
    "text": "things from a very particular angle so if you want to get more of that breadth just refer back to that previous grpc",
    "start": "570180",
    "end": "576000"
  },
  {
    "text": "kubecon talk by Eric Anderson um so grpc can be restful I said",
    "start": "576000",
    "end": "581880"
  },
  {
    "text": "previously what do I mean by that well first off what is RPC very simple it is",
    "start": "581880",
    "end": "586980"
  },
  {
    "text": "remote procedure call procedure being a an old style term for function so I have",
    "start": "586980",
    "end": "592680"
  },
  {
    "text": "a function here and instead of running it on the same machine as the caller I want to run it over here on you know",
    "start": "592680",
    "end": "599160"
  },
  {
    "text": "maybe a different machine okay that is basically the first thing that",
    "start": "599160",
    "end": "604560"
  },
  {
    "text": "folks thought to do after we came up with a reliable in order delivery mechanism like TCP",
    "start": "604560",
    "end": "611339"
  },
  {
    "text": "and then what do we mean by rest well nowadays rest is often used it's just sort of a shorthand for Json plus HTTP",
    "start": "611339",
    "end": "618440"
  },
  {
    "text": "but actually rest is a simple set of Concepts and then a short list of design",
    "start": "618440",
    "end": "624060"
  },
  {
    "text": "constraints for your apis the main concept with rest is obviously a",
    "start": "624060",
    "end": "629100"
  },
  {
    "text": "resource which is a bundle of State managed by the API and a short set of",
    "start": "629100",
    "end": "634620"
  },
  {
    "text": "operations that you use to mutate that state all right",
    "start": "634620",
    "end": "639860"
  },
  {
    "text": "so here is that list of design constraints for rest the interesting thing is that grpc either naturally",
    "start": "640080",
    "end": "647640"
  },
  {
    "text": "meets or allows you to build an API that meets almost all of these constraints the one area that we don't completely",
    "start": "647640",
    "end": "654000"
  },
  {
    "text": "meet is cache ability because rpcs are function calls they can mutate State and",
    "start": "654000",
    "end": "659940"
  },
  {
    "text": "so we can't assume that your rpcs are inimpotent meaning that if you apply",
    "start": "659940",
    "end": "665519"
  },
  {
    "text": "them multiple times it will result in the same state so under the hood we use the HTTP post operation which requires",
    "start": "665519",
    "end": "671399"
  },
  {
    "text": "that proxies not cast the result there is there is a proposal in the works to allow you to optionally Mark rpcs is it",
    "start": "671399",
    "end": "678779"
  },
  {
    "text": "impotent in which case we would use an HTTP get under the hood and you can cache those and once that happens we",
    "start": "678779",
    "end": "684060"
  },
  {
    "text": "will actually meet all of these design constraints for a resource-oriented restful API",
    "start": "684060",
    "end": "689399"
  },
  {
    "text": "so I think that resources are great they give you the ability to encapsulate tightly coupled State and ensure that",
    "start": "689399",
    "end": "696240"
  },
  {
    "text": "it's only updated via a sort set of conventional well-understood methods and",
    "start": "696240",
    "end": "702300"
  },
  {
    "text": "that is roughly speaking the value proposition of object orientation right so resources obviously are not a native",
    "start": "702300",
    "end": "709800"
  },
  {
    "text": "concept within grpc but they're sort of considered a best practice by not only grpc developers but much of its user",
    "start": "709800",
    "end": "717360"
  },
  {
    "text": "base so for example Google is one of the biggest users of grpc in protobuf and",
    "start": "717360",
    "end": "723300"
  },
  {
    "text": "they've published a fairly comprehensive open source grp style guide called application Improvement proposals or",
    "start": "723300",
    "end": "730019"
  },
  {
    "text": "aips for short so this API is representative of what",
    "start": "730019",
    "end": "736019"
  },
  {
    "text": "that style guide recommends so take a look within the AIP framework apis",
    "start": "736019",
    "end": "741839"
  },
  {
    "text": "should be resource oriented by default which hopefully comes through with this protobuf we Define a book resource which",
    "start": "741839",
    "end": "749579"
  },
  {
    "text": "has two Fields a name and an author and in addition to those two Fields there are also protobuf options which can be",
    "start": "749579",
    "end": "756779"
  },
  {
    "text": "used to add metadata to those fields and also add those options to messages",
    "start": "756779",
    "end": "762240"
  },
  {
    "text": "Services rpcs basically everything within the abstract syntax tree for a",
    "start": "762240",
    "end": "767940"
  },
  {
    "text": "protobuf so the first option here provides a unique identity to the book",
    "start": "767940",
    "end": "773579"
  },
  {
    "text": "resource right so the book is known as library.acme.com book and the book",
    "start": "773579",
    "end": "779160"
  },
  {
    "text": "resource also has a reference to another resource an author so we use that option",
    "start": "779160",
    "end": "785600"
  },
  {
    "text": "google.api.resource reference to indicate that the value of that field should be a reference to a message of",
    "start": "785600",
    "end": "793320"
  },
  {
    "text": "type author which is based on in the author method you have another you know google.api resource field there",
    "start": "793320",
    "end": "802500"
  },
  {
    "text": "um so the style guide says that the service for a particular uh resource should Define five methods create get",
    "start": "802500",
    "end": "809579"
  },
  {
    "text": "update delete and list and those are roughly equivalent to the most common HTTP methods",
    "start": "809579",
    "end": "815940"
  },
  {
    "text": "so that was sort of a made-up example right it's just a book two Fields so what about battle tested apis",
    "start": "815940",
    "end": "822240"
  },
  {
    "text": "this is a subset of the container storage interface that kublets use to interact with the CSI plugins that make",
    "start": "822240",
    "end": "828540"
  },
  {
    "text": "your volume mounts actually appear within your containers so the first four methods here should look very similar to",
    "start": "828540",
    "end": "835440"
  },
  {
    "text": "what you just saw in the previous slide so while the API is not 100 following the AIP style guide it's the same sort",
    "start": "835440",
    "end": "842579"
  },
  {
    "text": "of concept right you've got create get delete and list methods as we saw but the three methods on the bottom are",
    "start": "842579",
    "end": "849779"
  },
  {
    "text": "a little bit different right what do those do well you have controller",
    "start": "849779",
    "end": "855060"
  },
  {
    "text": "published volume as one of the steps in mounting a volume into your workload controller unpublished volume as one of",
    "start": "855060",
    "end": "860459"
  },
  {
    "text": "the steps in unmounting your volume after a workload has finished and then you've got controller expand",
    "start": "860459",
    "end": "866100"
  },
  {
    "text": "volume as one of the steps in making your volume bigger in other words these are all limited forms of State mutation",
    "start": "866100",
    "end": "873420"
  },
  {
    "text": "that replace the update method conspicuously absent here right so that",
    "start": "873420",
    "end": "878880"
  },
  {
    "text": "brings us to the next interesting thing about resource orientation and resource orientation as it relates to grpc",
    "start": "878880",
    "end": "885800"
  },
  {
    "text": "sometimes it's actually better not to have pure resource orientation so let's",
    "start": "885800",
    "end": "891240"
  },
  {
    "text": "make the comparison to go code running locally which hopefully is the language that most people are familiar with at kubecon",
    "start": "891240",
    "end": "897120"
  },
  {
    "text": "all right offering an update method like in our original example is a bit like",
    "start": "897120",
    "end": "902339"
  },
  {
    "text": "communicating directly using the fields of a struct yeah you want to update the state of the volume okay then you call",
    "start": "902339",
    "end": "908279"
  },
  {
    "text": "the update method with the state set to whatever state you want it to be in basic restful API right so here we're",
    "start": "908279",
    "end": "916740"
  },
  {
    "text": "attempting to take a volume directly from the created state to the published State and you have a handy dandy little",
    "start": "916740",
    "end": "922560"
  },
  {
    "text": "State flow diagram here um but that doesn't work within the CSI",
    "start": "922560",
    "end": "928440"
  },
  {
    "text": "right you cannot go directly from the created state to the published State you first have to take it through this node",
    "start": "928440",
    "end": "934920"
  },
  {
    "text": "ready state so what you're attempting to do here with this function call is wrong",
    "start": "934920",
    "end": "940139"
  },
  {
    "text": "it's disallowed by the API and if you're building a rest style API then you're going to have to deny that somehow send",
    "start": "940139",
    "end": "946440"
  },
  {
    "text": "back an error of some sort but it would be better if you could just",
    "start": "946440",
    "end": "951720"
  },
  {
    "text": "disallow that misuse of your API entirely in the first place right",
    "start": "951720",
    "end": "956760"
  },
  {
    "text": "so the real container storage interface API with its published and unpublished methods is like a golang interface that",
    "start": "956760",
    "end": "963660"
  },
  {
    "text": "hides the implementation details and ensures that invalid State transitions cannot even be expressed by the API so",
    "start": "963660",
    "end": "971760"
  },
  {
    "text": "this is an example of encapsulation at your networked API boundaries now you",
    "start": "971760",
    "end": "976800"
  },
  {
    "text": "might say that this is just a ux concern you know you know it's just making sure that people have very nice little",
    "start": "976800",
    "end": "983100"
  },
  {
    "text": "methods instead of getting errors back that they might have to handle during the development process but now let's take a look at a more",
    "start": "983100",
    "end": "990180"
  },
  {
    "text": "serious example where you would want to break out of resource orientation or pure resource orientation",
    "start": "990180",
    "end": "996120"
  },
  {
    "text": "all right so here we have a resource oriented API for a bank account each account has an ID and a current value in",
    "start": "996120",
    "end": "1003199"
  },
  {
    "text": "Euros we have the standard set of methods including an update method so this is a pure resource oriented API",
    "start": "1003199",
    "end": "1009860"
  },
  {
    "text": "and in order to implement withdrawal you first call get account to get the current value of the account you",
    "start": "1009860",
    "end": "1016279"
  },
  {
    "text": "decrement the value by the amount that you want to withdraw and then you invoke the update account RPC with the new",
    "start": "1016279",
    "end": "1022579"
  },
  {
    "text": "smaller value very simple straightforward straight line code but there is a problem with this right",
    "start": "1022579",
    "end": "1029298"
  },
  {
    "text": "what happens if you have multiple clients performing withdrawals at the same time this is a consideration that",
    "start": "1029299",
    "end": "1035839"
  },
  {
    "text": "you always have to take into account whenever you have a networked API unlike with straight up function calls",
    "start": "1035839",
    "end": "1042319"
  },
  {
    "text": "so to draw it out suppose you start out with 10 euros in your account then client a and client B both start trying",
    "start": "1042319",
    "end": "1049040"
  },
  {
    "text": "to withdraw money client a wants to withdraw two euros and client B wants to withdraw three euros",
    "start": "1049040",
    "end": "1055280"
  },
  {
    "text": "okay so first client a and client B both get the current value of 10 euros and",
    "start": "1055280",
    "end": "1060320"
  },
  {
    "text": "they have that locally client B just happens to finish first maybe it's slightly faster maybe the",
    "start": "1060320",
    "end": "1066320"
  },
  {
    "text": "operating system uh swapped out client A's thread contact switched and client B",
    "start": "1066320",
    "end": "1071419"
  },
  {
    "text": "just happened to get it faster so now the value of the account is at seven euros but client a never got the message that",
    "start": "1071419",
    "end": "1079039"
  },
  {
    "text": "the account value is now seven euros and so it overwrites the value to 8 Euros uh",
    "start": "1079039",
    "end": "1085700"
  },
  {
    "text": "and so now you just have eight Euros in your account and you made money for free magically",
    "start": "1085700",
    "end": "1091880"
  },
  {
    "text": "awesome yeah free money grpc coin so uh",
    "start": "1091880",
    "end": "1098299"
  },
  {
    "text": "we have that in our examples it's a fun joke uh so the issue here is fundamentally about atomicity right we",
    "start": "1098299",
    "end": "1104960"
  },
  {
    "text": "didn't atomically get decrement and update the account value so we opened ourselves up to standard race conditions",
    "start": "1104960",
    "end": "1112100"
  },
  {
    "text": "this is standard programming stuff that you could have on a local machine as well all right so how do we fix this problem",
    "start": "1112100",
    "end": "1119059"
  },
  {
    "text": "well the rest World obviously has dealt with this so there are various different lessons that we could draw from the rest",
    "start": "1119059",
    "end": "1124820"
  },
  {
    "text": "world let's take a look at those as adapted to grpc you could use e-tags in a read modify",
    "start": "1124820",
    "end": "1131179"
  },
  {
    "text": "right Loop so e-tags are a unique identifier associated with each revision",
    "start": "1131179",
    "end": "1136400"
  },
  {
    "text": "of the state that you're updating each time you do a get operation you receive an e-tag associated with that revision",
    "start": "1136400",
    "end": "1142400"
  },
  {
    "text": "uniquely identifies that revision and then when you update the resource the etac changes so if you want to decrement",
    "start": "1142400",
    "end": "1149539"
  },
  {
    "text": "the account value you populate your update request with the e-tag and then the server implementation will reject",
    "start": "1149539",
    "end": "1156500"
  },
  {
    "text": "the update if the etag has changed so the client continues in a loop doing a",
    "start": "1156500",
    "end": "1162020"
  },
  {
    "text": "get and attempting to update based on that value and this is basically the read modify",
    "start": "1162020",
    "end": "1168140"
  },
  {
    "text": "right Loop of Lock Free programming if you're familiar with that Circle um so look at this code you've got the",
    "start": "1168140",
    "end": "1174080"
  },
  {
    "text": "green boxes there to indicate what's changed it's a little bit more complicated right maybe that's not a big",
    "start": "1174080",
    "end": "1179600"
  },
  {
    "text": "deal but unfortunately this method of concurrency control has some issues if",
    "start": "1179600",
    "end": "1185600"
  },
  {
    "text": "you have some fast clients and some slow clients it is possible for the faster clients to almost completely out compete",
    "start": "1185600",
    "end": "1192260"
  },
  {
    "text": "the slow clients right so every time the slow client gets the point where it sends its update RPC that e-tag has",
    "start": "1192260",
    "end": "1199460"
  },
  {
    "text": "already changed because the faster clients have out competed it and so it continues in its read modify right Loop",
    "start": "1199460",
    "end": "1205220"
  },
  {
    "text": "repeatedly perhaps forever we have seen this exact problem within the grpc",
    "start": "1205220",
    "end": "1211760"
  },
  {
    "text": "implementation with lock free programming and we've seen it at Google with some distributed systems it is a",
    "start": "1211760",
    "end": "1216919"
  },
  {
    "text": "persistent issue with e-tags all right so when atomics have failed",
    "start": "1216919",
    "end": "1222620"
  },
  {
    "text": "you in local programming often times you fall back to the tried and true method of good old-fashioned mutexes so let's",
    "start": "1222620",
    "end": "1229820"
  },
  {
    "text": "see what that looks like applied to grpc and resource oriented programming so we",
    "start": "1229820",
    "end": "1236059"
  },
  {
    "text": "add some box we have a lock account and an unlock account method for the service but critically the lock account method",
    "start": "1236059",
    "end": "1243440"
  },
  {
    "text": "blocks until the lock has been acquired just like when you do systems programming right it's important to note",
    "start": "1243440",
    "end": "1250280"
  },
  {
    "text": "here that we have now strictly speaking stepped outside the boundaries of resource orientation because that thing",
    "start": "1250280",
    "end": "1257299"
  },
  {
    "text": "returns not immediately but once the lock has been acquired which is a very important property of the method",
    "start": "1257299",
    "end": "1264380"
  },
  {
    "text": "all right so um in the implementation of the withdraw function we first locked the account",
    "start": "1264380",
    "end": "1269600"
  },
  {
    "text": "before doing anything else and then we defer um beef to unlock it and then the",
    "start": "1269600",
    "end": "1276020"
  },
  {
    "text": "account will be unlocked after we've decremented so you know basic mutex holding so we have solved with this the",
    "start": "1276020",
    "end": "1282740"
  },
  {
    "text": "starvation problem that we just described for e-tags once you've called lock account you are guaranteed to get",
    "start": "1282740",
    "end": "1289520"
  },
  {
    "text": "access to the account after all the clients ahead of you have finished but distributed locking has some other",
    "start": "1289520",
    "end": "1296960"
  },
  {
    "text": "problems besides its complexity what if the client crashes between what it calls",
    "start": "1296960",
    "end": "1302240"
  },
  {
    "text": "lock account and when it calls unlock account the whole system will deadlock because that lock is now acquired by a",
    "start": "1302240",
    "end": "1309020"
  },
  {
    "text": "client that no longer exists so you have to have some mechanism to manage that you have to add ttls or",
    "start": "1309020",
    "end": "1316760"
  },
  {
    "text": "maybe you use transactions it gets really complex um so there are several other",
    "start": "1316760",
    "end": "1323059"
  },
  {
    "text": "complicated ways to solve this within a pure resource oriented or a mostly resource oriented methodology but grpc's",
    "start": "1323059",
    "end": "1331400"
  },
  {
    "text": "native way of addressing this problem is actually very very simple you add a withdraw method right it is",
    "start": "1331400",
    "end": "1338960"
  },
  {
    "text": "naturally Atomic and it literally takes less code than the naive resource oriented version in the first slide here",
    "start": "1338960",
    "end": "1345559"
  },
  {
    "text": "so to draw a lesson from all of this you are using our PC for a reason pure",
    "start": "1345559",
    "end": "1352100"
  },
  {
    "text": "resource orientation is nice in theory but there are some legitimate real world concerns that you kind of have to break",
    "start": "1352100",
    "end": "1358100"
  },
  {
    "text": "away from resources to solve effectively and grpc gives you the tools to do that",
    "start": "1358100",
    "end": "1363740"
  },
  {
    "text": "easily right so moving on from resource orientation and concurrency just wipe",
    "start": "1363740",
    "end": "1370100"
  },
  {
    "text": "that all away different topic now we are going to talk about proto-c and proto-c plugins if you've run through any of the",
    "start": "1370100",
    "end": "1376460"
  },
  {
    "text": "hello world guides for grpc you have seen proto-c before it's what compiles your protophiles into serialization",
    "start": "1376460",
    "end": "1382840"
  },
  {
    "text": "deserialization client and server code but before we dig too deeply into this topic since this section is almost",
    "start": "1382840",
    "end": "1388760"
  },
  {
    "text": "strictly about protobuf and the protobuf ecosystem I want to talk about the relationship between protobuf and grpc and I touched",
    "start": "1388760",
    "end": "1396260"
  },
  {
    "text": "on this earlier when we were doing crowd work asking about who's using what um so if you're a beginner with grpc you",
    "start": "1396260",
    "end": "1403220"
  },
  {
    "text": "may not realize that there is any separation between grpc and protobuf you might not realize that these Technologies are separate at all you",
    "start": "1403220",
    "end": "1410179"
  },
  {
    "text": "just think they're a package deal but actually grpc can use alternative serialization and deserialization",
    "start": "1410179",
    "end": "1416240"
  },
  {
    "text": "mechanisms from protobuf so you could use uh cap in proto you could use flat",
    "start": "1416240",
    "end": "1423080"
  },
  {
    "text": "buffers you could even use Json for serialization um and protobuf similarly can swap out",
    "start": "1423080",
    "end": "1429740"
  },
  {
    "text": "the RPC mechanism for some other RPC mechanism so um for example protobuf originally was",
    "start": "1429740",
    "end": "1435380"
  },
  {
    "text": "designed for uh Google's internal RPC system stubby and it continues to do that it can use either stubby or grpc",
    "start": "1435380",
    "end": "1442460"
  },
  {
    "text": "right so neither is fully dependent on the other it's only the generated code within grpc that incurs a dependency on",
    "start": "1442460",
    "end": "1449120"
  },
  {
    "text": "protobuf at all right with that said 99 of grpc usage at least 99 of grpc usage",
    "start": "1449120",
    "end": "1457760"
  },
  {
    "text": "is with protobuf so um I'm talking about protobuf here but it really also is good for grpc usage too",
    "start": "1457760",
    "end": "1465200"
  },
  {
    "text": "all right uh so back to protoc Proto C's name takes inspiration from binaries like old school Cc or yaksi the yet",
    "start": "1465200",
    "end": "1472400"
  },
  {
    "text": "another compiler compiler just add C to the name of the thing that you're compiling so protein takes in protocol",
    "start": "1472400",
    "end": "1478159"
  },
  {
    "text": "buffers and it generates something it's actually not too particular about what it generates by",
    "start": "1478159",
    "end": "1484700"
  },
  {
    "text": "default it will generate that serialization and deserialization code that I mentioned um but it actually offers a plug-in",
    "start": "1484700",
    "end": "1491840"
  },
  {
    "text": "system that will allow you to generate absolutely anything that you want from the Proto documentation input validation",
    "start": "1491840",
    "end": "1498140"
  },
  {
    "text": "code database schemas uml diagrams grpc's client and server generated code",
    "start": "1498140",
    "end": "1504320"
  },
  {
    "text": "is actually created through the same plugin system okay so the interface works like this",
    "start": "1504320",
    "end": "1509900"
  },
  {
    "text": "your plugin is a standalone binary that gets started up and receives a serialized code generator request",
    "start": "1509900",
    "end": "1515900"
  },
  {
    "text": "protobuf message on standard n which is basically a protobuf based description of your dot Proto file and it outputs a",
    "start": "1515900",
    "end": "1523039"
  },
  {
    "text": "code generator response on standard out which is basically a collection of files of arbitrary content",
    "start": "1523039",
    "end": "1529580"
  },
  {
    "text": "the plug-in binary must be named protoxgen something and it must be on",
    "start": "1529580",
    "end": "1534740"
  },
  {
    "text": "the path then when you give proto-c a flag for example with protalk genfu here we need",
    "start": "1534740",
    "end": "1541340"
  },
  {
    "text": "to pass dash dash Foo out so protalk then would look for a binary name for attack genfu like this here and based on",
    "start": "1541340",
    "end": "1548179"
  },
  {
    "text": "the name that flag and the output will end up on the file system just like in that picture",
    "start": "1548179",
    "end": "1553640"
  },
  {
    "text": "um one nice consequence of the fact that the plugin is a separate binary from protoc is that you can write your",
    "start": "1553640",
    "end": "1558980"
  },
  {
    "text": "plugins in whatever language you you want it does not have to be in C plus which is what proto-c happens to be",
    "start": "1558980",
    "end": "1564320"
  },
  {
    "text": "written in the plug-in mechanism is used whenever grpc support is extended to a",
    "start": "1564320",
    "end": "1569600"
  },
  {
    "text": "new language but it's also been used to do a lot of other really useful things so let's just go through a couple of",
    "start": "1569600",
    "end": "1575360"
  },
  {
    "text": "those first one is protalk genvalidate just like its name implies protalk to",
    "start": "1575360",
    "end": "1581000"
  },
  {
    "text": "invalidate is used to validate a protobuf request message according to a set of constraints described entirely by",
    "start": "1581000",
    "end": "1587539"
  },
  {
    "text": "options built into the Proto the plugin generates go code performing the described validations and provides you",
    "start": "1587539",
    "end": "1592700"
  },
  {
    "text": "with a validate method returning an error if the input Proto doesn't meet those requirements so you can impose",
    "start": "1592700",
    "end": "1599059"
  },
  {
    "text": "numerical constraints you can add in regexes and you can set max lengths it's super useful to call this method in the",
    "start": "1599059",
    "end": "1604760"
  },
  {
    "text": "first few lines of your server Handler so a lesson to draw from this is that protobus are not just data structures",
    "start": "1604760",
    "end": "1611720"
  },
  {
    "text": "they are also metadata describing them in a very similar way to golang's field",
    "start": "1611720",
    "end": "1617120"
  },
  {
    "text": "tax but I think most people would agree that protobuf messages being messages which",
    "start": "1617120",
    "end": "1624320"
  },
  {
    "text": "are hierarchical they can be recursive are better than stuffing everything into a single string which might include",
    "start": "1624320",
    "end": "1630020"
  },
  {
    "text": "multi-line Json put onto a single line um all right so next example grpc Gateway",
    "start": "1630020",
    "end": "1637940"
  },
  {
    "text": "which probably I think some people have heard of is a project that provides you with a reverse proxy translating from",
    "start": "1637940",
    "end": "1643820"
  },
  {
    "text": "HTTP and Json to grpc and protoboff it does this using a proto-c plugin you",
    "start": "1643820",
    "end": "1649580"
  },
  {
    "text": "feed in a Proto describing your API surface with extra options added describe things like what URI will",
    "start": "1649580",
    "end": "1655580"
  },
  {
    "text": "correspond to what our PC method and what HTTP method will be used for what our PC method you then compile that into",
    "start": "1655580",
    "end": "1661340"
  },
  {
    "text": "a reverse proxy that you generally put on the edge of your system but that's just the tip of the iceberg for plugins I think this plug-in system",
    "start": "1661340",
    "end": "1668059"
  },
  {
    "text": "is under used relative to how useful it is I'm hoping that by showcasing this in",
    "start": "1668059",
    "end": "1673220"
  },
  {
    "text": "this talk selfishly I will get to see more cool projects like this pop up in my acronyms feed that all of you have",
    "start": "1673220",
    "end": "1679520"
  },
  {
    "text": "built after uh taking it for a spin so to give you a little inspiration let me give you a few example ideas",
    "start": "1679520",
    "end": "1687140"
  },
  {
    "text": "all right let's suppose that you were tasked with enforcing data locality within your system certain pieces of",
    "start": "1687140",
    "end": "1693200"
  },
  {
    "text": "data but not all of your data are only allowed to be in certain countries and that data is not allowed to leave those",
    "start": "1693200",
    "end": "1698600"
  },
  {
    "text": "countries you can express that sort of constraint in a protobuf option so returning to our account example from",
    "start": "1698600",
    "end": "1705140"
  },
  {
    "text": "previously you might want to add an option like this option com.food.locality where your food.com",
    "start": "1705140",
    "end": "1712720"
  },
  {
    "text": "we're only going to let this account data live in the Netherlands or Belgium okay maybe I should have added",
    "start": "1712720",
    "end": "1718100"
  },
  {
    "text": "Luxembourg uh so how do we make this protobuf option actually compile",
    "start": "1718100",
    "end": "1723140"
  },
  {
    "text": "so in order to turn a message you write yourself into an option you can use a mechanism called extension which allows",
    "start": "1723140",
    "end": "1729799"
  },
  {
    "text": "another package to Define fields in an existing message sort of like",
    "start": "1729799",
    "end": "1735140"
  },
  {
    "text": "inheritance maybe sort of like struct composition and go in this case we extend the message options message which",
    "start": "1735140",
    "end": "1742100"
  },
  {
    "text": "is part of the message descriptor message which defines what happens when you type the word message into your",
    "start": "1742100",
    "end": "1748460"
  },
  {
    "text": "protobuf so yeah in case you weren't aware protobufs abstract syntax tree is a",
    "start": "1748460",
    "end": "1754460"
  },
  {
    "text": "protobuf there's this interesting bootstrapping method that goes on there all right so the last step which I'm not",
    "start": "1754460",
    "end": "1760580"
  },
  {
    "text": "going to cover here in this talk just due to time constraints is the actual code generation again you can write your",
    "start": "1760580",
    "end": "1766100"
  },
  {
    "text": "code generator in absolutely whatever language you like and the only dependency that that binary will need to take is on the protobuf runtime you'll",
    "start": "1766100",
    "end": "1773840"
  },
  {
    "text": "get a protop on standard n and then you put different protobufs back on standard out",
    "start": "1773840",
    "end": "1779059"
  },
  {
    "text": "all right one more inspirational example so let's suppose that you have sensitive data Maybe pii personally identifying",
    "start": "1779059",
    "end": "1785120"
  },
  {
    "text": "information that you do not want to show up in your server logs because if that information did show up in your server",
    "start": "1785120",
    "end": "1790340"
  },
  {
    "text": "logs there are now legal implications to having your engineers debug their own applications which is not a great",
    "start": "1790340",
    "end": "1796340"
  },
  {
    "text": "situation it makes it very difficult to debug anything when that happens so if you had the right metadata about",
    "start": "1796340",
    "end": "1803000"
  },
  {
    "text": "which fields are sensitive then you could just never log them and the problem wouldn't arise",
    "start": "1803000",
    "end": "1808340"
  },
  {
    "text": "so we add a com.food.log sensitivity enumeration where the default is not",
    "start": "1808340",
    "end": "1813500"
  },
  {
    "text": "sensitive maybe you could choose the opposite defaults you know maybe things are sensitive by default",
    "start": "1813500",
    "end": "1819200"
  },
  {
    "text": "um if that's the case you know that's totally up to you so we add a field extension so that you can add these options to individual Fields you could",
    "start": "1819200",
    "end": "1825380"
  },
  {
    "text": "also add them to the message if you wanted to have that propagate down to all Fields so this guy's the limit here",
    "start": "1825380",
    "end": "1830840"
  },
  {
    "text": "it's just up to your imagination all right so I'm counting on all of you to go out there and write some cool plugins and put them on the Internet so",
    "start": "1830840",
    "end": "1837440"
  },
  {
    "text": "that I can see them please all right so our last topic let's move on to operations and debugging um grpc",
    "start": "1837440",
    "end": "1844220"
  },
  {
    "text": "is a fairly well-known Health checking protocol that looks roughly like this it allows you to have your servers declare",
    "start": "1844220",
    "end": "1849919"
  },
  {
    "text": "the Readiness of either the whole server or individual RPC services this is more robust than a general TCP health check",
    "start": "1849919",
    "end": "1856460"
  },
  {
    "text": "in the past people using kubernetes often resorted to exact probes with a local command to make use of this",
    "start": "1856460",
    "end": "1862820"
  },
  {
    "text": "protocol but kubernetes 124 released into beta a built-in grpc liveness probe",
    "start": "1862820",
    "end": "1868580"
  },
  {
    "text": "that uses the protocol that you saw on the last slide so now you can configure grpc native Health checking with just a",
    "start": "1868580",
    "end": "1874580"
  },
  {
    "text": "small addition to your pod spec and I would recommend that you use this with absolutely no second thoughts just put",
    "start": "1874580",
    "end": "1879620"
  },
  {
    "text": "this in everything all right so uh grpc Health checking is a natural segue into grpc debug a CLI",
    "start": "1879620",
    "end": "1887299"
  },
  {
    "text": "tool for inspecting grpc servers and clients at various levels of detail the first and simplest ability is it",
    "start": "1887299",
    "end": "1893659"
  },
  {
    "text": "provides a CLI interface for checking the health status of grpc based on that same protocol you know kubernetes",
    "start": "1893659",
    "end": "1899419"
  },
  {
    "text": "liveness probe should give you all the health information you need when your workloads are running in kubernetes but as we know not all workloads running",
    "start": "1899419",
    "end": "1905240"
  },
  {
    "text": "kubernetes so if you're running on bare VMS or on your local machine is maybe the case for processes like container D",
    "start": "1905240",
    "end": "1911779"
  },
  {
    "text": "then you can go ahead and use this for interactive debugging or even for automated Health checking uh but you",
    "start": "1911779",
    "end": "1918320"
  },
  {
    "text": "obviously debug goes much deeper than just this health check protocol um grpc also defines a protocol called",
    "start": "1918320",
    "end": "1925039"
  },
  {
    "text": "Channel Z that Services details about load balancing State socket State and stream State that's the sort of thing",
    "start": "1925039",
    "end": "1930500"
  },
  {
    "text": "that you'd want to break out when experiencing intermittent errors in your system enable the channel Z server and",
    "start": "1930500",
    "end": "1936320"
  },
  {
    "text": "use grpc debug to inspect the state of your client and server interactively if there's an issue with a flapping network",
    "start": "1936320",
    "end": "1942559"
  },
  {
    "text": "connection or anything like that it will become immediately apparent and the instrumentation goes all the way down to",
    "start": "1942559",
    "end": "1948020"
  },
  {
    "text": "the socket levels you can debug even the most low level of issues uh finally a ton of effort has gone into",
    "start": "1948020",
    "end": "1954320"
  },
  {
    "text": "supporting the XDS protocol for service mesh use cases over the past few years that was the topic of the previous grpc",
    "start": "1954320",
    "end": "1960679"
  },
  {
    "text": "maintainer talk if you're an Envoy user you're probably used to debugging sidecar proxy issues by getting a config",
    "start": "1960679",
    "end": "1966140"
  },
  {
    "text": "dump by exacting into the sidecar container and curling the config dump endpoint which will give you a gigantic",
    "start": "1966140",
    "end": "1972380"
  },
  {
    "text": "unreadable Json blob containing all of envoy's configuration you should probably read up on the XDS protocol if",
    "start": "1972380",
    "end": "1977720"
  },
  {
    "text": "it's unreadable to you it's pretty impenetrable but grpc debug also gives",
    "start": "1977720",
    "end": "1982760"
  },
  {
    "text": "you that ability service mesh introduces some really deep abstractions that can seem magical and impenetrable if you're",
    "start": "1982760",
    "end": "1990500"
  },
  {
    "text": "not familiar with them so having this ability does give you the the option to debug your service meshes if things",
    "start": "1990500",
    "end": "1995960"
  },
  {
    "text": "aren't working properly and that's it that was an overview of a few of the most helpful tips and tricks",
    "start": "1995960",
    "end": "2002080"
  },
  {
    "text": "for effectively using grpc there is a ton more depth here if you're willing to do some exploration on your own I",
    "start": "2002080",
    "end": "2007539"
  },
  {
    "text": "encourage you to check out more Community projects at the awesome grpc repo we're also actively seeking feedback to the community you can",
    "start": "2007539",
    "end": "2013539"
  },
  {
    "text": "schedule a video call with a team member to tell us what you like tell us what's missing or just to rant at us and you",
    "start": "2013539",
    "end": "2019899"
  },
  {
    "text": "can schedule that meeting at grpc.io meet and of course join the mailing list to keep up to date with the community",
    "start": "2019899",
    "end": "2025360"
  },
  {
    "text": "and with that we I think we'll move on to one minute of questions that was a little bit longer than I thought it",
    "start": "2025360",
    "end": "2030820"
  },
  {
    "text": "would be awesome",
    "start": "2030820",
    "end": "2035100"
  },
  {
    "text": "[Applause] and I did quickly want to remind folks",
    "start": "2036120",
    "end": "2042159"
  },
  {
    "text": "on Friday at 11 Sanjay's got a a talk and hopefully we'll see you there as well any questions",
    "start": "2042159",
    "end": "2049798"
  },
  {
    "text": "requests are good as well thank you for the presentation",
    "start": "2058560",
    "end": "2065040"
  },
  {
    "text": "from France um we have a little trouble with the",
    "start": "2065040",
    "end": "2070898"
  },
  {
    "text": "grpc Gateway because our developer loves",
    "start": "2070899",
    "end": "2076419"
  },
  {
    "text": "grpc so we have great micro Services running jrpc Etc it's great but for the",
    "start": "2076419",
    "end": "2084520"
  },
  {
    "text": "platform engineer we have to struggle with two API Gateway",
    "start": "2084520",
    "end": "2089800"
  },
  {
    "text": "the first one is the infrastructure with rate limiting filtering Network Etc right but we need to have another",
    "start": "2089800",
    "end": "2096700"
  },
  {
    "text": "homemade API Gateway yeah that implement the grpc",
    "start": "2096700",
    "end": "2101880"
  },
  {
    "text": "Gateway so what do you recommend until the",
    "start": "2101880",
    "end": "2108119"
  },
  {
    "text": "API Gateway Solutions integrate natively the grpc Gateway thank you very much",
    "start": "2108119",
    "end": "2114040"
  },
  {
    "text": "yeah um so I wonder what the problem is is it just the complexity of having the two",
    "start": "2114040",
    "end": "2119740"
  },
  {
    "text": "different API gateways or is the issue that it's difficult to configure each of those API gateways individually",
    "start": "2119740",
    "end": "2126900"
  },
  {
    "text": "yes the the main problem that the grpc homemade API Gateway is more focused to",
    "start": "2128380",
    "end": "2135640"
  },
  {
    "text": "how to just get the rest https on right",
    "start": "2135640",
    "end": "2141940"
  },
  {
    "text": "to transform to grpc to the microservices so it's very",
    "start": "2141940",
    "end": "2147660"
  },
  {
    "text": "developer focused right so I think I think you might have been in the Gateway",
    "start": "2147660",
    "end": "2154300"
  },
  {
    "text": "API talk yesterday and asked about yes okay so um uh something that I was considering",
    "start": "2154300",
    "end": "2159400"
  },
  {
    "text": "putting into this talk but you know time considerations uh is grp Route so uh grpc is going to become a first class",
    "start": "2159400",
    "end": "2166359"
  },
  {
    "text": "citizen within the Gateway API which means you can route natively using RPC methods rather than looking into the",
    "start": "2166359",
    "end": "2172300"
  },
  {
    "text": "internals of uh how grpc maps to http um that is limited to grpc and protobuf",
    "start": "2172300",
    "end": "2178960"
  },
  {
    "text": "at the moment which I said is 99 of the cases that is considering East-West Traffic Service to service but there's",
    "start": "2178960",
    "end": "2185619"
  },
  {
    "text": "also this Ingress case where you're probably currently using some other protocol like grpc web or like rest",
    "start": "2185619",
    "end": "2192720"
  },
  {
    "text": "and so in the second wave for grp Route because it takes a long time to get this",
    "start": "2192720",
    "end": "2197920"
  },
  {
    "text": "through the process we have been considering adding both of those things transcoding from grpc web plus protobuf",
    "start": "2197920",
    "end": "2203619"
  },
  {
    "text": "and also from uh restplus uh you know Json plus HTTP togrpc so I absolutely",
    "start": "2203619",
    "end": "2211060"
  },
  {
    "text": "think that's a great idea then you could just use the Gateway API for all of that thank you great thanks so I want to",
    "start": "2211060",
    "end": "2217540"
  },
  {
    "text": "thank everyone for coming and uh hopefully you'll continue to enjoy uh grpc day-to-day and uh Richard Sandra",
    "start": "2217540",
    "end": "2225640"
  },
  {
    "text": "and I will stick around out in the hall so if you have additional questions or want to chat with us about features",
    "start": "2225640",
    "end": "2231520"
  },
  {
    "text": "please join us out there thanks foreign [Applause]",
    "start": "2231520",
    "end": "2236699"
  }
]