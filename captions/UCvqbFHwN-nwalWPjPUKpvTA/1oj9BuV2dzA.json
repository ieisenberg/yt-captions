[
  {
    "text": "good afternoon everyone Welcome to our talk my name is sahity",
    "start": "2220",
    "end": "7259"
  },
  {
    "text": "ailu here is my colleague Arun Krishna Kumar both of us are Engineers from VMware today we are going",
    "start": "7259",
    "end": "15660"
  },
  {
    "text": "yeah today we are going to share our experience um on building cluster API",
    "start": "15660",
    "end": "21240"
  },
  {
    "text": "infrastructure provider for a multi-tenant cloud platform we will also be talking about few of the",
    "start": "21240",
    "end": "28320"
  },
  {
    "text": "challenges that we have faced along the way Lessons Learned and discoveries made around few of the",
    "start": "28320",
    "end": "35340"
  },
  {
    "text": "problems that we have identified that one could see in their environments and also",
    "start": "35340",
    "end": "41700"
  },
  {
    "text": "um era design patterns around cluster API usage in multi-tenant Cloud platform lastly we'll be covering on how we have",
    "start": "41700",
    "end": "50219"
  },
  {
    "text": "actually built kubernetes as a service layer with the underlying technology of cluster API with that let's get started",
    "start": "50219",
    "end": "58020"
  },
  {
    "text": "um so agenda for us for the first half of the talk I will be covering on cluster",
    "start": "58020",
    "end": "63660"
  },
  {
    "text": "API internals and will also be um giving you some resource resources on",
    "start": "63660",
    "end": "70320"
  },
  {
    "text": "how to get started with the implementation for the second half Arun we'll be covering on design patterns",
    "start": "70320",
    "end": "75600"
  },
  {
    "text": "around cluster API usage in the context of multi-tenant cloud environment and lastly we'll be covering on kubernetes",
    "start": "75600",
    "end": "81659"
  },
  {
    "text": "as a service layer on multi-tenon cloud okay before getting into the details of cluster API",
    "start": "81659",
    "end": "88080"
  },
  {
    "text": "I would like all of us to have a common understanding on what multi-tenant cloud is",
    "start": "88080",
    "end": "94680"
  },
  {
    "text": "so Cloud basically delivers infrastructure as a service to its tenants in terms of compute storage",
    "start": "94680",
    "end": "101340"
  },
  {
    "text": "networking while providing strict isolation to its tenants and also the security so then",
    "start": "101340",
    "end": "108720"
  },
  {
    "text": "who are the tenants here tenants could be an end individual user but in this",
    "start": "108720",
    "end": "114180"
  },
  {
    "text": "particular case in our Cloud platform This multi-tenant Cloud platform which is VMware Cloud director uh that's our",
    "start": "114180",
    "end": "121259"
  },
  {
    "text": "product's name so the tenant is an organization it's an Enterprise level company with group of users and there",
    "start": "121259",
    "end": "128520"
  },
  {
    "text": "can exist multiple organizations within this Cloud platform and these users can",
    "start": "128520",
    "end": "134220"
  },
  {
    "text": "request for kubernetes clusters and this is the solution that we have built at Large",
    "start": "134220",
    "end": "140700"
  },
  {
    "text": "that is a kubernetes as a service engine on top of multi-tenant Cloud platform",
    "start": "140700",
    "end": "146280"
  },
  {
    "text": "with the underlying technology of cluster API",
    "start": "146280",
    "end": "151379"
  },
  {
    "text": "okay so what is cluster API I'm gonna quickly Breeze through this Slide the",
    "start": "151379",
    "end": "156780"
  },
  {
    "text": "cluster API is a kubernetes project to bring declarative kubernetes style apis for cluster creation configuration and",
    "start": "156780",
    "end": "163920"
  },
  {
    "text": "management so the idea here is that so end users would run these commands which",
    "start": "163920",
    "end": "169800"
  },
  {
    "text": "are Cube cuttle traditional familiar commands to create the cluster on an",
    "start": "169800",
    "end": "175140"
  },
  {
    "text": "existing cluster so this existing cluster with cluster API components",
    "start": "175140",
    "end": "181019"
  },
  {
    "text": "installed is what is called management cluster and the children clusters that are",
    "start": "181019",
    "end": "186239"
  },
  {
    "text": "created as a result are called workload clusters so that's the difference between management and workload cluster",
    "start": "186239",
    "end": "192720"
  },
  {
    "text": "so management cluster is cluster with core copy components installed and this",
    "start": "192720",
    "end": "198360"
  },
  {
    "text": "is where API definitions of workload clusters are also defined and workload clusters are intended to host the modern",
    "start": "198360",
    "end": "205800"
  },
  {
    "text": "workloads okay so that's the end user's point of",
    "start": "205800",
    "end": "211739"
  },
  {
    "text": "view on what clustered API is now let's see the developer's point of view on",
    "start": "211739",
    "end": "216780"
  },
  {
    "text": "what cluster API is so in simpler terms cluster cluster API is comprised of one",
    "start": "216780",
    "end": "223620"
  },
  {
    "text": "main component that is core copy provider and three plugable components infrastructure provider bootstrap",
    "start": "223620",
    "end": "230159"
  },
  {
    "text": "provider and control plane provider so all these providers have their own",
    "start": "230159",
    "end": "235560"
  },
  {
    "text": "set of responsibilities to adhere uh to meet and a few orchestration rules to",
    "start": "235560",
    "end": "242280"
  },
  {
    "text": "adhere which are dictated by the core Cappy provider so at high level the infrastructure",
    "start": "242280",
    "end": "249239"
  },
  {
    "text": "provider responsibilities to create the necessary infrastructure required for the cluster on the chosen Cloud",
    "start": "249239",
    "end": "255480"
  },
  {
    "text": "environment and this is what we are interested in for this talk",
    "start": "255480",
    "end": "260579"
  },
  {
    "text": "and bootstrap providers responsibility is to generate a script that can convert",
    "start": "260579",
    "end": "266699"
  },
  {
    "text": "any machine into a kubernetes either control plane or worker node control plane providers responsibility is to",
    "start": "266699",
    "end": "273780"
  },
  {
    "text": "manage control plane nodes and deal with upgrades Etc okay so the so then the idea here is",
    "start": "273780",
    "end": "281340"
  },
  {
    "text": "that user would come in apply a cluster manifest file on this management cluster and the resultant workload clusters get",
    "start": "281340",
    "end": "287160"
  },
  {
    "text": "created on the chosen infrastructure provider so for this talk uh so this capacity is",
    "start": "287160",
    "end": "293820"
  },
  {
    "text": "what we have built cluster API provided for VMware Cloud director and vcd is the",
    "start": "293820",
    "end": "299940"
  },
  {
    "text": "acronym that stands for our multi-tenant Cloud platform that is VMware Cloud director",
    "start": "299940",
    "end": "305699"
  },
  {
    "text": "here is the sample copy manifest file um so cluster so basically it's a",
    "start": "305699",
    "end": "311820"
  },
  {
    "text": "hierarchical structure of API objects and the cluster is at the root it's the",
    "start": "311820",
    "end": "317040"
  },
  {
    "text": "root element of the other objects and it holds owner refs to a few other uh objects associated with other other",
    "start": "317040",
    "end": "324240"
  },
  {
    "text": "providers note these uh vcd cluster and vcd machine template custom resources",
    "start": "324240",
    "end": "330360"
  },
  {
    "text": "these are associated with our infrastructure provider that's cap BCD and you will be actually replacing those",
    "start": "330360",
    "end": "337320"
  },
  {
    "text": "with uh whatever the infrastructure uh CRS that you'll be coming up for your",
    "start": "337320",
    "end": "343139"
  },
  {
    "text": "infrastructure provider so the sample copy managers say basically says I want a kubernetes",
    "start": "343139",
    "end": "350100"
  },
  {
    "text": "cluster with one control plane and one worker one worker node with so-and-so settings on so on so plus",
    "start": "350100",
    "end": "358020"
  },
  {
    "text": "cloud provider let's go a bit deeper now to see how",
    "start": "358020",
    "end": "364259"
  },
  {
    "text": "cluster API works what enables smooth interplay of core Cappy and all the other providers that",
    "start": "364259",
    "end": "371039"
  },
  {
    "text": "we have just talked about number one hierarchy of API objects and number two cluster API contract",
    "start": "371039",
    "end": "377580"
  },
  {
    "text": "so um hierarchy of API objects the diagram that you heard seeing here is the",
    "start": "377580",
    "end": "383880"
  },
  {
    "text": "pictorial representation of what we have just seen in the previous slide the cluster API manifest file and",
    "start": "383880",
    "end": "391740"
  },
  {
    "text": "everything that's in blue here are custom resources associated with core",
    "start": "391740",
    "end": "398520"
  },
  {
    "text": "copy and other providers and that are in green are associated with the infrastructure provider which is of our",
    "start": "398520",
    "end": "404580"
  },
  {
    "text": "interest and when you apply that yaml file this",
    "start": "404580",
    "end": "409860"
  },
  {
    "text": "is how the resultant API object hierarchy is gonna look like and all of these resources are being",
    "start": "409860",
    "end": "416940"
  },
  {
    "text": "watched by their Associated controllers to bring so they are basically doing",
    "start": "416940",
    "end": "422819"
  },
  {
    "text": "continuous reconciliation attempts to bring the their current state to the desired state",
    "start": "422819",
    "end": "428520"
  },
  {
    "text": "so similarly we have these oh sorry so we have these infra cluster and infra",
    "start": "428520",
    "end": "435539"
  },
  {
    "text": "machine objects that are created as a result and these are also be uh are supposed to be watched by the respective",
    "start": "435539",
    "end": "442199"
  },
  {
    "text": "controllers like infra cluster and infra machine controllers and this is what uh we are supposed to",
    "start": "442199",
    "end": "448560"
  },
  {
    "text": "build as part of the cluster infrastructure provider so these crds and their Associated controllers at the",
    "start": "448560",
    "end": "455340"
  },
  {
    "text": "minimum is what would make the infrastructure provider okay so now that we have a fair",
    "start": "455340",
    "end": "460979"
  },
  {
    "text": "understanding of what hierarchy of API object is going to look like let's",
    "start": "460979",
    "end": "466139"
  },
  {
    "text": "understand cluster API contract so as I've mentioned before all these",
    "start": "466139",
    "end": "471720"
  },
  {
    "text": "controllers from the providers are responsible uh to do certain things and all of these",
    "start": "471720",
    "end": "479759"
  },
  {
    "text": "need to adhere to certain orchestration rules dictated by the main component that is core copy and these controllers",
    "start": "479759",
    "end": "487560"
  },
  {
    "text": "are supposed to interact with each other by variables called well-known fields and let's take an example of how cluster",
    "start": "487560",
    "end": "493979"
  },
  {
    "text": "controller and how in infra cluster controller interact with each other in the sequence diagram",
    "start": "493979",
    "end": "501539"
  },
  {
    "text": "so both of these controllers are watching um watching their Associated CR custom",
    "start": "501539",
    "end": "509639"
  },
  {
    "text": "resources here so the cluster controller is the first one to act here",
    "start": "509639",
    "end": "515099"
  },
  {
    "text": "it sets the owner ref on the infra cluster so basically it says I kind of own you",
    "start": "515099",
    "end": "522240"
  },
  {
    "text": "that an infra cluster controller",
    "start": "522240",
    "end": "526760"
  },
  {
    "text": "this job from that point onwards is to create the basic infrastructure for the",
    "start": "528000",
    "end": "533040"
  },
  {
    "text": "cluster creation to proceed further like it can create a load balancer a",
    "start": "533040",
    "end": "539880"
  },
  {
    "text": "networking setup that's unique to your own cloud environments and it also need to ensure that control plan endpoint is",
    "start": "539880",
    "end": "546360"
  },
  {
    "text": "either generator or specified by the user so once the control plane endpoint",
    "start": "546360",
    "end": "551459"
  },
  {
    "text": "is generated it sets itself to as ready and then cluster controller would",
    "start": "551459",
    "end": "557760"
  },
  {
    "text": "consume that control plane endpoint and marks itself ready and it generates the",
    "start": "557760",
    "end": "563100"
  },
  {
    "text": "cube con Cube configs secret so that end users can access",
    "start": "563100",
    "end": "568380"
  },
  {
    "text": "begin to access that cluster okay",
    "start": "568380",
    "end": "574080"
  },
  {
    "text": "so information controller is mainly responsible for creating nodes so in the previous slide what we have seen is",
    "start": "574080",
    "end": "579959"
  },
  {
    "text": "infra cluster controller that was the one that created the basic infrastructure necessary for all of",
    "start": "579959",
    "end": "585660"
  },
  {
    "text": "these controllers to proceed further and information controller main job is to",
    "start": "585660",
    "end": "592080"
  },
  {
    "text": "create the necessary infrastructure and at the same time bootstrap controller generates the necessary script to",
    "start": "592080",
    "end": "598740"
  },
  {
    "text": "convert these machines into kubernetes nodes so bootstrap controller generates the",
    "start": "598740",
    "end": "605640"
  },
  {
    "text": "bootstrap script and stores it in a well-known fail in a data secret that is to be consumed by Machine controller",
    "start": "605640",
    "end": "611820"
  },
  {
    "text": "Machine controller kind of copies it to an another field which is to be read by",
    "start": "611820",
    "end": "617459"
  },
  {
    "text": "information controller and information controller at this point",
    "start": "617459",
    "end": "622680"
  },
  {
    "text": "Provisions the necessary infrastructure using that bootstrap secret basically it takes out the cloud in its kit from that",
    "start": "622680",
    "end": "629519"
  },
  {
    "text": "secret and runs it to convert the machine into a kubernetes node either",
    "start": "629519",
    "end": "634920"
  },
  {
    "text": "control plane or worker node node and if it's a control plane node you would also see another controller in the",
    "start": "634920",
    "end": "642360"
  },
  {
    "text": "picture that is kcp controller okay",
    "start": "642360",
    "end": "648560"
  },
  {
    "text": "so once that is all done information controller marks itself ready and then Machine controller also marks itself",
    "start": "648839",
    "end": "654959"
  },
  {
    "text": "ready and it waits for the node to join the cluster so the bottom line here is that",
    "start": "654959",
    "end": "661920"
  },
  {
    "text": "again the crd is associated with these infra cluster machine and Associated",
    "start": "661920",
    "end": "667740"
  },
  {
    "text": "controllers would what make up the infrastructure provider and this is what we need to implement as cluster API",
    "start": "667740",
    "end": "673980"
  },
  {
    "text": "infrastructure provider okay so now that we have a fair understanding on how internals work",
    "start": "673980",
    "end": "680279"
  },
  {
    "text": "let's get started with the implementation and implementation should become relatively easy and it should all",
    "start": "680279",
    "end": "685920"
  },
  {
    "text": "the understanding on the cluster API internals should also help you to debug and troubleshoot when things do not go",
    "start": "685920",
    "end": "693240"
  },
  {
    "text": "as expected we have used Cube Builder command Cube Builder to actually",
    "start": "693240",
    "end": "699240"
  },
  {
    "text": "um create the project layout and the scaffolding queue Builder is a framework that generates",
    "start": "699240",
    "end": "705120"
  },
  {
    "text": "um apis kubernetes apis via custom resource definitions",
    "start": "705120",
    "end": "711019"
  },
  {
    "text": "and it will also generate lot of boilerplate code for you you can just jump in and implement the business logic",
    "start": "711300",
    "end": "719640"
  },
  {
    "text": "okay so now let's assume that we have built the infrastructure provider for",
    "start": "719640",
    "end": "724680"
  },
  {
    "text": "your for your own cloud environments now so now how do we get these infrastructure provider implemented on",
    "start": "724680",
    "end": "730860"
  },
  {
    "text": "the clock kubernetes cluster so basically we need to set up the management cluster and we can achieve",
    "start": "730860",
    "end": "736260"
  },
  {
    "text": "that by cluster cuttle tool that helps setting up the management cluster and generating cluster manifest files",
    "start": "736260",
    "end": "742500"
  },
  {
    "text": "so this is the command that you need to run for your infrastructure vcd is our platform",
    "start": "742500",
    "end": "748680"
  },
  {
    "text": "so basically this command pulls the content from your GitHub repo and",
    "start": "748680",
    "end": "754079"
  },
  {
    "text": "installs those components on the management cluster so what this also means that",
    "start": "754079",
    "end": "760680"
  },
  {
    "text": "you will have to update or edit cluster cuttle code to include your infrastructure provider as list in as",
    "start": "760680",
    "end": "767459"
  },
  {
    "text": "part of the huge list of other providers that cluster cutter currently supports",
    "start": "767459",
    "end": "773459"
  },
  {
    "text": "and these are cluster cutter generate commands to generate the sample cluster API",
    "start": "773459",
    "end": "780660"
  },
  {
    "text": "manifests which you can run on the management cluster to create workload clusters",
    "start": "780660",
    "end": "786180"
  },
  {
    "text": "and next okay so now we have this management cluster fully ready with all the components installed user would come",
    "start": "786180",
    "end": "792839"
  },
  {
    "text": "in and create the workload cluster now are these workload clusters ready not yet",
    "start": "792839",
    "end": "798360"
  },
  {
    "text": "so ready as in ready to host modern applications not yet so we need cni to",
    "start": "798360",
    "end": "804420"
  },
  {
    "text": "enable container communication CPI to set provider id on the nodes note that",
    "start": "804420",
    "end": "809700"
  },
  {
    "text": "CPI is kind of a mandatory requirement um from core copy so it expects cloud",
    "start": "809700",
    "end": "816779"
  },
  {
    "text": "provider input interface to be installed on your workload clusters so",
    "start": "816779",
    "end": "822899"
  },
  {
    "text": "so we need to have this cni and CPI installed on the workload cluster to be called fully ready",
    "start": "822899",
    "end": "828720"
  },
  {
    "text": "and CSI is to enable state stateful deployments for persistent volumes and",
    "start": "828720",
    "end": "834540"
  },
  {
    "text": "we use CRS cluster resources definitions for installing these components",
    "start": "834540",
    "end": "839579"
  },
  {
    "text": "so if you're planning to uh build cluster API infrastructure provider you",
    "start": "839579",
    "end": "845279"
  },
  {
    "text": "should also plan to implement cloud provider interface for your Cloud environment",
    "start": "845279",
    "end": "851700"
  },
  {
    "text": "okay so admission controllers and multiversion API",
    "start": "851700",
    "end": "857660"
  },
  {
    "text": "so now that we have the basic implementation of cluster API infrastructure provider you can make it more robust by implementing these",
    "start": "857820",
    "end": "864480"
  },
  {
    "text": "admission controllers defaulting and validating web hooks um basically they let you write custom",
    "start": "864480",
    "end": "870959"
  },
  {
    "text": "code to either set some default values on the resources and validate before the",
    "start": "870959",
    "end": "876839"
  },
  {
    "text": "data is persisted in the hcd database a next multi-version API support it's a",
    "start": "876839",
    "end": "882600"
  },
  {
    "text": "big Topic in itself for this talk I'm just going to go over the need and the few resources to get started",
    "start": "882600",
    "end": "890600"
  },
  {
    "text": "um so at some point you'll have to think about bumping up API version and what this means is",
    "start": "890880",
    "end": "898380"
  },
  {
    "text": "it becomes a necessity on the infrastructure provider to be backward compatible with older API",
    "start": "898380",
    "end": "904800"
  },
  {
    "text": "versions again so when user uh requests for a",
    "start": "904800",
    "end": "910260"
  },
  {
    "text": "older API version kubernetes API server is supposed to return the object in that",
    "start": "910260",
    "end": "915420"
  },
  {
    "text": "API version however your stored version could be much ahead and Cube API server",
    "start": "915420",
    "end": "922019"
  },
  {
    "text": "needs to do the necessary conversions between the desired version and the",
    "start": "922019",
    "end": "927540"
  },
  {
    "text": "stored version and these conversions need to go into conversion web hooks so that Cube API server can actually call",
    "start": "927540",
    "end": "934019"
  },
  {
    "text": "them uh to do the necessary conversions so you can create the scaffolding for",
    "start": "934019",
    "end": "939720"
  },
  {
    "text": "these web hooks also using Cube Builder and we have used the same",
    "start": "939720",
    "end": "945560"
  },
  {
    "text": "so few few of the lessons learned so the docker provider is an excellent starting point to read through and modify the",
    "start": "945899",
    "end": "952199"
  },
  {
    "text": "code which is what we have actually used uh in the beginning to familiarize ourselves with the",
    "start": "952199",
    "end": "958920"
  },
  {
    "text": "infrastructure provider implementation it's very simple and bootstrap controller it generates a cloud in its",
    "start": "958920",
    "end": "965579"
  },
  {
    "text": "script in ginger template um we had to do some tinkering to adjust it to our needs and load balancers are",
    "start": "965579",
    "end": "973019"
  },
  {
    "text": "kind of a first class component of the infrastructure and I have been already talked about CPI and uh do remember to",
    "start": "973019",
    "end": "981120"
  },
  {
    "text": "um oh where is it um yeah for this yeah here",
    "start": "981120",
    "end": "987360"
  },
  {
    "text": "uh sorry sorry this uh thing needs to go in here so we need do we need to remember to set the cloud provider as",
    "start": "987360",
    "end": "993779"
  },
  {
    "text": "external for the cubelet configuration um yeah and",
    "start": "993779",
    "end": "1001180"
  },
  {
    "text": "so lastly on this page so these two labels take do take note of these labels",
    "start": "1001579",
    "end": "1008540"
  },
  {
    "text": "these need to be set on your crds this is an important step this basically tells cluster a core component core copy",
    "start": "1008540",
    "end": "1016399"
  },
  {
    "text": "component to use which API version of your infrastructure provider and it becomes even more important to",
    "start": "1016399",
    "end": "1023480"
  },
  {
    "text": "set these two Fields uh when you have multi version API support in your",
    "start": "1023480",
    "end": "1028640"
  },
  {
    "text": "infrastructure ready so we actually hit this issue where we had",
    "start": "1028640",
    "end": "1036079"
  },
  {
    "text": "this multiversion API support ready and we some we kind of uh forgot to set these labels and our newer API version",
    "start": "1036079",
    "end": "1044360"
  },
  {
    "text": "resources are somehow getting reset to the older content so we had no clue why",
    "start": "1044360",
    "end": "1049520"
  },
  {
    "text": "thanks to Cluster cluster API folks who helped us debug and it's a simple change",
    "start": "1049520",
    "end": "1054620"
  },
  {
    "text": "but this is very important thing that you need to remember",
    "start": "1054620",
    "end": "1058960"
  },
  {
    "text": "okay lastly uh Auto scaling kind of comes for free with the cluster API all you have to do is",
    "start": "1060140",
    "end": "1067039"
  },
  {
    "text": "download this and run this command with cluster API as a cloud provider and set",
    "start": "1067039",
    "end": "1072740"
  },
  {
    "text": "some annotations on the machine deployment object so there are more references to",
    "start": "1072740",
    "end": "1077900"
  },
  {
    "text": "um here and your clusters are Auto scalable so with that I'll hand it over to Arun",
    "start": "1077900",
    "end": "1086480"
  },
  {
    "text": "thank you hi",
    "start": "1086480",
    "end": "1092480"
  },
  {
    "text": "come on thanks sahiti so uh yeah let's uh move from here so as you see there is",
    "start": "1092480",
    "end": "1098059"
  },
  {
    "text": "a there are lots of gotchas uh the cluster API documentation is one but as she mentioned the labels and so on are",
    "start": "1098059",
    "end": "1105200"
  },
  {
    "text": "uh it's tough to find them in the documentation the documentation is like a 350 page book if you print it out and",
    "start": "1105200",
    "end": "1111200"
  },
  {
    "text": "the labels are mentioned in some particular cases and it is tough to debug these as well but recluster API",
    "start": "1111200",
    "end": "1117620"
  },
  {
    "text": "Community is very supportive and we made use of their health quite a bit so now",
    "start": "1117620",
    "end": "1123380"
  },
  {
    "text": "let's reiterate on revisit how the VMware how the cloud provider multi-tenancy looks like how a public I",
    "start": "1123380",
    "end": "1130160"
  },
  {
    "text": "mean how in general any multi tendency looks like and how VMware Cloud director fits",
    "start": "1130160",
    "end": "1135799"
  },
  {
    "text": "into that model so uh in VMware Cloud director we follow the principle of the",
    "start": "1135799",
    "end": "1142700"
  },
  {
    "text": "Google private Cloud equivalent though the other mechanism is also possible you can have a set of organizations organ",
    "start": "1142700",
    "end": "1150020"
  },
  {
    "text": "and or two and so on so does this right so you for example Suppose there",
    "start": "1150020",
    "end": "1156140"
  },
  {
    "text": "are two organizations argon and R2 the cloud is partitioned into these organizations in terms of compute",
    "start": "1156140",
    "end": "1161299"
  },
  {
    "text": "network storage and so on so each of them is like a set of virtual data centers from the cloud they are carved",
    "start": "1161299",
    "end": "1168020"
  },
  {
    "text": "out and each org has their own set of data centers and their own set of resources now the IDP is also carved out",
    "start": "1168020",
    "end": "1175760"
  },
  {
    "text": "in the sense that uh Oregon users they do not really know the existence of R2",
    "start": "1175760",
    "end": "1180980"
  },
  {
    "text": "for example and org one administrators also do not know the identity of how to there is an Uber cloud provider who is",
    "start": "1180980",
    "end": "1187220"
  },
  {
    "text": "at the top who can potentially see everything but the identity I mean the IDP is unique across all of the orgs now",
    "start": "1187220",
    "end": "1195080"
  },
  {
    "text": "we this is a very rich multi-tenant system now we wanted to figure out what our goals were for VMware Cloud director",
    "start": "1195080",
    "end": "1202520"
  },
  {
    "text": "and what cluster API brings the uh brings forward and how do we marry the two pretty much so on our goals are that",
    "start": "1202520",
    "end": "1209660"
  },
  {
    "text": "tenant users or organization users they should be able to create cluster API in a self-service manner so a self-service",
    "start": "1209660",
    "end": "1216140"
  },
  {
    "text": "manner is started because we will talk about that uh in the in a little bit self-service is very important for us",
    "start": "1216140",
    "end": "1222020"
  },
  {
    "text": "the second part is that to bring out the features of our Cloud platform VMware Cloud director into kubernetes clusters",
    "start": "1222020",
    "end": "1228860"
  },
  {
    "text": "so we have very strong user isolation and quota systems and roles and rights",
    "start": "1228860",
    "end": "1234980"
  },
  {
    "text": "whereas kubernetes has its own our back system the quota system of kubernetes is has a lot to be desired I mean it has",
    "start": "1234980",
    "end": "1241460"
  },
  {
    "text": "one authentication mechanism and it has a separate auth Z mechanism and the two don't talk to each other pretty much so",
    "start": "1241460",
    "end": "1248380"
  },
  {
    "text": "I mean and um yeah we are left wanting there so we wanted to be able to actually represent our user here in the",
    "start": "1248380",
    "end": "1255260"
  },
  {
    "text": "kubernetes cluster so the third part is the same thing about representation so",
    "start": "1255260",
    "end": "1260480"
  },
  {
    "text": "we want to ensure that our tenant users can be represented using their own idps in the kubernetes Clusters so they must",
    "start": "1260480",
    "end": "1267020"
  },
  {
    "text": "be able to authenticate they must be able to create a cluster but within the cluster they must be able to show their identity and the fourth thing is we",
    "start": "1267020",
    "end": "1273620"
  },
  {
    "text": "wanted to administer policies on the user from the cloud side but this should",
    "start": "1273620",
    "end": "1278780"
  },
  {
    "text": "also flow into kubernetes operations so if a user has access to create only say",
    "start": "1278780",
    "end": "1284120"
  },
  {
    "text": "10 VMS we want to ensure that the nodes the recubernetes nodes when they are Auto scaling they shouldn't scale Beyond",
    "start": "1284120",
    "end": "1289880"
  },
  {
    "text": "10 they should stop at 10 and that should be a policy which is enforced by the cloud and that should automatically be used by the Clusters so on then we",
    "start": "1289880",
    "end": "1299299"
  },
  {
    "text": "actually came up with a set of questions now um uh how do we actually first of",
    "start": "1299299",
    "end": "1304520"
  },
  {
    "text": "all satisfy the network requirement so one hidden thing of cluster API or it is",
    "start": "1304520",
    "end": "1309559"
  },
  {
    "text": "potentially evident now is that the management and workload clusters all need to talk to each other all of the",
    "start": "1309559",
    "end": "1315020"
  },
  {
    "text": "time there needs to be a network connectivity whereas you saw that the orgs were disjoint with respect to network in the other case so how do you",
    "start": "1315020",
    "end": "1321679"
  },
  {
    "text": "actually uh have a network connectivity between the management cluster and our workload cluster maybe you cannot start off with one Uber management cluster the",
    "start": "1321679",
    "end": "1329240"
  },
  {
    "text": "second thing is who creates the management cluster and manages it so potentially there must be somebody who",
    "start": "1329240",
    "end": "1334880"
  },
  {
    "text": "does the life cycle of the management cluster and keeps it secure if the management clusters for example handles",
    "start": "1334880",
    "end": "1341000"
  },
  {
    "text": "a thousand workload clusters right there's also a skew of versions between the management and workload clusters so",
    "start": "1341000",
    "end": "1346100"
  },
  {
    "text": "at some point if you want to upgrade the workload cluster you will also have to upgrade the management cluster so there",
    "start": "1346100",
    "end": "1351320"
  },
  {
    "text": "is some amount of management task and the administrator of this cluster needs to be kubernetes savvy",
    "start": "1351320",
    "end": "1357320"
  },
  {
    "text": "so that is on the cluster management side on the user management side how do the users create workload clusters in a",
    "start": "1357320",
    "end": "1363140"
  },
  {
    "text": "self-service manner so the user needs to know that there is a management cluster and they need to go and ask for some",
    "start": "1363140",
    "end": "1370400"
  },
  {
    "text": "access to it and do it so it's not very self-service basically there has to be somebody who is on the management",
    "start": "1370400",
    "end": "1375679"
  },
  {
    "text": "cluster side who is helping them out how do we enforce the tenant boundaries on the user side basically how do we",
    "start": "1375679",
    "end": "1380840"
  },
  {
    "text": "represent the user and so that is the next two things and fundamentally how do we audit the user actions on the cloud",
    "start": "1380840",
    "end": "1386780"
  },
  {
    "text": "side the user may go and do some kubernetes actions but they have to be audited with respect to their own user",
    "start": "1386780",
    "end": "1392299"
  },
  {
    "text": "ID so to solve the user aspect we made the user a first class citizen inside kubernetes so what the user would do is",
    "start": "1392299",
    "end": "1399500"
  },
  {
    "text": "they would be able to ask for a token from the cloud and get a refresh token and embed it as a secret in their token",
    "start": "1399500",
    "end": "1406760"
  },
  {
    "text": "so what I am talking about from now on is sort of patterns in multitarian clusters which exist in other providers",
    "start": "1406760",
    "end": "1413900"
  },
  {
    "text": "and other systems but they are not really documented or there is no clear acceptance of those as a pattern so",
    "start": "1413900",
    "end": "1421220"
  },
  {
    "text": "basically we are talking about what we did and these seem to be the common patterns which are being used nowadays",
    "start": "1421220",
    "end": "1426320"
  },
  {
    "text": "so one of them is a representation of the user using their secrets I mean in AWS it is mounting the secrets and so on",
    "start": "1426320",
    "end": "1432679"
  },
  {
    "text": "ah so that way you can actually enforce the policies of the cloud director on the particular user so the user would",
    "start": "1432679",
    "end": "1439299"
  },
  {
    "text": "just embed their secret into the cluster which they create and they use the",
    "start": "1439299",
    "end": "1444380"
  },
  {
    "text": "tokens in secrets so we had to build a refresh token methodology in order to get this so because we didn't want to",
    "start": "1444380",
    "end": "1450380"
  },
  {
    "text": "expose the user's credentials directly ah that is like a token which can be",
    "start": "1450380",
    "end": "1455419"
  },
  {
    "text": "revoked pretty much so the other thing is that the network boundary we have seen that there can be multiple",
    "start": "1455419",
    "end": "1460760"
  },
  {
    "text": "organizations uh as a result there can be multiple management I mean there needs to be a",
    "start": "1460760",
    "end": "1466940"
  },
  {
    "text": "one management cluster per organization and uh there has to be uh workload",
    "start": "1466940",
    "end": "1472039"
  },
  {
    "text": "clusters connected to that particular org itself so this wall is pretty much a network boundary and since uh management",
    "start": "1472039",
    "end": "1478640"
  },
  {
    "text": "and workload clusters need to talk to each other they have to be within the same networking space which is the same",
    "start": "1478640",
    "end": "1484039"
  },
  {
    "text": "tenant the user would essentially use their access token and do it however this also needs a namespace level",
    "start": "1484039",
    "end": "1491740"
  },
  {
    "text": "multi-tenancy ah for which we take communication test yourself and the reason is in the next slide so as you",
    "start": "1491740",
    "end": "1498679"
  },
  {
    "text": "can see uh like sahity mentioned the tenant can apply a kubernetes yaml to",
    "start": "1498679",
    "end": "1504919"
  },
  {
    "text": "the management cluster and get a workload cluster however they should not be able to ah view the other clusters so",
    "start": "1504919",
    "end": "1511280"
  },
  {
    "text": "their access should not flow into this but how do you manage that because the pretty much the tenant needs some",
    "start": "1511280",
    "end": "1516860"
  },
  {
    "text": "accessory so here we are so and the third part is that the management cluster should not have a long time",
    "start": "1516860",
    "end": "1522919"
  },
  {
    "text": "access to the Clusters credentials so we solved that using namespaces so",
    "start": "1522919",
    "end": "1528320"
  },
  {
    "text": "what happens is that each tenant gets their own namespace each tenant user gets their own namespace",
    "start": "1528320",
    "end": "1534620"
  },
  {
    "text": "and they are able to access only objects within that namespace and they can create workload clusters within that",
    "start": "1534620",
    "end": "1540140"
  },
  {
    "text": "namespace ah however this still does not yeah the other part is that they need to have short uh",
    "start": "1540140",
    "end": "1547419"
  },
  {
    "text": "expiry I mean not refresh tokens with short expiry times and I'll come to that next when we are doing a self-service",
    "start": "1547419",
    "end": "1553640"
  },
  {
    "text": "kubernetes or if you are doing this in the complete schedule so this namespace pretty much gives exactly this tenant",
    "start": "1553640",
    "end": "1560419"
  },
  {
    "text": "user access to uh on cluster objects and vcd cluster objects and so on a subset",
    "start": "1560419",
    "end": "1566840"
  },
  {
    "text": "of objects so now let us quickly look at how the workflow would be like so you",
    "start": "1566840",
    "end": "1573380"
  },
  {
    "text": "have Suppose there is a Alice management user and a tenant Alice user and this user wants to actually go and um",
    "start": "1573380",
    "end": "1582080"
  },
  {
    "text": "ah Crea create a workload cluster so how do they first of all discover that there is a wireless management cluster so",
    "start": "1582080",
    "end": "1587840"
  },
  {
    "text": "there is no Discovery and somehow we have to get to know of it from By Word of Mouth but once this particular tenant",
    "start": "1587840",
    "end": "1594919"
  },
  {
    "text": "gets the cluster uh gets to know of the cluster then they actually figure out who's the owner of the cluster is the management cluster",
    "start": "1594919",
    "end": "1601460"
  },
  {
    "text": "admin and they ask for a management cluster access so this is a human operation which happens this management",
    "start": "1601460",
    "end": "1607100"
  },
  {
    "text": "cluster now creates a namespace for this user and gives them a particular Cube config which is the way to access this",
    "start": "1607100",
    "end": "1613880"
  },
  {
    "text": "particular cluster and now the tenant so as you can see the management cluster admins work is done",
    "start": "1613880",
    "end": "1620720"
  },
  {
    "text": "they can just go out of the picture now the Alice management cluster is available the namespace is available the",
    "start": "1620720",
    "end": "1625880"
  },
  {
    "text": "user is still there and the cubeconfig is still there now they want to create a cluster so they will create a cluster with the vcd token embedded as a secret",
    "start": "1625880",
    "end": "1632740"
  },
  {
    "text": "dbcd is our cloud provider refresh token this particular token and they get a workload cluster created",
    "start": "1632740",
    "end": "1640580"
  },
  {
    "text": "using that they can monitor the lifetime of this creation and they can see it getting created now again so seeing it",
    "start": "1640580",
    "end": "1648020"
  },
  {
    "text": "getting created is a bit of a tricky thing because they don't have access to capacity logs okay so it is not I mean",
    "start": "1648020",
    "end": "1653960"
  },
  {
    "text": "we have to make the logs multi-tenant in a particular Way by which they can actually see if there is an issue with the creation and then they can go ahead",
    "start": "1653960",
    "end": "1660679"
  },
  {
    "text": "and create it now once that is created ah so as in they should not be able to see any other",
    "start": "1660679",
    "end": "1666740"
  },
  {
    "text": "users logs so that is where the logs also need to be multiplied at that particular point once the cluster is",
    "start": "1666740",
    "end": "1671779"
  },
  {
    "text": "created they want they want to actually get the cube config of that cluster the admin Cube coffee and that is the means",
    "start": "1671779",
    "end": "1678260"
  },
  {
    "text": "by which they own the cluster right so they would issue a getcubeconfig it's a small script which they can run which",
    "start": "1678260",
    "end": "1684559"
  },
  {
    "text": "would essentially uh take the secrets from the cluster and you get back this particular workload cluster and things",
    "start": "1684559",
    "end": "1691760"
  },
  {
    "text": "are done there later when they want to update or upgrade this particular cluster they again need to come to this",
    "start": "1691760",
    "end": "1697640"
  },
  {
    "text": "particular management cluster and make those changes and their operations are satisfied so this is the whole set of",
    "start": "1697640",
    "end": "1704059"
  },
  {
    "text": "operations and as you can see there are many things in this life cycle and it's not very",
    "start": "1704059",
    "end": "1710020"
  },
  {
    "text": "self-service based right you actually go and talk to a person and do many things there are other things with the",
    "start": "1710020",
    "end": "1716179"
  },
  {
    "text": "management cluster as well which we need to talk about in a distributed system and that's the blast radius and the",
    "start": "1716179",
    "end": "1721520"
  },
  {
    "text": "security aspects of of it so you have a management cluster which is handling multiple workload clusters and you have",
    "start": "1721520",
    "end": "1727940"
  },
  {
    "text": "multiple workload clusters where the users have actually stored their secrets their tokens now what happens if there",
    "start": "1727940",
    "end": "1735440"
  },
  {
    "text": "is a network partition on the management cluster side now the vertical clusters cannot be managed at that point you",
    "start": "1735440",
    "end": "1741320"
  },
  {
    "text": "cannot upgrade or update them so they are sort of waiting for the management cluster to come back up or the network",
    "start": "1741320",
    "end": "1746539"
  },
  {
    "text": "system to be there or what happens if the management cluster is compromised in some way or becomes evil now all of the",
    "start": "1746539",
    "end": "1752900"
  },
  {
    "text": "tokens are compromised I mean even if they have short-lived tokens they cannot use the management cluster anymore in",
    "start": "1752900",
    "end": "1758779"
  },
  {
    "text": "order to upgrade their clusters so they are in a sort of a limbo State wherein they can we can always revoke the tokens",
    "start": "1758779",
    "end": "1765620"
  },
  {
    "text": "that is fine but then you can't go and do anything to your cluster you can just let the current workload Runs workloads",
    "start": "1765620",
    "end": "1771980"
  },
  {
    "text": "run even Auto scaling will not happen at that particular point so ah in order to actually solve this issue we actually",
    "start": "1771980",
    "end": "1779539"
  },
  {
    "text": "came up with something I mean we actually began to use something called a self-managing cluster ah so this is an",
    "start": "1779539",
    "end": "1785899"
  },
  {
    "text": "old concept which has existed from the beginning of cluster API however it has not used as a common pattern nowadays",
    "start": "1785899",
    "end": "1793159"
  },
  {
    "text": "however this has helped us quite a bit so you have the same system wherein you have the management cluster you have",
    "start": "1793159",
    "end": "1798860"
  },
  {
    "text": "capacity binaries and you have the workload cluster records the crds which I think I was mentioning in infra",
    "start": "1798860",
    "end": "1805580"
  },
  {
    "text": "cluster controller and so on and uh the user can actually apply a resize and",
    "start": "1805580",
    "end": "1811640"
  },
  {
    "text": "upgrade commands on this management cluster and things work so what we do is we and things operate on the virtual",
    "start": "1811640",
    "end": "1818720"
  },
  {
    "text": "cluster what we do is we actually install Cappy and capacity on the workload cluster and we run the cluster",
    "start": "1818720",
    "end": "1825679"
  },
  {
    "text": "Kettle move command so the move command can be namespace so you can exactly move those records of this cluster into the",
    "start": "1825679",
    "end": "1832700"
  },
  {
    "text": "workload cluster all of the labeled objects which as we mentioned those would potentially move once these are",
    "start": "1832700",
    "end": "1839000"
  },
  {
    "text": "moved as you can see this link between the management cluster and the workload cluster is lost and you can actually",
    "start": "1839000",
    "end": "1845000"
  },
  {
    "text": "apply all of your comments on this so what we have done is after the cluster",
    "start": "1845000",
    "end": "1850460"
  },
  {
    "text": "has been made self-managing so this sort of a cluster is called a self managing cluster once it becomes self-managing",
    "start": "1850460",
    "end": "1855980"
  },
  {
    "text": "you can just Auto scale it by just using its own",
    "start": "1855980",
    "end": "1861500"
  },
  {
    "text": "record so you can do a cube kit you can change the number of nodes for example worker nodes from three to five and you",
    "start": "1861500",
    "end": "1868039"
  },
  {
    "text": "can apply the yaml on this particular workload cluster it will scale itself up likewise you can see it can scale down",
    "start": "1868039",
    "end": "1873620"
  },
  {
    "text": "as well and you can also do a upgrade operation so you can actually let it upgrade itself from one version to",
    "start": "1873620",
    "end": "1879559"
  },
  {
    "text": "another it's completely self managing the only caveat is for deletion for deletion we need to take the help of another cluster and we have in a way",
    "start": "1879559",
    "end": "1887480"
  },
  {
    "text": "around that and we began to use this on self-service kubernetes cluster so now",
    "start": "1887480",
    "end": "1893179"
  },
  {
    "text": "ah we want to have one SAS layer by which you can create a cluster in a networking space where you can't have",
    "start": "1893179",
    "end": "1899899"
  },
  {
    "text": "access so there is a networking space somewhere which has 192.168 dot something for example in 10 in Pepsi or",
    "start": "1899899",
    "end": "1907220"
  },
  {
    "text": "10 in group you have a 192.168 network here now there is a particular",
    "start": "1907220",
    "end": "1912460"
  },
  {
    "text": "kubernetes service layer and a Pepsi user he cannot access the network of tenant Pepsi directly he is on his",
    "start": "1912460",
    "end": "1918679"
  },
  {
    "text": "laptop but however he can access a API surface and they want to I mean he or",
    "start": "1918679",
    "end": "1924559"
  },
  {
    "text": "she and this user wants to be able to run a particular command by which they",
    "start": "1924559",
    "end": "1930740"
  },
  {
    "text": "can actually create a cluster here so the way we do that is we make use of the bootstrap cluster mechanism",
    "start": "1930740",
    "end": "1937220"
  },
  {
    "text": "so basically we create a VM on that so by using the cloud providers API I mean",
    "start": "1937220",
    "end": "1944480"
  },
  {
    "text": "by using the cloud API we create a VM on that particular tenant and we actually",
    "start": "1944480",
    "end": "1950480"
  },
  {
    "text": "create a small bootstrap cluster in that and then we create a workload cluster",
    "start": "1950480",
    "end": "1955940"
  },
  {
    "text": "based on that and we move the objects we make it self-managing I mean we install the",
    "start": "1955940",
    "end": "1961580"
  },
  {
    "text": "Cappy capacity and we make it self-managing and then we destroy the bootstrap cluster at this point the",
    "start": "1961580",
    "end": "1967700"
  },
  {
    "text": "Pepsi user can actually go and manage their workload clusters on I mean manage their cluster on their own so there is",
    "start": "1967700",
    "end": "1974480"
  },
  {
    "text": "no intermediate layer there is no management cluster there is no overhead of another person coming and administrating one cluster and there is",
    "start": "1974480",
    "end": "1981380"
  },
  {
    "text": "no scaling of requests so what happens if one management cluster is a handling ten thousand other workload clusters how",
    "start": "1981380",
    "end": "1987380"
  },
  {
    "text": "do you actually ensure that it scales up and works you don't have any of those questions you have each Pepsi user I",
    "start": "1987380",
    "end": "1993559"
  },
  {
    "text": "mean each user accessing their own kubernetes cluster and the kis",
    "start": "1993559",
    "end": "1999380"
  },
  {
    "text": "kubernetes as a service layer at this point is just a very thin wrapper",
    "start": "1999380",
    "end": "2005158"
  },
  {
    "text": "ultimately came up with the agenda completed the I mean we have finished the implementation of that and we are",
    "start": "2005399",
    "end": "2011320"
  },
  {
    "text": "going to release that as cse40 uh there are I mean other users can also come and create their own",
    "start": "2011320",
    "end": "2016659"
  },
  {
    "text": "self-managing clusters now it's a extremely distributed as in its uh embarrassingly parallel right so there",
    "start": "2016659",
    "end": "2022360"
  },
  {
    "text": "is no Central Authority which is actually trying to manage multiple clusters but each cluster is managing itself all of the requests are directly",
    "start": "2022360",
    "end": "2028779"
  },
  {
    "text": "flowing to that and shout outs yeah thanks a lot Cappy Community for the help and the giant",
    "start": "2028779",
    "end": "2035019"
  },
  {
    "text": "swarm and some of uh some other partners actually give us some requests and make",
    "start": "2035019",
    "end": "2040720"
  },
  {
    "text": "us ah make capacity better and Implement features better so",
    "start": "2040720",
    "end": "2046960"
  },
  {
    "text": "there are some references here and a QR code but if there are any questions uh we can take so these are the common",
    "start": "2046960",
    "end": "2053858"
  },
  {
    "text": "patterns the reason why we have mentioned it is when you go to the community and ask for it there is no",
    "start": "2053859",
    "end": "2060220"
  },
  {
    "text": "fixed set saying that hey this is the way to do it it is like some people have done it this way some people have done",
    "start": "2060220",
    "end": "2065618"
  },
  {
    "text": "it that way because and so this presentation is a very commonly used pattern to do",
    "start": "2065619",
    "end": "2071819"
  },
  {
    "text": "any questions or comments otherwise we are sort of at time",
    "start": "2073179",
    "end": "2080560"
  },
  {
    "text": "or Beyond Time",
    "start": "2080560",
    "end": "2083580"
  },
  {
    "text": "zero six",
    "start": "2085619",
    "end": "2088858"
  }
]