[
  {
    "start": "0",
    "end": "119000"
  },
  {
    "text": "welcome everyone my name is Amara Grabovski and this is what I teach in ski we're from Google Warsaw office and",
    "start": "60",
    "end": "6509"
  },
  {
    "text": "wearing the hoodie that Aparna actually advertised in in her keynote and we are",
    "start": "6509",
    "end": "12480"
  },
  {
    "text": "the part of kubernetes team for over two years now and part of our job was in",
    "start": "12480",
    "end": "18029"
  },
  {
    "text": "Hopewell was related to the scheduling and the scheduler itself so we we're",
    "start": "18029",
    "end": "23850"
  },
  {
    "text": "here today to tell you about all the kubernetes features that sorry scheduler",
    "start": "23850",
    "end": "29279"
  },
  {
    "text": "features that allow you to take greater control over how pods help what's run in",
    "start": "29279",
    "end": "37200"
  },
  {
    "text": "your cluster so what can you do to make the system put the pods on the nodes you",
    "start": "37200",
    "end": "44280"
  },
  {
    "text": "want it to the main focus will be on",
    "start": "44280",
    "end": "49700"
  },
  {
    "text": "features that went better in 1.6 released yesterday which is mostly the",
    "start": "49700",
    "end": "55920"
  },
  {
    "text": "ones that Aparna mentioned during the keynote and we will do it by showing you",
    "start": "55920",
    "end": "63000"
  },
  {
    "text": "some use cases and there and and explain how those features can help in the",
    "start": "63000",
    "end": "69000"
  },
  {
    "text": "situation scenarios like like that I want to know that scheduling in",
    "start": "69000",
    "end": "75299"
  },
  {
    "text": "kubernetes a is a huge subject like pretty much every release from the beginning there was some new features",
    "start": "75299",
    "end": "80700"
  },
  {
    "text": "added to the scheduler some new functions some new something which makes it impossible to just tell everything in",
    "start": "80700",
    "end": "88590"
  },
  {
    "text": "this area in this short talk and in the time that we have we also want tell",
    "start": "88590",
    "end": "95070"
  },
  {
    "text": "anything about implementation details so like if you're interested in like how we",
    "start": "95070",
    "end": "101400"
  },
  {
    "text": "deal with conflicts or pretty much any like caching and other internal staff in",
    "start": "101400",
    "end": "108479"
  },
  {
    "text": "scheduler then this is not the talk for you but you can catch us later after the talk we can answer probably most of your",
    "start": "108479",
    "end": "115380"
  },
  {
    "text": "questions let's start with telling a bit how the",
    "start": "115380",
    "end": "123370"
  },
  {
    "start": "119000",
    "end": "355000"
  },
  {
    "text": "scheduler works and actually what it's supposed to do as probably most of you know the goal like the main goal of the",
    "start": "123370",
    "end": "131410"
  },
  {
    "text": "scheduler is to assign a node to a port so like when the user creates a port and",
    "start": "131410",
    "end": "136660"
  },
  {
    "text": "by user I mean of course like user or a reputed cassette or something that creates a part that's not already bound",
    "start": "136660",
    "end": "142270"
  },
  {
    "text": "to an out the the scheduler is that is the component that takes this part and",
    "start": "142270",
    "end": "149620"
  },
  {
    "text": "figures out which node is the best for this port to run and how it does it the",
    "start": "149620",
    "end": "157570"
  },
  {
    "text": "codec now I will quickly show you what is happening inside the scheduler when",
    "start": "157570",
    "end": "164980"
  },
  {
    "text": "it's happening cause it's important to understand the back what kind what can you do to actually influence the output",
    "start": "164980",
    "end": "171060"
  },
  {
    "text": "there are two there are two phases of the scheduling so when we try to",
    "start": "171060",
    "end": "177040"
  },
  {
    "text": "schedule a pod the scheduler takes all the nodes in the cluster and passes into passing it",
    "start": "177040",
    "end": "187060"
  },
  {
    "text": "through two sets of functions first of the functions is called predicates and second phase of the second phase is",
    "start": "187060",
    "end": "193750"
  },
  {
    "text": "called priorities predicates are",
    "start": "193750",
    "end": "199350"
  },
  {
    "text": "responsible for figuring out which nodes are feasible at also like on which nodes",
    "start": "199350",
    "end": "205510"
  },
  {
    "text": "the pod can run at also like which ones we want to just discard and do not care",
    "start": "205510",
    "end": "210640"
  },
  {
    "text": "about in the future processing while the",
    "start": "210640",
    "end": "216130"
  },
  {
    "text": "priority face is just scoring the nodes",
    "start": "216130",
    "end": "221200"
  },
  {
    "text": "with some like just assign some scores to nodes after which the scheduler can",
    "start": "221200",
    "end": "227110"
  },
  {
    "text": "just pick the note with the highest score or like on randomly one of the the nodes of the highest course and add the",
    "start": "227110",
    "end": "234400"
  },
  {
    "text": "the port and then put the porter so when",
    "start": "234400",
    "end": "246030"
  },
  {
    "text": "like both of these displaces this priority predicates base and priority phase consists of a number of",
    "start": "246030",
    "end": "252410"
  },
  {
    "text": "function so there's a number of predicate functions each of them computed independently and if any of",
    "start": "252410",
    "end": "258140"
  },
  {
    "text": "those predicate functions fail forgiven now this note will not be processed any anymore on the other hand like there's",
    "start": "258140",
    "end": "265850"
  },
  {
    "text": "also the list of priority functions which is also computed for every node from the output of integrate functions",
    "start": "265850",
    "end": "273530"
  },
  {
    "text": "predicates that we just assign this course and after all of those functions",
    "start": "273530",
    "end": "279500"
  },
  {
    "text": "put their score for this node this course are combined in a way that voltic",
    "start": "279500",
    "end": "285710"
  },
  {
    "text": "will be telling later to figure out the final score of a node which is kind of",
    "start": "285710",
    "end": "291260"
  },
  {
    "text": "in her like infer from all the scores from the single functions and priority",
    "start": "291260",
    "end": "296600"
  },
  {
    "text": "functions from like how you can",
    "start": "296600",
    "end": "301880"
  },
  {
    "text": "influence the output first thing first way you can do it is to actually specify",
    "start": "301880",
    "end": "307070"
  },
  {
    "text": "what kind of predicate and priority functions your scheduler should use you can do it when during the scheduled",
    "start": "307070",
    "end": "312530"
  },
  {
    "text": "start up you can just specify which functions which player predicate functions the the scheduler will compute",
    "start": "312530",
    "end": "318830"
  },
  {
    "text": "in the predicate face and which functions it will use the Orient and other and the function that it will use",
    "start": "318830",
    "end": "326030"
  },
  {
    "text": "during the priorities files but this is what you do during the cluster setup and",
    "start": "326030",
    "end": "332840"
  },
  {
    "text": "schedules can start up other way you can influence it is to use the features that were moved to do better in 1.6 which",
    "start": "332840",
    "end": "344600"
  },
  {
    "text": "will which we will just go through right now I will speak about predicates and",
    "start": "344600",
    "end": "350630"
  },
  {
    "text": "vertical speed speak about priorities",
    "start": "350630",
    "end": "355210"
  },
  {
    "text": "let's start with with the predicates functions and I want to begin with the",
    "start": "355660",
    "end": "361010"
  },
  {
    "text": "very very simple and basic kind of predicates that you actually do not need",
    "start": "361010",
    "end": "366590"
  },
  {
    "text": "to specify anything to use them which kind of protect your cluster from doing",
    "start": "366590",
    "end": "372380"
  },
  {
    "text": "like bad things for example over commit notes when the predicate is called pod",
    "start": "372380",
    "end": "381470"
  },
  {
    "text": "feeds resources and it does exactly as it what it promises it checks if resource requirements of the part can be",
    "start": "381470",
    "end": "388880"
  },
  {
    "text": "met on a given note and by this I mean that like as most of you hopefully now",
    "start": "388880",
    "end": "397480"
  },
  {
    "text": "resource requirements for the part I split into two to five to two classes",
    "start": "397480",
    "end": "403400"
  },
  {
    "text": "right first it's like pots sorry resource requests and the second one",
    "start": "403400",
    "end": "408560"
  },
  {
    "text": "since resource limits scheduler do not care about resource limits at all like",
    "start": "408560",
    "end": "413900"
  },
  {
    "text": "this is something for cubelet to use schedule occurs only about resource requests and it pays what what it does",
    "start": "413900",
    "end": "422660"
  },
  {
    "text": "is basically subtracts all the requested resources of the run the pot running on",
    "start": "422660",
    "end": "428630"
  },
  {
    "text": "the nodes from the node capacity and checks if the what's left is enough to fill full request of the pot that's",
    "start": "428630",
    "end": "435050"
  },
  {
    "text": "being scheduled by resources I currently",
    "start": "435050",
    "end": "440600"
  },
  {
    "text": "mean CPU memory and GPUs that are like predefined kubernetes resources but",
    "start": "440600",
    "end": "445670"
  },
  {
    "text": "there are more to come in the future probably so that was the very simple and",
    "start": "445670",
    "end": "453650"
  },
  {
    "text": "very basic predicate that will always be computed unless you disable in for some",
    "start": "453650",
    "end": "458840"
  },
  {
    "text": "reason but you shouldn't now I'm going to tell you about those features that we",
    "start": "458840",
    "end": "464420"
  },
  {
    "text": "added in in 1.6 the first use case I want to talk about is Kevin prevention",
    "start": "464420",
    "end": "472730"
  },
  {
    "text": "of CO scheduling so imagine you have two kinds of pots like the dog pots and card pots right like you'd probably don't",
    "start": "472730",
    "end": "480890"
  },
  {
    "text": "want to schedule card pot and a dog pot on a single note like because we all know what happens when you put a dark",
    "start": "480890",
    "end": "487340"
  },
  {
    "text": "cat and a dog in a small container right like this usually ends badly even",
    "start": "487340",
    "end": "493850"
  },
  {
    "text": "without this feature you can kind of deal with it for example you can specify",
    "start": "493850",
    "end": "499640"
  },
  {
    "text": "resource requests for cat and dog pots so that they won't fit on a single note but then you will the utilization of",
    "start": "499640",
    "end": "505670"
  },
  {
    "text": "your cluster will job because like you just need just like to just prevent them to be scheduled on the same note so",
    "start": "505670",
    "end": "515000"
  },
  {
    "text": "instead you can use pot ante affinity that a partner spoke in your keynote but I will explain",
    "start": "515000",
    "end": "522870"
  },
  {
    "text": "it in a bit more more detail when you define patanti affinity you specify two",
    "start": "522870",
    "end": "530400"
  },
  {
    "text": "things topologically and the label selector at the pelagic is something",
    "start": "530400",
    "end": "535710"
  },
  {
    "text": "that relates to note and label state or something to today's two pots and it works in a following way",
    "start": "535710",
    "end": "543030"
  },
  {
    "text": "imagine that you have a cluster with nine nine notes and on those note those",
    "start": "543030",
    "end": "549870"
  },
  {
    "text": "notes have labels like corresponds to colors for example the left-hand side notes have label color and value red",
    "start": "549870",
    "end": "558980"
  },
  {
    "text": "middle ones have like value it was yellow and right one self-evaluations green the the way the topologically",
    "start": "558980",
    "end": "569550"
  },
  {
    "text": "works is you define like it and if you use the topological or it will cause the",
    "start": "569550",
    "end": "575550"
  },
  {
    "text": "grouping of the nodes into this color group so I could have a red group the",
    "start": "575550",
    "end": "580560"
  },
  {
    "text": "yellow group and the green group of nodes this is what topologically does to",
    "start": "580560",
    "end": "586350"
  },
  {
    "text": "check if the pot kind of needs the proton affinity predicate you do the",
    "start": "586350",
    "end": "595620"
  },
  {
    "text": "following for for that group you take all the pots running on all the notes on this group so for example you take all",
    "start": "595620",
    "end": "601110"
  },
  {
    "text": "the pots running on the red nodes and check if any of those pots like match",
    "start": "601110",
    "end": "609690"
  },
  {
    "text": "the label selector which is the second part of the pot on TNT definition right there is no card pod running on any of",
    "start": "609690",
    "end": "617670"
  },
  {
    "text": "those nodes which means like their notes all of those nodes are fine right like you can schedule the dog pot on on any",
    "start": "617670",
    "end": "623670"
  },
  {
    "text": "of those those nodes on the other hand like there is just one but still there",
    "start": "623670",
    "end": "630300"
  },
  {
    "text": "is a pot the carpet running on one of the yellow nodes which means mmm you",
    "start": "630300",
    "end": "636030"
  },
  {
    "text": "can't schedule the dog pot of any on the yellow node like the same goes for for",
    "start": "636030",
    "end": "641100"
  },
  {
    "text": "for for the green ones right so this is the the semantics of the pot anti",
    "start": "641100",
    "end": "647400"
  },
  {
    "text": "affinity and also affinity which also seconds but like as you probably imagine",
    "start": "647400",
    "end": "656890"
  },
  {
    "text": "is pretty computed computer usually expensive to compute all of those so we",
    "start": "656890",
    "end": "662320"
  },
  {
    "text": "actually in 1.6 we limited the topological to be used to hostname which",
    "start": "662320",
    "end": "668620"
  },
  {
    "text": "basically makes a group of a single node the groups of single nodes zone and the",
    "start": "668620",
    "end": "674500"
  },
  {
    "text": "region which also should be self-explanatory so you can prevent scheduling of the segments of the pot on",
    "start": "674500",
    "end": "680470"
  },
  {
    "text": "the in the same region as some other pots are running for example and if you",
    "start": "680470",
    "end": "685930"
  },
  {
    "text": "just put the this kind of put on the affinity in your dog pot then we won't",
    "start": "685930",
    "end": "692650"
  },
  {
    "text": "be able to schedule of any on the on the nodes when card pot is running there's",
    "start": "692650",
    "end": "698440"
  },
  {
    "text": "also the opposite feature that it's kind of probably easy to figure out by now",
    "start": "698440",
    "end": "703540"
  },
  {
    "text": "which is pot affinity which forces call scheduling of pots so like imagine you",
    "start": "703540",
    "end": "708700"
  },
  {
    "text": "have a sapling pot and a watering can pot and you probably want them to run together like the examples maybe there's",
    "start": "708700",
    "end": "714580"
  },
  {
    "text": "like a just you need a lot of network throughput between those two the pot you probably want to put them as closest",
    "start": "714580",
    "end": "721000"
  },
  {
    "text": "today I must to itself as as possible hopefully in the same note so you could",
    "start": "721000",
    "end": "729370"
  },
  {
    "text": "all of course you can also hack around it without this feature like whatever put in a single pot which you shouldn't do cuz I did break the whole of",
    "start": "729370",
    "end": "735250"
  },
  {
    "text": "microservice idea but the was able to do",
    "start": "735250",
    "end": "740620"
  },
  {
    "text": "it before that right now it's pretty simple what you need to do is just define the pot affinity which is exactly",
    "start": "740620",
    "end": "746380"
  },
  {
    "text": "the same as put entire Finiti except that this there's no untoward in the definition with the semantics that is",
    "start": "746380",
    "end": "756070"
  },
  {
    "text": "pretty easy to figure out basically just reverses the logic like we discard the",
    "start": "756070",
    "end": "761740"
  },
  {
    "text": "notes from the groups that do not have any of the post matching the selector",
    "start": "761740",
    "end": "766960"
  },
  {
    "text": "running and we keep the notes from the groups that do have pots or the given",
    "start": "766960",
    "end": "773380"
  },
  {
    "text": "sector running all right so this put root should be pretty pretty straightforward",
    "start": "773380",
    "end": "780300"
  },
  {
    "start": "780000",
    "end": "1042000"
  },
  {
    "text": "the another example like we use case I",
    "start": "782050",
    "end": "787970"
  },
  {
    "text": "wanted to show you is right the situation in which you want to create a",
    "start": "787970",
    "end": "795769"
  },
  {
    "text": "dedicated set of notes for some users to use and prevent all other users from using it like what you was able to do",
    "start": "795769",
    "end": "802910"
  },
  {
    "text": "before that before one point six you could just force the users you don't",
    "start": "802910",
    "end": "809119"
  },
  {
    "text": "want to use those knows to use some labels note selector that won't match",
    "start": "809119",
    "end": "815689"
  },
  {
    "text": "did some set of office some set of notes and will be running in everywhere else but in one point six we are the detained",
    "start": "815689",
    "end": "822139"
  },
  {
    "text": "switch upon also told about we tell you to do it in a way better but way better",
    "start": "822139",
    "end": "829220"
  },
  {
    "text": "way the example I have here is that you have a user the black user which ones",
    "start": "829220",
    "end": "835269"
  },
  {
    "text": "serving pots that that is a blue pot and you have a red user which runs like a",
    "start": "835269",
    "end": "841249"
  },
  {
    "text": "huge bad job I did you just wants to start like infinite number of some small",
    "start": "841249",
    "end": "846829"
  },
  {
    "text": "pots just to compute something what can happen of course is that like the red",
    "start": "846829",
    "end": "852740"
  },
  {
    "text": "user will just schedule all his pots everywhere and just saturate the cluster so there will be no space for the black",
    "start": "852740",
    "end": "860029"
  },
  {
    "text": "user to schedule his serving pot which is usually bad because we care about serving pots right when you use paint",
    "start": "860029",
    "end": "869139"
  },
  {
    "text": "which is basically this slide you specify like you can add attained to a",
    "start": "869139",
    "end": "876019"
  },
  {
    "text": "note and the Tate says scheduler do not schedule anything on this note unless it",
    "start": "876019",
    "end": "884029"
  },
  {
    "text": "has a matching toleration so like this note will be unavailable for the users",
    "start": "884029",
    "end": "890509"
  },
  {
    "text": "who can't add distillation to to their pots what does it mean the matching",
    "start": "890509",
    "end": "898309"
  },
  {
    "text": "toleration for the paints have like ten techno schedules should be",
    "start": "898309",
    "end": "904309"
  },
  {
    "text": "self-explanatory about his key key and value which either identifies the K the taint and toleration has like four",
    "start": "904309",
    "end": "913610"
  },
  {
    "text": "things the key value and operator which defines which stains they match and the effect which",
    "start": "913610",
    "end": "919490"
  },
  {
    "text": "should match these things as well so the operator is either equal or exist if the",
    "start": "919490",
    "end": "924770"
  },
  {
    "text": "operators equal which is default then both key and value of the thing needs to",
    "start": "924770",
    "end": "930770"
  },
  {
    "text": "match what is written in toleration and when it exists only the key matter so",
    "start": "930770",
    "end": "938450"
  },
  {
    "text": "like it means that we only care about",
    "start": "938450",
    "end": "944290"
  },
  {
    "text": "existing of at another given key so like we do not check that the value of the",
    "start": "944290",
    "end": "949310"
  },
  {
    "text": "value apart also if you if I recall correctly if you do not put taint there",
    "start": "949310",
    "end": "955600"
  },
  {
    "text": "it is treated as a wild-card so with just much all the time so it would be a toleration that matches everything so",
    "start": "955600",
    "end": "963560"
  },
  {
    "text": "once you do that like you kind of take out the blue node from from the cluster",
    "start": "963560",
    "end": "970000"
  },
  {
    "text": "from the retinal red users perspective so we won't be able to schedule those two pods that are an example but the",
    "start": "970000",
    "end": "977870"
  },
  {
    "text": "thing so that the black user will have always have space to schedule his serving job and will be happy the red",
    "start": "977870",
    "end": "984290"
  },
  {
    "text": "user won't won't be happy on the other hand but like if there's not really enough resources in a cluster to satisfy",
    "start": "984290",
    "end": "989660"
  },
  {
    "text": "everyone someone will end up being unhappy right like you can't do anything",
    "start": "989660",
    "end": "995000"
  },
  {
    "text": "about it okay so that's the futures the",
    "start": "995000",
    "end": "1000340"
  },
  {
    "text": "predicates I wanted to talk you about to quickly wrap up it was like how the how",
    "start": "1000340",
    "end": "1007230"
  },
  {
    "text": "predicates help you to prevent overcome it of the nodes which is like the basic",
    "start": "1007230",
    "end": "1012340"
  },
  {
    "text": "ones that is always applied how you can use plaintiff we need to prevent call",
    "start": "1012340",
    "end": "1017740"
  },
  {
    "text": "scheduling how you can use pot affinity to force cross scheduling of thoughts and how you can use taint scintillations",
    "start": "1017740",
    "end": "1023740"
  },
  {
    "text": "to create a dedicated nodes for some set of your users and right now I want to",
    "start": "1023740",
    "end": "1032270"
  },
  {
    "text": "leave you with Wojtek who'll tell you more about priorities thank you okay so",
    "start": "1032270",
    "end": "1044270"
  },
  {
    "start": "1042000",
    "end": "1071000"
  },
  {
    "text": "with the predator we've predicates already applied we already filter out all the notes that we actually can't",
    "start": "1044270",
    "end": "1050330"
  },
  {
    "text": "schedule our part but still the group of remaining notes can be pretty large so how we can actually choose this one note",
    "start": "1050330",
    "end": "1058070"
  },
  {
    "text": "on which our pods should be scheduled um and this is basically where priorities come into play so I will start with like",
    "start": "1058070",
    "end": "1064220"
  },
  {
    "text": "describing the most important ones I thought we don't have time to describe all of them but I think that it should",
    "start": "1064220",
    "end": "1069860"
  },
  {
    "text": "be fine so the first one is actually connected to the amount of resources",
    "start": "1069860",
    "end": "1075320"
  },
  {
    "start": "1071000",
    "end": "1220000"
  },
  {
    "text": "available on the notes so after applying predicates we know that there is enough",
    "start": "1075320",
    "end": "1081650"
  },
  {
    "text": "space on on the note but which one is actually the best one so the policy that",
    "start": "1081650",
    "end": "1087200"
  },
  {
    "text": "we are that we chose here is basically that we would like to spread the amount",
    "start": "1087200",
    "end": "1092840"
  },
  {
    "text": "of resources requested by pots as evenly as possible across notes so technically",
    "start": "1092840",
    "end": "1099320"
  },
  {
    "text": "actually we are the priority function works on ratio of requested resources by",
    "start": "1099320",
    "end": "1105320"
  },
  {
    "text": "my resources requested by paul potts running on a note to denote capacity to",
    "start": "1105320",
    "end": "1110420"
  },
  {
    "text": "make it work if there are notes with different sizes in the cluster but for simplicity let's assume that all notes",
    "start": "1110420",
    "end": "1116810"
  },
  {
    "text": "are equal and then like this function basically means that the more available resources are on a note that better the",
    "start": "1116810",
    "end": "1123410"
  },
  {
    "text": "note is but actually like is it really the best Felisa so so it seems",
    "start": "1123410",
    "end": "1129170"
  },
  {
    "text": "roughly reasonable if the cluster is like has predefined size and like and",
    "start": "1129170",
    "end": "1135350"
  },
  {
    "text": "stuff like that but if we are running person for example in the cloud and you have cloud autoscaler then having an",
    "start": "1135350",
    "end": "1141380"
  },
  {
    "text": "empty note means that we can basically remove it and and like reduce our the",
    "start": "1141380",
    "end": "1148820"
  },
  {
    "text": "cost of the underlying infrastructure so so that sounds like something that we",
    "start": "1148820",
    "end": "1155420"
  },
  {
    "text": "would like to have and because of that like we created this opposite priority function which which basically prefers",
    "start": "1155420",
    "end": "1163970"
  },
  {
    "text": "nodes that are rather like that Kenz that can handle our pot like have enough spare resources",
    "start": "1163970",
    "end": "1171240"
  },
  {
    "text": "but like are more fooled and others and with that we buy with that function we",
    "start": "1171240",
    "end": "1177090"
  },
  {
    "text": "are basically trying to make the notes that have some pots already running on",
    "start": "1177090",
    "end": "1182190"
  },
  {
    "text": "them full before scheduling anything to some empty pots empty notes sorry and",
    "start": "1182190",
    "end": "1187730"
  },
  {
    "text": "obviously like those two priority functions conflict with each other so we can't use both of them at the same time",
    "start": "1187730",
    "end": "1194929"
  },
  {
    "text": "by default we are using the previous one which is like worst fit but like an",
    "start": "1194929",
    "end": "1200010"
  },
  {
    "text": "important feature of scheduler which mark briefly mentioned before is that scheduler is configurable so you can",
    "start": "1200010",
    "end": "1206880"
  },
  {
    "text": "configure it so that like it will use this one function when starting a",
    "start": "1206880",
    "end": "1213419"
  },
  {
    "text": "scheduler you can configure it like so that it will use this one instead of the previous one okay so another priority",
    "start": "1213419",
    "end": "1221760"
  },
  {
    "start": "1220000",
    "end": "1674000"
  },
  {
    "text": "function is is about spreading so imagine that you have a deployment or replication controller running and",
    "start": "1221760",
    "end": "1228470"
  },
  {
    "text": "instances of a pod so obviously you are running those and instances for some",
    "start": "1228470",
    "end": "1234690"
  },
  {
    "text": "reason and you most probably don't want a bunch of them to be running on the same note because if the note fails then",
    "start": "1234690",
    "end": "1242429"
  },
  {
    "text": "you will lose all of those replicas at the same time but like fault tolerance",
    "start": "1242429",
    "end": "1248250"
  },
  {
    "text": "is just one reason of not wanting to have them on the same note so the other",
    "start": "1248250",
    "end": "1253769"
  },
  {
    "text": "reason can be that user spikes of all",
    "start": "1253769",
    "end": "1259260"
  },
  {
    "text": "those pots can can be correlated and like we do they would be spiking at the same time so selector spreading priority",
    "start": "1259260",
    "end": "1268440"
  },
  {
    "text": "function is supposed to solve this problem so basically the more pods",
    "start": "1268440",
    "end": "1274049"
  },
  {
    "text": "coming from it from the same deployment service replication controller or something are running on on a given note",
    "start": "1274049",
    "end": "1280980"
  },
  {
    "text": "the lowers the lower score this this this note will get okay so those two 5",
    "start": "1280980",
    "end": "1288539"
  },
  {
    "text": "so now we are going to a slightly different group of priorities like the ones that I briefly described like",
    "start": "1288539",
    "end": "1295230"
  },
  {
    "text": "before are just working out of the box for every part but starting from now we have we will",
    "start": "1295230",
    "end": "1303120"
  },
  {
    "text": "have some functions that a pod can define some preference where it would",
    "start": "1303120",
    "end": "1308820"
  },
  {
    "text": "like to run and this did its preference will affect scores of the nodes so the",
    "start": "1308820",
    "end": "1316080"
  },
  {
    "text": "first example of such function is know the affinity where pod can specify a",
    "start": "1316080",
    "end": "1321930"
  },
  {
    "text": "selector for nodes in on which it would prefer to run if it doesn't specify any",
    "start": "1321930",
    "end": "1328530"
  },
  {
    "text": "selector then all the nodes will be scored exactly with exactly the same score according to this priority",
    "start": "1328530",
    "end": "1334110"
  },
  {
    "text": "function so in the example from the slide the pod specifies that it would",
    "start": "1334110",
    "end": "1340530"
  },
  {
    "text": "like to run on green on it on a node with a green color and as a result like both green nodes are getting the highest",
    "start": "1340530",
    "end": "1347700"
  },
  {
    "text": "possible score and and all other nodes are getting like the lowest for this particular priority function so the next",
    "start": "1347700",
    "end": "1356580"
  },
  {
    "text": "one is pod affinity which is basically a sibling prayer priority function - to",
    "start": "1356580",
    "end": "1362430"
  },
  {
    "text": "the predicate that predicate that Marc described earlier so what we would like to achieve is that we would like to",
    "start": "1362430",
    "end": "1367910"
  },
  {
    "text": "recall - - to ensure to ensure that our",
    "start": "1367910",
    "end": "1375240"
  },
  {
    "text": "pod is co-located with as many pots selected specified by the preference",
    "start": "1375240",
    "end": "1381630"
  },
  {
    "text": "selector as possible and like similarly as with predicate the collocation doesn't necessarily mean collocation",
    "start": "1381630",
    "end": "1387960"
  },
  {
    "text": "within the same note it this collocation within some group of nodes which can be node itself but it can be like rock or",
    "start": "1387960",
    "end": "1394920"
  },
  {
    "text": "zone or region or something like that and the example from this slide we our",
    "start": "1394920",
    "end": "1401430"
  },
  {
    "text": "pod would like to be co-located with with green with green with as many green pots as possible within the same within",
    "start": "1401430",
    "end": "1411240"
  },
  {
    "text": "the notes of the same color and as a result like the yellow nodes are getting",
    "start": "1411240",
    "end": "1418350"
  },
  {
    "text": "the highest score because there are like two green pods all together there and the red node for example is getting the",
    "start": "1418350",
    "end": "1424560"
  },
  {
    "text": "lowest possible score because there are no green pods there yes",
    "start": "1424560",
    "end": "1430920"
  },
  {
    "text": "so also similarly as we switch predicates we have untie affinity here",
    "start": "1430920",
    "end": "1436890"
  },
  {
    "text": "which were where we would like to our pot - - to be collocated with as few",
    "start": "1436890",
    "end": "1446640"
  },
  {
    "text": "pots specified by it's like ante preference selector as possible within the same group of nodes so maybe to give",
    "start": "1446640",
    "end": "1453480"
  },
  {
    "text": "you an excel more Morial or real-life ish example of this so imagine that you",
    "start": "1453480",
    "end": "1459900"
  },
  {
    "text": "have you are you would like to schedule an end instances of a pod running a database and on one case you'd like have",
    "start": "1459900",
    "end": "1467430"
  },
  {
    "text": "them to be spread across no drugs or there for fault tolerance but on the",
    "start": "1467430",
    "end": "1473250"
  },
  {
    "text": "other hand you would like to have a database as close to any to it to any",
    "start": "1473250",
    "end": "1478350"
  },
  {
    "text": "application back-end you are running as possible for to reduce latency for communication with it and to achieve it",
    "start": "1478350",
    "end": "1485550"
  },
  {
    "text": "you can for example specify the ante preference selector what I call it too",
    "start": "1485550",
    "end": "1491010"
  },
  {
    "text": "much exactly those posts running this database and set for the instagrams for example the grouping - Iraq and then",
    "start": "1491010",
    "end": "1498570"
  },
  {
    "text": "what you will get is that those pots do those database pots will be spread",
    "start": "1498570",
    "end": "1504120"
  },
  {
    "text": "across racks and why we can't use predicates for that is basically because",
    "start": "1504120",
    "end": "1509310"
  },
  {
    "text": "if the number of instances of the pot are is pretty big then we still want to",
    "start": "1509310",
    "end": "1515580"
  },
  {
    "text": "allow scheduling all of them and potentially running more of them within the same rack",
    "start": "1515580",
    "end": "1520920"
  },
  {
    "text": "whereas with predicates you are pretty much allowed to run one instances within",
    "start": "1520920",
    "end": "1526980"
  },
  {
    "text": "the same group of nodes so so that so that's the example where we can't",
    "start": "1526980",
    "end": "1532050"
  },
  {
    "text": "actually use use predicates also getting",
    "start": "1532050",
    "end": "1538830"
  },
  {
    "text": "back to example from the slide like similarly as we've predicates here like we the red node is getting the highest",
    "start": "1538830",
    "end": "1547200"
  },
  {
    "text": "possible score because there are no blue pots and like for example the green nodes are getting the lowest possible",
    "start": "1547200",
    "end": "1552420"
  },
  {
    "text": "score because there are two to the pods and we are not similarly as with",
    "start": "1552420",
    "end": "1557640"
  },
  {
    "text": "predicates we are not differentiating groups from the SE notes from the same group",
    "start": "1557640",
    "end": "1564830"
  },
  {
    "text": "okay so now now we we have a few more priority functions but unfortunately we",
    "start": "1564960",
    "end": "1571779"
  },
  {
    "text": "don't have enough time to go over all of them but for now like we already have",
    "start": "1571779",
    "end": "1577450"
  },
  {
    "text": "some number of scores for each note and we somehow would like to combine them to",
    "start": "1577450",
    "end": "1584139"
  },
  {
    "text": "get the final score of the of the of the note and to to clarify like the",
    "start": "1584139",
    "end": "1590109"
  },
  {
    "text": "technique the technical detail of it is that priority function is supposed to return an integer from zero to ten which",
    "start": "1590109",
    "end": "1597489"
  },
  {
    "text": "I will be kind of using later and the question is like how to combine those",
    "start": "1597489",
    "end": "1602830"
  },
  {
    "text": "those those numbers for a single note to get one number the final score of a note",
    "start": "1602830",
    "end": "1608320"
  },
  {
    "text": "and what we are doing here is basically we are just taking some linear",
    "start": "1608320",
    "end": "1613779"
  },
  {
    "text": "combination of those scores with appropriate waves so where those waves",
    "start": "1613779",
    "end": "1619480"
  },
  {
    "text": "are actually coming from so when when you are defining when you are running a",
    "start": "1619480",
    "end": "1624789"
  },
  {
    "text": "scheduler and we are defining a priority function you are also supposed to assign",
    "start": "1624789",
    "end": "1630789"
  },
  {
    "text": "a wave to this priority function and it can be like arbitrary integer and the",
    "start": "1630789",
    "end": "1637090"
  },
  {
    "text": "the reasoning behind this integer is to reflect how important this priority",
    "start": "1637090",
    "end": "1642850"
  },
  {
    "text": "function actually is and those waves are exactly does that we are using here when",
    "start": "1642850",
    "end": "1648549"
  },
  {
    "text": "by computing this linear combination of of those scores from individual priority",
    "start": "1648549",
    "end": "1654970"
  },
  {
    "text": "functions so once we have those the the",
    "start": "1654970",
    "end": "1660669"
  },
  {
    "text": "final score for each node we are simply just choosing the node with the highest score and if there if there are Morgan",
    "start": "1660669",
    "end": "1666879"
  },
  {
    "text": "then one with the same highest score then we are semi randomly choosing one",
    "start": "1666879",
    "end": "1672820"
  },
  {
    "text": "of them okay so as you may probably",
    "start": "1672820",
    "end": "1679119"
  },
  {
    "start": "1674000",
    "end": "1742000"
  },
  {
    "text": "expect there are some dangers in using priorities and this scheme so first of all like you can't really rely on those",
    "start": "1679119",
    "end": "1686289"
  },
  {
    "text": "priorities so if even if you specify for",
    "start": "1686289",
    "end": "1692080"
  },
  {
    "text": "example note affinity and there is a space there are notes where you are allowed to run this",
    "start": "1692080",
    "end": "1698410"
  },
  {
    "text": "there are enough space on dimmers and stuff like that there still can can potentially be scheduled somewhere else",
    "start": "1698410",
    "end": "1704980"
  },
  {
    "text": "because like for example scores for both affinity or or spreading or something",
    "start": "1704980",
    "end": "1711400"
  },
  {
    "text": "are significantly lower for those notes than for for other notes that are not",
    "start": "1711400",
    "end": "1716470"
  },
  {
    "text": "matching the the note of in note affinity selector and ii like think that",
    "start": "1716470",
    "end": "1722740"
  },
  {
    "text": "is also important here is that if you are if you for example slightly change",
    "start": "1722740",
    "end": "1727900"
  },
  {
    "text": "the waves of your pretty you have your priority functions or just change the",
    "start": "1727900",
    "end": "1734490"
  },
  {
    "text": "other new priority functions you will basically we might get a completely different different binding and yes so",
    "start": "1734490",
    "end": "1744850"
  },
  {
    "text": "maybe some of you know we this is like a scheme that different that is different",
    "start": "1744850",
    "end": "1752260"
  },
  {
    "text": "than what we are using internally in park in google and what we are doing in embark is that basically we are ordering",
    "start": "1752260",
    "end": "1759610"
  },
  {
    "text": "our priorities in some linear order and we are using the next prior desk next",
    "start": "1759610",
    "end": "1764950"
  },
  {
    "text": "function just to break the ties from coming from the previous one and so to",
    "start": "1764950",
    "end": "1770110"
  },
  {
    "text": "clarify what we are doing is that we are computing the scores from the first priority function leaving notes on you",
    "start": "1770110",
    "end": "1777220"
  },
  {
    "text": "have the highest score from that function and like for those computing the second discourse for second priority",
    "start": "1777220",
    "end": "1783070"
  },
  {
    "text": "function again like living on the notes with highest score and so on and this is much more predictable in terms of like",
    "start": "1783070",
    "end": "1791070"
  },
  {
    "text": "what which note will be finally chosen so why we actually didn't choose the",
    "start": "1791070",
    "end": "1796270"
  },
  {
    "text": "same skin here in kubernetes and the answer is that basically this kind of",
    "start": "1796270",
    "end": "1802840"
  },
  {
    "text": "decision tree like ish behavior we can also achieve from from this from the",
    "start": "1802840",
    "end": "1808809"
  },
  {
    "text": "skin we have in kubernetes by just like specifying appropriate waves of priority functions so if you specify the wave of",
    "start": "1808809",
    "end": "1816610"
  },
  {
    "text": "one to the least important priority function 10 for the next one and hundred the third one and so on you will get",
    "start": "1816610",
    "end": "1823000"
  },
  {
    "text": "exactly this behavior so it's possible to simulate so to summarize about",
    "start": "1823000",
    "end": "1829840"
  },
  {
    "start": "1828000",
    "end": "1843000"
  },
  {
    "text": "priorities like this is very powerful mekinese but to",
    "start": "1829840",
    "end": "1834999"
  },
  {
    "text": "avoid surprises you need to really understand it and and use them very carefully yes so the feature that the",
    "start": "1834999",
    "end": "1846999"
  },
  {
    "start": "1843000",
    "end": "1883000"
  },
  {
    "text": "the state of kubernetes as of 1.6 like as Aparna and Mark already mentioned",
    "start": "1846999",
    "end": "1852940"
  },
  {
    "text": "like we have just moved to beta in 1.6 a bunch of features including node affinity",
    "start": "1852940",
    "end": "1858549"
  },
  {
    "text": "both affinity and ante affinity tines and tolerance one more feature that we also moved to just move to beta that was",
    "start": "1858549",
    "end": "1865629"
  },
  {
    "text": "worth this worth mentioning ass multi scheduler support which basically if you",
    "start": "1865629",
    "end": "1870730"
  },
  {
    "text": "have multiple different schedulers in your kubernetes cluster allows your pot to specify which which exact scheduler",
    "start": "1870730",
    "end": "1878950"
  },
  {
    "text": "is responsible for schedule in this pot a note about our future plans I think",
    "start": "1878950",
    "end": "1886480"
  },
  {
    "start": "1883000",
    "end": "1998000"
  },
  {
    "text": "that like the the most important thing from the scheduling perspective and the",
    "start": "1886480",
    "end": "1892090"
  },
  {
    "text": "thing that a bunch of people are asking about and waiting for is the mechanism for priority and preemption that will",
    "start": "1892090",
    "end": "1898389"
  },
  {
    "text": "basically enable you to specify which pots are more important and which parts are less important and it's in even case",
    "start": "1898389",
    "end": "1905980"
  },
  {
    "text": "if the clusters for example too small and there is enough not enough space for all of them enable those more important",
    "start": "1905980",
    "end": "1914769"
  },
  {
    "text": "pots to preempt the less important ones and another feature that is slightly",
    "start": "1914769",
    "end": "1922629"
  },
  {
    "text": "related to it it's like reschedule err that will be responsible for improving",
    "start": "1922629",
    "end": "1928059"
  },
  {
    "text": "the cluster state that is degrading over time so to clarify like even though the",
    "start": "1928059",
    "end": "1934960"
  },
  {
    "text": "scheduling decision might be optimal and at the moment when it was done like because of like the churn in the cluster",
    "start": "1934960",
    "end": "1941830"
  },
  {
    "text": "and pods new pots are coming and some pots are being deleted it can no longer",
    "start": "1941830",
    "end": "1947230"
  },
  {
    "text": "be optimal after like five minutes or something like that so the scheduler will be able to for example will be",
    "start": "1947230",
    "end": "1953230"
  },
  {
    "text": "responsible for example to to improve the state of the cluster over time and",
    "start": "1953230",
    "end": "1959320"
  },
  {
    "text": "for example improve spreading of pots that will be possible later",
    "start": "1959320",
    "end": "1964670"
  },
  {
    "text": "and the last one and those both - I we hope that we will be able to at least",
    "start": "1964670",
    "end": "1970160"
  },
  {
    "text": "have some initial versions in 2017 there is one more thing which is resource",
    "start": "1970160",
    "end": "1976730"
  },
  {
    "text": "estimation which which which will basically means that it will be",
    "start": "1976730",
    "end": "1981950"
  },
  {
    "text": "estimating how many resources your pots will be using and I'm not sure if it's",
    "start": "1981950",
    "end": "1988880"
  },
  {
    "text": "like we will be able to deliver it when one in 2017 but that's Atlee that that's",
    "start": "1988880",
    "end": "1994610"
  },
  {
    "text": "definitely something that we would like to do at some point okay so that's",
    "start": "1994610",
    "end": "2000460"
  },
  {
    "start": "1998000",
    "end": "2047000"
  },
  {
    "text": "mostly what we had for today so we encourage anyone who is interested in in",
    "start": "2000460",
    "end": "2006400"
  },
  {
    "text": "in scheduling to join the community scheduling community there is like",
    "start": "2006400",
    "end": "2011680"
  },
  {
    "text": "speche the scheduling special interest group that is like meeting meeting bi-weekly there is like slack channel",
    "start": "2011680",
    "end": "2019120"
  },
  {
    "text": "for strictly scheduling related questions there is the mailing group so if you",
    "start": "2019120",
    "end": "2026440"
  },
  {
    "text": "have any questions you can use those or you can also if you have the closed",
    "start": "2026440",
    "end": "2032020"
  },
  {
    "text": "questions now you can ask and catch any of our any of us - we will try to like",
    "start": "2032020",
    "end": "2040510"
  },
  {
    "text": "answer them okay thank you",
    "start": "2040510",
    "end": "2045000"
  }
]