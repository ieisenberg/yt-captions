[
  {
    "text": "hey everyone i'm donovan brown",
    "start": "1439",
    "end": "4080"
  },
  {
    "text": "and i'm jessica dean today we're going",
    "start": "4080",
    "end": "5680"
  },
  {
    "text": "to be talking about how to make writing",
    "start": "5680",
    "end": "7359"
  },
  {
    "text": "microservices easier with an open source",
    "start": "7359",
    "end": "9679"
  },
  {
    "text": "project called dapper",
    "start": "9679",
    "end": "11440"
  },
  {
    "text": "we will start by covering the landscape",
    "start": "11440",
    "end": "13759"
  },
  {
    "text": "of microservice development and how to",
    "start": "13759",
    "end": "15599"
  },
  {
    "text": "get started",
    "start": "15599",
    "end": "16800"
  },
  {
    "text": "then we will show how to extend an",
    "start": "16800",
    "end": "18960"
  },
  {
    "text": "application by adding additional",
    "start": "18960",
    "end": "20800"
  },
  {
    "text": "functionality",
    "start": "20800",
    "end": "22480"
  },
  {
    "text": "finally we will cover how to debug and",
    "start": "22480",
    "end": "24560"
  },
  {
    "text": "deploy your adapterize apps all while",
    "start": "24560",
    "end": "26800"
  },
  {
    "text": "employing devops best practices thanks",
    "start": "26800",
    "end": "29439"
  },
  {
    "text": "jessica don't worry jessica will be back",
    "start": "29439",
    "end": "32160"
  },
  {
    "text": "later but now let's talk about the",
    "start": "32160",
    "end": "34239"
  },
  {
    "text": "landscape of development",
    "start": "34239",
    "end": "36160"
  },
  {
    "text": "no matter what industry we are in",
    "start": "36160",
    "end": "38640"
  },
  {
    "text": "writing software has common patterns we",
    "start": "38640",
    "end": "41360"
  },
  {
    "text": "reduce costs by only using the resources",
    "start": "41360",
    "end": "43760"
  },
  {
    "text": "we need and scaling out when additional",
    "start": "43760",
    "end": "46160"
  },
  {
    "text": "resources are required",
    "start": "46160",
    "end": "48079"
  },
  {
    "text": "applications are being broken down into",
    "start": "48079",
    "end": "49760"
  },
  {
    "text": "units of functionality each exposed as a",
    "start": "49760",
    "end": "52559"
  },
  {
    "text": "service",
    "start": "52559",
    "end": "53760"
  },
  {
    "text": "we want to focus on adding business",
    "start": "53760",
    "end": "55440"
  },
  {
    "text": "value and not managing infrastructure so",
    "start": "55440",
    "end": "58320"
  },
  {
    "text": "we leverage serverless platforms and use",
    "start": "58320",
    "end": "60640"
  },
  {
    "text": "devops best practices",
    "start": "60640",
    "end": "62640"
  },
  {
    "text": "and the number of programming languages",
    "start": "62640",
    "end": "64559"
  },
  {
    "text": "seems to never stop growing and we",
    "start": "64559",
    "end": "66960"
  },
  {
    "text": "should use the best language for the",
    "start": "66960",
    "end": "68720"
  },
  {
    "text": "task at hand",
    "start": "68720",
    "end": "70400"
  },
  {
    "text": "on the surface microservice development",
    "start": "70400",
    "end": "72799"
  },
  {
    "text": "seems simple it is a micro or small",
    "start": "72799",
    "end": "75840"
  },
  {
    "text": "service not a giant scary monolith",
    "start": "75840",
    "end": "79200"
  },
  {
    "text": "however",
    "start": "79200",
    "end": "80159"
  },
  {
    "text": "there are limited tools and run times to",
    "start": "80159",
    "end": "82640"
  },
  {
    "text": "support distributed development in many",
    "start": "82640",
    "end": "85280"
  },
  {
    "text": "of the frameworks are tightly coupled to",
    "start": "85280",
    "end": "87520"
  },
  {
    "text": "a language or development stack",
    "start": "87520",
    "end": "90159"
  },
  {
    "text": "a typical microservice application might",
    "start": "90159",
    "end": "92560"
  },
  {
    "text": "look like this",
    "start": "92560",
    "end": "94079"
  },
  {
    "text": "several small purpose-built services all",
    "start": "94079",
    "end": "97439"
  },
  {
    "text": "talking to each other",
    "start": "97439",
    "end": "99119"
  },
  {
    "text": "some of the services also talk to",
    "start": "99119",
    "end": "101119"
  },
  {
    "text": "external resources to store state or",
    "start": "101119",
    "end": "104079"
  },
  {
    "text": "ingest events",
    "start": "104079",
    "end": "105840"
  },
  {
    "text": "getting an application like this up and",
    "start": "105840",
    "end": "107280"
  },
  {
    "text": "running",
    "start": "107280",
    "end": "108240"
  },
  {
    "text": "and keeping it running has proven to be",
    "start": "108240",
    "end": "110560"
  },
  {
    "text": "challenging",
    "start": "110560",
    "end": "112000"
  },
  {
    "text": "to address these challenges the cloud",
    "start": "112000",
    "end": "113920"
  },
  {
    "text": "native community has developed dapper",
    "start": "113920",
    "end": "116640"
  },
  {
    "text": "which is a set of building blocks to",
    "start": "116640",
    "end": "118880"
  },
  {
    "text": "ease distributed application development",
    "start": "118880",
    "end": "121840"
  },
  {
    "text": "the goals are to take years of best",
    "start": "121840",
    "end": "124000"
  },
  {
    "text": "practices and experience and make them",
    "start": "124000",
    "end": "126240"
  },
  {
    "text": "easy to use from any language and on any",
    "start": "126240",
    "end": "129280"
  },
  {
    "text": "stack",
    "start": "129280",
    "end": "130239"
  },
  {
    "text": "it is driven by standards and provides a",
    "start": "130239",
    "end": "132400"
  },
  {
    "text": "consistent",
    "start": "132400",
    "end": "133520"
  },
  {
    "text": "portable and open api that can be",
    "start": "133520",
    "end": "136160"
  },
  {
    "text": "extended and used on any cloud and on",
    "start": "136160",
    "end": "139680"
  },
  {
    "text": "the edge",
    "start": "139680",
    "end": "141280"
  },
  {
    "text": "dapper is community driven and",
    "start": "141280",
    "end": "143599"
  },
  {
    "text": "completely vendor neutral",
    "start": "143599",
    "end": "146560"
  },
  {
    "text": "at its core dapper is a set of building",
    "start": "146560",
    "end": "149040"
  },
  {
    "text": "blocks including service to service",
    "start": "149040",
    "end": "151519"
  },
  {
    "text": "invocation state management pub sub",
    "start": "151519",
    "end": "155200"
  },
  {
    "text": "bindings and secrets management with",
    "start": "155200",
    "end": "157920"
  },
  {
    "text": "support for the actor model and",
    "start": "157920",
    "end": "159599"
  },
  {
    "text": "observability out of the box",
    "start": "159599",
    "end": "162000"
  },
  {
    "text": "we can use as much or as little as we",
    "start": "162000",
    "end": "164879"
  },
  {
    "text": "like",
    "start": "164879",
    "end": "166000"
  },
  {
    "text": "if we have already solved service to",
    "start": "166000",
    "end": "168080"
  },
  {
    "text": "service invocation but need help with",
    "start": "168080",
    "end": "170480"
  },
  {
    "text": "state management we can just use the",
    "start": "170480",
    "end": "173040"
  },
  {
    "text": "state management building block",
    "start": "173040",
    "end": "175200"
  },
  {
    "text": "or if we are starting from nothing",
    "start": "175200",
    "end": "177840"
  },
  {
    "text": "we can use it all allowing us to focus",
    "start": "177840",
    "end": "180400"
  },
  {
    "text": "on adding business value",
    "start": "180400",
    "end": "183120"
  },
  {
    "text": "any language that can send a http or",
    "start": "183120",
    "end": "186159"
  },
  {
    "text": "grpc request can use these building",
    "start": "186159",
    "end": "188879"
  },
  {
    "text": "blocks",
    "start": "188879",
    "end": "189920"
  },
  {
    "text": "not only can applications that leverage",
    "start": "189920",
    "end": "191760"
  },
  {
    "text": "dapper use any language they can be run",
    "start": "191760",
    "end": "194640"
  },
  {
    "text": "on any infrastructure",
    "start": "194640",
    "end": "197360"
  },
  {
    "text": "dapper is implemented using a common",
    "start": "197360",
    "end": "199680"
  },
  {
    "text": "sidecar pattern where a second process",
    "start": "199680",
    "end": "202720"
  },
  {
    "text": "runs alongside your main application",
    "start": "202720",
    "end": "205920"
  },
  {
    "text": "the main application uses http or grpc",
    "start": "205920",
    "end": "209360"
  },
  {
    "text": "requests to call into the dapper sidecar",
    "start": "209360",
    "end": "212159"
  },
  {
    "text": "to take advantage of the desired",
    "start": "212159",
    "end": "213840"
  },
  {
    "text": "building blocks",
    "start": "213840",
    "end": "215280"
  },
  {
    "text": "here's an example application with two",
    "start": "215280",
    "end": "217280"
  },
  {
    "text": "services a and b",
    "start": "217280",
    "end": "219760"
  },
  {
    "text": "notice each of them also has a dapper",
    "start": "219760",
    "end": "222640"
  },
  {
    "text": "sidecar",
    "start": "222640",
    "end": "224080"
  },
  {
    "text": "when service a wants to call service b",
    "start": "224080",
    "end": "227040"
  },
  {
    "text": "dapper does all the arduous work of",
    "start": "227040",
    "end": "229680"
  },
  {
    "text": "discovering where service b is",
    "start": "229680",
    "end": "232080"
  },
  {
    "text": "and securing communication between the",
    "start": "232080",
    "end": "234080"
  },
  {
    "text": "services",
    "start": "234080",
    "end": "235519"
  },
  {
    "text": "this slide also shows the plugability of",
    "start": "235519",
    "end": "237920"
  },
  {
    "text": "the component model without having to",
    "start": "237920",
    "end": "240080"
  },
  {
    "text": "change our code we can change where our",
    "start": "240080",
    "end": "242720"
  },
  {
    "text": "state and secrets are stored where",
    "start": "242720",
    "end": "244879"
  },
  {
    "text": "events are published and even where our",
    "start": "244879",
    "end": "247120"
  },
  {
    "text": "telemetry is sent",
    "start": "247120",
    "end": "249360"
  },
  {
    "text": "when developing locally we can use a",
    "start": "249360",
    "end": "251519"
  },
  {
    "text": "redis container then switch to a",
    "start": "251519",
    "end": "253680"
  },
  {
    "text": "different backing service when we move",
    "start": "253680",
    "end": "255680"
  },
  {
    "text": "to the cloud",
    "start": "255680",
    "end": "257199"
  },
  {
    "text": "the components are the magic behind",
    "start": "257199",
    "end": "259359"
  },
  {
    "text": "dapper",
    "start": "259359",
    "end": "260400"
  },
  {
    "text": "switching from redis to cosmos db or",
    "start": "260400",
    "end": "263120"
  },
  {
    "text": "from rabbitmq to azure service bus",
    "start": "263120",
    "end": "266000"
  },
  {
    "text": "requires no code changes",
    "start": "266000",
    "end": "268400"
  },
  {
    "text": "we just update our configuration and our",
    "start": "268400",
    "end": "270720"
  },
  {
    "text": "code stays the same",
    "start": "270720",
    "end": "273040"
  },
  {
    "text": "if we do not see a component we need",
    "start": "273040",
    "end": "275120"
  },
  {
    "text": "they are all open source and we can add",
    "start": "275120",
    "end": "277600"
  },
  {
    "text": "whatever we need by submitting a pull",
    "start": "277600",
    "end": "279759"
  },
  {
    "text": "request",
    "start": "279759",
    "end": "281120"
  },
  {
    "text": "at this point let's focus on the",
    "start": "281120",
    "end": "283199"
  },
  {
    "text": "different building blocks and",
    "start": "283199",
    "end": "284720"
  },
  {
    "text": "demonstrate how to use them",
    "start": "284720",
    "end": "287040"
  },
  {
    "text": "let's begin with service to service",
    "start": "287040",
    "end": "289199"
  },
  {
    "text": "invocation",
    "start": "289199",
    "end": "290560"
  },
  {
    "text": "that lets one service call another",
    "start": "290560",
    "end": "293600"
  },
  {
    "text": "when one service wants to call another",
    "start": "293600",
    "end": "295360"
  },
  {
    "text": "service it must know its address",
    "start": "295360",
    "end": "297840"
  },
  {
    "text": "port and the number of instances that",
    "start": "297840",
    "end": "300000"
  },
  {
    "text": "are running",
    "start": "300000",
    "end": "301120"
  },
  {
    "text": "the service could be running anywhere",
    "start": "301120",
    "end": "303520"
  },
  {
    "text": "dapper takes care of locating and",
    "start": "303520",
    "end": "305680"
  },
  {
    "text": "securely calling the service",
    "start": "305680",
    "end": "308000"
  },
  {
    "text": "with a post request we can ask dapper to",
    "start": "308000",
    "end": "310479"
  },
  {
    "text": "invoke the new order method on service a",
    "start": "310479",
    "end": "313680"
  },
  {
    "text": "and dapper takes care of the rest",
    "start": "313680",
    "end": "316560"
  },
  {
    "text": "observability gives us tracing across",
    "start": "316560",
    "end": "319280"
  },
  {
    "text": "all the services in our application",
    "start": "319280",
    "end": "321680"
  },
  {
    "text": "with dapper we can configure where we",
    "start": "321680",
    "end": "323680"
  },
  {
    "text": "want our telemetry sent",
    "start": "323680",
    "end": "325759"
  },
  {
    "text": "this slide shows the same information",
    "start": "325759",
    "end": "328160"
  },
  {
    "text": "visualized from application insights and",
    "start": "328160",
    "end": "330639"
  },
  {
    "text": "zipkin",
    "start": "330639",
    "end": "331919"
  },
  {
    "text": "as a developer we don't have to write",
    "start": "331919",
    "end": "333680"
  },
  {
    "text": "any special code by running our",
    "start": "333680",
    "end": "335919"
  },
  {
    "text": "application with dapper we get this for",
    "start": "335919",
    "end": "338240"
  },
  {
    "text": "free",
    "start": "338240",
    "end": "339440"
  },
  {
    "text": "what i'd like to do now is a demo to",
    "start": "339440",
    "end": "342000"
  },
  {
    "text": "show you how to get started with dapper",
    "start": "342000",
    "end": "344240"
  },
  {
    "text": "people told me do not do a net demo when",
    "start": "344240",
    "end": "347360"
  },
  {
    "text": "i asked why they said you have to use an",
    "start": "347360",
    "end": "349440"
  },
  {
    "text": "open source language that works on mac",
    "start": "349440",
    "end": "351440"
  },
  {
    "text": "os windows and linux okay got it open",
    "start": "351440",
    "end": "354720"
  },
  {
    "text": "source works on mac os windows and linux",
    "start": "354720",
    "end": "357280"
  },
  {
    "text": "so i decided to do a dot net demo for",
    "start": "357280",
    "end": "360160"
  },
  {
    "text": "those of you that don't know",
    "start": "360160",
    "end": "361759"
  },
  {
    "text": "net is fully open source and works",
    "start": "361759",
    "end": "363520"
  },
  {
    "text": "perfectly on mac os windows and linux",
    "start": "363520",
    "end": "366240"
  },
  {
    "text": "let's go",
    "start": "366240",
    "end": "367360"
  },
  {
    "text": "first i want to show you the docs site",
    "start": "367360",
    "end": "369759"
  },
  {
    "text": "at docs.dapper.io",
    "start": "369759",
    "end": "372000"
  },
  {
    "text": "so you know how to get started",
    "start": "372000",
    "end": "374000"
  },
  {
    "text": "simply click getting started and then",
    "start": "374000",
    "end": "376479"
  },
  {
    "text": "click install the dappercli",
    "start": "376479",
    "end": "379039"
  },
  {
    "text": "this page will show you instructions for",
    "start": "379039",
    "end": "381039"
  },
  {
    "text": "installing on mac os windows and linux",
    "start": "381039",
    "end": "384319"
  },
  {
    "text": "now that you know how to get started",
    "start": "384319",
    "end": "385919"
  },
  {
    "text": "let's see some code",
    "start": "385919",
    "end": "387600"
  },
  {
    "text": "i'm going to switch over to visual",
    "start": "387600",
    "end": "389120"
  },
  {
    "text": "studio code where i'm inside an empty",
    "start": "389120",
    "end": "391440"
  },
  {
    "text": "folder",
    "start": "391440",
    "end": "392400"
  },
  {
    "text": "to get started we're going to create a",
    "start": "392400",
    "end": "394240"
  },
  {
    "text": "new web api using the.net new command",
    "start": "394240",
    "end": "397520"
  },
  {
    "text": "what's cool is we can dapperize an",
    "start": "397520",
    "end": "399680"
  },
  {
    "text": "application without changing a single",
    "start": "399680",
    "end": "401919"
  },
  {
    "text": "line of code",
    "start": "401919",
    "end": "403919"
  },
  {
    "text": "we can start to use dapper immediately",
    "start": "403919",
    "end": "406160"
  },
  {
    "text": "by running our application with dapper",
    "start": "406160",
    "end": "409039"
  },
  {
    "text": "with this command we are giving the",
    "start": "409039",
    "end": "410880"
  },
  {
    "text": "service a name",
    "start": "410880",
    "end": "412240"
  },
  {
    "text": "telling dapper what port the app runs on",
    "start": "412240",
    "end": "414880"
  },
  {
    "text": "what port we want to access dapper on",
    "start": "414880",
    "end": "417520"
  },
  {
    "text": "and how to start our application",
    "start": "417520",
    "end": "420240"
  },
  {
    "text": "dapper will build and start our",
    "start": "420240",
    "end": "421759"
  },
  {
    "text": "application and then launch the sidecar",
    "start": "421759",
    "end": "424479"
  },
  {
    "text": "and wire everything up",
    "start": "424479",
    "end": "426560"
  },
  {
    "text": "switching to a web browser we can still",
    "start": "426560",
    "end": "428800"
  },
  {
    "text": "access the application on port 5000 this",
    "start": "428800",
    "end": "432080"
  },
  {
    "text": "allows us to incrementally adopt dapper",
    "start": "432080",
    "end": "435280"
  },
  {
    "text": "because all existing clients can still",
    "start": "435280",
    "end": "437360"
  },
  {
    "text": "access the application on its original",
    "start": "437360",
    "end": "439599"
  },
  {
    "text": "port",
    "start": "439599",
    "end": "440800"
  },
  {
    "text": "the real power starts when we have a",
    "start": "440800",
    "end": "442960"
  },
  {
    "text": "client that uses dapper to access the",
    "start": "442960",
    "end": "445199"
  },
  {
    "text": "service",
    "start": "445199",
    "end": "446400"
  },
  {
    "text": "if we access the service via dapper the",
    "start": "446400",
    "end": "449360"
  },
  {
    "text": "results are the same but notice we are",
    "start": "449360",
    "end": "452160"
  },
  {
    "text": "now using dapper on port 3500. this will",
    "start": "452160",
    "end": "455280"
  },
  {
    "text": "never change even if we change the",
    "start": "455280",
    "end": "457360"
  },
  {
    "text": "address of the backing service or the",
    "start": "457360",
    "end": "459120"
  },
  {
    "text": "number of instances",
    "start": "459120",
    "end": "460880"
  },
  {
    "text": "this is saying hey dapper we need you to",
    "start": "460880",
    "end": "463199"
  },
  {
    "text": "do something for us we don't know the",
    "start": "463199",
    "end": "465120"
  },
  {
    "text": "address of the other application we",
    "start": "465120",
    "end": "466960"
  },
  {
    "text": "don't know where it is on the network we",
    "start": "466960",
    "end": "468879"
  },
  {
    "text": "don't even know how many instances there",
    "start": "468879",
    "end": "470720"
  },
  {
    "text": "are",
    "start": "470720",
    "end": "471440"
  },
  {
    "text": "but we know its name is my app and we",
    "start": "471440",
    "end": "474400"
  },
  {
    "text": "need you to go invoke the weather",
    "start": "474400",
    "end": "476160"
  },
  {
    "text": "forecast method",
    "start": "476160",
    "end": "477599"
  },
  {
    "text": "dapper locates my app and securely calls",
    "start": "477599",
    "end": "480560"
  },
  {
    "text": "the weather forecast method for us but",
    "start": "480560",
    "end": "483039"
  },
  {
    "text": "wait there's more because we're using",
    "start": "483039",
    "end": "485440"
  },
  {
    "text": "dapper we are getting observability for",
    "start": "485440",
    "end": "487840"
  },
  {
    "text": "free",
    "start": "487840",
    "end": "489039"
  },
  {
    "text": "switching over to zipkin we can query",
    "start": "489039",
    "end": "491440"
  },
  {
    "text": "all the telemetry dapper was",
    "start": "491440",
    "end": "493039"
  },
  {
    "text": "automatically collecting for us",
    "start": "493039",
    "end": "495520"
  },
  {
    "text": "we can see when calls were made how long",
    "start": "495520",
    "end": "497840"
  },
  {
    "text": "they took and what services were",
    "start": "497840",
    "end": "499680"
  },
  {
    "text": "involved we can drill in and see",
    "start": "499680",
    "end": "501919"
  },
  {
    "text": "detailed information",
    "start": "501919",
    "end": "503599"
  },
  {
    "text": "without dapper we would have to write",
    "start": "503599",
    "end": "505599"
  },
  {
    "text": "code to get this information this",
    "start": "505599",
    "end": "507680"
  },
  {
    "text": "information is invaluable when you need",
    "start": "507680",
    "end": "509680"
  },
  {
    "text": "to debug a problem and we get it for",
    "start": "509680",
    "end": "512240"
  },
  {
    "text": "free by just running our application",
    "start": "512240",
    "end": "514399"
  },
  {
    "text": "with dapper",
    "start": "514399",
    "end": "515680"
  },
  {
    "text": "now i'm going to stop the application",
    "start": "515680",
    "end": "517279"
  },
  {
    "text": "and return to the slides to discuss more",
    "start": "517279",
    "end": "519360"
  },
  {
    "text": "building blocks",
    "start": "519360",
    "end": "521120"
  },
  {
    "text": "next let's examine state management",
    "start": "521120",
    "end": "523839"
  },
  {
    "text": "which allows us to create long-running",
    "start": "523839",
    "end": "525920"
  },
  {
    "text": "stateful applications with a post",
    "start": "525920",
    "end": "528160"
  },
  {
    "text": "request we can store a key value pair",
    "start": "528160",
    "end": "530560"
  },
  {
    "text": "into any state store",
    "start": "530560",
    "end": "532399"
  },
  {
    "text": "to retrieve the value we use a get",
    "start": "532399",
    "end": "534480"
  },
  {
    "text": "request with the key",
    "start": "534480",
    "end": "536560"
  },
  {
    "text": "because the components are pluggable we",
    "start": "536560",
    "end": "538800"
  },
  {
    "text": "can switch from redis to cosmos db",
    "start": "538800",
    "end": "541360"
  },
  {
    "text": "without changing our code",
    "start": "541360",
    "end": "543839"
  },
  {
    "text": "to build a scalable distributed system",
    "start": "543839",
    "end": "546720"
  },
  {
    "text": "that reacts to events publish and",
    "start": "546720",
    "end": "548800"
  },
  {
    "text": "subscribe is a powerful way to",
    "start": "548800",
    "end": "550320"
  },
  {
    "text": "accomplish this",
    "start": "550320",
    "end": "551760"
  },
  {
    "text": "dapper supports both publishing events",
    "start": "551760",
    "end": "554080"
  },
  {
    "text": "and subscribing to them",
    "start": "554080",
    "end": "555839"
  },
  {
    "text": "the application does not have to take",
    "start": "555839",
    "end": "557760"
  },
  {
    "text": "any hard dependency on a particular",
    "start": "557760",
    "end": "559920"
  },
  {
    "text": "implementation or sdk",
    "start": "559920",
    "end": "562480"
  },
  {
    "text": "we can swap out redis in this example",
    "start": "562480",
    "end": "564880"
  },
  {
    "text": "for any supported pub sub component",
    "start": "564880",
    "end": "567920"
  },
  {
    "text": "dapper also supports input triggers",
    "start": "567920",
    "end": "570480"
  },
  {
    "text": "which enables our code to be called when",
    "start": "570480",
    "end": "573040"
  },
  {
    "text": "a specific condition is true for example",
    "start": "573040",
    "end": "576240"
  },
  {
    "text": "call our code whenever a tweet is sent",
    "start": "576240",
    "end": "578640"
  },
  {
    "text": "that contains a specific string",
    "start": "578640",
    "end": "581440"
  },
  {
    "text": "output bindings allow our code to write",
    "start": "581440",
    "end": "583680"
  },
  {
    "text": "to external systems without taking any",
    "start": "583680",
    "end": "586080"
  },
  {
    "text": "hard dependencies",
    "start": "586080",
    "end": "588080"
  },
  {
    "text": "finally secrets management gives us a",
    "start": "588080",
    "end": "590800"
  },
  {
    "text": "consistent way to access connection",
    "start": "590800",
    "end": "592959"
  },
  {
    "text": "strings and other sensitive information",
    "start": "592959",
    "end": "595600"
  },
  {
    "text": "now let's return to the code",
    "start": "595600",
    "end": "598880"
  },
  {
    "text": "we are going to pick up right where we",
    "start": "598880",
    "end": "600720"
  },
  {
    "text": "left off and start using some of the",
    "start": "600720",
    "end": "602560"
  },
  {
    "text": "other building blocks to do that we add",
    "start": "602560",
    "end": "605200"
  },
  {
    "text": "the dapper package to our application",
    "start": "605200",
    "end": "607760"
  },
  {
    "text": "this is an optional step as the dapper",
    "start": "607760",
    "end": "610000"
  },
  {
    "text": "functionality can be accessed via the",
    "start": "610000",
    "end": "612000"
  },
  {
    "text": "built-in http client of any language",
    "start": "612000",
    "end": "615519"
  },
  {
    "text": "adding adapter sdk will make using",
    "start": "615519",
    "end": "617680"
  },
  {
    "text": "dapper fill more natural in some",
    "start": "617680",
    "end": "619279"
  },
  {
    "text": "scenarios",
    "start": "619279",
    "end": "620800"
  },
  {
    "text": "we're going to add three lines to the",
    "start": "620800",
    "end": "622920"
  },
  {
    "text": "startup.cs file that will enable",
    "start": "622920",
    "end": "625200"
  },
  {
    "text": "dependency injection and pub sub support",
    "start": "625200",
    "end": "628320"
  },
  {
    "text": "first we add a call to add dapper on",
    "start": "628320",
    "end": "631200"
  },
  {
    "text": "line 29 to enable dependency injection",
    "start": "631200",
    "end": "634240"
  },
  {
    "text": "of the dapper client class into our code",
    "start": "634240",
    "end": "637760"
  },
  {
    "text": "next we instruct our code to use the",
    "start": "637760",
    "end": "640160"
  },
  {
    "text": "cloud event standard which is a",
    "start": "640160",
    "end": "642160"
  },
  {
    "text": "specification for describing event data",
    "start": "642160",
    "end": "645440"
  },
  {
    "text": "this middleware will unwrap requests",
    "start": "645440",
    "end": "648160"
  },
  {
    "text": "that use the cloud event structured",
    "start": "648160",
    "end": "650000"
  },
  {
    "text": "format so receiving methods can read the",
    "start": "650000",
    "end": "652480"
  },
  {
    "text": "event payload directly",
    "start": "652480",
    "end": "654640"
  },
  {
    "text": "the final line of code adds a dapper",
    "start": "654640",
    "end": "657120"
  },
  {
    "text": "subscribe endpoint that allows us to",
    "start": "657120",
    "end": "659360"
  },
  {
    "text": "subscribe to events with attributes",
    "start": "659360",
    "end": "662320"
  },
  {
    "text": "with just three lines of code we have",
    "start": "662320",
    "end": "664800"
  },
  {
    "text": "everything in place to turn this into a",
    "start": "664800",
    "end": "667120"
  },
  {
    "text": "stateful event driven service",
    "start": "667120",
    "end": "669920"
  },
  {
    "text": "let's add some new functionality to this",
    "start": "669920",
    "end": "671839"
  },
  {
    "text": "service using dapper",
    "start": "671839",
    "end": "673600"
  },
  {
    "text": "out of the box this code generates",
    "start": "673600",
    "end": "675680"
  },
  {
    "text": "random weather data in a real app this",
    "start": "675680",
    "end": "678399"
  },
  {
    "text": "data might come from events published",
    "start": "678399",
    "end": "680480"
  },
  {
    "text": "from weather capture systems",
    "start": "680480",
    "end": "682560"
  },
  {
    "text": "so we're going to add code that gets run",
    "start": "682560",
    "end": "685120"
  },
  {
    "text": "for each event and stores the data let's",
    "start": "685120",
    "end": "688240"
  },
  {
    "text": "open the weather forecast controller",
    "start": "688240",
    "end": "690320"
  },
  {
    "text": "class and add a post method to receive",
    "start": "690320",
    "end": "692880"
  },
  {
    "text": "the events",
    "start": "692880",
    "end": "694240"
  },
  {
    "text": "we don't need a special route so we can",
    "start": "694240",
    "end": "696000"
  },
  {
    "text": "delete this code",
    "start": "696000",
    "end": "697680"
  },
  {
    "text": "we're going to accept the original",
    "start": "697680",
    "end": "699519"
  },
  {
    "text": "weather forecast business object and",
    "start": "699519",
    "end": "701360"
  },
  {
    "text": "return it when we're done",
    "start": "701360",
    "end": "703440"
  },
  {
    "text": "to have this code called each time an",
    "start": "703440",
    "end": "705680"
  },
  {
    "text": "event is published we can use the topic",
    "start": "705680",
    "end": "708480"
  },
  {
    "text": "attribute",
    "start": "708480",
    "end": "709680"
  },
  {
    "text": "this tells dapper to watch the component",
    "start": "709680",
    "end": "712000"
  },
  {
    "text": "name pub sub and when events are sent to",
    "start": "712000",
    "end": "714720"
  },
  {
    "text": "the new topic call this code with the",
    "start": "714720",
    "end": "717120"
  },
  {
    "text": "data we get the name pub sub from the",
    "start": "717120",
    "end": "719760"
  },
  {
    "text": "component definition",
    "start": "719760",
    "end": "721680"
  },
  {
    "text": "when we initialize dapper it created a",
    "start": "721680",
    "end": "724160"
  },
  {
    "text": "default pub sub and state store",
    "start": "724160",
    "end": "726079"
  },
  {
    "text": "component let's open the pub sub",
    "start": "726079",
    "end": "728079"
  },
  {
    "text": "component",
    "start": "728079",
    "end": "729200"
  },
  {
    "text": "this component is named pub sub which is",
    "start": "729200",
    "end": "731920"
  },
  {
    "text": "why we used it in the attribute",
    "start": "731920",
    "end": "734079"
  },
  {
    "text": "on line 6 it shows this is configured to",
    "start": "734079",
    "end": "736959"
  },
  {
    "text": "use redis",
    "start": "736959",
    "end": "738639"
  },
  {
    "text": "later we will move our code to the cloud",
    "start": "738639",
    "end": "740800"
  },
  {
    "text": "by defining new components",
    "start": "740800",
    "end": "743200"
  },
  {
    "text": "we also have a component named state",
    "start": "743200",
    "end": "745279"
  },
  {
    "text": "store which we will be using next",
    "start": "745279",
    "end": "748160"
  },
  {
    "text": "let's close these and return to the code",
    "start": "748160",
    "end": "750880"
  },
  {
    "text": "thanks to the call to add dapper in",
    "start": "750880",
    "end": "753160"
  },
  {
    "text": "startup.cs we can use dependency",
    "start": "753160",
    "end": "755839"
  },
  {
    "text": "injection to get a dapper client",
    "start": "755839",
    "end": "758480"
  },
  {
    "text": "with the adapter client we can start",
    "start": "758480",
    "end": "760399"
  },
  {
    "text": "using the building blocks",
    "start": "760399",
    "end": "762560"
  },
  {
    "text": "calling save state async we can store",
    "start": "762560",
    "end": "765200"
  },
  {
    "text": "our weather forecast object in our state",
    "start": "765200",
    "end": "767279"
  },
  {
    "text": "store",
    "start": "767279",
    "end": "768240"
  },
  {
    "text": "the first parameter is the name of the",
    "start": "768240",
    "end": "770240"
  },
  {
    "text": "component",
    "start": "770240",
    "end": "771360"
  },
  {
    "text": "the second parameter is the key and the",
    "start": "771360",
    "end": "773839"
  },
  {
    "text": "final parameter is the data",
    "start": "773839",
    "end": "776160"
  },
  {
    "text": "that is all the code it takes to respond",
    "start": "776160",
    "end": "778399"
  },
  {
    "text": "to an event and store it",
    "start": "778399",
    "end": "781279"
  },
  {
    "text": "instead of returning random data we want",
    "start": "781279",
    "end": "783440"
  },
  {
    "text": "to return the data we just stored in the",
    "start": "783440",
    "end": "785519"
  },
  {
    "text": "state store",
    "start": "785519",
    "end": "786800"
  },
  {
    "text": "to demonstrate incremental adoption of",
    "start": "786800",
    "end": "789120"
  },
  {
    "text": "dapper we will not change the return",
    "start": "789120",
    "end": "791279"
  },
  {
    "text": "type of this method",
    "start": "791279",
    "end": "793279"
  },
  {
    "text": "as we did before we will use dependency",
    "start": "793279",
    "end": "795760"
  },
  {
    "text": "injection to get a dapper client",
    "start": "795760",
    "end": "798320"
  },
  {
    "text": "next we replace the code and return a",
    "start": "798320",
    "end": "801040"
  },
  {
    "text": "list of weather forecast objects from",
    "start": "801040",
    "end": "803200"
  },
  {
    "text": "our state store",
    "start": "803200",
    "end": "804639"
  },
  {
    "text": "to retrieve state we can call get state",
    "start": "804639",
    "end": "807600"
  },
  {
    "text": "async",
    "start": "807600",
    "end": "808800"
  },
  {
    "text": "passing in the component name and key",
    "start": "808800",
    "end": "812959"
  },
  {
    "text": "because this method is not async we",
    "start": "812959",
    "end": "814959"
  },
  {
    "text": "return the result and we're done",
    "start": "814959",
    "end": "817680"
  },
  {
    "text": "we should test the code to make sure it",
    "start": "817680",
    "end": "819279"
  },
  {
    "text": "works as expected so let's set a",
    "start": "819279",
    "end": "821600"
  },
  {
    "text": "breakpoint on lines 40 and 31.",
    "start": "821600",
    "end": "824800"
  },
  {
    "text": "let's generate the assets to build and",
    "start": "824800",
    "end": "827199"
  },
  {
    "text": "debug our code",
    "start": "827199",
    "end": "828959"
  },
  {
    "text": "next we use the dapper extension to take",
    "start": "828959",
    "end": "831680"
  },
  {
    "text": "our launch configuration and start our",
    "start": "831680",
    "end": "833760"
  },
  {
    "text": "dapper side card whenever we press f5 to",
    "start": "833760",
    "end": "836480"
  },
  {
    "text": "debug",
    "start": "836480",
    "end": "838000"
  },
  {
    "text": "we will use the dot net core launch",
    "start": "838000",
    "end": "839839"
  },
  {
    "text": "configuration",
    "start": "839839",
    "end": "841279"
  },
  {
    "text": "let's name our service my app",
    "start": "841279",
    "end": "843839"
  },
  {
    "text": "and we can keep the default port of",
    "start": "843839",
    "end": "845680"
  },
  {
    "text": "5000.",
    "start": "845680",
    "end": "847199"
  },
  {
    "text": "what this did was create a new",
    "start": "847199",
    "end": "849199"
  },
  {
    "text": "configuration based off the dot-net core",
    "start": "849199",
    "end": "851839"
  },
  {
    "text": "launch configuration that can start and",
    "start": "851839",
    "end": "854000"
  },
  {
    "text": "stop dapper for us let's select the new",
    "start": "854000",
    "end": "857120"
  },
  {
    "text": "configuration and look at it",
    "start": "857120",
    "end": "859600"
  },
  {
    "text": "notice this configuration has a",
    "start": "859600",
    "end": "861760"
  },
  {
    "text": "pre-launch task that starts dapper",
    "start": "861760",
    "end": "864639"
  },
  {
    "text": "because our service has no ui we can",
    "start": "864639",
    "end": "866959"
  },
  {
    "text": "remove the lines that start a browser",
    "start": "866959",
    "end": "869600"
  },
  {
    "text": "now we can see there is also a post",
    "start": "869600",
    "end": "871839"
  },
  {
    "text": "debug task that stops dapper for us",
    "start": "871839",
    "end": "874639"
  },
  {
    "text": "let's close this file and press f5 to",
    "start": "874639",
    "end": "876959"
  },
  {
    "text": "start debugging our code",
    "start": "876959",
    "end": "879360"
  },
  {
    "text": "in the terminal the extension is running",
    "start": "879360",
    "end": "881360"
  },
  {
    "text": "commands to start our application and",
    "start": "881360",
    "end": "883680"
  },
  {
    "text": "the side card with the debugger attached",
    "start": "883680",
    "end": "886800"
  },
  {
    "text": "while the code starts let's open an http",
    "start": "886800",
    "end": "889839"
  },
  {
    "text": "file with request we can use to test our",
    "start": "889839",
    "end": "892480"
  },
  {
    "text": "code",
    "start": "892480",
    "end": "893519"
  },
  {
    "text": "the first request uses dapper to post an",
    "start": "893519",
    "end": "896240"
  },
  {
    "text": "event to the new topic of the pub sub",
    "start": "896240",
    "end": "898720"
  },
  {
    "text": "component",
    "start": "898720",
    "end": "899920"
  },
  {
    "text": "sending this request we hit our first",
    "start": "899920",
    "end": "901839"
  },
  {
    "text": "breakpoint",
    "start": "901839",
    "end": "903120"
  },
  {
    "text": "we can have a great f5 experience even",
    "start": "903120",
    "end": "905760"
  },
  {
    "text": "with a dapperized application",
    "start": "905760",
    "end": "908160"
  },
  {
    "text": "let's press f5 to continue and send the",
    "start": "908160",
    "end": "910800"
  },
  {
    "text": "get request to read from the state store",
    "start": "910800",
    "end": "913680"
  },
  {
    "text": "just as before sending the request we",
    "start": "913680",
    "end": "916000"
  },
  {
    "text": "hit our other break point so we can step",
    "start": "916000",
    "end": "918079"
  },
  {
    "text": "through our code",
    "start": "918079",
    "end": "919600"
  },
  {
    "text": "pressing f5 we see the output is the",
    "start": "919600",
    "end": "922000"
  },
  {
    "text": "weather forecast we stored",
    "start": "922000",
    "end": "924639"
  },
  {
    "text": "now that we know that code works let's",
    "start": "924639",
    "end": "926399"
  },
  {
    "text": "stop it and move our code to use",
    "start": "926399",
    "end": "928320"
  },
  {
    "text": "resources in the cloud",
    "start": "928320",
    "end": "930800"
  },
  {
    "text": "because we're using dapper moving from",
    "start": "930800",
    "end": "932880"
  },
  {
    "text": "on-prem to the cloud is as easy as",
    "start": "932880",
    "end": "935040"
  },
  {
    "text": "defining new components",
    "start": "935040",
    "end": "937199"
  },
  {
    "text": "in the azure components folder are",
    "start": "937199",
    "end": "939199"
  },
  {
    "text": "definitions that use azure service bus",
    "start": "939199",
    "end": "941519"
  },
  {
    "text": "for pub sub and azure storage for our",
    "start": "941519",
    "end": "944160"
  },
  {
    "text": "state store",
    "start": "944160",
    "end": "945519"
  },
  {
    "text": "notice the names of the components are",
    "start": "945519",
    "end": "947600"
  },
  {
    "text": "the same as our original components so",
    "start": "947600",
    "end": "950079"
  },
  {
    "text": "our code does not have to change",
    "start": "950079",
    "end": "952160"
  },
  {
    "text": "we just need to tell dapper to use the",
    "start": "952160",
    "end": "954240"
  },
  {
    "text": "components in this folder instead of the",
    "start": "954240",
    "end": "956560"
  },
  {
    "text": "defaults",
    "start": "956560",
    "end": "957920"
  },
  {
    "text": "we do that in the tasks.json file that",
    "start": "957920",
    "end": "960880"
  },
  {
    "text": "was created by the dapper extension",
    "start": "960880",
    "end": "963600"
  },
  {
    "text": "we just add a line that tells dapper to",
    "start": "963600",
    "end": "965519"
  },
  {
    "text": "use the azure components instead with",
    "start": "965519",
    "end": "968240"
  },
  {
    "text": "that change in place we can press f5 to",
    "start": "968240",
    "end": "970720"
  },
  {
    "text": "start debugging",
    "start": "970720",
    "end": "972320"
  },
  {
    "text": "when the code starts this time it will",
    "start": "972320",
    "end": "974480"
  },
  {
    "text": "point at the components in azure",
    "start": "974480",
    "end": "976959"
  },
  {
    "text": "we can use the same http file pointing",
    "start": "976959",
    "end": "979519"
  },
  {
    "text": "at localhost and port 3500 but our",
    "start": "979519",
    "end": "982320"
  },
  {
    "text": "components are now in azure",
    "start": "982320",
    "end": "984800"
  },
  {
    "text": "let's start by running the get request",
    "start": "984800",
    "end": "986800"
  },
  {
    "text": "first",
    "start": "986800",
    "end": "987839"
  },
  {
    "text": "which should return null as we are no",
    "start": "987839",
    "end": "989920"
  },
  {
    "text": "longer pointing at the redis running",
    "start": "989920",
    "end": "991839"
  },
  {
    "text": "locally",
    "start": "991839",
    "end": "993199"
  },
  {
    "text": "sending the request we hit our",
    "start": "993199",
    "end": "994480"
  },
  {
    "text": "breakpoint as before pressing f5 we get",
    "start": "994480",
    "end": "997680"
  },
  {
    "text": "null back as expected",
    "start": "997680",
    "end": "1000480"
  },
  {
    "text": "when we send the post request to publish",
    "start": "1000480",
    "end": "1002480"
  },
  {
    "text": "our event to the new topic",
    "start": "1002480",
    "end": "1004880"
  },
  {
    "text": "our other break point is hit",
    "start": "1004880",
    "end": "1007360"
  },
  {
    "text": "finally let's run the get request again",
    "start": "1007360",
    "end": "1010000"
  },
  {
    "text": "to confirm our weather forecast was",
    "start": "1010000",
    "end": "1011839"
  },
  {
    "text": "saved",
    "start": "1011839",
    "end": "1012880"
  },
  {
    "text": "the weather forecast returned was read",
    "start": "1012880",
    "end": "1015360"
  },
  {
    "text": "from azure storage",
    "start": "1015360",
    "end": "1017920"
  },
  {
    "text": "let's jump over into the azure portal to",
    "start": "1017920",
    "end": "1020240"
  },
  {
    "text": "see the value in our storage account",
    "start": "1020240",
    "end": "1022880"
  },
  {
    "text": "using the storage explorer we can",
    "start": "1022880",
    "end": "1024640"
  },
  {
    "text": "navigate to the weather table and see",
    "start": "1024640",
    "end": "1026720"
  },
  {
    "text": "the item",
    "start": "1026720",
    "end": "1028240"
  },
  {
    "text": "this demo shows how easy dapper makes it",
    "start": "1028240",
    "end": "1030720"
  },
  {
    "text": "to turn any service into a stateful",
    "start": "1030720",
    "end": "1033038"
  },
  {
    "text": "event driven service and move it from",
    "start": "1033039",
    "end": "1035120"
  },
  {
    "text": "your dev machine to the cloud",
    "start": "1035120",
    "end": "1037760"
  },
  {
    "text": "awesome thanks donovan what i want to do",
    "start": "1037760",
    "end": "1040000"
  },
  {
    "text": "now is build on what donovan has shown",
    "start": "1040000",
    "end": "1041678"
  },
  {
    "text": "you i want to switch over to a more real",
    "start": "1041679",
    "end": "1043600"
  },
  {
    "text": "world microservice application and show",
    "start": "1043600",
    "end": "1045760"
  },
  {
    "text": "you how you can continue to take",
    "start": "1045760",
    "end": "1047038"
  },
  {
    "text": "advantage of what dapper gives you out",
    "start": "1047039",
    "end": "1048640"
  },
  {
    "text": "of the box and add another tool to your",
    "start": "1048640",
    "end": "1050880"
  },
  {
    "text": "tool chest to help make developing",
    "start": "1050880",
    "end": "1052559"
  },
  {
    "text": "microservices even easier we have a",
    "start": "1052559",
    "end": "1054960"
  },
  {
    "text": "simple microservice application designed",
    "start": "1054960",
    "end": "1057039"
  },
  {
    "text": "to process and grade the sentiment of",
    "start": "1057039",
    "end": "1058880"
  },
  {
    "text": "tweets there are three main microservice",
    "start": "1058880",
    "end": "1061039"
  },
  {
    "text": "apis you have your twitter handler which",
    "start": "1061039",
    "end": "1063200"
  },
  {
    "text": "we call the provider api your sentiment",
    "start": "1063200",
    "end": "1065440"
  },
  {
    "text": "processor or the processor api and the",
    "start": "1065440",
    "end": "1067919"
  },
  {
    "text": "tweet viewer or the viewer api",
    "start": "1067919",
    "end": "1070240"
  },
  {
    "text": "all three of these components connect to",
    "start": "1070240",
    "end": "1072000"
  },
  {
    "text": "a twitter binding using dapper instead",
    "start": "1072000",
    "end": "1074000"
  },
  {
    "text": "of having to go fetch the twitter sdks",
    "start": "1074000",
    "end": "1075840"
  },
  {
    "text": "or figure out what the twitter api even",
    "start": "1075840",
    "end": "1077840"
  },
  {
    "text": "looks like we also store state inside of",
    "start": "1077840",
    "end": "1080080"
  },
  {
    "text": "azure but you could store it in redis",
    "start": "1080080",
    "end": "1082160"
  },
  {
    "text": "mysql or wherever you prefer",
    "start": "1082160",
    "end": "1084559"
  },
  {
    "text": "we also have pub sub so the data can",
    "start": "1084559",
    "end": "1086400"
  },
  {
    "text": "move freely between our different",
    "start": "1086400",
    "end": "1087840"
  },
  {
    "text": "microservices the best part is dapper",
    "start": "1087840",
    "end": "1091039"
  },
  {
    "text": "simplifies all of this",
    "start": "1091039",
    "end": "1093039"
  },
  {
    "text": "now let's complicate this just a little",
    "start": "1093039",
    "end": "1095840"
  },
  {
    "text": "what happens if you need to debug one",
    "start": "1095840",
    "end": "1097840"
  },
  {
    "text": "microservice in the context of your",
    "start": "1097840",
    "end": "1100000"
  },
  {
    "text": "larger application or in the context of",
    "start": "1100000",
    "end": "1102799"
  },
  {
    "text": "abstracted services running in",
    "start": "1102799",
    "end": "1104480"
  },
  {
    "text": "kubernetes have you ever wished you",
    "start": "1104480",
    "end": "1106480"
  },
  {
    "text": "could just take your computer and put it",
    "start": "1106480",
    "end": "1108960"
  },
  {
    "text": "in the cloud and debug just as you would",
    "start": "1108960",
    "end": "1111200"
  },
  {
    "text": "locally especially if you're only",
    "start": "1111200",
    "end": "1113280"
  },
  {
    "text": "debugging one small part of your app i",
    "start": "1113280",
    "end": "1115919"
  },
  {
    "text": "want to demo something called bridge to",
    "start": "1115919",
    "end": "1117280"
  },
  {
    "text": "kubernetes which is going to let you do",
    "start": "1117280",
    "end": "1119360"
  },
  {
    "text": "exactly that",
    "start": "1119360",
    "end": "1121280"
  },
  {
    "text": "we've all been there we've all made",
    "start": "1121280",
    "end": "1122880"
  },
  {
    "text": "changes that we were 100 confident in",
    "start": "1122880",
    "end": "1125440"
  },
  {
    "text": "we've linted we've tested and all that",
    "start": "1125440",
    "end": "1127919"
  },
  {
    "text": "jazz our local checks passed we commit",
    "start": "1127919",
    "end": "1131440"
  },
  {
    "text": "push and open a pr our pr workflow fire",
    "start": "1131440",
    "end": "1134240"
  },
  {
    "text": "is off and everything is green approvals",
    "start": "1134240",
    "end": "1136880"
  },
  {
    "text": "happen and we hit merge",
    "start": "1136880",
    "end": "1138880"
  },
  {
    "text": "a new workflow fires off and",
    "start": "1138880",
    "end": "1140559"
  },
  {
    "text": "successfully deploys out to a",
    "start": "1140559",
    "end": "1142080"
  },
  {
    "text": "development environment",
    "start": "1142080",
    "end": "1143520"
  },
  {
    "text": "but at some point in the process",
    "start": "1143520",
    "end": "1145600"
  },
  {
    "text": "after we have merged our changes but",
    "start": "1145600",
    "end": "1147520"
  },
  {
    "text": "before those changes deploy to",
    "start": "1147520",
    "end": "1148880"
  },
  {
    "text": "production we noticed something broke oh",
    "start": "1148880",
    "end": "1151919"
  },
  {
    "text": "gosh uh oh did we just merge broken code",
    "start": "1151919",
    "end": "1155200"
  },
  {
    "text": "into our main branch wouldn't it be",
    "start": "1155200",
    "end": "1157120"
  },
  {
    "text": "great if we could visualize our changes",
    "start": "1157120",
    "end": "1159120"
  },
  {
    "text": "prior to merging to main",
    "start": "1159120",
    "end": "1161039"
  },
  {
    "text": "it turns out we can",
    "start": "1161039",
    "end": "1162640"
  },
  {
    "text": "you'll notice i have a pr open and i've",
    "start": "1162640",
    "end": "1164799"
  },
  {
    "text": "utilized a github actions task to add a",
    "start": "1164799",
    "end": "1167120"
  },
  {
    "text": "comment to my pull request",
    "start": "1167120",
    "end": "1168960"
  },
  {
    "text": "between the comment bot and kubernetes i",
    "start": "1168960",
    "end": "1171200"
  },
  {
    "text": "can take advantage of things like",
    "start": "1171200",
    "end": "1172640"
  },
  {
    "text": "role-based access control and namespaces",
    "start": "1172640",
    "end": "1175200"
  },
  {
    "text": "to create an isolated deployment",
    "start": "1175200",
    "end": "1176720"
  },
  {
    "text": "environment for my pull request in my",
    "start": "1176720",
    "end": "1178720"
  },
  {
    "text": "development cluster let's take a look at",
    "start": "1178720",
    "end": "1180720"
  },
  {
    "text": "these changes now",
    "start": "1180720",
    "end": "1183440"
  },
  {
    "text": "uh",
    "start": "1184080",
    "end": "1185120"
  },
  {
    "text": "okay",
    "start": "1185120",
    "end": "1186240"
  },
  {
    "text": "that's odd",
    "start": "1186240",
    "end": "1187600"
  },
  {
    "text": "i'm supposed to see tweets here with",
    "start": "1187600",
    "end": "1189120"
  },
  {
    "text": "sentiment scores",
    "start": "1189120",
    "end": "1191360"
  },
  {
    "text": "going to have to debug this",
    "start": "1191360",
    "end": "1193600"
  },
  {
    "text": "but the problem is i only made a change",
    "start": "1193600",
    "end": "1196160"
  },
  {
    "text": "to a backend api my twitter handler or",
    "start": "1196160",
    "end": "1198720"
  },
  {
    "text": "what i call my provider",
    "start": "1198720",
    "end": "1200559"
  },
  {
    "text": "i'm going to flip over to my preferred",
    "start": "1200559",
    "end": "1201840"
  },
  {
    "text": "editor of choice visual studio code",
    "start": "1201840",
    "end": "1204799"
  },
  {
    "text": "you can see that i already have my",
    "start": "1204799",
    "end": "1206080"
  },
  {
    "text": "provider code up",
    "start": "1206080",
    "end": "1207520"
  },
  {
    "text": "now if i want to debug this locally i",
    "start": "1207520",
    "end": "1209600"
  },
  {
    "text": "know i could stand everything up all",
    "start": "1209600",
    "end": "1211360"
  },
  {
    "text": "three services connect to our state",
    "start": "1211360",
    "end": "1213280"
  },
  {
    "text": "store and pub sub and get everything to",
    "start": "1213280",
    "end": "1215120"
  },
  {
    "text": "work but honestly i don't have time for",
    "start": "1215120",
    "end": "1217600"
  },
  {
    "text": "all that when our pr workflow fired off",
    "start": "1217600",
    "end": "1219600"
  },
  {
    "text": "our app was deployed into a separate",
    "start": "1219600",
    "end": "1221120"
  },
  {
    "text": "dedicated namespace for these changes",
    "start": "1221120",
    "end": "1223200"
  },
  {
    "text": "only this allows me as a developer to",
    "start": "1223200",
    "end": "1225200"
  },
  {
    "text": "use that namespace as a kind of sandbox",
    "start": "1225200",
    "end": "1227919"
  },
  {
    "text": "for my development i'm gonna in essence",
    "start": "1227919",
    "end": "1230640"
  },
  {
    "text": "put my computer in the cloud so i can",
    "start": "1230640",
    "end": "1232720"
  },
  {
    "text": "debug in real time in an isolated",
    "start": "1232720",
    "end": "1234880"
  },
  {
    "text": "fashion now you may be wondering",
    "start": "1234880",
    "end": "1237760"
  },
  {
    "text": "how exactly are you going to do that i",
    "start": "1237760",
    "end": "1240240"
  },
  {
    "text": "am so glad you asked i installed an",
    "start": "1240240",
    "end": "1242720"
  },
  {
    "text": "extension called bridge to kubernetes",
    "start": "1242720",
    "end": "1244640"
  },
  {
    "text": "that allows me to replace the provider",
    "start": "1244640",
    "end": "1246240"
  },
  {
    "text": "code currently running in kubernetes in",
    "start": "1246240",
    "end": "1248480"
  },
  {
    "text": "my private namespace with code on my",
    "start": "1248480",
    "end": "1250640"
  },
  {
    "text": "system best part is i don't have to deal",
    "start": "1250640",
    "end": "1253039"
  },
  {
    "text": "with helm charts or docker files to do",
    "start": "1253039",
    "end": "1254720"
  },
  {
    "text": "it once i have the extension installed",
    "start": "1254720",
    "end": "1256400"
  },
  {
    "text": "on my system it's very simple to use all",
    "start": "1256400",
    "end": "1258960"
  },
  {
    "text": "i have to do is hit command shift p",
    "start": "1258960",
    "end": "1260799"
  },
  {
    "text": "because i'm on a mac but if you're on",
    "start": "1260799",
    "end": "1262400"
  },
  {
    "text": "windows you would hit ctrl shift p and",
    "start": "1262400",
    "end": "1264480"
  },
  {
    "text": "from there search for bridge to",
    "start": "1264480",
    "end": "1266559"
  },
  {
    "text": "kubernetes i'm going to opt to configure",
    "start": "1266559",
    "end": "1269360"
  },
  {
    "text": "now as long as i have access to my",
    "start": "1269360",
    "end": "1271520"
  },
  {
    "text": "kubernetes cluster i'm working in and",
    "start": "1271520",
    "end": "1273360"
  },
  {
    "text": "the namespace i've deployed to this",
    "start": "1273360",
    "end": "1275520"
  },
  {
    "text": "extension is going to connect over to my",
    "start": "1275520",
    "end": "1277679"
  },
  {
    "text": "application currently running in that",
    "start": "1277679",
    "end": "1279679"
  },
  {
    "text": "kubernetes cluster i'm going to choose",
    "start": "1279679",
    "end": "1281919"
  },
  {
    "text": "the service i want to redirect traffic",
    "start": "1281919",
    "end": "1283840"
  },
  {
    "text": "for again this is going to allow me to",
    "start": "1283840",
    "end": "1286000"
  },
  {
    "text": "replace the broken service with code",
    "start": "1286000",
    "end": "1288320"
  },
  {
    "text": "that's living currently on my system so",
    "start": "1288320",
    "end": "1290480"
  },
  {
    "text": "i can debug natively you'll notice we",
    "start": "1290480",
    "end": "1292640"
  },
  {
    "text": "have several different services here",
    "start": "1292640",
    "end": "1294240"
  },
  {
    "text": "that have dash dapper at the end all of",
    "start": "1294240",
    "end": "1296720"
  },
  {
    "text": "these services have a dapper sidecar but",
    "start": "1296720",
    "end": "1298960"
  },
  {
    "text": "i'm still able to debug my individual",
    "start": "1298960",
    "end": "1301039"
  },
  {
    "text": "application with a native f5 experience",
    "start": "1301039",
    "end": "1303600"
  },
  {
    "text": "without interfering with dapper",
    "start": "1303600",
    "end": "1304960"
  },
  {
    "text": "whatsoever i'm going to choose my",
    "start": "1304960",
    "end": "1306640"
  },
  {
    "text": "provider service since that's the one i",
    "start": "1306640",
    "end": "1308400"
  },
  {
    "text": "want to debug and i know my application",
    "start": "1308400",
    "end": "1310640"
  },
  {
    "text": "is listening on port 3001 because i can",
    "start": "1310640",
    "end": "1313679"
  },
  {
    "text": "see that right here on line 12. next i'm",
    "start": "1313679",
    "end": "1316159"
  },
  {
    "text": "going to choose launch program this is",
    "start": "1316159",
    "end": "1318159"
  },
  {
    "text": "going to launch the same configuration",
    "start": "1318159",
    "end": "1319919"
  },
  {
    "text": "that i would use to debug locally but",
    "start": "1319919",
    "end": "1321919"
  },
  {
    "text": "it's going to launch it with an",
    "start": "1321919",
    "end": "1323120"
  },
  {
    "text": "additional task and that additional task",
    "start": "1323120",
    "end": "1325520"
  },
  {
    "text": "will be what connects to my kubernetes",
    "start": "1325520",
    "end": "1327360"
  },
  {
    "text": "cluster i'm going to say that i want to",
    "start": "1327360",
    "end": "1329120"
  },
  {
    "text": "redirect all incoming requests in my",
    "start": "1329120",
    "end": "1331200"
  },
  {
    "text": "machine including those from other",
    "start": "1331200",
    "end": "1332720"
  },
  {
    "text": "developers and the reason why i'm okay",
    "start": "1332720",
    "end": "1334799"
  },
  {
    "text": "with this in this instance is this is my",
    "start": "1334799",
    "end": "1337039"
  },
  {
    "text": "own isolated namespace that i'm working",
    "start": "1337039",
    "end": "1338960"
  },
  {
    "text": "on for my pull request you would never",
    "start": "1338960",
    "end": "1341280"
  },
  {
    "text": "want to redirect code in a production",
    "start": "1341280",
    "end": "1343039"
  },
  {
    "text": "environment or something that could take",
    "start": "1343039",
    "end": "1344720"
  },
  {
    "text": "down whatever you're currently serving",
    "start": "1344720",
    "end": "1346559"
  },
  {
    "text": "to your end users now what that did is",
    "start": "1346559",
    "end": "1348880"
  },
  {
    "text": "update my launch configuration with a",
    "start": "1348880",
    "end": "1350799"
  },
  {
    "text": "new configuration to allow me to debug",
    "start": "1350799",
    "end": "1353280"
  },
  {
    "text": "using kubernetes you saw a similar",
    "start": "1353280",
    "end": "1355520"
  },
  {
    "text": "example of that in donovan's demo where",
    "start": "1355520",
    "end": "1357520"
  },
  {
    "text": "he showed you his launch config with",
    "start": "1357520",
    "end": "1359520"
  },
  {
    "text": "dapper only now i can keep my previous",
    "start": "1359520",
    "end": "1362000"
  },
  {
    "text": "debug configurations and add another for",
    "start": "1362000",
    "end": "1364559"
  },
  {
    "text": "connecting to kubernetes now i can go",
    "start": "1364559",
    "end": "1366720"
  },
  {
    "text": "over to my debugger make sure that my",
    "start": "1366720",
    "end": "1368720"
  },
  {
    "text": "launch program with kubernetes is",
    "start": "1368720",
    "end": "1370240"
  },
  {
    "text": "selected and hit f5 from there the",
    "start": "1370240",
    "end": "1373600"
  },
  {
    "text": "bridge to kubernetes extension is going",
    "start": "1373600",
    "end": "1375280"
  },
  {
    "text": "to do all the magic for me it's going to",
    "start": "1375280",
    "end": "1377360"
  },
  {
    "text": "redirect the service provider dapper to",
    "start": "1377360",
    "end": "1379760"
  },
  {
    "text": "my computer and a better way to",
    "start": "1379760",
    "end": "1381360"
  },
  {
    "text": "visualize this is exactly what i've said",
    "start": "1381360",
    "end": "1383600"
  },
  {
    "text": "several times now i am literally putting",
    "start": "1383600",
    "end": "1385919"
  },
  {
    "text": "my computer right now in that namespace",
    "start": "1385919",
    "end": "1388960"
  },
  {
    "text": "in my kubernetes cluster in the cloud",
    "start": "1388960",
    "end": "1391679"
  },
  {
    "text": "this application as we saw earlier on",
    "start": "1391679",
    "end": "1394080"
  },
  {
    "text": "our slides has dapper components has our",
    "start": "1394080",
    "end": "1396720"
  },
  {
    "text": "viewer api our processor service and our",
    "start": "1396720",
    "end": "1399200"
  },
  {
    "text": "provider which is the only one i need to",
    "start": "1399200",
    "end": "1401280"
  },
  {
    "text": "debug",
    "start": "1401280",
    "end": "1402400"
  },
  {
    "text": "let's set a break point right here on",
    "start": "1402400",
    "end": "1405520"
  },
  {
    "text": "line 66",
    "start": "1405520",
    "end": "1407440"
  },
  {
    "text": "great i'm gonna go ahead and refresh our",
    "start": "1407440",
    "end": "1409039"
  },
  {
    "text": "webpage to force the processor to begin",
    "start": "1409039",
    "end": "1411360"
  },
  {
    "text": "looking for tweets",
    "start": "1411360",
    "end": "1414158"
  },
  {
    "text": "uh oh boy",
    "start": "1414840",
    "end": "1416960"
  },
  {
    "text": "this is awkward",
    "start": "1416960",
    "end": "1418559"
  },
  {
    "text": "demo fail",
    "start": "1418559",
    "end": "1419760"
  },
  {
    "text": "i'm not hitting my break point",
    "start": "1419760",
    "end": "1421520"
  },
  {
    "text": "um",
    "start": "1421520",
    "end": "1423120"
  },
  {
    "text": "you know i'm gonna check zipkin and i'm",
    "start": "1423120",
    "end": "1424799"
  },
  {
    "text": "gonna see if there are any tweets that",
    "start": "1424799",
    "end": "1426159"
  },
  {
    "text": "can be traced",
    "start": "1426159",
    "end": "1428880"
  },
  {
    "text": "nope no dice",
    "start": "1428880",
    "end": "1431360"
  },
  {
    "text": "something else must be wrong",
    "start": "1431360",
    "end": "1433600"
  },
  {
    "text": "let's take a look at the",
    "start": "1433600",
    "end": "1436640"
  },
  {
    "text": "oh gosh turns out i cannot spell i",
    "start": "1437200",
    "end": "1440640"
  },
  {
    "text": "spilled tweets wrong all right i'm gonna",
    "start": "1440640",
    "end": "1442880"
  },
  {
    "text": "fix that i'm going to restart my",
    "start": "1442880",
    "end": "1444880"
  },
  {
    "text": "debugger",
    "start": "1444880",
    "end": "1447440"
  },
  {
    "text": "bam",
    "start": "1447760",
    "end": "1448720"
  },
  {
    "text": "i just hit my break point all right i'm",
    "start": "1448720",
    "end": "1451120"
  },
  {
    "text": "going to go ahead and step through we",
    "start": "1451120",
    "end": "1453039"
  },
  {
    "text": "should see a tweet show up on our viewer",
    "start": "1453039",
    "end": "1455360"
  },
  {
    "text": "awesome",
    "start": "1455360",
    "end": "1456559"
  },
  {
    "text": "and i can see that i even have access to",
    "start": "1456559",
    "end": "1458799"
  },
  {
    "text": "intellisense which means i can see the",
    "start": "1458799",
    "end": "1460799"
  },
  {
    "text": "full body of the request right here in",
    "start": "1460799",
    "end": "1462720"
  },
  {
    "text": "visual studio code just as i would if i",
    "start": "1462720",
    "end": "1464960"
  },
  {
    "text": "were running all of these services",
    "start": "1464960",
    "end": "1466240"
  },
  {
    "text": "locally without kubernetes helm or",
    "start": "1466240",
    "end": "1468400"
  },
  {
    "text": "docker",
    "start": "1468400",
    "end": "1469520"
  },
  {
    "text": "all right i'm going to remove the",
    "start": "1469520",
    "end": "1471039"
  },
  {
    "text": "breakpoint and then i'm going to check",
    "start": "1471039",
    "end": "1472559"
  },
  {
    "text": "zipkin again real quick",
    "start": "1472559",
    "end": "1474880"
  },
  {
    "text": "yup i can now trace the tweets being",
    "start": "1474880",
    "end": "1477200"
  },
  {
    "text": "processed as well",
    "start": "1477200",
    "end": "1478559"
  },
  {
    "text": "by the way thanks to dapper i get this",
    "start": "1478559",
    "end": "1480559"
  },
  {
    "text": "observability and logging through zipkin",
    "start": "1480559",
    "end": "1482559"
  },
  {
    "text": "all for free right out of the box i can",
    "start": "1482559",
    "end": "1484799"
  },
  {
    "text": "track every single one of these tweets",
    "start": "1484799",
    "end": "1486559"
  },
  {
    "text": "from the moment it enters our",
    "start": "1486559",
    "end": "1487840"
  },
  {
    "text": "application to every microservice",
    "start": "1487840",
    "end": "1490000"
  },
  {
    "text": "insider application all the way towards",
    "start": "1490000",
    "end": "1492400"
  },
  {
    "text": "being shown in our viewer i knew",
    "start": "1492400",
    "end": "1494080"
  },
  {
    "text": "something was wrong when zipkin didn't",
    "start": "1494080",
    "end": "1495440"
  },
  {
    "text": "have anything to trace of course not",
    "start": "1495440",
    "end": "1497919"
  },
  {
    "text": "tweets weren't even hitting our provider",
    "start": "1497919",
    "end": "1499600"
  },
  {
    "text": "service which is the beginning of the",
    "start": "1499600",
    "end": "1501200"
  },
  {
    "text": "path that each tweet has to take through",
    "start": "1501200",
    "end": "1503120"
  },
  {
    "text": "our application",
    "start": "1503120",
    "end": "1504480"
  },
  {
    "text": "now thanks to bridge to kubernetes i am",
    "start": "1504480",
    "end": "1506799"
  },
  {
    "text": "100 confident this is going to work",
    "start": "1506799",
    "end": "1509200"
  },
  {
    "text": "let's get this checked in and i'm going",
    "start": "1509200",
    "end": "1510559"
  },
  {
    "text": "to stop my debugger all right i'm going",
    "start": "1510559",
    "end": "1512400"
  },
  {
    "text": "to head on over to github and i'm going",
    "start": "1512400",
    "end": "1513679"
  },
  {
    "text": "to check out to see what's happening",
    "start": "1513679",
    "end": "1515120"
  },
  {
    "text": "with our pull request",
    "start": "1515120",
    "end": "1516720"
  },
  {
    "text": "awesome it started our pull request",
    "start": "1516720",
    "end": "1518480"
  },
  {
    "text": "workflow now while that's running i'm",
    "start": "1518480",
    "end": "1520880"
  },
  {
    "text": "going to take a look at a previously",
    "start": "1520880",
    "end": "1522559"
  },
  {
    "text": "completed pull request so i can see the",
    "start": "1522559",
    "end": "1524559"
  },
  {
    "text": "steps that this workflow is running",
    "start": "1524559",
    "end": "1526400"
  },
  {
    "text": "through",
    "start": "1526400",
    "end": "1527360"
  },
  {
    "text": "you can see that we start with the",
    "start": "1527360",
    "end": "1528720"
  },
  {
    "text": "obvious we check out code from our main",
    "start": "1528720",
    "end": "1530559"
  },
  {
    "text": "branch",
    "start": "1530559",
    "end": "1531679"
  },
  {
    "text": "then we log into azure cli because that",
    "start": "1531679",
    "end": "1533919"
  },
  {
    "text": "happens to be where our components live",
    "start": "1533919",
    "end": "1535840"
  },
  {
    "text": "i have my azure storage my secret shares",
    "start": "1535840",
    "end": "1537919"
  },
  {
    "text": "my service bus and of course my",
    "start": "1537919",
    "end": "1539760"
  },
  {
    "text": "kubernetes cluster i'm making sure that",
    "start": "1539760",
    "end": "1542080"
  },
  {
    "text": "as a part of this pull request it's",
    "start": "1542080",
    "end": "1544000"
  },
  {
    "text": "deploying out our infrastructure using",
    "start": "1544000",
    "end": "1546080"
  },
  {
    "text": "bicycling because after i merge this pr",
    "start": "1546080",
    "end": "1548960"
  },
  {
    "text": "all of that infrastructure is going to",
    "start": "1548960",
    "end": "1550480"
  },
  {
    "text": "get cleaned up and this way i'm not",
    "start": "1550480",
    "end": "1552240"
  },
  {
    "text": "paying for anything i don't need now",
    "start": "1552240",
    "end": "1554159"
  },
  {
    "text": "here's what's also cool it's going to",
    "start": "1554159",
    "end": "1556000"
  },
  {
    "text": "install dapper if it's not already",
    "start": "1556000",
    "end": "1557919"
  },
  {
    "text": "installed and to do this it's using a",
    "start": "1557919",
    "end": "1560159"
  },
  {
    "text": "native github actions setup dapper task",
    "start": "1560159",
    "end": "1563520"
  },
  {
    "text": "next i'm going to build and push that",
    "start": "1563520",
    "end": "1565679"
  },
  {
    "text": "single provider image up i'm not",
    "start": "1565679",
    "end": "1567360"
  },
  {
    "text": "touching any other component or image or",
    "start": "1567360",
    "end": "1570559"
  },
  {
    "text": "anything okay i'm going to generate a",
    "start": "1570559",
    "end": "1572799"
  },
  {
    "text": "valid namespace for use with this pull",
    "start": "1572799",
    "end": "1574880"
  },
  {
    "text": "request this is the name that is i'm",
    "start": "1574880",
    "end": "1577039"
  },
  {
    "text": "going to use for my isolated environment",
    "start": "1577039",
    "end": "1579360"
  },
  {
    "text": "or namespace for me on this development",
    "start": "1579360",
    "end": "1581840"
  },
  {
    "text": "cluster finally notice i can use helm",
    "start": "1581840",
    "end": "1584720"
  },
  {
    "text": "just like i normally would only this",
    "start": "1584720",
    "end": "1586559"
  },
  {
    "text": "time i'm using it to deploy a dapper app",
    "start": "1586559",
    "end": "1589120"
  },
  {
    "text": "i'm going to install this pr using my",
    "start": "1589120",
    "end": "1591039"
  },
  {
    "text": "charts directory and that's going to",
    "start": "1591039",
    "end": "1592640"
  },
  {
    "text": "deploy out any dependencies that it",
    "start": "1592640",
    "end": "1594400"
  },
  {
    "text": "needs but it's only going to update",
    "start": "1594400",
    "end": "1596400"
  },
  {
    "text": "again the service and image for the",
    "start": "1596400",
    "end": "1598720"
  },
  {
    "text": "provider api the last little bit of",
    "start": "1598720",
    "end": "1601279"
  },
  {
    "text": "magic is adding a comment or a dash of",
    "start": "1601279",
    "end": "1603840"
  },
  {
    "text": "confidence as i like to call it to the",
    "start": "1603840",
    "end": "1606080"
  },
  {
    "text": "pr with a link to go view these changes",
    "start": "1606080",
    "end": "1608720"
  },
  {
    "text": "again this saves us from accidentally",
    "start": "1608720",
    "end": "1611039"
  },
  {
    "text": "checking in broken code to our main",
    "start": "1611039",
    "end": "1612799"
  },
  {
    "text": "branch",
    "start": "1612799",
    "end": "1613760"
  },
  {
    "text": "let's flip back over to our pull request",
    "start": "1613760",
    "end": "1615600"
  },
  {
    "text": "and take a look at the conversation",
    "start": "1615600",
    "end": "1618720"
  },
  {
    "text": "yep sure enough i can now see that i",
    "start": "1618720",
    "end": "1620880"
  },
  {
    "text": "have a new comment with the same exact",
    "start": "1620880",
    "end": "1622559"
  },
  {
    "text": "link as earlier i'm going to go ahead",
    "start": "1622559",
    "end": "1624000"
  },
  {
    "text": "and click",
    "start": "1624000",
    "end": "1624840"
  },
  {
    "text": "that fantastic i can see that i have",
    "start": "1624840",
    "end": "1627919"
  },
  {
    "text": "tweets properly coming in now and i'm",
    "start": "1627919",
    "end": "1630159"
  },
  {
    "text": "going to do a quick sanity check and run",
    "start": "1630159",
    "end": "1631840"
  },
  {
    "text": "a query in zipkin",
    "start": "1631840",
    "end": "1634159"
  },
  {
    "text": "perfect everything looks good this is",
    "start": "1634159",
    "end": "1636400"
  },
  {
    "text": "working exactly as expected thanks to",
    "start": "1636400",
    "end": "1638640"
  },
  {
    "text": "bridge to kubernetes and dapper this has",
    "start": "1638640",
    "end": "1640720"
  },
  {
    "text": "made building and debugging",
    "start": "1640720",
    "end": "1642240"
  },
  {
    "text": "microservices so incredibly easy",
    "start": "1642240",
    "end": "1645200"
  },
  {
    "text": "thanks jessica great job",
    "start": "1645200",
    "end": "1647600"
  },
  {
    "text": "the community momentum around dapper is",
    "start": "1647600",
    "end": "1649840"
  },
  {
    "text": "incredible we released 1.0 in february",
    "start": "1649840",
    "end": "1653120"
  },
  {
    "text": "and it was submitted to the cncf in",
    "start": "1653120",
    "end": "1655200"
  },
  {
    "text": "march it is also great to see the",
    "start": "1655200",
    "end": "1657279"
  },
  {
    "text": "support from organizations around the",
    "start": "1657279",
    "end": "1659679"
  },
  {
    "text": "world",
    "start": "1659679",
    "end": "1660640"
  },
  {
    "text": "if you'd like to join the community you",
    "start": "1660640",
    "end": "1662399"
  },
  {
    "text": "can use any of these links you can also",
    "start": "1662399",
    "end": "1664720"
  },
  {
    "text": "follow us on social media and check out",
    "start": "1664720",
    "end": "1667039"
  },
  {
    "text": "the dapper ebook thank you so much for",
    "start": "1667039",
    "end": "1669760"
  },
  {
    "text": "spending this time with us and we hope",
    "start": "1669760",
    "end": "1671520"
  },
  {
    "text": "to see you building incredible cloud",
    "start": "1671520",
    "end": "1673120"
  },
  {
    "text": "native applications with dapper",
    "start": "1673120",
    "end": "1677399"
  }
]