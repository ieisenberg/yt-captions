[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "hello everyone and welcome to the talk titled life without sidecars it's evpf's promise too",
    "start": "120",
    "end": "7980"
  },
  {
    "text": "good to be true so today I'm going to try to",
    "start": "7980",
    "end": "13320"
  },
  {
    "text": "present my opinion on why the sidecar model is here to stay and why it is in",
    "start": "13320",
    "end": "19680"
  },
  {
    "text": "fact the future of the service mesh so first of all who am I my name is zahari duchev",
    "start": "19680",
    "end": "26880"
  },
  {
    "text": "and I work for buoyant the creators of linker D and if you want to reach out",
    "start": "26880",
    "end": "33239"
  },
  {
    "text": "and ask me questions or connect you can use any of these channels so the agenda of this talk is quite",
    "start": "33239",
    "end": "40860"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "packed I hope we have enough time to cover everything first of all we are gonna",
    "start": "40860",
    "end": "46200"
  },
  {
    "text": "focus on like what what is a service Mission why you might need one we're",
    "start": "46200",
    "end": "52559"
  },
  {
    "text": "going to look at the three main pieces of functionality that a service mesh provides then we're going to take a look",
    "start": "52559",
    "end": "59520"
  },
  {
    "text": "at what Linker D is we're going to also explore uh and give",
    "start": "59520",
    "end": "66000"
  },
  {
    "text": "a bit of an overview of ebpf and in particular how it relates to",
    "start": "66000",
    "end": "71520"
  },
  {
    "text": "Cloud native networking and then we're going to ask ourselves the question of whether ebpf can actually replace the",
    "start": "71520",
    "end": "78540"
  },
  {
    "text": "sidecar in a service mesh and we are also going to evaluate a",
    "start": "78540",
    "end": "83759"
  },
  {
    "text": "couple of other models that are being used in production so",
    "start": "83759",
    "end": "88979"
  },
  {
    "text": "again like I tend to think of service meshes with respect to three main uh",
    "start": "88979",
    "end": "94740"
  },
  {
    "text": "pieces of functionality that you get when you adopt one first of all you have observability and this is something that",
    "start": "94740",
    "end": "101640"
  },
  {
    "text": "you want in a distributed system because you really want to know what's happening in your services",
    "start": "101640",
    "end": "108079"
  },
  {
    "text": "so that gives you service measures gives you golden metrics across all of your",
    "start": "108079",
    "end": "114240"
  },
  {
    "text": "services so things like HTTP and TCP level metrics request sampling and all",
    "start": "114240",
    "end": "120540"
  },
  {
    "text": "of that on the reliability front you get retries circuit breaking automatic",
    "start": "120540",
    "end": "127380"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "Canary deployments based on you know success rates of your new rollout",
    "start": "127380",
    "end": "132599"
  },
  {
    "text": "and all these nice things to keep your systems running reliably on",
    "start": "132599",
    "end": "138780"
  },
  {
    "text": "the security front you get automatic mtls mtls in most cases across mesh",
    "start": "138780",
    "end": "145440"
  },
  {
    "text": "workloads and you get network traffic policies",
    "start": "145440",
    "end": "150480"
  },
  {
    "text": "that are that can express very rich Network rules on the layer 7 protocol",
    "start": "150480",
    "end": "158640"
  },
  {
    "text": "stack and Lincoln is just a",
    "start": "158640",
    "end": "163980"
  },
  {
    "text": "it's a service mesh that it's very simple to use and it comes with very",
    "start": "163980",
    "end": "170940"
  },
  {
    "text": "accessible defaults in order to get you up and running as quickly as possible and get you to production and a",
    "start": "170940",
    "end": "177300"
  },
  {
    "text": "relatively short amount of time it uses a purpose-built micro proxy that's been",
    "start": "177300",
    "end": "182959"
  },
  {
    "text": "specifically designed to run as a sidecar it is also a cncf graduated",
    "start": "182959",
    "end": "188819"
  },
  {
    "text": "project that benefits from a thriving open source community and you can convince yourself of that",
    "start": "188819",
    "end": "196739"
  },
  {
    "text": "by joining our slack or you know checking out our open issues on the GitHub page so really the high level",
    "start": "196739",
    "end": "204239"
  },
  {
    "text": "architecture of for the most part all service meshes",
    "start": "204239",
    "end": "209879"
  },
  {
    "start": "208000",
    "end": "208000"
  },
  {
    "text": "right um and Linkedin in particular consists of two main components one is",
    "start": "209879",
    "end": "216599"
  },
  {
    "text": "the control plane which is a set of services that runs in your cluster that's responsible for serving TLS",
    "start": "216599",
    "end": "224580"
  },
  {
    "text": "certificates to the proxy for service Discovery facilitating the identity aware policy",
    "start": "224580",
    "end": "231239"
  },
  {
    "text": "and just providing all of these rules to the proxies so they can so they can work",
    "start": "231239",
    "end": "238200"
  },
  {
    "text": "with your services and then you have the proxy or the data plane which",
    "start": "238200",
    "end": "244560"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "with the sidecar model it's injected in each one of your meshed workloads",
    "start": "244560",
    "end": "250980"
  },
  {
    "text": "and in most of the cases this proxy is a transparent one that provides you things like metrics",
    "start": "250980",
    "end": "258479"
  },
  {
    "text": "exports so you can scrape these proxies and get the metrics into your observability pipeline there is latency",
    "start": "258479",
    "end": "265139"
  },
  {
    "text": "aware load balancing happening at the proxy level and the proxies are where",
    "start": "265139",
    "end": "271919"
  },
  {
    "text": "automatic mtls is implemented in TLS termination and in liquidy for example",
    "start": "271919",
    "end": "277560"
  },
  {
    "text": "you have other nice things like on-demand diagnostic API that allows you to tap and observe the requests that are",
    "start": "277560",
    "end": "285120"
  },
  {
    "text": "flowing through a particular proxy so if we want to kind of Express all of that",
    "start": "285120",
    "end": "291780"
  },
  {
    "text": "in a diagrammatic fashion the life of a request through meshed workloads looks a bit",
    "start": "291780",
    "end": "299100"
  },
  {
    "start": "294000",
    "end": "294000"
  },
  {
    "text": "like this you each part is injected with a proxy",
    "start": "299100",
    "end": "304979"
  },
  {
    "text": "on your knit container so the init container is responsible for actually setting up your iptable rules",
    "start": "304979",
    "end": "312360"
  },
  {
    "text": "so all incoming and outgoing traffic go through the proxy so when a request originates",
    "start": "312360",
    "end": "319080"
  },
  {
    "text": "in your application container it's intercepted by the proxy the proxy then",
    "start": "319080",
    "end": "324620"
  },
  {
    "text": "would most of the times parse the protocol provides application like protocol aware metrics",
    "start": "324620",
    "end": "332340"
  },
  {
    "text": "it will use its TLS certificate to establish to do a handshake with the",
    "start": "332340",
    "end": "339780"
  },
  {
    "text": "proxy on the other side and establish a TLS session that",
    "start": "339780",
    "end": "346680"
  },
  {
    "text": "ensures that both peers know who they are talking to and that they are talking to who they are supposed to and then the",
    "start": "346680",
    "end": "353820"
  },
  {
    "text": "data that's flowing through this connection is encrypted so when in order the request arrives at the",
    "start": "353820",
    "end": "360479"
  },
  {
    "text": "other side the proxy terminates the terminates TLS there and forwards all",
    "start": "360479",
    "end": "366960"
  },
  {
    "text": "the data to your application container so that's how uh",
    "start": "366960",
    "end": "372600"
  },
  {
    "text": "that's how the sidecar model in a service mesh works at the moment so now let's turn our site towards ebpf and",
    "start": "372600",
    "end": "381539"
  },
  {
    "text": "kind of look what this promising technology is giving us and see whether it can",
    "start": "381539",
    "end": "387539"
  },
  {
    "text": "allow us to you know improve this sidecar model and and just generally",
    "start": "387539",
    "end": "393780"
  },
  {
    "text": "benefit from this new technology that's been quite hot in the Cloud native networking space",
    "start": "393780",
    "end": "401340"
  },
  {
    "text": "so evpf has been compared to JavaScript for the kernel",
    "start": "401340",
    "end": "408479"
  },
  {
    "text": "and it's it's essentially an interface to make the kernel programmable so",
    "start": "408479",
    "end": "415979"
  },
  {
    "text": "it is an event driven programming model that allows you to run custom codes in kernel space and that",
    "start": "415979",
    "end": "424199"
  },
  {
    "text": "allows you to be incredibly efficient in certain situations it allows developers",
    "start": "424199",
    "end": "430680"
  },
  {
    "text": "to avoid costly data transfers between user space and kernel space and you know",
    "start": "430680",
    "end": "438660"
  },
  {
    "text": "minimize context switches Cisco latency and cost and just overall allows you to",
    "start": "438660",
    "end": "445259"
  },
  {
    "text": "eliminate a lot of the costs that you get in certain scenarios and it is also",
    "start": "445259",
    "end": "451500"
  },
  {
    "text": "safe because the programs that could be written and run in the kernel are very well fairly Limited in nature",
    "start": "451500",
    "end": "459300"
  },
  {
    "text": "so each program needs to go through a quite stringent Theory fire in order to",
    "start": "459300",
    "end": "465000"
  },
  {
    "text": "prove that the program is safe to be executed in the kernel and that is a good thing to",
    "start": "465000",
    "end": "471000"
  },
  {
    "text": "have I'll buy the bit limiting so really where could that you know where could that where could",
    "start": "471000",
    "end": "477960"
  },
  {
    "text": "all of that be useful in a networking context well take for example a",
    "start": "477960",
    "end": "484139"
  },
  {
    "start": "484000",
    "end": "484000"
  },
  {
    "text": "traditional reverse proxy right most of the times what happens is that",
    "start": "484139",
    "end": "490560"
  },
  {
    "text": "um a request rarely goes directly from the client to the server most of the times",
    "start": "490560",
    "end": "496139"
  },
  {
    "text": "what ends up happening is that there is a load balancer or a firewall sitting in between and the request needs to go",
    "start": "496139",
    "end": "502139"
  },
  {
    "text": "through that so in a typical proxy or a load balancer what's in what ends up",
    "start": "502139",
    "end": "507840"
  },
  {
    "text": "happening is that the request goes to your socket through the kernel level and then the data is copied",
    "start": "507840",
    "end": "515099"
  },
  {
    "text": "to um to user space where certain logic is run that decides whether this request",
    "start": "515099",
    "end": "521880"
  },
  {
    "text": "should be rejected or where it should be erupted to and when that happens then",
    "start": "521880",
    "end": "527220"
  },
  {
    "text": "the request is copied back to kernel space and it travels to its destination now that is fairly",
    "start": "527220",
    "end": "536339"
  },
  {
    "text": "inefficient because again you end up being a cost for for executing system",
    "start": "536339",
    "end": "542339"
  },
  {
    "text": "calls you're paying costs for transferring data between kernel and user space and how could ebpf help with",
    "start": "542339",
    "end": "549480"
  },
  {
    "text": "that well their implementations of proxies out",
    "start": "549480",
    "end": "554760"
  },
  {
    "text": "there that effectively use ebpf to do all of this decision making in kernel space and",
    "start": "554760",
    "end": "562620"
  },
  {
    "text": "allow you to avoid all of these costly transfers and like",
    "start": "562620",
    "end": "567660"
  },
  {
    "text": "the intermediary step of like going to user space and this has been incredibly",
    "start": "567660",
    "end": "573300"
  },
  {
    "text": "successful in certain scenarios and there are you know applications that are benefiting from from this use case quite",
    "start": "573300",
    "end": "579660"
  },
  {
    "text": "heavily so it's it's actually great and you know if we",
    "start": "579660",
    "end": "584940"
  },
  {
    "text": "so now we have this programming model that you know can run in the kernel and we need to ask",
    "start": "584940",
    "end": "592560"
  },
  {
    "text": "ourselves you know could we use that to our advantage in order to make the sidecar go away right I mean after all",
    "start": "592560",
    "end": "599820"
  },
  {
    "text": "that's why we're here for right to get rid of the sidecar nobody wants it so",
    "start": "599820",
    "end": "605279"
  },
  {
    "text": "really we need to ask ourselves this question but before that let's think about some",
    "start": "605279",
    "end": "611459"
  },
  {
    "text": "of the limitations that are inherent to ebpf to the ebpf programming model for a good",
    "start": "611459",
    "end": "617940"
  },
  {
    "text": "reason first of all um evpf programs are not allowed to block",
    "start": "617940",
    "end": "623820"
  },
  {
    "text": "so you can't really like just wait on the obituary condition to be either true or false for an undefined amount of time",
    "start": "623820",
    "end": "630480"
  },
  {
    "text": "and proceed after that like there are no unbounded loops they are limited in size and the",
    "start": "630480",
    "end": "638279"
  },
  {
    "text": "verifier needs to be able to evaluate all Paths of execution up front so on",
    "start": "638279",
    "end": "644880"
  },
  {
    "text": "top of that there is very limited State Management so you can't really have arbitrary Blobs of data living in the",
    "start": "644880",
    "end": "650880"
  },
  {
    "text": "kernel so with all of that being said that renders some of the things that a modern",
    "start": "650880",
    "end": "658260"
  },
  {
    "text": "service mesh is supposed to be quite hard to actually Implement in ebpf so",
    "start": "658260",
    "end": "664380"
  },
  {
    "start": "661000",
    "end": "661000"
  },
  {
    "text": "things like mtls handshakes you know things like retries timeouts circuit",
    "start": "664380",
    "end": "671220"
  },
  {
    "text": "breaking these are all hard things because you need to have a lot of",
    "start": "671220",
    "end": "676320"
  },
  {
    "text": "complicated State Management that's happening and at that point in time it's fairly hard to do that in in kernel",
    "start": "676320",
    "end": "684000"
  },
  {
    "text": "space and you know any layer 7 protocol parsing about possible",
    "start": "684000",
    "end": "690120"
  },
  {
    "text": "it's it like brings the question of whether that's the right place to do it",
    "start": "690120",
    "end": "695760"
  },
  {
    "text": "and of course even if you can like there is a challenge that comes with debugging",
    "start": "695760",
    "end": "701519"
  },
  {
    "text": "uh and troubleshooting applications uh that that are ebps so you don't really benefit from like the rich two chain",
    "start": "701519",
    "end": "709260"
  },
  {
    "text": "that you get with other higher level programming languages so really now let's",
    "start": "709260",
    "end": "716160"
  },
  {
    "text": "take a look at three particular features that a modern service mesh provides and",
    "start": "716160",
    "end": "721980"
  },
  {
    "text": "think about like what would it take to actually Implement that in ebpf is it possible and even if it was does it",
    "start": "721980",
    "end": "728700"
  },
  {
    "text": "actually make sense so first of all let's take a look at latency aware load",
    "start": "728700",
    "end": "734339"
  },
  {
    "start": "731000",
    "end": "731000"
  },
  {
    "text": "balancing the way that's achieved in Liberty is that each proxy each proxy",
    "start": "734339",
    "end": "740820"
  },
  {
    "text": "effectively is talking to a destination service and this destination service knows about",
    "start": "740820",
    "end": "748019"
  },
  {
    "text": "the endpoints um of all of your network Targets on your",
    "start": "748019",
    "end": "753060"
  },
  {
    "text": "cluster so the proxy then maintains a set of",
    "start": "753060",
    "end": "758160"
  },
  {
    "text": "these endpoints internally and it's only natural that you know some endpoints",
    "start": "758160",
    "end": "763440"
  },
  {
    "text": "will exhibit very low latency While others will exhibit a higher latency and",
    "start": "763440",
    "end": "771120"
  },
  {
    "text": "the load balancer then internally takes note of that and runs an algorithm that",
    "start": "771120",
    "end": "777360"
  },
  {
    "text": "results in more requests being sent to faster endpoints and vice verse",
    "start": "777360",
    "end": "783540"
  },
  {
    "text": "and you know if you really think about it like",
    "start": "783540",
    "end": "788820"
  },
  {
    "text": "doing that in ebpf would be quite complicated there is quite a lot of",
    "start": "788820",
    "end": "793980"
  },
  {
    "text": "states that need that you need to account for in order to do that and",
    "start": "793980",
    "end": "799160"
  },
  {
    "text": "nowadays implementing such an algorithm purely in kernel space is you know",
    "start": "799160",
    "end": "804660"
  },
  {
    "text": "fairly hard to do you just don't like just doesn't fit in the programming model that ebpf is using",
    "start": "804660",
    "end": "813600"
  },
  {
    "text": "then let's turn our site to something that's actually quite uh welcomed by a lot of",
    "start": "813600",
    "end": "820800"
  },
  {
    "start": "818000",
    "end": "818000"
  },
  {
    "text": "the users of service mesh service meshes and that's identity based policy",
    "start": "820800",
    "end": "826500"
  },
  {
    "text": "and really what that is the way that works most of the times is that when a proxy",
    "start": "826500",
    "end": "834180"
  },
  {
    "text": "fires up it generates a private key and it sends a certificate signing request",
    "start": "834180",
    "end": "839360"
  },
  {
    "text": "to unident service that in turn issues a",
    "start": "839360",
    "end": "844380"
  },
  {
    "text": "certificate back to the proxy now this certificate the proxy uses this certificate to establish TLS sessions",
    "start": "844380",
    "end": "852120"
  },
  {
    "text": "with other proxies so that way you get authentication and",
    "start": "852120",
    "end": "859260"
  },
  {
    "text": "encryption on your connection so both peers know who they're talking to and",
    "start": "859260",
    "end": "864360"
  },
  {
    "text": "this the certificates of both peers are tied to the identity of the workload",
    "start": "864360",
    "end": "870060"
  },
  {
    "text": "on top of that the proxy is also communicate with a",
    "start": "870060",
    "end": "875459"
  },
  {
    "text": "policy service that allows them to",
    "start": "875459",
    "end": "881699"
  },
  {
    "text": "to enforce very rich layer 7 policies around what requests go where and what is",
    "start": "881699",
    "end": "889620"
  },
  {
    "text": "allowed and that's how you get authorization so a typical identity",
    "start": "889620",
    "end": "894959"
  },
  {
    "text": "based authorization policy will sort of look like this right so you",
    "start": "894959",
    "end": "901800"
  },
  {
    "text": "can see that you can Define very rich protocol aware policies on that level so",
    "start": "901800",
    "end": "908399"
  },
  {
    "text": "you can do things like Define policies where you say well workloads that are from this service",
    "start": "908399",
    "end": "915540"
  },
  {
    "text": "account uh can talk only to a set of other workloads from this set of service",
    "start": "915540",
    "end": "922800"
  },
  {
    "text": "accounts on this board on this particular HTTP road so really we're talking about",
    "start": "922800",
    "end": "930740"
  },
  {
    "text": "layer 7 policy that needs to know about the hdb protocol is you know this logic",
    "start": "930740",
    "end": "939120"
  },
  {
    "text": "needs to parse the protocol I mean even like doing the TLs handshake itself in",
    "start": "939120",
    "end": "944820"
  },
  {
    "text": "ebpf is quite complicated because there is so much happening under the hood it's like version negotiation and all of that",
    "start": "944820",
    "end": "951360"
  },
  {
    "text": "it's just a very hard thing to do at the moment um given the limitation that ebbf has",
    "start": "951360",
    "end": "958800"
  },
  {
    "text": "and not only that on top of that there are other there is",
    "start": "958800",
    "end": "965519"
  },
  {
    "text": "other functionality that is quite hard and my favorite is retries and retries",
    "start": "965519",
    "end": "970860"
  },
  {
    "start": "968000",
    "end": "968000"
  },
  {
    "text": "are actually something that you know people oftentimes underestimate",
    "start": "970860",
    "end": "977399"
  },
  {
    "text": "how hard it actually is to implement that so really think about what happens when",
    "start": "977399",
    "end": "983220"
  },
  {
    "text": "a proxy or any system needs to do needs to be able to retry requests first of",
    "start": "983220",
    "end": "988440"
  },
  {
    "text": "all a request comes from your application container goes through the proxy",
    "start": "988440",
    "end": "994079"
  },
  {
    "text": "and this proxy now fires the request to the server it could very well be the",
    "start": "994079",
    "end": "999120"
  },
  {
    "text": "case that the server this request actually fails yeah so now you want to",
    "start": "999120",
    "end": "1005779"
  },
  {
    "text": "retract right this request is a travel with well think about what needs to happen under the hood right like you",
    "start": "1005779",
    "end": "1011959"
  },
  {
    "text": "actually have to have buffered that request until you know whether it has succeeded",
    "start": "1011959",
    "end": "1017959"
  },
  {
    "text": "or not and when you know you can professionally retry this request so",
    "start": "1017959",
    "end": "1025579"
  },
  {
    "text": "really you have some condition that being the request succeeding or not that you don't",
    "start": "1025579",
    "end": "1032418"
  },
  {
    "text": "know how much time that's gonna that's gonna take to you know have an answer to",
    "start": "1032419",
    "end": "1039740"
  },
  {
    "text": "and then you also have some arbitrary chunk of data that you need to buffer",
    "start": "1039740",
    "end": "1045319"
  },
  {
    "text": "somewhere and you also possibly don't know what the size of this data is because there are streaming requests",
    "start": "1045319",
    "end": "1051200"
  },
  {
    "text": "strength encoding and whatnot so you know you need to kind of think about all of these things and determine whether",
    "start": "1051200",
    "end": "1058880"
  },
  {
    "text": "this could actually be implemented in ebpf where you have so many uh",
    "start": "1058880",
    "end": "1065020"
  },
  {
    "text": "requirements that are there to keep the kernel running right like this is simply",
    "start": "1065020",
    "end": "1072620"
  },
  {
    "text": "uh programming problem that is not very",
    "start": "1072620",
    "end": "1077840"
  },
  {
    "text": "well suited for the model that ebpf follows",
    "start": "1077840",
    "end": "1082940"
  },
  {
    "text": "so but don't get me wrong like we a boy and then I in general like I really like",
    "start": "1082940",
    "end": "1089000"
  },
  {
    "start": "1084000",
    "end": "1084000"
  },
  {
    "text": "ebpf we think that it's a very promising technology that has quite a lot of benefits to it",
    "start": "1089000",
    "end": "1096440"
  },
  {
    "text": "and has its place so you know for example you can do a lot of nice things that that people are doing out there",
    "start": "1096440",
    "end": "1102919"
  },
  {
    "text": "very successfully so things like Dynamic IP routing at layer therefore and layer",
    "start": "1102919",
    "end": "1108320"
  },
  {
    "text": "3 packet filtering very fast firewalls um you can use cbpf for traffic",
    "start": "1108320",
    "end": "1115760"
  },
  {
    "text": "monitoring for application profiling and and you know debugging they are very",
    "start": "1115760",
    "end": "1122480"
  },
  {
    "text": "interesting tools out there that do these sort of stuff but anything that's layer 7 and requires complicated State",
    "start": "1122480",
    "end": "1130039"
  },
  {
    "text": "Management it's just not really not really fit for this uh particular",
    "start": "1130039",
    "end": "1136100"
  },
  {
    "text": "programming model and their their Solutions out there and service measures that are you know marketing the",
    "start": "1136100",
    "end": "1144140"
  },
  {
    "text": "fact that they are using pbpf under the hood but as a matter of fact if you look closely you understand that in fact",
    "start": "1144140",
    "end": "1150440"
  },
  {
    "text": "there is a proxy somewhere it might not be a sidecar but there is a proxy and all of these higher level all of these",
    "start": "1150440",
    "end": "1158419"
  },
  {
    "text": "things that are higher on the network stack they end up happening in the proxy so I'd say that it's",
    "start": "1158419",
    "end": "1166100"
  },
  {
    "text": "it's sufficient to say that you know for now um we we really need a service mesh needs a",
    "start": "1166100",
    "end": "1175580"
  },
  {
    "text": "proxy like it's just a matter of where that proxy is going to live so you know",
    "start": "1175580",
    "end": "1181280"
  },
  {
    "text": "thinking about that um that prompts the question can we do something better like can this proxy",
    "start": "1181280",
    "end": "1188179"
  },
  {
    "text": "live somewhere else where it takes less resources and just makes our lives a lot",
    "start": "1188179",
    "end": "1194120"
  },
  {
    "text": "easier well let's see so first of all",
    "start": "1194120",
    "end": "1199160"
  },
  {
    "start": "1199000",
    "end": "1199000"
  },
  {
    "text": "there is this model of a shared proxy per note and that's something that's",
    "start": "1199160",
    "end": "1204799"
  },
  {
    "text": "again used by some solutions and effectively what this means is that you",
    "start": "1204799",
    "end": "1210140"
  },
  {
    "text": "have a single proxy per node and all of your pots that are on this particular",
    "start": "1210140",
    "end": "1215900"
  },
  {
    "text": "note are sharing this proxy and you only like talk proxy to proxy",
    "start": "1215900",
    "end": "1221900"
  },
  {
    "text": "when you're Crossing node boundaries so this you know has some advantages but",
    "start": "1221900",
    "end": "1230419"
  },
  {
    "text": "you also need to be aware of its the limitations of this model so this is",
    "start": "1230419",
    "end": "1236059"
  },
  {
    "text": "this is arguably more efficient if you use a resource hungry proxy so if",
    "start": "1236059",
    "end": "1242000"
  },
  {
    "text": "you're using like a general purpose proxy such as Envoy maybe you know this",
    "start": "1242000",
    "end": "1247160"
  },
  {
    "text": "model is better maybe like sticking a proxy in every part of yours is not the",
    "start": "1247160",
    "end": "1253400"
  },
  {
    "text": "best way forward but all of this comes with a number of disadvantages right",
    "start": "1253400",
    "end": "1260720"
  },
  {
    "text": "so first of all you have problems around resource starvation and fairness so",
    "start": "1260720",
    "end": "1267380"
  },
  {
    "text": "really if you adopt if this model is if you adopt this model you need to be",
    "start": "1267380",
    "end": "1273740"
  },
  {
    "text": "aware of the fact that you might end up in a situation where on a single note there is for example a pot",
    "start": "1273740",
    "end": "1282140"
  },
  {
    "text": "that uses a lot of the resources of this proxy and effectively Stars the other",
    "start": "1282140",
    "end": "1287720"
  },
  {
    "text": "parts out of resources so you end up with this noise enabled problems that you know you can't really determine",
    "start": "1287720",
    "end": "1293720"
  },
  {
    "text": "account for because you're at the mercy of the kubernetes scheduler then",
    "start": "1293720",
    "end": "1299679"
  },
  {
    "text": "there is the problem of lacking any",
    "start": "1299679",
    "end": "1304820"
  },
  {
    "text": "um good means to do resource optimization and the reason for that is that if",
    "start": "1304820",
    "end": "1310940"
  },
  {
    "text": "because if you're adopting this model you're effectively losing the ability to optimize resource consumptions at",
    "start": "1310940",
    "end": "1319460"
  },
  {
    "text": "um at the pot level and this is how this is how kubernetes has been actually",
    "start": "1319460",
    "end": "1324980"
  },
  {
    "text": "designed to work right like um so what ends up happening is that",
    "start": "1324980",
    "end": "1331419"
  },
  {
    "text": "you uh your proxy that's on a note will need resources according to the pods",
    "start": "1331419",
    "end": "1339020"
  },
  {
    "text": "that are scheduled on this particular note so you can't really you can't really determine it's the reason about",
    "start": "1339020",
    "end": "1345260"
  },
  {
    "text": "putting some constraints on the resources that this proxy consumes because again the set of workloads that",
    "start": "1345260",
    "end": "1352280"
  },
  {
    "text": "are the set of PODS that are running on this node is effectively Ever Changing you know this proxy might need a certain",
    "start": "1352280",
    "end": "1359059"
  },
  {
    "text": "amount of resources now but tomorrow the kubernetes scheduler might decide that you know well I'm going to put some",
    "start": "1359059",
    "end": "1365059"
  },
  {
    "text": "other parts on this note and now the resource consumption characteristics of",
    "start": "1365059",
    "end": "1371059"
  },
  {
    "text": "this proxy all a sudden change so you can't really reason very well about all of that on top of that there is no real",
    "start": "1371059",
    "end": "1378620"
  },
  {
    "text": "isolation of secret material so you know you end up",
    "start": "1378620",
    "end": "1383919"
  },
  {
    "text": "holding all of the private keys and certificates for all of the pots that",
    "start": "1383919",
    "end": "1389419"
  },
  {
    "text": "are on this nodes in this proxy so if there is a bridge or a buck and there is like a leak of you know and there is a",
    "start": "1389419",
    "end": "1396260"
  },
  {
    "text": "leak of private key material then effectively all of your parts that are on this node",
    "start": "1396260",
    "end": "1403940"
  },
  {
    "text": "are compromised and then what scares me the most is actually the increased blast radius",
    "start": "1403940",
    "end": "1410120"
  },
  {
    "text": "right so the problem there is that if this proxy goes down now a bunch of parts that are",
    "start": "1410120",
    "end": "1416720"
  },
  {
    "text": "on this node are affected and again you don't really have the means to reason",
    "start": "1416720",
    "end": "1422720"
  },
  {
    "text": "about like water what are these parts at any given time so",
    "start": "1422720",
    "end": "1428000"
  },
  {
    "text": "this makes things like operability quite hard because it seems quite scary to",
    "start": "1428000",
    "end": "1433820"
  },
  {
    "text": "upgrade such a proxy then there is another model that I've",
    "start": "1433820",
    "end": "1439640"
  },
  {
    "text": "seen being used and this is the shared proxy per service accounts and that is",
    "start": "1439640",
    "end": "1447919"
  },
  {
    "start": "1443000",
    "end": "1443000"
  },
  {
    "text": "sort of similar you're effectively sharing a proxy per single service account and that makes sense uh to me on",
    "start": "1447919",
    "end": "1457039"
  },
  {
    "text": "the security front so there is so you know you end up solving the problem of security a little bit better",
    "start": "1457039",
    "end": "1465620"
  },
  {
    "text": "but again um and and there is arguably a little bit more",
    "start": "1465620",
    "end": "1471860"
  },
  {
    "text": "um improved resource utilization because you could argue that",
    "start": "1471860",
    "end": "1477200"
  },
  {
    "text": "um pulses that are part of the same service accounts are effectively are likely to",
    "start": "1477200",
    "end": "1485000"
  },
  {
    "text": "are likely to exhibit similar resource consumption characteristics but again",
    "start": "1485000",
    "end": "1490640"
  },
  {
    "text": "this presents again increased operational risk and it's just doesn't",
    "start": "1490640",
    "end": "1496760"
  },
  {
    "text": "bring a lot more advantages because it makes deployment hard you're again dealing with multi-tenancy you're",
    "start": "1496760",
    "end": "1503539"
  },
  {
    "text": "dealing with unpredictability of like what pots are actually using this",
    "start": "1503539",
    "end": "1508820"
  },
  {
    "text": "particular proxy at any given time as opposed to that I think that the sidecar model has a",
    "start": "1508820",
    "end": "1516020"
  },
  {
    "start": "1513000",
    "end": "1513000"
  },
  {
    "text": "number of advantages that um you know that that you can benefit from",
    "start": "1516020",
    "end": "1521360"
  },
  {
    "text": "first of all resource consumption skills with the application right so really you",
    "start": "1521360",
    "end": "1527659"
  },
  {
    "text": "know uh the more resources your application consumes the more",
    "start": "1527659",
    "end": "1532820"
  },
  {
    "text": "the more resources a proxy is going to to be consuming and you know you can you",
    "start": "1532820",
    "end": "1538880"
  },
  {
    "text": "have a lot of more facilities to optimize the resource consumption of the",
    "start": "1538880",
    "end": "1544100"
  },
  {
    "text": "proxy and reason about like what limits and constraints you're going to put on on this particular proxy failure is",
    "start": "1544100",
    "end": "1551720"
  },
  {
    "text": "limited to a particular instance so when something fails and the proxy goes down like all of the native kubernetes",
    "start": "1551720",
    "end": "1559100"
  },
  {
    "text": "Concepts kick in and all of the facilities like rescheduling eviction OMS this all works in your favor to",
    "start": "1559100",
    "end": "1565880"
  },
  {
    "text": "alleviate the situation and you know what actually failed",
    "start": "1565880",
    "end": "1571159"
  },
  {
    "text": "and that makes maintenance and upgrades a lot easier because you effectively just end up like roll out restarting",
    "start": "1571159",
    "end": "1577400"
  },
  {
    "text": "your applications and you benefit from like the deployment model of kubernetes",
    "start": "1577400",
    "end": "1583279"
  },
  {
    "text": "in order to also maintain the proxy and on top of that the security boundary is",
    "start": "1583279",
    "end": "1589100"
  },
  {
    "text": "very clear everything is contained within the path which is the smallest logical unit in kubernetes",
    "start": "1589100",
    "end": "1595700"
  },
  {
    "text": "so all of that being said I keep hearing um a number of statements around this model",
    "start": "1595700",
    "end": "1602059"
  },
  {
    "text": "that I would label as popular folklore first of all I hear a lot that sidecars",
    "start": "1602059",
    "end": "1608179"
  },
  {
    "start": "1606000",
    "end": "1606000"
  },
  {
    "text": "waste resources I don't think that's the case first of all not all sidecars are",
    "start": "1608179",
    "end": "1613460"
  },
  {
    "text": "created equal you know Linker this proxy has been optimized to specifically work as a",
    "start": "1613460",
    "end": "1619580"
  },
  {
    "text": "sidecar and it's incredibly it has incredibly small footprint",
    "start": "1619580",
    "end": "1625340"
  },
  {
    "text": "um on top of that I also hear that sidecars introduce extra latency",
    "start": "1625340",
    "end": "1630799"
  },
  {
    "text": "is that the latency that's introduced by sat cars is negligible compared to the",
    "start": "1630799",
    "end": "1635960"
  },
  {
    "text": "latency that most of the applications exhibit and if that stops you from using",
    "start": "1635960",
    "end": "1641539"
  },
  {
    "text": "a sidecar maybe you know the service the microservices model is not entirely",
    "start": "1641539",
    "end": "1646940"
  },
  {
    "text": "right for you I also hear that the service mesh will soon live in the kernel because everything is moving into this layer as",
    "start": "1646940",
    "end": "1654679"
  },
  {
    "text": "we saw the kernel programming model has quite a lot of limitations and that render you know implementing a lot of",
    "start": "1654679",
    "end": "1661820"
  },
  {
    "text": "the things that you would use a service mesh for you know very hard if not impossible",
    "start": "1661820",
    "end": "1668659"
  },
  {
    "text": "and then I also hear that multi-tenance proxies are the way forward but as we",
    "start": "1668659",
    "end": "1673820"
  },
  {
    "text": "saw they are hard to operate they have a number of concerns around security and",
    "start": "1673820",
    "end": "1680299"
  },
  {
    "text": "uh stability and you know it's just uh they don't they kind of go against the",
    "start": "1680299",
    "end": "1687320"
  },
  {
    "text": "grain of what the kubernetes in container Computing model is according to my",
    "start": "1687320",
    "end": "1695059"
  },
  {
    "text": "opinion so really in conclusion I'm gonna say that",
    "start": "1695059",
    "end": "1700279"
  },
  {
    "start": "1698000",
    "end": "1698000"
  },
  {
    "text": "um I think ebpf brings a number of advantages that could be very useful in the cloud native networking space and we",
    "start": "1700279",
    "end": "1708799"
  },
  {
    "text": "should push and explore this uh Avenue a lot more I think it has a lot to offer",
    "start": "1708799",
    "end": "1715640"
  },
  {
    "text": "I would also say that you know unlike some companies that are starting with",
    "start": "1715640",
    "end": "1721460"
  },
  {
    "text": "the multi-tenant proxy as a model you know we've already actually been there Linker D1 was running a",
    "start": "1721460",
    "end": "1728659"
  },
  {
    "text": "multi-tenant proxy and there were a lot of users in production and we saw firsthand all the",
    "start": "1728659",
    "end": "1734779"
  },
  {
    "text": "operational problems that they were experiencing and that's why I decided we need to move away from this model and we",
    "start": "1734779",
    "end": "1742400"
  },
  {
    "text": "firmly believe that sidecars are here to stay and they in",
    "start": "1742400",
    "end": "1748039"
  },
  {
    "text": "fact are the right model for the service mesh so thank you for listening and now I",
    "start": "1748039",
    "end": "1755480"
  },
  {
    "text": "guess we have some time for Q a if we have time",
    "start": "1755480",
    "end": "1760480"
  },
  {
    "text": "[Applause]",
    "start": "1762870",
    "end": "1768300"
  },
  {
    "text": "right so the question was whether I've thought about things like confidential containers because the sidecar model",
    "start": "1769760",
    "end": "1776600"
  },
  {
    "text": "doesn't really you know work very well with um with an entrusted environment and the",
    "start": "1776600",
    "end": "1785480"
  },
  {
    "text": "reason is uh the truth is I have actually not looked into that and that'd",
    "start": "1785480",
    "end": "1791840"
  },
  {
    "text": "be an interesting thing to explore but no I I don't really have a lot of experience and much to say about that",
    "start": "1791840",
    "end": "1799600"
  },
  {
    "text": "hello hello a question over here on the right okay yeah so",
    "start": "1802760",
    "end": "1811299"
  },
  {
    "text": "I'm wondering how many people here use istio or psyllium but it seems the",
    "start": "1812299",
    "end": "1817640"
  },
  {
    "text": "what you're arguing against is that the envoy proxy is very heavy-handed the solutions have to be worked around not",
    "start": "1817640",
    "end": "1824419"
  },
  {
    "text": "using sidecars um can't other projects use the Linker D",
    "start": "1824419",
    "end": "1830840"
  },
  {
    "text": "proxy um because it's really lightweight instead",
    "start": "1830840",
    "end": "1837080"
  },
  {
    "text": "of trying to work around sidecars as a saying sidecars are a problem I see uh",
    "start": "1837080",
    "end": "1844220"
  },
  {
    "text": "well I mean like we I I'm not here to advertise liquidy or it's proxy",
    "start": "1844220",
    "end": "1849679"
  },
  {
    "text": "um this was just an objective you know evaluation of the state of things but I",
    "start": "1849679",
    "end": "1855020"
  },
  {
    "text": "would say that linkages proxy is lightweight and it's also open source",
    "start": "1855020",
    "end": "1860419"
  },
  {
    "text": "anyone can go and see how it's been implemented the performance optimizations we've done and if they",
    "start": "1860419",
    "end": "1866960"
  },
  {
    "text": "want to experiment with running it in their service mesh yeah sure that's that's great like more adoption is",
    "start": "1866960",
    "end": "1872659"
  },
  {
    "text": "always great so probably it's a good idea to try that if performance and resource consumption",
    "start": "1872659",
    "end": "1879860"
  },
  {
    "text": "is what bothers you with the sidecar model",
    "start": "1879860",
    "end": "1884620"
  },
  {
    "text": "okay and thanks for presentation so my question will be like that so now",
    "start": "1885740",
    "end": "1892159"
  },
  {
    "text": "uh the link if we use a cni mode or init container it basically creates like a",
    "start": "1892159",
    "end": "1898520"
  },
  {
    "text": "chain of Ip tables rules yes have you observed any issues related to",
    "start": "1898520",
    "end": "1904460"
  },
  {
    "text": "that I mean Epi tables yes as it is it's kind of on some modes of running kubernetes",
    "start": "1904460",
    "end": "1911240"
  },
  {
    "text": "clusters it can introduce some uas on updating yes so have you observed on some large deployments is the current",
    "start": "1911240",
    "end": "1918260"
  },
  {
    "text": "situation because you produce basically six habitable tools rows per each side car so yeah your opinion on it it's",
    "start": "1918260",
    "end": "1925340"
  },
  {
    "text": "outside yeah absolutely uh so we've seen yes we've seen problems with using IP tables",
    "start": "1925340",
    "end": "1932179"
  },
  {
    "text": "um especially on like larger clusters and we're you know actively looking at",
    "start": "1932179",
    "end": "1939679"
  },
  {
    "text": "other options too in order to alleviate these problems but at the moment we we have not really we have not really we we",
    "start": "1939679",
    "end": "1946100"
  },
  {
    "text": "aren't really focused on that but yeah I'm aware that there are problems well if that's all the questions thanks",
    "start": "1946100",
    "end": "1953000"
  },
  {
    "text": "everyone for attending and enjoy Amsterdam",
    "start": "1953000",
    "end": "1958480"
  }
]