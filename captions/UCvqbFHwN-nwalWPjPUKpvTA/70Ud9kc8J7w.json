[
  {
    "text": "so a couple things first I just want to thank everybody for coming out to talk about zero trust in the cloud and",
    "start": "0",
    "end": "7440"
  },
  {
    "text": "the other uh I apologize if my voice breaks up a little bit during the talk",
    "start": "7440",
    "end": "12599"
  },
  {
    "text": "I'm fighting something off but thankfully it's not covered",
    "start": "12599",
    "end": "17900"
  },
  {
    "text": "so today I'm going to talk about zero trust in the cloud and how web assembly",
    "start": "18840",
    "end": "24960"
  },
  {
    "text": "is a key enabling technology for that uh so",
    "start": "24960",
    "end": "30900"
  },
  {
    "text": "I wrote a book called programming webassembly with Russ uh wrote Cloud native go",
    "start": "30900",
    "end": "38660"
  },
  {
    "text": "asp.net core my books haven't always been on the right side of History I wrote a Windows",
    "start": "38660",
    "end": "45480"
  },
  {
    "text": "Phone 7 programming book",
    "start": "45480",
    "end": "48739"
  },
  {
    "text": "so I created a an open source webassembly project called wasmcloud",
    "start": "51120",
    "end": "58399"
  },
  {
    "text": "I co-founded cosmonic which is a company that's built on top of wasm Cloud for",
    "start": "58520",
    "end": "65478"
  },
  {
    "text": "managing wasm Cloud distributed applications",
    "start": "65479",
    "end": "71100"
  },
  {
    "text": "I'm typically the most paranoid person in the room which I guess",
    "start": "71100",
    "end": "76320"
  },
  {
    "text": "goes hand in hand with being concerned about security",
    "start": "76320",
    "end": "81320"
  },
  {
    "text": "I'm a big web assembly fan but I'm also practical so",
    "start": "81380",
    "end": "87780"
  },
  {
    "text": "while I think webassembly solves a ton of really important problems it doesn't solve them all",
    "start": "87780",
    "end": "94820"
  },
  {
    "text": "and there's my GitHub address I've got some other contact Links at the end of the slides",
    "start": "97140",
    "end": "103140"
  },
  {
    "text": "this is by far my new favorite quote Runar bjornison the guy who co-created",
    "start": "103140",
    "end": "111899"
  },
  {
    "text": "the Unison programming language uh posted this and I've been stealing it",
    "start": "111899",
    "end": "118619"
  },
  {
    "text": "from him ever since so I want to go from",
    "start": "118619",
    "end": "125939"
  },
  {
    "text": "the lowest level webassembly technology so that's the file itself the virtual",
    "start": "125939",
    "end": "131819"
  },
  {
    "text": "machine and how that enables security and then I'm going to take a journey",
    "start": "131819",
    "end": "137040"
  },
  {
    "text": "from there to run times and then to above that level to capability security",
    "start": "137040",
    "end": "143640"
  },
  {
    "text": "and then finally we'll talk about some distributed system security and which parts are enabled by",
    "start": "143640",
    "end": "151920"
  },
  {
    "text": "webassembly itself and then which parts are add-ons enabled by open source projects",
    "start": "151920",
    "end": "158780"
  },
  {
    "text": "and if you look at my amazing art skills you'll see that the green stuff is open",
    "start": "159959",
    "end": "166500"
  },
  {
    "text": "source add-ons and the purple is stuff that's enabled by webassembly on its own",
    "start": "166500",
    "end": "174620"
  },
  {
    "text": "so there it is the you've seen and probably",
    "start": "175080",
    "end": "183180"
  },
  {
    "text": "heard in Keynotes and some other sessions how",
    "start": "183180",
    "end": "188340"
  },
  {
    "text": "buffer overflows buffer overruns things like that are pretty easy attack vectors and one of my",
    "start": "188340",
    "end": "197280"
  },
  {
    "text": "favorite qualities of webassembly is that they're simply not possible you",
    "start": "197280",
    "end": "202379"
  },
  {
    "text": "physically cannot buffer over on you know webassembly module you can't write",
    "start": "202379",
    "end": "207720"
  },
  {
    "text": "code that uses system calls you can't write code that branches to a",
    "start": "207720",
    "end": "214140"
  },
  {
    "text": "location that wasn't there when the file loaded to begin with and in many cases where uh C and C plus",
    "start": "214140",
    "end": "223860"
  },
  {
    "text": "plus would crash with undefined Behavior webassembly modules will do what's",
    "start": "223860",
    "end": "229140"
  },
  {
    "text": "called a trap and they will fail to run and",
    "start": "229140",
    "end": "234959"
  },
  {
    "text": "if there's one thing you take away from this session it would be to click on",
    "start": "234959",
    "end": "240180"
  },
  {
    "text": "that YouTube video um it shows a buffer over on exploit in the",
    "start": "240180",
    "end": "247080"
  },
  {
    "text": "original Legend of Zelda game for the Nintendo and it's by far one of the most",
    "start": "247080",
    "end": "252720"
  },
  {
    "text": "fascinating exploits I've ever seen so um if you go and watch that video then I",
    "start": "252720",
    "end": "260040"
  },
  {
    "text": "feel like my work is done here I'm sorry it's not a shortened URL but I figured at a security conference",
    "start": "260040",
    "end": "266280"
  },
  {
    "text": "nobody's going to click a shortened URL",
    "start": "266280",
    "end": "269960"
  },
  {
    "text": "as I mentioned the webassembly modules have control flow security as well as module",
    "start": "271740",
    "end": "278160"
  },
  {
    "text": "security so you can't create arbitrary pointers you",
    "start": "278160",
    "end": "283860"
  },
  {
    "text": "can't dereference memory that's invalid um",
    "start": "283860",
    "end": "288960"
  },
  {
    "text": "there's a number of other things that are prevented by the simple fact that",
    "start": "288960",
    "end": "295919"
  },
  {
    "text": "you cannot tell a webassembly module to jump to an arbitrary location you can't",
    "start": "295919",
    "end": "301560"
  },
  {
    "text": "have it read past the end of a buffer and then treat whatever is beyond that as code",
    "start": "301560",
    "end": "307639"
  },
  {
    "text": "linear memory and the code being executed on the stack are two entirely",
    "start": "307639",
    "end": "313919"
  },
  {
    "text": "different things that you cannot push together",
    "start": "313919",
    "end": "320360"
  },
  {
    "text": "so let me see if I can find this",
    "start": "322380",
    "end": "327319"
  },
  {
    "text": "is that that uh can you see that",
    "start": "330120",
    "end": "335060"
  },
  {
    "text": "okay so I've divided this particular sample into two highly scientific categories",
    "start": "335280",
    "end": "341580"
  },
  {
    "text": "working and no worky uh",
    "start": "341580",
    "end": "347900"
  },
  {
    "text": "so the working sample is this is rust in case you're curious",
    "start": "349860",
    "end": "356419"
  },
  {
    "text": "basically this is an add function and the no mangle there tells the rust",
    "start": "356419",
    "end": "363180"
  },
  {
    "text": "compiler to export that function at the Primitive level webassembly can",
    "start": "363180",
    "end": "370320"
  },
  {
    "text": "only exchange numbers with the host and so anything where you need to exchange",
    "start": "370320",
    "end": "380039"
  },
  {
    "text": "robust data types at least today you have to figure out how to do that on your own there are",
    "start": "380039",
    "end": "386940"
  },
  {
    "text": "some standards coming that will hopefully help make that easier but uh",
    "start": "386940",
    "end": "393479"
  },
  {
    "text": "that's pretty much how it works so let's see if I can show what this looks like",
    "start": "393479",
    "end": "400280"
  },
  {
    "text": "so these are all the export functions from the webassembly module this is a",
    "start": "409560",
    "end": "416160"
  },
  {
    "text": "it's not actually a webassembly language it's just a textual representation of",
    "start": "416160",
    "end": "421800"
  },
  {
    "text": "the byte code and so you'll see there's a couple of them that rust adds for you but the two that are important are",
    "start": "421800",
    "end": "428940"
  },
  {
    "text": "memory which is the linear memory block shared by the host and the guest an ad and that function is the one that we",
    "start": "428940",
    "end": "435240"
  },
  {
    "text": "that we created and",
    "start": "435240",
    "end": "441020"
  },
  {
    "text": "I don't actually have any tricks up my sleeve I just I measure my typing speed",
    "start": "441479",
    "end": "446580"
  },
  {
    "text": "in typos per minute so I wanted to make sure I didn't make you suffer through that so you'll see I just added I just called",
    "start": "446580",
    "end": "454500"
  },
  {
    "text": "the add function with four and four um the wasm time runner",
    "start": "454500",
    "end": "462440"
  },
  {
    "text": "reminded me that that particular call interface is not currently stable so it",
    "start": "462440",
    "end": "467460"
  },
  {
    "text": "might break but I got eight and so that's",
    "start": "467460",
    "end": "473160"
  },
  {
    "text": "that's all good so now let's see what happens if I try and",
    "start": "473160",
    "end": "480479"
  },
  {
    "text": "create a malicious actor in here",
    "start": "480479",
    "end": "486419"
  },
  {
    "text": "this is also rust but uh and it's no mangle so I'm going to export in the add",
    "start": "486419",
    "end": "492360"
  },
  {
    "text": "function but here I'm going to attempt to read a file and write to the console",
    "start": "492360",
    "end": "498060"
  },
  {
    "text": "and then finally just add the number and",
    "start": "498060",
    "end": "503220"
  },
  {
    "text": "again I'm just running using why some time to run it and",
    "start": "503220",
    "end": "509400"
  },
  {
    "text": "you'll see that it trapped um it failed to invoke add and you'll see",
    "start": "509400",
    "end": "516979"
  },
  {
    "text": "you will see that unreachable thing um an awful lot and generally what it means",
    "start": "516979",
    "end": "525060"
  },
  {
    "text": "is you've attempted to execute code that doesn't exist so",
    "start": "525060",
    "end": "532160"
  },
  {
    "text": "in this particular webassembly module it's not using what's called wazzy so it",
    "start": "532160",
    "end": "539940"
  },
  {
    "text": "doesn't have any instructions for accessing the file system so when the rust Linker created that module",
    "start": "539940",
    "end": "547680"
  },
  {
    "text": "you just placed a bunch of unreachable code on unreachable macros where the",
    "start": "547680",
    "end": "553980"
  },
  {
    "text": "real code should be so that's the the basics of",
    "start": "553980",
    "end": "560640"
  },
  {
    "text": "low level module level security you",
    "start": "560640",
    "end": "566580"
  },
  {
    "text": "we will share that",
    "start": "566580",
    "end": "571920"
  },
  {
    "text": "all right so the next thing I want to talk about one level up from the webassembly module security is",
    "start": "571920",
    "end": "581060"
  },
  {
    "text": "is runtime security and every webassembly module requires a",
    "start": "581220",
    "end": "587459"
  },
  {
    "text": "runtime the regardless of what magic or smoke and",
    "start": "587459",
    "end": "592680"
  },
  {
    "text": "mirror shows you've seen uh all webassembly modules need a runtime so whether that's the browser",
    "start": "592680",
    "end": "599760"
  },
  {
    "text": "or node V8 engine or as you'll see as you",
    "start": "599760",
    "end": "606600"
  },
  {
    "text": "saw at wasm time so that runtime provides a bunch of",
    "start": "606600",
    "end": "611880"
  },
  {
    "text": "security uh for webassembly modules",
    "start": "611880",
    "end": "617100"
  },
  {
    "text": "first is that host memory is off limits no matter what you try and do from",
    "start": "617100",
    "end": "623880"
  },
  {
    "text": "within a webassembly module you cannot access the host's memory you're",
    "start": "623880",
    "end": "629480"
  },
  {
    "text": "basically given an isolated sandbox playground Vector of bytes and that's it",
    "start": "629480",
    "end": "635760"
  },
  {
    "text": "that's all you can use the host has its own memory isolated elsewhere",
    "start": "635760",
    "end": "642300"
  },
  {
    "text": "the host supplies the implementation for Imports you saw that I exported a",
    "start": "642300",
    "end": "647700"
  },
  {
    "text": "function called add but if I needed to import something like the ability to",
    "start": "647700",
    "end": "653220"
  },
  {
    "text": "access a file it's up to the host to supply the implementation for that and",
    "start": "653220",
    "end": "659640"
  },
  {
    "text": "what that really means is the host is now has the right of last refusal for",
    "start": "659640",
    "end": "666000"
  },
  {
    "text": "all operations that that module needs that wants to execute",
    "start": "666000",
    "end": "671959"
  },
  {
    "text": "there are anti-forgery checks so depending on the runtime you'll see a",
    "start": "673079",
    "end": "681300"
  },
  {
    "text": "whole bunch of security that prevents the module itself from being tampered with at runtime from outside",
    "start": "681300",
    "end": "688320"
  },
  {
    "text": "and some runtimes will compile the webassembly module into",
    "start": "688320",
    "end": "694920"
  },
  {
    "text": "machine code when it starts up and that's also a configurable option up to",
    "start": "694920",
    "end": "702180"
  },
  {
    "text": "the host or the runtime",
    "start": "702180",
    "end": "706940"
  },
  {
    "text": "so there's another standard within the webassembly community called Wazi",
    "start": "708140",
    "end": "715140"
  },
  {
    "text": "and it stands for the web assembly systems interface and its original design was to close that",
    "start": "715140",
    "end": "722940"
  },
  {
    "text": "Gap and give webassembly modules some access to system resources",
    "start": "722940",
    "end": "730339"
  },
  {
    "text": "there are a lot of blog posts and even documentation that",
    "start": "730980",
    "end": "736079"
  },
  {
    "text": "kind of steer you toward the idea that Wazi is basically a webassembly version of posix",
    "start": "736079",
    "end": "741420"
  },
  {
    "text": "that is not the case and thinking that can actually get you into",
    "start": "741420",
    "end": "746880"
  },
  {
    "text": "some trouble like I said the YZ modules are allowed",
    "start": "746880",
    "end": "754019"
  },
  {
    "text": "to do certain types of i o but again the host gets to refuse or Grant access to",
    "start": "754019",
    "end": "760440"
  },
  {
    "text": "those if I want a web assembly module that's",
    "start": "760440",
    "end": "766260"
  },
  {
    "text": "compiled to wazzy to read a file or write a file or do any kind of disk i o",
    "start": "766260",
    "end": "774720"
  },
  {
    "text": "the runtime itself the runtime itself needs to",
    "start": "774720",
    "end": "780980"
  },
  {
    "text": "pre-approve that file so when I start it wasn't a web assembly runtime I have to",
    "start": "780980",
    "end": "787260"
  },
  {
    "text": "tell it this directory or these files are available to the webassembly module",
    "start": "787260",
    "end": "793440"
  },
  {
    "text": "and if I don't tell it that the webassembly module will not be able to access it",
    "start": "793440",
    "end": "799680"
  },
  {
    "text": "so with that I'm going to take a look at a",
    "start": "799680",
    "end": "805560"
  },
  {
    "text": "uh yazzy demo and again the categories here are worky and no worky so we'll",
    "start": "805560",
    "end": "811620"
  },
  {
    "text": "take a look at the work E1 first",
    "start": "811620",
    "end": "814820"
  },
  {
    "text": "and you'll see that there is a print line statement here and in a wasm32 on regular wasm32 on",
    "start": "817320",
    "end": "827220"
  },
  {
    "text": "known Target you would be unable to do that you don't have access to standard out",
    "start": "827220",
    "end": "834060"
  },
  {
    "text": "so but since I'm going to use YZ I do have that act that ability and",
    "start": "834060",
    "end": "843800"
  },
  {
    "text": "you'll see that the target the rest Target here is wasn't 32 why is he",
    "start": "843800",
    "end": "848880"
  },
  {
    "text": "that's crucial if I had left that as wasm32 unknown I wouldn't have been able",
    "start": "848880",
    "end": "855300"
  },
  {
    "text": "to run this so here you can see that my webassembly module now wrote to standard out",
    "start": "855300",
    "end": "862620"
  },
  {
    "text": "and still performed the math so now let's go to networking and",
    "start": "862620",
    "end": "872600"
  },
  {
    "text": "see what a malicious actor might try and do so here it looks pretty much the same as",
    "start": "873480",
    "end": "881160"
  },
  {
    "text": "the other rust code except it's reading from a file called food.text and I'm",
    "start": "881160",
    "end": "889019"
  },
  {
    "text": "going to print the files metadata here and then add some more you know highly",
    "start": "889019",
    "end": "895019"
  },
  {
    "text": "efficient debug statements right there",
    "start": "895019",
    "end": "898760"
  },
  {
    "text": "and again the Run command is the same it's just executing against a wazy",
    "start": "900180",
    "end": "907320"
  },
  {
    "text": "Target so now again remember the unreachable",
    "start": "907320",
    "end": "913139"
  },
  {
    "text": "that I mentioned before it failed to invoke add and there's also",
    "start": "913139",
    "end": "920100"
  },
  {
    "text": "a big panic and uh",
    "start": "920100",
    "end": "925320"
  },
  {
    "text": "this is the important bit which is that it failed to find a pre-opened file",
    "start": "925320",
    "end": "931680"
  },
  {
    "text": "descriptor through which food.text could be open um",
    "start": "931680",
    "end": "936779"
  },
  {
    "text": "I don't want to go into too much detail but the web the wazzy API allows for",
    "start": "936779",
    "end": "943880"
  },
  {
    "text": "descriptors to be accessed and read read from and written to and",
    "start": "943880",
    "end": "951600"
  },
  {
    "text": "but they don't have the ability to create their own so the host has to",
    "start": "951600",
    "end": "957240"
  },
  {
    "text": "pre-create a file descriptor in order for the Wazi file the wazzy",
    "start": "957240",
    "end": "962820"
  },
  {
    "text": "module to be able to read from that file foreign",
    "start": "962820",
    "end": "970040"
  },
  {
    "text": "we're going to switch from the the regular webassembly standards to",
    "start": "978199",
    "end": "985380"
  },
  {
    "text": "uh wasm Cloud the cncf open source project and that sits on top of why some time",
    "start": "985380",
    "end": "992279"
  },
  {
    "text": "and provides a number of extra features the probably the most important of which",
    "start": "992279",
    "end": "1000199"
  },
  {
    "text": "is capability security so I mentioned that for a yazzy module",
    "start": "1000199",
    "end": "1008899"
  },
  {
    "text": "you might get a descriptor and you can read from it and write to it but",
    "start": "1008899",
    "end": "1015440"
  },
  {
    "text": "you don't really know why you have no one really knows why you have that descriptor",
    "start": "1015440",
    "end": "1021399"
  },
  {
    "text": "when you build a regular microservice a regular application running somewhere",
    "start": "1021399",
    "end": "1027798"
  },
  {
    "text": "without webassembly your security policy might grant that",
    "start": "1027799",
    "end": "1034160"
  },
  {
    "text": "thing access to sockets but what it really ever does is allow you to declare",
    "start": "1034160",
    "end": "1042280"
  },
  {
    "text": "why it needs that socket so the wasm cloud runtime",
    "start": "1042280",
    "end": "1050660"
  },
  {
    "text": "lets you sign your webassembly module so that you",
    "start": "1050660",
    "end": "1056120"
  },
  {
    "text": "can declare that one of them needs an HTTP server or a message broker or a",
    "start": "1056120",
    "end": "1062120"
  },
  {
    "text": "data store and the Wiseman Cloud runtime is responsible for",
    "start": "1062120",
    "end": "1067840"
  },
  {
    "text": "vetting that you're allowed to do what you claim you're allowed to do",
    "start": "1067840",
    "end": "1072919"
  },
  {
    "text": "and then actually stitching together the webassembly module with the capabilities",
    "start": "1072919",
    "end": "1079460"
  },
  {
    "text": "that it needs so in this rust code here you can see",
    "start": "1079460",
    "end": "1085520"
  },
  {
    "text": "that there is a key Value Store I've called increment on the key",
    "start": "1085520",
    "end": "1091940"
  },
  {
    "text": "and I've sent a request on a message topic called security.day",
    "start": "1091940",
    "end": "1099860"
  },
  {
    "text": "but what's missing there is uh pretty much everything so there's no",
    "start": "1100460",
    "end": "1107600"
  },
  {
    "text": "connection strings there's no secrets there's no urls",
    "start": "1107600",
    "end": "1113020"
  },
  {
    "text": "and um more importantly you don't even know which key value store you're talking to",
    "start": "1113020",
    "end": "1120160"
  },
  {
    "text": "nor do you know which message broker you're talking to so at runtime",
    "start": "1120160",
    "end": "1126200"
  },
  {
    "text": "when you are in your inner developer loop on your laptop you could use a",
    "start": "1126200",
    "end": "1131780"
  },
  {
    "text": "whole bunch of in-memory things but when you're in development you could",
    "start": "1131780",
    "end": "1136880"
  },
  {
    "text": "use one key value store and then in production you could use redis or Cassandra or whatever and",
    "start": "1136880",
    "end": "1145240"
  },
  {
    "text": "you don't have to recompile or redeploy your code and that is specifically designed to",
    "start": "1145460",
    "end": "1152299"
  },
  {
    "text": "address things like the log for J vulnerability where in",
    "start": "1152299",
    "end": "1158000"
  },
  {
    "text": "current development models I have to compile all of my dependencies into my",
    "start": "1158000",
    "end": "1165980"
  },
  {
    "text": "deployment unit so my logger the the choice I've made for how I log",
    "start": "1165980",
    "end": "1172520"
  },
  {
    "text": "that's built into this thing that I'm deploying even though you know I might only have four",
    "start": "1172520",
    "end": "1179240"
  },
  {
    "text": "lines of business business logic in there and so wasmcloud is designed to let me",
    "start": "1179240",
    "end": "1186440"
  },
  {
    "text": "strip away all that right pure business logic and also be confident that these",
    "start": "1186440",
    "end": "1192860"
  },
  {
    "text": "modules are secure so here's another example where it",
    "start": "1192860",
    "end": "1199880"
  },
  {
    "text": "receives an HTTP request and returns an HTTP response but nowhere in there does",
    "start": "1199880",
    "end": "1206360"
  },
  {
    "text": "it say what port it's running on or even if it's running in under a unit",
    "start": "1206360",
    "end": "1212840"
  },
  {
    "text": "test so why isn't cloudy embeds Json web",
    "start": "1212840",
    "end": "1219140"
  },
  {
    "text": "tokens inside the webassembly module so that we can verify them in isolation and verify them",
    "start": "1219140",
    "end": "1226340"
  },
  {
    "text": "offline one of the big things that I wanted to be able to do was take a look at a",
    "start": "1226340",
    "end": "1232100"
  },
  {
    "text": "webassembly module and decide whether I should let it do what it wants to do",
    "start": "1232100",
    "end": "1237200"
  },
  {
    "text": "without having to consult a central Authority you know if I need to talk to Docker",
    "start": "1237200",
    "end": "1243559"
  },
  {
    "text": "notary or something else then what is the how do I Define my security",
    "start": "1243559",
    "end": "1251960"
  },
  {
    "text": "Logic for when I can't contact the authority and so this one allows me to",
    "start": "1251960",
    "end": "1258919"
  },
  {
    "text": "access that stuff without potentially without even having network",
    "start": "1258919",
    "end": "1264140"
  },
  {
    "text": "access so this is",
    "start": "1264140",
    "end": "1271539"
  },
  {
    "text": "all right so again I have uh working in no workie",
    "start": "1276200",
    "end": "1281960"
  },
  {
    "text": "if I inspect the claims in",
    "start": "1281960",
    "end": "1287860"
  },
  {
    "text": "this one you'll see the account this is the issuer the",
    "start": "1291200",
    "end": "1296960"
  },
  {
    "text": "module that's essentially the subject um each one of these webassembly modules",
    "start": "1296960",
    "end": "1303020"
  },
  {
    "text": "is issued cryptographically and you can see that this one is allowed",
    "start": "1303020",
    "end": "1309380"
  },
  {
    "text": "to use the HTTP server and the key Value Store",
    "start": "1309380",
    "end": "1314919"
  },
  {
    "text": "and if I were to look at the networking",
    "start": "1314980",
    "end": "1320320"
  },
  {
    "text": "you'll see that it has HTTP server but it doesn't have the key Value Store",
    "start": "1320320",
    "end": "1325460"
  },
  {
    "text": "capability so at runtime the wasm cloud host",
    "start": "1325460",
    "end": "1332059"
  },
  {
    "text": "will reject any attempt by this module to access any key Value Store",
    "start": "1332059",
    "end": "1340360"
  },
  {
    "text": "and let's see if I can",
    "start": "1340720",
    "end": "1344980"
  },
  {
    "text": "I can remember exactly how to do this um",
    "start": "1347000",
    "end": "1352600"
  },
  {
    "text": "sorry I uh it's not wrong it's JWT only okay",
    "start": "1365360",
    "end": "1373720"
  },
  {
    "text": "there we go",
    "start": "1378380",
    "end": "1381159"
  },
  {
    "text": "so you can see when this was issued which was Monday",
    "start": "1390440",
    "end": "1396380"
  },
  {
    "text": "January 30th the issuer and the subject",
    "start": "1396380",
    "end": "1402940"
  },
  {
    "text": "these are these are Ed 25519 keys they just have",
    "start": "1402940",
    "end": "1411020"
  },
  {
    "text": "they've been encoded in a way that makes it so that they're double clickable and",
    "start": "1411020",
    "end": "1416500"
  },
  {
    "text": "I can tell from the first character the purpose of the key so the first",
    "start": "1416500",
    "end": "1422419"
  },
  {
    "text": "character here is a means it's an account key first character m means it's a module",
    "start": "1422419",
    "end": "1428299"
  },
  {
    "text": "key and I'm keeping the in the hash of the",
    "start": "1428299",
    "end": "1434720"
  },
  {
    "text": "module so that I can verify whether it's been tampered with and here's the list of capabilities that",
    "start": "1434720",
    "end": "1441080"
  },
  {
    "text": "it's allowed to use",
    "start": "1441080",
    "end": "1443860"
  },
  {
    "text": "so the next thing that I want to talk about is cluster security so",
    "start": "1453740",
    "end": "1459100"
  },
  {
    "text": "uh when running everything on a single machine offline",
    "start": "1459100",
    "end": "1465880"
  },
  {
    "text": "your security risk is much much smaller than when you're running a big distributed system in production",
    "start": "1465880",
    "end": "1473539"
  },
  {
    "text": "and wasmcloud allows you to form self-healing clusters of wasm cloud",
    "start": "1473539",
    "end": "1481520"
  },
  {
    "text": "hosts that are running your modules and so because these modules are so small",
    "start": "1481520",
    "end": "1486679"
  },
  {
    "text": "you can tell it to run a module on one host you can move it from one host to",
    "start": "1486679",
    "end": "1492500"
  },
  {
    "text": "another you can scale it from one running instance to 100 all of that is done through the",
    "start": "1492500",
    "end": "1499159"
  },
  {
    "text": "distributed systems functionality so",
    "start": "1499159",
    "end": "1505120"
  },
  {
    "text": "in a wasmcloud cluster every host has a key pair",
    "start": "1505120",
    "end": "1510919"
  },
  {
    "text": "and each host only trusts a certain set of public keys so for any given wasm",
    "start": "1510919",
    "end": "1519080"
  },
  {
    "text": "Cloud cluster the hosts have essentially a trust list",
    "start": "1519080",
    "end": "1524360"
  },
  {
    "text": "of which other hosts they um they will allow to communicate with",
    "start": "1524360",
    "end": "1532400"
  },
  {
    "text": "and so a an invocation whether it's an actor called whether it's a webassembly",
    "start": "1532400",
    "end": "1537620"
  },
  {
    "text": "module calling another one or uh whether it's a module calling the key Value",
    "start": "1537620",
    "end": "1543559"
  },
  {
    "text": "Store those invocations are",
    "start": "1543559",
    "end": "1549500"
  },
  {
    "text": "uh also signed and each one of those also contains a Json web token and so",
    "start": "1549500",
    "end": "1555820"
  },
  {
    "text": "anytime a wasm cloud host receives a request to execute something",
    "start": "1555820",
    "end": "1561260"
  },
  {
    "text": "from a remote entity it can verify that it came from a well-known host that it hasn't been",
    "start": "1561260",
    "end": "1567919"
  },
  {
    "text": "tampered with that the host is one of the ones that's allowed to communicate and you can even add extra policies so",
    "start": "1567919",
    "end": "1575600"
  },
  {
    "text": "that you can verify that certain issuers are allowed to exist or",
    "start": "1575600",
    "end": "1582740"
  },
  {
    "text": "allowed to communicate but other ones aren't that comes in pretty handy making when you want to set a policy that'll that",
    "start": "1582740",
    "end": "1590000"
  },
  {
    "text": "forces you to use different signature identities in Devon prod so",
    "start": "1590000",
    "end": "1597740"
  },
  {
    "text": "you don't accidentally deploy something destined for Dev to production",
    "start": "1597740",
    "end": "1604900"
  },
  {
    "text": "and sorry I kind of went through a little bit fast on that one but uh",
    "start": "1606440",
    "end": "1613659"
  },
  {
    "text": "if you have any questions feel free to ask kind of covered a lot so",
    "start": "1614020",
    "end": "1620240"
  },
  {
    "text": "um more than having to answer questions about plasm Cloud security webassembly",
    "start": "1620240",
    "end": "1625659"
  },
  {
    "text": "and I believe that QR code is for session feedback",
    "start": "1625659",
    "end": "1632260"
  },
  {
    "text": "foreign",
    "start": "1632720",
    "end": "1634900"
  },
  {
    "text": "Cloud can run anywhere you can spawn the host process",
    "start": "1648039",
    "end": "1653059"
  },
  {
    "text": "so you could run it as a you can run that host as a in a as a JavaScript host",
    "start": "1653059",
    "end": "1660260"
  },
  {
    "text": "inside a browser tab we have an Elixir OTP host that we use",
    "start": "1660260",
    "end": "1665659"
  },
  {
    "text": "for the cloud backend there are smaller hosts that we're planning on building",
    "start": "1665659",
    "end": "1671779"
  },
  {
    "text": "that are you know targeting you know like esp32 devices things like that our",
    "start": "1671779",
    "end": "1677840"
  },
  {
    "text": "host runs on Raspberry Pi's one of my favorite demos is",
    "start": "1677840",
    "end": "1683779"
  },
  {
    "text": "one of my colleagues uh brings up the Weisman Cloud host on a Raspberry Pi",
    "start": "1683779",
    "end": "1689240"
  },
  {
    "text": "and you can see it",
    "start": "1689240",
    "end": "1695140"
  },
  {
    "text": "uh we'll see if this actually",
    "start": "1697039",
    "end": "1701620"
  },
  {
    "text": "note to self Wi-Fi is low",
    "start": "1712940",
    "end": "1717759"
  },
  {
    "text": "and also unreliable anyway um",
    "start": "1718299",
    "end": "1724000"
  },
  {
    "text": "when he starts the uh the host running on",
    "start": "1724000",
    "end": "1730100"
  },
  {
    "text": "the Raspberry Pi you can see it show up in the network and you can",
    "start": "1730100",
    "end": "1737320"
  },
  {
    "text": "basically treat it like an empty vessel you can send compute down to that Raspberry Pi",
    "start": "1737320",
    "end": "1744140"
  },
  {
    "text": "so it'll run inside kubernetes it'll run inside",
    "start": "1744140",
    "end": "1749380"
  },
  {
    "text": "anybody else's Cloud it'll run in a browser tab basically runs wherever you",
    "start": "1749419",
    "end": "1755480"
  },
  {
    "text": "want to start that runtime",
    "start": "1755480",
    "end": "1758919"
  },
  {
    "text": "yeah so if you there are a number of performance ones if you go to the our",
    "start": "1763580",
    "end": "1771559"
  },
  {
    "text": "website you'll see some specific measurements but",
    "start": "1771559",
    "end": "1777260"
  },
  {
    "text": "a webassembly module that has business logic in it",
    "start": "1777260",
    "end": "1782740"
  },
  {
    "text": "that was built using rust can be to 300K in size",
    "start": "1782740",
    "end": "1790700"
  },
  {
    "text": "or smaller and so when you think about like the startup cost for a particular",
    "start": "1790700",
    "end": "1797620"
  },
  {
    "text": "piece of compute you're not starting up a giant Docker image you're not starting up a one gig jvm so there are some",
    "start": "1797620",
    "end": "1806299"
  },
  {
    "text": "startup advantages there are scaling advantages so I can take that one module",
    "start": "1806299",
    "end": "1812360"
  },
  {
    "text": "and run a thousand copies of it across 10 hosts and now I'm I'm automatically",
    "start": "1812360",
    "end": "1817940"
  },
  {
    "text": "spreading the load across those",
    "start": "1817940",
    "end": "1821320"
  },
  {
    "text": "any other questions yeah",
    "start": "1825080",
    "end": "1829840"
  },
  {
    "text": "yes so the capabilities are embedded inside the file itself",
    "start": "1842020",
    "end": "1848679"
  },
  {
    "text": "if I were to I don't have a a decent tool to explain to show the the",
    "start": "1848679",
    "end": "1856940"
  },
  {
    "text": "Explorer of it but wash is the wise and Cloud CLI",
    "start": "1856940",
    "end": "1862880"
  },
  {
    "text": "and you can use that to get information on what's inside that module so if I",
    "start": "1862880",
    "end": "1870380"
  },
  {
    "text": "don't want the JWT and I want the user friendly information this is what I get and you'll see that you know there's",
    "start": "1870380",
    "end": "1879440"
  },
  {
    "text": "it has all the usual benefits of a Json web token like valid",
    "start": "1879440",
    "end": "1885320"
  },
  {
    "text": "before date and expiration and so on then",
    "start": "1885320",
    "end": "1891340"
  },
  {
    "text": "uh wash will do it",
    "start": "1891500",
    "end": "1894940"
  },
  {
    "text": "yeah if you're using one of our templates to build one of these modules you can just",
    "start": "1904880",
    "end": "1910640"
  },
  {
    "text": "type wash build and it automatically signs it with the information in the toml file that's",
    "start": "1910640",
    "end": "1915799"
  },
  {
    "text": "there",
    "start": "1915799",
    "end": "1918100"
  },
  {
    "text": "I think I saw one other hand yeah",
    "start": "1921260",
    "end": "1925520"
  },
  {
    "text": "do that um",
    "start": "1933260",
    "end": "1939260"
  },
  {
    "text": "so it is in general we tend to prefer the let it crash methodology so",
    "start": "1939260",
    "end": "1947059"
  },
  {
    "text": "if that actor tries to do something that traps when it hits that trap we're just going",
    "start": "1947059",
    "end": "1954740"
  },
  {
    "text": "to dispose of the actor and then bring another another one back because they're",
    "start": "1954740",
    "end": "1960260"
  },
  {
    "text": "so tiny and they're already sitting and the bites are already sitting in memory it costs us you know a few microseconds",
    "start": "1960260",
    "end": "1967700"
  },
  {
    "text": "to bring it back after death um and then",
    "start": "1967700",
    "end": "1973720"
  },
  {
    "text": "an attempt to use a capability that it's not allowed to use that doesn't actually crash the actor we just reject the call",
    "start": "1973720",
    "end": "1981020"
  },
  {
    "text": "and log the error message",
    "start": "1981020",
    "end": "1984700"
  },
  {
    "text": "any more questions great thanks very much",
    "start": "1989779",
    "end": "1996820"
  }
]