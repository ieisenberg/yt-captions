[
  {
    "text": "hello everyone my name is Adam furmanik and I'm a head of devrel at matis and",
    "start": "599",
    "end": "7259"
  },
  {
    "text": "today we are going to talk a little bit about the missing part of our CI CD",
    "start": "7259",
    "end": "13019"
  },
  {
    "text": "pipelines namely database guardrails we are going to talk about how to safely",
    "start": "13019",
    "end": "18960"
  },
  {
    "text": "deploy stuff to production how to prevent bad code from reaching a",
    "start": "18960",
    "end": "24240"
  },
  {
    "text": "production environments and how to make sure that we have a proper database",
    "start": "24240",
    "end": "29580"
  },
  {
    "text": "observability monitoring and troubleshooting in place let's begin",
    "start": "29580",
    "end": "35460"
  },
  {
    "text": "so in today's world we just can't wait for",
    "start": "35460",
    "end": "40920"
  },
  {
    "text": "the errors to pop up in production it's way too late for us to notice that",
    "start": "40920",
    "end": "46320"
  },
  {
    "text": "something is wrong we want to make sure that things do not work bad when they",
    "start": "46320",
    "end": "52800"
  },
  {
    "text": "are deployed we want to make sure they are correct and we need to push these checks to the left as much as possible",
    "start": "52800",
    "end": "59280"
  },
  {
    "text": "meaning that we need to verify our applications as early as it is possible we can't wait for the checks to happen",
    "start": "59280",
    "end": "66600"
  },
  {
    "text": "like during expensive load tests then also happen in very late like very late in our pipeline CI CD pipeline we need",
    "start": "66600",
    "end": "74460"
  },
  {
    "text": "to be able to take all the stuff and test it as early as possible ideally",
    "start": "74460",
    "end": "79560"
  },
  {
    "text": "when we are just implementing our changes when we are just implementing the stuff in our developer environment",
    "start": "79560",
    "end": "87420"
  },
  {
    "text": "that's very first thing second thing is when something goes wrong we need to be able to pinpoint the",
    "start": "87420",
    "end": "94920"
  },
  {
    "text": "issue exactly and we need to do it quickly we need to be able to show what",
    "start": "94920",
    "end": "100320"
  },
  {
    "text": "is going on whether it is because of recent changes or whether this is because of what the code we executed or",
    "start": "100320",
    "end": "107100"
  },
  {
    "text": "maybe because the data changed around us we have now different traffic distribution we have no different data",
    "start": "107100",
    "end": "114240"
  },
  {
    "text": "flowing into our application we have various other things we need to be able to tell exactly which line of code",
    "start": "114240",
    "end": "120720"
  },
  {
    "text": "causes the issue or whether it's like misconfiguration or maybe this is",
    "start": "120720",
    "end": "126240"
  },
  {
    "text": "because some external World changed this is what we need to do this is what we need to be able to answer when we are",
    "start": "126240",
    "end": "133500"
  },
  {
    "text": "talking about our applications and it's a must-have no matter whether we are using like or working with small",
    "start": "133500",
    "end": "139200"
  },
  {
    "text": "applications with like one transaction per second or maybe when we are dealing with very big scaled out applications",
    "start": "139200",
    "end": "145500"
  },
  {
    "text": "that hundred like thousands of transactions every second this is a must-have for every single application",
    "start": "145500",
    "end": "151140"
  },
  {
    "text": "to make sure that we deploy the proper code to production and when something",
    "start": "151140",
    "end": "156300"
  },
  {
    "text": "goes wrong we need to have full contacts around to be able to root cause issues quickly so how do we actually know",
    "start": "156300",
    "end": "163140"
  },
  {
    "text": "whether the code that we deploy is it going to work well in production how do",
    "start": "163140",
    "end": "168180"
  },
  {
    "text": "we know whether we can safely Deploy on like Friday afternoon and things are going to work well over the weekend when",
    "start": "168180",
    "end": "174540"
  },
  {
    "text": "we are safely resting at home right and what they're typically tell us is what",
    "start": "174540",
    "end": "179760"
  },
  {
    "text": "even can go wrong right there are various areas that may break one of them is like deployment may go wrong we have",
    "start": "179760",
    "end": "187500"
  },
  {
    "text": "multiple Technologies we have multiple platforms we have Windows Linux we have",
    "start": "187500",
    "end": "192540"
  },
  {
    "text": "various Cloud providers like AWS like Microsoft Azure we have other places",
    "start": "192540",
    "end": "198180"
  },
  {
    "text": "where which differ in terms of like what they run how they run it etc etc for",
    "start": "198180",
    "end": "204239"
  },
  {
    "text": "instance permissions this is a source of various multiple problems when we were talking about the deployment we tested",
    "start": "204239",
    "end": "210420"
  },
  {
    "text": "our application in like the developer environment but then when we deploy to",
    "start": "210420",
    "end": "215519"
  },
  {
    "text": "production we forgot to update the IM role in AWS or we forgot to like access",
    "start": "215519",
    "end": "221280"
  },
  {
    "text": "or Grant some permissions to access like services or repositories or whatnot",
    "start": "221280",
    "end": "226920"
  },
  {
    "text": "right other thingy is connection strings we forgot to change the connection string or we didn't replicate it",
    "start": "226920",
    "end": "233159"
  },
  {
    "text": "properly we didn't configure environment variables we didn't configure connection pooling or scalability of or other",
    "start": "233159",
    "end": "240060"
  },
  {
    "text": "things like even simply line ending like Windows and Linux they differ in this",
    "start": "240060",
    "end": "246000"
  },
  {
    "text": "area so generally multiple things may break just in the deployment phase right",
    "start": "246000",
    "end": "252060"
  },
  {
    "text": "but the other thing that may go wrong is like the code made note material right we may have edge cases we may have",
    "start": "252060",
    "end": "259799"
  },
  {
    "text": "unexpected like data distribution we may have different Locale we may have different bugs or generally stuff that",
    "start": "259799",
    "end": "266580"
  },
  {
    "text": "we did not foresee it may work very well on our machines but when we deploy to",
    "start": "266580",
    "end": "271740"
  },
  {
    "text": "production a it fails badly right however those things we can test to some",
    "start": "271740",
    "end": "277860"
  },
  {
    "text": "extent we can figure that out if we are aware of them right but not all of them",
    "start": "277860",
    "end": "283259"
  },
  {
    "text": "will be able to foresee so not all of these changes will we be able to like",
    "start": "283259",
    "end": "288600"
  },
  {
    "text": "predict test verify accordingly before going to production finally another",
    "start": "288600",
    "end": "295560"
  },
  {
    "text": "thing that may cause multiple issues on our end is like the different load of the application when we are talking",
    "start": "295560",
    "end": "301740"
  },
  {
    "text": "about running things in like local environment we're typically just trying things out testing happy paths or like",
    "start": "301740",
    "end": "308460"
  },
  {
    "text": "critical paths whether they work well or not however when we are talking about",
    "start": "308460",
    "end": "313620"
  },
  {
    "text": "running things in production we need to deal with peak times we need to deal with different activity happening like",
    "start": "313620",
    "end": "321120"
  },
  {
    "text": "in the morning in the evening during the night over the weekend or during work days we may get different traffic",
    "start": "321120",
    "end": "327660"
  },
  {
    "text": "distribution that may also depend on the country on the continent we are running we may have have completely different",
    "start": "327660",
    "end": "333419"
  },
  {
    "text": "data available like in the US versus in Europe generally various things may",
    "start": "333419",
    "end": "338940"
  },
  {
    "text": "break that are strictly related to how we deal with databases right whether we",
    "start": "338940",
    "end": "345479"
  },
  {
    "text": "perform efficient queries whether we test things properly whether there can be scaled out and whatnot so those are",
    "start": "345479",
    "end": "353220"
  },
  {
    "text": "multiple areas that may go wrong when we are talking about the deployment and",
    "start": "353220",
    "end": "358380"
  },
  {
    "text": "about like pushing our code to production how can we make sure that these things are going to work well well",
    "start": "358380",
    "end": "364800"
  },
  {
    "text": "the typical thing they tell us is let's use CI CD and this is going to solve all",
    "start": "364800",
    "end": "371220"
  },
  {
    "text": "of our problems right so just to set things straight cicd stands for continuous integration continuous",
    "start": "371220",
    "end": "377880"
  },
  {
    "text": "integration which means that we take all of the changes compile them together prepare the application package run unit",
    "start": "377880",
    "end": "385919"
  },
  {
    "text": "tests run an end-to-end test integration test whatever just to make sure that the",
    "start": "385919",
    "end": "392639"
  },
  {
    "text": "things are like running properly in our synthetic smaller environments right",
    "start": "392639",
    "end": "398819"
  },
  {
    "text": "this is continuous integration CI for short CD on the other hand stands for two different things one of them being",
    "start": "398819",
    "end": "405240"
  },
  {
    "text": "continuous delivery we take the package that we build with CI and now we want to",
    "start": "405240",
    "end": "410699"
  },
  {
    "text": "deploy this package to all non-production environments so this could be our Dev environment our team",
    "start": "410699",
    "end": "417539"
  },
  {
    "text": "environment pre-production environment QA staging whatever else so do we deploy",
    "start": "417539",
    "end": "423060"
  },
  {
    "text": "the package to all of these places to make sure first that it's possible to",
    "start": "423060",
    "end": "428220"
  },
  {
    "text": "deploy this package and second to keep all of these environments like in sync so that everyone using various",
    "start": "428220",
    "end": "435360"
  },
  {
    "text": "environments is exactly the same data the same logic the same behavior right and finally CD also stands for",
    "start": "435360",
    "end": "442199"
  },
  {
    "text": "continuous deployment continuous deployment is pushing application to the actual production automatically meaning",
    "start": "442199",
    "end": "449880"
  },
  {
    "text": "that we take the package that was previously deployed to all the non-production stages and now we want to",
    "start": "449880",
    "end": "456300"
  },
  {
    "text": "push it to production so to do it automatically so it runs right after we",
    "start": "456300",
    "end": "461400"
  },
  {
    "text": "commit stuff right that's the idea and they tell us hey you take CI you take CD",
    "start": "461400",
    "end": "467160"
  },
  {
    "text": "it solves all your issues right and you have your application tested well and",
    "start": "467160",
    "end": "472440"
  },
  {
    "text": "you can be sure that you can push it to production well but is it the case as we are going to see that is not the entire",
    "start": "472440",
    "end": "479520"
  },
  {
    "text": "truth and we are going to understand why so what can go wrong when we are talking about the deployment about the code",
    "start": "479520",
    "end": "485940"
  },
  {
    "text": "about the other stuff so we'll cover various areas like databases like object relational mapper libraries and the lack",
    "start": "485940",
    "end": "493380"
  },
  {
    "text": "of context when we are talking about the the application so let's start with databases",
    "start": "493380",
    "end": "498539"
  },
  {
    "text": "there are various things that may go wrong when we are talking about databases first thing is code may change",
    "start": "498539",
    "end": "506220"
  },
  {
    "text": "we are talking about application code here so you change the way you actually talk to the database you change what",
    "start": "506220",
    "end": "512700"
  },
  {
    "text": "data you extract from the database you generally modify your application code because you changed your like business",
    "start": "512700",
    "end": "519479"
  },
  {
    "text": "requirements or whatever else right so you change the code which results in",
    "start": "519479",
    "end": "524700"
  },
  {
    "text": "going to database and sending different queries no matter whether it's like SQL database whether it's nosql database key",
    "start": "524700",
    "end": "532260"
  },
  {
    "text": "Value Store documentdb whatever else you just change what you extract from the database the other thing that may change",
    "start": "532260",
    "end": "539279"
  },
  {
    "text": "over time is like schema changes meaning that hey we needed to add new column we",
    "start": "539279",
    "end": "544560"
  },
  {
    "text": "needed to remove a column we needed to change the column type we need to do various multiple things that may",
    "start": "544560",
    "end": "551339"
  },
  {
    "text": "actually break the things how we are dealing or interacting with the database those things are something that we",
    "start": "551339",
    "end": "559260"
  },
  {
    "text": "typically can test test with CI CD with unit tests Etc Etc at least to some extent however the",
    "start": "559260",
    "end": "567600"
  },
  {
    "text": "other group of issues which is also very difficult to to verify and the group of issues that we typically miss when we",
    "start": "567600",
    "end": "575160"
  },
  {
    "text": "are running unit tests or whatever is the query changes I'm not talking about",
    "start": "575160",
    "end": "580200"
  },
  {
    "text": "query changes in terms of like changing what query we send what we are talking about here is how the query is being",
    "start": "580200",
    "end": "587940"
  },
  {
    "text": "executed by the database this will depend on data volume how many",
    "start": "587940",
    "end": "594660"
  },
  {
    "text": "rows you have how many partitions in your table you have this will depend on",
    "start": "594660",
    "end": "600540"
  },
  {
    "text": "like the indexes being configured this will depend on like time of day other transactions running around log",
    "start": "600540",
    "end": "607320"
  },
  {
    "text": "contention and other stuff so we send exactly the same query as we used to",
    "start": "607320",
    "end": "612360"
  },
  {
    "text": "however over time the query changes the way it behaves SQL engine or your",
    "start": "612360",
    "end": "617760"
  },
  {
    "text": "database engine in general now executes the query differently that leads to Performance degradation and then leads",
    "start": "617760",
    "end": "624899"
  },
  {
    "text": "to generally deteriorated user experience so let's see exactly what may",
    "start": "624899",
    "end": "631500"
  },
  {
    "text": "go wrong when we are talking about issues of this kind the very first thing is like slow queries imagine that we",
    "start": "631500",
    "end": "638100"
  },
  {
    "text": "have an application that is basically doing something like hey we do have this application Root in here and we would",
    "start": "638100",
    "end": "644820"
  },
  {
    "text": "like to get the user for this particular user ID and what we would like to get is we have an apple like aggregate route so",
    "start": "644820",
    "end": "652740"
  },
  {
    "text": "we extract also some details about the user like details Pages questions reports whatnot and ultimately we just",
    "start": "652740",
    "end": "659760"
  },
  {
    "text": "want to return this one aggregate route from our database right however because",
    "start": "659760",
    "end": "665279"
  },
  {
    "text": "we join multiple tables and because we want to extract everything that is",
    "start": "665279",
    "end": "670680"
  },
  {
    "text": "related and this is actual problem that I observed like in one of my production applications this results in generating",
    "start": "670680",
    "end": "678180"
  },
  {
    "text": "this SQL query like select state a select star from table and joining multiple tables on the site right",
    "start": "678180",
    "end": "684959"
  },
  {
    "text": "however when you take a look at that it is possible and this is what actually",
    "start": "684959",
    "end": "690300"
  },
  {
    "text": "happened that just this one aggregate route resulted in extracting 300 000",
    "start": "690300",
    "end": "696720"
  },
  {
    "text": "rows from the database and returning to the orm to the application why is that",
    "start": "696720",
    "end": "703079"
  },
  {
    "text": "the case that is because we do have those joints so if you have multiple rows in each table then you effectively",
    "start": "703079",
    "end": "709920"
  },
  {
    "text": "exponentially multiply how many rows you get in the output of the of this query",
    "start": "709920",
    "end": "716579"
  },
  {
    "text": "ultimately you get all of those rows most of the columns are really like",
    "start": "716579",
    "end": "721920"
  },
  {
    "text": "duplicates and your orm knows how to deal with them and how to handle all of that however it takes 25 seconds to",
    "start": "721920",
    "end": "729720"
  },
  {
    "text": "complete and this is actual statistic from the production server 300 000 rows and 25 seconds to execute this query how",
    "start": "729720",
    "end": "738300"
  },
  {
    "text": "can we help that or where the problem is exactly the problem is here not that we",
    "start": "738300",
    "end": "744420"
  },
  {
    "text": "are chanking 300 000 rows the problem the bigger problem we have here is that we do not notice that before we go to",
    "start": "744420",
    "end": "751920"
  },
  {
    "text": "production because when we are talking about developer environments local environments then we probably don't even",
    "start": "751920",
    "end": "758040"
  },
  {
    "text": "have that much data to generate 300 000 rows and to see the performance issues",
    "start": "758040",
    "end": "763260"
  },
  {
    "text": "right how can we fix that in this particular case the solution was to basically split this aggregate route of",
    "start": "763260",
    "end": "770160"
  },
  {
    "text": "user into multiple like independent fix that we wanted to get from the database",
    "start": "770160",
    "end": "776700"
  },
  {
    "text": "this resulted in running multiple queries against the database right multiple SQL statements however because",
    "start": "776700",
    "end": "784019"
  },
  {
    "text": "every statement is very small and returns only a couple of rows all of those statements together executed in",
    "start": "784019",
    "end": "791040"
  },
  {
    "text": "like Split Second and resulted in getting way less way fewer rows from the",
    "start": "791040",
    "end": "798600"
  },
  {
    "text": "database so this is the solution that we could apply in this particular case but",
    "start": "798600",
    "end": "804240"
  },
  {
    "text": "in order to know that we can solve it this way we need to identify the problem we need to have a full-blown",
    "start": "804240",
    "end": "810240"
  },
  {
    "text": "observability of hey that query is actually going to work very slow when we",
    "start": "810240",
    "end": "816240"
  },
  {
    "text": "are talking about um running the code and production what else can go wrong well depending on how",
    "start": "816240",
    "end": "823320"
  },
  {
    "text": "your engine SQL engine or how your rlm library works you may run different",
    "start": "823320",
    "end": "829079"
  },
  {
    "text": "queries that are logically equivalent however they result in completely different performance let's take this",
    "start": "829079",
    "end": "835500"
  },
  {
    "text": "handcrafted synthetic query so we have a table that is called boarding passes and it has something like 8 million rows",
    "start": "835500",
    "end": "842279"
  },
  {
    "text": "what we want to do now is we are taking or sending two different queries that",
    "start": "842279",
    "end": "848100"
  },
  {
    "text": "are logically like equivalent they extract exactly the same data in the first query we use the Common Table",
    "start": "848100",
    "end": "854519"
  },
  {
    "text": "expression CTE for short which is can be considered like an alias for a temporal",
    "start": "854519",
    "end": "860459"
  },
  {
    "text": "let's say table or like part of the query that we are going to reuse later on so we get rows from boarding passes",
    "start": "860459",
    "end": "867660"
  },
  {
    "text": "and we calculate like md5 hash twice for each ticket number and then we take this",
    "start": "867660",
    "end": "874620"
  },
  {
    "text": "table which is now called CTE performance We join it like three times and together to get like matching grows",
    "start": "874620",
    "end": "882120"
  },
  {
    "text": "and matching growth we identify them here by ticket number and the flight ID and the Bolding number and we just",
    "start": "882120",
    "end": "888600"
  },
  {
    "text": "filter those things based on the hash and you can see it's the same hash here and there or we can send equivalent and",
    "start": "888600",
    "end": "897120"
  },
  {
    "text": "query which does not use CTE what we do now this time is we just run the select",
    "start": "897120",
    "end": "904320"
  },
  {
    "text": "statement We join boarding passes three times and we calculate this this hash",
    "start": "904320",
    "end": "909600"
  },
  {
    "text": "three times for every single table separately right ultimately we get select count star so we just get the",
    "start": "909600",
    "end": "916440"
  },
  {
    "text": "number of rows and the interesting thing is even those two queries are equivalent",
    "start": "916440",
    "end": "921720"
  },
  {
    "text": "first of them runs in like 13 seconds while the other executes in eight",
    "start": "921720",
    "end": "927300"
  },
  {
    "text": "seconds so it's nearly half the time of the first query right so what we can notice here is that hey those queries",
    "start": "927300",
    "end": "934560"
  },
  {
    "text": "are called equivalent if you were to write a query like by hand you would probably go with the one of the top of",
    "start": "934560",
    "end": "940680"
  },
  {
    "text": "the screen however this would result in like degradation of performance and you",
    "start": "940680",
    "end": "946019"
  },
  {
    "text": "won't notice that before going to production most likely because you do",
    "start": "946019",
    "end": "951360"
  },
  {
    "text": "not have a proper observability around your databases and you just don't see what's happening behind the scenes so",
    "start": "951360",
    "end": "959100"
  },
  {
    "text": "this is another thingy that may break yet another thing that may go wrong is like incompatible changes in the schema",
    "start": "959100",
    "end": "966240"
  },
  {
    "text": "adding a column to the table may seem like something that is innocuous shouldn't should be very like safe and",
    "start": "966240",
    "end": "973320"
  },
  {
    "text": "we can do it anytime that's not necessarily the case the problem with adding the column is that hey if you do",
    "start": "973320",
    "end": "979320"
  },
  {
    "text": "add new column and something uses a select star then this query will start getting this new column extracting the",
    "start": "979320",
    "end": "987060"
  },
  {
    "text": "data from the table right because select star gets all the columns and now you may end up in a situation that you now",
    "start": "987060",
    "end": "993779"
  },
  {
    "text": "get much more data from the database and that you may actually get like much more",
    "start": "993779",
    "end": "999660"
  },
  {
    "text": "Network traffic or your orm library will need to work much harder to process this",
    "start": "999660",
    "end": "1005720"
  },
  {
    "text": "data just to Simply ignore it sometimes yes the other thingy that may break is when you're dropping a colon right if",
    "start": "1005720",
    "end": "1012560"
  },
  {
    "text": "you do drop a column then probably most of uh like your your code needs to be",
    "start": "1012560",
    "end": "1018139"
  },
  {
    "text": "aware of that the problem with dropping a column is when you have like",
    "start": "1018139",
    "end": "1023420"
  },
  {
    "text": "application that is scaled out or when you have heterogeneous applications running against the same database",
    "start": "1023420",
    "end": "1029720"
  },
  {
    "text": "meaning that there are multiple nodes running some code and then you deploy",
    "start": "1029720",
    "end": "1035480"
  },
  {
    "text": "this change so you drop a column and you do not have backwards compatibility what may happen now imagine that half of your",
    "start": "1035480",
    "end": "1042079"
  },
  {
    "text": "Fleet is now running with the new code base so it knows the column is not there",
    "start": "1042079",
    "end": "1047120"
  },
  {
    "text": "and handle it can handle it properly however the other part of your Fleet",
    "start": "1047120",
    "end": "1052600"
  },
  {
    "text": "does not get the latest code yet didn't get the latest code yet so it's still",
    "start": "1052600",
    "end": "1058640"
  },
  {
    "text": "running the old code that assumes that column is still there and relies on this column so because you are introducing",
    "start": "1058640",
    "end": "1065840"
  },
  {
    "text": "this change in like non-backwards compatible manner you may end up in a",
    "start": "1065840",
    "end": "1070880"
  },
  {
    "text": "situation that like half of your Fleet and this is what we call split brain half of your Fleet is actually trying to",
    "start": "1070880",
    "end": "1077360"
  },
  {
    "text": "access the column that doesn't exist anymore this also depends on like if you",
    "start": "1077360",
    "end": "1082460"
  },
  {
    "text": "have heterogeneous ecosystem right you have multiple applications touching the same database you need to coordinate how",
    "start": "1082460",
    "end": "1089120"
  },
  {
    "text": "you deploy changes to this ad to these applications so that you can safely delete the column",
    "start": "1089120",
    "end": "1094880"
  },
  {
    "text": "the problem with that is who or which component runs migrations against your",
    "start": "1094880",
    "end": "1100820"
  },
  {
    "text": "database and do you control these migrations like technically right do you know when these migrations are being",
    "start": "1100820",
    "end": "1107179"
  },
  {
    "text": "executed what is executing these migrations how to roll them back how to push them forward and whatnot those are",
    "start": "1107179",
    "end": "1114320"
  },
  {
    "text": "the things that you need to be aware of and those are the things that you need to control when we are talking about the",
    "start": "1114320",
    "end": "1119660"
  },
  {
    "text": "database even like innocent column type change may actually be like very",
    "start": "1119660",
    "end": "1126080"
  },
  {
    "text": "terrible in terms of performance why because it may require the so-called like table rewriting so your SQL engine",
    "start": "1126080",
    "end": "1134059"
  },
  {
    "text": "when you try to change the column type may need to actually copy whole table on",
    "start": "1134059",
    "end": "1139220"
  },
  {
    "text": "the site create table from scratch with new column copy data back and only then",
    "start": "1139220",
    "end": "1144860"
  },
  {
    "text": "let the application know to properly work to continue right only then does",
    "start": "1144860",
    "end": "1150620"
  },
  {
    "text": "your application can or can your applications safely carry on and do the",
    "start": "1150620",
    "end": "1157039"
  },
  {
    "text": "work the problem with that is do you know how long is it going to take to migrate your tables if you are talking",
    "start": "1157039",
    "end": "1163880"
  },
  {
    "text": "about like developer environment or testing environment that's probably not a big deal you have like couple hundred",
    "start": "1163880",
    "end": "1169520"
  },
  {
    "text": "rows so it's basically a split second when you are talking about that right but when you do run that in production",
    "start": "1169520",
    "end": "1174799"
  },
  {
    "text": "then this migration may take seconds minutes or even hours can you allow to",
    "start": "1174799",
    "end": "1183620"
  },
  {
    "text": "take your system down for hours as especially that if you go with continuous deployment and you may be",
    "start": "1183620",
    "end": "1190220"
  },
  {
    "text": "actually deploying something like during peak hours or shortly before the peak hours can you do that do you control all",
    "start": "1190220",
    "end": "1197120"
  },
  {
    "text": "of that this is why we need to have this full-blown observability around everything that we built around all the",
    "start": "1197120",
    "end": "1204020"
  },
  {
    "text": "databases around all the database interactions that we run that we have in our applications the other thing did",
    "start": "1204020",
    "end": "1211039"
  },
  {
    "text": "that may go wrong is like missing a Nexus missing indexes may cause your SQL",
    "start": "1211039",
    "end": "1217520"
  },
  {
    "text": "query or or data extraction to scan whole table instead of getting like particular rows directly using the index",
    "start": "1217520",
    "end": "1225020"
  },
  {
    "text": "and using the binary search right index is basically a data structure that allows you to find rows based on like",
    "start": "1225020",
    "end": "1231860"
  },
  {
    "text": "their ID or some other conditions to find them much quicker just by using a band research because we have data",
    "start": "1231860",
    "end": "1239179"
  },
  {
    "text": "stored in the order so we know where is like how to run the bind research on top",
    "start": "1239179",
    "end": "1244940"
  },
  {
    "text": "of this data to find the rows easily if we do not have indexes then what happens is we need to scan every single",
    "start": "1244940",
    "end": "1252440"
  },
  {
    "text": "particular Row the problem is scanning Full Table takes tons of time is very",
    "start": "1252440",
    "end": "1259160"
  },
  {
    "text": "slow and it's probably something we really want to avoid problem with that again is that you may not notice that",
    "start": "1259160",
    "end": "1266059"
  },
  {
    "text": "you are scanning the table in your developer environment because it's fast enough because you have like tens or",
    "start": "1266059",
    "end": "1271940"
  },
  {
    "text": "hundreds of rows and it works in a split second however once you deploy to production you immediately immediately",
    "start": "1271940",
    "end": "1277160"
  },
  {
    "text": "see that it's very slow how can you protect yourself from doing that you can obviously run load tests just before",
    "start": "1277160",
    "end": "1284179"
  },
  {
    "text": "pushing to production but load tests are very late in the pipeline load tests",
    "start": "1284179",
    "end": "1289280"
  },
  {
    "text": "will happen only after you're done with all your tests with all your",
    "start": "1289280",
    "end": "1294500"
  },
  {
    "text": "implementation with all your changes probably even with your your pull request right then you run your load",
    "start": "1294500",
    "end": "1301460"
  },
  {
    "text": "test and this is the moment you learn okay performance will degrade I just can't push this to production this is",
    "start": "1301460",
    "end": "1307159"
  },
  {
    "text": "way too late however another problem that we may have here is like indexes are often considered like a silver",
    "start": "1307159",
    "end": "1312679"
  },
  {
    "text": "bullet solving all the problems you may have when you ask a junior developer what should you do when your database is",
    "start": "1312679",
    "end": "1319640"
  },
  {
    "text": "slow add an index and what do we end up with indexes everywhere so we basically",
    "start": "1319640",
    "end": "1325100"
  },
  {
    "text": "index every single thing or provide an index for every query that we send from",
    "start": "1325100",
    "end": "1330980"
  },
  {
    "text": "our application which really works well when it comes to reading however when it",
    "start": "1330980",
    "end": "1336320"
  },
  {
    "text": "comes to to data modification adding rows removing gross modifying growth this is terrible in terms of performance",
    "start": "1336320",
    "end": "1342980"
  },
  {
    "text": "why because now we not only need to update this particular row but do we",
    "start": "1342980",
    "end": "1348500"
  },
  {
    "text": "only do we also need to update all the indexes around the the database or",
    "start": "1348500",
    "end": "1354559"
  },
  {
    "text": "around the table we have so generally having too many indexes even though maybe it worked before maybe this is",
    "start": "1354559",
    "end": "1361640"
  },
  {
    "text": "something you added index like six months back and it worked improve the performance but then over time you added",
    "start": "1361640",
    "end": "1368179"
  },
  {
    "text": "more and more indexes to basically optimize particular use case but in the result you like the greater performance",
    "start": "1368179",
    "end": "1374960"
  },
  {
    "text": "for other scenarios for other stuff that you wanted you wanted to run so generally having too many indexes is",
    "start": "1374960",
    "end": "1382640"
  },
  {
    "text": "also not a good solution there are obviously other problems that may happen for instance bucks like sure",
    "start": "1382640",
    "end": "1389840"
  },
  {
    "text": "all of us had this case we run SQL query against the database we forget the word",
    "start": "1389840",
    "end": "1395419"
  },
  {
    "text": "statement Bank there is a bug it's good enough if we figure out or we find identify this bag when we are talking",
    "start": "1395419",
    "end": "1402140"
  },
  {
    "text": "about like CI unit test etc etc however some bugs manifest themselves only in",
    "start": "1402140",
    "end": "1409520"
  },
  {
    "text": "very particular context for instance Halloween problem which is pretty pretty interesting one is the problem that your",
    "start": "1409520",
    "end": "1416900"
  },
  {
    "text": "engine may be buggy your engine may run your queries incorrectly and result in",
    "start": "1416900",
    "end": "1423260"
  },
  {
    "text": "bugs and problems but also this may depend on your license this may depend on like whether you scale out your",
    "start": "1423260",
    "end": "1431059"
  },
  {
    "text": "database whether you have sharding partitioning whether you go with high availability log shipping active active",
    "start": "1431059",
    "end": "1438380"
  },
  {
    "text": "active standby replicas various other things that might may affect how your queries are executed and how how your",
    "start": "1438380",
    "end": "1445340"
  },
  {
    "text": "bugs expose themselves the same goes for lock contention if you have different looking like different transactions",
    "start": "1445340",
    "end": "1451520"
  },
  {
    "text": "happening in parallel you may get different results different bugs let's just name a few for instance isolation",
    "start": "1451520",
    "end": "1458659"
  },
  {
    "text": "levels if you have read committed isolation level according to the standard SQL 92 you are very well",
    "start": "1458659",
    "end": "1466880"
  },
  {
    "text": "allowed to get like duplicates of the rows or Miss Arrow even when scanning",
    "start": "1466880",
    "end": "1471980"
  },
  {
    "text": "Full Table this is allowed by the standard obviously that's some kind of an implementation detail but this is",
    "start": "1471980",
    "end": "1478039"
  },
  {
    "text": "something that you probably won't notice when you are talking about running the query in your development environment",
    "start": "1478039",
    "end": "1483440"
  },
  {
    "text": "when there is only one transaction happening and nothing else going on around right but once you deploy to",
    "start": "1483440",
    "end": "1489559"
  },
  {
    "text": "production you immediately see hey this thing is actually not working properly",
    "start": "1489559",
    "end": "1494600"
  },
  {
    "text": "because it's a completely different environment and you can't reproduce that easily locally why because it's a",
    "start": "1494600",
    "end": "1501020"
  },
  {
    "text": "completely different context the completely different situation so those backs are very hard to track but we",
    "start": "1501020",
    "end": "1507140"
  },
  {
    "text": "still should be able to identify them before going to production moving on other area of bugs that we may",
    "start": "1507140",
    "end": "1515539"
  },
  {
    "text": "we may face is related to the libraries we use the orms so object relational",
    "start": "1515539",
    "end": "1521059"
  },
  {
    "text": "mappers those libraries make our lives much easier they let us interact with",
    "start": "1521059",
    "end": "1526760"
  },
  {
    "text": "SQL databases or generally with databases in a much like easier way just by writing the application code without",
    "start": "1526760",
    "end": "1533779"
  },
  {
    "text": "necessarily thinking and understanding all the stuff of how it works behind the scenes how the data is structured in SQL",
    "start": "1533779",
    "end": "1540320"
  },
  {
    "text": "and whatnot however they may result in various problems as well one of them the typical issue we have is like n plus one",
    "start": "1540320",
    "end": "1547520"
  },
  {
    "text": "selects imagine that we have a table aircraft that is like in relationship one to many with seeds so basically",
    "start": "1547520",
    "end": "1553760"
  },
  {
    "text": "every single aircraft has multiple seats what do we want to do imagine that we",
    "start": "1553760",
    "end": "1559580"
  },
  {
    "text": "want to run an application code that basically gets all the aircrafts and then for every single aircraft we get",
    "start": "1559580",
    "end": "1565820"
  },
  {
    "text": "like seat size number of seats whatever else we just iterate over the code depending on how we configure our",
    "start": "1565820",
    "end": "1572179"
  },
  {
    "text": "application this may result in the so-called n plus one select problem why",
    "start": "1572179",
    "end": "1577340"
  },
  {
    "text": "because we first send that query to get all the aircrafts from the aircraft's",
    "start": "1577340",
    "end": "1582620"
  },
  {
    "text": "table and then for every particular aircraft we send another query to get",
    "start": "1582620",
    "end": "1588380"
  },
  {
    "text": "like seats for that particular aircraft so this results in one query to get aircrafts and then n queries in total to",
    "start": "1588380",
    "end": "1596000"
  },
  {
    "text": "get all the seats for every single aircraft how can we fix that in this",
    "start": "1596000",
    "end": "1601400"
  },
  {
    "text": "case this is actually easy when we are talking about this Con this this orm case what we can do is we can",
    "start": "1601400",
    "end": "1608480"
  },
  {
    "text": "reconfigure our orm to get the data in the so-called eager fashion instead of",
    "start": "1608480",
    "end": "1614960"
  },
  {
    "text": "lazy mode so we can get all the data with relating entities in the eager mode",
    "start": "1614960",
    "end": "1620960"
  },
  {
    "text": "so basically with this one particular query so select star from aircraft and join seeds this way we fix this issue we",
    "start": "1620960",
    "end": "1629419"
  },
  {
    "text": "got all the seats we get everything in one simple query right however this is",
    "start": "1629419",
    "end": "1634760"
  },
  {
    "text": "something we do not see in our application code this is our configuration key this is something that",
    "start": "1634760",
    "end": "1641539"
  },
  {
    "text": "we either declare somewhere or this is something that we configure using environment variables or maybe this is",
    "start": "1641539",
    "end": "1647419"
  },
  {
    "text": "something that we even Define unlike data layer schema right something that we can't clearly see when we are talking",
    "start": "1647419",
    "end": "1654799"
  },
  {
    "text": "about the application code meaning that if one of your co-workers submits a pull",
    "start": "1654799",
    "end": "1661400"
  },
  {
    "text": "request with this application code in here can you tell whether it's going to",
    "start": "1661400",
    "end": "1667580"
  },
  {
    "text": "get n plus one queries or just one query and how can you verify that when we are",
    "start": "1667580",
    "end": "1673220"
  },
  {
    "text": "just talking about pull request okay how do we fix that I mentioned that we can",
    "start": "1673220",
    "end": "1678260"
  },
  {
    "text": "reconfigure our orm to run in the eager mode however if we do that for",
    "start": "1678260",
    "end": "1683720"
  },
  {
    "text": "everything then we end up with the situation we already seen right with this query that is getting all the",
    "start": "1683720",
    "end": "1689600"
  },
  {
    "text": "joints together so in this part particular case maybe it's not a good idea to get data like eagerly maybe we",
    "start": "1689600",
    "end": "1696380"
  },
  {
    "text": "should follow the lazy mode in this particular case what I'm trying to say here is there is not like a silver",
    "start": "1696380",
    "end": "1703460"
  },
  {
    "text": "bullet telling you exactly what you can do and how you can do that because it",
    "start": "1703460",
    "end": "1708919"
  },
  {
    "text": "strictly depends on your situation and your business code and the business you are effectively running so those things",
    "start": "1708919",
    "end": "1715880"
  },
  {
    "text": "they need to be tuned like to your use case to the case you are actually dealing with but moving on all Rams",
    "start": "1715880",
    "end": "1723620"
  },
  {
    "text": "introduce way more challenges as well for instance the throw code impedance",
    "start": "1723620",
    "end": "1729200"
  },
  {
    "text": "mismatch how do you represent things you see in your object-oriented languages how do you represent them in databases",
    "start": "1729200",
    "end": "1736940"
  },
  {
    "text": "you have various approaches for instance table by hierarchy table per type or table per concrete class or whatever",
    "start": "1736940",
    "end": "1743120"
  },
  {
    "text": "else however these things may not be easy to translate one to one between",
    "start": "1743120",
    "end": "1748880"
  },
  {
    "text": "your data models between like database mode though and between your object-oriented model those things",
    "start": "1748880",
    "end": "1754640"
  },
  {
    "text": "generally need to be handled specifically and now when we are talking about like heterogeneous applications",
    "start": "1754640",
    "end": "1761140"
  },
  {
    "text": "maybe even harder one database may be easily representable in like one",
    "start": "1761140",
    "end": "1766279"
  },
  {
    "text": "particular library but other Library may have very hard time to represent all of that like one-to-many relationship or",
    "start": "1766279",
    "end": "1773419"
  },
  {
    "text": "many too many or join tables or whatever else those things may not be easily",
    "start": "1773419",
    "end": "1778460"
  },
  {
    "text": "representable using your orm this often results in actually reversing the",
    "start": "1778460",
    "end": "1783799"
  },
  {
    "text": "priority so you design your database schema in a way that your orm dictates",
    "start": "1783799",
    "end": "1789460"
  },
  {
    "text": "and this is typically not a very good idea because then you're basically a",
    "start": "1789460",
    "end": "1795320"
  },
  {
    "text": "prisoner of your orm and you need to structure your data not like in the best way you can think of but in the way that",
    "start": "1795320",
    "end": "1803120"
  },
  {
    "text": "your orm can handle moving on other issues that may happen for instance data types it's super easy",
    "start": "1803120",
    "end": "1810260"
  },
  {
    "text": "to think that hey all the data types I have in like my database they can be easily represented in my programming",
    "start": "1810260",
    "end": "1816380"
  },
  {
    "text": "language right but is it the case what about spatial data like spatial data meaning geographical coordinates that we",
    "start": "1816380",
    "end": "1823580"
  },
  {
    "text": "can use around the globe how do we represent them in the oop object-oriented programming language",
    "start": "1823580",
    "end": "1829039"
  },
  {
    "text": "like we can go with pair of numbers what about binary data we typically say hey array of bytes okay but things may go a",
    "start": "1829039",
    "end": "1837200"
  },
  {
    "text": "little bit trickier what about varcar how do you represent a different string literals in your object-oriented",
    "start": "1837200",
    "end": "1843500"
  },
  {
    "text": "language when it comes to collation when it comes to string ordering you can",
    "start": "1843500",
    "end": "1848720"
  },
  {
    "text": "configure your SQL database for instance to ignore casing like lowercase uppercase is the same for the database",
    "start": "1848720",
    "end": "1855380"
  },
  {
    "text": "you can configure your database this way or you can change the order of characters so basically change the",
    "start": "1855380",
    "end": "1862000"
  },
  {
    "text": "lexicographical order how do you do that in your op can you configure string in",
    "start": "1862000",
    "end": "1867559"
  },
  {
    "text": "your programming language what about numbers like you have decimals of various Precision in single SQL database",
    "start": "1867559",
    "end": "1875240"
  },
  {
    "text": "how do you represent that in your programming language do you go with floats do you go with doubles do",
    "start": "1875240",
    "end": "1882260"
  },
  {
    "text": "you have like big integers of any kind how do you do that those are things that",
    "start": "1882260",
    "end": "1887659"
  },
  {
    "text": "we typically ignore however our orm libraries also impose more and more restrictions on top of that for instance",
    "start": "1887659",
    "end": "1894380"
  },
  {
    "text": "your orm library may not be able to support spatial data at all so maybe",
    "start": "1894380",
    "end": "1899419"
  },
  {
    "text": "you'll need to go with string representing spatial data and you'll need to parse this string split it by",
    "start": "1899419",
    "end": "1905659"
  },
  {
    "text": "comma and do some magic right or maybe when it comes to Binary data and when you try to let's say realize a string to",
    "start": "1905659",
    "end": "1913340"
  },
  {
    "text": "a binary are you going with like utf-8 are you going with utf-32 what other",
    "start": "1913340",
    "end": "1919279"
  },
  {
    "text": "ways do you have what about Java language that for instance stores characters like in 16 bits right those",
    "start": "1919279",
    "end": "1925159"
  },
  {
    "text": "are things that we typically ignore but they may lead to very like multiple subtle errors that we can't identify",
    "start": "1925159",
    "end": "1932899"
  },
  {
    "text": "easily moving on with the RMS there are more",
    "start": "1932899",
    "end": "1938059"
  },
  {
    "text": "things that I'll just briefly touch upon orems they do have configuration configuration that may be hidden from",
    "start": "1938059",
    "end": "1944600"
  },
  {
    "text": "you that you may not easily see and you may not even control transaction isolation level do you know what your",
    "start": "1944600",
    "end": "1951380"
  },
  {
    "text": "default transaction isolation level is do you know whether it's your orm configuring that or maybe it relies on",
    "start": "1951380",
    "end": "1957620"
  },
  {
    "text": "the default set by your database what about transactions like in general who starts the transaction who commits that",
    "start": "1957620",
    "end": "1963980"
  },
  {
    "text": "can we do nested transactions what happens if the nested transaction needs to roll back right how can we control",
    "start": "1963980",
    "end": "1970580"
  },
  {
    "text": "all of that how can we handle errors caching another thingy what if you have",
    "start": "1970580",
    "end": "1976100"
  },
  {
    "text": "like multiple nodes running your application because you scaled out do you use cash if you do then how do you",
    "start": "1976100",
    "end": "1983000"
  },
  {
    "text": "make sure that your orm synchronizes this cache across all the nodes does it",
    "start": "1983000",
    "end": "1988159"
  },
  {
    "text": "do that at all can you configure that can you see how many things are in Cache what your cash hit ratio is ETC",
    "start": "1988159",
    "end": "1995320"
  },
  {
    "text": "generally multiple stuff multiple things that may go wrong around that pulling do",
    "start": "1995320",
    "end": "2001899"
  },
  {
    "text": "you pull your connections what if you're running like AWS Lambda do you open connection every single time you start a",
    "start": "2001899",
    "end": "2008620"
  },
  {
    "text": "new Lambda container scaling out your application or do you have some pooling in between will it scale well if you now",
    "start": "2008620",
    "end": "2015700"
  },
  {
    "text": "have a peak traffic and you have like 10 or 100 times more incoming connections right what about other things like query",
    "start": "2015700",
    "end": "2023080"
  },
  {
    "text": "hints do you know whether your indexes are used can you configure on indexes in the orm can you configure join strategy",
    "start": "2023080",
    "end": "2030519"
  },
  {
    "text": "can you configure other stuff like table hints locking hints etc etc do you take",
    "start": "2030519",
    "end": "2036039"
  },
  {
    "text": "care of all of that or can you even and the answer is",
    "start": "2036039",
    "end": "2041399"
  },
  {
    "text": "RMS impose multiple other issues as well for instance migrations what if you have",
    "start": "2041399",
    "end": "2047799"
  },
  {
    "text": "heterogeneous applications what you have multiple applications is your orm happy",
    "start": "2047799",
    "end": "2053980"
  },
  {
    "text": "if your database is not in sync with the logical data model can your orm deal",
    "start": "2053980",
    "end": "2059378"
  },
  {
    "text": "with that or maybe will it require basically to modify the schema in the database how you test how do you test",
    "start": "2059379",
    "end": "2066520"
  },
  {
    "text": "your migrations in unit test how do you fix errors that you spot on later and more and more and more problems with the",
    "start": "2066520",
    "end": "2073419"
  },
  {
    "text": "libraries and tools we use generally biggest challenges we have with RMS is that first changes are scattered in",
    "start": "2073419",
    "end": "2080320"
  },
  {
    "text": "various places and there are multiple moving pieces like when it comes to",
    "start": "2080320",
    "end": "2085358"
  },
  {
    "text": "model definition migration the collaborative configuration or even translation of like the application code",
    "start": "2085359",
    "end": "2091419"
  },
  {
    "text": "to SQL queries right just changing the way we call trigger stored procedures functions all of that may be hidden from",
    "start": "2091419",
    "end": "2097960"
  },
  {
    "text": "us it's generally not clear how we do that stuff and not clear how to",
    "start": "2097960",
    "end": "2103420"
  },
  {
    "text": "configure it later on especially when we are talking about pull requests and reviewing the code basically just by",
    "start": "2103420",
    "end": "2109359"
  },
  {
    "text": "looking at the application code and not seeing everything around so orrams while they are cool and they give us tons of",
    "start": "2109359",
    "end": "2116200"
  },
  {
    "text": "features they also hide so many moving pieces from us that very often they lead",
    "start": "2116200",
    "end": "2121720"
  },
  {
    "text": "to subtle errors that we don't know how to deal with and this is how we enter the true",
    "start": "2121720",
    "end": "2127960"
  },
  {
    "text": "problem of everything I'm talking to you about today the true problem is we need",
    "start": "2127960",
    "end": "2134200"
  },
  {
    "text": "to know the context to find the root cause we need to know what's going on we",
    "start": "2134200",
    "end": "2140859"
  },
  {
    "text": "need to be able to pinpoint the specific issues and to track them down as early as possible we need to be able to",
    "start": "2140859",
    "end": "2148599"
  },
  {
    "text": "basically troubleshoot our issues and all the necessary details on our plate just when we start debugging and when we",
    "start": "2148599",
    "end": "2155920"
  },
  {
    "text": "start figuring out what's going on so let's see how we can make it better and",
    "start": "2155920",
    "end": "2161020"
  },
  {
    "text": "to make it better we would like to get some context and to get some context we need to understand what can we get from",
    "start": "2161020",
    "end": "2167619"
  },
  {
    "text": "the database so in order to get some context and to understand what's going on we need to",
    "start": "2167619",
    "end": "2174160"
  },
  {
    "text": "understand how the SQL engine executes the query every single query that we execute in SQL goes for various phases",
    "start": "2174160",
    "end": "2181180"
  },
  {
    "text": "first phase is parsing the query your SQL engine wants to parse the query in the thing that is called abstract syntax",
    "start": "2181180",
    "end": "2188020"
  },
  {
    "text": "3 AST for short and this is basically a graph like representation of the query",
    "start": "2188020",
    "end": "2193300"
  },
  {
    "text": "that you execute graph like showing exactly all the operations and what's going on then your SQL engine rewrites",
    "start": "2193300",
    "end": "2201099"
  },
  {
    "text": "the query to make it standardized unified and easier to process for instance if you use aliases in your",
    "start": "2201099",
    "end": "2207880"
  },
  {
    "text": "query those aliases may be handled differently so that your SQL engine knows that two things aliased",
    "start": "2207880",
    "end": "2213820"
  },
  {
    "text": "differently actually point out to the same entity right then we enter the world of the so-called planner and this",
    "start": "2213820",
    "end": "2220540"
  },
  {
    "text": "is a very important step of our application so planner basically contains details on how to read data how",
    "start": "2220540",
    "end": "2229359"
  },
  {
    "text": "to join tables how to filter rows how to get all of that and this is basically the the planner",
    "start": "2229359",
    "end": "2235960"
  },
  {
    "text": "creates the actual plan of how the query is going to be executed how the data is",
    "start": "2235960",
    "end": "2241960"
  },
  {
    "text": "going to be read in what order how things are going to be joined and what not this planning is the crucial part of",
    "start": "2241960",
    "end": "2250119"
  },
  {
    "text": "executing the SQL query because planning tells you exactly how the query is going",
    "start": "2250119",
    "end": "2255760"
  },
  {
    "text": "to be executed ultimately by the last phase which is Executor so what is a",
    "start": "2255760",
    "end": "2261400"
  },
  {
    "text": "query plan in for instance postgresql what we can do is we can always add the",
    "start": "2261400",
    "end": "2267339"
  },
  {
    "text": "the explaining keywords to our query so when we have like select star we can use explain to get the query plan query plan",
    "start": "2267339",
    "end": "2275200"
  },
  {
    "text": "so basically A visual representation a textual representation of what's going",
    "start": "2275200",
    "end": "2280660"
  },
  {
    "text": "on and how this query is going to be executed like physically how data is going to be extracted and what not so",
    "start": "2280660",
    "end": "2287560"
  },
  {
    "text": "whenever we have this plan every single plan consists of nodes so nodes are basically like more or less every row",
    "start": "2287560",
    "end": "2294099"
  },
  {
    "text": "here is basically a node and each node contains various multiple in like",
    "start": "2294099",
    "end": "2299680"
  },
  {
    "text": "important information for us first thing is the node type so what is exactly",
    "start": "2299680",
    "end": "2305440"
  },
  {
    "text": "being executed for instance whether it's nested Loop whether it's sequential scan whether it's index scan whether it's",
    "start": "2305440",
    "end": "2311920"
  },
  {
    "text": "ordering joining filtering uh sorting caching etc etc the second thing every",
    "start": "2311920",
    "end": "2319780"
  },
  {
    "text": "node has is the cost cost is basically an arbitrary number arbitrary measure",
    "start": "2319780",
    "end": "2327760"
  },
  {
    "text": "telling us how hard it is to execute given operation how hard most of the",
    "start": "2327760",
    "end": "2334720"
  },
  {
    "text": "times in terms of like I O operations how much data we need to extract how",
    "start": "2334720",
    "end": "2339820"
  },
  {
    "text": "much data we need to get from the database and basically how expensive it",
    "start": "2339820",
    "end": "2344920"
  },
  {
    "text": "is to physically go grab the data and execute this particular step this is",
    "start": "2344920",
    "end": "2349960"
  },
  {
    "text": "arbitrary number meaning that we can't reason anything about like the cost being 6 or 100 whether it's going to",
    "start": "2349960",
    "end": "2356980"
  },
  {
    "text": "take this many seconds or that many minutes we can't reason anything about that but what we can do is we can",
    "start": "2356980",
    "end": "2362859"
  },
  {
    "text": "compare various plants so if we have plants with different costs what we can",
    "start": "2362859",
    "end": "2369040"
  },
  {
    "text": "do is we can take those plans and choose the cheapest plan the plan that is the",
    "start": "2369040",
    "end": "2374380"
  },
  {
    "text": "least expensive one and this is what SQL engines do they generate multiple query",
    "start": "2374380",
    "end": "2380740"
  },
  {
    "text": "plans and then they choose the cheapest one to execute the operation or just the",
    "start": "2380740",
    "end": "2385900"
  },
  {
    "text": "whole query as fast as possible this is how it works so what we now can",
    "start": "2385900",
    "end": "2391780"
  },
  {
    "text": "do by knowing that what we now can do is we can get our interaction with the",
    "start": "2391780",
    "end": "2397660"
  },
  {
    "text": "database and figure out by the by looking at the execution plan we can figure out how it's going to work when",
    "start": "2397660",
    "end": "2405400"
  },
  {
    "text": "we increase the data volume whether when we run this in like production isn't",
    "start": "2405400",
    "end": "2410680"
  },
  {
    "text": "going to scale well or is it going to be too slow and we can reason about that",
    "start": "2410680",
    "end": "2416440"
  },
  {
    "text": "just by looking at the query plan and applying some logical analysis on top of",
    "start": "2416440",
    "end": "2422020"
  },
  {
    "text": "that and figuring out whether this is going to scale out properly or not but",
    "start": "2422020",
    "end": "2427420"
  },
  {
    "text": "how do we get those query plans how do we get all of that well we need to have observability",
    "start": "2427420",
    "end": "2433180"
  },
  {
    "text": "and to get observability what we need is we need to have logs we need to have",
    "start": "2433180",
    "end": "2438579"
  },
  {
    "text": "traces and we need to have metrics and obviously because we are now in the",
    "start": "2438579",
    "end": "2443619"
  },
  {
    "text": "world of multiple heterogeneous applications and queries coming from various sources or queries being",
    "start": "2443619",
    "end": "2450760"
  },
  {
    "text": "triggered against various Services we need to have a modern nice solution to",
    "start": "2450760",
    "end": "2456160"
  },
  {
    "text": "get all of that and the solution to that is cncf open Telemetry open Telemetry is",
    "start": "2456160",
    "end": "2462040"
  },
  {
    "text": "basically a set of sdks for instrumentation they are supported by",
    "start": "2462040",
    "end": "2467440"
  },
  {
    "text": "cncf Cloud native Computing foundation and this is like a standard plus a set of libraries for various Technologies",
    "start": "2467440",
    "end": "2474820"
  },
  {
    "text": "various languages that you can just plug into your application and get the true",
    "start": "2474820",
    "end": "2480280"
  },
  {
    "text": "observed valuability based on signals so on traces on the metrics and on locks so",
    "start": "2480280",
    "end": "2486700"
  },
  {
    "text": "by having this standardized way of extracting the signals we can uniformly",
    "start": "2486700",
    "end": "2491980"
  },
  {
    "text": "get signals from any application that we are dealing with how does it work in practice",
    "start": "2491980",
    "end": "2497740"
  },
  {
    "text": "what we do is open Telemetry hotel for short gives us traces and spans imagine",
    "start": "2497740",
    "end": "2504579"
  },
  {
    "text": "that we have the application that causes some workflow to begin with by calling",
    "start": "2504579",
    "end": "2510280"
  },
  {
    "text": "service a let's say that's your checkout application you click check out button and what you end up with is you have",
    "start": "2510280",
    "end": "2516640"
  },
  {
    "text": "basically a service a being called to trigger the operation service a May in",
    "start": "2516640",
    "end": "2522520"
  },
  {
    "text": "turn for instance call services b e c d so call services like Q database engine",
    "start": "2522520",
    "end": "2529420"
  },
  {
    "text": "etc etc to get the data to to figure out all of that and what we would like to capture is we would like to capture",
    "start": "2529420",
    "end": "2535540"
  },
  {
    "text": "everything that happened within this particular workflow and this is what we get and this is what is called a trace",
    "start": "2535540",
    "end": "2542200"
  },
  {
    "text": "so basically Trace is like a snapshot of everything that happened in given",
    "start": "2542200",
    "end": "2547720"
  },
  {
    "text": "workflow and in all the sub components that were called because we triggered this workflow so we do have like a Time",
    "start": "2547720",
    "end": "2554500"
  },
  {
    "text": "axis and this everything here represents how things interacted with each other so",
    "start": "2554500",
    "end": "2560140"
  },
  {
    "text": "we can see that hey this is how long it took for this service a to handle this particular workflow we can see that",
    "start": "2560140",
    "end": "2566440"
  },
  {
    "text": "service a code service B which in turn code service CND and also service e was",
    "start": "2566440",
    "end": "2571900"
  },
  {
    "text": "called right and all those horizontal bars are spans and those spans they",
    "start": "2571900",
    "end": "2578140"
  },
  {
    "text": "carry on various attributes for instance we can have a timestamp we can have like a friendly name we can have start time",
    "start": "2578140",
    "end": "2585160"
  },
  {
    "text": "and time we can have parent ID for traces etc etc to understand exactly",
    "start": "2585160",
    "end": "2591040"
  },
  {
    "text": "what's happening behind the scenes so this is how we can use open Telemetry to",
    "start": "2591040",
    "end": "2597460"
  },
  {
    "text": "instrument our applications and because this is standardized and supports various Technologies we can use it for",
    "start": "2597460",
    "end": "2603819"
  },
  {
    "text": "whatever application we have we can use it for our like web server SQL engines",
    "start": "2603819",
    "end": "2608940"
  },
  {
    "text": "application code queuing systems etc etc so this is what we can do so now having",
    "start": "2608940",
    "end": "2615280"
  },
  {
    "text": "these two things that we mentioned like having worry plans and having open Telemetry we can finally get the",
    "start": "2615280",
    "end": "2622720"
  },
  {
    "text": "observability monitoring and root causing how do we do that well we need",
    "start": "2622720",
    "end": "2628900"
  },
  {
    "text": "to verify all the interactions with the database right so we can use load tests we can",
    "start": "2628900",
    "end": "2635440"
  },
  {
    "text": "get load tests observe our application how it works when talking to the",
    "start": "2635440",
    "end": "2641140"
  },
  {
    "text": "database and based on that we can figure out whether it's going to work well in production or not however there are",
    "start": "2641140",
    "end": "2647140"
  },
  {
    "text": "problems with load tests first load tests are super expensive they take hours to complete because we need to",
    "start": "2647140",
    "end": "2654520"
  },
  {
    "text": "fill caches because we need to deal with geared compilation because we need to",
    "start": "2654520",
    "end": "2659740"
  },
  {
    "text": "deal with like various edge cases we need to consider and whatnot so generally it takes us hours to complete",
    "start": "2659740",
    "end": "2666700"
  },
  {
    "text": "those load tests and also those loot tests are very expensive due to that you need to pay for additional machines",
    "start": "2666700",
    "end": "2673060"
  },
  {
    "text": "generating the traffic handling the traffic and basically running the stuff other things you may have is data",
    "start": "2673060",
    "end": "2679660"
  },
  {
    "text": "distribution and cardinality issues right you can't test your European stack with the data from the US why because",
    "start": "2679660",
    "end": "2687819"
  },
  {
    "text": "it's different data you have different data data storage you have different like content in your application so you",
    "start": "2687819",
    "end": "2695020"
  },
  {
    "text": "kind of just blindly apply the the different queries or queries coming from different content right also what about",
    "start": "2695020",
    "end": "2701079"
  },
  {
    "text": "smaller countries how do you test small countries that do not generate like significant part of your load but still",
    "start": "2701079",
    "end": "2709000"
  },
  {
    "text": "may not work well when you deploy changes to production other thing is how are you going to get the hardware are",
    "start": "2709000",
    "end": "2715660"
  },
  {
    "text": "you going to get like a GPU instances if you are load testing machine learning stuff what about Edge Computing what do",
    "start": "2715660",
    "end": "2721839"
  },
  {
    "text": "about like custom Hardware if you run things on iot etc etc how do you do do",
    "start": "2721839",
    "end": "2727000"
  },
  {
    "text": "all of that how do you deal with data anonymity can you even reproduce the traffic can",
    "start": "2727000",
    "end": "2733240"
  },
  {
    "text": "you easily take traffic from production and run an in your like developer environment is it safe is it gdpr",
    "start": "2733240",
    "end": "2739420"
  },
  {
    "text": "compliant can you do that technically at all load tests ultimately happen at the",
    "start": "2739420",
    "end": "2745720"
  },
  {
    "text": "very end they are at the end in our CI CD pipelines so now when we are done with",
    "start": "2745720",
    "end": "2752020"
  },
  {
    "text": "implementing changes done with designing the solution done with running pull requests we run load tests and that's",
    "start": "2752020",
    "end": "2758500"
  },
  {
    "text": "when we realize hey this thing is not going to work well so this is something that works in theory and can be",
    "start": "2758500",
    "end": "2764980"
  },
  {
    "text": "automated in RCI CD pipelines right this can be very easily automated but this is not what we want because what we want",
    "start": "2764980",
    "end": "2771579"
  },
  {
    "text": "ultimately is we want to be proactive and push to the left we can't wait for",
    "start": "2771579",
    "end": "2777460"
  },
  {
    "text": "the problems to appear in production we can't wait for load tests because they are too slow too late and too expensive",
    "start": "2777460",
    "end": "2785040"
  },
  {
    "text": "issues need to be identified as early as possible and they need to be automated",
    "start": "2785040",
    "end": "2790780"
  },
  {
    "text": "identified automatically right this is what we need to have we need to have",
    "start": "2790780",
    "end": "2796000"
  },
  {
    "text": "proper database guard rails very early in our pipeline ideally right at our",
    "start": "2796000",
    "end": "2802300"
  },
  {
    "text": "hands when we are implementing the application and how can we do all of that we can use",
    "start": "2802300",
    "end": "2808839"
  },
  {
    "text": "matis and never go blind again matis is basically a solution",
    "start": "2808839",
    "end": "2814119"
  },
  {
    "text": "that provides US based on cncf open source Frameworks based on Open",
    "start": "2814119",
    "end": "2820300"
  },
  {
    "text": "Standards provides us with multiple things that give us all the",
    "start": "2820300",
    "end": "2826020"
  },
  {
    "text": "observability monitoring and everything that we need what we have is source code",
    "start": "2826020",
    "end": "2831880"
  },
  {
    "text": "integration so we can integrate just by dropping one package to your application we can easily integrate with your app",
    "start": "2831880",
    "end": "2838240"
  },
  {
    "text": "and use open Telemetry to get the observability we can use the open Telemetry and we can use SQL query plans",
    "start": "2838240",
    "end": "2845680"
  },
  {
    "text": "to get the behavior we have to get all the monitoring of everything that happens when between your application",
    "start": "2845680",
    "end": "2851980"
  },
  {
    "text": "and database to tell you immediately that hey this thing is not going to work well we have pull request analysis so we",
    "start": "2851980",
    "end": "2858760"
  },
  {
    "text": "can cover better CI CD process whenever you samp in a pull request we can automatically provide insights we have",
    "start": "2858760",
    "end": "2865359"
  },
  {
    "text": "database observability we can cover your like production databases your analysis",
    "start": "2865359",
    "end": "2870700"
  },
  {
    "text": "and of your all the production environments to see what's going went on so let's actually see that in action",
    "start": "2870700",
    "end": "2876940"
  },
  {
    "text": "let's see a short demo of this of this Mathis platform so once we register to",
    "start": "2876940",
    "end": "2882040"
  },
  {
    "text": "the application what happens is we can create a project that consists of three",
    "start": "2882040",
    "end": "2887440"
  },
  {
    "text": "important parts first part is like the staging so non-production environments and in this part what we see when we",
    "start": "2887440",
    "end": "2893980"
  },
  {
    "text": "click on it is we can see the actual um interaction between your applications",
    "start": "2893980",
    "end": "2900400"
  },
  {
    "text": "and your databases so you can see that hey there was basically a rest query",
    "start": "2900400",
    "end": "2906339"
  },
  {
    "text": "executed executed like two two two two two uh to this endpoint to this URL that",
    "start": "2906339",
    "end": "2913599"
  },
  {
    "text": "resulted in like code HTTP code 200 and the query was put okay when we open that",
    "start": "2913599",
    "end": "2919480"
  },
  {
    "text": "we can get the actual history of what was going on behind the scenes so we see those traces and spans of open Telemetry",
    "start": "2919480",
    "end": "2926619"
  },
  {
    "text": "you can easily see that hey this generated this query this query this query or like this many queries and for",
    "start": "2926619",
    "end": "2933460"
  },
  {
    "text": "every single worry that it went to your database we provide automated insights",
    "start": "2933460",
    "end": "2938740"
  },
  {
    "text": "based on what is going on for instance we can show you that hey this is how many rows were actually extracted from",
    "start": "2938740",
    "end": "2945099"
  },
  {
    "text": "the database right this is how many rows were a returned ultimately to the application right this is how many",
    "start": "2945099",
    "end": "2951339"
  },
  {
    "text": "tables we read etc etc we also provide automated insights meaning that hey we",
    "start": "2951339",
    "end": "2957099"
  },
  {
    "text": "can do some analysis on these queries and identify that there is a critical issue with your rose red right you use",
    "start": "2957099",
    "end": "2963460"
  },
  {
    "text": "tablescan this is not going to work well in production we can see like cost prediction that hey this is not going to",
    "start": "2963460",
    "end": "2970060"
  },
  {
    "text": "work well we can see like number of rows returned we can provide inside details we can provide impacts and we can also",
    "start": "2970060",
    "end": "2977440"
  },
  {
    "text": "provide remediation plan so we can tell you exactly how to fix these things and",
    "start": "2977440",
    "end": "2982599"
  },
  {
    "text": "what needs to be fixed to get the the better performance or get the proper behavior",
    "start": "2982599",
    "end": "2988180"
  },
  {
    "text": "the other thing we have is now based on this screen we can immediately answer to",
    "start": "2988180",
    "end": "2994000"
  },
  {
    "text": "questions first is it going to work well in production because we have automated insights and second how to fix that but",
    "start": "2994000",
    "end": "3002220"
  },
  {
    "text": "if we were to ask a question okay but why is this actually happening I see there is a problem but why do I have the",
    "start": "3002220",
    "end": "3008760"
  },
  {
    "text": "problem now we enter the world of like truth causing and explanation of what's going on so we can get to like a little",
    "start": "3008760",
    "end": "3016560"
  },
  {
    "text": "bit more sophisticated parts for instance this is the actual query that was being executed and you can see that",
    "start": "3016560",
    "end": "3022800"
  },
  {
    "text": "hey this is interactive you can hover you can see that hey this is the table that it was using etc etc so you can",
    "start": "3022800",
    "end": "3028800"
  },
  {
    "text": "easily see what the query was and whether it worked properly or is it the query that you expected you can get some",
    "start": "3028800",
    "end": "3035640"
  },
  {
    "text": "metrics showing you that hey this is the cost this is estimated number of rows this is how many rows you had in your",
    "start": "3035640",
    "end": "3041640"
  },
  {
    "text": "table in your database this is the planning time you can see exactly what was going on you can get the query tail",
    "start": "3041640",
    "end": "3048119"
  },
  {
    "text": "well query tale is showing you that hey this query actually did that you can see like parallel like sequential scan you",
    "start": "3048119",
    "end": "3055800"
  },
  {
    "text": "can see output you can see workers you can see all the details of everything that is happening here you can see the",
    "start": "3055800",
    "end": "3061619"
  },
  {
    "text": "cost you can see I O buffers so you get a full clarity of what's going on you",
    "start": "3061619",
    "end": "3067079"
  },
  {
    "text": "can even get like the execution plan from your database so you can take this plan and just use it in different tools",
    "start": "3067079",
    "end": "3074339"
  },
  {
    "text": "to see or analyze it even more you can get a summary of all the tables that are accessed and whatnot so not only we",
    "start": "3074339",
    "end": "3082500"
  },
  {
    "text": "provide the like the the answer is it going to work well but we will also give",
    "start": "3082500",
    "end": "3087599"
  },
  {
    "text": "you all the details of why it's not working well but that's just the beginning this is something that you",
    "start": "3087599",
    "end": "3093960"
  },
  {
    "text": "integrate with your application just by dropping like one npm package or one pip install and enabling the instrumentation",
    "start": "3093960",
    "end": "3100800"
  },
  {
    "text": "with line one line of code assuming you use open Telemetry and you have all of that right but what about other cases",
    "start": "3100800",
    "end": "3107520"
  },
  {
    "text": "let's take cicd what we can do now is we can go to pull requests so we can also",
    "start": "3107520",
    "end": "3114359"
  },
  {
    "text": "integrate for instance with GitHub actions or other CI CD systems and you can see that hey all the tests triggered",
    "start": "3114359",
    "end": "3121980"
  },
  {
    "text": "in your CI CD pipeline caused this interaction with your database and once",
    "start": "3121980",
    "end": "3127740"
  },
  {
    "text": "again you have everything Clarity you have Clarity and you have all of that and this is generated automatically for",
    "start": "3127740",
    "end": "3133980"
  },
  {
    "text": "you and for instance a comment is put on GitHub action that hey this is what",
    "start": "3133980",
    "end": "3139280"
  },
  {
    "text": "analysis was performed and how the things worked in your case so we have covered a full-blown like Ci CD pipeline",
    "start": "3139280",
    "end": "3147780"
  },
  {
    "text": "now you can get insights immediately when writing your application code but",
    "start": "3147780",
    "end": "3153720"
  },
  {
    "text": "also we improve the CI CD code reviews and everything else so you can for instance automatically block your pulley",
    "start": "3153720",
    "end": "3161339"
  },
  {
    "text": "request from being merged if there are critical issues so this is what you can do moving on let's say that you finally",
    "start": "3161339",
    "end": "3168960"
  },
  {
    "text": "deployed things to production how can you make sure that these things work well and here we enter the third part",
    "start": "3168960",
    "end": "3174900"
  },
  {
    "text": "which is like database observability first you can drop a site container like",
    "start": "3174900",
    "end": "3181500"
  },
  {
    "text": "a Docker container that you either run in your um in your AWS or or whatever cloud",
    "start": "3181500",
    "end": "3187500"
  },
  {
    "text": "provider or you can learn it locally but generally you drop a Docker container that connects to your database and that",
    "start": "3187500",
    "end": "3194819"
  },
  {
    "text": "can extract some statistics to enrich all the data we have here for instance we have schema analysis so you can",
    "start": "3194819",
    "end": "3201900"
  },
  {
    "text": "immediately see hey those are the tables and they have some insights for instance this table does not have indexes",
    "start": "3201900",
    "end": "3208980"
  },
  {
    "text": "configured on it right so probably or it doesn't have a primary key those are the things that we can verify and those are",
    "start": "3208980",
    "end": "3216359"
  },
  {
    "text": "the things that we can check just by looking at the schema right but there are other things we can do we can",
    "start": "3216359",
    "end": "3221520"
  },
  {
    "text": "provide observability reports for instance those are the tables number of rows 10 table sizes etc etc those are",
    "start": "3221520",
    "end": "3228960"
  },
  {
    "text": "the indexes you have and this is the history of how they were used in last weeks right those are the queries that",
    "start": "3228960",
    "end": "3236280"
  },
  {
    "text": "were executed in your production database and this is how they performed over time this is how the experience or",
    "start": "3236280",
    "end": "3243180"
  },
  {
    "text": "like the the query performance changed over time and what you should look into you have some configuration details for",
    "start": "3243180",
    "end": "3250020"
  },
  {
    "text": "instance extensions database config etc etc all of that provided to you",
    "start": "3250020",
    "end": "3255540"
  },
  {
    "text": "automatically just by dropping one Docker container and giving it a connection string to your database",
    "start": "3255540",
    "end": "3261420"
  },
  {
    "text": "another thing we have is we can enrich your ad hoc analysis if you would like",
    "start": "3261420",
    "end": "3267180"
  },
  {
    "text": "to verify what's going on we can for instance provide a query analyzer so",
    "start": "3267180",
    "end": "3272400"
  },
  {
    "text": "we're in the query analyzer what you can do is you can provide like a SQL statement with the with the query plan",
    "start": "3272400",
    "end": "3280619"
  },
  {
    "text": "and you can submit that to basically Analyze This query and provide all the details of what's going going on to",
    "start": "3280619",
    "end": "3287160"
  },
  {
    "text": "happen and you can do the same using CLI tool so you can do the like from your",
    "start": "3287160",
    "end": "3292500"
  },
  {
    "text": "developer environment you can integrate it with your offline CLI tools of whatever kind you have all of that we",
    "start": "3292500",
    "end": "3299339"
  },
  {
    "text": "can do just to give you full observability and full understanding of",
    "start": "3299339",
    "end": "3304800"
  },
  {
    "text": "what's going on in your database so let's wrap up we provide a matches",
    "start": "3304800",
    "end": "3311280"
  },
  {
    "text": "provides a source code integration using open Telemetry and cncf Open Standards",
    "start": "3311280",
    "end": "3316859"
  },
  {
    "text": "it can capture traces rest codes from your HTTP server SQL Server whatever else it can integrate with your orms",
    "start": "3316859",
    "end": "3324720"
  },
  {
    "text": "with your SQL drivers with whatever contacts with whatever thingy you have it can support you during your CI CD",
    "start": "3324720",
    "end": "3332280"
  },
  {
    "text": "pipeline in pool requests in your and whatever automated testing suit you have",
    "start": "3332280",
    "end": "3338460"
  },
  {
    "text": "to give you all the insights what's going on and how it's going to work it can give you full-blown observability",
    "start": "3338460",
    "end": "3344339"
  },
  {
    "text": "like either done ad hoc or done using CLI tool or done generally by the",
    "start": "3344339",
    "end": "3350579"
  },
  {
    "text": "platform and it gives you all of that because your databases may break may",
    "start": "3350579",
    "end": "3356220"
  },
  {
    "text": "break because of bugs because of RM libraries because of database inefficiencies because of misconfigured",
    "start": "3356220",
    "end": "3362280"
  },
  {
    "text": "indexes because of all the configuration either eager lazy or whatever else of",
    "start": "3362280",
    "end": "3367740"
  },
  {
    "text": "transaction isolation levels or what all these things may go wrong and you need to be proactive when checking and",
    "start": "3367740",
    "end": "3375480"
  },
  {
    "text": "making sure that these things work properly you can't wait for load tests because they are way too late we are too",
    "start": "3375480",
    "end": "3382020"
  },
  {
    "text": "expensive and generally they are very hard to show you exactly what's going on you need to have constant monitoring and",
    "start": "3382020",
    "end": "3389400"
  },
  {
    "text": "even after you deploy to production you need to have a way to actually verify that your things do not degrade over",
    "start": "3389400",
    "end": "3396059"
  },
  {
    "text": "time that your things do not break like because of different peak hours or because you deployed on Wednesday but",
    "start": "3396059",
    "end": "3402599"
  },
  {
    "text": "it's Saturday when actual traffic comes to your application and Mattis covers all of that covers application",
    "start": "3402599",
    "end": "3409200"
  },
  {
    "text": "integration pool requests observability safety cut all your bases covered all of",
    "start": "3409200",
    "end": "3415380"
  },
  {
    "text": "that to make sure that your application works well to push all the checks to the",
    "start": "3415380",
    "end": "3420660"
  },
  {
    "text": "left and to provide proper database guardrails to your CI CD Pipeline and",
    "start": "3420660",
    "end": "3426599"
  },
  {
    "text": "this is the novel approach we all need to take we can't wait for the issue used to pop-up in production we can't fly",
    "start": "3426599",
    "end": "3432480"
  },
  {
    "text": "blind what we need to do is we need to verify those things as early as possible",
    "start": "3432480",
    "end": "3438780"
  },
  {
    "text": "and being all of that set I'd like to thank you for listening to this talk I hope you find it interesting feel free",
    "start": "3438780",
    "end": "3445260"
  },
  {
    "text": "to visit our matisdata.io page see our product start using it drop us a",
    "start": "3445260",
    "end": "3450900"
  },
  {
    "text": "feedback on like Twitter on email join our Discord channel to learn more and",
    "start": "3450900",
    "end": "3456059"
  },
  {
    "text": "generally stay in touch thank you for being here",
    "start": "3456059",
    "end": "3460460"
  }
]