[
  {
    "text": "hey everyone I'm John Howard I'm a senior architect at solo.io and I'm here",
    "start": "1280",
    "end": "6759"
  },
  {
    "text": "to talk about testing uh without kubernetes so before we get into things I want to get a quick poll of the",
    "start": "6759",
    "end": "13480"
  },
  {
    "text": "audience uh to see how many people are running test where they actually have to deploy something on kubernetes as part",
    "start": "13480",
    "end": "18600"
  },
  {
    "text": "of the test all right and how many of you guys enjoy that experience no",
    "start": "18600",
    "end": "25000"
  },
  {
    "text": "complaints we've got one they're not sure though I I wouldn't be so sure either",
    "start": "25000",
    "end": "30640"
  },
  {
    "text": "so in my experience like testing on kubernetes we do it uh but it's really rough right it gives us a really hard",
    "start": "30640",
    "end": "36960"
  },
  {
    "text": "time um for all sorts of reasons uh the biggest one for me is that it's quite slow I'm not a very patient guy and in",
    "start": "36960",
    "end": "44600"
  },
  {
    "text": "order to set up these tests we have to go create a kubernetes cluster we've got to build some images we've got to push",
    "start": "44600",
    "end": "49920"
  },
  {
    "text": "them somewhere we've got to create some deployment Services configuration have those pull in the the cluster they spin",
    "start": "49920",
    "end": "57600"
  },
  {
    "text": "up maybe they take a while to pass the readiness all these things and by the time we actually get to our test logic",
    "start": "57600",
    "end": "63120"
  },
  {
    "text": "we've got like 10 minutes down the drain we've already finished our coffee and then the actual test maybe only takes 10 seconds right it's a huge waste of",
    "start": "63120",
    "end": "70360"
  },
  {
    "text": "time it's also going to be very hard to debug aside from the fact that there's now all these moving Parts it's also not",
    "start": "70360",
    "end": "76880"
  },
  {
    "text": "so easy to just go attach a debugger to our process and just go see put break points somewhere and figure out what's",
    "start": "76880",
    "end": "81960"
  },
  {
    "text": "going wrong it can be done I know I'm sure there's plenty of tools out there uh that help us do it but it's still",
    "start": "81960",
    "end": "87200"
  },
  {
    "text": "nowhere near as easy as a basic unit test where you can just uh you know click the button or",
    "start": "87200",
    "end": "93079"
  },
  {
    "text": "IDE it's also hard to onboard like I've been running tests in kubernetes and as part of projects I've been working on",
    "start": "93079",
    "end": "99159"
  },
  {
    "text": "for many years now so I've learned a few tricks to speed things up and I know all the commands to run and the magic scripts that you need to touch uh but we",
    "start": "99159",
    "end": "106600"
  },
  {
    "text": "often see really smart people trying to onboard the project and it takes them many hours or even days to figure out",
    "start": "106600",
    "end": "112280"
  },
  {
    "text": "just how to run the test and that's time that they're not contributing value and they get really frustrated and sometimes",
    "start": "112280",
    "end": "117920"
  },
  {
    "text": "they leave and they never come back right uh and it can be expensive and unreliable um and depends on how you run",
    "start": "117920",
    "end": "124880"
  },
  {
    "text": "things we often use uh this project called kind kubernetes and Docker which helps keeps our cost down uh but we at",
    "start": "124880",
    "end": "131080"
  },
  {
    "text": "one point were running all of our tests on a real Cloud kubernetes cluster and we were racking up the cloud bills like",
    "start": "131080",
    "end": "136319"
  },
  {
    "text": "crazy like you would not believe the price we were paying just to run tests",
    "start": "136319",
    "end": "141400"
  },
  {
    "text": "uh which is not great and those are unreliable too even the local ones we see you know every once in a while you",
    "start": "141400",
    "end": "146840"
  },
  {
    "text": "spend up the cluster and it just doesn't work for some reason or it times out or you know the image registry is down for",
    "start": "146840",
    "end": "152239"
  },
  {
    "text": "a little bit so all of a sudden all your tests are failing uh and it just it really just gets at you and breaks your",
    "start": "152239",
    "end": "158200"
  },
  {
    "text": "productivity so if we have all these problems then why did almost everyone here raise their hand and say they're",
    "start": "158200",
    "end": "163760"
  },
  {
    "text": "testing on kubernetes at least for me and I have to imagine for a lot of you it's because we feel like it's necessary",
    "start": "163760",
    "end": "169400"
  },
  {
    "text": "right we feel like the way to actually get value out of our test and cover the functionality is we need kubernetes",
    "start": "169400",
    "end": "176640"
  },
  {
    "text": "whether that's because we're writing like a controller that actually needs to run on kubernetes and takes advantage of specific kubernetes features or that's",
    "start": "176640",
    "end": "183840"
  },
  {
    "text": "just the only way to run our application or for various other reasons um so it is rough but maybe it's necessary right or",
    "start": "183840",
    "end": "190799"
  },
  {
    "text": "maybe not which is maybe some foreshadowing why everyone's here and what we're here to talk about um so I",
    "start": "190799",
    "end": "197120"
  },
  {
    "text": "want to give some background on what I do just briefly to set the stage uh so I work on EO which is a service mesh uh if",
    "start": "197120",
    "end": "203640"
  },
  {
    "text": "you don't know what that is and you're interested there was plenty of talks this week um that you can go catch the replays of uh you don't need to know the",
    "start": "203640",
    "end": "210920"
  },
  {
    "text": "details though but what you do need to know is that we've been working on a kind of next generation service mesh",
    "start": "210920",
    "end": "216400"
  },
  {
    "text": "deployment model uh which gave us a unique opportunity to also rethink a testing strategy from the ground up as",
    "start": "216400",
    "end": "222319"
  },
  {
    "text": "we were building this uh new architecture from the ground up um one of the tricky things about this though",
    "start": "222319",
    "end": "228000"
  },
  {
    "text": "is that the new model actually even more deeply integrates with details of kubernetes which made it even more uh",
    "start": "228000",
    "end": "234560"
  },
  {
    "text": "obvious to just go run this tests on kubernetes to make sure that we were actually testing the functionality right",
    "start": "234560",
    "end": "240400"
  },
  {
    "text": "um so very very briefly I just want to explain the architecture of our system uh to make sure things make sense here",
    "start": "240400",
    "end": "246000"
  },
  {
    "text": "uh ultimately what a service mesh does is it takes your traffic and runs it through a smart proxy that can do various",
    "start": "246000",
    "end": "251720"
  },
  {
    "text": "functionalities um the new architecture is deploying a single one of those per",
    "start": "251720",
    "end": "256840"
  },
  {
    "text": "node rather than what we previously did by running it inside of the Pod is what we called a side car proxy um and this",
    "start": "256840",
    "end": "264160"
  },
  {
    "text": "node proxy is actually handling networking for each pod on the same node",
    "start": "264160",
    "end": "269600"
  },
  {
    "text": "uh what this means is that we're hooking into all sorts of nitty-gritty kubernetes details in order to modify",
    "start": "269600",
    "end": "275560"
  },
  {
    "text": "the networking stack of these pods right uh and so again like it was super obvious let's just run this on kubernetes because that's like we can't",
    "start": "275560",
    "end": "282560"
  },
  {
    "text": "even run this proxy originally outside of kubernetes it had to be on kubernetes uh but we took the opportunity to think",
    "start": "282560",
    "end": "290320"
  },
  {
    "text": "how can we do this without kubernetes so I want to go over a bit like what I view as like the ideal test",
    "start": "290320",
    "end": "297720"
  },
  {
    "text": "and what I wanted to achieve with our test um so ultimately what we want is tests that can run quickly I'd say a",
    "start": "297720",
    "end": "304600"
  },
  {
    "text": "second per test but even that's a pretty loose goal I'd much rather have all the tests run in one second right uh that's",
    "start": "304600",
    "end": "310600"
  },
  {
    "text": "a great iteration time compared to the tens of minutes that we have with the kubernetes style test uh it' also be",
    "start": "310600",
    "end": "316720"
  },
  {
    "text": "great to have no test setup no like special test setup so that someone can just come into the repo and run go test",
    "start": "316720",
    "end": "322639"
  },
  {
    "text": "and things work or whatever the equivalent is in their language uh it' also be great to be easy to debug with",
    "start": "322639",
    "end": "329000"
  },
  {
    "text": "standard tooling like I don't know about anyone else but I like to just go click the debug test function in my IDE and I",
    "start": "329000",
    "end": "335560"
  },
  {
    "text": "can just go set break points anywhere I would love for that experience of unit test to apply to these integration tests",
    "start": "335560",
    "end": "340919"
  },
  {
    "text": "as well um and these are kind of bit redundant but in order to meet those three goals we really need this run",
    "start": "340919",
    "end": "346400"
  },
  {
    "text": "without kinetes for some of the reasons I mentioned without Docker as well and",
    "start": "346400",
    "end": "351440"
  },
  {
    "text": "potentially without root as well because if you have to require root then we've kind of violated some of these no setup",
    "start": "351440",
    "end": "356520"
  },
  {
    "text": "steps uh and we'll get into some more info there a bit so with that being said we before we get",
    "start": "356520",
    "end": "363560"
  },
  {
    "text": "into testing we need to understand a bit of how kubernetes works because if we're going to run a software that typically",
    "start": "363560",
    "end": "370039"
  },
  {
    "text": "runs on kubernetes outside of kubernetes we're going to need to appropriately simulate kubernetes so that we're actually testing something that's close",
    "start": "370039",
    "end": "376400"
  },
  {
    "text": "enough to kubernetes to give us value but not so much like kubernetes that it's really slow and has all these other problems",
    "start": "376400",
    "end": "383639"
  },
  {
    "text": "right so a common perception with kubernetes or even containers is that these pods or containers are these",
    "start": "384840",
    "end": "391240"
  },
  {
    "text": "really strong Atomic units of isolation and like you have a pod you can't break it down further than that or at least",
    "start": "391240",
    "end": "397440"
  },
  {
    "text": "you have a container and you can't break it down further than that um this is true in honestly a lot of cases but it's",
    "start": "397440",
    "end": "403400"
  },
  {
    "text": "not really how like the reality of the system works like if you look at Linux there's no such thing as a container",
    "start": "403400",
    "end": "408919"
  },
  {
    "text": "what they have is actually these concept called namespaces not kubernetes namespaces this is different Linux",
    "start": "408919",
    "end": "414520"
  },
  {
    "text": "namespaces and a container is just a nice way to package a bunch of different namespaces and a few other things",
    "start": "414520",
    "end": "419879"
  },
  {
    "text": "together into one nice package uh which is really like what the innovation of Docker was years ago was taking this",
    "start": "419879",
    "end": "426240"
  },
  {
    "text": "obscure Linux feature and giving a great ux around it um so if we look at the",
    "start": "426240",
    "end": "431520"
  },
  {
    "text": "reality what we actually see as uh you know just this pod is really a collection of a network namespace a",
    "start": "431520",
    "end": "437520"
  },
  {
    "text": "mount Nam space a user name space a process Nam space and even a few others that I I didn't really mention here",
    "start": "437520",
    "end": "444520"
  },
  {
    "text": "um even this is a bit of an oversimplification too uh namespaces are",
    "start": "444520",
    "end": "450160"
  },
  {
    "text": "a lot more fluid than just like these boxes around uh process like you can have a process join a namespace and",
    "start": "450160",
    "end": "457479"
  },
  {
    "text": "leave a namespace and you can have this kind of mix and match of namespaces to processes so here I show an example of",
    "start": "457479",
    "end": "463599"
  },
  {
    "text": "we have kind of two applications that are sharing the same Mount Nam space within a network Nam space and there's",
    "start": "463599",
    "end": "469039"
  },
  {
    "text": "another process in the same network Nam space but not in that mountain name space and we can even do crazy things as well like have something in a different",
    "start": "469039",
    "end": "475360"
  },
  {
    "text": "network namespace also in that M namespace and really any combination that you can dream of so kubernetes doesn't expose all this",
    "start": "475360",
    "end": "481800"
  },
  {
    "text": "complexity for the vast majority of cases you really don't need to do any of this crazy stuff I just want to illustrate that these things are a lot",
    "start": "481800",
    "end": "488400"
  },
  {
    "text": "more flexible than we are typically exposed to because we're using the higher level abstractions what you do see in kubernetes instead is just really",
    "start": "488400",
    "end": "495199"
  },
  {
    "text": "the ability to opt out of Nam spaces with things like the host Network field the host PID field and some other fields",
    "start": "495199",
    "end": "500440"
  },
  {
    "text": "on pod uh which really just say I don't need my own Nam space uh but they don't let you do this weird sharing of",
    "start": "500440",
    "end": "507240"
  },
  {
    "text": "things so next thing going need to understand is a bit about how kubernetes does networking um so if we look at a",
    "start": "507240",
    "end": "514880"
  },
  {
    "text": "typical cluster I'm just showing two notes here but if you had more it' be the same we kind of have nodes and each",
    "start": "514880",
    "end": "520839"
  },
  {
    "text": "node has some networking device that lets it reach the internet right and the internet is bridging all our nodes",
    "start": "520839",
    "end": "527480"
  },
  {
    "text": "together so that we can reach them this could be the public internet or some VPN or you know any other way to connect a",
    "start": "527480",
    "end": "532880"
  },
  {
    "text": "bunch of nodes uh that's not really relevant to this talk um but we still have this issue of we have the pods that",
    "start": "532880",
    "end": "538959"
  },
  {
    "text": "are within the the nodes so how do we get the network in and out of those um so you can see that I've listed on the",
    "start": "538959",
    "end": "544360"
  },
  {
    "text": "nodes these devices that I call fzero which is a common name for the ethernet device right what we see on the pods is",
    "start": "544360",
    "end": "551440"
  },
  {
    "text": "these things called a virtual ethernet device so just like a physical ethernet cable connects a node to the internet uh",
    "start": "551440",
    "end": "559079"
  },
  {
    "text": "a virtual ethernet device is as if we stuck an ethernet cable in one end in the Pod and on the other end on the host",
    "start": "559079",
    "end": "565399"
  },
  {
    "text": "and it can allow uh you know packets to flow to and from the pod um so with all these devices we then",
    "start": "565399",
    "end": "571600"
  },
  {
    "text": "just have a bunch of rules on the Node that are way outside the scope of this uh that just routes traffic through",
    "start": "571600",
    "end": "577640"
  },
  {
    "text": "these devices through the public internet and gives us the kubernetes networking experience we know and love",
    "start": "577640",
    "end": "582720"
  },
  {
    "text": "or maybe don't",
    "start": "582720",
    "end": "585360"
  },
  {
    "text": "love so now comes the question like we are building this networking proxy we need to hook into this whole complex",
    "start": "587959",
    "end": "594880"
  },
  {
    "text": "system how do we actually do that we're certainly not going to go build two machines get our ethernet cable hook",
    "start": "594880",
    "end": "600320"
  },
  {
    "text": "them up or something just to run a test right uh and while there are some advances already that don't require like",
    "start": "600320",
    "end": "607440"
  },
  {
    "text": "real physical nodes to do these tests like virtual Machines of course or uh kubernetes and Docker it's still a lot",
    "start": "607440",
    "end": "613920"
  },
  {
    "text": "of pain even with those tools to get a full kubernetes setup so what we want to build is actually a setup where we have",
    "start": "613920",
    "end": "620760"
  },
  {
    "text": "a networking like from a networking view it looks identical but without the actual physical infrastructure there so",
    "start": "620760",
    "end": "627880"
  },
  {
    "text": "this is a picture of like kind of my my ideal Network namespace and device setup",
    "start": "627880",
    "end": "633360"
  },
  {
    "text": "where we don't have anything physically running here but it looks exactly like a real kubernetes cluster in terms of",
    "start": "633360",
    "end": "639600"
  },
  {
    "text": "networking so you can see this picture is basically identical to the previous one but instead of real nodes as like",
    "start": "639600",
    "end": "645920"
  },
  {
    "text": "actual machines we've replaced these with just a network namespace that kind of simulates the node instead of an",
    "start": "645920",
    "end": "651360"
  },
  {
    "text": "actual pod running a real container again we simulate that with just a network name space and instead of like",
    "start": "651360",
    "end": "657079"
  },
  {
    "text": "the public internet as this thing that is routing our traffic we again have a network Nam space uh this is going to be",
    "start": "657079",
    "end": "662839"
  },
  {
    "text": "a common trend of Nam spaces and Nam spaces and Nam spaces uh throughout this talk so uh be",
    "start": "662839",
    "end": "669240"
  },
  {
    "text": "prepared uh and then the only other difference is the devices so while we used a v device in pods uh in kubernetes",
    "start": "669240",
    "end": "677160"
  },
  {
    "text": "typically the node to have an actual ethernet device right we've also replaced that one with uh virtual ethernet device as well and then this",
    "start": "677160",
    "end": "684480"
  },
  {
    "text": "last thing a bit nitty-gritty but we also have a bridge device which acts kind of as like the public internet would act uh in the real kubernetes",
    "start": "684480",
    "end": "692399"
  },
  {
    "text": "case um so I'm I'm not going to go into like line by line how we set this up it's fairly complicated but I will just",
    "start": "692399",
    "end": "698440"
  },
  {
    "text": "give a very very brief overview I don't even worry about reading like the lines here that's not the point I'm trying to convey all I'm trying to show is that",
    "start": "698440",
    "end": "705279"
  },
  {
    "text": "setting this up is just a matter of finding the magic and believe me it is quite hard to figure it out uh but set",
    "start": "705279",
    "end": "712680"
  },
  {
    "text": "of commands that do the various thing to set these up so you can see for example like we set up some devices we add some",
    "start": "712680",
    "end": "718839"
  },
  {
    "text": "routes we assign IP addresses to things uh we just do just fairly standard uh",
    "start": "718839",
    "end": "724240"
  },
  {
    "text": "network setup um to simulate this and the nice thing as well is that when",
    "start": "724240",
    "end": "729279"
  },
  {
    "text": "kubernetes is setting up the cluster there's this thing called the container network interface uh cni and they have a",
    "start": "729279",
    "end": "736720"
  },
  {
    "text": "variety of plugins that do exactly this um and so like literally you can see the comment there that says like this script",
    "start": "736720",
    "end": "743279"
  },
  {
    "text": "was derived from this cni PDP plugin um so this exact logic is how real ODS are",
    "start": "743279",
    "end": "749480"
  },
  {
    "text": "set up in real kubernetes clusters uh and if you were doing this you could even actually run those binaries like",
    "start": "749480",
    "end": "754920"
  },
  {
    "text": "the exact same ones that a cluster runs uh set these up we didn't do that because I didn't think it until it was",
    "start": "754920",
    "end": "760120"
  },
  {
    "text": "too late instead we went down this more complex route but if I was to do it again that would probably be a pretty good option so we have to reinvent the",
    "start": "760120",
    "end": "766120"
  },
  {
    "text": "wheel here so now what we set up this whole",
    "start": "766120",
    "end": "771680"
  },
  {
    "text": "crazy like rude Goldberg set of name spaces and devices and that what do we actually you do with this right we we",
    "start": "771680",
    "end": "777120"
  },
  {
    "text": "wanted to do testing and all of a sudden we're in like the depths of Linux networking um so the last missing piece",
    "start": "777120",
    "end": "784000"
  },
  {
    "text": "of this is how do we actually go and take those name spaces and run our tests on it right and the missing piece there",
    "start": "784000",
    "end": "789440"
  },
  {
    "text": "is this convenient Linux CIS call set NS which conveniently lets us reassociate",
    "start": "789440",
    "end": "794880"
  },
  {
    "text": "it through r with the name space exactly what we want right we can enter one of these pods run some test workload and",
    "start": "794880",
    "end": "800959"
  },
  {
    "text": "it's just like as if it was running on a pod right there is a big problem here",
    "start": "800959",
    "end": "806000"
  },
  {
    "text": "though this word thread so most people here I'm guessing or running uh go",
    "start": "806000",
    "end": "811399"
  },
  {
    "text": "typically um or even if not most languages these days are not typically directly interacting with threads",
    "start": "811399",
    "end": "818560"
  },
  {
    "text": "instead we're dealing with go routines right and a go routine is assigned by the go runtime onto a thread and it can",
    "start": "818560",
    "end": "824800"
  },
  {
    "text": "move which thread it's running on and multiple go routines can run on the same thread so if we were to just reassociate",
    "start": "824800",
    "end": "831639"
  },
  {
    "text": "a thread with the namespace we are going to be in trouble right because our go routine is going to move somewhere else and suddenly our code is not in that",
    "start": "831639",
    "end": "838320"
  },
  {
    "text": "namespace anymore and some other guy's code is going to go on our thread and suddenly they're in",
    "start": "838320",
    "end": "843639"
  },
  {
    "text": "this name space and things are going haywire right so this is not going to work for us out of the",
    "start": "843639",
    "end": "848720"
  },
  {
    "text": "box there is an approach I've seen in a lot of go projects in fact we actually have some go code that looks quite a bit",
    "start": "848720",
    "end": "854560"
  },
  {
    "text": "like this uh that tries to lock the go routine to a specific thread so that we can temporarily enter the namespace run",
    "start": "854560",
    "end": "861079"
  },
  {
    "text": "some code then leave the namespace uh but there is a big problem with this which is that we have this",
    "start": "861079",
    "end": "866199"
  },
  {
    "text": "comment here that says please please don't spawn a go routine in this function or you're going to have a bad time and we have no way to enforce that",
    "start": "866199",
    "end": "872920"
  },
  {
    "text": "we just have to hope that none other code is going to run go routines that's a big problem for us though because we",
    "start": "872920",
    "end": "878399"
  },
  {
    "text": "want to simulate a real kubernetes environment and in each simulated pod we want to run real software like a real",
    "start": "878399",
    "end": "885079"
  },
  {
    "text": "server a real HTP client a real proxy and all these things are using mini go",
    "start": "885079",
    "end": "890160"
  },
  {
    "text": "routines right so this is not going to fly for us uh and by the way if you want to do something like this and go you can",
    "start": "890160",
    "end": "895839"
  },
  {
    "text": "do it but don't copy this code there's a lot more robust error handling at things that are needed to do this",
    "start": "895839",
    "end": "901759"
  },
  {
    "text": "safely now fortunately I've been showing go because it's convenient uh but our proxies actually written in Rust and",
    "start": "901759",
    "end": "908279"
  },
  {
    "text": "rust gives us a bit more flexibility to solve these problems so unlike and go rust doesn't have like this Global run",
    "start": "908279",
    "end": "915199"
  },
  {
    "text": "time that you set up and that messes with these threads for us instead we actually have more control over when we",
    "start": "915199",
    "end": "921519"
  },
  {
    "text": "create a runtime and actually the ability to create multiple run times so the equivalent function of rust looks a",
    "start": "921519",
    "end": "927120"
  },
  {
    "text": "bit like this uh which basically says that when we run around a function we're going to spawn a new thread and on that",
    "start": "927120",
    "end": "932839"
  },
  {
    "text": "thread we're going to create a new runtime dedicated to this thread which can run our function to completion and",
    "start": "932839",
    "end": "938120"
  },
  {
    "text": "within that we can have as many tasks which are the equivalent of go routines and run kind of arbitrarily complex",
    "start": "938120",
    "end": "943880"
  },
  {
    "text": "software still scoped to this network name space so I want to show like wouldn't we",
    "start": "943880",
    "end": "951399"
  },
  {
    "text": "put all this together what does it look like to actually you run a test um this is or to write a test I suppose this is",
    "start": "951399",
    "end": "957240"
  },
  {
    "text": "going to be an example of a real test that copy and pasted from our code uh that is actually like exactly what our",
    "start": "957240",
    "end": "962319"
  },
  {
    "text": "tests look like with just a small abstraction we have to kind of help build these simulated pod environments",
    "start": "962319",
    "end": "969240"
  },
  {
    "text": "so first we're going to spin up a deploy Z tunnel Z tunnel is the name of our proxy and so what this will do is tell",
    "start": "969240",
    "end": "975360"
  },
  {
    "text": "our test framework to go set up a fake node because we requested this is going to run on the default node uh go spin up",
    "start": "975360",
    "end": "982560"
  },
  {
    "text": "a fake pod inside of that node assign an IP address set up all the routing so they can do standard kubernetes networking and then run a our proxy",
    "start": "982560",
    "end": "990600"
  },
  {
    "text": "workload inside of that pod uh and again all of this is just happening within a single process uh so we're not actually",
    "start": "990600",
    "end": "997600"
  },
  {
    "text": "of course spinning up pods or anything debugging is quite simple because everything's in a one single",
    "start": "997600",
    "end": "1003120"
  },
  {
    "text": "process next we can also deploy say a server workload which again just creates another pod simulated pod I should say",
    "start": "1003120",
    "end": "1009880"
  },
  {
    "text": "and then we can run air simulated workload within that pod uh and again same thing to run a client that can",
    "start": "1009880",
    "end": "1015959"
  },
  {
    "text": "connect to the server presumably through a proxy if our test is working properly uh and connect to the server and then we",
    "start": "1015959",
    "end": "1022440"
  },
  {
    "text": "can do some various assertions like we do things like uh check that metrics work check that the request was encrypted as we expected uh and all",
    "start": "1022440",
    "end": "1029438"
  },
  {
    "text": "sorts of other things uh one small cool thing here is that all these fake pods are getting assigned IP addresses just",
    "start": "1029439",
    "end": "1036079"
  },
  {
    "text": "like they would in kubernetes uh but we of course don't want a write or test based on these random uh Auto allocated",
    "start": "1036079",
    "end": "1042079"
  },
  {
    "text": "IP addresses um so this resolve thing is just a neat little like tiny DNS thing",
    "start": "1042079",
    "end": "1048120"
  },
  {
    "text": "essentially uh that just lets us look up from a name the IP address that was allocated to it um so it's not literally",
    "start": "1048120",
    "end": "1054880"
  },
  {
    "text": "DNS but it kind of serves the same role so with this test if we want to run it we can just use the standard tooling um",
    "start": "1054880",
    "end": "1061799"
  },
  {
    "text": "if you're not familiar with rust cargo is basically the same as the go command so we just run cargo test and the test",
    "start": "1061799",
    "end": "1067080"
  },
  {
    "text": "will run or or maybe not because after all",
    "start": "1067080",
    "end": "1072960"
  },
  {
    "text": "that we forgot that every single operation we did like in the past 15 minutes we've been talking every every",
    "start": "1072960",
    "end": "1078960"
  },
  {
    "text": "single one of those requires privileges right so we've just blown through and built all this and it does not meet all",
    "start": "1078960",
    "end": "1085080"
  },
  {
    "text": "of our goals right now we can just do pseudo cargo test it works fine we actually shipped this for about a year",
    "start": "1085080",
    "end": "1092280"
  },
  {
    "text": "um so it's not you know the worst thing in the world uh but you know it's still kind of a pain",
    "start": "1092280",
    "end": "1098880"
  },
  {
    "text": "like if you want to run in your ID you have to go and like configure some weird settings to make it run it under pseudo and we actually made it so if you",
    "start": "1098880",
    "end": "1104919"
  },
  {
    "text": "weren't root like it would skip it automatically so all the time I'd be pushing code and like it works locally it fails in the CI",
    "start": "1104919",
    "end": "1110880"
  },
  {
    "text": "what's wrong and it was just the test wasn't even running right because I forgot to run pseudo so we want to do",
    "start": "1110880",
    "end": "1116039"
  },
  {
    "text": "better than that we want a drop rot so how are we going to do that it is of",
    "start": "1116039",
    "end": "1121799"
  },
  {
    "text": "course more Linux namespaces right so just a refresher I already",
    "start": "1121799",
    "end": "1127840"
  },
  {
    "text": "showed basically the same diagram but this is what our testing environment looks like right we have basically just",
    "start": "1127840",
    "end": "1133880"
  },
  {
    "text": "name spaces on Nam spaces on names spaces so what we're going to do and I'll explain this in few seconds is add",
    "start": "1133880",
    "end": "1140760"
  },
  {
    "text": "some more name spaces on top of that a user name space and a mount name",
    "start": "1140760",
    "end": "1145799"
  },
  {
    "text": "space so what a user namespace is is it basically lets us map a user within the",
    "start": "1145799",
    "end": "1151440"
  },
  {
    "text": "namespace to a user outside the namespace and so we can say that within the namespace rout is actually",
    "start": "1151440",
    "end": "1157440"
  },
  {
    "text": "equivalent to John in the host namespace and this is very cool because now we can",
    "start": "1157440",
    "end": "1162559"
  },
  {
    "text": "do operations that seem privileged as long as we're within that Nam space",
    "start": "1162559",
    "end": "1168960"
  },
  {
    "text": "now if you're sitting there wondering how is that not just like the most obvious security vulnerability in Linux",
    "start": "1168960",
    "end": "1175240"
  },
  {
    "text": "it's because it doesn't actually let us escalate privileges beyond that namespace so if we were to try and read",
    "start": "1175240",
    "end": "1180679"
  },
  {
    "text": "a file that's owned by the actual root for example it would deny that even though where the user zero it is aware",
    "start": "1180679",
    "end": "1187159"
  },
  {
    "text": "of like the real user mapping and knows that this is not allowed this is a problem for us because a lot of the",
    "start": "1187159",
    "end": "1192559"
  },
  {
    "text": "tools we run rely on files on the file system that are owned by root um so here's an example when xtes very",
    "start": "1192559",
    "end": "1199159"
  },
  {
    "text": "nitty-gritty detail but it's a files used by uh some of the networking setup we do so again like we just need more",
    "start": "1199159",
    "end": "1206240"
  },
  {
    "text": "name spaces and we can surely solve this so that's where the mount name space comes in which essentially lets us Mount",
    "start": "1206240",
    "end": "1213039"
  },
  {
    "text": "files within our name space that's scoped only to us that lets us essentially in our case fake files so we",
    "start": "1213039",
    "end": "1219440"
  },
  {
    "text": "can say that instead of the this file or that file representing like the real file on the host file system it can",
    "start": "1219440",
    "end": "1226840"
  },
  {
    "text": "actually point to another file that we just set up like a temporary directory for each test that way that's fully",
    "start": "1226840",
    "end": "1232640"
  },
  {
    "text": "owned by the actual user and we have access to it within our namespace so I'm going to go back a bit",
    "start": "1232640",
    "end": "1238640"
  },
  {
    "text": "if we so now that we have this username space with the mount name space set up we're actually effectively running our",
    "start": "1238640",
    "end": "1244280"
  },
  {
    "text": "test as root uh for all intents and purposes from the test they are user zero they have access to everything they",
    "start": "1244280",
    "end": "1250240"
  },
  {
    "text": "need to set up all these networking constructs but the actual uh like you don't need to run",
    "start": "1250240",
    "end": "1255919"
  },
  {
    "text": "pseudo anymore right it's all run as a standard unpr pred process uh so this makes running the test quite a bit",
    "start": "1255919",
    "end": "1262919"
  },
  {
    "text": "easier and doesn't have some of the limitations we talked about uh but we still need a way to",
    "start": "1262919",
    "end": "1270240"
  },
  {
    "text": "actually do this at the beginning of the process right we talked about if we're moving threads we're leaving uh name",
    "start": "1270240",
    "end": "1276520"
  },
  {
    "text": "spaces right and we know that for every one of these simulated pods we're definitely spining up new threads so we",
    "start": "1276520",
    "end": "1282279"
  },
  {
    "text": "need to make sure that we get this uh this user like faking set up as",
    "start": "1282279",
    "end": "1288360"
  },
  {
    "text": "a early as possible so if you're familiar with go",
    "start": "1288360",
    "end": "1294000"
  },
  {
    "text": "um you you'd probably think okay that's fine we'll just run it in a nit function it's going to run our code before",
    "start": "1294000",
    "end": "1299799"
  },
  {
    "text": "anything else we'll set up our namespaces there and we'll be good to go uh it's not quite as simple",
    "start": "1299799",
    "end": "1305080"
  },
  {
    "text": "unfortunately the problem is that when a process starts up and go first we do like the basic Linux process",
    "start": "1305080",
    "end": "1312039"
  },
  {
    "text": "initialization then the go run time initializes itself and only after that is our user code actually called so",
    "start": "1312039",
    "end": "1319039"
  },
  {
    "text": "while we like to think of it as like this very first code that's called uh and typically it's good enough it's not",
    "start": "1319039",
    "end": "1325600"
  },
  {
    "text": "quite as early in the process as you might think so the big problem is that the threads are created as the go run",
    "start": "1325600",
    "end": "1332240"
  },
  {
    "text": "time initializes which means that we actually need to hook in before the go run time and with go there's not really",
    "start": "1332240",
    "end": "1338880"
  },
  {
    "text": "a way to run your code before go starts up itself so again we obviously just need",
    "start": "1338880",
    "end": "1345960"
  },
  {
    "text": "more name spaces right that's the running trend no that's not true this time we just",
    "start": "1345960",
    "end": "1351080"
  },
  {
    "text": "need a little bit of C usually not my favorite but it will get the job done here so while we can't run go code",
    "start": "1351080",
    "end": "1357559"
  },
  {
    "text": "before go starts up um I think they would be mad if I even suggested the feature uh we can run C code and Link",
    "start": "1357559",
    "end": "1364919"
  },
  {
    "text": "that into go with feature called SEO uh and there's this cool feature of the Linker called a Constructor which",
    "start": "1364919",
    "end": "1371279"
  },
  {
    "text": "basically lets us run our code at I don't know exactly when but very very early in the process initialization done",
    "start": "1371279",
    "end": "1377279"
  },
  {
    "text": "by the Linker so you can see we just defined the simple function called enter net NS uh which calls unshare it's a",
    "start": "1377279",
    "end": "1384400"
  },
  {
    "text": "really weird name but it basically just means create a new network names space and we annotate this as a",
    "start": "1384400",
    "end": "1390000"
  },
  {
    "text": "Constructor um now the usage of this is really awkward because it's not actually a function we call it's called by the",
    "start": "1390000",
    "end": "1396600"
  },
  {
    "text": "Linker during the process initialization so instead we really just need to link this into our code by doing",
    "start": "1396600",
    "end": "1402360"
  },
  {
    "text": "an import um so a little bit weird but it does get the job done um so you can see here we import a few pack packages",
    "start": "1402360",
    "end": "1408799"
  },
  {
    "text": "that sets up a user name space a network name space and a mount name space um our",
    "start": "1408799",
    "end": "1414120"
  },
  {
    "text": "proxy is actually rich and in rush but we do use some of this for some of our testing and go um so this is a real Library if you are interested in using",
    "start": "1414120",
    "end": "1422360"
  },
  {
    "text": "it in the actual rust version it's basically the same but we can write uh just normal rest code and then annotate",
    "start": "1422360",
    "end": "1428799"
  },
  {
    "text": "that as a Constructor or seor is the library that does this in rest so very similar",
    "start": "1428799",
    "end": "1434760"
  },
  {
    "text": "concept so now that we've gotten all this complexity quite a bit of complexity right a lot of nitty-gritty",
    "start": "1434760",
    "end": "1440880"
  },
  {
    "text": "Linux details did we actually meet our goals or did we just go off on this crazy tangent um so the first most",
    "start": "1440880",
    "end": "1447919"
  },
  {
    "text": "important one is is it quick uh here's a snippet of the test output from running",
    "start": "1447919",
    "end": "1453039"
  },
  {
    "text": "all of our integration tests in uh the Z tonel proxy uh and you can see we've got",
    "start": "1453039",
    "end": "1458600"
  },
  {
    "text": "21 tests here and the total runtime is uh 0.8 seconds uh which is quite good",
    "start": "1458600",
    "end": "1464799"
  },
  {
    "text": "I'd say um fortunately all the tests are also bble to run in parallel which is",
    "start": "1464799",
    "end": "1470039"
  },
  {
    "text": "not something we would have been able to do in kubernetes either at least for the type of tests we're running uh because",
    "start": "1470039",
    "end": "1475200"
  },
  {
    "text": "all these are isolated we can go easily spin up 20 of these in parallel and run the tests um like that uh which is quite",
    "start": "1475200",
    "end": "1482360"
  },
  {
    "text": "nice because each of these tests is taking about 250 milliseconds so if they were run in sequence it would take a few",
    "start": "1482360",
    "end": "1487840"
  },
  {
    "text": "seconds 5 Seconds not so bad uh but under a second even better so I'd say",
    "start": "1487840",
    "end": "1493320"
  },
  {
    "text": "that's a mission accomplished there we also saw from the the previous snippet",
    "start": "1493320",
    "end": "1498559"
  },
  {
    "text": "uh that there was no setup required I suppose I could have done setup and not shown it but I I promis I did not um and",
    "start": "1498559",
    "end": "1504840"
  },
  {
    "text": "again because everything's running in a single process you and there's all",
    "start": "1504840",
    "end": "1509880"
  },
  {
    "text": "standard tooling we can just attach a debugger just like normal in the IDE and everything's there in a single process",
    "start": "1509880",
    "end": "1515640"
  },
  {
    "text": "to kind of debug put break points wherever we need and see things flow through the system um and again as",
    "start": "1515640",
    "end": "1522679"
  },
  {
    "text": "there's no setup we didn't need kubernetes we didn't need Docker and as we spent a lot of effort on we also didn't need",
    "start": "1522679",
    "end": "1528840"
  },
  {
    "text": "route um so I would say we did accomplish all of our goals we've been using this in our real code for I a",
    "start": "1528840",
    "end": "1535520"
  },
  {
    "text": "while now maybe a year um and I would say well it was a very complex and uh",
    "start": "1535520",
    "end": "1541000"
  },
  {
    "text": "long setup uh it did pay off quite a bit and helped us achieve our goals of making running tests easier faster",
    "start": "1541000",
    "end": "1546399"
  },
  {
    "text": "simple uh and easier to develop uh one thing I do uh want to talk about is a",
    "start": "1546399",
    "end": "1551840"
  },
  {
    "text": "bit on the runtime um like I said I'm really impatient so 02 seconds is pretty quick",
    "start": "1551840",
    "end": "1557320"
  },
  {
    "text": "but also it's 02 seconds I'm waiting and I would rather not right so I was always wondering like why is it that it takes",
    "start": "1557320",
    "end": "1563880"
  },
  {
    "text": "that long um and the reason is that there's just a lot of stuff that's not that fast so here's an example of",
    "start": "1563880",
    "end": "1570559"
  },
  {
    "text": "benchmarking uh just creating the network names space and username space um which is with this cool benchmarking",
    "start": "1570559",
    "end": "1577200"
  },
  {
    "text": "tool and you can see it takes six milliseconds to set one up six milliseconds is is pretty quick but we",
    "start": "1577200",
    "end": "1582640"
  },
  {
    "text": "set up a lot of name spaces as you saw so it adds up over time as we're creating you know if we create five",
    "start": "1582640",
    "end": "1587799"
  },
  {
    "text": "simulator pods it's like I don't know 20 50 name spaces that we're setting up for these tests uh and even worse it doesn't",
    "start": "1587799",
    "end": "1594200"
  },
  {
    "text": "actually parallelize well so here's basically running a different Benchmark but we're running 256 of these in",
    "start": "1594200",
    "end": "1599880"
  },
  {
    "text": "parallel and you can see it's averaging 1.2 seconds each so unfortunately a lot of these calls uh in Linux are blocking",
    "start": "1599880",
    "end": "1607520"
  },
  {
    "text": "and they take kind of a global lock on the system um so this kind of ties into like real world kubernetes I've often",
    "start": "1607520",
    "end": "1613760"
  },
  {
    "text": "wondered like I asked for 200 pods why did it take a whole minute for you to give me this 200 pods um and the answer",
    "start": "1613760",
    "end": "1620399"
  },
  {
    "text": "kind of is that there's even at the very lowest base layer of what it takes to run a pod these operations are not",
    "start": "1620399",
    "end": "1626480"
  },
  {
    "text": "instant and then on top of that there's of course even more and more abstractions in terms of scheduling the Pod creating end points and all these",
    "start": "1626480",
    "end": "1633440"
  },
  {
    "text": "different things so uh when you consider that it's actually quite a wonder that it's able to schedule pods so quickly",
    "start": "1633440",
    "end": "1639159"
  },
  {
    "text": "and run them um so with that I want to thank you all for coming out on a Friday to talk about testing uh I really",
    "start": "1639159",
    "end": "1645640"
  },
  {
    "text": "appreciate it and we do have seven minutes uh we have some mics here if anyone has questions uh and I'll of",
    "start": "1645640",
    "end": "1651200"
  },
  {
    "text": "course also be outside afterwards if you want to talk [Applause]",
    "start": "1651200",
    "end": "1659200"
  },
  {
    "text": "more hey hey um thanks for the talk um so in the rust code um you used I guess",
    "start": "1668960",
    "end": "1677080"
  },
  {
    "text": "it's assuming that's using Tokyo for the runtime um and that works fine but does",
    "start": "1677080",
    "end": "1682600"
  },
  {
    "text": "that preclude spawning actual OS threads will that break out of the name space yeah if",
    "start": "1682600",
    "end": "1688080"
  },
  {
    "text": "you were to spawn a thread uh it would you could potentially set up a system such that you because you're more in",
    "start": "1688080",
    "end": "1693880"
  },
  {
    "text": "control then and go you could set up a system where you spawn a thread and then make sure you enter Then actually I take",
    "start": "1693880",
    "end": "1700159"
  },
  {
    "text": "that back when you spawn a thread it should inherent the name space of the parent and so I think that would",
    "start": "1700159",
    "end": "1705480"
  },
  {
    "text": "actually be fine gotcha uh we're not actually doing that in our code I believe so hasn't been an issue but it would work fine there okay it's more of",
    "start": "1705480",
    "end": "1711960"
  },
  {
    "text": "an issue in go because you have absolutely no control over the actual threads yeah yeah thanks",
    "start": "1711960",
    "end": "1718840"
  },
  {
    "text": "yep what you have a mic here uh I don't think so you probably have to go there",
    "start": "1729480",
    "end": "1737360"
  },
  {
    "text": "yeah I guess kind of a similar question like with the go example if I if if the code's been up atin in go so would it",
    "start": "1741399",
    "end": "1747559"
  },
  {
    "text": "break uh that's part of the tricky thing is honestly a lot of times it probably wouldn't break because go May schedule",
    "start": "1747559",
    "end": "1753559"
  },
  {
    "text": "it to the same thread uh which is almost worse because it may appear to work fine maybe it works fine on one machine that",
    "start": "1753559",
    "end": "1759080"
  },
  {
    "text": "only has one core or two cores makes it less likely and then you go deployed in production and suddenly it doesn't work",
    "start": "1759080",
    "end": "1765039"
  },
  {
    "text": "um so the short answer is no it doesn't really work um so there is a lot of code both in EO and",
    "start": "1765039",
    "end": "1771159"
  },
  {
    "text": "other projects like a lot of the the you know networking stuff in kubernetes is doing things like this and I think they",
    "start": "1771159",
    "end": "1776919"
  },
  {
    "text": "often just make sure that the code that they're executing in the name space is very small careful not to run go",
    "start": "1776919",
    "end": "1782720"
  },
  {
    "text": "routines uh and take cautions like that so got it and and for the r for the r",
    "start": "1782720",
    "end": "1788559"
  },
  {
    "text": "example so why did you so I remember you showed a go example and then you move to",
    "start": "1788559",
    "end": "1794440"
  },
  {
    "text": "the rust example but then why did we need to do the",
    "start": "1794440",
    "end": "1799559"
  },
  {
    "text": "unsure uh guess there's more slides than I thought sorry okay yes so if you go one one slide back yep so then you said",
    "start": "1799559",
    "end": "1807000"
  },
  {
    "text": "okay like with go we cannot enforce yeah but then you you went to the r example which you can but I didn't understand",
    "start": "1807000",
    "end": "1813120"
  },
  {
    "text": "why we did the unshare link like with the SEO in Rust as well ah yeah so the",
    "start": "1813120",
    "end": "1818919"
  },
  {
    "text": "the unshare stuff with the SEO and the nalization that was for a separate purpose so this code on its own is",
    "start": "1818919",
    "end": "1825559"
  },
  {
    "text": "perfectly fine for entering a namespace doing an operation and leaving it what the part about the constructors and the",
    "start": "1825559",
    "end": "1831600"
  },
  {
    "text": "username spaces was about getting us an environment where the entire test process uh is basically root but it's",
    "start": "1831600",
    "end": "1838960"
  },
  {
    "text": "not the real root uh which allows us to do privileged operations so one example outside of like the proxy is in EO we",
    "start": "1838960",
    "end": "1846840"
  },
  {
    "text": "set up IP tables right and we use this approach with the uh user Nam space",
    "start": "1846840",
    "end": "1853000"
  },
  {
    "text": "mapping to run the test as this route and actually run real IP tables commands against the kernel and actually apply",
    "start": "1853000",
    "end": "1859440"
  },
  {
    "text": "them and test them that way um without requiring running as a root U and that's something we do with the go code",
    "start": "1859440",
    "end": "1865679"
  },
  {
    "text": "specifically so I see so so you needed before the runtime initialization just",
    "start": "1865679",
    "end": "1871360"
  },
  {
    "text": "to yeah because otherwise we we could enter you can enter the user Nam space",
    "start": "1871360",
    "end": "1876679"
  },
  {
    "text": "just for one function call uh but then you have to you know then you have the constraint that you can't spawn go routines and you have to make sure every",
    "start": "1876679",
    "end": "1882159"
  },
  {
    "text": "test calls that uh so for us at least for our use case we needed it so that the entire process had that uh kind of",
    "start": "1882159",
    "end": "1889120"
  },
  {
    "text": "simulated privilege access got it I appreciate it thanks yep yeah actually before like in in Rust",
    "start": "1889120",
    "end": "1895799"
  },
  {
    "text": "we initially weren't using the Constructor approach and we just made sure every test like wrapped the entire",
    "start": "1895799",
    "end": "1901120"
  },
  {
    "text": "test with that setup uh we moved to the Constructor approach because it just easier and you didn't have as many",
    "start": "1901120",
    "end": "1906960"
  },
  {
    "text": "steps uh in Rust like we were initially not doing the Constructor approach we were just having each test individually",
    "start": "1906960",
    "end": "1913519"
  },
  {
    "text": "uh set that up um and we moved at the very least because then you have to call a function on every code uh and I think",
    "start": "1913519",
    "end": "1920440"
  },
  {
    "text": "there was also something about it making cleanup easier but I don't entirely remember yeah hi um thank you for great",
    "start": "1920440",
    "end": "1927399"
  },
  {
    "text": "talk um so if I understand correctly the uh virtual diset adapters and bridges",
    "start": "1927399",
    "end": "1933600"
  },
  {
    "text": "all this stuff goes um L3 over L4 networking and um did you have any",
    "start": "1933600",
    "end": "1940440"
  },
  {
    "text": "chance to measure what kind of performance application does it have I mean to setup you shown but any idea how",
    "start": "1940440",
    "end": "1948320"
  },
  {
    "text": "um yeah I mean so we're not doing like we're not running our our like benchmarks against this um so I I",
    "start": "1948320",
    "end": "1955440"
  },
  {
    "text": "wouldn't say that we've tested it I would expect it to be fairly small um like there is a like in the real world",
    "start": "1955440",
    "end": "1961480"
  },
  {
    "text": "in kubernetes there is a cost of a pod traversing the the virtual ethernet device that I've seen a bit about so",
    "start": "1961480",
    "end": "1968679"
  },
  {
    "text": "there is some cost to it but for us it hasn't been a big deal because losing 10% performance on our test is is not a",
    "start": "1968679",
    "end": "1975080"
  },
  {
    "text": "big deal for us it's bpark 10% yeah I mean I would if I had to pick a number I'd say 10% but it's a wild guess",
    "start": "1975080",
    "end": "1982559"
  },
  {
    "text": "really so y this was an excellent talk um one of",
    "start": "1982559",
    "end": "1990360"
  },
  {
    "text": "one question that I had was you kind of alluded to namespace Creation in the",
    "start": "1990360",
    "end": "1996360"
  },
  {
    "text": "Linux kernel being like a blocking action that was pretty variable in its",
    "start": "1996360",
    "end": "2001720"
  },
  {
    "text": "timing was there anything that yall picked up in doing",
    "start": "2001720",
    "end": "2007039"
  },
  {
    "text": "this work where you're like in order to further improve kubernetes or ISO or",
    "start": "2007039",
    "end": "2013600"
  },
  {
    "text": "something we need to start making changes at a more fundamental level in",
    "start": "2013600",
    "end": "2018720"
  },
  {
    "text": "the system to make things per as performant as we need them to be or like",
    "start": "2018720",
    "end": "2024440"
  },
  {
    "text": "futur looking to like enable kubernetes to like hit more spin up pods faster",
    "start": "2024440",
    "end": "2031559"
  },
  {
    "text": "that kind of stuff yeah I mean I I looked into it a bit um like I did like did a flame graph or whatever found",
    "start": "2031559",
    "end": "2037799"
  },
  {
    "text": "there was some lock somewhere in I realized it was like deep in 2,000 lines of code in the Linux kernel and uh",
    "start": "2037799",
    "end": "2044320"
  },
  {
    "text": "called it a day so is there stuff that could be done probably I had assumed that there's a lot of really smart",
    "start": "2044320",
    "end": "2050040"
  },
  {
    "text": "people that are working on this code that they've probably optimized it hopefully um it hadn't explored much",
    "start": "2050040",
    "end": "2055560"
  },
  {
    "text": "there but potentially there is more low hanging fruit um not low enough for me to grab",
    "start": "2055560",
    "end": "2063200"
  },
  {
    "text": "though all right I think that's everything and and uh we're out of time so thank you everyone and hope you have",
    "start": "2065359",
    "end": "2070800"
  },
  {
    "text": "a good rest of your cucon",
    "start": "2070800",
    "end": "2074679"
  }
]