[
  {
    "text": "all right let's get started then um so welcome to our session on past present and future of ebpf and",
    "start": "299",
    "end": "7500"
  },
  {
    "text": "observability um I'm joined by Natalie today from New Relic who is a contributor to the pixie",
    "start": "7500",
    "end": "14040"
  },
  {
    "text": "open source project um I'm Frederick I founded a company called polar signals and we both happen",
    "start": "14040",
    "end": "19500"
  },
  {
    "text": "to work on ebpf and in the context of observability",
    "start": "19500",
    "end": "25380"
  },
  {
    "text": "so introduction to ebpf let's do a show of hands how many people know what ebpf",
    "start": "25380",
    "end": "32758"
  },
  {
    "text": "is all right we see a lot of hands okay so who's running some tools that use ebpf",
    "start": "32759",
    "end": "41040"
  },
  {
    "text": "okay that's probably in maybe 50 percent who has written an ebpf program",
    "start": "41040",
    "end": "49640"
  },
  {
    "text": "okay okay that's still maybe 20 30 that's actually more than I thought so",
    "start": "49739",
    "end": "55320"
  },
  {
    "text": "um hopefully um at least by the end of uh this talk you'll will have everyone be able to raise their hand at the very",
    "start": "55320",
    "end": "62760"
  },
  {
    "text": "least know how to write an ebpf program and how to get started with that obviously you won't have written a",
    "start": "62760",
    "end": "68760"
  },
  {
    "text": "program yet um so just to make sure that we're all kind of on the same page of how ebpf",
    "start": "68760",
    "end": "74760"
  },
  {
    "text": "works so ebpf is kind of a virtual machine within the Linux kernel",
    "start": "74760",
    "end": "80880"
  },
  {
    "text": "um that we can attach to certain triggers so in this call in this case uh",
    "start": "80880",
    "end": "87840"
  },
  {
    "text": "what we have is we're attaching an ebpf program that we've written below to some",
    "start": "87840",
    "end": "93540"
  },
  {
    "text": "trigger and in this case it's whenever we execute the ciscal exec ve so every",
    "start": "93540",
    "end": "99659"
  },
  {
    "text": "time this syscall is called first our ebpf program is called and we can do whatever we want",
    "start": "99659",
    "end": "105420"
  },
  {
    "text": "um within within that context right we're getting given a bunch of con text about what's being executed and you know",
    "start": "105420",
    "end": "113159"
  },
  {
    "text": "we can save that and you know have a counter of how often this Cisco is being",
    "start": "113159",
    "end": "118979"
  },
  {
    "text": "called or we can do a log line or you know whatever is useful for us especially in the context of observability obviously we would want to",
    "start": "118979",
    "end": "125640"
  },
  {
    "text": "kind of export some sort of signal so these hooks can vary very very very",
    "start": "125640",
    "end": "132239"
  },
  {
    "text": "very widely and Natalie is kind of kind of teach us where all of this kind of",
    "start": "132239",
    "end": "137879"
  },
  {
    "text": "originally came from but today there's a very wide variety of hooks that we could",
    "start": "137879",
    "end": "143879"
  },
  {
    "text": "attach our ebpf programs to so that can be kernel probes so like attaching our",
    "start": "143879",
    "end": "149700"
  },
  {
    "text": "program to a kernel function that's being executed you probes these can be",
    "start": "149700",
    "end": "154800"
  },
  {
    "text": "used to kind of Trace user space execution so the programs that you and I write that run you know maybe written in",
    "start": "154800",
    "end": "161700"
  },
  {
    "text": "go and they do I don't know some network service maybe some web server you could",
    "start": "161700",
    "end": "166920"
  },
  {
    "text": "attach a probe to some function of your go program and also do some tracing with that or perf events this is actually",
    "start": "166920",
    "end": "173760"
  },
  {
    "text": "something that I happen to work with on a daily basis so perf events tend to work in the way in a kind of overflow",
    "start": "173760",
    "end": "180060"
  },
  {
    "text": "way so we tell the Linux kernel hey call my program every 100 CPU Cycles or",
    "start": "180060",
    "end": "185940"
  },
  {
    "text": "something like that right that's typically how profilers work so when we write ebpf programs how that",
    "start": "185940",
    "end": "193260"
  },
  {
    "text": "does that work well actually it is it's not all that different from when we typically write programs typically if we",
    "start": "193260",
    "end": "198959"
  },
  {
    "text": "were to write a c program we would compile it with some compiler tool chain like clang",
    "start": "198959",
    "end": "205200"
  },
  {
    "text": "um and we we would say the Target right in this in this case um I'm building it for an x86 platform",
    "start": "205200",
    "end": "211920"
  },
  {
    "text": "for Linux and if we were to want to write a BPF program actually you know we",
    "start": "211920",
    "end": "218099"
  },
  {
    "text": "still write C code but the only thing different is the Target and what it",
    "start": "218099",
    "end": "223260"
  },
  {
    "text": "outputs is ebpf bytecode this is important so let's remember that for later",
    "start": "223260",
    "end": "229080"
  },
  {
    "text": "because what happens with the ebpf byte code is it's kind of a generic representation maybe people are familiar",
    "start": "229080",
    "end": "235680"
  },
  {
    "text": "with kind of the equivalent thing in the Java world when we compile a Java program we",
    "start": "235680",
    "end": "241560"
  },
  {
    "text": "the output we get is Java byte code and that in itself is not really executable by any machine we still need the Java",
    "start": "241560",
    "end": "248519"
  },
  {
    "text": "virtual machine to kind of compile that Java byte code into actually something that the machine can understand and",
    "start": "248519",
    "end": "255120"
  },
  {
    "text": "execute and this is precisely what uh kind of the evpf Justin Time compiler within the",
    "start": "255120",
    "end": "262260"
  },
  {
    "text": "Linux kernel does so it first verifies that this program is actually safe to",
    "start": "262260",
    "end": "267960"
  },
  {
    "text": "run and we'll see in a second or we'll talk about in a second what that actually means and once it's verified",
    "start": "267960",
    "end": "273300"
  },
  {
    "text": "that this is safe to run it will compile it and then you can attach it to any any of the hooks that I",
    "start": "273300",
    "end": "279479"
  },
  {
    "text": "was talking about previously so why do we actually need to verify this well the thing is with ebpf",
    "start": "279479",
    "end": "285740"
  },
  {
    "text": "we're executing code in kernel space right like this is almost worse than having root privileges where like we can",
    "start": "285740",
    "end": "293759"
  },
  {
    "text": "do arbitrary things if we if we're executing things in kernel space but with ebpf and the ebpf verifier it",
    "start": "293759",
    "end": "301680"
  },
  {
    "text": "actually ensures that whatever we're doing is actually going to terminate perhaps you're familiar with the halting",
    "start": "301680",
    "end": "307440"
  },
  {
    "text": "problem in like it's like a classic computer science problem where we're asking ourselves can we ensure that the",
    "start": "307440",
    "end": "313919"
  },
  {
    "text": "program that we're writing is actually going to terminate right will it exit what happens when we feed and can we",
    "start": "313919",
    "end": "321660"
  },
  {
    "text": "write a program that determines whether that is going to happen well what happens when we feed",
    "start": "321660",
    "end": "326759"
  },
  {
    "text": "that same program to itself right and the way that um ebpf solves this it just says you",
    "start": "326759",
    "end": "333660"
  },
  {
    "text": "can't have loops everything has to be deterministic and so essentially what we're saying is we we can just write",
    "start": "333660",
    "end": "340380"
  },
  {
    "text": "entirely arbitrary programs that kind of have unpredictable",
    "start": "340380",
    "end": "345900"
  },
  {
    "text": "um termination so in a way you could say we're not touring complete",
    "start": "345900",
    "end": "351479"
  },
  {
    "text": "so yeah in that way the the kernel actually makes sure that you know we're at most executing I believe it's a",
    "start": "351479",
    "end": "358560"
  },
  {
    "text": "million instructions or something along those lines and therefore you know that that's it that's the amount of uh things",
    "start": "358560",
    "end": "365039"
  },
  {
    "text": "that we can do and if we can accomplish the tasks that we want to do with our ebpf program then great if not then",
    "start": "365039",
    "end": "370440"
  },
  {
    "text": "we're going to have a bad time with the ubpf verifier but assuming that that all goes well we",
    "start": "370440",
    "end": "376620"
  },
  {
    "text": "can then attach it to our hooks and lastly to kind of complete our understanding of ebpf how do we actually",
    "start": "376620",
    "end": "384000"
  },
  {
    "text": "as Engineers kind of get that information out of Kernel space right like I've always been saying that we",
    "start": "384000",
    "end": "390060"
  },
  {
    "text": "execute this code within kernel space and we can read all this uh interesting stuff by the way with ebpf you cannot",
    "start": "390060",
    "end": "395759"
  },
  {
    "text": "modify um arbitrary memory you can only read it",
    "start": "395759",
    "end": "401160"
  },
  {
    "text": "the only thing that you can modify are things that you've specifically kind of declared to be writable and these are",
    "start": "401160",
    "end": "408539"
  },
  {
    "text": "called ebpf Maps so prior to kind of loading this program you have defined a new ebpf program I",
    "start": "408539",
    "end": "416039"
  },
  {
    "text": "want to have this map that I don't know process to number of syscalls",
    "start": "416039",
    "end": "421259"
  },
  {
    "text": "um executed right like I'm just making things up but this is something that you could then share with user space and",
    "start": "421259",
    "end": "427319"
  },
  {
    "text": "userspace can actually read this information and that's how we write observability tooling using ebpf we use",
    "start": "427319",
    "end": "433979"
  },
  {
    "text": "these maps in order to communicate the things that we measure in kernel to user space and then we can export it as log",
    "start": "433979",
    "end": "440520"
  },
  {
    "text": "lines we can export it as Prometheus metrics traces you know whatever is useful to us",
    "start": "440520",
    "end": "446280"
  },
  {
    "text": "as engineers so evpf has kind of been a buzzword",
    "start": "446280",
    "end": "451580"
  },
  {
    "text": "for for some time now and so one of the things that we wanted to do with this talk is kind of resolve a couple of",
    "start": "451580",
    "end": "457860"
  },
  {
    "text": "misconceptions and the first one that I think is kind of the most classic one and I guess you're all here you maybe",
    "start": "457860",
    "end": "464520"
  },
  {
    "text": "already understand this but um and there's it's not totally unexpected that",
    "start": "464520",
    "end": "471000"
  },
  {
    "text": "this is a misconception because it is kind of the",
    "start": "471000",
    "end": "476340"
  },
  {
    "text": "history and Natalie is going to tell us a little bit more about that in a second but um is EB ebpf is just this",
    "start": "476340",
    "end": "482400"
  },
  {
    "text": "networking thing right it's just for networking well this is this is Fault obviously we're in a talk talking about",
    "start": "482400",
    "end": "488280"
  },
  {
    "text": "using ebpf for observability but for a long time this was kind of the the first question that we would always get when",
    "start": "488280",
    "end": "494759"
  },
  {
    "text": "we talk about ebpf in the setting of observability so we can attach evpr",
    "start": "494759",
    "end": "501120"
  },
  {
    "text": "programs to anything that is a hook that allows us to attach a hook in the Linux kernel right so",
    "start": "501120",
    "end": "507960"
  },
  {
    "text": "networking events are definitely a major case for that but there are a lot of other use cases that we can use this for",
    "start": "507960",
    "end": "514740"
  },
  {
    "text": "the next thing that I want to kind of uncover is whenever people talk about",
    "start": "514740",
    "end": "520500"
  },
  {
    "text": "ebpf they think ah this supports all the languages and again there's a small",
    "start": "520500",
    "end": "525720"
  },
  {
    "text": "amount of Truth as Natalie and I uh were discussing just before they're talking this where yes we can kind of read",
    "start": "525720",
    "end": "531959"
  },
  {
    "text": "memory from any language from within ebpf but is that actually useful right like in an interpreted language for",
    "start": "531959",
    "end": "538860"
  },
  {
    "text": "example um like what is a red does a register actually mean it's not necessarily the",
    "start": "538860",
    "end": "545399"
  },
  {
    "text": "same thing as it is in a natively compiled um program and we'll see more about that later",
    "start": "545399",
    "end": "551519"
  },
  {
    "text": "um so the here the kind of misconception is uh definitely a lot of um like wide",
    "start": "551519",
    "end": "558180"
  },
  {
    "text": "language support is definitely possible but just because you're using ebpf or just because you're using the ebpf tool",
    "start": "558180",
    "end": "564180"
  },
  {
    "text": "doesn't mean at all that there's white language support and then uh ironically there's kind of",
    "start": "564180",
    "end": "570300"
  },
  {
    "text": "the opposite misconception which means which says interpreted languages are completely impossible to be kind of",
    "start": "570300",
    "end": "578399"
  },
  {
    "text": "compatible with evpf this is also false again we just need to put the work into it and",
    "start": "578399",
    "end": "583740"
  },
  {
    "text": "again we'll talk about more um and resolve this later so I've talked",
    "start": "583740",
    "end": "589080"
  },
  {
    "text": "about kind of the the intro of everything and now Natalie is going to tell us how did we get to this point",
    "start": "589080",
    "end": "594240"
  },
  {
    "text": "kind of the past of ebpf so for us to then talk about you know the present what is going on in the ecosystem today",
    "start": "594240",
    "end": "603319"
  },
  {
    "text": "thanks for that great introduction so let's talk about how ebpf came about and",
    "start": "608880",
    "end": "614820"
  },
  {
    "text": "how the pass of evpf can kind of help us understand what the future might look like",
    "start": "614820",
    "end": "620580"
  },
  {
    "text": "you know uh some of you may have heard of the concept of crossing the chasm and kind of the product side of things and",
    "start": "620580",
    "end": "627839"
  },
  {
    "text": "it's basically the idea that all new technology has sort of a phases of",
    "start": "627839",
    "end": "633300"
  },
  {
    "text": "adoption that it goes through as it matures and becomes mainstream so early on you have people playing",
    "start": "633300",
    "end": "640260"
  },
  {
    "text": "around with cool stuff and they're doing it for fun they're doing it because it's shiny and new and they're tinkerers and",
    "start": "640260",
    "end": "646980"
  },
  {
    "text": "those people um you know are sort of the earliest phases of adoption in a technology like",
    "start": "646980",
    "end": "653100"
  },
  {
    "text": "ebpf after a while the cool stuff that the tinkerers are doing kind of catches on",
    "start": "653100",
    "end": "659640"
  },
  {
    "text": "to some early adopters who may be a little bit ahead of the curve in terms of thinking about the latest and",
    "start": "659640",
    "end": "664740"
  },
  {
    "text": "greatest but they're trying to solve a specific problem and you know these two groups kind of",
    "start": "664740",
    "end": "670019"
  },
  {
    "text": "comprise the people that really like the new and shiny and they drove a lot of",
    "start": "670019",
    "end": "675839"
  },
  {
    "text": "the progress behind ebpf that we're going to take a look at in just a second you know later on what you end up with",
    "start": "675839",
    "end": "682740"
  },
  {
    "text": "is people who are trying to solve a problem they don't really care about the technology per se that is used they just",
    "start": "682740",
    "end": "689760"
  },
  {
    "text": "have a problem they needed to solve and they're going to use what's considered to be the Best in Class solution",
    "start": "689760",
    "end": "696120"
  },
  {
    "text": "so when we're talking about the history and the past of evpf like we're going to look at the first two groups but just my",
    "start": "696120",
    "end": "702660"
  },
  {
    "text": "personal opinion I think we're here right now in terms of the story of ebpf and smart people can disagree and debate",
    "start": "702660",
    "end": "710700"
  },
  {
    "text": "and say you know earlier or later or whatever but I think that we've just reached the point where you see some",
    "start": "710700",
    "end": "717720"
  },
  {
    "text": "great whole product solutions that are focused on a use case rather than a technology and so I think that it's a",
    "start": "717720",
    "end": "724500"
  },
  {
    "text": "really exciting time to be doing ebpf stuff because it sort of means that you know this approach has been validated",
    "start": "724500",
    "end": "731279"
  },
  {
    "text": "the chasm has been crossed so to speak so let's just kind of take a look at a",
    "start": "731279",
    "end": "738600"
  },
  {
    "text": "super zoomed out timeline of how we got here obviously there are major Milestones",
    "start": "738600",
    "end": "743940"
  },
  {
    "text": "missing from here but in 1992 the seminal paper of BPF which is distinct",
    "start": "743940",
    "end": "751140"
  },
  {
    "text": "from evpf although you'll hear people refer to ebpf as BPF sometimes was published",
    "start": "751140",
    "end": "758360"
  },
  {
    "text": "20 years pass and the BBF jit just in time compiler",
    "start": "758700",
    "end": "764639"
  },
  {
    "text": "which we can talk about in a bit was added to Linux so there was a long time actually where we were in the innovator",
    "start": "764639",
    "end": "771180"
  },
  {
    "text": "phase where people were tinkering around with this thing and it did see some great adoption in certain use cases but",
    "start": "771180",
    "end": "777959"
  },
  {
    "text": "a long time pass actually before we saw some of the mega developments that have been happening within the last 10 years",
    "start": "777959",
    "end": "785339"
  },
  {
    "text": "in 2014 BPF becomes ebpf and like I said we'll talk a little bit more about that",
    "start": "785339",
    "end": "791459"
  },
  {
    "text": "and it's added to Linux and to me this is kind of the moment the birth of ebpf",
    "start": "791459",
    "end": "798180"
  },
  {
    "text": "as we know it today and then in the time after that what you start to see is sort of higher level",
    "start": "798180",
    "end": "804540"
  },
  {
    "text": "developments making BPF applicable ebpf applicable to more use cases making it",
    "start": "804540",
    "end": "810000"
  },
  {
    "text": "easier to write and you start to see this explosion of events and these days it seems like you can't go to Hacker",
    "start": "810000",
    "end": "815339"
  },
  {
    "text": "News without seeing something about ebpf so what was BPF",
    "start": "815339",
    "end": "822899"
  },
  {
    "text": "and how is it different than ebpf why was it created so BPF I think actually in the original",
    "start": "822899",
    "end": "829079"
  },
  {
    "text": "paper they called the BSD packet filter not the Berkeley packet filter but back in the day late 80s early 90s there were",
    "start": "829079",
    "end": "837540"
  },
  {
    "text": "two guys at the Lawrence Berkeley lab and they were really concerned with network problems",
    "start": "837540",
    "end": "843959"
  },
  {
    "text": "network problems are evergreen we will always have network problems probably we always will we always have but I think",
    "start": "843959",
    "end": "849600"
  },
  {
    "text": "back then it was even more front of Mind in terms of computing because it was",
    "start": "849600",
    "end": "855660"
  },
  {
    "text": "just a real pain to operate and troubleshoot on a network like we think it's bad now it must have been 10 times",
    "start": "855660",
    "end": "861600"
  },
  {
    "text": "worse back then and basically what their goal was was",
    "start": "861600",
    "end": "866940"
  },
  {
    "text": "how can we allow user space programs to Define rules to interact with raw",
    "start": "866940",
    "end": "872399"
  },
  {
    "text": "unprocessed packets so I think that a lot of times when we think about packet filters we think",
    "start": "872399",
    "end": "877860"
  },
  {
    "text": "about firewalls and that's a really legitimate use case of a packet filter because you're trying to say like hey",
    "start": "877860",
    "end": "883560"
  },
  {
    "text": "don't allow these packets but do allow those but you know there's also this use case of",
    "start": "883560",
    "end": "889380"
  },
  {
    "text": "just trying to see what the heck is going on in your system and that was the one that they were actually more",
    "start": "889380",
    "end": "894839"
  },
  {
    "text": "motivated by the problem was it was really hard to do",
    "start": "894839",
    "end": "900000"
  },
  {
    "text": "this kind of packet filtering logic in a performant way there were solutions that existed for this this wasn't the first",
    "start": "900000",
    "end": "906060"
  },
  {
    "text": "one but they had serious performance issues and it made the day-to-day of troubleshooting network issues to be a",
    "start": "906060",
    "end": "911880"
  },
  {
    "text": "real pain so what they came up with was a new packet filtering architecture this",
    "start": "911880",
    "end": "918779"
  },
  {
    "text": "allows the user space programs such as something that monitors all the connections you have or a firewall or",
    "start": "918779",
    "end": "924899"
  },
  {
    "text": "things along those lines to Define rules that execute in the kernel and this was a really big deal because it basically",
    "start": "924899",
    "end": "932100"
  },
  {
    "text": "allowed for the Mind melding of the kernel space and the user space for this particular use case",
    "start": "932100",
    "end": "939260"
  },
  {
    "text": "so what happened in that long period from 1992 to 2011.",
    "start": "940320",
    "end": "947459"
  },
  {
    "text": "well BPF was considered the state of the art for packet filtering it was integrated into TCP dump Wireshark you",
    "start": "947579",
    "end": "954540"
  },
  {
    "text": "can see a little screenshot of Wireshark on the right there and like I said eventually the",
    "start": "954540",
    "end": "959760"
  },
  {
    "text": "just-in-time compiler for BPF which made it significantly more performant to run",
    "start": "959760",
    "end": "965040"
  },
  {
    "text": "BPF programs was added to Linux in 2011. so in some ways you may have thought back then this is the technology it",
    "start": "965040",
    "end": "972000"
  },
  {
    "text": "solves this problem it's great but everything changed in 2014.",
    "start": "972000",
    "end": "979139"
  },
  {
    "text": "the first version of ebtf which stands for the extended Berkeley packet filter was added to Linux in 2014 and it built",
    "start": "979139",
    "end": "987300"
  },
  {
    "text": "upon this mind-melding of the kernel user space you know concept of BPF in some seriously important ways",
    "start": "987300",
    "end": "995279"
  },
  {
    "text": "so one thing pretty cool is that rather than using a domain-specific language like BPF had with really kind of strict",
    "start": "995279",
    "end": "1002360"
  },
  {
    "text": "sets of commands that you could do evpf programs are written in C now as Frederick said it's not arbitrary C you",
    "start": "1002360",
    "end": "1009019"
  },
  {
    "text": "can't do loops but writing in C made it significantly more powerful to do a",
    "start": "1009019",
    "end": "1014120"
  },
  {
    "text": "wider variety of tasks and more accessible to people who knew C",
    "start": "1014120",
    "end": "1019120"
  },
  {
    "text": "evpf can invoke kernel functions so the capabilities that you can actually",
    "start": "1019240",
    "end": "1025220"
  },
  {
    "text": "access with it just broaden dramatically I mean just think of the power the difference between saying all you can do",
    "start": "1025220",
    "end": "1031160"
  },
  {
    "text": "is operate on packets as saying you can call a kernel function that gave it a lot more juice",
    "start": "1031160",
    "end": "1037779"
  },
  {
    "text": "the edit part is a little iffy but like evpf can view the raw kernel memory of what is happening like this was huge and",
    "start": "1039260",
    "end": "1047540"
  },
  {
    "text": "you know as we discussed the verifier that was what made it all possible",
    "start": "1047540",
    "end": "1053600"
  },
  {
    "text": "so the verifier is what made this safe to do because when you see it at first",
    "start": "1053600",
    "end": "1058940"
  },
  {
    "text": "glance you're like oh no no no so that was a huge huge deal and almost",
    "start": "1058940",
    "end": "1064280"
  },
  {
    "text": "immediately you see Cutting Edge new technologies being developed once people saw that this has been merged into Linux",
    "start": "1064280",
    "end": "1072220"
  },
  {
    "text": "so ebpf exists now what what happened so there are still some obstacles it is",
    "start": "1072559",
    "end": "1079940"
  },
  {
    "text": "hard to write ebpf programs I mean it still is to some extent I'm sure that all of you have done it have you know",
    "start": "1079940",
    "end": "1085160"
  },
  {
    "text": "run into some struggles but back then it was even harder I think back in 2014 it's still pretty",
    "start": "1085160",
    "end": "1091760"
  },
  {
    "text": "obscure we're kind of at The Verge between the innovators and the early adopters at this time so people talk",
    "start": "1091760",
    "end": "1097880"
  },
  {
    "text": "about it but you probably are deep in the Linux ecosystem to actually know what it means",
    "start": "1097880",
    "end": "1103520"
  },
  {
    "text": "and people still mostly think of this thing as a packet filter because that's what it's kind of original technology",
    "start": "1103520",
    "end": "1108799"
  },
  {
    "text": "has been for 20 plus years",
    "start": "1108799",
    "end": "1113019"
  },
  {
    "text": "you know coming on to the stage then lib BPF making it more portable to rate BPF",
    "start": "1114140",
    "end": "1119299"
  },
  {
    "text": "programs across different platforms and BPF trace and BCC which made it a whole",
    "start": "1119299",
    "end": "1124340"
  },
  {
    "text": "lot more accessible to write these programs in a higher level API",
    "start": "1124340",
    "end": "1129559"
  },
  {
    "text": "this made it a lot easier for people to start messing around with it and getting stuff done and just play around with",
    "start": "1129559",
    "end": "1135320"
  },
  {
    "text": "what it could do now it's more accessible to write these programs at this point more people try",
    "start": "1135320",
    "end": "1141980"
  },
  {
    "text": "it and people start to realize that this thing can do a lot more than just networking",
    "start": "1141980",
    "end": "1147460"
  },
  {
    "text": "there was an explosion of adoption I'm not sure why that okay so you know like I said",
    "start": "1147980",
    "end": "1154820"
  },
  {
    "text": "you can't go to Hacker News without hearing about ebpf these days pretty much every major company at least every",
    "start": "1154820",
    "end": "1160460"
  },
  {
    "text": "major tech company on the planet uses eppf and you start to see these higher",
    "start": "1160460",
    "end": "1165679"
  },
  {
    "text": "level projects that are more use case specific things like parka pixie Falco",
    "start": "1165679",
    "end": "1171620"
  },
  {
    "text": "psyllium and these things are helping people solve a problem utilizing ebpf but you don't have to be",
    "start": "1171620",
    "end": "1178220"
  },
  {
    "text": "an ebpf expert to use those Technologies so just for like a little mini demo I",
    "start": "1178220",
    "end": "1185000"
  },
  {
    "text": "know we're maybe a little short on time so I'll keep it quick you know it is true that the networking and reading",
    "start": "1185000",
    "end": "1190160"
  },
  {
    "text": "packets and stuff like that you know still is an important use case of BPF and that's one of the capabilities that",
    "start": "1190160",
    "end": "1195980"
  },
  {
    "text": "the pixie open source project has and so just with a single command you",
    "start": "1195980",
    "end": "1201140"
  },
  {
    "text": "can install a bunch of probes on your system with the pixie project and see things like what were the requests in my",
    "start": "1201140",
    "end": "1207320"
  },
  {
    "text": "system I can see the headers I can see the response I can see the body I can see it",
    "start": "1207320",
    "end": "1213080"
  },
  {
    "text": "for encrypted traffic I can see it for unencrypted traffic and so the visibility that this can provide for",
    "start": "1213080",
    "end": "1219200"
  },
  {
    "text": "request tracing types of use cases is still a really big deal although it's far from the only thing it can do it's",
    "start": "1219200",
    "end": "1225200"
  },
  {
    "text": "you know pixie can do a lot more than this too it's still a really powerful thing that people still get excited by",
    "start": "1225200",
    "end": "1233080"
  },
  {
    "text": "I'm gonna transfer this back over",
    "start": "1233080",
    "end": "1237940"
  },
  {
    "text": "there we go okay here's a good note to switch off on",
    "start": "1239539",
    "end": "1244059"
  },
  {
    "text": "this test okay um so yeah going from the past to the present is",
    "start": "1245299",
    "end": "1251299"
  },
  {
    "text": "kind of this like shock to reality right like we've seen all of these things and we've seen the demos right like we've",
    "start": "1251299",
    "end": "1258260"
  },
  {
    "text": "seen um you know request tracing we've seen network uh uh routing all of these",
    "start": "1258260",
    "end": "1264440"
  },
  {
    "text": "things right but um and everything seemed so easy right but the harsh reality is that um",
    "start": "1264440",
    "end": "1271520"
  },
  {
    "text": "unfortunately in the present where we're kind of trying to and exactly what Natalie was saying kind of building",
    "start": "1271520",
    "end": "1277220"
  },
  {
    "text": "these tools that aren't searching for a problem where where we weren't searching",
    "start": "1277220",
    "end": "1282440"
  },
  {
    "text": "you know for a problem to solve with ebpf we were already trying to solve",
    "start": "1282440",
    "end": "1287780"
  },
  {
    "text": "problems and abpf just happened to be a great tool for it right and um I happened to work on the parka open",
    "start": "1287780",
    "end": "1294020"
  },
  {
    "text": "source project Natalie happens to work on the pixie open source project and I think both of these are really great uh",
    "start": "1294020",
    "end": "1300080"
  },
  {
    "text": "kind of tools where this is exactly what ended up happening you know we didn't think ah ebpf is a really interesting",
    "start": "1300080",
    "end": "1307340"
  },
  {
    "text": "technology let's try to build something with it actually for me with the parka",
    "start": "1307340",
    "end": "1312440"
  },
  {
    "text": "open source project we actually for the first couple of years of the project didn't touch abpf at all so for those",
    "start": "1312440",
    "end": "1318200"
  },
  {
    "text": "who aren't familiar with it parka is an open source continuous profiling project where we kind of try to profile all of",
    "start": "1318200",
    "end": "1325520"
  },
  {
    "text": "your workloads in your infrastructure sure all the time and the only reason why we're actually able to do this at low overhead and across languages",
    "start": "1325520",
    "end": "1332500"
  },
  {
    "text": "remember from earlier language support is hard but it is actually starting to",
    "start": "1332500",
    "end": "1337820"
  },
  {
    "text": "become the reality in the present so um we're trying to kind of profile",
    "start": "1337820",
    "end": "1343159"
  },
  {
    "text": "everything across any languages across your entire cluster but kind of going back to the original uh kind of",
    "start": "1343159",
    "end": "1349940"
  },
  {
    "text": "sentiment of what I was saying right like this is literally the documentation for BPF Trace",
    "start": "1349940",
    "end": "1356720"
  },
  {
    "text": "um and it tells us to you know it's very easy to do so you just run this one command and you'll find the string to",
    "start": "1356720",
    "end": "1362720"
  },
  {
    "text": "input into BPF trace and then you can attach this probe down here with this",
    "start": "1362720",
    "end": "1368360"
  },
  {
    "text": "example code and you can trace how often this readline function is called and you could do this with any program is what",
    "start": "1368360",
    "end": "1374600"
  },
  {
    "text": "they're claiming right but the reality is uh and this is where we're finding",
    "start": "1374600",
    "end": "1379640"
  },
  {
    "text": "ourselves today right like turns out symbols are typically not actually in production binaries they kind of make",
    "start": "1379640",
    "end": "1385400"
  },
  {
    "text": "this make the binary size very large and so in most Linux distributions for example",
    "start": "1385400",
    "end": "1391159"
  },
  {
    "text": "these are just not available and so how can we actually so we're kind of finding ourselves not in this reality of all",
    "start": "1391159",
    "end": "1397159"
  },
  {
    "text": "this these demos were really cool but you know in in true reality where we don't actually control absolutely every",
    "start": "1397159",
    "end": "1402980"
  },
  {
    "text": "parameter of our deployments reality is hard um but unfortunately fortunately there",
    "start": "1402980",
    "end": "1410120"
  },
  {
    "text": "are um some some smart Minds in the in the community that have already started solving these problems so specifically",
    "start": "1410120",
    "end": "1416960"
  },
  {
    "text": "for um symbols let's say we're here I have the example",
    "start": "1416960",
    "end": "1424220"
  },
  {
    "text": "of Maria DB a forkoff MySQL if you're not familiar with it that's you know popularly deployed",
    "start": "1424220",
    "end": "1431659"
  },
  {
    "text": "um and it the the like production binary that you install from Ubuntu does not",
    "start": "1431659",
    "end": "1437539"
  },
  {
    "text": "have um symbols like we saw on the previous uh on the previous slide here but",
    "start": "1437539",
    "end": "1444020"
  },
  {
    "text": "there's this really awesome tool called debug info D where you can just request these servers and all of the kind of",
    "start": "1444020",
    "end": "1450440"
  },
  {
    "text": "major Linux distributions run a server like this where you can just say hey give me the symbols for this particular",
    "start": "1450440",
    "end": "1457460"
  },
  {
    "text": "binary and as we can see here on the First Command that I ran the file command it actually tells us the build",
    "start": "1457460",
    "end": "1463520"
  },
  {
    "text": "ID this kind of uniquely identifies the binary we can use that to then request the",
    "start": "1463520",
    "end": "1471740"
  },
  {
    "text": "symbols for this binary so we actually have symbols available now if we know how to obtain them and it turns out this",
    "start": "1471740",
    "end": "1478100"
  },
  {
    "text": "is still a very fresh thing so this is the website of the debug info d",
    "start": "1478100",
    "end": "1483640"
  },
  {
    "text": "project and really only three of the observability type projects out there",
    "start": "1483640",
    "end": "1489260"
  },
  {
    "text": "actually implement this the parka project that I happen to work on perf you know the the typical profiler used",
    "start": "1489260",
    "end": "1495980"
  },
  {
    "text": "in the Linux ecosystem and BPF Trace I guess that's somewhat unsurprising right like the kind of pioneers in this space",
    "start": "1495980",
    "end": "1502760"
  },
  {
    "text": "trying to make sure that the um that the tooling that they created works",
    "start": "1502760",
    "end": "1508820"
  },
  {
    "text": "but this is kind of starting to become the reality and the presence right so",
    "start": "1508820",
    "end": "1514880"
  },
  {
    "text": "we can actually um obtain symbols so one one problem solved in the present right next problem",
    "start": "1514880",
    "end": "1522440"
  },
  {
    "text": "um let's look at an example program here I have a go program that just calculates",
    "start": "1522440",
    "end": "1529039"
  },
  {
    "text": "the Fibonacci sequence whatever number in the Fibonacci sequence you give it it would it'll calculate and this is a",
    "start": "1529039",
    "end": "1535940"
  },
  {
    "text": "recursive program right so it we see them when we look at the stack traces of this we see the main function first and",
    "start": "1535940",
    "end": "1541760"
  },
  {
    "text": "then however many recursions we we happen to need to calculate the",
    "start": "1541760",
    "end": "1546860"
  },
  {
    "text": "Fibonacci sequence and if we look at how a an operating system actually executes",
    "start": "1546860",
    "end": "1552080"
  },
  {
    "text": "this we kind of need to look very low level of how machine code is executed so",
    "start": "1552080",
    "end": "1558440"
  },
  {
    "text": "what we have to do and maybe you remember this from the computer science class or something and even if you don't I'm about to explain it the way it works",
    "start": "1558440",
    "end": "1565940"
  },
  {
    "text": "is that we build something called the stack so this is where all of our variables whenever we have like a",
    "start": "1565940",
    "end": "1571700"
  },
  {
    "text": "parameter in our function names this is where they lie the stack it's kind of built um",
    "start": "1571700",
    "end": "1578179"
  },
  {
    "text": "um last in first out right um and so in this case we have our main function and then however many",
    "start": "1578179",
    "end": "1584600"
  },
  {
    "text": "recursions we have to calculate the Fibonacci sequence and this is kind of",
    "start": "1584600",
    "end": "1591440"
  },
  {
    "text": "um done typically with this function like Natalie was saying we can actually",
    "start": "1591440",
    "end": "1597020"
  },
  {
    "text": "call some helpers and kernel functions to do some of this some of these tasks and in the very good case this is very",
    "start": "1597020",
    "end": "1604760"
  },
  {
    "text": "easy to do when something called frame pointers are available so frame pointers essentially when while we're building",
    "start": "1604760",
    "end": "1610820"
  },
  {
    "text": "this stack when we're looking at a at the execution of a program from within",
    "start": "1610820",
    "end": "1617539"
  },
  {
    "text": "ebpf all we get is this random pointer into memory that's what we're seeing as the RSP register the stack pointer so we",
    "start": "1617539",
    "end": "1624320"
  },
  {
    "text": "all we're starting with is a memory address right from here on we need to figure out what is the function call stack",
    "start": "1624320",
    "end": "1630200"
  },
  {
    "text": "and when we have frame pointers available this is not all that hard what we do is we read the RBP register which",
    "start": "1630200",
    "end": "1636559"
  },
  {
    "text": "is where the frame pointer lies it tells us where the next frame is and from there we can go to the next frame again",
    "start": "1636559",
    "end": "1642140"
  },
  {
    "text": "and so on right until we're at the bottom of the stack and that's just walking a linked list right so that's",
    "start": "1642140",
    "end": "1648380"
  },
  {
    "text": "very very easy and very cheap to do walking a linked list and you know memory aligned memory",
    "start": "1648380",
    "end": "1654940"
  },
  {
    "text": "but the harsh reality again is this is actually in unless you're in a very",
    "start": "1654940",
    "end": "1660980"
  },
  {
    "text": "controlled environment and fun fact Google Facebook Netflix they all",
    "start": "1660980",
    "end": "1666140"
  },
  {
    "text": "enforce having frame pointers across the entire infrastructure because the theory",
    "start": "1666140",
    "end": "1671720"
  },
  {
    "text": "is debuggable binaries are worth more than having a very very small kind of",
    "start": "1671720",
    "end": "1678980"
  },
  {
    "text": "performance gain but the reality is Linux distributions build binaries",
    "start": "1678980",
    "end": "1684260"
  },
  {
    "text": "without frame pointers so again we're kind of back to square one the demo worked really nicely because we had",
    "start": "1684260",
    "end": "1690140"
  },
  {
    "text": "everything under control but in reality we don't and so but if you ever can have",
    "start": "1690140",
    "end": "1696260"
  },
  {
    "text": "the control over this please please please build your binaries with frame pointers on you're making our lives much",
    "start": "1696260",
    "end": "1702740"
  },
  {
    "text": "much easier but we still need to solve it right like we're still living in reality and so how",
    "start": "1702740",
    "end": "1708320"
  },
  {
    "text": "do we do that so there's this kind of lookasite table um in the x86 ABI that tells us",
    "start": "1708320",
    "end": "1715700"
  },
  {
    "text": "essentially we're in this section of the memory um then you need to do this calculation in order to do this next",
    "start": "1715700",
    "end": "1721400"
  },
  {
    "text": "jump I'm not gonna I'm not going to go through all the kind of nitty-gritty details of how that works but",
    "start": "1721400",
    "end": "1727039"
  },
  {
    "text": "essentially this was very very very hard to make it be accepted by the ebpf",
    "start": "1727039",
    "end": "1732679"
  },
  {
    "text": "verifier right like determination and all these things is very hard to make it",
    "start": "1732679",
    "end": "1737860"
  },
  {
    "text": "deterministic it is possible we actually happen to have implemented this in the Parker open source project but it almost",
    "start": "1737860",
    "end": "1743960"
  },
  {
    "text": "took us an entire year to implement if you're very interested in all the nitty-gritty details about how this kind",
    "start": "1743960",
    "end": "1751760"
  },
  {
    "text": "of unwinding using dwarf unwind tables Works some of my co-workers gave a really amazing presentation just on that",
    "start": "1751760",
    "end": "1758779"
  },
  {
    "text": "topic so if you're interested in that check that out but my point being",
    "start": "1758779",
    "end": "1764179"
  },
  {
    "text": "now in the present we can actually walk all Stacks from real native binaries",
    "start": "1764179",
    "end": "1770000"
  },
  {
    "text": "right so we've made significant advances in actually making this type of tooling",
    "start": "1770000",
    "end": "1775760"
  },
  {
    "text": "work in real production environments where we don't necessarily have all the control now the last part is the kind of last",
    "start": "1775760",
    "end": "1783799"
  },
  {
    "text": "misconception that I was saying that ebpf can never work with interpreters",
    "start": "1783799",
    "end": "1789620"
  },
  {
    "text": "right and it's not totally wrong so what I have here are some stack traces and if",
    "start": "1789620",
    "end": "1794960"
  },
  {
    "text": "you can't see this that's fine my point is just what we are seeing here is the python virtual machine or the python",
    "start": "1794960",
    "end": "1803120"
  },
  {
    "text": "interpreter and because the python interpreter itself is written in C what we're seeing",
    "start": "1803120",
    "end": "1808340"
  },
  {
    "text": "are the frames of the C runtime right like that's not particularly useful though when I want to debug my python",
    "start": "1808340",
    "end": "1815179"
  },
  {
    "text": "code and so how do we get this to look like something that I actually",
    "start": "1815179",
    "end": "1820399"
  },
  {
    "text": "understand and where I can recognize my python python code so this is kind of in that intersection of the present and the",
    "start": "1820399",
    "end": "1827659"
  },
  {
    "text": "future we know and there's some prior art how to do this because what we can do is",
    "start": "1827659",
    "end": "1834440"
  },
  {
    "text": "whenever we walk these frames there's some align memory that we can access to",
    "start": "1834440",
    "end": "1839480"
  },
  {
    "text": "figure out what does this actual actual function name in Python and we can only",
    "start": "1839480",
    "end": "1844880"
  },
  {
    "text": "do this from within BPF because BPF actually allows us to read process memory this is something that we would",
    "start": "1844880",
    "end": "1851539"
  },
  {
    "text": "otherwise need to do with kind of with tools like P trays and it's very very difficult to do correctly but from BPF",
    "start": "1851539",
    "end": "1858080"
  },
  {
    "text": "it's actually ensured for us that this is safe to do so like I said this is not actually true reality yet in the park",
    "start": "1858080",
    "end": "1864799"
  },
  {
    "text": "open source project but there is some prior art and we happen to have actually hired this person who did this",
    "start": "1864799",
    "end": "1870980"
  },
  {
    "text": "um to who who did exactly this in the Ruby virtual machine which happens to work",
    "start": "1870980",
    "end": "1876679"
  },
  {
    "text": "very very similar to to python so like I said this is kind of this intersection right like we know how to do it there's",
    "start": "1876679",
    "end": "1883039"
  },
  {
    "text": "some prior art but in real production environments we don't actually have this available just yet so I just want to",
    "start": "1883039",
    "end": "1890539"
  },
  {
    "text": "give a very quick demo of the Parker open source project",
    "start": "1890539",
    "end": "1896419"
  },
  {
    "text": "um",
    "start": "1896419",
    "end": "1898480"
  },
  {
    "text": "so whoops what we're seeing here um I'm just going to start querying all",
    "start": "1907520",
    "end": "1913100"
  },
  {
    "text": "the CPU time across this entire cluster and as we're seeing there's a lot of stuff going on in this cluster right so",
    "start": "1913100",
    "end": "1919100"
  },
  {
    "text": "I'm just going to kind of trim this down for a second so that we can see oops",
    "start": "1919100",
    "end": "1926559"
  },
  {
    "text": "so I'm going to take an example of systemd because quite obviously I do not",
    "start": "1928700",
    "end": "1934940"
  },
  {
    "text": "have the control to instrument systemd right like I couldn't have changed this piece of code I they definitely and",
    "start": "1934940",
    "end": "1942260"
  },
  {
    "text": "you're going to need to trust me on this one this definitely did not have symbols available in the production binary right",
    "start": "1942260",
    "end": "1947960"
  },
  {
    "text": "like if we were to do that on every single host on every single machine in our in our production environment we",
    "start": "1947960",
    "end": "1954860"
  },
  {
    "text": "would be wasting a ton of space right so it does actually make sense to do this sometimes but we still see symbols in",
    "start": "1954860",
    "end": "1962840"
  },
  {
    "text": "this in these stack traces right so we're kind of getting to this point where all this actually does work in a",
    "start": "1962840",
    "end": "1968899"
  },
  {
    "text": "very very wide array of deployments without having to do anything right like the whole point of the Parker open",
    "start": "1968899",
    "end": "1974480"
  },
  {
    "text": "source project is that everything is zero instrumentation you don't need to do it you don't need to add a library to",
    "start": "1974480",
    "end": "1980539"
  },
  {
    "text": "your code you don't need to change your deployments you don't need to redeploy",
    "start": "1980539",
    "end": "1985580"
  },
  {
    "text": "anything the only thing you do is kind of deploy the parka agent and you can profile your entire production",
    "start": "1985580",
    "end": "1991659"
  },
  {
    "text": "protection clusters so hopefully that convinced you you know",
    "start": "1991659",
    "end": "1996740"
  },
  {
    "text": "that that actually does work um and so with that Natalie is going to",
    "start": "1996740",
    "end": "2004960"
  },
  {
    "text": "kind of introduce us to what the future holds in It Go",
    "start": "2004960",
    "end": "2012480"
  },
  {
    "text": "real fast so where are we today lots of use cases we know about networking we know also",
    "start": "2012580",
    "end": "2019120"
  },
  {
    "text": "about security there's a lot of great security use cases and observability like we've talked about the breadth and",
    "start": "2019120",
    "end": "2025179"
  },
  {
    "text": "depth of the coverage is hardening we are getting better and better support over time for programming languages you",
    "start": "2025179",
    "end": "2030820"
  },
  {
    "text": "know to trace and instrument with BPF um I'm not going to talk about usdts but",
    "start": "2030820",
    "end": "2037000"
  },
  {
    "text": "look them up they're super cool and they're gaining traction Cloud providers are also under a lot of",
    "start": "2037000",
    "end": "2042580"
  },
  {
    "text": "pressure to add more BPF support to their to their platforms",
    "start": "2042580",
    "end": "2047580"
  },
  {
    "text": "Facebook did a really cool thing with this time travel debugger which allows you to kind of Replay what happened and",
    "start": "2047740",
    "end": "2054878"
  },
  {
    "text": "kind of Step through it like a debugger so this is super cool what Frontiers are coming next",
    "start": "2054879",
    "end": "2062220"
  },
  {
    "text": "I think that performance is still going to be a big issue because we're going to want to probe a whole lot of things and",
    "start": "2062220",
    "end": "2067960"
  },
  {
    "text": "there are some performance issues when you probe something that's called all the time accessibility how do I know what to",
    "start": "2067960",
    "end": "2074440"
  },
  {
    "text": "instrument I know that I want to debug this problem but how do I turn that into a set of probes that I can use",
    "start": "2074440",
    "end": "2080800"
  },
  {
    "text": "analysis if you've ever used BPF ebpf you'll see that a lot of times you're getting this fire hose of raw data it's",
    "start": "2080800",
    "end": "2087878"
  },
  {
    "text": "really hard for a human to interpret that so what can we do to make it easier",
    "start": "2087879",
    "end": "2092919"
  },
  {
    "text": "to basically receive this fire hose of raw data that's very very low level and",
    "start": "2092919",
    "end": "2098980"
  },
  {
    "text": "sort of put the next layer of interpretability on top of it so that it is human",
    "start": "2098980",
    "end": "2104740"
  },
  {
    "text": "understandable so you can go from a bunch of packets and function calls and kernel function calls to something like",
    "start": "2104740",
    "end": "2111520"
  },
  {
    "text": "hey your thing is seg faulting because of XYZ I am not going to have time for this but",
    "start": "2111520",
    "end": "2117700"
  },
  {
    "text": "the demo was going to be that I passed chat GPT a program that I wrote and then",
    "start": "2117700",
    "end": "2123700"
  },
  {
    "text": "asked it to generate a BPF Trace program for me this actually worked pretty well despite the fact that the training data",
    "start": "2123700",
    "end": "2129940"
  },
  {
    "text": "for Chad GPT stopped in 2021 I think that we will see an increased adoption",
    "start": "2129940",
    "end": "2135640"
  },
  {
    "text": "for llms with this type of use case to make it easier to write these programs and to interpret their output thank you",
    "start": "2135640",
    "end": "2143020"
  },
  {
    "text": "all so much I know we're over time and we're over here to chat after this",
    "start": "2143020",
    "end": "2148559"
  },
  {
    "text": "foreign",
    "start": "2149740",
    "end": "2152400"
  }
]