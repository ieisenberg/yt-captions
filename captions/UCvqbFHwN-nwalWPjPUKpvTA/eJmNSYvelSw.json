[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "and welcome to this talk about kubernetes patterns my name is roland hills i'm a software engineer from red hat",
    "start": "80",
    "end": "5359"
  },
  {
    "text": "and currently i'm working on k native which is a serverless platform on top of kubernetes",
    "start": "5359",
    "end": "10960"
  },
  {
    "text": "all the patterns i'm going to show you today are described in this book that i have written together with my friend",
    "start": "10960",
    "end": "16400"
  },
  {
    "text": "belgium you can get a free copy of this book by following this link this copy has been sponsored by red hat",
    "start": "16400",
    "end": "23519"
  },
  {
    "text": "so if you free download it it's a pdf file you find all the patterns i'm showing you today and many more also you find all the",
    "start": "23519",
    "end": "30000"
  },
  {
    "text": "examples which you can try out just to illustrate how these patterns are working",
    "start": "30000",
    "end": "36480"
  },
  {
    "text": "okay so let's get started first of all let's talk a little bit",
    "start": "36480",
    "end": "42160"
  },
  {
    "text": "about what patterns are patterns are really a very very old concept",
    "start": "42160",
    "end": "47520"
  },
  {
    "start": "45000",
    "end": "45000"
  },
  {
    "text": "they are older than 40 years and come from this original book by christopher alexander",
    "start": "47520",
    "end": "52719"
  },
  {
    "text": "written in 1979. in this book christopher alexander and his co-workers",
    "start": "52719",
    "end": "58079"
  },
  {
    "text": "are describing a pattern language which can be applied on the field of architecture",
    "start": "58079",
    "end": "64000"
  },
  {
    "text": "so what is a pattern in that sense so this classical pattern always has a name a name is very important because",
    "start": "64000",
    "end": "70080"
  },
  {
    "text": "patterns form a kind of a language which is interconnected so you have patterns which are related to other patterns",
    "start": "70080",
    "end": "76560"
  },
  {
    "text": "and they form a repeatable solution to a certain set of problems so it's not",
    "start": "76560",
    "end": "82240"
  },
  {
    "text": "a very concrete solution but kind of a solution pattern which you can apply in certain contexts",
    "start": "82240",
    "end": "88080"
  },
  {
    "text": "here is an example of a pattern which is called city country fingers and it describes how you should plan for",
    "start": "88080",
    "end": "93439"
  },
  {
    "text": "a city so that the people in the city don't have to walk a lot until they reach some green",
    "start": "93439",
    "end": "101680"
  },
  {
    "text": "of course this idea has then been slept a while but in 1994",
    "start": "101680",
    "end": "109520"
  },
  {
    "text": "the gang of four picked up that idea and transformed it on the field of software",
    "start": "109759",
    "end": "114880"
  },
  {
    "text": "engineering so this was a very famous book i guess everybody of you already heard about it",
    "start": "114880",
    "end": "120000"
  },
  {
    "text": "it's design patterns for object oriented software and it contains all this famous pattern",
    "start": "120000",
    "end": "126399"
  },
  {
    "text": "that we all know and love like a singleton like a factory like a delegate and many many more",
    "start": "126399",
    "end": "133120"
  },
  {
    "text": "again this pattern has a certain schema they are described they all have a name and they form an interconnected kind of",
    "start": "133120",
    "end": "139040"
  },
  {
    "text": "mini language okay kubernetes um the other part of this uh presentation of course cleveland's patterns",
    "start": "139040",
    "end": "145280"
  },
  {
    "text": "but uh i don't talk much about kubernetes here because i assume you already know quite a bit of kubernetes",
    "start": "145280",
    "end": "150400"
  },
  {
    "text": "otherwise you wouldn't join the keep con but just for very super brief recap so the main",
    "start": "150400",
    "end": "157440"
  },
  {
    "text": "ingredient for kubernetes is the pot it's the atom of kubernetes",
    "start": "157440",
    "end": "163040"
  },
  {
    "text": "and the pot is kind of abstraction over the containers and there are",
    "start": "163040",
    "end": "169840"
  },
  {
    "text": "really describe the runtime contract for a container so how containers can run within the project sometimes you",
    "start": "169840",
    "end": "176080"
  },
  {
    "text": "only have one port one container in a port but often you also have more of them you will see a pattern which really use this",
    "start": "176080",
    "end": "181680"
  },
  {
    "text": "concept in depth these containers can share certain data via network or real disk",
    "start": "181680",
    "end": "188480"
  },
  {
    "text": "then your code live lives in such a port and is executed in the port and around that you have tons of other",
    "start": "188480",
    "end": "194000"
  },
  {
    "text": "entities which allows you to to declare how the application",
    "start": "194000",
    "end": "199599"
  },
  {
    "text": "is supposed to be running and you see here a whole bunch of them and this is important that you always",
    "start": "199599",
    "end": "205920"
  },
  {
    "text": "declare what you want to have you do not tell communities do that and that and that step by step but you declare what",
    "start": "205920",
    "end": "211840"
  },
  {
    "text": "kind of a target state we come to this concept in a little bit later",
    "start": "211840",
    "end": "217120"
  },
  {
    "text": "so now let's dive into the patterns so we have different pattern categories so we organized the 24 patterns in different",
    "start": "217120",
    "end": "224000"
  },
  {
    "text": "categories one of them are the foundational patterns these are more or less the intrinsic features of kubernetes",
    "start": "224000",
    "end": "232080"
  },
  {
    "text": "the reason for that is that kubernetes itself as a platform is the implementation of certain",
    "start": "232080",
    "end": "237120"
  },
  {
    "text": "patterns for distributed computing and we really find some core concept in the foundational category",
    "start": "237120",
    "end": "243599"
  },
  {
    "text": "on top of that we have structural patterns which really take kind of the foundational primitives",
    "start": "243599",
    "end": "250239"
  },
  {
    "text": "and combine them into something new on top of that or a little bit not really on top of that but a little bit",
    "start": "250239",
    "end": "256639"
  },
  {
    "text": "on this side are the configuration patterns which is all about how you can configure applications",
    "start": "256639",
    "end": "261759"
  },
  {
    "text": "um so there are different techniques for that um we have the behavioral patterns which",
    "start": "261759",
    "end": "268639"
  },
  {
    "text": "is really describes the kind of application you're running so whether it's kind of a stateful",
    "start": "268639",
    "end": "273759"
  },
  {
    "text": "service or a stateless uh application whether it's running in the",
    "start": "273759",
    "end": "280000"
  },
  {
    "text": "with a batch job or something like that so this is all combined in the behavioral category and",
    "start": "280000",
    "end": "286320"
  },
  {
    "text": "finally we have some kind of advanced patterns which do not really fit in the other categories but they have some more advanced concepts based on all of the",
    "start": "286320",
    "end": "293040"
  },
  {
    "start": "287000",
    "end": "287000"
  },
  {
    "text": "other patterns i have an example for every of these categories",
    "start": "293040",
    "end": "298639"
  },
  {
    "text": "so let's look let's start first with the foundational patterns so here we have",
    "start": "298639",
    "end": "306720"
  },
  {
    "text": "as i mentioned core functionality of humanities like health probes which are readiness and liveness checks",
    "start": "306720",
    "end": "312000"
  },
  {
    "text": "predictable amounts is about how you declare your dependencies like resource limits uh managed life cycle is how you can",
    "start": "312000",
    "end": "318160"
  },
  {
    "text": "hook into the life cycle events for all your pot when so that you get notified when it starts or then stops",
    "start": "318160",
    "end": "324720"
  },
  {
    "text": "and so on so but here we are looking at the declarative deployment declarative deployment is all about so",
    "start": "324720",
    "end": "331360"
  },
  {
    "text": "the problem statement is here and the question is how to perform application installations and also upgrades",
    "start": "331360",
    "end": "336960"
  },
  {
    "text": "by configuration only by declaring your strategy so we have a core",
    "start": "336960",
    "end": "343440"
  },
  {
    "text": "entity in kubernetes which is called the deployment and this is really all about declarative rather imperative",
    "start": "343440",
    "end": "349680"
  },
  {
    "text": "deployments before the deployment and the resource was introduced into qranius all you could do was kind of a",
    "start": "349680",
    "end": "356160"
  },
  {
    "text": "imperative deployment with a client application so cube control which allows you to do certain things",
    "start": "356160",
    "end": "362080"
  },
  {
    "text": "like rolling updates so in the relative deployment you really",
    "start": "362080",
    "end": "367199"
  },
  {
    "text": "say step by step what should be done for rolling up that which means that you have a set of new copies of your set of old",
    "start": "367199",
    "end": "374000"
  },
  {
    "text": "copies of your application a set of new copies and how you can really um",
    "start": "374000",
    "end": "380080"
  },
  {
    "text": "scale the old ones down and scale up the old the new ones and um",
    "start": "380080",
    "end": "386639"
  },
  {
    "text": "this is done step by step as mentioned however with deployment we introduced this has",
    "start": "386639",
    "end": "392479"
  },
  {
    "text": "been a declarative way how you can declare your deployment strategy by just saying okay i want to have a",
    "start": "392479",
    "end": "398800"
  },
  {
    "text": "rolling update i want to have this is my new image and now you please do this for me",
    "start": "398800",
    "end": "405199"
  },
  {
    "text": "deployment kubernetes resource holds the template report so that the deployment can",
    "start": "405199",
    "end": "410400"
  },
  {
    "text": "create new ports for you it creates replica sets on the fly so it's kind of a manager for your replica sets so",
    "start": "410400",
    "end": "417039"
  },
  {
    "text": "we will see this in a second it allows also for rollbacks to an older version if you do an update and two several update strategies are",
    "start": "417039",
    "end": "425280"
  },
  {
    "text": "declared within your deployment descriptor here we see now the different types of",
    "start": "425280",
    "end": "430800"
  },
  {
    "start": "429000",
    "end": "429000"
  },
  {
    "text": "declarative deployments are one of the role deployment which is just about how you can",
    "start": "430800",
    "end": "437360"
  },
  {
    "text": "create a zero downtime upgrade so you in this example you have",
    "start": "437360",
    "end": "443360"
  },
  {
    "text": "a version 1 0 which is your old versions you have three copies running in a replica set",
    "start": "443360",
    "end": "449520"
  },
  {
    "text": "there which is managed by a deployment then you change the image reference within your",
    "start": "449520",
    "end": "455199"
  },
  {
    "text": "deployment so that the target state which is now the new which is the change deployment is differs from the current state which",
    "start": "455199",
    "end": "461199"
  },
  {
    "text": "is still the reference to the old version and then your deployment controller will",
    "start": "461199",
    "end": "466240"
  },
  {
    "text": "then create a new replica set with this new reference let's say it's version 1.1 and then scales down the old",
    "start": "466240",
    "end": "474240"
  },
  {
    "text": "replica set so from three to two and scales up the new one from zero to one and then continues",
    "start": "474240",
    "end": "480240"
  },
  {
    "text": "until everything is until you have three copies of your new applications version",
    "start": "480240",
    "end": "485280"
  },
  {
    "text": "and zero of the old one in front of your ports you still have a service and the",
    "start": "485280",
    "end": "490400"
  },
  {
    "text": "selector of the service should point really to both versions so that you always have the same",
    "start": "490400",
    "end": "497759"
  },
  {
    "text": "um so that a user which goes over the service hits either version 1.0 or 1.1 so that",
    "start": "497759",
    "end": "504639"
  },
  {
    "text": "there's no downtime for your application of course this kind of deployment doesn't work does it always work",
    "start": "504639",
    "end": "510639"
  },
  {
    "text": "so your application really needs to be tailored for being able to",
    "start": "510639",
    "end": "517599"
  },
  {
    "text": "being upgraded within a rolling deployment for example your back end state like our database need to be able to run with both",
    "start": "517599",
    "end": "523518"
  },
  {
    "text": "versions so version 1.0 and 1.1 so for if you have a schema upgrade",
    "start": "523519",
    "end": "530399"
  },
  {
    "text": "between those versions you have to do this very carefully so that your database schema really can support",
    "start": "530399",
    "end": "535839"
  },
  {
    "text": "both versions the next one would be a fixed deployment this is a little bit easier for from the",
    "start": "535839",
    "end": "542800"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "so it's a bit easier from our implementation side it's because all",
    "start": "542800",
    "end": "548160"
  },
  {
    "text": "your old versions are scaled down to zero immediately at once and as soon as they are down then your",
    "start": "548160",
    "end": "553440"
  },
  {
    "text": "new ones gets be get been scaled up so then you have a kind of a little bit of a time gap between those",
    "start": "553440",
    "end": "558880"
  },
  {
    "text": "versions so down time and the service actually really switched over to the new one after that",
    "start": "558880",
    "end": "565680"
  },
  {
    "text": "then there are variation of both of those deployments so these two deployments like fixed deployment and a rolling update",
    "start": "565680",
    "end": "571600"
  },
  {
    "start": "568000",
    "end": "568000"
  },
  {
    "text": "deployment are really supported directly by kubernetes via the deployment resource but if you want to have some",
    "start": "571600",
    "end": "578480"
  },
  {
    "text": "more sophisticated deployment strategies then you can do that as well but then",
    "start": "578480",
    "end": "583680"
  },
  {
    "text": "you have to do it manually by managing multiple deployments or you use a platform",
    "start": "583680",
    "end": "589120"
  },
  {
    "text": "like k native which also supports which is kind of a has a concept of a service creative service",
    "start": "589120",
    "end": "596080"
  },
  {
    "text": "which is a simplification of a deployment which also allows you to create these these strategies i'm going to show you",
    "start": "596080",
    "end": "601760"
  },
  {
    "text": "now we are so called traffic splitting so for a release you still have you have your old",
    "start": "601760",
    "end": "607920"
  },
  {
    "text": "version 1. 1.0 covered by one deployment you create a new deployment with a new reference to",
    "start": "607920",
    "end": "613839"
  },
  {
    "text": "1.1 and so you have both versions running at the same time however this also the service always",
    "start": "613839",
    "end": "619360"
  },
  {
    "text": "look still points only to the old version then you have time to test your new versions and if you are fine with that",
    "start": "619360",
    "end": "627040"
  },
  {
    "text": "you can just switch up with one called the service over to the newer version in the sense so in the sense you also",
    "start": "627040",
    "end": "633040"
  },
  {
    "text": "have kind of a zero downtime and but you have an atomic switch also",
    "start": "633040",
    "end": "638880"
  },
  {
    "text": "for this service another variation of the rolling update is the canary release where you say you",
    "start": "638880",
    "end": "644959"
  },
  {
    "start": "641000",
    "end": "641000"
  },
  {
    "text": "make a rolling update but you stop in the middle so in this case you just maybe you have three replicas set",
    "start": "644959",
    "end": "650959"
  },
  {
    "text": "replicas for your old uh and your old version but then you scale up one port with your new version",
    "start": "650959",
    "end": "656560"
  },
  {
    "text": "and your server still goes to both of them but you have maybe ninety percent of your traffic then goes to the old",
    "start": "656560",
    "end": "662160"
  },
  {
    "text": "version but only ten percent of the new one so you can try out some stuff and say okay i'm it's okay for me that",
    "start": "662160",
    "end": "669200"
  },
  {
    "text": "you can scale up the new version make it a full rolling deployment or you say no that's not what i wanted",
    "start": "669200",
    "end": "676079"
  },
  {
    "text": "to have let's go back to the old version this is easily done again using k native this is super",
    "start": "676079",
    "end": "682399"
  },
  {
    "text": "simple to do if you don't use k native you can do this manually as well so here's a nice",
    "start": "682399",
    "end": "688560"
  },
  {
    "text": "diagram also from the book where you see how these deployments are working over time so on the x-axis",
    "start": "688560",
    "end": "696880"
  },
  {
    "text": "you have the time on the y-axis you have the number of instances running the blue one is the old version the green",
    "start": "696880",
    "end": "703040"
  },
  {
    "text": "dotted curve is the new version for auric deployment you have a gradual degrees",
    "start": "703040",
    "end": "708079"
  },
  {
    "text": "of the old version an increase of the newer version fixed deployment you have a kind of a little gap",
    "start": "708079",
    "end": "713120"
  },
  {
    "text": "where nothing is running blue green release is you have a certain",
    "start": "713120",
    "end": "718240"
  },
  {
    "text": "time where both versions are running and this is also important to note that uh for this case you need",
    "start": "718240",
    "end": "724560"
  },
  {
    "text": "twice of the capacity for your application which means your cluster must be large enough that",
    "start": "724560",
    "end": "729839"
  },
  {
    "text": "your application can run in two copies which can be on an issue or maybe not for canary release",
    "start": "729839",
    "end": "737519"
  },
  {
    "text": "use the kind of a rolling update which which should just stop in the middle like that and then at the end you can",
    "start": "737519",
    "end": "744079"
  },
  {
    "text": "decide what you want to do okay this is all about the declarative deployment",
    "start": "744079",
    "end": "750560"
  },
  {
    "text": "let's move on to the structural patterns for structural patterns is structure",
    "start": "750959",
    "end": "756480"
  },
  {
    "text": "patterns actually are something about how you can compose your application and can use the primitives of kubernetes",
    "start": "756480",
    "end": "763040"
  },
  {
    "text": "to create different kinds of application we will look in the most famous one which is the sitecar",
    "start": "763040",
    "end": "768959"
  },
  {
    "text": "and the sidecar container really is about how you can add functionality",
    "start": "768959",
    "end": "776720"
  },
  {
    "text": "to an application without actually changing the application itself",
    "start": "776720",
    "end": "781839"
  },
  {
    "text": "this is all about runtime collaboration of containers we have already seen in one of the",
    "start": "781839",
    "end": "788079"
  },
  {
    "start": "782000",
    "end": "782000"
  },
  {
    "text": "slides at the beginning that in a pot you can have multiple containers in these pots these containers can",
    "start": "788079",
    "end": "794959"
  },
  {
    "text": "communicate with each other either via the network so we are localhost in a certain port or if set up",
    "start": "794959",
    "end": "802399"
  },
  {
    "text": "probably with a shared volume so that one container can write on this volume and the other one can read it for",
    "start": "802399",
    "end": "808000"
  },
  {
    "text": "example it's a little bit similar to aop in the programming world where you have",
    "start": "808000",
    "end": "813360"
  },
  {
    "text": "also this aspect-oriented programming and add autonomous concerns to your",
    "start": "813360",
    "end": "819279"
  },
  {
    "text": "application like logging or security and as i mentioned it's all about separation of concerns so you can",
    "start": "819279",
    "end": "825040"
  },
  {
    "text": "compose your stuff and and all the in this example for here you see that the main container",
    "start": "825040",
    "end": "833360"
  },
  {
    "text": "is an http server which serves certain data from a disk and all the requests that come in just",
    "start": "833360",
    "end": "838800"
  },
  {
    "text": "serve the disk so the main container just this is kind of a static http server but then you can add a cycle",
    "start": "838800",
    "end": "844000"
  },
  {
    "text": "container which periodically pulls some external storage like a git repository and if there's any change update the",
    "start": "844000",
    "end": "850480"
  },
  {
    "text": "local data so that the next request request that comes in for the http server gets the updated data",
    "start": "850480",
    "end": "857519"
  },
  {
    "text": "so with this setup you do not have to touch the http server at all and can add a new functionality like",
    "start": "857519",
    "end": "864880"
  },
  {
    "text": "updating when something changes directly by adding a sidecar container this is a good example how you can",
    "start": "864880",
    "end": "870320"
  },
  {
    "text": "really enhance your application with without really touching it and one of the most prominent examples in this",
    "start": "870320",
    "end": "875760"
  },
  {
    "text": "category are really service meshes which actually does this so inject some certain",
    "start": "875760",
    "end": "880959"
  },
  {
    "text": "side containers into your main application and then add new functionality like tracing and other things circuit",
    "start": "880959",
    "end": "887440"
  },
  {
    "text": "building and so on without actually really any change to your main container",
    "start": "887440",
    "end": "894160"
  },
  {
    "text": "some let's have a quick look into two variations or specific variations of the site",
    "start": "894240",
    "end": "900160"
  },
  {
    "text": "container so first of all the adapter this is all about how you can decouple the access to a container from the",
    "start": "900160",
    "end": "907839"
  },
  {
    "text": "outside world which means that you can add adapters depending on the needs",
    "start": "907839",
    "end": "913839"
  },
  {
    "start": "911000",
    "end": "911000"
  },
  {
    "text": "requirements for certain systems here in this example we have again our main container application let's assume",
    "start": "913839",
    "end": "919600"
  },
  {
    "text": "you have certain metrics which you want to monitor these metrics are written down into a file system in kind of a",
    "start": "919600",
    "end": "924720"
  },
  {
    "text": "proprietary format but you have a system like prometheus which wants to get query this metrics and",
    "start": "924720",
    "end": "932320"
  },
  {
    "text": "for this you just add kind of an adapter which on the one side reads the matrix now the other side",
    "start": "932320",
    "end": "939519"
  },
  {
    "text": "exposes these metrics to prometheus in the prometheus specific format",
    "start": "939519",
    "end": "945279"
  },
  {
    "text": "and so the main application doesn't know anything about prompters but you can still connect to prometheus for",
    "start": "945279",
    "end": "950480"
  },
  {
    "text": "monitoring and if you change your monitoring system like let's say you switch to nagios then you just exchange the",
    "start": "950480",
    "end": "957360"
  },
  {
    "text": "adapter and still your application does not need anything to know about this this is about how you expose data in a",
    "start": "957360",
    "end": "963040"
  },
  {
    "text": "uniform fashion to the outside and the ambassador is kind of the opposite it's just how to decouple",
    "start": "963040",
    "end": "968240"
  },
  {
    "text": "the container access to the outside world so it describes how your container accesses",
    "start": "968240",
    "end": "973360"
  },
  {
    "text": "the outside world from inside an example could be a cache which you have locally either",
    "start": "973360",
    "end": "978480"
  },
  {
    "start": "975000",
    "end": "975000"
  },
  {
    "text": "or you want to have a distributed cache and depending on your needs you just offer kind of a unique api on",
    "start": "978480",
    "end": "985040"
  },
  {
    "text": "localhost but exchange the sitecar container depending on their context",
    "start": "985040",
    "end": "990720"
  },
  {
    "text": "so here you have in the upper picture you have a memcached which is running locally your main application just communicates overload",
    "start": "990720",
    "end": "997199"
  },
  {
    "text": "close over certain port and does not really know what's happened behind this port",
    "start": "997199",
    "end": "1003199"
  },
  {
    "text": "next now let's jump now let's jump to the next category which is about configuration",
    "start": "1004320",
    "end": "1010720"
  },
  {
    "text": "and we have already very good direct support for configuration within kubernetes for application developers",
    "start": "1010720",
    "end": "1015839"
  },
  {
    "text": "you can use config maps and secrets but also environment variables to configure your",
    "start": "1015839",
    "end": "1020959"
  },
  {
    "text": "applications sometimes you need a little bit more if you have a complex scenario and i want",
    "start": "1020959",
    "end": "1026000"
  },
  {
    "text": "to show you now in this example our configuration template works",
    "start": "1026000",
    "end": "1031120"
  },
  {
    "text": "this is also a pattern and it's here it's about how you can manage large and complex similar configuration data",
    "start": "1031120",
    "end": "1038720"
  },
  {
    "text": "similar in the sense that you might have deployment scenarios where you have different",
    "start": "1038720",
    "end": "1045199"
  },
  {
    "text": "stages like a development environment like a staging environment like a production environment",
    "start": "1045199",
    "end": "1051520"
  },
  {
    "text": "and all of this has kind of similar configuration except for certain connection parameters for",
    "start": "1051520",
    "end": "1056640"
  },
  {
    "text": "example like a database so you have the development environment needs to connect to the development",
    "start": "1056640",
    "end": "1062320"
  },
  {
    "text": "database the production environment to the production database and of course you can copy over all this",
    "start": "1062320",
    "end": "1068400"
  },
  {
    "text": "into your applications but if you do it naively you have to create different images container images for all of these",
    "start": "1068400",
    "end": "1074160"
  },
  {
    "text": "applications which is not very very nice but this pattern actually tries to solve",
    "start": "1074160",
    "end": "1080880"
  },
  {
    "start": "1076000",
    "end": "1076000"
  },
  {
    "text": "this problem by introducing an init container in that container is something which starts before your main container starts and",
    "start": "1080880",
    "end": "1088240"
  },
  {
    "text": "let's assume this in the container contains a template processor you have in your image you have a",
    "start": "1088240",
    "end": "1094160"
  },
  {
    "text": "configuration template which means all the shared parts are this are given there",
    "start": "1094160",
    "end": "1099200"
  },
  {
    "text": "but you have placeholder for the variables like the database connection url",
    "start": "1099200",
    "end": "1104320"
  },
  {
    "text": "and this template processor then would pick up all these configuration parameters from",
    "start": "1104320",
    "end": "1110080"
  },
  {
    "text": "a config map for example and then puts it into the template processor the temple",
    "start": "1110080",
    "end": "1115679"
  },
  {
    "text": "processor also picks up the template and then the final",
    "start": "1115679",
    "end": "1121039"
  },
  {
    "text": "configuration is stored in the shared volume and what the main containers just does it picks up this already processed",
    "start": "1121039",
    "end": "1126400"
  },
  {
    "text": "configuration data and serves it to or use it for for itself for here a good example could be jpos or whitefly",
    "start": "1126400",
    "end": "1133679"
  },
  {
    "text": "which is in java e application server um and here you see it's a graphically so",
    "start": "1133679",
    "end": "1140080"
  },
  {
    "text": "you have a template processor you have the configuration templates the temperature would mount your config",
    "start": "1140080",
    "end": "1145200"
  },
  {
    "text": "map as a volume takes the templates which are coming directly from the init containers image",
    "start": "1145200",
    "end": "1150480"
  },
  {
    "text": "processes it creates the processed images into the configuration file your main application",
    "start": "1150480",
    "end": "1156000"
  },
  {
    "text": "charts just mount and reads the configuration and of course the only thing you have to change for different environments is",
    "start": "1156000",
    "end": "1162000"
  },
  {
    "text": "just different config map volumes for different environments so you would put into the into the copic map only those parts which are different",
    "start": "1162000",
    "end": "1168880"
  },
  {
    "text": "for these environments here's how it looks like in the resource descriptor so you would have here a deployment",
    "start": "1168880",
    "end": "1174480"
  },
  {
    "text": "and you see the inner container just picks up a kind of a prepared",
    "start": "1174480",
    "end": "1180880"
  },
  {
    "text": "image which contains the templates the parameters themselves come from a conflict map named wildfly parameters",
    "start": "1180880",
    "end": "1186960"
  },
  {
    "text": "and the config itself is written into an empty directory which then later on is mounted by the main container like",
    "start": "1186960",
    "end": "1193440"
  },
  {
    "text": "here the white fly and uh just re uses the configured parameters",
    "start": "1193440",
    "end": "1199120"
  },
  {
    "text": "we have good example for this in the the for the source of the book has already",
    "start": "1199120",
    "end": "1204880"
  },
  {
    "text": "prepared images which you can directly use for this kind of processing next let's talk about behavioral",
    "start": "1204880",
    "end": "1210480"
  },
  {
    "start": "1209000",
    "end": "1209000"
  },
  {
    "text": "patterns here we are talking about patterns that are describing the characteristics of an",
    "start": "1210480",
    "end": "1216159"
  },
  {
    "text": "application like a patch job or stateful services but also how",
    "start": "1216159",
    "end": "1222000"
  },
  {
    "text": "servers can find each other via services coverage or how services can be exposed to the outside",
    "start": "1222000",
    "end": "1227360"
  },
  {
    "text": "and this is what we are describing now with the service discovery pattern and this pattern is all about how you",
    "start": "1227360",
    "end": "1233360"
  },
  {
    "text": "discover and use services with kubernetes different variations",
    "start": "1233360",
    "end": "1238880"
  },
  {
    "text": "first of all let's have a quick look to the outside to the non-kubernetes world",
    "start": "1238880",
    "end": "1243919"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "and how service discovery works there so typically you have a producer so this is the one who offers you a service",
    "start": "1243919",
    "end": "1250320"
  },
  {
    "text": "the producers registers its service in the service registry like console for",
    "start": "1250320",
    "end": "1255840"
  },
  {
    "text": "example and then you have a consumer who needs to do an active lookup to the registry",
    "start": "1255840",
    "end": "1261280"
  },
  {
    "text": "for example the name gets back a reference to this to the service and then invokes the service in the third step",
    "start": "1261280",
    "end": "1267440"
  },
  {
    "text": "sometimes there are hn involved which are just which you have to connect to your services with kubernetes it's a little",
    "start": "1267440",
    "end": "1274960"
  },
  {
    "start": "1273000",
    "end": "1273000"
  },
  {
    "text": "bit different because the service register is really part of qrs itself it's all that the consumer already has a",
    "start": "1274960",
    "end": "1280880"
  },
  {
    "text": "name as for the lookup and this lookup happens behind the scenes so this is done by kind of a proxy this is",
    "start": "1280880",
    "end": "1287360"
  },
  {
    "text": "either a reproxy or kind of a virtual proxy and you can imagine this is this the kinetic the kubernetes service",
    "start": "1287360",
    "end": "1293840"
  },
  {
    "text": "which uh is used here and uh so uh in that sense the proxy also",
    "start": "1293840",
    "end": "1300159"
  },
  {
    "text": "selects the ports and evoke the service afterwards now let's have a look into the different",
    "start": "1300159",
    "end": "1306400"
  },
  {
    "start": "1303000",
    "end": "1303000"
  },
  {
    "text": "kind of discoveries so first of all we have internal services covering which is used by services or by",
    "start": "1306400",
    "end": "1313120"
  },
  {
    "text": "application ports which are running within the cluster so every application has kind of",
    "start": "1313120",
    "end": "1318159"
  },
  {
    "text": "dependencies and these dependencies can be either within the cluster or outside the cluster if they are within the cluster you can",
    "start": "1318159",
    "end": "1325679"
  },
  {
    "text": "can just call your dependencies via a kubernetes service and this service is kind of a mini load balancer for your pots",
    "start": "1325679",
    "end": "1332240"
  },
  {
    "text": "and these pots are selected by label selectors you can have multiple service purpose",
    "start": "1332240",
    "end": "1337919"
  },
  {
    "text": "there's also kind you can configure a session affinity on our p address of the client port so that the client port with certain",
    "start": "1337919",
    "end": "1344240"
  },
  {
    "text": "appear address always lands at the other fixed port and",
    "start": "1344240",
    "end": "1350000"
  },
  {
    "text": "readiness probes are really used to indicate that the service is ready so your if you call a service",
    "start": "1350000",
    "end": "1355039"
  },
  {
    "text": "you only get through if the to you only get to a port that is ready and you get involved with a peer address",
    "start": "1355039",
    "end": "1360720"
  },
  {
    "text": "for each service so you do an internal lookup via dns and then get back the internal return ip",
    "start": "1360720",
    "end": "1366320"
  },
  {
    "text": "address of that service if you have to access services outside",
    "start": "1366320",
    "end": "1372000"
  },
  {
    "start": "1371000",
    "end": "1371000"
  },
  {
    "text": "the cluster so like an external system you can do this also with the kubernetes service but in this case you don't",
    "start": "1372000",
    "end": "1378559"
  },
  {
    "text": "enter a label selector into the service but just either create so called an endpoints",
    "start": "1378559",
    "end": "1384640"
  },
  {
    "text": "resource which has a list of ip addresses that should be used and this endpoint",
    "start": "1384640",
    "end": "1389760"
  },
  {
    "text": "has the same name as a service so in this case if a request comes from a port to this service",
    "start": "1389760",
    "end": "1395120"
  },
  {
    "text": "then the endpoints are consulted and then just delegated to the",
    "start": "1395120",
    "end": "1401280"
  },
  {
    "text": "external system or you use a service of type external name and there you can just put in a",
    "start": "1401280",
    "end": "1407760"
  },
  {
    "text": "external dns name which then is used all the time if you access the server so this service is then kind of a proxy for",
    "start": "1407760",
    "end": "1414159"
  },
  {
    "text": "this external name so this was all about how your internal",
    "start": "1414159",
    "end": "1419600"
  },
  {
    "text": "ports can access services but of course sometimes you want to expose certain services to the outside so the user",
    "start": "1419600",
    "end": "1426320"
  },
  {
    "text": "outside of the cluster can access your service and here you have different possibilities the simplest one to",
    "start": "1426320",
    "end": "1432880"
  },
  {
    "text": "configure is the node port you just add a type notebook to your service and then every node in your cluster exposes this",
    "start": "1432880",
    "end": "1440159"
  },
  {
    "text": "port to the outside world and directs you to this service and the service again just delegates to the ports",
    "start": "1440159",
    "end": "1448559"
  },
  {
    "text": "yeah the benefit is of course it's easy to configure other the the drawback is that if of course you need",
    "start": "1448880",
    "end": "1455760"
  },
  {
    "text": "to know that the port is available for for you to expose so you have to manage certain port ranges for",
    "start": "1455760",
    "end": "1462080"
  },
  {
    "text": "your services which you want to expose on your cluster this is true for every service in the cluster that you want to expose over the",
    "start": "1462080",
    "end": "1468400"
  },
  {
    "text": "node port and also this port is not always stable so sometimes typically you",
    "start": "1468400",
    "end": "1474480"
  },
  {
    "text": "will get a random port you can also pin this port of course but this requires tons of management for you and",
    "start": "1474480",
    "end": "1481760"
  },
  {
    "text": "also for a user running for example accessing your service via web browser it's not easy it's not so nice to",
    "start": "1481760",
    "end": "1487200"
  },
  {
    "text": "to have to specify a port there then you have the other uh two possibilities to use a load",
    "start": "1487200",
    "end": "1493200"
  },
  {
    "text": "balancer or an ingress for load balancer this is kind of from service offered by your kubernetes provider or typically also a",
    "start": "1493200",
    "end": "1499919"
  },
  {
    "text": "cloud provider and this is different from provider to provider so load balancer",
    "start": "1499919",
    "end": "1506000"
  },
  {
    "text": "is something which is outside of the cluster image out of the cluster they have different characteristics also",
    "start": "1506000",
    "end": "1511039"
  },
  {
    "text": "but what you do for your servers you can define the time log balancer and then you have a kind of a one-to-one",
    "start": "1511039",
    "end": "1516080"
  },
  {
    "text": "relationship from a load balancer ip2 your service there the alternative",
    "start": "1516080",
    "end": "1521520"
  },
  {
    "text": "is to use an ingress which is a kind of an own resource entity which is managed within the kubernetes cluster you have",
    "start": "1521520",
    "end": "1527600"
  },
  {
    "text": "ingress controller behind that and this increased controller also exposes the increase to the outside you can also dispatch to multiple",
    "start": "1527600",
    "end": "1535120"
  },
  {
    "text": "services this is not not so easy with a load balancer",
    "start": "1535120",
    "end": "1540559"
  },
  {
    "start": "1540000",
    "end": "1540000"
  },
  {
    "text": "here is the example how you specified ingress as as you see you can specify different",
    "start": "1540559",
    "end": "1546080"
  },
  {
    "text": "context paths which is uh nice so that you can really dispatch to different services",
    "start": "1546080",
    "end": "1552000"
  },
  {
    "text": "so this is all what i have about the service discovery what you see is actually a short summary how you specify this on",
    "start": "1552000",
    "end": "1558320"
  },
  {
    "text": "the service so there are different types and different other specifications which you can use",
    "start": "1558320",
    "end": "1563600"
  },
  {
    "text": "and which web to these different concepts so finally let's have a look into the",
    "start": "1563600",
    "end": "1569919"
  },
  {
    "text": "advanced petals and these are patterns which are do not fit really well in the other categories",
    "start": "1569919",
    "end": "1575120"
  },
  {
    "text": "but they are described more advanced concepts like elastic scale which is about horizontal ports and vertical put",
    "start": "1575120",
    "end": "1581200"
  },
  {
    "text": "autoscaler based on current resource usage and also about image",
    "start": "1581200",
    "end": "1586799"
  },
  {
    "text": "builder which is allows you to create container images within a cluster but for this talk we i've selected the",
    "start": "1586799",
    "end": "1593120"
  },
  {
    "text": "controller operator which are very important concepts of kubernetes itself let's start with the controller the",
    "start": "1593120",
    "end": "1598880"
  },
  {
    "text": "controller pattern is all about how you get from the current state to the target stack i already mentioned that kubernetes is",
    "start": "1598880",
    "end": "1605520"
  },
  {
    "text": "all about state reconsolidation which means that that you declare your",
    "start": "1605520",
    "end": "1611200"
  },
  {
    "text": "state what you want to do and it's up to kubernetes to perform certain actions to get to this state",
    "start": "1611200",
    "end": "1617120"
  },
  {
    "start": "1617000",
    "end": "1617000"
  },
  {
    "text": "this works that it periodically observes the actual state and then analyzes the actual state makes",
    "start": "1617120",
    "end": "1624240"
  },
  {
    "text": "it diff against the target state that you have declared in the cluster and if there's any difference then it",
    "start": "1624240",
    "end": "1630799"
  },
  {
    "text": "acts on uh in that form that it tries to decrease the gap between the actual and",
    "start": "1630799",
    "end": "1636720"
  },
  {
    "text": "the target set and of course ideally this gap gets zero so that it's that there's no difference anymore um",
    "start": "1636720",
    "end": "1643120"
  },
  {
    "text": "yeah so this is how kubernetes works itself there are tons of controllers who are doing exactly this kind of loop all",
    "start": "1643120",
    "end": "1648320"
  },
  {
    "text": "the time technically it works that it connects the controller connects to the api",
    "start": "1648320",
    "end": "1653600"
  },
  {
    "start": "1649000",
    "end": "1649000"
  },
  {
    "text": "server the control controller is kind of in regular application running in the background",
    "start": "1653600",
    "end": "1659840"
  },
  {
    "text": "and then observe the api server that this is by observing events which are emitted by the api server if when",
    "start": "1659840",
    "end": "1666640"
  },
  {
    "text": "there is a change in the cluster depending on these events it analyzes whether it needs to act or not",
    "start": "1666640",
    "end": "1673039"
  },
  {
    "text": "if there are some action required again contacts the api server and this api server then works on behalf",
    "start": "1673039",
    "end": "1679520"
  },
  {
    "text": "of this action talks with the node components creates maybe new ports or does",
    "start": "1679520",
    "end": "1684799"
  },
  {
    "text": "anything that the controller wants to do as mentioned quest safe has a tons of",
    "start": "1684799",
    "end": "1689840"
  },
  {
    "text": "controller but you can leverage this concept as well for your own applications",
    "start": "1689840",
    "end": "1694960"
  },
  {
    "text": "here is an example of such a controller you can write the controller of course in any language here we was uh we are using a shell",
    "start": "1694960",
    "end": "1702320"
  },
  {
    "start": "1695000",
    "end": "1695000"
  },
  {
    "text": "script just to demonstrate that you can also use shell for that what you see here is kind of a curl",
    "start": "1702320",
    "end": "1707679"
  },
  {
    "text": "which watches for events so it creates the api server and then it reads the event",
    "start": "1707679",
    "end": "1715039"
  },
  {
    "text": "for every event it extracts the event and checks whether the event has been modified and for example it watches for certain",
    "start": "1715039",
    "end": "1722960"
  },
  {
    "text": "config maps by name and if such such a conflict map has been modified it takes an action and this action in",
    "start": "1722960",
    "end": "1729760"
  },
  {
    "text": "this example which is also part of the books example which you can download is to restart a port which has a certain",
    "start": "1729760",
    "end": "1735679"
  },
  {
    "text": "label that points to this conflict map so with this simple controller you can implement",
    "start": "1735679",
    "end": "1741760"
  },
  {
    "text": "a functionality which means to restart your ports as soon as this configuration changes",
    "start": "1741760",
    "end": "1748240"
  },
  {
    "text": "coming now to our last pattern the operator the operator is all about how you can",
    "start": "1748240",
    "end": "1754399"
  },
  {
    "text": "encapsulate operational knowledge into an executable software it's a little it's a little bit similar",
    "start": "1754399",
    "end": "1759760"
  },
  {
    "text": "to the controller and in fact it is based on the controller so here's a definition of what this an",
    "start": "1759760",
    "end": "1765679"
  },
  {
    "text": "operator is so first of all we have this very nice quote from jimmy zielinski which really",
    "start": "1765679",
    "end": "1770799"
  },
  {
    "text": "i think brings it to the point an operator is a community controller so it's",
    "start": "1770799",
    "end": "1776559"
  },
  {
    "text": "on top of our controller but it understands two domains one is the kubernetes domain itself",
    "start": "1776559",
    "end": "1782080"
  },
  {
    "text": "like a controller does but also something else and this on by combining this knowledge between the",
    "start": "1782080",
    "end": "1788480"
  },
  {
    "text": "co between kubernetes and this custom domain knowledge it can automate tasks",
    "start": "1788480",
    "end": "1794159"
  },
  {
    "text": "the same way like a human operator would do when it would have to operate the software",
    "start": "1794159",
    "end": "1799840"
  },
  {
    "text": "there is another definition which we also like quite a bit because it's very simple maybe it's too simplistic but",
    "start": "1799840",
    "end": "1806000"
  },
  {
    "text": "it depends but actually you also see an operator often as in controller plus something a new",
    "start": "1806000",
    "end": "1812000"
  },
  {
    "text": "concept which is called a custom resource definition and a custom resource definition or crd",
    "start": "1812000",
    "end": "1817840"
  },
  {
    "text": "in short is something how you can extend preparedness with your own types and your own resource types so",
    "start": "1817840",
    "end": "1824320"
  },
  {
    "text": "here you see an example of humanities resource definition which introduces a new type which is called",
    "start": "1824320",
    "end": "1830480"
  },
  {
    "text": "config voucher and as soon as you have applied this custom resource definition to your kubernetes cluster you then can",
    "start": "1830480",
    "end": "1837600"
  },
  {
    "text": "use a config watcher resource like in this example so you can use a config watcher kind of",
    "start": "1837600",
    "end": "1843840"
  },
  {
    "start": "1839000",
    "end": "1839000"
  },
  {
    "text": "config watcher and then you have a specific specification spec field which is very specific to your own",
    "start": "1843840",
    "end": "1850399"
  },
  {
    "text": "resource and this resource encapsulates the your domain knowledge so for this example which is based on",
    "start": "1850399",
    "end": "1857200"
  },
  {
    "text": "the controller example that we just have seen it's about our operator running the background watching this custom resource",
    "start": "1857200",
    "end": "1864159"
  },
  {
    "text": "is as soon as it sees such a custom resource it knows it has to watch the config map",
    "start": "1864159",
    "end": "1869279"
  },
  {
    "text": "with the name web app config and then as soon as this config map changes restart all ports which match this",
    "start": "1869279",
    "end": "1876240"
  },
  {
    "text": "selector here okay okay so we can now have now seen",
    "start": "1876240",
    "end": "1881600"
  },
  {
    "text": "controllers and operators and how do they compare to each other this is a kind of also",
    "start": "1881600",
    "end": "1886640"
  },
  {
    "text": "kind of a one view on how you can categorize controllers operators this is based on flexibility and",
    "start": "1886640",
    "end": "1892480"
  },
  {
    "text": "complexity of this so for example controllers which is a more simpler concept than operators they",
    "start": "1892480",
    "end": "1899679"
  },
  {
    "text": "typically operate on standard resources like labels or also on config maps",
    "start": "1899679",
    "end": "1906000"
  },
  {
    "text": "and other stuff you can configure them with config maps as well but if you have more",
    "start": "1906000",
    "end": "1912240"
  },
  {
    "text": "if you have a higher requirement for your domain then you probably move on to operators",
    "start": "1912240",
    "end": "1917279"
  },
  {
    "text": "that are watching custom resource definitions or if you want it even have it more complex and more flexible",
    "start": "1917279",
    "end": "1923279"
  },
  {
    "text": "you can create an own aggregate api which hooks directly to the api server and that so that you can",
    "start": "1923279",
    "end": "1931760"
  },
  {
    "text": "be accessible via the rest api directly from the api server",
    "start": "1931760",
    "end": "1937200"
  },
  {
    "start": "1937000",
    "end": "1937000"
  },
  {
    "text": "then there is another classification which you can put on custom resource definitions",
    "start": "1937760",
    "end": "1942960"
  },
  {
    "text": "themselves so we distinguish between installation crds and applications here these",
    "start": "1942960",
    "end": "1948720"
  },
  {
    "text": "installations here these are really about how you can operate an application like prometheus like kafka cluster like",
    "start": "1948720",
    "end": "1955679"
  },
  {
    "text": "anything about which you want to run in your kubernetes cluster and how you",
    "start": "1955679",
    "end": "1960880"
  },
  {
    "text": "and this installation here these describe the installation of the application itself it also is",
    "start": "1960880",
    "end": "1966399"
  },
  {
    "text": "responsible uh for the update so the operator behind the crd is responsible for updates and other",
    "start": "1966399",
    "end": "1972559"
  },
  {
    "text": "operational tasks like backup and restore a good example is for example is promethois so there is a crd which",
    "start": "1972559",
    "end": "1979039"
  },
  {
    "text": "type with kind promethos and this is for installing a promethos",
    "start": "1979039",
    "end": "1985120"
  },
  {
    "text": "monitoring system for you and all the dependent components to that then",
    "start": "1985200",
    "end": "1990399"
  },
  {
    "text": "there are the applications here these and this is really about the application specific concept",
    "start": "1990399",
    "end": "1995840"
  },
  {
    "text": "whereas the installation crd is really about installing something and taking care that it's really",
    "start": "1995840",
    "end": "2001679"
  },
  {
    "text": "constantly running the application studio is more about insta configuring these applications yet",
    "start": "2001679",
    "end": "2008000"
  },
  {
    "text": "another example is the service monitor which is there for registering kubernetes services with prometheus so that as soon",
    "start": "2008000",
    "end": "2015039"
  },
  {
    "text": "as you install a service config sorry service monitor then your promethos server will monitor",
    "start": "2015039",
    "end": "2022880"
  },
  {
    "text": "the service which is referenced within the service monitor other example could be a kafka topic",
    "start": "2022880",
    "end": "2030080"
  },
  {
    "text": "which is also available if you use for example the sturenzio stream separator and this would",
    "start": "2030080",
    "end": "2035279"
  },
  {
    "text": "introduce a kafka topic in your kafka cluster if you are looking for operators which",
    "start": "2035279",
    "end": "2041760"
  },
  {
    "text": "are which are there you there the operator up is a very good starting point",
    "start": "2041760",
    "end": "2046799"
  },
  {
    "text": "it contains a catalog of available operators it contains instructions how you can",
    "start": "2046799",
    "end": "2052320"
  },
  {
    "text": "install these operators in your cluster and this catalog is constantly growing",
    "start": "2052320",
    "end": "2057358"
  },
  {
    "text": "so i really recommend to go to operatedub.io if you want to create your own operators",
    "start": "2057359",
    "end": "2064320"
  },
  {
    "text": "you have tons of possibilities there is you can of course write it in any language but",
    "start": "2064320",
    "end": "2069599"
  },
  {
    "text": "there are some frameworks which can help you to create those the most famous one is the operator sdk",
    "start": "2069599",
    "end": "2076560"
  },
  {
    "text": "which is also which you can find on github and this allows you to create",
    "start": "2076560",
    "end": "2081760"
  },
  {
    "text": "operators in the golang language so this is all what i have for you thank",
    "start": "2081760",
    "end": "2087839"
  },
  {
    "text": "you very much i hope you enjoyed the the session you have seen some of the operators you'll find more in the",
    "start": "2087839",
    "end": "2092960"
  },
  {
    "text": "book that you can download um and uh yeah i hope and show you the the kubecon",
    "start": "2092960",
    "end": "2099920"
  },
  {
    "text": "and hopefully next time we can meet us in person again thank you very much",
    "start": "2099920",
    "end": "2108240"
  }
]