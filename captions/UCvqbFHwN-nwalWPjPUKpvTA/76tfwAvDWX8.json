[
  {
    "text": "hey everyone how's everyone doing how many of are going back today",
    "start": "960",
    "end": "7520"
  },
  {
    "text": "home well we appreciate you coming to our talk I know it's Friday it's afternoon it's one of the last sessions",
    "start": "9679",
    "end": "16800"
  },
  {
    "text": "uh thank you for being here thank you for taking the time we're going to be talking about how to achieve end to end",
    "start": "16800",
    "end": "23519"
  },
  {
    "text": "qos in kubernetes networks we're going to be using the cloud gaming environment",
    "start": "23519",
    "end": "28960"
  },
  {
    "text": "production clusters you know where we run kubernetes at Nvidia as our use case",
    "start": "28960",
    "end": "34239"
  },
  {
    "text": "to explain some of the challenges in networking and how we overcame them I'm",
    "start": "34239",
    "end": "40320"
  },
  {
    "text": "suya sitaraman I'm an engineer working at red hat in the open shift networking team I'm also contributor to the Sig",
    "start": "40320",
    "end": "46879"
  },
  {
    "text": "Network upstream and also an noi and kubernetes maintainer hey all my name is Girish I'm a distinguished engineer at",
    "start": "46879",
    "end": "53640"
  },
  {
    "text": "nvdia I'm also one of the aen communities maintainers so let's have some fun right",
    "start": "53640",
    "end": "61160"
  },
  {
    "text": "how many of you play games raise hands yeah oh whole lot whole lot so you're the in the right talk in the right room",
    "start": "61160",
    "end": "67759"
  },
  {
    "text": "how many of you play the games that you see here that is awesome how many of you have G Accounts at Nvidia a few are",
    "start": "67759",
    "end": "75400"
  },
  {
    "text": "hands but that's a quite a lot right so we're going to basically so the fun fact",
    "start": "75400",
    "end": "80520"
  },
  {
    "text": "I don't play games Girish does not play games I've never played but but we're doing the networking behind all these",
    "start": "80520",
    "end": "87360"
  },
  {
    "text": "games that you play on the cloud right so he can blame us",
    "start": "87360",
    "end": "92960"
  },
  {
    "text": "yeah so let's imagine a scenario you have an ongoing DOTA game right you have some players in your Cloud who are",
    "start": "92960",
    "end": "98920"
  },
  {
    "text": "playing the game we have a second game which is also parall happening so this is going to be our case scenario here we",
    "start": "98920",
    "end": "105560"
  },
  {
    "text": "have two games game one and game two let's map that to a kubernetes cluster",
    "start": "105560",
    "end": "110799"
  },
  {
    "text": "which is why we're all here right so imagine the players 1 2 and three are",
    "start": "110799",
    "end": "116719"
  },
  {
    "text": "part of your ongoing game one and players eight and N are part of your ongoing game to all of these five player",
    "start": "116719",
    "end": "124399"
  },
  {
    "text": "pods are part of the same kubernetes GPU node they're all sharing the same 25 gab",
    "start": "124399",
    "end": "130959"
  },
  {
    "text": "Uplink and they're all sharing the resources on this node for bandwidth right and there is a kubernetes CPU node",
    "start": "130959",
    "end": "137879"
  },
  {
    "text": "also here which is hosting your infrastructure components API server and other Ingress and Etc which I've",
    "start": "137879",
    "end": "144480"
  },
  {
    "text": "abstracted here so there a CPU node and there's a reverse proxy that's running in the CPU node and any data that is",
    "start": "144480",
    "end": "150959"
  },
  {
    "text": "coming from the player pod to this game stream network is reverse proxy back to the Internet so external connections",
    "start": "150959",
    "end": "157440"
  },
  {
    "text": "from pods inside the cluster to the internet is handled by the reverse proxy pod you also have the storage node on",
    "start": "157440",
    "end": "163360"
  },
  {
    "text": "which storage pods are running so when you play games you have all this data massive data that you have to constantly",
    "start": "163360",
    "end": "168800"
  },
  {
    "text": "feed and store and save so that's all happening there there are three networks the this game stream network which is",
    "start": "168800",
    "end": "175440"
  },
  {
    "text": "the pink one or the red one that you see here the blue network is your infrastructure Network so this is the",
    "start": "175440",
    "end": "181920"
  },
  {
    "text": "kubernetes management Network let's say and then you have the storage Network which is the green Network like I",
    "start": "181920",
    "end": "187040"
  },
  {
    "text": "mentioned so the red lines you see are the game streamlines so like I mentioned there's two ongoing games there's five",
    "start": "187040",
    "end": "194280"
  },
  {
    "text": "pods each pod has three interfaces the eth zero interface is connected to the",
    "start": "194280",
    "end": "199840"
  },
  {
    "text": "blue Network the infrastructure Network the net one interface in the p is the game stream network the netw interface",
    "start": "199840",
    "end": "206360"
  },
  {
    "text": "is the storage Network so this is how we've implemented it and the game stream infra the storage they're all part of",
    "start": "206360",
    "end": "214120"
  },
  {
    "text": "the ovian kubernetes cni is what we run underneath it so that's an implementation detail but they are overlay networks right U that's what the",
    "start": "214120",
    "end": "221799"
  },
  {
    "text": "network here at least is is refering to so we have this setup and the the red",
    "start": "221799",
    "end": "227200"
  },
  {
    "text": "lines that you see because the games are ongoing you have stream traffic that is heavy the Bold lines in red signify that",
    "start": "227200",
    "end": "233920"
  },
  {
    "text": "the streaming traffic is active right now let's imagine your game two finished",
    "start": "233920",
    "end": "239560"
  },
  {
    "text": "right it's normal players eight and nine are about to log off and before they log",
    "start": "239560",
    "end": "245480"
  },
  {
    "text": "out they have to save the data they scores they ranking everything back into the storage Network so you can see",
    "start": "245480",
    "end": "251680"
  },
  {
    "text": "players 8 and N have stopped streaming no more red lines only the green lines and the green lines are actually thicker",
    "start": "251680",
    "end": "257400"
  },
  {
    "text": "because those two pods are heavily storing back data so all of this is egress traffic coming out of the Pod",
    "start": "257400",
    "end": "263560"
  },
  {
    "text": "using the same Uplink so when players 8 and N are contextually Sav giving their",
    "start": "263560",
    "end": "270120"
  },
  {
    "text": "game data this causes a bad gaming experience for the other three players right this is simple it makes sense",
    "start": "270120",
    "end": "275880"
  },
  {
    "text": "because they're all sharing the same Uplink and suddenly the streaming data gets affected because of all the storage",
    "start": "275880",
    "end": "281160"
  },
  {
    "text": "data that's coming and the reason why we have separate networks is the storage network has jumbo frames and you need",
    "start": "281160",
    "end": "286880"
  },
  {
    "text": "special N Net devices to handle that so there's a lot going there versus and then to is 900 versus the stream network",
    "start": "286880",
    "end": "292840"
  },
  {
    "text": "is 1,500 normal that you have so coming to the networking requirements around this right so you",
    "start": "292840",
    "end": "298880"
  },
  {
    "text": "can see a simp simple use case here it's really important to ensure that the game play is uninterrupted it causes a bad",
    "start": "298880",
    "end": "305520"
  },
  {
    "text": "experience for end users otherwise it's very very pivotal to have a network where you have minimum latency minimum",
    "start": "305520",
    "end": "312039"
  },
  {
    "text": "Jitter and maximum throughput and in order to achieve this you need bandwidth controls right you need controls on each",
    "start": "312039",
    "end": "318880"
  },
  {
    "text": "of these pods so that when your storage network is actively ongoing and as your egressing traffic into that doesn't",
    "start": "318880",
    "end": "325919"
  },
  {
    "text": "affect the streaming Network so this is what Girish are here to talk about today this is going to be the Crux of our talk",
    "start": "325919",
    "end": "331600"
  },
  {
    "text": "where how can you tune traffic in a fine grained manner so that you have",
    "start": "331600",
    "end": "337479"
  },
  {
    "text": "different traffics you're at play your network and they don't affect each other before we go into how we solved",
    "start": "337479",
    "end": "343960"
  },
  {
    "text": "this I just want to level set the audience here with some terminologies which you probably have already heard of before but still Ingress bandwidth is",
    "start": "343960",
    "end": "351240"
  },
  {
    "text": "traffic going into the Pod so in this case the we have an eth0 I've put a",
    "start": "351240",
    "end": "357600"
  },
  {
    "text": "control saying it's 1.5 gigs of increas bandwidth that this pod has so all the",
    "start": "357600",
    "end": "363039"
  },
  {
    "text": "traffic going into the Pod at Max can only have that rate right so we're rate limiting the rest of the traffic Ingress",
    "start": "363039",
    "end": "369440"
  },
  {
    "text": "bandwidth is usually applied last at the destination just before it's entering your application or your pod in your",
    "start": "369440",
    "end": "375280"
  },
  {
    "text": "cluster so the traffic is coming from the source it's traversed the network and it's at the sync or at the",
    "start": "375280",
    "end": "380520"
  },
  {
    "text": "destination that this is applied this is kind of wasteful if you think about it because it's already come all the way",
    "start": "380520",
    "end": "385759"
  },
  {
    "text": "and this is where you're doing the rate limiting right at at the Pod right before it enters egas bandwidth is the",
    "start": "385759",
    "end": "391639"
  },
  {
    "text": "opposite of that so you have a part here and I have put 2.5 gigs of bandwidth control which means all the eess traffic",
    "start": "391639",
    "end": "398360"
  },
  {
    "text": "coming out of the Pod at Max can have that rate anything above that will be dropped and this is applied at source so",
    "start": "398360",
    "end": "405400"
  },
  {
    "text": "as soon as it's coming out of the Pod you're rate limiting it at the face of the Pod so and for the use cases at",
    "start": "405400",
    "end": "411440"
  },
  {
    "text": "Nvidia here and for the scope of our talk we're going to stick with egress bandwidth for Ingress bandwidth we rely",
    "start": "411440",
    "end": "417840"
  },
  {
    "text": "on the egress bandwidth of the switch right before it comes into your pod so we're still doing ESS bandwidth even for",
    "start": "417840",
    "end": "424280"
  },
  {
    "text": "the Ingress so for for our talk everything moving forward will be ESS so",
    "start": "424280",
    "end": "429319"
  },
  {
    "text": "that it keeps things simple we also want to talk about two other Concepts which is the the first one being the maximum",
    "start": "429319",
    "end": "436160"
  },
  {
    "text": "bandwidth everything that I spoke now spoke about till now is maximum bandwidth right so you have game seat",
    "start": "436160",
    "end": "441919"
  },
  {
    "text": "pod one game seat pod two you have 2.5 gigs for part 1 1.5 gigs for part two",
    "start": "441919",
    "end": "447520"
  },
  {
    "text": "both are sharing the same ens 5 Uplink interface of 25 gigs when you say maximum bandwidth it",
    "start": "447520",
    "end": "454120"
  },
  {
    "text": "is literally the maximum that you can do so even if there is more capacity in your bandwidth link here 25 I have 25",
    "start": "454120",
    "end": "461199"
  },
  {
    "text": "and yet I've put 2.5 the part cannot do anything right it cannot really use anything more than that so this cannot",
    "start": "461199",
    "end": "468000"
  },
  {
    "text": "exceed its limit and that is the maximum bandwidth concept guaranteed bandwidth or minimum bandwidth is opposite of the",
    "start": "468000",
    "end": "475120"
  },
  {
    "text": "maximum obviously and so if you in this case if you take the example of pod one where where I have 2.5 and part two has",
    "start": "475120",
    "end": "482159"
  },
  {
    "text": "1.5 you have 25 so you have more capacity in your bandwidth you can easily use more this part can use more",
    "start": "482159",
    "end": "489159"
  },
  {
    "text": "because it is guaranteed to have 2.5 but it can have much more than that if your Uplink has the capacity or the space to",
    "start": "489159",
    "end": "495800"
  },
  {
    "text": "allow for that however if you have another application coming in that gets scheduled on this node and now it starts",
    "start": "495800",
    "end": "502280"
  },
  {
    "text": "consuming the resources in bandwidth this SP will start getting throttled but throttled only to the point of the 2.5",
    "start": "502280",
    "end": "509240"
  },
  {
    "text": "gig right so it's always guaranteed to have that limit or that rate so that is",
    "start": "509240",
    "end": "515360"
  },
  {
    "text": "the basic difference between the maximum bandwidth and the guaranteed bandwidth here when we talk about the two",
    "start": "515360",
    "end": "520518"
  },
  {
    "text": "Notions finally qos I've been saying qos is the title of our talk so I just want to quickly touch upon that so a lot of",
    "start": "520519",
    "end": "528080"
  },
  {
    "text": "the end user applications not just gaming networks you have Telco you have voice over IP you have video streaming",
    "start": "528080",
    "end": "534640"
  },
  {
    "text": "you have Healthcare you have financial sector you have stock markets here l latency is really important everywhere",
    "start": "534640",
    "end": "540959"
  },
  {
    "text": "you need this quality of service SLO that you promise you'll deliver for your services so you kind of need to see it",
    "start": "540959",
    "end": "546760"
  },
  {
    "text": "through and in networking we have the quas concept at different layers Linux does it in its own way I mentioned we",
    "start": "546760",
    "end": "552480"
  },
  {
    "text": "are using OV and kubernetes we do it in our own way ovs ovn all of these layers do it in their own way but the concept",
    "start": "552480",
    "end": "558800"
  },
  {
    "text": "of quas is very simple it's a network management concept that is allowing you to control and prioritize traffic in",
    "start": "558800",
    "end": "564600"
  },
  {
    "text": "your network you you're able to give preferential treatment to some of the traffic like in our case we on the",
    "start": "564600",
    "end": "569720"
  },
  {
    "text": "streaming traffic to have more priority than our storage traffic so",
    "start": "569720",
    "end": "575320"
  },
  {
    "text": "prioritization classification queuing all of these concepts are bundled together under the name quas so",
    "start": "575320",
    "end": "580959"
  },
  {
    "text": "hopefully that gives a bit of a you know a context on all the terminologies that we're about to use for the rest of our",
    "start": "580959",
    "end": "586519"
  },
  {
    "text": "presentation and then finally let's come into how all of this is done in kubernetes ecosystem",
    "start": "586519",
    "end": "592519"
  },
  {
    "text": "today Ingress bandwidth can be achieved using the Ingress bandwidth annotation that you're seeing on the Pod it's",
    "start": "592519",
    "end": "598959"
  },
  {
    "text": "simple enough which is just you just put this annotation on a pod level you say you want to give it 1.5 gigs underneath",
    "start": "598959",
    "end": "606160"
  },
  {
    "text": "it you have to either use the bandwidth plugin in cni or have your own implementation implemented you can put",
    "start": "606160",
    "end": "611680"
  },
  {
    "text": "the bandwidth type plug-in config in your cni file and that will let you set the rate the bursts the limits all of",
    "start": "611680",
    "end": "618800"
  },
  {
    "text": "that when you are um queuing packets and doing shaping and policing for incress ESS is the same you have the",
    "start": "618800",
    "end": "625480"
  },
  {
    "text": "egress band with annotation right where you're uh limiting the traffic coming out of the part both of these features",
    "start": "625480",
    "end": "631839"
  },
  {
    "text": "are experimental and the bandwidth plugins experimental in in nature but let's look at the limitations",
    "start": "631839",
    "end": "637920"
  },
  {
    "text": "of these two bandwidths which is what we have in kubernetes to be able to do bandwidth controls right the API is only",
    "start": "637920",
    "end": "644880"
  },
  {
    "text": "allowing you to specify the maximum bandwidth not the guaranteed bandwidth",
    "start": "644880",
    "end": "650720"
  },
  {
    "text": "so when you're setting The annotation on the Pod here the EAS bandwidth what you basically see is that is the maximum",
    "start": "650720",
    "end": "658040"
  },
  {
    "text": "that the part can have but but if you want to express the guaranteed bandwidth today you don't have a way to do that",
    "start": "658040",
    "end": "664720"
  },
  {
    "text": "the other the other aspect to this is this whole bandwidth concept the The",
    "start": "664720",
    "end": "669959"
  },
  {
    "text": "annotation is on a pod level so on the Pod you can put this annotation and that is what is limiting it but it's on a pod",
    "start": "669959",
    "end": "676800"
  },
  {
    "text": "level so if you have two types of traffic coming out of the pod in this case the orange traffic and the purple traffic you don't have a way to say I",
    "start": "676800",
    "end": "683959"
  },
  {
    "text": "want control a for my orange traffic and control B for my pink traffic or the",
    "start": "683959",
    "end": "689800"
  },
  {
    "text": "purple traffic sorry right so there's no way to do it on a per application Level or on a per packet level it's also not",
    "start": "689800",
    "end": "697600"
  },
  {
    "text": "tunable for different applications inside the Pod so it's the same thing that I was mentioning in the previous point but in a different way so at layer",
    "start": "697600",
    "end": "704279"
  },
  {
    "text": "four at application Level at Port level you don't have a way to fine-tune your bandwidth control which is important to",
    "start": "704279",
    "end": "709839"
  },
  {
    "text": "us finally like I mentioned we're using multiple interfaces on the Pod for multihoming use cases you have the net",
    "start": "709839",
    "end": "716279"
  },
  {
    "text": "one which is the streaming Network the net two which is your storage Network I want to be able to tell precisely what",
    "start": "716279",
    "end": "721920"
  },
  {
    "text": "bandwidth I want for my streaming versus what bandwidth I want for my storage so none of this is today possible using the",
    "start": "721920",
    "end": "727519"
  },
  {
    "text": "kubernetes bandwidth annotations it's only on a pod level not on a packet level not on an interface level we need",
    "start": "727519",
    "end": "733360"
  },
  {
    "text": "something more fine-tuned for our use cases we have a project called malus which is part of the network Plumping",
    "start": "733360",
    "end": "739600"
  },
  {
    "text": "working group so it's in the kubernetes ecosystem malus goes one step ahead and they have these annotations on a per",
    "start": "739600",
    "end": "746079"
  },
  {
    "text": "Network level so instead of the per pod level you can do a per Network level bandwidth control so in this case you",
    "start": "746079",
    "end": "752600"
  },
  {
    "text": "have a gam stream network and you can mention for the Ingress rate and the burst rate egress rate the burst rate",
    "start": "752600",
    "end": "758160"
  },
  {
    "text": "for the game stream network and you can do the same for the storage Network so mulus lets you basically cover this use",
    "start": "758160",
    "end": "763399"
  },
  {
    "text": "case right where you have multiple networks and you want to put band on that but it still does not give you the",
    "start": "763399",
    "end": "769839"
  },
  {
    "text": "fine-tuning on a packet parameter level so this is simply not achievable using multis annotations today so with that",
    "start": "769839",
    "end": "777320"
  },
  {
    "text": "I'll you know let Girish take over is going to show a demo of how all of this looks and how we solv it it in media",
    "start": "777320",
    "end": "783800"
  },
  {
    "text": "thanks sua so you're all hearing gpus for gaming and not for AI or machine",
    "start": "783800",
    "end": "789240"
  },
  {
    "text": "learning for the very first time on the last day of the conference so I'm really excited about that so so um let's get uh",
    "start": "789240",
    "end": "799000"
  },
  {
    "text": "familiarized with the demo setup okay so we have Nvidia has uh like 50 to 60 data",
    "start": "799000",
    "end": "805360"
  },
  {
    "text": "centers across the world where we actually let people come in play game off of the cloud every gamer gets a pod",
    "start": "805360",
    "end": "811680"
  },
  {
    "text": "and to the Pod we assign a GPU and and we either assign entire GPU or a slice of a GPU based on what game they're",
    "start": "811680",
    "end": "818040"
  },
  {
    "text": "playing and uh the notes which have GPU on them they're called GPU notes so we",
    "start": "818040",
    "end": "824079"
  },
  {
    "text": "have three types of server in every data center you have GPU notes which have gpus on them you have um uh storage",
    "start": "824079",
    "end": "830519"
  },
  {
    "text": "notes which have ssds on them and then of course the CPU notes run the C plan the CPU notes they don't have GPR or the",
    "start": "830519",
    "end": "836360"
  },
  {
    "text": "SSS the cheapest service that you can get and these GPU notes in some cases",
    "start": "836360",
    "end": "841800"
  },
  {
    "text": "might have uh two gpus or up to eight gpus and when you slice this GPU fourway",
    "start": "841800",
    "end": "847920"
  },
  {
    "text": "you can play a maximum of 32 32 Gamers so at any given time 32 Gamers can be",
    "start": "847920",
    "end": "853079"
  },
  {
    "text": "playing on the same node uh alongside with others right all these Gamers for practical purposes they're all their own",
    "start": "853079",
    "end": "859199"
  },
  {
    "text": "tenant right so obviously you want to make sure that one gamer is not messing up with other Gamers on the same note",
    "start": "859199",
    "end": "865079"
  },
  {
    "text": "and on top of that all these 32 gamers are sharing the same Uplink Port which is 25 gig and in our case it's a melanox",
    "start": "865079",
    "end": "872480"
  },
  {
    "text": "Nick okay and um and in our case we use multi-home pods right like sua was",
    "start": "872480",
    "end": "879759"
  },
  {
    "text": "explaining uh here on the GPU node we have two Gamers right on each of the",
    "start": "879759",
    "end": "884839"
  },
  {
    "text": "gamer has three interfaces uh ET Zer net one and net two and each interface serves different purpose we kind of",
    "start": "884839",
    "end": "891360"
  },
  {
    "text": "started this way because we didn't have a proper way to do qos in kubernetes so we said let's try to put each traffic in",
    "start": "891360",
    "end": "898360"
  },
  {
    "text": "its own interface and thereby solving the problem so we right now have three interfaces one for purely streaming",
    "start": "898360",
    "end": "905160"
  },
  {
    "text": "which is500 bytes and one for storage which is 900 and it's jumbo we use Rocky",
    "start": "905160",
    "end": "911079"
  },
  {
    "text": "V2 and we use kind of uh uh gives us the best performance we use Rocky or jumbo",
    "start": "911079",
    "end": "916720"
  },
  {
    "text": "Network and the primary interface which is ET Zer that's for command and control like accessing API server accessing Cod",
    "start": "916720",
    "end": "922880"
  },
  {
    "text": "DNS and whatnot so that's your GPU note right the another thing to notice here is that every interface to Port is a VF",
    "start": "922880",
    "end": "929839"
  },
  {
    "text": "s VF so we don't use weet we don't use internal Port we don't use Mac VLAN we don't use IP VLAN so every interface to",
    "start": "929839",
    "end": "936399"
  },
  {
    "text": "a part is a VF so it's a virtual pro virtual function it's a programmable virtual function what that gives us is",
    "start": "936399",
    "end": "943279"
  },
  {
    "text": "an ability to offload flows into it so this VF so all the network traffic going through the VF is wire speed because we",
    "start": "943279",
    "end": "949639"
  },
  {
    "text": "offload it to the neck uh Network Services like firewall dnet snat forwarding everything happens in",
    "start": "949639",
    "end": "955399"
  },
  {
    "text": "Hardware so that that gives us an ability to run things at wire speed and we have a CPU node where we have the",
    "start": "955399",
    "end": "961040"
  },
  {
    "text": "reverse proxy basically the frames from the GPU they get sent to the reverse proxy and then on the reverse proxy it",
    "start": "961040",
    "end": "967839"
  },
  {
    "text": "gets forwarded to another interface that is connected to the internet and then we Source net the packet to the public IP",
    "start": "967839",
    "end": "974399"
  },
  {
    "text": "and we send that frame from the GPU that got rendered all the way to reverse",
    "start": "974399",
    "end": "979600"
  },
  {
    "text": "proxy then we forward Source n to public IP and send it to the a client console the client console can be a phone it",
    "start": "979600",
    "end": "985759"
  },
  {
    "text": "could be a laptop it could be a very old laptop it could be a browser it could pay anything so that's the role of reverse proxy basically streaming GPU",
    "start": "985759",
    "end": "993079"
  },
  {
    "text": "frames to the client thing and on the storage node we have uh you know various",
    "start": "993079",
    "end": "998759"
  },
  {
    "text": "use cases to uh uh uh uh to save the user artifact so this is the whole setup",
    "start": "998759",
    "end": "1005240"
  },
  {
    "text": "okay so now we'll demonstrate the uh problems like I said in this particular setup there are um four notes um let me",
    "start": "1005240",
    "end": "1014079"
  },
  {
    "text": "see yeah can't seem",
    "start": "1014079",
    "end": "1021519"
  },
  {
    "text": "to is I'm playing",
    "start": "1022319",
    "end": "1025959"
  },
  {
    "text": "right looks like",
    "start": "1030079",
    "end": "1033678"
  },
  {
    "text": "things looks like the demo gods are not with us today it's a recorded demo on oh",
    "start": "1044000",
    "end": "1049360"
  },
  {
    "text": "we have I think you're locked out so and that's no that's not what I'm",
    "start": "1049360",
    "end": "1055160"
  },
  {
    "text": "seeing here though wow the laptop",
    "start": "1055160",
    "end": "1062670"
  },
  {
    "text": "[Laughter] crashed you're not using",
    "start": "1062670",
    "end": "1071050"
  },
  {
    "text": "[Music] gpus really",
    "start": "1071050",
    "end": "1076440"
  },
  {
    "text": "maybe connected back again no no it's all charged but",
    "start": "1082440",
    "end": "1088360"
  },
  {
    "text": "uh it's rebooting you're",
    "start": "1088360",
    "end": "1092240"
  },
  {
    "text": "rebooting yeah using HDMI and U let's",
    "start": "1097799",
    "end": "1104399"
  },
  {
    "text": "see oh sh",
    "start": "1107360",
    "end": "1110760"
  },
  {
    "text": "come",
    "start": "1123559",
    "end": "1125720"
  },
  {
    "text": "on loog in no pressure typing password when everybody's watching",
    "start": "1133720",
    "end": "1140720"
  },
  {
    "text": "sorry come on sorry about this guys just we're rebooting",
    "start": "1141360",
    "end": "1147480"
  },
  {
    "text": "here it's funny that uh sua was telling like she has presented all three four talks in this Cube con and every talk",
    "start": "1152200",
    "end": "1158919"
  },
  {
    "text": "had some issue so now she has a story to kind of I was hoping it was not going to be",
    "start": "1158919",
    "end": "1165840"
  },
  {
    "text": "this talk but okay back cool we're back on",
    "start": "1165840",
    "end": "1174039"
  },
  {
    "text": "hey I think it's Keystone we were using Google Slides all along and can put the play yeah yeah okay",
    "start": "1174559",
    "end": "1185279"
  },
  {
    "text": "um cool there are four pods here right player one victim pod player two attacker pod and then we have reverse",
    "start": "1186000",
    "end": "1192760"
  },
  {
    "text": "proxy pod uh and then we have a storage pod so on the bottom left right we have reverse proxy pod we kind of quickly",
    "start": "1192760",
    "end": "1199960"
  },
  {
    "text": "going to go over each pod look at all the interfaces on it and then kind of show you that U and then we're going to",
    "start": "1199960",
    "end": "1206760"
  },
  {
    "text": "run ier from the rever reverse proxy and storage and then kind of show how attacker can victimize the actual gamer",
    "start": "1206760",
    "end": "1214320"
  },
  {
    "text": "so um on the right now we're looking at the reverse proxy p and then we started ipu there on the storage part we'll show",
    "start": "1214320",
    "end": "1221480"
  },
  {
    "text": "you the links there are two links there and each of them is a VF like Sr VF",
    "start": "1221480",
    "end": "1226679"
  },
  {
    "text": "backed by melanox uh interface and then we have a route the route output shows that there are two routes",
    "start": "1226679",
    "end": "1232240"
  },
  {
    "text": "there and we're running iper so now what we're going to do is um we're going to kind of show you what's the the",
    "start": "1232240",
    "end": "1238159"
  },
  {
    "text": "interfaces on the victim p uh there are three interfaces like I said one for streaming one for storage with the jumbo",
    "start": "1238159",
    "end": "1243919"
  },
  {
    "text": "MTU you can see the 9,000 MTU there and they're all backed by svf and on the other attacker pod it's",
    "start": "1243919",
    "end": "1251200"
  },
  {
    "text": "the same set of interfaces um so we're going to now start uh the IP of client",
    "start": "1251200",
    "end": "1258640"
  },
  {
    "text": "uh trying to connect to the the the respective storage server and you can see that now the streaming is happening",
    "start": "1258640",
    "end": "1264919"
  },
  {
    "text": "let's assume right it's a 25 gig Uplink since no one else is using the Uplink right now the entire good chunk of 25",
    "start": "1264919",
    "end": "1271880"
  },
  {
    "text": "gig is being used by the streamer streamer is happy but now an attacker came in and started a storage traffic",
    "start": "1271880",
    "end": "1277880"
  },
  {
    "text": "with jumbo MTU by the way it kind of consumed the entire like almost whole lot of bandwidth from the up link right",
    "start": "1277880",
    "end": "1284440"
  },
  {
    "text": "and then if you see on the left the bandwidth throughput dropped from 20 to gig to 3 gig right and uh this kind of",
    "start": "1284440",
    "end": "1291600"
  },
  {
    "text": "clearly shows that uh an attacker can come in and influence or do do bad things to the um um um to the victim so",
    "start": "1291600",
    "end": "1300000"
  },
  {
    "text": "here um we're just showing what I just demoed basically the attacker can come in and then send a storage traffic out",
    "start": "1300000",
    "end": "1306960"
  },
  {
    "text": "and then kind of victimize the uh streaming out there so how did we solve this problem right again there are no",
    "start": "1306960",
    "end": "1313279"
  },
  {
    "text": "apis there were no API so what we did was we resorted to dscp DSP is a very",
    "start": "1313279",
    "end": "1318760"
  },
  {
    "text": "wellknown uh field in IP header it's called differentiated Services code point it's a 6bit field since it's 6bit",
    "start": "1318760",
    "end": "1325919"
  },
  {
    "text": "uh you have up to 64 values Now using this field it's end to end right because",
    "start": "1325919",
    "end": "1331480"
  },
  {
    "text": "it's an hyp header it's end to end every element in the network can see it and using the 64-bit field you can kind of",
    "start": "1331480",
    "end": "1337720"
  },
  {
    "text": "differentiate how to you know each Network traffic so um what we decided was to use uh like DSP value of 32 that",
    "start": "1337720",
    "end": "1346000"
  },
  {
    "text": "kind of corresponds to 0x80 as a way for telling it's streaming and then we assigned 70% of the Upstream bandwidth",
    "start": "1346000",
    "end": "1353440"
  },
  {
    "text": "and then um for storage we use 0x8 it's just a numbering it could be used you can one can use anything the the trick",
    "start": "1353440",
    "end": "1360200"
  },
  {
    "text": "here is to decide for a given Uplink what percentage of network traffic has to be assigned to your application so",
    "start": "1360200",
    "end": "1366799"
  },
  {
    "text": "then we went uh this particular demo quickly shows um uh what we did here right on every node on a given interface",
    "start": "1366799",
    "end": "1373840"
  },
  {
    "text": "here it's EMP 197 s0 F0 you have to set up the node in a way that hey Uplink you",
    "start": "1373840",
    "end": "1379440"
  },
  {
    "text": "have 25 gig and out of this 25 gig you could have at least 64 applications",
    "start": "1379440",
    "end": "1384559"
  },
  {
    "text": "because there are 64 DP values and then we take those DSP values and then match it to a traffic class and on that",
    "start": "1384559",
    "end": "1391200"
  },
  {
    "text": "traffic class we actually set uh the bandwidth right in our case for streaming it's 70 and then for storage",
    "start": "1391200",
    "end": "1398440"
  },
  {
    "text": "it's 20 and then we kind of mapping here saying the DP 32 to priority1 and DCP 34",
    "start": "1398440",
    "end": "1404080"
  },
  {
    "text": "for priority 3 and that dscp 32 value is for streaming and 34 for storage and",
    "start": "1404080",
    "end": "1410000"
  },
  {
    "text": "then this priority is being matched like I said to traffic class and then we set a right bandwidth right with that I'm",
    "start": "1410000",
    "end": "1416600"
  },
  {
    "text": "going to uh see if I can fast for a little bit or so yeah now with all those things",
    "start": "1416600",
    "end": "1425279"
  },
  {
    "text": "configured on the GPU node where the games are running and the ipu are already running we're going to start the",
    "start": "1425279",
    "end": "1430799"
  },
  {
    "text": "storage with the dsv marking of 0x88 right since it's a minimum",
    "start": "1430799",
    "end": "1435880"
  },
  {
    "text": "bandwidth since no one else is using the link you are allowed to over subscribe because it's minimum guarantee right the",
    "start": "1435880",
    "end": "1442960"
  },
  {
    "text": "moment I start streaming with the right X8 value the hardware underneath",
    "start": "1442960",
    "end": "1448279"
  },
  {
    "text": "immediately sees that there is a new network traffic that's marked differently and I have to honor it with",
    "start": "1448279",
    "end": "1454960"
  },
  {
    "text": "70% of the bandwidth and immediately you can see that the storage traffic from 24 gig went all the way up to 6 or 5 gig",
    "start": "1454960",
    "end": "1461840"
  },
  {
    "text": "and uh the streaming always started off with the right bandwidth it never ever saw so this is how we solved it but",
    "start": "1461840",
    "end": "1468919"
  },
  {
    "text": "there were some gas with it um what was the gas right we went to RIT our application developers saying that hey",
    "start": "1468919",
    "end": "1475559"
  },
  {
    "text": "when you guys compile your code open a open on your socket where you send this UDP packet or streaming or storage",
    "start": "1475559",
    "end": "1482640"
  },
  {
    "text": "packet just set the DP value to these numbers so we're going to application developers and then telling them to use",
    "start": "1482640",
    "end": "1488520"
  },
  {
    "text": "this DSP values so obviously that's not you know because we are all one Arc we",
    "start": "1488520",
    "end": "1493880"
  },
  {
    "text": "trust each other and everything works but if you have a tenant like you are a gamer like the gamer can escape out of",
    "start": "1493880",
    "end": "1499480"
  },
  {
    "text": "the game he's now on the Pod and now he can start running IOD for whatever it is with whatever other value and then start",
    "start": "1499480",
    "end": "1504840"
  },
  {
    "text": "messing around so obviously there was a tust boundary issues and then with absence of API and no rback This was um",
    "start": "1504840",
    "end": "1511840"
  },
  {
    "text": "not going to work out so the solution that we decided was to kind of come up with a new custom resource called",
    "start": "1511840",
    "end": "1519200"
  },
  {
    "text": "Network cost okay the spec for Network cost is as shown here right like like how sua was telling um any you have a p",
    "start": "1519200",
    "end": "1528039"
  },
  {
    "text": "part has inbound traffic and outbound traffic right Ingress or egress for a given Direction you can either say",
    "start": "1528039",
    "end": "1534039"
  },
  {
    "text": "maximum bandwidth or minimum bandwidth right maximum bandwidth is you can go all the maximum bandwidth is you have a",
    "start": "1534039",
    "end": "1540720"
  },
  {
    "text": "cap rate minimum is you're guaranteed that minimum if no one else is using your link you can still go so in this",
    "start": "1540720",
    "end": "1547240"
  },
  {
    "text": "spec what we're doing is we are kind of focusing only on the ESS Direction because that that's what actually was",
    "start": "1547240",
    "end": "1553520"
  },
  {
    "text": "very useful to us to begin with and then we are doing both minimum and maximum for a given Direction so in the spec the",
    "start": "1553520",
    "end": "1561200"
  },
  {
    "text": "first thing we have is a pod selector right we have to select the pod on which we want to apply the cost rules and now",
    "start": "1561200",
    "end": "1566840"
  },
  {
    "text": "our pods are all multi-home right we have to select on which interface on that pod we want the cost rules to be",
    "start": "1566840",
    "end": "1574120"
  },
  {
    "text": "applied that's the network attachment name and then within that particular",
    "start": "1574120",
    "end": "1579720"
  },
  {
    "text": "Network we want to make sure it's a fine grind L4 traffic policy right we want only certain UDP traffic like data paths",
    "start": "1579720",
    "end": "1587520"
  },
  {
    "text": "to be uh uh treated differently compared to control path so that's the classifier",
    "start": "1587520",
    "end": "1593559"
  },
  {
    "text": "aspect to it and the bandwidth here is for the maximum bandwidth which basically uh caps the bandwidth and then",
    "start": "1593559",
    "end": "1599520"
  },
  {
    "text": "there's a it's doing traffic policing anything exceeding that maximum bandwidth the packet Gets Drop finally",
    "start": "1599520",
    "end": "1605960"
  },
  {
    "text": "we have the dscp which is actually to Mark the packet and based on that Mark packet is what uh um we kind of um treat",
    "start": "1605960",
    "end": "1614559"
  },
  {
    "text": "the minimum man with right 0x80 and 0x88 so so with that API defined let's",
    "start": "1614559",
    "end": "1620480"
  },
  {
    "text": "quickly look at U so yeah so this is the demo which will take you know which will take you all",
    "start": "1620480",
    "end": "1626720"
  },
  {
    "text": "through how we are using this network cost API to kind of make sure the victim parts are not victimized so the name is",
    "start": "1626720",
    "end": "1632880"
  },
  {
    "text": "called Fix victim so we go to fix the victim part here on the a stream network right because streaming is very",
    "start": "1632880",
    "end": "1638960"
  },
  {
    "text": "important so on that Network we are saying uh we're going to fix this issue and we're basically matching all the",
    "start": "1638960",
    "end": "1644919"
  },
  {
    "text": "parts of type victim and then we are saying uh anything to TCP traffic 521",
    "start": "1644919",
    "end": "1651240"
  },
  {
    "text": "Mark the DCP value of 80 right so with this particular U uh we have not applied",
    "start": "1651240",
    "end": "1659440"
  },
  {
    "text": "it yet let's start the storage here right we're starting the storage traffic it's consuming the bandwidth of the",
    "start": "1659440",
    "end": "1664880"
  },
  {
    "text": "entire Uplink and then we started the stream uh and obviously it's not 70% of",
    "start": "1664880",
    "end": "1671200"
  },
  {
    "text": "the Uplink now at the bottom we actually applied the policy and then I can see that from 3 gig it went up to 21 gig",
    "start": "1671200",
    "end": "1677720"
  },
  {
    "text": "right and then I'm going to delete the policy at the bottom here",
    "start": "1677720",
    "end": "1683559"
  },
  {
    "text": "shoot so at the bottom right if when I delete the policy uh you'll see that uh",
    "start": "1684840",
    "end": "1690000"
  },
  {
    "text": "the streaming traffic will uh uh kind of U uh go back to 3 gig so because I",
    "start": "1690000",
    "end": "1696200"
  },
  {
    "text": "deleted the traffic it kind have went back to the uh 3 gig instead of the 70% of the Uplink so uh this basically kind",
    "start": "1696200",
    "end": "1703840"
  },
  {
    "text": "of visualizes whatever we did one thing I would like to mention here is that see from within the Pod nobody's marking any",
    "start": "1703840",
    "end": "1710159"
  },
  {
    "text": "packet so we don't trust the tenants so we don't let them Mark so the packet arrives unmarked into the ovn sdn",
    "start": "1710159",
    "end": "1717519"
  },
  {
    "text": "control plane that we have and the ovn sdn control plane is configured with our cni to tell any packet matching this",
    "start": "1717519",
    "end": "1723960"
  },
  {
    "text": "particular traffic flow mark it with certain value either 0x80 or 0x88 so it's completely the marking is",
    "start": "1723960",
    "end": "1729919"
  },
  {
    "text": "completely done outside of the pod on the control plane on the host and once",
    "start": "1729919",
    "end": "1735120"
  },
  {
    "text": "we mark it the hardware comes in and then looks at the packet and then kind of um uh does the job of providing the",
    "start": "1735120",
    "end": "1742200"
  },
  {
    "text": "minimum bandwidth so that's what it says and again uh uh it's the cni that implements this is kubernetes cni It's a",
    "start": "1742200",
    "end": "1750080"
  },
  {
    "text": "layered architecture uh we have ovs at the very bottom uh open Virtual switch",
    "start": "1750080",
    "end": "1755720"
  },
  {
    "text": "at the very bottom running on every node and this ovs works uh with the constructs called as open Flow rules and",
    "start": "1755720",
    "end": "1762320"
  },
  {
    "text": "then on top of ovs is ovn that is an distributed sdn control plane and and the ovn itself is configured by a kuber",
    "start": "1762320",
    "end": "1769279"
  },
  {
    "text": "cni so this whole stack is the our cni and that cni implements this cost API",
    "start": "1769279",
    "end": "1775519"
  },
  {
    "text": "and one thing we would like to share is we're very happy to announce this that um we became a Sandbox project just a",
    "start": "1775519",
    "end": "1781000"
  },
  {
    "text": "week ago so we're very excited about it and Su is going to lead us through the whole",
    "start": "1781000",
    "end": "1787200"
  },
  {
    "text": "transition yeah so like G mentioned one of the main reasons why why we became sandbox is to come and collaborate more",
    "start": "1787200",
    "end": "1793240"
  },
  {
    "text": "with the cncf community so this network was API is a crd is is kubernetes type",
    "start": "1793240",
    "end": "1799799"
  },
  {
    "text": "of API right like we want to see if this is useful for end users we are looking for feedback and we're trying to see if",
    "start": "1799799",
    "end": "1806080"
  },
  {
    "text": "it makes any sense to come and try to design this Upstream like there's our design in PC please do check it out and",
    "start": "1806080",
    "end": "1811880"
  },
  {
    "text": "leave feedback if somebody's interested in trying to uh implement this for other",
    "start": "1811880",
    "end": "1817000"
  },
  {
    "text": "cnis that's also pretty good because we want to collaborate with other cni plugins and try to bring this API back",
    "start": "1817000",
    "end": "1823120"
  },
  {
    "text": "to maybe Sig Network we don't know exactly where but we we don't want to do anything that is C ni specific but we",
    "start": "1823120",
    "end": "1829440"
  },
  {
    "text": "would rather do something that is reusable by everybody in the community so we are here to bring this back to the community so definitely talk to me and",
    "start": "1829440",
    "end": "1836360"
  },
  {
    "text": "Girish and give us feedback on if this makes sense and what is plausible here I know we also have some Dr efforts in",
    "start": "1836360",
    "end": "1843200"
  },
  {
    "text": "trying to see how pods can be scheduled on a specific node where the bandwidth",
    "start": "1843200",
    "end": "1848640"
  },
  {
    "text": "is available so I know there's a lot of exciting work going on with Dr and networking in general but maybe we can",
    "start": "1848640",
    "end": "1853799"
  },
  {
    "text": "express more things like policing shaping rating bursts all of this on the C so definitely let us know what your",
    "start": "1853799",
    "end": "1861039"
  },
  {
    "text": "thoughts are and with that we come to the end of our presentation thank you so much for thank and we made it on time",
    "start": "1861039",
    "end": "1867519"
  },
  {
    "text": "with all the reboots yeah we're also open to questions so any questions please do use the microphones or you",
    "start": "1867519",
    "end": "1876440"
  },
  {
    "text": "know hello yeah um so yes this overall this looks good and and useful um I was",
    "start": "1879639",
    "end": "1886320"
  },
  {
    "text": "just thinking out loud as you're going through how what you're doing there sort of looks like what what else you can do",
    "start": "1886320",
    "end": "1892480"
  },
  {
    "text": "in in in pod say for requests and you know limits for memory and CPU would it",
    "start": "1892480",
    "end": "1897720"
  },
  {
    "text": "be possible in the future to add Network as a you know on specifically on the Pod",
    "start": "1897720",
    "end": "1903559"
  },
  {
    "text": "level like that yeah like in CPU like resource requesting limits exactly right",
    "start": "1903559",
    "end": "1909080"
  },
  {
    "text": "yeah I mean it's the apis in core are a little bit hard to change but then I think what you're ask your question if I",
    "start": "1909080",
    "end": "1914799"
  },
  {
    "text": "understand correctly is can we bring the notion of network through the API and then put limits there or did I get that",
    "start": "1914799",
    "end": "1920840"
  },
  {
    "text": "correct no no he's asking within the PO spec where resource request limits are there we ask for memory and CPU can we",
    "start": "1920840",
    "end": "1926880"
  },
  {
    "text": "also ask for Network bandwidth and priorities yeah that's a good suggestion um uh yeah that yeah that's a lot of",
    "start": "1926880",
    "end": "1935120"
  },
  {
    "text": "changes to the yeah obviously this not anytime soon but just yeah but it's a great idea and",
    "start": "1935120",
    "end": "1940799"
  },
  {
    "text": "I think it's something we can consider as an alternative to the design instead of going with a completely new crd so",
    "start": "1940799",
    "end": "1946480"
  },
  {
    "text": "definitely exactly yeah cool thank",
    "start": "1946480",
    "end": "1950880"
  },
  {
    "text": "you okay",
    "start": "1952519",
    "end": "1957639"
  },
  {
    "text": "yep yeah so thank you for your excellent presentation so I have a question about",
    "start": "1959320",
    "end": "1964960"
  },
  {
    "text": "uh you uh in my understanding is correct you said uh you are using locky Boy 2 in",
    "start": "1964960",
    "end": "1970760"
  },
  {
    "text": "storage Network so is it possible to use with uh this network OS API with uh ly",
    "start": "1970760",
    "end": "1978320"
  },
  {
    "text": "Network yeah yeah so uh Rocky V2 uh it is definitely possible um we are already",
    "start": "1978320",
    "end": "1984880"
  },
  {
    "text": "using it um the thing is Rocky V2 is not",
    "start": "1984880",
    "end": "1990039"
  },
  {
    "text": "very um amenable for natting and qos and everything right if you do it it will",
    "start": "1990039",
    "end": "1995360"
  },
  {
    "text": "all be done in software but uh we worked with the vendor to make sure that uh you",
    "start": "1995360",
    "end": "2000600"
  },
  {
    "text": "can apply uh Q policies and Rocky V2 which is all UDP based and still achieve the line speed yes it's possible yeah",
    "start": "2000600",
    "end": "2007480"
  },
  {
    "text": "thank you mods I was just curious how much the",
    "start": "2007480",
    "end": "2013440"
  },
  {
    "text": "move to ovn kubernetes and using ovs for your flows impacted what you experiencing in terms of line rate for",
    "start": "2013440",
    "end": "2019200"
  },
  {
    "text": "your SRV implementation with the melanox devices oh like we we were able to",
    "start": "2019200",
    "end": "2025320"
  },
  {
    "text": "demonstrate the line speed all the demo I did was on uh on melanox nick2 melox",
    "start": "2025320",
    "end": "2030440"
  },
  {
    "text": "cx6 DX and U with all everything being offloaded that's why we could literally see the line speed so there was not much",
    "start": "2030440",
    "end": "2037080"
  },
  {
    "text": "effect is what so I would like to say yeah awesome that's excellent to hear thank you",
    "start": "2037080",
    "end": "2042760"
  },
  {
    "text": "thanks cool thank you everyone for coming a",
    "start": "2045279",
    "end": "2050520"
  },
  {
    "text": "great evening",
    "start": "2050520",
    "end": "2054000"
  }
]