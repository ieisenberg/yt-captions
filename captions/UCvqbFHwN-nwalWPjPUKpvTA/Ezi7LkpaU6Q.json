[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "hello i am alvaradiere from cystic thank you for assisting to this talk where i'm gonna tell you about my experience while",
    "start": "80",
    "end": "6640"
  },
  {
    "text": "implementing open8d connect as a single cylon solution in complex environments",
    "start": "6640",
    "end": "13040"
  },
  {
    "text": "so the agenda for this talk will be will be saying single sign-on",
    "start": "13040",
    "end": "19039"
  },
  {
    "start": "15000",
    "end": "60000"
  },
  {
    "text": "basics let's see some concepts then what is open id connect we will see some typical flow examples",
    "start": "19039",
    "end": "25359"
  },
  {
    "text": "how open id connect is similar or different or what shares from other concepts like xaml or out etc why use openld connect let's",
    "start": "25359",
    "end": "33520"
  },
  {
    "text": "talk about some reasons then we will do a demo on testing and booking oidc",
    "start": "33520",
    "end": "38879"
  },
  {
    "text": "we will create an oidc client and then i'll share with you a real world example",
    "start": "38879",
    "end": "43920"
  },
  {
    "text": "and how to deal with complex authentication scenarios i'll talk about other caveats",
    "start": "43920",
    "end": "49039"
  },
  {
    "text": "found in our trip and finally the good the bad and the ugly about open id connect",
    "start": "49039",
    "end": "54399"
  },
  {
    "text": "before moving to questions",
    "start": "54399",
    "end": "59839"
  },
  {
    "start": "60000",
    "end": "113000"
  },
  {
    "text": "so what does single sign-on mean it's a very broad concept one definition could be the one in the",
    "start": "61039",
    "end": "67040"
  },
  {
    "text": "slide so allow users use a single set of login credentials for multiple applications",
    "start": "67040",
    "end": "72479"
  },
  {
    "text": "which can be related but they are usually independent why because users have to remember less",
    "start": "72479",
    "end": "78560"
  },
  {
    "text": "password and no need to re-enter them of every application for security you lessen the chances of fixing",
    "start": "78560",
    "end": "84400"
  },
  {
    "text": "and reduce password fatigue and also reduce password issues for id help desk and why not well there is a higher risk",
    "start": "84400",
    "end": "91280"
  },
  {
    "text": "for response credentials if your expenses are exposed all the applications are exposed so you should",
    "start": "91280",
    "end": "96880"
  },
  {
    "text": "increase the focus on protection for example using multi-factor authentication",
    "start": "96880",
    "end": "101920"
  },
  {
    "text": "and also you convert you turn them a single authentication into a single",
    "start": "101920",
    "end": "108000"
  },
  {
    "text": "point of failure so if it fails all your applications will fail",
    "start": "108000",
    "end": "113680"
  },
  {
    "start": "113000",
    "end": "197000"
  },
  {
    "text": "well and what is open id connect well basically it is an identity layer on top of",
    "start": "113680",
    "end": "119360"
  },
  {
    "text": "2.0 protocol to verify identity delegated to an utilization server",
    "start": "119360",
    "end": "124640"
  },
  {
    "text": "so it allows you to obtain end user basic profile information in an interoperable rest json manner",
    "start": "124640",
    "end": "131440"
  },
  {
    "text": "compatible with web javascript mobile apps etc basically it lets the application site",
    "start": "131440",
    "end": "137360"
  },
  {
    "text": "developers authenticate users without taking on the responsibility of storing and managing the passwords in",
    "start": "137360",
    "end": "143599"
  },
  {
    "text": "the face of an internet that is well populated with people trying to compromise your users account for their",
    "start": "143599",
    "end": "148720"
  },
  {
    "text": "own game the openid provider can handle the users and passwords and it can delegate to directory",
    "start": "148720",
    "end": "154480"
  },
  {
    "text": "services or it can act as a half of other providers let them be open id saml etc example",
    "start": "154480",
    "end": "161760"
  },
  {
    "text": "open id providers are google sign-in microsoft and many others let's also introduce",
    "start": "161760",
    "end": "166959"
  },
  {
    "text": "some open-ended terminology like the op the open id provider which is the server",
    "start": "166959",
    "end": "172239"
  },
  {
    "text": "that performs the authentication as a service sometimes also called idp identity provider",
    "start": "172239",
    "end": "178640"
  },
  {
    "text": "and the relying party rp or simply the client which outsources the user authentication",
    "start": "178640",
    "end": "184640"
  },
  {
    "text": "to an op don't confuse the client the reliant party with the user",
    "start": "184640",
    "end": "189760"
  },
  {
    "text": "the reliant party or client uses the op to authenticate the user",
    "start": "189760",
    "end": "196080"
  },
  {
    "start": "197000",
    "end": "242000"
  },
  {
    "text": "so oidc works by a set of interactions between the user the user agent that is the browser and",
    "start": "197360",
    "end": "204400"
  },
  {
    "text": "the server of backend and the openid provider this is what we define as a flow it works on top of ol2 so if you are",
    "start": "204400",
    "end": "211760"
  },
  {
    "text": "familiar with it you might already know there are different flows why this in the slide is the authorization",
    "start": "211760",
    "end": "217840"
  },
  {
    "text": "code run flow where the client is registered in the openid provider and it can safely store and keep a client id",
    "start": "217840",
    "end": "224400"
  },
  {
    "text": "and client secret which is used to authenticate the client with the provider this flow is typically used by web",
    "start": "224400",
    "end": "230720"
  },
  {
    "text": "applications where the client is a backend server let's explain it step by step",
    "start": "230720",
    "end": "235760"
  },
  {
    "text": "and i'll try to be brief and skip some details as i expect some of you are already familiar",
    "start": "235760",
    "end": "242239"
  },
  {
    "start": "242000",
    "end": "274000"
  },
  {
    "text": "so first the interaction is just between the user and the website through the browser the user opens a site the",
    "start": "242480",
    "end": "249040"
  },
  {
    "text": "backend sends some html rendered by the browser the user is not logged in so it clicks the login using",
    "start": "249040",
    "end": "256320"
  },
  {
    "text": "openid connect button for example using google as an opening provider that request causes the backend to redirect",
    "start": "256320",
    "end": "262880"
  },
  {
    "text": "the user to the authorization endpoint of the open id provider and here is where the oauth or open id",
    "start": "262880",
    "end": "270000"
  },
  {
    "text": "connect dance begins in this part of the flow the user",
    "start": "270000",
    "end": "276560"
  },
  {
    "text": "interacts with the open id provider to get authenticated the redirection causes a get request to",
    "start": "276560",
    "end": "282000"
  },
  {
    "text": "the authorization point of the penalty provider and includes several mandatory parameters the response type",
    "start": "282000",
    "end": "287840"
  },
  {
    "text": "code tells the provider to reply with an authorization code via a callback the redirect uri is the url of the",
    "start": "287840",
    "end": "294560"
  },
  {
    "text": "callback where the utilization code will be sent the client id identifies the client",
    "start": "294560",
    "end": "299840"
  },
  {
    "text": "which must be previously registered in the provider including a list of authorized callback urls and",
    "start": "299840",
    "end": "305680"
  },
  {
    "text": "the scope parameter must always include at least the value open id there are",
    "start": "305680",
    "end": "310800"
  },
  {
    "text": "other parameters like state dots to prevent cross-site request forgery replay attacks and scope can include email profile and",
    "start": "310800",
    "end": "318160"
  },
  {
    "text": "others to get additional user information at this point the open id provider must",
    "start": "318160",
    "end": "324000"
  },
  {
    "text": "authenticate the user by any mean it can be a valid session cookie if the user was previously logged in",
    "start": "324000",
    "end": "329759"
  },
  {
    "text": "it can ask for a user password use multi-factor authentication it can delegate to another identity",
    "start": "329759",
    "end": "335199"
  },
  {
    "text": "provider etc the openid provider might also ask the user",
    "start": "335199",
    "end": "340560"
  },
  {
    "text": "to keep the consent to access its identity information to the client application this is the typical confirmation dialog",
    "start": "340560",
    "end": "346720"
  },
  {
    "text": "to allow application whatever to access your personal information",
    "start": "346720",
    "end": "352240"
  },
  {
    "start": "352000",
    "end": "364000"
  },
  {
    "text": "if everything is okay the web server the backend now receives the authorization code as a get callback request",
    "start": "352240",
    "end": "358720"
  },
  {
    "text": "the state parameter is also included so it can be verified",
    "start": "358720",
    "end": "364400"
  },
  {
    "start": "364000",
    "end": "420000"
  },
  {
    "text": "now and this is the characteristic feature of the utilization grant code flow the packet now talks directly to the op",
    "start": "364880",
    "end": "372479"
  },
  {
    "text": "to exchange the receive code it sends a post request to the op and includes in class",
    "start": "372479",
    "end": "378240"
  },
  {
    "text": "the code received in the callback the client id and the client secret the response of the post request is a json document",
    "start": "378240",
    "end": "385280"
  },
  {
    "text": "including the id token which is assigned document verifying the user identity another information",
    "start": "385280",
    "end": "391120"
  },
  {
    "text": "and also an authex token and a refresh token the server must in here verify the id",
    "start": "391120",
    "end": "398080"
  },
  {
    "text": "token signature using pki and the op provider public key furthermore the access token can be used",
    "start": "398080",
    "end": "405039"
  },
  {
    "text": "from the client to call the user info in point and retrieve additional information",
    "start": "405039",
    "end": "411680"
  },
  {
    "text": "now the user is logged in and the back-end can serve the front page for the lower user with a welcome message or whatever",
    "start": "412400",
    "end": "420560"
  },
  {
    "text": "okay the problem with the code flow is that it requires a server bucket application which can store safely the client secret",
    "start": "420560",
    "end": "427360"
  },
  {
    "text": "and this is not valid for some single page applications or mobile applications which run the client",
    "start": "427360",
    "end": "433280"
  },
  {
    "text": "and the secret could be exposed by checking the code they compile etc for these cases there exists a different",
    "start": "433280",
    "end": "438880"
  },
  {
    "text": "flow the implicit flow which is used let's briefly explain it",
    "start": "438880",
    "end": "444639"
  },
  {
    "start": "445000",
    "end": "494000"
  },
  {
    "text": "the flow begins exactly the same instead of a single page application in the",
    "start": "445680",
    "end": "450720"
  },
  {
    "text": "browser here we could have a mobile application or a desktop application the user requests the",
    "start": "450720",
    "end": "456000"
  },
  {
    "text": "application to login with open ap connect",
    "start": "456000",
    "end": "460400"
  },
  {
    "text": "okay again this is translated into a get request to the authorized endpoint of the opening provider with similar parameters as the",
    "start": "461120",
    "end": "467759"
  },
  {
    "text": "previous flow but this is different the response type is token id space id token instead of code that",
    "start": "467759",
    "end": "475520"
  },
  {
    "text": "request the open id provider the access to send the access token and the id",
    "start": "475520",
    "end": "481759"
  },
  {
    "text": "token in the callback to the application again in this step the open edit provider authenticates the",
    "start": "481759",
    "end": "488240"
  },
  {
    "text": "user with any mean and once the user is correctly authenticated",
    "start": "488240",
    "end": "494400"
  },
  {
    "start": "494000",
    "end": "515000"
  },
  {
    "text": "in implicit flow the callback the callback now includes the access token and the token as part of the callback url there is no",
    "start": "494400",
    "end": "501759"
  },
  {
    "text": "need for the additional exchange step that was in the code run flow so now the application has the id token",
    "start": "501759",
    "end": "508560"
  },
  {
    "text": "to verify the entity and could use the access token to request additional information",
    "start": "508560",
    "end": "515120"
  },
  {
    "start": "515000",
    "end": "593000"
  },
  {
    "text": "okay if our goal is just having a unified signup experience then there exist other options you could",
    "start": "515360",
    "end": "521518"
  },
  {
    "text": "simply have a shared user tv or a directory service like ldap so the user only has one username and password",
    "start": "521519",
    "end": "528399"
  },
  {
    "text": "shared between all the applications however this might require exposing the directory to the internet",
    "start": "528399",
    "end": "534240"
  },
  {
    "text": "for public applications and if you are using credentials you're not using credentials but the",
    "start": "534240",
    "end": "539600"
  },
  {
    "text": "user needs to re-authenticate on every application so we don't have a real single sign-on",
    "start": "539600",
    "end": "544640"
  },
  {
    "text": "you could also use a hardware-based solutions like smart cards but you need to support that in the",
    "start": "544640",
    "end": "550160"
  },
  {
    "text": "application which is not easy like open id connect there are also other",
    "start": "550160",
    "end": "555360"
  },
  {
    "text": "token-based solutions where you obtain a token which is the proof of identity for example multiple web applications",
    "start": "555360",
    "end": "562560"
  },
  {
    "text": "under the same domain could share a session cookie so you authenticate once and you are locked in all the applications",
    "start": "562560",
    "end": "568720"
  },
  {
    "text": "or kerberos or other ticket granting systems authenticate the user and obtain a token that is later",
    "start": "568720",
    "end": "574399"
  },
  {
    "text": "used as a proof of identity to access additional services facebook connect also known as login",
    "start": "574399",
    "end": "580959"
  },
  {
    "text": "with facebook is very similar to openid connect but it is tied to this company so you must trust facebook",
    "start": "580959",
    "end": "586800"
  },
  {
    "text": "and you might find connectivity restriction in some countries or some environments",
    "start": "586800",
    "end": "592399"
  },
  {
    "start": "593000",
    "end": "623000"
  },
  {
    "text": "security asserted on markup language or xaml is another protocol which serves the same purpose",
    "start": "593600",
    "end": "599519"
  },
  {
    "text": "as openid connect it is older based on soap and xml documents and it is mainly",
    "start": "599519",
    "end": "605200"
  },
  {
    "text": "designed for web applications with a back-end server so it's not well suited for other",
    "start": "605200",
    "end": "610399"
  },
  {
    "text": "application types but apart from that it is still a valid and working standard i can extend more",
    "start": "610399",
    "end": "617760"
  },
  {
    "text": "into the differences you can find some of them in the slide",
    "start": "617760",
    "end": "623040"
  },
  {
    "text": "so open id connect should not be confused with open id 1 and open d2 which are off solid and",
    "start": "624160",
    "end": "631519"
  },
  {
    "text": "predecessor protocols openid started back in 2005 as a protocol to provide identity",
    "start": "631519",
    "end": "638079"
  },
  {
    "text": "certificates and version 2.0 was widely adopted but it is now deprecative",
    "start": "638079",
    "end": "643760"
  },
  {
    "text": "openid connect is the third generation and it dates from 2014 it is much more developer",
    "start": "643760",
    "end": "650959"
  },
  {
    "text": "friendly and broadly used",
    "start": "650959",
    "end": "654640"
  },
  {
    "start": "656000",
    "end": "757000"
  },
  {
    "text": "and how does openid connect compare to oil 2 well openid connect is built on top of",
    "start": "656480",
    "end": "662959"
  },
  {
    "text": "ol2 but old 2 deals with authorization not with authentication",
    "start": "662959",
    "end": "668320"
  },
  {
    "text": "what is the difference for example if stack overflow wants to post in facebook the user",
    "start": "668320",
    "end": "674640"
  },
  {
    "text": "authorizes stack overflow using oauth stack overflow of change and access token",
    "start": "674640",
    "end": "680079"
  },
  {
    "text": "and uses that access token to post using the facebook api that is authorization but if a stack of",
    "start": "680079",
    "end": "687120"
  },
  {
    "text": "flow only allows to comment if your reputation is above above 50 points for example then authorization",
    "start": "687120",
    "end": "694240"
  },
  {
    "text": "in this case is done in the stack overflow but the stack overflow can check the user and can dedicate the authentication to a",
    "start": "694240",
    "end": "701200"
  },
  {
    "text": "provider for example it can ask google to identify the user using oauth2",
    "start": "701200",
    "end": "706480"
  },
  {
    "text": "a stack overflow obtains the access token uses the access token to obtain the user identity for example",
    "start": "706480",
    "end": "712079"
  },
  {
    "text": "the email and with the email it can check the user reputation and authorize the user locally",
    "start": "712079",
    "end": "717600"
  },
  {
    "text": "so all 2 is about getting keys for accessing something value can be",
    "start": "717600",
    "end": "723279"
  },
  {
    "text": "used as a servo authentication mechanism in the sense that if you give me a key to access your",
    "start": "723279",
    "end": "729360"
  },
  {
    "text": "apartment probably you are the apartment owner but the key itself doesn't prove your",
    "start": "729360",
    "end": "734800"
  },
  {
    "text": "identity so in open id the key provides access to a document",
    "start": "734800",
    "end": "740160"
  },
  {
    "text": "certifying your identity by adding the id token and a user info and point to o2",
    "start": "740160",
    "end": "747839"
  },
  {
    "text": "so some people um call this abusing the standard wall to",
    "start": "747839",
    "end": "755760"
  },
  {
    "text": "protocol and how is open id connect related to json web tokens well",
    "start": "756839",
    "end": "762079"
  },
  {
    "start": "757000",
    "end": "776000"
  },
  {
    "text": "open ad connect uses json web tokens as the signed document that contains claims about the",
    "start": "762079",
    "end": "767600"
  },
  {
    "text": "user identity you can use some tools like jwt dot io to the code and verify the tokens as we",
    "start": "767600",
    "end": "775440"
  },
  {
    "text": "will see shortly so why use open id connect mainly",
    "start": "775440",
    "end": "780480"
  },
  {
    "start": "776000",
    "end": "826000"
  },
  {
    "text": "because it is easy reliable secure and lets you get out of the difficult and dangerous business of",
    "start": "780480",
    "end": "785519"
  },
  {
    "text": "story and managing other people's credentials it also makes users lives easier during sign up and",
    "start": "785519",
    "end": "791440"
  },
  {
    "text": "registration some strengths of openid connect are shown in the slide like it is interoperable secure easy to deploy",
    "start": "791440",
    "end": "799680"
  },
  {
    "text": "flexible white support devices and so on so which protocols should you use",
    "start": "799680",
    "end": "805279"
  },
  {
    "text": "probably if you are developing a mobile application or writing a new application you should use",
    "start": "805279",
    "end": "810720"
  },
  {
    "text": "oidc in which cases for example if you have an application which only supports ammo",
    "start": "810720",
    "end": "816160"
  },
  {
    "text": "and the identity provider supports ammo then probably you must must stick with someone no need to",
    "start": "816160",
    "end": "822240"
  },
  {
    "text": "reinvent the wheel in here okay now i'll show you some useful tools",
    "start": "822240",
    "end": "830160"
  },
  {
    "start": "826000",
    "end": "1029000"
  },
  {
    "text": "to help you debug oitc issues on how it works they are listed in here and we will see a",
    "start": "830160",
    "end": "835920"
  },
  {
    "text": "couple of them in the demo and also the browser network console can be very useful to check what is happening or some",
    "start": "835920",
    "end": "842160"
  },
  {
    "text": "command line utilities like for this demo the prerequisite is you need an open id connect provider",
    "start": "842160",
    "end": "848240"
  },
  {
    "text": "where you have a client register you have a client id and a client secret you have allowed the",
    "start": "848240",
    "end": "853839"
  },
  {
    "text": "redirect uris in the provider and then in the client you know the endpoint of the open identity provider",
    "start": "853839",
    "end": "860720"
  },
  {
    "text": "so let's see a demo using openidconnect.net and idc the banner so in this demo",
    "start": "860720",
    "end": "867519"
  },
  {
    "text": "what i have done is i have entered the configuration of an open id provider with the client id client secret and",
    "start": "867519",
    "end": "875440"
  },
  {
    "text": "this shows me the request i'll open the the network console to check what is happening",
    "start": "875440",
    "end": "881519"
  },
  {
    "text": "and when i click start i'm going to send a get request to the op provider which we will see in the",
    "start": "881519",
    "end": "887600"
  },
  {
    "text": "browser and this will trigger the authentication in the open 8d provider so",
    "start": "887600",
    "end": "894320"
  },
  {
    "text": "this was the call to the authenticate endpoint the information the client id and the",
    "start": "894320",
    "end": "900320"
  },
  {
    "text": "parameters are in there now i enter my credentials in the vanity provider",
    "start": "900320",
    "end": "907600"
  },
  {
    "text": "and when i click login i can see there is a callback right the penny the provider is calling",
    "start": "909920",
    "end": "916480"
  },
  {
    "text": "the callback and point the redirect uri providing the authentication code",
    "start": "916480",
    "end": "922399"
  },
  {
    "text": "in there so the next step we are using the authentication code flow in here",
    "start": "922399",
    "end": "928000"
  },
  {
    "text": "is sent a post request from the backend to the the oidc provider to exchange",
    "start": "928000",
    "end": "934560"
  },
  {
    "text": "that code with the id token and the access token so that is the response you can see the",
    "start": "934560",
    "end": "940320"
  },
  {
    "text": "id token so now in the following step you can take that id token",
    "start": "940320",
    "end": "946639"
  },
  {
    "text": "and you can copy it and use a tool yeah like jwt load io you paste the token here",
    "start": "946639",
    "end": "954240"
  },
  {
    "text": "and you can see the code information the signature and so on this tool already does that so if you",
    "start": "954240",
    "end": "960399"
  },
  {
    "text": "just click verify you can see the token is valid and the information this was the code flow now we will check",
    "start": "960399",
    "end": "968399"
  },
  {
    "text": "the implicit flow so using idc divider again i have configured the openid provider in",
    "start": "968399",
    "end": "975199"
  },
  {
    "text": "the credentials in there and now what i'm going to do is in the response type",
    "start": "975199",
    "end": "981279"
  },
  {
    "text": "and removing the code and keeping token and ad token so this is the implicit flow",
    "start": "981279",
    "end": "986399"
  },
  {
    "text": "this is the get request that we will send you see in the response type we have token",
    "start": "986399",
    "end": "991519"
  },
  {
    "text": "blank id token and when we send this we can check in the network console we are going well this time as i was",
    "start": "991519",
    "end": "999360"
  },
  {
    "text": "already logged in in the op provider i didn't didn't ask me for authentication",
    "start": "999360",
    "end": "1004560"
  },
  {
    "text": "you can see the response type in the callback and you can see that the callback now directly includes the id token in the",
    "start": "1004560",
    "end": "1012480"
  },
  {
    "text": "url so the application can directly get the token from the from the url",
    "start": "1012480",
    "end": "1020160"
  },
  {
    "text": "okay and some details of the get request okay this was the demo let me move on",
    "start": "1020639",
    "end": "1029360"
  },
  {
    "start": "1029000",
    "end": "1055000"
  },
  {
    "text": "so open id is a simple protocol open id connect so it can be implemented from scratch",
    "start": "1029360",
    "end": "1035600"
  },
  {
    "text": "but this is useful is not necessary as there are plenty of available libraries some of them certified",
    "start": "1035600",
    "end": "1041520"
  },
  {
    "text": "for implementing relying party clients in multiple languages or to implement different open id connect servers and services",
    "start": "1041520",
    "end": "1048720"
  },
  {
    "text": "let's see a python example using the flask framework",
    "start": "1048720",
    "end": "1053840"
  },
  {
    "start": "1055000",
    "end": "1074000"
  },
  {
    "text": "so i won't go too much into the details but basically we declare some dependencies for flask request",
    "start": "1055039",
    "end": "1060880"
  },
  {
    "text": "and outlive which is the library implementing openid connect and in the server code with some imports",
    "start": "1060880",
    "end": "1066640"
  },
  {
    "text": "and create an out zero object with the client parameters in the code in the right",
    "start": "1066640",
    "end": "1073840"
  },
  {
    "start": "1074000",
    "end": "1106000"
  },
  {
    "text": "we need to handle the callback the callback from the openid provider once the user is authenticated this is",
    "start": "1074400",
    "end": "1080320"
  },
  {
    "text": "what this function does when we that we get the callback we call out zero dot authorized access token",
    "start": "1080320",
    "end": "1087360"
  },
  {
    "text": "which will automatically exchange the receive code with the id token and the access token this library already handles the id",
    "start": "1087360",
    "end": "1094400"
  },
  {
    "text": "token verification and the coding and provides an easy way to access the user info",
    "start": "1094400",
    "end": "1099440"
  },
  {
    "text": "so finally after the callback we redirect the user to the dashboard page",
    "start": "1099440",
    "end": "1105280"
  },
  {
    "text": "we create a login page very simple just a login button",
    "start": "1105280",
    "end": "1110559"
  },
  {
    "start": "1106000",
    "end": "1124000"
  },
  {
    "text": "that takes you to the slash login route which starts the open id connect dance",
    "start": "1110559",
    "end": "1116080"
  },
  {
    "text": "by redirecting the user to the open id provider you can see the view and the controller",
    "start": "1116080",
    "end": "1123760"
  },
  {
    "text": "okay finally our dashboard implementation is just a welcome message in html and the json user information",
    "start": "1123760",
    "end": "1132720"
  },
  {
    "start": "1124000",
    "end": "1151000"
  },
  {
    "text": "printed in row and the dashboard router the dashboard dashboard controller uses",
    "start": "1132720",
    "end": "1137760"
  },
  {
    "text": "the requires out the curator to make sure that the user is locked in or otherwise it redirects it to the",
    "start": "1137760",
    "end": "1144320"
  },
  {
    "text": "login page to the login page so this was a simple application using openld connect",
    "start": "1144320",
    "end": "1150320"
  },
  {
    "text": "really simple now let's move to a real world example nearly all i know about openld connect",
    "start": "1150320",
    "end": "1157200"
  },
  {
    "start": "1151000",
    "end": "1219000"
  },
  {
    "text": "was learn during the migration of a set of tools from this internal data center you see",
    "start": "1157200",
    "end": "1162720"
  },
  {
    "text": "in the diagram the top left to cloud infrastructure previously most of our tools were in an internal data",
    "start": "1162720",
    "end": "1169200"
  },
  {
    "text": "center using ldap authentication against the internal active directory for several reasons we started moving",
    "start": "1169200",
    "end": "1176559"
  },
  {
    "text": "different tools for devops teams to the cloud jenkins hardboard atlas and suite",
    "start": "1176559",
    "end": "1182160"
  },
  {
    "text": "etc exposing the active directory to the internet wasn't not an option so there was an",
    "start": "1182160",
    "end": "1189200"
  },
  {
    "text": "our interactive directory was in sync with an azure active directory in the cloud also used for external",
    "start": "1189200",
    "end": "1195919"
  },
  {
    "text": "applications azure id works as an open id connect provider and we already had several kubernetes",
    "start": "1195919",
    "end": "1202720"
  },
  {
    "text": "clusters running in other cloud providers also using open8d connect with asu also",
    "start": "1202720",
    "end": "1208080"
  },
  {
    "text": "one of our requirement was that all the applications were protected by an application gateway so no api or",
    "start": "1208080",
    "end": "1214559"
  },
  {
    "text": "endpoint is exposed to the internet without authentication",
    "start": "1214559",
    "end": "1220320"
  },
  {
    "start": "1219000",
    "end": "1320000"
  },
  {
    "text": "let's start with the easy ones the application supporting oidc out of the box so kubernetes has an auth",
    "start": "1220320",
    "end": "1227520"
  },
  {
    "text": "plugin you set it in the cube config that allows you to trigger oidc",
    "start": "1227520",
    "end": "1232640"
  },
  {
    "text": "directly from qfctl by opening an url you authenticate in azure and enter a",
    "start": "1232640",
    "end": "1238240"
  },
  {
    "text": "code and that will add the id token to your cubeconfig then the identity verification can be",
    "start": "1238240",
    "end": "1245679"
  },
  {
    "text": "done offline the signed id token in the quick config proves the user authentic identity",
    "start": "1245679",
    "end": "1253039"
  },
  {
    "text": "the id token also includes active directory groups so bindings can be done and for example",
    "start": "1253039",
    "end": "1259039"
  },
  {
    "text": "you can bind namespace permissions per rope hardware also supports oigc out of the box but in the other",
    "start": "1259039",
    "end": "1266159"
  },
  {
    "text": "versions in the time of implementation support was somehow limited this is fixed now",
    "start": "1266159",
    "end": "1271280"
  },
  {
    "text": "for example there was no group claim support now it's configurable a hardware auto onboards users that",
    "start": "1271280",
    "end": "1278960"
  },
  {
    "text": "means that first time a user logs in it is automatically onboarded which is good",
    "start": "1278960",
    "end": "1284000"
  },
  {
    "text": "but the onboarding allows the users to set its username which is bad because that",
    "start": "1284000",
    "end": "1289919"
  },
  {
    "text": "is not homogeneous if you can set and change your own username also the user claim was hardcoded",
    "start": "1289919",
    "end": "1295679"
  },
  {
    "text": "and the username claim in azure active directory did not match the attribute with an active directory but it had the",
    "start": "1295679",
    "end": "1302960"
  },
  {
    "text": "full username which was not good so why work on a pull request to fix the latter issues and now with the latest version you can",
    "start": "1302960",
    "end": "1309520"
  },
  {
    "text": "skip the onboard screen and customize the username play also jenkins and atlassian suite",
    "start": "1309520",
    "end": "1315760"
  },
  {
    "text": "have open id support using different plugins so to prevent exposing all the",
    "start": "1315760",
    "end": "1321840"
  },
  {
    "text": "applications to the internet which might lead to security breaches even if they are if they require",
    "start": "1321840",
    "end": "1327360"
  },
  {
    "text": "internal authentication other requests were processed through an engine source balancer these engines would force open a d connect",
    "start": "1327360",
    "end": "1333919"
  },
  {
    "text": "authentication before allowing any traffic once the user was authenticated and while the engine session cookie was",
    "start": "1333919",
    "end": "1340320"
  },
  {
    "text": "still valid requests were proxy through the course to the corresponding application please notice that both the engines and",
    "start": "1340320",
    "end": "1347039"
  },
  {
    "text": "balancer and the internal application were both authenticating the user but as the user was already locked",
    "start": "1347039",
    "end": "1353440"
  },
  {
    "text": "in the opening connect provider assumed there were just a couple of redirects in the browser",
    "start": "1353440",
    "end": "1358720"
  },
  {
    "text": "and the user could log in seamlessly no need to enter the password or the credentials again the details are complex but basically",
    "start": "1358720",
    "end": "1366000"
  },
  {
    "text": "engine supports oidc in the plus version using out jwt module and some javascript code",
    "start": "1366000",
    "end": "1372320"
  },
  {
    "text": "and a similar implementation exists using lua for the open source version i provide the links",
    "start": "1372320",
    "end": "1377679"
  },
  {
    "text": "in the slide there was an additional challenge in here what happened to connections that were not http",
    "start": "1377679",
    "end": "1383600"
  },
  {
    "text": "they could not use the browser cookies to verify if the user was logged in for these connections like for example",
    "start": "1383600",
    "end": "1389760"
  },
  {
    "text": "ssh git cloning the user ip was listed on successful login on engines",
    "start": "1389760",
    "end": "1395200"
  },
  {
    "text": "allowing the command line tools or similar to work transparently",
    "start": "1395200",
    "end": "1401039"
  },
  {
    "start": "1400000",
    "end": "1449000"
  },
  {
    "text": "and finally what about the tools that did not support openid connect fortunately just a few for example the",
    "start": "1401200",
    "end": "1406480"
  },
  {
    "text": "sona type nexus repository well we have to make some workarounds nexus didn't support ydc but",
    "start": "1406480",
    "end": "1412960"
  },
  {
    "text": "it has an option for removing remote user token headers where the user identity and groups can",
    "start": "1412960",
    "end": "1418400"
  },
  {
    "text": "be provided in the http request headers as sendings is proxy not",
    "start": "1418400",
    "end": "1423600"
  },
  {
    "text": "request to nexus we can fill those headers from the token when proxying the request and what about the use of",
    "start": "1423600",
    "end": "1429679"
  },
  {
    "text": "boarding the user must exist for root headers to work so so when the user does the ydc login",
    "start": "1429679",
    "end": "1435520"
  },
  {
    "text": "in engines we run small script and check via rest api if the user exists",
    "start": "1435520",
    "end": "1440640"
  },
  {
    "text": "if the user does not exist we create the user using the api and then we use the root headers",
    "start": "1440640",
    "end": "1448399"
  },
  {
    "start": "1449000",
    "end": "1551000"
  },
  {
    "text": "other caveats that we found is for example the user migration it's not trivial or even not possible to migrate the user",
    "start": "1449520",
    "end": "1455840"
  },
  {
    "text": "from the all attributes in the active directory to open ap connect not just a matter of permissions which",
    "start": "1455840",
    "end": "1461600"
  },
  {
    "text": "can be automated or scripted but for example in jira and confluence we wanted to preserve the user history",
    "start": "1461600",
    "end": "1467520"
  },
  {
    "text": "and that was not possible also there are the things like non-standard iv token",
    "start": "1467520",
    "end": "1472799"
  },
  {
    "text": "claims depending on the provider some providers might not include some claims like the email",
    "start": "1472799",
    "end": "1477919"
  },
  {
    "text": "we recently had an issue in cystic monitoring secure integrating with an oidc provider because the email was",
    "start": "1477919",
    "end": "1483840"
  },
  {
    "text": "missing also open abs should be done over https public idc providers should have value",
    "start": "1483840",
    "end": "1489679"
  },
  {
    "text": "certificate but if you are building your infrastructure please try to do things right and don't use the",
    "start": "1489679",
    "end": "1495200"
  },
  {
    "text": "sign or invalid certificates also there is another very complex topic that is the single sign",
    "start": "1495200",
    "end": "1500880"
  },
  {
    "text": "off or single log out because session handling is local to the application if you log out of an application or you",
    "start": "1500880",
    "end": "1507919"
  },
  {
    "text": "log out of the open id provider the rest of the applications are not automatically notified",
    "start": "1507919",
    "end": "1513919"
  },
  {
    "text": "so you need to do some tricks to propagate the logout like having an iframe or polling or whatever",
    "start": "1513919",
    "end": "1521679"
  },
  {
    "text": "and what about security well it should be safe and handling credentials more easily and all in one place is good for",
    "start": "1521679",
    "end": "1527360"
  },
  {
    "text": "security but remember if those credentials are leaked multiple tools are being exposed",
    "start": "1527360",
    "end": "1532400"
  },
  {
    "text": "so use additional measures like multi-factor authentication also implicit downflow is not",
    "start": "1532400",
    "end": "1538559"
  },
  {
    "text": "very popular because it has it's complicated that has some issues and now there is a more modern flow the",
    "start": "1538559",
    "end": "1545200"
  },
  {
    "text": "proof key code exchange that can be used for native or mobile applications",
    "start": "1545200",
    "end": "1551360"
  },
  {
    "start": "1551000",
    "end": "1595000"
  },
  {
    "text": "so to finish let's recap the good open ad connect is modern easy to use easy to implement",
    "start": "1551360",
    "end": "1558080"
  },
  {
    "text": "interoperable flexible widely supported and can improve security and make your users happier",
    "start": "1558080",
    "end": "1563279"
  },
  {
    "text": "while reducing health desk incidents the but dedicating credentials management to a single service",
    "start": "1563279",
    "end": "1569039"
  },
  {
    "text": "can raise trust and availability single point of failure issues so take additional measures like high",
    "start": "1569039",
    "end": "1574799"
  },
  {
    "text": "valuability or protect the credentials with multi-factor authentication and the ugly well some implementation",
    "start": "1574799",
    "end": "1581520"
  },
  {
    "text": "and standards are not yet perfect and some applications might not yet support openid connect so you might need",
    "start": "1581520",
    "end": "1587200"
  },
  {
    "text": "to do some hacks and workarounds but we like challenges don't we",
    "start": "1587200",
    "end": "1592640"
  },
  {
    "text": "so thank you very much for assisting this talk and now i'm open for your questions thank you",
    "start": "1592640",
    "end": "1599120"
  },
  {
    "start": "1595000",
    "end": "1840000"
  },
  {
    "text": "very much",
    "start": "1599120",
    "end": "1601520"
  },
  {
    "text": "hello hello ravi i'm alvaro so please you can post our rcs question directly",
    "start": "1604320",
    "end": "1610960"
  },
  {
    "text": "and when the time ends we can follow up on this black channel",
    "start": "1610960",
    "end": "1615520"
  },
  {
    "text": "so there are some very interesting questions for example a mark colert pointed out in",
    "start": "1620720",
    "end": "1627919"
  },
  {
    "text": "in the questions that the implicit flow is deprecated and shouldn't be used anymore that's correct",
    "start": "1627919",
    "end": "1633200"
  },
  {
    "text": "i just showed a couple of examples of typical flows the code flow the first one is a typical one for web applications",
    "start": "1633200",
    "end": "1640159"
  },
  {
    "text": "and the implicit flow is one which could be used for non-web",
    "start": "1640159",
    "end": "1645279"
  },
  {
    "text": "applications for example mobile applications but as i already commented on some slides it has some caveats some",
    "start": "1645279",
    "end": "1651840"
  },
  {
    "text": "security issues so there is an alternative they pick a pkc that is the proof a key",
    "start": "1651840",
    "end": "1658559"
  },
  {
    "text": "uh proof key code exchange it's a different flow where the",
    "start": "1658559",
    "end": "1663840"
  },
  {
    "text": "untrusted application can generate a code and exchange a sent a challenge to the open id provider",
    "start": "1663840",
    "end": "1671520"
  },
  {
    "text": "and then verify its identity without having to to keep a secret like the code flow unfortunately i am",
    "start": "1671520",
    "end": "1678720"
  },
  {
    "text": "not 100 sure if all the itc providers support this flow probably",
    "start": "1678720",
    "end": "1684000"
  },
  {
    "text": "also there are other flaws as some other people commented in the questions like the client flow",
    "start": "1684000",
    "end": "1689520"
  },
  {
    "text": "that is intended to directly authenticate back-end applications with open-aid providers without interacting",
    "start": "1689520",
    "end": "1695840"
  },
  {
    "text": "with the users and also there is there are other a grant types like for example supported",
    "start": "1695840",
    "end": "1703120"
  },
  {
    "text": "directly by oauth not biopenet like you can provide",
    "start": "1703120",
    "end": "1708240"
  },
  {
    "text": "the directly the user and password to the identity provider in the request in the request that is",
    "start": "1708240",
    "end": "1714799"
  },
  {
    "text": "sent from the backend so in that case for example you could omit or",
    "start": "1714799",
    "end": "1721120"
  },
  {
    "text": "don't require the redirect from the user to the identity provider and ask the password but",
    "start": "1721120",
    "end": "1727440"
  },
  {
    "text": "this is not safe as you you have to trust the application to",
    "start": "1727440",
    "end": "1732799"
  },
  {
    "text": "keep the the user a password right the point of open id is to delegate the authentication",
    "start": "1732799",
    "end": "1738480"
  },
  {
    "text": "completely to a third party provider so another question is well someone",
    "start": "1738480",
    "end": "1745919"
  },
  {
    "text": "noticed that his provider his provider is not sending the role and other necessary",
    "start": "1745919",
    "end": "1752480"
  },
  {
    "text": "details in the token claims well this is unfortunately one of the problems uh",
    "start": "1752480",
    "end": "1757840"
  },
  {
    "text": "i found there is not any standard of what are the claims that should be sent in the id token some providers might",
    "start": "1757840",
    "end": "1764799"
  },
  {
    "text": "include the groups or the roles or they're not and probably you can dig into your provider configuration",
    "start": "1764799",
    "end": "1770640"
  },
  {
    "text": "and do some tuning in there to get the required claims but sometimes it's really not not possible",
    "start": "1770640",
    "end": "1778240"
  },
  {
    "text": "at all okay some other interesting questions for example",
    "start": "1778240",
    "end": "1784320"
  },
  {
    "text": "someone is asking how can i automate the testing of the authentication flow well it depends what you want to",
    "start": "1784480",
    "end": "1791039"
  },
  {
    "text": "automate as far as i understand you trust on the openid provider and if",
    "start": "1791039",
    "end": "1797360"
  },
  {
    "text": "what you want to check is that the behavior of your client application is correct",
    "start": "1797360",
    "end": "1803120"
  },
  {
    "text": "then you can try a mock open id provider and just do some automatic testing some",
    "start": "1803120",
    "end": "1809919"
  },
  {
    "text": "unit testing or whatever to verify that your application is sending the request correctly",
    "start": "1809919",
    "end": "1815200"
  },
  {
    "text": "handing the callback and receiving the id token and doing the the corresponding verification",
    "start": "1815200",
    "end": "1822720"
  },
  {
    "text": "and so also another question was why the auth token and the id token",
    "start": "1822720",
    "end": "1830240"
  },
  {
    "text": "are different well i i guess in here you mean the and well let me",
    "start": "1830240",
    "end": "1838240"
  },
  {
    "text": "let me read the question okay so really um wealth is about um",
    "start": "1838240",
    "end": "1845679"
  },
  {
    "start": "1840000",
    "end": "2139000"
  },
  {
    "text": "authorization nothing not authentication so usually using the wow they forget about open id what you",
    "start": "1845679",
    "end": "1852399"
  },
  {
    "text": "get is a pack opaque token a which just is just a key that you handle",
    "start": "1852399",
    "end": "1860000"
  },
  {
    "text": "to a third-party resource server to access some api or whatever the difference with the id",
    "start": "1860000",
    "end": "1867120"
  },
  {
    "text": "token is that open id adds an extra layer an extension over out so by specifying",
    "start": "1867120",
    "end": "1874320"
  },
  {
    "text": "the open id a scope parameter in the in the out step you also get the id",
    "start": "1874320",
    "end": "1881440"
  },
  {
    "text": "token and the id token has meaning it is a json web token",
    "start": "1881440",
    "end": "1886559"
  },
  {
    "text": "where you can find the user information and a signature so you can verify so probably the id token",
    "start": "1886559",
    "end": "1893440"
  },
  {
    "text": "can be used as the auth access token i mean as an opel or opaque token but they are different",
    "start": "1893440",
    "end": "1900720"
  },
  {
    "text": "right so uh well let me check how to use oidc with a",
    "start": "1900720",
    "end": "1908240"
  },
  {
    "text": "trusted party in such a way that it will not require so many redirects for application it is a problem with",
    "start": "1908240",
    "end": "1914799"
  },
  {
    "text": "user experience as there are three redirects right as i talked before the point is you are delegating",
    "start": "1914799",
    "end": "1920559"
  },
  {
    "text": "authentication so you have to be redirected to the authentication provider so the open id provider authenticates",
    "start": "1920559",
    "end": "1928320"
  },
  {
    "text": "the user and gets back to you you could use probably you could collect the username and password or",
    "start": "1928320",
    "end": "1936399"
  },
  {
    "text": "from your application and they already provided to the openid provider using the the password run type",
    "start": "1936399",
    "end": "1944000"
  },
  {
    "text": "but this is not recommended because the point of open id is getting rid of the responsibility of of",
    "start": "1944000",
    "end": "1950320"
  },
  {
    "text": "having to collect and and managing the user and passwords okay let me check some new questions we have",
    "start": "1950320",
    "end": "1956640"
  },
  {
    "text": "in here we are planning to use azure active directory and on-prem",
    "start": "1956640",
    "end": "1961679"
  },
  {
    "text": "kubernetes cluster is the logout supported on kubernetes dashboard uh i really don't know i know that azure",
    "start": "1961679",
    "end": "1968720"
  },
  {
    "text": "id has has a logout endpoint so probably you could do something on your",
    "start": "1968720",
    "end": "1975120"
  },
  {
    "text": "kubernetes dashboard so when you log out on the kubernetes dashboard it just already directs the user to the logout",
    "start": "1975120",
    "end": "1980880"
  },
  {
    "text": "endpoint of the openid provider and that could log out the user also but",
    "start": "1980880",
    "end": "1986240"
  },
  {
    "text": "a logout is really tricky because you know you can log out from one application you",
    "start": "1986240",
    "end": "1991919"
  },
  {
    "text": "can log out from the open id provider so in case the the user is redirected to the provider",
    "start": "1991919",
    "end": "1998399"
  },
  {
    "text": "it gets asks for the credentials again for authentication again but it is not easy to have a global log",
    "start": "1998399",
    "end": "2005360"
  },
  {
    "text": "out uh because all the applications that are already locked in i mean they only delegate the",
    "start": "2005360",
    "end": "2011039"
  },
  {
    "text": "authentication of the user a decision management is managed by every individual application so in order",
    "start": "2011039",
    "end": "2018159"
  },
  {
    "text": "to have a global logout uh you will need to coordinate all the applications first to log out from the provider when you",
    "start": "2018159",
    "end": "2024880"
  },
  {
    "text": "log out from the application and then you could need some kind of polling or notification mechanism",
    "start": "2024880",
    "end": "2030320"
  },
  {
    "text": "so every application gets a notification or is aware that the user uh locked out",
    "start": "2030320",
    "end": "2037519"
  },
  {
    "text": "uh okay so what do you think about kick cloak for implementing oidc",
    "start": "2037519",
    "end": "2043120"
  },
  {
    "text": "er i haven't tested it thoughtfully but from what i know it works correctly",
    "start": "2043120",
    "end": "2049599"
  },
  {
    "text": "i mean it implements all the basic flows and everything so it's a good ydc provider so",
    "start": "2049599",
    "end": "2056960"
  },
  {
    "text": "how useful idc for matching machine to machine authentication for that you have the",
    "start": "2056960",
    "end": "2062320"
  },
  {
    "text": "client flow uh probably if you just google open id client flow there is a flow i just showed a couple",
    "start": "2062320",
    "end": "2068960"
  },
  {
    "text": "of them there are others like the hybrid the pixie the pk etc but the client",
    "start": "2068960",
    "end": "2074800"
  },
  {
    "text": "client flow allows that ready to the backend to talk to the provider and perform the the user authentication",
    "start": "2074800",
    "end": "2082158"
  },
  {
    "text": "and okay let me check if i am missing anything",
    "start": "2082159",
    "end": "2089839"
  },
  {
    "text": "okay someone asked identity brokering through token exchange is that not recommended but",
    "start": "2094320",
    "end": "2100079"
  },
  {
    "text": "i don't understand the question maybe if you can elaborate more or or we can follow up on the on the",
    "start": "2100079",
    "end": "2105920"
  },
  {
    "text": "channel on the slack channel because i don't really get what you mean in here",
    "start": "2105920",
    "end": "2113200"
  },
  {
    "text": "okay so i think that's all uh all the questions are covered let me",
    "start": "2114880",
    "end": "2120640"
  },
  {
    "text": "check oh there is a second page in here sorry image there was a second page but i don't know if we are out of",
    "start": "2120640",
    "end": "2127599"
  },
  {
    "text": "we are out of time right so maybe we can follow up on the slack channel please post just put your questions in here and",
    "start": "2127599",
    "end": "2134480"
  },
  {
    "text": "i'll be glad to try to to help you thank you very much everyone",
    "start": "2134480",
    "end": "2141839"
  }
]