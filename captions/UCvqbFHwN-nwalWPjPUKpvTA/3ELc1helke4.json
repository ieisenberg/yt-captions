[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "in this video we're going to talk about",
    "start": "719",
    "end": "2800"
  },
  {
    "text": "fluent bit which is a locks and metrics",
    "start": "2800",
    "end": "5680"
  },
  {
    "text": "processor tool as you know all",
    "start": "5680",
    "end": "8480"
  },
  {
    "text": "applications",
    "start": "8480",
    "end": "9440"
  },
  {
    "text": "need logging and the main use case for",
    "start": "9440",
    "end": "11759"
  },
  {
    "text": "logging is",
    "start": "11759",
    "end": "12719"
  },
  {
    "text": "data analysis something breaks in the",
    "start": "12719",
    "end": "14960"
  },
  {
    "text": "application you check the logs to see",
    "start": "14960",
    "end": "17119"
  },
  {
    "text": "what caused the error",
    "start": "17119",
    "end": "18560"
  },
  {
    "text": "or you're trying to reproduce a bug and",
    "start": "18560",
    "end": "21119"
  },
  {
    "text": "by looking at the application logs",
    "start": "21119",
    "end": "23039"
  },
  {
    "text": "you can understand what happened or",
    "start": "23039",
    "end": "25199"
  },
  {
    "text": "simply to have an",
    "start": "25199",
    "end": "26160"
  },
  {
    "text": "overview of what your application is",
    "start": "26160",
    "end": "28160"
  },
  {
    "text": "doing",
    "start": "28160",
    "end": "29279"
  },
  {
    "text": "logs can come from different places logs",
    "start": "29279",
    "end": "32000"
  },
  {
    "text": "are produced by",
    "start": "32000",
    "end": "33120"
  },
  {
    "text": "applications but also server processes",
    "start": "33120",
    "end": "36079"
  },
  {
    "text": "and so on",
    "start": "36079",
    "end": "36960"
  },
  {
    "text": "so you have different sources of logs",
    "start": "36960",
    "end": "39760"
  },
  {
    "text": "and fluent bid",
    "start": "39760",
    "end": "40879"
  },
  {
    "text": "is actually a general purpose log",
    "start": "40879",
    "end": "43600"
  },
  {
    "text": "processor",
    "start": "43600",
    "end": "44559"
  },
  {
    "text": "meaning it can read and process logs",
    "start": "44559",
    "end": "46879"
  },
  {
    "text": "from all these different sources",
    "start": "46879",
    "end": "49200"
  },
  {
    "text": "but note that in addition to collecting",
    "start": "49200",
    "end": "51600"
  },
  {
    "text": "logs",
    "start": "51600",
    "end": "52239"
  },
  {
    "text": "fluent bit also has metrics collection",
    "start": "52239",
    "end": "55440"
  },
  {
    "text": "capabilities",
    "start": "55440",
    "end": "56559"
  },
  {
    "text": "for embedded linux systems for example",
    "start": "56559",
    "end": "59199"
  },
  {
    "text": "it can gather metrics on cpu",
    "start": "59199",
    "end": "61840"
  },
  {
    "text": "memory storage etc and because",
    "start": "61840",
    "end": "64960"
  },
  {
    "text": "its general purpose fluent bit can be",
    "start": "64960",
    "end": "67600"
  },
  {
    "text": "deployed on any environment",
    "start": "67600",
    "end": "69360"
  },
  {
    "text": "like bare metal servers virtual machines",
    "start": "69360",
    "end": "72240"
  },
  {
    "text": "embedded devices",
    "start": "72240",
    "end": "73600"
  },
  {
    "text": "and containers however fluent bit is",
    "start": "73600",
    "end": "76720"
  },
  {
    "text": "used the most for processing logs in",
    "start": "76720",
    "end": "80320"
  },
  {
    "text": "kubernetes clusters now the challenge of",
    "start": "80320",
    "end": "83040"
  },
  {
    "start": "83000",
    "end": "83000"
  },
  {
    "text": "logging",
    "start": "83040",
    "end": "83600"
  },
  {
    "text": "in complex environments like kubernetes",
    "start": "83600",
    "end": "86000"
  },
  {
    "text": "is that you have",
    "start": "86000",
    "end": "86880"
  },
  {
    "text": "many different applications which",
    "start": "86880",
    "end": "89040"
  },
  {
    "text": "produce logs in different formats",
    "start": "89040",
    "end": "91520"
  },
  {
    "text": "each application is running in",
    "start": "91520",
    "end": "93680"
  },
  {
    "text": "containers",
    "start": "93680",
    "end": "94880"
  },
  {
    "text": "which run in pods which then run on",
    "start": "94880",
    "end": "97759"
  },
  {
    "text": "kubernetes nodes",
    "start": "97759",
    "end": "99200"
  },
  {
    "text": "so in addition to the log message and",
    "start": "99200",
    "end": "101520"
  },
  {
    "text": "the application name itself",
    "start": "101520",
    "end": "103119"
  },
  {
    "text": "we have all this additional information",
    "start": "103119",
    "end": "104960"
  },
  {
    "text": "about where the log",
    "start": "104960",
    "end": "106560"
  },
  {
    "text": "is coming from so if you have five",
    "start": "106560",
    "end": "109280"
  },
  {
    "text": "replicas of the same application",
    "start": "109280",
    "end": "111439"
  },
  {
    "text": "you want to know which pod replica on",
    "start": "111439",
    "end": "113759"
  },
  {
    "text": "which node",
    "start": "113759",
    "end": "114880"
  },
  {
    "text": "produced this log this means the",
    "start": "114880",
    "end": "117280"
  },
  {
    "text": "challenge is to collect these data from",
    "start": "117280",
    "end": "119520"
  },
  {
    "text": "different sources",
    "start": "119520",
    "end": "120880"
  },
  {
    "text": "and then process it like parse all the",
    "start": "120880",
    "end": "123280"
  },
  {
    "text": "values",
    "start": "123280",
    "end": "124079"
  },
  {
    "text": "and identify where they are coming from",
    "start": "124079",
    "end": "127040"
  },
  {
    "text": "as well as",
    "start": "127040",
    "end": "128080"
  },
  {
    "text": "what the actual log contents are and",
    "start": "128080",
    "end": "130879"
  },
  {
    "text": "parse them in key value pairs",
    "start": "130879",
    "end": "133360"
  },
  {
    "text": "so that they can eventually be stored in",
    "start": "133360",
    "end": "135599"
  },
  {
    "text": "elastic or kafka",
    "start": "135599",
    "end": "137360"
  },
  {
    "text": "so that finally we can see the logs and",
    "start": "137360",
    "end": "139680"
  },
  {
    "text": "do data analysis on them so as you see",
    "start": "139680",
    "end": "142959"
  },
  {
    "text": "the log processor has a very important",
    "start": "142959",
    "end": "145360"
  },
  {
    "text": "but also",
    "start": "145360",
    "end": "146160"
  },
  {
    "text": "challenging job now processing the data",
    "start": "146160",
    "end": "148879"
  },
  {
    "text": "of course needs",
    "start": "148879",
    "end": "150000"
  },
  {
    "text": "resources the log processor needs enough",
    "start": "150000",
    "end": "152640"
  },
  {
    "text": "memory",
    "start": "152640",
    "end": "153519"
  },
  {
    "text": "storage and cpu resources to collect the",
    "start": "153519",
    "end": "156400"
  },
  {
    "text": "logs",
    "start": "156400",
    "end": "157040"
  },
  {
    "text": "then parse the logs and filter them and",
    "start": "157040",
    "end": "159599"
  },
  {
    "text": "this should all be done",
    "start": "159599",
    "end": "160800"
  },
  {
    "text": "as a background task right it shouldn't",
    "start": "160800",
    "end": "163280"
  },
  {
    "text": "interfere with your main application's",
    "start": "163280",
    "end": "165280"
  },
  {
    "text": "performance",
    "start": "165280",
    "end": "166160"
  },
  {
    "text": "because then we have compromised the",
    "start": "166160",
    "end": "168720"
  },
  {
    "text": "speed and performance of our application",
    "start": "168720",
    "end": "171120"
  },
  {
    "text": "for a proper logging mechanism and of",
    "start": "171120",
    "end": "174000"
  },
  {
    "text": "course the requirement for resources",
    "start": "174000",
    "end": "176080"
  },
  {
    "text": "increases when you have applications",
    "start": "176080",
    "end": "178400"
  },
  {
    "text": "with high throughput",
    "start": "178400",
    "end": "179920"
  },
  {
    "text": "meaning producing high amounts of locks",
    "start": "179920",
    "end": "182800"
  },
  {
    "text": "so",
    "start": "182800",
    "end": "183200"
  },
  {
    "text": "as you see the log processor not only",
    "start": "183200",
    "end": "185599"
  },
  {
    "start": "185000",
    "end": "185000"
  },
  {
    "text": "needs to collect and process",
    "start": "185599",
    "end": "187280"
  },
  {
    "text": "logs but it needs to do it in a",
    "start": "187280",
    "end": "189760"
  },
  {
    "text": "performant",
    "start": "189760",
    "end": "190560"
  },
  {
    "text": "and resource efficient way so we need a",
    "start": "190560",
    "end": "193519"
  },
  {
    "text": "lightweight",
    "start": "193519",
    "end": "194239"
  },
  {
    "text": "and high performance log processor and",
    "start": "194239",
    "end": "197120"
  },
  {
    "text": "one of the most popular ones today",
    "start": "197120",
    "end": "199440"
  },
  {
    "text": "happens to be fluent bit so how does",
    "start": "199440",
    "end": "202400"
  },
  {
    "text": "fluent beat",
    "start": "202400",
    "end": "203599"
  },
  {
    "start": "203000",
    "end": "203000"
  },
  {
    "text": "work fluent bit uses input plugins to",
    "start": "203599",
    "end": "207120"
  },
  {
    "text": "read the logs from the data sources",
    "start": "207120",
    "end": "209519"
  },
  {
    "text": "for example if you need to read log",
    "start": "209519",
    "end": "211599"
  },
  {
    "text": "files you need a plugin to read",
    "start": "211599",
    "end": "213760"
  },
  {
    "text": "from log files if you're going to",
    "start": "213760",
    "end": "216000"
  },
  {
    "text": "receive messages over tcp",
    "start": "216000",
    "end": "218239"
  },
  {
    "text": "you need an input plugin that listens",
    "start": "218239",
    "end": "220480"
  },
  {
    "text": "for messages over tcp",
    "start": "220480",
    "end": "222640"
  },
  {
    "text": "and as mentioned at the beginning fluent",
    "start": "222640",
    "end": "225120"
  },
  {
    "text": "bit supports",
    "start": "225120",
    "end": "226239"
  },
  {
    "text": "many different input sources fluent bit",
    "start": "226239",
    "end": "228879"
  },
  {
    "text": "also has",
    "start": "228879",
    "end": "229519"
  },
  {
    "text": "input plugins for metrics data",
    "start": "229519",
    "end": "231440"
  },
  {
    "text": "collection for example",
    "start": "231440",
    "end": "233120"
  },
  {
    "text": "it supports statsd and collect the input",
    "start": "233120",
    "end": "236080"
  },
  {
    "text": "plugins",
    "start": "236080",
    "end": "236720"
  },
  {
    "text": "but also supports collecting metrics on",
    "start": "236720",
    "end": "239120"
  },
  {
    "text": "the host systems",
    "start": "239120",
    "end": "240560"
  },
  {
    "text": "cpu memory and disk once",
    "start": "240560",
    "end": "243760"
  },
  {
    "text": "logs are collected and read fluent beat",
    "start": "243760",
    "end": "246560"
  },
  {
    "text": "will process them",
    "start": "246560",
    "end": "247680"
  },
  {
    "text": "and of course depending on the log",
    "start": "247680",
    "end": "249519"
  },
  {
    "text": "format we would need to parse them",
    "start": "249519",
    "end": "251519"
  },
  {
    "text": "differently",
    "start": "251519",
    "end": "252239"
  },
  {
    "text": "for that fluent beat has different",
    "start": "252239",
    "end": "254560"
  },
  {
    "text": "filters",
    "start": "254560",
    "end": "255360"
  },
  {
    "text": "and parsers filters can be used to",
    "start": "255360",
    "end": "258079"
  },
  {
    "text": "change the log",
    "start": "258079",
    "end": "259440"
  },
  {
    "text": "record or even add some additional",
    "start": "259440",
    "end": "262000"
  },
  {
    "text": "metadata to it",
    "start": "262000",
    "end": "263120"
  },
  {
    "text": "like pod id or namespace where the log",
    "start": "263120",
    "end": "265840"
  },
  {
    "text": "is coming from and so on",
    "start": "265840",
    "end": "267600"
  },
  {
    "text": "you can also use filters to drop or",
    "start": "267600",
    "end": "269919"
  },
  {
    "text": "ignore some records",
    "start": "269919",
    "end": "271280"
  },
  {
    "text": "to make the filtering even more flexible",
    "start": "271280",
    "end": "273680"
  },
  {
    "text": "in fluent bits",
    "start": "273680",
    "end": "274800"
  },
  {
    "text": "you can use custom lua scripts",
    "start": "274800",
    "end": "277840"
  },
  {
    "text": "as filters to modify and process the",
    "start": "277840",
    "end": "280840"
  },
  {
    "text": "records in addition to all of these",
    "start": "280840",
    "end": "283520"
  },
  {
    "text": "one unique advanced feature that fluent",
    "start": "283520",
    "end": "286160"
  },
  {
    "text": "bit has",
    "start": "286160",
    "end": "286800"
  },
  {
    "text": "is sql stream processing this allows",
    "start": "286800",
    "end": "290320"
  },
  {
    "text": "users to write sql queries",
    "start": "290320",
    "end": "292400"
  },
  {
    "text": "on the logs or metrics to do",
    "start": "292400",
    "end": "295040"
  },
  {
    "text": "aggregations",
    "start": "295040",
    "end": "296320"
  },
  {
    "text": "calculations even time series",
    "start": "296320",
    "end": "298320"
  },
  {
    "text": "predictions",
    "start": "298320",
    "end": "299520"
  },
  {
    "text": "this is super useful if you need to",
    "start": "299520",
    "end": "301280"
  },
  {
    "text": "calculate an average",
    "start": "301280",
    "end": "302720"
  },
  {
    "text": "max or min before sending the data",
    "start": "302720",
    "end": "305759"
  },
  {
    "text": "to the storage or count the number of",
    "start": "305759",
    "end": "308080"
  },
  {
    "text": "times a message",
    "start": "308080",
    "end": "309039"
  },
  {
    "text": "appears or aggregate data to reduce data",
    "start": "309039",
    "end": "312320"
  },
  {
    "text": "costs",
    "start": "312320",
    "end": "313120"
  },
  {
    "text": "the best part about the sql stream",
    "start": "313120",
    "end": "315039"
  },
  {
    "text": "processing is that",
    "start": "315039",
    "end": "316240"
  },
  {
    "text": "no database is required and no indices",
    "start": "316240",
    "end": "319039"
  },
  {
    "text": "are required",
    "start": "319039",
    "end": "319919"
  },
  {
    "text": "everything runs on the same lightweight",
    "start": "319919",
    "end": "322880"
  },
  {
    "text": "high performance process",
    "start": "322880",
    "end": "324800"
  },
  {
    "text": "so you still keep that high performance",
    "start": "324800",
    "end": "326880"
  },
  {
    "text": "and resource efficiency of fluent bit",
    "start": "326880",
    "end": "329680"
  },
  {
    "text": "after the logs are processed fluent beat",
    "start": "329680",
    "end": "332320"
  },
  {
    "text": "will send them to a storage",
    "start": "332320",
    "end": "334560"
  },
  {
    "text": "like elasticsearch or splunk where you",
    "start": "334560",
    "end": "337199"
  },
  {
    "text": "can then see the logs in a nice",
    "start": "337199",
    "end": "339360"
  },
  {
    "text": "visualized format again fluent bits",
    "start": "339360",
    "end": "342320"
  },
  {
    "text": "supports",
    "start": "342320",
    "end": "342960"
  },
  {
    "text": "many different storage backends and to",
    "start": "342960",
    "end": "345680"
  },
  {
    "text": "send the logs to the storage backhands",
    "start": "345680",
    "end": "347919"
  },
  {
    "text": "fluidbit uses output plugins so",
    "start": "347919",
    "end": "351440"
  },
  {
    "text": "basically the input plugin knows how to",
    "start": "351440",
    "end": "353919"
  },
  {
    "text": "transform the data of a specific format",
    "start": "353919",
    "end": "356720"
  },
  {
    "text": "to what fluent bit can read and process",
    "start": "356720",
    "end": "359280"
  },
  {
    "text": "so for example",
    "start": "359280",
    "end": "360479"
  },
  {
    "text": "tcp input plugin knows how to parse",
    "start": "360479",
    "end": "363600"
  },
  {
    "text": "tcp data into fluent bit data an",
    "start": "363600",
    "end": "366800"
  },
  {
    "text": "output plugin knows how to transform the",
    "start": "366800",
    "end": "369120"
  },
  {
    "text": "fluent bit data into what the",
    "start": "369120",
    "end": "370720"
  },
  {
    "text": "output target understands so",
    "start": "370720",
    "end": "373120"
  },
  {
    "text": "elasticsearch output plugin knows how to",
    "start": "373120",
    "end": "375680"
  },
  {
    "text": "translate the fluent bit data",
    "start": "375680",
    "end": "377600"
  },
  {
    "text": "into the format which elasticsearch can",
    "start": "377600",
    "end": "380560"
  },
  {
    "text": "read and save",
    "start": "380560",
    "end": "382080"
  },
  {
    "text": "and in fluent bit you can send logs from",
    "start": "382080",
    "end": "384400"
  },
  {
    "start": "383000",
    "end": "383000"
  },
  {
    "text": "multiple",
    "start": "384400",
    "end": "385280"
  },
  {
    "text": "input sources to multiple output",
    "start": "385280",
    "end": "388160"
  },
  {
    "text": "destinations",
    "start": "388160",
    "end": "389199"
  },
  {
    "text": "you can do this log routing pretty",
    "start": "389199",
    "end": "391120"
  },
  {
    "text": "easily using tags",
    "start": "391120",
    "end": "392560"
  },
  {
    "text": "you can add text to logs and then group",
    "start": "392560",
    "end": "395520"
  },
  {
    "text": "them",
    "start": "395520",
    "end": "396160"
  },
  {
    "text": "so that you can say parse all the logs",
    "start": "396160",
    "end": "398560"
  },
  {
    "text": "with a tag that starts with",
    "start": "398560",
    "end": "400240"
  },
  {
    "text": "apache with this parser or",
    "start": "400240",
    "end": "403520"
  },
  {
    "text": "send all the logs that match nginx to",
    "start": "403520",
    "end": "406400"
  },
  {
    "text": "elasticsearch",
    "start": "406400",
    "end": "407759"
  },
  {
    "text": "now how does fluent beat actually run in",
    "start": "407759",
    "end": "410639"
  },
  {
    "start": "409000",
    "end": "409000"
  },
  {
    "text": "a kubernetes cluster",
    "start": "410639",
    "end": "412319"
  },
  {
    "text": "fluent bit gets deployed as a daemon set",
    "start": "412319",
    "end": "415520"
  },
  {
    "text": "which means it will run on every",
    "start": "415520",
    "end": "417919"
  },
  {
    "text": "kubernetes node",
    "start": "417919",
    "end": "419280"
  },
  {
    "text": "so when a new node gets added to the",
    "start": "419280",
    "end": "421440"
  },
  {
    "text": "cluster a fluent bit",
    "start": "421440",
    "end": "423039"
  },
  {
    "text": "pod will start there immediately so on",
    "start": "423039",
    "end": "426240"
  },
  {
    "text": "each node",
    "start": "426240",
    "end": "427039"
  },
  {
    "text": "fluent bit will gather logs from all the",
    "start": "427039",
    "end": "429599"
  },
  {
    "text": "containers on that node",
    "start": "429599",
    "end": "431440"
  },
  {
    "text": "in addition it will gather metadata for",
    "start": "431440",
    "end": "433840"
  },
  {
    "text": "those logs like",
    "start": "433840",
    "end": "435199"
  },
  {
    "text": "pod ip container ip name space",
    "start": "435199",
    "end": "438560"
  },
  {
    "text": "and so on from the kubernetes api a cool",
    "start": "438560",
    "end": "441919"
  },
  {
    "text": "feature of fluent bit is that we can",
    "start": "441919",
    "end": "443919"
  },
  {
    "start": "443000",
    "end": "443000"
  },
  {
    "text": "suggest",
    "start": "443919",
    "end": "444960"
  },
  {
    "text": "which parsers to be used on pods using",
    "start": "444960",
    "end": "448319"
  },
  {
    "text": "annotations in kubernetes configuration",
    "start": "448319",
    "end": "450960"
  },
  {
    "text": "files",
    "start": "450960",
    "end": "452000"
  },
  {
    "text": "some other advantages of fluent bit are",
    "start": "452000",
    "end": "454560"
  },
  {
    "text": "that it has a pluggable",
    "start": "454560",
    "end": "456000"
  },
  {
    "text": "architecture as a log collector it",
    "start": "456000",
    "end": "458400"
  },
  {
    "text": "doesn't try to replace the data sources",
    "start": "458400",
    "end": "461280"
  },
  {
    "text": "like systemd or journal d instead the",
    "start": "461280",
    "end": "464160"
  },
  {
    "text": "goal is to",
    "start": "464160",
    "end": "465120"
  },
  {
    "text": "integrate with different data sources",
    "start": "465120",
    "end": "467759"
  },
  {
    "text": "and to do that",
    "start": "467759",
    "end": "468960"
  },
  {
    "text": "fluent bit needs to be able to talk to",
    "start": "468960",
    "end": "471120"
  },
  {
    "text": "tcp",
    "start": "471120",
    "end": "472000"
  },
  {
    "text": "read logs from a file system talk to",
    "start": "472000",
    "end": "474639"
  },
  {
    "text": "systemd",
    "start": "474639",
    "end": "475280"
  },
  {
    "text": "api etc it also has built-in security",
    "start": "475280",
    "end": "479039"
  },
  {
    "text": "because when you are sending logs from",
    "start": "479039",
    "end": "480720"
  },
  {
    "text": "the cluster out to the storage back-ends",
    "start": "480720",
    "end": "483680"
  },
  {
    "text": "you are talking to third-party services",
    "start": "483680",
    "end": "485919"
  },
  {
    "text": "outside your cluster",
    "start": "485919",
    "end": "487199"
  },
  {
    "text": "so of course you don't want your logs to",
    "start": "487199",
    "end": "488800"
  },
  {
    "text": "be sent in plain text",
    "start": "488800",
    "end": "490560"
  },
  {
    "text": "you want to use https or tls for that",
    "start": "490560",
    "end": "493759"
  },
  {
    "text": "connection",
    "start": "493759",
    "end": "494800"
  },
  {
    "text": "and it has a simple architecture which",
    "start": "494800",
    "end": "496800"
  },
  {
    "text": "makes it easy to scale",
    "start": "496800",
    "end": "498560"
  },
  {
    "text": "fluent bit on hundreds of servers",
    "start": "498560",
    "end": "501360"
  },
  {
    "text": "because as i mentioned",
    "start": "501360",
    "end": "502639"
  },
  {
    "text": "fluent beat will run on each node in the",
    "start": "502639",
    "end": "505520"
  },
  {
    "text": "cluster",
    "start": "505520",
    "end": "506639"
  },
  {
    "text": "now fluent bit works in a very similar",
    "start": "506639",
    "end": "509039"
  },
  {
    "start": "509000",
    "end": "509000"
  },
  {
    "text": "way as",
    "start": "509039",
    "end": "509680"
  },
  {
    "text": "fluentd which is another log processor",
    "start": "509680",
    "end": "512240"
  },
  {
    "text": "from the same company",
    "start": "512240",
    "end": "513599"
  },
  {
    "text": "so if you know fluentd you may be asking",
    "start": "513599",
    "end": "516320"
  },
  {
    "text": "what is the difference between these two",
    "start": "516320",
    "end": "518080"
  },
  {
    "text": "if they work the same way which one",
    "start": "518080",
    "end": "519839"
  },
  {
    "text": "should i use in which case",
    "start": "519839",
    "end": "521919"
  },
  {
    "text": "first of all fluent beat is much more",
    "start": "521919",
    "end": "524320"
  },
  {
    "text": "lightweight than fluentd",
    "start": "524320",
    "end": "526160"
  },
  {
    "text": "which means it's highly optimized for",
    "start": "526160",
    "end": "528560"
  },
  {
    "text": "performance",
    "start": "528560",
    "end": "529760"
  },
  {
    "text": "and low resource consumption compared to",
    "start": "529760",
    "end": "532080"
  },
  {
    "text": "fluentd",
    "start": "532080",
    "end": "533120"
  },
  {
    "text": "and as i mentioned at the beginning if",
    "start": "533120",
    "end": "535200"
  },
  {
    "text": "you have a complex application",
    "start": "535200",
    "end": "536880"
  },
  {
    "text": "setup which generates a lot of logs you",
    "start": "536880",
    "end": "539680"
  },
  {
    "text": "want your log collector to work",
    "start": "539680",
    "end": "541680"
  },
  {
    "text": "efficiently so fluent bit is designed to",
    "start": "541680",
    "end": "544640"
  },
  {
    "text": "run",
    "start": "544640",
    "end": "545040"
  },
  {
    "text": "at high scale with low resource usage",
    "start": "545040",
    "end": "548640"
  },
  {
    "text": "and it's actually the preferred solution",
    "start": "548640",
    "end": "550720"
  },
  {
    "text": "for containerized environments",
    "start": "550720",
    "end": "552959"
  },
  {
    "text": "however fluent beats follows the similar",
    "start": "552959",
    "end": "555519"
  },
  {
    "text": "philosophy",
    "start": "555519",
    "end": "556399"
  },
  {
    "text": "as fluentd as a log processor but also",
    "start": "556399",
    "end": "559920"
  },
  {
    "text": "as a matrix processor",
    "start": "559920",
    "end": "561600"
  },
  {
    "text": "fluent bit is actually a cncf",
    "start": "561600",
    "end": "563920"
  },
  {
    "text": "sub-project",
    "start": "563920",
    "end": "564800"
  },
  {
    "text": "under the umbrella of fluentd and also",
    "start": "564800",
    "end": "567440"
  },
  {
    "text": "they're both",
    "start": "567440",
    "end": "568160"
  },
  {
    "text": "vendor neutral so they can run on any",
    "start": "568160",
    "end": "570880"
  },
  {
    "text": "environment regardless the platform",
    "start": "570880",
    "end": "572959"
  },
  {
    "text": "and also interesting to know that there",
    "start": "572959",
    "end": "574800"
  },
  {
    "text": "are even use cases",
    "start": "574800",
    "end": "576480"
  },
  {
    "text": "where you can use both fluent beat and",
    "start": "576480",
    "end": "579120"
  },
  {
    "text": "fluency",
    "start": "579120",
    "end": "579839"
  },
  {
    "text": "together to create a very efficient and",
    "start": "579839",
    "end": "582160"
  },
  {
    "text": "high performance",
    "start": "582160",
    "end": "583279"
  },
  {
    "text": "log processing architecture for your",
    "start": "583279",
    "end": "585760"
  },
  {
    "text": "environment",
    "start": "585760",
    "end": "586720"
  },
  {
    "text": "if you're interested in learning more",
    "start": "586720",
    "end": "588800"
  },
  {
    "text": "about fluent beat",
    "start": "588800",
    "end": "590240"
  },
  {
    "text": "i recommend checking out the online",
    "start": "590240",
    "end": "591920"
  },
  {
    "text": "resources and documentation",
    "start": "591920",
    "end": "594080"
  },
  {
    "text": "of fluentbit",
    "start": "594080",
    "end": "597040"
  }
]