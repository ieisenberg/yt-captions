[
  {
    "text": "okay so hi everybody we're gonna get started just like normal I think we'll",
    "start": "30",
    "end": "5069"
  },
  {
    "text": "have questions at the end so save your questions I'll run around with a microphone my name is Tim Hendricks I'm from Styron the open policy agent",
    "start": "5069",
    "end": "11010"
  },
  {
    "text": "I'm your track host the other thing I'll remind you of is to please rate the talk at the end you log onto sched to do that",
    "start": "11010",
    "end": "18410"
  },
  {
    "text": "and then you just rate it without further ado Evan Gilman here from",
    "start": "18410",
    "end": "24420"
  },
  {
    "text": "Scytale is going to be speaking about spiffy inspire which for those of you who don't know is a cross-platform",
    "start": "24420",
    "end": "30449"
  },
  {
    "text": "identity solution thank you hello",
    "start": "30449",
    "end": "35730"
  },
  {
    "text": "everybody good afternoon so welcome to multi-cloud cross cluster",
    "start": "35730",
    "end": "46250"
  },
  {
    "text": "authentication a spiffy inspire so before we start a little bit about",
    "start": "46250",
    "end": "51510"
  },
  {
    "text": "myself I'm born in Miami Florida in the United States and started my career in",
    "start": "51510",
    "end": "57300"
  },
  {
    "text": "network engineering bounced all around after that from storage systems to",
    "start": "57300",
    "end": "63229"
  },
  {
    "text": "automation traditional ops I sorry all that kind of stuff been living in San",
    "start": "63229",
    "end": "69990"
  },
  {
    "text": "Francisco in the US for about six years now and I'm currently working at a company called Scytale focusing",
    "start": "69990",
    "end": "75479"
  },
  {
    "text": "full-time on the Smithey inspired projects so today I wanted to give just",
    "start": "75479",
    "end": "81780"
  },
  {
    "text": "like a spiffy spire overview and talk a little bit about the node attestation and workload attestation mechanisms and",
    "start": "81780",
    "end": "88590"
  },
  {
    "text": "spire and how those relate to kind of running an identity solution across",
    "start": "88590",
    "end": "93990"
  },
  {
    "text": "platforms and then kind of finish off with deployment topologies different ways that you can set up spire and",
    "start": "93990",
    "end": "99689"
  },
  {
    "text": "configure spire to solve some of these cross cluster cross cloud challenges that a lot of people are seeing today so",
    "start": "99689",
    "end": "106259"
  },
  {
    "text": "really just kind of want to focus on how disability specs and the spire",
    "start": "106259",
    "end": "112140"
  },
  {
    "text": "implementation of that can can help to address some of these things so first",
    "start": "112140",
    "end": "117689"
  },
  {
    "text": "talk a little bit about spiffy so I mentioned spiffy as a specification or set of specifications actually it's",
    "start": "117689",
    "end": "126000"
  },
  {
    "text": "really just a bunch of markdown Docs and a github repository but the goal of that is to kind of define",
    "start": "126000",
    "end": "132720"
  },
  {
    "text": "a standard for platform-agnostic workload identity so we're clear identity that is not necessarily tied to",
    "start": "132720",
    "end": "138480"
  },
  {
    "text": "a particular platform a runtime and there's three main concepts in in this",
    "start": "138480",
    "end": "143730"
  },
  {
    "text": "spiffy specification set there's a fourth one actually that I'll talk about",
    "start": "143730",
    "end": "148950"
  },
  {
    "text": "kind of towards the end but the first of this of those three is what's called a spiffy ID and this is what one looks",
    "start": "148950",
    "end": "156780"
  },
  {
    "text": "like it's basically just a structured string that is modeled as a URI and the",
    "start": "156780",
    "end": "163080"
  },
  {
    "text": "one way to think about it is like kind of like a username for workloads that is somewhat human friendly and this",
    "start": "163080",
    "end": "169110"
  },
  {
    "text": "specification isn't super prescriptive about what values you put in here like",
    "start": "169110",
    "end": "174150"
  },
  {
    "text": "it doesn't actually have to be a dns name like in this example you can choose whatever values you want whatever makes",
    "start": "174150",
    "end": "180090"
  },
  {
    "text": "sense for your particular deployment as long as you follow this kind of overall",
    "start": "180090",
    "end": "185730"
  },
  {
    "text": "structure so in terms of meaning in terms of that structure you have this middle part the blue bit here which is",
    "start": "185730",
    "end": "192750"
  },
  {
    "text": "representing an issuing authority or what we call a trust domain and everything after that the green part is",
    "start": "192750",
    "end": "199230"
  },
  {
    "text": "the the worklet identity which is residing within this trust domain or authority and these things like you can",
    "start": "199230",
    "end": "206130"
  },
  {
    "text": "form them hierarchically if you wish but like I said the spec isn't prescriptive",
    "start": "206130",
    "end": "211140"
  },
  {
    "text": "so you don't really have to if it doesn't make sense for you the next thing we have is what we call an S VIN",
    "start": "211140",
    "end": "217100"
  },
  {
    "text": "stands for spiffy verifiable identity document and basically these are just",
    "start": "217100",
    "end": "223080"
  },
  {
    "text": "signed documents that you use to prove your identity to a remote system right and there's lots of existing document",
    "start": "223080",
    "end": "229500"
  },
  {
    "text": "types out there so we didn't really want to reinvent the wheel and we also wanted this to work with currently deployed",
    "start": "229500",
    "end": "236580"
  },
  {
    "text": "software's so we have two types of estimates defined currently one is based",
    "start": "236580",
    "end": "242040"
  },
  {
    "text": "on x.509 certificates and the other is based on job and finally the third piece",
    "start": "242040",
    "end": "249570"
  },
  {
    "text": "is what we call the workload API this kind of answers the question of how do I get my identity right and this is a",
    "start": "249570",
    "end": "255900"
  },
  {
    "text": "really important piece of the vision so to speak because it abstracts the platform and the implementation away",
    "start": "255900",
    "end": "261900"
  },
  {
    "text": "from the workload so it removes the need for the app to have to know where it's running for instance doesn't",
    "start": "261900",
    "end": "267090"
  },
  {
    "text": "have to know that has to go security a service account token if it's in kubernetes or if it's in GCP you know so",
    "start": "267090",
    "end": "273270"
  },
  {
    "text": "on and so forth and this work that API is is a important to note that it's",
    "start": "273270",
    "end": "278970"
  },
  {
    "text": "unauthenticated so this is a node local API it's not like a centralized API and",
    "start": "278970",
    "end": "285360"
  },
  {
    "text": "the reason it's not authenticated is because we don't want to require the workload to provide a secret or",
    "start": "285360",
    "end": "290700"
  },
  {
    "text": "something in order to bootstrap it so if we wanted to be able to be deployed without any kind of knowledge of what",
    "start": "290700",
    "end": "295980"
  },
  {
    "text": "its identity is or any kind of secret that is baked into it or anything like this be able to kind of pop up and just",
    "start": "295980",
    "end": "301590"
  },
  {
    "text": "get this identity ambiently so to speak so it removes the need to inject like",
    "start": "301590",
    "end": "306930"
  },
  {
    "text": "credentials at deploy time it removes the need for your CI CD system to have access to all the things so on and so",
    "start": "306930",
    "end": "313290"
  },
  {
    "text": "forth so what you end up at the end of the day with is something that looks like this and this is really where",
    "start": "313290",
    "end": "321240"
  },
  {
    "text": "spiffy shines I think because work loads can do they can get their identity ambiently from this workload api and",
    "start": "321240",
    "end": "328260"
  },
  {
    "text": "they can use it to do direct mutual TLS with other workloads and you don't",
    "start": "328260",
    "end": "333390"
  },
  {
    "text": "really this workload doesn't really care where it is because the workload api is a is a standardized interface it doesn't",
    "start": "333390",
    "end": "339360"
  },
  {
    "text": "really care where its peers are or where they're running because we have this kind of standardized definition of identity and how you how you",
    "start": "339360",
    "end": "345690"
  },
  {
    "text": "authenticate it so you can see in this in this diagram that like if you've just",
    "start": "345690",
    "end": "351120"
  },
  {
    "text": "defined the right interfaces between these things then securing this kind of cross cloud cross cluster stuff becomes",
    "start": "351120",
    "end": "357330"
  },
  {
    "text": "fairly straightforward because all the things are important in order to do it aren't necessarily tied to those implementations so that leaves one big",
    "start": "357330",
    "end": "368039"
  },
  {
    "text": "remaining question which is how do I get this workload API where does it come from and who gives it to me and that's",
    "start": "368039",
    "end": "376080"
  },
  {
    "text": "kind of where spire comes another picture so aspire is a software",
    "start": "376080",
    "end": "381300"
  },
  {
    "text": "implementation of these spiffy specifications and its goal in life is",
    "start": "381300",
    "end": "386910"
  },
  {
    "text": "basically to light up this work live API and as many as virus as possible in",
    "start": "386910",
    "end": "393330"
  },
  {
    "text": "order to accomplish this it's written in go so it's portable and it's very highly pluggable",
    "start": "393330",
    "end": "399060"
  },
  {
    "text": "about some of those plugins here in a second of course it's a security",
    "start": "399060",
    "end": "404220"
  },
  {
    "text": "sensitive project so before diving in to the architecture I thought maybe it",
    "start": "404220",
    "end": "409980"
  },
  {
    "text": "makes sense to just quickly go over it's a high-level security model that we try to follow in this project to help reason",
    "start": "409980",
    "end": "416550"
  },
  {
    "text": "about some of the design choices that we've made along the way now so the first is that spire does not",
    "start": "416550",
    "end": "423360"
  },
  {
    "text": "assume that the network is trusted so IP addresses and things like this are",
    "start": "423360",
    "end": "428430"
  },
  {
    "text": "pretty much unusable as a security primitive and spire I said we rely on",
    "start": "428430",
    "end": "434280"
  },
  {
    "text": "solely on cryptographic mechanisms and the second is that the workloads also",
    "start": "434280",
    "end": "440010"
  },
  {
    "text": "considered untrusted because at the end of the day application can be compromised and it can then be in a",
    "start": "440010",
    "end": "446850"
  },
  {
    "text": "position to abuse this worklet api or provide false information so on and so forth so the workload api must not trust",
    "start": "446850",
    "end": "452760"
  },
  {
    "text": "any data that is provided directly by the workload and finally we designed for",
    "start": "452760",
    "end": "459540"
  },
  {
    "text": "node compromise so you know we expect that a compromised workload may be able",
    "start": "459540",
    "end": "464669"
  },
  {
    "text": "to escape a container or something like this and when that happens this evil node shouldn't be able to get or",
    "start": "464669",
    "end": "470970"
  },
  {
    "text": "otherwise make identities that it shouldn't have access to so with that",
    "start": "470970",
    "end": "479130"
  },
  {
    "text": "out of the way let's have a look at the architecture quickly",
    "start": "479130",
    "end": "485870"
  },
  {
    "text": "Spira can prize us two major components a server and an agent the spire server",
    "start": "485880",
    "end": "491970"
  },
  {
    "text": "is responsible for identity mapping so that's like you know what smithy ID should be given to whom and when and",
    "start": "491970",
    "end": "498919"
  },
  {
    "text": "it's also responsible for a process that we call no data station which I'll talk about in a minute and it's also",
    "start": "498919",
    "end": "505380"
  },
  {
    "text": "responsible for s fit issuance so creating these certificates minting them and issuing them aspire agent on the",
    "start": "505380",
    "end": "512339"
  },
  {
    "text": "other hand is responsible for a process that we call workload out to station which is similar to no data station but",
    "start": "512339",
    "end": "517800"
  },
  {
    "text": "for work lives which will also kind of dive into and it's ultimately responsible for turning on the workload",
    "start": "517800",
    "end": "523860"
  },
  {
    "text": "API so to see how this works we'll start from the beginning",
    "start": "523860",
    "end": "530520"
  },
  {
    "text": "we have this spire server at the very top and it acts as the authority right",
    "start": "530520",
    "end": "535980"
  },
  {
    "text": "so when it first boots it generates like a CA certificate that is gonna be used to sign all the identities in this",
    "start": "535980",
    "end": "542700"
  },
  {
    "text": "particular trust amazed remember a trust domain is as represents this authority so there's kind of this one-to-one relationship with spire server and Trust",
    "start": "542700",
    "end": "549630"
  },
  {
    "text": "domain so I mentioned inspire is really pluggable so spire server does have a",
    "start": "549630",
    "end": "555630"
  },
  {
    "text": "plugin called an upstream CA plugin so if you have like an existing PK PKI a",
    "start": "555630",
    "end": "560730"
  },
  {
    "text": "system we can snap into it and rather than generating a self-signed root we can get an intermediate cut from",
    "start": "560730",
    "end": "567390"
  },
  {
    "text": "whatever existing stuff you have so we ultimately want to use this Authority",
    "start": "567390",
    "end": "572670"
  },
  {
    "text": "inspire server to sign and generate certificates for workloads right and in",
    "start": "572670",
    "end": "579180"
  },
  {
    "text": "order to do this we have these agents and they expose the workload API to the workloads and this agent is managing",
    "start": "579180",
    "end": "587370"
  },
  {
    "text": "requests for certificates the spire server on behalf of the workload and it's managing like handing them out to various workloads and things like this",
    "start": "587370",
    "end": "593610"
  },
  {
    "text": "but with that in mind you have to ask the question like how does the server",
    "start": "593610",
    "end": "599339"
  },
  {
    "text": "know that is actually an agent requesting a certificate and not an attacker or something else and if you",
    "start": "599339",
    "end": "606360"
  },
  {
    "text": "recall the security model we can't just let any agent ask for any certificate either so we have to know exactly which",
    "start": "606360",
    "end": "614459"
  },
  {
    "text": "agent is requesting this thing right and we have to know that it's supposed to be requesting this thing that it's allowed",
    "start": "614459",
    "end": "619980"
  },
  {
    "text": "to do that so the first step in answering this question is this concept",
    "start": "619980",
    "end": "626130"
  },
  {
    "text": "of note attestation and this allows the server to precisely identify a particular agent instance and this is",
    "start": "626130",
    "end": "634200"
  },
  {
    "text": "how it works this server and the agent both have a plug-in called a node a",
    "start": "634200",
    "end": "639390"
  },
  {
    "text": "tester plugin and this plug-in is platform dependent but the server",
    "start": "639390",
    "end": "647399"
  },
  {
    "text": "supports loading an arbitrary number of these note a tester plugins so it allows",
    "start": "647399",
    "end": "652920"
  },
  {
    "text": "you to mix and match the agent platform so for instance you might have a set of agents in AWS a set of agents and GCP",
    "start": "652920",
    "end": "658740"
  },
  {
    "text": "set of agents and Azure on from so on and so forth and the server the server knows how to perform it",
    "start": "658740",
    "end": "663970"
  },
  {
    "text": "a station for all of those so when the agent starts up the first thing that it",
    "start": "663970",
    "end": "669639"
  },
  {
    "text": "does is it pokes this no to tester plug-in and this nerd a tester plug-in gathers proof of the platform identity",
    "start": "669639",
    "end": "676839"
  },
  {
    "text": "that it's running on so to give an example in the case of AWS it starts up",
    "start": "676839",
    "end": "682600"
  },
  {
    "text": "and it calls into the AWS metadata API which is scoped to each ec2 node and it",
    "start": "682600",
    "end": "687939"
  },
  {
    "text": "grabs this thing called a nuisance identity document which is basically just a thing that has like the instance",
    "start": "687939",
    "end": "693490"
  },
  {
    "text": "ID in it and then it is ultimately signed by an Amazon key a wilderness on key so the agent grabs this thing and",
    "start": "693490",
    "end": "702009"
  },
  {
    "text": "then it sends that document over to the server know with AWS and was similar in",
    "start": "702009",
    "end": "707709"
  },
  {
    "text": "Google Cloud this process is mostly one-way but the protocol between the",
    "start": "707709",
    "end": "713680"
  },
  {
    "text": "server and the agent actually supports challenge/response so depending on the node a tester that you're using you can",
    "start": "713680",
    "end": "720250"
  },
  {
    "text": "get a lot more exotic than simply passing a document back and forth so this is a pretty basic example but it's",
    "start": "720250",
    "end": "726129"
  },
  {
    "text": "the way that we do it in AWS the tester on the on the server side receives this",
    "start": "726129",
    "end": "733269"
  },
  {
    "text": "document and then it knows how to call AWS API at this point it can verify all",
    "start": "733269",
    "end": "739059"
  },
  {
    "text": "sorts of things right so I can say like hey is the instance like freshly booted does the disk look like it's been",
    "start": "739059",
    "end": "745059"
  },
  {
    "text": "detached or tampered with or anything like that and you can pretty much do any check that you want here because again",
    "start": "745059",
    "end": "751300"
  },
  {
    "text": "it's just pluggable so you can plug it on any kind of validation logic that makes sense for you so once all these",
    "start": "751300",
    "end": "758019"
  },
  {
    "text": "checks pass and everything you know looks good or whatever the server issues the agent a nested this s feel like",
    "start": "758019",
    "end": "766509"
  },
  {
    "text": "uniquely identifies that particular agent on that particular platform and at this point all connections going forward",
    "start": "766509",
    "end": "773829"
  },
  {
    "text": "between the agent and the server are done with mutually authenticated TLS using this agent identity is the client",
    "start": "773829",
    "end": "779949"
  },
  {
    "text": "certificate so now we can kind of differentiate exactly which agent as which one is calling spire server but we",
    "start": "779949",
    "end": "789309"
  },
  {
    "text": "still need to kind of figure out which workload is which right in fact we",
    "start": "789309",
    "end": "794829"
  },
  {
    "text": "actually have to give them a name or an identity so we have to teach spire what is what",
    "start": "794829",
    "end": "801540"
  },
  {
    "text": "so this is how we do that this is what we call a registration entry",
    "start": "801540",
    "end": "807030"
  },
  {
    "text": "it's basically an identity mapping that I was kind of alluding to and before and",
    "start": "807030",
    "end": "813340"
  },
  {
    "text": "a server exposes an API for adding and deleting these things there's also a CLI",
    "start": "813340",
    "end": "818800"
  },
  {
    "text": "utility that you can use to interact with them so if we look at this entry",
    "start": "818800",
    "end": "824620"
  },
  {
    "text": "you can see a few things on there now the first is what we call a parent ID which is essentially like where the",
    "start": "824620",
    "end": "831490"
  },
  {
    "text": "workload is supposed to run so in this case the workload is running in a kubernetes cluster named foo right we",
    "start": "831490",
    "end": "838300"
  },
  {
    "text": "additionally give these things that we call selectors which are kind of these innate properties of the workload and we",
    "start": "838300",
    "end": "843460"
  },
  {
    "text": "use that to describe the workload because when it comes up it doesn't already have an identity it doesn't already have any secret you know we",
    "start": "843460",
    "end": "850360"
  },
  {
    "text": "can't there's no easy way to identify right so these are kind of like the dimensions of the workload so in this",
    "start": "850360",
    "end": "855430"
  },
  {
    "text": "case who said hey this workload is running in the kubernetes namespace operations it should be running on fear",
    "start": "855430",
    "end": "862750"
  },
  {
    "text": "and IT service account MediaWiki and it's running this particular docker image ID finally if we define a spiffy",
    "start": "862750",
    "end": "870160"
  },
  {
    "text": "ID hey where all these things match and you see this workload come up then this is the spiffy ID you should give it so",
    "start": "870160",
    "end": "876130"
  },
  {
    "text": "now spire can tell which agents are authorized to issue this thing because we know that hey should be at any agent",
    "start": "876130",
    "end": "882130"
  },
  {
    "text": "is running in cluster foo we also kind of know the basic shape of the workload and we know that when we see that that",
    "start": "882130",
    "end": "888760"
  },
  {
    "text": "particular workload shape in this particular place then we should give it Mississippi ID okay so now the question",
    "start": "888760",
    "end": "894760"
  },
  {
    "text": "is how does the agent figure out all this information right the server knows",
    "start": "894760",
    "end": "900250"
  },
  {
    "text": "that the agent can request it so the agent can request it with them the agent has to be able to tell hey you know what",
    "start": "900250",
    "end": "905620"
  },
  {
    "text": "service encounter you in so similar to no data station we have this flow called workload out to station and talked a",
    "start": "905620",
    "end": "913870"
  },
  {
    "text": "little bit about how that works when the agent boots up after following no data",
    "start": "913870",
    "end": "921310"
  },
  {
    "text": "station it exposes this workload API on a UNIX domain socket so remember that",
    "start": "921310",
    "end": "927670"
  },
  {
    "text": "this is like the primary goal in life of this whole spire system is expose the socket next the workload boots up",
    "start": "927670",
    "end": "934620"
  },
  {
    "text": "and when it first starts it calls them to this into this workload API and basically says like Who am I right so",
    "start": "934620",
    "end": "942210"
  },
  {
    "text": "now it's the agent's job to figure out the shape of this workload and who it is and in order to do this the agent uses",
    "start": "942210",
    "end": "949620"
  },
  {
    "text": "the kernel in this case the Linux kernel but works on BSD is to to find out what",
    "start": "949620",
    "end": "954870"
  },
  {
    "text": "process is calling it and once it knows what process is calling it it can do further lookups to find more information",
    "start": "954870",
    "end": "961140"
  },
  {
    "text": "about that particular process so basic example might be what user and group is",
    "start": "961140",
    "end": "967529"
  },
  {
    "text": "this process running as what is the shah of the binary that is calling me right now things along those lines and similar",
    "start": "967529",
    "end": "975540"
  },
  {
    "text": "to no data station workload attestation is also fully pluggable and you can have",
    "start": "975540",
    "end": "980940"
  },
  {
    "text": "multiple workload and test your plugins per agent and you can mix and match those selectors right so here using the",
    "start": "980940",
    "end": "988290"
  },
  {
    "text": "UNIX workload a tester I can surface all these like UNIX oriented properties but",
    "start": "988290",
    "end": "993750"
  },
  {
    "text": "we can use others too so for instance we have a kubernetes workload a tester that",
    "start": "993750",
    "end": "998760"
  },
  {
    "text": "knows how to call the qubit nicely cubelet all kinds of questions so that's how we got you know the kubernetes specific information so he can figure",
    "start": "998760",
    "end": "1005240"
  },
  {
    "text": "out you know what pod it's in and we can read the whole pod spec what labels are on things along those lines so the agent",
    "start": "1005240",
    "end": "1013820"
  },
  {
    "text": "takes all this information that it gets back from these workload of testers and it forms the selectors that we were",
    "start": "1013820",
    "end": "1019700"
  },
  {
    "text": "looking at before and that's how we describe the particular workload right so now we know number one where this",
    "start": "1019700",
    "end": "1026839"
  },
  {
    "text": "workload is running because we know hey is talking to this particular agent which is in this particular cluster and we know to what identity to issue it",
    "start": "1026839",
    "end": "1033438"
  },
  {
    "text": "because the agents been able to figure out all this information about the caller so finally our workloads are all",
    "start": "1033439",
    "end": "1041240"
  },
  {
    "text": "issued spiffy ideas and once received I mentioned before they can be used directly for TLS at least the x.509 s",
    "start": "1041240",
    "end": "1049160"
  },
  {
    "text": "feds can and this forms a really valuable building block for authorization of systems like OPA",
    "start": "1049160",
    "end": "1054490"
  },
  {
    "text": "because it gives you kind of this stable concept of identity stable identifier",
    "start": "1054490",
    "end": "1059690"
  },
  {
    "text": "that is gonna be kind of very well defined and the same pretty much no matter what",
    "start": "1059690",
    "end": "1064760"
  },
  {
    "text": "platform you're on so at this point you might be asking like what's the deal",
    "start": "1064760",
    "end": "1072320"
  },
  {
    "text": "with this server component like how am I supposed to how am I supposed to do this",
    "start": "1072320",
    "end": "1077450"
  },
  {
    "text": "cross cloud thing when I have this server component so like how many of them might I be able to have and if I",
    "start": "1077450",
    "end": "1083360"
  },
  {
    "text": "have more than one like how do they interact with each other so this is the part I want to talk a little bit about",
    "start": "1083360",
    "end": "1089570"
  },
  {
    "text": "kind of what I'm just called deployment topologies or like configurations of Speyer we've been thinking about this",
    "start": "1089570",
    "end": "1096440"
  },
  {
    "text": "for a long time and in order to kind of support these cross-platform deployment is ideally",
    "start": "1096440",
    "end": "1103430"
  },
  {
    "text": "we've implemented three different kinds of general topologies each one of them",
    "start": "1103430",
    "end": "1109220"
  },
  {
    "text": "solves a different problem so let's have a look at those the first of these",
    "start": "1109220",
    "end": "1114830"
  },
  {
    "text": "options is scaling spire server horizontally in this configuration spire",
    "start": "1114830",
    "end": "1121280"
  },
  {
    "text": "servers have to share a datastore and each one of these servers maintains a separate root certificate in key so",
    "start": "1121280",
    "end": "1129320"
  },
  {
    "text": "there's still one trust domain here but the bundle the validation keys for that",
    "start": "1129320",
    "end": "1134450"
  },
  {
    "text": "particular trust domain is the essentially the union of all the CA search the spire servers are maintaining",
    "start": "1134450",
    "end": "1140560"
  },
  {
    "text": "so this option can be pretty good for dealing with load can also be okay for running across availability zones or",
    "start": "1140560",
    "end": "1147320"
  },
  {
    "text": "things like that but as many of you might be familiar with it can be hard to manage across cloud datastore for system",
    "start": "1147320",
    "end": "1153740"
  },
  {
    "text": "stores so depending on what you have available to you this mode of operation",
    "start": "1153740",
    "end": "1159080"
  },
  {
    "text": "may or may not be a good choice for cross cloud or cross cluster the second",
    "start": "1159080",
    "end": "1164750"
  },
  {
    "text": "option is something that we call nested aspire and so what this allows us spire",
    "start": "1164750",
    "end": "1170000"
  },
  {
    "text": "service to kind of be chained together and to form like arbitrary trees and it",
    "start": "1170000",
    "end": "1175070"
  },
  {
    "text": "works by collocating an agent with a spire server we call these like downstream spire servers and that allows",
    "start": "1175070",
    "end": "1181280"
  },
  {
    "text": "that downstream node to perform no doubt test ation and workload attestation back up to the spire server in the next level",
    "start": "1181280",
    "end": "1187910"
  },
  {
    "text": "which is kind of cool because it lets just turn on new servers automatically there's no intervention required or",
    "start": "1187910",
    "end": "1193640"
  },
  {
    "text": "operators to be juggling access control lists or keys or anything like you can throw these things I'm like an",
    "start": "1193640",
    "end": "1199790"
  },
  {
    "text": "auto scale group and it's just gonna work so this is much much better for multi cloud deployments you can imagine",
    "start": "1199790",
    "end": "1207920"
  },
  {
    "text": "this top server kind of being like this global global server a global cluster",
    "start": "1207920",
    "end": "1213350"
  },
  {
    "text": "and then these downstream servers might be it like the regional level or the cluster level or something along those",
    "start": "1213350",
    "end": "1218510"
  },
  {
    "text": "lines and because you can mix and match those Notah testers that I was talking",
    "start": "1218510",
    "end": "1224210"
  },
  {
    "text": "about before these down streams can be in like different clouds - and using different node attestation primitives",
    "start": "1224210",
    "end": "1229490"
  },
  {
    "text": "and you guys you can use that to kind of still get this very consistent view of the world when it comes to",
    "start": "1229490",
    "end": "1234980"
  },
  {
    "text": "authentication and identity no matter what platform you're on because we can kind of mix and match these things and",
    "start": "1234980",
    "end": "1241220"
  },
  {
    "text": "like up level everything so in this configuration the this global tier the",
    "start": "1241220",
    "end": "1247400"
  },
  {
    "text": "one at the top is the one that holds the routes and these downstream servers got",
    "start": "1247400",
    "end": "1253160"
  },
  {
    "text": "intermediate certificates so this means that this global tier can go down or",
    "start": "1253160",
    "end": "1259810"
  },
  {
    "text": "connectivity to this global tier can be severed or perhaps you take it offline purposefully and the intermediates will",
    "start": "1259810",
    "end": "1266810"
  },
  {
    "text": "continue to operate without a problem now so this is a pretty robust configuration that can help to address",
    "start": "1266810",
    "end": "1273260"
  },
  {
    "text": "load and differing failure domains but it is still just one trust domain with",
    "start": "1273260",
    "end": "1279950"
  },
  {
    "text": "one set of routes the final configuration is what we call federated",
    "start": "1279950",
    "end": "1285320"
  },
  {
    "text": "speier this allows you to carve like multiple trust domains with disparate",
    "start": "1285320",
    "end": "1290570"
  },
  {
    "text": "routes and this concept of federation is actually a spiffy concept not a spire concept and it is in fact the fourth",
    "start": "1290570",
    "end": "1300440"
  },
  {
    "text": "concept that I alluded to earlier and as you can see from this slide is still",
    "start": "1300440",
    "end": "1306560"
  },
  {
    "text": "kind of a work in progress oh if I didn't include it in the beginning spiffy Federation specification has been",
    "start": "1306560",
    "end": "1312650"
  },
  {
    "text": "under development for about the last six months or so and has in the last month",
    "start": "1312650",
    "end": "1317660"
  },
  {
    "text": "stabilized fairly well so we have a spire prototype underway and you should",
    "start": "1317660",
    "end": "1322940"
  },
  {
    "text": "see a preview of that feature land pretty soon so with this feature we can",
    "start": "1322940",
    "end": "1329180"
  },
  {
    "text": "the spire servers can essentially swap with each other not the keys of course",
    "start": "1329180",
    "end": "1335030"
  },
  {
    "text": "but the certificates and you can then like pass these roots down to the workloads the workloads know how to",
    "start": "1335030",
    "end": "1340429"
  },
  {
    "text": "validate workloads and other trust domains or in other platforms so it gives this really nice kind of loose",
    "start": "1340429",
    "end": "1346040"
  },
  {
    "text": "coupling that is not just can can address failure domain concerns we can",
    "start": "1346040",
    "end": "1351290"
  },
  {
    "text": "also address security domain concerns if a particular CA certificate is stolen or",
    "start": "1351290",
    "end": "1356299"
  },
  {
    "text": "something like that you can be assured that you won't be able to mint identities in this and this other trust Amin so there's some really exciting",
    "start": "1356299",
    "end": "1363679"
  },
  {
    "text": "work going on in that in that regard and we've been collaborating fairly closely",
    "start": "1363679",
    "end": "1369140"
  },
  {
    "text": "with the Google SDO team to make sure that sto Citadel supports Federation Mis Federation API which will allow multiple",
    "start": "1369140",
    "end": "1377059"
  },
  {
    "text": "sto clusters and multiple aspire clusters to kind of like peer together so that's really really cool I think at",
    "start": "1377059",
    "end": "1383780"
  },
  {
    "text": "least and you should probably see a preview of that drop in the next one month or so and aspire and I did have a",
    "start": "1383780",
    "end": "1393830"
  },
  {
    "text": "demo prepared for you guys a really cool and actually with two mini cubes and all",
    "start": "1393830",
    "end": "1399679"
  },
  {
    "text": "this stuff but unfortunately I can't show it to you today there's some problems with my local environment so",
    "start": "1399679",
    "end": "1404960"
  },
  {
    "text": "that's a bummer I'm going to push it up to my github though and I'll write a short blog post",
    "start": "1404960",
    "end": "1410150"
  },
  {
    "text": "on it for you all so if you're interested in seeing that please just keep an eye on my Twitter and I'll put",
    "start": "1410150",
    "end": "1416299"
  },
  {
    "text": "some links up there in the next week or two no but if you want to learn more we have the existing github repos the first",
    "start": "1416299",
    "end": "1423350"
  },
  {
    "text": "one is the spire as that software implementation that we've been talking about a second one is the spiffy github",
    "start": "1423350",
    "end": "1429830"
  },
  {
    "text": "repo that's where all the specifications live all the markdown documents and things like that so if you want to build your own spiffy implementation that's",
    "start": "1429830",
    "end": "1436400"
  },
  {
    "text": "the the place that you should go and then finally our slack channel is open to the public we have a very active",
    "start": "1436400",
    "end": "1442309"
  },
  {
    "text": "community there so if you have any questions at all or just like to try some stuff out or even hack on some of",
    "start": "1442309",
    "end": "1448100"
  },
  {
    "text": "these things please just pop in we'd love to see you there that is all I have for you today guys thank you",
    "start": "1448100",
    "end": "1456190"
  },
  {
    "text": "[Applause] I might be wrong but this spires were",
    "start": "1458350",
    "end": "1469860"
  },
  {
    "text": "doesn't use it's basically certificates already right and if you cut whatever this",
    "start": "1469860",
    "end": "1482900"
  },
  {
    "text": "security model of sto is use its Acme protocol to exchange the certificates",
    "start": "1482900",
    "end": "1490500"
  },
  {
    "text": "right now the sto Citadel does not use",
    "start": "1490500",
    "end": "1496890"
  },
  {
    "text": "Acme internally they have an agent which pushes a security a security service",
    "start": "1496890",
    "end": "1503460"
  },
  {
    "text": "account token back up to an authority the Citadel server said all server validates the token and then cuts the",
    "start": "1503460",
    "end": "1509730"
  },
  {
    "text": "cert with that identity and ships it back they did not use Acme they may use acne in the ingress gateways for like",
    "start": "1509730",
    "end": "1516450"
  },
  {
    "text": "public certs and things like this but internally for the Envoy identity is it",
    "start": "1516450",
    "end": "1522330"
  },
  {
    "text": "is not though there are some problems with acne that prevent it from being applied here so one of them is that it",
    "start": "1522330",
    "end": "1529860"
  },
  {
    "text": "assumes that you have DNS or something like this which you may not in some of these systems the other is that it assumes that you actually know what",
    "start": "1529860",
    "end": "1535740"
  },
  {
    "text": "identity you should be asking for these workloads do not know in advance",
    "start": "1535740",
    "end": "1541490"
  },
  {
    "text": "so in the case of Canaries who is that so the wheat when you say the workload",
    "start": "1544770",
    "end": "1550050"
  },
  {
    "text": "is requesting a search from the aspire agent right who is actually requesting",
    "start": "1550050",
    "end": "1555210"
  },
  {
    "text": "that it's the copilot's or the workload itself or the site card up to you the workload can request",
    "start": "1555210",
    "end": "1563580"
  },
  {
    "text": "directly it was designed for a workload to request directly because you don't need anything the the the message you",
    "start": "1563580",
    "end": "1570270"
  },
  {
    "text": "send of the workload API is literally just an empty empty message and you get back your identity it can be a sidecar",
    "start": "1570270",
    "end": "1576780"
  },
  {
    "text": "if you want to use a sidecar then in that event the sidecar communicates with this workload API and we issue the cert",
    "start": "1576780",
    "end": "1583380"
  },
  {
    "text": "to the sidecar so depends on what model you choose to use it is usually not the",
    "start": "1583380",
    "end": "1589290"
  },
  {
    "text": "platform which is requesting that's right of the workload or something adjacent to the workload are there any",
    "start": "1589290",
    "end": "1600179"
  },
  {
    "text": "other spiffy implementations other than spire let's see so SPO has a spiffy",
    "start": "1600179",
    "end": "1608790"
  },
  {
    "text": "implementation they issue 50 certs internally using component called Citadel that this gentleman was asking",
    "start": "1608790",
    "end": "1615150"
  },
  {
    "text": "about a minute ago Hoshi Corp console also issues spiffy certificates and",
    "start": "1615150",
    "end": "1620910"
  },
  {
    "text": "Hoshi core vault knows how to issue spiffy certificates but I wouldn't quite go so far as to say that it's a spiffy implementation that's the issuer side of",
    "start": "1620910",
    "end": "1630480"
  },
  {
    "text": "things there's a number of other projects that are specially compatible on the consumer side which like envoy",
    "start": "1630480",
    "end": "1637110"
  },
  {
    "text": "for instance you alluded to a number of backends for certificate storage and",
    "start": "1637110",
    "end": "1643970"
  },
  {
    "text": "separate route do you have a vault beckoned I'm sorry can you recall volt",
    "start": "1643970",
    "end": "1650220"
  },
  {
    "text": "beckoned for secret storage and integrating with with a separate route",
    "start": "1650220",
    "end": "1656179"
  },
  {
    "text": "so I don't think we don't have one that is that is built into spire but I have",
    "start": "1656179",
    "end": "1662130"
  },
  {
    "text": "seen one on github that a plugin that someone wrote that does upstream CA to vault so you can keep the root and vault",
    "start": "1662130",
    "end": "1669300"
  },
  {
    "text": "and then you can point this up free PCI at it and then it will use fault to cut",
    "start": "1669300",
    "end": "1674640"
  },
  {
    "text": "an intermediate cert in stead of self signing their routes so the long answer is yes it can workers",
    "start": "1674640",
    "end": "1680200"
  },
  {
    "text": "vault and there are some plugin implementations out there the short answer is hey it's not built in yet but there's no reason it shouldn't be we",
    "start": "1680200",
    "end": "1686740"
  },
  {
    "text": "probably should add it there's also another kind of facet which is that's",
    "start": "1686740",
    "end": "1692020"
  },
  {
    "text": "the upstream CA plug them this server also has another plugin called the key manager plugin and this is the plug-in",
    "start": "1692020",
    "end": "1697630"
  },
  {
    "text": "that's used for key persistence so it's not necessarily like a PKI aware plug-in",
    "start": "1697630",
    "end": "1703030"
  },
  {
    "text": "but it knows like it has a pkcs 11 like interface so if you wanted to store a",
    "start": "1703030",
    "end": "1708820"
  },
  {
    "text": "key only involved you could do it like this too",
    "start": "1708820",
    "end": "1713700"
  },
  {
    "text": "hello what about if I need to revoke a certificate for whatever reason how does",
    "start": "1721299",
    "end": "1728479"
  },
  {
    "text": "it work that's a great question I have a few thoughts on that the first is that spire",
    "start": "1728479",
    "end": "1735349"
  },
  {
    "text": "doesn't support TRL's or like traditional exercise or 9 revocation as you know it today the",
    "start": "1735349",
    "end": "1743720"
  },
  {
    "text": "answer that we have right now is is that you because all this stuff is automated a short lived certificate is a pretty",
    "start": "1743720",
    "end": "1750409"
  },
  {
    "text": "reasonable thing to have so you know maybe a day maybe two days could be as short as an hour too so this kind of you",
    "start": "1750409",
    "end": "1757909"
  },
  {
    "text": "know it's not quite revocation but it it gets close and it can get close without providing a lot of the headaches that",
    "start": "1757909",
    "end": "1764239"
  },
  {
    "text": "come with crl management I don't know if you're familiar with some of those headaches the workload API the smithy",
    "start": "1764239",
    "end": "1770539"
  },
  {
    "text": "specification for workload API does support sending CRLs so if you have it",
    "start": "1770539",
    "end": "1778309"
  },
  {
    "text": "now the spire implementation doesn't support CRO but if you have a Smithfield limitation which does the kind of cool",
    "start": "1778309",
    "end": "1784039"
  },
  {
    "text": "thing about that is we can push a crl straight into the workload so you don't have all these failure modes associated",
    "start": "1784039",
    "end": "1790340"
  },
  {
    "text": "with like having to go fetch it and if that endpoint is down and how long does that take and so on and so forth so that's the general replication answer",
    "start": "1790340",
    "end": "1798440"
  },
  {
    "text": "we also have a feature where if you know at a particular node was compromised",
    "start": "1798440",
    "end": "1803450"
  },
  {
    "text": "you can evict that node and it will prevent that node from being able to rotate or obtain any further identities",
    "start": "1803450",
    "end": "1810080"
  },
  {
    "text": "so that's revocation II I hope that answers your question hi during the",
    "start": "1810080",
    "end": "1822039"
  },
  {
    "text": "architecture you mentioned that the agent and the server talked to for",
    "start": "1822039",
    "end": "1827960"
  },
  {
    "text": "example kubernetes or AWS and does spire",
    "start": "1827960",
    "end": "1833539"
  },
  {
    "text": "has some implementation on on-premise instances right so",
    "start": "1833539",
    "end": "1842799"
  },
  {
    "text": "that for on-prem what you're mostly worried about I think is no data station",
    "start": "1843390",
    "end": "1849110"
  },
  {
    "text": "localization can be done using UNIX or other primitives that are widely available no data station is a big",
    "start": "1849110",
    "end": "1855210"
  },
  {
    "text": "concern for on-prem but you know because it's pluggable you can write kind of whatever makes sense for you we have two",
    "start": "1855210",
    "end": "1862190"
  },
  {
    "text": "kind of standard approaches that we see people taking for on-prem right now the",
    "start": "1862190",
    "end": "1867600"
  },
  {
    "text": "first is to use what we call join token so we have a method of quote attestation",
    "start": "1867600",
    "end": "1873450"
  },
  {
    "text": "where you can ask the server to generate a one-time use token and then you pass that to operators or some configuration",
    "start": "1873450",
    "end": "1879900"
  },
  {
    "text": "management or something like this passes that token to the agent which is booting and then we kind of short-circuit some",
    "start": "1879900",
    "end": "1885540"
  },
  {
    "text": "of the more advanced no doubt to station stuff in that way so that's one option another option is to use TPMS or trusted",
    "start": "1885540",
    "end": "1892799"
  },
  {
    "text": "platform module which is a chip that ships on most servers these days and that gives a lot of nice cryptographic",
    "start": "1892799",
    "end": "1899309"
  },
  {
    "text": "primitives and it's actually the strongest attestation method that we have today we don't have support for TPM",
    "start": "1899309",
    "end": "1907980"
  },
  {
    "text": "in core aspire but you could certainly build a node a tester plug-in that interfaces with the TPM some of the",
    "start": "1907980",
    "end": "1914730"
  },
  {
    "text": "challenges there are around procurement you have to be able to understand which serial numbers are coming in and when",
    "start": "1914730",
    "end": "1921059"
  },
  {
    "text": "and where they should be coming online and so on and so forth so those implementations tend to be kind of a",
    "start": "1921059",
    "end": "1926100"
  },
  {
    "text": "little bit specific to the sites that they run on but the interfaces are all set up and because the agent and server",
    "start": "1926100",
    "end": "1932580"
  },
  {
    "text": "can do challenge or spots together then use a what they call a TPM attestation quote as possible",
    "start": "1932580",
    "end": "1940760"
  },
  {
    "text": "so another question you have is I think this is awesome stuff for workloads have you ever thought about using this in a",
    "start": "1951740",
    "end": "1958260"
  },
  {
    "text": "catastrophic peon Corp environment to give certificate to devices yeah",
    "start": "1958260",
    "end": "1964320"
  },
  {
    "text": "so the spiffy project until now has had",
    "start": "1964320",
    "end": "1971400"
  },
  {
    "text": "a lot to worry and reason about and a lot of work to do so we kind of cut scope and said we were explicitly going",
    "start": "1971400",
    "end": "1977400"
  },
  {
    "text": "to call user off and user identity out of scope for spiffy project so we don't",
    "start": "1977400",
    "end": "1983070"
  },
  {
    "text": "have any text that directly addresses it and we don't have any like big use cases to show for it however that's not to say",
    "start": "1983070",
    "end": "1990270"
  },
  {
    "text": "that it couldn't be used to solve some of these problems a community member reached out to me a few days ago and",
    "start": "1990270",
    "end": "1997170"
  },
  {
    "text": "said that he was building an Oda tester that could drag a user through an OAuth",
    "start": "1997170",
    "end": "2003500"
  },
  {
    "text": "flow so you begin to kind of see how you",
    "start": "2003500",
    "end": "2008750"
  },
  {
    "text": "might be able to bend the implementation to solve some of these challenges but it certainly was not it was not",
    "start": "2008750",
    "end": "2015020"
  },
  {
    "text": "purposefully built for this but perhaps the interfaces are there to make it work in this capacity",
    "start": "2015020",
    "end": "2022269"
  },
  {
    "text": "okay thank you everybody [Applause]",
    "start": "2027909",
    "end": "2034459"
  }
]