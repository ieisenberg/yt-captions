[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "good afternoon everyone we finally hit two o'clock so let's get started first off I have two questions of the",
    "start": "30",
    "end": "5910"
  },
  {
    "text": "room who has never built a cloud native application before okay so good chunk of",
    "start": "5910",
    "end": "13110"
  },
  {
    "text": "you have some experience secondly how many of you would say that you are an intermediate developer or more",
    "start": "13110",
    "end": "18210"
  },
  {
    "text": "experienced in general okay so we see a pretty common theme here most of you",
    "start": "18210",
    "end": "24810"
  },
  {
    "text": "have a lot of experience but building cloud stuff is still something new so how many people think we're gonna have a",
    "start": "24810",
    "end": "30449"
  },
  {
    "text": "question just to know how to pace things nobody thinks gonna have questions okay",
    "start": "30449",
    "end": "37820"
  },
  {
    "text": "so I worked for a Czech France Czech friend is an online booking platform for small businesses to enterprise we deal",
    "start": "38329",
    "end": "44940"
  },
  {
    "text": "with inventory management and let our clients customers self checkout items I",
    "start": "44940",
    "end": "51920"
  },
  {
    "text": "do a lot of things that check front I am the lead dev ops engineer which means",
    "start": "51920",
    "end": "57030"
  },
  {
    "text": "that I do a lot of ops and a lot of devs and no one quite knows what that is so I used to be the sole operator these days",
    "start": "57030",
    "end": "62789"
  },
  {
    "text": "I'm more of a developer in particular I'm in charge of our cloud operations be",
    "start": "62789",
    "end": "67950"
  },
  {
    "text": "that managing our cloud systems and actually retrofitting old systems or",
    "start": "67950",
    "end": "73260"
  },
  {
    "text": "building new systems to be cloud native rather than being a swarm of horrible VMs so in this talk we're going to look",
    "start": "73260",
    "end": "81869"
  },
  {
    "text": "at three main aspects of how to do cloud stuff we're going to look at what a",
    "start": "81869",
    "end": "87479"
  },
  {
    "text": "cloud native app is we're going to look at what a cloud platform is and what the implications of our apps are and then",
    "start": "87479",
    "end": "92640"
  },
  {
    "text": "we're going to get to the meat of the talk which is how do we actually develop for a cloud platform and develop for that behavior if you have a particular",
    "start": "92640",
    "end": "100079"
  },
  {
    "text": "question about the thing that's actively being talked about just raise your hand otherwise we'll take more general what",
    "start": "100079",
    "end": "105570"
  },
  {
    "text": "if or suppose questions at the end so",
    "start": "105570",
    "end": "111420"
  },
  {
    "start": "110000",
    "end": "110000"
  },
  {
    "text": "firstly what makes software cloud native it's a very open topic cognitive computing foundation is arguably the",
    "start": "111420",
    "end": "117000"
  },
  {
    "text": "authority on the subject and they have a particular definition that software has to be containerized dynamically",
    "start": "117000",
    "end": "122850"
  },
  {
    "text": "orchestrated and micro service-oriented now number two is the part that we should really be caring about because",
    "start": "122850",
    "end": "128670"
  },
  {
    "text": "this is where the requirements come from if we have dynamic orchestration this means that we have ephemeral",
    "start": "128670",
    "end": "133830"
  },
  {
    "text": "systems we have things being scheduled up and down as need be so because of that it naturally it's containerization",
    "start": "133830",
    "end": "140820"
  },
  {
    "text": "in some form be that actual containers be the application images because we need a system that we can easily ship",
    "start": "140820",
    "end": "146310"
  },
  {
    "text": "out in units rather than trying to maintain individual VMs and processing states it also means that",
    "start": "146310",
    "end": "152670"
  },
  {
    "text": "service-oriented architecture even if not actual micro service has become very valuable because different systems have",
    "start": "152670",
    "end": "158310"
  },
  {
    "text": "different constraints and we need be able to handle those separately even if it's just a monolithic app and its database there becomes more separation",
    "start": "158310",
    "end": "164910"
  },
  {
    "text": "in that system as I said the definition of what is isn't can arguably very vague",
    "start": "164910",
    "end": "171330"
  },
  {
    "text": "but there's fundamentally a couple properties that cloud systems have and that legacy systems or at least non",
    "start": "171330",
    "end": "177480"
  },
  {
    "text": "cloud systems don't have so in a cloud system scaling load balancing replication are all very automated",
    "start": "177480",
    "end": "182790"
  },
  {
    "text": "things you don't have to touch a lot to actually make the system do what you want and application rollouts are simply",
    "start": "182790",
    "end": "190470"
  },
  {
    "text": "as pushing out a new image rather than going in using ansible using puppet using manual operations to get things",
    "start": "190470",
    "end": "197220"
  },
  {
    "text": "the way you want that's not the kind of thing that usually should happen in a non cloud system of course this is your bread and butter you have a team of",
    "start": "197220",
    "end": "203010"
  },
  {
    "text": "assisted men's going and changing things you'll have some machines that are broken because someone did something wrong and you won't be able to easily",
    "start": "203010",
    "end": "209100"
  },
  {
    "text": "change your fleet especially if you don't have some kind of scaling available at the database level so",
    "start": "209100",
    "end": "217470"
  },
  {
    "text": "what's a cloud platform the first thing is that a cloud platform is actually",
    "start": "217470",
    "end": "223200"
  },
  {
    "start": "221000",
    "end": "221000"
  },
  {
    "text": "necessary for any cloud system ultimately it's part of the definition there has to be sawing what's doing is",
    "start": "223200",
    "end": "228570"
  },
  {
    "text": "managing your cloud platform can be cribben Nettie's it could be something more specific like rancher it could be",
    "start": "228570",
    "end": "235200"
  },
  {
    "text": "hundreds of lines of horrible bass scripts that somebody or company wrote the point being it's the management",
    "start": "235200",
    "end": "240390"
  },
  {
    "text": "system it's responsible for dealing with the actual infrastructure so allocation teardown and spin up of the resources",
    "start": "240390",
    "end": "247650"
  },
  {
    "text": "such as VMS disks it's responsible for actually pushing the applications out so",
    "start": "247650",
    "end": "253920"
  },
  {
    "text": "going from some kind of an image to turning that into actual instances and responsible for handling the network",
    "start": "253920",
    "end": "261228"
  },
  {
    "start": "261000",
    "end": "261000"
  },
  {
    "text": "first thing that the platform does is it is the runtime environment somewhat analogous to the scripting engine of a scripting",
    "start": "261680",
    "end": "268200"
  },
  {
    "text": "language so it handles the actual physical platform things it hell's the container runtime if you have a docker",
    "start": "268200",
    "end": "275040"
  },
  {
    "text": "image you can't run it without docker or without some kind of container management system so that's a part of",
    "start": "275040",
    "end": "280500"
  },
  {
    "text": "the responsibility it handles config and secret injection at runtime and it handles scaling and",
    "start": "280500",
    "end": "287160"
  },
  {
    "text": "the networking so we'll get back to this later but it's important to note that no matter what we try to do we can't fully",
    "start": "287160",
    "end": "293669"
  },
  {
    "text": "every D couple applications from the platform it was always going to be some kind of linkage there it's another thing",
    "start": "293669",
    "end": "301620"
  },
  {
    "text": "it does is a ephemeral application this is why we really like cloud platforms because resources are just spun up and",
    "start": "301620",
    "end": "307020"
  },
  {
    "text": "down as need be this also really bites us and it's why data is so scary because we're used to",
    "start": "307020",
    "end": "312840"
  },
  {
    "text": "data having a very constant silo that never changes and never disappears where",
    "start": "312840",
    "end": "318510"
  },
  {
    "text": "as things changing and disappearing is the absolute backbone of any kind of",
    "start": "318510",
    "end": "325110"
  },
  {
    "text": "cloud system you're specifically engineering against that if you want help isn't data as part of handling the",
    "start": "325110",
    "end": "334200"
  },
  {
    "start": "331000",
    "end": "331000"
  },
  {
    "text": "network cloud platform responsible for translating an actual request for an abstract service into concretely going",
    "start": "334200",
    "end": "340950"
  },
  {
    "text": "to assist sorry specific instance so this behavior is usually fairly abstract",
    "start": "340950",
    "end": "347669"
  },
  {
    "text": "it can be very crude or specific there's lots of ways to change the behavior such as things like flannel or sto that are",
    "start": "347669",
    "end": "354150"
  },
  {
    "text": "specifically modifying how that works usually your application doesn't have to",
    "start": "354150",
    "end": "359430"
  },
  {
    "text": "deal with that logic itself but sometimes it does for example ingresses they're usually fairly specific and limited if you want to have very",
    "start": "359430",
    "end": "364740"
  },
  {
    "text": "specific features such as one instance that I personally had trouble with is custom runtime TLS certificates from",
    "start": "364740",
    "end": "370350"
  },
  {
    "text": "white labeled students white labeled websites on a load balancer that's pretty difficult because load balancers",
    "start": "370350",
    "end": "376770"
  },
  {
    "text": "and ingresses are specifically built in certain ways in a lot of platforms it doesn't make them amenable to easy changes or modifications okay so now we",
    "start": "376770",
    "end": "385919"
  },
  {
    "text": "know a little bit about what the platform is it kind of what we're working with so how do we actually develop for it so in this talk because",
    "start": "385919",
    "end": "393060"
  },
  {
    "text": "it's aimed at people who have at least somewhat our amount of skill with developing we're going to try to focus on what makes this different from",
    "start": "393060",
    "end": "398970"
  },
  {
    "text": "developing for more systems essentially if you took your knowledge from ten years ago what would be broken or bad or slow in a cloud",
    "start": "398970",
    "end": "406230"
  },
  {
    "text": "environment so there's a lot of things that we can focus on I'm gonna try to focus on high-concept here because we're",
    "start": "406230",
    "end": "411600"
  },
  {
    "text": "short on time so in particular I've kind of plucked out persistent data storage",
    "start": "411600",
    "end": "417180"
  },
  {
    "text": "service coupling internal API calls and data flow and then how we handle testing and local development first up with",
    "start": "417180",
    "end": "424650"
  },
  {
    "text": "persistent data storage I've identified four fundamental patterns for application we can have only one replica",
    "start": "424650",
    "end": "430320"
  },
  {
    "text": "we can charge our data without replication I call this unreplicated shards so it's just when you have",
    "start": "430320",
    "end": "436740"
  },
  {
    "text": "multiple distinct databases none of them are replicated but you can have specific things on a specific",
    "start": "436740",
    "end": "442380"
  },
  {
    "text": "database you can have multiple replicas with volatile data that session specific or you can have multiple replicas with",
    "start": "442380",
    "end": "448230"
  },
  {
    "text": "runtime application we'll look at each one of these in a bit more detail and how you use it first one is just don't",
    "start": "448230",
    "end": "455760"
  },
  {
    "start": "454000",
    "end": "454000"
  },
  {
    "text": "replicate you usually don't want this if it goes down it's lost if it's getting",
    "start": "455760",
    "end": "463470"
  },
  {
    "text": "swapped out with an upgrade it's offline for a couple seconds you might want this for services where the impact is fairly",
    "start": "463470",
    "end": "470370"
  },
  {
    "text": "low for example we have a fairly small company and the people who handle ops are one decade person and me a little",
    "start": "470370",
    "end": "477030"
  },
  {
    "text": "bit so we don't cluster our Redis setup which we use for a couple things in particular one thing we're reticent",
    "start": "477030",
    "end": "483300"
  },
  {
    "text": "clustered is for our translation master for being able to translate our internal",
    "start": "483300",
    "end": "488610"
  },
  {
    "text": "English strings into your customers multi-language strings we don't cluster it because the impact is if that one",
    "start": "488610",
    "end": "496170"
  },
  {
    "text": "instance goes offline people can't save new global translations it doesn't stop the basic functionality from working so",
    "start": "496170",
    "end": "502650"
  },
  {
    "text": "that's an okay trade-off for us just based on operational concerns next",
    "start": "502650",
    "end": "507870"
  },
  {
    "start": "507000",
    "end": "507000"
  },
  {
    "text": "pattern is unrefuted shards this is a pretty common strategy both for a kind of manual load balancing and when you",
    "start": "507870",
    "end": "513300"
  },
  {
    "text": "naturally outgrow the ability to have everything in one database it's when you pick some kind of unit typically an",
    "start": "513300",
    "end": "518729"
  },
  {
    "text": "account and you specifically put on a certain system usually it's like US West one u.s. East one things like that so it",
    "start": "518730",
    "end": "526470"
  },
  {
    "text": "lets you scale up your system as a whole but the interval components aren't actually scaling you still have a database where",
    "start": "526470",
    "end": "531860"
  },
  {
    "text": "if it goes down and gets overloaded it's just not working",
    "start": "531860",
    "end": "536770"
  },
  {
    "start": "536000",
    "end": "536000"
  },
  {
    "text": "food strategy is having multiple volatile copies it's really easy to do by accident and I've seen a lot of bugs",
    "start": "537040",
    "end": "542750"
  },
  {
    "text": "that wind up being something is stored on disk because if it's persistent but there's multiple instances it's a good",
    "start": "542750",
    "end": "549860"
  },
  {
    "text": "pattern for caching but I would highly recommend ever planning on using it just because there's always going to be circumstances where the data becomes",
    "start": "549860",
    "end": "555980"
  },
  {
    "text": "ephemeral when you don't expect it the last strategy is what we always really want we want to be able just have a",
    "start": "555980",
    "end": "563300"
  },
  {
    "start": "559000",
    "end": "559000"
  },
  {
    "text": "bunch of databases everything works together we hit a database we read and write to it and we don't have to worry",
    "start": "563300",
    "end": "569480"
  },
  {
    "text": "about having only one this is the goal but it's really hard especially for the",
    "start": "569480",
    "end": "575780"
  },
  {
    "text": "operations side so this is one of the first things where you really have to deal with the operations and dev",
    "start": "575780",
    "end": "580790"
  },
  {
    "text": "planning to actually make sure that what you want to do is feasible to actually run so some databases are very good at",
    "start": "580790",
    "end": "589250"
  },
  {
    "text": "this cassandra is one of worked with a fair batch so Cassandra is naturally multi master it has a lot of quirks but",
    "start": "589250",
    "end": "595160"
  },
  {
    "text": "one of the things that's best at is you just have a lot of instances and you don't have to worry about many of the",
    "start": "595160",
    "end": "600410"
  },
  {
    "text": "concerns around scaling if you take something that doesn't scale very well Postgres can be an example of this we",
    "start": "600410",
    "end": "605690"
  },
  {
    "text": "use Postgres a law it scales nicely for read replicas but the Masters are something you primarily deal with",
    "start": "605690",
    "end": "610730"
  },
  {
    "text": "election for so this means you have to handle election of a single master deal with kind of playing hot potato there",
    "start": "610730",
    "end": "616340"
  },
  {
    "text": "and if you have too many rights or too much load for the master then tough luck",
    "start": "616340",
    "end": "623110"
  },
  {
    "text": "usually unfortunately databases are not as you all know something you can just",
    "start": "624160",
    "end": "629300"
  },
  {
    "text": "easily swap out so you need to kind of understand what your runtime loads going to be what your needs are on latency and",
    "start": "629300",
    "end": "634880"
  },
  {
    "text": "replication are going to be and pick a database based on that so if you're trying to run something like Postgres",
    "start": "634880",
    "end": "640220"
  },
  {
    "text": "and you just have too much writing going on you're gonna have to look at sharding it or you're gonna have to look at changing the way you store data and",
    "start": "640220",
    "end": "646910"
  },
  {
    "text": "adopting something else like Cassandra or like or another document oriented system that lets you actually",
    "start": "646910",
    "end": "652580"
  },
  {
    "text": "replicate the scale you need to as I",
    "start": "652580",
    "end": "657620"
  },
  {
    "text": "kind of outlined a bit in last side replicating data is pretty tough there's just a lot of concerns around it and databases that are more friendly toward",
    "start": "657620",
    "end": "664220"
  },
  {
    "text": "to application ten Hannelore this internally whereas ones they're less friendly tend to outsource",
    "start": "664220",
    "end": "669570"
  },
  {
    "text": "a lot of that to kind of custom scripting custom tooling and manual operations you have to deal with allocating persistent volumes binding to",
    "start": "669570",
    "end": "676740"
  },
  {
    "text": "those connecting to either seed nodes or masters and dealing with electing and maintaining those ultimately especially",
    "start": "676740",
    "end": "683640"
  },
  {
    "text": "if you're a small team third party tools can be really handy for this so GCS or s3 for images is a really good example",
    "start": "683640",
    "end": "689190"
  },
  {
    "text": "you are almost always okay with just serving images from a CDN in most use cases and suddenly you don't have to",
    "start": "689190",
    "end": "694410"
  },
  {
    "text": "worry about replicating all your images locally our next topic of what's",
    "start": "694410",
    "end": "700410"
  },
  {
    "text": "difficult is service coupling so there's kind of two parts for services but first",
    "start": "700410",
    "end": "705630"
  },
  {
    "text": "we're just going to look at how services interact together we want to keep things they're interacting a lot together close",
    "start": "705630",
    "end": "712440"
  },
  {
    "text": "together so in kubernetes which we're probably almost familiar with deployments naturally are creating unit",
    "start": "712440",
    "end": "719220"
  },
  {
    "text": "called a pod which contains multiple containers so there's nothing too complicated there as far as setting that",
    "start": "719220",
    "end": "725370"
  },
  {
    "text": "up what's special about pods is you create containers that are co-located",
    "start": "725370",
    "end": "730530"
  },
  {
    "text": "and Co scheduled so this one-to-one state between your containers in a pod",
    "start": "730530",
    "end": "735690"
  },
  {
    "text": "and they're always on the same machine so this is especially useful if you have high latency concerns for your",
    "start": "735690",
    "end": "741870"
  },
  {
    "text": "connectivity we want a couple things that are calling one another law either",
    "start": "741870",
    "end": "747660"
  },
  {
    "start": "743000",
    "end": "743000"
  },
  {
    "text": "one it's very very critical that a call goes through okay or when overall you're",
    "start": "747660",
    "end": "753540"
  },
  {
    "text": "making a lot of back-and-forth calls so if you have a particular service that makes many many calls to the database",
    "start": "753540",
    "end": "759540"
  },
  {
    "text": "over the course of a single operation you're probably going to want to be able to put those things in a pod together so that you're just going over the local",
    "start": "759540",
    "end": "765930"
  },
  {
    "text": "network socket as opposed to hopping to the next rack or the next data center",
    "start": "765930",
    "end": "770990"
  },
  {
    "text": "it's also good if you have any kind of system that relies on particular state between services rather than dealing",
    "start": "770990",
    "end": "776220"
  },
  {
    "text": "with nasty pinning at the network layer you can just inherently know that a particular instance is going to talk to",
    "start": "776220",
    "end": "782070"
  },
  {
    "text": "another particular instance always here's a quick example of using the",
    "start": "782070",
    "end": "787920"
  },
  {
    "text": "shared state to our advantage it's a pattern that's often used when there is frequent content changes or content changes that aren't part of the",
    "start": "787920",
    "end": "794430"
  },
  {
    "text": "source code you can simply have a web server and a shared disk with a file pulling",
    "start": "794430",
    "end": "800590"
  },
  {
    "text": "image that is taking data from an external source pulling it on to the local disk this way the nginx image in",
    "start": "800590",
    "end": "806800"
  },
  {
    "text": "our example doesn't have to ever be updated with new content so we don't have to worry about swapping everything out or putting content into our build",
    "start": "806800",
    "end": "814060"
  },
  {
    "text": "system so service coupling can solve a",
    "start": "814060",
    "end": "819910"
  },
  {
    "start": "817000",
    "end": "817000"
  },
  {
    "text": "lot of problems around date and see at least primitive ones but we can't couple everything together we have a lot of",
    "start": "819910",
    "end": "826540"
  },
  {
    "text": "concerns around replication of some services in particular ones with persistent data as we kind of talked",
    "start": "826540",
    "end": "831610"
  },
  {
    "text": "about there's a lot of issues around dealing with the resources that spin up the replication loading things if we try",
    "start": "831610",
    "end": "837910"
  },
  {
    "text": "to pin a stateless service along with the database we're gonna want to find that the stateless service is hard to",
    "start": "837910",
    "end": "842950"
  },
  {
    "text": "schedule it's hard to spin up because it's limited by what the database can do we're also going to have trouble with",
    "start": "842950",
    "end": "848230"
  },
  {
    "text": "allocating resources unfortunately putting resources in a pod",
    "start": "848230",
    "end": "853840"
  },
  {
    "text": "means that you're specifying per container what the resource allocations are going to be so suddenly you might",
    "start": "853840",
    "end": "859180"
  },
  {
    "text": "wind up needing 12 units of CPU to schedule your pseudo monolithic application when really you're trying to",
    "start": "859180",
    "end": "865630"
  },
  {
    "text": "just scale up the reporting system and because you can't scale selectively you",
    "start": "865630",
    "end": "871660"
  },
  {
    "text": "are going to over allocate stuff as well as having trouble just finding a big enough resource block to put an entire replication of the pod so this starts",
    "start": "871660",
    "end": "879190"
  },
  {
    "text": "getting into monolith territory as far as your runtime concerns related to",
    "start": "879190",
    "end": "884890"
  },
  {
    "text": "services there's also internal data flow I call the internal API calls but it's a much more open subject it's not just how",
    "start": "884890",
    "end": "890890"
  },
  {
    "text": "you look at services together it's how you actually transfer data between those services cloud platforms tend to exaggerate this latency by means of",
    "start": "890890",
    "end": "898150"
  },
  {
    "text": "either physically separating things further such as breaking up a monolith or by the encouragement to go for a more",
    "start": "898150",
    "end": "904180"
  },
  {
    "text": "micro service oriented design something that used to be local network socket or even just a function call away is now a",
    "start": "904180",
    "end": "910090"
  },
  {
    "text": "little bit further that latency is often just nanoseconds to milliseconds but this can vastly add up depending on your",
    "start": "910090",
    "end": "916120"
  },
  {
    "text": "call flow and your architecture the first thing you can do is use threads or",
    "start": "916120",
    "end": "922150"
  },
  {
    "text": "use a sec check front works there's a lot of PHP and as those of you have unfortunately dealt with PHP know this",
    "start": "922150",
    "end": "928180"
  },
  {
    "text": "isn't very possible but you can get out of a lot of hot water just by paralyzing every single",
    "start": "928180",
    "end": "934200"
  },
  {
    "text": "request that you are able to that's independent so that you're not waiting on all these back-and-forth calls that",
    "start": "934200",
    "end": "939900"
  },
  {
    "text": "said you can't always do that sometimes your language doesn't support it and sometimes you just wind up in a",
    "start": "939900",
    "end": "945120"
  },
  {
    "text": "situation where the fault is an upstream design that you're having to go back and forth with a lot in that case you need",
    "start": "945120",
    "end": "950970"
  },
  {
    "text": "to go to the upstream one thing you can do is simplify your API actions so REST",
    "start": "950970",
    "end": "958020"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "API is in particular often guilty of secretly just being database credit this",
    "start": "958020",
    "end": "963780"
  },
  {
    "text": "is unfortunate if your data is a little bit too normalized because you'll wind up having to make a bunch of API calls to do one high-level action so it's very",
    "start": "963780",
    "end": "971280"
  },
  {
    "text": "common I'm sure you've all experienced this and going to an API querying it selecting some data and then it's",
    "start": "971280",
    "end": "977280"
  },
  {
    "text": "sorting out data into your next query either for updating things or for trying to fetch something ideally the API",
    "start": "977280",
    "end": "983700"
  },
  {
    "text": "endpoints can be designed in such a way that you have one discrete action wrapped up in one endpoint rather than",
    "start": "983700",
    "end": "988950"
  },
  {
    "text": "trying to step through multiple pseudo database calls you can create batch",
    "start": "988950",
    "end": "995340"
  },
  {
    "start": "994000",
    "end": "994000"
  },
  {
    "text": "endpoints so this allows you to escape but tiny bit of networking overhead and it allows you to leverage any shared",
    "start": "995340",
    "end": "1001670"
  },
  {
    "text": "work common to your calls so doing query",
    "start": "1001670",
    "end": "1006710"
  },
  {
    "text": "planning and pre-processing initializing data structures information that you have to fetch before handling requests",
    "start": "1006710",
    "end": "1011960"
  },
  {
    "text": "if you can make this common then you can vastly improve your overall response time this is really useful if you're",
    "start": "1011960",
    "end": "1017840"
  },
  {
    "text": "trying to bulk load something like say if you have a social media application and you're trying to load a whole bunch",
    "start": "1017840",
    "end": "1023060"
  },
  {
    "text": "of posts it's really nice to be able to do that in one fetch versus in a single request trying to load 50 different",
    "start": "1023060",
    "end": "1028640"
  },
  {
    "text": "things and making 50 different calls off I have a quick example for how this can be beneficial is C cool I'll get to it",
    "start": "1028640",
    "end": "1034250"
  },
  {
    "text": "later just because I can talk about some testing things at the same time sorry I",
    "start": "1034250",
    "end": "1041390"
  },
  {
    "text": "just want to check I'm doing for time here okay we can easily cache things especially if",
    "start": "1041390",
    "end": "1048438"
  },
  {
    "start": "1045000",
    "end": "1045000"
  },
  {
    "text": "we design our services to be stateless such that we don't have to worry about cache expiration so we can design this",
    "start": "1048439",
    "end": "1053480"
  },
  {
    "text": "for a more processing heavy things at the server side where we have to make the network call but we don't have to",
    "start": "1053480",
    "end": "1059480"
  },
  {
    "text": "actually worry about reprocessing anything if we're more worried about Network call or just eating every last",
    "start": "1059480",
    "end": "1065240"
  },
  {
    "text": "bit of performance or wood out of it that we can we're going to want to put it within the client so that the call",
    "start": "1065240",
    "end": "1071570"
  },
  {
    "text": "never has to actually leave the pod or leave the container even so for testing",
    "start": "1071570",
    "end": "1079970"
  },
  {
    "start": "1077000",
    "end": "1077000"
  },
  {
    "text": "this becomes awkward the more components you have suddenly instead of having one thing that you just run you have a lot",
    "start": "1079970",
    "end": "1085580"
  },
  {
    "text": "of different things that need to run together you also need to be able to run",
    "start": "1085580",
    "end": "1090830"
  },
  {
    "text": "them whatsoever unfortunately you can wind up in a situation where you have to just install",
    "start": "1090830",
    "end": "1096049"
  },
  {
    "text": "mini cube to get anything done those of you who have done this will know it's not very friendly for developer workflow you can't iterate quickly and you",
    "start": "1096049",
    "end": "1102649"
  },
  {
    "text": "suddenly have to know a lot about the entire application and the operational concerns to just get off the ground we really don't want that and if we don't",
    "start": "1102649",
    "end": "1108890"
  },
  {
    "text": "want to be forced to do that we have to design a little bit with our testing and development concerns in mind ultimately",
    "start": "1108890",
    "end": "1117110"
  },
  {
    "text": "what you want to be able to do is create discrete components of the application that can be run individually either just",
    "start": "1117110",
    "end": "1123470"
  },
  {
    "text": "as trees of services that call one another or with fake endpoints that aren't necessary for your purposes so if",
    "start": "1123470",
    "end": "1129950"
  },
  {
    "text": "you're testing chances are you can only run a service or two and just mock-up things interact with you don't have to",
    "start": "1129950",
    "end": "1135049"
  },
  {
    "text": "worry about everything that's going to call but to do this we need to organize our call flow in such a way that we",
    "start": "1135049",
    "end": "1141320"
  },
  {
    "text": "don't have an absurd number of dependencies for a given action here's a",
    "start": "1141320",
    "end": "1146750"
  },
  {
    "text": "quick example that will probably be fairly easy to understand as far as unit testing goes so for unit testing we want",
    "start": "1146750",
    "end": "1152210"
  },
  {
    "text": "to be able to simplify our actions as much as possible and ultimately here we have some business logic which is just",
    "start": "1152210",
    "end": "1157940"
  },
  {
    "text": "statistics about median that we want to build a test in detail and we care less what detailed testing of the overall",
    "start": "1157940",
    "end": "1164120"
  },
  {
    "text": "function the ocker way to do it is to have one function does everything and suddenly we need to get into the database to write values call the",
    "start": "1164120",
    "end": "1170390"
  },
  {
    "text": "function and then read them out to do our tests this is really awkward especially because the bulk of what we're trying to test in detail isn't",
    "start": "1170390",
    "end": "1176809"
  },
  {
    "text": "nothing to do with the database a nicer way to do it specifically split the logic out into its own function and that way we can",
    "start": "1176809",
    "end": "1183970"
  },
  {
    "text": "call that function without worrying about the database at all to test the business logic and then do a simple test or two for does the whole database",
    "start": "1183970",
    "end": "1191140"
  },
  {
    "text": "process work in terms of services we have a diagram here that kind of represents the same architecture we have",
    "start": "1191140",
    "end": "1197680"
  },
  {
    "text": "our database an interface for it reporting API and reporting back-end the reporting back-end represents that",
    "start": "1197680",
    "end": "1203020"
  },
  {
    "text": "statistics ought median call in the actual code example this is something that in this architecture it doesn't",
    "start": "1203020",
    "end": "1208780"
  },
  {
    "text": "depend on anything it doesn't independent database integration because it's having data dumped into it in individual calls so you can test that",
    "start": "1208780",
    "end": "1215440"
  },
  {
    "text": "back end without the database at all and you can also split off different portions of the architecture if need be",
    "start": "1215440",
    "end": "1220780"
  },
  {
    "text": "you could test the reporting API using static payloads even just HTML pages on the inventory fetch API and the",
    "start": "1220780",
    "end": "1227230"
  },
  {
    "text": "reporting back-end so suddenly we've vastly simplified our concerns for what",
    "start": "1227230",
    "end": "1232420"
  },
  {
    "text": "we need to run to either test or develop for a particular service local",
    "start": "1232420",
    "end": "1238270"
  },
  {
    "start": "1237000",
    "end": "1237000"
  },
  {
    "text": "development has a lot of the same concerns as testing does we need to we",
    "start": "1238270",
    "end": "1244750"
  },
  {
    "text": "need to have a limited number of things we need to run it needs to be easy to run them and we need to be able to get the service that we're focusing on up",
    "start": "1244750",
    "end": "1250270"
  },
  {
    "text": "quickly one thing it's very nice for this especially if you can develop small enough services that running them is",
    "start": "1250270",
    "end": "1255610"
  },
  {
    "text": "just install the package manager run the application is you can actually not use docker",
    "start": "1255610",
    "end": "1260980"
  },
  {
    "text": "this has been talked about a number talks so far this week developing with",
    "start": "1260980",
    "end": "1266380"
  },
  {
    "text": "docker or container runtime is not very friendly if you have that make a change build run cycle that's a lot more",
    "start": "1266380",
    "end": "1273850"
  },
  {
    "text": "awkward than the change of line hit the button in the IDE flow so one design",
    "start": "1273850",
    "end": "1279880"
  },
  {
    "text": "that we do a check front is especially with more service-oriented architecture that we're exploring we try to have a docker compose file that deals with all",
    "start": "1279880",
    "end": "1286420"
  },
  {
    "text": "the necessary dependencies of a service for testing or development and then natively run the actual thing that we're",
    "start": "1286420",
    "end": "1291970"
  },
  {
    "text": "developing on this way we don't have to worry about the build cycle at all for a particular component and this just means",
    "start": "1291970",
    "end": "1297430"
  },
  {
    "text": "that we have a special development saj testing docker compose file for each app service ok I've been through a lot of",
    "start": "1297430",
    "end": "1307720"
  },
  {
    "text": "content so the key takeaway is should be that many things wind up being",
    "start": "1307720",
    "end": "1312760"
  },
  {
    "text": "from specific and this involves ultimately a lot of knowledge operations around the platform so you should be",
    "start": "1312760",
    "end": "1319600"
  },
  {
    "text": "actively working with the people who are going to be building and maintaining your cluster ideally before you even lock into specific services or clusters",
    "start": "1319600",
    "end": "1326890"
  },
  {
    "text": "or behaviors as to what you need and how you're going to get it what you really don't want is to wind up with kind of",
    "start": "1326890",
    "end": "1332770"
  },
  {
    "text": "the dev - ops pipeline that a lot of companies have we're selling gets built it gets thrown at the opposite team and",
    "start": "1332770",
    "end": "1338140"
  },
  {
    "text": "it's kind of well just run it figure it out because that doesn't really work you",
    "start": "1338140",
    "end": "1343210"
  },
  {
    "text": "wind up with things that can't scale or you wind up with things just aren't going to be performant in ways that could have been predictable and",
    "start": "1343210",
    "end": "1349000"
  },
  {
    "text": "negotiated in the design phases and service architecture winds up being kind",
    "start": "1349000",
    "end": "1354490"
  },
  {
    "text": "of the be-all and end-all of this we have to split up our services due to different runtime concerns around load",
    "start": "1354490",
    "end": "1359620"
  },
  {
    "text": "and our own data storage and even if we don't go the full micro services route we need to care a lot about how we",
    "start": "1359620",
    "end": "1365560"
  },
  {
    "text": "couple these things and how they interact together so I'm going to go to",
    "start": "1365560",
    "end": "1370600"
  },
  {
    "text": "the quick demo now for doing batch calls",
    "start": "1370600",
    "end": "1380050"
  },
  {
    "text": "with sequel it's only a couple lines of actual logic but I want to kind of prove that that's something that's more",
    "start": "1380050",
    "end": "1385810"
  },
  {
    "text": "performant so I'll open up the IDE with",
    "start": "1385810",
    "end": "1393000"
  },
  {
    "text": "the actual logic here",
    "start": "1393000",
    "end": "1396870"
  },
  {
    "text": "and I'm also going to boot talker",
    "start": "1398950",
    "end": "1403350"
  },
  {
    "text": "okay so we have a pretty simple tool that just is connecting to a database making it query and doing a little bit",
    "start": "1414250",
    "end": "1422140"
  },
  {
    "text": "of clever slash hockey sequel for dynamically inserting something in the",
    "start": "1422140",
    "end": "1427809"
  },
  {
    "text": "where clause so we can select multiple people in this I don't know how to scale",
    "start": "1427809",
    "end": "1434049"
  },
  {
    "text": "this up but trust me it's only like three lines of logic so first we're",
    "start": "1434049",
    "end": "1443650"
  },
  {
    "text": "going to go darker close out we're going to start post grass",
    "start": "1443650",
    "end": "1447900"
  },
  {
    "text": "we're gonna set the Postgres password with an environment variable so that it's not hard-coded everything else is",
    "start": "1453390",
    "end": "1459780"
  },
  {
    "text": "using defaults but we don't want to actually have to put that in the source",
    "start": "1459780",
    "end": "1466110"
  },
  {
    "text": "code itself even for a demo well though the password is demo so okay populate",
    "start": "1466110",
    "end": "1474870"
  },
  {
    "text": "the database now",
    "start": "1474870",
    "end": "1478220"
  },
  {
    "text": "so if I call it with making just one query it's only according for one ID I",
    "start": "1485440",
    "end": "1490780"
  },
  {
    "text": "get point zero one four milliseconds and",
    "start": "1490780",
    "end": "1496930"
  },
  {
    "text": "if I query again it's bouncing between about point one and that so I have a pre",
    "start": "1496930",
    "end": "1502990"
  },
  {
    "text": "perhaps line that's just making a lot of queries to different ideas it's just making the one call of main tie but it's",
    "start": "1502990",
    "end": "1509350"
  },
  {
    "text": "throwing in I think forty different IDs that it's looking for but because this",
    "start": "1509350",
    "end": "1515620"
  },
  {
    "text": "is only one query we're still seeing it",
    "start": "1515620",
    "end": "1522940"
  },
  {
    "text": "in the same time range it's still showing up between 0.01 and point zero one five milliseconds so if we were to",
    "start": "1522940",
    "end": "1530590"
  },
  {
    "text": "stack that up doc could become very substantial very quickly if we were to make all those calls synchronously but",
    "start": "1530590",
    "end": "1536710"
  },
  {
    "text": "because we're making one query we're taking advantage of the fact that the quarry planner is already running and we're already scanning for the data it",
    "start": "1536710",
    "end": "1543400"
  },
  {
    "text": "was a tiny bit of obviously overhead for more data that you're selecting but it's almost trivial in comparison just making",
    "start": "1543400",
    "end": "1549340"
  },
  {
    "text": "the call that many times",
    "start": "1549340",
    "end": "1552090"
  },
  {
    "text": "I'm sorry I appear to have lost my slides",
    "start": "1562470",
    "end": "1566419"
  },
  {
    "text": "okay so I have a few pieces of suggested reading here personally although there's no substitute for experience I find it",
    "start": "1571010",
    "end": "1577560"
  },
  {
    "start": "1572000",
    "end": "1572000"
  },
  {
    "text": "very helpful to have tutorials and have books and have high-level or reviews that deliver a lot of the concepts to",
    "start": "1577560",
    "end": "1583350"
  },
  {
    "text": "you so that you actually know where to be exploring yourself in particular I probably recommend designing distributed",
    "start": "1583350",
    "end": "1588840"
  },
  {
    "text": "systems which I read only a couple weeks ago but it outlines a lot of kind of the",
    "start": "1588840",
    "end": "1593970"
  },
  {
    "text": "basic patterns in cloud systems kind of like container level patterns for what you traditionally have as",
    "start": "1593970",
    "end": "1599600"
  },
  {
    "text": "object-oriented patterns okay so I'm",
    "start": "1599600",
    "end": "1609180"
  },
  {
    "text": "guessing that a few of you probably have questions about this kind of stuff so there's a microphone up here or if you",
    "start": "1609180",
    "end": "1614580"
  },
  {
    "text": "shout something out I can repeat it",
    "start": "1614580",
    "end": "1618470"
  },
  {
    "text": "thank you for your talk and at this conference I've heard of some people who",
    "start": "1622190",
    "end": "1628290"
  },
  {
    "text": "are starting to do developments also on systems that are running in the cloud on the cloud service and so have you",
    "start": "1628290",
    "end": "1635430"
  },
  {
    "text": "experimented with having instead of having the IDE run it locally which is which is what we do as well so having",
    "start": "1635430",
    "end": "1642690"
  },
  {
    "text": "instead run the code modify the code on the containers as it's running and then",
    "start": "1642690",
    "end": "1647760"
  },
  {
    "text": "testing like developing on that so the pattern of specifically sharing a volume",
    "start": "1647760",
    "end": "1654150"
  },
  {
    "text": "you mean you mean the pattern of sharing a volume with the container and using that locally well having a kind of fire",
    "start": "1654150",
    "end": "1661530"
  },
  {
    "text": "polo that pulls from EEG IDE or as like syncs with the IDE and then actually runs that code and write that pattern",
    "start": "1661530",
    "end": "1669060"
  },
  {
    "text": "can be helpful but it depends exactly on what you're working with sometimes it can be awkward especially",
    "start": "1669060",
    "end": "1674160"
  },
  {
    "text": "in terms of package management to deal with that kind of shared state and I found there's a bit of a false positive",
    "start": "1674160",
    "end": "1680880"
  },
  {
    "text": "that can happen where you have the correct state locally but you're trusting so much that the built container works fine that you then have",
    "start": "1680880",
    "end": "1688050"
  },
  {
    "text": "something that works on your machine you deploy it you go I was using the container image and then it fails on Jenkins okay thank you",
    "start": "1688050",
    "end": "1697520"
  },
  {
    "text": "how much of your time do you spend on tooling for developers um nowadays not",
    "start": "1697890",
    "end": "1705299"
  },
  {
    "text": "much I officially started as assistant min but I've always been more development oriented so I would say that",
    "start": "1705299",
    "end": "1711210"
  },
  {
    "text": "maybe good quarter to a third of my time used to be spent on that but these days we buy more tools or use more mature",
    "start": "1711210",
    "end": "1718860"
  },
  {
    "text": "platforms like kubernetes over in-house VM Management anybody else",
    "start": "1718860",
    "end": "1727639"
  },
  {
    "text": "thank you I'm totally with you on the part where you can locally develop without Cuban",
    "start": "1730160",
    "end": "1737240"
  },
  {
    "text": "itis or mini cube but how would you handle service discovery in that case if you need I mean if you're developing on",
    "start": "1737240",
    "end": "1744020"
  },
  {
    "text": "maybe two services which is reality in a micro service world where in a perfect",
    "start": "1744020",
    "end": "1749930"
  },
  {
    "text": "world you would only need to work on one but they do need to talk to each other",
    "start": "1749930",
    "end": "1755000"
  },
  {
    "text": "and then need to discover each other how would you handle that the practice that I've found best for that is specifically",
    "start": "1755000",
    "end": "1760820"
  },
  {
    "text": "spinning up a composed environment or some kind of bash launcher for your",
    "start": "1760820",
    "end": "1766010"
  },
  {
    "text": "containers and having basically config level routing maybe with defaults for",
    "start": "1766010",
    "end": "1771230"
  },
  {
    "text": "production but always having the ability to inject the host and the port and so on for whatever you're actually trying",
    "start": "1771230",
    "end": "1776990"
  },
  {
    "text": "to connect to so this is perfectly fine if you've got a handful of services maybe you have 30 services that I think",
    "start": "1776990",
    "end": "1782720"
  },
  {
    "text": "is trying to connect to this would be ugly to manage but at that point you have one service connecting to 30 you're starting to have other issues so you're",
    "start": "1782720",
    "end": "1789980"
  },
  {
    "text": "running you're developing services where you doing a feature in containers you're not running them totally from your IDE",
    "start": "1789980",
    "end": "1797960"
  },
  {
    "text": "like Python Java or whatever you're doing no the point of trying to run locally just is that it's a little bit nicer for",
    "start": "1797960",
    "end": "1803750"
  },
  {
    "text": "the thing you're actively working on but for the other dependent services you may as well just throw in a container it's easiest it's not that I've something",
    "start": "1803750",
    "end": "1810110"
  },
  {
    "text": "against containers it's simply that it's a little bit nastier to try to develop in one all the thing that you're",
    "start": "1810110",
    "end": "1815120"
  },
  {
    "text": "actively working on other components it's nice and quick Thanks",
    "start": "1815120",
    "end": "1820990"
  },
  {
    "text": "so I'm getting a little bit of light glare anybody else have a question",
    "start": "1823150",
    "end": "1827670"
  },
  {
    "text": "okay I guess I'll wrap it up there if you have any other questions feel free to approach me personally or send me a",
    "start": "1829830",
    "end": "1835600"
  },
  {
    "text": "message later I'm planning on trying to start some kind of series around development concerns for modern",
    "start": "1835600",
    "end": "1841809"
  },
  {
    "text": "architecture and cloud stuff not sure if it's gonna be office hours or a blog or whatever really depends on what kind of interest there is thank you all for",
    "start": "1841809",
    "end": "1848950"
  },
  {
    "text": "joining [Applause]",
    "start": "1848950",
    "end": "1854489"
  }
]