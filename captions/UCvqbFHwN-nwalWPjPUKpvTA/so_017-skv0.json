[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "okay well uh welcome everyone thank you",
    "start": "240",
    "end": "2720"
  },
  {
    "text": "for joining uh",
    "start": "2720",
    "end": "4880"
  },
  {
    "text": "you know so i'll be talking today about",
    "start": "4880",
    "end": "6319"
  },
  {
    "text": "stream versus batch leveraging m3 and",
    "start": "6319",
    "end": "9120"
  },
  {
    "text": "thanos for real-time aggregation",
    "start": "9120",
    "end": "12799"
  },
  {
    "text": "i guess i just had a quick intro but",
    "start": "12799",
    "end": "17359"
  },
  {
    "text": "take the mask off",
    "start": "17359",
    "end": "18880"
  },
  {
    "text": "all right",
    "start": "18880",
    "end": "20720"
  },
  {
    "text": "sure",
    "start": "20720",
    "end": "21600"
  },
  {
    "text": "that's good yeah no we want to be able",
    "start": "21600",
    "end": "23600"
  },
  {
    "text": "to hear okay um yeah so just quick intro",
    "start": "23600",
    "end": "27039"
  },
  {
    "text": "about myself so yeah developer advocate",
    "start": "27039",
    "end": "28880"
  },
  {
    "text": "at chronosphere",
    "start": "28880",
    "end": "30400"
  },
  {
    "text": "where i help out with the m3 open source",
    "start": "30400",
    "end": "32320"
  },
  {
    "text": "community as a contributor and then i'm",
    "start": "32320",
    "end": "35040"
  },
  {
    "text": "also a member of the cncf of durability",
    "start": "35040",
    "end": "37920"
  },
  {
    "text": "tag",
    "start": "37920",
    "end": "38800"
  },
  {
    "text": "and prior to chronosphere i was a",
    "start": "38800",
    "end": "40239"
  },
  {
    "text": "product manager over at aws",
    "start": "40239",
    "end": "44120"
  },
  {
    "text": "okay so just running through the agenda",
    "start": "44239",
    "end": "45920"
  },
  {
    "text": "for the talk today we're going to start",
    "start": "45920",
    "end": "47840"
  },
  {
    "text": "out going through the problem statement",
    "start": "47840",
    "end": "49600"
  },
  {
    "text": "and an overview of streaming versus",
    "start": "49600",
    "end": "51280"
  },
  {
    "text": "batch aggregation",
    "start": "51280",
    "end": "53280"
  },
  {
    "text": "then we'll go through stream aggregation",
    "start": "53280",
    "end": "54879"
  },
  {
    "text": "with m3 followed by batch aggregation",
    "start": "54879",
    "end": "57600"
  },
  {
    "text": "with thanos and then quick overview at",
    "start": "57600",
    "end": "59840"
  },
  {
    "text": "the end kind of comparing the two",
    "start": "59840",
    "end": "63359"
  },
  {
    "text": "so why does aggregation matter for real",
    "start": "63760",
    "end": "65518"
  },
  {
    "text": "time",
    "start": "65519",
    "end": "67840"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "looking here at this example of a c",
    "start": "68000",
    "end": "69920"
  },
  {
    "text": "advisor dashboard",
    "start": "69920",
    "end": "71760"
  },
  {
    "text": "you can see that so see advisor is a way",
    "start": "71760",
    "end": "73520"
  },
  {
    "text": "to get your resource usage and",
    "start": "73520",
    "end": "75200"
  },
  {
    "text": "performance metrics of all of your",
    "start": "75200",
    "end": "77280"
  },
  {
    "text": "running",
    "start": "77280",
    "end": "78320"
  },
  {
    "text": "pods or containers so kind of cpu",
    "start": "78320",
    "end": "81040"
  },
  {
    "text": "memory kind of your infrastructure level",
    "start": "81040",
    "end": "82799"
  },
  {
    "text": "metrics",
    "start": "82799",
    "end": "84320"
  },
  {
    "text": "it runs as a damon set inside of a",
    "start": "84320",
    "end": "86159"
  },
  {
    "text": "cubelet and then this particular",
    "start": "86159",
    "end": "88080"
  },
  {
    "text": "dashboard we're looking at all of the um",
    "start": "88080",
    "end": "90079"
  },
  {
    "text": "pods within our gateway application but",
    "start": "90079",
    "end": "92400"
  },
  {
    "text": "essentially you're just able to get a",
    "start": "92400",
    "end": "93920"
  },
  {
    "text": "quick uh 10 000 foot view of all of your",
    "start": "93920",
    "end": "97200"
  },
  {
    "text": "of all your applications uh with this",
    "start": "97200",
    "end": "99520"
  },
  {
    "text": "kind of with this dashboard",
    "start": "99520",
    "end": "102960"
  },
  {
    "text": "so zooming in for this example we're",
    "start": "103119",
    "end": "104560"
  },
  {
    "text": "going to look at the this particular",
    "start": "104560",
    "end": "106960"
  },
  {
    "text": "panel here that's highlighted looking at",
    "start": "106960",
    "end": "109360"
  },
  {
    "text": "cpu usage across all of your gateway",
    "start": "109360",
    "end": "111759"
  },
  {
    "text": "pods or containers",
    "start": "111759",
    "end": "114320"
  },
  {
    "text": "so",
    "start": "114320",
    "end": "115759"
  },
  {
    "text": "you know you can see here that it's it's",
    "start": "115759",
    "end": "117439"
  },
  {
    "text": "kind of showing an overview of all your",
    "start": "117439",
    "end": "118960"
  },
  {
    "text": "pods but if we look at behind the scenes",
    "start": "118960",
    "end": "121280"
  },
  {
    "text": "at what's",
    "start": "121280",
    "end": "122560"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "what it takes to really produce these",
    "start": "122560",
    "end": "124640"
  },
  {
    "text": "results you can see that it can it can",
    "start": "124640",
    "end": "127200"
  },
  {
    "text": "lead to",
    "start": "127200",
    "end": "128720"
  },
  {
    "text": "quite a bit of time for your queries to",
    "start": "128720",
    "end": "130479"
  },
  {
    "text": "fully render these results so",
    "start": "130479",
    "end": "132480"
  },
  {
    "text": "the way to advisor is is aggregating or",
    "start": "132480",
    "end": "135120"
  },
  {
    "text": "pulling",
    "start": "135120",
    "end": "137120"
  },
  {
    "text": "this metric this container cpu usage",
    "start": "137120",
    "end": "139280"
  },
  {
    "text": "metric is it's pulling labels across all",
    "start": "139280",
    "end": "141920"
  },
  {
    "text": "of your pods in your in your pod group",
    "start": "141920",
    "end": "144319"
  },
  {
    "text": "so as a result you're getting roughly 51",
    "start": "144319",
    "end": "147120"
  },
  {
    "text": "000 time series and that's going to be",
    "start": "147120",
    "end": "149040"
  },
  {
    "text": "taking over 20 seconds for your results",
    "start": "149040",
    "end": "151440"
  },
  {
    "text": "to render",
    "start": "151440",
    "end": "152560"
  },
  {
    "text": "so and that's just to query this",
    "start": "152560",
    "end": "155280"
  },
  {
    "text": "this metric so if you did any sort of",
    "start": "155280",
    "end": "158080"
  },
  {
    "text": "functions on top like summer max you can",
    "start": "158080",
    "end": "159920"
  },
  {
    "text": "imagine it would take much longer",
    "start": "159920",
    "end": "163120"
  },
  {
    "text": "but in most cases you typically don't",
    "start": "163120",
    "end": "165200"
  },
  {
    "text": "want to you don't need to look at your",
    "start": "165200",
    "end": "167040"
  },
  {
    "text": "your metrics at the per pod level and",
    "start": "167040",
    "end": "168879"
  },
  {
    "text": "you really just need that aggregated",
    "start": "168879",
    "end": "170879"
  },
  {
    "text": "view to see what's happening across all",
    "start": "170879",
    "end": "173200"
  },
  {
    "text": "of your your pods or containers",
    "start": "173200",
    "end": "176800"
  },
  {
    "text": "so you can see here in this example",
    "start": "176800",
    "end": "179040"
  },
  {
    "text": "we've taken the same metric except we've",
    "start": "179040",
    "end": "181280"
  },
  {
    "text": "aggregated it against two labels so",
    "start": "181280",
    "end": "183440"
  },
  {
    "text": "container name and namespace",
    "start": "183440",
    "end": "185599"
  },
  {
    "text": "and by doing that we're kind of we're",
    "start": "185599",
    "end": "187280"
  },
  {
    "text": "also taking the sum of this metric at a",
    "start": "187280",
    "end": "190159"
  },
  {
    "text": "rate of one minute",
    "start": "190159",
    "end": "191840"
  },
  {
    "text": "um and by doing this you're kind of",
    "start": "191840",
    "end": "194000"
  },
  {
    "text": "aggregating prior to query and that's",
    "start": "194000",
    "end": "196239"
  },
  {
    "text": "going to reduce the load on",
    "start": "196239",
    "end": "199920"
  },
  {
    "text": "on query time by quite a bit so you're",
    "start": "199920",
    "end": "201760"
  },
  {
    "text": "going to be",
    "start": "201760",
    "end": "202640"
  },
  {
    "text": "seeing you know seeing your results much",
    "start": "202640",
    "end": "204879"
  },
  {
    "text": "faster so less than a second and that's",
    "start": "204879",
    "end": "206799"
  },
  {
    "text": "because you've aggregated down to",
    "start": "206799",
    "end": "208640"
  },
  {
    "text": "roughly 230 time series",
    "start": "208640",
    "end": "212920"
  },
  {
    "text": "so yeah so that's just an overview of",
    "start": "215120",
    "end": "216640"
  },
  {
    "text": "kind of how aggregation can help with",
    "start": "216640",
    "end": "218720"
  },
  {
    "text": "performance but",
    "start": "218720",
    "end": "220400"
  },
  {
    "text": "a couple different ways of doing",
    "start": "220400",
    "end": "222000"
  },
  {
    "text": "aggregation is streaming in batch",
    "start": "222000",
    "end": "225360"
  },
  {
    "text": "so just to kind of give an overview for",
    "start": "225360",
    "end": "228480"
  },
  {
    "text": "those who might not be familiar between",
    "start": "228480",
    "end": "230080"
  },
  {
    "text": "the two",
    "start": "230080",
    "end": "230959"
  },
  {
    "text": "two ways of aggregation so with stream",
    "start": "230959",
    "end": "232560"
  },
  {
    "text": "aggregation you um have data",
    "start": "232560",
    "end": "235760"
  },
  {
    "text": "being collected continuously or you know",
    "start": "235760",
    "end": "237680"
  },
  {
    "text": "streaming continuously the aggregation",
    "start": "237680",
    "end": "239760"
  },
  {
    "text": "is going to be done",
    "start": "239760",
    "end": "240959"
  },
  {
    "text": "and performed in memory on the ingest",
    "start": "240959",
    "end": "243040"
  },
  {
    "text": "path before being written over to your",
    "start": "243040",
    "end": "244560"
  },
  {
    "text": "time series database so you can kind of",
    "start": "244560",
    "end": "246080"
  },
  {
    "text": "see in the little diagram at the bottom",
    "start": "246080",
    "end": "248000"
  },
  {
    "text": "there and this is typically very useful",
    "start": "248000",
    "end": "251280"
  },
  {
    "text": "for",
    "start": "251280",
    "end": "252959"
  },
  {
    "text": "um for for information that's needed",
    "start": "252959",
    "end": "255120"
  },
  {
    "text": "immediately so for like dashboards for",
    "start": "255120",
    "end": "257280"
  },
  {
    "text": "example um as you know your data is",
    "start": "257280",
    "end": "259440"
  },
  {
    "text": "going to be aggregated in real time and",
    "start": "259440",
    "end": "261040"
  },
  {
    "text": "then available immediately for query",
    "start": "261040",
    "end": "262960"
  },
  {
    "text": "once it's been written over to your time",
    "start": "262960",
    "end": "264560"
  },
  {
    "text": "series database",
    "start": "264560",
    "end": "266479"
  },
  {
    "text": "and then on the batch side",
    "start": "266479",
    "end": "268560"
  },
  {
    "text": "a little different because you have",
    "start": "268560",
    "end": "270000"
  },
  {
    "text": "you're going to have your data collected",
    "start": "270000",
    "end": "271280"
  },
  {
    "text": "over time and the way it works is um",
    "start": "271280",
    "end": "274720"
  },
  {
    "text": "you know you're going to have your",
    "start": "274720",
    "end": "275440"
  },
  {
    "text": "aggregation performed by reading your",
    "start": "275440",
    "end": "276960"
  },
  {
    "text": "raw metrics from your time series",
    "start": "276960",
    "end": "278639"
  },
  {
    "text": "database before then writing back the",
    "start": "278639",
    "end": "280960"
  },
  {
    "text": "aggregated result so you can kind of see",
    "start": "280960",
    "end": "282639"
  },
  {
    "text": "the the two arrows",
    "start": "282639",
    "end": "285120"
  },
  {
    "text": "pointing from the batch job there on the",
    "start": "285120",
    "end": "286639"
  },
  {
    "text": "diagram",
    "start": "286639",
    "end": "288320"
  },
  {
    "text": "but this is typically meant for",
    "start": "288320",
    "end": "290240"
  },
  {
    "text": "large",
    "start": "290240",
    "end": "291360"
  },
  {
    "text": "large quantities of information that's",
    "start": "291360",
    "end": "292800"
  },
  {
    "text": "not necessarily as time sensitive um and",
    "start": "292800",
    "end": "296400"
  },
  {
    "text": "then the data is going to be aggregated",
    "start": "296400",
    "end": "297840"
  },
  {
    "text": "in batches over time",
    "start": "297840",
    "end": "300960"
  },
  {
    "text": "um so for the purpose of this talk we're",
    "start": "303199",
    "end": "305360"
  },
  {
    "text": "going to be looking um primarily kind of",
    "start": "305360",
    "end": "308000"
  },
  {
    "text": "at how",
    "start": "308000",
    "end": "309120"
  },
  {
    "text": "prometheus or prometheus compatible",
    "start": "309120",
    "end": "311360"
  },
  {
    "text": "solutions perform um or do aggregation",
    "start": "311360",
    "end": "314479"
  },
  {
    "text": "whether it be batch or streaming",
    "start": "314479",
    "end": "317039"
  },
  {
    "text": "but just to start out giving an overview",
    "start": "317039",
    "end": "319280"
  },
  {
    "start": "318000",
    "end": "318000"
  },
  {
    "text": "of how prometheus does aggregation um",
    "start": "319280",
    "end": "322560"
  },
  {
    "text": "is they do so prometheus uses what they",
    "start": "322560",
    "end": "325199"
  },
  {
    "text": "call recording rules to do aggregation",
    "start": "325199",
    "end": "327440"
  },
  {
    "text": "and what recording rules are essentially",
    "start": "327440",
    "end": "329840"
  },
  {
    "text": "um are that they",
    "start": "329840",
    "end": "331680"
  },
  {
    "text": "um",
    "start": "331680",
    "end": "332720"
  },
  {
    "text": "allow for pre-computing of frequently",
    "start": "332720",
    "end": "335360"
  },
  {
    "text": "needed or computationally expensive",
    "start": "335360",
    "end": "337120"
  },
  {
    "text": "queries before then storing back the",
    "start": "337120",
    "end": "339360"
  },
  {
    "text": "aggregated results to your time series",
    "start": "339360",
    "end": "340960"
  },
  {
    "text": "database",
    "start": "340960",
    "end": "342160"
  },
  {
    "text": "so any the execution of these and the",
    "start": "342160",
    "end": "344960"
  },
  {
    "text": "pre computation of these are done",
    "start": "344960",
    "end": "347680"
  },
  {
    "text": "kind of in memory as a single process",
    "start": "347680",
    "end": "350560"
  },
  {
    "text": "your regular intervals that you set so",
    "start": "350560",
    "end": "352160"
  },
  {
    "text": "every minute 30 seconds for example so",
    "start": "352160",
    "end": "354479"
  },
  {
    "text": "using that cron job type process",
    "start": "354479",
    "end": "357280"
  },
  {
    "text": "and this makes it really useful for",
    "start": "357280",
    "end": "358720"
  },
  {
    "text": "dashboards so by using by doing the",
    "start": "358720",
    "end": "361520"
  },
  {
    "text": "pre-computation you're able to kind of",
    "start": "361520",
    "end": "364319"
  },
  {
    "text": "have much faster results than if you",
    "start": "364319",
    "end": "365919"
  },
  {
    "text": "were to kind of have to re-um",
    "start": "365919",
    "end": "368080"
  },
  {
    "text": "re-evaluate your expression every time",
    "start": "368080",
    "end": "369520"
  },
  {
    "text": "it's needed",
    "start": "369520",
    "end": "370560"
  },
  {
    "text": "and then of course as it's supported by",
    "start": "370560",
    "end": "372240"
  },
  {
    "text": "prometheus you're gonna have full access",
    "start": "372240",
    "end": "373759"
  },
  {
    "text": "to from ql",
    "start": "373759",
    "end": "376960"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "but typically if you outgrow a single",
    "start": "378479",
    "end": "380319"
  },
  {
    "text": "prometheus instance you may want to use",
    "start": "380319",
    "end": "382240"
  },
  {
    "text": "a remote storage solution so",
    "start": "382240",
    "end": "384639"
  },
  {
    "text": "some of the most popular ones being",
    "start": "384639",
    "end": "386240"
  },
  {
    "text": "thanos m3 and cortex which are all",
    "start": "386240",
    "end": "389360"
  },
  {
    "text": "prometheus remote storage in prom ql",
    "start": "389360",
    "end": "391199"
  },
  {
    "text": "compatible",
    "start": "391199",
    "end": "392720"
  },
  {
    "text": "and they use a combination of batch and",
    "start": "392720",
    "end": "394800"
  },
  {
    "text": "stream aggregation um",
    "start": "394800",
    "end": "397199"
  },
  {
    "text": "you know to do their to do the",
    "start": "397199",
    "end": "398479"
  },
  {
    "text": "aggregation so we're going to now focus",
    "start": "398479",
    "end": "400400"
  },
  {
    "text": "on",
    "start": "400400",
    "end": "401199"
  },
  {
    "text": "uh m3 for a streaming streaming",
    "start": "401199",
    "end": "404319"
  },
  {
    "text": "aggregation and then we'll get into",
    "start": "404319",
    "end": "406080"
  },
  {
    "text": "thanos for batch aggregation",
    "start": "406080",
    "end": "409840"
  },
  {
    "text": "okay streaming aggregation with m3 so",
    "start": "410400",
    "end": "412880"
  },
  {
    "text": "just quick overview of what is m3 so",
    "start": "412880",
    "end": "415520"
  },
  {
    "start": "415000",
    "end": "415000"
  },
  {
    "text": "it's an open source metrics engine",
    "start": "415520",
    "end": "417440"
  },
  {
    "text": "comprised of four main components so",
    "start": "417440",
    "end": "419599"
  },
  {
    "text": "there's the distributed custom built",
    "start": "419599",
    "end": "421840"
  },
  {
    "text": "time series database called m3db",
    "start": "421840",
    "end": "424319"
  },
  {
    "text": "then there's the m3 coordinator which is",
    "start": "424319",
    "end": "426880"
  },
  {
    "text": "our down ingest and down sampling tier",
    "start": "426880",
    "end": "430240"
  },
  {
    "text": "followed by the aggregator which is",
    "start": "430240",
    "end": "432080"
  },
  {
    "text": "optional to run depending on your use",
    "start": "432080",
    "end": "433520"
  },
  {
    "text": "case but it's",
    "start": "433520",
    "end": "434960"
  },
  {
    "text": "the streaming aggregation or distributed",
    "start": "434960",
    "end": "436560"
  },
  {
    "text": "streaming aggregation tier and then",
    "start": "436560",
    "end": "438319"
  },
  {
    "text": "finally we have an optimized distributed",
    "start": "438319",
    "end": "440400"
  },
  {
    "text": "query engine as well",
    "start": "440400",
    "end": "442000"
  },
  {
    "text": "called m3 query",
    "start": "442000",
    "end": "444160"
  },
  {
    "text": "and then",
    "start": "444160",
    "end": "444960"
  },
  {
    "text": "m3 was built back at uber and open",
    "start": "444960",
    "end": "447039"
  },
  {
    "text": "source from 20 in 2016 to help with",
    "start": "447039",
    "end": "449360"
  },
  {
    "text": "their metrics monitoring use cases",
    "start": "449360",
    "end": "451280"
  },
  {
    "text": "internally and is now used by",
    "start": "451280",
    "end": "453440"
  },
  {
    "text": "many other companies including",
    "start": "453440",
    "end": "454720"
  },
  {
    "text": "chronosphere and it was designed to be",
    "start": "454720",
    "end": "456800"
  },
  {
    "text": "prometheus remote storage and prom ql",
    "start": "456800",
    "end": "459120"
  },
  {
    "text": "compatible",
    "start": "459120",
    "end": "461680"
  },
  {
    "text": "so just going to show a high level",
    "start": "462560",
    "end": "464319"
  },
  {
    "text": "overview of what the architecture looks",
    "start": "464319",
    "end": "465759"
  },
  {
    "text": "like so you can see on the right side",
    "start": "465759",
    "end": "468000"
  },
  {
    "text": "you have instances of prometheus it's",
    "start": "468000",
    "end": "470639"
  },
  {
    "text": "going to send in metrics 2m3 via the",
    "start": "470639",
    "end": "472720"
  },
  {
    "text": "coordinator using prometheus remote",
    "start": "472720",
    "end": "474639"
  },
  {
    "text": "right",
    "start": "474639",
    "end": "475680"
  },
  {
    "text": "and then you can have you know your",
    "start": "475680",
    "end": "477039"
  },
  {
    "text": "coordinator and then optionally your",
    "start": "477039",
    "end": "478400"
  },
  {
    "text": "aggregator um to do any sort of down",
    "start": "478400",
    "end": "480639"
  },
  {
    "text": "sampling aggregation or um before kind",
    "start": "480639",
    "end": "483440"
  },
  {
    "text": "of sending over your metrics to m3db",
    "start": "483440",
    "end": "486800"
  },
  {
    "text": "and then on the read side",
    "start": "486800",
    "end": "488720"
  },
  {
    "text": "similar thing you're gonna",
    "start": "488720",
    "end": "490479"
  },
  {
    "text": "kind of send any query requests to m3",
    "start": "490479",
    "end": "492479"
  },
  {
    "text": "via the query tier um using prometheus",
    "start": "492479",
    "end": "496000"
  },
  {
    "text": "remote read",
    "start": "496000",
    "end": "498639"
  },
  {
    "start": "500000",
    "end": "500000"
  },
  {
    "text": "okay so uh streaming aggregation with m3",
    "start": "500639",
    "end": "503440"
  },
  {
    "text": "so with m3 the way that",
    "start": "503440",
    "end": "505520"
  },
  {
    "text": "it does aggregation is basically it",
    "start": "505520",
    "end": "507280"
  },
  {
    "text": "moves the kind of prometheus recording",
    "start": "507280",
    "end": "509280"
  },
  {
    "text": "rule computation to streaming",
    "start": "509280",
    "end": "510800"
  },
  {
    "text": "aggregation and it does this by uh",
    "start": "510800",
    "end": "513360"
  },
  {
    "text": "through what they call roll-up rules",
    "start": "513360",
    "end": "516000"
  },
  {
    "text": "so roll-up rules are essentially m3's",
    "start": "516000",
    "end": "518399"
  },
  {
    "text": "approach to aggregation of high",
    "start": "518399",
    "end": "520399"
  },
  {
    "text": "cardinality metrics and it takes the",
    "start": "520399",
    "end": "522560"
  },
  {
    "text": "similar it kind of solves the same",
    "start": "522560",
    "end": "524080"
  },
  {
    "text": "problem that recording rules does just",
    "start": "524080",
    "end": "525760"
  },
  {
    "text": "with a slightly different approach",
    "start": "525760",
    "end": "528800"
  },
  {
    "text": "and how it works is you can kind of see",
    "start": "528800",
    "end": "530480"
  },
  {
    "text": "the diagram here it kind of aggregates",
    "start": "530480",
    "end": "532480"
  },
  {
    "text": "across multiple time series um and then",
    "start": "532480",
    "end": "535519"
  },
  {
    "text": "and then what the aggregator and the",
    "start": "535519",
    "end": "537120"
  },
  {
    "text": "coordinator do um is that it'll",
    "start": "537120",
    "end": "539200"
  },
  {
    "text": "reconstitute um",
    "start": "539200",
    "end": "542320"
  },
  {
    "text": "this new rolled up our aggregated metric",
    "start": "542320",
    "end": "544880"
  },
  {
    "text": "as a new histogram gauge um",
    "start": "544880",
    "end": "550000"
  },
  {
    "text": "uh",
    "start": "550000",
    "end": "551200"
  },
  {
    "text": "or histogram histogram gauge",
    "start": "551200",
    "end": "553839"
  },
  {
    "text": "or whatever or counter metric yes uh",
    "start": "553839",
    "end": "557360"
  },
  {
    "text": "before then writing it back to rather",
    "start": "557360",
    "end": "559440"
  },
  {
    "text": "than writing it to m3db",
    "start": "559440",
    "end": "562720"
  },
  {
    "text": "and so then once it's written over 103db",
    "start": "562720",
    "end": "564720"
  },
  {
    "text": "it's going to be",
    "start": "564720",
    "end": "566000"
  },
  {
    "text": "immediately available for for query",
    "start": "566000",
    "end": "569839"
  },
  {
    "text": "and just what this is just kind of",
    "start": "570000",
    "end": "571600"
  },
  {
    "text": "showing that description visually so",
    "start": "571600",
    "end": "574720"
  },
  {
    "text": "essentially there's going to be three",
    "start": "574720",
    "end": "576480"
  },
  {
    "text": "main steps here so the first step is",
    "start": "576480",
    "end": "578160"
  },
  {
    "text": "going to be",
    "start": "578160",
    "end": "580000"
  },
  {
    "text": "sending in your metrics to m3 via",
    "start": "580000",
    "end": "583200"
  },
  {
    "text": "prometheus remote right so from there",
    "start": "583200",
    "end": "585680"
  },
  {
    "text": "you're going to have the coordinator and",
    "start": "585680",
    "end": "587040"
  },
  {
    "text": "optionally the aggregator for",
    "start": "587040",
    "end": "589360"
  },
  {
    "text": "depending on your use case to do any",
    "start": "589360",
    "end": "591279"
  },
  {
    "text": "sort of in-memory aggregation um",
    "start": "591279",
    "end": "593839"
  },
  {
    "text": "on the ingest path and then from there",
    "start": "593839",
    "end": "596800"
  },
  {
    "text": "the coordinator will send over this new",
    "start": "596800",
    "end": "598560"
  },
  {
    "text": "aggregated or reconstituted metric",
    "start": "598560",
    "end": "601680"
  },
  {
    "text": "2 m3db for storage",
    "start": "601680",
    "end": "605839"
  },
  {
    "start": "607000",
    "end": "607000"
  },
  {
    "text": "okay so some pros and cons of streaming",
    "start": "607839",
    "end": "609760"
  },
  {
    "text": "aggregation with m3 so first being on",
    "start": "609760",
    "end": "612560"
  },
  {
    "text": "the pro side that",
    "start": "612560",
    "end": "614480"
  },
  {
    "text": "you know it is very you're going to get",
    "start": "614480",
    "end": "616240"
  },
  {
    "text": "really quick query results with with",
    "start": "616240",
    "end": "618640"
  },
  {
    "text": "this approach because you're doing all",
    "start": "618640",
    "end": "620640"
  },
  {
    "text": "of your aggregation",
    "start": "620640",
    "end": "622320"
  },
  {
    "text": "prior to prior to query so you're going",
    "start": "622320",
    "end": "625200"
  },
  {
    "text": "to have your results already ready to go",
    "start": "625200",
    "end": "627279"
  },
  {
    "text": "and that also makes it so that you're",
    "start": "627279",
    "end": "629120"
  },
  {
    "text": "going to have",
    "start": "629120",
    "end": "630720"
  },
  {
    "text": "very",
    "start": "630720",
    "end": "631519"
  },
  {
    "text": "few uh requirements on the query or read",
    "start": "631519",
    "end": "634079"
  },
  {
    "text": "side of things",
    "start": "634079",
    "end": "635360"
  },
  {
    "text": "so you're able to then kind of use",
    "start": "635360",
    "end": "638880"
  },
  {
    "text": "kind of you're able to kind of um",
    "start": "638880",
    "end": "641920"
  },
  {
    "text": "deploy more more like other things",
    "start": "641920",
    "end": "644240"
  },
  {
    "text": "instead like uh scaling up a higher",
    "start": "644240",
    "end": "646399"
  },
  {
    "text": "number of alerts or recording rules",
    "start": "646399",
    "end": "648320"
  },
  {
    "text": "because now because your your load is a",
    "start": "648320",
    "end": "650160"
  },
  {
    "text": "lot less on on um",
    "start": "650160",
    "end": "652320"
  },
  {
    "text": "on your time series database from the",
    "start": "652320",
    "end": "654320"
  },
  {
    "text": "from the query or read side of things",
    "start": "654320",
    "end": "657440"
  },
  {
    "text": "and then",
    "start": "657440",
    "end": "658399"
  },
  {
    "text": "on the con side uh it can be complex to",
    "start": "658399",
    "end": "662560"
  },
  {
    "text": "to operate and deploy uh and require",
    "start": "662560",
    "end": "665040"
  },
  {
    "text": "some additional overhead and then",
    "start": "665040",
    "end": "666800"
  },
  {
    "text": "additionally it doesn't support",
    "start": "666800",
    "end": "668560"
  },
  {
    "text": "arbitrary",
    "start": "668560",
    "end": "670079"
  },
  {
    "text": "prom ql instead it just",
    "start": "670079",
    "end": "672880"
  },
  {
    "text": "like i mentioned the coordinate is going",
    "start": "672880",
    "end": "674079"
  },
  {
    "text": "to reconstitute these metrics as",
    "start": "674079",
    "end": "676959"
  },
  {
    "text": "new aggregated counter timer histogram",
    "start": "676959",
    "end": "678880"
  },
  {
    "text": "metrics before then writing them over to",
    "start": "678880",
    "end": "681519"
  },
  {
    "text": "your time series database",
    "start": "681519",
    "end": "684800"
  },
  {
    "text": "all right so now i'm going to get into",
    "start": "685920",
    "end": "687839"
  },
  {
    "text": "batch aggregation with thanos",
    "start": "687839",
    "end": "691519"
  },
  {
    "start": "691000",
    "end": "691000"
  },
  {
    "text": "so a little bit about thanos",
    "start": "691760",
    "end": "694079"
  },
  {
    "text": "for those of you who might not be",
    "start": "694079",
    "end": "695760"
  },
  {
    "text": "familiar but it's a cncf incubating",
    "start": "695760",
    "end": "698320"
  },
  {
    "text": "project",
    "start": "698320",
    "end": "699279"
  },
  {
    "text": "it was originally built at improbable",
    "start": "699279",
    "end": "701920"
  },
  {
    "text": "back in 2017 in open source",
    "start": "701920",
    "end": "704720"
  },
  {
    "text": "and then it has",
    "start": "704720",
    "end": "706000"
  },
  {
    "text": "several main components that we're going",
    "start": "706000",
    "end": "707360"
  },
  {
    "text": "to talk about today so there's the store",
    "start": "707360",
    "end": "710079"
  },
  {
    "text": "which is essentially the",
    "start": "710079",
    "end": "712720"
  },
  {
    "text": "gateway to object store then we have the",
    "start": "712720",
    "end": "714720"
  },
  {
    "text": "query component which is the",
    "start": "714720",
    "end": "716240"
  },
  {
    "text": "horizontally scalable and stateless",
    "start": "716240",
    "end": "718399"
  },
  {
    "text": "query aggregation and deduplication tier",
    "start": "718399",
    "end": "722480"
  },
  {
    "text": "and then the sidecar which is one of the",
    "start": "722480",
    "end": "724320"
  },
  {
    "text": "ways to deploy thanos",
    "start": "724320",
    "end": "726399"
  },
  {
    "text": "and it kind of acts as a proxy for",
    "start": "726399",
    "end": "728720"
  },
  {
    "text": "prometheus via kind of remote and read",
    "start": "728720",
    "end": "733200"
  },
  {
    "text": "read and write apis",
    "start": "733200",
    "end": "735440"
  },
  {
    "text": "and then and then there's the compactor",
    "start": "735440",
    "end": "737120"
  },
  {
    "text": "which is responsible for down sampling",
    "start": "737120",
    "end": "739440"
  },
  {
    "text": "and block compaction and kind of",
    "start": "739440",
    "end": "740880"
  },
  {
    "text": "applying any sort of retention policies",
    "start": "740880",
    "end": "743279"
  },
  {
    "text": "and then finally the ruler",
    "start": "743279",
    "end": "745279"
  },
  {
    "text": "or the rule which basically uses thanos",
    "start": "745279",
    "end": "747360"
  },
  {
    "text": "rule command to evaluate",
    "start": "747360",
    "end": "749360"
  },
  {
    "text": "any prometheus recording or lording",
    "start": "749360",
    "end": "751519"
  },
  {
    "text": "rules",
    "start": "751519",
    "end": "753279"
  },
  {
    "text": "and then finally like m3 thanos was also",
    "start": "753279",
    "end": "755760"
  },
  {
    "text": "designed to be prometheus remote storage",
    "start": "755760",
    "end": "758240"
  },
  {
    "text": "and prom ql compatible",
    "start": "758240",
    "end": "761440"
  },
  {
    "text": "all right so this is just a high level",
    "start": "762480",
    "end": "764320"
  },
  {
    "text": "uh architecture diagram of thanos so as",
    "start": "764320",
    "end": "767839"
  },
  {
    "text": "you can see here we have a few instances",
    "start": "767839",
    "end": "769680"
  },
  {
    "text": "of prometheus with thanos running as the",
    "start": "769680",
    "end": "771760"
  },
  {
    "text": "sidecar we have the query component",
    "start": "771760",
    "end": "774000"
  },
  {
    "text": "fanning out requests to each of the",
    "start": "774000",
    "end": "775920"
  },
  {
    "text": "various instances which will then kind",
    "start": "775920",
    "end": "778000"
  },
  {
    "text": "of pull metrics um aggregate them and",
    "start": "778000",
    "end": "780639"
  },
  {
    "text": "kind of duplicate them inside the query",
    "start": "780639",
    "end": "783200"
  },
  {
    "text": "tier which will then be informed by the",
    "start": "783200",
    "end": "785760"
  },
  {
    "text": "ruler",
    "start": "785760",
    "end": "786959"
  },
  {
    "text": "for any sort of",
    "start": "786959",
    "end": "788480"
  },
  {
    "text": "recording rules",
    "start": "788480",
    "end": "790160"
  },
  {
    "text": "that that you may be wanting to run",
    "start": "790160",
    "end": "792639"
  },
  {
    "text": "and then",
    "start": "792639",
    "end": "794160"
  },
  {
    "text": "another thing to note is that thanos",
    "start": "794160",
    "end": "795760"
  },
  {
    "text": "does or the sidecar does",
    "start": "795760",
    "end": "798240"
  },
  {
    "text": "write over",
    "start": "798240",
    "end": "799440"
  },
  {
    "text": "metrics and blocks of two hours by",
    "start": "799440",
    "end": "800959"
  },
  {
    "text": "default to the object storage so you are",
    "start": "800959",
    "end": "803360"
  },
  {
    "text": "also able to then query for longer term",
    "start": "803360",
    "end": "805360"
  },
  {
    "text": "metrics",
    "start": "805360",
    "end": "807760"
  },
  {
    "start": "809000",
    "end": "809000"
  },
  {
    "text": "okay but how does uh batch or how does",
    "start": "809440",
    "end": "811360"
  },
  {
    "text": "thanos do aggregation um so basically",
    "start": "811360",
    "end": "814560"
  },
  {
    "text": "you're going to have the way it works is",
    "start": "814560",
    "end": "816480"
  },
  {
    "text": "your raw metrics data is going to be",
    "start": "816480",
    "end": "818079"
  },
  {
    "text": "collected by your prometheus instances",
    "start": "818079",
    "end": "820320"
  },
  {
    "text": "prior to query aggregation",
    "start": "820320",
    "end": "823120"
  },
  {
    "text": "so from there your query component can",
    "start": "823120",
    "end": "825519"
  },
  {
    "text": "then",
    "start": "825519",
    "end": "827040"
  },
  {
    "text": "perform any sort of metrics aggregation",
    "start": "827040",
    "end": "829040"
  },
  {
    "text": "or prompt ul queries on top of your",
    "start": "829040",
    "end": "831120"
  },
  {
    "text": "metrics that get pulled from your",
    "start": "831120",
    "end": "832560"
  },
  {
    "text": "prometheus instances",
    "start": "832560",
    "end": "834240"
  },
  {
    "text": "and then and then you have the ruler",
    "start": "834240",
    "end": "836399"
  },
  {
    "text": "which will then implement any recording",
    "start": "836399",
    "end": "838399"
  },
  {
    "text": "rules you may have before then writing",
    "start": "838399",
    "end": "840240"
  },
  {
    "text": "your new aggregated time series data",
    "start": "840240",
    "end": "842959"
  },
  {
    "text": "or metric to to object store",
    "start": "842959",
    "end": "846800"
  },
  {
    "text": "and showing this visually",
    "start": "846880",
    "end": "848880"
  },
  {
    "text": "kind of four primary steps here again",
    "start": "848880",
    "end": "851120"
  },
  {
    "text": "it's a very paired down view of the",
    "start": "851120",
    "end": "852560"
  },
  {
    "text": "architecture so we're not showing each",
    "start": "852560",
    "end": "854480"
  },
  {
    "text": "of the components but um so you have you",
    "start": "854480",
    "end": "856720"
  },
  {
    "text": "know first step here metrics are",
    "start": "856720",
    "end": "858800"
  },
  {
    "text": "collected by the thanos side car store",
    "start": "858800",
    "end": "861920"
  },
  {
    "text": "um",
    "start": "861920",
    "end": "862800"
  },
  {
    "text": "and then from there you're gonna have",
    "start": "862800",
    "end": "865360"
  },
  {
    "text": "your ruler which is gonna kind of issue",
    "start": "865360",
    "end": "867279"
  },
  {
    "text": "your your query your recording rules and",
    "start": "867279",
    "end": "869440"
  },
  {
    "text": "then the metrics will be pooled to kind",
    "start": "869440",
    "end": "871199"
  },
  {
    "text": "of um",
    "start": "871199",
    "end": "872720"
  },
  {
    "text": "for to mute that query by using kind of",
    "start": "872720",
    "end": "875920"
  },
  {
    "text": "reverse index querying and reading from",
    "start": "875920",
    "end": "878079"
  },
  {
    "text": "storage",
    "start": "878079",
    "end": "879279"
  },
  {
    "text": "um and then the third step is going to",
    "start": "879279",
    "end": "881199"
  },
  {
    "text": "be having the query component kind of",
    "start": "881199",
    "end": "883199"
  },
  {
    "text": "evaluating that result on the the query",
    "start": "883199",
    "end": "885519"
  },
  {
    "text": "result on your pooled metrics",
    "start": "885519",
    "end": "888079"
  },
  {
    "text": "and then from there the new aggregated",
    "start": "888079",
    "end": "890399"
  },
  {
    "text": "uh metric will be sent over to your",
    "start": "890399",
    "end": "892480"
  },
  {
    "text": "object store",
    "start": "892480",
    "end": "894399"
  },
  {
    "text": "and you can see here as well like there",
    "start": "894399",
    "end": "896320"
  },
  {
    "text": "are the query it has two different ways",
    "start": "896320",
    "end": "898480"
  },
  {
    "text": "of kind of querying metrics so you can",
    "start": "898480",
    "end": "900240"
  },
  {
    "text": "query directly from from your prometheus",
    "start": "900240",
    "end": "902480"
  },
  {
    "text": "instances via the store",
    "start": "902480",
    "end": "904480"
  },
  {
    "text": "api for more like real-time queries and",
    "start": "904480",
    "end": "906639"
  },
  {
    "text": "then you can also kind of access more",
    "start": "906639",
    "end": "909199"
  },
  {
    "text": "longer term data through your object",
    "start": "909199",
    "end": "910639"
  },
  {
    "text": "store",
    "start": "910639",
    "end": "913639"
  },
  {
    "start": "913000",
    "end": "913000"
  },
  {
    "text": "okay but what are some some pros and",
    "start": "914399",
    "end": "916480"
  },
  {
    "text": "cons of",
    "start": "916480",
    "end": "917760"
  },
  {
    "text": "this",
    "start": "917760",
    "end": "918560"
  },
  {
    "text": "batch aggregation with thanos",
    "start": "918560",
    "end": "920800"
  },
  {
    "text": "so on the pro side it does fully",
    "start": "920800",
    "end": "923360"
  },
  {
    "text": "support and is fully compatible with",
    "start": "923360",
    "end": "925360"
  },
  {
    "text": "prom ql so you're able to kind of run",
    "start": "925360",
    "end": "927120"
  },
  {
    "text": "those arbitrary prom ql's queries",
    "start": "927120",
    "end": "930160"
  },
  {
    "text": "and it's also especially as it compares",
    "start": "930160",
    "end": "932880"
  },
  {
    "text": "to m3 it's more simple to operate and",
    "start": "932880",
    "end": "935120"
  },
  {
    "text": "manage",
    "start": "935120",
    "end": "936079"
  },
  {
    "text": "um especially if you're wanting to scale",
    "start": "936079",
    "end": "938399"
  },
  {
    "text": "up and down your resources as you're not",
    "start": "938399",
    "end": "940399"
  },
  {
    "text": "having to",
    "start": "940399",
    "end": "941680"
  },
  {
    "text": "constantly like redirect live flowing",
    "start": "941680",
    "end": "943759"
  },
  {
    "text": "traffic or metrics",
    "start": "943759",
    "end": "946079"
  },
  {
    "text": "and then on the con side",
    "start": "946079",
    "end": "948160"
  },
  {
    "text": "you're basically adding i guess",
    "start": "948160",
    "end": "949920"
  },
  {
    "text": "comparing to stream aggregation you're",
    "start": "949920",
    "end": "951839"
  },
  {
    "text": "adding an additional step by having to",
    "start": "951839",
    "end": "954560"
  },
  {
    "text": "re-query and then read and write back",
    "start": "954560",
    "end": "956480"
  },
  {
    "text": "your results",
    "start": "956480",
    "end": "958160"
  },
  {
    "text": "to storage so kind of by doing all that",
    "start": "958160",
    "end": "962560"
  },
  {
    "text": "over the network it can be expensive or",
    "start": "962560",
    "end": "965120"
  },
  {
    "text": "kind of lead to large resource",
    "start": "965120",
    "end": "966639"
  },
  {
    "text": "consumption especially",
    "start": "966639",
    "end": "968480"
  },
  {
    "text": "for like larger queries",
    "start": "968480",
    "end": "970639"
  },
  {
    "text": "and in addition to that you can have",
    "start": "970639",
    "end": "974000"
  },
  {
    "text": "slow queries especially",
    "start": "974000",
    "end": "976639"
  },
  {
    "text": "you know when looking at recording rules",
    "start": "976639",
    "end": "978720"
  },
  {
    "text": "or cron job type",
    "start": "978720",
    "end": "980560"
  },
  {
    "text": "queries",
    "start": "980560",
    "end": "981600"
  },
  {
    "text": "if your if your query components are",
    "start": "981600",
    "end": "984079"
  },
  {
    "text": "going and querying a lot like a large",
    "start": "984079",
    "end": "985839"
  },
  {
    "text": "amount of metrics from your various",
    "start": "985839",
    "end": "987120"
  },
  {
    "text": "prometheus instances that can take that",
    "start": "987120",
    "end": "989920"
  },
  {
    "text": "can take um you know",
    "start": "989920",
    "end": "992079"
  },
  {
    "text": "quite a while for for those metrics to",
    "start": "992079",
    "end": "994160"
  },
  {
    "text": "fully be queried",
    "start": "994160",
    "end": "996000"
  },
  {
    "text": "and at that point you may depending on",
    "start": "996000",
    "end": "998000"
  },
  {
    "text": "your intervals that you're running your",
    "start": "998000",
    "end": "1000160"
  },
  {
    "text": "your queries at you may miss those",
    "start": "1000160",
    "end": "1001839"
  },
  {
    "text": "intervals",
    "start": "1001839",
    "end": "1002959"
  },
  {
    "text": "if it takes too long for your query",
    "start": "1002959",
    "end": "1004880"
  },
  {
    "text": "component to fully",
    "start": "1004880",
    "end": "1006560"
  },
  {
    "text": "query and aggregate your metrics and um",
    "start": "1006560",
    "end": "1009759"
  },
  {
    "text": "so not only that but it also you know",
    "start": "1009759",
    "end": "1011360"
  },
  {
    "text": "could lead to your query component being",
    "start": "1011360",
    "end": "1013120"
  },
  {
    "text": "overwhelmed",
    "start": "1013120",
    "end": "1014240"
  },
  {
    "text": "completely so uh just one thing to to",
    "start": "1014240",
    "end": "1017040"
  },
  {
    "text": "note on that side but",
    "start": "1017040",
    "end": "1019040"
  },
  {
    "text": "um",
    "start": "1019040",
    "end": "1019510"
  },
  {
    "text": "[Music]",
    "start": "1019510",
    "end": "1021839"
  },
  {
    "text": "but yeah so that's uh now we're just",
    "start": "1021839",
    "end": "1023440"
  },
  {
    "text": "going to jump into an overview basically",
    "start": "1023440",
    "end": "1025438"
  },
  {
    "start": "1025000",
    "end": "1025000"
  },
  {
    "text": "of everything we just discussed so",
    "start": "1025439",
    "end": "1028319"
  },
  {
    "text": "um kind of",
    "start": "1028319",
    "end": "1030079"
  },
  {
    "text": "how do you choose like you know you want",
    "start": "1030079",
    "end": "1031918"
  },
  {
    "text": "to do streaming with m3 or batch with",
    "start": "1031919",
    "end": "1034160"
  },
  {
    "text": "thanos um so you know kind of recapping",
    "start": "1034160",
    "end": "1038480"
  },
  {
    "text": "on the m3 side",
    "start": "1038480",
    "end": "1040079"
  },
  {
    "text": "i think you know the main pros is that",
    "start": "1040079",
    "end": "1042079"
  },
  {
    "text": "it really does alleviate query",
    "start": "1042079",
    "end": "1043760"
  },
  {
    "text": "requirements on your time series",
    "start": "1043760",
    "end": "1045120"
  },
  {
    "text": "database",
    "start": "1045120",
    "end": "1046959"
  },
  {
    "text": "by kind of doing a lot of that",
    "start": "1046959",
    "end": "1048000"
  },
  {
    "text": "pre-computation prior to prior to query",
    "start": "1048000",
    "end": "1050799"
  },
  {
    "text": "so that you can now use a lot of that",
    "start": "1050799",
    "end": "1053200"
  },
  {
    "text": "those resources now for additional",
    "start": "1053200",
    "end": "1055760"
  },
  {
    "text": "purposes like more recording rules or",
    "start": "1055760",
    "end": "1057520"
  },
  {
    "text": "alerts",
    "start": "1057520",
    "end": "1058960"
  },
  {
    "text": "um however it is compared to things a",
    "start": "1058960",
    "end": "1061679"
  },
  {
    "text": "little bit more complex to operate and",
    "start": "1061679",
    "end": "1063039"
  },
  {
    "text": "deploy",
    "start": "1063039",
    "end": "1064000"
  },
  {
    "text": "and it doesn't fully support arbitrary",
    "start": "1064000",
    "end": "1065679"
  },
  {
    "text": "prom ql instead um it reconstitutes",
    "start": "1065679",
    "end": "1068799"
  },
  {
    "text": "these aggregate metrics as uh counters",
    "start": "1068799",
    "end": "1071120"
  },
  {
    "text": "gauges and histograms",
    "start": "1071120",
    "end": "1073600"
  },
  {
    "text": "and then on the batch side with thanos",
    "start": "1073600",
    "end": "1075919"
  },
  {
    "text": "um it's more simple to operate than m3",
    "start": "1075919",
    "end": "1078080"
  },
  {
    "text": "especially when wanting to kind of scale",
    "start": "1078080",
    "end": "1079520"
  },
  {
    "text": "up and down your resources",
    "start": "1079520",
    "end": "1081200"
  },
  {
    "text": "and this also does fully support problem",
    "start": "1081200",
    "end": "1083200"
  },
  {
    "text": "ql",
    "start": "1083200",
    "end": "1084080"
  },
  {
    "text": "however",
    "start": "1084080",
    "end": "1085200"
  },
  {
    "text": "by having kind of reevaluating",
    "start": "1085200",
    "end": "1088320"
  },
  {
    "text": "and rewriting",
    "start": "1088320",
    "end": "1089440"
  },
  {
    "text": "and re reading your metrics over the",
    "start": "1089440",
    "end": "1092160"
  },
  {
    "text": "network it can lead to large resource",
    "start": "1092160",
    "end": "1094400"
  },
  {
    "text": "consumption and kind of slow query",
    "start": "1094400",
    "end": "1097200"
  },
  {
    "text": "results as well",
    "start": "1097200",
    "end": "1098720"
  },
  {
    "text": "so",
    "start": "1098720",
    "end": "1100480"
  },
  {
    "text": "i mean these are obviously two examples",
    "start": "1100480",
    "end": "1102240"
  },
  {
    "text": "of streaming in batch that are specific",
    "start": "1102240",
    "end": "1103760"
  },
  {
    "text": "to m3 and thanos",
    "start": "1103760",
    "end": "1106400"
  },
  {
    "text": "but i think they both do demonstrate",
    "start": "1106400",
    "end": "1108160"
  },
  {
    "text": "some of the the",
    "start": "1108160",
    "end": "1110080"
  },
  {
    "text": "you know the the benefits and trade-offs",
    "start": "1110080",
    "end": "1113039"
  },
  {
    "text": "of more like high-level like um",
    "start": "1113039",
    "end": "1115120"
  },
  {
    "text": "streaming and batch in general so",
    "start": "1115120",
    "end": "1117280"
  },
  {
    "text": "um you know you can kind of hopefully",
    "start": "1117280",
    "end": "1119600"
  },
  {
    "text": "use this to apply similar",
    "start": "1119600",
    "end": "1123360"
  },
  {
    "text": "learnings to your particular use case",
    "start": "1123360",
    "end": "1125520"
  },
  {
    "text": "that you may have",
    "start": "1125520",
    "end": "1127360"
  },
  {
    "text": "but finally you know if you if you did",
    "start": "1127360",
    "end": "1130240"
  },
  {
    "text": "kind of want to see if there was a way",
    "start": "1130240",
    "end": "1131679"
  },
  {
    "text": "to do both together",
    "start": "1131679",
    "end": "1133520"
  },
  {
    "text": "i actually gave a talk with rob",
    "start": "1133520",
    "end": "1135360"
  },
  {
    "text": "skillington up here who's cto and",
    "start": "1135360",
    "end": "1137520"
  },
  {
    "text": "co-founder of chronosphere we gave a",
    "start": "1137520",
    "end": "1138960"
  },
  {
    "text": "talk at prom cod on monday about how you",
    "start": "1138960",
    "end": "1141360"
  },
  {
    "text": "can use the m3 coordinator to provide",
    "start": "1141360",
    "end": "1143039"
  },
  {
    "text": "streaming aggregation along with a",
    "start": "1143039",
    "end": "1145280"
  },
  {
    "text": "remote storage solution like thanos or",
    "start": "1145280",
    "end": "1146880"
  },
  {
    "text": "cortex so definitely check that check",
    "start": "1146880",
    "end": "1149120"
  },
  {
    "text": "that out if that's something of interest",
    "start": "1149120",
    "end": "1152640"
  },
  {
    "text": "but yeah that's basically all i have so",
    "start": "1152720",
    "end": "1154960"
  },
  {
    "text": "i think we'll just open it to questions",
    "start": "1154960",
    "end": "1159559"
  },
  {
    "text": "[Applause]",
    "start": "1160640",
    "end": "1164559"
  },
  {
    "text": "you",
    "start": "1164559",
    "end": "1166640"
  }
]