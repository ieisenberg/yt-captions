[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "hey welcome everybody and thank you for",
    "start": "80",
    "end": "2639"
  },
  {
    "text": "joining this virtual session",
    "start": "2639",
    "end": "4400"
  },
  {
    "text": "my name is rodusov dimitrov and i'm here",
    "start": "4400",
    "end": "6640"
  },
  {
    "text": "with ivana tonassova",
    "start": "6640",
    "end": "8240"
  },
  {
    "text": "and we're both part of vmware's open",
    "start": "8240",
    "end": "10480"
  },
  {
    "text": "source technology center",
    "start": "10480",
    "end": "12559"
  },
  {
    "text": "today we're going to talk about a",
    "start": "12559",
    "end": "14240"
  },
  {
    "text": "project called network service mesh",
    "start": "14240",
    "end": "17680"
  },
  {
    "text": "hello looking for a good point to start",
    "start": "17680",
    "end": "20960"
  },
  {
    "start": "19000",
    "end": "19000"
  },
  {
    "text": "from",
    "start": "20960",
    "end": "21760"
  },
  {
    "text": "let's talk about the technology",
    "start": "21760",
    "end": "23519"
  },
  {
    "text": "evolution through the years",
    "start": "23519",
    "end": "26560"
  },
  {
    "text": "first we had those monolithic",
    "start": "26560",
    "end": "29119"
  },
  {
    "text": "applications",
    "start": "29119",
    "end": "30160"
  },
  {
    "text": "ring on bare metal machines",
    "start": "30160",
    "end": "33520"
  },
  {
    "text": "then the vmwave came out and",
    "start": "33520",
    "end": "36800"
  },
  {
    "text": "we started migrating our work walls to",
    "start": "36800",
    "end": "39520"
  },
  {
    "text": "virtual machines",
    "start": "39520",
    "end": "41120"
  },
  {
    "text": "we did that for benefits like reduced",
    "start": "41120",
    "end": "43360"
  },
  {
    "text": "operational costs",
    "start": "43360",
    "end": "45120"
  },
  {
    "text": "faster provisioning improved efficiency",
    "start": "45120",
    "end": "48079"
  },
  {
    "text": "and much",
    "start": "48079",
    "end": "48800"
  },
  {
    "text": "more now it's all about",
    "start": "48800",
    "end": "52239"
  },
  {
    "text": "containers and microservices",
    "start": "52239",
    "end": "55360"
  },
  {
    "text": "here projects like docker and kubernetes",
    "start": "55360",
    "end": "58480"
  },
  {
    "text": "are becoming the standard for such",
    "start": "58480",
    "end": "60320"
  },
  {
    "text": "systems",
    "start": "60320",
    "end": "61840"
  },
  {
    "text": "of course this maps perfectly in use",
    "start": "61840",
    "end": "64799"
  },
  {
    "text": "cases",
    "start": "64799",
    "end": "65518"
  },
  {
    "text": "that allow rapid and fast adoption of",
    "start": "65519",
    "end": "67680"
  },
  {
    "text": "new technologies",
    "start": "67680",
    "end": "69439"
  },
  {
    "text": "but let's see how this looks like",
    "start": "69439",
    "end": "71840"
  },
  {
    "text": "through the eyes of a talk",
    "start": "71840",
    "end": "75280"
  },
  {
    "text": "so apparently tokus are moving a bit",
    "start": "75920",
    "end": "77920"
  },
  {
    "text": "slower but that's not always bad",
    "start": "77920",
    "end": "81040"
  },
  {
    "text": "due to their nature they prefer to use",
    "start": "81040",
    "end": "83040"
  },
  {
    "text": "only well-established technologies",
    "start": "83040",
    "end": "84799"
  },
  {
    "text": "in their systems so for example",
    "start": "84799",
    "end": "87260"
  },
  {
    "text": "[Music]",
    "start": "87260",
    "end": "88640"
  },
  {
    "start": "88000",
    "end": "88000"
  },
  {
    "text": "this is how a typical telco system",
    "start": "88640",
    "end": "90799"
  },
  {
    "text": "evolved through the years",
    "start": "90799",
    "end": "92640"
  },
  {
    "text": "initially temple consisted of lots of",
    "start": "92640",
    "end": "94799"
  },
  {
    "text": "physical boxes",
    "start": "94799",
    "end": "96479"
  },
  {
    "text": "each and everyone implementing a",
    "start": "96479",
    "end": "98000"
  },
  {
    "text": "specific network function within that",
    "start": "98000",
    "end": "99759"
  },
  {
    "text": "system",
    "start": "99759",
    "end": "101520"
  },
  {
    "text": "then they decided to adopt",
    "start": "101520",
    "end": "102960"
  },
  {
    "text": "virtualization so all those physical",
    "start": "102960",
    "end": "105360"
  },
  {
    "text": "boxes were migrated to virtual machines",
    "start": "105360",
    "end": "108880"
  },
  {
    "text": "this introduced the concepts called",
    "start": "108880",
    "end": "110960"
  },
  {
    "text": "virtual network functions or vnfs",
    "start": "110960",
    "end": "114240"
  },
  {
    "text": "and it pretty much changed the way",
    "start": "114240",
    "end": "115920"
  },
  {
    "text": "networking was done for the last couple",
    "start": "115920",
    "end": "117600"
  },
  {
    "text": "of decades",
    "start": "117600",
    "end": "118640"
  },
  {
    "text": "and it is known as the first wave of nv",
    "start": "118640",
    "end": "122719"
  },
  {
    "text": "now decors are looking again at the",
    "start": "122719",
    "end": "125360"
  },
  {
    "text": "enterprise",
    "start": "125360",
    "end": "126399"
  },
  {
    "text": "to leverage the benefits of the cloud",
    "start": "126399",
    "end": "128160"
  },
  {
    "text": "native world and for example adopt",
    "start": "128160",
    "end": "130479"
  },
  {
    "text": "technologies like kubernetes and docker",
    "start": "130479",
    "end": "132400"
  },
  {
    "text": "in their systems",
    "start": "132400",
    "end": "134160"
  },
  {
    "text": "this introduces a new concept called",
    "start": "134160",
    "end": "135920"
  },
  {
    "text": "cloud native network functions or cnfs",
    "start": "135920",
    "end": "139120"
  },
  {
    "text": "at some point the end goal would be to",
    "start": "139120",
    "end": "140879"
  },
  {
    "text": "have a mixed setup of network functions",
    "start": "140879",
    "end": "144000"
  },
  {
    "text": "meaning that bare metal machines virtual",
    "start": "144000",
    "end": "146080"
  },
  {
    "text": "machines and containers",
    "start": "146080",
    "end": "148080"
  },
  {
    "text": "live as a single entity",
    "start": "148080",
    "end": "151360"
  },
  {
    "text": "network service mesh is a project that",
    "start": "151519",
    "end": "153680"
  },
  {
    "text": "aims to be part of that transition",
    "start": "153680",
    "end": "157680"
  },
  {
    "text": "let's talk about what is a network",
    "start": "157680",
    "end": "159920"
  },
  {
    "start": "158000",
    "end": "158000"
  },
  {
    "text": "service",
    "start": "159920",
    "end": "161200"
  },
  {
    "text": "imagine there is an application and that",
    "start": "161200",
    "end": "164400"
  },
  {
    "text": "it runs in the public cloud",
    "start": "164400",
    "end": "166640"
  },
  {
    "text": "it needs to connect to another cloud or",
    "start": "166640",
    "end": "169519"
  },
  {
    "text": "to a corporate internet",
    "start": "169519",
    "end": "171680"
  },
  {
    "text": "in order to consume some custom service",
    "start": "171680",
    "end": "174000"
  },
  {
    "text": "that is exposed",
    "start": "174000",
    "end": "175760"
  },
  {
    "text": "and this opens a problem because",
    "start": "175760",
    "end": "179200"
  },
  {
    "text": "usually the application takes care of",
    "start": "179200",
    "end": "182159"
  },
  {
    "text": "implementing the connection logic",
    "start": "182159",
    "end": "184879"
  },
  {
    "text": "and the app doesn't actually want to",
    "start": "184879",
    "end": "187120"
  },
  {
    "text": "know about that",
    "start": "187120",
    "end": "188239"
  },
  {
    "text": "why for example what if the connection",
    "start": "188239",
    "end": "192080"
  },
  {
    "text": "changes and what if we have multiple",
    "start": "192080",
    "end": "195360"
  },
  {
    "text": "applications in that case we would need",
    "start": "195360",
    "end": "198239"
  },
  {
    "text": "to update each of that",
    "start": "198239",
    "end": "199760"
  },
  {
    "text": "of them in order to apply those",
    "start": "199760",
    "end": "201680"
  },
  {
    "text": "connection changes",
    "start": "201680",
    "end": "203280"
  },
  {
    "text": "and we need to do that every time when",
    "start": "203280",
    "end": "205920"
  },
  {
    "text": "there is",
    "start": "205920",
    "end": "206560"
  },
  {
    "text": "such change we can agree that this is",
    "start": "206560",
    "end": "209519"
  },
  {
    "text": "not very efficient",
    "start": "209519",
    "end": "211280"
  },
  {
    "text": "so what we can do instead we can offer",
    "start": "211280",
    "end": "214560"
  },
  {
    "text": "that to a network service",
    "start": "214560",
    "end": "216720"
  },
  {
    "text": "that provides such functionality in this",
    "start": "216720",
    "end": "219840"
  },
  {
    "text": "case",
    "start": "219840",
    "end": "220400"
  },
  {
    "text": "we have clients that requests a network",
    "start": "220400",
    "end": "224080"
  },
  {
    "text": "service",
    "start": "224080",
    "end": "225120"
  },
  {
    "text": "we have endpoints that implement a",
    "start": "225120",
    "end": "227360"
  },
  {
    "text": "network service",
    "start": "227360",
    "end": "228799"
  },
  {
    "text": "and the communication between them",
    "start": "228799",
    "end": "231200"
  },
  {
    "text": "happens through wires that are payable",
    "start": "231200",
    "end": "233439"
  },
  {
    "text": "agnostic",
    "start": "233439",
    "end": "234640"
  },
  {
    "text": "all these components form the concept of",
    "start": "234640",
    "end": "237840"
  },
  {
    "text": "network service mesh",
    "start": "237840",
    "end": "241840"
  },
  {
    "start": "242000",
    "end": "242000"
  },
  {
    "text": "so what is network service mesh it is an",
    "start": "242400",
    "end": "245360"
  },
  {
    "text": "infrastructure layer for managing layer",
    "start": "245360",
    "end": "247439"
  },
  {
    "text": "2 and layer 3 service to service",
    "start": "247439",
    "end": "249200"
  },
  {
    "text": "communication",
    "start": "249200",
    "end": "250560"
  },
  {
    "text": "it provides on-demand and negotiated",
    "start": "250560",
    "end": "252879"
  },
  {
    "text": "point-to-point connections",
    "start": "252879",
    "end": "254799"
  },
  {
    "text": "and it exposes a grpc api through which",
    "start": "254799",
    "end": "258160"
  },
  {
    "text": "you can publish and consume network",
    "start": "258160",
    "end": "259759"
  },
  {
    "text": "services",
    "start": "259759",
    "end": "261120"
  },
  {
    "text": "and finally the great thing is that all",
    "start": "261120",
    "end": "262800"
  },
  {
    "text": "that happens without any changes to",
    "start": "262800",
    "end": "264479"
  },
  {
    "text": "kubernetes",
    "start": "264479",
    "end": "265360"
  },
  {
    "text": "or the underlying cni network",
    "start": "265360",
    "end": "268960"
  },
  {
    "text": "let's see how we can describe the",
    "start": "268960",
    "end": "270960"
  },
  {
    "start": "269000",
    "end": "269000"
  },
  {
    "text": "previous example of a network service in",
    "start": "270960",
    "end": "273520"
  },
  {
    "text": "a simple",
    "start": "273520",
    "end": "274240"
  },
  {
    "text": "yaml file we need to specify",
    "start": "274240",
    "end": "277440"
  },
  {
    "text": "a payload type for example an ip",
    "start": "277440",
    "end": "280800"
  },
  {
    "text": "we need source and destination selection",
    "start": "280800",
    "end": "284240"
  },
  {
    "text": "in our example the client was connecting",
    "start": "284240",
    "end": "286639"
  },
  {
    "text": "to a firewall",
    "start": "286639",
    "end": "287919"
  },
  {
    "text": "and then through the vpn gateway so in",
    "start": "287919",
    "end": "290960"
  },
  {
    "text": "our yaml file",
    "start": "290960",
    "end": "292320"
  },
  {
    "text": "the default match is going to the",
    "start": "292320",
    "end": "294080"
  },
  {
    "text": "firewall and then it goes through gvpn",
    "start": "294080",
    "end": "296560"
  },
  {
    "text": "gateway",
    "start": "296560",
    "end": "298000"
  },
  {
    "text": "this way of service definition makes it",
    "start": "298000",
    "end": "300400"
  },
  {
    "text": "possible to chain multiple",
    "start": "300400",
    "end": "302400"
  },
  {
    "text": "clients or endpoints and to create the",
    "start": "302400",
    "end": "305520"
  },
  {
    "text": "so-called",
    "start": "305520",
    "end": "306400"
  },
  {
    "text": "service composition this allows us to",
    "start": "306400",
    "end": "309360"
  },
  {
    "text": "describe",
    "start": "309360",
    "end": "310000"
  },
  {
    "text": "to the technology that serves our needs",
    "start": "310000",
    "end": "315039"
  },
  {
    "start": "315000",
    "end": "315000"
  },
  {
    "text": "how this example looks like in typical",
    "start": "316240",
    "end": "319120"
  },
  {
    "text": "kubernetes deployment",
    "start": "319120",
    "end": "320560"
  },
  {
    "text": "we have kubernetes we have network",
    "start": "320560",
    "end": "323360"
  },
  {
    "text": "service mesh deployed on top",
    "start": "323360",
    "end": "325280"
  },
  {
    "text": "and we have three parts to rank one",
    "start": "325280",
    "end": "327919"
  },
  {
    "text": "client and two end points",
    "start": "327919",
    "end": "330720"
  },
  {
    "text": "what happens first the endpoints",
    "start": "330720",
    "end": "333759"
  },
  {
    "text": "announce themselves to network service",
    "start": "333759",
    "end": "336560"
  },
  {
    "text": "mesh",
    "start": "336560",
    "end": "337680"
  },
  {
    "text": "then the client requests a network",
    "start": "337680",
    "end": "340080"
  },
  {
    "text": "service",
    "start": "340080",
    "end": "340960"
  },
  {
    "text": "from network service mesh finally",
    "start": "340960",
    "end": "344000"
  },
  {
    "text": "any same takes care of creating the",
    "start": "344000",
    "end": "346320"
  },
  {
    "text": "necessary connections",
    "start": "346320",
    "end": "348000"
  },
  {
    "text": "it injects network interfaces to all the",
    "start": "348000",
    "end": "351520"
  },
  {
    "text": "pots",
    "start": "351520",
    "end": "352479"
  },
  {
    "text": "and it creates a communication to know",
    "start": "352479",
    "end": "354639"
  },
  {
    "text": "between them",
    "start": "354639",
    "end": "355600"
  },
  {
    "text": "and this creates the connection a really",
    "start": "355600",
    "end": "358800"
  },
  {
    "text": "great thing here is that all this",
    "start": "358800",
    "end": "360639"
  },
  {
    "text": "happens without any changes to the",
    "start": "360639",
    "end": "362800"
  },
  {
    "text": "underlying cni",
    "start": "362800",
    "end": "364160"
  },
  {
    "text": "the cni is great enough so why it",
    "start": "364160",
    "end": "366639"
  },
  {
    "text": "changed",
    "start": "366639",
    "end": "368479"
  },
  {
    "text": "now let's zoom a little and see how",
    "start": "368479",
    "end": "371759"
  },
  {
    "text": "network service mesh works in more",
    "start": "371759",
    "end": "373919"
  },
  {
    "text": "details",
    "start": "373919",
    "end": "376479"
  },
  {
    "start": "377000",
    "end": "377000"
  },
  {
    "text": "so how it works nsm consists of two main",
    "start": "377919",
    "end": "381280"
  },
  {
    "text": "building blocks",
    "start": "381280",
    "end": "382160"
  },
  {
    "text": "it has a manager and a forwarding plane",
    "start": "382160",
    "end": "385360"
  },
  {
    "text": "the two live on every node but have",
    "start": "385360",
    "end": "387440"
  },
  {
    "text": "different responsibilities",
    "start": "387440",
    "end": "389520"
  },
  {
    "text": "we also use the case api as a registry",
    "start": "389520",
    "end": "392400"
  },
  {
    "text": "for our network services",
    "start": "392400",
    "end": "395199"
  },
  {
    "text": "the manager is responsible for",
    "start": "395199",
    "end": "397039"
  },
  {
    "text": "negotiating the connection details",
    "start": "397039",
    "end": "399680"
  },
  {
    "text": "and to make sure that the job will be",
    "start": "399680",
    "end": "401360"
  },
  {
    "text": "done and everything is okay",
    "start": "401360",
    "end": "403600"
  },
  {
    "text": "once we have set that details then we",
    "start": "403600",
    "end": "405759"
  },
  {
    "text": "need someone to actually do the work",
    "start": "405759",
    "end": "407360"
  },
  {
    "text": "right",
    "start": "407360",
    "end": "408319"
  },
  {
    "text": "well that someone is the forwarding",
    "start": "408319",
    "end": "410479"
  },
  {
    "text": "plane",
    "start": "410479",
    "end": "412080"
  },
  {
    "text": "now let's see how a connection request",
    "start": "412080",
    "end": "413840"
  },
  {
    "text": "looks like",
    "start": "413840",
    "end": "416319"
  },
  {
    "text": "we start by deploying our network",
    "start": "416319",
    "end": "417919"
  },
  {
    "text": "service via the yaml file from before",
    "start": "417919",
    "end": "421440"
  },
  {
    "text": "once our endpoint is started it",
    "start": "421440",
    "end": "423599"
  },
  {
    "text": "announces itself",
    "start": "423599",
    "end": "424800"
  },
  {
    "text": "to its local manager that then saves",
    "start": "424800",
    "end": "427759"
  },
  {
    "text": "that information inside the registry",
    "start": "427759",
    "end": "430639"
  },
  {
    "text": "on the other side we have a client that",
    "start": "430639",
    "end": "432639"
  },
  {
    "text": "wants to consume our network service",
    "start": "432639",
    "end": "435759"
  },
  {
    "text": "it requests it from its local manager",
    "start": "435759",
    "end": "438880"
  },
  {
    "text": "that seeks for information about that",
    "start": "438880",
    "end": "441199"
  },
  {
    "text": "network service",
    "start": "441199",
    "end": "442319"
  },
  {
    "text": "inside the registry once it finds out",
    "start": "442319",
    "end": "445199"
  },
  {
    "text": "which is the manager responsible for",
    "start": "445199",
    "end": "446880"
  },
  {
    "text": "that network service",
    "start": "446880",
    "end": "448800"
  },
  {
    "text": "the two majors start to negotiate the",
    "start": "448800",
    "end": "451120"
  },
  {
    "text": "connection details",
    "start": "451120",
    "end": "453440"
  },
  {
    "text": "once this is completed they fit that",
    "start": "453440",
    "end": "456080"
  },
  {
    "text": "information down",
    "start": "456080",
    "end": "457199"
  },
  {
    "text": "to the forwarding place then it's up to",
    "start": "457199",
    "end": "460720"
  },
  {
    "text": "them",
    "start": "460720",
    "end": "461440"
  },
  {
    "text": "to create the communication tunnel",
    "start": "461440",
    "end": "463039"
  },
  {
    "text": "between the two nodes",
    "start": "463039",
    "end": "464800"
  },
  {
    "text": "create the necessary interfaces and",
    "start": "464800",
    "end": "466960"
  },
  {
    "text": "inject them",
    "start": "466960",
    "end": "468000"
  },
  {
    "text": "inside the pods and thus complete the",
    "start": "468000",
    "end": "470879"
  },
  {
    "text": "connection between the client",
    "start": "470879",
    "end": "472400"
  },
  {
    "text": "and the firewall",
    "start": "472400",
    "end": "475199"
  },
  {
    "text": "now let's have a more talk oriented",
    "start": "476160",
    "end": "477759"
  },
  {
    "text": "example",
    "start": "477759",
    "end": "479360"
  },
  {
    "text": "in this case we're going to recreate the",
    "start": "479360",
    "end": "480960"
  },
  {
    "text": "topology of a 4g lte network",
    "start": "480960",
    "end": "483759"
  },
  {
    "text": "using network service mesh",
    "start": "483759",
    "end": "487199"
  },
  {
    "text": "now let's see how a standard 4g network",
    "start": "487360",
    "end": "489360"
  },
  {
    "text": "looks like",
    "start": "489360",
    "end": "490560"
  },
  {
    "text": "first we have the user equipment which",
    "start": "490560",
    "end": "492400"
  },
  {
    "text": "are the devices that use that network",
    "start": "492400",
    "end": "494720"
  },
  {
    "text": "stuff like phones cars iot devices and",
    "start": "494720",
    "end": "497680"
  },
  {
    "text": "so on",
    "start": "497680",
    "end": "500080"
  },
  {
    "text": "then we have the radio access network",
    "start": "500080",
    "end": "502240"
  },
  {
    "text": "which which are basically lots of",
    "start": "502240",
    "end": "503919"
  },
  {
    "text": "antennas",
    "start": "503919",
    "end": "504879"
  },
  {
    "text": "or base stations then",
    "start": "504879",
    "end": "508319"
  },
  {
    "text": "we have the evolved packet core network",
    "start": "508319",
    "end": "510160"
  },
  {
    "text": "or epc",
    "start": "510160",
    "end": "511680"
  },
  {
    "text": "which are a set of components each",
    "start": "511680",
    "end": "513518"
  },
  {
    "text": "responsible for different service within",
    "start": "513519",
    "end": "515440"
  },
  {
    "text": "that system",
    "start": "515440",
    "end": "517039"
  },
  {
    "text": "for example stuff like user",
    "start": "517039",
    "end": "518959"
  },
  {
    "text": "authentication",
    "start": "518959",
    "end": "520080"
  },
  {
    "text": "charging gateways that manage quality of",
    "start": "520080",
    "end": "522560"
  },
  {
    "text": "service and so on",
    "start": "522560",
    "end": "524640"
  },
  {
    "text": "the output then goes to the data network",
    "start": "524640",
    "end": "528320"
  },
  {
    "text": "for example the internet in this talk",
    "start": "528320",
    "end": "531120"
  },
  {
    "text": "we're going to focus on that box in the",
    "start": "531120",
    "end": "532800"
  },
  {
    "text": "middle",
    "start": "532800",
    "end": "533440"
  },
  {
    "text": "and recreate the network topology for",
    "start": "533440",
    "end": "535279"
  },
  {
    "text": "the packet core network",
    "start": "535279",
    "end": "538480"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "so let's see how to do that using",
    "start": "539200",
    "end": "540880"
  },
  {
    "text": "network service mesh",
    "start": "540880",
    "end": "543120"
  },
  {
    "text": "first we decide that each component is",
    "start": "543120",
    "end": "545360"
  },
  {
    "text": "going to be a different pot within",
    "start": "545360",
    "end": "546839"
  },
  {
    "text": "kubernetes",
    "start": "546839",
    "end": "549760"
  },
  {
    "text": "now that we have a bunch of ports we",
    "start": "549760",
    "end": "551120"
  },
  {
    "text": "want to connect we need to decide how to",
    "start": "551120",
    "end": "553279"
  },
  {
    "text": "map that to network service mesh",
    "start": "553279",
    "end": "556240"
  },
  {
    "text": "although we can have a port that is both",
    "start": "556240",
    "end": "557920"
  },
  {
    "text": "client and endpoints",
    "start": "557920",
    "end": "559839"
  },
  {
    "text": "to simplify it we'll create the setup in",
    "start": "559839",
    "end": "561920"
  },
  {
    "text": "such a way",
    "start": "561920",
    "end": "562880"
  },
  {
    "text": "that the single body side of the client",
    "start": "562880",
    "end": "564720"
  },
  {
    "text": "or an endpoint",
    "start": "564720",
    "end": "567120"
  },
  {
    "text": "considering that the end result looks",
    "start": "567120",
    "end": "569279"
  },
  {
    "text": "like the following",
    "start": "569279",
    "end": "572080"
  },
  {
    "text": "for example we chose mme to be an",
    "start": "572480",
    "end": "575279"
  },
  {
    "text": "endpoint",
    "start": "575279",
    "end": "577519"
  },
  {
    "text": "and hss to be a client",
    "start": "577519",
    "end": "581279"
  },
  {
    "start": "582000",
    "end": "582000"
  },
  {
    "text": "once we have covered that then we need",
    "start": "583120",
    "end": "585120"
  },
  {
    "text": "to describe the topology in the network",
    "start": "585120",
    "end": "587360"
  },
  {
    "text": "service yaml file",
    "start": "587360",
    "end": "589200"
  },
  {
    "text": "as we said before it consists of a set",
    "start": "589200",
    "end": "591519"
  },
  {
    "text": "of matches",
    "start": "591519",
    "end": "592720"
  },
  {
    "text": "and each much have a source selector and",
    "start": "592720",
    "end": "595279"
  },
  {
    "text": "a destination selector",
    "start": "595279",
    "end": "597360"
  },
  {
    "text": "this means that if your request is",
    "start": "597360",
    "end": "598959"
  },
  {
    "text": "coming with a label matching the source",
    "start": "598959",
    "end": "600560"
  },
  {
    "text": "selector",
    "start": "600560",
    "end": "601680"
  },
  {
    "text": "we should put it for an endpoint with a",
    "start": "601680",
    "end": "603440"
  },
  {
    "text": "label from the destination selector",
    "start": "603440",
    "end": "606079"
  },
  {
    "text": "for example s6a is our source selector",
    "start": "606079",
    "end": "611440"
  },
  {
    "text": "which is a label coming from the hss",
    "start": "611440",
    "end": "613440"
  },
  {
    "text": "client",
    "start": "613440",
    "end": "615120"
  },
  {
    "text": "and mme is our destination selector",
    "start": "615120",
    "end": "618320"
  },
  {
    "text": "which is the label advertised by the mme",
    "start": "618320",
    "end": "620640"
  },
  {
    "text": "endpoint",
    "start": "620640",
    "end": "622880"
  },
  {
    "text": "we complete describing the whole",
    "start": "622880",
    "end": "624560"
  },
  {
    "text": "topology using that same approach for",
    "start": "624560",
    "end": "626560"
  },
  {
    "text": "each connection",
    "start": "626560",
    "end": "629279"
  },
  {
    "start": "629000",
    "end": "629000"
  },
  {
    "text": "so let's see how the ktml files looks",
    "start": "629920",
    "end": "632320"
  },
  {
    "text": "like for both endpoint and",
    "start": "632320",
    "end": "633680"
  },
  {
    "text": "client for the endpoint we specify the",
    "start": "633680",
    "end": "637200"
  },
  {
    "text": "network service it belongs to",
    "start": "637200",
    "end": "639600"
  },
  {
    "text": "in this case this is 4g network then",
    "start": "639600",
    "end": "642959"
  },
  {
    "text": "we specify the endpoint label we'll",
    "start": "642959",
    "end": "645040"
  },
  {
    "text": "advertise from this",
    "start": "645040",
    "end": "646000"
  },
  {
    "text": "endpoint in this case this is mme",
    "start": "646000",
    "end": "650399"
  },
  {
    "text": "for the client we want to say which",
    "start": "650399",
    "end": "652160"
  },
  {
    "text": "network service it wants to consume",
    "start": "652160",
    "end": "654079"
  },
  {
    "text": "right",
    "start": "654079",
    "end": "655279"
  },
  {
    "text": "to do so we specify the network service",
    "start": "655279",
    "end": "658480"
  },
  {
    "text": "and",
    "start": "658480",
    "end": "658800"
  },
  {
    "text": "the label we're going to advertise as a",
    "start": "658800",
    "end": "660640"
  },
  {
    "text": "client in our case this is 4g network",
    "start": "660640",
    "end": "663680"
  },
  {
    "text": "and s6a",
    "start": "663680",
    "end": "666800"
  },
  {
    "text": "now let's see the actual demo of the 4g",
    "start": "667360",
    "end": "670640"
  },
  {
    "text": "network topology example",
    "start": "670640",
    "end": "673440"
  },
  {
    "text": "we will be using network service mesh",
    "start": "673440",
    "end": "676640"
  },
  {
    "text": "with kubernetes",
    "start": "676640",
    "end": "678720"
  },
  {
    "text": "so we have a simple burnet is deployment",
    "start": "678720",
    "end": "682320"
  },
  {
    "text": "we have to note cluster there is nothing",
    "start": "682320",
    "end": "685040"
  },
  {
    "text": "fancy in it",
    "start": "685040",
    "end": "686720"
  },
  {
    "text": "then we deploy network service mesh",
    "start": "686720",
    "end": "689040"
  },
  {
    "text": "infrastructure",
    "start": "689040",
    "end": "690079"
  },
  {
    "text": "using here we will wait for a while",
    "start": "690079",
    "end": "694160"
  },
  {
    "text": "until the deployment is done and",
    "start": "694160",
    "end": "696079"
  },
  {
    "text": "until all the pots are available and are",
    "start": "696079",
    "end": "700720"
  },
  {
    "text": "ready",
    "start": "700839",
    "end": "702480"
  },
  {
    "text": "so once there once the deployment",
    "start": "702480",
    "end": "705680"
  },
  {
    "text": "is completed we can see that there are",
    "start": "705680",
    "end": "709360"
  },
  {
    "text": "two",
    "start": "709360",
    "end": "709680"
  },
  {
    "text": "nsm managers and there are two",
    "start": "709680",
    "end": "712320"
  },
  {
    "text": "forwarding planes",
    "start": "712320",
    "end": "713920"
  },
  {
    "text": "each of them for each note of the",
    "start": "713920",
    "end": "716240"
  },
  {
    "text": "cluster",
    "start": "716240",
    "end": "717279"
  },
  {
    "text": "as we showed in the previous in the",
    "start": "717279",
    "end": "719519"
  },
  {
    "text": "examples",
    "start": "719519",
    "end": "722160"
  },
  {
    "text": "then we proceeded by deploying the yaml",
    "start": "722320",
    "end": "725519"
  },
  {
    "text": "files",
    "start": "725519",
    "end": "726160"
  },
  {
    "text": "that we created earlier after that we",
    "start": "726160",
    "end": "729440"
  },
  {
    "text": "can see",
    "start": "729440",
    "end": "730160"
  },
  {
    "text": "that each client and endpoint are being",
    "start": "730160",
    "end": "732959"
  },
  {
    "text": "deployed",
    "start": "732959",
    "end": "734160"
  },
  {
    "text": "here are all the components that we",
    "start": "734160",
    "end": "736399"
  },
  {
    "text": "already showed",
    "start": "736399",
    "end": "737680"
  },
  {
    "text": "in the example once this is done and",
    "start": "737680",
    "end": "740880"
  },
  {
    "text": "once all the pots",
    "start": "740880",
    "end": "742160"
  },
  {
    "text": "are ready this completes deploying the",
    "start": "742160",
    "end": "744959"
  },
  {
    "text": "4g network topology",
    "start": "744959",
    "end": "746720"
  },
  {
    "text": "that we described in the yaml file",
    "start": "746720",
    "end": "750000"
  },
  {
    "text": "this means that all the necessary",
    "start": "750000",
    "end": "752480"
  },
  {
    "text": "interfaces",
    "start": "752480",
    "end": "753600"
  },
  {
    "text": "and connections were created created by",
    "start": "753600",
    "end": "756720"
  },
  {
    "text": "the forwarding planes",
    "start": "756720",
    "end": "758480"
  },
  {
    "text": "in that all the components can",
    "start": "758480",
    "end": "760800"
  },
  {
    "text": "communicate with",
    "start": "760800",
    "end": "762000"
  },
  {
    "text": "each other but we now need to verify",
    "start": "762000",
    "end": "765120"
  },
  {
    "text": "that",
    "start": "765120",
    "end": "766560"
  },
  {
    "text": "so that we have everything deployed we",
    "start": "766560",
    "end": "769440"
  },
  {
    "text": "need to make sure",
    "start": "769440",
    "end": "770639"
  },
  {
    "text": "that it is created as we wanted it to be",
    "start": "770639",
    "end": "773920"
  },
  {
    "text": "for that reason we have a script that",
    "start": "773920",
    "end": "775839"
  },
  {
    "text": "verifies the connections between each",
    "start": "775839",
    "end": "777760"
  },
  {
    "text": "client and",
    "start": "777760",
    "end": "778480"
  },
  {
    "text": "endpoint the the script loops through",
    "start": "778480",
    "end": "782000"
  },
  {
    "text": "all the clients and it pings the",
    "start": "782000",
    "end": "784320"
  },
  {
    "text": "corresponding",
    "start": "784320",
    "end": "785200"
  },
  {
    "text": "and from endpoint for that client",
    "start": "785200",
    "end": "788399"
  },
  {
    "text": "we can see the successful pings from the",
    "start": "788399",
    "end": "791120"
  },
  {
    "text": "output and",
    "start": "791120",
    "end": "792160"
  },
  {
    "text": "we can also see the endpoint and client",
    "start": "792160",
    "end": "795440"
  },
  {
    "text": "port names in the same output",
    "start": "795440",
    "end": "801440"
  },
  {
    "text": "so what else can we do we can use a",
    "start": "801440",
    "end": "803680"
  },
  {
    "text": "dashboard like skydive",
    "start": "803680",
    "end": "805279"
  },
  {
    "text": "to better visualize our deployment and",
    "start": "805279",
    "end": "808320"
  },
  {
    "text": "what do we see",
    "start": "808320",
    "end": "809360"
  },
  {
    "text": "we see our two worker nodes being there",
    "start": "809360",
    "end": "811680"
  },
  {
    "text": "and we can see the pots that live on",
    "start": "811680",
    "end": "813519"
  },
  {
    "text": "each node",
    "start": "813519",
    "end": "814240"
  },
  {
    "text": "you can see the clients and we can see",
    "start": "814240",
    "end": "816240"
  },
  {
    "text": "the end points",
    "start": "816240",
    "end": "817760"
  },
  {
    "text": "for each pot we can see the containers",
    "start": "817760",
    "end": "820000"
  },
  {
    "text": "that live inside it and the available",
    "start": "820000",
    "end": "821760"
  },
  {
    "text": "network interfaces",
    "start": "821760",
    "end": "823040"
  },
  {
    "text": "has a good thing that we can visualize",
    "start": "823040",
    "end": "826160"
  },
  {
    "text": "here is that",
    "start": "826160",
    "end": "826959"
  },
  {
    "text": "we can see the pot to pot connections",
    "start": "826959",
    "end": "829279"
  },
  {
    "text": "that are created by network service mesh",
    "start": "829279",
    "end": "832480"
  },
  {
    "text": "we can also see some specific",
    "start": "832480",
    "end": "834320"
  },
  {
    "text": "information for each interface",
    "start": "834320",
    "end": "836560"
  },
  {
    "text": "stuff like type state address and even",
    "start": "836560",
    "end": "839600"
  },
  {
    "text": "its matrix",
    "start": "839600",
    "end": "841680"
  },
  {
    "text": "and this is available for both nsm and",
    "start": "841680",
    "end": "844639"
  },
  {
    "text": "cni created interfaces",
    "start": "844639",
    "end": "847839"
  },
  {
    "text": "with that we can see that having a",
    "start": "847839",
    "end": "849519"
  },
  {
    "text": "dashboard like skydive",
    "start": "849519",
    "end": "851199"
  },
  {
    "text": "presents a pretty neat way to better",
    "start": "851199",
    "end": "853040"
  },
  {
    "text": "understand your deployment",
    "start": "853040",
    "end": "854959"
  },
  {
    "text": "and visualize it in a nice and simple",
    "start": "854959",
    "end": "857040"
  },
  {
    "text": "manner",
    "start": "857040",
    "end": "859279"
  },
  {
    "text": "with that example we showcase that",
    "start": "859279",
    "end": "862399"
  },
  {
    "text": "nsa makes it possible to have flexible",
    "start": "862399",
    "end": "865360"
  },
  {
    "text": "and dynamically defined infrastructure",
    "start": "865360",
    "end": "868240"
  },
  {
    "text": "using a simple api this is something",
    "start": "868240",
    "end": "871600"
  },
  {
    "text": "really important for use cases",
    "start": "871600",
    "end": "873839"
  },
  {
    "text": "such as telco another thing to share is",
    "start": "873839",
    "end": "876880"
  },
  {
    "text": "that we are also actively",
    "start": "876880",
    "end": "878480"
  },
  {
    "text": "involved in the cncfcnf facebook",
    "start": "878480",
    "end": "881920"
  },
  {
    "text": "for those of you that don't know about",
    "start": "881920",
    "end": "884959"
  },
  {
    "text": "it this is an initiative to evaluate how",
    "start": "884959",
    "end": "888160"
  },
  {
    "text": "cnf architectures compare",
    "start": "888160",
    "end": "890480"
  },
  {
    "text": "to the more traditional vnf ones there",
    "start": "890480",
    "end": "893600"
  },
  {
    "text": "are",
    "start": "893600",
    "end": "894000"
  },
  {
    "text": "two already there are two network",
    "start": "894000",
    "end": "896240"
  },
  {
    "text": "service mesh",
    "start": "896240",
    "end": "897440"
  },
  {
    "text": "based use cases that are present there",
    "start": "897440",
    "end": "900560"
  },
  {
    "text": "and there is an ongoing work by ericsson",
    "start": "900560",
    "end": "903680"
  },
  {
    "text": "to provide",
    "start": "903680",
    "end": "904959"
  },
  {
    "text": "a network separation use case",
    "start": "904959",
    "end": "908079"
  },
  {
    "text": "what's next with the project we have an",
    "start": "908079",
    "end": "911360"
  },
  {
    "text": "ongoing",
    "start": "911360",
    "end": "912079"
  },
  {
    "text": "multi-rep refactoring that will improve",
    "start": "912079",
    "end": "914720"
  },
  {
    "text": "the project structure",
    "start": "914720",
    "end": "916560"
  },
  {
    "text": "we have a kubernetes operator for",
    "start": "916560",
    "end": "919279"
  },
  {
    "text": "deploying and managing network service",
    "start": "919279",
    "end": "921600"
  },
  {
    "text": "mesh",
    "start": "921600",
    "end": "923040"
  },
  {
    "text": "there are also very interesting",
    "start": "923040",
    "end": "924720"
  },
  {
    "text": "contributions in the forwarding playing",
    "start": "924720",
    "end": "926880"
  },
  {
    "text": "context",
    "start": "926880",
    "end": "928320"
  },
  {
    "text": "we have we are working",
    "start": "928320",
    "end": "931759"
  },
  {
    "text": "on support for multiple simultaneous",
    "start": "931759",
    "end": "934399"
  },
  {
    "text": "foreigners",
    "start": "934399",
    "end": "936079"
  },
  {
    "text": "also ericsson are working on a forwarder",
    "start": "936079",
    "end": "939199"
  },
  {
    "text": "with hardware",
    "start": "939199",
    "end": "940079"
  },
  {
    "text": "offloading to smart mix and this will",
    "start": "940079",
    "end": "943440"
  },
  {
    "text": "deliver a pci passthrough performance",
    "start": "943440",
    "end": "946000"
  },
  {
    "text": "for",
    "start": "946000",
    "end": "946320"
  },
  {
    "text": "clients and endpoints in the context of",
    "start": "946320",
    "end": "948880"
  },
  {
    "text": "network service mesh",
    "start": "948880",
    "end": "950720"
  },
  {
    "text": "and this will also deliver no host",
    "start": "950720",
    "end": "953600"
  },
  {
    "text": "consumed",
    "start": "953600",
    "end": "954399"
  },
  {
    "text": "compared to dpdk we are also working on",
    "start": "954399",
    "end": "958560"
  },
  {
    "text": "an",
    "start": "958560",
    "end": "959120"
  },
  {
    "text": "srov forwarder and for those of you that",
    "start": "959120",
    "end": "963440"
  },
  {
    "text": "are interested",
    "start": "963440",
    "end": "964480"
  },
  {
    "text": "there will be a same seminar covering",
    "start": "964480",
    "end": "966959"
  },
  {
    "text": "how",
    "start": "966959",
    "end": "967519"
  },
  {
    "text": "network service mesh can address the",
    "start": "967519",
    "end": "969519"
  },
  {
    "text": "networking challenges that cloud native",
    "start": "969519",
    "end": "971839"
  },
  {
    "text": "tech applications face",
    "start": "971839",
    "end": "973600"
  },
  {
    "text": "in 5g there will be details and",
    "start": "973600",
    "end": "976959"
  },
  {
    "text": "proof of concept on how network service",
    "start": "976959",
    "end": "979440"
  },
  {
    "text": "mesh decouples the infrastructure from",
    "start": "979440",
    "end": "982240"
  },
  {
    "text": "applications and the speakers you",
    "start": "982240",
    "end": "985279"
  },
  {
    "text": "also give an update of the network",
    "start": "985279",
    "end": "987519"
  },
  {
    "text": "separation use case that is ongoing in",
    "start": "987519",
    "end": "990000"
  },
  {
    "text": "the",
    "start": "990000",
    "end": "990560"
  },
  {
    "text": "cnf testbed",
    "start": "990560",
    "end": "996079"
  },
  {
    "text": "so the takeaway that we see here is that",
    "start": "996079",
    "end": "998800"
  },
  {
    "text": "teleco operators and service providers",
    "start": "998800",
    "end": "1001199"
  },
  {
    "text": "are actively looking at the cloud native",
    "start": "1001199",
    "end": "1003199"
  },
  {
    "text": "world to build their next generation",
    "start": "1003199",
    "end": "1005279"
  },
  {
    "text": "solutions",
    "start": "1005279",
    "end": "1006880"
  },
  {
    "text": "meaning that containers and all that",
    "start": "1006880",
    "end": "1008639"
  },
  {
    "text": "ecosystem of projects around them",
    "start": "1008639",
    "end": "1010720"
  },
  {
    "text": "will be the next building blocks for",
    "start": "1010720",
    "end": "1012240"
  },
  {
    "text": "that",
    "start": "1012240",
    "end": "1013839"
  },
  {
    "text": "projects like network service mesh aim",
    "start": "1013839",
    "end": "1015920"
  },
  {
    "text": "to provide features that will help to",
    "start": "1015920",
    "end": "1017759"
  },
  {
    "text": "create those future systems",
    "start": "1017759",
    "end": "1019519"
  },
  {
    "text": "and at the end be part of that",
    "start": "1019519",
    "end": "1022839"
  },
  {
    "text": "transition",
    "start": "1022839",
    "end": "1025120"
  },
  {
    "text": "and with that i believe we've covered",
    "start": "1025120",
    "end": "1027038"
  },
  {
    "text": "all the slides for this talk",
    "start": "1027039",
    "end": "1028880"
  },
  {
    "text": "we'd like to say thank you again for",
    "start": "1028880",
    "end": "1030400"
  },
  {
    "text": "attending our virtual session at kubecon",
    "start": "1030400",
    "end": "1032640"
  },
  {
    "text": "europe",
    "start": "1032640",
    "end": "1033600"
  },
  {
    "text": "we hope everyone enjoyed it and got some",
    "start": "1033600",
    "end": "1035438"
  },
  {
    "text": "var out of it",
    "start": "1035439",
    "end": "1036798"
  },
  {
    "text": "thank you thank you and we are also",
    "start": "1036799",
    "end": "1040160"
  },
  {
    "text": "open for questions from the audience",
    "start": "1040160",
    "end": "1046720"
  }
]