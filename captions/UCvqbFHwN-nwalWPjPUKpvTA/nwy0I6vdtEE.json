[
  {
    "text": "hello everyone and welcome to the uh tutorial on open Telemetry using open",
    "start": "2720",
    "end": "8519"
  },
  {
    "text": "Telemetry for distributed tracing uh on kubernetes um my name is pav I work at",
    "start": "8519",
    "end": "16600"
  },
  {
    "text": "redhead I'm maintainer of the open Telemetry operator project as well contributor maintainer of jger as well",
    "start": "16600",
    "end": "24320"
  },
  {
    "text": "um and uh maintainer of the grafana tempo operator and yeah it's been long",
    "start": "24320",
    "end": "30199"
  },
  {
    "text": "time I'm contributing to the uh cncf observability projects and with me",
    "start": "30199",
    "end": "36239"
  },
  {
    "text": "is U amazing crowd of people hi my name is Bena and I work",
    "start": "36239",
    "end": "41920"
  },
  {
    "text": "with pav at redhead and I'm also contributing to the open cic project and",
    "start": "41920",
    "end": "48760"
  },
  {
    "text": "Jager hi I'm Anthony Marabella I work at AWS and I'm contributing to open",
    "start": "50000",
    "end": "55440"
  },
  {
    "text": "Telemetry uh and our distribution of it oh hi I'm manusha I'm a software",
    "start": "55440",
    "end": "61519"
  },
  {
    "text": "engineer at Apple I uh work for the observable team there and I'm an open source contributor I work mostly on",
    "start": "61519",
    "end": "67600"
  },
  {
    "text": "metrics and JIS hey everyone I'm mat I work as a software engineer at Coral Logics and I",
    "start": "67600",
    "end": "74400"
  },
  {
    "text": "also work in the observability uh in and among other things I work in the Prometheus ecosystem but as well in open",
    "start": "74400",
    "end": "83640"
  },
  {
    "text": "Telemetry um okay so the whole tutorial is written on on GitHub so we will",
    "start": "85240",
    "end": "92079"
  },
  {
    "text": "continue there if you could please scan the QR code or go to this",
    "start": "92079",
    "end": "97920"
  },
  {
    "text": "URL um and if you will have any questions during the tutorial please",
    "start": "97920",
    "end": "103360"
  },
  {
    "text": "raise your hand and we will help you um in your um on your laptop you don't have",
    "start": "103360",
    "end": "110600"
  },
  {
    "text": "to follow on your laptop if you don't want to everything is uh in the repository you will be able to replicate",
    "start": "110600",
    "end": "117439"
  },
  {
    "text": "everything at home after the conference as well",
    "start": "117439",
    "end": "121840"
  },
  {
    "text": "so I will go to to the GitHub",
    "start": "125799",
    "end": "131840"
  },
  {
    "text": "oops and the repository is as well pinned on my account so you can just",
    "start": "133440",
    "end": "139200"
  },
  {
    "text": "jump there and find it as a as a first",
    "start": "139200",
    "end": "144200"
  },
  {
    "text": "repository so what we prepared today for you is sort of I would say maybe comprehensive",
    "start": "146480",
    "end": "153640"
  },
  {
    "text": "tutorial on how to use open Telemetry for distributed tracing um we will start",
    "start": "153640",
    "end": "159120"
  },
  {
    "text": "with setting up the environment then we will do some theory",
    "start": "159120",
    "end": "164640"
  },
  {
    "text": "about um you know how tracing is implemented in otel what are the",
    "start": "164640",
    "end": "170840"
  },
  {
    "text": "concepts um and then we will do the instrumentation uh we will use the auto",
    "start": "170840",
    "end": "177200"
  },
  {
    "text": "instrumentation to instrument Services running on kuber ities um you will you",
    "start": "177200",
    "end": "183560"
  },
  {
    "text": "know you will see how the open Telemetry um operator is used on kubernetes then B",
    "start": "183560",
    "end": "192200"
  },
  {
    "text": "will continue with the manual instrumentation so we will use the the API and SDK to manually instrument the",
    "start": "192200",
    "end": "199560"
  },
  {
    "text": "application or one of the services from the application uh and then we have a bunch",
    "start": "199560",
    "end": "204959"
  },
  {
    "text": "of uh topics that are really important in tracing as well uh we will look at",
    "start": "204959",
    "end": "210640"
  },
  {
    "text": "sampling how we can reduce cost of um data that we want to collect um then we",
    "start": "210640",
    "end": "217760"
  },
  {
    "text": "have metrics uh that are derived from Trace data uh then we will look at the open",
    "start": "217760",
    "end": "225360"
  },
  {
    "text": "Telemetry transformation language which can help you to um do the transformation",
    "start": "225360",
    "end": "231840"
  },
  {
    "text": "that you need which is usually useful for pii you know removing any sensitive data from the traces that you collect uh",
    "start": "231840",
    "end": "239519"
  },
  {
    "text": "and then there is a wrap up and we have as well optional sections uh one of them is tracing core kubernetes components",
    "start": "239519",
    "end": "247280"
  },
  {
    "text": "like cryo API server and so on um those optional sections are as well in one of",
    "start": "247280",
    "end": "253599"
  },
  {
    "text": "these previous chapters and you can follow them um you know at",
    "start": "253599",
    "end": "258919"
  },
  {
    "text": "home so let's start with a setup um and I as well forgot to mention",
    "start": "258919",
    "end": "265880"
  },
  {
    "text": "that this is the first tutorial that we are doing the first one was uh in",
    "start": "265880",
    "end": "270919"
  },
  {
    "text": "Amsterdam it covered um all the signals so we were",
    "start": "270919",
    "end": "275960"
  },
  {
    "text": "talking about tracing metrics and logs then in Chicago we did a tutorial on",
    "start": "275960",
    "end": "283000"
  },
  {
    "text": "metrics um so all the content is on GitHub you can go there and learn about the previous ones as well um so let's",
    "start": "283000",
    "end": "290880"
  },
  {
    "text": "start with a setup uh we will need a kubernetes cluster um there are some instructions how you can spin up kind",
    "start": "290880",
    "end": "297680"
  },
  {
    "text": "cluster um I have everything locally so I will not replicate those commments",
    "start": "297680",
    "end": "303360"
  },
  {
    "text": "then we will need a third manager because the open Telemetry operator uses the sert manager for",
    "start": "303360",
    "end": "309479"
  },
  {
    "text": "securing the web Hooks and then we will deploy our",
    "start": "309479",
    "end": "316639"
  },
  {
    "text": "observability backend that we will use out use throughout the tutorial the backend deploys Jagger allinone and",
    "start": "316639",
    "end": "323880"
  },
  {
    "text": "prome you server and after that we will just pour forward the the UI to our",
    "start": "323880",
    "end": "333240"
  },
  {
    "text": "host so I will just pour",
    "start": "337160",
    "end": "341160"
  },
  {
    "text": "forward Ben how I can open new",
    "start": "345360",
    "end": "352680"
  },
  {
    "text": "tab you can inrease the size",
    "start": "354199",
    "end": "361639"
  },
  {
    "text": "layout Jesus",
    "start": "365000",
    "end": "368400"
  },
  {
    "text": "Christ okay and the next step is the um introduction to tracing are you able to",
    "start": "377319",
    "end": "384039"
  },
  {
    "text": "deploy those Services locally do we have any issues I see one hand there",
    "start": "384039",
    "end": "390199"
  },
  {
    "text": "some hands there I don't hear",
    "start": "390199",
    "end": "398880"
  },
  {
    "text": "that yeah so yeah uh we just merged one pull request",
    "start": "403080",
    "end": "409160"
  },
  {
    "text": "like uh two minutes ago and um the the problem is that dockerhub is R limiting us so um I was",
    "start": "409160",
    "end": "417240"
  },
  {
    "text": "doing a test run before like an hour ago and I wasn't able to do it but apparently I didn't realize that I",
    "start": "417240",
    "end": "423800"
  },
  {
    "text": "didn't build it for all the architecture so I",
    "start": "423800",
    "end": "428879"
  },
  {
    "text": "apologize I want to uh I can also do this",
    "start": "433080",
    "end": "439879"
  },
  {
    "text": "yes or you can just in the repository you will see the change and you can go to the previous",
    "start": "441479",
    "end": "447919"
  },
  {
    "text": "Docker image for Yer Allin one which comes from the docker Hub can we reite this directly here",
    "start": "447919",
    "end": "453199"
  },
  {
    "text": "onab somewhere or do I have to",
    "start": "453199",
    "end": "458759"
  },
  {
    "text": "uh yeah so it it's merged uh but now you might see the raid limiting from the",
    "start": "472680",
    "end": "478479"
  },
  {
    "text": "docker hub for pulling the the",
    "start": "478479",
    "end": "483080"
  },
  {
    "text": "image yeah I think it was",
    "start": "486080",
    "end": "489800"
  },
  {
    "text": "running yeah okay so we will continue if you see if it doesn't work please raise",
    "start": "501080",
    "end": "507879"
  },
  {
    "text": "your hand",
    "start": "507879",
    "end": "511440"
  },
  {
    "text": "okay so mat is your next section anyway so anyway you should have a bit",
    "start": "518640",
    "end": "524600"
  },
  {
    "text": "of extra time now to set up uh your own environments as as it was said",
    "start": "524600",
    "end": "532880"
  },
  {
    "text": "if you have any issues please raise your hands and um so let's look into a little",
    "start": "532880",
    "end": "538519"
  },
  {
    "text": "bit into what is distrib be the tracing I guess most of you already have some understanding of what this is but we'll look at a little bit at the um model",
    "start": "538519",
    "end": "546279"
  },
  {
    "text": "that we use in open Telemetry um so this should give us like",
    "start": "546279",
    "end": "552680"
  },
  {
    "text": "a common ground and common understanding of of what is distributed",
    "start": "552680",
    "end": "557920"
  },
  {
    "text": "tracing we'll start even from a further point we we're talking about observability right so we're running",
    "start": "557920",
    "end": "564279"
  },
  {
    "text": "these complicated uh systems uh m microservice architectures",
    "start": "564279",
    "end": "570040"
  },
  {
    "text": "and often times we it's not easy to know what's going on inside our systems if",
    "start": "570040",
    "end": "575399"
  },
  {
    "text": "there are any issues um so we somehow want to",
    "start": "575399",
    "end": "580800"
  },
  {
    "text": "understand what is the internal state of our of our system and because we cannot magically see inside of those systems we",
    "start": "580800",
    "end": "587760"
  },
  {
    "text": "somehow need to get the information out of these systems and for this we use uh",
    "start": "587760",
    "end": "592839"
  },
  {
    "text": "different Telemetry signals so you're probably also familiar with most of these but um we have",
    "start": "592839",
    "end": "600160"
  },
  {
    "text": "metrics that gives us certain uh quantifiable measurements about our systems we have traces which we'll talk",
    "start": "600160",
    "end": "607000"
  },
  {
    "text": "uh shortly about we have logs that gives us information about specific events",
    "start": "607000",
    "end": "612240"
  },
  {
    "text": "happening in our systems we have profiles that inform us about performance of our our Cod PS uh and so",
    "start": "612240",
    "end": "620720"
  },
  {
    "text": "on so it's it's a it's a open-ended list of different signals where where each",
    "start": "620720",
    "end": "626920"
  },
  {
    "text": "gives us different type of information about about our system right as PA already mentioned uh for",
    "start": "626920",
    "end": "634440"
  },
  {
    "text": "metrics we did similar tutorial back in cucon North America last year so if",
    "start": "634440",
    "end": "639959"
  },
  {
    "text": "you're interested you can check that out there's a link here as well now talking about traces we can",
    "start": "639959",
    "end": "646600"
  },
  {
    "text": "think of traces as as think of of a story of a request that is going through",
    "start": "646600",
    "end": "652760"
  },
  {
    "text": "our system and understanding how it travels through our system when it goes",
    "start": "652760",
    "end": "657800"
  },
  {
    "text": "through different different Services um so the trace gives us gives",
    "start": "657800",
    "end": "663200"
  },
  {
    "text": "us the whole story but we need to understand parts of this story and for this we use a smaller Unit A Bas basic",
    "start": "663200",
    "end": "671600"
  },
  {
    "text": "unit that we refer to as span and a single span will relate to a specific",
    "start": "671600",
    "end": "678920"
  },
  {
    "text": "operation if we look at span um or if we uh imagine it as a in a in adjacent",
    "start": "678920",
    "end": "685360"
  },
  {
    "text": "representation that we have here on the left left hand side this is an example of a span that I took from the open",
    "start": "685360",
    "end": "691079"
  },
  {
    "text": "Telemetry documentation so we see that it's defined by certain certain",
    "start": "691079",
    "end": "696200"
  },
  {
    "text": "parameters certain information that it contains such as name of the span context of the span that we'll talk",
    "start": "696200",
    "end": "701360"
  },
  {
    "text": "about in a bit we have some time related information we have certain attributes events and so",
    "start": "701360",
    "end": "709040"
  },
  {
    "text": "on now I was talking about a story of a request but how do we understand the",
    "start": "709040",
    "end": "714920"
  },
  {
    "text": "story or how do we connect the pieces how do we connect the operations and the",
    "start": "714920",
    "end": "720680"
  },
  {
    "text": "and uh the spans represent those operations so for this we use the um",
    "start": "720680",
    "end": "726320"
  },
  {
    "text": "spend context that gives us information how spans relates to other spans within",
    "start": "726320",
    "end": "732480"
  },
  {
    "text": "our tracing systems each of these contexts will include the trace ID so",
    "start": "732480",
    "end": "738000"
  },
  {
    "text": "the ID of the of the trace that the span belongs to and a span ID uh which is the",
    "start": "738000",
    "end": "744600"
  },
  {
    "text": "which is again a unique identifier for the span itself so so these are usually",
    "start": "744600",
    "end": "750240"
  },
  {
    "text": "um automatically generated for you so you usually don't have to don't have to deal with these we have also more",
    "start": "750240",
    "end": "755480"
  },
  {
    "text": "specialized part of the context uh Trace flex and uh Trace State which we'll talk about a little bit later these relates",
    "start": "755480",
    "end": "762079"
  },
  {
    "text": "to so-called context propagation we also have a parent ID that uh informs us of a relation to uh",
    "start": "762079",
    "end": "770240"
  },
  {
    "text": "to a span U that's uh that's in a parent child relationship I'll also talk about this in a moment and you'll also shortly",
    "start": "770240",
    "end": "777199"
  },
  {
    "text": "look at uh links and how what type of relationships they represent in",
    "start": "777199",
    "end": "782920"
  },
  {
    "text": "tracing so if you visual if you visualize the trace um doesn't matter whatever system you use as you'll also",
    "start": "782920",
    "end": "789600"
  },
  {
    "text": "see in our Jagger backend that we are using uh typically you would visualize Trace as a so-called G chart which looks",
    "start": "789600",
    "end": "796920"
  },
  {
    "text": "like this so we see there at the at the very top we have our so-called uh root",
    "start": "796920",
    "end": "803240"
  },
  {
    "text": "span uh which spans the whole duration of our operation so in this case we can",
    "start": "803240",
    "end": "808800"
  },
  {
    "text": "have some some some clients uh calling uh calling our API or doing some",
    "start": "808800",
    "end": "814920"
  },
  {
    "text": "operation and within that within that client span we then see that we have some API call we're doing some",
    "start": "814920",
    "end": "821480"
  },
  {
    "text": "authentication authorization we're calling some other service some payment Gateway we might be calling some",
    "start": "821480",
    "end": "827560"
  },
  {
    "text": "database and we can visualize all of this uh uh with the help of a g",
    "start": "827560",
    "end": "834800"
  },
  {
    "text": "chart now as I was saying we can build based on the context we can build certain span relations um commonly we",
    "start": "834800",
    "end": "842800"
  },
  {
    "text": "will talk about parent child and sibling spans so here we see that at the at the",
    "start": "842800",
    "end": "848360"
  },
  {
    "text": "top we have a span called hello and this is again identified by Trace ID and span",
    "start": "848360",
    "end": "854399"
  },
  {
    "text": "ID and we see that the parent ID is null which means that this is the this is the topmost this is the parent um parent",
    "start": "854399",
    "end": "862360"
  },
  {
    "text": "span so then on the left side at the bottom we have the child span called",
    "start": "862360",
    "end": "868079"
  },
  {
    "text": "hello greetings and uh again it's identified by The Identical Trace ID as the one we have",
    "start": "868079",
    "end": "874399"
  },
  {
    "text": "above uh it's Unique span ID and in this case we also have the parent ID",
    "start": "874399",
    "end": "881000"
  },
  {
    "text": "information and when you look closely you will see that the span ID of the hello greetings match the spin uh sorry",
    "start": "881000",
    "end": "888320"
  },
  {
    "text": "the parent ID information in the hello greetings will match the spin ID of the",
    "start": "888320",
    "end": "893399"
  },
  {
    "text": "hello uh span so this is how we can build the relationship parent parent child then if",
    "start": "893399",
    "end": "899759"
  },
  {
    "text": "we see that uh two spans share the same parent we can think of them as as",
    "start": "899759",
    "end": "904800"
  },
  {
    "text": "sibling spans for some situations we might not be able to represent uh or it might not",
    "start": "904800",
    "end": "911000"
  },
  {
    "text": "be convenient to represent the relationship uh in this kind of direct manner this could be typical for some uh",
    "start": "911000",
    "end": "918079"
  },
  {
    "text": "asynchronous operation where um we one one operation might cause some",
    "start": "918079",
    "end": "924600"
  },
  {
    "text": "asynchronous operation uh other operation that can occur sometime in the future but we might not know when",
    "start": "924600",
    "end": "930680"
  },
  {
    "text": "exactly and since we don't want to wait for for this other operation or we don't want to um track this whole um this",
    "start": "930680",
    "end": "939519"
  },
  {
    "text": "whole operation as as one we can represent um uh the relationship in a",
    "start": "939519",
    "end": "946000"
  },
  {
    "text": "different different way so we can use so-called links where links represent a",
    "start": "946000",
    "end": "951759"
  },
  {
    "text": "causal relationship between spans and it works kind of similarly as we've seen before so a link as you see here in the",
    "start": "951759",
    "end": "959120"
  },
  {
    "text": "bottom will include uh uh span context information of another span so here we",
    "start": "959120",
    "end": "965560"
  },
  {
    "text": "see that the hello greetings span uh in the links that it links to the span uh",
    "start": "965560",
    "end": "972360"
  },
  {
    "text": "how are you since we see that the trace ID and the span ID",
    "start": "972360",
    "end": "978000"
  },
  {
    "text": "match so as we're seeing uh we have also other attributes",
    "start": "978160",
    "end": "983360"
  },
  {
    "text": "or that's not the correct word here so we have other parameters or other information that are represented in the",
    "start": "983360",
    "end": "989880"
  },
  {
    "text": "Spen uh most of them should be kind of self-explanatory but we can go through them such as attributes which are",
    "start": "989880",
    "end": "995839"
  },
  {
    "text": "certain key value pairs that further represent the some information or some",
    "start": "995839",
    "end": "1001720"
  },
  {
    "text": "metadata about the span as you can see here some examples there can be some IP addresses attached HTTP method um uh",
    "start": "1001720",
    "end": "1010399"
  },
  {
    "text": "like uh route that's being used user agent uh and so on we have also events that are",
    "start": "1010399",
    "end": "1017560"
  },
  {
    "text": "structured log messages so these represent um certain certain events that",
    "start": "1017560",
    "end": "1023399"
  },
  {
    "text": "happen during the operation that the span represents uh and are related to",
    "start": "1023399",
    "end": "1028678"
  },
  {
    "text": "the span and uh happen at a certain point in time um during the operation",
    "start": "1028679",
    "end": "1035798"
  },
  {
    "text": "that we're tracking links I was mentioning previously so we had an example for that",
    "start": "1035799",
    "end": "1041918"
  },
  {
    "text": "there's also status code and message which informs us about if the operation uh ended successfully uh there are",
    "start": "1041919",
    "end": "1049280"
  },
  {
    "text": "certain technicalities in the specification because so we can have unset okay or error status code usually",
    "start": "1049280",
    "end": "1057520"
  },
  {
    "text": "um unset and okay mean that the operation ended without an error okay is",
    "start": "1057520",
    "end": "1062640"
  },
  {
    "text": "a specific case where the developer might want to um explicitly Mark the",
    "start": "1062640",
    "end": "1067799"
  },
  {
    "text": "operation as successful and then error obviously if there was certain error and uh it can also include an error",
    "start": "1067799",
    "end": "1076080"
  },
  {
    "text": "message last thing to mention is that we also have have so-called span kind which",
    "start": "1076080",
    "end": "1081200"
  },
  {
    "text": "informs us a little bit more about the originator of that span uh depending on",
    "start": "1081200",
    "end": "1086640"
  },
  {
    "text": "the context in which the span is being created this can be a client or server we can uh also have kind internal or it",
    "start": "1086640",
    "end": "1095120"
  },
  {
    "text": "can be a producer or consumer now we talked about um how",
    "start": "1095120",
    "end": "1102880"
  },
  {
    "text": "we're building this this story of a request and to ensure that we can build",
    "start": "1102880",
    "end": "1110159"
  },
  {
    "text": "that story we need to be able um to uh at the end of of when we receive all the",
    "start": "1110159",
    "end": "1116919"
  },
  {
    "text": "spend within the trace we need to be able to rebuild that story back but how do we do this when we are uh Crossing",
    "start": "1116919",
    "end": "1124159"
  },
  {
    "text": "certain process or network boundaries right so if c one operation is happening",
    "start": "1124159",
    "end": "1129679"
  },
  {
    "text": "in service a but then the service a is calling service B this other service also needs to have a context uh about",
    "start": "1129679",
    "end": "1137159"
  },
  {
    "text": "our uh about our operation and so how we do this um or what we refer to how we",
    "start": "1137159",
    "end": "1145440"
  },
  {
    "text": "refer to this um uh concept this uh context propagation which allows us to",
    "start": "1145440",
    "end": "1152400"
  },
  {
    "text": "propagate this information between between Services traditionally you can you could depends on which technical",
    "start": "1152400",
    "end": "1158960"
  },
  {
    "text": "solution you have but a good example of this is doing it through HTTP headers we have also certain standards for um how",
    "start": "1158960",
    "end": "1167320"
  },
  {
    "text": "context propagation looks sles for HTTP headers uh these there are there are two",
    "start": "1167320",
    "end": "1173799"
  },
  {
    "text": "um cont related context propagation um standards supported by",
    "start": "1173799",
    "end": "1180320"
  },
  {
    "text": "open Telemetry so we have the trace context which um recognizes the um Trace",
    "start": "1180320",
    "end": "1186880"
  },
  {
    "text": "parent and Trace State headers where transparent gives us the information um about the the the parent",
    "start": "1186880",
    "end": "1194320"
  },
  {
    "text": "of the trace and um you have a Trace State which can include some more when there specific um information related to",
    "start": "1194320",
    "end": "1201640"
  },
  {
    "text": "the trace uh context on the other hand we have a baggage which is also related to context propagation baggage is more",
    "start": "1201640",
    "end": "1207880"
  },
  {
    "text": "about propagating certain custo custom key value pairs uh that are information",
    "start": "1207880",
    "end": "1214000"
  },
  {
    "text": "Associated to your Spence but they might not be included as attributes in the Spen but nevertheless you might want to",
    "start": "1214000",
    "end": "1220919"
  },
  {
    "text": "use them typical example could be a user ID which might be available only in the",
    "start": "1220919",
    "end": "1227200"
  },
  {
    "text": "user service for example that when when you call another service Downstream this um information is no",
    "start": "1227200",
    "end": "1233400"
  },
  {
    "text": "longer available so if you need that information somewhere Downstream you can include it in the baggage and it will be",
    "start": "1233400",
    "end": "1240200"
  },
  {
    "text": "available in the other service Downstream so with the theory out of our",
    "start": "1240200",
    "end": "1247679"
  },
  {
    "text": "way we can finally start deploying our applications and start doing some",
    "start": "1247679",
    "end": "1254679"
  },
  {
    "text": "tracing right thank you m it was a lot of theory and and seems like it's it's complicated to use it but actually not",
    "start": "1255000",
    "end": "1262320"
  },
  {
    "text": "and we will see that in the next step um so I will go to the furd",
    "start": "1262320",
    "end": "1267960"
  },
  {
    "text": "readme and in this chapter we will deploy our sample application into the",
    "start": "1267960",
    "end": "1273520"
  },
  {
    "text": "cluster and then we will instrument it with open Telemetry Auto instrumentations or",
    "start": "1273520",
    "end": "1280799"
  },
  {
    "text": "agents but first what is the application it's a polyglot application written in node.js",
    "start": "1280799",
    "end": "1286880"
  },
  {
    "text": "uh and python and Java so the front end obviously no. JS back end one in Python",
    "start": "1286880",
    "end": "1293480"
  },
  {
    "text": "and backend two in Java the functionality of the backend one and backend two are is identical um what it",
    "start": "1293480",
    "end": "1300679"
  },
  {
    "text": "does it has a single API that receives a player name and then in the returns a",
    "start": "1300679",
    "end": "1306080"
  },
  {
    "text": "number from one to six um so the front end calls both back ends gets the number",
    "start": "1306080",
    "end": "1312960"
  },
  {
    "text": "and decides which one is higher right it's like rolling a dice game",
    "start": "1312960",
    "end": "1320000"
  },
  {
    "text": "um so let's let's deploy",
    "start": "1320000",
    "end": "1323799"
  },
  {
    "text": "it and um I will just check if everything is created",
    "start": "1330799",
    "end": "1336279"
  },
  {
    "text": "correctly yeah it seems like all the services are up and",
    "start": "1336279",
    "end": "1342080"
  },
  {
    "text": "running and we're going to P forward the front",
    "start": "1342480",
    "end": "1347520"
  },
  {
    "text": "end we the the UI to our",
    "start": "1347520",
    "end": "1353000"
  },
  {
    "text": "host and it's this is the is it big enough okay",
    "start": "1358559",
    "end": "1365320"
  },
  {
    "text": "yeah so we see the player one rolls one player two rolls four and then so the the four is higher than one so the",
    "start": "1365320",
    "end": "1371840"
  },
  {
    "text": "player two wins so the app is running at the moment is not emitting any Telemetry data so we",
    "start": "1371840",
    "end": "1378960"
  },
  {
    "text": "don't have any visibility into what is happening um so we're going to instrument it",
    "start": "1378960",
    "end": "1385480"
  },
  {
    "text": "and we have essentially two choices when instrumenting the application we can use",
    "start": "1385480",
    "end": "1390600"
  },
  {
    "text": "the auto instrumentation or the manual instrumentation and there is big difference in in them the manual",
    "start": "1390600",
    "end": "1399120"
  },
  {
    "text": "instrumentation requires a lot of work we need to um use the open Telemetry SDK",
    "start": "1399120",
    "end": "1406679"
  },
  {
    "text": "and API we need to find those dependencies pull them into our application then we need to identify",
    "start": "1406679",
    "end": "1413520"
  },
  {
    "text": "which RPC Frameworks we want to instrument from our dependency stack um",
    "start": "1413520",
    "end": "1419200"
  },
  {
    "text": "for that we will find as well the open Telemetry uh instrumentation prebuild",
    "start": "1419200",
    "end": "1424520"
  },
  {
    "text": "libraries that we can use then we need to all initialize it together VI it",
    "start": "1424520",
    "end": "1429720"
  },
  {
    "text": "together um and of course recompile and redeploy our application the good thing about manual",
    "start": "1429720",
    "end": "1437000"
  },
  {
    "text": "instrumentation is the the the flexibility right we have everything in control and we can instrument only the",
    "start": "1437000",
    "end": "1443840"
  },
  {
    "text": "parts that are crucial for us at the same time uh we can make mistakes and we",
    "start": "1443840",
    "end": "1451000"
  },
  {
    "text": "can forget instrumenting Mission critical apis and if we forget to do that and",
    "start": "1451000",
    "end": "1457600"
  },
  {
    "text": "something goes wrong we don't get any Telemetry data for those parts of the",
    "start": "1457600",
    "end": "1463679"
  },
  {
    "text": "application um then we have the automatic instrumentation which",
    "start": "1463799",
    "end": "1468960"
  },
  {
    "text": "doesn't require us to recompile the application we can just simply download the agent put it next to our",
    "start": "1468960",
    "end": "1476720"
  },
  {
    "text": "application restart it and we will get Telemetry data um so it's very easy to",
    "start": "1476720",
    "end": "1482640"
  },
  {
    "text": "get started with the auto instrumentation on the other hand we",
    "start": "1482640",
    "end": "1488039"
  },
  {
    "text": "don't control what the auto instrumentation is doing and how it is",
    "start": "1488039",
    "end": "1493279"
  },
  {
    "text": "doing right so it might be maybe less performant in most cases probably not because it's reusing the libraries from",
    "start": "1493279",
    "end": "1500159"
  },
  {
    "text": "the manual instrumentation in most cases but you just have less control",
    "start": "1500159",
    "end": "1505840"
  },
  {
    "text": "over how the whole thing is built um and we in this chapter we will use",
    "start": "1505840",
    "end": "1513520"
  },
  {
    "text": "the the automatic instrumentation um before we instrument the app we need",
    "start": "1513520",
    "end": "1519640"
  },
  {
    "text": "to send the Telemetry data somewhere we deployed the Jagger with Prometheus",
    "start": "1519640",
    "end": "1524840"
  },
  {
    "text": "which are the back ends right instead of those two we could could use as well data dog or din trays or spun or other",
    "start": "1524840",
    "end": "1531960"
  },
  {
    "text": "providers um and the app the instrumented app can send data directly",
    "start": "1531960",
    "end": "1539080"
  },
  {
    "text": "to vendor but that's not really good practice it's much better to send data",
    "start": "1539080",
    "end": "1544279"
  },
  {
    "text": "first to open telemetric collector because it clearly kind of divides the",
    "start": "1544279",
    "end": "1549440"
  },
  {
    "text": "data collection that happens in in our environment from the vendor that we want",
    "start": "1549440",
    "end": "1555360"
  },
  {
    "text": "to use and on top of that the collector has lot of capabilities that will enable",
    "start": "1555360",
    "end": "1560760"
  },
  {
    "text": "us to do uh to remove any sensitive data to as well extract new data from from",
    "start": "1560760",
    "end": "1567120"
  },
  {
    "text": "traces let's say metrics uh it as well able to enrich the collected data with",
    "start": "1567120",
    "end": "1573080"
  },
  {
    "text": "um information from the environment like let's say the kubernetes SP name deployment name and so on so let's",
    "start": "1573080",
    "end": "1580480"
  },
  {
    "text": "quickly deploy The Collector uh I will show you the CR from the open Telemetry",
    "start": "1580480",
    "end": "1585919"
  },
  {
    "text": "operator uh it's very simple uh um there is just the image then the deployment",
    "start": "1585919",
    "end": "1591440"
  },
  {
    "text": "mode we want to deploy as as a deployment um single replica and then the config uh the config is a string and",
    "start": "1591440",
    "end": "1599159"
  },
  {
    "text": "you can paste there the um the actual collector config that you would run uh",
    "start": "1599159",
    "end": "1605240"
  },
  {
    "text": "on your host or in in Docker uh so we have done here is a very",
    "start": "1605240",
    "end": "1611559"
  },
  {
    "text": "simple configuration we have just OT TLP receiver so we're going to receive o TLP data uh and for the export exporters we",
    "start": "1611559",
    "end": "1619000"
  },
  {
    "text": "are exporting traces to our Yer uh metrics into the",
    "start": "1619000",
    "end": "1624399"
  },
  {
    "text": "Prometheus and logs the OTL locks will be written to The Collector output right",
    "start": "1624399",
    "end": "1630640"
  },
  {
    "text": "The Collector has the debug exporter that can print all the data into its",
    "start": "1630640",
    "end": "1636080"
  },
  {
    "text": "console um and then there is a corresponding pipeline which essentially enables those",
    "start": "1636080",
    "end": "1642799"
  },
  {
    "text": "components yeah so let's let's deploy",
    "start": "1647159",
    "end": "1652960"
  },
  {
    "text": "it yeah it should start very quickly it's a very small Docker image The Collector",
    "start": "1661240",
    "end": "1669360"
  },
  {
    "text": "is up and running that looks good um and now we're going to start with the",
    "start": "1669360",
    "end": "1675480"
  },
  {
    "text": "instrumentation and uh instrument or the auto instrumentation on kubernetes it's a two-step project",
    "start": "1675480",
    "end": "1682720"
  },
  {
    "text": "process sorry um first we need to create the instrumentation CR the custom",
    "start": "1682720",
    "end": "1688640"
  },
  {
    "text": "resource and the custom resource essentially uh contains or defines the",
    "start": "1688640",
    "end": "1695440"
  },
  {
    "text": "configuration for open Telemetry SDK so there is uh information like where the",
    "start": "1695440",
    "end": "1700480"
  },
  {
    "text": "data should be sent what are the propagators for the context propagation and how we want to sample the data",
    "start": "1700480",
    "end": "1709480"
  },
  {
    "text": "so let's let's create the instrumentation",
    "start": "1709480",
    "end": "1713519"
  },
  {
    "text": "CR",
    "start": "1719240",
    "end": "1722240"
  },
  {
    "text": "nope copy paste [Music]",
    "start": "1726200",
    "end": "1731260"
  },
  {
    "text": "problem okay so the instrumentation has been created um and it does nothing if we",
    "start": "1732240",
    "end": "1738960"
  },
  {
    "text": "create it in our cluster it's it's uh it's just a CR it doesn't instrument the apps um as I mentioned it's a the",
    "start": "1738960",
    "end": "1746279"
  },
  {
    "text": "instrumentation is two-step process uh the next step is to put an",
    "start": "1746279",
    "end": "1751960"
  },
  {
    "text": "annotation into our workloads and The annotation needs to go into the PO spec",
    "start": "1751960",
    "end": "1758399"
  },
  {
    "text": "right it doesn't go into the deployment annotations it goes into the PO annotations in the in the deployment",
    "start": "1758399",
    "end": "1765080"
  },
  {
    "text": "spec um and here we need to understand what is the language of the application",
    "start": "1765080",
    "end": "1771960"
  },
  {
    "text": "right the back end two is written in Java the back end",
    "start": "1771960",
    "end": "1777200"
  },
  {
    "text": "one is written in in Python and the front end in node.js and so for the Java we are using the",
    "start": "1777200",
    "end": "1784600"
  },
  {
    "text": "inject Java for the python inject Python and for the node.js inject SDK uh and",
    "start": "1784600",
    "end": "1791320"
  },
  {
    "text": "the inject SDK it's um it's a special uh it doesn't inject the the",
    "start": "1791320",
    "end": "1796760"
  },
  {
    "text": "instrumentation libraries but it will just configure the SDK that already",
    "start": "1796760",
    "end": "1802000"
  },
  {
    "text": "exist in the application you can think about it as just uh kind of doing a",
    "start": "1802000",
    "end": "1807399"
  },
  {
    "text": "control plane for the instrumentation if you go to the source code of the application and go to nodejs",
    "start": "1807399",
    "end": "1813760"
  },
  {
    "text": "you will see that the node.js already contains some instrumentation but it's disabled uh and if you inject",
    "start": "1813760",
    "end": "1820679"
  },
  {
    "text": "the uh the SDK it will enable it and configure it to send data to our",
    "start": "1820679",
    "end": "1826960"
  },
  {
    "text": "collector so I'll just quickly",
    "start": "1826960",
    "end": "1833159"
  },
  {
    "text": "instrument or quickly put those annotations so now what happens",
    "start": "1833919",
    "end": "1842080"
  },
  {
    "text": "is the we have changed the Pod spec of a deployment which triggers a new po now",
    "start": "1842080",
    "end": "1848559"
  },
  {
    "text": "the open Telemetry operator has a pod mutating web hook and it will see there is a new po starting it will see there",
    "start": "1848559",
    "end": "1855639"
  },
  {
    "text": "is an annotation on the pot and according The annotation it will",
    "start": "1855639",
    "end": "1861919"
  },
  {
    "text": "inject the the correct instrumentation libraries and SDK",
    "start": "1861919",
    "end": "1867320"
  },
  {
    "text": "configuration um",
    "start": "1867320",
    "end": "1872440"
  },
  {
    "text": "and um let me go back to [Music]",
    "start": "1875600",
    "end": "1881159"
  },
  {
    "text": "console let's see how the pots are what has changed uh well",
    "start": "1881720",
    "end": "1889919"
  },
  {
    "text": "so what the operator injected is an init container and the init container what it does it will copy the uh the",
    "start": "1907960",
    "end": "1915799"
  },
  {
    "text": "instrumentation Library into a shared volume of this one that is mounted as",
    "start": "1915799",
    "end": "1923880"
  },
  {
    "text": "well to the application container so the application has access to this to this",
    "start": "1923880",
    "end": "1928919"
  },
  {
    "text": "agent and then on the application container it configures the open Telemetry environment variables for the",
    "start": "1928919",
    "end": "1935880"
  },
  {
    "text": "SDK which is you know the sampling the exporter and on top of that it enables",
    "start": "1935880",
    "end": "1942080"
  },
  {
    "text": "the instrumentation by setting the um the environment variable for the given",
    "start": "1942080",
    "end": "1947120"
  },
  {
    "text": "runtime in this case it's a python so we will configure the python path to load",
    "start": "1947120",
    "end": "1952360"
  },
  {
    "text": "the the python libraries before the application if this was Java it would configure the Java tools",
    "start": "1952360",
    "end": "1959960"
  },
  {
    "text": "options and jvm would load the Java agent first and then the application",
    "start": "1959960",
    "end": "1965720"
  },
  {
    "text": "classes would be loaded and the Java agent will see which classes are being loaded and it will inject the",
    "start": "1965720",
    "end": "1972120"
  },
  {
    "text": "instrumentation code um so now we should have everything",
    "start": "1972120",
    "end": "1977559"
  },
  {
    "text": "ready the app should be fully instrumented and we can go to to Jager",
    "start": "1977559",
    "end": "1985080"
  },
  {
    "text": "console and I will just uh pour forward the front end again because we restarted",
    "start": "1985080",
    "end": "1991559"
  },
  {
    "text": "it so it would fail if we load it we see the app is still working well and I can",
    "start": "1991559",
    "end": "1997240"
  },
  {
    "text": "open Jager",
    "start": "1997240",
    "end": "2000080"
  },
  {
    "text": "UI and we should see traces from the front",
    "start": "2005159",
    "end": "2010200"
  },
  {
    "text": "end if I go to the to this to the to the trace view which is the um the",
    "start": "2010200",
    "end": "2015240"
  },
  {
    "text": "visualization that mat showed uh we see the entire Trace going from the front",
    "start": "2015240",
    "end": "2020840"
  },
  {
    "text": "end to the back end one and back end",
    "start": "2020840",
    "end": "2024638"
  },
  {
    "text": "two um so we have successfully instrumented the application by",
    "start": "2026960",
    "end": "2032480"
  },
  {
    "text": "essentially doing two commands creating instrumentation CR and applying annotation to the work",
    "start": "2032480",
    "end": "2039720"
  },
  {
    "text": "clouds uh the auto instrumentation from open Telemetry does more than tracing it",
    "start": "2040519",
    "end": "2047360"
  },
  {
    "text": "as well reports metrics and logs depending on the instrumentation of",
    "start": "2047360",
    "end": "2053158"
  },
  {
    "text": "course for for some languages is it's it's not doing logs for some it does you need to check for specific Auto",
    "start": "2053159",
    "end": "2060118"
  },
  {
    "text": "instrumentation for given language what are the features um so what we're going to do",
    "start": "2060119",
    "end": "2066679"
  },
  {
    "text": "here uh we're going to going to take a look uh at the logs so if you get the",
    "start": "2066679",
    "end": "2072839"
  },
  {
    "text": "collector locks you will see there there are some locks put into the standard",
    "start": "2072839",
    "end": "2078638"
  },
  {
    "text": "output of The Collector um and these are the locks from the back end to application from the",
    "start": "2078639",
    "end": "2085320"
  },
  {
    "text": "Java right so for instance here we see the the lock that the application",
    "start": "2085320",
    "end": "2090520"
  },
  {
    "text": "started in 4 something second if you get the locks of the application itself you",
    "start": "2090520",
    "end": "2096440"
  },
  {
    "text": "essentially see the same lock right you you see you see it here starting",
    "start": "2096440",
    "end": "2102359"
  },
  {
    "text": "application blah blah blah it's actually it should be this one",
    "start": "2102359",
    "end": "2107560"
  },
  {
    "text": "started application in 4. 59 seconds um so the collector is uh or the",
    "start": "2107560",
    "end": "2114240"
  },
  {
    "text": "instrumentation is getting the locks from the standard output of the application and it's enriching the locks",
    "start": "2114240",
    "end": "2121520"
  },
  {
    "text": "with the kubernetes attributes to uh to identify you know from where they are sent it send them to the collector and",
    "start": "2121520",
    "end": "2128760"
  },
  {
    "text": "collector is printing them to the standard output but you can as well configure The Collector to send the logs",
    "start": "2128760",
    "end": "2134400"
  },
  {
    "text": "into your uh open search or other you know U logging",
    "start": "2134400",
    "end": "2139839"
  },
  {
    "text": "systems and these are the logs uh and the metrics are sent to Prometheus so if",
    "start": "2139839",
    "end": "2146040"
  },
  {
    "text": "you pull forward promeo service you will see what are the metrics sent from the",
    "start": "2146040",
    "end": "2153400"
  },
  {
    "text": "from the back end to from the Java as well what we see here is the um the red",
    "start": "2153400",
    "end": "2158760"
  },
  {
    "text": "metrics for Server um so we get the the know the latency the number of calls and number",
    "start": "2158760",
    "end": "2165079"
  },
  {
    "text": "of errors and as well couple of jvm",
    "start": "2165079",
    "end": "2169520"
  },
  {
    "text": "metrics we got this all you know by simply you know uh instrumenting with a",
    "start": "2170200",
    "end": "2176040"
  },
  {
    "text": "with a simple agent um so everything is working but",
    "start": "2176040",
    "end": "2181160"
  },
  {
    "text": "often times the auto instrumentation um will need to be",
    "start": "2181160",
    "end": "2186599"
  },
  {
    "text": "customized because you will have a special requirement in your in your organization let's say you will need to",
    "start": "2186599",
    "end": "2192680"
  },
  {
    "text": "capture more data uh let's say more HTP attributes not not attributes but the",
    "start": "2192680",
    "end": "2197760"
  },
  {
    "text": "headers or you will need to trace methods of your of your business logic",
    "start": "2197760",
    "end": "2204200"
  },
  {
    "text": "um that's uh good news is that you can do that with a Java agent with just a",
    "start": "2204200",
    "end": "2209359"
  },
  {
    "text": "configuration change so what we're going to do we're going to um configure the Java",
    "start": "2209359",
    "end": "2216480"
  },
  {
    "text": "agent to capture the um HTTP response headers the",
    "start": "2216480",
    "end": "2223280"
  },
  {
    "text": "content type and date and we're going to instrument the main method of the",
    "start": "2223280",
    "end": "2229200"
  },
  {
    "text": "application so if the main method will be executed the Java agent will create a",
    "start": "2229200",
    "end": "2234520"
  },
  {
    "text": "span for that execution and you know we do that by specifying the fully",
    "start": "2234520",
    "end": "2241119"
  },
  {
    "text": "qualified class name with a method name right and we can do that for any class",
    "start": "2241119",
    "end": "2246319"
  },
  {
    "text": "that is in in our code",
    "start": "2246319",
    "end": "2250079"
  },
  {
    "text": "base so I'm just going to apply",
    "start": "2251920",
    "end": "2256160"
  },
  {
    "text": "it and now I changed the instrumentation CR right and the instrumentation is only applied when",
    "start": "2261520",
    "end": "2269800"
  },
  {
    "text": "the application is starting so if I want to make these changes effective I need",
    "start": "2269800",
    "end": "2275160"
  },
  {
    "text": "to restart the application I can do that with a roll out",
    "start": "2275160",
    "end": "2280880"
  },
  {
    "text": "restart now it will restart and if I go back to my",
    "start": "2282319",
    "end": "2291160"
  },
  {
    "text": "Jagger and I search for for traces from the back end to",
    "start": "2292480",
    "end": "2298680"
  },
  {
    "text": "which is the Java app I should see a span from the main class right so I am",
    "start": "2298680",
    "end": "2307040"
  },
  {
    "text": "effective tracing the the start of the application because I configured the Java agent to create a span for the uh",
    "start": "2307040",
    "end": "2313920"
  },
  {
    "text": "main method of the of the app and there is only single one because it's you know",
    "start": "2313920",
    "end": "2319000"
  },
  {
    "text": "I just restarted it only once if I do restart again I will get a second trace for the second start of the app for the",
    "start": "2319000",
    "end": "2326800"
  },
  {
    "text": "response attributes I need to search for the um traces that go through",
    "start": "2326800",
    "end": "2334200"
  },
  {
    "text": "HTTP API of the back end to and here I should see",
    "start": "2334200",
    "end": "2340119"
  },
  {
    "text": "the the response headers actually I need to execute some requests right",
    "start": "2340119",
    "end": "2345400"
  },
  {
    "text": "because the the API it wasn't hit",
    "start": "2345400",
    "end": "2352680"
  },
  {
    "text": "yet so this is a recent trace and now I see the response header",
    "start": "2352680",
    "end": "2360400"
  },
  {
    "text": "content type and the response header",
    "start": "2360400",
    "end": "2365440"
  },
  {
    "text": "date so to sum up um using the auto instrumentation on kubernetes it's",
    "start": "2366359",
    "end": "2372480"
  },
  {
    "text": "fairly simple and if we need to do more data capture we can often times do that",
    "start": "2372480",
    "end": "2377920"
  },
  {
    "text": "with configuration change we don't have to rebuild uh our applications there is",
    "start": "2377920",
    "end": "2384160"
  },
  {
    "text": "an optional section where you can use open Telemetry API with combination of",
    "start": "2384160",
    "end": "2390480"
  },
  {
    "text": "java agent to do more complicated uh more complicated stuff right right so",
    "start": "2390480",
    "end": "2397640"
  },
  {
    "text": "you can attach more attributes programmatically um you can use some annotations to create new spans and",
    "start": "2397640",
    "end": "2404599"
  },
  {
    "text": "attach attributes you can play with it um after after the",
    "start": "2404599",
    "end": "2411119"
  },
  {
    "text": "conference okay and now we will transition to the next chapter about the manual",
    "start": "2411119",
    "end": "2418119"
  },
  {
    "text": "instrumentation okay press that to change the keyboard layout",
    "start": "2420400",
    "end": "2429319"
  },
  {
    "text": "okay um yeah next we would like to have a look on the manual instrumentation which is quite handy if there is no",
    "start": "2430960",
    "end": "2436880"
  },
  {
    "text": "automation for your language um probably there will be an SDK and um also if for",
    "start": "2436880",
    "end": "2442720"
  },
  {
    "text": "example the auto instrumentation doesn't support specific versions for example go 122 was not supported by the aut",
    "start": "2442720",
    "end": "2449440"
  },
  {
    "text": "instrumentation so there is a chance that we um or we can solve this by doing it on our own um we are a bit quick uh",
    "start": "2449440",
    "end": "2457280"
  },
  {
    "text": "short on time so we have two versions and I would probably go over it instead of doing it manually here um so we will",
    "start": "2457280",
    "end": "2464520"
  },
  {
    "text": "find in this um repository an uninstrumented backend and an instrumented back end we can quickly go",
    "start": "2464520",
    "end": "2471520"
  },
  {
    "text": "here and see this is a go application which is more or less a replacement for the roll dice application back and two",
    "start": "2471520",
    "end": "2478079"
  },
  {
    "text": "so it does exactly the same and what we see here is it has an error rate defined and high delay defined which is become",
    "start": "2478079",
    "end": "2485480"
  },
  {
    "text": "becomes a bit more useful afterwards and um yeah we have this roll dice",
    "start": "2485480",
    "end": "2491119"
  },
  {
    "text": "endpoint we roll the dice we cause maybe a delay maybe an error that's it and the",
    "start": "2491119",
    "end": "2497000"
  },
  {
    "text": "first thing we should do is basically Define the critical path of our application so if we have only one endpoint which is super interesting for",
    "start": "2497000",
    "end": "2502880"
  },
  {
    "text": "us probably it's the roll dice one and um so maybe we jump over",
    "start": "2502880",
    "end": "2510640"
  },
  {
    "text": "to this one here because I canit bit better navigate uh so this is now the",
    "start": "2510640",
    "end": "2516800"
  },
  {
    "text": "instrumentation the instrumented version so what we need to do first is uh similar to The Collector we need to Define an exporter",
    "start": "2516800",
    "end": "2523160"
  },
  {
    "text": "we would like to send the data this can be empty we can configure this over the environment variables as it was shown",
    "start": "2523160",
    "end": "2529440"
  },
  {
    "text": "before and we also can do some processing in this case we just add here the Batcher to do this and the last one",
    "start": "2529440",
    "end": "2537680"
  },
  {
    "text": "is we need to now make this uh accessible in our program to all different libraries and therefore we",
    "start": "2537680",
    "end": "2544160"
  },
  {
    "text": "register this globally so there is now the option here to um create this new Tracer and set it",
    "start": "2544160",
    "end": "2551480"
  },
  {
    "text": "then which will then register it and we can access it from all over the program which is then the next thing that we do",
    "start": "2551480",
    "end": "2557640"
  },
  {
    "text": "so usually there is per Library you can then create a specific Tracer um let me search it here and then",
    "start": "2557640",
    "end": "2566520"
  },
  {
    "text": "you can also give it a name and to identify afterwards where your code was instrumented and also what version it",
    "start": "2566520",
    "end": "2572480"
  },
  {
    "text": "was and so on so and then the in interesting part we would like now to instrument our um method that we had",
    "start": "2572480",
    "end": "2580599"
  },
  {
    "text": "before we can go and the SDK offers something to wrap the Handler and create",
    "start": "2580599",
    "end": "2586000"
  },
  {
    "text": "a new span um so we don't need to write all the instrumentation stuff on our own um here we add the route attribute",
    "start": "2586000",
    "end": "2593040"
  },
  {
    "text": "so that we afterwards can see which route was hit and um yeah then we register it with this so this is",
    "start": "2593040",
    "end": "2598880"
  },
  {
    "text": "basically a wrapper function for registering something to our router um",
    "start": "2598880",
    "end": "2606119"
  },
  {
    "text": "the um the span basically that is then",
    "start": "2606119",
    "end": "2611800"
  },
  {
    "text": "coming from another service or coming from created by this Handler there directly we can access this directly",
    "start": "2611800",
    "end": "2618520"
  },
  {
    "text": "from the context and go is propagated explicit so it's always attached and what we do here for example we add an",
    "start": "2618520",
    "end": "2624119"
  },
  {
    "text": "event and in this event we just set the player name we will see this afterwards in Jer then reflected which is quite",
    "start": "2624119",
    "end": "2630440"
  },
  {
    "text": "nice because we can also um search for something like this and then we would",
    "start": "2630440",
    "end": "2635960"
  },
  {
    "text": "also go down this path and maybe this cost delay method which is calling a database or something which would quite",
    "start": "2635960",
    "end": "2641559"
  },
  {
    "text": "would be quite interesting for us so we would go here and could uh could do the same we start a new span since this well",
    "start": "2641559",
    "end": "2648480"
  },
  {
    "text": "if in a context is already one existing we create a child span this goes automatically and then we can also hear",
    "start": "2648480",
    "end": "2654720"
  },
  {
    "text": "at an event so that we afterwards can see what did we actually roll and was this method hit so because then this",
    "start": "2654720",
    "end": "2660720"
  },
  {
    "text": "delay will happen the same goes for the error um there is another thing we set",
    "start": "2660720",
    "end": "2666319"
  },
  {
    "text": "an error here ly this um error record error which under the hood is basically",
    "start": "2666319",
    "end": "2672559"
  },
  {
    "text": "a specific event an error event um that helps us afterwards to identify a bit",
    "start": "2672559",
    "end": "2678119"
  },
  {
    "text": "more details and it also set than um an attribute for um the error. cords or the stack",
    "start": "2678119",
    "end": "2685119"
  },
  {
    "text": "Trace depending on the language and um also then we need to explicit set our span to an error State",
    "start": "2685119",
    "end": "2693000"
  },
  {
    "text": "because by default it's untouched and uh yeah so maybe we directly go over to",
    "start": "2693000",
    "end": "2701280"
  },
  {
    "text": "Jager um we prepared an image um oh it's the",
    "start": "2702280",
    "end": "2707480"
  },
  {
    "text": "opper side we prepared an image with um all the instrumented code already so we",
    "start": "2707480",
    "end": "2713559"
  },
  {
    "text": "can quickly take this",
    "start": "2713559",
    "end": "2717960"
  },
  {
    "text": "one should be there in a second",
    "start": "2722040",
    "end": "2728960"
  },
  {
    "text": "okay started oh yeah no it's",
    "start": "2753680",
    "end": "2758880"
  },
  {
    "text": "there and there was this uh special thing in the code where we had this error percentage basically we have",
    "start": "2758880",
    "end": "2765480"
  },
  {
    "text": "currently an error percentage of 20% we can set this using the environment variable so that actually there something interesting",
    "start": "2765480",
    "end": "2772920"
  },
  {
    "text": "happens um yeah maybe create some extra",
    "start": "2772920",
    "end": "2780200"
  },
  {
    "text": "requests playing in a",
    "start": "2780200",
    "end": "2783720"
  },
  {
    "text": "bit so here we should",
    "start": "2785920",
    "end": "2792480"
  },
  {
    "text": "see some spans with errors so for example when we go down here and",
    "start": "2792839",
    "end": "2799680"
  },
  {
    "text": "we inspect our span",
    "start": "2799680",
    "end": "2806319"
  },
  {
    "text": "oops I have to check so we have the error state which is there",
    "start": "2811119",
    "end": "2818839"
  },
  {
    "text": "and we should see oh this is in the front end deployment that's something",
    "start": "2818839",
    "end": "2827119"
  },
  {
    "text": "else this a few more",
    "start": "2832760",
    "end": "2836480"
  },
  {
    "text": "times so maybe this one is a new one that's again in the front",
    "start": "2840000",
    "end": "2845839"
  },
  {
    "text": "end",
    "start": "2845839",
    "end": "2848839"
  },
  {
    "text": "use back and for we set the environment R to 20% so the chance should be not",
    "start": "2863040",
    "end": "2868480"
  },
  {
    "text": "super low that we cost some arrows maybe we directly go",
    "start": "2868480",
    "end": "2873620"
  },
  {
    "text": "[Music] to this one here yeah okay so we get it directly from the",
    "start": "2873620",
    "end": "2880920"
  },
  {
    "text": "um we directly search for the ghost service what we can see here now is basically the cause error method and we",
    "start": "2880920",
    "end": "2887040"
  },
  {
    "text": "see the logs and events that we added so we had an roll event and the number was actually seven and in case of the error",
    "start": "2887040",
    "end": "2893480"
  },
  {
    "text": "we see it was um an error event and we see also the message so the seven is lower than the 20 and uh yeah that's",
    "start": "2893480",
    "end": "2901160"
  },
  {
    "text": "almost it okay also with the delays they should",
    "start": "2901160",
    "end": "2906559"
  },
  {
    "text": "also be here somewhere reflected this looks good here we have four seconds and we can go in here we",
    "start": "2906559",
    "end": "2914200"
  },
  {
    "text": "see the event and we oh that's the error again but it's the error enter delay in",
    "start": "2914200",
    "end": "2920559"
  },
  {
    "text": "combination so we see it was a 13 the threshold was 20 so this call uh thing",
    "start": "2920559",
    "end": "2926040"
  },
  {
    "text": "is delayed okay um yeah for testing and",
    "start": "2926040",
    "end": "2931559"
  },
  {
    "text": "playing around with it we also have in this section here um something prepared you can just run Jager locally and also",
    "start": "2931559",
    "end": "2939319"
  },
  {
    "text": "the application when you compile it you can configure the environment variables um and then directly get a far faster",
    "start": "2939319",
    "end": "2945839"
  },
  {
    "text": "feedback from what you instrumented if you would like to play around with it um in the next section basically we",
    "start": "2945839",
    "end": "2952319"
  },
  {
    "text": "would quickly like to discuss what happens if you instrument a lot or use the aut instumentation you produce a lot",
    "start": "2952319",
    "end": "2958119"
  },
  {
    "text": "of data which over time can be quite expensive and um what we can see here is",
    "start": "2958119",
    "end": "2964520"
  },
  {
    "text": "basically how the data is delivered from our server services so we had the front-end service back end one and back end two those sent the data to The",
    "start": "2964520",
    "end": "2970839"
  },
  {
    "text": "Collector and from here we would like maybe to go to some sus vendor or somewhere else and if we have a decent",
    "start": "2970839",
    "end": "2978280"
  },
  {
    "text": "setup with a few thousand pots this may um produce tons of data which can be",
    "start": "2978280",
    "end": "2983960"
  },
  {
    "text": "quite expensive when you go here and have a look on gcp or on x-ray you see that 1 million traces can quickly sum up",
    "start": "2983960",
    "end": "2991720"
  },
  {
    "text": "for um a quarter million dollars a month which is probably unreasonable to to",
    "start": "2991720",
    "end": "2996839"
  },
  {
    "text": "find tiny issues at the same time the majority of traces is probably something that we are not really interested in as",
    "start": "2996839",
    "end": "3003160"
  },
  {
    "text": "we have seen before in the frontend application before we had this causing error service everything was fine and",
    "start": "3003160",
    "end": "3009640"
  },
  {
    "text": "you don't want to spend that much money for just knowing it works at um yeah and in the next section",
    "start": "3009640",
    "end": "3017079"
  },
  {
    "text": "basically Anu will show you two approaches how to um solve this issue a",
    "start": "3017079",
    "end": "3023838"
  },
  {
    "text": "bit uh thank you Ben for the introduction to",
    "start": "3025640",
    "end": "3031680"
  },
  {
    "text": "sampling uh now I'll talk about uh two different sampling uh approaches uh",
    "start": "3031680",
    "end": "3037520"
  },
  {
    "text": "first is head-based sampling and the second is tail based sampling uh I'll give a quick introduction to both the",
    "start": "3037520",
    "end": "3042760"
  },
  {
    "text": "approaches and we'll configure them both in this section uh first let's start with headbase sampling uh headbase in",
    "start": "3042760",
    "end": "3050680"
  },
  {
    "text": "headbase sampling the sampling decision the decision whether to keep the trace or discard the trace is uh take at the",
    "start": "3050680",
    "end": "3057359"
  },
  {
    "text": "beginning of the trace creation that which is when the trace is created which is at the beginning of the request flow",
    "start": "3057359",
    "end": "3063960"
  },
  {
    "text": "typically uh so traces are sampled randomly in this technique uh based on a",
    "start": "3063960",
    "end": "3070599"
  },
  {
    "text": "predefined sampling rate or probability uh because of the randomized nature of",
    "start": "3070599",
    "end": "3075720"
  },
  {
    "text": "this sampling technique uh it cannot guarantee that it'll uh always capture",
    "start": "3075720",
    "end": "3080960"
  },
  {
    "text": "the important traces uh so as you can see here in this example um so each",
    "start": "3080960",
    "end": "3086200"
  },
  {
    "text": "dotted line here is a trace and every dot is a span so we have uh what we have here are four traces so with randomized",
    "start": "3086200",
    "end": "3093760"
  },
  {
    "text": "sampling uh here it did not capture the um Arrow Trace um so whereas on the flip",
    "start": "3093760",
    "end": "3100319"
  },
  {
    "text": "side in tailbase sampling uh so the sampling decision is taken at the uh end",
    "start": "3100319",
    "end": "3107480"
  },
  {
    "text": "of the request uh which is when we have all the spans of the trace available",
    "start": "3107480",
    "end": "3112680"
  },
  {
    "text": "when the TR Trace is complete uh so it could make informed Decisions by looking",
    "start": "3112680",
    "end": "3118319"
  },
  {
    "text": "at all the trace data that is available uh so we could Define policies to",
    "start": "3118319",
    "end": "3123839"
  },
  {
    "text": "capture the most interesting and uh most actionable traces that we want to so this is uh this is a biased sampling",
    "start": "3123839",
    "end": "3131680"
  },
  {
    "text": "technique whereas H sampling is an unbiased technique um so we'll uh start",
    "start": "3131680",
    "end": "3138480"
  },
  {
    "text": "with uh configuring um head based sampling with open Telemetry so",
    "start": "3138480",
    "end": "3143559"
  },
  {
    "text": "head-based sampling is uh is configured at the SDK level uh and uh open telary",
    "start": "3143559",
    "end": "3149480"
  },
  {
    "text": "ships with a bunch of uh inbuilt Samplers uh for uh implementing",
    "start": "3149480",
    "end": "3154520"
  },
  {
    "text": "head-based sampling um so for the list of all the available Samplers please uh check out the official documentation but",
    "start": "3154520",
    "end": "3161599"
  },
  {
    "text": "uh for this tutorial uh we'll be using one specific sampler which is parent",
    "start": "3161599",
    "end": "3166760"
  },
  {
    "text": "based race ID ratio uh with uh this is the most widely and uh commonly used uh",
    "start": "3166760",
    "end": "3173799"
  },
  {
    "text": "sampler and it is also recommended by uh stream open tary uh so with parent based",
    "start": "3173799",
    "end": "3179040"
  },
  {
    "text": "Trace ID ratio uh we sample a random percentage of parent spans or root spans",
    "start": "3179040",
    "end": "3185960"
  },
  {
    "text": "based on the sampling rate that we set here and that decision is propagated to all of its CH spans so we either trace",
    "start": "3185960",
    "end": "3193240"
  },
  {
    "text": "the complete Spain complete trace or discard the complete Trace uh so um with",
    "start": "3193240",
    "end": "3199760"
  },
  {
    "text": "auto instrumentation in our previous section U pavl showed how to uh set up",
    "start": "3199760",
    "end": "3205480"
  },
  {
    "text": "the auto instrumentation CR so so the head sampling configuration",
    "start": "3205480",
    "end": "3212520"
  },
  {
    "text": "here just a",
    "start": "3212520",
    "end": "3215880"
  },
  {
    "text": "second here is uh under the sampler section so uh the type here is a sampler",
    "start": "3221760",
    "end": "3228000"
  },
  {
    "text": "type that we want to configure and the argument um here the number that we specify here is a sampling rate for",
    "start": "3228000",
    "end": "3234359"
  },
  {
    "text": "parent based Trace ID ratio uh so different Samplers have different uh",
    "start": "3234359",
    "end": "3240000"
  },
  {
    "text": "inputs so the argument here is basically the input that we provide to the sampler that we configure so this is very very",
    "start": "3240000",
    "end": "3247920"
  },
  {
    "text": "straightforward all you have to do is specify the sampler type and the input here and uh you would have to update",
    "start": "3247920",
    "end": "3255559"
  },
  {
    "text": "apply the updated um so just a second let me just navigate",
    "start": "3255559",
    "end": "3263240"
  },
  {
    "text": "back",
    "start": "3265359",
    "end": "3268359"
  },
  {
    "text": "all right uh",
    "start": "3274040",
    "end": "3277400"
  },
  {
    "text": "so uh just a second yeah why is it not loading",
    "start": "3280440",
    "end": "3288359"
  },
  {
    "text": "yeah awesome thank you um",
    "start": "3291799",
    "end": "3298319"
  },
  {
    "text": "so uh in our previous section the sampling rate was configured to uh 100% so it was sampling all of the parent uh",
    "start": "3298760",
    "end": "3305680"
  },
  {
    "text": "spans which essentially propagates to all the child spans it is it is doing 100% sampling uh you can play around",
    "start": "3305680",
    "end": "3311960"
  },
  {
    "text": "with different sampling rates and all you have to do is apply the uh updated uh instrumentation CR and restart your",
    "start": "3311960",
    "end": "3318240"
  },
  {
    "text": "deployments uh and when you uh and you could see the updated",
    "start": "3318240",
    "end": "3324000"
  },
  {
    "text": "sampling percentage and uh under the um environment variables in",
    "start": "3324000",
    "end": "3329400"
  },
  {
    "text": "your pod spec so this is pretty straightforward um so I'll uh maybe let",
    "start": "3329400",
    "end": "3335720"
  },
  {
    "text": "you play with it uh offline uh but uh let's uh also look into how do we set it",
    "start": "3335720",
    "end": "3342760"
  },
  {
    "text": "up with um manual instrumentation how do we set up head sampling with manual instrumentation you could always use the",
    "start": "3342760",
    "end": "3348640"
  },
  {
    "text": "environment variables even with uh manual instrumentation but you if you want to explicitly set it uh in the code",
    "start": "3348640",
    "end": "3354960"
  },
  {
    "text": "uh This Is How We Do It it we set uh we also we can configure uh the uh the",
    "start": "3354960",
    "end": "3362200"
  },
  {
    "text": "sampler here uh with the with sampler and then you could uh use all the available Samplers so there are",
    "start": "3362200",
    "end": "3368280"
  },
  {
    "text": "different types of Samplers like always on always off parent base Trace ID so all you have to do is uh set it up with",
    "start": "3368280",
    "end": "3375160"
  },
  {
    "text": "the sampler configuration here uh now let's uh look into tail sampling with open Telemetry uh tail sampling is um",
    "start": "3375160",
    "end": "3382960"
  },
  {
    "text": "configured uh at The Collector lay layer which is the back endend that receives all the spans uh so it requires us to",
    "start": "3382960",
    "end": "3390319"
  },
  {
    "text": "stand stand up a collector and Implement a processor called tail sampling processor uh so the tail sampling",
    "start": "3390319",
    "end": "3396680"
  },
  {
    "text": "processor uh defines a set of policies um which is used uh for the sampling",
    "start": "3396680",
    "end": "3402760"
  },
  {
    "text": "decision uh and there are a bunch of policies available which you could choose from and uh Define with the tail",
    "start": "3402760",
    "end": "3408920"
  },
  {
    "text": "sampling processor so before looking into the processor configuration uh we",
    "start": "3408920",
    "end": "3414880"
  },
  {
    "text": "would what we would do is we would go ahead and update the environment variables in our back into two",
    "start": "3414880",
    "end": "3420000"
  },
  {
    "text": "deployment to generate more errors and uh High latency traces so we could capture them once we deploy our",
    "start": "3420000",
    "end": "3426400"
  },
  {
    "text": "collector with uh tail sampling processor",
    "start": "3426400",
    "end": "3431839"
  },
  {
    "text": "okay let's go",
    "start": "3433240",
    "end": "3436839"
  },
  {
    "text": "there",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "sorry I'm a mic user",
    "start": "3458280",
    "end": "3464760"
  },
  {
    "text": "um awesome uh so we updated the environment variables and",
    "start": "3468160",
    "end": "3474160"
  },
  {
    "text": "then um and then we'll go ahead and deploy The",
    "start": "3474160",
    "end": "3480480"
  },
  {
    "text": "Collector which will enable the tail sampling for",
    "start": "3480480",
    "end": "3485400"
  },
  {
    "text": "us uh and then we'll see if uh the pods are up and",
    "start": "3499400",
    "end": "3505119"
  },
  {
    "text": "running",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "yeah I just uh restarted the uh open tary collector so we good uh now let's",
    "start": "3515400",
    "end": "3521480"
  },
  {
    "text": "walk through the tail sampling uh configuration uh so which is placed",
    "start": "3521480",
    "end": "3526680"
  },
  {
    "text": "under under the processor section in our configuration file so as you can see here uh so here is the tail sampling",
    "start": "3526680",
    "end": "3533880"
  },
  {
    "text": "processor under the processor section the first first three uh configurations here are optional um",
    "start": "3533880",
    "end": "3541400"
  },
  {
    "text": "configurations uh the first one here is a decision wait time uh which is a time",
    "start": "3541400",
    "end": "3546520"
  },
  {
    "text": "to wait uh before uh making the sampling decision so uh so the collector in our",
    "start": "3546520",
    "end": "3553319"
  },
  {
    "text": "case here it is configured to 10 seconds which means uh The Collector Waits 10",
    "start": "3553319",
    "end": "3558799"
  },
  {
    "text": "seconds before it takes sampling decision on every trace it receives so",
    "start": "3558799",
    "end": "3564440"
  },
  {
    "text": "since the first span it buffers all the uh all the child",
    "start": "3564440",
    "end": "3569880"
  },
  {
    "text": "spans for 10 seconds so we are assuming that in 10 seconds we'll have the complete Trace uh to make the sampling",
    "start": "3569880",
    "end": "3576400"
  },
  {
    "text": "decision so this this depends on your use case you would have to understand your application to know uh how to",
    "start": "3576400",
    "end": "3582079"
  },
  {
    "text": "configure the dis weight time so for the for this example we just configured it to 10 seconds and the default is 50",
    "start": "3582079",
    "end": "3587559"
  },
  {
    "text": "seconds 15 seconds and the other two are essentially the number of traces and expected uh new traces per second which",
    "start": "3587559",
    "end": "3594520"
  },
  {
    "text": "will help us which will help The Collector build the data structures uh under the hood uh and the next one is",
    "start": "3594520",
    "end": "3601599"
  },
  {
    "text": "the policies uh this has no default so we would at least have to configure one",
    "start": "3601599",
    "end": "3606839"
  },
  {
    "text": "policy for tail sampling processor to work um so it uh so the we have three different",
    "start": "3606839",
    "end": "3615920"
  },
  {
    "text": "policies defined here for this example uh the first policy is the status code",
    "start": "3615920",
    "end": "3621079"
  },
  {
    "text": "policy uh which uh makes sure that we sample uh 100% of the errors in this",
    "start": "3621079",
    "end": "3626880"
  },
  {
    "text": "case the status code is set to error so it will ensure that we sample 100% of the uh error uh traces with erroring",
    "start": "3626880",
    "end": "3633240"
  },
  {
    "text": "spans in them and the second uh policy here is a latency policy uh so which",
    "start": "3633240",
    "end": "3639079"
  },
  {
    "text": "will ensure that we and the threshold is set to 500 milliseconds so it will ensure that we sample 100% of the traces",
    "start": "3639079",
    "end": "3647119"
  },
  {
    "text": "which have a duration longer than 500 milliseconds and the third one is a probabilistic policy um so uh other than",
    "start": "3647119",
    "end": "3654200"
  },
  {
    "text": "um along with the error and slow traces we also randomly sample 10 percentage",
    "start": "3654200",
    "end": "3659799"
  },
  {
    "text": "from the rest of this uh uh rest of the uh traces so it would help us surface",
    "start": "3659799",
    "end": "3665160"
  },
  {
    "text": "any other issues uh that we might not not know of and it will also better understand the whole um system Health in",
    "start": "3665160",
    "end": "3672119"
  },
  {
    "text": "general so these are the three policies that we used for this example but there are a lot more policies and we could",
    "start": "3672119",
    "end": "3678079"
  },
  {
    "text": "write complicated uh complex um uh policies uh so just refer to the",
    "start": "3678079",
    "end": "3683880"
  },
  {
    "text": "Upstream documentation the link is here for for uh for the list of all the policies available now let's go ahead",
    "start": "3683880",
    "end": "3690799"
  },
  {
    "text": "and execute some requests on the",
    "start": "3690799",
    "end": "3695599"
  },
  {
    "text": "application so we should only Trace",
    "start": "3696280",
    "end": "3701720"
  },
  {
    "text": "error uh uh traces with errors and uh duration longer than",
    "start": "3701720",
    "end": "3708079"
  },
  {
    "text": "uh than 500 millisecond after this so if you see it's taking a while to load that",
    "start": "3708079",
    "end": "3713359"
  },
  {
    "text": "means it it actually is a trace that took longer than 500 milliseconds I just",
    "start": "3713359",
    "end": "3720760"
  },
  {
    "text": "clicked times and then we'll go to the Jager UI",
    "start": "3720760",
    "end": "3727400"
  },
  {
    "text": "uh Tres uh so if you can yeah you should",
    "start": "3727400",
    "end": "3734319"
  },
  {
    "text": "only see error traces and some R uh and traces that took longer than 500",
    "start": "3734319",
    "end": "3741400"
  },
  {
    "text": "millisecond in in this case it took 3 seconds and also some random because we have a randomized 10% policy you you",
    "start": "3741400",
    "end": "3748760"
  },
  {
    "text": "you'll also see some regular traces too so that's uh all about um tail",
    "start": "3748760",
    "end": "3756000"
  },
  {
    "text": "sampling um we also have a couple of uh Advanced topics here uh so I'll just",
    "start": "3756000",
    "end": "3761520"
  },
  {
    "text": "give an introduction to uh both the advanced topics so you could try out the configurations later at home so the",
    "start": "3761520",
    "end": "3768240"
  },
  {
    "text": "first Advanced topic here talks about how to scale the tail sampling um with open Telemetry so for tail samp Ling to",
    "start": "3768240",
    "end": "3776279"
  },
  {
    "text": "work as expected all spans for the trace should be processed by the same collector instance so in our previous",
    "start": "3776279",
    "end": "3784480"
  },
  {
    "text": "example it it's a simple setup uh so one collector instance uh would suffice but",
    "start": "3784480",
    "end": "3790520"
  },
  {
    "text": "uh but as a system grows uh you would have to keep more traces in memory so you would have to horizontally scale it",
    "start": "3790520",
    "end": "3796480"
  },
  {
    "text": "by adding more collector instances uh so at that point you would end up with",
    "start": "3796480",
    "end": "3802520"
  },
  {
    "text": "fragmented traces so you cannot guarantee that all spans for your Trace will end up in the same collector",
    "start": "3802520",
    "end": "3807640"
  },
  {
    "text": "instances uh for performing tail sampling so uh so we need to implement a",
    "start": "3807640",
    "end": "3814079"
  },
  {
    "text": "two layer uh architecture um for a scaling tail sampling with open Telemetry where the",
    "start": "3814079",
    "end": "3821000"
  },
  {
    "text": "first uh layer here in this architecture uh deploys uh a set of load balancing",
    "start": "3821000",
    "end": "3827079"
  },
  {
    "text": "colle Trace Trace aware load balancing collectors uh and the second layer uh is",
    "start": "3827079",
    "end": "3832200"
  },
  {
    "text": "the collectors that actually do the tail sampling so the the first layer of collectors here the load balancer collector would be configured with an",
    "start": "3832200",
    "end": "3838720"
  },
  {
    "text": "exporter called load balancing exporter which will ensure that all traces all",
    "start": "3838720",
    "end": "3844599"
  },
  {
    "text": "spans for a trace would go to the same uh Downstream deployment where the tail",
    "start": "3844599",
    "end": "3849760"
  },
  {
    "text": "sampling happens so this is how we actually scale tail sampling with a two layer um collector setup uh so I also",
    "start": "3849760",
    "end": "3856480"
  },
  {
    "text": "have the configuration here to uh deploy the two layer setup you could try it out later at home so this will uh deploy uh",
    "start": "3856480",
    "end": "3865200"
  },
  {
    "text": "a load back balancer collector with load balancing exporters configured and also two Gateway collectors which actually do",
    "start": "3865200",
    "end": "3870760"
  },
  {
    "text": "the tail sampling um and the next Advanced section that we have here is uh Jager remote sampling extension so if",
    "start": "3870760",
    "end": "3877520"
  },
  {
    "text": "you guys have used Jager remote sampling before where you could uh centrally",
    "start": "3877520",
    "end": "3882680"
  },
  {
    "text": "control the sampling configurations using eer collectors open open Telemetry",
    "start": "3882680",
    "end": "3888119"
  },
  {
    "text": "also supports the same with this extension so um you could uh you you",
    "start": "3888119",
    "end": "3893520"
  },
  {
    "text": "could you could set up the extension to to uh load sampling strategies or configuration uh from a Jager collector",
    "start": "3893520",
    "end": "3900599"
  },
  {
    "text": "that's down in the pipeline or it could also load from a static file in your local system or you could also configure",
    "start": "3900599",
    "end": "3906839"
  },
  {
    "text": "it to load files from a centrally managed file server so um it it essentially provides you the same",
    "start": "3906839",
    "end": "3913079"
  },
  {
    "text": "capabilities and uh you would achieve the same thing that you would have achieved with Jagger remote sampling so",
    "start": "3913079",
    "end": "3920319"
  },
  {
    "text": "that's all uh uh I have today for the sampling section um Anthony will take over and talk about span metrics in the",
    "start": "3920319",
    "end": "3926839"
  },
  {
    "text": "next section great thank you ano um yeah so",
    "start": "3926839",
    "end": "3933160"
  },
  {
    "text": "sampling is wonderful uh for reducing the amount of data uh that you have to process um but once you do that you",
    "start": "3933160",
    "end": "3940079"
  },
  {
    "text": "start to lose some of the visibility into uh the actual shape of your traffic",
    "start": "3940079",
    "end": "3945359"
  },
  {
    "text": "um you might not see all of the span so you can't have an accurate count uh of how many operations you're performing or",
    "start": "3945359",
    "end": "3952160"
  },
  {
    "text": "uh you won't necessarily see all the durations um if you're only say examp Ling the the long duration spans uh then",
    "start": "3952160",
    "end": "3958480"
  },
  {
    "text": "you won't know what your actual average is uh so we can try to get some of that back by using a connector that exists in",
    "start": "3958480",
    "end": "3965720"
  },
  {
    "text": "The Collector called the span metrics connector um and that does pretty much what it says on the tin uh it takes fans",
    "start": "3965720",
    "end": "3973559"
  },
  {
    "text": "and produces metrics um so connectors are a type of collector component that",
    "start": "3973559",
    "end": "3980079"
  },
  {
    "text": "act as uh an exporter on one Pipeline and a receiver on another so that you can connect the two pipelines together",
    "start": "3980079",
    "end": "3987319"
  },
  {
    "text": "uh and in this case it acts as an exporter on a an exporter on a trace Pipeline and a",
    "start": "3987319",
    "end": "3994920"
  },
  {
    "text": "receiver on a metrics pipeline uh so we uh we use the default configuration here",
    "start": "3994920",
    "end": "4000440"
  },
  {
    "text": "it's pretty reasonable if you've got an HTTP service that has you know a latency",
    "start": "4000440",
    "end": "4006240"
  },
  {
    "text": "in the the millisecond to Second range uh if you've got a a service that has a",
    "start": "4006240",
    "end": "4012119"
  },
  {
    "text": "different distribution you might want to look at configuring the the the buckets for the histograms that it produces uh",
    "start": "4012119",
    "end": "4018760"
  },
  {
    "text": "but typically you can just drop it in and start to use it uh so here we add another traces uh pipeline to our",
    "start": "4018760",
    "end": "4025640"
  },
  {
    "text": "collector configuration uh and this one bypasses the tail sampling processor so",
    "start": "4025640",
    "end": "4031039"
  },
  {
    "text": "this exporter will receive all of the spans and be able to produce metrics from them uh and then we also add the",
    "start": "4031039",
    "end": "4037520"
  },
  {
    "text": "span metrics connector as an additional receiver on our metric pipeline so those",
    "start": "4037520",
    "end": "4042880"
  },
  {
    "text": "metrics will be exported to Prometheus along with the rest of our application metrics uh so if we go ahead and make",
    "start": "4042880",
    "end": "4050160"
  },
  {
    "text": "this change to our collector configuration let's",
    "start": "4050160",
    "end": "4056640"
  },
  {
    "text": "see how I moved this to the other one three",
    "start": "4057000",
    "end": "4062640"
  },
  {
    "text": "fingers okay",
    "start": "4063200",
    "end": "4069160"
  },
  {
    "text": "okay this one I know",
    "start": "4072760",
    "end": "4077440"
  },
  {
    "text": "there we go yep that should be right uh okay so now that we've got that uh configured uh",
    "start": "4079079",
    "end": "4087920"
  },
  {
    "text": "three fingers this way all right so that will set up our collector to start",
    "start": "4087920",
    "end": "4093200"
  },
  {
    "text": "producing those metrics and if we go over here and make some more requests uh then we should be able to go",
    "start": "4093200",
    "end": "4100199"
  },
  {
    "text": "look at uh Prometheus uh",
    "start": "4100199",
    "end": "4106480"
  },
  {
    "text": "uh if we take this here open in a new tab oh uh I don't",
    "start": "4106480",
    "end": "4113278"
  },
  {
    "text": "think we have Prometheus Port forwarded",
    "start": "4113279",
    "end": "4118440"
  },
  {
    "text": "okay which is",
    "start": "4125960",
    "end": "4129440"
  },
  {
    "text": "your",
    "start": "4134440",
    "end": "4137440"
  },
  {
    "text": "we",
    "start": "4142080",
    "end": "4144400"
  },
  {
    "text": "want there we",
    "start": "4150759",
    "end": "4154039"
  },
  {
    "text": "go could actually hit uh there we go uh so now that we've",
    "start": "4156719",
    "end": "4163719"
  },
  {
    "text": "got that forwarded uh we should be able to go to",
    "start": "4163719",
    "end": "4170238"
  },
  {
    "text": "Prometheus try this again here we go uh so if you look at calls total now we we see that we are",
    "start": "4170239",
    "end": "4176120"
  },
  {
    "text": "getting metrics uh and they're coming from each of our applications uh we get",
    "start": "4176120",
    "end": "4181640"
  },
  {
    "text": "information about the the name uh of the the uh the application that produced it",
    "start": "4181640",
    "end": "4187159"
  },
  {
    "text": "what kind of span it was uh and the the name of the span as um metric",
    "start": "4187159",
    "end": "4193679"
  },
  {
    "text": "labels um so that's good and useful um but you might also want some um more",
    "start": "4193679",
    "end": "4200520"
  },
  {
    "text": "refined uh views of this so Jagger has uh a new UI element that can take those",
    "start": "4200520",
    "end": "4207960"
  },
  {
    "text": "metrics that are produced by this P metrics connector uh and produce uh a",
    "start": "4207960",
    "end": "4213400"
  },
  {
    "text": "napm style uh latency error distribution and uh request rate graphs for you uh",
    "start": "4213400",
    "end": "4220760"
  },
  {
    "text": "and it only requires some basic configuration you tell it what uh what type of metrics you're using here we're",
    "start": "4220760",
    "end": "4226840"
  },
  {
    "text": "using Prometheus where it can locate those metrics um and uh we also have to",
    "start": "4226840",
    "end": "4232800"
  },
  {
    "text": "tell it some information about the the types of metrics we're producing so here we're we're using the span metrics",
    "start": "4232800",
    "end": "4238800"
  },
  {
    "text": "connector uh so we're telling you that that is what's producing those metrics into Prometheus for us uh so if we go",
    "start": "4238800",
    "end": "4245280"
  },
  {
    "text": "ahead and uh apply did",
    "start": "4245280",
    "end": "4252000"
  },
  {
    "text": "I not include the back end here I'm sorry",
    "start": "4254239",
    "end": "4261560"
  },
  {
    "text": "uh",
    "start": "4265040",
    "end": "4268040"
  },
  {
    "text": "this that's not a y where's y there we go uh so if we do that then",
    "start": "4272719",
    "end": "4279760"
  },
  {
    "text": "we will uh reconfigure our Jagger deployment uh and now we will be able to go look at it uh and we should be able",
    "start": "4279760",
    "end": "4287679"
  },
  {
    "text": "to go to this monitor tab uh after we make some more requests to our service",
    "start": "4287679",
    "end": "4294480"
  },
  {
    "text": "get some data in there uh and if we look at the monitor tab uh we should now be",
    "start": "4294480",
    "end": "4299719"
  },
  {
    "text": "able to uh oh right I killed that port",
    "start": "4299719",
    "end": "4305400"
  },
  {
    "text": "forward helps if",
    "start": "4305400",
    "end": "4308960"
  },
  {
    "text": "I actually let it reach theer",
    "start": "4311440",
    "end": "4316600"
  },
  {
    "text": "sorry here we go uh so now it will give us information about the operations that we have so here we're in the the back",
    "start": "4316600",
    "end": "4322840"
  },
  {
    "text": "end deployment we can see the world ice operation uh if we look at",
    "start": "4322840",
    "end": "4328120"
  },
  {
    "text": "uh our go back end we'll see that we've got some error rates uh and if we go",
    "start": "4328120",
    "end": "4333920"
  },
  {
    "text": "here it will then link us to traces uh from that service uh directly from the",
    "start": "4333920",
    "end": "4339040"
  },
  {
    "text": "monitor View and we can see what is producing those errors um so that's a very quick and",
    "start": "4339040",
    "end": "4344480"
  },
  {
    "text": "easy way to get uh back visibility from uh your uh your collector that's doing",
    "start": "4344480",
    "end": "4350679"
  },
  {
    "text": "tail sampling without having to send all of those uh spans to your back",
    "start": "4350679",
    "end": "4357960"
  },
  {
    "text": "end all right if we wrap that up I just want to add something that the",
    "start": "4357960",
    "end": "4364840"
  },
  {
    "text": "the auto instrumentations as I showed you before they as well report red metrics and you might ask the question",
    "start": "4364840",
    "end": "4371800"
  },
  {
    "text": "like what is the difference between these two right the metric rep imported from the auto instrumentation for the",
    "start": "4371800",
    "end": "4377480"
  },
  {
    "text": "same kind of latency count and error count and the metrics that we get on the",
    "start": "4377480",
    "end": "4382719"
  },
  {
    "text": "collector sure the the difference is that not every instrumentation is necessarily going to produce uh metrics",
    "start": "4382719",
    "end": "4389840"
  },
  {
    "text": "so some instrumentations whether they're Auto instrumentation or manual instrumentation like for instance the the go Application we have that was",
    "start": "4389840",
    "end": "4395760"
  },
  {
    "text": "manually instrumented only produced spans um so it didn't have any uh red",
    "start": "4395760",
    "end": "4401120"
  },
  {
    "text": "metrics that were being produced by Auto instrumentation uh some of the auto instrumentation libraries that exist in some languages may only produce bans uh",
    "start": "4401120",
    "end": "4408760"
  },
  {
    "text": "and don't have any metrics uh so you can kind of derive metrics from those bans uh if the metrics don't already exist",
    "start": "4408760",
    "end": "4416040"
  },
  {
    "text": "cool so yeah it's sometimes it's supported sometimes it's not supported in the auto instrumentation and the",
    "start": "4416040",
    "end": "4421560"
  },
  {
    "text": "other is difference is that the collector might receive sampled spans",
    "start": "4421560",
    "end": "4426639"
  },
  {
    "text": "right just the subset of the all the trace data that was produced by the instrumentation can the metrics be be",
    "start": "4426639",
    "end": "4433520"
  },
  {
    "text": "skewed by that if we generate them on the collector the metrics can yeah and and that's why we set up a separate",
    "start": "4433520",
    "end": "4439440"
  },
  {
    "text": "pipeline from the pipeline that was doing the sampling um if you were doing head sampling though then the collector",
    "start": "4439440",
    "end": "4444639"
  },
  {
    "text": "only has visibility into those metrics that or those spans that actually made it to the",
    "start": "4444639",
    "end": "4451159"
  },
  {
    "text": "collector okay uh now mat is going to talk to us about open elry transform",
    "start": "4451719",
    "end": "4458280"
  },
  {
    "text": "language all right we're almost at the end um thanks for sticking with us let's",
    "start": "4459199",
    "end": "4464520"
  },
  {
    "text": "look at our last section that unlocks the ultimate power to transform your",
    "start": "4464520",
    "end": "4471000"
  },
  {
    "text": "Telemetry how open Telemetry enables is this through so-called open Telemetry transformation language or for short",
    "start": "4471000",
    "end": "4478000"
  },
  {
    "text": "we'll refer to it as OTL so this is a language that is kind of kind of a standalone component within the open",
    "start": "4478000",
    "end": "4484440"
  },
  {
    "text": "telemetric collector it's reused between uh different open Telemetry components",
    "start": "4484440",
    "end": "4490440"
  },
  {
    "text": "mostly you would use this in processors such as filter processor transfer proc processor or routing processor we'll see",
    "start": "4490440",
    "end": "4497960"
  },
  {
    "text": "example with a transform processor and then for the language itself um for most of it' be probably",
    "start": "4497960",
    "end": "4505440"
  },
  {
    "text": "quite intuitive as any other scripting or program programming language um it's",
    "start": "4505440",
    "end": "4512120"
  },
  {
    "text": "um the main thing with uh open Telemetry transformation language is uh it depends",
    "start": "4512120",
    "end": "4520800"
  },
  {
    "text": "on statements these statements will be included as a as part of configuration",
    "start": "4520800",
    "end": "4526520"
  },
  {
    "text": "in your open Telemetry collector and the the statements then include uh",
    "start": "4526520",
    "end": "4534120"
  },
  {
    "text": "particular um particular Parts such as contexts and uh functions here I",
    "start": "4534120",
    "end": "4539920"
  },
  {
    "text": "included uh simple example which will maybe be make it a bit more obvious um",
    "start": "4539920",
    "end": "4546239"
  },
  {
    "text": "so here we have a statement uh which is first invoking the function set we're",
    "start": "4546239",
    "end": "4551760"
  },
  {
    "text": "seeing that it's setting certain attributes uh so it's setting ATT attribute client error to true and we",
    "start": "4551760",
    "end": "4559679"
  },
  {
    "text": "only we will only do this if we see that we also have attribute uh HTTP status",
    "start": "4559679",
    "end": "4566320"
  },
  {
    "text": "that is equal to 400 or we have attribute HTTP status equal to",
    "start": "4566320",
    "end": "4572760"
  },
  {
    "text": "404 um so this way you can you can have a statement that transform",
    "start": "4572760",
    "end": "4580880"
  },
  {
    "text": "the the Telemetry to go a bit more into into more details",
    "start": "4580880",
    "end": "4587679"
  },
  {
    "text": "um let's look at some of the some of the Core Concepts in the in the OTL as",
    "start": "4587679",
    "end": "4595280"
  },
  {
    "text": "mentioning contexts this is uh as you'll see in our example um this just",
    "start": "4595280",
    "end": "4600880"
  },
  {
    "text": "specifies which part of the Telemetry you want to work on because you might want to work on the resource or its",
    "start": "4600880",
    "end": "4606920"
  },
  {
    "text": "attributes or you might want to work on the span you might want to work on a metric or you might want to work on a",
    "start": "4606920",
    "end": "4613600"
  },
  {
    "text": "particular data point in that metric so um you need to specify what you want to",
    "start": "4613600",
    "end": "4618719"
  },
  {
    "text": "work on and you can use you can do this uh by accessing these these uh the",
    "start": "4618719",
    "end": "4624199"
  },
  {
    "text": "context with with with the path and with a familiar uh kind of dot notation so as",
    "start": "4624199",
    "end": "4630520"
  },
  {
    "text": "you seen in the example above if you want to set an attribute um you would access the attribute with the uh square",
    "start": "4630520",
    "end": "4637239"
  },
  {
    "text": "brackets and then uh go from there functions uh there are basically",
    "start": "4637239",
    "end": "4644400"
  },
  {
    "text": "two types of functions in OTL there are so-called editors and converters",
    "start": "4644400",
    "end": "4650679"
  },
  {
    "text": "where um editors uh are manipulating the Telemetry uh themselves so this will be",
    "start": "4650679",
    "end": "4658639"
  },
  {
    "text": "functions such as set or delete key replace and so on and conversely the",
    "start": "4658639",
    "end": "4665080"
  },
  {
    "text": "converters are um just to transform the input uh into certain output that they",
    "start": "4665080",
    "end": "4672120"
  },
  {
    "text": "do not modify Telemetry itself self um you will see also example of this and",
    "start": "4672120",
    "end": "4678520"
  },
  {
    "text": "then you have other features you have obviously you have operators to do comparisons um uh literals and and so",
    "start": "4678520",
    "end": "4687920"
  },
  {
    "text": "on so let's look how this we look in action uh we will use um we'll see an",
    "start": "4687920",
    "end": "4694360"
  },
  {
    "text": "example with the transform processor and what we have in our application one feature that uh we didn't mention",
    "start": "4694360",
    "end": "4701920"
  },
  {
    "text": "explicitly but we also support recording the name of the player who is uh rolling",
    "start": "4701920",
    "end": "4707840"
  },
  {
    "text": "the dice but due to certain privacy concerns we don't want to record the name of the player in in our spans right",
    "start": "4707840",
    "end": "4716000"
  },
  {
    "text": "so in order to avoid Hefty fins uh we'll anonymize the play the names uh of our",
    "start": "4716000",
    "end": "4723679"
  },
  {
    "text": "of our players first let's see how how we record the name of of the player um so",
    "start": "4723679",
    "end": "4731360"
  },
  {
    "text": "if you don't have Port faring set up uh you can set it up again again you have the commment here um but I believe we",
    "start": "4731360",
    "end": "4738400"
  },
  {
    "text": "have it set up on our side so I'll just go ahead and fire some requests you can also choose uh from some of these names",
    "start": "4738400",
    "end": "4746520"
  },
  {
    "text": "or you can come up with your",
    "start": "4746520",
    "end": "4750480"
  },
  {
    "text": "own so yeah Barbie wins in this case let's to",
    "start": "4753080",
    "end": "4759080"
  },
  {
    "text": "couple more and let's go back since I didn't",
    "start": "4759080",
    "end": "4765440"
  },
  {
    "text": "open it in a new tab and let's see do we",
    "start": "4765440",
    "end": "4772560"
  },
  {
    "text": "have",
    "start": "4773639",
    "end": "4776639"
  },
  {
    "text": "okay let's see if we have something",
    "start": "4778760",
    "end": "4783960"
  },
  {
    "text": "here yeah so we have the whole name uh of the person who was rolling the dice",
    "start": "4787880",
    "end": "4794960"
  },
  {
    "text": "and since we're trying to avoid this what we'll do um is we",
    "start": "4794960",
    "end": "4803920"
  },
  {
    "text": "will we will make sure that we only record the first letter of the name of this person and this is this is our",
    "start": "4803920",
    "end": "4810440"
  },
  {
    "text": "simplified way of anonymizing the person in this case so then you can you can look at the",
    "start": "4810440",
    "end": "4818719"
  },
  {
    "text": "at the configuration that we have here I took out the excerpt for the transform processor um what we have here um uh",
    "start": "4818719",
    "end": "4827159"
  },
  {
    "text": "error mode is not that important for us but you can either ignore the errors um",
    "start": "4827159",
    "end": "4832400"
  },
  {
    "text": "and then um we have the context as I was saying so in this instance we're working",
    "start": "4832400",
    "end": "4839960"
  },
  {
    "text": "on the span itself and then we have statements of what we'll do with uh with",
    "start": "4839960",
    "end": "4846480"
  },
  {
    "text": "those pans in this case we just set we will be setting the attributes um so as",
    "start": "4846480",
    "end": "4853040"
  },
  {
    "text": "we've seen we're capturing the player one attribute but we want to only include the first letter so in this case",
    "start": "4853040",
    "end": "4860600"
  },
  {
    "text": "we will use the function substring to only capture the first first letter as we see here so we are specifying which",
    "start": "4860600",
    "end": "4867639"
  },
  {
    "text": "attribute we're accessing and we're only keeping the first uh first character uh",
    "start": "4867639",
    "end": "4874120"
  },
  {
    "text": "in this in this case and we'll only do this if we have if the attributes exists",
    "start": "4874120",
    "end": "4879400"
  },
  {
    "text": "or if it's not if it's not empty but that is not all um if we go",
    "start": "4879400",
    "end": "4886080"
  },
  {
    "text": "back to Jer and we look more closely we'll see that we're also recording the names in the in some",
    "start": "4886080",
    "end": "4893520"
  },
  {
    "text": "other attributes that are um that are recording the HTTP rather than the",
    "start": "4893520",
    "end": "4899040"
  },
  {
    "text": "parameters that we are passing to the application so we also need to take care of",
    "start": "4899040",
    "end": "4904440"
  },
  {
    "text": "this and so we simply will extend our",
    "start": "4904440",
    "end": "4909840"
  },
  {
    "text": "configuration and we will add add a couple more parameters um sorry couple more",
    "start": "4909840",
    "end": "4915520"
  },
  {
    "text": "statements and um in this case we will use the replace all pattern function",
    "start": "4915520",
    "end": "4920760"
  },
  {
    "text": "where we have uh again mean this we pass certain parameters to this function so we will want to work on attributes we",
    "start": "4920760",
    "end": "4927880"
  },
  {
    "text": "want to adjust the value of the attribute so not the key and uh here we have a pattern that we will try to match",
    "start": "4927880",
    "end": "4934560"
  },
  {
    "text": "against U uh in our attribute and what we want to replace it will be with a",
    "start": "4934560",
    "end": "4940840"
  },
  {
    "text": "simple Place holders Place holder so instead of of including the name of the",
    "start": "4940840",
    "end": "4946239"
  },
  {
    "text": "player we'll just have player name in cly brackets as a",
    "start": "4946239",
    "end": "4952159"
  },
  {
    "text": "replacement as I said um all of this configuration is included in this uh collector uh file we'll just go ahead",
    "start": "4952159",
    "end": "4961800"
  },
  {
    "text": "and uh okay I'm also struggling",
    "start": "4966560",
    "end": "4973440"
  },
  {
    "text": "apparently cool luckily I have just one",
    "start": "4973440",
    "end": "4980560"
  },
  {
    "text": "command so looks like our new collector came up almost",
    "start": "4980560",
    "end": "4985760"
  },
  {
    "text": "instantly and let's",
    "start": "4985760",
    "end": "4991199"
  },
  {
    "text": "see let's go back and try to fire off a couple more",
    "start": "4991199",
    "end": "4997159"
  },
  {
    "text": "requests now with different names",
    "start": "4998800",
    "end": "5005280"
  },
  {
    "text": "let's do a couple more just in case and let's go back not too far",
    "start": "5005280",
    "end": "5013440"
  },
  {
    "text": "away all right now let's look the again we should see some new",
    "start": "5013440",
    "end": "5021520"
  },
  {
    "text": "traces and let's see what we get here so we see we have the app player one",
    "start": "5024360",
    "end": "5030719"
  },
  {
    "text": "attribute uh as you've seen in the parameters of the request",
    "start": "5030719",
    "end": "5036560"
  },
  {
    "text": "that we're using where player number one was called Neo but we're shortening is",
    "start": "5036560",
    "end": "5042040"
  },
  {
    "text": "with an anonymizing this person and shortening it to n and then again we",
    "start": "5042040",
    "end": "5048159"
  },
  {
    "text": "also see we have the HTTP Target and HTTP URL attributes and we're based on",
    "start": "5048159",
    "end": "5054400"
  },
  {
    "text": "the pattern that we provided we're replacing both names with just player name um placeholder so that's it you",
    "start": "5054400",
    "end": "5062960"
  },
  {
    "text": "have transformed your span attributes now and you'll know how to apply this to",
    "start": "5062960",
    "end": "5069880"
  },
  {
    "text": "uh other parts of spans or even other types of telemetry signals and with that we're ready to",
    "start": "5069880",
    "end": "5076800"
  },
  {
    "text": "wrap up our",
    "start": "5076800",
    "end": "5080000"
  },
  {
    "text": "Workshop okay thank you very much for staying so long with us and we have roughly five minutes for questions there",
    "start": "5086639",
    "end": "5093560"
  },
  {
    "text": "should be to microphones in each aisle",
    "start": "5093560",
    "end": "5098960"
  },
  {
    "text": "um so seems like no",
    "start": "5102000",
    "end": "5106480"
  },
  {
    "text": "questions yeah but we will stay here if you want to ask something privately we can uh we can do that as well all right",
    "start": "5107400",
    "end": "5113639"
  },
  {
    "text": "thank you very much again thank you",
    "start": "5113639",
    "end": "5121119"
  }
]