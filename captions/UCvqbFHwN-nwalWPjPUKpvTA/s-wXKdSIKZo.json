[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "well hello everybody uh good afternoon",
    "start": "4980",
    "end": "7400"
  },
  {
    "text": "my name is Adi and I'm here with teju",
    "start": "7400",
    "end": "10200"
  },
  {
    "text": "and today we're going to talk about",
    "start": "10200",
    "end": "12059"
  },
  {
    "text": "first testing of Envoy but before we're",
    "start": "12059",
    "end": "15299"
  },
  {
    "text": "going to go into the details of how we",
    "start": "15299",
    "end": "17039"
  },
  {
    "text": "use pausing to make Envoy more robust",
    "start": "17039",
    "end": "19320"
  },
  {
    "text": "and secure let's give a bit of a",
    "start": "19320",
    "end": "21119"
  },
  {
    "text": "background about puzzing",
    "start": "21119",
    "end": "24060"
  },
  {
    "text": "so for a typical software component we",
    "start": "24060",
    "end": "27060"
  },
  {
    "text": "as developers add functional tests that",
    "start": "27060",
    "end": "29760"
  },
  {
    "text": "verify that our code is correct",
    "start": "29760",
    "end": "33239"
  },
  {
    "text": "so we usually add all kinds of tests",
    "start": "33239",
    "end": "36059"
  },
  {
    "text": "that are they that some input one has",
    "start": "36059",
    "end": "38640"
  },
  {
    "text": "the expected output one and we add more",
    "start": "38640",
    "end": "41040"
  },
  {
    "text": "than just one input point right yeah",
    "start": "41040",
    "end": "42660"
  },
  {
    "text": "input two and input three and so on and",
    "start": "42660",
    "end": "45960"
  },
  {
    "text": "so on",
    "start": "45960",
    "end": "46980"
  },
  {
    "text": "however our functional tests sometimes",
    "start": "46980",
    "end": "50039"
  },
  {
    "text": "Miss some Corner phases",
    "start": "50039",
    "end": "52500"
  },
  {
    "text": "specifically those that uh the value",
    "start": "52500",
    "end": "55500"
  },
  {
    "text": "whether there is some bad input that can",
    "start": "55500",
    "end": "57239"
  },
  {
    "text": "cause a program to crash",
    "start": "57239",
    "end": "59640"
  },
  {
    "text": "so this is what first testing wants to",
    "start": "59640",
    "end": "61680"
  },
  {
    "start": "60000",
    "end": "60000"
  },
  {
    "text": "address",
    "start": "61680",
    "end": "62940"
  },
  {
    "text": "post-testing is an automated software",
    "start": "62940",
    "end": "65460"
  },
  {
    "text": "testing technique that involves",
    "start": "65460",
    "end": "66900"
  },
  {
    "text": "providing invalid unexpected or random",
    "start": "66900",
    "end": "70080"
  },
  {
    "text": "data as inputs to a computer program",
    "start": "70080",
    "end": "73799"
  },
  {
    "text": "the fuzzer framework takes the code and",
    "start": "73799",
    "end": "76320"
  },
  {
    "text": "instruments it to track which code",
    "start": "76320",
    "end": "78240"
  },
  {
    "text": "blocks are exercised during the fuzzing",
    "start": "78240",
    "end": "80159"
  },
  {
    "text": "process",
    "start": "80159",
    "end": "81540"
  },
  {
    "text": "the fuzzer reads inputs from a corpus",
    "start": "81540",
    "end": "83759"
  },
  {
    "text": "directory these inputs are used as an",
    "start": "83759",
    "end": "86400"
  },
  {
    "text": "input C to an input generator",
    "start": "86400",
    "end": "89759"
  },
  {
    "text": "the generator then creates an input and",
    "start": "89759",
    "end": "92100"
  },
  {
    "text": "the fuzzing infrastructure executes the",
    "start": "92100",
    "end": "94439"
  },
  {
    "text": "code with a given input",
    "start": "94439",
    "end": "97439"
  },
  {
    "text": "if an error occurred during the",
    "start": "97439",
    "end": "99360"
  },
  {
    "text": "execution",
    "start": "99360",
    "end": "100619"
  },
  {
    "text": "an issue is added to a database",
    "start": "100619",
    "end": "103860"
  },
  {
    "text": "otherwise the input generator takes the",
    "start": "103860",
    "end": "106979"
  },
  {
    "text": "previous input and the code coverage",
    "start": "106979",
    "end": "108780"
  },
  {
    "text": "report and uses it uses them to propose",
    "start": "108780",
    "end": "112200"
  },
  {
    "text": "the next mutated input",
    "start": "112200",
    "end": "115820"
  },
  {
    "start": "115000",
    "end": "115000"
  },
  {
    "text": "there are three main categories of",
    "start": "115979",
    "end": "117420"
  },
  {
    "text": "errors that the father's attempt to",
    "start": "117420",
    "end": "119340"
  },
  {
    "text": "detect",
    "start": "119340",
    "end": "120780"
  },
  {
    "text": "first is related to memory safe safety",
    "start": "120780",
    "end": "123899"
  },
  {
    "text": "errors such as using an object after it",
    "start": "123899",
    "end": "126479"
  },
  {
    "text": "is freed or other types of databases",
    "start": "126479",
    "end": "129239"
  },
  {
    "text": "that may occur",
    "start": "129239",
    "end": "130739"
  },
  {
    "text": "the second is verifying that resource",
    "start": "130739",
    "end": "133020"
  },
  {
    "text": "usage is bounded for example detecting",
    "start": "133020",
    "end": "135660"
  },
  {
    "text": "infinite Loops or Deadlocks or stack",
    "start": "135660",
    "end": "138060"
  },
  {
    "text": "overflows",
    "start": "138060",
    "end": "139500"
  },
  {
    "text": "the third is plain old crashes such as",
    "start": "139500",
    "end": "142560"
  },
  {
    "text": "null pointed referencing failed",
    "start": "142560",
    "end": "144900"
  },
  {
    "text": "assertions or any other segmentation",
    "start": "144900",
    "end": "146819"
  },
  {
    "text": "faults",
    "start": "146819",
    "end": "149300"
  },
  {
    "text": "some of our fuzzers were very useful in",
    "start": "150180",
    "end": "152520"
  },
  {
    "text": "detecting severe bugs in the code that",
    "start": "152520",
    "end": "154860"
  },
  {
    "text": "ended up being cves",
    "start": "154860",
    "end": "157560"
  },
  {
    "text": "they typically find bugs that are hard",
    "start": "157560",
    "end": "159480"
  },
  {
    "text": "to detect just by reviewing the code",
    "start": "159480",
    "end": "162840"
  },
  {
    "text": "our father is also detected non-cbe bugs",
    "start": "162840",
    "end": "165360"
  },
  {
    "text": "and you're still protecting some of",
    "start": "165360",
    "end": "166440"
  },
  {
    "text": "these and we're continuing to monitor",
    "start": "166440",
    "end": "168060"
  },
  {
    "text": "the fuzzy issues and address them as",
    "start": "168060",
    "end": "170099"
  },
  {
    "text": "possible",
    "start": "170099",
    "end": "172080"
  },
  {
    "text": "next I'll give it to treasure to talk",
    "start": "172080",
    "end": "174300"
  },
  {
    "text": "about",
    "start": "174300",
    "end": "175019"
  },
  {
    "text": "yeah writing a process test",
    "start": "175019",
    "end": "179040"
  },
  {
    "text": "okay",
    "start": "179040",
    "end": "180480"
  },
  {
    "text": "it's not background let's do",
    "start": "180480",
    "end": "182760"
  },
  {
    "text": "a group of writing a buzz test and",
    "start": "182760",
    "end": "184560"
  },
  {
    "text": "onboard",
    "start": "184560",
    "end": "186840"
  },
  {
    "start": "186000",
    "end": "186000"
  },
  {
    "text": "we'll use the access logger Library as",
    "start": "186840",
    "end": "189239"
  },
  {
    "text": "the library under test this is a great",
    "start": "189239",
    "end": "191400"
  },
  {
    "text": "Buzz Target because this functionality",
    "start": "191400",
    "end": "193560"
  },
  {
    "text": "is split over two components the config",
    "start": "193560",
    "end": "196440"
  },
  {
    "text": "plan and the data plane",
    "start": "196440",
    "end": "198420"
  },
  {
    "text": "in the config plane the library parses",
    "start": "198420",
    "end": "201120"
  },
  {
    "text": "the input access log format string into",
    "start": "201120",
    "end": "203580"
  },
  {
    "text": "a list of internal formatters",
    "start": "203580",
    "end": "206280"
  },
  {
    "text": "than in the data plane each formatter",
    "start": "206280",
    "end": "208319"
  },
  {
    "text": "runs on every single request response",
    "start": "208319",
    "end": "211200"
  },
  {
    "text": "each formatter extracts information from",
    "start": "211200",
    "end": "213840"
  },
  {
    "text": "the headers trailer stream info to",
    "start": "213840",
    "end": "216300"
  },
  {
    "text": "create the final string",
    "start": "216300",
    "end": "218340"
  },
  {
    "text": "our goal is to write a fuzz test for",
    "start": "218340",
    "end": "220200"
  },
  {
    "text": "both functionalities",
    "start": "220200",
    "end": "223099"
  },
  {
    "text": "there's three main steps we follow to",
    "start": "224159",
    "end": "226080"
  },
  {
    "text": "create a fuzzer and Envoy proxy first we",
    "start": "226080",
    "end": "228840"
  },
  {
    "text": "Define the fuzz input schema next we",
    "start": "228840",
    "end": "231299"
  },
  {
    "text": "write the CC fuzz test and finally we",
    "start": "231299",
    "end": "233580"
  },
  {
    "text": "add in the initial Corpus",
    "start": "233580",
    "end": "235560"
  },
  {
    "text": "let's walk through these one by one",
    "start": "235560",
    "end": "239239"
  },
  {
    "start": "239000",
    "end": "239000"
  },
  {
    "text": "so first husband foot schema the input",
    "start": "239640",
    "end": "243000"
  },
  {
    "text": "schema essentially indicates to the",
    "start": "243000",
    "end": "244980"
  },
  {
    "text": "fuzzing engine the types of data to",
    "start": "244980",
    "end": "246900"
  },
  {
    "text": "generate our goal is to make an input",
    "start": "246900",
    "end": "249180"
  },
  {
    "text": "schema that captures the true input",
    "start": "249180",
    "end": "251400"
  },
  {
    "text": "space of the library under test",
    "start": "251400",
    "end": "254519"
  },
  {
    "text": "in Envoy we use protocol buffers to",
    "start": "254519",
    "end": "256560"
  },
  {
    "text": "write input schemas that's something",
    "start": "256560",
    "end": "258359"
  },
  {
    "text": "specific to our repo other open source",
    "start": "258359",
    "end": "261120"
  },
  {
    "text": "projects have various schema definitions",
    "start": "261120",
    "end": "263460"
  },
  {
    "text": "but we've standardized on produce here",
    "start": "263460",
    "end": "266520"
  },
  {
    "text": "so let's consider what the inputs for",
    "start": "266520",
    "end": "268380"
  },
  {
    "text": "the access logger Library are the most",
    "start": "268380",
    "end": "270720"
  },
  {
    "text": "evident input is the axis slug",
    "start": "270720",
    "end": "272280"
  },
  {
    "text": "formestering we want the fuzzing engine",
    "start": "272280",
    "end": "274259"
  },
  {
    "text": "to Generate random format strings",
    "start": "274259",
    "end": "276780"
  },
  {
    "text": "to indicate this we add in a string",
    "start": "276780",
    "end": "278699"
  },
  {
    "text": "field into the protocol buffer message",
    "start": "278699",
    "end": "280919"
  },
  {
    "text": "now in the fuzzing engine runs each",
    "start": "280919",
    "end": "283320"
  },
  {
    "text": "iteration will generate a random string",
    "start": "283320",
    "end": "285960"
  },
  {
    "text": "for example maybe a string with a valid",
    "start": "285960",
    "end": "288479"
  },
  {
    "text": "axis log directive a string with a",
    "start": "288479",
    "end": "290880"
  },
  {
    "text": "malform directive",
    "start": "290880",
    "end": "292800"
  },
  {
    "text": "strings with special characters escaped",
    "start": "292800",
    "end": "294900"
  },
  {
    "text": "characters",
    "start": "294900",
    "end": "295979"
  },
  {
    "text": "or even a plain old empty string all of",
    "start": "295979",
    "end": "298919"
  },
  {
    "text": "these are valid inputs the axis logger",
    "start": "298919",
    "end": "301380"
  },
  {
    "text": "should handle",
    "start": "301380",
    "end": "303600"
  },
  {
    "text": "now that only fuzzes the config path of",
    "start": "303600",
    "end": "306720"
  },
  {
    "text": "the axis logger we also want to fuzz the",
    "start": "306720",
    "end": "308820"
  },
  {
    "text": "data path to do so we need the access we",
    "start": "308820",
    "end": "311400"
  },
  {
    "text": "need the buzzing engine to create the",
    "start": "311400",
    "end": "313320"
  },
  {
    "text": "request and response information",
    "start": "313320",
    "end": "315780"
  },
  {
    "text": "such as the request headers response",
    "start": "315780",
    "end": "318600"
  },
  {
    "text": "headers response trailers in the Stream",
    "start": "318600",
    "end": "320639"
  },
  {
    "text": "info we add all these fields into the",
    "start": "320639",
    "end": "323160"
  },
  {
    "text": "fuzz input schema",
    "start": "323160",
    "end": "325139"
  },
  {
    "text": "notice here that these fields are",
    "start": "325139",
    "end": "327240"
  },
  {
    "text": "references to other protocol buffer",
    "start": "327240",
    "end": "329400"
  },
  {
    "text": "messages under the test.pose package",
    "start": "329400",
    "end": "333500"
  },
  {
    "text": "these messages are actually shims or",
    "start": "333500",
    "end": "336780"
  },
  {
    "text": "rappers that we've created that allow",
    "start": "336780",
    "end": "338759"
  },
  {
    "text": "the fuzzing engine to generate all this",
    "start": "338759",
    "end": "340620"
  },
  {
    "text": "data later we'll see how these protocol",
    "start": "340620",
    "end": "342900"
  },
  {
    "text": "buffer messages are translated to the",
    "start": "342900",
    "end": "345000"
  },
  {
    "text": "native Envoy C plus plus objects like a",
    "start": "345000",
    "end": "348060"
  },
  {
    "text": "header map in both trailer map simple",
    "start": "348060",
    "end": "349979"
  },
  {
    "text": "and stream info",
    "start": "349979",
    "end": "352199"
  },
  {
    "text": "so with this step we have a fuzz schema",
    "start": "352199",
    "end": "354840"
  },
  {
    "text": "that captures the full input space of",
    "start": "354840",
    "end": "356699"
  },
  {
    "text": "the axis logger we're ready to write our",
    "start": "356699",
    "end": "358979"
  },
  {
    "text": "fuzzer",
    "start": "358979",
    "end": "361199"
  },
  {
    "text": "we make use of the standard lib protobuf",
    "start": "361199",
    "end": "364259"
  },
  {
    "text": "mutator macro to essentially Define a",
    "start": "364259",
    "end": "366539"
  },
  {
    "text": "callback function",
    "start": "366539",
    "end": "367919"
  },
  {
    "text": "in the background the fuzzing engine is",
    "start": "367919",
    "end": "370259"
  },
  {
    "text": "repeatedly generating a value for the",
    "start": "370259",
    "end": "372720"
  },
  {
    "text": "input and passing it to the Callback",
    "start": "372720",
    "end": "375240"
  },
  {
    "text": "our goal is to plumb that input value",
    "start": "375240",
    "end": "377520"
  },
  {
    "text": "down to the library under test",
    "start": "377520",
    "end": "380580"
  },
  {
    "text": "so first we pause the config path we",
    "start": "380580",
    "end": "384300"
  },
  {
    "text": "Plumb down the axis log format string",
    "start": "384300",
    "end": "386400"
  },
  {
    "text": "from the input into the parse function",
    "start": "386400",
    "end": "388080"
  },
  {
    "text": "of the axis logger the output is a list",
    "start": "388080",
    "end": "390419"
  },
  {
    "text": "of formatter objects",
    "start": "390419",
    "end": "392639"
  },
  {
    "text": "now we're ready to start buzzing the",
    "start": "392639",
    "end": "394500"
  },
  {
    "text": "data path",
    "start": "394500",
    "end": "395639"
  },
  {
    "text": "first remember that we have those shims",
    "start": "395639",
    "end": "398280"
  },
  {
    "text": "in the input schema we need to translate",
    "start": "398280",
    "end": "400199"
  },
  {
    "text": "those shims into the native Envoy",
    "start": "400199",
    "end": "402600"
  },
  {
    "text": "objects like the envoy stream info",
    "start": "402600",
    "end": "404460"
  },
  {
    "text": "object we have Utilities in the envoy",
    "start": "404460",
    "end": "406680"
  },
  {
    "text": "fuzzer libraries to help with this",
    "start": "406680",
    "end": "408120"
  },
  {
    "text": "translation",
    "start": "408120",
    "end": "409319"
  },
  {
    "text": "once we have all that request and",
    "start": "409319",
    "end": "411360"
  },
  {
    "text": "response information we pause the data",
    "start": "411360",
    "end": "413460"
  },
  {
    "text": "path we Loop over the formatters and we",
    "start": "413460",
    "end": "416580"
  },
  {
    "text": "call the format method on each one",
    "start": "416580",
    "end": "418139"
  },
  {
    "text": "passing in the request headers response",
    "start": "418139",
    "end": "420780"
  },
  {
    "text": "headers response trailers and stream",
    "start": "420780",
    "end": "422639"
  },
  {
    "text": "info",
    "start": "422639",
    "end": "424080"
  },
  {
    "text": "do note here that we're not checking the",
    "start": "424080",
    "end": "426240"
  },
  {
    "text": "final output of the format function",
    "start": "426240",
    "end": "428039"
  },
  {
    "text": "remember this is a pause test all we're",
    "start": "428039",
    "end": "430800"
  },
  {
    "text": "trying to do is generate as many valid",
    "start": "430800",
    "end": "433199"
  },
  {
    "text": "inputs as possible and pass them to a",
    "start": "433199",
    "end": "435479"
  },
  {
    "text": "library under test we're not trying to",
    "start": "435479",
    "end": "437520"
  },
  {
    "text": "verify the correctional the correctness",
    "start": "437520",
    "end": "439560"
  },
  {
    "text": "or the functional behavior of the axis",
    "start": "439560",
    "end": "442380"
  },
  {
    "text": "logger",
    "start": "442380",
    "end": "444599"
  },
  {
    "text": "so with these two steps we have a",
    "start": "444599",
    "end": "447120"
  },
  {
    "text": "working fuzzer but we haven't done the",
    "start": "447120",
    "end": "449819"
  },
  {
    "text": "last stop yet which is adding in the",
    "start": "449819",
    "end": "451560"
  },
  {
    "text": "initial Corpus",
    "start": "451560",
    "end": "453000"
  },
  {
    "text": "the initial Corpus is important for the",
    "start": "453000",
    "end": "455039"
  },
  {
    "text": "fuzzing engine to generate realistic",
    "start": "455039",
    "end": "456780"
  },
  {
    "text": "values",
    "start": "456780",
    "end": "457919"
  },
  {
    "text": "Let's uh think about that for a second",
    "start": "457919",
    "end": "461340"
  },
  {
    "text": "so for example in the first input schema",
    "start": "461340",
    "end": "464520"
  },
  {
    "text": "we indicated to the fuzzer that we",
    "start": "464520",
    "end": "466680"
  },
  {
    "text": "wanted to Generate random access log",
    "start": "466680",
    "end": "468419"
  },
  {
    "text": "strings but we never told the pausing",
    "start": "468419",
    "end": "470880"
  },
  {
    "text": "engine what a valid access log format",
    "start": "470880",
    "end": "473639"
  },
  {
    "text": "directive looks like",
    "start": "473639",
    "end": "475199"
  },
  {
    "text": "so the fuzzing engine will have to do a",
    "start": "475199",
    "end": "477539"
  },
  {
    "text": "lot of trial and error Brute Force to",
    "start": "477539",
    "end": "479819"
  },
  {
    "text": "find realistic inputs realistic values",
    "start": "479819",
    "end": "482400"
  },
  {
    "text": "we can optimize this by adding in the",
    "start": "482400",
    "end": "485160"
  },
  {
    "text": "initial Corpus",
    "start": "485160",
    "end": "487680"
  },
  {
    "start": "486000",
    "end": "486000"
  },
  {
    "text": "the initial Corpus is a set of example",
    "start": "487680",
    "end": "490919"
  },
  {
    "text": "files so we check into the source code",
    "start": "490919",
    "end": "492720"
  },
  {
    "text": "alongside the buzzer each example file",
    "start": "492720",
    "end": "495660"
  },
  {
    "text": "is the instantiation of the fuzz input",
    "start": "495660",
    "end": "498060"
  },
  {
    "text": "schema in text Proto format",
    "start": "498060",
    "end": "501139"
  },
  {
    "text": "in the first example here I basically",
    "start": "501139",
    "end": "504300"
  },
  {
    "text": "showed the fuzzer with the Response Code",
    "start": "504300",
    "end": "506039"
  },
  {
    "text": "formatting directive looks like and I",
    "start": "506039",
    "end": "508080"
  },
  {
    "text": "add in a valid HTTP Response Code into",
    "start": "508080",
    "end": "510419"
  },
  {
    "text": "the stream info",
    "start": "510419",
    "end": "512459"
  },
  {
    "text": "similarly I added another example with",
    "start": "512459",
    "end": "514740"
  },
  {
    "text": "Upstream local address directive and",
    "start": "514740",
    "end": "516659"
  },
  {
    "text": "then I filled in a valid ipv4 address",
    "start": "516659",
    "end": "518459"
  },
  {
    "text": "and a valid port number into the stream",
    "start": "518459",
    "end": "520740"
  },
  {
    "text": "info",
    "start": "520740",
    "end": "522060"
  },
  {
    "text": "with these inputs the fuzzing engine can",
    "start": "522060",
    "end": "524399"
  },
  {
    "text": "generate new inputs via mutation and it",
    "start": "524399",
    "end": "526980"
  },
  {
    "text": "will generate new realistic inputs",
    "start": "526980",
    "end": "529500"
  },
  {
    "text": "for example this is a possible mutation",
    "start": "529500",
    "end": "532800"
  },
  {
    "start": "530000",
    "end": "530000"
  },
  {
    "text": "the fuzzing engine might do when",
    "start": "532800",
    "end": "534420"
  },
  {
    "text": "creating a new input so it could take",
    "start": "534420",
    "end": "536339"
  },
  {
    "text": "the two axis log formatting directives",
    "start": "536339",
    "end": "538260"
  },
  {
    "text": "and append them together to one string",
    "start": "538260",
    "end": "541019"
  },
  {
    "text": "it could copy over the Response Code",
    "start": "541019",
    "end": "543120"
  },
  {
    "text": "information but flip a single bit",
    "start": "543120",
    "end": "544820"
  },
  {
    "text": "resulting in an invalid HTTP code",
    "start": "544820",
    "end": "548580"
  },
  {
    "text": "and it might even just completely mutate",
    "start": "548580",
    "end": "551160"
  },
  {
    "text": "the address putting in special",
    "start": "551160",
    "end": "552480"
  },
  {
    "text": "characters in the address zeroing up the",
    "start": "552480",
    "end": "554940"
  },
  {
    "text": "port value so this input looks",
    "start": "554940",
    "end": "557940"
  },
  {
    "text": "nonsensical to us as developers but it's",
    "start": "557940",
    "end": "560459"
  },
  {
    "text": "still a valid input the fuzzing engine",
    "start": "560459",
    "end": "562680"
  },
  {
    "text": "will pass this to your fuzzer and your",
    "start": "562680",
    "end": "564899"
  },
  {
    "text": "fuzzer should ensure the access logger",
    "start": "564899",
    "end": "566760"
  },
  {
    "text": "Library can handle us gracefully without",
    "start": "566760",
    "end": "568980"
  },
  {
    "text": "any crashes and without any undefined",
    "start": "568980",
    "end": "571860"
  },
  {
    "text": "Behavior",
    "start": "571860",
    "end": "573360"
  },
  {
    "text": "with that I'll pass it back to Audi to",
    "start": "573360",
    "end": "576300"
  },
  {
    "text": "discuss the remaining life cycle for",
    "start": "576300",
    "end": "577800"
  },
  {
    "text": "that positive",
    "start": "577800",
    "end": "580399"
  },
  {
    "text": "okay so let's talk about the",
    "start": "580860",
    "end": "582720"
  },
  {
    "text": "infrastructure and the life cycle of a",
    "start": "582720",
    "end": "584459"
  },
  {
    "text": "father",
    "start": "584459",
    "end": "586019"
  },
  {
    "text": "we're using sorry we're using OSS files",
    "start": "586019",
    "end": "588959"
  },
  {
    "text": "which is a project by Google that",
    "start": "588959",
    "end": "591540"
  },
  {
    "text": "facilitates the execution and management",
    "start": "591540",
    "end": "593220"
  },
  {
    "text": "of fuzzing for open source projects",
    "start": "593220",
    "end": "596399"
  },
  {
    "text": "it has continuous fuzzing by repeatedly",
    "start": "596399",
    "end": "599100"
  },
  {
    "text": "fetching the latest version of the",
    "start": "599100",
    "end": "601019"
  },
  {
    "text": "project source code from GitHub",
    "start": "601019",
    "end": "603000"
  },
  {
    "text": "building its fuzzers and executing them",
    "start": "603000",
    "end": "605580"
  },
  {
    "text": "and tracking any open bugs",
    "start": "605580",
    "end": "608580"
  },
  {
    "text": "Envoy developers just plainly submit",
    "start": "608580",
    "end": "611459"
  },
  {
    "text": "pull requests to the GitHub repo and",
    "start": "611459",
    "end": "613380"
  },
  {
    "text": "either add new feed that either add new",
    "start": "613380",
    "end": "615060"
  },
  {
    "text": "features or existing ones",
    "start": "615060",
    "end": "617519"
  },
  {
    "text": "on a daily basis always as far as",
    "start": "617519",
    "end": "619740"
  },
  {
    "text": "fetches the envoy proxy repos main",
    "start": "619740",
    "end": "622380"
  },
  {
    "text": "branch and builds all the fuzzers",
    "start": "622380",
    "end": "625140"
  },
  {
    "text": "he then uses another project called",
    "start": "625140",
    "end": "627899"
  },
  {
    "text": "clusterfuzz which is also provided by",
    "start": "627899",
    "end": "631200"
  },
  {
    "text": "Google to execute all the the fuzzers",
    "start": "631200",
    "end": "633720"
  },
  {
    "text": "and detect errors",
    "start": "633720",
    "end": "636180"
  },
  {
    "text": "whenever an error occurs a bug is added",
    "start": "636180",
    "end": "638760"
  },
  {
    "text": "into the monorail system and it is",
    "start": "638760",
    "end": "640320"
  },
  {
    "text": "tracked by it",
    "start": "640320",
    "end": "642540"
  },
  {
    "text": "a security engineer can then triage",
    "start": "642540",
    "end": "645060"
  },
  {
    "text": "debug and assess whether it is a",
    "start": "645060",
    "end": "647040"
  },
  {
    "text": "vulnerability and how it should be at",
    "start": "647040",
    "end": "649079"
  },
  {
    "text": "rest",
    "start": "649079",
    "end": "650040"
  },
  {
    "text": "the fix itself can be done either by the",
    "start": "650040",
    "end": "653399"
  },
  {
    "text": "security team or by any other developer",
    "start": "653399",
    "end": "657500"
  },
  {
    "start": "657000",
    "end": "657000"
  },
  {
    "text": "the development workflow is a continuous",
    "start": "657959",
    "end": "660300"
  },
  {
    "text": "process that is composed of three phases",
    "start": "660300",
    "end": "663420"
  },
  {
    "text": "the first is the development of new",
    "start": "663420",
    "end": "665640"
  },
  {
    "text": "fuzzers or the update of current fuzzers",
    "start": "665640",
    "end": "667980"
  },
  {
    "text": "or for a current visor or its Corpus",
    "start": "667980",
    "end": "671279"
  },
  {
    "text": "this is done by contributions to the",
    "start": "671279",
    "end": "673140"
  },
  {
    "text": "envoy proxy repository and GitHub",
    "start": "673140",
    "end": "676440"
  },
  {
    "text": "the second is the continuous positive",
    "start": "676440",
    "end": "678720"
  },
  {
    "text": "execution infrastructure OSS fuzz in our",
    "start": "678720",
    "end": "681120"
  },
  {
    "text": "case",
    "start": "681120",
    "end": "681839"
  },
  {
    "text": "that takes the code and the Corpus and",
    "start": "681839",
    "end": "684540"
  },
  {
    "text": "executes the coverage guided fuzzles",
    "start": "684540",
    "end": "687660"
  },
  {
    "text": "whenever it finds a new bug it stores it",
    "start": "687660",
    "end": "690360"
  },
  {
    "text": "in a database along with the input that",
    "start": "690360",
    "end": "692459"
  },
  {
    "text": "calls it and notifies us",
    "start": "692459",
    "end": "695579"
  },
  {
    "text": "finally the bugs are triaged and the",
    "start": "695579",
    "end": "698339"
  },
  {
    "text": "root cause is determined along with",
    "start": "698339",
    "end": "700260"
  },
  {
    "text": "their severity and how they should be",
    "start": "700260",
    "end": "702420"
  },
  {
    "text": "fixed",
    "start": "702420",
    "end": "703560"
  },
  {
    "text": "we also add the first test case to the",
    "start": "703560",
    "end": "706019"
  },
  {
    "text": "Corpus and it is being used as both a",
    "start": "706019",
    "end": "708540"
  },
  {
    "text": "regression test",
    "start": "708540",
    "end": "709800"
  },
  {
    "text": "and as a seed for the next buzzing",
    "start": "709800",
    "end": "712019"
  },
  {
    "text": "iterations",
    "start": "712019",
    "end": "713339"
  },
  {
    "text": "an opacity to tell you to talk about",
    "start": "713339",
    "end": "715140"
  },
  {
    "text": "some best practices when creating",
    "start": "715140",
    "end": "716640"
  },
  {
    "text": "puzzles",
    "start": "716640",
    "end": "719060"
  },
  {
    "text": "perfect Convoy and there are things that",
    "start": "723480",
    "end": "725760"
  },
  {
    "text": "Audi and I have learned from our",
    "start": "725760",
    "end": "727019"
  },
  {
    "text": "experience threading fuzzers in the past",
    "start": "727019",
    "end": "728820"
  },
  {
    "text": "three years",
    "start": "728820",
    "end": "731300"
  },
  {
    "start": "731000",
    "end": "731000"
  },
  {
    "text": "one key point I want to stress is that",
    "start": "731640",
    "end": "734220"
  },
  {
    "text": "we're not trying to fuzz every single",
    "start": "734220",
    "end": "735959"
  },
  {
    "text": "Target in Envoy proxy adding a new fuzz",
    "start": "735959",
    "end": "738779"
  },
  {
    "text": "test has some computational cost and a",
    "start": "738779",
    "end": "741180"
  },
  {
    "text": "little bit of Maintenance burden instead",
    "start": "741180",
    "end": "743040"
  },
  {
    "text": "we prioritize what targets to fuzz",
    "start": "743040",
    "end": "745500"
  },
  {
    "text": "we prioritize based on two main",
    "start": "745500",
    "end": "747420"
  },
  {
    "text": "attributes the traffic type and the",
    "start": "747420",
    "end": "749940"
  },
  {
    "text": "complexity",
    "start": "749940",
    "end": "751260"
  },
  {
    "text": "we'll break those down",
    "start": "751260",
    "end": "754200"
  },
  {
    "text": "traffic type is essentially asking what",
    "start": "754200",
    "end": "757200"
  },
  {
    "text": "type of actor is your code exposed to",
    "start": "757200",
    "end": "760260"
  },
  {
    "text": "for example if your library is",
    "start": "760260",
    "end": "762180"
  },
  {
    "text": "completely on the config path it's",
    "start": "762180",
    "end": "764459"
  },
  {
    "text": "probably lower priority to fuzz because",
    "start": "764459",
    "end": "766260"
  },
  {
    "text": "we trust our configs we trust the person",
    "start": "766260",
    "end": "769079"
  },
  {
    "text": "deploying Envoy or we trust the xgs",
    "start": "769079",
    "end": "771240"
  },
  {
    "text": "server we're getting our configs from",
    "start": "771240",
    "end": "774000"
  },
  {
    "text": "if your library is on the data path it's",
    "start": "774000",
    "end": "776040"
  },
  {
    "text": "worth further breaking down the trust",
    "start": "776040",
    "end": "778260"
  },
  {
    "text": "level by your connection",
    "start": "778260",
    "end": "780060"
  },
  {
    "text": "so if you have envoid applied deployed",
    "start": "780060",
    "end": "782700"
  },
  {
    "text": "as the Gateway perhaps you have",
    "start": "782700",
    "end": "784380"
  },
  {
    "text": "untrusted Downstream clients if you have",
    "start": "784380",
    "end": "787079"
  },
  {
    "text": "Envoy in a multi-tenant model perhaps",
    "start": "787079",
    "end": "789000"
  },
  {
    "text": "you have untrusted Upstream clients or",
    "start": "789000",
    "end": "791100"
  },
  {
    "text": "if your library makes out any other",
    "start": "791100",
    "end": "792480"
  },
  {
    "text": "external service calls do you trust that",
    "start": "792480",
    "end": "794700"
  },
  {
    "text": "interaction with that external service",
    "start": "794700",
    "end": "797399"
  },
  {
    "text": "it's really important to consider that",
    "start": "797399",
    "end": "799200"
  },
  {
    "text": "because you want to focus on fuzzing",
    "start": "799200",
    "end": "801660"
  },
  {
    "text": "inputs that are untrusted inputs from",
    "start": "801660",
    "end": "804180"
  },
  {
    "text": "malicious actors that are trying to",
    "start": "804180",
    "end": "806220"
  },
  {
    "text": "break your deployment",
    "start": "806220",
    "end": "808800"
  },
  {
    "text": "please reference the envoy threat model",
    "start": "808800",
    "end": "810779"
  },
  {
    "text": "if you're unsure what type of actor your",
    "start": "810779",
    "end": "812940"
  },
  {
    "text": "code is rated for",
    "start": "812940",
    "end": "814260"
  },
  {
    "text": "a good example of this is the grpc Json",
    "start": "814260",
    "end": "817079"
  },
  {
    "text": "transcoder the transcoder is a HTTP",
    "start": "817079",
    "end": "820620"
  },
  {
    "text": "filter that has both decoder and encoder",
    "start": "820620",
    "end": "822959"
  },
  {
    "text": "paths if you look at the envoy threat",
    "start": "822959",
    "end": "825120"
  },
  {
    "text": "model the transcoder is classified as",
    "start": "825120",
    "end": "827040"
  },
  {
    "text": "follows robust to untrusted Downstream",
    "start": "827040",
    "end": "830279"
  },
  {
    "text": "but assumes trusted Upstream",
    "start": "830279",
    "end": "833160"
  },
  {
    "text": "so with that classification we know that",
    "start": "833160",
    "end": "836339"
  },
  {
    "text": "all the malicious clients or we assume",
    "start": "836339",
    "end": "838079"
  },
  {
    "text": "all the malicious clients are on the",
    "start": "838079",
    "end": "839399"
  },
  {
    "text": "downstream side when we were adding fuzz",
    "start": "839399",
    "end": "841560"
  },
  {
    "text": "tests for the transcoder we focused on",
    "start": "841560",
    "end": "844139"
  },
  {
    "text": "just us testing the downstream we still",
    "start": "844139",
    "end": "846600"
  },
  {
    "text": "added fuzz tests for the Upstream",
    "start": "846600",
    "end": "848220"
  },
  {
    "text": "encoder code paths but we really cared",
    "start": "848220",
    "end": "850560"
  },
  {
    "text": "about the code coverage on the",
    "start": "850560",
    "end": "851760"
  },
  {
    "text": "downstream or decoder code paths that",
    "start": "851760",
    "end": "854339"
  },
  {
    "text": "was able to reduce our fuzz work in half",
    "start": "854339",
    "end": "856620"
  },
  {
    "text": "for the transcoder",
    "start": "856620",
    "end": "859680"
  },
  {
    "text": "going back to prioritization the other",
    "start": "859680",
    "end": "862260"
  },
  {
    "text": "attribute to Prior test bias complexity",
    "start": "862260",
    "end": "864839"
  },
  {
    "text": "this is fairly obvious we want to fuzz",
    "start": "864839",
    "end": "867360"
  },
  {
    "text": "code that's intricate such as parsers",
    "start": "867360",
    "end": "869760"
  },
  {
    "text": "cryptography deserializers any code that",
    "start": "869760",
    "end": "873120"
  },
  {
    "text": "has historically been the source of",
    "start": "873120",
    "end": "875040"
  },
  {
    "text": "security bugs",
    "start": "875040",
    "end": "876720"
  },
  {
    "text": "good examples of this are HTTP codecs",
    "start": "876720",
    "end": "879779"
  },
  {
    "text": "and drought matching",
    "start": "879779",
    "end": "883040"
  },
  {
    "start": "883000",
    "end": "883000"
  },
  {
    "text": "so now we know what targets to fuzz an",
    "start": "884100",
    "end": "887339"
  },
  {
    "text": "Envoy but before you write your own",
    "start": "887339",
    "end": "889680"
  },
  {
    "text": "fuzzer you should understand what type",
    "start": "889680",
    "end": "891120"
  },
  {
    "text": "of Target you're fuzzing because the",
    "start": "891120",
    "end": "892740"
  },
  {
    "text": "type of fuzzer might change",
    "start": "892740",
    "end": "895440"
  },
  {
    "text": "first of all we have utility fuzzers and",
    "start": "895440",
    "end": "897899"
  },
  {
    "text": "Envoy",
    "start": "897899",
    "end": "898980"
  },
  {
    "text": "these are fuzzers that fuzz parsley-like",
    "start": "898980",
    "end": "901800"
  },
  {
    "text": "libraries such as the access logger",
    "start": "901800",
    "end": "903779"
  },
  {
    "text": "walkthrough we just did",
    "start": "903779",
    "end": "905339"
  },
  {
    "text": "these are pretty easy to write very",
    "start": "905339",
    "end": "907500"
  },
  {
    "text": "efficient very fast and high signal we",
    "start": "907500",
    "end": "910860"
  },
  {
    "text": "recommend that a hundred percent of",
    "start": "910860",
    "end": "912540"
  },
  {
    "text": "utilities have fuzzers in our repo",
    "start": "912540",
    "end": "915540"
  },
  {
    "text": "the second type of fuzzer is",
    "start": "915540",
    "end": "917220"
  },
  {
    "text": "configuration fuzzers he's focused on",
    "start": "917220",
    "end": "920160"
  },
  {
    "text": "fuzzing just the config service config",
    "start": "920160",
    "end": "923100"
  },
  {
    "text": "surface like the server initialization",
    "start": "923100",
    "end": "925320"
  },
  {
    "text": "and the xgs inputs",
    "start": "925320",
    "end": "928380"
  },
  {
    "text": "these are also easy to write but",
    "start": "928380",
    "end": "930000"
  },
  {
    "text": "consider the threat model they might be",
    "start": "930000",
    "end": "931560"
  },
  {
    "text": "lower priority because we trust our",
    "start": "931560",
    "end": "933120"
  },
  {
    "text": "inputs We Trust our configs",
    "start": "933120",
    "end": "936660"
  },
  {
    "text": "things get more interesting with the",
    "start": "936660",
    "end": "938279"
  },
  {
    "text": "third fuzzer these are HTTP data plane",
    "start": "938279",
    "end": "940500"
  },
  {
    "text": "fuzzers these various portions of the",
    "start": "940500",
    "end": "943800"
  },
  {
    "text": "data plane from HTTP codecs to routing",
    "start": "943800",
    "end": "946920"
  },
  {
    "text": "header processing",
    "start": "946920",
    "end": "948600"
  },
  {
    "text": "they're pretty complex and they come in",
    "start": "948600",
    "end": "950399"
  },
  {
    "text": "a lot of different styles when we were",
    "start": "950399",
    "end": "952680"
  },
  {
    "text": "writing some buzzers in this category we",
    "start": "952680",
    "end": "955440"
  },
  {
    "text": "found that they were not very accessible",
    "start": "955440",
    "end": "957360"
  },
  {
    "text": "to the open source community",
    "start": "957360",
    "end": "959279"
  },
  {
    "text": "we improve this by breaking out a subset",
    "start": "959279",
    "end": "962279"
  },
  {
    "text": "of these fuzzers into their own category",
    "start": "962279",
    "end": "964199"
  },
  {
    "text": "the HTTP filter fuzzers so these fuzzers",
    "start": "964199",
    "end": "968220"
  },
  {
    "text": "follow a standardized framework to pause",
    "start": "968220",
    "end": "970620"
  },
  {
    "text": "any HTTP filter",
    "start": "970620",
    "end": "972839"
  },
  {
    "text": "we created a framework to simulate",
    "start": "972839",
    "end": "975660"
  },
  {
    "text": "decode and encode calls to the filter",
    "start": "975660",
    "end": "977399"
  },
  {
    "text": "under test and we also added helpers to",
    "start": "977399",
    "end": "980100"
  },
  {
    "text": "generate headers trailers HTTP data grpc",
    "start": "980100",
    "end": "984779"
  },
  {
    "text": "data these are the same helpers you saw",
    "start": "984779",
    "end": "986880"
  },
  {
    "text": "in the walkthrough",
    "start": "986880",
    "end": "988320"
  },
  {
    "text": "with this new category any open source",
    "start": "988320",
    "end": "990899"
  },
  {
    "text": "contributor or any filter maintainer can",
    "start": "990899",
    "end": "993060"
  },
  {
    "text": "add their own fuzz tasks",
    "start": "993060",
    "end": "996139"
  },
  {
    "start": "997000",
    "end": "997000"
  },
  {
    "text": "finally let's talk about some technical",
    "start": "997399",
    "end": "1000019"
  },
  {
    "text": "trade-offs you'll face when you actually",
    "start": "1000019",
    "end": "1001759"
  },
  {
    "text": "Implement your own fuzzer those",
    "start": "1001759",
    "end": "1003860"
  },
  {
    "text": "trade-offs are realism efficiency and",
    "start": "1003860",
    "end": "1006680"
  },
  {
    "text": "maintenance we'll walk through these one",
    "start": "1006680",
    "end": "1008779"
  },
  {
    "text": "by one",
    "start": "1008779",
    "end": "1011139"
  },
  {
    "text": "realism is essentially how much code",
    "start": "1012199",
    "end": "1015500"
  },
  {
    "text": "coverage your father has for the library",
    "start": "1015500",
    "end": "1017720"
  },
  {
    "text": "under test",
    "start": "1017720",
    "end": "1018860"
  },
  {
    "text": "it's a proxy for how well your fuzzers",
    "start": "1018860",
    "end": "1021740"
  },
  {
    "text": "your fuzz input schema matches the true",
    "start": "1021740",
    "end": "1024199"
  },
  {
    "text": "input space of your library",
    "start": "1024199",
    "end": "1027740"
  },
  {
    "text": "um it's important that you that the",
    "start": "1027740",
    "end": "1029839"
  },
  {
    "text": "input space matches if you don't have if",
    "start": "1029839",
    "end": "1032240"
  },
  {
    "text": "your fuzzing engine isn't generating",
    "start": "1032240",
    "end": "1033620"
  },
  {
    "text": "correct inputs you probably won't be",
    "start": "1033620",
    "end": "1035720"
  },
  {
    "text": "triggering edge cases in your underlying",
    "start": "1035720",
    "end": "1037699"
  },
  {
    "text": "Library",
    "start": "1037699",
    "end": "1038540"
  },
  {
    "text": "you can fix that by you know expanding",
    "start": "1038540",
    "end": "1040938"
  },
  {
    "text": "out your fuzz input schema but when you",
    "start": "1040939",
    "end": "1042740"
  },
  {
    "text": "do that you're making your inputs much",
    "start": "1042740",
    "end": "1044418"
  },
  {
    "text": "more complex this makes it hard for the",
    "start": "1044419",
    "end": "1046760"
  },
  {
    "text": "fuzzing engine to generate new values",
    "start": "1046760",
    "end": "1049160"
  },
  {
    "text": "when you do that you have a loss of",
    "start": "1049160",
    "end": "1051320"
  },
  {
    "text": "efficiency",
    "start": "1051320",
    "end": "1052700"
  },
  {
    "text": "efficiency is the fuzz rate how many",
    "start": "1052700",
    "end": "1055280"
  },
  {
    "text": "times a second the fuzzing engine can",
    "start": "1055280",
    "end": "1057140"
  },
  {
    "text": "generate a new value and feed it to your",
    "start": "1057140",
    "end": "1059480"
  },
  {
    "text": "instrumented code",
    "start": "1059480",
    "end": "1061039"
  },
  {
    "text": "efficiency is also important if you",
    "start": "1061039",
    "end": "1062960"
  },
  {
    "text": "don't have high efficiency fuzzing",
    "start": "1062960",
    "end": "1064760"
  },
  {
    "text": "engine doesn't have time to explore new",
    "start": "1064760",
    "end": "1066620"
  },
  {
    "text": "input space new state space",
    "start": "1066620",
    "end": "1068660"
  },
  {
    "text": "you want to maintain high efficiency",
    "start": "1068660",
    "end": "1071360"
  },
  {
    "text": "you can usually improve efficiency by",
    "start": "1071360",
    "end": "1073820"
  },
  {
    "text": "adding in some domain-specific knowledge",
    "start": "1073820",
    "end": "1076100"
  },
  {
    "text": "for example some config validation",
    "start": "1076100",
    "end": "1078919"
  },
  {
    "text": "checks or some short circuiting in your",
    "start": "1078919",
    "end": "1081380"
  },
  {
    "text": "fuzzer to reject uninteresting inputs",
    "start": "1081380",
    "end": "1084140"
  },
  {
    "text": "early before they're passed to your",
    "start": "1084140",
    "end": "1085580"
  },
  {
    "text": "instrument to code",
    "start": "1085580",
    "end": "1087200"
  },
  {
    "text": "when you start adding in all these",
    "start": "1087200",
    "end": "1088760"
  },
  {
    "text": "checks you end up with higher",
    "start": "1088760",
    "end": "1090500"
  },
  {
    "text": "maintenance burden now your fuzzer is",
    "start": "1090500",
    "end": "1092960"
  },
  {
    "text": "scattered with tons of tiny checks you",
    "start": "1092960",
    "end": "1095059"
  },
  {
    "text": "have a lot of code complexity and if you",
    "start": "1095059",
    "end": "1097820"
  },
  {
    "text": "ever need to change your library under",
    "start": "1097820",
    "end": "1099380"
  },
  {
    "text": "chest you also need to change your",
    "start": "1099380",
    "end": "1101120"
  },
  {
    "text": "fuzzer you have to make sure the",
    "start": "1101120",
    "end": "1102620"
  },
  {
    "text": "assumptions between the two match",
    "start": "1102620",
    "end": "1105020"
  },
  {
    "text": "so there's no one solution that fits",
    "start": "1105020",
    "end": "1108380"
  },
  {
    "text": "every single funder our best advice is",
    "start": "1108380",
    "end": "1111320"
  },
  {
    "text": "to start by writing a fuzzer that's easy",
    "start": "1111320",
    "end": "1113600"
  },
  {
    "text": "to maintain and efficient but maybe not",
    "start": "1113600",
    "end": "1116240"
  },
  {
    "text": "so realistic let the fuzzer run on OSS",
    "start": "1116240",
    "end": "1119120"
  },
  {
    "text": "fuzz for a few days and then later",
    "start": "1119120",
    "end": "1121400"
  },
  {
    "text": "measure the code coverage if you're",
    "start": "1121400",
    "end": "1123320"
  },
  {
    "text": "unhappy with the code coverage you can",
    "start": "1123320",
    "end": "1125299"
  },
  {
    "text": "look at ways to increase the fuzz input",
    "start": "1125299",
    "end": "1128600"
  },
  {
    "text": "schema while trying to trying to deal",
    "start": "1128600",
    "end": "1132020"
  },
  {
    "text": "with the loss and efficiency by adding",
    "start": "1132020",
    "end": "1133820"
  },
  {
    "text": "in some optimizations",
    "start": "1133820",
    "end": "1136659"
  },
  {
    "text": "so how can the community contribute to",
    "start": "1139539",
    "end": "1142280"
  },
  {
    "text": "the fuzzing efforts",
    "start": "1142280",
    "end": "1144559"
  },
  {
    "text": "so the first question we usually get is",
    "start": "1144559",
    "end": "1146299"
  },
  {
    "start": "1145000",
    "end": "1145000"
  },
  {
    "text": "who can write first tests and help make",
    "start": "1146299",
    "end": "1148520"
  },
  {
    "text": "one point more robust and more secure of",
    "start": "1148520",
    "end": "1151100"
  },
  {
    "text": "course the answer is basically anyone",
    "start": "1151100",
    "end": "1153860"
  },
  {
    "text": "the core components of envoy are",
    "start": "1153860",
    "end": "1155480"
  },
  {
    "text": "typically caused by a component level or",
    "start": "1155480",
    "end": "1158120"
  },
  {
    "text": "Library level fuzzles just as you",
    "start": "1158120",
    "end": "1161179"
  },
  {
    "text": "mentioned before",
    "start": "1161179",
    "end": "1162860"
  },
  {
    "text": "these were mainly written by Envoy",
    "start": "1162860",
    "end": "1164720"
  },
  {
    "text": "contributors with deep understanding of",
    "start": "1164720",
    "end": "1166340"
  },
  {
    "text": "how these components work",
    "start": "1166340",
    "end": "1169600"
  },
  {
    "text": "um some of the internal extensions are",
    "start": "1170720",
    "end": "1172760"
  },
  {
    "text": "also first either by an extension",
    "start": "1172760",
    "end": "1174740"
  },
  {
    "text": "dedicated fuzzer or by the Uber filter",
    "start": "1174740",
    "end": "1176900"
  },
  {
    "text": "puzzer which is which causes the filters",
    "start": "1176900",
    "end": "1179480"
  },
  {
    "text": "interface of any HTTP filter",
    "start": "1179480",
    "end": "1182660"
  },
  {
    "text": "these fuzzers are also part of the envoy",
    "start": "1182660",
    "end": "1185179"
  },
  {
    "text": "repository so you can look it up on the",
    "start": "1185179",
    "end": "1187880"
  },
  {
    "text": "envoy repo from GitHub",
    "start": "1187880",
    "end": "1190700"
  },
  {
    "text": "there's also a third type of fuzzers",
    "start": "1190700",
    "end": "1192500"
  },
  {
    "text": "those that Target extensions that are",
    "start": "1192500",
    "end": "1194600"
  },
  {
    "text": "not part of the envoy for onward proxy",
    "start": "1194600",
    "end": "1197059"
  },
  {
    "text": "repo these puzzers can be executed by",
    "start": "1197059",
    "end": "1199640"
  },
  {
    "text": "the OSS infrastructure if the project",
    "start": "1199640",
    "end": "1202160"
  },
  {
    "text": "that hosts them has integrated me those",
    "start": "1202160",
    "end": "1204500"
  },
  {
    "text": "as possible",
    "start": "1204500",
    "end": "1207020"
  },
  {
    "start": "1207000",
    "end": "1207000"
  },
  {
    "text": "but how can a community help well we're",
    "start": "1207020",
    "end": "1210020"
  },
  {
    "text": "always looking for contributors",
    "start": "1210020",
    "end": "1211460"
  },
  {
    "text": "contributions that make that improve the",
    "start": "1211460",
    "end": "1213679"
  },
  {
    "text": "existing father's performance",
    "start": "1213679",
    "end": "1215600"
  },
  {
    "text": "so our fathers will have better signal",
    "start": "1215600",
    "end": "1217580"
  },
  {
    "text": "to noise ratio run more iterations and",
    "start": "1217580",
    "end": "1220520"
  },
  {
    "text": "cover more code blocks",
    "start": "1220520",
    "end": "1222980"
  },
  {
    "text": "maintaining the fuzzing infrastructure",
    "start": "1222980",
    "end": "1224600"
  },
  {
    "text": "is mainly done by some Envoy maintainers",
    "start": "1224600",
    "end": "1226520"
  },
  {
    "text": "and googlers and we're looking for other",
    "start": "1226520",
    "end": "1229160"
  },
  {
    "text": "parties that would like to participate",
    "start": "1229160",
    "end": "1230720"
  },
  {
    "text": "in this effort",
    "start": "1230720",
    "end": "1232340"
  },
  {
    "text": "in addition there are non-cve fuzz bugs",
    "start": "1232340",
    "end": "1235039"
  },
  {
    "text": "that are detected and we're looking for",
    "start": "1235039",
    "end": "1236780"
  },
  {
    "text": "people to assist in addressing them",
    "start": "1236780",
    "end": "1238880"
  },
  {
    "text": "finally we can benefit for more fuzzers",
    "start": "1238880",
    "end": "1241580"
  },
  {
    "text": "that will cover more use cases and more",
    "start": "1241580",
    "end": "1243740"
  },
  {
    "text": "codes code blocks and Envoy",
    "start": "1243740",
    "end": "1247640"
  },
  {
    "text": "here are a few references to resources",
    "start": "1247640",
    "end": "1249440"
  },
  {
    "text": "and guards that explain how to build and",
    "start": "1249440",
    "end": "1251179"
  },
  {
    "text": "run fuzzles",
    "start": "1251179",
    "end": "1252559"
  },
  {
    "text": "first there's the Google fuzzing GitHub",
    "start": "1252559",
    "end": "1255020"
  },
  {
    "text": "repo that contains tutorials and",
    "start": "1255020",
    "end": "1257120"
  },
  {
    "text": "examples on how to write puzzers",
    "start": "1257120",
    "end": "1259400"
  },
  {
    "text": "including some tips and on improving",
    "start": "1259400",
    "end": "1261919"
  },
  {
    "text": "performance",
    "start": "1261919",
    "end": "1263179"
  },
  {
    "text": "there's also the OSS documentation that",
    "start": "1263179",
    "end": "1266000"
  },
  {
    "text": "is relevant to anyone that wants to take",
    "start": "1266000",
    "end": "1267679"
  },
  {
    "text": "their own repo or own project",
    "start": "1267679",
    "end": "1270140"
  },
  {
    "text": "and force them",
    "start": "1270140",
    "end": "1272179"
  },
  {
    "text": "for Envoy specific fuzzing which is just",
    "start": "1272179",
    "end": "1274520"
  },
  {
    "text": "looking at the test as far as directory",
    "start": "1274520",
    "end": "1276919"
  },
  {
    "text": "in the Android repo and the provided",
    "start": "1276919",
    "end": "1279200"
  },
  {
    "text": "documentation that you find that can be",
    "start": "1279200",
    "end": "1281360"
  },
  {
    "text": "found there",
    "start": "1281360",
    "end": "1282679"
  },
  {
    "text": "if you'd like to see a very simple",
    "start": "1282679",
    "end": "1284600"
  },
  {
    "text": "puzzer that is non-proto based the but",
    "start": "1284600",
    "end": "1287299"
  },
  {
    "text": "the base64 fuzz test is a good starting",
    "start": "1287299",
    "end": "1289880"
  },
  {
    "text": "point",
    "start": "1289880",
    "end": "1291200"
  },
  {
    "text": "and more interesting fuzzler is the Uber",
    "start": "1291200",
    "end": "1293600"
  },
  {
    "text": "filter buzzer which is generic which is",
    "start": "1293600",
    "end": "1296360"
  },
  {
    "text": "a generic HTTP filter fuzzle",
    "start": "1296360",
    "end": "1299419"
  },
  {
    "text": "finally instead you mentioned",
    "start": "1299419",
    "end": "1301640"
  },
  {
    "text": "it is important to always consider the",
    "start": "1301640",
    "end": "1303620"
  },
  {
    "text": "attack surface and the threat model when",
    "start": "1303620",
    "end": "1305960"
  },
  {
    "text": "writing fuzzers",
    "start": "1305960",
    "end": "1307640"
  },
  {
    "text": "we would like to thank Harvey to",
    "start": "1307640",
    "end": "1309980"
  },
  {
    "text": "azra Ali and Matt Klein for all their",
    "start": "1309980",
    "end": "1312380"
  },
  {
    "text": "efforts in setting up the envoy fuzzing",
    "start": "1312380",
    "end": "1314179"
  },
  {
    "text": "libraries and infrastructure and of",
    "start": "1314179",
    "end": "1316220"
  },
  {
    "text": "course there are many uh to the rest of",
    "start": "1316220",
    "end": "1318320"
  },
  {
    "text": "the envoy Community for their",
    "start": "1318320",
    "end": "1320000"
  },
  {
    "text": "contributions in developing new fuzzers",
    "start": "1320000",
    "end": "1321799"
  },
  {
    "text": "addressing bugs and making Envoy more",
    "start": "1321799",
    "end": "1324080"
  },
  {
    "text": "secure and robust",
    "start": "1324080",
    "end": "1326840"
  },
  {
    "text": "in the future",
    "start": "1326840",
    "end": "1328280"
  },
  {
    "start": "1327000",
    "end": "1327000"
  },
  {
    "text": "we're looking into integrating the envoy",
    "start": "1328280",
    "end": "1330500"
  },
  {
    "text": "CI with cluster fuzzlite that executes",
    "start": "1330500",
    "end": "1333020"
  },
  {
    "text": "fuzzers when a PR is submitted and",
    "start": "1333020",
    "end": "1335600"
  },
  {
    "text": "attempts to find bugs earlier in the",
    "start": "1335600",
    "end": "1337220"
  },
  {
    "text": "development process",
    "start": "1337220",
    "end": "1339140"
  },
  {
    "text": "we're also looking at how to improve the",
    "start": "1339140",
    "end": "1340940"
  },
  {
    "text": "performance of different buzzers in",
    "start": "1340940",
    "end": "1342860"
  },
  {
    "text": "order to cover more inputs and increase",
    "start": "1342860",
    "end": "1344840"
  },
  {
    "text": "their signal to noise ratio",
    "start": "1344840",
    "end": "1347840"
  },
  {
    "text": "we would also like to add more",
    "start": "1347840",
    "end": "1349580"
  },
  {
    "text": "integration fuzzles and improve their",
    "start": "1349580",
    "end": "1351020"
  },
  {
    "text": "performance",
    "start": "1351020",
    "end": "1352220"
  },
  {
    "text": "finally we're looking at how to improve",
    "start": "1352220",
    "end": "1354559"
  },
  {
    "text": "the fuzzer's code coverage and ensure",
    "start": "1354559",
    "end": "1356419"
  },
  {
    "text": "that we cover the code blocks that that",
    "start": "1356419",
    "end": "1358460"
  },
  {
    "text": "are high importance to us",
    "start": "1358460",
    "end": "1360860"
  },
  {
    "text": "thank you",
    "start": "1360860",
    "end": "1363080"
  },
  {
    "text": "foreign",
    "start": "1363080",
    "end": "1366080"
  },
  {
    "text": "what",
    "start": "1380059",
    "end": "1382899"
  },
  {
    "text": "thanks",
    "start": "1383799",
    "end": "1385400"
  },
  {
    "text": "what was the other question",
    "start": "1385400",
    "end": "1388600"
  },
  {
    "text": "yeah let's repeat the question so",
    "start": "1399740",
    "end": "1402860"
  },
  {
    "text": "um your question was earlier at the",
    "start": "1402860",
    "end": "1404960"
  },
  {
    "text": "beginning that client said that there",
    "start": "1404960",
    "end": "1406880"
  },
  {
    "text": "were a lot of false positives in the",
    "start": "1406880",
    "end": "1408320"
  },
  {
    "text": "buzzing infrastructure and you're",
    "start": "1408320",
    "end": "1410360"
  },
  {
    "text": "wondering why and how we can avoid them",
    "start": "1410360",
    "end": "1412940"
  },
  {
    "text": "or fix them",
    "start": "1412940",
    "end": "1415159"
  },
  {
    "text": "um",
    "start": "1415159",
    "end": "1416900"
  },
  {
    "text": "okay so this is what we call the signal",
    "start": "1416900",
    "end": "1419539"
  },
  {
    "text": "to noise ratio right so and to address",
    "start": "1419539",
    "end": "1422299"
  },
  {
    "text": "them we need to understand a specific",
    "start": "1422299",
    "end": "1423740"
  },
  {
    "text": "which puzzer we're talking about for",
    "start": "1423740",
    "end": "1425539"
  },
  {
    "text": "example if we're talking about the",
    "start": "1425539",
    "end": "1427220"
  },
  {
    "text": "conflict plane which complicates fuzzles",
    "start": "1427220",
    "end": "1430039"
  },
  {
    "text": "which the the input space is very very",
    "start": "1430039",
    "end": "1432740"
  },
  {
    "text": "large it's harder",
    "start": "1432740",
    "end": "1435260"
  },
  {
    "text": "to just take",
    "start": "1435260",
    "end": "1437120"
  },
  {
    "text": "some input and say okay let's run this",
    "start": "1437120",
    "end": "1439340"
  },
  {
    "text": "also if you look at the thread model",
    "start": "1439340",
    "end": "1441580"
  },
  {
    "text": "usually the uh the uh the Comfort plane",
    "start": "1441580",
    "end": "1446539"
  },
  {
    "text": "is considered to be thrusted and so",
    "start": "1446539",
    "end": "1449179"
  },
  {
    "text": "we're reducing the amount there now",
    "start": "1449179",
    "end": "1451280"
  },
  {
    "text": "detecting it detecting uh",
    "start": "1451280",
    "end": "1454900"
  },
  {
    "text": "it's easy we we know which which fuzzers",
    "start": "1454900",
    "end": "1458360"
  },
  {
    "text": "are very noisy and there are solutions",
    "start": "1458360",
    "end": "1461780"
  },
  {
    "text": "and how to constrain the inputs so",
    "start": "1461780",
    "end": "1465080"
  },
  {
    "text": "there'll be more",
    "start": "1465080",
    "end": "1466640"
  },
  {
    "text": "um",
    "start": "1466640",
    "end": "1467480"
  },
  {
    "text": "uh real life realistic but",
    "start": "1467480",
    "end": "1471200"
  },
  {
    "text": "we just need more people to work on this",
    "start": "1471200",
    "end": "1473539"
  },
  {
    "text": "this is the main problem that we have",
    "start": "1473539",
    "end": "1475940"
  },
  {
    "text": "yeah and then there's also a lot of",
    "start": "1475940",
    "end": "1478400"
  },
  {
    "text": "infrastructure flakiness with OSS fuzz",
    "start": "1478400",
    "end": "1480799"
  },
  {
    "text": "so anytime we change like our build",
    "start": "1480799",
    "end": "1483620"
  },
  {
    "text": "tooling like playing or any of the",
    "start": "1483620",
    "end": "1485840"
  },
  {
    "text": "compiler options we need to make sure",
    "start": "1485840",
    "end": "1487880"
  },
  {
    "text": "everything in OSS fuzz works is expected",
    "start": "1487880",
    "end": "1490600"
  },
  {
    "text": "sometimes timeouts if we don't set the",
    "start": "1490600",
    "end": "1493700"
  },
  {
    "text": "correct timeouts for the fuzz tests they",
    "start": "1493700",
    "end": "1496220"
  },
  {
    "text": "can use a lot of resources that we don't",
    "start": "1496220",
    "end": "1498620"
  },
  {
    "text": "expect it to and that will cause",
    "start": "1498620",
    "end": "1500179"
  },
  {
    "text": "flakiness bugs in OSS fuzz so",
    "start": "1500179",
    "end": "1502640"
  },
  {
    "text": "infrastructure things",
    "start": "1502640",
    "end": "1504620"
  },
  {
    "text": "um just badly not having the right fuzz",
    "start": "1504620",
    "end": "1507860"
  },
  {
    "text": "input schemas things like that",
    "start": "1507860",
    "end": "1512020"
  },
  {
    "text": "any other questions",
    "start": "1512179",
    "end": "1515919"
  },
  {
    "text": "Jason",
    "start": "1516679",
    "end": "1519158"
  },
  {
    "text": "the question is do we have any",
    "start": "1531740",
    "end": "1533539"
  },
  {
    "text": "statistics on how many open fuzz bugs",
    "start": "1533539",
    "end": "1536539"
  },
  {
    "text": "there are",
    "start": "1536539",
    "end": "1538400"
  },
  {
    "text": "thank you",
    "start": "1538400",
    "end": "1539960"
  },
  {
    "text": "yeah so there are currently about 100",
    "start": "1539960",
    "end": "1543679"
  },
  {
    "text": "open bugs that are very little",
    "start": "1543679",
    "end": "1546980"
  },
  {
    "text": "that are not part of the a threat model",
    "start": "1546980",
    "end": "1549620"
  },
  {
    "text": "meaning they're usually they're mainly",
    "start": "1549620",
    "end": "1552500"
  },
  {
    "text": "from conflict plan and stuff like that",
    "start": "1552500",
    "end": "1554600"
  },
  {
    "text": "just because the of the noisy fuzzers",
    "start": "1554600",
    "end": "1557659"
  },
  {
    "text": "that we have",
    "start": "1557659",
    "end": "1558919"
  },
  {
    "text": "I can say this we we did find recently",
    "start": "1558919",
    "end": "1562880"
  },
  {
    "text": "some bugs that were introduced",
    "start": "1562880",
    "end": "1565039"
  },
  {
    "text": "and could have caused uh and",
    "start": "1565039",
    "end": "1569179"
  },
  {
    "text": "regrettable kind of Errors Downstream if",
    "start": "1569179",
    "end": "1572480"
  },
  {
    "text": "you would have taken that into",
    "start": "1572480",
    "end": "1573679"
  },
  {
    "text": "production",
    "start": "1573679",
    "end": "1574700"
  },
  {
    "text": "so",
    "start": "1574700",
    "end": "1576500"
  },
  {
    "text": "with these when you whenever you fix",
    "start": "1576500",
    "end": "1578360"
  },
  {
    "text": "these kinds of bugs",
    "start": "1578360",
    "end": "1579980"
  },
  {
    "text": "you don't see the excitement as in you",
    "start": "1579980",
    "end": "1583340"
  },
  {
    "text": "know there was an issue and everything",
    "start": "1583340",
    "end": "1585380"
  },
  {
    "text": "crashed and then you're like okay I",
    "start": "1585380",
    "end": "1587179"
  },
  {
    "text": "found the the fixed rate right this is",
    "start": "1587179",
    "end": "1589520"
  },
  {
    "text": "before uh everything uh um you know your",
    "start": "1589520",
    "end": "1593419"
  },
  {
    "text": "system correct so it's",
    "start": "1593419",
    "end": "1596059"
  },
  {
    "text": "you don't get the uh excitement of you",
    "start": "1596059",
    "end": "1600020"
  },
  {
    "text": "know I fixed the bugs in production",
    "start": "1600020",
    "end": "1601580"
  },
  {
    "text": "because the you just prevent the bug",
    "start": "1601580",
    "end": "1603440"
  },
  {
    "text": "from going into production that's the",
    "start": "1603440",
    "end": "1605299"
  },
  {
    "text": "idea",
    "start": "1605299",
    "end": "1607600"
  },
  {
    "text": "so for this there there were over 1 000",
    "start": "1618559",
    "end": "1621919"
  },
  {
    "text": "bugs in the entire lifetime of the envoy",
    "start": "1621919",
    "end": "1624260"
  },
  {
    "text": "proxy uh um",
    "start": "1624260",
    "end": "1626840"
  },
  {
    "text": "the fuzzer uh osis integration so we",
    "start": "1626840",
    "end": "1630919"
  },
  {
    "text": "there were more than one thousand and at",
    "start": "1630919",
    "end": "1633080"
  },
  {
    "text": "the moment there were about 100 of them",
    "start": "1633080",
    "end": "1635299"
  },
  {
    "text": "were known to be open",
    "start": "1635299",
    "end": "1637580"
  },
  {
    "text": "yeah and just going a little deeper into",
    "start": "1637580",
    "end": "1640340"
  },
  {
    "text": "that if you looked at our cve list if",
    "start": "1640340",
    "end": "1642260"
  },
  {
    "text": "you looked closely at it you'd notice",
    "start": "1642260",
    "end": "1644120"
  },
  {
    "text": "all the CVS we listed were 2019. so I",
    "start": "1644120",
    "end": "1647600"
  },
  {
    "text": "assume the reason that happened is",
    "start": "1647600",
    "end": "1649279"
  },
  {
    "text": "because that's when we first started",
    "start": "1649279",
    "end": "1650419"
  },
  {
    "text": "adding in fuzzers and we caught all",
    "start": "1650419",
    "end": "1653360"
  },
  {
    "text": "those bugs in production now that we",
    "start": "1653360",
    "end": "1655340"
  },
  {
    "text": "have our fuzzers running we're not",
    "start": "1655340",
    "end": "1657200"
  },
  {
    "text": "catching any production issues we're",
    "start": "1657200",
    "end": "1659299"
  },
  {
    "text": "catching these bugs earlier and fixing",
    "start": "1659299",
    "end": "1661460"
  },
  {
    "text": "them before they make it out to",
    "start": "1661460",
    "end": "1662720"
  },
  {
    "text": "production",
    "start": "1662720",
    "end": "1664159"
  },
  {
    "text": "well we'll try",
    "start": "1664159",
    "end": "1667240"
  },
  {
    "text": "[Applause]",
    "start": "1679930",
    "end": "1682739"
  }
]