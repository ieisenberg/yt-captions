[
  {
    "text": "hi everybody uh welcome uh to this talk about memory Noisy",
    "start": "199",
    "end": "7319"
  },
  {
    "text": "Neighbor what if I told you that a small group of Engineers got together and",
    "start": "7599",
    "end": "13519"
  },
  {
    "text": "developed this secret capability that allowed them to run their workloads 20",
    "start": "13519",
    "end": "18520"
  },
  {
    "text": "to 50% more efficiently on less hardware and get you",
    "start": "18520",
    "end": "24400"
  },
  {
    "text": "know significantly reduced tail latency four times five times 13 times",
    "start": "24400",
    "end": "30759"
  },
  {
    "text": "that would sound fantastic right how could we not know about this well it turns out this capability seems to",
    "start": "30759",
    "end": "37760"
  },
  {
    "text": "actually exist uh but the development has not been uh done in secret uh there",
    "start": "37760",
    "end": "45520"
  },
  {
    "text": "have been dozens of papers over the last decades from hyperscalers from",
    "start": "45520",
    "end": "51199"
  },
  {
    "text": "well-known uh research universities showing this capability so in this talk",
    "start": "51199",
    "end": "56600"
  },
  {
    "text": "I'd like to give an overview of what uh I believe the the kind of knowledge",
    "start": "56600",
    "end": "62399"
  },
  {
    "text": "there is out there uh the reason I'm giving this talk is because I think that",
    "start": "62399",
    "end": "68080"
  },
  {
    "text": "there's enough knowledge out there that this we can make this into practical systems that can generalize across the",
    "start": "68080",
    "end": "75560"
  },
  {
    "text": "kubernetes ecosystem uh you might know one of uh these surveys uh this one was published",
    "start": "75560",
    "end": "82479"
  },
  {
    "text": "by dad doog in 2023 showing that many of the containers that we run in systems",
    "start": "82479",
    "end": "88000"
  },
  {
    "text": "today uh use a lot less than the CPU that we request for them so I want to",
    "start": "88000",
    "end": "94320"
  },
  {
    "text": "run a similar survey here today and I'm going to ask y'all to please raise your",
    "start": "94320",
    "end": "100200"
  },
  {
    "text": "hands if you know the average uh CPU utilization in a production kubernetes",
    "start": "100200",
    "end": "106759"
  },
  {
    "text": "cluster hands up all right and then leave your hands up uh if the cluster",
    "start": "106759",
    "end": "114079"
  },
  {
    "text": "utilization is above 20% okay I guess a third lowered their",
    "start": "114079",
    "end": "119600"
  },
  {
    "text": "hand above 30% yeah uh I guess another third lower",
    "start": "119600",
    "end": "124960"
  },
  {
    "text": "there above 40 anybody has a cluster with above 50% CPU utilization with user facing traffic",
    "start": "124960",
    "end": "132760"
  },
  {
    "text": "wow so good on you well if if uh you said between 20 and 40% you're in very",
    "start": "132760",
    "end": "140280"
  },
  {
    "text": "good company uh some of the largest companies on the planets uh with large",
    "start": "140280",
    "end": "146000"
  },
  {
    "text": "engineering teams capable of optimizing their deployments have public average CPU utilization between 20 and",
    "start": "146000",
    "end": "154760"
  },
  {
    "text": "40% but what seems to have happened in the last few years is that some companies have been able to increase",
    "start": "154760",
    "end": "160680"
  },
  {
    "text": "their efficiency quite substantially uh Google was around 35%",
    "start": "160680",
    "end": "166040"
  },
  {
    "text": "CPU utilization in 2011 and increased to 50% the reported CPU utilization in",
    "start": "166040",
    "end": "173080"
  },
  {
    "text": "2019 so what happened how did they manage to increase their efficiency so",
    "start": "173080",
    "end": "178680"
  },
  {
    "text": "substantially well reading published work I found uh at least two",
    "start": "178680",
    "end": "184040"
  },
  {
    "text": "contributors to that efficiency gain so one of them is advancement in vertical",
    "start": "184040",
    "end": "190200"
  },
  {
    "text": "pod autoscaling and there's a very interesting paper published by Google called autopilot in eurosis 2020 and",
    "start": "190200",
    "end": "197640"
  },
  {
    "text": "this is not the gke autopilot if you're familiar with this this is a separate system that they integrated into Borg",
    "start": "197640",
    "end": "203640"
  },
  {
    "text": "and where they discuss how they change the CPU and memory requirements on live",
    "start": "203640",
    "end": "208720"
  },
  {
    "text": "pods as they are running to increase the density in their deployments um to the kubernetes community there are a couple",
    "start": "208720",
    "end": "215080"
  },
  {
    "text": "of companies that uh take care of of providing this type of vertical",
    "start": "215080",
    "end": "220239"
  },
  {
    "text": "horizontal pod Auto scaling like uh you know perfect scale storm Forge and others um and so this is one of the cont",
    "start": "220239",
    "end": "228439"
  },
  {
    "text": "contributors to efficiency the other one which is the subject of this talk is",
    "start": "228439",
    "end": "234319"
  },
  {
    "text": "handling Noisy Neighbor this enables companies to spend less CPU Cycles processing every request reduce Tay",
    "start": "234319",
    "end": "241640"
  },
  {
    "text": "latency so they can pack workloads tighter I've divided the talk into four",
    "start": "241640",
    "end": "249120"
  },
  {
    "text": "sections and instead of doing a deep dive into one system one implementation and giving all of the details on the one",
    "start": "249120",
    "end": "255519"
  },
  {
    "text": "system I've instead opted to give a broad overview of what I think the knowledge is so to give you a concept of",
    "start": "255519",
    "end": "262000"
  },
  {
    "text": "what the problem is and how companies are solving it so let's start with a problem what is",
    "start": "262000",
    "end": "268639"
  },
  {
    "text": "memory Noisy Neighbor how does it affect pods and do I actually have it in my",
    "start": "268639",
    "end": "275360"
  },
  {
    "text": "cluster Cloud our Cloud native applications run ultimately on physical",
    "start": "275600",
    "end": "281880"
  },
  {
    "text": "hardware and these applications have to share that finite resources that the physical Hardware has to",
    "start": "281880",
    "end": "288479"
  },
  {
    "text": "offer in Noisy Neighbor one application consumes a lot more than its fair share",
    "start": "288479",
    "end": "295600"
  },
  {
    "text": "and this means that the other applications cannot get access to the resources that they need and so their performance",
    "start": "295600",
    "end": "301440"
  },
  {
    "text": "degrades in this talk I'm going to focus on the memory subsystem which are these two resources the last level cache which",
    "start": "301440",
    "end": "309759"
  },
  {
    "text": "I'm just going to call cache and the memory",
    "start": "309759",
    "end": "314599"
  },
  {
    "text": "bandwidth so in this Benchmark uh the workload varies how",
    "start": "315440",
    "end": "321240"
  },
  {
    "text": "much how many reads and writs it performs to memory so in fact changing the amount of memory bandwidth that it",
    "start": "321240",
    "end": "328080"
  },
  {
    "text": "consumes uh the bench then measures the memory access latency at each of these",
    "start": "328080",
    "end": "334600"
  },
  {
    "text": "memory bandwidths so as you can see as as The Benchmark application consumes more and",
    "start": "334600",
    "end": "340759"
  },
  {
    "text": "more memory the access latency increases kind of gradually but then there's a knee curve at the 80% Mark the 90",
    "start": "340759",
    "end": "347280"
  },
  {
    "text": "gigabytes per second over there where memory access latency starts to increase",
    "start": "347280",
    "end": "352319"
  },
  {
    "text": "very quickly with additional memory bandwidth so what this means is if you have this one Noisy Neighbor one",
    "start": "352319",
    "end": "359039"
  },
  {
    "text": "application that drives the system from the 80% bandwidth utilization to 100%",
    "start": "359039",
    "end": "365440"
  },
  {
    "text": "utilization it then causes the memory access latency to in to almost double",
    "start": "365440",
    "end": "371039"
  },
  {
    "text": "and every application running on that system experiences these slower memory",
    "start": "371039",
    "end": "376160"
  },
  {
    "text": "access times so this is essentially memory Noisy Neighbor so you you might ask uh you",
    "start": "376160",
    "end": "383160"
  },
  {
    "text": "know CPUs have several mechanisms that uh are supposed to hide memory latency",
    "start": "383160",
    "end": "389360"
  },
  {
    "text": "and protect us from these cases of high uh memory access latency you have",
    "start": "389360",
    "end": "394479"
  },
  {
    "text": "prefetchers so the prefetchers try to read data from dram onto caches ahead of",
    "start": "394479",
    "end": "400080"
  },
  {
    "text": "time so that when the CPU needs it it already has it there doesn't have to wait for it you have the reorder buffer",
    "start": "400080",
    "end": "406280"
  },
  {
    "text": "that allows the CPU to ex execute instructions out of order uh so while it's waiting for memory it might be able",
    "start": "406280",
    "end": "411520"
  },
  {
    "text": "to execute other instructions that are you know after the memory read and",
    "start": "411520",
    "end": "417479"
  },
  {
    "text": "caches keep uh frequently access data on the CPU so you don't have to reread it",
    "start": "417479",
    "end": "424240"
  },
  {
    "text": "and so the question is do all of these mechanisms actually protect us from high memory access latency or",
    "start": "424240",
    "end": "430840"
  },
  {
    "text": "not there's a very popular metric in order to measure whether CPUs uh suffer",
    "start": "430840",
    "end": "437759"
  },
  {
    "text": "from high memory access latency which is cycles per instruction or",
    "start": "437759",
    "end": "443000"
  },
  {
    "text": "CPI the idea is that as CPUs wait for memory they incur these stall Cycles",
    "start": "443000",
    "end": "449240"
  },
  {
    "text": "where they are waiting for memory they cannot do useful work so the number of overall Cycles increases but the number",
    "start": "449240",
    "end": "455919"
  },
  {
    "text": "of instructions they are able to retire the useful work doesn't increase so the ratio is high when there's High uh",
    "start": "455919",
    "end": "462280"
  },
  {
    "text": "memory latency and so the question is um so let's let's see whether CPI increases",
    "start": "462280",
    "end": "469639"
  },
  {
    "text": "when there's High memory latency or not so are these mechanisms effective here are measurements taken by Alibaba in a",
    "start": "469639",
    "end": "476919"
  },
  {
    "text": "trace that Alibaba Cloud published in 2022 uh they measured a cluster with",
    "start": "476919",
    "end": "482520"
  },
  {
    "text": "over 8,000 physical hosts running over a million containers and they sampled these low-level uh microarchitectural",
    "start": "482520",
    "end": "490080"
  },
  {
    "text": "metrics like memory bandwidth memory latency and cycles per instruction and",
    "start": "490080",
    "end": "495680"
  },
  {
    "text": "they did this over a 24-hour period and published it uh what you can see here on the left graph uh shows on the aaxis is",
    "start": "495680",
    "end": "504520"
  },
  {
    "text": "memory bandwidth on the Y AIS is memory latency so this is similar to the graph we show we saw two slides ago and here",
    "start": "504520",
    "end": "511080"
  },
  {
    "text": "you can also see kind of gradually increases the latency with memory bandwidth and then you have the knee and on the right hand side is a",
    "start": "511080",
    "end": "518560"
  },
  {
    "text": "graph where the x axis is memory latency and the Y AIS is uh CPI cycles per",
    "start": "518560",
    "end": "525360"
  },
  {
    "text": "instructions I'll take questions at the end",
    "start": "525360",
    "end": "530360"
  },
  {
    "text": "um as far as I the question was is it for external like public cloud or",
    "start": "532360",
    "end": "537480"
  },
  {
    "text": "internal workloads I as far as I understand it internal workloads uh thanks for the question so",
    "start": "537480",
    "end": "543240"
  },
  {
    "text": "um the on the xaxis as I said latency on the Y AIS CPI and you can see that in",
    "start": "543240",
    "end": "548600"
  },
  {
    "text": "indeed they were able to see correlation when there's High memory access latency there's High CPI so in this cluster what",
    "start": "548600",
    "end": "555000"
  },
  {
    "text": "does it mean to have a Noisy Neighbor so if you have an application driving the memory bandwidth up 80% like we saw",
    "start": "555000",
    "end": "561880"
  },
  {
    "text": "before it would double the latency and it translates to a 25% increase in CPI",
    "start": "561880",
    "end": "568040"
  },
  {
    "text": "this means you have one memory you know memory Noisy Neighbor and then all of the applications they have they",
    "start": "568040",
    "end": "574040"
  },
  {
    "text": "need to spend 25% more Cycles to do the same amount of work and I'll note that",
    "start": "574040",
    "end": "580399"
  },
  {
    "text": "uh this Benchmark by Alibaba Cloud already had mitigation for cash Noisy",
    "start": "580399",
    "end": "585600"
  },
  {
    "text": "Neighbor so I we had two resources the caches and the memory bandwidth so they already mitigate cash Noisy Neighbor so",
    "start": "585600",
    "end": "591800"
  },
  {
    "text": "in a system that doesn't have neither cash me uh Noisy Neighbor mitigation and memory band with Noisy Neighbor the",
    "start": "591800",
    "end": "597920"
  },
  {
    "text": "number would be a lot more than 25% so this is a lower bound on how much you could save by tackling Noisy",
    "start": "597920",
    "end": "604880"
  },
  {
    "text": "Neighbor okay so we looked at the efficiency angle you know how much more faster you could run on average by",
    "start": "604880",
    "end": "612160"
  },
  {
    "text": "tackling Noisy Neighbor is there an impact on tail latency well it turns out",
    "start": "612160",
    "end": "618279"
  },
  {
    "text": "that the impact on tail latency is very very substantial so here are measurements published by Google in 2015",
    "start": "618279",
    "end": "626040"
  },
  {
    "text": "the three tables that you see here are three production worklow loads that they tested the top one web search is the",
    "start": "626040",
    "end": "634360"
  },
  {
    "text": "Google search node uh ml cluster is a machine learning text classification uh realtime service",
    "start": "634360",
    "end": "643079"
  },
  {
    "text": "that answers users queries and mem keyal is an inmemory key Value Store like",
    "start": "643079",
    "end": "648839"
  },
  {
    "text": "mcash the rows in the table are the different uh Noisy Neighbor generators",
    "start": "648839",
    "end": "654800"
  },
  {
    "text": "that they used so Baseline is without a Noisy Neighbor then LLC are three cache",
    "start": "654800",
    "end": "660399"
  },
  {
    "text": "Noisy Neighbor generators with different intensities small medium and big and Dam",
    "start": "660399",
    "end": "665600"
  },
  {
    "text": "is the memory bandwidth Noisy Neighbor The Columns are the load on the workload",
    "start": "665600",
    "end": "671959"
  },
  {
    "text": "on the production workload that they measured and the numbers in the table are the tail latency that they measured",
    "start": "671959",
    "end": "679160"
  },
  {
    "text": "as a fraction of their SLO Target so maybe this 116% 116% that you see here",
    "start": "679160",
    "end": "685360"
  },
  {
    "text": "means that if they had an SLO Target of something you know let's say 100 milliseconds this was 116 tail latency",
    "start": "685360",
    "end": "691680"
  },
  {
    "text": "uh millisecond tail latency and what you can see from these is that there is a very substantial uh increase in tail",
    "start": "691680",
    "end": "699560"
  },
  {
    "text": "latency with when you have memory Noisy Neighbor more than four times in web search more than five times for EML",
    "start": "699560",
    "end": "706399"
  },
  {
    "text": "cluster and more than 13 times in the mcash equivalent so there is a huge",
    "start": "706399",
    "end": "712279"
  },
  {
    "text": "increase in tail latency due to no Noisy Neighbor so I'd like to run another",
    "start": "712279",
    "end": "718160"
  },
  {
    "text": "survey this is the second survey and the last I promise uh please raise your hand if you know what type of nodes run in a",
    "start": "718160",
    "end": "727000"
  },
  {
    "text": "production kubernetes cluster so are they band Metal are they the four extra larges eight extra it doesn't have to be",
    "start": "727000",
    "end": "732519"
  },
  {
    "text": "the exact ones but roughly okay now leave your hand up please if you only",
    "start": "732519",
    "end": "738720"
  },
  {
    "text": "use uh you never use a fraction of a physical CPU you only use the bare metal you only use maybe like half of uh half",
    "start": "738720",
    "end": "745360"
  },
  {
    "text": "of the size of the maximal size of the node yeah I guess most most most hands uh",
    "start": "745360",
    "end": "752880"
  },
  {
    "text": "dropped and so you know it's very common to use the four extra larges or the",
    "start": "752880",
    "end": "758720"
  },
  {
    "text": "eight extra larges right like a few cores you don't have to have the bare metal big machines so let's look at this",
    "start": "758720",
    "end": "764600"
  },
  {
    "text": "you know best practices in our community is to separate our big data analytics clusters from our production user facing",
    "start": "764600",
    "end": "772720"
  },
  {
    "text": "latency sensitive workloads and the reason is you don't want somebody to run this big data analytics job and ruin the",
    "start": "772720",
    "end": "779199"
  },
  {
    "text": "performance of your production uh traff of your production workloads and so it",
    "start": "779199",
    "end": "784399"
  },
  {
    "text": "turns out if you're running this in something like a public cloud or private cloud with multi-tenancy and you're not",
    "start": "784399",
    "end": "790279"
  },
  {
    "text": "taking the full CPUs which is what the survey was you're actually running something like this your workloads are",
    "start": "790279",
    "end": "796360"
  },
  {
    "text": "running or your production workloads are running next to VMS from other users and in fact some random users in the in the",
    "start": "796360",
    "end": "804079"
  },
  {
    "text": "cloud some random dudes are running workloads next to your workloads so you",
    "start": "804079",
    "end": "809120"
  },
  {
    "text": "you know why are we doing this right we we wanted to avoid this situation and you know I I you people ask does does my",
    "start": "809120",
    "end": "816519"
  },
  {
    "text": "cloud provider actually support tackling this type of Noisy Neighbor uh I wasn't",
    "start": "816519",
    "end": "821720"
  },
  {
    "text": "able to find uh too much uh information about that so um there is evidence that",
    "start": "821720",
    "end": "827839"
  },
  {
    "text": "some Cloud providers do support this but you know your mileage may",
    "start": "827839",
    "end": "834320"
  },
  {
    "text": "vary and so consider this Engineers spend months and maybe years of work",
    "start": "834320",
    "end": "841360"
  },
  {
    "text": "trying to optimize the performance that user workloads experience you know you could you could be uh changing or adding",
    "start": "841360",
    "end": "849040"
  },
  {
    "text": "database indices changing data schemas so that queries are run faster you might",
    "start": "849040",
    "end": "854079"
  },
  {
    "text": "take a service and split it into multiple microservices so that uh transaction processing happens in",
    "start": "854079",
    "end": "860240"
  },
  {
    "text": "parallel um and you just profiling and and alleviating alleviating bottleneck and all this work that Engineers do can",
    "start": "860240",
    "end": "868800"
  },
  {
    "text": "be completely erased obliterated by memory Noisy Neighbor that decreases the",
    "start": "868800",
    "end": "876240"
  },
  {
    "text": "performance of the underlying compute",
    "start": "876240",
    "end": "880480"
  },
  {
    "text": "infrastructure and and so the next question we have to ask ourselves is do",
    "start": "881639",
    "end": "886880"
  },
  {
    "text": "we really need some batch analytics to run next to our workloads in order to experience Noisy",
    "start": "886880",
    "end": "892240"
  },
  {
    "text": "Neighbor it turns out that no even regular workloads can be Noisy Neighbor",
    "start": "892240",
    "end": "898120"
  },
  {
    "text": "uh noisy neighbors uh in this experiment run by MIT researchers in 2020 they ran",
    "start": "898120",
    "end": "904040"
  },
  {
    "text": "mcache alongside a garbage collected workload and you can see on the top graph here the memory bandwidth with the",
    "start": "904040",
    "end": "911199"
  },
  {
    "text": "two workloads running everything's fine um they use relatively little memory bandwidth but as the garbage collection",
    "start": "911199",
    "end": "918600"
  },
  {
    "text": "Mark phase starts memory bandwidth essentially saturates if you look at the",
    "start": "918600",
    "end": "924720"
  },
  {
    "text": "mcash latency graph on the bottom you'll see that mcash was usually 50 micros T",
    "start": "924720",
    "end": "930839"
  },
  {
    "text": "latency P 99.9 uh but then as the as the mark phase start started latency increases by",
    "start": "930839",
    "end": "939279"
  },
  {
    "text": "three orders of magnitude right thousand times and uh this means that even a",
    "start": "939279",
    "end": "946399"
  },
  {
    "text": "garbage collected workload can be Noisy Neighbor in your system and there are other examples of memory intensive",
    "start": "946399",
    "end": "952279"
  },
  {
    "text": "workloads uh for example if you have live image uh runtime security live",
    "start": "952279",
    "end": "958279"
  },
  {
    "text": "image scanning in your in your cluster uh if you do video streaming",
    "start": "958279",
    "end": "964040"
  },
  {
    "text": "transcoding container images come compressed so even decompressing container images is memory intensive and",
    "start": "964040",
    "end": "970560"
  },
  {
    "text": "so on right many different workloads so let's summarize so",
    "start": "970560",
    "end": "976279"
  },
  {
    "text": "far uh memory Noisy Neighbor shows up as high memory access latency which",
    "start": "976279",
    "end": "982639"
  },
  {
    "text": "translates to high cycles per instruction which means it looks like there's just High CPU looks like the",
    "start": "982639",
    "end": "988199"
  },
  {
    "text": "system is really working hard but in effect it's not doing useful work tail latency also suffers",
    "start": "988199",
    "end": "994959"
  },
  {
    "text": "significantly from memory noisy neighbor and we've seen four times five times 13 times and you might have noisy neighbors",
    "start": "994959",
    "end": "1001800"
  },
  {
    "text": "from VMS running alongside you but even your own pods uh could be generating",
    "start": "1001800",
    "end": "1007199"
  },
  {
    "text": "this type of Noisy Neighbor okay so let's see what's",
    "start": "1007199",
    "end": "1013800"
  },
  {
    "text": "currently available to mitigate Noisy Neighbor modern C use allow direct",
    "start": "1013800",
    "end": "1021199"
  },
  {
    "text": "control over the amount of resources that each application can use uh you can",
    "start": "1021199",
    "end": "1026640"
  },
  {
    "text": "decide what fraction of caches each application can consume and how much",
    "start": "1026640",
    "end": "1031798"
  },
  {
    "text": "memory bandwidth it can use the other method to control uh Noisy",
    "start": "1031799",
    "end": "1037400"
  },
  {
    "text": "Neighbor is to limit reduce the opportunity that the Noisy Neighbor has to consume resources so you can uh you",
    "start": "1037400",
    "end": "1045400"
  },
  {
    "text": "can reduce the number of cores that the Noisy Neighbor has or pin it to a very",
    "start": "1045400",
    "end": "1050679"
  },
  {
    "text": "small subset of cores or you can change the frequency of these cores and the idea is if the Noisy Neighbor has less",
    "start": "1050679",
    "end": "1057160"
  },
  {
    "text": "Cycles in order to create noise it would interfere less so these are the main if you look at uh AT Systems these are the",
    "start": "1057160",
    "end": "1064000"
  },
  {
    "text": "two main like the direct control and indirect control that that you'll",
    "start": "1064000",
    "end": "1069880"
  },
  {
    "text": "see I get this question a lot I'm running containers shouldn't cgroup handle this for",
    "start": "1070160",
    "end": "1075840"
  },
  {
    "text": "me and in fact cgroup has uh CPU and memory uh",
    "start": "1075840",
    "end": "1081760"
  },
  {
    "text": "controllers but they don't tackle memory bandwidth and caches but not All Is Lost uh because",
    "start": "1081760",
    "end": "1089600"
  },
  {
    "text": "the konel does have a different subsystem uh called res control or resource control that is able to",
    "start": "1089600",
    "end": "1096720"
  },
  {
    "text": "allocate both of these resources measure and allocate in fact and the reason for this is historical in 2016 Intel",
    "start": "1096720",
    "end": "1104000"
  },
  {
    "text": "contributed support for their uh Hardware uh and back then the colel",
    "start": "1104000",
    "end": "1109400"
  },
  {
    "text": "engineers decided not to put the support in cgroups but rather Implement a new subsystem in 2018 AMD contributed",
    "start": "1109400",
    "end": "1117240"
  },
  {
    "text": "support to AMD hardware and arm is in process of contributing",
    "start": "1117240",
    "end": "1123679"
  },
  {
    "text": "support I'd like to now show a quick demo and this demo was recorded by Folks",
    "start": "1123679",
    "end": "1129520"
  },
  {
    "text": "at meta led by tan H and I'd like to uh acknowledge those folks and uh send",
    "start": "1129520",
    "end": "1136400"
  },
  {
    "text": "kudos to those for creating this demo and it's called the Facebook resource control demo so I'll",
    "start": "1136400",
    "end": "1143240"
  },
  {
    "text": "narrate here you can see in green transactions per second and in blue",
    "start": "1144200",
    "end": "1149600"
  },
  {
    "text": "latency of a latency sensitive workload let's start a Noisy",
    "start": "1149600",
    "end": "1155039"
  },
  {
    "text": "Neighbor you can see that the uh request per second drops and latency",
    "start": "1155039",
    "end": "1161840"
  },
  {
    "text": "increases we'll stop the Noisy Neighbor and let the latency sensitive",
    "start": "1161840",
    "end": "1168159"
  },
  {
    "text": "workload converge to the good performance and now let's run the noisy neighbors with resource allocation you",
    "start": "1168159",
    "end": "1175360"
  },
  {
    "text": "can see on the bottom there's a a compile job running and the the latency sensitive workload is",
    "start": "1175360",
    "end": "1182919"
  },
  {
    "text": "fine hypervisors have some support for memory and cash allocation uh but I'll",
    "start": "1188360",
    "end": "1195320"
  },
  {
    "text": "I'll tell you there's there's just such a scarcity of uh information out there uh from the way I read the documentation",
    "start": "1195320",
    "end": "1202520"
  },
  {
    "text": "that you could find uh the it probably it is mostly used in in Niche use cases",
    "start": "1202520",
    "end": "1209840"
  },
  {
    "text": "in Telco and finance so at least that's my impression from Reading uh what's",
    "start": "1209840",
    "end": "1215799"
  },
  {
    "text": "available all right so we saw that there is Hardware support for allocation and that Linux has support what systems can",
    "start": "1215799",
    "end": "1223679"
  },
  {
    "text": "we build in order to control Noisy Neighbor and so I'll go through these three typ maor major types of systems",
    "start": "1223679",
    "end": "1230880"
  },
  {
    "text": "and if you read papers most of the systems fall into these three major",
    "start": "1230880",
    "end": "1236520"
  },
  {
    "text": "categories I'll start with cycles per instruction um and the idea here is what",
    "start": "1236520",
    "end": "1242840"
  },
  {
    "text": "we've seen before when there's High memory contention the CPI is going to be high uh the major challenge that these",
    "start": "1242840",
    "end": "1250240"
  },
  {
    "text": "systems have is that they don't know what a good CPI reading is is three good",
    "start": "1250240",
    "end": "1255640"
  },
  {
    "text": "is three bad is five good is five bad so they have to create these profiles per",
    "start": "1255640",
    "end": "1261400"
  },
  {
    "text": "task to understand what's a good measurement and what's a bad measurement they can then use these profiles uh in",
    "start": "1261400",
    "end": "1269240"
  },
  {
    "text": "in running clusters to see which tasks have outlier measurements and if a task",
    "start": "1269240",
    "end": "1274960"
  },
  {
    "text": "has a high CPI measurement for several measurement intervals then it's declared an out outlier the system then needs to",
    "start": "1274960",
    "end": "1281799"
  },
  {
    "text": "find what is the Noisy Neighbor affecting that task and it does that with the Insight that uh",
    "start": "1281799",
    "end": "1290080"
  },
  {
    "text": "when the Noisy Neighbor has more CPU it utilizes more CPU it creates more noise so it affects the CPI of the outlier",
    "start": "1290080",
    "end": "1297039"
  },
  {
    "text": "more so what these systems do is they take the CPI measurements of the outlier",
    "start": "1297039",
    "end": "1302400"
  },
  {
    "text": "and the CPU utilization of every other task and then correlate them together and when they find a good correlation",
    "start": "1302400",
    "end": "1307679"
  },
  {
    "text": "that's the Noisy Neighbor and they can limit it the major disadvantage of these type",
    "start": "1307679",
    "end": "1314279"
  },
  {
    "text": "of systems is that CPI is extremely noisy so these systems need to aggregate",
    "start": "1314279",
    "end": "1320240"
  },
  {
    "text": "it to average it over long periods of time of minutes in order to make good decisions to get a good signal and the",
    "start": "1320240",
    "end": "1327240"
  },
  {
    "text": "problem is that by the time the system finally makes a decision a lot of damage",
    "start": "1327240",
    "end": "1332520"
  },
  {
    "text": "has already been done and so that's the major disadvantage of this these",
    "start": "1332520",
    "end": "1338279"
  },
  {
    "text": "systems uh another disadvantage is the need to create these profiles so these",
    "start": "1338279",
    "end": "1343600"
  },
  {
    "text": "systems have the centralized component that uh takes the measurements from all",
    "start": "1343600",
    "end": "1348720"
  },
  {
    "text": "tasks in the cluster Aggregates it and then distributes it back which adds to complexity however according to google",
    "start": "1348720",
    "end": "1354720"
  },
  {
    "text": "even with this complexity uh in this 2013 paper they published as of the paper writing it had been deployed to",
    "start": "1354720",
    "end": "1361480"
  },
  {
    "text": "all of Google's shared compute infrastructure so",
    "start": "1361480",
    "end": "1366640"
  },
  {
    "text": "internally okay let's move to the second type of system latency control so this system measures application layer",
    "start": "1367080",
    "end": "1374360"
  },
  {
    "text": "latencies and this is great because this is what we're trying to optimize we want to hit our SLO targets right the system",
    "start": "1374360",
    "end": "1381320"
  },
  {
    "text": "then computes the percent of the SLO Target for each application that we run and then finds so maybe uh I'll give",
    "start": "1381320",
    "end": "1389400"
  },
  {
    "text": "an example right like maybe one application has 50% of its Target SLO Target P95 per P95 and another one is",
    "start": "1389400",
    "end": "1397320"
  },
  {
    "text": "98% so it's uh of its Target SLO so it's about to breach its SLO so there's a",
    "start": "1397320",
    "end": "1402799"
  },
  {
    "text": "fast one and a slow task and this system chooses the fastest task and the slowest task and then moves resources from the",
    "start": "1402799",
    "end": "1410520"
  },
  {
    "text": "fast to the slow so think about it as like a Robin Hood allocator right so it takes from the fast gives to the",
    "start": "1410520",
    "end": "1418880"
  },
  {
    "text": "slow um so the the problem here is that",
    "start": "1418880",
    "end": "1425440"
  },
  {
    "text": "application related is also noisy uh your application might be making Downstream calls to a database or",
    "start": "1425440",
    "end": "1432559"
  },
  {
    "text": "another microservice and really there's a lot of variability in processing each request maybe requests are long take",
    "start": "1432559",
    "end": "1438080"
  },
  {
    "text": "longer or shorter so you really need the averaging so it's another like similar to the CPI that's a disadvantage uh but",
    "start": "1438080",
    "end": "1445200"
  },
  {
    "text": "at least you don't need to create these profiles because you know it's a good measurement because you know what the target SLO is that you're trying to",
    "start": "1445200",
    "end": "1452520"
  },
  {
    "text": "hit and uh another disadvantage is usually it's really hard for organizations to expose latency in a",
    "start": "1452520",
    "end": "1458520"
  },
  {
    "text": "uniform way across the entire uh portfolio of applications that they have",
    "start": "1458520",
    "end": "1464200"
  },
  {
    "text": "so okay let's move to the third category which I call use control this these systems explicitly",
    "start": "1464200",
    "end": "1471760"
  },
  {
    "text": "measure cache utilization and memory bandwidth per application and then finds",
    "start": "1471760",
    "end": "1477080"
  },
  {
    "text": "applications that are using too much and limits those so here's an example with cash",
    "start": "1477080",
    "end": "1482320"
  },
  {
    "text": "allocation so the system measures the actual cache usage of applications and",
    "start": "1482320",
    "end": "1488279"
  },
  {
    "text": "it computes a fair share of what it thinks the allocation should be and maybe that fair share is proportional to",
    "start": "1488279",
    "end": "1494600"
  },
  {
    "text": "the number of milor in the CPU requests right proportional to the size of the",
    "start": "1494600",
    "end": "1500000"
  },
  {
    "text": "workload the system then applies a similarity function to compare the actual and fair locations if they're",
    "start": "1500000",
    "end": "1507000"
  },
  {
    "text": "close together enough then you don't need to do anything but if they're far then the system limits the the",
    "start": "1507000",
    "end": "1516799"
  },
  {
    "text": "applications that use more than their fair share to their fair share the major uh issue here is do we",
    "start": "1516799",
    "end": "1524760"
  },
  {
    "text": "really want Fair location maybe some of my applications need a lot more help in order to hit their",
    "start": "1524760",
    "end": "1531559"
  },
  {
    "text": "slos uh but remember that the goal here is to limit the these egregious",
    "start": "1531559",
    "end": "1538840"
  },
  {
    "text": "behaviors by Noisy Neighbor where they drive the system to this High CPI High T latency right and just ruin the",
    "start": "1538840",
    "end": "1545320"
  },
  {
    "text": "performance for everybody so just by making sure that those egregious noisy",
    "start": "1545320",
    "end": "1550640"
  },
  {
    "text": "neighbors are limited to their fair share you can ensure that the tail latency is reduced dramatically for",
    "start": "1550640",
    "end": "1556480"
  },
  {
    "text": "everybody else so they can hit their slos so you get a you get practically all of the benefit just by doing",
    "start": "1556480",
    "end": "1564200"
  },
  {
    "text": "fairness these systems are very easy to build they don't require these centralized components uh and you",
    "start": "1565559",
    "end": "1571279"
  },
  {
    "text": "measure the resources that you actually control so uh it's easy to reason about",
    "start": "1571279",
    "end": "1577480"
  },
  {
    "text": "these systems and they can react very quickly to changes uh according to this paper uh in",
    "start": "1577480",
    "end": "1583559"
  },
  {
    "text": "the bottom here from Alibaba uh in 2020 uh this had been deployed to an order of",
    "start": "1583559",
    "end": "1589559"
  },
  {
    "text": "1 million cores in production for over two years back in",
    "start": "1589559",
    "end": "1595679"
  },
  {
    "text": "2020 so to summarize we have these three categories of mitigation systems if you",
    "start": "1595840",
    "end": "1601240"
  },
  {
    "text": "read papers you'll find that there are a lot of good ideas out there and in fact there are enough good ideas that we can",
    "start": "1601240",
    "end": "1607320"
  },
  {
    "text": "Cobble together a good general purpose system uh for kubernetes and especially I like these",
    "start": "1607320",
    "end": "1613720"
  },
  {
    "text": "Third Kind of systems the usage control because they're simple and effective and I think as a community we should go",
    "start": "1613720",
    "end": "1620679"
  },
  {
    "text": "towards these type three systems all right the last part of our",
    "start": "1620679",
    "end": "1626440"
  },
  {
    "text": "talk is what are next steps for the kubernetes community how can we uh progress in order to get the benefit",
    "start": "1626440",
    "end": "1633000"
  },
  {
    "text": "from Noisy Neighbor medidation how would a kubernetes",
    "start": "1633000",
    "end": "1638039"
  },
  {
    "text": "deployment look you'd have a demon set deploying these two components one is the memory collector",
    "start": "1638039",
    "end": "1645279"
  },
  {
    "text": "that measures resource utilization it measures the cache utilization the memory bandwidth utilization and maybe",
    "start": "1645279",
    "end": "1651640"
  },
  {
    "text": "CPI per application and then the interference controller takes these measurements",
    "start": "1651640",
    "end": "1657760"
  },
  {
    "text": "makes decision who to throttle and configures Linux resource control so",
    "start": "1657760",
    "end": "1663360"
  },
  {
    "text": "just what we saw in the in in the third type of system in fact there is a third",
    "start": "1663360",
    "end": "1669640"
  },
  {
    "text": "component that we need to implement which is observability where you take the memory",
    "start": "1669640",
    "end": "1675000"
  },
  {
    "text": "metrics and you expose them to different observability backends in fact I think we should start with",
    "start": "1675000",
    "end": "1681799"
  },
  {
    "text": "observability and the reason is in practice to get adoption we need",
    "start": "1681799",
    "end": "1687919"
  },
  {
    "text": "operators uh to have uh a first a a good idea of the benefit that they're going",
    "start": "1687919",
    "end": "1694080"
  },
  {
    "text": "to experience if they deploy another controller to the system and second if anything goes wrong in the cluster not",
    "start": "1694080",
    "end": "1700159"
  },
  {
    "text": "related to this controller maybe operators really need to know that this controller is behaving as expected and",
    "start": "1700159",
    "end": "1707399"
  },
  {
    "text": "not causing the that uh you know incident and so I've started a project",
    "start": "1707399",
    "end": "1714120"
  },
  {
    "text": "called the memory collector there's a GitHub repo over here on the slides and I would like to invite everybody here to",
    "start": "1714120",
    "end": "1720720"
  },
  {
    "text": "participate if you're interested if you want to make re repository contributions we are looking for contributors to The",
    "start": "1720720",
    "end": "1727399"
  },
  {
    "text": "Collector and also would like to develop a set of test beds and benchmarks uh for kubernetes where we can test the",
    "start": "1727399",
    "end": "1735880"
  },
  {
    "text": "correctness of The Collector and also show memory Noisy Neighbor as a demo if even if you don't have time to",
    "start": "1735880",
    "end": "1743039"
  },
  {
    "text": "contribute if you want to hear more or if you can uh you think you can deploy",
    "start": "1743039",
    "end": "1748279"
  },
  {
    "text": "the memory collector to maybe test or staging environments um we we'd love to hear from you either way and the idea is",
    "start": "1748279",
    "end": "1755039"
  },
  {
    "text": "let's make sure that this collector Works across the widest variety of environments",
    "start": "1755039",
    "end": "1760519"
  },
  {
    "text": "possible uh so to finish um I hope we can drive the community to these these",
    "start": "1760519",
    "end": "1766200"
  },
  {
    "text": "better efficiencies and lower tail latencies and really allow the performance work that Engineers do to shine through and",
    "start": "1766200",
    "end": "1773480"
  },
  {
    "text": "so thank you for coming and I think we have time for a couple of questions uh please come to the microphones thank",
    "start": "1773480",
    "end": "1781780"
  },
  {
    "text": "[Applause]",
    "start": "1781780",
    "end": "1787399"
  },
  {
    "text": "you hi hello yeah U thanks for the Fantastic",
    "start": "1787399",
    "end": "1792799"
  },
  {
    "text": "talk uh it was great so um are you factoring networking out of this",
    "start": "1792799",
    "end": "1798320"
  },
  {
    "text": "equation because quality of service in kubernetes networking is",
    "start": "1798320",
    "end": "1804240"
  },
  {
    "text": "non-existent today I guess good question there is so question as far as I I hear",
    "start": "1804240",
    "end": "1810640"
  },
  {
    "text": "it is you know there are there noisy neighbors right maybe networking in fact",
    "start": "1810640",
    "end": "1815760"
  },
  {
    "text": "if you look at the the Google 2015 paper it explores more than just these two noisy neighbors it has Network Noisy",
    "start": "1815760",
    "end": "1822240"
  },
  {
    "text": "Neighbor power Noisy Neighbor where you have some cores uh heating up your processors and then the the whole",
    "start": "1822240",
    "end": "1828559"
  },
  {
    "text": "processor needs to cool down so it lowers the frequency and everybody suffers uh and it has hyperthreading uh",
    "start": "1828559",
    "end": "1834320"
  },
  {
    "text": "Noisy Neighbor where you have two workloads running on this on two hyper threads of of the same cores and competing for for physical resources um",
    "start": "1834320",
    "end": "1841039"
  },
  {
    "text": "and so yes you probably want to solve all of them I think memory Noisy Neighbor is one uh arguably most",
    "start": "1841039",
    "end": "1848640"
  },
  {
    "text": "egregious it seems at this point and so it and and unknown you know the it's not",
    "start": "1848640",
    "end": "1854960"
  },
  {
    "text": "visible and so I think we should t it first although you know maybe we should",
    "start": "1854960",
    "end": "1860639"
  },
  {
    "text": "tackle all I think eventually we should tackle all of them I'm well let's work through them and in uh in",
    "start": "1860639",
    "end": "1867120"
  },
  {
    "text": "sequence um the second question is one of your proposed solution basically implements a throttler that kind of",
    "start": "1867120",
    "end": "1874159"
  },
  {
    "text": "looks at Implement what sorry um hello yeah so uh in one of your last slides",
    "start": "1874159",
    "end": "1880559"
  },
  {
    "text": "you mentioned that the proposed solution implements a throttler that kind of throttles um Bad actors right um but",
    "start": "1880559",
    "end": "1889399"
  },
  {
    "text": "wouldn't uh cluster operators need to manage the thresholds on how often you",
    "start": "1889399",
    "end": "1895480"
  },
  {
    "text": "run the throttling mechanism to like is it a system that would just",
    "start": "1895480",
    "end": "1901399"
  },
  {
    "text": "work automatically or are we just introducing another Knob uh like i' I've",
    "start": "1901399",
    "end": "1907360"
  },
  {
    "text": "seen some papers from a networking perspective that try to do this uh from Google and meta uh they try to do the",
    "start": "1907360",
    "end": "1914519"
  },
  {
    "text": "same thing but I don't know if it's a general purpose solution yeah so the question is does this",
    "start": "1914519",
    "end": "1921080"
  },
  {
    "text": "require configuration or or kind of is there a knob that you need to really",
    "start": "1921080",
    "end": "1926480"
  },
  {
    "text": "tune in order to get the system to work right and I believe that for memory Noisy Neighbor there shouldn't be a knob",
    "start": "1926480",
    "end": "1933080"
  },
  {
    "text": "we should be able to build fully automatic systems that uh do the right thing and maybe adapting every 1",
    "start": "1933080",
    "end": "1939840"
  },
  {
    "text": "millisecond or every 100 microseconds you asked I think part of your question was do you need to choose how often to",
    "start": "1939840",
    "end": "1946600"
  },
  {
    "text": "adjust these resources I I think the decision can be made locally to the node at least to begin with and to and the",
    "start": "1946600",
    "end": "1953120"
  },
  {
    "text": "frequency would be either autotuned or kind of a fixed low number and that would work very well uh without the need",
    "start": "1953120",
    "end": "1960639"
  },
  {
    "text": "for autot tuning or part indeed any participation from the scheduler cool",
    "start": "1960639",
    "end": "1966399"
  },
  {
    "text": "yeah thank you um thanks for the talk again really",
    "start": "1966399",
    "end": "1972000"
  },
  {
    "text": "appreciate it um I'm curious about the feedback to the teams we're throttling so how how does that get back",
    "start": "1972000",
    "end": "1979279"
  },
  {
    "text": "into them is there any uh talks about what we should be doing because there's some training aspects we feel like are",
    "start": "1979279",
    "end": "1984679"
  },
  {
    "text": "missing in terms of like building Cloud native apps in the right way and some of what we see from noisy neighbors is",
    "start": "1984679",
    "end": "1991120"
  },
  {
    "text": "related to some of that and so what's the feedback do they talk anything about the papers or have any thoughts about",
    "start": "1991120",
    "end": "1996720"
  },
  {
    "text": "how you give that feedback to the teams and what training we might need to provide and what ways that how that all",
    "start": "1996720",
    "end": "2002320"
  },
  {
    "text": "works yes thank you for that question so the question is do developers need to",
    "start": "2002320",
    "end": "2008200"
  },
  {
    "text": "have access to uh their their applications behavior and should would they need to adjust their behavior and",
    "start": "2008200",
    "end": "2014840"
  },
  {
    "text": "how do we make the how do we close that Loop um so I think to begin with if you",
    "start": "2014840",
    "end": "2019880"
  },
  {
    "text": "have a garbage collected workload that's not something that developers usually",
    "start": "2019880",
    "end": "2025000"
  },
  {
    "text": "want or will exert uh influence over and so for garbage collected workloads if they take 100 milliseconds or 110",
    "start": "2025000",
    "end": "2031279"
  },
  {
    "text": "milliseconds and they're just throttle a little bit uh to save the performance of everybody else that you even don't need",
    "start": "2031279",
    "end": "2037399"
  },
  {
    "text": "to report to back to users so you can get a lot there's a lot of low hanging fruit there uh but I think maybe as a",
    "start": "2037399",
    "end": "2045080"
  },
  {
    "text": "second step um this type of collection should be integrated into profilers so",
    "start": "2045080",
    "end": "2050398"
  },
  {
    "text": "that uh application developers if they're doing something egregious could find it I don't know of any kind of",
    "start": "2050399",
    "end": "2056919"
  },
  {
    "text": "specific behavior that application developers kind of would would find maybe there are once we instrument if we",
    "start": "2056919",
    "end": "2064320"
  },
  {
    "text": "have visibility we'd be able to find these Maybe uh so last question uh a very insightful",
    "start": "2064320",
    "end": "2072240"
  },
  {
    "text": "talk thank you for that um as a cluster operator I cannot go chase all of my",
    "start": "2072240",
    "end": "2077560"
  },
  {
    "text": "developers essentially are there metrics which are presently being exposed or",
    "start": "2077560",
    "end": "2082720"
  },
  {
    "text": "would be in the near future for pod and even node level which Let Me profile how",
    "start": "2082720",
    "end": "2088560"
  },
  {
    "text": "much memory bandwidth is being used so that I have an insight about what's",
    "start": "2088560",
    "end": "2094240"
  },
  {
    "text": "going on and then make decisions like I could put a certain lot of workloads in a certain place or actually go Target",
    "start": "2094240",
    "end": "2101680"
  },
  {
    "text": "those developers it's like can we do something about some of this so the question is as an operator",
    "start": "2101680",
    "end": "2107880"
  },
  {
    "text": "can you get metrics about how my system is performing so I can make decisions maybe anti- Affinity if you have two",
    "start": "2107880",
    "end": "2113680"
  },
  {
    "text": "workloads that are competing for memory bandwidth I don't want them on the same noes yes that is part of what uh Google",
    "start": "2113680",
    "end": "2119599"
  },
  {
    "text": "published that they did initially uh before they I think before they had more automated uh actually I think that you",
    "start": "2119599",
    "end": "2126520"
  },
  {
    "text": "know that that is one of the techniques that were published and",
    "start": "2126520",
    "end": "2132640"
  },
  {
    "text": "uh definitely kind of visibil is what you want to start with and this is why I'm advocating let's build this uh this",
    "start": "2133359",
    "end": "2140119"
  },
  {
    "text": "uh collector so that we can see what's happening thank you for the question and thanks everybody for coming uh please uh",
    "start": "2140119",
    "end": "2148440"
  },
  {
    "text": "rank it and as a talk thank you",
    "start": "2148440",
    "end": "2153760"
  }
]