[
  {
    "start": "0",
    "end": "121000"
  },
  {
    "text": "I said howdy all right I love it when the audience shows up okay we're gonna",
    "start": "0",
    "end": "5220"
  },
  {
    "text": "talk about cloud native build packs today this is a tool for generating docker images from your application",
    "start": "5220",
    "end": "11219"
  },
  {
    "text": "source code but it's a higher level abstraction than docker file and it's",
    "start": "11219",
    "end": "16470"
  },
  {
    "text": "really oriented towards application developers my name is Joe Kutner I go by code finger online I work at Heroku",
    "start": "16470",
    "end": "23670"
  },
  {
    "text": "where I am an architect on the language's team I work a lot in the Java ecosystem and I run the Java experience",
    "start": "23670",
    "end": "29490"
  },
  {
    "text": "on Heroku with me is my more stylish friend and co-worker Terence Lee",
    "start": "29490",
    "end": "35880"
  },
  {
    "text": "he works at Heroku two he has been there longer than me and co-created Heroku",
    "start": "35880",
    "end": "40920"
  },
  {
    "text": "build packs a number of years ago we're gonna talk about that in a little bit so",
    "start": "40920",
    "end": "46110"
  },
  {
    "text": "yeah we both work at Heroku which is a platform as-a-service it's often considered the first platform as a",
    "start": "46110",
    "end": "51120"
  },
  {
    "text": "service we kind of created that type of cloud product we host more than 7",
    "start": "51120",
    "end": "56730"
  },
  {
    "text": "million applications and handle roughly 23 billion requests per day we created a",
    "start": "56730",
    "end": "62850"
  },
  {
    "text": "technology called build packs that we're gonna talk about today about it's a little bit about its history and a",
    "start": "62850",
    "end": "68490"
  },
  {
    "text": "little bit where about where we want to take it so we're all here at cute guns",
    "start": "68490",
    "end": "73979"
  },
  {
    "text": "and cuber 90s is a great platform to run and orchestrate images but like what is",
    "start": "73979",
    "end": "80310"
  },
  {
    "text": "the there's no like kind of prescriptive way and how you actually build them right kubernetes does not provide a way",
    "start": "80310",
    "end": "86189"
  },
  {
    "text": "a sanitized way to actually you construct the images they just care about getting the images and actually running them and they're really only the",
    "start": "86189",
    "end": "93210"
  },
  {
    "text": "game in town is docker right like Dockers kind of the standardized way that people kind of started this whole",
    "start": "93210",
    "end": "98579"
  },
  {
    "text": "trend of containers in this ecosystem and it's the main way that most people",
    "start": "98579",
    "end": "103770"
  },
  {
    "text": "build images it's the state of the art of how people do things today you know you take a docker file and you actually",
    "start": "103770",
    "end": "108960"
  },
  {
    "text": "build it with the docker toiling and so to start off this talk we're gonna go",
    "start": "108960",
    "end": "114450"
  },
  {
    "text": "through and containerize really simple ruby application and then kind of move on from there and so if you go on the",
    "start": "114450",
    "end": "122009"
  },
  {
    "start": "121000",
    "end": "121000"
  },
  {
    "text": "internet you go search for how you go about and doing this you probably end up with some file that looks pretty close",
    "start": "122009",
    "end": "127049"
  },
  {
    "text": "to this right like you inherit from one of the official Ruby four images that provides you with Ruby",
    "start": "127049",
    "end": "133260"
  },
  {
    "text": "runtime you're gonna copy your app source code into the container you need to install your dependencies if it's a",
    "start": "133260",
    "end": "139410"
  },
  {
    "text": "web app you want to be able to expose a port into the container itself so you can actually get stuff out of it and",
    "start": "139410",
    "end": "145709"
  },
  {
    "text": "then you need the command that's actually going to run the Ruby application itself and with that we use",
    "start": "145709",
    "end": "153480"
  },
  {
    "start": "151000",
    "end": "151000"
  },
  {
    "text": "the CLI from docker run docker build and it goes ahead and for every single step",
    "start": "153480",
    "end": "158760"
  },
  {
    "text": "we'll produce and you know a layer for everything that it's done and at the end of it you get a docker image that you",
    "start": "158760",
    "end": "165660"
  },
  {
    "text": "can run with docker tooling you can run with kubernetes like it's now a portable format that you can actually do stuff",
    "start": "165660",
    "end": "171239"
  },
  {
    "text": "with so pretty simple that was a pretty contrived example right you're not actually going to ship that thing to",
    "start": "171239",
    "end": "177000"
  },
  {
    "text": "production so if you're running a ruby application you're probably gonna be building something in rails most likely",
    "start": "177000",
    "end": "182519"
  },
  {
    "text": "Ruby on Rails is kind of the major web framework and the Ruby ecosystem and so if we want to go and extend that",
    "start": "182519",
    "end": "188910"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "existing example for rails what does that look like so if I'm building a web",
    "start": "188910",
    "end": "194940"
  },
  {
    "text": "application there's gonna be I need to install some other dependencies that aren't part of the base docker image",
    "start": "194940",
    "end": "200670"
  },
  {
    "text": "right so I'm gonna install nodejs because I want to be able to compile assets which I'm doing later down with",
    "start": "200670",
    "end": "207180"
  },
  {
    "text": "the rake assets precompile but I need a node runtime to actually go and compile that right like all this day of the art front-end stuff has done node",
    "start": "207180",
    "end": "213870"
  },
  {
    "text": "I also need to be able to talk to a database of some sort right so in this example we're gonna be doing stuff with",
    "start": "213870",
    "end": "219600"
  },
  {
    "text": "Postgres so I'm install at PQ the dev headers because in Ruby those are native extensions that link against development",
    "start": "219600",
    "end": "226170"
  },
  {
    "text": "headers and none of that is part of the base image we need install that and and of course actually build any native",
    "start": "226170",
    "end": "231810"
  },
  {
    "text": "extensions I need to have build a central to actually get GCC and I don't make an and all that stuff so with those",
    "start": "231810",
    "end": "237120"
  },
  {
    "text": "things I now have all the dependencies to actually go about and actually compile a full rails app and then the",
    "start": "237120",
    "end": "243150"
  },
  {
    "text": "asset compilation that I touched on before will actually build the assets that can get statically served and then",
    "start": "243150",
    "end": "250230"
  },
  {
    "start": "249000",
    "end": "249000"
  },
  {
    "text": "with that image we can actually run this thing in production but you probably don't actually want to use that image as",
    "start": "250230",
    "end": "257190"
  },
  {
    "text": "like kind of what you're using to deploy to production right like there's some other best practices if if you've been",
    "start": "257190",
    "end": "262320"
  },
  {
    "text": "doing docker stuff for a while that you're probably used to have like reducing the image size making sure incremental builds are faster and kind",
    "start": "262320",
    "end": "269260"
  },
  {
    "text": "of think about the different decisions when you're picking your various space images and whatnot so like I was saying",
    "start": "269260",
    "end": "276220"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "before like each step produces a layer inside of docker and you know one of the",
    "start": "276220",
    "end": "281230"
  },
  {
    "text": "distinctions there is that with the docker file layers yet this nice caching",
    "start": "281230",
    "end": "286420"
  },
  {
    "text": "thing that docker has done where basically if there are changes that happen at a specific layer all the",
    "start": "286420",
    "end": "292090"
  },
  {
    "text": "layers above it you just get to use all the existing layers of it but any change that happens afterwards you you bust the",
    "start": "292090",
    "end": "298870"
  },
  {
    "text": "cache and have to rerun those steps from that one in below and so what we can do",
    "start": "298870",
    "end": "305680"
  },
  {
    "start": "303000",
    "end": "303000"
  },
  {
    "text": "with like image sizes is like when we're installing dependencies you probably want to go ahead and actually like clean up your app stuff because you don't",
    "start": "305680",
    "end": "311770"
  },
  {
    "text": "actually need or want that in your production image at the end and similarly with like assets precompiled",
    "start": "311770",
    "end": "317140"
  },
  {
    "text": "you're gonna cache there's gonna be a cache that's used normally when you're doing development to speed up asset",
    "start": "317140",
    "end": "322660"
  },
  {
    "text": "compilation between subsequent builds but we don't need though that cache like in our resulting docker image so within",
    "start": "322660",
    "end": "328780"
  },
  {
    "text": "those steps and or not to create existing layers because the more layers you have the more layers you have to pull down we're gonna add that into one",
    "start": "328780",
    "end": "335470"
  },
  {
    "text": "single step for each thing that we're doing here so that will make the step smaller and in addition in order to",
    "start": "335470",
    "end": "341440"
  },
  {
    "start": "338000",
    "end": "338000"
  },
  {
    "text": "speed builds this is a I think it's a simple hack that every language does but for like dependency management you need",
    "start": "341440",
    "end": "346750"
  },
  {
    "text": "you want to extract that into a separate step so most of the time you're not adding new dependencies so you don't want to actually rerun all the defense",
    "start": "346750",
    "end": "353470"
  },
  {
    "text": "the installation every time you change any app source code so we're gonna hoist that into a step above the rest of",
    "start": "353470",
    "end": "359290"
  },
  {
    "text": "adding the rest of our application so that should speed up our incremental",
    "start": "359290",
    "end": "364450"
  },
  {
    "start": "362000",
    "end": "362000"
  },
  {
    "text": "builds for our day-to-day development and in addition on this first slide we",
    "start": "364450",
    "end": "370630"
  },
  {
    "text": "have that command from Ruby and there's actually a bunch of decisions you have to make with that because the image that",
    "start": "370630",
    "end": "375910"
  },
  {
    "text": "your base image that you're inheriting from actually has a bunch of implications right so if we go to the doctor hub page there's even first a",
    "start": "375910",
    "end": "382780"
  },
  {
    "text": "single line there's like five or six different images that you can pick from and each of these like if you're doing",
    "start": "382780",
    "end": "388060"
  },
  {
    "text": "Alpine because it's like a small image or Debian Slim or something or Debian stretch you know there's different",
    "start": "388060",
    "end": "394840"
  },
  {
    "text": "security implications of how those opera systems get run and how those patches get applied and how you actually keep track of those so",
    "start": "394840",
    "end": "400670"
  },
  {
    "text": "those are things that you have to keep track of as you're making decisions for your docker file and so here's a quote",
    "start": "400670",
    "end": "408680"
  },
  {
    "text": "from a friend of mine he runs CCO of con box and Tom box is basically a docker platform of service and you know like",
    "start": "408680",
    "end": "416660"
  },
  {
    "text": "all these things I talked about or all these decisions you have to make as part of your build pipeline right and so even for a person who runs a pass for a",
    "start": "416660",
    "end": "423710"
  },
  {
    "text": "docker platform basically the hardest part is actually writing a quality docker file that produces a small image",
    "start": "423710",
    "end": "429470"
  },
  {
    "text": "that is fast right there's all these best practices you have to keep track of",
    "start": "429470",
    "end": "435010"
  },
  {
    "start": "435000",
    "end": "435000"
  },
  {
    "text": "yeah so despite being the state of the art for generating docker images docker file has some some shortcomings and this",
    "start": "435010",
    "end": "442490"
  },
  {
    "text": "really stems from the fact that it's not Apple where it doesn't know anything",
    "start": "442490",
    "end": "447770"
  },
  {
    "text": "about the context of your application the frameworks you're using what your application is doing and the result is",
    "start": "447770",
    "end": "452870"
  },
  {
    "text": "sort of an impedance mismatch between application developers and the tool they're using so this is really best",
    "start": "452870",
    "end": "458990"
  },
  {
    "text": "illustrated when it comes to maintenance or day2 operations so when you're using",
    "start": "458990",
    "end": "464270"
  },
  {
    "start": "459000",
    "end": "459000"
  },
  {
    "text": "docker file an application developer now has to be acutely aware of the operating system that they're running on and the",
    "start": "464270",
    "end": "470090"
  },
  {
    "text": "packages that it contains whereas you know before before docker that wasn't necessarily a concern so when there's a",
    "start": "470090",
    "end": "476870"
  },
  {
    "text": "vulnerability like meltdown where all of your operating systems need to be updated",
    "start": "476870",
    "end": "481970"
  },
  {
    "text": "you need to methodically go through your apps update their docker files and rebuild them we worked with a customer",
    "start": "481970",
    "end": "489530"
  },
  {
    "text": "who has about 40 applications and this process takes them more than three hours just to rebuild the applications not",
    "start": "489530",
    "end": "495530"
  },
  {
    "text": "even to roll them out to the fleet we also see this when it comes to combining",
    "start": "495530",
    "end": "501410"
  },
  {
    "text": "different types of runtimes and ecosystems so composability is a real weak point of docker file if you have",
    "start": "501410",
    "end": "509060"
  },
  {
    "text": "two docker images for example if I have my Ruby image that we kind of walked through and then I want to use Java for",
    "start": "509060",
    "end": "516500"
  },
  {
    "text": "something like to parse XML or to do something with Kafka I want to combine the open JDK image the official open JDK",
    "start": "516500",
    "end": "523010"
  },
  {
    "text": "image with the official Ruby image but the only mechanism I have to do that today",
    "start": "523010",
    "end": "528440"
  },
  {
    "text": "multistage builds so this is what that might start to look like I'd take my OpenJDK image I do my java maven stuff",
    "start": "528440",
    "end": "536540"
  },
  {
    "text": "and then I'd go to my Ruby image and I'd do a copy from and I'd copy that docker Java home directory but there's a",
    "start": "536540",
    "end": "542690"
  },
  {
    "text": "problem that docker Java home directory is actually a symlink and inside of that that directory or more symlinks and copy",
    "start": "542690",
    "end": "549830"
  },
  {
    "text": "from doesn't follow symlinks so I actually have to copy a bunch of other directories and I have to know what those directories are I have to copy my",
    "start": "549830",
    "end": "556940"
  },
  {
    "text": "certificate bundle and some configuration oh I also have to copy the binaries themselves from user bin so",
    "start": "556940",
    "end": "563210"
  },
  {
    "text": "there's a whole bunch of knowledge I need to have about what that image looks like multistage builds don't do anything",
    "start": "563210",
    "end": "569120"
  },
  {
    "text": "for environment variables so I have to manually set those environment variables from the previous stage as well",
    "start": "569120",
    "end": "576440"
  },
  {
    "text": "oh but I need my application stuff too so I also have to copy that target directory the output of the maven build",
    "start": "576440",
    "end": "582500"
  },
  {
    "text": "that is my dependencies in my compiled code I've got to copy that into my main Ruby image and I want to do it in a way",
    "start": "582500",
    "end": "588380"
  },
  {
    "text": "that doesn't bust the cache that doesn't invalidate all the layers if I update you know my maven or Java okay so this",
    "start": "588380",
    "end": "595520"
  },
  {
    "text": "will work oh oh but there's one more problem the JDK is meant for compiling code and and doing things you know at",
    "start": "595520",
    "end": "601790"
  },
  {
    "text": "build time but I don't want it in production because that'll increase my security surface area so I actually want",
    "start": "601790",
    "end": "606980"
  },
  {
    "text": "the JRE so I need a stage for the JDK I run maven compile Java and then I go to",
    "start": "606980",
    "end": "612350"
  },
  {
    "text": "the JRE and that's the one that I copy in and now I have composed I've composed",
    "start": "612350",
    "end": "617960"
  },
  {
    "text": "these two images so as you can see this is kind of a cumbersome process it requires a lot of knowledge about the",
    "start": "617960",
    "end": "623590"
  },
  {
    "text": "other image that you're trying to compose with so just to recap the",
    "start": "623590",
    "end": "629860"
  },
  {
    "start": "627000",
    "end": "627000"
  },
  {
    "text": "composability of multistage builds lacks support for environment variables symlinks and it really only allows you",
    "start": "629860",
    "end": "635870"
  },
  {
    "text": "to copy specific directories you can't copy like arbitrarily named directories",
    "start": "635870",
    "end": "641090"
  },
  {
    "text": "maybe something that's based off of a UUID or an incremental number the end",
    "start": "641090",
    "end": "647870"
  },
  {
    "start": "647000",
    "end": "647000"
  },
  {
    "text": "result is really a leaky abstraction in order for an application developer to write a docker file they need to",
    "start": "647870",
    "end": "654500"
  },
  {
    "text": "understand intimately how docker file works how it produces these layers and what the underlying mechanisms are doing",
    "start": "654500",
    "end": "660970"
  },
  {
    "text": "results is just a poor tool for people who really just want to write code build features and deliver value for their",
    "start": "660970",
    "end": "667149"
  },
  {
    "text": "customers it also mixes operational concerns with application concerns so",
    "start": "667149",
    "end": "674759"
  },
  {
    "text": "given these deficiencies what are the alternatives we're starting to see a few things come about",
    "start": "674759",
    "end": "680980"
  },
  {
    "text": "there's jib which is a Java specific tool it integrates with maven for producing docker images from your maven",
    "start": "680980",
    "end": "687490"
  },
  {
    "text": "build there's FTL faster than light from Google and of course there's build packs which we're going to talk about so cloud",
    "start": "687490",
    "end": "697029"
  },
  {
    "text": "native built packs is a project that is part of the cloud native sandbox more fairly recently but for we've been",
    "start": "697029",
    "end": "705040"
  },
  {
    "text": "working on this project probably a little over a year now at this point and there's been contributions from both Heroku and the pit ville side and you",
    "start": "705040",
    "end": "714189"
  },
  {
    "text": "know like we've been bringing kind of expertise of us running built packs in production for a long time together which is exciting and Joe was talking",
    "start": "714189",
    "end": "724420"
  },
  {
    "text": "about basically like all the things that you kind of didn't have to worry about before the container days and you know",
    "start": "724420",
    "end": "731259"
  },
  {
    "text": "Heroku was this past that really got started with this one command get pushed rogue master and what was the beauty of",
    "start": "731259",
    "end": "737500"
  },
  {
    "text": "this was back in the day like this was when if you kind of go back in time you have to think about like oh I went and",
    "start": "737500",
    "end": "744639"
  },
  {
    "text": "like SSH into my production server pulled down my code ran my product and stuff like on production and one of the",
    "start": "744639",
    "end": "750250"
  },
  {
    "text": "really transformative things about git push real master is it set up this part where you would do these independent",
    "start": "750250",
    "end": "756160"
  },
  {
    "text": "builds right like so Heroku would have a separate build service that build it and then you'd run this thing in production they were two",
    "start": "756160",
    "end": "761829"
  },
  {
    "text": "separate machines and for there's all these concerns to talking about when you're running docker for all of our",
    "start": "761829",
    "end": "767949"
  },
  {
    "text": "customers back like rewind like eight issuer's ago this was the only command they had to do to take their app source",
    "start": "767949",
    "end": "774490"
  },
  {
    "text": "code that they had working on the machine run this command and they would have it running in the cloud and so they",
    "start": "774490",
    "end": "780069"
  },
  {
    "text": "didn't have to worry about all the things that we just talked about with docker file and at the heart of that is this technology that we created in 2011",
    "start": "780069",
    "end": "786370"
  },
  {
    "text": "called bill packs and we used it to basically launch our polyglot platform so we went from a ruby specific platform",
    "start": "786370",
    "end": "792819"
  },
  {
    "text": "to a platform that really any language and the way we did that was built packs were a way that we",
    "start": "792819",
    "end": "799509"
  },
  {
    "text": "could have this opinionated app aware source rustic way to build your applications so you provide your apps",
    "start": "799509",
    "end": "804730"
  },
  {
    "text": "source code and the build pack would do all the language specific things that we needed to kind of monde your app source",
    "start": "804730",
    "end": "810910"
  },
  {
    "text": "code into a artifact that we could actually run on our machines and so we would have Bill pack specific for at",
    "start": "810910",
    "end": "817329"
  },
  {
    "text": "this point we have six support languages but it would you would do like we'd have one for Ruby for node Python Java etc",
    "start": "817329",
    "end": "823930"
  },
  {
    "text": "and the way Bill packs work is it's made up a Bill pack is really just made up of",
    "start": "823930",
    "end": "829930"
  },
  {
    "start": "825000",
    "end": "825000"
  },
  {
    "text": "three different files and so you inside of a bin folder you have detect compile and release and the text simply just",
    "start": "829930",
    "end": "835899"
  },
  {
    "text": "decides if we need to run this Bill pack or not so we can run this thing and determine if this is a ruby app if this",
    "start": "835899",
    "end": "841930"
  },
  {
    "text": "is a Java app etc the compile would do the bulk of the work of actually going and fetching the runtime the compilers",
    "start": "841930",
    "end": "848680"
  },
  {
    "text": "and selling your dependencies and all that stuff and then release goes and actually just sets up other metadata",
    "start": "848680",
    "end": "854230"
  },
  {
    "text": "about application right so you could set like default commands that you would need to run so I don't have to nestle go",
    "start": "854230",
    "end": "860350"
  },
  {
    "text": "ahead and kind of hard code all those things into my application and once you're done running your application what you get we call it slug but it's",
    "start": "860350",
    "end": "866980"
  },
  {
    "text": "really just a read-only tarball other image that we can run on any single machine and so all this stuff runs on",
    "start": "866980",
    "end": "873399"
  },
  {
    "text": "what we call stack images or base images in the docker sense and at Roku they're",
    "start": "873399",
    "end": "878889"
  },
  {
    "text": "all based off of Ubuntu from canonical and we do them for all the LTS releases",
    "start": "878889",
    "end": "884829"
  },
  {
    "text": "so you know as you do upgrades for particular LTS release as long as you're staying within that release there's an ABI compact compatibility between the",
    "start": "884829",
    "end": "892480"
  },
  {
    "text": "tarball so what that means is that when we're doing stack image upgrades unlike docker we don't actually have to",
    "start": "892480",
    "end": "898209"
  },
  {
    "text": "go and rebuild the app itself right so we can just apply these updates to the",
    "start": "898209",
    "end": "903430"
  },
  {
    "text": "stack image and then take that existing tarball that we have and just run that on the new stack image and so we've been",
    "start": "903430",
    "end": "909790"
  },
  {
    "text": "doing this in production for our customers for eight years or so at this point and I think pitbulls probably",
    "start": "909790",
    "end": "915309"
  },
  {
    "text": "something similar like that as well and we've run into pretty much like no incidents from doing it this way because of the guarantees that these distros",
    "start": "915309",
    "end": "922329"
  },
  {
    "text": "provide us and so digging into like you know we did that room example so what does a Ruby",
    "start": "922329",
    "end": "928639"
  },
  {
    "start": "924000",
    "end": "924000"
  },
  {
    "text": "bill pact do in comparison right so it's gonna do a lot of the same stuff so instead of having a front line we're",
    "start": "928639",
    "end": "934790"
  },
  {
    "text": "gonna actually install the refinery for you we're gonna set the dependencies and kind of configure your application to",
    "start": "934790",
    "end": "940459"
  },
  {
    "text": "make sure it can run so all the stuff it has to do to make rails run like compiling assets saying if your database all those things that you would normally",
    "start": "940459",
    "end": "946399"
  },
  {
    "text": "have to do on top of your existing docker file the build packed handles that and it also does comprehensive",
    "start": "946399",
    "end": "952639"
  },
  {
    "text": "support right so this means that for the last seven plus years that it's been out",
    "start": "952639",
    "end": "957769"
  },
  {
    "text": "in production people have used this Bill pack like by itself right so we support",
    "start": "957769",
    "end": "963619"
  },
  {
    "text": "these various versions of Ruby on the platform from the latest release which is to 600 rc1 that launched a few weeks",
    "start": "963619",
    "end": "970369"
  },
  {
    "text": "ago so the same day it comes out you can run it on a rope using this Bill pack all the way down to these old releases",
    "start": "970369",
    "end": "976759"
  },
  {
    "text": "and you get to use the same build pack so normally in docker you would have to use a different docker image rebuild",
    "start": "976759",
    "end": "982399"
  },
  {
    "text": "your app right and on Heroku it means that when you're using a Bill pack as a user you don't have to worry about these",
    "start": "982399",
    "end": "987649"
  },
  {
    "text": "things you get to use the same build pack for all these different things you don't have to worry about like which",
    "start": "987649",
    "end": "993319"
  },
  {
    "text": "docker image going to use for that stuff and this has been used in production by millions of applications on the platform",
    "start": "993319",
    "end": "999049"
  },
  {
    "text": "today and in 2012 we actually open source the bill pack API all of our bill",
    "start": "999049",
    "end": "1005649"
  },
  {
    "text": "packs and this led to the creation of this entire build pack ecosystem so you know we support six eight languages",
    "start": "1005649",
    "end": "1012009"
  },
  {
    "text": "officially on the platform but there's been other stuff that we haven't done right like so elixir are our languages",
    "start": "1012009",
    "end": "1017589"
  },
  {
    "text": "that we don't officially support Heroku but you can run them on Heroku because other people have built those bill packs based off of the bill pack a PA in",
    "start": "1017589",
    "end": "1025000"
  },
  {
    "text": "addition there's like whole new ways to have different build pipelines right like the whole entire fund in the",
    "start": "1025000",
    "end": "1030038"
  },
  {
    "text": "ecosystem around node and and react and meteor and all those things you can just pull down a bill pack and use that to",
    "start": "1030039",
    "end": "1036100"
  },
  {
    "text": "build it there's tools like nginx or OpenCV that's OpenCV that you can just",
    "start": "1036100",
    "end": "1041379"
  },
  {
    "text": "add on to your build pack if you want those tools as part of it and finally there's also off-the-shelf software where people have built build packs",
    "start": "1041379",
    "end": "1047500"
  },
  {
    "text": "where you can just do simple configuration and not worried how to actually set up and run and spin up",
    "start": "1047500",
    "end": "1052510"
  },
  {
    "text": "those pieces of software on the platform and as part of that whole move there's",
    "start": "1052510",
    "end": "1059169"
  },
  {
    "start": "1056000",
    "end": "1056000"
  },
  {
    "text": "been other players in the space that have adopted kind of the bill pack way of how you actually would build apps",
    "start": "1059169",
    "end": "1064960"
  },
  {
    "text": "with it for instance Cloud Foundry is an on-prem solution where they use bill packs to",
    "start": "1064960",
    "end": "1071320"
  },
  {
    "text": "build their images that they run in production that you can run on Prem for you",
    "start": "1071320",
    "end": "1076750"
  },
  {
    "text": "you know gitlab has a thing for doing building stuff with that for CI and",
    "start": "1076750",
    "end": "1082360"
  },
  {
    "text": "other things where you can have custom fill packs and all the other providers on like actually adopting bill packs",
    "start": "1082360",
    "end": "1088210"
  },
  {
    "text": "actually run and be this unified build pipeline for doing that and so that was",
    "start": "1088210",
    "end": "1094059"
  },
  {
    "start": "1092000",
    "end": "1092000"
  },
  {
    "text": "bill packs but the reason we're here today is talk about cloud named bill packs and so we've talked about a lot of",
    "start": "1094059",
    "end": "1099909"
  },
  {
    "text": "time on like the benefits of the things you don't have to worry about because bill packs handle these things for you and cloud native bill packs is a project",
    "start": "1099909",
    "end": "1106120"
  },
  {
    "text": "that is about taking those benefits for app developers and combine them with the",
    "start": "1106120",
    "end": "1112210"
  },
  {
    "text": "benefits that we're used to today with all these great things with the container ecosystem so instead of",
    "start": "1112210",
    "end": "1117580"
  },
  {
    "text": "producing a tarball we're producing an OC I compliant docker image so that means you can use all the tooling with",
    "start": "1117580",
    "end": "1123610"
  },
  {
    "text": "the end result with the doctor runtime that you have today all the docker tooling you could run in in kubernetes",
    "start": "1123610",
    "end": "1129340"
  },
  {
    "text": "right and so that's kind of the big advantage and so we're not starting from scratch here we're taking the learnings",
    "start": "1129340",
    "end": "1136179"
  },
  {
    "text": "that both forth and people have had running bill paxton production for so long and bringing it into this container",
    "start": "1136179",
    "end": "1142360"
  },
  {
    "text": "ecosystem so we can allow developers to focus on building apps that deliver value to their customers and not as much",
    "start": "1142360",
    "end": "1148419"
  },
  {
    "text": "about operating and figuring out all these other concerns about actually constructing and building these images",
    "start": "1148419",
    "end": "1154380"
  },
  {
    "start": "1154000",
    "end": "1154000"
  },
  {
    "text": "all right cool story bro but I just want to run me some build packs right well so",
    "start": "1154380",
    "end": "1159640"
  },
  {
    "text": "services like Heroku and cloud foundry have been running build packs for quite a while but if you want to run cloud",
    "start": "1159640",
    "end": "1165669"
  },
  {
    "text": "native build packs yourself you can use the PAC CLI so this is a project or a tool that's part of the build packs that",
    "start": "1165669",
    "end": "1172330"
  },
  {
    "text": "I go cloud native build packs project it's a CLI tool you can install locally and it provides you with a few commands",
    "start": "1172330",
    "end": "1178659"
  },
  {
    "text": "that allow you to run build packs manage build packs and then operate on the",
    "start": "1178659",
    "end": "1183850"
  },
  {
    "text": "images that they generate so the most important command that's part of PAC",
    "start": "1183850",
    "end": "1189500"
  },
  {
    "text": "is the pack filled command so this is a command that will run a build pack and you run it in much the same way that you",
    "start": "1189500",
    "end": "1195530"
  },
  {
    "text": "would run docker build on a repository that had a docker file but pack build doesn't require any external",
    "start": "1195530",
    "end": "1201470"
  },
  {
    "text": "configuration such as a docker file or something like that you can run it against any arbitrary source code",
    "start": "1201470",
    "end": "1208130"
  },
  {
    "text": "repository and it will produce a docker image and that the image name is the",
    "start": "1208130",
    "end": "1213410"
  },
  {
    "text": "only required argument that it has so this is what it looks like to run PAC build against a java application so here",
    "start": "1213410",
    "end": "1220400"
  },
  {
    "text": "I'm running with the Heroku build packs builder image this is an image that contains the Heroku build packs and I",
    "start": "1220400",
    "end": "1227780"
  },
  {
    "text": "can use that locally to run against this app and it will detect that I have a java application",
    "start": "1227780",
    "end": "1233330"
  },
  {
    "text": "so it'll identify that and then it'll run the job of build pack install the JVM and do a whole bunch of Java things",
    "start": "1233330",
    "end": "1239330"
  },
  {
    "text": "the end result is an image so it exports the the things that came out of that",
    "start": "1239330",
    "end": "1245180"
  },
  {
    "text": "build process as layers in a docker image and most importantly there isn't",
    "start": "1245180",
    "end": "1251390"
  },
  {
    "text": "like a specific configuration in that app to specify that it was a java application that you had to do so this",
    "start": "1251390",
    "end": "1258650"
  },
  {
    "text": "blank slide is meant to tell you that that might be all you need if you just want to run build packs right so you",
    "start": "1258650",
    "end": "1264350"
  },
  {
    "text": "don't necessarily need to write a build pack or create a build pack to use build packs most build pack users are just",
    "start": "1264350",
    "end": "1271160"
  },
  {
    "text": "going to consume a third party or off-the-shelf build pack but we do want to go over how build packs work just so",
    "start": "1271160",
    "end": "1278600"
  },
  {
    "start": "1275000",
    "end": "1275000"
  },
  {
    "text": "you can better understand what their advantages are so the first step in the process of running a build pack is",
    "start": "1278600",
    "end": "1284090"
  },
  {
    "text": "detection during this phase the execution environment has each build",
    "start": "1284090",
    "end": "1289640"
  },
  {
    "text": "pack inspect your application source code to determine if it's appropriate for that build pack so in the case of",
    "start": "1289640",
    "end": "1295730"
  },
  {
    "text": "the Java build pack which I showed it's simply looking for the presence of a pom.xml file which indicates that this",
    "start": "1295730",
    "end": "1300800"
  },
  {
    "text": "is a maven project other build packs will look for a single file some more complicated build packs will look for",
    "start": "1300800",
    "end": "1307040"
  },
  {
    "text": "various environment variables to see if services are provisioned it depends the",
    "start": "1307040",
    "end": "1313310"
  },
  {
    "text": "next step is analyze where the build pack execution environment will take a an image from a previous build analyze",
    "start": "1313310",
    "end": "1321050"
  },
  {
    "text": "the configuration to determine if there are layers that can be reused in a subsequent build so on a fresh build or",
    "start": "1321050",
    "end": "1326600"
  },
  {
    "text": "our first build this doesn't apply the third step is building actually running the build packs to compile your code",
    "start": "1326600",
    "end": "1333309"
  },
  {
    "text": "download dependencies or whatever it may whatever may be necessary to prepare that application for running and",
    "start": "1333309",
    "end": "1339559"
  },
  {
    "text": "production and then finally it exports the results of that build as a docker image so taking a closer look at",
    "start": "1339559",
    "end": "1347390"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "detection if we have a builder that has multiple build packs we might have some",
    "start": "1347390",
    "end": "1353030"
  },
  {
    "text": "build packs that are optional like an APM build pack maybe a build pack for New Relic which could install like an",
    "start": "1353030",
    "end": "1359090"
  },
  {
    "text": "agent that instruments' your code and reports up to New Relic servers but you",
    "start": "1359090",
    "end": "1364250"
  },
  {
    "text": "might also have some required build packs like Ruby obviously if you have a ruby app and maybe nodejs",
    "start": "1364250",
    "end": "1369409"
  },
  {
    "text": "too because you need it to prepare your your JavaScript assets so each of these build packs will run their detection to",
    "start": "1369409",
    "end": "1376070"
  },
  {
    "text": "determine if they apply to this source code and they'll produce a build plan which is some metadata the next step is",
    "start": "1376070",
    "end": "1383690"
  },
  {
    "start": "1383000",
    "end": "1383000"
  },
  {
    "text": "analyze where we can again take a look at a previously built image and reuse",
    "start": "1383690",
    "end": "1388850"
  },
  {
    "text": "layers if possible just by looking at the configuration that's attached to it during the build step each build pack",
    "start": "1388850",
    "end": "1396559"
  },
  {
    "text": "that passed the detection phase will be run against the application source code each build pack can has its own cache",
    "start": "1396559",
    "end": "1404059"
  },
  {
    "text": "where it can put things that it doesn't want to have in the resulting image so for example the the Java build pack will",
    "start": "1404059",
    "end": "1411169"
  },
  {
    "text": "put your maven repository cache and into a cache layer so that it doesn't have to go into your production image build",
    "start": "1411169",
    "end": "1419360"
  },
  {
    "text": "packs can also provide layers to subsequent build packs so the node.js build pack can install nodejs on a layer",
    "start": "1419360",
    "end": "1424970"
  },
  {
    "text": "so that the Ruby build pack can then invoke the node runtime to do whatever it may need to do so after all of these",
    "start": "1424970",
    "end": "1431480"
  },
  {
    "text": "build packs run against your application source code and compile or download",
    "start": "1431480",
    "end": "1436730"
  },
  {
    "text": "dependencies we go on to the export step where we take all of those resulting",
    "start": "1436730",
    "end": "1441740"
  },
  {
    "start": "1439000",
    "end": "1439000"
  },
  {
    "text": "files and directories and compose them into layers in an image what's",
    "start": "1441740",
    "end": "1446929"
  },
  {
    "text": "interesting here though is that these layers the or the build packs themselves create intelligent layers that are",
    "start": "1446929",
    "end": "1452570"
  },
  {
    "text": "mapped really well to your application they're not defined by arbitrary commands in a docker file that",
    "start": "1452570",
    "end": "1458270"
  },
  {
    "text": "just result in layers based on whatever order the commands ran in will have explicit layers for your app for your",
    "start": "1458270",
    "end": "1464810"
  },
  {
    "text": "dependencies for the runtimes you use for an agent you might have installed and then for your base image so what",
    "start": "1464810",
    "end": "1471650"
  },
  {
    "text": "this means is that when you're deploying your app or you're pushing out an image to production or to a registry you're",
    "start": "1471650",
    "end": "1477530"
  },
  {
    "text": "only going to push the layers that have changed so if you have not updated your Ruby runtime or your nodejs layer those",
    "start": "1477530",
    "end": "1483380"
  },
  {
    "text": "layers do not need to be transferred it",
    "start": "1483380",
    "end": "1488900"
  },
  {
    "start": "1488000",
    "end": "1488000"
  },
  {
    "text": "also allows us to do some more interesting things like rebasing so the second command that we're going to talk",
    "start": "1488900",
    "end": "1494360"
  },
  {
    "text": "about is a curry base and when we're talking about the docker file with day two operations one of the things that",
    "start": "1494360",
    "end": "1501080"
  },
  {
    "text": "you have to do is you have to rebuild your application because the first line in your docker file is that from command",
    "start": "1501080",
    "end": "1506570"
  },
  {
    "start": "1502000",
    "end": "1502000"
  },
  {
    "text": "like from Ruby so if you update that ruby base image that includes a security patch like it's in a blow away the layer",
    "start": "1506570",
    "end": "1512420"
  },
  {
    "text": "cache and for everything below it so you pretty much have to rebuild the whole thing from scratch and one of the benefits of the way that we've done",
    "start": "1512420",
    "end": "1519860"
  },
  {
    "text": "layering with docker images because we're not using docker file is that if the only layer that has to change is the",
    "start": "1519860",
    "end": "1526130"
  },
  {
    "text": "base image we can just update that image underneath so similar to kind of the story I was talking about with the stack",
    "start": "1526130",
    "end": "1532070"
  },
  {
    "text": "image on Heroku it means that if their updates say for like meltdown that we",
    "start": "1532070",
    "end": "1537410"
  },
  {
    "text": "have to apply from this red new bun to layer for this green one where we",
    "start": "1537410",
    "end": "1542420"
  },
  {
    "text": "applied these security patches we can take all those existing layers like the tarball example from before and just",
    "start": "1542420",
    "end": "1547610"
  },
  {
    "text": "reapply them on top of the space image and that means we aren't rebuilding our",
    "start": "1547610",
    "end": "1552710"
  },
  {
    "text": "entire application so you're not spending time kind of doing all that work and the way we get the Sun is if",
    "start": "1552710",
    "end": "1560060"
  },
  {
    "start": "1557000",
    "end": "1557000"
  },
  {
    "text": "you look at kind of the OCIO docker image manifest is that it's split into a few sections one of them being kind of",
    "start": "1560060",
    "end": "1566870"
  },
  {
    "text": "the tarball layer are layers where it has like links to all the tar balls they're actually used for various layers",
    "start": "1566870",
    "end": "1573050"
  },
  {
    "text": "and the image manifests actually is just this JSON file that looks like this and",
    "start": "1573050",
    "end": "1578800"
  },
  {
    "text": "for each individual layer it has a path to where the tarball is as well as the",
    "start": "1578800",
    "end": "1585350"
  },
  {
    "text": "size and the checksum so if we replace these entries for the single layer that we care about all the layers do not have to be",
    "start": "1585350",
    "end": "1591710"
  },
  {
    "text": "linked as an inherent property in docker file so that means we can just replace this one section for the base image and",
    "start": "1591710",
    "end": "1598280"
  },
  {
    "text": "now we have a totally new docker image that represents our existing application",
    "start": "1598280",
    "end": "1604100"
  },
  {
    "text": "on top of the new stack image so for the example of the 40 apps that took three",
    "start": "1604100",
    "end": "1609110"
  },
  {
    "text": "hours to do a rebuild it means we can cut that time down to minutes instead of hours because all we have to do is",
    "start": "1609110",
    "end": "1615920"
  },
  {
    "text": "basically write like generate this layer then rewrite this image for the 40 apps",
    "start": "1615920",
    "end": "1621860"
  },
  {
    "text": "and then we're done and then in addition to that we were to point this out",
    "start": "1621860",
    "end": "1627340"
  },
  {
    "text": "traditionally you're gonna have to since you bust the cache you're gonna have to replace all the layers below it so you",
    "start": "1627340",
    "end": "1634010"
  },
  {
    "text": "can get new check sums for everything but in this case since we're using these existing layers we can just push out",
    "start": "1634010",
    "end": "1640790"
  },
  {
    "text": "that one image update so to kind of sum all this up we mentioned a bunch of",
    "start": "1640790",
    "end": "1647780"
  },
  {
    "start": "1642000",
    "end": "1642000"
  },
  {
    "text": "shortcomings when you're using docker file to kind of build this stuff you know like the data operations being",
    "start": "1647780",
    "end": "1653570"
  },
  {
    "text": "Apple where composability things like that I think a big part of one of the",
    "start": "1653570",
    "end": "1658790"
  },
  {
    "text": "things we want to do behind build pack is we consider fast as a feature so we need to pulling out security updates being able to quickly kind of update",
    "start": "1658790",
    "end": "1665270"
  },
  {
    "text": "images leverage the layerings to with the export of like having layers that",
    "start": "1665270",
    "end": "1670760"
  },
  {
    "text": "map specifically to the application means that we can deploy stuff quickly which is important when you're dealing",
    "start": "1670760",
    "end": "1676310"
  },
  {
    "text": "with the security incident and in addition to that we have a unified build",
    "start": "1676310",
    "end": "1681590"
  },
  {
    "text": "pipeline so that what that means is that when you're building an application like",
    "start": "1681590",
    "end": "1688490"
  },
  {
    "text": "inside of a company you probably have a docker file or a few set of docker files",
    "start": "1688490",
    "end": "1693680"
  },
  {
    "text": "like for the various applications you have within your company and there's probably more docker files in a fleet of",
    "start": "1693680",
    "end": "1699830"
  },
  {
    "text": "like 100 apps than existing the entire build pack ecosystem and that's because like each docker file is kind of this",
    "start": "1699830",
    "end": "1706430"
  },
  {
    "text": "like special snowflake that you have to modify even if you're using the same text ACK underneath for your application",
    "start": "1706430",
    "end": "1712850"
  },
  {
    "text": "because it might be using a different version of Ruby or a different version of open JDK that hasn't updated yet right but in our case for security and",
    "start": "1712850",
    "end": "1720500"
  },
  {
    "text": "other reasons when you're looking at single bill pack when your operations team has to vet like what that bill",
    "start": "1720500",
    "end": "1726580"
  },
  {
    "text": "pipeline looks at it's a much smaller subset of things that need to be examined and kind of vetted through verses every app being it's a special",
    "start": "1726580",
    "end": "1734440"
  },
  {
    "text": "snowflake of how that app gets built we've mentioned this a bunch of just like the bill pack being Apple we're",
    "start": "1734440",
    "end": "1742020"
  },
  {
    "start": "1737000",
    "end": "1737000"
  },
  {
    "text": "like the actual dollars that are actually are put into it are ones that are intended by the bill pack versus",
    "start": "1742020",
    "end": "1748570"
  },
  {
    "text": "ones that are just created because that's how the docker file is written so",
    "start": "1748570",
    "end": "1753580"
  },
  {
    "text": "we can map those more specifically to your application itself in addition we",
    "start": "1753580",
    "end": "1760059"
  },
  {
    "text": "have caching with the caching layers but also caching that makes sense so you",
    "start": "1760059",
    "end": "1765820"
  },
  {
    "text": "don't necessary to bust your entire cache four dependencies when you make those changes like we can just add that",
    "start": "1765820",
    "end": "1771160"
  },
  {
    "text": "single dependency when you've updated it versus rebuilding everything from scratch and then the bill pack because",
    "start": "1771160",
    "end": "1776950"
  },
  {
    "text": "it knows all this stuff about your application the language we can provide stuff like the job ops and things as",
    "start": "1776950",
    "end": "1783160"
  },
  {
    "text": "smart defaults that are built into the bill pack itself versus if you pull down the open JDK image it can't necessarily",
    "start": "1783160",
    "end": "1789669"
  },
  {
    "text": "make intelligible sense of like what is specific to your application and finally",
    "start": "1789669",
    "end": "1796120"
  },
  {
    "text": "we have composability and this you know goes back to the examples talking about like these unique docker files that you",
    "start": "1796120",
    "end": "1802510"
  },
  {
    "text": "have per app and so since bill packs are decoupled from the application specifically they are these like units",
    "start": "1802510",
    "end": "1810160"
  },
  {
    "text": "that are cohesive that can just be combined together so like combining the Ruby and Java bill pass together to",
    "start": "1810160",
    "end": "1817450"
  },
  {
    "text": "build a single build pipeline there versus the example Joe showed of the multistage build of like trying to you",
    "start": "1817450",
    "end": "1824320"
  },
  {
    "text": "have to understand how the job of Bill pack works and the reveal pack works or not bill packed the docker images and",
    "start": "1824320",
    "end": "1830500"
  },
  {
    "text": "then figure out how to combine them that makes sense for your particular application yeah so Josh long pretty",
    "start": "1830500",
    "end": "1838480"
  },
  {
    "start": "1835000",
    "end": "1835000"
  },
  {
    "text": "well-known guy in the Java ecosystem he says he doesn't care about containers and if Josh were here I'd tell him that",
    "start": "1838480",
    "end": "1843940"
  },
  {
    "text": "he doesn't need to care about containers because he's an application developer and that's because his build packs are a",
    "start": "1843940",
    "end": "1849309"
  },
  {
    "text": "higher level abstraction they meet developers where they are and that's at their source code",
    "start": "1849309",
    "end": "1855610"
  },
  {
    "text": "so before containers was a thing and the pre container era developers didn't",
    "start": "1855610",
    "end": "1860620"
  },
  {
    "text": "usually have to worry about the operating system security updates and the and the patches they had to apply to various packages but it's possible for",
    "start": "1860620",
    "end": "1869050"
  },
  {
    "text": "them to just continue working on their application code focusing on writing cool features and building value in",
    "start": "1869050",
    "end": "1874900"
  },
  {
    "text": "their applications value for their customers and still gain the advantages in the power of containers and they can do that",
    "start": "1874900",
    "end": "1882130"
  },
  {
    "text": "with built bags so if you want to try build packs today you can use the PAC CLI you can get that from our github",
    "start": "1882130",
    "end": "1889690"
  },
  {
    "start": "1883000",
    "end": "1883000"
  },
  {
    "text": "project build pack the pack release page you'll have various versions of PAC",
    "start": "1889690",
    "end": "1894880"
  },
  {
    "text": "there's also the life cycle which is the build pack execution environment that's what PAC uses and there's also a formal",
    "start": "1894880",
    "end": "1901930"
  },
  {
    "text": "specification for the build pack API what's really great about being or working with the cloud native computing",
    "start": "1901930",
    "end": "1908050"
  },
  {
    "text": "foundation and being a sandbox project is that we can create a vendor-neutral specification for this mechanism really",
    "start": "1908050",
    "end": "1916630"
  },
  {
    "text": "powerful and and really accessible if you give it a try or you want to chat us up we have a slack slack bill PAC style",
    "start": "1916630",
    "end": "1924310"
  },
  {
    "text": "there's general channel welcome to ask questions and if you want to take a look at some existing cloud native build",
    "start": "1924310",
    "end": "1929920"
  },
  {
    "text": "packs we have our samples repository which contains like a hello world example and some trivial examples but",
    "start": "1929920",
    "end": "1936850"
  },
  {
    "text": "then we have some actual build packs like the Heroku Java build pack which I showed earlier some node J s and NPM",
    "start": "1936850",
    "end": "1944200"
  },
  {
    "text": "bill pack from Cloud Foundry and then I also have a personal Python build pack that's not super powerful but on",
    "start": "1944200",
    "end": "1951790"
  },
  {
    "text": "Thursday I'm gonna show how I built it and what process I went through to create it now as I said before most",
    "start": "1951790",
    "end": "1958150"
  },
  {
    "start": "1952000",
    "end": "1952000"
  },
  {
    "text": "build pack users don't need to write build packs but hey it's a deep dive session that's what it's for right so",
    "start": "1958150",
    "end": "1963970"
  },
  {
    "text": "we're gonna get into how you use build packs we'll show a little bit more about the pack build command how that works",
    "start": "1963970",
    "end": "1969640"
  },
  {
    "text": "and how you use it and then we'll walk through creating a build pack from scratch that's Thursday at 2:35 over",
    "start": "1969640",
    "end": "1975880"
  },
  {
    "text": "into Omaha v and the TCC so thank you very much for coming check out bill packs at i/o I'm Joe",
    "start": "1975880",
    "end": "1982390"
  },
  {
    "text": "Kutner this is Terence Lee we have t-shirts if you can prove to us that that you are a faithful build pack",
    "start": "1982390",
    "end": "1989650"
  },
  {
    "text": "follower Stephen Elliott here they're wearing buildpack shirts come chat them",
    "start": "1989650",
    "end": "1995020"
  },
  {
    "text": "up if you're interested thank you [Applause]",
    "start": "1995020",
    "end": "2003079"
  }
]