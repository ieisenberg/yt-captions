[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hello and welcome to in a container no one can hear you scream next",
    "start": "80",
    "end": "6080"
  },
  {
    "text": "generation process isolation i am andy i love to break stuff",
    "start": "6080",
    "end": "13599"
  },
  {
    "text": "and then put it back together again once i know what it is made of and i'm also very proud to be an",
    "start": "13599",
    "end": "20240"
  },
  {
    "text": "official trainer and occasional course author for sans watch out for the upcoming sec 584",
    "start": "20240",
    "end": "26560"
  },
  {
    "text": "hashicorp docker o'reilly and of course control planes detailed and extensive",
    "start": "26560",
    "end": "32480"
  },
  {
    "text": "low-level cloud-native security courses and as you may recognize from the title",
    "start": "32480",
    "end": "38640"
  },
  {
    "text": "this talk contains aliens i'm a founder at control plane secops",
    "start": "38640",
    "end": "44960"
  },
  {
    "text": "for kubernetes focusing on regulated industries including financial services",
    "start": "44960",
    "end": "50160"
  },
  {
    "text": "we espouse continuous infrastructure and security practices with a focus on cloud native deployments",
    "start": "50160",
    "end": "57199"
  },
  {
    "text": "farm to table or get to kubernetes",
    "start": "57199",
    "end": "62399"
  },
  {
    "text": "and in containers no one can hear you scream",
    "start": "62879",
    "end": "69200"
  },
  {
    "text": "so what does this talk about well we love linux it is a commonly used and well-tested operating system",
    "start": "69520",
    "end": "76720"
  },
  {
    "text": "containers are a form of isolation provided by the linux kernel however like all software it has had",
    "start": "76720",
    "end": "83360"
  },
  {
    "text": "exploitable vulnerabilities and advanced sandboxing and isolation techniques have developed",
    "start": "83360",
    "end": "89200"
  },
  {
    "text": "to mitigate the risk of unknown existing or future vulnerabilities while these",
    "start": "89200",
    "end": "95920"
  },
  {
    "text": "techniques may also protect against kubernetes misconfigurations robust software and infrastructure delivery",
    "start": "95920",
    "end": "102079"
  },
  {
    "text": "pipelines are a less complex way of managing that risk for high sensitivity infrastructure",
    "start": "102079",
    "end": "107920"
  },
  {
    "text": "workloads or data a new generation of sandboxing technologies has emerged sometimes referred to as",
    "start": "107920",
    "end": "116240"
  },
  {
    "text": "micro vms these technologies are not so easily categorized as they use",
    "start": "116240",
    "end": "121360"
  },
  {
    "text": "multiple isolation mechanisms in addition to virtual machines including containers and so the generic",
    "start": "121360",
    "end": "128640"
  },
  {
    "text": "term sandboxing is used to cover the entire spectrum",
    "start": "128640",
    "end": "133599"
  },
  {
    "start": "133000",
    "end": "133000"
  },
  {
    "text": "so the value of virtualization is a balance of its performance with security",
    "start": "134720",
    "end": "140000"
  },
  {
    "text": "the linux kernel is written in c a language with security bugs that have proven notoriously difficult",
    "start": "140000",
    "end": "145680"
  },
  {
    "text": "to entirely eradicate virtualization can be thought of as a way to abstract a process as far",
    "start": "145680",
    "end": "152800"
  },
  {
    "text": "from the linux system call interface as possible to reduce the chance of exploitable vulnerabilities",
    "start": "152800",
    "end": "159280"
  },
  {
    "text": "using an assortment of lsms and kernel modules containers and capabilities dedicated",
    "start": "159280",
    "end": "165280"
  },
  {
    "text": "software and hardware assisted virtualization use of a use of a type safe language for the",
    "start": "165280",
    "end": "171840"
  },
  {
    "text": "virtual machine security such as golang or rust reduces the likelihood of bugs",
    "start": "171840",
    "end": "177920"
  },
  {
    "text": "much more difficult to avoid in software programmed in c so a brief glossary for this talk",
    "start": "177920",
    "end": "185680"
  },
  {
    "start": "182000",
    "end": "182000"
  },
  {
    "text": "the most important thing in a container is either the asset it contains or the data it has access to",
    "start": "185680",
    "end": "191360"
  },
  {
    "text": "be that pii financial records passwords that may be reused in other systems it may also be the",
    "start": "191360",
    "end": "199120"
  },
  {
    "text": "algorithms within including quant trading algorithms machine learning models",
    "start": "199120",
    "end": "204400"
  },
  {
    "text": "or an organization's secret source so an untrusted workload is software",
    "start": "204400",
    "end": "210959"
  },
  {
    "text": "that cannot be certified as safe to run that is a human has not",
    "start": "210959",
    "end": "216000"
  },
  {
    "text": "cryptographically signed it with a gpg or similar trusted thing untrusted",
    "start": "216000",
    "end": "221920"
  },
  {
    "text": "workloads are commonly run in virtual machines that public cloud providers rent to us",
    "start": "221920",
    "end": "227440"
  },
  {
    "text": "in hosted build and cicd infrastructure and uploads to video and audio transcoding services",
    "start": "227440",
    "end": "234640"
  },
  {
    "text": "untrusted workloads may also include software with published zero days or cves if no patch is available and the",
    "start": "234640",
    "end": "242799"
  },
  {
    "text": "workload is business critical isolating it further may decrease the potential impact of the vulnerability if",
    "start": "242799",
    "end": "249360"
  },
  {
    "text": "exploited a container image build can be considered untrusted",
    "start": "249360",
    "end": "254560"
  },
  {
    "text": "if its desired contents are unknown as it may contain malicious code to scan",
    "start": "254560",
    "end": "260239"
  },
  {
    "text": "network endpoints exfiltrate code in the container or attack the host",
    "start": "260239",
    "end": "265360"
  },
  {
    "text": "container images and code from unauthenticated external sources may also be considered untrusted for",
    "start": "265360",
    "end": "272000"
  },
  {
    "text": "risk-averse organizations a sensitive workload is one whose data or code is too",
    "start": "272000",
    "end": "278880"
  },
  {
    "text": "important to permit unauthorized access to this may include fraud detection systems",
    "start": "278880",
    "end": "285040"
  },
  {
    "text": "pricing engines or high frequency trading algorithms on a kubernetes cluster a single",
    "start": "285040",
    "end": "291680"
  },
  {
    "text": "workload or an entire tenant may be considered untrusted mitigation with kubernetes native",
    "start": "291680",
    "end": "298560"
  },
  {
    "text": "solutions such as admission control and network policy may be sufficient in some cases",
    "start": "298560",
    "end": "304720"
  },
  {
    "text": "but for advanced isolation from unknown vulnerabilities in the linux kernel and the run c demon sensitive",
    "start": "304720",
    "end": "312639"
  },
  {
    "text": "or untrusted workloads may be isolated further with next generation sandboxing",
    "start": "312639",
    "end": "319680"
  },
  {
    "text": "so what is wrong with containers well let's define firstly what we mean by",
    "start": "320639",
    "end": "326240"
  },
  {
    "text": "containers we start with the high level interfaces the container managers kubernetes docker and podman which",
    "start": "326240",
    "end": "333759"
  },
  {
    "text": "interact with their respective libraries to perform useful container management features",
    "start": "333759",
    "end": "339199"
  },
  {
    "text": "including pushing and pulling container images managing storage and network interfaces",
    "start": "339199",
    "end": "345039"
  },
  {
    "text": "and finally calling the low level container runtime that's low level container runtime is",
    "start": "345039",
    "end": "351039"
  },
  {
    "text": "directly responsible for starting and managing containers interfacing with the kernel",
    "start": "351039",
    "end": "356240"
  },
  {
    "text": "and creating that isolated containerized process a major difference between a container",
    "start": "356240",
    "end": "363120"
  },
  {
    "text": "and a vm is the containers do not use hardware assisted virtualization and so are more widely compatible but of",
    "start": "363120",
    "end": "370800"
  },
  {
    "text": "course containers do not really exist they are merely a user space fiction",
    "start": "370800",
    "end": "376240"
  },
  {
    "text": "however they are kind of a form of virtualization",
    "start": "376240",
    "end": "381840"
  },
  {
    "start": "381000",
    "end": "381000"
  },
  {
    "text": "so a common perception is that containers are optimized for speed and portability and virtual machines sacrifice these",
    "start": "381840",
    "end": "388639"
  },
  {
    "text": "features for more robust isolation from malicious behavior and the higher fault tolerance",
    "start": "388639",
    "end": "395360"
  },
  {
    "text": "but this perception is not entirely true both technologies share a lot of common",
    "start": "395360",
    "end": "400720"
  },
  {
    "text": "code pathways in the kernel itself containers and virtual machines have",
    "start": "400720",
    "end": "405919"
  },
  {
    "text": "evolved like co-orbiting stars never fully able to escape each other's gravity and spewing matter into their",
    "start": "405919",
    "end": "412960"
  },
  {
    "text": "shared ether container runtimes are a form of kernel virtualization and the oci container image",
    "start": "412960",
    "end": "419440"
  },
  {
    "text": "specifications have become the standardized atomic unit of deployment next generation sandboxes",
    "start": "419440",
    "end": "427840"
  },
  {
    "text": "combine container and virtualization techniques to reduce workloads access to the kernel",
    "start": "427840",
    "end": "435199"
  },
  {
    "text": "by emulating kernel functionality in user space or the isolated guest environment so reducing the host attack surface to",
    "start": "435199",
    "end": "442880"
  },
  {
    "text": "the process inside the sandbox well-defined interfaces can help to reduce complexity",
    "start": "442880",
    "end": "449199"
  },
  {
    "text": "minimizing the opportunity for untested code parts and by integrating these sandboxes with",
    "start": "449199",
    "end": "454400"
  },
  {
    "text": "container d they are also able to interact with oci images and with shims with orchestrators like",
    "start": "454400",
    "end": "461840"
  },
  {
    "text": "kubernetes so what is wrong with containers containers are not",
    "start": "461840",
    "end": "466879"
  },
  {
    "start": "463000",
    "end": "463000"
  },
  {
    "text": "inherently insecure but for some workloads they leak the host's abstractions too much",
    "start": "466879",
    "end": "474000"
  },
  {
    "text": "underlying concerns about a root owned daemon can be assuaged by running rootless containers",
    "start": "474000",
    "end": "479759"
  },
  {
    "text": "in unprivileged username space mode but this introduces another risk",
    "start": "479759",
    "end": "484879"
  },
  {
    "text": "user name spaces have historically been a rich source of vulnerabilities",
    "start": "484879",
    "end": "490800"
  },
  {
    "text": "linux was originally written with a lot of code assuming that it was being run by root in the",
    "start": "491039",
    "end": "497280"
  },
  {
    "text": "host namespace and some of these assumptions have changed with the introduction of username spaces",
    "start": "497280",
    "end": "503440"
  },
  {
    "text": "the last kernel namespace to be completed so the answer to whether it is riskier",
    "start": "503440",
    "end": "509199"
  },
  {
    "start": "505000",
    "end": "505000"
  },
  {
    "text": "to run a root owned daemon or user namespaces isn't entirely clear",
    "start": "509199",
    "end": "515919"
  },
  {
    "text": "there have been more high profile breakouts from root owned docker but this may be down to adoption",
    "start": "515919",
    "end": "522080"
  },
  {
    "text": "and widespread use rootless containers without a root owned daemon provide a",
    "start": "522080",
    "end": "528160"
  },
  {
    "text": "security boundary when compared to route owned daemons when code owned by the host's root user",
    "start": "528160",
    "end": "535760"
  },
  {
    "text": "is compromised it can potentially read and write other users files up spoof and sniff track traffic or",
    "start": "535760",
    "end": "542959"
  },
  {
    "text": "install malware to the firmware or kernel to avoid this potential exploit chain",
    "start": "542959",
    "end": "549920"
  },
  {
    "text": "see for example the proc self exe breakouts replacing the run c binary from inside the",
    "start": "549920",
    "end": "555519"
  },
  {
    "text": "container and attacking the host from inside the container by responding to docker copy",
    "start": "555519",
    "end": "561440"
  },
  {
    "text": "rootless containers can be created from within a username space and this is supported in the latest",
    "start": "561440",
    "end": "567440"
  },
  {
    "text": "versions of docker and podman usernamespaces allow non-root users to",
    "start": "567440",
    "end": "574720"
  },
  {
    "start": "570000",
    "end": "570000"
  },
  {
    "text": "pretend to be the host's root user the root in user namespace",
    "start": "574720",
    "end": "580480"
  },
  {
    "text": "user can have a fake uid 0 and permission to create new namespaces",
    "start": "580480",
    "end": "586000"
  },
  {
    "text": "mount net etc change the container's hostname and mount bind mounts and temper fest",
    "start": "586000",
    "end": "593440"
  },
  {
    "text": "file systems this allows the route in user namespace",
    "start": "593440",
    "end": "599519"
  },
  {
    "text": "which is unprivileged in the host namespace to create new containers to achieve this",
    "start": "599519",
    "end": "606959"
  },
  {
    "text": "additional work must be done network connections into the host network namespace can only be created by",
    "start": "606959",
    "end": "613440"
  },
  {
    "text": "the host's routes so for rootless containers an unprivileged",
    "start": "613440",
    "end": "618880"
  },
  {
    "text": "slurp for net ns guarded by setcomp into kernel is used to create a virtual network",
    "start": "618880",
    "end": "624640"
  },
  {
    "text": "device unfortunately mounting remote file systems also becomes difficult",
    "start": "624640",
    "end": "630240"
  },
  {
    "text": "when the remote file system for example nfs home directories does not understand the host's username",
    "start": "630240",
    "end": "636640"
  },
  {
    "text": "space while rootless podman has se linux",
    "start": "636640",
    "end": "641760"
  },
  {
    "text": "support and dynamic profile support run c and docker does not yet support app armor",
    "start": "641760",
    "end": "648320"
  },
  {
    "text": "and for both runtimes cryo is disabled both rootless runtimes require",
    "start": "648320",
    "end": "654720"
  },
  {
    "text": "configuration for some networking features capnet bind service is required by the",
    "start": "654720",
    "end": "659839"
  },
  {
    "text": "kernel to bind to ports below 1024 which is historically considered a privileged boundary",
    "start": "659839",
    "end": "665680"
  },
  {
    "text": "and ping is not supported for users with high uids if the id is not in proxis net",
    "start": "665680",
    "end": "672839"
  },
  {
    "text": "ipv4 ping group range but this can be changed by the host root user",
    "start": "672839",
    "end": "679200"
  },
  {
    "text": "host networking is not permitted as it breaks network isolation and cgroup's v2",
    "start": "679200",
    "end": "686079"
  },
  {
    "text": "function but only when running under system d c group v1 is not supported by either",
    "start": "686079",
    "end": "693120"
  },
  {
    "text": "rootless implementation so docker and moby and podman share much",
    "start": "693120",
    "end": "699760"
  },
  {
    "start": "696000",
    "end": "696000"
  },
  {
    "text": "of the same code for rootlessness and have been developed in parallel",
    "start": "699760",
    "end": "704800"
  },
  {
    "text": "they share similar performance and features although docker has an established networking model that doesn't support host networking",
    "start": "704800",
    "end": "711519"
  },
  {
    "text": "whereas podman reuses kubernetes cni interface",
    "start": "711519",
    "end": "716800"
  },
  {
    "text": "while rootless containers protect the host from the container some abstractions may still leak from",
    "start": "716800",
    "end": "722560"
  },
  {
    "text": "the host although they become much less dangerous for example proc host devices the kernel interface",
    "start": "722560",
    "end": "730720"
  },
  {
    "text": "so is this exposure to c-based system calls in the linux kernel from a rootless",
    "start": "730720",
    "end": "736560"
  },
  {
    "text": "container runtime bad well the kernel of linux powers the internet",
    "start": "736560",
    "end": "743519"
  },
  {
    "text": "and the world and has done so for decades but its lack of memory management",
    "start": "743519",
    "end": "748800"
  },
  {
    "text": "leads to the same critical bugs over and over again and when the kernel opens ssl and other",
    "start": "748800",
    "end": "756560"
  },
  {
    "text": "critical software are written in c we just want to move everything as far away from trusted kernel space as",
    "start": "756560",
    "end": "764160"
  },
  {
    "text": "possible virtual machine research began in the",
    "start": "764160",
    "end": "770839"
  },
  {
    "start": "768000",
    "end": "768000"
  },
  {
    "text": "1960s to facilitate sharing large expensive virtual machines between multiple users",
    "start": "770839",
    "end": "776720"
  },
  {
    "text": "and processors using hardware software or a combination of the two to achieve",
    "start": "776720",
    "end": "782000"
  },
  {
    "text": "isolation for processes memory and the resources they require from the physical host machine",
    "start": "782000",
    "end": "789040"
  },
  {
    "text": "the host machine is split into smaller isolated compute units traditionally referred to as guests",
    "start": "789040",
    "end": "796480"
  },
  {
    "text": "these guests interact with a virtualized interface to the host's cpu and devices and the interface",
    "start": "796480",
    "end": "803440"
  },
  {
    "text": "intercepts system calls to handle them itself by proxying to the host's kernel or",
    "start": "803440",
    "end": "809200"
  },
  {
    "text": "using its own code to handle the request full virtualization for example",
    "start": "809200",
    "end": "814720"
  },
  {
    "text": "vmware emulates hardware and boots a full kernel inside the guest operating",
    "start": "814720",
    "end": "821279"
  },
  {
    "text": "system level virtualization for example a container emulates the host's kernel",
    "start": "821279",
    "end": "827040"
  },
  {
    "text": "using namespaces c groups capabilities and setcomp and so can start a",
    "start": "827040",
    "end": "832399"
  },
  {
    "text": "containerized process directly on the host kernel processes in containers share many of",
    "start": "832399",
    "end": "838880"
  },
  {
    "text": "the kernel pathways and security mechanisms that processes in vms also execute to boot a kernel",
    "start": "838880",
    "end": "847279"
  },
  {
    "text": "a guest operating system will require access to a subset of the host machine's functionality",
    "start": "847279",
    "end": "853920"
  },
  {
    "text": "including bios routines devices and peripherals for example",
    "start": "853920",
    "end": "858959"
  },
  {
    "text": "keyboard graphical or console access storage and networking as well as an interrupt controller and",
    "start": "858959",
    "end": "865360"
  },
  {
    "text": "interval timer some source of entropy for randomization and the memory address space",
    "start": "865360",
    "end": "871120"
  },
  {
    "text": "that it will be run in it should be noted that despite many decades of effort in practice no",
    "start": "871120",
    "end": "878240"
  },
  {
    "text": "virtual machine is completely equivalent to its real machine counterpart",
    "start": "878240",
    "end": "884079"
  },
  {
    "start": "883000",
    "end": "883000"
  },
  {
    "text": "inside each guest virtual machine is an environment in which processes or workloads can run the virtual machine",
    "start": "884079",
    "end": "891839"
  },
  {
    "text": "itself is owned by a privileged parent process that manages its setup and interaction with",
    "start": "891839",
    "end": "897839"
  },
  {
    "text": "the host this is known as a virtual machine monitor or vmm this is also previously known as a",
    "start": "897839",
    "end": "905839"
  },
  {
    "text": "hypervisor but the distinction is blurred with more recent approaches so the original term vmm is preferred",
    "start": "905839",
    "end": "914000"
  },
  {
    "start": "913000",
    "end": "913000"
  },
  {
    "text": "linux has a built-in virtual machine manager called kvm that allows a host kernel to run virtual",
    "start": "914000",
    "end": "920079"
  },
  {
    "text": "machines along with qmu which emulates physical devices and provides memory management to the",
    "start": "920079",
    "end": "926480"
  },
  {
    "text": "guest and can also run by itself if necessary an operating system can run fully",
    "start": "926480",
    "end": "932959"
  },
  {
    "text": "emulated by the guest os and qmu this emulation narrows the interface",
    "start": "932959",
    "end": "939360"
  },
  {
    "text": "between the vm and the host kernel and reduces the amount of kernel code the process inside",
    "start": "939360",
    "end": "944639"
  },
  {
    "text": "the vm can reach directly this provides a greater level of isolation",
    "start": "944639",
    "end": "949920"
  },
  {
    "text": "from unknown kernel vulnerabilities different technologies take different",
    "start": "949920",
    "end": "955839"
  },
  {
    "start": "952000",
    "end": "952000"
  },
  {
    "text": "approaches to moving away from linux system call interaction for the guest linux containers are the",
    "start": "955839",
    "end": "962560"
  },
  {
    "text": "most lightweight form of isolation as they allow workloads to use kernel apis directly",
    "start": "962560",
    "end": "968000"
  },
  {
    "text": "minimizing the layers of abstraction gvisor starts a kvm virtual machine or operates in p-trace",
    "start": "968000",
    "end": "975600"
  },
  {
    "text": "mode and inside starts a user space kernel which proxys system calls",
    "start": "975600",
    "end": "981360"
  },
  {
    "text": "down to the hosts using a sentry process this trusted process re-implements 237",
    "start": "981360",
    "end": "988800"
  },
  {
    "text": "linux system calls and only needs 53 system calls to operate itself it is constrained",
    "start": "988800",
    "end": "996000"
  },
  {
    "text": "to that list of system calls by setcomp and it starts a companion file system interaction process called",
    "start": "996000",
    "end": "1003199"
  },
  {
    "text": "gopher which prevents a compromised sensory process interacting with the host file system finally",
    "start": "1003199",
    "end": "1010240"
  },
  {
    "text": "it also implements its own user space networking stack conversely firecracker while also using",
    "start": "1010240",
    "end": "1017440"
  },
  {
    "text": "kvm instead of implementing the heavyweight qmu process to emulate devices",
    "start": "1017440",
    "end": "1023199"
  },
  {
    "text": "as a traditional linux virtual machine might do it starts a stripped-down device",
    "start": "1023199",
    "end": "1028798"
  },
  {
    "text": "emulator instead this reduces the host attack surface and removes unnecessary code",
    "start": "1028799",
    "end": "1034880"
  },
  {
    "text": "requiring only 36 system calls for itself to function g-visor and firecracker both",
    "start": "1034880",
    "end": "1041678"
  },
  {
    "text": "operate on the premise that they're statically typed i.e golang or rust system called",
    "start": "1041679",
    "end": "1048079"
  },
  {
    "text": "proxying in between the process and the host kernel is more secure against untrusted",
    "start": "1048079",
    "end": "1054720"
  },
  {
    "text": "workloads than the linux kernel itself and that their performance is not",
    "start": "1054720",
    "end": "1059919"
  },
  {
    "text": "significantly impacted and finally at the other end of the spectrum kvm",
    "start": "1059919",
    "end": "1066000"
  },
  {
    "text": "and qm uvms emulate hardware and so provide a guest kernel and full",
    "start": "1066000",
    "end": "1071360"
  },
  {
    "text": "device emulation which increases startup times and therefore memory footprint",
    "start": "1071360",
    "end": "1077360"
  },
  {
    "text": "while guest os virtualization is expensive due to many layers of abstraction",
    "start": "1077360",
    "end": "1082400"
  },
  {
    "text": "it permits running unmodified guest operating systems and does not require hardware that is",
    "start": "1082400",
    "end": "1088320"
  },
  {
    "text": "cpu virtualization support visor firecracker and cata containers",
    "start": "1088320",
    "end": "1095360"
  },
  {
    "start": "1091000",
    "end": "1091000"
  },
  {
    "text": "all take different approaches to virtual machine isolation and aim to challenge the perception of",
    "start": "1095360",
    "end": "1100880"
  },
  {
    "text": "slow startup time and high memory overhead each system is a combination of virtual",
    "start": "1100880",
    "end": "1106320"
  },
  {
    "text": "machine and container technologies some vmm processes a linux kernel within",
    "start": "1106320",
    "end": "1112080"
  },
  {
    "text": "the virtual machine and once the kernel has booted a linux user space in which to run the process",
    "start": "1112080",
    "end": "1119679"
  },
  {
    "text": "and some combination of based isolation that is container style name spaces c groups and",
    "start": "1119679",
    "end": "1126320"
  },
  {
    "text": "set comp either within the vm around the vmm or some combination thereof gvisor",
    "start": "1126320",
    "end": "1133760"
  },
  {
    "text": "protects app engine's standard environment google cloud functions cloud ml engine and google cloud run",
    "start": "1133760",
    "end": "1142160"
  },
  {
    "text": "and as it has been modified for google gke currently has the best integration with docker and kubernetes",
    "start": "1142160",
    "end": "1148480"
  },
  {
    "text": "from the sandboxing technologies it can be considered as either a merged gas",
    "start": "1148480",
    "end": "1153760"
  },
  {
    "text": "kernel and virtual machine monitor or as setcomp on steroids as well as using its",
    "start": "1153760",
    "end": "1161280"
  },
  {
    "text": "sensory process it also provides a masked view of the proc and dev virtual file systems these file",
    "start": "1161280",
    "end": "1168880"
  },
  {
    "text": "systems have historically leaked the container abstraction by sharing information from the host",
    "start": "1168880",
    "end": "1174480"
  },
  {
    "text": "such as memory devices processes etc sentry prevents the application",
    "start": "1174480",
    "end": "1180799"
  },
  {
    "text": "interacting directly with the host kernel and setcomp is used around the g visor",
    "start": "1180799",
    "end": "1185840"
  },
  {
    "text": "kernel to limit system calls and prevent escalation in case of tenants breaking into sentry",
    "start": "1185840",
    "end": "1191919"
  },
  {
    "text": "and attacking the host kernel implementing a user space kernel is a",
    "start": "1191919",
    "end": "1197919"
  },
  {
    "text": "herculean undertaking but the lack of full system call support means some applications are not able to",
    "start": "1197919",
    "end": "1204320"
  },
  {
    "text": "run in g-visor in practice most of these system calls were excluded for a reason",
    "start": "1204320",
    "end": "1209679"
  },
  {
    "text": "and compatibility is generally very good a side process to the sentry called",
    "start": "1209679",
    "end": "1216480"
  },
  {
    "text": "gopher handles io eg disks devices which is historically a common attack",
    "start": "1216480",
    "end": "1222960"
  },
  {
    "text": "vector for vms separating this process provides resistance to compromise",
    "start": "1222960",
    "end": "1229120"
  },
  {
    "text": "if sentry has an exploitable bug it can't be used to attack the host's devices because they are all",
    "start": "1229120",
    "end": "1234799"
  },
  {
    "text": "proxied through gopher however this comes at the cost of some",
    "start": "1234799",
    "end": "1241840"
  },
  {
    "text": "reduced application compatibility and the high per system call overhead",
    "start": "1241840",
    "end": "1247120"
  },
  {
    "text": "of course not all applications make a lot of system calls so this is dependent upon usage",
    "start": "1247120",
    "end": "1254240"
  },
  {
    "text": "sentry's user space os kernel implements all the kernel functionality needed by the untrusted application",
    "start": "1254240",
    "end": "1260799"
  },
  {
    "text": "although it does make some host system calls to support its operation it will not allow the application to",
    "start": "1260799",
    "end": "1266640"
  },
  {
    "text": "directly control the system calls that it makes to the underlying linux kernel",
    "start": "1266640",
    "end": "1272799"
  },
  {
    "text": "application system calls are redirected to sentry by a platform syscall switcher",
    "start": "1272799",
    "end": "1278080"
  },
  {
    "text": "that intercepts the application when it tries to make system calls",
    "start": "1278080",
    "end": "1283760"
  },
  {
    "start": "1284000",
    "end": "1284000"
  },
  {
    "text": "sentry sits in a loop waiting for a system call to be generated by the application it then captures the system call handles",
    "start": "1285520",
    "end": "1292799"
  },
  {
    "text": "it and returns a response to the process a simple concept that abstracts the",
    "start": "1292799",
    "end": "1298720"
  },
  {
    "text": "complexity from a user the platform cisco switcher g visor's",
    "start": "1298720",
    "end": "1305280"
  },
  {
    "text": "system call interceptor has two modes p trace and kvm",
    "start": "1305280",
    "end": "1310320"
  },
  {
    "text": "the p tray system call provides a mechanism for a parent process to observe and modify another",
    "start": "1310320",
    "end": "1315679"
  },
  {
    "text": "processor's p trace cism u forces the traced process",
    "start": "1315679",
    "end": "1321520"
  },
  {
    "text": "to stop an entry to this next syscall and gvisor is able to respond to it or proxy the request to the host kernel",
    "start": "1321520",
    "end": "1328720"
  },
  {
    "text": "going via gopher if io is required",
    "start": "1328720",
    "end": "1333840"
  },
  {
    "text": "firecracker is a vmm that boots a dedicated virtual machine for its guest using kvm but instead of using kvm's",
    "start": "1334320",
    "end": "1343120"
  },
  {
    "text": "traditional device emulation pairing with qmu firecracker implements its own memory",
    "start": "1343120",
    "end": "1348240"
  },
  {
    "text": "management and device emulation it has no bios instead implementing",
    "start": "1348240",
    "end": "1353840"
  },
  {
    "text": "linux boot protocol no pci support and stripped down simple",
    "start": "1353840",
    "end": "1358880"
  },
  {
    "text": "virtualized devices with a single network interface a block i o device",
    "start": "1358880",
    "end": "1363919"
  },
  {
    "text": "a timer clock serial console and a keyboard device that only simulates",
    "start": "1363919",
    "end": "1369120"
  },
  {
    "text": "control or delete in order to reset the vm firecracker itself",
    "start": "1369120",
    "end": "1374480"
  },
  {
    "text": "will be compatible with kubernetes and oci when the firecracker container d project",
    "start": "1374480",
    "end": "1380400"
  },
  {
    "text": "is complete the firecracker vmm process that starts the guest virtual machine",
    "start": "1380400",
    "end": "1386400"
  },
  {
    "text": "is in turn started by a jailer process the jailer configures the security configuration of the vmm sandbox",
    "start": "1386400",
    "end": "1393200"
  },
  {
    "text": "the gid and uid assignment network namespaces creating a chair route and c groups then",
    "start": "1393200",
    "end": "1399280"
  },
  {
    "text": "terminates and passes controlled firecracker where setcomp is enforced around the kvm guest kernel",
    "start": "1399280",
    "end": "1405120"
  },
  {
    "text": "and the user space that it boots where g-visor proxies i o through a",
    "start": "1405120",
    "end": "1411120"
  },
  {
    "start": "1408000",
    "end": "1408000"
  },
  {
    "text": "secondary process firecracker uses the kvm vert i o drivers",
    "start": "1411120",
    "end": "1416720"
  },
  {
    "text": "proxying from the guest firecracker process to the host kernel using the vmm when the firecracker vm",
    "start": "1416720",
    "end": "1424880"
  },
  {
    "text": "image starts it boots into protected mode and the guest kernel never running in its real mode",
    "start": "1424880",
    "end": "1432240"
  },
  {
    "text": "firecracker invokes far less host kernel code than traditional lexi or g visor once it",
    "start": "1432240",
    "end": "1439360"
  },
  {
    "text": "has started although they all touch similar amounts of kernel code at runtime performance improvements are",
    "start": "1439360",
    "end": "1447600"
  },
  {
    "text": "gained from an isolated memory stack and lazily flushing data to the page cache instead of disk",
    "start": "1447600",
    "end": "1453360"
  },
  {
    "text": "to increase file system performance firecracker supports arbitrary linux binaries but does not support generic",
    "start": "1453360",
    "end": "1460400"
  },
  {
    "text": "linux kernels it was created from for aws's lambda",
    "start": "1460400",
    "end": "1465520"
  },
  {
    "text": "service forked from google's chrome os vm cross vm firecracker is a statically",
    "start": "1465520",
    "end": "1474080"
  },
  {
    "text": "linked rust binary that doesn't pollute the host file system and is compatible with catacontainers",
    "start": "1474080",
    "end": "1479840"
  },
  {
    "text": "ignite firecube firecracker container d it provides soft allocation for more",
    "start": "1479840",
    "end": "1485919"
  },
  {
    "text": "aggressive bin packing and a greater resource utilization",
    "start": "1485919",
    "end": "1491360"
  },
  {
    "start": "1491000",
    "end": "1491000"
  },
  {
    "text": "cat containers are lightweight vms containing a container engine highly optimized for running containers",
    "start": "1492240",
    "end": "1500640"
  },
  {
    "text": "they are the oldest and most mature of the recent sandboxes and were originally called clear",
    "start": "1500640",
    "end": "1506080"
  },
  {
    "text": "containers compatibility is wide with support for most container orchestrators",
    "start": "1506080",
    "end": "1512320"
  },
  {
    "text": "grown from a combination of intel clear containers and hyper dot sh run v cat containers wraps",
    "start": "1512320",
    "end": "1519279"
  },
  {
    "text": "containers with a dedicated kvm virtual machine and device emulation from a plugable",
    "start": "1519279",
    "end": "1524880"
  },
  {
    "text": "back end qmu qmu qmulite nemu a custom strip down",
    "start": "1524880",
    "end": "1530000"
  },
  {
    "text": "qmu or firecracker it is an oci runtime and supports kubernetes which does not",
    "start": "1530000",
    "end": "1536559"
  },
  {
    "text": "require modification of container images the catacontainer runtime launches each",
    "start": "1536559",
    "end": "1542799"
  },
  {
    "text": "container on a guest kernel in its own hardware isolated vm the cata runtime is the vmm and",
    "start": "1542799",
    "end": "1550240"
  },
  {
    "text": "interface to the oci cataproxy handles i o for the cata agent and therefore the application using",
    "start": "1550240",
    "end": "1556960"
  },
  {
    "text": "kvm's virtio serial and multiplex is a command channel over the same connection",
    "start": "1556960",
    "end": "1563279"
  },
  {
    "text": "catashim is the interface to the container engine handling container life cycles signals and logs the guest is started",
    "start": "1563279",
    "end": "1570880"
  },
  {
    "text": "using kvm and qmua firecracker the project has forked qmu twice to experiment with",
    "start": "1570880",
    "end": "1576559"
  },
  {
    "text": "lightweight start times and has re-implemented a number of features back into qmu",
    "start": "1576559",
    "end": "1581679"
  },
  {
    "text": "which is now preferred to nemu the most recent fork inside the vm qmu boots an optimized",
    "start": "1581679",
    "end": "1588880"
  },
  {
    "text": "kernel and systemd starts the kata agent process kata agent manages the containers",
    "start": "1588880",
    "end": "1594480"
  },
  {
    "text": "running inside the vm which uses lib container and so shares a lot of code with run c",
    "start": "1594480",
    "end": "1601440"
  },
  {
    "text": "networking is provided by integrating with cni or docker's cnm and the network namespace is created for",
    "start": "1601440",
    "end": "1608000"
  },
  {
    "text": "each vm because of its networking model the host network cannot be joined",
    "start": "1608000",
    "end": "1614159"
  },
  {
    "text": "sc linux and app armor are not currently implemented and some oci inconsistencies limits the",
    "start": "1614159",
    "end": "1619919"
  },
  {
    "text": "docker integration an honorable mention many new vmm",
    "start": "1619919",
    "end": "1625760"
  },
  {
    "start": "1622000",
    "end": "1622000"
  },
  {
    "text": "technologies have some rustling components so is rust any good it's similar to",
    "start": "1625760",
    "end": "1631919"
  },
  {
    "text": "golang in that it is memory safe it's memory model vertio et cetera but it is built atop a memory ownership",
    "start": "1631919",
    "end": "1638799"
  },
  {
    "text": "model which avoids whole classes of bugs including use after free double free and dangling pointer issues",
    "start": "1638799",
    "end": "1646960"
  },
  {
    "text": "it has safe and simple concurrency and no garbage collector which may incur some virtualized",
    "start": "1646960",
    "end": "1652559"
  },
  {
    "text": "overhead and latency instead using build time analysis to find segmentation faults and memory issues based upon the",
    "start": "1652559",
    "end": "1660320"
  },
  {
    "text": "safeness of the language rust vmm is a fast development toolkit for new vmms",
    "start": "1660320",
    "end": "1666720"
  },
  {
    "text": "it is a collection of building blocks that is rust crates comprised of virtualization components",
    "start": "1666720",
    "end": "1672720"
  },
  {
    "text": "these are well tested and therefore better secured and provide a simple clean interface for example the vm",
    "start": "1672720",
    "end": "1680480"
  },
  {
    "text": "memory crate is a guest memory abstraction providing a guest address memory regions and when used in",
    "start": "1680480",
    "end": "1687200"
  },
  {
    "text": "firecracker guest shared memory the project was burst berthed from chrome os's cross vm which",
    "start": "1687200",
    "end": "1695039"
  },
  {
    "text": "was forked by firecracker and subsequently abstracted into the hypervisor from scratch",
    "start": "1695039",
    "end": "1700640"
  },
  {
    "text": "crates this approach will enable the development of a plug-and-play architecture for fight for hypervisors",
    "start": "1700640",
    "end": "1707520"
  },
  {
    "text": "which isn't yet prevalent in the industry so how do we run these things well",
    "start": "1707520",
    "end": "1715440"
  },
  {
    "start": "1714000",
    "end": "1714000"
  },
  {
    "text": "kubernetes and docker support different container runtimes at the same time and node can run pods with different",
    "start": "1715440",
    "end": "1721679"
  },
  {
    "text": "cris this means that we can separate our workloads",
    "start": "1721679",
    "end": "1727919"
  },
  {
    "text": "docker is able to run any oci compliance runtime kubernetes requires a runtime to",
    "start": "1727919",
    "end": "1734080"
  },
  {
    "text": "also be cri compliance while kubernetes does not yet distinguish between types of",
    "start": "1734080",
    "end": "1739840"
  },
  {
    "text": "sandboxes we can still set node affinity and toleration so that we schedule our pods onto nodes",
    "start": "1739840",
    "end": "1748000"
  },
  {
    "text": "that have the relevant sandbox technology installed what are the risks well the degree of",
    "start": "1748000",
    "end": "1754480"
  },
  {
    "start": "1752000",
    "end": "1752000"
  },
  {
    "text": "access and privilege that a guest process has to host features or virtualized versions of them",
    "start": "1754480",
    "end": "1760240"
  },
  {
    "text": "impacts the attack surface available to an attacker in control of the guest process so this",
    "start": "1760240",
    "end": "1766720"
  },
  {
    "text": "new tranche of sandbox technologies is under active development its code and like",
    "start": "1766720",
    "end": "1772000"
  },
  {
    "text": "all new code is at risk of exploitable bugs this is a fact of software and is",
    "start": "1772000",
    "end": "1777520"
  },
  {
    "text": "infinitely better than no new software at all potentially these sandboxes",
    "start": "1777520",
    "end": "1783440"
  },
  {
    "text": "are not yet a target for attackers the level of innovation and baseline knowledge to contribute",
    "start": "1783440",
    "end": "1789760"
  },
  {
    "text": "means the barrier to entry is set high from an administrator's perspective",
    "start": "1789760",
    "end": "1794799"
  },
  {
    "text": "modifying or debugging applications within the sandbox becomes slightly more difficult",
    "start": "1794799",
    "end": "1800000"
  },
  {
    "text": "similar to the difference between bare metal and containerized processes these difficulties are not",
    "start": "1800000",
    "end": "1805760"
  },
  {
    "text": "insurmountable and require administrator familiarization with the underlying runtime",
    "start": "1805760",
    "end": "1811840"
  },
  {
    "text": "it is still possible to run privileged sandboxes and although the risks are fewer than privileged containers users should be",
    "start": "1811840",
    "end": "1818559"
  },
  {
    "text": "aware that reducing isolation increases the risk of running the process inside the sandbox",
    "start": "1818559",
    "end": "1825919"
  },
  {
    "start": "1825000",
    "end": "1825000"
  },
  {
    "text": "narrowing the interface between a sandbox process and the host is a risk-based decision there are some",
    "start": "1826559",
    "end": "1833039"
  },
  {
    "text": "trade-offs debugging becomes much harder and traditional tracing tools may not have great compatibility",
    "start": "1833039",
    "end": "1838960"
  },
  {
    "text": "there is a performance impact but this may be negligible for some workloads and benchmarking is strongly encouraged",
    "start": "1838960",
    "end": "1846000"
  },
  {
    "text": "as next generation runtimes have focused on stripping down legacy compatibility they are very small and very fast to",
    "start": "1846000",
    "end": "1852559"
  },
  {
    "text": "start up compared to traditional vms not as fast as lexi or mobi but fast enough for",
    "start": "1852559",
    "end": "1859919"
  },
  {
    "text": "function as a service providers to offer their aggressive scale up rates",
    "start": "1859919",
    "end": "1865200"
  },
  {
    "text": "so application workloads should be categorized by risk does this application access a high value asset is this application",
    "start": "1865200",
    "end": "1872480"
  },
  {
    "text": "able to receive untrusted traffic or have there been vulnerabilities or bugs in this application before",
    "start": "1872480",
    "end": "1878880"
  },
  {
    "text": "if the answer to any of those is yes you may want to consider a next generation sandboxing technology",
    "start": "1878880",
    "end": "1886320"
  },
  {
    "start": "1885000",
    "end": "1885000"
  },
  {
    "text": "so unless you have specific problems containers are probably just fine for",
    "start": "1886399",
    "end": "1892240"
  },
  {
    "text": "higher sensitivity workloads and data perhaps we want more isolation there is",
    "start": "1892240",
    "end": "1897440"
  },
  {
    "text": "an affinity between some of these technologies and their supporting cloud provider which makes it a lot easier to use the",
    "start": "1897440",
    "end": "1903519"
  },
  {
    "text": "supported runtime and rustvmm means that there will be many more hypervisor based container",
    "start": "1903519",
    "end": "1909440"
  },
  {
    "text": "runtimes in the future thanks for listening have a wonderful day",
    "start": "1909440",
    "end": "1916240"
  }
]