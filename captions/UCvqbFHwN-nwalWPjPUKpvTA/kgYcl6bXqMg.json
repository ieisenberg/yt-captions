[
  {
    "text": "hello and welcome to inside kubernetes",
    "start": "80",
    "end": "2560"
  },
  {
    "text": "networking",
    "start": "2560",
    "end": "3919"
  },
  {
    "text": "a kubecon and cloud nativecon europe",
    "start": "3919",
    "end": "6600"
  },
  {
    "text": "2021 presentation",
    "start": "6600",
    "end": "10080"
  },
  {
    "text": "i am dominic torno principal engineer at",
    "start": "10080",
    "end": "13200"
  },
  {
    "text": "cisco",
    "start": "13200",
    "end": "14799"
  },
  {
    "text": "i focus on systems modelling",
    "start": "14799",
    "end": "17039"
  },
  {
    "text": "specifically",
    "start": "17039",
    "end": "17840"
  },
  {
    "text": "conceptual and formal modeling to",
    "start": "17840",
    "end": "20160"
  },
  {
    "text": "support the development",
    "start": "20160",
    "end": "21600"
  },
  {
    "text": "and documentation of complex software",
    "start": "21600",
    "end": "23920"
  },
  {
    "text": "systems",
    "start": "23920",
    "end": "24960"
  },
  {
    "text": "kubernetes networking is a core",
    "start": "24960",
    "end": "26880"
  },
  {
    "text": "abstraction of kubernetes",
    "start": "26880",
    "end": "29359"
  },
  {
    "text": "kubernetes networking ensures components",
    "start": "29359",
    "end": "32078"
  },
  {
    "text": "within cluster boundaries",
    "start": "32079",
    "end": "33760"
  },
  {
    "text": "and components across cluster boundaries",
    "start": "33760",
    "end": "36320"
  },
  {
    "text": "can communicate",
    "start": "36320",
    "end": "39200"
  },
  {
    "text": "kubernetes networking is split into the",
    "start": "39920",
    "end": "42160"
  },
  {
    "text": "kubernetes networking specification",
    "start": "42160",
    "end": "45600"
  },
  {
    "text": "and the kubernetes networking",
    "start": "45600",
    "end": "47200"
  },
  {
    "text": "implementation",
    "start": "47200",
    "end": "50000"
  },
  {
    "text": "in fact many alternative implementations",
    "start": "50559",
    "end": "54239"
  },
  {
    "text": "called kubernetes network plugins exist",
    "start": "54239",
    "end": "56879"
  },
  {
    "text": "today",
    "start": "56879",
    "end": "59680"
  },
  {
    "text": "the details of the kubernetes network",
    "start": "59680",
    "end": "62239"
  },
  {
    "text": "implementation",
    "start": "62239",
    "end": "63520"
  },
  {
    "text": "depend on the details of the kubernetes",
    "start": "63520",
    "end": "66080"
  },
  {
    "text": "network plugin",
    "start": "66080",
    "end": "67680"
  },
  {
    "text": "no two are alike",
    "start": "67680",
    "end": "70960"
  },
  {
    "text": "therefore instead of discussing a",
    "start": "70960",
    "end": "73520"
  },
  {
    "text": "complete picture based on",
    "start": "73520",
    "end": "75520"
  },
  {
    "text": "one particular network plugin or an",
    "start": "75520",
    "end": "78880"
  },
  {
    "text": "incomplete picture based on the least",
    "start": "78880",
    "end": "81119"
  },
  {
    "text": "common denominator of",
    "start": "81119",
    "end": "82560"
  },
  {
    "text": "all network plugins in this presentation",
    "start": "82560",
    "end": "86400"
  },
  {
    "text": "we will discuss an idealized",
    "start": "86400",
    "end": "88960"
  },
  {
    "text": "implementation",
    "start": "88960",
    "end": "91759"
  },
  {
    "text": "accordingly this presentation is split",
    "start": "92479",
    "end": "95200"
  },
  {
    "text": "into two",
    "start": "95200",
    "end": "96000"
  },
  {
    "text": "parts the first part discussing the",
    "start": "96000",
    "end": "98840"
  },
  {
    "text": "specification",
    "start": "98840",
    "end": "100320"
  },
  {
    "text": "the second part discussing an idealized",
    "start": "100320",
    "end": "103119"
  },
  {
    "text": "implementation",
    "start": "103119",
    "end": "105119"
  },
  {
    "text": "so first up the kubernetes networking",
    "start": "105119",
    "end": "108000"
  },
  {
    "text": "specification",
    "start": "108000",
    "end": "110079"
  },
  {
    "text": "from the point of view of the kubernetes",
    "start": "110079",
    "end": "112560"
  },
  {
    "text": "networking specification",
    "start": "112560",
    "end": "114799"
  },
  {
    "text": "a kubernetes cluster consists of a set",
    "start": "114799",
    "end": "118079"
  },
  {
    "text": "of nodes",
    "start": "118079",
    "end": "120000"
  },
  {
    "text": "each node hosts a set of parts",
    "start": "120000",
    "end": "124320"
  },
  {
    "text": "and each part executes a set of",
    "start": "124320",
    "end": "127840"
  },
  {
    "text": "containers",
    "start": "127840",
    "end": "129759"
  },
  {
    "text": "additionally each node hosts a set of",
    "start": "129759",
    "end": "133520"
  },
  {
    "text": "processes",
    "start": "133520",
    "end": "134720"
  },
  {
    "text": "called daemons in the context of",
    "start": "134720",
    "end": "138160"
  },
  {
    "text": "kubernetes",
    "start": "138160",
    "end": "139360"
  },
  {
    "text": "network addressable elements that is",
    "start": "139360",
    "end": "142400"
  },
  {
    "text": "elements with an ip address consist",
    "start": "142400",
    "end": "145760"
  },
  {
    "text": "of nodes and parts",
    "start": "145760",
    "end": "149519"
  },
  {
    "text": "however keep in mind that the ultimate",
    "start": "149760",
    "end": "152879"
  },
  {
    "text": "producers",
    "start": "152879",
    "end": "153840"
  },
  {
    "text": "and consumers of messages are not",
    "start": "153840",
    "end": "156959"
  },
  {
    "text": "nodes and parts but are instead",
    "start": "156959",
    "end": "160560"
  },
  {
    "text": "containers and daemons the kubernetes",
    "start": "160560",
    "end": "164239"
  },
  {
    "text": "networking specification",
    "start": "164239",
    "end": "166239"
  },
  {
    "text": "is a set of constraints on",
    "start": "166239",
    "end": "169360"
  },
  {
    "text": "the message exchange between containers",
    "start": "169360",
    "end": "171840"
  },
  {
    "text": "and containers",
    "start": "171840",
    "end": "173280"
  },
  {
    "text": "and containers and daemons the",
    "start": "173280",
    "end": "176000"
  },
  {
    "text": "kubernetes network specification",
    "start": "176000",
    "end": "178000"
  },
  {
    "text": "addresses three different concerns",
    "start": "178000",
    "end": "181040"
  },
  {
    "text": "container to container communication",
    "start": "181040",
    "end": "183440"
  },
  {
    "text": "part part-to-part communication",
    "start": "183440",
    "end": "185840"
  },
  {
    "text": "and daemon to part communication",
    "start": "185840",
    "end": "189040"
  },
  {
    "text": "first we will discuss container to",
    "start": "189040",
    "end": "191440"
  },
  {
    "text": "container communication",
    "start": "191440",
    "end": "194640"
  },
  {
    "text": "the specification requires that a",
    "start": "194800",
    "end": "197440"
  },
  {
    "text": "container",
    "start": "197440",
    "end": "198080"
  },
  {
    "text": "c1 that is executing in the context of a",
    "start": "198080",
    "end": "201440"
  },
  {
    "text": "part p",
    "start": "201440",
    "end": "203040"
  },
  {
    "text": "can communicate with any other container",
    "start": "203040",
    "end": "205360"
  },
  {
    "text": "c2",
    "start": "205360",
    "end": "206560"
  },
  {
    "text": "that is also executing in the context of",
    "start": "206560",
    "end": "209120"
  },
  {
    "text": "p",
    "start": "209120",
    "end": "209599"
  },
  {
    "text": "via localhost or via the ip address",
    "start": "209599",
    "end": "213200"
  },
  {
    "text": "of p again",
    "start": "213200",
    "end": "216239"
  },
  {
    "text": "represented graphically a container c1",
    "start": "216239",
    "end": "219840"
  },
  {
    "text": "that is executing in the context of a",
    "start": "219840",
    "end": "222159"
  },
  {
    "text": "part p",
    "start": "222159",
    "end": "223519"
  },
  {
    "text": "can communicate with any other container",
    "start": "223519",
    "end": "226159"
  },
  {
    "text": "c2",
    "start": "226159",
    "end": "227200"
  },
  {
    "text": "that is also executing in the context of",
    "start": "227200",
    "end": "229680"
  },
  {
    "text": "p",
    "start": "229680",
    "end": "230560"
  },
  {
    "text": "via localhost or via the ip address of p",
    "start": "230560",
    "end": "235200"
  },
  {
    "text": "next we will discuss part-to-part",
    "start": "235200",
    "end": "238840"
  },
  {
    "text": "communication the specification requires",
    "start": "238840",
    "end": "241840"
  },
  {
    "text": "that a container c1 that is executing",
    "start": "241840",
    "end": "245200"
  },
  {
    "text": "in the context of a part p1 can",
    "start": "245200",
    "end": "248400"
  },
  {
    "text": "communicate",
    "start": "248400",
    "end": "249280"
  },
  {
    "text": "with any other container c2 that is",
    "start": "249280",
    "end": "252400"
  },
  {
    "text": "executing in the context",
    "start": "252400",
    "end": "254080"
  },
  {
    "text": "of any other part p2 via the address",
    "start": "254080",
    "end": "257840"
  },
  {
    "text": "of p2 again",
    "start": "257840",
    "end": "261120"
  },
  {
    "text": "represented graphically a container c1",
    "start": "261120",
    "end": "264639"
  },
  {
    "text": "that is executing in the context of a",
    "start": "264639",
    "end": "266880"
  },
  {
    "text": "port p1",
    "start": "266880",
    "end": "268479"
  },
  {
    "text": "can communicate with any other container",
    "start": "268479",
    "end": "271280"
  },
  {
    "text": "c2",
    "start": "271280",
    "end": "272320"
  },
  {
    "text": "that is executing in the context of any",
    "start": "272320",
    "end": "275199"
  },
  {
    "text": "other part p2",
    "start": "275199",
    "end": "276880"
  },
  {
    "text": "via the address of p2 please note",
    "start": "276880",
    "end": "280479"
  },
  {
    "text": "that this requirement does not include",
    "start": "280479",
    "end": "282960"
  },
  {
    "text": "the node",
    "start": "282960",
    "end": "283919"
  },
  {
    "text": "p1 or p2 is hosted on",
    "start": "283919",
    "end": "286960"
  },
  {
    "text": "therefore p1 could be hosted on the same",
    "start": "286960",
    "end": "290639"
  },
  {
    "text": "or a different node as p2 next",
    "start": "290639",
    "end": "294160"
  },
  {
    "text": "we will discuss daemon to part",
    "start": "294160",
    "end": "295919"
  },
  {
    "text": "communication",
    "start": "295919",
    "end": "298639"
  },
  {
    "text": "the specification requires that a daemon",
    "start": "298720",
    "end": "301840"
  },
  {
    "text": "d",
    "start": "301840",
    "end": "302479"
  },
  {
    "text": "that is hosted on a node n can",
    "start": "302479",
    "end": "305120"
  },
  {
    "text": "communicate with any container c",
    "start": "305120",
    "end": "307919"
  },
  {
    "text": "that is executing in the context of a",
    "start": "307919",
    "end": "310479"
  },
  {
    "text": "part p",
    "start": "310479",
    "end": "311440"
  },
  {
    "text": "that is also hosted on n via the address",
    "start": "311440",
    "end": "314880"
  },
  {
    "text": "of",
    "start": "314880",
    "end": "315199"
  },
  {
    "text": "p again",
    "start": "315199",
    "end": "318800"
  },
  {
    "text": "represent it graphically a daemon d",
    "start": "318800",
    "end": "322479"
  },
  {
    "text": "that is hosted on a node n can",
    "start": "322479",
    "end": "324960"
  },
  {
    "text": "communicate with any container c",
    "start": "324960",
    "end": "327759"
  },
  {
    "text": "that is executing in the context of a",
    "start": "327759",
    "end": "330160"
  },
  {
    "text": "port p",
    "start": "330160",
    "end": "331280"
  },
  {
    "text": "that is also hosted on n via the address",
    "start": "331280",
    "end": "334320"
  },
  {
    "text": "of p",
    "start": "334320",
    "end": "336000"
  },
  {
    "text": "please note that this requirement does",
    "start": "336000",
    "end": "338880"
  },
  {
    "text": "include",
    "start": "338880",
    "end": "339840"
  },
  {
    "text": "the node d and p are hosted on",
    "start": "339840",
    "end": "343039"
  },
  {
    "text": "additionally however strictly speaking",
    "start": "343039",
    "end": "345440"
  },
  {
    "text": "not part of kubernetes networking",
    "start": "345440",
    "end": "347680"
  },
  {
    "text": "but provided on top of kubernetes",
    "start": "347680",
    "end": "349600"
  },
  {
    "text": "networking kubernetes provides",
    "start": "349600",
    "end": "351759"
  },
  {
    "text": "kubernetes services",
    "start": "351759",
    "end": "353120"
  },
  {
    "text": "and kubernetes ingress we will discuss",
    "start": "353120",
    "end": "356639"
  },
  {
    "text": "kubernetes services",
    "start": "356639",
    "end": "358080"
  },
  {
    "text": "both cluster ip services and node port",
    "start": "358080",
    "end": "360960"
  },
  {
    "text": "services",
    "start": "360960",
    "end": "362000"
  },
  {
    "text": "as well as ingress when we discuss the",
    "start": "362000",
    "end": "364479"
  },
  {
    "text": "idealized implementation",
    "start": "364479",
    "end": "366080"
  },
  {
    "text": "of kubernetes networking next up",
    "start": "366080",
    "end": "369759"
  },
  {
    "text": "the idealized kubernetes networking",
    "start": "369759",
    "end": "371919"
  },
  {
    "text": "implementation",
    "start": "371919",
    "end": "374319"
  },
  {
    "text": "in this presentation we will rely on",
    "start": "374319",
    "end": "376800"
  },
  {
    "text": "conceptual",
    "start": "376800",
    "end": "377680"
  },
  {
    "text": "instead of actual implementations of a",
    "start": "377680",
    "end": "379840"
  },
  {
    "text": "kubernetes network",
    "start": "379840",
    "end": "381199"
  },
  {
    "text": "to reason about the life of a message in",
    "start": "381199",
    "end": "383600"
  },
  {
    "text": "the kubernetes cluster",
    "start": "383600",
    "end": "385600"
  },
  {
    "text": "so the model we are about to discuss",
    "start": "385600",
    "end": "387680"
  },
  {
    "text": "describes a conceptual network plugin",
    "start": "387680",
    "end": "390160"
  },
  {
    "text": "it does not describe an actual network",
    "start": "390160",
    "end": "392240"
  },
  {
    "text": "plugin",
    "start": "392240",
    "end": "393360"
  },
  {
    "text": "we use this model as an educational",
    "start": "393360",
    "end": "395759"
  },
  {
    "text": "model",
    "start": "395759",
    "end": "397600"
  },
  {
    "text": "before we discuss a model of kubernetes",
    "start": "397600",
    "end": "399680"
  },
  {
    "text": "networking in particular",
    "start": "399680",
    "end": "401600"
  },
  {
    "text": "we will briefly discuss a model of",
    "start": "401600",
    "end": "403360"
  },
  {
    "text": "networking in general",
    "start": "403360",
    "end": "405759"
  },
  {
    "text": "a communicating system can be modeled as",
    "start": "405759",
    "end": "408639"
  },
  {
    "text": "a graph",
    "start": "408639",
    "end": "410639"
  },
  {
    "text": "the nodes of the graph consists of a set",
    "start": "410639",
    "end": "412960"
  },
  {
    "text": "of containers",
    "start": "412960",
    "end": "414800"
  },
  {
    "text": "and a set of switches again",
    "start": "414800",
    "end": "417840"
  },
  {
    "text": "here a switch is a conceptual component",
    "start": "417840",
    "end": "421120"
  },
  {
    "text": "not an actual component",
    "start": "421120",
    "end": "424479"
  },
  {
    "text": "a switch can be modeled as a function",
    "start": "424560",
    "end": "427199"
  },
  {
    "text": "and a forward information base",
    "start": "427199",
    "end": "429680"
  },
  {
    "text": "a switch can match any part of a message",
    "start": "429680",
    "end": "432479"
  },
  {
    "text": "typically the source address",
    "start": "432479",
    "end": "434160"
  },
  {
    "text": "source port target address and target",
    "start": "434160",
    "end": "436880"
  },
  {
    "text": "port",
    "start": "436880",
    "end": "437520"
  },
  {
    "text": "against its forward information base to",
    "start": "437520",
    "end": "440080"
  },
  {
    "text": "determine the next",
    "start": "440080",
    "end": "441120"
  },
  {
    "text": "action here we assume that a switch may",
    "start": "441120",
    "end": "445199"
  },
  {
    "text": "either drop a message",
    "start": "445199",
    "end": "446960"
  },
  {
    "text": "deliver a message to a container or",
    "start": "446960",
    "end": "449039"
  },
  {
    "text": "daemon",
    "start": "449039",
    "end": "450080"
  },
  {
    "text": "forward a message to another switch or",
    "start": "450080",
    "end": "452720"
  },
  {
    "text": "translate a message",
    "start": "452720",
    "end": "453919"
  },
  {
    "text": "before calling itself recursively with",
    "start": "453919",
    "end": "456720"
  },
  {
    "text": "the translated",
    "start": "456720",
    "end": "457680"
  },
  {
    "text": "message the links",
    "start": "457680",
    "end": "460880"
  },
  {
    "text": "or edges of the graph consist of links",
    "start": "460880",
    "end": "463360"
  },
  {
    "text": "between containers and switches",
    "start": "463360",
    "end": "466080"
  },
  {
    "text": "and links between switches and switches",
    "start": "466080",
    "end": "469520"
  },
  {
    "text": "messages may only travel between links",
    "start": "469520",
    "end": "474080"
  },
  {
    "text": "so as long as a network of switches the",
    "start": "474800",
    "end": "477440"
  },
  {
    "text": "forward information basis",
    "start": "477440",
    "end": "479360"
  },
  {
    "text": "and their connections satisfy the",
    "start": "479360",
    "end": "481280"
  },
  {
    "text": "constraints of the kubernetes network",
    "start": "481280",
    "end": "483199"
  },
  {
    "text": "specification",
    "start": "483199",
    "end": "484800"
  },
  {
    "text": "it is a valid kubernetes network",
    "start": "484800",
    "end": "486960"
  },
  {
    "text": "implementation",
    "start": "486960",
    "end": "489440"
  },
  {
    "text": "we will now discuss one possible network",
    "start": "489440",
    "end": "493039"
  },
  {
    "text": "as discussed we will reason about the",
    "start": "493039",
    "end": "495520"
  },
  {
    "text": "kubernetes network",
    "start": "495520",
    "end": "497199"
  },
  {
    "text": "in terms of a network graph but how does",
    "start": "497199",
    "end": "500800"
  },
  {
    "text": "a network graph",
    "start": "500800",
    "end": "502160"
  },
  {
    "text": "that is a valid kubernetes network",
    "start": "502160",
    "end": "504840"
  },
  {
    "text": "implementation satisfying the kubernetes",
    "start": "504840",
    "end": "507360"
  },
  {
    "text": "network specification",
    "start": "507360",
    "end": "509360"
  },
  {
    "text": "actually look like from here on out",
    "start": "509360",
    "end": "513200"
  },
  {
    "text": "we will use a simple kubernetes cluster",
    "start": "513200",
    "end": "515518"
  },
  {
    "text": "as an example",
    "start": "515519",
    "end": "518159"
  },
  {
    "text": "the cluster consists of two nodes n1",
    "start": "518159",
    "end": "521518"
  },
  {
    "text": "and n2 each node",
    "start": "521519",
    "end": "524800"
  },
  {
    "text": "hosts a daemon for example the cubelet",
    "start": "524800",
    "end": "528000"
  },
  {
    "text": "d1 and d2",
    "start": "528000",
    "end": "531519"
  },
  {
    "text": "additionally each node hosts two parts",
    "start": "531760",
    "end": "536080"
  },
  {
    "text": "p1 and p3 as well as p2 and p4",
    "start": "536080",
    "end": "541680"
  },
  {
    "text": "and finally each part executes",
    "start": "541680",
    "end": "544720"
  },
  {
    "text": "two containers",
    "start": "544720",
    "end": "548000"
  },
  {
    "text": "again elements with an ip address",
    "start": "548000",
    "end": "550640"
  },
  {
    "text": "consists of nodes",
    "start": "550640",
    "end": "551920"
  },
  {
    "text": "and parts and finally",
    "start": "551920",
    "end": "555279"
  },
  {
    "text": "in this example the first container of",
    "start": "555279",
    "end": "558000"
  },
  {
    "text": "each part",
    "start": "558000",
    "end": "558640"
  },
  {
    "text": "listens on port 8080 and the second",
    "start": "558640",
    "end": "561440"
  },
  {
    "text": "container",
    "start": "561440",
    "end": "562240"
  },
  {
    "text": "of each part listens on port 90",
    "start": "562240",
    "end": "565440"
  },
  {
    "text": "90. so for this example",
    "start": "565440",
    "end": "569519"
  },
  {
    "text": "what does a possible network graph look",
    "start": "569519",
    "end": "571760"
  },
  {
    "text": "like",
    "start": "571760",
    "end": "573680"
  },
  {
    "text": "first we assume that for every part",
    "start": "573680",
    "end": "576720"
  },
  {
    "text": "there exists a corresponding switch from",
    "start": "576720",
    "end": "579680"
  },
  {
    "text": "here on out called",
    "start": "579680",
    "end": "581120"
  },
  {
    "text": "portswitch for every container",
    "start": "581120",
    "end": "585120"
  },
  {
    "text": "executing in the context of a pod there",
    "start": "585120",
    "end": "588399"
  },
  {
    "text": "exists a link",
    "start": "588399",
    "end": "589600"
  },
  {
    "text": "from the container to the corresponding",
    "start": "589600",
    "end": "592240"
  },
  {
    "text": "part switch",
    "start": "592240",
    "end": "594880"
  },
  {
    "text": "next we assume that for every node",
    "start": "595120",
    "end": "598240"
  },
  {
    "text": "there exists a corresponding switch from",
    "start": "598240",
    "end": "600959"
  },
  {
    "text": "here on out",
    "start": "600959",
    "end": "601760"
  },
  {
    "text": "called node switch",
    "start": "601760",
    "end": "605120"
  },
  {
    "text": "for every part hosted on a node there",
    "start": "605120",
    "end": "608320"
  },
  {
    "text": "exists a link",
    "start": "608320",
    "end": "609440"
  },
  {
    "text": "from the corresponding part switch to",
    "start": "609440",
    "end": "611760"
  },
  {
    "text": "the corresponding",
    "start": "611760",
    "end": "612880"
  },
  {
    "text": "node switch additionally",
    "start": "612880",
    "end": "616160"
  },
  {
    "text": "for every daemon hosted on a node there",
    "start": "616160",
    "end": "619120"
  },
  {
    "text": "exists a link",
    "start": "619120",
    "end": "620320"
  },
  {
    "text": "from the daemon to the corresponding",
    "start": "620320",
    "end": "622880"
  },
  {
    "text": "node switch",
    "start": "622880",
    "end": "625040"
  },
  {
    "text": "and finally there exists a link from",
    "start": "625040",
    "end": "628160"
  },
  {
    "text": "every node switch",
    "start": "628160",
    "end": "629279"
  },
  {
    "text": "to every other node switch",
    "start": "629279",
    "end": "632320"
  },
  {
    "text": "now to complete the network graph we",
    "start": "632320",
    "end": "635200"
  },
  {
    "text": "must determine",
    "start": "635200",
    "end": "636160"
  },
  {
    "text": "the forward information base for node",
    "start": "636160",
    "end": "638480"
  },
  {
    "text": "switches",
    "start": "638480",
    "end": "639360"
  },
  {
    "text": "and port switches the forward",
    "start": "639360",
    "end": "642480"
  },
  {
    "text": "information base of a port switch",
    "start": "642480",
    "end": "644640"
  },
  {
    "text": "contains three types of entries",
    "start": "644640",
    "end": "647839"
  },
  {
    "text": "first local delivery via localhost",
    "start": "647839",
    "end": "652399"
  },
  {
    "text": "next local delivery with the parts ip",
    "start": "652399",
    "end": "655680"
  },
  {
    "text": "address",
    "start": "655680",
    "end": "658000"
  },
  {
    "text": "and next any other message will be",
    "start": "658000",
    "end": "660959"
  },
  {
    "text": "forwarded",
    "start": "660959",
    "end": "661839"
  },
  {
    "text": "to the linked node switch",
    "start": "661839",
    "end": "665279"
  },
  {
    "text": "similarly the forward information base",
    "start": "665279",
    "end": "668079"
  },
  {
    "text": "of a node switch",
    "start": "668079",
    "end": "669440"
  },
  {
    "text": "contains two types of entries",
    "start": "669440",
    "end": "672480"
  },
  {
    "text": "first messages that target a part",
    "start": "672480",
    "end": "675760"
  },
  {
    "text": "that is hosted on the corresponding node",
    "start": "675760",
    "end": "678800"
  },
  {
    "text": "are forwarded to the corresponding part",
    "start": "678800",
    "end": "681519"
  },
  {
    "text": "switch",
    "start": "681519",
    "end": "683440"
  },
  {
    "text": "and next messages that target a part",
    "start": "683440",
    "end": "687200"
  },
  {
    "text": "that is not hosted on the corresponding",
    "start": "687200",
    "end": "689680"
  },
  {
    "text": "node",
    "start": "689680",
    "end": "690560"
  },
  {
    "text": "are forwarded to the node switch",
    "start": "690560",
    "end": "693360"
  },
  {
    "text": "corresponding",
    "start": "693360",
    "end": "694640"
  },
  {
    "text": "to the node that does host the part",
    "start": "694640",
    "end": "698079"
  },
  {
    "text": "later on we will expand the forward",
    "start": "698079",
    "end": "700399"
  },
  {
    "text": "information base of node switches",
    "start": "700399",
    "end": "702720"
  },
  {
    "text": "to accommodate for kubernetes services",
    "start": "702720",
    "end": "705200"
  },
  {
    "text": "and add rules",
    "start": "705200",
    "end": "706240"
  },
  {
    "text": "to translate messages",
    "start": "706240",
    "end": "709680"
  },
  {
    "text": "this network consisting of containers",
    "start": "709760",
    "end": "712399"
  },
  {
    "text": "and daemons",
    "start": "712399",
    "end": "713519"
  },
  {
    "text": "as well as port switches and node",
    "start": "713519",
    "end": "715600"
  },
  {
    "text": "switches",
    "start": "715600",
    "end": "716800"
  },
  {
    "text": "in combination with the aforementioned",
    "start": "716800",
    "end": "719279"
  },
  {
    "text": "forward information basis",
    "start": "719279",
    "end": "721440"
  },
  {
    "text": "constitutes a valid kubernetes",
    "start": "721440",
    "end": "724480"
  },
  {
    "text": "network in this last section",
    "start": "724480",
    "end": "727600"
  },
  {
    "text": "we will walk through a sequence of",
    "start": "727600",
    "end": "729600"
  },
  {
    "text": "examples",
    "start": "729600",
    "end": "730720"
  },
  {
    "text": "highlighting container to container",
    "start": "730720",
    "end": "732480"
  },
  {
    "text": "communication part-to-part communication",
    "start": "732480",
    "end": "735360"
  },
  {
    "text": "demon support communication services and",
    "start": "735360",
    "end": "738560"
  },
  {
    "text": "ingress a fair warning",
    "start": "738560",
    "end": "741839"
  },
  {
    "text": "this section is tediously repetitive",
    "start": "741839",
    "end": "745279"
  },
  {
    "text": "but if you follow along you will gain a",
    "start": "745279",
    "end": "747360"
  },
  {
    "text": "solid understanding",
    "start": "747360",
    "end": "748639"
  },
  {
    "text": "of the underlying mechanics",
    "start": "748639",
    "end": "751760"
  },
  {
    "text": "in this example we will discuss",
    "start": "751760",
    "end": "754000"
  },
  {
    "text": "container to container communication",
    "start": "754000",
    "end": "758000"
  },
  {
    "text": "here we focus on container c1.1",
    "start": "758000",
    "end": "762399"
  },
  {
    "text": "and c1.2 executing",
    "start": "762399",
    "end": "765680"
  },
  {
    "text": "in the context of part p1",
    "start": "765680",
    "end": "769600"
  },
  {
    "text": "container c1.1 will communicate",
    "start": "769600",
    "end": "773120"
  },
  {
    "text": "with c 1.2 via localhost",
    "start": "773120",
    "end": "776720"
  },
  {
    "text": "recall that c 1.2 is listening on",
    "start": "776720",
    "end": "780720"
  },
  {
    "text": "port 9090",
    "start": "780720",
    "end": "784240"
  },
  {
    "text": "first container c 1.1",
    "start": "784560",
    "end": "788000"
  },
  {
    "text": "will send a message m via its edge",
    "start": "788000",
    "end": "791440"
  },
  {
    "text": "to port switch p1 the target address",
    "start": "791440",
    "end": "795680"
  },
  {
    "text": "of m is localhost the target port of m",
    "start": "795680",
    "end": "799360"
  },
  {
    "text": "is 9090.",
    "start": "799360",
    "end": "802800"
  },
  {
    "text": "the part switch p1 will receive the",
    "start": "802880",
    "end": "805519"
  },
  {
    "text": "message",
    "start": "805519",
    "end": "806399"
  },
  {
    "text": "and match the message against its",
    "start": "806399",
    "end": "808639"
  },
  {
    "text": "forward information base",
    "start": "808639",
    "end": "810959"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "810959",
    "end": "813360"
  },
  {
    "text": "instructs",
    "start": "813360",
    "end": "814320"
  },
  {
    "text": "the port switch to deliver the message",
    "start": "814320",
    "end": "817200"
  },
  {
    "text": "to container c1.2",
    "start": "817200",
    "end": "820880"
  },
  {
    "text": "port switch p1 will send the message",
    "start": "820880",
    "end": "823920"
  },
  {
    "text": "m via its edge to container",
    "start": "823920",
    "end": "827279"
  },
  {
    "text": "c 1.2 and finally",
    "start": "827279",
    "end": "831120"
  },
  {
    "text": "the container will receive the message",
    "start": "831120",
    "end": "834560"
  },
  {
    "text": "next in this example we will discuss",
    "start": "834560",
    "end": "837760"
  },
  {
    "text": "port to part communication the ports are",
    "start": "837760",
    "end": "841040"
  },
  {
    "text": "located on the same node",
    "start": "841040",
    "end": "844079"
  },
  {
    "text": "here we focus on container c1.1",
    "start": "844079",
    "end": "848560"
  },
  {
    "text": "executing in the context of part p1",
    "start": "848560",
    "end": "852240"
  },
  {
    "text": "and on container c3.1",
    "start": "852240",
    "end": "855279"
  },
  {
    "text": "executing in the context of part p3",
    "start": "855279",
    "end": "859040"
  },
  {
    "text": "both p1 and p3 are hosted",
    "start": "859040",
    "end": "862480"
  },
  {
    "text": "on the node n1 container c1.1",
    "start": "862480",
    "end": "867279"
  },
  {
    "text": "will communicate with c 3.1",
    "start": "867279",
    "end": "870800"
  },
  {
    "text": "via the address of p3 recall",
    "start": "870800",
    "end": "875120"
  },
  {
    "text": "that c 3.1 is listening on port",
    "start": "875120",
    "end": "878720"
  },
  {
    "text": "80 80.",
    "start": "878720",
    "end": "881920"
  },
  {
    "text": "first container c 1.1",
    "start": "882160",
    "end": "885360"
  },
  {
    "text": "will send a message m via its edge",
    "start": "885360",
    "end": "889040"
  },
  {
    "text": "to port switch p1 the target address of",
    "start": "889040",
    "end": "892639"
  },
  {
    "text": "m",
    "start": "892639",
    "end": "893279"
  },
  {
    "text": "is the address of port p3 the target",
    "start": "893279",
    "end": "896079"
  },
  {
    "text": "port",
    "start": "896079",
    "end": "896480"
  },
  {
    "text": "of m is 8080",
    "start": "896480",
    "end": "900560"
  },
  {
    "text": "the port switch p1 will receive the",
    "start": "900560",
    "end": "902800"
  },
  {
    "text": "message",
    "start": "902800",
    "end": "903760"
  },
  {
    "text": "and match the message against its",
    "start": "903760",
    "end": "905680"
  },
  {
    "text": "forward information base",
    "start": "905680",
    "end": "907680"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "907680",
    "end": "910000"
  },
  {
    "text": "instructs the port switch",
    "start": "910000",
    "end": "911760"
  },
  {
    "text": "to forward the message to node switch n1",
    "start": "911760",
    "end": "916000"
  },
  {
    "text": "port switch p1 will send the message in",
    "start": "916000",
    "end": "919040"
  },
  {
    "text": "via its edge to node switch n1",
    "start": "919040",
    "end": "923360"
  },
  {
    "text": "the node switch n1 will receive the",
    "start": "923360",
    "end": "925199"
  },
  {
    "text": "message and",
    "start": "925199",
    "end": "926560"
  },
  {
    "text": "match the message against its forward",
    "start": "926560",
    "end": "928399"
  },
  {
    "text": "information base",
    "start": "928399",
    "end": "929839"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "929839",
    "end": "931839"
  },
  {
    "text": "instructs the node switch to forward the",
    "start": "931839",
    "end": "933839"
  },
  {
    "text": "message to port switch p3",
    "start": "933839",
    "end": "937279"
  },
  {
    "text": "node switch n1 will send the message m",
    "start": "937279",
    "end": "940079"
  },
  {
    "text": "via its edge to port switch p3",
    "start": "940079",
    "end": "944320"
  },
  {
    "text": "the port switch p3 will receive the",
    "start": "944399",
    "end": "946399"
  },
  {
    "text": "message and",
    "start": "946399",
    "end": "947440"
  },
  {
    "text": "match the message against its forward",
    "start": "947440",
    "end": "949440"
  },
  {
    "text": "information base",
    "start": "949440",
    "end": "950800"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "950800",
    "end": "952959"
  },
  {
    "text": "instructs the port switch",
    "start": "952959",
    "end": "954720"
  },
  {
    "text": "to deliver the message to container 3",
    "start": "954720",
    "end": "957839"
  },
  {
    "text": "1 portswitch p3",
    "start": "957839",
    "end": "961680"
  },
  {
    "text": "will send the message m via its edge to",
    "start": "961680",
    "end": "964480"
  },
  {
    "text": "container 31",
    "start": "964480",
    "end": "967199"
  },
  {
    "text": "and finally the container will receive",
    "start": "967199",
    "end": "969680"
  },
  {
    "text": "the message",
    "start": "969680",
    "end": "972240"
  },
  {
    "text": "next in this example we will discuss",
    "start": "972399",
    "end": "975279"
  },
  {
    "text": "part-to-part communication",
    "start": "975279",
    "end": "977199"
  },
  {
    "text": "however this time the ports are located",
    "start": "977199",
    "end": "980240"
  },
  {
    "text": "on different nodes",
    "start": "980240",
    "end": "982399"
  },
  {
    "text": "here we focus on container c 1.1",
    "start": "982399",
    "end": "986720"
  },
  {
    "text": "executing in the context of port p1",
    "start": "986720",
    "end": "989440"
  },
  {
    "text": "hosted on node",
    "start": "989440",
    "end": "990560"
  },
  {
    "text": "n1 and on container c2.1",
    "start": "990560",
    "end": "994079"
  },
  {
    "text": "executing in the context of port p2",
    "start": "994079",
    "end": "997040"
  },
  {
    "text": "hosted",
    "start": "997040",
    "end": "997839"
  },
  {
    "text": "on node n2 container c 1.1",
    "start": "997839",
    "end": "1002160"
  },
  {
    "text": "will communicate with c 2.1",
    "start": "1002160",
    "end": "1005199"
  },
  {
    "text": "via the address of p2 recall",
    "start": "1005199",
    "end": "1008800"
  },
  {
    "text": "that c 2.1 is listening on port 8080",
    "start": "1008800",
    "end": "1013600"
  },
  {
    "text": "first container c 1.1 will send a",
    "start": "1013600",
    "end": "1016880"
  },
  {
    "text": "message m",
    "start": "1016880",
    "end": "1018000"
  },
  {
    "text": "via its edge to port switch p1",
    "start": "1018000",
    "end": "1021120"
  },
  {
    "text": "the target address of n is the address",
    "start": "1021120",
    "end": "1023680"
  },
  {
    "text": "of port p2",
    "start": "1023680",
    "end": "1025120"
  },
  {
    "text": "the target port of n is 8080",
    "start": "1025120",
    "end": "1029280"
  },
  {
    "text": "the port switch p1 will receive the",
    "start": "1029280",
    "end": "1031600"
  },
  {
    "text": "message and match the message",
    "start": "1031600",
    "end": "1033520"
  },
  {
    "text": "against its forward information base it",
    "start": "1033520",
    "end": "1036000"
  },
  {
    "text": "will find a relevant entry",
    "start": "1036000",
    "end": "1037520"
  },
  {
    "text": "that instructs the port switch to",
    "start": "1037520",
    "end": "1039360"
  },
  {
    "text": "forward the message to node switch",
    "start": "1039360",
    "end": "1041280"
  },
  {
    "text": "n1 port switch p1 will send the message",
    "start": "1041280",
    "end": "1045120"
  },
  {
    "text": "m",
    "start": "1045120",
    "end": "1045600"
  },
  {
    "text": "via its edge to node switch n1",
    "start": "1045600",
    "end": "1049280"
  },
  {
    "text": "the node switch n1 will receive the",
    "start": "1049280",
    "end": "1051039"
  },
  {
    "text": "message and match the message against",
    "start": "1051039",
    "end": "1053200"
  },
  {
    "text": "its forward information base",
    "start": "1053200",
    "end": "1055200"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1055200",
    "end": "1056960"
  },
  {
    "text": "instructs the node switch to forward the",
    "start": "1056960",
    "end": "1058880"
  },
  {
    "text": "message to node switch",
    "start": "1058880",
    "end": "1060640"
  },
  {
    "text": "n2 node switch n1 will send the message",
    "start": "1060640",
    "end": "1065520"
  },
  {
    "text": "m",
    "start": "1065520",
    "end": "1066240"
  },
  {
    "text": "via its edge to node switch n2",
    "start": "1066240",
    "end": "1070559"
  },
  {
    "text": "the node switch n2 will receive the",
    "start": "1070559",
    "end": "1072720"
  },
  {
    "text": "message and match the message against",
    "start": "1072720",
    "end": "1074799"
  },
  {
    "text": "its forward information base",
    "start": "1074799",
    "end": "1076960"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1076960",
    "end": "1079120"
  },
  {
    "text": "instructs the node switch",
    "start": "1079120",
    "end": "1080640"
  },
  {
    "text": "to forward the message to port switch p2",
    "start": "1080640",
    "end": "1084880"
  },
  {
    "text": "the node switch n2 will send the message",
    "start": "1084880",
    "end": "1087200"
  },
  {
    "text": "m vls edge to port switch p2",
    "start": "1087200",
    "end": "1090960"
  },
  {
    "text": "the port switch p2 will receive the",
    "start": "1090960",
    "end": "1093280"
  },
  {
    "text": "message",
    "start": "1093280",
    "end": "1094080"
  },
  {
    "text": "and match the message against its",
    "start": "1094080",
    "end": "1095600"
  },
  {
    "text": "forward information base",
    "start": "1095600",
    "end": "1097520"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1097520",
    "end": "1099360"
  },
  {
    "text": "instructs the port switch to deliver the",
    "start": "1099360",
    "end": "1101280"
  },
  {
    "text": "message",
    "start": "1101280",
    "end": "1101919"
  },
  {
    "text": "to container c 2.1",
    "start": "1101919",
    "end": "1105440"
  },
  {
    "text": "port switch p2 will send the message n",
    "start": "1105440",
    "end": "1108000"
  },
  {
    "text": "via its edge",
    "start": "1108000",
    "end": "1108960"
  },
  {
    "text": "to container c 2.1",
    "start": "1108960",
    "end": "1113360"
  },
  {
    "text": "finally the container will receive the",
    "start": "1113600",
    "end": "1116000"
  },
  {
    "text": "message",
    "start": "1116000",
    "end": "1118160"
  },
  {
    "text": "next in this example we will discuss",
    "start": "1118160",
    "end": "1120880"
  },
  {
    "text": "daemon to part communication",
    "start": "1120880",
    "end": "1123600"
  },
  {
    "text": "here we focus on daemon d1 hosted on",
    "start": "1123600",
    "end": "1126880"
  },
  {
    "text": "node n1",
    "start": "1126880",
    "end": "1128240"
  },
  {
    "text": "and on container c1.1 executing in the",
    "start": "1128240",
    "end": "1131280"
  },
  {
    "text": "context of part p1",
    "start": "1131280",
    "end": "1132960"
  },
  {
    "text": "also hosted on n1",
    "start": "1132960",
    "end": "1136080"
  },
  {
    "text": "daemon d1 will communicate with c 1.1",
    "start": "1136080",
    "end": "1139840"
  },
  {
    "text": "via the address of p1",
    "start": "1139840",
    "end": "1142080"
  },
  {
    "text": "recall that c1.1 is listening on port",
    "start": "1142080",
    "end": "1145360"
  },
  {
    "text": "8080",
    "start": "1145360",
    "end": "1147520"
  },
  {
    "text": "first daemon d1 will send a message in",
    "start": "1147520",
    "end": "1150880"
  },
  {
    "text": "via its edge to node switch n1",
    "start": "1150880",
    "end": "1154240"
  },
  {
    "text": "the target address of n is the address",
    "start": "1154240",
    "end": "1156720"
  },
  {
    "text": "of part p1",
    "start": "1156720",
    "end": "1158000"
  },
  {
    "text": "the target port of m is 8080.",
    "start": "1158000",
    "end": "1161840"
  },
  {
    "text": "the node switch n1 will receive the",
    "start": "1161840",
    "end": "1163919"
  },
  {
    "text": "message and match the message",
    "start": "1163919",
    "end": "1165919"
  },
  {
    "text": "against its forward information base it",
    "start": "1165919",
    "end": "1168640"
  },
  {
    "text": "will find a relevant entry",
    "start": "1168640",
    "end": "1170160"
  },
  {
    "text": "that instructs the node switch to",
    "start": "1170160",
    "end": "1171919"
  },
  {
    "text": "forward the message to port switch p1",
    "start": "1171919",
    "end": "1175200"
  },
  {
    "text": "node switch n1 will send the message in",
    "start": "1175200",
    "end": "1178160"
  },
  {
    "text": "near its edge",
    "start": "1178160",
    "end": "1179280"
  },
  {
    "text": "to port switch p1 the port switch p1",
    "start": "1179280",
    "end": "1183600"
  },
  {
    "text": "will receive the message and match the",
    "start": "1183600",
    "end": "1185840"
  },
  {
    "text": "message against its forward information",
    "start": "1185840",
    "end": "1187919"
  },
  {
    "text": "base",
    "start": "1187919",
    "end": "1188799"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1188799",
    "end": "1190799"
  },
  {
    "text": "instructs the port switch",
    "start": "1190799",
    "end": "1192080"
  },
  {
    "text": "to deliver the message to container c",
    "start": "1192080",
    "end": "1194080"
  },
  {
    "text": "1.1",
    "start": "1194080",
    "end": "1196160"
  },
  {
    "text": "port switch p1 will send the message m",
    "start": "1196160",
    "end": "1198640"
  },
  {
    "text": "via its edge",
    "start": "1198640",
    "end": "1199760"
  },
  {
    "text": "to container c 1.1",
    "start": "1199760",
    "end": "1202880"
  },
  {
    "text": "and finally the container will receive",
    "start": "1202880",
    "end": "1204880"
  },
  {
    "text": "the message",
    "start": "1204880",
    "end": "1207840"
  },
  {
    "text": "next in this example we will discuss",
    "start": "1208880",
    "end": "1211679"
  },
  {
    "text": "kubernetes services",
    "start": "1211679",
    "end": "1213440"
  },
  {
    "text": "here cluster ip services some",
    "start": "1213440",
    "end": "1216159"
  },
  {
    "text": "understanding of services will be",
    "start": "1216159",
    "end": "1218840"
  },
  {
    "text": "beneficial",
    "start": "1218840",
    "end": "1220400"
  },
  {
    "text": "kubernetes services is an anycast domain",
    "start": "1220400",
    "end": "1223280"
  },
  {
    "text": "where a message",
    "start": "1223280",
    "end": "1224240"
  },
  {
    "text": "that is sent to the anycast domain is",
    "start": "1224240",
    "end": "1226640"
  },
  {
    "text": "routed to an arbitrary member of the",
    "start": "1226640",
    "end": "1228799"
  },
  {
    "text": "anycast domain",
    "start": "1228799",
    "end": "1230799"
  },
  {
    "text": "a cluster service is intended for",
    "start": "1230799",
    "end": "1233120"
  },
  {
    "text": "internal communication",
    "start": "1233120",
    "end": "1234960"
  },
  {
    "text": "that is the source of the message is a",
    "start": "1234960",
    "end": "1237440"
  },
  {
    "text": "container",
    "start": "1237440",
    "end": "1238400"
  },
  {
    "text": "executing in the context of a part on",
    "start": "1238400",
    "end": "1240720"
  },
  {
    "text": "the same cluster",
    "start": "1240720",
    "end": "1243039"
  },
  {
    "text": "the service is identified via a service",
    "start": "1243039",
    "end": "1245600"
  },
  {
    "text": "ip address",
    "start": "1245600",
    "end": "1247679"
  },
  {
    "text": "this listing defines a service that",
    "start": "1247679",
    "end": "1250400"
  },
  {
    "text": "selects all",
    "start": "1250400",
    "end": "1251440"
  },
  {
    "text": "ports with a label value pair of foo",
    "start": "1251440",
    "end": "1254720"
  },
  {
    "text": "bar and map support 80 to port",
    "start": "1254720",
    "end": "1258080"
  },
  {
    "text": "8080. kubernetes will allocate an ip",
    "start": "1258080",
    "end": "1262000"
  },
  {
    "text": "address for this service and configure",
    "start": "1262000",
    "end": "1264400"
  },
  {
    "text": "the forward information base",
    "start": "1264400",
    "end": "1266480"
  },
  {
    "text": "so that a message with a target address",
    "start": "1266480",
    "end": "1268880"
  },
  {
    "text": "of the service ip address",
    "start": "1268880",
    "end": "1270720"
  },
  {
    "text": "in the target port of 80 will be",
    "start": "1270720",
    "end": "1273120"
  },
  {
    "text": "received",
    "start": "1273120",
    "end": "1273840"
  },
  {
    "text": "by a container of any part matching the",
    "start": "1273840",
    "end": "1276880"
  },
  {
    "text": "selector",
    "start": "1276880",
    "end": "1277600"
  },
  {
    "text": "listening on port 8080",
    "start": "1277600",
    "end": "1281600"
  },
  {
    "text": "here we focus on container c1.1",
    "start": "1281840",
    "end": "1285600"
  },
  {
    "text": "executing in the context of part p1",
    "start": "1285600",
    "end": "1289039"
  },
  {
    "text": "hosted on node n1 and on the container",
    "start": "1289039",
    "end": "1292240"
  },
  {
    "text": "c2.1",
    "start": "1292240",
    "end": "1293360"
  },
  {
    "text": "and c4.1 executing in the context of",
    "start": "1293360",
    "end": "1296799"
  },
  {
    "text": "port p2",
    "start": "1296799",
    "end": "1297679"
  },
  {
    "text": "and p4 both hosted on node n2",
    "start": "1297679",
    "end": "1302240"
  },
  {
    "text": "note that both p2 and p4",
    "start": "1302240",
    "end": "1305600"
  },
  {
    "text": "have a label value pair of fu bar",
    "start": "1305600",
    "end": "1309679"
  },
  {
    "text": "container c 1.1 will communicate with",
    "start": "1309679",
    "end": "1312559"
  },
  {
    "text": "the service",
    "start": "1312559",
    "end": "1313440"
  },
  {
    "text": "with the ip address of the service on",
    "start": "1313440",
    "end": "1315760"
  },
  {
    "text": "port 80.",
    "start": "1315760",
    "end": "1316840"
  },
  {
    "text": "first container 1.1 will send a message",
    "start": "1316840",
    "end": "1320400"
  },
  {
    "text": "m via its edge to port switch p1",
    "start": "1320400",
    "end": "1324080"
  },
  {
    "text": "the target address of n is the address",
    "start": "1324080",
    "end": "1326640"
  },
  {
    "text": "of the service",
    "start": "1326640",
    "end": "1327840"
  },
  {
    "text": "the target port of n is 80.",
    "start": "1327840",
    "end": "1331039"
  },
  {
    "text": "the pod switch p1 will receive the",
    "start": "1331039",
    "end": "1333120"
  },
  {
    "text": "message and match the message against",
    "start": "1333120",
    "end": "1335280"
  },
  {
    "text": "its forward information base",
    "start": "1335280",
    "end": "1337200"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1337200",
    "end": "1339120"
  },
  {
    "text": "instructs the port switch",
    "start": "1339120",
    "end": "1340640"
  },
  {
    "text": "to forward the message to nodeswitch n1",
    "start": "1340640",
    "end": "1344320"
  },
  {
    "text": "port switch p1 will send the message m",
    "start": "1344320",
    "end": "1347120"
  },
  {
    "text": "via its edge",
    "start": "1347120",
    "end": "1348080"
  },
  {
    "text": "to node switch and 1. the node switch n1",
    "start": "1348080",
    "end": "1352159"
  },
  {
    "text": "will receive the message and match the",
    "start": "1352159",
    "end": "1354080"
  },
  {
    "text": "message against its forward information",
    "start": "1354080",
    "end": "1355760"
  },
  {
    "text": "base",
    "start": "1355760",
    "end": "1357039"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1357039",
    "end": "1359440"
  },
  {
    "text": "instructs the note switch",
    "start": "1359440",
    "end": "1361039"
  },
  {
    "text": "to translate the target address",
    "start": "1361039",
    "end": "1364080"
  },
  {
    "text": "to the address of port p2 and the target",
    "start": "1364080",
    "end": "1366559"
  },
  {
    "text": "port to 8080",
    "start": "1366559",
    "end": "1368000"
  },
  {
    "text": "or to translate the target address to",
    "start": "1368000",
    "end": "1370080"
  },
  {
    "text": "the address of port p4",
    "start": "1370080",
    "end": "1371760"
  },
  {
    "text": "and the target port to 8080",
    "start": "1371760",
    "end": "1375039"
  },
  {
    "text": "here we assume the target address is",
    "start": "1375039",
    "end": "1377600"
  },
  {
    "text": "translated",
    "start": "1377600",
    "end": "1378720"
  },
  {
    "text": "to the address of part p2 and the target",
    "start": "1378720",
    "end": "1381840"
  },
  {
    "text": "port is translated to 8080.",
    "start": "1381840",
    "end": "1385039"
  },
  {
    "text": "the node switch will call itself and",
    "start": "1385039",
    "end": "1387520"
  },
  {
    "text": "match the new message",
    "start": "1387520",
    "end": "1388880"
  },
  {
    "text": "against its forward information base and",
    "start": "1388880",
    "end": "1391440"
  },
  {
    "text": "from here",
    "start": "1391440",
    "end": "1392320"
  },
  {
    "text": "we already know what is going to happen",
    "start": "1392320",
    "end": "1396640"
  },
  {
    "text": "next in this example we will discuss",
    "start": "1396640",
    "end": "1399200"
  },
  {
    "text": "kubernetes services",
    "start": "1399200",
    "end": "1400720"
  },
  {
    "text": "here notepod services again",
    "start": "1400720",
    "end": "1403919"
  },
  {
    "text": "some understanding of services will be",
    "start": "1403919",
    "end": "1405840"
  },
  {
    "text": "beneficial",
    "start": "1405840",
    "end": "1408159"
  },
  {
    "text": "a noteport service is intended for",
    "start": "1408159",
    "end": "1410320"
  },
  {
    "text": "external communication",
    "start": "1410320",
    "end": "1411919"
  },
  {
    "text": "that is the source of the message is a",
    "start": "1411919",
    "end": "1414159"
  },
  {
    "text": "process outside the cluster",
    "start": "1414159",
    "end": "1416880"
  },
  {
    "text": "on the network the service is identified",
    "start": "1416880",
    "end": "1419919"
  },
  {
    "text": "via a node ip address and a port",
    "start": "1419919",
    "end": "1423919"
  },
  {
    "text": "this listing defines a service that",
    "start": "1423919",
    "end": "1426000"
  },
  {
    "text": "selects all ports with a label value",
    "start": "1426000",
    "end": "1428240"
  },
  {
    "text": "pair or foo",
    "start": "1428240",
    "end": "1429840"
  },
  {
    "text": "and maps the node port 30000 to port",
    "start": "1429840",
    "end": "1432720"
  },
  {
    "text": "8080.",
    "start": "1432720",
    "end": "1434640"
  },
  {
    "text": "kubernetes will configure the forward",
    "start": "1434640",
    "end": "1436559"
  },
  {
    "text": "information base",
    "start": "1436559",
    "end": "1437760"
  },
  {
    "text": "so that a message with a target address",
    "start": "1437760",
    "end": "1439919"
  },
  {
    "text": "of any node's ip address",
    "start": "1439919",
    "end": "1441600"
  },
  {
    "text": "in the target port of 30 000 will be",
    "start": "1441600",
    "end": "1444159"
  },
  {
    "text": "received by a container of any part",
    "start": "1444159",
    "end": "1446960"
  },
  {
    "text": "matching the selector listening on port",
    "start": "1446960",
    "end": "1450159"
  },
  {
    "text": "8080",
    "start": "1450159",
    "end": "1453120"
  },
  {
    "text": "here the source of the message is",
    "start": "1453440",
    "end": "1455360"
  },
  {
    "text": "outside the cluster and we focus on the",
    "start": "1455360",
    "end": "1457360"
  },
  {
    "text": "containers",
    "start": "1457360",
    "end": "1458080"
  },
  {
    "text": "c 2.1 and c 4.1 executing in the context",
    "start": "1458080",
    "end": "1462640"
  },
  {
    "text": "of port p2 and p4 both hosted",
    "start": "1462640",
    "end": "1466159"
  },
  {
    "text": "on node and 2. note that both p2 and p4",
    "start": "1466159",
    "end": "1470480"
  },
  {
    "text": "have a label value pair of foo bar",
    "start": "1470480",
    "end": "1475039"
  },
  {
    "text": "here we start our journey with the",
    "start": "1475039",
    "end": "1477679"
  },
  {
    "text": "receive event",
    "start": "1477679",
    "end": "1478799"
  },
  {
    "text": "of message m at node switch n1",
    "start": "1478799",
    "end": "1483120"
  },
  {
    "text": "the target address of m is the address",
    "start": "1483120",
    "end": "1485440"
  },
  {
    "text": "of the node",
    "start": "1485440",
    "end": "1486400"
  },
  {
    "text": "this node switch corresponds with the",
    "start": "1486400",
    "end": "1488960"
  },
  {
    "text": "target port of m",
    "start": "1488960",
    "end": "1490400"
  },
  {
    "text": "is thirty thousand the node switch and",
    "start": "1490400",
    "end": "1493120"
  },
  {
    "text": "one",
    "start": "1493120",
    "end": "1493679"
  },
  {
    "text": "will match the message against its",
    "start": "1493679",
    "end": "1495440"
  },
  {
    "text": "forward information base",
    "start": "1495440",
    "end": "1496960"
  },
  {
    "text": "it will find the relevant entry that",
    "start": "1496960",
    "end": "1498880"
  },
  {
    "text": "instructs the node switch to translate",
    "start": "1498880",
    "end": "1500880"
  },
  {
    "text": "the target address",
    "start": "1500880",
    "end": "1502159"
  },
  {
    "text": "to the address of port p2 and the target",
    "start": "1502159",
    "end": "1504640"
  },
  {
    "text": "port to 8080",
    "start": "1504640",
    "end": "1506080"
  },
  {
    "text": "or to translate the target address to",
    "start": "1506080",
    "end": "1508400"
  },
  {
    "text": "the address of port p4",
    "start": "1508400",
    "end": "1510159"
  },
  {
    "text": "and the target port to 8080. here",
    "start": "1510159",
    "end": "1513520"
  },
  {
    "text": "we assume the target address is",
    "start": "1513520",
    "end": "1515360"
  },
  {
    "text": "translated to the address of",
    "start": "1515360",
    "end": "1517440"
  },
  {
    "text": "port p2 and the target port is",
    "start": "1517440",
    "end": "1519679"
  },
  {
    "text": "translated",
    "start": "1519679",
    "end": "1520640"
  },
  {
    "text": "to 8080.",
    "start": "1520640",
    "end": "1523679"
  },
  {
    "text": "the node switch will call itself and",
    "start": "1523919",
    "end": "1526000"
  },
  {
    "text": "match the new message against its",
    "start": "1526000",
    "end": "1527840"
  },
  {
    "text": "forward information base",
    "start": "1527840",
    "end": "1529440"
  },
  {
    "text": "and again from here we already know what",
    "start": "1529440",
    "end": "1532559"
  },
  {
    "text": "is going to happen",
    "start": "1532559",
    "end": "1535200"
  },
  {
    "text": "in this extensive example we will put",
    "start": "1535200",
    "end": "1537760"
  },
  {
    "text": "everything together",
    "start": "1537760",
    "end": "1539039"
  },
  {
    "text": "and discuss kubernetes some",
    "start": "1539039",
    "end": "1542080"
  },
  {
    "text": "understanding of ingress will be",
    "start": "1542080",
    "end": "1543520"
  },
  {
    "text": "beneficial",
    "start": "1543520",
    "end": "1545840"
  },
  {
    "text": "kubernetes ingress is an api gateway for",
    "start": "1545840",
    "end": "1548559"
  },
  {
    "text": "http messages",
    "start": "1548559",
    "end": "1551200"
  },
  {
    "text": "this listing defines an ingress that",
    "start": "1551200",
    "end": "1553039"
  },
  {
    "text": "consists of two request level routing",
    "start": "1553039",
    "end": "1555120"
  },
  {
    "text": "rules",
    "start": "1555120",
    "end": "1557039"
  },
  {
    "text": "a proxy is responsible to process these",
    "start": "1557039",
    "end": "1559679"
  },
  {
    "text": "routing rules",
    "start": "1559679",
    "end": "1560880"
  },
  {
    "text": "here the proxy is fronted by a node port",
    "start": "1560880",
    "end": "1563760"
  },
  {
    "text": "service to admit",
    "start": "1563760",
    "end": "1564960"
  },
  {
    "text": "external messages http requests with the",
    "start": "1564960",
    "end": "1569120"
  },
  {
    "text": "host header of example.org and the path",
    "start": "1569120",
    "end": "1571760"
  },
  {
    "text": "a will be proxied to service foo",
    "start": "1571760",
    "end": "1574880"
  },
  {
    "text": "on port 8080. http requests with a host",
    "start": "1574880",
    "end": "1578960"
  },
  {
    "text": "header of example.org",
    "start": "1578960",
    "end": "1580799"
  },
  {
    "text": "and a path b will be proxied to service",
    "start": "1580799",
    "end": "1584240"
  },
  {
    "text": "bar on port 8181",
    "start": "1584240",
    "end": "1588799"
  },
  {
    "text": "here we start our journey with the",
    "start": "1589279",
    "end": "1591679"
  },
  {
    "text": "receive event of message m",
    "start": "1591679",
    "end": "1593600"
  },
  {
    "text": "at node switch n1 the target address of",
    "start": "1593600",
    "end": "1596400"
  },
  {
    "text": "m",
    "start": "1596400",
    "end": "1596640"
  },
  {
    "text": "is the address of the node this node",
    "start": "1596640",
    "end": "1598480"
  },
  {
    "text": "switch corresponds with",
    "start": "1598480",
    "end": "1599919"
  },
  {
    "text": "the target port of m is thirty thousand",
    "start": "1599919",
    "end": "1603840"
  },
  {
    "text": "additionally but not shown in the",
    "start": "1603840",
    "end": "1605600"
  },
  {
    "text": "picture the message is an http message",
    "start": "1605600",
    "end": "1608240"
  },
  {
    "text": "with a host header of example org and a",
    "start": "1608240",
    "end": "1610799"
  },
  {
    "text": "path of",
    "start": "1610799",
    "end": "1611760"
  },
  {
    "text": "a",
    "start": "1611760",
    "end": "1613840"
  },
  {
    "text": "the node switch n1 will match the",
    "start": "1614799",
    "end": "1616720"
  },
  {
    "text": "message against its forward information",
    "start": "1616720",
    "end": "1618559"
  },
  {
    "text": "base",
    "start": "1618559",
    "end": "1619039"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1619039",
    "end": "1620799"
  },
  {
    "text": "instructs the node switch",
    "start": "1620799",
    "end": "1622159"
  },
  {
    "text": "to translate the target address to the",
    "start": "1622159",
    "end": "1624320"
  },
  {
    "text": "address of port p1 that hosts the proxy",
    "start": "1624320",
    "end": "1627279"
  },
  {
    "text": "and the target port to 8080",
    "start": "1627279",
    "end": "1631200"
  },
  {
    "text": "the target address is translated to the",
    "start": "1631600",
    "end": "1633919"
  },
  {
    "text": "address of port p1",
    "start": "1633919",
    "end": "1635360"
  },
  {
    "text": "and the target port is translated to",
    "start": "1635360",
    "end": "1637120"
  },
  {
    "text": "8080.",
    "start": "1637120",
    "end": "1638720"
  },
  {
    "text": "the node switch will call itself and",
    "start": "1638720",
    "end": "1640559"
  },
  {
    "text": "match the new message against its",
    "start": "1640559",
    "end": "1642320"
  },
  {
    "text": "forward information base",
    "start": "1642320",
    "end": "1644080"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1644080",
    "end": "1645919"
  },
  {
    "text": "instructs the node switch to forward the",
    "start": "1645919",
    "end": "1647840"
  },
  {
    "text": "message to port switch p1",
    "start": "1647840",
    "end": "1650159"
  },
  {
    "text": "node switch n1 will send the message m",
    "start": "1650159",
    "end": "1652480"
  },
  {
    "text": "via its edge to port switch p1",
    "start": "1652480",
    "end": "1655840"
  },
  {
    "text": "the port switch n1 will receive the",
    "start": "1655840",
    "end": "1657919"
  },
  {
    "text": "message and match",
    "start": "1657919",
    "end": "1659039"
  },
  {
    "text": "the message against its forward",
    "start": "1659039",
    "end": "1660399"
  },
  {
    "text": "information base it will find a relevant",
    "start": "1660399",
    "end": "1662559"
  },
  {
    "text": "entry that instructs the port switch to",
    "start": "1662559",
    "end": "1664399"
  },
  {
    "text": "deliver the message to the proxy",
    "start": "1664399",
    "end": "1666880"
  },
  {
    "text": "port switch p1 will send the message m",
    "start": "1666880",
    "end": "1669279"
  },
  {
    "text": "via its edge to the proxy",
    "start": "1669279",
    "end": "1671600"
  },
  {
    "text": "and finally the proxy will receive the",
    "start": "1671600",
    "end": "1673919"
  },
  {
    "text": "message",
    "start": "1673919",
    "end": "1674960"
  },
  {
    "text": "next the proxy performs request level",
    "start": "1674960",
    "end": "1677760"
  },
  {
    "text": "routing",
    "start": "1677760",
    "end": "1678720"
  },
  {
    "text": "the proxy matches the http host header",
    "start": "1678720",
    "end": "1682080"
  },
  {
    "text": "and the path of the message against its",
    "start": "1682080",
    "end": "1684720"
  },
  {
    "text": "decision table",
    "start": "1684720",
    "end": "1686000"
  },
  {
    "text": "it will find a relevant entry that",
    "start": "1686000",
    "end": "1688559"
  },
  {
    "text": "instructs the proxy to proxy the message",
    "start": "1688559",
    "end": "1690799"
  },
  {
    "text": "to service foo",
    "start": "1690799",
    "end": "1691840"
  },
  {
    "text": "on port 8080. finally the proxy will",
    "start": "1691840",
    "end": "1695200"
  },
  {
    "text": "send a message",
    "start": "1695200",
    "end": "1696000"
  },
  {
    "text": "m via its edge to node switch p1",
    "start": "1696000",
    "end": "1699360"
  },
  {
    "text": "the target address of m is the address",
    "start": "1699360",
    "end": "1701279"
  },
  {
    "text": "of service fu the target port of m",
    "start": "1701279",
    "end": "1703760"
  },
  {
    "text": "is 8080 and again from here on out",
    "start": "1703760",
    "end": "1707600"
  },
  {
    "text": "we already know what is going to happen",
    "start": "1707600",
    "end": "1710080"
  },
  {
    "text": "with this",
    "start": "1710080",
    "end": "1710720"
  },
  {
    "text": "we conclude today's presentation if you",
    "start": "1710720",
    "end": "1713840"
  },
  {
    "text": "would like to read up on today's",
    "start": "1713840",
    "end": "1715600"
  },
  {
    "text": "material",
    "start": "1715600",
    "end": "1716799"
  },
  {
    "text": "please visit my blog post inside",
    "start": "1716799",
    "end": "1719039"
  },
  {
    "text": "kubernetes networking",
    "start": "1719039",
    "end": "1721279"
  },
  {
    "text": "if you are watching this presentation",
    "start": "1721279",
    "end": "1722880"
  },
  {
    "text": "during the conference i'll be happy to",
    "start": "1722880",
    "end": "1724960"
  },
  {
    "text": "answer your questions online",
    "start": "1724960",
    "end": "1727279"
  },
  {
    "text": "if you are watching this presentation",
    "start": "1727279",
    "end": "1729039"
  },
  {
    "text": "after the conference",
    "start": "1729039",
    "end": "1730399"
  },
  {
    "text": "i'll be happy to answer your questions",
    "start": "1730399",
    "end": "1732480"
  },
  {
    "text": "on social media",
    "start": "1732480",
    "end": "1734320"
  },
  {
    "text": "but either way thank you for watching",
    "start": "1734320",
    "end": "1736960"
  },
  {
    "text": "inside kubernetes",
    "start": "1736960",
    "end": "1738240"
  },
  {
    "text": "networking",
    "start": "1738240",
    "end": "1740880"
  }
]