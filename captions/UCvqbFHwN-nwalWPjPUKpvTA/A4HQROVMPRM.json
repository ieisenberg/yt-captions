[
  {
    "text": "hi everyone my name is Katrina Onestolic",
    "start": "80",
    "end": "2240"
  },
  {
    "text": "Uh I work as a Syria docker and I'm also",
    "start": "2240",
    "end": "4319"
  },
  {
    "text": "an envoy maintainer Uh today we will",
    "start": "4319",
    "end": "6640"
  },
  {
    "text": "learn how the dynamic memory allocation",
    "start": "6640",
    "end": "8240"
  },
  {
    "text": "work in envoy and how to debug the",
    "start": "8240",
    "end": "9840"
  },
  {
    "text": "memory related issues Uh so all envoy",
    "start": "9840",
    "end": "12800"
  },
  {
    "text": "memory allocations can be split into",
    "start": "12800",
    "end": "14320"
  },
  {
    "text": "four different categories Uh the first",
    "start": "14320",
    "end": "15839"
  },
  {
    "text": "is a static memory where allocated",
    "start": "15839",
    "end": "17520"
  },
  {
    "text": "object exist during uh program life time",
    "start": "17520",
    "end": "19920"
  },
  {
    "text": "and there is one copy of object and for",
    "start": "19920",
    "end": "22560"
  },
  {
    "text": "example this could be singleton or",
    "start": "22560",
    "end": "24480"
  },
  {
    "text": "factor registrations Uh the next type of",
    "start": "24480",
    "end": "27279"
  },
  {
    "text": "allocation is a thread local where",
    "start": "27279",
    "end": "29039"
  },
  {
    "text": "allocated object lifetime is bounded by",
    "start": "29039",
    "end": "31119"
  },
  {
    "text": "the uh thread lifetime and each thread",
    "start": "31119",
    "end": "33200"
  },
  {
    "text": "has its own copy of the object Uh to",
    "start": "33200",
    "end": "35280"
  },
  {
    "text": "enable high concurrency and performance",
    "start": "35280",
    "end": "36800"
  },
  {
    "text": "Envoy uses internally a thread local",
    "start": "36800",
    "end": "38640"
  },
  {
    "text": "system or TLS Uh in Anway's threading",
    "start": "38640",
    "end": "41280"
  },
  {
    "text": "model each worker thread maintains its",
    "start": "41280",
    "end": "43040"
  },
  {
    "text": "own connection pool histograms cluster",
    "start": "43040",
    "end": "45440"
  },
  {
    "text": "data etc So now let's take a closer look",
    "start": "45440",
    "end": "48000"
  },
  {
    "text": "at the TLS system uh it is a common",
    "start": "48000",
    "end": "50640"
  },
  {
    "text": "pattern that the main thread needs to do",
    "start": "50640",
    "end": "52160"
  },
  {
    "text": "some work and then to update each worker",
    "start": "52160",
    "end": "54399"
  },
  {
    "text": "thread with the result of the work and",
    "start": "54399",
    "end": "55840"
  },
  {
    "text": "without the worker thread needing to",
    "start": "55840",
    "end": "57280"
  },
  {
    "text": "acquire uh the lock on every axis So an",
    "start": "57280",
    "end": "60559"
  },
  {
    "text": "TLS system works as follows There is a a",
    "start": "60559",
    "end": "63120"
  },
  {
    "text": "code which is running on the main thread",
    "start": "63120",
    "end": "64720"
  },
  {
    "text": "and it can allocate the process process",
    "start": "64720",
    "end": "67200"
  },
  {
    "text": "by TLS slot uh the main thread can set",
    "start": "67200",
    "end": "69680"
  },
  {
    "text": "arbitrary data into the slot and then uh",
    "start": "69680",
    "end": "71840"
  },
  {
    "text": "the data is posted to each worker thread",
    "start": "71840",
    "end": "73760"
  },
  {
    "text": "in a uh as a normal event loop event and",
    "start": "73760",
    "end": "77280"
  },
  {
    "text": "uh worker thread can read from their TLS",
    "start": "77280",
    "end": "79200"
  },
  {
    "text": "slot uh and it will retrieve whatever",
    "start": "79200",
    "end": "80720"
  },
  {
    "text": "thread local data is available",
    "start": "80720",
    "end": "82840"
  },
  {
    "text": "there Uh next next type of allocation is",
    "start": "82840",
    "end": "85759"
  },
  {
    "text": "automatic or stack allocation uh not",
    "start": "85759",
    "end": "88080"
  },
  {
    "text": "that exciting but objects allocated on",
    "start": "88080",
    "end": "90000"
  },
  {
    "text": "stack are destroyed when they go out of",
    "start": "90000",
    "end": "91840"
  },
  {
    "text": "scope and uh one of the interested cases",
    "start": "91840",
    "end": "94479"
  },
  {
    "text": "here uh for the ST location is our scope",
    "start": "94479",
    "end": "97520"
  },
  {
    "text": "tracked objects or so-called crash",
    "start": "97520",
    "end": "99200"
  },
  {
    "text": "dumping feature uh scope track objects",
    "start": "99200",
    "end": "101520"
  },
  {
    "text": "are allocated on the worker thread stack",
    "start": "101520",
    "end": "103439"
  },
  {
    "text": "and uh they emit use for debugging",
    "start": "103439",
    "end": "105119"
  },
  {
    "text": "information uh during the",
    "start": "105119",
    "end": "107320"
  },
  {
    "text": "crash uh but today we will focus mainly",
    "start": "107320",
    "end": "109920"
  },
  {
    "text": "on the uh heap or dynamic allocations uh",
    "start": "109920",
    "end": "112399"
  },
  {
    "text": "and we need to allocate sufficient",
    "start": "112399",
    "end": "113840"
  },
  {
    "text": "amount of data uh on the heap for uh",
    "start": "113840",
    "end": "116320"
  },
  {
    "text": "buffering of the request and responses",
    "start": "116320",
    "end": "118240"
  },
  {
    "text": "uh to store connections data uh stats",
    "start": "118240",
    "end": "120759"
  },
  {
    "text": "etc Uh heap allocations are the largest",
    "start": "120759",
    "end": "123439"
  },
  {
    "text": "allocation in envoy program They are",
    "start": "123439",
    "end": "125280"
  },
  {
    "text": "hard to manage efficiently and are prone",
    "start": "125280",
    "end": "126960"
  },
  {
    "text": "to memory exhaustion errors like for",
    "start": "126960",
    "end": "128560"
  },
  {
    "text": "example memory leaks Uh now let's take",
    "start": "128560",
    "end": "131200"
  },
  {
    "text": "closer look at uh how such allocations",
    "start": "131200",
    "end": "133680"
  },
  {
    "text": "are managed in anway Uh so is a code",
    "start": "133680",
    "end": "136720"
  },
  {
    "text": "standard in anway or codebased to use a",
    "start": "136720",
    "end": "138560"
  },
  {
    "text": "smart pointers uh which ensure automatic",
    "start": "138560",
    "end": "141040"
  },
  {
    "text": "and exception save object lifetime",
    "start": "141040",
    "end": "142800"
  },
  {
    "text": "management uh in ANA we don't use",
    "start": "142800",
    "end": "144720"
  },
  {
    "text": "standard C C++ implementation of the",
    "start": "144720",
    "end": "146959"
  },
  {
    "text": "operator new and delete instead we",
    "start": "146959",
    "end": "149120"
  },
  {
    "text": "compile in custom allocator",
    "start": "149120",
    "end": "150520"
  },
  {
    "text": "implementations uh nowadays the",
    "start": "150520",
    "end": "152400"
  },
  {
    "text": "supported allocators RTC malo in Jerf",
    "start": "152400",
    "end": "154800"
  },
  {
    "text": "tools uh so you may be wondering uh",
    "start": "154800",
    "end": "158000"
  },
  {
    "text": "what's the difference between those two",
    "start": "158000",
    "end": "159360"
  },
  {
    "text": "allocators in the both developed by",
    "start": "159360",
    "end": "161519"
  },
  {
    "text": "Google uh gerf tools not only contains",
    "start": "161519",
    "end": "164080"
  },
  {
    "text": "the allocator but also CPU memory",
    "start": "164080",
    "end": "166400"
  },
  {
    "text": "profiler hip checker etc uh both",
    "start": "166400",
    "end": "169280"
  },
  {
    "text": "allocators intend to provide fast and",
    "start": "169280",
    "end": "171120"
  },
  {
    "text": "contented allocations in the and the",
    "start": "171120",
    "end": "172800"
  },
  {
    "text": "allocation with per thread caching while",
    "start": "172800",
    "end": "175280"
  },
  {
    "text": "DC maloc also supports per CPU caching",
    "start": "175280",
    "end": "178319"
  },
  {
    "text": "DC malo has no application binary",
    "start": "178319",
    "end": "180480"
  },
  {
    "text": "interface compatibility which in simpler",
    "start": "180480",
    "end": "182800"
  },
  {
    "text": "term means that developers cannot rely",
    "start": "182800",
    "end": "184800"
  },
  {
    "text": "on the uh signatures of the simal APIs",
    "start": "184800",
    "end": "187599"
  },
  {
    "text": "while ger tools guarantees such",
    "start": "187599",
    "end": "189239"
  },
  {
    "text": "stability Uh TC malo is a rapidly",
    "start": "189239",
    "end": "191760"
  },
  {
    "text": "developed project It focuses on Google",
    "start": "191760",
    "end": "193519"
  },
  {
    "text": "use cases U meanwhile jerf tools has a",
    "start": "193519",
    "end": "195920"
  },
  {
    "text": "slower development pace and it focus on",
    "start": "195920",
    "end": "197760"
  },
  {
    "text": "the community",
    "start": "197760",
    "end": "199239"
  },
  {
    "text": "needs Uh so on this diagram it's a",
    "start": "199239",
    "end": "202159"
  },
  {
    "text": "simplified one You can see how the",
    "start": "202159",
    "end": "203680"
  },
  {
    "text": "memory allocation works with the custom",
    "start": "203680",
    "end": "205400"
  },
  {
    "text": "allocator Uh every time there is a need",
    "start": "205400",
    "end": "208319"
  },
  {
    "text": "to allocate a dynamic uh memory uh in",
    "start": "208319",
    "end": "210959"
  },
  {
    "text": "this case it's we are allocating a",
    "start": "210959",
    "end": "212799"
  },
  {
    "text": "unique uh pointer Uh we invoking a C++",
    "start": "212799",
    "end": "215840"
  },
  {
    "text": "memory library for creating a new unique",
    "start": "215840",
    "end": "217680"
  },
  {
    "text": "pointer Uh then uh the memory library",
    "start": "217680",
    "end": "220080"
  },
  {
    "text": "invokes a compiled in implementation of",
    "start": "220080",
    "end": "221920"
  },
  {
    "text": "the new operator in TC malo All those",
    "start": "221920",
    "end": "224239"
  },
  {
    "text": "calls happen in the user space uh and",
    "start": "224239",
    "end": "226159"
  },
  {
    "text": "then the simal would perform a Cisco",
    "start": "226159",
    "end": "228159"
  },
  {
    "text": "call like for example MAP where",
    "start": "228159",
    "end": "229840"
  },
  {
    "text": "operating system would allocate memory",
    "start": "229840",
    "end": "231519"
  },
  {
    "text": "for the object on the",
    "start": "231519",
    "end": "233000"
  },
  {
    "text": "heap Uh there are of course other use",
    "start": "233000",
    "end": "235440"
  },
  {
    "text": "cases where memory allocations are",
    "start": "235440",
    "end": "236879"
  },
  {
    "text": "handled not via TCM or girth tools For",
    "start": "236879",
    "end": "239439"
  },
  {
    "text": "example Vas or Golang filter for Golang",
    "start": "239439",
    "end": "242080"
  },
  {
    "text": "filter when a request comes in uh an C++",
    "start": "242080",
    "end": "245040"
  },
  {
    "text": "request data will be wrapped in the",
    "start": "245040",
    "end": "246799"
  },
  {
    "text": "Golan L7 extension SDK and uh then it",
    "start": "246799",
    "end": "249360"
  },
  {
    "text": "will be passed via CJ to Golang filter",
    "start": "249360",
    "end": "252319"
  },
  {
    "text": "uh CJ is part of Golang and enables",
    "start": "252319",
    "end": "254159"
  },
  {
    "text": "interaction between a C++ and Golang",
    "start": "254159",
    "end": "256440"
  },
  {
    "text": "filters On Golang side he allocations is",
    "start": "256440",
    "end": "259280"
  },
  {
    "text": "handled via Golang allocator which used",
    "start": "259280",
    "end": "261919"
  },
  {
    "text": "to be based by TC Maloc but it diverged",
    "start": "261919",
    "end": "264000"
  },
  {
    "text": "over time Uh now let's take a closer",
    "start": "264000",
    "end": "266560"
  },
  {
    "text": "look at TC Malo architecture Uh there",
    "start": "266560",
    "end": "269280"
  },
  {
    "text": "are uh three main components Uh there is",
    "start": "269280",
    "end": "271440"
  },
  {
    "text": "a uh front end which is a cache that",
    "start": "271440",
    "end": "273520"
  },
  {
    "text": "provides a fast allocation and the",
    "start": "273520",
    "end": "275120"
  },
  {
    "text": "allocation of the memory to the",
    "start": "275120",
    "end": "276400"
  },
  {
    "text": "application uh there is a middle end",
    "start": "276400",
    "end": "278960"
  },
  {
    "text": "that's responsible for refilling the",
    "start": "278960",
    "end": "280400"
  },
  {
    "text": "front end cache and there is a a back",
    "start": "280400",
    "end": "282639"
  },
  {
    "text": "end that handles fetching memory from",
    "start": "282639",
    "end": "284320"
  },
  {
    "text": "the operating system Uh the front end",
    "start": "284320",
    "end": "286800"
  },
  {
    "text": "will satisfy uh any request if it has a",
    "start": "286800",
    "end": "289520"
  },
  {
    "text": "cached memory of the appropriate size",
    "start": "289520",
    "end": "291280"
  },
  {
    "text": "and then uh if the cache for the",
    "start": "291280",
    "end": "293040"
  },
  {
    "text": "particular size is empty it will uh",
    "start": "293040",
    "end": "295040"
  },
  {
    "text": "request a batch of memory from the",
    "start": "295040",
    "end": "296560"
  },
  {
    "text": "middle end to refill the cache uh if the",
    "start": "296560",
    "end": "299600"
  },
  {
    "text": "middle end is exhausted uh or if the",
    "start": "299600",
    "end": "301919"
  },
  {
    "text": "requested size is greater than the",
    "start": "301919",
    "end": "303520"
  },
  {
    "text": "maximum size that the front end edge can",
    "start": "303520",
    "end": "305440"
  },
  {
    "text": "handle it will uh the request will go to",
    "start": "305440",
    "end": "308000"
  },
  {
    "text": "the back end uh to either satisfy the",
    "start": "308000",
    "end": "309840"
  },
  {
    "text": "large allocation or to refill the cache",
    "start": "309840",
    "end": "311680"
  },
  {
    "text": "in the middle",
    "start": "311680",
    "end": "313240"
  },
  {
    "text": "end Uh all allocator implementations are",
    "start": "313240",
    "end": "316160"
  },
  {
    "text": "prone to memory fragmentation which is",
    "start": "316160",
    "end": "318000"
  },
  {
    "text": "an ability to reuse uh memory that is",
    "start": "318000",
    "end": "319919"
  },
  {
    "text": "free Uh there is two main type of uh",
    "start": "319919",
    "end": "322800"
  },
  {
    "text": "fragmentation in internal and external",
    "start": "322800",
    "end": "325440"
  },
  {
    "text": "uh internal fragmentation happens uh",
    "start": "325440",
    "end": "327120"
  },
  {
    "text": "when the block is allocated to hold an",
    "start": "327120",
    "end": "328960"
  },
  {
    "text": "object but uh the block itself is larger",
    "start": "328960",
    "end": "331199"
  },
  {
    "text": "than the actual requested size Uh the",
    "start": "331199",
    "end": "333440"
  },
  {
    "text": "access of the block is wasted It's",
    "start": "333440",
    "end": "335120"
  },
  {
    "text": "called internal because it happens uh",
    "start": "335120",
    "end": "337199"
  },
  {
    "text": "within the block Uh there is also",
    "start": "337199",
    "end": "339360"
  },
  {
    "text": "external fragmentation which happens",
    "start": "339360",
    "end": "340880"
  },
  {
    "text": "when the uh continuous memory be becomes",
    "start": "340880",
    "end": "343360"
  },
  {
    "text": "divided into smaller pieces over the",
    "start": "343360",
    "end": "345039"
  },
  {
    "text": "execution time Uh the small holes may",
    "start": "345039",
    "end": "347280"
  },
  {
    "text": "not be usable for future allocations",
    "start": "347280",
    "end": "349520"
  },
  {
    "text": "Even though the total amount of the",
    "start": "349520",
    "end": "351360"
  },
  {
    "text": "requested size is available to the heap",
    "start": "351360",
    "end": "353680"
  },
  {
    "text": "it's scattered through the heap Um now",
    "start": "353680",
    "end": "355840"
  },
  {
    "text": "let's take a closer look uh which tools",
    "start": "355840",
    "end": "358400"
  },
  {
    "text": "are available today to uh protect",
    "start": "358400",
    "end": "360160"
  },
  {
    "text": "against memory uh exhaustion",
    "start": "360160",
    "end": "362199"
  },
  {
    "text": "errors There is a uh shrink hip resource",
    "start": "362199",
    "end": "365360"
  },
  {
    "text": "monitor which is part of the overload",
    "start": "365360",
    "end": "367039"
  },
  {
    "text": "manage API It allows users to configure",
    "start": "367039",
    "end": "369600"
  },
  {
    "text": "a hard limit for max heap size in bytes",
    "start": "369600",
    "end": "372160"
  },
  {
    "text": "uh in the configuration above when the",
    "start": "372160",
    "end": "373840"
  },
  {
    "text": "heap usage is 85% saturated overload",
    "start": "373840",
    "end": "377280"
  },
  {
    "text": "manager will invoke a shrink shrink heap",
    "start": "377280",
    "end": "380080"
  },
  {
    "text": "action and try to release all free",
    "start": "380080",
    "end": "381840"
  },
  {
    "text": "memory to the system uh via call to TC",
    "start": "381840",
    "end": "384000"
  },
  {
    "text": "Maloc this mechanism has some drawbacks",
    "start": "384000",
    "end": "386000"
  },
  {
    "text": "like for example uh having to configure",
    "start": "386000",
    "end": "388160"
  },
  {
    "text": "a static max uh threshold and as we know",
    "start": "388160",
    "end": "391120"
  },
  {
    "text": "big heap usage could uh deviate over",
    "start": "391120",
    "end": "393199"
  },
  {
    "text": "time for the application and not all",
    "start": "393199",
    "end": "395600"
  },
  {
    "text": "calls uh to the simal will actually",
    "start": "395600",
    "end": "397520"
  },
  {
    "text": "release all the free memory uh to the",
    "start": "397520",
    "end": "399280"
  },
  {
    "text": "system for example if the simal fails to",
    "start": "399280",
    "end": "401199"
  },
  {
    "text": "do so due to the memory",
    "start": "401199",
    "end": "403160"
  },
  {
    "text": "fragmentation Uh another mechanism",
    "start": "403160",
    "end": "405280"
  },
  {
    "text": "available to us is a periodic release of",
    "start": "405280",
    "end": "407199"
  },
  {
    "text": "free memory to system Uh users can",
    "start": "407199",
    "end": "409440"
  },
  {
    "text": "configure the amount of bytes to release",
    "start": "409440",
    "end": "411120"
  },
  {
    "text": "and memory releasing internal So in this",
    "start": "411120",
    "end": "413680"
  },
  {
    "text": "example every 30 seconds and will try to",
    "start": "413680",
    "end": "415840"
  },
  {
    "text": "release one megabyte back to the",
    "start": "415840",
    "end": "417960"
  },
  {
    "text": "system And uh with memory releasing",
    "start": "417960",
    "end": "420319"
  },
  {
    "text": "feature there are also drawbacks Uh we",
    "start": "420319",
    "end": "422319"
  },
  {
    "text": "cannot guarantee a stable memory release",
    "start": "422319",
    "end": "424080"
  },
  {
    "text": "rate due to multiple factors Uh first of",
    "start": "424080",
    "end": "426560"
  },
  {
    "text": "all the simal internally uses um",
    "start": "426560",
    "end": "429199"
  },
  {
    "text": "releases memory on the span granular",
    "start": "429199",
    "end": "430960"
  },
  {
    "text": "granularity Span is a collection of",
    "start": "430960",
    "end": "432960"
  },
  {
    "text": "pages If uh too much memory has been",
    "start": "432960",
    "end": "435120"
  },
  {
    "text": "released during uh during previous round",
    "start": "435120",
    "end": "437680"
  },
  {
    "text": "the simal will not even attempt to",
    "start": "437680",
    "end": "439680"
  },
  {
    "text": "release uh memory for the current period",
    "start": "439680",
    "end": "442080"
  },
  {
    "text": "And uh next on the operating system",
    "start": "442080",
    "end": "443919"
  },
  {
    "text": "level the system may decide that it's uh",
    "start": "443919",
    "end": "445840"
  },
  {
    "text": "not optimal to uh free memory for a",
    "start": "445840",
    "end": "448319"
  },
  {
    "text": "process at the current processing time",
    "start": "448319",
    "end": "450800"
  },
  {
    "text": "Uh now uh how do we troubleshoot the",
    "start": "450800",
    "end": "452720"
  },
  {
    "text": "memory uh related issues uh in the top",
    "start": "452720",
    "end": "455599"
  },
  {
    "text": "graph the physical memory keeps",
    "start": "455599",
    "end": "457120"
  },
  {
    "text": "continuously grow growing for the bots",
    "start": "457120",
    "end": "459039"
  },
  {
    "text": "and uh it never drops uh until the bots",
    "start": "459039",
    "end": "461599"
  },
  {
    "text": "gets killed with out of memory error Uh",
    "start": "461599",
    "end": "464240"
  },
  {
    "text": "so let's investigate what's going on Uh",
    "start": "464240",
    "end": "466720"
  },
  {
    "text": "memory endpoint in envoy admin console",
    "start": "466720",
    "end": "469039"
  },
  {
    "text": "you can see it in the bottom left with",
    "start": "469039",
    "end": "470560"
  },
  {
    "text": "the arrow pointed uh can give you useful",
    "start": "470560",
    "end": "472960"
  },
  {
    "text": "insights into TCM stats If you click on",
    "start": "472960",
    "end": "475360"
  },
  {
    "text": "that endpoint we will get the view",
    "start": "475360",
    "end": "476720"
  },
  {
    "text": "that's uh on the uh bottom right side of",
    "start": "476720",
    "end": "479360"
  },
  {
    "text": "the slide uh u and in most cases you",
    "start": "479360",
    "end": "482400"
  },
  {
    "text": "will care about uh the top four numbers",
    "start": "482400",
    "end": "484639"
  },
  {
    "text": "Uh there is an allocated stats which",
    "start": "484639",
    "end": "486720"
  },
  {
    "text": "means uh the number of bytes used by the",
    "start": "486720",
    "end": "488879"
  },
  {
    "text": "application and uh this will typically",
    "start": "488879",
    "end": "490960"
  },
  {
    "text": "match uh the memory usage reported uh",
    "start": "490960",
    "end": "494960"
  },
  {
    "text": "sorry it will not match by the memory",
    "start": "494960",
    "end": "496800"
  },
  {
    "text": "usage reported by the operating system",
    "start": "496800",
    "end": "498560"
  },
  {
    "text": "because it doesn't include uh TCMO",
    "start": "498560",
    "end": "500879"
  },
  {
    "text": "overhead and fragmentation Uh next there",
    "start": "500879",
    "end": "503280"
  },
  {
    "text": "is a heap size uh which represents the",
    "start": "503280",
    "end": "505520"
  },
  {
    "text": "bytes of system memory resolved by TCLO",
    "start": "505520",
    "end": "507919"
  },
  {
    "text": "this uh will include fragmentation Uh",
    "start": "507919",
    "end": "510400"
  },
  {
    "text": "then there is a page heap unmap which uh",
    "start": "510400",
    "end": "512560"
  },
  {
    "text": "stands uh for the number of bytes in the",
    "start": "512560",
    "end": "514719"
  },
  {
    "text": "free unmapped memory and this is uh the",
    "start": "514719",
    "end": "516959"
  },
  {
    "text": "memory that has been released back to",
    "start": "516959",
    "end": "518560"
  },
  {
    "text": "the system Uh page heap uh free shows",
    "start": "518560",
    "end": "522000"
  },
  {
    "text": "the number of bytes in freemapped uh",
    "start": "522000",
    "end": "524240"
  },
  {
    "text": "pages in page heap Uh this bytes can be",
    "start": "524240",
    "end": "526560"
  },
  {
    "text": "used to fulfill the allocation requests",
    "start": "526560",
    "end": "528880"
  },
  {
    "text": "Uh if you notice over time that the",
    "start": "528880",
    "end": "530720"
  },
  {
    "text": "allocated and heap usage stats keep",
    "start": "530720",
    "end": "532880"
  },
  {
    "text": "growing while unmapped stats is either",
    "start": "532880",
    "end": "535040"
  },
  {
    "text": "zero or decreases uh slower against the",
    "start": "535040",
    "end": "538160"
  },
  {
    "text": "number of allocated bytes and the page",
    "start": "538160",
    "end": "540240"
  },
  {
    "text": "heap free keeps uh decreasing that is a",
    "start": "540240",
    "end": "542320"
  },
  {
    "text": "strong uh indication of a memory",
    "start": "542320",
    "end": "544839"
  },
  {
    "text": "leak Uh so if the output from the memory",
    "start": "544839",
    "end": "547839"
  },
  {
    "text": "admin endp point is not sufficient to",
    "start": "547839",
    "end": "549440"
  },
  {
    "text": "get the full picture we could also get a",
    "start": "549440",
    "end": "551120"
  },
  {
    "text": "more detailed uh overview with the TCM",
    "start": "551120",
    "end": "554000"
  },
  {
    "text": "stats It can be useful to spot the",
    "start": "554000",
    "end": "555760"
  },
  {
    "text": "fragmentation errors So uh how um that",
    "start": "555760",
    "end": "559200"
  },
  {
    "text": "would require actually patching envoy",
    "start": "559200",
    "end": "560880"
  },
  {
    "text": "code with the custom function call which",
    "start": "560880",
    "end": "562480"
  },
  {
    "text": "got n stats to logs and recompiling the",
    "start": "562480",
    "end": "564600"
  },
  {
    "text": "binary Uh you will get roughly this",
    "start": "564600",
    "end": "567600"
  },
  {
    "text": "output in the logs So the top part of",
    "start": "567600",
    "end": "570240"
  },
  {
    "text": "the output u which is highlighted it",
    "start": "570240",
    "end": "572560"
  },
  {
    "text": "contains exactly the same information as",
    "start": "572560",
    "end": "574240"
  },
  {
    "text": "the output of the envoy uh memory uh",
    "start": "574240",
    "end": "576920"
  },
  {
    "text": "endpoint But if you want to spot the",
    "start": "576920",
    "end": "579519"
  },
  {
    "text": "fragmentation you can look at the uh",
    "start": "579519",
    "end": "581440"
  },
  {
    "text": "midsize part of this uh screenshot which",
    "start": "581440",
    "end": "583440"
  },
  {
    "text": "is basically the uh size classes",
    "start": "583440",
    "end": "585680"
  },
  {
    "text": "information And particularly you should",
    "start": "585680",
    "end": "587519"
  },
  {
    "text": "um uh pay attention at the overhead",
    "start": "587519",
    "end": "589279"
  },
  {
    "text": "stats which is uh can uh give",
    "start": "589279",
    "end": "591600"
  },
  {
    "text": "information about the possible",
    "start": "591600",
    "end": "592920"
  },
  {
    "text": "fragmentation Uh in this case there is",
    "start": "592920",
    "end": "595360"
  },
  {
    "text": "no fragmentation Uh but if fragmentation",
    "start": "595360",
    "end": "597680"
  },
  {
    "text": "is dete detected changing to a smaller",
    "start": "597680",
    "end": "600000"
  },
  {
    "text": "uh page size might actually reduce you",
    "start": "600000",
    "end": "602480"
  },
  {
    "text": "help to reduce the",
    "start": "602480",
    "end": "604680"
  },
  {
    "text": "fragmentation Um now how do we know",
    "start": "604680",
    "end": "607200"
  },
  {
    "text": "which part of the envelope is",
    "start": "607200",
    "end": "608959"
  },
  {
    "text": "responsible for the memory leak Uh for",
    "start": "608959",
    "end": "610720"
  },
  {
    "text": "that purpose using the uh heap profiler",
    "start": "610720",
    "end": "613600"
  },
  {
    "text": "would be an appropriate tool A heap",
    "start": "613600",
    "end": "615519"
  },
  {
    "text": "profiler can be enabled also in the",
    "start": "615519",
    "end": "617120"
  },
  {
    "text": "admin console Uh but you need to have a",
    "start": "617120",
    "end": "619120"
  },
  {
    "text": "debug symbols enabled Uh the endpoint",
    "start": "619120",
    "end": "621760"
  },
  {
    "text": "would produce a heap profile that can be",
    "start": "621760",
    "end": "623440"
  },
  {
    "text": "rendered with uh with pprof comment Uh",
    "start": "623440",
    "end": "626320"
  },
  {
    "text": "so oh sorry the p output here is in the",
    "start": "626320",
    "end": "629680"
  },
  {
    "text": "central part is a co- graph annotated",
    "start": "629680",
    "end": "631839"
  },
  {
    "text": "with memory information and each node in",
    "start": "631839",
    "end": "634000"
  },
  {
    "text": "the graph contain the following data Uh",
    "start": "634000",
    "end": "636320"
  },
  {
    "text": "the class name the method name the",
    "start": "636320",
    "end": "637839"
  },
  {
    "text": "current memory allocations and the total",
    "start": "637839",
    "end": "640399"
  },
  {
    "text": "cumulative memory allocations So uh in",
    "start": "640399",
    "end": "643200"
  },
  {
    "text": "this graph we can see that the code path",
    "start": "643200",
    "end": "644800"
  },
  {
    "text": "in the connection input is actually",
    "start": "644800",
    "end": "646959"
  },
  {
    "text": "responsible for retaining most of the",
    "start": "646959",
    "end": "648480"
  },
  {
    "text": "memory that program uses roughly 84% If",
    "start": "648480",
    "end": "651440"
  },
  {
    "text": "you follow down the edges of this node",
    "start": "651440",
    "end": "653279"
  },
  {
    "text": "we could investigate the root cause",
    "start": "653279",
    "end": "654640"
  },
  {
    "text": "further Um now let's take a look at the",
    "start": "654640",
    "end": "656720"
  },
  {
    "text": "future improvements of memory",
    "start": "656720",
    "end": "658519"
  },
  {
    "text": "management Uh one of the largest",
    "start": "658519",
    "end": "660800"
  },
  {
    "text": "improvements we are looking forward to",
    "start": "660800",
    "end": "662640"
  },
  {
    "text": "support is uh supporting GMAC which is",
    "start": "662640",
    "end": "665600"
  },
  {
    "text": "another type of maloc uh implementation",
    "start": "665600",
    "end": "668079"
  },
  {
    "text": "It focuses on the fragmentation",
    "start": "668079",
    "end": "669519"
  },
  {
    "text": "avoidance and scalable concurrency",
    "start": "669519",
    "end": "671200"
  },
  {
    "text": "support Uh GMAL offers much more",
    "start": "671200",
    "end": "674079"
  },
  {
    "text": "granular size classes which helps to",
    "start": "674079",
    "end": "675680"
  },
  {
    "text": "reduce",
    "start": "675680",
    "end": "676600"
  },
  {
    "text": "fragmentation Uh another improvement",
    "start": "676600",
    "end": "678560"
  },
  {
    "text": "that we are looking into is to have a",
    "start": "678560",
    "end": "680399"
  },
  {
    "text": "croup aware resource monitor So uh the",
    "start": "680399",
    "end": "683200"
  },
  {
    "text": "current fixed heap resource monitor only",
    "start": "683200",
    "end": "685279"
  },
  {
    "text": "aware of the allocations uh that TC",
    "start": "685279",
    "end": "687600"
  },
  {
    "text": "Maloc sees and uh not the ones that",
    "start": "687600",
    "end": "689600"
  },
  {
    "text": "operate operation system sees And so uh",
    "start": "689600",
    "end": "692480"
  },
  {
    "text": "since uh out of memory cues are",
    "start": "692480",
    "end": "694560"
  },
  {
    "text": "happening at the operating system level",
    "start": "694560",
    "end": "696880"
  },
  {
    "text": "uh having such monitor would help users",
    "start": "696880",
    "end": "698480"
  },
  {
    "text": "to better protect against such",
    "start": "698480",
    "end": "700360"
  },
  {
    "text": "errors Uh with fixed heap resource",
    "start": "700360",
    "end": "702959"
  },
  {
    "text": "monitor is may not be obvious which max",
    "start": "702959",
    "end": "705120"
  },
  {
    "text": "uh limit to set for the heap usage One",
    "start": "705120",
    "end": "707519"
  },
  {
    "text": "could set it too low or too high Uh so",
    "start": "707519",
    "end": "709600"
  },
  {
    "text": "having a resource monitor that tracks",
    "start": "709600",
    "end": "711120"
  },
  {
    "text": "precious information would allow users",
    "start": "711120",
    "end": "713440"
  },
  {
    "text": "to dynamically understand when they are",
    "start": "713440",
    "end": "715120"
  },
  {
    "text": "approaching a memory threshold of the",
    "start": "715120",
    "end": "717279"
  },
  {
    "text": "container rather than having to set this",
    "start": "717279",
    "end": "719200"
  },
  {
    "text": "fixed uh static threshold and rely on",
    "start": "719200",
    "end": "722160"
  },
  {
    "text": "that threshold Uh when out of memory",
    "start": "722160",
    "end": "724640"
  },
  {
    "text": "error happens it's usually too late to",
    "start": "724640",
    "end": "726800"
  },
  {
    "text": "collect the hip profile But for that",
    "start": "726800",
    "end": "728639"
  },
  {
    "text": "case the uh P heap tracker would sample",
    "start": "728639",
    "end": "730959"
  },
  {
    "text": "the heap every time uh it reaches the",
    "start": "730959",
    "end": "732720"
  },
  {
    "text": "high watermark and provide us with the",
    "start": "732720",
    "end": "734399"
  },
  {
    "text": "insights where the uh memory allocations",
    "start": "734399",
    "end": "736800"
  },
  {
    "text": "happen during the P heap",
    "start": "736800",
    "end": "739160"
  },
  {
    "text": "load And here are the acknowledgement",
    "start": "739160",
    "end": "741279"
  },
  {
    "text": "for everyone who contributed to",
    "start": "741279",
    "end": "742399"
  },
  {
    "text": "improving memory management in Anway",
    "start": "742399",
    "end": "746670"
  },
  {
    "text": "[Applause]",
    "start": "746670",
    "end": "753410"
  }
]