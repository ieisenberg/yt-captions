[
  {
    "text": "hello and good afternoon K native con",
    "start": "420",
    "end": "3780"
  },
  {
    "text": "it's my privilege to present my talk at",
    "start": "3780",
    "end": "6960"
  },
  {
    "text": "the 2022 K nativecon North America",
    "start": "6960",
    "end": "10980"
  },
  {
    "text": "the topic I bring to you folks today is",
    "start": "10980",
    "end": "13679"
  },
  {
    "text": "how to achieve a highly available and a",
    "start": "13679",
    "end": "17039"
  },
  {
    "text": "scalable backend in your event-driven",
    "start": "17039",
    "end": "19740"
  },
  {
    "text": "architecture",
    "start": "19740",
    "end": "21600"
  },
  {
    "text": "my name is ansu varghese and I am a",
    "start": "21600",
    "end": "24600"
  },
  {
    "text": "proud ibmer working as a senior software",
    "start": "24600",
    "end": "27180"
  },
  {
    "text": "engineer within hybrid Cloud research",
    "start": "27180",
    "end": "31640"
  },
  {
    "text": "this is a rundown list of what I would",
    "start": "31640",
    "end": "34860"
  },
  {
    "text": "like to delve into deeper with you",
    "start": "34860",
    "end": "36540"
  },
  {
    "text": "during this session",
    "start": "36540",
    "end": "39180"
  },
  {
    "text": "k-native Eventing back end and its",
    "start": "39180",
    "end": "41520"
  },
  {
    "text": "full-based components like Eventing",
    "start": "41520",
    "end": "43440"
  },
  {
    "text": "sources and other custom resources today",
    "start": "43440",
    "end": "46320"
  },
  {
    "text": "do not provide Auto scaling out of the",
    "start": "46320",
    "end": "49079"
  },
  {
    "text": "box or have the framework to be scaled",
    "start": "49079",
    "end": "53160"
  },
  {
    "text": "up and down for a rich serverless",
    "start": "53160",
    "end": "56340"
  },
  {
    "text": "experience",
    "start": "56340",
    "end": "57899"
  },
  {
    "text": "this is a basic must requirement for",
    "start": "57899",
    "end": "61379"
  },
  {
    "text": "most Enterprise organizations Building",
    "start": "61379",
    "end": "63899"
  },
  {
    "text": "Solutions on on top of k-native",
    "start": "63899",
    "end": "67140"
  },
  {
    "text": "so we have thus implemented an Eventing",
    "start": "67140",
    "end": "70680"
  },
  {
    "text": "scheduler that gives you a scaling",
    "start": "70680",
    "end": "73860"
  },
  {
    "text": "solution and distributes consumers",
    "start": "73860",
    "end": "76439"
  },
  {
    "text": "across the data plane pods based on your",
    "start": "76439",
    "end": "80100"
  },
  {
    "text": "priorities",
    "start": "80100",
    "end": "81780"
  },
  {
    "text": "we will then go through a demonstration",
    "start": "81780",
    "end": "84119"
  },
  {
    "text": "of this new feature using a Kafka Source",
    "start": "84119",
    "end": "87659"
  },
  {
    "text": "installation on IBM cloud kubernetes",
    "start": "87659",
    "end": "90720"
  },
  {
    "text": "service",
    "start": "90720",
    "end": "92220"
  },
  {
    "text": "this is a very active area with a lot of",
    "start": "92220",
    "end": "95759"
  },
  {
    "text": "interest from the Upstream community and",
    "start": "95759",
    "end": "98340"
  },
  {
    "text": "from organizations Building Products",
    "start": "98340",
    "end": "100320"
  },
  {
    "text": "based on k-native Eventing there's work",
    "start": "100320",
    "end": "103380"
  },
  {
    "text": "currently being done to expand the",
    "start": "103380",
    "end": "106320"
  },
  {
    "text": "scalability using this scheduler into",
    "start": "106320",
    "end": "109380"
  },
  {
    "text": "other k-native components and also",
    "start": "109380",
    "end": "112380"
  },
  {
    "text": "integrating these resources directly",
    "start": "112380",
    "end": "114600"
  },
  {
    "text": "with the um the kdel auto scaler",
    "start": "114600",
    "end": "119180"
  },
  {
    "text": "moving on to our introduction slide so",
    "start": "120000",
    "end": "123240"
  },
  {
    "text": "let's discuss some of the expectations",
    "start": "123240",
    "end": "125880"
  },
  {
    "text": "of a k native common user when",
    "start": "125880",
    "end": "128700"
  },
  {
    "text": "considering an event-driven architecture",
    "start": "128700",
    "end": "132560"
  },
  {
    "text": "now as K native is built around a",
    "start": "132560",
    "end": "135720"
  },
  {
    "text": "serverless experience users expect that",
    "start": "135720",
    "end": "139140"
  },
  {
    "text": "Services when not used will be scaled",
    "start": "139140",
    "end": "142319"
  },
  {
    "text": "down to zero and when used to scale up",
    "start": "142319",
    "end": "145620"
  },
  {
    "text": "and down corresponding to the amount of",
    "start": "145620",
    "end": "148319"
  },
  {
    "text": "events that need to be pulled",
    "start": "148319",
    "end": "150780"
  },
  {
    "text": "so our back-end deployments must have",
    "start": "150780",
    "end": "153959"
  },
  {
    "text": "the capability to Auto scale up or down",
    "start": "153959",
    "end": "158040"
  },
  {
    "text": "as the workload demands change to",
    "start": "158040",
    "end": "161220"
  },
  {
    "text": "accommodate for faster or for idle",
    "start": "161220",
    "end": "164519"
  },
  {
    "text": "processing",
    "start": "164519",
    "end": "165720"
  },
  {
    "text": "also in a in a multi-tenant world where",
    "start": "165720",
    "end": "168780"
  },
  {
    "text": "the number of resource instances can be",
    "start": "168780",
    "end": "170879"
  },
  {
    "text": "numerous or a few we expect the help of",
    "start": "170879",
    "end": "174480"
  },
  {
    "text": "an auto scaler to produce a similar",
    "start": "174480",
    "end": "177300"
  },
  {
    "text": "experience for all tenants",
    "start": "177300",
    "end": "180680"
  },
  {
    "text": "secondly Cloud users do not want to be",
    "start": "180680",
    "end": "184260"
  },
  {
    "text": "paying unnecessary costs for resource",
    "start": "184260",
    "end": "186959"
  },
  {
    "text": "inefficiencies in particular for",
    "start": "186959",
    "end": "189800"
  },
  {
    "text": "environments running thousands of source",
    "start": "189800",
    "end": "192840"
  },
  {
    "text": "instances",
    "start": "192840",
    "end": "194340"
  },
  {
    "text": "third point the uh backend data plane",
    "start": "194340",
    "end": "197640"
  },
  {
    "text": "and controller should help with",
    "start": "197640",
    "end": "199800"
  },
  {
    "text": "providing a maximum throughput and high",
    "start": "199800",
    "end": "202319"
  },
  {
    "text": "compute density on the running cluster",
    "start": "202319",
    "end": "206099"
  },
  {
    "text": "next we should be providing highly",
    "start": "206099",
    "end": "208860"
  },
  {
    "text": "available and resilient support for our",
    "start": "208860",
    "end": "212159"
  },
  {
    "text": "resources across all failure domains in",
    "start": "212159",
    "end": "215700"
  },
  {
    "text": "a multi-region environment such that",
    "start": "215700",
    "end": "217920"
  },
  {
    "text": "when there is a failure recovery is",
    "start": "217920",
    "end": "220440"
  },
  {
    "text": "quick and disruption is is minimal",
    "start": "220440",
    "end": "224580"
  },
  {
    "text": "overall we want the expectations of our",
    "start": "224580",
    "end": "228120"
  },
  {
    "text": "users to be fully met and for them to",
    "start": "228120",
    "end": "230760"
  },
  {
    "text": "get nothing short of a truly serverless",
    "start": "230760",
    "end": "233640"
  },
  {
    "text": "experience we want this to be enabled by",
    "start": "233640",
    "end": "236099"
  },
  {
    "text": "default and we should really focus on",
    "start": "236099",
    "end": "238680"
  },
  {
    "text": "making candidate Eventing more",
    "start": "238680",
    "end": "241260"
  },
  {
    "text": "serverless",
    "start": "241260",
    "end": "243120"
  },
  {
    "text": "so all of these expectations that we",
    "start": "243120",
    "end": "245760"
  },
  {
    "text": "discussed lay out the foundation for",
    "start": "245760",
    "end": "248959"
  },
  {
    "text": "implementing this new Eventing scheduler",
    "start": "248959",
    "end": "253080"
  },
  {
    "text": "So currently each dispatcher backend",
    "start": "253080",
    "end": "255720"
  },
  {
    "text": "replica instantiates one consumer for",
    "start": "255720",
    "end": "259019"
  },
  {
    "text": "each candida resource",
    "start": "259019",
    "end": "261720"
  },
  {
    "text": "and with an increasing number of",
    "start": "261720",
    "end": "263699"
  },
  {
    "text": "resources the dispatcher resources need",
    "start": "263699",
    "end": "266460"
  },
  {
    "text": "to be increased as well",
    "start": "266460",
    "end": "268139"
  },
  {
    "text": "we also need to be able to configure how",
    "start": "268139",
    "end": "271139"
  },
  {
    "text": "many consumers we need to run for a",
    "start": "271139",
    "end": "273960"
  },
  {
    "text": "specific resource",
    "start": "273960",
    "end": "275820"
  },
  {
    "text": "in in addition users today don't have a",
    "start": "275820",
    "end": "279419"
  },
  {
    "text": "way to configure parallel deliveries",
    "start": "279419",
    "end": "283080"
  },
  {
    "text": "um to to increase throughput",
    "start": "283080",
    "end": "285060"
  },
  {
    "text": "the only way to increase throughput is",
    "start": "285060",
    "end": "287699"
  },
  {
    "text": "by scaling the data plane deployments",
    "start": "287699",
    "end": "289860"
  },
  {
    "text": "and and partitioning consumers across",
    "start": "289860",
    "end": "292500"
  },
  {
    "text": "them so that's exactly what our solution",
    "start": "292500",
    "end": "295560"
  },
  {
    "text": "does our solution also allows easier",
    "start": "295560",
    "end": "299040"
  },
  {
    "text": "integration with the with an auto scaler",
    "start": "299040",
    "end": "301680"
  },
  {
    "text": "like Cada",
    "start": "301680",
    "end": "304440"
  },
  {
    "text": "um this new Eventing scheduler is a also",
    "start": "304440",
    "end": "306840"
  },
  {
    "text": "a k-native generic component it today",
    "start": "306840",
    "end": "309479"
  },
  {
    "text": "lives in the k-native Eventing",
    "start": "309479",
    "end": "310979"
  },
  {
    "text": "repository along with all of its",
    "start": "310979",
    "end": "313139"
  },
  {
    "text": "sub-components and it's a plug-in",
    "start": "313139",
    "end": "314940"
  },
  {
    "text": "implementations",
    "start": "314940",
    "end": "316320"
  },
  {
    "text": "it can be customized to use with your",
    "start": "316320",
    "end": "319380"
  },
  {
    "text": "custom resources and sources and is",
    "start": "319380",
    "end": "322380"
  },
  {
    "text": "meant to be a reusable framework it's",
    "start": "322380",
    "end": "325139"
  },
  {
    "text": "not specific to any existing K native",
    "start": "325139",
    "end": "327720"
  },
  {
    "text": "implementation",
    "start": "327720",
    "end": "329160"
  },
  {
    "text": "so so when it's integrated with your",
    "start": "329160",
    "end": "331620"
  },
  {
    "text": "controllers it can scale your backend",
    "start": "331620",
    "end": "335160"
  },
  {
    "text": "dispatcher deployments and schedule",
    "start": "335160",
    "end": "337080"
  },
  {
    "text": "these virtual replicas onto real",
    "start": "337080",
    "end": "340080"
  },
  {
    "text": "kubernetes pods",
    "start": "340080",
    "end": "343758"
  },
  {
    "text": "next slide let's um discuss a bit",
    "start": "345060",
    "end": "348120"
  },
  {
    "text": "further the technicalities of the",
    "start": "348120",
    "end": "350880"
  },
  {
    "text": "scheduler's implementation",
    "start": "350880",
    "end": "353699"
  },
  {
    "text": "first is a placement duct type object",
    "start": "353699",
    "end": "357240"
  },
  {
    "text": "which is the outcome resulting from the",
    "start": "357240",
    "end": "360479"
  },
  {
    "text": "scheduler doing its job it's implemented",
    "start": "360479",
    "end": "362820"
  },
  {
    "text": "as a duck API type in in familiar terms",
    "start": "362820",
    "end": "365820"
  },
  {
    "text": "it's like Dynamic typing for for data",
    "start": "365820",
    "end": "369120"
  },
  {
    "text": "plane architectures",
    "start": "369120",
    "end": "370860"
  },
  {
    "text": "the these placements store the name of",
    "start": "370860",
    "end": "374160"
  },
  {
    "text": "the Pod where the replica is placed and",
    "start": "374160",
    "end": "376680"
  },
  {
    "text": "also the number of replicas assigned to",
    "start": "376680",
    "end": "379259"
  },
  {
    "text": "that particular pod",
    "start": "379259",
    "end": "381240"
  },
  {
    "text": "now the sub components of the scheduler",
    "start": "381240",
    "end": "383340"
  },
  {
    "text": "include the schedule itself and the Pod",
    "start": "383340",
    "end": "386940"
  },
  {
    "text": "Auto scaler which increases the number",
    "start": "386940",
    "end": "390000"
  },
  {
    "text": "of data plane pods when there are more",
    "start": "390000",
    "end": "392100"
  },
  {
    "text": "replicas to be scheduled and similarly",
    "start": "392100",
    "end": "394620"
  },
  {
    "text": "the Pod Auto scalar decreases the number",
    "start": "394620",
    "end": "396720"
  },
  {
    "text": "of PODS when",
    "start": "396720",
    "end": "398840"
  },
  {
    "text": "placements are descheduled from pods",
    "start": "398840",
    "end": "402479"
  },
  {
    "text": "it also has a state collector that",
    "start": "402479",
    "end": "405539"
  },
  {
    "text": "periodically checks the cluster State",
    "start": "405539",
    "end": "408120"
  },
  {
    "text": "and gathers information about it for the",
    "start": "408120",
    "end": "410819"
  },
  {
    "text": "scheduler to pick the most optimal",
    "start": "410819",
    "end": "413819"
  },
  {
    "text": "placements",
    "start": "413819",
    "end": "415680"
  },
  {
    "text": "it also has a compactor that on every",
    "start": "415680",
    "end": "418979"
  },
  {
    "text": "interval checks the distribution and if",
    "start": "418979",
    "end": "422580"
  },
  {
    "text": "a lower ordinal pod has space it evicts",
    "start": "422580",
    "end": "426000"
  },
  {
    "text": "some replicas from the higher pods and",
    "start": "426000",
    "end": "428400"
  },
  {
    "text": "moves it over and and scales down",
    "start": "428400",
    "end": "432560"
  },
  {
    "text": "um the scheduler also allows many",
    "start": "433319",
    "end": "435000"
  },
  {
    "text": "scheduling features to be implemented as",
    "start": "435000",
    "end": "437340"
  },
  {
    "text": "plugins while keeping the core of the",
    "start": "437340",
    "end": "439979"
  },
  {
    "text": "scheduler simple and maintainable",
    "start": "439979",
    "end": "443400"
  },
  {
    "text": "scheduling happens in a series of stages",
    "start": "443400",
    "end": "445740"
  },
  {
    "text": "first is the filter stage and these",
    "start": "445740",
    "end": "448860"
  },
  {
    "text": "filter plugins known as predicates are",
    "start": "448860",
    "end": "451860"
  },
  {
    "text": "used to filter out the pods where where",
    "start": "451860",
    "end": "454500"
  },
  {
    "text": "a replica cannot be placed",
    "start": "454500",
    "end": "457020"
  },
  {
    "text": "the next stage is scoring the score",
    "start": "457020",
    "end": "460380"
  },
  {
    "text": "scoring plugins also called as",
    "start": "460380",
    "end": "462660"
  },
  {
    "text": "priorities provide a score to each pod",
    "start": "462660",
    "end": "466080"
  },
  {
    "text": "that has passed the filtering space",
    "start": "466080",
    "end": "469680"
  },
  {
    "text": "scheduled will then select the Pod with",
    "start": "469680",
    "end": "472560"
  },
  {
    "text": "the highest weighted score sum",
    "start": "472560",
    "end": "475680"
  },
  {
    "text": "these plugins are registered and they",
    "start": "475680",
    "end": "477900"
  },
  {
    "text": "are compiled into the scheduler",
    "start": "477900",
    "end": "481020"
  },
  {
    "text": "so next the scheduler can handle",
    "start": "481020",
    "end": "483539"
  },
  {
    "text": "recovery from unexpected domain failures",
    "start": "483539",
    "end": "486539"
  },
  {
    "text": "or planned worker restarts due to some",
    "start": "486539",
    "end": "489780"
  },
  {
    "text": "choices in its design",
    "start": "489780",
    "end": "491699"
  },
  {
    "text": "data plane replicas used for scheduling",
    "start": "491699",
    "end": "493919"
  },
  {
    "text": "consumers are actually part of a",
    "start": "493919",
    "end": "495840"
  },
  {
    "text": "stateful step set architecture whose pod",
    "start": "495840",
    "end": "499500"
  },
  {
    "text": "anti-affinity rules is such that it it",
    "start": "499500",
    "end": "502740"
  },
  {
    "text": "constrains which node each replica in",
    "start": "502740",
    "end": "505500"
  },
  {
    "text": "the stateful set is allowed to be",
    "start": "505500",
    "end": "507720"
  },
  {
    "text": "scheduled on",
    "start": "507720",
    "end": "508860"
  },
  {
    "text": "the scheduler also relies on the the",
    "start": "508860",
    "end": "512640"
  },
  {
    "text": "sticky identity of pods in a stateful",
    "start": "512640",
    "end": "515099"
  },
  {
    "text": "set",
    "start": "515099",
    "end": "516839"
  },
  {
    "text": "finally any changes in the consumers",
    "start": "516839",
    "end": "520200"
  },
  {
    "text": "count cause causes rebalancing to be",
    "start": "520200",
    "end": "523979"
  },
  {
    "text": "initiated by the scheduler on the next",
    "start": "523979",
    "end": "526620"
  },
  {
    "text": "reconciliation Loop",
    "start": "526620",
    "end": "528480"
  },
  {
    "text": "the scheduler here is uh inspired from",
    "start": "528480",
    "end": "531480"
  },
  {
    "text": "the real kubernetes scheduler that I",
    "start": "531480",
    "end": "534060"
  },
  {
    "text": "have referenced at the bottom",
    "start": "534060",
    "end": "537680"
  },
  {
    "text": "okay uh we have a simple diagram here",
    "start": "538620",
    "end": "542700"
  },
  {
    "text": "showing the various components of",
    "start": "542700",
    "end": "545339"
  },
  {
    "text": "Interest",
    "start": "545339",
    "end": "546540"
  },
  {
    "text": "the Romantic scheduler and all of its",
    "start": "546540",
    "end": "548940"
  },
  {
    "text": "sub components are on the right there's",
    "start": "548940",
    "end": "551519"
  },
  {
    "text": "cada Auto scaler on the left and then",
    "start": "551519",
    "end": "554339"
  },
  {
    "text": "the Eventing Kafka broker back resources",
    "start": "554339",
    "end": "557220"
  },
  {
    "text": "in the center all working together to",
    "start": "557220",
    "end": "559980"
  },
  {
    "text": "provide a serverless experience",
    "start": "559980",
    "end": "562740"
  },
  {
    "text": "so let's focus on the Kafka Source",
    "start": "562740",
    "end": "564839"
  },
  {
    "text": "external API in in the green box",
    "start": "564839",
    "end": "567779"
  },
  {
    "text": "as you know the Kafka Source API is used",
    "start": "567779",
    "end": "571260"
  },
  {
    "text": "for consuming messages from one or more",
    "start": "571260",
    "end": "574200"
  },
  {
    "text": "Kafka topics which are then forwarded as",
    "start": "574200",
    "end": "578040"
  },
  {
    "text": "Cloud events to a single sync service",
    "start": "578040",
    "end": "580860"
  },
  {
    "text": "so this Kafka Source API is a",
    "start": "580860",
    "end": "583320"
  },
  {
    "text": "user-facing external API",
    "start": "583320",
    "end": "585839"
  },
  {
    "text": "as part of this new architecture we have",
    "start": "585839",
    "end": "588300"
  },
  {
    "text": "some new custom resources as part of the",
    "start": "588300",
    "end": "590760"
  },
  {
    "text": "scaling feature called consumer groups",
    "start": "590760",
    "end": "593339"
  },
  {
    "text": "in the white box and and consumers today",
    "start": "593339",
    "end": "596640"
  },
  {
    "text": "please note that these two new apis are",
    "start": "596640",
    "end": "599519"
  },
  {
    "text": "internal apis unlike Kafka source and",
    "start": "599519",
    "end": "603240"
  },
  {
    "text": "users typically would not need to care",
    "start": "603240",
    "end": "605820"
  },
  {
    "text": "about them",
    "start": "605820",
    "end": "607160"
  },
  {
    "text": "disclaimer that this naming is not to be",
    "start": "607160",
    "end": "609899"
  },
  {
    "text": "confused with Kafka terminology for",
    "start": "609899",
    "end": "612720"
  },
  {
    "text": "consumers the there these are subject to",
    "start": "612720",
    "end": "615779"
  },
  {
    "text": "change",
    "start": "615779",
    "end": "617480"
  },
  {
    "text": "okay so each Kafka Source instance is",
    "start": "617480",
    "end": "621300"
  },
  {
    "text": "associated with the creation of a new",
    "start": "621300",
    "end": "624060"
  },
  {
    "text": "consumer group",
    "start": "624060",
    "end": "625680"
  },
  {
    "text": "which behaves as a virtual pod within",
    "start": "625680",
    "end": "628980"
  },
  {
    "text": "the Eventing scheduler framework and it",
    "start": "628980",
    "end": "631440"
  },
  {
    "text": "can be scaled up and down by increasing",
    "start": "631440",
    "end": "633959"
  },
  {
    "text": "or decreasing the number of",
    "start": "633959",
    "end": "636600"
  },
  {
    "text": "um virtual pod replicas for maximum",
    "start": "636600",
    "end": "639660"
  },
  {
    "text": "distributed processing it can be",
    "start": "639660",
    "end": "642060"
  },
  {
    "text": "manually scaled or it can be Auto scaled",
    "start": "642060",
    "end": "644519"
  },
  {
    "text": "by by Cada",
    "start": "644519",
    "end": "646260"
  },
  {
    "text": "now the job of the scheduler is to place",
    "start": "646260",
    "end": "649140"
  },
  {
    "text": "these virtual replicas onto real",
    "start": "649140",
    "end": "651540"
  },
  {
    "text": "kubernetes data plane pods that you see",
    "start": "651540",
    "end": "654300"
  },
  {
    "text": "at the very bottom and and then come up",
    "start": "654300",
    "end": "656880"
  },
  {
    "text": "with a set of placements which is then",
    "start": "656880",
    "end": "659720"
  },
  {
    "text": "propagated back to the Kafka Source",
    "start": "659720",
    "end": "662399"
  },
  {
    "text": "status fields",
    "start": "662399",
    "end": "664019"
  },
  {
    "text": "uh and and a new consumer resource is",
    "start": "664019",
    "end": "667260"
  },
  {
    "text": "created for each of those data plane pod",
    "start": "667260",
    "end": "669480"
  },
  {
    "text": "pods and and they're bound one to one",
    "start": "669480",
    "end": "673320"
  },
  {
    "text": "on the right side of the screen you'll",
    "start": "673320",
    "end": "675240"
  },
  {
    "text": "see a sample",
    "start": "675240",
    "end": "677100"
  },
  {
    "text": "um scheduler config map it has the",
    "start": "677100",
    "end": "679620"
  },
  {
    "text": "predicates and priorities uh the default",
    "start": "679620",
    "end": "682380"
  },
  {
    "text": "predicates and priorities listed and",
    "start": "682380",
    "end": "684480"
  },
  {
    "text": "it's important to choose the predicates",
    "start": "684480",
    "end": "686459"
  },
  {
    "text": "and priorities that fits the needs of",
    "start": "686459",
    "end": "688980"
  },
  {
    "text": "your environment or you can even",
    "start": "688980",
    "end": "690720"
  },
  {
    "text": "Implement ones of your own and plug them",
    "start": "690720",
    "end": "693420"
  },
  {
    "text": "in via the scheduler's registry",
    "start": "693420",
    "end": "696600"
  },
  {
    "text": "next slide",
    "start": "696600",
    "end": "699060"
  },
  {
    "text": "so some of the advantages of this",
    "start": "699060",
    "end": "701160"
  },
  {
    "text": "Eventing scheduler for your k-native",
    "start": "701160",
    "end": "703140"
  },
  {
    "text": "resources are the following",
    "start": "703140",
    "end": "705779"
  },
  {
    "text": "the main goal of architecting a general",
    "start": "705779",
    "end": "709100"
  },
  {
    "text": "Standalone scheduler as such is to",
    "start": "709100",
    "end": "712740"
  },
  {
    "text": "encourage reusability and not have to",
    "start": "712740",
    "end": "715560"
  },
  {
    "text": "reinvent the wheel for new resources",
    "start": "715560",
    "end": "720060"
  },
  {
    "text": "the the scheduler and how it picks",
    "start": "720060",
    "end": "722459"
  },
  {
    "text": "placements is very much configurable in",
    "start": "722459",
    "end": "725880"
  },
  {
    "text": "terms of choosing the strategies that is",
    "start": "725880",
    "end": "728820"
  },
  {
    "text": "important to you and also being able to",
    "start": "728820",
    "end": "731220"
  },
  {
    "text": "easily plug in these new strategies",
    "start": "731220",
    "end": "734880"
  },
  {
    "text": "and such flexibility helps in separating",
    "start": "734880",
    "end": "738540"
  },
  {
    "text": "concerns for different Persona and for",
    "start": "738540",
    "end": "741720"
  },
  {
    "text": "different environments for example a",
    "start": "741720",
    "end": "744899"
  },
  {
    "text": "developer in a local environment may",
    "start": "744899",
    "end": "747720"
  },
  {
    "text": "need a different scheduling setup from",
    "start": "747720",
    "end": "750000"
  },
  {
    "text": "an SRE in a production environment",
    "start": "750000",
    "end": "754700"
  },
  {
    "text": "to promote this reuse having a",
    "start": "754700",
    "end": "757800"
  },
  {
    "text": "consistent API like the shared internal",
    "start": "757800",
    "end": "760140"
  },
  {
    "text": "apis I showed you for consumer groups",
    "start": "760140",
    "end": "762600"
  },
  {
    "text": "and consumers and the placeable duck API",
    "start": "762600",
    "end": "765899"
  },
  {
    "text": "type we talked about with you know",
    "start": "765899",
    "end": "767579"
  },
  {
    "text": "similar vocabulary is critical for a",
    "start": "767579",
    "end": "770639"
  },
  {
    "text": "smooth reuse",
    "start": "770639",
    "end": "772620"
  },
  {
    "text": "some other benefits to keeping the",
    "start": "772620",
    "end": "774959"
  },
  {
    "text": "scheduler component separate is having",
    "start": "774959",
    "end": "777320"
  },
  {
    "text": "resource controllers that are easily",
    "start": "777320",
    "end": "780420"
  },
  {
    "text": "extensible and Loosely coupled from one",
    "start": "780420",
    "end": "783060"
  },
  {
    "text": "another",
    "start": "783060",
    "end": "784459"
  },
  {
    "text": "now this goes without saying that it the",
    "start": "784459",
    "end": "787800"
  },
  {
    "text": "scheduler provides a a simpler way of",
    "start": "787800",
    "end": "790260"
  },
  {
    "text": "supporting High availability and",
    "start": "790260",
    "end": "792600"
  },
  {
    "text": "scalability for all your resources many",
    "start": "792600",
    "end": "795540"
  },
  {
    "text": "times event meshes rely on not just 1K",
    "start": "795540",
    "end": "798839"
  },
  {
    "text": "native component but a collection of",
    "start": "798839",
    "end": "801000"
  },
  {
    "text": "them",
    "start": "801000",
    "end": "802920"
  },
  {
    "text": "with one code package to maintain for",
    "start": "802920",
    "end": "805440"
  },
  {
    "text": "the scheduler it makes this whole thing",
    "start": "805440",
    "end": "807720"
  },
  {
    "text": "more sustainable across different K",
    "start": "807720",
    "end": "810660"
  },
  {
    "text": "native resources",
    "start": "810660",
    "end": "812220"
  },
  {
    "text": "you may also have noticed that the data",
    "start": "812220",
    "end": "814620"
  },
  {
    "text": "plane runtime is shared between the",
    "start": "814620",
    "end": "817920"
  },
  {
    "text": "kafka-backed components in the previous",
    "start": "817920",
    "end": "820019"
  },
  {
    "text": "diagram which provides a lower memory",
    "start": "820019",
    "end": "823320"
  },
  {
    "text": "usage",
    "start": "823320",
    "end": "825500"
  },
  {
    "text": "next slide so now let's switch modes to",
    "start": "825500",
    "end": "829560"
  },
  {
    "text": "demonstrate the scaling of an example",
    "start": "829560",
    "end": "831839"
  },
  {
    "text": "Kafka source",
    "start": "831839",
    "end": "833279"
  },
  {
    "text": "so the core repository associated with",
    "start": "833279",
    "end": "835500"
  },
  {
    "text": "the changes needed to run this Eventing",
    "start": "835500",
    "end": "837540"
  },
  {
    "text": "source is the Eventing Kafka broker",
    "start": "837540",
    "end": "840660"
  },
  {
    "text": "repository from K native sandbox",
    "start": "840660",
    "end": "844680"
  },
  {
    "text": "um I have an IBM Cloud kubernetes",
    "start": "844680",
    "end": "846839"
  },
  {
    "text": "cluster already running that contains",
    "start": "846839",
    "end": "849360"
  },
  {
    "text": "nine worker nodes spread across three",
    "start": "849360",
    "end": "852360"
  },
  {
    "text": "U.S zones each containing three nodes",
    "start": "852360",
    "end": "856740"
  },
  {
    "text": "and as preparation for this demo I've",
    "start": "856740",
    "end": "859200"
  },
  {
    "text": "already installed K native Eventing in",
    "start": "859200",
    "end": "861600"
  },
  {
    "text": "my cluster along with an IBM event",
    "start": "861600",
    "end": "863880"
  },
  {
    "text": "streams instance that has a new topic",
    "start": "863880",
    "end": "867300"
  },
  {
    "text": "with 100 partitions and these are",
    "start": "867300",
    "end": "870120"
  },
  {
    "text": "already successfully running I've also",
    "start": "870120",
    "end": "872700"
  },
  {
    "text": "installed the control and the data",
    "start": "872700",
    "end": "875220"
  },
  {
    "text": "planes from Eventing Kafka broker for",
    "start": "875220",
    "end": "878100"
  },
  {
    "text": "Kafka source",
    "start": "878100",
    "end": "881060"
  },
  {
    "text": "um if for the purposes of this demo I've",
    "start": "881279",
    "end": "883440"
  },
  {
    "text": "also installed cada for a quick show of",
    "start": "883440",
    "end": "885959"
  },
  {
    "text": "Auto scaling and if you would like to do",
    "start": "885959",
    "end": "888540"
  },
  {
    "text": "all these steps by yourself these links",
    "start": "888540",
    "end": "890760"
  },
  {
    "text": "will take you to the uh the installation",
    "start": "890760",
    "end": "893519"
  },
  {
    "text": "documentation",
    "start": "893519",
    "end": "895220"
  },
  {
    "text": "I also have a simple event sync where",
    "start": "895220",
    "end": "898980"
  },
  {
    "text": "messages will be delivered by the Kafka",
    "start": "898980",
    "end": "902220"
  },
  {
    "text": "source and an event producer go live",
    "start": "902220",
    "end": "905579"
  },
  {
    "text": "script that will just help us write",
    "start": "905579",
    "end": "907260"
  },
  {
    "text": "messages to the topic",
    "start": "907260",
    "end": "910980"
  },
  {
    "text": "okay so let's switch screens to our",
    "start": "910980",
    "end": "913680"
  },
  {
    "text": "terminal",
    "start": "913680",
    "end": "916100"
  },
  {
    "text": "okay so let me give you a look into what",
    "start": "916620",
    "end": "920579"
  },
  {
    "text": "the Kafka source",
    "start": "920579",
    "end": "922980"
  },
  {
    "text": "custom resource looks like so here I",
    "start": "922980",
    "end": "926519"
  },
  {
    "text": "have a Kafka Source specified that in",
    "start": "926519",
    "end": "930240"
  },
  {
    "text": "the specification has information about",
    "start": "930240",
    "end": "932699"
  },
  {
    "text": "the Kafka event streams instance you can",
    "start": "932699",
    "end": "936000"
  },
  {
    "text": "put in your information about your",
    "start": "936000",
    "end": "937260"
  },
  {
    "text": "bootstrap servers and also",
    "start": "937260",
    "end": "940019"
  },
  {
    "text": "um a secret containing that will help",
    "start": "940019",
    "end": "942600"
  },
  {
    "text": "authenticate to your Kafka Source in",
    "start": "942600",
    "end": "945480"
  },
  {
    "text": "addition I have specified",
    "start": "945480",
    "end": "948079"
  },
  {
    "text": "12 consumers",
    "start": "948079",
    "end": "951180"
  },
  {
    "text": "um to as just to just start started with",
    "start": "951180",
    "end": "955320"
  },
  {
    "text": "okay so let's get out of that and let's",
    "start": "955320",
    "end": "959399"
  },
  {
    "text": "go ahead and install this uh example",
    "start": "959399",
    "end": "961860"
  },
  {
    "text": "Kafka source so one one thing is that",
    "start": "961860",
    "end": "964800"
  },
  {
    "text": "I've um currently I have cada disabled",
    "start": "964800",
    "end": "967560"
  },
  {
    "text": "for this very first step",
    "start": "967560",
    "end": "969779"
  },
  {
    "text": "go ahead and install it",
    "start": "969779",
    "end": "973220"
  },
  {
    "text": "okay so once it's installed we can take",
    "start": "980760",
    "end": "983699"
  },
  {
    "text": "a look at the status by",
    "start": "983699",
    "end": "988680"
  },
  {
    "text": "okay it is it is in the works it's doing",
    "start": "991380",
    "end": "994620"
  },
  {
    "text": "The Binding that I mentioned uh the data",
    "start": "994620",
    "end": "997139"
  },
  {
    "text": "plane pod to a specific consumer",
    "start": "997139",
    "end": "1000019"
  },
  {
    "text": "resource",
    "start": "1000019",
    "end": "1002000"
  },
  {
    "text": "let's refresh",
    "start": "1002000",
    "end": "1005259"
  },
  {
    "text": "okay looks like all 12 replicas that",
    "start": "1005600",
    "end": "1008180"
  },
  {
    "text": "I've requested four have been um have",
    "start": "1008180",
    "end": "1011120"
  },
  {
    "text": "been scheduled and now let's take a look",
    "start": "1011120",
    "end": "1013100"
  },
  {
    "text": "at how what the placements look like",
    "start": "1013100",
    "end": "1017139"
  },
  {
    "text": "okay so as you can see here this is",
    "start": "1017959",
    "end": "1020720"
  },
  {
    "text": "showing the placements information in",
    "start": "1020720",
    "end": "1023120"
  },
  {
    "text": "the status section of the Kafka source",
    "start": "1023120",
    "end": "1025760"
  },
  {
    "text": "and as you can see here the 12 replicas",
    "start": "1025760",
    "end": "1028280"
  },
  {
    "text": "have been equally distributed among",
    "start": "1028280",
    "end": "1030980"
  },
  {
    "text": "three different dispatcher pods and the",
    "start": "1030980",
    "end": "1033319"
  },
  {
    "text": "way the state full set architecture is",
    "start": "1033319",
    "end": "1035360"
  },
  {
    "text": "defined these pods live on different",
    "start": "1035360",
    "end": "1039260"
  },
  {
    "text": "nodes in different zones so this",
    "start": "1039260",
    "end": "1042438"
  },
  {
    "text": "satisfies h a",
    "start": "1042439",
    "end": "1044558"
  },
  {
    "text": "okay so",
    "start": "1044559",
    "end": "1046699"
  },
  {
    "text": "um next we're going to hit this Kafka",
    "start": "1046699",
    "end": "1048980"
  },
  {
    "text": "Source uh hit uh Kafka topic with a few",
    "start": "1048980",
    "end": "1051860"
  },
  {
    "text": "messages just uh using an event producer",
    "start": "1051860",
    "end": "1054799"
  },
  {
    "text": "script that I have but before that let",
    "start": "1054799",
    "end": "1056600"
  },
  {
    "text": "me just quickly re-enable cada let's",
    "start": "1056600",
    "end": "1059780"
  },
  {
    "text": "bring Auto scaling into action here",
    "start": "1059780",
    "end": "1063520"
  },
  {
    "text": "okay",
    "start": "1064640",
    "end": "1067360"
  },
  {
    "text": "excuse me",
    "start": "1070039",
    "end": "1072700"
  },
  {
    "text": "okay so that's going to be up soon",
    "start": "1073039",
    "end": "1076600"
  },
  {
    "text": "and when Keda comes up",
    "start": "1076640",
    "end": "1080660"
  },
  {
    "text": "it's going to bring some changes to our",
    "start": "1080660",
    "end": "1083419"
  },
  {
    "text": "Kafka source",
    "start": "1083419",
    "end": "1086259"
  },
  {
    "text": "let's wait for a few seconds",
    "start": "1091700",
    "end": "1095080"
  },
  {
    "text": "okay so what you see here is that cada",
    "start": "1100400",
    "end": "1103220"
  },
  {
    "text": "is in control now and it has Auto scaled",
    "start": "1103220",
    "end": "1106100"
  },
  {
    "text": "the 12 replicas that we had originally",
    "start": "1106100",
    "end": "1108200"
  },
  {
    "text": "request requested down to zero because",
    "start": "1108200",
    "end": "1111020"
  },
  {
    "text": "the Kafka Source currently is idle and",
    "start": "1111020",
    "end": "1113059"
  },
  {
    "text": "it's not processing any events I haven't",
    "start": "1113059",
    "end": "1114679"
  },
  {
    "text": "sent any events yet so let me go ahead",
    "start": "1114679",
    "end": "1117140"
  },
  {
    "text": "and call my event producer script to to",
    "start": "1117140",
    "end": "1121700"
  },
  {
    "text": "send some events",
    "start": "1121700",
    "end": "1123500"
  },
  {
    "text": "I'm going to do just uh 10 events",
    "start": "1123500",
    "end": "1127160"
  },
  {
    "text": "let's",
    "start": "1127160",
    "end": "1129320"
  },
  {
    "text": "send that off",
    "start": "1129320",
    "end": "1132340"
  },
  {
    "text": "okay so all 10 messages have been sent",
    "start": "1137960",
    "end": "1141320"
  },
  {
    "text": "and let's see what's now going to happen",
    "start": "1141320",
    "end": "1143299"
  },
  {
    "text": "to our consumer group okay so what you",
    "start": "1143299",
    "end": "1145820"
  },
  {
    "text": "see here is that cada has now increased",
    "start": "1145820",
    "end": "1148760"
  },
  {
    "text": "the number of scalable replicas on the",
    "start": "1148760",
    "end": "1151039"
  },
  {
    "text": "Kafka Source from zero to one so that",
    "start": "1151039",
    "end": "1154400"
  },
  {
    "text": "there is a consumer replica doing the",
    "start": "1154400",
    "end": "1156620"
  },
  {
    "text": "processing of these events and to",
    "start": "1156620",
    "end": "1158720"
  },
  {
    "text": "confirm that the events are being",
    "start": "1158720",
    "end": "1159980"
  },
  {
    "text": "received",
    "start": "1159980",
    "end": "1161320"
  },
  {
    "text": "at the sink we can quickly just take a",
    "start": "1161320",
    "end": "1164900"
  },
  {
    "text": "look at the sync which is just an event",
    "start": "1164900",
    "end": "1167240"
  },
  {
    "text": "display and here you see the events that",
    "start": "1167240",
    "end": "1169700"
  },
  {
    "text": "I sent to my Kafka topic have been",
    "start": "1169700",
    "end": "1172280"
  },
  {
    "text": "received and are being logged in my sync",
    "start": "1172280",
    "end": "1175640"
  },
  {
    "text": "service",
    "start": "1175640",
    "end": "1177500"
  },
  {
    "text": "yeah",
    "start": "1177500",
    "end": "1178220"
  },
  {
    "text": "okay and once the processing of these 10",
    "start": "1178220",
    "end": "1181039"
  },
  {
    "text": "events are over we should expect again",
    "start": "1181039",
    "end": "1182980"
  },
  {
    "text": "Keda to bring back the replica account",
    "start": "1182980",
    "end": "1186559"
  },
  {
    "text": "down to zero there you go",
    "start": "1186559",
    "end": "1189500"
  },
  {
    "text": "Okay so we've seen the whole flow from",
    "start": "1189500",
    "end": "1192799"
  },
  {
    "text": "Kafka topics to the Kafka source with",
    "start": "1192799",
    "end": "1196160"
  },
  {
    "text": "the autoscaler in action and the",
    "start": "1196160",
    "end": "1197900"
  },
  {
    "text": "messages have been processed and",
    "start": "1197900",
    "end": "1199220"
  },
  {
    "text": "received at the sync location",
    "start": "1199220",
    "end": "1201860"
  },
  {
    "text": "so now let's make this a little bit more",
    "start": "1201860",
    "end": "1203480"
  },
  {
    "text": "practical by performing a worker node",
    "start": "1203480",
    "end": "1206660"
  },
  {
    "text": "update and see how the Kafka source and",
    "start": "1206660",
    "end": "1209780"
  },
  {
    "text": "the scheduler helps with the recovery",
    "start": "1209780",
    "end": "1213080"
  },
  {
    "text": "so for that I am going to scale up my",
    "start": "1213080",
    "end": "1217039"
  },
  {
    "text": "consumer group",
    "start": "1217039",
    "end": "1219919"
  },
  {
    "text": "replicas manually",
    "start": "1219919",
    "end": "1222919"
  },
  {
    "text": "let me scale it up to 60.",
    "start": "1222919",
    "end": "1226899"
  },
  {
    "text": "Okay because I'm going to send it send",
    "start": "1230179",
    "end": "1232400"
  },
  {
    "text": "it a whole bunch of events now",
    "start": "1232400",
    "end": "1235539"
  },
  {
    "text": "okay and before we send the events let's",
    "start": "1236720",
    "end": "1240080"
  },
  {
    "text": "take a quick look at the status",
    "start": "1240080",
    "end": "1244419"
  },
  {
    "text": "okay let's send the events first",
    "start": "1249860",
    "end": "1253340"
  },
  {
    "text": "okay so now I'm going to send",
    "start": "1253340",
    "end": "1255980"
  },
  {
    "text": "um a",
    "start": "1255980",
    "end": "1257720"
  },
  {
    "text": "10 000 events a whole lot more than we",
    "start": "1257720",
    "end": "1260059"
  },
  {
    "text": "did last time",
    "start": "1260059",
    "end": "1262659"
  },
  {
    "text": "okay so these events have been sent and",
    "start": "1265580",
    "end": "1267919"
  },
  {
    "text": "now let's try scaling up",
    "start": "1267919",
    "end": "1271779"
  },
  {
    "text": "okay",
    "start": "1272299",
    "end": "1275080"
  },
  {
    "text": "okay so there you go the scheduling is",
    "start": "1277160",
    "end": "1279919"
  },
  {
    "text": "happening of these um 60 replicas that I",
    "start": "1279919",
    "end": "1282440"
  },
  {
    "text": "requested in order to be able to handle",
    "start": "1282440",
    "end": "1284780"
  },
  {
    "text": "these 10 000 events sort of quickly not",
    "start": "1284780",
    "end": "1286940"
  },
  {
    "text": "sort of waiting on the autoscaler to do",
    "start": "1286940",
    "end": "1288860"
  },
  {
    "text": "it okay now let's decide on which node",
    "start": "1288860",
    "end": "1292640"
  },
  {
    "text": "we want to take down",
    "start": "1292640",
    "end": "1295760"
  },
  {
    "text": "let's see",
    "start": "1295760",
    "end": "1297980"
  },
  {
    "text": "if maybe we can take down this pod that",
    "start": "1297980",
    "end": "1300679"
  },
  {
    "text": "actually one of my dispatcher pods is",
    "start": "1300679",
    "end": "1302360"
  },
  {
    "text": "running on currently uh 188 26",
    "start": "1302360",
    "end": "1307539"
  },
  {
    "text": "okay okay so let's give this work a node",
    "start": "1310059",
    "end": "1313880"
  },
  {
    "text": "an update",
    "start": "1313880",
    "end": "1316220"
  },
  {
    "text": "so that it's sort of temporarily not",
    "start": "1316220",
    "end": "1319460"
  },
  {
    "text": "available",
    "start": "1319460",
    "end": "1321640"
  },
  {
    "text": "okay so that's the end of the the the",
    "start": "1346760",
    "end": "1349100"
  },
  {
    "text": "demo now let's go back to our slides",
    "start": "1349100",
    "end": "1354440"
  },
  {
    "text": "okay",
    "start": "1354440",
    "end": "1356919"
  },
  {
    "text": "so",
    "start": "1357679",
    "end": "1360279"
  },
  {
    "text": "using K native Kafka using Kafka",
    "start": "1360700",
    "end": "1363380"
  },
  {
    "text": "Eventing Source in uh in an image of an",
    "start": "1363380",
    "end": "1366320"
  },
  {
    "text": "architecture provides at least once an",
    "start": "1366320",
    "end": "1368720"
  },
  {
    "text": "event delivery guarantee with events in",
    "start": "1368720",
    "end": "1371240"
  },
  {
    "text": "each partition being processed in order",
    "start": "1371240",
    "end": "1373039"
  },
  {
    "text": "this means that operations are retried",
    "start": "1373039",
    "end": "1376640"
  },
  {
    "text": "until a return code is received",
    "start": "1376640",
    "end": "1380539"
  },
  {
    "text": "um this also makes applications more",
    "start": "1380539",
    "end": "1382520"
  },
  {
    "text": "resilient to Lost events however it",
    "start": "1382520",
    "end": "1386000"
  },
  {
    "text": "might result in duplicate events being",
    "start": "1386000",
    "end": "1388039"
  },
  {
    "text": "sent among other performance issues like",
    "start": "1388039",
    "end": "1390500"
  },
  {
    "text": "events in a queue taking too long to be",
    "start": "1390500",
    "end": "1393140"
  },
  {
    "text": "processed or not having enough",
    "start": "1393140",
    "end": "1395059"
  },
  {
    "text": "concurrent clients to process events",
    "start": "1395059",
    "end": "1396980"
  },
  {
    "text": "synchronously and we've all seen all",
    "start": "1396980",
    "end": "1398659"
  },
  {
    "text": "this",
    "start": "1398659",
    "end": "1399440"
  },
  {
    "text": "but what I want to share with you is",
    "start": "1399440",
    "end": "1402140"
  },
  {
    "text": "that the Eventing Kafka broker data",
    "start": "1402140",
    "end": "1404120"
  },
  {
    "text": "plane today",
    "start": "1404120",
    "end": "1405340"
  },
  {
    "text": "exposes some of these Kafka consumer",
    "start": "1405340",
    "end": "1407900"
  },
  {
    "text": "configurations through config maps that",
    "start": "1407900",
    "end": "1410600"
  },
  {
    "text": "can be tuned to suit your specific",
    "start": "1410600",
    "end": "1412520"
  },
  {
    "text": "workloads these are some of the",
    "start": "1412520",
    "end": "1415039"
  },
  {
    "text": "parameters that when tweaked showed a",
    "start": "1415039",
    "end": "1417620"
  },
  {
    "text": "significant Improvement in performance",
    "start": "1417620",
    "end": "1419600"
  },
  {
    "text": "especially to lower the number of",
    "start": "1419600",
    "end": "1421820"
  },
  {
    "text": "duplicate messages and to speed up",
    "start": "1421820",
    "end": "1423860"
  },
  {
    "text": "concurrent processing",
    "start": "1423860",
    "end": "1426200"
  },
  {
    "text": "yeah",
    "start": "1426200",
    "end": "1427340"
  },
  {
    "text": "next slide",
    "start": "1427340",
    "end": "1428960"
  },
  {
    "text": "if you're still interested in the work",
    "start": "1428960",
    "end": "1430640"
  },
  {
    "text": "here it might help to know that there is",
    "start": "1430640",
    "end": "1433100"
  },
  {
    "text": "work currently being done to expand",
    "start": "1433100",
    "end": "1435440"
  },
  {
    "text": "scalability using the scheduler with",
    "start": "1435440",
    "end": "1437600"
  },
  {
    "text": "other k-native components like triggers",
    "start": "1437600",
    "end": "1440120"
  },
  {
    "text": "and channels we're also integrating many",
    "start": "1440120",
    "end": "1443539"
  },
  {
    "text": "of these kafka-backed k-native resources",
    "start": "1443539",
    "end": "1446960"
  },
  {
    "text": "directly with the cada Auto scaler so",
    "start": "1446960",
    "end": "1450260"
  },
  {
    "text": "direct integration is guaranteed to",
    "start": "1450260",
    "end": "1452539"
  },
  {
    "text": "really simplify further and operators",
    "start": "1452539",
    "end": "1455600"
  },
  {
    "text": "experience whose job is to manage",
    "start": "1455600",
    "end": "1458360"
  },
  {
    "text": "various installations this also means",
    "start": "1458360",
    "end": "1461360"
  },
  {
    "text": "that we will have Auto scaling and the",
    "start": "1461360",
    "end": "1464360"
  },
  {
    "text": "scheduling that we just saw all in one",
    "start": "1464360",
    "end": "1466700"
  },
  {
    "text": "place happening on the same apis",
    "start": "1466700",
    "end": "1471399"
  },
  {
    "text": "this brings us to the end of this talk",
    "start": "1471820",
    "end": "1474440"
  },
  {
    "text": "thank you so much for attending and",
    "start": "1474440",
    "end": "1476900"
  },
  {
    "text": "taking the time to listen to what's",
    "start": "1476900",
    "end": "1479360"
  },
  {
    "text": "going on in this space to have scalable",
    "start": "1479360",
    "end": "1481400"
  },
  {
    "text": "sources and to support our keynative",
    "start": "1481400",
    "end": "1483860"
  },
  {
    "text": "users in a production setting it's also",
    "start": "1483860",
    "end": "1487400"
  },
  {
    "text": "been a great time collaborating with our",
    "start": "1487400",
    "end": "1489679"
  },
  {
    "text": "red hat serverless team partners on",
    "start": "1489679",
    "end": "1492080"
  },
  {
    "text": "bringing the solution to completion and",
    "start": "1492080",
    "end": "1495080"
  },
  {
    "text": "also members of the IBM research and the",
    "start": "1495080",
    "end": "1497780"
  },
  {
    "text": "product teams at IBM cloud",
    "start": "1497780",
    "end": "1500659"
  },
  {
    "text": "I look forward to answering any",
    "start": "1500659",
    "end": "1502700"
  },
  {
    "text": "questions via the online chat or you can",
    "start": "1502700",
    "end": "1505580"
  },
  {
    "text": "reach out through some of these other",
    "start": "1505580",
    "end": "1507380"
  },
  {
    "text": "ways and join the effort to make key",
    "start": "1507380",
    "end": "1510080"
  },
  {
    "text": "native Eventing even more serverless",
    "start": "1510080",
    "end": "1512419"
  },
  {
    "text": "thank you so much",
    "start": "1512419",
    "end": "1515679"
  },
  {
    "text": "[Applause]",
    "start": "1516330",
    "end": "1521470"
  }
]