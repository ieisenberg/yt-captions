[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "so hi everyone my name is Alexander",
    "start": "4880",
    "end": "8240"
  },
  {
    "text": "constantinescu I'm working as a software",
    "start": "8240",
    "end": "10980"
  },
  {
    "text": "engineer for confluent",
    "start": "10980",
    "end": "12780"
  },
  {
    "text": "and I'm going to be presenting",
    "start": "12780",
    "end": "15599"
  },
  {
    "text": "essentially a Year's worth of work that",
    "start": "15599",
    "end": "18720"
  },
  {
    "text": "me and my company and the Upstream",
    "start": "18720",
    "end": "21000"
  },
  {
    "text": "kubernetes community",
    "start": "21000",
    "end": "22800"
  },
  {
    "text": "have been working on with the goal of",
    "start": "22800",
    "end": "26340"
  },
  {
    "text": "improving the reliability of kubernetes",
    "start": "26340",
    "end": "28800"
  },
  {
    "text": "load balancers",
    "start": "28800",
    "end": "31500"
  },
  {
    "text": "um quick note about me and my company",
    "start": "31500",
    "end": "34500"
  },
  {
    "text": "essentially what I'm going to be",
    "start": "34500",
    "end": "35880"
  },
  {
    "text": "presenting is kind of a niche problem",
    "start": "35880",
    "end": "37739"
  },
  {
    "text": "that I hope that many of you have never",
    "start": "37739",
    "end": "40500"
  },
  {
    "text": "experienced before and that you might",
    "start": "40500",
    "end": "43379"
  },
  {
    "text": "however experience in the future should",
    "start": "43379",
    "end": "45660"
  },
  {
    "text": "you run a lot of load balancers in your",
    "start": "45660",
    "end": "49500"
  },
  {
    "text": "clusters and when I mean a lot of load",
    "start": "49500",
    "end": "52260"
  },
  {
    "text": "balancers I'm talking about roughly the",
    "start": "52260",
    "end": "55020"
  },
  {
    "text": "same amount of load balancers as you",
    "start": "55020",
    "end": "57539"
  },
  {
    "text": "would have nodes this is essentially",
    "start": "57539",
    "end": "59820"
  },
  {
    "text": "kind of a scalability problem that",
    "start": "59820",
    "end": "62879"
  },
  {
    "text": "arises during operations with services",
    "start": "62879",
    "end": "67680"
  },
  {
    "start": "67000",
    "end": "154000"
  },
  {
    "text": "so I'm going to begin by presenting a",
    "start": "67680",
    "end": "70080"
  },
  {
    "text": "bit of the background that exists within",
    "start": "70080",
    "end": "73200"
  },
  {
    "text": "this problem space the problem in itself",
    "start": "73200",
    "end": "76100"
  },
  {
    "text": "the solution that we've been working on",
    "start": "76100",
    "end": "78659"
  },
  {
    "text": "and kind of some future work that we",
    "start": "78659",
    "end": "81240"
  },
  {
    "text": "have on the Whiteboard for the future so",
    "start": "81240",
    "end": "84360"
  },
  {
    "text": "so to begin with kubernetes load",
    "start": "84360",
    "end": "86880"
  },
  {
    "text": "balancers I think it's good to be a bit",
    "start": "86880",
    "end": "88619"
  },
  {
    "text": "more specific because the term load",
    "start": "88619",
    "end": "91619"
  },
  {
    "text": "balancer in an ecosystem such as",
    "start": "91619",
    "end": "93840"
  },
  {
    "text": "kubernetes can mean a lot of different",
    "start": "93840",
    "end": "95280"
  },
  {
    "text": "things so to begin with it's doesn't",
    "start": "95280",
    "end": "98340"
  },
  {
    "text": "have any relation to do with bare metal",
    "start": "98340",
    "end": "100680"
  },
  {
    "text": "nodes which could lead to believe that",
    "start": "100680",
    "end": "103860"
  },
  {
    "text": "it would have a relation to metal lb for",
    "start": "103860",
    "end": "106079"
  },
  {
    "text": "those of you who are aware of that",
    "start": "106079",
    "end": "107640"
  },
  {
    "text": "project it doesn't have anything to do",
    "start": "107640",
    "end": "109619"
  },
  {
    "text": "with the Ingress class or any of the",
    "start": "109619",
    "end": "111600"
  },
  {
    "text": "Gateway API that has been presented here",
    "start": "111600",
    "end": "114180"
  },
  {
    "text": "at kubecon either so specifically what",
    "start": "114180",
    "end": "116579"
  },
  {
    "text": "this aims at solving is a problem around",
    "start": "116579",
    "end": "119460"
  },
  {
    "text": "the core V1 service and specifically",
    "start": "119460",
    "end": "122460"
  },
  {
    "text": "when you specify one which is of type",
    "start": "122460",
    "end": "124619"
  },
  {
    "text": "load balancer",
    "start": "124619",
    "end": "126240"
  },
  {
    "text": "moreover this is also kind of tailored",
    "start": "126240",
    "end": "129720"
  },
  {
    "text": "towards clusters that are running on the",
    "start": "129720",
    "end": "131459"
  },
  {
    "text": "public Cloud so essentially load",
    "start": "131459",
    "end": "134160"
  },
  {
    "text": "balancers that get provisioned by the",
    "start": "134160",
    "end": "137340"
  },
  {
    "text": "kubernetes control plane and a term that",
    "start": "137340",
    "end": "139860"
  },
  {
    "text": "I think is important to remember at",
    "start": "139860",
    "end": "141780"
  },
  {
    "text": "least for the later uh part of this talk",
    "start": "141780",
    "end": "144360"
  },
  {
    "text": "is the term connection draining I'm",
    "start": "144360",
    "end": "146819"
  },
  {
    "text": "going to get back to what that",
    "start": "146819",
    "end": "148200"
  },
  {
    "text": "concretely means later on but I think",
    "start": "148200",
    "end": "150720"
  },
  {
    "text": "it's a good topic to have already in",
    "start": "150720",
    "end": "152940"
  },
  {
    "text": "your minds off the bat",
    "start": "152940",
    "end": "155099"
  },
  {
    "start": "154000",
    "end": "321000"
  },
  {
    "text": "so how do V1 service load balancers work",
    "start": "155099",
    "end": "159480"
  },
  {
    "text": "today so the first part that I'm going",
    "start": "159480",
    "end": "162480"
  },
  {
    "text": "to be presenting is kind of the general",
    "start": "162480",
    "end": "164220"
  },
  {
    "text": "load balancer configuration and what",
    "start": "164220",
    "end": "167340"
  },
  {
    "text": "happens whenever you create a service of",
    "start": "167340",
    "end": "169319"
  },
  {
    "text": "type load balancer on a kubernetes",
    "start": "169319",
    "end": "171239"
  },
  {
    "text": "cluster",
    "start": "171239",
    "end": "172680"
  },
  {
    "text": "so these is kind of the general",
    "start": "172680",
    "end": "175260"
  },
  {
    "text": "schematics of things and these are the",
    "start": "175260",
    "end": "177780"
  },
  {
    "text": "main core kubernetes components that",
    "start": "177780",
    "end": "180300"
  },
  {
    "text": "interact whenever such a thing happens",
    "start": "180300",
    "end": "182720"
  },
  {
    "text": "know that on the control plane in the",
    "start": "182720",
    "end": "185700"
  },
  {
    "text": "API server there's a controller called",
    "start": "185700",
    "end": "187739"
  },
  {
    "text": "the kubernetes cloud controller manager",
    "start": "187739",
    "end": "190080"
  },
  {
    "text": "abbreviated kccm for short that has a",
    "start": "190080",
    "end": "193980"
  },
  {
    "text": "service controller so essentially it",
    "start": "193980",
    "end": "195540"
  },
  {
    "text": "watches services and it also watches",
    "start": "195540",
    "end": "198239"
  },
  {
    "text": "nodes",
    "start": "198239",
    "end": "199620"
  },
  {
    "text": "and it kind of links these two resources",
    "start": "199620",
    "end": "202319"
  },
  {
    "text": "together to be able to provision load",
    "start": "202319",
    "end": "205379"
  },
  {
    "text": "balancers by issuing Cloud API calls",
    "start": "205379",
    "end": "209459"
  },
  {
    "text": "now the state of the cluster in this",
    "start": "209459",
    "end": "211800"
  },
  {
    "text": "case we have three nodes so node a node",
    "start": "211800",
    "end": "214620"
  },
  {
    "text": "B and node C so the kccm will use these",
    "start": "214620",
    "end": "217739"
  },
  {
    "text": "nodes to provision the load balancer and",
    "start": "217739",
    "end": "220260"
  },
  {
    "text": "configure the load balancer to Target",
    "start": "220260",
    "end": "222540"
  },
  {
    "text": "these three nodes in the cluster",
    "start": "222540",
    "end": "225440"
  },
  {
    "text": "underneath the hood we aren't the load",
    "start": "225440",
    "end": "228659"
  },
  {
    "text": "balancer isn't really targeting",
    "start": "228659",
    "end": "229980"
  },
  {
    "text": "kubernetes nodes since it's a cloud",
    "start": "229980",
    "end": "232920"
  },
  {
    "text": "construct so it doesn't really know",
    "start": "232920",
    "end": "234900"
  },
  {
    "text": "anything about kubernetes constructs it",
    "start": "234900",
    "end": "237120"
  },
  {
    "text": "will Target VM instances but the mapping",
    "start": "237120",
    "end": "240000"
  },
  {
    "text": "between the node and the VM instance is",
    "start": "240000",
    "end": "242220"
  },
  {
    "text": "done in the kccm and in the cloud",
    "start": "242220",
    "end": "244140"
  },
  {
    "text": "provider code simultaneously on the data",
    "start": "244140",
    "end": "247080"
  },
  {
    "text": "plane you'll have the service proxy",
    "start": "247080",
    "end": "249780"
  },
  {
    "text": "which will then create networking rules",
    "start": "249780",
    "end": "252439"
  },
  {
    "text": "so depending on the service proxy that",
    "start": "252439",
    "end": "254879"
  },
  {
    "text": "can be a wide variety of different rules",
    "start": "254879",
    "end": "256739"
  },
  {
    "text": "to be able to forward traffic to the end",
    "start": "256739",
    "end": "260160"
  },
  {
    "text": "point or the pods so essentially the",
    "start": "260160",
    "end": "262740"
  },
  {
    "text": "load balancer sends traffic to the node",
    "start": "262740",
    "end": "264660"
  },
  {
    "text": "and then the rule the networking rules",
    "start": "264660",
    "end": "267300"
  },
  {
    "text": "on the Node will then forward traffic to",
    "start": "267300",
    "end": "269699"
  },
  {
    "text": "the pods",
    "start": "269699",
    "end": "270960"
  },
  {
    "text": "and connectivity is thus achieved",
    "start": "270960",
    "end": "273720"
  },
  {
    "text": "Ingress connectivity is thus achieved",
    "start": "273720",
    "end": "276600"
  },
  {
    "text": "an important aspect to note here many of",
    "start": "276600",
    "end": "280919"
  },
  {
    "text": "you probably already know that the node",
    "start": "280919",
    "end": "283020"
  },
  {
    "text": "has a ready state so to speak and this",
    "start": "283020",
    "end": "285419"
  },
  {
    "text": "ready State can flap between both ready",
    "start": "285419",
    "end": "287940"
  },
  {
    "text": "and not ready",
    "start": "287940",
    "end": "289560"
  },
  {
    "text": "the kccm watches node so it reacts to",
    "start": "289560",
    "end": "292680"
  },
  {
    "text": "these events and whenever the node",
    "start": "292680",
    "end": "295139"
  },
  {
    "text": "transitions to not ready it will",
    "start": "295139",
    "end": "297900"
  },
  {
    "text": "reconfigure the load balancer through an",
    "start": "297900",
    "end": "301080"
  },
  {
    "text": "update call so it calls the cloud",
    "start": "301080",
    "end": "303840"
  },
  {
    "text": "provider API and issues an update call",
    "start": "303840",
    "end": "306120"
  },
  {
    "text": "and what will remain are the nodes that",
    "start": "306120",
    "end": "309720"
  },
  {
    "text": "are ready so in this given example node",
    "start": "309720",
    "end": "312840"
  },
  {
    "text": "a has gone not ready so it will update",
    "start": "312840",
    "end": "315419"
  },
  {
    "text": "the load balancer and just keep node B",
    "start": "315419",
    "end": "317460"
  },
  {
    "text": "and node C",
    "start": "317460",
    "end": "318960"
  },
  {
    "text": "that's kind of the first thing to note",
    "start": "318960",
    "end": "322440"
  },
  {
    "start": "321000",
    "end": "580000"
  },
  {
    "text": "another topic that we would like to",
    "start": "322440",
    "end": "325259"
  },
  {
    "text": "discuss that is important here is health",
    "start": "325259",
    "end": "327780"
  },
  {
    "text": "checks so health checks is essentially a",
    "start": "327780",
    "end": "330479"
  },
  {
    "text": "construct that the cloud provider gives",
    "start": "330479",
    "end": "333120"
  },
  {
    "text": "to the user with the goal of enabling",
    "start": "333120",
    "end": "336900"
  },
  {
    "text": "the user to be able to draft to dispatch",
    "start": "336900",
    "end": "339360"
  },
  {
    "text": "or have a say on how traffic dispatching",
    "start": "339360",
    "end": "342060"
  },
  {
    "text": "should be done the user within this",
    "start": "342060",
    "end": "344940"
  },
  {
    "text": "context is the kubernetes control plane",
    "start": "344940",
    "end": "347039"
  },
  {
    "text": "since it's the actual component that",
    "start": "347039",
    "end": "349919"
  },
  {
    "text": "talks to the cloud API and uses this",
    "start": "349919",
    "end": "352199"
  },
  {
    "text": "contract construct and actually programs",
    "start": "352199",
    "end": "354539"
  },
  {
    "text": "it and there are different ways that",
    "start": "354539",
    "end": "356460"
  },
  {
    "text": "kubernetes goes about configuring the",
    "start": "356460",
    "end": "358919"
  },
  {
    "text": "health check depending on the service",
    "start": "358919",
    "end": "361560"
  },
  {
    "text": "object so the first interesting mode is",
    "start": "361560",
    "end": "366240"
  },
  {
    "text": "the external traffic policy field that",
    "start": "366240",
    "end": "369000"
  },
  {
    "text": "many of you might be aware of I'm just",
    "start": "369000",
    "end": "371460"
  },
  {
    "text": "going to give a short recap on that so",
    "start": "371460",
    "end": "373259"
  },
  {
    "text": "the external traffic policy field",
    "start": "373259",
    "end": "375180"
  },
  {
    "text": "essentially allow specifies how routing",
    "start": "375180",
    "end": "379080"
  },
  {
    "text": "should be done for the for English",
    "start": "379080",
    "end": "382500"
  },
  {
    "text": "traffic to reach your end point so",
    "start": "382500",
    "end": "385020"
  },
  {
    "text": "specifically if it should use an",
    "start": "385020",
    "end": "387360"
  },
  {
    "text": "additional next hop to be able to arrive",
    "start": "387360",
    "end": "390419"
  },
  {
    "text": "at the distant pod or if it should go",
    "start": "390419",
    "end": "393600"
  },
  {
    "text": "directly to the part in question or and",
    "start": "393600",
    "end": "396720"
  },
  {
    "text": "the node that is hosting the Pod more",
    "start": "396720",
    "end": "399600"
  },
  {
    "text": "specifically",
    "start": "399600",
    "end": "401220"
  },
  {
    "text": "also important to know is that these",
    "start": "401220",
    "end": "403440"
  },
  {
    "text": "health checks are cloud provider",
    "start": "403440",
    "end": "405419"
  },
  {
    "text": "specific so there's no General mechanism",
    "start": "405419",
    "end": "408900"
  },
  {
    "text": "that applies to all but each individual",
    "start": "408900",
    "end": "411479"
  },
  {
    "text": "cloud provider will configure it",
    "start": "411479",
    "end": "413100"
  },
  {
    "text": "slightly differently and I'm going to be",
    "start": "413100",
    "end": "415319"
  },
  {
    "text": "talking about these so if we have",
    "start": "415319",
    "end": "418319"
  },
  {
    "text": "external traffic policy cluster which",
    "start": "418319",
    "end": "420900"
  },
  {
    "text": "means essentially that you allow the",
    "start": "420900",
    "end": "424740"
  },
  {
    "text": "traffic forwarding to happen within an",
    "start": "424740",
    "end": "427319"
  },
  {
    "text": "additional next hop the health check is",
    "start": "427319",
    "end": "430259"
  },
  {
    "text": "configured in a mode that I've denoted",
    "start": "430259",
    "end": "432660"
  },
  {
    "text": "the proxy State essentially so what",
    "start": "432660",
    "end": "435660"
  },
  {
    "text": "we're doing in this case is that the",
    "start": "435660",
    "end": "437460"
  },
  {
    "text": "kccm will configure the load balancer",
    "start": "437460",
    "end": "440340"
  },
  {
    "text": "health check to Target the service proxy",
    "start": "440340",
    "end": "443400"
  },
  {
    "text": "Health Z Port so in this case 10 to 56",
    "start": "443400",
    "end": "447780"
  },
  {
    "text": "is Q proxies Health Z Port so the load",
    "start": "447780",
    "end": "451620"
  },
  {
    "text": "balancer will then determine if the",
    "start": "451620",
    "end": "454199"
  },
  {
    "text": "service proxy is healthy and",
    "start": "454199",
    "end": "457139"
  },
  {
    "text": "whether or not it is it will fail the",
    "start": "457139",
    "end": "460199"
  },
  {
    "text": "health check and essentially Mark the",
    "start": "460199",
    "end": "462720"
  },
  {
    "text": "node as not eligible for traffic load",
    "start": "462720",
    "end": "465840"
  },
  {
    "text": "balancing",
    "start": "465840",
    "end": "467880"
  },
  {
    "text": "um that's kind of the first mode",
    "start": "467880",
    "end": "470160"
  },
  {
    "text": "other Cloud providers can choose another",
    "start": "470160",
    "end": "472860"
  },
  {
    "text": "mode of doing it which is to use the",
    "start": "472860",
    "end": "475020"
  },
  {
    "text": "node Port of the service this is what",
    "start": "475020",
    "end": "478080"
  },
  {
    "text": "I've denoted data plane reachability so",
    "start": "478080",
    "end": "480840"
  },
  {
    "text": "essentially what happens here is that",
    "start": "480840",
    "end": "482580"
  },
  {
    "text": "the load balancer will try to reach the",
    "start": "482580",
    "end": "485160"
  },
  {
    "text": "Pod directly and it will do so using the",
    "start": "485160",
    "end": "488340"
  },
  {
    "text": "node Port that is exposed on the Node",
    "start": "488340",
    "end": "490800"
  },
  {
    "text": "both of these methods",
    "start": "490800",
    "end": "493340"
  },
  {
    "text": "is essentially trying to ascertain if",
    "start": "493340",
    "end": "497880"
  },
  {
    "text": "the load balancer can actually reach the",
    "start": "497880",
    "end": "500160"
  },
  {
    "text": "core endpoint the pod in this case and",
    "start": "500160",
    "end": "503160"
  },
  {
    "text": "they're using it in two different",
    "start": "503160",
    "end": "504240"
  },
  {
    "text": "mechanisms the first is obviously this",
    "start": "504240",
    "end": "506400"
  },
  {
    "text": "one is very explicit",
    "start": "506400",
    "end": "508139"
  },
  {
    "text": "but in the previous one it is assumed",
    "start": "508139",
    "end": "510720"
  },
  {
    "text": "that if the service proxy is running",
    "start": "510720",
    "end": "512520"
  },
  {
    "text": "fine",
    "start": "512520",
    "end": "513479"
  },
  {
    "text": "well in that case it's probably",
    "start": "513479",
    "end": "515459"
  },
  {
    "text": "programmed all the networking rules that",
    "start": "515459",
    "end": "517380"
  },
  {
    "text": "it needed to enhance the load balance",
    "start": "517380",
    "end": "519539"
  },
  {
    "text": "any load balancer traffic that arrives",
    "start": "519539",
    "end": "521219"
  },
  {
    "text": "at the node can get forwarded to the pod",
    "start": "521219",
    "end": "525360"
  },
  {
    "text": "for extra external traffic policy local",
    "start": "525360",
    "end": "527940"
  },
  {
    "text": "what is interesting here is that we",
    "start": "527940",
    "end": "530339"
  },
  {
    "text": "don't want to use an additional next hop",
    "start": "530339",
    "end": "532380"
  },
  {
    "text": "so we want the load balancer to send",
    "start": "532380",
    "end": "535260"
  },
  {
    "text": "traffic directly to the node in question",
    "start": "535260",
    "end": "537420"
  },
  {
    "text": "that has the pod",
    "start": "537420",
    "end": "539880"
  },
  {
    "text": "so for that to work the service proxy",
    "start": "539880",
    "end": "542880"
  },
  {
    "text": "essentially watches services and",
    "start": "542880",
    "end": "544440"
  },
  {
    "text": "endpoints and just counts the number of",
    "start": "544440",
    "end": "547140"
  },
  {
    "text": "endpoints that it has on each individual",
    "start": "547140",
    "end": "550320"
  },
  {
    "text": "node and in this example I've noted just",
    "start": "550320",
    "end": "554880"
  },
  {
    "text": "easily that there is no pod running on",
    "start": "554880",
    "end": "557100"
  },
  {
    "text": "node a so hence the service proxy in",
    "start": "557100",
    "end": "559380"
  },
  {
    "text": "this example fails the health check",
    "start": "559380",
    "end": "561899"
  },
  {
    "text": "the port being used or targeted by the",
    "start": "561899",
    "end": "565320"
  },
  {
    "text": "load balancer will be the health check",
    "start": "565320",
    "end": "567540"
  },
  {
    "text": "node Port field on the service object",
    "start": "567540",
    "end": "570120"
  },
  {
    "text": "that can either manually be set by a",
    "start": "570120",
    "end": "572700"
  },
  {
    "text": "user or be automatically provisioned by",
    "start": "572700",
    "end": "576660"
  },
  {
    "text": "the control plane",
    "start": "576660",
    "end": "580040"
  },
  {
    "start": "580000",
    "end": "616000"
  },
  {
    "text": "I mentioned connection draining in the",
    "start": "580920",
    "end": "583380"
  },
  {
    "text": "beginning of the slide so what does that",
    "start": "583380",
    "end": "585120"
  },
  {
    "text": "mean well connection training",
    "start": "585120",
    "end": "587040"
  },
  {
    "text": "essentially means that you block new",
    "start": "587040",
    "end": "588660"
  },
  {
    "text": "connections but you allow the existing",
    "start": "588660",
    "end": "590880"
  },
  {
    "text": "ones to terminate it's essentially a",
    "start": "590880",
    "end": "593820"
  },
  {
    "text": "graceful shutdown mechanism that the",
    "start": "593820",
    "end": "596580"
  },
  {
    "text": "load balancer can or cannot support",
    "start": "596580",
    "end": "599000"
  },
  {
    "text": "older load balancers don't necessarily",
    "start": "599000",
    "end": "602220"
  },
  {
    "text": "support connection draining connection",
    "start": "602220",
    "end": "604680"
  },
  {
    "text": "draining is however important in this",
    "start": "604680",
    "end": "606480"
  },
  {
    "text": "talk simply because it kind of lays the",
    "start": "606480",
    "end": "608279"
  },
  {
    "text": "foundation for what comes next and the",
    "start": "608279",
    "end": "610620"
  },
  {
    "text": "features that we've built upon and the",
    "start": "610620",
    "end": "613380"
  },
  {
    "text": "improvements that we've made during this",
    "start": "613380",
    "end": "615180"
  },
  {
    "text": "past year",
    "start": "615180",
    "end": "617100"
  },
  {
    "start": "616000",
    "end": "850000"
  },
  {
    "text": "so what are the problems with this way",
    "start": "617100",
    "end": "620820"
  },
  {
    "text": "of operating right and what I've just",
    "start": "620820",
    "end": "623760"
  },
  {
    "text": "explained so let's begin with the first",
    "start": "623760",
    "end": "626640"
  },
  {
    "text": "one which is the impact on performance",
    "start": "626640",
    "end": "629459"
  },
  {
    "text": "in Ingress and I'm gonna get back to",
    "start": "629459",
    "end": "631680"
  },
  {
    "text": "what performance specifically means",
    "start": "631680",
    "end": "633839"
  },
  {
    "text": "within this context so say for example",
    "start": "633839",
    "end": "636480"
  },
  {
    "text": "that we have three load balancers in",
    "start": "636480",
    "end": "638880"
  },
  {
    "text": "this case and we have three nodes this",
    "start": "638880",
    "end": "641160"
  },
  {
    "text": "is kind of going back to the problem",
    "start": "641160",
    "end": "642480"
  },
  {
    "text": "statement that I mentioned at the",
    "start": "642480",
    "end": "644100"
  },
  {
    "text": "beginning of the slide",
    "start": "644100",
    "end": "645600"
  },
  {
    "text": "you have an equal amount of load",
    "start": "645600",
    "end": "647459"
  },
  {
    "text": "balancers with nodes roughly on the",
    "start": "647459",
    "end": "650700"
  },
  {
    "text": "bottom we have a timeline of events that",
    "start": "650700",
    "end": "653279"
  },
  {
    "text": "are interesting to the load balancer in",
    "start": "653279",
    "end": "656339"
  },
  {
    "text": "our use case which is the blue one so",
    "start": "656339",
    "end": "658079"
  },
  {
    "text": "let's focus on the on the blue one",
    "start": "658079",
    "end": "660959"
  },
  {
    "text": "now I mentioned that nodes can change",
    "start": "660959",
    "end": "663480"
  },
  {
    "text": "State and that's completely fine that's",
    "start": "663480",
    "end": "666540"
  },
  {
    "text": "totally except expected in the",
    "start": "666540",
    "end": "668760"
  },
  {
    "text": "kubernetes world",
    "start": "668760",
    "end": "670079"
  },
  {
    "text": "and it should be a non-event in most",
    "start": "670079",
    "end": "672120"
  },
  {
    "text": "cases right so when the node goes not",
    "start": "672120",
    "end": "675120"
  },
  {
    "text": "ready the kccm will now start performing",
    "start": "675120",
    "end": "678360"
  },
  {
    "text": "its sync Loop and starts reconfiguring",
    "start": "678360",
    "end": "680760"
  },
  {
    "text": "these load balancers just a small note",
    "start": "680760",
    "end": "683339"
  },
  {
    "text": "however is that the node going not ready",
    "start": "683339",
    "end": "685920"
  },
  {
    "text": "doesn't necessarily mean that there's a",
    "start": "685920",
    "end": "688380"
  },
  {
    "text": "pro problem with neither the service",
    "start": "688380",
    "end": "690420"
  },
  {
    "text": "proxy nor the pod in itself these events",
    "start": "690420",
    "end": "694079"
  },
  {
    "text": "are again transient so there's doesn't",
    "start": "694079",
    "end": "696720"
  },
  {
    "text": "necessarily mean that the cluster is",
    "start": "696720",
    "end": "698220"
  },
  {
    "text": "going to blow up in any way shape shape",
    "start": "698220",
    "end": "700440"
  },
  {
    "text": "or form",
    "start": "700440",
    "end": "701399"
  },
  {
    "text": "now the way the kccm also goes about",
    "start": "701399",
    "end": "704160"
  },
  {
    "text": "syncing these load balancers is",
    "start": "704160",
    "end": "706160"
  },
  {
    "text": "non-deterministic so it's not in any",
    "start": "706160",
    "end": "708480"
  },
  {
    "text": "particular order so it could be that",
    "start": "708480",
    "end": "710820"
  },
  {
    "text": "when this happens",
    "start": "710820",
    "end": "712680"
  },
  {
    "text": "for all our load balancer gets the first",
    "start": "712680",
    "end": "715560"
  },
  {
    "text": "one is the first one that gets the node",
    "start": "715560",
    "end": "717839"
  },
  {
    "text": "a removed from its set of nodes right",
    "start": "717839",
    "end": "721260"
  },
  {
    "text": "and in our particular example let's",
    "start": "721260",
    "end": "724200"
  },
  {
    "text": "imagine that part A is the end point for",
    "start": "724200",
    "end": "727620"
  },
  {
    "text": "our service right so at this point",
    "start": "727620",
    "end": "729720"
  },
  {
    "text": "Ingress traffic for our service has",
    "start": "729720",
    "end": "733140"
  },
  {
    "text": "essentially been halted right and the",
    "start": "733140",
    "end": "735959"
  },
  {
    "text": "kccm continues and continues updating",
    "start": "735959",
    "end": "738899"
  },
  {
    "text": "all of these load balancers imagine big",
    "start": "738899",
    "end": "741240"
  },
  {
    "text": "clusters with in the order of magnitude",
    "start": "741240",
    "end": "744300"
  },
  {
    "text": "of hundreds of load balancers",
    "start": "744300",
    "end": "746700"
  },
  {
    "text": "the problem here is that to begin with",
    "start": "746700",
    "end": "749640"
  },
  {
    "text": "we have a lot of cloud API calls that",
    "start": "749640",
    "end": "751920"
  },
  {
    "text": "are being performed by the kccn and the",
    "start": "751920",
    "end": "756000"
  },
  {
    "text": "time to sink any individual load",
    "start": "756000",
    "end": "758579"
  },
  {
    "text": "balancer is usually non-negligible it",
    "start": "758579",
    "end": "761399"
  },
  {
    "text": "can be in the order of seconds maybe",
    "start": "761399",
    "end": "763680"
  },
  {
    "text": "even minutes depending on the state of",
    "start": "763680",
    "end": "766139"
  },
  {
    "text": "the cloud provider and the amount of",
    "start": "766139",
    "end": "768240"
  },
  {
    "text": "operations that it needs to perform at",
    "start": "768240",
    "end": "769920"
  },
  {
    "text": "any given moment in time right",
    "start": "769920",
    "end": "772620"
  },
  {
    "text": "now imagine that the node transitions",
    "start": "772620",
    "end": "775380"
  },
  {
    "text": "quickly back to ready again most of you",
    "start": "775380",
    "end": "777540"
  },
  {
    "text": "have might have noticed this on a couple",
    "start": "777540",
    "end": "779339"
  },
  {
    "text": "of clusters that you self operate well",
    "start": "779339",
    "end": "781920"
  },
  {
    "text": "in that case the kccm will start",
    "start": "781920",
    "end": "784160"
  },
  {
    "text": "reconfiguring and re-adding no no Day to",
    "start": "784160",
    "end": "787200"
  },
  {
    "text": "all of these load balancers and again it",
    "start": "787200",
    "end": "789720"
  },
  {
    "text": "doesn't do this in any particular order",
    "start": "789720",
    "end": "791339"
  },
  {
    "text": "so it might just be that it finishes",
    "start": "791339",
    "end": "793740"
  },
  {
    "text": "with ours",
    "start": "793740",
    "end": "795959"
  },
  {
    "text": "now what's the an additional problem",
    "start": "795959",
    "end": "797940"
  },
  {
    "text": "with this is that we risk",
    "start": "797940",
    "end": "799639"
  },
  {
    "text": "desynchronizing the cube state so",
    "start": "799639",
    "end": "802200"
  },
  {
    "text": "essentially what kubernetes knows about",
    "start": "802200",
    "end": "804120"
  },
  {
    "text": "services and nodes with the Cloud State",
    "start": "804120",
    "end": "806519"
  },
  {
    "text": "which is how the load balancer is",
    "start": "806519",
    "end": "808620"
  },
  {
    "text": "configured and specifically what we've",
    "start": "808620",
    "end": "811019"
  },
  {
    "text": "done is we've caused an Ingress outage",
    "start": "811019",
    "end": "813000"
  },
  {
    "text": "between the moment we removed it and the",
    "start": "813000",
    "end": "815579"
  },
  {
    "text": "moment we re-added it and in this",
    "start": "815579",
    "end": "817800"
  },
  {
    "text": "particular case like I mentioned the",
    "start": "817800",
    "end": "819480"
  },
  {
    "text": "service proxy was running fine and so",
    "start": "819480",
    "end": "821760"
  },
  {
    "text": "did the Pod so to them there was it was",
    "start": "821760",
    "end": "825120"
  },
  {
    "text": "a total moment of I don't know what",
    "start": "825120",
    "end": "827339"
  },
  {
    "text": "happened right",
    "start": "827339",
    "end": "828899"
  },
  {
    "text": "so there's another important problem",
    "start": "828899",
    "end": "832019"
  },
  {
    "text": "which is uh the impact on connectivity",
    "start": "832019",
    "end": "834420"
  },
  {
    "text": "and that is to say that whenever the",
    "start": "834420",
    "end": "836940"
  },
  {
    "text": "node transitions to not ready and we",
    "start": "836940",
    "end": "839160"
  },
  {
    "text": "remove it all connections get instantly",
    "start": "839160",
    "end": "841680"
  },
  {
    "text": "terminated from the load balancer to the",
    "start": "841680",
    "end": "844620"
  },
  {
    "text": "node so this introduces Network",
    "start": "844620",
    "end": "847380"
  },
  {
    "text": "instability across your cluster",
    "start": "847380",
    "end": "850920"
  },
  {
    "start": "850000",
    "end": "1035000"
  },
  {
    "text": "what do we want instead in this case",
    "start": "850920",
    "end": "853320"
  },
  {
    "text": "well when we started roughly a year ago",
    "start": "853320",
    "end": "856320"
  },
  {
    "text": "we kind of went back to the drawing",
    "start": "856320",
    "end": "858480"
  },
  {
    "text": "board and rethought these mechanisms",
    "start": "858480",
    "end": "860940"
  },
  {
    "text": "right because you have to remember that",
    "start": "860940",
    "end": "862920"
  },
  {
    "text": "most of this was written and implemented",
    "start": "862920",
    "end": "865920"
  },
  {
    "text": "in the very early days of kubernetes",
    "start": "865920",
    "end": "868620"
  },
  {
    "text": "this is one of the most core things and",
    "start": "868620",
    "end": "871380"
  },
  {
    "text": "common modes of operation for most users",
    "start": "871380",
    "end": "873899"
  },
  {
    "text": "of kubernetes so we wanted to rethink",
    "start": "873899",
    "end": "876300"
  },
  {
    "text": "what does node Readiness really mean for",
    "start": "876300",
    "end": "879480"
  },
  {
    "text": "Ingress and for load balancers and",
    "start": "879480",
    "end": "882480"
  },
  {
    "text": "specifically also what happens whenever",
    "start": "882480",
    "end": "884639"
  },
  {
    "text": "a node terminates and how can we",
    "start": "884639",
    "end": "888060"
  },
  {
    "text": "Implement a better",
    "start": "888060",
    "end": "890339"
  },
  {
    "text": "stable connection for for those cases",
    "start": "890339",
    "end": "893300"
  },
  {
    "text": "essentially this is important because",
    "start": "893300",
    "end": "895500"
  },
  {
    "text": "terminating nodes on large clusters is",
    "start": "895500",
    "end": "898920"
  },
  {
    "text": "also a very frequent event the cluster",
    "start": "898920",
    "end": "901380"
  },
  {
    "text": "Auto scaler will both upscale and",
    "start": "901380",
    "end": "903779"
  },
  {
    "text": "downscale nodes and hence nodes that",
    "start": "903779",
    "end": "906540"
  },
  {
    "text": "disappear and come in are very frequent",
    "start": "906540",
    "end": "910860"
  },
  {
    "text": "so given this problem again what we",
    "start": "910860",
    "end": "915240"
  },
  {
    "text": "figured was the conclusion essentially",
    "start": "915240",
    "end": "917399"
  },
  {
    "text": "after one years of work was that well we",
    "start": "917399",
    "end": "920160"
  },
  {
    "text": "don't want to reconfigure load balancers",
    "start": "920160",
    "end": "922320"
  },
  {
    "text": "at all we don't want to have to remove",
    "start": "922320",
    "end": "925320"
  },
  {
    "text": "or re-add and perform all of these",
    "start": "925320",
    "end": "928199"
  },
  {
    "text": "things right",
    "start": "928199",
    "end": "930060"
  },
  {
    "text": "um however if there is a real problem",
    "start": "930060",
    "end": "933240"
  },
  {
    "text": "with the node we need to be able to",
    "start": "933240",
    "end": "935880"
  },
  {
    "text": "react to that right and the kind of the",
    "start": "935880",
    "end": "939180"
  },
  {
    "text": "ideas behind all of this was that if",
    "start": "939180",
    "end": "941820"
  },
  {
    "text": "there's a real problem with the node",
    "start": "941820",
    "end": "943800"
  },
  {
    "text": "that can impact either the service proxy",
    "start": "943800",
    "end": "946560"
  },
  {
    "text": "the cni Plug-In or even the Pod itself",
    "start": "946560",
    "end": "949380"
  },
  {
    "text": "well in that case at one moment the",
    "start": "949380",
    "end": "952380"
  },
  {
    "text": "health check will start failing",
    "start": "952380",
    "end": "954959"
  },
  {
    "text": "and now health checks that are failing",
    "start": "954959",
    "end": "957540"
  },
  {
    "text": "as I mentioned before enable connection",
    "start": "957540",
    "end": "960120"
  },
  {
    "text": "draining for load balancers that support",
    "start": "960120",
    "end": "962519"
  },
  {
    "text": "such so essentially new connections",
    "start": "962519",
    "end": "964860"
  },
  {
    "text": "won't will be blocked but the",
    "start": "964860",
    "end": "967260"
  },
  {
    "text": "established ones will be allowed to",
    "start": "967260",
    "end": "969060"
  },
  {
    "text": "terminate and hence we are allowing",
    "start": "969060",
    "end": "971100"
  },
  {
    "text": "graceful termination for this node's",
    "start": "971100",
    "end": "974100"
  },
  {
    "text": "connectivity so all services running on",
    "start": "974100",
    "end": "977100"
  },
  {
    "text": "the Node and all packets right",
    "start": "977100",
    "end": "980160"
  },
  {
    "text": "uh now for terminating nodes what do we",
    "start": "980160",
    "end": "983459"
  },
  {
    "text": "want well for terminating nodes we kind",
    "start": "983459",
    "end": "986519"
  },
  {
    "text": "of figured there needs to be a way for",
    "start": "986519",
    "end": "988800"
  },
  {
    "text": "this service proxy to realize that the",
    "start": "988800",
    "end": "992220"
  },
  {
    "text": "node is actually about to go away there",
    "start": "992220",
    "end": "994920"
  },
  {
    "text": "are mechanisms and kind of notifiers so",
    "start": "994920",
    "end": "998639"
  },
  {
    "text": "to speak in a kubernetes cluster that",
    "start": "998639",
    "end": "1000500"
  },
  {
    "text": "allows this to get picked up on",
    "start": "1000500",
    "end": "1002420"
  },
  {
    "text": "specifically the cluster Auto scaler",
    "start": "1002420",
    "end": "1004639"
  },
  {
    "text": "uses a specific taint that it marks the",
    "start": "1004639",
    "end": "1007220"
  },
  {
    "text": "node with",
    "start": "1007220",
    "end": "1008300"
  },
  {
    "text": "prior to actually starting to drain and",
    "start": "1008300",
    "end": "1010759"
  },
  {
    "text": "delete the node so this indicator",
    "start": "1010759",
    "end": "1013160"
  },
  {
    "text": "already exists and what we want to do in",
    "start": "1013160",
    "end": "1016339"
  },
  {
    "text": "that case is we want the service proxy",
    "start": "1016339",
    "end": "1018860"
  },
  {
    "text": "to pick up on this and start failing the",
    "start": "1018860",
    "end": "1021980"
  },
  {
    "text": "health check so that prior to the node",
    "start": "1021980",
    "end": "1024980"
  },
  {
    "text": "actually being deleted and having all of",
    "start": "1024980",
    "end": "1027678"
  },
  {
    "text": "its connections abruptly terminated that",
    "start": "1027679",
    "end": "1030438"
  },
  {
    "text": "we instead allow a graceful shutdown of",
    "start": "1030439",
    "end": "1033380"
  },
  {
    "text": "all connections",
    "start": "1033380",
    "end": "1035839"
  },
  {
    "start": "1035000",
    "end": "1156000"
  },
  {
    "text": "now with regards to all of this where",
    "start": "1035839",
    "end": "1039798"
  },
  {
    "text": "are we well we are here essentially 127",
    "start": "1039799",
    "end": "1044298"
  },
  {
    "text": "just got released",
    "start": "1044299",
    "end": "1045980"
  },
  {
    "text": "and but the work for this didn't really",
    "start": "1045980",
    "end": "1049400"
  },
  {
    "text": "start here we started already in 1.26 by",
    "start": "1049400",
    "end": "1054320"
  },
  {
    "text": "changing the mechanisms for",
    "start": "1054320",
    "end": "1056780"
  },
  {
    "text": "reconfiguring load balancers in the",
    "start": "1056780",
    "end": "1059720"
  },
  {
    "text": "kubernetes cloud controller manager but",
    "start": "1059720",
    "end": "1062299"
  },
  {
    "text": "specifically for external traffic policy",
    "start": "1062299",
    "end": "1064760"
  },
  {
    "text": "local that was noted as more of a",
    "start": "1064760",
    "end": "1068360"
  },
  {
    "text": "important bug fix simply because the",
    "start": "1068360",
    "end": "1072020"
  },
  {
    "text": "options of traffic load balancing for",
    "start": "1072020",
    "end": "1074539"
  },
  {
    "text": "external traffic policy local is much",
    "start": "1074539",
    "end": "1077419"
  },
  {
    "text": "more reduced than in cluster where all",
    "start": "1077419",
    "end": "1080840"
  },
  {
    "text": "nodes are essentially a possible next",
    "start": "1080840",
    "end": "1084320"
  },
  {
    "text": "hop for the load balancer to send",
    "start": "1084320",
    "end": "1086120"
  },
  {
    "text": "traffic on",
    "start": "1086120",
    "end": "1087860"
  },
  {
    "text": "however in parallel to that we file the",
    "start": "1087860",
    "end": "1090500"
  },
  {
    "text": "cap which got merged cap 3458 which",
    "start": "1090500",
    "end": "1093620"
  },
  {
    "text": "aimed at extending this condition to all",
    "start": "1093620",
    "end": "1096860"
  },
  {
    "text": "service types so both cluster and local",
    "start": "1096860",
    "end": "1099740"
  },
  {
    "text": "so starting in 1.27 the kccm will stop",
    "start": "1099740",
    "end": "1103700"
  },
  {
    "text": "re-synchronizing load balancers due to",
    "start": "1103700",
    "end": "1106580"
  },
  {
    "text": "the node Readiness condition for all",
    "start": "1106580",
    "end": "1109220"
  },
  {
    "text": "services",
    "start": "1109220",
    "end": "1110600"
  },
  {
    "text": "and it got promoted directly to Beta",
    "start": "1110600",
    "end": "1112940"
  },
  {
    "text": "essentially because the change was",
    "start": "1112940",
    "end": "1116120"
  },
  {
    "text": "sufficiently small and deemed",
    "start": "1116120",
    "end": "1118160"
  },
  {
    "text": "sufficiently stable as such that we",
    "start": "1118160",
    "end": "1120679"
  },
  {
    "text": "could promote it directly to Beta for",
    "start": "1120679",
    "end": "1122660"
  },
  {
    "text": "that so it's going to be enabled by",
    "start": "1122660",
    "end": "1124940"
  },
  {
    "text": "default but users will always have the",
    "start": "1124940",
    "end": "1127100"
  },
  {
    "text": "option to opt out should that be the",
    "start": "1127100",
    "end": "1129440"
  },
  {
    "text": "case",
    "start": "1129440",
    "end": "1130520"
  },
  {
    "text": "in parallel to that another kept was",
    "start": "1130520",
    "end": "1133220"
  },
  {
    "text": "filed 3836 which was very cute proxy",
    "start": "1133220",
    "end": "1136700"
  },
  {
    "text": "specific which essentially allowed which",
    "start": "1136700",
    "end": "1140240"
  },
  {
    "text": "essentially implements the connection",
    "start": "1140240",
    "end": "1141980"
  },
  {
    "text": "draining mechanism for terminating nodes",
    "start": "1141980",
    "end": "1144799"
  },
  {
    "text": "that unfortunately missed the feature",
    "start": "1144799",
    "end": "1147020"
  },
  {
    "text": "freeze for 127 but the pr is now ready",
    "start": "1147020",
    "end": "1150260"
  },
  {
    "text": "to go and it should hopefully get merged",
    "start": "1150260",
    "end": "1152900"
  },
  {
    "text": "in the 128 feature cycle that should",
    "start": "1152900",
    "end": "1155000"
  },
  {
    "text": "open up pretty soon",
    "start": "1155000",
    "end": "1157340"
  },
  {
    "text": "so given all of this a lot of there are",
    "start": "1157340",
    "end": "1162080"
  },
  {
    "text": "still a couple of things that we can",
    "start": "1162080",
    "end": "1163760"
  },
  {
    "text": "improve on and what I'm going to be",
    "start": "1163760",
    "end": "1165140"
  },
  {
    "text": "presenting right now is very much on the",
    "start": "1165140",
    "end": "1168200"
  },
  {
    "text": "drawing board there's absolutely no kept",
    "start": "1168200",
    "end": "1170240"
  },
  {
    "text": "for this at all these are just mainly",
    "start": "1170240",
    "end": "1172700"
  },
  {
    "text": "ideas that have spawned out of",
    "start": "1172700",
    "end": "1174500"
  },
  {
    "text": "discussions on GitHub while we've been",
    "start": "1174500",
    "end": "1176960"
  },
  {
    "text": "working on everything else right",
    "start": "1176960",
    "end": "1179539"
  },
  {
    "text": "so the first one is that we would like",
    "start": "1179539",
    "end": "1182000"
  },
  {
    "text": "to somehow decouple the health check",
    "start": "1182000",
    "end": "1183799"
  },
  {
    "text": "server from the service proxy and this",
    "start": "1183799",
    "end": "1185960"
  },
  {
    "text": "is mainly within the goal of external",
    "start": "1185960",
    "end": "1187940"
  },
  {
    "text": "traffic policy local",
    "start": "1187940",
    "end": "1189799"
  },
  {
    "text": "again because it has less option when it",
    "start": "1189799",
    "end": "1192620"
  },
  {
    "text": "comes to traffic load balancing in",
    "start": "1192620",
    "end": "1194419"
  },
  {
    "text": "general",
    "start": "1194419",
    "end": "1195260"
  },
  {
    "text": "and the the problem core problem here is",
    "start": "1195260",
    "end": "1198140"
  },
  {
    "text": "that the load balancer currently isn't",
    "start": "1198140",
    "end": "1201559"
  },
  {
    "text": "able to discern an unhealthy service",
    "start": "1201559",
    "end": "1203960"
  },
  {
    "text": "proxy from a restarting service proxy",
    "start": "1203960",
    "end": "1207320"
  },
  {
    "text": "the service proxy whenever it's",
    "start": "1207320",
    "end": "1209059"
  },
  {
    "text": "restarting it isn't really running so",
    "start": "1209059",
    "end": "1211460"
  },
  {
    "text": "the HTTP server that runs in the service",
    "start": "1211460",
    "end": "1214160"
  },
  {
    "text": "proxy and answers to the probes from the",
    "start": "1214160",
    "end": "1217100"
  },
  {
    "text": "health from the load balancer isn't",
    "start": "1217100",
    "end": "1219620"
  },
  {
    "text": "there anymore right so the that health",
    "start": "1219620",
    "end": "1221660"
  },
  {
    "text": "check health check is failing and hence",
    "start": "1221660",
    "end": "1224419"
  },
  {
    "text": "it impacts Ingress",
    "start": "1224419",
    "end": "1227720"
  },
  {
    "text": "so we would like to work on this and",
    "start": "1227720",
    "end": "1230000"
  },
  {
    "text": "somehow find a way forwards to solve it",
    "start": "1230000",
    "end": "1232220"
  },
  {
    "text": "but we haven't really worked out the",
    "start": "1232220",
    "end": "1234020"
  },
  {
    "text": "details of how for the time being",
    "start": "1234020",
    "end": "1236960"
  },
  {
    "text": "another problem that we would like to",
    "start": "1236960",
    "end": "1239120"
  },
  {
    "text": "solve is something that has kind of been",
    "start": "1239120",
    "end": "1241520"
  },
  {
    "text": "denoted the majority report which is to",
    "start": "1241520",
    "end": "1244460"
  },
  {
    "text": "say service proxies today they go about",
    "start": "1244460",
    "end": "1247340"
  },
  {
    "text": "configuring the network by both watching",
    "start": "1247340",
    "end": "1250340"
  },
  {
    "text": "services and endpoints but what happens",
    "start": "1250340",
    "end": "1252799"
  },
  {
    "text": "if there's an issue reading from the API",
    "start": "1252799",
    "end": "1255860"
  },
  {
    "text": "server that has all of this information",
    "start": "1255860",
    "end": "1258020"
  },
  {
    "text": "right",
    "start": "1258020",
    "end": "1259820"
  },
  {
    "text": "well in that case at least in the case",
    "start": "1259820",
    "end": "1262520"
  },
  {
    "text": "of Q proxy what happens is that it will",
    "start": "1262520",
    "end": "1265940"
  },
  {
    "text": "deem itself being unhealthy",
    "start": "1265940",
    "end": "1268760"
  },
  {
    "text": "simply because it isn't it hasn't",
    "start": "1268760",
    "end": "1270799"
  },
  {
    "text": "updated the iptable rules within the",
    "start": "1270799",
    "end": "1274580"
  },
  {
    "text": "timeout period that it itself defines",
    "start": "1274580",
    "end": "1277160"
  },
  {
    "text": "and whenever the health check starts",
    "start": "1277160",
    "end": "1279799"
  },
  {
    "text": "failing well in that case cluster-wide",
    "start": "1279799",
    "end": "1282320"
  },
  {
    "text": "Ingress is impacted and in this case",
    "start": "1282320",
    "end": "1285200"
  },
  {
    "text": "it's important to note that the control",
    "start": "1285200",
    "end": "1287600"
  },
  {
    "text": "plane and the data plane even though",
    "start": "1287600",
    "end": "1289520"
  },
  {
    "text": "they cannot communicate for whatever",
    "start": "1289520",
    "end": "1291320"
  },
  {
    "text": "reason what is interesting from the",
    "start": "1291320",
    "end": "1293600"
  },
  {
    "text": "point of view of a user is if the load",
    "start": "1293600",
    "end": "1296240"
  },
  {
    "text": "balancer is able to communicate with the",
    "start": "1296240",
    "end": "1298520"
  },
  {
    "text": "data plane so in this case users of",
    "start": "1298520",
    "end": "1301760"
  },
  {
    "text": "kubernetes are impacted even though",
    "start": "1301760",
    "end": "1304520"
  },
  {
    "text": "they're might not necessarily be a",
    "start": "1304520",
    "end": "1307340"
  },
  {
    "text": "problem observed from their point of",
    "start": "1307340",
    "end": "1309200"
  },
  {
    "text": "view simply because the Pod is still",
    "start": "1309200",
    "end": "1312200"
  },
  {
    "text": "running fine and the service proxy just",
    "start": "1312200",
    "end": "1315200"
  },
  {
    "text": "can't read anymore from the API server",
    "start": "1315200",
    "end": "1317240"
  },
  {
    "text": "but presumably all of the networking",
    "start": "1317240",
    "end": "1319880"
  },
  {
    "text": "rules that it needs to be able to",
    "start": "1319880",
    "end": "1321980"
  },
  {
    "text": "forward traffic to the Pod still exists",
    "start": "1321980",
    "end": "1324140"
  },
  {
    "text": "on that node",
    "start": "1324140",
    "end": "1325580"
  },
  {
    "text": "there's a lot to work out in this case",
    "start": "1325580",
    "end": "1328280"
  },
  {
    "text": "this is very rough and we don't really",
    "start": "1328280",
    "end": "1330799"
  },
  {
    "text": "have a good idea of how to do this",
    "start": "1330799",
    "end": "1332539"
  },
  {
    "text": "because more likely than not we would",
    "start": "1332539",
    "end": "1335780"
  },
  {
    "text": "need to run some form of consensus",
    "start": "1335780",
    "end": "1337400"
  },
  {
    "text": "mechanism between all agents that is",
    "start": "1337400",
    "end": "1340220"
  },
  {
    "text": "independent of the API server so it's a",
    "start": "1340220",
    "end": "1343340"
  },
  {
    "text": "very difficult problem to solve for the",
    "start": "1343340",
    "end": "1345140"
  },
  {
    "text": "time being but know that these are",
    "start": "1345140",
    "end": "1347720"
  },
  {
    "text": "things that might",
    "start": "1347720",
    "end": "1349100"
  },
  {
    "text": "happen in very extreme cases but this is",
    "start": "1349100",
    "end": "1353059"
  },
  {
    "text": "a very Niche presentation with very",
    "start": "1353059",
    "end": "1355159"
  },
  {
    "text": "specific problems and I hope that none",
    "start": "1355159",
    "end": "1357140"
  },
  {
    "text": "of you experience these but know that",
    "start": "1357140",
    "end": "1359480"
  },
  {
    "text": "they do exist and they might happen",
    "start": "1359480",
    "end": "1362720"
  },
  {
    "start": "1361000",
    "end": "1578000"
  },
  {
    "text": "given that I'm a kubecon right here and",
    "start": "1362720",
    "end": "1365059"
  },
  {
    "text": "I have a room full of people who might",
    "start": "1365059",
    "end": "1367340"
  },
  {
    "text": "be working on a wide variety of topics",
    "start": "1367340",
    "end": "1369620"
  },
  {
    "text": "I'd like to give a couple of",
    "start": "1369620",
    "end": "1370880"
  },
  {
    "text": "recommendations maybe for the future",
    "start": "1370880",
    "end": "1373280"
  },
  {
    "text": "so if you're a cloud provider here what",
    "start": "1373280",
    "end": "1375919"
  },
  {
    "text": "I would say is maybe start rethinking",
    "start": "1375919",
    "end": "1378260"
  },
  {
    "text": "your lb health checks most of these",
    "start": "1378260",
    "end": "1380900"
  },
  {
    "text": "things as I mentioned they were done a",
    "start": "1380900",
    "end": "1382460"
  },
  {
    "text": "very long time ago and they might use",
    "start": "1382460",
    "end": "1385700"
  },
  {
    "text": "attention again specifically if you'd",
    "start": "1385700",
    "end": "1388580"
  },
  {
    "text": "like to profit from the Q proxy and the",
    "start": "1388580",
    "end": "1391820"
  },
  {
    "text": "terminating node cap it would be benef",
    "start": "1391820",
    "end": "1395000"
  },
  {
    "text": "you can only benefit from that if you",
    "start": "1395000",
    "end": "1397760"
  },
  {
    "text": "don't health check with the data plane",
    "start": "1397760",
    "end": "1400520"
  },
  {
    "text": "reachability mode right because you",
    "start": "1400520",
    "end": "1403100"
  },
  {
    "text": "would need to health check using the",
    "start": "1403100",
    "end": "1405320"
  },
  {
    "text": "service proxy mechanism instead because",
    "start": "1405320",
    "end": "1407659"
  },
  {
    "text": "the service proxy in this case Q proxy",
    "start": "1407659",
    "end": "1409760"
  },
  {
    "text": "is the one that's going to pick up on",
    "start": "1409760",
    "end": "1411559"
  },
  {
    "text": "the Node going away and be and",
    "start": "1411559",
    "end": "1413659"
  },
  {
    "text": "terminating if you're a service proxy",
    "start": "1413659",
    "end": "1416360"
  },
  {
    "text": "instead think about enabling lbs to",
    "start": "1416360",
    "end": "1420140"
  },
  {
    "text": "connection drain it doesn't necessarily",
    "start": "1420140",
    "end": "1422419"
  },
  {
    "text": "mean that they will connection drain",
    "start": "1422419",
    "end": "1424640"
  },
  {
    "text": "because that depends on the load",
    "start": "1424640",
    "end": "1426020"
  },
  {
    "text": "balancer implementation but what you're",
    "start": "1426020",
    "end": "1428900"
  },
  {
    "text": "doing might be beneficial and it might",
    "start": "1428900",
    "end": "1431960"
  },
  {
    "text": "be very beneficial from a user's point",
    "start": "1431960",
    "end": "1434659"
  },
  {
    "text": "of view of using kubernetes since it",
    "start": "1434659",
    "end": "1437539"
  },
  {
    "text": "aligns the usability between service",
    "start": "1437539",
    "end": "1440360"
  },
  {
    "text": "proxies",
    "start": "1440360",
    "end": "1443020"
  },
  {
    "text": "this was kind of everything I wanted to",
    "start": "1443960",
    "end": "1446600"
  },
  {
    "text": "present I think you have a QR code here",
    "start": "1446600",
    "end": "1448880"
  },
  {
    "text": "that will lead you to the presentation",
    "start": "1448880",
    "end": "1450440"
  },
  {
    "text": "slides and if you have any questions",
    "start": "1450440",
    "end": "1453740"
  },
  {
    "text": "well I will be here or feel free to use",
    "start": "1453740",
    "end": "1456500"
  },
  {
    "text": "the microphone right now otherwise thank",
    "start": "1456500",
    "end": "1458780"
  },
  {
    "text": "you so much",
    "start": "1458780",
    "end": "1459390"
  },
  {
    "text": "[Applause]",
    "start": "1459390",
    "end": "1469519"
  },
  {
    "text": "hello hi",
    "start": "1474140",
    "end": "1475880"
  },
  {
    "text": "hello",
    "start": "1475880",
    "end": "1477559"
  },
  {
    "text": "um great presentation",
    "start": "1477559",
    "end": "1479179"
  },
  {
    "text": "um thank you I'm still a bit confused uh",
    "start": "1479179",
    "end": "1482360"
  },
  {
    "text": "when it comes to like as far as I",
    "start": "1482360",
    "end": "1483980"
  },
  {
    "text": "understood",
    "start": "1483980",
    "end": "1485080"
  },
  {
    "text": "uh you had then uh",
    "start": "1485080",
    "end": "1488720"
  },
  {
    "text": "the cluster and the like the the cluster",
    "start": "1488720",
    "end": "1491120"
  },
  {
    "text": "uh kccm kind of fighting with the",
    "start": "1491120",
    "end": "1494659"
  },
  {
    "text": "algorithm of Health checking right like",
    "start": "1494659",
    "end": "1496820"
  },
  {
    "text": "the the the the fact that like uh a node",
    "start": "1496820",
    "end": "1500299"
  },
  {
    "text": "is not responding anymore and a note is",
    "start": "1500299",
    "end": "1502940"
  },
  {
    "text": "not ready is uh like kind of different",
    "start": "1502940",
    "end": "1506059"
  },
  {
    "text": "things and like both would uh",
    "start": "1506059",
    "end": "1510140"
  },
  {
    "text": "remove it from the both would remove the",
    "start": "1510140",
    "end": "1512960"
  },
  {
    "text": "node from the pool that would actually",
    "start": "1512960",
    "end": "1514760"
  },
  {
    "text": "respond to the requests right could you",
    "start": "1514760",
    "end": "1517100"
  },
  {
    "text": "explain a little bit more of like what",
    "start": "1517100",
    "end": "1518960"
  },
  {
    "text": "is like uh what are the responsibilities",
    "start": "1518960",
    "end": "1521780"
  },
  {
    "text": "of kccm removing an instance from a load",
    "start": "1521780",
    "end": "1524659"
  },
  {
    "text": "balancer and the load balancer doing it",
    "start": "1524659",
    "end": "1527539"
  },
  {
    "text": "by itself by just labeling a an instance",
    "start": "1527539",
    "end": "1531080"
  },
  {
    "text": "as unhealthy like sure so they're kind",
    "start": "1531080",
    "end": "1535520"
  },
  {
    "text": "of differentiated by the fact that the",
    "start": "1535520",
    "end": "1539179"
  },
  {
    "text": "kccm will reconfigure the load balancer",
    "start": "1539179",
    "end": "1541460"
  },
  {
    "text": "in general so that's how it gets removed",
    "start": "1541460",
    "end": "1543559"
  },
  {
    "text": "and it does this by watching node events",
    "start": "1543559",
    "end": "1545419"
  },
  {
    "text": "as I mentioned",
    "start": "1545419",
    "end": "1546740"
  },
  {
    "text": "the health check is a bit more dynamic",
    "start": "1546740",
    "end": "1549260"
  },
  {
    "text": "in this case so the health check is a",
    "start": "1549260",
    "end": "1552919"
  },
  {
    "text": "construct that is native to the load",
    "start": "1552919",
    "end": "1554960"
  },
  {
    "text": "balancer so it's much quicker at picking",
    "start": "1554960",
    "end": "1558440"
  },
  {
    "text": "up whenever these things change then",
    "start": "1558440",
    "end": "1561980"
  },
  {
    "text": "having to reconfigure the load balancer",
    "start": "1561980",
    "end": "1564820"
  },
  {
    "text": "completely uh like the kccm does",
    "start": "1564820",
    "end": "1569120"
  },
  {
    "text": "um I think if you I'm not exactly sure",
    "start": "1569120",
    "end": "1571760"
  },
  {
    "text": "if I answer your question correctly but",
    "start": "1571760",
    "end": "1573980"
  },
  {
    "text": "if you'd like we can discuss that",
    "start": "1573980",
    "end": "1575539"
  },
  {
    "text": "quickly afterwards sure thank you",
    "start": "1575539",
    "end": "1577279"
  },
  {
    "text": "welcome",
    "start": "1577279",
    "end": "1579640"
  }
]