[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "okay uh good morning good afternoon good evening depending on where you're joining us from",
    "start": "1920",
    "end": "7200"
  },
  {
    "text": "um welcome to today's cncf webinar rootless containers in getpod my name is christy tan and i'll be",
    "start": "7200",
    "end": "13360"
  },
  {
    "text": "moderating today's webinar we would like to welcome our presenters today uh christian weichel",
    "start": "13360",
    "end": "18480"
  },
  {
    "text": "chief architect at gitpod and alvin querrey uh director of kinfolk labs at kinvolk a",
    "start": "18480",
    "end": "24800"
  },
  {
    "text": "few housekeeping items before we get started during the webinar you are not able to talk as an attendee",
    "start": "24800",
    "end": "30240"
  },
  {
    "text": "there is a q a box at the bottom of your screen please feel free to drop in your questions and we'll get to as many as we can at",
    "start": "30240",
    "end": "36800"
  },
  {
    "text": "the end this is an official webinar of the cncf and as such is subject to the cncf code of conduct",
    "start": "36800",
    "end": "43680"
  },
  {
    "text": "please do not add anything to the chat or questions that would be in violation of that code of conduct",
    "start": "43680",
    "end": "49120"
  },
  {
    "text": "basically please be respectful of all your fellow participants and presenters please also note that the",
    "start": "49120",
    "end": "55039"
  },
  {
    "text": "recording and slides will be posted later today to the cmcf webinars page at cncf dot io",
    "start": "55039",
    "end": "61199"
  },
  {
    "text": "webinars with that i'll kick i'll hand it over to christian and alvin to kick off today's presentation",
    "start": "61199",
    "end": "67360"
  },
  {
    "text": "take it away thanks christy for the intro",
    "start": "67360",
    "end": "72799"
  },
  {
    "start": "70000",
    "end": "260000"
  },
  {
    "text": "so welcome um today we're going to talk about rootless containers in in gitpod and to dive right in we first",
    "start": "72799",
    "end": "81040"
  },
  {
    "text": "have to talk about what is gitpod and gitpod is an open source project",
    "start": "81040",
    "end": "87520"
  },
  {
    "text": "that automates development environments and you can think of it as a ci system that automates regular",
    "start": "87520",
    "end": "93920"
  },
  {
    "text": "builds gitpod automates the provisioning of development environments for pretty much every developer so it",
    "start": "93920",
    "end": "102000"
  },
  {
    "text": "has ready to code deaf environments meaning all your tools are there code is",
    "start": "102000",
    "end": "107439"
  },
  {
    "text": "downloaded um code is compiled and you can ready to go you can start working with a click of a",
    "start": "107439",
    "end": "113439"
  },
  {
    "text": "button and it does that behind the scenes by provisioning",
    "start": "113439",
    "end": "118640"
  },
  {
    "text": "kubernetes pods so each workspace that you start within gitpod is actually a kubernetes pod",
    "start": "118640",
    "end": "126880"
  },
  {
    "text": "and we want those pods those workspaces that you can start in gitpod",
    "start": "126880",
    "end": "132000"
  },
  {
    "text": "to feel pretty much like your local machine except you get a new local machine for every",
    "start": "132000",
    "end": "137840"
  },
  {
    "text": "every task you want to do so there's no previous state that can impede what it is you're trying to do",
    "start": "137840",
    "end": "144160"
  },
  {
    "text": "and when we started out for a long time one of the big differences between your local machine and what gitpod would",
    "start": "144160",
    "end": "151120"
  },
  {
    "text": "give you is what you could do within such a gitpod workspace for example there was no sudo",
    "start": "151120",
    "end": "156959"
  },
  {
    "text": "meaning you couldn't install things after your workspace was running you could only do that in the docker",
    "start": "156959",
    "end": "163040"
  },
  {
    "text": "image that you would bring to the workspace and also there was no docker which in a",
    "start": "163040",
    "end": "169440"
  },
  {
    "text": "cloud native environment is a bit tricky and so what we really wanted to have is",
    "start": "169440",
    "end": "175040"
  },
  {
    "text": "we wanted to enable those two key uh features where you could sort of have",
    "start": "175040",
    "end": "180319"
  },
  {
    "text": "root in your workspace and be able to install things after the fact once it's running but",
    "start": "180319",
    "end": "185519"
  },
  {
    "text": "also where you would have docker and do docker build docker compose etc",
    "start": "185519",
    "end": "191440"
  },
  {
    "text": "and this talk is pretty much about the technologies that made this possible and how we enable this in gitpod so now",
    "start": "192080",
    "end": "199440"
  },
  {
    "text": "this is possible now you can run docker you can do upgrade install and you basically have root within your",
    "start": "199440",
    "end": "205280"
  },
  {
    "text": "workspace and the most naive way possible of doing",
    "start": "205280",
    "end": "211599"
  },
  {
    "text": "this is by simply giving you all the privileges within the workspace container",
    "start": "211599",
    "end": "216640"
  },
  {
    "text": "you know we could just run as root so to speak but the clear and obvious downside is",
    "start": "216640",
    "end": "223040"
  },
  {
    "text": "that that would also mean that everyone inside their workspace would if",
    "start": "223040",
    "end": "228480"
  },
  {
    "text": "effectively be rude on the node they'd effectively have all the privileges they'd need to",
    "start": "228480",
    "end": "233599"
  },
  {
    "text": "potentially escape the container and to have really a lot of privileges on a",
    "start": "233599",
    "end": "240239"
  },
  {
    "text": "note that is shared with say 25 other users so clearly this is not an option and we need some good way of",
    "start": "240239",
    "end": "246879"
  },
  {
    "text": "isolating those workspace containers from each other but also to the node and this is where",
    "start": "246879",
    "end": "253680"
  },
  {
    "text": "linux isolation tech comes in and i'll hand over to alban to talk about that",
    "start": "253680",
    "end": "261440"
  },
  {
    "start": "260000",
    "end": "535000"
  },
  {
    "text": "thank you so there are different ways to isolate more of the parts from each",
    "start": "261919",
    "end": "268479"
  },
  {
    "text": "other and from the host one way is to think about a vm like container on time",
    "start": "268479",
    "end": "274720"
  },
  {
    "text": "uh those are for example black containers cheap visor cutter containers like cracker and this",
    "start": "274720",
    "end": "281040"
  },
  {
    "text": "this technology to provide uh improved isolation compared to what",
    "start": "281040",
    "end": "286080"
  },
  {
    "text": "linux containers are and they work in different way for example nabla containers use",
    "start": "286080",
    "end": "291600"
  },
  {
    "text": "uniqueness this means that for every new workload there will be a different unicorn build",
    "start": "291600",
    "end": "298160"
  },
  {
    "text": "specifically for that workload or there is jvisa",
    "start": "298160",
    "end": "303440"
  },
  {
    "text": "what it does is re-implement the linux system called interface so it's really",
    "start": "303440",
    "end": "310080"
  },
  {
    "text": "implemented in code so when your application make a system call instead of talking to the linux keynote",
    "start": "310080",
    "end": "316479"
  },
  {
    "text": "it talks to this interface this application can help there are cutter containers that build a",
    "start": "316479",
    "end": "323440"
  },
  {
    "text": "lightweight virtual machines and it's compatible with several uh hypervisor for example umu or",
    "start": "323440",
    "end": "330000"
  },
  {
    "text": "firecrackers those different vm technologies um they provide more resolution but they also",
    "start": "330000",
    "end": "337039"
  },
  {
    "text": "give more limitation compared to normal linux containers they could be compatibilities",
    "start": "337039",
    "end": "342880"
  },
  {
    "text": "compatibility issues or they could have a decreased performance for example with a network",
    "start": "342880",
    "end": "349120"
  },
  {
    "text": "traffic or io file system access",
    "start": "349120",
    "end": "354160"
  },
  {
    "text": "what we want in general is to have higher density that means to be able to",
    "start": "354160",
    "end": "359440"
  },
  {
    "text": "put a lot of parts on the same note without",
    "start": "359440",
    "end": "364960"
  },
  {
    "text": "having to meet that too much so next slide there is a",
    "start": "364960",
    "end": "372319"
  },
  {
    "text": "alternative approach which is not to use vms but use what is called usernamespace so",
    "start": "372319",
    "end": "379280"
  },
  {
    "text": "the username space is a feature from the linux kernel among other namespace for example",
    "start": "379280",
    "end": "385039"
  },
  {
    "text": "networking space uh pin space and so on uh currently that's a feature that is not",
    "start": "385039",
    "end": "391280"
  },
  {
    "text": "provided by kubernetes so kubernetes works like you see on the picture on the left it has",
    "start": "391280",
    "end": "399199"
  },
  {
    "text": "worker nodes kubernetes and so on that don't use usernamespace what usernamespace does is to isolate",
    "start": "399360",
    "end": "406400"
  },
  {
    "text": "users so that means the user root inside the container is not the same user root on the host so it",
    "start": "406400",
    "end": "412160"
  },
  {
    "text": "provides some resolutions there are different ways to different ways to use username spacing kubernetes",
    "start": "412160",
    "end": "419199"
  },
  {
    "text": "here i provide three different uh explanation of a different way to use it",
    "start": "419199",
    "end": "425360"
  },
  {
    "text": "the the second one from the left is called uh cap 127.",
    "start": "425360",
    "end": "433599"
  },
  {
    "text": "what it does is um it add a new feed in the pot spec a bit the",
    "start": "433599",
    "end": "439199"
  },
  {
    "text": "same way that you have a host network in a prospect to say whether or not you want to use um",
    "start": "439199",
    "end": "444400"
  },
  {
    "text": "a new networking space in your pod it adds a new field for",
    "start": "444400",
    "end": "450720"
  },
  {
    "text": "usernamespace so i'll present it in red in this picture",
    "start": "450720",
    "end": "457360"
  },
  {
    "text": "where the user's space will be located in this architecture",
    "start": "457360",
    "end": "462400"
  },
  {
    "text": "so that's a gap that means a kubernetes enhancement proposal that's not something which is merged in",
    "start": "462400",
    "end": "468080"
  },
  {
    "text": "kubernetes yet that's something we work on that with others in the community",
    "start": "468080",
    "end": "473840"
  },
  {
    "text": "to provide that another way to use user namespace is the next one cap",
    "start": "473840",
    "end": "480360"
  },
  {
    "text": "2033 where it's so called the root test mode because it's allows to run the different",
    "start": "480360",
    "end": "486080"
  },
  {
    "text": "kubernetes component without being good for example it you can run couponet without being wood you",
    "start": "486080",
    "end": "492000"
  },
  {
    "text": "can run the container on time without being hot so in this way you have a username space",
    "start": "492000",
    "end": "497039"
  },
  {
    "text": "that uh go around all the",
    "start": "497039",
    "end": "502240"
  },
  {
    "text": "components of kubernetes on the last solution is the one uh retained by",
    "start": "502240",
    "end": "509199"
  },
  {
    "text": "git pod where we don't touch kubernetes so we can use kubernetes",
    "start": "509199",
    "end": "517360"
  },
  {
    "text": "upstream without modification on inside the pod inside the workload it make use of use",
    "start": "517360",
    "end": "523680"
  },
  {
    "text": "on space so it creates the username space at this time in this way it works on",
    "start": "523680",
    "end": "529519"
  },
  {
    "text": "current kubernetes without patches",
    "start": "529519",
    "end": "535839"
  },
  {
    "start": "535000",
    "end": "662000"
  },
  {
    "text": "thank you so how do you how do you create a username space and this is an example sort of walk",
    "start": "537600",
    "end": "545120"
  },
  {
    "text": "through how how to create such a thing and it starts with the unjust call there are other syscalls",
    "start": "545120",
    "end": "551600"
  },
  {
    "text": "that can also do that that create the the username space itself",
    "start": "551600",
    "end": "557440"
  },
  {
    "text": "and then once you have that username space you need to establish the uid and gid mapping that",
    "start": "557440",
    "end": "565120"
  },
  {
    "text": "maps a user id from within that namespace to a user id outside of that namespace",
    "start": "565120",
    "end": "571839"
  },
  {
    "text": "and this happens to happens by writing to files in the proc file system",
    "start": "571839",
    "end": "578800"
  },
  {
    "text": "and then lastly you need some exact ve sys call to to get a hold of the capabilities um",
    "start": "578800",
    "end": "585200"
  },
  {
    "text": "inside that username space and you basically get the full capability set at this point including capsus admin um",
    "start": "585200",
    "end": "593279"
  },
  {
    "text": "cabinet raw etc um you can try this yourself um with",
    "start": "593279",
    "end": "600080"
  },
  {
    "text": "this command this lets you observe sort of the the things that the steps that happen um to make this work so unshare minus u",
    "start": "600080",
    "end": "608320"
  },
  {
    "text": "or in this uppercase u creates the username space minus r maps your current user your current",
    "start": "608320",
    "end": "613760"
  },
  {
    "text": "executing user to uid0 inside that namespace and the s-trace in front",
    "start": "613760",
    "end": "619279"
  },
  {
    "text": "um just traces what's happening",
    "start": "619279",
    "end": "623200"
  },
  {
    "text": "so this is all fine except in a kubernetes um",
    "start": "624959",
    "end": "632000"
  },
  {
    "text": "pod we would need to give quite far-reaching capabilities to make this work so to write these two files you need",
    "start": "632000",
    "end": "639839"
  },
  {
    "text": "capsus admin in the outer namespace and because at this point kubernetes does not provide username spaces",
    "start": "639839",
    "end": "646800"
  },
  {
    "text": "yet this outer name space would need to be the the node as a whole and we don't want to provide",
    "start": "646800",
    "end": "654240"
  },
  {
    "text": "um capsusapmen for security reasons um on the node inside the workspace so",
    "start": "654240",
    "end": "660320"
  },
  {
    "text": "we need to find a solution to that and the way we we built this within",
    "start": "660320",
    "end": "666160"
  },
  {
    "start": "662000",
    "end": "955000"
  },
  {
    "text": "gitpod is the root process that we start inside a container we call supervisor and supervisor ring zero",
    "start": "666160",
    "end": "674640"
  },
  {
    "text": "is sort of the thing that gets started that's the command of of the workspace container and then it",
    "start": "674640",
    "end": "681440"
  },
  {
    "text": "starts the username space as supervisor ring one",
    "start": "681440",
    "end": "686560"
  },
  {
    "text": "and once we have that we make a grpc call to a node daemon service that runs on the",
    "start": "686560",
    "end": "692480"
  },
  {
    "text": "node that we call workspace daemon and this service then has the",
    "start": "692480",
    "end": "697680"
  },
  {
    "text": "capabilities on the machine to actually write those files and we pass the pid of the process that",
    "start": "697680",
    "end": "706240"
  },
  {
    "text": "identifies the username space we want to write this uidn gid mapping for that's all nice",
    "start": "706240",
    "end": "714560"
  },
  {
    "text": "except now we have to do pid translation and the reason for that is that",
    "start": "714560",
    "end": "720800"
  },
  {
    "text": "containers in general are in essence a collection of namespaces and other isolation isolation",
    "start": "720800",
    "end": "727600"
  },
  {
    "text": "tech and one of those name spaces is a pid namespace this is why",
    "start": "727600",
    "end": "733360"
  },
  {
    "text": "any process that you start sort of as the root of the container becomes pid-1 and it's not the actual pid-1 on the",
    "start": "733360",
    "end": "740639"
  },
  {
    "text": "node say systemd or init or something like that so the pid that we'll receive",
    "start": "740639",
    "end": "746320"
  },
  {
    "text": "from supervisor ring one will not be the pid in the namespace that workspace demon",
    "start": "746320",
    "end": "752800"
  },
  {
    "text": "sees in the node namespace so we need to do some translation here",
    "start": "752800",
    "end": "758079"
  },
  {
    "text": "so outside of the pid namespace of the container this might be is something completely different and in",
    "start": "758079",
    "end": "765839"
  },
  {
    "text": "order to do this pid translation there are a few ways how this could be done",
    "start": "765839",
    "end": "771040"
  },
  {
    "text": "there is no syscall yet that can just do this translation for you",
    "start": "771040",
    "end": "776160"
  },
  {
    "text": "there are some tricks using unix pipes but also it's in the in the proc file system so",
    "start": "776160",
    "end": "782399"
  },
  {
    "text": "if we look at the status file of a process we see that there is an nspid entry",
    "start": "782399",
    "end": "788959"
  },
  {
    "text": "which lists all pids in the children namespaces from the",
    "start": "788959",
    "end": "794880"
  },
  {
    "text": "perspective from the process that's looking at this file because we know that the pid that we're",
    "start": "794880",
    "end": "802800"
  },
  {
    "text": "looking for must be a child process of the container of the workspace container we can look at the",
    "start": "802800",
    "end": "809839"
  },
  {
    "text": "children of that workspace container look at their status files and this way identify the correct pid",
    "start": "809839",
    "end": "817680"
  },
  {
    "text": "so now we can create a username space and we can establish the pid mapping within this username space",
    "start": "818639",
    "end": "826800"
  },
  {
    "text": "now we're left with a problem because this is working really well if we look at the file system we see",
    "start": "827279",
    "end": "833760"
  },
  {
    "text": "that the uids now all of a sudden don't make sense anymore at least at first glance",
    "start": "833760",
    "end": "838880"
  },
  {
    "text": "but thinking about it this is exactly expected behavior because on the file system we have some",
    "start": "838880",
    "end": "845680"
  },
  {
    "text": "files that belong to actual proper uid0 and we have some files that belong to a",
    "start": "845680",
    "end": "851440"
  },
  {
    "text": "user that has a mapping within this username space and the ones that actually belong to",
    "start": "851440",
    "end": "856959"
  },
  {
    "text": "proper uid 0 they are shown as 65 534 in here because",
    "start": "856959",
    "end": "862000"
  },
  {
    "text": "we don't have a mapping that maps the user inside the namespace to uid 0 outside",
    "start": "862000",
    "end": "869279"
  },
  {
    "text": "to illustrate that what we would like to have is a file system that from within the",
    "start": "869440",
    "end": "874720"
  },
  {
    "text": "username space looks like this you have a whole bunch of files and folders that belong to",
    "start": "874720",
    "end": "880079"
  },
  {
    "text": "uid0 and you have some that belong to say some other user in this case",
    "start": "880079",
    "end": "885800"
  },
  {
    "text": "33333 and in this example we have a uid mapping where uid",
    "start": "885800",
    "end": "892800"
  },
  {
    "text": "excuse me uid 0 inside the namespace is uid ten thousand outside of the",
    "start": "892800",
    "end": "899519"
  },
  {
    "text": "namespace and uid three three three three three inside the namespace is four three three three three three so",
    "start": "899519",
    "end": "906399"
  },
  {
    "text": "basically just plus uh plus ten thousand",
    "start": "906399",
    "end": "912800"
  },
  {
    "text": "so in order to get this view on the left from within the username space we would need to have a file system on",
    "start": "912800",
    "end": "918560"
  },
  {
    "text": "the node that actually looks like this right that actually has this uid shift implemented",
    "start": "918560",
    "end": "925120"
  },
  {
    "text": "but in reality the file system that we need to do the shift for is the root file system of",
    "start": "925120",
    "end": "930240"
  },
  {
    "text": "our container and this root file system was put there by the snapshotter of the container runtime",
    "start": "930240",
    "end": "936399"
  },
  {
    "text": "and it doesn't know about this uid shift and it also doesn't care so in reality the file system",
    "start": "936399",
    "end": "943920"
  },
  {
    "text": "looks exactly like we would want it to look like from within the username space so we need some process",
    "start": "943920",
    "end": "950000"
  },
  {
    "text": "that dynamically does this ui or does this uid shift for us",
    "start": "950000",
    "end": "955440"
  },
  {
    "start": "955000",
    "end": "1099000"
  },
  {
    "text": "and there are a few technologies that can do that for example there is fuse overlayfest",
    "start": "955440",
    "end": "961519"
  },
  {
    "text": "which has the benefit that it can be used without any privileges outside of",
    "start": "961519",
    "end": "966959"
  },
  {
    "text": "the username space so you can use that completely from within the username space because fuse can be mounted within username",
    "start": "966959",
    "end": "974000"
  },
  {
    "text": "spaces and the rest that's needed is a username process there is very little upfront",
    "start": "974000",
    "end": "980480"
  },
  {
    "text": "cost all you got to do is start a process but the run runtime cost is comparatively high",
    "start": "980480",
    "end": "985759"
  },
  {
    "text": "because it has to go through userland on the upside it is not very platform specific",
    "start": "985759",
    "end": "992959"
  },
  {
    "text": "there is also overlay fs meta copy metacopy is a mode in overlay fs where",
    "start": "993040",
    "end": "999600"
  },
  {
    "text": "it just copies the metadata to to the upper deer",
    "start": "999600",
    "end": "1006320"
  },
  {
    "text": "so what we could do is we could basically mount an overlay fs on top of the file system that we would like to",
    "start": "1006320",
    "end": "1011759"
  },
  {
    "text": "shift and then basically do a change own on onto that file system and this is",
    "start": "1011759",
    "end": "1017519"
  },
  {
    "text": "exactly where the upfront cost comes in this change zone is potentially very expensive if the root file system is",
    "start": "1017519",
    "end": "1023199"
  },
  {
    "text": "large the runtime cost is comparatively low um",
    "start": "1023199",
    "end": "1028319"
  },
  {
    "text": "in terms of platform specificity overlay fs to my knowledge can only be mounted from",
    "start": "1028319",
    "end": "1033760"
  },
  {
    "text": "within username spaces on ubuntu because they have a non-upstream patch",
    "start": "1033760",
    "end": "1039839"
  },
  {
    "text": "that takes the right box so to speak on on oval afs and lastly speaking of ubuntu ubuntu has",
    "start": "1039839",
    "end": "1047280"
  },
  {
    "text": "support for a file system they call shiftfs which can do this uid shift at",
    "start": "1047280",
    "end": "1055120"
  },
  {
    "text": "mount time so to speak it doesn't completely work from within the username",
    "start": "1055120",
    "end": "1060160"
  },
  {
    "text": "space because you need something that they call a mark mount and this you can only do with privileges",
    "start": "1060160",
    "end": "1066000"
  },
  {
    "text": "in the outer name space but it has very little upfront cost and all you need is amount runtime cost",
    "start": "1066000",
    "end": "1073360"
  },
  {
    "text": "is very low it is quite fast and it runs entirely in kernel space but it is very platform specific it only",
    "start": "1073360",
    "end": "1080559"
  },
  {
    "text": "works on ubuntu for gitpod.io which is the sas offering",
    "start": "1080559",
    "end": "1086799"
  },
  {
    "text": "the sas version of of gitpod we ended up going with shiftfs because",
    "start": "1086799",
    "end": "1092080"
  },
  {
    "text": "we have control over the environment that this runs in and we deeply care about workspace startup time and performance",
    "start": "1092080",
    "end": "1099760"
  },
  {
    "start": "1099000",
    "end": "1281000"
  },
  {
    "text": "so now that we have the pid mapping established we're using the",
    "start": "1101919",
    "end": "1107360"
  },
  {
    "text": "same trick that we used to write to the pid and uid map to actually create this mark mount this",
    "start": "1107360",
    "end": "1114240"
  },
  {
    "text": "privileged operation that we need to do that so we make this make another grpc call",
    "start": "1114240",
    "end": "1119840"
  },
  {
    "text": "to the workspace daemon who then creates that mark mount for us",
    "start": "1119840",
    "end": "1125200"
  },
  {
    "text": "once we have this mark mount we can use it to mount the shifted file system and then we do bind mounts to dev",
    "start": "1125200",
    "end": "1133120"
  },
  {
    "text": "proc etc other bits of the file system of the container and then start supervisor ring 2 which",
    "start": "1133120",
    "end": "1139760"
  },
  {
    "text": "basically does a pivot root to this new file system and this is how",
    "start": "1139760",
    "end": "1145280"
  },
  {
    "text": "inside ring 2 your a inside this username space but also you're looking at a shifted",
    "start": "1145280",
    "end": "1152320"
  },
  {
    "text": "file system so to you all file system permissions and ownership looks correct",
    "start": "1152320",
    "end": "1159200"
  },
  {
    "text": "this is all nice except we cannot just mount proc in this new for this new file system but",
    "start": "1159919",
    "end": "1167039"
  },
  {
    "text": "we want to do that because supervisor ring 2 also creates a pid namespace",
    "start": "1167039",
    "end": "1172720"
  },
  {
    "text": "to sort of hide this mechanism away and also to prevent users of the workspace from sort of",
    "start": "1172720",
    "end": "1179840"
  },
  {
    "text": "escaping this new root file system and we cannot mount proc because if we",
    "start": "1179840",
    "end": "1185520"
  },
  {
    "text": "look at proc within our container we see that there's a bunch of files that has a mask placed on top of it so",
    "start": "1185520",
    "end": "1191679"
  },
  {
    "text": "in the proc file system there is a there are a bunch of files a",
    "start": "1191679",
    "end": "1197679"
  },
  {
    "text": "bunch of objects that are singletons within the kernel that are not namespaced for example",
    "start": "1197679",
    "end": "1203919"
  },
  {
    "text": "proc kcor or scat debug which might even leak information about other namespaces hence other containers on the",
    "start": "1203919",
    "end": "1211039"
  },
  {
    "text": "node and so what kubernetes and or more specifically the",
    "start": "1211039",
    "end": "1216640"
  },
  {
    "text": "runtimes do container runtimes do is that they mount masks on top of the files and",
    "start": "1216640",
    "end": "1222720"
  },
  {
    "text": "folders in proc in order to prevent workloads from accessing those files",
    "start": "1222720",
    "end": "1228480"
  },
  {
    "text": "and in the kernel there is a check that checks if such a mask is present",
    "start": "1228480",
    "end": "1233679"
  },
  {
    "text": "and if so it prevents users from mounting proc because that would essentially",
    "start": "1233679",
    "end": "1239280"
  },
  {
    "text": "render those masks useless in order to work around that and to",
    "start": "1239280",
    "end": "1246960"
  },
  {
    "text": "never sort of offer an unmasked proc to to the workspace container we again rely",
    "start": "1246960",
    "end": "1253120"
  },
  {
    "text": "on workspace daemon to make that mount for us and the way that works is that we call out to workspace daemon",
    "start": "1253120",
    "end": "1259360"
  },
  {
    "text": "with the pid of the excuse me passing in the pid of the",
    "start": "1259360",
    "end": "1264559"
  },
  {
    "text": "target pid namespace we do the proc mount establish the masks",
    "start": "1264559",
    "end": "1269840"
  },
  {
    "text": "and then move this entire mask proc mount into the amount name space of of supervisor",
    "start": "1269840",
    "end": "1277039"
  },
  {
    "text": "ring one of our new file system that we're creating",
    "start": "1277039",
    "end": "1281679"
  },
  {
    "text": "that's nice so now we have root inside our workspace and it feels like root and things like apt-get are working",
    "start": "1282880",
    "end": "1289360"
  },
  {
    "text": "but docker isn't working yet and rootless docker",
    "start": "1289360",
    "end": "1295919"
  },
  {
    "text": "has a has seen a lot of work first and foremost by akihiro souda",
    "start": "1295919",
    "end": "1303280"
  },
  {
    "text": "who has worked relentlessly on things like rootless kit and in general",
    "start": "1303280",
    "end": "1309039"
  },
  {
    "text": "making docker work as in in a rootless mode but also our friends from from kinfolk arban and his",
    "start": "1309039",
    "end": "1314559"
  },
  {
    "text": "colleagues have done a lot of work in this space",
    "start": "1314559",
    "end": "1319840"
  },
  {
    "text": "so how do we make this work and the key issue here is that docker needs a",
    "start": "1320240",
    "end": "1328640"
  },
  {
    "text": "needs a lot of capabilities with regards to networking and we can provide those capabilities by",
    "start": "1328640",
    "end": "1334320"
  },
  {
    "text": "pre by wrapping docker or the docker daemon specifically in a network namespace and",
    "start": "1334320",
    "end": "1341360"
  },
  {
    "text": "to do that we need to provide some networking into the outside world so to speak and",
    "start": "1341360",
    "end": "1346480"
  },
  {
    "text": "for this we use slurp for net and s which is a user land mechanism",
    "start": "1346480",
    "end": "1352320"
  },
  {
    "text": "to make um to make network namespace so the connection their connection to the",
    "start": "1352320",
    "end": "1357520"
  },
  {
    "text": "outside world work without needing privileges in the outer name space",
    "start": "1357520",
    "end": "1363600"
  },
  {
    "text": "for proc mounts because the container that run inside this or run in this",
    "start": "1364559",
    "end": "1369919"
  },
  {
    "text": "docker daemon they will also need specific proc mounts because among other things they're also pid name spaces",
    "start": "1369919",
    "end": "1376159"
  },
  {
    "text": "we use the same trick that we use to create the proc mount for the workspace container as a whole",
    "start": "1376159",
    "end": "1381360"
  },
  {
    "text": "or for supervisor ring ring one we basically call to workspace daemon and ask it to",
    "start": "1381360",
    "end": "1388000"
  },
  {
    "text": "mount proc for us now this isn't quite as easy as it might sound because we need to sort of catch the",
    "start": "1388000",
    "end": "1395120"
  },
  {
    "text": "right moment to do that and we do this by sort of interjecting",
    "start": "1395120",
    "end": "1400880"
  },
  {
    "text": "into run c so as part of the oci runtime spec",
    "start": "1400880",
    "end": "1406080"
  },
  {
    "text": "the container [Music] orchestrator so to speak in this case",
    "start": "1406080",
    "end": "1411280"
  },
  {
    "text": "docker or containing id actually will provide it will create the oci runtimes back and in there it will have",
    "start": "1411280",
    "end": "1416640"
  },
  {
    "text": "something like mount proc and we sit in between there we modify",
    "start": "1416640",
    "end": "1422000"
  },
  {
    "text": "the the oci runtime spec and add ourself as hook in the container lifecycle",
    "start": "1422000",
    "end": "1429440"
  },
  {
    "text": "to actually do that proc mount okay so much for how this looks like on",
    "start": "1429440",
    "end": "1437440"
  },
  {
    "start": "1433000",
    "end": "1561000"
  },
  {
    "text": "paper let's have a look like how this looks like in in the real world",
    "start": "1437440",
    "end": "1445840"
  },
  {
    "text": "so this here is a um is a gitpod workspace that runs in my",
    "start": "1447279",
    "end": "1454240"
  },
  {
    "text": "runs in my browser in a browser tab obviously there's a full-blown",
    "start": "1454240",
    "end": "1461840"
  },
  {
    "text": "container behind it this is what we've just been talking about and so in here i can do",
    "start": "1462000",
    "end": "1472080"
  },
  {
    "text": "things like this so i can just install",
    "start": "1472080",
    "end": "1476320"
  },
  {
    "text": "install new software for example but i can also run",
    "start": "1477760",
    "end": "1484240"
  },
  {
    "text": "uh sudo docker up and this will give me um we'll start the docker demon with the",
    "start": "1485679",
    "end": "1491120"
  },
  {
    "text": "process that i just described and now i can run",
    "start": "1491120",
    "end": "1501840"
  },
  {
    "text": "um i can just run docker containers right so i just started alpine",
    "start": "1505840",
    "end": "1512000"
  },
  {
    "text": "i can also do that um",
    "start": "1512000",
    "end": "1515840"
  },
  {
    "text": "with starting ports and then gitpod will realize that this port is now served and at the",
    "start": "1518799",
    "end": "1525600"
  },
  {
    "text": "moment there is nothing actually running on it but if i [Music]",
    "start": "1525600",
    "end": "1532289"
  },
  {
    "text": "if i start a web server in here",
    "start": "1534720",
    "end": "1538320"
  },
  {
    "text": "right then i can access this service that now runs inside a docker container in my workspace so networking also works",
    "start": "1540799",
    "end": "1548159"
  },
  {
    "text": "across this boundary",
    "start": "1548159",
    "end": "1557840"
  },
  {
    "start": "1561000",
    "end": "1939000"
  },
  {
    "text": "right back to aban thank you and as you have seen",
    "start": "1562720",
    "end": "1570000"
  },
  {
    "text": "there are different um way to make it work",
    "start": "1570000",
    "end": "1576240"
  },
  {
    "text": "um but there are some difficulties that uh it might be easier in the future",
    "start": "1576240",
    "end": "1582799"
  },
  {
    "text": "future to implement such an architecture if you have more things in the linux kernel and i",
    "start": "1582799",
    "end": "1588640"
  },
  {
    "text": "will talk about a couple of that now so one patch set that",
    "start": "1588640",
    "end": "1593840"
  },
  {
    "text": "is currently being reviewed is a id map mod and that's something to",
    "start": "1593840",
    "end": "1600559"
  },
  {
    "text": "do something to do something similar to shift fs but um instead of being a ubuntu",
    "start": "1600559",
    "end": "1608640"
  },
  {
    "text": "patch it's something that is pushed upstream and is currently being reviewed and once we have that i'm hoping it will",
    "start": "1608640",
    "end": "1615760"
  },
  {
    "text": "be easier to do this kind of shift fs operation that will be useful both for the rfs",
    "start": "1615760",
    "end": "1623279"
  },
  {
    "text": "of the container to be able to have this uh different ownership of file um that will improve the performance",
    "start": "1623279",
    "end": "1632000"
  },
  {
    "text": "both in the time on in disk space and another use case is",
    "start": "1632000",
    "end": "1637120"
  },
  {
    "text": "for volumes so we have when you have in kubernetes a host volume uh you do a buying mod from the",
    "start": "1637120",
    "end": "1644640"
  },
  {
    "text": "host to the container uh to be able to have this uh shifted",
    "start": "1644640",
    "end": "1649760"
  },
  {
    "text": "ownership on this file so that's one thing i would like",
    "start": "1649760",
    "end": "1655520"
  },
  {
    "text": "to have on the next slide there is um another thing so that's um",
    "start": "1655520",
    "end": "1662240"
  },
  {
    "text": "another feature that i'm enthusiastic about it's called second notify and it's a kind of a new",
    "start": "1662240",
    "end": "1669120"
  },
  {
    "text": "second architecture with a second adjust so",
    "start": "1669120",
    "end": "1674640"
  },
  {
    "text": "what is the use case for that i've seen before there is this interface grpc interface between",
    "start": "1674640",
    "end": "1682159"
  },
  {
    "text": "the workspace and the demand outside that do some methods like prepare usernamespace or",
    "start": "1682159",
    "end": "1688720"
  },
  {
    "text": "modproc that run a privilege operation like mod and um",
    "start": "1688720",
    "end": "1696799"
  },
  {
    "text": "um a matter of this about uh second notify because that will be able to provide the proper interface for this kind of thing um so",
    "start": "1696799",
    "end": "1704399"
  },
  {
    "text": "what you will be able to do is to have the container on the mount system called",
    "start": "1704399",
    "end": "1710399"
  },
  {
    "text": "normally and then secop notify will intercept that on",
    "start": "1710399",
    "end": "1715760"
  },
  {
    "text": "some message to the second version that will run the mount system call on pr for the",
    "start": "1715760",
    "end": "1721279"
  },
  {
    "text": "container so on the next slide i will explain a bit uh",
    "start": "1721279",
    "end": "1726320"
  },
  {
    "text": "that at the top right you see i have a second policy that's where you",
    "start": "1726320",
    "end": "1732240"
  },
  {
    "text": "define for each system calls if you want to or deny their access to that instant",
    "start": "1732240",
    "end": "1737679"
  },
  {
    "text": "call but with this second notify feature you have a additional action you can take call notify and what it",
    "start": "1737679",
    "end": "1745200"
  },
  {
    "text": "does it will say every time the process in the container use that system caller",
    "start": "1745200",
    "end": "1751840"
  },
  {
    "text": "it will defer the decision to an acceleration called the second person and then this agent will be able to",
    "start": "1751840",
    "end": "1761440"
  },
  {
    "text": "take decision or run the system call on behalf of the container",
    "start": "1761440",
    "end": "1766720"
  },
  {
    "text": "here but diagram where you see at the top left currency when you use currency",
    "start": "1766720",
    "end": "1773679"
  },
  {
    "text": "or is the same thing in kubernetes when you start a pod what happens internally it will uh",
    "start": "1773679",
    "end": "1781760"
  },
  {
    "text": "work on exactly a couple of times to create this uh child process and then it will execute",
    "start": "1781760",
    "end": "1787760"
  },
  {
    "text": "the second system call to with this uh notify feature and then you get a file descriptor to be",
    "start": "1787760",
    "end": "1795360"
  },
  {
    "text": "able to get the events uh in this example the",
    "start": "1795360",
    "end": "1800640"
  },
  {
    "text": "month system call and that's my descriptor will be passed to the second chart that you'll be able",
    "start": "1800640",
    "end": "1805840"
  },
  {
    "text": "to run actions on behalf of the container so when the container in there",
    "start": "1805840",
    "end": "1811039"
  },
  {
    "text": "and marked the second bag will do that what it",
    "start": "1811039",
    "end": "1816880"
  },
  {
    "text": "means is it has the potential to make things simpler for a git board or because it's",
    "start": "1816880",
    "end": "1824398"
  },
  {
    "text": "we could just use docker inside the board normally and when it's on the mount",
    "start": "1824799",
    "end": "1830480"
  },
  {
    "text": "system call it will",
    "start": "1830480",
    "end": "1834000"
  },
  {
    "text": "automatically called the second person to do that without having to implement this grpc",
    "start": "1835520",
    "end": "1840880"
  },
  {
    "text": "interface okay and on the next slide",
    "start": "1840880",
    "end": "1848159"
  },
  {
    "text": "but a summary of the different future technology in the linux channel or in",
    "start": "1848480",
    "end": "1853919"
  },
  {
    "text": "general that i think are interesting so",
    "start": "1853919",
    "end": "1859200"
  },
  {
    "text": "first in kubernetes the support for username space there are two kubernetes announcement proposal that",
    "start": "1859200",
    "end": "1867120"
  },
  {
    "text": "for that that i described before and in rootless kit if you go to this guitar page about",
    "start": "1867120",
    "end": "1873279"
  },
  {
    "text": "rootless containers you will find a lot of a lot of purpose theory lots of projects",
    "start": "1873279",
    "end": "1878480"
  },
  {
    "text": "uh interesting like our wordpress kit usanitis which is about running kubernetes without being good",
    "start": "1878480",
    "end": "1885440"
  },
  {
    "text": "sleep for netherness that creation talk about on buy buy for lns which is the same thing",
    "start": "1885440",
    "end": "1891600"
  },
  {
    "text": "but uh with more performance using second modify uh",
    "start": "1891600",
    "end": "1897279"
  },
  {
    "text": "so second modifier in kubernetes doesn't exist yet that's something that is work in progress but here the",
    "start": "1897279",
    "end": "1905039"
  },
  {
    "text": "some different pillar quest so there is a work in progress to make it available in",
    "start": "1905039",
    "end": "1910480"
  },
  {
    "text": "rca from time spec and in ranci in sierra non-con man the",
    "start": "1910480",
    "end": "1915519"
  },
  {
    "text": "work is done only and as in fact we are working on this second chance which is",
    "start": "1915519",
    "end": "1921519"
  },
  {
    "text": "a generic second pageant to uh make it easy for you to use this kind of uh this",
    "start": "1921519",
    "end": "1928559"
  },
  {
    "text": "second notify feature um thank you that's",
    "start": "1928559",
    "end": "1935279"
  },
  {
    "text": "nice last slide [Music]",
    "start": "1935279",
    "end": "1941660"
  },
  {
    "start": "1939000",
    "end": "2079000"
  },
  {
    "text": "yeah so briefly to send up sum up gitpod provides deaf environments that are built for the",
    "start": "1942640",
    "end": "1948159"
  },
  {
    "text": "cloud cloud and automatically provisioned username spaces are the key tech to make",
    "start": "1948159",
    "end": "1954880"
  },
  {
    "text": "provide route within these workspaces and then thanks to all the amazing people that actually make this stuff",
    "start": "1954880",
    "end": "1960640"
  },
  {
    "text": "work first and foremost ken folk also",
    "start": "1960640",
    "end": "1966159"
  },
  {
    "text": "hirosuda and the the community as a whole",
    "start": "1966159",
    "end": "1970799"
  },
  {
    "text": "thank you very much all right thank you both for a great presentation",
    "start": "1974399",
    "end": "1979760"
  },
  {
    "text": "um at this time we're going to move into our q a segment um so if you have a question for our",
    "start": "1979760",
    "end": "1984880"
  },
  {
    "text": "presenters feel free to submit it either through the chat or through the q a box at the bottom of your screen that doesn't look like we",
    "start": "1984880",
    "end": "1990640"
  },
  {
    "text": "have anything submitted yet but we'll give folks just a few seconds here to submit their questions",
    "start": "1990640",
    "end": "2005840"
  },
  {
    "text": "okay it looks like we might have a shy group among us today um alvin and christian um i know at the",
    "start": "2022720",
    "end": "2029600"
  },
  {
    "text": "beginning of your slide deck you have your twitter handles do you want to go back to that slide just in case folks do think of questions later place",
    "start": "2029600",
    "end": "2036159"
  },
  {
    "text": "where they could reach ya",
    "start": "2036159",
    "end": "2039039"
  },
  {
    "text": "perfect awesome so you can see both of their twitter handles here on the uh on the screen so feel free to",
    "start": "2043360",
    "end": "2049679"
  },
  {
    "text": "reach out with questions i'm sure they would love to chat with you more about this cool um thing called get pod",
    "start": "2049679",
    "end": "2056240"
  },
  {
    "text": "um well that'll do us do it for us today here at cncf webinars thank you again alvin and christian for",
    "start": "2056240",
    "end": "2062720"
  },
  {
    "text": "this presentation and thank you all for tuning in a reminder that the recording and slides will be posted later today to the cncf",
    "start": "2062720",
    "end": "2069440"
  },
  {
    "text": "webinars page stay safe out there continue to wear a mask and we'll talk soon",
    "start": "2069440",
    "end": "2076480"
  },
  {
    "text": "bye",
    "start": "2078280",
    "end": "2081280"
  }
]