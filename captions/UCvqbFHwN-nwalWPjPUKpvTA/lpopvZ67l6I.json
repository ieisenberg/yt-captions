[
  {
    "text": "okay so let's start I think we'll have a few slides at the beginning so even if people are a little bit late they will",
    "start": "240",
    "end": "5839"
  },
  {
    "text": "uh be on time for the for the workshop so uh hi everyone my name is uh Deno I",
    "start": "5839",
    "end": "14080"
  },
  {
    "text": "am uh director of the solution engineering team in um EMA at",
    "start": "14080",
    "end": "19880"
  },
  {
    "text": "solo.io um I'm going to present the workshop with Christian you want to introduce yourself yes hello everyone my",
    "start": "19880",
    "end": "26560"
  },
  {
    "text": "name is chrisan feta I'm working in Denny team in the European field",
    "start": "26560",
    "end": "31679"
  },
  {
    "text": "engineering team and yeah we were doing this uh workshop together and L is apologizing she's not",
    "start": "31679",
    "end": "38680"
  },
  {
    "text": "able to join but she worked uh with us uh to prepare the workshop so want to",
    "start": "38680",
    "end": "44559"
  },
  {
    "text": "say thank you to to her um what we are going to do uh as we as I said uh for",
    "start": "44559",
    "end": "51920"
  },
  {
    "text": "the people who are already there we are going to go through a few slid to introduce uh the main ebpf Concepts and",
    "start": "51920",
    "end": "59320"
  },
  {
    "text": "um then we are going to use instruct uh platform for doing the workshop so you",
    "start": "59320",
    "end": "64838"
  },
  {
    "text": "will all have access to this uh Workshop we are going to share again the link in uh in a few minutes perhaps we can do it",
    "start": "64839",
    "end": "72000"
  },
  {
    "text": "perhaps you can do it now if while I speak yeah um and please don't click on start because if you click on start it's",
    "start": "72000",
    "end": "78000"
  },
  {
    "text": "going to provision everything and then if you don't use it for some time it times out and you know when uh when we",
    "start": "78000",
    "end": "84479"
  },
  {
    "text": "are going to be ready to start then it will be uh you will have to do it again so uh the start should be quite quick",
    "start": "84479",
    "end": "91159"
  },
  {
    "text": "anyway uh as I was mentioning for people who are not there at that time uh we give you many options you can either",
    "start": "91159",
    "end": "97880"
  },
  {
    "text": "just watch us doing it or you can do it at the same time we do it or you can use",
    "start": "97880",
    "end": "103880"
  },
  {
    "text": "the same this link until Sunday evening if you want to do it later right so it's",
    "start": "103880",
    "end": "109479"
  },
  {
    "text": "uh it's quite flexible um so I think we can just uh get started and uh also we",
    "start": "109479",
    "end": "115880"
  },
  {
    "text": "want to try to make it interactive we have 90 minutes which is quite good amount of time to be able to take our",
    "start": "115880",
    "end": "122079"
  },
  {
    "text": "time and if you have any question uh you you can just um you know do go through",
    "start": "122079",
    "end": "128720"
  },
  {
    "text": "these microphones that there's one here and I think they may one one there as",
    "start": "128720",
    "end": "134000"
  },
  {
    "text": "well so if you have any question really feel free uh to uh raise your hand and",
    "start": "134000",
    "end": "141160"
  },
  {
    "text": "go to these uh microphones we'll try to make some breaks at some point just to",
    "start": "141160",
    "end": "146560"
  },
  {
    "text": "give you time to ask questions like perhaps at the end of the slide for example uh but yeah we we we will try to",
    "start": "146560",
    "end": "152920"
  },
  {
    "text": "make it interactive even if it's complicated with so many people in the room uh but yeah we we really want to",
    "start": "152920",
    "end": "159080"
  },
  {
    "text": "try to answer any question you you may have so Christian the floor is yours all",
    "start": "159080",
    "end": "166120"
  },
  {
    "text": "right so as D mentioned we have a few introductory slides at the very",
    "start": "166120",
    "end": "171760"
  },
  {
    "text": "beginning just to give you some high level overview of what evf is what you",
    "start": "171760",
    "end": "177000"
  },
  {
    "text": "can do with that what are the various use cases and and um just to understand",
    "start": "177000",
    "end": "182239"
  },
  {
    "text": "the technical detail the technical implementation and after that we will be using a open source uh project to make",
    "start": "182239",
    "end": "190680"
  },
  {
    "text": "it easier for you because evf can be still a bit scary to to some people so",
    "start": "190680",
    "end": "197599"
  },
  {
    "text": "uh does anyone know what ebpf is from the audience can I see some hands maybe if",
    "start": "197599",
    "end": "204879"
  },
  {
    "text": "you know what ebpf is ah okay so maybe it will be an intro session so it's like a beginner level um but it will be still",
    "start": "204879",
    "end": "213760"
  },
  {
    "text": "a quite interesting way of um developing troubleshooting and deploying uh ebpf",
    "start": "213760",
    "end": "221519"
  },
  {
    "text": "programs so what ebpf is most of you already know what ebpf is uh based on",
    "start": "221519",
    "end": "227120"
  },
  {
    "text": "the the hands that I could see but uh ebpf is basically a uh flexible way to",
    "start": "227120",
    "end": "233400"
  },
  {
    "text": "inject some custom logic into the kernel there are various use cases why this might be a good idea",
    "start": "233400",
    "end": "240360"
  },
  {
    "text": "and the previous approaches were not the greatest to extend the capabilities of",
    "start": "240360",
    "end": "245400"
  },
  {
    "text": "the kernel because one of the one of the use cases for ebpf is um obser royalty",
    "start": "245400",
    "end": "252400"
  },
  {
    "text": "which is nice you can do some custom things in a kernel but if you",
    "start": "252400",
    "end": "259000"
  },
  {
    "text": "are before ebpf it was pretty hard to add the custom logic rebuild your cardal",
    "start": "259000",
    "end": "265320"
  },
  {
    "text": "um use Cardinal modules for example and it was not something that would that you",
    "start": "265320",
    "end": "270479"
  },
  {
    "text": "could do easily in production your security and the other um platform teams",
    "start": "270479",
    "end": "277320"
  },
  {
    "text": "uh before ebpf were probably not happy about adding a custom cner models to to",
    "start": "277320",
    "end": "283120"
  },
  {
    "text": "the production machines because anything would happen so ebpf is is here to help",
    "start": "283120",
    "end": "289160"
  },
  {
    "text": "as I mentioned you can write little performant um programs that you can just",
    "start": "289160",
    "end": "295440"
  },
  {
    "text": "inject in the kernel and uh uh Leverage that logic that you injected um it's",
    "start": "295440",
    "end": "303320"
  },
  {
    "text": "also a safe way to inject some custom logic into the kernel because there's a verifier",
    "start": "303320",
    "end": "310039"
  },
  {
    "text": "so there's a process that needs to be the first step is to uh run the logic",
    "start": "310039",
    "end": "317600"
  },
  {
    "text": "through the verifier and if the verifier thinks that this code might break your kernel it won't load it which is quite",
    "start": "317600",
    "end": "324160"
  },
  {
    "text": "nice thing to do because otherwise your production machine uh might just die on the spot and it's also quite",
    "start": "324160",
    "end": "330880"
  },
  {
    "text": "performant uh and ebpf is using BPF as the underlying technology originally",
    "start": "330880",
    "end": "337160"
  },
  {
    "text": "that's the same technology that was used for for TCP dam for example but ebpf is a let's say more modern way to to do",
    "start": "337160",
    "end": "345319"
  },
  {
    "text": "similar things as I mentioned there are various use cases you can see the four",
    "start": "345319",
    "end": "350440"
  },
  {
    "text": "main categories here security why security is important if you have if you",
    "start": "350440",
    "end": "356720"
  },
  {
    "text": "have a way to observe what happening in the kernel the security team uh would be",
    "start": "356720",
    "end": "364120"
  },
  {
    "text": "really happy to have that capab have those capabilities and uh be able to do some additional auditing on top of the",
    "start": "364120",
    "end": "371560"
  },
  {
    "text": "previous uh methods that were available to them you can also do some tracing profiling you can extract some",
    "start": "371560",
    "end": "377240"
  },
  {
    "text": "information while the application is running you can uh correlate that information with other data that is",
    "start": "377240",
    "end": "384479"
  },
  {
    "text": "being extracted from the curent itself there are networking use cases for example uh celum is using ebpf to some",
    "start": "384479",
    "end": "392199"
  },
  {
    "text": "extent to solve some networking challenges and as I mentioned there's the obser category which is also quite",
    "start": "392199",
    "end": "399319"
  },
  {
    "text": "interesting because you can uh you can easily extract these",
    "start": "399319",
    "end": "404400"
  },
  {
    "text": "informations with the help of abpf during this Workshop we will be mostly focusing on the observability uh",
    "start": "404400",
    "end": "411199"
  },
  {
    "text": "use case if someone is not fully",
    "start": "411199",
    "end": "418520"
  },
  {
    "text": "um if if someone doesn't have the full picture how ibpf can work then I think this is the best picture uh that you can",
    "start": "418520",
    "end": "425199"
  },
  {
    "text": "use to understand what's happening and what are the actual components if we are talking about an actual evf program as",
    "start": "425199",
    "end": "432319"
  },
  {
    "text": "you can see there's a user program on the left and there's a kernel side of the things on the right you need both",
    "start": "432319",
    "end": "439360"
  },
  {
    "text": "because you need to have a way to inject that logic into the kernel the kernel",
    "start": "439360",
    "end": "445000"
  },
  {
    "text": "part on the right is the actually ebpf part that's the more exciting one",
    "start": "445000",
    "end": "450479"
  },
  {
    "text": "because that's where that's where the ebpf magic happens that's the place where you can uh specify your custom",
    "start": "450479",
    "end": "458599"
  },
  {
    "text": "logic that you want to inject in the kernel the user program the user user",
    "start": "458599",
    "end": "463840"
  },
  {
    "text": "space part is more like a thing that you have to do to be able to visualize the",
    "start": "463840",
    "end": "469800"
  },
  {
    "text": "information for example that is coming out of the kernel but it's it's not that exciting you have to uh write the code",
    "start": "469800",
    "end": "478360"
  },
  {
    "text": "to to visualize what's happening you have to handle user input that's like something that you have to do but it's",
    "start": "478360",
    "end": "484759"
  },
  {
    "text": "not that important um and this is why uh this talk is uh quite exciting because after",
    "start": "484759",
    "end": "492199"
  },
  {
    "text": "the talk you will have a quite nice and easy way to focus on the Kel space part",
    "start": "492199",
    "end": "499240"
  },
  {
    "text": "that is the more exciting one as I mentioned and we were basically using PRI to take care of the user program",
    "start": "499240",
    "end": "507240"
  },
  {
    "text": "part if you wish so let's talk a bit about what's happening here so you need",
    "start": "507240",
    "end": "514120"
  },
  {
    "text": "to load that custom um code into the Kel somehow this is that you are managing",
    "start": "514120",
    "end": "520320"
  },
  {
    "text": "from the user space program after that the Kel uh tries to verify the extra",
    "start": "520320",
    "end": "526880"
  },
  {
    "text": "program that you have and if it's verified and there's no issue with that",
    "start": "526880",
    "end": "532680"
  },
  {
    "text": "then uh you can we can move on to the actual uh BPF part that BPF uh rectangle",
    "start": "532680",
    "end": "538600"
  },
  {
    "text": "in the middle is basically the custom logic that you are injecting ebpf itself is event based that means that you need",
    "start": "538600",
    "end": "545600"
  },
  {
    "text": "to uh take a look at what kind of options you have in the kernel uh this can be K probes kernel",
    "start": "545600",
    "end": "552920"
  },
  {
    "text": "probes U probes Trace points these are various uh points in the kernel itself",
    "start": "552920",
    "end": "559480"
  },
  {
    "text": "and when uh the kernel reaches these probes then it will execute the custom",
    "start": "559480",
    "end": "564880"
  },
  {
    "text": "logic that you want to inject so this is why I said it's like even through",
    "start": "564880",
    "end": "569920"
  },
  {
    "text": "uh approach or architecture after that after your custom logic was ex executed uh",
    "start": "569920",
    "end": "577720"
  },
  {
    "text": "executed the output that that logic",
    "start": "577720",
    "end": "583480"
  },
  {
    "text": "uh um extracted from the current itself uh will be put into maps and those maps",
    "start": "583480",
    "end": "590600"
  },
  {
    "text": "are like the way to grab grab that data from the C side",
    "start": "590600",
    "end": "597240"
  },
  {
    "text": "and uh surface that on the on the user space side you put all these events and",
    "start": "597240",
    "end": "603760"
  },
  {
    "text": "data that you extracted from the CER itself into the map and you are basically just reading from that map",
    "start": "603760",
    "end": "609399"
  },
  {
    "text": "from user space after that the data is",
    "start": "609399",
    "end": "613959"
  },
  {
    "text": "visualized um and one is the the actual project that we'll be using uh",
    "start": "615240",
    "end": "620560"
  },
  {
    "text": "throughout the workshop but before that we will also show you the traditional original way of interacting with uh ebpf",
    "start": "620560",
    "end": "628360"
  },
  {
    "text": "programs the these are the programs that were mostly mainly created by by Brandon",
    "start": "628360",
    "end": "633680"
  },
  {
    "text": "Greg while he was at uh still Netflix um these are the de facto standard uh ebpf",
    "start": "633680",
    "end": "641120"
  },
  {
    "text": "programs that most of the observ related um ebpf tools are using behind the",
    "start": "641120",
    "end": "646839"
  },
  {
    "text": "scenes and what we'll be doing is that we are taking a look at the existing ecosystem that is in that Upstream uh",
    "start": "646839",
    "end": "653680"
  },
  {
    "text": "GitHub repository and we'll be using bumblebee to package it as a oci image",
    "start": "653680",
    "end": "661200"
  },
  {
    "text": "it's like a Docker image if you wish uh you could push that into local or remote",
    "start": "661200",
    "end": "668560"
  },
  {
    "text": "repositories so it's a quite nice and Cloud native way to to consume these little BPF programs and as I mentioned",
    "start": "668560",
    "end": "676639"
  },
  {
    "text": "you don't even need to think about the actual user space responsibilities and",
    "start": "676639",
    "end": "682399"
  },
  {
    "text": "to tasks because you can with bumblebee you can autogenerate PRI Matrix from",
    "start": "682399",
    "end": "689360"
  },
  {
    "text": "these Kel events which is quite nice because in a cloud native uh infrastructure you are most probably",
    "start": "689360",
    "end": "696399"
  },
  {
    "text": "already running PRS so I think that was the intro that",
    "start": "696399",
    "end": "702320"
  },
  {
    "text": "we have um this is the link that you can use to access the instruct platform that",
    "start": "702320",
    "end": "707880"
  },
  {
    "text": "we will be using and for the first part I will hand it over to to",
    "start": "707880",
    "end": "714279"
  },
  {
    "text": "Denny yeah I will wait a few seconds so that you can load in environment if needed so yeah if you now can uh all go",
    "start": "715200",
    "end": "722880"
  },
  {
    "text": "to this uh link and uh I'll just keep it you know few more seconds and I'm going",
    "start": "722880",
    "end": "729440"
  },
  {
    "text": "to switch to the uh instruct uh interface but now you can click on the",
    "start": "729440",
    "end": "735839"
  },
  {
    "text": "on the play button to start the workshop so what is going to happen behind the",
    "start": "735839",
    "end": "741000"
  },
  {
    "text": "scene uh is going to provision um a virtual machine for each of you and uh",
    "start": "741000",
    "end": "747560"
  },
  {
    "text": "in this virtual machine we are going to to uh play with ebpf and we are going to",
    "start": "747560",
    "end": "754480"
  },
  {
    "text": "deploy KU cluster build a very simple observability tool from scratch to",
    "start": "754480",
    "end": "761639"
  },
  {
    "text": "visualize the traffic in your Kuban cluster so you have like a practical example and then uh Christian is also",
    "start": "761639",
    "end": "767720"
  },
  {
    "text": "going to go through some more advanced uh use cases uh showing you that you can",
    "start": "767720",
    "end": "773160"
  },
  {
    "text": "use ebpf for networking use cases but also for you know tracking file open or",
    "start": "773160",
    "end": "778839"
  },
  {
    "text": "what ever you want to to intercept in your Kel so I'm going to now uh exit",
    "start": "778839",
    "end": "787079"
  },
  {
    "text": "this and go to the instruct lab here and uh after you",
    "start": "787079",
    "end": "793720"
  },
  {
    "text": "click on the start button it should take um like 2 minutes perhaps not more",
    "start": "793720",
    "end": "801040"
  },
  {
    "text": "because it's just like a pro provisioning of a VM um obviously we are a lot of people but you know instruct is",
    "start": "801040",
    "end": "808199"
  },
  {
    "text": "quite robust we already did like a workshop for 500 people or more so that",
    "start": "808199",
    "end": "814040"
  },
  {
    "text": "should be fine but who knows right like when when we try to do like 500",
    "start": "814040",
    "end": "819240"
  },
  {
    "text": "provisioning in parallel uh it can be a little bit challenging so I'm just going",
    "start": "819240",
    "end": "825360"
  },
  {
    "text": "to wait for a minute uh in one minute I'm going to ask you to raise your hand",
    "start": "825360",
    "end": "830639"
  },
  {
    "text": "if you have everything ready so we have an idea but you know if everything seems to work well and then we are going to to",
    "start": "830639",
    "end": "837680"
  },
  {
    "text": "get started",
    "start": "837680",
    "end": "841040"
  },
  {
    "text": "can you see the screen properly by the way or should we try to make it a bit uh",
    "start": "857320",
    "end": "863720"
  },
  {
    "text": "bigger looks good especially on the left side it can be perhaps a little bit small right yeah let me try to make it",
    "start": "867279",
    "end": "875880"
  },
  {
    "text": "bigger there's some text on the right but that's more like for you when you are doing it on your",
    "start": "877639",
    "end": "884240"
  },
  {
    "text": "own if you are in the room and uh listening to us then you don't really",
    "start": "884240",
    "end": "889720"
  },
  {
    "text": "need to read the whole thing you can just uh focus on the terminal on the left so looks",
    "start": "889720",
    "end": "896959"
  },
  {
    "text": "better cool thank you",
    "start": "896959",
    "end": "901040"
  },
  {
    "text": "so let's see where we are now like can you all raise your hand if it's ready on your",
    "start": "902040",
    "end": "908399"
  },
  {
    "text": "side that looks quite good so I think uh we are probably ready to go",
    "start": "908480",
    "end": "914800"
  },
  {
    "text": "perfect so for people who are like everyone probably know in this room like",
    "start": "914800",
    "end": "920040"
  },
  {
    "text": "this uh Kelsey uh what he did when he did like this kubernetes the Hardway we",
    "start": "920040",
    "end": "926160"
  },
  {
    "text": "are kind of trying to do the ebpf the Hardway first and then we are going to show you how to",
    "start": "926160",
    "end": "931360"
  },
  {
    "text": "make it like a little bit simpler right and uh we'll start with a little bit of History even so um when you you can you",
    "start": "931360",
    "end": "941480"
  },
  {
    "text": "can read this text later but uh it's basically a summary of what Christian",
    "start": "941480",
    "end": "947399"
  },
  {
    "text": "said before right so if you forgot about what Christian said and you want to do the lab again in the weekend then you",
    "start": "947399",
    "end": "953639"
  },
  {
    "text": "can read that paragraph and you know get the same uh explanation",
    "start": "953639",
    "end": "959639"
  },
  {
    "text": "what we are going to do here first is that we are going to show you how to do",
    "start": "959639",
    "end": "965120"
  },
  {
    "text": "um compile and load uh ebpf program without bumblebee right uh we are going",
    "start": "965120",
    "end": "972160"
  },
  {
    "text": "to show you how people were doing that at the beginning with something that is called uh BCC and then uh we're going to",
    "start": "972160",
    "end": "981079"
  },
  {
    "text": "give you how people do it generally today with Le BPF and we will show you",
    "start": "981079",
    "end": "987279"
  },
  {
    "text": "how we can do it with uh with with bumblebee so the first approach that uh was available was like using uh BCC",
    "start": "987279",
    "end": "995560"
  },
  {
    "text": "which um was like U something that was uh using python so it looked really a",
    "start": "995560",
    "end": "1002480"
  },
  {
    "text": "good idea because oh python is like not too complicated to use and a lot of",
    "start": "1002480",
    "end": "1008000"
  },
  {
    "text": "people are comfortable using it uh the challenge is that um if you remember",
    "start": "1008000",
    "end": "1014000"
  },
  {
    "text": "what Christian explained you have this user space program and you have the Kel",
    "start": "1014000",
    "end": "1019880"
  },
  {
    "text": "program and basically the user Space Program contain the Kel program that it",
    "start": "1019880",
    "end": "1026199"
  },
  {
    "text": "has to load and uh if you look at the the the BCC program in Python you will",
    "start": "1026199",
    "end": "1033600"
  },
  {
    "text": "see that uh you have basically uh a string in the middle that",
    "start": "1033600",
    "end": "1040280"
  },
  {
    "text": "represent the kernel program I want to load which is in um in C right so you",
    "start": "1040280",
    "end": "1048480"
  },
  {
    "text": "have a program but you have to put a string that represent your C program in the middle and this is where you have",
    "start": "1048480",
    "end": "1053600"
  },
  {
    "text": "the most important logic so having the rest in Python was not helping so much",
    "start": "1053600",
    "end": "1058720"
  },
  {
    "text": "and it was also a little bit confusing to do this that way right to be able to check if the code is valid and imagine",
    "start": "1058720",
    "end": "1064240"
  },
  {
    "text": "if you want to use like vs code and all these things right that's that's not ideal and the other problem is that um",
    "start": "1064240",
    "end": "1071720"
  },
  {
    "text": "when you were loading that um program you add some dependency in your kernel",
    "start": "1071720",
    "end": "1077840"
  },
  {
    "text": "especially you needed to have the Linux kernel headers which is definitely not",
    "start": "1077840",
    "end": "1083679"
  },
  {
    "text": "something you want to have uh that's not kind of the package you you want to put in your production clusters right so",
    "start": "1083679",
    "end": "1090720"
  },
  {
    "text": "that was quite a nice approach to experiment with it and to play with it but definitely not to have like a a",
    "start": "1090720",
    "end": "1098280"
  },
  {
    "text": "portable binary that you can deploy anywhere right so we are going to just",
    "start": "1098280",
    "end": "1103480"
  },
  {
    "text": "start with this just to see how it looks like so we have this program and you see all the the every time you have a",
    "start": "1103480",
    "end": "1110400"
  },
  {
    "text": "command that use this data directory you can also go to the files here and in the",
    "start": "1110400",
    "end": "1116200"
  },
  {
    "text": "data directory you can see the uh we are using the BCC here so it's a little bit",
    "start": "1116200",
    "end": "1122480"
  },
  {
    "text": "nicer you know to to see what the program is doing um that way right but",
    "start": "1122480",
    "end": "1128559"
  },
  {
    "text": "if I just show a little bit here you see this C program here that is attaching to",
    "start": "1128559",
    "end": "1135600"
  },
  {
    "text": "this uh prob here for being being executed every every time there is this",
    "start": "1135600",
    "end": "1140919"
  },
  {
    "text": "TCP uh connect and uh does different things and then what we see here is that",
    "start": "1140919",
    "end": "1147640"
  },
  {
    "text": "the logic of the Python program which is that I want to load this uh program that",
    "start": "1147640",
    "end": "1155400"
  },
  {
    "text": "is the C string basically and then uh I want to continuously read messages that",
    "start": "1155400",
    "end": "1162600"
  },
  {
    "text": "are coming from this map so you remember chisan spoke about this map that um is in the Kel that the the user program can",
    "start": "1162600",
    "end": "1169960"
  },
  {
    "text": "read from in fact in the use cases we are going to show even the one you do at",
    "start": "1169960",
    "end": "1175000"
  },
  {
    "text": "the end Christian you don't do any right to the map it's just reading in the cases we do right yes in in the obser to",
    "start": "1175000",
    "end": "1181559"
  },
  {
    "text": "use case you most of the time just reading from that information because we are just interested in what can you get out of the kernel uh what's happening",
    "start": "1181559",
    "end": "1188720"
  },
  {
    "text": "with those events that you are catching with your custom logic um writing into",
    "start": "1188720",
    "end": "1194440"
  },
  {
    "text": "this is is not something that is pretty common for the observative Cas EX exctly for this use case is not common but it's",
    "start": "1194440",
    "end": "1200960"
  },
  {
    "text": "kind of a way also you can drive a change of behavior right you have your kernel program running you can write",
    "start": "1200960",
    "end": "1208559"
  },
  {
    "text": "something in a map from the user program so that the kernel logic reads what you have in the map and say oh the user",
    "start": "1208559",
    "end": "1215720"
  },
  {
    "text": "program tells me that now I have to to to to do something different you know so it's also a way to it's it's the it's a",
    "start": "1215720",
    "end": "1221760"
  },
  {
    "text": "two-way interaction if you want um and then it just print what it gets",
    "start": "1221760",
    "end": "1227360"
  },
  {
    "text": "basically so it's it's pretty basic um so if I go here uh you have this uh",
    "start": "1227360",
    "end": "1234679"
  },
  {
    "text": "generally speaking you have this play button here uh something they have added after we build the workshop initially so",
    "start": "1234679",
    "end": "1242280"
  },
  {
    "text": "we've tried to put it uh everywhere but some of some of the instruction you still need to copy and paste but you",
    "start": "1242280",
    "end": "1247640"
  },
  {
    "text": "will see most of the time you you will just have a play button it's a lot more convenient um so here it's just doing",
    "start": "1247640",
    "end": "1254960"
  },
  {
    "text": "everything I described and every time there is like a network communication",
    "start": "1254960",
    "end": "1260280"
  },
  {
    "text": "this TCP connect is happening is just deing the the source and destination address okay so pretty basic uh",
    "start": "1260280",
    "end": "1268600"
  },
  {
    "text": "example so now let's speak about the second uh way and uh in the open source",
    "start": "1268600",
    "end": "1276159"
  },
  {
    "text": "Community you you know you generally have multiple project that compet one versus another and so on but what's",
    "start": "1276159",
    "end": "1282559"
  },
  {
    "text": "quite interesting when you start to learn about ebpf and you start to look at okay BCC and BPF and so on is the",
    "start": "1282559",
    "end": "1290240"
  },
  {
    "text": "first time I've seen that these two very very different options they are in the",
    "start": "1290240",
    "end": "1295559"
  },
  {
    "text": "same repo basically so in the same repository you have the BCC original",
    "start": "1295559",
    "end": "1301720"
  },
  {
    "text": "approach and the Le BPF uh approach and then the libpf approach is um basically",
    "start": "1301720",
    "end": "1309279"
  },
  {
    "text": "using uh only C so you have the user program in C and the KET program in C um",
    "start": "1309279",
    "end": "1317440"
  },
  {
    "text": "and uh the other difference is that it's more portable so you don't have like uh",
    "start": "1317440",
    "end": "1322640"
  },
  {
    "text": "this need of having these um um Kel headers deployed uh in the in the",
    "start": "1322640",
    "end": "1329120"
  },
  {
    "text": "machine in the Kel uh in the operating system sorry um so that makes it very",
    "start": "1329120",
    "end": "1335360"
  },
  {
    "text": "portable basically you can uh compile it and then you can just like uh copy the",
    "start": "1335360",
    "end": "1342559"
  },
  {
    "text": "binary in a in a VM or in a server and then you can you can start to to use it and to run it and you'll see also in",
    "start": "1342559",
    "end": "1349720"
  },
  {
    "text": "bumblebee that we we've worked on this portability and making it like a little bit easier than just making copy or SSH",
    "start": "1349720",
    "end": "1358159"
  },
  {
    "text": "or these kind of things so again uh you can go to this um file tab here and you",
    "start": "1358159",
    "end": "1365720"
  },
  {
    "text": "can see the different uh files here and you can see two main ones right uh you",
    "start": "1365720",
    "end": "1372520"
  },
  {
    "text": "have the one that's called BPF uh. C that is basically um your Kel program",
    "start": "1372520",
    "end": "1380919"
  },
  {
    "text": "and then you have the one that is called just C here which is your user space",
    "start": "1380919",
    "end": "1386880"
  },
  {
    "text": "program right so you see the user space program is really like I want to load my",
    "start": "1386880",
    "end": "1392559"
  },
  {
    "text": "Kel program and I have some error and Ling if I cannot load it and then as",
    "start": "1392559",
    "end": "1397600"
  },
  {
    "text": "soon as it's loaded I'll always execute this print uh count function and this",
    "start": "1397600",
    "end": "1404039"
  },
  {
    "text": "functions basically is again reading the data from the",
    "start": "1404039",
    "end": "1409159"
  },
  {
    "text": "map uh in the kernel to display this information um the kernel side of it uh",
    "start": "1409159",
    "end": "1416400"
  },
  {
    "text": "what it does is uh having this um um",
    "start": "1416400",
    "end": "1421720"
  },
  {
    "text": "attachment to different probs right so it says that I want to attach uh to this",
    "start": "1421720",
    "end": "1427679"
  },
  {
    "text": "uh TCP uh V4 connect event I want to attach this uh enter TCP connect um",
    "start": "1427679",
    "end": "1434919"
  },
  {
    "text": "function and uh you can see this function which is a little bit here and just like",
    "start": "1434919",
    "end": "1443400"
  },
  {
    "text": "you get some uh information and some update about the map this famous map that can read by the user program and",
    "start": "1443400",
    "end": "1450960"
  },
  {
    "text": "you see here that we Define these Maps right so for example here in that",
    "start": "1450960",
    "end": "1456000"
  },
  {
    "text": "specific case we have this map that is of a type Ash and we are not going to go",
    "start": "1456000",
    "end": "1462480"
  },
  {
    "text": "through all the details of this but uh in the text here you will see more information about uh the different",
    "start": "1462480",
    "end": "1469080"
  },
  {
    "text": "options you have this option that's called like a ring buffer and the other one that is like ash map um they",
    "start": "1469080",
    "end": "1476159"
  },
  {
    "text": "depending on your use case you choose one or the other and uh here what we do is that we just say that we have this uh",
    "start": "1476159",
    "end": "1484120"
  },
  {
    "text": "key uh on this map and a value and the value is the key the value is just a um",
    "start": "1484120",
    "end": "1491880"
  },
  {
    "text": "a number but the key is the struct which is this struct here right so basically",
    "start": "1491880",
    "end": "1497960"
  },
  {
    "text": "what has means is that the key is going to contain my source and destination IP",
    "start": "1497960",
    "end": "1503399"
  },
  {
    "text": "address and my value is going to be a counter and uh if I um go back here and",
    "start": "1503399",
    "end": "1513720"
  },
  {
    "text": "if I execute this command here you see just a binary",
    "start": "1513720",
    "end": "1520720"
  },
  {
    "text": "right like I say it's very portable as soon as you have uh compiled it you can just copy this binary in another machine",
    "start": "1520720",
    "end": "1528120"
  },
  {
    "text": "and and uh you just run it it's just one binary because this binary is the source",
    "start": "1528120",
    "end": "1534000"
  },
  {
    "text": "program that is going to its content itself the Kel program that it needs to load basically so I run this oh I'm not",
    "start": "1534000",
    "end": "1542000"
  },
  {
    "text": "in the right uh no oh yeah we I think I thought we compiled it but we are going to do it now us a few steps so we just",
    "start": "1542000",
    "end": "1549320"
  },
  {
    "text": "copy the files you see the play button it's a lot better and uh then we do this",
    "start": "1549320",
    "end": "1555080"
  },
  {
    "text": "Mech TCP connect that's what is going to uh compile uh this program so that we",
    "start": "1555080",
    "end": "1561559"
  },
  {
    "text": "get this single binary and after that we'll be able to to run it another difference between the",
    "start": "1561559",
    "end": "1569200"
  },
  {
    "text": "traditional BCC and the libpf implementation is this performance we",
    "start": "1569200",
    "end": "1574360"
  },
  {
    "text": "won't be doing that now but when you are doing the same Lab at home what you can do is that you you you have two",
    "start": "1574360",
    "end": "1581520"
  },
  {
    "text": "terminals here so you can start the traditional BCC program at the same time",
    "start": "1581520",
    "end": "1586720"
  },
  {
    "text": "when you start the the TCP that we are building here and if you compare the CP",
    "start": "1586720",
    "end": "1592360"
  },
  {
    "text": "utilization between the two processes you will see that the the the old one the BCC one will consume uh much higher",
    "start": "1592360",
    "end": "1600080"
  },
  {
    "text": "CPU um because it has to uh it's it's like it's not a runtime execution it has",
    "start": "1600080",
    "end": "1607640"
  },
  {
    "text": "to compile everything at once and in especially when you when you start the program you will see an extremely high",
    "start": "1607640",
    "end": "1614240"
  },
  {
    "text": "CPU usage and that's another reason why the the LPF based tool is better because",
    "start": "1614240",
    "end": "1619679"
  },
  {
    "text": "on a production server you most probably don't want to compile something that will consume",
    "start": "1619679",
    "end": "1626080"
  },
  {
    "text": "that that much CPU is each because you have actual business applications running there yeah yeah thanks it's uh",
    "start": "1626080",
    "end": "1632880"
  },
  {
    "text": "really interesting to add uh add that right so again like why nobody's using",
    "start": "1632880",
    "end": "1638520"
  },
  {
    "text": "Le BP uh BCC in uh in production um so you see the output is what we expect the",
    "start": "1638520",
    "end": "1645080"
  },
  {
    "text": "only difference from the other program we had before is that you see a counter right instead of just displaying the uh",
    "start": "1645080",
    "end": "1652039"
  },
  {
    "text": "source and and Target all the time right we just uh always indicate how many um",
    "start": "1652039",
    "end": "1658120"
  },
  {
    "text": "occurrences we have uh from uh from that um so that's",
    "start": "1658120",
    "end": "1663960"
  },
  {
    "text": "basically uh ending this section which is like uh ebpf the hardw which is not",
    "start": "1663960",
    "end": "1671480"
  },
  {
    "text": "so hard right I mean there are some technologies that are more difficult to approach right what is very difficult",
    "start": "1671480",
    "end": "1677799"
  },
  {
    "text": "obviously is writing this C code right it's like I would say if I ask in the",
    "start": "1677799",
    "end": "1683720"
  },
  {
    "text": "room like how many people can write a program in",
    "start": "1683720",
    "end": "1688960"
  },
  {
    "text": "Python okay how many people now can write a program in",
    "start": "1689799",
    "end": "1695240"
  },
  {
    "text": "C a lot less but still I have to admit more than what I uh generally see so",
    "start": "1695559",
    "end": "1702080"
  },
  {
    "text": "it's uh it's quite interesting so we are going to do the same with uh",
    "start": "1702080",
    "end": "1708880"
  },
  {
    "text": "Bumblebee and perhap one thing I didn't show you really clearly is that also the program itself you know the C program",
    "start": "1708880",
    "end": "1716120"
  },
  {
    "text": "that correspond to the kernel in BCC and BPF has nothing to do they are",
    "start": "1716120",
    "end": "1721640"
  },
  {
    "text": "completely different syntax it was not the same code right it's a the code from BCC was using a completely different",
    "start": "1721640",
    "end": "1729320"
  },
  {
    "text": "approach than the one from libpf I think I can still see it here right so if I",
    "start": "1729320",
    "end": "1734880"
  },
  {
    "text": "look at the BCC logic this C program here uh you can see uh",
    "start": "1734880",
    "end": "1742919"
  },
  {
    "text": "the the the way the map is is defined is completely different than the way it's",
    "start": "1742919",
    "end": "1748080"
  },
  {
    "text": "in uh libpf uh all this logic here is completely different is using some other",
    "start": "1748080",
    "end": "1755480"
  },
  {
    "text": "uh libraries to do it compared to the way it works with u Li BPF where you you",
    "start": "1755480",
    "end": "1762360"
  },
  {
    "text": "have this multil lines for uh describing the the maps and all the code is",
    "start": "1762360",
    "end": "1769080"
  },
  {
    "text": "completely different so the idea of Bumblebee is is not to",
    "start": "1769080",
    "end": "1775399"
  },
  {
    "text": "come with a third option right is not to come with a third way to develop that is",
    "start": "1775399",
    "end": "1780640"
  },
  {
    "text": "really to simplify the way you do it with the BCC with the Le BPF approach",
    "start": "1780640",
    "end": "1787600"
  },
  {
    "text": "basically so we are not going to touch the code much we are going to use some naming convention to slightly adjust the",
    "start": "1787600",
    "end": "1796279"
  },
  {
    "text": "code that we have used before but really slightly but the idea is to really help you get started uh very quickly without",
    "start": "1796279",
    "end": "1804279"
  },
  {
    "text": "having to worry about any dependency any other tool to be able to",
    "start": "1804279",
    "end": "1810720"
  },
  {
    "text": "compile the the C code and being able also to help you to manage the life",
    "start": "1810720",
    "end": "1816320"
  },
  {
    "text": "cycle of it so you can deploy uh bumblebee that way oh I have to go to",
    "start": "1816320",
    "end": "1823320"
  },
  {
    "text": "the terminal here would be better and that's open source project we",
    "start": "1823320",
    "end": "1828880"
  },
  {
    "text": "have launched some time ago and um the goal was really to again like make it",
    "start": "1828880",
    "end": "1834519"
  },
  {
    "text": "simpler to start uh um playing with ebpf and adopting it but uh our goal is",
    "start": "1834519",
    "end": "1841960"
  },
  {
    "text": "really to have as many people as possible interested to make this project",
    "start": "1841960",
    "end": "1847960"
  },
  {
    "text": "like uh a living project with uh you know many updates and so on right right",
    "start": "1847960",
    "end": "1853519"
  },
  {
    "text": "now it has been really just us and a few a few other companies but we you would be happy to have a lot more contribution",
    "start": "1853519",
    "end": "1860480"
  },
  {
    "text": "in the project so when you do this B init that's the first thing we do is that if you if it's your really first",
    "start": "1860480",
    "end": "1867679"
  },
  {
    "text": "ebpf program instead of starting with like a a blank page you can just run",
    "start": "1867679",
    "end": "1873720"
  },
  {
    "text": "this B in it common it's going to ask you a few question uh like is it like",
    "start": "1873720",
    "end": "1878880"
  },
  {
    "text": "for uh a network use case or is it like a file system use case if it's a network",
    "start": "1878880",
    "end": "1884760"
  },
  {
    "text": "use case uh then uh what type of map do you want to use right so as I say you",
    "start": "1884760",
    "end": "1890360"
  },
  {
    "text": "have this uh ring buffer and Ash map and um we I don't know do you want to speak",
    "start": "1890360",
    "end": "1896840"
  },
  {
    "text": "about like the difference quickly uh yeah I think we can we can do that at the later stage because in the last lab",
    "start": "1896840",
    "end": "1904200"
  },
  {
    "text": "I will have I will go through an actual example of what kind of changes you have to make to take an existing code and",
    "start": "1904200",
    "end": "1910880"
  },
  {
    "text": "Port that into bumbleb and I think that's yeah that's that's a better way to to uh perfect yeah I don't want to",
    "start": "1910880",
    "end": "1916880"
  },
  {
    "text": "confuse people at that stage as well so yeah it's good make it easy so here we choose a ash map and then you can decide",
    "start": "1916880",
    "end": "1923960"
  },
  {
    "text": "do you want to just like print the value as they come or do you want to have a type of counter or go and you will see",
    "start": "1923960",
    "end": "1931159"
  },
  {
    "text": "why as well because we are going to show you some nice output that we can get from the program and then you can decide",
    "start": "1931159",
    "end": "1938760"
  },
  {
    "text": "how you want to call the program so here we just like call it like prop [Music]",
    "start": "1938760",
    "end": "1944080"
  },
  {
    "text": "Doc and uh that's a fully functional program that looks like this here and it",
    "start": "1944080",
    "end": "1950840"
  },
  {
    "text": "doesn't do much but the goal is just to allow you to get started right so that",
    "start": "1950840",
    "end": "1957440"
  },
  {
    "text": "uh you you have like already uh an example uh to start with right so we're",
    "start": "1957440",
    "end": "1962600"
  },
  {
    "text": "not going to compile this one it doesn't really make so much sense it's just to show you that we have this like init",
    "start": "1962600",
    "end": "1968480"
  },
  {
    "text": "command to get some skeleton uh ready for you um what we are going to do",
    "start": "1968480",
    "end": "1973600"
  },
  {
    "text": "instead we are going to uh go back to this TCP connect example that was the program we have used in the in the",
    "start": "1973600",
    "end": "1979840"
  },
  {
    "text": "previous lab with Le BPF and we are going to do a small difference you",
    "start": "1979840",
    "end": "1984880"
  },
  {
    "text": "remember I said the goal of the project is not to give a third option the goal",
    "start": "1984880",
    "end": "1990240"
  },
  {
    "text": "of the of the project is really to uh make it simpler to use Le BPF if you",
    "start": "1990240",
    "end": "1995600"
  },
  {
    "text": "wish right so what we want we want we don't want to modify the code we want to do like the modification as small as",
    "start": "1995600",
    "end": "2001840"
  },
  {
    "text": "possible and the only thing we need to do in that case is uh basically to add a",
    "start": "2001840",
    "end": "2009399"
  },
  {
    "text": "naming convention to the map so you see if I do a diff between the program that",
    "start": "2009399",
    "end": "2016519"
  },
  {
    "text": "we have used just before and the pr we are going to use now the only difference",
    "start": "2016519",
    "end": "2021880"
  },
  {
    "text": "is that we have um added here this dot counter as a suffix of uh the dot maps",
    "start": "2021880",
    "end": "2030840"
  },
  {
    "text": "and that's enough for bumblebe to know that oh this map I want it to act as a",
    "start": "2030840",
    "end": "2037039"
  },
  {
    "text": "counter and you will see that uh we are going to emit some matrics and these",
    "start": "2037039",
    "end": "2042240"
  },
  {
    "text": "matrics will be emitted with the right type because of this uh uh additional",
    "start": "2042240",
    "end": "2048158"
  },
  {
    "text": "information we have added but the program the everything else stay exactly the",
    "start": "2048159",
    "end": "2054320"
  },
  {
    "text": "same so if I copy this file here and I",
    "start": "2054320",
    "end": "2059760"
  },
  {
    "text": "want to build it the idea was really to take the docker experience right like uh",
    "start": "2059760",
    "end": "2065398"
  },
  {
    "text": "nothing is better than uh this this like Docker build Docker run you know all",
    "start": "2065399",
    "end": "2071040"
  },
  {
    "text": "these things like Docker push right that's why people love Docker right it's like this user experience so the goal",
    "start": "2071040",
    "end": "2077000"
  },
  {
    "text": "was kind of trying to do the same so here we do not a Docker build but we do a b build and uh the first thing that is",
    "start": "2077000",
    "end": "2085240"
  },
  {
    "text": "nice with this uh command is that you don't need any dependency in your machine because it is going to get a",
    "start": "2085240",
    "end": "2091960"
  },
  {
    "text": "Docker image behind the scene that has all the prerequisites to compile the",
    "start": "2091960",
    "end": "2098760"
  },
  {
    "text": "program so uh the first time you do it it takes like perhaps 30 seconds to",
    "start": "2098760",
    "end": "2104440"
  },
  {
    "text": "compile the the the image but the second time you do it is very quick because the",
    "start": "2104440",
    "end": "2109960"
  },
  {
    "text": "doc image that is used with all these dependencies to compile the the code is",
    "start": "2109960",
    "end": "2116040"
  },
  {
    "text": "already in your in your laptop right so the second time you you you run this command it takes like three seconds",
    "start": "2116040",
    "end": "2121760"
  },
  {
    "text": "perhaps like four seconds and uh the other thing that is interesting is that we when we build it uh we are um",
    "start": "2121760",
    "end": "2130800"
  },
  {
    "text": "generating an output which is um in a in a directory I think it's even like a",
    "start": "2130800",
    "end": "2136720"
  },
  {
    "text": "hidden directory so you can get the you can get the binary if you want to just execute it but what we do is also we uh",
    "start": "2136720",
    "end": "2144599"
  },
  {
    "text": "create as a oci image so that we can use the portability of the O oci images I I",
    "start": "2144599",
    "end": "2151680"
  },
  {
    "text": "I'm pretty sure everyone knows what is oci image but that's kind of the same format that is used by uh Docker right",
    "start": "2151680",
    "end": "2159119"
  },
  {
    "text": "so um it's it's a way for us to again not only help uh compiling but also help",
    "start": "2159119",
    "end": "2167599"
  },
  {
    "text": "Distributing the program that has been built so because I have this oci image",
    "start": "2167599",
    "end": "2173599"
  },
  {
    "text": "now I can do a Docker push to uh this local uh 5,000 and if I do uh look at my",
    "start": "2173599",
    "end": "2184040"
  },
  {
    "text": "Docker engine here I can see that this is a registry and",
    "start": "2184040",
    "end": "2191040"
  },
  {
    "text": "basically this is just the standard open source Docker registry right because I have a do because I have an oci image I",
    "start": "2191040",
    "end": "2197319"
  },
  {
    "text": "can just push it to any oci compliant uh registry basically so I do have I I have",
    "start": "2197319",
    "end": "2205440"
  },
  {
    "text": "built it then I have pushed it now obviously I want to run it right so",
    "start": "2205440",
    "end": "2212359"
  },
  {
    "text": "that's the last uh the last um option that you generally use when you you do",
    "start": "2212359",
    "end": "2218480"
  },
  {
    "text": "something with Docker right so same idea I do a b run and I give the image name",
    "start": "2218480",
    "end": "2227440"
  },
  {
    "text": "right and you have a UI kind of UI not a UI but like you know what I mean right",
    "start": "2227440",
    "end": "2234359"
  },
  {
    "text": "you have like a an output that is a little bit nicer that is not repeating",
    "start": "2234359",
    "end": "2239720"
  },
  {
    "text": "itself and just like update the value instead of uh always uh uh adding the",
    "start": "2239720",
    "end": "2246000"
  },
  {
    "text": "new line again and again but that's obviously the goal is not to launch a",
    "start": "2246000",
    "end": "2251480"
  },
  {
    "text": "program and to watch this interface right I mean some use cases why not",
    "start": "2251480",
    "end": "2256680"
  },
  {
    "text": "right you want to to create a debugging tool you may be happy to see the output",
    "start": "2256680",
    "end": "2261760"
  },
  {
    "text": "here right but uh what we believe is a lot more powerful when you load the",
    "start": "2261760",
    "end": "2267800"
  },
  {
    "text": "program is to emit some metrics so that you can get this information here uh",
    "start": "2267800",
    "end": "2275680"
  },
  {
    "text": "provided as promus metrics so if I go to the second Tab and I run this Cur",
    "start": "2275680",
    "end": "2281960"
  },
  {
    "text": "command then you can see here that I have uh at the beginning I think you see",
    "start": "2281960",
    "end": "2287800"
  },
  {
    "text": "here I have this uh um matric this matric that basically show uh the source",
    "start": "2287800",
    "end": "2294720"
  },
  {
    "text": "address and destination address and the number of uh occurrences basically so",
    "start": "2294720",
    "end": "2300200"
  },
  {
    "text": "the same thing I see here I get that as metrix and because they are promo metric",
    "start": "2300200",
    "end": "2305359"
  },
  {
    "text": "then that can enable a lot of use cases right right because I can uh scrap these metrics store them in promus can build a",
    "start": "2305359",
    "end": "2313800"
  },
  {
    "text": "graph a dashboard on top of that you know so in the observability side it opens a lot of uh",
    "start": "2313800",
    "end": "2320640"
  },
  {
    "text": "different use cases so that's it for the overview of",
    "start": "2320640",
    "end": "2325880"
  },
  {
    "text": "Bumblebee and we are going to now uh deploy AES cluster and try to show you",
    "start": "2325880",
    "end": "2332079"
  },
  {
    "text": "how we can use such a program to show you what are the different communication",
    "start": "2332079",
    "end": "2338040"
  },
  {
    "text": "that are happening u in your cluster maybe before I do that any",
    "start": "2338040",
    "end": "2344720"
  },
  {
    "text": "question sounds good don't don't hesitate if you have a question raise your hand and uh we'll make a a small",
    "start": "2348000",
    "end": "2356319"
  },
  {
    "text": "break in the presentation to to try to answer it oh that might be a question",
    "start": "2356319",
    "end": "2361880"
  },
  {
    "text": "there yeah you have a microphone just here yeah",
    "start": "2361880",
    "end": "2369359"
  },
  {
    "text": "thank you we always need the ice breaker the first one to ask a question oh we cannot hear you can",
    "start": "2370680",
    "end": "2379720"
  },
  {
    "text": "you I'll do it better we'll do it the old the",
    "start": "2379720",
    "end": "2385838"
  },
  {
    "text": "way thank you uh thank you so far uh for",
    "start": "2389000",
    "end": "2394480"
  },
  {
    "text": "uh the workshop uh I have a question like like this generator uh it generates",
    "start": "2394480",
    "end": "2399960"
  },
  {
    "text": "C code uh c c code so is it possible to have another generator for goang for",
    "start": "2399960",
    "end": "2407400"
  },
  {
    "text": "instance or is it only for like C when when dealing with ebpf and those stuff",
    "start": "2407400",
    "end": "2415040"
  },
  {
    "text": "yeah so it's it's really just for C but you see we've built it when at the first",
    "start": "2415040",
    "end": "2420079"
  },
  {
    "text": "uh time when you do the be in it it was asking you which language so we did that",
    "start": "2420079",
    "end": "2425640"
  },
  {
    "text": "in keeping in mind that there may be other options but uh bumblebee is really just doing that with",
    "start": "2425640",
    "end": "2433520"
  },
  {
    "text": "C but basically for ebpf programs these are traditionally the actual kernel code",
    "start": "2433520",
    "end": "2439160"
  },
  {
    "text": "that you are writing for ebpf programs is either C or rust it's goang is more like a user space language it's not",
    "start": "2439160",
    "end": "2446359"
  },
  {
    "text": "performant and safe enough for for the kernel so that that that uh that's the",
    "start": "2446359",
    "end": "2451920"
  },
  {
    "text": "reason why it's uh most of the time it's uh C or uh or rust",
    "start": "2451920",
    "end": "2457880"
  },
  {
    "text": "but a r support would be nice if we have any rust developers and you are",
    "start": "2457880",
    "end": "2463000"
  },
  {
    "text": "interested in doing this that generator uh to add that new feature then all the",
    "start": "2463000",
    "end": "2469359"
  },
  {
    "text": "contributions are more than welcomed let's try how many rest developers we have in the",
    "start": "2469359",
    "end": "2477599"
  },
  {
    "text": "room oh yeah oh that's weird it's an ebpf talk and we don't have a single R",
    "start": "2477599",
    "end": "2483440"
  },
  {
    "text": "developer no we have one we have one here ah one okay yeah yeah yeah that's good I'm pretty sure that if",
    "start": "2483440",
    "end": "2489400"
  },
  {
    "text": "we have the same question in two years or three years that will be a different",
    "start": "2489400",
    "end": "2494720"
  },
  {
    "text": "number okay so here what we are going to do first is that we are going to deploy",
    "start": "2494720",
    "end": "2500160"
  },
  {
    "text": "so we have a cub cluster I forgot it I think we already have it in fact from the beginning uh when you do yeah I",
    "start": "2500160",
    "end": "2506880"
  },
  {
    "text": "don't remember where we deploy it but anyway um so you can just create um this",
    "start": "2506880",
    "end": "2512079"
  },
  {
    "text": "uh Nam space and uh what we are deploying here is like uh the book info",
    "start": "2512079",
    "end": "2518160"
  },
  {
    "text": "application so for people who are playing sometime with EO um you may be",
    "start": "2518160",
    "end": "2523760"
  },
  {
    "text": "already aware of this application it's just like uh an application that has multiple microservices because as I said",
    "start": "2523760",
    "end": "2531040"
  },
  {
    "text": "our goal is to be able to display which service talk to which service in the cluster so we need to have a few",
    "start": "2531040",
    "end": "2537400"
  },
  {
    "text": "interactions right so we just deploy this um program here and uh we just wait",
    "start": "2537400",
    "end": "2543839"
  },
  {
    "text": "for uh all the pods to be running should be quite fast it's already there perfect",
    "start": "2543839",
    "end": "2552599"
  },
  {
    "text": "and then we are also going to uh deploy promets because you remember I said that",
    "start": "2552599",
    "end": "2559440"
  },
  {
    "text": "we can emit some metrics so what we want to do here is to uh collect these",
    "start": "2559440",
    "end": "2565960"
  },
  {
    "text": "metrics and store them in in promotus so we just like create this Nam space and we uh",
    "start": "2565960",
    "end": "2574760"
  },
  {
    "text": "install uh promotus",
    "start": "2574760",
    "end": "2579119"
  },
  {
    "text": "and then what we we will do is that because we have an oci image it's very easy to deploy this program uh in our",
    "start": "2582839",
    "end": "2590040"
  },
  {
    "text": "Cuban cluster right so we are just uh um going to do that but we are not going to",
    "start": "2590040",
    "end": "2595760"
  },
  {
    "text": "deploy the oci image I have built before instead what we do is that we are",
    "start": "2595760",
    "end": "2603160"
  },
  {
    "text": "deploying uh a docu image that contains the B",
    "start": "2603160",
    "end": "2608319"
  },
  {
    "text": "CLI right because what we want is a program that is able to load this um",
    "start": "2608319",
    "end": "2615960"
  },
  {
    "text": "this program we have built in the Kel right so I know this part can be a little bit confusing right because it's",
    "start": "2615960",
    "end": "2621480"
  },
  {
    "text": "an oci image we have built but we can it's not an oci image that you can run on Docker right that's a that's an oci",
    "start": "2621480",
    "end": "2627240"
  },
  {
    "text": "image that is just like uh the the the ebpf program that we have built right",
    "start": "2627240",
    "end": "2634559"
  },
  {
    "text": "what we need to load in kubernetes is a real doc image that contains bumblebee",
    "start": "2634559",
    "end": "2641599"
  },
  {
    "text": "so that when it starts it can load the the the program into uh the Kel so what",
    "start": "2641599",
    "end": "2648200"
  },
  {
    "text": "you see here in the demon set is that we say I want to use this uh bumblebee uh",
    "start": "2648200",
    "end": "2653920"
  },
  {
    "text": "doer image that have the bcli and what are the arguments the arguments are be",
    "start": "2653920",
    "end": "2660559"
  },
  {
    "text": "run insecure because we are going to get it from the registry that is just like a PL HTTP one",
    "start": "2660559",
    "end": "2667640"
  },
  {
    "text": "and we give the uh the the the name of this image that we have",
    "start": "2667640",
    "end": "2674040"
  },
  {
    "text": "built before in that case it's not called Local Host 5,000 like before it's",
    "start": "2674040",
    "end": "2679440"
  },
  {
    "text": "called Master because Master is the host name of my um VM and the Cub cluster is",
    "start": "2679440",
    "end": "2686400"
  },
  {
    "text": "running in this VM as well so it knows how to get that uh um access that",
    "start": "2686400",
    "end": "2692440"
  },
  {
    "text": "registry basically so when we deploy this demon set what is going to happen happen is that in each uh node of my uh",
    "start": "2692440",
    "end": "2701359"
  },
  {
    "text": "cuties cluster I will get uh basically um this uh",
    "start": "2701359",
    "end": "2709040"
  },
  {
    "text": "bumblebee um image deployed and this image is going to load the program we",
    "start": "2709040",
    "end": "2716160"
  },
  {
    "text": "have built before so the same one we did before right no modification we just like run it that way so if I do a careg",
    "start": "2716160",
    "end": "2724880"
  },
  {
    "text": "pods then we see uh bumblebe is running uh in the default namespace and before we deployed uh the",
    "start": "2725680",
    "end": "2733760"
  },
  {
    "text": "application in different Nam spaces here right but now we have uh and that's what I",
    "start": "2733760",
    "end": "2741200"
  },
  {
    "text": "probably forgot to show you is that I think we show it a little bit later later but uh we have like uh multiple",
    "start": "2741200",
    "end": "2747640"
  },
  {
    "text": "nodes right because the idea is also to show you how we can use it to collect um",
    "start": "2747640",
    "end": "2753680"
  },
  {
    "text": "because we have these uh Matrix that are emitted by the program we are",
    "start": "2753680",
    "end": "2760599"
  },
  {
    "text": "going to collect that run the program in the different nodes of the cluster and store that in the in the common",
    "start": "2760599",
    "end": "2767280"
  },
  {
    "text": "promot so that's now running I now need to create this pod monitor to collect",
    "start": "2767280",
    "end": "2774559"
  },
  {
    "text": "the Matrix from uh the demon set if you are familiar with promo you have different ways to do that you can use",
    "start": "2774559",
    "end": "2781079"
  },
  {
    "text": "annotations or you can use like a p monitor so that just says that now uh I",
    "start": "2781079",
    "end": "2786720"
  },
  {
    "text": "want want to collect all these uh metrics and store them in promotes and",
    "start": "2786720",
    "end": "2792079"
  },
  {
    "text": "then you can just generate some traffic basically just generate some traffic so that now uh my application is used so",
    "start": "2792079",
    "end": "2799559"
  },
  {
    "text": "these communications are happening so where where are we so far we have our",
    "start": "2799559",
    "end": "2806920"
  },
  {
    "text": "ebpf program that is really this basic program that has like Source IP address",
    "start": "2806920",
    "end": "2812880"
  },
  {
    "text": "destination IP address number of communications we have this for each",
    "start": "2812880",
    "end": "2817920"
  },
  {
    "text": "node and you know that the pods have these pod IPS right and the services",
    "start": "2817920",
    "end": "2824079"
  },
  {
    "text": "have this service IP so what we have right now in promo in reality is uh we",
    "start": "2824079",
    "end": "2830640"
  },
  {
    "text": "have like these uh matrics that say pod IP talk to service IP pod IP talk to",
    "start": "2830640",
    "end": "2837079"
  },
  {
    "text": "service IP pod IP talk to this service IP which is quite nice already",
    "start": "2837079",
    "end": "2843920"
  },
  {
    "text": "but you you may want something better right you may want to be able to know",
    "start": "2843920",
    "end": "2850319"
  },
  {
    "text": "the Pod name to the service name right pod name to service name it's it's a lot better right so for that we have a",
    "start": "2850319",
    "end": "2856520"
  },
  {
    "text": "program that is just a demo program that's called kpf and what this program is going to do",
    "start": "2856520",
    "end": "2863040"
  },
  {
    "text": "is we are going to deploy it here it's going to and perhaps this one I can make",
    "start": "2863040",
    "end": "2868800"
  },
  {
    "text": "it bigger so what is going to do is going to um go to promotus run some queries to",
    "start": "2868800",
    "end": "2877880"
  },
  {
    "text": "get all these information so it will have all this information that I have like Source IP uh pod IP service IP pod",
    "start": "2877880",
    "end": "2885400"
  },
  {
    "text": "IP service IP and what it does it also use the API of the kuet API server to",
    "start": "2885400",
    "end": "2891960"
  },
  {
    "text": "know oh what is the Pod name that correspond to this pod IP or what is the service name that correspond to this",
    "start": "2891960",
    "end": "2897920"
  },
  {
    "text": "service IP right so that instead of displaying uh IP addresses everywhere we",
    "start": "2897920",
    "end": "2904640"
  },
  {
    "text": "we can display something that makes sense right and uh it does this and then it basically just uh display that in a UI",
    "start": "2904640",
    "end": "2912760"
  },
  {
    "text": "so that you can see uh what's going on so I have deployed it here and now if",
    "start": "2912760",
    "end": "2918760"
  },
  {
    "text": "everything goes well we can go there and refresh",
    "start": "2918760",
    "end": "2925160"
  },
  {
    "text": "it and you can see here right you can see that uh I have like uh many",
    "start": "2927720",
    "end": "2933760"
  },
  {
    "text": "Communications happening I have like the uh product page service that is talking",
    "start": "2933760",
    "end": "2940359"
  },
  {
    "text": "to the review Service uh the the Pod that is talking to the review service the review service",
    "start": "2940359",
    "end": "2947079"
  },
  {
    "text": "correspond to these two pods V2 and V3 here they also call to another service",
    "start": "2947079",
    "end": "2953799"
  },
  {
    "text": "that's called rating right but you also see that uh the promotus uh components",
    "start": "2953799",
    "end": "2961799"
  },
  {
    "text": "are uh talking to the CU API server you see the um",
    "start": "2961799",
    "end": "2967400"
  },
  {
    "text": "the and you don't see kpf here right because that's the first time I loaded right I loaded it once it got the data",
    "start": "2967400",
    "end": "2974839"
  },
  {
    "text": "but it doesn't exist in this picture because it was not yet in the Matrix but what's interesting is that if we try to",
    "start": "2974839",
    "end": "2980480"
  },
  {
    "text": "reload here we'll also start to see this new component which is",
    "start": "2980480",
    "end": "2985839"
  },
  {
    "text": "basically uh the kbpf program itself right because now what we see is that we",
    "start": "2985839",
    "end": "2991640"
  },
  {
    "text": "have this kbpf Pro service that talk to that correspond to the pod and the Pod",
    "start": "2991640",
    "end": "2998440"
  },
  {
    "text": "talk to promotus and talk to the qcpi server like we've seen in the in the picture before right so again the goal",
    "start": "2998440",
    "end": "3006680"
  },
  {
    "text": "is not to tell you go and do that in production the goal was really just to show you that finally with a a very",
    "start": "3006680",
    "end": "3014240"
  },
  {
    "text": "small uh ebpf program and some correlation with um what the C CPI",
    "start": "3014240",
    "end": "3021720"
  },
  {
    "text": "server can give us uh we are able to display some quite inter ing information",
    "start": "3021720",
    "end": "3027960"
  },
  {
    "text": "about what's going on in our CU cluster so that's it for me and uh Christian is",
    "start": "3027960",
    "end": "3034079"
  },
  {
    "text": "going to go through a few more examples and a little bit deeper thanks and this demo was originally",
    "start": "3034079",
    "end": "3041240"
  },
  {
    "text": "created quite some time ago now but if someone is proficient with with Primitives itself and and grao ecosystem",
    "start": "3041240",
    "end": "3049359"
  },
  {
    "text": "you might also know that there's a service graph data source or or pype for",
    "start": "3049359",
    "end": "3057040"
  },
  {
    "text": "for gra itself and you can get the very same information like the what's the actual uh pod name under that pod IP",
    "start": "3057040",
    "end": "3064799"
  },
  {
    "text": "there are default kubernetes metric that you can get for free out of the box if",
    "start": "3064799",
    "end": "3070240"
  },
  {
    "text": "you are running the Q primitive stack so if you do some Advanced relabeling uh",
    "start": "3070240",
    "end": "3075720"
  },
  {
    "text": "purely in uh in impr promes you can uh visualize all this inside grao you don't",
    "start": "3075720",
    "end": "3083400"
  },
  {
    "text": "necessarily need to build another uh project for that um and that's that's",
    "start": "3083400",
    "end": "3089160"
  },
  {
    "text": "also uh quite nice do we have any questions yes if I",
    "start": "3089160",
    "end": "3096760"
  },
  {
    "text": "may so thank you for this Workshop so far I would like to ask you to elaborate",
    "start": "3096760",
    "end": "3103319"
  },
  {
    "text": "a little bit more on the life cycle of the carers side of this CBF program so",
    "start": "3103319",
    "end": "3111160"
  },
  {
    "text": "let's say that the user user space part is uh terminated would that also mean",
    "start": "3111160",
    "end": "3118799"
  },
  {
    "text": "that uh whatever we install into that um virtual machine sendbox into the kernel",
    "start": "3118799",
    "end": "3126359"
  },
  {
    "text": "that's also got evicted and what happens",
    "start": "3126359",
    "end": "3131640"
  },
  {
    "text": "um if I would like to remove this whole thing from my kubernetes cluster is it",
    "start": "3131640",
    "end": "3137079"
  },
  {
    "text": "enough to just remove the Damon set or what are the actions I have to",
    "start": "3137079",
    "end": "3144200"
  },
  {
    "text": "take yes as you said so if if you remove the demon Set uh everything will be cleaned up it's like you only have the",
    "start": "3144200",
    "end": "3151640"
  },
  {
    "text": "interaction with the Kel through bumblebee itself that's what's loading the actual logic if you don't have the",
    "start": "3151640",
    "end": "3156760"
  },
  {
    "text": "pod in this kuber use case as a demon Set uh everything will be uh removed",
    "start": "3156760",
    "end": "3163559"
  },
  {
    "text": "from the kernel itself not just the user space PRI visualization layer but every",
    "start": "3163559",
    "end": "3169559"
  },
  {
    "text": "but everything sorry and and just to add to that when so we built it in a way",
    "start": "3169559",
    "end": "3174760"
  },
  {
    "text": "that is kind of if you would run five programs then you would run five time this B run Command right we also add in",
    "start": "3174760",
    "end": "3182240"
  },
  {
    "text": "mind to enhance that it's maybe something we do in the future or not but",
    "start": "3182240",
    "end": "3187359"
  },
  {
    "text": "uh the idea was also like potentially to have like a way to manage the life cycle",
    "start": "3187359",
    "end": "3192559"
  },
  {
    "text": "of several programs through one B command for example you know so you you could enhance that but basically when",
    "start": "3192559",
    "end": "3199040"
  },
  {
    "text": "you when you run a user program this program is loading the Kel program if",
    "start": "3199040",
    "end": "3204960"
  },
  {
    "text": "you uh stop this user program it stops the can program okay so it is enforced",
    "start": "3204960",
    "end": "3210720"
  },
  {
    "text": "by I don't know not because of some hooks or callbacks uh that just executed",
    "start": "3210720",
    "end": "3218440"
  },
  {
    "text": "when the user Space Program got killed but essentially when the user space",
    "start": "3218440",
    "end": "3223760"
  },
  {
    "text": "program terminates that immediately terminates this Kel part okay yes that's",
    "start": "3223760",
    "end": "3229680"
  },
  {
    "text": "that's the logic sorry something is wrong with the voice so that's that's something that's taken care by one will",
    "start": "3229680",
    "end": "3236599"
  },
  {
    "text": "be for you that's like the actual go user space code that is there a proper",
    "start": "3236599",
    "end": "3242319"
  },
  {
    "text": "and the the Primitive visualization but behind the scene it also cleans up the uh the the kernel program that is",
    "start": "3242319",
    "end": "3249280"
  },
  {
    "text": "loading into the kernel you don't even need to to think about that because it will be just taken care of you and as",
    "start": "3249280",
    "end": "3254799"
  },
  {
    "text": "Danny mentioned we also have a branch so if you go to the GitHub repository solo Das iio on GitHub you will find the",
    "start": "3254799",
    "end": "3261960"
  },
  {
    "text": "Bumblebee repository there's a branch called operator or something like that that's an experimental branch that is",
    "start": "3261960",
    "end": "3268680"
  },
  {
    "text": "aiming to do the same thing uh that uh that Denny just mentioned that's like",
    "start": "3268680",
    "end": "3273880"
  },
  {
    "text": "having an operator like uh user experience for bumblebee you just",
    "start": "3273880",
    "end": "3279440"
  },
  {
    "text": "deploy in that case when you are deploying the operator from that particular Branch you are not actually",
    "start": "3279440",
    "end": "3284839"
  },
  {
    "text": "deploying the whole cni itself uh you are just deploying the loader you have",
    "start": "3284839",
    "end": "3290160"
  },
  {
    "text": "the loader part of Bumblebee running as a demon set and you can create uh let's",
    "start": "3290160",
    "end": "3296880"
  },
  {
    "text": "say I think it's called probe probe is the is the crd and what the probe crd is",
    "start": "3296880",
    "end": "3303240"
  },
  {
    "text": "defining is the actual um oci image of the Kel program that you want to load into the Kel so the user experience in",
    "start": "3303240",
    "end": "3311000"
  },
  {
    "text": "that case is that you create you apply a probe that's the actual c as I mentioned",
    "start": "3311000",
    "end": "3318319"
  },
  {
    "text": "and that will uh instruct your bumblebee demon set the loader that is running as",
    "start": "3318319",
    "end": "3323640"
  },
  {
    "text": "a demon set still to load the actual PR uh program that you are specifying in",
    "start": "3323640",
    "end": "3328799"
  },
  {
    "text": "the in the probe CD which is quite nice so we can just deploy another probe Uh",
    "start": "3328799",
    "end": "3334799"
  },
  {
    "text": "custom resource into the cluster and the uh D that we load the the other program",
    "start": "3334799",
    "end": "3340520"
  },
  {
    "text": "as well do we have any more",
    "start": "3340520",
    "end": "3347799"
  },
  {
    "text": "questions it looks like at the moment no so let's go to the next Lab",
    "start": "3349480",
    "end": "3358240"
  },
  {
    "text": "[Music] we didn't spend too much time to explain",
    "start": "3365690",
    "end": "3372920"
  },
  {
    "text": "maybe we have a question yeah we have a question okay we can wait we have 30 minutes left and we have two small laps",
    "start": "3372920",
    "end": "3380000"
  },
  {
    "text": "so let's take the question can you yeah you can hear me my question is about the",
    "start": "3380000",
    "end": "3385480"
  },
  {
    "text": "these two uh which you installed uh lastly I think it's key BPF key BPF yes",
    "start": "3385480",
    "end": "3393240"
  },
  {
    "text": "yeah so it's uh just used to visualize in a graph manner what is the",
    "start": "3393240",
    "end": "3399760"
  },
  {
    "text": "interconnection between the components right yeah that's just a visualization",
    "start": "3399760",
    "end": "3405039"
  },
  {
    "text": "ler yeah and uh one more thing is it uh you I think it's an open source tool",
    "start": "3405039",
    "end": "3411880"
  },
  {
    "text": "that you can use it freely maybe yeah it's it's something that I built some time ago uh I I don't",
    "start": "3411880",
    "end": "3419799"
  },
  {
    "text": "think I have published that in any repo because it's a very basic program but",
    "start": "3419799",
    "end": "3424839"
  },
  {
    "text": "you can ping me and I'm happy to give you the code it's just that it was like a dirty experiment and you know I'm not",
    "start": "3424839",
    "end": "3432240"
  },
  {
    "text": "a big fan of sharing code that is not really nicely written so I'm a little",
    "start": "3432240",
    "end": "3437720"
  },
  {
    "text": "bit shy with this but if you want the code I give it to you no problem it's really basic it's just like you know",
    "start": "3437720",
    "end": "3443280"
  },
  {
    "text": "caring promo getting data and for each and cing QP I server to get the IP and and",
    "start": "3443280",
    "end": "3451359"
  },
  {
    "text": "nothing nothing really fancy okay thank you but as I mentioned the the",
    "start": "3451359",
    "end": "3458480"
  },
  {
    "text": "PRI node graph or service graph um actually that's a graph on a panel type",
    "start": "3458480",
    "end": "3465280"
  },
  {
    "text": "uh that's that that might be a more produ way to to visualize all this you just need to do some relabeling which",
    "start": "3465280",
    "end": "3470880"
  },
  {
    "text": "probably also won't be uh perfect code it will be a bit ugly but uh it's nicer",
    "start": "3470880",
    "end": "3476920"
  },
  {
    "text": "to have all this information in in gra because most probably are already using",
    "start": "3476920",
    "end": "3482000"
  },
  {
    "text": "gra as well do we have more questions yeah we have one",
    "start": "3482000",
    "end": "3487520"
  },
  {
    "text": "more hello I have a question regarding the is there some statistic regarding",
    "start": "3487520",
    "end": "3494960"
  },
  {
    "text": "the injected C program into the k for example in term of",
    "start": "3494960",
    "end": "3503880"
  },
  {
    "text": "performance yeah that's a good question so so the traditionally and generally the BPF part is really uh",
    "start": "3504079",
    "end": "3512280"
  },
  {
    "text": "performant uh most of the price in terms of resource us usage is that you have to",
    "start": "3512280",
    "end": "3518839"
  },
  {
    "text": "pay for the actual go bumblebee demon set itself um so yeah you can you can for",
    "start": "3518839",
    "end": "3526680"
  },
  {
    "text": "example take a look at the the the graphon dashboards the the default one that you can get out of the box with the",
    "start": "3526680",
    "end": "3532400"
  },
  {
    "text": "c promi stack and you can take a look at the resource consumtion of the Bumblebee",
    "start": "3532400",
    "end": "3537680"
  },
  {
    "text": "PS itself usually it's like maybe 100 megab it's a demon set if you have a",
    "start": "3537680",
    "end": "3544240"
  },
  {
    "text": "simple program loaded into the kernel it it won't be too much higher than that but there's also there are also ways",
    "start": "3544240",
    "end": "3551319"
  },
  {
    "text": "to inject uh to compose multiple ebpf programs into a single larger ebpf",
    "start": "3551319",
    "end": "3557359"
  },
  {
    "text": "program and load that into into Bumblebee and you can see that if you even if you includeed multiple one the",
    "start": "3557359",
    "end": "3563240"
  },
  {
    "text": "resource us usage won't be won't be that much higher because the the as I",
    "start": "3563240",
    "end": "3568960"
  },
  {
    "text": "mentioned the the Kel part is is pretty performant obviously we are in the",
    "start": "3568960",
    "end": "3574920"
  },
  {
    "text": "Cardel you have access to lots of things and it's very easy",
    "start": "3574920",
    "end": "3580079"
  },
  {
    "text": "to uh get to a state when you have coordin problems on the metrix so in",
    "start": "3580079",
    "end": "3585680"
  },
  {
    "text": "that case the actual metrix uh will be the will be a bigest program in terms of",
    "start": "3585680",
    "end": "3591680"
  },
  {
    "text": "resource consumption okay thank you and also just to not that uh the size of a BPF program",
    "start": "3591680",
    "end": "3599039"
  },
  {
    "text": "is limited so you cannot really write a program that would be",
    "start": "3599039",
    "end": "3604559"
  },
  {
    "text": "having a very complex logic also for that reason that the goal is not to impact you know the performance right",
    "start": "3604559",
    "end": "3612280"
  },
  {
    "text": "but but obviously you know uh you have a lot of power with it so you also have to be careful and uh I think right now I",
    "start": "3612280",
    "end": "3621200"
  },
  {
    "text": "have never seen uh use case of or usage of ebpf",
    "start": "3621200",
    "end": "3626880"
  },
  {
    "text": "that is not provided by a vendor right so I have not seen really adoption of",
    "start": "3626880",
    "end": "3632160"
  },
  {
    "text": "ebpf like people do their own and all the things it it probably exist it's just that I didn't see it yet right um",
    "start": "3632160",
    "end": "3639640"
  },
  {
    "text": "but if you have this such a use case then obviously in the company you have to have a lot of mechanism in place to",
    "start": "3639640",
    "end": "3645680"
  },
  {
    "text": "have proper testing and you know validate what's what is the impact of your program not only on performance but",
    "start": "3645680",
    "end": "3651960"
  },
  {
    "text": "only on it can drop packets it can redirect things it can do a lot of magical things things that are very",
    "start": "3651960",
    "end": "3658160"
  },
  {
    "text": "difficult to debug right so but the easiest and most flexible way is just",
    "start": "3658160",
    "end": "3663359"
  },
  {
    "text": "really to write a small um purpose build I don't know maybe in this case it",
    "start": "3663359",
    "end": "3670839"
  },
  {
    "text": "will be like it's not even 50 lines of code and you can get this information out of the cluster and you can visualize",
    "start": "3670839",
    "end": "3676520"
  },
  {
    "text": "from the from the kernel and you can visualize that uh as PRI metrix so if you know what you are doing it's it's",
    "start": "3676520",
    "end": "3684119"
  },
  {
    "text": "with bumblebee it's very easy to to right develop test uh and deploy it as an image you can uh the verifier is",
    "start": "3684119",
    "end": "3691520"
  },
  {
    "text": "still in the in the loop so you you can actually crash your kernel with with a with a code like that it bumblebe won't",
    "start": "3691520",
    "end": "3698480"
  },
  {
    "text": "even build the problem the the program for you if there's if it if it wouldn't pass the the verifier",
    "start": "3698480",
    "end": "3705839"
  },
  {
    "text": "itself um we haven't spent too much time on actually explaining what's happening",
    "start": "3705839",
    "end": "3711799"
  },
  {
    "text": "here so this lab is called Bumblebee from scratch we use the template",
    "start": "3711799",
    "end": "3717200"
  },
  {
    "text": "generator that created the the template the boiler plate for you to get started but in this lab I will be going through",
    "start": "3717200",
    "end": "3724440"
  },
  {
    "text": "all the lines that we have here because we only have I don't know 40 40 40 something lines of code here and after",
    "start": "3724440",
    "end": "3730880"
  },
  {
    "text": "that we I also have another lab where I will be focusing on an even smaller use case just so that you can understand how",
    "start": "3730880",
    "end": "3737640"
  },
  {
    "text": "the the Kel space uh code works so as Danny mentioned at the very top of the",
    "start": "3737640",
    "end": "3743359"
  },
  {
    "text": "file we have a few headers VM L.H for example and all the BPF helpers I think",
    "start": "3743359",
    "end": "3749520"
  },
  {
    "text": "we haven't mentioned this but if you're using Le BPF then you can get access to",
    "start": "3749520",
    "end": "3754880"
  },
  {
    "text": "these uh BPF uh helpers as well and this can make your life really easy for",
    "start": "3754880",
    "end": "3760279"
  },
  {
    "text": "example there are lots of helpers little functions in this library that can get",
    "start": "3760279",
    "end": "3765359"
  },
  {
    "text": "you for example the name of the the processes that are running or the process ID if you are doing uh ebpf with",
    "start": "3765359",
    "end": "3773520"
  },
  {
    "text": "the with the earliest possible way like with with the traditional uh original BCC tooling you would need to do all",
    "start": "3773520",
    "end": "3780400"
  },
  {
    "text": "that work for yourself to be able to uh find what's the what's the name of the",
    "start": "3780400",
    "end": "3786160"
  },
  {
    "text": "of the process that is running uh if you're using libpf you can just import this BPF haers header and it will be so",
    "start": "3786160",
    "end": "3793559"
  },
  {
    "text": "much easier so after the headers we have this struct and that struct is basically uh",
    "start": "3793559",
    "end": "3801559"
  },
  {
    "text": "how you want to describe your events that you want to extract from the kernel here in this case we are interested in",
    "start": "3801559",
    "end": "3809319"
  },
  {
    "text": "the uh process parent ID thread ID process ID these are the informations",
    "start": "3809319",
    "end": "3815119"
  },
  {
    "text": "that are that will describe what kind of pro processes are uh affected by the events that we",
    "start": "3815119",
    "end": "3823079"
  },
  {
    "text": "are tracking with our ebpf code and as I mentioned this last part here is the",
    "start": "3823079",
    "end": "3829039"
  },
  {
    "text": "actual name of the process because process ID is nice uh but you most probably are more interested in seeing",
    "start": "3829039",
    "end": "3835880"
  },
  {
    "text": "the actual name of the process so you have a struct like this and that will describe all of your Kel events that's",
    "start": "3835880",
    "end": "3842240"
  },
  {
    "text": "all the information that you need to know we also hasen't been focusing on",
    "start": "3842240",
    "end": "3847799"
  },
  {
    "text": "explaining where the labels are coming from when you are consuming these uh with Primitives but you can see that",
    "start": "3847799",
    "end": "3855400"
  },
  {
    "text": "these actual uh fields in the struct will be the labels so this is the place",
    "start": "3855400",
    "end": "3860880"
  },
  {
    "text": "where you have to make sure that you are not uh introducing a city issue uh when",
    "start": "3860880",
    "end": "3866400"
  },
  {
    "text": "you are exporting everything uh to through",
    "start": "3866400",
    "end": "3871440"
  },
  {
    "text": "prome after that we have another struct and this struct is basically the map we were talking about the map previously",
    "start": "3872079",
    "end": "3878319"
  },
  {
    "text": "the map is basically the way to exchange information between uh CER space and",
    "start": "3878319",
    "end": "3884000"
  },
  {
    "text": "user space as we mentioned in the in the obser Roy use case we are mostly just",
    "start": "3884000",
    "end": "3889760"
  },
  {
    "text": "reading from that so you can see that the type of this map is ring buff ring",
    "start": "3889760",
    "end": "3895079"
  },
  {
    "text": "buffer uh if you're using libpf the modern way of developing ebpf programs",
    "start": "3895079",
    "end": "3900640"
  },
  {
    "text": "then uh most of the time ring buffer is the is the best and most performant Choice um it has lots of benefits over",
    "start": "3900640",
    "end": "3909680"
  },
  {
    "text": "traditional uh other map types for example the the per buffer bumblebee",
    "start": "3909680",
    "end": "3915079"
  },
  {
    "text": "itself cannot even it doesn't even support perf buffer this is why we are also pushing everyone to to use ring",
    "start": "3915079",
    "end": "3922240"
  },
  {
    "text": "buffers it's it's more memory safe it's uh it's easier to to use it has really nice",
    "start": "3922240",
    "end": "3927520"
  },
  {
    "text": "apis um through these uh helpers and libraries and basically if you are",
    "start": "3927520",
    "end": "3934119"
  },
  {
    "text": "taking an existing example from the libpf tools uh GitHub repository most of",
    "start": "3934119",
    "end": "3940240"
  },
  {
    "text": "the time the only thing that you need to do if that actual existing example is using uh par buffer you have to migrate",
    "start": "3940240",
    "end": "3947640"
  },
  {
    "text": "that from par buffer to ring buffer the next uh lab that I will be doing right after this we'll be going through a",
    "start": "3947640",
    "end": "3953480"
  },
  {
    "text": "migration procedure like that um it's not that it's not that complex as it may sound",
    "start": "3953480",
    "end": "3959760"
  },
  {
    "text": "like so we specified uh the type of the map we specified how many entries we",
    "start": "3959760",
    "end": "3965359"
  },
  {
    "text": "want to store and then we specified that all the uh entries that we want to store",
    "start": "3965359",
    "end": "3971680"
  },
  {
    "text": "in the map we'll be using the type that we uh specified here so it's quite",
    "start": "3971680",
    "end": "3977200"
  },
  {
    "text": "simple uh this exits is the name of the",
    "start": "3977200",
    "end": "3982440"
  },
  {
    "text": "map that we are using and this is important because if remember but we will take a closer look at this uh in a",
    "start": "3982440",
    "end": "3988160"
  },
  {
    "text": "bit when you are exporting or exposing the C event as Primitives Matrix the",
    "start": "3988160",
    "end": "3993880"
  },
  {
    "text": "actual suffix of the Matrix will be coming from from this value so this is",
    "start": "3993880",
    "end": "3999960"
  },
  {
    "text": "why it's important to give a meaningful name to your map so that if you are for example uh composing multiple ebpf",
    "start": "3999960",
    "end": "4006720"
  },
  {
    "text": "programs together if you only if you always call uh this for example events",
    "start": "4006720",
    "end": "4012400"
  },
  {
    "text": "which is something that in the Upstream B repository uh is the case most of the time you won't be able to to",
    "start": "4012400",
    "end": "4018880"
  },
  {
    "text": "differentiate the various maps that you are using across your different problems programs so this is why this was called",
    "start": "4018880",
    "end": "4025920"
  },
  {
    "text": "exits because with this 50 lines of code we will be checking the exit is SC in",
    "start": "4025920",
    "end": "4031319"
  },
  {
    "text": "your system after that we have this uh map section here this is something that's coming from the the Upstream",
    "start": "4031319",
    "end": "4037720"
  },
  {
    "text": "implementation and in Bumble B we have this dot print U suffix and what it does",
    "start": "4037720",
    "end": "4043359"
  },
  {
    "text": "is that it will tell bumblebee that okay you don't need to expose all these kernels all these events as Primitives",
    "start": "4043359",
    "end": "4051079"
  },
  {
    "text": "metrics I just want to print those out if you have print here then you can use the Bumblebee CLI tool to to visualize",
    "start": "4051079",
    "end": "4058640"
  },
  {
    "text": "those uh if I would want to expose these as Primitives Matrix all I have to do is to change this print to to",
    "start": "4058640",
    "end": "4066440"
  },
  {
    "text": "counter after that we have the actual uh logic uh Cal logic that we are injecting",
    "start": "4066440",
    "end": "4073920"
  },
  {
    "text": "in and this is a very good example this line this function of the various helpers that are out there and you can",
    "start": "4073920",
    "end": "4080359"
  },
  {
    "text": "use with LPF so as I mentioned you can just use this BPF get current pit uh uh",
    "start": "4080359",
    "end": "4086200"
  },
  {
    "text": "tread group ID and the output of this um um function helper will be the actual",
    "start": "4086200",
    "end": "4095079"
  },
  {
    "text": "process ID uh it also includes the tread group ID so you might need to do some",
    "start": "4095079",
    "end": "4100080"
  },
  {
    "text": "very minor uh bit operations to strip the data to have this the the kind of",
    "start": "4100080",
    "end": "4106359"
  },
  {
    "text": "data that you are interested in like as I mentioned this includes both of them so I have to strip uh 32 units so that",
    "start": "4106359",
    "end": "4113880"
  },
  {
    "text": "you can get the actual uh process ID part but if you're using these uh it's",
    "start": "4113880",
    "end": "4119520"
  },
  {
    "text": "so much easier than uh than um then without these after that we are uh",
    "start": "4119520",
    "end": "4127199"
  },
  {
    "text": "initializing our events um you can also use another um",
    "start": "4127199",
    "end": "4132600"
  },
  {
    "text": "another helper function to get the ACT running uh task that is running on your",
    "start": "4132600",
    "end": "4137960"
  },
  {
    "text": "kernel here we are what we are doing in this section is that we are populating these fields that we",
    "start": "4137960",
    "end": "4144560"
  },
  {
    "text": "specified up here so these are the actual fields that we need to populate",
    "start": "4144560",
    "end": "4149880"
  },
  {
    "text": "in our map because in our map we are having events and after that this is",
    "start": "4149880",
    "end": "4155719"
  },
  {
    "text": "where we are uh populating the actual values so it's quite",
    "start": "4155719",
    "end": "4161560"
  },
  {
    "text": "simple um we are using another helper to uh load the actual",
    "start": "4161560",
    "end": "4167838"
  },
  {
    "text": "uh tasks that we initialized above and we can use another heler to get the",
    "start": "4167839",
    "end": "4173560"
  },
  {
    "text": "actual name of the process again this is something that you would need to do yourself if you are using uh BCC uh in a",
    "start": "4173560",
    "end": "4180520"
  },
  {
    "text": "row format after that we have uh the ring buffer specific uh part as I mentioned",
    "start": "4180520",
    "end": "4187040"
  },
  {
    "text": "ring buffer we are using ring buffer because that's currently a requirement for you to move existing uh tooling or",
    "start": "4187040",
    "end": "4195679"
  },
  {
    "text": "or tools into into bumbleb itself we are just reserving the place",
    "start": "4195679",
    "end": "4200880"
  },
  {
    "text": "uh the some place in in memory and uh copying the data into the ring buffer",
    "start": "4200880",
    "end": "4208120"
  },
  {
    "text": "and from The Ring buffer we can do something like BPF ring buff uh submit that will uh push all the contents of",
    "start": "4208120",
    "end": "4216440"
  },
  {
    "text": "the uh ring buff to the to the map and from the map bumblebee will just read it and expose it in a format that that we",
    "start": "4216440",
    "end": "4223960"
  },
  {
    "text": "specified and that's that's it uh after we have this",
    "start": "4223960",
    "end": "4229760"
  },
  {
    "text": "code what I can do is that I can uh copy this here so that I can build it into an",
    "start": "4229760",
    "end": "4238840"
  },
  {
    "text": "image I will call this exit Snoop it's a simplified version of the Upstream exit",
    "start": "4238840",
    "end": "4244239"
  },
  {
    "text": "Snoop there were some additional logic that I removed to to make it",
    "start": "4244239",
    "end": "4249880"
  },
  {
    "text": "simpler then I can push it to the registry by the way we also have a",
    "start": "4249880",
    "end": "4256080"
  },
  {
    "text": "option like uh like this b list and that will list all the various um images also",
    "start": "4256080",
    "end": "4262960"
  },
  {
    "text": "images that you previously built all right after that I can do a b",
    "start": "4262960",
    "end": "4268920"
  },
  {
    "text": "run and just out of the box we will have some exit C SCS happening in the system",
    "start": "4268920",
    "end": "4275320"
  },
  {
    "text": "and these will be uh visualized with bumblebee on this format because I only",
    "start": "4275320",
    "end": "4281760"
  },
  {
    "text": "specified uh maps. print so I'm not exposing these ASAP",
    "start": "4281760",
    "end": "4287239"
  },
  {
    "text": "all right then we reached the last part of the workshop do we have any questions in the meantime in the last part I will",
    "start": "4287800",
    "end": "4294880"
  },
  {
    "text": "be talking a bit more about the migration between per buffer and ring buffer and the actual use case will be",
    "start": "4294880",
    "end": "4301639"
  },
  {
    "text": "building a o kill exporter because catching out of myri",
    "start": "4301639",
    "end": "4306920"
  },
  {
    "text": "exceptions in a kuber cluster can be challenging um but if you have access to",
    "start": "4306920",
    "end": "4312199"
  },
  {
    "text": "the kernel you can actually take a look at the uh the kernel propes in the kernel that",
    "start": "4312199",
    "end": "4318000"
  },
  {
    "text": "will be most certainly uh passed in uh during execution when an outof memory",
    "start": "4318000",
    "end": "4324840"
  },
  {
    "text": "event happens without this there are some metrics there are some other approaches to uh get out of memory",
    "start": "4324840",
    "end": "4331760"
  },
  {
    "text": "exceptions but you might not be able to to catch all of",
    "start": "4331760",
    "end": "4337039"
  },
  {
    "text": "them all right so when you are doing this on your own",
    "start": "4338600",
    "end": "4343719"
  },
  {
    "text": "you can read here about what happening in a in a l in the Linux kernel uh when",
    "start": "4343719",
    "end": "4349480"
  },
  {
    "text": "uh we are talking about out of memory exceptions there's a scoring system and",
    "start": "4349480",
    "end": "4355239"
  },
  {
    "text": "basically based on the co based on the scores that are assigned to each process in the on in the kernel uh the kernel",
    "start": "4355239",
    "end": "4363000"
  },
  {
    "text": "will decide which program to kill when it's uh running out of memory if you are running on kubernetes um and you have a",
    "start": "4363000",
    "end": "4370080"
  },
  {
    "text": "Linux kernel behind the nodes uh you can use CPU uh memory",
    "start": "4370080",
    "end": "4375960"
  },
  {
    "text": "limits and um memory request values to",
    "start": "4375960",
    "end": "4381239"
  },
  {
    "text": "um to affect the scores basically but the",
    "start": "4381239",
    "end": "4386880"
  },
  {
    "text": "underline technology and and the scoring system is the same you are still running",
    "start": "4386880",
    "end": "4392120"
  },
  {
    "text": "uh Linux Cal after all so we can take a look at",
    "start": "4392120",
    "end": "4397199"
  },
  {
    "text": "the code for umill I hope it's big enough um that's",
    "start": "4397199",
    "end": "4405239"
  },
  {
    "text": "that's that's all the code that is needed uh to catch an out of memory exception again it's very",
    "start": "4405239",
    "end": "4412080"
  },
  {
    "text": "simple there's a header included uh I will talk about the header later but basically in this header uh",
    "start": "4412080",
    "end": "4417920"
  },
  {
    "text": "traditionally the ebpf um developers put all",
    "start": "4417920",
    "end": "4423360"
  },
  {
    "text": "the uh that that was where they specified the struct that are describing",
    "start": "4423360",
    "end": "4429400"
  },
  {
    "text": "the events that you want to uh that you want to expose in some way uh",
    "start": "4429400",
    "end": "4435639"
  },
  {
    "text": "um so that's what we have in the header that's the struct for the actual events as I mentioned uh usually these are",
    "start": "4435639",
    "end": "4442400"
  },
  {
    "text": "called events in the ABS repository so when you are moving this code to bumblebee it makes sense to use a",
    "start": "4442400",
    "end": "4448679"
  },
  {
    "text": "different name for example o kills or out of memory exceptions or something like",
    "start": "4448679",
    "end": "4453719"
  },
  {
    "text": "that uh we have these dot Maps we don't have anything bumblebee specific here as",
    "start": "4453719",
    "end": "4458840"
  },
  {
    "text": "I mentioned it's using per buffer that's the old uh map type that uh that",
    "start": "4458840",
    "end": "4464239"
  },
  {
    "text": "bumblebee doesn't support that's the mo key size and we are putting uh uh and we",
    "start": "4464239",
    "end": "4470760"
  },
  {
    "text": "are specifying the size of for all the events the actual logic is here so when",
    "start": "4470760",
    "end": "4478520"
  },
  {
    "text": "an out of memory exception is happening in uh in a lunux system you will uh get you will get this",
    "start": "4478520",
    "end": "4486960"
  },
  {
    "text": "uh C probe uh executed it's called oom kill process so",
    "start": "4486960",
    "end": "4492000"
  },
  {
    "text": "you can see that based on the name there's no real way of going around around this and having out of memory um",
    "start": "4492000",
    "end": "4498360"
  },
  {
    "text": "exception happening in your system without passing this probe what we are doing here is that the same thing that",
    "start": "4498360",
    "end": "4504520"
  },
  {
    "text": "we did before we are getting uh we are using the very same helpers to get the actual",
    "start": "4504520",
    "end": "4510000"
  },
  {
    "text": "process ID we can uh we can even reach uh the memory pages that the process was",
    "start": "4510000",
    "end": "4516000"
  },
  {
    "text": "reading so that you can get some sense about okay how much memory uh the extra process wanted to read into the memory",
    "start": "4516000",
    "end": "4523760"
  },
  {
    "text": "right right before it died here we are populating the name the com of the uh of the process that is",
    "start": "4523760",
    "end": "4532560"
  },
  {
    "text": "getting out of uh uh memory kied and uh we can",
    "start": "4532560",
    "end": "4538840"
  },
  {
    "text": "also this fpid is the other process that was running at the same time when our",
    "start": "4538840",
    "end": "4544320"
  },
  {
    "text": "our other process got uh o killed why is this important this is this can be",
    "start": "4544320",
    "end": "4550239"
  },
  {
    "text": "important or interesting because most probably if you have another process running at the same time that's the",
    "start": "4550239",
    "end": "4555840"
  },
  {
    "text": "process that most likely killed your actual uh other process so we can get some additional information on what's",
    "start": "4555840",
    "end": "4562520"
  },
  {
    "text": "happening in your in your system when you're having a situation like this okay as you can see it's like I",
    "start": "4562520",
    "end": "4569280"
  },
  {
    "text": "don't know 20 lines of code it's not too much it's not too complex uh if you take a look at",
    "start": "4569280",
    "end": "4575000"
  },
  {
    "text": "the user space code it's uh it's a lot bigger it has all the TD stuff that we",
    "start": "4575000",
    "end": "4581520"
  },
  {
    "text": "discussed handling the life cycle of the uh uh of the kernel program loading it",
    "start": "4581520",
    "end": "4586920"
  },
  {
    "text": "into the verifier handling user input and output as well visualizing the data",
    "start": "4586920",
    "end": "4592960"
  },
  {
    "text": "um but traditionally if you are creating and building both the user space and the",
    "start": "4592960",
    "end": "4599719"
  },
  {
    "text": "CER space programs for your ebpf use case um as it's Ste as it is you can",
    "start": "4599719",
    "end": "4606120"
  },
  {
    "text": "still get access to some additional data so for example here you can in the user space you can just run a you can read",
    "start": "4606120",
    "end": "4614280"
  },
  {
    "text": "from the pro file system and you can check what was the CPU load at the time when Doom kill happened which is nice",
    "start": "4614280",
    "end": "4621040"
  },
  {
    "text": "context this is a good reason to write your own user space programs as well but",
    "start": "4621040",
    "end": "4627199"
  },
  {
    "text": "checking the load average is something that you only need if you are working in a constraint environment and you don't",
    "start": "4627199",
    "end": "4635159"
  },
  {
    "text": "have access to other metrics because if you if you are exposing this uh information as PRI metrix you already",
    "start": "4635159",
    "end": "4641960"
  },
  {
    "text": "have access to to the load average the memory usage and all the other information as",
    "start": "4641960",
    "end": "4647639"
  },
  {
    "text": "well all right what I'm doing now is that I'm downloading",
    "start": "4647639",
    "end": "4653239"
  },
  {
    "text": "the uh original code um. BPF Doc and we can take a look at how that",
    "start": "4653239",
    "end": "4660280"
  },
  {
    "text": "how is that different from what we have for",
    "start": "4660280",
    "end": "4664560"
  },
  {
    "text": "bumblebe uh these are the differences so as I mentioned the header includes the description of the events that we are",
    "start": "4666639",
    "end": "4673120"
  },
  {
    "text": "putting into the map uh the two process ID the one that is getting goom killed and the one that is running at the time",
    "start": "4673120",
    "end": "4679440"
  },
  {
    "text": "of the uh incident the memory pages and uh both uh names of the of the processes",
    "start": "4679440",
    "end": "4687920"
  },
  {
    "text": "uh that are that are we are talking about this is what's in the um. header file after that we have the struct in",
    "start": "4687920",
    "end": "4695080"
  },
  {
    "text": "the original example as I already mentioned we have the pair buffer on the right we have the ring buffer this is",
    "start": "4695080",
    "end": "4701080"
  },
  {
    "text": "the new uh structure that we want to use we just specified the number of Max uh",
    "start": "4701080",
    "end": "4706880"
  },
  {
    "text": "MOX entries that we want to have in this map and we make sure that all the events",
    "start": "4706880",
    "end": "4713120"
  },
  {
    "text": "are described in the format that we specified above nothing really changed up to this",
    "start": "4713120",
    "end": "4719760"
  },
  {
    "text": "point um oh yeah of course we have this maps. counter here because we want to expose",
    "start": "4719760",
    "end": "4726199"
  },
  {
    "text": "this as promi speci because we are building an killer uh and umill",
    "start": "4726199",
    "end": "4732159"
  },
  {
    "text": "exporter um okay after this in the actual code section uh",
    "start": "4732159",
    "end": "4738159"
  },
  {
    "text": "we are attaching this custom logic to the very same Cel problem that we had before uh we just need to handle data a",
    "start": "4738159",
    "end": "4745239"
  },
  {
    "text": "bit differently what we are doing is that um we are using the API provided by by",
    "start": "4745239",
    "end": "4752440"
  },
  {
    "text": "uh ring buffer itself it's coming from the BPF core read header and it's also",
    "start": "4752440",
    "end": "4757719"
  },
  {
    "text": "leveraging the BPF headers here we can Leverage The Reserve commit API so what we are doing is that we are reserving",
    "start": "4757719",
    "end": "4763760"
  },
  {
    "text": "the space for our event EV and this is one of the benefits of of ring buffer itself if this operation here was",
    "start": "4763760",
    "end": "4771800"
  },
  {
    "text": "successful so if successfully could reserve the place uh in memory for our event that means that it will be able to",
    "start": "4771800",
    "end": "4778679"
  },
  {
    "text": "inject that and surface that on the user space so if this is successful then we can just go ahead populate all the data",
    "start": "4778679",
    "end": "4785880"
  },
  {
    "text": "as you can see we are doing the very same things we are just um uh populating it differently but at the very end if",
    "start": "4785880",
    "end": "4793760"
  },
  {
    "text": "this was successful all we need to do is to do is to call BPF ring buff submit",
    "start": "4793760",
    "end": "4800080"
  },
  {
    "text": "and our event that was successfully reserved will be committed to the buffer after that we don't need to think about",
    "start": "4800080",
    "end": "4806880"
  },
  {
    "text": "that um it will be bumblebee will be able to generate PRI metric from",
    "start": "4806880",
    "end": "4813599"
  },
  {
    "text": "that so let's build this into [Music]",
    "start": "4814480",
    "end": "4820400"
  },
  {
    "text": "a yeah we have five minutes let's build this into an image again",
    "start": "4820400",
    "end": "4826638"
  },
  {
    "text": "push it to the registry we can run it this is like a",
    "start": "4829360",
    "end": "4835000"
  },
  {
    "text": "good local test if I would have a failure here then it makes no sense to deploy into a kubernetes cluster because",
    "start": "4835000",
    "end": "4840080"
  },
  {
    "text": "it wouldn't be wouldn't be working now let's deploy uh bumblebee",
    "start": "4840080",
    "end": "4845199"
  },
  {
    "text": "itself as a demon [Music] set and if you are running this",
    "start": "4845199",
    "end": "4851159"
  },
  {
    "text": "traditional CLI version of bumblebee in the cluster then you can see that you can disable the uh the UI the the",
    "start": "4851159",
    "end": "4858800"
  },
  {
    "text": "console UI that I just showed you which is nice because it's consuming less memory in this",
    "start": "4858800",
    "end": "4864440"
  },
  {
    "text": "case all right I'm referencing the uh the image that I just built and I want",
    "start": "4864440",
    "end": "4871080"
  },
  {
    "text": "to expose The Matrix as well so now I should have running uh the",
    "start": "4871080",
    "end": "4878159"
  },
  {
    "text": "bumblebe pods with the new configuration let's deploy prome itself",
    "start": "4878159",
    "end": "4886560"
  },
  {
    "text": "we will deploy a pod monitor so that we are scraping bumblebee right after this one is",
    "start": "4888400",
    "end": "4894920"
  },
  {
    "text": "[Music] finished and after that since we are in a kubernetes cluster uh I will be",
    "start": "4894920",
    "end": "4902320"
  },
  {
    "text": "deploying a pod that will get an out of memory exception I'm using this",
    "start": "4902320",
    "end": "4908719"
  },
  {
    "text": "particular image AV Solutions slm leak uh the old",
    "start": "4908719",
    "end": "4914600"
  },
  {
    "text": "owner and the creator of this image is at the conference uh he visited our",
    "start": "4914600",
    "end": "4919920"
  },
  {
    "text": "booth recently yeah the guy is sitting right uh in the in the back so if you need a very good and reliable um image",
    "start": "4919920",
    "end": "4928480"
  },
  {
    "text": "Docker image that is leaking memory you should talk to him because it's a it's a great uh great op image we will be",
    "start": "4928480",
    "end": "4936280"
  },
  {
    "text": "taking a look at uh how that would work now promius is",
    "start": "4936280",
    "end": "4942840"
  },
  {
    "text": "installed yeah I I need the pro",
    "start": "4943199",
    "end": "4947120"
  },
  {
    "text": "monitor now we are scraping promes if I go to promes here I should have the UI",
    "start": "4951080",
    "end": "4956280"
  },
  {
    "text": "coming",
    "start": "4956280",
    "end": "4958638"
  },
  {
    "text": "up all right if we go to status targets we should see [Music]",
    "start": "4970520",
    "end": "4975800"
  },
  {
    "text": "that uh we are scraping it it might not appear right away so we have to wait a",
    "start": "4975800",
    "end": "4982600"
  },
  {
    "text": "bit you don't necessarily need to refresh",
    "start": "4982600",
    "end": "4987360"
  },
  {
    "text": "it maybe I ski something I",
    "start": "4992159",
    "end": "4997320"
  },
  {
    "text": "should",
    "start": "4997560",
    "end": "5000560"
  },
  {
    "text": "unchanged three more minutes and the configuration",
    "start": "5003440",
    "end": "5010960"
  },
  {
    "text": "doesn't seem to be working ah okay they are coming up good we will have the data",
    "start": "5010960",
    "end": "5016239"
  },
  {
    "text": "soon so after this let's deploy the memory leaker",
    "start": "5016239",
    "end": "5021400"
  },
  {
    "text": "application from",
    "start": "5021400",
    "end": "5024719"
  },
  {
    "text": "Arnold it's already 1.0 and if you check the pots Cube C get",
    "start": "5029000",
    "end": "5035600"
  },
  {
    "text": "pots we will see that the memory leers in Crash loop back if you are watching this right after the crash loop back you",
    "start": "5035600",
    "end": "5042719"
  },
  {
    "text": "should see that it's getting goom killed it's an actual event or status in in kubernetes itself I might not be able to",
    "start": "5042719",
    "end": "5049800"
  },
  {
    "text": "yeah oom killed uh if you go to the UI I should have all the ports in a hary",
    "start": "5049800",
    "end": "5057880"
  },
  {
    "text": "state all right and you can search for the metric ebpf",
    "start": "5060080",
    "end": "5065480"
  },
  {
    "text": "o kill as you can see the name is coming from the from the map you can execute it",
    "start": "5065480",
    "end": "5071080"
  },
  {
    "text": "and you can see some additional information these are all the labels that we populated uh that we specified",
    "start": "5071080",
    "end": "5076800"
  },
  {
    "text": "when we created our ebpf program you can see the name of the common that is uh",
    "start": "5076800",
    "end": "5082600"
  },
  {
    "text": "allocating too much memory it's called stress you can see the process ID you can see how much memory it wanted to uh",
    "start": "5082600",
    "end": "5089520"
  },
  {
    "text": "locate so it's basically up to you what kind of information you are extracting from the from the C",
    "start": "5089520",
    "end": "5095880"
  },
  {
    "text": "know all right that was it I think we still have one more slide on possible uh",
    "start": "5095880",
    "end": "5105000"
  },
  {
    "text": "improvements on on bumblebe itself um you can use Bumblebee as we",
    "start": "5105000",
    "end": "5110040"
  },
  {
    "text": "mention to get familiar with DPF you only need to focus on the actual um Cal",
    "start": "5110040",
    "end": "5115719"
  },
  {
    "text": "space um problem problems that you want to solve what you could see that was missing is um really tight uh kubernetes",
    "start": "5115719",
    "end": "5123679"
  },
  {
    "text": "integration so you could only see for example the names did the process names but not the names of the Pod that we",
    "start": "5123679",
    "end": "5129679"
  },
  {
    "text": "getting out of memory uh that was that was getting goom killed uh we are also",
    "start": "5129679",
    "end": "5135080"
  },
  {
    "text": "collaborating with inspector gget from the KFOR forms they are now working uh with uh with Microsoft and they are al",
    "start": "5135080",
    "end": "5142400"
  },
  {
    "text": "they are using our oci loading uh layer so that you can uh deploy Uh",
    "start": "5142400",
    "end": "5150000"
  },
  {
    "text": "custom ebpf uh logic with the Inspector Gadget tooling using an O packaging",
    "start": "5150000",
    "end": "5156400"
  },
  {
    "text": "layer which is which is quite nice if you want to uh contribute to bumblebee",
    "start": "5156400",
    "end": "5162000"
  },
  {
    "text": "or BCC you can take a look at uh academy. solo.io we have multiple ebpf",
    "start": "5162000",
    "end": "5168639"
  },
  {
    "text": "Labs there there the beginner one that was mostly presented here but there's also an advanced one the O kill example",
    "start": "5168639",
    "end": "5174960"
  },
  {
    "text": "is coming from there but there there you can have more details on the actual migration passes and some Advan",
    "start": "5174960",
    "end": "5181360"
  },
  {
    "text": "scenarios like putting multiple ebpf s together uh if you're interested in that",
    "start": "5181360",
    "end": "5187520"
  },
  {
    "text": "it's uh it's quite nice thank you for attending this uh this workshop and uh",
    "start": "5187520",
    "end": "5193119"
  },
  {
    "text": "please reach out if you have any uh questions after the talk yeah thank you thanks",
    "start": "5193119",
    "end": "5199559"
  },
  {
    "text": "everyone I I think we have a question for we have time for one question H if you want to speak more about it you know",
    "start": "5200800",
    "end": "5207679"
  },
  {
    "text": "you can can come to our booth and we will be there for the next hour but yeah yeah so um I was was just wondering if",
    "start": "5207679",
    "end": "5215280"
  },
  {
    "text": "you could elaborate more about the contents of the image you're creating and uh if uh if you also have some",
    "start": "5215280",
    "end": "5222600"
  },
  {
    "text": "experience with um images being on public um Registries and and how how you",
    "start": "5222600",
    "end": "5229679"
  },
  {
    "text": "handle these or are these even supported thanks yeah so I mean the the content",
    "start": "5229679",
    "end": "5235360"
  },
  {
    "text": "this of this oci image is mainly the binary basically the the same one that you would just like create with",
    "start": "5235360",
    "end": "5242840"
  },
  {
    "text": "uh you know without it um but um yeah I don't think if do you have like more",
    "start": "5242840",
    "end": "5248920"
  },
  {
    "text": "information about like what it would exactly if you would we also we also include the headers so you also don't",
    "start": "5248920",
    "end": "5254000"
  },
  {
    "text": "need to to ship those to another machine when you where you actually deploy the theod um you can also use when we",
    "start": "5254000",
    "end": "5261280"
  },
  {
    "text": "originally created bumblebee there wasn't that many public repositories",
    "start": "5261280",
    "end": "5266840"
  },
  {
    "text": "that supported this particular oci format but now if you try to push these images to uh to the docker Hub or or a",
    "start": "5266840",
    "end": "5275320"
  },
  {
    "text": "GitHub registry that that should work out of the box because they have support otherwise you can just self host your",
    "start": "5275320",
    "end": "5281639"
  },
  {
    "text": "own repository or use the one that is used by your company and uh it should just work the the support for the oi",
    "start": "5281639",
    "end": "5289159"
  },
  {
    "text": "repositor is is quite nice now yeah also thanks for the workshop by the way",
    "start": "5289159",
    "end": "5294679"
  },
  {
    "text": "thanks for [Music] attending thanks everyone and uh wish you like a good end of cubec con with",
    "start": "5294679",
    "end": "5302960"
  },
  {
    "text": "low energy probably but uh we're almost there thanks everyone safe",
    "start": "5302960",
    "end": "5308660"
  },
  {
    "text": "[Applause]",
    "start": "5308660",
    "end": "5313260"
  },
  {
    "text": "TR",
    "start": "5330119",
    "end": "5333119"
  }
]