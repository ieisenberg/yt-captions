[
  {
    "text": "okay hello everyone and welcome to my talk about uh Kubernetes API performance",
    "start": "65680",
    "end": "73360"
  },
  {
    "text": "uh I'm Marik Sharkovich i'm the SIG lead of ATC and uh and I contribute to also",
    "start": "73360",
    "end": "82080"
  },
  {
    "text": "API machinery unfortunately Maddaf was not able to to join us today so I will",
    "start": "82080",
    "end": "88560"
  },
  {
    "text": "be hope I'm enough to talk about the performance of API uh so the plan for",
    "start": "88560",
    "end": "97600"
  },
  {
    "text": "today is explain what is the uh the minefield in the title we will try to",
    "start": "97600",
    "end": "104159"
  },
  {
    "text": "understand on example why um why you can easily uh get hurt if you don't",
    "start": "104159",
    "end": "111360"
  },
  {
    "text": "understand the API performance we'll try to propose couple of ideas how we can",
    "start": "111360",
    "end": "117320"
  },
  {
    "text": "navigate and hopefully maybe we could uh diffuse",
    "start": "117320",
    "end": "122759"
  },
  {
    "text": "it uh at the end I have couple of results uh from performance metrics so",
    "start": "122759",
    "end": "128720"
  },
  {
    "text": "we we could see how it turns out so overall Kubernetes is awesome like you",
    "start": "128720",
    "end": "135680"
  },
  {
    "text": "can take your containers you can ship it i it it works really well like we have",
    "start": "135680",
    "end": "142080"
  },
  {
    "text": "pretty big conference i think it's testament to that but not always it can",
    "start": "142080",
    "end": "148640"
  },
  {
    "text": "turn out how you can think um some things are harder sometimes there are",
    "start": "148640",
    "end": "154120"
  },
  {
    "text": "incidents but I think in my experience there are something there are some areas",
    "start": "154120",
    "end": "159519"
  },
  {
    "text": "that you're just destined to fail unfortunately that are not well documented that are still a tribal",
    "start": "159519",
    "end": "165760"
  },
  {
    "text": "knowledge that is spent between maintainers and if you don't ask them uh",
    "start": "165760",
    "end": "171360"
  },
  {
    "text": "you might get uh hurt so for last year I've been looking into the API server",
    "start": "171360",
    "end": "178080"
  },
  {
    "text": "performance and hopefully we can we can diffuse some of the problems to uh",
    "start": "178080",
    "end": "184599"
  },
  {
    "text": "today so the problem that I want to talk about to you is the uh problematic usage",
    "start": "184599",
    "end": "192640"
  },
  {
    "text": "or abusive usage or of CRDs and operators so uh in one of the incidents",
    "start": "192640",
    "end": "199599"
  },
  {
    "text": "uh that uh I I was working on uh on GKE",
    "start": "199599",
    "end": "205360"
  },
  {
    "text": "we we had a pretty small cluster uh it seemed pretty pretty small relatively to",
    "start": "205360",
    "end": "211519"
  },
  {
    "text": "every the things that we run but still customer upgraded as a operator",
    "start": "211519",
    "end": "218799"
  },
  {
    "text": "and everything worked for two weeks and just when everyone want you already",
    "start": "218799",
    "end": "224799"
  },
  {
    "text": "thought that we are done uh the memory spiked 20 times",
    "start": "224799",
    "end": "230040"
  },
  {
    "text": "so what happened like how and how why why did did it spike every every like",
    "start": "230040",
    "end": "236000"
  },
  {
    "text": "couple of days and totally took down the control",
    "start": "236000",
    "end": "241159"
  },
  {
    "text": "plane uh and how at like 50 node cluster",
    "start": "241159",
    "end": "247120"
  },
  {
    "text": "can can go down well Kubernetes apparently supports 5,000 nodes so since",
    "start": "247120",
    "end": "254319"
  },
  {
    "text": "1.6 six Kubernetes runs uh a weekly test that has 5,000 nodes 15,000 pots or",
    "start": "254319",
    "end": "262079"
  },
  {
    "text": "150,000 pots 10,000 services and everything so it should work right uh",
    "start": "262079",
    "end": "268880"
  },
  {
    "text": "the problem is Kubernetes tests its own scalability focusing its own main",
    "start": "268880",
    "end": "275280"
  },
  {
    "text": "pipelines and its own concerns so when you go into CRDs you might find that the",
    "start": "275280",
    "end": "281360"
  },
  {
    "text": "project that you have picked from the shelf never tested anything beyond like",
    "start": "281360",
    "end": "286400"
  },
  {
    "text": "10 nodes uh and a lot have happened since 1.6 so now everything is a CRD uh and",
    "start": "286400",
    "end": "296320"
  },
  {
    "text": "yeah anyone can create a new uh which means there can be a lot of uh things",
    "start": "296320",
    "end": "302240"
  },
  {
    "text": "that are lower quality uh one of the maybe unique patterns about",
    "start": "302240",
    "end": "310000"
  },
  {
    "text": "Kubernetes that people forget is that compared to traditional application like",
    "start": "310000",
    "end": "315520"
  },
  {
    "text": "SQL uh you're in Kubernetes you're not interested in a single user or a single",
    "start": "315520",
    "end": "321840"
  },
  {
    "text": "or some data related to this user uh in Kubernetes we we treat we we still have",
    "start": "321840",
    "end": "328320"
  },
  {
    "text": "a a database like CD but reality is uh the the consumers of API are controlled",
    "start": "328320",
    "end": "334960"
  },
  {
    "text": "controllers and controllers what they do is they reconcile so to reconcile they need to find old state understand it",
    "start": "334960",
    "end": "343039"
  },
  {
    "text": "make a decision and transfer to the new state but they are really processing",
    "start": "343039",
    "end": "348320"
  },
  {
    "text": "everything that happens in in in cluster so it's not one to one user comes or one",
    "start": "348320",
    "end": "354880"
  },
  {
    "text": "client comes and makes one request and they fetch one one row of data you have one controller that comes and fetches",
    "start": "354880",
    "end": "361600"
  },
  {
    "text": "150,000 pots how do you handle it what Kubernetes did uh so",
    "start": "361600",
    "end": "368520"
  },
  {
    "text": "like I could say or personally Kubernetes was originally not really",
    "start": "368520",
    "end": "373759"
  },
  {
    "text": "designed for uh large data uh or at least for the CRDs that we have today uh",
    "start": "373759",
    "end": "380880"
  },
  {
    "text": "that going back to the incident it turned out that customer had 100 or 500",
    "start": "380880",
    "end": "387039"
  },
  {
    "text": "megabytes of data in one of their resources how do you how do you handle that you have a controller or a client",
    "start": "387039",
    "end": "394240"
  },
  {
    "text": "that every couple of seconds fetches 500 uh megabytes of data and each of those",
    "start": "394240",
    "end": "400400"
  },
  {
    "text": "requests was allocating gigabytes and gigabytes so even though uh Kubernetes",
    "start": "400400",
    "end": "408000"
  },
  {
    "text": "has limits has quotas uh each object can be one megabyte or over one megabyte in",
    "start": "408000",
    "end": "414560"
  },
  {
    "text": "size and there is you you you can easily uh you can easily get the",
    "start": "414560",
    "end": "420800"
  },
  {
    "text": "size of a resource or size of all the pots or uh or CRDs or your config maps",
    "start": "420800",
    "end": "427039"
  },
  {
    "text": "to gigabytes in size and really Kubernetes overload production doesn't",
    "start": "427039",
    "end": "432560"
  },
  {
    "text": "work here um AP uh uh APF so API",
    "start": "432560",
    "end": "437599"
  },
  {
    "text": "priority and fairness mostly accounts for the CPU usage and doesn't account for memory so those five 400 mega",
    "start": "437599",
    "end": "445440"
  },
  {
    "text": "gigabytes of data that was allocated was just coming from couple of controllers that were consistently listing a lot of",
    "start": "445440",
    "end": "452680"
  },
  {
    "text": "data and they were getting them but with the cost of API server",
    "start": "452680",
    "end": "458120"
  },
  {
    "text": "oming uh so let's deep dive why uh how those 400 gigabytes came out so first",
    "start": "458120",
    "end": "466479"
  },
  {
    "text": "when you make a list from the client uh be uh kubernetes client the request goes",
    "start": "466479",
    "end": "473039"
  },
  {
    "text": "through API server is directly fetched from the CD uh API server just transfers",
    "start": "473039",
    "end": "479360"
  },
  {
    "text": "the request from a list to a range which is just a similar but different se a",
    "start": "479360",
    "end": "485199"
  },
  {
    "text": "little bit different semantically uh at CD then fetches the data reads it",
    "start": "485199",
    "end": "490479"
  },
  {
    "text": "from the disk and serial uh des serializes it so it can uh prepare the",
    "start": "490479",
    "end": "497080"
  },
  {
    "text": "response next you need to uh serialize the response into proto",
    "start": "497080",
    "end": "503400"
  },
  {
    "text": "because uses gRPC so it needs to write the protobuff serialization it sends",
    "start": "503400",
    "end": "509680"
  },
  {
    "text": "this data into the API server that then receives one like in this example half a",
    "start": "509680",
    "end": "515760"
  },
  {
    "text": "gigabyte of data and loads it also to memory so now we have three",
    "start": "515760",
    "end": "522039"
  },
  {
    "text": "allocations uh if you want to use the data you cannot use the just bytes or a blob of blob of bytes you need to decode",
    "start": "522039",
    "end": "530160"
  },
  {
    "text": "it so uh API server needs to decodes the data and again which requires copying it",
    "start": "530160",
    "end": "537200"
  },
  {
    "text": "uh to um yeah copying the memory uh sometimes depending on your uh",
    "start": "537200",
    "end": "543959"
  },
  {
    "text": "request uh API server can in the storage layer can do some filtering so that for",
    "start": "543959",
    "end": "550240"
  },
  {
    "text": "example when a node or a cubelet fetches uh pots on its node will not return them",
    "start": "550240",
    "end": "557040"
  },
  {
    "text": "uh it will not get back all the pots in the cluster it would just get subset of",
    "start": "557040",
    "end": "563080"
  },
  {
    "text": "them but still in most cases for controllers filtering doesn't really filter it's just a pass through and at",
    "start": "563080",
    "end": "571040"
  },
  {
    "text": "the end to for client to receive the the response they need API server needs to",
    "start": "571040",
    "end": "577040"
  },
  {
    "text": "encode the data back again so if we count we have five allocations that's a",
    "start": "577040",
    "end": "583839"
  },
  {
    "text": "lot if you want to fetch a gigabyte you will get five gigabytes an API uh if",
    "start": "583839",
    "end": "589040"
  },
  {
    "text": "there you have multiple clients like this and they're misbehaving unfortunately Kubernetes",
    "start": "589040",
    "end": "595200"
  },
  {
    "text": "will not protect you and those 500 GB were just 10 clients or 20 clients that",
    "start": "595200",
    "end": "600240"
  },
  {
    "text": "were fetching this this memory and alloc pushing API server to allocate and",
    "start": "600240",
    "end": "606279"
  },
  {
    "text": "allocate uh to mitigate this Kubernetes uses something like called caching it",
    "start": "606279",
    "end": "612640"
  },
  {
    "text": "uses caching uh if you want uh there was a previous talk my madav uh about exact",
    "start": "612640",
    "end": "618480"
  },
  {
    "text": "details about the how cache works but let's look at it again uh quickly",
    "start": "618480",
    "end": "626160"
  },
  {
    "text": "uh so cache is a uh component in API server that has its own storage which it",
    "start": "626160",
    "end": "633760"
  },
  {
    "text": "persist uh which has uh which stores the subset of states from CD and this uh",
    "start": "633760",
    "end": "642079"
  },
  {
    "text": "cache is filled by API server just r requesting all the the data uh data from",
    "start": "642079",
    "end": "648880"
  },
  {
    "text": "CD decoding it once and storing in memory so cache has already ready already uh has uh prepared a response if",
    "start": "648880",
    "end": "658640"
  },
  {
    "text": "uh for a request that is ready to be or it's already decoded and it's ready to be",
    "start": "658640",
    "end": "663959"
  },
  {
    "text": "used if uh because it we cannot do it for each request and the data changes we",
    "start": "663959",
    "end": "671120"
  },
  {
    "text": "cache also uh maintains an open watch to add CD that will send uh updates on each",
    "start": "671120",
    "end": "678160"
  },
  {
    "text": "change so instead of if we have half a gigabyte of data still updates might be",
    "start": "678160",
    "end": "684160"
  },
  {
    "text": "just one megabyte because one pod change or one change in the object will um will",
    "start": "684160",
    "end": "690320"
  },
  {
    "text": "send only one event which will have just one megabyte so we are now just decoding one megabyte at the time which is much",
    "start": "690320",
    "end": "697120"
  },
  {
    "text": "better than before uh so if there is a request from the",
    "start": "697120",
    "end": "702160"
  },
  {
    "text": "client we will just go to the cache and from the storage uh API server will just",
    "start": "702160",
    "end": "708240"
  },
  {
    "text": "need to encode the data one uh the data so resulting in just one allocations isn't it great like caching",
    "start": "708240",
    "end": "715640"
  },
  {
    "text": "is great we got back from five to just one allocation is it enough",
    "start": "715640",
    "end": "721920"
  },
  {
    "text": "unfortunately no if you look at the full table uh from all possible arguments in",
    "start": "721920",
    "end": "728720"
  },
  {
    "text": "uh API I server only two cases use really cache and two cases use cache but",
    "start": "728720",
    "end": "734800"
  },
  {
    "text": "without ignore a limit so if you you cannot uh you cannot limit the data you",
    "start": "734800",
    "end": "740160"
  },
  {
    "text": "can just get uh gigabytes of response so that's a lot of reds um making it very",
    "start": "740160",
    "end": "748079"
  },
  {
    "text": "hard for most users to to know what what kind of performance uh they're getting",
    "start": "748079",
    "end": "754079"
  },
  {
    "text": "because they don't know if they're hitting cache if or not uh and the top line is the default configuration if you",
    "start": "754079",
    "end": "760480"
  },
  {
    "text": "request by default uh uh default empty request without any parameters to kubernetes it will be delegated to",
    "start": "760480",
    "end": "768360"
  },
  {
    "text": "CD um so this is a state of Kubernetes 1 let's see if we can uh improve it so",
    "start": "768360",
    "end": "778760"
  },
  {
    "text": "uh so how we can uh if the situation is",
    "start": "778760",
    "end": "784240"
  },
  {
    "text": "so bad is there any way that we could navigate it so if we uh if there is a",
    "start": "784240",
    "end": "790720"
  },
  {
    "text": "full minefield of wrong decisions that we can wrong parameters that we can pick",
    "start": "790720",
    "end": "796240"
  },
  {
    "text": "how we can know what path to take between the the minds uh so first step",
    "start": "796240",
    "end": "802320"
  },
  {
    "text": "would be reading the manual i I assume this is CubeCon conference everyone here read documentation Kubernetes",
    "start": "802320",
    "end": "809320"
  },
  {
    "text": "documentation everyone read your cloud provider documentation because it",
    "start": "809320",
    "end": "814560"
  },
  {
    "text": "basically says you should not do uh what I shown before you should not have huge",
    "start": "814560",
    "end": "819839"
  },
  {
    "text": "resources you should limit your sizes uh and this is consistent with the recommendation of six scalability of",
    "start": "819839",
    "end": "826800"
  },
  {
    "text": "using list list watch pattern this is consistent with scalability uh trying to set resource version using protobuff to",
    "start": "826800",
    "end": "833680"
  },
  {
    "text": "reduce allocations uh GK also recommends uh limiting the storage and I personally",
    "start": "833680",
    "end": "840320"
  },
  {
    "text": "I would say like you should you should really watch out for the sizes of the objects to make APF work",
    "start": "840320",
    "end": "847079"
  },
  {
    "text": "better uh second option would be to run your own scalability tests like if you",
    "start": "847079",
    "end": "852880"
  },
  {
    "text": "cannot uh if you cannot read or know where the minds are can you have a tool",
    "start": "852880",
    "end": "858800"
  },
  {
    "text": "to to find it and the answer is yes you can run your own scalability test to verify before you go to production",
    "start": "858800",
    "end": "865519"
  },
  {
    "text": "before you upgrade anything that there was no huge regression and until you",
    "start": "865519",
    "end": "871040"
  },
  {
    "text": "really run uh a similar environment and until you validate the dimens dimensions",
    "start": "871040",
    "end": "878480"
  },
  {
    "text": "that uh that you run in production you don't really know there could be just a a a small bug or small change in a one",
    "start": "878480",
    "end": "887680"
  },
  {
    "text": "line change in the PR or between versions or one small change between versions of operator that you run that",
    "start": "887680",
    "end": "894560"
  },
  {
    "text": "could totally go from using a cache to sending requests to CD resulting in huge",
    "start": "894560",
    "end": "900079"
  },
  {
    "text": "amount of allocations uh so I think we should encourage all the projects in open source to run to set their own",
    "start": "900079",
    "end": "906880"
  },
  {
    "text": "scalability goals and ask for budget from CNCF to to do the testing like if",
    "start": "906880",
    "end": "912480"
  },
  {
    "text": "we care about our production why we should run scale test everything our own",
    "start": "912480",
    "end": "918480"
  },
  {
    "text": "it's an open source project we should agree as a community to set a common goal that will be maintained throughout",
    "start": "918480",
    "end": "925040"
  },
  {
    "text": "all the releases so if the two first options failed can",
    "start": "925040",
    "end": "931120"
  },
  {
    "text": "we can we diffuse can we diffuse and remove all the mines uh can we live with",
    "start": "931120",
    "end": "936480"
  },
  {
    "text": "the can we improve the situation and make it available so uh to everyone so",
    "start": "936480",
    "end": "942639"
  },
  {
    "text": "everyone can understand the scalability uh and not need to to uh to read read a",
    "start": "942639",
    "end": "948800"
  },
  {
    "text": "book about this uh but before we go into fixing Kubernetes let's uh uh first we need to",
    "start": "948800",
    "end": "957120"
  },
  {
    "text": "take a look what is a resource version so a resource version works as a uh",
    "start": "957120",
    "end": "963199"
  },
  {
    "text": "logical clock a global int 64 uh that every time anything happens to CD uh or",
    "start": "963199",
    "end": "971279"
  },
  {
    "text": "kubernetes any write any update uh this this number will be inc uh increased so",
    "start": "971279",
    "end": "977759"
  },
  {
    "text": "that we know uh we have a single global order of everything that happens in the",
    "start": "977759",
    "end": "984360"
  },
  {
    "text": "system uh this brings us to the semantic of the list so when you have a uh a a",
    "start": "984360",
    "end": "992519"
  },
  {
    "text": "operator or a controller or a user asking about a list they really ask",
    "start": "992519",
    "end": "998079"
  },
  {
    "text": "about some particular meaning uh or some particular snapshot of the time so",
    "start": "998079",
    "end": "1004000"
  },
  {
    "text": "Kubernetes like uh and CD support not only getting the newest data from from",
    "start": "1004000",
    "end": "1009920"
  },
  {
    "text": "latest state but it allows uh they allow you to pick uh pick historical values so",
    "start": "1009920",
    "end": "1017839"
  },
  {
    "text": "snapshots of the state from before uh you could ask",
    "start": "1017839",
    "end": "1022959"
  },
  {
    "text": "uh you can ask Kubernetes about any state of the word that it was aware so",
    "start": "1022959",
    "end": "1028000"
  },
  {
    "text": "basically uh ask hey give me any response any from any time that you have",
    "start": "1028000",
    "end": "1033438"
  },
  {
    "text": "you could restrict the staleness of the data by asking that the response will be not older than some particular last uh",
    "start": "1033439",
    "end": "1042480"
  },
  {
    "text": "time so for example from last what you've seen uh you could also uh ask",
    "start": "1042480",
    "end": "1048799"
  },
  {
    "text": "about the most recent so normally for most databases you usually ask for the default what is the state of the newest",
    "start": "1048799",
    "end": "1055280"
  },
  {
    "text": "state that is available and this is the default when you send a request in Kubernetes and you can ask about",
    "start": "1055280",
    "end": "1062000"
  },
  {
    "text": "historical sit about state of uh of Kubernetes from uh some exact resource",
    "start": "1062000",
    "end": "1068960"
  },
  {
    "text": "version which would be uh asking Kubernetes to go back in time and check what was a state of Kubernetes I know",
    "start": "1068960",
    "end": "1075760"
  },
  {
    "text": "from couple of minutes ago there is also a continuation which which",
    "start": "1075760",
    "end": "1081120"
  },
  {
    "text": "is um a mechanism that you need to support pagenation you need to be able",
    "start": "1081120",
    "end": "1088000"
  },
  {
    "text": "it's basically extension of the exact um semantic that you allow not only ask",
    "start": "1088000",
    "end": "1093120"
  },
  {
    "text": "about some older snapshot but also with some um shift so you don't you don't",
    "start": "1093120",
    "end": "1099440"
  },
  {
    "text": "need to read the same keys so you you want to continue the list uh but from um",
    "start": "1099440",
    "end": "1106559"
  },
  {
    "text": "you want to continue list from some old snapshot but you don't want to see the same keys at the beginning so you could",
    "start": "1106559",
    "end": "1112880"
  },
  {
    "text": "say it's a traing machine so let's look how those",
    "start": "1112880",
    "end": "1119520"
  },
  {
    "text": "semantics work on the uh caching so if you ask about any resource version you",
    "start": "1119520",
    "end": "1126960"
  },
  {
    "text": "will get just any data that is currently available in the cache assuming the cache is initiated and ready to serve",
    "start": "1126960",
    "end": "1134480"
  },
  {
    "text": "data uh at CD could be far be beyond forward maybe the watch hasn't yet been",
    "start": "1134480",
    "end": "1140600"
  },
  {
    "text": "updated so the cache can be stale but you will ask you will get a response from the cache that's easy and cheap",
    "start": "1140600",
    "end": "1147880"
  },
  {
    "text": "way you can ask about the not older than and it will just make Kubernetes wait",
    "start": "1147880",
    "end": "1154080"
  },
  {
    "text": "until the resource version is uh in the cache is fresh enough and when it is uh",
    "start": "1154080",
    "end": "1160400"
  },
  {
    "text": "it it will respond but here the requirement that there needs to be other client that will update the resource for",
    "start": "1160400",
    "end": "1166799"
  },
  {
    "text": "you so first there needs to be a client that will send an update and will make increase the revision in net CD that",
    "start": "1166799",
    "end": "1172960"
  },
  {
    "text": "will cause a new event to go to the cache and update the resource version here to 120 which is more than one",
    "start": "1172960",
    "end": "1180480"
  },
  {
    "text": "request at one uh revision uh or resource version sorry uh 100 and that",
    "start": "1180480",
    "end": "1185760"
  },
  {
    "text": "will allow uh the weight to stop and you will get back the response so we have two things that we",
    "start": "1185760",
    "end": "1192960"
  },
  {
    "text": "can easily serve from the cache what about the last three so those are the newest improvements in Kubernetes uh",
    "start": "1192960",
    "end": "1199840"
  },
  {
    "text": "since 130 so let's look how we can uh how those problems were sol",
    "start": "1199840",
    "end": "1205640"
  },
  {
    "text": "solved to get mo most recent let's look how CD does it so when you if you",
    "start": "1205640",
    "end": "1213440"
  },
  {
    "text": "disable cache in Kubernetes um the most recent uh request will be just ser",
    "start": "1213440",
    "end": "1220160"
  },
  {
    "text": "served from CD and CD will serve you what is the latest state in it so cache",
    "start": "1220160",
    "end": "1225919"
  },
  {
    "text": "could be stale but HCD will always know what is the latest state of it so this",
    "start": "1225919",
    "end": "1231039"
  },
  {
    "text": "goes to the back to the definitions or to the previous slide of um API server",
    "start": "1231039",
    "end": "1236559"
  },
  {
    "text": "working as just as a pass through but on cache side how do we know",
    "start": "1236559",
    "end": "1242880"
  },
  {
    "text": "what is the freshest data incd like we have some version resource version incd",
    "start": "1242880",
    "end": "1248240"
  },
  {
    "text": "how we know this is the newest resource version in the in the whole cluster uh so to do that we need to first we maybe",
    "start": "1248240",
    "end": "1256799"
  },
  {
    "text": "we could ask CD like let's ask CD what is its newest version so we can make a",
    "start": "1256799",
    "end": "1262080"
  },
  {
    "text": "simple uh very cheap request to tocd and ask us ask it to give us the resource",
    "start": "1262080",
    "end": "1268559"
  },
  {
    "text": "version and then we know that we need to wait for uh if it responds with resource",
    "start": "1268559",
    "end": "1273760"
  },
  {
    "text": "version 100 we know that we need to wait until uh re revision hits 100",
    "start": "1273760",
    "end": "1280400"
  },
  {
    "text": "uh and second to not need to wait for any other things in the system so any",
    "start": "1280400",
    "end": "1286000"
  },
  {
    "text": "other update we also need to uh do some fixes in the watch so when we know we",
    "start": "1286000",
    "end": "1292320"
  },
  {
    "text": "need we are waiting for resource version 100 and current cache is not up to date",
    "start": "1292320",
    "end": "1298240"
  },
  {
    "text": "enough we can go to watch and maybe poke it to to ask for progress so uh at CD",
    "start": "1298240",
    "end": "1304720"
  },
  {
    "text": "for long long time I think like since 3.3 uh supports uh watch progress",
    "start": "1304720",
    "end": "1311520"
  },
  {
    "text": "notification so the client here API server can request an update uh on uh",
    "start": "1311520",
    "end": "1318360"
  },
  {
    "text": "oncd if you are aware of the bookmarking mechanism in kubernetes it's the same principle just on kubernetes",
    "start": "1318360",
    "end": "1325640"
  },
  {
    "text": "site so if um maybe there is no update in HCD but still if we requested a",
    "start": "1325640",
    "end": "1331840"
  },
  {
    "text": "progress HCD is happy to give us uh the the the confirmation that yes you are up",
    "start": "1331840",
    "end": "1337679"
  },
  {
    "text": "to date maybe there was no event that's and no maybe not any data didn't change",
    "start": "1337679",
    "end": "1342880"
  },
  {
    "text": "but still it can inform the cache that it's up to date with the resource",
    "start": "1342880",
    "end": "1348159"
  },
  {
    "text": "version and this allows us to uh to fulfill the check of uh minimal required",
    "start": "1348159",
    "end": "1353919"
  },
  {
    "text": "resource version and get a response to our client so we are done with uh the first",
    "start": "1353919",
    "end": "1361200"
  },
  {
    "text": "one uh or the third one uh and this feature is called uh consistent reads",
    "start": "1361200",
    "end": "1366559"
  },
  {
    "text": "from cache and it's implemented in Kubernetes 131 by",
    "start": "1366559",
    "end": "1371960"
  },
  {
    "text": "default uh and another case that is much",
    "start": "1371960",
    "end": "1377120"
  },
  {
    "text": "harder is what do we do if a client request about exact resource version so",
    "start": "1377120",
    "end": "1383520"
  },
  {
    "text": "here at CD can magically go back in time and and understand if user is asking",
    "start": "1383520",
    "end": "1390720"
  },
  {
    "text": "about the old resource version and has still the data to to serve uh the client",
    "start": "1390720",
    "end": "1396880"
  },
  {
    "text": "so it will be able to send uh a resource version with uh for equal 42 but on",
    "start": "1396880",
    "end": "1404240"
  },
  {
    "text": "cache side we don't have this information we don't store all data we",
    "start": "1404240",
    "end": "1409600"
  },
  {
    "text": "don't know how how uh cache should should how cache looked like five",
    "start": "1409600",
    "end": "1415360"
  },
  {
    "text": "minutes ago so can we implement that for uh to to do that we",
    "start": "1415360",
    "end": "1420799"
  },
  {
    "text": "need snapshots but before we go to snapshots we need something that supports",
    "start": "1420799",
    "end": "1426600"
  },
  {
    "text": "snapshotting so in Kubernetes uh 32 we introduced an a separate a new",
    "start": "1426600",
    "end": "1433200"
  },
  {
    "text": "reimplementation of the storage for cache which is based on bit trees and bites are awesome so not only it brought",
    "start": "1433200",
    "end": "1442120"
  },
  {
    "text": "25% performance improvement reduce allocations by uh 15% but also",
    "start": "1442120",
    "end": "1448400"
  },
  {
    "text": "introduced a new superpower we can snapshot and clone the cache so not only",
    "start": "1448400",
    "end": "1454240"
  },
  {
    "text": "we get one superhero we can get at any moment as many as we want so",
    "start": "1454240",
    "end": "1461159"
  },
  {
    "text": "uh so like I said we can clone the cache so if the so if there is a watch event",
    "start": "1461159",
    "end": "1467840"
  },
  {
    "text": "we no longer need to update this the storage and lose the historical point like previous version we can now get",
    "start": "1467840",
    "end": "1475200"
  },
  {
    "text": "this information and clone the storage before we apply a new change",
    "start": "1475200",
    "end": "1482480"
  },
  {
    "text": "and so and we can do it multiple times so if we get resource version 20 we can",
    "start": "1482480",
    "end": "1489279"
  },
  {
    "text": "save it as a snapshot with resource version 20 if we get another event we can clone this this storage and get and",
    "start": "1489279",
    "end": "1497039"
  },
  {
    "text": "update it with with new event that increases the revision to 42 and now we have two two snapshots and we can do it",
    "start": "1497039",
    "end": "1505039"
  },
  {
    "text": "again and again on every and this allows us to have a full history of everything",
    "start": "1505039",
    "end": "1510559"
  },
  {
    "text": "that happened all the snapshots of all the states of CD in memory ready to uh",
    "start": "1510559",
    "end": "1516480"
  },
  {
    "text": "decoded from HCD and ready to be served so if a client request about resource",
    "start": "1516480",
    "end": "1522640"
  },
  {
    "text": "version uh 42 we can just simply go to this snapshot",
    "start": "1522640",
    "end": "1528480"
  },
  {
    "text": "and if we don't have resource version because we I watch could be or watch cache could be not initialized or could",
    "start": "1528480",
    "end": "1536159"
  },
  {
    "text": "has a cleanup mechanism and we might not be able we will still delegate the request to CD because we want to be we",
    "start": "1536159",
    "end": "1543600"
  },
  {
    "text": "don't want break our users we want to be consistent with the previous behavior",
    "start": "1543600",
    "end": "1549720"
  },
  {
    "text": "uh so this feature is called list from snapshot and it's now alpha in 133 which",
    "start": "1549720",
    "end": "1557679"
  },
  {
    "text": "means it's still not uh enabled by default and we are validating it uh it",
    "start": "1557679",
    "end": "1563200"
  },
  {
    "text": "in our testing and we are validating it want maybe you to help us validate it to",
    "start": "1563200",
    "end": "1568960"
  },
  {
    "text": "make sure that it's it's uh production ready but hopefully we can solve uh we",
    "start": "1568960",
    "end": "1575279"
  },
  {
    "text": "can bring it to beta and make it it default in 34 uh so this solves for us the case of",
    "start": "1575279",
    "end": "1583279"
  },
  {
    "text": "exact and the continuation like I mentioned continuation just is uh uh um",
    "start": "1583279",
    "end": "1589360"
  },
  {
    "text": "a case additional case for the exact with additional pre uh additional key uh or shipped in a",
    "start": "1589360",
    "end": "1597919"
  },
  {
    "text": "keys that we read and this works up to 75 seconds because we clean up the watch",
    "start": "1597919",
    "end": "1602960"
  },
  {
    "text": "cache uh after after the events are older than 75 seconds",
    "start": "1602960",
    "end": "1608880"
  },
  {
    "text": "which is enough uh for like 90% of cases so can we",
    "start": "1608880",
    "end": "1616360"
  },
  {
    "text": "celebrate almost uh if you read JSON code or if you ever",
    "start": "1616360",
    "end": "1621919"
  },
  {
    "text": "tested API server even serving from cache will require you to to do more",
    "start": "1621919",
    "end": "1627039"
  },
  {
    "text": "allocations uh uh because JSON was not really also designed to handle large data uh so if",
    "start": "1627039",
    "end": "1636000"
  },
  {
    "text": "you send if you request from API server 1 gigabyte or you will uh API server",
    "start": "1636000",
    "end": "1642080"
  },
  {
    "text": "memory will increase by around two so instead of having just one uh",
    "start": "1642080",
    "end": "1650320"
  },
  {
    "text": "allocations in the encoder we'll get we'll double that and that's also not",
    "start": "1650320",
    "end": "1655799"
  },
  {
    "text": "great so maybe we could fix that uh the answer is yes in uh there is a uh cap uh",
    "start": "1655799",
    "end": "1664400"
  },
  {
    "text": "streaming collection encoding in 133 that is enabled by default so it",
    "start": "1664400",
    "end": "1669520"
  },
  {
    "text": "immediately went to uh to beta and it basically reimplementation of JSON and",
    "start": "1669520",
    "end": "1676919"
  },
  {
    "text": "protocoding uh and this makes it really efficient uh maybe just to give you hope",
    "start": "1676919",
    "end": "1685679"
  },
  {
    "text": "uh we we do this custom this custom implementation is assumed to be temporary because Golang uh is working",
    "start": "1685679",
    "end": "1691919"
  },
  {
    "text": "on a better implementation of JSON encoder version two that will solve this",
    "start": "1691919",
    "end": "1696960"
  },
  {
    "text": "problem but we want to bring the benefits to you a quickie quick quicker so the next Kubernetes release will not",
    "start": "1696960",
    "end": "1704000"
  },
  {
    "text": "require any additional memory for encoding at least for JSON uh and proto",
    "start": "1704000",
    "end": "1709640"
  },
  {
    "text": "protobuff so this instead of writing uh instead of uh taking half a gigabyte of",
    "start": "1709640",
    "end": "1715600"
  },
  {
    "text": "payload and encoding into one huge gig uh gigabyte blob it will just stream",
    "start": "1715600",
    "end": "1721919"
  },
  {
    "text": "objects one by one making it making allocations extreme much much",
    "start": "1721919",
    "end": "1728840"
  },
  {
    "text": "lower i promise performance results this is our official benchmark for for this for all of those those efforts uh so",
    "start": "1728840",
    "end": "1736240"
  },
  {
    "text": "benchmarking a list has gone down from 70 GB of memory usage to just",
    "start": "1736240",
    "end": "1744039"
  },
  {
    "text": "three uh so to summarize uh caching is hard uh it took Kubernetes a very long",
    "start": "1744039",
    "end": "1751360"
  },
  {
    "text": "time and still there is some work to do but we will get it right and thanks to",
    "start": "1751360",
    "end": "1756720"
  },
  {
    "text": "that we will the memory will problems will disappear",
    "start": "1756720",
    "end": "1762080"
  },
  {
    "text": "before 131 uh you need the default requests to Kubernetes needed uh were or",
    "start": "1762080",
    "end": "1769360"
  },
  {
    "text": "were served from HCD making it not very efficient but thanks for to 131",
    "start": "1769360",
    "end": "1775039"
  },
  {
    "text": "improvements now even default request will uh not require as much memory as",
    "start": "1775039",
    "end": "1780799"
  },
  {
    "text": "before uh and streaming in 131 will almost eliminate uh any memory",
    "start": "1780799",
    "end": "1787279"
  },
  {
    "text": "allocations in in Kubernetes and CD uh thanks Thanks to the streaming list and",
    "start": "1787279",
    "end": "1793919"
  },
  {
    "text": "hopefully we'll get the uh list from storage working soon in the next release",
    "start": "1793919",
    "end": "1799039"
  },
  {
    "text": "and that would make Kubernetes fully safe uh from memory perspective so thank",
    "start": "1799039",
    "end": "1805200"
  },
  {
    "text": "you that's all from me uh this is a feedback QR code and uh we are open to",
    "start": "1805200",
    "end": "1811120"
  },
  {
    "text": "questions",
    "start": "1811120",
    "end": "1814120"
  },
  {
    "text": "[Music] [Applause]",
    "start": "1816730",
    "end": "1821419"
  },
  {
    "text": "hi um I was just kind of wondering so like if we're having these noisy",
    "start": "1828960",
    "end": "1834960"
  },
  {
    "text": "neighbor problems when we're using CRDs inside of the cluster like I guess that's sort of the perspective that I have here where like you know the the",
    "start": "1834960",
    "end": "1841679"
  },
  {
    "text": "memory usage here is exceeding our expectations and what the how the API server works like why do we encourage",
    "start": "1841679",
    "end": "1848720"
  },
  {
    "text": "movement towards like CRDs and sort of using Kubernetes as like a low code",
    "start": "1848720",
    "end": "1854559"
  },
  {
    "text": "solution for creating and managing resources than like externalizing these",
    "start": "1854559",
    "end": "1859600"
  },
  {
    "text": "things like when should you and shouldn't you use CRDs I guess",
    "start": "1859600",
    "end": "1865200"
  },
  {
    "text": "I think or extending Kubernetes is awesome and a lot of work has been put",
    "start": "1865200",
    "end": "1871520"
  },
  {
    "text": "into that it's still I would say uh there was I think the assumption is",
    "start": "1871520",
    "end": "1878559"
  },
  {
    "text": "there were not many project that use CRD do scale testing and Kubernetes itself",
    "start": "1878559",
    "end": "1884640"
  },
  {
    "text": "because it doesn't have default uh CRD let's say example CRD that it will scale",
    "start": "1884640",
    "end": "1891840"
  },
  {
    "text": "test because it doesn't want to opinionate it then you get into the problem CRDs are not scale tested and we",
    "start": "1891840",
    "end": "1897200"
  },
  {
    "text": "delegated to the other projects uh as for doing it externally uh I like there",
    "start": "1897200",
    "end": "1903279"
  },
  {
    "text": "are options to serve uh extend Kubernetes uh by running a separate API",
    "start": "1903279",
    "end": "1908799"
  },
  {
    "text": "server or your custom reimplement of API server it just turned out to be too hard for most users so this it works some for",
    "start": "1908799",
    "end": "1916720"
  },
  {
    "text": "some use cases like like metric server but uh but that but most users just want",
    "start": "1916720",
    "end": "1924080"
  },
  {
    "text": "don't want to manage CD they don't want to manage write their own API server they just want to inject so uh I don't",
    "start": "1924080",
    "end": "1931679"
  },
  {
    "text": "know if we don't encourage it like it but it's basically still work I would say it's still working in progress and",
    "start": "1931679",
    "end": "1938000"
  },
  {
    "text": "we we need to catch up performance needs to catch up for the biggest projects that currently exist in in the ecosystem",
    "start": "1938000",
    "end": "1946080"
  },
  {
    "text": "thank you so about the JSON uh encoding related",
    "start": "1946080",
    "end": "1953279"
  },
  {
    "text": "performance gains and memory gains I guess um are you pre-enccoding the list response already or are you just",
    "start": "1953279",
    "end": "1959840"
  },
  {
    "text": "converting the pod list response to a JSON stream response like you know I",
    "start": "1959840",
    "end": "1964880"
  },
  {
    "text": "guess one object per line sort of thing so this is not related to object per line or maybe do you mean",
    "start": "1964880",
    "end": "1974320"
  },
  {
    "text": "watch list effort so at the end the um I guess memory usage dropped a big drop",
    "start": "1974320",
    "end": "1981200"
  },
  {
    "text": "that you got in the API server was that related to um JSON encoding yeah yes",
    "start": "1981200",
    "end": "1986480"
  },
  {
    "text": "that that is the results from implementing JSON custom JSON encoder i see so that JSON encoder basically is it",
    "start": "1986480",
    "end": "1993120"
  },
  {
    "text": "like just stitching the objects together in a custom encoder or is it like just not allocating too much me i'm trying to",
    "start": "1993120",
    "end": "1998880"
  },
  {
    "text": "figure out why is it so before we had one structure like list list pod list",
    "start": "1998880",
    "end": "2004320"
  },
  {
    "text": "let's say and within this pod list you can have gigabyte of data within the array that has items right so instead of",
    "start": "2004320",
    "end": "2010320"
  },
  {
    "text": "doing that uh I I the custom implementation is basically detecting oh",
    "start": "2010320",
    "end": "2016640"
  },
  {
    "text": "uh or trying to recognize what kind of object it is if it's a list object and has this fields then we will do custom",
    "start": "2016640",
    "end": "2023600"
  },
  {
    "text": "implementation of the at least the top level and it will just So reimplement the JSON as you like",
    "start": "2023600",
    "end": "2031200"
  },
  {
    "text": "write token by token and then when come to list it will write each thing separately so Kubernetes by by its own",
    "start": "2031200",
    "end": "2037640"
  },
  {
    "text": "supports the writer uh interface u but and technically JSON too but if",
    "start": "2037640",
    "end": "2045039"
  },
  {
    "text": "you look underneath the implementation JSON it just takes that whole list",
    "start": "2045039",
    "end": "2050280"
  },
  {
    "text": "structure and encodes it in memory into bytes and then passes it to the writer so which means it it doesn't do release",
    "start": "2050280",
    "end": "2057440"
  },
  {
    "text": "streaming makes sense so inside the cache uh I guess watch cache are the pods themselves already stored as",
    "start": "2057440",
    "end": "2064398"
  },
  {
    "text": "encoded JSON or are they like in just uh no because of uh conversions and",
    "start": "2064399",
    "end": "2069440"
  },
  {
    "text": "everything you need to you store them um decoded from CD because it could be you",
    "start": "2069440",
    "end": "2074878"
  },
  {
    "text": "could store data incdro in now in cboard which is alternative uh also encoder uh",
    "start": "2074879",
    "end": "2082638"
  },
  {
    "text": "so you and you don't know what client will request so watch basically you store decoded objects like uh in",
    "start": "2082639",
    "end": "2089960"
  },
  {
    "text": "Kubernetes native structures and then when you encode you you you base it on",
    "start": "2089960",
    "end": "2095440"
  },
  {
    "text": "the client headers and request",
    "start": "2095440",
    "end": "2098800"
  }
]