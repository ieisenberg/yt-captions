[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "so it's 1355 and that means in room ao4 uh thank you um we're going to talk",
    "start": "359",
    "end": "6960"
  },
  {
    "text": "about go H and this talk is called go plus microservices equals gokit and",
    "start": "6960",
    "end": "12040"
  },
  {
    "text": "there's a little gopher in a hex nut there um that's the logo I don't know why uh my name's Peter I uh it doesn't",
    "start": "12040",
    "end": "19680"
  },
  {
    "text": "matter who I am you can decide for yourself if I'm trustworthy or not at the end of the talk but you can follow me I'm that's my Twitter okay um this",
    "start": "19680",
    "end": "27560"
  },
  {
    "text": "talk is about uh so Cloud native cont right what is a cloud native application it's like all these things that has all",
    "start": "27560",
    "end": "33040"
  },
  {
    "text": "these properties and one of them importantly I guess is that it's kind of microservice oriented so uh this talk in",
    "start": "33040",
    "end": "39320"
  },
  {
    "text": "this talk I want to convince you that go is a good language to write your microservices in and I think gokit will",
    "start": "39320",
    "end": "45600"
  },
  {
    "text": "help and if you want to use it at the end of the talk that's great I support that but ultimately I'm I'm not really",
    "start": "45600",
    "end": "50920"
  },
  {
    "text": "pushing gokit it's just a means to express uh a few ideas um which I think are helpful so maybe it'll help maybe if",
    "start": "50920",
    "end": "60120"
  },
  {
    "text": "won't uh if you don't end up using it that's no problem for me I'm really more motivated to uh get you all to consider",
    "start": "60120",
    "end": "66640"
  },
  {
    "text": "go for your business logic I guess okay so on that note like what is go uh I'm",
    "start": "66640",
    "end": "73200"
  },
  {
    "start": "70000",
    "end": "240000"
  },
  {
    "text": "curious have we all raise your hand if You' like at least dabbled and go a little bit right okay uh how many of you",
    "start": "73200",
    "end": "79439"
  },
  {
    "text": "have like done serious like production work and go okay yeah still quite a few people that's great um so for the maybe",
    "start": "79439",
    "end": "87640"
  },
  {
    "text": "very few of you who who need a bit of an introduction to the Lang language like what it is where it sits in like the language Matrix I thought I'd take a few",
    "start": "87640",
    "end": "93799"
  },
  {
    "text": "minutes to kind of contextualize everything for us um go was created by three Engineers",
    "start": "93799",
    "end": "102040"
  },
  {
    "text": "who happened to be employed at Google um the the Apocrypha is that it was designed to to to solve at a language",
    "start": "102040",
    "end": "109079"
  },
  {
    "text": "level problems that the Google Engineers were kind of uh encountering and this is as far as I'm aware the first recorded",
    "start": "109079",
    "end": "116200"
  },
  {
    "text": "piece well recorded maybe I guess I could have faked it but I promise I didn't uh the first recorded piece of",
    "start": "116200",
    "end": "121280"
  },
  {
    "text": "information um detailing uh the first ideas behind go uh the language and it",
    "start": "121280",
    "end": "127399"
  },
  {
    "text": "is an email sort of meeting minutes dated 23 September 2007 which is a",
    "start": "127399",
    "end": "133160"
  },
  {
    "text": "really long time ago if you think about it in in this world uh from Robert geser",
    "start": "133160",
    "end": "138480"
  },
  {
    "text": "to uh Rob Pike and Ken Thompson and the subject is prag Lang discussion and I",
    "start": "138480",
    "end": "143920"
  },
  {
    "text": "guess this is the first meeting when they decided to to go over what would uh some points that would eventually become",
    "start": "143920",
    "end": "149480"
  },
  {
    "text": "the go language so uh starting point C fix some obvious flaws remove crud add a",
    "start": "149480",
    "end": "155560"
  },
  {
    "text": "few missing features and you can kind of find this on the internet in a few places so you can kind of get a sense of",
    "start": "155560",
    "end": "160800"
  },
  {
    "text": "where they were coming from they like C uh but they felt that maybe it was not",
    "start": "160800",
    "end": "166000"
  },
  {
    "text": "up to the task of modern uh modern modern problems so some properties of go I mean",
    "start": "166000",
    "end": "173200"
  },
  {
    "text": "there's many of them these are the ones that I find the most interesting it is a statically typed language it is a",
    "start": "173200",
    "end": "179159"
  },
  {
    "text": "compiled language anguage and one of the key things is that it is the compiler should be very very fast and a lot of decisions were baked into what the",
    "start": "179159",
    "end": "185799"
  },
  {
    "text": "language is and what features it supports in order to support this very important property so the build test Run",
    "start": "185799",
    "end": "192040"
  },
  {
    "text": "cycles are very quick and go uh it produces native binaries for a huge number of platforms and um uh you can",
    "start": "192040",
    "end": "199959"
  },
  {
    "text": "cross-compile them very easily it's just setting an environment variable so if you have go installed on your Mac you can produce power PC binaries you can",
    "start": "199959",
    "end": "206040"
  },
  {
    "text": "produce amd64 Linux binaries no problem uh it is garbage collected language which um was decided very early to be an",
    "start": "206040",
    "end": "213799"
  },
  {
    "text": "important uh usability kind of handle um this does mean that it's not totally",
    "start": "213799",
    "end": "218959"
  },
  {
    "text": "suitable for a lot of the things that c is suitable for but on balance the go",
    "start": "218959",
    "end": "224120"
  },
  {
    "text": "authors decide this is the right move for the current sort of epoch that we're in uh it looks like C basically it's got",
    "start": "224120",
    "end": "231080"
  },
  {
    "text": "a big standard Library it's sort of a pythonesque standard library for lots of um uh things you need to do in this",
    "start": "231080",
    "end": "236480"
  },
  {
    "text": "modern world and it has baked in concurrency which we'll explore a tiny bit in my opinion um this is what sets",
    "start": "236480",
    "end": "244400"
  },
  {
    "start": "240000",
    "end": "450000"
  },
  {
    "text": "go apart from the current crop of languages I think it's a breath of fresh air from what I would call like kitchen",
    "start": "244400",
    "end": "249720"
  },
  {
    "text": "sync languages which is like the languages that say oh there's a feature that sounds good there's another feature that sounds good and to me like the",
    "start": "249720",
    "end": "255760"
  },
  {
    "text": "canonical example of this is Scala it is a language of every Paradigm uh which I guess you it's it's nice to have that",
    "start": "255760",
    "end": "262440"
  },
  {
    "text": "sometimes but uh for me uh I really struggle to get productive in it uh go",
    "start": "262440",
    "end": "269479"
  },
  {
    "text": "has and it's composed of um simple sort of orthogonal features that um when you stick them",
    "start": "269479",
    "end": "276039"
  },
  {
    "text": "together they don't have surprising results and to me the ultimate like counter example to this would be sort of the node ecosystem where there's lots of",
    "start": "276039",
    "end": "283000"
  },
  {
    "text": "features that um are kind of thought and developed an isolation and when you sort of apply them together well we've all",
    "start": "283000",
    "end": "288919"
  },
  {
    "text": "seen the um Gary band's watt talk right when he's going through all the JavaScript uh concatenation things and",
    "start": "288919",
    "end": "295240"
  },
  {
    "text": "blah blah blah uh go is efficient by default and this is a source of consternation for",
    "start": "295240",
    "end": "302039"
  },
  {
    "text": "many especially new go programmers that uh the the there is typically one idiomatic way to accomplish a task and",
    "start": "302039",
    "end": "309520"
  },
  {
    "text": "um that way sort of exposes all of the CPU cycles that are going to occur uh",
    "start": "309520",
    "end": "316240"
  },
  {
    "text": "when you go through that text so for example there is only one way to do four Loops there's no map or filter uh and so",
    "start": "316240",
    "end": "322800"
  },
  {
    "text": "when you write idiomatic go it tends to be pretty efficient like not quite C but pretty close and uh to me this stands in",
    "start": "322800",
    "end": "330840"
  },
  {
    "text": "contrast to a lot of dynamic scripting languages like Python and Ruby where to eek out performance you have to do",
    "start": "330840",
    "end": "336600"
  },
  {
    "text": "things non- idiomatically very often uh go has predictable runtime behavior and this means that when you deploy a go",
    "start": "336600",
    "end": "342560"
  },
  {
    "text": "Application there's not a lot of knobs to turn that can change dramatically the way it performs to me this is standing",
    "start": "342560",
    "end": "348520"
  },
  {
    "text": "and St contrast to all the jvm languages which require uh in my experience like quite specialized knowledge to operate a",
    "start": "348520",
    "end": "355319"
  },
  {
    "text": "skill uh and finally go has a familiar Heritage syntax and sort of basically an",
    "start": "355319",
    "end": "360440"
  },
  {
    "text": "imperative programming Paradigm which is familiar to most of us I guess um there are things you can do you can program it",
    "start": "360440",
    "end": "366919"
  },
  {
    "text": "in a slightly functional way you can program it in a kind of objectoriented way but in general it's like pretty",
    "start": "366919",
    "end": "372039"
  },
  {
    "text": "straight line code and um that's a great draw it makes it easy to learn easy to",
    "start": "372039",
    "end": "377240"
  },
  {
    "text": "spin up new developers on and in that way sort of stands in contrast to uh languages like hll and maybe Elixir to",
    "start": "377240",
    "end": "382639"
  },
  {
    "text": "some degree so when we talk about languages we often like to use words like oh it's",
    "start": "382639",
    "end": "388000"
  },
  {
    "text": "simple right or it's uh non-magical what do we mean by these things it turns out these these words are kind of like",
    "start": "388000",
    "end": "393120"
  },
  {
    "text": "weasel words right so when you say simple um and this is a quote I found on the lobster website one time when you",
    "start": "393120",
    "end": "398520"
  },
  {
    "text": "say simple um what it actually means is totally dependent on your context and in go simple means and I'll try to read",
    "start": "398520",
    "end": "404720"
  },
  {
    "text": "this here um that operational interpretation of a program fragment is",
    "start": "404720",
    "end": "410280"
  },
  {
    "text": "unique straightforward and never in question after you've read the code so this means when you read a piece of go",
    "start": "410280",
    "end": "416280"
  },
  {
    "text": "code you know exactly what the CPU is going to do to some order of approxim um from this non-nonsense point of view",
    "start": "416280",
    "end": "423639"
  },
  {
    "text": "higher order functions are already suspicious and fancy uh Concepts like closures transducers and hascal lenses",
    "start": "423639",
    "end": "431400"
  },
  {
    "text": "and traversals are complete Abominations I wouldn't go quite that far but I think this get set goes idea of",
    "start": "431400",
    "end": "437520"
  },
  {
    "text": "Simplicity similarly I found another uh uh uh what do you call this thing a post",
    "start": "437520",
    "end": "444240"
  },
  {
    "text": "on Hacker News about the idea of no magic or Magic free language and uh the",
    "start": "444240",
    "end": "449280"
  },
  {
    "text": "key quote here is that um uh a bit of code is magical when it's",
    "start": "449280",
    "end": "455240"
  },
  {
    "start": "450000",
    "end": "673000"
  },
  {
    "text": "not sufficient to examine the tokens that the code is composed of uh and go",
    "start": "455240",
    "end": "461080"
  },
  {
    "text": "back to the static textual definitions of those tokens to understand what's going on so if you look at a piece of",
    "start": "461080",
    "end": "466759"
  },
  {
    "text": "code and you read all the things that should be enough to figure out what that code is doing and if that's not true then your code is magical so in",
    "start": "466759",
    "end": "474199"
  },
  {
    "text": "pythonesque pseudo code this stuff on the left is Magic if this code runs if you can s dot where did this method come",
    "start": "474199",
    "end": "480919"
  },
  {
    "text": "from then like how did that happen right and in Python you can do this right and in Ruby you can do this it's called like",
    "start": "480919",
    "end": "486879"
  },
  {
    "text": "monkey patching not magic at all would be this way of kind of composing behaviors where class something is",
    "start": "486879",
    "end": "493159"
  },
  {
    "text": "derived from Super class right and you can go to the definition of super class you can read through what it is so go is",
    "start": "493159",
    "end": "499159"
  },
  {
    "text": "entirely non-magical by this definition and like I I spent so much time on this because I think this is uh maybe more",
    "start": "499159",
    "end": "506240"
  },
  {
    "text": "than anything the thing that sets go apart from other languages like you when you see go code you know what it's doing",
    "start": "506240",
    "end": "512880"
  },
  {
    "text": "and you don't have to like uh worry too much about uh things that other programmers might have done to subvert",
    "start": "512880",
    "end": "518800"
  },
  {
    "text": "your understanding and at least for me I love this I love it I love it I love it okay um another sort of design principle",
    "start": "518800",
    "end": "526080"
  },
  {
    "text": "at uh ofgo was captured in this talk by Rob Pike uh it is a language that was",
    "start": "526080",
    "end": "531320"
  },
  {
    "text": "designed to in the service of software engineering and um this also get Set uh",
    "start": "531320",
    "end": "538079"
  },
  {
    "text": "this like industrial bent right right it was created at a company that was trying to make money uh and that way sets it",
    "start": "538079",
    "end": "543360"
  },
  {
    "text": "apart from Scala from hascal this sort of thing and also sets it sort of uh",
    "start": "543360",
    "end": "548839"
  },
  {
    "text": "apart from the programming language Community the programming language Theory community so you do see lots of",
    "start": "548839",
    "end": "553920"
  },
  {
    "text": "articles on the internet like this um why go is not good or three months of go from a high schooler perspective and",
    "start": "553920",
    "end": "559279"
  },
  {
    "text": "they make very uh negative conclusions and I think that's understandable because in a large way go is saying all these programming language Theory things",
    "start": "559279",
    "end": "565680"
  },
  {
    "text": "that um have been developed and and and uh ified over the last 10 20 30 years",
    "start": "565680",
    "end": "571680"
  },
  {
    "text": "that's fine we can take some lessons from them but we don't need to build on them so directly and so you get classic",
    "start": "571680",
    "end": "576839"
  },
  {
    "text": "reactions like this in fact there's an entire git repo of articles that uh um",
    "start": "576839",
    "end": "582880"
  },
  {
    "text": "are critical of go and they've been like subdivided into uh the topics that uh",
    "start": "582880",
    "end": "588640"
  },
  {
    "text": "the the author has really disliked and it's called go is not good um a curated",
    "start": "588640",
    "end": "594440"
  },
  {
    "text": "list of Articles complaining that go isn't good enough ironically if you go to this repo you see that the the thing that produces the list is itself a go",
    "start": "594440",
    "end": "601680"
  },
  {
    "text": "program so uh one final note about uh mind share",
    "start": "601680",
    "end": "607160"
  },
  {
    "text": "so uh I guess go is a young language it's like seven or eight years old um you can these are just two sort of",
    "start": "607160",
    "end": "613360"
  },
  {
    "text": "random articles I found you can find lots of Articles saying uh go is gaining mind share there's lots of interests",
    "start": "613360",
    "end": "618640"
  },
  {
    "text": "there's lots of new developers it's not at the Java level yet but if you are kind of Staffing up a project and you",
    "start": "618640",
    "end": "624200"
  },
  {
    "text": "are considering go I think we're at the stage where you're going to be able to reliably find uh go developers or at a",
    "start": "624200",
    "end": "630399"
  },
  {
    "text": "minimum train people people are going to have heard of it uh they're going to be interested potentially in in learning it",
    "start": "630399",
    "end": "635600"
  },
  {
    "text": "and that's very easy so I just have this slide here to say m share is there or like growing uh and we already know that",
    "start": "635600",
    "end": "642880"
  },
  {
    "text": "right because we're Cloud native people we can look at our our portfolio of projects and note that a little more",
    "start": "642880",
    "end": "648519"
  },
  {
    "text": "than half of them are implemented in go um grpc has of course go bindings linkerd is like finagle for containers",
    "start": "648519",
    "end": "655760"
  },
  {
    "text": "so I guess it's like Scala but maybe it maybe uh it somehow qualifies fluent is",
    "start": "655760",
    "end": "661839"
  },
  {
    "text": "written in Ruby and C if I'm not mistaken maybe it should have been written in go I don't know okay so",
    "start": "661839",
    "end": "668959"
  },
  {
    "text": "that's like uh that's the go side of things now let's turn our attention a little bit to um microservices part of",
    "start": "668959",
    "end": "675959"
  },
  {
    "start": "673000",
    "end": "1114000"
  },
  {
    "text": "the cloud native Computing uh breakfast I guess uh my story with microservices",
    "start": "675959",
    "end": "681200"
  },
  {
    "text": "begins at SoundCloud uh I won't go into the details about uh all of the things we learn there really um suffice to say",
    "start": "681200",
    "end": "688600"
  },
  {
    "text": "we were one of the early adopters I guess we did microservices before they were still called like s SOA back then",
    "start": "688600",
    "end": "693959"
  },
  {
    "text": "and then slowly in the first year of our transition they became microservices and and us and I think Spotify and Netflix",
    "start": "693959",
    "end": "700680"
  },
  {
    "text": "were some of the first people um so we learned lots of lessons",
    "start": "700680",
    "end": "705720"
  },
  {
    "text": "there and the one lesson that I want to kind of distill everything down to is that um microservices solve problems in",
    "start": "705720",
    "end": "713639"
  },
  {
    "text": "your organization but they cause technical problems they solve some technical problems but they create far",
    "start": "713639",
    "end": "719279"
  },
  {
    "text": "far more so choosing to opt into a microservice architecture is something you should do only when you know you",
    "start": "719279",
    "end": "724880"
  },
  {
    "text": "need to solve problems that are latent in your organization and typically this means you're big enough that um well",
    "start": "724880",
    "end": "732320"
  },
  {
    "text": "I'll get into some of them now but this is like the the key thing that we learned I think um so let me enumerate",
    "start": "732320",
    "end": "737800"
  },
  {
    "text": "some of the problems that are solved um for example my team is too large to work",
    "start": "737800",
    "end": "743360"
  },
  {
    "text": "effectively on a shared co-base and by this I mean literally the mechanics of pushing commits having uh um merge",
    "start": "743360",
    "end": "749560"
  },
  {
    "text": "conflicts uh being able to push code around without um causing too many like frictional",
    "start": "749560",
    "end": "754959"
  },
  {
    "text": "problems uh microservices solved the problem of my team is blocked on another team to make progress towards some",
    "start": "754959",
    "end": "761480"
  },
  {
    "text": "business goal so if you often find yourself uh saying well like my part of the feature is done but that team isn't",
    "start": "761480",
    "end": "767639"
  },
  {
    "text": "done and so like we have a standstill in terms of our business velocity microservices can sort of uh break this",
    "start": "767639",
    "end": "773279"
  },
  {
    "text": "traction right and allow each team to kind of iterate independently as long as they maintain these like strict contracts with the rest of the",
    "start": "773279",
    "end": "779240"
  },
  {
    "text": "organization that's cool um microservices can help solve the problem of communication overhead becoming",
    "start": "779240",
    "end": "784519"
  },
  {
    "text": "gigantic is kind of like a follow on from the previous point where you can't do things until you can like fully understand what everyone else in the",
    "start": "784519",
    "end": "790519"
  },
  {
    "text": "organization is doing the strict contracts sort of give you an escape hatch for that and this all boils down I",
    "start": "790519",
    "end": "796279"
  },
  {
    "text": "think to the idea that product velocity gets stalled and we need some way to get that back up again in my opinion this is",
    "start": "796279",
    "end": "803880"
  },
  {
    "text": "what they solve now what do they cause um in order to have any of these lovely",
    "start": "803880",
    "end": "809120"
  },
  {
    "text": "properties we need to have well- defined uh business domains and in the domain driven design uh terminology this is",
    "start": "809120",
    "end": "815000"
  },
  {
    "text": "called the bounded context right so you need to have stable apis each microservice needs to have a stable-ish API uh so you need to understand what",
    "start": "815000",
    "end": "821279"
  },
  {
    "text": "your business does before you can do that if you're still in the experimentation phase like I'm not really sure where all my business",
    "start": "821279",
    "end": "826720"
  },
  {
    "text": "domains are going to uh land then microservices are going to present a whole lot of friction for you uh you don't get shared data bases",
    "start": "826720",
    "end": "833440"
  },
  {
    "text": "anymore right so like microservices encapsulate their data storage that's sort of one of their Key properties which means that if you to start doing",
    "start": "833440",
    "end": "839680"
  },
  {
    "text": "distributed transactions you're uh you're in for a world of pain because those are really really hard like like",
    "start": "839680",
    "end": "845399"
  },
  {
    "text": "uh PhD thesis hard um and you don't want to do them actually you want to figure out another way to do it eventual",
    "start": "845399",
    "end": "850480"
  },
  {
    "text": "consistency blah blah blah that's also hard uh testing becomes really hard too in fact I as far as I'm aware it is a",
    "start": "850480",
    "end": "856959"
  },
  {
    "text": "design error it's it's like categorically incorrect to try to integration test your entire",
    "start": "856959",
    "end": "862000"
  },
  {
    "text": "microservice fleet you can approach that ASM totically with really strong unit testing and like contract testing and",
    "start": "862000",
    "end": "867519"
  },
  {
    "text": "you can make an attempt at some like burn in test but really what you want to do is optimize for mttr meantime to",
    "start": "867519",
    "end": "873360"
  },
  {
    "text": "recovery right you have really good monitoring you have really good roll back procedures and you just kind of test in prod right with canaries or blue",
    "start": "873360",
    "end": "878399"
  },
  {
    "text": "green or whatever so this is hard and it's like a mind shift and this and many other things require the sort of devops",
    "start": "878399",
    "end": "884519"
  },
  {
    "text": "culture mind shift culture shift where devs need to deploy and operate their",
    "start": "884519",
    "end": "889680"
  },
  {
    "text": "own work and that means they need to get paged when their stuff goes down which means they need to be on patri duty or whatever and this is often uh",
    "start": "889680",
    "end": "895920"
  },
  {
    "text": "problematic for organizations you have the problem of job scheduling which kubernetes helps with if you're able to use kubernetes",
    "start": "895920",
    "end": "901759"
  },
  {
    "text": "that's great but if you aren't then you have to kind of like approach it and realize what parts you need what parts you don't that takes time that takes",
    "start": "901759",
    "end": "908000"
  },
  {
    "text": "energy that takes automation then you have the problem of addressability that is service Discovery",
    "start": "908000",
    "end": "914000"
  },
  {
    "text": "how does service a figure out about service B this is an infrastructural concern then you have monitoring and",
    "start": "914000",
    "end": "919040"
  },
  {
    "text": "instrumentation this should really be much higher in the in the list actually because this is critical this is the first thing you should be worrying about",
    "start": "919040",
    "end": "924639"
  },
  {
    "text": "uh old tools like tail F or like naos and New Relic they're just like completely uh in insufficient for this",
    "start": "924639",
    "end": "930040"
  },
  {
    "text": "new world um you start realizing hey we need to have better insight into the things we're deploying maybe we need something",
    "start": "930040",
    "end": "936600"
  },
  {
    "text": "like distributed tracing and you can go next door and learn Auto ballot learn all about it but you'll find out quickly",
    "start": "936600",
    "end": "941680"
  },
  {
    "text": "that that's really really really hard um it's it requires like complete uh",
    "start": "941680",
    "end": "947319"
  },
  {
    "text": "homogeneous um uh implementation of of a certain stack over your entire fleet and uh if you have sort of decoupled teams",
    "start": "947319",
    "end": "954000"
  },
  {
    "text": "that are responsible for doing it it's hard to get them all aligned and uh the infrastructure concerns are big and blah blah lots of problems there you have to",
    "start": "954000",
    "end": "960440"
  },
  {
    "text": "worry about build pipeline cicd this becomes important security oh there's this thing called security oops Yeah I need to wire all that in once I have my",
    "start": "960440",
    "end": "967279"
  },
  {
    "text": "first zero day or whatever um okay so anyway there's like all these concerns right so a lot of people come from this",
    "start": "967279",
    "end": "973959"
  },
  {
    "text": "monolithic mode where they have their monolith right uh their big Java app or whatever and then then all these things",
    "start": "973959",
    "end": "979959"
  },
  {
    "text": "I I talked about are kind of like little peac meal Solutions around it right when you go to the microservice model you end",
    "start": "979959",
    "end": "986680"
  },
  {
    "text": "up shrinking your uh your monolith right or chipping in away and you create more of them but all these like peace meal",
    "start": "986680",
    "end": "992240"
  },
  {
    "text": "concerns they're they're still um they're still present it's just that they no longer interact with a single",
    "start": "992240",
    "end": "997440"
  },
  {
    "text": "Deployable artifact they interact with like multiple Deployable artifacts so the touch points right there's many many",
    "start": "997440",
    "end": "1003040"
  },
  {
    "text": "more there's like exponentially more and so um the the the point I want to raise",
    "start": "1003040",
    "end": "1008880"
  },
  {
    "text": "is that all these concerns be like they become multiplicative and you have to have not only like answers to all these",
    "start": "1008880",
    "end": "1015160"
  },
  {
    "text": "purple boxes you have to have structure a way of like uh uh uh solving these",
    "start": "1015160",
    "end": "1020360"
  },
  {
    "text": "problems in in a reliable automated structured coherent way um across your",
    "start": "1020360",
    "end": "1026160"
  },
  {
    "text": "entire fleet of of of business services so uh at SoundCloud uh the the Chief Architect I",
    "start": "1026160",
    "end": "1033319"
  },
  {
    "text": "don't know he's kind of a a floater is a guy named Sean Treadway there and he gave a talk similar to this last year",
    "start": "1033319",
    "end": "1038760"
  },
  {
    "text": "and um he did a a survey and he went through all of the services in the company and counted up the number of",
    "start": "1038760",
    "end": "1046038"
  },
  {
    "text": "purple things that they would need to have answers for before they could be considered like",
    "start": "1046039",
    "end": "1051919"
  },
  {
    "text": "production ready so how many like ancillary concerns does a single service need to have answers for before it can",
    "start": "1051919",
    "end": "1057440"
  },
  {
    "text": "be deployed does anybody have a guess what that number is 100 25 okay it's somewhere between uh",
    "start": "1057440",
    "end": "1065840"
  },
  {
    "text": "he counted 40 things and some of them are obvious like what programming language is it written in and what programming paradigms does it utilize uh",
    "start": "1065840",
    "end": "1072559"
  },
  {
    "text": "what transport protocols is it talk on some of them are kind of the things that I mentioned here like what uh um how do",
    "start": "1072559",
    "end": "1078600"
  },
  {
    "text": "you do secret management how do you do alerting how do you do logs how do you do log rotation what's the CI pipeline",
    "start": "1078600",
    "end": "1084000"
  },
  {
    "text": "for it blah blah blah some of them are really subtle like um how do you uh how do you uh register it in service",
    "start": "1084000",
    "end": "1091080"
  },
  {
    "text": "Discovery registry in a Humane registry so when it fails you know like which person to talk to a lot of things so",
    "start": "1091080",
    "end": "1097440"
  },
  {
    "text": "this is the context that we're all in when we opt in the cloud native stack right we're want to do microservices",
    "start": "1097440",
    "end": "1104120"
  },
  {
    "text": "because we understand that they can help our businesses achieve much better velocity especially as as businesses grow but we need help to structure this",
    "start": "1104120",
    "end": "1111679"
  },
  {
    "text": "stuff so that we can answer all these questions in a in a good way and so that's where gokit kind of enters into",
    "start": "1111679",
    "end": "1117240"
  },
  {
    "start": "1114000",
    "end": "1338000"
  },
  {
    "text": "the picture um initially I wanted it to be a standard library for microservices",
    "start": "1117240",
    "end": "1123880"
  },
  {
    "text": "something like finagle foro has anyone heard of finagle or like is kind of familiar with finagle it's like solving some of these problems it's in Scala uh",
    "start": "1123880",
    "end": "1131520"
  },
  {
    "text": "the idea is to provide adapters bindings Etc to Common infrastructure components uh to solve many of these",
    "start": "1131520",
    "end": "1138440"
  },
  {
    "text": "problems it's important that it played nice in your existing kind of heterogeneous environment that it don't that it doesn't have like strong opinions about",
    "start": "1138440",
    "end": "1145320"
  },
  {
    "text": "you need to structure your app uh structure your infrastructure in this way you need to use console you need to use kubernetes like you have your own",
    "start": "1145320",
    "end": "1152200"
  },
  {
    "text": "like uh opinions about that in your or you have your own history your own competencies I don't really want to have",
    "start": "1152200",
    "end": "1157799"
  },
  {
    "text": "opinions about that I just want to make it possible to write go and have it slot in and work",
    "start": "1157799",
    "end": "1163440"
  },
  {
    "text": "well um so in the end it's like just some way of providing structure to tame",
    "start": "1163440",
    "end": "1168840"
  },
  {
    "text": "this Beast that we've described of incidental complexity that comes with microservices so those were the initial",
    "start": "1168840",
    "end": "1174039"
  },
  {
    "text": "goals today it's it's mostly the same it turns out over time the Project's about two and a half or three years old now um",
    "start": "1174039",
    "end": "1180480"
  },
  {
    "text": "we become even less opinionated about infrastructure than we anticipated and even more opinionated about application",
    "start": "1180480",
    "end": "1186880"
  },
  {
    "text": "architecture than we anticipated so that's really what I want to talk to uh talk about today is how to structure go",
    "start": "1186880",
    "end": "1193000"
  },
  {
    "text": "applications go microservices to be able to solve these problems in a in like a coherent way I'm going to use gokit to",
    "start": "1193000",
    "end": "1199559"
  },
  {
    "text": "sort of demonstrate patterns uh but you can obviously use whatever you like uh important non-g goals of gokit",
    "start": "1199559",
    "end": "1206840"
  },
  {
    "text": "um messaging patterns other than RPC there's a whole class of microservice stuff that's so-called like streaming or",
    "start": "1206840",
    "end": "1212159"
  },
  {
    "text": "event sourcing or event oriented um those are cool and interesting but it's not sort of what I'm focused on at the",
    "start": "1212159",
    "end": "1217799"
  },
  {
    "text": "moment um like I said we don't require specific types of infrastructure to work properly you can use whatever you want",
    "start": "1217799",
    "end": "1223960"
  },
  {
    "text": "um and we'll try to provide adapters to as much as we possibly can uh we don't act as an service framework so I say",
    "start": "1223960",
    "end": "1230159"
  },
  {
    "text": "toolkit very particularly like we're not something you have to write your you're not writing like a gokit application",
    "start": "1230159",
    "end": "1235559"
  },
  {
    "text": "right you're using bits of the go kit to make your application easier to deploy and operate and run and blah blah blah",
    "start": "1235559",
    "end": "1242280"
  },
  {
    "text": "um and we don't intend to reimplement existing good Solutions or libraries or anything when things are lacking we'll provide better Solutions but otherwise",
    "start": "1242280",
    "end": "1248640"
  },
  {
    "text": "we'll just plug and play if you are familiar with other tool kits other Frameworks here's where we",
    "start": "1248640",
    "end": "1254320"
  },
  {
    "text": "kind of land in the in the landscape U micro is probably the other big go uh uh microservice sort of framework it's in",
    "start": "1254320",
    "end": "1260960"
  },
  {
    "text": "my opinion uh from where I stand it's very opinionated it's sort of Allin you have to buy into the micro ideology and",
    "start": "1260960",
    "end": "1267600"
  },
  {
    "text": "it's framework is for that reason and so I stand apart from that finagle was sort of the original inspiration but in the",
    "start": "1267600",
    "end": "1273200"
  },
  {
    "text": "end it's much lower level than goit it's more concerned with like the mechanics of uh pushing bites over a wire and um",
    "start": "1273200",
    "end": "1280240"
  },
  {
    "text": "getting bites back and it's very concerned with um retry strategies when things go down and that sort of thing we",
    "start": "1280240",
    "end": "1285799"
  },
  {
    "text": "gokit has all that stuff but it's not focused on that um it's vaguely similar to Spring boot",
    "start": "1285799",
    "end": "1291760"
  },
  {
    "text": "except spring boot is very magical by our previous definitions and very uh it's it's like own world right you",
    "start": "1291760",
    "end": "1296799"
  },
  {
    "text": "become a spring boot developer I hope no one ever says that they are a gokit developer I will have failed terribly um",
    "start": "1296799",
    "end": "1304120"
  },
  {
    "text": "uh it's it's also somehow similar to Tokyo which is like this new rust thing uh but Tokyo I think is meant to be",
    "start": "1304120",
    "end": "1310679"
  },
  {
    "text": "almost as close as possible to a finagle for rust and so it's also quite low level and I really want to emphasize I",
    "start": "1310679",
    "end": "1316919"
  },
  {
    "text": "don't care if you use gokit I do care use go I I'm really sold on the go philosophy as a way of like being a",
    "start": "1316919",
    "end": "1322440"
  },
  {
    "text": "happy programmer and I want to well to be completely Frank I want to create more job opportunities for myself in the future and get as many companies as",
    "start": "1322440",
    "end": "1328919"
  },
  {
    "text": "possible to buy into this uh but no I like it it truly makes me happy as a programmer and like I want to sort of",
    "start": "1328919",
    "end": "1334559"
  },
  {
    "text": "share that Joy that's really my motivation okay so um I I said many",
    "start": "1334559",
    "end": "1339640"
  },
  {
    "start": "1338000",
    "end": "1377000"
  },
  {
    "text": "times go is about application architecture what do I mean by that so let's build up a little dummy service",
    "start": "1339640",
    "end": "1345520"
  },
  {
    "text": "and let's demonstrate some of the things that I'm talking about so so let's say this is our service and if you know go you know the interface I've decided to",
    "start": "1345520",
    "end": "1352760"
  },
  {
    "text": "model the service as an interface and what I'm saying here is AD service is something some you know box and a",
    "start": "1352760",
    "end": "1358840"
  },
  {
    "text": "diagram that can sum two integers and return an integer and it can concatenate",
    "start": "1358840",
    "end": "1364120"
  },
  {
    "text": "two strings and return a string so it's like the stupidest possible thing you could write uh because it's a service",
    "start": "1364120",
    "end": "1370400"
  },
  {
    "text": "right now we want to be able to return errors things can fail okay so that's the that's what we're building right so that's the that's the interface",
    "start": "1370400",
    "end": "1376679"
  },
  {
    "text": "definition our naive first draft we've started um Adder addr the Uber for",
    "start": "1376679",
    "end": "1384480"
  },
  {
    "start": "1377000",
    "end": "1594000"
  },
  {
    "text": "addition or something and and we need to like write our ad service and and get that hot hot VC cache so um here's our",
    "start": "1384480",
    "end": "1391000"
  },
  {
    "text": "basic Service uh it's an implementation of the ad in ad service",
    "start": "1391000",
    "end": "1396080"
  },
  {
    "text": "interface we have our sum method which is just adding the two numbers and we have our concat method and it's adding the two strings and you know not much to",
    "start": "1396080",
    "end": "1402799"
  },
  {
    "text": "it okay so this is our like this is our like Core Business logic nice easy uh so",
    "start": "1402799",
    "end": "1407960"
  },
  {
    "text": "here's here's here's our red square right this is this is our our thing but there's a lot of stuff that we have to",
    "start": "1407960",
    "end": "1413640"
  },
  {
    "text": "now start sort of layering on top right and the first one is a transport this is useless it's just sitting in memory we need to be able to talk to it so how do",
    "start": "1413640",
    "end": "1420000"
  },
  {
    "text": "we talk to it typically we're going to do like a um uh Json HTTP thing right so",
    "start": "1420000",
    "end": "1426279"
  },
  {
    "text": "um here's our basic service one way to do it is to attach a serve HTTP method onto the struct so it becomes an HTTP",
    "start": "1426279",
    "end": "1433360"
  },
  {
    "text": "Handler it can talk HTTP so we're going to switch on the path and let's say if it's the sum we're going to uh construct",
    "start": "1433360",
    "end": "1440200"
  },
  {
    "text": "this uh request object we're going to try to deserialize from the body you could also do URL parameters like who",
    "start": "1440200",
    "end": "1446200"
  },
  {
    "text": "knows right let's just say we're doing it this way uh you deserialize a Json object from the body into that thing it",
    "start": "1446200",
    "end": "1451960"
  },
  {
    "text": "can fail so maybe it'll fail uh you use it to invoke the sum method on the type okay we're just calling into our",
    "start": "1451960",
    "end": "1458120"
  },
  {
    "text": "business logic cool and then you going to serialize Chason back to the client",
    "start": "1458120",
    "end": "1464000"
  },
  {
    "text": "straightforward enough okay uh the concat thing it's going to be the same thing different sort of types but",
    "start": "1464000",
    "end": "1469799"
  },
  {
    "text": "exactly the same code okay and and this is pretty like isolated I guess we have the business logic are these methods and",
    "start": "1469799",
    "end": "1476200"
  },
  {
    "text": "then the transport logic is this method and like okay they kind of don't interact too much that's pretty okay",
    "start": "1476200",
    "end": "1482159"
  },
  {
    "text": "great so uh what's next we got to talk about logging right everything has to log okay so um how do we do logging here",
    "start": "1482159",
    "end": "1489600"
  },
  {
    "text": "well I guess one way is you'd um take this uh decode block of code and we'd stick in some log statements and of",
    "start": "1489600",
    "end": "1495120"
  },
  {
    "text": "course we want to log the errors so whenever we encounter an error we log the error and then we log success maybe",
    "start": "1495120",
    "end": "1501039"
  },
  {
    "text": "um at the bottom there okay cool basic information right we do the same thing maybe uh at the actual application layer",
    "start": "1501039",
    "end": "1508799"
  },
  {
    "text": "so that was like in the transport now if we go down to the to the business logic we want to maybe log the results of our",
    "start": "1508799",
    "end": "1514080"
  },
  {
    "text": "computation so we log our sum we log our concat maybe I don't know some straw man",
    "start": "1514080",
    "end": "1519679"
  },
  {
    "text": "okay like let's say that solves the logging problem okay but oh now we have to do metrics of course right we have to monitor our thing okay so how do we do",
    "start": "1519679",
    "end": "1526440"
  },
  {
    "text": "metrics well let's say there are some Metric defined globally or or somewhere and like uh in in the error cases we",
    "start": "1526440",
    "end": "1532520"
  },
  {
    "text": "want to increment the error counter in the success case we increment the success counter maybe in the business logic we need to um uh uh put a",
    "start": "1532520",
    "end": "1540720"
  },
  {
    "text": "histogram for how long it took okay we can drop that in okay we've solved metrics um but now it's time to do",
    "start": "1540720",
    "end": "1547600"
  },
  {
    "text": "tracing and then maybe now it's time to do safety mechanisms like circuit breaking and and and rate limiting and",
    "start": "1547600",
    "end": "1553200"
  },
  {
    "text": "no no we need like audit logging because we're uh not just like doing debug print out statements we actually care about",
    "start": "1553200",
    "end": "1558559"
  },
  {
    "text": "like transactional uh semantics at at a higher level and then there's like this concept of service discovery that needs",
    "start": "1558559",
    "end": "1564080"
  },
  {
    "text": "to talk to something else and what's our deploy strategy maybe it needs to go to kubernetes and there's like all these things right suddenly there's all these",
    "start": "1564080",
    "end": "1570000"
  },
  {
    "text": "things and we don't want to like just do like little edits In The Raw code right",
    "start": "1570000",
    "end": "1576080"
  },
  {
    "text": "for every single thing here because then we get the spiraling un incoherent like impossible to maintain monster of a",
    "start": "1576080",
    "end": "1582520"
  },
  {
    "text": "service right and I think we've all written like I've written more of these than I care to admit right so what we want is some of structure to allow us to",
    "start": "1582520",
    "end": "1589399"
  },
  {
    "text": "solve all these problems without just like editing the code for every single thing just randomly right so gokit",
    "start": "1589399",
    "end": "1595640"
  },
  {
    "start": "1594000",
    "end": "1731000"
  },
  {
    "text": "promotes the So-Cal onion model what is the onion model basically you take your",
    "start": "1595640",
    "end": "1600799"
  },
  {
    "text": "core business logic as sort of the center of the onion and then for every other concern basically you wrap that",
    "start": "1600799",
    "end": "1607159"
  },
  {
    "text": "with um what I call a middleware it's also known as a decorator pattern and in",
    "start": "1607159",
    "end": "1612480"
  },
  {
    "text": "gokit we kind of chop it up into three distinct phases or layers of the onion",
    "start": "1612480",
    "end": "1618480"
  },
  {
    "text": "the innermost layer is the service layer that's where all your business logic stuff lives and that's where you're going to spend most of your time the",
    "start": "1618480",
    "end": "1624240"
  },
  {
    "text": "next layer up is what I call the endpoint layer we'll talk about that and then the final layer is uh the transport",
    "start": "1624240",
    "end": "1631320"
  },
  {
    "text": "layer where is",
    "start": "1631320",
    "end": "1634600"
  },
  {
    "text": "it ah I have to click apparently okay uh this is very similar to other",
    "start": "1637080",
    "end": "1642320"
  },
  {
    "text": "architectures that you might read in literature uh there's this thing called the hexagonal architecture um where it's",
    "start": "1642320",
    "end": "1648919"
  },
  {
    "text": "broadly the same model they use different terms of art like in the core it's like the core domain and then there's like a domain and application",
    "start": "1648919",
    "end": "1655440"
  },
  {
    "text": "layer and then they uh I think this is from like Java world so of course the aom mer layer is a framework layer um",
    "start": "1655440",
    "end": "1661200"
  },
  {
    "text": "and then it's like interaction points uh to all the other services that you talk to a database a SQL Server a mail server",
    "start": "1661200",
    "end": "1667200"
  },
  {
    "text": "blah blah blah it's also very similar to something I like a bit more which is the the the clean architecture and it's the",
    "start": "1667200",
    "end": "1674000"
  },
  {
    "text": "same basic idea it's a bit more Martin fery domain driven design where the core you have your entities this is like your",
    "start": "1674000",
    "end": "1680120"
  },
  {
    "text": "your core domain objects and then as you extend out of the circle you uh you have",
    "start": "1680120",
    "end": "1686360"
  },
  {
    "text": "start solving different concerns so around the core entities are your use cases and here you might write some unit tests or something and then you have",
    "start": "1686360",
    "end": "1692080"
  },
  {
    "text": "controllers and gateways and presenters which in turn interface with the web with a UI layer with a database with uh",
    "start": "1692080",
    "end": "1698200"
  },
  {
    "text": "some device right and uh in the clean architecture the the core rule is the dependency rule which states that source",
    "start": "1698200",
    "end": "1704559"
  },
  {
    "text": "code dependencies can only point inwards which is key that means in your core business domain it's like pure logic",
    "start": "1704559",
    "end": "1710640"
  },
  {
    "text": "right you have um your integers that you're summing together your users that are like being manipulated only as you",
    "start": "1710640",
    "end": "1716200"
  },
  {
    "text": "extend out of the onion do you start introducing Concepts like uh um HTTP or",
    "start": "1716200",
    "end": "1722320"
  },
  {
    "text": "grpc right and the core stuff has no idea about HTTP or grpc all they care about is the the business domain and",
    "start": "1722320",
    "end": "1728640"
  },
  {
    "text": "that's important that's key so let's take our dumb little service and let's model it sort of a",
    "start": "1728640",
    "end": "1734880"
  },
  {
    "start": "1731000",
    "end": "1910000"
  },
  {
    "text": "little bit as um in in this onion way and see where we get so we're going to",
    "start": "1734880",
    "end": "1740080"
  },
  {
    "text": "take our our service interface and in go the way that we um manage request scope",
    "start": "1740080",
    "end": "1745240"
  },
  {
    "text": "life uh life cycles um the way we do RPC basically is to have every method take a",
    "start": "1745240",
    "end": "1751600"
  },
  {
    "text": "context parameter as as the first parameter and that's just the way it works I won't get into the details here but so we we'll update our service",
    "start": "1751600",
    "end": "1757080"
  },
  {
    "text": "interface to have that then um we'll take our basic service and we'll uh we'll extend it a bit we'll make it a",
    "start": "1757080",
    "end": "1763039"
  },
  {
    "text": "bit more interesting we'll have the sum method maybe uh fail in some cases uh the concat method can also do the same",
    "start": "1763039",
    "end": "1769480"
  },
  {
    "text": "okay so now we have our our core uh basically the same core service let's",
    "start": "1769480",
    "end": "1775080"
  },
  {
    "text": "talk about how we can fold in this uh fun stuff at the service layer at the innermost layer and I mentioned already",
    "start": "1775080",
    "end": "1782000"
  },
  {
    "text": "The Decorator the middleware pattern let's talk about what a middleware would look like Ino this is one way to express",
    "start": "1782000",
    "end": "1787559"
  },
  {
    "text": "a middleware that is a function that takes a service uh does some extra stuff",
    "start": "1787559",
    "end": "1792919"
  },
  {
    "text": "to it and returns exactly the same service or I should say an interface that you can use in the same way but",
    "start": "1792919",
    "end": "1799279"
  },
  {
    "text": "that has additional Behavior kind of wired into it so for example a logging middleware might amend a service with a",
    "start": "1799279",
    "end": "1806360"
  },
  {
    "text": "logger and um here's how you would construct it right and in the sum method of that",
    "start": "1806360",
    "end": "1813360"
  },
  {
    "text": "logging middleware it would eventually call the next uh layer down but in the",
    "start": "1813360",
    "end": "1818880"
  },
  {
    "text": "meanwhile it would log the things that it sees right so this is like about as simple as it gets it's just doing one",
    "start": "1818880",
    "end": "1824840"
  },
  {
    "text": "extra bit of work as the request traverses through through the logging middleware down into the next layer",
    "start": "1824840",
    "end": "1831519"
  },
  {
    "text": "down okay what about uh instrumenting right so we could have an instrumenting middleware that didn't contain just a",
    "start": "1831519",
    "end": "1837039"
  },
  {
    "text": "logger but contained U metrics like counters or histograms and you can construct it kind of in the same way and",
    "start": "1837039",
    "end": "1843760"
  },
  {
    "text": "in your sum method as the request traverses through the instrumenting middleware you can increment your",
    "start": "1843760",
    "end": "1849360"
  },
  {
    "text": "counters depending on what the parameters say and in this way we can sort of create these isolated bits of",
    "start": "1849360",
    "end": "1856360"
  },
  {
    "text": "Kit these isolated little objects can do solve individual pieces of this purple puzzle um without",
    "start": "1856360",
    "end": "1864480"
  },
  {
    "text": "complecti but you can do pretty much anything with this model right anything that needs access to your uh core",
    "start": "1868279",
    "end": "1874000"
  },
  {
    "text": "business domain nice um the point here is that we're",
    "start": "1874000",
    "end": "1879960"
  },
  {
    "text": "going to solve each of these problems independent of the others like I've said but also that we're going to optimize",
    "start": "1879960",
    "end": "1885240"
  },
  {
    "text": "the way we build this this this service for maintenance that is for adding new concerns it's very simple you just",
    "start": "1885240",
    "end": "1890960"
  },
  {
    "text": "create a new decorator and you wire it in when you want to modify an existing one you don't have to care that you",
    "start": "1890960",
    "end": "1896320"
  },
  {
    "text": "might mess up the code that's doing something else because it's very single purpose like microservices itself you can kind of keep all that code in your",
    "start": "1896320",
    "end": "1902080"
  },
  {
    "text": "head hopefully it's a very short little file and of course this makes it very easy to remove concerns you just delete",
    "start": "1902080",
    "end": "1907320"
  },
  {
    "text": "the middleware and then hopefully that's that's it so that was the service layer that's where all the business logic lives I introduced this endpoint layer",
    "start": "1907320",
    "end": "1914320"
  },
  {
    "start": "1910000",
    "end": "2033000"
  },
  {
    "text": "what is that well it turns out if we have an additional abration which abstracts over RPC it turns out we can",
    "start": "1914320",
    "end": "1921320"
  },
  {
    "text": "do a lot of fun easy stuff there that you don't have to write that maybe go k can provide for you so here's our",
    "start": "1921320",
    "end": "1927559"
  },
  {
    "text": "endpoint abstraction uh an endpoint or like concat add any function really is",
    "start": "1927559",
    "end": "1933440"
  },
  {
    "text": "something that can be modeled as a function that takes a request and returns a response right so we go we have to do it this way it sucks talk to",
    "start": "1933440",
    "end": "1940000"
  },
  {
    "text": "me later I'll tell you all about it um and then we have uh wire in our context right because that's how that works and",
    "start": "1940000",
    "end": "1945240"
  },
  {
    "text": "of course this can fail so we wire an and wire in an error in the return and so this is what it looks like request",
    "start": "1945240",
    "end": "1950760"
  },
  {
    "text": "and response this is the actual definition in gokit um with this we can write a",
    "start": "1950760",
    "end": "1955919"
  },
  {
    "text": "so-called endpoint Constructor that takes a service and constructs individual endpoints for all the methods so here's one uh that con creates a sum",
    "start": "1955919",
    "end": "1963159"
  },
  {
    "text": "endpoint you can imagine another one that creates a concat end point this requires these um request uh per method",
    "start": "1963159",
    "end": "1971679"
  },
  {
    "text": "uh request and response types it's all kind of boiler plate that can be generated what does this get us this",
    "start": "1971679",
    "end": "1976960"
  },
  {
    "text": "gets us the ability to Define an endpoint middleware what does that get us well this allows us to wire in",
    "start": "1976960",
    "end": "1982440"
  },
  {
    "text": "behavior that doesn't care about what's actually going through what the actual Like A and B values are but maybe just",
    "start": "1982440",
    "end": "1988639"
  },
  {
    "text": "cares about stuff that uh is only uh to do with the request itself for example",
    "start": "1988639",
    "end": "1995080"
  },
  {
    "text": "uh if you wanted to um prevent outgoing requests from doing a Thundering Herd on some service that happens to be down you",
    "start": "1995080",
    "end": "2001559"
  },
  {
    "text": "could Implement a circuit breaking middleware that detected errors and after a certain number of Errors tripped the circuit and prevented more request",
    "start": "2001559",
    "end": "2008559"
  },
  {
    "text": "from flowing and this for this Behavior you don't need to know what is actually in the request you just need to see that",
    "start": "2008559",
    "end": "2014480"
  },
  {
    "text": "the request is gone and it's success or fail right so we can provide this and in fact go kit provides this with a number",
    "start": "2014480",
    "end": "2020159"
  },
  {
    "text": "of different implementations similarly we can do like a throttling or like a rate limiting middleware and so there's",
    "start": "2020159",
    "end": "2025639"
  },
  {
    "text": "a lot of value ad stuff that that can exist at this level that you don't have to write that we can provide for you that's cool what else does this get us",
    "start": "2025639",
    "end": "2032799"
  },
  {
    "text": "well because we now have a stable consistent foundation of the RPC idiom",
    "start": "2032799",
    "end": "2039519"
  },
  {
    "start": "2033000",
    "end": "2212000"
  },
  {
    "text": "we have a foundation that can we can build a lot of different transports on and so here we get into what does a transport mean a transport is a way your",
    "start": "2039519",
    "end": "2046399"
  },
  {
    "text": "service talks to the world and whether it's HTTP or GC or whatever it always works in the same way a request comes in",
    "start": "2046399",
    "end": "2052240"
  },
  {
    "text": "you have to decode it you do some stuff and then you encode a response back to the client so gokit can provide um using",
    "start": "2052240",
    "end": "2059280"
  },
  {
    "text": "the endpoint as like the basic building block as a foundation we can provide adapters servers to all the different uh",
    "start": "2059280",
    "end": "2065240"
  },
  {
    "text": "transports so we have an HTTP transport ort here's what it looks like um you",
    "start": "2065240",
    "end": "2070560"
  },
  {
    "text": "give it an endpoint you give it a way to decoder request a way to encoder response and these are just like things",
    "start": "2070560",
    "end": "2076118"
  },
  {
    "text": "that operate on HTTP requests right and then some options if you want to do some fun stuff and here's what the serve HTTP",
    "start": "2076119",
    "end": "2083760"
  },
  {
    "text": "method basically looks like I just copied this out of the code you're going to decode the request if there's an error okay you're going to invoke the",
    "start": "2083760",
    "end": "2090158"
  },
  {
    "text": "endpoint and then you're going to encode the response and there's a few other things but that's basically it so that's",
    "start": "2090159",
    "end": "2095440"
  },
  {
    "text": "cool that's how you can turn an endpoint into an H HTP server similarly grpc um we have a grpc transport and it looks",
    "start": "2095440",
    "end": "2102240"
  },
  {
    "text": "exactly the same I mean the type definitions are different decoding a grpc request is different than decoding an HTTP request but fundamentally it",
    "start": "2102240",
    "end": "2109200"
  },
  {
    "text": "does the same thing and here's what serve grpc looks like there it's exactly the same workflow just you know different types so this is cool this is",
    "start": "2109200",
    "end": "2116880"
  },
  {
    "text": "like maybe a model of a service that we've built we have our core service we've done logging and instrumenting middleware in the service domain we've",
    "start": "2116880",
    "end": "2122200"
  },
  {
    "text": "split out our two endpoints or our 10 endpoints we've wrapped them with um you know different endpoint Wares and then",
    "start": "2122200",
    "end": "2128560"
  },
  {
    "text": "at the end we've uh and then like exposed them on HTTP uh individual like",
    "start": "2128560",
    "end": "2133800"
  },
  {
    "text": "little HTTP servers and at the end we've wrapped all the HTTP servers in sort of a box and we can present that on a port",
    "start": "2133800",
    "end": "2141040"
  },
  {
    "text": "and that can be how you talk to our service right but observe what's cool about this like we've constructed the HTTP server around the endpoint but like",
    "start": "2141040",
    "end": "2148520"
  },
  {
    "text": "we can also pass the exact same endpoint to a grpc server and we can expose the exact same service exact same business",
    "start": "2148520",
    "end": "2154160"
  },
  {
    "text": "logic exact same um like safety checking all the middlewares all the decorators all the way down on two um ports running",
    "start": "2154160",
    "end": "2161560"
  },
  {
    "text": "two different protocols at the same time right and and this is like key for me because we want to play nice in your",
    "start": "2161560",
    "end": "2167280"
  },
  {
    "text": "existing environment we want to um gokit wants to be very helpful for like so-called Brownfield development right",
    "start": "2167280",
    "end": "2172960"
  },
  {
    "text": "where you have this old architecture and you want to kind of go on the migration path to the cloud native future but you",
    "start": "2172960",
    "end": "2178079"
  },
  {
    "text": "need to do stuff like this for a while and this sort of extends this is an example um of Transport kind of like uh",
    "start": "2178079",
    "end": "2183720"
  },
  {
    "text": "adaptation but we also have the same idiom uh in in the metrics package so if you're currently using uh statsd but you",
    "start": "2183720",
    "end": "2190319"
  },
  {
    "text": "want to go to Prometheus you can use a a metric abstraction that you can plug in",
    "start": "2190319",
    "end": "2195560"
  },
  {
    "text": "a statd backend into it today you use that abstraction all through the code and then later you can add in a",
    "start": "2195560",
    "end": "2201400"
  },
  {
    "text": "Prometheus um backend it can go to both and then later when you shut down your statsd infrastructure you just delete",
    "start": "2201400",
    "end": "2207119"
  },
  {
    "text": "the statsd implementation that's totally fine and that's how a lot of things in gokit work in general we Embrace and extend",
    "start": "2207119",
    "end": "2215040"
  },
  {
    "start": "2212000",
    "end": "2262000"
  },
  {
    "text": "Go's philosophy to be sort of simple and non magical by these by these uh definitions that we talked about before",
    "start": "2215040",
    "end": "2221560"
  },
  {
    "text": "in service to software engineering at the large and put another way I want to optimize for maintainability above all",
    "start": "2221560",
    "end": "2227920"
  },
  {
    "text": "else so the life cycle of the service from birth to death and hopefully all services die at some point um how much",
    "start": "2227920",
    "end": "2235119"
  },
  {
    "text": "time do you spend writing V1 of the service right versus operating it I think it's like about this long to about",
    "start": "2235119",
    "end": "2241160"
  },
  {
    "text": "this long right or like how much time do you spend writing code in general versus reading it like probably about this much",
    "start": "2241160",
    "end": "2246800"
  },
  {
    "text": "this much right so so um goid is very much keeping that in mind as does go I think optimizing for reading rather than",
    "start": "2246800",
    "end": "2253520"
  },
  {
    "text": "writing and so it's a bit for Bose in some places but I think it pays out in the end so I have I think like three minutes",
    "start": "2253520",
    "end": "2260440"
  },
  {
    "text": "left is that right something like that so I want to just quickly go through and talk about how we integrate with a cloud native stack um spoiler alert it's all",
    "start": "2260440",
    "end": "2268119"
  },
  {
    "text": "basically decorators so um first up I still have three minutes you still",
    "start": "2268119",
    "end": "2274760"
  },
  {
    "text": "have three yes I don't know I",
    "start": "2274760",
    "end": "2279440"
  },
  {
    "text": "okay we're going to do it Prometheus is a metrics decorator uh it works exactly like this uh we use this metrics counter",
    "start": "2281839",
    "end": "2287400"
  },
  {
    "text": "I've already explained it to you cool uh open tracing very hard to do if you're just getting started but uh re return to",
    "start": "2287400",
    "end": "2294240"
  },
  {
    "text": "this uh model what is a life cycle of a request well it comes through it traverses all of these uh layers right",
    "start": "2294240",
    "end": "2299680"
  },
  {
    "text": "it goes to your business logic it may need to like go out call some other service right um that'll come back and",
    "start": "2299680",
    "end": "2305319"
  },
  {
    "text": "it'll Traverse the business logic and then go back out to the original requester I literally have two",
    "start": "2305319",
    "end": "2312359"
  },
  {
    "text": "minutes but on the schedule it said 235 oh that's too bad all right well too",
    "start": "2312359",
    "end": "2321040"
  },
  {
    "text": "bad thank you very much",
    "start": "2321040",
    "end": "2325200"
  },
  {
    "text": "[Applause]",
    "start": "2326740",
    "end": "2330450"
  }
]