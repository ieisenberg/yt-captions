[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hello welcome everyone to kubecon and to this session",
    "start": "2560",
    "end": "7759"
  },
  {
    "text": "i am um ceo of chaos native i am also a maintainer on",
    "start": "7759",
    "end": "14639"
  },
  {
    "text": "the of project litmus chaos along with me in this session",
    "start": "14639",
    "end": "20320"
  },
  {
    "text": "we have a co-speaker summer siddharth from orange",
    "start": "20320",
    "end": "25760"
  },
  {
    "text": "today we'll be talking about a case study of",
    "start": "25760",
    "end": "32398"
  },
  {
    "start": "27000",
    "end": "27000"
  },
  {
    "text": "chaos engineering project litmus at orange how they're using",
    "start": "32399",
    "end": "37680"
  },
  {
    "text": "to improve the resilience of the overall kubernetes based platform",
    "start": "37680",
    "end": "43360"
  },
  {
    "text": "so we're going to talk uh the first challenges in general about reliability",
    "start": "43360",
    "end": "49520"
  },
  {
    "start": "44000",
    "end": "44000"
  },
  {
    "text": "around kubernetes ecosystem today and i will be talking about how litmus",
    "start": "49520",
    "end": "56399"
  },
  {
    "text": "can help in incrementally tackling this challenge of reliability",
    "start": "56399",
    "end": "63280"
  },
  {
    "text": "in kubernetes and cloud native environments in general and",
    "start": "63280",
    "end": "68640"
  },
  {
    "text": "summer will talk through the challenges that they had seen",
    "start": "68640",
    "end": "74960"
  },
  {
    "text": "for reliability in their kubernetes environment and why they chose litmus and how they're using",
    "start": "74960",
    "end": "81840"
  },
  {
    "text": "litmus and of course he will be doing a detailed demo of a",
    "start": "81840",
    "end": "87040"
  },
  {
    "text": "couple of scenarios so let's talk about uh the resilience in",
    "start": "87040",
    "end": "92960"
  },
  {
    "start": "89000",
    "end": "89000"
  },
  {
    "text": "general we all know that uh cloud native is mainstream mighty",
    "start": "92960",
    "end": "98720"
  },
  {
    "text": "and it's in deeper option phase so this also brings couple of challenges",
    "start": "98720",
    "end": "104479"
  },
  {
    "text": "as far as the resilience or reliability in production or in use is concerned",
    "start": "104479",
    "end": "110799"
  },
  {
    "text": "the reason why these challenges occur is there is proliferation of micro",
    "start": "110799",
    "end": "117360"
  },
  {
    "text": "services there are too many of them and they are shipping quite fast",
    "start": "117360",
    "end": "122479"
  },
  {
    "text": "they come to your environment faster than you would expect so this uh even though they are all",
    "start": "122479",
    "end": "128879"
  },
  {
    "text": "individually reliable well tested when you all put together this micro services to form your application service",
    "start": "128879",
    "end": "135920"
  },
  {
    "text": "the dependency matrix increases a lot and any fault anywhere",
    "start": "135920",
    "end": "141280"
  },
  {
    "text": "really means that you may have a problem of availability in your service",
    "start": "141280",
    "end": "146879"
  },
  {
    "text": "so you need to be able to be resilient to all these faulty scenarios that's",
    "start": "146879",
    "end": "152720"
  },
  {
    "text": "really the reliability challenge and the solution to this bigger problem",
    "start": "152720",
    "end": "159040"
  },
  {
    "start": "155000",
    "end": "155000"
  },
  {
    "text": "is adopt chaos engineering and chaos engineering has been",
    "start": "159040",
    "end": "164959"
  },
  {
    "text": "on the rise for the last couple of years we are seeing a lot of people using chaos engineering or project litmus is",
    "start": "164959",
    "end": "172879"
  },
  {
    "text": "an evidence to that and we are expecting that chaos engineering will be a mainstream uh",
    "start": "172879",
    "end": "179840"
  },
  {
    "text": "solution or a tool set uh in the very near future",
    "start": "179840",
    "end": "185360"
  },
  {
    "text": "and uh chaos engineering is being adopted for the overall devops not just",
    "start": "185360",
    "end": "191519"
  },
  {
    "text": "for ops which is typically the case uh in the last decade or so but now we see chaos",
    "start": "191519",
    "end": "199760"
  },
  {
    "text": "engineering being used uh both in pipelines qa environments uh",
    "start": "199760",
    "end": "205440"
  },
  {
    "text": "reliability testing test beds all that stuff performance engineering so chaos",
    "start": "205440",
    "end": "210480"
  },
  {
    "text": "engineering is emerging as a greater tool set for developers and devops in general",
    "start": "210480",
    "end": "216480"
  },
  {
    "text": "so the whole idea of chaos engineering is to cover the unexpected so think that",
    "start": "216480",
    "end": "221840"
  },
  {
    "text": "anything can go wrong and you make sure that you test your system against all such possible failures and",
    "start": "221840",
    "end": "228879"
  },
  {
    "text": "you reduce the chance of downtime of your service and there are many tools available uh in",
    "start": "228879",
    "end": "235680"
  },
  {
    "text": "the industry especially in the cloud native space they're easy to use",
    "start": "235680",
    "end": "241200"
  },
  {
    "text": "you can use them and put them to work and reduce the possibility of",
    "start": "241200",
    "end": "247120"
  },
  {
    "text": "down times at the production site right and how you do",
    "start": "247120",
    "end": "252560"
  },
  {
    "text": "this is put the chaos experiments together in various forms chain them",
    "start": "252560",
    "end": "259199"
  },
  {
    "text": "build steady state hypothesis closer to your reality and",
    "start": "259199",
    "end": "264400"
  },
  {
    "text": "go deeper improvise your steady state hypothesis checks and",
    "start": "264400",
    "end": "269840"
  },
  {
    "text": "and then start fixing your either configuration issues or software books or infrastructure",
    "start": "269840",
    "end": "277840"
  },
  {
    "text": "tuning to your service to be highly available",
    "start": "278320",
    "end": "283840"
  },
  {
    "start": "283000",
    "end": "283000"
  },
  {
    "text": "and litmus is born out of uh clearly such a need and it's",
    "start": "284080",
    "end": "290560"
  },
  {
    "text": "an open source project which is part of cncf for uh more than a",
    "start": "290560",
    "end": "296479"
  },
  {
    "text": "year now and we have developed a litmus about three years ago and donated it to",
    "start": "296479",
    "end": "304080"
  },
  {
    "text": "cncf sandbox project last year uh we're doing",
    "start": "304080",
    "end": "309840"
  },
  {
    "text": "the incubation process right now hopefully uh will be an incubation project in the",
    "start": "309840",
    "end": "315840"
  },
  {
    "text": "near future it has got a quite a good adoption with",
    "start": "315840",
    "end": "321039"
  },
  {
    "text": "a thousand plus users and it's a pretty stable platform with 2.0 as the latest",
    "start": "321039",
    "end": "326880"
  },
  {
    "text": "release and we are seeing quite a good installation uh rate of about a thousand",
    "start": "326880",
    "end": "332960"
  },
  {
    "text": "installations per day it's a complete tool set for anyone to do chaos",
    "start": "332960",
    "end": "338560"
  },
  {
    "text": "engineering and it is a kubernetes application and it can run both cognitives targets",
    "start": "338560",
    "end": "345199"
  },
  {
    "text": "attacks against cognitive targets and non-cooperatives as well but it's a tool set for doing chaos engineering",
    "start": "345199",
    "end": "351600"
  },
  {
    "start": "351000",
    "end": "351000"
  },
  {
    "text": "and how it works is uh it has got a control plane where",
    "start": "351600",
    "end": "357840"
  },
  {
    "text": "a set of team members can get together collaborate and collaborate",
    "start": "357840",
    "end": "364720"
  },
  {
    "text": "on tuning developing tuning the experiments so together",
    "start": "364720",
    "end": "369759"
  },
  {
    "text": "you develop a chaos workflow which is nothing but a chaos scenario and you can",
    "start": "369759",
    "end": "375039"
  },
  {
    "text": "target them onto your kubernetes resources kubernetes platforms app kubernetes applications and also a bunch",
    "start": "375039",
    "end": "383120"
  },
  {
    "text": "of non-kubernetes use cases as well it could be any cloud platforms or vmware or bare metal uh physical",
    "start": "383120",
    "end": "390720"
  },
  {
    "text": "infrastructure as well so where do you use litmus litmus uh first of all has got uh",
    "start": "390720",
    "end": "398080"
  },
  {
    "start": "393000",
    "end": "393000"
  },
  {
    "text": "readily available chaos experiments to a large extent and uh for both kubernetes as well as",
    "start": "398080",
    "end": "403919"
  },
  {
    "text": "for non-cooperative such as vmware and other cloud platforms so you just need to create chaos scenarios",
    "start": "403919",
    "end": "410800"
  },
  {
    "text": "you don't need to start from like writing chaos experiments for the basic",
    "start": "410800",
    "end": "416160"
  },
  {
    "text": "scenarios so what you would be doing is really construct this chaos scenarios called",
    "start": "416160",
    "end": "422319"
  },
  {
    "text": "litmus workflows and litmus also comes with a powerful feature called probes",
    "start": "422319",
    "end": "429360"
  },
  {
    "text": "which is to help you in creating a steady state hypothesis",
    "start": "429360",
    "end": "435759"
  },
  {
    "text": "logic you introduce a fault you want to know whether my system is still working",
    "start": "435759",
    "end": "441120"
  },
  {
    "text": "as expected or not that's a difficult way to express uh is my system working",
    "start": "441120",
    "end": "446720"
  },
  {
    "text": "properly or not so litmus probes uh really come here to help you uh to",
    "start": "446720",
    "end": "453120"
  },
  {
    "text": "define uh exactly that uh problem declaratively you can tune it you can",
    "start": "453120",
    "end": "460080"
  },
  {
    "text": "get it as close to as you would generally describe what your steady state hypothesis is",
    "start": "460080",
    "end": "465759"
  },
  {
    "text": "and then you can use this entire um end-to-end chaos engineering idea",
    "start": "465759",
    "end": "473599"
  },
  {
    "text": "on for multiple use cases it could be continuous chaos testing or it could be",
    "start": "473599",
    "end": "480160"
  },
  {
    "text": "a random game days to introduce chaos engineering into your system and also for",
    "start": "480160",
    "end": "486000"
  },
  {
    "text": "service level objective validation and management and you can also see if you're your",
    "start": "486000",
    "end": "491199"
  },
  {
    "text": "observability systems are working well or do they need tuning right and",
    "start": "491199",
    "end": "496879"
  },
  {
    "text": "also in your scaling and performance testing right you can introduce chaos while you do the performance testing and",
    "start": "496879",
    "end": "503360"
  },
  {
    "text": "see if your systems can retain so how do you get started as i said we",
    "start": "503360",
    "end": "509199"
  },
  {
    "start": "506000",
    "end": "506000"
  },
  {
    "text": "have got a bunch of experiments already available these are like lego blocks you just need to put them together",
    "start": "509199",
    "end": "515200"
  },
  {
    "text": "and you install litmus through helm and you get chaos center or you start",
    "start": "515200",
    "end": "520719"
  },
  {
    "text": "running uh your basic workflow invite your team members and uh",
    "start": "520719",
    "end": "526160"
  },
  {
    "text": "attach it to your prometheus grafana monitoring system",
    "start": "526160",
    "end": "531200"
  },
  {
    "text": "and everything is in place so it's fairly easy to start at the same time it's highly scalable a powerful sdk is",
    "start": "531200",
    "end": "537839"
  },
  {
    "text": "there and you can go very deep describing your complex hall",
    "start": "537839",
    "end": "543200"
  },
  {
    "text": "scenarios so let's actually uh go through the case study on how orange is using litmus",
    "start": "543200",
    "end": "551839"
  },
  {
    "start": "551000",
    "end": "551000"
  },
  {
    "text": "so the environment that they have is a large open stack system",
    "start": "551839",
    "end": "558399"
  },
  {
    "text": "which is now being moved to being managed by kubernetes so it's a",
    "start": "558399",
    "end": "565360"
  },
  {
    "text": "very large system and very critical system and kubernetes has to manage that pretty well",
    "start": "565360",
    "end": "571360"
  },
  {
    "text": "and the entire challenge and use case is how",
    "start": "571360",
    "end": "576399"
  },
  {
    "text": "can i ensure that my kubernetes is really reliable while managing um this",
    "start": "576399",
    "end": "582640"
  },
  {
    "text": "openstack application or the services so the solution is to really apply",
    "start": "582640",
    "end": "588720"
  },
  {
    "text": "litmus into that kubernetes system and keep executing various",
    "start": "588720",
    "end": "596640"
  },
  {
    "text": "different experiments and continue to verify your",
    "start": "596640",
    "end": "602480"
  },
  {
    "text": "openstack continues to run and kubernetes um kubernetes is behaving as expected",
    "start": "602480",
    "end": "610240"
  },
  {
    "text": "so with that let's welcome summer uh who will be uh talking about",
    "start": "610240",
    "end": "616640"
  },
  {
    "text": "violetness and how and he'll be taking us through a quick demo",
    "start": "616640",
    "end": "621839"
  },
  {
    "text": "hello everyone i'm sama siddharth and working as a lead software engineer in orange which is one of the leading telecom company and today i'm here to",
    "start": "621839",
    "end": "629040"
  },
  {
    "text": "present a use case on improving resiliency of k-test applications",
    "start": "629040",
    "end": "634640"
  },
  {
    "start": "634000",
    "end": "634000"
  },
  {
    "text": "but before we begin let's have a look at the complexity of telco infra in comparison with general id",
    "start": "634640",
    "end": "640480"
  },
  {
    "text": "telco has a complex workload that is tightly coupled with hardware and there are many proprietary vendor applications",
    "start": "640480",
    "end": "645839"
  },
  {
    "text": "running on it in telco sector migration to cloud native is happening at a rapid pace and",
    "start": "645839",
    "end": "650959"
  },
  {
    "text": "many operators in vendor are embracing cloud native technologies if you look at the complexity scale",
    "start": "650959",
    "end": "657279"
  },
  {
    "text": "telco infra requires to be highly secured as it is hosting user data and",
    "start": "657279",
    "end": "662399"
  },
  {
    "text": "with the technology now moving towards 5g it also requires ultra low latency and high throughput",
    "start": "662399",
    "end": "668880"
  },
  {
    "text": "also telco apps have different requirements in terms of network and bandwidth which requires acceleration techniques like",
    "start": "668880",
    "end": "675440"
  },
  {
    "text": "sriv dpdk cpu pending to add to these complexities telco infra",
    "start": "675440",
    "end": "680880"
  },
  {
    "text": "host different type of applications from domains like oss bss and it can be in form of a vna for a cnf",
    "start": "680880",
    "end": "689720"
  },
  {
    "start": "689000",
    "end": "689000"
  },
  {
    "text": "now let's talk about why do we need chaos and resiliency testing as we all know that kubernetes is a",
    "start": "690320",
    "end": "696320"
  },
  {
    "text": "dynamic and a complex system and there are a lot of activities happening under the hood which means kubernetes component can",
    "start": "696320",
    "end": "702720"
  },
  {
    "text": "interact in a number of unpredictable ways causing emergent behavior as deployment grows in size so does the",
    "start": "702720",
    "end": "709680"
  },
  {
    "text": "number of possible interaction between these components and with the traditional testing these",
    "start": "709680",
    "end": "715279"
  },
  {
    "text": "scenarios are hard to uncover in the real world scenarios we have resources that are customized and required focus",
    "start": "715279",
    "end": "722160"
  },
  {
    "text": "testing to cover these scenarios",
    "start": "722160",
    "end": "726240"
  },
  {
    "start": "728000",
    "end": "728000"
  },
  {
    "text": "coming to the architecture of the system under test here we are using two most widely used technologies openstack and",
    "start": "729200",
    "end": "736079"
  },
  {
    "text": "kubernetes as you can see in the diagram kubernetes is serving as an underlay for",
    "start": "736079",
    "end": "741760"
  },
  {
    "text": "the openstack services where one kubernetes node is hosting the control plane services and the other node is the",
    "start": "741760",
    "end": "747279"
  },
  {
    "text": "openstack compute host which have compute related services running on it like nova neutron etc",
    "start": "747279",
    "end": "754560"
  },
  {
    "text": "so there are clear segregation of services based on the type of kubernetes node",
    "start": "754560",
    "end": "759920"
  },
  {
    "text": "additionally if you see we have applications like wall for secret management ny for enabling",
    "start": "759920",
    "end": "766000"
  },
  {
    "text": "tls communication these are being used by openstack services and now it requires some additional testing so that",
    "start": "766000",
    "end": "772079"
  },
  {
    "text": "we don't end up with a single point of failure with respect to integration of these application with openstack",
    "start": "772079",
    "end": "778560"
  },
  {
    "text": "services as we proceed we will cover few such scenarios in the demo",
    "start": "778560",
    "end": "786200"
  },
  {
    "start": "786000",
    "end": "786000"
  },
  {
    "text": "let's see while litmus comes into pictures litmus is a curious orchestration",
    "start": "787360",
    "end": "792399"
  },
  {
    "text": "framework that focuses on kubernetes workload and offers out of the box generate test cases that covers both",
    "start": "792399",
    "end": "798639"
  },
  {
    "text": "kubernetes workload and infrastructure example port delete and node cpu",
    "start": "798639",
    "end": "804160"
  },
  {
    "text": "additionally litmus has a pro feature that enables to run customized validation and it is highly configurable",
    "start": "804160",
    "end": "810320"
  },
  {
    "text": "wherein we can configure the time between the two probe executions and the particular instance where we want to",
    "start": "810320",
    "end": "815760"
  },
  {
    "text": "execute the probe like at the start of the kiosk injection or during the chaos",
    "start": "815760",
    "end": "820880"
  },
  {
    "text": "injection or towards the end of the cause injection this gives the required flexibility to run the validations",
    "start": "820880",
    "end": "828000"
  },
  {
    "text": "also it is easy to integrate with our existing automation framework litmus also has a great community support which",
    "start": "828000",
    "end": "834000"
  },
  {
    "text": "is really good for an open source project",
    "start": "834000",
    "end": "837920"
  },
  {
    "start": "839000",
    "end": "839000"
  },
  {
    "text": "now in this slide i will be covering another open source tool that is cross testing which we have used for writing",
    "start": "840639",
    "end": "846880"
  },
  {
    "text": "custom validations for litmus probes it is a very good framework for writing containerized test cases which are",
    "start": "846880",
    "end": "852800"
  },
  {
    "text": "highly usable and easily integrated to ci cd chain it also offers multiple drivers for",
    "start": "852800",
    "end": "858959"
  },
  {
    "text": "writing test cases like python unit test bash and robot framework",
    "start": "858959",
    "end": "864000"
  },
  {
    "text": "so towards the bottom of the screen you see a sample output from the cross testing",
    "start": "864000",
    "end": "870480"
  },
  {
    "text": "processing test case which includes list of test cases along with projects",
    "start": "870480",
    "end": "875519"
  },
  {
    "text": "to which these test cases belong and the tier of the test cases like healthcare",
    "start": "875519",
    "end": "881360"
  },
  {
    "text": "it also can it also contains the duration of each test case along with the final verdict of future space",
    "start": "881360",
    "end": "888319"
  },
  {
    "start": "889000",
    "end": "889000"
  },
  {
    "text": "so in this slide i am going to cover the cross testing workflow we start with identification of",
    "start": "890720",
    "end": "895839"
  },
  {
    "text": "application which is called application under test this is identified in kubernetes based on the labels and",
    "start": "895839",
    "end": "901519"
  },
  {
    "text": "selectors then we move on to the pre-validation step wherein we perform pre-validation",
    "start": "901519",
    "end": "907519"
  },
  {
    "text": "checks using litmus probes and cross testing which are going to which we are going to see in",
    "start": "907519",
    "end": "913440"
  },
  {
    "text": "the demo next we move on to the chaos injection phase wherein we inject the kiosk",
    "start": "913440",
    "end": "919279"
  },
  {
    "text": "variant to the identified application and also run the on kiosk probe so basically we are",
    "start": "919279",
    "end": "925279"
  },
  {
    "text": "going to check the functionality of the application using litmus probe at the time when the application is under stress",
    "start": "925279",
    "end": "931519"
  },
  {
    "text": "and finally the post validation step so apart from the validating the final state of the application it should be up",
    "start": "931519",
    "end": "937040"
  },
  {
    "text": "and running as it was during the start of the experiment you can also have some additional post validation probes that can perform the",
    "start": "937040",
    "end": "944079"
  },
  {
    "text": "custom post check for the application along with the other actions like clean up of the resources",
    "start": "944079",
    "end": "949440"
  },
  {
    "text": "that were created during the pre-validation steps coming to the use cases resiliency",
    "start": "949440",
    "end": "955759"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "realizes the motto of this cube con and as you see that resiliency is also at the center of our use cases",
    "start": "955759",
    "end": "962000"
  },
  {
    "text": "we can utilize the open source tools for building chaos and resilience test cases around kts workload and infra",
    "start": "962000",
    "end": "968720"
  },
  {
    "text": "what you can see here are the different scenarios such as validating resiliency of the containerized control plane we",
    "start": "968720",
    "end": "974480"
  },
  {
    "text": "can also use this to simulate issues and works that come in production and fix it properly in the pre-prod or development",
    "start": "974480",
    "end": "980560"
  },
  {
    "text": "stages as it can be simulated easily through automation next we can improve the monitoring and",
    "start": "980560",
    "end": "986079"
  },
  {
    "text": "alerting system based on the observations of the chaos experiment by timely and meaningful alerts",
    "start": "986079",
    "end": "993199"
  },
  {
    "text": "we can also use this for validating he of different control plane services as we are integrating additional",
    "start": "993199",
    "end": "998399"
  },
  {
    "text": "applications like vault and y and others to the existing control plane services",
    "start": "998399",
    "end": "1004639"
  },
  {
    "text": "it can also be used for end-to-end automation and testing interdependencies among different applications",
    "start": "1004639",
    "end": "1011839"
  },
  {
    "start": "1013000",
    "end": "1013000"
  },
  {
    "text": "so in the first use case we will be targeting a vault application pod",
    "start": "1016720",
    "end": "1022720"
  },
  {
    "text": "so in this experiment the scenario is we will delete the world application board",
    "start": "1022720",
    "end": "1027918"
  },
  {
    "text": "that is deployed in hk that is we have three volt application pods running so",
    "start": "1027919",
    "end": "1036120"
  },
  {
    "text": "you can see it here so",
    "start": "1038079",
    "end": "1044079"
  },
  {
    "text": "i'll just quickly go through the kiosk engine experiment file",
    "start": "1047520",
    "end": "1053120"
  },
  {
    "text": "so if we see that we have the application identifier here",
    "start": "1053120",
    "end": "1058240"
  },
  {
    "text": "that is the label of the world pod and if we go down below so i'll cover the",
    "start": "1058240",
    "end": "1063360"
  },
  {
    "text": "important parts so if we go below we have the probe section wherein we have the first row which is related to",
    "start": "1063360",
    "end": "1071280"
  },
  {
    "text": "unsealing of the vault so that is basically done uh once all the walls go into field state so it becomes",
    "start": "1071280",
    "end": "1077919"
  },
  {
    "text": "unserviceable so we'll have to unseal it once we delete or",
    "start": "1077919",
    "end": "1084240"
  },
  {
    "text": "restart all the vault parts so it automatically goes into serial store so it has to be sealed manually",
    "start": "1084240",
    "end": "1090320"
  },
  {
    "text": "so first is the unsealed vault probe which is running at the eot that",
    "start": "1090320",
    "end": "1096400"
  },
  {
    "text": "is end of the test and the second probe is check front-end access so this",
    "start": "1096400",
    "end": "1102320"
  },
  {
    "text": "is basically checksystem checking the excess of the vault end point and",
    "start": "1102320",
    "end": "1109520"
  },
  {
    "text": "this is running in the mode edge so which means that it would run at the starting of the experiment and towards",
    "start": "1109520",
    "end": "1114720"
  },
  {
    "text": "the end of the experiment and as you can see there are different parameters which are such exclamatory which covers the",
    "start": "1114720",
    "end": "1122080"
  },
  {
    "text": "gap between the two probes or the timeout parameter for the probes similarly if we",
    "start": "1122080",
    "end": "1127600"
  },
  {
    "text": "go towards the end so here we have set port effect percentage as hundred and the sequence is parallel so it will",
    "start": "1127600",
    "end": "1133440"
  },
  {
    "text": "delete all the parts parallelly",
    "start": "1133440",
    "end": "1137720"
  },
  {
    "text": "i'm applying this kiosk engine manifest",
    "start": "1142640",
    "end": "1147919"
  },
  {
    "text": "as soon as i apply we can see that the litmus part is getting created that is",
    "start": "1149200",
    "end": "1154720"
  },
  {
    "text": "deriving this experiment so if we go to the logs",
    "start": "1154720",
    "end": "1159960"
  },
  {
    "text": "so we can see that the first probe is passed that it was able to get 200 response code from the",
    "start": "1170160",
    "end": "1177280"
  },
  {
    "text": "vault end point and similarly we can see",
    "start": "1177280",
    "end": "1184080"
  },
  {
    "text": "as per the kiosk engine all the pods are getting related at the same time",
    "start": "1184400",
    "end": "1189760"
  },
  {
    "text": "so by now our vault is in a sealed state and it has to be unsealed towards the end of the experiment so which has been",
    "start": "1190080",
    "end": "1196000"
  },
  {
    "text": "taken care by the unseal vault probe",
    "start": "1196000",
    "end": "1201160"
  },
  {
    "text": "so now the unsteal world probe has started",
    "start": "1218720",
    "end": "1223360"
  },
  {
    "text": "and we are towards the end of the experiment so it will take some time to execute",
    "start": "1226080",
    "end": "1231760"
  },
  {
    "text": "so now the eot prop that is towards the end",
    "start": "1231760",
    "end": "1236799"
  },
  {
    "text": "of the experiment it is completed and",
    "start": "1236799",
    "end": "1240960"
  },
  {
    "text": "we have passed all the probes so as you can see in the cast result we see that",
    "start": "1242159",
    "end": "1248559"
  },
  {
    "text": "our experiment is passed the final verdict is passed and we can",
    "start": "1248559",
    "end": "1254400"
  },
  {
    "text": "also see the status of different probes and pros pass",
    "start": "1254400",
    "end": "1259440"
  },
  {
    "text": "through pass percentage as well so this is hundred percent and status of different close is also good so",
    "start": "1259440",
    "end": "1267120"
  },
  {
    "text": "since we have this check your front-end url probe as uh edge so it was first checked",
    "start": "1267120",
    "end": "1272720"
  },
  {
    "text": "at the beginning of the experiment and towards the end and the unsealed part was only towards the",
    "start": "1272720",
    "end": "1278960"
  },
  {
    "text": "end so it is the post chaos probe",
    "start": "1278960",
    "end": "1282799"
  },
  {
    "start": "1282000",
    "end": "1282000"
  },
  {
    "text": "moving to the next experiment it is again related to wall but with a slight difference in this we",
    "start": "1285679",
    "end": "1291919"
  },
  {
    "text": "will be deleting the vault part serially instead of paralleling which means that a single",
    "start": "1291919",
    "end": "1297919"
  },
  {
    "text": "part will be deleted at a time and we can see if the failover is happening properly or not so the vault url",
    "start": "1297919",
    "end": "1306080"
  },
  {
    "text": "or the end point should be reachable till the time all the all the word parts go into a serial",
    "start": "1306080",
    "end": "1312559"
  },
  {
    "text": "state so in this case we will see a failure scenario where",
    "start": "1312559",
    "end": "1317760"
  },
  {
    "text": "all the parts get sealed and the url validation will be filled towards the end so that is expected and",
    "start": "1317760",
    "end": "1326960"
  },
  {
    "text": "for this reason we have configured the vault probe to proceed on",
    "start": "1326960",
    "end": "1332000"
  },
  {
    "text": "failure so we'll still continue with the experiment and unfill the wall towards the end rather than failing and exiting so this",
    "start": "1332000",
    "end": "1338159"
  },
  {
    "text": "is also an option we can feel the experiment in case of probe probe fails and exited so i'll quickly",
    "start": "1338159",
    "end": "1344240"
  },
  {
    "text": "go through the chaos engine manifest for this one also",
    "start": "1344240",
    "end": "1349760"
  },
  {
    "text": "again same label and",
    "start": "1351280",
    "end": "1355440"
  },
  {
    "text": "in this case the only difference that we can see is the check front-end access url is in continuous mode which means",
    "start": "1356640",
    "end": "1362799"
  },
  {
    "text": "that it would be tested from starting till end so",
    "start": "1362799",
    "end": "1368400"
  },
  {
    "text": "basically it would check at the start of the experiment if it is accessible and during the chaos injection phase and",
    "start": "1368400",
    "end": "1373520"
  },
  {
    "text": "towards the end so towards the end it would fail since we'll be deleting all the parts",
    "start": "1373520",
    "end": "1378799"
  },
  {
    "text": "sequentially so it will pass for uh two parts so",
    "start": "1378799",
    "end": "1383840"
  },
  {
    "text": "and towards the end when the third part is deleted so which means that all the parts go into the field state and uh the endpoint is",
    "start": "1383840",
    "end": "1391200"
  },
  {
    "text": "now no more serviceable so the sequence we have selected here is",
    "start": "1391200",
    "end": "1397520"
  },
  {
    "text": "serial so the probe has passed and we are deleting vault one",
    "start": "1397520",
    "end": "1406000"
  },
  {
    "text": "so this is already been deleted and it has recovered",
    "start": "1406159",
    "end": "1411520"
  },
  {
    "text": "similarly we will cover vault 0 and vault 2.",
    "start": "1414640",
    "end": "1419919"
  },
  {
    "text": "so now wall 2 is deleted so it is continuously pulling the",
    "start": "1424799",
    "end": "1433200"
  },
  {
    "text": "vault url the end point and we see a failure towards the end when the last vault code is deleted",
    "start": "1433200",
    "end": "1442440"
  },
  {
    "text": "so i have intentionally added a 30 second delay between uh consecutive gas injections",
    "start": "1447440",
    "end": "1453200"
  },
  {
    "text": "so that the port can recover so yeah so now the connection has lost as soon as we",
    "start": "1453200",
    "end": "1458960"
  },
  {
    "text": "deleted the vault zero part so now",
    "start": "1458960",
    "end": "1464320"
  },
  {
    "text": "the pro has started to fail and finally it will mark this probe as fail",
    "start": "1464320",
    "end": "1469840"
  },
  {
    "text": "and proceed with the final proof execution that is unsealing of the",
    "start": "1469840",
    "end": "1474960"
  },
  {
    "text": "vault since all the application is up and running all the pods are up and running",
    "start": "1474960",
    "end": "1481279"
  },
  {
    "text": "so it proceeded and it failed the front-end access url board which was expected since",
    "start": "1481279",
    "end": "1487200"
  },
  {
    "text": "all the pods end into seal state during the continuous probe evaluation",
    "start": "1487200",
    "end": "1492640"
  },
  {
    "text": "and now it's running the unseal vault row so now we can see that the final probe",
    "start": "1492640",
    "end": "1499760"
  },
  {
    "text": "has completed successfully and it has unsealed the world but the overall result is a fail",
    "start": "1499760",
    "end": "1506799"
  },
  {
    "text": "because the probe that was validating the url failed towards the end so we can check",
    "start": "1506799",
    "end": "1512799"
  },
  {
    "text": "this in the end as well so i'll just [Music]",
    "start": "1512799",
    "end": "1519039"
  },
  {
    "text": "so in this result chaos result we can see that it was failed during running the probe",
    "start": "1521600",
    "end": "1528080"
  },
  {
    "text": "and the proof success percentage is 50 since it was able to pass at the",
    "start": "1528080",
    "end": "1534159"
  },
  {
    "text": "beginning but was not able to pass towards the end so it was partially successful",
    "start": "1534159",
    "end": "1539679"
  },
  {
    "text": "so that's why the success percentage is 50 and it also lists which the which group got",
    "start": "1539679",
    "end": "1546559"
  },
  {
    "text": "failed so this is the check front and access url probe that got failed",
    "start": "1546559",
    "end": "1551840"
  },
  {
    "start": "1551000",
    "end": "1551000"
  },
  {
    "text": "so moving on to the use case where we are going to target one of the openstack service that is nova scheduler quickly",
    "start": "1553760",
    "end": "1559600"
  },
  {
    "text": "going through the chaos engine manifest for nova scheduler",
    "start": "1559600",
    "end": "1564640"
  },
  {
    "text": "so here we are identifying the application by the name space and by the label of nova scheduler",
    "start": "1564640",
    "end": "1571890"
  },
  {
    "text": "[Music] here we have three uh probes that are running",
    "start": "1571890",
    "end": "1577600"
  },
  {
    "text": "out of which two are running on cures and the last one is running towards the end",
    "start": "1577600",
    "end": "1582880"
  },
  {
    "text": "of the test case so the first on chaos probe is create resources",
    "start": "1582880",
    "end": "1589360"
  },
  {
    "text": "which is basically creating open stack resources at the time of chaos injection",
    "start": "1589360",
    "end": "1596480"
  },
  {
    "text": "and similarly we have uh checkping which is checking the",
    "start": "1596559",
    "end": "1601919"
  },
  {
    "text": "reachability of the vm created during the create resource so here we have adjusted with the timing",
    "start": "1601919",
    "end": "1608080"
  },
  {
    "text": "so since there's some time that is taken to create the resource so this probe would get",
    "start": "1608080",
    "end": "1614080"
  },
  {
    "text": "triggered after a delay of certain amount that is 180 seconds and similarly towards the end we are",
    "start": "1614080",
    "end": "1620880"
  },
  {
    "text": "running another probe that is cleaning up all the resources so here the pod effect percentage is 20",
    "start": "1620880",
    "end": "1627039"
  },
  {
    "text": "which means that a single part would be targeted at a time since we have four pods uh that are",
    "start": "1627039",
    "end": "1632720"
  },
  {
    "text": "running in an hm mode so these are the pods",
    "start": "1632720",
    "end": "1639080"
  },
  {
    "text": "i'll quickly apply this manifest file to start the experiment",
    "start": "1642799",
    "end": "1649720"
  },
  {
    "text": "let's follow the log for this part",
    "start": "1656640",
    "end": "1661000"
  },
  {
    "text": "[Music] so this this is the first part that is getting deleted",
    "start": "1672490",
    "end": "1679120"
  },
  {
    "text": "so since we have selected the selection of the part random so it will",
    "start": "1679120",
    "end": "1684640"
  },
  {
    "text": "select any part randomly and delete it and would continue to do that till the total",
    "start": "1684640",
    "end": "1690880"
  },
  {
    "text": "chaos duration is completed and we'll be waiting for 30 seconds",
    "start": "1690880",
    "end": "1698000"
  },
  {
    "text": "between every chaos injections so that we get time uh for the previous part to recover",
    "start": "1698000",
    "end": "1706240"
  },
  {
    "text": "so this we can see that resources are getting created",
    "start": "1707840",
    "end": "1713480"
  },
  {
    "text": "[Music]",
    "start": "1714090",
    "end": "1717179"
  },
  {
    "text": "and here we can see that randomly a pod is getting deleted so the first one was this one",
    "start": "1726240",
    "end": "1731840"
  },
  {
    "text": "based on the uptime so now this is the one that was deleted last",
    "start": "1731840",
    "end": "1737960"
  },
  {
    "text": "[Music]",
    "start": "1762030",
    "end": "1765260"
  },
  {
    "text": "so we have kept multiple iteration of this cross injection for nova scheduler pod",
    "start": "1767440",
    "end": "1773279"
  },
  {
    "text": "so that we make sure that it is overlapping with the on kiosk probe so",
    "start": "1773279",
    "end": "1778320"
  },
  {
    "text": "we want to make sure that the resources that are being created is overlapping with the kiosk injection",
    "start": "1778320",
    "end": "1784559"
  },
  {
    "text": "time so that we can actually uh test the availability of the services toward to the end user if",
    "start": "1784559",
    "end": "1791600"
  },
  {
    "text": "there is any degradation of the services or any impact in creation of the openstack resources",
    "start": "1791600",
    "end": "1797760"
  },
  {
    "text": "with respect to the nova scotia reports [Music]",
    "start": "1797760",
    "end": "1803200"
  },
  {
    "text": "so this is the log of the cross testing container that created the services so",
    "start": "1803200",
    "end": "1809840"
  },
  {
    "text": "this has passed and now it has proceeded to the second on",
    "start": "1809840",
    "end": "1815360"
  },
  {
    "text": "customer that is checking the connectivity of the vm that was created",
    "start": "1815360",
    "end": "1820799"
  },
  {
    "text": "so one thing that needs to be taken care here is aligning the timing of the",
    "start": "1820880",
    "end": "1826559"
  },
  {
    "text": "kiosk experiment so we do have options of aligning the time uh between the probe running of the",
    "start": "1826559",
    "end": "1833360"
  },
  {
    "text": "probe and the chaos injection so that has to be taken care",
    "start": "1833360",
    "end": "1838240"
  },
  {
    "text": "so now the connectivity check has also passed so the there was no",
    "start": "1839600",
    "end": "1845760"
  },
  {
    "text": "packet loss observed",
    "start": "1845760",
    "end": "1849480"
  },
  {
    "text": "hundred and the final word data is also passed all the proofs pass without any issues so",
    "start": "1852720",
    "end": "1859760"
  },
  {
    "text": "we can now see that the nova scheduler is resilient to pod delete experiment",
    "start": "1861440",
    "end": "1869200"
  },
  {
    "start": "1869000",
    "end": "1869000"
  },
  {
    "text": "this is a sample output of the cross testing based group containers so",
    "start": "1869200",
    "end": "1877039"
  },
  {
    "text": "resource validator is basically the one that created the resources checkping was a connectivity check resource deletion",
    "start": "1877519",
    "end": "1883760"
  },
  {
    "text": "was the cleanup part and this is a another probe with which we used to run",
    "start": "1883760",
    "end": "1888880"
  },
  {
    "text": "the in simple rules and take corrective actions during the chaos injection phase or",
    "start": "1888880",
    "end": "1894799"
  },
  {
    "text": "post-cross-injection phase similarly this is the litmus result which i just showed you",
    "start": "1894799",
    "end": "1900720"
  },
  {
    "text": "and which captures all the details and makes it easily integratable with the ci cd",
    "start": "1900720",
    "end": "1907120"
  },
  {
    "text": "chain so that's all from the demo perspective thank you all thank you for your time",
    "start": "1907120",
    "end": "1912880"
  },
  {
    "text": "and thank you for joining this demo",
    "start": "1912880",
    "end": "1917760"
  },
  {
    "text": "welcome back i hope you liked the demo by summer where",
    "start": "1919200",
    "end": "1925120"
  },
  {
    "text": "he actually showed two scenarios uh by injecting chaos into his uh",
    "start": "1925120",
    "end": "1931200"
  },
  {
    "text": "running openstack system and he was able to verify that the system continues to function",
    "start": "1931200",
    "end": "1940320"
  },
  {
    "text": "and he was able to check the steady state hypothesis at",
    "start": "1940320",
    "end": "1946159"
  },
  {
    "text": "various instances using litmus probes so the summary uh",
    "start": "1946159",
    "end": "1951279"
  },
  {
    "start": "1950000",
    "end": "1950000"
  },
  {
    "text": "is uh you will be able to do deep chaos and you should be doing deep chaos uh in",
    "start": "1951279",
    "end": "1957840"
  },
  {
    "text": "an operating environment uh to validate the functioning of your",
    "start": "1957840",
    "end": "1962880"
  },
  {
    "text": "application the functioning of your kubernetes and summer and his team at orange is able to",
    "start": "1962880",
    "end": "1970399"
  },
  {
    "text": "do that successfully and i hope you'll be able to do something similar if your needs are",
    "start": "1970399",
    "end": "1976880"
  },
  {
    "text": "similar use litmus for your reliability needs you can get started with um",
    "start": "1976880",
    "end": "1984240"
  },
  {
    "start": "1979000",
    "end": "1979000"
  },
  {
    "text": "docs uh of bitmas docs.technoscales.io and",
    "start": "1984240",
    "end": "1989519"
  },
  {
    "text": "if you need any help with litmus we will be available",
    "start": "1989519",
    "end": "1994640"
  },
  {
    "text": "at the litmus channel on kubernetes community and with that thank you very much folks",
    "start": "1994640",
    "end": "2001600"
  },
  {
    "text": "you all have a great kubecon cheers",
    "start": "2001600",
    "end": "2007440"
  }
]