[
  {
    "text": "good afternoon everyone welcome to the talk on grpc proxil service mesh upcoming features",
    "start": "520",
    "end": "7240"
  },
  {
    "text": "for connecting to S Services I am Kanan jasam I work at the Google Bangalore",
    "start": "7240",
    "end": "14040"
  },
  {
    "text": "office and I work on the grpc Java",
    "start": "14040",
    "end": "18600"
  },
  {
    "text": "team we'll do a bunch of U introductory Concepts uh on on XTS and",
    "start": "19560",
    "end": "27359"
  },
  {
    "text": "PSM as JPC aware is a uh high performance RPC",
    "start": "27359",
    "end": "33719"
  },
  {
    "text": "framework and uh service mesh is a dedicated infrastructure layer that",
    "start": "33719",
    "end": "40680"
  },
  {
    "text": "controls service to service Communication in a distributed application um how many of you here are",
    "start": "40680",
    "end": "46920"
  },
  {
    "text": "familiar with what service mesh is or already have used service mesh okay that's a that's a that's a",
    "start": "46920",
    "end": "54079"
  },
  {
    "text": "bunch of folks here um so we are basically going to build upon some of the concept that exist in grpc already",
    "start": "54079",
    "end": "60920"
  },
  {
    "text": "for supporting service mesh so um a service mesh abstracts the application",
    "start": "60920",
    "end": "66159"
  },
  {
    "text": "code from the network aspect of the communication and it can be implemented either as site site C proxies such as",
    "start": "66159",
    "end": "73119"
  },
  {
    "text": "ony or in the case of grpc this capability exist in the RPC framework",
    "start": "73119",
    "end": "79240"
  },
  {
    "text": "itself XTS is a control plan protocol to configure a mesh or a bunch of different",
    "start": "79240",
    "end": "85880"
  },
  {
    "text": "nodes it came out of onvoy and it was how different control planes could configure on as a side car it's",
    "start": "85880",
    "end": "92799"
  },
  {
    "text": "basically a watch based API to get configuration updates from the control plane um most of the interesting parts",
    "start": "92799",
    "end": "100240"
  },
  {
    "text": "are more in the resources themselves than in the in the protocol itself there",
    "start": "100240",
    "end": "106079"
  },
  {
    "text": "are couple of different implementations of control plane uh there's the Google's traffic director sto and there's a go",
    "start": "106079",
    "end": "112320"
  },
  {
    "text": "control plan all these use XTS to push configuration to grpc so with grpc you",
    "start": "112320",
    "end": "119159"
  },
  {
    "text": "able to get the configuration from the control plane and use them for the",
    "start": "119159",
    "end": "124360"
  },
  {
    "text": "aspects of communication the X in XTS basically it's it's a variable um it",
    "start": "124360",
    "end": "131599"
  },
  {
    "text": "stands for different resource types and different load balancing policies apply at each level of Discovery like we have",
    "start": "131599",
    "end": "139319"
  },
  {
    "text": "listener Discovery route CL cluster and endpoint Discovery um we'll just touch upon what",
    "start": "139319",
    "end": "145920"
  },
  {
    "text": "each of these mean uh LDS resource denotes a l s lad balancing",
    "start": "145920",
    "end": "150959"
  },
  {
    "text": "configurations for a particular backend service application whereas auds is a route disc",
    "start": "150959",
    "end": "157959"
  },
  {
    "text": "Discovery uh it denotes routing config for virtual host in a particular service in a particular backend service CDs is a",
    "start": "157959",
    "end": "165640"
  },
  {
    "text": "cluster configuration of uh of either logical ders names in a route or it's a",
    "start": "165640",
    "end": "171360"
  },
  {
    "text": "cluster of EDS resources that them themselves contain the endpoint addresses uh that that you will connect",
    "start": "171360",
    "end": "178560"
  },
  {
    "text": "to and how these XTS resources get created on the control plane basically",
    "start": "178560",
    "end": "184080"
  },
  {
    "text": "there would be a some certain configuration apis such as uh Google's",
    "start": "184080",
    "end": "189200"
  },
  {
    "text": "own service routing apis in the case of Google or it could be it could differ",
    "start": "189200",
    "end": "194720"
  },
  {
    "text": "based on the whatever the service provider supports to to configure the control plane with these",
    "start": "194720",
    "end": "201280"
  },
  {
    "text": "resources um now service security",
    "start": "202239",
    "end": "210920"
  },
  {
    "text": "service to service security uh what does grpc PSM security offer uh so this is an",
    "start": "210920",
    "end": "217120"
  },
  {
    "text": "existing offering for mtls communication um that uh for and and our our talk is",
    "start": "217120",
    "end": "223560"
  },
  {
    "text": "going to build on top of these existing security features so I'm going to touch a little bit on the security offering",
    "start": "223560",
    "end": "229120"
  },
  {
    "text": "that exist today for mtls authentication or Mutual TLS both",
    "start": "229120",
    "end": "235120"
  },
  {
    "text": "parties must acquire the other party to present their certificate and both C to",
    "start": "235120",
    "end": "240159"
  },
  {
    "text": "be presented and the trust store location to be used are pushed uh to the",
    "start": "240159",
    "end": "245439"
  },
  {
    "text": "cont to the XTS clients by the control plane so so you don't have to have all the code for um to to to know where",
    "start": "245439",
    "end": "255159"
  },
  {
    "text": "where to load these uh prust locations from um authorization can be configured",
    "start": "255159",
    "end": "260840"
  },
  {
    "text": "by requiring the P to to belong to a particular workload domain called SP",
    "start": "260840",
    "end": "266800"
  },
  {
    "text": "identifier um there's a previous cubec con talk by Sanjay puer from Google",
    "start": "266800",
    "end": "271919"
  },
  {
    "text": "which you can refer to for the the current existing offerings in grpc for",
    "start": "271919",
    "end": "280120"
  },
  {
    "text": "security um this is a high level overview of the the entry and flow of a mtls communication this picture shows uh",
    "start": "280639",
    "end": "288759"
  },
  {
    "text": "the components that are involved in making a XTS managed proxyless service m",
    "start": "288759",
    "end": "294039"
  },
  {
    "text": "security offering work um so on the left you have a lello box the client which needs to",
    "start": "294039",
    "end": "300199"
  },
  {
    "text": "uh send rpcs to the server on the right in red over a secure channel the client and server needs the",
    "start": "300199",
    "end": "307479"
  },
  {
    "text": "SEC the certificates and the keys that are provided by the certificate and deployment infrastructure to make this",
    "start": "307479",
    "end": "313840"
  },
  {
    "text": "all happen um so there is a certificate and diploma infra that is shown in the",
    "start": "313840",
    "end": "319280"
  },
  {
    "text": "green box uh below and then on the top we have the XTS control plan so both these uh things together make all these",
    "start": "319280",
    "end": "326160"
  },
  {
    "text": "uh uh MTL communication configurations happen ly U so there is a there is a",
    "start": "326160",
    "end": "332800"
  },
  {
    "text": "certifying certification authorities AKA Cas to Me Mint the certificates and",
    "start": "332800",
    "end": "338240"
  },
  {
    "text": "there's a process to continuously generate csrs and use them to to mean the certificates before XPR and a",
    "start": "338240",
    "end": "343880"
  },
  {
    "text": "mechanism to make this service certificates and keys available to grpc uh using gpc's file Watcher plug-in",
    "start": "343880",
    "end": "350840"
  },
  {
    "text": "mechanism when all these things are put together the client and server are able to secure their grpc traffic this is",
    "start": "350840",
    "end": "356880"
  },
  {
    "text": "mtls uh now for for the purposes of this discussion though the main takeway from",
    "start": "356880",
    "end": "363639"
  },
  {
    "text": "this picture is that both client on server or XTS enabled which means they talk to the",
    "start": "363639",
    "end": "369680"
  },
  {
    "text": "control plane to get all the security configuration from the control plane uh and uh and we we are going to",
    "start": "369680",
    "end": "377319"
  },
  {
    "text": "basically talk about how this uh uh the new features that built up on top of this for uh talking to",
    "start": "377319",
    "end": "386400"
  },
  {
    "text": "serus uh now it's a continuation from the previous slide we talked about uh",
    "start": "387440",
    "end": "392759"
  },
  {
    "text": "the the control planes communication pushing the configur security configuration to the XTS client whe",
    "start": "392759",
    "end": "398919"
  },
  {
    "text": "which is either a grpc client or a server um about the security configuration to use for a particular",
    "start": "398919",
    "end": "404280"
  },
  {
    "text": "connection uh the trust store uh to validate the certificates presented by the other party um so it's basically",
    "start": "404280",
    "end": "410199"
  },
  {
    "text": "there's a u there's an onvoy Proto um which we are going to enhance so this",
    "start": "410199",
    "end": "415759"
  },
  {
    "text": "certificate validation context which is part of uh CDs data uh the cluster uh",
    "start": "415759",
    "end": "422120"
  },
  {
    "text": "configuration data that contains either either of these two Fields uh trust CA",
    "start": "422120",
    "end": "428199"
  },
  {
    "text": "or it's a name of a plugin uh the certificate provider instance plug-in name that's what exists today and uh in",
    "start": "428199",
    "end": "435759"
  },
  {
    "text": "the in the com upcoming slides we are basically going to enhance this now first of all little bit of uh coming to",
    "start": "435759",
    "end": "441800"
  },
  {
    "text": "the problem little bit of background about what is serers and why we want to",
    "start": "441800",
    "end": "447400"
  },
  {
    "text": "uh connect to serers U so so serverless back ends are services that are scaled on demand and sit behind the reverse",
    "start": "447400",
    "end": "454400"
  },
  {
    "text": "proxy examples of serverless are Google Cloud run and AWS L Services why does",
    "start": "454400",
    "end": "460240"
  },
  {
    "text": "service Sur Services need a reverse proxy because we are going to see there are some of the problems are present are",
    "start": "460240",
    "end": "466960"
  },
  {
    "text": "coming up uh are are existing because uh there is a reverse proxy uh serous",
    "start": "466960",
    "end": "472400"
  },
  {
    "text": "Services being on demand elastic Services there may be zero instance of a surve service at any time and and they",
    "start": "472400",
    "end": "478280"
  },
  {
    "text": "are spun up on demand and hence there's a need to receive incoming traffic via the reverse proxy",
    "start": "478280",
    "end": "484599"
  },
  {
    "text": "and then spin up in senses of the serverless buckin as needed uh",
    "start": "484599",
    "end": "491759"
  },
  {
    "text": "however the problem space we're addressing in this stock is not unique to serverless other reasons can exist",
    "start": "491759",
    "end": "496840"
  },
  {
    "text": "for using reverse proxy such as for providing service load balancing or for enhanced",
    "start": "496840",
    "end": "503599"
  },
  {
    "text": "security U now the first problem that uh talking to ser presence is uh serice",
    "start": "504599",
    "end": "511879"
  },
  {
    "text": "certificate validation uh now we want the grpc",
    "start": "511879",
    "end": "516959"
  },
  {
    "text": "service mesh expand it reach to serverless workloads in a secure way uh so in this picture there's a",
    "start": "516959",
    "end": "524480"
  },
  {
    "text": "seress Buton named app one and app two on the right uh and there's a reverse",
    "start": "524480",
    "end": "530240"
  },
  {
    "text": "proxy shown in red that sits in front of these uh serverless buttons and uh now",
    "start": "530240",
    "end": "536000"
  },
  {
    "text": "all the incoming traffic terminate of the reverse proxy um and which then internally talks to The surus Bu to",
    "start": "536000",
    "end": "542920"
  },
  {
    "text": "which the traffic is directed at there is no direct communication um uh no ENT",
    "start": "542920",
    "end": "549760"
  },
  {
    "text": "connection directly from an external party to the one of the seress buck so",
    "start": "549760",
    "end": "554959"
  },
  {
    "text": "uh uh and the client which is shown on the left is in AOW is a mesh client service mesh client that is boot sted",
    "start": "554959",
    "end": "562000"
  },
  {
    "text": "with the configuration for the control plane it uh so it can receive the configurations uh security",
    "start": "562000",
    "end": "567240"
  },
  {
    "text": "configurations from the control plane and um as shown the previous slide there is a below below the client there is a",
    "start": "567240",
    "end": "574440"
  },
  {
    "text": "managed CA uh this CA is managed and it has a key store available U through the",
    "start": "574440",
    "end": "581720"
  },
  {
    "text": "grpc file plug-in mechanism now so this is this being the existing setup so what",
    "start": "581720",
    "end": "587200"
  },
  {
    "text": "is a problem here is there is a uh uh proxy the reverse proxy certificate has",
    "start": "587200",
    "end": "594000"
  },
  {
    "text": "been issued uh by a public CA uh which are which are commercial uh certifi",
    "start": "594000",
    "end": "600079"
  },
  {
    "text": "certificate issuing authorities uh uh like Verizon or some other uh and uh the",
    "start": "600079",
    "end": "606040"
  },
  {
    "text": "problem is that the ca the managed CA routs do not include or chain up to one",
    "start": "606040",
    "end": "611519"
  },
  {
    "text": "of these public CA which means the client cannot establish the servers U",
    "start": "611519",
    "end": "617720"
  },
  {
    "text": "server certificates validity um so uh so yeah so the chain",
    "start": "617720",
    "end": "625760"
  },
  {
    "text": "certificate chain cannot be established and uh uh so the solution that we are we have",
    "start": "625760",
    "end": "632839"
  },
  {
    "text": "developed is the mesh C needs to be instructed by the contol plan in this case to use a different trust store not",
    "start": "632839",
    "end": "638079"
  },
  {
    "text": "the managed CA pool that we talked about before but its own trust store also called system",
    "start": "638079",
    "end": "645480"
  },
  {
    "text": "root sets U with which which would have the ca roots for containing the",
    "start": "645480",
    "end": "650839"
  },
  {
    "text": "certificates of these public CA authorities not the not the not the managed CA SE which is private to uh to",
    "start": "650839",
    "end": "658320"
  },
  {
    "text": "that particular uh uh Network the control plan can indicate in",
    "start": "658320",
    "end": "664040"
  },
  {
    "text": "the cluster resource indic return to the mesh client's uh CDs Watcher to use",
    "start": "664040",
    "end": "670000"
  },
  {
    "text": "system root sech instead of CA trust or a provider plug-in um so basically the config plane",
    "start": "670000",
    "end": "677440"
  },
  {
    "text": "API uh would have configured previously uh the CDs resources for the serverless",
    "start": "677440",
    "end": "682920"
  },
  {
    "text": "buckon on the control plane to make this possible for example when Google cloud",
    "start": "682920",
    "end": "687959"
  },
  {
    "text": "service routing API is are used to create routing resources on the mesh for a serverless which is uh in the case of",
    "start": "687959",
    "end": "695000"
  },
  {
    "text": "Google cloud is the cloud run Service uh this uh the configurations would have been created on the control plane called",
    "start": "695000",
    "end": "701320"
  },
  {
    "text": "traffic director uh which is the which is Google's XTS control",
    "start": "701320",
    "end": "706480"
  },
  {
    "text": "plane um so the third so the Proto I showed you before so basically we are",
    "start": "709959",
    "end": "715440"
  },
  {
    "text": "adding a third field uh which will be used only in the absence of the first two so this third field would basically",
    "start": "715440",
    "end": "720680"
  },
  {
    "text": "indicate uh um that system roote Sears have to be used uh so this is this will",
    "start": "720680",
    "end": "727279"
  },
  {
    "text": "cause the grpc client to um uh to use uh for SSL handshake uh the the the trust",
    "start": "727279",
    "end": "736440"
  },
  {
    "text": "store from from from it system root store and authenticate the server uh certificate",
    "start": "736440",
    "end": "743760"
  },
  {
    "text": "chain U so here uh so the change uh in this picture is that the Cs CT Roots",
    "start": "744000",
    "end": "749959"
  },
  {
    "text": "shown on the left below the client is not the managed one but it's a system root CT and uh the control plan which",
    "start": "749959",
    "end": "757720"
  },
  {
    "text": "that has been configured uh within network resources uh for sur since the",
    "start": "757720",
    "end": "762920"
  },
  {
    "text": "CDs config that contains the certificate context uh uh the Proto the on Proto and",
    "start": "762920",
    "end": "769519"
  },
  {
    "text": "that says to use system root Sears when the TLs handshake for the transport is established grpc client use a system",
    "start": "769519",
    "end": "776079"
  },
  {
    "text": "trust store for the validation and I'm handing off to SH",
    "start": "776079",
    "end": "781800"
  },
  {
    "text": "now hi everyone so I am shti from the grpc python team at Google Bangalore so",
    "start": "784760",
    "end": "791760"
  },
  {
    "text": "I am going to continue on the second problem that we have in this case which is having multiple backends behind the",
    "start": "791760",
    "end": "798760"
  },
  {
    "text": "same reverse proxy so the problem here is that we have a data plane RPC",
    "start": "798760",
    "end": "805040"
  },
  {
    "text": "initiated with the endpoint IP address of the reverse proxy but when we have",
    "start": "805040",
    "end": "810680"
  },
  {
    "text": "multiple backends behind this reverse proxy the the proxy needs to know which traffic needs to go where and that is",
    "start": "810680",
    "end": "818199"
  },
  {
    "text": "what we're trying to solve so what can you think of a solution what the way is",
    "start": "818199",
    "end": "824279"
  },
  {
    "text": "that we could try to find a way to specify the exact endpoint host name",
    "start": "824279",
    "end": "829440"
  },
  {
    "text": "along with the IP address so that brings brings us to the next question how do",
    "start": "829440",
    "end": "834800"
  },
  {
    "text": "you find the IP addresses of the uh backend services in the first Cas so",
    "start": "834800",
    "end": "840480"
  },
  {
    "text": "that's what we'll look at next so the endpoint host names are",
    "start": "840480",
    "end": "845680"
  },
  {
    "text": "received during XDS name resolution at the control plane like during the channel creation so what this means is",
    "start": "845680",
    "end": "853680"
  },
  {
    "text": "that as part of the service creation uh sorry service Discovery uh as Canan",
    "start": "853680",
    "end": "859440"
  },
  {
    "text": "explained before we have different responses different configs coming from the control plane like the LDS RDS CDs",
    "start": "859440",
    "end": "866279"
  },
  {
    "text": "Etc so as part of this we have certain configurations being changed here so the",
    "start": "866279",
    "end": "873519"
  },
  {
    "text": "RDS um RDS config first has a new flag called allow Authority rewrite that is",
    "start": "873519",
    "end": "881240"
  },
  {
    "text": "needs to be set because now we are setting an additional host name along with the endpoint IP address right so to",
    "start": "881240",
    "end": "886880"
  },
  {
    "text": "know that this is what you're going to do we have this extra allow Authority rewrite flag and uh after that now",
    "start": "886880",
    "end": "895360"
  },
  {
    "text": "coming to the actual endpoint uh host name resolution there are two ways that",
    "start": "895360",
    "end": "901120"
  },
  {
    "text": "can be done based on what the destination is like if it's a logical DNS cluster or an EDS resolution um if",
    "start": "901120",
    "end": "908759"
  },
  {
    "text": "it's a logical DNS cluster we have so we have that RDS config and then in the CDs",
    "start": "908759",
    "end": "914560"
  },
  {
    "text": "config there is The Logical DNS endpoint host name coming in there so we don't",
    "start": "914560",
    "end": "920600"
  },
  {
    "text": "have an EDS resolution but only a logical DNS resolution for the endpoint host name but in case of uh uh yeah but",
    "start": "920600",
    "end": "930040"
  },
  {
    "text": "in the case of the Eds resolution what happens is the CDs config will have the",
    "start": "930040",
    "end": "935480"
  },
  {
    "text": "Eds resource name itself so here we directly have the endpoint coming in",
    "start": "935480",
    "end": "940600"
  },
  {
    "text": "from the Eds response so this is how we have uh the ads uh sorry the endpoint",
    "start": "940600",
    "end": "947079"
  },
  {
    "text": "host names now coming back to our first question now that we have the host names where do we set it we set it at the",
    "start": "947079",
    "end": "954000"
  },
  {
    "text": "control plane uh level sorry we set it at the data plane level when we are doing the actual RPC call",
    "start": "954000",
    "end": "962120"
  },
  {
    "text": "so uh yeah so now from the diagram you can see that we have the control plane",
    "start": "962120",
    "end": "967560"
  },
  {
    "text": "we have the RDS flag the endpoint host name everything coming in and the at um",
    "start": "967560",
    "end": "975759"
  },
  {
    "text": "every time we have an RPC going out the load balancer will put in these flags at",
    "start": "975759",
    "end": "982120"
  },
  {
    "text": "the authority header so that's what we kind of see here and once we do that it",
    "start": "982120",
    "end": "988600"
  },
  {
    "text": "pretty much solves our problem that we were talking about we have the request going to the RSE proxy the reverse proxy",
    "start": "988600",
    "end": "995079"
  },
  {
    "text": "can use the endpoint host name to further um like to further route it to",
    "start": "995079",
    "end": "1000120"
  },
  {
    "text": "the right back end so yeah and",
    "start": "1000120",
    "end": "1004959"
  },
  {
    "text": "now giving it back to Canan for the next",
    "start": "1005360",
    "end": "1010959"
  },
  {
    "text": "problem the third problem is uh client authentication by the surus Bon the",
    "start": "1013000",
    "end": "1019240"
  },
  {
    "text": "surve backend service needs to authenticate and authorize uh its calling M client normally in a mtls",
    "start": "1019240",
    "end": "1026640"
  },
  {
    "text": "solution uh what we we would have authentication through client side certificate validation the server",
    "start": "1026640",
    "end": "1032319"
  },
  {
    "text": "requestes the client to to present the certificate and it would validate the client and authorization is done via",
    "start": "1032319",
    "end": "1038880"
  },
  {
    "text": "workloads PP identifier uh uh so the the the server can use an authorization",
    "start": "1038880",
    "end": "1046360"
  },
  {
    "text": "policy that requires the caller certificate to belong to a particular allowed domain called a truster domain",
    "start": "1046360",
    "end": "1054320"
  },
  {
    "text": "um now in the case of calling a serverless service client trailers",
    "start": "1054320",
    "end": "1059400"
  },
  {
    "text": "cannot be used because the mes client uses private managed CA issued miss m",
    "start": "1059400",
    "end": "1065880"
  },
  {
    "text": "certificate which cannot be understood and or validated by a serverless",
    "start": "1065880",
    "end": "1072200"
  },
  {
    "text": "buckon uh so so for authentication we need to rely on JW tokens",
    "start": "1072200",
    "end": "1079120"
  },
  {
    "text": "this authentication mechanism is is either uh one that is supported by the",
    "start": "1079120",
    "end": "1084720"
  },
  {
    "text": "surus infra or when it is not available then on the grpc server itself one could",
    "start": "1084720",
    "end": "1090080"
  },
  {
    "text": "add a server Interceptor for the JW token for for validating it by calling the identity",
    "start": "1090080",
    "end": "1097080"
  },
  {
    "text": "provider grpc uh now for the for the the implementation of how this is done in um",
    "start": "1097120",
    "end": "1104880"
  },
  {
    "text": "from the client side uh the grpc already supports a specifying XTS HTTP filters for the HTTP",
    "start": "1104880",
    "end": "1114320"
  },
  {
    "text": "connection Management in the in the LDS config uh and in the same framework of",
    "start": "1114320",
    "end": "1121120"
  },
  {
    "text": "HTP filters grpc will support authentication filter uh to use for the L7 layer",
    "start": "1121120",
    "end": "1127640"
  },
  {
    "text": "security grpc client will have a plug-in Bas registry of uh available",
    "start": "1127640",
    "end": "1133280"
  },
  {
    "text": "authentication credential implementations uh with identifier for each and the the O filter config that is",
    "start": "1133280",
    "end": "1142320"
  },
  {
    "text": "received by the control plane will specify this identifier which will cause the car sponding implementation to get",
    "start": "1142320",
    "end": "1148440"
  },
  {
    "text": "used and that will use a specific identity provider to to to create the JW",
    "start": "1148440",
    "end": "1154679"
  },
  {
    "text": "token and this jar token can then be attached to the outgoing",
    "start": "1154679",
    "end": "1160400"
  },
  {
    "text": "RPC uh the the jar token is not an OP token it it will encode an particular",
    "start": "1160400",
    "end": "1166440"
  },
  {
    "text": "piece of information from the CDs data called an audience it's an identifier this ident identifier can be",
    "start": "1166440",
    "end": "1173720"
  },
  {
    "text": "the URL of the of the service itself or some identifiers that the service can identify itself",
    "start": "1173720",
    "end": "1181320"
  },
  {
    "text": "as CDs uh sorry sorry LDS config basically so in this picture on the left",
    "start": "1182360",
    "end": "1188120"
  },
  {
    "text": "uh the top box is the LDS config that indicates the uh the O filter config U",
    "start": "1188120",
    "end": "1194200"
  },
  {
    "text": "uh that through through a type URL and uh grpc",
    "start": "1194200",
    "end": "1199600"
  },
  {
    "text": "uh maintains a list of uh registry of",
    "start": "1199600",
    "end": "1204880"
  },
  {
    "text": "filter types and they called credential implementations uh and the the the",
    "start": "1204880",
    "end": "1210720"
  },
  {
    "text": "cluster metadata that is received through CDs will have the audience uh string that needs to be used and uh so",
    "start": "1210720",
    "end": "1217919"
  },
  {
    "text": "this is the control plane stuff and uh the per RPC there is a filter that transpare R PC",
    "start": "1217919",
    "end": "1226080"
  },
  {
    "text": "uh one this one okay",
    "start": "1226679",
    "end": "1233480"
  },
  {
    "text": "yeah uh yeah so this is the data plan uh that is per RPC uh so the per RPC uh",
    "start": "1233480",
    "end": "1240159"
  },
  {
    "text": "will run uh the the the call credential code uh belonging to that particular",
    "start": "1240159",
    "end": "1246159"
  },
  {
    "text": "filter type uh so that calls the yadc identity server uh using the service",
    "start": "1246159",
    "end": "1251880"
  },
  {
    "text": "account credentials and uh it will also pass along the audience to encode into",
    "start": "1251880",
    "end": "1257200"
  },
  {
    "text": "the into the jaw token and receives a j token from the identity service and it's",
    "start": "1257200",
    "end": "1263000"
  },
  {
    "text": "attached to the outgoing header authorization header another Target side uh the",
    "start": "1263000",
    "end": "1269760"
  },
  {
    "text": "service receives the verifies the J token signature using the using the uh",
    "start": "1269760",
    "end": "1276760"
  },
  {
    "text": "the cloud providers uh infrastructure uh in addition it also extracts the audience and uh verifies",
    "start": "1276760",
    "end": "1284279"
  },
  {
    "text": "that the the audience is uh is denoting itself so this is to avoid replay attacks and",
    "start": "1284279",
    "end": "1292240"
  },
  {
    "text": "uh and then for authorization uh there is an additional check that is done whether the calling",
    "start": "1292240",
    "end": "1297559"
  },
  {
    "text": "service uh the service account is authorized to call this seress button um so that completes",
    "start": "1297559",
    "end": "1303960"
  },
  {
    "text": "authorization um so now grpc will have an inbuilt authentication provider uh or the call",
    "start": "1303960",
    "end": "1311120"
  },
  {
    "text": "credential implementation for gcp services that use Google as identity provider for other Cloud providers uh",
    "start": "1311120",
    "end": "1318640"
  },
  {
    "text": "external contributions can be made using the same framework now in summary we",
    "start": "1318640",
    "end": "1323960"
  },
  {
    "text": "have we have solved authentication through signature verification of the JW tokens and for authorization the through",
    "start": "1323960",
    "end": "1331360"
  },
  {
    "text": "service account permissions uh to call the backend Service uh now for the road map of these",
    "start": "1331360",
    "end": "1338880"
  },
  {
    "text": "features that we talked about the grpc features for serus are coming up in a public preview end of Jane",
    "start": "1338880",
    "end": "1345400"
  },
  {
    "text": "2025 uh in C++ Python and Java and for go it will be available in Za at a later",
    "start": "1345400",
    "end": "1352000"
  },
  {
    "text": "date handing off to shti for the demo thank you Kanan so I'm going to",
    "start": "1352000",
    "end": "1359640"
  },
  {
    "text": "continue with a quick demo of whatever we have discussed so far so while we don't have a very live demo here uh I",
    "start": "1359640",
    "end": "1367559"
  },
  {
    "text": "just I'll just go through all the different code Concepts and different elements we have to get everything",
    "start": "1367559",
    "end": "1372600"
  },
  {
    "text": "working so the first we have is of course the server and as we first disc",
    "start": "1372600",
    "end": "1379080"
  },
  {
    "text": "in the uh on the server side you don't need any control plane managed security",
    "start": "1379080",
    "end": "1384720"
  },
  {
    "text": "config and so on the server side we will be creating I mean we don't need to mention anything about XDS credentials",
    "start": "1384720",
    "end": "1391600"
  },
  {
    "text": "it will just be a insecure uh server credentials being used and on the client",
    "start": "1391600",
    "end": "1397400"
  },
  {
    "text": "side o and odzi are handled by a component called Cloud run sidecar so",
    "start": "1397400",
    "end": "1402760"
  },
  {
    "text": "the service implementations don't have to worry about them and now that we have",
    "start": "1402760",
    "end": "1407840"
  },
  {
    "text": "the server let's start about uh deploying stuff so now we the next step",
    "start": "1407840",
    "end": "1414520"
  },
  {
    "text": "is about deploying the service in Cloud run and creating a service mesh we have the g-cloud commands there and next is",
    "start": "1414520",
    "end": "1423880"
  },
  {
    "text": "we will have the network resources being created that is nothing but we first",
    "start": "1423880",
    "end": "1429279"
  },
  {
    "text": "create the network endpoint group The backend Service uh the first command is the network and point group second is",
    "start": "1429279",
    "end": "1435760"
  },
  {
    "text": "the backend service and the third is is uh deploying or adding that back into to",
    "start": "1435760",
    "end": "1441279"
  },
  {
    "text": "the network endpoint group so that's uh like step two and now the final part",
    "start": "1441279",
    "end": "1447200"
  },
  {
    "text": "would be about configuring The Roots itself using the service routing apis so",
    "start": "1447200",
    "end": "1454679"
  },
  {
    "text": "we have uh the route setup here and these resources would be used by the",
    "start": "1454679",
    "end": "1460039"
  },
  {
    "text": "control plane for configuring the XDS client watches so um yeah that was all server",
    "start": "1460039",
    "end": "1467000"
  },
  {
    "text": "side and now let's get to the client side uh before we get to the client code",
    "start": "1467000",
    "end": "1472039"
  },
  {
    "text": "let's look at the client bootstrap configuration um I know this is probably not zoomed in but okay before that um",
    "start": "1472039",
    "end": "1480600"
  },
  {
    "text": "let me also give a brief of what a bootstrap file is for those who don't know it's basically a file that will be",
    "start": "1480600",
    "end": "1486760"
  },
  {
    "text": "generated on the client side and the client can uh refer to that file for the",
    "start": "1486760",
    "end": "1492399"
  },
  {
    "text": "server URI that it has to create channels to so in this case let's zoom",
    "start": "1492399",
    "end": "1497760"
  },
  {
    "text": "in a bit and the XDS servers uh I mean that part of the file will specify the",
    "start": "1497760",
    "end": "1504760"
  },
  {
    "text": "URL of the control plane which in this case is of the traffic director so now finally coming to the",
    "start": "1504760",
    "end": "1511880"
  },
  {
    "text": "client code um yeah so unlike the service side on the client side we do",
    "start": "1511880",
    "end": "1517480"
  },
  {
    "text": "need to specify the XTS credentials so that we get the required security",
    "start": "1517480",
    "end": "1522799"
  },
  {
    "text": "configuration from the control plane so that's what we Define here and Fin",
    "start": "1522799",
    "end": "1528320"
  },
  {
    "text": "finally now that everything is set let's look at the success response case so we",
    "start": "1528320",
    "end": "1533559"
  },
  {
    "text": "have the first line which is about uh using the bootstrap file and then all",
    "start": "1533559",
    "end": "1539120"
  },
  {
    "text": "the three different problems and solutions that we were talking about so far we enable all the solutions using uh",
    "start": "1539120",
    "end": "1546360"
  },
  {
    "text": "environment variables right now the authority rewrite the system root SS and the authentication filter and doing all",
    "start": "1546360",
    "end": "1553080"
  },
  {
    "text": "that uh what we see here is the direct response from the client but let's also",
    "start": "1553080",
    "end": "1558440"
  },
  {
    "text": "go a little deeper and look at the different configs that we get from the control PL",
    "start": "1558440",
    "end": "1564399"
  },
  {
    "text": "so oops Yeah uh so the first thing that we",
    "start": "1564399",
    "end": "1569880"
  },
  {
    "text": "have is the LDS config that we have from the control plane and as we",
    "start": "1569880",
    "end": "1576919"
  },
  {
    "text": "specified um yeah the LDS config has the O filter uh enabled so that is from the",
    "start": "1576919",
    "end": "1585039"
  },
  {
    "text": "LDS config second thing is uh the RDS remember I had spoken about that extra",
    "start": "1585039",
    "end": "1591520"
  },
  {
    "text": "Authority reite flag so that's what we have here um finally",
    "start": "1591520",
    "end": "1599760"
  },
  {
    "text": "we have the CDs config and again I spoke about the logical DNS and EDS uh",
    "start": "1599760",
    "end": "1605559"
  },
  {
    "text": "responses in this case we have the logical DNS config and that's what we specify in the host name that's the",
    "start": "1605559",
    "end": "1612120"
  },
  {
    "text": "first line there and the second one is the system root Sears that you can see",
    "start": "1612120",
    "end": "1618080"
  },
  {
    "text": "with uh that's coming in from uh I mean we have that enabled and finally we have",
    "start": "1618080",
    "end": "1624159"
  },
  {
    "text": "the audience that specifies the gcp O filter so we can see how using all this",
    "start": "1624159",
    "end": "1631279"
  },
  {
    "text": "we are able to successfully communicate between uh a serverless backend and a client so uh that's it and thank you",
    "start": "1631279",
    "end": "1640880"
  },
  {
    "text": "everyone and hope we see you again for all the next talks we have a maintainer",
    "start": "1640880",
    "end": "1646559"
  },
  {
    "text": "talk coming in right after this in room 404 and uh also one other talk on open",
    "start": "1646559",
    "end": "1652720"
  },
  {
    "text": "Telemetry for uh open Telemetry tracing tomorrow so hope to see you all there",
    "start": "1652720",
    "end": "1659120"
  },
  {
    "text": "thank you and finally any questions",
    "start": "1659120",
    "end": "1668279"
  },
  {
    "text": "uh from the demo I realized that uh it's using Cloud run right but are there any",
    "start": "1679880",
    "end": "1685000"
  },
  {
    "text": "plans to make it Cloud agnostic let's say a lot of people are using Lambda and service from Azure",
    "start": "1685000",
    "end": "1692320"
  },
  {
    "text": "right and like looking into the architecture seems like like a side car",
    "start": "1692320",
    "end": "1697360"
  },
  {
    "text": "is required from the cloud providers point of view right uh yeah the the solution we",
    "start": "1697360",
    "end": "1703320"
  },
  {
    "text": "presented is already Cloud agnostic the demo is just uh showing a particular implementation",
    "start": "1703320",
    "end": "1708880"
  },
  {
    "text": "at Google uh that that is cloud run but but all the control plan Communications",
    "start": "1708880",
    "end": "1714080"
  },
  {
    "text": "that we talked about uh as long as uh it's implemented by the control plan of",
    "start": "1714080",
    "end": "1719559"
  },
  {
    "text": "the of the of a different cloud prer like Amazon um like AWS as long as it",
    "start": "1719559",
    "end": "1724600"
  },
  {
    "text": "talks XTS the same solution applies the only implementation that grpc natively will",
    "start": "1724600",
    "end": "1730519"
  },
  {
    "text": "not have is the G gcp gcp authentication filter uh that someone will have to",
    "start": "1730519",
    "end": "1736159"
  },
  {
    "text": "implement it uh but uh but but the solution is generic",
    "start": "1736159",
    "end": "1742080"
  },
  {
    "text": "already projects to do this with G or something like that sorry uh yeah so as",
    "start": "1743200",
    "end": "1749399"
  },
  {
    "text": "you mentioned all as long as the cloud provider has that side car that you mentioned and this is supported it will",
    "start": "1749399",
    "end": "1754720"
  },
  {
    "text": "work but what about something like K native like is it possible to like emulate this Behavior with serverless on",
    "start": "1754720",
    "end": "1762080"
  },
  {
    "text": "K native or something like that",
    "start": "1762080",
    "end": "1766720"
  },
  {
    "text": "like on for local cluster for example just to simulate or just to you know understand how it works is it possible",
    "start": "1769440",
    "end": "1775720"
  },
  {
    "text": "to do it on a local cluster by is that side car available as a open source project or something",
    "start": "1775720",
    "end": "1783679"
  },
  {
    "text": "similar hey uh Richard maintainer on the GPC project um one thing that I want to make clear is everything here was",
    "start": "1784919",
    "end": "1791799"
  },
  {
    "text": "done a little bit flaky uh was done side car on the grpc library so while there",
    "start": "1791799",
    "end": "1798360"
  },
  {
    "text": "may be a component within Cloud run that sort of incidentally acts as a side car that is not essential to what's",
    "start": "1798360",
    "end": "1804120"
  },
  {
    "text": "happening here and sort of just traversing the the uh reverse",
    "start": "1804120",
    "end": "1810039"
  },
  {
    "text": "proxy any more questions awesome so again uh thanks",
    "start": "1813399",
    "end": "1820240"
  },
  {
    "text": "everybody and I do want to invite you up to room 404 we'll have the grpc maintainer talk and what we're going to",
    "start": "1820240",
    "end": "1826559"
  },
  {
    "text": "be doing up there is we're going to start with an overview or kind of an intro to grpc and then after that we're",
    "start": "1826559",
    "end": "1833000"
  },
  {
    "text": "going to transition to telling you about all the new exciting features we have for grpc so thanks everyone",
    "start": "1833000",
    "end": "1840480"
  }
]