[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "hi everyone welcome to this session on Calico security policy Best Practices my name is Adil Abdul majeed I'm a",
    "start": "179",
    "end": "7080"
  },
  {
    "text": "Solutions architect with high gear Ross customer success team helping our customers deploy Calico Solutions",
    "start": "7080",
    "end": "13139"
  },
  {
    "text": "okay let's start off with the agenda for today's session we're going to be looking at security challenges in",
    "start": "13139",
    "end": "20100"
  },
  {
    "text": "kubernetes and how kubernetes disrupts traditional networking and security paradigms we look at Calico security",
    "start": "20100",
    "end": "27180"
  },
  {
    "text": "policies the anatomy of her Calico security policy and the declarative policy language",
    "start": "27180",
    "end": "33480"
  },
  {
    "text": "next move on to best practices for security policy implementation with some",
    "start": "33480",
    "end": "38640"
  },
  {
    "text": "examples security policy patterns I think one of the best ways to understand security policies is to look at some",
    "start": "38640",
    "end": "45660"
  },
  {
    "text": "examples and how those examples can be incorporated into your environments and",
    "start": "45660",
    "end": "51059"
  },
  {
    "text": "build a security policy model once we have the model built we will",
    "start": "51059",
    "end": "56219"
  },
  {
    "text": "then look at how you can introduce policy governance to that policy model",
    "start": "56219",
    "end": "62640"
  },
  {
    "text": "let's have a brief look at the kubernetes networking model the model stipulates that pods can communicate",
    "start": "62640",
    "end": "69119"
  },
  {
    "start": "63000",
    "end": "63000"
  },
  {
    "text": "with all of the pods on any other node without the requirement for Network address translation",
    "start": "69119",
    "end": "75320"
  },
  {
    "text": "agents on a node such as system demons and cubelet can communicate with all",
    "start": "75320",
    "end": "81180"
  },
  {
    "text": "pods on that node and the most common container runtimes use container network interface plugins",
    "start": "81180",
    "end": "88259"
  },
  {
    "text": "to manage their networking and security capabilities Calico being one of the",
    "start": "88259",
    "end": "93479"
  },
  {
    "text": "most widely adapted cni plugins for kubernetes",
    "start": "93479",
    "end": "99180"
  },
  {
    "text": "so at a high level of the kubernetes networking model provides for a flat",
    "start": "99180",
    "end": "104220"
  },
  {
    "text": "Network where pods in the cluster can freely talk to each other",
    "start": "104220",
    "end": "109619"
  },
  {
    "text": "there are benefits to this model it alleviates the complexities that could",
    "start": "109619",
    "end": "115860"
  },
  {
    "text": "have been due to the underlying Network however the model also introduces",
    "start": "115860",
    "end": "122340"
  },
  {
    "start": "120000",
    "end": "120000"
  },
  {
    "text": "certain security challenges kubernetes disrupts traditional networking and Security paradigms in traditional",
    "start": "122340",
    "end": "129300"
  },
  {
    "text": "networks when security is enforced it's done so at certain choke points in the",
    "start": "129300",
    "end": "136260"
  },
  {
    "text": "network and controls are enforced when traffic traverses or transits those",
    "start": "136260",
    "end": "141900"
  },
  {
    "text": "choke points typically using some form of networking constructs",
    "start": "141900",
    "end": "148140"
  },
  {
    "text": "now in kubernetes pod scheduling is dynamic IP addresses are ephemeral",
    "start": "148140",
    "end": "154800"
  },
  {
    "text": "and scheduling is typically non-deterministic okay",
    "start": "154800",
    "end": "159840"
  },
  {
    "text": "what that means is you can't bind a workload identity to a networking",
    "start": "159840",
    "end": "165300"
  },
  {
    "text": "construct anymore also firewalls external the cluster",
    "start": "165300",
    "end": "170459"
  },
  {
    "text": "cannot map IP addresses to workload identity so when traffic egresses the",
    "start": "170459",
    "end": "176340"
  },
  {
    "text": "cluster Upstream firewalls cannot enforce security policies based on IP addresses",
    "start": "176340",
    "end": "183300"
  },
  {
    "text": "because the IP addresses for the Pod are non-deterministic",
    "start": "183300",
    "end": "189300"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "with those challenges also comes an opportunity and will look at Calico a",
    "start": "189300",
    "end": "195900"
  },
  {
    "text": "bit in this slide Calico among certain other functionalities primarily offers",
    "start": "195900",
    "end": "202080"
  },
  {
    "text": "the container network interface for kubernetes IP address management and the",
    "start": "202080",
    "end": "207360"
  },
  {
    "text": "security policy engine now Calico is quite flexible in the",
    "start": "207360",
    "end": "213500"
  },
  {
    "text": "routing modes that it supports as well as the data plane it supports for policy",
    "start": "213500",
    "end": "220319"
  },
  {
    "text": "enforcement so for routing you can choose between IP in IP vxlan overlay modes or native bgp",
    "start": "220319",
    "end": "230099"
  },
  {
    "text": "and for the data plane you can choose between ebpf IP tables and windows hns",
    "start": "230099",
    "end": "236220"
  },
  {
    "text": "if you have Windows nodes in your clusters",
    "start": "236220",
    "end": "241500"
  },
  {
    "text": "now the primary benefit of this tight integration with the orchestration plane",
    "start": "241500",
    "end": "246599"
  },
  {
    "text": "being that workload identity is tightly coupled to networking and Security in a way that",
    "start": "246599",
    "end": "254280"
  },
  {
    "text": "was never before possible prior to kubernetes and this offers a number of advantages",
    "start": "254280",
    "end": "261540"
  },
  {
    "text": "that we will explore in the subsequent slides",
    "start": "261540",
    "end": "266180"
  },
  {
    "text": "all right moving on let's look at the characteristics of security policies",
    "start": "266699",
    "end": "272400"
  },
  {
    "start": "267000",
    "end": "267000"
  },
  {
    "text": "security policies are label based and the key value pairs are the primary",
    "start": "272400",
    "end": "278880"
  },
  {
    "text": "selectors to score policies and refer to source and destination endpoints in",
    "start": "278880",
    "end": "286259"
  },
  {
    "text": "policies policies are declarative so Calico offers a very flexible declarative",
    "start": "286259",
    "end": "293820"
  },
  {
    "text": "policy language and what that means is that the underlying implementation of the",
    "start": "293820",
    "end": "301620"
  },
  {
    "text": "policy is abstracted from the user the underlying implementation being the",
    "start": "301620",
    "end": "307380"
  },
  {
    "text": "data planes for example ebpf iptables or windows hns",
    "start": "307380",
    "end": "312660"
  },
  {
    "text": "that is abstracted from the user what the user gets is this declarative pulse",
    "start": "312660",
    "end": "318180"
  },
  {
    "text": "language that can be used to define security intentions okay",
    "start": "318180",
    "end": "325199"
  },
  {
    "text": "and policies are highly Dynamic and what that means is the underlying policy",
    "start": "325199",
    "end": "330780"
  },
  {
    "text": "implementation in the data plane is for every pod in the cluster so as",
    "start": "330780",
    "end": "337620"
  },
  {
    "text": "pods are created so are policies and as pods move so do the policies so the",
    "start": "337620",
    "end": "343680"
  },
  {
    "text": "policies are highly Dynamic but you as a user you only have to specify the",
    "start": "343680",
    "end": "349259"
  },
  {
    "text": "security intention using the declare deposit language and Calico will take care of the underlying policy",
    "start": "349259",
    "end": "355740"
  },
  {
    "text": "implementation using a data plane of your choosing okay so these are some of the",
    "start": "355740",
    "end": "361199"
  },
  {
    "text": "characteristics of security policies",
    "start": "361199",
    "end": "365900"
  },
  {
    "start": "365000",
    "end": "365000"
  },
  {
    "text": "all right next let's move on to calico's security policy features Lego supports Network policy and Global",
    "start": "366360",
    "end": "374100"
  },
  {
    "text": "Network policy and when I say security policy I'm referring to both Network policy and Global Network policy",
    "start": "374100",
    "end": "381240"
  },
  {
    "text": "to support policy ordering or Calico policies are an extension of kubernetes",
    "start": "381240",
    "end": "387180"
  },
  {
    "text": "policies however Calico offers several more extensions than what's available in",
    "start": "387180",
    "end": "393539"
  },
  {
    "text": "Native kubernetes policies and policy ordering being one of those and we look at how you could leverage policy",
    "start": "393539",
    "end": "400500"
  },
  {
    "text": "ordering when building a policy model policies can be applied to any kind of",
    "start": "400500",
    "end": "407160"
  },
  {
    "text": "endpoint being pods VMS or hosts external to the cluster okay",
    "start": "407160",
    "end": "414900"
  },
  {
    "text": "and policy rules support a love deny log and past actions",
    "start": "414900",
    "end": "421580"
  },
  {
    "text": "when you're specifying source and destinations in a policy rule",
    "start": "422039",
    "end": "427860"
  },
  {
    "text": "there are a number of match criterias for example you can match a port and this could be",
    "start": "427860",
    "end": "434880"
  },
  {
    "text": "based on port numbers range of ports or even named ports in kubernetes",
    "start": "434880",
    "end": "441000"
  },
  {
    "text": "you can specify a protocol such as TCP UDP icmp for example",
    "start": "441000",
    "end": "446940"
  },
  {
    "text": "HTTP attributes icmp attributes IP versions",
    "start": "446940",
    "end": "452340"
  },
  {
    "text": "IPS ciders network sets and Global Network sets we'll explore some of these in some of the subsequent slides",
    "start": "452340",
    "end": "460500"
  },
  {
    "text": "endpoint selectors and this is where you use label Expressions to select pods VMS",
    "start": "460500",
    "end": "466740"
  },
  {
    "text": "or other host interfaces namespace selectors or service account selectors okay",
    "start": "466740",
    "end": "475139"
  },
  {
    "text": "now policies also support optional packet handling capabilities such as disable connection tracking apply before",
    "start": "475139",
    "end": "481199"
  },
  {
    "text": "Nat apply to forward traffic Etc and and these primarily apply to",
    "start": "481199",
    "end": "487380"
  },
  {
    "text": "host endpoint policies now there's a lot going on in this slide",
    "start": "487380",
    "end": "494039"
  },
  {
    "text": "and it's not possible to cover all the policy features in a single session so",
    "start": "494039",
    "end": "500460"
  },
  {
    "text": "in this session we're going to focus on policies for pods and containers all right we're not",
    "start": "500460",
    "end": "506280"
  },
  {
    "text": "going to be discussing about policies for host endpoints or VMS or policies",
    "start": "506280",
    "end": "512339"
  },
  {
    "text": "for nodes outside the cluster and in terms of actions we're primarily",
    "start": "512339",
    "end": "518640"
  },
  {
    "text": "going to be focusing on the a love and deny action we're also not going to be discussing about the optional packet",
    "start": "518640",
    "end": "524940"
  },
  {
    "text": "handling capabilities now I'll link the docs site and the best place to learn about policies and all that it's capable of is",
    "start": "524940",
    "end": "532680"
  },
  {
    "text": "the project Calico doc site okay so there's a link to that down below",
    "start": "532680",
    "end": "538680"
  },
  {
    "text": "okay so let's have a look at the anatomy of a Calico security policy",
    "start": "538680",
    "end": "544140"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "so security policy has a scope it could either be a namespace score policy which",
    "start": "544140",
    "end": "549720"
  },
  {
    "text": "applies to a specific namespace or a Global Network policy which could apply to multiple name spaces or even all the",
    "start": "549720",
    "end": "557040"
  },
  {
    "text": "workloading points in the cluster now there are a few select options you",
    "start": "557040",
    "end": "562740"
  },
  {
    "text": "could use endpoint labels to select specific workload endpoints",
    "start": "562740",
    "end": "567779"
  },
  {
    "text": "if it's a Global Network policy you can also use namespace selector to limit",
    "start": "567779",
    "end": "573360"
  },
  {
    "text": "that Global Network policy to specific namespaces you could also use service accounts as selectors",
    "start": "573360",
    "end": "581640"
  },
  {
    "text": "now a policy is going to have one or more Ingress and or egress rules",
    "start": "581640",
    "end": "588600"
  },
  {
    "text": "and if you look at a particular rule in a rule you could have either an a love",
    "start": "588600",
    "end": "593880"
  },
  {
    "text": "deny log or pass action and in an egress rule if you look at the",
    "start": "593880",
    "end": "600600"
  },
  {
    "text": "destination there's a two field there where you could specify the destination and the",
    "start": "600600",
    "end": "605640"
  },
  {
    "text": "destination protocol there's also a front field there that you can use to specify the source",
    "start": "605640",
    "end": "611820"
  },
  {
    "text": "now when specifying The Source again you can use endpoint selectors or namespace",
    "start": "611820",
    "end": "616860"
  },
  {
    "text": "selectors service accounts could be networks network sets of global",
    "start": "616860",
    "end": "623160"
  },
  {
    "text": "network sets now network sets and Global Network sets are a way of grouping either IP",
    "start": "623160",
    "end": "630540"
  },
  {
    "text": "addresses or cider blocks and it will explore some examples in the subsequent",
    "start": "630540",
    "end": "635700"
  },
  {
    "text": "slides when it comes to protocols again we look at some protocols in the previous slide",
    "start": "635700",
    "end": "640740"
  },
  {
    "text": "for example you could choose between TCP UDP icmp even HTTP match",
    "start": "640740",
    "end": "647940"
  },
  {
    "text": "if you're using layer 7 policies all right so quite a bit going on here",
    "start": "647940",
    "end": "655019"
  },
  {
    "text": "right just park this for the moment I think we'll be able to bring this together when we look at the examples in",
    "start": "655019",
    "end": "662820"
  },
  {
    "text": "the subsequent Slide the idea being that there's a lot of flexibility within a",
    "start": "662820",
    "end": "669899"
  },
  {
    "text": "policy and understanding some policy patterns is the best way you could approach",
    "start": "669899",
    "end": "677640"
  },
  {
    "text": "implementing a security policy model for your environments okay",
    "start": "677640",
    "end": "685100"
  },
  {
    "text": "alrighty so before we look at some examples let's look at security policy Behavior",
    "start": "685680",
    "end": "691440"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "now if no network policies or Global Network policies for that matter are applied to a pod then all traffic to and",
    "start": "691440",
    "end": "699420"
  },
  {
    "text": "from that pod is a love so by default if a network policy is not applied to a",
    "start": "699420",
    "end": "707040"
  },
  {
    "text": "workload all traffic is a love that's that's a default whitelist behavior in",
    "start": "707040",
    "end": "712500"
  },
  {
    "text": "kubernetes now if one or more Network policies apply to a pod containing Ingress rules",
    "start": "712500",
    "end": "720560"
  },
  {
    "text": "then only Ingress rules or English traffic rather specifically allowed to",
    "start": "720560",
    "end": "725820"
  },
  {
    "text": "buy those policies is a love for those endpoints",
    "start": "725820",
    "end": "732180"
  },
  {
    "text": "if one or more Network policies apply to a pod containing egress rules then only",
    "start": "732180",
    "end": "738360"
  },
  {
    "text": "egress traffic specifically Allowed by those policies is allowed for those",
    "start": "738360",
    "end": "743820"
  },
  {
    "text": "endpoints what this simply means is that once the end point is matched by a",
    "start": "743820",
    "end": "749579"
  },
  {
    "text": "policy only flows are loved by that policy or",
    "start": "749579",
    "end": "755279"
  },
  {
    "text": "any other subsequent policy is allowed for that endpoint so once you've matched a policy or",
    "start": "755279",
    "end": "762480"
  },
  {
    "text": "rather match an endpoint in a policy there's a default deny Behavior for those endpoints okay",
    "start": "762480",
    "end": "771800"
  },
  {
    "start": "772000",
    "end": "772000"
  },
  {
    "text": "all right best practices for security policy implementation so you should look at grouping all the",
    "start": "773160",
    "end": "779700"
  },
  {
    "text": "rules that apply to a given workload or a group of workload into a single policy",
    "start": "779700",
    "end": "785579"
  },
  {
    "text": "instead of having multiple security policies so inside the policy you can have",
    "start": "785579",
    "end": "791399"
  },
  {
    "text": "one or more either Ingress and or egress rules and you should look at",
    "start": "791399",
    "end": "797639"
  },
  {
    "text": "using rules for a given workload or a group of workload and making sure that you have a",
    "start": "797639",
    "end": "806100"
  },
  {
    "text": "single policy for those workloads with multiple rules okay",
    "start": "806100",
    "end": "811860"
  },
  {
    "text": "Implement a hierarchical design that allows for optimizing the number of security policies by filtering out",
    "start": "811860",
    "end": "818160"
  },
  {
    "text": "non-compliant Flows at the top of the funnel when we look at the policy model in",
    "start": "818160",
    "end": "824040"
  },
  {
    "text": "subsequent slides you will look at how for example Global Network policies are",
    "start": "824040",
    "end": "829800"
  },
  {
    "text": "used to implement certain high-level controls so that we can filter out unwanted or",
    "start": "829800",
    "end": "836279"
  },
  {
    "text": "non-compliant Flows at the top of the funnel use Global Network policies to implement",
    "start": "836279",
    "end": "842700"
  },
  {
    "text": "high-level guardrails and network policies to implement fine-grained controls okay",
    "start": "842700",
    "end": "849000"
  },
  {
    "text": "so Global Network policies are what spans across multiple namespaces or even",
    "start": "849000",
    "end": "855180"
  },
  {
    "text": "all the workloads in the cluster so you could use Global Network policies to enforce high-level security intentions",
    "start": "855180",
    "end": "862160"
  },
  {
    "text": "and network policies for fine grain controls that apply to very specific",
    "start": "862160",
    "end": "867779"
  },
  {
    "text": "workloads leverage policy order with allow and deny actions When developing security",
    "start": "867779",
    "end": "874139"
  },
  {
    "text": "policies right this is a powerful capability in Calico policies also use",
    "start": "874139",
    "end": "880560"
  },
  {
    "text": "network sets and Global Network sets to group IPS and Sliders so that there",
    "start": "880560",
    "end": "886079"
  },
  {
    "text": "could be referenced by even multiple policies okay it's just a bit more efficient doing it that way",
    "start": "886079",
    "end": "892920"
  },
  {
    "text": "right so with these best practices in mind let's",
    "start": "892920",
    "end": "899519"
  },
  {
    "start": "898000",
    "end": "898000"
  },
  {
    "text": "look at some example security policy patterns now the cluster shown here will be used",
    "start": "899519",
    "end": "906660"
  },
  {
    "text": "as an example to demonstrate certain security policy patterns this particular cluster has two tenants",
    "start": "906660",
    "end": "914540"
  },
  {
    "text": "and a tenant is simply a logical isolation so it could be any form of",
    "start": "914540",
    "end": "921180"
  },
  {
    "text": "logical isolation for example in your environment could be a PCI environment",
    "start": "921180",
    "end": "926399"
  },
  {
    "text": "that you'd like to isolate from the rest of the cluster workloads if you're a hosting provider",
    "start": "926399",
    "end": "932639"
  },
  {
    "text": "then could be a customer so if you have multiple customers you have to make sure that they remain",
    "start": "932639",
    "end": "939120"
  },
  {
    "text": "isolated in a shared cluster also if you're having a shared cluster",
    "start": "939120",
    "end": "944699"
  },
  {
    "text": "that's shared between various development teams you may want to have illogical isolation all right so tenant",
    "start": "944699",
    "end": "952800"
  },
  {
    "text": "is any form of logical isolation that you'd like to create for your class and our tenant could have one or more",
    "start": "952800",
    "end": "958920"
  },
  {
    "text": "namespaces so for example in this cluster tenant one has two name spaces",
    "start": "958920",
    "end": "964860"
  },
  {
    "text": "it's a shop and Yao bank and tenant 2 has a single namespace called book info okay",
    "start": "964860",
    "end": "971040"
  },
  {
    "text": "now the applications in these tenants are exposed using an Ingress",
    "start": "971040",
    "end": "976500"
  },
  {
    "text": "controller in the Ingress nginx namespace right",
    "start": "976500",
    "end": "982620"
  },
  {
    "text": "so hopefully this cluster is similar to your environment of course you could",
    "start": "982620",
    "end": "987779"
  },
  {
    "text": "horizontally scale you can have more tenants more name spaces but the pattern hopefully is similar to your",
    "start": "987779",
    "end": "996180"
  },
  {
    "text": "environments okay all right so now let's look at some",
    "start": "996180",
    "end": "1002660"
  },
  {
    "start": "1001000",
    "end": "1001000"
  },
  {
    "text": "example policies before we Implement policies I'm kind of assuming this is a live production",
    "start": "1002660",
    "end": "1009740"
  },
  {
    "text": "cluster so I don't want to break anything and that's why I've started off with a default a love here",
    "start": "1009740",
    "end": "1017320"
  },
  {
    "text": "and the default I love is simply a policy that allows all traffic now",
    "start": "1017420",
    "end": "1023600"
  },
  {
    "text": "remember in kubernetes by default kubernetes has a whitelist behavior however once you've matched pods in a",
    "start": "1023600",
    "end": "1031160"
  },
  {
    "text": "policy there is a default deny Behavior okay an implicit denied Behavior now",
    "start": "1031160",
    "end": "1038120"
  },
  {
    "text": "using this default lab as a Fail-Safe so that I don't impact any live",
    "start": "1038120",
    "end": "1044178"
  },
  {
    "text": "production traffic in this cluster okay",
    "start": "1044179",
    "end": "1048880"
  },
  {
    "text": "so my my first policy is a denialist policy and the denialist policy is a",
    "start": "1049760",
    "end": "1055400"
  },
  {
    "text": "Calico Global Network policies which applies to all cluster endpoints",
    "start": "1055400",
    "end": "1060860"
  },
  {
    "text": "more the reason for that default or love so now I have a policy that applies to",
    "start": "1060860",
    "end": "1066080"
  },
  {
    "text": "all cluster endpoints what that means is all cluster endpoints",
    "start": "1066080",
    "end": "1073480"
  },
  {
    "text": "now have a default deny Behavior for egress traffic since this policy",
    "start": "1073480",
    "end": "1081200"
  },
  {
    "text": "matches equals traffic okay so this policy has egress an egress rule",
    "start": "1081200",
    "end": "1088520"
  },
  {
    "text": "which denies traffic two IPS insiders in the IP deny list Global Network set and",
    "start": "1088520",
    "end": "1094940"
  },
  {
    "text": "I've shown the global network sets on the right hand side as well now recall that Global Network sets are",
    "start": "1094940",
    "end": "1102260"
  },
  {
    "text": "a way of organizing could be IPS or cider blocks and referencing those in policies",
    "start": "1102260",
    "end": "1109640"
  },
  {
    "text": "now the selector field is used in the egress rule to match the global Network set based on the gns equals ipd9 list",
    "start": "1109640",
    "end": "1117740"
  },
  {
    "text": "label so if you look at the global Network set we have a gns equals IP deny list label",
    "start": "1117740",
    "end": "1124100"
  },
  {
    "text": "which is referenced in the egress rule implemented in the security policy",
    "start": "1124100",
    "end": "1132440"
  },
  {
    "text": "but there's also a namespace selector in the security policy and the namespace",
    "start": "1132440",
    "end": "1137539"
  },
  {
    "text": "selector uses a global match criteria and that's",
    "start": "1137539",
    "end": "1142820"
  },
  {
    "text": "because this particular Network set is a Global Network set okay",
    "start": "1142820",
    "end": "1149539"
  },
  {
    "text": "so what this policy does is if any of the cluster workloads try to connect to",
    "start": "1149539",
    "end": "1155720"
  },
  {
    "text": "the IP addresses specified in This Global Network set those flows are going to be denied by",
    "start": "1155720",
    "end": "1163100"
  },
  {
    "text": "this policy so for example if you could retrieve these IPS from a thread feed and update up and update the global",
    "start": "1163100",
    "end": "1169760"
  },
  {
    "text": "Network set then you could effectively deny all cluster workloads access to",
    "start": "1169760",
    "end": "1177260"
  },
  {
    "text": "those malicious IP addresses okay now if you look at the actual underlying",
    "start": "1177260",
    "end": "1184700"
  },
  {
    "text": "policy implementation the policy is implemented for every endpoint in the",
    "start": "1184700",
    "end": "1190460"
  },
  {
    "text": "cluster using the data plane okay however for Simplicity I've grouped all",
    "start": "1190460",
    "end": "1195980"
  },
  {
    "text": "the endpoints and shown that traffic is denied in the IP deny list Global",
    "start": "1195980",
    "end": "1202220"
  },
  {
    "text": "Network set okay all right so this is the first example",
    "start": "1202220",
    "end": "1207799"
  },
  {
    "text": "let's move on the second example is the cube DNS",
    "start": "1207799",
    "end": "1214820"
  },
  {
    "start": "1210000",
    "end": "1210000"
  },
  {
    "text": "policy now the qbns policy is a Global Network policy which applies to all cluster",
    "start": "1214820",
    "end": "1220940"
  },
  {
    "text": "endpoints it has an Ingress rule which allows DNS traffic from all endpoints to cube DNS",
    "start": "1220940",
    "end": "1229760"
  },
  {
    "text": "has an egress rule which allows DNS traffic from all in points to cube DNS",
    "start": "1229760",
    "end": "1236260"
  },
  {
    "text": "the selector field is used to match the qbns endpoints using the KH app equals",
    "start": "1236260",
    "end": "1243559"
  },
  {
    "text": "qdns label the namespace selector field is used to",
    "start": "1243559",
    "end": "1249080"
  },
  {
    "text": "select all cluster endpoints using the All match operator okay",
    "start": "1249080",
    "end": "1256039"
  },
  {
    "text": "so if you look at this policy this is a Global Network policy",
    "start": "1256039",
    "end": "1261799"
  },
  {
    "text": "and in the Ingress Direction the destination is Cube DNS",
    "start": "1261799",
    "end": "1267559"
  },
  {
    "text": "and we've allowed UDP Port 53 so the protocol is UDP",
    "start": "1267559",
    "end": "1273020"
  },
  {
    "text": "if you were to kind of visualize this policy you have a cube DNS endpoints and you have we've created this pinhole on",
    "start": "1273020",
    "end": "1280640"
  },
  {
    "text": "the Ingress direction from all cluster endpoints to cube DNS",
    "start": "1280640",
    "end": "1286940"
  },
  {
    "text": "so we've matched all cluster endpoints by using the namespace selector with the",
    "start": "1286940",
    "end": "1293240"
  },
  {
    "text": "all match operator now on the egress Direction the source",
    "start": "1293240",
    "end": "1299120"
  },
  {
    "text": "of the egress rule again is all cluster endpoints and the destination again is",
    "start": "1299120",
    "end": "1304820"
  },
  {
    "text": "QB and S on Port 53. so on the egress direction for all cluster endpoints we've created this",
    "start": "1304820",
    "end": "1311720"
  },
  {
    "text": "pinpole permitting traffic if it's testing to cube DNS on Port 53",
    "start": "1311720",
    "end": "1320179"
  },
  {
    "text": "on UDP Port 53 again recall that the pinhole is in fact created for all",
    "start": "1320179",
    "end": "1327380"
  },
  {
    "text": "endpoints in the cluster however for Simplicity I've grouped those endpoint and shown a single",
    "start": "1327380",
    "end": "1333620"
  },
  {
    "text": "pinhole so this is the kind of visual representation of this policy you'd like",
    "start": "1333620",
    "end": "1339559"
  },
  {
    "text": "to kind of visualize what the policy looks like and this would be it and this policy is quite powerful isn't",
    "start": "1339559",
    "end": "1346159"
  },
  {
    "text": "it you now have a single declarative policy that's protecting all DNS traffic",
    "start": "1346159",
    "end": "1353240"
  },
  {
    "text": "in the cluster so so you may have thousands of PODS and thousands of DNS",
    "start": "1353240",
    "end": "1359000"
  },
  {
    "text": "flows in the cluster that are now protected by this single policy",
    "start": "1359000",
    "end": "1366140"
  },
  {
    "start": "1365000",
    "end": "1365000"
  },
  {
    "text": "okay let's look at the next policy this policy is called tenant one restrict",
    "start": "1366140",
    "end": "1372380"
  },
  {
    "text": "so this is the Calico Global Network policy which applies to all cluster endpoints in tenant one",
    "start": "1372380",
    "end": "1378020"
  },
  {
    "text": "the namespace selector field is used in the security policy with the project",
    "start": "1378020",
    "end": "1383200"
  },
  {
    "text": "calico.org forward slash name label to select endpoints in the tenant 1 namespaces",
    "start": "1383200",
    "end": "1389179"
  },
  {
    "text": "as an Ingress rule which denies all traffic except from the specified namespaces as an egress rule which",
    "start": "1389179",
    "end": "1395960"
  },
  {
    "text": "denies traffic except to the specified namespaces and the not selected field is",
    "start": "1395960",
    "end": "1401240"
  },
  {
    "text": "used in Ingress and egress rules with the project calico.org or forward slash",
    "start": "1401240",
    "end": "1407240"
  },
  {
    "text": "namespace label to exempt endpoints that should not be denied",
    "start": "1407240",
    "end": "1412580"
  },
  {
    "text": "okay so this is a Global Network policy and in the policy",
    "start": "1412580",
    "end": "1420220"
  },
  {
    "text": "and in the policy the namespace selector is used to specify the Hipster shop and",
    "start": "1423200",
    "end": "1428840"
  },
  {
    "text": "Yao Bank name spaces so this policy applies to the heater shop and Yahoo Bank endpoints",
    "start": "1428840",
    "end": "1436400"
  },
  {
    "text": "in the Ingress direction there's a deny action",
    "start": "1436400",
    "end": "1441440"
  },
  {
    "text": "however the not selector is used to exempt",
    "start": "1441440",
    "end": "1447340"
  },
  {
    "text": "the endpoints that should not be denied similarly in the egress Direction the",
    "start": "1447340",
    "end": "1454159"
  },
  {
    "text": "action is a deny again the not selector is used to exempt endpoints that should",
    "start": "1454159",
    "end": "1460640"
  },
  {
    "text": "not be denied now the project calico.org label",
    "start": "1460640",
    "end": "1467480"
  },
  {
    "text": "is a label that can be used to identify namespaces and endpoints in",
    "start": "1467480",
    "end": "1475400"
  },
  {
    "text": "those namespaces now the value of the label is",
    "start": "1475400",
    "end": "1480440"
  },
  {
    "text": "the name of the name space so you could use the project calico.org forward slash name key with the value of",
    "start": "1480440",
    "end": "1488179"
  },
  {
    "text": "the namespace and Calico will then select all the endpoints inside that namespace",
    "start": "1488179",
    "end": "1494600"
  },
  {
    "text": "to scope the policy or the rule okay",
    "start": "1494600",
    "end": "1500299"
  },
  {
    "text": "now the project teleco.org name label is something that can be used to specify",
    "start": "1500299",
    "end": "1508700"
  },
  {
    "text": "or select endpoints it's a label that Calico Associates with",
    "start": "1508700",
    "end": "1515480"
  },
  {
    "text": "an endpoint and the value of the label is the name of the namespace that in point belongs",
    "start": "1515480",
    "end": "1522559"
  },
  {
    "text": "to okay so since we're using a not operator",
    "start": "1522559",
    "end": "1527720"
  },
  {
    "text": "we're using the project calico.org forward slash name space",
    "start": "1527720",
    "end": "1532940"
  },
  {
    "text": "label and we're providing the name of the namespace so that those endpoints are",
    "start": "1532940",
    "end": "1540140"
  },
  {
    "text": "Exempted from the security policy now if you want to visualize this policy",
    "start": "1540140",
    "end": "1546740"
  },
  {
    "text": "we have the tenant one endpoint selected using the namespace selector so",
    "start": "1546740",
    "end": "1552200"
  },
  {
    "text": "basically endpoints in heaps of shock and Yao Bank all traffic to other endpoints are",
    "start": "1552200",
    "end": "1559880"
  },
  {
    "text": "denied except for what's Exempted using the not selector",
    "start": "1559880",
    "end": "1568000"
  },
  {
    "text": "so this policy does not permit any traffic right given that you've specified a policy for",
    "start": "1568279",
    "end": "1576380"
  },
  {
    "text": "tenant one restrict a subsequent policy must permit traffic",
    "start": "1576380",
    "end": "1582740"
  },
  {
    "text": "flows that should be permitted for tenant one workloads okay all this",
    "start": "1582740",
    "end": "1588260"
  },
  {
    "text": "policy does is it isolates the 101 workloads and denies traffic to all",
    "start": "1588260",
    "end": "1594380"
  },
  {
    "text": "other cluster endpoints except for what's Exempted using the not selectors in the rule",
    "start": "1594380",
    "end": "1603460"
  },
  {
    "text": "now we're going to have a similar policy for tenants 2 as well again a Global Network policy using the namespace",
    "start": "1603679",
    "end": "1609860"
  },
  {
    "text": "selector with project calico.org forward slash name label to select the 10 and 2",
    "start": "1609860",
    "end": "1615140"
  },
  {
    "text": "endpoints has Ingress and egress rules again with not selectors using the project",
    "start": "1615140",
    "end": "1622059"
  },
  {
    "text": "calico.org forward slash namespace label to exempt endpoints that should not be",
    "start": "1622059",
    "end": "1627740"
  },
  {
    "text": "denied so similar to the previous rule you know the book info and the Ingress and nginx",
    "start": "1627740",
    "end": "1636220"
  },
  {
    "text": "namespaces are Exempted now of course we're exempting the Ingress nginx namespace even in the previous case",
    "start": "1636220",
    "end": "1643220"
  },
  {
    "text": "because the applications are exposed via that namespace okay so we'd expect to receive",
    "start": "1643220",
    "end": "1650600"
  },
  {
    "text": "inbound traffic from that namespace again we are not permitting that traffic and we look at subsequent policies you",
    "start": "1650600",
    "end": "1657980"
  },
  {
    "text": "will see how traffic from Ingress nginx is permitted to workloads that are",
    "start": "1657980",
    "end": "1665059"
  },
  {
    "text": "exposed to external consumers okay however with this policy what we've done",
    "start": "1665059",
    "end": "1671120"
  },
  {
    "text": "is similar to the previous policy isolated 10 and 2 endpoints from the",
    "start": "1671120",
    "end": "1677240"
  },
  {
    "text": "rest of the cluster okay so the touristic policies you know with",
    "start": "1677240",
    "end": "1682940"
  },
  {
    "text": "the touristic policies you've created a certain level of isolation it's a high-level guard rail demarcating those",
    "start": "1682940",
    "end": "1689299"
  },
  {
    "text": "workloads from the rest of the cluster workloads okay",
    "start": "1689299",
    "end": "1695679"
  },
  {
    "text": "all right so now we have a policy called the front-end policy now the front-end",
    "start": "1695980",
    "end": "1701299"
  },
  {
    "text": "policy is a network policy which applies to the front-end endpoints in the",
    "start": "1701299",
    "end": "1707000"
  },
  {
    "text": "Hipster shop namespace in tenant one now the selected field is used to select",
    "start": "1707000",
    "end": "1713419"
  },
  {
    "text": "the front-end endpoints using the app equals front-end label has an Ingress rule which permits",
    "start": "1713419",
    "end": "1720260"
  },
  {
    "text": "traffic from the Ingress controller the namespace selector field is used in the",
    "start": "1720260",
    "end": "1725539"
  },
  {
    "text": "rule with the project calico.org forward slash name label to select the Ingress",
    "start": "1725539",
    "end": "1731120"
  },
  {
    "text": "nginx namespace and the selector field is used with multiple labels to select the Ingress",
    "start": "1731120",
    "end": "1737659"
  },
  {
    "text": "controller egress rules with the selector field matching app equals x meaning we've got",
    "start": "1737659",
    "end": "1744820"
  },
  {
    "text": "multiple labels being matched to select other endpoints in the same",
    "start": "1744820",
    "end": "1751340"
  },
  {
    "text": "namespace that the front end point in points communicate to okay",
    "start": "1751340",
    "end": "1758240"
  },
  {
    "text": "so let's go through this policy a bit this is a network policy which means it applies to a specific namespace a",
    "start": "1758240",
    "end": "1764720"
  },
  {
    "text": "namespace being the Hipster shop namespace however in the policy we're using an",
    "start": "1764720",
    "end": "1770960"
  },
  {
    "text": "endpoint selector so we're using the select a field and using the app equals",
    "start": "1770960",
    "end": "1776240"
  },
  {
    "text": "front-end label what this means is that the policy applies only to the front-end",
    "start": "1776240",
    "end": "1783679"
  },
  {
    "text": "endpoints okay in the Ingress Direction You Know by",
    "start": "1783679",
    "end": "1789080"
  },
  {
    "text": "using a namespace selector to select the Ingress nginx namespace however we are",
    "start": "1789080",
    "end": "1794659"
  },
  {
    "text": "also using endpoint selectors so we're using the selector field",
    "start": "1794659",
    "end": "1799700"
  },
  {
    "text": "and using an an operator specifying a couple of labels to match the Ingress",
    "start": "1799700",
    "end": "1806419"
  },
  {
    "text": "controller okay so when you're using selectors and when you're using labels you could use and or",
    "start": "1806419",
    "end": "1812840"
  },
  {
    "text": "not operators in this case we're using an N operator to make sure that the controller has two labels and that's how",
    "start": "1812840",
    "end": "1819500"
  },
  {
    "text": "we are identifying the Ingress controller for in this particular rule okay",
    "start": "1819500",
    "end": "1827779"
  },
  {
    "text": "now in the egress Direction front end is sending traffic to add service so we",
    "start": "1827779",
    "end": "1833720"
  },
  {
    "text": "specify the port here similarly sending traffic to checkout service now this rule continues I've truncated the rule",
    "start": "1833720",
    "end": "1840799"
  },
  {
    "text": "what's important is not the number of services it's talking to in the same namespace there is quite a bit of them",
    "start": "1840799",
    "end": "1847640"
  },
  {
    "text": "for this particular application but the idea being that the pattern is is the",
    "start": "1847640",
    "end": "1853220"
  },
  {
    "text": "same it kind of repeats and what we're doing is given that this policy applies",
    "start": "1853220",
    "end": "1858980"
  },
  {
    "text": "to the Hipster shop namespace we're using the selector field to select other",
    "start": "1858980",
    "end": "1864860"
  },
  {
    "text": "workloads at the front-end workload can communicate with in the same namespace",
    "start": "1864860",
    "end": "1871659"
  },
  {
    "text": "now bear in mind that just because traffic is permitted",
    "start": "1872179",
    "end": "1878299"
  },
  {
    "text": "from the front-end workload doesn't mean that we've allowed end-to-end communication okay so if you have to",
    "start": "1878299",
    "end": "1885980"
  },
  {
    "text": "visualize this policy you know we have the front-end endpoints and",
    "start": "1885980",
    "end": "1892159"
  },
  {
    "text": "in the English Direction we've created a pinhole so that the front and end points",
    "start": "1892159",
    "end": "1897860"
  },
  {
    "text": "can receive traffic from Ingress nginx and on the egress deduction we've",
    "start": "1897860",
    "end": "1903200"
  },
  {
    "text": "created a pinhole so that the front end endpoints can send traffic to other services in the same namespace",
    "start": "1903200",
    "end": "1911720"
  },
  {
    "text": "however for those services and we'll look at this in a subsequent policy you",
    "start": "1911720",
    "end": "1918140"
  },
  {
    "text": "also have to make sure that you create an Ingress pinhole",
    "start": "1918140",
    "end": "1923419"
  },
  {
    "text": "for those endpoints okay which we've not done yet so just because there's an",
    "start": "1923419",
    "end": "1929720"
  },
  {
    "text": "egress rule permitting traffic from front end to checkout service it doesn't mean that the rule or the flow rather is",
    "start": "1929720",
    "end": "1937460"
  },
  {
    "text": "allowed end to end so all right so now let's move on to the",
    "start": "1937460",
    "end": "1943820"
  },
  {
    "text": "checkout service policy again this is a network policy which applies to the checkout service endpoints in the",
    "start": "1943820",
    "end": "1949220"
  },
  {
    "start": "1944000",
    "end": "1944000"
  },
  {
    "text": "Hipster shop namespace the selector field is used in the security policy to select checkout",
    "start": "1949220",
    "end": "1955700"
  },
  {
    "text": "services endpoints using the app equals checkout service label has an Ingress rule with a select a",
    "start": "1955700",
    "end": "1962539"
  },
  {
    "text": "field to select the front-end endpoints using the app equals front-end label",
    "start": "1962539",
    "end": "1968779"
  },
  {
    "text": "and several egress rules with the selected field matching apicals X labels",
    "start": "1968779",
    "end": "1974779"
  },
  {
    "text": "to select other endpoints in the same namespace the checkout service endpoints",
    "start": "1974779",
    "end": "1979880"
  },
  {
    "text": "would need to communicate with all right so",
    "start": "1979880",
    "end": "1986059"
  },
  {
    "text": "in this example the policy is a network policy very",
    "start": "1986059",
    "end": "1991460"
  },
  {
    "text": "similar to the policy we saw for the front-end service however if you look at the Ingress rule",
    "start": "1991460",
    "end": "1997820"
  },
  {
    "text": "we are simply permitting the front-end service to talk to the checkout service so there's a pinhole now created in the",
    "start": "1997820",
    "end": "2005500"
  },
  {
    "text": "Ingress Direction for the checkout services endpoints however if you recall the previous",
    "start": "2005500",
    "end": "2011919"
  },
  {
    "text": "policy the egress pinhole for the front-end endpoints were created in the",
    "start": "2011919",
    "end": "2017980"
  },
  {
    "text": "front-end policy okay so now with this policy we now have end-to-end",
    "start": "2017980",
    "end": "2023320"
  },
  {
    "text": "communication or the end-to-end flow from the front end to checkout permitted okay",
    "start": "2023320",
    "end": "2031720"
  },
  {
    "text": "and the checkout service endpoint has an egress rule so pinhole in the egress direction for the checkout services",
    "start": "2031720",
    "end": "2037899"
  },
  {
    "text": "endpoint to permitting it or allowing it to communicate with the other endpoints",
    "start": "2037899",
    "end": "2044159"
  },
  {
    "text": "in the same namespace that it should be able to communicate with okay",
    "start": "2044159",
    "end": "2049780"
  },
  {
    "text": "again the same logic holes right so for example if it's communicating with payment services",
    "start": "2049780",
    "end": "2056260"
  },
  {
    "text": "in the policy that we have for payment services we've got to make sure that that flow is allowed in the inbound",
    "start": "2056260",
    "end": "2063580"
  },
  {
    "text": "Direction okay so the policies we're developing for",
    "start": "2063580",
    "end": "2069398"
  },
  {
    "text": "the Hipster shop namespace a very fine-grained granular policies right the",
    "start": "2069399",
    "end": "2074919"
  },
  {
    "text": "policies apply to select endpoints endpoints representing a particular microservice",
    "start": "2074919",
    "end": "2081520"
  },
  {
    "text": "and for those endpoints we're applying rules in both the inbound and the outbound directions right so these are",
    "start": "2081520",
    "end": "2089858"
  },
  {
    "text": "very granular policies okay now of course for the checkout service",
    "start": "2089859",
    "end": "2096339"
  },
  {
    "text": "we're not permitting traffic from the Ingress because it's the front end that communicates or the front end that",
    "start": "2096339",
    "end": "2101740"
  },
  {
    "text": "receives traffic from the Ingress okay however the checkout service will",
    "start": "2101740",
    "end": "2107560"
  },
  {
    "text": "receive traffic from front end and on the egress Direction communicate with other microservices or endpoints in the",
    "start": "2107560",
    "end": "2115540"
  },
  {
    "text": "same namespace all right so let's move forward",
    "start": "2115540",
    "end": "2121960"
  },
  {
    "text": "so I've not shown the rest of the policies for the Hipster shop namespace those policies you know will continue",
    "start": "2121960",
    "end": "2128140"
  },
  {
    "start": "2123000",
    "end": "2123000"
  },
  {
    "text": "however the pattern Remains the Same okay",
    "start": "2128140",
    "end": "2133599"
  },
  {
    "text": "so assuming that we've completed the policies for the Hipster shop namespace let's now look at the policy for the yaw",
    "start": "2133599",
    "end": "2140200"
  },
  {
    "text": "Bank namespace this policy is a network policy which applies to all endpoints in the Yahoo Bank namespace",
    "start": "2140200",
    "end": "2146800"
  },
  {
    "text": "has an Ingress rule which permits traffic from the Ingress controller",
    "start": "2146800",
    "end": "2152200"
  },
  {
    "text": "the namespace selector field is used in the rule with the project calico.org",
    "start": "2152200",
    "end": "2157480"
  },
  {
    "text": "name label to select the Ingress nginx namespace and the selector field is used",
    "start": "2157480",
    "end": "2162520"
  },
  {
    "text": "with multiple labels to select the Ingress controller traffic permitted to the customer",
    "start": "2162520",
    "end": "2168579"
  },
  {
    "text": "endpoints using a selector with label equals app equals customer label",
    "start": "2168579",
    "end": "2177940"
  },
  {
    "text": "now the policy also has an Ingress rule which permits traffic from all other endpoints in the same namespace using",
    "start": "2177940",
    "end": "2185079"
  },
  {
    "text": "the selector field with the all match operator similar it also has an egress rule which",
    "start": "2185079",
    "end": "2191140"
  },
  {
    "text": "permits traffic to all endpoints in the same namespace using the selector field",
    "start": "2191140",
    "end": "2196300"
  },
  {
    "text": "with the all match operator so this is a interesting pattern",
    "start": "2196300",
    "end": "2204880"
  },
  {
    "text": "so very similar to the front-end policy we looked at however with a distinction",
    "start": "2204880",
    "end": "2212440"
  },
  {
    "text": "so this is a network policy applies to the Yahoo bank namespace and in the",
    "start": "2212440",
    "end": "2217839"
  },
  {
    "text": "Ingress direction if you look at the rule given that this policy applies to all",
    "start": "2217839",
    "end": "2224020"
  },
  {
    "text": "endpoints in the Yahoo Bank namespace we've not specified a selector and what",
    "start": "2224020",
    "end": "2229780"
  },
  {
    "text": "that means is all endpoints in the namespace are matched for this policy",
    "start": "2229780",
    "end": "2236380"
  },
  {
    "text": "if you look at the Ingress rule very similar to some of the Ingress rules we looked at previously",
    "start": "2236380",
    "end": "2241780"
  },
  {
    "text": "we are using the namespace selector and the endpoint selector to select",
    "start": "2241780",
    "end": "2247240"
  },
  {
    "text": "three nginx Ingress controller however this particular rule also has a",
    "start": "2247240",
    "end": "2253660"
  },
  {
    "text": "destination field that's used and the destination for the Ingress rule",
    "start": "2253660",
    "end": "2258940"
  },
  {
    "text": "is the customer endpoints okay",
    "start": "2258940",
    "end": "2265140"
  },
  {
    "text": "if you look at the second Ingress rule what this means is that all endpoints in the Yahoo Bank namespace",
    "start": "2266560",
    "end": "2273400"
  },
  {
    "text": "can receive traffic from all other endpoints in the Yao Bank namespace",
    "start": "2273400",
    "end": "2279240"
  },
  {
    "text": "given that this is a network policy and we've not specified selectors",
    "start": "2279240",
    "end": "2286119"
  },
  {
    "text": "all endpoints can receive traffic from all other endpoints and the egress rule is similar to that as well there are no",
    "start": "2286119",
    "end": "2292540"
  },
  {
    "text": "selectors and what this means is that all endpoints can send traffic to all",
    "start": "2292540",
    "end": "2298480"
  },
  {
    "text": "other endpoints in the Yahoo Bank namespace so this is what the pattern looks like",
    "start": "2298480",
    "end": "2304300"
  },
  {
    "text": "the Ingress nginx can send traffic to the customer endpoints",
    "start": "2304300",
    "end": "2311020"
  },
  {
    "text": "that's governed by the first rule in the Ingress Direction however the endpoints within the",
    "start": "2311020",
    "end": "2318160"
  },
  {
    "text": "namespace can freely talk to each other since we've permitted or Alive outbound and inbound",
    "start": "2318160",
    "end": "2325000"
  },
  {
    "text": "Communications from all endpoints in the same namespace so this is what this pattern looks like",
    "start": "2325000",
    "end": "2331599"
  },
  {
    "text": "now this is a bit of a coarse grained policy at times you may want to implement such",
    "start": "2331599",
    "end": "2338500"
  },
  {
    "text": "policies right if you trust all the workloads inside the namespace if it's a namespace that is not too",
    "start": "2338500",
    "end": "2345099"
  },
  {
    "text": "critical however has several workloads you can create a guard rail around the",
    "start": "2345099",
    "end": "2351400"
  },
  {
    "text": "namespace rather than for every group of endpoints inside the namespace",
    "start": "2351400",
    "end": "2358000"
  },
  {
    "text": "now this differs from the policy we created for you know front-end and checkout and the services in the Hipster",
    "start": "2358000",
    "end": "2364420"
  },
  {
    "text": "shop namespace because those policies were very specific to a group of",
    "start": "2364420",
    "end": "2369520"
  },
  {
    "text": "endpoints within the same name so it's an even when they had to communicate with other endpoints in the same namespace it had",
    "start": "2369520",
    "end": "2377020"
  },
  {
    "text": "to be explicitly permitted using rules or policies",
    "start": "2377020",
    "end": "2384040"
  },
  {
    "text": "all right so moving on to the booking for policy very similar to the Yahoo bank it's a very similar pattern again",
    "start": "2384040",
    "end": "2391260"
  },
  {
    "start": "2386000",
    "end": "2386000"
  },
  {
    "text": "traffic from the Ingress is permitted this time to the product page deployment",
    "start": "2391260",
    "end": "2397060"
  },
  {
    "text": "which is exposed to external consumers and all Communications inside the",
    "start": "2397060",
    "end": "2403359"
  },
  {
    "text": "namespace to and from all the endpoints inside the namespace is allowed okay",
    "start": "2403359",
    "end": "2410560"
  },
  {
    "text": "so very similar pattern to What was seen in the Yahoo Bank policy",
    "start": "2410560",
    "end": "2416160"
  },
  {
    "text": "so it's not important that you kind of understand all the microservices involved in some of these examples the",
    "start": "2416160",
    "end": "2423160"
  },
  {
    "text": "idea is that you understand the pattern right so in in the Yahoo Bank example it",
    "start": "2423160",
    "end": "2429400"
  },
  {
    "text": "was the customer endpoint that was exposed to external consumers and in the bookie for example it's the product page",
    "start": "2429400",
    "end": "2435579"
  },
  {
    "text": "in points that's exposed to excel consumers and those are the endpoints that have the pinhole in the Ingress",
    "start": "2435579",
    "end": "2442839"
  },
  {
    "text": "Direction permitting traffic from the Ingress controller foreign",
    "start": "2442839",
    "end": "2448900"
  },
  {
    "text": "so we've looked at a few policy patterns right so we started off with the deny",
    "start": "2448900",
    "end": "2454599"
  },
  {
    "start": "2451000",
    "end": "2451000"
  },
  {
    "text": "list we had a pattern for cube DNS build policies to restrict tenant one",
    "start": "2454599",
    "end": "2460180"
  },
  {
    "text": "enter into workloads we looked at some granular policies for the",
    "start": "2460180",
    "end": "2466260"
  },
  {
    "text": "endpoints in the Hipster shop namespace and then look at some core screen policies for your back and book info",
    "start": "2466260",
    "end": "2472599"
  },
  {
    "text": "once you are done building policies for a certain set of namespaces you could",
    "start": "2472599",
    "end": "2477700"
  },
  {
    "text": "then enforce a default deny for those namespaces so in this case we are first",
    "start": "2477700",
    "end": "2482920"
  },
  {
    "text": "enforcing our default deny for tenant one and what this says is that deny all",
    "start": "2482920",
    "end": "2489280"
  },
  {
    "text": "traffic in the Ingress and increase directions for the tenant one workloads this policy is a Global Network policies",
    "start": "2489280",
    "end": "2496599"
  },
  {
    "text": "and the workloads identified using the namespace selector in this case we'll match the heaps of shop and Yahoo Bank",
    "start": "2496599",
    "end": "2502720"
  },
  {
    "text": "namespaces similarly we have a 10 and 2 default deny very similar logic it's a Global",
    "start": "2502720",
    "end": "2509320"
  },
  {
    "text": "Network policy we've matched the namespaces using a namespace select in this case it's just a booking for",
    "start": "2509320",
    "end": "2515320"
  },
  {
    "text": "namespace and all Ingress and egress traffic is denied",
    "start": "2515320",
    "end": "2522780"
  },
  {
    "text": "all right so hopefully now you understand the reason for this default deny right sorry default a love if you",
    "start": "2522820",
    "end": "2529300"
  },
  {
    "text": "look at this policy model I have policies where we've matched all the endpoints in the cluster for example",
    "start": "2529300",
    "end": "2535660"
  },
  {
    "text": "Cube DNS however we've not built all the policies for all the endpoints in the cluster",
    "start": "2535660",
    "end": "2541300"
  },
  {
    "text": "right and what this means is that if that default deny sorry the default love wasn't there right I would be denying",
    "start": "2541300",
    "end": "2549700"
  },
  {
    "text": "all other flows in the cluster so the idea being that you take a progressive approach When",
    "start": "2549700",
    "end": "2556060"
  },
  {
    "text": "developing your policy model you may want to restrict certain environments so",
    "start": "2556060",
    "end": "2562660"
  },
  {
    "text": "in this case assuming that doesn't want the tenants were actually customers you'd want to secure those custom",
    "start": "2562660",
    "end": "2568480"
  },
  {
    "text": "environments and isolate them from the rest of the cluster so that's what we've done and now you can continue with the",
    "start": "2568480",
    "end": "2574900"
  },
  {
    "text": "rest of the policy development however hopefully the patterns that we've shown with the global Network",
    "start": "2574900",
    "end": "2581740"
  },
  {
    "text": "policies and network policies and how environments were isolated from the rest",
    "start": "2581740",
    "end": "2587079"
  },
  {
    "text": "of the cluster the course Grant policies and the fine grain policies hopefully",
    "start": "2587079",
    "end": "2592599"
  },
  {
    "text": "those patterns help you think about how you should be approaching policies for your",
    "start": "2592599",
    "end": "2599440"
  },
  {
    "text": "environments all right so with the policy model build",
    "start": "2599440",
    "end": "2605440"
  },
  {
    "start": "2604000",
    "end": "2604000"
  },
  {
    "text": "now you're in a position you know to introduce security policy governance",
    "start": "2605440",
    "end": "2610780"
  },
  {
    "text": "okay and when you're thinking about governance you know you've got to think in terms of policy",
    "start": "2610780",
    "end": "2616960"
  },
  {
    "text": "model rather than individual policies and Leverage security policy ordering role-based",
    "start": "2616960",
    "end": "2624400"
  },
  {
    "text": "access control and admission control to enforce policy governance okay",
    "start": "2624400",
    "end": "2631359"
  },
  {
    "text": "for example if application developers are authoring policies and if they're auditing policies for a",
    "start": "2631359",
    "end": "2638020"
  },
  {
    "text": "particular namespace you could for example assign a certain order for the policies that they are",
    "start": "2638020",
    "end": "2644740"
  },
  {
    "text": "allowed to author okay that kind of ensures that they're not able to",
    "start": "2644740",
    "end": "2650800"
  },
  {
    "text": "circumvent high level controls and you have enforced for example controls such",
    "start": "2650800",
    "end": "2656500"
  },
  {
    "text": "as restrict and the deny list maybe under the purview of the security team and when you are permitting other",
    "start": "2656500",
    "end": "2663520"
  },
  {
    "text": "authors to apply policies you may wanna have some governance around that and",
    "start": "2663520",
    "end": "2670839"
  },
  {
    "text": "policy ordering is a feature that you could use to create a governance structure okay",
    "start": "2670839",
    "end": "2679180"
  },
  {
    "text": "now of course policies are kubernetes resources and as such are subject to kubernetes are back again when",
    "start": "2679180",
    "end": "2687880"
  },
  {
    "text": "allowing other authors to apply policies you could control which authors can",
    "start": "2687880",
    "end": "2693640"
  },
  {
    "text": "apply policies to which namespaces using hardback of course tie all of this together with admission control",
    "start": "2693640",
    "end": "2701700"
  },
  {
    "text": "alrighty so there's a lot going on in our Calico pulse and I think we've simply",
    "start": "2702960",
    "end": "2709240"
  },
  {
    "start": "2705000",
    "end": "2705000"
  },
  {
    "text": "scratched the surface here the best place to understand all the features all",
    "start": "2709240",
    "end": "2714280"
  },
  {
    "text": "the capabilities all the fields and operators available in a Calico policy",
    "start": "2714280",
    "end": "2720280"
  },
  {
    "text": "is to refer to the documentation of put the link here to the network policy",
    "start": "2720280",
    "end": "2725920"
  },
  {
    "text": "and the global Network policy documentation for project Calico",
    "start": "2725920",
    "end": "2731619"
  },
  {
    "text": "all right so with that you know let's talk a bit about calico Enterprise and",
    "start": "2731619",
    "end": "2737380"
  },
  {
    "start": "2732000",
    "end": "2732000"
  },
  {
    "text": "Calico cloud Calico OSS is the foundation for Calico Enterprise and Calico Cloud we look at",
    "start": "2737380",
    "end": "2744339"
  },
  {
    "text": "the policy features in Calico OSS and Calico Enterprise and Cloud Builds on",
    "start": "2744339",
    "end": "2751240"
  },
  {
    "text": "top of this and offers certain Advanced security policy features",
    "start": "2751240",
    "end": "2756640"
  },
  {
    "text": "for example you could use policy tiering so when we build policies this time",
    "start": "2756640",
    "end": "2763540"
  },
  {
    "text": "policy model was in a single tier with calculate the price and Cloud you have",
    "start": "2763540",
    "end": "2768940"
  },
  {
    "text": "the option to have multiple policy tiers there's a policy UI editor a policy",
    "start": "2768940",
    "end": "2774579"
  },
  {
    "text": "recommender to suggest policies based on active flows in the cluster policy dashboards with Prometheus",
    "start": "2774579",
    "end": "2780700"
  },
  {
    "text": "metrics policy auditing login capabilities and endpoint browser to",
    "start": "2780700",
    "end": "2785740"
  },
  {
    "text": "identify which policies are applied to certain endpoints for service graph to identify",
    "start": "2785740",
    "end": "2791740"
  },
  {
    "text": "and understand a security policy evaluation flow visualization for troubleshooting and compliance reporting",
    "start": "2791740",
    "end": "2798160"
  },
  {
    "text": "so add-on functionality however the functionality provided by Calico OSS",
    "start": "2798160",
    "end": "2803740"
  },
  {
    "text": "Remains the foundation for this additional capabilities",
    "start": "2803740",
    "end": "2810000"
  },
  {
    "text": "all right with that I think we're going to wrap this session again thanks for your time",
    "start": "2810400",
    "end": "2816220"
  },
  {
    "text": "I hope it was beneficial for more information you can find us on the",
    "start": "2816220",
    "end": "2821619"
  },
  {
    "text": "project Calico slack Channel and also the project category documentation",
    "start": "2821619",
    "end": "2827140"
  },
  {
    "text": "for further information around some of the policies and the policy features",
    "start": "2827140",
    "end": "2834160"
  },
  {
    "text": "that we discussed in this session with that thanks for watching um I hope",
    "start": "2834160",
    "end": "2839500"
  },
  {
    "text": "you have a good rest of the day thank you",
    "start": "2839500",
    "end": "2843480"
  }
]