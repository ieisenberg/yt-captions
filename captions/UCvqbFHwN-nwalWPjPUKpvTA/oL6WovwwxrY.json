[
  {
    "start": "0",
    "end": "92000"
  },
  {
    "text": "okay I think we're gonna get started here thanks everyone for joining us here",
    "start": "60",
    "end": "5520"
  },
  {
    "text": "I know it's the end of the day and probably pretty exhausted from two days of cou calm but we're gonna be talking",
    "start": "5520",
    "end": "12179"
  },
  {
    "text": "to you to you today about fluent Pitt which is a vlogging agent that you might",
    "start": "12179",
    "end": "17760"
  },
  {
    "text": "be familiar with and we're going to talk about how you can use go to integrate",
    "start": "17760",
    "end": "22859"
  },
  {
    "text": "with fluent bits and extend your logging capabilities using go so that's the main",
    "start": "22859",
    "end": "29189"
  },
  {
    "text": "topic just a quick show of hands how many people here have or are regular",
    "start": "29189",
    "end": "36329"
  },
  {
    "text": "users of go okay so good good amount of you say yeah it's this will be useful",
    "start": "36329",
    "end": "43559"
  },
  {
    "text": "for you all so my name is Jason Keene and my colleague here is Warren",
    "start": "43559",
    "end": "48570"
  },
  {
    "text": "Fernandez we work for pivotal and we work mainly on observability tooling for",
    "start": "48570",
    "end": "54899"
  },
  {
    "text": "kubernetes and we're both really avid go users we love using go and pivotal is as",
    "start": "54899",
    "end": "61500"
  },
  {
    "text": "a company is embrace go pretty heavily so pretty much any problem we encounter",
    "start": "61500",
    "end": "66840"
  },
  {
    "text": "II see if it's possible to solve of using go and go is a language that is",
    "start": "66840",
    "end": "73430"
  },
  {
    "text": "increasingly important in the cloud infrastructure space kubernetes as I'm",
    "start": "73430",
    "end": "78750"
  },
  {
    "text": "sure everyone's aware is appointed ago you know pretty much all the tooling that we use is in somehow related to go",
    "start": "78750",
    "end": "86220"
  },
  {
    "text": "or implement it directly and go so it's incredibly important for us as a company and as a community so today we're gonna",
    "start": "86220",
    "end": "94380"
  },
  {
    "start": "92000",
    "end": "224000"
  },
  {
    "text": "be talking about kind of our story with one bit and go and why we decided to",
    "start": "94380",
    "end": "100140"
  },
  {
    "text": "choose fluent bits so folks might be familiar with Flint D which is a bit a little bit better known than fluent bit",
    "start": "100140",
    "end": "107220"
  },
  {
    "text": "flip it's kind of like a newer project so we're gonna dive into like why we",
    "start": "107220",
    "end": "112290"
  },
  {
    "text": "chose flip it over flew Indy we're then going to kind of go over the architecture of",
    "start": "112290",
    "end": "118970"
  },
  {
    "text": "kind of do a little dive into how fluent bits works internally and then we'll",
    "start": "118970",
    "end": "125060"
  },
  {
    "text": "cover the NGO interface so how a little bit interacts with go and finally we're",
    "start": "125060",
    "end": "131330"
  },
  {
    "text": "gonna cover some of our ideas and plans for moving the ball forward in regards",
    "start": "131330",
    "end": "136640"
  },
  {
    "text": "to using go with flip that so let's start with why why we choose Olympic so",
    "start": "136640",
    "end": "143380"
  },
  {
    "text": "the product that we are working on is observability capability for kubernetes",
    "start": "143380",
    "end": "148880"
  },
  {
    "text": "and one of the aspects of that is collecting logs and a lot of our customers use syslog as a protocol so we",
    "start": "148880",
    "end": "156500"
  },
  {
    "text": "basically needed to get all the logs off these clusters and ship them to syslog destinations message reliability was a",
    "start": "156500",
    "end": "163220"
  },
  {
    "text": "primary consideration for us so we wanted to have a system that would not just forget about messages we wanted",
    "start": "163220",
    "end": "169010"
  },
  {
    "text": "something that if the log messages written out by the workload we wanted to eventually get delivered to the logging",
    "start": "169010",
    "end": "174950"
  },
  {
    "text": "destination so that was our primary consideration we wanted to have really",
    "start": "174950",
    "end": "180050"
  },
  {
    "text": "good support in the community the communities community I preferably a project that's part of the CNC F go",
    "start": "180050",
    "end": "188090"
  },
  {
    "text": "again is like first-class thing that we we want a project as first-class support for go RFC 5424 so the syslog",
    "start": "188090",
    "end": "198100"
  },
  {
    "text": "specification is standardized in the IETF RFC 5424 a lot of this law",
    "start": "198100",
    "end": "206260"
  },
  {
    "text": "implementations don't necessarily follow this standard so we wanted to make sure that we had a standards compliant",
    "start": "206260",
    "end": "211880"
  },
  {
    "text": "implementation and finally I'm looking for a agents we were looking for",
    "start": "211880",
    "end": "218030"
  },
  {
    "text": "something that wouldn't consume a lot of resources and would be somewhat performance so those are all our",
    "start": "218030",
    "end": "225500"
  },
  {
    "start": "224000",
    "end": "535000"
  },
  {
    "text": "criteria in order so let's take a look at flow and D and Flint bit and kind of how they differ in these criteria so",
    "start": "225500",
    "end": "233049"
  },
  {
    "text": "just kind of overview both of these and how they differ so fluent D is",
    "start": "233049",
    "end": "238190"
  },
  {
    "text": "implemented in Ruby and has some gems that use like C modules for performance critical code so",
    "start": "238190",
    "end": "245290"
  },
  {
    "text": "stuff like the message pack capability is implemented in like a C extension for Ruby but most of its implemented in Ruby",
    "start": "245290",
    "end": "252640"
  },
  {
    "text": "fluent bit itself is implemented in c fluent d its might have heard you know",
    "start": "252640",
    "end": "258579"
  },
  {
    "text": "it has a really vast ecosystem of plugins last number I heard was over a thousand different plugins available for",
    "start": "258580",
    "end": "264790"
  },
  {
    "text": "fluent e which is incredible thump it on the other hand is a relatively new",
    "start": "264790",
    "end": "269860"
  },
  {
    "text": "project so it has less you know plugins less capability in that regard and the",
    "start": "269860",
    "end": "276130"
  },
  {
    "text": "plugins for film bit are mostly statically built with fluent bit so they're not things that you kind of can just like pull off the internet and",
    "start": "276130",
    "end": "282070"
  },
  {
    "text": "start running so there's less of those so there's you know Neron 54 last time I",
    "start": "282070",
    "end": "288070"
  },
  {
    "text": "checked so yeah fluent D you can extend with Ruby real easily just write a class",
    "start": "288070",
    "end": "294220"
  },
  {
    "text": "and there's different extension points whereas a fluent bit you kind of if you",
    "start": "294220",
    "end": "299680"
  },
  {
    "text": "want like a first class support for plugin you want to implement it and see there are options for go and that's what",
    "start": "299680",
    "end": "305680"
  },
  {
    "text": "we're gonna be going in today into today and then there's also some Lua capability as well",
    "start": "305680",
    "end": "311430"
  },
  {
    "text": "fluent D when it comes to memory and CPU just an idle state fluent e will consume",
    "start": "311430",
    "end": "317530"
  },
  {
    "text": "about 40 Meg's of RAM and fluent Belle will consume much less around 500",
    "start": "317530",
    "end": "323020"
  },
  {
    "text": "kilobytes and as well as memory CPU fluent e consumes a little bit more CPU",
    "start": "323020",
    "end": "328540"
  },
  {
    "text": "than flip it just an idle state fluent e has its kind of targeted for aggregation",
    "start": "328540",
    "end": "336910"
  },
  {
    "text": "type role so since it has this broad support for input/output plugins and",
    "start": "336910",
    "end": "342160"
  },
  {
    "text": "filters for manipulating data it's really suited for that role where you're kind of ingesting a lot of data and",
    "start": "342160",
    "end": "349720"
  },
  {
    "text": "sending to the appropriate location whereas swingbed has some of those capabilities",
    "start": "349720",
    "end": "354839"
  },
  {
    "text": "but doesn't have the large amount of plugins so it's not really well-suited for that role but it is better suited",
    "start": "354839",
    "end": "361649"
  },
  {
    "text": "for kind of like the edge collection of data so has really good input plugins",
    "start": "361649",
    "end": "367259"
  },
  {
    "text": "and it's really performant it doesn't consume a lot of resources so it's better as like a daemon set so an agent",
    "start": "367259",
    "end": "373349"
  },
  {
    "text": "that you're running your cluster on every single node and finally both",
    "start": "373349",
    "end": "378359"
  },
  {
    "text": "fluent D and fluent bit have support for something called the forward protocol which just allows them to interoperate so it's not really a question of flowing",
    "start": "378359",
    "end": "386189"
  },
  {
    "text": "D versus for a bit it's really which technology is appropriate in the right location so if you want to use one D",
    "start": "386189",
    "end": "392549"
  },
  {
    "text": "where it makes sense you can do that and you can interrupt with one bit using this forward protocol so going",
    "start": "392549",
    "end": "399629"
  },
  {
    "text": "back to our national criteria message reliability so both pulling the influent bit do a really good job at message",
    "start": "399629",
    "end": "406139"
  },
  {
    "text": "reliability they both support buffering in memory and to disk that's something that was introduced recently and flip it",
    "start": "406139",
    "end": "412589"
  },
  {
    "text": "a few months ago so these support buffering and they support retracted messages so if a",
    "start": "412589",
    "end": "418169"
  },
  {
    "text": "message fails to send you can have the engine retry the message for you",
    "start": "418169",
    "end": "423959"
  },
  {
    "text": "kubernetes support both have really good first-class support for reading log",
    "start": "423959",
    "end": "429179"
  },
  {
    "text": "files off a disk and then kubernetes metadata filter for taking the log",
    "start": "429179",
    "end": "435689"
  },
  {
    "text": "message figuring out you know what pod when container it's associated with and annotating the message with that information CNS CN CF status so flowing",
    "start": "435689",
    "end": "445049"
  },
  {
    "text": "the as a recent graduate from the CN CF so I think it's a six project that was graduated from CNCs so it's really",
    "start": "445049",
    "end": "451619"
  },
  {
    "text": "mature for a bit on the other hand is kind of a newer project it's technically a sub-project of fluency so it's still",
    "start": "451619",
    "end": "458669"
  },
  {
    "text": "kind of part of that CN CF status but it's still relatively new go support",
    "start": "458669",
    "end": "467339"
  },
  {
    "text": "fluent D doesn't really have any support for go fluent bid support supported at the time of us going through this",
    "start": "467339",
    "end": "473489"
  },
  {
    "text": "criteria only supported output buggins RFC 5424 so there was an implementation",
    "start": "473489",
    "end": "480029"
  },
  {
    "text": "of a systolic gem for fluently when we investigated it it turned out to not really be five for two",
    "start": "480029",
    "end": "485930"
  },
  {
    "text": "for compliance and if you use it with a kubernetes cluster since the tag is the",
    "start": "485930",
    "end": "491150"
  },
  {
    "text": "file path of a the log and that actually gets written out in the systolic message",
    "start": "491150",
    "end": "497270"
  },
  {
    "text": "as the tag it actually caused the Ruby interpreter to throw an exception so pretty much if you use it with",
    "start": "497270",
    "end": "503479"
  },
  {
    "text": "kubernetes that doesn't really work too well so that wasn't really a good option for us and then flump it didn't really have",
    "start": "503479",
    "end": "509810"
  },
  {
    "text": "support for syslog output plugins at the time and I think it has like input",
    "start": "509810",
    "end": "515659"
  },
  {
    "text": "plugins support but it doesn't have support for sending out messages via Susilo resource usage so like I",
    "start": "515659",
    "end": "523010"
  },
  {
    "text": "mentioned before both with resource usage and performance flump it kind of wins out in that regard so given the",
    "start": "523010",
    "end": "529940"
  },
  {
    "text": "kind of all these criteria we decided fluent pet would probably be the best choice for us and you know the main",
    "start": "529940",
    "end": "537200"
  },
  {
    "start": "535000",
    "end": "863000"
  },
  {
    "text": "thing that came down to is ease of implementing the plug-in using go so",
    "start": "537200",
    "end": "542420"
  },
  {
    "text": "yeah that's it I was gonna talk about the architecture filmed it alright so",
    "start": "542420",
    "end": "547610"
  },
  {
    "text": "I'm just gonna cover a high-level overview of the architecture of phone bed just FYI most of the stuff that",
    "start": "547610",
    "end": "556339"
  },
  {
    "text": "we're talking about it's already being covered by Eduardo Silva who's one of the core maintainer Assaf fun bit and",
    "start": "556339",
    "end": "561980"
  },
  {
    "text": "this is a screen shot of his talk last year and Cuba on Seattle how many of you",
    "start": "561980",
    "end": "568370"
  },
  {
    "text": "guys went to the talk like a couple hours ago he had his yogi cope we have",
    "start": "568370",
    "end": "574190"
  },
  {
    "text": "one all right new stuff for you guys yeah he gave a deep dive of the newer",
    "start": "574190",
    "end": "580550"
  },
  {
    "text": "stream processing support fulfillment but I won't be covering that I'm all",
    "start": "580550",
    "end": "586820"
  },
  {
    "text": "right so this is essentially the logging pipeline of who embed you might have seen this on day one keynote staged very",
    "start": "586820",
    "end": "593810"
  },
  {
    "text": "similar diagram we're trying to cover this pretty quickly so one of the things",
    "start": "593810",
    "end": "600200"
  },
  {
    "text": "that you have to understand look fluent bit it was designed to be a data analysis tool and essentially was",
    "start": "600200",
    "end": "605810"
  },
  {
    "text": "designed to be a ubiquitous across a lot of platforms right it was actually designed for embedded world",
    "start": "605810",
    "end": "611190"
  },
  {
    "text": "and not really with any sort of so structure in mind was trying to be as",
    "start": "611190",
    "end": "617520"
  },
  {
    "text": "flexible you know ubiquitous across the whole platform so they try to build the",
    "start": "617520",
    "end": "624660"
  },
  {
    "text": "pipeline with a lot of flexibility so the let's start with stage one to make first thing that fluid does is it has an",
    "start": "624660",
    "end": "632070"
  },
  {
    "text": "input stage this is where it actually collects the logs right and this could be from tailing files to reading off the",
    "start": "632070",
    "end": "639840"
  },
  {
    "text": "network or you know various myriad of ways one of the T key things that the",
    "start": "639840",
    "end": "645960"
  },
  {
    "text": "input stage does is it actually tags the tag is fighting the configuration for",
    "start": "645960",
    "end": "651540"
  },
  {
    "text": "that instance and it says okay I want to tag these records with a specific thing like a hostname or cluster name whatever",
    "start": "651540",
    "end": "658100"
  },
  {
    "text": "from there on the data the chunk of data gets sent over to a parser now you have",
    "start": "658100",
    "end": "664890"
  },
  {
    "text": "to understand that this is I was billed again for data analysis of keep reiterating that and we can't expect our",
    "start": "664890",
    "end": "671640"
  },
  {
    "text": "data to always be structured right like in our kubernetes world it's great because they're essentially in JSON",
    "start": "671640",
    "end": "677370"
  },
  {
    "text": "format but the intention for this tool was not that to assume that your logs are structured in JSON or log format or",
    "start": "677370",
    "end": "684510"
  },
  {
    "text": "whatever so you can literally get a string of texts that are the tokens are two spaces away so this parsing stage",
    "start": "684510",
    "end": "690870"
  },
  {
    "text": "does the important job of normalizing that data and adding structure to those log messages right from then on and goes",
    "start": "690870",
    "end": "698880"
  },
  {
    "text": "to the filtering stage and this is actually my opinion like one of the most important things in flume bed so this",
    "start": "698880",
    "end": "704070"
  },
  {
    "text": "filtering stage allows you to one thing it does allows you to enrich your data what does that mean so in our world in a",
    "start": "704070",
    "end": "711300"
  },
  {
    "text": "kubernetes will write the log that comes in from the docker file on the dock a log file is you have a JSON with a key",
    "start": "711300",
    "end": "717420"
  },
  {
    "text": "of log stream which is standard out a standard error and then I think a timestamp and that's very basic but if",
    "start": "717420",
    "end": "724650"
  },
  {
    "text": "you use the kubernetes metadata filter it enriches your log with all this metadata of where did this log come from",
    "start": "724650",
    "end": "730980"
  },
  {
    "text": "the pod name the container ID labels annotations again",
    "start": "730980",
    "end": "736889"
  },
  {
    "text": "they'd built for data analysis so you have no all this rich metadata that you can use later downstream",
    "start": "736889",
    "end": "743429"
  },
  {
    "text": "so that's one important job at the filtering stages the next important job is removal of data if some of you've",
    "start": "743429",
    "end": "753029"
  },
  {
    "text": "used tools like Splunk y-you can understand how expensive a log can be",
    "start": "753029",
    "end": "759059"
  },
  {
    "text": "and storing every single log and some sometimes you want to do that sometimes you don't need that so this is the stage",
    "start": "759059",
    "end": "765660"
  },
  {
    "text": "where you can say how if it you know doesn't match the tag or it doesn't have this you know word like the word error",
    "start": "765660",
    "end": "773189"
  },
  {
    "text": "in it I don't care about it get rid of it remove that data and so it kind of lightens that load after that it goes to",
    "start": "773189",
    "end": "780209"
  },
  {
    "text": "the buffer Jason I mentioned before that one of our cry tears was reliability and",
    "start": "780209",
    "end": "785549"
  },
  {
    "text": "we've been in the observing space working foundry one of the things we kept on seeing was a back pressure and",
    "start": "785549",
    "end": "791549"
  },
  {
    "text": "the outputs are failed to send messages fast enough so really having this buffer",
    "start": "791549",
    "end": "797129"
  },
  {
    "text": "by default it's like an in-memory buffer but I think as a version wondered how you can configure from bit to have",
    "start": "797129",
    "end": "803100"
  },
  {
    "text": "alarms on disk like a storage mechanism for the buffer and this buffer then allows fun bit to do message retries",
    "start": "803100",
    "end": "810350"
  },
  {
    "text": "then it comes the routing stage which literally remember they're tagging on the inputs the right in the beginning it",
    "start": "810350",
    "end": "817439"
  },
  {
    "text": "does a wild card or reg x'q match on the tag and says okay you know plus tag",
    "start": "817439",
    "end": "822720"
  },
  {
    "text": "things that are tagged with cluster eggs and to output a cluster B's and up a B so yeah and then you have outputs and",
    "start": "822720",
    "end": "829980"
  },
  {
    "text": "the stuff that we're talking about is up the output side of things and did I",
    "start": "829980",
    "end": "835259"
  },
  {
    "text": "mention that 54 plugins right now or 50 ish plugins and foam bed these are the",
    "start": "835259",
    "end": "840329"
  },
  {
    "text": "stages that can be pluggable right and again they did this so that it you're empowered to be as flexible as you need",
    "start": "840329",
    "end": "848039"
  },
  {
    "text": "so things don't work out hey write a plug-in right and just in our case we",
    "start": "848039",
    "end": "853079"
  },
  {
    "text": "just didn't want to write a C++ have that statically linked so we saw that fluid it was the ability to",
    "start": "853079",
    "end": "858950"
  },
  {
    "text": "dynamically lingo plugins which is why we're here alright so let's go on a little bit of",
    "start": "858950",
    "end": "865710"
  },
  {
    "start": "863000",
    "end": "1146000"
  },
  {
    "text": "the internals so Foom bit his runs as a single thread remember I said the",
    "start": "865710",
    "end": "871190"
  },
  {
    "text": "initial intent was to run in an embedded system so it had to be very lightweight right and everything in fluent bit is",
    "start": "871190",
    "end": "877320"
  },
  {
    "text": "configured with this config file everything so things like flush into worlds if service level config to the",
    "start": "877320",
    "end": "885150"
  },
  {
    "text": "inputs and outputs and all of the instances that you need to configure and",
    "start": "885150",
    "end": "890520"
  },
  {
    "text": "the first thing it does and it's the reason it allows this config file it looks and sees oh it's what are the are",
    "start": "890520",
    "end": "895920"
  },
  {
    "text": "there any go plugins or there are you have configured perfect I'm going to load those shared objects in and load",
    "start": "895920",
    "end": "903300"
  },
  {
    "text": "these plugins in and register the plugins the first thing it does it says okay now this go plug-in is you know in",
    "start": "903300",
    "end": "910230"
  },
  {
    "text": "my list of output plugins right and then it goes on down the config file and says ok let's initialize each of these input",
    "start": "910230",
    "end": "917670"
  },
  {
    "text": "plugins filters and output plugins so when it's part of this initialization",
    "start": "917670",
    "end": "924240"
  },
  {
    "text": "process what happens is so think of like a it's saying okay I'm gonna go to my list of input plugins and there's an",
    "start": "924240",
    "end": "930840"
  },
  {
    "text": "input plug-in that says ok I need to read data from some Network server so I need to set up a TCP connection so as",
    "start": "930840",
    "end": "937170"
  },
  {
    "text": "part of that initialization list input plug and says ok I'm going to set up the CCP socket and we're start reading data",
    "start": "937170",
    "end": "945410"
  },
  {
    "text": "and then what happens remember flume bid is running as a single thread right and",
    "start": "945410",
    "end": "950880"
  },
  {
    "text": "did I can't mention the word scheduler and event loop there so it kind of gives you a hint so everything just just stops",
    "start": "950880",
    "end": "956910"
  },
  {
    "text": "right in fluent it's like hey I got other stuff to do I got other plugins to initialize what's what's the process so",
    "start": "956910",
    "end": "963510"
  },
  {
    "text": "what Foom bid does is actually it invokes this age-old flow control of",
    "start": "963510",
    "end": "971090"
  },
  {
    "text": "co-routines right and this co-routines essentially allows for a cooperative",
    "start": "971090",
    "end": "976650"
  },
  {
    "text": "passing of execution between the plugin and the engine itself so what the input",
    "start": "976650",
    "end": "982680"
  },
  {
    "text": "plug-in does it says ok I want to set up the socket and then hey fluent bit engine you go let me know when you see data coming",
    "start": "982680",
    "end": "989130"
  },
  {
    "text": "through it when you know data flows bloomington says I'll take care of it and goes on and starts initializing the",
    "start": "989130",
    "end": "994800"
  },
  {
    "text": "rest of the plugins and suddenly hey I got some input I got some data that's",
    "start": "994800",
    "end": "1001790"
  },
  {
    "text": "coming through the socket the sockets ready to be read so it then resumes control back to the importer plug-in and",
    "start": "1001790",
    "end": "1008120"
  },
  {
    "text": "says you are ready to read and it then import plugin says thank you and it says okay I'm gonna start reading record so",
    "start": "1008120",
    "end": "1014510"
  },
  {
    "text": "there's this really nice cooperative flow between the engine on the plugins now as the input plugin reads the data",
    "start": "1014510",
    "end": "1021760"
  },
  {
    "text": "it's just reading like you know the bytes in but internally it's represented",
    "start": "1021760",
    "end": "1028280"
  },
  {
    "text": "as a binary civilised like a message like its uses a message back for its",
    "start": "1028280",
    "end": "1034130"
  },
  {
    "text": "binary civilization act and craziness records and you can think of a record as a timestamp and like a key value pairs",
    "start": "1034130",
    "end": "1040459"
  },
  {
    "text": "of the message map right and it starts stacking up these records and increase this chunk of Records and then at a",
    "start": "1040460",
    "end": "1047810"
  },
  {
    "text": "certain point it says okay I got this chunk I'm going to tag this data send it on to the next stage the filtering does",
    "start": "1047810",
    "end": "1054800"
  },
  {
    "text": "the matching on this tag it says it goes through the list of filters it says okay this record I'm gonna append some data",
    "start": "1054800",
    "end": "1060680"
  },
  {
    "text": "and enrich it and the other records is like a door care watching get rid of you from there on and goes to the buffer and",
    "start": "1060680",
    "end": "1067780"
  },
  {
    "text": "you know it's stored in the buffer while this is all happening the event loop",
    "start": "1067780",
    "end": "1072920"
  },
  {
    "text": "kicks in and they have this flush interval which is configured the flesh becomes answers well all right time to",
    "start": "1072920",
    "end": "1078710"
  },
  {
    "text": "send the data on through we got a sense and the data out so form bit eternally",
    "start": "1078710",
    "end": "1084830"
  },
  {
    "text": "what it does is it creates these tasks for each of the input instances and says ok I'm going to create these tasks in my",
    "start": "1084830",
    "end": "1090290"
  },
  {
    "text": "event loop and we start flushing data out and again that same dance happens right for the output plugins with the",
    "start": "1090290",
    "end": "1096080"
  },
  {
    "text": "output plugins most of the time is network i/o out so it says ok it's time to time to send the data out so again we",
    "start": "1096080",
    "end": "1103880"
  },
  {
    "text": "have this cooperative dance between the engine and the plug and once the output the last thing that",
    "start": "1103880",
    "end": "1109930"
  },
  {
    "text": "the output plug-in does is when it sends the data it can actually respond back to the fluid engine saying hey everything",
    "start": "1109930",
    "end": "1116710"
  },
  {
    "text": "went well or something went wrong can you retry sending that pillar some people say okay I got that I'm",
    "start": "1116710",
    "end": "1123220"
  },
  {
    "text": "gonna retry sending that same payload through or error out and say you know what don't don't bother sending reason",
    "start": "1123220",
    "end": "1130240"
  },
  {
    "text": "in that data so that's kind of how the gist of how the flow of a you know a reading and",
    "start": "1130240",
    "end": "1137080"
  },
  {
    "text": "data and sending it all the way out and our go plug-in kind of fits in that same sort of space go and the C plugins",
    "start": "1137080",
    "end": "1144610"
  },
  {
    "text": "though for the output all right Jason's gonna cover the go ahead the go",
    "start": "1144610",
    "end": "1151150"
  },
  {
    "start": "1146000",
    "end": "1386000"
  },
  {
    "text": "interface side of things thanks all right so this is the fun part",
    "start": "1151150",
    "end": "1158050"
  },
  {
    "text": "for me so how does a bit interface with the go so flip it is a little bit as C",
    "start": "1158050",
    "end": "1165490"
  },
  {
    "text": "and we have some code where didn't go that we want to interact with fluent bit",
    "start": "1165490",
    "end": "1170880"
  },
  {
    "text": "you may be a winner of something known as C Co which is like the Interop capability between go and see so we're",
    "start": "1170880",
    "end": "1177760"
  },
  {
    "text": "gonna be using that but how exactly do we want to kind of call from C in to go",
    "start": "1177760",
    "end": "1183760"
  },
  {
    "text": "so that's gonna be handled by just you know regular dynamic linking so the C",
    "start": "1183760",
    "end": "1188770"
  },
  {
    "text": "program is gonna call DL open DL sim in order to you know call into the shared",
    "start": "1188770",
    "end": "1195580"
  },
  {
    "text": "object that we provide but you might be wondering like how does this dot Esso",
    "start": "1195580",
    "end": "1201010"
  },
  {
    "text": "like get created normally when I compile things with go I get a static binary so that one of the major selling points",
    "start": "1201010",
    "end": "1206890"
  },
  {
    "text": "would go is static binaries so how do we generate this dot s oh so there's this",
    "start": "1206890",
    "end": "1214290"
  },
  {
    "text": "flag that you can give the go compiler when you say go pill can say built mode and there's various options that you can",
    "start": "1214290",
    "end": "1221650"
  },
  {
    "text": "give that flag and the ones that you're probably familiar with or at least most people would be familiar with are archived and exe so archive and exe",
    "start": "1221650",
    "end": "1229740"
  },
  {
    "text": "archive will generate those a files that you have in your F undergo path pkg and then exe is just",
    "start": "1229740",
    "end": "1237650"
  },
  {
    "text": "kind like your normal belt boat for building a set executive all so an archive will get built when you're",
    "start": "1237650",
    "end": "1243860"
  },
  {
    "text": "building a package and exe will get built when you're building a main package so",
    "start": "1243860",
    "end": "1250460"
  },
  {
    "text": "those like that the regular modes some of the more esoteric ones are plugin so",
    "start": "1250460",
    "end": "1257150"
  },
  {
    "text": "you might be thinking plugin that sounds like what we want to use so plugin actually is used to generate a dynamic",
    "start": "1257150",
    "end": "1265550"
  },
  {
    "text": "linkable shared object of go code that is intended to be called from another go",
    "start": "1265550",
    "end": "1271790"
  },
  {
    "text": "process so it's not exactly what we're looking for we're looking to call into the go code from C so one thing that we",
    "start": "1271790",
    "end": "1280460"
  },
  {
    "text": "could choose here is a C archive what that will do is it'll allow us to call from C into the go code but it will",
    "start": "1280460",
    "end": "1287180"
  },
  {
    "text": "generate as a a a static archive so it's not exactly what we want so the one as",
    "start": "1287180",
    "end": "1292550"
  },
  {
    "text": "you can tell here that we want is C shared so that allow the C program to dynamically link against a shared object",
    "start": "1292550",
    "end": "1300260"
  },
  {
    "text": "that we compile so what does that look like so if you're in go and you want to",
    "start": "1300260",
    "end": "1306590"
  },
  {
    "text": "create one of these shared objects you just create a main package you say I",
    "start": "1306590",
    "end": "1311750"
  },
  {
    "text": "want to import C which is like a pseudo package to signify to the compiler you want to C go and then you just kind of",
    "start": "1311750",
    "end": "1318110"
  },
  {
    "text": "write your functions as you would normally and you just put this little comment above the function that just says I want to export this into C so",
    "start": "1318110",
    "end": "1325370"
  },
  {
    "text": "this is like the extern capability so it just makes it a global symbol in your symbol table and then you have to have a",
    "start": "1325370",
    "end": "1333830"
  },
  {
    "text": "maned at the bottom just kind of as boilerplate the compiler requires that so you just have to include that but",
    "start": "1333830",
    "end": "1340280"
  },
  {
    "text": "that's about it so you just say go build output plug-in do so and then build mode C shared and that will generate a plugin",
    "start": "1340280",
    "end": "1348020"
  },
  {
    "text": "so and if you use something like read off to just dump out the symbol table you can see there's the dynamic symbol",
    "start": "1348020",
    "end": "1354590"
  },
  {
    "text": "table has a symbol for my awesome function which is what we want we want to a symbol that we can link against from",
    "start": "1354590",
    "end": "1361700"
  },
  {
    "text": "our C program so that's what we wanted so that takes care of generating this",
    "start": "1361700",
    "end": "1366979"
  },
  {
    "text": "plugin SSO but you might also be wondering well C and go are entirely",
    "start": "1366979",
    "end": "1373789"
  },
  {
    "text": "different beasts like they have different memory layout for different types they have different calling",
    "start": "1373789",
    "end": "1379339"
  },
  {
    "text": "conventions like how do we like manage the differences between these two different languages so the first thing",
    "start": "1379339",
    "end": "1386960"
  },
  {
    "start": "1386000",
    "end": "1534000"
  },
  {
    "text": "is like calling conventions so C's callin convention is entirely different from gogo has its own special calling",
    "start": "1386960",
    "end": "1392539"
  },
  {
    "text": "convention so how do we minimize that different so the compiler actually just takes care of that for you when you",
    "start": "1392539",
    "end": "1398479"
  },
  {
    "text": "compile that dot SOF file in addition to the my awesome function symbol the",
    "start": "1398479",
    "end": "1404330"
  },
  {
    "text": "original go function is you know generated as well just not as an extern symbol and it's just my main dot my",
    "start": "1404330",
    "end": "1411229"
  },
  {
    "text": "awesome functions so that that's like your go function and then the function",
    "start": "1411229",
    "end": "1416389"
  },
  {
    "text": "that it's exposing to C is a function that follows the C calling convention and then knows how to follow the go",
    "start": "1416389",
    "end": "1423259"
  },
  {
    "text": "calling convention and just calls into your go code and handles kind of the mapping between those two worlds for you",
    "start": "1423259",
    "end": "1428779"
  },
  {
    "text": "so you don't have to worry about that what about memory layout for different types so and see you know like a char",
    "start": "1428779",
    "end": "1436070"
  },
  {
    "text": "star is different from a go string so how do we manage these differences so on the left hand side here you can see all",
    "start": "1436070",
    "end": "1442249"
  },
  {
    "text": "the types that you'd normally have in C and on the right hand side is how you represent those types and go so if you",
    "start": "1442249",
    "end": "1449269"
  },
  {
    "text": "want to refer to those types from go code void stars unsafe pointer char star is a pointer to C char so on and so",
    "start": "1449269",
    "end": "1456919"
  },
  {
    "text": "forth some of the interesting ones are like structs enums and unions you just say C struct and then an underscore or",
    "start": "1456919",
    "end": "1463820"
  },
  {
    "text": "followed by the name of the struct to kind of get a reference to that type and go and then the inverse going back into",
    "start": "1463820",
    "end": "1471919"
  },
  {
    "text": "C so if you want to refer to go types in C be when you compile your des Eaux",
    "start": "1471919",
    "end": "1478219"
  },
  {
    "text": "it'll actually give you a header file as well and that header file will contain definitions for all these types and so",
    "start": "1478219",
    "end": "1484519"
  },
  {
    "text": "you just kind of pound include that header file in your C code and then get all these types defined for you so",
    "start": "1484519",
    "end": "1490110"
  },
  {
    "text": "things like strings or representative juices go string goes slice go in so go slice is just kind of like this",
    "start": "1490110",
    "end": "1496890"
  },
  {
    "text": "slice header so it doesn't actually have the type information for your slice of bite so it all know it's a slice but not",
    "start": "1496890",
    "end": "1502679"
  },
  {
    "text": "that it's a slice of bite but yeah most of these things are pretty straightforward and then seco provides",
    "start": "1502679",
    "end": "1509640"
  },
  {
    "text": "capability for conversion between different types so different memory layouts so the important ones are like",
    "start": "1509640",
    "end": "1516299"
  },
  {
    "text": "strings and bytes you want to be able to compare from like a see string to a go string and vice versa and same thing for",
    "start": "1516299",
    "end": "1522240"
  },
  {
    "text": "like bytes you want to be able convert from like a slice of byte which is a",
    "start": "1522240",
    "end": "1527580"
  },
  {
    "text": "slice header and an underlying array you want to be able to convert that into a bit of memory that so you can handle so",
    "start": "1527580",
    "end": "1535440"
  },
  {
    "start": "1534000",
    "end": "1571000"
  },
  {
    "text": "what about functions that have multiple return values that's not really something that C supports so say we had",
    "start": "1535440",
    "end": "1541049"
  },
  {
    "text": "this function here they had multiple return values and you exported it what would the compiler generate for you so",
    "start": "1541049",
    "end": "1548549"
  },
  {
    "text": "in that header file that gets generated it'll generate these kind of struck definitions and these are just kind of a",
    "start": "1548549",
    "end": "1555750"
  },
  {
    "text": "composite type of all the different return types so you can access those from C and that's just what gets",
    "start": "1555750",
    "end": "1563130"
  },
  {
    "text": "returned from the function so that entire struct not appointed to it but the entire strip itself will be on the",
    "start": "1563130",
    "end": "1568590"
  },
  {
    "text": "stack and get returned to you so how do you write a fluent bit go plug-in itself",
    "start": "1568590",
    "end": "1576210"
  },
  {
    "start": "1571000",
    "end": "1717000"
  },
  {
    "text": "so I just kind of to explain the generic interface between C and go for what we want to do so what are the specifics",
    "start": "1576210",
    "end": "1582539"
  },
  {
    "text": "about like using flip it using this interface so there's only four functions that you have to implement and these",
    "start": "1582539",
    "end": "1589950"
  },
  {
    "text": "four functions are register and it's flush CTX and exit and we'll go into",
    "start": "1589950",
    "end": "1595289"
  },
  {
    "text": "kind of the details of these register there's some helper functions an output",
    "start": "1595289",
    "end": "1600809"
  },
  {
    "text": "package that you can use and basically the job of the register function is to allow the go code to communicate back to",
    "start": "1600809",
    "end": "1607500"
  },
  {
    "text": "the C code information about the plugins so in this case we're setting the plugins name and a description for the",
    "start": "1607500",
    "end": "1613890"
  },
  {
    "text": "plugin the in its said that so the register gets called once for per shared objects",
    "start": "1613890",
    "end": "1621220"
  },
  {
    "text": "so you kind of think of it as global for your plugin the in it however is gets",
    "start": "1621220",
    "end": "1626630"
  },
  {
    "text": "called once per instance so if you can figure it like say five different instances of syslog output plugins then",
    "start": "1626630",
    "end": "1633260"
  },
  {
    "text": "this will get called five different times and in this function you typically read from the config so there's this a",
    "start": "1633260",
    "end": "1640519"
  },
  {
    "text": "fop plugin config key so you can just read whatever key you want out of the config and then the important bit here",
    "start": "1640519",
    "end": "1647419"
  },
  {
    "text": "is to set the context so you call FL be plug-in set context and you can set any arbitrary like go value as the context",
    "start": "1647419",
    "end": "1654320"
  },
  {
    "text": "for that instance and that's important later on when we're flushing to be able to disambiguate implications of the flush so this is what the flush looks",
    "start": "1654320",
    "end": "1662090"
  },
  {
    "text": "like so the first thing we do is kind of reconstitute that context and we just do",
    "start": "1662090",
    "end": "1667309"
  },
  {
    "text": "that by making call int this helper function called get context and then we have to type a certain because it loses",
    "start": "1667309",
    "end": "1672799"
  },
  {
    "text": "its static type information it still has its runtime type information but we need to reconstitute it as like a original",
    "start": "1672799",
    "end": "1679970"
  },
  {
    "text": "type so in this case it was a string so we type assert it to be a string and then there's other helper functions that",
    "start": "1679970",
    "end": "1685880"
  },
  {
    "text": "allow us to then decode the data from fluent bits all the messages that are in",
    "start": "1685880",
    "end": "1691100"
  },
  {
    "text": "code would be a message back we can DK decode those and handle them kind of one by one in this case we're just kind of",
    "start": "1691100",
    "end": "1697880"
  },
  {
    "text": "logging out but the data and then at the end here as Lauren mentioned before you",
    "start": "1697880",
    "end": "1703010"
  },
  {
    "text": "can kind of return and one of three values either everything was okay or you need to retry or there's an error and I",
    "start": "1703010",
    "end": "1710630"
  },
  {
    "text": "finally just kind of like an exit tear down clean up function that you can implement so you can put whatever you",
    "start": "1710630",
    "end": "1715760"
  },
  {
    "text": "need to do in there so yeah that's pretty much it for the go interface overflowing bit I'm gonna hand it back",
    "start": "1715760",
    "end": "1722090"
  },
  {
    "start": "1717000",
    "end": "1885000"
  },
  {
    "text": "off to the warm oh all right so moving forward so what",
    "start": "1722090",
    "end": "1730889"
  },
  {
    "text": "we kind of explained to you was our use case where we needed to output stuff in RC 502 for syslog format right",
    "start": "1730889",
    "end": "1738239"
  },
  {
    "text": "and we worked working with the flume bit teams like eduardo and we were able to",
    "start": "1738239",
    "end": "1746369"
  },
  {
    "text": "add some contribute some value in the in the sense that right now Jason I mention",
    "start": "1746369",
    "end": "1753539"
  },
  {
    "text": "about multiple instances so you can have now multiple instances of your syslog plug-in in the configuration file and",
    "start": "1753539",
    "end": "1760109"
  },
  {
    "text": "you can and actually like sense to different destinations for example right",
    "start": "1760109",
    "end": "1765440"
  },
  {
    "text": "but what else can we do to better support this goal plugins right let's",
    "start": "1765440",
    "end": "1771299"
  },
  {
    "text": "say say you guys love this talk you know you tweet about it and then you like leave this room and say I'm gonna build",
    "start": "1771299",
    "end": "1776999"
  },
  {
    "text": "some gold plugins for four flown bit I want to build multiple different go plugins because that's what I need I",
    "start": "1776999",
    "end": "1782159"
  },
  {
    "text": "need to send 600 552 for or my awesome protocol or you know whatever she have",
    "start": "1782159",
    "end": "1787349"
  },
  {
    "text": "multiple different go plugins you follow this process and then you will kind of",
    "start": "1787349",
    "end": "1793159"
  },
  {
    "text": "realize that hey this thing was supposed to be lightweight is no longer as",
    "start": "1793159",
    "end": "1800009"
  },
  {
    "text": "lightweight as it seems right because as you can see each time you build this go plug and as the see more you have",
    "start": "1800009",
    "end": "1806519"
  },
  {
    "text": "the entire go runtime kind of packaged with it right so we had an idea of like",
    "start": "1806519",
    "end": "1812399"
  },
  {
    "text": "improving this in the future so you just to go back to the go build modes you",
    "start": "1812399",
    "end": "1817499"
  },
  {
    "text": "have this plug-in and the C archive so let's let's take a look at that how we can achieve that so one of the ideas we",
    "start": "1817499",
    "end": "1823139"
  },
  {
    "text": "had was having a go plug-in manager that's built with the C archive build mode that way you can statically link it",
    "start": "1823139",
    "end": "1828659"
  },
  {
    "text": "with foam bit and that contains to go wrong time and then that plug-in manager then loads go plugins that are literally",
    "start": "1828659",
    "end": "1836489"
  },
  {
    "text": "built with the plugin build mode and that's as simple and clean you don't have to worry too much about the C go",
    "start": "1836489",
    "end": "1841919"
  },
  {
    "text": "set of things that's just one idea we had for moving forward and improving",
    "start": "1841919",
    "end": "1847159"
  },
  {
    "text": "plug-in management another idea we had was establishing a version a bi or",
    "start": "1847159",
    "end": "1852509"
  },
  {
    "text": "application binary and the context for example that if the pass in requires a certain way the struct is",
    "start": "1852509",
    "end": "1859780"
  },
  {
    "text": "you know defined so if we update fluent bit to have anything more than your",
    "start": "1859780",
    "end": "1865490"
  },
  {
    "text": "plugin cannot goes off scope so establishing a version API allows you maybe the plugins during registration",
    "start": "1865490",
    "end": "1871100"
  },
  {
    "text": "time would say okay I conform with a bi version 1.2 and flume is like",
    "start": "1871100",
    "end": "1878030"
  },
  {
    "text": "alright you're good to go so that was another thing establishing a version API so that nobody breaks in the future is",
    "start": "1878030",
    "end": "1884030"
  },
  {
    "text": "flowing bit revs versions the next thing is again this is only for output plugins",
    "start": "1884030",
    "end": "1889400"
  },
  {
    "start": "1885000",
    "end": "1968000"
  },
  {
    "text": "so we have input and filter plugins that can be also implemented in go in fact there's a PR opened for supporting",
    "start": "1889400",
    "end": "1896570"
  },
  {
    "text": "filter go p-- plugins so thank you for that whoever you are",
    "start": "1896570",
    "end": "1903910"
  },
  {
    "text": "then nothing well we have metrics and logging so go so for bit actually",
    "start": "1903910",
    "end": "1908990"
  },
  {
    "text": "exposes a metric standpoint and that allows you to get metrics of the records flowing through your system while JSON",
    "start": "1908990",
    "end": "1915260"
  },
  {
    "text": "or you know Prometheus or form right and it tells you like all the records that goes in your input and they have been",
    "start": "1915260",
    "end": "1920930"
  },
  {
    "text": "filtered out and then have been successfully sent this is what's great for your for the C plugins that are",
    "start": "1920930",
    "end": "1927020"
  },
  {
    "text": "statically linked in to embed so one of the ideas we had to is to support that",
    "start": "1927020",
    "end": "1932330"
  },
  {
    "text": "for go plugins as well right and all of this right now is kind",
    "start": "1932330",
    "end": "1938960"
  },
  {
    "text": "of work done in this form bid go repo again we're at a very early stage of us doing this go support for fluent bit so",
    "start": "1938960",
    "end": "1946520"
  },
  {
    "text": "if you are interested in this space we want you to join the flung bit slack channel aren't fluent all I think it's",
    "start": "1946520",
    "end": "1953750"
  },
  {
    "text": "the slack domain and make issues and PRS and contribute to fluent bit go Eduardo",
    "start": "1953750",
    "end": "1960620"
  },
  {
    "text": "has been very open and getting these PRS through and improving the ecosystem so",
    "start": "1960620",
    "end": "1967210"
  },
  {
    "text": "yeah that's about it thank you very much [Applause]",
    "start": "1967210",
    "end": "1975159"
  },
  {
    "start": "1968000",
    "end": "2243000"
  },
  {
    "text": "are there any questions thanks for the",
    "start": "1978240",
    "end": "1984250"
  },
  {
    "text": "talk very interesting I have a question about what go gives you because I would",
    "start": "1984250",
    "end": "1991150"
  },
  {
    "text": "kind of a cue that what you showed while it's very very interesting I wouldn't call it really go code because use the",
    "start": "1991150",
    "end": "1996670"
  },
  {
    "text": "left to deal with these types and the conversion and so on so I'm assuming that you maybe you could talk a little bit about what you Waco actually helps",
    "start": "1996670",
    "end": "2004680"
  },
  {
    "text": "you where it makes it simpler to to use go instead of writing the pregnancy",
    "start": "2004680",
    "end": "2010580"
  },
  {
    "text": "right yeah so we try to hit handle most",
    "start": "2010580",
    "end": "2016350"
  },
  {
    "text": "of the complexity of like dealing with see types in the interface and these kind of like helper functions that we",
    "start": "2016350",
    "end": "2021870"
  },
  {
    "text": "provide so ideally like as we advance like the the package will provide most",
    "start": "2021870",
    "end": "2027090"
  },
  {
    "text": "functionality that a normal go programmer would want just using these helper functions so you just call it",
    "start": "2027090",
    "end": "2032310"
  },
  {
    "text": "those helper functions and they kind of hide all that complexity behind them as far as like what like it gives you like",
    "start": "2032310",
    "end": "2039150"
  },
  {
    "text": "from our perspective like we have really robust implementations of network protocols and different libraries that",
    "start": "2039150",
    "end": "2046380"
  },
  {
    "text": "we developed over the years and go and be just being able to leverage that and the huge ecosystem of go you know",
    "start": "2046380",
    "end": "2053760"
  },
  {
    "text": "third-party packages and the standard library like it's just a wealth of treasure as far as like you know how",
    "start": "2053760",
    "end": "2060330"
  },
  {
    "text": "much there is out there for you to take advantage of whereas and see you kinda have to bring your own stuff and it's I",
    "start": "2060330",
    "end": "2068940"
  },
  {
    "text": "mean if it's something that you're familiar with that that's kind of like your domain then you know you have that capability to you see as well but having",
    "start": "2068940",
    "end": "2075870"
  },
  {
    "text": "a lot of go experience we feel like you know yeah I think one of the requirements for product was also time",
    "start": "2075870",
    "end": "2081570"
  },
  {
    "text": "to market and since we all very familiar with go I mean we start like we were a favorite doing the C thing is just in",
    "start": "2081570",
    "end": "2088139"
  },
  {
    "text": "order to get the stuff out you know get it out we iterate iterate we were able to move faster with some bit of writing",
    "start": "2088140",
    "end": "2095460"
  },
  {
    "text": "go plugins and we did that and then we were like oh this is great how can we improve on it and it's kinda what kind",
    "start": "2095460",
    "end": "2100800"
  },
  {
    "text": "of that also did you try hiring people cocaine right and see anymore clock and thank",
    "start": "2100800",
    "end": "2113040"
  },
  {
    "text": "you it's more of a go question I guess do you know when the garbage collector will be called in go when you run it",
    "start": "2113040",
    "end": "2119400"
  },
  {
    "text": "this way and also did you measure any overhead in running go code instead of see that's a good one that's a good",
    "start": "2119400",
    "end": "2130020"
  },
  {
    "text": "question so when when the garbage",
    "start": "2130020",
    "end": "2135840"
  },
  {
    "text": "collector is invoked was your first party question so like if you wanted to invoke that you can obviously do that",
    "start": "2135840",
    "end": "2141180"
  },
  {
    "text": "manually it just kind of whenever the run time decides to run so whenever you",
    "start": "2141180",
    "end": "2147780"
  },
  {
    "text": "call in to go code if you ever look at the output of the compiler it has kind of hooks into the runtime where it has",
    "start": "2147780",
    "end": "2153780"
  },
  {
    "text": "an opportunity to run the garbage collector so I'm not really familiar with the details of like when it might",
    "start": "2153780",
    "end": "2159900"
  },
  {
    "text": "run but they has opportunity to run when you call us with a go code and then was the second part of your question",
    "start": "2159900",
    "end": "2166220"
  },
  {
    "text": "overhead overhead so the major overhead that we've ran into is when you have multiple types of go plugins dynamically",
    "start": "2166220",
    "end": "2174780"
  },
  {
    "text": "linked at the same time you have a duplication of they go runtime in every single plug-in which is far from optimal",
    "start": "2174780",
    "end": "2180810"
  },
  {
    "text": "so that's kind of like what we're working on now is improving that to where you don't have any of that overhead and in the experiments of Iran",
    "start": "2180810",
    "end": "2187050"
  },
  {
    "text": "which is having a single go runtime and calling into the plugins directly it's the same function call overhead they",
    "start": "2187050",
    "end": "2192570"
  },
  {
    "text": "have normally and go so it's no additional",
    "start": "2192570",
    "end": "2196549"
  },
  {
    "text": "hi great talk did you consider file beets which is",
    "start": "2204900",
    "end": "2210609"
  },
  {
    "text": "also written and go for your sending of files which is it's an elastic project",
    "start": "2210609",
    "end": "2217799"
  },
  {
    "text": "well what was the technology name again doctor tool yes it's the beets project for me from your elastic and there's a",
    "start": "2217799",
    "end": "2223900"
  },
  {
    "text": "file beets no we at least haven't come across the beets project but thank you",
    "start": "2223900",
    "end": "2229180"
  },
  {
    "text": "for that else anything else okay so",
    "start": "2229180",
    "end": "2238150"
  },
  {
    "text": "thank you again for great art [Music] [Applause]",
    "start": "2238150",
    "end": "2245449"
  }
]