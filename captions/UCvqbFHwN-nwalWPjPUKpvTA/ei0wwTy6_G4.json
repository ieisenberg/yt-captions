[
  {
    "text": "hi well nice to be here great to see so many people here I thought it was just going to be me and YouTube but um uh",
    "start": "880",
    "end": "8240"
  },
  {
    "text": "you're all the the hardcore people who are not going to leave until everything's done which is great hope you've been having a great Cube conon",
    "start": "8240",
    "end": "13759"
  },
  {
    "text": "It's been a it's been a really really nice experience for me um bunch of people ask me why I'm giving",
    "start": "13759",
    "end": "20080"
  },
  {
    "text": "a talk about object storage it's you know it's um like everyone else I've submitted",
    "start": "20080",
    "end": "26359"
  },
  {
    "text": "talks to cucon for a while and they've all been rejected and sometimes given that reach and sometimes I um haven't",
    "start": "26359",
    "end": "32279"
  },
  {
    "text": "but anyway this time I thought well I'm just going to submit some you know a fun talk that I want to do because um that",
    "start": "32279",
    "end": "37879"
  },
  {
    "text": "is unexpected um and is about the some of the things that have been really interesting me and that I think that you",
    "start": "37879",
    "end": "44640"
  },
  {
    "text": "know maybe maybe other people can learn about too and understand about so um you know object storage I think is actually",
    "start": "44640",
    "end": "50840"
  },
  {
    "text": "one of the most exciting kind of areas in Cloud native right now and I'll explain why anyway uh I'm Justin KAC I'm",
    "start": "50840",
    "end": "58120"
  },
  {
    "text": "the CTO at Docker um I've been working at Docker for a long time we use a lot of object storage at Docker we have this",
    "start": "58120",
    "end": "64158"
  },
  {
    "text": "thing called Docker Hub and it's a it's uses a very large amount of object storage so it's something that um you",
    "start": "64159",
    "end": "69920"
  },
  {
    "text": "know we care about um but we also um I think there's a lot of other lessons from object storage um I think it can",
    "start": "69920",
    "end": "77360"
  },
  {
    "text": "teach us a lot about what cloud native infrastructure looks like and why you know some you know it's one of those",
    "start": "77360",
    "end": "83680"
  },
  {
    "text": "things that actually um is really kind of foundational and kind of interesting in the in the way the user experience",
    "start": "83680",
    "end": "90159"
  },
  {
    "text": "and the way you can use it um Amazon S3 was my first experience of the cloud I think it was many people it was the",
    "start": "90159",
    "end": "95759"
  },
  {
    "text": "first cloud service that Amazon launched back in 2006 um and I remember thinking this",
    "start": "95759",
    "end": "101119"
  },
  {
    "text": "thing's kind of cool um and then bringing it in as Shadow it into a",
    "start": "101119",
    "end": "106680"
  },
  {
    "text": "company I was working in and being told off for not using official Amazon servers and using my own private account",
    "start": "106680",
    "end": "112200"
  },
  {
    "text": "but it's like well get get used to provisioning this stuff we're going to need more of this um and there's a whole",
    "start": "112200",
    "end": "118920"
  },
  {
    "text": "lot of new stuff going on that I'm going to talk about like it's actually like this year has been actually like the",
    "start": "118920",
    "end": "124840"
  },
  {
    "text": "most exciting year for object storage since 2006 I'd say so um there's",
    "start": "124840",
    "end": "129920"
  },
  {
    "text": "actually an awful lot going on like most of my talks I'm going to start with a bit of History I I like",
    "start": "129920",
    "end": "137519"
  },
  {
    "text": "understanding things through the view of how how we got here um and the brief for",
    "start": "137519",
    "end": "144440"
  },
  {
    "text": "Amazon S3 was um maloc for the internet was what Jeff Bas asked for and it's",
    "start": "144440",
    "end": "151760"
  },
  {
    "text": "kind of weird but it's kind of catchy as well and it's kind of nice they didn't anoun this at the time it was in a it's",
    "start": "151760",
    "end": "157879"
  },
  {
    "text": "it was published in some Amazon post much more recently um um but the idea was just you know you",
    "start": "157879",
    "end": "165879"
  },
  {
    "text": "can allocate something and store it on the internet and it's there and um then",
    "start": "165879",
    "end": "171239"
  },
  {
    "text": "later maybe you can free it again or something but it's like that kind of idea of like it's it's a really really",
    "start": "171239",
    "end": "176560"
  },
  {
    "text": "simple primitive that you can build other stuff on it's not the kind of core of anything um but it scales out and it",
    "start": "176560",
    "end": "184640"
  },
  {
    "text": "you know it works for everyone it's like just basic infrastructure that absolutely every application will use",
    "start": "184640",
    "end": "191080"
  },
  {
    "text": "was the idea um and that's kind of starting to you know it's really starting to pan out this was the announcement it's the",
    "start": "191080",
    "end": "199599"
  },
  {
    "text": "page is still up it's a very short announcement compared to the um announcements Amazon makes nowadays um",
    "start": "199599",
    "end": "206720"
  },
  {
    "text": "and it kind of hence that this was you know something they used internally for running their",
    "start": "206720",
    "end": "212480"
  },
  {
    "text": "websites um and I think for many many years that was one of the biggest use",
    "start": "212480",
    "end": "217720"
  },
  {
    "text": "cases of S3 was people running websites on it um it kind of made sense but again we we're going to talk about the kind of",
    "start": "217720",
    "end": "224319"
  },
  {
    "text": "applications people are building on on object storage",
    "start": "224319",
    "end": "229480"
  },
  {
    "text": "now um just you know what is an object store exactly it's roughly it's it's a",
    "start": "229480",
    "end": "236079"
  },
  {
    "text": "key value store with an HTTP API you can you have names which look a bit like",
    "start": "236079",
    "end": "241879"
  },
  {
    "text": "file paths but have weirdly different properties and then you can store things in them up to sort of typically about 5",
    "start": "241879",
    "end": "248879"
  },
  {
    "text": "terabytes or so uh and there's some listing functionality that's you know",
    "start": "248879",
    "end": "255440"
  },
  {
    "text": "um mostly people have copied the Amazon implementation you know interface not",
    "start": "255440",
    "end": "262680"
  },
  {
    "text": "entirely like a you has their own thing and Oracle has a couple of different things you know but there's a it's",
    "start": "262680",
    "end": "269199"
  },
  {
    "text": "become a kind of day facto standard there's lots of Open Source implementations like minio is the best known they're um they've got standard",
    "start": "269199",
    "end": "276000"
  },
  {
    "text": "over there um uh and they're doing lots of interesting things so they're you know they're one of the largest open",
    "start": "276000",
    "end": "281160"
  },
  {
    "text": "source implementations that was actually implemented I think by some of the people who worked on the Amazon",
    "start": "281160",
    "end": "286199"
  },
  {
    "text": "implementation um there's some other constraints it's not a file system you can only update",
    "start": "286199",
    "end": "292320"
  },
  {
    "text": "objects all at once um so it's very restrictive um but that's kind of um",
    "start": "292320",
    "end": "300320"
  },
  {
    "text": "you know why it's restrictive is like actually because the kind of capabilities and design requirements are",
    "start": "300320",
    "end": "307520"
  },
  {
    "text": "just kind of very very very um I mean they're kind of you know there are 11",
    "start": "307520",
    "end": "313039"
  },
  {
    "text": "Nines in that um durability statement that's a lot of you know that's a lot of",
    "start": "313039",
    "end": "318639"
  },
  {
    "text": "um a lot of engineering work has to go into something that's going to have 11 nines of durability um you know I think",
    "start": "318639",
    "end": "326440"
  },
  {
    "text": "that you've got to really think about like how how simple can you make the service how um how much can you verify",
    "start": "326440",
    "end": "334000"
  },
  {
    "text": "that it's not got bugs in and all those things and I know that um you know the implementations out there have you know",
    "start": "334000",
    "end": "340560"
  },
  {
    "text": "have done a lot of work and that that Simplicity and scaling I mean 2080",
    "start": "340560",
    "end": "346039"
  },
  {
    "text": "trillion objects stored in um Amazon S3 alone let alone all the other providers who have these storage interfaces like",
    "start": "346039",
    "end": "352639"
  },
  {
    "text": "this is something that's really diff different from the kind of traditional",
    "start": "352639",
    "end": "358080"
  },
  {
    "text": "sort of file system use cases is um and this is really I think what you know Cloud native is about this kind of",
    "start": "358080",
    "end": "365240"
  },
  {
    "text": "infinite scale out never have to worry about um something you know running out of space not working like you just you",
    "start": "365240",
    "end": "372560"
  },
  {
    "text": "can just put things in it it's cheap and it's simple um and you know you can",
    "start": "372560",
    "end": "378120"
  },
  {
    "text": "write a really simple program that uses it and that's really quite um really quite powerful and I think that this the",
    "start": "378120",
    "end": "384680"
  },
  {
    "text": "simp you know you having simple Primitives allows you to really invest the effort in making them absolutely",
    "start": "384680",
    "end": "391400"
  },
  {
    "text": "100% reliable um or 99.999999% reliable um and um you know",
    "start": "391400",
    "end": "399000"
  },
  {
    "text": "that gives you the assurance that you can you can safely build applications on this and and so many people have have",
    "start": "399000",
    "end": "406000"
  },
  {
    "text": "done that um next part we're going to talk",
    "start": "406000",
    "end": "411440"
  },
  {
    "text": "about how to use object stores and like the ways that people use them um and",
    "start": "411440",
    "end": "418479"
  },
  {
    "text": "what's weird about them what's normal about them um the performance characteristics are",
    "start": "418479",
    "end": "425400"
  },
  {
    "text": "kind of odd if you're used to kind of you know traditional file system things like that there's a lot of latency to an",
    "start": "425400",
    "end": "431440"
  },
  {
    "text": "object store some of it's just going over the network but a lot of it's also to do with that um reliability thing and",
    "start": "431440",
    "end": "439000"
  },
  {
    "text": "availability like the data has to be replicated out to multiple locations every time you write um and when you",
    "start": "439000",
    "end": "447599"
  },
  {
    "text": "read you got to find you know there's a there's obviously a huge amount of data you've got different storage tiers and",
    "start": "447599",
    "end": "453120"
  },
  {
    "text": "you've got different you know different amounts of caching and different amounts of um you know kind of um scale in terms",
    "start": "453120",
    "end": "461080"
  },
  {
    "text": "of like hotpots and so on so there's a lot of work that's going behind the scenes which gives you latency just kind",
    "start": "461080",
    "end": "468479"
  },
  {
    "text": "of in addition to the network latency um there's yeah as I said there's Dynamic usage space scaling so",
    "start": "468479",
    "end": "474479"
  },
  {
    "text": "that if you um you know if you're using a particular part of a a objects store",
    "start": "474479",
    "end": "480159"
  },
  {
    "text": "more or more then um more more servers will be there you know scaling out to to",
    "start": "480159",
    "end": "486759"
  },
  {
    "text": "provide the bandwidth the total throughput um in general is like is",
    "start": "486759",
    "end": "492919"
  },
  {
    "text": "extremely high I mean again using Amazon example you can get 5 gbits on a single",
    "start": "492919",
    "end": "498520"
  },
  {
    "text": "connection to S3 um but you can run as many connections as you like and you can saturate you know 100 Gig ethernet",
    "start": "498520",
    "end": "506000"
  },
  {
    "text": "connection on your Cloud machine for on a you know to a bucket and then you can then but",
    "start": "506000",
    "end": "513279"
  },
  {
    "text": "you can also have like thousands of machines accessing at the same time so it's a really you know there's really high scale High parallelism high",
    "start": "513279",
    "end": "520479"
  },
  {
    "text": "throughput but you've got this High latency and and particularly we'll talk",
    "start": "520479",
    "end": "526399"
  },
  {
    "text": "about this with some of the workload characteristics of things people are building thinking about like you know",
    "start": "526399",
    "end": "532320"
  },
  {
    "text": "the latency and the fact that you don't want to do lots of with with high latency you don't want to do lots of",
    "start": "532320",
    "end": "537519"
  },
  {
    "text": "tiny sequential rights you want to do you know reasonably reasonably large",
    "start": "537519",
    "end": "542680"
  },
  {
    "text": "size rights to to kind of overcome that latency um cost is something that's kind",
    "start": "542680",
    "end": "551000"
  },
  {
    "text": "of complicated depends who you know depends who your cloud provider is what their model is or whether you're self",
    "start": "551000",
    "end": "557240"
  },
  {
    "text": "hosting with or using you know self hosting right minio you've got different cost characteristics but roughly you do",
    "start": "557240",
    "end": "564160"
  },
  {
    "text": "have to think about bandwidth um ESS bandwidth you know if you're serving",
    "start": "564160",
    "end": "569640"
  },
  {
    "text": "from an object store to the internet can be very large um but there's cloudflower",
    "start": "569640",
    "end": "574880"
  },
  {
    "text": "R2 is an interesting service for example because it um they don't charge egress bandwidth so um for a lot of",
    "start": "574880",
    "end": "581399"
  },
  {
    "text": "applications that's really you know it's a lot of the um cost um storage costs",
    "start": "581399",
    "end": "588160"
  },
  {
    "text": "depend again on you know the latency and the tiered storage models that the caber",
    "start": "588160",
    "end": "593760"
  },
  {
    "text": "offers um because um object stores are",
    "start": "593760",
    "end": "598800"
  },
  {
    "text": "generally rep replicated across availability zones um you effectively get between replication Z in between",
    "start": "598800",
    "end": "606640"
  },
  {
    "text": "availability Zone replication for free we'll talk about again again a bit later with some examples um and you know but you've got",
    "start": "606640",
    "end": "614279"
  },
  {
    "text": "a you've got slightly weird cost models that you have to kind of Bear in mind with how you're using it but generally",
    "start": "614279",
    "end": "620000"
  },
  {
    "text": "um object storage you can generally treat as being pretty cheap in general it's not usually um the dominating cost",
    "start": "620000",
    "end": "627320"
  },
  {
    "text": "for most applications um so it's pretty exciting I want to talk a whole bunch",
    "start": "627320",
    "end": "633800"
  },
  {
    "text": "about concurrent updates because um you know when S3 was originally launched you",
    "start": "633800",
    "end": "639399"
  },
  {
    "text": "know the example use case was websites and that was kind of relatively straightforward um usually for updating",
    "start": "639399",
    "end": "646000"
  },
  {
    "text": "website there's a single deployment pipeline so you didn't have to worry about multiple updates at the same time",
    "start": "646000",
    "end": "652000"
  },
  {
    "text": "concurrency um so it was a relatively straightforward kind of process you just you know write some",
    "start": "652000",
    "end": "659519"
  },
  {
    "text": "write write new write new update the website kind of Page by Page and that would be okay mostly um so people",
    "start": "659519",
    "end": "667399"
  },
  {
    "text": "weren't very concerned about con current updates but as people started building more applications on top of object",
    "start": "667399",
    "end": "673240"
  },
  {
    "text": "storage got more um they got more issues around this um one thing that we use",
    "start": "673240",
    "end": "680560"
  },
  {
    "text": "heavily in you know in the in oci Registries is um content addressed",
    "start": "680560",
    "end": "685600"
  },
  {
    "text": "storage um you can if if every piece of",
    "start": "685600",
    "end": "691639"
  },
  {
    "text": "storage is just a that named by the hash of the content um concurrency becomes",
    "start": "691639",
    "end": "696680"
  },
  {
    "text": "much easier because like either the either the thing is already there and like you've got hash ABCDE um and that's",
    "start": "696680",
    "end": "704560"
  },
  {
    "text": "written and that's there there's some there's some complicated issues with the registry stuff about permissions but",
    "start": "704560",
    "end": "710680"
  },
  {
    "text": "that's another piece but either it's there or you need to write it um there",
    "start": "710680",
    "end": "716160"
  },
  {
    "text": "are even ways um at least on AWS you can can actually um generate signed signed URLs that only give you",
    "start": "716160",
    "end": "723360"
  },
  {
    "text": "the ability to write to a particular loation with with content that matches the hash um which is kind of cool so you",
    "start": "723360",
    "end": "730279"
  },
  {
    "text": "can actually just say like you can write the content with this CH 256 hash to",
    "start": "730279",
    "end": "735680"
  },
  {
    "text": "this file name that has this 256 hash and here's a sign URL it doesn't give you any other permissions so you can't",
    "start": "735680",
    "end": "741880"
  },
  {
    "text": "write anything else um we can't actually we don't actually use that on oci for",
    "start": "741880",
    "end": "748279"
  },
  {
    "text": "complicated reasons um but um so that's this solves some",
    "start": "748279",
    "end": "753519"
  },
  {
    "text": "concurrency problems with some you know with with a lot of the um base storage",
    "start": "753519",
    "end": "759120"
  },
  {
    "text": "for Registries um but it doesn't deal with things like actually updating tags",
    "start": "759120",
    "end": "764680"
  },
  {
    "text": "concurrently um then um a lot of the strategy that",
    "start": "764680",
    "end": "771920"
  },
  {
    "text": "people used for concurrent updates was to use some sort use a database to manage concurrency on top um which is",
    "start": "771920",
    "end": "779600"
  },
  {
    "text": "you know effectively what we do on doab at the moment um but a lot of people use Dynamo DB there was um sort of standard",
    "start": "779600",
    "end": "788240"
  },
  {
    "text": "process of using Dynamo DB on Amazon for example as a way of managing concurrency",
    "start": "788240",
    "end": "793800"
  },
  {
    "text": "and dealing with locking which was kind of hacky a bit worked um but recently um there's a new",
    "start": "793800",
    "end": "802800"
  },
  {
    "text": "primitive been added to a lot of um a lot of the object storage um",
    "start": "802800",
    "end": "808079"
  },
  {
    "text": "implementations um Cloud had it for some time uh Mino I",
    "start": "808079",
    "end": "814279"
  },
  {
    "text": "got them thank you for uh not accepting my pull request but fixing the feature anyway um uh earlier this year and then",
    "start": "814279",
    "end": "821760"
  },
  {
    "text": "Amazon in August um added support for there so it's generally quite widely",
    "start": "821760",
    "end": "827160"
  },
  {
    "text": "spos now which is basically uh put put with if none match which effectiv is like create this object if it doesn't",
    "start": "827160",
    "end": "834680"
  },
  {
    "text": "already exist um which gives you a kind of mutual exclusion concurrency",
    "start": "834680",
    "end": "839800"
  },
  {
    "text": "primitive that you can use uh to actually have multiple applications trying to write something and if they",
    "start": "839800",
    "end": "846920"
  },
  {
    "text": "they either succeed um or they have to back off and retry you know the next um",
    "start": "846920",
    "end": "853160"
  },
  {
    "text": "retry retry another object and so you can really get that it's a a really good",
    "start": "853160",
    "end": "858480"
  },
  {
    "text": "concurrency control primitive that's now becoming very widely supported and you don't have to kind of use a database so",
    "start": "858480",
    "end": "863959"
  },
  {
    "text": "you can just use um the object store directly and we'll we'll we'll um a",
    "start": "863959",
    "end": "871600"
  },
  {
    "text": "whole bunch of people are using this for things I'll talk about in a minute um the the pattern that you can",
    "start": "871600",
    "end": "878720"
  },
  {
    "text": "do once you have this primitive um is really just a the simplest way of using",
    "start": "878720",
    "end": "884720"
  },
  {
    "text": "it is just create ordered numbered files 0000000000 1 002 and each time the an",
    "start": "884720",
    "end": "892000"
  },
  {
    "text": "application comes along it tries to put the next file in that sequence uh it either succeeds um and automically or",
    "start": "892000",
    "end": "900120"
  },
  {
    "text": "someone else has got in there first and it has to ret has to you know potentially re read the data that's been written by the other process um and",
    "start": "900120",
    "end": "907320"
  },
  {
    "text": "adjust what it's done and re retry This was um originally actually where I got",
    "start": "907320",
    "end": "912959"
  },
  {
    "text": "quite excited about this whole um building applications on Object Store with the Delta Lake paper um which so",
    "start": "912959",
    "end": "921000"
  },
  {
    "text": "Delta lake is a l Foundation project um that's uh basically the Bas of data",
    "start": "921000",
    "end": "927600"
  },
  {
    "text": "breaks is um um services and their paper is really",
    "start": "927600",
    "end": "933279"
  },
  {
    "text": "nice very well written really readable highly recommend reading it it it really it was it talks about you know these",
    "start": "933279",
    "end": "940360"
  },
  {
    "text": "Prim using these concurrency Primitives on object storage um and it was one of",
    "start": "940360",
    "end": "945720"
  },
  {
    "text": "the I read it a few years ago and it was like one of the first things that actually got me really um it's actually quite an old paper actually I didn't see",
    "start": "945720",
    "end": "951680"
  },
  {
    "text": "it at the time but it got me excited about like we can build database applications on object storage and like",
    "start": "951680",
    "end": "957440"
  },
  {
    "text": "this is and this is kind of cool um there's a nice blog post by Phil Ean",
    "start": "957440",
    "end": "963560"
  },
  {
    "text": "on um like which runs through basically building the bases of this in 500 lines",
    "start": "963560",
    "end": "969680"
  },
  {
    "text": "of go cod just to kind of show you how it's done as well which is kind of kind of nice um and this this ordered sequence",
    "start": "969680",
    "end": "977880"
  },
  {
    "text": "of files is basically you know in database technology is a log um which is",
    "start": "977880",
    "end": "984519"
  },
  {
    "text": "the basic primitive from which databases are are built um there's this great JCPS",
    "start": "984519",
    "end": "990480"
  },
  {
    "text": "article from a long time ago from um LinkedIn about um what you should know",
    "start": "990480",
    "end": "996360"
  },
  {
    "text": "about logs and um thinking about the log and and thinking about that as a as a",
    "start": "996360",
    "end": "1002199"
  },
  {
    "text": "primitive and essentially um you know a log is you know it's just an ordered set",
    "start": "1002199",
    "end": "1007560"
  },
  {
    "text": "of um you know an ordered set of files that has the changes that you're making",
    "start": "1007560",
    "end": "1012920"
  },
  {
    "text": "to your database um and you can build any data storage system from from the log it's the it's how things are built",
    "start": "1012920",
    "end": "1020199"
  },
  {
    "text": "internally yeah there's lots of things you might want to build on top in terms of indexes and all the rest of it and",
    "start": "1020199",
    "end": "1025918"
  },
  {
    "text": "terms of databases but it's the fundamental storage primitive and so",
    "start": "1025919",
    "end": "1031319"
  },
  {
    "text": "this has really given us a way to have you know a way of thinking about having logs on object storage um and using that",
    "start": "1031319",
    "end": "1038438"
  },
  {
    "text": "as a primitive to build um all sorts of you know applications that use data",
    "start": "1038439",
    "end": "1043839"
  },
  {
    "text": "databases whatever you want to call them so I'm going to talk about a bunch of the things that are being built that",
    "start": "1043839",
    "end": "1050280"
  },
  {
    "text": "I think are really um exciting worth learning from I say some of them are open source I've um and some of them are",
    "start": "1050280",
    "end": "1057640"
  },
  {
    "text": "not uh I actually think there's surprisingly few things being built in open source using this model so I'm kind",
    "start": "1057640",
    "end": "1064240"
  },
  {
    "text": "of um you know encouraging people to think about building more things and um",
    "start": "1064240",
    "end": "1071240"
  },
  {
    "text": "but so some of the examples are not open source but some of them are um as I said Delta Lake",
    "start": "1071240",
    "end": "1076799"
  },
  {
    "text": "was um the first one I came came across in the first one that was kind of published but actually all of the",
    "start": "1076799",
    "end": "1082640"
  },
  {
    "text": "analytics databases Snowflake and so on are built on object Stores um and really",
    "start": "1082640",
    "end": "1090080"
  },
  {
    "text": "particularly this year there's been the whole the kind of open format war in that area it's been kind of like I think",
    "start": "1090080",
    "end": "1098559"
  },
  {
    "text": "hasn't got much noce outside the analytics Community but everyone has decided that open standards are really",
    "start": "1098559",
    "end": "1104600"
  },
  {
    "text": "important here and everything is going to be interoperable um maybe one of the formats I'll win or maybe everyone will",
    "start": "1104600",
    "end": "1110640"
  },
  {
    "text": "support everything it's they're still kind of arguing but um all analytics databases are now essentially being",
    "start": "1110640",
    "end": "1117760"
  },
  {
    "text": "rebuilt on a fully open back end that's built on object storage um more or I mean these things",
    "start": "1117760",
    "end": "1125320"
  },
  {
    "text": "Delta Lake again has the paper but the other ones are kind of similar um they're more or less parket files which",
    "start": "1125320",
    "end": "1132240"
  },
  {
    "text": "are basically um indexable um colum of data format",
    "start": "1132240",
    "end": "1139360"
  },
  {
    "text": "um plus which plus information about schema changes in the database just set",
    "start": "1139360",
    "end": "1146360"
  },
  {
    "text": "set in a log um with a whole with a whole bunch of sort of compaction and things like that on the way",
    "start": "1146360",
    "end": "1153760"
  },
  {
    "text": "um there's a um there's a whole lot of nice properties on these things for example because this is just an",
    "start": "1153760",
    "end": "1159600"
  },
  {
    "text": "immutable log on object storage if you don't do compaction you don't delete stuff you can query the state of your",
    "start": "1159600",
    "end": "1164679"
  },
  {
    "text": "database at any point in time um so there's some really nice examp examples where um PE you know tools where",
    "start": "1164679",
    "end": "1171679"
  },
  {
    "text": "techniques where people are actually building kind of G like database systems that you can like checkpoint and branch",
    "start": "1171679",
    "end": "1177960"
  },
  {
    "text": "and and things like that because you can you because these because you can basically Fork a different log um and",
    "start": "1177960",
    "end": "1184240"
  },
  {
    "text": "and start doing you know takes take part of the timeline and history of",
    "start": "1184240",
    "end": "1189400"
  },
  {
    "text": "checkpoint at one particular point in time and then go and Branch it and so there's a whole lot of nice properties",
    "start": "1189400",
    "end": "1195760"
  },
  {
    "text": "that these things have that are kind of fun for um you know as a developer and so on so um so those those are kind of",
    "start": "1195760",
    "end": "1204400"
  },
  {
    "text": "interesting byproducts so these are these are really exciting and it's a really interesting area where basically",
    "start": "1204400",
    "end": "1210000"
  },
  {
    "text": "openness is openness and standards are starting to win in a way that means that there's a really exciting community of",
    "start": "1210000",
    "end": "1216000"
  },
  {
    "text": "people building building on these Open Standards that um is really interesting",
    "start": "1216000",
    "end": "1222840"
  },
  {
    "text": "um another one that um came across recently um and they're working with the SEF project",
    "start": "1222840",
    "end": "1229240"
  },
  {
    "text": "um is um is for virtual diss so this is",
    "start": "1229240",
    "end": "1234360"
  },
  {
    "text": "an um again it's an open source project um and they're building um they",
    "start": "1234360",
    "end": "1240320"
  },
  {
    "text": "basically want to build scaleout um discs so they have a local SSD cach and",
    "start": "1240320",
    "end": "1245480"
  },
  {
    "text": "then they send the changes the change blocks to S3 as a log in batches",
    "start": "1245480",
    "end": "1250820"
  },
  {
    "text": "[Music] um um and essentially",
    "start": "1250820",
    "end": "1256559"
  },
  {
    "text": "um what this enables them to do is um you know just just send just send file",
    "start": "1256559",
    "end": "1262799"
  },
  {
    "text": "system rights anywhere on the S block device you know as a stream to S3 um",
    "start": "1262799",
    "end": "1268840"
  },
  {
    "text": "with a local care so you can effectively have you know a a pretty much an infinite if you want virtual disc um and",
    "start": "1268840",
    "end": "1278440"
  },
  {
    "text": "if you look at the like the performance of it it's um it's really good it's actually much cheaper than you know",
    "start": "1278440",
    "end": "1284159"
  },
  {
    "text": "using um Amazon EBS you could because you",
    "start": "1284159",
    "end": "1289360"
  },
  {
    "text": "um you've actually got a lot of um you know a lot of performance out of this um",
    "start": "1289360",
    "end": "1295120"
  },
  {
    "text": "and it's very cheap and it's very very high performance um and it's really quite you know it's quite a simple model",
    "start": "1295120",
    "end": "1301400"
  },
  {
    "text": "they're they're re they're reworking this um for some other for some other",
    "start": "1301400",
    "end": "1306440"
  },
  {
    "text": "use cases and there's there's a bunch of work going on here but um and they kind of it's It's you know as I said part the",
    "start": "1306440",
    "end": "1314520"
  },
  {
    "text": "SE project and they kind of but they um I think it's a really interesting one where you know there's a lot of use",
    "start": "1314520",
    "end": "1320919"
  },
  {
    "text": "cases where having you know having a having a virtual disc is a kind of useful abstraction for building",
    "start": "1320919",
    "end": "1326559"
  },
  {
    "text": "something on um but having it you know in a way that actually um you gives you",
    "start": "1326559",
    "end": "1333559"
  },
  {
    "text": "a you know gives you a back up onto S3 every time you have syn and you can um",
    "start": "1333559",
    "end": "1338960"
  },
  {
    "text": "potentially you know duplicate it down to another machine really easily or or whatever you want because it's available",
    "start": "1338960",
    "end": "1345159"
  },
  {
    "text": "in in the object store so um we're doing some work internally um with a quite a",
    "start": "1345159",
    "end": "1352000"
  },
  {
    "text": "similar model to this and um and this codee's been really kind of interesting um so that's that's a nice",
    "start": "1352000",
    "end": "1359159"
  },
  {
    "text": "disc format one this is just a very simple one like how how do you do um lead your election um which is again a",
    "start": "1359159",
    "end": "1366559"
  },
  {
    "text": "kind of useful primitive um just using the if not match M as a mutual exclusion",
    "start": "1366559",
    "end": "1372960"
  },
  {
    "text": "build a log and do leader election on it so you can um again",
    "start": "1372960",
    "end": "1378760"
  },
  {
    "text": "one of the things you know you notice with these things is like you don't have to build a lot of the distributed",
    "start": "1378760",
    "end": "1384200"
  },
  {
    "text": "systems Primitives because you've already got this um you know consistent",
    "start": "1384200",
    "end": "1389360"
  },
  {
    "text": "um back end that you can use um and you've got this and now you've got a concurrency primitive you suddenly got",
    "start": "1389360",
    "end": "1395080"
  },
  {
    "text": "the ability to really build things on top of that really easily",
    "start": "1395080",
    "end": "1402159"
  },
  {
    "text": "um uh slate DB is a kind of um embedded database I think sqlite um but backed by",
    "start": "1402159",
    "end": "1408200"
  },
  {
    "text": "an store rather than a local dis it's very new um they've been working on it",
    "start": "1408200",
    "end": "1413480"
  },
  {
    "text": "um you know only for a few months as far I remember um but it kind of",
    "start": "1413480",
    "end": "1420720"
  },
  {
    "text": "um it's kind of an interesting case where you know you've as you know it's got the high right latency that you have",
    "start": "1420720",
    "end": "1427520"
  },
  {
    "text": "with object storage but um um depending on how often you want to you how often",
    "start": "1427520",
    "end": "1432559"
  },
  {
    "text": "you chunk your rights and so on what latency you're prepared to put up with and the cost but it's um it's it gives",
    "start": "1432559",
    "end": "1438640"
  },
  {
    "text": "you a very simple kind of primitive uh um you know building embedded database to use in your applications that will",
    "start": "1438640",
    "end": "1444919"
  },
  {
    "text": "persist you know will persist reliably in you know in your Object Store forever",
    "start": "1444919",
    "end": "1450400"
  },
  {
    "text": "and you can and you can use that so that's um this is another you know fun",
    "start": "1450400",
    "end": "1456000"
  },
  {
    "text": "project for which they you know they've got a lot of example use cases here",
    "start": "1456000",
    "end": "1462760"
  },
  {
    "text": "um um we're going to some of the non-op source ones turbo puffer is a vector",
    "start": "1462760",
    "end": "1468000"
  },
  {
    "text": "database on object storage um their cursor was one of their first customers",
    "start": "1468000",
    "end": "1473399"
  },
  {
    "text": "it scales out extremely well um and I this little story here is kind of um",
    "start": "1473399",
    "end": "1480000"
  },
  {
    "text": "kind of amusing where they basically just say like you know again because the object door is doing all the work of the",
    "start": "1480000",
    "end": "1488600"
  },
  {
    "text": "reliability you can you're basically just taking Emeral computer in front of it and so you end up with a very",
    "start": "1488600",
    "end": "1494679"
  },
  {
    "text": "different kind of um reliability Story I mean like they they kind of high high availability story is just yeah we've",
    "start": "1494679",
    "end": "1500919"
  },
  {
    "text": "got pods have have some pods we got lots of PODS um that's that's our redundancy",
    "start": "1500919",
    "end": "1506840"
  },
  {
    "text": "and like that because you don't have to worry about all the um you know normally when you're writing a database you spend",
    "start": "1506840",
    "end": "1512880"
  },
  {
    "text": "a lot of your time working on you know persistence and and all those pieces but",
    "start": "1512880",
    "end": "1519039"
  },
  {
    "text": "all those things are done for you if you use an object store um and so um you",
    "start": "1519039",
    "end": "1525200"
  },
  {
    "text": "know but again you've got this High latency but High throughput um performance characteristics which you",
    "start": "1525200",
    "end": "1531360"
  },
  {
    "text": "kind of have to um work around a little bit um another interesting open not open",
    "start": "1531360",
    "end": "1537880"
  },
  {
    "text": "source one is warp stream that's a Apache Kafka implementation um they were recently",
    "start": "1537880",
    "end": "1546080"
  },
  {
    "text": "acquired by Confluence um and um as part of their you can run CFA everywhere",
    "start": "1546080",
    "end": "1552799"
  },
  {
    "text": "thing Confluence are using it as the the bring your own cloud bring your own effectively you know bring your own um",
    "start": "1552799",
    "end": "1559919"
  },
  {
    "text": "object storage bucket implementation um there's an interesting article I think there by Jack Van",
    "start": "1559919",
    "end": "1566279"
  },
  {
    "text": "lightly um talking about you know the fact that",
    "start": "1566279",
    "end": "1571520"
  },
  {
    "text": "the you know for a long time confident didn't have didn't want to run on Prem",
    "start": "1571520",
    "end": "1576720"
  },
  {
    "text": "you know in the customers data center solution uh because they really invested heavily in having a you know large",
    "start": "1576720",
    "end": "1582520"
  },
  {
    "text": "multi-tenant um solution but um wstream was simple enough because of the",
    "start": "1582520",
    "end": "1589080"
  },
  {
    "text": "operational Simplicity of it just being an object storage with ephemeral compute um that they felt that that was",
    "start": "1589080",
    "end": "1595760"
  },
  {
    "text": "a something that they could reliably support you know on the customer Prem rather and that real operational",
    "start": "1595760",
    "end": "1603840"
  },
  {
    "text": "Simplicity is really really you know important from the point of view of if you're going to run stuff that you have",
    "start": "1603840",
    "end": "1610440"
  },
  {
    "text": "less observability and control over because it's at the customers sites then you've got to be really confident that",
    "start": "1610440",
    "end": "1616240"
  },
  {
    "text": "it's absolutely reliable um it uses the fact one of the selling",
    "start": "1616240",
    "end": "1623200"
  },
  {
    "text": "points of orst stream when it was an independent company was that they um again you get the free replication between availability zones because the",
    "start": "1623200",
    "end": "1631279"
  },
  {
    "text": "object store is replicated between availability zones so you don't have to pay cross Network traffic there and so",
    "start": "1631279",
    "end": "1636760"
  },
  {
    "text": "their their pitch before they were acquired was it was just very very cheap to run as long as you didn't mind a bit",
    "start": "1636760",
    "end": "1641960"
  },
  {
    "text": "of extra latency was the cheapest possible way to run cfco um again I think you know it's not",
    "start": "1641960",
    "end": "1648640"
  },
  {
    "text": "open source but I think you know these things are kind of interesting from the point of view of things um another not",
    "start": "1648640",
    "end": "1655080"
  },
  {
    "text": "open source one bit Drift from Matt Klein um Matt Klein who did Envoy um",
    "start": "1655080",
    "end": "1660840"
  },
  {
    "text": "again they've got to bring your own bucket model for how how to host the service um and again he talks about this",
    "start": "1660840",
    "end": "1667720"
  },
  {
    "text": "blob store architecture and how um every modern database is being built with blob store first architecture is like you",
    "start": "1667720",
    "end": "1673960"
  },
  {
    "text": "know his point so um so again like this is um you know he goes through you know",
    "start": "1673960",
    "end": "1680880"
  },
  {
    "text": "these advantages of of um this you know again there may be local storage and RAM",
    "start": "1680880",
    "end": "1687840"
  },
  {
    "text": "as a cache but in some of these architectures to overcome the latency but the the the stor you know the the",
    "start": "1687840",
    "end": "1694279"
  },
  {
    "text": "underlying storage is is the object store",
    "start": "1694279",
    "end": "1701840"
  },
  {
    "text": "um so wrapping this up that you know the things that could be built I think you",
    "start": "1701840",
    "end": "1707480"
  },
  {
    "text": "know the reason I all this object storage is all you need is I'm kind of really quite um uh you know I've having looked at",
    "start": "1707480",
    "end": "1716600"
  },
  {
    "text": "these kind of architectures and the benefits of them I think that um there's a huge advantage to using these kind of",
    "start": "1716600",
    "end": "1723240"
  },
  {
    "text": "simple Cloud native Primitives as the basis for building all sorts of applications and it you can really",
    "start": "1723240",
    "end": "1728760"
  },
  {
    "text": "simplify what you do if you can offload um you know the the difficult bits to to",
    "start": "1728760",
    "end": "1734919"
  },
  {
    "text": "something as simple as an object store I um I at one point I was going to I was",
    "start": "1734919",
    "end": "1741200"
  },
  {
    "text": "thinking of while go back of like taking the cncf landscape and marking off which things are you know which things are not",
    "start": "1741200",
    "end": "1747000"
  },
  {
    "text": "annoying to operate because they've actually got a raft implementation in them and like that's you don't really",
    "start": "1747000",
    "end": "1752799"
  },
  {
    "text": "want to have to do those things if if you can avoid it and you building your persistence layer on Object Store means",
    "start": "1752799",
    "end": "1758399"
  },
  {
    "text": "you don't have to do that there's this we're starting to see sort of next generation of object stores that are",
    "start": "1758399",
    "end": "1764399"
  },
  {
    "text": "that are lower latency um object stor was built on hard drives um and um",
    "start": "1764399",
    "end": "1772080"
  },
  {
    "text": "people are rebuilding those on SSD so that cuts down some of the latency I",
    "start": "1772080",
    "end": "1777960"
  },
  {
    "text": "some of it's again Network latency um Amazon launched their um",
    "start": "1777960",
    "end": "1784279"
  },
  {
    "text": "their Object Store like that recently and um one of the other Cloud providers is launching one soon um so I think",
    "start": "1784279",
    "end": "1791720"
  },
  {
    "text": "we're going to see somewhat lower latency um lower latency options which you know",
    "start": "1791720",
    "end": "1798559"
  },
  {
    "text": "gives you some more choice we're just seeing you know lots and lots of databases and applications being built",
    "start": "1798559",
    "end": "1804200"
  },
  {
    "text": "directly on object storage and you know I think this is really um this is you know it's it's a really",
    "start": "1804200",
    "end": "1810799"
  },
  {
    "text": "attractive option if you're trying to build something that has data which is pretty much everything",
    "start": "1810799",
    "end": "1816279"
  },
  {
    "text": "um um and you know as I said like it's this it's very Cloud native it's very Cloud native way of thinking about it",
    "start": "1816279",
    "end": "1821840"
  },
  {
    "text": "use these simple Primitives offload the hard things to to the cloud or to uh a",
    "start": "1821840",
    "end": "1828279"
  },
  {
    "text": "system that's dedicated to doing that even if you you know even if you run minio yourself you're still off you know",
    "start": "1828279",
    "end": "1833760"
  },
  {
    "text": "it's still one point which you can offload to um if you're building something let me know I've been spending",
    "start": "1833760",
    "end": "1839320"
  },
  {
    "text": "a bunch of time talking to people who are building in this space um to find out what people are doing and um talk to",
    "start": "1839320",
    "end": "1844880"
  },
  {
    "text": "them and I'm really happy to help out if you you know um and I kind of I'm",
    "start": "1844880",
    "end": "1850240"
  },
  {
    "text": "interested in you know building a community of you know you people who are interested because I think that it's",
    "start": "1850240",
    "end": "1855320"
  },
  {
    "text": "something that um you know there's a whole lot of applications that can be built and there's a whole lot of um you",
    "start": "1855320",
    "end": "1862000"
  },
  {
    "text": "know it's a whole different way of thinking about building applications ctive applications and it'd be really interesting if people are interested so",
    "start": "1862000",
    "end": "1869200"
  },
  {
    "text": "um get in touch and um you know let me know let me know if you're building something or you've got ideas or you got",
    "start": "1869200",
    "end": "1876519"
  },
  {
    "text": "want any help so um thanks very much um hope you enjoy",
    "start": "1876519",
    "end": "1881799"
  },
  {
    "text": "the rest of your stay in Cube car Salt Lake City and happy to got 3 minutes for",
    "start": "1881799",
    "end": "1888120"
  },
  {
    "text": "questions so um but otherwise I'll be around very briefly although I have to go to the",
    "start": "1888120",
    "end": "1893240"
  },
  {
    "text": "airport pretty quickly so but you can always email me and get in touch [Applause]",
    "start": "1893240",
    "end": "1903039"
  }
]