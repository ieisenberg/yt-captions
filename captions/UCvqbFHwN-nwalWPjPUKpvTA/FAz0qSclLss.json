[
  {
    "start": "0",
    "end": "176000"
  },
  {
    "text": "hi everyone my name is evan chan i'm a",
    "start": "160",
    "end": "2800"
  },
  {
    "text": "senior data engineer at",
    "start": "2800",
    "end": "4319"
  },
  {
    "text": "urban logic and welcome to my",
    "start": "4319",
    "end": "7440"
  },
  {
    "text": "presentation",
    "start": "7440",
    "end": "10000"
  },
  {
    "text": "so urban logic we are",
    "start": "11120",
    "end": "14160"
  },
  {
    "text": "an online platform that provides uh",
    "start": "14160",
    "end": "16960"
  },
  {
    "text": "insights",
    "start": "16960",
    "end": "18560"
  },
  {
    "text": "and we use thrust and machine learning",
    "start": "18560",
    "end": "20640"
  },
  {
    "text": "amongst other things",
    "start": "20640",
    "end": "22240"
  },
  {
    "text": "to give really great",
    "start": "22240",
    "end": "26000"
  },
  {
    "text": "insights for transportation economic",
    "start": "26000",
    "end": "28080"
  },
  {
    "text": "development and other",
    "start": "28080",
    "end": "29199"
  },
  {
    "text": "community use cases",
    "start": "29199",
    "end": "32239"
  },
  {
    "text": "so why thin cloud apps",
    "start": "32800",
    "end": "37360"
  },
  {
    "text": "if we look at the progression of",
    "start": "37360",
    "end": "40239"
  },
  {
    "text": "technology",
    "start": "40239",
    "end": "41280"
  },
  {
    "text": "through the recent years we can see that",
    "start": "41280",
    "end": "44640"
  },
  {
    "text": "we have moved from in the old days we",
    "start": "44640",
    "end": "47039"
  },
  {
    "text": "used virtual machines",
    "start": "47039",
    "end": "48719"
  },
  {
    "text": "to uh now we're using containers",
    "start": "48719",
    "end": "51039"
  },
  {
    "text": "everywhere",
    "start": "51039",
    "end": "52000"
  },
  {
    "text": "and we can see technologies on the",
    "start": "52000",
    "end": "54320"
  },
  {
    "text": "horizon",
    "start": "54320",
    "end": "55360"
  },
  {
    "text": "that are coming on fast such as",
    "start": "55360",
    "end": "57680"
  },
  {
    "text": "serverless and web assembly",
    "start": "57680",
    "end": "59359"
  },
  {
    "text": "and what we notice in this trend is that",
    "start": "59359",
    "end": "61359"
  },
  {
    "text": "cloud infrastructure is getting smaller",
    "start": "61359",
    "end": "64158"
  },
  {
    "text": "thinner and more concurrent right so",
    "start": "64159",
    "end": "68000"
  },
  {
    "text": "things that maybe didn't used to be",
    "start": "68000",
    "end": "70000"
  },
  {
    "text": "quite as important",
    "start": "70000",
    "end": "71520"
  },
  {
    "text": "such as memory and allocations are",
    "start": "71520",
    "end": "73439"
  },
  {
    "text": "becoming more important",
    "start": "73439",
    "end": "75280"
  },
  {
    "text": "because when each unit is smaller you",
    "start": "75280",
    "end": "76960"
  },
  {
    "text": "need to be more efficient",
    "start": "76960",
    "end": "78640"
  },
  {
    "text": "and you know we also live in a data-rich",
    "start": "78640",
    "end": "81040"
  },
  {
    "text": "world so",
    "start": "81040",
    "end": "81920"
  },
  {
    "text": "we need to process more and more data so",
    "start": "81920",
    "end": "83840"
  },
  {
    "text": "that has to be more and more efficient",
    "start": "83840",
    "end": "86000"
  },
  {
    "text": "and finally using less memory it's more",
    "start": "86000",
    "end": "87600"
  },
  {
    "text": "eco-friendly",
    "start": "87600",
    "end": "89119"
  },
  {
    "text": "right so",
    "start": "89119",
    "end": "92799"
  },
  {
    "text": "the the question for everyone here we're",
    "start": "92799",
    "end": "95119"
  },
  {
    "text": "here to learn about",
    "start": "95119",
    "end": "96159"
  },
  {
    "text": "rust is why use rust for thin cloud apps",
    "start": "96159",
    "end": "99759"
  },
  {
    "text": "and",
    "start": "99759",
    "end": "101119"
  },
  {
    "text": "they are actually mainly reasons for",
    "start": "101119",
    "end": "103040"
  },
  {
    "text": "which i personally came to ross i came",
    "start": "103040",
    "end": "105119"
  },
  {
    "text": "to russ from",
    "start": "105119",
    "end": "106320"
  },
  {
    "text": "writing a distributed in-memory database",
    "start": "106320",
    "end": "108960"
  },
  {
    "text": "called",
    "start": "108960",
    "end": "109520"
  },
  {
    "text": "filodb which was on the jvm and",
    "start": "109520",
    "end": "113520"
  },
  {
    "text": "um i came for the no compromise",
    "start": "113520",
    "end": "118560"
  },
  {
    "text": "aspect of rust that it was so to me that",
    "start": "118560",
    "end": "122000"
  },
  {
    "text": "you could get performance",
    "start": "122000",
    "end": "123200"
  },
  {
    "text": "safety and abstractions at the same time",
    "start": "123200",
    "end": "126079"
  },
  {
    "text": "usually",
    "start": "126079",
    "end": "126799"
  },
  {
    "text": "you know you have to choose you know one",
    "start": "126799",
    "end": "129280"
  },
  {
    "text": "or two of these",
    "start": "129280",
    "end": "130959"
  },
  {
    "text": "and um i found that it was",
    "start": "130959",
    "end": "134319"
  },
  {
    "text": "uh pretty much mostly true that you you",
    "start": "134319",
    "end": "136480"
  },
  {
    "text": "could have all three things",
    "start": "136480",
    "end": "138560"
  },
  {
    "text": "and also with rust you get great control",
    "start": "138560",
    "end": "141360"
  },
  {
    "text": "over",
    "start": "141360",
    "end": "142000"
  },
  {
    "text": "memory usage your allocations and",
    "start": "142000",
    "end": "146080"
  },
  {
    "text": "you have many ways to you could even opt",
    "start": "146080",
    "end": "149440"
  },
  {
    "text": "out of using a standard library so",
    "start": "149440",
    "end": "151120"
  },
  {
    "text": "there's many ways that you could",
    "start": "151120",
    "end": "153040"
  },
  {
    "text": "use less memory and that small",
    "start": "153040",
    "end": "156080"
  },
  {
    "text": "profile makes it very appropriate for",
    "start": "156080",
    "end": "158800"
  },
  {
    "text": "writing everything from apps",
    "start": "158800",
    "end": "160239"
  },
  {
    "text": "to oss kernel level code hypervisors and",
    "start": "160239",
    "end": "163840"
  },
  {
    "text": "so on",
    "start": "163840",
    "end": "166239"
  },
  {
    "text": "right however to take advantage of it",
    "start": "166239",
    "end": "168560"
  },
  {
    "text": "you have to learn how to control",
    "start": "168560",
    "end": "170319"
  },
  {
    "text": "and measure the allocations so let's",
    "start": "170319",
    "end": "173519"
  },
  {
    "text": "dive right in",
    "start": "173519",
    "end": "176160"
  },
  {
    "start": "176000",
    "end": "643000"
  },
  {
    "text": "how rust apps use memory so let's start",
    "start": "176879",
    "end": "180319"
  },
  {
    "text": "by reviewing",
    "start": "180319",
    "end": "182400"
  },
  {
    "text": "rust memory model really quickly",
    "start": "182400",
    "end": "185840"
  },
  {
    "text": "on the left side you see uh what does",
    "start": "186959",
    "end": "190000"
  },
  {
    "text": "rust put on the stack so they would be",
    "start": "190000",
    "end": "193519"
  },
  {
    "text": "primitives uh structs so you have a",
    "start": "193519",
    "end": "196159"
  },
  {
    "text": "couple different fields",
    "start": "196159",
    "end": "197280"
  },
  {
    "text": "but but everything in the structure is",
    "start": "197280",
    "end": "199599"
  },
  {
    "text": "fixed size",
    "start": "199599",
    "end": "201040"
  },
  {
    "text": "you also have fixed size arrays and",
    "start": "201040",
    "end": "205120"
  },
  {
    "text": "pointers references two things on the",
    "start": "205120",
    "end": "207920"
  },
  {
    "text": "heap",
    "start": "207920",
    "end": "209280"
  },
  {
    "text": "so you have some stuff to work with and",
    "start": "209280",
    "end": "210959"
  },
  {
    "text": "then everything else that is dynamic is",
    "start": "210959",
    "end": "213120"
  },
  {
    "text": "put on here",
    "start": "213120",
    "end": "214480"
  },
  {
    "text": "such as vects which are lists and arrays",
    "start": "214480",
    "end": "217040"
  },
  {
    "text": "things like strings",
    "start": "217040",
    "end": "218080"
  },
  {
    "text": "and other more complex objects",
    "start": "218080",
    "end": "222400"
  },
  {
    "text": "as well as some miscellaneous things",
    "start": "222400",
    "end": "224480"
  },
  {
    "text": "that we'll go over later",
    "start": "224480",
    "end": "226959"
  },
  {
    "text": "now one thing is that russ does not have",
    "start": "226959",
    "end": "229360"
  },
  {
    "text": "a garbage collector",
    "start": "229360",
    "end": "230720"
  },
  {
    "text": "so how does it manage memory now this",
    "start": "230720",
    "end": "233360"
  },
  {
    "text": "this is a really important point",
    "start": "233360",
    "end": "234959"
  },
  {
    "text": "for folks those of you coming from",
    "start": "234959",
    "end": "237200"
  },
  {
    "text": "dynamic languages this is the biggest",
    "start": "237200",
    "end": "239280"
  },
  {
    "text": "differentiator above rust what",
    "start": "239280",
    "end": "242799"
  },
  {
    "text": "rust's promises is that",
    "start": "242799",
    "end": "246400"
  },
  {
    "text": "even though it does not have a garbage",
    "start": "246400",
    "end": "247760"
  },
  {
    "text": "collector it will track",
    "start": "247760",
    "end": "249840"
  },
  {
    "text": "how your data is used through a concept",
    "start": "249840",
    "end": "252239"
  },
  {
    "text": "known as a lifetime",
    "start": "252239",
    "end": "253599"
  },
  {
    "text": "so to keep track of when your data is",
    "start": "253599",
    "end": "256880"
  },
  {
    "text": "created",
    "start": "256880",
    "end": "257519"
  },
  {
    "text": "when it is borrowed and used and it",
    "start": "257519",
    "end": "260079"
  },
  {
    "text": "tries to prevent",
    "start": "260079",
    "end": "261519"
  },
  {
    "text": "unsafe use and sharing of your data",
    "start": "261519",
    "end": "265280"
  },
  {
    "text": "and it tracks when your data is no",
    "start": "265280",
    "end": "266960"
  },
  {
    "text": "longer used so it knows when to free it",
    "start": "266960",
    "end": "270400"
  },
  {
    "text": "right this talk is not going to be about",
    "start": "270400",
    "end": "273759"
  },
  {
    "text": "this",
    "start": "273759",
    "end": "274720"
  },
  {
    "text": "but but this will be important to",
    "start": "274720",
    "end": "276080"
  },
  {
    "text": "remember when we talk about allocating",
    "start": "276080",
    "end": "278000"
  },
  {
    "text": "memory",
    "start": "278000",
    "end": "280400"
  },
  {
    "text": "so let's with that let's dive into some",
    "start": "281759",
    "end": "284240"
  },
  {
    "text": "basic",
    "start": "284240",
    "end": "285759"
  },
  {
    "text": "data structures that are used a lot and",
    "start": "285759",
    "end": "288560"
  },
  {
    "text": "how much memory they actually represent",
    "start": "288560",
    "end": "291120"
  },
  {
    "text": "so we start off with strings",
    "start": "291120",
    "end": "294560"
  },
  {
    "text": "and vects so remember effect is a list",
    "start": "294560",
    "end": "297040"
  },
  {
    "text": "of a fixed",
    "start": "297040",
    "end": "298080"
  },
  {
    "text": "type of item so on the stack",
    "start": "298080",
    "end": "302000"
  },
  {
    "text": "they use on 64-bit architectures like",
    "start": "302000",
    "end": "305440"
  },
  {
    "text": "the x86 and modern",
    "start": "305440",
    "end": "307360"
  },
  {
    "text": "r machines they use 24 bytes the pointer",
    "start": "307360",
    "end": "310479"
  },
  {
    "text": "would be eight bytes",
    "start": "310479",
    "end": "312080"
  },
  {
    "text": "and then there is one field for capacity",
    "start": "312080",
    "end": "314400"
  },
  {
    "text": "which is how",
    "start": "314400",
    "end": "316000"
  },
  {
    "text": "much how many items this data show can",
    "start": "316000",
    "end": "319759"
  },
  {
    "text": "hold",
    "start": "319759",
    "end": "320240"
  },
  {
    "text": "like that is how many characters for a",
    "start": "320240",
    "end": "321840"
  },
  {
    "text": "string or how many items",
    "start": "321840",
    "end": "323440"
  },
  {
    "text": "for a vac and then there's a length",
    "start": "323440",
    "end": "325280"
  },
  {
    "text": "which is how many items it actually has",
    "start": "325280",
    "end": "327600"
  },
  {
    "text": "right now so these are both global data",
    "start": "327600",
    "end": "329759"
  },
  {
    "text": "structures",
    "start": "329759",
    "end": "330880"
  },
  {
    "text": "now then the pointer would point to",
    "start": "330880",
    "end": "334400"
  },
  {
    "text": "an area in the heap that actually holds",
    "start": "334400",
    "end": "337039"
  },
  {
    "text": "the",
    "start": "337039",
    "end": "337759"
  },
  {
    "text": "the items or the characters",
    "start": "337759",
    "end": "341759"
  },
  {
    "text": "now the complement to vects and strings",
    "start": "342400",
    "end": "345759"
  },
  {
    "text": "are slice",
    "start": "345759",
    "end": "349039"
  },
  {
    "text": "pointers and",
    "start": "349039",
    "end": "352160"
  },
  {
    "text": "string slices both of these are",
    "start": "352160",
    "end": "354479"
  },
  {
    "text": "immutable",
    "start": "354479",
    "end": "355759"
  },
  {
    "text": "they are the same as the previous ones",
    "start": "355759",
    "end": "358400"
  },
  {
    "text": "except there are 16 bytes because you",
    "start": "358400",
    "end": "360240"
  },
  {
    "text": "have",
    "start": "360240",
    "end": "361039"
  },
  {
    "text": "one pointer and you have a length",
    "start": "361039",
    "end": "363280"
  },
  {
    "text": "because these things cannot grow",
    "start": "363280",
    "end": "365199"
  },
  {
    "text": "so they just point at a location and",
    "start": "365199",
    "end": "369759"
  },
  {
    "text": "they tell you how many items they",
    "start": "369759",
    "end": "371199"
  },
  {
    "text": "represent",
    "start": "371199",
    "end": "373680"
  },
  {
    "text": "now let's look at a more complex data",
    "start": "374560",
    "end": "377520"
  },
  {
    "text": "structure",
    "start": "377520",
    "end": "378400"
  },
  {
    "text": "the hashmap so for a hashmap",
    "start": "378400",
    "end": "383039"
  },
  {
    "text": "this is a bit more complex a hashmap",
    "start": "383039",
    "end": "387120"
  },
  {
    "text": "can be implemented using buckets right",
    "start": "387120",
    "end": "390240"
  },
  {
    "text": "so all of your items are hashed into a",
    "start": "390240",
    "end": "392080"
  },
  {
    "text": "fixed number of buckets",
    "start": "392080",
    "end": "393600"
  },
  {
    "text": "each bucket in turn can have",
    "start": "393600",
    "end": "397440"
  },
  {
    "text": "one or more items in it when there is a",
    "start": "397440",
    "end": "400960"
  },
  {
    "text": "collision",
    "start": "400960",
    "end": "402960"
  },
  {
    "text": "so what we notice here is that the list",
    "start": "402960",
    "end": "405680"
  },
  {
    "text": "of buckets",
    "start": "405680",
    "end": "406960"
  },
  {
    "text": "is basically a vector of a bucket",
    "start": "406960",
    "end": "410000"
  },
  {
    "text": "and in each slot a bucket you know that",
    "start": "410000",
    "end": "413199"
  },
  {
    "text": "points to a bucket and then each bucket",
    "start": "413199",
    "end": "415280"
  },
  {
    "text": "entry would be",
    "start": "415280",
    "end": "418000"
  },
  {
    "text": "your key and value pairs for the items",
    "start": "418000",
    "end": "420960"
  },
  {
    "text": "and if my hash map",
    "start": "420960",
    "end": "422000"
  },
  {
    "text": "is a string key and a string index",
    "start": "422000",
    "end": "425039"
  },
  {
    "text": "that means that i'm storing as the key",
    "start": "425039",
    "end": "428240"
  },
  {
    "text": "and value",
    "start": "428240",
    "end": "429520"
  },
  {
    "text": "entry in each bucket slot i'm using",
    "start": "429520",
    "end": "434160"
  },
  {
    "text": "24 bytes for the key for the",
    "start": "434160",
    "end": "438240"
  },
  {
    "text": "key string struct and 24 bytes for",
    "start": "438240",
    "end": "442080"
  },
  {
    "text": "the value string structs so that added",
    "start": "442080",
    "end": "444720"
  },
  {
    "text": "together",
    "start": "444720",
    "end": "445280"
  },
  {
    "text": "you know gives you 48 right and",
    "start": "445280",
    "end": "449120"
  },
  {
    "text": "now assuming that the bucket let's",
    "start": "449120",
    "end": "451199"
  },
  {
    "text": "assume that each bucket has like one",
    "start": "451199",
    "end": "453280"
  },
  {
    "text": "entry for the case where there are no",
    "start": "453280",
    "end": "454639"
  },
  {
    "text": "collisions then if you add in",
    "start": "454639",
    "end": "457199"
  },
  {
    "text": "you know the pointer for the bucket",
    "start": "457199",
    "end": "459599"
  },
  {
    "text": "which is basically",
    "start": "459599",
    "end": "460560"
  },
  {
    "text": "the bucket itself is like effect right",
    "start": "460560",
    "end": "462400"
  },
  {
    "text": "it's like a list so",
    "start": "462400",
    "end": "464160"
  },
  {
    "text": "that pointer actually takes up another",
    "start": "464160",
    "end": "465759"
  },
  {
    "text": "24 bytes meaning the overhead is",
    "start": "465759",
    "end": "468240"
  },
  {
    "text": "up to 72 bytes per entry",
    "start": "468240",
    "end": "472560"
  },
  {
    "text": "um so one thing you need to be very",
    "start": "472560",
    "end": "476080"
  },
  {
    "text": "very aware of is that for more complex",
    "start": "476080",
    "end": "478560"
  },
  {
    "text": "data structures",
    "start": "478560",
    "end": "479680"
  },
  {
    "text": "you have these nesting of pointers that",
    "start": "479680",
    "end": "482080"
  },
  {
    "text": "can create",
    "start": "482080",
    "end": "483440"
  },
  {
    "text": "a non-trivial amount of metadata now",
    "start": "483440",
    "end": "486800"
  },
  {
    "text": "if your items like are large then maybe",
    "start": "486800",
    "end": "490000"
  },
  {
    "text": "it is not a problem but",
    "start": "490000",
    "end": "491440"
  },
  {
    "text": "if your items are small then you might",
    "start": "491440",
    "end": "494080"
  },
  {
    "text": "want to be careful and think about that",
    "start": "494080",
    "end": "497680"
  },
  {
    "text": "now where could you be allocating memory",
    "start": "499360",
    "end": "501280"
  },
  {
    "text": "in your apps",
    "start": "501280",
    "end": "502479"
  },
  {
    "text": "so we'll go over each of these items in",
    "start": "502479",
    "end": "505759"
  },
  {
    "text": "detail later",
    "start": "505759",
    "end": "506879"
  },
  {
    "text": "but um starting in no random order",
    "start": "506879",
    "end": "510319"
  },
  {
    "text": "um one item that could take up a lot of",
    "start": "510319",
    "end": "514000"
  },
  {
    "text": "memory is sterilization that creates a",
    "start": "514000",
    "end": "516560"
  },
  {
    "text": "lot of temporary objects",
    "start": "516560",
    "end": "518479"
  },
  {
    "text": "and others one is when you use traits or",
    "start": "518479",
    "end": "520800"
  },
  {
    "text": "trait objects",
    "start": "520800",
    "end": "522479"
  },
  {
    "text": "when you um we'll go over that in a",
    "start": "522479",
    "end": "525040"
  },
  {
    "text": "minute",
    "start": "525040",
    "end": "526320"
  },
  {
    "text": "and um anytime you use clone and",
    "start": "526320",
    "end": "529600"
  },
  {
    "text": "data structures and and so forth",
    "start": "529600",
    "end": "534320"
  },
  {
    "text": "now um you could look at your",
    "start": "534320",
    "end": "537760"
  },
  {
    "text": "your app and go through and find out",
    "start": "537760",
    "end": "540160"
  },
  {
    "text": "look at these users",
    "start": "540160",
    "end": "541360"
  },
  {
    "text": "but maybe a better way is to benchmark",
    "start": "541360",
    "end": "543680"
  },
  {
    "text": "right so",
    "start": "543680",
    "end": "544959"
  },
  {
    "text": "there's two ways you could benchmark",
    "start": "544959",
    "end": "546880"
  },
  {
    "text": "your apps",
    "start": "546880",
    "end": "548640"
  },
  {
    "text": "right so one is to do dynamic memory",
    "start": "548640",
    "end": "551760"
  },
  {
    "text": "analysis",
    "start": "551760",
    "end": "552800"
  },
  {
    "text": "this looks at you know starting from t0",
    "start": "552800",
    "end": "556399"
  },
  {
    "text": "the time when you start your app what",
    "start": "556399",
    "end": "559600"
  },
  {
    "text": "is being allocated how much and it would",
    "start": "559600",
    "end": "562720"
  },
  {
    "text": "track this",
    "start": "562720",
    "end": "563360"
  },
  {
    "text": "over time and it would figure out hey",
    "start": "563360",
    "end": "566000"
  },
  {
    "text": "how",
    "start": "566000",
    "end": "566399"
  },
  {
    "text": "you know what what is the even if you",
    "start": "566399",
    "end": "568880"
  },
  {
    "text": "allocate memory and free it",
    "start": "568880",
    "end": "571519"
  },
  {
    "text": "you know where where are we allocating",
    "start": "571519",
    "end": "573839"
  },
  {
    "text": "freeing memory to most where is what's",
    "start": "573839",
    "end": "575680"
  },
  {
    "text": "the memory churn so that's a dynamic",
    "start": "575680",
    "end": "577600"
  },
  {
    "text": "uh benchmarking it there's also",
    "start": "577600",
    "end": "581200"
  },
  {
    "text": "static memory analysis",
    "start": "581200",
    "end": "584320"
  },
  {
    "text": "a static heap analysis this you might be",
    "start": "584320",
    "end": "586800"
  },
  {
    "text": "more familiar with if you come from",
    "start": "586800",
    "end": "588720"
  },
  {
    "text": "a gc language like you know java and so",
    "start": "588720",
    "end": "592240"
  },
  {
    "text": "forth",
    "start": "592240",
    "end": "592880"
  },
  {
    "text": "where basically you could have an",
    "start": "592880",
    "end": "595040"
  },
  {
    "text": "analyzer that walks your heap",
    "start": "595040",
    "end": "596640"
  },
  {
    "text": "and figures out hey for a given point in",
    "start": "596640",
    "end": "599040"
  },
  {
    "text": "time",
    "start": "599040",
    "end": "600000"
  },
  {
    "text": "uh what memory is being used up what is",
    "start": "600000",
    "end": "602640"
  },
  {
    "text": "using up the most memory",
    "start": "602640",
    "end": "604160"
  },
  {
    "text": "now there are tools for doing dynamic",
    "start": "604160",
    "end": "607279"
  },
  {
    "text": "analysis one is called keep track",
    "start": "607279",
    "end": "609760"
  },
  {
    "text": "another one is called",
    "start": "609760",
    "end": "611120"
  },
  {
    "text": "d-hat and i'll go over examples of d-hat",
    "start": "611120",
    "end": "614640"
  },
  {
    "text": "static keyboard analysis is a bit more",
    "start": "614640",
    "end": "616160"
  },
  {
    "text": "difficult in rust",
    "start": "616160",
    "end": "618560"
  },
  {
    "text": "we can get overall memory usage pretty",
    "start": "618560",
    "end": "621279"
  },
  {
    "text": "easily",
    "start": "621279",
    "end": "622640"
  },
  {
    "text": "using something like general control and",
    "start": "622640",
    "end": "625440"
  },
  {
    "text": "we can",
    "start": "625440",
    "end": "626160"
  },
  {
    "text": "actually diff memory usage you can also",
    "start": "626160",
    "end": "628880"
  },
  {
    "text": "profile data structure using something",
    "start": "628880",
    "end": "630560"
  },
  {
    "text": "called deep size",
    "start": "630560",
    "end": "631760"
  },
  {
    "text": "but but there isn't really anything",
    "start": "631760",
    "end": "634959"
  },
  {
    "text": "um comprehensive like you have with the",
    "start": "634959",
    "end": "637760"
  },
  {
    "text": "jvm but i'll show you some stuff you can",
    "start": "637760",
    "end": "640160"
  },
  {
    "text": "use",
    "start": "640160",
    "end": "640880"
  },
  {
    "text": "for that so",
    "start": "640880",
    "end": "644839"
  },
  {
    "start": "643000",
    "end": "944000"
  },
  {
    "text": "um remember",
    "start": "644839",
    "end": "648959"
  },
  {
    "text": "in rust that usually the more things",
    "start": "648959",
    "end": "651440"
  },
  {
    "text": "that you type",
    "start": "651440",
    "end": "652240"
  },
  {
    "text": "like box the more you alkane so that's",
    "start": "652240",
    "end": "654880"
  },
  {
    "text": "just a fun hint",
    "start": "654880",
    "end": "656320"
  },
  {
    "text": "to remember so let's now let's go over",
    "start": "656320",
    "end": "659760"
  },
  {
    "text": "uh some potentially exponential uses of",
    "start": "659760",
    "end": "663120"
  },
  {
    "text": "memory and how we can",
    "start": "663120",
    "end": "664959"
  },
  {
    "text": "help reduce it",
    "start": "664959",
    "end": "668800"
  },
  {
    "text": "so the first thing is",
    "start": "668800",
    "end": "671920"
  },
  {
    "text": "look at your method signatures what are",
    "start": "671920",
    "end": "674959"
  },
  {
    "text": "we passing in",
    "start": "674959",
    "end": "676399"
  },
  {
    "text": "for example do you see function",
    "start": "676399",
    "end": "679120"
  },
  {
    "text": "signatures",
    "start": "679120",
    "end": "680160"
  },
  {
    "text": "like this where i pass an effect of",
    "start": "680160",
    "end": "683279"
  },
  {
    "text": "string so this is quite common you know",
    "start": "683279",
    "end": "684880"
  },
  {
    "text": "in order to process some string lists",
    "start": "684880",
    "end": "686560"
  },
  {
    "text": "right",
    "start": "686560",
    "end": "687519"
  },
  {
    "text": "so at first appearance you might like",
    "start": "687519",
    "end": "689440"
  },
  {
    "text": "okay that's you know a nice signature",
    "start": "689440",
    "end": "691839"
  },
  {
    "text": "but there's two problems when you ask",
    "start": "691839",
    "end": "695120"
  },
  {
    "text": "the caller to pass in a back of strings",
    "start": "695120",
    "end": "697440"
  },
  {
    "text": "you're basically forcing them to",
    "start": "697440",
    "end": "698959"
  },
  {
    "text": "allocate",
    "start": "698959",
    "end": "700320"
  },
  {
    "text": "twice right once for the back and once",
    "start": "700320",
    "end": "702560"
  },
  {
    "text": "for each string",
    "start": "702560",
    "end": "704160"
  },
  {
    "text": "instead if we're able to",
    "start": "704160",
    "end": "707360"
  },
  {
    "text": "uh change the signature to uh point at a",
    "start": "707360",
    "end": "710720"
  },
  {
    "text": "string",
    "start": "710720",
    "end": "711360"
  },
  {
    "text": "string slices which is the second",
    "start": "711360",
    "end": "714160"
  },
  {
    "text": "signature there",
    "start": "714160",
    "end": "715120"
  },
  {
    "text": "where we have this you know ampersand",
    "start": "715120",
    "end": "718480"
  },
  {
    "text": "and unstring this gives the caller two",
    "start": "718480",
    "end": "722079"
  },
  {
    "text": "chances to avoid allocations",
    "start": "722079",
    "end": "723839"
  },
  {
    "text": "one is that they can point at existing",
    "start": "723839",
    "end": "725920"
  },
  {
    "text": "strings instead of",
    "start": "725920",
    "end": "727120"
  },
  {
    "text": "allocating a new string that saves a",
    "start": "727120",
    "end": "729200"
  },
  {
    "text": "whole bunch of memory",
    "start": "729200",
    "end": "730320"
  },
  {
    "text": "and the second one is that they can pass",
    "start": "730320",
    "end": "732959"
  },
  {
    "text": "in a string slice instead of",
    "start": "732959",
    "end": "734480"
  },
  {
    "text": "a slice of strings instead of a back",
    "start": "734480",
    "end": "738399"
  },
  {
    "text": "right and if you want even more",
    "start": "738399",
    "end": "739760"
  },
  {
    "text": "flexibility you can",
    "start": "739760",
    "end": "741920"
  },
  {
    "text": "change the signature to pass in an",
    "start": "741920",
    "end": "745519"
  },
  {
    "text": "iterator",
    "start": "745519",
    "end": "746480"
  },
  {
    "text": "which gives you the chance to for them",
    "start": "746480",
    "end": "749040"
  },
  {
    "text": "to pass",
    "start": "749040",
    "end": "749519"
  },
  {
    "text": "in even non-less data structures there's",
    "start": "749519",
    "end": "752079"
  },
  {
    "text": "anything that can provide an iterator",
    "start": "752079",
    "end": "753680"
  },
  {
    "text": "for even more flexibility so that gives",
    "start": "753680",
    "end": "755600"
  },
  {
    "text": "you flexibility and",
    "start": "755600",
    "end": "756959"
  },
  {
    "text": "gives you a way to avoid allocations",
    "start": "756959",
    "end": "760880"
  },
  {
    "text": "so the um",
    "start": "761519",
    "end": "764800"
  },
  {
    "text": "the next thing is",
    "start": "764800",
    "end": "767839"
  },
  {
    "text": "that we can try to",
    "start": "767839",
    "end": "771360"
  },
  {
    "text": "flatten our data structures like vac of",
    "start": "771360",
    "end": "774160"
  },
  {
    "text": "string backpack",
    "start": "774160",
    "end": "775519"
  },
  {
    "text": "and i'm not going to go over all of",
    "start": "775519",
    "end": "777440"
  },
  {
    "text": "these",
    "start": "777440",
    "end": "778639"
  },
  {
    "text": "but there's a bunch of crates that will",
    "start": "778639",
    "end": "781680"
  },
  {
    "text": "help you there",
    "start": "781680",
    "end": "782480"
  },
  {
    "text": "such as a nest it that will save you a",
    "start": "782480",
    "end": "785440"
  },
  {
    "text": "lot of",
    "start": "785440",
    "end": "786079"
  },
  {
    "text": "storage if you're if you're trying to",
    "start": "786079",
    "end": "788480"
  },
  {
    "text": "have a bunch of",
    "start": "788480",
    "end": "789839"
  },
  {
    "text": "a list of strings for example and",
    "start": "789839",
    "end": "791600"
  },
  {
    "text": "there's a whole bunch of crates that can",
    "start": "791600",
    "end": "793040"
  },
  {
    "text": "help you with",
    "start": "793040",
    "end": "794880"
  },
  {
    "text": "strings that are basically inlineable",
    "start": "794880",
    "end": "797680"
  },
  {
    "text": "where",
    "start": "797680",
    "end": "798320"
  },
  {
    "text": "when you have strings below a certain",
    "start": "798320",
    "end": "799680"
  },
  {
    "text": "size they will be on the",
    "start": "799680",
    "end": "801519"
  },
  {
    "text": "heat on the stack instead of the heat",
    "start": "801519",
    "end": "804880"
  },
  {
    "text": "as well as things like small small back",
    "start": "804880",
    "end": "807040"
  },
  {
    "text": "so there are",
    "start": "807040",
    "end": "808880"
  },
  {
    "text": "ones we're doing smaller data structures",
    "start": "808880",
    "end": "812240"
  },
  {
    "text": "and i did a test using a repo",
    "start": "812240",
    "end": "815279"
  },
  {
    "text": "that you can feel free to visit where i",
    "start": "815279",
    "end": "818720"
  },
  {
    "text": "show that by using nested instead of",
    "start": "818720",
    "end": "820560"
  },
  {
    "text": "effect you can save",
    "start": "820560",
    "end": "822000"
  },
  {
    "text": "you know like say 25 um you know total",
    "start": "822000",
    "end": "825760"
  },
  {
    "text": "memory allocated",
    "start": "825760",
    "end": "829839"
  },
  {
    "text": "so another area",
    "start": "830240",
    "end": "834240"
  },
  {
    "text": "is by reducing clones you might notice",
    "start": "834240",
    "end": "838480"
  },
  {
    "text": "many of you are writing code using async",
    "start": "838480",
    "end": "840880"
  },
  {
    "text": "this is a",
    "start": "840880",
    "end": "841680"
  },
  {
    "text": "really popular feature of rust now you",
    "start": "841680",
    "end": "843360"
  },
  {
    "text": "can write code that",
    "start": "843360",
    "end": "844959"
  },
  {
    "text": "um you know forks off work and you can",
    "start": "844959",
    "end": "847360"
  },
  {
    "text": "do it away to wait wait for it which is",
    "start": "847360",
    "end": "849360"
  },
  {
    "text": "which is great you might find yourself",
    "start": "849360",
    "end": "851279"
  },
  {
    "text": "however having to clone a lot of data",
    "start": "851279",
    "end": "853120"
  },
  {
    "text": "structures when you're calling",
    "start": "853120",
    "end": "854399"
  },
  {
    "text": "your async functions and these",
    "start": "854399",
    "end": "856480"
  },
  {
    "text": "enclosures",
    "start": "856480",
    "end": "857519"
  },
  {
    "text": "because the data that is passed into a",
    "start": "857519",
    "end": "861440"
  },
  {
    "text": "sync because it's a future and could run",
    "start": "861440",
    "end": "862959"
  },
  {
    "text": "on another thread",
    "start": "862959",
    "end": "863920"
  },
  {
    "text": "it needs to be thread safe one",
    "start": "863920",
    "end": "867120"
  },
  {
    "text": "there's some quick tips one is to",
    "start": "867120",
    "end": "868959"
  },
  {
    "text": "consider using arc",
    "start": "868959",
    "end": "870480"
  },
  {
    "text": "instead of clone and this is something",
    "start": "870480",
    "end": "874320"
  },
  {
    "text": "that makes sense especially for things",
    "start": "874320",
    "end": "876320"
  },
  {
    "text": "like lists things that where you could",
    "start": "876320",
    "end": "877839"
  },
  {
    "text": "pass in a lot of items",
    "start": "877839",
    "end": "879360"
  },
  {
    "text": "clone will usually do a deep clone",
    "start": "879360",
    "end": "882880"
  },
  {
    "text": "what has to do deep clone is to clone",
    "start": "882880",
    "end": "884880"
  },
  {
    "text": "every item so that could be quite",
    "start": "884880",
    "end": "886240"
  },
  {
    "text": "expensive",
    "start": "886240",
    "end": "887199"
  },
  {
    "text": "using arc does cost you",
    "start": "887199",
    "end": "890320"
  },
  {
    "text": "a an atomic you know couple atomic",
    "start": "890320",
    "end": "893040"
  },
  {
    "text": "operations",
    "start": "893040",
    "end": "894000"
  },
  {
    "text": "and it saves you a lot of memory another",
    "start": "894000",
    "end": "897760"
  },
  {
    "text": "idea is to use something like an actor",
    "start": "897760",
    "end": "900240"
  },
  {
    "text": "pattern",
    "start": "900240",
    "end": "900959"
  },
  {
    "text": "this is where you try to keep your state",
    "start": "900959",
    "end": "902880"
  },
  {
    "text": "local instead of",
    "start": "902880",
    "end": "904639"
  },
  {
    "text": "passing your state around and so you",
    "start": "904639",
    "end": "906880"
  },
  {
    "text": "keep your data",
    "start": "906880",
    "end": "908000"
  },
  {
    "text": "structures within each actor or",
    "start": "908000",
    "end": "909920"
  },
  {
    "text": "equivalently within each thread and you",
    "start": "909920",
    "end": "912160"
  },
  {
    "text": "use channels to communicate",
    "start": "912160",
    "end": "914079"
  },
  {
    "text": "and you pass you know small messages and",
    "start": "914079",
    "end": "917279"
  },
  {
    "text": "events only so that's a pattern that can",
    "start": "917279",
    "end": "919199"
  },
  {
    "text": "help and it has other benefits as well",
    "start": "919199",
    "end": "921360"
  },
  {
    "text": "finally we consider using something like",
    "start": "921360",
    "end": "923839"
  },
  {
    "text": "cow",
    "start": "923839",
    "end": "925120"
  },
  {
    "text": "for example if you want to escape",
    "start": "925120",
    "end": "926880"
  },
  {
    "text": "strings such as you want to",
    "start": "926880",
    "end": "929440"
  },
  {
    "text": "um like for urls or something else",
    "start": "929440",
    "end": "934000"
  },
  {
    "text": "where a lot of times the string is not",
    "start": "934000",
    "end": "935440"
  },
  {
    "text": "changed but sometimes you need to create",
    "start": "935440",
    "end": "936880"
  },
  {
    "text": "a new copy",
    "start": "936880",
    "end": "937680"
  },
  {
    "text": "well instead of creating a new copy",
    "start": "937680",
    "end": "939040"
  },
  {
    "text": "every time you can just copy only",
    "start": "939040",
    "end": "941360"
  },
  {
    "text": "on right right",
    "start": "941360",
    "end": "944560"
  },
  {
    "start": "944000",
    "end": "1086000"
  },
  {
    "text": "well so how slow is arc really right",
    "start": "945519",
    "end": "949040"
  },
  {
    "text": "like in case you're worried about using",
    "start": "949040",
    "end": "950639"
  },
  {
    "text": "arc instead of cloning well",
    "start": "950639",
    "end": "952399"
  },
  {
    "text": "well if the data is anything concise",
    "start": "952399",
    "end": "954800"
  },
  {
    "text": "it's you know it is",
    "start": "954800",
    "end": "956240"
  },
  {
    "text": "fast it is you know almost always faster",
    "start": "956240",
    "end": "958880"
  },
  {
    "text": "uh",
    "start": "958880",
    "end": "959440"
  },
  {
    "text": "actually but basically arc is just an",
    "start": "959440",
    "end": "961600"
  },
  {
    "text": "atomic increment on the clone and at the",
    "start": "961600",
    "end": "963440"
  },
  {
    "text": "top of the document on drop",
    "start": "963440",
    "end": "964959"
  },
  {
    "text": "and roughly on an x86 they estimate that",
    "start": "964959",
    "end": "968079"
  },
  {
    "text": "this is between 30 and 120 nanoseconds",
    "start": "968079",
    "end": "970399"
  },
  {
    "text": "depending on which level of cache",
    "start": "970399",
    "end": "972320"
  },
  {
    "text": "it might be faster and other hardware",
    "start": "972320",
    "end": "976320"
  },
  {
    "text": "so now",
    "start": "976720",
    "end": "980720"
  },
  {
    "text": "here's another area where you might be",
    "start": "980720",
    "end": "983839"
  },
  {
    "text": "using memory is",
    "start": "983839",
    "end": "984800"
  },
  {
    "text": "you might find that you have a signature",
    "start": "984800",
    "end": "986800"
  },
  {
    "text": "like this where you're processing some",
    "start": "986800",
    "end": "988320"
  },
  {
    "text": "item",
    "start": "988320",
    "end": "989279"
  },
  {
    "text": "and you know you want to pass the",
    "start": "989279",
    "end": "991120"
  },
  {
    "text": "different implementations of traits",
    "start": "991120",
    "end": "993360"
  },
  {
    "text": "right so you make your signature have",
    "start": "993360",
    "end": "995680"
  },
  {
    "text": "this dying",
    "start": "995680",
    "end": "996800"
  },
  {
    "text": "keyword for dying my trade right and",
    "start": "996800",
    "end": "1000240"
  },
  {
    "text": "now in order to be able to pass that",
    "start": "1000240",
    "end": "1001839"
  },
  {
    "text": "function usually you need to box it",
    "start": "1001839",
    "end": "1003600"
  },
  {
    "text": "which means you need to allocate some",
    "start": "1003600",
    "end": "1005120"
  },
  {
    "text": "heap memory for that",
    "start": "1005120",
    "end": "1006639"
  },
  {
    "text": "unfortunately that means that every time",
    "start": "1006639",
    "end": "1008560"
  },
  {
    "text": "you're calling this method you're",
    "start": "1008560",
    "end": "1010800"
  },
  {
    "text": "you're doing this allocation which is",
    "start": "1010800",
    "end": "1013120"
  },
  {
    "text": "you know not the fastest thing",
    "start": "1013120",
    "end": "1015199"
  },
  {
    "text": "right so especially in a hot loop one",
    "start": "1015199",
    "end": "1018079"
  },
  {
    "text": "trade",
    "start": "1018079",
    "end": "1018720"
  },
  {
    "text": "uh one crate sorry that you can use that",
    "start": "1018720",
    "end": "1021120"
  },
  {
    "text": "helps a lot is called enum dispatch",
    "start": "1021120",
    "end": "1023279"
  },
  {
    "text": "which is really great what it does",
    "start": "1023279",
    "end": "1026319"
  },
  {
    "text": "is if all of your trade implementations",
    "start": "1026319",
    "end": "1028959"
  },
  {
    "text": "are within your control",
    "start": "1028959",
    "end": "1031038"
  },
  {
    "text": "you can make it in any num and",
    "start": "1031039",
    "end": "1035199"
  },
  {
    "text": "all of your implementations of my",
    "start": "1035199",
    "end": "1037120"
  },
  {
    "text": "behavior in this case",
    "start": "1037120",
    "end": "1038480"
  },
  {
    "text": "are in this enum might be really numb",
    "start": "1038480",
    "end": "1041678"
  },
  {
    "text": "what we do is that we would annotate it",
    "start": "1041679",
    "end": "1044959"
  },
  {
    "text": "with enum dispatch",
    "start": "1044959",
    "end": "1046480"
  },
  {
    "text": "and in them this patch will will",
    "start": "1046480",
    "end": "1048558"
  },
  {
    "text": "magically",
    "start": "1048559",
    "end": "1049520"
  },
  {
    "text": "it will tie in with the trait and",
    "start": "1049520",
    "end": "1052640"
  },
  {
    "text": "will actually make it so that your enum",
    "start": "1052640",
    "end": "1056799"
  },
  {
    "text": "will implement uh the trait methods",
    "start": "1056799",
    "end": "1060480"
  },
  {
    "text": "if all of the variants of the numbers",
    "start": "1060480",
    "end": "1063440"
  },
  {
    "text": "also implement",
    "start": "1063440",
    "end": "1065039"
  },
  {
    "text": "so basically you can change the",
    "start": "1065039",
    "end": "1067039"
  },
  {
    "text": "signature here the process",
    "start": "1067039",
    "end": "1068559"
  },
  {
    "text": "might be really numb and you can still",
    "start": "1068559",
    "end": "1070559"
  },
  {
    "text": "call my method on it",
    "start": "1070559",
    "end": "1072160"
  },
  {
    "text": "on all the bearings that pass in this",
    "start": "1072160",
    "end": "1074640"
  },
  {
    "text": "this is",
    "start": "1074640",
    "end": "1075520"
  },
  {
    "text": "a tremendous performance boost and it",
    "start": "1075520",
    "end": "1077600"
  },
  {
    "text": "reduces allocations too so this is",
    "start": "1077600",
    "end": "1079679"
  },
  {
    "text": "really really great i love it and i use",
    "start": "1079679",
    "end": "1082160"
  },
  {
    "text": "it in",
    "start": "1082160",
    "end": "1083360"
  },
  {
    "text": "one crate of mine",
    "start": "1083360",
    "end": "1086160"
  },
  {
    "text": "so another area where",
    "start": "1086880",
    "end": "1090320"
  },
  {
    "text": "we could allocate a lot is are with",
    "start": "1090320",
    "end": "1093600"
  },
  {
    "text": "sterilization right so",
    "start": "1093600",
    "end": "1097600"
  },
  {
    "text": "let's look at a quick sample sturdy json",
    "start": "1097600",
    "end": "1100559"
  },
  {
    "text": "with the deserialized from raw json",
    "start": "1100559",
    "end": "1102640"
  },
  {
    "text": "to an intermediate value type",
    "start": "1102640",
    "end": "1106840"
  },
  {
    "text": "this certi json value thing",
    "start": "1106840",
    "end": "1110240"
  },
  {
    "text": "this is quite common for serialization",
    "start": "1110240",
    "end": "1113280"
  },
  {
    "text": "libraries",
    "start": "1113280",
    "end": "1114160"
  },
  {
    "text": "and then it has to do another step it",
    "start": "1114160",
    "end": "1115760"
  },
  {
    "text": "has to take this intermediate",
    "start": "1115760",
    "end": "1117919"
  },
  {
    "text": "ir and create a you know say struct or",
    "start": "1117919",
    "end": "1121360"
  },
  {
    "text": "something right",
    "start": "1121360",
    "end": "1123120"
  },
  {
    "text": "so um one way that you could go with",
    "start": "1123120",
    "end": "1126559"
  },
  {
    "text": "this",
    "start": "1126559",
    "end": "1128160"
  },
  {
    "text": "uh is to",
    "start": "1128160",
    "end": "1131919"
  },
  {
    "text": "uh use there are some faster crates such",
    "start": "1131919",
    "end": "1134640"
  },
  {
    "text": "as json rust",
    "start": "1134640",
    "end": "1136160"
  },
  {
    "text": "where the intermediate representations",
    "start": "1136160",
    "end": "1138320"
  },
  {
    "text": "are more efficient",
    "start": "1138320",
    "end": "1139200"
  },
  {
    "text": "like json rust has a short value type",
    "start": "1139200",
    "end": "1142240"
  },
  {
    "text": "where short strings are on the stack so",
    "start": "1142240",
    "end": "1144799"
  },
  {
    "text": "this",
    "start": "1144799",
    "end": "1145360"
  },
  {
    "text": "makes it faster and use",
    "start": "1145360",
    "end": "1148480"
  },
  {
    "text": "less memory you can also go to binary",
    "start": "1148480",
    "end": "1152000"
  },
  {
    "text": "protocols",
    "start": "1152000",
    "end": "1153360"
  },
  {
    "text": "although many of them have the same",
    "start": "1153360",
    "end": "1155120"
  },
  {
    "text": "problem they need to translate to some",
    "start": "1155120",
    "end": "1156799"
  },
  {
    "text": "integrated layer or something but",
    "start": "1156799",
    "end": "1158880"
  },
  {
    "text": "but some of them can translate directly",
    "start": "1158880",
    "end": "1160720"
  },
  {
    "text": "to you know say a struct or something",
    "start": "1160720",
    "end": "1162799"
  },
  {
    "text": "like that",
    "start": "1162799",
    "end": "1165840"
  },
  {
    "text": "however i think the best strategy is",
    "start": "1167840",
    "end": "1170160"
  },
  {
    "text": "just to avoid civilization altogether",
    "start": "1170160",
    "end": "1172480"
  },
  {
    "text": "no serialization so what does this mean",
    "start": "1172480",
    "end": "1174720"
  },
  {
    "text": "evan this is what you ask what does it",
    "start": "1174720",
    "end": "1176480"
  },
  {
    "text": "mean",
    "start": "1176480",
    "end": "1177360"
  },
  {
    "text": "what we mean is using something like",
    "start": "1177360",
    "end": "1179440"
  },
  {
    "text": "flat buffers",
    "start": "1179440",
    "end": "1180400"
  },
  {
    "text": "you might have heard of it captain proto",
    "start": "1180400",
    "end": "1182720"
  },
  {
    "text": "apache arrow",
    "start": "1182720",
    "end": "1184400"
  },
  {
    "text": "it does take some work to actually",
    "start": "1184400",
    "end": "1186320"
  },
  {
    "text": "create these formats",
    "start": "1186320",
    "end": "1187840"
  },
  {
    "text": "but what is usually meant is that",
    "start": "1187840",
    "end": "1189120"
  },
  {
    "text": "there's no deserialization meaning",
    "start": "1189120",
    "end": "1191360"
  },
  {
    "text": "once i create a flat buffer i can",
    "start": "1191360",
    "end": "1194400"
  },
  {
    "text": "send it over the wire when i get it",
    "start": "1194400",
    "end": "1198160"
  },
  {
    "text": "you know i can actually examine the flat",
    "start": "1198160",
    "end": "1200000"
  },
  {
    "text": "buffer directly from the network",
    "start": "1200000",
    "end": "1201760"
  },
  {
    "text": "buffers and extract values out without",
    "start": "1201760",
    "end": "1206240"
  },
  {
    "text": "creating another into you know without",
    "start": "1206240",
    "end": "1210240"
  },
  {
    "text": "translating and deserializing it to my",
    "start": "1210240",
    "end": "1211760"
  },
  {
    "text": "final form so this is really fast",
    "start": "1211760",
    "end": "1214640"
  },
  {
    "text": "it you know usually you can do no copy",
    "start": "1214640",
    "end": "1216880"
  },
  {
    "text": "or no deserialization this is",
    "start": "1216880",
    "end": "1218640"
  },
  {
    "text": "really really good and i highly",
    "start": "1218640",
    "end": "1221360"
  },
  {
    "text": "recommend it",
    "start": "1221360",
    "end": "1223919"
  },
  {
    "text": "so just an example from prostate json",
    "start": "1225200",
    "end": "1229360"
  },
  {
    "text": "that sorry",
    "start": "1229360",
    "end": "1233039"
  },
  {
    "text": "that um in this case",
    "start": "1233039",
    "end": "1237600"
  },
  {
    "text": "uh using my laptop and again the",
    "start": "1237600",
    "end": "1240159"
  },
  {
    "text": "comparison is available in this repo",
    "start": "1240159",
    "end": "1241840"
  },
  {
    "text": "that i have",
    "start": "1241840",
    "end": "1243679"
  },
  {
    "text": "and i used d-hat for heat profiling",
    "start": "1243679",
    "end": "1249679"
  },
  {
    "text": "what we find is that using",
    "start": "1249679",
    "end": "1254720"
  },
  {
    "text": "json rust where it would reduce the",
    "start": "1255200",
    "end": "1257600"
  },
  {
    "text": "maximum heat used",
    "start": "1257600",
    "end": "1260080"
  },
  {
    "text": "so d-hat actually measures how much heap",
    "start": "1260080",
    "end": "1263200"
  },
  {
    "text": "is used at the point",
    "start": "1263200",
    "end": "1264880"
  },
  {
    "text": "where in the max of when the heap is um",
    "start": "1264880",
    "end": "1268240"
  },
  {
    "text": "the largest in your application runtime",
    "start": "1268240",
    "end": "1271919"
  },
  {
    "text": "and we can see that it is quite a bit",
    "start": "1271919",
    "end": "1273440"
  },
  {
    "text": "faster too it's like maybe 30-some",
    "start": "1273440",
    "end": "1274960"
  },
  {
    "text": "percent",
    "start": "1274960",
    "end": "1275679"
  },
  {
    "text": "you know one-third faster because it has",
    "start": "1275679",
    "end": "1278320"
  },
  {
    "text": "to allocate less",
    "start": "1278320",
    "end": "1279679"
  },
  {
    "text": "uh and again this is the technique of",
    "start": "1279679",
    "end": "1281520"
  },
  {
    "text": "using the civilization where",
    "start": "1281520",
    "end": "1284080"
  },
  {
    "text": "uh it uh uses a stack value",
    "start": "1284080",
    "end": "1287440"
  },
  {
    "text": "a short string right and if you used no",
    "start": "1287440",
    "end": "1289840"
  },
  {
    "text": "zero legition it would be much faster",
    "start": "1289840",
    "end": "1291440"
  },
  {
    "text": "than that",
    "start": "1291440",
    "end": "1292799"
  },
  {
    "text": "um however uh for some reason the total",
    "start": "1292799",
    "end": "1295280"
  },
  {
    "text": "allocations",
    "start": "1295280",
    "end": "1296080"
  },
  {
    "text": "you know does not uh go down this is",
    "start": "1296080",
    "end": "1298159"
  },
  {
    "text": "like basically allocate",
    "start": "1298159",
    "end": "1300320"
  },
  {
    "text": "so on and just to show you i think this",
    "start": "1300320",
    "end": "1304080"
  },
  {
    "text": "is uh good",
    "start": "1304080",
    "end": "1305200"
  },
  {
    "text": "to show you what the d-hat output looks",
    "start": "1305200",
    "end": "1306960"
  },
  {
    "text": "like",
    "start": "1306960",
    "end": "1308320"
  },
  {
    "text": "um it basically gives you the top",
    "start": "1308320",
    "end": "1311360"
  },
  {
    "text": "notes at a certain time but you can look",
    "start": "1311360",
    "end": "1314159"
  },
  {
    "text": "at",
    "start": "1314159",
    "end": "1314559"
  },
  {
    "text": "what are the top allocators for all time",
    "start": "1314559",
    "end": "1318480"
  },
  {
    "text": "and it will tell you it will give you a",
    "start": "1318480",
    "end": "1320799"
  },
  {
    "text": "stack trace",
    "start": "1320799",
    "end": "1321679"
  },
  {
    "text": "here we can see that the stock trace you",
    "start": "1321679",
    "end": "1323360"
  },
  {
    "text": "can easily trace it to 30 json",
    "start": "1323360",
    "end": "1325280"
  },
  {
    "text": "when you know basically creating json",
    "start": "1325280",
    "end": "1327200"
  },
  {
    "text": "objects that is using up",
    "start": "1327200",
    "end": "1329280"
  },
  {
    "text": "that is 90 of your allocations",
    "start": "1329280",
    "end": "1332720"
  },
  {
    "text": "and it will tell you things like what is",
    "start": "1332720",
    "end": "1335120"
  },
  {
    "text": "the average size for the allocations",
    "start": "1335120",
    "end": "1336960"
  },
  {
    "text": "and the lifetimes that on average is 73",
    "start": "1336960",
    "end": "1340159"
  },
  {
    "text": "microseconds",
    "start": "1340159",
    "end": "1341679"
  },
  {
    "text": "so it gives you a lot of really useful",
    "start": "1341679",
    "end": "1343679"
  },
  {
    "text": "memory profiling information okay",
    "start": "1343679",
    "end": "1347760"
  },
  {
    "text": "and just really quickly we'll talk about",
    "start": "1347760",
    "end": "1350320"
  },
  {
    "text": "a few extra memory allocation topics",
    "start": "1350320",
    "end": "1353120"
  },
  {
    "text": "in russ you can switch to memory",
    "start": "1353120",
    "end": "1354480"
  },
  {
    "text": "allocator",
    "start": "1354480",
    "end": "1356559"
  },
  {
    "text": "there are two popular alternatives to",
    "start": "1356559",
    "end": "1358400"
  },
  {
    "text": "the standard allocator one is",
    "start": "1358400",
    "end": "1360480"
  },
  {
    "text": "j malloc which came from uh well it",
    "start": "1360480",
    "end": "1363679"
  },
  {
    "text": "originally came from",
    "start": "1363679",
    "end": "1366159"
  },
  {
    "text": "bsd sorry but it was popularized by",
    "start": "1366159",
    "end": "1368960"
  },
  {
    "text": "facebook",
    "start": "1368960",
    "end": "1370159"
  },
  {
    "text": "and was created for reducing",
    "start": "1370159",
    "end": "1372159"
  },
  {
    "text": "fragmentation and concurrency",
    "start": "1372159",
    "end": "1374480"
  },
  {
    "text": "it does have a bit of overhead in terms",
    "start": "1374480",
    "end": "1376799"
  },
  {
    "text": "of memory",
    "start": "1376799",
    "end": "1377840"
  },
  {
    "text": "used but it is faster than the standard",
    "start": "1377840",
    "end": "1381600"
  },
  {
    "text": "allocator another one to check out is",
    "start": "1381600",
    "end": "1384080"
  },
  {
    "text": "called we malloc from microsoft",
    "start": "1384080",
    "end": "1386000"
  },
  {
    "text": "it is designed to be a small secure",
    "start": "1386000",
    "end": "1387840"
  },
  {
    "text": "replacement for malloc",
    "start": "1387840",
    "end": "1389360"
  },
  {
    "text": "and in practice i do believe it is also",
    "start": "1389360",
    "end": "1392080"
  },
  {
    "text": "faster",
    "start": "1392080",
    "end": "1393120"
  },
  {
    "text": "so you can check that out",
    "start": "1393120",
    "end": "1396720"
  },
  {
    "text": "and i have a benchmark that shows that",
    "start": "1397600",
    "end": "1400080"
  },
  {
    "text": "sometimes",
    "start": "1400080",
    "end": "1401120"
  },
  {
    "text": "it is faster",
    "start": "1401120",
    "end": "1403840"
  },
  {
    "text": "okay finally for certain",
    "start": "1404720",
    "end": "1407840"
  },
  {
    "text": "use cases you can use bomb arena",
    "start": "1407840",
    "end": "1411200"
  },
  {
    "text": "allocators",
    "start": "1411200",
    "end": "1413760"
  },
  {
    "text": "and um",
    "start": "1415440",
    "end": "1418320"
  },
  {
    "text": "usually this is when for special cases",
    "start": "1418559",
    "end": "1421679"
  },
  {
    "text": "where",
    "start": "1421679",
    "end": "1422559"
  },
  {
    "text": "you know let's let's say uh you want a",
    "start": "1422559",
    "end": "1424880"
  },
  {
    "text": "sandbox",
    "start": "1424880",
    "end": "1425679"
  },
  {
    "text": "some memory for a part of your app you",
    "start": "1425679",
    "end": "1428320"
  },
  {
    "text": "know for queries in a database or",
    "start": "1428320",
    "end": "1429919"
  },
  {
    "text": "certain namespaces that kind of thing",
    "start": "1429919",
    "end": "1431840"
  },
  {
    "text": "you can just take this elegant memory by",
    "start": "1431840",
    "end": "1433840"
  },
  {
    "text": "bumping pointer",
    "start": "1433840",
    "end": "1434960"
  },
  {
    "text": "and then you can free it all at once so",
    "start": "1434960",
    "end": "1436960"
  },
  {
    "text": "for these things there is a crate called",
    "start": "1436960",
    "end": "1438559"
  },
  {
    "text": "bumpalo which is",
    "start": "1438559",
    "end": "1439520"
  },
  {
    "text": "which is really great",
    "start": "1439520",
    "end": "1442400"
  },
  {
    "text": "and that can help sometimes when you",
    "start": "1442640",
    "end": "1445360"
  },
  {
    "text": "want to",
    "start": "1445360",
    "end": "1446000"
  },
  {
    "text": "control memory use",
    "start": "1446000",
    "end": "1449279"
  },
  {
    "text": "finally you might be like evan so",
    "start": "1449840",
    "end": "1452720"
  },
  {
    "text": "reducing",
    "start": "1452720",
    "end": "1453520"
  },
  {
    "text": "keep allocation is great but i want to",
    "start": "1453520",
    "end": "1455360"
  },
  {
    "text": "actually make my binary smaller",
    "start": "1455360",
    "end": "1458880"
  },
  {
    "text": "you should check out the cargo bloat",
    "start": "1458880",
    "end": "1460960"
  },
  {
    "text": "crate this will analyze",
    "start": "1460960",
    "end": "1462880"
  },
  {
    "text": "your rust binaries and",
    "start": "1462880",
    "end": "1466480"
  },
  {
    "text": "figure out where is your space being",
    "start": "1466480",
    "end": "1468880"
  },
  {
    "text": "used",
    "start": "1468880",
    "end": "1469679"
  },
  {
    "text": "but there are tons of ways that you",
    "start": "1469679",
    "end": "1472480"
  },
  {
    "text": "could actually reduce you could get down",
    "start": "1472480",
    "end": "1474000"
  },
  {
    "text": "to",
    "start": "1474000",
    "end": "1474400"
  },
  {
    "text": "really really small like well below",
    "start": "1474400",
    "end": "1476400"
  },
  {
    "text": "megabyte",
    "start": "1476400",
    "end": "1477440"
  },
  {
    "text": "binaries you can check out this and by",
    "start": "1477440",
    "end": "1479600"
  },
  {
    "text": "the way",
    "start": "1479600",
    "end": "1481919"
  },
  {
    "text": "the slides will be shared and you can",
    "start": "1482320",
    "end": "1485440"
  },
  {
    "text": "actually click",
    "start": "1485440",
    "end": "1486000"
  },
  {
    "text": "you should be able to click on them",
    "start": "1486000",
    "end": "1487919"
  },
  {
    "text": "there there's a url",
    "start": "1487919",
    "end": "1489440"
  },
  {
    "text": "so there is a blog that gives",
    "start": "1489440",
    "end": "1493279"
  },
  {
    "text": "many things for reducing the size of",
    "start": "1493279",
    "end": "1495200"
  },
  {
    "text": "binary including stripping",
    "start": "1495200",
    "end": "1497440"
  },
  {
    "text": "reducing debug things optimizing for",
    "start": "1497440",
    "end": "1500640"
  },
  {
    "text": "size instead of speed",
    "start": "1500640",
    "end": "1502799"
  },
  {
    "text": "and uh if you really want to remove the",
    "start": "1502799",
    "end": "1505520"
  },
  {
    "text": "standard library that's a way you can",
    "start": "1505520",
    "end": "1506880"
  },
  {
    "text": "get down to extremely small like c",
    "start": "1506880",
    "end": "1508559"
  },
  {
    "text": "size things but be warned that",
    "start": "1508559",
    "end": "1512000"
  },
  {
    "text": "that has a lot of trade-offs",
    "start": "1512000",
    "end": "1515120"
  },
  {
    "text": "and i'm not quite sure if they are",
    "start": "1515120",
    "end": "1518720"
  },
  {
    "text": "worth it but it depends on use case",
    "start": "1518720",
    "end": "1522480"
  },
  {
    "text": "so um thank you very much you can feel",
    "start": "1522640",
    "end": "1525919"
  },
  {
    "text": "free to reach out to me on",
    "start": "1525919",
    "end": "1529039"
  },
  {
    "text": "instagram sorry twitter instagram",
    "start": "1529039",
    "end": "1533120"
  },
  {
    "text": "github etc",
    "start": "1533120",
    "end": "1537360"
  }
]