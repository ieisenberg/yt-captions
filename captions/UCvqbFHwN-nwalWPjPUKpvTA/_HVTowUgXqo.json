[
  {
    "text": "hello everyone uh good afternoon so so we are here uh we are so excited to uh",
    "start": "40",
    "end": "6919"
  },
  {
    "text": "here with you to talk about go golang and Wazi so I'm going to tell tell you",
    "start": "6919",
    "end": "12200"
  },
  {
    "text": "about the agenda what we want to talk about so we'll tell tell into um I mean",
    "start": "12200",
    "end": "18119"
  },
  {
    "text": "guazi and discuss bit about history about Wazi and how it was added to",
    "start": "18119",
    "end": "23359"
  },
  {
    "text": "golang in 1.21 uh release and then we'll start uh",
    "start": "23359",
    "end": "28679"
  },
  {
    "text": "presentation with uh web assembly architecture and wasi I mean web",
    "start": "28679",
    "end": "34480"
  },
  {
    "text": "assembly interface uh will go deep dive into wasi how it works and all and then",
    "start": "34480",
    "end": "40200"
  },
  {
    "text": "we'll uh go through a little bit about goang like goang tool chain and go goang",
    "start": "40200",
    "end": "47199"
  },
  {
    "text": "ecosystem then we'll cover few uh use cases of vazi uh in go application today",
    "start": "47199",
    "end": "53800"
  },
  {
    "text": "uh we will show goang I mean a plugin how we build plugin using vasi and goang",
    "start": "53800",
    "end": "59760"
  },
  {
    "text": "and and finally we want to talk a bit about ongoing development in goang and waji uh like waji Preview 2 and and the",
    "start": "59760",
    "end": "68880"
  },
  {
    "text": "next steps for golang and waji to continue their journey together so we'll be discussing more about the histories",
    "start": "68880",
    "end": "74840"
  },
  {
    "text": "and all so my name is Rajiv I'm originally from Bihar India and I'm currently work",
    "start": "74840",
    "end": "82200"
  },
  {
    "text": "as a software engineer AT AP M musk so I'm a part of platform engineering team I'm located in Bangalore India I did my",
    "start": "82200",
    "end": "90479"
  },
  {
    "text": "College in Bangalore India from jss College of Engineering uh JS College of academy uh Bangalore I I have a degree",
    "start": "90479",
    "end": "97479"
  },
  {
    "text": "in information science and engineering department um uh department and I started working with go in 2020 so I was",
    "start": "97479",
    "end": "105159"
  },
  {
    "text": "part of um a program called Google season of dogs I did ghot with grpc Gateway so there I learned about goang",
    "start": "105159",
    "end": "112680"
  },
  {
    "text": "and obviously I am op Source Enthusiast I contributed to open source projects and program like um season of dogs LFX",
    "start": "112680",
    "end": "120360"
  },
  {
    "text": "mentorship and sum of code I work with companies like lumo red bu and economize",
    "start": "120360",
    "end": "126640"
  },
  {
    "text": "so in my College de days so I'm here with Asel um do you",
    "start": "126640",
    "end": "132760"
  },
  {
    "text": "want to tell us bit about yourself Asel sure so my name is aill I am Orin from",
    "start": "132760",
    "end": "140560"
  },
  {
    "text": "France I'm really happy to have you all here uh but I flew here I'm based in San Francisco now um I've been a go",
    "start": "140560",
    "end": "146879"
  },
  {
    "text": "developer for almost 10 years and started working on the compiler in 2023 I do love open source work um I",
    "start": "146879",
    "end": "155440"
  },
  {
    "text": "contribute to wero maintain several libraries some of them that you might be",
    "start": "155440",
    "end": "160680"
  },
  {
    "text": "using uh last year I joined the team that develops and maintains the web",
    "start": "160680",
    "end": "165879"
  },
  {
    "text": "asembly Port of go and I'm also the co-founder of dispatch do run where",
    "start": "165879",
    "end": "171280"
  },
  {
    "text": "we're working on the platform to create reliable distributed systems so Rajiv and I come from very",
    "start": "171280",
    "end": "179319"
  },
  {
    "text": "different places and we connected online in the go community and thought it would be nice",
    "start": "179319",
    "end": "185879"
  },
  {
    "text": "to come and tell the stories of go and web assembly to a broader",
    "start": "185879",
    "end": "191480"
  },
  {
    "text": "audience so open source is really core to the story we're here to tell not only because go is powered by",
    "start": "191480",
    "end": "199159"
  },
  {
    "text": "an open source Community but because it's thanks to this community that the world we're here to talk about today",
    "start": "199159",
    "end": "207519"
  },
  {
    "text": "happened so web assembly originated in the browser it's bite code that is executed",
    "start": "208760",
    "end": "217200"
  },
  {
    "text": "by a virtual machine um the V VM is also referred to",
    "start": "217200",
    "end": "222239"
  },
  {
    "text": "as the host or the runtime and by default web assembly is purely just memory and compute but the",
    "start": "222239",
    "end": "229280"
  },
  {
    "text": "runtime can expose functions to the guest module and those are called host",
    "start": "229280",
    "end": "235079"
  },
  {
    "text": "functions in recent years Standalone run times have emerged like was zero wasm",
    "start": "235079",
    "end": "240680"
  },
  {
    "text": "time wasmer or wasm Edge and while these run times can be",
    "start": "240680",
    "end": "246920"
  },
  {
    "text": "used as uh as in to run compiled uh web assembly modules they can also be embedded into",
    "start": "246920",
    "end": "254239"
  },
  {
    "text": "existing applications and this is a very powerful model uh for example you can write a",
    "start": "254239",
    "end": "260600"
  },
  {
    "text": "plug-in in Rust compile it to web assembly and embed it in a go",
    "start": "260600",
    "end": "267560"
  },
  {
    "text": "Application web as runtime also offer fairly strong send boxing uh so in some",
    "start": "267560",
    "end": "274280"
  },
  {
    "text": "case we can even run untrusted code AS extensions to our",
    "start": "274280",
    "end": "279639"
  },
  {
    "text": "applications um and however uh for all those capabilities to work there needs",
    "start": "279639",
    "end": "286479"
  },
  {
    "text": "to be a common interface that's spoken by both the runtime and the modules and this is the web assembly",
    "start": "286479",
    "end": "293440"
  },
  {
    "text": "system interface so from now on I'm going to abbreviate web assembly system interface",
    "start": "293440",
    "end": "300919"
  },
  {
    "text": "as wasi and wasi is the ABI that compilers can Target to produce web assembly",
    "start": "300919",
    "end": "307919"
  },
  {
    "text": "modules and the runtimes Implement wasi to provide access to system",
    "start": "307919",
    "end": "313639"
  },
  {
    "text": "resources in a way um it makes possible to create very lightweight containers in",
    "start": "313639",
    "end": "320919"
  },
  {
    "text": "user space without assistance from the kernel the host application can choose",
    "start": "320919",
    "end": "328479"
  },
  {
    "text": "which environment by uh five stem M points are exposed to each instance of the",
    "start": "328479",
    "end": "335479"
  },
  {
    "text": "modules and there are currently two released version of wasi called preview one and preview two that are often",
    "start": "335479",
    "end": "342000"
  },
  {
    "text": "referred to as Wy P1 and Wy P2 and at this times compilers that Target wasi",
    "start": "342000",
    "end": "348520"
  },
  {
    "text": "have mostly implemented preview one so we're talking about fairly bleeding edge technology here uh with a",
    "start": "348520",
    "end": "355880"
  },
  {
    "text": "lot of active development in the space and like I was was saying earlier",
    "start": "355880",
    "end": "361000"
  },
  {
    "text": "we need wasi because we need a portable interface that compilers and runtimes can work",
    "start": "361000",
    "end": "366280"
  },
  {
    "text": "with if we only supported tool chain was the combination of one compiler and one runtime there would be no need for",
    "start": "366280",
    "end": "372919"
  },
  {
    "text": "standard specification moreover a specification for accessing system resources is",
    "start": "372919",
    "end": "379520"
  },
  {
    "text": "important because those resources are important programs need files sockets",
    "start": "379520",
    "end": "385400"
  },
  {
    "text": "environment variables clocks I mean I don't know what kind of useful",
    "start": "385400",
    "end": "392000"
  },
  {
    "text": "programm you can write without those Primitives so now that we have a sense",
    "start": "392000",
    "end": "397680"
  },
  {
    "text": "of what's Wazi and uh why we need it uh rajie how about you talk us tell us about",
    "start": "397680",
    "end": "404360"
  },
  {
    "text": "go yeah thank you Ash so let's start with what is go so go is a statically",
    "start": "404360",
    "end": "410759"
  },
  {
    "text": "typed uh compiled garbage collected language so the development started in",
    "start": "410759",
    "end": "416000"
  },
  {
    "text": "2007 at Google and it was publicly released in 2009 and um to in Google",
    "start": "416000",
    "end": "422199"
  },
  {
    "text": "obviously so go is a multi paradism programming language oriented towards needs of developing secure and",
    "start": "422199",
    "end": "428919"
  },
  {
    "text": "production quality applications it is language developed and a maintained by Google as an open",
    "start": "428919",
    "end": "434639"
  },
  {
    "text": "source project I said earlier so so but but instead of telling you a",
    "start": "434639",
    "end": "440080"
  },
  {
    "text": "long story uh let me show you an example so this is a go program that prints a",
    "start": "440080",
    "end": "445599"
  },
  {
    "text": "hello hello uh hello message as you can see it is quite simple even if you never",
    "start": "445599",
    "end": "451479"
  },
  {
    "text": "looked at go program before you will able to make sense of the code and this is a value of go go is easy to pick up",
    "start": "451479",
    "end": "459879"
  },
  {
    "text": "go has R standard Library Advanced concurrency uh Primitives built-in in language like go routines",
    "start": "459879",
    "end": "466599"
  },
  {
    "text": "channels and it's also very portable so uh it compiles to multitude of targets",
    "start": "466599",
    "end": "473199"
  },
  {
    "text": "including web assembly so this uh the go pram is a",
    "start": "473199",
    "end": "479840"
  },
  {
    "text": "entry point of go go tool chain basically go tool chain standardize how",
    "start": "479840",
    "end": "485400"
  },
  {
    "text": "developers uh maintain and build their uh application I have listed uh list uh",
    "start": "485400",
    "end": "491879"
  },
  {
    "text": "few commands that I use uh day-to-day work uh with go so as you can see uh it",
    "start": "491879",
    "end": "498000"
  },
  {
    "text": "provides a lot of standard uh tooling uh for building managing dependency testing",
    "start": "498000",
    "end": "504000"
  },
  {
    "text": "and formatting uh the code but also more advanced stuff like CPU profiling memory",
    "start": "504000",
    "end": "509520"
  },
  {
    "text": "profiling so you can profile the program and optimize as much you",
    "start": "509520",
    "end": "515440"
  },
  {
    "text": "can but go is lot more than a language I mean it's a ecosystem of high quality",
    "start": "516159",
    "end": "521399"
  },
  {
    "text": "open source tools and libraries that largely contribute to developer",
    "start": "521399",
    "end": "527240"
  },
  {
    "text": "productivity beyond that it's also a tool with very W wide breth of application I'm mentioning all this",
    "start": "527240",
    "end": "534000"
  },
  {
    "text": "because when using go the entire tool tool chain is available when compiling to web assembly",
    "start": "534000",
    "end": "540800"
  },
  {
    "text": "so ashel how about how you tell us how aaji was developed in",
    "start": "540800",
    "end": "547240"
  },
  {
    "text": "go sure so since a lot of you here I imagine are software developers I'm sure",
    "start": "547519",
    "end": "553519"
  },
  {
    "text": "you're going to enjoy the story in particular because you've probably lived through similar Ventures",
    "start": "553519",
    "end": "560560"
  },
  {
    "text": "before web support was first added to go in 1.11 and that shipped in",
    "start": "560560",
    "end": "568120"
  },
  {
    "text": "2018 but Wazi compilation Target was released last year in go21 this is 5 years and 10 versions",
    "start": "568120",
    "end": "576760"
  },
  {
    "text": "apart and that's because go is for a big part developed by its community and for",
    "start": "576760",
    "end": "581800"
  },
  {
    "text": "a while there weren't enough contributors available to work on",
    "start": "581800",
    "end": "587680"
  },
  {
    "text": "wasi that changed in 2023 when Johan brenor posted a message on the Gopher",
    "start": "587680",
    "end": "593200"
  },
  {
    "text": "slack asking if anyone was interested in forming a team to maintain the web assembly port",
    "start": "593200",
    "end": "601320"
  },
  {
    "text": "so my co-founder replied and a few days later we had a little group of 14",
    "start": "601720",
    "end": "607920"
  },
  {
    "text": "members ready to pick up the work but imagine the situation four Engineers who had never",
    "start": "607920",
    "end": "614519"
  },
  {
    "text": "worked together on the go compiler or runtime and we picked up an abandoned branch that was started few years before",
    "start": "614519",
    "end": "621680"
  },
  {
    "text": "to add wzy and had massively diverg from Upstream so let me tell you we weren't",
    "start": "621680",
    "end": "628880"
  },
  {
    "text": "necessarily set on a path for Success our task was first to split out",
    "start": "628880",
    "end": "634440"
  },
  {
    "text": "the compiler from the runtime changes so we could submit individual proposal to the go um the go project and deliver",
    "start": "634440",
    "end": "641600"
  },
  {
    "text": "incremental results we submitted a first proposal to add a compiler primitive called gowm",
    "start": "641600",
    "end": "649519"
  },
  {
    "text": "import which allows developers to declare go functions as host",
    "start": "649519",
    "end": "656040"
  },
  {
    "text": "Imports and a second uh proposal to add a new compilation Target for wasi",
    "start": "656040",
    "end": "661800"
  },
  {
    "text": "preview one that we called wasy P1 and as a side note we heard that more",
    "start": "661800",
    "end": "667320"
  },
  {
    "text": "language are adopting the terms wasp1 and wasp2 and I personally really enjoy",
    "start": "667320",
    "end": "672360"
  },
  {
    "text": "this cross language collaboration that we have uh in the",
    "start": "672360",
    "end": "677079"
  },
  {
    "text": "community so while we were going through the development of wp1 a major challenge",
    "start": "678240",
    "end": "683760"
  },
  {
    "text": "was dealing with the difference of interpretation of the wasi spec and you know various languages and",
    "start": "683760",
    "end": "692440"
  },
  {
    "text": "compilers the alternative compiler tinyo uh which is built on lvm had support for",
    "start": "692440",
    "end": "699760"
  },
  {
    "text": "Wy for a few years already so since Tino already supported it I thought this is",
    "start": "699760",
    "end": "705880"
  },
  {
    "text": "great I could use the combination of tiny go and wasm time as a",
    "start": "705880",
    "end": "711000"
  },
  {
    "text": "reference however the file system impation in of wzi in Tino was only partially completed",
    "start": "711000",
    "end": "718839"
  },
  {
    "text": "so while we were working on bringing wp1 to Big go I also took a side quest to",
    "start": "718839",
    "end": "724000"
  },
  {
    "text": "finish the wp1 implementation in tiny go in order to have a reference I could compare",
    "start": "724000",
    "end": "730760"
  },
  {
    "text": "to but through the perseverance of the team and after a couple of months we had",
    "start": "731760",
    "end": "738120"
  },
  {
    "text": "the go wasam import directive merged in which we could use to implement wp1",
    "start": "738120",
    "end": "746160"
  },
  {
    "text": "Ino and as we made progress on the wp1 implementation more developers tagged",
    "start": "746160",
    "end": "751560"
  },
  {
    "text": "along to contribute improvements and at this stage we",
    "start": "751560",
    "end": "757279"
  },
  {
    "text": "started getting a lot of support from the go team as well and really felt like we were going to pull it",
    "start": "757279",
    "end": "762680"
  },
  {
    "text": "off and finally the wp1 target went live in go11 which was released in September",
    "start": "762680",
    "end": "769920"
  },
  {
    "text": "of last year and now I want to take a minute to",
    "start": "769920",
    "end": "775600"
  },
  {
    "text": "thank all the contributors who have participated in creating the wasi pan Port of go there's too",
    "start": "775600",
    "end": "783270"
  },
  {
    "text": "[Applause] many there's way too many you know to",
    "start": "783270",
    "end": "791000"
  },
  {
    "text": "name them all on the slid but if you're watching this talk you know who you are and you know the amazing role that you",
    "start": "791000",
    "end": "797320"
  },
  {
    "text": "took in making this a reality it's truly a team effort from people who are mostly",
    "start": "797320",
    "end": "802560"
  },
  {
    "text": "never met in person and to me this is a great Showcase of the power of Open Source",
    "start": "802560",
    "end": "808120"
  },
  {
    "text": "communities and now I'll head it over to Rajiv to tell us more about what we can",
    "start": "808120",
    "end": "813240"
  },
  {
    "text": "do with Wazi and go thank you as so we mentioned uh that the first",
    "start": "813240",
    "end": "820839"
  },
  {
    "text": "edition was a compiler uh directive go ASM go ASM import and that is uh this is",
    "start": "820839",
    "end": "827399"
  },
  {
    "text": "uh how we use it in go so the program declares a go function signature uh",
    "start": "827399",
    "end": "833000"
  },
  {
    "text": "without the body of the function and preceded uh with the directive declaring the names of vam modules and exportx",
    "start": "833000",
    "end": "840120"
  },
  {
    "text": "functions that it links to so we can pass pointer in a linear uh",
    "start": "840120",
    "end": "845399"
  },
  {
    "text": "program uh program memory and other primitive types so and compilers take carees all the translation to we web",
    "start": "845399",
    "end": "852519"
  },
  {
    "text": "assembly types as you can see this is fairly lowlevel directive only Library",
    "start": "852519",
    "end": "858040"
  },
  {
    "text": "maintainers usually uh care to use it and would it uh would expose higher level API that invokes uh the",
    "start": "858040",
    "end": "867160"
  },
  {
    "text": "Imports so now let's take a look at how we can build go program targeting wp1 so",
    "start": "867240",
    "end": "874079"
  },
  {
    "text": "the goar and Goos environment variables are used to control the target platform",
    "start": "874079",
    "end": "879560"
  },
  {
    "text": "so we set them to vasm and wasi P1 to uh build vazi module and it doesn't get",
    "start": "879560",
    "end": "886279"
  },
  {
    "text": "much simpler than that to build u a go pram with uh for",
    "start": "886279",
    "end": "891880"
  },
  {
    "text": "wp1 so in this program The Go Asam import directive is used underneath uh",
    "start": "891880",
    "end": "897160"
  },
  {
    "text": "by the go run time to interact uh with the host and then we run our program",
    "start": "897160",
    "end": "902320"
  },
  {
    "text": "with runtime like wero we are I use wero to run this program we can use any other run times too so we see our uh when we",
    "start": "902320",
    "end": "909920"
  },
  {
    "text": "run the program we see our messages uh in the console like hello Wii uh",
    "start": "909920",
    "end": "915759"
  },
  {
    "text": "P1 so let me talk about the use cases of ip1 so there are many application of ip1",
    "start": "916680",
    "end": "923560"
  },
  {
    "text": "I selected uh this one because it highlights the plug-in uh model of web assembly",
    "start": "923560",
    "end": "929680"
  },
  {
    "text": "so wasi is currently primarily useful for writing plugins in any language that can compile to WM or wasi and then",
    "start": "929680",
    "end": "937319"
  },
  {
    "text": "executed in any language using VM or waji uh virtual machines so there is a project called",
    "start": "937319",
    "end": "944920"
  },
  {
    "text": "sqlc so which generates a types of core from SQL and in this project they need",
    "start": "944920",
    "end": "950680"
  },
  {
    "text": "differential plug-in to make things happen like sqlc jeno sqlc python sqlc",
    "start": "950680",
    "end": "955959"
  },
  {
    "text": "cotl Etc so for every is they extract the go python cotl etc's uh Cod gen into",
    "start": "955959",
    "end": "963319"
  },
  {
    "text": "Standalone respective um particular language plugins what I mentioned like jeno gen Python and cotl which are then",
    "start": "963319",
    "end": "971519"
  },
  {
    "text": "compiled uh I mean basically which are then built using VP one this allows people to customize the",
    "start": "971519",
    "end": "978839"
  },
  {
    "text": "output by forking the particular language plugin but not the whole repository of",
    "start": "978839",
    "end": "986160"
  },
  {
    "text": "sqlc go can be be compiled both as a plug-in and as a plug-in Runner like",
    "start": "986880",
    "end": "992079"
  },
  {
    "text": "vazo for example in the case of sqlc they they can run plugins compiled to",
    "start": "992079",
    "end": "997440"
  },
  {
    "text": "wasi and then uh write their own plugins uh to go and compile them to",
    "start": "997440",
    "end": "1002680"
  },
  {
    "text": "wasi the the main uh the main reason to for using vasi P1 in the sqlc is that um",
    "start": "1002680",
    "end": "1009720"
  },
  {
    "text": "it's much smaller code change I me I mean amount of code to change to write plugins so this is the main reason uh",
    "start": "1009720",
    "end": "1016639"
  },
  {
    "text": "they use wp1 in sqlc uh project",
    "start": "1016639",
    "end": "1020839"
  },
  {
    "text": "so let me talk about the another U uh use case like uh we have a cube schedular vasm extension so web assembly",
    "start": "1022720",
    "end": "1030640"
  },
  {
    "text": "enables the execution code written in diverse language with a secure environment and it verality allows",
    "start": "1030640",
    "end": "1038199"
  },
  {
    "text": "developers to leverage uh existing existing code based to uh vasm for",
    "start": "1038199",
    "end": "1043600"
  },
  {
    "text": "various purposes and integrating web assembly into Cube SED owers to extend",
    "start": "1043600",
    "end": "1048720"
  },
  {
    "text": "of of um Cube schedular functionality like I mean basically uh through custom",
    "start": "1048720",
    "end": "1054160"
  },
  {
    "text": "plugins compiled to uh vasm binaries this approach enriches the kubernetes",
    "start": "1054160",
    "end": "1059360"
  },
  {
    "text": "Shing capability with Necessities uh to changes to core uh without changing uh",
    "start": "1059360",
    "end": "1064520"
  },
  {
    "text": "the core implementation of cube scheder so by embedding the web runtime like V",
    "start": "1064520",
    "end": "1070720"
  },
  {
    "text": "and directly uh basically directly into scheder the process of incor incorporating the custom plugins became",
    "start": "1070720",
    "end": "1076240"
  },
  {
    "text": "like very streamlined I mean uh configuration based loading and of these plugins",
    "start": "1076240",
    "end": "1082039"
  },
  {
    "text": "further simplifies the basically further simplifies the custom customization process for",
    "start": "1082039",
    "end": "1087559"
  },
  {
    "text": "users so today the I mean uh we can extend the cube scheder uh using uh",
    "start": "1087559",
    "end": "1093799"
  },
  {
    "text": "scheduling framework 2 but it's not trivial right I mean once you uh once you develop your scheder um and there is",
    "start": "1093799",
    "end": "1101480"
  },
  {
    "text": "additional uh deployment and configuration uh work together to integrate into U your",
    "start": "1101480",
    "end": "1107280"
  },
  {
    "text": "cluster and this is not onetime task it needs to be repeated for every uh",
    "start": "1107280",
    "end": "1112640"
  },
  {
    "text": "cluster upgrade so basically the cube scheder VM extension project uh uh",
    "start": "1112640",
    "end": "1118480"
  },
  {
    "text": "elevates the burden by enabling the default uh scheduler to load custom plugins in",
    "start": "1118480",
    "end": "1124840"
  },
  {
    "text": "vasm um I said you like this eliminates the challenges like uh What uh what I said like uh changing U we don't have to",
    "start": "1124840",
    "end": "1132159"
  },
  {
    "text": "change the core implementation of the Q or U like that so additionally also",
    "start": "1132159",
    "end": "1138760"
  },
  {
    "text": "opens the possibility for writing um I mean uh languages other than go so now I",
    "start": "1138760",
    "end": "1145360"
  },
  {
    "text": "will head over to Asel to tell us about the qualities and limitation of V",
    "start": "1145360",
    "end": "1151440"
  },
  {
    "text": "P1 thank you so go is a language with Native",
    "start": "1151799",
    "end": "1159120"
  },
  {
    "text": "concurrency built in and when compiling to w we use non-blocking file descriptors to integrate with the go on",
    "start": "1159120",
    "end": "1165159"
  },
  {
    "text": "time and allow concurrent operations to make progress without blocking one another this also integrates with other",
    "start": "1165159",
    "end": "1172720"
  },
  {
    "text": "runtime features like timers so we get access to a very powerful programming",
    "start": "1172720",
    "end": "1179280"
  },
  {
    "text": "tool a notable absence in wasi preview one is a complete implementation of network sockets which limits supports",
    "start": "1179280",
    "end": "1186120"
  },
  {
    "text": "for key features of the ghost standard Library like HTTP clients and",
    "start": "1186120",
    "end": "1192280"
  },
  {
    "text": "servers however there are web assmbly run times like uh wasmer or was Edge",
    "start": "1192280",
    "end": "1199559"
  },
  {
    "text": "that have introduced uh networking extensions now although these extensions",
    "start": "1199559",
    "end": "1205320"
  },
  {
    "text": "are not integrated in to go we can use thirdparty libraries to leverage",
    "start": "1205320",
    "end": "1210640"
  },
  {
    "text": "them and these libraries are also great examples of using the goal wasm import",
    "start": "1210640",
    "end": "1216039"
  },
  {
    "text": "directive to invoke host functions and so now we actually have",
    "start": "1216039",
    "end": "1223080"
  },
  {
    "text": "two go compilers that can Target Wazi so when should we use one or the other",
    "start": "1223080",
    "end": "1229840"
  },
  {
    "text": "other the primary reason to use tinyo is for the smaller binary size that it",
    "start": "1229840",
    "end": "1237880"
  },
  {
    "text": "produces if you're shipping code to a browser for example this is something",
    "start": "1237880",
    "end": "1242960"
  },
  {
    "text": "that matters a lot another reason is that it generally implements features ahead of big go so",
    "start": "1242960",
    "end": "1251039"
  },
  {
    "text": "for example tiny go had support for Wazi long before goed now Tino makes some",
    "start": "1251039",
    "end": "1259520"
  },
  {
    "text": "trade-offs and it won't support 100% of the ghost iner library or the tool",
    "start": "1259520",
    "end": "1266039"
  },
  {
    "text": "chain so we need if you need the portability guarantees this is when you should use the main go",
    "start": "1266039",
    "end": "1274200"
  },
  {
    "text": "compiler so to wrap it up I want to take a quick look at what's happening uh",
    "start": "1278039",
    "end": "1283559"
  },
  {
    "text": "today and go at this time two proposals have been",
    "start": "1283559",
    "end": "1288880"
  },
  {
    "text": "accepted by the go team and are being worked",
    "start": "1288880",
    "end": "1293480"
  },
  {
    "text": "on the current web assembly architecture Ino uses a 64-bit address space even",
    "start": "1294360",
    "end": "1300039"
  },
  {
    "text": "though all web assembly host assume 32 bits so this hybrid model complicates",
    "start": "1300039",
    "end": "1307240"
  },
  {
    "text": "interaction with the host a lot we're working on addressing this in the new",
    "start": "1307240",
    "end": "1312919"
  },
  {
    "text": "wasm 32 compilation Target the second proposal we work on",
    "start": "1312919",
    "end": "1318799"
  },
  {
    "text": "intends to address one of the current limitations we're adding a go wasm",
    "start": "1318799",
    "end": "1324720"
  },
  {
    "text": "export compiler directive that would allow developers to declare go functions",
    "start": "1324720",
    "end": "1330480"
  },
  {
    "text": "that are exported in the compiled web assembly module and finally I also want to",
    "start": "1330480",
    "end": "1336600"
  },
  {
    "text": "mention the work that is being done on tinyo to uh add experimental support for",
    "start": "1336600",
    "end": "1342200"
  },
  {
    "text": "Wy preview to so go is becoming a big player in the Wii ecosystem",
    "start": "1342200",
    "end": "1349080"
  },
  {
    "text": "and we're always looking for more friends to join us on this journey so if you're inspired you want",
    "start": "1349080",
    "end": "1355120"
  },
  {
    "text": "to get involved um use wp1 join the go first SL and come talk to us thank",
    "start": "1355120",
    "end": "1362460"
  },
  {
    "text": "[Applause]",
    "start": "1362460",
    "end": "1371799"
  },
  {
    "text": "you think we have some time left so we can take some questions if you have",
    "start": "1371799",
    "end": "1377440"
  },
  {
    "text": "any",
    "start": "1377440",
    "end": "1380440"
  },
  {
    "text": "test oh yeah um thank you for your talk I think it it was uh really inspiring",
    "start": "1394120",
    "end": "1399600"
  },
  {
    "text": "and um if I get this correctly like the majority or even the entire team which was working on wasp1 were like firsttime",
    "start": "1399600",
    "end": "1406480"
  },
  {
    "text": "contributors to goang um do you have advice to people who like seek their way",
    "start": "1406480",
    "end": "1412039"
  },
  {
    "text": "into goang contribution um or like how did you start out",
    "start": "1412039",
    "end": "1418519"
  },
  {
    "text": "actually so you you're asking uh as an aspiring contributor like what are the",
    "start": "1419159",
    "end": "1425400"
  },
  {
    "text": "the first step to take um I think joining the go for slack is",
    "start": "1425400",
    "end": "1431840"
  },
  {
    "text": "great like getting to know the people uh offering help uh and also go has a lot",
    "start": "1431840",
    "end": "1439480"
  },
  {
    "text": "of material online to teach you how to become a contributor so getting familiar with this as well and I think there's",
    "start": "1439480",
    "end": "1447919"
  },
  {
    "text": "much more than this uh like I say we're always you know looking for contributors who can help us out uh you can help with",
    "start": "1447919",
    "end": "1455400"
  },
  {
    "text": "documentation with you know testing with um more advanced work that we're doing",
    "start": "1455400",
    "end": "1461159"
  },
  {
    "text": "on the on the runtime so whatever your skill set is uh I think we you know we",
    "start": "1461159",
    "end": "1467440"
  },
  {
    "text": "can use more hands thank",
    "start": "1467440",
    "end": "1471320"
  },
  {
    "text": "you yeah I'd love to hear what what you consider like the biggest challenges in",
    "start": "1475360",
    "end": "1480799"
  },
  {
    "text": "terms of the work that needs to be done like what areas as you go through or like is it a lot of work but it's boring",
    "start": "1480799",
    "end": "1488120"
  },
  {
    "text": "or are there theoretical areas you need to make progress in and I just love to hear what you're",
    "start": "1488120",
    "end": "1494799"
  },
  {
    "text": "thinking um so you're asking what are like the the main challenges that we face in the",
    "start": "1497080",
    "end": "1503520"
  },
  {
    "text": "future development of go and webly",
    "start": "1503520",
    "end": "1508919"
  },
  {
    "text": "um so like I was saying web especially the way that it's starting to be used",
    "start": "1509960",
    "end": "1515880"
  },
  {
    "text": "outside of the browser is very new it almost feels like a very new field of computing and so there's a lot of uh",
    "start": "1515880",
    "end": "1523640"
  },
  {
    "text": "there's a lot of unknowns and I feel like the most difficult part is is uh",
    "start": "1523640",
    "end": "1529039"
  },
  {
    "text": "making the right decisions to continue evolving the technology in the in the right direction uh so that requires a",
    "start": "1529039",
    "end": "1535039"
  },
  {
    "text": "lot of collaboration from different communities uh making sure that all the technical choices especially those that",
    "start": "1535039",
    "end": "1540799"
  },
  {
    "text": "go into the specification are going to uh be compatible with the various ways",
    "start": "1540799",
    "end": "1546000"
  },
  {
    "text": "that languages are uh are implemented um so mostly you know design",
    "start": "1546000",
    "end": "1553960"
  },
  {
    "text": "uh I want to say and um",
    "start": "1553960",
    "end": "1560240"
  },
  {
    "text": "yeah I guess that's the main the main one that comes to",
    "start": "1560880",
    "end": "1565679"
  },
  {
    "text": "mind Hey thank you very much for your talk so I have very little experience",
    "start": "1573640",
    "end": "1579760"
  },
  {
    "text": "with web assembly so it's really this has been an eye opening so thank you for this talk but so as a go developer",
    "start": "1579760",
    "end": "1587000"
  },
  {
    "text": "currently if I go get the package I would expect it to compile locally but I",
    "start": "1587000",
    "end": "1592159"
  },
  {
    "text": "saw that go import statement how does like a web how does a web assembly",
    "start": "1592159",
    "end": "1597200"
  },
  {
    "text": "module reach my machine for compilation yeah so you you're asking",
    "start": "1597200",
    "end": "1604640"
  },
  {
    "text": "about the compatibility guarantees that you get when you target web assembly uh",
    "start": "1604640",
    "end": "1610159"
  },
  {
    "text": "compared to all other regular go builds right yes exactly um the entire go standard library is",
    "start": "1610159",
    "end": "1617240"
  },
  {
    "text": "going to compile now like I was saying some features aren't available like uh",
    "start": "1617240",
    "end": "1623159"
  },
  {
    "text": "networking is only available as an extension through a third party package",
    "start": "1623159",
    "end": "1629440"
  },
  {
    "text": "um most packages out there unless they have tight dependencies to you know the",
    "start": "1629440",
    "end": "1635279"
  },
  {
    "text": "operating systems will also compile and and run you know this the same way you would run them on arm 64 or x86 it will",
    "start": "1635279",
    "end": "1643399"
  },
  {
    "text": "execute on a web assembly host so with big go you get a lot of",
    "start": "1643399",
    "end": "1648760"
  },
  {
    "text": "uh you know the experience I want to say is like almost as smooth as possible um",
    "start": "1648760",
    "end": "1654679"
  },
  {
    "text": "what I would be looking for is if you you know your use case involves a lot of",
    "start": "1654679",
    "end": "1661559"
  },
  {
    "text": "networking um that's where you're going to maybe you know crumble a little bit",
    "start": "1661559",
    "end": "1666799"
  },
  {
    "text": "more but like I was saying there's ongoing development uh in Wy to address",
    "start": "1666799",
    "end": "1672360"
  },
  {
    "text": "those things so in the coming years hopefully we'll have a lot better support there okay thank you",
    "start": "1672360",
    "end": "1680120"
  },
  {
    "text": "thanks for your presentation um as you mentioned big go produces quite a big",
    "start": "1690360",
    "end": "1696720"
  },
  {
    "text": "artifact and I would love to deploy a wasm go artifact on for example Cloud",
    "start": "1696720",
    "end": "1702720"
  },
  {
    "text": "workers but it seems that I have to use tinyo for that do you think that in the",
    "start": "1702720",
    "end": "1708360"
  },
  {
    "text": "future big go will produce a smaller artifact or or",
    "start": "1708360",
    "end": "1714518"
  },
  {
    "text": "not so you're you're asking about uh go producing large web assembly uh",
    "start": "1714880",
    "end": "1722440"
  },
  {
    "text": "artifacts and um is it going to get better or is tinyo the only Avenue in",
    "start": "1722440",
    "end": "1727840"
  },
  {
    "text": "the future okay so it the go uh like the program",
    "start": "1727840",
    "end": "1736840"
  },
  {
    "text": "that go produces is large because we embed the entire runtime we've got garbage collection right we support full",
    "start": "1736840",
    "end": "1742279"
  },
  {
    "text": "concurrency basically the entire language is uh is built into the target",
    "start": "1742279",
    "end": "1748919"
  },
  {
    "text": "um now when you look at the way web assembly modules are used uh often times",
    "start": "1748919",
    "end": "1756720"
  },
  {
    "text": "you know they are employed in very Epal workloads right uh things like handling",
    "start": "1756720",
    "end": "1762640"
  },
  {
    "text": "you know serverless functions you don't necessarily need this all this capability right when",
    "start": "1762640",
    "end": "1768840"
  },
  {
    "text": "you're uh when you're going to like spawn a module uh run you know the function to completion and then turn it",
    "start": "1768840",
    "end": "1775320"
  },
  {
    "text": "down so thinking about you know hypothetical changes that could be made",
    "start": "1775320",
    "end": "1782159"
  },
  {
    "text": "uh if we didn't compile the garbage collector at all in the target for those use cases then potentially the size",
    "start": "1782159",
    "end": "1789159"
  },
  {
    "text": "would be a lot smaller um so I mean this those are things that we haven't explored but once again if you want to",
    "start": "1789159",
    "end": "1796519"
  },
  {
    "text": "contribute like maybe that's an idea to bring to the the",
    "start": "1796519",
    "end": "1802240"
  },
  {
    "text": "table",
    "start": "1808080",
    "end": "1811080"
  },
  {
    "text": "post uh following up on that question um are things like uh wasm GC and various",
    "start": "1816600",
    "end": "1823399"
  },
  {
    "text": "other proposals that are appearing now do they help you optimize by not having",
    "start": "1823399",
    "end": "1829279"
  },
  {
    "text": "to bring that part of the language into the",
    "start": "1829279",
    "end": "1833279"
  },
  {
    "text": "module um well when I was talking about the main challenges being around design uh",
    "start": "1836120",
    "end": "1843279"
  },
  {
    "text": "this is I think an example of it where uh wasm JC could almost help us but",
    "start": "1843279",
    "end": "1849279"
  },
  {
    "text": "there's a few key features are missing to really replace the garbage collector that we have in go um so today the",
    "start": "1849279",
    "end": "1857159"
  },
  {
    "text": "answer unfortunately is no but I'm hoping that you know we can we can change that answer in the",
    "start": "1857159",
    "end": "1863720"
  },
  {
    "text": "future right looks like oh there's one",
    "start": "1867600",
    "end": "1873158"
  },
  {
    "text": "more hi thanks for talk uh parallel execution are we uh what's the timeline",
    "start": "1876639",
    "end": "1883399"
  },
  {
    "text": "on that is it w the wasi standard that's stopping the the progress on that that",
    "start": "1883399",
    "end": "1888600"
  },
  {
    "text": "just implementation so the the wasm spec has",
    "start": "1888600",
    "end": "1894600"
  },
  {
    "text": "uh sorry you're asking about can we do parallel execution of uh web assembly uh",
    "start": "1894600",
    "end": "1900240"
  },
  {
    "text": "or like directly from web assembly right yeah so in the talk you said",
    "start": "1900240",
    "end": "1905559"
  },
  {
    "text": "concurrency is there go but the parallel execution isn't there yet",
    "start": "1905559",
    "end": "1912360"
  },
  {
    "text": "yep there are more tools now in the WebMD core specification that open up",
    "start": "1913200",
    "end": "1918600"
  },
  {
    "text": "the door to implementing these type of features but there are also limitation in wasi",
    "start": "1918600",
    "end": "1925360"
  },
  {
    "text": "for example having the ability to create a thread",
    "start": "1925360",
    "end": "1930880"
  },
  {
    "text": "um that prevent us from using you know parallelism directly from like in the",
    "start": "1930880",
    "end": "1936720"
  },
  {
    "text": "compiled Target so progress is being made it it will get there uh I guess",
    "start": "1936720",
    "end": "1943279"
  },
  {
    "text": "that's my uh my opinion um but at this time",
    "start": "1943279",
    "end": "1948399"
  },
  {
    "text": "excuse me at this time uh you don't have any sort of like API allowing you to do",
    "start": "1948399",
    "end": "1953960"
  },
  {
    "text": "parallel processing um if you're building an application",
    "start": "1953960",
    "end": "1959799"
  },
  {
    "text": "that uses uh you know a web assembly runtime for extension purposes um you're",
    "start": "1959799",
    "end": "1966679"
  },
  {
    "text": "still free to spawn multiple threads and execute each module you know independently so you get parallelism",
    "start": "1966679",
    "end": "1972200"
  },
  {
    "text": "that way uh but you don't get it Ino directly from uh from the program",
    "start": "1972200",
    "end": "1979840"
  },
  {
    "text": "um hello uh about was there's a thing about there's multiple R time and it can",
    "start": "1981960",
    "end": "1987000"
  },
  {
    "text": "be a bit confusing for you user so what in your opinion will be like the",
    "start": "1987000",
    "end": "1992480"
  },
  {
    "text": "advantage of WP uh compared to was Edge or was C and if I have like a simple",
    "start": "1992480",
    "end": "1999240"
  },
  {
    "text": "application like a gene API that's calling a PO database just like a simple coner and I",
    "start": "1999240",
    "end": "2006480"
  },
  {
    "text": "want to transform it into uh the was which R should I go",
    "start": "2006480",
    "end": "2013799"
  },
  {
    "text": "to I'm sorry can you uh elaborate a little bit as aone you can choose the runtime",
    "start": "2014840",
    "end": "2022320"
  },
  {
    "text": "yes uh for your application go that you want to try to run as web assembly application mhm but what are",
    "start": "2022320",
    "end": "2030120"
  },
  {
    "text": "the how are you supposed to choose this time betweener y so if you're",
    "start": "2030120",
    "end": "2038840"
  },
  {
    "text": "um just using the the runtime as a standard on tool and you're asking like",
    "start": "2038840",
    "end": "2044679"
  },
  {
    "text": "which runtime should I pick when I want to run web assembly stuff right",
    "start": "2044679",
    "end": "2050358"
  },
  {
    "text": "um I want to say use the one that you know you like uh some of them have you",
    "start": "2050359",
    "end": "2055679"
  },
  {
    "text": "know different features so if you need a feature that exists in one run time that would be an indicator of the the one you",
    "start": "2055679",
    "end": "2062118"
  },
  {
    "text": "should choose I think what's more what's going to determine your choice more is is like when you use",
    "start": "2062119",
    "end": "2069480"
  },
  {
    "text": "uh web ass as an extension mechanism you're going to Target like you're going to want a runtime that is",
    "start": "2069480",
    "end": "2075599"
  },
  {
    "text": "in the language of your host right because the integration is going to be seamless so uh if your host application",
    "start": "2075599",
    "end": "2082440"
  },
  {
    "text": "is a go Application you probably going to want to use War zero because that's a you know zero dependency go uh wasm",
    "start": "2082440",
    "end": "2089158"
  },
  {
    "text": "runtime uh if you're developing uh you know uh rust host then wasm time is",
    "start": "2089159",
    "end": "2095158"
  },
  {
    "text": "probably a much better choice because it is written in Rust so the integration is going to be very seamless so that that's",
    "start": "2095159",
    "end": "2100839"
  },
  {
    "text": "kind of like the decision mattress I would use",
    "start": "2100839",
    "end": "2105800"
  }
]