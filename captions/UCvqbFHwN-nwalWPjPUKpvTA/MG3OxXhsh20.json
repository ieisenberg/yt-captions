[
  {
    "text": "my name is rtin stov and I'm a PhD student at the University of Oxford and",
    "start": "399",
    "end": "5600"
  },
  {
    "text": "today I'll be talking about our work on enabling and encryption for container",
    "start": "5600",
    "end": "11200"
  },
  {
    "text": "for container checkpointing in kubernetes um container checkpointing is",
    "start": "11200",
    "end": "17359"
  },
  {
    "text": "fundamental technology that is used for many different use cases and some",
    "start": "17359",
    "end": "22840"
  },
  {
    "text": "examples are fa tolerance where a checkpoint is created periodically for",
    "start": "22840",
    "end": "28279"
  },
  {
    "text": "long cronic applications and in the case of failure the application can be restored from the last checkpoint or",
    "start": "28279",
    "end": "35200"
  },
  {
    "text": "fast application startup where checkpoint can be created after the application has initialized some State",
    "start": "35200",
    "end": "42559"
  },
  {
    "text": "and then the application can be started at this um in in in an already",
    "start": "42559",
    "end": "48800"
  },
  {
    "text": "initialized state or preemptive scheduling where um low priority tasks",
    "start": "48800",
    "end": "54840"
  },
  {
    "text": "are preempted so that high priority tasks can be scheduled in clusters and low balancing where um applications can",
    "start": "54840",
    "end": "62760"
  },
  {
    "text": "be migrated between different nodes in cluster to improve Ro utilization or",
    "start": "62760",
    "end": "67960"
  },
  {
    "text": "forensic analysis uh where a checkpoint is created and can be analyzed later on",
    "start": "67960",
    "end": "74439"
  },
  {
    "text": "to inspect the runtime state for example at particular time for example during a",
    "start": "74439",
    "end": "80200"
  },
  {
    "text": "Cyber attack and um these checkpoint restore mechanisms are usually",
    "start": "80200",
    "end": "86640"
  },
  {
    "text": "integrated in in large systems um like container platforms or um Google's Bor",
    "start": "86640",
    "end": "93479"
  },
  {
    "text": "engine or Microsoft sity and um by default they don't",
    "start": "93479",
    "end": "98960"
  },
  {
    "text": "provide uh encryption capabilities and this is important",
    "start": "98960",
    "end": "104320"
  },
  {
    "text": "because um users have to implement their own",
    "start": "104320",
    "end": "109360"
  },
  {
    "text": "security mechanisms um and essentially enable the encryption within the larger",
    "start": "109360",
    "end": "115439"
  },
  {
    "text": "system and there are two common approaches for solving this problem the",
    "start": "115439",
    "end": "120680"
  },
  {
    "text": "first one is loal encryption where the checkpoint is stored in a loal storage",
    "start": "120680",
    "end": "126320"
  },
  {
    "text": "and then it's encrypted and transferred to a distributed storage or streaming",
    "start": "126320",
    "end": "131920"
  },
  {
    "text": "where um you uh the data is transferred over file disc cryptors with uni sockets",
    "start": "131920",
    "end": "138080"
  },
  {
    "text": "to an external tool that performs the encryption and transfers data to remote",
    "start": "138080",
    "end": "143440"
  },
  {
    "text": "storage um the the problem with this um with the first approach is that it has",
    "start": "143440",
    "end": "149360"
  },
  {
    "text": "additional um read right operations so it requires add additional storage to save the",
    "start": "149360",
    "end": "154879"
  },
  {
    "text": "checkpoint and this could be hundreds of gigabytes in member State um and also um",
    "start": "154879",
    "end": "162080"
  },
  {
    "text": "an attacker could potentially access the vocal storage and uh Access Data during",
    "start": "162080",
    "end": "167760"
  },
  {
    "text": "the checkpoint um the streaming encryption is also difficult to integrate with um",
    "start": "167760",
    "end": "174280"
  },
  {
    "text": "existing container checkpoint agent um because it relies on communication",
    "start": "174280",
    "end": "181599"
  },
  {
    "text": "over unauthenticated communication over uni socket and um essentially both of",
    "start": "181599",
    "end": "189480"
  },
  {
    "text": "these mechanisms don't support Advanced optimization techniques such as um iterative checkpointing or memory data",
    "start": "189480",
    "end": "196920"
  },
  {
    "text": "application uh which require understanding of what is the data structure of the",
    "start": "196920",
    "end": "202440"
  },
  {
    "text": "checkpoint uh the rest store mechanism uh also works in a similar way so the",
    "start": "202440",
    "end": "207840"
  },
  {
    "text": "data is transferred from the remot storage to work storage and decrypt it",
    "start": "207840",
    "end": "212920"
  },
  {
    "text": "and then provide it to the encryption tool and um storing uh un encrypted",
    "start": "212920",
    "end": "219519"
  },
  {
    "text": "checkpoint data can introduce um significant security risks first uh the",
    "start": "219519",
    "end": "226879"
  },
  {
    "text": "checkpoint itself contains a snapshot of the application memory this includes um",
    "start": "226879",
    "end": "232200"
  },
  {
    "text": "passwords tokens and pretty much everything that the application can store in memory and having access to",
    "start": "232200",
    "end": "238760"
  },
  {
    "text": "this data allows for example to perform s session hijacking or um modifying the",
    "start": "238760",
    "end": "245439"
  },
  {
    "text": "checkpoint could allow an attacker to insert malicious code and create a Bor in the application um or modify the",
    "start": "245439",
    "end": "253640"
  },
  {
    "text": "control flow of the application and for example um bypass",
    "start": "253640",
    "end": "259160"
  },
  {
    "text": "authentication um some of challenges with enabling checkpointing is um",
    "start": "259160",
    "end": "266199"
  },
  {
    "text": "performance optimization in in a sense that if you have hundreds of gigabytes of memory State um encrypting and",
    "start": "266199",
    "end": "274840"
  },
  {
    "text": "decrypting this data adds additional overhead to the checkpointing process",
    "start": "274840",
    "end": "281199"
  },
  {
    "text": "and authentication in multi clusters can be challenging it requires uh different",
    "start": "281199",
    "end": "287520"
  },
  {
    "text": "users to use different Keys integrating this with uh with the checkpointing engine requires uh key management and uh",
    "start": "287520",
    "end": "296039"
  },
  {
    "text": "verifying the integrity and confidentiality of Che check point data is also essential to verify that um the",
    "start": "296039",
    "end": "303919"
  },
  {
    "text": "checkpoint hasn't been modified um so interactive checkpointing",
    "start": "303919",
    "end": "309120"
  },
  {
    "text": "is optimization technique that's commonly used for use cases such as life",
    "start": "309120",
    "end": "314280"
  },
  {
    "text": "migration um this is when uh you want to transfer um a running container from one",
    "start": "314280",
    "end": "321919"
  },
  {
    "text": "node to another node without stopping the container and it usually consists of",
    "start": "321919",
    "end": "327280"
  },
  {
    "text": "several iterations where um we create a snapshot of the applications",
    "start": "327280",
    "end": "333560"
  },
  {
    "text": "memory we transfer um this snapshot and while we are transferring the uh the",
    "start": "333560",
    "end": "339520"
  },
  {
    "text": "data we keep track of what memory pages are changing uh while the application is",
    "start": "339520",
    "end": "346199"
  },
  {
    "text": "running and then we transfer only the modified memory pages and we repeat this",
    "start": "346199",
    "end": "351280"
  },
  {
    "text": "process several times until either a threshold has been reached or the memory",
    "start": "351280",
    "end": "356600"
  },
  {
    "text": "state is small enough that um we can stop the application and transfer the",
    "start": "356600",
    "end": "361919"
  },
  {
    "text": "rest of the state and um resume the application on the destination note and",
    "start": "361919",
    "end": "367639"
  },
  {
    "text": "the problem is when we introduce encryption this adds additional overhead",
    "start": "367639",
    "end": "373240"
  },
  {
    "text": "on the uh source and destination site where we have to encrypt and decrypt the data and um with life migration uh",
    "start": "373240",
    "end": "382639"
  },
  {
    "text": "performance is very important because um essentially this process this iteration",
    "start": "382639",
    "end": "388720"
  },
  {
    "text": "process that depends on how quickly the application trans modifies memory Pages",
    "start": "388720",
    "end": "395479"
  },
  {
    "text": "for example if memory pages are modified faster then they can be transferred to",
    "start": "395479",
    "end": "401479"
  },
  {
    "text": "the destination site then uh this iteration process is infinite um another",
    "start": "401479",
    "end": "408680"
  },
  {
    "text": "um use case for iterative checkpointing is for example with full tolerance where",
    "start": "408680",
    "end": "415039"
  },
  {
    "text": "we um for example in um um in scientific Computing there are um",
    "start": "415039",
    "end": "423560"
  },
  {
    "text": "many computations that take long time to complete sometimes weeks or months and",
    "start": "423560",
    "end": "429560"
  },
  {
    "text": "it's very important to um periodically save the state of these applications um",
    "start": "429560",
    "end": "436280"
  },
  {
    "text": "so iterative checkpointing here allows to um essentially keep track of what",
    "start": "436280",
    "end": "442199"
  },
  {
    "text": "state has changed and um create a checkpoint where we save only the um um",
    "start": "442199",
    "end": "450319"
  },
  {
    "text": "modified memory pages and in in the checkpointing engine cre essentially we",
    "start": "450319",
    "end": "457160"
  },
  {
    "text": "uh use the softare Tobit in the L not to um keep track of what um Pages have",
    "start": "457160",
    "end": "464479"
  },
  {
    "text": "changed and then we create a link to a previous checkpoint um that allows to essentially",
    "start": "464479",
    "end": "471639"
  },
  {
    "text": "restore the process in Reverse um the problem is when the",
    "start": "471639",
    "end": "477159"
  },
  {
    "text": "checkpoints are encrypted then we have several Cycles where we have to decrypt",
    "start": "477159",
    "end": "483120"
  },
  {
    "text": "the previous checkpoints to identify uh what memory pages are available um and this adds additional",
    "start": "483120",
    "end": "491400"
  },
  {
    "text": "overhead and memory memory application is another technique that is used with",
    "start": "491400",
    "end": "497080"
  },
  {
    "text": "iterative checkpointing where um memory pages in previous checkpoints can be",
    "start": "497080",
    "end": "502960"
  },
  {
    "text": "deallocated using a system code called f allocate or essentially creating it's",
    "start": "502960",
    "end": "508599"
  },
  {
    "text": "called punching holes in the file or creating sparse file so essentially um",
    "start": "508599",
    "end": "514719"
  },
  {
    "text": "it allows to to reduce the size of the checkpoint however um this is also",
    "start": "514719",
    "end": "520560"
  },
  {
    "text": "challenging when encryption is used because essentially we not only have to",
    "start": "520560",
    "end": "525600"
  },
  {
    "text": "decrypt the date but now we have to modify the previous checkpoint and encrypt it back so um it increases the",
    "start": "525600",
    "end": "533040"
  },
  {
    "text": "uh performance overhead and to solve this problems we are um proposed using a buil-in",
    "start": "533040",
    "end": "540279"
  },
  {
    "text": "encryption mechanism in cre so essentially we are modifying the",
    "start": "540279",
    "end": "545959"
  },
  {
    "text": "checkpointing engine to um encrypt the data as it is being",
    "start": "545959",
    "end": "553880"
  },
  {
    "text": "checkpointed um and this Builds on the existing support for do which is used",
    "start": "553880",
    "end": "559880"
  },
  {
    "text": "with component called page server a page server is used for Life migrating memory",
    "start": "559880",
    "end": "565880"
  },
  {
    "text": "pages from one note to another and it uses the to uh Library so essentially",
    "start": "565880",
    "end": "572200"
  },
  {
    "text": "we're using the same um public key infrastructure for TOs and using The",
    "start": "572200",
    "end": "579000"
  },
  {
    "text": "cryptographic Primitives from the library to extend um this to to extend",
    "start": "579000",
    "end": "586279"
  },
  {
    "text": "the um to add additional functionality that encrypts all images that the",
    "start": "586279",
    "end": "592079"
  },
  {
    "text": "checkpointing engine cre creates um and these are many different types of images",
    "start": "592079",
    "end": "598399"
  },
  {
    "text": "um I think about 50 or 60 different images but they can be grouped into",
    "start": "598399",
    "end": "604079"
  },
  {
    "text": "three different categories so the first one is uh images in protocol buffer",
    "start": "604079",
    "end": "609120"
  },
  {
    "text": "format um they have a definition that um",
    "start": "609120",
    "end": "614600"
  },
  {
    "text": "specifies the fields in every image uh images in third party format or row",
    "start": "614600",
    "end": "621160"
  },
  {
    "text": "images um these are images created with an external tool such as tar if we are",
    "start": "621160",
    "end": "628560"
  },
  {
    "text": "checkpointing temporary file system or um uh IP tables or IP and uh the third",
    "start": "628560",
    "end": "636600"
  },
  {
    "text": "type are memory Pages which are which is essentially the application memory",
    "start": "636600",
    "end": "642320"
  },
  {
    "text": "stored in binary format um so images in protocol buffer",
    "start": "642320",
    "end": "649200"
  },
  {
    "text": "format are well defined they are essentially",
    "start": "649200",
    "end": "655360"
  },
  {
    "text": "um small messages that needs to be encrypted and instead of modifying a cre",
    "start": "655360",
    "end": "662000"
  },
  {
    "text": "to essentially encrypt every prod of image that it generates we um uh",
    "start": "662000",
    "end": "669120"
  },
  {
    "text": "essentially we are reusing the existing infrastructure",
    "start": "669120",
    "end": "674519"
  },
  {
    "text": "which is um using a function called PB right so this function essentially",
    "start": "674519",
    "end": "679680"
  },
  {
    "text": "serializes the state um of the protocol bu for message and then we encrypt the",
    "start": "679680",
    "end": "685959"
  },
  {
    "text": "data uh just before it is written to the output F descriptor um we we load the uh public",
    "start": "685959",
    "end": "694480"
  },
  {
    "text": "key from the T certificate then we generate a random symmetric key we",
    "start": "694480",
    "end": "700600"
  },
  {
    "text": "encrypt the symmetric key and store it in in a new image called Cipher and then we use the random symmetric key with the",
    "start": "700600",
    "end": "709320"
  },
  {
    "text": "ch um poly 305 uh authenticate encryption with Associated data to",
    "start": "709320",
    "end": "715959"
  },
  {
    "text": "essentially encrypt the content of the prot mage messages um we also append the",
    "start": "715959",
    "end": "721880"
  },
  {
    "text": "non and authentication tag to every",
    "start": "721880",
    "end": "726920"
  },
  {
    "text": "message um uh the reason we are using this uh CER is because um essentially messages",
    "start": "726920",
    "end": "735079"
  },
  {
    "text": "are very small and uh this is very efficient way of um of encrypting the",
    "start": "735079",
    "end": "741480"
  },
  {
    "text": "data uh with external uh tools or images in third party format is slightly more",
    "start": "741480",
    "end": "748440"
  },
  {
    "text": "complicated because essentially we have um cre has a function called CR system",
    "start": "748440",
    "end": "755079"
  },
  {
    "text": "that essentially executes this third party utility uh and then it sets the",
    "start": "755079",
    "end": "762279"
  },
  {
    "text": "input output file descriptors to the file descriptor that will save the content or it will read the content so",
    "start": "762279",
    "end": "770639"
  },
  {
    "text": "to enable encryption we're essentially creating a child process that would",
    "start": "770639",
    "end": "776000"
  },
  {
    "text": "intercept um the communication between the external program uh and replace the",
    "start": "776000",
    "end": "782560"
  },
  {
    "text": "uh standard input output file descriptors with pipe and then we",
    "start": "782560",
    "end": "787600"
  },
  {
    "text": "essentially encrypt and decrypt the data as this being written to the uh output",
    "start": "787600",
    "end": "793240"
  },
  {
    "text": "file and um for memory Pages um we are",
    "start": "793240",
    "end": "798320"
  },
  {
    "text": "using uh um because memory pages are essentially box of data with fixed size",
    "start": "798320",
    "end": "805199"
  },
  {
    "text": "it's more it's much more efficient to use uh um is XTC uh and use a single IV",
    "start": "805199",
    "end": "814760"
  },
  {
    "text": "initialization Vector for all memory pages instead of adding notes for every",
    "start": "814760",
    "end": "821160"
  },
  {
    "text": "memory page and it also allows us to essentially modify the encrypt data",
    "start": "821160",
    "end": "827160"
  },
  {
    "text": "without decrypting it um because the input and the output have the same size",
    "start": "827160",
    "end": "833160"
  },
  {
    "text": "we if we want to delete the memory page we we don't need to decrypt it we we know the",
    "start": "833160",
    "end": "839759"
  },
  {
    "text": "um the offset of the memory page and in addition it has Hardware acceleration so",
    "start": "839759",
    "end": "846040"
  },
  {
    "text": "it can be um seven times faster than uh just using",
    "start": "846040",
    "end": "851680"
  },
  {
    "text": "software um so the way um memory pages are being checkpointed is using",
    "start": "851680",
    "end": "859279"
  },
  {
    "text": "something called parasite code or essentially this is um position independent code that is injected into",
    "start": "859279",
    "end": "867240"
  },
  {
    "text": "Target process and um it transfers the memory pages into set of pipes um and",
    "start": "867240",
    "end": "874680"
  },
  {
    "text": "generates a map essentially mapping of the um memory Pages back into their",
    "start": "874680",
    "end": "882160"
  },
  {
    "text": "original virtual address and um then it just write uh cre just writes the memory",
    "start": "882160",
    "end": "888759"
  },
  {
    "text": "pages into an output file and essentially the encryption is very straightforward we generate the a a keys",
    "start": "888759",
    "end": "898279"
  },
  {
    "text": "and we um save store them into the cipher image and we encrypt the data um",
    "start": "898279",
    "end": "905560"
  },
  {
    "text": "restoring is slightly more difficult because um it happens in in a similar",
    "start": "905560",
    "end": "911680"
  },
  {
    "text": "way with something called restore context and um the way this works is uh",
    "start": "911680",
    "end": "918000"
  },
  {
    "text": "just passing file descriptor but because the restore context is position",
    "start": "918000",
    "end": "923839"
  },
  {
    "text": "independent code we we cannot um decrypt the data um we cannot link the um Gest",
    "start": "923839",
    "end": "932120"
  },
  {
    "text": "library with this code so essentially we uh create a something similar we create",
    "start": "932120",
    "end": "938680"
  },
  {
    "text": "a child process where um we use pipes to communicate with the",
    "start": "938680",
    "end": "944880"
  },
  {
    "text": "restor context the restore context requests um certain offset in the um in",
    "start": "944880",
    "end": "953680"
  },
  {
    "text": "the memory pages and then um we read we",
    "start": "953680",
    "end": "959160"
  },
  {
    "text": "read the data decrypt it and then we use the process VM right EV system code so",
    "start": "959160",
    "end": "965160"
  },
  {
    "text": "essentially using zero copy uh data transfer from one process to another to",
    "start": "965160",
    "end": "970920"
  },
  {
    "text": "restore the memory pages and we then send back the number of bites that have",
    "start": "970920",
    "end": "976920"
  },
  {
    "text": "been read um and so how do we integrate this with",
    "start": "976920",
    "end": "983680"
  },
  {
    "text": "kubernetes the main idea is that instead of adding um external to or external",
    "start": "983680",
    "end": "989160"
  },
  {
    "text": "utility that has to be somehow integrated with the whole system we are implementing build and supporting the",
    "start": "989160",
    "end": "996560"
  },
  {
    "text": "already existing uh checkpointing mechanism in kubernetes so um",
    "start": "996560",
    "end": "1003120"
  },
  {
    "text": "essentially um the way checkpointing works in kubernetes is the container",
    "start": "1003120",
    "end": "1009040"
  },
  {
    "text": "engine would involve Creo uh cre will um um essentially enter the Nam space of",
    "start": "1009040",
    "end": "1016800"
  },
  {
    "text": "the container and then we'll create um a checkpoint that contains all the",
    "start": "1016800",
    "end": "1021920"
  },
  {
    "text": "image files so um essentially we just need to enable",
    "start": "1021920",
    "end": "1028240"
  },
  {
    "text": "um the um encryption capability in cre and once the checkpoint is created we",
    "start": "1028240",
    "end": "1034520"
  },
  {
    "text": "can um create an OCA container image and then this OCA image uh can can be used",
    "start": "1034520",
    "end": "1041400"
  },
  {
    "text": "to restore the container so the container um the container engine is",
    "start": "1041400",
    "end": "1047160"
  },
  {
    "text": "able to recognize whether um an OCA image contains a checkpoint or it is a",
    "start": "1047160",
    "end": "1052799"
  },
  {
    "text": "standard OCA image and if this checkpoint then it will restore the container instead of trying to",
    "start": "1052799",
    "end": "1060160"
  },
  {
    "text": "start um and I have a few demos um",
    "start": "1060160",
    "end": "1067440"
  },
  {
    "text": "so the first one is um using an large language model this actually something",
    "start": "1067440",
    "end": "1073880"
  },
  {
    "text": "that Microsoft are also using uh in production as far as I know um they",
    "start": "1073880",
    "end": "1080799"
  },
  {
    "text": "published a paper called Singularity that describes how they use that",
    "start": "1080799",
    "end": "1088200"
  },
  {
    "text": "and essentially what we in in this example we are um or we are using uh L",
    "start": "1088440",
    "end": "1098919"
  },
  {
    "text": "that answers question then we create a checkpoint um the the container",
    "start": "1098919",
    "end": "1106480"
  },
  {
    "text": "itself um is using TCP connections so um we",
    "start": "1106480",
    "end": "1112120"
  },
  {
    "text": "are um essentially checkpointing the TP connection itself and once the container",
    "start": "1112120",
    "end": "1117880"
  },
  {
    "text": "is restored it continues from where it was uh stopped and uh essentially",
    "start": "1117880",
    "end": "1123440"
  },
  {
    "text": "answers the question and um the the checkpoint itself contains uh all the uh",
    "start": "1123440",
    "end": "1130720"
  },
  {
    "text": "process threats and essentially it allows you to access uh everything into",
    "start": "1130720",
    "end": "1137000"
  },
  {
    "text": "um into the application memory and modify it",
    "start": "1137000",
    "end": "1143919"
  },
  {
    "text": "um so in this example you can see all the environment variables that are in",
    "start": "1147240",
    "end": "1152960"
  },
  {
    "text": "used by the application in the container and uh essentially if there are any um",
    "start": "1152960",
    "end": "1159679"
  },
  {
    "text": "Secrets or passwords they they can be extract it and to enable encryption",
    "start": "1159679",
    "end": "1165520"
  },
  {
    "text": "essentially we just need to add um encrypt option in the configuration t",
    "start": "1165520",
    "end": "1171840"
  },
  {
    "text": "for C and then generate the um the public key uh public certificate and key",
    "start": "1171840",
    "end": "1180600"
  },
  {
    "text": "um for encryption we use only the public uh uh the public C from from the",
    "start": "1180600",
    "end": "1185679"
  },
  {
    "text": "certificate and for when restoring a container we use only um the private",
    "start": "1185679",
    "end": "1191679"
  },
  {
    "text": "key um so this is important for the use case of forensic analysis where we um",
    "start": "1191679",
    "end": "1200120"
  },
  {
    "text": "um we we don't need to decrypt the data uh in essentially we don't need to",
    "start": "1200120",
    "end": "1205559"
  },
  {
    "text": "upload the private key into uh kubernetes clusters um",
    "start": "1205559",
    "end": "1213200"
  },
  {
    "text": "and um this is just showing that the restore works and then the um the",
    "start": "1214159",
    "end": "1221000"
  },
  {
    "text": "service will continue from where it was stopped um",
    "start": "1221000",
    "end": "1228280"
  },
  {
    "text": "uh this another uh the second demo is with uh in memory database um in this case RIS so um RIS",
    "start": "1231880",
    "end": "1241200"
  },
  {
    "text": "um in this case we're using the uh RIS Benchmark which would um essentially",
    "start": "1241200",
    "end": "1248360"
  },
  {
    "text": "create many connections to the Rus database and uh start uploading data and",
    "start": "1248360",
    "end": "1254039"
  },
  {
    "text": "we're running this in kubernetes cluster um we're creating a checkpoint in this",
    "start": "1254039",
    "end": "1259280"
  },
  {
    "text": "case by default the TP established option is not set which means if the application is using TP connection it",
    "start": "1259280",
    "end": "1266559"
  },
  {
    "text": "will essentially fail and show that you need to add this option in the configuration file and once this option",
    "start": "1266559",
    "end": "1273039"
  },
  {
    "text": "is added it will create the checkpoint um and here you can see that",
    "start": "1273039",
    "end": "1280600"
  },
  {
    "text": "um we can inspect the checkpoint and we can see uh all the tsp connections and",
    "start": "1280600",
    "end": "1285840"
  },
  {
    "text": "environment variables essentially everything that the check Point um of the application",
    "start": "1285840",
    "end": "1292559"
  },
  {
    "text": "contains and uh to to enable encryption it's essentially the same thing we just",
    "start": "1292559",
    "end": "1298240"
  },
  {
    "text": "need to uh add the encrypt option in the configuration file for cre so it doesn't",
    "start": "1298240",
    "end": "1304279"
  },
  {
    "text": "require any changes to uh the existing workflow for container",
    "start": "1304279",
    "end": "1310679"
  },
  {
    "text": "checkpointing and uh the last case uh the last example",
    "start": "1312120",
    "end": "1319960"
  },
  {
    "text": "is with video streaming so in this case um we have a container in running in",
    "start": "1319960",
    "end": "1327320"
  },
  {
    "text": "kubernetes cluster called three streamer that essentially uh streams uh creates",
    "start": "1327320",
    "end": "1332880"
  },
  {
    "text": "live stream and in this case it has a counter to see um um the",
    "start": "1332880",
    "end": "1339400"
  },
  {
    "text": "progress and uh we can essentially create a checkpoint of the of the container and",
    "start": "1339400",
    "end": "1346440"
  },
  {
    "text": "then convert this checkpoint into um container image then this container",
    "start": "1346440",
    "end": "1353200"
  },
  {
    "text": "image has an annotation that includes the container name this annotation is",
    "start": "1353200",
    "end": "1358480"
  },
  {
    "text": "then used by the um container engine to identify that this is uh a checkpoint",
    "start": "1358480",
    "end": "1367000"
  },
  {
    "text": "and um in this case uh we have a local registry in the kubernetes cluster that",
    "start": "1367000",
    "end": "1374039"
  },
  {
    "text": "um we can then upload this container image",
    "start": "1374039",
    "end": "1379120"
  },
  {
    "text": "and um then we can modify the um yamala for the um for the kuber spot to use the",
    "start": "1379120",
    "end": "1388200"
  },
  {
    "text": "checkpoint instead of the original base image um Builder is the tool that in",
    "start": "1388200",
    "end": "1395480"
  },
  {
    "text": "this case we use to uh build the container image to upload it to the",
    "start": "1395480",
    "end": "1401760"
  },
  {
    "text": "registry and um yeah to for for encryption to to be enable we just need",
    "start": "1403600",
    "end": "1409320"
  },
  {
    "text": "to add the um um uh encrypt option for",
    "start": "1409320",
    "end": "1417039"
  },
  {
    "text": "cre and in this case we're just replacing the base image with the checkpoint image um in this case we are",
    "start": "1417039",
    "end": "1424960"
  },
  {
    "text": "also closing the TP connections because there is some delay between stopping and restarting and um once we click on the",
    "start": "1424960",
    "end": "1432799"
  },
  {
    "text": "retry button then it will try to reconnect to server and resume from the point when the check point was",
    "start": "1432799",
    "end": "1440879"
  },
  {
    "text": "created um so we also did some performance evaluation on how this um is",
    "start": "1442559",
    "end": "1448919"
  },
  {
    "text": "different from uh alternative methods or essentially how um providing buil-in",
    "start": "1448919",
    "end": "1454240"
  },
  {
    "text": "support in creu um differs from um using an external tool to encrypt the",
    "start": "1454240",
    "end": "1460640"
  },
  {
    "text": "checkpoint and there two main types of workloads um compute intensive and memory intensive so compute intensive",
    "start": "1460640",
    "end": "1467880"
  },
  {
    "text": "are um applications that create many threads or um many processes that run in",
    "start": "1467880",
    "end": "1475159"
  },
  {
    "text": "container and in this case cre will create um many small files and just",
    "start": "1475159",
    "end": "1481799"
  },
  {
    "text": "opening and uh closing these files are creates a lot of overhead for external",
    "start": "1481799",
    "end": "1486960"
  },
  {
    "text": "tools and then memory intensive applications usually have uh small",
    "start": "1486960",
    "end": "1492520"
  },
  {
    "text": "number of images um but have very large size so in this case um memory pages",
    "start": "1492520",
    "end": "1499799"
  },
  {
    "text": "will be the main component of the checkpoint and uh we compared uh we use",
    "start": "1499799",
    "end": "1506039"
  },
  {
    "text": "um open SOG and H um and we integrated",
    "start": "1506039",
    "end": "1511080"
  },
  {
    "text": "this with the um something called action script so this is essentially a sh",
    "start": "1511080",
    "end": "1517600"
  },
  {
    "text": "script that run runs in the postum hook so once the checkpoint is created just",
    "start": "1517600",
    "end": "1524000"
  },
  {
    "text": "before uh cre finishes it will execute this show script and and essentially what it does is just um essentially",
    "start": "1524000",
    "end": "1532640"
  },
  {
    "text": "encrypting all the files in the checkpoint directory and so um this is these are",
    "start": "1532640",
    "end": "1539559"
  },
  {
    "text": "the evoluation results on the left you can see um a comparison of the",
    "start": "1539559",
    "end": "1545799"
  },
  {
    "text": "checkpoint time so for Compu intensive application and it could be up to orders",
    "start": "1545799",
    "end": "1552399"
  },
  {
    "text": "of magnitude faster than using an external tool mainly because um we're",
    "start": "1552399",
    "end": "1557559"
  },
  {
    "text": "avoiding overhead of uh opening and closing manyu files we're essentially",
    "start": "1557559",
    "end": "1563320"
  },
  {
    "text": "encrypting the data just before it is written to disk it also reduces the um",
    "start": "1563320",
    "end": "1569159"
  },
  {
    "text": "storage requirements since we don't really need additional storage to uh",
    "start": "1569159",
    "end": "1574600"
  },
  {
    "text": "save the checkpoint or to encrypt the checkpoint and on the right uh is shown",
    "start": "1574600",
    "end": "1581399"
  },
  {
    "text": "the uh encryption throughput or essentially um um it it takes less time to uh",
    "start": "1581399",
    "end": "1590840"
  },
  {
    "text": "encrypt the data mainly because um we don't have to open and close um many files essentially we're um encrypting",
    "start": "1590840",
    "end": "1599559"
  },
  {
    "text": "the data just before this written to disk and um thank you thank you for",
    "start": "1599559",
    "end": "1604679"
  },
  {
    "text": "listening and uh as a summary uh we are um adding buildin support for checkpoint",
    "start": "1604679",
    "end": "1611880"
  },
  {
    "text": "encryption in cre it provides a reduced encryption overhead and it simless to",
    "start": "1611880",
    "end": "1618240"
  },
  {
    "text": "integrate with existing container platforms and kubernetes and if you can",
    "start": "1618240",
    "end": "1623640"
  },
  {
    "text": "also go on GitHub and see the project thank",
    "start": "1623640",
    "end": "1629960"
  },
  {
    "text": "you and I'm happy to take any",
    "start": "1633000",
    "end": "1637200"
  },
  {
    "text": "questions yes uh I mean there are multiple different uh companies using",
    "start": "1643240",
    "end": "1648360"
  },
  {
    "text": "checkpoint restore um it's becoming more popular Now with uh GPU checkpointing",
    "start": "1648360",
    "end": "1654039"
  },
  {
    "text": "Nvidia for example recently released a tool that allows to checkpoint the GPU state with Creo um Microsoft are using",
    "start": "1654039",
    "end": "1661799"
  },
  {
    "text": "this internally with uh their Singularity system and Google with have",
    "start": "1661799",
    "end": "1667240"
  },
  {
    "text": "integration with Bor um there there was also talk at cucon um I think back in",
    "start": "1667240",
    "end": "1673799"
  },
  {
    "text": "November last year uh that uh uh from 10 Cent so 10 cent are also using jpu",
    "start": "1673799",
    "end": "1680720"
  },
  {
    "text": "checkpointing and the main thing is um I mean there are many different companies using it but uh the main benefits are um",
    "start": "1680720",
    "end": "1689440"
  },
  {
    "text": "for example preemptive scheduling where you can um instead of terminating a pod",
    "start": "1689440",
    "end": "1696840"
  },
  {
    "text": "or container you can create a checkpoint and then resume the application from where",
    "start": "1696840",
    "end": "1704279"
  },
  {
    "text": "uh I mean scaling is a different problem um so yeah there there are different use",
    "start": "1711159",
    "end": "1717200"
  },
  {
    "text": "cases in general um I I I haven't experimented with scaling but I know",
    "start": "1717200",
    "end": "1722919"
  },
  {
    "text": "that there are some research yeah",
    "start": "1722919",
    "end": "1730760"
  },
  {
    "text": "yeah um and the other use case is application startup it's very popular",
    "start": "1730760",
    "end": "1735799"
  },
  {
    "text": "with Java applications because the Java applications take a long time to initialize and to start so the Java",
    "start": "1735799",
    "end": "1742880"
  },
  {
    "text": "Community has integrated Creo with um the project called crack or coordinated",
    "start": "1742880",
    "end": "1749200"
  },
  {
    "text": "checkpoint restore um and essentially it um creates a checkpoint just after Java",
    "start": "1749200",
    "end": "1756159"
  },
  {
    "text": "has initialized the Java run time and then restoring from the checkpoint is faster than initializing the",
    "start": "1756159",
    "end": "1764518"
  },
  {
    "text": "state yeah well they they use firecracker so firecracker has Al",
    "start": "1765080",
    "end": "1771480"
  },
  {
    "text": "checkpointing mechanism",
    "start": "1771480",
    "end": "1775600"
  },
  {
    "text": "yeah yeah disp connections are quite interesting um the way it works is uh",
    "start": "1780880",
    "end": "1786320"
  },
  {
    "text": "there is um an option in the kernel called TP repair that allows you to essentially um modify or modify the",
    "start": "1786320",
    "end": "1794480"
  },
  {
    "text": "state of of of the GP socket so um um essentially we save uh any data that has",
    "start": "1794480",
    "end": "1801960"
  },
  {
    "text": "been received but hasn't been read from the application and then we restore the tsp sockets and restore their state and",
    "start": "1801960",
    "end": "1809919"
  },
  {
    "text": "then once the application is resumed it can just continue as this the main challenge is when the IP address changes",
    "start": "1809919",
    "end": "1817320"
  },
  {
    "text": "so for example if you migrate an application from one not to another um",
    "start": "1817320",
    "end": "1822600"
  },
  {
    "text": "the client wouldn't know that the IP address will change so they the client",
    "start": "1822600",
    "end": "1828000"
  },
  {
    "text": "will continue sending buckets to the destination note and we currently have a",
    "start": "1828000",
    "end": "1833200"
  },
  {
    "text": "Google Su callede project working on this but essentially you can use a load balcer to um keep track of the new IP",
    "start": "1833200",
    "end": "1841399"
  },
  {
    "text": "address and then redirect the TCP",
    "start": "1841399",
    "end": "1845720"
  },
  {
    "text": "packets oh um it depends on the state so depends how much state is the",
    "start": "1852000",
    "end": "1858039"
  },
  {
    "text": "application has so um if you use something like uh there's there's",
    "start": "1858039",
    "end": "1864080"
  },
  {
    "text": "technique called post copy migration or lazy migration it's essentially just",
    "start": "1864080",
    "end": "1869480"
  },
  {
    "text": "copying the CPU state of the application and then resuming immediately and which is the downtime is very small mainly",
    "start": "1869480",
    "end": "1876399"
  },
  {
    "text": "because you're transferring just a few kilobytes or megabyte of data and uh",
    "start": "1876399",
    "end": "1881760"
  },
  {
    "text": "then all memory pages are transferred on demand so we use a mechanism called user",
    "start": "1881760",
    "end": "1887360"
  },
  {
    "text": "fault so every time when the application tries to access a memory page this memory page",
    "start": "1887360",
    "end": "1893559"
  },
  {
    "text": "is transferred yeah",
    "start": "1893559",
    "end": "1899480"
  },
  {
    "text": "thanks um thank you everyone for listening and thank",
    "start": "1903360",
    "end": "1909960"
  }
]