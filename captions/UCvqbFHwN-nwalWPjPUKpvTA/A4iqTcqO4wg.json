[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "there's going to be on Yeager and deep dive into what it is how you can use",
    "start": "0",
    "end": "5490"
  },
  {
    "text": "this how you can get value out of it I'm kind of curious though first show of hands how many people have new Yaeger no",
    "start": "5490",
    "end": "13139"
  },
  {
    "text": "one look you can sorry there we go copy audience awesome great so I want to talk about the project its current state",
    "start": "13139",
    "end": "19500"
  },
  {
    "start": "16000",
    "end": "30000"
  },
  {
    "text": "and where it's going from a roadmap perspective as well as some of the new features I want to actually show it live",
    "start": "19500",
    "end": "24689"
  },
  {
    "text": "you're going to see how you can actually leverage it as well and I'll try to leave some room at the end for some Q&A",
    "start": "24689",
    "end": "30679"
  },
  {
    "text": "first a quick introduction on myself my name is Steve Flanders I am head of product and experience at a stealth",
    "start": "30679",
    "end": "37290"
  },
  {
    "text": "startup in the bay area of California in the United States called on mission we",
    "start": "37290",
    "end": "42480"
  },
  {
    "text": "are in the observability space we actually contribute to open source software including Jaeger open Sun",
    "start": "42480",
    "end": "48629"
  },
  {
    "text": "system opens limit tree if you're interested in learning more about observability in general I have a",
    "start": "48629",
    "end": "53699"
  },
  {
    "text": "feeling it's available all right so what is tracing and why is it important well",
    "start": "53699",
    "end": "60420"
  },
  {
    "start": "59000",
    "end": "67000"
  },
  {
    "text": "if you look at very large companies the Netflix Facebook the Amazon's of the",
    "start": "60420",
    "end": "66030"
  },
  {
    "text": "world what you see is that they have very complex architectures they have moved to a micro services based",
    "start": "66030",
    "end": "72210"
  },
  {
    "start": "67000",
    "end": "77000"
  },
  {
    "text": "architecture where they have a lot of different service to service communication and this can lead to",
    "start": "72210",
    "end": "77280"
  },
  {
    "start": "77000",
    "end": "152000"
  },
  {
    "text": "complexity over who actually invented Jaeger they have a very complex architecture as",
    "start": "77280",
    "end": "83520"
  },
  {
    "text": "well and so calls actually go through multiple of these different services in",
    "start": "83520",
    "end": "88920"
  },
  {
    "text": "order to call and uber to get transportation and so every request",
    "start": "88920",
    "end": "94470"
  },
  {
    "text": "within your system that's known as a distributed trait and when you try to troubleshoot distributed tracing systems",
    "start": "94470",
    "end": "100920"
  },
  {
    "text": "problems it can be very very hard so when you have tens of services maybe",
    "start": "100920",
    "end": "105990"
  },
  {
    "text": "it's not that complex and you have hundreds and services that gets very complex very quickly one of the biggest",
    "start": "105990",
    "end": "112470"
  },
  {
    "text": "problems as you move from a monolith to a micro services based architecture is problem isolation where is the problem",
    "start": "112470",
    "end": "120210"
  },
  {
    "text": "where is the root cause and a monolith is in the monolith with a distributed",
    "start": "120210",
    "end": "125369"
  },
  {
    "text": "architecture like this one micro service can actually cause errors upstream and",
    "start": "125369",
    "end": "130470"
  },
  {
    "text": "downstream a rippling of that so while this read directionality of",
    "start": "130470",
    "end": "137740"
  },
  {
    "text": "arrow arrows shows a single call there are actually billions of them within Ebers infrastructure every day the same",
    "start": "137740",
    "end": "144580"
  },
  {
    "text": "applies to Facebook Microsoft Google and Netflix any large company that has a lot of micro services has a lot of calls in",
    "start": "144580",
    "end": "151750"
  },
  {
    "text": "the giving day now what you want to know is what's going on and who's to blame",
    "start": "151750",
    "end": "157270"
  },
  {
    "start": "152000",
    "end": "187000"
  },
  {
    "text": "for issues when a problem arises if you're a developer and you're on call if",
    "start": "157270",
    "end": "162460"
  },
  {
    "text": "you're an SRE and you're on call",
    "start": "162460",
    "end": "166290"
  },
  {
    "text": "like that you're an f3 or a DevOps engineer and you're on call you want to be able to",
    "start": "176010",
    "end": "182650"
  },
  {
    "text": "isolate the problem and remediate it as quickly as possible so how can you do that",
    "start": "182650",
    "end": "188550"
  },
  {
    "start": "187000",
    "end": "257000"
  },
  {
    "text": "traditionally back before micro services you use metrics and logs to do that",
    "start": "188550",
    "end": "194110"
  },
  {
    "text": "primarily metrics were used to measure like CPU utilization memory utilization",
    "start": "194110",
    "end": "199530"
  },
  {
    "text": "logs were used more as a root cause who made what changed why what was the error",
    "start": "199530",
    "end": "206080"
  },
  {
    "text": "as the result of that these tools are powerful even today even in cloud native",
    "start": "206080",
    "end": "211120"
  },
  {
    "text": "or micro-services based architectures but the problem is they're missing context and correlation so I like to",
    "start": "211120",
    "end": "219070"
  },
  {
    "text": "refer to them as symptom state school they told you why something occurred or that something occurred but not why it",
    "start": "219070",
    "end": "225760"
  },
  {
    "text": "occurred now in a microservices architecture this can cause a lot of problems like alert storms",
    "start": "225760",
    "end": "231790"
  },
  {
    "text": "if one micro service starts generating high CPU utilization or a large number",
    "start": "231790",
    "end": "237850"
  },
  {
    "text": "of errors those errors or that resource consumption consumption can actually propagate upstream and downstream from a",
    "start": "237850",
    "end": "245050"
  },
  {
    "text": "given service if different services are owned by different service owners well then you end up waking up a bunch of",
    "start": "245050",
    "end": "251500"
  },
  {
    "text": "people at the same time in order to troubleshoot an issue that actually started in the end service so how do you",
    "start": "251500",
    "end": "258130"
  },
  {
    "start": "257000",
    "end": "328000"
  },
  {
    "text": "get context and correlation distributed tracing it's the way prior to the cloud",
    "start": "258130",
    "end": "263830"
  },
  {
    "text": "native error this was known as application performance monitoring the focus is really on performance but",
    "start": "263830",
    "end": "270130"
  },
  {
    "text": "distributed tracing can actually do more than performance it can do availability as well it can help you with on-call",
    "start": "270130",
    "end": "276820"
  },
  {
    "text": "root cause any troubleshooting within your environment what makes distributed",
    "start": "276820",
    "end": "281860"
  },
  {
    "text": "trace and powerful is that it can actually follow a request throughout your entire system that means that knows",
    "start": "281860",
    "end": "287740"
  },
  {
    "text": "who called to that knows who was originated in error and who propagated in error this graph here on the on the",
    "start": "287740",
    "end": "296230"
  },
  {
    "text": "screen this represents a visualization of a distributed trace this was",
    "start": "296230",
    "end": "301480"
  },
  {
    "text": "constructed from distributed tracing data you can actually see different services red indicates errors that",
    "start": "301480",
    "end": "308470"
  },
  {
    "text": "occurred in those service and you can also see via the arrows which service calls which service",
    "start": "308470",
    "end": "314340"
  },
  {
    "text": "completely constructed from distributed tracing data on top of that we can actually enhance metrics and logs with",
    "start": "314340",
    "end": "321939"
  },
  {
    "text": "distributed tracing data so that metrics and logs have context and correlation as well so with that background let me",
    "start": "321939",
    "end": "330580"
  },
  {
    "start": "328000",
    "end": "361000"
  },
  {
    "text": "introduce Jaeger so Jaeger is a distributed tracing backend it doesn't focus on metrics and",
    "start": "330580",
    "end": "336400"
  },
  {
    "text": "logs it focuses on distributed tracing it was actually invented at uber if",
    "start": "336400",
    "end": "341409"
  },
  {
    "text": "you've heard the name URI before he's one of the main architects and contributors to Jaeger it was open",
    "start": "341409",
    "end": "347319"
  },
  {
    "text": "source and made available in 2017 it is a CNC F project right now in the incubating phase but it is up for",
    "start": "347319",
    "end": "353860"
  },
  {
    "text": "graduation from Stan's bf and hopefully that will be occurring soon which speak maturity of the solution now it's a very",
    "start": "353860",
    "end": "362770"
  },
  {
    "start": "361000",
    "end": "388000"
  },
  {
    "text": "active community it's completely open-source and I definitely encourage you to get involved if you're interested",
    "start": "362770",
    "end": "368919"
  },
  {
    "text": "you can see some of the stats here it's primarily driven by maintainer x' from uber and Red Hat but there's a lot of",
    "start": "368919",
    "end": "375400"
  },
  {
    "text": "open source contributions as well there are actually issues that are tagged with like good first issue or Help Wanted",
    "start": "375400",
    "end": "382750"
  },
  {
    "text": "those would be a great way to get involved with this community if you are interested now what is Jaeger I set it",
    "start": "382750",
    "end": "391120"
  },
  {
    "start": "388000",
    "end": "677000"
  },
  {
    "text": "to distribute racing platform it's actually made up of four different components you basically have the in the",
    "start": "391120",
    "end": "397689"
  },
  {
    "text": "bottom right instrumentation libraries this is how you extract distributed tracing data from your application so",
    "start": "397689",
    "end": "404740"
  },
  {
    "text": "that you can consume it then you have the data mining platform you can think of this as collection such as an agent",
    "start": "404740",
    "end": "411399"
  },
  {
    "text": "and a collector as well as the ability to run analytics on top of that data so",
    "start": "411399",
    "end": "416770"
  },
  {
    "text": "that you can query over it you have the tracing collection back-end where you actually store that trace data as well",
    "start": "416770",
    "end": "424000"
  },
  {
    "text": "as the analytics that you have constructed and then of course the visualization front-end how you can",
    "start": "424000",
    "end": "429159"
  },
  {
    "text": "query the data out and visually see it so that you can troubleshoot your environment and I'll demonstrate each of",
    "start": "429159",
    "end": "435339"
  },
  {
    "text": "these in a moment",
    "start": "435339",
    "end": "438360"
  },
  {
    "text": "okay so there are two different architectures for Jaeger this is v1 v1 and v2 are very similar this is actually",
    "start": "447970",
    "end": "455140"
  },
  {
    "text": "in the Jaeger tracing dot IO documentation so very easy to reference most of the blue items or light blue",
    "start": "455140",
    "end": "462370"
  },
  {
    "text": "items represent components of Jaeger so basically you will have an application",
    "start": "462370",
    "end": "467440"
  },
  {
    "text": "as shown in yellow here that's the software that you have written Jaeger provides a client or client library as",
    "start": "467440",
    "end": "475540"
  },
  {
    "text": "it's known as which can be used to extract distributed tracing data out of your application that then offers an",
    "start": "475540",
    "end": "481600"
  },
  {
    "text": "agent that can run with your application or the host or container that the application is running on the agent then",
    "start": "481600",
    "end": "488710"
  },
  {
    "text": "sends that data to a collector the collector can then send that to a database of your choice there's a few",
    "start": "488710",
    "end": "494530"
  },
  {
    "text": "selected I'll talk about them in a moment there's this notion of spark jobs in v1 this is what actually performs",
    "start": "494530",
    "end": "501490"
  },
  {
    "text": "analytics it's used to build dependency graphs so we can actually visualize the distributed trace like I showed earlier",
    "start": "501490",
    "end": "507700"
  },
  {
    "text": "as well as to compute SLI or service level indicators metrics from the",
    "start": "507700",
    "end": "513550"
  },
  {
    "text": "distributed tracing data and then you have the query interface in UI so that you can get the data out of the database",
    "start": "513550",
    "end": "519430"
  },
  {
    "text": "and actually be able to see it now the only difference between v1 and v2 is the",
    "start": "519430",
    "end": "525490"
  },
  {
    "text": "analytics engine so in v1 it's done via spark jobs after the fact in v2 it's",
    "start": "525490",
    "end": "532960"
  },
  {
    "text": "done via a Kafka message bus and flink streaming for analytics so it's done",
    "start": "532960",
    "end": "538180"
  },
  {
    "text": "more real-time now it's not like v1 is deprecated and v2 is what you should use",
    "start": "538180",
    "end": "544000"
  },
  {
    "text": "there are valid use cases for both v1 and v2 and both are fully supported",
    "start": "544000",
    "end": "550330"
  },
  {
    "text": "depending on your business requirements the advantages are v2 this is more of a",
    "start": "550330",
    "end": "555520"
  },
  {
    "text": "production Enterprise ready highly scalable architecture the Kafka message",
    "start": "555520",
    "end": "561490"
  },
  {
    "text": "bus makes it so that you can handle bursts of traffic bursts of traces in your environments the flink streaming",
    "start": "561490",
    "end": "568030"
  },
  {
    "text": "jobs allow you to get Analytics data as the data is being ingested instead of after the fact so it's a little bit",
    "start": "568030",
    "end": "574240"
  },
  {
    "text": "faster and a little bit more scalable both are completely both architectures are encouraged",
    "start": "574240",
    "end": "581030"
  },
  {
    "text": "now while the blue boxes represent Jaeger components you can mix and mingle",
    "start": "581030",
    "end": "587060"
  },
  {
    "text": "different components as you see fit for example let's say that instead of Jaeger",
    "start": "587060",
    "end": "593060"
  },
  {
    "text": "you want to use a Zipkin client library that is supported as well in fact Jaeger",
    "start": "593060",
    "end": "598490"
  },
  {
    "text": "fully support Zipkin so if you're using Zipkin or coming from a Zipkin environment you can actually leverage",
    "start": "598490",
    "end": "604250"
  },
  {
    "text": "Jaeger as well in addition if you wanted to leverage let's say the open census",
    "start": "604250",
    "end": "609410"
  },
  {
    "text": "service which is made up of an agent and a collector instead of the Jaeger agent and collector you can do that as well",
    "start": "609410",
    "end": "615560"
  },
  {
    "text": "this architecture is still fully supported you could still get the data into a Jaeger backend and you could",
    "start": "615560",
    "end": "622190"
  },
  {
    "text": "still use the Jaeger UI to query the data out so you can mix and mingle however you see fit the advantages of",
    "start": "622190",
    "end": "629870"
  },
  {
    "text": "this are clearly flexibility but from a collection standpoint the Asia and the collector I could now send to Jaeger and",
    "start": "629870",
    "end": "637070"
  },
  {
    "text": "Zipkin at the same time I could send to Jaeger and omniscient let's say for example at the same time so there's",
    "start": "637070",
    "end": "642980"
  },
  {
    "text": "flexibility if you leverage different components but that's not a requirement you could also skip the analytics engine",
    "start": "642980",
    "end": "650210"
  },
  {
    "text": "if you really wanted to if that if you didn't need the service level indicators or the dependency graph if you just",
    "start": "650210",
    "end": "656240"
  },
  {
    "text": "wanted raw traces and the ability to query over that that's possible as well so again the architecture provides",
    "start": "656240",
    "end": "662980"
  },
  {
    "text": "flexibility all of the components are available to use to use it's a modular",
    "start": "662980",
    "end": "668480"
  },
  {
    "text": "architecture so every box basically represents a separate docker container that you can deploy and so you can mix",
    "start": "668480",
    "end": "675260"
  },
  {
    "text": "and mingle to fit your needs now I should point out that Jaeger loves open",
    "start": "675260",
    "end": "681230"
  },
  {
    "start": "677000",
    "end": "734000"
  },
  {
    "text": "standards I'm actually doing a talk immediately after this one in this room on open telemetry which is another CN CF",
    "start": "681230",
    "end": "688520"
  },
  {
    "text": "project the merging of open census and open tracing the Jaeger client libraries",
    "start": "688520",
    "end": "693950"
  },
  {
    "text": "that I mentioned they are actually open tracing compatible today open census",
    "start": "693950",
    "end": "699140"
  },
  {
    "text": "fully supports Jaeger today and these two projects are merging to form open telemetry in fact yuri wrote a post on",
    "start": "699140",
    "end": "706910"
  },
  {
    "text": "this i have a link at the bottom it's the medium post and yuri talks about that in the future Jaeger is considering",
    "start": "706910",
    "end": "714440"
  },
  {
    "text": "removing its client libraries and relying on open to limit Ruiz client libraries and also removing its agent",
    "start": "714440",
    "end": "721220"
  },
  {
    "text": "and collector and moving to the open to limit reagent and collector though Jager is open-source software",
    "start": "721220",
    "end": "727040"
  },
  {
    "text": "Jager loves open standards open telemetry is providing some of those standards that's definitely something to",
    "start": "727040",
    "end": "732410"
  },
  {
    "text": "take a look at in the future all right going back to Jager the technology stack",
    "start": "732410",
    "end": "737480"
  },
  {
    "start": "734000",
    "end": "814000"
  },
  {
    "text": "so Jager is written and go it's clearly go language today it has a very pluggable storage architecture this is",
    "start": "737480",
    "end": "744650"
  },
  {
    "text": "actually critical it's one of the newer features that came out in the one nine one ten timeframe and one twelve is the",
    "start": "744650",
    "end": "751130"
  },
  {
    "text": "latest version so basically the way Jager handles this is they support three",
    "start": "751130",
    "end": "756380"
  },
  {
    "text": "core storage backends in the Jager repository itself those backends are",
    "start": "756380",
    "end": "761960"
  },
  {
    "text": "cassandra elastic and badger and then it has a pluggable architecture so the",
    "start": "761960",
    "end": "767570"
  },
  {
    "text": "community can contribute other backends if they want those as well and there's a",
    "start": "767570",
    "end": "772580"
  },
  {
    "text": "separate repository for that it's maintained out of Jager core today that includes influx DB and Couchbase there's",
    "start": "772580",
    "end": "781070"
  },
  {
    "text": "also a github issue open for other types of backends such as dynamo DB so if",
    "start": "781070",
    "end": "787340"
  },
  {
    "text": "you're interested in contributing to that PRS are definitely welcome the front-end is a modern react JavaScript",
    "start": "787340",
    "end": "794600"
  },
  {
    "text": "based front-end it's very responsive you'll see it here in a minute I already talked about the open tracing",
    "start": "794600",
    "end": "799640"
  },
  {
    "text": "instrumentation libraries and how that uses an open API standards and there's already integrations you saw in the v2",
    "start": "799640",
    "end": "806210"
  },
  {
    "text": "architecture Kafka and blink and of course this could be extended to support other analytics backends if you want it",
    "start": "806210",
    "end": "813170"
  },
  {
    "text": "as well okay so integrations I just want to cover this real quick depending on",
    "start": "813170",
    "end": "819110"
  },
  {
    "start": "814000",
    "end": "851000"
  },
  {
    "text": "where you are in your cloud native journey there's a bunch of ways to get going with Jaeger so for example if",
    "start": "819110",
    "end": "825380"
  },
  {
    "text": "you're on kubernetes there's a native operator that you can deploy today if you're on SEO",
    "start": "825380",
    "end": "830510"
  },
  {
    "text": "there's integrations for that if you leverage envoy as a sidecar for your data plane or as part of a service mesh",
    "start": "830510",
    "end": "836750"
  },
  {
    "text": "that's already instrumented and fully supports Jaeger so there's a bunch of ways to get started with little work on",
    "start": "836750",
    "end": "843380"
  },
  {
    "text": "your ends to actually consume Jaeger I definitely encourage you to take a look at these reef",
    "start": "843380",
    "end": "848790"
  },
  {
    "text": "I don't have time to cover all of them alright new features so the latest",
    "start": "848790",
    "end": "854759"
  },
  {
    "start": "851000",
    "end": "863000"
  },
  {
    "text": "version is 1.12 I want to talk about some of the changes in the 1.10 to 1.12 timeframe I think this is important to",
    "start": "854759",
    "end": "861629"
  },
  {
    "text": "speak to the maturity of the product as I mentioned Jager is up for promotion and CN CF to become a graduated project",
    "start": "861629",
    "end": "868740"
  },
  {
    "start": "863000",
    "end": "995000"
  },
  {
    "text": "so a lot of the focus that you see today is around hardening the existing feature",
    "start": "868740",
    "end": "873779"
  },
  {
    "text": "set to make sure that it is production and enterprise ready so for example",
    "start": "873779",
    "end": "878970"
  },
  {
    "text": "elasticsearch being one of the primary backends there's been a lot of improvement to the security side of the",
    "start": "878970",
    "end": "884519"
  },
  {
    "text": "house to ensure that it's hardened to best practices to ensure that your data is secure in that database GG RPC",
    "start": "884519",
    "end": "893249"
  },
  {
    "text": "support is natively being added to it they see that as the future in fact the front end inquiry interface was recently",
    "start": "893249",
    "end": "900180"
  },
  {
    "text": "migrated over to your PC in order to get data out of the back end better Zipkin",
    "start": "900180",
    "end": "905519"
  },
  {
    "text": "compatibility as I mentioned Jaeger is fully Zipkin compatible so as changes are made to Zipkin Jaeger is also",
    "start": "905519",
    "end": "911790"
  },
  {
    "text": "enhanced so that it can support that new functionality you can mix and mingle Zipkin and Jaeger as you see fit it's",
    "start": "911790",
    "end": "918209"
  },
  {
    "text": "not uncommon I didn't talk too much about instrumentation but there's something known as context propagation",
    "start": "918209",
    "end": "924029"
  },
  {
    "text": "that's how you actually pass trace and span data between your applications",
    "start": "924029",
    "end": "929089"
  },
  {
    "text": "there's different header formats for that Jaeger has one Zipkin has one",
    "start": "929089",
    "end": "934189"
  },
  {
    "text": "Zipkin format it's probably the most common today it's called b3 so if you're",
    "start": "934189",
    "end": "939930"
  },
  {
    "text": "using b3 headers you can still leverage the Jaeger back-end and Yeager collection mechanism it's worth calling",
    "start": "939930",
    "end": "947160"
  },
  {
    "text": "out I talked about open standards there is a new context propagation format",
    "start": "947160",
    "end": "952800"
  },
  {
    "text": "standard that's coming out from w3c it's called w3c trait context all of the",
    "start": "952800",
    "end": "959879"
  },
  {
    "text": "instrumentation libraries will be supporting it going forward open census is natively adding it right now and open",
    "start": "959879",
    "end": "965970"
  },
  {
    "text": "telemetry will have it as part of its first version that is the context propagation format that you should",
    "start": "965970",
    "end": "971999"
  },
  {
    "text": "probably be considering going forward as that will become the standard and then",
    "start": "971999",
    "end": "977610"
  },
  {
    "text": "from a UI perspective there are some enhanced capabilities I'll actually demonstrate some of these and I provided links how",
    "start": "977610",
    "end": "984660"
  },
  {
    "text": "do you can actually get the changelog for the changes that are coming in these releases you can actually follow along they do tag the milestones and github so",
    "start": "984660",
    "end": "992040"
  },
  {
    "text": "it's very easy to see the new features that are coming out and then definite ake a look at the website I mentioned",
    "start": "992040",
    "end": "997980"
  },
  {
    "text": "Jager tracing that I oh you can actually contribute to this as well it's part of the github repository a lot of rich resources here very easy to get started",
    "start": "997980",
    "end": "1004910"
  },
  {
    "text": "with that I want to switch to a quick demo and then I can show you a few more",
    "start": "1004910",
    "end": "1010220"
  },
  {
    "start": "1005000",
    "end": "1017000"
  },
  {
    "text": "slides so what I've done here is I mentioned everything's kind of a docker",
    "start": "1010220",
    "end": "1015440"
  },
  {
    "text": "container you don't need to memorize these I'll show you the slides it's actually uploaded to this session so if",
    "start": "1015440",
    "end": "1020450"
  },
  {
    "start": "1017000",
    "end": "1046000"
  },
  {
    "text": "you open up the schedule builder I have these links directly in there but with one command I can actually go ahead and",
    "start": "1020450",
    "end": "1026150"
  },
  {
    "text": "fire up and all in one Jager instance it has the collector it has the database it",
    "start": "1026150",
    "end": "1031459"
  },
  {
    "text": "has the query interface and the UI all built in and then in addition to that",
    "start": "1031459",
    "end": "1036980"
  },
  {
    "text": "there's also an example app it's called the hot rod app this is on the Jager",
    "start": "1036980",
    "end": "1042199"
  },
  {
    "text": "tracing site and I will show you the links for that in just a minute so with that in place I can actually",
    "start": "1042200",
    "end": "1049070"
  },
  {
    "start": "1046000",
    "end": "1079000"
  },
  {
    "text": "locally run this and let's make sure it's easy to see so here is the hot rod app it's basically rides on-demand think",
    "start": "1049070",
    "end": "1056450"
  },
  {
    "text": "like uber or DD here and you can go ahead and request cars I can click it a",
    "start": "1056450",
    "end": "1062930"
  },
  {
    "text": "few times and it will dispatch them and this is basically calling a micro services backends that has been",
    "start": "1062930",
    "end": "1069170"
  },
  {
    "text": "instrumented and that data is going to a Yaeger instance and I can choose different cars I can click it multiple",
    "start": "1069170",
    "end": "1076010"
  },
  {
    "text": "times and it makes a whole bunch of different requests now on the flip side this is the Yaeger UI so the first time",
    "start": "1076010",
    "end": "1083900"
  },
  {
    "start": "1079000",
    "end": "1097000"
  },
  {
    "text": "you log in this is what Yaeger would look like it basically provides a query interface over your distributed traces",
    "start": "1083900",
    "end": "1090260"
  },
  {
    "text": "so you can see here I have a bunch of different services this is from my hotrod app I can go ahead and select one",
    "start": "1090260",
    "end": "1096980"
  },
  {
    "text": "in this case I can just run a query over that data and I can very quickly see the distributed tracing data in my",
    "start": "1096980",
    "end": "1103550"
  },
  {
    "start": "1097000",
    "end": "1205000"
  },
  {
    "text": "environment what this will actually highlight for me are important things like the number of errors so if there's",
    "start": "1103550",
    "end": "1109940"
  },
  {
    "text": "errors in the trace I might want to go investigate that or the latency of the request",
    "start": "1109940",
    "end": "1115280"
  },
  {
    "text": "so for example this call took 1.6 seconds each of these boxes represent a",
    "start": "1115280",
    "end": "1121190"
  },
  {
    "text": "trace you can see them summarized here but you can click into them to get rich insights from that data as well so for",
    "start": "1121190",
    "end": "1128810"
  },
  {
    "text": "example now I have clicked into a single trace this is one request in the hot rod",
    "start": "1128810",
    "end": "1134450"
  },
  {
    "text": "application and you can see the call stack as long as well as latency information for each of those calls and",
    "start": "1134450",
    "end": "1141260"
  },
  {
    "text": "if there were errors so here you can see the front end took that 1.6 seconds",
    "start": "1141260",
    "end": "1147350"
  },
  {
    "text": "totally to compute the front end itself took about 1.2 1 seconds to get the data",
    "start": "1147350",
    "end": "1152510"
  },
  {
    "text": "out of MySQL and to return it back you can see calls in to Redis and read here",
    "start": "1152510",
    "end": "1158240"
  },
  {
    "text": "tells you that that an error has occurred in this case that looks like there were some Redis timeouts in this",
    "start": "1158240",
    "end": "1163760"
  },
  {
    "text": "particular requests to the hot rod application and there's rich metadata associated with this as well so when you",
    "start": "1163760",
    "end": "1171320"
  },
  {
    "text": "instrument your application you can actually tag it with important pieces of metadata things that you might include",
    "start": "1171320",
    "end": "1177940"
  },
  {
    "text": "could be let's say local things to the app I'm running on like the host name it",
    "start": "1177940",
    "end": "1183710"
  },
  {
    "text": "could be things specific to the environment I'm deployed in like the data center or the region that this pod",
    "start": "1183710",
    "end": "1189740"
  },
  {
    "text": "or application is running in or it could be application specific things that just",
    "start": "1189740",
    "end": "1194750"
  },
  {
    "text": "calls that it makes garbage collection time or anything that a software developer may find useful to",
    "start": "1194750",
    "end": "1201080"
  },
  {
    "text": "troubleshoot availability as well as performance bubbles now from a",
    "start": "1201080",
    "end": "1206840"
  },
  {
    "start": "1205000",
    "end": "1220000"
  },
  {
    "text": "distributed trace I mentioned that you can actually build a topology so for example here is what the hot rod app",
    "start": "1206840",
    "end": "1212150"
  },
  {
    "text": "looks like visually and each of these represent a different service node and",
    "start": "1212150",
    "end": "1217940"
  },
  {
    "text": "hovering over it tells you the call paths of them in addition it provides a dag of that same exact infrastructure so",
    "start": "1217940",
    "end": "1224810"
  },
  {
    "start": "1220000",
    "end": "1250000"
  },
  {
    "text": "again you can see here you have a front-end which calls the customer driver and route micro services the",
    "start": "1224810",
    "end": "1230510"
  },
  {
    "text": "customer one is backed by a MySQL database the driver one has a reddish cash in front of this so again very",
    "start": "1230510",
    "end": "1236180"
  },
  {
    "text": "quickly I can visualize my infrastructure and there's new calls are made this service graph can be updated",
    "start": "1236180",
    "end": "1242060"
  },
  {
    "text": "this is typically handled by the spark or flink jobs that you're running from",
    "start": "1242060",
    "end": "1247280"
  },
  {
    "text": "an analytics perspective to build these graphs and then what's really cool is that I can do comparisons",
    "start": "1247280",
    "end": "1253970"
  },
  {
    "start": "1250000",
    "end": "1318000"
  },
  {
    "text": "of different things so for example maybe I want to look at the longest running trace I'll take this one and I want to",
    "start": "1253970",
    "end": "1260149"
  },
  {
    "text": "compare it to the shortest running trace let's say this one I can say compare traces and so what this just did is it",
    "start": "1260149",
    "end": "1267679"
  },
  {
    "text": "took two traces it overlaid the data over it and it's representing what is similar and what is different between",
    "start": "1267679",
    "end": "1274370"
  },
  {
    "text": "those two traces so gray means they're the same that means both traces",
    "start": "1274370",
    "end": "1279710"
  },
  {
    "text": "contained that call path red means that one contained it while the other one did not so in this case you can see the call",
    "start": "1279710",
    "end": "1287419"
  },
  {
    "text": "that took longer actually had the Redis call and that's the call that timed out",
    "start": "1287419",
    "end": "1293600"
  },
  {
    "text": "so in this trace I can see that Redis was causing the problem that resulted in this 1.8 seconds whereas a typical call",
    "start": "1293600",
    "end": "1300679"
  },
  {
    "text": "path is typically under a second about 700 milliseconds so very easy to compare",
    "start": "1300679",
    "end": "1305960"
  },
  {
    "text": "what a trace looks like against another trace looking for differences this makes",
    "start": "1305960",
    "end": "1311330"
  },
  {
    "text": "it easy to do problem isolation and determine where you should be focusing your efforts going forward so that's a",
    "start": "1311330",
    "end": "1319100"
  },
  {
    "start": "1318000",
    "end": "1326000"
  },
  {
    "text": "very quick demo of the Jager UI I do want to show you some future things as",
    "start": "1319100",
    "end": "1324320"
  },
  {
    "text": "well that are planned and as I mentioned I do have these commands in the slide",
    "start": "1324320",
    "end": "1329749"
  },
  {
    "start": "1326000",
    "end": "1333000"
  },
  {
    "text": "deck so it'd be easy for you to get after the session so graph visualizations what I showed you with",
    "start": "1329749",
    "end": "1336320"
  },
  {
    "start": "1333000",
    "end": "1490000"
  },
  {
    "text": "the hot rod out is really a basic app they only had five or six micro services and if you have a small microservices",
    "start": "1336320",
    "end": "1343220"
  },
  {
    "text": "based architecture that will work just fine for you but if you have a lot of micro services hundreds or thousands or",
    "start": "1343220",
    "end": "1350269"
  },
  {
    "text": "can have a lot of calls spans inside of your traces then visually representing",
    "start": "1350269",
    "end": "1355669"
  },
  {
    "text": "them in a UI like what Yaeger provides isn't always ideal it can be visit visually complex to see that data so if",
    "start": "1355669",
    "end": "1369259"
  },
  {
    "text": "you have small traces we can do a comparison I showed you two different hotrod calls that was pretty easy to",
    "start": "1369259",
    "end": "1374809"
  },
  {
    "text": "visually compare but if you have hundreds or thousands that may be a lot harder to see in addition while",
    "start": "1374809",
    "end": "1380869"
  },
  {
    "text": "comparison of how the trace looks is valuable what could be even more valuable is differences in the",
    "start": "1380869",
    "end": "1387950"
  },
  {
    "text": "latency the time it took between those calls so let's actually see what that looks like here's a much more complex example",
    "start": "1387950",
    "end": "1395269"
  },
  {
    "text": "this is something more like an uber for example where I'm comparing two traces to an eats gateway again the colors",
    "start": "1395269",
    "end": "1402830"
  },
  {
    "text": "represent what's similar and different gray is the same red is different in one so we can look at this if we compare the",
    "start": "1402830",
    "end": "1409669"
  },
  {
    "text": "two traces and we want to know why one took longer than the other we can see if they share the same structure visually",
    "start": "1409669",
    "end": "1416360"
  },
  {
    "text": "they look almost identical with that said one of the traces is missing a",
    "start": "1416360",
    "end": "1421580"
  },
  {
    "text": "whole bunch of spans those represented in red here while the other one has it and then we can also see that more or",
    "start": "1421580",
    "end": "1429320"
  },
  {
    "text": "less the calls are happening within a single node at the top of the charts so",
    "start": "1429320",
    "end": "1434360"
  },
  {
    "text": "the divergence here at the bottom probably accounts for y1 span or one trace one call one request took longer",
    "start": "1434360",
    "end": "1442309"
  },
  {
    "text": "than the other now what we might want to do instead is what if instead of",
    "start": "1442309",
    "end": "1447740"
  },
  {
    "text": "comparing the structure we compare the time of the spans and see if there are differences there just because it's red",
    "start": "1447740",
    "end": "1454669"
  },
  {
    "text": "doesn't mean it's faster or slower in the previous example here I want to show a future road map item for Jaeger the",
    "start": "1454669",
    "end": "1462679"
  },
  {
    "text": "idea is again I'm comparing two spans where one took 2.7 4 seconds and the",
    "start": "1462679",
    "end": "1468350"
  },
  {
    "text": "other one took 50% longer and I want to answer the question of why why did it",
    "start": "1468350",
    "end": "1473870"
  },
  {
    "text": "take longer so I can see that there are some new spans I might be curious are",
    "start": "1473870",
    "end": "1479899"
  },
  {
    "text": "those to blame is that why it took 50% longer I can also ask the question is it",
    "start": "1479899",
    "end": "1485210"
  },
  {
    "text": "just because there's lag there's increased throughput for this request so that's why it took longer and so the",
    "start": "1485210",
    "end": "1491299"
  },
  {
    "start": "1490000",
    "end": "1570000"
  },
  {
    "text": "idea here is instead of comparing spans visually from a structural perspective I",
    "start": "1491299",
    "end": "1497269"
  },
  {
    "text": "compare them from a duration perspective and here if I look at duration I can see",
    "start": "1497269",
    "end": "1502700"
  },
  {
    "text": "very quickly that the durations are very similar even between the different nodes I can see that nodes that are not shared",
    "start": "1502700",
    "end": "1510889"
  },
  {
    "text": "they don't really have a difference here but I do see a few black and red",
    "start": "1510889",
    "end": "1516100"
  },
  {
    "text": "hard to see in the chart here but those are different from a duration perspective and the idea here is I'll be",
    "start": "1516100",
    "end": "1523120"
  },
  {
    "text": "able to hover over any of these spans Bini of these calls and quickly see hey this call took two seconds for 1.7",
    "start": "1523120",
    "end": "1530380"
  },
  {
    "text": "seconds why did it take that long this is problem isolation I can now go to the",
    "start": "1530380",
    "end": "1535960"
  },
  {
    "text": "service owner for this particular service and say hey why was your service slow how can we speed it out because",
    "start": "1535960",
    "end": "1542110"
  },
  {
    "text": "it's impacting the rest of the calls downstream it's impacting customer experience I made there may be multiple",
    "start": "1542110",
    "end": "1549640"
  },
  {
    "text": "services that are slow and so you can see that very visually now this is not available today you can actually compare",
    "start": "1549640",
    "end": "1555760"
  },
  {
    "text": "to span structures to one another but you cannot compare to span to trace",
    "start": "1555760",
    "end": "1561340"
  },
  {
    "text": "durations to one another if you're interested in contributing to that there are PRS and github issues open to get",
    "start": "1561340",
    "end": "1568360"
  },
  {
    "text": "that added to Jager of course if you're interested in learning more the website and the blog are really great resources",
    "start": "1568360",
    "end": "1574330"
  },
  {
    "start": "1570000",
    "end": "1599000"
  },
  {
    "text": "for that in addition there's a bunch of different ways to get involved the github repos listed here all",
    "start": "1574330",
    "end": "1580360"
  },
  {
    "text": "communication happens in Gitter so if you're not familiar with that you can take a look at it there is a mailing",
    "start": "1580360",
    "end": "1585610"
  },
  {
    "text": "list where you can ask questions as well twitter is also very active and there are bi-weekly community meetings that",
    "start": "1585610",
    "end": "1592059"
  },
  {
    "text": "anyone is welcome to join you can ask questions or get involved to become a contributor to the project as well with",
    "start": "1592059",
    "end": "1600610"
  },
  {
    "start": "1599000",
    "end": "1664000"
  },
  {
    "text": "that I would open it up to some QA and I've covered a few of the most common questions that I hear while giving this",
    "start": "1600610",
    "end": "1607360"
  },
  {
    "text": "talk so I figured I'll skim through them very quickly since I have a couple minutes one is where can I get more",
    "start": "1607360",
    "end": "1612429"
  },
  {
    "text": "resources uri just recently published a book on mastering distributed tracing I",
    "start": "1612429",
    "end": "1617650"
  },
  {
    "text": "definitely encourage you to take a look at that it should be available to download or purchase overhead of tracing",
    "start": "1617650",
    "end": "1624100"
  },
  {
    "text": "one of the most common questions that gets asked is is this going to slow down my application the answer is typically",
    "start": "1624100",
    "end": "1631059"
  },
  {
    "text": "no the client instrumentation is very efficient with that said if you have a very latency sensitive application you",
    "start": "1631059",
    "end": "1639039"
  },
  {
    "text": "should of course test this beforehand and make sure it's efficient for your environments Gabi",
    "start": "1639039",
    "end": "1644740"
  },
  {
    "text": "actually recently did an internship basically with the Linux Foundation she posted a medium post comparing that",
    "start": "1644740",
    "end": "1652860"
  },
  {
    "text": "climb instrumentation and the overhead that it introduces she has some really cool graphs that actually show how much",
    "start": "1652860",
    "end": "1658770"
  },
  {
    "text": "resource utilization was consumed it's a great resource if you're looking for some benchmarking information sampling",
    "start": "1658770",
    "end": "1665850"
  },
  {
    "start": "1664000",
    "end": "1755000"
  },
  {
    "text": "is a common question as well I didn't touch on this because I only have 30 minutes to talk about Jaeger but in",
    "start": "1665850",
    "end": "1671430"
  },
  {
    "text": "distributed tracing it's very common to sample the data instead of consuming a hundred percent of it you only take a",
    "start": "1671430",
    "end": "1678030"
  },
  {
    "text": "smaller percentage of that data this is not as common in logs and metrics but for better or for worse it is in",
    "start": "1678030",
    "end": "1684960"
  },
  {
    "text": "distributed tracing now Jaeger the agent and the collector has a cool feature",
    "start": "1684960",
    "end": "1690390"
  },
  {
    "text": "called a damp adaptive sampling that means it can say hey the back end is overly overloaded I want to dynamically",
    "start": "1690390",
    "end": "1697740"
  },
  {
    "text": "tell an application to slow down and send me less traces it's a really cool feature that is in iaeger today the goal",
    "start": "1697740",
    "end": "1704670"
  },
  {
    "text": "is to add that to open telemetry going for for going forward but it's not available in open tracing or open census",
    "start": "1704670",
    "end": "1712080"
  },
  {
    "text": "today what open census and open telemetry do offer though that Jaeger does not is tale based sampling so",
    "start": "1712080",
    "end": "1719640"
  },
  {
    "text": "there's two different types of sampling Xin Jaeger head base which means it happens at the application level when",
    "start": "1719640",
    "end": "1725490"
  },
  {
    "text": "the trace is to be initiated and tael base which means after the entire trace has been collected the advantage of tail",
    "start": "1725490",
    "end": "1732720"
  },
  {
    "text": "based is I can make a sampling decision with all the data so for example I can say only sample traces that contain",
    "start": "1732720",
    "end": "1739290"
  },
  {
    "text": "errors I can't do that with head based sampling because unless only the first",
    "start": "1739290",
    "end": "1744990"
  },
  {
    "text": "span would be known if that one contained an error I could collect it but if a downstream span had an error",
    "start": "1744990",
    "end": "1750420"
  },
  {
    "text": "with head based sampling I don't know that I've already made a sampling decisions so I lose that data and then",
    "start": "1750420",
    "end": "1756480"
  },
  {
    "start": "1755000",
    "end": "1801000"
  },
  {
    "text": "finally message bust a syncs long traces there are always corner cases when it comes to observer ability with",
    "start": "1756480",
    "end": "1762630"
  },
  {
    "text": "distributed traces these are three of the biggest ones the answer is it varies between them open tracing has this",
    "start": "1762630",
    "end": "1769140"
  },
  {
    "text": "notion of follows from so from a message bus or from an async perspective I can",
    "start": "1769140",
    "end": "1774390"
  },
  {
    "text": "use the follows from construct in order to basically link traces together open",
    "start": "1774390",
    "end": "1779670"
  },
  {
    "text": "census and open telemetry have a similar notion of linking this data but the visualization is still hard to",
    "start": "1779670",
    "end": "1786299"
  },
  {
    "text": "be fair Yeager's primary focus has been for more real-time RPC calls not for",
    "start": "1786299",
    "end": "1792479"
  },
  {
    "text": "some of the longer running hours or day distributed traces that would be possible to add if there was enough",
    "start": "1792479",
    "end": "1798719"
  },
  {
    "text": "interest of course PRS are welcome with that we have five minutes I would like to open it up to some questions yeah",
    "start": "1798719",
    "end": "1808609"
  },
  {
    "start": "1801000",
    "end": "1829000"
  },
  {
    "text": "is it something that is acceptable or would it have any kind of implications",
    "start": "1829320",
    "end": "1836379"
  },
  {
    "text": "on the architecture the question was around I don't want to send the client",
    "start": "1836379",
    "end": "1841720"
  },
  {
    "text": "library distribute traces to in local agent I want to send it directly to the collector or directly to the Jaeger back",
    "start": "1841720",
    "end": "1846789"
  },
  {
    "text": "end is that possible so the answer is yes that is possible actually you can send the client library directly to the",
    "start": "1846789",
    "end": "1853690"
  },
  {
    "text": "collector itself the collector can run with the database node I wouldn't recommend that in production but you can do it for example Jaeger publishes an",
    "start": "1853690",
    "end": "1860200"
  },
  {
    "text": "all-in-one so that is totally possible with that said the best practice is to",
    "start": "1860200",
    "end": "1865720"
  },
  {
    "text": "run an agent let me explain why it's kind of important there's a couple reasons one is client",
    "start": "1865720",
    "end": "1872080"
  },
  {
    "text": "instrumentation requires you to edit your code which means you have to commit it to your repository and push it",
    "start": "1872080",
    "end": "1877960"
  },
  {
    "text": "through your CI CD pipeline that's overhead for software developers they don't like to touch it multiple times if",
    "start": "1877960",
    "end": "1884769"
  },
  {
    "text": "I run an agent I can tell the client instrumentation to point to local host local host never changes always local",
    "start": "1884769",
    "end": "1891999"
  },
  {
    "text": "hosts no matter where I deploy it anywhere in my environment the client instrumentation just points to local",
    "start": "1891999",
    "end": "1897309"
  },
  {
    "text": "host and the agent will work if I point to a collector and it's in a different data center and I have latency problems",
    "start": "1897309",
    "end": "1903399"
  },
  {
    "text": "where I run a rename it or re IP it I now have to go touch my code and maybe I'm in a polyglot architecture and I",
    "start": "1903399",
    "end": "1909759"
  },
  {
    "text": "have five different languages I now have to go touch it in at least five different my code bases that's overhead so in general the recommendation would",
    "start": "1909759",
    "end": "1916899"
  },
  {
    "text": "be used the agents because having the ability to send the local host is very powerful the other reason is because",
    "start": "1916899",
    "end": "1923409"
  },
  {
    "text": "let's say I'm running in kubernetes I can actually run it as a daemon set a local agent of the host well now I can",
    "start": "1923409",
    "end": "1928749"
  },
  {
    "text": "do aggregation to the host the agent provides buffering and retry capabilities if I don't have an agent",
    "start": "1928749",
    "end": "1935470"
  },
  {
    "text": "then my client instrumentation has to have buffer and retry capabilities or I might lose that data well that's more",
    "start": "1935470",
    "end": "1941830"
  },
  {
    "text": "complexity in the client library I mentioned that like latency sensitive apps don't want overhead that's more",
    "start": "1941830",
    "end": "1947919"
  },
  {
    "text": "overhead in my application but I don't really want to manage I'd have to do that for every language go Java C++ node",
    "start": "1947919",
    "end": "1955150"
  },
  {
    "text": "Python whatever so ideally you want the client library to be as simple as possible and not have to have that logic",
    "start": "1955150",
    "end": "1961750"
  },
  {
    "text": "and to be able to point locally to itself so it doesn't have to be reconfigured that's some of the",
    "start": "1961750",
    "end": "1967270"
  },
  {
    "text": "advantages of the agent why you should probably use it but it is not a requirement so just a follow-up question",
    "start": "1967270",
    "end": "1973720"
  },
  {
    "text": "on that so how do you plan or is there a capability where the agent can be",
    "start": "1973720",
    "end": "1980410"
  },
  {
    "text": "plugged in in a Cloud Foundry based environment in Cloud Foundry I mean the agent can be deployed as a binary a",
    "start": "1980410",
    "end": "1987340"
  },
  {
    "text": "sidecar Damon said it's a flexible deployment model it's just a Linux binary you could deploy it anywhere so",
    "start": "1987340",
    "end": "1995010"
  },
  {
    "start": "1995000",
    "end": "2050000"
  },
  {
    "text": "you mean to say that we can deploy this agent binary as a sidecar in Cloud",
    "start": "1995010",
    "end": "2000720"
  },
  {
    "text": "Foundry deployments I don't know specifically for Cloud Foundry I used to work on it a long time ago and a lot has",
    "start": "2000720",
    "end": "2007230"
  },
  {
    "text": "changed I worked at it when it was at VMware it's now pivotal but I know you can deploy containers and I'm assuming",
    "start": "2007230",
    "end": "2013380"
  },
  {
    "text": "you can deploy sidecars so we did try that but apparently this",
    "start": "2013380",
    "end": "2019140"
  },
  {
    "text": "as a sidecar binary as a sidecar does not really work with PCF the pivotal",
    "start": "2019140",
    "end": "2025140"
  },
  {
    "text": "Cloud Foundry right and there's an open issue on ok let's think after this I'd love to hear more about that and let's",
    "start": "2025140",
    "end": "2031320"
  },
  {
    "text": "see if we can figure that out because it should be supported our goal is to make it flexible for any platform whether it's kubernetes or Cloud Foundry or",
    "start": "2031320",
    "end": "2037710"
  },
  {
    "text": "something else it should work absolutely thank you thank you other questions I have one more minute yeah",
    "start": "2037710",
    "end": "2044390"
  },
  {
    "start": "2050000",
    "end": "2157000"
  },
  {
    "text": "we send out a request under then we get to the response we suspend but after we",
    "start": "2050560",
    "end": "2056060"
  },
  {
    "text": "introduce things so we smash for example is to we sink most horrible things",
    "start": "2056060",
    "end": "2061419"
  },
  {
    "text": "dedicated by the smash they recorded the requests the record of the response so",
    "start": "2061419",
    "end": "2068060"
  },
  {
    "text": "we find the most of things could handle the bias to now so do you think it's a good idea we dedicate our scenes to use",
    "start": "2068060",
    "end": "2075200"
  },
  {
    "text": "to we're removing our record oh you think some things should be handled by a",
    "start": "2075200",
    "end": "2080300"
  },
  {
    "text": "CEO under some as sure things is better to handle by application data so the",
    "start": "2080300",
    "end": "2086060"
  },
  {
    "text": "questions around service smash and sto is one example of that linker D is another one what's nice about service",
    "start": "2086060",
    "end": "2091220"
  },
  {
    "text": "mesh is that it basically puts a sidecar into all of my application containers and that sidecar is already instrumented",
    "start": "2091220",
    "end": "2097460"
  },
  {
    "text": "so in the case of sto it's typically envoy on is instrumented with Zipkin and Jaeger compatibility so I can get",
    "start": "2097460",
    "end": "2103819"
  },
  {
    "text": "distributed tracing data for free if you will directly from Sto I highly recommend you leverage that now the",
    "start": "2103819",
    "end": "2110150"
  },
  {
    "text": "question is well then do I need to really instrument my out the answer is it depends but probably here's why two",
    "start": "2110150",
    "end": "2116569"
  },
  {
    "text": "reasons one is while I can get service to service communication because I now know that this sidecar talked to the",
    "start": "2116569",
    "end": "2122540"
  },
  {
    "text": "other one it's very hard to get inter-process community track",
    "start": "2122540",
    "end": "2133190"
  },
  {
    "text": "performance or availability issues in the function calls themselves the second is even if you don't instrument your app",
    "start": "2133190",
    "end": "2139220"
  },
  {
    "text": "you still need context propagation because while sto generates the span and trace information it has to propagate",
    "start": "2139220",
    "end": "2145700"
  },
  {
    "text": "that information through your app so in the case of like rest-based are pcs you still need context propagation in your",
    "start": "2145700",
    "end": "2152180"
  },
  {
    "text": "application at a minimum so you can pass baggage and other trace information okay",
    "start": "2152180",
    "end": "2157510"
  },
  {
    "start": "2157000",
    "end": "2233000"
  },
  {
    "text": "another question about - the message bus we also have some communication with a",
    "start": "2157510",
    "end": "2163130"
  },
  {
    "text": "message bus then the scenes must be transferred from the message between the",
    "start": "2163130",
    "end": "2168470"
  },
  {
    "text": "message bus I'm not sure you mentioned the you decorate aways the cop car there",
    "start": "2168470",
    "end": "2175280"
  },
  {
    "text": "was maybe the transparent about this span party we using another message pass",
    "start": "2175280",
    "end": "2181310"
  },
  {
    "text": "than what you see how many extra scenes showed us to fall chasing Guetta",
    "start": "2181310",
    "end": "2187490"
  },
  {
    "text": "completely change yes so from a message bus perspective Kafka works but other",
    "start": "2187490",
    "end": "2193070"
  },
  {
    "text": "ones you'd have to add the the primary form of doing this is through open standards when the screen comes back",
    "start": "2193070",
    "end": "2198110"
  },
  {
    "text": "open tracing is one of them opens limitary and open census also have this notion of follows from or sometimes it's",
    "start": "2198110",
    "end": "2204500"
  },
  {
    "text": "called links you would have to make sure to pass that as part of your trace data and that way it could literally drop it",
    "start": "2204500",
    "end": "2210230"
  },
  {
    "text": "off when the message is received into the message bus and then you have to propagate that through your message bus",
    "start": "2210230",
    "end": "2215240"
  },
  {
    "text": "so when it's picked back up at tags that follows from or linked information when it sends it back out and that way you",
    "start": "2215240",
    "end": "2221090"
  },
  {
    "text": "can make the entire trace okay so - thank you I'm available for questions",
    "start": "2221090",
    "end": "2226130"
  },
  {
    "text": "after we are at time but if you want to meet me over here I definitely be willing to answer them for you thank you",
    "start": "2226130",
    "end": "2233090"
  },
  {
    "text": "[Applause]",
    "start": "2233090",
    "end": "2235749"
  }
]