[
  {
    "text": "cool um so hello everyone and welcome to cube day Japan and",
    "start": "800",
    "end": "7080"
  },
  {
    "text": "we'll start the session now secure and debuggable uh debugging",
    "start": "7080",
    "end": "12599"
  },
  {
    "text": "screen slim scratch distillers kubernetes containers a lot of terminologies over here we'll try to",
    "start": "12599",
    "end": "18600"
  },
  {
    "text": "um you know simplify all these and see how you can debug it",
    "start": "18600",
    "end": "24859"
  },
  {
    "text": "so expected background uh as uh you know Kyle mentioned um some of the container fundamentals is",
    "start": "25140",
    "end": "31920"
  },
  {
    "text": "needed you should know what kubernetes is you know uh the basic knowledge namespaces fundamentals architecture",
    "start": "31920",
    "end": "37559"
  },
  {
    "text": "nodes and all these things and then we'll cover the rest of the stuff",
    "start": "37559",
    "end": "42840"
  },
  {
    "text": "so this is about me uh I'm working as director of technical evangelism at sibo and I'm a CNC of Ambassador uh very",
    "start": "42840",
    "end": "49800"
  },
  {
    "text": "active on Twitter uh and also have a YouTube channel so you can kind of follow me everywhere I might reply you",
    "start": "49800",
    "end": "55980"
  },
  {
    "text": "in between the session as well so I'm the docker slim guy so keep going",
    "start": "55980",
    "end": "65960"
  },
  {
    "text": "okay so the next slide so this is",
    "start": "66659",
    "end": "72479"
  },
  {
    "text": "pretty much one of the best ways to describe the problem using minimal container images",
    "start": "72479",
    "end": "79439"
  },
  {
    "text": "you want to use them but you can't a lot of times because",
    "start": "79439",
    "end": "84780"
  },
  {
    "text": "you need to debug them and up until pretty much now kubernetes",
    "start": "84780",
    "end": "90600"
  },
  {
    "text": "1.25 it was one of those things on the wish list and you couldn't do it well you",
    "start": "90600",
    "end": "98520"
  },
  {
    "text": "could do it the hard way but in terms of mass adoption it wasn't possible because to use smaller containers you still need",
    "start": "98520",
    "end": "106079"
  },
  {
    "text": "that debuggability and this is what we're going to talk about and apparently you know there's a lot of interest in it",
    "start": "106079",
    "end": "111479"
  },
  {
    "text": "so let's keep going so let's get started with the general",
    "start": "111479",
    "end": "116939"
  },
  {
    "text": "debugging techniques for for kubernetes which everybody like we have been doing",
    "start": "116939",
    "end": "122220"
  },
  {
    "text": "it uh just a quick preview of that so whenever there is any failures",
    "start": "122220",
    "end": "128039"
  },
  {
    "text": "um we go through the events uh the logs the describe host and node level",
    "start": "128039",
    "end": "133920"
  },
  {
    "text": "debugging so we SSH into that use privileged containers uh use some",
    "start": "133920",
    "end": "139260"
  },
  {
    "text": "embedded debugging tooling um also the cube CTL exec which is pretty common if you want to get inside",
    "start": "139260",
    "end": "146340"
  },
  {
    "text": "the container you use Cube serial exec coincide and do a bunch of stuff to see",
    "start": "146340",
    "end": "151800"
  },
  {
    "text": "what went wrong and then some sidecar stuff uh which is there so yeah this is",
    "start": "151800",
    "end": "159180"
  },
  {
    "text": "some of the stuff like if you do Cube CTL describe you can see the you know the events like if a pod is spending",
    "start": "159180",
    "end": "165480"
  },
  {
    "text": "insufficient resources um so all these you'll get and if you have a crash to back off you can do Cube",
    "start": "165480",
    "end": "171840"
  },
  {
    "text": "City logs and sometimes you have to do uh you can also attach that hyphen iPhone previous so that you can get uh",
    "start": "171840",
    "end": "178019"
  },
  {
    "text": "the logs from the previous container to see what failed uh it's useful and then",
    "start": "178019",
    "end": "183120"
  },
  {
    "text": "the exact one the cube CTL exec interactive pod and the uh",
    "start": "183120",
    "end": "188940"
  },
  {
    "text": "bash or sh whatever is there inside that particular container that you can attach",
    "start": "188940",
    "end": "194099"
  },
  {
    "text": "to and run the commands with the debug utilities",
    "start": "194099",
    "end": "199739"
  },
  {
    "text": "so let's uh let's actually see that and the action",
    "start": "199739",
    "end": "205440"
  },
  {
    "text": "so I do have some of the files keeps it here I will try to apply the",
    "start": "205440",
    "end": "212459"
  },
  {
    "text": "pending part one so this is just I have taken from",
    "start": "212459",
    "end": "218720"
  },
  {
    "text": "robusto they have some good examples so you can see the part is already",
    "start": "218720",
    "end": "225120"
  },
  {
    "text": "impending I can describe that and we can see that you know it's not there because uh",
    "start": "225120",
    "end": "232140"
  },
  {
    "text": "didn't match the parts node Affinity so when you describe sometimes it helps it will give you the useful information",
    "start": "232140",
    "end": "238200"
  },
  {
    "text": "that you can fix it and then you know use that similar to that uh another one",
    "start": "238200",
    "end": "244319"
  },
  {
    "text": "example that I have is",
    "start": "244319",
    "end": "248819"
  },
  {
    "text": "crash Loop",
    "start": "249420",
    "end": "252439"
  },
  {
    "text": "so it's contain so it's already crashed look back off uh you can see that there is a pod which crash looped and I can",
    "start": "257459",
    "end": "265740"
  },
  {
    "text": "see the logs for that",
    "start": "265740",
    "end": "269180"
  },
  {
    "text": "so environment variable is undefined so so these are standard and very simple uh",
    "start": "277080",
    "end": "283259"
  },
  {
    "text": "to use the the first level of the basics that you have to go through whenever you are debugging a container so either",
    "start": "283259",
    "end": "289500"
  },
  {
    "text": "describe uh the logs the exec the events and all these things so this gives you a",
    "start": "289500",
    "end": "294720"
  },
  {
    "text": "bit of gist of how uh you know you do debug it now uh over the time what has",
    "start": "294720",
    "end": "301440"
  },
  {
    "text": "happened is uh we have moved to like we have been creating the",
    "start": "301440",
    "end": "306540"
  },
  {
    "text": "containers but now we have moved uh we want to move to Slimmer images to you know uh the images which contains less",
    "start": "306540",
    "end": "313139"
  },
  {
    "text": "so that you know we have less secure vulnerability less uh vulnerabilities in that and the image size is less so with",
    "start": "313139",
    "end": "320940"
  },
  {
    "text": "that there are some Concepts uh scratch distrollers and slim",
    "start": "320940",
    "end": "325979"
  },
  {
    "text": "what are these so scratch image is basically an empty image it has nothing in it it is used to run the binaries",
    "start": "325979",
    "end": "333419"
  },
  {
    "text": "which don't have anything linked to that uh I mean yeah there are some gotchas that will be covering later on uh mostly",
    "start": "333419",
    "end": "340560"
  },
  {
    "text": "you go or rust so not everything that you can run with",
    "start": "340560",
    "end": "347400"
  },
  {
    "text": "that so it is a compiled uh binary which is there that have no dependencies and",
    "start": "347400",
    "end": "353820"
  },
  {
    "text": "if it has the dependencies that probably you have to know all the linked dependencies and you have to you know",
    "start": "353820",
    "end": "360300"
  },
  {
    "text": "manually uh get that because it doesn't even have the like you can see the ca search Etc password nothing is there so",
    "start": "360300",
    "end": "366900"
  },
  {
    "text": "you have to make all the things up um in the multi-stage builds and then",
    "start": "366900",
    "end": "372960"
  },
  {
    "text": "you can run it yeah also that's where it gets complicated that's where it gets complicated uh coming to digitalis so",
    "start": "372960",
    "end": "380280"
  },
  {
    "text": "distronus is not completely empty uh it has some of the base directories which",
    "start": "380280",
    "end": "385800"
  },
  {
    "text": "helps you in creating the containers and running them it has like Etc password CA",
    "start": "385800",
    "end": "391740"
  },
  {
    "text": "search it has the app plus the runtime dependencies both of these have no shell",
    "start": "391740",
    "end": "396900"
  },
  {
    "text": "and no package manager so that's where it becomes tricky right these are good to have but these are only good to have",
    "start": "396900",
    "end": "403860"
  },
  {
    "text": "if you have everything sorted like if you know your container won't fail but if your container fails then probably",
    "start": "403860",
    "end": "409800"
  },
  {
    "text": "since it has no shell package manager it becomes difficult to debug these set of",
    "start": "409800",
    "end": "415080"
  },
  {
    "text": "containers and that's what we'll be discussing and showing you the demos for",
    "start": "415080",
    "end": "420539"
  },
  {
    "text": "so the gorgeous extra dependencies are super complicated uh whenever you have",
    "start": "420539",
    "end": "425639"
  },
  {
    "text": "extra dependencies in scratch image you have to know them uh beforehand if you even have to run it no debugging tooling",
    "start": "425639",
    "end": "432600"
  },
  {
    "text": "no shell and not always a static binary so this is uh the the three apps that we",
    "start": "432600",
    "end": "440880"
  },
  {
    "text": "have like we have you can see uh there is a big image the size of that is one gigs uh pretty big one gig and it's a",
    "start": "440880",
    "end": "448500"
  },
  {
    "text": "simple Hello World app and it's already one gigabyte in size then you have the",
    "start": "448500",
    "end": "453780"
  },
  {
    "text": "destroys app which is uh 166 and then you have the node app Slim",
    "start": "453780",
    "end": "460340"
  },
  {
    "text": "okay so you have a lot of options in terms of how you want to get to how you",
    "start": "462360",
    "end": "469139"
  },
  {
    "text": "can get to a minimal container image for your application some of them require a",
    "start": "469139",
    "end": "475500"
  },
  {
    "text": "lot more work than others distro list is probably one of the most known ways",
    "start": "475500",
    "end": "480740"
  },
  {
    "text": "to get there there are several flavors of distralis starting with the most",
    "start": "480740",
    "end": "486180"
  },
  {
    "text": "basic static that gives you mostly a directory layout and a couple of things on top of that including the The Zone",
    "start": "486180",
    "end": "494160"
  },
  {
    "text": "info that's pretty much the biggest chunk of that image and then we have",
    "start": "494160",
    "end": "500220"
  },
  {
    "text": "other images like the next level is the base image which includes the static version plus a few extra libraries basic",
    "start": "500220",
    "end": "507360"
  },
  {
    "text": "OS libraries um and then you have application specific uh distro-less versions uh",
    "start": "507360",
    "end": "515940"
  },
  {
    "text": "they're much bigger they include the base plus the additional system libraries and the application runtime",
    "start": "515940",
    "end": "523260"
  },
  {
    "text": "now um and I'll talk about the gotchas later on so let's take a look at the",
    "start": "523260",
    "end": "528600"
  },
  {
    "text": "destroyless app and all of them they use the same kubernetes manifest for the application but the docker file for them",
    "start": "528600",
    "end": "535920"
  },
  {
    "text": "is a little different so but this Docker file one of the",
    "start": "535920",
    "end": "541019"
  },
  {
    "text": "interesting things about it is is that what you end up with you might have a multi-stage build and then in the final",
    "start": "541019",
    "end": "548640"
  },
  {
    "text": "stage you copy stuff to your Deployable image now uh in most cases you end up",
    "start": "548640",
    "end": "555839"
  },
  {
    "text": "with those kind of copies where you copy a whole directory with things because otherwise you you're not really sure",
    "start": "555839",
    "end": "562140"
  },
  {
    "text": "what you're doing so so that's that's okay it's better than using a fat image",
    "start": "562140",
    "end": "567660"
  },
  {
    "text": "but you still have a lot of attack surface left in the image when you do that let's keep going",
    "start": "567660",
    "end": "574820"
  },
  {
    "text": "um so this is an example for those compiled",
    "start": "575339",
    "end": "580800"
  },
  {
    "text": "languages because sometimes you know with go the first thing that comes to mind the static binaries a single binary",
    "start": "580800",
    "end": "587820"
  },
  {
    "text": "you can easily create a scratch based application image and that's pretty much",
    "start": "587820",
    "end": "593700"
  },
  {
    "text": "it in reality for real applications real world applications you actually have",
    "start": "593700",
    "end": "599220"
  },
  {
    "text": "extra dependency certificates user information and in some cases it's not",
    "start": "599220",
    "end": "605160"
  },
  {
    "text": "even compiled statically so this let's see okay",
    "start": "605160",
    "end": "612959"
  },
  {
    "text": "yeah let's let's keep going um so in this case",
    "start": "612959",
    "end": "619019"
  },
  {
    "text": "I this is a sample app for Docker slim one of the third party apps and it's not",
    "start": "619019",
    "end": "624480"
  },
  {
    "text": "compiled statically so we end up pooling stuff like lip B thread shared objects",
    "start": "624480",
    "end": "631260"
  },
  {
    "text": "Etc so there's a lot of stuff that gets pulled in and that's when it gets tricky when you're trying to do it the hard way",
    "start": "631260",
    "end": "637740"
  },
  {
    "text": "build those minimal container images by hand so let's keep going so with the",
    "start": "637740",
    "end": "644000"
  },
  {
    "text": "with the slim image the nice thing about it is that you have a regular Docker",
    "start": "644000",
    "end": "649860"
  },
  {
    "text": "file this is probably the most basic node application Docker file it's not",
    "start": "649860",
    "end": "655500"
  },
  {
    "text": "multi-stage it's simple derives from your node base image you copy the the",
    "start": "655500",
    "end": "662399"
  },
  {
    "text": "package manifest you install the dependencies you copy the app and then you just run the app that's all now",
    "start": "662399",
    "end": "669500"
  },
  {
    "text": "that's all you would have for a regular app and then with the slim images it",
    "start": "669500",
    "end": "675839"
  },
  {
    "text": "takes that and then it produces a much smaller image kind of like an out of",
    "start": "675839",
    "end": "680880"
  },
  {
    "text": "scratch it does it for you so let's keep going",
    "start": "680880",
    "end": "686339"
  },
  {
    "text": "so now uh we have discussed what slim image is what distortless is what scratch image is and we have discussed",
    "start": "686339",
    "end": "692820"
  },
  {
    "text": "some of the toolings but I mentioned one particular point that it it's hard to debug the digitalis and slim and scratch",
    "start": "692820",
    "end": "699240"
  },
  {
    "text": "images due to the lack of uh shell and debugging tools within that so",
    "start": "699240",
    "end": "705540"
  },
  {
    "text": "we cannot use the standard stuff which is Cube CT Alexa CP embedded debugging",
    "start": "705540",
    "end": "711180"
  },
  {
    "text": "tools because it's not there so then it becomes difficult and Cube serial CP",
    "start": "711180",
    "end": "716640"
  },
  {
    "text": "just it requires a tar to be there in the container else it will fail and it",
    "start": "716640",
    "end": "722459"
  },
  {
    "text": "copies files from the directory exactly is a shell to be there and debugging utilities like Edge stop curl Etc the",
    "start": "722459",
    "end": "728700"
  },
  {
    "text": "netstat whatever you need these are not there these are the standard ones",
    "start": "728700",
    "end": "734180"
  },
  {
    "text": "um and if you try to do that over any of the images of distress or scratch you'll",
    "start": "734399",
    "end": "740459"
  },
  {
    "text": "end up in getting uh the error that it is not able to process that because the shell is not there so it won't be able",
    "start": "740459",
    "end": "747120"
  },
  {
    "text": "to um run you won't be able to do the standard um easy debugging that you are used to",
    "start": "747120",
    "end": "754980"
  },
  {
    "text": "so that's where uh we have the concept of ephemeral containers",
    "start": "754980",
    "end": "761060"
  },
  {
    "text": "so ephemeral containers are the containers to help debug the pods where there is no way to debug directly using",
    "start": "761820",
    "end": "768480"
  },
  {
    "text": "exec so what happens is it is when you write a pod it will you like",
    "start": "768480",
    "end": "774300"
  },
  {
    "text": "you will be using cubectl debug to create those ephemeral containers and it attaches the in the live pod State",
    "start": "774300",
    "end": "781019"
  },
  {
    "text": "itself you will have a pod in the spec section pod spec section there will be a container that will be added and it will",
    "start": "781019",
    "end": "788100"
  },
  {
    "text": "also auto update the container statuses with ephemeral container status so that's a very good thing and it attaches",
    "start": "788100",
    "end": "795660"
  },
  {
    "text": "to The Container to the same pod share the name spaces so you have that same process you will be able to see the",
    "start": "795660",
    "end": "801540"
  },
  {
    "text": "process of a distro list or you know that particular container itself and you can have the file view as well that will",
    "start": "801540",
    "end": "808079"
  },
  {
    "text": "show you some of the things to be taken care it doesn't have any Readiness liveness probes the resources are not",
    "start": "808079",
    "end": "815339"
  },
  {
    "text": "allowed on that and you can create it using the ephemeral containers API Kyle",
    "start": "815339",
    "end": "820920"
  },
  {
    "text": "will show the demo for that first question for you why not use regular",
    "start": "820920",
    "end": "826019"
  },
  {
    "text": "containers why can't you just add a regular container to the to your pod so again adding a regular container won't",
    "start": "826019",
    "end": "833160"
  },
  {
    "text": "help because you you have to add that and you the mounting becomes the issue the process",
    "start": "833160",
    "end": "839220"
  },
  {
    "text": "ID the sharing of the namespace all these things won't happen um so that is where the ephemeral",
    "start": "839220",
    "end": "844260"
  },
  {
    "text": "containers will help in basically not touching the existing pod not restarting",
    "start": "844260",
    "end": "850500"
  },
  {
    "text": "the existing pod so that stays there your application stays there and if anything goes wrong you still will be",
    "start": "850500",
    "end": "855660"
  },
  {
    "text": "able to debug that so this is the simple example of like Cube CTL debug and let's say there is a",
    "start": "855660",
    "end": "863279"
  },
  {
    "text": "nginx pod running before that so you are debugging that and you are using the image uh busy box and you're getting the",
    "start": "863279",
    "end": "870600"
  },
  {
    "text": "shell so what it does it it is adding a new container with BusyBox image to that nginx pod so if you see the like if you",
    "start": "870600",
    "end": "878399"
  },
  {
    "text": "get the cube CTL get for siphon or yaml you'll be able to see two sections which are important over here which is",
    "start": "878399",
    "end": "884279"
  },
  {
    "text": "ephemeral containers so whenever you do the cube CTL debug there will be this",
    "start": "884279",
    "end": "889680"
  },
  {
    "text": "section added automatically to that particular pod spec section and also the",
    "start": "889680",
    "end": "895560"
  },
  {
    "text": "status the ephemeral container status will keep on getting updated",
    "start": "895560",
    "end": "900740"
  },
  {
    "text": "so um this is the spot level debugging same pod pod copy for advanced debugging",
    "start": "902160",
    "end": "907740"
  },
  {
    "text": "there is one command which we'll be discussing later and some of it uses ephemeral containers and other stuff",
    "start": "907740",
    "end": "914339"
  },
  {
    "text": "doesn't because you don't always need to have thermal containers for example when you uh get a pod copy there you can use",
    "start": "914339",
    "end": "921839"
  },
  {
    "text": "a regular container because you know it's the time when you get to decide",
    "start": "921839",
    "end": "929540"
  },
  {
    "text": "again this is a simple Cube CTL debug demo uh what it is doing it is creating",
    "start": "930360",
    "end": "935459"
  },
  {
    "text": "a container debug sidecar box with the image uh busy box and attaching to the Target container app",
    "start": "935459",
    "end": "943139"
  },
  {
    "text": "it is also like you can see the process over here so this is the process uh you can see the process one which is the",
    "start": "943139",
    "end": "949620"
  },
  {
    "text": "node application but the current uh process for our ephemeral container is 13.",
    "start": "949620",
    "end": "956399"
  },
  {
    "text": "and one thing with you can see the difference between the the file so it it",
    "start": "956399",
    "end": "963360"
  },
  {
    "text": "doesn't look same so your file system uh won't be exactly the same like when you",
    "start": "963360",
    "end": "968519"
  },
  {
    "text": "do a cube CTL exec you are into the port you will be able to see the the exact file system over there but when you are",
    "start": "968519",
    "end": "975360"
  },
  {
    "text": "in the fmri containers you won't be able to see the exact file system uh directly",
    "start": "975360",
    "end": "982199"
  },
  {
    "text": "yeah and that's why you need to go to the proc file system and you need to navigate to the PID you were trying to",
    "start": "982199",
    "end": "990360"
  },
  {
    "text": "debug and the route uh section and so this is a little odd if you haven't done",
    "start": "990360",
    "end": "997980"
  },
  {
    "text": "this before this is odd and not great from the debugging experience and we'll have a demo to address that",
    "start": "997980",
    "end": "1006220"
  },
  {
    "text": "so you can also use ephemeral containers without the cube CTL debug commands so",
    "start": "1006800",
    "end": "1012079"
  },
  {
    "text": "you can use the apis internal apis and you can that is very interesting because",
    "start": "1012079",
    "end": "1017779"
  },
  {
    "text": "there's a demo that we have to set the security context like if you have to set the security context or if we need any",
    "start": "1017779",
    "end": "1023420"
  },
  {
    "text": "additional mounting which you cannot do by default using the cube serial debug so you have to use Cube CT the apis for",
    "start": "1023420",
    "end": "1031100"
  },
  {
    "text": "that the call examples some of the gotchas uh you can't remove the FM containers not all Container",
    "start": "1031100",
    "end": "1038120"
  },
  {
    "text": "properties are available which we discussed process name space sharing and the security context and mounting",
    "start": "1038120",
    "end": "1045020"
  },
  {
    "text": "volumes are not there out of the box when you use Cube CDL debug",
    "start": "1045020",
    "end": "1050540"
  },
  {
    "text": "so ephemeral containers like Kyle mentioned it was a fantasy to use before The Slim scratch and distortless and",
    "start": "1050540",
    "end": "1057440"
  },
  {
    "text": "there have been a lot of work effort and getting this uh this set of you know ephemeral Tech containers support",
    "start": "1057440",
    "end": "1064520"
  },
  {
    "text": "natively into kubernetes and that happened very recently so it went in GA 1.25 and you can see uh like all the",
    "start": "1064520",
    "end": "1072740"
  },
  {
    "text": "local clusters Rancher desktop or Docker desktop should work and even the cloud providers uh you know Co GK eks they all",
    "start": "1072740",
    "end": "1080720"
  },
  {
    "text": "have 1.23 onwards so you should be able to use the same demos that we are doing",
    "start": "1080720",
    "end": "1086419"
  },
  {
    "text": "with Cube serial debug with those clusters as well",
    "start": "1086419",
    "end": "1091299"
  },
  {
    "text": "okay so let's say you want to use Cube control debug to debug your minimal",
    "start": "1092179",
    "end": "1099440"
  },
  {
    "text": "container image application so what do you do you have a few options you can create",
    "start": "1099440",
    "end": "1104539"
  },
  {
    "text": "your own debugging image which is kind of this option you can use",
    "start": "1104539",
    "end": "1111620"
  },
  {
    "text": "a couple of existing debugging images to the most popular one",
    "start": "1111620",
    "end": "1117640"
  },
  {
    "text": "is not shoot it's a it's a well-known system and network level debugging image",
    "start": "1117640",
    "end": "1123500"
  },
  {
    "text": "lots of great tools there then there's also a set of debugging images by light run they",
    "start": "1123500",
    "end": "1130460"
  },
  {
    "text": "called cool kit they have they support several runtimes and we'll use the node",
    "start": "1130460",
    "end": "1136160"
  },
  {
    "text": "run time and in the do-it-yourself bucket one of the nice things that you",
    "start": "1136160",
    "end": "1141559"
  },
  {
    "text": "can use is nixer you can build a debugging image on the Fly by specifying the the packages you want and we'll see",
    "start": "1141559",
    "end": "1149000"
  },
  {
    "text": "it as well so we'll have three demos",
    "start": "1149000",
    "end": "1154220"
  },
  {
    "text": "um we'll uh look at how to debug a node application you can have an application",
    "start": "1154220",
    "end": "1160100"
  },
  {
    "text": "Level demo and then a system debugging demo with s trace and then um",
    "start": "1160100",
    "end": "1166760"
  },
  {
    "text": "a demo that shows how to make the debugging experience look similar to",
    "start": "1166760",
    "end": "1173299"
  },
  {
    "text": "what you're used to let's switch",
    "start": "1173299",
    "end": "1179000"
  },
  {
    "text": "all right all right",
    "start": "1179000",
    "end": "1185020"
  },
  {
    "text": "YouTube all right",
    "start": "1189260",
    "end": "1196340"
  },
  {
    "text": "so first of all in the demo application the the make file has a nice menu of",
    "start": "1196340",
    "end": "1203179"
  },
  {
    "text": "different options that you want to use so we'll start with uh creating the uh",
    "start": "1203179",
    "end": "1210020"
  },
  {
    "text": "the application",
    "start": "1210020",
    "end": "1212919"
  },
  {
    "text": "and it's this application it has a deployment with one pod and the",
    "start": "1216740",
    "end": "1224960"
  },
  {
    "text": "the demo app image and a service",
    "start": "1224960",
    "end": "1230020"
  },
  {
    "text": "okay so the application is running",
    "start": "1237080",
    "end": "1241720"
  },
  {
    "text": "and we're using the slim image",
    "start": "1243980",
    "end": "1247419"
  },
  {
    "text": "okay so first we'll try to debug the node application and let's let's try to",
    "start": "1251480",
    "end": "1257419"
  },
  {
    "text": "see and purl",
    "start": "1257419",
    "end": "1264640"
  },
  {
    "text": "alcohol",
    "start": "1265520",
    "end": "1268120"
  },
  {
    "text": "that's all it does it's a Hello World app",
    "start": "1270980",
    "end": "1275200"
  },
  {
    "text": "and this is the app itself it has a couple of endpoints",
    "start": "1278720",
    "end": "1283419"
  },
  {
    "text": "and we'll try to debug one of the endpoints",
    "start": "1284299",
    "end": "1288639"
  },
  {
    "text": "so what can we do",
    "start": "1289760",
    "end": "1292780"
  },
  {
    "text": "okay so I'm going to use um",
    "start": "1301400",
    "end": "1306799"
  },
  {
    "text": "I debug a node a cool kid image",
    "start": "1306799",
    "end": "1312020"
  },
  {
    "text": "to debug my application so now I'm connected to the debugging Sidecar",
    "start": "1312020",
    "end": "1321399"
  },
  {
    "text": "and I see the application and again",
    "start": "1324380",
    "end": "1329380"
  },
  {
    "text": "and This Is Us",
    "start": "1332059",
    "end": "1335080"
  },
  {
    "text": "and this is our file system",
    "start": "1338000",
    "end": "1341860"
  },
  {
    "text": "and this is the file system of the target application",
    "start": "1346880",
    "end": "1351280"
  },
  {
    "text": "and this is the app so I'll want to use a debugger that I have in my cool",
    "start": "1365419",
    "end": "1372260"
  },
  {
    "text": "kit image and but now there's a way to Force the application to run in debug",
    "start": "1372260",
    "end": "1378559"
  },
  {
    "text": "mode",
    "start": "1378559",
    "end": "1380799"
  },
  {
    "text": "and you do that by sending a user one signal to it so now if I switch to the",
    "start": "1385700",
    "end": "1391640"
  },
  {
    "text": "other",
    "start": "1391640",
    "end": "1393760"
  },
  {
    "text": "logs okay now I see that",
    "start": "1398500",
    "end": "1403600"
  },
  {
    "text": "the the node runtime switch to the debug mode and it's listening",
    "start": "1403600",
    "end": "1411158"
  },
  {
    "text": "all right",
    "start": "1415520",
    "end": "1418360"
  },
  {
    "text": "now I'm connected to the Target application",
    "start": "1421640",
    "end": "1426039"
  },
  {
    "text": "I'm going to pause it I'm going to set a breakpoint it's going to take a while",
    "start": "1429679",
    "end": "1436360"
  },
  {
    "text": "there's a delay",
    "start": "1437179",
    "end": "1440140"
  },
  {
    "text": "okay",
    "start": "1442700",
    "end": "1445240"
  },
  {
    "text": "I'm gonna set it on line 13 that's that's inside of the main Handler",
    "start": "1451280",
    "end": "1459980"
  },
  {
    "text": "I'm going to continue so now",
    "start": "1467059",
    "end": "1474559"
  },
  {
    "text": "I'll want to curl again",
    "start": "1474559",
    "end": "1477880"
  },
  {
    "text": "now we hit the break point",
    "start": "1481159",
    "end": "1485020"
  },
  {
    "text": "so that's an example of how you can use a debug image to do application Level debugging so I'm gonna get out of that",
    "start": "1489200",
    "end": "1498380"
  },
  {
    "text": "and I'm gonna try uh another I'm gonna use s-trace",
    "start": "1498380",
    "end": "1506059"
  },
  {
    "text": "to do a lower level debugging session so now s Trace is connected to the node",
    "start": "1506059",
    "end": "1513679"
  },
  {
    "text": "application I have",
    "start": "1513679",
    "end": "1516700"
  },
  {
    "text": "now we've got a whole bunch of stuff there including a response right there",
    "start": "1521000",
    "end": "1526580"
  },
  {
    "text": "we gotta response from written from the application",
    "start": "1526580",
    "end": "1535059"
  },
  {
    "text": "all right and then I'll try to do the same thing with um",
    "start": "1536960",
    "end": "1544120"
  },
  {
    "text": "with uh with a couple of other images I'll try next three",
    "start": "1544700",
    "end": "1550658"
  },
  {
    "text": "now here if you look at this",
    "start": "1558320",
    "end": "1563140"
  },
  {
    "text": " funny looking image name you'll see that it has a lot of",
    "start": "1564380",
    "end": "1569659"
  },
  {
    "text": "different names in it and it's the names of the packages I installed for example",
    "start": "1569659",
    "end": "1575960"
  },
  {
    "text": "lsof natcat TCP dump and S Trace",
    "start": "1575960",
    "end": "1581960"
  },
  {
    "text": "it takes a little bit to pull it because it gets created on the Fly",
    "start": "1581960",
    "end": "1587980"
  },
  {
    "text": "okay we have the node application too",
    "start": "1588919",
    "end": "1593799"
  },
  {
    "text": "and now we get the same result",
    "start": "1598400",
    "end": "1602720"
  },
  {
    "text": "okay so and the next one",
    "start": "1609140",
    "end": "1614480"
  },
  {
    "text": "is gonna show a bit of shell level trickery to make the developer developer",
    "start": "1614480",
    "end": "1621799"
  },
  {
    "text": "experience a little uh more straightforward so I'm gonna use a busy box",
    "start": "1621799",
    "end": "1628659"
  },
  {
    "text": "debugging image",
    "start": "1628659",
    "end": "1631960"
  },
  {
    "text": "okay okay all right again we have the same file system problem so what you want you",
    "start": "1640220",
    "end": "1646820"
  },
  {
    "text": "want to see the file system over the target application image but you want",
    "start": "1646820",
    "end": "1652460"
  },
  {
    "text": "the tools from your debugging image so for that you need to",
    "start": "1652460",
    "end": "1657740"
  },
  {
    "text": "bring those debugging tools into your target uh",
    "start": "1657740",
    "end": "1663100"
  },
  {
    "text": "namespace well figuratively speaking I'm gonna copy and paste because I'm",
    "start": "1663100",
    "end": "1671240"
  },
  {
    "text": "really bad with typing",
    "start": "1671240",
    "end": "1674320"
  },
  {
    "text": "so first I'm gonna link the debugging tools from my debugging container",
    "start": "1679880",
    "end": "1687100"
  },
  {
    "text": "then I'll LED them to the path",
    "start": "1693380",
    "end": "1697059"
  },
  {
    "text": "and then I'll change the root file system so now if we do a",
    "start": "1703400",
    "end": "1708500"
  },
  {
    "text": "less what we see is the file system of the target image container",
    "start": "1708500",
    "end": "1715100"
  },
  {
    "text": "with the debugging tools so now if I can run any of those tools there and I can",
    "start": "1715100",
    "end": "1721640"
  },
  {
    "text": "go to it was our source app",
    "start": "1721640",
    "end": "1728440"
  },
  {
    "text": "so it looks the same and I can do everything I would do as if",
    "start": "1730279",
    "end": "1737419"
  },
  {
    "text": "I was exacting into the fat version of the application image so you get the",
    "start": "1737419",
    "end": "1742760"
  },
  {
    "text": "same kind of experience there",
    "start": "1742760",
    "end": "1746200"
  },
  {
    "text": "yeah so these uh are also available on GitHub as Kyle mentioned so you can try",
    "start": "1751039",
    "end": "1757460"
  },
  {
    "text": "on your own as well we got just one minute left so the key takeaways is",
    "start": "1757460",
    "end": "1762620"
  },
  {
    "text": "minimal container images on case are ready for mainstream because of ephemeral containers now you have the",
    "start": "1762620",
    "end": "1768980"
  },
  {
    "text": "tooling which exists so you have seen some of the cool demos using the tools",
    "start": "1768980",
    "end": "1774200"
  },
  {
    "text": "like nx3 net shoot cools cool kids that you can use to debug your slame distro",
    "start": "1774200",
    "end": "1780440"
  },
  {
    "text": "less or scratch containers as well so you can actually now use them for in",
    "start": "1780440",
    "end": "1785480"
  },
  {
    "text": "production so FML containers make it possible to debug scratch slim digitalis images",
    "start": "1785480",
    "end": "1791419"
  },
  {
    "text": "uh thank you and this is dim this is the demo repository uh Cube day Japan demo",
    "start": "1791419",
    "end": "1797480"
  },
  {
    "text": "and you can try FML containers on CEO and create a minimal container images using Docker slim and then try to do",
    "start": "1797480",
    "end": "1805520"
  },
  {
    "text": "that and shout out to akiro for the nerd CTL and if you have any yeah it's an awesome",
    "start": "1805520",
    "end": "1811880"
  },
  {
    "text": "tool and if you have any queries we uh we don't have time but we'll be hanging around here so feel free to ask any any",
    "start": "1811880",
    "end": "1818840"
  },
  {
    "text": "questions as well thank you so much for joining in",
    "start": "1818840",
    "end": "1824080"
  }
]