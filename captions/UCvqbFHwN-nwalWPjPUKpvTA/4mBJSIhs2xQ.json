[
  {
    "text": "all right so I think we're gonna go ahead and get started this is an oppa deep dive the open policy agent so I",
    "start": "0",
    "end": "8040"
  },
  {
    "text": "wanted to first get a sense of what everybody knows about oppa so who here knows what oppa is okay good just about",
    "start": "8040",
    "end": "16770"
  },
  {
    "text": "everybody perfect how many people stop by our booth and okay and how many",
    "start": "16770",
    "end": "22769"
  },
  {
    "text": "people went Torrens intro to oppa okay so probably most people about half have",
    "start": "22769",
    "end": "29310"
  },
  {
    "text": "seen the demo so today what we're gonna focus on is sort of the language introduction so going deeper into the",
    "start": "29310",
    "end": "36030"
  },
  {
    "text": "language we touched on that at the demo at the booth Turin touched on it at the at his presentation yesterday so we're",
    "start": "36030",
    "end": "43290"
  },
  {
    "text": "just gonna spend the whole time today talking about writing policy and how you do that with oppa why because that's the",
    "start": "43290",
    "end": "49620"
  },
  {
    "text": "thing that you'll do most often right and so well that's we're gonna go through today my name is Tim Hendricks",
    "start": "49620",
    "end": "54870"
  },
  {
    "text": "I'm one of the maintainer zuv oppa Turin has been very busy this week so we decided to have me go ahead and give",
    "start": "54870",
    "end": "60989"
  },
  {
    "text": "this talk I've built a number of these policy systems over the last 15 years that's what I do and so and more importantly I guess I've",
    "start": "60989",
    "end": "68640"
  },
  {
    "text": "been using oppa for maybe writing policy 10 hours a week for the last I don't know how many months so I do this fairly",
    "start": "68640",
    "end": "75060"
  },
  {
    "text": "frequently alright so and I'd like this to be pretty any are interactive so we've got a microphone of a microphone",
    "start": "75060",
    "end": "80460"
  },
  {
    "text": "here which makes it a little bit more awkward but but go ahead and ask questions throughout and and and and",
    "start": "80460",
    "end": "86130"
  },
  {
    "text": "please make this fun for everybody okay all right so I just want to make sure",
    "start": "86130",
    "end": "92520"
  },
  {
    "text": "that everybody is on the same page here and give you this brief overview of oppa right the goal of oppa is or at least",
    "start": "92520",
    "end": "98549"
  },
  {
    "text": "what oppa is is it is a domain agnostic a general purpose policy system right what that means is it you can use open to solve policy and authorization",
    "start": "98549",
    "end": "105540"
  },
  {
    "text": "problems that any layer of your software stack right and here are some examples of the kinds of integrations that we've",
    "start": "105540",
    "end": "110670"
  },
  {
    "text": "done with oppa we've done integrations with kubernetes to do admission control with linux to allow you to control who",
    "start": "110670",
    "end": "117329"
  },
  {
    "text": "can SSH into a server who can run sudo commands with docker to allow you to control what kinds of containers people",
    "start": "117329",
    "end": "123299"
  },
  {
    "text": "can run with terraform to control what changes someone could make to for",
    "start": "123299",
    "end": "128640"
  },
  {
    "text": "example a public cloud you can use OPA to express policy and authorization over micro sir Chris API is right everytime it",
    "start": "128640",
    "end": "135330"
  },
  {
    "text": "microservice receives an API call is that authorized or not and that's what Netflix has used before all right so",
    "start": "135330",
    "end": "142349"
  },
  {
    "text": "that's the goal of over the goal of Opel is sort of this realization that we're doing policy and authorization and all",
    "start": "142349",
    "end": "147450"
  },
  {
    "text": "these different layers of the stack today but the problem is that we're using different mechanisms to enforce those authorization policies what OPA",
    "start": "147450",
    "end": "154470"
  },
  {
    "text": "aims to do is provide a single way a single language for expressing policy to all these different enforcement points a",
    "start": "154470",
    "end": "160590"
  },
  {
    "text": "single toolset a single user experience right so that's the overall goal of OPA",
    "start": "160590",
    "end": "166400"
  },
  {
    "text": "when you go to use OPA two policy enable a project or service and that's its goal right its goal is to make it very easy",
    "start": "166440",
    "end": "172799"
  },
  {
    "text": "to add rich fine-grained context or policy to an existing project or service so when you go to do that there are",
    "start": "172799",
    "end": "178170"
  },
  {
    "text": "three steps three conceptual things that you're gonna want to think about the first of which is how do you integrate OPA with that external project how do",
    "start": "178170",
    "end": "185160"
  },
  {
    "text": "you integrate OPA with kubernetes or with Linux or with terraform the second thing that you're gonna do is author policy and that's what we're gonna spend",
    "start": "185160",
    "end": "191010"
  },
  {
    "text": "most of the time here today talking about and then after that you're gonna think about managing OPA which is a",
    "start": "191010",
    "end": "196560"
  },
  {
    "text": "whole bunch of stuff around how do you deploy it how do you how do you retrieve policies audit decisions behind our",
    "start": "196560",
    "end": "202079"
  },
  {
    "text": "health we're not going to touch on that at all today what we are going to do is touch a little bit on how you integrate",
    "start": "202079",
    "end": "207299"
  },
  {
    "text": "because integration and understanding how OPA interacts with each of these systems with each of these enforcement points is actually pretty important for",
    "start": "207299",
    "end": "214079"
  },
  {
    "text": "understanding how you write policy all right and then we're gonna go and spend most of the time talking about the policy language and and what it provides",
    "start": "214079",
    "end": "220799"
  },
  {
    "text": "for you all right so after we talk a bit about how policies are invoked by that external",
    "start": "220799",
    "end": "226889"
  },
  {
    "text": "system once you've done an integration then we'll talk we've sort of broken this up into different kinds of policies and so I don't know if we'll get through",
    "start": "226889",
    "end": "233970"
  },
  {
    "text": "all of this today but these are slides we'll make them available this is sort of our training deck on the open",
    "start": "233970",
    "end": "239609"
  },
  {
    "text": "language ok so how do our policies invoked how does the system work once",
    "start": "239609",
    "end": "245760"
  },
  {
    "text": "it's been integrated with OPA ok so the service up above is whatever we were talking about kubernetes or Linux or whatever and then every time that that",
    "start": "245760",
    "end": "252870"
  },
  {
    "text": "service needs an authorization or a policy decision it's going to ask OPA",
    "start": "252870",
    "end": "258269"
  },
  {
    "text": "for that decision and the way it does that is that OPA is has an HTTP server built into it and the reason for that is",
    "start": "258269",
    "end": "265560"
  },
  {
    "text": "it conceptually architectural II what want to have happen is that oppa is running on the same server as the",
    "start": "265560",
    "end": "272160"
  },
  {
    "text": "service that you're integrating with and the reason that's important is because we want to guarantee that for authorization and policy decisions that",
    "start": "272160",
    "end": "278370"
  },
  {
    "text": "that service can always get policy decisions in a highly performant highly",
    "start": "278370",
    "end": "283590"
  },
  {
    "text": "available way right authorization is one of those key functionalities where if suddenly you cannot get authorization decisions that service up there becomes",
    "start": "283590",
    "end": "290790"
  },
  {
    "text": "a brick right it does not know what to do so we need to ensure that the service has highly available or highly",
    "start": "290790",
    "end": "296070"
  },
  {
    "text": "performant authorization and policy decisions and for that we ensure oppa runs on the same server as the service",
    "start": "296070",
    "end": "301590"
  },
  {
    "text": "right no worry about network partitions or network latency all right now at the same time that oppa exposes an HTTP",
    "start": "301590",
    "end": "309000"
  },
  {
    "text": "server so that when the service / localhost hits the HTTP server in in oppa the way it does that is that when",
    "start": "309000",
    "end": "317040"
  },
  {
    "text": "that service asks for a decision it does a single HTTP POST all right and that single HTTP POST requires that you",
    "start": "317040",
    "end": "323580"
  },
  {
    "text": "provide a policy name which is part of the URL and then the service provides a bunch of input and that input represents",
    "start": "323580",
    "end": "330240"
  },
  {
    "text": "whatever the service knows that that it needs a decision about and we're going to go through an example in just a",
    "start": "330240",
    "end": "335700"
  },
  {
    "text": "moment but the important thing to realize here is that when that service provides input to oppa the input is always JSON and what I mean here is that",
    "start": "335700",
    "end": "342420"
  },
  {
    "text": "it is arbitrary JSON it is an arbitrary JSON object oppa does not know or care what that object that it's sent",
    "start": "342420",
    "end": "348270"
  },
  {
    "text": "represents when oppa once an oppa makes a decision and it makes that decision using logic which is the Rago is policy",
    "start": "348270",
    "end": "354810"
  },
  {
    "text": "and an external data then it returns a 200 and n sends the result back to the",
    "start": "354810",
    "end": "359850"
  },
  {
    "text": "service now the important thing to keep in mind here is that the input is JSON that we sent to oppa and the output is",
    "start": "359850",
    "end": "365100"
  },
  {
    "text": "JSON that oppa sends back and that's important not because of serialization but because conceptually oppa only",
    "start": "365100",
    "end": "371790"
  },
  {
    "text": "requires that the input in the output be JSON and that's why it works for any domain on the planet that's why it works",
    "start": "371790",
    "end": "377190"
  },
  {
    "text": "for all of those systems that we saw earlier one other important point here is that policy decisions are arbitrary",
    "start": "377190",
    "end": "383670"
  },
  {
    "text": "JSON which means that they're not simply true/false answers right they're not simply authorization answers they can be",
    "start": "383670",
    "end": "389100"
  },
  {
    "text": "answers that return let's say a host name which is a string or a rate limit which is a number or an array which is",
    "start": "389100",
    "end": "394470"
  },
  {
    "text": "maybe the clusters that you'd like to deploy a workload to or a dictionary maybe that's a JSON patch that you'd",
    "start": "394470",
    "end": "400050"
  },
  {
    "text": "like to apply to a Cooper he's pod before it's released into the wild right so oppa is a general purpose policy system which means it works for",
    "start": "400050",
    "end": "406110"
  },
  {
    "text": "any domain and also it it returns policy decisions that are more than simply boolean true false answers",
    "start": "406110",
    "end": "412320"
  },
  {
    "text": "all right here's an example to drive this to make sure this is super clear all right this is an example drawn from",
    "start": "412320",
    "end": "417480"
  },
  {
    "text": "the HTTP API authorization space right so imagine we've got a micro service and every time that micro service receives",
    "start": "417480",
    "end": "422790"
  },
  {
    "text": "an API call it checks with OPA to see whether it's authorized or not in order for that to happen the the request that",
    "start": "422790",
    "end": "428370"
  },
  {
    "text": "the service sends to OPA is a post at as you can see there HTTP ozzie allow that",
    "start": "428370",
    "end": "433380"
  },
  {
    "text": "HTTP ozzie is is the policy name effectively and then the input that it provides is an encoding and JSON of the",
    "start": "433380",
    "end": "440370"
  },
  {
    "text": "API that that micro service wants an authorization decision about right so in this case there's a method there's a",
    "start": "440370",
    "end": "446340"
  },
  {
    "text": "path and there's a user right which is sort of an obvious encoding of an API",
    "start": "446340",
    "end": "451400"
  },
  {
    "text": "then there's a policy inside of OPA that makes a decision as to whether or not this API call is authorized in this case",
    "start": "451400",
    "end": "458450"
  },
  {
    "text": "what we see is that there's a package called HTTP LZ and that corresponds exactly to the first part of that policy",
    "start": "458450",
    "end": "465600"
  },
  {
    "text": "name in the URL there in orange and then what we're gonna do is here we're gonna say that this that we're gonna this",
    "start": "465600",
    "end": "471540"
  },
  {
    "text": "policy actually says that every API is authorized as long as the input as long as the user is Bob all right so there's",
    "start": "471540",
    "end": "477810"
  },
  {
    "text": "some policy like that and this is a super simple one we're gonna go into more detail about how you write these and then what respond what open returns",
    "start": "477810",
    "end": "483870"
  },
  {
    "text": "is just result is true right this this request is allowed yes",
    "start": "483870",
    "end": "489500"
  },
  {
    "text": "yeah good question so the question was can open the outside world and get additional information that it may need",
    "start": "496870",
    "end": "502449"
  },
  {
    "text": "in order to make a decision what you see over there on the right hand side is there's that data segment alright so oppa does have an API that",
    "start": "502449",
    "end": "509020"
  },
  {
    "text": "allows you to inject arbitrary data into oppa the idea there being that you sort of precache all of the requests that you",
    "start": "509020",
    "end": "515680"
  },
  {
    "text": "might make to an external service inside of oppa right so that's one way that oppa gets additional information beyond",
    "start": "515680",
    "end": "521320"
  },
  {
    "text": "what's put into the input another way that is common especially in this micro service API case is that people will",
    "start": "521320",
    "end": "528040"
  },
  {
    "text": "when they handle authentication they will put external information like that would come out of LDAP or ad into a jot",
    "start": "528040",
    "end": "534700"
  },
  {
    "text": "token and then hand that jok token to oppa as part of the input and so that's another common way that people will get",
    "start": "534700",
    "end": "541029"
  },
  {
    "text": "external information that you need to make policy decisions into oppa there's a third mechanism which is very new and we're not recommending to anybody use it",
    "start": "541029",
    "end": "547600"
  },
  {
    "text": "yet but there is this functionality and oppa that we're trying out which during policy evaluation it you can go out and",
    "start": "547600",
    "end": "554350"
  },
  {
    "text": "hit an external database for HTTP server yeah good question okay so any other any",
    "start": "554350",
    "end": "562150"
  },
  {
    "text": "questions about invoking policy all right so so sorry one thing I'll drive home here is it this input in this",
    "start": "562150",
    "end": "567970"
  },
  {
    "text": "example has a method path and user that is the right thing to do let's say for HTTP API authorization but oppa does not",
    "start": "567970",
    "end": "574089"
  },
  {
    "text": "know or care what any of those fields mean the method the path of the user does not care at all if this were SSH",
    "start": "574089",
    "end": "580390"
  },
  {
    "text": "maybe the input would be a user and some other metadata about the server right what's reach region is it in is it for",
    "start": "580390",
    "end": "585850"
  },
  {
    "text": "prod etcetera if this were a kubernetes example then the input that you give to opal would be like a user maybe the API",
    "start": "585850",
    "end": "593589"
  },
  {
    "text": "that that user is calling like create pod and then another field which is like the the yam well description of that pod",
    "start": "593589",
    "end": "600459"
  },
  {
    "text": "that we've all seen and know and love from kubernetes okay so open does not know or care what that input is and",
    "start": "600459",
    "end": "605620"
  },
  {
    "text": "that's why it works for any domain okay we had a question here",
    "start": "605620",
    "end": "610709"
  },
  {
    "text": "yes no it does not it does not store mutable state OPA is entirely stateless",
    "start": "616410",
    "end": "621700"
  },
  {
    "text": "well it's not entirely stateless the decisions it makes are entirely based on the state that it has you could like",
    "start": "621700",
    "end": "626980"
  },
  {
    "text": "from outside go and like after the service gets a decision it could push new state into OPA through that JSON",
    "start": "626980",
    "end": "634410"
  },
  {
    "text": "we've not reckoned we've not recommended that another question yeah a question is",
    "start": "634410",
    "end": "642700"
  },
  {
    "text": "can we secure communication between servers and OPA yes mutual TOS anything else okay good all",
    "start": "642700",
    "end": "651070"
  },
  {
    "text": "right so first kind of policies we're gonna look at we were calling simple here lack of a better term and and the",
    "start": "651070",
    "end": "658540"
  },
  {
    "text": "idea here is that any when you're writing policy the first thing you think about is what is the input that's coming into this policy in order for me to make",
    "start": "658540",
    "end": "664690"
  },
  {
    "text": "a decision right and so in this example we've shown micro-service api's and this",
    "start": "664690",
    "end": "670600"
  },
  {
    "text": "was exactly the same example we just talked through now the first thing you need to do in order to sort of make a decision about this particular input is",
    "start": "670600",
    "end": "676600"
  },
  {
    "text": "what well you have to need you have to be able to look up the values it showed up in the input right so you may need to",
    "start": "676600",
    "end": "681790"
  },
  {
    "text": "look up well the the what is the method what is the user what is the path and if you see there on the right-hand side that's how you do it you do in the",
    "start": "681790",
    "end": "687610"
  },
  {
    "text": "obvious way input here is a key word in OPA and it what it does is it's the root of that JSON document that was handed",
    "start": "687610",
    "end": "693520"
  },
  {
    "text": "into OPA as input and now once you can look up different values you need to be able to compare them so input method",
    "start": "693520",
    "end": "700300"
  },
  {
    "text": "equals get is doing the ava's sing and put dot path of zero that's referencing the first array element inside of the",
    "start": "700300",
    "end": "706240"
  },
  {
    "text": "path field that we're given as input and then input that user does not equal input that method is doing what you",
    "start": "706240",
    "end": "711580"
  },
  {
    "text": "would expect we've got 50 operators they go beyond simple equality checks inside",
    "start": "711580",
    "end": "716770"
  },
  {
    "text": "of OPA and what I'm doing when I'm writing policy day-in and day-out is I usually have that open in a tab in my browser all right OPA also lets you",
    "start": "716770",
    "end": "726760"
  },
  {
    "text": "assign variables as you might expect you have common logic and and and so using",
    "start": "726760",
    "end": "731890"
  },
  {
    "text": "those kind of intermediate temporary variables is valuable here path : equals input path is doing the obvious thing",
    "start": "731890",
    "end": "738040"
  },
  {
    "text": "it's it's creating a new variable called path and it's assigning at the value of input path once you have those",
    "start": "738040",
    "end": "743350"
  },
  {
    "text": "intermediate variables it is just a variable that holds a JSON object and you can use that just like any other JSON object you can",
    "start": "743350",
    "end": "749770"
  },
  {
    "text": "dereference it with array indexes dot into it like a dictionary and so on and so forth when you start looking at the",
    "start": "749770",
    "end": "757780"
  },
  {
    "text": "documentation one of the things that we'll say we'll start using terms like a head and a body so of a rule right so a",
    "start": "757780",
    "end": "764710"
  },
  {
    "text": "rule here is just an assertion a statement that makes a policy decision so in this rule we're just saying that",
    "start": "764710",
    "end": "769720"
  },
  {
    "text": "allow is true exactly when the input method is again the input user is Bob all right now the rule sorry every rule",
    "start": "769720",
    "end": "776740"
  },
  {
    "text": "has a head in the body and you'll see that in the docs and so here the the first part of it is the rule head allows",
    "start": "776740",
    "end": "781810"
  },
  {
    "text": "true the name of the rule here is allow and the value is true one thing that we",
    "start": "781810",
    "end": "788200"
  },
  {
    "text": "do is that there is a default or implicit assumption that if you do not tell us what the type of the variable is",
    "start": "788200",
    "end": "794530"
  },
  {
    "text": "what the value is that you're assigning it in the head then then by default you're saying that that should be true",
    "start": "794530",
    "end": "800200"
  },
  {
    "text": "and that's why we can write these simple a while statements that you saw before the rule body is everything inside those",
    "start": "800200",
    "end": "806380"
  },
  {
    "text": "curly braces and then all of the statements inside the rule body are ANDed together all right I think that's",
    "start": "806380",
    "end": "812290"
  },
  {
    "text": "here yes they're ANDed together if you want an or oh sorry in this statement what we're saying is it allow is true if",
    "start": "812290",
    "end": "818320"
  },
  {
    "text": "and put-down method is get and the and the user requesting making the API",
    "start": "818320",
    "end": "823510"
  },
  {
    "text": "request is Bob if you want to have an or than you write multiple statements right",
    "start": "823510",
    "end": "829600"
  },
  {
    "text": "this is what you would expect you can use the same rule head multiple times just like you would expect first simple",
    "start": "829600",
    "end": "837490"
  },
  {
    "text": "allow and anon rules language and and",
    "start": "837490",
    "end": "842950"
  },
  {
    "text": "then there's a question here which is well suppose you've got 10 or a hundred or a thousand of these allow statements what happens if none of them apply what",
    "start": "842950",
    "end": "848800"
  },
  {
    "text": "does the value of allow in that case and by default allow or any other variable is undefined if none of the rules apply",
    "start": "848800",
    "end": "855670"
  },
  {
    "text": "to it now of course that's not always what you want and so there is a key word",
    "start": "855670",
    "end": "860800"
  },
  {
    "text": "here within OPA that allows you to specify what the default value of any of these variables is and that is here here",
    "start": "860800",
    "end": "868810"
  },
  {
    "text": "we have an example where we say default of allow equals false syntax is what you might expect you just stick a default in",
    "start": "868810",
    "end": "874690"
  },
  {
    "text": "turn and on the front of an assignment all right you can only use one default /",
    "start": "874690",
    "end": "880050"
  },
  {
    "text": "/ rule and oppa will complain and tell you if you've made that made a mistake there",
    "start": "880050",
    "end": "887370"
  },
  {
    "text": "alright the one of the common things that that people ask is well I you know",
    "start": "887370",
    "end": "893140"
  },
  {
    "text": "this is I'm used to writing programs all the time I'm used to writing functions to factor out common logic so it can open do that the answer is yes so let's",
    "start": "893140",
    "end": "900640"
  },
  {
    "text": "look at a slightly different input this time path is represented as a string here instead of an array as we had",
    "start": "900640",
    "end": "906790"
  },
  {
    "text": "previously and that's sort of the the thing that you might expect out of the gate um and now we have a rule and when",
    "start": "906790",
    "end": "913000"
  },
  {
    "text": "we write this rule to encode the same logic that we had before we need to do some string manipulation to actually parse that URL and and pull out the",
    "start": "913000",
    "end": "921010"
  },
  {
    "text": "components of it to do whatever checking that we need to do ok and so what you see here is that this what's in this box",
    "start": "921010",
    "end": "927250"
  },
  {
    "text": "is just some very common string manipulation and if you had ten ten different allow statements you'd have to",
    "start": "927250",
    "end": "932590"
  },
  {
    "text": "repeat that string manipulation logic in each and every one of those rules well obviously oppa has accounted for",
    "start": "932590",
    "end": "939130"
  },
  {
    "text": "this and in the language what we allow you to do is create a function and this is a function that means is basically",
    "start": "939130",
    "end": "944650"
  },
  {
    "text": "the same thing as any function in any programming language here split path is a function that we've defined it just",
    "start": "944650",
    "end": "950410"
  },
  {
    "text": "encapsulate that common logic now",
    "start": "950410",
    "end": "956110"
  },
  {
    "text": "functions actually turn out to simply be rules that take arguments all right so all the same things that I said about",
    "start": "956110",
    "end": "962320"
  },
  {
    "text": "rules a moment ago apply to functions as well you can use the same function name in multiple rules as you see up here and",
    "start": "962320",
    "end": "970330"
  },
  {
    "text": "the only real restriction here is that when you do an evaluation there's only one answer that ever comes out of a",
    "start": "970330",
    "end": "975940"
  },
  {
    "text": "function right as you would expect",
    "start": "975940",
    "end": "979980"
  },
  {
    "text": "yeah so the question here is what is what is the semantics in terms of ordering so does it just evaluate top to",
    "start": "988520",
    "end": "994940"
  },
  {
    "text": "bottom in terms of the rules does it stop once it's found one what happens there so the with oppa order the order",
    "start": "994940",
    "end": "1003160"
  },
  {
    "text": "in which you write statements is completely irrelevant so you can write them in any order and the meaning of the the language the meaning of your policy",
    "start": "1003160",
    "end": "1010390"
  },
  {
    "text": "remains the same there are constructs that if you want to have ordering put in",
    "start": "1010390",
    "end": "1015970"
  },
  {
    "text": "place and you can in fact do that so we don't cover that here but there's an else keyword that allows you to simply",
    "start": "1015970",
    "end": "1020980"
  },
  {
    "text": "chain things together and then so you can do that kind of thing it's yes",
    "start": "1020980",
    "end": "1027000"
  },
  {
    "text": "what's that Oh regular expressions yeah so one of",
    "start": "1027000",
    "end": "1033130"
  },
  {
    "text": "those or one or two of the operators that we have and in that list of 50",
    "start": "1033130",
    "end": "1038199"
  },
  {
    "text": "handles regular expressions yes yes",
    "start": "1038199",
    "end": "1048449"
  },
  {
    "text": "across open deployments uh-huh yeah oh",
    "start": "1056370",
    "end": "1065370"
  },
  {
    "text": "sorry the question was is there an easy way to share common functions across different open deployments one of the",
    "start": "1065370",
    "end": "1072179"
  },
  {
    "text": "things we'll see a little later is that OPA does allow you to create multiple policies and then you can import one",
    "start": "1072179",
    "end": "1078750"
  },
  {
    "text": "policy from another just like you wouldn't Python or any programming language and so that would allow you to",
    "start": "1078750",
    "end": "1084840"
  },
  {
    "text": "share a common function let's say across multiple policies for sure now in terms",
    "start": "1084840",
    "end": "1090750"
  },
  {
    "text": "of sharing it across multiple oppa like deployments you would have to replicate the policies there yeah okay oh yeah",
    "start": "1090750",
    "end": "1101669"
  },
  {
    "text": "okay I forgot to mention here so this equals true trick where you don't have to write equals true is the same for functions as it is for rules great okay",
    "start": "1101669",
    "end": "1110159"
  },
  {
    "text": "so enough for functions one of the things that I already mentioned because it came up in a question is that one of",
    "start": "1110159",
    "end": "1115559"
  },
  {
    "text": "the cool things about opens it you can use external context information about what's going on the world in order to make policy decisions so for so for",
    "start": "1115559",
    "end": "1123419"
  },
  {
    "text": "kubernetes the integration that we did this is incredibly valuable and we use this for example what we do when with",
    "start": "1123419",
    "end": "1130020"
  },
  {
    "text": "kubernetes is we load into OPA all of the information all the metadata about the pods and all the namespaces that",
    "start": "1130020",
    "end": "1136169"
  },
  {
    "text": "exist and so when you're making an admission control decision with an OPA you can use all the information about",
    "start": "1136169",
    "end": "1142380"
  },
  {
    "text": "what the other pods are in order to make an authorization or an admission control decision so for example if you wanted to",
    "start": "1142380",
    "end": "1147630"
  },
  {
    "text": "say in OPA that in every namespace there can be at most one pod called default",
    "start": "1147630",
    "end": "1153899"
  },
  {
    "text": "then you can do that but obviously you can't do that if you don't have all the information about what the other pods",
    "start": "1153899",
    "end": "1159029"
  },
  {
    "text": "and all the other namespaces actually are so when we do the integration with OPA we are injecting into OPA all the",
    "start": "1159029",
    "end": "1165809"
  },
  {
    "text": "information from kubernetes has about the other pods the way that you do that is that you run again it's a very simple",
    "start": "1165809",
    "end": "1171779"
  },
  {
    "text": "one-liner HTTP call where you put at a particular path again it's sort of the",
    "start": "1171779",
    "end": "1177539"
  },
  {
    "text": "name that you'd like to associate with this data and then the body of the put is simply the json object that you want",
    "start": "1177539",
    "end": "1184260"
  },
  {
    "text": "to be there right so super simple to load any any kind of context on the planet and this is incredibly powerful",
    "start": "1184260",
    "end": "1190260"
  },
  {
    "text": "because it means that like again you can use data about kubernetes or you can use data about a calendar you can use data",
    "start": "1190260",
    "end": "1195810"
  },
  {
    "text": "about anything on the planet to make policy decisions yeah yeah so the",
    "start": "1195810",
    "end": "1204090"
  },
  {
    "text": "question is how do you keep it in sync and the answer is that has to happen outside of OPA right OPA allows you to",
    "start": "1204090",
    "end": "1209250"
  },
  {
    "text": "inject it and so then it depends a bit on what system you're integrating with how you how you keep that up to date",
    "start": "1209250",
    "end": "1214980"
  },
  {
    "text": "right so like ad for example has a way you can you can listen to deltas and then you could push those into OPA",
    "start": "1214980",
    "end": "1221300"
  },
  {
    "text": "coober kubernetes has a similar thing and you can set up a watch to get a stream of updates and you can keep keep",
    "start": "1221300",
    "end": "1228150"
  },
  {
    "text": "up to date that way but that is a code that is specific to the integration that",
    "start": "1228150",
    "end": "1233430"
  },
  {
    "text": "you're doing and so that that just has to live outside of it well yeah yes so",
    "start": "1233430",
    "end": "1242370"
  },
  {
    "text": "that's really limited by your by memory right there's no open doesn't really know or care obviously if you start",
    "start": "1242370",
    "end": "1248160"
  },
  {
    "text": "trying to shove a terabyte of data into OPA you should think real hard about whether that's a that's a good idea all",
    "start": "1248160",
    "end": "1254400"
  },
  {
    "text": "of the policies and data and open are stored in memory and so and that's a you know a design decision that we made",
    "start": "1254400",
    "end": "1259950"
  },
  {
    "text": "because for us OPA is really this host local cache to ensure that other service that needs authorization decisions can",
    "start": "1259950",
    "end": "1265860"
  },
  {
    "text": "get them very quickly and so we just put put all that in memory yeah",
    "start": "1265860",
    "end": "1272450"
  },
  {
    "text": "what was the first part",
    "start": "1278290",
    "end": "1281640"
  },
  {
    "text": "if there are means of people or pre-processing well again the thing",
    "start": "1283690",
    "end": "1288820"
  },
  {
    "text": "that's yeah so the question is can you pre process data before you push it into oppa one of the goals of oppa is to",
    "start": "1288820",
    "end": "1294220"
  },
  {
    "text": "allow you to push just any arbitrary raw JSON in so that you can make authorization decisions about that using that data and so we don't require",
    "start": "1294220",
    "end": "1300880"
  },
  {
    "text": "anything other than it's got to be JSON so if you want to do pre-processing then then you would do that outside of oppa",
    "start": "1300880",
    "end": "1307660"
  },
  {
    "text": "and then and push it in and JSON one of the things that you'll see in the language if I may not remember to hit on",
    "start": "1307660",
    "end": "1314710"
  },
  {
    "text": "this again but one of the things you can do with the language is do is introduce sort of virtual JSON documents that",
    "start": "1314710",
    "end": "1323320"
  },
  {
    "text": "allow you to sort of say well look the data that comes in is not in a great form for me to write policy over and so",
    "start": "1323320",
    "end": "1330340"
  },
  {
    "text": "what you can do is sort of insert a layer these virtual documents between the raw data that comes in and the",
    "start": "1330340",
    "end": "1336730"
  },
  {
    "text": "policies that you'd actually like to write and then so doing you can do a little bit of that ETL yeah in the back",
    "start": "1336730",
    "end": "1345150"
  },
  {
    "text": "yes so like you're talking about Oh sir the question is have we thought about adding documentation functionality so",
    "start": "1362350",
    "end": "1369220"
  },
  {
    "text": "that somebody who doesn't know the internals of of the policy can have some idea as to what it's what its semantics",
    "start": "1369220",
    "end": "1374860"
  },
  {
    "text": "are so yeah so this is something on the list where yeah it'd be great if we had you know some like Javadoc kind of",
    "start": "1374860",
    "end": "1380290"
  },
  {
    "text": "functionality where as you write policy you annotate the policy and then the tool will spit out nice Docs for that so",
    "start": "1380290",
    "end": "1387220"
  },
  {
    "text": "yeah that's just on the list having done it we'd love contributions so if you have ideas yeah yeah yeah so it's a good",
    "start": "1387220",
    "end": "1403360"
  },
  {
    "text": "question I'm not gonna demo here we didn't demo it yesterday but there is functionality inside of OPA to say give",
    "start": "1403360",
    "end": "1408910"
  },
  {
    "text": "me a trace of the decision that you made and then we even for awhile tried to go",
    "start": "1408910",
    "end": "1414160"
  },
  {
    "text": "and and sort of prune that trace down to like the minimal that you actually needed to understand why the decision",
    "start": "1414160",
    "end": "1421630"
  },
  {
    "text": "was made the way it was but that's in there and again it needs some work so if you're we'd love to help yes",
    "start": "1421630",
    "end": "1430650"
  },
  {
    "text": "so yeah question was can you can you merge data and when you send it into OPA",
    "start": "1436710",
    "end": "1442330"
  },
  {
    "text": "so there is a JSON patch so you can use that to just push deltas in and then",
    "start": "1442330",
    "end": "1448570"
  },
  {
    "text": "again in the policy language if you were trying to actually merge data like you had you know users from ad and users",
    "start": "1448570",
    "end": "1453940"
  },
  {
    "text": "from LDAP and you wanted all users then you can express that idea within the policy language using a virtual document",
    "start": "1453940",
    "end": "1460630"
  },
  {
    "text": "and then write your policy on top of that that virtual document yeah okay Wow",
    "start": "1460630",
    "end": "1466420"
  },
  {
    "text": "lots of questions good all right is there a question is is there a way to",
    "start": "1466420",
    "end": "1471760"
  },
  {
    "text": "index the data so yes index to the data itself we did have that for a while I",
    "start": "1471760",
    "end": "1478540"
  },
  {
    "text": "think we've removed it recently we just need to put it back in but yes in terms of performance there is this question",
    "start": "1478540",
    "end": "1484780"
  },
  {
    "text": "once you start shoving arbitrary JSON in there you do want to make sure that it's going to perform the the way you want",
    "start": "1484780",
    "end": "1490360"
  },
  {
    "text": "and there are some just basic tricks when we've worked with people in the past what we've said is it's like look just use a dictionary to do you know",
    "start": "1490360",
    "end": "1497140"
  },
  {
    "text": "constant time lookup so that we're not doing linear scans of like arrays and that has typically been enough but yes",
    "start": "1497140",
    "end": "1504400"
  },
  {
    "text": "there is indexing like reverse indexing doing static analysis over the policies to figure out what indexes are appropriate and then building those",
    "start": "1504400",
    "end": "1510100"
  },
  {
    "text": "lazily over during evaluation yes yeah",
    "start": "1510100",
    "end": "1518110"
  },
  {
    "text": "so the question is can you enforce schema on the data coming in during policy evaluation and again this is",
    "start": "1518110",
    "end": "1523210"
  },
  {
    "text": "another one on our wish list so please help us out not today",
    "start": "1523210",
    "end": "1528670"
  },
  {
    "text": "one of the observations that we've made though is that from the services point of view if even assuming that once we",
    "start": "1528670",
    "end": "1535450"
  },
  {
    "text": "have this sort of schema checking in place on the inputs then you know imagine the service gives opis and bad",
    "start": "1535450",
    "end": "1541900"
  },
  {
    "text": "data it still needs an authorization decision right like we can't forget that that thing assumes it is going to get a",
    "start": "1541900",
    "end": "1548320"
  },
  {
    "text": "decision back so once we have the schema checking in there we can get an error and then it's like what does it do right I don't know and so but yes schema",
    "start": "1548320",
    "end": "1555430"
  },
  {
    "text": "checking something that we're gonna do the one thing that we do do today is we do type inference over all the policy",
    "start": "1555430",
    "end": "1561310"
  },
  {
    "text": "that exists and so as and so you know it'll figure out things like well you're referencing a field that doesn't exist",
    "start": "1561310",
    "end": "1567550"
  },
  {
    "text": "or you're using a string what when it's really a number and so we do that kind of thing so all we need to do is now add",
    "start": "1567550",
    "end": "1572860"
  },
  {
    "text": "the schema declarations for the inputs and the what we call the base documents which is this data over here that we're",
    "start": "1572860",
    "end": "1578530"
  },
  {
    "text": "injecting and then we'll be able to do full analysis over everything yeah the",
    "start": "1578530",
    "end": "1589840"
  },
  {
    "text": "question is if there's an an error on one of the rules how does that get returned to the sender so there are",
    "start": "1589840",
    "end": "1596080"
  },
  {
    "text": "different cases right like so opah is pretty forgiving in the language itself so if you like dot into a",
    "start": "1596080",
    "end": "1601240"
  },
  {
    "text": "dictionary and that dictionary doesn't have that field it'll just go ahead and say well that's undefined like that that",
    "start": "1601240",
    "end": "1606700"
  },
  {
    "text": "particular rule is undefined and so then it will continue evaluation because there may very well be another rule that permits or denies that request",
    "start": "1606700",
    "end": "1614460"
  },
  {
    "text": "so one of the so you so the return values that you can get out of OPA are effectively of a JSON value you can get",
    "start": "1614460",
    "end": "1621820"
  },
  {
    "text": "undefined and then and then you can get an error yeah okay let me give you a",
    "start": "1621820",
    "end": "1629050"
  },
  {
    "text": "quick example of how you use context once you've injected it into OPA here the idea is that now on the left-hand",
    "start": "1629050",
    "end": "1635170"
  },
  {
    "text": "side in addition to input we also have this data and and we're and I'm using the term data because data is another",
    "start": "1635170",
    "end": "1641710"
  },
  {
    "text": "keyword inside of OPA so if you're trying to reference the information that comes in as part of the input you use the keyword input if you're trying to",
    "start": "1641710",
    "end": "1648250"
  },
  {
    "text": "reference information that's been injected via context you use the keyword data so over here on the right-hand side",
    "start": "1648250",
    "end": "1653680"
  },
  {
    "text": "what you see is that the first allow statement is just using input the second allowed statement and what that's saying",
    "start": "1653680",
    "end": "1659200"
  },
  {
    "text": "is that users can access their own salary so here we're just doing a check over inputs the second statement is",
    "start": "1659200",
    "end": "1664270"
  },
  {
    "text": "saying that HR can access any salary and and the reason that's important is because HR is like who is a member of HR",
    "start": "1664270",
    "end": "1671560"
  },
  {
    "text": "is not information that comes in with the API call right it's just not there and so you need that external context in",
    "start": "1671560",
    "end": "1677350"
  },
  {
    "text": "order to make a decision and so for that the way we do that is we just here we're assigning user a temporary variable and",
    "start": "1677350",
    "end": "1684070"
  },
  {
    "text": "we're looking up inside the data dot users dictionary which is the the bit over here on the left we're indexing",
    "start": "1684070",
    "end": "1690640"
  },
  {
    "text": "into this dictionary whatever the input dot user value actually is and so then",
    "start": "1690640",
    "end": "1696010"
  },
  {
    "text": "the the user variable here is a JSON object which includes one of these one",
    "start": "1696010",
    "end": "1702130"
  },
  {
    "text": "of these dictionaries here that have the department inside and so then when we say user dot Department equals HR whoops",
    "start": "1702130",
    "end": "1709150"
  },
  {
    "text": "that's doing what you would expect all right so whether the the data comes in from input or comes in as data you",
    "start": "1709150",
    "end": "1715840"
  },
  {
    "text": "sort of you have different routes but all the operations are exactly the same",
    "start": "1715840",
    "end": "1721260"
  },
  {
    "text": "remember oh sorry the question was it looks like the first rule returns true the second rule returns false remember",
    "start": "1732570",
    "end": "1740440"
  },
  {
    "text": "that the semantics here is that the the rule only returns true if the body holds",
    "start": "1740440",
    "end": "1747100"
  },
  {
    "text": "if the body is true then the head becomes true so the first rule let's say",
    "start": "1747100",
    "end": "1753250"
  },
  {
    "text": "it evaluates to true the second rule does not evaluate to false it evaluates to nothing undefined",
    "start": "1753250",
    "end": "1758590"
  },
  {
    "text": "and then we or those two together and we get true yeah so yeah yes",
    "start": "1758590",
    "end": "1769919"
  },
  {
    "text": "yeah so so if I'm sorry the question was what",
    "start": "1770260",
    "end": "1778419"
  },
  {
    "text": "happened if the rules give you conflicting results so what you could do here so to make this case you could say",
    "start": "1778419",
    "end": "1783549"
  },
  {
    "text": "allow equals true if the first one a lot of equals false if the second one right",
    "start": "1783549",
    "end": "1788919"
  },
  {
    "text": "let's just say wouldn't in code what we said here but imagine that that was a kind of rule that we had so one thing",
    "start": "1788919",
    "end": "1793990"
  },
  {
    "text": "that we do is we say we recommend not doing that unless you absolutely have to",
    "start": "1793990",
    "end": "1799020"
  },
  {
    "text": "but in that case if you got an actual conflict we would say that's an error",
    "start": "1799020",
    "end": "1804120"
  },
  {
    "text": "now what you could do and what maybe you're thinking of is what people often will do is will write allow rules and",
    "start": "1804120",
    "end": "1810580"
  },
  {
    "text": "deny rules you can do that here but then what you need to do is open doesn't know",
    "start": "1810580",
    "end": "1816429"
  },
  {
    "text": "about allowing deny are not keywords for OPA and so when that when that micro-service asks for the answer to a",
    "start": "1816429",
    "end": "1823720"
  },
  {
    "text": "policy decision it will ask for let's say allow and so if you want to use",
    "start": "1823720",
    "end": "1829480"
  },
  {
    "text": "allow and deny you need to write the logic that says how to resolve those conflicts to return a single value for",
    "start": "1829480",
    "end": "1836530"
  },
  {
    "text": "allow we've got an example this later so maybe that's the best way to illustrate that yes very good question give me 30",
    "start": "1836530",
    "end": "1850870"
  },
  {
    "text": "seconds I'm sorry the question was are is there anything like loops and and and",
    "start": "1850870",
    "end": "1856480"
  },
  {
    "text": "and then that's the answer okay so here's a summary I'm not gonna bore you with the details you can read this if you want alright so now we're gonna move",
    "start": "1856480",
    "end": "1863350"
  },
  {
    "text": "on to the more interesting section which is policies with iteration all right so",
    "start": "1863350",
    "end": "1871720"
  },
  {
    "text": "we've talked about dictionaries quite a bit all the examples really have used mainly dictionaries but what about",
    "start": "1871720",
    "end": "1878380"
  },
  {
    "text": "arrays imagine we've got an array now that comes in as the input or as part of data and now in order to make an authorization decision I need to be able",
    "start": "1878380",
    "end": "1884410"
  },
  {
    "text": "to find an element in that array all right now given what I've shown you so",
    "start": "1884410",
    "end": "1889419"
  },
  {
    "text": "far it's a it's it's really difficult to figure out how to write this right so",
    "start": "1889419",
    "end": "1894700"
  },
  {
    "text": "imagine that we somehow so here's a here's an array on the left hand side and data it's it's a list of resources",
    "start": "1894700",
    "end": "1899860"
  },
  {
    "text": "each of which has an ID and an owner okay and then the input that comes in is a use and a resource and what we want to know",
    "start": "1899860",
    "end": "1906010"
  },
  {
    "text": "and what we want to say is that this this input is allowed exactly when that user is the owner of the resource that",
    "start": "1906010",
    "end": "1913540"
  },
  {
    "text": "they are requesting access to all right and what that means is that we have to like effectively iterate over the elements and that resources array to",
    "start": "1913540",
    "end": "1919330"
  },
  {
    "text": "figure out if that user owns the resource that he is requesting now",
    "start": "1919330",
    "end": "1925420"
  },
  {
    "text": "imagine to start that we know magically that the the that it's the first array",
    "start": "1925420",
    "end": "1932500"
  },
  {
    "text": "element that we need to check and it's only the first array elements that we need to check what would the logic be that we would write for this allows",
    "start": "1932500",
    "end": "1939160"
  },
  {
    "text": "statement well you see that on the right-hand side what you see here is that allow is going to be true if the resources at element 0 so if the input",
    "start": "1939160",
    "end": "1945720"
  },
  {
    "text": "resource the resource being requested is the same as the resource ID at element 0",
    "start": "1945720",
    "end": "1951850"
  },
  {
    "text": "and the data resources array and the input and the user requesting the",
    "start": "1951850",
    "end": "1957580"
  },
  {
    "text": "resource needs to be the same as the owner at the at the zeroth element of",
    "start": "1957580",
    "end": "1963640"
  },
  {
    "text": "the data resources array right so that's the logic that you would write if you knew that the the resource you cared",
    "start": "1963640",
    "end": "1969430"
  },
  {
    "text": "about was at element 0 of the array all right but we don't know it's a 0 at",
    "start": "1969430",
    "end": "1976750"
  },
  {
    "text": "element 0 it might be element 1 and so you could imagine repeating that allows statement if it was element 1 all right",
    "start": "1976750",
    "end": "1984160"
  },
  {
    "text": "if the resource here that was at element 1 now the obvious problem here is that we don't know which element of the array",
    "start": "1984160",
    "end": "1991030"
  },
  {
    "text": "we need to look at and so that list of allow statements would actually be infinite what opal laws you to do",
    "start": "1991030",
    "end": "1997030"
  },
  {
    "text": "instead of writing an infinite policy is to replace that that index with a",
    "start": "1997030",
    "end": "2003300"
  },
  {
    "text": "variable and so instead of writing that whole long list of allowed statements",
    "start": "2003300",
    "end": "2009990"
  },
  {
    "text": "you can simply inject a variable into the array index and now implicitly what",
    "start": "2009990",
    "end": "2016950"
  },
  {
    "text": "this says is that allow is true if for some index the body of that statement is",
    "start": "2016950",
    "end": "2024660"
  },
  {
    "text": "true if for some index what I said earlier was true all right what what",
    "start": "2024660",
    "end": "2031500"
  },
  {
    "text": "oppan does when it sees a variable without a value is it implicitly it automatically does iteration",
    "start": "2031500",
    "end": "2037920"
  },
  {
    "text": "it automatically walks over all of the possible values for that index variable and if it finds one we're the bots that",
    "start": "2037920",
    "end": "2046410"
  },
  {
    "text": "makes the body true then it says the body as a whole is true and it returns yes oh the question is is this autom",
    "start": "2046410",
    "end": "2059850"
  },
  {
    "text": "automatic problematic if you make a mistake okay so there's a lot of language constructs where if you use",
    "start": "2059850",
    "end": "2066060"
  },
  {
    "text": "them accidentally you would there would be a problem yes so yes if you accident",
    "start": "2066060",
    "end": "2071580"
  },
  {
    "text": "intended here to to assign index to a value and then you you forgot to",
    "start": "2071580",
    "end": "2077070"
  },
  {
    "text": "actually do that assignment then yes but this is how you can do it eration you can do iteration like conceptually",
    "start": "2077070",
    "end": "2083010"
  },
  {
    "text": "what's happening here is what oppa always does and this is a universally",
    "start": "2083010",
    "end": "2088139"
  },
  {
    "text": "the semantics is that it finds an assignment is that the head of a rule is true if there is some assignment to the",
    "start": "2088140",
    "end": "2094679"
  },
  {
    "text": "variables in that body that make the body as a whole true that's what it's always doing that is it semantics",
    "start": "2094679",
    "end": "2101630"
  },
  {
    "text": "question",
    "start": "2101630",
    "end": "2104630"
  },
  {
    "text": "oh yeah so the question is instead of using a random variable name what if you",
    "start": "2115170",
    "end": "2120720"
  },
  {
    "text": "used underscore two to ask for iteration yeah you're jumping ahead I think",
    "start": "2120720",
    "end": "2125819"
  },
  {
    "text": "there's yes you see you can use the underscore if you don't want to invent a new variable name then you can use the underscore okay questions here yeah yes",
    "start": "2125819",
    "end": "2140790"
  },
  {
    "text": "so if you see the same variable in multiple places within a rule it must be assigned the same value yes yes",
    "start": "2140790",
    "end": "2152720"
  },
  {
    "text": "the question is if you had a hundred of these allow rules each of which has variables and required an iteration does",
    "start": "2164650",
    "end": "2171730"
  },
  {
    "text": "it run all through all of the possible indexes for one rule and then going to the next rule or does it sort of",
    "start": "2171730",
    "end": "2177490"
  },
  {
    "text": "interleave them that's an implementation question now but but conceptually you shouldn't have to care one of the goals",
    "start": "2177490",
    "end": "2183640"
  },
  {
    "text": "of oppa's to allow you to focus on the logic and the data and allow the performance optimizations leave those to",
    "start": "2183640",
    "end": "2190900"
  },
  {
    "text": "leave those 200 yeah there's no way",
    "start": "2190900",
    "end": "2203890"
  },
  {
    "text": "sorry the question is what happens if the data changes during evaluation that",
    "start": "2203890",
    "end": "2209200"
  },
  {
    "text": "can't happen yeah yes there is we've got",
    "start": "2209200",
    "end": "2217780"
  },
  {
    "text": "a slide for that near the end it's a little tricky you've got to use the old trick back from when would we have",
    "start": "2217780",
    "end": "2226030"
  },
  {
    "text": "learned this back for the old trick where if you want to do if you want to ask for everything it's equivalent to",
    "start": "2226030",
    "end": "2231970"
  },
  {
    "text": "saying it's not the case that there exists one that's not true yes yes and and yes you can do the full",
    "start": "2231970",
    "end": "2240130"
  },
  {
    "text": "arbitrary quantifier alternation here yeah",
    "start": "2240130",
    "end": "2245310"
  },
  {
    "text": "so another good so the question was during evaluation if what happens once",
    "start": "2253100",
    "end": "2258810"
  },
  {
    "text": "it finds an answer and so again that's a that's a performance sort of optimization question it's not a",
    "start": "2258810",
    "end": "2264810"
  },
  {
    "text": "semantic question right so today I you know one of the things in our list is to actually have it stopped early once it's",
    "start": "2264810",
    "end": "2270630"
  },
  {
    "text": "found an answer both but I don't think that happens today there are other things that we found in terms of",
    "start": "2270630",
    "end": "2276210"
  },
  {
    "text": "performance that are more important than than that one yes always question does",
    "start": "2276210",
    "end": "2288120"
  },
  {
    "text": "rule evaluation have zero side effects and I immediately said always and that's ideally correct there is that list of 40",
    "start": "2288120",
    "end": "2295830"
  },
  {
    "text": "of built-ins of operators all of which",
    "start": "2295830",
    "end": "2301530"
  },
  {
    "text": "today are side-effect free we have talked to people who have embedded open as a library and they added built-ins",
    "start": "2301530",
    "end": "2308760"
  },
  {
    "text": "that do things in the world and we've heard of that again that's not the",
    "start": "2308760",
    "end": "2314460"
  },
  {
    "text": "intent of OPA all side-effects should have an outside by the service yes yes",
    "start": "2314460",
    "end": "2326690"
  },
  {
    "text": "question is are there testing tools yes unit open does have a unit test framework and so you can write tests I",
    "start": "2326960",
    "end": "2333960"
  },
  {
    "text": "don't think I have any examples here but you write tests then literally in this rule language and then there's a way to",
    "start": "2333960",
    "end": "2339630"
  },
  {
    "text": "like mock out input there's one more how",
    "start": "2339630",
    "end": "2346590"
  },
  {
    "text": "do you return data so when so when the service is asking for a policy decision",
    "start": "2346590",
    "end": "2353460"
  },
  {
    "text": "that system can ask for let's say allow in which case it gets true/false there",
    "start": "2353460",
    "end": "2360360"
  },
  {
    "text": "are other as hopefully we'll see there are that you can define virtual documents where when the when the",
    "start": "2360360",
    "end": "2367230"
  },
  {
    "text": "outside service asks for the the value of that document it could be an array or a set or a dictionary or a number yeah",
    "start": "2367230",
    "end": "2375470"
  },
  {
    "text": "okay we should continue all right one important thing here is that despite the fact that I motivated iteration with",
    "start": "2375470",
    "end": "2382020"
  },
  {
    "text": "arrays you can use open to iterate over anything right so at the top here we've got an example where we're iterating",
    "start": "2382020",
    "end": "2387960"
  },
  {
    "text": "over both the array indexes and values you can also iterate over dictionary keys and values you can it doesn't",
    "start": "2387960",
    "end": "2395490"
  },
  {
    "text": "matter whether you're iterating over the input document or the data document and",
    "start": "2395490",
    "end": "2400980"
  },
  {
    "text": "then oh we just left and then here is your underscore so if you don't want to bother inventing new variables all the",
    "start": "2400980",
    "end": "2407190"
  },
  {
    "text": "time to do it eration you can use an underscore and unlike all the other variable names you can use multiple",
    "start": "2407190",
    "end": "2412530"
  },
  {
    "text": "underscores within a single rule and those are all distinct variables all",
    "start": "2412530",
    "end": "2419220"
  },
  {
    "text": "right here's the observation but just because we're using iteration doesn't",
    "start": "2419220",
    "end": "2424920"
  },
  {
    "text": "mean we don't doesn't mean that we no longer have the problem of duplicated",
    "start": "2424920",
    "end": "2430619"
  },
  {
    "text": "logic and so in this example we've got logic duplicated that is actually searching for administrators for who is",
    "start": "2430619",
    "end": "2438330"
  },
  {
    "text": "an admin and so we want to avoid duplicating that logic here as well because iteration is special or it",
    "start": "2438330",
    "end": "2447590"
  },
  {
    "text": "requires some special constructs we do have a special constructs for for",
    "start": "2447590",
    "end": "2453990"
  },
  {
    "text": "eliminating duplicate logic inside of when we have iteration so in this example we've pulled out that common",
    "start": "2453990",
    "end": "2459930"
  },
  {
    "text": "Lodge and we've created what we're calling a virtual document that defines a set in",
    "start": "2459930",
    "end": "2465630"
  },
  {
    "text": "this case of administrators and so this particular search that we factored out is is iterating over all the users and",
    "start": "2465630",
    "end": "2472200"
  },
  {
    "text": "finding all of those that are administrators and then storing that result in what we're calling the admin",
    "start": "2472200",
    "end": "2478350"
  },
  {
    "text": "variable okay so admin over here is the set Bob and Charlie and obviously sets",
    "start": "2478350",
    "end": "2483750"
  },
  {
    "text": "for an extension to JSON when we render them and return them they look like arrays",
    "start": "2483750",
    "end": "2489710"
  },
  {
    "text": "there are different syntaxes for virtual sets so here at the top is a rule syntax and this is defining admin again as the",
    "start": "2492119",
    "end": "2499080"
  },
  {
    "text": "set of all users that are admins you can equivalently write that that rule as",
    "start": "2499080",
    "end": "2504140"
  },
  {
    "text": "using set comprehension syntax and these two are entirely equivalent the one on",
    "start": "2504140",
    "end": "2509490"
  },
  {
    "text": "the bottom is something that especially if you use use Python that is going to look really familiar there is a slight",
    "start": "2509490",
    "end": "2517050"
  },
  {
    "text": "distinction between these two syntaxes though which is that the rule syntax supports an or so you could write",
    "start": "2517050",
    "end": "2522240"
  },
  {
    "text": "multiple statements that all that you Union together to compute the the admin",
    "start": "2522240",
    "end": "2528750"
  },
  {
    "text": "set or as a set comprehension syntax you can't do that all right",
    "start": "2528750",
    "end": "2537560"
  },
  {
    "text": "likewise in addition to to building virtual documents that are sets or arrays you can build a dictionary that's",
    "start": "2537560",
    "end": "2544500"
  },
  {
    "text": "a virtual that's virtual and here again it's pretty much the same thing the only difference between this in the set is",
    "start": "2544500",
    "end": "2550830"
  },
  {
    "text": "that in the head of the rule here instead of simply writing admin of username we did we write an assignment",
    "start": "2550830",
    "end": "2557160"
  },
  {
    "text": "that says admin of user name equals user dot Department and again you've got a rule syntax for this for which you can",
    "start": "2557160",
    "end": "2563100"
  },
  {
    "text": "you can sort of write multiple copies of the of the rule in order to create a",
    "start": "2563100",
    "end": "2568800"
  },
  {
    "text": "Union across all of those dictionaries and then there's a dictionary comprehension syntax below which is more",
    "start": "2568800",
    "end": "2575220"
  },
  {
    "text": "familiar if you've used Python questions here",
    "start": "2575220",
    "end": "2582020"
  },
  {
    "text": "how're we doing on time I got one minute okay",
    "start": "2584020",
    "end": "2592940"
  },
  {
    "text": "well okay so let me see what else I should cover here okay let me finish this so we've actually seen two cases",
    "start": "2592940",
    "end": "2600710"
  },
  {
    "text": "where duplicated logic gets factored out one of which is to use functions the other of which is to use these virtual",
    "start": "2600710",
    "end": "2607099"
  },
  {
    "text": "documents so what are the trade offs the clear trade-off here is that virtual documents support iterations so if you",
    "start": "2607099",
    "end": "2613670"
  },
  {
    "text": "define virtually a dictionary you can use iteration just like I talked about earlier you can iterate over the keys",
    "start": "2613670",
    "end": "2619160"
  },
  {
    "text": "over the values of the keys end values you can you can fix the value and find all the keys that that that that are",
    "start": "2619160",
    "end": "2626030"
  },
  {
    "text": "assigned to that value with a function on the other hand it's like a function from a traditional programming language and while you can when you apply that",
    "start": "2626030",
    "end": "2633530"
  },
  {
    "text": "function like down here if we want to look up bob's department we would write admin of Bob just like you would expect but what we can't do then is is ask give",
    "start": "2633530",
    "end": "2641450"
  },
  {
    "text": "me all of the give me all of the people whose Department is HR you just can't do",
    "start": "2641450",
    "end": "2647210"
  },
  {
    "text": "that with a function alright so it may seem as though virtual Docs support iteration functions don't and so therefore virtual Docs are completely",
    "start": "2647210",
    "end": "2653690"
  },
  {
    "text": "superior to functions why use functions at all and the answer is well virtual documents must always be finite",
    "start": "2653690",
    "end": "2660430"
  },
  {
    "text": "functions on the other hand can be infinitely large in the sense that and in for a long time we we just had",
    "start": "2660430",
    "end": "2666770"
  },
  {
    "text": "virtual docks without any functions whatsoever but then what we found time and time again is that we had string manipulation that we needed to factor",
    "start": "2666770",
    "end": "2673730"
  },
  {
    "text": "out and string manipulation for example this split path function on the right hand side is something that is infinite",
    "start": "2673730",
    "end": "2679910"
  },
  {
    "text": "right you can hand it any string that you like and it will actually do the string manipulation and return result",
    "start": "2679910",
    "end": "2685369"
  },
  {
    "text": "handed any URL of which there are infinitely many and then this function will will parse that URL and return all",
    "start": "2685369",
    "end": "2691520"
  },
  {
    "text": "of the segments in the path all right I think that's covered my minute we've had",
    "start": "2691520",
    "end": "2696740"
  },
  {
    "text": "lots of questions throughout so let's go ahead and wrap up so there's another section here I will post these slides",
    "start": "2696740",
    "end": "2702260"
  },
  {
    "text": "online and this is where you see how to deal with modularity multiple policies and how you import one policy into",
    "start": "2702260",
    "end": "2708589"
  },
  {
    "text": "another and the like alright thank you all [Applause]",
    "start": "2708589",
    "end": "2715679"
  }
]