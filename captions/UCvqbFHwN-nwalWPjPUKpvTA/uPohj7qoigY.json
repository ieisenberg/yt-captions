[
  {
    "start": "0",
    "end": "26000"
  },
  {
    "text": "okay all right we're good to go all right so everyone thank you for sticking out to the second to last talk to coop con and being here to hear about our",
    "start": "30",
    "end": "7710"
  },
  {
    "text": "experiences with epic ah she opened whisk and putting it on top of kubernetes I'm Dave Grove I'm an Apache",
    "start": "7710",
    "end": "13230"
  },
  {
    "text": "open whisk emitter and I've been one of the leaders of our community effort to take open whisk and flow it on top of",
    "start": "13230",
    "end": "18930"
  },
  {
    "text": "kubernetes and it's my pleasure to be here today to represent all the people who did this work together and tell you",
    "start": "18930",
    "end": "24720"
  },
  {
    "text": "about our experiences with doing that okay in terms of the plan for the talk today I'm going to start out with just a",
    "start": "24720",
    "end": "30119"
  },
  {
    "start": "26000",
    "end": "70000"
  },
  {
    "text": "few minutes of a general overview of Apache open whisk to give you an idea of the context in which this work is being done then we're going to dive down into",
    "start": "30119",
    "end": "36809"
  },
  {
    "text": "some of the implementation and deployment architecture in particular we're going to look at the heart of the system the critical path of invoking a",
    "start": "36809",
    "end": "43050"
  },
  {
    "text": "function and some of our container management alternatives and what those mean for performance because that that's really the sort of key to getting the",
    "start": "43050",
    "end": "49230"
  },
  {
    "text": "format and scalable system and I want to tell you about some of our experiences of that some of the alternatives we've looked at then we're going to shift",
    "start": "49230",
    "end": "54809"
  },
  {
    "text": "gears and get into a demo mode and I want to talk about some of our more recent work about going beyond simple",
    "start": "54809",
    "end": "60420"
  },
  {
    "text": "functions doing service composition of service functions we're gonna use that as a demo to show some of the tools have",
    "start": "60420",
    "end": "65489"
  },
  {
    "text": "been doing and some of the cool things we're doing and some of the future directions for the project okay so what",
    "start": "65489",
    "end": "71460"
  },
  {
    "start": "70000",
    "end": "179000"
  },
  {
    "text": "is Apache open whisk so Apache open whisk is a production ready open source function as a service offering so it's",
    "start": "71460",
    "end": "77549"
  },
  {
    "text": "got a number of pieces there's a core fast runtime command-line tools their",
    "start": "77549",
    "end": "82890"
  },
  {
    "text": "language runtimes for each of the supported tool it was pre supported languages we have and they're bunch of packages that provide bindings and",
    "start": "82890",
    "end": "89850"
  },
  {
    "text": "convenient ways to use common cloud services Apache open whisk is pretty aggressively polyglot there's about a",
    "start": "89850",
    "end": "96720"
  },
  {
    "text": "half a dozen languages that are sort of built-in you can write your functions any one of these languages but if those languages don't suit you you can bring",
    "start": "96720",
    "end": "102600"
  },
  {
    "text": "your own black box container so basically you can run almost anything you want as a function as long as it responds so pretty simple each if you",
    "start": "102600",
    "end": "108960"
  },
  {
    "text": "arrest REST API the system is designed to be extensible and pluggable between",
    "start": "108960",
    "end": "114600"
  },
  {
    "text": "most of our major components we have the service provider and interfaces or SP is they give us a way to customize the",
    "start": "114600",
    "end": "120570"
  },
  {
    "text": "deployment of this thing and make different choices for different people who are deploying it it's pretty easy to bring additional language runtimes",
    "start": "120570",
    "end": "126329"
  },
  {
    "text": "some of the four writers have different runtimes the Floyd and their things add additional packages SDKs and so on",
    "start": "126329",
    "end": "132150"
  },
  {
    "text": "there's also diverse ways so to employ open whisk you can deploy it on a bunch of container compass",
    "start": "132150",
    "end": "138200"
  },
  {
    "text": "container orchestration platforms docker compose kubernetes Mesa is open shifts you can also use ansible adjust deploy",
    "start": "138200",
    "end": "144830"
  },
  {
    "text": "it on a host of VMs or bare-metal machines there are there are hosted commercial deployment to open whisk",
    "start": "144830",
    "end": "150590"
  },
  {
    "text": "level with IBM and Adobe and their additional companies that are in various stages of getting this getting additional host of you from Ursula flam",
    "start": "150590",
    "end": "156500"
  },
  {
    "text": "its out but open whisk is also an open-source project so it's an Apache Incubator project there's a pretty",
    "start": "156500",
    "end": "162470"
  },
  {
    "text": "active open source developer and user community and as a whole the project is working towards official releases and",
    "start": "162470",
    "end": "167930"
  },
  {
    "text": "graduation from incubation which we're hoping to have happen relatively soon as we sort of move up the curve to maturity",
    "start": "167930",
    "end": "173690"
  },
  {
    "text": "so it's it's in production already for multiple companies but we're still an incubator project in the open-source",
    "start": "173690",
    "end": "178820"
  },
  {
    "text": "sense so open a whisk on kubernetes what is this project particularly what is this project entail and really there are",
    "start": "178820",
    "end": "185180"
  },
  {
    "start": "179000",
    "end": "263000"
  },
  {
    "text": "three major stages of work the first one was fairly straightforward so open whisk the the control plane open whisk is",
    "start": "185180",
    "end": "192260"
  },
  {
    "text": "already was already containerized and so getting that control plane to run on top of kubernetes was really just taking",
    "start": "192260",
    "end": "197780"
  },
  {
    "text": "these containers and deploying them as using kubernetes concept concepts stateful sets daemon sets and so on and",
    "start": "197780",
    "end": "204170"
  },
  {
    "text": "the process of doing that we found places where the existing code didn't really wasn't really a great fit for kubernetes and so we did a bunch but a",
    "start": "204170",
    "end": "210709"
  },
  {
    "text": "bunch of adjustment to the open was code base 2 it's the the actual implementation the configuration and",
    "start": "210709",
    "end": "215989"
  },
  {
    "text": "deployment scripts to make it a better fit for kubernetes to get it make it easier to deploy and do that and the",
    "start": "215989",
    "end": "221630"
  },
  {
    "text": "third stage which is we're really sort of just in the initial early stages of it is now they're on top of kubernetes",
    "start": "221630",
    "end": "226820"
  },
  {
    "text": "trying to think about how we can exploit kubernetes capabilities to simplify the open whisky implementation give us let's",
    "start": "226820",
    "end": "232700"
  },
  {
    "text": "is less to maintain more naturally fit into the kubernetes environment and so on so all this work is being done in a",
    "start": "232700",
    "end": "239180"
  },
  {
    "text": "sub project of the Apache open wisp project the github repositories incubator open wisp deploy cube if you",
    "start": "239180",
    "end": "245510"
  },
  {
    "text": "go there where you'll find is something that supports multiple versions of mini cube and kubernetes there's configuration files read Me's and",
    "start": "245510",
    "end": "251750"
  },
  {
    "text": "deployment scripts for deploying the system onto mini cube and single and multi node clusters and as well we can half ago we actually of a helmet chart",
    "start": "251750",
    "end": "258019"
  },
  {
    "text": "they'll let you deploy it as well we're going to do a demo of this later all right",
    "start": "258019",
    "end": "263690"
  },
  {
    "start": "263000",
    "end": "374000"
  },
  {
    "text": "but first so what are the underlying assumptions for open wisk what are we trying to do and some of these assumptions come",
    "start": "263690",
    "end": "269270"
  },
  {
    "text": "around what we mean by production-ready so when we're building open Wisc we really want to build a software stack",
    "start": "269270",
    "end": "274550"
  },
  {
    "text": "that's capable of operating at very large scale at public cloud provider scale so many many millions of",
    "start": "274550",
    "end": "280189"
  },
  {
    "text": "functioning applications a day all of the core components in the control plane are designed to be replicated for fault",
    "start": "280189",
    "end": "285680"
  },
  {
    "text": "tolerance and scalability and we're also interested in building a multi-tenant system to really make this thing",
    "start": "285680",
    "end": "291020"
  },
  {
    "text": "economically viable we need to deploy a system and then run code from many users on top of that so we're we're dealing",
    "start": "291020",
    "end": "297919"
  },
  {
    "text": "with running arbitrary code including arbitrary containers that we haven't even looked at from our from many users",
    "start": "297919",
    "end": "303050"
  },
  {
    "text": "and then providing all the isolation and security both to protect our control plane from those users and to protect",
    "start": "303050",
    "end": "308870"
  },
  {
    "text": "the users from each other another thing about being production righty is when you to take open wisk and",
    "start": "308870",
    "end": "314599"
  },
  {
    "text": "I'm a provider I deploy it onto my cloud it has to fit into the rest of my cloud so it's got to naturally just plug in",
    "start": "314599",
    "end": "320090"
  },
  {
    "text": "there and that's why we have so many SBI's and plug points so we can take the core codebase deploy it basically unchanged but yet feel like we're part",
    "start": "320090",
    "end": "326960"
  },
  {
    "text": "of a cloud the cloud platform on which we're plugging into a second set of assumptions come from some of the",
    "start": "326960",
    "end": "332449"
  },
  {
    "text": "workloads and use cases were interested in supporting an open Wisc we have a strong emphasis on extremely low latency",
    "start": "332449",
    "end": "338029"
  },
  {
    "text": "and minimizing system overhead and some of that's becoming from the applications we want to support we want we want to be",
    "start": "338029",
    "end": "343550"
  },
  {
    "text": "able to run the backends for interactive applications on open wisk so the backends for mobile apps for chatbots",
    "start": "343550",
    "end": "349460"
  },
  {
    "text": "and we also want to run applications where a single top-level logical action something the user wants to do will",
    "start": "349460",
    "end": "355129"
  },
  {
    "text": "actually be a pipeline or composition that'll spawn many function requests and also because of the charging model of",
    "start": "355129",
    "end": "361069"
  },
  {
    "text": "server lists there's a tendency for short running functions and when you have short running functions is really harder it's harder to amortize the",
    "start": "361069",
    "end": "366979"
  },
  {
    "text": "system overheads right so you don't have as many places to hide and so we have an emphasis on low latency and minimizing",
    "start": "366979",
    "end": "373099"
  },
  {
    "text": "our system overhead all right so now let's dive into the details a little bit what happens when you actually invoke a",
    "start": "373099",
    "end": "378439"
  },
  {
    "text": "function on open open wisk so the basic open list model is that every user function pair is going to be executed in",
    "start": "378439",
    "end": "385310"
  },
  {
    "text": "a distinct container now we may reuse one of those containers so a particular container may execute multiple",
    "start": "385310",
    "end": "391819"
  },
  {
    "text": "invocation multiple invitations of its unique user function pair but it will",
    "start": "391819",
    "end": "396830"
  },
  {
    "text": "only ever execute that function from that user so given this model container scheduling caching and reuse",
    "start": "396830",
    "end": "403430"
  },
  {
    "text": "are really essential for us to get the kind of performance scalability and latency response we want so I'm gonna do",
    "start": "403430",
    "end": "410150"
  },
  {
    "start": "409000",
    "end": "608000"
  },
  {
    "text": "right now is walk through the the life cycle of a user container so a request comes into the system to execute a",
    "start": "410150",
    "end": "415430"
  },
  {
    "text": "function on behalf of some user we don't have a container for that yet so we'll have to create it I refer to this as a",
    "start": "415430",
    "end": "421340"
  },
  {
    "text": "cold start because creating container can take a fairly long time all right so",
    "start": "421340",
    "end": "426380"
  },
  {
    "text": "once the container is created we can then initialize the container so an open whisk most of our but most of the",
    "start": "426380",
    "end": "432830"
  },
  {
    "text": "volumes of the invitations are actually using one of our predefined runtimes so they're using nodejs or Java or Swift",
    "start": "432830",
    "end": "438590"
  },
  {
    "text": "or go or Python or PHP they're using a language runtime and so when we're creating a container what we're doing is",
    "start": "438590",
    "end": "443600"
  },
  {
    "text": "we're creating a container that's ready to run some code in a particular programming language but it doesn't have",
    "start": "443600",
    "end": "448790"
  },
  {
    "text": "the users code in it yet so the initialization phase what we do is we inject the user's code into that container and then we call an",
    "start": "448790",
    "end": "455470"
  },
  {
    "text": "initialization function to allow the user to prepare to actually execute their functions this is where the user",
    "start": "455470",
    "end": "460520"
  },
  {
    "text": "the user code has the opportunity to pre its example create database connections they want to cache or do other kinds of",
    "start": "460520",
    "end": "466850"
  },
  {
    "text": "initialization actions they don't want to do on every function invocation now creating containers can be pretty expensive and as I said a lot of our",
    "start": "466850",
    "end": "473750"
  },
  {
    "text": "container a lot of our workload comes from one of our running one of our language one of our language runtimes",
    "start": "473750",
    "end": "481130"
  },
  {
    "text": "and so we have a notion of stem cell containers and what the system tries to do is maintain a pool of these stem cell",
    "start": "481130",
    "end": "486770"
  },
  {
    "text": "containers nodejs containers PHP containers go containers whatever the providers decided that are ready to run",
    "start": "486770",
    "end": "493700"
  },
  {
    "text": "so here the language runtime is up ready to go and all it has to happen is we have to inject the user code into it and",
    "start": "493700",
    "end": "499730"
  },
  {
    "text": "we're ready to run now whether the container was cold or pre-warmed once it's initialize the next thing to do is",
    "start": "499730",
    "end": "505010"
  },
  {
    "text": "actually run the user code so that's calling the run route on the container this invokes the user function it",
    "start": "505010",
    "end": "511190"
  },
  {
    "text": "computes it return to result and where you turn that to the user now when the function returns we actually leave the container running for",
    "start": "511190",
    "end": "517099"
  },
  {
    "text": "a small amount of time this is our grace period we're hoping to do here is within",
    "start": "517099",
    "end": "522289"
  },
  {
    "text": "this grace period is relatively short amount of time we're hoping another request from the same user for the same function comes in so we can reuse this",
    "start": "522290",
    "end": "528350"
  },
  {
    "text": "container immediately and that's our hot path so here there's no delay at all the request comes in there's already container it goes",
    "start": "528350",
    "end": "534750"
  },
  {
    "text": "after that grace period experience expires though we're gonna suspend the container and this is really really",
    "start": "534750",
    "end": "540779"
  },
  {
    "text": "related to trying to run a profitable service so our billing model for IBM cloud functions for example is we only build a",
    "start": "540779",
    "end": "547860"
  },
  {
    "text": "user for the time their function is actually running so when the container is sitting there running but the user's",
    "start": "547860",
    "end": "552990"
  },
  {
    "text": "code is exited we're not billing them for that and we're building them at about 100 100 millisecond granularities",
    "start": "552990",
    "end": "558180"
  },
  {
    "text": "so if we just left the container running for a long time without suspending it clever users would have a function that",
    "start": "558180",
    "end": "564240"
  },
  {
    "text": "came in fired off some background work and then a future invocation would that and go and harvest the results of that background work and users are clever so",
    "start": "564240",
    "end": "571319"
  },
  {
    "text": "if we didn't have the suspension capability they would definitely be doing this all right so now the",
    "start": "571319",
    "end": "576360"
  },
  {
    "text": "container suspended it sits there for a while and another request may come in at which case we resume the container and",
    "start": "576360",
    "end": "582149"
  },
  {
    "text": "this is a warm path so here we've got a container that's ready to execute the code all it has to do is be on paused",
    "start": "582149",
    "end": "588230"
  },
  {
    "text": "all right but the container may be suspended for a long time and nothing happens when that happens it's idle and it times out and",
    "start": "588230",
    "end": "595079"
  },
  {
    "text": "so we go ahead and destroy the container to make room for other can other other containers in the system so that's the",
    "start": "595079",
    "end": "600839"
  },
  {
    "text": "overview of the user container lifecycle as we go from creation through actual use to destruction",
    "start": "600839",
    "end": "608209"
  },
  {
    "start": "608000",
    "end": "824000"
  },
  {
    "text": "okay so wanted to do now is take you through the critical path of a function invocation as it comes to the system goes through our control plane executes",
    "start": "608209",
    "end": "615240"
  },
  {
    "text": "and comes back when these pictures my convention is that blue the blue blocks are part of the open list control plane",
    "start": "615240",
    "end": "620490"
  },
  {
    "text": "green boxes are the user containers okay so the function comes in a request to",
    "start": "620490",
    "end": "625980"
  },
  {
    "text": "execute function f with some parameters from some actor outside in the world the first thing it has to do in kubernetes term is go through our ingress so the",
    "start": "625980",
    "end": "632639"
  },
  {
    "text": "ingress does the SSL termination and then forwards the request to the appropriate controller the controller's",
    "start": "632639",
    "end": "638309"
  },
  {
    "text": "job as it has role has several jobs one of them is if if this is a blocking request the controllers that is the part",
    "start": "638309",
    "end": "644309"
  },
  {
    "text": "of the system that's responsible for maintaining the open to HTTP connection interval it also deals with all the",
    "start": "644309",
    "end": "649319"
  },
  {
    "text": "authentication authorization and emission control operations that need to be done to make sure that we actually want to run this function for this user",
    "start": "649319",
    "end": "655019"
  },
  {
    "text": "and finally it runs the load balancer and the job of the load balancer is to try to select the invoker component the",
    "start": "655019",
    "end": "661559"
  },
  {
    "text": "evoker instance that's actually going to handle this invocation so when you go in that go a little bit more detail so each",
    "start": "661559",
    "end": "667529"
  },
  {
    "text": "each control is responsible for signing work to a pool of invoker's and these invoker's in",
    "start": "667529",
    "end": "673320"
  },
  {
    "text": "turn each is managing a set of user containers that are in one of the lifecycle states we talked about before so I've got my controller it has a pool",
    "start": "673320",
    "end": "679709"
  },
  {
    "text": "of invoker's there are some user containers there in various states some of them are anything some of their paws some of them are white hot ready for",
    "start": "679709",
    "end": "686160"
  },
  {
    "text": "work and the goal of the load balancing algorithm is to pick an invoker to run this to minimize invocation late latency",
    "start": "686160",
    "end": "693270"
  },
  {
    "text": "maximize system throughput and hopefully find one with a warm or hot container for this particular function and user",
    "start": "693270",
    "end": "698870"
  },
  {
    "text": "now because of we need to be fault tolerant and we need to be scalable the controllers are actually replicated so",
    "start": "698870",
    "end": "704880"
  },
  {
    "text": "we have multiple controller instances that are all that are sending work to this pool of invoker's so we have some replicated state in the controller and",
    "start": "704880",
    "end": "710700"
  },
  {
    "text": "the system is fairly large so one of the challenges for our load Baloo balancing algorithm is dealing with a scale the",
    "start": "710700",
    "end": "717810"
  },
  {
    "text": "replication and rapid state change and as a result our experience has been that we actually are unable to use a",
    "start": "717810",
    "end": "723450"
  },
  {
    "text": "centralized scheduling algorithm that has actually precise information of the state of the system things are changing",
    "start": "723450",
    "end": "728700"
  },
  {
    "text": "too quickly to have the thought those controllers have an accurate view of what's going on so what occurred load current load",
    "start": "728700",
    "end": "733829"
  },
  {
    "text": "balancing algorithm does is these heuristic losses hashing a hash on the user the user and the function to pick",
    "start": "733829",
    "end": "740399"
  },
  {
    "text": "an invoker to run and it looks at the invoker queue length to try to decide if that invoker is too busy not is busy or",
    "start": "740399",
    "end": "745620"
  },
  {
    "text": "not and has a round robin around those based on this hash function and the hash function is is will try to help you hit",
    "start": "745620",
    "end": "751380"
  },
  {
    "text": "the locality and the queue length will tell prevent us from over will overloading a particular invoker but all",
    "start": "751380",
    "end": "756390"
  },
  {
    "text": "this is fairly heuristic because we can't know exactly what the state of the invoker is there too many of them and they're changing too quickly for us to",
    "start": "756390",
    "end": "762480"
  },
  {
    "text": "know that now this is a place where we do have an SPI to enable algorithmic exploration so if you want to play with",
    "start": "762480",
    "end": "768089"
  },
  {
    "text": "open wisk and you have an idea for something you think could do better you could plug it in here and try it so I encourage you to after this talk maybe",
    "start": "768089",
    "end": "773760"
  },
  {
    "text": "try that out ok so stepping back up to the flow of the function to the system once they can",
    "start": "773760",
    "end": "778920"
  },
  {
    "text": "load balancer has picked an invoker wien queue it on a row on a work queue for that invoker to pick up later and",
    "start": "778920",
    "end": "784110"
  },
  {
    "text": "there's one we use Kafka for that there's one topic for every invoker eventually the invoker will pull it off",
    "start": "784110",
    "end": "789450"
  },
  {
    "text": "there and hopefully be able to select a container already has to execute the request if not it has to create one it",
    "start": "789450",
    "end": "795630"
  },
  {
    "text": "invokes the action awaits the results once it has the result it does two things first it immediately accused that",
    "start": "795630",
    "end": "801510"
  },
  {
    "text": "back on Kafka to go back to the controller after it accuse it is then asynchronously extracts the user container logs and",
    "start": "801510",
    "end": "808230"
  },
  {
    "text": "forwards them to a logging service so we have to get the logs out but we don't have to wait for that to get the result back to the user the result flows back",
    "start": "808230",
    "end": "814649"
  },
  {
    "text": "through Kafka back to the controller and if it's a blocking request then we return the result on the open HTTP connection so that's sort of the path of",
    "start": "814649",
    "end": "821220"
  },
  {
    "text": "a function of the git as it goes in and out of the system and talked a little bit more about the invoker in particular",
    "start": "821220",
    "end": "827639"
  },
  {
    "start": "824000",
    "end": "1000000"
  },
  {
    "text": "how its how its interacting with the underlying container engine so this is another place we have an SPI it's the",
    "start": "827639",
    "end": "832800"
  },
  {
    "text": "container factory spi and what this does is it gives us a pluggable abstraction for container engines we currently have",
    "start": "832800",
    "end": "838529"
  },
  {
    "text": "three implementations of this in the open source project there's one that talks to docker one that talks with kubernetes and one that talks to mesas",
    "start": "838529",
    "end": "844350"
  },
  {
    "text": "and we deploy when we deploy open wisk on top of kubernetes we actually have the option of using either the docker",
    "start": "844350",
    "end": "850079"
  },
  {
    "text": "container factory or the kubernetes container factory I'll do now is just explain what each of those look like and",
    "start": "850079",
    "end": "855329"
  },
  {
    "text": "explain why we might want to use them okay so the docker container Factory is the simplest one in this setup we allow",
    "start": "855329",
    "end": "861750"
  },
  {
    "text": "kubernetes to schedule the pods that manage that represent the open wisk control planes all those blue boxes the",
    "start": "861750",
    "end": "867089"
  },
  {
    "text": "control or the invoker's Kafka zookeeper our other system components but not the user containers from kubernetes",
    "start": "867089",
    "end": "873930"
  },
  {
    "text": "perspective what happens here is we run the invoker and a daemon said as the daemon set on all that a worker knows",
    "start": "873930",
    "end": "879149"
  },
  {
    "text": "that whether that are labeled with the role invoker and that's the only kubernetes pod that's actually running on that node well we do that as the",
    "start": "879149",
    "end": "885540"
  },
  {
    "text": "invoker talks to the local docker demon on that node and does all the container operations for us so as far as kubernetes kids can learn there's just",
    "start": "885540",
    "end": "891420"
  },
  {
    "text": "one thing running here and we've tainted the node and the containers to prevent anything else from going there and then",
    "start": "891420",
    "end": "896610"
  },
  {
    "text": "the invoker talks to docker does all the Creator operations talk to the user containers to initialize and run them ok",
    "start": "896610",
    "end": "903360"
  },
  {
    "text": "so that's not incredibly Kubb friendly hube native but it's a way of making things work and it has some reasonable",
    "start": "903360",
    "end": "908579"
  },
  {
    "text": "performance characteristics which I'll talk about in a little bit a second alternative which you've been exploring is the kubernetes container Factory this",
    "start": "908579",
    "end": "915329"
  },
  {
    "text": "is a much more kubernetes centric approach to run approach to running open wisk what we do here is now we're",
    "start": "915329",
    "end": "921000"
  },
  {
    "text": "running the investments smaller number of invoker's much smaller than there are worker nodes we deploy those as a",
    "start": "921000",
    "end": "926129"
  },
  {
    "text": "stateful set the invoker stalks the kubernetes scheduler to actually create and destroy the pods the user containers",
    "start": "926129",
    "end": "931529"
  },
  {
    "text": "so now our user containers or proper pods they can run on any worker node whose role is invoker and so now we can",
    "start": "931529",
    "end": "940770"
  },
  {
    "text": "have an invoker managing pods managing user containers that are scattered across multiple nodes in the system so",
    "start": "940770",
    "end": "946530"
  },
  {
    "text": "early we can the invoker can have a much larger pool of containers and it calls unit run thing there's one problem with",
    "start": "946530",
    "end": "952710"
  },
  {
    "text": "this picture if you noticed so kubernetes doesn't have any notion of suspending a pod all right so what I've",
    "start": "952710",
    "end": "957840"
  },
  {
    "text": "lost now is have lost my ability to stop people from stealing from me and that's not so great if I'm going to actually",
    "start": "957840",
    "end": "963420"
  },
  {
    "text": "try to run this for a profit so we get around that is we add this notion of invoker agents",
    "start": "963420",
    "end": "969030"
  },
  {
    "text": "so the invoker agents or daemon said it's a small program written and go it runs on each of these worker nodes",
    "start": "969030",
    "end": "974460"
  },
  {
    "text": "and it all the Anoka agent does is it actually does the suspend and resume operation so when invoker needs to",
    "start": "974460",
    "end": "980460"
  },
  {
    "text": "suspend to resume a user container it talks the invoker agent on the appropriate worker node which talks the",
    "start": "980460",
    "end": "985980"
  },
  {
    "text": "docker and suspends the container and it also efficiency we also when we have the",
    "start": "985980",
    "end": "991680"
  },
  {
    "text": "invoker agents running we can also use them to extract the user container logs directly from the local file system",
    "start": "991680",
    "end": "997020"
  },
  {
    "text": "without having to go through the Cooper Nettie's api's okay so that's the three",
    "start": "997020",
    "end": "1002090"
  },
  {
    "start": "1000000",
    "end": "1075000"
  },
  {
    "text": "different options for the container factories what I want to do now is talk a little bit about this present some experimental results sort of look at the",
    "start": "1002090",
    "end": "1007880"
  },
  {
    "text": "performance trade-off of these three options and the goal is not to sort of say that is it's just to understand the",
    "start": "1007880",
    "end": "1014120"
  },
  {
    "text": "current performance of our container factory implementations particularly to understand the cold start latency what",
    "start": "1014120",
    "end": "1019400"
  },
  {
    "text": "do these different container factories what does it do for that what's our warm and hot breeze lilies and see so what happens when I can reuse",
    "start": "1019400",
    "end": "1025579"
  },
  {
    "text": "the container and are there any throughput effort differences between them and if so why so these experiments",
    "start": "1025580",
    "end": "1031040"
  },
  {
    "text": "are done in a pretty small cluster it's a kubernetes 1.8 cluster with 13 nodes I have 10 invoker's two nodes that",
    "start": "1031040",
    "end": "1037610"
  },
  {
    "text": "are dedicated to run my blue boxes my control plane and one know that I use for a load driver and what that load",
    "start": "1037610",
    "end": "1042860"
  },
  {
    "text": "driver by having the load driver as part of the cluster I can eliminate any kind of external Network variability than a",
    "start": "1042860",
    "end": "1048110"
  },
  {
    "text": "driving load from them or my laptop so for all the all the experiments I'm gonna measure the full path starting",
    "start": "1048110",
    "end": "1053660"
  },
  {
    "text": "with the ingress going all the way through the through the through the flow so ingress controller Kafka and Volker",
    "start": "1053660",
    "end": "1059960"
  },
  {
    "text": "Kafka controller back out that's that's what the path we're going to measure but",
    "start": "1059960",
    "end": "1065270"
  },
  {
    "text": "we're gonna use trivial no op actions because we're really looking at here is trying to understand the system over how low can we go how fast can we go and",
    "start": "1065270",
    "end": "1071850"
  },
  {
    "text": "what gets in the way okay so first talk about latency results",
    "start": "1071850",
    "end": "1077220"
  },
  {
    "start": "1075000",
    "end": "1223000"
  },
  {
    "text": "so here the first set of leads the first set of results we're going to do is we're going to invoke a blocking",
    "start": "1077220",
    "end": "1082620"
  },
  {
    "text": "function one of the time this is the only thing that's happening on the clusters this is an extremely optimal situation all we're doing is invoking",
    "start": "1082620",
    "end": "1089370"
  },
  {
    "text": "one function again and again and again 10,000 times in a row and measuring what the end and latency is it's perceived by",
    "start": "1089370",
    "end": "1095580"
  },
  {
    "text": "the user in in milliseconds and there's several things to look at here so the",
    "start": "1095580",
    "end": "1100620"
  },
  {
    "text": "first scenario to look at is the cold start numbers and so to get these what I did is I disabled all of our container",
    "start": "1100620",
    "end": "1105960"
  },
  {
    "text": "reusing reuse mechanisms so every time the container comes in a request comes in we have to create a container alright",
    "start": "1105960",
    "end": "1112800"
  },
  {
    "text": "and we can see here there's a huge difference between using the docker container factory and the kubernetes container factory and this is the reason",
    "start": "1112800",
    "end": "1119340"
  },
  {
    "text": "why we're as we're going forward to putting things into production in the first round of this we're really looking at the using the docker container",
    "start": "1119340",
    "end": "1125280"
  },
  {
    "text": "Factory a 3x hit on cold start latency even with all the caching we do and as",
    "start": "1125280",
    "end": "1130950"
  },
  {
    "text": "good as the cache is this is a big hit to take so it's 700 milliseconds versus over 2 seconds and none of this is",
    "start": "1130950",
    "end": "1137640"
  },
  {
    "text": "docker full-time in this experiment the docker image is already on the worker node this is at the time it takes to",
    "start": "1137640",
    "end": "1142770"
  },
  {
    "text": "create the container and get it up and ready and responding so we can talk to it a second set of the things to look at",
    "start": "1142770",
    "end": "1149370"
  },
  {
    "text": "is why is container use so important so here if we have a warm container and",
    "start": "1149370",
    "end": "1154830"
  },
  {
    "text": "we're using the docker container factory our end and response time for this trivial action is 7 milliseconds all the",
    "start": "1154830",
    "end": "1160710"
  },
  {
    "text": "way through our control plane and back in 7 milliseconds using the docker container Factory",
    "start": "1160710",
    "end": "1165840"
  },
  {
    "text": "now surprisingly with the kubernetes container factory it's actually slower and this doesn't make a lot of sense initially we had to dig into it fine to",
    "start": "1165840",
    "end": "1172710"
  },
  {
    "text": "find out why because if you think about this where we're using the containers the container Factory the kubernetes",
    "start": "1172710",
    "end": "1177900"
  },
  {
    "text": "container Factory is not really involved in this path except for one thing and this in the kubernetes mother and the",
    "start": "1177900",
    "end": "1183690"
  },
  {
    "text": "second configuration here the kubernetes container Factory is actually extracting the user logs for us versus in the",
    "start": "1183690",
    "end": "1189810"
  },
  {
    "text": "invoker agent where it's not and what's happening here is even though the log",
    "start": "1189810",
    "end": "1195090"
  },
  {
    "text": "processes processing is asynchronous we push it off the off the path it takes a really long time for kubernetes to get",
    "start": "1195090",
    "end": "1201060"
  },
  {
    "text": "those logs out of that container and from the invoker to processes of and forward them and so the load balancer thinks the container is idle the answers",
    "start": "1201060",
    "end": "1207430"
  },
  {
    "text": "come back it thinks it can reuse that that invoker in that container again but it's still loaded down extracting lodge",
    "start": "1207430",
    "end": "1212860"
  },
  {
    "text": "from the last 10 and functional vacations that have come to that container so that's something that could be fixed by modeling in our load",
    "start": "1212860",
    "end": "1217990"
  },
  {
    "text": "balancer or ideally could be fixed by improving our log extraction or kubernetes log extraction capabilities",
    "start": "1217990",
    "end": "1223770"
  },
  {
    "start": "1223000",
    "end": "1256000"
  },
  {
    "text": "okay the second thing I want to look at is throughput results and so here the workload is slightly different or again",
    "start": "1223770",
    "end": "1228820"
  },
  {
    "text": "running no op actions what we're doing this time is running as many non-blocking implications of this",
    "start": "1228820",
    "end": "1233950"
  },
  {
    "text": "trivial action as we can on the system and so I'm showing normalized throughput we're higher is better so we have one",
    "start": "1233950",
    "end": "1239980"
  },
  {
    "text": "and things less than one and here again the kubernetes the two kubernetes container factories do slightly worse",
    "start": "1239980",
    "end": "1245590"
  },
  {
    "text": "than the docker container Factory and this is primarily due to the higher light to the log-log extraction latency",
    "start": "1245590",
    "end": "1251350"
  },
  {
    "text": "preventing container use loading down the system and reducing overall throughput so the key takeaways from",
    "start": "1251350",
    "end": "1258250"
  },
  {
    "start": "1256000",
    "end": "1294000"
  },
  {
    "text": "this first of all you know the higher cold-start cost you matter to us our caching is fairly effective but even if",
    "start": "1258250",
    "end": "1264670"
  },
  {
    "text": "it you know if we're gonna have something cold starts we care and we want to make this as short as possible and there's a real latency impact for",
    "start": "1264670",
    "end": "1271390"
  },
  {
    "text": "those for short running function and the second thing which was surprised to me is that this log extraction path",
    "start": "1271390",
    "end": "1276550"
  },
  {
    "text": "actually mattered a lot so we have some work going on now to try to understand how to better optimize our log extraction and our logging architecture",
    "start": "1276550",
    "end": "1282460"
  },
  {
    "text": "on kubernetes to try to get rid of that problems we really want to be able to use the kubernetes container Factory to take advantage with a much larger",
    "start": "1282460",
    "end": "1288160"
  },
  {
    "text": "pool of containers that could be managed by the invoker and also to fit more naturally into the cluster scheduling",
    "start": "1288160",
    "end": "1294030"
  },
  {
    "start": "1294000",
    "end": "1307000"
  },
  {
    "text": "okay so that's sort of our dive through how they open wisk core works and how we they're this hot path of invoking",
    "start": "1294030",
    "end": "1299980"
  },
  {
    "text": "functions all I do now is shift gears and talk about serverless composition of serverless functions and and give you a",
    "start": "1299980",
    "end": "1305980"
  },
  {
    "text": "taste of that and so this is a project that's being driven out of research and research we like to dream big it's what",
    "start": "1305980",
    "end": "1311530"
  },
  {
    "start": "1307000",
    "end": "1334000"
  },
  {
    "text": "really trying to do here is rethinking the entire cloud programming experience for the developer we're coming out of",
    "start": "1311530",
    "end": "1316840"
  },
  {
    "text": "thinking about we're really we're programming a cloud computer can we make this thing look more like a computer for",
    "start": "1316840",
    "end": "1322540"
  },
  {
    "text": "the programmer can we build a computer like facade over this distributed system and do this by just writing factual",
    "start": "1322540",
    "end": "1328330"
  },
  {
    "text": "programs in ways that programmers know how to write them and have good tools to make this be available to help us",
    "start": "1328330",
    "end": "1333570"
  },
  {
    "text": "alright so I'm gonna do now is I'm going to a demo and I'm going to use a little",
    "start": "1333570",
    "end": "1338890"
  },
  {
    "start": "1334000",
    "end": "1373000"
  },
  {
    "text": "sample program that we use to do this and this is something that we use so the",
    "start": "1338890",
    "end": "1343900"
  },
  {
    "text": "idea here is I'm a developer I'm doing pull requests I they go into Travis CI",
    "start": "1343900",
    "end": "1348940"
  },
  {
    "text": "test run unfortunately tests take a while and eventually they finish but by then I've gotten distracted and I've",
    "start": "1348940",
    "end": "1354250"
  },
  {
    "text": "forgotten they've run and so it this year is this is a pipeline that takes a Travis webhook runs it through a bunch",
    "start": "1354250",
    "end": "1359440"
  },
  {
    "text": "of service functions to process that web book I get some information about it and then post the results of my tests to",
    "start": "1359440",
    "end": "1365049"
  },
  {
    "text": "slack to tell me hey that test you submitted half an hour ago you should go look at it now right and this is all up",
    "start": "1365049",
    "end": "1370419"
  },
  {
    "text": "on github if you want to look at this Travis a slack example alright so now what get out of here and get into the",
    "start": "1370419",
    "end": "1376419"
  },
  {
    "text": "demo alright so first of all so I have mini cube running on my laptop here and on that I've deployed open Wisc using my",
    "start": "1376419",
    "end": "1382480"
  },
  {
    "text": "home schardt so I can do helm status demo and there it is it's running and we",
    "start": "1382480",
    "end": "1390820"
  },
  {
    "text": "can see what pubs are are alright so there's the control plane pods the",
    "start": "1390820",
    "end": "1396159"
  },
  {
    "text": "controller the cat the database the invoker and so on alright so now we're going to do is we're going to bring up",
    "start": "1396159",
    "end": "1401740"
  },
  {
    "text": "shell this is our function shell and I remember to make this font bigger for",
    "start": "1401740",
    "end": "1406840"
  },
  {
    "text": "you alright so the first thing we do is let's make sure this is working by creating a Hello action so we'll do",
    "start": "1406840",
    "end": "1411880"
  },
  {
    "text": "action create hello okay so there's the",
    "start": "1411880",
    "end": "1420220"
  },
  {
    "text": "action we created now we can do action and folk hello",
    "start": "1420220",
    "end": "1425490"
  },
  {
    "text": "tada welcome to coop gun alright so it ran the action and we got that answer back it's one thing that's kind of a",
    "start": "1425490",
    "end": "1433210"
  },
  {
    "text": "kind of useful as a debugging tool so now I'm in this shell this is an electron based application I'm looking at my deployed function I can actually",
    "start": "1433210",
    "end": "1439360"
  },
  {
    "text": "edit this here alright I can hit the lip unlock button now I'm in edit mode editing my deployed code so I can say",
    "start": "1439360",
    "end": "1447730"
  },
  {
    "text": "this is live if I can spell live ok so",
    "start": "1447730",
    "end": "1454149"
  },
  {
    "text": "now we'll deploy that and if we run it we should get a different message this",
    "start": "1454149",
    "end": "1459309"
  },
  {
    "text": "time tada all right so this is a it's this is a useful way to sort of to get in and do",
    "start": "1459309",
    "end": "1465520"
  },
  {
    "text": "quick debugging for things alright so now for the I'm gonna do is shift to a slightly 2vs",
    "start": "1465520",
    "end": "1473210"
  },
  {
    "text": "code because we're gonna look at a more interesting example in particular we're gonna look at this composition and there",
    "start": "1473210",
    "end": "1481850"
  },
  {
    "text": "we go it's good things lined up so this is my Travis's slack pipeline the picture on the right over here is a",
    "start": "1481850",
    "end": "1487490"
  },
  {
    "start": "1483000",
    "end": "1898000"
  },
  {
    "text": "visualization of the pipeline is produced by shell in a couple minutes we're going to load this app in the shell and like to see this visualization live and over here on the left is the",
    "start": "1487490",
    "end": "1494690"
  },
  {
    "text": "code so we've written this composition this is in a JavaScript library that lets us talk about they lets us use",
    "start": "1494690",
    "end": "1501380"
  },
  {
    "text": "familiar constructs to build out this composition so here's my pipeline here and there's several things to notice about this first of all I can have local",
    "start": "1501380",
    "end": "1507440"
  },
  {
    "text": "variables so I can declare a variable and then I can use that to cache intermediate results in this pipeline and use the multiple times I have a",
    "start": "1507440",
    "end": "1514970"
  },
  {
    "text": "sequence I'm composing a whole bunch of action so each one of these lines is an action some of these are defined",
    "start": "1514970",
    "end": "1520490"
  },
  {
    "text": "externally so these are functions we're gonna define in a couple of minutes some of them are just pieces of inline javascript code and some of them can",
    "start": "1520490",
    "end": "1527210"
  },
  {
    "text": "even be function so here this this this particular composition allows me to either get the authors like information",
    "start": "1527210",
    "end": "1533929"
  },
  {
    "text": "from a database or from a local JSON file for debugging so at deploy time when I'm deploying",
    "start": "1533929",
    "end": "1539720"
  },
  {
    "text": "this composition I this JavaScript code to build up my deployment artifact we",
    "start": "1539720",
    "end": "1545299"
  },
  {
    "text": "can get in here that we run this get author slack information and depending on the value of this environment variable will either connect to a",
    "start": "1545299",
    "end": "1550820"
  },
  {
    "text": "database or we connect to a local JSON file a couple other things to see in here so one is so that we have one of",
    "start": "1550820",
    "end": "1558650"
  },
  {
    "text": "the uses of these inline functions is my my information coming in here this p has",
    "start": "1558650",
    "end": "1564830"
  },
  {
    "text": "an author name in it it could be in any case at all my database wants it to be uppercase so I can write a quick little",
    "start": "1564830",
    "end": "1569929"
  },
  {
    "text": "inline function in JavaScript here that goes ahead and converts that from loop from whatever case it's in to uppercase I also try catch blocks so here I've got",
    "start": "1569929",
    "end": "1578090"
  },
  {
    "text": "a try-catch block in this line here and what I'm gonna do is I'm gonna read in the database now if the author isn't",
    "start": "1578090",
    "end": "1584210"
  },
  {
    "text": "hasn't subscribed to slack notification so they don't want to be bothered by every time there's a slack request this",
    "start": "1584210",
    "end": "1590090"
  },
  {
    "text": "lookup will fail I'll get an exception but I'll catch that in the catch block you just turn that into an empty dictionary done no need to write fancy",
    "start": "1590090",
    "end": "1596570"
  },
  {
    "text": "code just return that to the to the net to the there is the pipe line and now we know that the author isn't there",
    "start": "1596570",
    "end": "1602530"
  },
  {
    "text": "okay so that's the app so I'm going to do now is go ahead and create this app",
    "start": "1602530",
    "end": "1610890"
  },
  {
    "text": "will call it notify charge the Select",
    "start": "1610890",
    "end": "1616540"
  },
  {
    "text": "fjs okay there it is so here's the",
    "start": "1616540",
    "end": "1624310"
  },
  {
    "text": "visualization and it's helpfully telling me hey by the way you haven't deployed these actions yet so rather than forcing",
    "start": "1624310",
    "end": "1630820"
  },
  {
    "text": "you to watch me type that I'm going to run a script that will deploy them for me okay so now if we do oh yeah I need",
    "start": "1630820",
    "end": "1641470"
  },
  {
    "text": "to put that in the background so it'll actually run now if we looked at the set",
    "start": "1641470",
    "end": "1646690"
  },
  {
    "text": "of actions those actions are there all right so now we can actually try to run this so we can do app okay this should",
    "start": "1646690",
    "end": "1671320"
  },
  {
    "text": "take about five seconds or so hopefully and I should get a slack notification that this happened and it didn't work",
    "start": "1671320",
    "end": "1679170"
  },
  {
    "text": "what happened all right so what happens we can look at the session flow oh no it",
    "start": "1679170",
    "end": "1684640"
  },
  {
    "text": "did work it just didn't right here's my new slack notification but it didn't show up on my window over here I know if it showed up",
    "start": "1684640",
    "end": "1690790"
  },
  {
    "text": "on yours or not this may be an artifact of being in screen show mode all right",
    "start": "1690790",
    "end": "1696130"
  },
  {
    "text": "so here's the session flow so this is showing that here's my pipeline the things are dark blue because it actually ran if we hover over any of these we can",
    "start": "1696130",
    "end": "1703600"
  },
  {
    "text": "actually see what the values were we can dive in to look at them go back to the app visualization all right we can still",
    "start": "1703600",
    "end": "1711760"
  },
  {
    "text": "get the results of this and why there okay there we go get my session flip",
    "start": "1711760",
    "end": "1723540"
  },
  {
    "text": "we also have a traceview so here we can look and see a timeline of the the",
    "start": "1723540",
    "end": "1729420"
  },
  {
    "text": "execution of this so the overall thing took six point four seconds we can looked at various actions the shading here indicates the shaded the the hash",
    "start": "1729420",
    "end": "1736860"
  },
  {
    "text": "part is the initialization the solid part is the actual execution of it we",
    "start": "1736860",
    "end": "1742950"
  },
  {
    "text": "can look down to go down and look at that alright well this is pretty cool but as I said some authors don't",
    "start": "1742950",
    "end": "1748110"
  },
  {
    "text": "actually some some people don't actually care about this and we've done all this computing to generate a notification that nobody cares about that seems like",
    "start": "1748110",
    "end": "1755010"
  },
  {
    "text": "a natural thing to fix with some control flow so let me find vs code again alright so we to now is gonna go here go",
    "start": "1755010",
    "end": "1761250"
  },
  {
    "text": "in here and basically short-circuit this is out so we can say composer alright so",
    "start": "1761250",
    "end": "1771330"
  },
  {
    "text": "we're going to put an if then else in here and we're going to say we don't really need a parameter for this because",
    "start": "1771330",
    "end": "1776550"
  },
  {
    "text": "we have things in our local variable so if author slack info user ID alright so",
    "start": "1776550",
    "end": "1789240"
  },
  {
    "text": "now I need an a block and the way we get a block in composers we create a sequence we put the rest of our code in",
    "start": "1789240",
    "end": "1798540"
  },
  {
    "text": "there and this is just plain all JavaScript code vs code understands it so we can indent it we're done we can",
    "start": "1798540",
    "end": "1805590"
  },
  {
    "text": "save it go back to here one VOC it again",
    "start": "1805590",
    "end": "1811020"
  },
  {
    "text": "and hopefully and this is this is a this should actually go through and the slack",
    "start": "1811020",
    "end": "1818580"
  },
  {
    "text": "window didn't pop up but if you look down in here what did it do oh a deploy",
    "start": "1818580",
    "end": "1826680"
  },
  {
    "text": "right it wasn't a I needed to play it thanks Lily alright I need to say app deploy notify that's the slack no app",
    "start": "1826680",
    "end": "1838830"
  },
  {
    "text": "sorry app update",
    "start": "1838830",
    "end": "1842390"
  },
  {
    "text": "okay good now my flow diagram has changed is that too useful cuz I actually expected it",
    "start": "1852360",
    "end": "1857650"
  },
  {
    "text": "exchanged and so if we invoke it this time I think it's again gonna fail to",
    "start": "1857650",
    "end": "1864580"
  },
  {
    "text": "pop up but now if we look at the session flow it went down this path and now I",
    "start": "1864580",
    "end": "1871030"
  },
  {
    "text": "also have a second sample file for someone who doesn't care about this and so that happened almost immediately",
    "start": "1871030",
    "end": "1876760"
  },
  {
    "text": "because if we look at the session flow what happened here is we came into the first few steps we hit that if and we didn't bother doing the computing to",
    "start": "1876760",
    "end": "1882940"
  },
  {
    "text": "actually generate the slack message for them okay and again we can look at the trace and see what happened and all that",
    "start": "1882940",
    "end": "1889720"
  },
  {
    "text": "alright so that's the end of the demo and I'm going to do now is shift back to the PowerPoint and kind of wrap up the",
    "start": "1889720",
    "end": "1895390"
  },
  {
    "text": "talk okay so hopefully that I've shown",
    "start": "1895390",
    "end": "1901810"
  },
  {
    "text": "you it's a little piece of our sort of vision for how we can make a more computer like programming environment",
    "start": "1901810",
    "end": "1907300"
  },
  {
    "text": "from the cloud we saw we had a desktop development environment that lets me use",
    "start": "1907300",
    "end": "1912880"
  },
  {
    "text": "either my own editors or its built-in editor I can quickly edit code that's that's been deployed on the couch cloud",
    "start": "1912880",
    "end": "1918550"
  },
  {
    "text": "and redeploy it so I can just like I changed that a little hello message and the first thing I could stick in a login",
    "start": "1918550",
    "end": "1924700"
  },
  {
    "text": "printf and redeploy almost instantly with composer I have a library written in a familiar language that lets that",
    "start": "1924700",
    "end": "1931510"
  },
  {
    "text": "lets me have variables control structures if-then-else try-catch loops and so on and use those",
    "start": "1931510",
    "end": "1938560"
  },
  {
    "text": "to actually build a distributed program that's running across a polyglot set of applications so I forgot to mention this",
    "start": "1938560",
    "end": "1945130"
  },
  {
    "text": "but you know I was using javascript and composer but I was invoking actions or written in Python and JavaScript so",
    "start": "1945130",
    "end": "1950500"
  },
  {
    "text": "there's not another restriction that about what the actual functions have to be written in with shell we have this",
    "start": "1950500",
    "end": "1955960"
  },
  {
    "text": "tooling that runs locally on your machine and gives you a real compelling environment it has visualizations to",
    "start": "1955960",
    "end": "1961270"
  },
  {
    "text": "support what you're doing but it also really smoothly integrates into the connect command line environment with your code editors and just your normal",
    "start": "1961270",
    "end": "1966910"
  },
  {
    "text": "workflow in terms of to wrap up with ongoing work around open wissen",
    "start": "1966910",
    "end": "1972340"
  },
  {
    "start": "1969000",
    "end": "2038000"
  },
  {
    "text": "kubernetes we're doing a lot of work looking at scalability and performance sort of are in the process of taking IBM",
    "start": "1972340",
    "end": "1977919"
  },
  {
    "text": "functions and moving that to be on top of kubernetes we're actively working on",
    "start": "1977919",
    "end": "1983409"
  },
  {
    "text": "some enhancement of the kubernetes container factory based invoker along with partners at Red Hat who are really driving some of that work with their red",
    "start": "1983409",
    "end": "1988779"
  },
  {
    "text": "with their open chef work looking at larger container pools more option for scheduling and caching policies and",
    "start": "1988779",
    "end": "1994179"
  },
  {
    "text": "really trying to get them a fuller integration with the kubernetes scheduler we'd like to do a better job of exploiting kubernetes deployment and",
    "start": "1994179",
    "end": "2000659"
  },
  {
    "text": "management capabilities to actually simplify the the task of operating open wisk and one thing I've been looking at",
    "start": "2000659",
    "end": "2007139"
  },
  {
    "text": "personally is looking for a smoother developer transition between function and service and kubernetes deployed micro services so once we have",
    "start": "2007139",
    "end": "2013109"
  },
  {
    "text": "everything open west granny on top recruitment at ease there doesn't really need to be a sharp distinction between what's a function and what's a container",
    "start": "2013109",
    "end": "2019109"
  },
  {
    "text": "and what's a micro service and sort of trying to blend that together to make it easier for the developer to go back and forth between those opposed are in shell",
    "start": "2019109",
    "end": "2025830"
  },
  {
    "text": "we're really excited about this we think this is potentially a major step in the evolution of the curve at about cloud",
    "start": "2025830",
    "end": "2031559"
  },
  {
    "text": "developer experience there's a lot of active research going on there and development and all and so on in terms",
    "start": "2031559",
    "end": "2038759"
  },
  {
    "text": "of you know just to wrap up I'd like to encourage people to try to get involved with this everything I've shown you today is open source open wisk is",
    "start": "2038759",
    "end": "2045419"
  },
  {
    "text": "obviously but also Composer and shell are as well and so here's some URLs for web pages and github x' and slacks if",
    "start": "2045419",
    "end": "2051480"
  },
  {
    "text": "you're interested in anything that we've shown today so thank you very much and I'll be happy to take any questions if people have them",
    "start": "2051480",
    "end": "2058908"
  },
  {
    "text": "[Applause]",
    "start": "2059250",
    "end": "2063760"
  }
]