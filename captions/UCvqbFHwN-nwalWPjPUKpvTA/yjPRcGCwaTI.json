[
  {
    "text": "my name is Kyle Brown I'm an engineer at single store and today I'm going to talk to you about package transparency and",
    "start": "120",
    "end": "5940"
  },
  {
    "text": "webassembly registries to a brief overview of the talk structure we're going to begin by",
    "start": "5940",
    "end": "11280"
  },
  {
    "text": "explaining what webassembly commonly abbreviated as wasm even is then we're going to step back and ask",
    "start": "11280",
    "end": "18300"
  },
  {
    "text": "the question what is a package registry and what kind of package registry that webassembly needs I want to propose a",
    "start": "18300",
    "end": "24119"
  },
  {
    "text": "simple if maybe somewhat surprising answer then we'll talk about applying some ideas from certificate transparency to",
    "start": "24119",
    "end": "31080"
  },
  {
    "text": "package registries talk about package transparency itself this term created by combining the two",
    "start": "31080",
    "end": "37620"
  },
  {
    "text": "and Warg a protocol implementing it and wrap up by showing how the properties of",
    "start": "37620",
    "end": "42660"
  },
  {
    "text": "package transparency help us mitigate different kinds of attacks",
    "start": "42660",
    "end": "48200"
  },
  {
    "text": "so jumping in to webassembly what is webassembly well the simplest way that",
    "start": "48480",
    "end": "54120"
  },
  {
    "text": "we can really explain it is that webassembly is a platform agnostic compile Target or in other words it's something that you compile programs to",
    "start": "54120",
    "end": "61020"
  },
  {
    "text": "you could write it by hand but you're not likely to write a lot of by hand for the same reason you don't write a lot of machine code by hand right it's ergonaut",
    "start": "61020",
    "end": "66659"
  },
  {
    "text": "it's not very ergonomic it's very low level Instead at the moment you're likely to create web assembly by compiling well-supported languages like",
    "start": "66659",
    "end": "73439"
  },
  {
    "text": "rust and C plus plus to wasm and these sort of got support earlier than a lot",
    "start": "73439",
    "end": "78479"
  },
  {
    "text": "of other languages because they do their own memory management they're very low level you don't have to bring along an interpreter there's sort of the simpler",
    "start": "78479",
    "end": "84659"
  },
  {
    "text": "side of the problem of building webassembly modules with that said work",
    "start": "84659",
    "end": "90000"
  },
  {
    "text": "is in progress for a variety of other languages and we're working on solving sort of The Interpreter problem and",
    "start": "90000",
    "end": "95100"
  },
  {
    "text": "there's different options for handling garbage collection whether walls and modules bring garbage collection with them or they use a runtime facility for",
    "start": "95100",
    "end": "102479"
  },
  {
    "text": "doing that for a little bit of History wasm was a web technology was created in the web",
    "start": "102479",
    "end": "108000"
  },
  {
    "text": "that's why it's called Web assembly after all and it became a w3c standard in 2019",
    "start": "108000",
    "end": "114180"
  },
  {
    "text": "even before then back to 2017 it was supported in all the major browsers so it's been out there for a few years now",
    "start": "114180",
    "end": "121979"
  },
  {
    "text": "despite being a web technology being something that came from the web is supported in browsers it isn't just a",
    "start": "121979",
    "end": "128520"
  },
  {
    "text": "web technology it's not just for the web it has these other these valuable properties that were created for the web",
    "start": "128520",
    "end": "134760"
  },
  {
    "text": "that everybody else kind of wants to believe it or not you know the portability that it needed to run in all",
    "start": "134760",
    "end": "140280"
  },
  {
    "text": "the major browsers on a wide variety of systems is useful no matter where you're trying to deploy your applications portability is great you need to be fast",
    "start": "140280",
    "end": "147000"
  },
  {
    "text": "to run in the web we expect for example out of a web page really low latencies with them to load quickly really we",
    "start": "147000",
    "end": "153239"
  },
  {
    "text": "should hope expect that more um and so as a result wasm has a really low startup latency in fact you can",
    "start": "153239",
    "end": "159720"
  },
  {
    "text": "actually start compiling wasm before you've even finished downloading it all using streaming compilation it's gonna",
    "start": "159720",
    "end": "165360"
  },
  {
    "text": "do code generation validation sequentially it's also capable of near native",
    "start": "165360",
    "end": "171000"
  },
  {
    "text": "performance think within about 20 to 30 percent of native so there's a wide variety of applications that are capable of running in this kind of environment",
    "start": "171000",
    "end": "177239"
  },
  {
    "text": "that maybe you wouldn't want to run in per se JavaScript on the security side to run the browser",
    "start": "177239",
    "end": "183780"
  },
  {
    "text": "it needed to you couldn't have ambient authority to the entire user's permissions right these needed to be sandboxed in some way and so Walzem does",
    "start": "183780",
    "end": "190379"
  },
  {
    "text": "that by being capability safe which you can just think of as you know webassembly modules can only do the things they've been given permission to",
    "start": "190379",
    "end": "196440"
  },
  {
    "text": "do you feel like actually give and you satisfy an import buying some capability to them for them to be able to call something and additionally they have",
    "start": "196440",
    "end": "203819"
  },
  {
    "text": "sandboxing each wasm's linear memory is independent from any other ones and a web assembly module can't call out and",
    "start": "203819",
    "end": "209879"
  },
  {
    "text": "access a linear memory that it hasn't been given um and so for all these different",
    "start": "209879",
    "end": "215099"
  },
  {
    "text": "reasons you could sort of imagine why people would want to use somebody outside the browser the company I work for a single store uses webassembly for",
    "start": "215099",
    "end": "221760"
  },
  {
    "text": "database extensibility we let you know customers compile their code to webassembly and run it in process in the",
    "start": "221760",
    "end": "227940"
  },
  {
    "text": "database as a user-defined function companies like cosmonic are using it to create distributed application systems",
    "start": "227940",
    "end": "234420"
  },
  {
    "text": "fastly is using it for Edge computing fermion is using it for service runtimes and platforms",
    "start": "234420",
    "end": "240180"
  },
  {
    "text": "Shopify is using it for plugins and extensibility and Microsoft in addition to the Blazer project was about running",
    "start": "240180",
    "end": "246840"
  },
  {
    "text": "webassembly in the browser.net style also supports running Wazi modules in its Azure kubernetes service",
    "start": "246840",
    "end": "254900"
  },
  {
    "text": "all six of these companies and many others are part of the bytecode alliance a non-profit Foundation working on",
    "start": "255060",
    "end": "260639"
  },
  {
    "text": "implementations of these Open Standards to help mature and Advance the ecosystem and the sort of webassembly that we're",
    "start": "260639",
    "end": "267540"
  },
  {
    "text": "all creating that's going outside the browser needs to be composed shared and deployed in a bunch of different",
    "start": "267540",
    "end": "272699"
  },
  {
    "text": "environments and to do that we really need our package registry we really need somewhere to publish your wasms and pull",
    "start": "272699",
    "end": "279120"
  },
  {
    "text": "them down and that's part that's something you can interact with at build time as you're compiling and also maybe",
    "start": "279120",
    "end": "284400"
  },
  {
    "text": "at deploy time and when we're creating this registry we",
    "start": "284400",
    "end": "289860"
  },
  {
    "text": "really want it to be as secure as webassembly itself if webassembly you know has these really nice isolated properties and capability safety but you",
    "start": "289860",
    "end": "296880"
  },
  {
    "text": "deploy it in securely then you sort of lose all the advantages you know you wouldn't want to secure a vault with a",
    "start": "296880",
    "end": "304020"
  },
  {
    "text": "Cheeto per se so stepping back now we've said that",
    "start": "304020",
    "end": "309120"
  },
  {
    "text": "websally needs a package registry what is a package registry what's this thing that webassembly needs at a more sort of",
    "start": "309120",
    "end": "314400"
  },
  {
    "text": "abstract level the main role of package registry sort of as the in the kind of packages we're",
    "start": "314400",
    "end": "320460"
  },
  {
    "text": "talking about because there's diverse kinds of Registries out there really its main job is to delegate names like",
    "start": "320460",
    "end": "326100"
  },
  {
    "text": "you're now the owner of leftpad I've given you permission over left pad to package owners who then use that permission to publish",
    "start": "326100",
    "end": "333180"
  },
  {
    "text": "releases that are versioned of those packages so put a different way a registry is",
    "start": "333180",
    "end": "339900"
  },
  {
    "text": "really just an index it's a mapping from the name and version of a package to what's there to the digest of the",
    "start": "339900",
    "end": "345539"
  },
  {
    "text": "package contents and it has some special rules about how it gets updated so fundamentally this kind of registry",
    "start": "345539",
    "end": "352259"
  },
  {
    "text": "that's this mapping of names and versions to contents has to own the metadative packages it has to be the",
    "start": "352259",
    "end": "357479"
  },
  {
    "text": "sort of authoritative place where that info lives that you can establish the mapping between things and their contents but fundamentally it doesn't",
    "start": "357479",
    "end": "364139"
  },
  {
    "text": "actually have to be the thing that does the content storing well you can actually store the content in a",
    "start": "364139",
    "end": "369840"
  },
  {
    "text": "self-hosted you know location that's with the registry you could also defer to a CDN use an existing oci registry or",
    "start": "369840",
    "end": "376620"
  },
  {
    "text": "any sort of third party content mirror to deliver the content and since you already know what hash you're expecting you can validate that you got the right",
    "start": "376620",
    "end": "383340"
  },
  {
    "text": "thing no matter where you chose to try to get it from",
    "start": "383340",
    "end": "387560"
  },
  {
    "text": "um and so now in building a secure registry for webassembly there is an index that solves the problem that we",
    "start": "388740",
    "end": "394620"
  },
  {
    "text": "need to solve we can't essentiate ideas about applying certificate transparency Concepts to package registries",
    "start": "394620",
    "end": "401460"
  },
  {
    "text": "so the rough analogy and bear with me a little bit is that with certificate transparency people are able to detect",
    "start": "401460",
    "end": "408360"
  },
  {
    "text": "when ca's mississue certificates right whether it's accidentally or maliciously you can tell that something was done",
    "start": "408360",
    "end": "414180"
  },
  {
    "text": "incorrectly that something was done uh wrong and with Registries it wouldn't be",
    "start": "414180",
    "end": "419340"
  },
  {
    "text": "kind of nice if clients could detect when Registries except invalid package updates so for example somebody else",
    "start": "419340",
    "end": "425880"
  },
  {
    "text": "tries to publish an update to your package a new release but they're not the actual owners of that package they're not the ones who are supposed to",
    "start": "425880",
    "end": "431940"
  },
  {
    "text": "be controlling that that name so packet transparency does this it applies these ideas some tools and ideas",
    "start": "431940",
    "end": "438479"
  },
  {
    "text": "from circuit transparency to package Registries to give us these properties",
    "start": "438479",
    "end": "443940"
  },
  {
    "text": "um packet transparency as defined by Landmark who coined the term in our project uh is you know publishing",
    "start": "443940",
    "end": "450900"
  },
  {
    "text": "cryptographically verifiable commitments to the state of a package registry and bear with me on this part to allow",
    "start": "450900",
    "end": "457979"
  },
  {
    "text": "auditing of the actions of package authors and the registry itself over time so that's a bit of a mouthful we're",
    "start": "457979",
    "end": "463919"
  },
  {
    "text": "going to break into three parts the first of which is publicly available registry State everybody needs to be",
    "start": "463919",
    "end": "469440"
  },
  {
    "text": "able to download and access the fundamental data of the registry and we need the registry to make",
    "start": "469440",
    "end": "476699"
  },
  {
    "text": "cryptographically verifiable commitments to that state in that data that then allows us to audit it both in",
    "start": "476699",
    "end": "483900"
  },
  {
    "text": "various different ways um so we so this definition came up with",
    "start": "483900",
    "end": "489539"
  },
  {
    "text": "what we're trying to do and we've created a protocol that is an implementation of these ideas Warg it",
    "start": "489539",
    "end": "495539"
  },
  {
    "text": "stands for webassembly registry sort of is the idea is this implementation of package transparency",
    "start": "495539",
    "end": "502560"
  },
  {
    "text": "and it it implements these three different steps you're just talking about and we're going to try to burn through explaining them the first part",
    "start": "502560",
    "end": "508379"
  },
  {
    "text": "of it needs to have publicly available State people need to be able to download information about what the registry knew about at different points in time and it",
    "start": "508379",
    "end": "514680"
  },
  {
    "text": "does that by representing every package as an append-only log of signed records they all begin with an initial record",
    "start": "514680",
    "end": "521000"
  },
  {
    "text": "and that record says who the original owner of that package is and if a registry accepts this record that means",
    "start": "521000",
    "end": "527160"
  },
  {
    "text": "that it's saying that you now own this new package every subsequent record contains the hash of the one before it that's what",
    "start": "527160",
    "end": "533279"
  },
  {
    "text": "that right to left arrow is and can do things that affect the state of the package like creating releases but also",
    "start": "533279",
    "end": "539040"
  },
  {
    "text": "like granting the permission to do releases into manage authorization now that Bob sort",
    "start": "539040",
    "end": "544620"
  },
  {
    "text": "of has been given the ability to do a release he subsequently can do that he can append records to the log and submit",
    "start": "544620",
    "end": "549839"
  },
  {
    "text": "them to the the registry and when they're accepted these releases now exist and they're part of the state of this package since an appendal new log",
    "start": "549839",
    "end": "556380"
  },
  {
    "text": "you might think well I can't get rid of those releases somehow I can't delete records from it it's immutable it's a pen only so the answer to how you would",
    "start": "556380",
    "end": "564060"
  },
  {
    "text": "delete something is that you mark it as yanked right these are a second kind of record that you can append to this that",
    "start": "564060",
    "end": "570180"
  },
  {
    "text": "says pretend that didn't exist if you've still got it you still know the hash that's fine but for most clients in",
    "start": "570180",
    "end": "575580"
  },
  {
    "text": "discoverability and things treat that as having been deleted and so really registry can be made up of",
    "start": "575580",
    "end": "581700"
  },
  {
    "text": "a bunch of these package logs a collection of package logs and that then is the publicly available",
    "start": "581700",
    "end": "587519"
  },
  {
    "text": "state of the registry this the records that make up the logs for each package",
    "start": "587519",
    "end": "593760"
  },
  {
    "text": "now we need to make cryptographically verifiable commitments to these data and we're going to start by somehow making",
    "start": "593760",
    "end": "601800"
  },
  {
    "text": "the registry commit to what's happened in the past like which records are part of its accepted history and what order",
    "start": "601800",
    "end": "608640"
  },
  {
    "text": "they happened and we do this by taking a data structure from certificate",
    "start": "608640",
    "end": "614399"
  },
  {
    "text": "transparency that maybe some of you be familiar with called a verifiable log that's based on the idea of a Merkle",
    "start": "614399",
    "end": "619680"
  },
  {
    "text": "tree um and so sort of the abstract data type of a verifiable log what do we get out of it is that a verifiable log provides",
    "start": "619680",
    "end": "626760"
  },
  {
    "text": "a total ordering describes the state at any given point with a unique checkpoint and we can verify if a record is in the",
    "start": "626760",
    "end": "633779"
  },
  {
    "text": "log by comparing the record and the checkpoint that's what we're going to get out of it and here's how we're going to do it",
    "start": "633779",
    "end": "639240"
  },
  {
    "text": "right there's a sequence of records and unlike the other kind of log we had here they don't have the hash of the previous",
    "start": "639240",
    "end": "644519"
  },
  {
    "text": "one they're all Independent Records and they all have their own independent hash that we can compute and if we want to",
    "start": "644519",
    "end": "649860"
  },
  {
    "text": "know what the representative checkpoint is for this whole log we can hash together these leaves of a tree to form",
    "start": "649860",
    "end": "656820"
  },
  {
    "text": "branches and then the root of that tree in a particular way and as we add more records to this log",
    "start": "656820",
    "end": "663420"
  },
  {
    "text": "what we find is that the root hash that represents it changes and sometimes that root hash is a sub",
    "start": "663420",
    "end": "670079"
  },
  {
    "text": "tree of the future but sometimes it's not and it has to do with whether or not the length is you know an even you know",
    "start": "670079",
    "end": "675420"
  },
  {
    "text": "power of two but we'll show later on that that doesn't that's not an issue that's just part of how it works",
    "start": "675420",
    "end": "681360"
  },
  {
    "text": "um and so since every single leaf contributed to the value at the top we can show that a given value is in the",
    "start": "681360",
    "end": "688560"
  },
  {
    "text": "root by reconstructing the root from the leaf right and we do that simply by hashing together values with their",
    "start": "688560",
    "end": "695160"
  },
  {
    "text": "siblings to get higher and higher nodes in the tree until we get to the top and if that matches what we're expecting",
    "start": "695160",
    "end": "700380"
  },
  {
    "text": "we've shown it's been included there's also something called consistency proof you're going to want to generally know that this log of the",
    "start": "700380",
    "end": "707040"
  },
  {
    "text": "state of the registry only fast forwards the history doesn't get changed and you do that by showing that the new state is",
    "start": "707040",
    "end": "713339"
  },
  {
    "text": "consistent with the old state right that only six and seven have been added and changed uh and you do that essentially",
    "start": "713339",
    "end": "718500"
  },
  {
    "text": "just by showing that all the stuff that used to be in the log is included we don't need an inclusion proof for zero",
    "start": "718500",
    "end": "724980"
  },
  {
    "text": "through five individually we just need uh inclusion proofs that show that their parent branches are that you can",
    "start": "724980",
    "end": "731220"
  },
  {
    "text": "recompute root six from them so what does the registry claim has happened",
    "start": "731220",
    "end": "737100"
  },
  {
    "text": "and the answer that is the sequence of values that are in its verifiable log and each of these records has both the",
    "start": "737100",
    "end": "744180"
  },
  {
    "text": "the record itself hash and the um the name of the package hashed into it so you can tell that this is a0 was put",
    "start": "744180",
    "end": "751140"
  },
  {
    "text": "into a right it's been appended to the package a but one thing clients can't efficiently",
    "start": "751140",
    "end": "756839"
  },
  {
    "text": "do here is tell what the the most up-to-date the latest record is in each of these logs they have to walk the",
    "start": "756839",
    "end": "762060"
  },
  {
    "text": "entire verifiable log backwards and now in the worst case that's walking everything that ever happened if your package has not been updated in forever",
    "start": "762060",
    "end": "768060"
  },
  {
    "text": "so that's just entirely you know intractable to clients so we need something that helps us solve this problem and that tool is another thing",
    "start": "768060",
    "end": "774540"
  },
  {
    "text": "from transparency called a verifiable map and where the other thing was a log this thing's a map it's sort of that",
    "start": "774540",
    "end": "781380"
  },
  {
    "text": "straightforward really it's a key value mapping it's also described by unique cache we can also check that things are",
    "start": "781380",
    "end": "787320"
  },
  {
    "text": "included in it those are sort of the fundamental things we want out of it and unlike the other one where we had this",
    "start": "787320",
    "end": "792600"
  },
  {
    "text": "like sequence of records that built up a Merkle tree we actually have sort of a Radix tree and if some of you are",
    "start": "792600",
    "end": "798420"
  },
  {
    "text": "familiar with Radix trees you'll know that at each branch you decide which child to go to based on part of the key",
    "start": "798420",
    "end": "803940"
  },
  {
    "text": "right and so if we want to insert 0 0 1 into this tree we go left then left then",
    "start": "803940",
    "end": "808980"
  },
  {
    "text": "right so we've walked in the tree to the correct position that corresponds to that key now in reality this tree is",
    "start": "808980",
    "end": "814500"
  },
  {
    "text": "actually has a height that is directly equal to the number of bits in the hash so it's quite large but on screen we can",
    "start": "814500",
    "end": "821339"
  },
  {
    "text": "fit three levels so that's what we do and we've inserted X here and what that means is that the the hash that",
    "start": "821339",
    "end": "827399"
  },
  {
    "text": "represents this Leaf is the hash of X we'll get to that later and if we insert more things in the tree we'll see it fills out that it more things are",
    "start": "827399",
    "end": "833760"
  },
  {
    "text": "present and this tree is fundamentally sparse it's not a full tree it's a tree with only some values present and we'll",
    "start": "833760",
    "end": "839279"
  },
  {
    "text": "finally insert your Z here at one one you can sort of see how this is working and like the other one we build the hash",
    "start": "839279",
    "end": "845639"
  },
  {
    "text": "of the root it you know incrementally from the bottom up so that every leaf and key every key in value in the leaf",
    "start": "845639",
    "end": "851940"
  },
  {
    "text": "you know contributes to the root value so we hash in this case all the leaves",
    "start": "851940",
    "end": "856980"
  },
  {
    "text": "to get their value with a unique prefix then we can hash branches like the one one branch over there and show you know",
    "start": "856980",
    "end": "864180"
  },
  {
    "text": "that it combines the two values of its children but we also have these branches out here that only have one sub-child",
    "start": "864180",
    "end": "869700"
  },
  {
    "text": "right only one subtree to the left or right and in that case we prevent Collision attacks by modifying the",
    "start": "869700",
    "end": "875820"
  },
  {
    "text": "prefix so there's a bit that indicates essentially which subtree is not present and in the top both subjects are present",
    "start": "875820",
    "end": "881639"
  },
  {
    "text": "so it's the normal case of one one and together that way we've hashed up the information about a key value mapping",
    "start": "881639",
    "end": "887040"
  },
  {
    "text": "and just like in the same one we can do an inclusion proof we can check that 1 1 0 was mapped to Y in this root we can",
    "start": "887040",
    "end": "894420"
  },
  {
    "text": "verify that in log n hashes by simply reconstructing the root using those same hashes we were using before to construct",
    "start": "894420",
    "end": "901380"
  },
  {
    "text": "the root originally so how do clients know what the latest record is we have a verifiable map that",
    "start": "901380",
    "end": "908519"
  },
  {
    "text": "Associates every log ID which is the hash of its name with the most recent",
    "start": "908519",
    "end": "913620"
  },
  {
    "text": "value in that log in that way people can verifiably say that was the latest thing the registry knew at that point in time",
    "start": "913620",
    "end": "918720"
  },
  {
    "text": "that's as far as I have to read up to and these two data structures get",
    "start": "918720",
    "end": "923940"
  },
  {
    "text": "combined together into a single checkpoint which is sort of includes the hash of both the root hash of both and a",
    "start": "923940",
    "end": "929459"
  },
  {
    "text": "signature by the registry and that is the state that we're committing to for the registry you note that this uniquely",
    "start": "929459",
    "end": "935399"
  },
  {
    "text": "identifies the state of every package at one point in time so if you ask the question what was the latest version of",
    "start": "935399",
    "end": "941519"
  },
  {
    "text": "Foo for some checkpoint that has a single immutable answer throughout all of the future",
    "start": "941519",
    "end": "946920"
  },
  {
    "text": "and you can actually granularly update to new checkpoints and verify that everything stays sane as you do so it's",
    "start": "946920",
    "end": "952380"
  },
  {
    "text": "just quite a nice property um so our third part if you remember we had three parts we had publicly",
    "start": "952380",
    "end": "957480"
  },
  {
    "text": "available registry State we just finished making cryptographic commitments to it now we need to audit it",
    "start": "957480",
    "end": "962880"
  },
  {
    "text": "and we audit it well from a few different people but the first person that audited is the clients um clients are fundamentally resource",
    "start": "962880",
    "end": "969480"
  },
  {
    "text": "constrained right you know most clients don't have you know super computers running just because they want to",
    "start": "969480",
    "end": "974579"
  },
  {
    "text": "download a package that's sort of a insane view of it even small devices should be able to be clients and they",
    "start": "974579",
    "end": "980040"
  },
  {
    "text": "only really care about some things if you're a client and you want this package it's dependencies you don't want to verify the entire registry State",
    "start": "980040",
    "end": "985800"
  },
  {
    "text": "that'd be absurd so what you only want to do is verify the relevant package State and that that",
    "start": "985800",
    "end": "991620"
  },
  {
    "text": "package state is committed by the registry that the registry is committed to that information so you don't care",
    "start": "991620",
    "end": "997019"
  },
  {
    "text": "about a slice um and you also want to know of course that the commitments are valid and correct",
    "start": "997019",
    "end": "1003259"
  },
  {
    "text": "so the beginning a client knows nothing complete clean slate and what they'll do is they'll download the logs for the",
    "start": "1003259",
    "end": "1009139"
  },
  {
    "text": "packages they care about in this case it's all the packages in our fake registry but you can imagine that there's many many packages they don't",
    "start": "1009139",
    "end": "1014420"
  },
  {
    "text": "care about then they're going to verify the package logs and",
    "start": "1014420",
    "end": "1020120"
  },
  {
    "text": "they're going to sort of sequentially process each one using that sort of logic we talked about earlier where you know if I grant someone a key then they",
    "start": "1020120",
    "end": "1025938"
  },
  {
    "text": "can do something if I don't then they can't and releases have to you know you can't release two things in the same version instead of those rules that you",
    "start": "1025939",
    "end": "1031220"
  },
  {
    "text": "sequentially validate on uh for all the packages you care about in this case we're processing this log",
    "start": "1031220",
    "end": "1037280"
  },
  {
    "text": "that actually fails because for some reason this guy named Charlie is trying to publish a release but he never got",
    "start": "1037280",
    "end": "1042980"
  },
  {
    "text": "permission so this log is going to fail a validation we can Tech detect for sure that this was not supposed to happen",
    "start": "1042980",
    "end": "1048020"
  },
  {
    "text": "we'll continue in the success case where the logs are fine and show you what would happen next but you could already",
    "start": "1048020",
    "end": "1053419"
  },
  {
    "text": "have bailed at this point if you detected that so the next thing you get is the checkpoints in this case sort of the word log in the word map represent",
    "start": "1053419",
    "end": "1059900"
  },
  {
    "text": "that root hash of each structure for compactness and you notice we don't have any of the other information about the",
    "start": "1059900",
    "end": "1064940"
  },
  {
    "text": "logger map we don't have any of the things that make them up we don't need them yet until now because now what we're going",
    "start": "1064940",
    "end": "1070460"
  },
  {
    "text": "to do is actually download just enough information for those data structures just the Merkle audit paths the little sibling and Uncle nodes required to",
    "start": "1070460",
    "end": "1077960"
  },
  {
    "text": "verify exactly what we need very sparsely and we can show here that the registry is committed to these things",
    "start": "1077960",
    "end": "1083539"
  },
  {
    "text": "being the latest and these things are part of its history",
    "start": "1083539",
    "end": "1088000"
  },
  {
    "text": "clients will sort of also validate the signature on the checkpoint and say that this was actually committed to claimed",
    "start": "1088940",
    "end": "1094640"
  },
  {
    "text": "by the actual registry not some random third party that made up a registry checkpoint",
    "start": "1094640",
    "end": "1099679"
  },
  {
    "text": "now oh yeah in addition one thing they can also do is if they already had a",
    "start": "1099679",
    "end": "1104900"
  },
  {
    "text": "checkpoint then for the log at least they can ensure very quickly that it's a fast forward that all the records they",
    "start": "1104900",
    "end": "1110240"
  },
  {
    "text": "previously knew about are still part of the registry the one thing that they can't really do",
    "start": "1110240",
    "end": "1115520"
  },
  {
    "text": "is verify that the login map agree with each other right they can't they can't easily check that there isn't some",
    "start": "1115520",
    "end": "1121280"
  },
  {
    "text": "record in the log that's not represented in the map that's newer than what they know about so who are clients going to",
    "start": "1121280",
    "end": "1127520"
  },
  {
    "text": "call monitors not MythBusters uh uh but so the monitors are able to do",
    "start": "1127520",
    "end": "1134840"
  },
  {
    "text": "this they are long running processes they only care about valid and cryptographic information in a stream and so monitors are able to process all",
    "start": "1134840",
    "end": "1141200"
  },
  {
    "text": "the checkpoints that ever were and make sure they all agree with each other internally and across time uh and so",
    "start": "1141200",
    "end": "1146419"
  },
  {
    "text": "that's what the clients can't do and because clients can talk to as many or as few monitors as they want you can add",
    "start": "1146419",
    "end": "1151580"
  },
  {
    "text": "security by simply standing up more monitors and sort of create a web of trust um",
    "start": "1151580",
    "end": "1157820"
  },
  {
    "text": "right so revisiting our three parts of package transparency we needed publicly",
    "start": "1157820",
    "end": "1162980"
  },
  {
    "text": "available registry state that we got with a collection of package logs we need a cryptographically verifiable",
    "start": "1162980",
    "end": "1168020"
  },
  {
    "text": "commitments that we got using signed log and map checkpoints we needed auditing of package authors in the registry and",
    "start": "1168020",
    "end": "1173840"
  },
  {
    "text": "we do that using a client and monitor sort of system once again akin to stick with transparency",
    "start": "1173840",
    "end": "1180340"
  },
  {
    "text": "so we've done all this how does it hold up against attacks well let's imagine that the registry",
    "start": "1180340",
    "end": "1187940"
  },
  {
    "text": "gives you package data you download package data but it gives you an a modified record in the past",
    "start": "1187940",
    "end": "1194600"
  },
  {
    "text": "how are you going to know that they modified a record in the past the answer is that two things are going to immediately stop being true they're",
    "start": "1194600",
    "end": "1200720"
  },
  {
    "text": "stop validating correctly the hash linkage from A2 backwards to A1 will no longer work because A2 didn't contain",
    "start": "1200720",
    "end": "1206299"
  },
  {
    "text": "the hash of this modified record it contained the hash of actual A1 which is not what you have here Additionally the",
    "start": "1206299",
    "end": "1211700"
  },
  {
    "text": "log inclusion proof here won't succeed because that checkpoint did not include this provably",
    "start": "1211700",
    "end": "1217760"
  },
  {
    "text": "what if a registry tries to hide something from you right if it tries to say no this thing didn't exist don't worry there's there's not a security",
    "start": "1217760",
    "end": "1223039"
  },
  {
    "text": "patch you're fine that version wasn't yanked if it does that then the linkage here from the map is going to fail right",
    "start": "1223039",
    "end": "1229820"
  },
  {
    "text": "the inclusion proof that says No A1 is the newest thing as of my checkpoint will fail because it wasn't and it",
    "start": "1229820",
    "end": "1235340"
  },
  {
    "text": "already committed to the fact that it wasn't now you'll note we already talked a little bit about the consistency of",
    "start": "1235340",
    "end": "1240440"
  },
  {
    "text": "the login map here so the idea is that if if the registry had created a map and",
    "start": "1240440",
    "end": "1245780"
  },
  {
    "text": "log that didn't agree where it did say A1 was the latest thing in the map but it still already knew about A1 and its",
    "start": "1245780",
    "end": "1251780"
  },
  {
    "text": "log then the monitor's job is to catch that at this point those two things have already been proven to be consistent and",
    "start": "1251780",
    "end": "1257539"
  },
  {
    "text": "so then that's how you know that you're not getting indefinitely Frozen for example so to summarize sort of the broad points",
    "start": "1257539",
    "end": "1264799"
  },
  {
    "text": "of the talk wasm is a promising way to make portable and secure software",
    "start": "1264799",
    "end": "1270440"
  },
  {
    "text": "package Registries or at least the kind that we need are really indexes of content that map name and version to",
    "start": "1270440",
    "end": "1276679"
  },
  {
    "text": "what's actually there packet transparency is this combination of certificate transparency and package",
    "start": "1276679",
    "end": "1282260"
  },
  {
    "text": "Concepts and it helps us provide some really interesting defenses against different",
    "start": "1282260",
    "end": "1287480"
  },
  {
    "text": "kinds of attacks with that all said I'd like to give a special thanks to a few people who helped review and devise this talk like",
    "start": "1287480",
    "end": "1294440"
  },
  {
    "text": "Land Martin and Luke Wagner and thanks to some other contributors to the ward project like Bailey Hayes and Peter Hume",
    "start": "1294440",
    "end": "1301100"
  },
  {
    "text": "finally my company single store for supporting work by enabling me to work",
    "start": "1301100",
    "end": "1307340"
  },
  {
    "text": "on this project and that's all [Applause]",
    "start": "1307340",
    "end": "1314779"
  },
  {
    "text": "right here right",
    "start": "1323299",
    "end": "1329179"
  },
  {
    "text": "so Warg itself is really about managing name spaces right and saying that this",
    "start": "1329179",
    "end": "1335299"
  },
  {
    "text": "name is owned by these people and this version is authoritatively that version that was claimed to be if you want to",
    "start": "1335299",
    "end": "1341120"
  },
  {
    "text": "claim some the thing that you're probably interested in and I think a lot of people want and are currently doing and we really are interested as well you",
    "start": "1341120",
    "end": "1347419"
  },
  {
    "text": "want to verify that the author of that content is someone in particular and you'll actually do that inside the",
    "start": "1347419",
    "end": "1353120"
  },
  {
    "text": "content in our case because webassembly for example is has an emerging proposal to actually include signatures in the",
    "start": "1353120",
    "end": "1359240"
  },
  {
    "text": "wasem blob itself and that component can contain a section with signatures in it and it registry as a matter of policy",
    "start": "1359240",
    "end": "1364880"
  },
  {
    "text": "could even require that your component has that section because that's sort of a separate question once again is like",
    "start": "1364880",
    "end": "1370159"
  },
  {
    "text": "this was actually made by Microsoft Google Fubar or whatever is one question that it is actually the rightful version",
    "start": "1370159",
    "end": "1376760"
  },
  {
    "text": "1.0 of Fubar is a separate question",
    "start": "1376760",
    "end": "1381460"
  },
  {
    "text": "a good video that when dogs",
    "start": "1387140",
    "end": "1391780"
  },
  {
    "text": "but you can't trace back right because the signature is in the log all are contiguous right and they sort of authorize subsequent signatures so",
    "start": "1396559",
    "end": "1405820"
  },
  {
    "text": "that's how you can know that the people you originally gave it to gave it to people who originally gave it to whatever and this is not that different",
    "start": "1405919",
    "end": "1411620"
  },
  {
    "text": "from in fact this is much more verifiable than like npm for instance if you want to know the people that you gave permission to be left pet on npm",
    "start": "1411620",
    "end": "1418340"
  },
  {
    "text": "are actually the same people today you you currently here have way more than you ever had before",
    "start": "1418340",
    "end": "1423799"
  },
  {
    "text": "um and and if you want this thing about author verification once again that is",
    "start": "1423799",
    "end": "1429500"
  },
  {
    "text": "just an aspect of content signature that's a separate question that's handled separately",
    "start": "1429500",
    "end": "1434799"
  },
  {
    "text": "[Music]",
    "start": "1440250",
    "end": "1443359"
  },
  {
    "text": "how do I know what this the key of this registry is so one thing in the current design and",
    "start": "1445960",
    "end": "1453320"
  },
  {
    "text": "this is something I didn't talk about in the talk because it's sort of a detail there's actually not just logs for every",
    "start": "1453320",
    "end": "1458360"
  },
  {
    "text": "package there's actually also an extra log that's the operator's own log where they can track their own key rotation",
    "start": "1458360",
    "end": "1465200"
  },
  {
    "text": "and that's actually since it's part of this committed State you can also actually track and verify changes to",
    "start": "1465200",
    "end": "1470960"
  },
  {
    "text": "that key as well and it has a bit of a strange circularity but it's one that works out we think",
    "start": "1470960",
    "end": "1477559"
  },
  {
    "text": "yes",
    "start": "1477559",
    "end": "1480039"
  },
  {
    "text": "so the way we currently Envision and Visage monitors working is that monitors are going to subscribe to a stream of registry data from the Registries that",
    "start": "1487880",
    "end": "1494299"
  },
  {
    "text": "they monitor and they're going to process it and then clients actually like the actual API client you'll set you'll pick your registry that you're",
    "start": "1494299",
    "end": "1500960"
  },
  {
    "text": "using you'll actually pick a list of monitors that you trust and when you do that then whenever you pull down data",
    "start": "1500960",
    "end": "1506480"
  },
  {
    "text": "you're actually going to ask that monitor hey do you know about is this checkpoint safe um and so it's not that monitors tell",
    "start": "1506480",
    "end": "1513080"
  },
  {
    "text": "clients things clients ask monitors things and so it goes in that direction and we expect monitors to be able to",
    "start": "1513080",
    "end": "1519440"
  },
  {
    "text": "process quickly enough that you can do this sort of nearly or essentially synchronously with the the install process",
    "start": "1519440",
    "end": "1525860"
  },
  {
    "text": "um yeah and the monitors actually is another thing are one of the defenses against indefinite freezes because what",
    "start": "1525860",
    "end": "1531020"
  },
  {
    "text": "a modern can do is tell you you say hey I just installed this checkpoint right this checkpoint blah blah you can say",
    "start": "1531020",
    "end": "1536240"
  },
  {
    "text": "whoa that's like three months out of date buddy somebody is holding things back from you um but yeah it goes from client to",
    "start": "1536240",
    "end": "1542539"
  },
  {
    "text": "monitor is the direction of the interaction",
    "start": "1542539",
    "end": "1546520"
  },
  {
    "text": "oh yes",
    "start": "1548360",
    "end": "1550900"
  },
  {
    "text": "right so because of the separation of namespace and content we fully expect people will",
    "start": "1572659",
    "end": "1579200"
  },
  {
    "text": "bring their own storage into some extent their own registry systems but when they want to be part of the name spacing that",
    "start": "1579200",
    "end": "1584900"
  },
  {
    "text": "we're creating for webassembly packages when you say like this is so-and-so's registry so package name version is",
    "start": "1584900",
    "end": "1590659"
  },
  {
    "text": "whatever that they will probably choose to run that on top of their existing systems and that we actually the use",
    "start": "1590659",
    "end": "1596059"
  },
  {
    "text": "cases Registries are really varied because we start to see some a general purpose good Registries at least some of",
    "start": "1596059",
    "end": "1601580"
  },
  {
    "text": "them uh potentially one run by the bytecode alliance but maybe not we'll see uh we'll see different the riskers",
    "start": "1601580",
    "end": "1606679"
  },
  {
    "text": "are very expensive is the thing Registries run by different individual companies and projects like if you're a",
    "start": "1606679",
    "end": "1612080"
  },
  {
    "text": "company or let's see what's that um if you're like Envoy maybe you want to have different sort of like your own",
    "start": "1612080",
    "end": "1618440"
  },
  {
    "text": "registry of your own Envoy sort of extensions and things right my company may run a registry at some point of",
    "start": "1618440",
    "end": "1623480"
  },
  {
    "text": "database extensions you also potentially have deployment Registries inside your company that are the only place that you go to download things that mirror",
    "start": "1623480",
    "end": "1630020"
  },
  {
    "text": "content from other places a lot of companies will probably run their might run their own monitor because monitors what's going to be expected to be relatively cheap and as a result you can",
    "start": "1630020",
    "end": "1637220"
  },
  {
    "text": "have your own and then use another registry but know that you're always monitoring it to see a bunch of different Registries",
    "start": "1637220",
    "end": "1643460"
  },
  {
    "text": "run on top of whatever people want to run them on top of yes",
    "start": "1643460",
    "end": "1650320"
  },
  {
    "text": "but do you have an opinion at the moment the all of the actions",
    "start": "1660200",
    "end": "1666740"
  },
  {
    "text": "that are taken on a package are doable only by the people who've been granted those permissions directly in the log",
    "start": "1666740",
    "end": "1672260"
  },
  {
    "text": "itself in log authorization um there is another tool actually as well that sort of adds on to that where",
    "start": "1672260",
    "end": "1678200"
  },
  {
    "text": "Registries can unilaterally reject anything actually this is actually just a fundamental property of all these",
    "start": "1678200",
    "end": "1683900"
  },
  {
    "text": "systems anyway you can always ignore our HTTP request you get and more fundamentally here you know you're able to just not include something in your",
    "start": "1683900",
    "end": "1690200"
  },
  {
    "text": "locks it didn't happen and so one thing that we expect is that Registries will use this in actually a good way uh for",
    "start": "1690200",
    "end": "1696020"
  },
  {
    "text": "just policy so one thing you do is you can simply say yeah I'm not going to allow you to release that thing that has known vulnerabilities you as a registry",
    "start": "1696020",
    "end": "1701299"
  },
  {
    "text": "operator can choose as a matter of policy that you only allow things that are signed have no known full movies Etc and that's the thing that different",
    "start": "1701299",
    "end": "1707000"
  },
  {
    "text": "Registries will choose different answers to one other thing that's sort of a an interesting idea that we're currently",
    "start": "1707000",
    "end": "1712400"
  },
  {
    "text": "thinking about is that the registry can actually as a matter of policy reject new package creation that doesn't give",
    "start": "1712400",
    "end": "1718700"
  },
  {
    "text": "the registry operator some permission in the log you can say I'm only going to let you have the name Fubar if you give",
    "start": "1718700",
    "end": "1724460"
  },
  {
    "text": "me the permission to yank stuff and so it's all still in log but in combination this idea of operator policy",
    "start": "1724460",
    "end": "1730460"
  },
  {
    "text": "through rejection you can actually achieve some of these like higher level policy ideas about like giving yourself the ability to yank things",
    "start": "1730460",
    "end": "1738039"
  },
  {
    "text": "we're not entirely sure the there's some trade-offs there uh especially around the size of these logs and besides these",
    "start": "1741860",
    "end": "1747620"
  },
  {
    "text": "data structures so we're not sure at the very least this will give you a strongly identifiable way of talking about",
    "start": "1747620",
    "end": "1753140"
  },
  {
    "text": "packages so you can build tools like that on top of or interoperate with existing tools which is maybe the best way for this to work",
    "start": "1753140",
    "end": "1760399"
  },
  {
    "text": "yes I guess since you have this",
    "start": "1760399",
    "end": "1766460"
  },
  {
    "text": "chain of how users were branded stuff",
    "start": "1766460",
    "end": "1771500"
  },
  {
    "text": "um in the event that you someone was granted too much information",
    "start": "1771500",
    "end": "1776740"
  },
  {
    "text": "would that be tied to this chain is something yeah how do you recover from",
    "start": "1780580",
    "end": "1785840"
  },
  {
    "text": "like compromise of these Keys that's sort of a big question um one of the answers once it goes back",
    "start": "1785840",
    "end": "1792860"
  },
  {
    "text": "to this idea about like initial package creation policy where you could say actually in order to as a register in",
    "start": "1792860",
    "end": "1800059"
  },
  {
    "text": "order to create a package in my place you have to give me the ability to actually reassign key permissions and that's really scary sounding the only",
    "start": "1800059",
    "end": "1806000"
  },
  {
    "text": "thing that helps that sound a little less scary is that you can tell when they do it right so you can actually say like I'm not actually gonna I'm gonna",
    "start": "1806000",
    "end": "1811760"
  },
  {
    "text": "the log is fine log is fine and if the registry uses this power that they've required you to give it to reset the keys then it's sort of like an oh crap",
    "start": "1811760",
    "end": "1817760"
  },
  {
    "text": "moment where you actually are going to want external information it's going to Halt the next poll or whatever so that's",
    "start": "1817760",
    "end": "1823880"
  },
  {
    "text": "sort of the best answer we have at the moment is that you know but there's some combination of operator policy the direct ability to rotate Keys",
    "start": "1823880",
    "end": "1831260"
  },
  {
    "text": "um and there's the transparency of all this that you do have the ingredients to make an answer to this question",
    "start": "1831260",
    "end": "1837320"
  },
  {
    "text": "um there's also potentially an ability to make a special kind of record that operators can always do that like takes",
    "start": "1837320",
    "end": "1842779"
  },
  {
    "text": "over a package and that would obviously be very like you know you wouldn't download past that point without a so it's a reset of your trust in the",
    "start": "1842779",
    "end": "1848840"
  },
  {
    "text": "package authors obviously and you'd want to know why they did it um but that has some interesting complexity actually because it um",
    "start": "1848840",
    "end": "1854899"
  },
  {
    "text": "answering the question what operator keys were allowed to do that at some point in time requires you to correlate the operator log in the package log so",
    "start": "1854899",
    "end": "1862159"
  },
  {
    "text": "it's sort of like weird to have this special operator records record type that has permissions that come from outside the package log so at the moment",
    "start": "1862159",
    "end": "1868640"
  },
  {
    "text": "it's all in log you'd have to have built in when you created it the ability to do that to recover which is a little scary sounding but",
    "start": "1868640",
    "end": "1877779"
  },
  {
    "text": "so existing Registries may have a hard time using this maybe they won't I'm not entirely sure because you have to go",
    "start": "1884779",
    "end": "1890720"
  },
  {
    "text": "back and like rewrite your history as one of these histories and I don't know how tractable that is for most of them but to some extent what we're saying",
    "start": "1890720",
    "end": "1896539"
  },
  {
    "text": "here isn't really very wasn't specific the only thing that you really have to do with work to run some other type of content is to add a new content type and",
    "start": "1896539",
    "end": "1903140"
  },
  {
    "text": "describe how you digest it how you create your content digest for that type and once you've done that everything else is just a matter of policy right",
    "start": "1903140",
    "end": "1910220"
  },
  {
    "text": "um so no you could do you could use work for something else it's not very reminiscently specific but we came to it from the direction of webassembly and solving the needs that webassembly has",
    "start": "1910220",
    "end": "1916580"
  },
  {
    "text": "for Federated verifiable namespaces um but if everybody else also needs that",
    "start": "1916580",
    "end": "1922460"
  },
  {
    "text": "they're welcome to come take a look we're happy to work with anybody",
    "start": "1922460",
    "end": "1927700"
  },
  {
    "text": "yes yes uh not at the moment Warg is",
    "start": "1930200",
    "end": "1936919"
  },
  {
    "text": "currently written in Rust but it's a protocol it can be implemented in any different place it has HTTP apis it has",
    "start": "1936919",
    "end": "1942200"
  },
  {
    "text": "some protobuf that describes the layout of these records in the log and some abstract semantics for how these hashes",
    "start": "1942200",
    "end": "1947360"
  },
  {
    "text": "are created but largely you could create in any language and we expect at some point that we will actually compile our rust to webassembly and there's some",
    "start": "1947360",
    "end": "1953659"
  },
  {
    "text": "really fun bootstrapping things that you get to do there actually another thing that has a lot of people excited about having sort of trying to be really",
    "start": "1953659",
    "end": "1959600"
  },
  {
    "text": "thoughtful about supply chain security and webassembly is that you can have like the ultimate version of a build pack where you have like a Wazi",
    "start": "1959600",
    "end": "1965779"
  },
  {
    "text": "component that actually takes you from source source code to actual artifact in",
    "start": "1965779",
    "end": "1971720"
  },
  {
    "text": "very verifiable ways deterministically even because wasm can be run in a deterministic mode so there's some exciting opportunities",
    "start": "1971720",
    "end": "1978020"
  },
  {
    "text": "there for maybe something similar uh to leverage compiling things it",
    "start": "1978020",
    "end": "1984260"
  },
  {
    "text": "wasn't that's really how it gotten attention and yeah and additionally if we can",
    "start": "1984260",
    "end": "1989659"
  },
  {
    "text": "compile the core logic of the registry to wasm and you can run was in a lot of places it becomes a lot easier to interact with these things because",
    "start": "1989659",
    "end": "1995179"
  },
  {
    "text": "there's some complex cryptography cryptographical things being used and we didn't rewrite Shaw by any means right",
    "start": "1995179",
    "end": "2000279"
  },
  {
    "text": "but there's still some the use the security design the use of those things is still complicated to do it correctly and so the more people can leverage one",
    "start": "2000279",
    "end": "2006640"
  },
  {
    "text": "shared open source and of course all this is open source maybe I didn't say that but clearly this is all open source the registry's out there by code",
    "start": "2006640",
    "end": "2012519"
  },
  {
    "text": "Alliance you know github.com registry you know org.io if you want the",
    "start": "2012519",
    "end": "2018039"
  },
  {
    "text": "short version of getting around our stuff um and yeah and if we can share an implementation of these things that",
    "start": "2018039",
    "end": "2023320"
  },
  {
    "text": "compiles to webassembly and runs quickly like why not use a singular or like at least a limited number of clients that",
    "start": "2023320",
    "end": "2028600"
  },
  {
    "text": "we've audited really well so",
    "start": "2028600",
    "end": "2033059"
  },
  {
    "text": "right well I think it's about to be lunch so I think we'll call it there thanks",
    "start": "2037179",
    "end": "2042419"
  }
]