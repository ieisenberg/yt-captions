[
  {
    "text": "It's Beginning time oh boy okay I think the doors are closing here",
    "start": "40",
    "end": "6080"
  },
  {
    "text": "um I will go ahead and start once a few more people get a chance to sit down",
    "start": "6080",
    "end": "11679"
  },
  {
    "text": "hello everyone um hello to my co-workers sitting here in the front row to make sure that I'm extremely embarrassed if I",
    "start": "11679",
    "end": "18039"
  },
  {
    "text": "crash and burn in this talk and hello to everyone else um this mic keeps on slipping down but I",
    "start": "18039",
    "end": "25240"
  },
  {
    "text": "think it's doing okay uh hi my name is Phillip I am an open telemetry maintainer and I also work for a company",
    "start": "25240",
    "end": "31160"
  },
  {
    "text": "called honeycomb we do observability and tracing observability so to the surprise",
    "start": "31160",
    "end": "36920"
  },
  {
    "text": "of nobody I'm giving a talk about how you can trace with open Telemetry uh specifically for monoliths though which",
    "start": "36920",
    "end": "42559"
  },
  {
    "text": "I think is something that doesn't um come up very often in the context of",
    "start": "42559",
    "end": "48840"
  },
  {
    "text": "distributed tracing usually people talk about it when they're referring to microservices and big old distributed",
    "start": "48840",
    "end": "54840"
  },
  {
    "text": "systems and stuff like that but I don't think that's really the reality that a lot of people live in",
    "start": "54840",
    "end": "60760"
  },
  {
    "text": "and in particular I think I want to begin by um saying that I think modelist",
    "start": "60760",
    "end": "67400"
  },
  {
    "text": "versus microservices is a pretty meaningless distinction um I think the",
    "start": "67400",
    "end": "72840"
  },
  {
    "text": "messy reality that we all live in is that we're kind of living in some sort of in between World between microservices and monoliths and",
    "start": "72840",
    "end": "79880"
  },
  {
    "text": "distributed monoliths and all that um and in particular uh over the past",
    "start": "79880",
    "end": "85079"
  },
  {
    "text": "couple years that I've been working for honeycomb and helping people adopt tracing and observability for their system I've certainly noticed a few",
    "start": "85079",
    "end": "91880"
  },
  {
    "text": "patterns uh a common monolith application like yes of course it's running in a single process but it's",
    "start": "91880",
    "end": "98159"
  },
  {
    "text": "typically running behind a load balancer maybe there's a database server too that it's talking to maybe there's a message",
    "start": "98159",
    "end": "103479"
  },
  {
    "text": "queue involved maybe it's calling an authentication server somewhere there's some thirdparty vendors maybe you've",
    "start": "103479",
    "end": "109360"
  },
  {
    "text": "actually split out some of that monolith into separate services and created them as microservices at that point you have a",
    "start": "109360",
    "end": "116399"
  },
  {
    "text": "distributed system already in fact I would wager that a true monolith that just talks to a database when that database is on a separate system that is",
    "start": "116399",
    "end": "122520"
  },
  {
    "text": "already a distributed system um it may not be the most distributed of systems but it is still one and by definition it",
    "start": "122520",
    "end": "130399"
  },
  {
    "text": "can benefit from from distributed tracing now it may not necessarily benefit as much as the largest spread of",
    "start": "130399",
    "end": "137200"
  },
  {
    "text": "like thousands of services or something like that there's quite a bit of benefit to extract from that separately which I've observed uh",
    "start": "137200",
    "end": "145879"
  },
  {
    "text": "plenty of times in my own career is that microservices grow into monoliths M themselves uh it's pretty easy to just",
    "start": "145879",
    "end": "152160"
  },
  {
    "text": "keep on adding code to stuff and eventually you go ah geez this code's kind of a mess we should modularize this",
    "start": "152160",
    "end": "157879"
  },
  {
    "text": "thing and uh before you know it you end up with a bunch of distributed monoliths uh because it's a lot easier to just",
    "start": "157879",
    "end": "163599"
  },
  {
    "text": "modularize code that's inside of an an existing process than it is to factor it out into its own separate system and so",
    "start": "163599",
    "end": "169640"
  },
  {
    "text": "on and you know you may actually go and do that but you may not necessarily do that in some other cases and it's",
    "start": "169640",
    "end": "175120"
  },
  {
    "text": "perfectly okay this is just the Natural Evolution of a lot of systems",
    "start": "175120",
    "end": "180640"
  },
  {
    "text": "but I would say that regardless of where you are if you started in like a pure microservices environment and kind of",
    "start": "180640",
    "end": "186720"
  },
  {
    "text": "ended up with some form of distributed monoliths or you had a monolith that you kind of partially broke out into",
    "start": "186720",
    "end": "192599"
  },
  {
    "text": "services but never really got around to fully micros servicing it you already need distributed tracing if you're not",
    "start": "192599",
    "end": "198159"
  },
  {
    "text": "aditing it already um and that's to say that there's a lot of problems that",
    "start": "198159",
    "end": "203440"
  },
  {
    "text": "occur in the context of systems that are outside the actual app code uh somebody",
    "start": "203440",
    "end": "209120"
  },
  {
    "text": "may have had the idea to add grpc to your system and now your load balancing is totally screwed and nobody knows",
    "start": "209120",
    "end": "214920"
  },
  {
    "text": "what's going on or maybe somebody got a little too fancy with a SQL query and now it's taken a really long time and",
    "start": "214920",
    "end": "222159"
  },
  {
    "text": "you're not really sure if it's your om or if it's the database itself maybe",
    "start": "222159",
    "end": "227319"
  },
  {
    "text": "there's sometimes there's bugs in databases maybe it's something to do with your network transport layer like these things are also really really hard",
    "start": "227319",
    "end": "234159"
  },
  {
    "text": "to diagnose and very often you don't even really know where to look for uh some",
    "start": "234159",
    "end": "239840"
  },
  {
    "text": "sometimes if somebody's really experienced they kind of have a clue as to where something could be going but your average developer is going to be",
    "start": "239840",
    "end": "245879"
  },
  {
    "text": "like okay this is a unique issue I've not seen this thing before what do I even do and so you can you even with the",
    "start": "245879",
    "end": "252040"
  },
  {
    "text": "most basic of distributed tracing in just a monolith talking to a database you can ask all kinds of interesting",
    "start": "252040",
    "end": "257199"
  },
  {
    "text": "questions like how many database calls did this request take which database calls are the slowest which SQL",
    "start": "257199",
    "end": "264400"
  },
  {
    "text": "statements are the ones that are not doing too hot right now what's the average latency of my requests is this",
    "start": "264400",
    "end": "270479"
  },
  {
    "text": "external API that I'm calling the thing that's actually causing a Slowdown or not and you can start slicing and dicing",
    "start": "270479",
    "end": "276360"
  },
  {
    "text": "that by a lot of very interesting characteristics and so this is all just at the edges of your system I've not",
    "start": "276360",
    "end": "281880"
  },
  {
    "text": "even really gotten gotten into adding tracing to the monolith itself but when you can start to answer these questions",
    "start": "281880",
    "end": "288080"
  },
  {
    "text": "you can unlock a lot of interesting fun behavior and and realize that your application is doing a lot of things",
    "start": "288080",
    "end": "294000"
  },
  {
    "text": "that it shouldn't be doing and diagnose a lot of problems that your users are already probably experiencing today",
    "start": "294000",
    "end": "300199"
  },
  {
    "text": "so you can rein in the edges of your systems with this is in particular this is automatic instrumentation you can",
    "start": "300199",
    "end": "305680"
  },
  {
    "text": "also do a whole lot more and so one example I want to bring about bring in about the early uh the introduction of",
    "start": "305680",
    "end": "312960"
  },
  {
    "text": "this journey is with a company called intercom who's one of our customers uh there's probably some of you who are",
    "start": "312960",
    "end": "318240"
  },
  {
    "text": "using intercom there may be somebody in the audience who works for intercom uh intercom is sort of like a support chat",
    "start": "318240",
    "end": "323639"
  },
  {
    "text": "system and and like there's sort of a thing that you can embed as a part of your your product and have a good support system and build like product",
    "start": "323639",
    "end": "330840"
  },
  {
    "text": "tours and that kind of stuff um their app was a big old modali and a handful",
    "start": "330840",
    "end": "336800"
  },
  {
    "text": "of smaller services that they kind of broke out here and there but they hadn't really fully gone the whole microservices route and they didn't",
    "start": "336800",
    "end": "343120"
  },
  {
    "text": "really have a desire to do that either they had a lot of structured logs but they didn't have good tracing and so",
    "start": "343120",
    "end": "348240"
  },
  {
    "text": "they decided to adopt it and so they started just by instrumenting API calls database calls and eventually getting",
    "start": "348240",
    "end": "354120"
  },
  {
    "text": "into instrumenting their service themselves and uh they wrote a wonderful blog post that you can Google about",
    "start": "354120",
    "end": "359520"
  },
  {
    "text": "about where it it really transformed their their internal engineering where",
    "start": "359520",
    "end": "364600"
  },
  {
    "text": "in fact they they didn't even necessarily use tracing to be like okay this is how we're going to diagnose the",
    "start": "364600",
    "end": "369960"
  },
  {
    "text": "problems that our users are reporting but even onboard new users and understand just how this thing is",
    "start": "369960",
    "end": "375319"
  },
  {
    "text": "working in the first place when a user comes in what's the journey that it actually takes like this request which",
    "start": "375319",
    "end": "380840"
  },
  {
    "text": "other services does it hit which database does it hit what are the paths within the monolith itself that it actually goes through and distributed",
    "start": "380840",
    "end": "387840"
  },
  {
    "text": "tracing actually ended up becoming a way to just simply better understand their systems in the first place so they can",
    "start": "387840",
    "end": "393280"
  },
  {
    "text": "improve them more effectively rather than just sort of trying to be like well I know what this function does and I",
    "start": "393280",
    "end": "398479"
  },
  {
    "text": "kind of know what this function does but I don't really know if one calls the other in this big old superp of code that we got going on here and in fact",
    "start": "398479",
    "end": "405319"
  },
  {
    "text": "there their Journey here would took about a year uh they iterated a whole lot and so like you know it wasn't you",
    "start": "405319",
    "end": "411919"
  },
  {
    "text": "know one day they had a whole bunch of amazing instrumentation it was sort of a little bit more and more every single",
    "start": "411919",
    "end": "417479"
  },
  {
    "text": "week and they eventually got to the point where now they have really really rich tracing",
    "start": "417479",
    "end": "423440"
  },
  {
    "text": "instrumentation and so I want to talk about that a little bit this you can call it tracing for a monolith but it's",
    "start": "423440",
    "end": "429440"
  },
  {
    "text": "really just tracing for a single Service uh that in fact the the principles that apply to tracing a distributed service",
    "start": "429440",
    "end": "437199"
  },
  {
    "text": "are the same that you would apply to pretty much any other service that you're doing whether it's a small service inside of what you're doing",
    "start": "437199",
    "end": "443840"
  },
  {
    "text": "because you want to onboard tracing for the first time or if you're fully bought into the idea of tracing and you want to distribute you want to trace your very",
    "start": "443840",
    "end": "450960"
  },
  {
    "text": "large uh monolith that you have going on there I'll call out a few examples along the",
    "start": "450960",
    "end": "456160"
  },
  {
    "text": "way so if there's one thing that I want you to take away from this talk if",
    "start": "456160",
    "end": "461240"
  },
  {
    "text": "you've not done tracing before is that traces are just better structured logs right in fact a trace is actually a",
    "start": "461240",
    "end": "467720"
  },
  {
    "text": "collection of what these things that are called spans and a span is just a structured log that has some IDs on it",
    "start": "467720",
    "end": "473639"
  },
  {
    "text": "and the collection of those IDs allow for you to Define an order of operations and a parent child hierarchy in your",
    "start": "473639",
    "end": "480240"
  },
  {
    "text": "system so you can understand that okay these are the operations that occur within a given request and this is the",
    "start": "480240",
    "end": "486520"
  },
  {
    "text": "order in which they occur and so there's a name because everything needs to have a name there's",
    "start": "486520",
    "end": "492639"
  },
  {
    "text": "a span ID which represents the the operation that is actually being performed that span may represent the",
    "start": "492639",
    "end": "499039"
  },
  {
    "text": "entirety of a request or it just may represent a single function call there's a parent span ID so it knows what what",
    "start": "499039",
    "end": "506000"
  },
  {
    "text": "came before it so you can Define that order of operations key value pairs of data this is the log part right",
    "start": "506000",
    "end": "511680"
  },
  {
    "text": "basically there's a name and then a value and a name and a value and you want to add as many of those things as you want and then there's a list of what",
    "start": "511680",
    "end": "517800"
  },
  {
    "text": "are called span events and span links these are not really necessary per se but they can often be really helpful in",
    "start": "517800",
    "end": "524240"
  },
  {
    "text": "modeling certain parts of your system so especially with span events they they sort of represent a moment in time that",
    "start": "524240",
    "end": "530720"
  },
  {
    "text": "something occurred within the context of an operation and you want that Tim stamp and maybe some other metadata associated",
    "start": "530720",
    "end": "537399"
  },
  {
    "text": "with that that operation that happened this is a really easy thing that you can just attach to a span so it's like",
    "start": "537399",
    "end": "542959"
  },
  {
    "text": "structured logs but it's better it's more powerful it's got a lot of goodies baked in and open Telemetry defines all",
    "start": "542959",
    "end": "548880"
  },
  {
    "text": "of these things across 11 different languages that are fully supported so it's something that you can frankly get started with",
    "start": "548880",
    "end": "556279"
  },
  {
    "text": "today I like to show people this visual representation which again actually came",
    "start": "556440",
    "end": "561920"
  },
  {
    "text": "from intercom engineering this is from the blog post that I mentioned earlier um on the left hand side you can see a",
    "start": "561920",
    "end": "569240"
  },
  {
    "text": "big in incomprehensible soup of text this is actually their structured logs",
    "start": "569240",
    "end": "574839"
  },
  {
    "text": "um before they added traces and so there's a lot of actually really useful information in there I'm not going to",
    "start": "574839",
    "end": "580760"
  },
  {
    "text": "try to zoom in so you can actually see what's in there uh it's pretty incomprehensible in fact you you might notice there's some colors in there they",
    "start": "580760",
    "end": "586880"
  },
  {
    "text": "they tried to color code one thing and another thing so they can kind of visually distinguish hey there was this operation and this other operation stuff",
    "start": "586880",
    "end": "593440"
  },
  {
    "text": "like that that's a losing game like that that's really really hard for you to parse imagine a user is reporting",
    "start": "593440",
    "end": "599680"
  },
  {
    "text": "something wrong and like you have to just stare into that thing for for minutes hours maybe and try to",
    "start": "599680",
    "end": "606640"
  },
  {
    "text": "understand what the heck is happening now um so when they transitioned over to tracing the right hand side this is a",
    "start": "606640",
    "end": "612399"
  },
  {
    "text": "trace within honeycomb but you can get the same visualization pretty much any tool that supports tracing um you can",
    "start": "612399",
    "end": "618360"
  },
  {
    "text": "see there's there's there's a hierarchy there and actually operations that are that are nested and uh it's this order",
    "start": "618360",
    "end": "624600"
  },
  {
    "text": "of operations and hierarchy that tracing builds in for you that really helps with understandability of the system so it's",
    "start": "624600",
    "end": "631480"
  },
  {
    "text": "not just that function a calls function B but rather function a and function B",
    "start": "631480",
    "end": "637680"
  },
  {
    "text": "are operating as a part of a hierarchy that's actually contained within this other thing that's happening and so um",
    "start": "637680",
    "end": "644360"
  },
  {
    "text": "there's a whole bunch of nice little visual tricks that you can do with a tracing tool like understand okay this",
    "start": "644360",
    "end": "649480"
  },
  {
    "text": "like sub hierarchy is uninteresting to me so I can just collapse it and move on to the next thing and you can't do that",
    "start": "649480",
    "end": "656120"
  },
  {
    "text": "when you have this flat list of structured logs that you're looking",
    "start": "656120",
    "end": "662079"
  },
  {
    "text": "at so this is kind of conceptual um how how to trace a single service is what I",
    "start": "662560",
    "end": "670519"
  },
  {
    "text": "would I like to call it it's simple but not necessarily easy so it's simple in that there's very few steps that you",
    "start": "670519",
    "end": "676720"
  },
  {
    "text": "actually need to take a lot of those steps need to be repeated in the context of your application and the information",
    "start": "676720",
    "end": "684200"
  },
  {
    "text": "that you end up capturing in your traces is going to vary from parts of your application to other parts of your",
    "start": "684200",
    "end": "690120"
  },
  {
    "text": "application from system to system and from Team to team um",
    "start": "690120",
    "end": "695480"
  },
  {
    "text": "so there's this is probably one of the easiest things to actually Google if you go to open Telemetry let's say you have",
    "start": "695480",
    "end": "701160"
  },
  {
    "text": "a Java service right get started open Telemetry Java we have a really thorough",
    "start": "701160",
    "end": "706200"
  },
  {
    "text": "doc site that tells you how to add automatic instrumentation and this is kind of the first step that you want to",
    "start": "706200",
    "end": "711440"
  },
  {
    "text": "take whenever you want to start instrumenting a single service is there's a couple different languages support actually uh modifying um a well",
    "start": "711440",
    "end": "720079"
  },
  {
    "text": "adding that instrument adding that instrumentation without modifying a service itself so in the case of java",
    "start": "720079",
    "end": "725360"
  },
  {
    "text": "there's a Java agent that you can load as a sidecar that will instrument all incoming requests and outgoing responses",
    "start": "725360",
    "end": "731519"
  },
  {
    "text": "things like calling a Kafka cluster pretty much anything where there's a library that you use to interact with another part of a system it will",
    "start": "731519",
    "end": "737760"
  },
  {
    "text": "instrument that and create spans for you automatically this is true for Java this is true for python this is true forn net",
    "start": "737760",
    "end": "744839"
  },
  {
    "text": "this is true for node this is true now also for go services and um if if you",
    "start": "744839",
    "end": "750600"
  },
  {
    "text": "don't if if if you don't want to use an agent or if you can't use an agent for whatever reason maybe the language",
    "start": "750600",
    "end": "756199"
  },
  {
    "text": "doesn't support it right now uh there are instrumentation libraries that accomplish the same thing so it's a",
    "start": "756199",
    "end": "761399"
  },
  {
    "text": "little bit more work but basically you just initialize open Telemetry with these libraries you sort of register",
    "start": "761399",
    "end": "766519"
  },
  {
    "text": "like Hey we're doing a spring boot application so we're just going to instrument string boot requests and",
    "start": "766519",
    "end": "772079"
  },
  {
    "text": "that's it and you don't have to go and figure out how you're going to like parse this this this header data and that kind of stuff it just sort of takes",
    "start": "772079",
    "end": "778000"
  },
  {
    "text": "care of that for you and so critically what this Auto instrumentation and instrumentation Library stuff does is it",
    "start": "778000",
    "end": "786600"
  },
  {
    "text": "creates the structure of your entire application or the skeleton if you will so you can now start answering those",
    "start": "786600",
    "end": "793079"
  },
  {
    "text": "questions from earlier like which requests have the slow database calls or",
    "start": "793079",
    "end": "798920"
  },
  {
    "text": "if I'm calling this external service is that external service the thing that's slowing down it'll tell you on a service",
    "start": "798920",
    "end": "803959"
  },
  {
    "text": "by service basis which things are slow um and it'll allow you with an observability tool to actually calculate",
    "start": "803959",
    "end": "809320"
  },
  {
    "text": "a lot of useful information like average request latency and average error rates",
    "start": "809320",
    "end": "814800"
  },
  {
    "text": "and that kind of stuff and things that you would normally try to get from a metrics based solution you can actually",
    "start": "814800",
    "end": "820040"
  },
  {
    "text": "derive from these traces directly which I think is really powerful because that allows you to stick with tracing as your",
    "start": "820040",
    "end": "827399"
  },
  {
    "text": "primary way to do instrumentation but then once you want to once you do that you're going to want",
    "start": "827399",
    "end": "834680"
  },
  {
    "text": "to get a lot more useful information out so it's not just slow requests that you want to care about but there's",
    "start": "834680",
    "end": "841519"
  },
  {
    "text": "particularly users that are involved with those requests or let's say you have an iot based system there's",
    "start": "841519",
    "end": "846800"
  },
  {
    "text": "particular device IDs that might be experiencing if you you can imagine an iot device experiencing something but",
    "start": "846800",
    "end": "853880"
  },
  {
    "text": "experiencing like slow database requests or bad behavior or something like that and you want to be able to start slicing",
    "start": "853880",
    "end": "861399"
  },
  {
    "text": "your data based off of that application context rather than just what's going on at the edges of your system so I like to",
    "start": "861399",
    "end": "868279"
  },
  {
    "text": "think of it as sort of like layer one and Layer Two problems so like layer One problems are like at the edges of my",
    "start": "868279",
    "end": "873920"
  },
  {
    "text": "system is everything doing okay but then now I want to dig into like my actual application and the way you do that is",
    "start": "873920",
    "end": "880000"
  },
  {
    "text": "by using the open Telemetry API which again is very simple to add or at least",
    "start": "880000",
    "end": "885639"
  },
  {
    "text": "start using right once you add automatic instrumentation what that will do is it will initialize open Telemetry in that",
    "start": "885639",
    "end": "891839"
  },
  {
    "text": "process and so then you can use the open Telemetry SDK to access those apis and",
    "start": "891839",
    "end": "898440"
  },
  {
    "text": "you can can start creating spans and the mental model that you want to follow is whenever you think ah yeah",
    "start": "898440",
    "end": "905480"
  },
  {
    "text": "we should log this thing that's sort of a sign that you should either create a span or add data to an existing span um",
    "start": "905480",
    "end": "913720"
  },
  {
    "text": "it's kind of up to you if you want to represent an operation as a span itself or just capture key value pairs in an",
    "start": "913720",
    "end": "919639"
  },
  {
    "text": "existing span uh this is where it's simple but not necessarily easy because this is going to be getting into the",
    "start": "919639",
    "end": "925079"
  },
  {
    "text": "domain of your application right you want to create a span at the start a function or a method to sort of track",
    "start": "925079",
    "end": "930639"
  },
  {
    "text": "you can think of it as like tracking the operation itself and within that operation you can attach as much",
    "start": "930639",
    "end": "935920"
  },
  {
    "text": "arbitrary meta dat as you like in fact you can use span events to say oh crap this thing happened right now and we're",
    "start": "935920",
    "end": "942160"
  },
  {
    "text": "just going to add that data to the span and then end it and then Tada we're good to go um that's going to be more",
    "start": "942160",
    "end": "948000"
  },
  {
    "text": "challenging for a large service because you may not necessarily own the part of",
    "start": "948000",
    "end": "953199"
  },
  {
    "text": "the code that you want to instrument and so that's why I'm continuing to say the word simple but not necessarily easy",
    "start": "953199",
    "end": "959480"
  },
  {
    "text": "um especially when you want to instrument deeply such that you can use that instrumentation to understand your",
    "start": "959480",
    "end": "965920"
  },
  {
    "text": "whole system that's when you're going to need to get a lot more team members involved instead of just willy-nilly throwing spans around and hoping things",
    "start": "965920",
    "end": "972639"
  },
  {
    "text": "work out and so there's sort of a secondary way to do this or rather additional way",
    "start": "972639",
    "end": "978920"
  },
  {
    "text": "I guess that kind of depends on the size of the service so um hopefully if you have a big monolith",
    "start": "978920",
    "end": "986000"
  },
  {
    "text": "it is at least organized into different modules or if you're following like the mountain the Martin Fowler uh kind of",
    "start": "986000",
    "end": "991519"
  },
  {
    "text": "spiel about bounded context sort of like defining organizational boundaries within your application those",
    "start": "991519",
    "end": "998120"
  },
  {
    "text": "organization May map to like they may map to specific teams or they just might be domain organization but regardless",
    "start": "998120",
    "end": "1004639"
  },
  {
    "text": "there's a way that you can also represent that in your Telemetry when you're creating spans within that single service um the easiest way to do that is",
    "start": "1004639",
    "end": "1012079"
  },
  {
    "text": "to add an attribute to a span that you create this is metadata that basically defines that name that name can come",
    "start": "1012079",
    "end": "1018639"
  },
  {
    "text": "from configuration it can be defined programmatically such as if you're using net you can just say the current name of",
    "start": "1018639",
    "end": "1024400"
  },
  {
    "text": "the assembly and if you organize your modules into assemblies which a lot of net applications do this is a great way",
    "start": "1024400",
    "end": "1029480"
  },
  {
    "text": "to do that or you can even just Define this as a required parameter whenever somebody wants to create a span in a",
    "start": "1029480",
    "end": "1035678"
  },
  {
    "text": "trace you can just say okay what is the bounded context that we're in or what's the name of the module that we're in and",
    "start": "1035679",
    "end": "1041918"
  },
  {
    "text": "the reason why you want to do this is because it allows you to slice this data",
    "start": "1041919",
    "end": "1047199"
  },
  {
    "text": "based off of that app context that you're in so um this is",
    "start": "1047199",
    "end": "1053400"
  },
  {
    "text": "very analogous to services in distributed tracing so with the full distributed tracing assuming you're like",
    "start": "1053400",
    "end": "1059400"
  },
  {
    "text": "in a microservices world every span has what's called a service name on it it's actually defined as what's called a",
    "start": "1059400",
    "end": "1064919"
  },
  {
    "text": "resource but you know I won't get into that basically whenever you create spans inside of a process it has a thing called service. name and so that allows",
    "start": "1064919",
    "end": "1071919"
  },
  {
    "text": "you to say okay well you which of my services are the slow ones and you can sort of like stack Rank by services like",
    "start": "1071919",
    "end": "1077480"
  },
  {
    "text": "latency and errors and that kind of stuff that's great if you have lots of different services but when you're inside of a single service that big",
    "start": "1077480",
    "end": "1084000"
  },
  {
    "text": "chunky boy that you got there is a lot of different modules inside of it well",
    "start": "1084000",
    "end": "1089240"
  },
  {
    "text": "organizing by service isn't necessarily the most meaningful thing in the world because well it's all in the same",
    "start": "1089240",
    "end": "1094360"
  },
  {
    "text": "service so how do you do that well this is sort of recreating that thing um and what's great is the open Telemetry API",
    "start": "1094360",
    "end": "1101120"
  },
  {
    "text": "makes this extremely easy to do and you can then use certain language constructs such as assembly name forn net or if you",
    "start": "1101120",
    "end": "1107520"
  },
  {
    "text": "can get the package name Java or if it's even just a file that gets loaded at that point in time uh that gets",
    "start": "1107520",
    "end": "1113120"
  },
  {
    "text": "configured externally um regardless you then have an organizational attribute on",
    "start": "1113120",
    "end": "1118200"
  },
  {
    "text": "every single span that you can then start to slice and dice your data by and so this is really helpful when your",
    "start": "1118200",
    "end": "1124200"
  },
  {
    "text": "monolith is has its boundaries defined by different teams and you can actually even have that organizational context be",
    "start": "1124200",
    "end": "1131039"
  },
  {
    "text": "like a team name or a team ID and so then you can start to use sort of like the the the organization of your your",
    "start": "1131039",
    "end": "1137720"
  },
  {
    "text": "own company to your advantage when you start looking at things so you can say oh Welles is my team the one that owns",
    "start": "1137720",
    "end": "1143520"
  },
  {
    "text": "the service or is it another team that owns the service uh we we see that quite a bit actually with some of our",
    "start": "1143520",
    "end": "1148720"
  },
  {
    "text": "customers where they they just attach literally like the name of the team to the instrumentation that they're",
    "start": "1148720",
    "end": "1154120"
  },
  {
    "text": "capturing and then they're able to very quickly hunt down okay this thing that's slow right now that I'm observing is",
    "start": "1154120",
    "end": "1159240"
  },
  {
    "text": "this team I'm going to go and talk to them um if you don't have that ability it can be really hard to hunt down who",
    "start": "1159240",
    "end": "1165200"
  },
  {
    "text": "the right person is for something and so encoding that into your instrument mation is actually fairly easy to accomplish but it really it really",
    "start": "1165200",
    "end": "1172000"
  },
  {
    "text": "really pays off in the long run and so I want to show you a visualization of an in process span this",
    "start": "1172000",
    "end": "1179320"
  },
  {
    "text": "is actually from honeycomb itself um this is a feature that we have called uh",
    "start": "1179320",
    "end": "1185000"
  },
  {
    "text": "it's called query assistant it's it's just so we have this big service it's called poodle um it's named after a dog",
    "start": "1185000",
    "end": "1191360"
  },
  {
    "text": "I don't know why but it's named after a dog this poodle service does a bunch of stuff it basically is the thing that",
    "start": "1191360",
    "end": "1196760"
  },
  {
    "text": "like Powers our entire UI um there's all kinds of different traces that are shot off from all kinds of",
    "start": "1196760",
    "end": "1202679"
  },
  {
    "text": "different user interactions um and so it it basically is a monolith um so one",
    "start": "1202679",
    "end": "1208960"
  },
  {
    "text": "specific piece of that is this feature that I worked on where you can type a little thing into a box hit a button and",
    "start": "1208960",
    "end": "1214919"
  },
  {
    "text": "then it goes and it executes a query for someone so that itself maybe somebody",
    "start": "1214919",
    "end": "1220440"
  },
  {
    "text": "new is coming in they're like oh there there was a bug in this feature um how do I know how this thing works how many",
    "start": "1220440",
    "end": "1226600"
  },
  {
    "text": "operations does it actually do well answerers it does 48 and any of those 48",
    "start": "1226600",
    "end": "1232000"
  },
  {
    "text": "steps could potentially go wrong or something could be slow in fact within those 48 steps we make another Network",
    "start": "1232000",
    "end": "1237400"
  },
  {
    "text": "call we call into another subsystem uh we we get a bunch of like schema information from our database and stuff",
    "start": "1237400",
    "end": "1243480"
  },
  {
    "text": "like that like there's a lot of ways that this this is actually kind of a complex feature there's a lot of ways that it could be subtly wrong or we",
    "start": "1243480",
    "end": "1249039"
  },
  {
    "text": "could introduce a new bug or something like that and God helps somebody who's new on the team if they did not have",
    "start": "1249039",
    "end": "1254480"
  },
  {
    "text": "this instrumentation in the first place to understand where something is SL slow or where something might be erroring out",
    "start": "1254480",
    "end": "1260600"
  },
  {
    "text": "or even if like the wrong decision is being made somewhere within that soup of",
    "start": "1260600",
    "end": "1265880"
  },
  {
    "text": "function calls that we're that we're doing and so this is extremely helpful",
    "start": "1265880",
    "end": "1272240"
  },
  {
    "text": "um for onboarding but then also really understanding sort of where your your latency and your errors lie in so in",
    "start": "1272240",
    "end": "1278039"
  },
  {
    "text": "this case we had an operation that actually took what 8 seconds that's actually quite a",
    "start": "1278039",
    "end": "1283480"
  },
  {
    "text": "bit and and about four of those seconds Lie from the the the middle of this thing and so that already gives me a",
    "start": "1283480",
    "end": "1288679"
  },
  {
    "text": "sort of an indicator of like okay half the latency is coming from this one spot maybe we're not making the right API",
    "start": "1288679",
    "end": "1294640"
  },
  {
    "text": "call here or maybe we could actually improve the way that we're making this API call and this is sort of just",
    "start": "1294640",
    "end": "1300080"
  },
  {
    "text": "immediately visually evident from this sort of thing and um all of this is from frankly not a whole lot of effort to",
    "start": "1300080",
    "end": "1306720"
  },
  {
    "text": "instrument manually with open Telemetry apis so I've talked a lot about",
    "start": "1306720",
    "end": "1313840"
  },
  {
    "text": "instrumenting with spans and traces but um chances are you probably got a bunch",
    "start": "1313840",
    "end": "1319120"
  },
  {
    "text": "of logs in your monolith and you shouldn't have to throw them away this is um uh we worked with one customer in",
    "start": "1319120",
    "end": "1326720"
  },
  {
    "text": "particular who really wanted to stress this where uh they had a big monolith they the the company's name is loan",
    "start": "1326720",
    "end": "1332279"
  },
  {
    "text": "Market they're based in Australia um they were completely sold on the idea of",
    "start": "1332279",
    "end": "1337880"
  },
  {
    "text": "distributed tracing adding traces they're like yeah we get it we get it this is what we're going to do but we",
    "start": "1337880",
    "end": "1343279"
  },
  {
    "text": "have a big Legacy of logs that have been useful for us in the past and if you tell us that we can't use that then",
    "start": "1343279",
    "end": "1350400"
  },
  {
    "text": "you're not going to get our business I mean that's uh so like open Telemetry",
    "start": "1350400",
    "end": "1355799"
  },
  {
    "text": "has recognized this fact okay like this this has been this has been the case since the Inception of open Telemetry",
    "start": "1355799",
    "end": "1361320"
  },
  {
    "text": "but now I think is a really really really good time to start adopting because of a concept called the open",
    "start": "1361320",
    "end": "1367440"
  },
  {
    "text": "Telemetry logs Bridge so it used to be called the logs API it got renamed to the logs bridge to",
    "start": "1367440",
    "end": "1373120"
  },
  {
    "text": "better represent what this thing does so the idea is that for a given logging",
    "start": "1373120",
    "end": "1378919"
  },
  {
    "text": "framework let's say again you you've got a big old net application it's using the",
    "start": "1378919",
    "end": "1384200"
  },
  {
    "text": "um Microsoft NET logging framework which is kind of the standard one that most people do to uh to construct uh",
    "start": "1384200",
    "end": "1390440"
  },
  {
    "text": "structured logs um what open Telemetry will do is you initialize a trace within",
    "start": "1390440",
    "end": "1397720"
  },
  {
    "text": "that same process so that can come from automatic instrumentation or you can just do that manually on your own it's",
    "start": "1397720",
    "end": "1403520"
  },
  {
    "text": "kind of up to you but then in memory there's this object called Trace content",
    "start": "1403520",
    "end": "1409039"
  },
  {
    "text": "and so Trace context is the thing that contains that Trace ID and that span ID that sort of tracks like what the",
    "start": "1409039",
    "end": "1415799"
  },
  {
    "text": "operation is at this moment in time that same object is then like serialized and deserialized at process boundaries and",
    "start": "1415799",
    "end": "1422640"
  },
  {
    "text": "that's what sort of creates that trace for you as you start creating these structured logs that we call spans um",
    "start": "1422640",
    "end": "1429400"
  },
  {
    "text": "within a process and so what it does is it actually intercepts that log as you call",
    "start": "1429400",
    "end": "1435159"
  },
  {
    "text": "it and it wraps the body of that log with the span ID and the trace ID and so",
    "start": "1435159",
    "end": "1440279"
  },
  {
    "text": "it's like kind of creating a new span almost it's not quite a span because the",
    "start": "1440279",
    "end": "1445600"
  },
  {
    "text": "duration part is missing there's a couple other things that are sort of missing but critically the body of that",
    "start": "1445600",
    "end": "1450840"
  },
  {
    "text": "structured log that you may have created is now directly correlated with the trace that you have and so that means",
    "start": "1450840",
    "end": "1457640"
  },
  {
    "text": "that you may not have like the ideal world of really rich tracing instrumentation going through your your",
    "start": "1457640",
    "end": "1464039"
  },
  {
    "text": "your application but you're kind of halfway there and that automatic correlation is what's",
    "start": "1464039",
    "end": "1470200"
  },
  {
    "text": "really really important because then you can start saying okay I know I have this useful application context in my logs I",
    "start": "1470200",
    "end": "1476200"
  },
  {
    "text": "just need to know what was the request that came in or what was you know this other information that that's existing",
    "start": "1476200",
    "end": "1482360"
  },
  {
    "text": "inside of my spans and like maybe I can even correlate that with things that are happening Downstream like database calls",
    "start": "1482360",
    "end": "1488679"
  },
  {
    "text": "that are going on and so this logs bridge I think is going to be an extremely important concept for the",
    "start": "1488679",
    "end": "1495440"
  },
  {
    "text": "majority of Legacy applications to start on boarding on open Telemetry I'm here to say that like Now's the Time to start",
    "start": "1495440",
    "end": "1502480"
  },
  {
    "text": "looking to see if your logging framework is supported because this is stable uh and this is stable in the spec this is",
    "start": "1502480",
    "end": "1508640"
  },
  {
    "text": "stable in the the transport layer and that means that uh framework support is starting to onboard across all the",
    "start": "1508640",
    "end": "1514720"
  },
  {
    "text": "different languages right now and so what you do with that and",
    "start": "1514720",
    "end": "1519840"
  },
  {
    "text": "this is what our customer uh loan Market did is they use this as a basis for",
    "start": "1519840",
    "end": "1524960"
  },
  {
    "text": "slowly and gradually migrating stuff over to traces or sorry spans I should say but on their own time and when they",
    "start": "1524960",
    "end": "1531240"
  },
  {
    "text": "felt like it when they had time right the value proposition of observability was not to throw everything away and",
    "start": "1531240",
    "end": "1538440"
  },
  {
    "text": "start all over again but this time with distributed tracing because everybody says it's better no it was to keep",
    "start": "1538440",
    "end": "1545520"
  },
  {
    "text": "sending your logs where you're sending them in fact in this case they would eventually send them over to to Honeycomb or you know another tool um",
    "start": "1545520",
    "end": "1552080"
  },
  {
    "text": "alongside their their traces but they didn't have to interrupt that workflow they didn't have to stop the what their",
    "start": "1552080",
    "end": "1557799"
  },
  {
    "text": "devs were doing already to diagnose problems and they could figure out their own migration story and so that thing",
    "start": "1557799",
    "end": "1564000"
  },
  {
    "text": "that I mentioned before where anytime you kind of have you say oh well I want to log this thing and you want to go and",
    "start": "1564000",
    "end": "1569720"
  },
  {
    "text": "create a span what they would do is uh one of their one of their leads started",
    "start": "1569720",
    "end": "1575120"
  },
  {
    "text": "to look at all the different places where they were logging things and said okay well this one's actually really important like these other things maybe",
    "start": "1575120",
    "end": "1581480"
  },
  {
    "text": "not so important so I'm going to focus on the important area and I'm going to turn that structured log into a span and",
    "start": "1581480",
    "end": "1588120"
  },
  {
    "text": "then I'm just going to repeat that process again and again and so I where they are right now is that they have",
    "start": "1588120",
    "end": "1593279"
  },
  {
    "text": "migrated a decent number of their structured logs over to spans and so their tracers are getting richer and richer but critically there's really no",
    "start": "1593279",
    "end": "1600440"
  },
  {
    "text": "loss of information throughout that entire process now um what that has actually meant for them and this would",
    "start": "1600440",
    "end": "1606840"
  },
  {
    "text": "actually mean for you if you were to do this too is that your workflow for looking at a trace and then looking at",
    "start": "1606840",
    "end": "1612799"
  },
  {
    "text": "like a correlated log might be a little bit disjoint sometimes it's kind of it depends on the observability tool that",
    "start": "1612799",
    "end": "1619279"
  },
  {
    "text": "you're using um you know honeycomb is supports the ability to like look at this kind of stuff but when you're",
    "start": "1619279",
    "end": "1625159"
  },
  {
    "text": "looking at a log versus part of a trace it it kind of you have to like use our UI in a particular way that's sometimes",
    "start": "1625159",
    "end": "1630799"
  },
  {
    "text": "not the most optimal and frankly I think most observability tools are kind of like this too uh some will support a way",
    "start": "1630799",
    "end": "1636679"
  },
  {
    "text": "to sort of like go to like the logs database and then it'll but because it's",
    "start": "1636679",
    "end": "1641760"
  },
  {
    "text": "correlated it'll actually take you to the right thing so you don't have to go and search for it um so it's not all",
    "start": "1641760",
    "end": "1647559"
  },
  {
    "text": "unicorns and rainbows right like you're going to be migrating migrations are kind of messy um but you can actually do",
    "start": "1647559",
    "end": "1655279"
  },
  {
    "text": "it and you don't need to like have this question of like oh well if I add tracing is that going to be compatible",
    "start": "1655279",
    "end": "1662240"
  },
  {
    "text": "with like everything else that we're doing uh that's not a question that you have to ask and so um to be honest in",
    "start": "1662240",
    "end": "1668320"
  },
  {
    "text": "the otel community I don't think we've really figured out what a good migration story should look like for organizations",
    "start": "1668320",
    "end": "1674279"
  },
  {
    "text": "and this is where I think a lot of us would like some of your help if you're in the process process of migrating a uh",
    "start": "1674279",
    "end": "1680799"
  },
  {
    "text": "a monolithic service over to tracing with open Telemetry we would absolutely",
    "start": "1680799",
    "end": "1686640"
  },
  {
    "text": "love to hear from you and try to understand all the problems that you're having um if you're motivated by this",
    "start": "1686640",
    "end": "1691760"
  },
  {
    "text": "talk to go and do that yes absolutely please I would personally love to hear like what your what your issues are and",
    "start": "1691760",
    "end": "1697840"
  },
  {
    "text": "um in particular I want to try to get a lot of these common things documented in the open Telemetry website so that you",
    "start": "1697840",
    "end": "1703360"
  },
  {
    "text": "know the next people who go and start to add better instrumentation to their monoliths don't have to run into a",
    "start": "1703360",
    "end": "1710000"
  },
  {
    "text": "variety of stumbling blocks that might be common across lots of different orgs so I want to end with just a few",
    "start": "1710000",
    "end": "1718480"
  },
  {
    "text": "takeaways that you can take back to your team so traces are for monoliths right",
    "start": "1718480",
    "end": "1724320"
  },
  {
    "text": "if you see the phrase distributed traces and somebody says yeah that's what you do for microservices that's not necessarily",
    "start": "1724320",
    "end": "1731440"
  },
  {
    "text": "wrong but it's not really inclusive to the fact that there's really nothing",
    "start": "1731440",
    "end": "1736760"
  },
  {
    "text": "about Trace ing that is inherently for microservices or against monoliths",
    "start": "1736760",
    "end": "1742440"
  },
  {
    "text": "they're sort of one and the same and in fact the practices and the idioms around",
    "start": "1742440",
    "end": "1748679"
  },
  {
    "text": "tracing apply just as much to a monolithic Service as they do to a widely distributed set of",
    "start": "1748679",
    "end": "1755799"
  },
  {
    "text": "microservices um you don't need a ton of services to get value you can ask even really basic questions with tracing that",
    "start": "1755799",
    "end": "1762159"
  },
  {
    "text": "you couldn't ask before uh at least not without a lot of effort with your logs",
    "start": "1762159",
    "end": "1767200"
  },
  {
    "text": "um you can start with one service get value out of that and incrementally add more um in fact there there's",
    "start": "1767200",
    "end": "1773360"
  },
  {
    "text": "Technologies where now in like if you're running everything in kubernetes you can use the kubernetes operator that will",
    "start": "1773360",
    "end": "1778600"
  },
  {
    "text": "Auto instrument every single service inside of a cluster uh so that's really kind of a great option but that's",
    "start": "1778600",
    "end": "1784159"
  },
  {
    "text": "sometimes not the reality that a lot of people live in where like part of stuff is in kubernetes some stuff is not necessarily in kubernetes um but",
    "start": "1784159",
    "end": "1791399"
  },
  {
    "text": "regardless you have a lot of options available to you and I would say that like if you can adopt them mindset that",
    "start": "1791399",
    "end": "1798840"
  },
  {
    "text": "structured logs are or rather I should say traces are a superior like better",
    "start": "1798840",
    "end": "1804600"
  },
  {
    "text": "form of structured logs because they have an order of operations and a hierarchy associated with them then it",
    "start": "1804600",
    "end": "1811320"
  },
  {
    "text": "can actually be fairly easy to get a team to on board with this kind of stuff especially when they can see that that",
    "start": "1811320",
    "end": "1816679"
  },
  {
    "text": "Trace waterfall for the first time and really sort of see okay this is what my service is really doing and lastly um",
    "start": "1816679",
    "end": "1824600"
  },
  {
    "text": "you bring your Logs with you with the logb JPI this was something that was not",
    "start": "1824600",
    "end": "1829919"
  },
  {
    "text": "really true about two years ago maybe even a year ago arguably there was a little bit of support a year ago but it was kind of",
    "start": "1829919",
    "end": "1836399"
  },
  {
    "text": "it was kind of janky and not that not that widespread um now is the time to start looking into if if it's actually",
    "start": "1836399",
    "end": "1842200"
  },
  {
    "text": "supporting your logging Frameworks or not now um it may be the case that your particular logging framework is not",
    "start": "1842200",
    "end": "1847600"
  },
  {
    "text": "supported by the logged Bridge uh standard in in otel and that's fine um",
    "start": "1847600",
    "end": "1853080"
  },
  {
    "text": "you know check back in a couple different months or just go ahead and proceed and go ahead and add tracing",
    "start": "1853080",
    "end": "1858799"
  },
  {
    "text": "anyways and like look at your logs in one place look at your traces in another place it's kind of a messy world but it",
    "start": "1858799",
    "end": "1864080"
  },
  {
    "text": "might be better than not adding that tracing in the first place so that's what I got um I have a",
    "start": "1864080",
    "end": "1872080"
  },
  {
    "text": "little bit of extra time for questions so please feel free to ask",
    "start": "1872080",
    "end": "1878120"
  },
  {
    "text": "[Applause] them hi uh thanks for the overview is",
    "start": "1880990",
    "end": "1888480"
  },
  {
    "text": "really helpful uh one question I have is around more like Legacy monoliths uh my",
    "start": "1888480",
    "end": "1894039"
  },
  {
    "text": "experience and maybe others is older monoliths tend to adopt a polling architecture where they're like polling",
    "start": "1894039",
    "end": "1900320"
  },
  {
    "text": "the DB or pulling some API or something and creating a lot of noise and so it creates a barrier to entry for like Auto",
    "start": "1900320",
    "end": "1905840"
  },
  {
    "text": "instrumentation because then you just end up with like a mess of useless traces that you have to sample out or it",
    "start": "1905840",
    "end": "1911559"
  },
  {
    "text": "it raises the barriered entry do you have any suggestions on um how you can",
    "start": "1911559",
    "end": "1917279"
  },
  {
    "text": "board to tracing still in kind of an auto instrumentation way uh without",
    "start": "1917279",
    "end": "1923440"
  },
  {
    "text": "necessarily having to tackle architectural constraints and all of that up front it's a good question so uh",
    "start": "1923440",
    "end": "1929519"
  },
  {
    "text": "for anyone who didn't necessarily hear the question was that sometimes a lot of monoliths have architectural patterns like polling a database all the time um",
    "start": "1929519",
    "end": "1937240"
  },
  {
    "text": "instead of just like calling it when it needs to call it and that can potentially create issues when you add tracing um so yeah I mean I think",
    "start": "1937240",
    "end": "1944360"
  },
  {
    "text": "there's a couple ways to think about that the first is that most of the auto instrumentation components in otel allow",
    "start": "1944360",
    "end": "1950000"
  },
  {
    "text": "you to filter things out without needing to sample entire traces so if something",
    "start": "1950000",
    "end": "1955120"
  },
  {
    "text": "is proving like really problematic like basic like imagine you add the Java Auto instrumentation agent and some of the",
    "start": "1955120",
    "end": "1961760"
  },
  {
    "text": "instrumentation is super noisy because of this architectural pattern that you just can't unwind right now but then",
    "start": "1961760",
    "end": "1967200"
  },
  {
    "text": "some of it is actually really useful well you do have the ability to turn certain things on or off um through",
    "start": "1967200",
    "end": "1972799"
  },
  {
    "text": "configuration and so that can be like a really good stop Gap in the interum now it's not like a complete solution but",
    "start": "1972799",
    "end": "1978720"
  },
  {
    "text": "you can sort of get something instead of instead of nothing uh the other thing is",
    "start": "1978720",
    "end": "1983960"
  },
  {
    "text": "um uh the sampling of that data this is sampling gets into a bit more of a complicated topic um but there is a",
    "start": "1983960",
    "end": "1991360"
  },
  {
    "text": "concept in sampling known as Dynamic sampling and so the idea is that it's",
    "start": "1991360",
    "end": "1996480"
  },
  {
    "text": "able to uh understand statistically based off of the frequency of certain kinds of uh traces and data that they",
    "start": "1996480",
    "end": "2002200"
  },
  {
    "text": "contain and sort of upsample or down sample based off of the uniqueness of uh",
    "start": "2002200",
    "end": "2007600"
  },
  {
    "text": "keys that you sort of establish so like if you have a particular key um representing you know some some",
    "start": "2007600",
    "end": "2013639"
  },
  {
    "text": "operation that's going on um and there's a lot of noise it can actually uh uh very aggressively sample those traces",
    "start": "2013639",
    "end": "2020399"
  },
  {
    "text": "that that are that are experiencing a lot of the um a lot of the same values in that key um so it's like that that",
    "start": "2020399",
    "end": "2028399"
  },
  {
    "text": "concept is kind of like that's a whole other talk in fact uh Kent Quirk here is he gave a talk on on this topic as well",
    "start": "2028399",
    "end": "2035320"
  },
  {
    "text": "um I would certainly advise uh uh uh chatting with someone like Kent about about this concept um this is something",
    "start": "2035320",
    "end": "2041880"
  },
  {
    "text": "that does exist today it's not in otel but it's likely going to be added to open Telemetry pretty soon so",
    "start": "2041880",
    "end": "2047760"
  },
  {
    "text": "um that's kind of what I would say for now hi um my question is will be there",
    "start": "2047760",
    "end": "2056280"
  },
  {
    "text": "any performance overhead if I start tracing all the requests that comes to mind",
    "start": "2056280",
    "end": "2061358"
  },
  {
    "text": "we uh yes there will be performance overhead uh the answer to that though is",
    "start": "2061359",
    "end": "2067398"
  },
  {
    "text": "there's a really really really big old it depends for that though um you know it kind of depends on um the shape of",
    "start": "2067399",
    "end": "2073919"
  },
  {
    "text": "those requests how much data is involved in each one uh and the provisioning of your infrastructure so like I've seen um",
    "start": "2073919",
    "end": "2082358"
  },
  {
    "text": "I've seen somebody come in and say this added 20% CPU and memory overhead to to my nodes and that was unacceptable um",
    "start": "2082359",
    "end": "2089599"
  },
  {
    "text": "usually the case was that they had one like really really noisy piece of instrumentation that was kind of low",
    "start": "2089599",
    "end": "2095240"
  },
  {
    "text": "volum for low low value for them and then they turn that off and it's like sitting at like maybe 1 to 2% overhead",
    "start": "2095240",
    "end": "2102119"
  },
  {
    "text": "um uh there was another one with python where we had a customer that that was um there was specifically like a thing that",
    "start": "2102119",
    "end": "2109200"
  },
  {
    "text": "they were doing they they they needed a custom what's called a span processor it's a it's a way that you can um you",
    "start": "2109200",
    "end": "2115280"
  },
  {
    "text": "can customize the way that open Telemetry processes data and exports it um while it's actually generating that",
    "start": "2115280",
    "end": "2121800"
  },
  {
    "text": "data and they wrote something custom because they they needed to add some specific uh textual information and they",
    "start": "2121800",
    "end": "2127960"
  },
  {
    "text": "felt that that was the best way to do it uh but then that added overhead uh of about 30% or so to the nodes um and so",
    "start": "2127960",
    "end": "2136440"
  },
  {
    "text": "we we worked with them to figure out okay there's actually a better way to sort of add this data and again it dropped it back down to about 2% so um I",
    "start": "2136440",
    "end": "2144599"
  },
  {
    "text": "like you may very well experience some significant overhead but I think there's a couple knobs available that you can",
    "start": "2144599",
    "end": "2150560"
  },
  {
    "text": "sort of dial things back on and sort of get to an acceptable level um but that being said because instrument creates",
    "start": "2150560",
    "end": "2157520"
  },
  {
    "text": "overhead um there's you know in the open Telemetry space we try to do as much as we can especially by batching data up",
    "start": "2157520",
    "end": "2163520"
  },
  {
    "text": "and and flushing it asynchronously um but you're not going to be able to avoid some percentage overhead thank",
    "start": "2163520",
    "end": "2171880"
  },
  {
    "text": "you great talk I just wanted to ask you a quick question about if all my services are earning on kubernetes is",
    "start": "2171880",
    "end": "2178839"
  },
  {
    "text": "there any reason I would want to instrument my app for otel if I could just drop like an EF exporter or",
    "start": "2178839",
    "end": "2185200"
  },
  {
    "text": "something like that I would say yes um so uh I think ebpf is",
    "start": "2185200",
    "end": "2191440"
  },
  {
    "text": "actually pretty radical uh at some point ebpf might be the solution that we all",
    "start": "2191440",
    "end": "2199400"
  },
  {
    "text": "get but right now it's unable to extract any context from the actual application itself and it's unable to context",
    "start": "2199400",
    "end": "2206000"
  },
  {
    "text": "propagation throughout a given process and so what it'll do is these ebpf agents will typically capture networking",
    "start": "2206000",
    "end": "2212480"
  },
  {
    "text": "data or like if a database call was made and so like some some of of the value of otel Auto instrumentation You could",
    "start": "2212480",
    "end": "2219359"
  },
  {
    "text": "argue goes away if you could drop in a network agent but if then you want to start being like okay well what if I want to attach a user ID to this stuff",
    "start": "2219359",
    "end": "2226040"
  },
  {
    "text": "or if I want to attach a device ID or something like that kind of don't really have that many options with with these",
    "start": "2226040",
    "end": "2231359"
  },
  {
    "text": "agents um the otel operator uh accomplishes a lot of what that does by",
    "start": "2231359",
    "end": "2236720"
  },
  {
    "text": "um what it does is it adds an open Telemetry collector into your cluster and then it configures all of your pods",
    "start": "2236720",
    "end": "2242359"
  },
  {
    "text": "to send otel data to that that collector that's dropped into your cluster and Auto instruments each of them with you",
    "start": "2242359",
    "end": "2248520"
  },
  {
    "text": "know whatever whatever language you have and so you'll get not only roughly the",
    "start": "2248520",
    "end": "2253680"
  },
  {
    "text": "same shaped data that you get from an evf agent um but often you can get actually much um much richer data by",
    "start": "2253680",
    "end": "2260079"
  },
  {
    "text": "default especially if you're using Java um the Java Auto instrumentation is",
    "start": "2260079",
    "end": "2265280"
  },
  {
    "text": "frankly an incredible piece of technology um and you can you can even get like some like method level",
    "start": "2265280",
    "end": "2270680"
  },
  {
    "text": "instrument instrumentations automatically that are a very tall order for an ebpf agent to get in any kind of",
    "start": "2270680",
    "end": "2276319"
  },
  {
    "text": "cooh manner um but that being said I think this this is a space to watch like things are going to be evolving quite a",
    "start": "2276319",
    "end": "2282200"
  },
  {
    "text": "bit um I would also say that like ebpf and otel are not necessarily at odds or like necessarily different Technologies",
    "start": "2282200",
    "end": "2289200"
  },
  {
    "text": "um both communities are like you know we're certainly aware that we're trying to accomplish a lot of the same problems and we want to try to make it so that",
    "start": "2289200",
    "end": "2296079"
  },
  {
    "text": "like maybe someday the thing that you add to your cluster whether it uses evf or not is just kind of like an",
    "start": "2296079",
    "end": "2301160"
  },
  {
    "text": "implementation detail so hi um",
    "start": "2301160",
    "end": "2307359"
  },
  {
    "text": "so you mentioned that span events were a way to uh tag that a certain thing happened at",
    "start": "2307359",
    "end": "2315160"
  },
  {
    "text": "a certain time uh given that logs typically act the same way a given event",
    "start": "2315160",
    "end": "2321200"
  },
  {
    "text": "happened at a given time is there a way to turn uh existing logging into span",
    "start": "2321200",
    "end": "2326400"
  },
  {
    "text": "events and uh would that be something that should be invest that at least",
    "start": "2326400",
    "end": "2332920"
  },
  {
    "text": "should be evaluated um it depends so uh yeah uh so uh in",
    "start": "2332920",
    "end": "2340160"
  },
  {
    "text": "particular um one of our uh one of the customers that I mentioned loan Market this is actually what they did is they",
    "start": "2340160",
    "end": "2346560"
  },
  {
    "text": "basically wrote uh they basically wrote a wrapper that that basically every time they're they're they're logging",
    "start": "2346560",
    "end": "2352160"
  },
  {
    "text": "something with their logging interface um it it actually under the covers just",
    "start": "2352160",
    "end": "2357480"
  },
  {
    "text": "takes that same log and just turns it into key value pairs on a span event and so that same time stamp is you know that",
    "start": "2357480",
    "end": "2363319"
  },
  {
    "text": "that's just the time stamp on the span event um that was something they had to configure in their code but it was a",
    "start": "2363319",
    "end": "2368920"
  },
  {
    "text": "relatively Light Lift um it may vary from language to language if you have",
    "start": "2368920",
    "end": "2374200"
  },
  {
    "text": "the ability to intercept method calls like that pretty easily um so I think the answer is like kind of",
    "start": "2374200",
    "end": "2381280"
  },
  {
    "text": "but there's not really that there's not really a way to sort of like like a configuration file that says like hey",
    "start": "2381280",
    "end": "2386520"
  },
  {
    "text": "turn the logs into span events um and I don't know if that would necessarily be possible but I think also a thing that",
    "start": "2386520",
    "end": "2394119"
  },
  {
    "text": "that's worth uh looking into is is this this answer can also depend on the",
    "start": "2394119",
    "end": "2399480"
  },
  {
    "text": "backend that you're dealing with so um and so this is kind of honeycomb specific but what honeycomb does is when",
    "start": "2399480",
    "end": "2405760"
  },
  {
    "text": "you have uh an open what's considered an open Telemetry log um so like it's the same log but it's been wrapped with like",
    "start": "2405760",
    "end": "2412200"
  },
  {
    "text": "the span ID in the trace ID is we actually um annotate it internally the same way that we do a span event so that",
    "start": "2412200",
    "end": "2418920"
  },
  {
    "text": "it gets loaded up as a span event in our UI so that if if you if you've been creating logs as span events and you",
    "start": "2418920",
    "end": "2425599"
  },
  {
    "text": "have these existing logs like it's kind of one and the same when you're actually investigating things now not every",
    "start": "2425599",
    "end": "2431160"
  },
  {
    "text": "tracing tool is going to do that so uh your experience might vary from tool to Tool but uh that's it's kind of I said",
    "start": "2431160",
    "end": "2439640"
  },
  {
    "text": "it depends but like it kind of depends on like two different ends of the ends of the spectrum um so yeah thank",
    "start": "2439640",
    "end": "2448560"
  },
  {
    "text": "[Applause] you",
    "start": "2452480",
    "end": "2458319"
  }
]