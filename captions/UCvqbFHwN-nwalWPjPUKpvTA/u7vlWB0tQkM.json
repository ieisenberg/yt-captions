[
  {
    "text": "yeah so should we start yeah uh so hello everyone uh my name is",
    "start": "1760",
    "end": "8000"
  },
  {
    "text": "Taron uh in today's talk we'll talk about the dragonfly operator so I think the lunch was good so hopefully my",
    "start": "8000",
    "end": "14839"
  },
  {
    "text": "session also follows that uh so about me uh my name is Taron U and I'm working",
    "start": "14839",
    "end": "22000"
  },
  {
    "text": "remotely from Hyderabad so I work at a company called dragonfly DB and the project that you're talking about is",
    "start": "22000",
    "end": "27560"
  },
  {
    "text": "also very related to the work that I do uh previously I was at gitpod and also at",
    "start": "27560",
    "end": "32640"
  },
  {
    "text": "linkerd um I'm an amateur Runner and also I like my coffee just like a lot of folks here you can follow me on Twitter",
    "start": "32640",
    "end": "40960"
  },
  {
    "text": "or or also on my website here so first yeah before we talk about",
    "start": "40960",
    "end": "46160"
  },
  {
    "text": "the dragonfly operator we need to talk about what dragonfly is right uh so dragonfly is an open source inmemory",
    "start": "46160",
    "end": "52559"
  },
  {
    "text": "store right uh it's like red it supports the same API but it tries to do a better job at the whole caching layer uh so",
    "start": "52559",
    "end": "60239"
  },
  {
    "text": "it's a drop in replacement and and you can expect like much better performance reliability uh than many other tools out",
    "start": "60239",
    "end": "68119"
  },
  {
    "text": "there uh so why dragonfly so dragonfly essentially scales vertically better",
    "start": "68119",
    "end": "73840"
  },
  {
    "text": "right after with radi and a lot of other Alternatives after like a specific your",
    "start": "73840",
    "end": "79119"
  },
  {
    "text": "QBs you have to horizontally scale and with dragon play we try to not do that essentially by making efficient use of",
    "start": "79119",
    "end": "86000"
  },
  {
    "text": "cores all the modern algorithms Modern Hardware Etc so on a same instance you would get a uh significantly better",
    "start": "86000",
    "end": "93159"
  },
  {
    "text": "performance out of dragonfly than you would get with redis and that's the whole idea so now uh what's what like",
    "start": "93159",
    "end": "100520"
  },
  {
    "text": "how is dragonfly related to kubernetes uh so dragonfly ships as a binary and a container image right and you know where",
    "start": "100520",
    "end": "107000"
  },
  {
    "text": "a lot of people run your container images it's kubernetes so so essentially",
    "start": "107000",
    "end": "112479"
  },
  {
    "text": "it makes the team and like the community of dragonfly responsible to have like a better experience when they're running",
    "start": "112479",
    "end": "118799"
  },
  {
    "text": "on kubernetes right and that's where like our our whole journey started uh to focus on",
    "start": "118799",
    "end": "125039"
  },
  {
    "text": "kubernetes so essentially it makes sense to build relevant tools to maintain manage dragonfly uh on",
    "start": "125039",
    "end": "132440"
  },
  {
    "text": "kubernetes so obviously like many other applications and users we started out",
    "start": "132440",
    "end": "137560"
  },
  {
    "text": "with the helm chart right Helm chart Helm charts are simple they're easy to use a lot of users love them uh it it's",
    "start": "137560",
    "end": "144160"
  },
  {
    "text": "all good but uh it only works your great for your stateless and like itic",
    "start": "144160",
    "end": "150120"
  },
  {
    "text": "applications right if you want to do something uh more on the management layer for your application Helm charts",
    "start": "150120",
    "end": "156720"
  },
  {
    "text": "do fall flat because they don't do much there like and even even if you have to like have your own logic some kind of",
    "start": "156720",
    "end": "163319"
  },
  {
    "text": "like Dynamic logic there uh then uh there's no option uh they do good on the",
    "start": "163319",
    "end": "168440"
  },
  {
    "text": "templating side right the users can like give their configuration and get a uh and get kubernetes manifest on the other",
    "start": "168440",
    "end": "175200"
  },
  {
    "text": "side that do a simple job but that's not all uh that's not that's not the only",
    "start": "175200",
    "end": "180440"
  },
  {
    "text": "useful part right a lot of applications and especially databases they need a lot more management uh around their life",
    "start": "180440",
    "end": "187000"
  },
  {
    "text": "cycle around the state Etc so for that uh Helm charts don't do a good job and and the reason why we see a lot of",
    "start": "187000",
    "end": "193480"
  },
  {
    "text": "operators around databases applications uh out there in open source for specifically dragonfly",
    "start": "193480",
    "end": "201280"
  },
  {
    "text": "dragonfly requires like a lot of automatic failover uh and other features they they do need an external component",
    "start": "201280",
    "end": "208400"
  },
  {
    "text": "that configures them uh and make sure uh the configuration gets updated through the life cycle of dragonfly instances uh",
    "start": "208400",
    "end": "215920"
  },
  {
    "text": "if if you're familiar with redis there's a whole project around this called The redis Sentinel right which essentially",
    "start": "215920",
    "end": "221040"
  },
  {
    "text": "when you have like multiple redis instances it is the component that runs redis commands Mak sure that like all",
    "start": "221040",
    "end": "227239"
  },
  {
    "text": "the red instances are are configured correctly who's the master who's the replica all those things uh but when we",
    "start": "227239",
    "end": "235360"
  },
  {
    "text": "had the same challenge uh so because dragonfly is compatible with redis you",
    "start": "235360",
    "end": "240400"
  },
  {
    "text": "can you can use reddis with a dragonfly and get all the benefits but we have always like whenever we spoke to like",
    "start": "240400",
    "end": "246680"
  },
  {
    "text": "any of the redis Sentinel users on kubernetes uh they did not like the experience it's because redis Sentinel",
    "start": "246680",
    "end": "253720"
  },
  {
    "text": "knows redis but it doesn't know kubernetes Helm charts know kubernetes but they don't know redis so it's like",
    "start": "253720",
    "end": "259160"
  },
  {
    "text": "this policy where like uh Helm charts you can only do kubernetes things and",
    "start": "259160",
    "end": "265000"
  },
  {
    "text": "and reddish Sentinel can only do reddish things we thought there should be a better middle layer in this right where",
    "start": "265000",
    "end": "271400"
  },
  {
    "text": "it knows redis it knows how to manage dragonfly but also it is aware of the kubernetes apis how to how to configure",
    "start": "271400",
    "end": "278400"
  },
  {
    "text": "them how to listen to events Etc and that's where we landed on this idea around uh the dragonfly operator right",
    "start": "278400",
    "end": "284479"
  },
  {
    "text": "to build an operator that runs and manages dragonfly instances for users on",
    "start": "284479",
    "end": "290800"
  },
  {
    "text": "kubernetes so let us first you go through the goals right yeah just like dragonfly even the operator is open",
    "start": "290800",
    "end": "296560"
  },
  {
    "text": "source you can check it out the GitHub repository is open source uh and then uh so so the goal of the dragonfly operator",
    "start": "296560",
    "end": "303960"
  },
  {
    "text": "is to manage the underlying stateful set resources of each dragonfly right so example uh in a company there could be",
    "start": "303960",
    "end": "311400"
  },
  {
    "text": "multiple teams and each want each team wants their own like a dragonfly instance one single dragonfly operator",
    "start": "311400",
    "end": "317600"
  },
  {
    "text": "should be able to maintain multiple dragonfly instances uh uh and their",
    "start": "317600",
    "end": "322880"
  },
  {
    "text": "underlying stateful set right because uh dragonfly is a stateful machine right it's it keeps uh red is it's it is",
    "start": "322880",
    "end": "331120"
  },
  {
    "text": "essentially storing it straight in memory and when it uh and when it shuts down it essentially writes into a disc",
    "start": "331120",
    "end": "337240"
  },
  {
    "text": "and tries to yeah load it back up yeah just like redis uh and the other goal is to always",
    "start": "337240",
    "end": "344120"
  },
  {
    "text": "have a healthy Master right so this is a very redish and inmemory store thing right which so you can't just have one",
    "start": "344120",
    "end": "350880"
  },
  {
    "text": "redish instances right because even though like the major use case for red or dragonfly is caching a lot of",
    "start": "350880",
    "end": "357600"
  },
  {
    "text": "applications use it more for realtime data right for example a lot of like gaming companies sessions Etc any",
    "start": "357600",
    "end": "364600"
  },
  {
    "text": "realtime data Jed is a popular use case because the all the session management Etc is stored in redis for faster",
    "start": "364600",
    "end": "371639"
  },
  {
    "text": "retrieval and all of those things so so this means you need to have like a",
    "start": "371639",
    "end": "376800"
  },
  {
    "text": "redish instance always running uh and and even like during any failures you",
    "start": "376800",
    "end": "382479"
  },
  {
    "text": "should be able to automatically fail over onto a onto onto another redish instance right it should not uh you",
    "start": "382479",
    "end": "388919"
  },
  {
    "text": "should not have like a manual intervention there it should all be automatic you should have a replica and if the master goes down you should you",
    "start": "388919",
    "end": "395120"
  },
  {
    "text": "should just like fall back to replica with all the data and and should and it should all work and one of the important",
    "start": "395120",
    "end": "400919"
  },
  {
    "text": "parts of the operator is to do this and then the other important part is to is to do is to allow upgrades of",
    "start": "400919",
    "end": "408720"
  },
  {
    "text": "dragonfly right uh so any stateful application upgrades would be complicated right because uh there's",
    "start": "408720",
    "end": "415720"
  },
  {
    "text": "there should be essentially a roll out procedure to through which how you how your clients are updated about the whole",
    "start": "415720",
    "end": "421479"
  },
  {
    "text": "upgrade happening and also that like after the upgrade you have the same data and you and you and you did not lose uh",
    "start": "421479",
    "end": "428479"
  },
  {
    "text": "data during that transition so so stateful applications do need some handholding and essentially this is the",
    "start": "428479",
    "end": "434599"
  },
  {
    "text": "reason why we have like the whole thing about like stateful set the naming conventions the upgrades being like very",
    "start": "434599",
    "end": "440319"
  },
  {
    "text": "different from like a from like a deployment right in kubernetes so and in the same way",
    "start": "440319",
    "end": "447479"
  },
  {
    "text": "dragonfly operator also also does some betterments uh in in the whole upgrade path essentially to to to have no data",
    "start": "447479",
    "end": "454759"
  },
  {
    "text": "law and also to do a better job than like plane upgrades plain like state will set applies so so before we dive",
    "start": "454759",
    "end": "462599"
  },
  {
    "text": "into like the code base of the dragonfly operator how do operators even work uh so an operator is essentially uh it is",
    "start": "462599",
    "end": "470560"
  },
  {
    "text": "doing uh three main things right first it is watching for a declarative requested state so for example when you",
    "start": "470560",
    "end": "476759"
  },
  {
    "text": "apply a deployment onto a kubernetes cluster it's a it's a it's a requested state by the user right the user is",
    "start": "476759",
    "end": "483800"
  },
  {
    "text": "asking for a deployment of this many configuration all of that and and",
    "start": "483800",
    "end": "488840"
  },
  {
    "text": "kubernetes does that job right uh it's essentially it it essentially applies that into the resources the on the other",
    "start": "488840",
    "end": "495599"
  },
  {
    "text": "side so essentially the operator is also the same way but for custom resources right not the resources of of kubernetes",
    "start": "495599",
    "end": "502440"
  },
  {
    "text": "but new resources essentially so it watches on those resources and then uh it it manages uh it manages other",
    "start": "502440",
    "end": "509520"
  },
  {
    "text": "resources on the other side and there's also a status component to this whole thing right because because operators",
    "start": "509520",
    "end": "516719"
  },
  {
    "text": "are not State full they are stateless by default they have to store their state somewhere to know like what all are they",
    "start": "516719",
    "end": "523518"
  },
  {
    "text": "doing what's the status of each each requested State Etc so they use the status field in the custom resource uh",
    "start": "523519",
    "end": "530399"
  },
  {
    "text": "definition to to do all of this we'll see that uh in the demo and on the other",
    "start": "530399",
    "end": "535760"
  },
  {
    "text": "side we have manage resources which the operator is maintaining so let's take an example of this talk right uh so here",
    "start": "535760",
    "end": "544320"
  },
  {
    "text": "it's a custom resource first it's not available on any kuet is cluster it is specific to the dragonfly operator the",
    "start": "544320",
    "end": "550920"
  },
  {
    "text": "dragonfly operator essentially manages a resource called the dragonfly hence you see the uh line around kind",
    "start": "550920",
    "end": "558399"
  },
  {
    "text": "dragonfly uh it has a name and then it has its own like configuration Fields right there's the number of replicas of",
    "start": "558399",
    "end": "566519"
  },
  {
    "text": "dragonfly and the and the resources for dragonfly instance so so this is the",
    "start": "566519",
    "end": "571800"
  },
  {
    "text": "example of the declared state right this is the custom resource that we're talking about uh but before we even like",
    "start": "571800",
    "end": "578200"
  },
  {
    "text": "talk about custom resource there's the whole thing around the definition right this has the same relation as like a",
    "start": "578200",
    "end": "585040"
  },
  {
    "text": "class and object in any programming language right like class is the is the declarative is the definition of the is",
    "start": "585040",
    "end": "591880"
  },
  {
    "text": "the schema but then like the dragonfly or the custom resource is like an implementation of the schema right it is",
    "start": "591880",
    "end": "597760"
  },
  {
    "text": "one instance of the of the custom resource like definition here you on the left this is the custom resource called",
    "start": "597760",
    "end": "604880"
  },
  {
    "text": "dragonfly and on the right we have the custom resource definition which is the which is the definition of the dragonfly",
    "start": "604880",
    "end": "611240"
  },
  {
    "text": "type right essentially uh it's a bunch of thing uh uh you're telling kubernetes",
    "start": "611240",
    "end": "617160"
  },
  {
    "text": "that there's a new resource called the dragonfly that it should be aware about from now and it has all these fields the",
    "start": "617160",
    "end": "624360"
  },
  {
    "text": "plural form is called dragon flies and and a lot of things like that you could we also passed the open AI open API",
    "start": "624360",
    "end": "631120"
  },
  {
    "text": "sorry all the chatter about open AI we also passed the open API V3 schema",
    "start": "631120",
    "end": "636760"
  },
  {
    "text": "here essentially used to validate those objects right whenever the user applies an of a resource of the type dragonfly",
    "start": "636760",
    "end": "645320"
  },
  {
    "text": "we essentially validate on the open AP open API schema and then validate the",
    "start": "645320",
    "end": "650480"
  },
  {
    "text": "resource uh so so essentially the architecture would be would be this right so on the API server we apply the",
    "start": "650480",
    "end": "656240"
  },
  {
    "text": "objects and and the and the dragon play Operator does some magic and and creates",
    "start": "656240",
    "end": "661320"
  },
  {
    "text": "a cash uh like a pod on the other side right it's not a pod it's a straight full set like we discussed and a service",
    "start": "661320",
    "end": "668000"
  },
  {
    "text": "that the user can use to talk to it but essentially uh there's a lot of magic in the operator and and it and it can add",
    "start": "668000",
    "end": "675880"
  },
  {
    "text": "like more instances of it right you can ask a new dragonfly resource for maybe",
    "start": "675880",
    "end": "680920"
  },
  {
    "text": "for your frontend team and it will create a new resource uh new stateful set new service to back the to back all",
    "start": "680920",
    "end": "687279"
  },
  {
    "text": "of that up and the clients can start using using the using the instance so now uh uh if you see what",
    "start": "687279",
    "end": "695800"
  },
  {
    "text": "the magic is about internally it is two things right essentially for the drag play Operator uh but like like like many",
    "start": "695800",
    "end": "703040"
  },
  {
    "text": "things right operators can be built me in many ways this is one way that we went about it but uh there's no one like",
    "start": "703040",
    "end": "710360"
  },
  {
    "text": "one right way it all makes sense like uh based on your use case Etc in our case though we have like two reconcilers in",
    "start": "710360",
    "end": "716200"
  },
  {
    "text": "the whole operator thing right one is the dragonfly reconciler and other is the PA life cycle reconciler we'll talk",
    "start": "716200",
    "end": "723680"
  },
  {
    "text": "what each of the each of those things do uh we'll also look at the [Music]",
    "start": "723680",
    "end": "730680"
  },
  {
    "text": "code yeah now let's do a demo first yeah uh so so we we spoke about a",
    "start": "730680",
    "end": "739560"
  },
  {
    "text": "about a bunch of things uh yeah before we do any of it can you see the code is the font",
    "start": "739560",
    "end": "745280"
  },
  {
    "text": "[Music] good so yeah this is good so first I",
    "start": "745280",
    "end": "750519"
  },
  {
    "text": "have a uh I have a kind cluster here and if I do cubic get pods uh there's",
    "start": "750519",
    "end": "755680"
  },
  {
    "text": "nothing on this cluster essentially The Bare Bones whatever kind gives you now let's install the operator first right",
    "start": "755680",
    "end": "762480"
  },
  {
    "text": "uh the operator manifests are present uh in this folder called the J manifest we",
    "start": "762480",
    "end": "768560"
  },
  {
    "text": "look at what the operator gets it with right so if you see it essentially it",
    "start": "768560",
    "end": "775040"
  },
  {
    "text": "creates a namespace first and then it creates the custom resource definition that we spoke about the schema of the of",
    "start": "775040",
    "end": "781519"
  },
  {
    "text": "the custom resource called dragonfly and there are a bunch of rback stuff right so essentially the operator has to have",
    "start": "781519",
    "end": "788399"
  },
  {
    "text": "the required permissions to create the underlying stateful set to to create the underlying secrets to create the",
    "start": "788399",
    "end": "794399"
  },
  {
    "text": "underlying service all of that so it needs a bunch of your permissions to all of that and this is the rback that we",
    "start": "794399",
    "end": "801199"
  },
  {
    "text": "get and this is the operator itself right the operator itself is a stateful is not a stateful application so it's a",
    "start": "801199",
    "end": "807279"
  },
  {
    "text": "deployment it doesn't need any of the fancy stuff so now that uh we have the we have it installed now if we do a",
    "start": "807279",
    "end": "813519"
  },
  {
    "text": "cubic tail get crds right any all the custom resource uh resource definitions",
    "start": "813519",
    "end": "819000"
  },
  {
    "text": "you can see that we we have a new resource called the dragonfly now let's apply uh uh apply a sample uh resource",
    "start": "819000",
    "end": "827399"
  },
  {
    "text": "right uh here I have like a example uh so here we have like the kind",
    "start": "827399",
    "end": "833440"
  },
  {
    "text": "equal to dragonfly there's a bunch of labels the labels are are not important",
    "start": "833440",
    "end": "839079"
  },
  {
    "text": "uh and here is the actual spec of the dragonfly instance right we are essentially asking for two replicas with",
    "start": "839079",
    "end": "845040"
  },
  {
    "text": "a specific set of resource requirements right uh these are like the same CPU and memory requests right and then you can",
    "start": "845040",
    "end": "851839"
  },
  {
    "text": "pass that uh so now let's apply that right uh",
    "start": "851839",
    "end": "857040"
  },
  {
    "text": "if we do apply this is part of the config yeah",
    "start": "857040",
    "end": "863240"
  },
  {
    "text": "samples now you should see that a dragonfly sample uh has been",
    "start": "863240",
    "end": "869399"
  },
  {
    "text": "you're created now if you watch for the pods right you can see that we we are getting two pods automatically you",
    "start": "869399",
    "end": "876560"
  },
  {
    "text": "created one after the other uh now if you see what all uh uh the dragonfly uh",
    "start": "876560",
    "end": "884519"
  },
  {
    "text": "now if you see uh cubic tail get a dragonfly if you do a dragonflies you",
    "start": "884519",
    "end": "891120"
  },
  {
    "text": "should see that we have a dragonfly sample that we just ask for it and you can also do cuic describe dragonfly",
    "start": "891120",
    "end": "899079"
  },
  {
    "text": "dragonfly sample you can see that uh uh we have the same resource but there",
    "start": "899079",
    "end": "905600"
  },
  {
    "text": "are a bunch of events that the operator has been doing uh it has created resources and it also it also did a",
    "start": "905600",
    "end": "911560"
  },
  {
    "text": "bunch of other things let's not talk about it first we'll we'll go to them later so essentially as you saw the",
    "start": "911560",
    "end": "916680"
  },
  {
    "text": "operator has created a bunch of things and who did that right that's where uh I we can go back to our slides where this",
    "start": "916680",
    "end": "924680"
  },
  {
    "text": "is the uh this is the job of the dragonfly reconciler right uh so so before that actually let's look at the",
    "start": "924680",
    "end": "931000"
  },
  {
    "text": "code right um so essentially operators are built uh using the cube Builder",
    "start": "931000",
    "end": "937279"
  },
  {
    "text": "framework right like Cube Builder uh is a popular framework to build and manage operators essentially uh and we use the",
    "start": "937279",
    "end": "945399"
  },
  {
    "text": "same stuff I we use Cube Builder to essentially write the operator it's a framework to write to write kubernetes",
    "start": "945399",
    "end": "951639"
  },
  {
    "text": "operators and even Cube Builder internally uses your client go uh to essentially",
    "start": "951639",
    "end": "958079"
  },
  {
    "text": "talk to the a server and if you see the the code base we have uh we have two important we have the main important",
    "start": "958079",
    "end": "964920"
  },
  {
    "text": "thing here right we are essentially attaching two two things into the",
    "start": "964920",
    "end": "970199"
  },
  {
    "text": "manager one is the uh your dragonfly reconciler and then the other is the dfp",
    "start": "970199",
    "end": "977279"
  },
  {
    "text": "life cycle reconciler so what's the job of the dragonfly reconciler right the job of the dragonfly Recon seller is to",
    "start": "977279",
    "end": "984920"
  },
  {
    "text": "create stateful sets and services for each dragon resource you are requested",
    "start": "984920",
    "end": "990240"
  },
  {
    "text": "when a user asks for the dragonfly resource it goes ahead and creates the stateful set and the services you are",
    "start": "990240",
    "end": "996600"
  },
  {
    "text": "required now if you see the code of the dragonfly resource reconciler itself",
    "start": "996600",
    "end": "1002360"
  },
  {
    "text": "essentially U before we go into the reconcile Loop so so each reconciler essentially has one single method that",
    "start": "1002360",
    "end": "1009000"
  },
  {
    "text": "it runs for each event right and what is an event that it gets so the dragonfly",
    "start": "1009000",
    "end": "1014079"
  },
  {
    "text": "reconciler listens for the type called dragonfly which has it ured and then it",
    "start": "1014079",
    "end": "1020120"
  },
  {
    "text": "owns two things right it owns the state fullet and the service uh to back the dragonfly resource up so how does it",
    "start": "1020120",
    "end": "1026839"
  },
  {
    "text": "create that that happens in the reconcile Loop right so we get a request of type uh control. request and we try",
    "start": "1026839",
    "end": "1034438"
  },
  {
    "text": "to get the DF object underlying that once we get the DF object",
    "start": "1034439",
    "end": "1039918"
  },
  {
    "text": "underlying uh there are three essential things that we do here right first uh if the if the status of the dragonfly is",
    "start": "1039919",
    "end": "1046839"
  },
  {
    "text": "nothing then we create resources right we essentially translate the dragonfly object into a bunch of the resources and",
    "start": "1046839",
    "end": "1054160"
  },
  {
    "text": "here you can see we create a stateful set and also there are a bunch of fields that you can set right TLS Secrets",
    "start": "1054160",
    "end": "1060559"
  },
  {
    "text": "annotations a lot of things and then we also we also back that up with a service",
    "start": "1060559",
    "end": "1066720"
  },
  {
    "text": "the service is what the user would use to talk to dragonfly the database",
    "start": "1066720",
    "end": "1072000"
  },
  {
    "text": "essentially uh and then we just apply those resources we update the status field and then just exit right so that",
    "start": "1072000",
    "end": "1078400"
  },
  {
    "text": "that's what just happened now if we go back to our code uh we'll see that uh we",
    "start": "1078400",
    "end": "1083880"
  },
  {
    "text": "create uh a stateful set and also a service uh backing backing these",
    "start": "1083880",
    "end": "1089159"
  },
  {
    "text": "resources up uh now now now let's talk to the dragonfly instance itself right",
    "start": "1089159",
    "end": "1095200"
  },
  {
    "text": "so because we are outside the cluster uh I'm running a redis pod and I'm giving",
    "start": "1095200",
    "end": "1100919"
  },
  {
    "text": "it the URL of the dragonfly sample. default right default is the namespace dragonfly sample is the resource and now",
    "start": "1100919",
    "end": "1106960"
  },
  {
    "text": "if I if I run if I run this command I'll get a redis client command that I can",
    "start": "1106960",
    "end": "1112240"
  },
  {
    "text": "use to talk to the dragonfly instance so uh it's downloading the red image I",
    "start": "1112240",
    "end": "1119640"
  },
  {
    "text": "think yeah now that we have the prompt so let's uh let's put some data right",
    "start": "1121320",
    "end": "1127280"
  },
  {
    "text": "let's do set event and we'll call it Cube day now if I do get event we see",
    "start": "1127280",
    "end": "1133159"
  },
  {
    "text": "that the data is is there and let's exit that container so so we were successfully able to create a dragonfly",
    "start": "1133159",
    "end": "1140320"
  },
  {
    "text": "instance talk to it insert some data and come back so so before we go ahead um",
    "start": "1140320",
    "end": "1149000"
  },
  {
    "text": "the important thing to note is that we asked for two replicas here two instances of d uh one instance of",
    "start": "1149000",
    "end": "1154280"
  },
  {
    "text": "dragonfly with two replicas right the dragonfly sample zero and one uh so but with redis and dragonfly",
    "start": "1154280",
    "end": "1162440"
  },
  {
    "text": "there's only one master all the time right and then the other pods would be replicas right to fail over in the event",
    "start": "1162440",
    "end": "1167760"
  },
  {
    "text": "of a problem so so in our case in which part did we write our data into so so",
    "start": "1167760",
    "end": "1173840"
  },
  {
    "text": "this is how so uh we do this uh through labels right uh there's this uh label",
    "start": "1173840",
    "end": "1181440"
  },
  {
    "text": "called the role replica and the master and if you if you run these commands you can see which pod is replica and which",
    "start": "1181440",
    "end": "1187799"
  },
  {
    "text": "pod is master and the service essentially always points to iscribe service and the and the service would",
    "start": "1187799",
    "end": "1194760"
  },
  {
    "text": "always point to the role equal to master so the users are only talking to the master the replica is always like",
    "start": "1194760",
    "end": "1200320"
  },
  {
    "text": "catching up with the data from the master uh and and now what happens if we",
    "start": "1200320",
    "end": "1206360"
  },
  {
    "text": "delete the master uh we saw that dragonfly sample zero is the master now if we if we",
    "start": "1206360",
    "end": "1212559"
  },
  {
    "text": "delete the Pod uh the master has gone down now if",
    "start": "1212559",
    "end": "1217600"
  },
  {
    "text": "we do cubic T get pods r equal to master we we automatically see that sample one",
    "start": "1217600",
    "end": "1224440"
  },
  {
    "text": "has gotten the role equal to master label who updated that this is the job of the operator essentially this means",
    "start": "1224440",
    "end": "1230600"
  },
  {
    "text": "now if we go and run the cubic run on the on the same instance even",
    "start": "1230600",
    "end": "1237039"
  },
  {
    "text": "though we deleted the master we should when we do get event we should still see the data because uh the operator",
    "start": "1237039",
    "end": "1244320"
  },
  {
    "text": "automatically saw that the Pod went down and then it automatically upgraded the other replica as the master and now if",
    "start": "1244320",
    "end": "1251400"
  },
  {
    "text": "we go back and see uh what all pods are replicas now if we do Q get pod",
    "start": "1251400",
    "end": "1258840"
  },
  {
    "text": "Ro equal to replica we see that sample zero is now the new replica which means",
    "start": "1258840",
    "end": "1264120"
  },
  {
    "text": "once it once the part came back the operator Auto automatically also marked the new pod as as a replica to the to",
    "start": "1264120",
    "end": "1271400"
  },
  {
    "text": "the new master so whose job is all of this and this is where the Pod life cycle conseller right the second uh",
    "start": "1271400",
    "end": "1278679"
  },
  {
    "text": "thing in the in the diagram so essentially uh the the the responsibility of the pod pod life cycle",
    "start": "1278679",
    "end": "1286039"
  },
  {
    "text": "reconciler is to listen for pod events right All pod events and then see if if",
    "start": "1286039",
    "end": "1291360"
  },
  {
    "text": "uh if it is related to dragonfly and see that if there is any problem if the master is going down then update a",
    "start": "1291360",
    "end": "1297559"
  },
  {
    "text": "replica as a master if there is a new replica if there is a new dragonfly pod mark it as a replica so all",
    "start": "1297559",
    "end": "1303480"
  },
  {
    "text": "the all the logic around new pods and delation of PODS right so now look uh",
    "start": "1303480",
    "end": "1308919"
  },
  {
    "text": "and then it listens to the Pod events and then it runs dragonfly commands on",
    "start": "1308919",
    "end": "1314520"
  },
  {
    "text": "those parts to essentially make them as a master or as a replica essentially so",
    "start": "1314520",
    "end": "1319600"
  },
  {
    "text": "so so so this is the the thing that I started the talk with right the dragonfly operator knows about dragonfly",
    "start": "1319600",
    "end": "1327520"
  },
  {
    "text": "the redish commands Etc and it also knows kubernetes API so it's it's it knows both the things and and this is",
    "start": "1327520",
    "end": "1333400"
  },
  {
    "text": "how we bake the business logic of dragonfly into the kubernetes layer in a way so now let's look at the code right",
    "start": "1333400",
    "end": "1340480"
  },
  {
    "text": "how how this works the dragon play Paul life cycle so essentially if you look at the code here the Paul life cycle",
    "start": "1340480",
    "end": "1348600"
  },
  {
    "text": "reconciler listens for pod events only that but it only listens for pod events",
    "start": "1348600",
    "end": "1356840"
  },
  {
    "text": "with the label with the custom app name label called dragonfly so that it can filter out right it it doesn't have to",
    "start": "1356840",
    "end": "1363200"
  },
  {
    "text": "listen to All pod events in the cluster there are some application pods that the operator doesn't care about Etc so it",
    "start": "1363200",
    "end": "1369279"
  },
  {
    "text": "filters that down into the pods with the labels or dragonfly only the ones with this label and then whenever get when",
    "start": "1369279",
    "end": "1377919"
  },
  {
    "text": "whenever it gets a request it first checks if the if the Pod has a label right we check if the Pod has a role",
    "start": "1377919",
    "end": "1385200"
  },
  {
    "text": "label if not then we configure uh uh if the part doesn't have a aable",
    "start": "1385200",
    "end": "1392960"
  },
  {
    "text": "first we check if the faes resources created right then we have a new problem around we have to configure replication",
    "start": "1392960",
    "end": "1399080"
  },
  {
    "text": "itself right there was no master no replica Etc but uh if the face is ready",
    "start": "1399080",
    "end": "1405440"
  },
  {
    "text": "then we got a pod restart from a dragon instance right then we check if the master exists if if there is a master",
    "start": "1405440",
    "end": "1412120"
  },
  {
    "text": "then we configure uh it as a replica to the master if there is no master then it",
    "start": "1412120",
    "end": "1417520"
  },
  {
    "text": "means that uh we need to we need to create a new master itself so it goes ahead and runs a function around like",
    "start": "1417520",
    "end": "1424400"
  },
  {
    "text": "configuring your replication itself uh and if you see the example of like you're configuring the Pod as a replica",
    "start": "1424400",
    "end": "1430840"
  },
  {
    "text": "you see that it runs a bunch of commands replica of it uses the redis go Library",
    "start": "1430840",
    "end": "1436200"
  },
  {
    "text": "uh the goang redis client and then uh runs the command called the slave off and then it updates the labels like I",
    "start": "1436200",
    "end": "1443159"
  },
  {
    "text": "mentioned right uh it updates the role equal to replica for the Pod and then it updates the pod pod resource itself so",
    "start": "1443159",
    "end": "1450080"
  },
  {
    "text": "the dragonfly pod life cycle reconciler essentially is responsible for All pod",
    "start": "1450080",
    "end": "1455320"
  },
  {
    "text": "events and then it filters down to the dragonfly pod events and then on that",
    "start": "1455320",
    "end": "1460360"
  },
  {
    "text": "based on the status of the Pod if it has a replica role uh uh if it has a role if",
    "start": "1460360",
    "end": "1466480"
  },
  {
    "text": "it has a label role then then uh if it doesn't have a label role then it it it makes sure that if there is a master it",
    "start": "1466480",
    "end": "1472960"
  },
  {
    "text": "configures this part as a replica to the master if there is no master then it makes the replica itself as the new",
    "start": "1472960",
    "end": "1479200"
  },
  {
    "text": "master so it has all the logic around pod life cycles uh so any time a pod goes down",
    "start": "1479200",
    "end": "1485720"
  },
  {
    "text": "right so so for example let's take an example where we have one master and replica the master went down the P life",
    "start": "1485720",
    "end": "1491840"
  },
  {
    "text": "cycle control reconciler gets a request and then it it checks if there is a master no we don't have a master so it",
    "start": "1491840",
    "end": "1497880"
  },
  {
    "text": "will make the replica as the new master and it will configure this part as the replica to that master so essentially",
    "start": "1497880",
    "end": "1503919"
  },
  {
    "text": "the whole topology around who's the master and the replica is controlled by the P life cycle",
    "start": "1503919",
    "end": "1510760"
  },
  {
    "text": "controller uh now uh we saw this so the other important part that the dragonfly uh the",
    "start": "1510760",
    "end": "1519080"
  },
  {
    "text": "that the dragonfly operator does is the upgrades right uh so so like we discussed because this is a a stateful",
    "start": "1519080",
    "end": "1525440"
  },
  {
    "text": "set the dragonfly operat Ator knows better on how to upgrade a dragonfly",
    "start": "1525440",
    "end": "1531559"
  },
  {
    "text": "instance right if there is a master and replica the operator any any any",
    "start": "1531559",
    "end": "1537240"
  },
  {
    "text": "kubernetes operator or even a human operator would know that they would first need to upgrade the p uh the",
    "start": "1537240",
    "end": "1542679"
  },
  {
    "text": "replica right why hit the master First Once you have the replica ready with all the new data then you would go to the",
    "start": "1542679",
    "end": "1548200"
  },
  {
    "text": "master upgrade it and then now your cluster is all good so so so the",
    "start": "1548200",
    "end": "1553799"
  },
  {
    "text": "dragonfly uh operator a operator essentially yeah tries to do the same",
    "start": "1553799",
    "end": "1559039"
  },
  {
    "text": "this is part of the same same dragonfly reconciler right uh when you when you trigger an update an update could be so",
    "start": "1559039",
    "end": "1567440"
  },
  {
    "text": "let's do the demo right if you go here now let's do an update right I want to",
    "start": "1567440",
    "end": "1572520"
  },
  {
    "text": "make the CPU request lower right I've updated the resource now let's apply",
    "start": "1572520",
    "end": "1578640"
  },
  {
    "text": "it now now that we saw that it is updating the the upgrade life cycle",
    "start": "1580320",
    "end": "1585520"
  },
  {
    "text": "would first start with the replica so here zero was the replica so it's starting from a replica it deleted that",
    "start": "1585520",
    "end": "1593000"
  },
  {
    "text": "and then once we once we have the zero pod back up and also uh and also as a",
    "start": "1593000",
    "end": "1599039"
  },
  {
    "text": "ready replica again right because uh when you when you terminate the sample zero it lost all its data when the new",
    "start": "1599039",
    "end": "1605559"
  },
  {
    "text": "sample zero came in with the new resource requirements it has to again be backed up the you buy the data from the",
    "start": "1605559",
    "end": "1612679"
  },
  {
    "text": "master and once that is ready then the operator you triggers the update first",
    "start": "1612679",
    "end": "1617919"
  },
  {
    "text": "it's your sample one as we saw sample one was just your Terminator now it's",
    "start": "1617919",
    "end": "1623039"
  },
  {
    "text": "getting back up uh in this meanwhile we saw that when the master is Master is",
    "start": "1623039",
    "end": "1628200"
  },
  {
    "text": "being deleted uh the replica has to be the new master so that has already been",
    "start": "1628200",
    "end": "1634000"
  },
  {
    "text": "done so now if we go back and see who's the master with the RO equal to",
    "start": "1634000",
    "end": "1641520"
  },
  {
    "text": "master uh we see that sample zero is now the master again now if we run the same",
    "start": "1641520",
    "end": "1646760"
  },
  {
    "text": "command to get the data right now if we do uh get",
    "start": "1646760",
    "end": "1652080"
  },
  {
    "text": "event the data was persisted even during this whole roll out right like we started with a replica we deleted that",
    "start": "1652080",
    "end": "1658520"
  },
  {
    "text": "we got a new replica with the new configuration and then we updated the master the master went down uh the",
    "start": "1658520",
    "end": "1665240"
  },
  {
    "text": "replica got promoted as the master and the and the new ma the old Master is now a replica to the new master and the data",
    "start": "1665240",
    "end": "1671399"
  },
  {
    "text": "is still all there so so this is the thing that we're talking about right the transition around like upgrades is is",
    "start": "1671399",
    "end": "1677640"
  },
  {
    "text": "now carried out by the operator uh because it knows how best to do that and",
    "start": "1677640",
    "end": "1683000"
  },
  {
    "text": "how does this happen so essentially if you look at the code right first if you check if the if the state full sets uh",
    "start": "1683000",
    "end": "1691159"
  },
  {
    "text": "part spec has changed right only only some some kind of like configuration updates require a roll out right not all",
    "start": "1691159",
    "end": "1698159"
  },
  {
    "text": "updates are the same so for example if you add a new label uh they don't require like a whole restart of the part",
    "start": "1698159",
    "end": "1704120"
  },
  {
    "text": "but only some things do and and we only do that when those happen so essentially we update the the status field to EAS",
    "start": "1704120",
    "end": "1711120"
  },
  {
    "text": "rolling update and then uh we reply back now when now we rerun the reconcile we",
    "start": "1711120",
    "end": "1718640"
  },
  {
    "text": "are here right we see that uh the the rolling update is happening we'll first list out all the parts of the part of",
    "start": "1718640",
    "end": "1725240"
  },
  {
    "text": "this dragonfly instance uh we then start with the replicas right we check if it is on the if it is on the latest",
    "start": "1725240",
    "end": "1732640"
  },
  {
    "text": "version uh uh we first want all the current replicas to be to be ready with",
    "start": "1732640",
    "end": "1739279"
  },
  {
    "text": "the data right with the old data when they are ready we we then start terminating uh uh each replica right we",
    "start": "1739279",
    "end": "1746600"
  },
  {
    "text": "start with the replicas and then once we terminate all the replicas and then they're back up and again configured as",
    "start": "1746600",
    "end": "1752960"
  },
  {
    "text": "replica to the existing Master uh then we move on to the master we delete the master and then the M when we delete the",
    "start": "1752960",
    "end": "1760760"
  },
  {
    "text": "master one of the replica is already upgraded as the new master and then the old Master now comes back as a replica",
    "start": "1760760",
    "end": "1766559"
  },
  {
    "text": "to this to this dragonfly instance so that's how we do a roll out of the of the whole thing while making sure that",
    "start": "1766559",
    "end": "1774440"
  },
  {
    "text": "uh we understand redis we we use redis command so even in this example here we",
    "start": "1774440",
    "end": "1779519"
  },
  {
    "text": "when we update the master right we we we do that using the repple Takeover command the Ripple takeover command is a",
    "start": "1779519",
    "end": "1785640"
  },
  {
    "text": "custom command specific to dragonfly where it logs the master uh during this transition so that the client is not",
    "start": "1785640",
    "end": "1791960"
  },
  {
    "text": "writing anything and then the master is released so that even the clients are aware of until which point the data was",
    "start": "1791960",
    "end": "1798679"
  },
  {
    "text": "inserted and available so this we do this uh uh using",
    "start": "1798679",
    "end": "1803840"
  },
  {
    "text": "this uh using this field called the update resource uh strategy uh so on a",
    "start": "1803840",
    "end": "1810480"
  },
  {
    "text": "stateful set you can you you can set this on delet stateful set strategy which means the state will set is not",
    "start": "1810480",
    "end": "1817000"
  },
  {
    "text": "automatically upgraded by kubernetes uh so when a uh when you apply a new change",
    "start": "1817000",
    "end": "1822679"
  },
  {
    "text": "it doesn't do anything and once the operator is responsible here to Del the pods the",
    "start": "1822679",
    "end": "1828000"
  },
  {
    "text": "underlying pods when when the when the operator when when the operator like deletes the old part now kubernetes",
    "start": "1828000",
    "end": "1834640"
  },
  {
    "text": "creates a new pod with the new configuration uh so without the operator deleting the Pod your kubernetes doesn't",
    "start": "1834640",
    "end": "1840840"
  },
  {
    "text": "do anything on an on an update so this is the this is the use of like the on delete stateful set upgrade strategy",
    "start": "1840840",
    "end": "1847120"
  },
  {
    "text": "right where where kubernetes like doesn't do anything when an update to a stateful set is given uh it waits until",
    "start": "1847120",
    "end": "1853440"
  },
  {
    "text": "someone deletes the part and then it creates the new pod with new configurations so that the order of the",
    "start": "1853440",
    "end": "1858960"
  },
  {
    "text": "upgrade and also when to do what is left to the operator here so we use that logic in kuet to essentially prevent",
    "start": "1858960",
    "end": "1866399"
  },
  {
    "text": "your kubernetes from doing the whole upgrade uh so those are the three things",
    "start": "1866399",
    "end": "1871960"
  },
  {
    "text": "that we do with the operator with the dragonfly operator like I said the code is open source uh if you want to",
    "start": "1871960",
    "end": "1877720"
  },
  {
    "text": "contribute if you want to look at it it's all there uh and that's the talk yeah thank",
    "start": "1877720",
    "end": "1883039"
  },
  {
    "text": "you",
    "start": "1883039",
    "end": "1886039"
  }
]