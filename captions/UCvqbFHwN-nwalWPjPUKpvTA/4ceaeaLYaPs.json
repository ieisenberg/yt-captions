[
  {
    "text": "well welcome to our session today i am uh stephen barely from mastercard",
    "start": "640",
    "end": "6319"
  },
  {
    "text": "and i'm daniel mangum from upbound yeah and today we're going to be talking about um",
    "start": "6319",
    "end": "11360"
  },
  {
    "text": "a project that i think is really cool we're going to be talking about building your own enterprise control plane and basing that on kubernetes and we",
    "start": "11360",
    "end": "17039"
  },
  {
    "text": "hope to show you that this is actually really powerful and really easy to do so really that's kind of our goals for",
    "start": "17039",
    "end": "22720"
  },
  {
    "text": "this talk first we want to talk about this is really one of the fundamental concepts of kubernetes but we really",
    "start": "22720",
    "end": "27840"
  },
  {
    "text": "want to talk about why controllers are really one of the best ways to manage your internal infrastructure and we want to kind of show just how",
    "start": "27840",
    "end": "34960"
  },
  {
    "text": "easy it is given a lot of the tooling libraries around kubernetes right now so just really quick what our agenda is",
    "start": "34960",
    "end": "42079"
  },
  {
    "text": "today this is an 85 minute session um i'm going to do a few minutes of an introduction just basically talking",
    "start": "42079",
    "end": "48320"
  },
  {
    "text": "about what infrastructure is and how people are doing it today and then we'll really get into a lot of",
    "start": "48320",
    "end": "54079"
  },
  {
    "text": "coding where we'll be talking about actually developing your own controller and during that we're basically going to walk through all the parts of doing that",
    "start": "54079",
    "end": "61199"
  },
  {
    "text": "that's from defining your custom resource definitions um talking to the remote api that you",
    "start": "61199",
    "end": "66240"
  },
  {
    "text": "want to manage actually how you get into the guts of a controller and do credit operations and then finally we're gonna do some more",
    "start": "66240",
    "end": "71680"
  },
  {
    "text": "advanced things like packaging your controller up so you could deliver it to clusters and then finally there's some really cool",
    "start": "71680",
    "end": "77759"
  },
  {
    "text": "higher level abstractions we could do where you could take other people's controllers and other people's kubernetes objects and combine them to",
    "start": "77759",
    "end": "83520"
  },
  {
    "text": "make more complex infrastructure so there's really very powerful things so we hope to show you that this is actually fairly easy to",
    "start": "83520",
    "end": "89680"
  },
  {
    "text": "do and that you can really make a very powerful platform on top of this",
    "start": "89680",
    "end": "95840"
  },
  {
    "text": "so first when we talk about infrastructure what do we mean if you look at now what a lot of companies are provisioning what's in the",
    "start": "95840",
    "end": "102399"
  },
  {
    "text": "scope of infrastructure teams it's usually things like storage and virtual machines and folks will be",
    "start": "102399",
    "end": "107759"
  },
  {
    "text": "asking for firewall rules and networks and dns records so whenever someone wants you know an application",
    "start": "107759",
    "end": "113360"
  },
  {
    "text": "team wants to deploy something they're usually asking for a lot of these things and if you look at",
    "start": "113360",
    "end": "119119"
  },
  {
    "text": "how infrastructure teams they used to do these manually and then slowly they've been getting into automation so what you see",
    "start": "119119",
    "end": "124799"
  },
  {
    "text": "is usually in most enterprises what companies are doing is they're writing these things in scripts they're doing some you know chef for python and ruby um",
    "start": "124799",
    "end": "132800"
  },
  {
    "text": "and you know or you know some of the newer companies like newer efforts things a lot of these tools are migrating it to go",
    "start": "132800",
    "end": "140160"
  },
  {
    "text": "and what folks usually do is build like custom scripting on top of devops tools like chef um ansible is very popular and",
    "start": "140160",
    "end": "146800"
  },
  {
    "text": "probably one of the most popular provisioning tools recently has been something called terraform um which is really good for managing",
    "start": "146800",
    "end": "153040"
  },
  {
    "text": "remote apis and then finally like the run time for these platforms is usually uh a ci system so what happens is",
    "start": "153040",
    "end": "159680"
  },
  {
    "text": "somebody commits something into git the ci system sees it and you know fires off these scripts so",
    "start": "159680",
    "end": "164959"
  },
  {
    "text": "this infrastructure that you're building on top of your custom scripting using some devops tools is usually fired off",
    "start": "164959",
    "end": "170560"
  },
  {
    "text": "you know with a ci pipeline so you know and this is basically what it looks like kind of",
    "start": "170560",
    "end": "176080"
  },
  {
    "text": "logically right so usually what happens is you'll define your own spec and um you know i've been on demo days where",
    "start": "176080",
    "end": "182879"
  },
  {
    "text": "every single team defines their own specs so we'll have five different spec files introduced during one demo day",
    "start": "182879",
    "end": "188560"
  },
  {
    "text": "so this is um you know we generate a lot of these next thing is",
    "start": "188560",
    "end": "193760"
  },
  {
    "text": "in your pipeline you usually have some code especially systems like jenkins that allow you to",
    "start": "193760",
    "end": "198800"
  },
  {
    "text": "do things like groovy code that you'll start seeing um running shell scripts in here uh doing",
    "start": "198800",
    "end": "204720"
  },
  {
    "text": "some advanced logic and then finally it's the stuff you want to do right like you're you have to like compare you have to",
    "start": "204720",
    "end": "211440"
  },
  {
    "text": "connect to the real remote api you have to compare what you have to that and you have to do something so that's usually what these",
    "start": "211440",
    "end": "217680"
  },
  {
    "text": "infrastructure pipelines look like today so we're going to talk about some of the",
    "start": "217680",
    "end": "223280"
  },
  {
    "text": "problems that we're hoping to solve with the controller approach just you know what we see is an existing",
    "start": "223280",
    "end": "228480"
  },
  {
    "text": "the kind of the issues that are with these kind of ci-based deployments and the first thing is like when everyone has their own spec file there's usually",
    "start": "228480",
    "end": "234480"
  },
  {
    "text": "validation is not done um you know it might be done at the json level but it's usually not a schema",
    "start": "234480",
    "end": "240239"
  },
  {
    "text": "level a validation the next thing is a lot of these things are very uh command line driven and it's very",
    "start": "240239",
    "end": "246480"
  },
  {
    "text": "hard to expand export these as an api to developers right so the developer experience usually involves opening up a ticket or",
    "start": "246480",
    "end": "252159"
  },
  {
    "text": "committing something to get and then finally tooling is very basic you know you might be able to edit",
    "start": "252159",
    "end": "257919"
  },
  {
    "text": "the files in json but there's not a lot of other dev tools that support it",
    "start": "257919",
    "end": "263600"
  },
  {
    "text": "the ci pipeline is usually the the main thing running this and probably",
    "start": "263600",
    "end": "269199"
  },
  {
    "text": "the most important thing about this is like these fire off on changes in git not in changes of desired state so you",
    "start": "269199",
    "end": "276400"
  },
  {
    "text": "know it doesn't care whether you're adding a comment or whether you're making large changes it's still going to fire it off and usually what happens is it runs only",
    "start": "276400",
    "end": "282479"
  },
  {
    "text": "once um so once you deploy this it doesn't go back and check it doesn't check if anything is drifted or anything like",
    "start": "282479",
    "end": "288160"
  },
  {
    "text": "that and then finally there's a lot of you know especially with homegrown",
    "start": "288160",
    "end": "293840"
  },
  {
    "text": "tooling there's a lot of issues around reconciliation and state management and usually operations is",
    "start": "293840",
    "end": "299759"
  },
  {
    "text": "you know besides sending out an email to someone if a job fails is pretty much the most of the operational support that a",
    "start": "299759",
    "end": "305680"
  },
  {
    "text": "lot of these tools have so that's kind of if you look at what the vast majority of like internal tools are right now it's",
    "start": "305680",
    "end": "311280"
  },
  {
    "text": "pretty much like this so what we want to talk about since we're in kubernetes we want to talk about how do we do this in a way that",
    "start": "311280",
    "end": "316400"
  },
  {
    "text": "you know is kubernetes centric and that you know takes advantage of the kubernetes platform so",
    "start": "316400",
    "end": "321919"
  },
  {
    "text": "the first thing is that we talk about the controller approach right what if we could take all those things that we want to provision them and model",
    "start": "321919",
    "end": "328400"
  },
  {
    "text": "them as kubernetes objects so you know we'll have a sql database kind we will have a storage bucket kind and",
    "start": "328400",
    "end": "334639"
  },
  {
    "text": "you know for this demo we'll have like a github team time um and as part of that we can have a",
    "start": "334639",
    "end": "341440"
  },
  {
    "text": "spec defined we could have metadata we could have annotations all the good things about kubernetes um we could have this in our files and",
    "start": "341440",
    "end": "347600"
  },
  {
    "text": "we don't have to think about the spec file anymore because it's handled by somebody else then what we could do is we could put",
    "start": "347600",
    "end": "352960"
  },
  {
    "text": "kubernetes there and then you know a lot of the great things about kubernetes it has an api that supports a lot of different tooling",
    "start": "352960",
    "end": "358400"
  },
  {
    "text": "um it can watch for events for you it can look at changes and things like that and notify you know whatever back end you want so",
    "start": "358400",
    "end": "365680"
  },
  {
    "text": "um that's kind of a powerful pattern and then finally what we want is that for each one of these things that we want to",
    "start": "365680",
    "end": "370880"
  },
  {
    "text": "manage we'll probably have a controller running and this will be um constantly trying to reconcile whatever",
    "start": "370880",
    "end": "377919"
  },
  {
    "text": "desired state you put into the system talking to the external api so things like observability failover um",
    "start": "377919",
    "end": "384160"
  },
  {
    "text": "there's a whole bunch of features you get in a kubernetes controller that basically spending all its time trying to get to the state that you've",
    "start": "384160",
    "end": "390400"
  },
  {
    "text": "asked for so it's a very powerful pattern in that way",
    "start": "390400",
    "end": "395840"
  },
  {
    "text": "so what we're going to talk about in this tutorial today is basically how we build in all the layers of this controller so",
    "start": "396319",
    "end": "402319"
  },
  {
    "text": "at the very bottom level you know we have kubernetes itself which will run our controllers which run adapter containers and it'll handle things like",
    "start": "402319",
    "end": "408639"
  },
  {
    "text": "well-based access controls if you want to put a firewall in front of this or a load balancer the next thing is if you",
    "start": "408639",
    "end": "414720"
  },
  {
    "text": "haven't worked with kubernetes before like done any programming there's this entire thing concept of machinery right",
    "start": "414720",
    "end": "420560"
  },
  {
    "text": "this is how all the apis are composed and there's a lot of great things here but probably one of the most important",
    "start": "420560",
    "end": "425840"
  },
  {
    "text": "things that's emerged recently is this idea of custom resource definitions or crds you're going to hear these a lot and",
    "start": "425840",
    "end": "431520"
  },
  {
    "text": "this is how you can make custom objects look like native kubernetes so if you want to define your",
    "start": "431520",
    "end": "436560"
  },
  {
    "text": "own type like a virtual machine type you can just apply it to kubernetes and it'll look like anything else",
    "start": "436560",
    "end": "442479"
  },
  {
    "text": "on top of that is this library called controller runtime which is recently become probably one of the main",
    "start": "442479",
    "end": "449360"
  },
  {
    "text": "libraries that almost everyone who writes kubernetes controllers at least uses the sum part um and this",
    "start": "449360",
    "end": "454479"
  },
  {
    "text": "takes care of things like what happens um if someone applies a change to one of the kubernetes objects it watches it",
    "start": "454479",
    "end": "460479"
  },
  {
    "text": "helps you do reconciliation on kubernetes so it makes it very easy to have these controllers that respond to changes",
    "start": "460479",
    "end": "466160"
  },
  {
    "text": "when your customers you know want to ask for something different your infrastructure will automatically get",
    "start": "466160",
    "end": "472000"
  },
  {
    "text": "notify whatever's watching it and then finally probably one of the most interesting things about this talk",
    "start": "472000",
    "end": "477120"
  },
  {
    "text": "is across plain run time itself and crossplay makes it really easy to manage external apis",
    "start": "477120",
    "end": "483280"
  },
  {
    "text": "most of the other kubernetes things make it easy to manage kubernetes objects but crossplane makes it really easy to say",
    "start": "483280",
    "end": "489199"
  },
  {
    "text": "find any api out there and then do these operations and treat it like a kubernetes managed infrastructure so this is really",
    "start": "489199",
    "end": "495520"
  },
  {
    "text": "one of the most exciting things that makes it um really good for building your own software because really",
    "start": "495520",
    "end": "501280"
  },
  {
    "text": "the benefit of this approach is that basically you only have to focus on kind of the logic in your controller and you",
    "start": "501280",
    "end": "507440"
  },
  {
    "text": "get extremely full-featured control planes just by building on the rest of this things that are constantly reconciling",
    "start": "507440",
    "end": "513599"
  },
  {
    "text": "things that are validated via open api at the client level so um this is a very powerful platform and",
    "start": "513599",
    "end": "519120"
  },
  {
    "text": "you can spend a lot of your time just focusing on your logic and finally um i you know it has to be",
    "start": "519120",
    "end": "526240"
  },
  {
    "text": "said that you know when you have native kubernetes controllers for your infrastructure suddenly you could use all kinds of great tools i use customize",
    "start": "526240",
    "end": "532720"
  },
  {
    "text": "a lot personally the amazon cdk is really interesting too i'm a big fan of argo cd for deploying",
    "start": "532720",
    "end": "539360"
  },
  {
    "text": "things to any cluster it does zips valero could back it up um there's cross-plane demos using open",
    "start": "539360",
    "end": "545200"
  },
  {
    "text": "policy agent so it's a lot of exciting things",
    "start": "545200",
    "end": "550480"
  },
  {
    "text": "so finally summary there's a massive ecosystem support crds let you expose infrastructures kubernetes objects and",
    "start": "550480",
    "end": "556480"
  },
  {
    "text": "really there's libraries that let you build really full featured powerful software so really in summary this is really um an",
    "start": "556480",
    "end": "562800"
  },
  {
    "text": "ideal platform for managing about any infrastructure all right so before we get too far into",
    "start": "562800",
    "end": "568080"
  },
  {
    "text": "the tutorial i just want to walk through taking a look at what crossplane is and how we can get it installed and start extending someone's",
    "start": "568080",
    "end": "574480"
  },
  {
    "text": "functionality so i'm here on the crossplane website and you'll see the main thing that we're",
    "start": "574480",
    "end": "579600"
  },
  {
    "text": "going to propose doing with crossplane is managing our infrastructure from kubernetes if we go over to our documentation we",
    "start": "579600",
    "end": "586000"
  },
  {
    "text": "have a helpful getting started guide which we're going to run through uh shortly right here",
    "start": "586000",
    "end": "591279"
  },
  {
    "text": "so i'll start off by going ahead and spinning up a kind cluster if you're not familiar with kind it's a great way to run a local kubernetes",
    "start": "591279",
    "end": "598320"
  },
  {
    "text": "cluster so it's actually going to start a cluster running in docker for us so while that's coming up let's go ahead",
    "start": "598320",
    "end": "604640"
  },
  {
    "text": "and take a look at what crossplaying kind of proposes it will do for you all right so the first thing is provisioning and managing your",
    "start": "604640",
    "end": "610959"
  },
  {
    "text": "infrastructure and that's the primary thing we're going to be looking at today at the end of our tutorial we'll talk a little bit about how we can",
    "start": "610959",
    "end": "617920"
  },
  {
    "text": "package that up and install it um into different cross-plane clusters to extend that functionality",
    "start": "617920",
    "end": "623440"
  },
  {
    "text": "but the first thing we want to do is as a kubernetes add-on install crossplane into our kubernetes",
    "start": "623440",
    "end": "629120"
  },
  {
    "text": "cluster so you'll see here we have the alpha and master channels um alpha just being the latest release",
    "start": "629120",
    "end": "634160"
  },
  {
    "text": "which is 0.13 as of this recording so we can go ahead and create a namespace and i've already",
    "start": "634160",
    "end": "640079"
  },
  {
    "text": "added the crossplane alpha repo here so it's just going to be one command to helm install crossplane",
    "start": "640079",
    "end": "647839"
  },
  {
    "text": "so let's see if our cluster has come up here it looks like it has so i'll create that namespace crossplane",
    "start": "648079",
    "end": "653920"
  },
  {
    "text": "system which is where we like to install crossplane and then we can go",
    "start": "653920",
    "end": "659760"
  },
  {
    "text": "ahead and do the helm installation so after a moment here you'll see that it gives us a little bit of information",
    "start": "659760",
    "end": "665279"
  },
  {
    "text": "as well as a chart description and you'll see we're using chart version 0.13 if we look at the pods that are now",
    "start": "665279",
    "end": "671839"
  },
  {
    "text": "running in our cluster we should see the crossplane pod which is kind of the core functionality of crossplane",
    "start": "671839",
    "end": "677839"
  },
  {
    "text": "and then the rbac manager having these two separate processes allows us to really lock down security",
    "start": "677839",
    "end": "683279"
  },
  {
    "text": "because managing our back is completely dedicated to the rbac manager which allows crossplane to run with",
    "start": "683279",
    "end": "689440"
  },
  {
    "text": "lesser permissions than cluster admin if you'd like to manage those permissions yourself instead of having this automated workflow",
    "start": "689440",
    "end": "695680"
  },
  {
    "text": "with the rbac manager you're welcome to just deploy the crossplane pod and let that handle all the work for you",
    "start": "695680",
    "end": "702959"
  },
  {
    "text": "all right so now we have all of these pods running and if we look at our crds here we still",
    "start": "702959",
    "end": "708560"
  },
  {
    "text": "haven't installed very much in the terms of new api types you'll see some kind of",
    "start": "708560",
    "end": "714880"
  },
  {
    "text": "meta crd types like packaging for configurations and providers which we're going to look at momentarily",
    "start": "714880",
    "end": "720560"
  },
  {
    "text": "but you don't see any external cloud infrastructure yet that's because crossplane comes out of the box without supporting any",
    "start": "720560",
    "end": "727279"
  },
  {
    "text": "individual providers so it differs from other solutions in that regard that may be proprietary to a single cloud provider or something",
    "start": "727279",
    "end": "733839"
  },
  {
    "text": "like that we have a provider model which is what we're going to be designing today but we also have a number of providers",
    "start": "733839",
    "end": "740720"
  },
  {
    "text": "for common cloud infrastructure that cross-plane as a community maintains",
    "start": "740720",
    "end": "745839"
  },
  {
    "text": "so we can go ahead and go into the documentation here and the first thing we do after installing crossplane",
    "start": "745839",
    "end": "751040"
  },
  {
    "text": "and checking the status is install the crossplane cli this is a cube control plugin so you'll just be able to do cube",
    "start": "751040",
    "end": "756959"
  },
  {
    "text": "control cross plane and a variety of commands and this makes it really easy to add new functionality",
    "start": "756959",
    "end": "762639"
  },
  {
    "text": "so we have two types of packages in crossplane and we're particularly looking at provider today",
    "start": "762639",
    "end": "768880"
  },
  {
    "text": "and so you'll see here we want to install a provider provider aws so this is actually packaged up in an oci image",
    "start": "768880",
    "end": "775600"
  },
  {
    "text": "and we're going to use the latest stable version of provider aws which is 0.12 so i'll go ahead and copy this over into",
    "start": "775600",
    "end": "782000"
  },
  {
    "text": "my cluster and once again we see that we have these crds and just the cross plane pods",
    "start": "782000",
    "end": "787440"
  },
  {
    "text": "running we're going to go ahead and install the provider what's happening behind the scenes is that crossplane is unpacking",
    "start": "787440",
    "end": "793760"
  },
  {
    "text": "the contents of this provider that we created and it's going to install crds and also start controllers to watch",
    "start": "793760",
    "end": "800000"
  },
  {
    "text": "those crds and take action uh based on events that take place in the cluster",
    "start": "800000",
    "end": "805360"
  },
  {
    "text": "so let's go ahead and take a look at the crds you'll see we have far more now and if we actually scroll up",
    "start": "805360",
    "end": "810480"
  },
  {
    "text": "you'll see that there are lots of aws specific ones such as repositories for ecr ec2",
    "start": "810480",
    "end": "817440"
  },
  {
    "text": "security groups iam roles dynamo tables rds instances etc",
    "start": "817440",
    "end": "823120"
  },
  {
    "text": "so we've just extended the functionality of our kubernetes cluster quite a bit by being able to right alongside our",
    "start": "823120",
    "end": "829519"
  },
  {
    "text": "deployments and other native kubernetes types uh create external infrastructure which",
    "start": "829519",
    "end": "834880"
  },
  {
    "text": "we can then use to manage our infrastructure on those cloud platforms and connect that to our cross plane",
    "start": "834880",
    "end": "841519"
  },
  {
    "text": "instances and once we have provider aws installed we can see what crds it brought with it",
    "start": "841519",
    "end": "847839"
  },
  {
    "text": "and we can also see that there is a controller running for provider aws that's going to be",
    "start": "847839",
    "end": "853680"
  },
  {
    "text": "reconciling those resources all right so the next thing we want to do is to be able to",
    "start": "853680",
    "end": "859839"
  },
  {
    "text": "actually provision resources on aws we need to create a secret with our",
    "start": "859839",
    "end": "865040"
  },
  {
    "text": "account information which we have a helpful command here to use the aws cli to do",
    "start": "865040",
    "end": "870079"
  },
  {
    "text": "and then we're going to create a provider config which basically informs crossplane how to reach out to the aws provider and here we're going to",
    "start": "870079",
    "end": "876720"
  },
  {
    "text": "use the secret credential source to be able to do that so i'll just run these commands",
    "start": "876720",
    "end": "882079"
  },
  {
    "text": "real quick and we can make sure that we get something installed all right so we created our",
    "start": "882079",
    "end": "889760"
  },
  {
    "text": "file and then we're going to create a generic secret from it in our kubernetes cluster",
    "start": "889760",
    "end": "895839"
  },
  {
    "text": "and the last thing we want to do is go ahead and use this provider config and we have this helpful command here",
    "start": "895839",
    "end": "900880"
  },
  {
    "text": "where you can apply it from a remote url i would normally advise you to check the contents of something before you apply",
    "start": "900880",
    "end": "907120"
  },
  {
    "text": "it against your cluster but since we have a local cluster here and i put this link here we'll go ahead and do it",
    "start": "907120",
    "end": "914720"
  },
  {
    "text": "all right so we have our default provider config here and the next step is to actually",
    "start": "915440",
    "end": "921600"
  },
  {
    "text": "provision some resources so let's go on to the next section and look at provision infrastructure and you'll see what we're going to",
    "start": "921600",
    "end": "927440"
  },
  {
    "text": "provision is an rds instance on aws and we're going to tell it where to write our connection secret so that's",
    "start": "927440",
    "end": "933279"
  },
  {
    "text": "another big part of cross plane which we're going to see later on we're designing our own provider is you know credential",
    "start": "933279",
    "end": "939839"
  },
  {
    "text": "information so you can connect this to your workload so you can have a deployment that talks to the database we're going to show a simple example",
    "start": "939839",
    "end": "946240"
  },
  {
    "text": "here um so we're just going to provision the database and see what happens",
    "start": "946240",
    "end": "951920"
  },
  {
    "text": "all right we'll run this command it looks like our rds postgres instance was created and we have a",
    "start": "952880",
    "end": "959360"
  },
  {
    "text": "couple of shortcuts that will help you get resources more quickly um so you could do something like kgit",
    "start": "959360",
    "end": "965120"
  },
  {
    "text": "aws here to list all of your aws resources which this frequently has large gaps in it so",
    "start": "965120",
    "end": "970240"
  },
  {
    "text": "let's do something more specific and just get an rds instance all right",
    "start": "970240",
    "end": "975680"
  },
  {
    "text": "so we have our rds instance that we just created you'll see some information about that importantly we have our sync value which",
    "start": "975680",
    "end": "982560"
  },
  {
    "text": "is saying is our cross plane controller and the spec that we've specified for this resource",
    "start": "982560",
    "end": "988000"
  },
  {
    "text": "um consistent with what is happening um on the external infrastructure and then ready is indicating that it's false",
    "start": "988000",
    "end": "994959"
  },
  {
    "text": "and that's basically just to let us know that this resource is not available for consumption yet and since we specified that the",
    "start": "994959",
    "end": "1002079"
  },
  {
    "text": "connection information should be written to this secret when the resource actually becomes ready",
    "start": "1002079",
    "end": "1007360"
  },
  {
    "text": "we should be able to get secrets and in this case in the cross plane system namespace and",
    "start": "1007360",
    "end": "1012480"
  },
  {
    "text": "see that it's there and we'll see here that we don't see the secret at this point or actually we do",
    "start": "1012480",
    "end": "1018480"
  },
  {
    "text": "it's already present so that was given to us by the actual create operation",
    "start": "1018480",
    "end": "1023519"
  },
  {
    "text": "when this is finished provisioning we're going to see more connection information in there and",
    "start": "1023519",
    "end": "1029038"
  },
  {
    "text": "you can look up the documentation to actually see all the connection information then rds instance publishes",
    "start": "1029039",
    "end": "1034880"
  },
  {
    "text": "to its secret and then you can specify via environment variables um or something of that nature",
    "start": "1034880",
    "end": "1040400"
  },
  {
    "text": "how to get the secret into your deployment so your application can talk to it so that's kind of an",
    "start": "1040400",
    "end": "1046079"
  },
  {
    "text": "overview of what you can do at the basic level with crossplane um and you can write whatever provider you'd like to fit into this ecosystem",
    "start": "1046079",
    "end": "1052799"
  },
  {
    "text": "and crossplane will actually manage installing it and upgrading it and and managing all of its different",
    "start": "1052799",
    "end": "1058320"
  },
  {
    "text": "resources and we're going to extend that today but you can also do things like packaging up",
    "start": "1058320",
    "end": "1064480"
  },
  {
    "text": "your infrastructure abstractions which is another layer on top of these primitives which are these cloud provider resources that we've installed",
    "start": "1064480",
    "end": "1070720"
  },
  {
    "text": "into the cluster at the end of our tutorial i'm going to circle back and show you how we can create some of these primitives",
    "start": "1070720",
    "end": "1076640"
  },
  {
    "text": "and package them up all right so now that we've gotten a",
    "start": "1076640",
    "end": "1082080"
  },
  {
    "text": "look at how crossplane works and how you can extend its functionality with providers uh let's look at take a look at one of",
    "start": "1082080",
    "end": "1088880"
  },
  {
    "text": "the providers that we're going to work on today uh this provider github we're calling it kubecon provider github here",
    "start": "1088880",
    "end": "1095200"
  },
  {
    "text": "and to kind of motivate the discussion we're going to have and the work that we're going to do today and hopefully inspire you to go write",
    "start": "1095200",
    "end": "1101280"
  },
  {
    "text": "your own providers let's take a look at what this can do so if you take a look at the crds in our",
    "start": "1101280",
    "end": "1107440"
  },
  {
    "text": "cluster you'll see that we have our provider config and provider config usage which are kind of the plumbing which we'll",
    "start": "1107440",
    "end": "1112880"
  },
  {
    "text": "talk about in a little bit but the primary thing we're going to work on today is this teams resource",
    "start": "1112880",
    "end": "1118160"
  },
  {
    "text": "here and this team basically represents a github team and we're going to want to be able to",
    "start": "1118160",
    "end": "1124160"
  },
  {
    "text": "create and manage teams on github from our kubernetes cluster so just like you would with aws or gcp you",
    "start": "1124160",
    "end": "1130400"
  },
  {
    "text": "go and create a database today we're going to look at creating you know cloud resources",
    "start": "1130400",
    "end": "1135760"
  },
  {
    "text": "in a github organization so i'll go ahead and start off i actually have an example prepared here",
    "start": "1135760",
    "end": "1141679"
  },
  {
    "text": "for us so let's look at the contents of that this is a pretty simple",
    "start": "1141679",
    "end": "1146880"
  },
  {
    "text": "resource here you can see it's just of kind team in the org group and we're going to use the name which is going to represent the name",
    "start": "1146880",
    "end": "1154160"
  },
  {
    "text": "on of the team in github and we have some fields to configure it specifically the org the description and the privacy",
    "start": "1154160",
    "end": "1160880"
  },
  {
    "text": "we'll look at how those get set and how they can be modified later on but for now we just want to show that we",
    "start": "1160880",
    "end": "1166240"
  },
  {
    "text": "can create one of these so i'll go ahead and apply",
    "start": "1166240",
    "end": "1172240"
  },
  {
    "text": "that resource and you'll see over here that we've got some log messages coming from our controller which is running",
    "start": "1172480",
    "end": "1177840"
  },
  {
    "text": "against a local kind cluster here and the important thing we want to see that our external resource",
    "start": "1177840",
    "end": "1183679"
  },
  {
    "text": "is up to date so essentially that's saying is we went and first we created the resource",
    "start": "1183679",
    "end": "1189039"
  },
  {
    "text": "and then we checked to make sure that it matches the configuration that we specified since we just created it it's likely",
    "start": "1189039",
    "end": "1195600"
  },
  {
    "text": "that that happens on the first reconcile but this controller is going to go ahead and make sure that this stays in sync",
    "start": "1195600",
    "end": "1201520"
  },
  {
    "text": "and if we look at our team we can say that we have a synced team here and if",
    "start": "1201520",
    "end": "1207679"
  },
  {
    "text": "you looked at the status we can get a little more detail here you can see that there's some information",
    "start": "1207679",
    "end": "1213280"
  },
  {
    "text": "about when it was last reconciled and we can customize this to give more information if we want",
    "start": "1213280",
    "end": "1219080"
  },
  {
    "text": "[Music] i also want to show that this team actually does exist in our github",
    "start": "1219080",
    "end": "1224240"
  },
  {
    "text": "account so if you look at the configuration we had we named it was crossplan and we have our description",
    "start": "1224240",
    "end": "1230559"
  },
  {
    "text": "and then we've also seen that it's a secret um account uh so we'll show how you can",
    "start": "1230559",
    "end": "1236640"
  },
  {
    "text": "maybe uh modify that in the future but before we jump into that too much we've seen how these resources and",
    "start": "1236640",
    "end": "1243039"
  },
  {
    "text": "different apis uh get added to a cluster so stephen i wanted you to give us a little bit of",
    "start": "1243039",
    "end": "1248960"
  },
  {
    "text": "insight onto what is a crd how are they structured and how does a controller kind of look",
    "start": "1248960",
    "end": "1254240"
  },
  {
    "text": "at the two different main parts of a crd to drive its action yeah thank you dan",
    "start": "1254240",
    "end": "1259760"
  },
  {
    "text": "yeah so this is one of the really interesting things about this pattern is that you're going to hear this term a lot if you haven't heard it before and this is a",
    "start": "1259760",
    "end": "1265919"
  },
  {
    "text": "custom resource definition and this is basically taking um things that are outside of kubernetes",
    "start": "1265919",
    "end": "1271919"
  },
  {
    "text": "and making them look like kubernetes and what we're going to show you right now is actually the code for doing that um so one of the most important things",
    "start": "1271919",
    "end": "1279520"
  },
  {
    "text": "here is like when you and this is pretty much the pattern not only just for cross plane but pretty much",
    "start": "1279520",
    "end": "1284720"
  },
  {
    "text": "almost any controller that you're going to be seeing that's written for kubernetes so you'll have this directory called",
    "start": "1284720",
    "end": "1290000"
  },
  {
    "text": "apis and then that is usually where we have the definitions of where we define our crds um so what we're going to do is we're",
    "start": "1290000",
    "end": "1295840"
  },
  {
    "text": "looking at a file here called types.go and there's just a few important fields here that we want to put out first",
    "start": "1295840",
    "end": "1303039"
  },
  {
    "text": "um this is parameters and observations right so this here is if you looked at the",
    "start": "1303039",
    "end": "1309200"
  },
  {
    "text": "example that um dan showed before we had the name of the organization the description",
    "start": "1309200",
    "end": "1314640"
  },
  {
    "text": "and the privacy settings right so when you create a crd what the way it works",
    "start": "1314640",
    "end": "1319679"
  },
  {
    "text": "with ku builder is that it looks at your go code and then the make files generate the crd the yaml for that but",
    "start": "1319679",
    "end": "1325679"
  },
  {
    "text": "then you apply to your cluster so this is how everything gets mapped and this is how you create your own custom kubernetes objects then you could",
    "start": "1325679",
    "end": "1332000"
  },
  {
    "text": "apply to a cluster and have controllers manage so you can see here we have work",
    "start": "1332000",
    "end": "1337520"
  },
  {
    "text": "description and privacy the next thing is observations like what's an observation an observation",
    "start": "1337520",
    "end": "1343520"
  },
  {
    "text": "is something that your controller is going to go talk to a remote api and observe the",
    "start": "1343520",
    "end": "1349039"
  },
  {
    "text": "state of that and based on that it's going to decide you know what it needs to do in terms of reconciliation",
    "start": "1349039",
    "end": "1354880"
  },
  {
    "text": "so those are kind of the key things in terms of uh what you store in terms of your settings",
    "start": "1354880",
    "end": "1360640"
  },
  {
    "text": "and the value and there's another two important fields that you'll see and this is pretty much present in all",
    "start": "1360640",
    "end": "1366000"
  },
  {
    "text": "coupe builder type controllers there's a spec and a status so the spec is the desired",
    "start": "1366000",
    "end": "1372960"
  },
  {
    "text": "state that's what you provide to the cluster say this is what i want things to look like",
    "start": "1372960",
    "end": "1378480"
  },
  {
    "text": "um and that's the thing that the user provides and then the status is the thing that the controller comes back",
    "start": "1378480",
    "end": "1383760"
  },
  {
    "text": "with it goes talks to a remote resource and it comes back and gives to the state to it so these",
    "start": "1383760",
    "end": "1389520"
  },
  {
    "text": "are two of the important concepts about building out a kubernetes api crd",
    "start": "1389520",
    "end": "1395039"
  },
  {
    "text": "absolutely and and one of the things that stephen pointed out there is that we have the parameters and observation",
    "start": "1395039",
    "end": "1400080"
  },
  {
    "text": "and we have the spec and status you can think of it as the parameters in observation being the uh provider specific fields",
    "start": "1400080",
    "end": "1408080"
  },
  {
    "text": "and they kind of roll up into the spec so we have our parameters for the provider specific in this case it's",
    "start": "1408080",
    "end": "1413360"
  },
  {
    "text": "github that's rolling up into our spec here and then the status we're going to have the at provider fields",
    "start": "1413360",
    "end": "1418960"
  },
  {
    "text": "and this is just a cross playing pattern we have um and then within the crossplane ecosystem we also",
    "start": "1418960",
    "end": "1424320"
  },
  {
    "text": "have these embedded structs that we put put in our spec in status and that just provides some uniform fields across",
    "start": "1424320",
    "end": "1430720"
  },
  {
    "text": "all um of our resource types and they're used to do things like",
    "start": "1430720",
    "end": "1436240"
  },
  {
    "text": "connect to the external provider via the provider config which is another type which we can look at uh",
    "start": "1436240",
    "end": "1443039"
  },
  {
    "text": "quickly here if you saw earlier when i created the team we had a list of crds including provider",
    "start": "1443039",
    "end": "1450960"
  },
  {
    "text": "config and provider config usage so once again we're seeing things that steven just mentioned",
    "start": "1450960",
    "end": "1456559"
  },
  {
    "text": "this is kind of a special resource in the crossplane ecosystem um it tells you how to connect to the",
    "start": "1456559",
    "end": "1462400"
  },
  {
    "text": "external provider so it has some credentials method in it and once again you're seeing we have this embedded struct",
    "start": "1462400",
    "end": "1469039"
  },
  {
    "text": "and these embedded types these different things that we're going to kind of have abstractions presented for us are from cross plane runtime",
    "start": "1469039",
    "end": "1476000"
  },
  {
    "text": "which we'll take a look at in a minute but the provider config spec is going to include usually a kubernetes",
    "start": "1476000",
    "end": "1482880"
  },
  {
    "text": "secret but you can also provide different authentication methods and the status is basically just going to show you that",
    "start": "1482880",
    "end": "1488240"
  },
  {
    "text": "it's able to connect so if we look at an example of what a provider config looks like",
    "start": "1488240",
    "end": "1495200"
  },
  {
    "text": "here we're using a secret to authenticate so we're creating a secret and a cross plain system",
    "start": "1495200",
    "end": "1500640"
  },
  {
    "text": "namespace and then you'll see that we'd have base64 encoded credentials in this case for github you",
    "start": "1500640",
    "end": "1506400"
  },
  {
    "text": "provide an api access token so we create the secret and then we reference it in the provider",
    "start": "1506400",
    "end": "1512000"
  },
  {
    "text": "config and then if we go back to this first type the team type that steven was talking about",
    "start": "1512000",
    "end": "1518400"
  },
  {
    "text": "and we look at this embedded type you'll see that we have a provider config reference which basically builds in the fact that",
    "start": "1518400",
    "end": "1526000"
  },
  {
    "text": "we know we're going to have to reach out to an external uh credential provider for every managed",
    "start": "1526000",
    "end": "1531919"
  },
  {
    "text": "resource in a cross-plane provider and one of the nice things about the",
    "start": "1531919",
    "end": "1537440"
  },
  {
    "text": "provider config is that you could have multiple providers right that you could be managing multiple back-ends um even if they're",
    "start": "1537440",
    "end": "1543840"
  },
  {
    "text": "same platform they could have different credentials so um you could use the same resources and",
    "start": "1543840",
    "end": "1548960"
  },
  {
    "text": "apply it you know using two different accounts if you want some kind of dr or something like that so what providers do is abstract out the",
    "start": "1548960",
    "end": "1555200"
  },
  {
    "text": "connections and it gives you a lot of flexibility to separate out your resources from the backend provider so",
    "start": "1555200",
    "end": "1561600"
  },
  {
    "text": "it's a very nice pattern to implement absolutely and in some of the other providers where they actually have",
    "start": "1561600",
    "end": "1567440"
  },
  {
    "text": "kubernetes clusters themselves will have things like use iam roles for authentication and that sort of thing",
    "start": "1567440",
    "end": "1573360"
  },
  {
    "text": "which can be really useful and some of that separation of concern that steve was mentioning in github you",
    "start": "1573360",
    "end": "1578400"
  },
  {
    "text": "may have two different access tokens that you want used for different organizations and that",
    "start": "1578400",
    "end": "1583520"
  },
  {
    "text": "kind of separates you from you know creating something in the wrong organization or something like that",
    "start": "1583520",
    "end": "1589120"
  },
  {
    "text": "but if we look at an example actually here of our team resource so this is what we created just moments ago",
    "start": "1589120",
    "end": "1595200"
  },
  {
    "text": "we actually don't have a reference to provider config and that's because crossplan also",
    "start": "1595200",
    "end": "1600240"
  },
  {
    "text": "provides the ability to if you create a provider config with the name default um that provider",
    "start": "1600240",
    "end": "1605520"
  },
  {
    "text": "is going to go ahead and use that one if none is provided so there's little goodies like that that are kind of sprinkled throughout",
    "start": "1605520",
    "end": "1612000"
  },
  {
    "text": "the cross plain runtime ecosystem that make things a little bit easier for you",
    "start": "1612000",
    "end": "1617760"
  },
  {
    "text": "all right so we've gotten a good look at these different api types but you may be wondering how those translate into actual crds",
    "start": "1617760",
    "end": "1625200"
  },
  {
    "text": "existing in our kubernetes cluster so a crd is a resource in itself it's a custom resource definition",
    "start": "1625200",
    "end": "1631520"
  },
  {
    "text": "and there's a controller running in kubernetes that watches for custom resource definitions and basically you're dynamically adding",
    "start": "1631520",
    "end": "1639039"
  },
  {
    "text": "new api types so we have to create those custom resource definitions to then be able to create something",
    "start": "1639039",
    "end": "1644640"
  },
  {
    "text": "like a team we have those custom resource definitions in this crds",
    "start": "1644640",
    "end": "1649760"
  },
  {
    "text": "directory in our provider github here and you'll see that it's generated and looks like",
    "start": "1649760",
    "end": "1656080"
  },
  {
    "text": "probably any other custom resource definition um that you would see you'll see that those different fields in the go struct",
    "start": "1656080",
    "end": "1662880"
  },
  {
    "text": "were actually used to create this schema here that we have which allows us to have validation when we create",
    "start": "1662880",
    "end": "1669600"
  },
  {
    "text": "instances of our team resource and we'll look a little bit more at that down the road but stephen",
    "start": "1669600",
    "end": "1676720"
  },
  {
    "text": "did you want to talk a little bit about what some of these different annotations specifically the cube builder ones do for us",
    "start": "1676720",
    "end": "1682799"
  },
  {
    "text": "in that generation process yeah if you look in the code before and this is a feature of q builder you can see here",
    "start": "1682799",
    "end": "1689200"
  },
  {
    "text": "that there's there's validation fields in cue builder there's print columns there's",
    "start": "1689200",
    "end": "1694559"
  },
  {
    "text": "objects so basically uh we're building upon a lot of the cube builder project here and what it does is you give these",
    "start": "1694559",
    "end": "1700799"
  },
  {
    "text": "um annotations here and this instructs when you uh build out your crds exactly how to",
    "start": "1700799",
    "end": "1706480"
  },
  {
    "text": "represent them so there's lots of things as we said you know it has uh recent versions of kubernetes with the crds are",
    "start": "1706480",
    "end": "1713200"
  },
  {
    "text": "imposing uh open api validation on everything which suddenly means that now that you build this out suddenly you",
    "start": "1713200",
    "end": "1719279"
  },
  {
    "text": "have validation not only at the server level but newer versions of kubernetes actually have the client doing validation now too so basically all that",
    "start": "1719279",
    "end": "1726240"
  },
  {
    "text": "work is going to be handled for you and all the tooling we can automatically validate from these crds so that's something very",
    "start": "1726240",
    "end": "1731760"
  },
  {
    "text": "powerful um yeah and that's basically it i think dan can show some code about how",
    "start": "1731760",
    "end": "1736799"
  },
  {
    "text": "the there's when you run make and a lot of these clusters there's actually some hints of how to generate it um and",
    "start": "1736799",
    "end": "1743679"
  },
  {
    "text": "we'll look right here at this controller gen and angry jet um and maybe we could show how to make",
    "start": "1743679",
    "end": "1749200"
  },
  {
    "text": "and generate the crds yeah absolutely um so as steven pointed out there are some commands kind of",
    "start": "1749200",
    "end": "1754960"
  },
  {
    "text": "built in uh this is probably an opportune time to mention that this uh entire repository right here and you",
    "start": "1754960",
    "end": "1760720"
  },
  {
    "text": "can kind of still see my uh get diffs here um is generated from",
    "start": "1760720",
    "end": "1766399"
  },
  {
    "text": "a project that we have in crossplane called the provider template",
    "start": "1766399",
    "end": "1771679"
  },
  {
    "text": "so i'll go over to that real quickly and it basically has a mock provider",
    "start": "1771679",
    "end": "1778720"
  },
  {
    "text": "for you here that you can just refactor for your own purposes and this is a template repository so to",
    "start": "1778720",
    "end": "1783919"
  },
  {
    "text": "actually create this repository that we were looking at for provider github i just went ahead and clicked use this",
    "start": "1783919",
    "end": "1788960"
  },
  {
    "text": "template and created a new repository in my account and then refactored some of this provider template stuff",
    "start": "1788960",
    "end": "1795039"
  },
  {
    "text": "uh to be what we wanted for github you'll see that instead of having a team resource it has this sample",
    "start": "1795039",
    "end": "1800799"
  },
  {
    "text": "my type resource so it just gives you kind of a boilerplate to get started",
    "start": "1800799",
    "end": "1806240"
  },
  {
    "text": "but one of the things we do in that is we provide this generation code which you'll see just has go generate",
    "start": "1806240",
    "end": "1812559"
  },
  {
    "text": "statements which will basically you know run for you when you run go generate and this is a convenient way to actually",
    "start": "1812559",
    "end": "1818799"
  },
  {
    "text": "pin external binaries that you need to run generation methods so controller gen is",
    "start": "1818799",
    "end": "1824240"
  },
  {
    "text": "kind of the cube builder flavored generation that's creating these deep copy methods for us as well as generating the crds",
    "start": "1824240",
    "end": "1830960"
  },
  {
    "text": "according to those directives that we were just pointing out there and you'll see that we provide some information to controller gen here",
    "start": "1830960",
    "end": "1838000"
  },
  {
    "text": "to tell it where we'd like those crds to go angry jet is our cross plane flavor of",
    "start": "1838000",
    "end": "1844080"
  },
  {
    "text": "that and that does things like generate our manage.go here our pc.go which are basically helper",
    "start": "1844080",
    "end": "1849919"
  },
  {
    "text": "methods to help us interact with these different classes of resource commonly called duct types in the",
    "start": "1849919",
    "end": "1856159"
  },
  {
    "text": "kubernetes ecosystem you know resources that are different but they kind of follow the same patterns which we can treat",
    "start": "1856159",
    "end": "1862240"
  },
  {
    "text": "similarly to how we treat go interfaces um so this is basically just generating methods to satisfy",
    "start": "1862240",
    "end": "1868240"
  },
  {
    "text": "those interfaces so once we have these api types defined next thing to do is to define how we're",
    "start": "1868240",
    "end": "1874159"
  },
  {
    "text": "actually going to talk to the external provider so frequently there's going to be a",
    "start": "1874159",
    "end": "1879519"
  },
  {
    "text": "sdk for whatever provider you're talking to and you can just kind of look at the go types there and how to authenticate",
    "start": "1879519",
    "end": "1885440"
  },
  {
    "text": "um and follow that pattern in your controllers in plane we generally like",
    "start": "1885440",
    "end": "1892559"
  },
  {
    "text": "to separate our clients and controllers into two separate directories it's a little bit trivial in this case because our client",
    "start": "1892559",
    "end": "1899440"
  },
  {
    "text": "is very small for github but you'll see in many other providers",
    "start": "1899440",
    "end": "1904559"
  },
  {
    "text": "that will have all of our methods for translating between these ghost trucks that we define and the api",
    "start": "1904559",
    "end": "1910640"
  },
  {
    "text": "type for the external provider also in this client directory so to generate this i basically just",
    "start": "1910640",
    "end": "1917440"
  },
  {
    "text": "looked at the go github repo here so we'll go ahead and open that up",
    "start": "1917440",
    "end": "1923039"
  },
  {
    "text": "and here's the go doc for it and it basically gives you a convenient way to authenticate and you'll see that it",
    "start": "1924159",
    "end": "1930320"
  },
  {
    "text": "just uses the general http type to be able to authenticate and you just provide your",
    "start": "1930320",
    "end": "1936240"
  },
  {
    "text": "access token so we've created this new client method here which essentially just accepts an",
    "start": "1936240",
    "end": "1942559"
  },
  {
    "text": "access token and it's going to give us back a a type of github client here",
    "start": "1942559",
    "end": "1948480"
  },
  {
    "text": "so after we've defined how to connect to the external api we actually want to use that in a",
    "start": "1948480",
    "end": "1953760"
  },
  {
    "text": "controller so importantly we saw earlier and i believe it's still running over here that our",
    "start": "1953760",
    "end": "1959279"
  },
  {
    "text": "controller basically continuously runs and outputs some information and what it's doing is watching these",
    "start": "1959279",
    "end": "1965600"
  },
  {
    "text": "api types that we've defined and so we have a single entry point as you generally will for a go binary",
    "start": "1965600",
    "end": "1972159"
  },
  {
    "text": "so let's take a minute to look at what we're doing here an important thing to realize is we're heavily relying on",
    "start": "1972159",
    "end": "1977360"
  },
  {
    "text": "controller runtime which basically gives you a general framework for running a bunch of controllers together",
    "start": "1977360",
    "end": "1983279"
  },
  {
    "text": "in what they call a manager so some different options that you can supply here to the manager",
    "start": "1983279",
    "end": "1989120"
  },
  {
    "text": "we're just saying the sync period so we're not configuring it too much but the important thing to note here is",
    "start": "1989120",
    "end": "1994159"
  },
  {
    "text": "that we have the controller manager and then we're adding our apis to the scheme so",
    "start": "1994159",
    "end": "1999760"
  },
  {
    "text": "right now that would be our provider config and our team resource and then we're doing our controller",
    "start": "1999760",
    "end": "2005279"
  },
  {
    "text": "setup and then we're starting our manager which is basically going to run all these controllers anything we provide in the setup here",
    "start": "2005279",
    "end": "2012960"
  },
  {
    "text": "and keep those running and watching the resources and they'll it'll be notified by the kubernetes api server when events happen",
    "start": "2012960",
    "end": "2020159"
  },
  {
    "text": "on those resources so the setup method this is just kind of",
    "start": "2020159",
    "end": "2025200"
  },
  {
    "text": "a wrapper around some other setup methods and what it's doing is actually setting",
    "start": "2025200",
    "end": "2030559"
  },
  {
    "text": "up these controllers and registering them with the manager so we're not going to look too much at the config setup today which basically",
    "start": "2030559",
    "end": "2036399"
  },
  {
    "text": "just watches provider configs and takes some actions based on that essentially confirming that they're not",
    "start": "2036399",
    "end": "2042240"
  },
  {
    "text": "in use when they're cleaned up because if you lost connection while you're still trying to reconcile a managed resource type like the team",
    "start": "2042240",
    "end": "2048398"
  },
  {
    "text": "that would obviously be a bad experience we're primarily going to look at our org setup method here",
    "start": "2048399",
    "end": "2053760"
  },
  {
    "text": "which is for our team and this is going to take us into our controller directory",
    "start": "2053760",
    "end": "2060320"
  },
  {
    "text": "so in the setup method you'll frequently see in a queue builder project that someone",
    "start": "2060320",
    "end": "2065679"
  },
  {
    "text": "has defined a reconciler and they're basically populating it with whatever fields they need",
    "start": "2065679",
    "end": "2071358"
  },
  {
    "text": "and then they're doing this new controller managed by and specifying the resource they want to watch",
    "start": "2071359",
    "end": "2076800"
  },
  {
    "text": "instead here we have a call to this manage.new reconciler method",
    "start": "2076800",
    "end": "2082398"
  },
  {
    "text": "so when i talked earlier about these different methods that were generated for our managed resource types which are",
    "start": "2082399",
    "end": "2088240"
  },
  {
    "text": "just all of our types that represent an external api having those methods allows us to use a",
    "start": "2088240",
    "end": "2093599"
  },
  {
    "text": "generic manage reconciler which basically takes care of talking to the kubernetes components of your",
    "start": "2093599",
    "end": "2099599"
  },
  {
    "text": "controller so obviously when a resource gets created you want to take action based on",
    "start": "2099599",
    "end": "2104800"
  },
  {
    "text": "that and you may want to call different external methods based on the status of your or really the specification of",
    "start": "2104800",
    "end": "2112400"
  },
  {
    "text": "your resource in your kubernetes cluster and then manage reconciler takes care of a lot of that for you so",
    "start": "2112400",
    "end": "2120560"
  },
  {
    "text": "steven i know you have a lot of experience with writing kubernetes controllers we'll look especially into the different",
    "start": "2120560",
    "end": "2127599"
  },
  {
    "text": "implementations of the different methods that uh are part of the manage reconciler that we define in cross plane",
    "start": "2127599",
    "end": "2133440"
  },
  {
    "text": "runtime but you wanna do you wanna talk in general a little bit more about the difference between a generic kubernetes reconciler and",
    "start": "2133440",
    "end": "2140079"
  },
  {
    "text": "maybe a managed resource reconciler in crossplane yeah actually one of the things that",
    "start": "2140079",
    "end": "2145599"
  },
  {
    "text": "really attracted me to cross play in the beginning was that if you've ever written a controller yourself there's a lot of manual things",
    "start": "2145599",
    "end": "2150880"
  },
  {
    "text": "you have to do in terms of reconciliation um logging creating events you know having written",
    "start": "2150880",
    "end": "2158240"
  },
  {
    "text": "a lot of infrastructure software you kind of repeat the same patterns over and over again and actually as we",
    "start": "2158240",
    "end": "2163359"
  },
  {
    "text": "walk through this we'll find out that there's a very structured way that crossplaying does it that layers on top of kubernetes controllers that makes it",
    "start": "2163359",
    "end": "2169680"
  },
  {
    "text": "very easy um you know to understand the logic so i think that's good and the most important",
    "start": "2169680",
    "end": "2175200"
  },
  {
    "text": "thing to understand is that this controller is basically a piece of software that's going to run in your cluster",
    "start": "2175200",
    "end": "2180720"
  },
  {
    "text": "that when we look at that setup it basically um when you bring it up it registers and",
    "start": "2180720",
    "end": "2187280"
  },
  {
    "text": "says i want to listen to anything that defines a team right that's what the setup does right",
    "start": "2187280",
    "end": "2193119"
  },
  {
    "text": "here you know that's the most important thing because when you first look at this there's like 15 different concepts that you have to",
    "start": "2193119",
    "end": "2198640"
  },
  {
    "text": "understand the most important thing to understand is that you want to you see if you look at line 55 you're looking",
    "start": "2198640",
    "end": "2205359"
  },
  {
    "text": "and you'll see this group version kind here this is pretty common in kubernetes this is the you also see it like gvk in some of the",
    "start": "2205359",
    "end": "2211920"
  },
  {
    "text": "source code and this is basically like a kind would be the team um you know the version would be",
    "start": "2211920",
    "end": "2218000"
  },
  {
    "text": "um you know the group would be it would be a combination of you know hashtan you know github io",
    "start": "2218000",
    "end": "2224320"
  },
  {
    "text": "and the version which is the api version yeah so you'll see this a lot",
    "start": "2224320",
    "end": "2232160"
  },
  {
    "text": "yeah you'll see these terms you'll see these a lot in kubernetes i remember the first time i did like when i was playing with um",
    "start": "2232160",
    "end": "2238240"
  },
  {
    "text": "customize that it kept giving me gvk errors and i had no idea what those were so to save you some pain that's this is",
    "start": "2238240",
    "end": "2245760"
  },
  {
    "text": "what it comes from here um yeah so that's basically it this is the core of this setup there's a lot of",
    "start": "2245760",
    "end": "2250880"
  },
  {
    "text": "things that have to be called here but if you look at it it says we're going to reconcile teams with an",
    "start": "2250880",
    "end": "2256079"
  },
  {
    "text": "external connector which means we're gonna connect to the github api and then you say with logger and",
    "start": "2256079",
    "end": "2261119"
  },
  {
    "text": "recorder and these are nice fields because basically this sets up all your logging and events",
    "start": "2261119",
    "end": "2266800"
  },
  {
    "text": "yeah and that's basically yeah so there's a lot here but that's basically what this part is doing you know you're",
    "start": "2266800",
    "end": "2271839"
  },
  {
    "text": "saying i want to subscribe to these events and then i'm going to use this external api to manage it and i",
    "start": "2271839",
    "end": "2277280"
  },
  {
    "text": "like these different methods that we have here these with methods uh which are basically saying um",
    "start": "2277280",
    "end": "2282720"
  },
  {
    "text": "i'd like to provide this kind of like customized option for this thing but if we actually look over to the new",
    "start": "2282720",
    "end": "2288800"
  },
  {
    "text": "reconciler code here there's a lot of sane defaults that we provide for you one of those being things like",
    "start": "2288800",
    "end": "2295119"
  },
  {
    "text": "defaulting to that provider config that has the default name if one is not specified so we have a lot of different",
    "start": "2295119",
    "end": "2301520"
  },
  {
    "text": "hooks to customize this behavior um and if we scroll down here a bit this is actually the",
    "start": "2301520",
    "end": "2307280"
  },
  {
    "text": "the reconciler that you'd see a little more traditionally in a q builder controller or something",
    "start": "2307280",
    "end": "2313440"
  },
  {
    "text": "like that you'll see we have some default fields here things like setting finalizer which you don't have to worry",
    "start": "2313440",
    "end": "2319280"
  },
  {
    "text": "about at all when you're writing a crossplane controller because we'll take care of that you can obviously provide your own api",
    "start": "2319280",
    "end": "2325280"
  },
  {
    "text": "finalizer to do that another important one that i wanted to point out here which isn't going to be relevant for us",
    "start": "2325280",
    "end": "2331520"
  },
  {
    "text": "today because there's not really connection information for a github team but if you're provisioning a database or",
    "start": "2331520",
    "end": "2337119"
  },
  {
    "text": "kubernetes cluster or something like that there's some connection information that you want to get back into your cluster",
    "start": "2337119",
    "end": "2342480"
  },
  {
    "text": "so you can reach out and communicate with that resource you've provisioned so we have a default api secret",
    "start": "2342480",
    "end": "2349839"
  },
  {
    "text": "publisher which is going to publish those secrets into the kubernetes api and then you know you can run a",
    "start": "2349839",
    "end": "2355920"
  },
  {
    "text": "deployment that consumes that either through an environment variable or by getting that resource directly",
    "start": "2355920",
    "end": "2362240"
  },
  {
    "text": "or you could say i'd like to provide my own secret publisher which is going to you know send these",
    "start": "2362240",
    "end": "2368160"
  },
  {
    "text": "secrets to vault or something like that um so you can override any of this behavior but you're going to get a really good working controller",
    "start": "2368160",
    "end": "2374720"
  },
  {
    "text": "just by using the defaults here and then you can iterate on that so it's kind of zero to working controller as fast as possible yeah and the secret",
    "start": "2374720",
    "end": "2382560"
  },
  {
    "text": "propagation is really a great feature because it's very underrated like when you deploy a new system and you get some",
    "start": "2382560",
    "end": "2388160"
  },
  {
    "text": "credentials back how do you actually get that back to the user who requested you know like you give them a database and they're like",
    "start": "2388160",
    "end": "2394800"
  },
  {
    "text": "well now i'd like to have the credentials and then usually somebody has to go log in somewhere and generate them or",
    "start": "2394800",
    "end": "2400640"
  },
  {
    "text": "hook up you know some external systems so it's really a nice feature to have absolutely and you'll see here this is",
    "start": "2400640",
    "end": "2406800"
  },
  {
    "text": "the new reconciler method that we're running um and we're passing in that controller manager and then our manage kind so that just maps",
    "start": "2406800",
    "end": "2413680"
  },
  {
    "text": "directly to what we're looking at here our controller manager and our manage kind",
    "start": "2413680",
    "end": "2419839"
  },
  {
    "text": "and this is yeah and an important thing about reconcile here and dan referred to it um slightly is that if",
    "start": "2419839",
    "end": "2425680"
  },
  {
    "text": "you look at a classic you know kubernetes controller they usually have a pretty light reconciler and then expect you to",
    "start": "2425680",
    "end": "2431839"
  },
  {
    "text": "put all the logic in there and there's a lot of corner cases and logic that you need to think about when writing your",
    "start": "2431839",
    "end": "2437839"
  },
  {
    "text": "own reconciler especially for like infrastructure tasks so this actually makes it a lot easier",
    "start": "2437839",
    "end": "2443280"
  },
  {
    "text": "to go through the common patterns of managing and provisioning infrastructure so",
    "start": "2443280",
    "end": "2448880"
  },
  {
    "text": "the reconciler is actually very powerful definitely and if you want to dive into some of the",
    "start": "2448880",
    "end": "2454400"
  },
  {
    "text": "actual work that's happening here in the reconcile loop which we're going to get into a little bit more in a moment but this",
    "start": "2454400",
    "end": "2460000"
  },
  {
    "text": "is your generic reconcile loop that the controller manager is going to say okay this thing has registered for",
    "start": "2460000",
    "end": "2465599"
  },
  {
    "text": "events that happen on teams every time i send an event i need to run this reconcile loop um so that's what's actually getting",
    "start": "2465599",
    "end": "2472400"
  },
  {
    "text": "called and we're just basically configuring this reconcile loop in our controller",
    "start": "2472400",
    "end": "2478720"
  },
  {
    "text": "so steven alluded to this a bit earlier but there's two main kind of types that you need to",
    "start": "2479119",
    "end": "2484240"
  },
  {
    "text": "satisfy to be able to run a manage reconciler the first being the connector",
    "start": "2484240",
    "end": "2490240"
  },
  {
    "text": "and the second being the external the connector basically has a single method which just is connect and this is",
    "start": "2490240",
    "end": "2497280"
  },
  {
    "text": "telling me how do i get this external struct which has our crud methods on it that are going to be",
    "start": "2497280",
    "end": "2502720"
  },
  {
    "text": "called by our manage reconciler and then the external obviously is what's returned by the kinect",
    "start": "2502720",
    "end": "2508240"
  },
  {
    "text": "and has all those methods defined on it so before we get into external which is kind of the meat of how we talk",
    "start": "2508240",
    "end": "2514000"
  },
  {
    "text": "to the external provider let's look a little bit about the connect method so we've already eluded a little bit",
    "start": "2514000",
    "end": "2520400"
  },
  {
    "text": "when looking at the api types to the fact that we use this provider config to",
    "start": "2520400",
    "end": "2526240"
  },
  {
    "text": "get credentials to talk to an external api so you'll see that we have our provider",
    "start": "2526240",
    "end": "2531359"
  },
  {
    "text": "config type here so this is referencing our apis directory that stephen mentioned earlier",
    "start": "2531359",
    "end": "2536560"
  },
  {
    "text": "and we're basically using our kubernetes client to be able to get that provider config",
    "start": "2536560",
    "end": "2542160"
  },
  {
    "text": "so as i mentioned every manage resource has a provider config ref and we're using that here in the",
    "start": "2542160",
    "end": "2549119"
  },
  {
    "text": "example we were showing that provider config ref is being set by default for us um so",
    "start": "2549119",
    "end": "2554720"
  },
  {
    "text": "this would use name default and i had already created a provider config in that last example once it gets this provider config it's",
    "start": "2554720",
    "end": "2562079"
  },
  {
    "text": "going to look at the secret reference on the provider config which if i can go",
    "start": "2562079",
    "end": "2567200"
  },
  {
    "text": "back to an example here it's basically looking at this part of the struct",
    "start": "2567200",
    "end": "2572960"
  },
  {
    "text": "and it's going to then get that secret from the kubernetes api",
    "start": "2573599",
    "end": "2579440"
  },
  {
    "text": "our secret has our api token on it and this is a byte slice here that we're converting to a string",
    "start": "2579440",
    "end": "2585040"
  },
  {
    "text": "and we're passing that to the new client method that we defined earlier that basically",
    "start": "2585040",
    "end": "2591359"
  },
  {
    "text": "takes the string and gives us a github client in return one of the benefits of kind of moving some of this client",
    "start": "2591359",
    "end": "2597680"
  },
  {
    "text": "logic which like i said is admittedly very small here out of our controller body is that",
    "start": "2597680",
    "end": "2604640"
  },
  {
    "text": "it allows when you have many many controllers to not have to duplicate all that code um so basically we're just",
    "start": "2604640",
    "end": "2610720"
  },
  {
    "text": "going to return from our connect method our external struct populated with our github client which",
    "start": "2610720",
    "end": "2615760"
  },
  {
    "text": "is now authenticated so now's the the real kind of meat of",
    "start": "2615760",
    "end": "2622640"
  },
  {
    "text": "what we're doing when we talk to the external api and that's our crud methods so we have observe",
    "start": "2622640",
    "end": "2628880"
  },
  {
    "text": "create update and delete so i guess it's not really crud because we're using observe instead",
    "start": "2628880",
    "end": "2635440"
  },
  {
    "text": "um yeah but they they basically get called in fairly sequential order that you'd imagine um and so",
    "start": "2635440",
    "end": "2642079"
  },
  {
    "text": "when we return this external struct the manage reconciler is gonna say okay",
    "start": "2642079",
    "end": "2647599"
  },
  {
    "text": "i see that you connected successfully and now i have this external type and i'm going to call",
    "start": "2647599",
    "end": "2653599"
  },
  {
    "text": "these in a logical order so the first thing we're going to do is observe the resource",
    "start": "2653599",
    "end": "2658640"
  },
  {
    "text": "and based on the result we get back from that we're going to take further action so if the resource was deleted in the",
    "start": "2658640",
    "end": "2665119"
  },
  {
    "text": "kubernetes api then we're going to call the delete method on the external that was returned and we'll skip over some of",
    "start": "2665119",
    "end": "2672640"
  },
  {
    "text": "this other logic for a moment if the resource does not exist so if we",
    "start": "2672640",
    "end": "2677680"
  },
  {
    "text": "observed and said hey i couldn't find this in the external api we're going to call the external create method and do some operations",
    "start": "2677680",
    "end": "2686400"
  },
  {
    "text": "and then the last thing that we're going to look at is is the resource up to date so if the observation says hey this",
    "start": "2686400",
    "end": "2692079"
  },
  {
    "text": "resource exists but it doesn't match that spec that we were talking about earlier which is our desired state of",
    "start": "2692079",
    "end": "2697119"
  },
  {
    "text": "the resource then we need to issue an update and it's going to call that update method that that you supplied so",
    "start": "2697119",
    "end": "2704400"
  },
  {
    "text": "you saw that we skipped over quite a lot of the um other things that are happening throughout this reconciler",
    "start": "2704400",
    "end": "2711440"
  },
  {
    "text": "and that's kind of the benefit right you don't have to worry about these until you get later down the line and maybe want some custom behavior and they're",
    "start": "2711440",
    "end": "2718160"
  },
  {
    "text": "doing things like publishing the connection or cleaning up the connection secret um or doing things like initializing the",
    "start": "2718160",
    "end": "2725440"
  },
  {
    "text": "resource and populating fields that you know are set by the external provider or updating the status of the",
    "start": "2725440",
    "end": "2732400"
  },
  {
    "text": "resource like showing us that it's synced which we showed earlier when we were demoing",
    "start": "2732400",
    "end": "2738640"
  },
  {
    "text": "all right so what do we actually put in these different methods that we were talking about",
    "start": "2740240",
    "end": "2745359"
  },
  {
    "text": "so the first thing is our observe method here and we've defined our github client which has a team service which has all",
    "start": "2745359",
    "end": "2752240"
  },
  {
    "text": "the different methods that we're going to want to call so within our observed method since we've",
    "start": "2752240",
    "end": "2757680"
  },
  {
    "text": "embedded this github client in our external struct we're able to call any of these methods",
    "start": "2757680",
    "end": "2763040"
  },
  {
    "text": "that we want so you'll always want to make sure that you have the information",
    "start": "2763040",
    "end": "2768480"
  },
  {
    "text": "necessary to make all of the api operations that you're going to do present on the",
    "start": "2768480",
    "end": "2774480"
  },
  {
    "text": "api type that you've defined so here we're going to get our team from the api",
    "start": "2774480",
    "end": "2780480"
  },
  {
    "text": "so you'll see that we're providing that org and the name of the resource which we want to also represent the name of",
    "start": "2780480",
    "end": "2786480"
  },
  {
    "text": "the team on github and if we get an error back from the github api",
    "start": "2786480",
    "end": "2792079"
  },
  {
    "text": "we're going to go ahead and say we're going to go ahead and return our external observation which is that struct type that the",
    "start": "2792079",
    "end": "2798319"
  },
  {
    "text": "manage reconciler is going to check and you'll see it has these three fields here resource exists",
    "start": "2798319",
    "end": "2803440"
  },
  {
    "text": "resource up to date and connection details they do pretty much exactly what you think if the resource exists is false then",
    "start": "2803440",
    "end": "2810160"
  },
  {
    "text": "it's going to call the create method if the resource up to date is false it's going to call the update method if connection details are populated then",
    "start": "2810160",
    "end": "2816800"
  },
  {
    "text": "it's going to create a connection secret with those details so here we're saying it doesn't exist so",
    "start": "2816800",
    "end": "2822960"
  },
  {
    "text": "we need to actually create it so let's go ahead and follow this branch a little more before we continue down",
    "start": "2822960",
    "end": "2828720"
  },
  {
    "text": "the observe method so eventually the manage reconciler is going to get to the create method and",
    "start": "2828720",
    "end": "2834640"
  },
  {
    "text": "say i need to call this because the resource doesn't exist yet and you'll see that we're once again using this team service from the github",
    "start": "2834640",
    "end": "2841520"
  },
  {
    "text": "client to create our team with the configuration that we've defined in our api type and based on the result",
    "start": "2841520",
    "end": "2849599"
  },
  {
    "text": "we get back from that we return an external creation which once again allows us to supply additional connection details if needed",
    "start": "2849599",
    "end": "2856400"
  },
  {
    "text": "and we also return an error so if the manage reconciler gets an error back it's going to say okay i see that i tried to create this",
    "start": "2856400",
    "end": "2862160"
  },
  {
    "text": "resource but it didn't work so i'm going to try again in a little bit and some of this timing",
    "start": "2862160",
    "end": "2867200"
  },
  {
    "text": "and the delays that happens between reconciles those are also defaults that we set that seem to be",
    "start": "2867200",
    "end": "2872559"
  },
  {
    "text": "common accepted patterns for the managed resources that crossplane provides but you can also override those just",
    "start": "2872559",
    "end": "2879119"
  },
  {
    "text": "like any of the others with providing your default weight and that sort of thing",
    "start": "2879119",
    "end": "2884558"
  },
  {
    "text": "and i want to comment something here this pattern here because usually when you write a lot of infrastructure software you usually have like if then statements",
    "start": "2884800",
    "end": "2891520"
  },
  {
    "text": "here when you're comparing things um one of the nice things about this is that this returns immediately and puts",
    "start": "2891520",
    "end": "2896960"
  },
  {
    "text": "it in the reconcile loop there's times if you're provisioning things like vms it might take you know 20 30 60 minutes to do",
    "start": "2896960",
    "end": "2904000"
  },
  {
    "text": "something um this you could actually keep observing it you know and come back with different kinds of status like um",
    "start": "2904000",
    "end": "2910400"
  },
  {
    "text": "other tools will just block a lot of times and not return whereas this um usually you have this like reconciliation loop thing where it could",
    "start": "2910400",
    "end": "2916880"
  },
  {
    "text": "keep just checking in the background for you so um that's very nice so this is kind of a",
    "start": "2916880",
    "end": "2921920"
  },
  {
    "text": "different pattern if you've you know spent a lot of your career doing if exist then this this is a slightly",
    "start": "2921920",
    "end": "2928240"
  },
  {
    "text": "different but um it makes a lot of sense once you understand how crossplane works absolutely and one of the things you",
    "start": "2928240",
    "end": "2935040"
  },
  {
    "text": "mentioned there is something i really like to point out the um the packet well i guess equinix",
    "start": "2935040",
    "end": "2940319"
  },
  {
    "text": "metal now provider is maintained by the the packet equinix metal team",
    "start": "2940319",
    "end": "2945680"
  },
  {
    "text": "their provisioning of their bare metal instances actually has different stages of provisioning and",
    "start": "2945680",
    "end": "2951520"
  },
  {
    "text": "since we have the status portion of our api types um here we have the node id",
    "start": "2951520",
    "end": "2957280"
  },
  {
    "text": "which we'll show actually populating in just a moment but in that status we have i think a",
    "start": "2957280",
    "end": "2962480"
  },
  {
    "text": "stage field for their bare metal device type and we update that as you were saying",
    "start": "2962480",
    "end": "2967760"
  },
  {
    "text": "as it goes along so you can kind of monitor the uh you know success of your resource provisioning and it actually provides",
    "start": "2967760",
    "end": "2974079"
  },
  {
    "text": "you a percentage value um so it's really nice to do your cube control describe and see",
    "start": "2974079",
    "end": "2979280"
  },
  {
    "text": "oh my vm is 77 you know provisioned and go from there not all",
    "start": "2979280",
    "end": "2986000"
  },
  {
    "text": "api types are that generous with the information they give you but that's one of my particular favorites",
    "start": "2986000",
    "end": "2992480"
  },
  {
    "text": "so one of the more tedious parts i'd say of the manage reconciler is checking",
    "start": "2992640",
    "end": "2997760"
  },
  {
    "text": "whether the resource needs an update and there are a few tricks to get around this we've seen folks actually generate",
    "start": "2997760",
    "end": "3003119"
  },
  {
    "text": "json structs and then use libraries to kind of diff them here we've only defined two fields in our",
    "start": "3003119",
    "end": "3009440"
  },
  {
    "text": "spec besides the org which has to be up to date essentially because we're providing that as the way to call the methods",
    "start": "3009440",
    "end": "3016000"
  },
  {
    "text": "um but here we're basically just saying uh if we have provided a description in our",
    "start": "3016000",
    "end": "3021440"
  },
  {
    "text": "custom resource and uh if the team description which is",
    "start": "3021440",
    "end": "3026480"
  },
  {
    "text": "the the representation we get back from github is uh nil or the team description does not",
    "start": "3026480",
    "end": "3032640"
  },
  {
    "text": "equal the one that we have we want up to date to be false and then we do that same check for",
    "start": "3032640",
    "end": "3038319"
  },
  {
    "text": "our privacy field here and then based on that we're going to return whether the resource is up to date if we",
    "start": "3038319",
    "end": "3045760"
  },
  {
    "text": "return false there then we're once again going to call the update method which is going to use this edit",
    "start": "3045760",
    "end": "3052480"
  },
  {
    "text": "call here to be able to edit our team and set it to the fields that we want",
    "start": "3052480",
    "end": "3057520"
  },
  {
    "text": "once again you can provide your connection details we actually don't need to do that here because once again",
    "start": "3057520",
    "end": "3062720"
  },
  {
    "text": "we don't have any connection details lastly when you delete a kubernetes",
    "start": "3062720",
    "end": "3068480"
  },
  {
    "text": "resource if it has a finalizer on it which is kind of like an annotation or label up there at the top of the metadata",
    "start": "3068480",
    "end": "3075760"
  },
  {
    "text": "it is going to hang around even though you've deleted it until that finalizer gets removed so crossplane is going to go ahead once",
    "start": "3075760",
    "end": "3082480"
  },
  {
    "text": "again you can override this but it's going to go ahead and put a manage resource finalizer on your resources",
    "start": "3082480",
    "end": "3087599"
  },
  {
    "text": "and when you delete them in the kubernetes api it's basically going to keep them around until it can guarantee that that",
    "start": "3087599",
    "end": "3092960"
  },
  {
    "text": "resource was deleted externally and so what it's going to do is it's going to check for the deletion",
    "start": "3092960",
    "end": "3098000"
  },
  {
    "text": "timestamp on your kubernetes resource which gets set when you issue your cube control delete command and",
    "start": "3098000",
    "end": "3103839"
  },
  {
    "text": "then it's going to call the delete method that you've defined in your controller in this case delete team by slug and if",
    "start": "3103839",
    "end": "3110400"
  },
  {
    "text": "that returns successfully then it's going to say okay i can now see that the resource no longer exists",
    "start": "3110400",
    "end": "3116480"
  },
  {
    "text": "and i'm going to remove that finalizer which then allows kubernetes to garbage collect that resource",
    "start": "3116480",
    "end": "3123280"
  },
  {
    "text": "so i think that was a pretty good overview of um of what you can do here with the",
    "start": "3123680",
    "end": "3129920"
  },
  {
    "text": "controller and we've got a pretty full working controller here with not too many lines of code and a lot of it",
    "start": "3129920",
    "end": "3135200"
  },
  {
    "text": "boilerplate that we just populated ourselves um so what do you say we actually maybe change a little bit of",
    "start": "3135200",
    "end": "3141520"
  },
  {
    "text": "the behavior here um and try and rerun it again and and we can see how this helps us and how this continuous reconciliation works",
    "start": "3141520",
    "end": "3149760"
  },
  {
    "text": "so one of the things that i pointed out earlier is we have this node id field but we don't actually set the node",
    "start": "3150880",
    "end": "3156160"
  },
  {
    "text": "id anywhere in our controller and if we looked at the yaml",
    "start": "3156160",
    "end": "3161520"
  },
  {
    "text": "output here you'll see that our at provider is just empty and i'd like to know the node id just",
    "start": "3161520",
    "end": "3167760"
  },
  {
    "text": "because sounds interesting so you know to populate our status we usually",
    "start": "3167760",
    "end": "3172800"
  },
  {
    "text": "do that in the observe method here so we can do that by just saying",
    "start": "3172800",
    "end": "3180160"
  },
  {
    "text": "okay so if we got to here our team exists so we'll say cr dot spec",
    "start": "3180160",
    "end": "3187440"
  },
  {
    "text": "dot provider sorry that's gonna be status at provider",
    "start": "3187440",
    "end": "3194319"
  },
  {
    "text": "and our node id is equal to that of the team",
    "start": "3194319",
    "end": "3201599"
  },
  {
    "text": "so i can actually hit caps lock there team dot node id",
    "start": "3201599",
    "end": "3209920"
  },
  {
    "text": "all right so let's actually do a check on that make sure it's not nil does not",
    "start": "3209920",
    "end": "3217359"
  },
  {
    "text": "equal nil then we'll go ahead and set that and i'm actually just going to go ahead and show some of the methods that we",
    "start": "3217359",
    "end": "3223839"
  },
  {
    "text": "defined to also make this development experience really nice for you so when you clone from that",
    "start": "3223839",
    "end": "3229599"
  },
  {
    "text": "provider template we have a make file in here just has some really simple targets i like to do this make run one which is",
    "start": "3229599",
    "end": "3235520"
  },
  {
    "text": "going to regenerate your crds apply them to the cluster in this case we have no changes and it's going to",
    "start": "3235520",
    "end": "3240559"
  },
  {
    "text": "start your controller so if i hop back over here i'll go ahead",
    "start": "3240559",
    "end": "3245680"
  },
  {
    "text": "and stop my controller do make run again here we see it's using go generate",
    "start": "3245680",
    "end": "3251119"
  },
  {
    "text": "and it's just using my cube config to be able to talk to the cluster so we actually have cluster admin here which is a little bit different than",
    "start": "3251119",
    "end": "3256800"
  },
  {
    "text": "when we showed earlier uh installing a provider so it looks like our external resource is up to date which we would expect",
    "start": "3256800",
    "end": "3264160"
  },
  {
    "text": "and let's see now we have that node id present in our app provider so you can provide",
    "start": "3264160",
    "end": "3269839"
  },
  {
    "text": "any information that the api gives you back in this field but one of the things i",
    "start": "3269839",
    "end": "3275040"
  },
  {
    "text": "want to do is show how when you modify a resource outside of your source of",
    "start": "3275040",
    "end": "3281920"
  },
  {
    "text": "truth which in this case is your cross plane kubernetes cluster that crossplan is going to make sure it drives you back to the spec",
    "start": "3281920",
    "end": "3288240"
  },
  {
    "text": "specification that you've defined so something we might see uh is someone going into a github",
    "start": "3288240",
    "end": "3294880"
  },
  {
    "text": "team and taking the privacy from secret uh to closed which is the two different values they",
    "start": "3294880",
    "end": "3300319"
  },
  {
    "text": "give you closed basically just means it's visible so let's go ahead and hop over to our",
    "start": "3300319",
    "end": "3307440"
  },
  {
    "text": "kubecon in a org here",
    "start": "3307440",
    "end": "3314160"
  },
  {
    "text": "and modify this a little bit and see how crossplane drives it back and this is a bit of a trivial example",
    "start": "3314559",
    "end": "3321599"
  },
  {
    "text": "but stephen have you seen any kind of like different examples in your experience um that are a little more powerful in demonstrating this",
    "start": "3321599",
    "end": "3327839"
  },
  {
    "text": "functionality well i think this is good just for compliance purposes right like the like",
    "start": "3327839",
    "end": "3334160"
  },
  {
    "text": "immediately like one of the biggest concerns we have is that people are making changes manually like they're adding users",
    "start": "3334160",
    "end": "3340079"
  },
  {
    "text": "they're changing permissions um and we want to make sure that if that happens um that gets corrected pretty quickly um",
    "start": "3340079",
    "end": "3347760"
  },
  {
    "text": "and thanks to like having things like events and kubernetes you could actually see what's happening right you could be notified so i think that's probably",
    "start": "3347760",
    "end": "3355359"
  },
  {
    "text": "one of the best use cases for it um you know this constant making sure that",
    "start": "3355359",
    "end": "3360880"
  },
  {
    "text": "what your desired state is is actually out there for sure i i totally agree with that",
    "start": "3360880",
    "end": "3366319"
  },
  {
    "text": "and a nice thing is um we're using the default weight here uh which basically checks every minute to make sure that things are up to date",
    "start": "3366319",
    "end": "3373280"
  },
  {
    "text": "you can obviously configure that to what you see fit so if you said you know i need to be more stringent or i really only need to",
    "start": "3373280",
    "end": "3380000"
  },
  {
    "text": "check this resource every so often you know once a day maybe and see if",
    "start": "3380000",
    "end": "3385440"
  },
  {
    "text": "it's been updated that works for you as well obviously if you modify the resource in the kubernetes cluster",
    "start": "3385440",
    "end": "3392000"
  },
  {
    "text": "then that's going to be an immediate action taken but i'm going to go ahead and set this to visible and save the changes",
    "start": "3392000",
    "end": "3398559"
  },
  {
    "text": "and we should see that this is now visible you'll no longer see that secret and if we hop back over to our",
    "start": "3398559",
    "end": "3404480"
  },
  {
    "text": "controller here our last status here was external resources up to date",
    "start": "3404480",
    "end": "3410640"
  },
  {
    "text": "but if we actually wait a few minutes you can see our time here so we should be coming back on a",
    "start": "3410640",
    "end": "3415920"
  },
  {
    "text": "reconcile again we'll actually set that field back to secret and we'll see that",
    "start": "3415920",
    "end": "3421520"
  },
  {
    "text": "updated and while we're waiting on that we can also do the opposite right and modify",
    "start": "3421520",
    "end": "3428240"
  },
  {
    "text": "these fields in our resource and then see that propagated to the external resource",
    "start": "3428240",
    "end": "3434480"
  },
  {
    "text": "which will show momentarily all right so there we see that we got a",
    "start": "3434480",
    "end": "3442160"
  },
  {
    "text": "successfully requested update of external resource this information is just because we're actually printing out the struct for",
    "start": "3442160",
    "end": "3448880"
  },
  {
    "text": "you know a demo purpose here but we should see if we hop back over here to the org",
    "start": "3448880",
    "end": "3455599"
  },
  {
    "text": "that it's once again in secret mode so it's basically making sure that you stay compliant and this gets really powerful and this",
    "start": "3455599",
    "end": "3461760"
  },
  {
    "text": "is one of the benefits of standardizing on the kubernetes api when you leverage other projects as well",
    "start": "3461760",
    "end": "3467119"
  },
  {
    "text": "so a demo we like to show a lot is integrating with opa and one of the examples we've shown",
    "start": "3467119",
    "end": "3472400"
  },
  {
    "text": "there is creating a database that you know you want to have a limit on the size of a database someone can",
    "start": "3472400",
    "end": "3478079"
  },
  {
    "text": "create so you don't have you know a gcp cloud sql instance that's 500 gigs or something like that",
    "start": "3478079",
    "end": "3483119"
  },
  {
    "text": "costing you a lot of money in a development environment you could create a open policy agent policy that says you",
    "start": "3483119",
    "end": "3489440"
  },
  {
    "text": "know only accept databases with a size of 20 gigs or something like that and put",
    "start": "3489440",
    "end": "3496480"
  },
  {
    "text": "limits and then have those checked in your resources because once you have everything defined as a kubernetes",
    "start": "3496480",
    "end": "3502079"
  },
  {
    "text": "resource and you can integrate with any um project that uses kubernetes api another",
    "start": "3502079",
    "end": "3508000"
  },
  {
    "text": "place we've seen this is backing up your infrastructure with a project like valero you can just save your infrastructure",
    "start": "3508000",
    "end": "3513920"
  },
  {
    "text": "and restore it into a new cluster and get crossplane managing it continuously there as well",
    "start": "3513920",
    "end": "3520960"
  },
  {
    "text": "so let's try one other change here i want to go into our team.yaml and let's",
    "start": "3521040",
    "end": "3526880"
  },
  {
    "text": "just change our description so right now it's our description and we'll say some other description if i can type here",
    "start": "3526880",
    "end": "3535599"
  },
  {
    "text": "and we'll save that and i'll go back to the terminal and like i said when you change the spec",
    "start": "3535599",
    "end": "3542079"
  },
  {
    "text": "in your kubernetes resource we're going to see immediate action taken on that behalf because the controller is getting an",
    "start": "3542079",
    "end": "3547280"
  },
  {
    "text": "event from the kubernetes api server so we'll say examples org team and we should see that",
    "start": "3547280",
    "end": "3554720"
  },
  {
    "text": "that immediately requests an update of an external resource so we'll quickly see that propagated",
    "start": "3554720",
    "end": "3562000"
  },
  {
    "text": "now it says some other description and we can also manage the deletion of our resource so",
    "start": "3562000",
    "end": "3567680"
  },
  {
    "text": "i'll do k delete team all here and you'll see that we",
    "start": "3567680",
    "end": "3574799"
  },
  {
    "text": "successfully requested deletion of external resource and it's actually going to reconcile again here in a moment and make sure",
    "start": "3574799",
    "end": "3580319"
  },
  {
    "text": "that that's actually been deleted externally and then allow this resource to be cleaned up but if we",
    "start": "3580319",
    "end": "3587440"
  },
  {
    "text": "go and refresh here we're going to find that this team no longer exists so you could really do a lot of",
    "start": "3587440",
    "end": "3593440"
  },
  {
    "text": "management the github api has a lot of different endpoints one of the things that we've",
    "start": "3593440",
    "end": "3598640"
  },
  {
    "text": "looked at doing for the cross plan organization where we frequently spin up new repositories with similar",
    "start": "3598640",
    "end": "3603760"
  },
  {
    "text": "permissions um we've talked about having a cross-plane cluster basically manage",
    "start": "3603760",
    "end": "3608799"
  },
  {
    "text": "those for us and then having a git ops pipeline that sends some of our you know cube control changes basically",
    "start": "3608799",
    "end": "3615440"
  },
  {
    "text": "through it uh that create new repositories update teams update permissions etc if we go back over here",
    "start": "3615440",
    "end": "3622079"
  },
  {
    "text": "you'll see that our team has been deleted and let's see",
    "start": "3622079",
    "end": "3630799"
  },
  {
    "text": "no resources found um for our team so we've cleaned up all of our resources so i just wanted to",
    "start": "3630799",
    "end": "3637359"
  },
  {
    "text": "summarize here we just wanted to show you that with not a lot of code you could have really full featured",
    "start": "3637359",
    "end": "3643280"
  },
  {
    "text": "infrastructure software um first you know we define the apis that",
    "start": "3643280",
    "end": "3649359"
  },
  {
    "text": "generate the crds that could be applied to your cluster so we take your infrastructure and we model it",
    "start": "3649359",
    "end": "3655359"
  },
  {
    "text": "whatever features and parameters that you want to manage whatever things you want to look at",
    "start": "3655359",
    "end": "3660480"
  },
  {
    "text": "and those automatically get generated into crds that you apply to your cluster you also have multiple providers that",
    "start": "3660480",
    "end": "3667040"
  },
  {
    "text": "you can talk to on the back end with different kinds of credentials if you want to segregate out",
    "start": "3667040",
    "end": "3672240"
  },
  {
    "text": "which accounts can do what on different parts of infrastructure so that's the first part defining our api",
    "start": "3672240",
    "end": "3677920"
  },
  {
    "text": "then we define the controller and the controller has three main functions one of those is to talk to the",
    "start": "3677920",
    "end": "3683440"
  },
  {
    "text": "kubernetes api um and look for events for our type our",
    "start": "3683440",
    "end": "3688480"
  },
  {
    "text": "team the next thing is the connector where it actually talks and creates a connection a client",
    "start": "3688480",
    "end": "3695119"
  },
  {
    "text": "connection to github where it's going to talk to the api and then finally we have our managed",
    "start": "3695119",
    "end": "3702480"
  },
  {
    "text": "events right we observe the external resource and based on what happens in an external",
    "start": "3702480",
    "end": "3708000"
  },
  {
    "text": "resource we either create update or delete the resource so these are the core parts",
    "start": "3708000",
    "end": "3714480"
  },
  {
    "text": "of the controller um and you can see here this is about just a little over 200 lines and we have a controller that's basically managing",
    "start": "3714480",
    "end": "3721839"
  },
  {
    "text": "the entire lifecycle of an external resource um pretty much within you know 60",
    "start": "3721839",
    "end": "3728640"
  },
  {
    "text": "seconds of any change that it observes on the outside so um that's kind of the end of our deep dive",
    "start": "3728640",
    "end": "3735520"
  },
  {
    "text": "into this controller and dan is going to talk about some other topics related to crossplane",
    "start": "3735520",
    "end": "3742960"
  },
  {
    "text": "okay so now that we've built our provider out i'd like to show how we can package it up push it to a registry and",
    "start": "3742960",
    "end": "3748640"
  },
  {
    "text": "install it just like we did with provider aws before we did this tutorial so we have some helpful commands here",
    "start": "3748640",
    "end": "3754640"
  },
  {
    "text": "and to start off we need to build the controller binary which is what's going to run in our pod and manage our crds",
    "start": "3754640",
    "end": "3761359"
  },
  {
    "text": "package that into an image and then push it then we're going to push our actual package image which has the metadata and",
    "start": "3761359",
    "end": "3767200"
  },
  {
    "text": "instructs crossplane how to install the crds and how to start the controller",
    "start": "3767200",
    "end": "3772400"
  },
  {
    "text": "so to start off let's go ahead and make this version 0.0.1 and these are just some helpful",
    "start": "3772400",
    "end": "3779359"
  },
  {
    "text": "make commands to make it easier for us to go through this process so we're going to build the go binary",
    "start": "3779359",
    "end": "3785920"
  },
  {
    "text": "we're going to create the image and then push it and we're going to use the crossplane cli to actually push our specialized",
    "start": "3785920",
    "end": "3791280"
  },
  {
    "text": "image for our provider here which has some information that crossplan is going to look at",
    "start": "3791280",
    "end": "3796720"
  },
  {
    "text": "and then unpack the provider appropriately and so we're going to want to use this",
    "start": "3796720",
    "end": "3802480"
  },
  {
    "text": "exact controller image that we've built so i'll specify here that we want",
    "start": "3802480",
    "end": "3808839"
  },
  {
    "text": "v0.0.1 okay so switching over to our terminal first thing we need to do is make build",
    "start": "3808839",
    "end": "3816240"
  },
  {
    "text": "and you'll see that we are running the build there and while we're doing that we can actually go ahead and go into the",
    "start": "3816240",
    "end": "3822720"
  },
  {
    "text": "package directory and start the build of our other image since it's just going to have a reference to this one which will exist",
    "start": "3822720",
    "end": "3827920"
  },
  {
    "text": "after we push it um so it looks like that build is still going so let's go ahead and build our package image",
    "start": "3827920",
    "end": "3834640"
  },
  {
    "text": "so we have um some helpful commands in the cross plane cli here we can say create k cross plane build",
    "start": "3834640",
    "end": "3842480"
  },
  {
    "text": "provider and since we're in this package directory it's going to go ahead and look at the crossplan.yaml",
    "start": "3842480",
    "end": "3848079"
  },
  {
    "text": "and know how to produce a package all right so if we look we should see",
    "start": "3848079",
    "end": "3853440"
  },
  {
    "text": "that we now have this x package directory which is basically a specialized tarball which is an oci image that can be pushed",
    "start": "3853440",
    "end": "3860319"
  },
  {
    "text": "and the crossplan cli is going to know how to do that and format it correctly but before we do that let's go ahead and",
    "start": "3860319",
    "end": "3867599"
  },
  {
    "text": "finish making our image here so that was a pretty quick image build um and i'll go ahead and make push that",
    "start": "3867599",
    "end": "3874240"
  },
  {
    "text": "make uh image push i believe is the command we want",
    "start": "3874240",
    "end": "3880160"
  },
  {
    "text": "all right so it looks like that's been pushed up with kc provider github controller we're referencing that in our provider",
    "start": "3880160",
    "end": "3886640"
  },
  {
    "text": "package here so we can now k cross plane push provider and since we're in this package",
    "start": "3886640",
    "end": "3893839"
  },
  {
    "text": "directory and there's only one x package present um it's going to know to use that one and we just need to give that the tag we",
    "start": "3893839",
    "end": "3899839"
  },
  {
    "text": "want so hashtan kc provider github and",
    "start": "3899839",
    "end": "3908000"
  },
  {
    "text": "we want that version and we should see that this is pushed successfully",
    "start": "3908000",
    "end": "3913760"
  },
  {
    "text": "and we also have a con cluster already running here so let me scoot this over a bit and",
    "start": "3913760",
    "end": "3920880"
  },
  {
    "text": "we can look at what we have i already installed crossplane um so we",
    "start": "3920880",
    "end": "3926640"
  },
  {
    "text": "have the cross plane pods running and let me go ahead and just close out this window so it's a little easier to",
    "start": "3926640",
    "end": "3931760"
  },
  {
    "text": "see so we have our cross plane pods running and just like we did before the tutorial to install uh provider aws we now want",
    "start": "3931760",
    "end": "3938720"
  },
  {
    "text": "to do the same thing with provider github so we can do k crossplane",
    "start": "3938720",
    "end": "3945119"
  },
  {
    "text": "install provider and i'll specify that image that i just pushed which was hashdan kc",
    "start": "3945119",
    "end": "3952240"
  },
  {
    "text": "provider github and we want v0.0.1",
    "start": "3952240",
    "end": "3959280"
  },
  {
    "text": "all right so it looks like that was created it will take it just a moment to get installed so you'll see it doesn't",
    "start": "3959280",
    "end": "3964640"
  },
  {
    "text": "have a status yet but if we keep watching this we'll actually see that it does come available",
    "start": "3964640",
    "end": "3969839"
  },
  {
    "text": "so it's installed it's not healthy yet if we check again it looks like it is healthy now and we can see that",
    "start": "3969839",
    "end": "3975280"
  },
  {
    "text": "crossplane has looked into the contents of our package and it's gone ahead and started",
    "start": "3975280",
    "end": "3981440"
  },
  {
    "text": "our controller for us so we see our kc provider github running here",
    "start": "3981440",
    "end": "3986960"
  },
  {
    "text": "and we can also see that we've installed crds they were specified",
    "start": "3986960",
    "end": "3994000"
  },
  {
    "text": "in our package so here we have our provider config provider config usage and our team crd if i go ahead and once again create",
    "start": "3994000",
    "end": "4001359"
  },
  {
    "text": "my configuration um and let me go ahead and pull up",
    "start": "4001359",
    "end": "4006640"
  },
  {
    "text": "our github org again",
    "start": "4006640",
    "end": "4011680"
  },
  {
    "text": "i want to make sure that that team that we previously created has been cleaned up",
    "start": "4014480",
    "end": "4019680"
  },
  {
    "text": "it looks like it has so we don't have any team here so once again i'm going to create my provider config",
    "start": "4019680",
    "end": "4025599"
  },
  {
    "text": "which has my access token in it and so that's in secrets config.yaml",
    "start": "4025599",
    "end": "4032079"
  },
  {
    "text": "all right so we've created my provider config and this is the same workflow we were going through with dev but now we've been able to install this kc",
    "start": "4032079",
    "end": "4038400"
  },
  {
    "text": "provider github which also allows other folks to be able to consume this provider and us to be able to distribute it",
    "start": "4038400",
    "end": "4044079"
  },
  {
    "text": "easily so i'm going to go ahead and create our team again",
    "start": "4044079",
    "end": "4050160"
  },
  {
    "text": "that was in examples org team and we should be able to k get team",
    "start": "4050160",
    "end": "4058160"
  },
  {
    "text": "and see that it is synced and if we go back over to our github org",
    "start": "4058160",
    "end": "4064640"
  },
  {
    "text": "we now have our team here again so packaging things up as a provider makes them a lot easier to install and",
    "start": "4064720",
    "end": "4070880"
  },
  {
    "text": "and you can also have specifications for how you want to reproduce whole environments",
    "start": "4070880",
    "end": "4076160"
  },
  {
    "text": "so maybe you want environment with github aws and gcp installed and you can easily reproduce that across",
    "start": "4076160",
    "end": "4081920"
  },
  {
    "text": "kubernetes clusters after you've installed crossplane all right so we have our team present we",
    "start": "4081920",
    "end": "4088720"
  },
  {
    "text": "have our pods running and we have our crds installed in the cluster and now what we want to do is",
    "start": "4088720",
    "end": "4094319"
  },
  {
    "text": "add more crds and update our controller push a new version of it to our registry install it and have cross plan updated",
    "start": "4094319",
    "end": "4101120"
  },
  {
    "text": "in place without modifying our existing infrastructure so we want this team to stick around but we want to add new",
    "start": "4101120",
    "end": "4106880"
  },
  {
    "text": "functionality as well so i've added a new type here a memberships type which basically allows",
    "start": "4106880",
    "end": "4113838"
  },
  {
    "text": "us to specify an org a team and a user and associate a specific user with that team that we created in",
    "start": "4113839",
    "end": "4120238"
  },
  {
    "text": "the last step for example and so what we want to do i've also added a new controller",
    "start": "4120239",
    "end": "4125679"
  },
  {
    "text": "to manage this and what we want to do is publish a new controller image as well as a new",
    "start": "4125679",
    "end": "4132719"
  },
  {
    "text": "package image so you'll see i've updated to v0.0.2 here and we'll also want to make sure that",
    "start": "4132719",
    "end": "4139920"
  },
  {
    "text": "our makefile commands here are going to update as well",
    "start": "4139920",
    "end": "4145120"
  },
  {
    "text": "so i'll go ahead and run those again we need to rebuild our binary",
    "start": "4145120",
    "end": "4150719"
  },
  {
    "text": "and this will take just a moment here all right so it looks like that",
    "start": "4150719",
    "end": "4155838"
  },
  {
    "text": "completed uh next thing we want to do is do our make image",
    "start": "4155839",
    "end": "4161440"
  },
  {
    "text": "and that should go pretty fast since we're using a lot of the same layers here",
    "start": "4161440",
    "end": "4167040"
  },
  {
    "text": "i do have a little bit of latency it looks like on my side but shouldn't take too long obviously it",
    "start": "4167040",
    "end": "4174798"
  },
  {
    "text": "would be a good thing to cache some of these module dependencies here in the future",
    "start": "4174799",
    "end": "4181440"
  },
  {
    "text": "and once our image finishes building we can go ahead and do make push make image push",
    "start": "4181839",
    "end": "4189278"
  },
  {
    "text": "i think i've forgotten that one twice now alright so that's going to push that up to our registry with v0.0.2",
    "start": "4189279",
    "end": "4197679"
  },
  {
    "text": "and the last thing we're going to want to do is rebuild our package image here to point to that",
    "start": "4197679",
    "end": "4205520"
  },
  {
    "text": "and i wish my network was a little faster but it's almost done it looks like",
    "start": "4206800",
    "end": "4213600"
  },
  {
    "text": "all right let's go into that package directory k cross plane build provider",
    "start": "4215280",
    "end": "4223280"
  },
  {
    "text": "once again we see it here you'll see that the digest has changed and we're going to go ahead and push that up to the registry",
    "start": "4223280",
    "end": "4230640"
  },
  {
    "text": "so push provider and this time it's going to be hashdan kc provider github",
    "start": "4230640",
    "end": "4239040"
  },
  {
    "text": "and v0.0.2 so we're going to match that controller image and we should see that",
    "start": "4239040",
    "end": "4246080"
  },
  {
    "text": "pushed up successfully and now what we want to do is actually update our provider",
    "start": "4246080",
    "end": "4252080"
  },
  {
    "text": "that exists in the cluster so let's look at our provider so we have it here",
    "start": "4252080",
    "end": "4258960"
  },
  {
    "text": "and we're using that 0.0.1 image so let's go ahead and edit that",
    "start": "4258960",
    "end": "4266080"
  },
  {
    "text": "and we'll bump it to 0.0.2",
    "start": "4266080",
    "end": "4273840"
  },
  {
    "text": "all right and we should see if we get that provider package again that it's healthy and true and we should actually see that the",
    "start": "4278000",
    "end": "4284800"
  },
  {
    "text": "controller has been switched out here so you'll see the old one is terminating you'll see this new digest actually",
    "start": "4284800",
    "end": "4290239"
  },
  {
    "text": "present so that matches our image digest and we should see that our new",
    "start": "4290239",
    "end": "4295679"
  },
  {
    "text": "controller is running we should see that we have all the same crds plus our membership one",
    "start": "4295679",
    "end": "4303760"
  },
  {
    "text": "so there we'll see our membership crd and we should also still see that our team exists and",
    "start": "4303760",
    "end": "4309280"
  },
  {
    "text": "that's true so our team exists it's still synced uh we didn't delete that or clean it up and we've automatically upgraded our",
    "start": "4309280",
    "end": "4315840"
  },
  {
    "text": "provider here to pick up our new versions",
    "start": "4315840",
    "end": "4320480"
  },
  {
    "text": "okay so the last thing we want to look at today is how we can compose these manage resources that we've created for",
    "start": "4321120",
    "end": "4327040"
  },
  {
    "text": "this provider we're going to show a pretty simple example but we have another type of package in",
    "start": "4327040",
    "end": "4332159"
  },
  {
    "text": "cross plane other than provider and that would be the configuration package type",
    "start": "4332159",
    "end": "4337199"
  },
  {
    "text": "you can see here you can declare dependencies on providers and what a configuration package does is it combines different infrastructure",
    "start": "4337199",
    "end": "4344159"
  },
  {
    "text": "primitives in this case we're going to use our team and our membership into a higher level object this is kind of a trivial example",
    "start": "4344159",
    "end": "4351199"
  },
  {
    "text": "but you can imagine that if you were using gcp or aws or azure and you wanted to define a vpc and",
    "start": "4351199",
    "end": "4358640"
  },
  {
    "text": "then put an rds instance in that and also an eks cluster and have those all wired up",
    "start": "4358640",
    "end": "4364400"
  },
  {
    "text": "and present that to users or developers within your organization as a simple abstraction this could be",
    "start": "4364400",
    "end": "4369920"
  },
  {
    "text": "really useful the other nice thing about this is the ability to declare dependencies on providers",
    "start": "4369920",
    "end": "4375360"
  },
  {
    "text": "so you can imagine if you were creating a networked database and cluster abstraction that you could declare dependencies on",
    "start": "4375360",
    "end": "4382159"
  },
  {
    "text": "three different providers have them all installed then you could create what we call composite resource definition",
    "start": "4382159",
    "end": "4388320"
  },
  {
    "text": "which declares the schema this looks a lot like a crd in fact actually renders out a crd that you",
    "start": "4388320",
    "end": "4394320"
  },
  {
    "text": "declare the abstract schema so in this case we're just going to say give us the org and user",
    "start": "4394320",
    "end": "4399440"
  },
  {
    "text": "and we're going to create a team and a membership for that user to the team on the back end you can imagine that we could say give",
    "start": "4399440",
    "end": "4405280"
  },
  {
    "text": "us your database size and node pool size for your cluster um and create you know a more complex",
    "start": "4405280",
    "end": "4411520"
  },
  {
    "text": "abstraction there and then we can have an arbitrary number of compositions",
    "start": "4411520",
    "end": "4416640"
  },
  {
    "text": "um that satisfy a composite resource definition or xrd as we call it",
    "start": "4416640",
    "end": "4422080"
  },
  {
    "text": "for short and these basically tell how a abstraction is satisfied so in this",
    "start": "4422080",
    "end": "4428320"
  },
  {
    "text": "case we're going to satisfy it with a github team and a github membership",
    "start": "4428320",
    "end": "4433440"
  },
  {
    "text": "you know in the in the more complex case you could have different cloud providers backing a",
    "start": "4433440",
    "end": "4439280"
  },
  {
    "text": "single abstraction or you could have different configurations on a single cloud provider or on-prem and in cluster",
    "start": "4439280",
    "end": "4446159"
  },
  {
    "text": "all these sorts of variations that can satisfy definition really allowing you to define your own",
    "start": "4446159",
    "end": "4451280"
  },
  {
    "text": "platform and your own console for consuming resources so we can",
    "start": "4451280",
    "end": "4456400"
  },
  {
    "text": "package these up just like we did a provider and push them to a registry and also be able to install them and when they're",
    "start": "4456400",
    "end": "4462159"
  },
  {
    "text": "installed they're going to automatically do things like check the cross plane version make sure all dependencies are there",
    "start": "4462159",
    "end": "4467520"
  },
  {
    "text": "install dependencies if they're missing etc so let's go ahead and do that um so i'll",
    "start": "4467520",
    "end": "4472880"
  },
  {
    "text": "go into the configuration directory and you'll see this is a lot like how we package the provider so we'll do k cross plane",
    "start": "4472880",
    "end": "4481280"
  },
  {
    "text": "build configuration and that'll build our configuration once",
    "start": "4481280",
    "end": "4488880"
  },
  {
    "text": "again we see our x package here i call this our source control platform as a service so let's go ahead",
    "start": "4488880",
    "end": "4495760"
  },
  {
    "text": "and also push that so we'll say k cross plane push configuration and",
    "start": "4495760",
    "end": "4503600"
  },
  {
    "text": "we'll call it source control pass control has v0.0.1",
    "start": "4503600",
    "end": "4512880"
  },
  {
    "text": "so once again this is going to put you to the registry and once that completes remember that we",
    "start": "4512880",
    "end": "4520480"
  },
  {
    "text": "do have provider github already present here so it's going to see that that provider has already been installed and",
    "start": "4520480",
    "end": "4525679"
  },
  {
    "text": "won't have to do any extra installation it'll just bring these composite types that we were",
    "start": "4525679",
    "end": "4530960"
  },
  {
    "text": "talking about so we can go ahead and k crossplane",
    "start": "4530960",
    "end": "4536239"
  },
  {
    "text": "install configuration and i'm just going to copy paste this in",
    "start": "4536239",
    "end": "4543920"
  },
  {
    "text": "and now we can do things like look at our configuration see what version it's using it's already installed and healthy and what we should",
    "start": "4545280",
    "end": "4552000"
  },
  {
    "text": "see is the xrd and composition we installed are now present in the cluster the xrd",
    "start": "4552000",
    "end": "4559120"
  },
  {
    "text": "actually creates other crds for us to be able to actually create instances of this abstract type",
    "start": "4559120",
    "end": "4564800"
  },
  {
    "text": "so we should see that there is a",
    "start": "4564800",
    "end": "4569678"
  },
  {
    "text": "user teams crd here and i can now create instances of it so let's look at what an instance of that might look like",
    "start": "4570560",
    "end": "4577120"
  },
  {
    "text": "if we go down i've created an example here so here we're going to create a user team we want it to be called user",
    "start": "4577120",
    "end": "4582719"
  },
  {
    "text": "team and we're saying we want it in this cubecon n a org and we're going to say we want user stephen d barely",
    "start": "4582719",
    "end": "4589120"
  },
  {
    "text": "in it so this is actually going to create a user team team as well as add steven to that team",
    "start": "4589120",
    "end": "4597679"
  },
  {
    "text": "and behind the scenes it's going to render out a membership and team here so once again kind of a trivial example",
    "start": "4597679",
    "end": "4604320"
  },
  {
    "text": "but it does show the power of this model here all right so examples i need to get out",
    "start": "4604320",
    "end": "4610960"
  },
  {
    "text": "of this directory okay apply dash f examples",
    "start": "4610960",
    "end": "4616719"
  },
  {
    "text": "org user team all right and if we actually look at the",
    "start": "4616719",
    "end": "4622640"
  },
  {
    "text": "rendered out resources um this should take a minute for it to become ready but we can look at the user",
    "start": "4622640",
    "end": "4627920"
  },
  {
    "text": "team itself which is what the the user is interacting with so a developer who just wants a team with the user so they don't",
    "start": "4627920",
    "end": "4634640"
  },
  {
    "text": "only care about the status of this but being infrastructure aware we are",
    "start": "4634640",
    "end": "4639760"
  },
  {
    "text": "going to look at the actual rendered out resources it looks like our team has now become ready and let's see if our membership",
    "start": "4639760",
    "end": "4646719"
  },
  {
    "text": "has as well yep our membership is also ready um",
    "start": "4646719",
    "end": "4652400"
  },
  {
    "text": "and that will result in the abstract resource also becoming ready and if we go over and look at our",
    "start": "4652400",
    "end": "4658239"
  },
  {
    "text": "kubecon n a org we should see that our user team is",
    "start": "4658239",
    "end": "4663840"
  },
  {
    "text": "present here and you'll see that both steven and i are in it and we have the description that we",
    "start": "4663840",
    "end": "4669920"
  },
  {
    "text": "defined and that's a good thing to point out there is in the composition you can have arbitrary mappings from the",
    "start": "4669920",
    "end": "4676320"
  },
  {
    "text": "abstraction to these base resources you can also have the resources reference each other so here we're saying",
    "start": "4676320",
    "end": "4682159"
  },
  {
    "text": "please use the same team that's composed with me so you can kind of resolve those",
    "start": "4682159",
    "end": "4687440"
  },
  {
    "text": "references automatically you can also set defaults so for instance we're not exposing the description",
    "start": "4687440",
    "end": "4693040"
  },
  {
    "text": "and we're just saying please always set it to a composed team and you could decide if you wanted to expose more or less",
    "start": "4693040",
    "end": "4700239"
  },
  {
    "text": "in the abstraction and also make parts of that optional or not all right so thanks for joining",
    "start": "4700239",
    "end": "4707199"
  },
  {
    "text": "us today uh it's definitely a blast to go through actually implementing a kubernetes controller for crossplane uh",
    "start": "4707199",
    "end": "4713440"
  },
  {
    "text": "please feel free to join us in the cross plane slack you can use this link here slack.crossplane.io",
    "start": "4713440",
    "end": "4719199"
  },
  {
    "text": "set up an account and we'd love to chat with you and we'll also be in the chat here for the presentation",
    "start": "4719199",
    "end": "4725040"
  },
  {
    "text": "um so if you have any questions or thoughts or want to talk to us afterwards please feel free to let us",
    "start": "4725040",
    "end": "4730080"
  },
  {
    "text": "know and we'll stick around for any questions you may have thanks for joining us for today",
    "start": "4730080",
    "end": "4735600"
  },
  {
    "text": "yes thank you for joining us",
    "start": "4735600",
    "end": "4739280"
  }
]