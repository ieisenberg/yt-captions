[
  {
    "text": "Oh can everybody hear me okay cool hi everybody I'm Christy Wilson I'm a",
    "start": "3820",
    "end": "10450"
  },
  {
    "text": "software engineer at Google and I work on the container tools team I've worked in a lot of different industries I've",
    "start": "10450",
    "end": "16840"
  },
  {
    "text": "worked in mobile foreign currency exchange Triple A games this talk is",
    "start": "16840",
    "end": "22480"
  },
  {
    "text": "based on my work most recently with conformance testing 4k native serving and also from leading the K native",
    "start": "22480",
    "end": "28509"
  },
  {
    "text": "pipeline project I'm very passionate about software quality I've worked on a lot of projects",
    "start": "28509",
    "end": "35640"
  },
  {
    "text": "where quality was sacrifice for speed and the technical debt accumulated until the project became very hard to work on",
    "start": "35640",
    "end": "42809"
  },
  {
    "text": "and almost impossible to change one of the places where people often",
    "start": "42809",
    "end": "48040"
  },
  {
    "text": "make sacrifices is in testing so what we're going to talk about today is how",
    "start": "48040",
    "end": "53310"
  },
  {
    "text": "pyramids and shells can help us make well-tested CRD based platforms",
    "start": "53310",
    "end": "61030"
  },
  {
    "text": "you'll get the most out of this talk if you have worked on your own custom controllers before all of our examples",
    "start": "61030",
    "end": "67840"
  },
  {
    "text": "are going to be in go and we're going to be looking at two approaches which is either starting from the kubernetes",
    "start": "67840",
    "end": "74020"
  },
  {
    "text": "sample controller and using client go or using cou builder",
    "start": "74020",
    "end": "79830"
  },
  {
    "text": "but even if you haven't worked with see IDs before you still might find some of this content interesting so here's a",
    "start": "80580",
    "end": "86550"
  },
  {
    "text": "quick intro to what they are CID stands for custom resource definition so this",
    "start": "86550",
    "end": "93540"
  },
  {
    "text": "is something that lets us add our own types to kubernetes in addition to the built-in ones like deployments and pods",
    "start": "93540",
    "end": "101090"
  },
  {
    "text": "on their own see IDs just let us create structured data but we want to operate",
    "start": "101520",
    "end": "107670"
  },
  {
    "text": "on that data so we add controllers which are binaries that we run and together we can make declarative API",
    "start": "107670",
    "end": "115100"
  },
  {
    "text": "controllers are binaries that operate on your CR DS when they change state so when they're created or updated or",
    "start": "115850",
    "end": "122070"
  },
  {
    "text": "deleted so why would you be making your own crt-based system",
    "start": "122070",
    "end": "128729"
  },
  {
    "text": "it's usually because you're creating a platform a platform is software that we",
    "start": "128729",
    "end": "134610"
  },
  {
    "text": "build other software on top of and usually the point of the platform isn't the platform itself it's the things that",
    "start": "134610",
    "end": "141360"
  },
  {
    "text": "we want to build on top of it that's where the real business value is a platform is an abstraction of all the",
    "start": "141360",
    "end": "147569"
  },
  {
    "text": "stuff that you have to do to get your software running this means that platforms are the",
    "start": "147569",
    "end": "153200"
  },
  {
    "text": "foundation for the important business value that we actually want to build this puts a lot of pressure on us as",
    "start": "153200",
    "end": "160470"
  },
  {
    "text": "platform developers because if we don't build this foundation correctly then our users are going to have a very hard time",
    "start": "160470",
    "end": "165930"
  },
  {
    "text": "and they won't use our platforms this means platforms should be our best",
    "start": "165930",
    "end": "172210"
  },
  {
    "text": "tested software so if we're going to make CRD based platforms how do we test",
    "start": "172210",
    "end": "177460"
  },
  {
    "text": "them you may have seen this pyramid before this is the classic testing pyramid this",
    "start": "177460",
    "end": "185150"
  },
  {
    "text": "tells us the kinds of tests that we should be writing and how many we should be writing of each type we start with",
    "start": "185150",
    "end": "191210"
  },
  {
    "text": "unit tests which are our cheapest and fastest tests and we wrote we write mostly unit tests and a little bit of",
    "start": "191210",
    "end": "197030"
  },
  {
    "text": "the other kind which as we move up the pyramid become slower and more expensive",
    "start": "197030",
    "end": "203230"
  },
  {
    "text": "specifically for CR DS we're going to be talking about this pyramid it is pretty",
    "start": "203710",
    "end": "209600"
  },
  {
    "text": "much the same pyramid but we're using slightly different terms to refer to the types of tests in this talk we're going",
    "start": "209600",
    "end": "214940"
  },
  {
    "text": "to go through each type and talk about how you can write it and what goal libraries you can use and what tricks",
    "start": "214940",
    "end": "220940"
  },
  {
    "text": "are available let's start at the top of the pyramid with end to end test",
    "start": "220940",
    "end": "228180"
  },
  {
    "text": "the key characteristic of these tests is that we will be connecting to an actual kubernetes cluster as you can see from",
    "start": "228180",
    "end": "234959"
  },
  {
    "text": "the top of the pyramid the box is the smallest so this means we should be writing the fewest number of",
    "start": "234959",
    "end": "239970"
  },
  {
    "text": "these tests we don't necessarily want to get coverage here what we want is to make sure that we've actually integrated",
    "start": "239970",
    "end": "246090"
  },
  {
    "text": "everything properly and it all works together so in order to run these tests we need a",
    "start": "246090",
    "end": "253249"
  },
  {
    "text": "kubernetes cluster and it has to be running your controllers you could deploy your controllers as part of your",
    "start": "253249",
    "end": "259130"
  },
  {
    "text": "test setup but I recommend that you offload that to a tool that's specifically for deployment for example",
    "start": "259130",
    "end": "264380"
  },
  {
    "text": "something like Co most of these tools are pretty easy to call before you invoke your tests so I recommend doing",
    "start": "264380",
    "end": "270500"
  },
  {
    "text": "that that way you can iterate on the tests themselves more quickly so from this point forward we're going to assume",
    "start": "270500",
    "end": "276650"
  },
  {
    "text": "that you have a kubernetes cluster and your controllers are running in it",
    "start": "276650",
    "end": "282310"
  },
  {
    "text": "let's look at seven specific things that you can do to get your end to hit and to end pests up and running also the code",
    "start": "282310",
    "end": "289150"
  },
  {
    "text": "samples aren't going to be showing you here are available in the github repo at the bottom of the slide if you want to take a look later if you use these seven",
    "start": "289150",
    "end": "296980"
  },
  {
    "text": "things it's actually pretty easy to get your end-to-end tests up and running",
    "start": "296980",
    "end": "301919"
  },
  {
    "text": "so the first thing that I recommend is about how your tests are invoked as you start adding these tests you'll notice",
    "start": "302719",
    "end": "309619"
  },
  {
    "text": "that when you run go tests it runs all of your tests and since end-to-end tests have to connect to a cluster and they're",
    "start": "309619",
    "end": "315889"
  },
  {
    "text": "slower that can be frustrating so I recommend using go build tags in this",
    "start": "315889",
    "end": "322339"
  },
  {
    "text": "example we use the tag e to e to identify the test that we don't want to run by default then when we run go tests",
    "start": "322339",
    "end": "329119"
  },
  {
    "text": "those pests won't be compiled and they won't be run but when we do want to run them we just specify the tag and we can",
    "start": "329119",
    "end": "335300"
  },
  {
    "text": "run them in isolation the next recommendation is to declare",
    "start": "335300",
    "end": "341509"
  },
  {
    "text": "your test inputs and go instead of Gamal Gamal is definitely more readable and it",
    "start": "341509",
    "end": "347210"
  },
  {
    "text": "makes sense to provide it as examples for your users but your test will probably need to manipulate your CRTs",
    "start": "347210",
    "end": "352759"
  },
  {
    "text": "and change some fields like for example the namespace and in order for them to do that with the yellow version you have",
    "start": "352759",
    "end": "359180"
  },
  {
    "text": "to load the llamo and parse it and becomes messy and it's kind of hard to understand what the actual test input is",
    "start": "359180",
    "end": "364669"
  },
  {
    "text": "so I recommend just declaring it and go",
    "start": "364669",
    "end": "369129"
  },
  {
    "text": "once you declare these objects what can you do with them well we need a client that can connect to your kubernetes",
    "start": "370130",
    "end": "375950"
  },
  {
    "text": "cluster and the way that we get that client is slightly different depending on how you built your controller",
    "start": "375950",
    "end": "382909"
  },
  {
    "text": "then what do I mean when I talk about how you build your controller well there's two approaches you could have used so the first one is if you went to",
    "start": "382909",
    "end": "389550"
  },
  {
    "text": "the kubernetes sample controller and built your controller from that that meant that you probably had to copy and",
    "start": "389550",
    "end": "394590"
  },
  {
    "text": "paste a bunch of boilerplate and then there's a script that you have to rerun periodically to generate your libraries",
    "start": "394590",
    "end": "401770"
  },
  {
    "text": "alternatively you may have used cou builder which also uses client go under the covers but it creates libraries for",
    "start": "401770",
    "end": "409520"
  },
  {
    "text": "you dynamically so you don't have to statically generate them and there's less boilerplate involved",
    "start": "409520",
    "end": "415539"
  },
  {
    "text": "whichever approach you use I recommend telling your tests how to connect to your cluster using your coop config your",
    "start": "415559",
    "end": "422279"
  },
  {
    "text": "coop config file already has your endpoint information and it says how to authenticate with the cluster and if you",
    "start": "422279",
    "end": "428759"
  },
  {
    "text": "want to invoke the test locally you can just use the one you already have and if you want to run them on CI you can",
    "start": "428759",
    "end": "433859"
  },
  {
    "text": "provide a static coop config file so the first thing you need to do in",
    "start": "433859",
    "end": "439009"
  },
  {
    "text": "your test is take the path to your coop config and instantiate a config object",
    "start": "439009",
    "end": "444220"
  },
  {
    "text": "and then from there the way you instantiate your clients is slightly different depending on which library",
    "start": "444220",
    "end": "449470"
  },
  {
    "text": "you're using but it's still only a couple lines of code",
    "start": "449470",
    "end": "453720"
  },
  {
    "text": "I mentioned at the beginning of the talk that we use see IDs to create declarative api's this means that our",
    "start": "455590",
    "end": "462310"
  },
  {
    "text": "api's are eventually consistent which means that operations that we make are asynchronous so just because we made a",
    "start": "462310",
    "end": "469480"
  },
  {
    "text": "create call and it returned that doesn't mean the resource was actually created so this means our tests need to do a",
    "start": "469480",
    "end": "475600"
  },
  {
    "text": "certain amount of polling to wait for the system to actually realize the state that we declared and I find the poll",
    "start": "475600",
    "end": "482890"
  },
  {
    "text": "functions in the API machinery library really helpful for this I use this poll immediate function all the time",
    "start": "482890",
    "end": "489510"
  },
  {
    "text": "this is an example of it in action where it's wrapped in a function called wait for pod state which is called by our",
    "start": "489510",
    "end": "495510"
  },
  {
    "text": "test the interface here is that we provide a function which is called immediately and it continues to be",
    "start": "495510",
    "end": "502530"
  },
  {
    "text": "called every time interval passes until either it returns true or it signs out",
    "start": "502530",
    "end": "509330"
  },
  {
    "text": "now if you're doing all of this polling it means your tests might hang for a bit might look like they're hanging because",
    "start": "510690",
    "end": "516240"
  },
  {
    "text": "they're not doing anything so I recommend regularly outputting information about what your test is doing",
    "start": "516240",
    "end": "522650"
  },
  {
    "text": "so before you're going to do something that takes a while log a statement explaining what's happening it's",
    "start": "522650",
    "end": "529010"
  },
  {
    "text": "important to note though that if you use the log functions in the testing library your output will be buffered this means",
    "start": "529010",
    "end": "534920"
  },
  {
    "text": "that you won't be able to see it until the test completes which defeats the purpose so use an unbuffered library",
    "start": "534920",
    "end": "540520"
  },
  {
    "text": "even better if you use a named library it makes it so that you can run these tests in parallel because the log output",
    "start": "540520",
    "end": "547339"
  },
  {
    "text": "will be interleaved but you can actually see which test each line came from",
    "start": "547339",
    "end": "553150"
  },
  {
    "text": "this next one is something that I learned the hard way because I didn't do it for a long time this is to create a",
    "start": "554390",
    "end": "560150"
  },
  {
    "text": "namespace for every test if you try to share namespaces between tests your",
    "start": "560150",
    "end": "565490"
  },
  {
    "text": "tests can interfere with each other and it takes a long time to properly clean up an entire namespace however it turns",
    "start": "565490",
    "end": "572060"
  },
  {
    "text": "out to be pretty easy and lightweight to just create a namespace at the beginning of your test and tear it down at the end",
    "start": "572060",
    "end": "577670"
  },
  {
    "text": "and speaking of tear downs you should be aware that when your test is done if not",
    "start": "577670",
    "end": "585320"
  },
  {
    "text": "enough to just defer the teardown you should also catch the interrupt signal because these tests take a long time to",
    "start": "585320",
    "end": "590600"
  },
  {
    "text": "run and it's pretty common that you'll be running them and you'll have to interrupt them or possibly your CI system will need to interrupt it and you",
    "start": "590600",
    "end": "596480"
  },
  {
    "text": "want the tip the cleanup to happen in that case as well",
    "start": "596480",
    "end": "600880"
  },
  {
    "text": "okay so let's say that we wrote our system tests where do we go from here as we move down the pyramid we get to",
    "start": "602700",
    "end": "610110"
  },
  {
    "text": "integration tests it's really hard to define integration tests but it's fair to say that there's",
    "start": "610110",
    "end": "616910"
  },
  {
    "text": "somewhere between end-to-end tests and unit tests they're not unit tests because they put pieces of the system",
    "start": "616910",
    "end": "622850"
  },
  {
    "text": "together and they aren't end-to-end tests because they don't use the whole system",
    "start": "622850",
    "end": "629020"
  },
  {
    "text": "the way that we write integration tests for our CR DS depends again on how we built our controllers each of them has",
    "start": "629630",
    "end": "636259"
  },
  {
    "text": "different approaches and you're kind of stuck with one or the other depending on how you built the controller but they still have different strengths",
    "start": "636259",
    "end": "643400"
  },
  {
    "text": "well let's start with looking at the qu builder based integration test",
    "start": "643400",
    "end": "648769"
  },
  {
    "text": "if you use KU builder to initialize your project it actually generates integration tests for you you still have",
    "start": "648769",
    "end": "655429"
  },
  {
    "text": "to fill in all the assertions but it creates all the setup and the teardown and what these do for you is they run",
    "start": "655429",
    "end": "661369"
  },
  {
    "text": "processes for you locally they start an instance of each of your controllers they start an instance of the API server",
    "start": "661369",
    "end": "667910"
  },
  {
    "text": "and they start an EDD instance this is an example of what some of the",
    "start": "667910",
    "end": "673639"
  },
  {
    "text": "generated code looks like if this looks kind of unfamiliar to you that's because",
    "start": "673639",
    "end": "679010"
  },
  {
    "text": "it's using a testing library for BDD called ginkgo but what's happening in",
    "start": "679010",
    "end": "684170"
  },
  {
    "text": "this code is that we're first creating an instance of our CID which is of type feline and then we're waiting for the",
    "start": "684170",
    "end": "690589"
  },
  {
    "text": "controller to create a corresponding deployment and the cool thing is we can do this without actually requiring a",
    "start": "690589",
    "end": "696290"
  },
  {
    "text": "kubernetes cluster but because there's no kubernetes",
    "start": "696290",
    "end": "701360"
  },
  {
    "text": "cluster we're a little bit limited in what we can test so you can pretty much assert on any state that you expect to",
    "start": "701360",
    "end": "706910"
  },
  {
    "text": "be created but you can't expect something like your containers to actually run and to hit an endpoint you'd have to do that in the end-to-end",
    "start": "706910",
    "end": "712880"
  },
  {
    "text": "test if you use client goat you have some options to these options used something",
    "start": "712880",
    "end": "721449"
  },
  {
    "text": "called a test double this term refers to any pretend object that you use that",
    "start": "721449",
    "end": "726850"
  },
  {
    "text": "pretends to be some other object in your system you may be familiar with mocks fakes and stubs",
    "start": "726850",
    "end": "734459"
  },
  {
    "text": "client NGO will provide you with a fake kubernetes client and it also generates fake clients for you for each of your",
    "start": "734670",
    "end": "741040"
  },
  {
    "text": "controllers and the cool thing about these is that you can reach inside of them and tell them what objects you",
    "start": "741040",
    "end": "747220"
  },
  {
    "text": "expect to exist in the world instantiating them is very easy this is",
    "start": "747220",
    "end": "753070"
  },
  {
    "text": "how you do it and then you use this to instantiate your controller the cool part comes in when you see data into the",
    "start": "753070",
    "end": "761830"
  },
  {
    "text": "clients so this is an example of seating the informer inside of my fake client with an object and what this does is",
    "start": "761830",
    "end": "769420"
  },
  {
    "text": "later on if any code tries to retrieve objects it's going to get the one that we seated",
    "start": "769420",
    "end": "776100"
  },
  {
    "text": "this starts to look a little bit more verbose when we have more complicated scenarios this is the code from the",
    "start": "776100",
    "end": "782040"
  },
  {
    "text": "pipeline CRD project that we use to instantiate our controller it has to instantiate six different types of C IDs",
    "start": "782040",
    "end": "789509"
  },
  {
    "text": "it puts them into the clients and it puts them into the Informer's cache",
    "start": "789509",
    "end": "794360"
  },
  {
    "text": "the other thing that you can do with these objects is you can use them as mocks so you can assert on the methods",
    "start": "795589",
    "end": "800779"
  },
  {
    "text": "that were called so in this case we're making sure that the list function was called",
    "start": "800779",
    "end": "807430"
  },
  {
    "text": "if you're used to unit testing you might be wondering why I'm referring to these as integration tests since they use test",
    "start": "808769",
    "end": "814679"
  },
  {
    "text": "doubles there are a few reasons for this one is if you're testing at the level of",
    "start": "814679",
    "end": "819779"
  },
  {
    "text": "your controller the inputs and outputs that you have to deal with are actually pretty similar to what you're dealing with in the end-to-end test case also",
    "start": "819779",
    "end": "828269"
  },
  {
    "text": "you aren't isolating the code that you're testing you're testing the controller as a whole",
    "start": "828269",
    "end": "833939"
  },
  {
    "text": "and lastly you still are combining pieces of the system together you're just faking out the data",
    "start": "833939",
    "end": "841039"
  },
  {
    "text": "as far as which approach to use again you're kind of stuck with the one that comes with the system that you use but",
    "start": "841270",
    "end": "847390"
  },
  {
    "text": "there are different advantages the advantage of the qu builder approach is that you can run the actual processes this is a boat as close as you can come",
    "start": "847390",
    "end": "854050"
  },
  {
    "text": "to an end to end test scenario but you can do it all without a kubernetes cluster and the advantage of a client go",
    "start": "854050",
    "end": "860470"
  },
  {
    "text": "approach is that it's much easier to see data",
    "start": "860470",
    "end": "864600"
  },
  {
    "text": "this brings us to the bottom of the pyramid the unit tests so this is where we want to have the",
    "start": "866140",
    "end": "873059"
  },
  {
    "text": "most coverage we should have mostly unit tests with just a smattering of the other types and the reason there's some",
    "start": "873059",
    "end": "879839"
  },
  {
    "text": "there's several reasons for that one reason is because they are cheap and they are fast but there's something else",
    "start": "879839",
    "end": "886319"
  },
  {
    "text": "besides that this is because all the types of tests",
    "start": "886319",
    "end": "891959"
  },
  {
    "text": "that we've been talking about up until this point integrate multiple components together",
    "start": "891959",
    "end": "897460"
  },
  {
    "text": "why is that bad well some of the disadvantages of these tests are that they're slow and they're",
    "start": "897460",
    "end": "903480"
  },
  {
    "text": "expensive which we already talked about but there's another big reason it's because they promote bad design",
    "start": "903480",
    "end": "910390"
  },
  {
    "text": "to understand why that is we have to look at what good design is good design",
    "start": "910390",
    "end": "915400"
  },
  {
    "text": "is something that we often refer to as testable code but the thing is we don't write code to be testable just because",
    "start": "915400",
    "end": "921550"
  },
  {
    "text": "we want to test it we write testable code because it has these attributes it's loosely coupled it's highly",
    "start": "921550",
    "end": "928300"
  },
  {
    "text": "cohesive and the interfaces are well defined integrated tests however hide all of",
    "start": "928300",
    "end": "935700"
  },
  {
    "text": "these design problems for example you can't see the details here but this is a reconcile loop even",
    "start": "935700",
    "end": "943300"
  },
  {
    "text": "just glancing at it you can see that it's very long it is not highly cohesive it does a lot",
    "start": "943300",
    "end": "949110"
  },
  {
    "text": "of different things it's not loosely coupled it calls in to a lot of different objects but integrated tests",
    "start": "949110",
    "end": "956190"
  },
  {
    "text": "don't care you can still write an integration test for this just fine unit testing this however is really",
    "start": "956190",
    "end": "963750"
  },
  {
    "text": "difficult as soon as you started trying to write the unit test for this you would realize something was wrong the",
    "start": "963750",
    "end": "970019"
  },
  {
    "text": "fact that it's really hard to write a unit test for this is a signal that you should revisit your design because",
    "start": "970019",
    "end": "975660"
  },
  {
    "text": "there's something wrong with it using lots of unit tests encourages us",
    "start": "975660",
    "end": "981720"
  },
  {
    "text": "to design our software well so how do we do this specifically for CR",
    "start": "981720",
    "end": "987860"
  },
  {
    "text": "DS I recommend that you follow the functional core and imperative shell approach the idea is that your business",
    "start": "987860",
    "end": "995090"
  },
  {
    "text": "logic is in something called the functional core and then all the messy stuff that communicates with the outside",
    "start": "995090",
    "end": "1000670"
  },
  {
    "text": "world is in the imperative shell which calls into the functional Court",
    "start": "1000670",
    "end": "1005810"
  },
  {
    "text": "now when I say functional here I'm not recommending that you go and rewrite all of your code to be purely functional or",
    "start": "1005810",
    "end": "1012139"
  },
  {
    "text": "that you start using monads I mean specifically that you can write code that avoids mutating state that doesn't",
    "start": "1012139",
    "end": "1019310"
  },
  {
    "text": "do any IO and doesn't have any side effects so that's what I mean when I talk about the functional core you still",
    "start": "1019310",
    "end": "1025880"
  },
  {
    "text": "need the other stuff but you isolate it in this imperative show",
    "start": "1025880",
    "end": "1030920"
  },
  {
    "text": "another way to look at this is to follow this advice from Dave Cheney so if we",
    "start": "1030920",
    "end": "1036290"
  },
  {
    "text": "factor our code really well and we have highly focused packages then we separate",
    "start": "1036290",
    "end": "1041300"
  },
  {
    "text": "the code that provides functionality or the functional core from the code that consumes it or the imperative show",
    "start": "1041300",
    "end": "1049570"
  },
  {
    "text": "when when we talk about this for CR DS this means specifically to avoid adding stuff to your reconcile loop the",
    "start": "1049990",
    "end": "1057370"
  },
  {
    "text": "reconcile loop being exactly if you're using Clank oh I'm talking about the sink handler function if you're using",
    "start": "1057370",
    "end": "1063370"
  },
  {
    "text": "cou builder I'm talking about the reconcile function so as much as possible we want to avoid putting our",
    "start": "1063370",
    "end": "1068980"
  },
  {
    "text": "core business logic in there and we want to avoid adding more functions onto our controllers",
    "start": "1068980",
    "end": "1076010"
  },
  {
    "text": "what we want to do is treat the controller and all of its related objects as the imperative shell it's the",
    "start": "1076010",
    "end": "1083210"
  },
  {
    "text": "glue that holds our controllers together so we want to keep that isolated from the business logic which we can put in",
    "start": "1083210",
    "end": "1089240"
  },
  {
    "text": "these really well factored functions and these well factored functions can actually be unit tested without",
    "start": "1089240",
    "end": "1094640"
  },
  {
    "text": "requiring any test doubles at all specifically the way to do this is to",
    "start": "1094640",
    "end": "1101800"
  },
  {
    "text": "avoid passing around Lister's and informers if you find yourself doing that try to rewrite the functions you're",
    "start": "1101800",
    "end": "1107470"
  },
  {
    "text": "writing instead so they just take exactly the objects they need to operate on this separates the concern of",
    "start": "1107470",
    "end": "1113890"
  },
  {
    "text": "retrieving the objects from what you actually want to do with them",
    "start": "1113890",
    "end": "1118950"
  },
  {
    "text": "testing is super important for platforms and for CRD based platforms and it turns",
    "start": "1120390",
    "end": "1126430"
  },
  {
    "text": "out that we already have all of the tools that we need to test them really well",
    "start": "1126430",
    "end": "1131809"
  },
  {
    "text": "so when you're writing your crt-based platforms remember the pyramid right tests of all",
    "start": "1131809",
    "end": "1137779"
  },
  {
    "text": "these kinds but focus on the unit test because the unit tests will push us to",
    "start": "1137779",
    "end": "1143029"
  },
  {
    "text": "design our code well and isolate the functional core",
    "start": "1143029",
    "end": "1147998"
  },
  {
    "text": "so what can you do to make this happen there's two things the first thing is to measure your coverage and see where",
    "start": "1148190",
    "end": "1153980"
  },
  {
    "text": "you're at the second thing is to take a look at your reconcile loop so go to your project and run go test with the",
    "start": "1153980",
    "end": "1161210"
  },
  {
    "text": "cover flag and see where you're at you shouldn't aim for a hundred percent coverage because that's not worth the effort but about 80 percent is pretty",
    "start": "1161210",
    "end": "1167930"
  },
  {
    "text": "good and then take a look at your reconcile loop how much logic have you",
    "start": "1167930",
    "end": "1173750"
  },
  {
    "text": "implemented directly in there and how many functions have you added onto your controller if you can refactor those out",
    "start": "1173750",
    "end": "1179780"
  },
  {
    "text": "then you can increase your coverage pretty easily so remember the pyramid and the shell",
    "start": "1179780",
    "end": "1187630"
  },
  {
    "text": "and we can write stable reliable maintainable CRD based platforms thank",
    "start": "1187630",
    "end": "1194110"
  },
  {
    "text": "you",
    "start": "1194110",
    "end": "1196230"
  },
  {
    "text": "and I have some sources in here too the slides are online if you want to look at all of these other great presentations",
    "start": "1200720",
    "end": "1205790"
  },
  {
    "text": "and articles does anybody have any questions",
    "start": "1205790",
    "end": "1210490"
  },
  {
    "text": "we have a microphone er no no it's coming I think it's coming it's",
    "start": "1210820",
    "end": "1215859"
  },
  {
    "text": "microphone alright um I was wondering if you could talk about we we actually have quite a few conversations at my own firm",
    "start": "1215859",
    "end": "1223989"
  },
  {
    "text": "about how what the right level of CO coverage is and I noticed there you put that magic 80% number I'm just curious",
    "start": "1223989",
    "end": "1231099"
  },
  {
    "text": "because I know it's there's a degree to which is a finger in the wind but how",
    "start": "1231099",
    "end": "1236799"
  },
  {
    "text": "did you reach that because we we we also came to the conclusion that a hundred percent is kind of like not efficient not realistic but where is the sweet",
    "start": "1236799",
    "end": "1243819"
  },
  {
    "text": "talk why is 80% I think that 80% is mostly an arbitrary",
    "start": "1243819",
    "end": "1249399"
  },
  {
    "text": "number but from all the projects that I've worked on the ones that are the",
    "start": "1249399",
    "end": "1254769"
  },
  {
    "text": "best tested usually end up being around 80% and I think if you follow the recommendation where you have all of your business logic and these really",
    "start": "1254769",
    "end": "1260319"
  },
  {
    "text": "well factored functions and you have like the ugly glue stuff outside then what ends up happening is that you provide coverage for the for the the",
    "start": "1260319",
    "end": "1267099"
  },
  {
    "text": "business logic in those functions and then like don't really worry so much about the ugly glue and I think that the trade-off in like how much code you have",
    "start": "1267099",
    "end": "1273459"
  },
  {
    "text": "it's ugly glue is like 20 percent it's like 20 percent gluing everything together at 80 percent the actual thing",
    "start": "1273459",
    "end": "1278619"
  },
  {
    "text": "you're trying to do but it's pretty arbitrary like if you're at like 69 percent and you look at your code and",
    "start": "1278619",
    "end": "1283629"
  },
  {
    "text": "there's like it's all the stuff that's not covered I think it's important to know what you're covering and what you're not if the stuff you're not",
    "start": "1283629",
    "end": "1288999"
  },
  {
    "text": "covering is this like weird glue then like it's probably fine okay so this is mainly from from your own empirical",
    "start": "1288999",
    "end": "1295149"
  },
  {
    "text": "observations that you find that's the sweet spot yeah",
    "start": "1295149",
    "end": "1299309"
  },
  {
    "text": "so on your point about using avoiding llamo and instead using deeply nested",
    "start": "1306840",
    "end": "1312450"
  },
  {
    "text": "struck something I have seen kubernetes test tests is they often have those",
    "start": "1312450",
    "end": "1320700"
  },
  {
    "text": "littered directly in the test bodies so to read what a single test is doing can",
    "start": "1320700",
    "end": "1326430"
  },
  {
    "text": "span a hundred to 500 line it feels like at some point you want to refactor those",
    "start": "1326430",
    "end": "1332610"
  },
  {
    "text": "into fixtures I've also seen some other tests that use something akin to a",
    "start": "1332610",
    "end": "1338430"
  },
  {
    "text": "builder pattern I was curious in the same sort of feeling it out way",
    "start": "1338430",
    "end": "1344040"
  },
  {
    "text": "what what do you look for in terms of when it's time to pull things up into",
    "start": "1344040",
    "end": "1349110"
  },
  {
    "text": "fixtures and what patterns or practices would you recommend so I think the only",
    "start": "1349110",
    "end": "1354240"
  },
  {
    "text": "recommendation that I have there is the one about the the wrong abstraction is",
    "start": "1354240",
    "end": "1360180"
  },
  {
    "text": "worse than to plication so I think that it's okay to duplicate that I know it's like super long and hard to read but I",
    "start": "1360180",
    "end": "1365910"
  },
  {
    "text": "do I I do find that I often end up pulling those out and reusing it it's usually because another test needs like",
    "start": "1365910",
    "end": "1371910"
  },
  {
    "text": "exactly the same input or it's like pretty much the same thing but the name is different something like that so that's the only case where I would pull",
    "start": "1371910",
    "end": "1377370"
  },
  {
    "text": "it out but if it's just one it's like a one-off thing and one test is using it then I just leave it in the test",
    "start": "1377370",
    "end": "1384380"
  },
  {
    "text": "you hi Christy I have a couple questions so",
    "start": "1390770",
    "end": "1397130"
  },
  {
    "text": "the first one is when you mentioned building you brought your own unit tests",
    "start": "1397130",
    "end": "1403070"
  },
  {
    "text": "I sometimes find that I had to use different libraries like API is clang go",
    "start": "1403070",
    "end": "1408260"
  },
  {
    "text": "API missionary so how can I make sure that the code or the unit tests I write",
    "start": "1408260",
    "end": "1414800"
  },
  {
    "text": "will come compatible with the like the",
    "start": "1414800",
    "end": "1420470"
  },
  {
    "text": "latest app stream in those projects because they those code change as well so how how do I make sure that something",
    "start": "1420470",
    "end": "1427490"
  },
  {
    "text": "changes on the other repositories I'm my unit tests won't get affected or like",
    "start": "1427490",
    "end": "1433220"
  },
  {
    "text": "I'll connect controlled affect another question is for the end-to-end test that",
    "start": "1433220",
    "end": "1438890"
  },
  {
    "text": "you just mentioned that I wondered that if all we have to do is do when we",
    "start": "1438890",
    "end": "1444350"
  },
  {
    "text": "create the controller we just have to monitor at the at the add update and delete if those things work correctly I",
    "start": "1444350",
    "end": "1452570"
  },
  {
    "text": "can assume that the Antonine test it works fine and last question if I may I",
    "start": "1452570",
    "end": "1459830"
  },
  {
    "text": "think you mentioned that for the system test that we always the functions is",
    "start": "1459830",
    "end": "1468410"
  },
  {
    "text": "more asynchronous so resource is created it doesn't mean they actually exist so",
    "start": "1468410",
    "end": "1474020"
  },
  {
    "text": "you have to hold them so I wanted to get your feedback on like polling versus",
    "start": "1474020",
    "end": "1480530"
  },
  {
    "text": "pushing using informers because for informants you actually just like wait to to get the information rather than",
    "start": "1480530",
    "end": "1487610"
  },
  {
    "text": "you for someone to give you the information rather than you go to get it fetch the information so just like I",
    "start": "1487610",
    "end": "1493490"
  },
  {
    "text": "work opposite directions such as 1k or your opinions on all the questions I",
    "start": "1493490",
    "end": "1499760"
  },
  {
    "text": "have just racing okay so the first question I think was about how the versions of the libraries that you're",
    "start": "1499760",
    "end": "1505490"
  },
  {
    "text": "using might be changing out from under you you want to make sure that your code keeps working with those so I think that",
    "start": "1505490",
    "end": "1511040"
  },
  {
    "text": "that's something that you definitely would probably not want to be covering with the unit test because the unit test should hopefully be like mostly not",
    "start": "1511040",
    "end": "1516290"
  },
  {
    "text": "aware of the libraries you're using like you're just passing in your objects and they're like being like is this is this valid or like I need to like make a new",
    "start": "1516290",
    "end": "1522470"
  },
  {
    "text": "object based on this like that kind of thing and that's why we still need the integration test and this system test so I think the only thing",
    "start": "1522470",
    "end": "1528860"
  },
  {
    "text": "you can really do is have all these unit tests and then have like a few system tests and integration tests and then because you're probably been during in",
    "start": "1528860",
    "end": "1534800"
  },
  {
    "text": "the code you can you know update it when you're ready and then like run all your system tests and integration tests and then those pass you should be good I",
    "start": "1534800",
    "end": "1541610"
  },
  {
    "text": "mean you'll never be a hundred percent sure no matter what you do and then for the second question I think you're",
    "start": "1541610",
    "end": "1547220"
  },
  {
    "text": "asking about yours being sure that your system tests your entrance tests we're working I didn't quite",
    "start": "1547220",
    "end": "1553570"
  },
  {
    "text": "sorry yes so if my controller is functional like for example I can add",
    "start": "1553570",
    "end": "1559690"
  },
  {
    "text": "update and delete those things works perfectly can I assume that my assistant",
    "start": "1559690",
    "end": "1565630"
  },
  {
    "text": "test is done huh all right some other things I need to test oh do you mean",
    "start": "1565630",
    "end": "1570790"
  },
  {
    "text": "like what do you need to be testing in the actual system test itself yes I think you give a code snippet but I'm",
    "start": "1570790",
    "end": "1577120"
  },
  {
    "text": "not able to see the exact comes with like an update and a delete and yeah I think that that's pretty good in an",
    "start": "1577120",
    "end": "1582370"
  },
  {
    "text": "older version of this presentation I recommended like one per type like one test per controller and Ciardi sort of",
    "start": "1582370",
    "end": "1588850"
  },
  {
    "text": "combo which i think is pretty much fine and like mostly happy paths because you want to rely on your other more",
    "start": "1588850",
    "end": "1594220"
  },
  {
    "text": "fine-grained tests to test all of the edge cases that you might encounter and I think maybe for the third one come up",
    "start": "1594220",
    "end": "1600310"
  },
  {
    "text": "to me after we can keep keep yeah this is a great talk and I",
    "start": "1600310",
    "end": "1607220"
  },
  {
    "text": "definitely feel that way because it helped me point out or pointed out to me a lot of things I'm doing wrong with my",
    "start": "1607220",
    "end": "1613100"
  },
  {
    "text": "testing so that was very informative thank you thank you very much so the thing I wanted to know a little",
    "start": "1613100",
    "end": "1619490"
  },
  {
    "text": "bit more maybe you can provide more of an example is that the idea of the imperative shell in the functional core",
    "start": "1619490",
    "end": "1626200"
  },
  {
    "text": "and what sort of what it looks like when you're - you know how you decide what code goes into what layer there and then",
    "start": "1626200",
    "end": "1632720"
  },
  {
    "text": "also with the imperative shell do you do you still get any testing coverage of that or are you okay with not testing",
    "start": "1632720",
    "end": "1638540"
  },
  {
    "text": "that glue so I think like personally I would be okay with almost not testing it",
    "start": "1638540",
    "end": "1644120"
  },
  {
    "text": "at all like definitely not like if I would probably have something like an integration test or a system test that",
    "start": "1644120",
    "end": "1649430"
  },
  {
    "text": "kind of generally makes sure that everything will run but then I wouldn't set out to explicitly test it I think",
    "start": "1649430",
    "end": "1654830"
  },
  {
    "text": "that the more you find yourself like refactoring things and putting logic into this functional quarry though you'll feel fine about not testing that",
    "start": "1654830",
    "end": "1661010"
  },
  {
    "text": "because you realize it's just like calling out to something else and handling the error and because we're dealing with go we can actually rely a",
    "start": "1661010",
    "end": "1666770"
  },
  {
    "text": "lot on like the the compiler to tell us what we've made a mistake there whereas in a language like Python you really",
    "start": "1666770",
    "end": "1671780"
  },
  {
    "text": "would want to make sure you covered every line because you may just have made a typo in the middle of it and then what was did you have another question",
    "start": "1671780",
    "end": "1677990"
  },
  {
    "text": "as well oh I just sort of like the example about you know how you decide what to put into the functional core and",
    "start": "1677990",
    "end": "1683930"
  },
  {
    "text": "what goes at the imperative shell I think that's pretty hard to do if you take a look at the example repo there I",
    "start": "1683930",
    "end": "1689210"
  },
  {
    "text": "have two versions of one of the same controller where I've tried to factor out the code into like kind of kind of a",
    "start": "1689210",
    "end": "1695660"
  },
  {
    "text": "functional core the controller is super simple though so I don't know if it's a super compelling example but you can kind of see like I think pretty much",
    "start": "1695660",
    "end": "1702260"
  },
  {
    "text": "just move everything out that you can just like keep moving stuff out until you can't really do it anymore it's just",
    "start": "1702260",
    "end": "1707600"
  },
  {
    "text": "making the code worse that's a net add the Bobcat fish yes awesome thank you",
    "start": "1707600",
    "end": "1713450"
  },
  {
    "text": "very much",
    "start": "1713450",
    "end": "1715840"
  },
  {
    "text": "you thank you for the talk so could you",
    "start": "1722230",
    "end": "1728340"
  },
  {
    "text": "share like in your experience or your observation what how much time you spend",
    "start": "1728340",
    "end": "1733500"
  },
  {
    "text": "on writing tests versus you implements the idea logic because I feel like",
    "start": "1733500",
    "end": "1741200"
  },
  {
    "text": "thought you were a person mostly more interesting implement the code was",
    "start": "1741200",
    "end": "1746250"
  },
  {
    "text": "spending time reading tests that is a great question I really like that question because I found over my career",
    "start": "1746250",
    "end": "1753090"
  },
  {
    "text": "that has definitely shifted like at the beginning of my career I spent most of my time writing the logic itself but",
    "start": "1753090",
    "end": "1758190"
  },
  {
    "text": "what I do now mostly is I try to actually start with the documentation for what I'm writing so I start with the",
    "start": "1758190",
    "end": "1763830"
  },
  {
    "text": "documentation and then from there I go into tests and then by the time I'm actually writing the thing itself it's",
    "start": "1763830",
    "end": "1769050"
  },
  {
    "text": "really easy and fast to do and the reason is that having to write the tests and having to write the documentation",
    "start": "1769050",
    "end": "1774480"
  },
  {
    "text": "has forced me to think a lot about it so I end up thinking a lot about like what is this interface that I'm writing what",
    "start": "1774480",
    "end": "1779670"
  },
  {
    "text": "should it actually take what should it actually return what is it going to be like to call it and then by the time I get around to actually implementing the",
    "start": "1779670",
    "end": "1785309"
  },
  {
    "text": "thing I've like thought through a lot of it I've just like and I've done and I move on to the next thing so I would say it's actually quite a large percentage",
    "start": "1785309",
    "end": "1791130"
  },
  {
    "text": "of my time writing these tests and then like sometimes rewriting them because I started turns out that it I designed it",
    "start": "1791130",
    "end": "1796500"
  },
  {
    "text": "poorly yeah thank you",
    "start": "1796500",
    "end": "1801170"
  },
  {
    "text": "you I think you're great stay forever",
    "start": "1806169",
    "end": "1811340"
  },
  {
    "text": "almighty top I have my questions how do you play a structured or test like we",
    "start": "1811340",
    "end": "1819499"
  },
  {
    "text": "have three contests like end to end integration and unit test so how are you",
    "start": "1819499",
    "end": "1824869"
  },
  {
    "text": "and what's your recommendation on the way we structure the test and for",
    "start": "1824869",
    "end": "1830929"
  },
  {
    "text": "example inside unit test we have some code and can we reuse Doc's code for",
    "start": "1830929",
    "end": "1836210"
  },
  {
    "text": "integration testing end to end as well so the question is about how you actually structure the code I think the",
    "start": "1836210",
    "end": "1843230"
  },
  {
    "text": "test code is just like any other code so if you feel like it's useful to factor some of it out and reuse it then totally",
    "start": "1843230",
    "end": "1849320"
  },
  {
    "text": "do that and if you share it between all the test types that's totally fine the other thing is the unit tests I",
    "start": "1849320",
    "end": "1854749"
  },
  {
    "text": "often find it useful to put them with the code they're testing so there's like the you know the file that has the code",
    "start": "1854749",
    "end": "1860269"
  },
  {
    "text": "and then right next to that there's the underscore test version that has the test in it but integration testing system tests usually end up living",
    "start": "1860269",
    "end": "1866600"
  },
  {
    "text": "somewhere else because they're more broad so there's like a test directory or something that has the integration tests the system tests and maybe the",
    "start": "1866600",
    "end": "1872929"
  },
  {
    "text": "libraries that are being used by your unit tests as well",
    "start": "1872929",
    "end": "1877119"
  },
  {
    "text": "great so thank you very much for attending and for all the great questions [Applause]",
    "start": "1878020",
    "end": "1889109"
  }
]