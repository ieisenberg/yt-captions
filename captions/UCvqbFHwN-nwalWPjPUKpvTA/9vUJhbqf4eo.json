[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "my name's Donald Hunter I'm from the emerging Tech Team in red hat",
    "start": "1380",
    "end": "6899"
  },
  {
    "text": "I'm my colleague Sanjeev couldn't unfortunately make it for personal reasons so I'll take this one on my own",
    "start": "6899",
    "end": "14580"
  },
  {
    "text": "and so let's get started this is a ebpf 201 and the goal of this",
    "start": "14580",
    "end": "21060"
  },
  {
    "start": "21000",
    "end": "21000"
  },
  {
    "text": "talk really is just to um well assume that everybody knows what ebpf is so",
    "start": "21060",
    "end": "26100"
  },
  {
    "text": "we're not going to do the ebpf101 but we're going to provide some guidelines I guess for how to get started in in",
    "start": "26100",
    "end": "33239"
  },
  {
    "text": "larger project development with BPF and really the goal here is to Target",
    "start": "33239",
    "end": "38280"
  },
  {
    "text": "people that are not kernel developers people like yourselves in the room who are kubernetes developers primarily I",
    "start": "38280",
    "end": "44579"
  },
  {
    "text": "guess and maybe somewhat unfamiliar with some of the Linux kernel development",
    "start": "44579",
    "end": "49620"
  },
  {
    "text": "practices so we're slightly past the BBF 101 as I said",
    "start": "49620",
    "end": "55140"
  },
  {
    "text": "um and we're going to focus on how we might tackle writing maintainable portable programs that can be installed",
    "start": "55140",
    "end": "62160"
  },
  {
    "text": "into the kernel and this is kind of based on our experiences of learning as newbies as we went along so hopefully",
    "start": "62160",
    "end": "69240"
  },
  {
    "text": "what I present here will be helpful to anybody that's um starting on a BPF programming Journey",
    "start": "69240",
    "end": "75180"
  },
  {
    "text": "so just before I get started can I get a show of hands of people that know what BPF is",
    "start": "75180",
    "end": "80880"
  },
  {
    "text": "okay most of you that's good and the show of hands of people that um have actually programmed some BPF code",
    "start": "80880",
    "end": "89159"
  },
  {
    "text": "yeah are considerably smaller number that's I guess to be expected",
    "start": "89159",
    "end": "94380"
  },
  {
    "text": "um have people installed BPF programs and used them for observability in their clusters yep a reasonable number okay so",
    "start": "94380",
    "end": "101159"
  },
  {
    "text": "that kind of level sets what the audience expectations might be from the from the talk",
    "start": "101159",
    "end": "107400"
  },
  {
    "text": "okay so I'm gonna recap a little bit on BPF not right from the beginnings but",
    "start": "107400",
    "end": "112860"
  },
  {
    "text": "just modern BPF as it stands today give you an overview of what I think are the kind of applications that can benefit",
    "start": "112860",
    "end": "118380"
  },
  {
    "text": "from using BPF I'll give you a bit of an overview of the technology and uh the",
    "start": "118380",
    "end": "123780"
  },
  {
    "text": "the tools available in modern BPF and then for the second half the presentation go",
    "start": "123780",
    "end": "128819"
  },
  {
    "text": "through some what I would describe development best practices and then at the end of that we'll talk about a few",
    "start": "128819",
    "end": "134819"
  },
  {
    "text": "kubernetes specifics okay so just a technology introduction",
    "start": "134819",
    "end": "140099"
  },
  {
    "start": "139000",
    "end": "139000"
  },
  {
    "text": "first so BPF is if for anybody that's not familiar with it it's a Sandbox",
    "start": "140099",
    "end": "146640"
  },
  {
    "text": "virtual machine environment inside the Linux kernel um which has a verifier that checks",
    "start": "146640",
    "end": "152940"
  },
  {
    "text": "whether or not your program will safely run to completion inside the kernel without causing any hiccups so if your",
    "start": "152940",
    "end": "159660"
  },
  {
    "text": "program doesn't pass the verifier it doesn't even get installed into the kernel if your program does pass the",
    "start": "159660",
    "end": "164819"
  },
  {
    "text": "verifier then it can be attached to one of many hooks inside the kernel to execute and the familiar ones are the ones shown",
    "start": "164819",
    "end": "171599"
  },
  {
    "text": "up in the top left hand side which is a you probably can't see the details but it's our Network packet flow diagram and",
    "start": "171599",
    "end": "179040"
  },
  {
    "text": "there are various hook points in the network packet flow where BPF programs can be attached and traditional BPF was",
    "start": "179040",
    "end": "185819"
  },
  {
    "text": "used for packet filtering to just actually just you know do packet dumps from the kernel so all you were doing in",
    "start": "185819",
    "end": "191459"
  },
  {
    "text": "BPF program was uh was matching packet headers and then dumping packets but modern BPF programs are considerably",
    "start": "191459",
    "end": "198239"
  },
  {
    "text": "more powerful and can be attached at various hook points so psyllium for example is our cni that uses BPF hoop",
    "start": "198239",
    "end": "206819"
  },
  {
    "text": "points at most of the C group SKB hooks to run code to accelerate the data plane",
    "start": "206819",
    "end": "212340"
  },
  {
    "text": "for uh for kubernetes networking there are a whole bunch of other hook points you've got Cape probes and new probes",
    "start": "212340",
    "end": "218760"
  },
  {
    "text": "shown in the center here and an example of a simple program being attached to a",
    "start": "218760",
    "end": "223980"
  },
  {
    "text": "user Space Program to count the number of times a function gets called and report on it",
    "start": "223980",
    "end": "229980"
  },
  {
    "text": "and then there are also many kernel Trace points which are easily instrumentable with BPF programs as well",
    "start": "229980",
    "end": "236280"
  },
  {
    "text": "so most of the trace points and new probes and things like that are useful for observability but there are other",
    "start": "236280",
    "end": "242159"
  },
  {
    "text": "use cases that come to the fore as well and I'll just uh talk about them a little bit",
    "start": "242159",
    "end": "248040"
  },
  {
    "text": "um BPF programs have access to a set of helper functions in the kernel that let",
    "start": "248040",
    "end": "253439"
  },
  {
    "text": "them do various things a set of maps for sharing data between different BPF",
    "start": "253439",
    "end": "258540"
  },
  {
    "text": "programs and with user space programs and more modern BPF has access to key",
    "start": "258540",
    "end": "264479"
  },
  {
    "text": "funks and kfunks are kind of a new development that's been enabled by a new feature within the BPF subsystem called",
    "start": "264479",
    "end": "271680"
  },
  {
    "text": "Corey which I'll talk a little bit about later and I would say that kfunk's supersede helpers",
    "start": "271680",
    "end": "277979"
  },
  {
    "text": "helpers are kind of like the the way things used to get done in BPF code and kfunks are the new way of doing things",
    "start": "277979",
    "end": "284160"
  },
  {
    "text": "so you'll see more kfunks become available but there's an essential set of BPF helpers that aren't going",
    "start": "284160",
    "end": "290280"
  },
  {
    "text": "anywhere they aren't going away they aren't getting deprecated and we'll talk a little bit about that later as well",
    "start": "290280",
    "end": "296280"
  },
  {
    "text": "okay so from a use cases perspective there's a number of things you can do",
    "start": "296280",
    "end": "301380"
  },
  {
    "start": "297000",
    "end": "297000"
  },
  {
    "text": "there's there's the obvious things which is observability a lot of people in the room have used BPF based observability",
    "start": "301380",
    "end": "307740"
  },
  {
    "text": "tools you can observe macro things and micro things you can do very very",
    "start": "307740",
    "end": "313380"
  },
  {
    "text": "detailed instrumentation or you can gather stats about application execution times and things like that",
    "start": "313380",
    "end": "320520"
  },
  {
    "text": "um the other obvious use case is extending the Linux networking stack uh with uh with BPF programs allocyllium",
    "start": "320520",
    "end": "327720"
  },
  {
    "text": "and other um Network acceleration tools but there's a whole bunch of other potential",
    "start": "327720",
    "end": "332820"
  },
  {
    "text": "use cases such as uh implementing hotfixes and workarounds or mitigating against external attacks and we're not",
    "start": "332820",
    "end": "339720"
  },
  {
    "text": "just talking about networking attacks they may be API attacks or you know things that you're protecting against",
    "start": "339720",
    "end": "344900"
  },
  {
    "text": "containers or something like that from from being able to do to your kernel and the interesting thing about all of",
    "start": "344900",
    "end": "350880"
  },
  {
    "text": "these use cases is they can be applied at runtime there's no kernel reboots you install a program and it starts",
    "start": "350880",
    "end": "356880"
  },
  {
    "text": "executing as soon as you attach it so you can you can upgrade uh your mitigations your protections your",
    "start": "356880",
    "end": "363360"
  },
  {
    "text": "networking features without ever having to have a kernel reboot so you can imagine longer term more kernel features",
    "start": "363360",
    "end": "370380"
  },
  {
    "text": "are might get developed as BPF programs because the management life cycle the",
    "start": "370380",
    "end": "375600"
  },
  {
    "text": "day two operational uh tools that you have available to you are much more flexible than with having to do kernel",
    "start": "375600",
    "end": "382680"
  },
  {
    "text": "installs and system reboots okay so just where are we on the",
    "start": "382680",
    "end": "388020"
  },
  {
    "start": "387000",
    "end": "387000"
  },
  {
    "text": "technology maturity map so our classic BPF back in what I'm calling phase zero",
    "start": "388020",
    "end": "394560"
  },
  {
    "text": "was the early technology which was only for doing packet filtering for uh for",
    "start": "394560",
    "end": "399960"
  },
  {
    "text": "doing TCP dump and that sort of thing and then somewhat about maybe eight ten years ago",
    "start": "399960",
    "end": "405360"
  },
  {
    "text": "I can't remember exactly um BPF and VM was extended to allow much",
    "start": "405360",
    "end": "411120"
  },
  {
    "text": "larger programs and to be usable for many more things in the kernel and those were the early days of BPF where the",
    "start": "411120",
    "end": "417419"
  },
  {
    "text": "tool chain was very uh weak uh the verifier had had lots of issues and bugs",
    "start": "417419",
    "end": "423900"
  },
  {
    "text": "and developing BPF programs was generally quite hard and probably actually harder than like kernel",
    "start": "423900",
    "end": "430259"
  },
  {
    "text": "development we're now in the fields where we're in modern BPF as I would call it and there",
    "start": "430259",
    "end": "435419"
  },
  {
    "text": "are a lot of new tools which actually make the the developer experience more pleasant and",
    "start": "435419",
    "end": "443639"
  },
  {
    "text": "we're getting to the stage where BPF development is something that more than",
    "start": "443639",
    "end": "449580"
  },
  {
    "text": "just people that are traditional kernel developers can can truly embark on there's no reason why end of day that's",
    "start": "449580",
    "end": "456240"
  },
  {
    "text": "a developer in this room can't think about starting to develop BPF programs as part of as part of their application",
    "start": "456240",
    "end": "462660"
  },
  {
    "text": "development process modern BPF is built on some foundations",
    "start": "462660",
    "end": "467759"
  },
  {
    "text": "which I'll go through in a moment um but just listing them off here BTF which is the BPF type format and uh",
    "start": "467759",
    "end": "476099"
  },
  {
    "text": "technology called Corey which stands for compile ones Run Anywhere um and so we're really getting to the",
    "start": "476099",
    "end": "482520"
  },
  {
    "text": "point where there's new Innovations happening to make the user experience better and",
    "start": "482520",
    "end": "489300"
  },
  {
    "text": "there's more richness and features being made available to BPF programs we're",
    "start": "489300",
    "end": "494340"
  },
  {
    "text": "getting to the point and you know in in the future as a roadmap where you'll be able to do dynamic memory allocation",
    "start": "494340",
    "end": "499860"
  },
  {
    "text": "within the kernel you'll be able to use at well I think as of today you're able to use spin locks and things like that",
    "start": "499860",
    "end": "505379"
  },
  {
    "text": "for doing a lot of protection around data structure modification in the kernel so the features available to you",
    "start": "505379",
    "end": "513120"
  },
  {
    "text": "are getting incredibly powerful",
    "start": "513120",
    "end": "516620"
  },
  {
    "start": "516000",
    "end": "516000"
  },
  {
    "text": "Okay so just from the top here modern bpfc as",
    "start": "518279",
    "end": "523560"
  },
  {
    "text": "I'm calling it um it's like restricted C but it's not hugely restricted anymore",
    "start": "523560",
    "end": "530339"
  },
  {
    "text": "um you get to do on bounded for Loops for example you get to call other functions in BPF",
    "start": "530339",
    "end": "536540"
  },
  {
    "text": "it's also got some interesting extensions which are enabled by the BPF",
    "start": "536540",
    "end": "542339"
  },
  {
    "text": "type format and Corey such as there are macros for relocating access to Kernel",
    "start": "542339",
    "end": "549480"
  },
  {
    "text": "data structures so you can be portable across more than a single kernel version",
    "start": "549480",
    "end": "554880"
  },
  {
    "text": "and um the next one down here is uh BTF which is the BPF type format and within",
    "start": "554880",
    "end": "562680"
  },
  {
    "text": "every kernel now going forwards from the Five Five Dot X Series on the um the 418",
    "start": "562680",
    "end": "568980"
  },
  {
    "text": "kernel that ships with rail 8 uh the type information of the kernel is",
    "start": "568980",
    "end": "574320"
  },
  {
    "text": "actually provided supplied by the kernel so you can use a command line tool such as BPF tool to interrogate the type",
    "start": "574320",
    "end": "581580"
  },
  {
    "text": "information of the running kernel and then when BPF programs adapt to the",
    "start": "581580",
    "end": "586920"
  },
  {
    "text": "running kernel so you've got complete portability across across kernel versions so early BPF programs you",
    "start": "586920",
    "end": "594540"
  },
  {
    "text": "couldn't do this you had to recompile your code for every single Target kernel version which really really limited the",
    "start": "594540",
    "end": "600779"
  },
  {
    "text": "portability and and deployability of BPF programs so modern BPF has stepped past",
    "start": "600779",
    "end": "607320"
  },
  {
    "text": "that and gives you true flexibility um the the technology Corey",
    "start": "607320",
    "end": "614040"
  },
  {
    "text": "um which is implemented in lib BPF in user space takes a BPF program and",
    "start": "614040",
    "end": "620339"
  },
  {
    "text": "relocates data structure accesses to the actual Fields within our within a kernel",
    "start": "620339",
    "end": "625920"
  },
  {
    "text": "data structure and I'll show you an example of that later which means that you don't need to worry",
    "start": "625920",
    "end": "632040"
  },
  {
    "text": "about mapping having the exact kernel headers for the kernel you're going to Target at deployment time gives you a",
    "start": "632040",
    "end": "639120"
  },
  {
    "text": "bit more flexibility and improves the the developer experience uh considerably",
    "start": "639120",
    "end": "644399"
  },
  {
    "text": "and the deployment and data operations experience as well and finally the last technology piece",
    "start": "644399",
    "end": "650100"
  },
  {
    "text": "that enables um modern BPF is uh is lib BPF which is",
    "start": "650100",
    "end": "655680"
  },
  {
    "text": "the the user space library that provides all of the uh program relocation program",
    "start": "655680",
    "end": "662640"
  },
  {
    "text": "deployment into the kernel um and the user space Library functions",
    "start": "662640",
    "end": "668459"
  },
  {
    "text": "for for accessing BPF maps and and other things about your BPF program",
    "start": "668459",
    "end": "675560"
  },
  {
    "text": "so these four things together give us much better ergonomics the improved type",
    "start": "677040",
    "end": "682800"
  },
  {
    "text": "safety the improved portability the reduce boilerplate and they give us",
    "start": "682800",
    "end": "688260"
  },
  {
    "text": "much much better uh developer tooling um so to the point that there's good",
    "start": "688260",
    "end": "694320"
  },
  {
    "text": "support for BPF programs in in C in golang in Rust",
    "start": "694320",
    "end": "699839"
  },
  {
    "text": "um and I'll talk a little bit about those when when I talk about uh tool Stacks that are that are available to",
    "start": "699839",
    "end": "705000"
  },
  {
    "text": "you um it's fair to say that there are still quite a few rough edges",
    "start": "705000",
    "end": "710399"
  },
  {
    "text": "um the biggest issue is uh verifier getting your program past the verifier is always a challenge and the kind of",
    "start": "710399",
    "end": "718140"
  },
  {
    "text": "error messages you get from the verifier are also a challenge so there's a lot there's a lot can still be",
    "start": "718140",
    "end": "724800"
  },
  {
    "text": "developed and improved from a developer ux perspective in getting programs that",
    "start": "724800",
    "end": "729839"
  },
  {
    "text": "give you feedback on why there are failing verifier checks and why they can't install into the kernel",
    "start": "729839",
    "end": "737600"
  },
  {
    "start": "738000",
    "end": "738000"
  },
  {
    "text": "okay so just a little bit about um API stability and what uh what what you",
    "start": "738660",
    "end": "745740"
  },
  {
    "text": "want to try and aim for from a BPF program perspective for anybody that's not if not familiar",
    "start": "745740",
    "end": "751440"
  },
  {
    "text": "with kernel development and maybe not familiar with the term the kernel U API um it might come as a surprise just how",
    "start": "751440",
    "end": "759000"
  },
  {
    "text": "um how how things change inside the kernel",
    "start": "759000",
    "end": "764279"
  },
  {
    "text": "um and yet outside the kernel everything is uh is fairly static so from a from a",
    "start": "764279",
    "end": "770339"
  },
  {
    "text": "kubernetes uh background where you go through an alpha and beta cycle before",
    "start": "770339",
    "end": "776160"
  },
  {
    "text": "making version 1.0 crds or or resources",
    "start": "776160",
    "end": "781260"
  },
  {
    "text": "um and then deprecating the alphas and betas and so on the the kernel model is a bit different the kernel external apis",
    "start": "781260",
    "end": "788700"
  },
  {
    "text": "once they've been published once they stay the same they never get deprecated they very very rarely ever get uh get",
    "start": "788700",
    "end": "796680"
  },
  {
    "text": "get uh marked as far end of life um they they're they're maintained as is",
    "start": "796680",
    "end": "803160"
  },
  {
    "text": "forever internally Everything Changes well not all the time but you know a",
    "start": "803160",
    "end": "808620"
  },
  {
    "text": "developer a kernel developer feels free to change an internal apis at will so if you're writing a BPF program that wants",
    "start": "808620",
    "end": "815519"
  },
  {
    "text": "to access the kernel internally then there's shifting apis that you need to be aware of but your external API is",
    "start": "815519",
    "end": "823500"
  },
  {
    "text": "going to be the same uh how how the the user space accesses your programs and",
    "start": "823500",
    "end": "829620"
  },
  {
    "text": "accesses the kernel is unchanging so what this means is that there's a set",
    "start": "829620",
    "end": "836220"
  },
  {
    "text": "of things within the kernel that you probably want to rely on from a BPF program perspective because they are",
    "start": "836220",
    "end": "843060"
  },
  {
    "text": "part of the the user API that you can guarantee are not going to change",
    "start": "843060",
    "end": "848760"
  },
  {
    "text": "but new innovation within the kernel is going to happen with these things that are called kfunks and kernel developers",
    "start": "848760",
    "end": "854700"
  },
  {
    "text": "have said we're not making these part of you API these are going to be part of the unstable kernel interface",
    "start": "854700",
    "end": "861300"
  },
  {
    "text": "which seems a bit of a challenge because if they want us developers to write BPF",
    "start": "861300",
    "end": "866639"
  },
  {
    "text": "programs that use these key funks but they're not giving any guarantees about their stability then we're basically",
    "start": "866639",
    "end": "873959"
  },
  {
    "text": "being told use an unstable interface which none of us really want to do so it",
    "start": "873959",
    "end": "879360"
  },
  {
    "text": "will be an interesting journey to see how this unfolds as kernel developers",
    "start": "879360",
    "end": "884399"
  },
  {
    "text": "say kfunks are unstable and the consumer Community wants them to be stable but",
    "start": "884399",
    "end": "889440"
  },
  {
    "text": "they're basically saying they will make the best effort to maintain things and if you shout loud enough and you're using things then they will be generally",
    "start": "889440",
    "end": "896459"
  },
  {
    "text": "kept stable for you um k-funks are basically the way into",
    "start": "896459",
    "end": "903240"
  },
  {
    "text": "the kernel to access things to modify things uh and and get features so for",
    "start": "903240",
    "end": "908579"
  },
  {
    "text": "example the most recent features that were made available to BPF programs as kfunks is a connection tracking in in",
    "start": "908579",
    "end": "915660"
  },
  {
    "text": "TCP connection tracking so if you want to write networking features in BPF",
    "start": "915660",
    "end": "921480"
  },
  {
    "text": "programs then you can use the underlying contract subsystem from within the kernel you don't have to write your own",
    "start": "921480",
    "end": "926699"
  },
  {
    "text": "in BPF code which is clearly a benefit",
    "start": "926699",
    "end": "932180"
  },
  {
    "text": "Okay so I'm going to step forward into um the architecture of a running BPF",
    "start": "932519",
    "end": "939839"
  },
  {
    "start": "937000",
    "end": "937000"
  },
  {
    "text": "program now this is looking at things from the perspective of our C software stack where we're using lib BPF and more",
    "start": "939839",
    "end": "948600"
  },
  {
    "text": "specifically we're using a thing called BPF skeleton and this is a set of tooling that is",
    "start": "948600",
    "end": "956160"
  },
  {
    "text": "built around lib BPF and BPF tool on the command line where I can write some BPF",
    "start": "956160",
    "end": "962579"
  },
  {
    "text": "code and then I can ask BPF tool to generate me a skeleton C program and the bit skeleton C program has a set of",
    "start": "962579",
    "end": "969420"
  },
  {
    "text": "utility functions to load my BPF program into the kernel to access any maps that",
    "start": "969420",
    "end": "974940"
  },
  {
    "text": "my BPF program wants to use so I essentially get the the skeleton of the user space",
    "start": "974940",
    "end": "980399"
  },
  {
    "text": "program I need to write with the BPF program embedded within the user space program so the talk with the diagram",
    "start": "980399",
    "end": "986699"
  },
  {
    "text": "that's what you see you see a user space application that is linked with lib BPF that has a BPF program embedded inside",
    "start": "986699",
    "end": "993959"
  },
  {
    "text": "it app1vpf.object is the BPF program when my app runs it uses lib BPF to",
    "start": "993959",
    "end": "1002899"
  },
  {
    "text": "install the app into the kernel and that's when the BPF lib BPF Library uses",
    "start": "1002899",
    "end": "1009079"
  },
  {
    "text": "the kernel type information to relocate my program to match the data structure",
    "start": "1009079",
    "end": "1015320"
  },
  {
    "text": "fields that exist in the running kernel so I can run I can install the same",
    "start": "1015320",
    "end": "1020779"
  },
  {
    "text": "program on a 5.2 kernel or a 5.14 kernel or a 6.3 kernel and the lib BPF will",
    "start": "1020779",
    "end": "1028220"
  },
  {
    "text": "relocate my program to whatever might have changed in the data structures within the kernel",
    "start": "1028220",
    "end": "1034699"
  },
  {
    "text": "the BPF subsystem in the kernel provides various functions including",
    "start": "1034699",
    "end": "1040819"
  },
  {
    "text": "maps and these are things like hash Maps array Maps um Bloom filters uh least recently used",
    "start": "1040819",
    "end": "1048919"
  },
  {
    "text": "maps and things like that my BPF program gets access to them and the user space application gets access to them via lib",
    "start": "1048919",
    "end": "1055820"
  },
  {
    "text": "BPF so my kernel program can for example in this",
    "start": "1055820",
    "end": "1061820"
  },
  {
    "text": "example here I've got a network data path at the bottom my program is attached to the TC Ingress hook in the",
    "start": "1061820",
    "end": "1069559"
  },
  {
    "text": "network data path and I might just be doing some metrics counting in my program and what my program",
    "start": "1069559",
    "end": "1075100"
  },
  {
    "text": "registered at the TC hook does is just as it sees packets it can do some packet",
    "start": "1075100",
    "end": "1080960"
  },
  {
    "text": "header inspection decide what types of packets they are and then right into these Maps I've counted another packet",
    "start": "1080960",
    "end": "1087080"
  },
  {
    "text": "of a certain uh say it's a TCP packet destined for a specific port or something like that and then the user",
    "start": "1087080",
    "end": "1093679"
  },
  {
    "text": "space application can read the metrics from these maps and report it to",
    "start": "1093679",
    "end": "1098720"
  },
  {
    "text": "Prometheus or wherever your reporting application is in user space um so that that's the kind of like the",
    "start": "1098720",
    "end": "1105559"
  },
  {
    "text": "simplest example of a BPF program you could write if you're doing more packet",
    "start": "1105559",
    "end": "1111320"
  },
  {
    "text": "processing then specifically in the networking data path hooks like the TC hoop you get access to the full packet",
    "start": "1111320",
    "end": "1118340"
  },
  {
    "text": "and you can rewrite the packet on its way through so you can change packet headers you can change packet contents",
    "start": "1118340",
    "end": "1123620"
  },
  {
    "text": "you can encapsulate you can decapsulate so you can actually build pieces of an",
    "start": "1123620",
    "end": "1129140"
  },
  {
    "text": "entire networking stack now it's important to say that the BPF",
    "start": "1129140",
    "end": "1134360"
  },
  {
    "text": "program is run to completion event driven so the the hooks that I was",
    "start": "1134360",
    "end": "1140120"
  },
  {
    "text": "describing on the previous diagram the TC hooks or whatever the trace Point hooks",
    "start": "1140120",
    "end": "1145460"
  },
  {
    "text": "um trigger programs to run as if they're event driven so if you want to build a more complex application likely you're",
    "start": "1145460",
    "end": "1151640"
  },
  {
    "text": "going to be triggering event-driven pieces of BPF code at multiple points",
    "start": "1151640",
    "end": "1157220"
  },
  {
    "text": "and the state of where the application is running is maintained in BPF Maps so",
    "start": "1157220",
    "end": "1162799"
  },
  {
    "text": "you may have multiple pieces of BPF code and different hooks all reading and routing from the same shared Maps which",
    "start": "1162799",
    "end": "1169580"
  },
  {
    "text": "is their shared state and the BPI programs of course get access to other kernel subsystems via",
    "start": "1169580",
    "end": "1177200"
  },
  {
    "text": "either helpers that existed or k-funks that those subsystems expose so that gives you a kind of",
    "start": "1177200",
    "end": "1183500"
  },
  {
    "text": "fairly large overview of the architecture of our running BPF program",
    "start": "1183500",
    "end": "1191260"
  },
  {
    "start": "1191000",
    "end": "1191000"
  },
  {
    "text": "so from a team development model perspective you want to enable more than one person",
    "start": "1191660",
    "end": "1197900"
  },
  {
    "text": "to work on on your BPF program and",
    "start": "1197900",
    "end": "1202940"
  },
  {
    "text": "you need to think about the kernel versions and uh",
    "start": "1202940",
    "end": "1208000"
  },
  {
    "text": "supportability that you want to support um I've got a diagram a little later on",
    "start": "1208000",
    "end": "1213320"
  },
  {
    "text": "about the kind of challenges that you may have with kernel version support and how you might want to uh Baseline and",
    "start": "1213320",
    "end": "1221480"
  },
  {
    "text": "how you might want to tackle portability uh challenges that that come come along",
    "start": "1221480",
    "end": "1226940"
  },
  {
    "text": "but um it's important to point out that containerization does not isolate you",
    "start": "1226940",
    "end": "1233240"
  },
  {
    "text": "from the kernel version so you're going to be using bare metal or or a VM to",
    "start": "1233240",
    "end": "1239059"
  },
  {
    "text": "provide you with the kernel version against which you want to develop um so if you've got if you've got teams",
    "start": "1239059",
    "end": "1246500"
  },
  {
    "text": "with different Dev systems then you need to Baseline across those um you need to decide what your minimum",
    "start": "1246500",
    "end": "1252980"
  },
  {
    "text": "kernel version you want to support is you need to think about um what features that you need from",
    "start": "1252980",
    "end": "1259880"
  },
  {
    "text": "those kernels and verify that the BPF data structures and all of the other things are available in the kernel",
    "start": "1259880",
    "end": "1265880"
  },
  {
    "text": "releases you want to support um so yeah eliminating Challenge",
    "start": "1265880",
    "end": "1271120"
  },
  {
    "text": "dependencies on specific Dev versions is key here",
    "start": "1271120",
    "end": "1276460"
  },
  {
    "text": "okay so just going through some more kind of specific uh recommendations for",
    "start": "1276860",
    "end": "1282140"
  },
  {
    "text": "uh for for BPF projects um firstly like I'm saying plan for Target",
    "start": "1282140",
    "end": "1288740"
  },
  {
    "start": "1286000",
    "end": "1286000"
  },
  {
    "text": "platform versions so the challenge here is that BPF development is uh as has",
    "start": "1288740",
    "end": "1293900"
  },
  {
    "text": "been a moving Target for the last few several years so the types of uh Maps",
    "start": "1293900",
    "end": "1299840"
  },
  {
    "text": "you have the types of uh BPF hooks you have and the types of uh support",
    "start": "1299840",
    "end": "1304880"
  },
  {
    "text": "functions you have very quite quite widely across kernel releases and of",
    "start": "1304880",
    "end": "1309919"
  },
  {
    "text": "course as as development goes on that this is not going to stabilize anytime",
    "start": "1309919",
    "end": "1315320"
  },
  {
    "text": "soon so if for example you want to you want to support relate and you want to",
    "start": "1315320",
    "end": "1320900"
  },
  {
    "text": "support uh you know Amazon Linux for AWS or whatever and you need to support",
    "start": "1320900",
    "end": "1326000"
  },
  {
    "text": "um multiple architectures uh and you you need to think about well how",
    "start": "1326000",
    "end": "1332600"
  },
  {
    "text": "what what's my base release so is it a 418 kernel which has had lots of things",
    "start": "1332600",
    "end": "1337760"
  },
  {
    "text": "back ported from the 5.x kernels uh can I Baseline on 514 you know those are the",
    "start": "1337760",
    "end": "1343820"
  },
  {
    "text": "kind of questions you need to ask yourself and if you need to support a very broad range of Linux releases then",
    "start": "1343820",
    "end": "1349940"
  },
  {
    "text": "you've got to be ready for features not being present or the the modern features",
    "start": "1349940",
    "end": "1354980"
  },
  {
    "text": "not being present in all the kernel versions that you want to be able to support and I'll we'll touch a little bit about",
    "start": "1354980",
    "end": "1360620"
  },
  {
    "text": "that a little a little later on Okay so",
    "start": "1360620",
    "end": "1365720"
  },
  {
    "start": "1365000",
    "end": "1365000"
  },
  {
    "text": "programming stack perspective you've actually got quite a lot of choice these",
    "start": "1365720",
    "end": "1370940"
  },
  {
    "text": "days for a long time all you could do was program BPF in C",
    "start": "1370940",
    "end": "1376280"
  },
  {
    "text": "um and program your user space and see it's fair to say that with lib BPF the",
    "start": "1376280",
    "end": "1381679"
  },
  {
    "text": "richest set of features is still probably provided for C but lib BPF has",
    "start": "1381679",
    "end": "1388039"
  },
  {
    "text": "bindings to to go with them with load BPF go and live BPF RS for rust but then",
    "start": "1388039",
    "end": "1395419"
  },
  {
    "text": "there are also native platform libraries like psyllium ebpf which has maybe not quite the full feature set that is",
    "start": "1395419",
    "end": "1401720"
  },
  {
    "text": "provided by lib BPF but sufficient for for many kubernetes applications and on",
    "start": "1401720",
    "end": "1407539"
  },
  {
    "text": "the rust side there's a a rust native Library called Aya and Aya lets you",
    "start": "1407539",
    "end": "1414320"
  },
  {
    "text": "write user space and kernel space code both in Rust and makes it very easy to",
    "start": "1414320",
    "end": "1419539"
  },
  {
    "text": "write an application that passes data between kernel space BPF program and and user space so for for some developers IO",
    "start": "1419539",
    "end": "1427820"
  },
  {
    "text": "might be an excellent choice but for uh for a lot of things you may",
    "start": "1427820",
    "end": "1433400"
  },
  {
    "text": "have no choice but to use lib BPF especially if you're using some of the more modern Hooks and some of the more",
    "start": "1433400",
    "end": "1439640"
  },
  {
    "text": "modern features that maybe haven't made it into the uh the native libraries",
    "start": "1439640",
    "end": "1445820"
  },
  {
    "text": "um from a from a kubernetes perspective I imagine a lot of people will want to use psyllium ebpf even if it only has a",
    "start": "1445820",
    "end": "1452780"
  },
  {
    "text": "subset of the features but of course you could write um you could write a helper",
    "start": "1452780",
    "end": "1459100"
  },
  {
    "text": "programs alongside your go code that are written in C and you are written using",
    "start": "1459100",
    "end": "1464840"
  },
  {
    "text": "lib BPF go it's so that you can get the full feature set of the BPF library for",
    "start": "1464840",
    "end": "1469880"
  },
  {
    "text": "program loading and there are other Alternatives coming coming along as well which we'll talk about a little later",
    "start": "1469880",
    "end": "1475710"
  },
  {
    "text": "[Applause] okay so the the next thing is how do you",
    "start": "1475710",
    "end": "1481400"
  },
  {
    "start": "1479000",
    "end": "1479000"
  },
  {
    "text": "use portable type definitions so you may have heard people talk about um using a BPF tool to export VM Linux",
    "start": "1481400",
    "end": "1489380"
  },
  {
    "text": "from the kernel and then doing everything developing against VM Linux but of course that means that you're",
    "start": "1489380",
    "end": "1495020"
  },
  {
    "text": "exposing your application to the entire kernel internal API surface which is an",
    "start": "1495020",
    "end": "1501740"
  },
  {
    "text": "unstable thing so you you could end up accidentally using things you don't plan to use but also it's fairly unwieldy",
    "start": "1501740",
    "end": "1508159"
  },
  {
    "text": "it's like several megabytes of header file so instead with Corey you get to write",
    "start": "1508159",
    "end": "1514940"
  },
  {
    "text": "your own version of Kernel data structures with only the fields you need in them and the example here is in my",
    "start": "1514940",
    "end": "1521179"
  },
  {
    "text": "program I want to access the struct SK buff to get at the uh the um the packet",
    "start": "1521179",
    "end": "1527299"
  },
  {
    "text": "contents from a TC hook and um the only two Fields I need from the",
    "start": "1527299",
    "end": "1532760"
  },
  {
    "text": "struct are data and Lan so I write a version of struct Escape buff that just contains data online and when I install",
    "start": "1532760",
    "end": "1538940"
  },
  {
    "text": "my BPF program the lib BPF relocates those two field offsets to match into",
    "start": "1538940",
    "end": "1544700"
  },
  {
    "text": "the actual struct SK buff which is huge and the two fields are separated quite",
    "start": "1544700",
    "end": "1551419"
  },
  {
    "text": "significantly in the data structure and I don't need to care when I access my code I just use the right accessors and",
    "start": "1551419",
    "end": "1559159"
  },
  {
    "text": "everything works just fine so I mentioned if you if you have to",
    "start": "1559159",
    "end": "1565400"
  },
  {
    "start": "1561000",
    "end": "1561000"
  },
  {
    "text": "support multiple current versions and the kernels don't always have the features you want then there's a set of",
    "start": "1565400",
    "end": "1570500"
  },
  {
    "text": "tools available to you to do a kernel version program and feature probing and you can do feature program probing all",
    "start": "1570500",
    "end": "1577279"
  },
  {
    "text": "the way down to the individual struct field level if you need to but the two examples I've given here are",
    "start": "1577279",
    "end": "1582679"
  },
  {
    "text": "checking the kernel version from within your BPF program and checking whether a feature such as a lightweight tunnels is",
    "start": "1582679",
    "end": "1590900"
  },
  {
    "text": "available from within BPF as well and so you can then start to enable features to",
    "start": "1590900",
    "end": "1596000"
  },
  {
    "text": "enrich your program on more modern kernels but then fall back to behaviors that maybe don't have those modern",
    "start": "1596000",
    "end": "1601279"
  },
  {
    "text": "features on older kernels",
    "start": "1601279",
    "end": "1604779"
  },
  {
    "start": "1606000",
    "end": "1606000"
  },
  {
    "text": "and then from from a kubernetes perspective specifically there are a number of",
    "start": "1607340",
    "end": "1613279"
  },
  {
    "text": "operational challenges first off is that BPI programs can only be installed if you've got cat BPF and sometimes you",
    "start": "1613279",
    "end": "1620299"
  },
  {
    "text": "need several other elevated privileges as well and you don't really want to be giving too many containers full",
    "start": "1620299",
    "end": "1626120"
  },
  {
    "text": "privileged access because that's right kind of defeating your your security goals in your in your kubernetes cluster",
    "start": "1626120",
    "end": "1633380"
  },
  {
    "text": "it's also difficult to handle multiple BPF programs um there it's been mentioned in previous",
    "start": "1633380",
    "end": "1639520"
  },
  {
    "text": "conferences that for example psyllium getting broken by datadog or datadog",
    "start": "1639520",
    "end": "1646400"
  },
  {
    "text": "getting broken by psyllium or whatever because they're competing for the same same hook points within the kernel",
    "start": "1646400",
    "end": "1652580"
  },
  {
    "text": "and so that's a challenge how to handle multiple BPF programs for different application purposes all running on top",
    "start": "1652580",
    "end": "1658940"
  },
  {
    "text": "of the same kernel and then there's just visibility and",
    "start": "1658940",
    "end": "1664100"
  },
  {
    "text": "debugging related problems where you don't know why something's working or not working the way you expect because",
    "start": "1664100",
    "end": "1669559"
  },
  {
    "text": "you've got no visibility of what programs may be running within the kernel below your uh but below your",
    "start": "1669559",
    "end": "1674860"
  },
  {
    "text": "kubernetes deployment so I think that this is where you can",
    "start": "1674860",
    "end": "1681559"
  },
  {
    "text": "consider new BPF tools that are getting developed there's a tool called bpfd that is uh being developed by the",
    "start": "1681559",
    "end": "1687919"
  },
  {
    "text": "emerging Tech Team at red hat which aims to tackle some of these problems and the way bpfd approaches this is to",
    "start": "1687919",
    "end": "1695960"
  },
  {
    "text": "say well we're going to be a system level demon that installs BPF programs into the kernel on your behalf and it's",
    "start": "1695960",
    "end": "1702140"
  },
  {
    "text": "going to have a grpc API so that you can add you you can provide you know an",
    "start": "1702140",
    "end": "1707600"
  },
  {
    "text": "authenticated API endpoint uh with which your your kubernetes application can ask for an",
    "start": "1707600",
    "end": "1714980"
  },
  {
    "text": "application to be installed or can interact with the BPF Daemon to query",
    "start": "1714980",
    "end": "1720140"
  },
  {
    "text": "data from maps from your BPF program and the goal is for bpfd is also to",
    "start": "1720140",
    "end": "1727460"
  },
  {
    "text": "integrate well into kubernetes and use the kubernetes operational model as",
    "start": "1727460",
    "end": "1733159"
  },
  {
    "start": "1733000",
    "end": "1733000"
  },
  {
    "text": "you'd expect so the first thing here is um packaging up BPF programs themselves",
    "start": "1733159",
    "end": "1738980"
  },
  {
    "text": "within oci images so that you can use you can install BPI programs into",
    "start": "1738980",
    "end": "1745000"
  },
  {
    "text": "Docker Registries or container image Registries and you get the uh",
    "start": "1745000",
    "end": "1751840"
  },
  {
    "text": "the versioning that comes with that you get the Vindication and so on that you'd",
    "start": "1751840",
    "end": "1757340"
  },
  {
    "text": "expect or of Registries for download and then declaratively seeing what programs",
    "start": "1757340",
    "end": "1763460"
  },
  {
    "text": "you want installed in in your kubernetes cluster with um node selectors and attach point",
    "start": "1763460",
    "end": "1770120"
  },
  {
    "text": "selectors and things like that so you you no longer need to programmatically have your programs loaded which is great",
    "start": "1770120",
    "end": "1776600"
  },
  {
    "text": "for observability programs and could be incredibly useful for uh for infrastructure programs such as",
    "start": "1776600",
    "end": "1782179"
  },
  {
    "text": "networking programs as well and how this looks from an operational perspective",
    "start": "1782179",
    "end": "1787520"
  },
  {
    "text": "your applications don't need elevated privileges the only thing on each node in your cluster that",
    "start": "1787520",
    "end": "1794240"
  },
  {
    "text": "needs elevated privileges would be the bpfd and bpfd is the only thing that would",
    "start": "1794240",
    "end": "1799580"
  },
  {
    "text": "need to make CIS calls into the kernel and would need to access maps for which",
    "start": "1799580",
    "end": "1804620"
  },
  {
    "text": "it might need elevated privileges and then all of the user space applications can interact with the the",
    "start": "1804620",
    "end": "1811039"
  },
  {
    "text": "demon either declaratively uh using the BPF operator in in kubernetes or using",
    "start": "1811039",
    "end": "1818720"
  },
  {
    "text": "the grpc apis provided by bpfd um so this is uh it in development uh",
    "start": "1818720",
    "end": "1827000"
  },
  {
    "text": "project at red hat which I think um would like more people to get involved with and uh I think it's going to uh",
    "start": "1827000",
    "end": "1834020"
  },
  {
    "text": "really um enable more use cases for BPF in in kubernetes clusters",
    "start": "1834020",
    "end": "1841279"
  },
  {
    "text": "so finally just a quick recap on some of the things I've said in terms of best practices so your goal when you're",
    "start": "1841279",
    "end": "1849080"
  },
  {
    "start": "1842000",
    "end": "1842000"
  },
  {
    "text": "writing BPF programs is to um have a clean stable interface between",
    "start": "1849080",
    "end": "1854299"
  },
  {
    "text": "your BPI program and user space and have a stable interface between your BPF",
    "start": "1854299",
    "end": "1859399"
  },
  {
    "text": "program and the kernel as well and so interfacing with the kernel you're using the Corey technology and",
    "start": "1859399",
    "end": "1866539"
  },
  {
    "text": "you're writing minimal API surface against the kernel which the current which",
    "start": "1866539",
    "end": "1871940"
  },
  {
    "text": "gets relocated to the running kernel and its data fields when you install",
    "start": "1871940",
    "end": "1876980"
  },
  {
    "text": "you use macros within your BPF program to ensure that the kernel knows when",
    "start": "1876980",
    "end": "1884480"
  },
  {
    "text": "you're making API accesses that need relocated and then with user space the interesting",
    "start": "1884480",
    "end": "1890360"
  },
  {
    "text": "challenge with BPF program is that you want to share some data structures between your kernel and user space so",
    "start": "1890360",
    "end": "1896720"
  },
  {
    "text": "you need to be very very careful that you use data types that that can that",
    "start": "1896720",
    "end": "1903020"
  },
  {
    "text": "that you have header files for in user space and that have meaning in the kernel and so typically that means that",
    "start": "1903020",
    "end": "1910100"
  },
  {
    "text": "you can't use you must not use kernel internal types when you're writing something that's to be shared with user",
    "start": "1910100",
    "end": "1916279"
  },
  {
    "text": "space so you may be familiar with some kernel internal types such as u16 u32",
    "start": "1916279",
    "end": "1922220"
  },
  {
    "text": "well there are versions of those that are available for uh for sharing with user space that are in the system",
    "start": "1922220",
    "end": "1928460"
  },
  {
    "text": "headers typically when you've got the the kernel headers installed on your platform",
    "start": "1928460",
    "end": "1934220"
  },
  {
    "text": "and between within your own BPF program you've got strongly typed data data sets",
    "start": "1934220",
    "end": "1940700"
  },
  {
    "text": "to work with as well now it's fair to say there's still a lot of tribal knowledge uh in uh in BPF",
    "start": "1940700",
    "end": "1948640"
  },
  {
    "text": "development but there are a number of good links um and uh when you download the",
    "start": "1948640",
    "end": "1954980"
  },
  {
    "start": "1950000",
    "end": "1950000"
  },
  {
    "text": "presentation after after the talk um you'll you'll be able to access all of these links to to the documentation",
    "start": "1954980",
    "end": "1961340"
  },
  {
    "text": "that's available there's some tutorial documentation available in uh in ebpf",
    "start": "1961340",
    "end": "1966860"
  },
  {
    "text": "Foundation the kernel documentation is steadily getting more complete and in fact a good",
    "start": "1966860",
    "end": "1973340"
  },
  {
    "text": "call to action is for anybody that is familiar with kernel development um you can you can contribute to",
    "start": "1973340",
    "end": "1979640"
  },
  {
    "text": "documenting BPF program types there are good man Pages for BPF helpers",
    "start": "1979640",
    "end": "1985820"
  },
  {
    "text": "to my knowledge there are no man Pages for any of the BPF K funks yet",
    "start": "1985820",
    "end": "1991279"
  },
  {
    "text": "um and then there are good Library docs for all of the user space libraries that you might want to use lib BPF libxdp",
    "start": "1991279",
    "end": "1997940"
  },
  {
    "text": "Aya and psyllium eppf and then there are reference blogs for some of the stuff I've talked about in",
    "start": "1997940",
    "end": "2004840"
  },
  {
    "text": "the presentation today such as BPF Corey the BPF core reference guide and then",
    "start": "2004840",
    "end": "2009940"
  },
  {
    "text": "there are good examples to work with such as lib BPF bootstrap and uh and the uh practical BPF examples repo that's",
    "start": "2009940",
    "end": "2017620"
  },
  {
    "text": "provided by the XDP project but like I said there's still a lot of tribal knowledge so anybody that is an",
    "start": "2017620",
    "end": "2024700"
  },
  {
    "text": "expert please step up and help fill the gaps in the tribal knowledge and uh make BPF on-ramp easier for everyone thank",
    "start": "2024700",
    "end": "2032559"
  },
  {
    "text": "you [Applause]",
    "start": "2032559",
    "end": "2042109"
  }
]