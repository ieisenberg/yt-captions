[
  {
    "text": "great so let's talk",
    "start": "480",
    "end": "2959"
  },
  {
    "text": "about um Tracy tetragon and Falco how",
    "start": "2959",
    "end": "7799"
  },
  {
    "text": "are they",
    "start": "7799",
    "end": "9000"
  },
  {
    "text": "different which one is",
    "start": "9000",
    "end": "11200"
  },
  {
    "text": "better bad",
    "start": "11200",
    "end": "13040"
  },
  {
    "text": "news neither it depends on your use",
    "start": "13040",
    "end": "18039"
  },
  {
    "text": "cases let's see what's unique about",
    "start": "18279",
    "end": "21320"
  },
  {
    "text": "H2 Falco is an intrusion detection",
    "start": "21320",
    "end": "24359"
  },
  {
    "text": "system it has an advanced and",
    "start": "24359",
    "end": "27039"
  },
  {
    "text": "configurable um detection rule engine",
    "start": "27039",
    "end": "30199"
  },
  {
    "text": "and it has lots of predefined rules",
    "start": "30199",
    "end": "32960"
  },
  {
    "text": "which is exactly what you would expect",
    "start": "32960",
    "end": "35239"
  },
  {
    "text": "from an IDs Tracy collects tons of",
    "start": "35239",
    "end": "39120"
  },
  {
    "text": "different events tons more than anybody",
    "start": "39120",
    "end": "41920"
  },
  {
    "text": "else and trac's unique capability is an",
    "start": "41920",
    "end": "46039"
  },
  {
    "text": "its data collection for forensics if you",
    "start": "46039",
    "end": "48440"
  },
  {
    "text": "want to collect memory network files evf",
    "start": "48440",
    "end": "51399"
  },
  {
    "text": "code it does that for",
    "start": "51399",
    "end": "54160"
  },
  {
    "text": "you tetragon is a low-level programmable",
    "start": "54160",
    "end": "58920"
  },
  {
    "text": "toolkit so you get to",
    "start": "58920",
    "end": "61760"
  },
  {
    "text": "decide what you want to get from the",
    "start": "61760",
    "end": "63920"
  },
  {
    "text": "kernel it's super powerful it also has",
    "start": "63920",
    "end": "67159"
  },
  {
    "text": "kernel level actions that you don't get",
    "start": "67159",
    "end": "70040"
  },
  {
    "text": "with the other",
    "start": "70040",
    "end": "72600"
  },
  {
    "text": "tools so what kind of events do we get",
    "start": "72880",
    "end": "76600"
  },
  {
    "text": "for Falco it's mostly cisal events and",
    "start": "76600",
    "end": "80320"
  },
  {
    "text": "it has others but it doesn't matter it",
    "start": "80320",
    "end": "82200"
  },
  {
    "text": "has Trace tracing Trace Point events but",
    "start": "82200",
    "end": "85040"
  },
  {
    "text": "they're not the same as the uh ebpf",
    "start": "85040",
    "end": "87520"
  },
  {
    "text": "Trace Point events you can ignore those",
    "start": "87520",
    "end": "90360"
  },
  {
    "text": "Tracy has many different types of events",
    "start": "90360",
    "end": "93159"
  },
  {
    "text": "csol events Network events uh security",
    "start": "93159",
    "end": "97000"
  },
  {
    "text": "events LSM events container events Etc",
    "start": "97000",
    "end": "100920"
  },
  {
    "text": "though the LSM events are not really",
    "start": "100920",
    "end": "104799"
  },
  {
    "text": "ebpf hook based LSM events they use K",
    "start": "104799",
    "end": "107840"
  },
  {
    "text": "probes for",
    "start": "107840",
    "end": "109360"
  },
  {
    "text": "that tetron has dedicated process",
    "start": "109360",
    "end": "113719"
  },
  {
    "text": "events um and by enabled by default and",
    "start": "113719",
    "end": "117000"
  },
  {
    "text": "it also has a bunch of other events for",
    "start": "117000",
    "end": "119719"
  },
  {
    "text": "the",
    "start": "119719",
    "end": "120799"
  },
  {
    "text": "uh tracing policy program Trace Point K",
    "start": "120799",
    "end": "123840"
  },
  {
    "text": "probe and U probe events these are the",
    "start": "123840",
    "end": "125880"
  },
  {
    "text": "kind of uh event types you can program",
    "start": "125880",
    "end": "128560"
  },
  {
    "text": "you define the yaml policy and you",
    "start": "128560",
    "end": "130560"
  },
  {
    "text": "select the uh the hooks that you want to",
    "start": "130560",
    "end": "135200"
  },
  {
    "text": "um",
    "start": "135200",
    "end": "137760"
  },
  {
    "text": "install all three tools rely on BTF and",
    "start": "137760",
    "end": "143080"
  },
  {
    "text": "I'm pretty sure everybody knows what",
    "start": "143080",
    "end": "145000"
  },
  {
    "text": "that is and uh what it has to do with uh",
    "start": "145000",
    "end": "148640"
  },
  {
    "text": "portable abpf program programs and um",
    "start": "148640",
    "end": "153160"
  },
  {
    "text": "there's a way to make it work with um um",
    "start": "153160",
    "end": "157440"
  },
  {
    "text": "4.x kernels but usually if you start",
    "start": "157440",
    "end": "160480"
  },
  {
    "text": "with kernels 5.4 which you get with Y to",
    "start": "160480",
    "end": "164720"
  },
  {
    "text": "204 you're you'll be good with Tracy and",
    "start": "164720",
    "end": "168200"
  },
  {
    "text": "tetragon um and for Falco but its modern",
    "start": "168200",
    "end": "172440"
  },
  {
    "text": "ebpf driver it has two it has the Legacy",
    "start": "172440",
    "end": "177040"
  },
  {
    "text": "ebpf um probe and it has a modern probe",
    "start": "177040",
    "end": "181000"
  },
  {
    "text": "and the modern probe needs kernel 5.8",
    "start": "181000",
    "end": "183840"
  },
  {
    "text": "because it uses ring buffers which are",
    "start": "183840",
    "end": "186640"
  },
  {
    "text": "awesome um and um uh but it's stuck with",
    "start": "186640",
    "end": "190799"
  },
  {
    "text": "that uh version of um the",
    "start": "190799",
    "end": "195360"
  },
  {
    "text": "kernel so how do these tools use",
    "start": "195760",
    "end": "200120"
  },
  {
    "text": "ebpf Falco has a a modern ebpf probe",
    "start": "200120",
    "end": "203840"
  },
  {
    "text": "like I mentioned it also has a legacy",
    "start": "203840",
    "end": "205599"
  },
  {
    "text": "probe and the modern probe uses new BTF",
    "start": "205599",
    "end": "209159"
  },
  {
    "text": "enabled tracing uh ebpf programs um uh",
    "start": "209159",
    "end": "214640"
  },
  {
    "text": "and uh instead of traditional raw Trace",
    "start": "214640",
    "end": "217239"
  },
  {
    "text": "points and the great thing about those",
    "start": "217239",
    "end": "219959"
  },
  {
    "text": "is that uh you get direct memory access",
    "start": "219959",
    "end": "222879"
  },
  {
    "text": "to the data structures you don't need to",
    "start": "222879",
    "end": "225040"
  },
  {
    "text": "use uh BPF",
    "start": "225040",
    "end": "227080"
  },
  {
    "text": "helpers uh so you get faster code um and",
    "start": "227080",
    "end": "231360"
  },
  {
    "text": "uh more clean code more maintainable",
    "start": "231360",
    "end": "233920"
  },
  {
    "text": "code uh and like I mentioned Falco's",
    "start": "233920",
    "end": "237040"
  },
  {
    "text": "modern abpf probe uses ring buffers",
    "start": "237040",
    "end": "240640"
  },
  {
    "text": "uh to take advantage of the uh",
    "start": "240640",
    "end": "242920"
  },
  {
    "text": "performance and memory utilization",
    "start": "242920",
    "end": "246640"
  },
  {
    "text": "improvements uh Tracy has more ebpf",
    "start": "246640",
    "end": "249599"
  },
  {
    "text": "hooks than the other two tools uh",
    "start": "249599",
    "end": "252560"
  },
  {
    "text": "predefined hooks uh and it also has the",
    "start": "252560",
    "end": "256000"
  },
  {
    "text": "most",
    "start": "256000",
    "end": "257000"
  },
  {
    "text": "straightforward um uh ebpf codebase uh",
    "start": "257000",
    "end": "260840"
  },
  {
    "text": "Tracy uses spur event buffers for",
    "start": "260840",
    "end": "263400"
  },
  {
    "text": "backward compatibility tetragon has",
    "start": "263400",
    "end": "265919"
  },
  {
    "text": "dedicated ebpf hooks for the process",
    "start": "265919",
    "end": "268440"
  },
  {
    "text": "events and then a whole bunch of generic",
    "start": "268440",
    "end": "270800"
  },
  {
    "text": "hooks for Trace Point K probe and U",
    "start": "270800",
    "end": "272960"
  },
  {
    "text": "probes because it uses these generic uh",
    "start": "272960",
    "end": "276360"
  },
  {
    "text": "Trace Point K probe and uoe ebpf",
    "start": "276360",
    "end": "279240"
  },
  {
    "text": "programs that are configured at runtime",
    "start": "279240",
    "end": "281600"
  },
  {
    "text": "based on the",
    "start": "281600",
    "end": "282800"
  },
  {
    "text": "policy um now in terms of the libraries",
    "start": "282800",
    "end": "287160"
  },
  {
    "text": "uh fala uses lib BPF which is the",
    "start": "287160",
    "end": "289800"
  },
  {
    "text": "standard um BPF library in the kernel",
    "start": "289800",
    "end": "293000"
  },
  {
    "text": "and it has its own lip escap library for",
    "start": "293000",
    "end": "296960"
  },
  {
    "text": "system",
    "start": "296960",
    "end": "298039"
  },
  {
    "text": "capture um and Tracy uses lip BPF as",
    "start": "298039",
    "end": "302039"
  },
  {
    "text": "well and its own actually it's a",
    "start": "302039",
    "end": "305400"
  },
  {
    "text": "separate library but uh it's a go rapper",
    "start": "305400",
    "end": "308199"
  },
  {
    "text": "Li BPF go and tetragon uses the pure",
    "start": "308199",
    "end": "311240"
  },
  {
    "text": "goyum ibpf Library so if you're into go",
    "start": "311240",
    "end": "314880"
  },
  {
    "text": "and you need pure uh go code without SEO",
    "start": "314880",
    "end": "318639"
  },
  {
    "text": "and uh Cod dependencies that's the way",
    "start": "318639",
    "end": "321440"
  },
  {
    "text": "to",
    "start": "321440",
    "end": "322160"
  },
  {
    "text": "go um there are different uh designs in",
    "start": "322160",
    "end": "326560"
  },
  {
    "text": "each tool and because of that they use",
    "start": "326560",
    "end": "328400"
  },
  {
    "text": "different APF hooks the modern ebpf",
    "start": "328400",
    "end": "331560"
  },
  {
    "text": "probe and Falco uses mostly the BTF",
    "start": "331560",
    "end": "334440"
  },
  {
    "text": "enabled uh Ro Trace points like I",
    "start": "334440",
    "end": "336560"
  },
  {
    "text": "mentioned and pretty much nothing else",
    "start": "336560",
    "end": "339199"
  },
  {
    "text": "it has generic uh hooks for CIS enter",
    "start": "339199",
    "end": "341639"
  },
  {
    "text": "and CIS",
    "start": "341639",
    "end": "343160"
  },
  {
    "text": "exit uh Tracy has a lot of predefined",
    "start": "343160",
    "end": "346199"
  },
  {
    "text": "abpf hooks uh raw Trace points for CIS",
    "start": "346199",
    "end": "349600"
  },
  {
    "text": "enter and CIS exit to collect the basic",
    "start": "349600",
    "end": "351960"
  },
  {
    "text": "CIS information and dedicated tra raw",
    "start": "351960",
    "end": "355479"
  },
  {
    "text": "Trace points and kro hooks for processed",
    "start": "355479",
    "end": "358479"
  },
  {
    "text": "life cycle calls",
    "start": "358479",
    "end": "360400"
  },
  {
    "text": "lots of krope hooks and security",
    "start": "360400",
    "end": "363720"
  },
  {
    "text": "function Co hooks uh instead of using",
    "start": "363720",
    "end": "367599"
  },
  {
    "text": "LSM BPF hooks it uses K probes so it's",
    "start": "367599",
    "end": "371120"
  },
  {
    "text": "kind of cheating but it provides a lot",
    "start": "371120",
    "end": "373280"
  },
  {
    "text": "of hooks there and tetragon mostly uses",
    "start": "373280",
    "end": "377560"
  },
  {
    "text": "uh programmable Trace point and uh uh",
    "start": "377560",
    "end": "380720"
  },
  {
    "text": "kpro uh hooks to get its uh uh job done",
    "start": "380720",
    "end": "385960"
  },
  {
    "text": "with the",
    "start": "385960",
    "end": "387360"
  },
  {
    "text": "programmable uh yaml uh tracing policies",
    "start": "387360",
    "end": "391160"
  },
  {
    "text": "and that's pretty much",
    "start": "391160",
    "end": "394080"
  },
  {
    "text": "it",
    "start": "395240",
    "end": "398240"
  }
]