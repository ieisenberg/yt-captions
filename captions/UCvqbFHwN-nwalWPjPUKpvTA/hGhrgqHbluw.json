[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "hello everyone thank you very much for coming it's great to see so many of you here today I hope you have a good Keep",
    "start": "30",
    "end": "5160"
  },
  {
    "text": "Calm so far I'm Paul I'm from bison in the UK I work as a software engineer there and today I want to talk about",
    "start": "5160",
    "end": "12179"
  },
  {
    "text": "infrastructure as software there we go",
    "start": "12179",
    "end": "19039"
  },
  {
    "start": "19000",
    "end": "19000"
  },
  {
    "text": "so let's talk about so it's about evolving the paradigm for infrastructure",
    "start": "19039",
    "end": "24300"
  },
  {
    "text": "provisioning and how we can transition from declaratively defined infrastructure to doso imperatively",
    "start": "24300",
    "end": "30769"
  },
  {
    "text": "firstly we will talk about existing solutions for infrastructure provisioning both declaratively and imperative lee will introduce",
    "start": "30769",
    "end": "36840"
  },
  {
    "text": "infrastructure software through programmatic provisioning of infrastructure and then we'll take a",
    "start": "36840",
    "end": "42329"
  },
  {
    "text": "look at some case studies firstly plumie and then the Amazon cdk so to start with",
    "start": "42329",
    "end": "48390"
  },
  {
    "start": "47000",
    "end": "47000"
  },
  {
    "text": "what are the main principles of infrastructure provisioning solutions through our impotency we want to",
    "start": "48390",
    "end": "54000"
  },
  {
    "text": "provision we want provisioning to be deterministic and continuously yield the same results over multiple deployments",
    "start": "54000",
    "end": "60170"
  },
  {
    "text": "we want to an agreed centralized consolidated source of truth for the state of our infrastructure we want the",
    "start": "60170",
    "end": "66450"
  },
  {
    "text": "ability to reason about desired and observed state which facilitates such concepts as the reconciler pattern a",
    "start": "66450",
    "end": "72720"
  },
  {
    "text": "determined state differential and rectify any drift we want to be able to version the state of our infrastructure",
    "start": "72720",
    "end": "79110"
  },
  {
    "text": "enabling us to apply branching models and apply iterative changes and roll",
    "start": "79110",
    "end": "84299"
  },
  {
    "text": "back through tracking changes we can create an audit trail representing mutations in the instructor's desired",
    "start": "84299",
    "end": "90329"
  },
  {
    "text": "State lastly testing our infrastructure ensures that we gain confidence that changes don't that changes do have the",
    "start": "90329",
    "end": "97829"
  },
  {
    "text": "desired effect and functionality has not been compromised to implement these",
    "start": "97829",
    "end": "102990"
  },
  {
    "text": "principles most existing tools to find infrastructure in text based markup languages yeah more being the favorite",
    "start": "102990",
    "end": "109640"
  },
  {
    "text": "so how do we currently implement these principles so canonically sure everyone",
    "start": "109640",
    "end": "114930"
  },
  {
    "text": "is aware of both of these will either use terraform or confirmation confirmation is first part tool with for",
    "start": "114930",
    "end": "121710"
  },
  {
    "text": "desired state configuration management in amazon confirmation templates you jamal to describe all the infrastructure",
    "start": "121710",
    "end": "127619"
  },
  {
    "text": "resources in AWS CloudFormation is powerful tool but it demands quite some",
    "start": "127619",
    "end": "132750"
  },
  {
    "text": "learning master it moreover it's specific to AWS so it would be transferable to other",
    "start": "132750",
    "end": "137760"
  },
  {
    "text": "cloud providers as opposed to terraform this is a open source source financial structure in declarative configuration",
    "start": "137760",
    "end": "143190"
  },
  {
    "text": "files supporting all major cloud providers and even hybrid scenarios however both rely on some form of",
    "start": "143190",
    "end": "150930"
  },
  {
    "text": "templating to represent infrastructure state but is this really infrastructure",
    "start": "150930",
    "end": "157440"
  },
  {
    "text": "as code are we maximizing our development experience and using all the tools at our disposal so I'll just cover",
    "start": "157440",
    "end": "165540"
  },
  {
    "text": "my soapbox for this bit a bit about Yama and ESL's Yamla DSL restrict our",
    "start": "165540",
    "end": "171090"
  },
  {
    "text": "capability to truly maximize our repertoire as software engineers whilst general is a great assembly language to",
    "start": "171090",
    "end": "177000"
  },
  {
    "text": "configure communities and other cloud native tools it is not expressive in us to capture common requirements and leads",
    "start": "177000",
    "end": "182760"
  },
  {
    "text": "to significant boilerplate and copy and pasting due to this there are a few DSL x' like helm and k sonnets that aim to",
    "start": "182760",
    "end": "189750"
  },
  {
    "text": "solve this however this exacerbates the issue as it has another level of cognitive overhead to the development",
    "start": "189750",
    "end": "195810"
  },
  {
    "text": "experience having to learn the nuances on maintain the behaviors of any other tool sets yama strength is in structured",
    "start": "195810",
    "end": "202530"
  },
  {
    "text": "data where it can go wrong is where yama tries to describe behavior variables",
    "start": "202530",
    "end": "208170"
  },
  {
    "text": "arguments are not structured data this is programming masquerading as configuration we've met these concepts",
    "start": "208170",
    "end": "214200"
  },
  {
    "text": "before so why are we reinventing imperative programming due to the constraints of templating languages we",
    "start": "214200",
    "end": "220500"
  },
  {
    "text": "have a distinct lack of features like looping constructs object-oriented principles like inheritance abstraction",
    "start": "220500",
    "end": "226049"
  },
  {
    "text": "recursion threading automated testing and these are all absent inhibiting our developer",
    "start": "226049",
    "end": "231900"
  },
  {
    "text": "experience so our software engineers what we really want is infrastructure as",
    "start": "231900",
    "end": "237690"
  },
  {
    "start": "234000",
    "end": "234000"
  },
  {
    "text": "actual code we want to use the same language that we already know we want to",
    "start": "237690",
    "end": "243329"
  },
  {
    "text": "say in the same editor and use the same frameworks and have the same developer experience we're going to leverage",
    "start": "243329",
    "end": "248519"
  },
  {
    "text": "everyday features like auto-completion compilation errors and reuse the developer skills what we already have we",
    "start": "248519",
    "end": "256739"
  },
  {
    "text": "should come up with come up with abstractions to generalize our code and create reusable components we should",
    "start": "256739",
    "end": "261810"
  },
  {
    "text": "leverage the open-source community in our projects and combine our applications with infrastructure code in a",
    "start": "261810",
    "end": "267539"
  },
  {
    "text": "consolidated repo so enter",
    "start": "267539",
    "end": "272580"
  },
  {
    "start": "268000",
    "end": "268000"
  },
  {
    "text": "infrastructure of software the approach of programmatically defining of structure using familiar programming",
    "start": "272580",
    "end": "278009"
  },
  {
    "text": "languages and Saul says this is borne out of the rapid pace of cloud native developments combined with the shift to",
    "start": "278009",
    "end": "284400"
  },
  {
    "text": "ephemeral infrastructure and the consolidation of application code and infrastructure code which demands a",
    "start": "284400",
    "end": "289470"
  },
  {
    "text": "different view of cloud developments so knowing JavaScript - go means we can",
    "start": "289470",
    "end": "295500"
  },
  {
    "text": "start codifying own infrastructure right away it removes one of the biggest barrier to entry is around infrastructure as code as we know it now",
    "start": "295500",
    "end": "301280"
  },
  {
    "text": "which is another language to learn Loretha toolset unlike terraforming",
    "start": "301280",
    "end": "306300"
  },
  {
    "text": "CloudFormation we don't have that problem avoiding the learning curve associated with learning yet another DSL",
    "start": "306300",
    "end": "311849"
  },
  {
    "text": "is a violet sorry learning the learning curve associated with yet another DSL is a huge value add",
    "start": "311849",
    "end": "317910"
  },
  {
    "text": "furthermore by representing our team structure as actual code we get to easily our tests using frameworks we",
    "start": "317910",
    "end": "323880"
  },
  {
    "text": "know and the lack of testability in things like terraforming cloud formation",
    "start": "323880",
    "end": "329190"
  },
  {
    "text": "the moment has been a big book bear and obviously with using programming languages we can avoid that so adopting",
    "start": "329190",
    "end": "339270"
  },
  {
    "text": "this approach we can firstly leverage software principles in infrastructure composition language features like",
    "start": "339270",
    "end": "345030"
  },
  {
    "text": "inheritance abstraction encapsulation recursion looping constructs error handling immediately power up our",
    "start": "345030",
    "end": "351150"
  },
  {
    "text": "capabilities and productivity we gave gains fatal controls when it comes to governance of our cloud environments and having our resources",
    "start": "351150",
    "end": "357960"
  },
  {
    "text": "specified in an application or library means that we can more granularly check and control what code and the state",
    "start": "357960",
    "end": "363780"
  },
  {
    "text": "changes are happening before they are pushed out through our pipelines we can take advantage of stuffing analysis and",
    "start": "363780",
    "end": "369840"
  },
  {
    "text": "linting of code and we can even start doing TDD with our infrastructure we can",
    "start": "369840",
    "end": "374880"
  },
  {
    "text": "have a coexistence between infrastructure and application code where event-driven applications whose deployment and execution are all",
    "start": "374880",
    "end": "380699"
  },
  {
    "text": "encapsulated in the same source code so this ephemerality is often characterized",
    "start": "380699",
    "end": "387090"
  },
  {
    "text": "as developers moving down the stack where they're becoming responsible for infrastructure and ops moving up the",
    "start": "387090",
    "end": "392759"
  },
  {
    "text": "stack where they're becoming responsible for the code but the reality of the overall shift is towards increasingly",
    "start": "392759",
    "end": "398010"
  },
  {
    "text": "codified provisioning of short-lived infrastructure to support this shift",
    "start": "398010",
    "end": "403940"
  },
  {
    "text": "enterprises need the tools that can connect application code and infrastructure code in a way that is logical expressive and familiar to",
    "start": "403940",
    "end": "410389"
  },
  {
    "text": "developers and operations teams where application code is increasingly defined it defines the infrastructure resource",
    "start": "410389",
    "end": "417080"
  },
  {
    "text": "requirements of a cloud application so we've seen this before and I went",
    "start": "417080",
    "end": "423139"
  },
  {
    "start": "420000",
    "end": "420000"
  },
  {
    "text": "through all in these because we need to quickly move on but firstly we've got troposphere so this is a lot Python library for creating car formation in",
    "start": "423139",
    "end": "429320"
  },
  {
    "text": "Python which can be rendered into the appropriate Yammer or Jason templates we'll come back to this in a second",
    "start": "429320",
    "end": "435710"
  },
  {
    "text": "where we see the cdk we've also got go formation which is orientated around bi-directional transformation of go",
    "start": "435710",
    "end": "442460"
  },
  {
    "text": "language infrastructure code to cloud formation templates also we've got cloud",
    "start": "442460",
    "end": "449180"
  },
  {
    "text": "SDKs so these facilitate common languages to define configure and deploy resources across cloud providers what is",
    "start": "449180",
    "end": "456620"
  },
  {
    "text": "lacking with these solutions though is the life cycling off the components and the mechanisms the deploy manage the the",
    "start": "456620",
    "end": "462500"
  },
  {
    "text": "clarity of infrastructure it's important to realize that these libraries give direct access to the cloud api's they're",
    "start": "462500",
    "end": "468919"
  },
  {
    "text": "the though they can be used to provision resources they leave up to the program it to do so reliably because these are",
    "start": "468919",
    "end": "475220"
  },
  {
    "text": "imperative libraries attempting to programmatically provision and update infrastructure using them can be error-prone usually resulting in bespoke",
    "start": "475220",
    "end": "482300"
  },
  {
    "text": "homegrown provisioning systems so to start with let's take a look at Pulu me",
    "start": "482300",
    "end": "489070"
  },
  {
    "text": "so paluma is a multi cloud multi language cloud development platform",
    "start": "489070",
    "end": "494870"
  },
  {
    "text": "which is fully extensible in both its engine and ecosystem of packages it supports typescript JavaScript Python",
    "start": "494870",
    "end": "501949"
  },
  {
    "text": "and go with SDKs for AWS as your DCP and Cuba Nettie's the paluma cloud",
    "start": "501949",
    "end": "508220"
  },
  {
    "text": "development platform is a combination of tools libraries runtime and services that deliver a consistent development",
    "start": "508220",
    "end": "514190"
  },
  {
    "text": "development and operational control plane for cloud native infrastructure polemics programming model extends",
    "start": "514190",
    "end": "520190"
  },
  {
    "text": "across infrastructure managed services containers container management and service technologies with full api's for",
    "start": "520190",
    "end": "526790"
  },
  {
    "text": "those services exposed which can be targeted by any chosen language we can build libraries of",
    "start": "526790",
    "end": "532340"
  },
  {
    "text": "her packages when implementing standard policies Network best practices and abstract resource configuration away",
    "start": "532340",
    "end": "537860"
  },
  {
    "text": "from downstream services so these are",
    "start": "537860",
    "end": "543800"
  },
  {
    "text": "just some high-level examples so we see here that we're provisioning an ec2 instance using the AWS library and",
    "start": "543800",
    "end": "550310"
  },
  {
    "text": "setting the configuration through the parameters in the constructor we can export and import values between stacks",
    "start": "550310",
    "end": "556490"
  },
  {
    "text": "enabling portability between environments more on the communities integration to come but here we're just",
    "start": "556490",
    "end": "562910"
  },
  {
    "text": "defining a deployment as all the objects within communities are first-class",
    "start": "562910",
    "end": "568280"
  },
  {
    "text": "citizens within polluting we also can define a venture from applications where",
    "start": "568280",
    "end": "574160"
  },
  {
    "text": "infrastructure and business logic coexist and work together to form powerful service applications and paluma",
    "start": "574160",
    "end": "581060"
  },
  {
    "text": "also offers a cloud agnostic library to deploy infrastructure to any cloud native environment abstracting away the",
    "start": "581060",
    "end": "587210"
  },
  {
    "text": "underlying cloud implementation and facilitating applications to be cloud neutral portable and therefore driven by",
    "start": "587210",
    "end": "593690"
  },
  {
    "text": "business logic instead of stating any cloud specific provisioning pluming",
    "start": "593690",
    "end": "599450"
  },
  {
    "text": "supports multiple backends for storing it States the two primary primary kinds are web which is back-end accessed",
    "start": "599450",
    "end": "606470"
  },
  {
    "text": "through CLI and rest calls and secondly the file system which is the back-end stored locally on file system by default",
    "start": "606470",
    "end": "614030"
  },
  {
    "text": "the CLI uses the web back-end hosted at a plumie comm the web back-end stores",
    "start": "614030",
    "end": "619310"
  },
  {
    "text": "all checkpoint States securely and CLI always communicates directly with the cloud providers using clouds client-side",
    "start": "619310",
    "end": "625310"
  },
  {
    "text": "authentication and all state is encrypted at rets rest and in transit so just to compare Ruby to some known",
    "start": "625310",
    "end": "632750"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "solutions so terraform is the closest comparison to lumi in terraform will declare infrastructure in a DSL and the",
    "start": "632750",
    "end": "639350"
  },
  {
    "text": "terraform engine takes care of provisioning and updates and resources very similar to pluming the major",
    "start": "639350",
    "end": "644720"
  },
  {
    "text": "differences though are firstly the use of languages so as I said in terraform",
    "start": "644720",
    "end": "649820"
  },
  {
    "text": "we have to declare our infrastructure in the SLE or HCl in contrast for Lumiere lets us use the languages that we",
    "start": "649820",
    "end": "655940"
  },
  {
    "text": "already know and we get the added benefit of the features of those languages so like I said before things",
    "start": "655940",
    "end": "662450"
  },
  {
    "text": "like looping functions classes abstraction in regards to conformation so again",
    "start": "662450",
    "end": "670130"
  },
  {
    "text": "we've got the added benefit of using languages as opposed to recently about infrastructure as templates but also",
    "start": "670130",
    "end": "676339"
  },
  {
    "text": "paluma is multi-cloud so we can easily manage resources from different clouds it clouds easing what would otherwise",
    "start": "676339",
    "end": "682310"
  },
  {
    "text": "require manual orchestration and in regards to cloud SDKs the cloud",
    "start": "682310",
    "end": "687769"
  },
  {
    "text": "providers offer SDKs and multiple languages like Botto in - so there's that similarity but it's important to",
    "start": "687769",
    "end": "694850"
  },
  {
    "text": "realize that these libraries are different in their aim these libraries are hitting the cloud api's and",
    "start": "694850",
    "end": "700510"
  },
  {
    "text": "provisioning the resources that leap but leave it up to the programmer to do so reliably yeah and as I said before it's",
    "start": "700510",
    "end": "708079"
  },
  {
    "text": "kind of up to us to ensure that that is done successfully so a little bit on the",
    "start": "708079",
    "end": "714529"
  },
  {
    "start": "713000",
    "end": "713000"
  },
  {
    "text": "plumie cloud so the plumie cloud is a framework within plumie for building container and service applications in a",
    "start": "714529",
    "end": "720139"
  },
  {
    "text": "cloud agnostic way so the polemics our framework is in preview and provides abstractions that",
    "start": "720139",
    "end": "725690"
  },
  {
    "text": "can be will allow us to write a cloud application for many different providers using a common API this is an",
    "start": "725690",
    "end": "732170"
  },
  {
    "text": "abstraction package that defines the API is common to all cloud providers because they're these abstractions allow us to",
    "start": "732170",
    "end": "738079"
  },
  {
    "text": "operate with over different cloud platforms in a consistent manner low-level functionality and capabilities of individual platforms are",
    "start": "738079",
    "end": "744980"
  },
  {
    "text": "intentionally not exposed so just to take a look at example so the service",
    "start": "744980",
    "end": "751040"
  },
  {
    "text": "type in the cloud library expresses a load balance container which can be targeted to run in multiple cloud",
    "start": "751040",
    "end": "757040"
  },
  {
    "text": "providers we also have the API type which exposes service functions over HTTP the package also offers simple data",
    "start": "757040",
    "end": "764959"
  },
  {
    "text": "abstractions with cloud agnostic resources like tables and buckets so for",
    "start": "764959",
    "end": "771649"
  },
  {
    "text": "kubernetes so pulling me offers a SDK for kubernetes and allows us try Q&A",
    "start": "771649",
    "end": "778100"
  },
  {
    "text": "these applications in the language of our choice and it's designed to fit anywhere that communities is already",
    "start": "778100",
    "end": "783199"
  },
  {
    "text": "being used there is API parity with communities so users don't have to learn a new API to write communities",
    "start": "783199",
    "end": "789800"
  },
  {
    "text": "applications in alluminium it's compatible with existing Yamal and helm charts and it's supposed to be a drop-in",
    "start": "789800",
    "end": "796519"
  },
  {
    "text": "replacement 4q control apply so wherever you have a keep config you can use plumie in",
    "start": "796519",
    "end": "802810"
  },
  {
    "text": "addition to this there are multiple benefits from using paluma to orchestrate communities so firstly we",
    "start": "802810",
    "end": "809590"
  },
  {
    "text": "have proactive reporting from errors if resources fail to initialize so if",
    "start": "809590",
    "end": "814870"
  },
  {
    "text": "bulimia is able to deduce why something failed to be created in the cluster it will obviously fail that and therefore",
    "start": "814870",
    "end": "822010"
  },
  {
    "text": "no more digging around in the cluster to ascertain what happened there's also drift detection so Polly we",
    "start": "822010",
    "end": "828130"
  },
  {
    "text": "can offer a diff between the detective stay and anything that's out of sync with the spec in version control there's",
    "start": "828130",
    "end": "835510"
  },
  {
    "text": "a precise Lystra lifecycle tracking so like terraform the plan phase will",
    "start": "835510",
    "end": "841210"
  },
  {
    "text": "explicitly tell us which resources will be updated and deleted by an update there's interim planning so when we make",
    "start": "841210",
    "end": "849490"
  },
  {
    "text": "a change to our cluster we're told how that change will propagate around our resources so for example if we change a",
    "start": "849490",
    "end": "855430"
  },
  {
    "text": "conflict map that it'll tell us which pods will be affected by that update there's a strong integration with",
    "start": "855430",
    "end": "860890"
  },
  {
    "text": "managed kubernetes offerings so we can provision clusters in eks aks and gke",
    "start": "860890",
    "end": "868320"
  },
  {
    "text": "and we can also provision resources directly in that provision cluster which",
    "start": "868320",
    "end": "874510"
  },
  {
    "text": "will demonstrate shortly and lastly the communities SDK also supports deploying",
    "start": "874510",
    "end": "879610"
  },
  {
    "text": "helm charts so this is possible through chart repositories or assuming local charts on the file system so this is",
    "start": "879610",
    "end": "888970"
  },
  {
    "text": "just a simple example so the full API for Kuban it is available just in code",
    "start": "888970",
    "end": "894310"
  },
  {
    "text": "not llamó so akin to normal communities resources we have a deployment specification which can be declared and",
    "start": "894310",
    "end": "900670"
  },
  {
    "text": "then these resources are first-class citizens in our languages here's a simple nginx deployment with a",
    "start": "900670",
    "end": "907090"
  },
  {
    "text": "service of type load balancer and the load balancers hostname is then exported from the stack and could be used by at",
    "start": "907090",
    "end": "913180"
  },
  {
    "text": "the CLI so if we deploy the stack using the plumie up we see a preview of the",
    "start": "913180",
    "end": "919300"
  },
  {
    "text": "resources that get created as well as their readiness as they become available in the cluster",
    "start": "919300",
    "end": "925350"
  },
  {
    "text": "cool so taking the community's guestbook",
    "start": "929850",
    "end": "935220"
  },
  {
    "text": "application we can refactor this from being quite a verbose set of resources and take advantage of being in an",
    "start": "935220",
    "end": "940470"
  },
  {
    "text": "environment which provides abstraction we can recognize a common back pattern for a deployment followed by a service",
    "start": "940470",
    "end": "947009"
  },
  {
    "text": "which exposes that container optionally behind the load balancer with a stable IP this can be abstracted into a class",
    "start": "947009",
    "end": "953279"
  },
  {
    "text": "which defines all these common components and can be instantiated to create multiple objects this aid in",
    "start": "953279",
    "end": "958920"
  },
  {
    "text": "component reuse and reducing repetition the end of this is we have three deployments and three services with the",
    "start": "958920",
    "end": "965220"
  },
  {
    "text": "front end being load balanced and which is the same however we've gone from the 147 lines of llamada to approximately 20",
    "start": "965220",
    "end": "973199"
  },
  {
    "text": "lines of code not not only that but the code is much simpler to understand and easier to maintain so the base class of",
    "start": "973199",
    "end": "981269"
  },
  {
    "text": "this creates the deployment and service objects exposed to the IP of the service through any which is obviously the scope",
    "start": "981269",
    "end": "987899"
  },
  {
    "text": "of any instantiations of that class so gonna be preview shows all these",
    "start": "987899",
    "end": "994560"
  },
  {
    "text": "resources which will get created in the cluster course so moving on to managed",
    "start": "994560",
    "end": "1002240"
  },
  {
    "start": "999000",
    "end": "999000"
  },
  {
    "text": "services so plumies kubernetes integration can be further taken further to by provisioning clusters fireman you",
    "start": "1002240",
    "end": "1008630"
  },
  {
    "text": "services in cloud providers so provisioning and managing and monitoring communities clusters is no easy task in",
    "start": "1008630",
    "end": "1014260"
  },
  {
    "text": "AWS we can use eks so you ease a bit of this burden but it's still difficult to get up and running and to end in code",
    "start": "1014260",
    "end": "1021520"
  },
  {
    "text": "however through the polemic eCare support we can aid this task and get a cluster provisioned using minimal code",
    "start": "1021520",
    "end": "1028300"
  },
  {
    "text": "the es component takes care of settling setting up all the resources and configuration needed in an eks cluster",
    "start": "1028300",
    "end": "1035360"
  },
  {
    "text": "so we'll get the eks service role we'll optionally get a new V PC we create the",
    "start": "1035360",
    "end": "1040850"
  },
  {
    "text": "control control plane we get the worker nodes in an ASG which will then automatically join the cluster we get a",
    "start": "1040850",
    "end": "1048580"
  },
  {
    "text": "config map which allows us that ec2 working hose to join we create a storage",
    "start": "1048580",
    "end": "1054679"
  },
  {
    "text": "class in the cluster to allow provisioning EBS back to persistent volumes and we then construct the cube",
    "start": "1054679",
    "end": "1060860"
  },
  {
    "text": "config which is needed to access the cluster and that can be exported and therefore used on the command line by a",
    "start": "1060860",
    "end": "1066710"
  },
  {
    "text": "cube control so here we see a preview or V of the ETS stack with all the",
    "start": "1066710",
    "end": "1074210"
  },
  {
    "text": "resources that will get created so yeah this will end-to-end provision and ETS",
    "start": "1074210",
    "end": "1079370"
  },
  {
    "text": "cluster with worker nodes for us by exporting valleys in the stack we can",
    "start": "1079370",
    "end": "1084650"
  },
  {
    "text": "see references to these values and use them in CLI this is the instance of",
    "start": "1084650",
    "end": "1091100"
  },
  {
    "text": "taking a programmatically taking the generator keep config from ETS stack and using it to access the cluster via cube",
    "start": "1091100",
    "end": "1096500"
  },
  {
    "text": "control note that we didn't have to populate the cube control here with any arms or iron credentials as that's all",
    "start": "1096500",
    "end": "1104750"
  },
  {
    "text": "injected by the eks library during the provisioning time cool so on top of cube",
    "start": "1104750",
    "end": "1111950"
  },
  {
    "start": "1110000",
    "end": "1110000"
  },
  {
    "text": "Nessie's we also have support for helm charts so this significantly reduces the",
    "start": "1111950",
    "end": "1117740"
  },
  {
    "text": "amount of boilerplate code required to deploy communities that to deploy to keep Nettie's deploying from chopped",
    "start": "1117740",
    "end": "1123679"
  },
  {
    "text": "repositories or local charts on the file system till it is not a requirement although that obviously",
    "start": "1123679",
    "end": "1129309"
  },
  {
    "text": "won't matter as of helper help 3 but Polly me will expand the helm chart and",
    "start": "1129309",
    "end": "1134470"
  },
  {
    "text": "submit the expanded yeah Malta to the cluster here we deport in the Jenkins charts from the stable repository and",
    "start": "1134470",
    "end": "1140470"
  },
  {
    "text": "exporting properties from the created resources so running plumie up we see",
    "start": "1140470",
    "end": "1147070"
  },
  {
    "text": "all the human SS resources that will get deployed via this helmet chart along with their readiness taking the exported",
    "start": "1147070",
    "end": "1153250"
  },
  {
    "text": "endpoints we can navigate to the front end via the load balancers hostname in AWS",
    "start": "1153250",
    "end": "1159929"
  },
  {
    "text": "cool okay this is where we go slightly",
    "start": "1167809",
    "end": "1173580"
  },
  {
    "text": "overboard but given that we have support for home charts in communities our",
    "start": "1173580",
    "end": "1178980"
  },
  {
    "text": "repertoire is expanding significantly to include CR these operators and entire",
    "start": "1178980",
    "end": "1184110"
  },
  {
    "text": "super sets of functionality like service measures so through referencing local charts and value jamol's we can",
    "start": "1184110",
    "end": "1190830"
  },
  {
    "text": "programmatically deploy things like sto along with a configuration for our cluster and assert on each components",
    "start": "1190830",
    "end": "1196559"
  },
  {
    "text": "readiness of stability and functionality so here which is taking a local instance",
    "start": "1196559",
    "end": "1202409"
  },
  {
    "text": "of the sto charts as well as the values yama and deploying that home so if we do",
    "start": "1202409",
    "end": "1212639"
  },
  {
    "text": "a plea be previous a that it creates quite a few resources in our cluster but",
    "start": "1212639",
    "end": "1219480"
  },
  {
    "text": "what we've done here is programmatically deployed and configured in pi instance installation of this do with why cycling",
    "start": "1219480",
    "end": "1225360"
  },
  {
    "text": "to assert that all the resources was created successfully and that we have versioning and rollback of our stacks",
    "start": "1225360",
    "end": "1231059"
  },
  {
    "text": "whilst this might be a bit of overkill it nevertheless demonstrates the possibilities of deploying resources to",
    "start": "1231059",
    "end": "1236940"
  },
  {
    "text": "communities via pluming so one major advantage of having infrastructure",
    "start": "1236940",
    "end": "1243210"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "software is that service offerings like AWS lambda as your functions and google cloud functions can be real language",
    "start": "1243210",
    "end": "1249960"
  },
  {
    "text": "lambdas severals offerings today divide the developer experience between infrastructure which can be or",
    "start": "1249960",
    "end": "1256019"
  },
  {
    "text": "provisioning the lambda runtime itself and writing and maintaining the code that will actually execute in the function itself one triggered because",
    "start": "1256019",
    "end": "1264929"
  },
  {
    "text": "we're using general-purpose languages we can create resources and then wire up event handlers just like normal",
    "start": "1264929",
    "end": "1270360"
  },
  {
    "text": "event-driven programming you can create event sources and handlers in the same program choosing to wire functions to",
    "start": "1270360",
    "end": "1276299"
  },
  {
    "text": "existing resources the optimum way is to create functions inline this blurs the",
    "start": "1276299",
    "end": "1281399"
  },
  {
    "text": "line between infrastructure and application logic in a way that makes programs feel like first-class",
    "start": "1281399",
    "end": "1286590"
  },
  {
    "text": "distributed apps so here we've got a couple of examples of this so we just create an S us queue I believe in a",
    "start": "1286590",
    "end": "1295980"
  },
  {
    "text": "bucket and then we've got some Onix methods which can be used on these resources to",
    "start": "1295980",
    "end": "1301390"
  },
  {
    "text": "register event handlers so for the most part any codes we write here will actually will work unlocking all sorts",
    "start": "1301390",
    "end": "1307180"
  },
  {
    "text": "of powerful composition or scenarios underneath those onyx methods are many AWS resources transitively created like",
    "start": "1307180",
    "end": "1314530"
  },
  {
    "text": "I am attachments to facilitate the invocation of event-driven workloads so",
    "start": "1314530",
    "end": "1321640"
  },
  {
    "start": "1321000",
    "end": "1321000"
  },
  {
    "text": "just a bit of a segue into testing so why should we be interested in testing",
    "start": "1321640",
    "end": "1326860"
  },
  {
    "text": "our infrastructure firstly it increases our confidence that any changes introduced to our infrastructure are",
    "start": "1326860",
    "end": "1333490"
  },
  {
    "text": "actually going to be functional it improves resilience and security and demonstrates a left shift to address",
    "start": "1333490",
    "end": "1340600"
  },
  {
    "text": "code quality security concerns and environment environmental consistent deployments through the varying levels",
    "start": "1340600",
    "end": "1347590"
  },
  {
    "text": "or min of inspection we have a variety of options available to derive assertions of functionality and",
    "start": "1347590",
    "end": "1352990"
  },
  {
    "text": "conformance to SLA x' security criteria and best practices as we see there's a",
    "start": "1352990",
    "end": "1358030"
  },
  {
    "text": "broad spectrum of infrastructure testing options available however we could say that most of all some of these are retrospective assertions of the state of",
    "start": "1358030",
    "end": "1365380"
  },
  {
    "text": "our infrastructure and we can use plumie to complement this and expand on some of",
    "start": "1365380",
    "end": "1371050"
  },
  {
    "text": "these mechanisms so as we're able to use languages like JavaScript typescript and",
    "start": "1371050",
    "end": "1376840"
  },
  {
    "start": "1372000",
    "end": "1372000"
  },
  {
    "text": "Python ago we have the full power of each language available including access to tools and libraries for that runtime",
    "start": "1376840",
    "end": "1382900"
  },
  {
    "text": "including testing frameworks because we obviously might have functions in our code now to say that we want to tag",
    "start": "1382900",
    "end": "1389230"
  },
  {
    "text": "resources or define some event-driven workload we probably want to test them or do TDD because this is the same as",
    "start": "1389230",
    "end": "1397330"
  },
  {
    "text": "writing or during unit tests against any program and our choice we can for example use sort of well-known libraries",
    "start": "1397330",
    "end": "1404280"
  },
  {
    "text": "and here we're creating an ec2 instance with a security group and associated ingress rules once we set up our",
    "start": "1404280",
    "end": "1411400"
  },
  {
    "text": "environment in a stack we can assert against attributes there in here we're just making sure that each tag is not",
    "start": "1411400",
    "end": "1416920"
  },
  {
    "text": "false and not missing an entry for the name key in the map",
    "start": "1416920",
    "end": "1421960"
  },
  {
    "text": "also we can make assertions about the security of our code and assert that we are conforming to security best practices here we search through all the",
    "start": "1421960",
    "end": "1428740"
  },
  {
    "text": "ingress rules in The Associated security group and make we don't allow overly permissive ssh",
    "start": "1428740",
    "end": "1434170"
  },
  {
    "text": "inbound access cool so just to close up on plumie first in the cloud agnosticism",
    "start": "1434170",
    "end": "1442270"
  },
  {
    "start": "1437000",
    "end": "1437000"
  },
  {
    "text": "provides flexibility and portability it means we avoid vendor lock-in and in",
    "start": "1442270",
    "end": "1447400"
  },
  {
    "text": "some cases we can run our stacks in multiple providers by changing external config and not changing the source code",
    "start": "1447400",
    "end": "1453610"
  },
  {
    "text": "the kubernetes cluster provisioning using managed service integrations reduces the cognitive overhead and cope",
    "start": "1453610",
    "end": "1459850"
  },
  {
    "text": "code footprints and management of resources to a minimum programmatic generation facilitates more granular",
    "start": "1459850",
    "end": "1466240"
  },
  {
    "text": "control and inspection of infrastructure resources and lastly abstraction aides standardization across organizations",
    "start": "1466240",
    "end": "1473580"
  },
  {
    "text": "through reuse by downstream services so next up we have the Amazon cdk so the",
    "start": "1473580",
    "end": "1481930"
  },
  {
    "text": "cloud development kit is a open source software development framework to define cloud infrastructure encode and",
    "start": "1481930",
    "end": "1487740"
  },
  {
    "text": "provision through AWS confirmation a the cdk is currently in Developer Preview",
    "start": "1487740",
    "end": "1493330"
  },
  {
    "text": "and can be implemented via java javascript typescript net and as of recently python the cdks basically a",
    "start": "1493330",
    "end": "1501100"
  },
  {
    "text": "wrapper around cloud formation which abstracts CloudFormation definitions of AWS resources into an object orientated",
    "start": "1501100",
    "end": "1506770"
  },
  {
    "text": "library this allows us to define high level abstractions of resources which",
    "start": "1506770",
    "end": "1512110"
  },
  {
    "text": "can be easily reused the cdk is a command-line tool for interacting with cdk apps it allows us to synthesize",
    "start": "1512110",
    "end": "1519430"
  },
  {
    "text": "stacks into classmate's templates and ploy stacks to address environments and defecates deployed stacks to understand",
    "start": "1519430",
    "end": "1526000"
  },
  {
    "text": "the impact of code changes the construct library includes a module for each AWS Repair Service with constructs that",
    "start": "1526000",
    "end": "1532330"
  },
  {
    "text": "offer rich api's that encapsulate the detail of how we this should be used and",
    "start": "1532330",
    "end": "1537690"
  },
  {
    "text": "reduces the complexity and glue logic when integrating various Adria's services",
    "start": "1537690",
    "end": "1544649"
  },
  {
    "text": "so we can think of for cdk as a cloud infrastructure compiler it provides a",
    "start": "1546860",
    "end": "1553049"
  },
  {
    "text": "high-level high-level class provides a set of high-level class libraries called constructs that abstract a diverse cloud",
    "start": "1553049",
    "end": "1559890"
  },
  {
    "text": "resources and encapsulate AWS best practices constructs can be integrated together into cut into object orientated",
    "start": "1559890",
    "end": "1567090"
  },
  {
    "text": "cdk applications that's precisely define our application infrastructure and take care of the complex of boilerplate logic",
    "start": "1567090",
    "end": "1573950"
  },
  {
    "text": "when we run the CDA application it's compiled into cloud from a cloud formation template which acts like the",
    "start": "1573950",
    "end": "1580530"
  },
  {
    "text": "assembly language for AWS compare cloud infrastructure this template is then ready for processing by the cloud",
    "start": "1580530",
    "end": "1586799"
  },
  {
    "text": "formation provisioning engine for deployment into our a2s environments again because cdk is supports objects",
    "start": "1586799",
    "end": "1594390"
  },
  {
    "text": "and orientated languages we can utilize language features like looping abstraction inheritance and do some",
    "start": "1594390",
    "end": "1599909"
  },
  {
    "text": "testing so as mentioned the cdk has support for well-known languages so to",
    "start": "1599909",
    "end": "1606240"
  },
  {
    "start": "1601000",
    "end": "1601000"
  },
  {
    "text": "get started we can instantiate a new app or construct library in language of our choice here we see a couple of examples",
    "start": "1606240",
    "end": "1614850"
  },
  {
    "text": "of how constructs can be instantiated with resource configuration passed into the Constructors to with the specific",
    "start": "1614850",
    "end": "1621900"
  },
  {
    "text": "granularity required with both these resources in scope we can alter their behavior perform operations create",
    "start": "1621900",
    "end": "1627960"
  },
  {
    "text": "associations and retrieve instance attributes for particular resources here",
    "start": "1627960",
    "end": "1634559"
  },
  {
    "text": "we see the command-line available to interface with our stack so we have CD case synth which will synthesize our",
    "start": "1634559",
    "end": "1640200"
  },
  {
    "text": "source code into a CloudFormation template we've got cdk deploy which will take that synthesize cloud formation",
    "start": "1640200",
    "end": "1645840"
  },
  {
    "text": "template and deploy it into a deeper web iOS environments and we've got cdk diff",
    "start": "1645840",
    "end": "1651720"
  },
  {
    "text": "which will monitor any state drift between the last deployed state and the current state of our stacks here we've",
    "start": "1651720",
    "end": "1659220"
  },
  {
    "text": "just got a simple example of an app so on the Left we've got the application which instantiates our stack in the",
    "start": "1659220",
    "end": "1664950"
  },
  {
    "text": "stack we define a couple of resources and instantiate the construct and then we have some behavior in the construct",
    "start": "1664950",
    "end": "1671309"
  },
  {
    "text": "in this case creating a few s3 buckets",
    "start": "1671309",
    "end": "1675830"
  },
  {
    "text": "if we run CDK diff we can see the state",
    "start": "1676590",
    "end": "1682650"
  },
  {
    "text": "of the current stack which in this instance doesn't exist I'll show you all the resources that will get created so",
    "start": "1682650",
    "end": "1689850"
  },
  {
    "start": "1689000",
    "end": "1689000"
  },
  {
    "text": "testing as we defined our stack in in this case Python we can leverage common",
    "start": "1689850",
    "end": "1696630"
  },
  {
    "text": "testing frameworks so in this instance we're using unit tests and just invoking our tests step and and testing whether",
    "start": "1696630",
    "end": "1704550"
  },
  {
    "text": "we've actually got the correct behavior therein so in terms of service this is",
    "start": "1704550",
    "end": "1711270"
  },
  {
    "start": "1708000",
    "end": "1708000"
  },
  {
    "text": "the what we're able to do is have infrastructure and application code living in together in the same repository so here we're defining a",
    "start": "1711270",
    "end": "1719610"
  },
  {
    "text": "lambda in our stack and we're having actual implementation read in from just",
    "start": "1719610",
    "end": "1725130"
  },
  {
    "text": "a lambda handler which is in the same repository this could be inline so we",
    "start": "1725130",
    "end": "1730590"
  },
  {
    "text": "have a kind of coexistence between the infrastructure which provisions the lambda and the actual workload that will",
    "start": "1730590",
    "end": "1738000"
  },
  {
    "text": "get invoked in that lambda the beauty of",
    "start": "1738000",
    "end": "1743340"
  },
  {
    "text": "doing this though is that the cdk will also generate any resources facility required to facilitate the deployment and functionality offer desired stack so",
    "start": "1743340",
    "end": "1751020"
  },
  {
    "text": "deploy in that lambda in this instance we have nine role which is created and provided to the lambda resource",
    "start": "1751020",
    "end": "1757100"
  },
  {
    "text": "providing it with the basic execution capabilities if we deploy that like most",
    "start": "1757100",
    "end": "1765840"
  },
  {
    "text": "sort of provisioning systems we get sort of the readiness of all of our resources very similar to how CloudFormation",
    "start": "1765840",
    "end": "1771390"
  },
  {
    "text": "renders it in the console and yeah how successful that deployment was the cdk",
    "start": "1771390",
    "end": "1778260"
  },
  {
    "text": "also provides an assertion library containing help helpers for writing unit",
    "start": "1778260",
    "end": "1783540"
  },
  {
    "text": "tests and integration tests for cdk libraries using this library we were able to assert that certain behaviors of",
    "start": "1783540",
    "end": "1790110"
  },
  {
    "text": "your features of our application and stacks are true before we actually deploy that infrastructure so firstly we",
    "start": "1790110",
    "end": "1798120"
  },
  {
    "text": "can inspect stack templates to assert that they contain the expected resources and associated properties and that",
    "start": "1798120",
    "end": "1804420"
  },
  {
    "text": "synthesising has not compromised the behavior of the stack",
    "start": "1804420",
    "end": "1809030"
  },
  {
    "text": "here we're more intact around the stack security compliance and network configuration in a high compliance",
    "start": "1810499",
    "end": "1816119"
  },
  {
    "text": "environment we may have specific requirements which has demonstrated here to be checked at the code level before",
    "start": "1816119",
    "end": "1821700"
  },
  {
    "text": "any deployments occur for safeguarding the integrity of our stacks and environments so through the concert",
    "start": "1821700",
    "end": "1831269"
  },
  {
    "start": "1829000",
    "end": "1829000"
  },
  {
    "text": "library the cdk expose in a bun an abundance of resources and managed services one such resource is eks which",
    "start": "1831269",
    "end": "1837829"
  },
  {
    "text": "from experience requires a bit of orchestration and configuration to provision from code so moving all that",
    "start": "1837829",
    "end": "1844289"
  },
  {
    "text": "provisioning into the cdk allows for greater control over the specific behavior of the control plane and work",
    "start": "1844289",
    "end": "1849389"
  },
  {
    "text": "nodes in AWS and also aids in integrating all the different components together so the worker nodes we can do a",
    "start": "1849389",
    "end": "1860279"
  },
  {
    "text": "diff and show us all the resources that will get created so this case goes ahead",
    "start": "1860279",
    "end": "1866279"
  },
  {
    "text": "and creates the ASG of the worker nodes and exports the are required for them to",
    "start": "1866279",
    "end": "1871320"
  },
  {
    "text": "join the management plane again having",
    "start": "1871320",
    "end": "1877229"
  },
  {
    "start": "1875000",
    "end": "1875000"
  },
  {
    "text": "constructs in code means that we can instantiate them and test against their behavior this again allows us to have",
    "start": "1877229",
    "end": "1882929"
  },
  {
    "text": "assurances that what we deploy is going to function as desired and also gives us confidence that any changes being made",
    "start": "1882929",
    "end": "1888359"
  },
  {
    "text": "in our code won't compromise from chanela the-- so",
    "start": "1888359",
    "end": "1893399"
  },
  {
    "start": "1892000",
    "end": "1892000"
  },
  {
    "text": "just to round off on cdk so again provisioning ets in code is much much",
    "start": "1893399",
    "end": "1900059"
  },
  {
    "text": "more reliable and we can reason about the actual observed the desired state of our clusters there's no native community",
    "start": "1900059",
    "end": "1906209"
  },
  {
    "text": "supports that we're still reliant on a bit of glue to actually get the cluster working end to end and as i said the lot",
    "start": "1906209",
    "end": "1915329"
  },
  {
    "text": "what the cdk is still in kind of Developer Preview so python has come along recently and so there's just a",
    "start": "1915329",
    "end": "1921239"
  },
  {
    "text": "kind of ongoing effort to get SDK parity in the different languages and there's",
    "start": "1921239",
    "end": "1926820"
  },
  {
    "text": "some licks to check out if you're interested so just surround off a bit on cultural",
    "start": "1926820",
    "end": "1934590"
  },
  {
    "start": "1931000",
    "end": "1931000"
  },
  {
    "text": "readiness so when we're seeking to shift the paradigm for infrastructure composition into programming languages",
    "start": "1934590",
    "end": "1939840"
  },
  {
    "text": "we need to first make sure that the surrounding culture is one which which",
    "start": "1939840",
    "end": "1945240"
  },
  {
    "text": "he was ready to for this to be adopted in if there there are DevOps silos or distinction distinctions between",
    "start": "1945240",
    "end": "1951090"
  },
  {
    "text": "infrastructure platform and development then introducing a principle which essentially blurs those lines needs to",
    "start": "1951090",
    "end": "1956730"
  },
  {
    "text": "be carefully considered whilst it might be acknowledged that there are distinct benefits to shifting developers down the",
    "start": "1956730",
    "end": "1962940"
  },
  {
    "text": "stack and ops up this might actually be detrimental in a culture which is not ready for multi discipline teams and",
    "start": "1962940",
    "end": "1968970"
  },
  {
    "text": "organizations depending on the cloud native maturity of an organization or",
    "start": "1968970",
    "end": "1974220"
  },
  {
    "text": "culture or technology offering it may be lesser there may be certain prerequisites required before leveraging",
    "start": "1974220",
    "end": "1980190"
  },
  {
    "text": "the value of ephemeral environments and codifying cloud resources there is an",
    "start": "1980190",
    "end": "1985350"
  },
  {
    "text": "evolution through the cloud native maturity paradigm which must which where we must have stable foundations and have",
    "start": "1985350",
    "end": "1991860"
  },
  {
    "text": "invested and culturally appreciate these stages of our evolution without this we won't maximize our potential nor deliver",
    "start": "1991860",
    "end": "1998580"
  },
  {
    "text": "the full value of running in a truly cloud native environments so to wrap up",
    "start": "1998580",
    "end": "2005650"
  },
  {
    "start": "2003000",
    "end": "2003000"
  },
  {
    "text": "hopefully this is showing everyone the benefits and justification of moving infrastructure code to a more imperative",
    "start": "2005650",
    "end": "2011450"
  },
  {
    "text": "style and how that change in paradigm can be achieved we have the tools to evolve the paradigm of infrastructure",
    "start": "2011450",
    "end": "2017570"
  },
  {
    "text": "composition which facilitates a coexistence of application and infrastructure code thus resulting in",
    "start": "2017570",
    "end": "2022760"
  },
  {
    "text": "more testable infrastructure this reduces the cognitive overhead of yama and dsl development and leverages modern",
    "start": "2022760",
    "end": "2029690"
  },
  {
    "text": "languages moderate modern language features to programmatically define cloud resources as application code and",
    "start": "2029690",
    "end": "2036350"
  },
  {
    "text": "supporting infrastructure become more and more blended it's natural that software developers take the responsibility to define both the next",
    "start": "2036350",
    "end": "2044000"
  },
  {
    "text": "logical step is to use the same set of languages tooling practices for both",
    "start": "2044000",
    "end": "2049520"
  },
  {
    "text": "software and infrastructure and as everything thank you very much",
    "start": "2049520",
    "end": "2057130"
  },
  {
    "start": "2052000",
    "end": "2052000"
  },
  {
    "text": "[Music]",
    "start": "2058989",
    "end": "2061849"
  }
]