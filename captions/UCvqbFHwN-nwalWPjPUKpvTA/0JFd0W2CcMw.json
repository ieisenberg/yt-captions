[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "Ohio because I Mass",
    "start": "179",
    "end": "3978"
  },
  {
    "text": "so yes my name's Liz rice uh I work at",
    "start": "4920",
    "end": "8700"
  },
  {
    "text": "isovalent which is the company that",
    "start": "8700",
    "end": "10980"
  },
  {
    "text": "originally created the psyllium",
    "start": "10980",
    "end": "12780"
  },
  {
    "text": "networking project that Katie and kohe",
    "start": "12780",
    "end": "15299"
  },
  {
    "text": "already mentioned this morning",
    "start": "15299",
    "end": "18000"
  },
  {
    "text": "and psyllium is proudly an incubating",
    "start": "18000",
    "end": "21000"
  },
  {
    "text": "project and it's based on ebpf and I'm",
    "start": "21000",
    "end": "24840"
  },
  {
    "text": "going to be talking about why ebpf is",
    "start": "24840",
    "end": "27660"
  },
  {
    "text": "such a powerful platform for not just",
    "start": "27660",
    "end": "30960"
  },
  {
    "text": "networking but also observability and",
    "start": "30960",
    "end": "33600"
  },
  {
    "text": "security infrastructure tooling and why",
    "start": "33600",
    "end": "37160"
  },
  {
    "text": "perhaps we no longer need to rely on the",
    "start": "37160",
    "end": "40260"
  },
  {
    "text": "sidecar model going forward",
    "start": "40260",
    "end": "43878"
  },
  {
    "text": "I'm you may have seen me before as the",
    "start": "44000",
    "end": "48120"
  },
  {
    "text": "uh chair of the technical oversight",
    "start": "48120",
    "end": "49860"
  },
  {
    "text": "committee at the cncf and I'm also",
    "start": "49860",
    "end": "52320"
  },
  {
    "text": "involved in an organization called open",
    "start": "52320",
    "end": "54600"
  },
  {
    "text": "UK which encourages collaboration around",
    "start": "54600",
    "end": "57960"
  },
  {
    "text": "open source in the UK and also",
    "start": "57960",
    "end": "60480"
  },
  {
    "text": "internationally",
    "start": "60480",
    "end": "63140"
  },
  {
    "start": "63000",
    "end": "63000"
  },
  {
    "text": "so let's start start side cars what do I",
    "start": "63420",
    "end": "66180"
  },
  {
    "text": "mean when I'm talking about the sidecar",
    "start": "66180",
    "end": "68159"
  },
  {
    "text": "model well even before sidecars when we",
    "start": "68159",
    "end": "71820"
  },
  {
    "text": "wanted to build common infrastructure",
    "start": "71820",
    "end": "74400"
  },
  {
    "text": "tooling things like logging and tracing",
    "start": "74400",
    "end": "77040"
  },
  {
    "text": "and security tools that we want to run",
    "start": "77040",
    "end": "79680"
  },
  {
    "text": "in every application",
    "start": "79680",
    "end": "81659"
  },
  {
    "text": "we used to have to either re-write or",
    "start": "81659",
    "end": "85619"
  },
  {
    "text": "perhaps import code written in the same",
    "start": "85619",
    "end": "88920"
  },
  {
    "text": "language as our application",
    "start": "88920",
    "end": "91500"
  },
  {
    "text": "when we move to Containers we no longer",
    "start": "91500",
    "end": "94799"
  },
  {
    "text": "have to",
    "start": "94799",
    "end": "96180"
  },
  {
    "text": "use the the same language as our",
    "start": "96180",
    "end": "99180"
  },
  {
    "text": "programming language we can put that",
    "start": "99180",
    "end": "100860"
  },
  {
    "text": "common code into containers",
    "start": "100860",
    "end": "103680"
  },
  {
    "text": "and run the same container in every pod",
    "start": "103680",
    "end": "106619"
  },
  {
    "text": "so every pod is instrumented in the same",
    "start": "106619",
    "end": "109500"
  },
  {
    "text": "way",
    "start": "109500",
    "end": "111119"
  },
  {
    "text": "that container is a sidecar container we",
    "start": "111119",
    "end": "113880"
  },
  {
    "text": "call this the sidecar model and it's",
    "start": "113880",
    "end": "116159"
  },
  {
    "text": "been widely used for logging and tracing",
    "start": "116159",
    "end": "119220"
  },
  {
    "text": "and security tooling and service mesh",
    "start": "119220",
    "end": "122939"
  },
  {
    "text": "that's sidecars now let's explain ebpf",
    "start": "122939",
    "end": "128039"
  },
  {
    "text": "the acronym stands for extended Barclay",
    "start": "128039",
    "end": "131280"
  },
  {
    "text": "packet filter but honestly you can",
    "start": "131280",
    "end": "133860"
  },
  {
    "text": "forget that because it does so much more",
    "start": "133860",
    "end": "136920"
  },
  {
    "text": "than packet filtering that the acronym",
    "start": "136920",
    "end": "139260"
  },
  {
    "text": "is really meaningless now",
    "start": "139260",
    "end": "141780"
  },
  {
    "text": "what eppf allows us to do is to",
    "start": "141780",
    "end": "145260"
  },
  {
    "text": "customize the way the kernel behaves we",
    "start": "145260",
    "end": "148260"
  },
  {
    "text": "can make the kernel dynamically",
    "start": "148260",
    "end": "150420"
  },
  {
    "text": "programmable",
    "start": "150420",
    "end": "152040"
  },
  {
    "text": "it's a bit like how JavaScript allows us",
    "start": "152040",
    "end": "154980"
  },
  {
    "text": "to dynamically change the behavior of a",
    "start": "154980",
    "end": "157620"
  },
  {
    "text": "web page",
    "start": "157620",
    "end": "159980"
  },
  {
    "start": "159000",
    "end": "159000"
  },
  {
    "text": "now normally AS application developers",
    "start": "160980",
    "end": "163680"
  },
  {
    "text": "we write our code in user space",
    "start": "163680",
    "end": "166920"
  },
  {
    "text": "and every time our user space",
    "start": "166920",
    "end": "168900"
  },
  {
    "text": "applications want to do anything that",
    "start": "168900",
    "end": "171420"
  },
  {
    "text": "touches Hardware",
    "start": "171420",
    "end": "173280"
  },
  {
    "text": "maybe reading and writing to files or",
    "start": "173280",
    "end": "177000"
  },
  {
    "text": "allocating memory sending Network",
    "start": "177000",
    "end": "179640"
  },
  {
    "text": "messages all these things require some",
    "start": "179640",
    "end": "182760"
  },
  {
    "text": "Hardware interaction",
    "start": "182760",
    "end": "184860"
  },
  {
    "text": "and user space can't do this for itself",
    "start": "184860",
    "end": "187860"
  },
  {
    "text": "user space apps have to ask the kernel",
    "start": "187860",
    "end": "190319"
  },
  {
    "text": "for assistance in all these activities",
    "start": "190319",
    "end": "193739"
  },
  {
    "text": "we don't normally think about this",
    "start": "193739",
    "end": "195840"
  },
  {
    "text": "because programming languages give us",
    "start": "195840",
    "end": "198180"
  },
  {
    "text": "abstractions so we're unaware that the",
    "start": "198180",
    "end": "201360"
  },
  {
    "text": "kernel is being invoked",
    "start": "201360",
    "end": "204620"
  },
  {
    "text": "now when we use ebpf we can write a",
    "start": "205080",
    "end": "209519"
  },
  {
    "text": "program that runs inside the kernel",
    "start": "209519",
    "end": "211739"
  },
  {
    "text": "that's triggered by an event",
    "start": "211739",
    "end": "214440"
  },
  {
    "text": "and that event could be",
    "start": "214440",
    "end": "217019"
  },
  {
    "text": "any function being triggered it could be",
    "start": "217019",
    "end": "219720"
  },
  {
    "text": "a trace point it could be a network",
    "start": "219720",
    "end": "222480"
  },
  {
    "text": "packet arriving at a certain point in",
    "start": "222480",
    "end": "225120"
  },
  {
    "text": "the networking stack",
    "start": "225120",
    "end": "226560"
  },
  {
    "text": "whenever the event happens our custom",
    "start": "226560",
    "end": "229739"
  },
  {
    "text": "ebpf program gets run",
    "start": "229739",
    "end": "233040"
  },
  {
    "text": "and",
    "start": "233040",
    "end": "234420"
  },
  {
    "text": "if we attach ebpf programs to different",
    "start": "234420",
    "end": "237420"
  },
  {
    "text": "types of events we can use that to",
    "start": "237420",
    "end": "240000"
  },
  {
    "text": "observe what's happening in the kernel",
    "start": "240000",
    "end": "242940"
  },
  {
    "text": "perhaps even react to those events for",
    "start": "242940",
    "end": "245400"
  },
  {
    "text": "security purposes or networking tooling",
    "start": "245400",
    "end": "249840"
  },
  {
    "text": "in kubernetes our applications are still",
    "start": "249840",
    "end": "252720"
  },
  {
    "text": "running in user space but they're inside",
    "start": "252720",
    "end": "255060"
  },
  {
    "text": "containers inside pods",
    "start": "255060",
    "end": "258419"
  },
  {
    "text": "there's only one kernel per machine or",
    "start": "258419",
    "end": "262320"
  },
  {
    "text": "virtual machine so one kernel per host",
    "start": "262320",
    "end": "265080"
  },
  {
    "text": "and that kernel is shared across all of",
    "start": "265080",
    "end": "268560"
  },
  {
    "text": "the processes all of the containers that",
    "start": "268560",
    "end": "271080"
  },
  {
    "text": "run on that host",
    "start": "271080",
    "end": "273918"
  },
  {
    "text": "as before our applications if they want",
    "start": "274440",
    "end": "277080"
  },
  {
    "text": "to do anything interesting like sending",
    "start": "277080",
    "end": "279360"
  },
  {
    "text": "and receiving networking messages",
    "start": "279360",
    "end": "280620"
  },
  {
    "text": "reading and writing to a file the kernel",
    "start": "280620",
    "end": "283560"
  },
  {
    "text": "is going to be involved",
    "start": "283560",
    "end": "285660"
  },
  {
    "text": "so the colonel is aware and perhaps",
    "start": "285660",
    "end": "288780"
  },
  {
    "text": "involved in everything that's happening",
    "start": "288780",
    "end": "290520"
  },
  {
    "text": "on that host",
    "start": "290520",
    "end": "291780"
  },
  {
    "text": "and if we attach evpf programs to the",
    "start": "291780",
    "end": "294720"
  },
  {
    "text": "right events on the host we can build",
    "start": "294720",
    "end": "297479"
  },
  {
    "text": "tooling that is aware of all of those",
    "start": "297479",
    "end": "300419"
  },
  {
    "text": "applications running in all of our pods",
    "start": "300419",
    "end": "303240"
  },
  {
    "text": "on that host we only have to instrument",
    "start": "303240",
    "end": "306660"
  },
  {
    "text": "the host we don't have to instrument",
    "start": "306660",
    "end": "309080"
  },
  {
    "text": "every single pod",
    "start": "309080",
    "end": "312620"
  },
  {
    "text": "so I've talked about what ebpf is I've",
    "start": "313380",
    "end": "316680"
  },
  {
    "text": "talked about what sidecars are let's",
    "start": "316680",
    "end": "319620"
  },
  {
    "text": "dig in a little bit to some of the",
    "start": "319620",
    "end": "321600"
  },
  {
    "text": "advantages of ebpf over sidecars",
    "start": "321600",
    "end": "325860"
  },
  {
    "text": "for a sidecar container to be aware of",
    "start": "325860",
    "end": "328860"
  },
  {
    "text": "what's happening in a pod it has to run",
    "start": "328860",
    "end": "331560"
  },
  {
    "text": "inside the same namespaces the same",
    "start": "331560",
    "end": "334560"
  },
  {
    "text": "Linux namespaces as the application",
    "start": "334560",
    "end": "338039"
  },
  {
    "text": "and to get it there inside the Pod we",
    "start": "338039",
    "end": "341100"
  },
  {
    "text": "have to have some yaml code",
    "start": "341100",
    "end": "343800"
  },
  {
    "text": "normally that yaml is created",
    "start": "343800",
    "end": "346620"
  },
  {
    "text": "automatically perhaps by an admission",
    "start": "346620",
    "end": "349440"
  },
  {
    "text": "controller or through CI CD",
    "start": "349440",
    "end": "353220"
  },
  {
    "text": "but suppose something goes wrong or",
    "start": "353220",
    "end": "356100"
  },
  {
    "text": "there's some misconfiguration if the",
    "start": "356100",
    "end": "358680"
  },
  {
    "text": "yaml doesn't get injected into that pod",
    "start": "358680",
    "end": "361020"
  },
  {
    "text": "the container won't be injected into",
    "start": "361020",
    "end": "363360"
  },
  {
    "text": "that pod there will be no",
    "start": "363360",
    "end": "365100"
  },
  {
    "text": "instrumentation of that pod",
    "start": "365100",
    "end": "368759"
  },
  {
    "text": "and then that pod is not visible the",
    "start": "368759",
    "end": "371820"
  },
  {
    "text": "tooling can't have any influence over",
    "start": "371820",
    "end": "374220"
  },
  {
    "text": "that pod",
    "start": "374220",
    "end": "376560"
  },
  {
    "start": "376000",
    "end": "376000"
  },
  {
    "text": "ebpf doesn't need any app configuration",
    "start": "376560",
    "end": "380340"
  },
  {
    "text": "changes at all because we're loading the",
    "start": "380340",
    "end": "382680"
  },
  {
    "text": "ebpf program into the kernel",
    "start": "382680",
    "end": "385919"
  },
  {
    "text": "and as soon as you attach an ebpf",
    "start": "385919",
    "end": "388259"
  },
  {
    "text": "program to event an event",
    "start": "388259",
    "end": "391199"
  },
  {
    "text": "it's going to be triggered regardless of",
    "start": "391199",
    "end": "393900"
  },
  {
    "text": "whether the Pod was running already you",
    "start": "393900",
    "end": "396120"
  },
  {
    "text": "don't have to restart your pods they're",
    "start": "396120",
    "end": "398580"
  },
  {
    "text": "always going to be triggering those ebpf",
    "start": "398580",
    "end": "401220"
  },
  {
    "text": "events there's no need to reconfigure",
    "start": "401220",
    "end": "403500"
  },
  {
    "text": "your pods you don't even have to restart",
    "start": "403500",
    "end": "405900"
  },
  {
    "text": "them",
    "start": "405900",
    "end": "408440"
  },
  {
    "text": "also ebpf is going to be aware of all",
    "start": "408539",
    "end": "412080"
  },
  {
    "text": "the activity on that node even if it's",
    "start": "412080",
    "end": "415080"
  },
  {
    "text": "malicious activity as well as the",
    "start": "415080",
    "end": "417780"
  },
  {
    "text": "expected activity so tooling can see",
    "start": "417780",
    "end": "420900"
  },
  {
    "text": "malicious processes running on the Node",
    "start": "420900",
    "end": "425660"
  },
  {
    "start": "424000",
    "end": "424000"
  },
  {
    "text": "the cycle model can also be pretty",
    "start": "426960",
    "end": "429300"
  },
  {
    "text": "wasteful of resources",
    "start": "429300",
    "end": "431580"
  },
  {
    "text": "every pod has to be configured to have",
    "start": "431580",
    "end": "434340"
  },
  {
    "text": "sufficient memory and CPU not just for",
    "start": "434340",
    "end": "437340"
  },
  {
    "text": "the application but also for the sidecar",
    "start": "437340",
    "end": "439560"
  },
  {
    "text": "container and we need to have duplicate",
    "start": "439560",
    "end": "443160"
  },
  {
    "text": "copies of state and configuration",
    "start": "443160",
    "end": "445860"
  },
  {
    "text": "information inside every pod because by",
    "start": "445860",
    "end": "449639"
  },
  {
    "text": "Design pods are isolated from each other",
    "start": "449639",
    "end": "452580"
  },
  {
    "text": "you can only share information using",
    "start": "452580",
    "end": "455520"
  },
  {
    "text": "shared files or network access network",
    "start": "455520",
    "end": "457680"
  },
  {
    "text": "messages",
    "start": "457680",
    "end": "459000"
  },
  {
    "text": "in eppf we have a concept called ebpf",
    "start": "459000",
    "end": "464220"
  },
  {
    "text": "Maps these are data structures that make",
    "start": "464220",
    "end": "467280"
  },
  {
    "text": "it very efficient to share data between",
    "start": "467280",
    "end": "470360"
  },
  {
    "text": "ebpf programs in the kernel and our user",
    "start": "470360",
    "end": "474660"
  },
  {
    "text": "space tooling agents",
    "start": "474660",
    "end": "477960"
  },
  {
    "text": "so",
    "start": "477960",
    "end": "479099"
  },
  {
    "text": "lots of tools have already been written",
    "start": "479099",
    "end": "482160"
  },
  {
    "text": "that take advantage of ebpf and its",
    "start": "482160",
    "end": "485940"
  },
  {
    "text": "power let's look at a couple of examples",
    "start": "485940",
    "end": "488280"
  },
  {
    "text": "from the cncf landscape",
    "start": "488280",
    "end": "491340"
  },
  {
    "text": "the first I'll mention is Pixie this",
    "start": "491340",
    "end": "494639"
  },
  {
    "text": "uses ebpf to collect metrics and all",
    "start": "494639",
    "end": "498419"
  },
  {
    "text": "sorts of different metrics from all the",
    "start": "498419",
    "end": "501599"
  },
  {
    "text": "nodes in your cluster brings them",
    "start": "501599",
    "end": "503639"
  },
  {
    "text": "together and presents them in various",
    "start": "503639",
    "end": "506220"
  },
  {
    "text": "graphical ways this is just one example",
    "start": "506220",
    "end": "509280"
  },
  {
    "text": "of the kind of information you can get",
    "start": "509280",
    "end": "512459"
  },
  {
    "text": "with Pixie it's a flame graph showing",
    "start": "512459",
    "end": "515520"
  },
  {
    "text": "CPU usage across an entire cluster",
    "start": "515520",
    "end": "519719"
  },
  {
    "text": "another observability tool is the Hubble",
    "start": "519719",
    "end": "523080"
  },
  {
    "start": "520000",
    "end": "520000"
  },
  {
    "text": "component of psyllium which gives",
    "start": "523080",
    "end": "525540"
  },
  {
    "text": "visibility into networking information",
    "start": "525540",
    "end": "528440"
  },
  {
    "text": "we can see individual packets and we can",
    "start": "528440",
    "end": "532680"
  },
  {
    "text": "see the build up of a service map",
    "start": "532680",
    "end": "535860"
  },
  {
    "text": "showing how traffic is Flowing between",
    "start": "535860",
    "end": "537839"
  },
  {
    "text": "different kubernetes services and we",
    "start": "537839",
    "end": "540720"
  },
  {
    "text": "also get metrics information at both",
    "start": "540720",
    "end": "543899"
  },
  {
    "text": "layer 3 4 and layer 7 the application",
    "start": "543899",
    "end": "547320"
  },
  {
    "text": "layer",
    "start": "547320",
    "end": "549660"
  },
  {
    "start": "549000",
    "end": "549000"
  },
  {
    "text": "Hubble is part of the psyllium project",
    "start": "549660",
    "end": "552120"
  },
  {
    "text": "and psyllium also uses ebpf to provide",
    "start": "552120",
    "end": "556160"
  },
  {
    "text": "efficient networking connectivity",
    "start": "556160",
    "end": "559680"
  },
  {
    "text": "I mentioned that evpf can attach",
    "start": "559680",
    "end": "562980"
  },
  {
    "text": "programs to events in the networking",
    "start": "562980",
    "end": "565920"
  },
  {
    "text": "stack and we can use that to bypass",
    "start": "565920",
    "end": "569760"
  },
  {
    "text": "parts of the stack to deliver packets",
    "start": "569760",
    "end": "572339"
  },
  {
    "text": "much more efficiently within a",
    "start": "572339",
    "end": "574440"
  },
  {
    "text": "kubernetes network",
    "start": "574440",
    "end": "576600"
  },
  {
    "text": "and as well as providing connectivity",
    "start": "576600",
    "end": "579720"
  },
  {
    "text": "psyllium is also providing security",
    "start": "579720",
    "end": "581760"
  },
  {
    "text": "using ebpf it gives transparent",
    "start": "581760",
    "end": "585120"
  },
  {
    "text": "encryption so we can encrypt traffic",
    "start": "585120",
    "end": "587580"
  },
  {
    "text": "between nodes in the kernel",
    "start": "587580",
    "end": "590399"
  },
  {
    "text": "and we can use ebpf to enforce Network",
    "start": "590399",
    "end": "594360"
  },
  {
    "text": "policy by dropping Network packets that",
    "start": "594360",
    "end": "597300"
  },
  {
    "text": "are out of policy",
    "start": "597300",
    "end": "600180"
  },
  {
    "text": "and about a year ago we added some",
    "start": "600180",
    "end": "603000"
  },
  {
    "text": "additional capabilities to psyllium so",
    "start": "603000",
    "end": "605279"
  },
  {
    "text": "that it can act as a service mesh",
    "start": "605279",
    "end": "608899"
  },
  {
    "text": "sidecarless service mesh",
    "start": "608899",
    "end": "612180"
  },
  {
    "start": "612000",
    "end": "612000"
  },
  {
    "text": "now what's a service mesh a service mesh",
    "start": "612180",
    "end": "615540"
  },
  {
    "text": "provides connectivity between apps at a",
    "start": "615540",
    "end": "618959"
  },
  {
    "text": "service level it abstracts away the",
    "start": "618959",
    "end": "621420"
  },
  {
    "text": "underlying Network and provides",
    "start": "621420",
    "end": "623700"
  },
  {
    "text": "additional features like observability",
    "start": "623700",
    "end": "626220"
  },
  {
    "text": "and security and traffic management",
    "start": "626220",
    "end": "630420"
  },
  {
    "text": "so the Innovation that psyllium",
    "start": "630420",
    "end": "633180"
  },
  {
    "text": "brought to the world of service mesh is",
    "start": "633180",
    "end": "636540"
  },
  {
    "text": "building it without sidecars which we",
    "start": "636540",
    "end": "639240"
  },
  {
    "text": "can do because of the power of ebpf",
    "start": "639240",
    "end": "643320"
  },
  {
    "start": "642000",
    "end": "642000"
  },
  {
    "text": "now",
    "start": "643320",
    "end": "644519"
  },
  {
    "text": "all service meshes use a network proxy",
    "start": "644519",
    "end": "647820"
  },
  {
    "text": "to handle and process traffic at the",
    "start": "647820",
    "end": "651000"
  },
  {
    "text": "application layer layer 7.",
    "start": "651000",
    "end": "653760"
  },
  {
    "text": "and other service meshes have used the",
    "start": "653760",
    "end": "657300"
  },
  {
    "text": "sidecar model for that proxy so there's",
    "start": "657300",
    "end": "661140"
  },
  {
    "text": "a proxy injected into every application",
    "start": "661140",
    "end": "664320"
  },
  {
    "text": "pod",
    "start": "664320",
    "end": "665940"
  },
  {
    "text": "celine's implementation allows us to",
    "start": "665940",
    "end": "668459"
  },
  {
    "text": "share a network proxy across multiple",
    "start": "668459",
    "end": "671760"
  },
  {
    "text": "pods",
    "start": "671760",
    "end": "674100"
  },
  {
    "text": "avoiding the sidecar model helps to",
    "start": "674100",
    "end": "676860"
  },
  {
    "text": "avoid the complexity and resource usage",
    "start": "676860",
    "end": "680220"
  },
  {
    "text": "that has often been associated with",
    "start": "680220",
    "end": "682980"
  },
  {
    "text": "configuring the proxy in every single",
    "start": "682980",
    "end": "685500"
  },
  {
    "text": "pod per Kelsey's quote about service",
    "start": "685500",
    "end": "688980"
  },
  {
    "text": "mess",
    "start": "688980",
    "end": "690839"
  },
  {
    "text": "combining this with ebpf also gives us a",
    "start": "690839",
    "end": "693959"
  },
  {
    "start": "692000",
    "end": "692000"
  },
  {
    "text": "much more efficient networking path and",
    "start": "693959",
    "end": "696540"
  },
  {
    "text": "a shorter networking path means reduced",
    "start": "696540",
    "end": "699959"
  },
  {
    "text": "networking latency",
    "start": "699959",
    "end": "702540"
  },
  {
    "text": "in the sidecar model every single",
    "start": "702540",
    "end": "705600"
  },
  {
    "text": "Network packet has to Traverse the",
    "start": "705600",
    "end": "708300"
  },
  {
    "text": "networking stack multiple times to pass",
    "start": "708300",
    "end": "711060"
  },
  {
    "text": "through that proxy",
    "start": "711060",
    "end": "714420"
  },
  {
    "text": "and if you have",
    "start": "714420",
    "end": "716339"
  },
  {
    "text": "two pods communicating both having a",
    "start": "716339",
    "end": "719040"
  },
  {
    "text": "proxy then the networking path gets",
    "start": "719040",
    "end": "722100"
  },
  {
    "text": "pretty convoluted because it has to pass",
    "start": "722100",
    "end": "724380"
  },
  {
    "text": "through a proxy at both ends",
    "start": "724380",
    "end": "728220"
  },
  {
    "text": "if we run a the proxy outside of the Pod",
    "start": "728220",
    "end": "733140"
  },
  {
    "text": "then we can create a much more direct",
    "start": "733140",
    "end": "735740"
  },
  {
    "text": "networking path between two different",
    "start": "735740",
    "end": "738240"
  },
  {
    "text": "pods only passing through the proxy once",
    "start": "738240",
    "end": "741180"
  },
  {
    "text": "and only passing through the proxy when",
    "start": "741180",
    "end": "744000"
  },
  {
    "text": "it needs to because layer 7 traffic is",
    "start": "744000",
    "end": "747240"
  },
  {
    "text": "involved",
    "start": "747240",
    "end": "749399"
  },
  {
    "text": "and we know from psyllium beta testers",
    "start": "749399",
    "end": "752160"
  },
  {
    "text": "that this ability to avoid the",
    "start": "752160",
    "end": "756060"
  },
  {
    "text": "operational complexity and the improved",
    "start": "756060",
    "end": "759000"
  },
  {
    "text": "latency is really attractive there are",
    "start": "759000",
    "end": "762600"
  },
  {
    "text": "many organizations for whom psychar",
    "start": "762600",
    "end": "765660"
  },
  {
    "text": "based proxies it's just been too high a",
    "start": "765660",
    "end": "768660"
  },
  {
    "text": "price to pay for the functionality that",
    "start": "768660",
    "end": "771420"
  },
  {
    "text": "they get",
    "start": "771420",
    "end": "773779"
  },
  {
    "text": "psyllium was the first to implement",
    "start": "774839",
    "end": "777360"
  },
  {
    "text": "service mesh with outside cars but now",
    "start": "777360",
    "end": "779940"
  },
  {
    "text": "istio has also followed Suite with the",
    "start": "779940",
    "end": "783420"
  },
  {
    "text": "ambient mesh approach there are some",
    "start": "783420",
    "end": "786779"
  },
  {
    "text": "differences in how psyllium and istio",
    "start": "786779",
    "end": "789480"
  },
  {
    "text": "are approaching this but they're both",
    "start": "789480",
    "end": "792300"
  },
  {
    "text": "taking sidecars out of the equation they",
    "start": "792300",
    "end": "795480"
  },
  {
    "text": "both use Envoy proxy to handle the",
    "start": "795480",
    "end": "798240"
  },
  {
    "text": "complexity of layer 7.",
    "start": "798240",
    "end": "801019"
  },
  {
    "text": "sidecars have always been an unfortunate",
    "start": "801019",
    "end": "803940"
  },
  {
    "text": "implementation detail",
    "start": "803940",
    "end": "805920"
  },
  {
    "text": "mesh features will move to the",
    "start": "805920",
    "end": "807959"
  },
  {
    "text": "underlying infrastructure at that's from",
    "start": "807959",
    "end": "810420"
  },
  {
    "text": "Matt Klein who originally wrote the",
    "start": "810420",
    "end": "812820"
  },
  {
    "text": "envoy proxy",
    "start": "812820",
    "end": "815760"
  },
  {
    "text": "and with psyllium we've moved a",
    "start": "815760",
    "end": "818579"
  },
  {
    "text": "significant part of that service mesh",
    "start": "818579",
    "end": "820440"
  },
  {
    "text": "functional functionality into the kernel",
    "start": "820440",
    "end": "823980"
  },
  {
    "text": "itself",
    "start": "823980",
    "end": "825120"
  },
  {
    "text": "and we delegate responsibility to the",
    "start": "825120",
    "end": "827639"
  },
  {
    "text": "envoy proxy and uses user space to",
    "start": "827639",
    "end": "830639"
  },
  {
    "text": "handle layer 7 complex processing",
    "start": "830639",
    "end": "835200"
  },
  {
    "text": "this idea of running processing inside",
    "start": "835200",
    "end": "839160"
  },
  {
    "text": "the kernel and delegating complex parts",
    "start": "839160",
    "end": "841980"
  },
  {
    "text": "to user space",
    "start": "841980",
    "end": "843899"
  },
  {
    "text": "has been done before",
    "start": "843899",
    "end": "845940"
  },
  {
    "text": "we're doing it in networking in service",
    "start": "845940",
    "end": "848220"
  },
  {
    "start": "846000",
    "end": "846000"
  },
  {
    "text": "mesh",
    "start": "848220",
    "end": "849899"
  },
  {
    "text": "similar pattern is used by suricata",
    "start": "849899",
    "end": "852480"
  },
  {
    "text": "security tooling which makes security",
    "start": "852480",
    "end": "855420"
  },
  {
    "text": "decisions in user space based on packets",
    "start": "855420",
    "end": "859139"
  },
  {
    "text": "sent to user Space by the kernel using",
    "start": "859139",
    "end": "862019"
  },
  {
    "text": "nfq",
    "start": "862019",
    "end": "863880"
  },
  {
    "text": "or if you plug in a hardware device in",
    "start": "863880",
    "end": "866639"
  },
  {
    "text": "Linux the kernel will call to a user",
    "start": "866639",
    "end": "869880"
  },
  {
    "text": "mode helper typically to help with the",
    "start": "869880",
    "end": "872880"
  },
  {
    "text": "complexities of configuring that device",
    "start": "872880",
    "end": "875279"
  },
  {
    "text": "when the kernel module gets loaded",
    "start": "875279",
    "end": "879440"
  },
  {
    "text": "now in service mesh there might still be",
    "start": "879540",
    "end": "882000"
  },
  {
    "text": "reasons why you do want to co-locate",
    "start": "882000",
    "end": "885380"
  },
  {
    "text": "your proxy inside the pod",
    "start": "885380",
    "end": "889199"
  },
  {
    "text": "if you're running complex custom wasn't",
    "start": "889199",
    "end": "892680"
  },
  {
    "text": "filters in your Envoy proxy you might",
    "start": "892680",
    "end": "895980"
  },
  {
    "text": "want to isolate that proxy from other",
    "start": "895980",
    "end": "898440"
  },
  {
    "text": "pods so you could continue to do that",
    "start": "898440",
    "end": "901199"
  },
  {
    "text": "using the sidecar model",
    "start": "901199",
    "end": "904139"
  },
  {
    "text": "and I think we'll actually see service",
    "start": "904139",
    "end": "906300"
  },
  {
    "text": "meshes offering a range of options for",
    "start": "906300",
    "end": "909300"
  },
  {
    "text": "how the proxy is isolated how many",
    "start": "909300",
    "end": "913079"
  },
  {
    "text": "instances of the proxy exist",
    "start": "913079",
    "end": "917720"
  },
  {
    "text": "the last part of the service mesh puzzle",
    "start": "918120",
    "end": "920579"
  },
  {
    "text": "is encryption",
    "start": "920579",
    "end": "923279"
  },
  {
    "text": "Mutual authentication between",
    "start": "923279",
    "end": "925320"
  },
  {
    "text": "application workloads is a really",
    "start": "925320",
    "end": "927660"
  },
  {
    "text": "important feature for many organizations",
    "start": "927660",
    "end": "931620"
  },
  {
    "text": "let's have a look at how we're handling",
    "start": "931620",
    "end": "933360"
  },
  {
    "text": "that in psyllium using ebpf so I already",
    "start": "933360",
    "end": "937320"
  },
  {
    "start": "936000",
    "end": "936000"
  },
  {
    "text": "mentioned that we support transparent",
    "start": "937320",
    "end": "940440"
  },
  {
    "text": "encryption",
    "start": "940440",
    "end": "941820"
  },
  {
    "text": "traffic that flows between different",
    "start": "941820",
    "end": "944279"
  },
  {
    "text": "nodes gets encrypted in the kernel using",
    "start": "944279",
    "end": "947639"
  },
  {
    "text": "either ipsec or wireguard",
    "start": "947639",
    "end": "950820"
  },
  {
    "text": "and this is has been really great for",
    "start": "950820",
    "end": "954000"
  },
  {
    "text": "many organizations because all traffic",
    "start": "954000",
    "end": "956160"
  },
  {
    "text": "is encrypted and it's very easy to",
    "start": "956160",
    "end": "958740"
  },
  {
    "text": "manage",
    "start": "958740",
    "end": "960000"
  },
  {
    "text": "and you can also use psyllium Network",
    "start": "960000",
    "end": "962820"
  },
  {
    "text": "policy to ensure that the traffic that",
    "start": "962820",
    "end": "966300"
  },
  {
    "text": "flows between different Services is",
    "start": "966300",
    "end": "969360"
  },
  {
    "text": "permitted",
    "start": "969360",
    "end": "971880"
  },
  {
    "text": "but we're now working on a next",
    "start": "971880",
    "end": "973800"
  },
  {
    "text": "generation of encryption Mutual",
    "start": "973800",
    "end": "976800"
  },
  {
    "text": "encryption using application workload",
    "start": "976800",
    "end": "980339"
  },
  {
    "text": "identities",
    "start": "980339",
    "end": "981779"
  },
  {
    "text": "so you can use the identity management",
    "start": "981779",
    "end": "984720"
  },
  {
    "text": "system of your choice spiffy cert",
    "start": "984720",
    "end": "987600"
  },
  {
    "text": "manager whatever else",
    "start": "987600",
    "end": "989639"
  },
  {
    "text": "to manage the identities and the",
    "start": "989639",
    "end": "992820"
  },
  {
    "text": "certificates that represent",
    "start": "992820",
    "end": "995040"
  },
  {
    "text": "each individual application workload",
    "start": "995040",
    "end": "998399"
  },
  {
    "text": "and psyllium will inject those",
    "start": "998399",
    "end": "1000139"
  },
  {
    "text": "certificates into the kernel and we'll",
    "start": "1000139",
    "end": "1002660"
  },
  {
    "text": "use kernel level encryption for",
    "start": "1002660",
    "end": "1005660"
  },
  {
    "text": "encrypting the traffic",
    "start": "1005660",
    "end": "1008560"
  },
  {
    "text": "so we've solved a lot of the problems in",
    "start": "1009680",
    "end": "1012800"
  },
  {
    "text": "service mesh in observability and",
    "start": "1012800",
    "end": "1015680"
  },
  {
    "text": "security tooling using ebpf does this",
    "start": "1015680",
    "end": "1018440"
  },
  {
    "text": "mean we will never see sidecars again",
    "start": "1018440",
    "end": "1022100"
  },
  {
    "text": "I'm sure we will still see some use of",
    "start": "1022100",
    "end": "1025160"
  },
  {
    "text": "sidecars",
    "start": "1025160",
    "end": "1026418"
  },
  {
    "text": "first of all ebpf program is essentially",
    "start": "1026419",
    "end": "1030260"
  },
  {
    "text": "kernel programming so there's a pretty",
    "start": "1030260",
    "end": "1033140"
  },
  {
    "text": "high barrier to writing ebpf programs",
    "start": "1033140",
    "end": "1037160"
  },
  {
    "text": "I don't think people will immediately",
    "start": "1037160",
    "end": "1039740"
  },
  {
    "text": "rewrite all their infrastructure tooling",
    "start": "1039740",
    "end": "1042140"
  },
  {
    "text": "using ebpf",
    "start": "1042140",
    "end": "1043699"
  },
  {
    "text": "and certainly",
    "start": "1043699",
    "end": "1045438"
  },
  {
    "text": "the sidecar model will be a lot easier",
    "start": "1045439",
    "end": "1048079"
  },
  {
    "text": "for many developers to experiment with",
    "start": "1048079",
    "end": "1053179"
  },
  {
    "text": "the other reason to use sidecars will be",
    "start": "1053179",
    "end": "1056179"
  },
  {
    "text": "if you don't have access to the",
    "start": "1056179",
    "end": "1058460"
  },
  {
    "text": "underlying node",
    "start": "1058460",
    "end": "1059960"
  },
  {
    "text": "in many managed kubernetes environment",
    "start": "1059960",
    "end": "1062600"
  },
  {
    "text": "you'll need the cooperation of a cloud",
    "start": "1062600",
    "end": "1065179"
  },
  {
    "text": "provider if you want to use ebpf based",
    "start": "1065179",
    "end": "1068480"
  },
  {
    "text": "tooling",
    "start": "1068480",
    "end": "1070820"
  },
  {
    "text": "but the power and the efficiency of ebpf",
    "start": "1070820",
    "end": "1074660"
  },
  {
    "text": "means I'm sure we're going to see much",
    "start": "1074660",
    "end": "1077660"
  },
  {
    "text": "more infrastructure tooling built on",
    "start": "1077660",
    "end": "1080360"
  },
  {
    "text": "that platform",
    "start": "1080360",
    "end": "1083080"
  },
  {
    "start": "1083000",
    "end": "1083000"
  },
  {
    "text": "and one of the real reasons for for that",
    "start": "1083419",
    "end": "1086539"
  },
  {
    "text": "will be the pull",
    "start": "1086539",
    "end": "1089000"
  },
  {
    "text": "of users who demand improved performance",
    "start": "1089000",
    "end": "1092059"
  },
  {
    "text": "and we see proven performance",
    "start": "1092059",
    "end": "1094940"
  },
  {
    "text": "improvements because of things like",
    "start": "1094940",
    "end": "1097340"
  },
  {
    "text": "reduce Network latency because we can",
    "start": "1097340",
    "end": "1100340"
  },
  {
    "text": "run so efficiently in the kernel and",
    "start": "1100340",
    "end": "1103460"
  },
  {
    "text": "because we can load those ebpf programs",
    "start": "1103460",
    "end": "1106760"
  },
  {
    "text": "dynamically",
    "start": "1106760",
    "end": "1109720"
  },
  {
    "text": "so I think the sidecar model still has",
    "start": "1110660",
    "end": "1112820"
  },
  {
    "text": "its place we will continue to see it",
    "start": "1112820",
    "end": "1115460"
  },
  {
    "text": "used in some environments I believe ebpf",
    "start": "1115460",
    "end": "1119120"
  },
  {
    "text": "has a huge role to play in the future of",
    "start": "1119120",
    "end": "1122120"
  },
  {
    "text": "infrastructure tooling for networking",
    "start": "1122120",
    "end": "1124460"
  },
  {
    "text": "for observability and for security",
    "start": "1124460",
    "end": "1127940"
  },
  {
    "text": "if you'd like to learn more about evpf",
    "start": "1127940",
    "end": "1130400"
  },
  {
    "text": "I'll be giving away copies of a book",
    "start": "1130400",
    "end": "1133880"
  },
  {
    "text": "called what is ebpf that I wrote we'll",
    "start": "1133880",
    "end": "1136400"
  },
  {
    "text": "be doing that in the networking session",
    "start": "1136400",
    "end": "1138679"
  },
  {
    "text": "this evening so I hope you'll come and",
    "start": "1138679",
    "end": "1141440"
  },
  {
    "text": "say hello and we'll we'll get you a copy",
    "start": "1141440",
    "end": "1143720"
  },
  {
    "text": "of that book",
    "start": "1143720",
    "end": "1145280"
  },
  {
    "text": "thank you arigato gozaimas",
    "start": "1145280",
    "end": "1148220"
  },
  {
    "text": "[Applause]",
    "start": "1148220",
    "end": "1152900"
  }
]