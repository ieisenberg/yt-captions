[
  {
    "text": "okay hello everybody Welcome to this presentation thank you so much for attending my presentation I'm Mauricio I",
    "start": "1160",
    "end": "9080"
  },
  {
    "text": "work as a software engineer for Microsoft and today I will be presenting",
    "start": "9080",
    "end": "14200"
  },
  {
    "text": "you how to collect low level metrics by using BPF so yeah in the agenda of today",
    "start": "14200",
    "end": "21320"
  },
  {
    "text": "I want to introduce the concept of metrics I hope that you many of you are already familiar with that otherwise",
    "start": "21320",
    "end": "27320"
  },
  {
    "text": "this is just a quick introduction to metrics and the same for ebpf I will be covering very quickly what ebpf is and",
    "start": "27320",
    "end": "33760"
  },
  {
    "text": "some concept that we need to understand the content of this talk then after that I will be speaking what is the",
    "start": "33760",
    "end": "39879"
  },
  {
    "text": "relationship between Matrix and ebpf and finally I will be presenting some of the",
    "start": "39879",
    "end": "45039"
  },
  {
    "text": "projects that we can use to collect matrics by using BPF okay so there we are so metrics by",
    "start": "45039",
    "end": "55480"
  },
  {
    "text": "definition a metric is a measurement of a service capture around time so we can think of a metric like a number that",
    "start": "55480",
    "end": "62160"
  },
  {
    "text": "represents the performance of of the help of our service so yeah examples of",
    "start": "62160",
    "end": "69479"
  },
  {
    "text": "metrics are the CP the percentage of CPU that our system is using the quantity of",
    "start": "69479",
    "end": "76280"
  },
  {
    "text": "run that our system is using the error rate of the response",
    "start": "76280",
    "end": "81360"
  },
  {
    "text": "that output of our system or yeah basically any numeric measurement that you can do on your system that",
    "start": "81360",
    "end": "88159"
  },
  {
    "text": "represents the performance of that so why do we need metrics well by",
    "start": "88159",
    "end": "94840"
  },
  {
    "text": "using metrics we are able to understand if our service is available and also we are able to understand what is the",
    "start": "94840",
    "end": "101200"
  },
  {
    "text": "performance of our service yeah for sure probably many many of you get alerts",
    "start": "101200",
    "end": "106960"
  },
  {
    "text": "when a metric is changing on the system when there is a an outage so yeah we we",
    "start": "106960",
    "end": "112360"
  },
  {
    "text": "can configure those roles H to understand when there is an issue with",
    "start": "112360",
    "end": "117680"
  },
  {
    "text": "our system and another thing that we can use metrix for is to perform trigger",
    "start": "117680",
    "end": "123280"
  },
  {
    "text": "scheduling decision so if we need to allocate more resources for our system or maybe we have so many resources and",
    "start": "123280",
    "end": "130039"
  },
  {
    "text": "we need to remove some of them for our system there are different kind of",
    "start": "130039",
    "end": "135840"
  },
  {
    "text": "metrics so the first one is like the simplest one to understand is the counter so the counter is a numeric",
    "start": "135840",
    "end": "142840"
  },
  {
    "text": "value that only can go up so we can use counters for representing the the",
    "start": "142840",
    "end": "147920"
  },
  {
    "text": "numbers of bucket that are being on a system the total H the number of",
    "start": "147920",
    "end": "153720"
  },
  {
    "text": "requests that are being processed and so on the second one is gauges so gauges",
    "start": "153720",
    "end": "159440"
  },
  {
    "text": "are is also a single numerical type that can go up or down and example of gauge",
    "start": "159440",
    "end": "165640"
  },
  {
    "text": "could be the CPU usage on our system so we can have high CPU usage but it can go",
    "start": "165640",
    "end": "172280"
  },
  {
    "text": "down or up the same for memory so we can our system could consume more or less memory",
    "start": "172280",
    "end": "178760"
  },
  {
    "text": "so yeah that's a numeric value that can go down or up and the last one well I",
    "start": "178760",
    "end": "184319"
  },
  {
    "text": "forgot to say that this is the definition according to promos if you go to open Telemetry there is like a",
    "start": "184319",
    "end": "189680"
  },
  {
    "text": "different definition but in the end the core concept is the same for all of them",
    "start": "189680",
    "end": "195400"
  },
  {
    "text": "so histograms are the more like the most difficult one to explain so the idea there is that we make a measurement we",
    "start": "195400",
    "end": "202400"
  },
  {
    "text": "divide the range of possible values into different buckets and then when we have",
    "start": "202400",
    "end": "208000"
  },
  {
    "text": "the measurement we increase the counter for some of those buckets so yeah",
    "start": "208000",
    "end": "213080"
  },
  {
    "text": "histogram are used for latency measurements in",
    "start": "213080",
    "end": "218439"
  },
  {
    "text": "general so they provide some statistical information about what is going on with our system there so what is the average",
    "start": "218439",
    "end": "224840"
  },
  {
    "text": "response time or if there are any outliers and things like that okay and the other concept that I",
    "start": "224840",
    "end": "231879"
  },
  {
    "text": "want to introduce very quickly today about metrics are the dimensions so when we perform a measurement we not only",
    "start": "231879",
    "end": "239000"
  },
  {
    "text": "care about the numerical value but we only take additional information for",
    "start": "239000",
    "end": "244319"
  },
  {
    "text": "that metric so those are dimensions called labels or also attributes so for",
    "start": "244319",
    "end": "251280"
  },
  {
    "text": "instance when if we are taking the number of packets that are being sent on a system we only not care about all the",
    "start": "251280",
    "end": "257759"
  },
  {
    "text": "packets but we not but we want to provide additional information on those for instance what is the network",
    "start": "257759",
    "end": "264120"
  },
  {
    "text": "interface where we are sending those Pockets what is IP protocol and so on so",
    "start": "264120",
    "end": "270199"
  },
  {
    "text": "dimensions are important because by using there we are able to aggregate the data so in the in the example that we",
    "start": "270199",
    "end": "275880"
  },
  {
    "text": "have there for instance if we only care about a specific h i if we only care about the",
    "start": "275880",
    "end": "283400"
  },
  {
    "text": "network interface we can aggregate the data we can remove the IP protocol label",
    "start": "283400",
    "end": "289080"
  },
  {
    "text": "so we can get data by specific medwork interface and also we can perform",
    "start": "289080",
    "end": "294800"
  },
  {
    "text": "filtering so for instance if we only care about ipv4 we can filter all other",
    "start": "294800",
    "end": "299880"
  },
  {
    "text": "values there so the the cardinality of a metric refers to the number of",
    "start": "299880",
    "end": "307039"
  },
  {
    "text": "combination of the labels so in the in this case the cardinality is for because we have two different interfaces two",
    "start": "307039",
    "end": "313880"
  },
  {
    "text": "different values for the IP protocol so what what is the point about cardinality",
    "start": "313880",
    "end": "319080"
  },
  {
    "text": "when we capture metrics we want to keep the cardinality as high as possible because we want to have as much",
    "start": "319080",
    "end": "325639"
  },
  {
    "text": "information as possible but when we have high cardinality we our observability system need more",
    "start": "325639",
    "end": "333160"
  },
  {
    "text": "resources especially memory so we have to find the right balance there we need",
    "start": "333160",
    "end": "338479"
  },
  {
    "text": "as detailed as possible information but at the same time we don't want to consume a lot of resources in our",
    "start": "338479",
    "end": "345039"
  },
  {
    "text": "observability application so this is going to be important in a second when I will showing you how to collect metrics",
    "start": "345039",
    "end": "352560"
  },
  {
    "text": "okay I know it was a very fast introduction of metrics let's switch to",
    "start": "352560",
    "end": "357600"
  },
  {
    "text": "the second topic that is BPF so what is BPF BPF is an inernal by code virtual",
    "start": "357600",
    "end": "365080"
  },
  {
    "text": "machine so basically with BPF we can take programs that are provided by the",
    "start": "365080",
    "end": "370880"
  },
  {
    "text": "user and we can run those programs in the context of the kernel what it means is that we are able to change the kernel",
    "start": "370880",
    "end": "377599"
  },
  {
    "text": "Behavior by running those programs that are provided by the user um there are",
    "start": "377599",
    "end": "383160"
  },
  {
    "text": "different use cases for ebpf tracing networking Security in this one we are",
    "start": "383160",
    "end": "389720"
  },
  {
    "text": "more interested on the tracing one because we want to get information about what is going on on the Kernel by using",
    "start": "389720",
    "end": "396400"
  },
  {
    "text": "BPF so this is just to give you a quick introduction about why BPF is so popular",
    "start": "396400",
    "end": "401800"
  },
  {
    "text": "right now so I will say that there are three different things the first one is that by using BPF we are able to bring",
    "start": "401800",
    "end": "408639"
  },
  {
    "text": "flexibility to the kernel so we are able to change the behavior of the kernel without having to recompile the K so",
    "start": "408639",
    "end": "415879"
  },
  {
    "text": "that's very powerful because we can like something like Implement new f fees in the kernel without having to recompile",
    "start": "415879",
    "end": "422680"
  },
  {
    "text": "nor install a new version of that the second one is efficient so it provides a",
    "start": "422680",
    "end": "428800"
  },
  {
    "text": "just in time compilation approach what it means is that it translate from EF instructions to machine instructions on",
    "start": "428800",
    "end": "435919"
  },
  {
    "text": "the flight and it gives us a very good performance there because there is no like an emulation in that and the last",
    "start": "435919",
    "end": "443840"
  },
  {
    "text": "one is for sure also very important ebpf is safe so the kernel has uh",
    "start": "443840",
    "end": "450080"
  },
  {
    "text": "mechanism that allow us to be sure that the BPF program that we are running",
    "start": "450080",
    "end": "455240"
  },
  {
    "text": "there are are safe so we cannot crush the kernel we can no access to memory that they are not allowed to so we can",
    "start": "455240",
    "end": "461919"
  },
  {
    "text": "say the BPF program are running a soundbox in a way that those are safe to",
    "start": "461919",
    "end": "468319"
  },
  {
    "text": "run okay so yeah I want to introduce a couple more Concepts there just to be",
    "start": "468319",
    "end": "474240"
  },
  {
    "text": "just to be sure that we are able to understand the the next topic so ebpf programs are even driving it means that",
    "start": "474240",
    "end": "481240"
  },
  {
    "text": "when something happens on the Kernel our evf programs are ex",
    "start": "481240",
    "end": "487400"
  },
  {
    "text": "secured and the source of those events are called hogs so what are examples of",
    "start": "487400",
    "end": "493759"
  },
  {
    "text": "that for instance network devices we can attach our BPF program to different network devices and when a packet is",
    "start": "493759",
    "end": "500240"
  },
  {
    "text": "received or sent through that Network device our ebpf program is a secured but",
    "start": "500240",
    "end": "506479"
  },
  {
    "text": "for for this specific talk the most interesting one are the first one so we have k propes at TH and Three Points so",
    "start": "506479",
    "end": "514159"
  },
  {
    "text": "those are hooks in the kernel that allow us to attach those ebpf programs to any",
    "start": "514159",
    "end": "520120"
  },
  {
    "text": "function within the Kel so for instance we need to understand what is going on on an specific function of the kernel we",
    "start": "520120",
    "end": "527519"
  },
  {
    "text": "attach the program there and each time that that function is executed in the kernel our evf program is run so from",
    "start": "527519",
    "end": "534839"
  },
  {
    "text": "there we are able to understand what are the parameters of the function what is the return value of the function what is",
    "start": "534839",
    "end": "540800"
  },
  {
    "text": "the process user or whatever that is running that specific function so the interesting thing is that we can attach",
    "start": "540800",
    "end": "546839"
  },
  {
    "text": "to almost whatever point in the kernel that we want there are other cases but I",
    "start": "546839",
    "end": "552120"
  },
  {
    "text": "will skip them for now because those are not so interesting for for this specific use case so this is how it looks like we",
    "start": "552120",
    "end": "560040"
  },
  {
    "text": "have an observability application so this is the application that that",
    "start": "560040",
    "end": "565320"
  },
  {
    "text": "performs the observability it runs or it injects",
    "start": "565320",
    "end": "570480"
  },
  {
    "text": "better different ebpf programs in the KET that are attached to different hook points there for instance storage",
    "start": "570480",
    "end": "576880"
  },
  {
    "text": "networking this calls and then we have the processes that we are monitoring on",
    "start": "576880",
    "end": "582079"
  },
  {
    "text": "the system so those processes needs to interact through the system by using C calls so by having those ebpf programs",
    "start": "582079",
    "end": "589519"
  },
  {
    "text": "in the kernel we are able to understand the activity that those processes are performing like sending Network packets",
    "start": "589519",
    "end": "597000"
  },
  {
    "text": "calling functions in the kernel accessing the disk and so",
    "start": "597000",
    "end": "602040"
  },
  {
    "text": "on another concept that that I need to explain is well with those ebpf programs",
    "start": "602040",
    "end": "608440"
  },
  {
    "text": "we are able to capture information from the kernel but then we need a place to store that information so that is what",
    "start": "608440",
    "end": "616200"
  },
  {
    "text": "the BPF maps are for so we can think about those Maps as a key value",
    "start": "616200",
    "end": "621640"
  },
  {
    "text": "structures that are used to to share information between different evf programs and also between EF programs",
    "start": "621640",
    "end": "629399"
  },
  {
    "text": "and user space application so basically the idea is that the BPF program runs it grabs it gets some information from the",
    "start": "629399",
    "end": "636560"
  },
  {
    "text": "kernel stores that information in those BPF maps and then our application from",
    "start": "636560",
    "end": "642200"
  },
  {
    "text": "user space pulls those uh that",
    "start": "642200",
    "end": "647279"
  },
  {
    "text": "data okay so yeah I know it was a very quick introduction on BPF but I just wanted you to have like a general idea",
    "start": "647279",
    "end": "654560"
  },
  {
    "text": "before I go to the next topics okay so what is the relationship shape of Matrix",
    "start": "654560",
    "end": "660519"
  },
  {
    "text": "and ebpf right so con with ebpf we can get a very deep insights of the what is",
    "start": "660519",
    "end": "668600"
  },
  {
    "text": "going on on the Kernel so I as I was explaining before we can attach to any to any kernel function so we can get",
    "start": "668600",
    "end": "675600"
  },
  {
    "text": "very low level information there and for sure also as mentioned before it's",
    "start": "675600",
    "end": "681279"
  },
  {
    "text": "flexible efficient and safe so it makes like the perfect tool to get this",
    "start": "681279",
    "end": "686320"
  },
  {
    "text": "lowlevel details on the Kernel there are different projects that",
    "start": "686320",
    "end": "691399"
  },
  {
    "text": "provide metrics by using BPF in this talk I will cover in three of them but",
    "start": "691399",
    "end": "697480"
  },
  {
    "text": "for sure there are many more I'm not aware of okay so let me show you the",
    "start": "697480",
    "end": "703120"
  },
  {
    "text": "first one of them this is called BPF Sporter this is",
    "start": "703120",
    "end": "709079"
  },
  {
    "text": "by Cloud fair so yeah the definition that we can find in their website is",
    "start": "709079",
    "end": "714920"
  },
  {
    "text": "this is a promus Sporter for castom BPF metrics so this is important to to real",
    "start": "714920",
    "end": "721440"
  },
  {
    "text": "to understand that this is for custom BPF metrics so the idea there is that the user can write their own ebpf",
    "start": "721440",
    "end": "729240"
  },
  {
    "text": "programs to get that information and then the BPF exporter is going to export",
    "start": "729240",
    "end": "734480"
  },
  {
    "text": "and to expose that information as promius metrics so they support counters",
    "start": "734480",
    "end": "740920"
  },
  {
    "text": "and histograms and yeah so as mentioned before when you are creating a a a",
    "start": "740920",
    "end": "746560"
  },
  {
    "text": "program there or better when you want to use this PR project you need to create two things the first one is the BPF",
    "start": "746560",
    "end": "751920"
  },
  {
    "text": "program to get the metrix and the second one is a configuration file that defines",
    "start": "751920",
    "end": "757680"
  },
  {
    "text": "what is the format where those metrics are are store in the BPF map so this is what the configuration",
    "start": "757680",
    "end": "766199"
  },
  {
    "text": "file looks like so you can see we have metrix we have counters some general information about the metrix like the",
    "start": "766199",
    "end": "772880"
  },
  {
    "text": "name help I will show you in a second what labels is about and yeah depending on the kind of the metric you have more",
    "start": "772880",
    "end": "780360"
  },
  {
    "text": "parameters especially for for the histogram regarding to the bucket configuration and so on so there is",
    "start": "780360",
    "end": "787519"
  },
  {
    "text": "something important to to understand here is when we capture information from",
    "start": "787519",
    "end": "793160"
  },
  {
    "text": "the kernel using BPF many times we only capture like numerical identifiers of",
    "start": "793160",
    "end": "798680"
  },
  {
    "text": "the things so we need a way to convert that numerical identifiers to a human",
    "start": "798680",
    "end": "803720"
  },
  {
    "text": "readable version so the BPF Sporter project does it by implementing",
    "start": "803720",
    "end": "809399"
  },
  {
    "text": "something that they call decoders so the idea is that we provide a number and by",
    "start": "809399",
    "end": "815320"
  },
  {
    "text": "using a decoder we are able to convert that to a human readable version one example is the cgroup ID so that's an",
    "start": "815320",
    "end": "821800"
  },
  {
    "text": "integer on the Kernel and by using the cgroup decoder we are able to convert",
    "start": "821800",
    "end": "827040"
  },
  {
    "text": "that or we are able to get the C group path from that ER C group ID and yeah",
    "start": "827040",
    "end": "832959"
  },
  {
    "text": "this is how we configure that on the labels so we have the decoder first we",
    "start": "832959",
    "end": "839399"
  },
  {
    "text": "convert that to an integer and then that's convert it to uh cgroup path okay",
    "start": "839399",
    "end": "845320"
  },
  {
    "text": "so time for a demo about that so if we go to the ebpf exporter website we can",
    "start": "845320",
    "end": "850839"
  },
  {
    "text": "see that they already provide some examples there so for each of the examples they have this ebpf program and",
    "start": "850839",
    "end": "858560"
  },
  {
    "text": "the configuration file that is a yl so yeah as you can see they have a bunch of different examples ready to use in this",
    "start": "858560",
    "end": "865959"
  },
  {
    "text": "presentation I want to show you this specific one about CIS calls so this is an example that provides metrics for",
    "start": "865959",
    "end": "873440"
  },
  {
    "text": "different CIS calls so provides a counter for each CIS call that is executed on the system so this is the",
    "start": "873440",
    "end": "880399"
  },
  {
    "text": "structure of the evf program so we have an evf map to store the The Matrix so as",
    "start": "880399",
    "end": "887839"
  },
  {
    "text": "the key of that map we have an integer so this is the number of this is SC and value we have another integer so that",
    "start": "887839",
    "end": "894720"
  },
  {
    "text": "will be the counter and then this is the BPF program that we use to capture when",
    "start": "894720",
    "end": "901160"
  },
  {
    "text": "C calls are executed on our system so yeah the only thing that is done by that DPF program is to increase a counter on",
    "start": "901160",
    "end": "908839"
  },
  {
    "text": "the ebpf map and then we have the configuration file for that so yeah we",
    "start": "908839",
    "end": "915399"
  },
  {
    "text": "have metrics we are defining a counter that we call CIS calls and in the labels",
    "start": "915399",
    "end": "921120"
  },
  {
    "text": "here we only have a single label that is called Cs and yeah again in this case we have",
    "start": "921120",
    "end": "927560"
  },
  {
    "text": "to use a decoder in order to convert this system called number to the name",
    "start": "927560",
    "end": "933399"
  },
  {
    "text": "let me show you how we can run that I don't have the time to go into all the details of this Jamal manifest I will",
    "start": "933399",
    "end": "939279"
  },
  {
    "text": "only show you the most important part so in this case I'm using their official",
    "start": "939279",
    "end": "944399"
  },
  {
    "text": "container image and H there and saying what is the directory where the",
    "start": "944399",
    "end": "950120"
  },
  {
    "text": "configuration files are store and what is the the one that I want to run so in this case it's only the the ISS",
    "start": "950120",
    "end": "957600"
  },
  {
    "text": "one let me apply that so ad demon set was created prome was also",
    "start": "957600",
    "end": "964759"
  },
  {
    "text": "deployed and if we go to the promeo interface we can see that our",
    "start": "964759",
    "end": "972120"
  },
  {
    "text": "metric is available there so if I query the metric I get the different values so",
    "start": "972120",
    "end": "979759"
  },
  {
    "text": "we have the name of this is call we have the counter for that yeah so there are a lot of",
    "start": "979759",
    "end": "986399"
  },
  {
    "text": "differences called that are being executed on my system but what is what I want to highlight here is that we don't",
    "start": "986399",
    "end": "992560"
  },
  {
    "text": "get any information about the kubernets so we have like the CIS but we don't",
    "start": "992560",
    "end": "999360"
  },
  {
    "text": "have like what is the Pod what is the container that is performing those CIS this this is because the BPF project",
    "start": "999360",
    "end": "1006720"
  },
  {
    "text": "Sporter is not integrated with kuet so they not they don't provide that",
    "start": "1006720",
    "end": "1014160"
  },
  {
    "text": "information okay the other project that I want to talk to you today to is",
    "start": "1014160",
    "end": "1019680"
  },
  {
    "text": "tetragon so the the definition of tetragon is a flexible kubernetes aware",
    "start": "1019680",
    "end": "1025480"
  },
  {
    "text": "security observability and runtime enforcement tool so by default H",
    "start": "1025480",
    "end": "1031319"
  },
  {
    "text": "tetragon traces different events like when processes already secured CIS call",
    "start": "1031319",
    "end": "1036880"
  },
  {
    "text": "activity AIO activity this includes networking and F AIS and yeah so kuet is",
    "start": "1036880",
    "end": "1044839"
  },
  {
    "text": "aware means that he understands the different components of cornetes in",
    "start": "1044839",
    "end": "1050960"
  },
  {
    "text": "other words it is able to provide information about the coret spot the",
    "start": "1050960",
    "end": "1056039"
  },
  {
    "text": "Cornet container and so on so let me show you a demonstration of that project",
    "start": "1056039",
    "end": "1063080"
  },
  {
    "text": "in this case I already have tetragon running on my system so there is a tetragon pod there",
    "start": "1063080",
    "end": "1069559"
  },
  {
    "text": "also a tetragon operator running there and promeo is configured to scrap",
    "start": "1069559",
    "end": "1075640"
  },
  {
    "text": "The Matrix from the their point so so if we go there we can see that it",
    "start": "1075640",
    "end": "1080919"
  },
  {
    "text": "produces different metrics the one that we are interested on is called tetragon events",
    "start": "1080919",
    "end": "1087039"
  },
  {
    "text": "total again so if we query the metric we can see the the information there so it",
    "start": "1087039",
    "end": "1092919"
  },
  {
    "text": "provides when a process was executed so it provides the counter there when the process finish execut execution it also",
    "start": "1092919",
    "end": "1101320"
  },
  {
    "text": "provides a label for the binary that was secured and yeah so we're looking here",
    "start": "1101320",
    "end": "1108080"
  },
  {
    "text": "is also that for some of the it also provides kuet this information so we have the name space we have the name of",
    "start": "1108080",
    "end": "1114720"
  },
  {
    "text": "the PO where that activity was",
    "start": "1114720",
    "end": "1119799"
  },
  {
    "text": "happening so those are the metrics that we get by default when we deploy tetragon but what is interesting about",
    "start": "1119799",
    "end": "1126880"
  },
  {
    "text": "tetragon is that we can configure and we can get other metrics if we want so",
    "start": "1126880",
    "end": "1133000"
  },
  {
    "text": "tetron defines a tracing policy custom resource so by using in that custom",
    "start": "1133000",
    "end": "1138880"
  },
  {
    "text": "resource we are able to say hey count a metric on that or on that on another",
    "start": "1138880",
    "end": "1145320"
  },
  {
    "text": "specific point on the K so let me show you that actually I should be showing that",
    "start": "1145320",
    "end": "1151159"
  },
  {
    "text": "before applying but anyway okay so this is the tracing policy that I have",
    "start": "1151159",
    "end": "1157240"
  },
  {
    "text": "configured there so there I'm telling tetragon okay attach approve on a trace",
    "start": "1157240",
    "end": "1162919"
  },
  {
    "text": "point on the rowes calls on this specific event so this is like other way",
    "start": "1162919",
    "end": "1168440"
  },
  {
    "text": "to tell the program what to do so in this case we don't need to write BPF code we are able to configure the metric",
    "start": "1168440",
    "end": "1175960"
  },
  {
    "text": "by only writing this yaml file so yeah",
    "start": "1175960",
    "end": "1181159"
  },
  {
    "text": "this example is very similar to the previous one we are con cards but in this case we don't care about the BPA",
    "start": "1181159",
    "end": "1190080"
  },
  {
    "text": "code okay so let me go back to promius",
    "start": "1194440",
    "end": "1199520"
  },
  {
    "text": "so if we list the different metrics available we see that now we have this",
    "start": "1199520",
    "end": "1204960"
  },
  {
    "text": "tetragon CS so if we query that we can see that the result is very similar to the ebpf",
    "start": "1204960",
    "end": "1212159"
  },
  {
    "text": "Sporter one but the difference there is that we get information about kubernetes",
    "start": "1212159",
    "end": "1218880"
  },
  {
    "text": "or well this is what I'm trying to look for",
    "start": "1218880",
    "end": "1223919"
  },
  {
    "text": "there so yeah there it is yeah right so as you can see it",
    "start": "1227159",
    "end": "1235000"
  },
  {
    "text": "provides information for coordinat components",
    "start": "1235000",
    "end": "1241039"
  },
  {
    "text": "there okay and the final project I want to show you today is called Inspector Gadget so as a disclaimer and one of the",
    "start": "1244799",
    "end": "1252360"
  },
  {
    "text": "maintainers of this project so I will try to keep as neutral as possible but",
    "start": "1252360",
    "end": "1257559"
  },
  {
    "text": "for sure this is the one that I like the most so Inspector Gadget is a is a tool designed",
    "start": "1257559",
    "end": "1263760"
  },
  {
    "text": "for the creation deployment and execution of ebpf programs both on",
    "start": "1263760",
    "end": "1269400"
  },
  {
    "text": "kubernetes and in lus machines so we can think of Inspector gadgets as a Docker",
    "start": "1269400",
    "end": "1274799"
  },
  {
    "text": "run time for a BPF so the idea is that you as a developer you create your own",
    "start": "1274799",
    "end": "1280720"
  },
  {
    "text": "BPF program you put that in an oci image you give that to Inspector Gadget and",
    "start": "1280720",
    "end": "1287240"
  },
  {
    "text": "inspector gadet will take care of injecting those running those programs in the",
    "start": "1287240",
    "end": "1292960"
  },
  {
    "text": "kernel and yeah another interesting thing about BPF is that as I show you",
    "start": "1292960",
    "end": "1298039"
  },
  {
    "text": "about inspector gajor is that when we get information from the kernel we usually get lowlevel information so we",
    "start": "1298039",
    "end": "1305080"
  },
  {
    "text": "get the P ID we get the user ID but there is no a com a container comet in",
    "start": "1305080",
    "end": "1310880"
  },
  {
    "text": "the kernel so Inspector Gadget provides that mapping adding a context about container po name and so on there so",
    "start": "1310880",
    "end": "1319039"
  },
  {
    "text": "specifically regarding about metrics there are two different ways to support metrics in BPF in inspector gget sorry",
    "start": "1319039",
    "end": "1326679"
  },
  {
    "text": "one is in user space and the other one is in Kern so in user space metrix in",
    "start": "1326679",
    "end": "1334240"
  },
  {
    "text": "this case we we have different tools that already provide information already",
    "start": "1334240",
    "end": "1339320"
  },
  {
    "text": "provide events so the idea of configuring the metrics in user space is to count the events that are generated",
    "start": "1339320",
    "end": "1346520"
  },
  {
    "text": "by those already system tools so those tools each time something happen they",
    "start": "1346520",
    "end": "1351720"
  },
  {
    "text": "send an event to user space And Then There we perform the counting the aggregation and filtering of those",
    "start": "1351720",
    "end": "1358919"
  },
  {
    "text": "events so yeah for sure this the this solution is less performant because we",
    "start": "1358919",
    "end": "1364600"
  },
  {
    "text": "are sending all the events from Kel to user space but it was also easier to",
    "start": "1364600",
    "end": "1369960"
  },
  {
    "text": "implement so that's like the initial support that we got for pruse there and",
    "start": "1369960",
    "end": "1375320"
  },
  {
    "text": "yeah for sure this is up to the to the user to configure how to count and how to aggregate the events so this is",
    "start": "1375320",
    "end": "1383600"
  },
  {
    "text": "configured by using a configuration file this is based on the BPF Sporter one so",
    "start": "1383600",
    "end": "1390120"
  },
  {
    "text": "yeah as you can see we have metrics some generic generic information about the metrics like the name the type",
    "start": "1390120",
    "end": "1397760"
  },
  {
    "text": "of the metric this category and Gadget refers to the existing tools that we",
    "start": "1397760",
    "end": "1403039"
  },
  {
    "text": "that we have so if you want to use this you have to go to our website check the existing gadgets that we have check what",
    "start": "1403039",
    "end": "1409880"
  },
  {
    "text": "is the information that they provide in order to understand if they provide some events that are useful for you and yeah",
    "start": "1409880",
    "end": "1417320"
  },
  {
    "text": "so we have selector labels this is plain here so selector is to filter out some",
    "start": "1417320",
    "end": "1422760"
  },
  {
    "text": "of the events that we don't want so maybe we only care about events on a specific name space and a specific pod",
    "start": "1422760",
    "end": "1429279"
  },
  {
    "text": "so we can configure that and the labels Define what is the granularity that we want for our metrix so in this specific",
    "start": "1429279",
    "end": "1437120"
  },
  {
    "text": "example we are are going to have a label for the Pod name or for the container",
    "start": "1437120",
    "end": "1443400"
  },
  {
    "text": "name so let me show you how it works",
    "start": "1443400",
    "end": "1449320"
  },
  {
    "text": "here so this is AAL magifest with all the configuration there so this is the",
    "start": "1454600",
    "end": "1460679"
  },
  {
    "text": "configuration file for Inspector Gadget that is s as a comy ma on the cluster so",
    "start": "1460679",
    "end": "1466320"
  },
  {
    "text": "yeah there I'm defining secured process metric that is going to use the trace ASC Gadget so one of the our existing",
    "start": "1466320",
    "end": "1473279"
  },
  {
    "text": "Tools in this case I didn't configure any",
    "start": "1473279",
    "end": "1478799"
  },
  {
    "text": "filtering and those are the labels that I configure for the example so the kuet",
    "start": "1478799",
    "end": "1484640"
  },
  {
    "text": "is name is space the coet spot the container and the name of the process",
    "start": "1484640",
    "end": "1490399"
  },
  {
    "text": "that was executed okay and yeah this is just to",
    "start": "1490399",
    "end": "1496720"
  },
  {
    "text": "show you how we run that so I'm using the one of the official Inspector Gadget",
    "start": "1496720",
    "end": "1502159"
  },
  {
    "text": "container images and this is the common line that that we have to use to run this so we say this is promus we pass",
    "start": "1502159",
    "end": "1509120"
  },
  {
    "text": "the the path to the configuration file and that's it so I deploy that again a",
    "start": "1509120",
    "end": "1515679"
  },
  {
    "text": "demon set was created prosis running so this is really similar to the BPF Sporter case before yeah in this case it",
    "start": "1515679",
    "end": "1523159"
  },
  {
    "text": "takes a little bit more until the metrics are available and yeah as you you can see we got our metric available",
    "start": "1523159",
    "end": "1531320"
  },
  {
    "text": "there so yeah in this case we have the labels that we configure there so we",
    "start": "1531320",
    "end": "1537200"
  },
  {
    "text": "have a coordinates in space po the name of the process and so",
    "start": "1537200",
    "end": "1543720"
  },
  {
    "text": "on so what is interesting about this approach is that again you don't have to worry about writing BPF you can use our",
    "start": "1543720",
    "end": "1550919"
  },
  {
    "text": "assistant tools to get some metrics but is less performance so there is a",
    "start": "1550919",
    "end": "1556720"
  },
  {
    "text": "tradeoff there and the other way that we can use to collect BPF metrics in Inspector Gadget",
    "start": "1556720",
    "end": "1563440"
  },
  {
    "text": "is to count or to collect then directly in kernel space so in this case the user",
    "start": "1563440",
    "end": "1570760"
  },
  {
    "text": "has to develop their own BPF code the user has to Define what what is the",
    "start": "1570760",
    "end": "1576640"
  },
  {
    "text": "granularity that they want to use so yeah very similar to the BPF Sporter",
    "start": "1576640",
    "end": "1581880"
  },
  {
    "text": "case and for sure this is more performant than counting on user space",
    "start": "1581880",
    "end": "1587799"
  },
  {
    "text": "so the idea that we have is that we are going to provide some tools that sport",
    "start": "1587799",
    "end": "1593279"
  },
  {
    "text": "some common metrics so maybe in some cases you don't have to write The ebpf",
    "start": "1593279",
    "end": "1598399"
  },
  {
    "text": "Code by yourself so let me show you a demonstration of this",
    "start": "1598399",
    "end": "1604440"
  },
  {
    "text": "one okay so this is the same example to count CIS calls so as you can see there",
    "start": "1605600",
    "end": "1611080"
  },
  {
    "text": "are two files there one is the BPF code the other one is like a configuration file so this is the BPF code that we use",
    "start": "1611080",
    "end": "1618679"
  },
  {
    "text": "to to gather that information for from the kernel so very similar to the BPF",
    "start": "1618679",
    "end": "1624720"
  },
  {
    "text": "Sporter case the only difference there is that we are providing this Mount Nam is space ID so this is a number that we",
    "start": "1624720",
    "end": "1633200"
  },
  {
    "text": "can associate with each specific container so Inspector Gadget will automatically map this number to The",
    "start": "1633200",
    "end": "1639120"
  },
  {
    "text": "Container pod name space and whatever there again this is very similar this is",
    "start": "1639120",
    "end": "1645799"
  },
  {
    "text": "our evf map that we are using in there and this is the BPF program that",
    "start": "1645799",
    "end": "1651760"
  },
  {
    "text": "we use to to gather the data from the kernel so yeah it really similar to the",
    "start": "1651760",
    "end": "1657480"
  },
  {
    "text": "BPF to the BPF sparter case and let me show you the configuration file in this",
    "start": "1657480",
    "end": "1663000"
  },
  {
    "text": "case is is simpler so we have what is the name of of the tool and we say okay",
    "start": "1663000",
    "end": "1668399"
  },
  {
    "text": "this tool provides Matrix and the metrix are sore on a BPM mod that is called CIS",
    "start": "1668399",
    "end": "1674480"
  },
  {
    "text": "call so this allows Inspector Gadget to understand what is the ppf mod that I has to read in order to provide the",
    "start": "1674480",
    "end": "1680519"
  },
  {
    "text": "metrix so again this is how we expore this in this case I'm using like a",
    "start": "1680519",
    "end": "1685840"
  },
  {
    "text": "custom image for this presentation there I have the binary and the compil version",
    "start": "1685840",
    "end": "1691039"
  },
  {
    "text": "of the BPF code that I show you before and this is the command line that we",
    "start": "1691039",
    "end": "1697159"
  },
  {
    "text": "have to use to run this",
    "start": "1697159",
    "end": "1700799"
  },
  {
    "text": "tool okay so let me deploy all of that there very similar to other cases before",
    "start": "1705080",
    "end": "1712919"
  },
  {
    "text": "if we go to promus yeah we have to check",
    "start": "1712919",
    "end": "1718039"
  },
  {
    "text": "again so there we can see that we have our CIS",
    "start": "1719960",
    "end": "1725039"
  },
  {
    "text": "calls metric and as you can see there we provide a lot of information related to",
    "start": "1725039",
    "end": "1730960"
  },
  {
    "text": "The Container not only the name space pod but we also provide more information like d and so on one one thing that we",
    "start": "1730960",
    "end": "1739120"
  },
  {
    "text": "are still missing is that we only provide the number of the call which will be providing also the name but yeah",
    "start": "1739120",
    "end": "1745559"
  },
  {
    "text": "this is something that we are still working on it should not be that difficult to implement okay so I think this is the",
    "start": "1745559",
    "end": "1753159"
  },
  {
    "text": "most important slide of the presentation the thing that I want you to to take away from this in this is metrics are",
    "start": "1753159",
    "end": "1761360"
  },
  {
    "text": "use to understand what is the heal and performance of our system and ebpf is",
    "start": "1761360",
    "end": "1767440"
  },
  {
    "text": "really powerful mechanism to get to collect data from the kernel and there",
    "start": "1767440",
    "end": "1773919"
  },
  {
    "text": "are different projects that provide metrics based on ebpf and based on the dependent on the abstraction level that",
    "start": "1773919",
    "end": "1780919"
  },
  {
    "text": "you want to have you could choose one or another so maybe you want to write your own BPF code maybe you only want to",
    "start": "1780919",
    "end": "1788080"
  },
  {
    "text": "configure a yamal manifest and also dependent on the labels that you need so",
    "start": "1788080",
    "end": "1793279"
  },
  {
    "text": "if you only need operating system labels you can use BPF Sporter if if you need also kubernetes information then you",
    "start": "1793279",
    "end": "1800360"
  },
  {
    "text": "will have to use something like tetragon or Inspector Gadget so yeah as usual in",
    "start": "1800360",
    "end": "1806320"
  },
  {
    "text": "this presentations I really like to prepare some reference material so all the things that I explained today are",
    "start": "1806320",
    "end": "1812399"
  },
  {
    "text": "better explained there so if you want to go and get more details you can check check her out actually the last one is",
    "start": "1812399",
    "end": "1819679"
  },
  {
    "text": "could be the most interesting one so all the yl Manifest all the files to reproduce the deos that I show you",
    "start": "1819679",
    "end": "1825120"
  },
  {
    "text": "before are available on the repos itory there okay and finally this is really",
    "start": "1825120",
    "end": "1830960"
  },
  {
    "text": "important if you have any feedback about the presentation if you like the presentation if you didn't just go ahead",
    "start": "1830960",
    "end": "1837279"
  },
  {
    "text": "and give us some feedback and yeah that's it thank you happy to take any",
    "start": "1837279",
    "end": "1844639"
  },
  {
    "text": "questions",
    "start": "1845399",
    "end": "1848399"
  }
]