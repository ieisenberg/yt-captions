[
  {
    "start": "0",
    "end": "86000"
  },
  {
    "text": "good afternoon everybody my name is at what way working on highways public up",
    "start": "3520",
    "end": "11110"
  },
  {
    "text": "my interest areas are in container tag and add cloud",
    "start": "11110",
    "end": "17830"
  },
  {
    "text": "hello everyone my name is Dinesh Govinda Sami I'm a dev manager in Windows core",
    "start": "17830",
    "end": "23890"
  },
  {
    "text": "OS networking group I lead the charter for Windows container networking so",
    "start": "23890",
    "end": "29140"
  },
  {
    "text": "today Denisha and I are gonna use a real story will help you understand Windows",
    "start": "29140",
    "end": "35500"
  },
  {
    "text": "container network for rent it is in the next 35 minutes we are going to",
    "start": "35500",
    "end": "42190"
  },
  {
    "text": "talk about windows container architecture walk through windows container network in a kubernetes",
    "start": "42190",
    "end": "48909"
  },
  {
    "text": "cluster then from a cloud providers",
    "start": "48909",
    "end": "54399"
  },
  {
    "text": "perspective help explain what is CI plug-in and how to write one last but",
    "start": "54399",
    "end": "62469"
  },
  {
    "text": "not least we are gonna demo huawei windows container service collect some",
    "start": "62469",
    "end": "67930"
  },
  {
    "text": "network tracing and troubleshoot some issues with it we hope you have a better",
    "start": "67930",
    "end": "75370"
  },
  {
    "text": "understanding of windows container network what is seeing I be able to",
    "start": "75370",
    "end": "80980"
  },
  {
    "text": "write a senior I plug in and play with it",
    "start": "80980",
    "end": "85350"
  },
  {
    "start": "86000",
    "end": "174000"
  },
  {
    "text": "so Dinesh probably wants to enable Windows container cluster can you help",
    "start": "86020",
    "end": "92170"
  },
  {
    "text": "us understand more about the windows continued kernel sure chosen in this",
    "start": "92170",
    "end": "98799"
  },
  {
    "text": "session of the presentation we are going to be looking at the high-level architecture of kubernetes for Windows",
    "start": "98799",
    "end": "106319"
  },
  {
    "text": "the net the building blocks of the Windows container networking and the",
    "start": "106319",
    "end": "111819"
  },
  {
    "text": "kubernetes network connectivity and how it works for Windows the Windows operating system has two mains inbox",
    "start": "111819",
    "end": "119530"
  },
  {
    "text": "services the host computer service and host network service that provide the required container function on the host",
    "start": "119530",
    "end": "126670"
  },
  {
    "text": "computer service is responsible for providing the computer related functionalities such as job object creation and management and general",
    "start": "126670",
    "end": "133780"
  },
  {
    "text": "lifecycle management of containers the host network service is responsible for",
    "start": "133780",
    "end": "139180"
  },
  {
    "text": "the network management and related to namespace management endpoint management",
    "start": "139180",
    "end": "144720"
  },
  {
    "text": "network policy and service load balancing related functionality",
    "start": "144720",
    "end": "150610"
  },
  {
    "text": "the etherium is a goal wrapper for both of these services and cubelet q proxy",
    "start": "150610",
    "end": "156460"
  },
  {
    "text": "and our different CNI plugins use this at CM to program these H ns and let's",
    "start": "156460",
    "end": "161470"
  },
  {
    "text": "see in this presentation we are going to be looking at the cni plug-in interfaces",
    "start": "161470",
    "end": "166960"
  },
  {
    "text": "and how how it how it is implemented in Windows",
    "start": "166960",
    "end": "172080"
  },
  {
    "start": "174000",
    "end": "332000"
  },
  {
    "text": "so let's take a look at the container networking basics then a set of Linux fundamental",
    "start": "174989",
    "end": "183000"
  },
  {
    "text": "networking building blocks that communities architecture is built upon let's look at them and how they compare",
    "start": "183000",
    "end": "188490"
  },
  {
    "text": "with Windows and how we have developed the Windows networking drivers the network namespace in Windows the network",
    "start": "188490",
    "end": "196410"
  },
  {
    "text": "namespaces Network compartments the compartments are logical container",
    "start": "196410",
    "end": "202670"
  },
  {
    "text": "in the tcp/ip stack and the network layer or the inner layer in the tcp/ip stack is making sure that each",
    "start": "202670",
    "end": "208849"
  },
  {
    "text": "compartment is isolated and packet forwarding between the compartments is prevented",
    "start": "208849",
    "end": "215560"
  },
  {
    "text": "all I P related objects such as IP addresses IP prefixes routes everything",
    "start": "216210",
    "end": "221430"
  },
  {
    "text": "stay for that unique to that compartment in linux the layer 2 switching and",
    "start": "221430",
    "end": "229030"
  },
  {
    "text": "lately functionality is provided by linux bridge and the IP routing in Windows a v2v switch provides the layer",
    "start": "229030",
    "end": "237430"
  },
  {
    "text": "2 switching and layer 3 functionality you can have many instances of V switch",
    "start": "237430",
    "end": "242860"
  },
  {
    "text": "if you are familiar with open V switch it's very analogous to that of Windows and you can dynamically add and remove",
    "start": "242860",
    "end": "251140"
  },
  {
    "text": "switch ports to this V switch and each instance of a/b switch has its own forwarding table and forwards packets",
    "start": "251140",
    "end": "258160"
  },
  {
    "text": "based on the MAC address and the VLAN tagging of the packets hyperlynx The Container network",
    "start": "258160",
    "end": "265169"
  },
  {
    "text": "interfaces it could be host Phoenix or VM NICs that are added to the network name space and then bound to the corresponding switch",
    "start": "265169",
    "end": "272280"
  },
  {
    "text": "port in the B switch I PBS and IP table provide rich packet",
    "start": "272280",
    "end": "278620"
  },
  {
    "text": "filtering mechanism in Linux whereas in Windows Windows Firewall and vfp provides you the similar packet from",
    "start": "278620",
    "end": "285940"
  },
  {
    "text": "packet filtering functionality VFP is virtual filtering platform it's a",
    "start": "285940",
    "end": "291970"
  },
  {
    "text": "programmable match action based filtering engine that helps you to apply",
    "start": "291970",
    "end": "297270"
  },
  {
    "text": "trim it like very rich data from a data plane primitives such as a clean",
    "start": "297270",
    "end": "303250"
  },
  {
    "text": "metering netting load balancing and n",
    "start": "303250",
    "end": "308860"
  },
  {
    "text": "cap D cap and much more VFP is the same data plane that is used to power",
    "start": "308860",
    "end": "314830"
  },
  {
    "text": "Microsoft Azure and Azure stack and we are bringing the same data plane basically reusing the same data plane",
    "start": "314830",
    "end": "320530"
  },
  {
    "text": "and providing you the windows networking functionality we'll be looking at vfp in",
    "start": "320530",
    "end": "326530"
  },
  {
    "text": "detail in the next few slides [Music]",
    "start": "326530",
    "end": "332910"
  },
  {
    "start": "332000",
    "end": "429000"
  },
  {
    "text": "so let's put all of this together and look at the internals of windows container networking let's take a look",
    "start": "332910",
    "end": "340410"
  },
  {
    "text": "at how bare-metal networking works in Windows right so you have a physical host and you have a physical NIC",
    "start": "340410",
    "end": "345990"
  },
  {
    "text": "connected to this host and the physical NIC has an IP and a Mac by default this physical NIC is exposed to the default",
    "start": "345990",
    "end": "353310"
  },
  {
    "text": "route namespace of the host and host uses this to communicate to the external",
    "start": "353310",
    "end": "358380"
  },
  {
    "text": "world let's say you are adding a virtual network to this host a new instance of",
    "start": "358380",
    "end": "364770"
  },
  {
    "text": "virtual switch is created on the host and the switch is bound to this physical leg now for the host we are creating a",
    "start": "364770",
    "end": "371670"
  },
  {
    "text": "new virtual leg and then attach it to the root namespace and then bind it to the corresponding switch port on the",
    "start": "371670",
    "end": "377790"
  },
  {
    "text": "switch the IP and the Mac that was in the physical neck is now moved to this virtual leg",
    "start": "377790",
    "end": "384890"
  },
  {
    "text": "for adding a container namespace is just trading in a compartment in the host now",
    "start": "386100",
    "end": "392140"
  },
  {
    "text": "adding a container endpoint is basically adding a new virtual knit to this namespace and then binding it to the",
    "start": "392140",
    "end": "398500"
  },
  {
    "text": "corresponding switch port in the V switch the container has its own IP and",
    "start": "398500",
    "end": "405040"
  },
  {
    "text": "the Mac the NAT and load balancing functionality is provided by basically using the vfp",
    "start": "405040",
    "end": "412029"
  },
  {
    "text": "rules the vfp rules are present in four container port the management port and the external port combining all of this",
    "start": "412029",
    "end": "419499"
  },
  {
    "text": "we will be able to shape the diff traffic however we want and we provide the NAT and load balancer functionality",
    "start": "419499",
    "end": "426899"
  },
  {
    "start": "429000",
    "end": "519000"
  },
  {
    "text": "let's take a look at the virtual filtering platform so the that is the brain behind the entire container",
    "start": "431220",
    "end": "437550"
  },
  {
    "text": "networking that we are providing right so virtual filtering platform is an extension added to the V switch so any",
    "start": "437550",
    "end": "444870"
  },
  {
    "text": "traffic that's flowing through the V switch will also flow through the vfp and the VSP kept the rules can be",
    "start": "444870",
    "end": "451350"
  },
  {
    "text": "applied both on the inbound and outbound direction of the packet so this on the",
    "start": "451350",
    "end": "457170"
  },
  {
    "text": "right side is a example of a vfp rule so VAP has different layers the layers can",
    "start": "457170",
    "end": "463290"
  },
  {
    "text": "be again a cooling metering we need SLV each layer has different groups and the",
    "start": "463290",
    "end": "469590"
  },
  {
    "text": "groups are in Direction out direction or ipv4 ipv6 or it could be user-defined",
    "start": "469590",
    "end": "474990"
  },
  {
    "text": "and then inside the group you have a rule again remember I said that the vfp",
    "start": "474990",
    "end": "481440"
  },
  {
    "text": "is a match action based rich packet filtering engine right so the rule is",
    "start": "481440",
    "end": "486930"
  },
  {
    "text": "having a filtering condition and you can filter based on the IP addresses the source or destination IP address or",
    "start": "486930",
    "end": "493410"
  },
  {
    "text": "protocol and then filter that particular packet and then you can apply an action on that packet and action can be in",
    "start": "493410",
    "end": "500250"
  },
  {
    "text": "kappa kappa or lb nod or any such action so it's it's very rich right now H&S is",
    "start": "500250",
    "end": "506490"
  },
  {
    "text": "basically providing the controller plane and vfp is providing in the data plane a channel H&S programs the corresponding",
    "start": "506490",
    "end": "512909"
  },
  {
    "text": "rules into vfp and then shapes the traffic however we want",
    "start": "512909",
    "end": "518060"
  },
  {
    "text": "I I hope I gave you enough information about the windows container networking",
    "start": "518329",
    "end": "525649"
  },
  {
    "start": "519000",
    "end": "797000"
  },
  {
    "text": "how it works in both control plane and data plane now I'm gonna put all of this together and walk you through some",
    "start": "525649",
    "end": "532369"
  },
  {
    "text": "examples of how kubernetes network connectivity works for Windows I'm going",
    "start": "532369",
    "end": "537920"
  },
  {
    "text": "to go over three examples the first example is pod - pod connectivity let's",
    "start": "537920",
    "end": "543649"
  },
  {
    "text": "say you have two parts in this host pod 1 and part 2 and pod one wants to communicate to pod",
    "start": "543649",
    "end": "549679"
  },
  {
    "text": "to write one of the kubernetes requirement is that part of what connectivity should not be Natick right",
    "start": "549679",
    "end": "556369"
  },
  {
    "text": "basically it has to be provided through an l-3 connectivity so the path the packet reaches the port port 3 of the",
    "start": "556369",
    "end": "563619"
  },
  {
    "text": "vfp right there are a bunch of vfp rules so by default in kubernetes we apply our",
    "start": "563619",
    "end": "569959"
  },
  {
    "text": "outbound natural so what it means is every traffic coming out of that container will be Natick but we we have",
    "start": "569959",
    "end": "577189"
  },
  {
    "text": "some special exceptions where you can apply some exceptions rules in vfp and say that i don't want to nad this these",
    "start": "577189",
    "end": "583610"
  },
  {
    "text": "set of traffic's so there are some some parts under the service leader though",
    "start": "583610",
    "end": "589579"
  },
  {
    "text": "are those exceptions where we apply on the vfp so that we can we don't need to nad them right so the packets will not",
    "start": "589579",
    "end": "597110"
  },
  {
    "text": "been added and will get forwarded to the forwarding plane VSP has its own routing",
    "start": "597110",
    "end": "603230"
  },
  {
    "text": "table based on the destination IP it looks up the destination MAC and forwards the packet to the corresponding",
    "start": "603230",
    "end": "610160"
  },
  {
    "text": "destination port and the packet reaches the destination pod",
    "start": "610160",
    "end": "616029"
  },
  {
    "text": "now let's take a look the second example I'm going to talk",
    "start": "617329",
    "end": "622910"
  },
  {
    "text": "about is a pod trying to reach an Internet traffic so the by by default as",
    "start": "622910",
    "end": "629330"
  },
  {
    "text": "I said earlier every traffic coming out of the pod will be basically out born added right so the packet the pod one is",
    "start": "629330",
    "end": "637340"
  },
  {
    "text": "trying to reach Internet the packets reach port three no Acula supply so it",
    "start": "637340",
    "end": "643070"
  },
  {
    "text": "goes - it goes and hits the esnatt layer and esnatt will be applied on that packet so esnatt is a stateful let's not",
    "start": "643070",
    "end": "649970"
  },
  {
    "text": "is created I'll come to what this stateful mean basically the source IP of the container and the source port of the",
    "start": "649970",
    "end": "656390"
  },
  {
    "text": "container is replaced with the host IP and the port and the traffic is gets forwarded to the external port and the",
    "start": "656390",
    "end": "662600"
  },
  {
    "text": "traffic goes out to the Internet now when the response is coming back you",
    "start": "662600",
    "end": "667670"
  },
  {
    "text": "need to base that's why we create a stateful match so that when response is coming back we need to reverse it so we",
    "start": "667670",
    "end": "673340"
  },
  {
    "text": "need to rewrite the host IP : port to the container I peep : port so that's why we create a stateful NAT there",
    "start": "673340",
    "end": "680830"
  },
  {
    "text": "and this is how Potter internet works the next example is part 2",
    "start": "680830",
    "end": "688820"
  },
  {
    "text": "load-balancing basically the cue proxy flow right so let's say you have a load",
    "start": "688820",
    "end": "693980"
  },
  {
    "text": "balancer created on this kubernetes cluster and the bottom bottom one shows",
    "start": "693980",
    "end": "699170"
  },
  {
    "text": "the load balancer right so you have a whip : port and you have a set of back-end dips now the pod is trying to",
    "start": "699170",
    "end": "706910"
  },
  {
    "text": "reach the service whip so the packet reaches the port port 3 now in Windows",
    "start": "706910",
    "end": "713840"
  },
  {
    "text": "what we do is especially for the non DSR flow we the management port is the load",
    "start": "713840",
    "end": "720890"
  },
  {
    "text": "balancer for us so it's basically a little earmarks for us and it's distributed so every node has its own",
    "start": "720890",
    "end": "726620"
  },
  {
    "text": "load balancer right so the traffic from the pod a has to go to the if it's if",
    "start": "726620",
    "end": "732110"
  },
  {
    "text": "it's hitting the service whip it has to go to the management port so what we do is we in cap the packet to the",
    "start": "732110",
    "end": "737270"
  },
  {
    "text": "management port and send it to the management port in on the management port we decap the packet again and then",
    "start": "737270",
    "end": "744710"
  },
  {
    "text": "apply this lb natural LD natural is basically a rule where given a set of",
    "start": "744710",
    "end": "751640"
  },
  {
    "text": "dips it selects a dip based on the fight apples like basically the source IP",
    "start": "751640",
    "end": "757580"
  },
  {
    "text": "destination IP source port destination port and protocol it applies that hashing and then selects a dip once it",
    "start": "757580",
    "end": "764240"
  },
  {
    "text": "has selected the dip it rewrites the destination IP and the destination MAC and sends it to the corresponding dip so",
    "start": "764240",
    "end": "770570"
  },
  {
    "text": "this is how load balancing works in Windows",
    "start": "770570",
    "end": "774820"
  },
  {
    "text": "with this I I hope I gave you enough information about the basics of windows",
    "start": "776290",
    "end": "781779"
  },
  {
    "text": "container networking and I would like to hand it over to Cindy so that she can walk through how to write the cni plugin",
    "start": "781779",
    "end": "789060"
  },
  {
    "text": "so I hope this is very helpful especially for the animation right",
    "start": "789060",
    "end": "797009"
  },
  {
    "start": "797000",
    "end": "842000"
  },
  {
    "text": "so now let's imagine I have a byway windows container cluster already a unit I have",
    "start": "797890",
    "end": "805390"
  },
  {
    "text": "a Linux master node and then bunch of Windows worker node under Linux and",
    "start": "805390",
    "end": "811600"
  },
  {
    "text": "Windows knows there will be corresponding flavors of kool-aid",
    "start": "811600",
    "end": "817019"
  },
  {
    "text": "Kubrick's container random installed and then on top of it there will be a high",
    "start": "817019",
    "end": "824350"
  },
  {
    "text": "waste storage monitoring and network plugins installed specifically for",
    "start": "824350",
    "end": "830470"
  },
  {
    "text": "network the IPAM and CI plugging executables need to be build upon",
    "start": "830470",
    "end": "836950"
  },
  {
    "text": "highways software-defined network infrastructure",
    "start": "836950",
    "end": "842100"
  },
  {
    "start": "842000",
    "end": "967000"
  },
  {
    "text": "but before I'm able to write my own scene I plug-in I'd like to have a",
    "start": "842340",
    "end": "848070"
  },
  {
    "text": "bigger picture of how kubernetes work with container runtimes such as stalker",
    "start": "848070",
    "end": "853980"
  },
  {
    "text": "and CI plugin to enable the network container network so first of all",
    "start": "853980",
    "end": "861080"
  },
  {
    "text": "couplet starts dr. shim which is a G RPC",
    "start": "861080",
    "end": "866250"
  },
  {
    "text": "server in it there are some components and bunch of API functions and then",
    "start": "866250",
    "end": "873630"
  },
  {
    "text": "secondly Hulett will call the dark regime GRP C API",
    "start": "873630",
    "end": "879480"
  },
  {
    "text": "Grampa's sandbox through this API call dr. shim will call dr. engine and the",
    "start": "879480",
    "end": "887490"
  },
  {
    "text": "dr. engine will start a passed continue sometimes people call it infrastructure",
    "start": "887490",
    "end": "893910"
  },
  {
    "text": "container as well as a result of this container creation apart in our name",
    "start": "893910",
    "end": "900839"
  },
  {
    "text": "space will be created then dr. sham will call dr. engine to",
    "start": "900839",
    "end": "908370"
  },
  {
    "text": "grab this part network space after that dark regime will cause the",
    "start": "908370",
    "end": "915910"
  },
  {
    "text": "internal CNI plugin manager and then the ceiling c9 Network plug-in manager will",
    "start": "915910",
    "end": "924070"
  },
  {
    "text": "run CNI plug-in with network configuration file and environment",
    "start": "924070",
    "end": "930190"
  },
  {
    "text": "variables so internally the CLI plug-in will create first we'll create a virtual",
    "start": "930190",
    "end": "937690"
  },
  {
    "text": "network and then create a network endpoint then plug in the network",
    "start": "937690",
    "end": "944890"
  },
  {
    "text": "endpoint one side to the past container and the other side to the virtual",
    "start": "944890",
    "end": "950770"
  },
  {
    "text": "network and then after that apply the routing and then the host level policies",
    "start": "950770",
    "end": "957680"
  },
  {
    "text": "so after that as per your parts back then the application continues can be",
    "start": "957680",
    "end": "963619"
  },
  {
    "text": "started in this pod as you can see CLI is the interface",
    "start": "963619",
    "end": "971020"
  },
  {
    "text": "between CI between container rantin and CI plug in and then CI plugin is a",
    "start": "971020",
    "end": "978790"
  },
  {
    "text": "executable which can help you to create virtual network continue endpoint apply",
    "start": "978790",
    "end": "986050"
  },
  {
    "text": "ratings and policies as what Denisha has explained earlier for Windows container",
    "start": "986050",
    "end": "992400"
  },
  {
    "text": "there will be continual networks which container network endpoint like the",
    "start": "992400",
    "end": "999040"
  },
  {
    "text": "virtual switch port and then the policy mechanism of vfp",
    "start": "999040",
    "end": "1006140"
  },
  {
    "text": "so at this point let's take ad endpoint as an example to show how you can run CI",
    "start": "1007640",
    "end": "1015800"
  },
  {
    "text": "plug in manually what's the internal flow here",
    "start": "1015800",
    "end": "1023470"
  },
  {
    "text": "I have two executables that I am executable and the C&I plug-in",
    "start": "1023870",
    "end": "1030490"
  },
  {
    "text": "executable in the middle and then I need to author my network configuration file",
    "start": "1030490",
    "end": "1036980"
  },
  {
    "text": "as you can see the right bottom at the right bottom block you can see the",
    "start": "1036980",
    "end": "1044930"
  },
  {
    "text": "configuration file basically I specify the name for my Upham and see my plugin",
    "start": "1044930",
    "end": "1050600"
  },
  {
    "text": "and then the subnet prefix and then on the top left a right sorry you can see",
    "start": "1050600",
    "end": "1058580"
  },
  {
    "text": "the environment variable in it I specify the add action the pod Network space and",
    "start": "1058580",
    "end": "1065660"
  },
  {
    "text": "then the path for where to find executables for sing I plug in an item",
    "start": "1065660",
    "end": "1072760"
  },
  {
    "text": "after that once I run the I plug-in with the configuration file and the",
    "start": "1072760",
    "end": "1078890"
  },
  {
    "text": "environment variables first the CI plug-in will call the functions to",
    "start": "1078890",
    "end": "1084740"
  },
  {
    "text": "create the virtual network then secondly it will call I Pam to assign IP address",
    "start": "1084740",
    "end": "1092810"
  },
  {
    "text": "to the pod based on the subnet prefix thirdly the CI plug-in will create the",
    "start": "1092810",
    "end": "1100460"
  },
  {
    "text": "end point based on the pattern network space the IP address and then connected",
    "start": "1100460",
    "end": "1106730"
  },
  {
    "text": "to the virtual network so at this point I'm pretty much ready I",
    "start": "1106730",
    "end": "1116000"
  },
  {
    "start": "1110000",
    "end": "1192000"
  },
  {
    "text": "am very clear about seeing I plug in how it works I'm ready to write my sing I",
    "start": "1116000",
    "end": "1122010"
  },
  {
    "text": "plug here I'd like to share you a bunch of api's as what inish explained earlier",
    "start": "1122010",
    "end": "1129390"
  },
  {
    "text": "the HTS shim exposed by Microsoft you can find it on github let's walk through",
    "start": "1129390",
    "end": "1136860"
  },
  {
    "text": "all the api's so for network they are api's to create and delete the virtual",
    "start": "1136860",
    "end": "1143580"
  },
  {
    "text": "network specifically for the there is a data structure called HC HC n network",
    "start": "1143580",
    "end": "1150660"
  },
  {
    "text": "config in it basically you specify populate all the fuse using your network",
    "start": "1150660",
    "end": "1157230"
  },
  {
    "text": "configuration file then the create and delete namespace",
    "start": "1157230",
    "end": "1163840"
  },
  {
    "text": "this is how Windows version of darker called those two API is to create the",
    "start": "1163840",
    "end": "1169779"
  },
  {
    "text": "part network space and then to AP is for you to create and",
    "start": "1169779",
    "end": "1175700"
  },
  {
    "text": "delete the network and point lastly but not least this is how the",
    "start": "1175700",
    "end": "1182070"
  },
  {
    "text": "Windows version of coop proxy to enable the kubernetes service on the windows",
    "start": "1182070",
    "end": "1189600"
  },
  {
    "text": "component on the windows node here in this slide I'm showing you a",
    "start": "1189600",
    "end": "1197790"
  },
  {
    "start": "1192000",
    "end": "1258000"
  },
  {
    "text": "conceptual network topology for huawei Windows container cluster you can see",
    "start": "1197790",
    "end": "1204850"
  },
  {
    "text": "three windows nodes and then I each node we apply the outer bridge network mode",
    "start": "1204850",
    "end": "1211990"
  },
  {
    "text": "and then across node we are using the l3 routing table what special thing I want",
    "start": "1211990",
    "end": "1221140"
  },
  {
    "text": "to call out is on the each Windows node we specially created a CBR 0 and the",
    "start": "1221140",
    "end": "1228910"
  },
  {
    "text": "point I use it as the continue Network a default gateway and also for the CBR 0",
    "start": "1228910",
    "end": "1236140"
  },
  {
    "text": "we enabled the IP forwarding so that for the continued Network egress it will be",
    "start": "1236140",
    "end": "1243070"
  },
  {
    "text": "dotted to CBR 0 then after that forwarded to the host Nick and then for",
    "start": "1243070",
    "end": "1251680"
  },
  {
    "text": "the API side I shared earlier you can find it on those two things",
    "start": "1251680",
    "end": "1258659"
  },
  {
    "text": "next we'd like to give a quick demo of the Huawei Windows container service",
    "start": "1259210",
    "end": "1267730"
  },
  {
    "start": "1267000",
    "end": "1387000"
  },
  {
    "text": "you",
    "start": "1277370",
    "end": "1279430"
  },
  {
    "text": "this is the website for huawei cloud",
    "start": "1288860",
    "end": "1293880"
  },
  {
    "text": "continue engine as you can see how is the first cloud provider in China",
    "start": "1293880",
    "end": "1300630"
  },
  {
    "text": "supporting Windows continued service I have to Venus clusters build already for",
    "start": "1300630",
    "end": "1308789"
  },
  {
    "text": "the left one as you can see there are two notes to Windows worker notes in",
    "start": "1308789",
    "end": "1315270"
  },
  {
    "text": "this cluster besides the actually this one so there",
    "start": "1315270",
    "end": "1320880"
  },
  {
    "text": "are two notes and then besides the web UI you can also use the Kouga kado to",
    "start": "1320880",
    "end": "1327659"
  },
  {
    "text": "directly manage your machines before we drill down to detail scenarios I like to",
    "start": "1327659",
    "end": "1334890"
  },
  {
    "text": "point out a bunch of tools which are really useful when you try to",
    "start": "1334890",
    "end": "1340020"
  },
  {
    "text": "troubleshoot your network issues the first one is the clock blog this would",
    "start": "1340020",
    "end": "1346830"
  },
  {
    "text": "help you to collect run on your Windows host and collect all your continued",
    "start": "1346830",
    "end": "1352110"
  },
  {
    "text": "network settings for example like what a Danish call out earlier your what kind",
    "start": "1352110",
    "end": "1358049"
  },
  {
    "text": "of virtual network you have how many endpoints you created what kind of vfp",
    "start": "1358049",
    "end": "1363990"
  },
  {
    "text": "policies you created and apply to the endpoints and then this to commands a",
    "start": "1363990",
    "end": "1371100"
  },
  {
    "text": "start and stop packet capture habit commence you can also run on your",
    "start": "1371100",
    "end": "1377520"
  },
  {
    "text": "Windows node to collect all the container Network tracings and later on you can analyze and troubleshooting",
    "start": "1377520",
    "end": "1384929"
  },
  {
    "text": "issues so let's get to the master Linux master",
    "start": "1384929",
    "end": "1393049"
  },
  {
    "start": "1387000",
    "end": "1427000"
  },
  {
    "text": "node and see what's going on for the for the cluster as you can see I have two",
    "start": "1393049",
    "end": "1398749"
  },
  {
    "text": "nodes on the machine and then I have a bunch of paths deployed especially I",
    "start": "1398749",
    "end": "1405710"
  },
  {
    "text": "want to show you some of the puzzle keep in mind all the IPS so for example like",
    "start": "1405710",
    "end": "1413539"
  },
  {
    "text": "the 1.13 six and 1.39 are hosted on one",
    "start": "1413539",
    "end": "1419659"
  },
  {
    "text": "Windows node and then the 0.10 0.7 are on the room other node and then here I",
    "start": "1419659",
    "end": "1428450"
  },
  {
    "start": "1427000",
    "end": "1787000"
  },
  {
    "text": "have all the the two Windows machines available and then I want to show you",
    "start": "1428450",
    "end": "1435470"
  },
  {
    "text": "the config file so here you see the",
    "start": "1435470",
    "end": "1440960"
  },
  {
    "text": "subnet proof subnet prefix and then the type and IPAM type are the executable",
    "start": "1440960",
    "end": "1447919"
  },
  {
    "text": "names for my cluster seeing I plug-in and then especially here are the the nod",
    "start": "1447919",
    "end": "1456080"
  },
  {
    "text": "policies finished just colored earlier you need to put a reception for all your",
    "start": "1456080",
    "end": "1462879"
  },
  {
    "text": "like a container cedar and then your host cedar too as a exception for the",
    "start": "1462879",
    "end": "1468859"
  },
  {
    "text": "egress nut and some other policies need to be applied as well on this machine I",
    "start": "1468859",
    "end": "1475519"
  },
  {
    "text": "have the tool available downloaded already so so okay",
    "start": "1475519",
    "end": "1486190"
  },
  {
    "text": "we can run the",
    "start": "1486380",
    "end": "1490180"
  },
  {
    "text": "yeah okay cost ya",
    "start": "1492110",
    "end": "1499880"
  },
  {
    "text": "Calla clocks you",
    "start": "1504590",
    "end": "1510860"
  },
  {
    "text": "so I have the",
    "start": "1511430",
    "end": "1514910"
  },
  {
    "text": "so I downloaded this is oh and then you can run it and then go to the folder",
    "start": "1518550",
    "end": "1525960"
  },
  {
    "text": "then you can see bunch of files created those are the log files and then later",
    "start": "1525960",
    "end": "1532410"
  },
  {
    "text": "on Tinesha gonna go through those files and explain in detail after that let me",
    "start": "1532410",
    "end": "1538290"
  },
  {
    "text": "like running into the containers let me get to the container",
    "start": "1538290",
    "end": "1545720"
  },
  {
    "text": "so let's get to this container",
    "start": "1547510",
    "end": "1552670"
  },
  {
    "text": "and then let's first see the IP address for this container as you can see it's",
    "start": "1556270",
    "end": "1563290"
  },
  {
    "text": "the 1.1 39 how about it like let me ping the part on the same host but it's the",
    "start": "1563290",
    "end": "1573250"
  },
  {
    "text": "other part so as you can see it can heart-to-heart communication is working",
    "start": "1573250",
    "end": "1580809"
  },
  {
    "text": "how about the other part like the pod on the other machine canopy unit it's",
    "start": "1580809",
    "end": "1587230"
  },
  {
    "text": "working as well so for this wise pod through the routing table and then to",
    "start": "1587230",
    "end": "1594429"
  },
  {
    "text": "the other host then how about I want to go to the internet I want to go to I do",
    "start": "1594429",
    "end": "1602220"
  },
  {
    "text": "then would it work",
    "start": "1602220",
    "end": "1606990"
  },
  {
    "text": "you so as you can see it's working as well so on this container inside the",
    "start": "1613260",
    "end": "1620529"
  },
  {
    "text": "container it can also go to the Internet and then the other thing we'll be able",
    "start": "1620529",
    "end": "1626049"
  },
  {
    "text": "to try to try out is basically on my other machine I have a real customer is",
    "start": "1626049",
    "end": "1633279"
  },
  {
    "text": "web server installed how about I get get to there and see what weather is working",
    "start": "1633279",
    "end": "1639610"
  },
  {
    "text": "or not",
    "start": "1639610",
    "end": "1641880"
  },
  {
    "text": "so as you can see that's working as well so how about I I disable the ayahs on",
    "start": "1651790",
    "end": "1658570"
  },
  {
    "text": "the other machine and see if it's working or not let's go inside the container okay I'm",
    "start": "1658570",
    "end": "1666310"
  },
  {
    "text": "in the inside this 0.7 container already let me stop the website",
    "start": "1666310",
    "end": "1674850"
  },
  {
    "text": "you",
    "start": "1677570",
    "end": "1679630"
  },
  {
    "text": "okay it's stopped and then let me get back to the other machine and see how",
    "start": "1682840",
    "end": "1688779"
  },
  {
    "text": "it's going",
    "start": "1688779",
    "end": "1691139"
  },
  {
    "text": "so it's failing right and then the order to troubleshoot I like to collect some",
    "start": "1694330",
    "end": "1701419"
  },
  {
    "text": "tracings",
    "start": "1701419",
    "end": "1703990"
  },
  {
    "text": "the risk in the container okay",
    "start": "1706930",
    "end": "1711420"
  },
  {
    "text": "it's okay you just say that okay okay let me get to the other window command",
    "start": "1714330",
    "end": "1722080"
  },
  {
    "text": "window and then I want to slander",
    "start": "1722080",
    "end": "1727169"
  },
  {
    "text": "I could capture",
    "start": "1727690",
    "end": "1731758"
  },
  {
    "text": "okay I want to run this at racing okay and then see whether",
    "start": "1734070",
    "end": "1742670"
  },
  {
    "text": "okay and then I want to run the same",
    "start": "1745160",
    "end": "1750320"
  },
  {
    "text": "command okay and then let's get to the",
    "start": "1750320",
    "end": "1755630"
  },
  {
    "text": "other machine the remote machine and do the same thing and then once I collect",
    "start": "1755630",
    "end": "1761600"
  },
  {
    "text": "the log basically initially on a walk through and explain what's going on",
    "start": "1761600",
    "end": "1766910"
  },
  {
    "text": "there okay first stop the tracing",
    "start": "1766910",
    "end": "1775360"
  },
  {
    "text": "okay so before I go swimming into the logs I would like to just show you guys",
    "start": "1778620",
    "end": "1785440"
  },
  {
    "text": "the debugging flow so basically in general how to debug contain a Windows",
    "start": "1785440",
    "end": "1791440"
  },
  {
    "text": "container networking issues so you basically have so look at the cubelet",
    "start": "1791440",
    "end": "1800080"
  },
  {
    "text": "and Q proxy locks and make sure that the configuration from the kubernetes side is propagated through cubelet and q",
    "start": "1800080",
    "end": "1807190"
  },
  {
    "text": "proxy to the underlying system and then look at the cni spec and the cni locks to make sure that the configuration what",
    "start": "1807190",
    "end": "1814240"
  },
  {
    "text": "Kuban it is in q proxy was telling is communicated to CNI then using the",
    "start": "1814240",
    "end": "1819520"
  },
  {
    "text": "collect lock script look at the H&S state and make sure that all the policies are looking good in HN aside",
    "start": "1819520",
    "end": "1825760"
  },
  {
    "text": "which I will be showing you now and then look at the vfp state also to make sure that SNS has programmed the data plane",
    "start": "1825760",
    "end": "1832540"
  },
  {
    "text": "and expected results are there and policies are there on the vfp side and then eventually if control plane looks",
    "start": "1832540",
    "end": "1839050"
  },
  {
    "text": "good then go to the data plane and make sure that you can do a packet capture and then look at packet drops and see what has happened now in the scenario",
    "start": "1839050",
    "end": "1846970"
  },
  {
    "text": "that silliest walk-through she had to host and on host 1 she was trying to curl a application that's running on",
    "start": "1846970",
    "end": "1853420"
  },
  {
    "text": "another host so what is the expected flow here right the package should go to the come out of the container and it",
    "start": "1853420",
    "end": "1859810"
  },
  {
    "text": "should go to the CBR 0 which is the default gateway and then on the CBR 0 the tcp/ip stack looks up the next hop",
    "start": "1859810",
    "end": "1866500"
  },
  {
    "text": "for the route that is on the another host right and then it forwards the packet to the external host now the",
    "start": "1866500",
    "end": "1873430"
  },
  {
    "text": "packet reaches the external host and then it goes to the container port and then it eventually is delivered to the tcp/ip stack and inside the container",
    "start": "1873430",
    "end": "1880240"
  },
  {
    "text": "and tcp/ip stack is going to drop the packet because she did stop the website",
    "start": "1880240",
    "end": "1885370"
  },
  {
    "text": "inside the other container so basically that that packet will be dropped with saying that there is no endpoints now",
    "start": "1885370",
    "end": "1891850"
  },
  {
    "text": "let me quickly walk through the set of locks that we collected right so here is a network dump so this network dump",
    "start": "1891850",
    "end": "1898720"
  },
  {
    "text": "shows that she created an l2 bridge network and this is the JSON output of the l2 bridge network and it will show",
    "start": "1898720",
    "end": "1905350"
  },
  {
    "text": "you the set of IP addresses prefixes and the MAC address pool and the state of the network right and then the end",
    "start": "1905350",
    "end": "1912540"
  },
  {
    "text": "point or text will show you the list of endpoints on this host we have three local endpoints and the one remote end",
    "start": "1912540",
    "end": "1919620"
  },
  {
    "text": "point the remote endpoint are used for Q proxy when you are trying to play a load balancer and whatever the policy she",
    "start": "1919620",
    "end": "1926550"
  },
  {
    "text": "applied on the cni config you can see them here so there's a set of exception list out born ad and the set of route",
    "start": "1926550",
    "end": "1932730"
  },
  {
    "text": "policies and here is a IP config output that is also collected part of the collect locks you can see the set of",
    "start": "1932730",
    "end": "1939120"
  },
  {
    "text": "compartments created for those two containers she was running on this host and their corresponding IP addresses and",
    "start": "1939120",
    "end": "1945020"
  },
  {
    "text": "here is the vfp policy that it which is also collected by the collect log scrip",
    "start": "1945020",
    "end": "1950610"
  },
  {
    "text": "and you can see that this is the port as I said earlier vfp has individual policies per port like container port",
    "start": "1950610",
    "end": "1956730"
  },
  {
    "text": "has its own policies management port and external port so here is an example of a container port policy you can see that",
    "start": "1956730",
    "end": "1963600"
  },
  {
    "text": "there is an aquiline point layer and a bunch of fat old rules right and then you have the NAT layer this is a NAT",
    "start": "1963600",
    "end": "1970530"
  },
  {
    "text": "layer and the NAT layer has a bunch of groups and inside each NAT layer you",
    "start": "1970530",
    "end": "1975540"
  },
  {
    "text": "have the corresponding exceptions program the same policies that were applied in its own eyes will H&S will be",
    "start": "1975540",
    "end": "1981030"
  },
  {
    "text": "translated to vfp rules right so now let's take a look at the packet capture",
    "start": "1981030",
    "end": "1986610"
  },
  {
    "start": "1984000",
    "end": "2157000"
  },
  {
    "text": "so here is a set of packet capture that cindy captured on host 1 and host 2 right so here is the packet that said",
    "start": "1986610",
    "end": "1993450"
  },
  {
    "text": "that okay I am trying to reach from 39 1.39 and I'm going to 0.7 packet right",
    "start": "1993450",
    "end": "2000260"
  },
  {
    "text": "the the container right so as you can see the the port that we are interested",
    "start": "2000260",
    "end": "2006050"
  },
  {
    "text": "in is port 5 so whatever the policies I showed in vfp all of those will be",
    "start": "2006050",
    "end": "2011660"
  },
  {
    "text": "processed so basically the packet will flow through the endpoint laical pool layer the NAT layer and then the",
    "start": "2011660",
    "end": "2018890"
  },
  {
    "text": "customer out layer and everything right eventually the packet gets forwarded from 45 to port 3 which is the CBR 0 so",
    "start": "2018890",
    "end": "2026300"
  },
  {
    "text": "this is the statement that says that the packet was forwarded from code 5 to port 3 then on port 3 the packet goes to the",
    "start": "2026300",
    "end": "2035170"
  },
  {
    "text": "basically the tcp/ip stack and you can see that the TCP stack pipe",
    "start": "2035170",
    "end": "2041350"
  },
  {
    "text": "without lookup happens and looks for the next hop and then sends the packet to the other host now on the other host you",
    "start": "2041350",
    "end": "2048398"
  },
  {
    "text": "can see clearly that the packet reached the container port and it was eventually dropped because the end point was not",
    "start": "2048399",
    "end": "2054460"
  },
  {
    "text": "fallen so basically I would follow the same flow saying okay look up the data",
    "start": "2054460",
    "end": "2061148"
  },
  {
    "text": "plane only at the last resort right and first look at the configure issues and then eventually go to the data plane",
    "start": "2061149",
    "end": "2068580"
  },
  {
    "text": "I think we are already running out of time so sorry for this condense session",
    "start": "2068580",
    "end": "2074879"
  },
  {
    "text": "I hope you guys had a good information on windows container networking",
    "start": "2074880",
    "end": "2080720"
  },
  {
    "text": "it's HCN and CNI so it is accuracy and I okay",
    "start": "2096139",
    "end": "2106380"
  },
  {
    "text": "oh so both both of them are similar implementations either Sienna is like a juicy ni flannel calico all of the see a",
    "start": "2106380",
    "end": "2114390"
  },
  {
    "text": "nice go through the same tightness and VfB so basically it's two different implementations that's it should also",
    "start": "2114390",
    "end": "2121770"
  },
  {
    "text": "like the HCN is the kernel like a host computer service the windows kernel",
    "start": "2121770",
    "end": "2128010"
  },
  {
    "text": "provide a assure seeing is the azure version of CNI plugin how it has its own",
    "start": "2128010",
    "end": "2135090"
  },
  {
    "text": "CI a-- plugin so everybody can write their own and plug into kubernetes but",
    "start": "2135090",
    "end": "2140400"
  },
  {
    "text": "they are all built up on windows kernel",
    "start": "2140400",
    "end": "2145130"
  },
  {
    "text": "any other question if no thanks for coming thank you",
    "start": "2147700",
    "end": "2155050"
  },
  {
    "text": "[Applause]",
    "start": "2155050",
    "end": "2159250"
  }
]