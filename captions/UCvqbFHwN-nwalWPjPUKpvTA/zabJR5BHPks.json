[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "you",
    "start": "4350",
    "end": "6410"
  },
  {
    "text": "okay good morning everyone so we get started now thank you to everyone that is joining us today welcome to today's",
    "start": "9990",
    "end": "16960"
  },
  {
    "text": "CN CF webinar everything you need to know about storage for Cuban Ares my",
    "start": "16960",
    "end": "24430"
  },
  {
    "text": "name is Sanjeev Rampal I'm a principal engineer at Cisco and a CN CF ambassador I'll be moderating today's webinar we",
    "start": "24430",
    "end": "32200"
  },
  {
    "text": "would like to welcome our presenter today Alex checkup founder and CEO at",
    "start": "32200",
    "end": "37239"
  },
  {
    "text": "storage OS before we get started a few housekeeping items during the webinar",
    "start": "37239",
    "end": "43570"
  },
  {
    "text": "you will not be able to talk as an attendee there is a Q&A box at the",
    "start": "43570",
    "end": "48640"
  },
  {
    "text": "bottom of your screen please feel free to drop your questions in there and we'll get to as many as we can through",
    "start": "48640",
    "end": "55930"
  },
  {
    "text": "the call and at the end note the Q&A box is different from the chat box please use the Q&A box",
    "start": "55930",
    "end": "63119"
  },
  {
    "text": "this is an official webinar of the CNC F and as such is subject to the cnc of",
    "start": "63119",
    "end": "69040"
  },
  {
    "text": "code of conduct please do not add anything to the chat or questions that would be in violation of that code of",
    "start": "69040",
    "end": "75430"
  },
  {
    "text": "conduct basically please be respectful of your fellow participants and research",
    "start": "75430",
    "end": "81970"
  },
  {
    "text": "presenters with that I'm gonna hand it over to Alex to kick off today's",
    "start": "81970",
    "end": "87370"
  },
  {
    "text": "presentation please go ahead Alex so good morning good afternoon or good",
    "start": "87370",
    "end": "92770"
  },
  {
    "start": "90000",
    "end": "207000"
  },
  {
    "text": "evening wherever you are hope you're all staying safe and so just",
    "start": "92770",
    "end": "101860"
  },
  {
    "text": "a little bit of introduction about myself CEO of storage is where we've",
    "start": "101860",
    "end": "110620"
  },
  {
    "text": "been focusing on building a software-defined data storage platform and we'll talk a little bit about what",
    "start": "110620",
    "end": "117190"
  },
  {
    "text": "what a client base storage platform means I'm also the co-chair of the CNC f",
    "start": "117190",
    "end": "124380"
  },
  {
    "text": "storage sig and with being and in the storage sake we've being working on",
    "start": "124380",
    "end": "131670"
  },
  {
    "text": "providing facilities like educational contents like landscape documents as",
    "start": "131670",
    "end": "138099"
  },
  {
    "text": "well as working with the TOC on some of items on some of the project reviews for",
    "start": "138099",
    "end": "146420"
  },
  {
    "text": "projects that are looking to to join the CNC f42 graduates through the CNC F process before embarking on this on this",
    "start": "146420",
    "end": "155150"
  },
  {
    "text": "startup adventure I've spent 25 years in infrastructure engineering you know trying to build some of the some of the",
    "start": "155150",
    "end": "162740"
  },
  {
    "text": "larger infrastructure environments I'm gonna get a little plug in 4 for the CNC",
    "start": "162740",
    "end": "170480"
  },
  {
    "text": "f6 torch and the all the calls are are fully open and we we need twice a month",
    "start": "170480",
    "end": "178130"
  },
  {
    "text": "and sometimes it's to cover project reviews and project presentations from the community and sometimes it's to work",
    "start": "178130",
    "end": "184820"
  },
  {
    "text": "together on on different contents that's that we share through the C group oh it",
    "start": "184820",
    "end": "191900"
  },
  {
    "text": "would be really great to see some more members attend so feel free to sign up I",
    "start": "191900",
    "end": "197390"
  },
  {
    "text": "would love to and we love to talk to you about the projects that were working on",
    "start": "197390",
    "end": "204530"
  },
  {
    "text": "as seen in the CNC F um we had what I'm",
    "start": "204530",
    "end": "210590"
  },
  {
    "start": "207000",
    "end": "647000"
  },
  {
    "text": "going to do in terms of agenda today is talk a little bit about some of the challenges of storage and cloud native",
    "start": "210590",
    "end": "218510"
  },
  {
    "text": "environments and discuss some of the some of the principles of what to look for in in storage a client native",
    "start": "218510",
    "end": "226280"
  },
  {
    "text": "storage environments I'm then going to cover some of the aspects of the storage",
    "start": "226280",
    "end": "232100"
  },
  {
    "text": "landscape which are covered from the CN CF landscape white paper document that",
    "start": "232100",
    "end": "239329"
  },
  {
    "text": "we've created and I'm also going to talk about some of the internals of how kubernetes uses api's like CSI to to",
    "start": "239329",
    "end": "248810"
  },
  {
    "text": "work with different storage providers to manage storage within their environment",
    "start": "248810",
    "end": "254890"
  },
  {
    "text": "and then finally assuming my little prayer to the demo gods went was was",
    "start": "254890",
    "end": "263000"
  },
  {
    "text": "heard will will move ahead and have a little demo where I can show the use of",
    "start": "263000",
    "end": "269270"
  },
  {
    "text": "some of the cribben EFI's technologies like storage classes and PVCs and Peavey's",
    "start": "269270",
    "end": "275039"
  },
  {
    "text": "to run a stateful work load like a database in kubernetes the so so first",
    "start": "275039",
    "end": "284339"
  },
  {
    "text": "off we want to discuss why is storage important so I'm going to say something fairly controversial here despite",
    "start": "284339",
    "end": "292469"
  },
  {
    "text": "everything about container is being stateless there is no such thing as a stateless architecture rights",
    "start": "292469",
    "end": "298439"
  },
  {
    "text": "all applications are looking to store state somewhere whether it is consuming whether those",
    "start": "298439",
    "end": "305580"
  },
  {
    "text": "applications are consuming services but that exists outside of the kubernetes cluster or whether they using services",
    "start": "305580",
    "end": "312569"
  },
  {
    "text": "or storage functionality that lives within the group in a these cluster now",
    "start": "312569",
    "end": "318949"
  },
  {
    "text": "cloud native storage is is a very different beast in in but when we talk",
    "start": "318949",
    "end": "325469"
  },
  {
    "text": "about cribben at ease we're we're very familiar with the concept of pets versus",
    "start": "325469",
    "end": "330539"
  },
  {
    "text": "cattle right so the concept that nodes are specially curated and have special",
    "start": "330539",
    "end": "338219"
  },
  {
    "text": "resources or special services is a complete anti pattern to the way cribben",
    "start": "338219",
    "end": "343620"
  },
  {
    "text": "if these clusters are deployed what we really want is we want an environment",
    "start": "343620",
    "end": "349139"
  },
  {
    "text": "where your kubernetes cluster is treated like cattle so every node is is",
    "start": "349139",
    "end": "356519"
  },
  {
    "text": "homogeneous and can be used and can be used to to deploy applications now in",
    "start": "356519",
    "end": "364919"
  },
  {
    "text": "much the same way that's today you know a developer can use a bit of yarn all to",
    "start": "364919",
    "end": "371189"
  },
  {
    "text": "specify hey this is my application this is what it looks like it needs this amount of CPU this amount of memory and",
    "start": "371189",
    "end": "377789"
  },
  {
    "text": "maybe some you know some network connectivity cribben ethics then goes away and take",
    "start": "377789",
    "end": "384959"
  },
  {
    "text": "stats declaration order that that that piece of llam√≥ and kind of does a really",
    "start": "384959",
    "end": "391469"
  },
  {
    "text": "good job at playing Tetris with your with your infrastructure so it's abstracts away all of the services that",
    "start": "391469",
    "end": "398129"
  },
  {
    "text": "are available in the infrastructure and does it and that's the best to fit the",
    "start": "398129",
    "end": "403229"
  },
  {
    "text": "applications in the most efficient way to that to that deployment and makes sure that we maintain rules to",
    "start": "403229",
    "end": "413250"
  },
  {
    "text": "maintain scalability or or health so based on the fact that you know",
    "start": "413250",
    "end": "418949"
  },
  {
    "text": "applications within kubernetes use this this sort of functionality you should",
    "start": "418949",
    "end": "424770"
  },
  {
    "text": "also look for a clan native storage solution where the solution is both",
    "start": "424770",
    "end": "430979"
  },
  {
    "text": "declarative and composable rights and and in order to do this you're looking for a storage system that has you know a",
    "start": "430979",
    "end": "437310"
  },
  {
    "text": "rich a rich API driven process and that's that kubernetes can can interact",
    "start": "437310",
    "end": "443580"
  },
  {
    "text": "with so in much the same way if you specify CPU memory and network requirements you can also you should",
    "start": "443580",
    "end": "449729"
  },
  {
    "text": "also be able to specify something like you know I need 100 gigabytes and it needs to have these sorts of storage",
    "start": "449729",
    "end": "455550"
  },
  {
    "text": "attributes like black replication or encryption applied the second challenge",
    "start": "455550",
    "end": "461880"
  },
  {
    "text": "we see with with a client native storage is that data needs to be able to follow",
    "start": "461880",
    "end": "468979"
  },
  {
    "text": "applications right so in you know traditional storage architecture you're",
    "start": "468979",
    "end": "477240"
  },
  {
    "text": "very often presenting volumes were consuming storage on specific servers or",
    "start": "477240",
    "end": "483150"
  },
  {
    "text": "nodes or VMs and in cloud native storage we have a major difference here the the",
    "start": "483150",
    "end": "491430"
  },
  {
    "text": "the storage isn't being consumed by the node but rather it's being consumed by the application that's running on the",
    "start": "491430",
    "end": "496620"
  },
  {
    "text": "nose and on a lot of efforts obviously has gone into container izing the application and making the application",
    "start": "496620",
    "end": "502580"
  },
  {
    "text": "portable so this application can now run on any nodes in a cluster so you need to",
    "start": "502580",
    "end": "508650"
  },
  {
    "text": "make sure that the other storage subsystem can also apply the same rules and effectively be able to follow the",
    "start": "508650",
    "end": "516270"
  },
  {
    "text": "application wherever it moves within the within the within the data center or within the cluster the other thing is",
    "start": "516270",
    "end": "523620"
  },
  {
    "text": "obviously since kubernetes does such a great job at abstracting away the",
    "start": "523620",
    "end": "528839"
  },
  {
    "text": "infrastructure you know allowing you to to effectively deploy an application in",
    "start": "528839",
    "end": "534450"
  },
  {
    "text": "much the same way whether you're running bare metal on Prem or in the ends or",
    "start": "534450",
    "end": "540840"
  },
  {
    "text": "in cloud instances you're also looking for a storage system that can be perform across they can work across all if",
    "start": "540840",
    "end": "546330"
  },
  {
    "text": "there's different platforms to and finally I know this is a little cliched",
    "start": "546330",
    "end": "552120"
  },
  {
    "text": "but I'll I'll go as far as saying you know you want to look at the utility of the storage system too so it's one of",
    "start": "552120",
    "end": "558930"
  },
  {
    "text": "the things that needs to be considered because tripathi's environments tends to be more dynamic they are designed to be",
    "start": "558930",
    "end": "566550"
  },
  {
    "text": "dynamically scales and dynamically upgraded and therefore nodes come and go and notes are scale up and scale down so",
    "start": "566550",
    "end": "574560"
  },
  {
    "text": "so you want a store system that can adapt to the changing nature of of the kubernetes environments and then finally",
    "start": "574560",
    "end": "583410"
  },
  {
    "text": "this is this kind of obvious rights the people are deploying the automation and using kubernetes to automate everything",
    "start": "583410",
    "end": "591180"
  },
  {
    "text": "with very infrastructure rights and make it predictable and and recreate able so",
    "start": "591180",
    "end": "598290"
  },
  {
    "text": "this this kind of feeds on the concept of a cattle versus pets to that said",
    "start": "598290",
    "end": "604529"
  },
  {
    "text": "because we're looking to alternate everything within the infrastructure we also want to make sure that the",
    "start": "604529",
    "end": "611190"
  },
  {
    "text": "automation applies to the storage environment and then the storage environment is consistently available",
    "start": "611190",
    "end": "616410"
  },
  {
    "text": "sort of protects the data within your communities cluster and can also provide",
    "start": "616410",
    "end": "622230"
  },
  {
    "text": "the appropriate levels of performance and security that interact with the with",
    "start": "622230",
    "end": "627450"
  },
  {
    "text": "the cribben of these environments right so so you know predictable deterministic performance and security that that",
    "start": "627450",
    "end": "634620"
  },
  {
    "text": "natively works with even if these access controls and grew beneath these namespaces for example are our strong",
    "start": "634620",
    "end": "642470"
  },
  {
    "text": "attributes that we should be looking at for so I'm going to I'm going to move in",
    "start": "642470",
    "end": "651089"
  },
  {
    "text": "to to talk tonight next about its the CN CF storage landscape white paper the the",
    "start": "651089",
    "end": "660750"
  },
  {
    "text": "landscape the thesaurus landscape white paper its documents that we started working on and",
    "start": "660750",
    "end": "666390"
  },
  {
    "text": "now probably about dating 24 months back and we've had contributions and lots of",
    "start": "666390",
    "end": "673200"
  },
  {
    "text": "reviews on the document and what we've tried to do here is we've tried to",
    "start": "673200",
    "end": "679320"
  },
  {
    "text": "explain the different components and different attributes of a storage system",
    "start": "679320",
    "end": "685910"
  },
  {
    "text": "covering where a storage system can be deployed the the various attributes of",
    "start": "685910",
    "end": "691680"
  },
  {
    "text": "the storage system the layers and the topology within a storage system as well as how you access storage and the",
    "start": "691680",
    "end": "699570"
  },
  {
    "text": "management interfaces that I used on the control plane for those storage systems so the reason why this is important is",
    "start": "699570",
    "end": "707070"
  },
  {
    "text": "because storages are very broad topic right so we're we're we tend to think of",
    "start": "707070",
    "end": "713660"
  },
  {
    "text": "storage traditionally as as volumes but but in a cloud native world storage is",
    "start": "713660",
    "end": "718980"
  },
  {
    "text": "anyway you can persist data so in in in the client in the world you kind of have",
    "start": "718980",
    "end": "725100"
  },
  {
    "text": "two types of methods of doing that one is with traditional volumes and one is",
    "start": "725100",
    "end": "731760"
  },
  {
    "text": "sort of API based methods which which includes things like object stores and databases and key value stores for",
    "start": "731760",
    "end": "738360"
  },
  {
    "text": "example and more than ever before it's becoming really important for developers",
    "start": "738360",
    "end": "745350"
  },
  {
    "text": "to understand the storage attributes of their system and understand how a storage system works because they needs",
    "start": "745350",
    "end": "752190"
  },
  {
    "text": "to understand they needs to to to ensure that those attributes match to what's",
    "start": "752190",
    "end": "757950"
  },
  {
    "text": "their application requires so we'll talk a little bit about the attributes in a second the first point is there are lots",
    "start": "757950",
    "end": "765960"
  },
  {
    "text": "of different ways of deploying storage rates within environment right the the",
    "start": "765960",
    "end": "772410"
  },
  {
    "text": "more traditional hardware solutions are typically deployed in a datacenter but",
    "start": "772410",
    "end": "779700"
  },
  {
    "text": "obviously some of those solutions have limitations on the portability and the",
    "start": "779700",
    "end": "786630"
  },
  {
    "text": "use of those solutions within cloud environments software solutions tends to be more platform",
    "start": "786630",
    "end": "793089"
  },
  {
    "text": "agnostic and some software solutions and and some of the projects that we're",
    "start": "793089",
    "end": "798430"
  },
  {
    "text": "looking at in boats commercial vendors and CN CF projects you have software",
    "start": "798430",
    "end": "805809"
  },
  {
    "text": "solutions that can be deployed as a container and the deployments can actually be automated through an",
    "start": "805809",
    "end": "812379"
  },
  {
    "text": "orchestrated - and finally of course there are storage services which can be",
    "start": "812379",
    "end": "817959"
  },
  {
    "text": "consumed from the public cloud providers so so public cloud providers provides services like object stores or disk",
    "start": "817959",
    "end": "826360"
  },
  {
    "text": "volumes - so we talked a little bit",
    "start": "826360",
    "end": "831699"
  },
  {
    "text": "about the storage attributes and but why isn't important why is it important to understand what these different storage",
    "start": "831699",
    "end": "838720"
  },
  {
    "text": "attributes me so when we drove to landscape white paper we classify its",
    "start": "838720",
    "end": "844839"
  },
  {
    "text": "the attributes into into five different main types availability scalability",
    "start": "844839",
    "end": "850809"
  },
  {
    "text": "performance consistency and durability what we find was as we were discussing",
    "start": "850809",
    "end": "857800"
  },
  {
    "text": "and these different attributes is that each of these attributes are important to different aspects of an application",
    "start": "857800",
    "end": "864699"
  },
  {
    "text": "so for example most applications have architectural patterns that depend on",
    "start": "864699",
    "end": "871779"
  },
  {
    "text": "storage subsystem to provide a layer of availability so if an application needs to move between nodes or failover it",
    "start": "871779",
    "end": "879610"
  },
  {
    "text": "needs to be able to continue to access the same data for example similarly",
    "start": "879610",
    "end": "885429"
  },
  {
    "text": "another another another liver or another aspect that is that is very important",
    "start": "885429",
    "end": "891249"
  },
  {
    "text": "for some applications is scalability now scalability again can be measured in a",
    "start": "891249",
    "end": "897459"
  },
  {
    "text": "number of different ways it could be the scalability of the number of operations",
    "start": "897459",
    "end": "902470"
  },
  {
    "text": "or the true preserveth environments or it could be things like the scalability of the number of concurrent clients for",
    "start": "902470",
    "end": "908889"
  },
  {
    "text": "example that can connect into the system or indeed the number of components so so that's the versus system scale",
    "start": "908889",
    "end": "915699"
  },
  {
    "text": "horizontally or does it scale vertically for example similarly we talked about deterministic",
    "start": "915699",
    "end": "922809"
  },
  {
    "text": "performance and often performance is one of the is one of the key measures of of a storage system that that people",
    "start": "922809",
    "end": "928420"
  },
  {
    "text": "want to understand and but again most storage system topologies have a number",
    "start": "928420",
    "end": "935530"
  },
  {
    "text": "of compromises and they are typically optimized for some combination of",
    "start": "935530",
    "end": "942960"
  },
  {
    "text": "different performance parameters so what we'll see what we see is we see some",
    "start": "942960",
    "end": "948130"
  },
  {
    "text": "storage systems for example that are highly optimized for low latency and and",
    "start": "948130",
    "end": "953680"
  },
  {
    "text": "are suitable for example for a transactional systems which which required at that low latency per per",
    "start": "953680",
    "end": "960730"
  },
  {
    "text": "operation whereas other storage systems are optimized for troupers for example",
    "start": "960730",
    "end": "966540"
  },
  {
    "text": "for things like you know data analytics or data warehousing type type operations",
    "start": "966540",
    "end": "973800"
  },
  {
    "text": "when we talk about compromises and optimizations of different storage systems the other aspects to keep in",
    "start": "973980",
    "end": "979900"
  },
  {
    "text": "mind in these is the consistency so most systems will have some level of you know",
    "start": "979900",
    "end": "991510"
  },
  {
    "text": "different levers on the consistency attribute that dramatically affect availability scalability and performance",
    "start": "991510",
    "end": "998100"
  },
  {
    "text": "and consistencies measures and two vectors one is the amount of time that",
    "start": "998100",
    "end": "1003540"
  },
  {
    "text": "it takes to to commit the data to",
    "start": "1003540",
    "end": "1008640"
  },
  {
    "text": "non-volatile storage once it's been committed and the second is the delay",
    "start": "1008640",
    "end": "1014250"
  },
  {
    "text": "once that data has been committed to be able to access that consistently across all the different nodes in a cluster",
    "start": "1014250",
    "end": "1020430"
  },
  {
    "text": "right and you will find that some applications can tolerate eventual",
    "start": "1020430",
    "end": "1026310"
  },
  {
    "text": "consistency and some applications needs very strong synchronous consistency and",
    "start": "1026310",
    "end": "1034079"
  },
  {
    "text": "then finally we we look at durability right and durability sometimes gets",
    "start": "1034079",
    "end": "1040290"
  },
  {
    "text": "confused with its availability but they are fundamentally different things so",
    "start": "1040290",
    "end": "1045900"
  },
  {
    "text": "availability is talking about the ability of storage to failover and to",
    "start": "1045900",
    "end": "1051180"
  },
  {
    "text": "move between nodes and to provide some level of redundancy the the durability is a measure of",
    "start": "1051180",
    "end": "1058440"
  },
  {
    "text": "the the way that the data is protected on the backend in the system and nothing",
    "start": "1058440",
    "end": "1064350"
  },
  {
    "text": "cludes redundancy but it also includes additional nature it's like for example",
    "start": "1064350",
    "end": "1069960"
  },
  {
    "text": "the way the storage system protects against corruption on the underlying this kanika for example so we move on",
    "start": "1069960",
    "end": "1081030"
  },
  {
    "start": "1080000",
    "end": "1448000"
  },
  {
    "text": "then to the storage layers within within a storage system so in a sewer system",
    "start": "1081030",
    "end": "1086930"
  },
  {
    "text": "it's it's now more common than ever that a typical environment will be composed",
    "start": "1086930",
    "end": "1095070"
  },
  {
    "text": "of a number of different layers and some of the layers can be can be intermingled",
    "start": "1095070",
    "end": "1102000"
  },
  {
    "text": "from different systems so it's not it's not uncommon to find different storage",
    "start": "1102000",
    "end": "1108840"
  },
  {
    "text": "systems for example layers on top of each other to provide different services or different functionality at the very",
    "start": "1108840",
    "end": "1115800"
  },
  {
    "text": "top you have the work that the orchestrator is doing things like",
    "start": "1115800",
    "end": "1122120"
  },
  {
    "text": "virtualizing demands points and making sure that land points and that is they are available on different nodes within",
    "start": "1122120",
    "end": "1128010"
  },
  {
    "text": "a cluster and the the integration into",
    "start": "1128010",
    "end": "1133170"
  },
  {
    "text": "things like namespaces and the container bind - for example another factor to",
    "start": "1133170",
    "end": "1141170"
  },
  {
    "text": "consider with within a store within the storage layer is the topology that the",
    "start": "1141170",
    "end": "1146550"
  },
  {
    "text": "storage systems use there are there are storage systems that have a very",
    "start": "1146550",
    "end": "1152400"
  },
  {
    "text": "centralized topology and perhaps because they have you know some proprietary",
    "start": "1152400",
    "end": "1157770"
  },
  {
    "text": "Hardware interconnects or their designs for for scaling vertically and those",
    "start": "1157770",
    "end": "1164340"
  },
  {
    "text": "sort of systems tend to be optimized for you know performance and low latency but",
    "start": "1164340",
    "end": "1169740"
  },
  {
    "text": "obviously they have the complexity of only being able to install it to scale vertically you then move into",
    "start": "1169740",
    "end": "1177710"
  },
  {
    "text": "distributed systems which tends to provide much better scaling capabilities",
    "start": "1177710",
    "end": "1184950"
  },
  {
    "text": "by by scaling horizontally rather than rather than vertically",
    "start": "1184950",
    "end": "1190200"
  },
  {
    "text": "but distributive systems then have additional complexity and additional",
    "start": "1190200",
    "end": "1196070"
  },
  {
    "text": "latency requirements that need to be taken into consideration because the the data is spread out across more nodes and",
    "start": "1196070",
    "end": "1203399"
  },
  {
    "text": "therefore across more network connectivity is important and then there",
    "start": "1203399",
    "end": "1208950"
  },
  {
    "text": "are also technologies which which often apply to databases called charting for example where",
    "start": "1208950",
    "end": "1215840"
  },
  {
    "text": "scaling is its and distribute and distribution of data is done by",
    "start": "1215840",
    "end": "1221299"
  },
  {
    "text": "filtering the data into into different buckets and placing different buckets on different systems and the last apology",
    "start": "1221299",
    "end": "1229200"
  },
  {
    "text": "I'd like to talk about is - Converged which is which is something that's becoming a bit more common nowadays and",
    "start": "1229200",
    "end": "1236759"
  },
  {
    "text": "what what we're talking about here is an environment where nodes are are",
    "start": "1236759",
    "end": "1242789"
  },
  {
    "text": "simultaneously providing storage to a storage subsystem and used to provide to",
    "start": "1242789",
    "end": "1250470"
  },
  {
    "text": "provide storage capacity whilst also running applications and computes",
    "start": "1250470",
    "end": "1255749"
  },
  {
    "text": "capabilities the next layer down talks about the way the data is protected",
    "start": "1255749",
    "end": "1261749"
  },
  {
    "text": "within those systems we have things like you know traditional systems might use",
    "start": "1261749",
    "end": "1267539"
  },
  {
    "text": "some form some form of raids which which effectively creates parity or mirrors",
    "start": "1267539",
    "end": "1273239"
  },
  {
    "text": "for the for the data more commonly in distributed systems we see a racial coding which again is a way of of",
    "start": "1273239",
    "end": "1280559"
  },
  {
    "text": "creating or splitting the data into into multiple components and creating multiple fragments of parity and data",
    "start": "1280559",
    "end": "1290720"
  },
  {
    "text": "that can be used to recover the data if any individual nodes goes down and then",
    "start": "1290720",
    "end": "1297809"
  },
  {
    "text": "we have the concept of replicas which where data is replicated in its entirety",
    "start": "1297809",
    "end": "1303570"
  },
  {
    "text": "to a number of different nodes and often this is this is a big this is a big sort",
    "start": "1303570",
    "end": "1309989"
  },
  {
    "text": "of play between you know performance data protection and availability and",
    "start": "1309989",
    "end": "1315389"
  },
  {
    "text": "durability right so things like a ratio coating provides amazing durability but",
    "start": "1315389",
    "end": "1320700"
  },
  {
    "text": "typically at a latency cost and things like replicas provides a",
    "start": "1320700",
    "end": "1326570"
  },
  {
    "text": "lower latency solution but typically at the cost of using additional capacity",
    "start": "1326570",
    "end": "1332740"
  },
  {
    "text": "now one thing that mustn't be forgotten is is the concept - that every storage",
    "start": "1332740",
    "end": "1338360"
  },
  {
    "text": "system also provides some layer of data services so things like replication of",
    "start": "1338360",
    "end": "1343399"
  },
  {
    "text": "data or snapshots or clones which are point-in-time copies of data which are which are typically important for",
    "start": "1343399",
    "end": "1350120"
  },
  {
    "text": "different workflows whether it's you know providing disaster recovery or business continuity or providing backup",
    "start": "1350120",
    "end": "1358010"
  },
  {
    "text": "functionality and we can't we can't forget the physical or the non-volatile",
    "start": "1358010",
    "end": "1365360"
  },
  {
    "text": "layer right so from traditional spinning",
    "start": "1365360",
    "end": "1370370"
  },
  {
    "text": "media - too fast solid-state devices and moving forward - to non-volatile you",
    "start": "1370370",
    "end": "1377809"
  },
  {
    "text": "know memory class type components each of those components offer a variety of",
    "start": "1377809",
    "end": "1384340"
  },
  {
    "text": "different storage attributes when it comes to you know obviously performance but also more importantly things like",
    "start": "1384340",
    "end": "1390440"
  },
  {
    "text": "your ability to one of the one of the",
    "start": "1390440",
    "end": "1395779"
  },
  {
    "text": "things that's that's quite interesting is we try to put that we try to put a",
    "start": "1395779",
    "end": "1402080"
  },
  {
    "text": "table in place to to compare the different storage topologies between",
    "start": "1402080",
    "end": "1407149"
  },
  {
    "text": "local remote and and distributed systems and we kind of see that you know the topology comparison effects each of",
    "start": "1407149",
    "end": "1415970"
  },
  {
    "text": "those storage attributes bye-bye quite quite an amount right so local systems",
    "start": "1415970",
    "end": "1422990"
  },
  {
    "text": "for example are limited and availability whereas remote in distributed systems have better availability and better",
    "start": "1422990",
    "end": "1428480"
  },
  {
    "text": "scalability but of course performance",
    "start": "1428480",
    "end": "1433490"
  },
  {
    "text": "tends to be tends to be lower in local systems and you know we'll talk a little",
    "start": "1433490",
    "end": "1439250"
  },
  {
    "text": "bit about state or locality in a minute but obviously remote in the series since",
    "start": "1439250",
    "end": "1444440"
  },
  {
    "text": "tend to have slightly higher latencies so move",
    "start": "1444440",
    "end": "1451160"
  },
  {
    "start": "1448000",
    "end": "1537000"
  },
  {
    "text": "then to the data access interfaces and we talked a little bit earlier on about",
    "start": "1451160",
    "end": "1456560"
  },
  {
    "text": "the concept of volumes and API is right so it's it's really important to this",
    "start": "1456560",
    "end": "1464060"
  },
  {
    "text": "thing distinguish between the data access interface which is which is what a container or an application uses to",
    "start": "1464060",
    "end": "1472790"
  },
  {
    "text": "actually access the data and the control playing that that the orchestrator uses to do things like dynamic provisioning",
    "start": "1472790",
    "end": "1479090"
  },
  {
    "text": "of volumes or management of the storage system so it's probably fair to say that",
    "start": "1479090",
    "end": "1486560"
  },
  {
    "text": "the most mature API is that are available today with with kubernetes",
    "start": "1486560",
    "end": "1492650"
  },
  {
    "text": "integration all right volumes settings like block devices file systems and shared file systems and and and you know",
    "start": "1492650",
    "end": "1501860"
  },
  {
    "text": "a lot of databases or message queues or instrumentation like primitives for",
    "start": "1501860",
    "end": "1507110"
  },
  {
    "text": "example will depend on on being able to use these sort of volumes but likewise",
    "start": "1507110",
    "end": "1512510"
  },
  {
    "text": "of course there are a whole suite of storage systems that provides objects",
    "start": "1512510",
    "end": "1518360"
  },
  {
    "text": "tour interfaces or key value stores or or databases that are accessed over over",
    "start": "1518360",
    "end": "1523790"
  },
  {
    "text": "an API and those sort of systems for example will will typically be using",
    "start": "1523790",
    "end": "1530210"
  },
  {
    "text": "that API over over a network",
    "start": "1530210",
    "end": "1534429"
  },
  {
    "start": "1537000",
    "end": "1651000"
  },
  {
    "text": "each of the different data access interfaces are typically suited to two",
    "start": "1537260",
    "end": "1544560"
  },
  {
    "text": "different different sets of attributes so what I'm going to do what I'm going",
    "start": "1544560",
    "end": "1553110"
  },
  {
    "text": "to let that settle in for a second and you can you can see some of the comparisons on the screen so for example",
    "start": "1553110",
    "end": "1559170"
  },
  {
    "text": "you know you typically expect block systems to perhaps have a lower latency",
    "start": "1559170",
    "end": "1565710"
  },
  {
    "text": "or or file systems to be able to provide the date the ability to share workloads",
    "start": "1565710",
    "end": "1571650"
  },
  {
    "text": "across multiple nodes for example an object stores are well-known for for being able to scale to very large",
    "start": "1571650",
    "end": "1578310"
  },
  {
    "text": "capacities for example but that's it one word of caution that Cavett's all of",
    "start": "1578310",
    "end": "1584190"
  },
  {
    "text": "this is that you know we go back to the storage topologies and the layering we",
    "start": "1584190",
    "end": "1591390"
  },
  {
    "text": "often have to try and understand what is happening within a storage system right so sometimes if you have block devices",
    "start": "1591390",
    "end": "1599400"
  },
  {
    "text": "which are typically you know linked to for example a physical low latency",
    "start": "1599400",
    "end": "1608550"
  },
  {
    "text": "device and the server block systems can now block devices can now work remotely",
    "start": "1608550",
    "end": "1615030"
  },
  {
    "text": "and can work on distributed storage systems and therefore they they inherits the storage attributes of that's",
    "start": "1615030",
    "end": "1621930"
  },
  {
    "text": "distributed system similarly for example there are many file systems that are",
    "start": "1621930",
    "end": "1628410"
  },
  {
    "text": "built on an object store back-end and therefore they have the you know the",
    "start": "1628410",
    "end": "1633900"
  },
  {
    "text": "inherits the latency and availability into your ability of the object store rather than just rather than just the",
    "start": "1633900",
    "end": "1641520"
  },
  {
    "text": "attributes of the of the file system so understanding the layering is is fairly important when we're trying to look at",
    "start": "1641520",
    "end": "1648270"
  },
  {
    "text": "these comparisons and then we move on to the orchestration and management",
    "start": "1648270",
    "end": "1654930"
  },
  {
    "start": "1651000",
    "end": "1714000"
  },
  {
    "text": "interfaces so this is how things like dynamic provisioning work between kubernetes and the storage system so the",
    "start": "1654930",
    "end": "1663150"
  },
  {
    "text": "the container Orchestrator of recruitment these has a control plane interfaces there are a number of these",
    "start": "1663150",
    "end": "1668370"
  },
  {
    "text": "interfaces and they talk to the control plane in the storage system now in some cases the",
    "start": "1668370",
    "end": "1675160"
  },
  {
    "text": "storage system supports the the control plane API is natively and in some cases",
    "start": "1675160",
    "end": "1683250"
  },
  {
    "text": "there the the the orchestrator is talking via a framework or a set of",
    "start": "1683250",
    "end": "1689350"
  },
  {
    "text": "tools to provide the bridge between the orchestrator api and the storage system",
    "start": "1689350",
    "end": "1696280"
  },
  {
    "text": "api of course as we discussed before the workloads talk to the talk of the death",
    "start": "1696280",
    "end": "1703390"
  },
  {
    "text": "plain via the data access interface which is which is very separates from the control plane interfaces so you",
    "start": "1703390",
    "end": "1710500"
  },
  {
    "text": "might ask okay we've listed a number of different control plane interfaces but what they all mean",
    "start": "1710500",
    "end": "1715510"
  },
  {
    "start": "1714000",
    "end": "1797000"
  },
  {
    "text": "so the key interface here is the container storage interface container",
    "start": "1715510",
    "end": "1722290"
  },
  {
    "text": "storage interface is you know similar to the C&I for networking or CRI for for",
    "start": "1722290",
    "end": "1728080"
  },
  {
    "text": "the runtime is a standard api in which which was adopted between orchestras",
    "start": "1728080",
    "end": "1736660"
  },
  {
    "text": "like kubernetes and different storage vendors so so quietly there are I",
    "start": "1736660",
    "end": "1742350"
  },
  {
    "text": "actually lost track but there's easily 50 or more storage systems that support",
    "start": "1742350",
    "end": "1748930"
  },
  {
    "text": "the CSI interface that integrates with communities it's I'm highlighting CSI",
    "start": "1748930",
    "end": "1756610"
  },
  {
    "text": "because this is the this is the fact that the fact that standards for interfacing kubernetes to different",
    "start": "1756610",
    "end": "1764530"
  },
  {
    "text": "storage systems and different storage services in the past we had drivers that",
    "start": "1764530",
    "end": "1770590"
  },
  {
    "text": "were mainlined into the criminality source and we had the concept of",
    "start": "1770590",
    "end": "1775600"
  },
  {
    "text": "criminais these flex volumes but the if",
    "start": "1775600",
    "end": "1780610"
  },
  {
    "text": "you're trying to implement a new system nowadays we should it's probably worth",
    "start": "1780610",
    "end": "1785710"
  },
  {
    "text": "focusing entirely on on CSI because that's the standard where all the development and and advancements are",
    "start": "1785710",
    "end": "1793030"
  },
  {
    "text": "happening today um so we'll talk a little bit now about",
    "start": "1793030",
    "end": "1800850"
  },
  {
    "start": "1797000",
    "end": "1825000"
  },
  {
    "text": "how storage is configured in kubernetes so so now that we talked about and we",
    "start": "1800850",
    "end": "1806280"
  },
  {
    "text": "kind of set the seeing of storage system with all those different layers and different data access methods and",
    "start": "1806280",
    "end": "1812640"
  },
  {
    "text": "different control plane access methods what does this actually translate to in",
    "start": "1812640",
    "end": "1817920"
  },
  {
    "text": "in in real life and how are these how do these systems interact with kubernetes",
    "start": "1817920",
    "end": "1825860"
  },
  {
    "text": "so we'll talk a little bit first about the concept of dynamic provisioning so",
    "start": "1825860",
    "end": "1832559"
  },
  {
    "text": "you remember when we said storage needs to be application centric and therefore",
    "start": "1832559",
    "end": "1840000"
  },
  {
    "text": "that enables you know self-service and declarative and composable storage how",
    "start": "1840000",
    "end": "1846750"
  },
  {
    "text": "is this how is this actually achieved so the the main abstraction layer here is",
    "start": "1846750",
    "end": "1852210"
  },
  {
    "text": "is is called a storage class so so effectively a storage class is is a",
    "start": "1852210",
    "end": "1860070"
  },
  {
    "text": "definition that that specifies a driver",
    "start": "1860070",
    "end": "1865500"
  },
  {
    "text": "interface typically through CSI that's that driver interface will be will be used by the storage system to",
    "start": "1865500",
    "end": "1874140"
  },
  {
    "text": "provide and manage to storage right and this is in relation to dynamically",
    "start": "1874140",
    "end": "1880200"
  },
  {
    "text": "provisioning the storage but also things like attaching storage to physical nodes",
    "start": "1880200",
    "end": "1885630"
  },
  {
    "text": "and or to nodes within the cluster and mounting that storage in managing the storage lifecycle so so that's all well",
    "start": "1885630",
    "end": "1894150"
  },
  {
    "text": "and good but what does a storage class really look like so so a storage class is actually typically something really",
    "start": "1894150",
    "end": "1900419"
  },
  {
    "start": "1898000",
    "end": "1937000"
  },
  {
    "text": "really simple like this the storage class defines a name so I mean discuss",
    "start": "1900419",
    "end": "1907620"
  },
  {
    "text": "we in this case we're calling it fast because you can create different storage classes for for different types of",
    "start": "1907620",
    "end": "1914010"
  },
  {
    "text": "environments it might specify some some",
    "start": "1914010",
    "end": "1920110"
  },
  {
    "text": "labels or flags that are specific to the storage system and it finds the",
    "start": "1920110",
    "end": "1925420"
  },
  {
    "text": "provisioner in this case where we simplified it and just and just call it storage arrest but if you were if we",
    "start": "1925420",
    "end": "1931270"
  },
  {
    "text": "were using CSI the provisionary would be it would be a CSI provisioner what this",
    "start": "1931270",
    "end": "1937510"
  },
  {
    "start": "1937000",
    "end": "2019000"
  },
  {
    "text": "translates to Dan is how do how do developers who are who who want to use",
    "start": "1937510",
    "end": "1943510"
  },
  {
    "text": "that composable storage everything actually register what they need so the",
    "start": "1943510",
    "end": "1950470"
  },
  {
    "text": "the the constant here is a persistent volume claim right so within the",
    "start": "1950470",
    "end": "1958809"
  },
  {
    "text": "definition of your application or your quads you can make a persistent volume",
    "start": "1958809",
    "end": "1965050"
  },
  {
    "text": "claim from the pool of storage that's linked to that storage class again what",
    "start": "1965050",
    "end": "1973000"
  },
  {
    "text": "does a persistent volume claimant look like well fundamentally it's really really simple you give it a name in this",
    "start": "1973000",
    "end": "1980200"
  },
  {
    "text": "case we're calling it the database volume you telling its which storage class to use in this case we're",
    "start": "1980200",
    "end": "1986679"
  },
  {
    "text": "specifying the fast and you specify the size of the storage um I'll talk a",
    "start": "1986679",
    "end": "1994179"
  },
  {
    "text": "little bit about the access modes but fundamentally all all it is is you say",
    "start": "1994179",
    "end": "2000210"
  },
  {
    "text": "I'm going to give a name to micro system volume claim I'm going to use a particular storage class and it's this",
    "start": "2000210",
    "end": "2005670"
  },
  {
    "text": "amount of capacity it is also possible to pass to pass things like labels which",
    "start": "2005670",
    "end": "2011580"
  },
  {
    "text": "which might affect the the provisioning capabilities of which a point be specific to a particular storage system",
    "start": "2011580",
    "end": "2018390"
  },
  {
    "text": "to what happens then behind the scenes",
    "start": "2018390",
    "end": "2023850"
  },
  {
    "start": "2019000",
    "end": "2064000"
  },
  {
    "text": "is that kubernetes talks over the storage interface to the storage system",
    "start": "2023850",
    "end": "2032190"
  },
  {
    "text": "the storage system creates a persistent volume so so we said that the developer",
    "start": "2032190",
    "end": "2039120"
  },
  {
    "text": "requite makes a claim and a storage system replies by saying hey here you are this is your persistent volume you",
    "start": "2039120",
    "end": "2047670"
  },
  {
    "text": "then reference that claim in the pod and when your applique",
    "start": "2047670",
    "end": "2053460"
  },
  {
    "text": "in the poll that started that persistent volume is connected into the pod so",
    "start": "2053460",
    "end": "2061980"
  },
  {
    "text": "moving forwards a little bit and what does that actually look like so so this is this is an example of a simple you",
    "start": "2061980",
    "end": "2070560"
  },
  {
    "start": "2064000",
    "end": "2149000"
  },
  {
    "text": "know an empty pods that just just runs a sleep command and uses a PVC one laying",
    "start": "2070560",
    "end": "2078618"
  },
  {
    "text": "so what we see here is and when the PVC is requested storage system will create",
    "start": "2078619",
    "end": "2086280"
  },
  {
    "text": "the the persistent volume like we just described and then that persistent volume is attached to a node and is",
    "start": "2086280",
    "end": "2093780"
  },
  {
    "text": "mounted typically inviolable cube Linton's along a long path named inviolable cubelet once that happens and",
    "start": "2093780",
    "end": "2102359"
  },
  {
    "text": "the container is then started that's that part is bind mantids",
    "start": "2102359",
    "end": "2109710"
  },
  {
    "text": "into the specified nine points which in this case is /mnt within the container",
    "start": "2109710",
    "end": "2114960"
  },
  {
    "text": "namespace so so the application starts and now has access to a file system or",
    "start": "2114960",
    "end": "2120839"
  },
  {
    "text": "that volume under under in this case the /mnt - point if path application then moves",
    "start": "2120839",
    "end": "2128849"
  },
  {
    "text": "to different nodes within within the cluster the reverse happens the",
    "start": "2128849",
    "end": "2135800"
  },
  {
    "text": "persistent volume is detached and reattached on another note and then remounted and",
    "start": "2135800",
    "end": "2143280"
  },
  {
    "text": "can be reused by an application on the other nodes so if you recall we know we",
    "start": "2143280",
    "end": "2152160"
  },
  {
    "start": "2149000",
    "end": "2217000"
  },
  {
    "text": "talked a little bit about and volume access modes - so in the volume access modes we have two typical modes one is",
    "start": "2152160",
    "end": "2159420"
  },
  {
    "text": "read/write once and one is read/write mini so readwrite once means that the",
    "start": "2159420",
    "end": "2164790"
  },
  {
    "text": "volume is mounted and accessed exclusively only by one node this is this is typically the type of storage",
    "start": "2164790",
    "end": "2172440"
  },
  {
    "text": "that you'd see from say block storage services we also have the read/write",
    "start": "2172440",
    "end": "2178859"
  },
  {
    "text": "mini and this will typically be used to access a shared file system so so",
    "start": "2178859",
    "end": "2184830"
  },
  {
    "text": "effectively this gives the ability to mount a fire system on",
    "start": "2184830",
    "end": "2190000"
  },
  {
    "text": "multiple nodes simultaneously and those and and you know that can be used for",
    "start": "2190000",
    "end": "2197150"
  },
  {
    "text": "four different different storage patterns perhaps where a common file",
    "start": "2197150",
    "end": "2202250"
  },
  {
    "text": "system needs to be available to provide you know a consistent level of config or",
    "start": "2202250",
    "end": "2207440"
  },
  {
    "text": "a consistent level of reference data to multiple its multiple nodes within a system okay so what I'm going to do is",
    "start": "2207440",
    "end": "2219800"
  },
  {
    "start": "2217000",
    "end": "2295000"
  },
  {
    "text": "I'm going to show a very very quick example assuming everything works of",
    "start": "2219800",
    "end": "2226450"
  },
  {
    "text": "provisioning a stateful workloads and moving a full workload from from one",
    "start": "2226450",
    "end": "2231860"
  },
  {
    "text": "node to another you know Ana kubernetes cluster for reference I'm just using one",
    "start": "2231860",
    "end": "2238010"
  },
  {
    "text": "of the simple examples that's available on the on the storage OS website but",
    "start": "2238010",
    "end": "2244880"
  },
  {
    "text": "obviously you know you can you can run any application with any number of different storage systems with in this",
    "start": "2244880",
    "end": "2252530"
  },
  {
    "text": "particular example I'm going to start up a my sequel database and I'm using the",
    "start": "2252530",
    "end": "2259280"
  },
  {
    "text": "free storage arrest developer edition which is which is which is free forever and available on our website",
    "start": "2259280",
    "end": "2268490"
  },
  {
    "text": "the saiful sets definition effectively tells kubernetes to make a claim for a",
    "start": "2268490",
    "end": "2275480"
  },
  {
    "text": "my sequel database and to start it up with with finally my sequel in the math",
    "start": "2275480",
    "end": "2283220"
  },
  {
    "text": "part so I've already done this so what I'm going to do now is I will briefly",
    "start": "2283220",
    "end": "2292900"
  },
  {
    "text": "from the fun share my screen and I will now share my demo",
    "start": "2292900",
    "end": "2303670"
  },
  {
    "text": "Sanjeev can you just confirm that the demo screen is loaded yes Alex that's",
    "start": "2312790",
    "end": "2320590"
  },
  {
    "text": "good awesome all right so I'm going to be using I'm going to be using a little",
    "start": "2320590",
    "end": "2328510"
  },
  {
    "text": "tool called k-9s to provide visibility of what's going on at the cluster k-9s",
    "start": "2328510",
    "end": "2333910"
  },
  {
    "start": "2333000",
    "end": "2374000"
  },
  {
    "text": "scissor is an open-source tool but it's it's really great at visualizing what's",
    "start": "2333910",
    "end": "2339610"
  },
  {
    "text": "going on in the kubernetes cluster may be magnified the font a little bit that",
    "start": "2339610",
    "end": "2345370"
  },
  {
    "text": "might help right Satterlee better that's",
    "start": "2345370",
    "end": "2353710"
  },
  {
    "text": "better okay so so this is this is a",
    "start": "2353710",
    "end": "2361030"
  },
  {
    "text": "running cluster we see the the storage OS source software is running here as",
    "start": "2361030",
    "end": "2366670"
  },
  {
    "text": "well as the CSI software and it's a you know a typical is a typical",
    "start": "2366670",
    "end": "2372520"
  },
  {
    "text": "implementation of a criminal's cluster we'll focus on the application that's",
    "start": "2372520",
    "end": "2377980"
  },
  {
    "text": "running so this is the the my sequel pod so before we before we move forward what",
    "start": "2377980",
    "end": "2385930"
  },
  {
    "text": "I thought I just want to show is I want to I want to show the pod and the",
    "start": "2385930",
    "end": "2395790"
  },
  {
    "text": "channel for that's pod which is which is running successfully here and I want to",
    "start": "2395790",
    "end": "2402880"
  },
  {
    "start": "2399000",
    "end": "2459000"
  },
  {
    "text": "be able to also I also want to show you the storage class so we have the fast",
    "start": "2402880",
    "end": "2413890"
  },
  {
    "text": "storage class here and we can describe the storage class which gives you the",
    "start": "2413890",
    "end": "2422620"
  },
  {
    "text": "very simple information to say that this is using the CSI API to talk to to talk",
    "start": "2422620",
    "end": "2428290"
  },
  {
    "text": "to the storage system and we can look at",
    "start": "2428290",
    "end": "2434290"
  },
  {
    "text": "the PVC so we have at the PVC called data my sequel 0",
    "start": "2434290",
    "end": "2441560"
  },
  {
    "text": "and it's and it's connected to this volume so we can also see that volume we",
    "start": "2441560",
    "end": "2448250"
  },
  {
    "text": "can see the persistent volume here so this is the persistent volume that's",
    "start": "2448250",
    "end": "2453860"
  },
  {
    "text": "that's claim is using what this means is",
    "start": "2453860",
    "end": "2460310"
  },
  {
    "text": "that we now have we now have my sequel running running with us in a stateful",
    "start": "2460310",
    "end": "2468530"
  },
  {
    "text": "set on our cluster on a persistent volume so as an example I will show you",
    "start": "2468530",
    "end": "2481120"
  },
  {
    "text": "the we can connect to my sequel and quickly show the databases that are",
    "start": "2481120",
    "end": "2486140"
  },
  {
    "text": "currently defined this is a blank install so so this is just the stuff",
    "start": "2486140",
    "end": "2491690"
  },
  {
    "text": "that you get on a native startup we will",
    "start": "2491690",
    "end": "2500079"
  },
  {
    "text": "we will run a little bit of sequel to create a database called a shop and",
    "start": "2500410",
    "end": "2507050"
  },
  {
    "text": "create the table called books and create a fictional book called CN CF webinar",
    "start": "2507050",
    "end": "2513650"
  },
  {
    "text": "into that into that database and we can",
    "start": "2513650",
    "end": "2521930"
  },
  {
    "text": "now query the database and we can see that there is the the table was created",
    "start": "2521930",
    "end": "2531470"
  },
  {
    "text": "and the book CN CF webinar was was was inserted into the database so now what",
    "start": "2531470",
    "end": "2537860"
  },
  {
    "text": "I'm just going to show you is this cluster is running on a one three nodes",
    "start": "2537860",
    "end": "2545140"
  },
  {
    "text": "and my sequel my sequel pod is running",
    "start": "2545140",
    "end": "2551900"
  },
  {
    "text": "on the node name that ends in three uj9 are so what I'm going to what I'm going",
    "start": "2551900",
    "end": "2561170"
  },
  {
    "text": "to do now is I'm going to use the kubernetes cordon command to tell",
    "start": "2561170",
    "end": "2570590"
  },
  {
    "text": "kubernetes that i don't want any new word to be scheduled on that note and what I",
    "start": "2570590",
    "end": "2579630"
  },
  {
    "text": "am going to do now is I'm going to kill the stateful set that's running on that",
    "start": "2579630",
    "end": "2586440"
  },
  {
    "text": "note so there we go I've just deleted the pod for that stateful set and",
    "start": "2586440",
    "end": "2592040"
  },
  {
    "text": "kubernetes is going to see that's the pod and was killed and needs to",
    "start": "2592040",
    "end": "2599150"
  },
  {
    "text": "reconcile desired States versus actual States so it's it's now going in and",
    "start": "2599150",
    "end": "2604500"
  },
  {
    "text": "creating a new instance on another nodes and that ends in three you j9b hopefully",
    "start": "2604500",
    "end": "2612810"
  },
  {
    "text": "that container will will start up in a second",
    "start": "2612810",
    "end": "2617690"
  },
  {
    "text": "of course this is where normally I fix two seconds and today it's decided to",
    "start": "2624370",
    "end": "2630680"
  },
  {
    "text": "take a little longer Alex ah a few questions that pile up in",
    "start": "2630680",
    "end": "2636960"
  },
  {
    "text": "the Q&A Jen so if you feel like you wanna be wanna do at any point okay",
    "start": "2636960",
    "end": "2643700"
  },
  {
    "text": "actually that's that's a good thing I'll just finish off this demo now and and we",
    "start": "2643700",
    "end": "2649109"
  },
  {
    "text": "can so what we can see here is that the the my sequel instance actually has now",
    "start": "2649109",
    "end": "2655079"
  },
  {
    "text": "started and what we should be able to do",
    "start": "2655079",
    "end": "2660119"
  },
  {
    "text": "is we should be able to query that they today's again and what we see is we get",
    "start": "2660119",
    "end": "2668190"
  },
  {
    "text": "the same the same information back so effectively what's what's what's happened here is the the pod has",
    "start": "2668190",
    "end": "2675869"
  },
  {
    "text": "terminated kubernetes restarted the stateful set on another nodes reconnected the the PVC and after",
    "start": "2675869",
    "end": "2684150"
  },
  {
    "text": "persistent data was was provided there so we have a system where it using the",
    "start": "2684150",
    "end": "2693420"
  },
  {
    "text": "orchestration capabilities of kubernetes and the and the functionality of cloud",
    "start": "2693420",
    "end": "2700319"
  },
  {
    "text": "native storage it's now possible to run stateful services like databases within",
    "start": "2700319",
    "end": "2706020"
  },
  {
    "text": "your group beneath use cluster and incorporate them into into your environment and and it also means that",
    "start": "2706020",
    "end": "2711809"
  },
  {
    "text": "that you can now quite easily build anything as a service right so so",
    "start": "2711809",
    "end": "2716970"
  },
  {
    "text": "whether it's a database a message queue and Prometheus services elasticsearch Kafka whatever that is you can now run",
    "start": "2716970",
    "end": "2724140"
  },
  {
    "text": "them as a service dynamically within within your kubernetes cluster with that persistent storage back-end so I'll stop",
    "start": "2724140",
    "end": "2732869"
  },
  {
    "start": "2732000",
    "end": "3156000"
  },
  {
    "text": "sharing that demo and go back to go back to the slides very quickly",
    "start": "2732869",
    "end": "2740359"
  },
  {
    "text": "you oh my slides closed",
    "start": "2743250",
    "end": "2752940"
  },
  {
    "text": "never mind I'll just talk I was only gonna have a tanky slider so so we'll we",
    "start": "2752940",
    "end": "2758400"
  },
  {
    "text": "can go through an answer and answer some of the questions so so hopefully this",
    "start": "2758400",
    "end": "2764700"
  },
  {
    "text": "provided some useful background I tried to make it you know I only try to use",
    "start": "2764700",
    "end": "2770190"
  },
  {
    "text": "storage OS as a as an example but you know hopefully this gave you a broader",
    "start": "2770190",
    "end": "2775499"
  },
  {
    "text": "understanding of the of the storage landscape would love you to have a look at the at the landscape white paper and",
    "start": "2775499",
    "end": "2784769"
  },
  {
    "text": "it would be great to do to get feedback on that white paper because we're about",
    "start": "2784769",
    "end": "2789990"
  },
  {
    "text": "to release the second version that's further expanded and updated the the",
    "start": "2789990",
    "end": "2796680"
  },
  {
    "text": "there's a question about the the meetups for for the C&C F sake and for storage",
    "start": "2796680",
    "end": "2805289"
  },
  {
    "text": "of s for the C&C F sake we meet twice a month the the meetings are in the CN CF",
    "start": "2805289",
    "end": "2813329"
  },
  {
    "text": "public calendar it's the second Tuesday and fourth sorry second Wednesday the",
    "start": "2813329",
    "end": "2820319"
  },
  {
    "text": "Ford Wednesday of every month we had another question to say can I limit",
    "start": "2820319",
    "end": "2826970"
  },
  {
    "text": "containers to access through spec files or inherits the volume settings so I'm",
    "start": "2826970",
    "end": "2836549"
  },
  {
    "text": "gonna try and interpret decoration so so effectively the the containers will be",
    "start": "2836549",
    "end": "2844499"
  },
  {
    "text": "using will be using the volumes and the volumes just like the containers and the",
    "start": "2844499",
    "end": "2851039"
  },
  {
    "text": "pods are created within the same concept",
    "start": "2851039",
    "end": "2856589"
  },
  {
    "text": "of the kubernetes access controls so things like namespaces and access to",
    "start": "2856589",
    "end": "2863160"
  },
  {
    "text": "those namespaces and the filters etc that's apply to those namespaces also apply to the to the to the volume",
    "start": "2863160",
    "end": "2869180"
  },
  {
    "text": "abstractions - there is a question about SEF and the recuperator",
    "start": "2869180",
    "end": "2876960"
  },
  {
    "text": "so that's a very good example of the concept of having frameworks and tools",
    "start": "2876960",
    "end": "2882330"
  },
  {
    "text": "that that are helping integrate with the storage system to provide the kubernetes",
    "start": "2882330",
    "end": "2887340"
  },
  {
    "text": "integration so so rook is an operator and there's a framework for for actually",
    "start": "2887340",
    "end": "2894150"
  },
  {
    "text": "more than one storage system it's it's going through CN CF as a graduation",
    "start": "2894150",
    "end": "2899280"
  },
  {
    "text": "process right now in the storage sake and Android can deploy",
    "start": "2899280",
    "end": "2904320"
  },
  {
    "text": "ACEF based storage systems F being a storage system which is fundamentally",
    "start": "2904320",
    "end": "2910920"
  },
  {
    "text": "based on an underlying object store but can provide block and and filesystem",
    "start": "2910920",
    "end": "2916710"
  },
  {
    "text": "semantics to can multiple containers in",
    "start": "2916710",
    "end": "2923430"
  },
  {
    "text": "us single pods share the same PVC so the answer is yes there are two ways that",
    "start": "2923430",
    "end": "2931500"
  },
  {
    "text": "this can happen if if there are if multiple containers within a pod can",
    "start": "2931500",
    "end": "2939360"
  },
  {
    "text": "access the same read right once volume if they are on the same nodes typically",
    "start": "2939360",
    "end": "2945240"
  },
  {
    "text": "so this this is something that that's some storage system supports however if",
    "start": "2945240",
    "end": "2950490"
  },
  {
    "text": "if you wants to if you want to follow the storage patterns properly it's best",
    "start": "2950490",
    "end": "2956370"
  },
  {
    "text": "to use the read write many or a shared file system if if many containers need to be able to access the same same",
    "start": "2956370",
    "end": "2964380"
  },
  {
    "text": "volume provide we had a question to set",
    "start": "2964380",
    "end": "2973800"
  },
  {
    "text": "to ask if we can provide a little explanation on for on-prem storage",
    "start": "2973800",
    "end": "2979290"
  },
  {
    "text": "solutions for kubernetes so so on-prem solutions are quite varies",
    "start": "2979290",
    "end": "2986550"
  },
  {
    "text": "because of course you know as we discussed we have some of the",
    "start": "2986550",
    "end": "2991560"
  },
  {
    "text": "traditional storage vendors so so maybe things like traditional physical",
    "start": "2991560",
    "end": "2996990"
  },
  {
    "text": "hardware storage or array type solutions some of which have very well integrated",
    "start": "2996990",
    "end": "3005140"
  },
  {
    "text": "CSI drivers that can integrate with scribble at ease but likewise there are",
    "start": "3005140",
    "end": "3011570"
  },
  {
    "text": "a whole you know there are a suite of software defined storage systems you",
    "start": "3011570",
    "end": "3017900"
  },
  {
    "text": "know like storage OS or or seven or eight for example that can that can be deployed on-premise to and you know",
    "start": "3017900",
    "end": "3026350"
  },
  {
    "text": "there isn't there isn't an answer where I can say you know this is this is",
    "start": "3026350",
    "end": "3031910"
  },
  {
    "text": "definitely there's the storage solution that you should use for on-prem the reason being you know as we discussed is",
    "start": "3031910",
    "end": "3038240"
  },
  {
    "text": "that there is a whole suite of you know different attributes that you need to look at and perhaps some decisions that",
    "start": "3038240",
    "end": "3046430"
  },
  {
    "text": "that might factor into the process might be might be across space so they might be platform compatibility based so for",
    "start": "3046430",
    "end": "3054620"
  },
  {
    "text": "example you might find it easier to deploy a software solution if you're running if you're running environments",
    "start": "3054620",
    "end": "3061580"
  },
  {
    "text": "on Prem and in the client or some sorts of hybrids but but it's it's something",
    "start": "3061580",
    "end": "3067520"
  },
  {
    "text": "that you need to that you need to understand from from the back end from your back-end system to",
    "start": "3067520",
    "end": "3074260"
  },
  {
    "text": "is a question to ask his storage west to shared file system how does it handle read writes for multiple nodes and your",
    "start": "3074490",
    "end": "3080940"
  },
  {
    "text": "handle file looks so what you'll find is that storage OS can provide both read",
    "start": "3080940",
    "end": "3088740"
  },
  {
    "text": "write once and read write many solutions and similar to some of the read write many solutions they are provided using",
    "start": "3088740",
    "end": "3096119"
  },
  {
    "text": "using a shared file system so in the case of something like C for example it",
    "start": "3096119",
    "end": "3102060"
  },
  {
    "text": "might use this FS file system other storage systems might be using might be",
    "start": "3102060",
    "end": "3108810"
  },
  {
    "text": "using something like NFS for example as as the way of providing the shared file",
    "start": "3108810",
    "end": "3114150"
  },
  {
    "text": "system across across multiple nodes so so in terms of how they handled things",
    "start": "3114150",
    "end": "3123270"
  },
  {
    "text": "like fireworks will be very dependent on the NFS implementation of the underlying",
    "start": "3123270",
    "end": "3129810"
  },
  {
    "text": "storage system if they're using if they're using you know a modern NFS implementation and support things like",
    "start": "3129810",
    "end": "3136650"
  },
  {
    "text": "NFS version 4 then you should be able to handle state and lock failover to him is",
    "start": "3136650",
    "end": "3144510"
  },
  {
    "text": "their way being done to provide a more user-friendly platform agnostic shared file system approach I find it difficult",
    "start": "3144510",
    "end": "3152580"
  },
  {
    "text": "to provide a solution that will work on many platforms in plants right so so",
    "start": "3152580",
    "end": "3158190"
  },
  {
    "start": "3156000",
    "end": "3206000"
  },
  {
    "text": "that's that's a good question I think if you're looking to find the solution that will work on many platforms different",
    "start": "3158190",
    "end": "3165330"
  },
  {
    "text": "clients you should be looking at some of the software-defined storage solutions",
    "start": "3165330",
    "end": "3171150"
  },
  {
    "text": "that are out there there are a number of CN CF projects that provides some",
    "start": "3171150",
    "end": "3176670"
  },
  {
    "text": "software solutions and there are a number of commercial vendors you know like storage I said that provide those",
    "start": "3176670",
    "end": "3182580"
  },
  {
    "text": "those solutions to Software Defined solutions typically are typically our",
    "start": "3182580",
    "end": "3189420"
  },
  {
    "text": "platform agnostics although you know you may find that different solutions might",
    "start": "3189420",
    "end": "3195600"
  },
  {
    "text": "might be optimized or might have some caveats on on different services or",
    "start": "3195600",
    "end": "3200850"
  },
  {
    "text": "different cloud providers that they're optimized for they run can I depend on servers internal SSD was",
    "start": "3200850",
    "end": "3208950"
  },
  {
    "start": "3206000",
    "end": "3257000"
  },
  {
    "text": "another question so that's a very very good question and this ties into again",
    "start": "3208950",
    "end": "3214050"
  },
  {
    "text": "the software based solutions so it's typically software based solutions like storage or s or a rogue for example can",
    "start": "3214050",
    "end": "3220290"
  },
  {
    "text": "use storage that's available on on each nodes to to provide a storage rule that",
    "start": "3220290",
    "end": "3226830"
  },
  {
    "text": "effectively spans the different nodes within a cluster so yes you can use the",
    "start": "3226830",
    "end": "3232410"
  },
  {
    "text": "internal SSD and effectively the software-defined storage system provides kind of like a storage persona to to to",
    "start": "3232410",
    "end": "3240480"
  },
  {
    "text": "those nodes and allows you to turn those those quality disks or commodity systems",
    "start": "3240480",
    "end": "3246930"
  },
  {
    "text": "into into a storage service with you know different data services based on",
    "start": "3246930",
    "end": "3253260"
  },
  {
    "text": "based on the software solution you're using is there SCSI driver to allow",
    "start": "3253260",
    "end": "3259260"
  },
  {
    "start": "3257000",
    "end": "3398000"
  },
  {
    "text": "accessing an object or provide PVC so the answer is yes or no so specifically",
    "start": "3259260",
    "end": "3267150"
  },
  {
    "text": "a PVC no the this is the CSI API is is",
    "start": "3267150",
    "end": "3272580"
  },
  {
    "text": "focused on providing functionality to access volumes within a system and then",
    "start": "3272580",
    "end": "3279960"
  },
  {
    "text": "those volumes typically mean block you know file or a shared file there are however a number of discussions which",
    "start": "3279960",
    "end": "3287610"
  },
  {
    "text": "are happening in the kubernetes storage sig right now that are talking about",
    "start": "3287610",
    "end": "3293150"
  },
  {
    "text": "providing an abstraction to defying access to to object stores and buckets",
    "start": "3293150",
    "end": "3300750"
  },
  {
    "text": "and things like that through a kubernetes abstraction layer so it's a",
    "start": "3300750",
    "end": "3306630"
  },
  {
    "text": "you know as I mentioned earlier volumes are probably the most mature abstraction",
    "start": "3306630",
    "end": "3312840"
  },
  {
    "text": "within Gribben at ease when it comes to storage things like objects stores are happening right now so you should follow",
    "start": "3312840",
    "end": "3318900"
  },
  {
    "text": "watch this face and if you're interested in finding out details join the criminales storage sake mailing lists",
    "start": "3318900",
    "end": "3327740"
  },
  {
    "text": "and with that we are one minutes from time and I believe I've covered I've",
    "start": "3328040",
    "end": "3335930"
  },
  {
    "text": "covered all of the questions in my list here Sanjeev that were there any other",
    "start": "3335930",
    "end": "3341150"
  },
  {
    "text": "questions that maybe I missed out on",
    "start": "3341150",
    "end": "3344680"
  },
  {
    "text": "all right well inductors in that case I think I think we're done so I'd like to",
    "start": "3351500",
    "end": "3358410"
  },
  {
    "text": "say thank you to everybody that joins the webinar and we'll be sharing the the",
    "start": "3358410",
    "end": "3367920"
  },
  {
    "text": "information and the slides later on yep",
    "start": "3367920",
    "end": "3374700"
  },
  {
    "text": "thank you Alex thanks for a great presentation this was very useful I learned a lot thank you to everyone for",
    "start": "3374700",
    "end": "3382350"
  },
  {
    "text": "joining us the webinar recording and the slides will be online data today and we",
    "start": "3382350",
    "end": "3387810"
  },
  {
    "text": "look forward to seeing you all at a future CN CF webinar stay safe and have a great",
    "start": "3387810",
    "end": "3393240"
  },
  {
    "text": "day thank you thank you",
    "start": "3393240",
    "end": "3397730"
  }
]