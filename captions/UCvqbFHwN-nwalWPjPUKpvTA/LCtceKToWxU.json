[
  {
    "text": "so I wonder if anybody tried to debug containers using side cars anybody okay",
    "start": "240",
    "end": "7399"
  },
  {
    "text": "a few people have you tried to create your own tool to debug other containers",
    "start": "7399",
    "end": "13440"
  },
  {
    "text": "using side cars okay good have you tried to do it with",
    "start": "13440",
    "end": "20000"
  },
  {
    "text": "Docker and kubernetes how about container D anybody",
    "start": "21000",
    "end": "27679"
  },
  {
    "text": "try to do that yeah that's a little tricky so we're going to talk about",
    "start": "27679",
    "end": "35879"
  },
  {
    "text": "um we're going to talk about building a debugging tool for all those three run",
    "start": "35879",
    "end": "42320"
  },
  {
    "text": "times they're similar but they're different and we're going to talk about doer slim and how it was created there",
    "start": "42320",
    "end": "49600"
  },
  {
    "text": "and if you don't know what Docker slim is you'll learn more so first I'd like to uh intro Ivan",
    "start": "49600",
    "end": "59239"
  },
  {
    "text": "this talk wouldn't be possible without him unfortunately he couldn't make it uh but if you're interested in containers",
    "start": "59239",
    "end": "65880"
  },
  {
    "text": "you should see his blog post newsletter and his amazing diagrams his labs are",
    "start": "65880",
    "end": "73200"
  },
  {
    "text": "awesome yeah um I am say and I'm a field CTO at coo um cncf Ambassador uh CU",
    "start": "73200",
    "end": "80280"
  },
  {
    "text": "simplifier founder you can find me on Twitter very active I might reply you here um and also um joined by Kyle um",
    "start": "80280",
    "end": "88600"
  },
  {
    "text": "the docker slim guy and uh yeah CTO at slim Ai and you can KC q n at Twitter",
    "start": "88600",
    "end": "95880"
  },
  {
    "text": "you can follow us and let's get started okay so a little bit about how",
    "start": "95880",
    "end": "102000"
  },
  {
    "text": "it all started uh there's a connection here be because it all started here at cucon",
    "start": "102000",
    "end": "109560"
  },
  {
    "text": "cucon a you uh two years ago in Valencia we had a hackathon and then uh uh won the",
    "start": "109560",
    "end": "118280"
  },
  {
    "text": "hackathon and he created the the very first version of the debugging capability we're going to be talking",
    "start": "118280",
    "end": "126359"
  },
  {
    "text": "about so uh let's first discuss the problem why we are building what we are",
    "start": "127800",
    "end": "133400"
  },
  {
    "text": "building and what's the current landscape of debugging the containers",
    "start": "133400",
    "end": "139239"
  },
  {
    "text": "using the existing tooling and then how this new tool actually helps to simplify",
    "start": "139239",
    "end": "144879"
  },
  {
    "text": "the developer experience and do it seamlessly across all the three um talker container",
    "start": "144879",
    "end": "151599"
  },
  {
    "text": "D so minimal container images don't support uh debugging because they are",
    "start": "151599",
    "end": "157280"
  },
  {
    "text": "minimal and they don't have what you normally use for debugging so the",
    "start": "157280",
    "end": "162360"
  },
  {
    "text": "standard debugging tools won't be there um the go to command since many of you",
    "start": "162360",
    "end": "169519"
  },
  {
    "text": "raised hand so you probably might be aware of these so the go to command when you are debugging is uh Docker exec Cube",
    "start": "169519",
    "end": "176959"
  },
  {
    "text": "CTL exec exing into the container and spawning up a shell and then you do LS",
    "start": "176959",
    "end": "184080"
  },
  {
    "text": "and bunch of other things to test out what is working what is broken uh that's how you get to the application which is",
    "start": "184080",
    "end": "190040"
  },
  {
    "text": "not working and it starts a Target uh shell in the Target shell process in the",
    "start": "190040",
    "end": "197000"
  },
  {
    "text": "uh container so that's the docker exec hyphen it um so these are some of the standard commands that you probably",
    "start": "197000",
    "end": "204120"
  },
  {
    "text": "would be using when you are debugging a across stalker container D and kubernetes we'll come to cctl dbug and",
    "start": "204120",
    "end": "211680"
  },
  {
    "text": "and others as well but when you talk about the minimal images Tess images that is just the",
    "start": "211680",
    "end": "218840"
  },
  {
    "text": "minimal container image containing your application and nothing apart from it no libraries no dependencies uh no shell",
    "start": "218840",
    "end": "226640"
  },
  {
    "text": "then how do you do that because if you cannot put a shell spawn a shell process",
    "start": "226640",
    "end": "232400"
  },
  {
    "text": "how would you attach to the file system how do you debug um so that's",
    "start": "232400",
    "end": "238519"
  },
  {
    "text": "hard this means exec commands won't work so as you see the standard Docker exec",
    "start": "238519",
    "end": "245439"
  },
  {
    "text": "uh nerd CTL or CTR exec Cube CTL exec these standard commands won't work some",
    "start": "245439",
    "end": "250680"
  },
  {
    "text": "of the others still would work like in a center which does require some lowlevel",
    "start": "250680",
    "end": "256160"
  },
  {
    "text": "uh privileged privileges to run and Cube CDL debug um so taking a step back and",
    "start": "256160",
    "end": "263280"
  },
  {
    "text": "reviewing the different types of tbing experiences uh we can just put aside NS",
    "start": "263280",
    "end": "268720"
  },
  {
    "text": "Center for now so you can see a Docker exit can run the Target binderies and uh uh it does install some",
    "start": "268720",
    "end": "276800"
  },
  {
    "text": "of the extra tools only works if there is a shell Cube CTL debug uh the side",
    "start": "276800",
    "end": "281960"
  },
  {
    "text": "car that U Kyle just asked like how many of you have tbug using a side car it can",
    "start": "281960",
    "end": "287440"
  },
  {
    "text": "see the target process uh exess the target root file system but not as is",
    "start": "287440",
    "end": "293000"
  },
  {
    "text": "and NS Center can do anything but you should have sufficient access and you should know what you're doing so that's",
    "start": "293000",
    "end": "300560"
  },
  {
    "text": "for the N Center so can we combine the best of both words and make sure it",
    "start": "300560",
    "end": "307960"
  },
  {
    "text": "works in the EXA in the debugging experience that you would want with your",
    "start": "307960",
    "end": "313440"
  },
  {
    "text": "containers cubity Sports um and with container D for the minimal",
    "start": "313440",
    "end": "319600"
  },
  {
    "text": "images um also if we can have a same user experience so I think user",
    "start": "319600",
    "end": "325919"
  },
  {
    "text": "experience here matters um a lot because when when you are writing or used to uh",
    "start": "325919",
    "end": "333319"
  },
  {
    "text": "get used to writing the commands via single CLI tool how easy it is to use",
    "start": "333319",
    "end": "339720"
  },
  {
    "text": "the same uh kind of framework or the same developer experience throughout all the environments uh for example right",
    "start": "339720",
    "end": "346479"
  },
  {
    "text": "now the tool name is tool um you have debug if you can just pass on different",
    "start": "346479",
    "end": "351639"
  },
  {
    "text": "run times if it's stalker container D or Cades and then you just Define the um",
    "start": "351639",
    "end": "358080"
  },
  {
    "text": "Target where you actually want which particular uh Target container you want to debug so that would be cool so let's",
    "start": "358080",
    "end": "366039"
  },
  {
    "text": "see if it's possible to have this so uh with Docker exit uh what you",
    "start": "366039",
    "end": "374160"
  },
  {
    "text": "do is you get a new um container you get a new container it shares all the name",
    "start": "374160",
    "end": "380000"
  },
  {
    "text": "spaces including the mount name space so you can see uh when you have the docker",
    "start": "380000",
    "end": "385319"
  },
  {
    "text": "exact hyen shell you will get a side car and it attaches everything is over",
    "start": "385319",
    "end": "392918"
  },
  {
    "text": "there and U these are some of the more details like if you are interested how the um Docker exec Works some of the",
    "start": "393199",
    "end": "400680"
  },
  {
    "text": "more details around it so you can go to these um oci open container runtime spec",
    "start": "400680",
    "end": "407160"
  },
  {
    "text": "and the issues and the pull request how it works you can almost simulate the docker",
    "start": "407160",
    "end": "415120"
  },
  {
    "text": "exec Behavior using the docker run command by um attaching the processes so",
    "start": "415120",
    "end": "420960"
  },
  {
    "text": "you can use stalker run then use some of the name spaces net ipcp ID and create a",
    "start": "420960",
    "end": "426960"
  },
  {
    "text": "app in this particular case you will have a separate container which will not",
    "start": "426960",
    "end": "432720"
  },
  {
    "text": "have the same uh Mount name space so the file system of this particular container",
    "start": "432720",
    "end": "438599"
  },
  {
    "text": "when you do the ls it will be different from the target container that you actually want to",
    "start": "438599",
    "end": "444280"
  },
  {
    "text": "debug uh so this is what it looks like you can see both the app container that you actually want to debug",
    "start": "444280",
    "end": "450199"
  },
  {
    "text": "and the sh container that you just created using that Docker run command uh they have they share the P net IPC",
    "start": "450199",
    "end": "457319"
  },
  {
    "text": "because that's what we we shared uh but they have the different Mount name",
    "start": "457319",
    "end": "463680"
  },
  {
    "text": "spaces so and when you do Cube CTL exec uh so Cube CTL exec or sorry Cube CTL",
    "start": "464039",
    "end": "470759"
  },
  {
    "text": "debug um which is the FML containers that gets created so it creates a sidecar container so this is your disal",
    "start": "470759",
    "end": "477599"
  },
  {
    "text": "less app that you want to uh bug it spawns a sidecar container and uh you",
    "start": "477599",
    "end": "483240"
  },
  {
    "text": "have different amount name spaces and it shares all the other name spaces so even there you when you get directly straight",
    "start": "483240",
    "end": "491919"
  },
  {
    "text": "for in a straightforward way when you do the ls you will be getting the ls of the um container that just got spawned",
    "start": "491919",
    "end": "498440"
  },
  {
    "text": "up so not sharing the mount name space has an impact on debugging experience because now you have a different root",
    "start": "498440",
    "end": "505080"
  },
  {
    "text": "file system um is there a way to kind of can we do it in a way that we get to the",
    "start": "505080",
    "end": "512959"
  },
  {
    "text": "app file system which we actually want to debug yes we can with um some of the",
    "start": "512959",
    "end": "520640"
  },
  {
    "text": "workarounds so if you uh when you run this you will you can actually use slpr",
    "start": "520640",
    "end": "526480"
  },
  {
    "text": "/p root for example proc one root and it gets you to the app Root file",
    "start": "526480",
    "end": "534120"
  },
  {
    "text": "system but still the question remains about the developers experience you went",
    "start": "534120",
    "end": "540240"
  },
  {
    "text": "to the file system uh is it still possible to have the same level of developer experience uh for the with the",
    "start": "540240",
    "end": "547880"
  },
  {
    "text": "side card debugging um you can use the CH root command or equivalent command",
    "start": "547880",
    "end": "553399"
  },
  {
    "text": "the CH root command will make it look like uh we are in the Target container but we need to make the debugging image",
    "start": "553399",
    "end": "560040"
  },
  {
    "text": "binaries accessible to the new uh CS rout so what the workaround is so in",
    "start": "560040",
    "end": "565920"
  },
  {
    "text": "order to see the debuggers entry point so you can see uh you first created a Sim link so that's the Sim link creation",
    "start": "565920",
    "end": "572160"
  },
  {
    "text": "then export exported the binaries and then uh CH root into the proc one route",
    "start": "572160",
    "end": "578519"
  },
  {
    "text": "what this does is it actually now it gives you the feel okay you are in uh when you do the ls you have the access",
    "start": "578519",
    "end": "584440"
  },
  {
    "text": "to the binaries uh of the container that you actually want to uh",
    "start": "584440",
    "end": "589519"
  },
  {
    "text": "debug so we saw the problems we see the developer experience lacks there are",
    "start": "589519",
    "end": "595040"
  },
  {
    "text": "workarounds that you can do and different workarounds are different for different uh run times uh can we now",
    "start": "595040",
    "end": "602360"
  },
  {
    "text": "start implementing our debugger look CER cool so let's take a",
    "start": "602360",
    "end": "609440"
  },
  {
    "text": "look at uh what we need to do uh the high level",
    "start": "609440",
    "end": "615519"
  },
  {
    "text": "flow is very similar for all run times U yeah you need um you need a container",
    "start": "615519",
    "end": "624680"
  },
  {
    "text": "um but uh um yeah you need to spit up a container then you need to",
    "start": "624680",
    "end": "629920"
  },
  {
    "text": "uh connect that container to the Target you wait for it and and then uh uh you",
    "start": "629920",
    "end": "636720"
  },
  {
    "text": "can do the io there uh the steps are uh similar but the details um for each",
    "start": "636720",
    "end": "643680"
  },
  {
    "text": "runtime uh matter uh because of the apis because of the design differences for",
    "start": "643680",
    "end": "648839"
  },
  {
    "text": "example but kubernetes you have pods and ephemeral containers to deal with uh",
    "start": "648839",
    "end": "654240"
  },
  {
    "text": "there are a number of low-level details you need to deal with when you go on the",
    "start": "654240",
    "end": "659680"
  },
  {
    "text": "happy path uh just like with anything else uh",
    "start": "659680",
    "end": "664839"
  },
  {
    "text": "we won't go into great details there uh for but uh for example doer slim creates",
    "start": "664839",
    "end": "670680"
  },
  {
    "text": "privileged containers the sidecar containers priv as privileged containers to deal with some of those gas uh we",
    "start": "670680",
    "end": "678120"
  },
  {
    "text": "talked a little bit about exposing the binaries uh in the um um a Target",
    "start": "678120",
    "end": "684519"
  },
  {
    "text": "container view by Sim linking the the debugging uh file system and then",
    "start": "684519",
    "end": "691519"
  },
  {
    "text": "adjusting the path with the bin directories but if you have shared",
    "start": "691519",
    "end": "697839"
  },
  {
    "text": "libraries in those executables then you also need to do something similar there as well and it's a little trickier to do",
    "start": "697839",
    "end": "706040"
  },
  {
    "text": "uh with shared libraries so it's easier to have statically linked binaries in your",
    "start": "706040",
    "end": "713000"
  },
  {
    "text": "debugging images but uh we'll talk more about it uh later so uh let's take a",
    "start": "713000",
    "end": "718600"
  },
  {
    "text": "look at the the different run times and their apis obviously we'll start with the docker",
    "start": "718600",
    "end": "724600"
  },
  {
    "text": "API uh so here we have a a few um methods and the relevant interface that",
    "start": "724600",
    "end": "731440"
  },
  {
    "text": "you would use in the official Docker API client kind of the standard stuff to uh",
    "start": "731440",
    "end": "738680"
  },
  {
    "text": "work with the container API to create a new container uh Etc um a couple of",
    "start": "738680",
    "end": "744760"
  },
  {
    "text": "screenshots Snippets of the API hopefully you can see it uh I didn't get",
    "start": "744760",
    "end": "750040"
  },
  {
    "text": "a chance to update that uh and U and here this is a",
    "start": "750040",
    "end": "756000"
  },
  {
    "text": "slightly different version because it's using a repper package in in Docker slim",
    "start": "756000",
    "end": "761360"
  },
  {
    "text": "to abstract the lower level API but this is what happens in the tool itself when",
    "start": "761360",
    "end": "766720"
  },
  {
    "text": "it needs to H um handle the docker run time uh it sets up uh the options for",
    "start": "766720",
    "end": "775399"
  },
  {
    "text": "the new container execution then it creates a new container execution object",
    "start": "775399",
    "end": "781440"
  },
  {
    "text": "and the most important thing uh starts on line 257 where we're setting up the",
    "start": "781440",
    "end": "787639"
  },
  {
    "text": "uh the modes the IPC mode network mode and pit mode we need to make sure that they point to the uh to the right",
    "start": "787639",
    "end": "795199"
  },
  {
    "text": "container that's the magic so when you're building your debugger this is the key thing that makes it happen uh",
    "start": "795199",
    "end": "801279"
  },
  {
    "text": "for the docker run time so let's see what it looks like for the container D",
    "start": "801279",
    "end": "806360"
  },
  {
    "text": "API and it's runtime so it's a little more complicated uh but conceptually",
    "start": "806360",
    "end": "812320"
  },
  {
    "text": "very similar there's the uh container construct but there's also this task",
    "start": "812320",
    "end": "817880"
  },
  {
    "text": "construct uh that's uh that you need to use when you're uh creating containers",
    "start": "817880",
    "end": "823560"
  },
  {
    "text": "and when you're running containers uh much lower level and the",
    "start": "823560",
    "end": "828760"
  },
  {
    "text": "key here is the um container spec name spaces that you need to configure and",
    "start": "828760",
    "end": "835360"
  },
  {
    "text": "it's configured in a different way there a few Snippets um of the API itself it just shows the",
    "start": "835360",
    "end": "844199"
  },
  {
    "text": "uh container the process and the task interfaces that you need to deal with uh",
    "start": "844199",
    "end": "849639"
  },
  {
    "text": "creating uh the debugging um image uh instance uh",
    "start": "849639",
    "end": "855839"
  },
  {
    "text": "container and and then interacting with the target container and all of that so",
    "start": "855839",
    "end": "860880"
  },
  {
    "text": "this is a little messy it has a a lot of uh Snippets because it's the most",
    "start": "860880",
    "end": "866120"
  },
  {
    "text": "complicated and the lowest level API so first um with container D you need to",
    "start": "866120",
    "end": "872639"
  },
  {
    "text": "find the container that you want to debug uh there's a tricky way to do it where there's no nice way to uh have a",
    "start": "872639",
    "end": "880800"
  },
  {
    "text": "name for the container unlike Docker you just say hey this is the container name",
    "start": "880800",
    "end": "885920"
  },
  {
    "text": "but once you find the container uh you need to get the uh the main task of that",
    "start": "885920",
    "end": "891199"
  },
  {
    "text": "container once you get the main task you need to get the process ID for the task",
    "start": "891199",
    "end": "896320"
  },
  {
    "text": "and then you use that process ID to uh set up the name spaces for example there",
    "start": "896320",
    "end": "902399"
  },
  {
    "text": "line 252 you set up the uh process ID namespace and then you create a um um a",
    "start": "902399",
    "end": "912000"
  },
  {
    "text": "Linux namespace option spec option then you later use in the call to create a",
    "start": "912000",
    "end": "918839"
  },
  {
    "text": "new container right there on line 328 you're passing uh a spec but new spec",
    "start": "918839",
    "end": "925120"
  },
  {
    "text": "functional argument and you pass the spec ops there that you configured and",
    "start": "925120",
    "end": "930480"
  },
  {
    "text": "after setting up the IOP Plumbing which is very similar for all run times but slightly different uh so it doesn't uh",
    "start": "930480",
    "end": "938639"
  },
  {
    "text": "make sense to go into that you create a new task again but container D you have",
    "start": "938639",
    "end": "944240"
  },
  {
    "text": "this new uh construct to deal with that's how you run things you don't run the actual container uh you run uh you",
    "start": "944240",
    "end": "951600"
  },
  {
    "text": "execute actions on the task so you create a new task you start waiting for",
    "start": "951600",
    "end": "957639"
  },
  {
    "text": "it to get the signal Channel and then you start it and then you just manage the signals if you have a terminal and",
    "start": "957639",
    "end": "963920"
  },
  {
    "text": "then uh or you forward the signals um to the Target if you're not with kubernetes",
    "start": "963920",
    "end": "970800"
  },
  {
    "text": "a little easier but you do need to deal with the ephemeral containers and the magic there is uh configuring the target",
    "start": "970800",
    "end": "978680"
  },
  {
    "text": "container name in the ephemeral container uh construct much easier than container D just specify the the name",
    "start": "978680",
    "end": "986360"
  },
  {
    "text": "and that's it uh the uh the main apis uh the one uh in the part interface it's",
    "start": "986360",
    "end": "994800"
  },
  {
    "text": "used to update the ephemeral containers you can use the low-level put and Patch calls as well if you want that's doable",
    "start": "994800",
    "end": "1002720"
  },
  {
    "text": "but uh Docker slim uses the update Emeral containers SC and then the rest",
    "start": "1002720",
    "end": "1008759"
  },
  {
    "text": "uh subresource SC to do the actual attach um now here it has a couple of",
    "start": "1008759",
    "end": "1016040"
  },
  {
    "text": "API Snippets kind of shows that the update Emeral containers Co is",
    "start": "1016040",
    "end": "1021399"
  },
  {
    "text": "implemented using the put call in case you you",
    "start": "1021399",
    "end": "1026520"
  },
  {
    "text": "cared so here we have a whole bunch of Snippets uh fewer than a container D we",
    "start": "1026520",
    "end": "1033319"
  },
  {
    "text": "set up an ephemeral container and like I mentioned online uh",
    "start": "1033319",
    "end": "1040160"
  },
  {
    "text": "1194 we configure the target container name parameter so we're talking to the",
    "start": "1040160",
    "end": "1046120"
  },
  {
    "text": "right so we're attached to the right target container the rest of it is the usual container spec set up with the",
    "start": "1046120",
    "end": "1052760"
  },
  {
    "text": "entry point and uh arguments and all of that then we um grab the Pod spec uh",
    "start": "1052760",
    "end": "1060720"
  },
  {
    "text": "from the target spec that we got from the kubernetes client API and add our",
    "start": "1060720",
    "end": "1065919"
  },
  {
    "text": "ephemeral containers back there and then we call the update ephemeral containers",
    "start": "1065919",
    "end": "1071039"
  },
  {
    "text": "function well method uh and that will add that ephemeral container after we",
    "start": "1071039",
    "end": "1078520"
  },
  {
    "text": "wait for that to start and run um we",
    "start": "1078520",
    "end": "1084679"
  },
  {
    "text": "can set up the uh the io using the remote command and we also need to um",
    "start": "1084679",
    "end": "1090760"
  },
  {
    "text": "attach the the sub Resource as well um so this is probably easier than uh",
    "start": "1090760",
    "end": "1097360"
  },
  {
    "text": "container D um by 50% or even more No Name spaces to deal with so a few things",
    "start": "1097360",
    "end": "1106320"
  },
  {
    "text": "uh to mention about the debugger images so the best images uh like I mentioned",
    "start": "1106320",
    "end": "1111720"
  },
  {
    "text": "are the images with the stat statically compiled binaries because that means",
    "start": "1111720",
    "end": "1116760"
  },
  {
    "text": "after you connect the path uh to the Target uh container file system you can",
    "start": "1116760",
    "end": "1123120"
  },
  {
    "text": "easily use them it gets trickier when your binaries have shared libraries it",
    "start": "1123120",
    "end": "1128679"
  },
  {
    "text": "means somehow the target container view needs to find those as well so if you're",
    "start": "1128679",
    "end": "1135000"
  },
  {
    "text": "using the same base image uh that match is the target image that makes it easier",
    "start": "1135000",
    "end": "1141360"
  },
  {
    "text": "so uh the um uh so the same system shared libraries will be there the next",
    "start": "1141360",
    "end": "1148840"
  },
  {
    "text": "best thing is to use something that that's similar to what NYX does so I",
    "start": "1148840",
    "end": "1154440"
  },
  {
    "text": "don't know if anybody looked into it but what NX does it uses Sim links a lot and",
    "start": "1154440",
    "end": "1159559"
  },
  {
    "text": "we looked at the Sim links a little bit it's doing something similar and",
    "start": "1159559",
    "end": "1164880"
  },
  {
    "text": "then it's doing um Magic with environmental variables too for the path",
    "start": "1164880",
    "end": "1171159"
  },
  {
    "text": "variable and the LD path LD load path um uh variables as well to to make sure",
    "start": "1171159",
    "end": "1178320"
  },
  {
    "text": "that the right libraries get loaded so you would have to do the same thing there as well the next best thing is to",
    "start": "1178320",
    "end": "1185919"
  },
  {
    "text": "use a ni-based image because then they'll take care of that for you they'll set up the shared Library uh",
    "start": "1185919",
    "end": "1192440"
  },
  {
    "text": "loading and all of that uh with the with the docker Slim",
    "start": "1192440",
    "end": "1198799"
  },
  {
    "text": "tool there's a uh there's a set of pre-selected um debugging images so",
    "start": "1198799",
    "end": "1205840"
  },
  {
    "text": "there's your usual busy box that's the go-to container uh when it comes to",
    "start": "1205840",
    "end": "1211520"
  },
  {
    "text": "sidecar based debugging and then um there's a couple of chain guard images",
    "start": "1211520",
    "end": "1217960"
  },
  {
    "text": "uh chain guard was nice enough to create a custom uh debugging image uh for do",
    "start": "1217960",
    "end": "1223520"
  },
  {
    "text": "slim called mental kid debug and there's a uh a few other popular debugging",
    "start": "1223520",
    "end": "1229360"
  },
  {
    "text": "images like nsho and a bunch of cool kits for different run times and a few",
    "start": "1229360",
    "end": "1234640"
  },
  {
    "text": "others so feel free to experiment so some of the challenges",
    "start": "1234640",
    "end": "1241039"
  },
  {
    "text": "debugging uh creating the debugging tools one of the biggest challenges is",
    "start": "1241039",
    "end": "1246720"
  },
  {
    "text": "um the the apis and the libraries they're not well documented so if you",
    "start": "1246720",
    "end": "1252200"
  },
  {
    "text": "try to build your own tool you know that you kind of have to reverse engineer what they're doing and un unfortunately",
    "start": "1252200",
    "end": "1259240"
  },
  {
    "text": "Chad GPT doesn't help because uh especially with kubernetes why is that",
    "start": "1259240",
    "end": "1265600"
  },
  {
    "text": "because it has all data and the kubernetes API changeed significantly",
    "start": "1265600",
    "end": "1270679"
  },
  {
    "text": "and then it generates a whole bunch of code looks good you try to run it is broken because the API is outdated so",
    "start": "1270679",
    "end": "1277480"
  },
  {
    "text": "the best thing to do is to go to the source go to cube C uh doer CLI nerd C the main Goa there",
    "start": "1277480",
    "end": "1286360"
  },
  {
    "text": "is that it's complicated it's just a lot of complexity and you kind of have to reverse engineer that uh Ivan has",
    "start": "1286360",
    "end": "1294279"
  },
  {
    "text": "awesome uh go examples and his cbug tool is a lightweight version of Darker slim",
    "start": "1294279",
    "end": "1300679"
  },
  {
    "text": "and it also has P forwarding as well so you should check it out and it's a good",
    "start": "1300679",
    "end": "1306039"
  },
  {
    "text": "example again if you're writing your own uh a few more gotas again kind of a",
    "start": "1306039",
    "end": "1313760"
  },
  {
    "text": "a summary uh when you go beyond the happy path you have to uh deal with with",
    "start": "1313760",
    "end": "1320200"
  },
  {
    "text": "permissions and um you know other other gas around you know shared uh libraries",
    "start": "1320200",
    "end": "1327640"
  },
  {
    "text": "in your debugging image U but again like with anything else",
    "start": "1327640",
    "end": "1333440"
  },
  {
    "text": "um you um deal with that depending on your needs of uh depending on the needs",
    "start": "1333440",
    "end": "1340000"
  },
  {
    "text": "of your uh application so here's the clicker all",
    "start": "1340000",
    "end": "1347320"
  },
  {
    "text": "right hello hello check this works yeah doesn't sound like",
    "start": "1347320",
    "end": "1355159"
  },
  {
    "text": "it hello okay this one works so yeah",
    "start": "1355159",
    "end": "1360919"
  },
  {
    "text": "hand and mics are difficult when you do the demos so we will try to",
    "start": "1360919",
    "end": "1368080"
  },
  {
    "text": "now this one yeah yeah it will be interesting to do",
    "start": "1368679",
    "end": "1376440"
  },
  {
    "text": "the demo like this but yeah hopefully it works so the first one would be uh to",
    "start": "1376440",
    "end": "1383200"
  },
  {
    "text": "have the um slim like using the mint",
    "start": "1383200",
    "end": "1388240"
  },
  {
    "text": "tool to debug the image engine X slim so that's a engine x uh slim image which",
    "start": "1388240",
    "end": "1395760"
  },
  {
    "text": "doesn't have a shell and we are trying to now debug this so",
    "start": "1395760",
    "end": "1402159"
  },
  {
    "text": "there's tab completion so you can see we have",
    "start": "1402159",
    "end": "1407440"
  },
  {
    "text": "debug and then we can specify the run",
    "start": "1407440",
    "end": "1412559"
  },
  {
    "text": "time and then we can specify that it's ster if you don't specify the runtime it automatically chooses talker so you if",
    "start": "1412559",
    "end": "1419080"
  },
  {
    "text": "you're using if you're debugging talker then you can actually um omit the",
    "start": "1419080",
    "end": "1424320"
  },
  {
    "text": "runtime and then uh we specify the",
    "start": "1424320",
    "end": "1429960"
  },
  {
    "text": "Target and then we specify the engine",
    "start": "1429960",
    "end": "1435480"
  },
  {
    "text": "X slim image and you can see we are in",
    "start": "1435480",
    "end": "1442039"
  },
  {
    "text": "the shell and you can also see which engine",
    "start": "1442039",
    "end": "1448919"
  },
  {
    "text": "X so you can see uh we have the access to uh the engine X as well so yeah it's",
    "start": "1448919",
    "end": "1457640"
  },
  {
    "text": "the same workflow so now what we'll try to do is we'll try to replicate the same workflow which we talked in one of the",
    "start": "1457640",
    "end": "1463480"
  },
  {
    "text": "slide where we had tool mentioned the tool was meant um so we'll try to",
    "start": "1463480",
    "end": "1468880"
  },
  {
    "text": "replicate the same behavior across cubes and container d as well so moving to",
    "start": "1468880",
    "end": "1474840"
  },
  {
    "text": "container moving to cubes the yam it's the same one you want",
    "start": "1474840",
    "end": "1480960"
  },
  {
    "text": "to show the spec yeah want just show the spec okay I don't know where the cursor is oh here is it all the way to the",
    "start": "1480960",
    "end": "1487919"
  },
  {
    "text": "right yeah so a simple uh yaml file which is there uh simple engine x uh",
    "start": "1487919",
    "end": "1494039"
  },
  {
    "text": "port with the chain guard uh image which is there that's already deployed",
    "start": "1494039",
    "end": "1500320"
  },
  {
    "text": "and yeah so we exit from this and we do CU C get",
    "start": "1505000",
    "end": "1511039"
  },
  {
    "text": "pods still need to exit oh it still didn't yep",
    "start": "1511039",
    "end": "1518320"
  },
  {
    "text": "okay so you can see the example p uh that spec that I shown is up and running",
    "start": "1519480",
    "end": "1524960"
  },
  {
    "text": "so we'll use the same tool and",
    "start": "1524960",
    "end": "1530320"
  },
  {
    "text": "debug and this we specify the runtime this time it's K8 we actually have to",
    "start": "1532039",
    "end": "1538080"
  },
  {
    "text": "specify name spaces and the Pod but it since there is only one pod in the default name space so it should",
    "start": "1538080",
    "end": "1544200"
  },
  {
    "text": "automatically pick up and it",
    "start": "1544200",
    "end": "1551240"
  },
  {
    "text": "does and you can see it is starting to enter the container",
    "start": "1554440",
    "end": "1561520"
  },
  {
    "text": "and here we are so the same the same tooling uh that we",
    "start": "1561520",
    "end": "1570440"
  },
  {
    "text": "have which engine so we have same access to the root of the target container that",
    "start": "1570440",
    "end": "1575640"
  },
  {
    "text": "we want to debug um and we had the same developer experience for cubes as well",
    "start": "1575640",
    "end": "1582120"
  },
  {
    "text": "um now we'll try container D yep yeah so it's like uh Doer or cube C exac you see",
    "start": "1582120",
    "end": "1590760"
  },
  {
    "text": "the target container file system you don't see the uh the docker entry point shell because it's it's a chain guard uh",
    "start": "1590760",
    "end": "1598559"
  },
  {
    "text": "engine X image and they don't have it but all of that engine X stuff is there can we can you switch to uh the",
    "start": "1598559",
    "end": "1606200"
  },
  {
    "text": "other thing perfect",
    "start": "1606200",
    "end": "1613120"
  },
  {
    "text": "yes okay all right",
    "start": "1613120",
    "end": "1620240"
  },
  {
    "text": "so before I do that I'll just do so do nerd",
    "start": "1624159",
    "end": "1630760"
  },
  {
    "text": "CTL PS so right there there's a there's an",
    "start": "1631120",
    "end": "1637440"
  },
  {
    "text": "image",
    "start": "1637440",
    "end": "1639960"
  },
  {
    "text": "running and we'll do the same thing",
    "start": "1643640",
    "end": "1650159"
  },
  {
    "text": "right run",
    "start": "1651240",
    "end": "1654640"
  },
  {
    "text": "time okay and we shouldn't get the",
    "start": "1657200",
    "end": "1662600"
  },
  {
    "text": "same Target completion yep we see the engine",
    "start": "1664039",
    "end": "1670278"
  },
  {
    "text": "X right there",
    "start": "1671279",
    "end": "1677120"
  },
  {
    "text": "great okay so here we see the docka entry point we do which engine",
    "start": "1677120",
    "end": "1684960"
  },
  {
    "text": "X which should be good great so we can exit and we can",
    "start": "1684960",
    "end": "1691679"
  },
  {
    "text": "switch back and uh show the version without the same Target container",
    "start": "1691679",
    "end": "1697960"
  },
  {
    "text": "experience if we want to do it we have a few minutes a couple of",
    "start": "1697960",
    "end": "1703320"
  },
  {
    "text": "minutes yeah try",
    "start": "1707120",
    "end": "1714679"
  },
  {
    "text": "again yeah so it defaults to the darker run time yeah",
    "start": "1729240",
    "end": "1736600"
  },
  {
    "text": "and this for M we need a",
    "start": "1736600",
    "end": "1743600"
  },
  {
    "text": "false right there so now if you now if you see um we",
    "start": "1744559",
    "end": "1753760"
  },
  {
    "text": "this is the root um the root of this particular debugger and if I do",
    "start": "1753760",
    "end": "1760279"
  },
  {
    "text": "which engine X it doesn't work so we can simulate",
    "start": "1760279",
    "end": "1766000"
  },
  {
    "text": "that experience uh using the run as uh Target shell false yeah so that's what",
    "start": "1766000",
    "end": "1772640"
  },
  {
    "text": "you get uh when you use the um the regular CLI with C CTL debug or uh",
    "start": "1772640",
    "end": "1779399"
  },
  {
    "text": "Docker run and other similar",
    "start": "1779399",
    "end": "1784559"
  },
  {
    "text": "tools well that's it we'll point to the last",
    "start": "1785080",
    "end": "1790360"
  },
  {
    "text": "slide yeah and there's a couple of screenshots there uh that show the same",
    "start": "1790360",
    "end": "1796080"
  },
  {
    "text": "thing and how you can can disable the target shell flag and get the debugging",
    "start": "1796080",
    "end": "1802760"
  },
  {
    "text": "image and then the information about the images and also the next one if you",
    "start": "1802760",
    "end": "1808320"
  },
  {
    "text": "scroll scroll to that yeah that that custom debug image chain guard created was",
    "start": "1808320",
    "end": "1814840"
  },
  {
    "text": "awesome and then yeah uh so that's pretty much it on uh",
    "start": "1814840",
    "end": "1821650"
  },
  {
    "text": "[Applause] debugging",
    "start": "1821650",
    "end": "1828360"
  }
]