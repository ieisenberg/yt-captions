[
  {
    "text": "so welcome to the network service mesh deep dive so this is where we pull back the curtain and show you the spider",
    "start": "60",
    "end": "6210"
  },
  {
    "text": "running the show so if you haven't met us I'm Frederick couch this is Ed Warnecke and let's begin so a couple",
    "start": "6210",
    "end": "13799"
  },
  {
    "text": "quick things if you have questions ask them as we go because if you have a",
    "start": "13799",
    "end": "19470"
  },
  {
    "text": "question somebody else in the audience is gonna have that question you do everyone a favor when you ask it so that's the first thing the second thing",
    "start": "19470",
    "end": "25560"
  },
  {
    "text": "is I will be asking you questions in the course of this talk and asking you to raise your hands just to get a feel for",
    "start": "25560",
    "end": "31080"
  },
  {
    "text": "what's going on out there and it's always good when doing these things to calibrate first so quick show of hands how many of you can raise your hands",
    "start": "31080",
    "end": "38360"
  },
  {
    "text": "excellent cool now there's one other interesting thing I want to know because I got caught a little off guard but this",
    "start": "38360",
    "end": "44640"
  },
  {
    "text": "the last talk when we do the intro how many of you are sneaky Network people ah",
    "start": "44640",
    "end": "50480"
  },
  {
    "text": "okay more than I expected cool and how many of you were app people excellent we",
    "start": "50480",
    "end": "56460"
  },
  {
    "text": "got a good blend here good blend very very cool now how many of you guys mid to the network service mesh intro talk",
    "start": "56460",
    "end": "62750"
  },
  {
    "text": "okay that helps because this is the deep dive we showed you how easy it is to use",
    "start": "62750",
    "end": "67770"
  },
  {
    "text": "and how conceptually simple it is last time as Frederic said we are going to pull back the curtain and show you the",
    "start": "67770",
    "end": "73380"
  },
  {
    "text": "spider pulley lovers behind great so",
    "start": "73380",
    "end": "80460"
  },
  {
    "text": "some some housekeeping so you can reach the network service mesh cube con events",
    "start": "80460",
    "end": "85560"
  },
  {
    "text": "page from this particular link we're coming to the end of it so we have only",
    "start": "85560",
    "end": "90810"
  },
  {
    "text": "a couple things only a couple events left so but go ahead and take this this",
    "start": "90810",
    "end": "96570"
  },
  {
    "text": "will also take you to the network service mesh website so you can see our slides and and other material that we",
    "start": "96570",
    "end": "103049"
  },
  {
    "text": "prepared yeah what other thing to keep in mind we will not be doing a demo this session because this is the deep dive but both Frederic and I still have demos",
    "start": "103049",
    "end": "110909"
  },
  {
    "text": "that we're doing in the Red Hat and Cisco booths respectively so if you want to get a little bit more of an intro and",
    "start": "110909",
    "end": "116430"
  },
  {
    "text": "a little bit more of a demo those are probably good places to go get it cool",
    "start": "116430",
    "end": "121850"
  },
  {
    "text": "so the next piece of housekeeping if you want this slide deck that will take you",
    "start": "121850",
    "end": "129000"
  },
  {
    "text": "to this slide deck it's on Google Docs I know people are often asking where do I get this slide deck this is where you get this",
    "start": "129000",
    "end": "135300"
  },
  {
    "text": "slide deck highly recommend this one so you're gonna see a lot of good information on here at how on how it",
    "start": "135300",
    "end": "141420"
  },
  {
    "text": "works and so make sure you get a good picture cool everybody good three by the way for",
    "start": "141420",
    "end": "150030"
  },
  {
    "text": "those of you give talks nothing beats QR codes we're getting an entire audience full of people holding up cameras all right going once going",
    "start": "150030",
    "end": "161160"
  },
  {
    "text": "twice and here we go great so the problem what is the problem",
    "start": "161160",
    "end": "167870"
  },
  {
    "text": "so the problem is that we've got people who want things that look like this this is kind of what your app developers one",
    "start": "167870",
    "end": "173550"
  },
  {
    "text": "they want something where their pod is running it does its thing it gets its normal kubernetes networking but maybe",
    "start": "173550",
    "end": "179940"
  },
  {
    "text": "you need something a little bit more something that kubernetes networking doesn't provide in this example it would",
    "start": "179940",
    "end": "185100"
  },
  {
    "text": "be a secure Internet connectivity and you don't really want to think too much about that you just want it to work and",
    "start": "185100",
    "end": "191580"
  },
  {
    "text": "you don't even want to know what security is that's what you have net ops people for so this is this is what it",
    "start": "191580",
    "end": "200850"
  },
  {
    "text": "looks like in terms of network service special you saw this particular slide before you came to our intro so you have a network service you have the the",
    "start": "200850",
    "end": "209370"
  },
  {
    "text": "connection so if you notice services Sarah's pods all she sees is the is the l2 l3 connects to to the network service",
    "start": "209370",
    "end": "215040"
  },
  {
    "text": "everything in the cloud is a cloud to her so she cannot see what's what's inside that cloud other than the fact",
    "start": "215040",
    "end": "220860"
  },
  {
    "text": "that she's getting her service but as you can see inside the cloud we've actually chained firewall pod VPN",
    "start": "220860",
    "end": "226080"
  },
  {
    "text": "gateway etc so we provide a nice easy way to abstract this but also get you this still get you the details that you",
    "start": "226080",
    "end": "232350"
  },
  {
    "text": "need so really quickly onto the solution",
    "start": "232350",
    "end": "237440"
  },
  {
    "text": "so the solution is this is the link to the network service mesh intro DAC we",
    "start": "237440",
    "end": "243090"
  },
  {
    "text": "will do a really quick run through of some basics here just to set the tone but we spent an entire talk talking",
    "start": "243090",
    "end": "249060"
  },
  {
    "text": "through how this looks it is simple to people to consume it how it looks in as simple the people who operate it and all",
    "start": "249060",
    "end": "254880"
  },
  {
    "text": "the rest of it if you actually go behind the curtain to see the spider pulling the lovers it's a lot more involved but",
    "start": "254880",
    "end": "263760"
  },
  {
    "text": "we're going to do a really quick hum a few bars version here all right so a couple things to notice",
    "start": "263760",
    "end": "269620"
  },
  {
    "text": "we have a firewall pod that is has a label apical firewall and we have a VPN",
    "start": "269620",
    "end": "274840"
  },
  {
    "text": "gateway pod that has an appt apical VPN gateway so these are how we know what pod provides which particular the aspect",
    "start": "274840",
    "end": "283420"
  },
  {
    "text": "endpoint of that service exactly and then if we get something like the",
    "start": "283420",
    "end": "288970"
  },
  {
    "text": "firewall pod so the firewall pod exposes the secure internet connectivity service but it also consumes it and this is",
    "start": "288970",
    "end": "295750"
  },
  {
    "text": "super helpful because it makes your firewall pod can be dumb as a rock because all it knows is it's applying",
    "start": "295750",
    "end": "302110"
  },
  {
    "text": "firewall rules and there's going to be somebody who comes after it who handles other aspects of secure Internet",
    "start": "302110",
    "end": "307360"
  },
  {
    "text": "connectivity what those are it doesn't know or care but how will it'll it hints to us so we can apply policy is when it",
    "start": "307360",
    "end": "314500"
  },
  {
    "text": "asks for an l2 or l3 connection to the secure Internet connectivity service it",
    "start": "314500",
    "end": "320620"
  },
  {
    "text": "puts a label on that request that is a people's firewall so yeah so rocks that",
    "start": "320620",
    "end": "327610"
  },
  {
    "text": "connect as a firewall it's pretty smart Rock so this is the this is what the",
    "start": "327610",
    "end": "333310"
  },
  {
    "text": "definition looks like so you see we have a match that match the source selectors app firewall and the destination is VPN",
    "start": "333310",
    "end": "341230"
  },
  {
    "text": "gateway so when it connects to its own service secure Internet connectivity then this is the definition that that",
    "start": "341230",
    "end": "348580"
  },
  {
    "text": "tells where to go and looks like Ian has a great question yeah and you have a question oh this file can be written by",
    "start": "348580",
    "end": "356350"
  },
  {
    "text": "the app developer if there are the ones deploying the network service and points it can be written by some net ops person who says here is am will file in some",
    "start": "356350",
    "end": "362110"
  },
  {
    "text": "containers if they're the ones putting it together um it's just like when you put together services in kubernetes",
    "start": "362110",
    "end": "367300"
  },
  {
    "text": "there are many people who may provide those services it becomes a question administrative Lee in turn iliev who",
    "start": "367300",
    "end": "372520"
  },
  {
    "text": "produces it",
    "start": "372520",
    "end": "374910"
  },
  {
    "text": "correct",
    "start": "377840",
    "end": "380840"
  },
  {
    "text": "probably cool and then the question",
    "start": "383500",
    "end": "389360"
  },
  {
    "text": "becomes how do we connect Sarah's pot off the sort of general consumer who's not part of providing the service and in",
    "start": "389360",
    "end": "394490"
  },
  {
    "text": "this case you have a match it doesn't it matches anything that falls through that doesn't actually have labels on it and",
    "start": "394490",
    "end": "399860"
  },
  {
    "text": "the match has a route that says okay connect this to something that is say",
    "start": "399860",
    "end": "405080"
  },
  {
    "text": "that has a label app equals firewall as destination labels so that's the hum a",
    "start": "405080",
    "end": "412790"
  },
  {
    "text": "few bars version where now we're gonna dive into the architecture everybody's still with us show hands awesome cool so",
    "start": "412790",
    "end": "423650"
  },
  {
    "text": "there are kinds of to wait you know there are two ways to abstract problems in general one is you can focus on the",
    "start": "423650",
    "end": "430220"
  },
  {
    "text": "implementation this is kind of what happened in cloud one dot o we took all the physical things in the world and we",
    "start": "430220",
    "end": "435410"
  },
  {
    "text": "slapped a fee in front of them when we called it good and this had one really really nice characteristic and a bunch",
    "start": "435410",
    "end": "440570"
  },
  {
    "text": "of really bad ones the really nice characteristic was nobody had to rethink anything you already knew what",
    "start": "440570",
    "end": "446479"
  },
  {
    "text": "interfaces were in subnets were and everything else and so it was kind of familiar ish the second way you can do",
    "start": "446479",
    "end": "453020"
  },
  {
    "text": "it is to be developer focused this is very much the way that kubernetes has gone it focuses on what exactly is it",
    "start": "453020",
    "end": "460430"
  },
  {
    "text": "that you need as a developer so when you look at how this applies to things like",
    "start": "460430",
    "end": "465680"
  },
  {
    "text": "adding additional networking services to the world if you were to do this in a way that's implementation focused you",
    "start": "465680",
    "end": "471260"
  },
  {
    "text": "would start adding virtual interfaces and virtual subnets and all kinds of things but the truth of the matter is",
    "start": "471260",
    "end": "477520"
  },
  {
    "text": "that's not actually what developers generally care about every now and again they do but generally they don't what",
    "start": "477520",
    "end": "482960"
  },
  {
    "text": "they care about is number one they want to get their normal kubernetes and networking services because the normal kubernetes networking is awesome for",
    "start": "482960",
    "end": "488780"
  },
  {
    "text": "what it does and if you need more than that what you really want is to be connected up to something that functionally does the things you need",
    "start": "488780",
    "end": "494870"
  },
  {
    "text": "with the other packets or frames that you're dealing with and those things may be things like connectivity to isolated",
    "start": "494870",
    "end": "500870"
  },
  {
    "text": "resources protecting you from threats um allowing you to talk talk to various things load-balancing coifs etc and so",
    "start": "500870",
    "end": "511520"
  },
  {
    "text": "if you look at this it's not any one of these things that you actually want it's some Venn diagram of the",
    "start": "511520",
    "end": "516800"
  },
  {
    "text": "and that intersection of the Venn diagram is actually what we call a network service and there are still",
    "start": "516800",
    "end": "524060"
  },
  {
    "text": "interfaces and subnets and all these implementation details there but rather than making you hobble them together",
    "start": "524060",
    "end": "529880"
  },
  {
    "text": "with 1990s networking concepts we abstract them the thing you care about",
    "start": "529880",
    "end": "535209"
  },
  {
    "text": "okay so we got three easy pieces easy-peasy so first is the actual network service",
    "start": "535209",
    "end": "541970"
  },
  {
    "text": "itself so you've seen this in the intro slide that we had before you have so the",
    "start": "541970",
    "end": "547640"
  },
  {
    "text": "network service is the thing that that the user wants the network service endpoint provides that particular",
    "start": "547640",
    "end": "555440"
  },
  {
    "text": "service or portion of that service so it could be the firewall VPN gateway and",
    "start": "555440",
    "end": "560959"
  },
  {
    "text": "then you have the connection that connects you to that particular implementation of the service that you",
    "start": "560959",
    "end": "567529"
  },
  {
    "text": "that you want so keep those three ideas in mind because we're going to be making",
    "start": "567529",
    "end": "572990"
  },
  {
    "text": "use of them extensively yeah and it's important to realize when you deal with an l2 l3 connection the payload it is",
    "start": "572990",
    "end": "579470"
  },
  {
    "text": "carrying is an IP packet or an Ethernet frame or for the more exotic among you",
    "start": "579470",
    "end": "585110"
  },
  {
    "text": "in the audience the sneaky network people maybe an MPLS frame or something else more exotic",
    "start": "585110",
    "end": "591079"
  },
  {
    "text": "yeah and just for clarification so for those of you who are looking at SDO and saying how does this compared to its OS do is l7 l4 so you're you're working",
    "start": "591079",
    "end": "599600"
  },
  {
    "text": "with application HTTP drew a stream that stream would be TCP we're looking at l2",
    "start": "599600",
    "end": "606500"
  },
  {
    "text": "l3 so we're looking at IP MPLS or various other payloads and so very great",
    "start": "606500",
    "end": "613130"
  },
  {
    "text": "it to be clear an sto style application service smash will run just fine over a network service master it'll never and",
    "start": "613130",
    "end": "618920"
  },
  {
    "text": "over here and honestly we will never know that it's there either because it's way over our heads so the abstract",
    "start": "618920",
    "end": "627589"
  },
  {
    "text": "components so to start off with we have what we call a network service registry and so the network service registry is",
    "start": "627589",
    "end": "634790"
  },
  {
    "text": "composed of what network services are present what are their endpoints and so",
    "start": "634790",
    "end": "641209"
  },
  {
    "text": "the endpoints are the the pods and so on that we showed before what and what what are their manager so in other words I",
    "start": "641209",
    "end": "647060"
  },
  {
    "text": "have an endpoint who which NS MD is the manager that and will be saying a lot more about",
    "start": "647060",
    "end": "652940"
  },
  {
    "text": "network service managers in the moment exactly so the way that this looks is so",
    "start": "652940",
    "end": "659570"
  },
  {
    "text": "this is actually a proto protobuf and so this so you provide a network service",
    "start": "659570",
    "end": "665779"
  },
  {
    "text": "the network service has a name it has a payload so the payload being IP Ethernet MPLS Jerry or via clan or so on",
    "start": "665779",
    "end": "674510"
  },
  {
    "text": "and then we have something that matches so those are the matches that you saw before the network service endpoint",
    "start": "674510",
    "end": "680750"
  },
  {
    "text": "distance also has a name it has a payload as well it has the name",
    "start": "680750",
    "end": "686839"
  },
  {
    "text": "of its network service manager and again we'll come to more on this in a while it",
    "start": "686839",
    "end": "691910"
  },
  {
    "text": "has the endpoint name it has a series of labels which is used to provide",
    "start": "691910",
    "end": "698420"
  },
  {
    "text": "information about that about that particular endpoint and a state like is",
    "start": "698420",
    "end": "704120"
  },
  {
    "text": "it up or is it having trouble cool and then the network service manager is the",
    "start": "704120",
    "end": "710540"
  },
  {
    "text": "final one and again we'll say much more about network service manager shortly but effectively a network service manager has a name",
    "start": "710540",
    "end": "716060"
  },
  {
    "text": "it has a URL which is how you talk to it if you need to talk to the network service manager and it has a little bit",
    "start": "716060",
    "end": "722480"
  },
  {
    "text": "of information like ok do we actually do be actually hear from this guy recently do we know he's still there do we have a state for him etc all right",
    "start": "722480",
    "end": "732620"
  },
  {
    "text": "so every network service manager I guess we'll call it a domain in a scenario it has every pot every node has a network",
    "start": "732620",
    "end": "740180"
  },
  {
    "text": "service manager yeah so we're good to talk about this first in the abstract then we'll talk about it concretely in",
    "start": "740180",
    "end": "745910"
  },
  {
    "text": "kubernetes because it turns out that you've got whenever you have a network service registry there is some domain of network",
    "start": "745910",
    "end": "751699"
  },
  {
    "text": "services and network service endpoints and network cetera that it encompasses right we call that the network service",
    "start": "751699",
    "end": "758630"
  },
  {
    "text": "registry domain every time you have a network manager there is some domain of network service endpoints network",
    "start": "758630",
    "end": "766100"
  },
  {
    "text": "service clients and data planes that it's actually managing and we'll see",
    "start": "766100",
    "end": "771680"
  },
  {
    "text": "concretely what this means in kubernetes shortly and of course you could have any number of network service manager",
    "start": "771680",
    "end": "777620"
  },
  {
    "text": "domains within that are filling into a network service registry and in this scenario take note that",
    "start": "777620",
    "end": "783459"
  },
  {
    "text": "so imagine this is a kubernetes cluster for a moment right so there is one network service registry so multiple",
    "start": "783459",
    "end": "790569"
  },
  {
    "text": "network service managers that will publish to that registry and will read from that registry and work out where",
    "start": "790569",
    "end": "795579"
  },
  {
    "text": "their network services are coming from yep so no important things to realize so",
    "start": "795579",
    "end": "802420"
  },
  {
    "text": "different network service managers will advertise the network service endpoints that they have to the network service",
    "start": "802420",
    "end": "808269"
  },
  {
    "text": "registry this is the only point of centralization in the system and then",
    "start": "808269",
    "end": "814809"
  },
  {
    "text": "the network service managers will communicate with each other peer-to-peer to set up the l2 l3 connections so for",
    "start": "814809",
    "end": "828339"
  },
  {
    "text": "the for the kubernetes version so the the network service registry itself is",
    "start": "828339",
    "end": "834220"
  },
  {
    "text": "implemented and makes use of CRTs so it's an application that makes use of",
    "start": "834220",
    "end": "839670"
  },
  {
    "text": "CRTs and so basically all of the state is where network service endpoints and so on are stored with within within",
    "start": "839670",
    "end": "846699"
  },
  {
    "text": "those series and we and we pull from them and so beyond the network service registry everything else is done",
    "start": "846699",
    "end": "853199"
  },
  {
    "text": "orthogonal II and this is super nice because then you can say okay well cube control get NSC and you'll get from",
    "start": "853199",
    "end": "859749"
  },
  {
    "text": "kubernetes the list of network service endpoints that it's got from the registry because we're using these custom resources in kubernetes in the",
    "start": "859749",
    "end": "866860"
  },
  {
    "text": "API server and then the network service manager is loaded there is running as a",
    "start": "866860",
    "end": "873160"
  },
  {
    "text": "daemon set on every single node so every node is a network service manager domain and has a network service manager and of",
    "start": "873160",
    "end": "879819"
  },
  {
    "text": "course you also need to run some kind of a data playing to do your cross connects and this can be any number of things",
    "start": "879819",
    "end": "884829"
  },
  {
    "text": "network service mesh is completely agnostic as to what you plug in there as the data playing we do provide one but",
    "start": "884829",
    "end": "891670"
  },
  {
    "text": "if you don't like it and you want to do your own as you'll see a little bit later on the deck the API that has to be",
    "start": "891670",
    "end": "897129"
  },
  {
    "text": "exposed if you're a data plane is dead simple mostly because we don't ask you to do very much yes",
    "start": "897129",
    "end": "906089"
  },
  {
    "text": "um network service mesh you'll see when we get to the data play an API it is",
    "start": "906820",
    "end": "911860"
  },
  {
    "text": "speaking an API that specifically asks for the creation of cross connects and your V switch would expose that API so",
    "start": "911860",
    "end": "918070"
  },
  {
    "text": "it can create the cross connects but you'll see that when we could dip the rule until the API in a bit great so the",
    "start": "918070",
    "end": "926020"
  },
  {
    "text": "next thing is we have network service endpoints or so and this in kubernetes",
    "start": "926020",
    "end": "931680"
  },
  {
    "text": "these all end up as a pod so if you saw the demo that I gave before with the bridge domain that bridge domain was",
    "start": "931680",
    "end": "938170"
  },
  {
    "text": "then deployed is a pod yep and then you also wind up with network service",
    "start": "938170",
    "end": "944530"
  },
  {
    "text": "clients these are pods like Sarah's pod that want to be connected to a network service and again they end up talking to",
    "start": "944530",
    "end": "950860"
  },
  {
    "text": "their local network service manager all right so now we begin drilling into the",
    "start": "950860",
    "end": "958300"
  },
  {
    "text": "API so people like api's oh good I should have raised my hand so all",
    "start": "958300",
    "end": "968800"
  },
  {
    "text": "purple all the purple edges you see here are G RPC so just just so you know so",
    "start": "968800",
    "end": "974890"
  },
  {
    "text": "we're gonna start with a network service endpoint registration so the registration message has a network",
    "start": "974890",
    "end": "981250"
  },
  {
    "text": "service a network service manager and the env endpoint as well and so what",
    "start": "981250",
    "end": "987850"
  },
  {
    "text": "happens is the the endpoint will will call register NSC and say I am exposing",
    "start": "987850",
    "end": "994090"
  },
  {
    "text": "a bridge domain or I'm exposing a firewall and will will notify the network service manager that that it has",
    "start": "994090",
    "end": "1001110"
  },
  {
    "text": "it is ready for connections and then the network service manager will do a few",
    "start": "1001110",
    "end": "1006210"
  },
  {
    "text": "things it will basically you know make sure the network service manager references itself because it's the one",
    "start": "1006210",
    "end": "1011280"
  },
  {
    "text": "in charge of that and then it will translate this to the CRTs that are going into the API server and go stick",
    "start": "1011280",
    "end": "1016590"
  },
  {
    "text": "them up in the API server so that when you do Cube control get NSC you will see that network service endpoint listed so",
    "start": "1016590",
    "end": "1025550"
  },
  {
    "text": "the the next part is the the node as well so the so the client will ask for a",
    "start": "1025550",
    "end": "1031920"
  },
  {
    "text": "network service and so what it does is it is it creates a a connection object and it and it specifies the mechanism so",
    "start": "1031920",
    "end": "1039730"
  },
  {
    "text": "mechanism is where you ask I'm looking for Colonel interface I'm looking for a MMI f4v host user and so you can see in",
    "start": "1039730",
    "end": "1047110"
  },
  {
    "text": "the east in the action and the service we do request network service and the response is going to be a fully",
    "start": "1047110",
    "end": "1053830"
  },
  {
    "text": "specified connection and part of the reason that we specify the connection here is you may have partial parameters",
    "start": "1053830",
    "end": "1059049"
  },
  {
    "text": "there may be some partial things you care about about the connection that you may put in there like you might want to know what is the interface I'm gonna be",
    "start": "1059049",
    "end": "1064960"
  },
  {
    "text": "as an example so one thing to keep in mind here is these are local connections",
    "start": "1064960",
    "end": "1070510"
  },
  {
    "text": "so one of the distinctions we make in network service smash that's super helpful is if all I really want to do is",
    "start": "1070510",
    "end": "1077530"
  },
  {
    "text": "get an Ethernet frame from here to there how many folks actually want to be forced to deal with how it gets there",
    "start": "1077530",
    "end": "1085559"
  },
  {
    "text": "not saying you can't but what to have to no choice who keeps inviting the sneaky",
    "start": "1085740",
    "end": "1093880"
  },
  {
    "text": "network people so what network service mesh does is it allows you to specify",
    "start": "1093880",
    "end": "1099850"
  },
  {
    "text": "what kind of local connection you want now for a normal application like somebody who wants to just be connected",
    "start": "1099850",
    "end": "1105280"
  },
  {
    "text": "to secure corporate Internet connectivity or Internet connectivity you're just gonna what a kernel interface dude you really don't want",
    "start": "1105280",
    "end": "1111250"
  },
  {
    "text": "anything hard or complicated you just want to run your damn app but if you're writing a network service endpoint or",
    "start": "1111250",
    "end": "1117160"
  },
  {
    "text": "you're doing anything you're writing a C enough you probably want to use a higher performance mechanism like mem if' and",
    "start": "1117160",
    "end": "1122770"
  },
  {
    "text": "we will allow you to specify that as the thing that you want and we will give it to you so you do have options but the",
    "start": "1122770",
    "end": "1129220"
  },
  {
    "text": "things you don't see at a local connection are things like VX Land GRE",
    "start": "1129220",
    "end": "1135400"
  },
  {
    "text": "these are remote connection mechanisms not local ones now obviously if you're",
    "start": "1135400",
    "end": "1141760"
  },
  {
    "text": "passing you through net frames or you're passing IP packets as payload you can put those things in the payload that's",
    "start": "1141760",
    "end": "1147730"
  },
  {
    "text": "awesome but you don't deal with that in terms of getting from pod to pod",
    "start": "1147730",
    "end": "1152919"
  },
  {
    "text": "yes",
    "start": "1152919",
    "end": "1155850"
  },
  {
    "text": "yes absolutely it's purely scope to the connection not to the pod the question",
    "start": "1159980",
    "end": "1167010"
  },
  {
    "text": "was could he have a single pod that asks for one Network service with a kernel interface and a different network",
    "start": "1167010",
    "end": "1173430"
  },
  {
    "text": "service with MMI off and the answer is yes the mechanism is scoped to the",
    "start": "1173430",
    "end": "1179370"
  },
  {
    "text": "connection not to the pod other questions very cool",
    "start": "1179370",
    "end": "1187850"
  },
  {
    "text": "so in this drill set a little bit more into what goes into a connection object right so it's got an ID we put the",
    "start": "1187850",
    "end": "1195540"
  },
  {
    "text": "information about the network service it's a connection for in there and it actually has a mechanism and we'll talk",
    "start": "1195540",
    "end": "1200790"
  },
  {
    "text": "in a second about mechanisms and then there are two interesting things here what is the labels and we've talked about how the labels get used for all",
    "start": "1200790",
    "end": "1207030"
  },
  {
    "text": "kinds of cool things like routing but we also have in here a set of values that we call the connection context now",
    "start": "1207030",
    "end": "1214050"
  },
  {
    "text": "connection contexts are cool mechanisms get negotiated between you and sort of the next hopping your system right like",
    "start": "1214050",
    "end": "1220170"
  },
  {
    "text": "I need a kernel interface I need a mem I off the connection context is negotiated between you and",
    "start": "1220170",
    "end": "1227850"
  },
  {
    "text": "your network service endpoint so for example if I need a source IP that",
    "start": "1227850",
    "end": "1233340"
  },
  {
    "text": "source IP is coming in the connection context from my network service endpoint if my network service endpoint wants to",
    "start": "1233340",
    "end": "1240360"
  },
  {
    "text": "make sure that I have routes that point to it say I'm a VPN gateway and we want routes for the corporate Internet that",
    "start": "1240360",
    "end": "1246090"
  },
  {
    "text": "comes back from my network service endpoint in the connection context now the rest of the system will simply pass",
    "start": "1246090",
    "end": "1251670"
  },
  {
    "text": "this on through but it's a crucial element because there are lots of these fine details but you don't want to",
    "start": "1251670",
    "end": "1256680"
  },
  {
    "text": "actually deal with if you the consumer generally but you want to make sure they happen then for mechanisms we talked",
    "start": "1256680",
    "end": "1264060"
  },
  {
    "text": "about different types of mechanisms and depending on the type of mechanism they'll have parameters if I'm asking for a kernel interface it may have the",
    "start": "1264060",
    "end": "1270780"
  },
  {
    "text": "interface name if I'm doing them if' there'll be a socket file name those kinds of details and then you do get",
    "start": "1270780",
    "end": "1278190"
  },
  {
    "text": "mechanism types we talked about how you might get a kernel interface if you're a normal everyday application you might get a mem if' interface or an SRO v NIC",
    "start": "1278190",
    "end": "1286560"
  },
  {
    "text": "or a hardware interface these are all mechanisms from our point that connects you to a network service",
    "start": "1286560",
    "end": "1293900"
  },
  {
    "text": "right so the next part is the actual network service request between the",
    "start": "1294770",
    "end": "1299880"
  },
  {
    "text": "network service manager so when you're crossing between node to node then what we do is we we have the connection and",
    "start": "1299880",
    "end": "1306419"
  },
  {
    "text": "we pass the connection on but we also add in some additional information into that so if you notice the network",
    "start": "1306419",
    "end": "1312419"
  },
  {
    "text": "service request is pretty much the same API as the client to the to the NSM",
    "start": "1312419",
    "end": "1319260"
  },
  {
    "text": "demon but NSM daemon to NSM daemon we also include the other information like my see do we have a cell phone that we",
    "start": "1319260",
    "end": "1325799"
  },
  {
    "text": "do so so it also includes information about what do I support VX LAN or my",
    "start": "1325799",
    "end": "1334440"
  },
  {
    "text": "data plane supports the excellen-- and GRE which one and with these parameters and pass that on to the remote side and",
    "start": "1334440",
    "end": "1341490"
  },
  {
    "text": "so and so what we so what you see is in",
    "start": "1341490",
    "end": "1346980"
  },
  {
    "text": "we have two mechanism type so you can see like VX and VX times you had GPA GRE etc there's no end of the creativity of",
    "start": "1346980",
    "end": "1353100"
  },
  {
    "text": "the folks in the IETF this list will grow for all of time I'm sorry we can't make them stop but here's the thing you",
    "start": "1353100",
    "end": "1360809"
  },
  {
    "text": "never have to know the guy writing an application pod never has to know again",
    "start": "1360809",
    "end": "1366450"
  },
  {
    "text": "what the hell these things are if you're writing a CNF you never have to know",
    "start": "1366450",
    "end": "1372049"
  },
  {
    "text": "when all the people who are beating down your door last year telling you you have to have MPLS over GRE show up again and",
    "start": "1372049",
    "end": "1379049"
  },
  {
    "text": "say no that's not good enough anymore we would MPLS over UDP you don't have to rewrite your CNF because that's all",
    "start": "1379049",
    "end": "1386220"
  },
  {
    "text": "handled by the network service mesh yeah and so this mechanism type this remote mechanism type is added by the NSM and",
    "start": "1386220",
    "end": "1393000"
  },
  {
    "text": "then it is stripped by the by the remote NSM side as well so the so the client",
    "start": "1393000",
    "end": "1398700"
  },
  {
    "text": "and the and the endpoints never see the the remote mechanism information that is",
    "start": "1398700",
    "end": "1404610"
  },
  {
    "text": "being used so it is strictly encapsulated and stripped on the other side served on your side keeps a",
    "start": "1404610",
    "end": "1410549"
  },
  {
    "text": "connection and what they have to worry about very simple yep",
    "start": "1410549",
    "end": "1415220"
  },
  {
    "text": "so this is sort of the the big perfect picture here where we see all the different steps and the last one is when",
    "start": "1416700",
    "end": "1423250"
  },
  {
    "text": "the network service manager on the remote node goes to talk to its network service endpoint guess what it uses",
    "start": "1423250",
    "end": "1428890"
  },
  {
    "text": "exactly the same network service API that the client used to ask the network service manager for that connection so",
    "start": "1428890",
    "end": "1436210"
  },
  {
    "text": "it's the same API it's the same parameters we've got a remarkably small number of api's and many of them looking",
    "start": "1436210",
    "end": "1442780"
  },
  {
    "text": "very close to each other so the system is very very simple so now we're going",
    "start": "1442780",
    "end": "1449890"
  },
  {
    "text": "to talk about how you interact with the data plane you may recall that I said that we're really super agnostic about",
    "start": "1449890",
    "end": "1454900"
  },
  {
    "text": "the data plane the network service manager does not actually program your V switch directly because that would weld",
    "start": "1454900",
    "end": "1460120"
  },
  {
    "text": "us to a particular V switch so for example a lot of the folks in network service mesh really like VPP because",
    "start": "1460120",
    "end": "1466360"
  },
  {
    "text": "it's a super performance super easy data plane to work with that does everything but we don't directly program VPP",
    "start": "1466360",
    "end": "1472990"
  },
  {
    "text": "instead what we have is a data plane API and that data plane API is pretty simple",
    "start": "1472990",
    "end": "1479320"
  },
  {
    "text": "it has a streaming RPC called monitor mechanisms that allows us to find out",
    "start": "1479320",
    "end": "1484570"
  },
  {
    "text": "what things the data plane can do this data plane can do SR v6 + VX LAN so if",
    "start": "1484570",
    "end": "1490840"
  },
  {
    "text": "someone has to be for MPLS over UDP I'm sorry that's not something I can do and",
    "start": "1490840",
    "end": "1495870"
  },
  {
    "text": "it's got very closely it's close semantics to what we've seen before I can request a cross connect and we'll",
    "start": "1495870",
    "end": "1502600"
  },
  {
    "text": "see in the next slide what a cross connect is and I can close a cross connect and exactly that's exactly what",
    "start": "1502600",
    "end": "1511300"
  },
  {
    "text": "I was so easy and so what a cross connect is is really flippin simple a",
    "start": "1511300",
    "end": "1516370"
  },
  {
    "text": "cross connect is two connections a source connection and a destination connection so if it turns out that the",
    "start": "1516370",
    "end": "1523030"
  },
  {
    "text": "network service endpoint that I am talking to is on the same node that I am then it will be a source connection that",
    "start": "1523030",
    "end": "1528550"
  },
  {
    "text": "is local and a destination connection that is local if it turns out that I need to go to a remote place it will be",
    "start": "1528550",
    "end": "1535540"
  },
  {
    "text": "a source connection that is local at a remote connection that is the destination and if it turns out that",
    "start": "1535540",
    "end": "1541720"
  },
  {
    "text": "some other NS MD has asked me to connect to an NSC for it it will be a remote",
    "start": "1541720",
    "end": "1546730"
  },
  {
    "text": "connection for the and it will be a local connection for the destination but semantically all",
    "start": "1546730",
    "end": "1551989"
  },
  {
    "text": "your ever dealing within a cross connect is to connections that you are cross connected meaning whatever IP or",
    "start": "1551989",
    "end": "1557690"
  },
  {
    "text": "Ethernet comes in one side you send out the other and vice versa everything is point-to-point so a really",
    "start": "1557690",
    "end": "1569029"
  },
  {
    "text": "good way to visualize this topologically and I'm gonna stop and do cartoons for a second from the point of view of the",
    "start": "1569029",
    "end": "1575389"
  },
  {
    "text": "network service client all it sees is this little green line that is a local connection and then magic happens in the",
    "start": "1575389",
    "end": "1581749"
  },
  {
    "text": "cloud in the middle and from the point of view of the network service endpoint all it sees is this local connection",
    "start": "1581749",
    "end": "1586869"
  },
  {
    "text": "that magically packets and frames come to and fro long and that's all you see if you're the network service client or",
    "start": "1586869",
    "end": "1593029"
  },
  {
    "text": "endpoint if you drill down into the world the network service managers say",
    "start": "1593029",
    "end": "1598570"
  },
  {
    "text": "what you discover is there is actually a data plane next to the network service client and a little yellow teal diamond",
    "start": "1598570",
    "end": "1606169"
  },
  {
    "text": "that is the cross connect that takes you to a remote connection now this is the same literally the same remote",
    "start": "1606169",
    "end": "1611960"
  },
  {
    "text": "connection object on both sides and then a data plane that cross connects that to the local connection for the network",
    "start": "1611960",
    "end": "1617299"
  },
  {
    "text": "service endpoint now again I promised you cartoons how many people like cartoons everyone likes cartoons cool so",
    "start": "1617299",
    "end": "1627200"
  },
  {
    "text": "imagine that we have a happy packet all of my packets are happy it starts at the",
    "start": "1627200",
    "end": "1632960"
  },
  {
    "text": "network service client maybe it's an Ethernet frame or an IP packet it goes into the data plane the data plane cross",
    "start": "1632960",
    "end": "1638899"
  },
  {
    "text": "connects the packet from the local connection to the remote connection where it probably picks up an encapsulation it goes through the",
    "start": "1638899",
    "end": "1647239"
  },
  {
    "text": "network it arrives on the other end of that remote connection where it gets D",
    "start": "1647239",
    "end": "1652309"
  },
  {
    "text": "capped by the data plane gets cross connected to the local connection to the network service endpoint and then it",
    "start": "1652309",
    "end": "1658519"
  },
  {
    "text": "arrives there so that's that's the extent of my critique skills I'm sorry",
    "start": "1658519",
    "end": "1665019"
  },
  {
    "text": "but it's a happy packet and of course this works the other direction as well",
    "start": "1665200",
    "end": "1672158"
  },
  {
    "text": "so these are the data the api's that we've talked about so far we've talked about how network services get",
    "start": "1672549",
    "end": "1678559"
  },
  {
    "text": "registered how they get requested and then how the network service manager talks to the data play now we're going",
    "start": "1678559",
    "end": "1686030"
  },
  {
    "text": "to talk about monitoring monitoring is fun so for all of these objects that we",
    "start": "1686030",
    "end": "1691340"
  },
  {
    "text": "talked about we have streaming G RPC api's that let us monitor them great so",
    "start": "1691340",
    "end": "1698990"
  },
  {
    "text": "in the monitoring so you can see that it has a initial state so we're going to",
    "start": "1698990",
    "end": "1704030"
  },
  {
    "text": "transfer initial status to what's going on we have an update and a delete and so the cross so the monitor is a it will",
    "start": "1704030",
    "end": "1712490"
  },
  {
    "text": "effectively give you information about what type of cross connects that currently has and so this is",
    "start": "1712490",
    "end": "1718550"
  },
  {
    "text": "particularly useful because if you're if you're an NSF monitoring your data plane then you can ask it like maybe your NSF",
    "start": "1718550",
    "end": "1726350"
  },
  {
    "text": "dies and then it comes back up yes I give me the initial state transfer so now you know what the data plane knows and then you can then continue to get",
    "start": "1726350",
    "end": "1733850"
  },
  {
    "text": "updates in a very simple way and so we try to keep this as simple as possible and this API is also what we were able",
    "start": "1733850",
    "end": "1740720"
  },
  {
    "text": "to use in order to hook in things like sky dive to work out what was what is going on within within my network which",
    "start": "1740720",
    "end": "1746630"
  },
  {
    "text": "is what you saw if he came to the to the initial demo that's that's what drove the the UI that we have so you know I",
    "start": "1746630",
    "end": "1753860"
  },
  {
    "text": "mean effectively what it comes down to is your network service manager has a really strong interest in knowing what your data bling believes the state of",
    "start": "1753860",
    "end": "1759110"
  },
  {
    "text": "the world is with regard to cross connects because the network service manager doesn't actually touch packets and the monitor cross connect all lets",
    "start": "1759110",
    "end": "1765620"
  },
  {
    "text": "it know in real time what actual state is there in terms of cross connect state",
    "start": "1765620",
    "end": "1771910"
  },
  {
    "text": "so there's the second set of state you might care about is connections now most network service clients are kind of dumb",
    "start": "1771910",
    "end": "1777500"
  },
  {
    "text": "as a rock they're going to have it a NIC container that runs sets up their network service connections and then exits in the app runs so most clients",
    "start": "1777500",
    "end": "1784010"
  },
  {
    "text": "are not going to call monitor cross connect for their network and monitor connections for their network services but they could and we would tell them",
    "start": "1784010",
    "end": "1791330"
  },
  {
    "text": "the state of the connections that they have so if something goes wrong with the connection you know they get informed",
    "start": "1791330",
    "end": "1796870"
  },
  {
    "text": "and then for remote connections it actually gets to be super important because you've got to network service",
    "start": "1796870",
    "end": "1802850"
  },
  {
    "text": "managers they really really want to know the state of the connections that they have between each other remotely because",
    "start": "1802850",
    "end": "1809300"
  },
  {
    "text": "that actually lets them know the health of those connections and as we will see shortly we can do really cool",
    "start": "1809300",
    "end": "1814350"
  },
  {
    "text": "with that like Auto heal and then of",
    "start": "1814350",
    "end": "1821549"
  },
  {
    "text": "course when we get to the far end the network service manager can use exactly the same local connection monitor",
    "start": "1821549",
    "end": "1827580"
  },
  {
    "text": "connection API to see what its network service endpoint believes are the connections in their states so the",
    "start": "1827580",
    "end": "1836520"
  },
  {
    "text": "monitoring ends up looking like this and now we come to the harsh reality of life",
    "start": "1836520",
    "end": "1843860"
  },
  {
    "text": "pods die in fact pods are designed to die the entire point is that they're",
    "start": "1843860",
    "end": "1850409"
  },
  {
    "text": "disposable but it turns out that in network service mesh every bit of",
    "start": "1850409",
    "end": "1857340"
  },
  {
    "text": "important state in the system you share with your neighbors so the local",
    "start": "1857340",
    "end": "1863460"
  },
  {
    "text": "connections the cross connects the remote connections all of these things are being shared with your neighbors and in fact in the case of cross connects",
    "start": "1863460",
    "end": "1870000"
  },
  {
    "text": "you have information both on remote connections and local connections in those cross connects so if the network",
    "start": "1870000",
    "end": "1875370"
  },
  {
    "text": "service mesh manager dies it can relearn from its neighbors the state information not about what it scribbled out in some",
    "start": "1875370",
    "end": "1882150"
  },
  {
    "text": "database before it died in the whole world changed on it no no it can find out in real time exactly what's going on",
    "start": "1882150",
    "end": "1887820"
  },
  {
    "text": "in the world and reconstruct itself in Sapa start operating optimally again now",
    "start": "1887820",
    "end": "1894270"
  },
  {
    "text": "the other thing I'll mention is as Frederic mentioned the monitor cross connect is the same API be exposed north",
    "start": "1894270",
    "end": "1900150"
  },
  {
    "text": "from the network service manager to manager so things like sky dive can do monitoring in topology great so Auto",
    "start": "1900150",
    "end": "1908940"
  },
  {
    "text": "healing so I have a VPN gateway pod happy packets going through suddenly my",
    "start": "1908940",
    "end": "1914039"
  },
  {
    "text": "l2 l3 connection between my firewall and Gateway dies or the pod dies itself so",
    "start": "1914039",
    "end": "1919950"
  },
  {
    "text": "now we have unhappy packets or do II know we can actually reroute you",
    "start": "1919950",
    "end": "1925429"
  },
  {
    "text": "independently to the other VPN gateway but that's on there and without the firewall pod having to do anything it",
    "start": "1925429",
    "end": "1932190"
  },
  {
    "text": "doesn't have to be even aware that the VPN gateway pod went down yeah so keep in mind the local connection from that",
    "start": "1932190",
    "end": "1938039"
  },
  {
    "text": "firewall pod to the data plane is still good so all we have to do is update the cross connect to point to a different network service endpoint and everything",
    "start": "1938039",
    "end": "1945540"
  },
  {
    "text": "is good so what death of a network service end looks like a network service mesh is a breif network connectivity blip followed",
    "start": "1945540",
    "end": "1953340"
  },
  {
    "text": "by everything being okay okay again how",
    "start": "1953340",
    "end": "1959550"
  },
  {
    "text": "does what so here's the deal there are some things in the network service that",
    "start": "1959550",
    "end": "1964980"
  },
  {
    "text": "have state if you are stateful we have major life no worse my auto healing for",
    "start": "1964980",
    "end": "1971850"
  },
  {
    "text": "you right so you're absolutely safe all network services are kind of interesting particularly since one of the things we",
    "start": "1971850",
    "end": "1977100"
  },
  {
    "text": "don't have in the picture that we're mulling is the same thing that lets us auto heal also gives us mechanically the",
    "start": "1977100",
    "end": "1983250"
  },
  {
    "text": "ability to update the graph dynamically for existing clients if you change",
    "start": "1983250",
    "end": "1988560"
  },
  {
    "text": "policy now if I do that I very well may make things worse than what they are",
    "start": "1988560",
    "end": "1994530"
  },
  {
    "text": "right now so there's a question about what the wisdom is there but for auto heal you're never going to be worse off",
    "start": "1994530",
    "end": "2001179"
  },
  {
    "text": "so we're almost done so remember we talked about the three easy pieces so three easy pieces plus three",
    "start": "2001450",
    "end": "2007820"
  },
  {
    "text": "implementation details gives us six easy pieces right so these were the initial",
    "start": "2007820",
    "end": "2012890"
  },
  {
    "text": "three easy pieces network services network service endpoints l2 l3 connections then we added network",
    "start": "2012890",
    "end": "2020150"
  },
  {
    "text": "service managers cross connects and",
    "start": "2020150",
    "end": "2025360"
  },
  {
    "text": "monitoring but again it's very simple almost everything is just request close",
    "start": "2025360",
    "end": "2032120"
  },
  {
    "text": "and monitor so really quickly we're going to go very fast cuz we're almost out of time",
    "start": "2032120",
    "end": "2037420"
  },
  {
    "text": "2k eights and beyond so we talked about this abstract picture there's a reason I talked about the abstract picture and",
    "start": "2037420",
    "end": "2044510"
  },
  {
    "text": "it's because when we project out into kubernetes we can actually imagine a world where you have network service",
    "start": "2044510",
    "end": "2050240"
  },
  {
    "text": "managers that are external to kubernetes that are actually registering network service endpoints from the outside world",
    "start": "2050240",
    "end": "2055370"
  },
  {
    "text": "into your cluster and then your network service managers can in exactly the same way talk to them and get your cross",
    "start": "2055370",
    "end": "2060889"
  },
  {
    "text": "connects so you could imagine a next cluster a second cluster doing this so",
    "start": "2060890",
    "end": "2066530"
  },
  {
    "text": "now you've got cross cluster behavior for cross cloud you could imagine an en SM for an existing OpenStack or VMware",
    "start": "2066530",
    "end": "2072560"
  },
  {
    "text": "VIN you could even imagine getting network services from your physical network so proxy Network service",
    "start": "2072560",
    "end": "2082050"
  },
  {
    "text": "tn SMS so these are really dangerous people seriously they are the",
    "start": "2082050",
    "end": "2089220"
  },
  {
    "text": "light sabers of the NSM world they can cut through anything and if you are not strong in the force you will cut off",
    "start": "2089220",
    "end": "2095280"
  },
  {
    "text": "your damn arm so with great power comes great responsibility but it turns out that you can literally",
    "start": "2095280",
    "end": "2101580"
  },
  {
    "text": "put together a proxy network service manager that is pretending to have networks in service endpoints that it",
    "start": "2101580",
    "end": "2107130"
  },
  {
    "text": "does not have it has no network service in points but it advertises them say advertising one with app equals physical",
    "start": "2107130",
    "end": "2114480"
  },
  {
    "text": "hardware because you want some kind of fun thing to happen in your physical network and you can put in policies that",
    "start": "2114480",
    "end": "2120390"
  },
  {
    "text": "are basically hijack the request for your network service to your proxy your",
    "start": "2120390",
    "end": "2125760"
  },
  {
    "text": "proxy gets the remote network service connection requests it looks at it possibly munge as your physical network",
    "start": "2125760",
    "end": "2131460"
  },
  {
    "text": "possibly Munch's the request and it turns to someone who actually really does have an endpoint when the response",
    "start": "2131460",
    "end": "2137700"
  },
  {
    "text": "comes back it can possibly munge those parameters and you wind up with an l2 l3 cross connect here but in the middle you",
    "start": "2137700",
    "end": "2144600"
  },
  {
    "text": "may have changed your network you may have slightly changed the remote connection so for example if you're",
    "start": "2144600",
    "end": "2150180"
  },
  {
    "text": "doing SR v6 you may have added SIDS to the SID list to do traffic engineering all kinds of interesting things can be",
    "start": "2150180",
    "end": "2156540"
  },
  {
    "text": "done this way not all of them are a very good idea in fact a great many of them are terrible idea but some of them are",
    "start": "2156540",
    "end": "2162600"
  },
  {
    "text": "brilliant all right I think we are actually out of time so if folks want to",
    "start": "2162600",
    "end": "2167850"
  },
  {
    "text": "talk I will walk out of the hallway with everyone else and I would be happy to answer any all questions and I'm sure Fredrik would as well absolutely thank",
    "start": "2167850",
    "end": "2174090"
  },
  {
    "text": "you [Applause]",
    "start": "2174090",
    "end": "2177579"
  }
]