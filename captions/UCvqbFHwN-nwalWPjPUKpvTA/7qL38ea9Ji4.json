[
  {
    "start": "0",
    "end": "115000"
  },
  {
    "text": "hi everyone welcome to cubecon session",
    "start": "1199",
    "end": "3919"
  },
  {
    "text": "on grpc communication patterns",
    "start": "3919",
    "end": "6960"
  },
  {
    "text": "i'm custom industry and my colleague",
    "start": "6960",
    "end": "8800"
  },
  {
    "text": "danish group will also join me in",
    "start": "8800",
    "end": "10960"
  },
  {
    "text": "conducting this session so in this",
    "start": "10960",
    "end": "13120"
  },
  {
    "text": "session we are going to have a closer",
    "start": "13120",
    "end": "14639"
  },
  {
    "text": "look at",
    "start": "14639",
    "end": "15200"
  },
  {
    "text": "some of the most commonly used grpc",
    "start": "15200",
    "end": "17199"
  },
  {
    "text": "communication pattern",
    "start": "17199",
    "end": "18640"
  },
  {
    "text": "and we'll have a look at how they are",
    "start": "18640",
    "end": "20320"
  },
  {
    "text": "implemented internally",
    "start": "20320",
    "end": "23600"
  },
  {
    "text": "i'm sure most of you have heard of grpco",
    "start": "26640",
    "end": "29359"
  },
  {
    "text": "even",
    "start": "29359",
    "end": "30160"
  },
  {
    "text": "use vrpc in production but if you are",
    "start": "30160",
    "end": "32398"
  },
  {
    "text": "new to grpc",
    "start": "32399",
    "end": "34000"
  },
  {
    "text": "it's a modern inter-process",
    "start": "34000",
    "end": "35520"
  },
  {
    "text": "communication technology",
    "start": "35520",
    "end": "37440"
  },
  {
    "text": "that allows you to build distributed",
    "start": "37440",
    "end": "39680"
  },
  {
    "text": "applications",
    "start": "39680",
    "end": "40800"
  },
  {
    "text": "so that you can design a",
    "start": "40800",
    "end": "42879"
  },
  {
    "text": "microservices-based",
    "start": "42879",
    "end": "44000"
  },
  {
    "text": "application using grpc and remote",
    "start": "44000",
    "end": "47280"
  },
  {
    "text": "consumers can consume it over the",
    "start": "47280",
    "end": "50160"
  },
  {
    "text": "network",
    "start": "50160",
    "end": "51120"
  },
  {
    "text": "as easy as making a local function call",
    "start": "51120",
    "end": "54960"
  },
  {
    "text": "so grpc is based on a contract first",
    "start": "54960",
    "end": "58800"
  },
  {
    "text": "development approach where so that you",
    "start": "58800",
    "end": "61840"
  },
  {
    "text": "come up with your own service definition",
    "start": "61840",
    "end": "64640"
  },
  {
    "text": "using",
    "start": "64640",
    "end": "65760"
  },
  {
    "text": "protocol buffers so that's where you",
    "start": "65760",
    "end": "68080"
  },
  {
    "text": "define all your business operations of",
    "start": "68080",
    "end": "70560"
  },
  {
    "text": "your application and then you can",
    "start": "70560",
    "end": "72560"
  },
  {
    "text": "generate",
    "start": "72560",
    "end": "74000"
  },
  {
    "text": "server side and client side stop code",
    "start": "74000",
    "end": "77680"
  },
  {
    "text": "so that you uh you can",
    "start": "77680",
    "end": "80720"
  },
  {
    "text": "establish the communication over the",
    "start": "80720",
    "end": "82880"
  },
  {
    "text": "grpc channel",
    "start": "82880",
    "end": "85680"
  },
  {
    "text": "uh internally grpc uses binary messaging",
    "start": "85680",
    "end": "89040"
  },
  {
    "text": "using uh",
    "start": "89040",
    "end": "89920"
  },
  {
    "text": "protocol buffers and uh",
    "start": "89920",
    "end": "93119"
  },
  {
    "text": "which runs on top of http 2.",
    "start": "93119",
    "end": "96560"
  },
  {
    "text": "so grpc is an efficient strongly typed",
    "start": "96560",
    "end": "99360"
  },
  {
    "text": "polyglot",
    "start": "99360",
    "end": "100479"
  },
  {
    "text": "communication protocol that allows you",
    "start": "100479",
    "end": "103200"
  },
  {
    "text": "to build a request response style",
    "start": "103200",
    "end": "105280"
  },
  {
    "text": "synchronous communication as well as you",
    "start": "105280",
    "end": "107360"
  },
  {
    "text": "can use",
    "start": "107360",
    "end": "108079"
  },
  {
    "text": "duplex streaming use messaging in grpc",
    "start": "108079",
    "end": "112079"
  },
  {
    "text": "as well",
    "start": "112079",
    "end": "115360"
  },
  {
    "start": "115000",
    "end": "115000"
  },
  {
    "text": "so if you look at the applications of",
    "start": "115360",
    "end": "117040"
  },
  {
    "text": "jrpc so it is often used",
    "start": "117040",
    "end": "119600"
  },
  {
    "text": "alongside other technologies such as",
    "start": "119600",
    "end": "122159"
  },
  {
    "text": "restful services",
    "start": "122159",
    "end": "123439"
  },
  {
    "text": "uh graphql and even technology such as",
    "start": "123439",
    "end": "128000"
  },
  {
    "text": "nets on the event given communication",
    "start": "128000",
    "end": "130800"
  },
  {
    "text": "space",
    "start": "130800",
    "end": "132560"
  },
  {
    "text": "so most of the internal service",
    "start": "132560",
    "end": "134239"
  },
  {
    "text": "communication can be built using",
    "start": "134239",
    "end": "136560"
  },
  {
    "text": "uh grpc while uh it is most commonly",
    "start": "136560",
    "end": "140720"
  },
  {
    "text": "common to use rest and graphql as",
    "start": "140720",
    "end": "143760"
  },
  {
    "text": "external facing communication",
    "start": "143760",
    "end": "145840"
  },
  {
    "text": "uh however it is also possible to expose",
    "start": "145840",
    "end": "148640"
  },
  {
    "text": "the rpc service",
    "start": "148640",
    "end": "150480"
  },
  {
    "text": "to your consumers direct directory",
    "start": "150480",
    "end": "153599"
  },
  {
    "text": "using an api gateway",
    "start": "153599",
    "end": "157599"
  },
  {
    "start": "157000",
    "end": "157000"
  },
  {
    "text": "now let's have a closer look at the rpc",
    "start": "157599",
    "end": "160480"
  },
  {
    "text": "flow",
    "start": "160480",
    "end": "161120"
  },
  {
    "text": "of grpc so here we consider the same",
    "start": "161120",
    "end": "165360"
  },
  {
    "text": "uh application that we discussed earlier",
    "start": "165360",
    "end": "168319"
  },
  {
    "text": "so here we have the production for",
    "start": "168319",
    "end": "170000"
  },
  {
    "text": "service and the",
    "start": "170000",
    "end": "170959"
  },
  {
    "text": "consumer application so let's have a",
    "start": "170959",
    "end": "173920"
  },
  {
    "text": "closer look at how",
    "start": "173920",
    "end": "175680"
  },
  {
    "text": "messaging or remote method indication",
    "start": "175680",
    "end": "178879"
  },
  {
    "text": "works in this particular user so",
    "start": "178879",
    "end": "182000"
  },
  {
    "text": "now we have the stop code generated at",
    "start": "182000",
    "end": "184400"
  },
  {
    "text": "the client side and the server side",
    "start": "184400",
    "end": "186560"
  },
  {
    "text": "so from the client application i invoke",
    "start": "186560",
    "end": "189200"
  },
  {
    "text": "uh",
    "start": "189200",
    "end": "190000"
  },
  {
    "text": "the remote method uh in this case we",
    "start": "190000",
    "end": "193360"
  },
  {
    "text": "simply invoke the stubs get product",
    "start": "193360",
    "end": "196400"
  },
  {
    "text": "method",
    "start": "196400",
    "end": "197200"
  },
  {
    "text": "using my client application code and",
    "start": "197200",
    "end": "200080"
  },
  {
    "text": "when you invoke that",
    "start": "200080",
    "end": "201360"
  },
  {
    "text": "sub is responsible for converting that",
    "start": "201360",
    "end": "204959"
  },
  {
    "text": "message",
    "start": "204959",
    "end": "205519"
  },
  {
    "text": "in fact encode that message and build",
    "start": "205519",
    "end": "207840"
  },
  {
    "text": "the",
    "start": "207840",
    "end": "208799"
  },
  {
    "text": "outgoing uh protocol performance so in",
    "start": "208799",
    "end": "211519"
  },
  {
    "text": "this case we create",
    "start": "211519",
    "end": "212799"
  },
  {
    "text": "message headers to message pages uh",
    "start": "212799",
    "end": "216159"
  },
  {
    "text": "so obviously we are sending a course",
    "start": "216159",
    "end": "218159"
  },
  {
    "text": "request to the",
    "start": "218159",
    "end": "220480"
  },
  {
    "text": "service application and also as the path",
    "start": "220480",
    "end": "222959"
  },
  {
    "text": "we have",
    "start": "222959",
    "end": "224000"
  },
  {
    "text": "the name of the service and the remote",
    "start": "224000",
    "end": "226000"
  },
  {
    "text": "method that we need",
    "start": "226000",
    "end": "227280"
  },
  {
    "text": "and also we have things such as printing",
    "start": "227280",
    "end": "229120"
  },
  {
    "text": "type as part of the message headers",
    "start": "229120",
    "end": "231760"
  },
  {
    "text": "and as the message payload we have the",
    "start": "231760",
    "end": "234799"
  },
  {
    "text": "encoded message",
    "start": "234799",
    "end": "236159"
  },
  {
    "text": "so this is where we use protocol buffers",
    "start": "236159",
    "end": "239040"
  },
  {
    "text": "to encode",
    "start": "239040",
    "end": "241519"
  },
  {
    "text": "the language specific data structures",
    "start": "241519",
    "end": "243840"
  },
  {
    "text": "into the protocol buffer wireframe",
    "start": "243840",
    "end": "246799"
  },
  {
    "text": "then the message is sent over the http 2",
    "start": "246799",
    "end": "249200"
  },
  {
    "text": "connection",
    "start": "249200",
    "end": "250319"
  },
  {
    "text": "and and at the server side you can",
    "start": "250319",
    "end": "255040"
  },
  {
    "text": "the server application looks at the path",
    "start": "255040",
    "end": "258799"
  },
  {
    "text": "values and find the corresponding stop",
    "start": "258799",
    "end": "262240"
  },
  {
    "text": "then it is sent over to the",
    "start": "262240",
    "end": "264720"
  },
  {
    "text": "corresponding stub",
    "start": "264720",
    "end": "265840"
  },
  {
    "text": "and stop unpacks the message and",
    "start": "265840",
    "end": "268240"
  },
  {
    "text": "converts the message to the",
    "start": "268240",
    "end": "269919"
  },
  {
    "text": "language specific data structures and",
    "start": "269919",
    "end": "272240"
  },
  {
    "text": "invoke the actual implementation of the",
    "start": "272240",
    "end": "274639"
  },
  {
    "text": "remote function so in this case the",
    "start": "274639",
    "end": "277520"
  },
  {
    "text": "remote function is invoked",
    "start": "277520",
    "end": "279440"
  },
  {
    "text": "at this this point and then the response",
    "start": "279440",
    "end": "281600"
  },
  {
    "text": "is sent",
    "start": "281600",
    "end": "282479"
  },
  {
    "text": "back from the service drpg service",
    "start": "282479",
    "end": "285759"
  },
  {
    "text": "so this response follows the same path",
    "start": "285759",
    "end": "287759"
  },
  {
    "text": "as with the request",
    "start": "287759",
    "end": "290639"
  },
  {
    "text": "now if you look at uh how these things",
    "start": "290639",
    "end": "293120"
  },
  {
    "text": "are implemented",
    "start": "293120",
    "end": "294000"
  },
  {
    "text": "at the http 2 level so",
    "start": "294000",
    "end": "297280"
  },
  {
    "text": "uh suppose you have a consumer",
    "start": "297280",
    "end": "300800"
  },
  {
    "text": "client application and a server",
    "start": "300800",
    "end": "302240"
  },
  {
    "text": "application then",
    "start": "302240",
    "end": "304639"
  },
  {
    "text": "client creates http 2 connection uh",
    "start": "304639",
    "end": "307919"
  },
  {
    "text": "which means it creates a impact it",
    "start": "307919",
    "end": "310000"
  },
  {
    "text": "creates a grpc channel",
    "start": "310000",
    "end": "311840"
  },
  {
    "text": "uh so on behind the scenes it creates an",
    "start": "311840",
    "end": "315440"
  },
  {
    "text": "http 2 connection so once you have the",
    "start": "315440",
    "end": "318160"
  },
  {
    "text": "grpcs channel you can send",
    "start": "318160",
    "end": "320400"
  },
  {
    "text": "one or more rpc request over the same",
    "start": "320400",
    "end": "322800"
  },
  {
    "text": "channel",
    "start": "322800",
    "end": "323600"
  },
  {
    "text": "so in this case uh these different rpcs",
    "start": "323600",
    "end": "327759"
  },
  {
    "text": "are mapped to",
    "start": "327759",
    "end": "328880"
  },
  {
    "text": "rpc codes are mapped to streams in http",
    "start": "328880",
    "end": "331520"
  },
  {
    "text": "2 so here we have rpc4 and rpc3",
    "start": "331520",
    "end": "335039"
  },
  {
    "text": "rpc5 running on stream 3 and stream 4.",
    "start": "335039",
    "end": "338400"
  },
  {
    "text": "the same applies for the response path",
    "start": "338400",
    "end": "341520"
  },
  {
    "text": "as well",
    "start": "341520",
    "end": "342560"
  },
  {
    "text": "and when it comes to message frames here",
    "start": "342560",
    "end": "345600"
  },
  {
    "text": "we are sending headers and data frames",
    "start": "345600",
    "end": "347919"
  },
  {
    "text": "so it is this is where all the grpc",
    "start": "347919",
    "end": "351120"
  },
  {
    "text": "headers are sent and data",
    "start": "351120",
    "end": "354720"
  },
  {
    "text": "is the place that you send all the",
    "start": "354720",
    "end": "356720"
  },
  {
    "text": "business specific",
    "start": "356720",
    "end": "358000"
  },
  {
    "text": "payload of the rpc request",
    "start": "358000",
    "end": "362080"
  },
  {
    "text": "now uh let's have a closer look at",
    "start": "362160",
    "end": "364720"
  },
  {
    "start": "363000",
    "end": "363000"
  },
  {
    "text": "request and response messages in prpc",
    "start": "364720",
    "end": "369280"
  },
  {
    "text": "so if you look at the rest request",
    "start": "369280",
    "end": "371440"
  },
  {
    "text": "message",
    "start": "371440",
    "end": "373039"
  },
  {
    "text": "here we have the request headers and",
    "start": "373039",
    "end": "377360"
  },
  {
    "text": "a frame a message frame known as length",
    "start": "377360",
    "end": "379919"
  },
  {
    "text": "prefix message so this is where",
    "start": "379919",
    "end": "381840"
  },
  {
    "text": "you send all your business payload",
    "start": "381840",
    "end": "385199"
  },
  {
    "text": "so this can be a single message or",
    "start": "385199",
    "end": "387840"
  },
  {
    "text": "multiple message",
    "start": "387840",
    "end": "388800"
  },
  {
    "text": "based on the message pattern that you",
    "start": "388800",
    "end": "390400"
  },
  {
    "text": "are going to use",
    "start": "390400",
    "end": "392400"
  },
  {
    "text": "and we will be exploring a lot on length",
    "start": "392400",
    "end": "395199"
  },
  {
    "text": "prefix message in upcoming slides",
    "start": "395199",
    "end": "397680"
  },
  {
    "text": "and at the end of the request you have",
    "start": "397680",
    "end": "399759"
  },
  {
    "text": "to send the end of stream class",
    "start": "399759",
    "end": "401840"
  },
  {
    "text": "so this is this is a another frame a",
    "start": "401840",
    "end": "405360"
  },
  {
    "text": "data frame similar to bench prefix",
    "start": "405360",
    "end": "407120"
  },
  {
    "text": "message but",
    "start": "407120",
    "end": "407759"
  },
  {
    "text": "it's an empty frame so that marks the",
    "start": "407759",
    "end": "411120"
  },
  {
    "text": "end of the",
    "start": "411120",
    "end": "411840"
  },
  {
    "text": "request the request flow",
    "start": "411840",
    "end": "415039"
  },
  {
    "text": "and if you look at the response message",
    "start": "415039",
    "end": "417360"
  },
  {
    "text": "you have the response headers",
    "start": "417360",
    "end": "418960"
  },
  {
    "text": "and length prefix message again same",
    "start": "418960",
    "end": "422000"
  },
  {
    "text": "same as the request path and to mark the",
    "start": "422000",
    "end": "425440"
  },
  {
    "text": "end of the response message we use",
    "start": "425440",
    "end": "429120"
  },
  {
    "text": "we use trailing header so unlike the",
    "start": "429120",
    "end": "432319"
  },
  {
    "text": "request path here we use a",
    "start": "432319",
    "end": "434160"
  },
  {
    "text": "header frame this contains all the",
    "start": "434160",
    "end": "437919"
  },
  {
    "text": "trailing headers which mark the end of",
    "start": "437919",
    "end": "439840"
  },
  {
    "text": "the string",
    "start": "439840",
    "end": "442319"
  },
  {
    "text": "now let's try to uh understand",
    "start": "442479",
    "end": "445840"
  },
  {
    "text": "some of the communication patterns and",
    "start": "445840",
    "end": "449440"
  },
  {
    "text": "dive into the internal implementation of",
    "start": "449440",
    "end": "452400"
  },
  {
    "text": "each and every pattern",
    "start": "452400",
    "end": "453599"
  },
  {
    "text": "so let's start off with the unary or",
    "start": "453599",
    "end": "455759"
  },
  {
    "text": "simple rpc",
    "start": "455759",
    "end": "457199"
  },
  {
    "text": "so as you know a simple rpc is all about",
    "start": "457199",
    "end": "459840"
  },
  {
    "text": "sending a single request to the",
    "start": "459840",
    "end": "462479"
  },
  {
    "text": "service and you expect a single response",
    "start": "462479",
    "end": "466319"
  },
  {
    "text": "from the service so if you look at the",
    "start": "466319",
    "end": "468400"
  },
  {
    "text": "implementation of this",
    "start": "468400",
    "end": "470080"
  },
  {
    "text": "so when clients in the single rpc call",
    "start": "470080",
    "end": "473120"
  },
  {
    "text": "it sends a set of headers",
    "start": "473120",
    "end": "476160"
  },
  {
    "text": "one length prefix message and end of",
    "start": "476160",
    "end": "478800"
  },
  {
    "text": "stream flag",
    "start": "478800",
    "end": "479919"
  },
  {
    "text": "an empty data frame and in the response",
    "start": "479919",
    "end": "483039"
  },
  {
    "text": "path you have headers",
    "start": "483039",
    "end": "484479"
  },
  {
    "text": "response headers a lm prefix message a",
    "start": "484479",
    "end": "487039"
  },
  {
    "text": "single message",
    "start": "487039",
    "end": "488400"
  },
  {
    "text": "and trailing header so this is very",
    "start": "488400",
    "end": "490879"
  },
  {
    "text": "straightforward",
    "start": "490879",
    "end": "493039"
  },
  {
    "text": "now if you look at server streaming",
    "start": "493039",
    "end": "495520"
  },
  {
    "start": "494000",
    "end": "494000"
  },
  {
    "text": "scenario",
    "start": "495520",
    "end": "496639"
  },
  {
    "text": "so here we have a single request one rpc",
    "start": "496639",
    "end": "500479"
  },
  {
    "text": "location but you get multiple responses",
    "start": "500479",
    "end": "503520"
  },
  {
    "text": "as the",
    "start": "503520",
    "end": "504800"
  },
  {
    "text": "multiple messages as the response",
    "start": "504800",
    "end": "507919"
  },
  {
    "text": "so in this case request path is very",
    "start": "507919",
    "end": "510000"
  },
  {
    "text": "similar to simple accuracy",
    "start": "510000",
    "end": "511759"
  },
  {
    "text": "but in the response part you can see we",
    "start": "511759",
    "end": "514719"
  },
  {
    "text": "are sending",
    "start": "514719",
    "end": "515360"
  },
  {
    "text": "headers uh and multiple length prefix",
    "start": "515360",
    "end": "518159"
  },
  {
    "text": "messages",
    "start": "518159",
    "end": "518959"
  },
  {
    "text": "followed by a trailing uh trailing",
    "start": "518959",
    "end": "522080"
  },
  {
    "text": "header",
    "start": "522080",
    "end": "524479"
  },
  {
    "text": "in the client streaming it's the same",
    "start": "524480",
    "end": "526720"
  },
  {
    "start": "525000",
    "end": "525000"
  },
  {
    "text": "thing but in this case uh",
    "start": "526720",
    "end": "529120"
  },
  {
    "text": "request as as part of the request we are",
    "start": "529120",
    "end": "531760"
  },
  {
    "text": "sending",
    "start": "531760",
    "end": "532959"
  },
  {
    "text": "multiple request messages therefore we",
    "start": "532959",
    "end": "536240"
  },
  {
    "text": "have multiple links messages followed by",
    "start": "536240",
    "end": "538880"
  },
  {
    "text": "your",
    "start": "538880",
    "end": "539279"
  },
  {
    "text": "industry and as a response you get a",
    "start": "539279",
    "end": "542480"
  },
  {
    "text": "single length message with headers and",
    "start": "542480",
    "end": "546800"
  },
  {
    "text": "credit",
    "start": "546839",
    "end": "548000"
  },
  {
    "text": "and if you look at a more complicated",
    "start": "548000",
    "end": "551200"
  },
  {
    "text": "scenario such as uh by that",
    "start": "551200",
    "end": "553040"
  },
  {
    "text": "bi-directional streaming rpc",
    "start": "553040",
    "end": "555360"
  },
  {
    "text": "so in this case uh in bi-direction and",
    "start": "555360",
    "end": "557920"
  },
  {
    "text": "rpc we send",
    "start": "557920",
    "end": "559680"
  },
  {
    "text": "a stream of request and stream of",
    "start": "559680",
    "end": "562080"
  },
  {
    "text": "responses",
    "start": "562080",
    "end": "563040"
  },
  {
    "text": "so you can understand this further by",
    "start": "563040",
    "end": "565040"
  },
  {
    "text": "looking at this example here we are",
    "start": "565040",
    "end": "566720"
  },
  {
    "text": "sending",
    "start": "566720",
    "end": "567680"
  },
  {
    "text": "a series of order requests to process to",
    "start": "567680",
    "end": "570720"
  },
  {
    "text": "be processed by the service",
    "start": "570720",
    "end": "572160"
  },
  {
    "text": "and once those orders are processed",
    "start": "572160",
    "end": "575360"
  },
  {
    "text": "server send service sends back a stream",
    "start": "575360",
    "end": "578640"
  },
  {
    "text": "of shipments",
    "start": "578640",
    "end": "580640"
  },
  {
    "text": "so if you look at the implementation of",
    "start": "580640",
    "end": "582640"
  },
  {
    "text": "this again",
    "start": "582640",
    "end": "583920"
  },
  {
    "text": "you can see there are uh there are",
    "start": "583920",
    "end": "586399"
  },
  {
    "text": "multiple length messages",
    "start": "586399",
    "end": "589600"
  },
  {
    "text": "you have header and end of string and in",
    "start": "589600",
    "end": "592000"
  },
  {
    "text": "the response path also you can",
    "start": "592000",
    "end": "594160"
  },
  {
    "text": "dehydrate some multiple means prefix",
    "start": "594160",
    "end": "596560"
  },
  {
    "text": "message",
    "start": "596560",
    "end": "597680"
  },
  {
    "text": "and when it comes to the implementation",
    "start": "597680",
    "end": "599920"
  },
  {
    "text": "of both client and the service",
    "start": "599920",
    "end": "602079"
  },
  {
    "text": "side you can look you can create your",
    "start": "602079",
    "end": "605279"
  },
  {
    "text": "business project",
    "start": "605279",
    "end": "606240"
  },
  {
    "text": "uh by looking at the end of stream flags",
    "start": "606240",
    "end": "608880"
  },
  {
    "text": "uh",
    "start": "608880",
    "end": "609279"
  },
  {
    "text": "in both request uh part and the response",
    "start": "609279",
    "end": "612240"
  },
  {
    "text": "form",
    "start": "612240",
    "end": "614480"
  },
  {
    "text": "now uh let's dive deep into request and",
    "start": "615440",
    "end": "619279"
  },
  {
    "text": "response headers",
    "start": "619279",
    "end": "620480"
  },
  {
    "text": "and danish will take you through the",
    "start": "620480",
    "end": "622959"
  },
  {
    "text": "rest of the session",
    "start": "622959",
    "end": "632160"
  },
  {
    "start": "632000",
    "end": "632000"
  },
  {
    "text": "thank you uh so uh in our previous",
    "start": "632160",
    "end": "635040"
  },
  {
    "text": "slides",
    "start": "635040",
    "end": "635680"
  },
  {
    "text": "we talked about how message flow in",
    "start": "635680",
    "end": "637760"
  },
  {
    "text": "different messaging patterns",
    "start": "637760",
    "end": "639920"
  },
  {
    "text": "uh in this section we are going to look",
    "start": "639920",
    "end": "642480"
  },
  {
    "text": "uh into",
    "start": "642480",
    "end": "643680"
  },
  {
    "text": "deep into the request and response",
    "start": "643680",
    "end": "646240"
  },
  {
    "text": "messages",
    "start": "646240",
    "end": "647839"
  },
  {
    "text": "first let's look at headers so when we",
    "start": "647839",
    "end": "650959"
  },
  {
    "text": "talk about headers",
    "start": "650959",
    "end": "652079"
  },
  {
    "text": "uh in grpc there are two types of",
    "start": "652079",
    "end": "654320"
  },
  {
    "text": "headers",
    "start": "654320",
    "end": "655200"
  },
  {
    "text": "uh one is uh call definition address",
    "start": "655200",
    "end": "659600"
  },
  {
    "text": "uh called definition headers and the",
    "start": "659600",
    "end": "662399"
  },
  {
    "text": "other type is",
    "start": "662399",
    "end": "663680"
  },
  {
    "text": "custom head metadata all definition",
    "start": "663680",
    "end": "666720"
  },
  {
    "text": "headers",
    "start": "666720",
    "end": "667360"
  },
  {
    "text": "are predefined headers supporters by",
    "start": "667360",
    "end": "669760"
  },
  {
    "text": "http 2.",
    "start": "669760",
    "end": "671279"
  },
  {
    "text": "if you look at the table uh there are a",
    "start": "671279",
    "end": "673920"
  },
  {
    "text": "bunch of",
    "start": "673920",
    "end": "674560"
  },
  {
    "text": "called definition headers uh some are",
    "start": "674560",
    "end": "677839"
  },
  {
    "text": "prefixed with",
    "start": "677839",
    "end": "678800"
  },
  {
    "text": "same column so those are called reserved",
    "start": "678800",
    "end": "682240"
  },
  {
    "text": "headers",
    "start": "682240",
    "end": "683360"
  },
  {
    "text": "uh so one of those headers are one is",
    "start": "683360",
    "end": "686640"
  },
  {
    "text": "method",
    "start": "686640",
    "end": "687440"
  },
  {
    "text": "so in grpc the http method always post",
    "start": "687440",
    "end": "691279"
  },
  {
    "text": "and the other one is part that contains",
    "start": "691279",
    "end": "694560"
  },
  {
    "text": "the service name",
    "start": "694560",
    "end": "695680"
  },
  {
    "text": "and this remote method and there are",
    "start": "695680",
    "end": "698480"
  },
  {
    "text": "some others like",
    "start": "698480",
    "end": "700000"
  },
  {
    "text": "authorizations and schemes as well",
    "start": "700000",
    "end": "703120"
  },
  {
    "text": "uh and the other type of headers are",
    "start": "703120",
    "end": "706480"
  },
  {
    "text": "custom metadata custom metadata is an",
    "start": "706480",
    "end": "710399"
  },
  {
    "text": "arbitrary",
    "start": "710399",
    "end": "711279"
  },
  {
    "text": "key value pass which is defined by the",
    "start": "711279",
    "end": "714079"
  },
  {
    "text": "application label",
    "start": "714079",
    "end": "715839"
  },
  {
    "text": "there so metadata",
    "start": "715839",
    "end": "718880"
  },
  {
    "text": "we use metadata normally to share",
    "start": "718880",
    "end": "721200"
  },
  {
    "text": "informations about grpc",
    "start": "721200",
    "end": "723120"
  },
  {
    "text": "call for example authentic",
    "start": "723120",
    "end": "727040"
  },
  {
    "text": "authentication headers etc so",
    "start": "727040",
    "end": "730240"
  },
  {
    "text": "you can see there are a couple of",
    "start": "730240",
    "end": "731839"
  },
  {
    "text": "headers which are prefixed using grpc",
    "start": "731839",
    "end": "735200"
  },
  {
    "text": "hyphen uh that is uh",
    "start": "735200",
    "end": "739040"
  },
  {
    "text": "those headers are defined in grpc core",
    "start": "739040",
    "end": "741600"
  },
  {
    "text": "implementation",
    "start": "741600",
    "end": "743120"
  },
  {
    "text": "so your pc timeout your pc encoders are",
    "start": "743120",
    "end": "747120"
  },
  {
    "text": "such",
    "start": "747120",
    "end": "747519"
  },
  {
    "text": "those headers and so if you are defining",
    "start": "747519",
    "end": "751519"
  },
  {
    "text": "custom headers we",
    "start": "751519",
    "end": "752800"
  },
  {
    "text": "you need to avoid this prefix in your",
    "start": "752800",
    "end": "755440"
  },
  {
    "text": "custom metadata",
    "start": "755440",
    "end": "757440"
  },
  {
    "text": "and also in the content type uh we need",
    "start": "757440",
    "end": "760240"
  },
  {
    "text": "to file",
    "start": "760240",
    "end": "760880"
  },
  {
    "text": "the prefix application slash grpc",
    "start": "760880",
    "end": "764000"
  },
  {
    "text": "if it is not been given error",
    "start": "764000",
    "end": "767920"
  },
  {
    "start": "768000",
    "end": "768000"
  },
  {
    "text": "the next thing we need to talk about is",
    "start": "768399",
    "end": "771839"
  },
  {
    "text": "blend prefix messages",
    "start": "771839",
    "end": "774079"
  },
  {
    "text": "by definition message framing is an",
    "start": "774079",
    "end": "776959"
  },
  {
    "text": "approach",
    "start": "776959",
    "end": "778480"
  },
  {
    "text": "we use to construct information such",
    "start": "778480",
    "end": "780800"
  },
  {
    "text": "that the intended audience can easily",
    "start": "780800",
    "end": "783440"
  },
  {
    "text": "extract that",
    "start": "783440",
    "end": "784720"
  },
  {
    "text": "so in grpc we uses a message framing",
    "start": "784720",
    "end": "788399"
  },
  {
    "text": "technique called",
    "start": "788399",
    "end": "789440"
  },
  {
    "text": "length prefix frame length prefix",
    "start": "789440",
    "end": "792480"
  },
  {
    "text": "framing",
    "start": "792480",
    "end": "793279"
  },
  {
    "text": "is an approach we that writes a size of",
    "start": "793279",
    "end": "796880"
  },
  {
    "text": "the message",
    "start": "796880",
    "end": "798480"
  },
  {
    "text": "before writing the message itself if you",
    "start": "798480",
    "end": "801360"
  },
  {
    "text": "look at the diagram we",
    "start": "801360",
    "end": "803040"
  },
  {
    "text": "show in right side so you we are",
    "start": "803040",
    "end": "805760"
  },
  {
    "text": "generating",
    "start": "805760",
    "end": "806639"
  },
  {
    "text": "the encoded byte array uh that",
    "start": "806639",
    "end": "809839"
  },
  {
    "text": "and we are compute the size of it and in",
    "start": "809839",
    "end": "812800"
  },
  {
    "text": "these four bytes",
    "start": "812800",
    "end": "815200"
  },
  {
    "text": "we append the size of that so in grpc",
    "start": "815200",
    "end": "818880"
  },
  {
    "text": "uh four bytes are allocated to set the",
    "start": "818880",
    "end": "821600"
  },
  {
    "text": "size of the message",
    "start": "821600",
    "end": "823199"
  },
  {
    "text": "and the size is written as big indian",
    "start": "823199",
    "end": "826480"
  },
  {
    "text": "integer so and also you can see",
    "start": "826480",
    "end": "829519"
  },
  {
    "text": "one byte in front of that size",
    "start": "829519",
    "end": "833040"
  },
  {
    "text": "four bytes that represent the",
    "start": "833040",
    "end": "835360"
  },
  {
    "text": "compression frag",
    "start": "835360",
    "end": "836880"
  },
  {
    "text": "so if it is zero that means this message",
    "start": "836880",
    "end": "839600"
  },
  {
    "text": "is not compressed",
    "start": "839600",
    "end": "841199"
  },
  {
    "text": "if it is one that means this method is",
    "start": "841199",
    "end": "843760"
  },
  {
    "text": "compressed",
    "start": "843760",
    "end": "844959"
  },
  {
    "text": "the compression uh algorithm is defined",
    "start": "844959",
    "end": "848240"
  },
  {
    "text": "uh",
    "start": "848240",
    "end": "848959"
  },
  {
    "text": "defined and passed in the uh request",
    "start": "848959",
    "end": "851920"
  },
  {
    "text": "message",
    "start": "851920",
    "end": "852320"
  },
  {
    "text": "request headers so",
    "start": "852320",
    "end": "856800"
  },
  {
    "text": "the other thing i need we need to talk",
    "start": "856800",
    "end": "859279"
  },
  {
    "start": "857000",
    "end": "857000"
  },
  {
    "text": "about is that how we and how grpc",
    "start": "859279",
    "end": "862160"
  },
  {
    "text": "encode binary message by default the rpg",
    "start": "862160",
    "end": "865600"
  },
  {
    "text": "uses protocol buffers to encode this",
    "start": "865600",
    "end": "868000"
  },
  {
    "text": "message",
    "start": "868000",
    "end": "869839"
  },
  {
    "text": "the protocol buffer encodes the message",
    "start": "869839",
    "end": "872480"
  },
  {
    "text": "based on the structures defined in this",
    "start": "872480",
    "end": "875279"
  },
  {
    "text": "service country so if you look at the",
    "start": "875279",
    "end": "878320"
  },
  {
    "text": "look at the definition so you can see uh",
    "start": "878320",
    "end": "882320"
  },
  {
    "text": "you can see a proto protocol definition",
    "start": "882320",
    "end": "885040"
  },
  {
    "text": "so in our example we have order id",
    "start": "885040",
    "end": "888079"
  },
  {
    "text": "message and it has one field called",
    "start": "888079",
    "end": "891680"
  },
  {
    "text": "id and from that message",
    "start": "891680",
    "end": "895360"
  },
  {
    "text": "uh we are there generating the binary",
    "start": "895360",
    "end": "898480"
  },
  {
    "text": "uh message binary so if you extract the",
    "start": "898480",
    "end": "901279"
  },
  {
    "text": "binary you can see there are",
    "start": "901279",
    "end": "903120"
  },
  {
    "text": "different type values a tag value passed",
    "start": "903120",
    "end": "906880"
  },
  {
    "text": "so in our case we have one order message",
    "start": "906880",
    "end": "910079"
  },
  {
    "text": "with one field",
    "start": "910079",
    "end": "911440"
  },
  {
    "text": "that means we have only one",
    "start": "911440",
    "end": "914480"
  },
  {
    "text": "tag value there so the tag value pair",
    "start": "914480",
    "end": "918320"
  },
  {
    "text": "is mapped to a message fee so at the end",
    "start": "918320",
    "end": "921360"
  },
  {
    "text": "of the message",
    "start": "921360",
    "end": "922320"
  },
  {
    "text": "we pass zero to indicate that",
    "start": "922320",
    "end": "925760"
  },
  {
    "text": "it's the end of the message so uh",
    "start": "925760",
    "end": "928800"
  },
  {
    "text": "when we go in deep to the tag and value",
    "start": "928800",
    "end": "931680"
  },
  {
    "text": "pair",
    "start": "931680",
    "end": "932480"
  },
  {
    "text": "so the tag is derived using uh",
    "start": "932480",
    "end": "935519"
  },
  {
    "text": "field index which is defined in the",
    "start": "935519",
    "end": "937600"
  },
  {
    "text": "service contract",
    "start": "937600",
    "end": "939360"
  },
  {
    "text": "and the wire type the wire type is",
    "start": "939360",
    "end": "942240"
  },
  {
    "text": "directly mapped to the field type",
    "start": "942240",
    "end": "944880"
  },
  {
    "text": "so in our case uh it is a string type",
    "start": "944880",
    "end": "949360"
  },
  {
    "text": "that uh the string like mapped to length",
    "start": "949360",
    "end": "952839"
  },
  {
    "text": "delimited that means the wire type",
    "start": "952839",
    "end": "956079"
  },
  {
    "text": "uh value is 2 so",
    "start": "956079",
    "end": "959440"
  },
  {
    "text": "from that we derive the tag value and",
    "start": "959440",
    "end": "962639"
  },
  {
    "text": "the value of the field is encoded using",
    "start": "962639",
    "end": "966399"
  },
  {
    "text": "different technique based on the wire",
    "start": "966399",
    "end": "968240"
  },
  {
    "text": "type",
    "start": "968240",
    "end": "970240"
  },
  {
    "text": "in this case it is string that means we",
    "start": "970240",
    "end": "972720"
  },
  {
    "text": "are using",
    "start": "972720",
    "end": "973759"
  },
  {
    "text": "upf 8 encoding to encode the value",
    "start": "973759",
    "end": "977600"
  },
  {
    "text": "if it is an integer then we may use",
    "start": "977600",
    "end": "980240"
  },
  {
    "text": "point",
    "start": "980240",
    "end": "981440"
  },
  {
    "text": "it depending on the type actually",
    "start": "981440",
    "end": "984880"
  },
  {
    "text": "uh the next major thing we need to talk",
    "start": "984880",
    "end": "988160"
  },
  {
    "start": "985000",
    "end": "985000"
  },
  {
    "text": "about when it comes to grpc is error",
    "start": "988160",
    "end": "990560"
  },
  {
    "text": "handling",
    "start": "990560",
    "end": "991680"
  },
  {
    "text": "so it is a first class concept in grpc",
    "start": "991680",
    "end": "995279"
  },
  {
    "text": "that means every rpc call",
    "start": "995279",
    "end": "999759"
  },
  {
    "text": "the response will be either payload",
    "start": "999759",
    "end": "1002240"
  },
  {
    "text": "message",
    "start": "1002240",
    "end": "1002880"
  },
  {
    "text": "or an error the error includes",
    "start": "1002880",
    "end": "1006399"
  },
  {
    "text": "a status code which is predefined and it",
    "start": "1006399",
    "end": "1010000"
  },
  {
    "text": "is unified across all languages",
    "start": "1010000",
    "end": "1012560"
  },
  {
    "text": "and also we they pass us status message",
    "start": "1012560",
    "end": "1015920"
  },
  {
    "text": "we describe the error",
    "start": "1015920",
    "end": "1018079"
  },
  {
    "text": "and also these errors are sent",
    "start": "1018079",
    "end": "1021360"
  },
  {
    "text": "as a response trailing headers so i",
    "start": "1021360",
    "end": "1025760"
  },
  {
    "text": "capture uh in the first table we i",
    "start": "1025760",
    "end": "1028798"
  },
  {
    "text": "capture those",
    "start": "1028799",
    "end": "1030240"
  },
  {
    "text": "two headers comes in the trailing as",
    "start": "1030240",
    "end": "1032319"
  },
  {
    "text": "trailing headers",
    "start": "1032319",
    "end": "1033520"
  },
  {
    "text": "one is the rpg status another one is",
    "start": "1033520",
    "end": "1036240"
  },
  {
    "text": "trpc message",
    "start": "1036240",
    "end": "1038160"
  },
  {
    "text": "india uh so let's say uh the request",
    "start": "1038160",
    "end": "1041760"
  },
  {
    "text": "computed successfully in that case the",
    "start": "1041760",
    "end": "1044640"
  },
  {
    "text": "grpc status will be zero that means okay",
    "start": "1044640",
    "end": "1048319"
  },
  {
    "text": "uh if it is an error popped up",
    "start": "1048319",
    "end": "1051520"
  },
  {
    "text": "in the service side uh the corresponding",
    "start": "1051520",
    "end": "1055440"
  },
  {
    "text": "error",
    "start": "1055440",
    "end": "1056400"
  },
  {
    "text": "is going as the grpc status and grpc",
    "start": "1056400",
    "end": "1060240"
  },
  {
    "text": "message describe",
    "start": "1060240",
    "end": "1061280"
  },
  {
    "text": "what's the error this is",
    "start": "1061280",
    "end": "1064640"
  },
  {
    "text": "so when it comes to error handling uh",
    "start": "1064640",
    "end": "1067280"
  },
  {
    "text": "there are a couple of uh",
    "start": "1067280",
    "end": "1069600"
  },
  {
    "text": "best practices we follow uh the first",
    "start": "1069600",
    "end": "1072160"
  },
  {
    "text": "one is we do not include",
    "start": "1072160",
    "end": "1074000"
  },
  {
    "text": "error details in the response payload in",
    "start": "1074000",
    "end": "1077120"
  },
  {
    "text": "most cases",
    "start": "1077120",
    "end": "1079200"
  },
  {
    "text": "uh so that means",
    "start": "1079200",
    "end": "1082320"
  },
  {
    "text": "all the error details are always going",
    "start": "1082320",
    "end": "1085120"
  },
  {
    "text": "through the training",
    "start": "1085120",
    "end": "1086160"
  },
  {
    "text": "headers there are some of the situation",
    "start": "1086160",
    "end": "1088880"
  },
  {
    "text": "we",
    "start": "1088880",
    "end": "1089360"
  },
  {
    "text": "cannot follow this uh let's say you are",
    "start": "1089360",
    "end": "1091760"
  },
  {
    "text": "using a streaming example",
    "start": "1091760",
    "end": "1093679"
  },
  {
    "text": "and you you need to pass an error detail",
    "start": "1093679",
    "end": "1096880"
  },
  {
    "text": "to the client",
    "start": "1096880",
    "end": "1098160"
  },
  {
    "text": "without uh without stopping the stream",
    "start": "1098160",
    "end": "1102559"
  },
  {
    "text": "in that case you need to add error",
    "start": "1102559",
    "end": "1105840"
  },
  {
    "text": "details",
    "start": "1105840",
    "end": "1106480"
  },
  {
    "text": "in the response pair otherwise most of",
    "start": "1106480",
    "end": "1109440"
  },
  {
    "text": "the cases you",
    "start": "1109440",
    "end": "1110400"
  },
  {
    "text": "can send the errors by the training",
    "start": "1110400",
    "end": "1113600"
  },
  {
    "text": "headers",
    "start": "1113600",
    "end": "1115200"
  },
  {
    "text": "uh the other thing is that server side",
    "start": "1115200",
    "end": "1118000"
  },
  {
    "text": "when we are",
    "start": "1118000",
    "end": "1118799"
  },
  {
    "text": "when we have an error it's better we can",
    "start": "1118799",
    "end": "1122320"
  },
  {
    "text": "return all the errors to the client",
    "start": "1122320",
    "end": "1125360"
  },
  {
    "text": "caller so unless there's the internal",
    "start": "1125360",
    "end": "1128240"
  },
  {
    "text": "state of compromise",
    "start": "1128240",
    "end": "1130400"
  },
  {
    "text": "in other cases we can ascend it to the",
    "start": "1130400",
    "end": "1132960"
  },
  {
    "text": "call most of the cases",
    "start": "1132960",
    "end": "1137840"
  },
  {
    "start": "1138000",
    "end": "1138000"
  },
  {
    "text": "uh the other thing i need to have",
    "start": "1138400",
    "end": "1140880"
  },
  {
    "text": "emphasize is the deadline",
    "start": "1140880",
    "end": "1142559"
  },
  {
    "text": "deadline allows both clients and",
    "start": "1142559",
    "end": "1144400"
  },
  {
    "text": "services to know",
    "start": "1144400",
    "end": "1146400"
  },
  {
    "text": "when to abort the operations the clients",
    "start": "1146400",
    "end": "1149120"
  },
  {
    "text": "are the one who initialized the call",
    "start": "1149120",
    "end": "1151679"
  },
  {
    "text": "uh that uh so once the initial",
    "start": "1151679",
    "end": "1154320"
  },
  {
    "text": "initialize",
    "start": "1154320",
    "end": "1155120"
  },
  {
    "text": "client is setting the deadlines so",
    "start": "1155120",
    "end": "1158240"
  },
  {
    "text": "deadlines uh is normally set as absolute",
    "start": "1158240",
    "end": "1161280"
  },
  {
    "text": "time",
    "start": "1161280",
    "end": "1161919"
  },
  {
    "text": "we specify the time which we are brought",
    "start": "1161919",
    "end": "1164160"
  },
  {
    "text": "the operations",
    "start": "1164160",
    "end": "1165520"
  },
  {
    "text": "so when when the client in initialize",
    "start": "1165520",
    "end": "1168240"
  },
  {
    "text": "the call",
    "start": "1168240",
    "end": "1169200"
  },
  {
    "text": "uh the deadline informations also go",
    "start": "1169200",
    "end": "1172400"
  },
  {
    "text": "inside uh inside the call inside the",
    "start": "1172400",
    "end": "1175360"
  },
  {
    "text": "request message as the header",
    "start": "1175360",
    "end": "1177760"
  },
  {
    "text": "and when it comes in come to the service",
    "start": "1177760",
    "end": "1180880"
  },
  {
    "text": "they first look at what is the deadline",
    "start": "1180880",
    "end": "1183440"
  },
  {
    "text": "param",
    "start": "1183440",
    "end": "1184559"
  },
  {
    "text": "uh the uh according to the deadline",
    "start": "1184559",
    "end": "1187919"
  },
  {
    "text": "param they decide whether to pursue the",
    "start": "1187919",
    "end": "1189840"
  },
  {
    "text": "operation or",
    "start": "1189840",
    "end": "1191200"
  },
  {
    "text": "it and send an error to the client",
    "start": "1191200",
    "end": "1194400"
  },
  {
    "text": "so if the server is calling another",
    "start": "1194400",
    "end": "1196320"
  },
  {
    "text": "service it's but",
    "start": "1196320",
    "end": "1197600"
  },
  {
    "text": "it's it's important to propagate those",
    "start": "1197600",
    "end": "1200400"
  },
  {
    "text": "deadline information to the other",
    "start": "1200400",
    "end": "1202159"
  },
  {
    "text": "services as",
    "start": "1202159",
    "end": "1204880"
  },
  {
    "start": "1205000",
    "end": "1205000"
  },
  {
    "text": "the interceptors are also a main point",
    "start": "1205760",
    "end": "1208640"
  },
  {
    "text": "in",
    "start": "1208640",
    "end": "1209120"
  },
  {
    "text": "grgrpc applications the mechanism is to",
    "start": "1209120",
    "end": "1212400"
  },
  {
    "text": "execute some common logic before and",
    "start": "1212400",
    "end": "1214720"
  },
  {
    "text": "after the execution",
    "start": "1214720",
    "end": "1216480"
  },
  {
    "text": "of the remote function we can apply it",
    "start": "1216480",
    "end": "1219520"
  },
  {
    "text": "both to the server and client side",
    "start": "1219520",
    "end": "1221840"
  },
  {
    "text": "and depending on the message pattern we",
    "start": "1221840",
    "end": "1224080"
  },
  {
    "text": "use we need to use",
    "start": "1224080",
    "end": "1225760"
  },
  {
    "text": "uh different interceptors like urinary",
    "start": "1225760",
    "end": "1228960"
  },
  {
    "text": "interceptors",
    "start": "1228960",
    "end": "1230799"
  },
  {
    "text": "streaming interceptors etc the useful",
    "start": "1230799",
    "end": "1234240"
  },
  {
    "text": "uh the main use of these interceptors",
    "start": "1234240",
    "end": "1237120"
  },
  {
    "text": "are",
    "start": "1237120",
    "end": "1238559"
  },
  {
    "text": "for the login scenarios and",
    "start": "1238559",
    "end": "1241919"
  },
  {
    "text": "authentication scenarios or we need to",
    "start": "1241919",
    "end": "1244240"
  },
  {
    "text": "capture some metrics",
    "start": "1244240",
    "end": "1246320"
  },
  {
    "text": "for those use cases we use interceptors",
    "start": "1246320",
    "end": "1251519"
  },
  {
    "start": "1251000",
    "end": "1251000"
  },
  {
    "text": "uh when we come to the evening from",
    "start": "1252159",
    "end": "1254799"
  },
  {
    "text": "implementing",
    "start": "1254799",
    "end": "1255760"
  },
  {
    "text": "services uh the service questioning also",
    "start": "1255760",
    "end": "1259120"
  },
  {
    "text": "plays an",
    "start": "1259120",
    "end": "1259679"
  },
  {
    "text": "important role so let's say you have",
    "start": "1259679",
    "end": "1262720"
  },
  {
    "text": "a service running and you need to uh",
    "start": "1262720",
    "end": "1266080"
  },
  {
    "text": "update the service so the service",
    "start": "1266080",
    "end": "1269360"
  },
  {
    "text": "the services should strive to remain",
    "start": "1269360",
    "end": "1271600"
  },
  {
    "text": "backward compatible with",
    "start": "1271600",
    "end": "1273280"
  },
  {
    "text": "the odd triad so",
    "start": "1273280",
    "end": "1276400"
  },
  {
    "text": "if we have a better versioning strategy",
    "start": "1276400",
    "end": "1278960"
  },
  {
    "text": "that will allow us to introduce breaking",
    "start": "1278960",
    "end": "1281200"
  },
  {
    "text": "changes",
    "start": "1281200",
    "end": "1282320"
  },
  {
    "text": "to the grpc service so in grpc",
    "start": "1282320",
    "end": "1286480"
  },
  {
    "text": "all these service version is",
    "start": "1286480",
    "end": "1289600"
  },
  {
    "text": "done you'll see in the package name so",
    "start": "1289600",
    "end": "1292000"
  },
  {
    "text": "we are appending the version number to",
    "start": "1292000",
    "end": "1293840"
  },
  {
    "text": "the package name",
    "start": "1293840",
    "end": "1295120"
  },
  {
    "text": "how it works is uh as we told earlier",
    "start": "1295120",
    "end": "1299200"
  },
  {
    "text": "uh grpc call is underneath a post",
    "start": "1299200",
    "end": "1302840"
  },
  {
    "text": "request and",
    "start": "1302840",
    "end": "1304159"
  },
  {
    "text": "the part of the part of the request is",
    "start": "1304159",
    "end": "1306720"
  },
  {
    "text": "derived using the package name",
    "start": "1306720",
    "end": "1308640"
  },
  {
    "text": "service name and the method name so",
    "start": "1308640",
    "end": "1311760"
  },
  {
    "text": "if you append the version to the package",
    "start": "1311760",
    "end": "1314000"
  },
  {
    "text": "name that means",
    "start": "1314000",
    "end": "1315679"
  },
  {
    "text": "whenever the version number change that",
    "start": "1315679",
    "end": "1318480"
  },
  {
    "text": "that will create a different",
    "start": "1318480",
    "end": "1320880"
  },
  {
    "text": "context so the all client will not",
    "start": "1320880",
    "end": "1324080"
  },
  {
    "text": "affect when we deploy both services in",
    "start": "1324080",
    "end": "1326720"
  },
  {
    "text": "this in the environment",
    "start": "1326720",
    "end": "1329440"
  },
  {
    "text": "so that if the client needs to",
    "start": "1329440",
    "end": "1333840"
  },
  {
    "text": "migrate to the new version they need to",
    "start": "1334480",
    "end": "1338799"
  },
  {
    "text": "get the correct version of the proto",
    "start": "1338799",
    "end": "1340480"
  },
  {
    "text": "definition and",
    "start": "1340480",
    "end": "1341840"
  },
  {
    "text": "generate the stuff of it",
    "start": "1341840",
    "end": "1345120"
  },
  {
    "text": "the final thing we need to discuss in",
    "start": "1345600",
    "end": "1348000"
  },
  {
    "text": "this session",
    "start": "1348000",
    "end": "1348640"
  },
  {
    "text": "is to extending service definition let's",
    "start": "1348640",
    "end": "1351440"
  },
  {
    "text": "say",
    "start": "1351440",
    "end": "1351760"
  },
  {
    "text": "uh there can be situation where we",
    "start": "1351760",
    "end": "1354159"
  },
  {
    "text": "generate",
    "start": "1354159",
    "end": "1354799"
  },
  {
    "text": "uh the application with different",
    "start": "1354799",
    "end": "1358240"
  },
  {
    "text": "messaging patterns you need to",
    "start": "1358240",
    "end": "1360080"
  },
  {
    "text": "extend your service definitions and add",
    "start": "1360080",
    "end": "1362640"
  },
  {
    "text": "some",
    "start": "1362640",
    "end": "1363600"
  },
  {
    "text": "custom options in protocol buffer",
    "start": "1363600",
    "end": "1366480"
  },
  {
    "text": "definition",
    "start": "1366480",
    "end": "1367520"
  },
  {
    "text": "they they provide us this facility to",
    "start": "1367520",
    "end": "1371120"
  },
  {
    "text": "add custom options in different levels",
    "start": "1371120",
    "end": "1373600"
  },
  {
    "text": "of contract",
    "start": "1373600",
    "end": "1374880"
  },
  {
    "text": "so it can be service level it can be",
    "start": "1374880",
    "end": "1377039"
  },
  {
    "text": "method level it can be",
    "start": "1377039",
    "end": "1378799"
  },
  {
    "text": "free levels etc so",
    "start": "1378799",
    "end": "1381840"
  },
  {
    "text": "so i captured a few of these scenarios",
    "start": "1381840",
    "end": "1386320"
  },
  {
    "text": "we may use it so if you talk about",
    "start": "1386320",
    "end": "1390000"
  },
  {
    "text": "one uh scenario so let's say we have a",
    "start": "1390000",
    "end": "1393039"
  },
  {
    "text": "service",
    "start": "1393039",
    "end": "1394000"
  },
  {
    "text": "and it's secured using uh external or",
    "start": "1394000",
    "end": "1397200"
  },
  {
    "text": "provider",
    "start": "1397200",
    "end": "1398080"
  },
  {
    "text": "so you need to pass this or provide the",
    "start": "1398080",
    "end": "1400400"
  },
  {
    "text": "url in the service contract itself",
    "start": "1400400",
    "end": "1404080"
  },
  {
    "text": "so there you can define the service",
    "start": "1404080",
    "end": "1406320"
  },
  {
    "text": "options",
    "start": "1406320",
    "end": "1407440"
  },
  {
    "text": "to provide the stream or provide the url",
    "start": "1407440",
    "end": "1410559"
  },
  {
    "text": "and we can use that uh of custom options",
    "start": "1410559",
    "end": "1413760"
  },
  {
    "text": "in my",
    "start": "1413760",
    "end": "1414240"
  },
  {
    "text": "inside our service definition uh",
    "start": "1414240",
    "end": "1417360"
  },
  {
    "text": "same likewise you can uh",
    "start": "1417360",
    "end": "1421120"
  },
  {
    "text": "add custom options inside a method level",
    "start": "1421120",
    "end": "1424880"
  },
  {
    "text": "and also in the field level as well",
    "start": "1424880",
    "end": "1429120"
  },
  {
    "text": "okay uh that's it we need to cover in",
    "start": "1429200",
    "end": "1432000"
  },
  {
    "text": "this session",
    "start": "1432000",
    "end": "1433039"
  },
  {
    "text": "so um in this session we mainly refers",
    "start": "1433039",
    "end": "1436720"
  },
  {
    "text": "to",
    "start": "1436720",
    "end": "1437200"
  },
  {
    "text": "the grpc often running book and all the",
    "start": "1437200",
    "end": "1440080"
  },
  {
    "text": "use cases",
    "start": "1440080",
    "end": "1440960"
  },
  {
    "text": "and the source codes are in this guitar",
    "start": "1440960",
    "end": "1444000"
  },
  {
    "text": "people",
    "start": "1444000",
    "end": "1445279"
  },
  {
    "text": "so that we need to cover",
    "start": "1445279",
    "end": "1449200"
  },
  {
    "text": "so thank you for listening",
    "start": "1449200",
    "end": "1454799"
  }
]