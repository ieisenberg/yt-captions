[
  {
    "text": "so hello again my name is uh David PE and I would like to talk about pogress",
    "start": "1959",
    "end": "8400"
  },
  {
    "text": "uh this is like my first virtual conference so I apologize I pretty much like to talk to the audience and see",
    "start": "8400",
    "end": "14799"
  },
  {
    "text": "some hands raised up which probably won't be the case but maybe uh just this question for you like internally a",
    "start": "14799",
    "end": "21119"
  },
  {
    "text": "rhetorical one uh who does run pogress who has any experience with it this is the first one who is able to run it in a",
    "start": "21119",
    "end": "28720"
  },
  {
    "text": "container this is the second one and the third one who is so brave enough to run it in the kubernetes this is maybe the",
    "start": "28720",
    "end": "35719"
  },
  {
    "text": "third one for me from the start so little about my background I am U like",
    "start": "35719",
    "end": "41680"
  },
  {
    "text": "20 years in the industry I guess I have a vast Java developer experience on the",
    "start": "41680",
    "end": "47680"
  },
  {
    "text": "what you would probably call Enterprise Legacy system uh working of course with",
    "start": "47680",
    "end": "53320"
  },
  {
    "text": "large databases etc etc uh but recently I've moved to the in infrastructure",
    "start": "53320",
    "end": "58359"
  },
  {
    "text": "field I've become a cube out so in case you don't know this particular icon this",
    "start": "58359",
    "end": "63840"
  },
  {
    "text": "means that I have passed some uh cncf exams and I do currently specialize in",
    "start": "63840",
    "end": "69920"
  },
  {
    "text": "kubernetes and a lot of other cncf let's say Technologies I do have a vast",
    "start": "69920",
    "end": "75680"
  },
  {
    "text": "foodprint in the Orco cloud and also on AWS uh so I have helped to move several",
    "start": "75680",
    "end": "81640"
  },
  {
    "text": "companies through on pram to either hybrid on fully on cloud so this is",
    "start": "81640",
    "end": "86880"
  },
  {
    "text": "let's say my Baseline and my experience what it comes from from so originally how did I like came",
    "start": "86880",
    "end": "94119"
  },
  {
    "text": "to litmos this is probably very interesting to uh to evaluate because",
    "start": "94119",
    "end": "99759"
  },
  {
    "text": "when you run Enterprise Java when you have something like an like heavyweight application jab server you do have an",
    "start": "99759",
    "end": "106119"
  },
  {
    "text": "oracle DB well you are not going there right uh like at all I mean uh then you",
    "start": "106119",
    "end": "112280"
  },
  {
    "text": "create your first container of course with a Docker file then you find that there are other containers that you can",
    "start": "112280",
    "end": "118520"
  },
  {
    "text": "talk to through some docker compos tooling uh and like I think four years",
    "start": "118520",
    "end": "124640"
  },
  {
    "text": "ago we started to run a production with the docker form I'm pretty sure that uh",
    "start": "124640",
    "end": "129679"
  },
  {
    "text": "a lot of you jumped straight into kubernetes but for example like four years ago when we decided if we are able",
    "start": "129679",
    "end": "136319"
  },
  {
    "text": "to do kubernetes or not we decided we are not there not we are far far away we",
    "start": "136319",
    "end": "142360"
  },
  {
    "text": "don't understand a lot of the details about observability about resiliency which I would like to point point out uh",
    "start": "142360",
    "end": "149239"
  },
  {
    "text": "so we started with a let's say much more lightweight orchestrator but eventually our customers pushed us a little bit uh",
    "start": "149239",
    "end": "156400"
  },
  {
    "text": "to the kubernetes and this is basically when I can see some benefits of U",
    "start": "156400",
    "end": "162080"
  },
  {
    "text": "engineering uh like resilience engineering or engineering with litmus",
    "start": "162080",
    "end": "167400"
  },
  {
    "text": "tooling something like this because uh up front I would say that we had of course some test and a lot of the people",
    "start": "167400",
    "end": "174360"
  },
  {
    "text": "talk about that let's say resiliency testing is some extension from the unit testing integrational testing this is",
    "start": "174360",
    "end": "181319"
  },
  {
    "text": "let's say some some newer level maybe higher level and definitely this works",
    "start": "181319",
    "end": "186720"
  },
  {
    "text": "for me in this direction so the docker swarm did not allow us to do it because",
    "start": "186720",
    "end": "192080"
  },
  {
    "text": "the the environment was not so eal as I would like but in the kubernetes we",
    "start": "192080",
    "end": "198120"
  },
  {
    "text": "started some small let's say experiments but mostly when you have a simple application typically like killing the",
    "start": "198120",
    "end": "204080"
  },
  {
    "text": "poort uh dropping the deployment and letting Argo CD or some other tooling recreate it is typically like I would",
    "start": "204080",
    "end": "211159"
  },
  {
    "text": "say enough for some basic understanding how your application behaves because for example if you have some like very easy",
    "start": "211159",
    "end": "218599"
  },
  {
    "text": "engine in front of you you have some application behind as a back end something like this typically it's kind",
    "start": "218599",
    "end": "224640"
  },
  {
    "text": "of easy to understand what will happen if you have an experience outside of containers right uh of course when you",
    "start": "224640",
    "end": "231159"
  },
  {
    "text": "have uh when you are going much much closer to the microservice architecture this gets tremendously different I would",
    "start": "231159",
    "end": "237760"
  },
  {
    "text": "say uh but typically it's not case and people like underestimated what could go wrong right we do run 10 Services",
    "start": "237760",
    "end": "246239"
  },
  {
    "text": "instead of only one previously what what should be different right but it is like",
    "start": "246239",
    "end": "252040"
  },
  {
    "text": "very different so in kubernetes ecosystem we have like discovered we need to at least to try to understand",
    "start": "252040",
    "end": "257720"
  },
  {
    "text": "better some fail patterns because this has happened in the production we did had some uh small outages when deploying",
    "start": "257720",
    "end": "264639"
  },
  {
    "text": "a newer version so we didn't quite understood some of the let's say kubernetes Primitives at the time",
    "start": "264639",
    "end": "270360"
  },
  {
    "text": "but uh let's say starting the end of this year we came fully to or dedicated ourselves fully to the kubernetes and",
    "start": "270360",
    "end": "277479"
  },
  {
    "text": "trying to experiment also with a state for workloads and this is what I'm talking about today because we uh would",
    "start": "277479",
    "end": "284680"
  },
  {
    "text": "like to run pogress and if you can uh if you know I",
    "start": "284680",
    "end": "290800"
  },
  {
    "text": "don't know if you you are familiar with the topic of running postgress database inside the kubernetes there are multiple",
    "start": "290800",
    "end": "297479"
  },
  {
    "text": "operators uh and of course you are trying to let's say guess which one of",
    "start": "297479",
    "end": "303759"
  },
  {
    "text": "them is better this is very difficult because the marketing of all the companies Works tremendously well uh",
    "start": "303759",
    "end": "309360"
  },
  {
    "text": "they all say okay you will have a bullet for pogress with us um nobody else is",
    "start": "309360",
    "end": "314960"
  },
  {
    "text": "doing the dispor so this is very hard to decide and basically what we want to do",
    "start": "314960",
    "end": "320080"
  },
  {
    "text": "with lmos was to verify that our mission critical component uh our database our",
    "start": "320080",
    "end": "325720"
  },
  {
    "text": "hard address system will be able to run let's sayic effciently and resiliently",
    "start": "325720",
    "end": "331800"
  },
  {
    "text": "we also do have some kind of Baseline meaning that we understand how pogress runs on the virtual machines like",
    "start": "331800",
    "end": "338520"
  },
  {
    "text": "traditional ones with the Petron tool the Petron tool is some kind of Highly available solutions that is around",
    "start": "338520",
    "end": "345280"
  },
  {
    "text": "postgress I will explain it in a minute but this is the way how you typically run postgress cluster so not only one",
    "start": "345280",
    "end": "351479"
  },
  {
    "text": "instance but multiple ones in the VM world let's say so there is like a very short what",
    "start": "351479",
    "end": "360199"
  },
  {
    "text": "the post operator should do for you uh so for example it should analize a blank",
    "start": "360199",
    "end": "365520"
  },
  {
    "text": "database uh but this is like not that easy if you understand that you have multiple instances of POG gr you have",
    "start": "365520",
    "end": "371440"
  },
  {
    "text": "one primary multiple replicas probably you would like to have the dynamic uh",
    "start": "371440",
    "end": "377599"
  },
  {
    "text": "number of replicas so you can add it or or remove It On Demand something like this so even this first use case is not",
    "start": "377599",
    "end": "384919"
  },
  {
    "text": "not that obvious at as maybe you would think of uh then we do have a secondary",
    "start": "384919",
    "end": "390639"
  },
  {
    "text": "use case that we would like to for example clone the productional database to use it on some uh user acceptance",
    "start": "390639",
    "end": "397199"
  },
  {
    "text": "environment and test it um or something similar um also like not that not that",
    "start": "397199",
    "end": "403720"
  },
  {
    "text": "easy uh with the traditional pogress because postgress itself maybe to explain does not allow many tool link",
    "start": "403720",
    "end": "409759"
  },
  {
    "text": "around it in its core that's why there is a Pon but also a lot of other vendors are trying to push through some of their",
    "start": "409759",
    "end": "416360"
  },
  {
    "text": "like Solutions um the list goes on and on but I would say that the postgress operator",
    "start": "416360",
    "end": "422759"
  },
  {
    "text": "should be even mature meaning Smart in the way how they for example upgrade the",
    "start": "422759",
    "end": "428039"
  },
  {
    "text": "cluster so I can give you maybe a very good example what is very annoying or was very annoying with the let's say",
    "start": "428039",
    "end": "434639"
  },
  {
    "text": "very ear implementations of The Operators meaning that if you would like to upgrade to the newest version of the",
    "start": "434639",
    "end": "440319"
  },
  {
    "text": "cluster this means that all your ports need to restart typically so you have a",
    "start": "440319",
    "end": "445560"
  },
  {
    "text": "primary you have sever replicas this means that when you restart the primary it will transfer the primary to some",
    "start": "445560",
    "end": "453000"
  },
  {
    "text": "other pot and if the pot is running the old version it will be restarted in a",
    "start": "453000",
    "end": "458960"
  },
  {
    "text": "few minutes again and there will be two switch overs instead of only one so for",
    "start": "458960",
    "end": "464840"
  },
  {
    "text": "example this is like a small use case but you can see that this is about the maturity of the operator and I have to",
    "start": "464840",
    "end": "471240"
  },
  {
    "text": "admit they are getting much better in it but they are maybe not there yet so what",
    "start": "471240",
    "end": "476440"
  },
  {
    "text": "should operator not do uh definitely it should not lose your data uh this is",
    "start": "476440",
    "end": "482639"
  },
  {
    "text": "much easier done we are not talking just about that the operator itself will like",
    "start": "482639",
    "end": "488560"
  },
  {
    "text": "lose uh all the data directory we are also talking about that for example when you switch the primary to some other pot",
    "start": "488560",
    "end": "496680"
  },
  {
    "text": "it should not lose anything or minimal amount of rights which is not that easy",
    "start": "496680",
    "end": "502360"
  },
  {
    "text": "of course there should be always some leader meaning that you are able to write through your progress and not run",
    "start": "502360",
    "end": "508120"
  },
  {
    "text": "only in the read mode etc etc etc so I do have two operators as an example the",
    "start": "508120",
    "end": "515599"
  },
  {
    "text": "first one is called post operator it is originally from the company called crunchy data uh this is a large Post",
    "start": "515599",
    "end": "522640"
  },
  {
    "text": "consultancy company so definitely this is a company that knows how to run pogress itself uh this is very mature",
    "start": "522640",
    "end": "529600"
  },
  {
    "text": "and proven solution that utilizes the Petron tool so you can see that this",
    "start": "529600",
    "end": "534640"
  },
  {
    "text": "Petron tool was also used in the VMS and they basically lift and shifted the",
    "start": "534640",
    "end": "539839"
  },
  {
    "text": "approach to the kubernetes I will explain in a bit uh it uses multiple stateful sets uh this is how the pods",
    "start": "539839",
    "end": "547240"
  },
  {
    "text": "are run and for the patron class let's say of operators this is definitely one of the best I would say so what is",
    "start": "547240",
    "end": "555399"
  },
  {
    "text": "Patron to explain uh this is the tool that is like a Python scripts that wraps",
    "start": "555399",
    "end": "562320"
  },
  {
    "text": "pogress and together with some distributed storage typically at CD but",
    "start": "562320",
    "end": "567480"
  },
  {
    "text": "there are also other options allow to run postgress in a cluster what does it mean you create an at CD cluster to have",
    "start": "567480",
    "end": "574920"
  },
  {
    "text": "like single point of through then you one by one create in our case pots but",
    "start": "574920",
    "end": "581920"
  },
  {
    "text": "originally it were VMS you create you or you start a patronic process or you",
    "start": "581920",
    "end": "587519"
  },
  {
    "text": "create patronic pot that will ask okay am I the first pot in the cluster should",
    "start": "587519",
    "end": "594600"
  },
  {
    "text": "I be master or should I be replica if I'm the replica where are the connections to the primary so I can",
    "start": "594600",
    "end": "601079"
  },
  {
    "text": "bootstrap from there Etc so basically what it does that inside a pot it runs",
    "start": "601079",
    "end": "606760"
  },
  {
    "text": "the python script as a main process and it spawns either bootstrapping which is",
    "start": "606760",
    "end": "612760"
  },
  {
    "text": "like PG based backup uh or some uh sorry",
    "start": "612760",
    "end": "618040"
  },
  {
    "text": "PG based backup yes but also other tools like postgress itself to run so when you",
    "start": "618040",
    "end": "624200"
  },
  {
    "text": "for example ask what is the status of this spot is this spot alive it is not",
    "start": "624200",
    "end": "629320"
  },
  {
    "text": "an easy answer because the python rep script my run my not uh the postgress",
    "start": "629320",
    "end": "636200"
  },
  {
    "text": "might be running might not be running so it is much more difficult to understand what it does uh if you would like to",
    "start": "636200",
    "end": "642959"
  },
  {
    "text": "control this the like typical way is to uh SSH inside the pot and do uh some",
    "start": "642959",
    "end": "651120"
  },
  {
    "text": "Patron CLI tooling over there so this is an example how you can switch the leader",
    "start": "651120",
    "end": "656680"
  },
  {
    "text": "meaning that you will switch primary to some other one also there is a lot of tooling just to understand in what",
    "start": "656680",
    "end": "662440"
  },
  {
    "text": "status your cluster is this is some schematics how the operator runs to",
    "start": "662440",
    "end": "669360"
  },
  {
    "text": "understand how we can experiment on it so there is a state for set like the kubernetes Primitive there are several",
    "start": "669360",
    "end": "675880"
  },
  {
    "text": "pots that are spawned by this stateful set there is the Petron python prepper",
    "start": "675880",
    "end": "681440"
  },
  {
    "text": "script that has a lot of tooling around and the postr itself is just some",
    "start": "681440",
    "end": "686560"
  },
  {
    "text": "process inside of the pot uh so as you can see like this is not very easy to",
    "start": "686560",
    "end": "692600"
  },
  {
    "text": "understand and I'm like very much simplifying because I'm not talking how the backup is done uh how other like for",
    "start": "692600",
    "end": "699519"
  },
  {
    "text": "example exporters work etc etc so let's say that the port is I would say heavy V",
    "start": "699519",
    "end": "706120"
  },
  {
    "text": "and um it is difficult to understand what is going on then we do have a second operator",
    "start": "706120",
    "end": "712040"
  },
  {
    "text": "which is called cognitive PG uh this is originally from the company called Enterprise DB and also this is uh",
    "start": "712040",
    "end": "719360"
  },
  {
    "text": "company very well known in the postgress world like a large consultancy with great track record and this is",
    "start": "719360",
    "end": "725600"
  },
  {
    "text": "completely different approach uh I would say that this is a cool kit uh which is trying to do this really cloud natively",
    "start": "725600",
    "end": "732519"
  },
  {
    "text": "this is probably why they use even the this maybe a little bit strange uh name for it so it they don't use state for",
    "start": "732519",
    "end": "739680"
  },
  {
    "text": "sets at all they just create pods directly from the kubernetes controller",
    "start": "739680",
    "end": "745600"
  },
  {
    "text": "and they share or they uh through the time they the same persistent volume",
    "start": "745600",
    "end": "750680"
  },
  {
    "text": "claim meaning that the PS share the data directory so for example if you create a",
    "start": "750680",
    "end": "756600"
  },
  {
    "text": "new cluster a port is started just initializing the data there it has let's",
    "start": "756600",
    "end": "763000"
  },
  {
    "text": "say SL data as the data there then the poort exits with success another poort",
    "start": "763000",
    "end": "769560"
  },
  {
    "text": "is started with the postgress process itself it gets attached to the same port as the previous one so let's say it",
    "start": "769560",
    "end": "775920"
  },
  {
    "text": "works in a let's say very different way than the stage was set there is no uh",
    "start": "775920",
    "end": "781120"
  },
  {
    "text": "like uh Patron tool around it there is a Manor process that is true but it is",
    "start": "781120",
    "end": "786800"
  },
  {
    "text": "much more lightweight than previously and for example for the experimenting one thing that you should notice here is",
    "start": "786800",
    "end": "792760"
  },
  {
    "text": "that there is no stateful set at all so this makes experiments especially in lmos much more difficult because it",
    "start": "792760",
    "end": "800760"
  },
  {
    "text": "let's say expects you to use some amount of kubernetes Primitives so we wanted to verify uh",
    "start": "800760",
    "end": "808800"
  },
  {
    "text": "which of these operators is better and um we came up with the litmos uh this is",
    "start": "808800",
    "end": "817079"
  },
  {
    "text": "maybe just to explain this is the open AI uh presentation of the lmos superhero",
    "start": "817079",
    "end": "823279"
  },
  {
    "text": "that will help you with this uh of course we are trying to run inside the kubernetes we probably do have a good",
    "start": "823279",
    "end": "829680"
  },
  {
    "text": "track record with kubernetes we do have a lot of good experiences with kubernetes but still running a stateful",
    "start": "829680",
    "end": "836320"
  },
  {
    "text": "set there or stateful workload is very different from running just your",
    "start": "836320",
    "end": "841480"
  },
  {
    "text": "application uh so there always have been some discussion that if the uh",
    "start": "841480",
    "end": "846519"
  },
  {
    "text": "experiments won't prove fruitful we will tell okay we won't go to kubernetes at",
    "start": "846519",
    "end": "853199"
  },
  {
    "text": "all we will stay with VMS and maybe we will reconsider in several years or something like this so from our point of",
    "start": "853199",
    "end": "860360"
  },
  {
    "text": "view uh I think that n also me mentioned this one that we use litmos as end to",
    "start": "860360",
    "end": "866079"
  },
  {
    "text": "end testing tool for complex system uh because really we postgress itself is",
    "start": "866079",
    "end": "873199"
  },
  {
    "text": "very complicated and if you put an operator orchestrating pogress on top of it doing all these things this is like",
    "start": "873199",
    "end": "880399"
  },
  {
    "text": "level gazillion of complexity so let's see it from the user perspective how it",
    "start": "880399",
    "end": "885600"
  },
  {
    "text": "behaves our approach for this presentation was very simple and I will just like trying to explain uh very",
    "start": "885600",
    "end": "892399"
  },
  {
    "text": "simplified uh steps that we do but uh in reality we did of course much more we",
    "start": "892399",
    "end": "897720"
  },
  {
    "text": "created some uh simp simple scenarios as you can see we try to restart the primary Port this is the port of the",
    "start": "897720",
    "end": "904279"
  },
  {
    "text": "pogress that is able to write then we try to restart the replica Port we do a plant switch over meaning that we use uh",
    "start": "904279",
    "end": "911079"
  },
  {
    "text": "some tooling that is available on the CLI to switch the primary from one port to the other and then the scenario",
    "start": "911079",
    "end": "918240"
  },
  {
    "text": "number four is very interesting I like it the most because we just kill the port and we also kill like force kill",
    "start": "918240",
    "end": "925839"
  },
  {
    "text": "Force delete the PVC meaning that we force this to lose the data so this is",
    "start": "925839",
    "end": "931560"
  },
  {
    "text": "um maybe not a good simulation but a simulation let's say of some sort that uh forces the operator to recreate data",
    "start": "931560",
    "end": "939759"
  },
  {
    "text": "and how did we test uh we created some uh small demonstrational application that is basically looping one select",
    "start": "939759",
    "end": "947040"
  },
  {
    "text": "doing one insert at a time and it is inserting a number that is incrementing uh then it sleeps for few milliseconds",
    "start": "947040",
    "end": "953959"
  },
  {
    "text": "something like this and we run it in several replicas uh and check how the",
    "start": "953959",
    "end": "959399"
  },
  {
    "text": "database reacts and what the applications measures so the end to end from our perspective is the client",
    "start": "959399",
    "end": "965959"
  },
  {
    "text": "application which metrics we collect and then we will decide uh so this is the",
    "start": "965959",
    "end": "971560"
  },
  {
    "text": "Baseline so as you can see there are like four categories that we measure the select rate uh we also measure the",
    "start": "971560",
    "end": "978880"
  },
  {
    "text": "number of failur meaning that for there is a check in the application that if you select in one iteration uh a number",
    "start": "978880",
    "end": "987040"
  },
  {
    "text": "and in the next iteration you you select lower number this is a data loss because",
    "start": "987040",
    "end": "992880"
  },
  {
    "text": "the number should only grow or some something like this uh very similar there is the insert rate with very",
    "start": "992880",
    "end": "998800"
  },
  {
    "text": "similar check so we are able to verify how does the application perceive what is inside the primary postgress as you",
    "start": "998800",
    "end": "1005680"
  },
  {
    "text": "can see this this can run for several hours without any disruption like it is very stable and let's go to the",
    "start": "1005680",
    "end": "1013279"
  },
  {
    "text": "experimenting and what does it prove so for the postgress operator on the left",
    "start": "1013279",
    "end": "1018480"
  },
  {
    "text": "uh you can definitely see a very different pattern that for the cloud native PG so in this scenario number one",
    "start": "1018480",
    "end": "1025199"
  },
  {
    "text": "we restart the primary pot which means that we basically Force the database to",
    "start": "1025199",
    "end": "1030280"
  },
  {
    "text": "do a fail over what is very interesting I didn't put it there but there were no",
    "start": "1030280",
    "end": "1036038"
  },
  {
    "text": "failur which is very interesting that both operators were able to com cope",
    "start": "1036039",
    "end": "1041240"
  },
  {
    "text": "with it with like no downtime from the client application but as you can see uh",
    "start": "1041240",
    "end": "1046880"
  },
  {
    "text": "there are some discrepancies and for examp example select rate meaning the uh number of selects we are able to do per",
    "start": "1046880",
    "end": "1053200"
  },
  {
    "text": "second is slightly dropping not much but there is some some drop there uh also",
    "start": "1053200",
    "end": "1059960"
  },
  {
    "text": "for the post operator you can see that the performance is going slightly down which is uh also very interesting for us",
    "start": "1059960",
    "end": "1066960"
  },
  {
    "text": "to uh to research later on for the second scenario we just restart the",
    "start": "1066960",
    "end": "1074039"
  },
  {
    "text": "replica po this is like the reader poort in postgress terminology so we should we",
    "start": "1074039",
    "end": "1079440"
  },
  {
    "text": "expect that there is like no difference uh typically it is so so you can see on",
    "start": "1079440",
    "end": "1085240"
  },
  {
    "text": "the graphs when did the start happened uh the experiment is set up that it does I think 10 iterations with two minute",
    "start": "1085240",
    "end": "1092240"
  },
  {
    "text": "gaps or something like this for the fre experiment we do have a",
    "start": "1092240",
    "end": "1097280"
  },
  {
    "text": "switch over and here the results are very interesting because as you can see",
    "start": "1097280",
    "end": "1103640"
  },
  {
    "text": "on the cloud native PG on the right you can clearly see that the select rate is",
    "start": "1103640",
    "end": "1109280"
  },
  {
    "text": "dropping like significantly then after the experiment or after the Coster is able to get healthy again it is getting",
    "start": "1109280",
    "end": "1116480"
  },
  {
    "text": "back to the original values and as I mentioned the interval between the experiments is like two minutes",
    "start": "1116480",
    "end": "1121880"
  },
  {
    "text": "something like this uh for the post operator you are not able to see from",
    "start": "1121880",
    "end": "1127520"
  },
  {
    "text": "the select rate when we did the switching you are able to see it from the insert rate of course so even from",
    "start": "1127520",
    "end": "1134080"
  },
  {
    "text": "from the developer perspective these graphs are like very interesting because they are hands on how the database",
    "start": "1134080",
    "end": "1140880"
  },
  {
    "text": "performs right they explain uh how long does it take to do a fail sorry switch",
    "start": "1140880",
    "end": "1147720"
  },
  {
    "text": "over in this case uh Etc so you can see that the disruptions are minimal however",
    "start": "1147720",
    "end": "1152960"
  },
  {
    "text": "as you can see on the second row there are some data losses meaning that when",
    "start": "1152960",
    "end": "1158520"
  },
  {
    "text": "the switch over which should be a planed operation was done a small number uh of",
    "start": "1158520",
    "end": "1164640"
  },
  {
    "text": "inserts was lost and uh we are talking about like three two or something like",
    "start": "1164640",
    "end": "1170520"
  },
  {
    "text": "this inserts per switch but you can see it quite clearly uh this is uh very interesting",
    "start": "1170520",
    "end": "1177720"
  },
  {
    "text": "topic and this is like for our let's say research or maybe this is a known fact",
    "start": "1177720",
    "end": "1182919"
  },
  {
    "text": "for pogress of course and it is the cap theorem that claims that if you run",
    "start": "1182919",
    "end": "1188400"
  },
  {
    "text": "multiple instances of postgress you have either two options you can either prefer availability which is the default one",
    "start": "1188400",
    "end": "1195080"
  },
  {
    "text": "meaning that the POG will be uh able to serve as soon as possible i''s say with",
    "start": "1195080",
    "end": "1200400"
  },
  {
    "text": "minimal downtime or you can prefer consistency meaning that you won't lose any data in the postgress itself there",
    "start": "1200400",
    "end": "1207480"
  },
  {
    "text": "is a setting that you are able to switch uh this is the like the synchronous comit meaning that uh for the comit to",
    "start": "1207480",
    "end": "1214240"
  },
  {
    "text": "be like correct or okay it needs to be committed to at least two or even more",
    "start": "1214240",
    "end": "1219640"
  },
  {
    "text": "nodes uh so that this would not happen at all you won't lose any rights in this",
    "start": "1219640",
    "end": "1224840"
  },
  {
    "text": "situation so this there is an interesting trade-off that you can like with the heal engineering uh approach you are",
    "start": "1224840",
    "end": "1231280"
  },
  {
    "text": "able to test it right away you just switch uh this attribute in the postgress con you rerun the experiment",
    "start": "1231280",
    "end": "1238600"
  },
  {
    "text": "again and you can see the difference like almost immediately which is very interesting also if I will tell you that",
    "start": "1238600",
    "end": "1245280"
  },
  {
    "text": "the switch over should be a planned action there is a data Lo another very interesting point is",
    "start": "1245280",
    "end": "1252440"
  },
  {
    "text": "that when we kill primary pot which is basically a fail over there are no",
    "start": "1252440",
    "end": "1258600"
  },
  {
    "text": "errors at all H we can discuss this in depth maybe",
    "start": "1258600",
    "end": "1263919"
  },
  {
    "text": "later on but this is like very interesting that the planed action actually for this particular scenario has worse results than the ad hoc",
    "start": "1263919",
    "end": "1273080"
  },
  {
    "text": "failure and for the last experiment we have created uh something like very artificial so I will uh remember I will",
    "start": "1273080",
    "end": "1280200"
  },
  {
    "text": "try to explain that we tried every two minutes to kill random pot also with its",
    "start": "1280200",
    "end": "1285720"
  },
  {
    "text": "data there with its PVC in the kubernetes world uh we don't care if this is primary or replica so from the",
    "start": "1285720",
    "end": "1292279"
  },
  {
    "text": "postgress operator you can see that there are almost no disruptions maybe",
    "start": "1292279",
    "end": "1297320"
  },
  {
    "text": "the last ore or some some experiment uh in the other half um killed the primary",
    "start": "1297320",
    "end": "1304360"
  },
  {
    "text": "Port so you can see very small number of failur but the for the right Cloud native p uh Cloud native PG it is very",
    "start": "1304360",
    "end": "1311919"
  },
  {
    "text": "different you can see there is downtime maybe after third fourth experiment Etc",
    "start": "1311919",
    "end": "1317200"
  },
  {
    "text": "and then after 9 and we kill the cluster itself so what does it mean for the",
    "start": "1317200",
    "end": "1324440"
  },
  {
    "text": "first three scenarios this is like definitely what even the maintainers test this about uh both of the operators",
    "start": "1324440",
    "end": "1331960"
  },
  {
    "text": "are very stable we can like count on them um they are tuned to do this for",
    "start": "1331960",
    "end": "1337960"
  },
  {
    "text": "the fourth this is much more artificial one for example the two minute like between the experiments that is",
    "start": "1337960",
    "end": "1344360"
  },
  {
    "text": "something I came up with uh it is not let's say very um where in practice you",
    "start": "1344360",
    "end": "1350159"
  },
  {
    "text": "probably it won't happen that every two minutes some of your ports would be killed something like this so even",
    "start": "1350159",
    "end": "1356640"
  },
  {
    "text": "though let's say this is this was not um a scenario that was practical we learned",
    "start": "1356640",
    "end": "1361840"
  },
  {
    "text": "a lot about how the cognitive PG behaves or even for the its competitor for the",
    "start": "1361840",
    "end": "1367919"
  },
  {
    "text": "POS operator how well it behaves and which was let's say I would say the least for me quite surprising but all of",
    "start": "1367919",
    "end": "1374679"
  },
  {
    "text": "the scenarios like proven that the operators are comparable in terms how",
    "start": "1374679",
    "end": "1380279"
  },
  {
    "text": "they perform in the let's say real world so we um discussed what uh how far can",
    "start": "1380279",
    "end": "1386679"
  },
  {
    "text": "we go with the resiliency testing and we discussed okay when we uh install a new",
    "start": "1386679",
    "end": "1391919"
  },
  {
    "text": "posst cluster there is typically a large number of steps that we do manually like",
    "start": "1391919",
    "end": "1397360"
  },
  {
    "text": "when we install on the VM level there are several experiments that we already do completely manually to prove that the",
    "start": "1397360",
    "end": "1404320"
  },
  {
    "text": "cluster itself is stable how does it behave what are the um the downtime specifications let's say",
    "start": "1404320",
    "end": "1412640"
  },
  {
    "text": "Etc uh so with lithos we do have currently have something that is much more repeatable we are able to compare",
    "start": "1412640",
    "end": "1420799"
  },
  {
    "text": "the results with the different configurations we can evaluate real values and uh we even have let's say",
    "start": "1420799",
    "end": "1428400"
  },
  {
    "text": "several different suits that one of the one of them is less disruptive one of them is like full-blown let's try to",
    "start": "1428400",
    "end": "1434799"
  },
  {
    "text": "kill this cluster or something like this I would like to point out that uh we are still let's say adopting and we don't do",
    "start": "1434799",
    "end": "1441919"
  },
  {
    "text": "like any dis like very complex scenarios we just do a simple very basic",
    "start": "1441919",
    "end": "1449640"
  },
  {
    "text": "experiment but this is very sufficient because when you when I show you this experiments um just as examples what we",
    "start": "1449640",
    "end": "1457559"
  },
  {
    "text": "do typically in the manual steps we did we didn't do much so for example when",
    "start": "1457559",
    "end": "1464480"
  },
  {
    "text": "you destroy a replica VM in the VM ver originally this is like very similar to The",
    "start": "1464480",
    "end": "1470679"
  },
  {
    "text": "Experiment I have shown before right uh so for all this let's say experiments",
    "start": "1470679",
    "end": "1476600"
  },
  {
    "text": "for resiliency testing we have defined some very few but some metrics that are",
    "start": "1476600",
    "end": "1482480"
  },
  {
    "text": "important to us and we try to understand what is happening and with let's say",
    "start": "1482480",
    "end": "1487520"
  },
  {
    "text": "some experience we are trying to get some kind of Baseline on this uh the",
    "start": "1487520",
    "end": "1492679"
  },
  {
    "text": "failover scenario is also like very interesting because if I restart evm in",
    "start": "1492679",
    "end": "1498120"
  },
  {
    "text": "the BM it is very well understand but for the kubernetes part is restarting",
    "start": "1498120",
    "end": "1503159"
  },
  {
    "text": "primary Port which is very different or of course there might be two options now you could kill the note itself etc etc",
    "start": "1503159",
    "end": "1511240"
  },
  {
    "text": "but I'm just maybe trying to point out that for everything with it manually there is already in lmos some good",
    "start": "1511240",
    "end": "1517840"
  },
  {
    "text": "alternative that is quite easy to enjoy and utilize the switch over is one thing",
    "start": "1517840",
    "end": "1524679"
  },
  {
    "text": "that we don't currently uh use lithos 4 because it is done through CLI tool and we are still trying to figure out how to",
    "start": "1524679",
    "end": "1531720"
  },
  {
    "text": "connect this to lmos but you have seen on the command line very similar example how does it do for the cognitive PG",
    "start": "1531720",
    "end": "1538760"
  },
  {
    "text": "there is an extension to the cube CTL which which can do it because like switch over is not a changing of the",
    "start": "1538760",
    "end": "1546440"
  },
  {
    "text": "declarative yaml part the crd that defines the cluster itself in kubernetes but it is imperative so it is included",
    "start": "1546440",
    "end": "1553159"
  },
  {
    "text": "in the Tool uh some uh let's say Advanced experiment is the",
    "start": "1553159",
    "end": "1558960"
  },
  {
    "text": "overloading and this is not about how about availability mostly this is also",
    "start": "1558960",
    "end": "1564559"
  },
  {
    "text": "about measuring uh transactions per second and other performance let's say Behavior so typically we did like very",
    "start": "1564559",
    "end": "1571520"
  },
  {
    "text": "simple overloading on the VM now we do have lmos uh po CPU hog which does",
    "start": "1571520",
    "end": "1578320"
  },
  {
    "text": "basically the same is repeatable and we are very happy to have it okay maybe one",
    "start": "1578320",
    "end": "1584039"
  },
  {
    "text": "more thing is is the last one is about the maintenance so we are able to simulate typically the maintenance",
    "start": "1584039",
    "end": "1589960"
  },
  {
    "text": "meaning that we previously in the VM world we just uh shut every VM down",
    "start": "1589960",
    "end": "1595760"
  },
  {
    "text": "currently we are able to delete all the pots uh I didn't mention that uh there",
    "start": "1595760",
    "end": "1600960"
  },
  {
    "text": "in the slide but we also need to kill the operator itself not to recreate them and after a few whils we try to start up",
    "start": "1600960",
    "end": "1608480"
  },
  {
    "text": "operator again if this will catch up Etc and um this is very interesting because",
    "start": "1608480",
    "end": "1613720"
  },
  {
    "text": "you can imagine that uh when we kill and restart and start over VM it takes much",
    "start": "1613720",
    "end": "1619480"
  },
  {
    "text": "longer time than uh with the pots themselves so for example a shutdown uh",
    "start": "1619480",
    "end": "1624919"
  },
  {
    "text": "will take under 5 minutes and there is some some even we did had some assumption for the uh how does how long",
    "start": "1624919",
    "end": "1631440"
  },
  {
    "text": "does it take to start the cluster we are in like much better numbers with the",
    "start": "1631440",
    "end": "1636919"
  },
  {
    "text": "pots uh there are those several problems that we faced and I would uh like slightly trash I apologize up front lmos",
    "start": "1636919",
    "end": "1645080"
  },
  {
    "text": "quality there are some like small details when you start with lmos you take some example from the manual",
    "start": "1645080",
    "end": "1651320"
  },
  {
    "text": "sometimes it does not work sometime you need to restart a pod uh because suddenly chaos stops everything seems",
    "start": "1651320",
    "end": "1658520"
  },
  {
    "text": "okay after the P restarts everything starts working again Etc so if I may",
    "start": "1658520",
    "end": "1664360"
  },
  {
    "text": "like slightly vote I would definitely vote to keep the quality as high possible all those um all what I mention",
    "start": "1664360",
    "end": "1671080"
  },
  {
    "text": "is somewhere in the issues and we have faced like four or five I guess in the first week of experimenting with litmos",
    "start": "1671080",
    "end": "1677840"
  },
  {
    "text": "and it stays there maybe for some weeks so it's it might be improved um still we need to combine litmos with some B",
    "start": "1677840",
    "end": "1685600"
  },
  {
    "text": "scripting this may be related to our let's say knowledge of lmos itself that",
    "start": "1685600",
    "end": "1691240"
  },
  {
    "text": "um running some let's say Advanced behaviors probably would need also some um some extending lmos Etc and for",
    "start": "1691240",
    "end": "1698840"
  },
  {
    "text": "example I mentioned the problem with the pot running outside The kubernetes Primitives which requires even let's say",
    "start": "1698840",
    "end": "1705360"
  },
  {
    "text": "more work but in the end this was like tremendously helpful to us uh we were",
    "start": "1705360",
    "end": "1711240"
  },
  {
    "text": "able to experiment like do much better uh and have much better understanding of",
    "start": "1711240",
    "end": "1717080"
  },
  {
    "text": "how these operators behave for our mission critical systems I would say that very surprisingly to me it was much",
    "start": "1717080",
    "end": "1725039"
  },
  {
    "text": "easier than I thought originally to simulate real fa because I thought that okay we will need to set up very large",
    "start": "1725039",
    "end": "1731080"
  },
  {
    "text": "environment Etc it was not true we just created very basic experiment as you have seen and this these work well very",
    "start": "1731080",
    "end": "1738320"
  },
  {
    "text": "similar to our manual ones so we knew now move uh much more toward some kind",
    "start": "1738320",
    "end": "1743600"
  },
  {
    "text": "of metrics uh control environment maybe to some SLI slos in the end we will see",
    "start": "1743600",
    "end": "1750200"
  },
  {
    "text": "but for example if their developer comes to you and ask okay if I would have one note postgress cluster how does it",
    "start": "1750200",
    "end": "1757799"
  },
  {
    "text": "behave how do how long does it take uh to restart restore Etc versus if I would",
    "start": "1757799",
    "end": "1764039"
  },
  {
    "text": "get free notes is it different and of course if you will connect this to the price perspective for the developers uh",
    "start": "1764039",
    "end": "1771120"
  },
  {
    "text": "this question becomes much more interesting if you have running if you have 100 environments running this is even more interesting so these are let's",
    "start": "1771120",
    "end": "1778360"
  },
  {
    "text": "say very practical results that we are able to get from the uh this experimenting and for our next steps I",
    "start": "1778360",
    "end": "1784679"
  },
  {
    "text": "would mention that we would uh like we are maybe dreaming slightly about having uh some experiments very small",
    "start": "1784679",
    "end": "1792240"
  },
  {
    "text": "non-disruptive in the production but even though I have heard so many of you going in production we are still not",
    "start": "1792240",
    "end": "1799600"
  },
  {
    "text": "fully convinced I would say so maybe in the in the future this might be our way so thank you and I'm open to",
    "start": "1799600",
    "end": "1807320"
  },
  {
    "text": "questions if there are any can you hear me now yeah hey David",
    "start": "1807320",
    "end": "1814559"
  },
  {
    "text": "yeah thanks uh it was a great presentation I think uh post press specifically database is something",
    "start": "1814559",
    "end": "1819600"
  },
  {
    "text": "really crucial and you covered pretty much um the whole thing and uh I do see",
    "start": "1819600",
    "end": "1826039"
  },
  {
    "text": "there are a couple of questions I was curious myself when I was learning from your presentation so I had to myself but",
    "start": "1826039",
    "end": "1832720"
  },
  {
    "text": "let's start with the first one so uh Matthew asks would a company need to do",
    "start": "1832720",
    "end": "1838760"
  },
  {
    "text": "this testing for every application using postgress or would they run the test once and then tune the system and then",
    "start": "1838760",
    "end": "1845159"
  },
  {
    "text": "periodically run this test uh imagine that we have installed pogress to our clients along with the",
    "start": "1845159",
    "end": "1851960"
  },
  {
    "text": "main application that we provide typically so we don't have test for the application and postgress behind it we",
    "start": "1851960",
    "end": "1858919"
  },
  {
    "text": "test the postgress itself because we know that this is like a critical component and the application behaves",
    "start": "1858919",
    "end": "1864120"
  },
  {
    "text": "like or fail or patterns for the application are much more easily understood something like something like",
    "start": "1864120",
    "end": "1870039"
  },
  {
    "text": "this so we test pogress",
    "start": "1870039",
    "end": "1873320"
  },
  {
    "text": "primarily now I have to uh first is I was curious about um so you are",
    "start": "1875200",
    "end": "1880880"
  },
  {
    "text": "targeting postgress so you're sort of doing Chaos in the database range so what sort of Gres do you think would be",
    "start": "1880880",
    "end": "1886639"
  },
  {
    "text": "useful when you're picking databases uh well for the probes in the",
    "start": "1886639",
    "end": "1893760"
  },
  {
    "text": "use cases I have shown you we go fully end to endend uh and this is like the",
    "start": "1893760",
    "end": "1899000"
  },
  {
    "text": "very large topic I probably understand when uh where you are trying to head to because if we would incorporate also the",
    "start": "1899000",
    "end": "1906039"
  },
  {
    "text": "metrics from the database yeah see some um some health let's say metrics",
    "start": "1906039",
    "end": "1913200"
  },
  {
    "text": "integrated into the chaos engineering and see okay this database not only",
    "start": "1913200",
    "end": "1918320"
  },
  {
    "text": "let's say perform at certain TPS level but also the cach work this way uh the",
    "start": "1918320",
    "end": "1924519"
  },
  {
    "text": "queries uh the P99 for queries was this low etc etc this would like add another",
    "start": "1924519",
    "end": "1932000"
  },
  {
    "text": "several let's say levels of value to the testing itself but we are not there yet even the blackbox n2n testing is for us",
    "start": "1932000",
    "end": "1940320"
  },
  {
    "text": "like very valuable currently got it okay sure so um one",
    "start": "1940320",
    "end": "1946880"
  },
  {
    "text": "last question so would you suggest creating custom faults",
    "start": "1946880",
    "end": "1952240"
  },
  {
    "text": "specifically the databases of postgress or do you think the faults that we have on kosub is enough to do the basic level",
    "start": "1952240",
    "end": "1958639"
  },
  {
    "text": "database testing or like I'm thinking uh this question more in terms of U the current capability that we have is it",
    "start": "1958639",
    "end": "1966240"
  },
  {
    "text": "okay to cover the database uh con Like You Know cover the database residency or do you need to go the extra mile and",
    "start": "1966240",
    "end": "1972880"
  },
  {
    "text": "create something yourself MH so I will give you an example or prob I'm already mentioned if",
    "start": "1972880",
    "end": "1978960"
  },
  {
    "text": "you go with the patron based operator the pgo for example there is a state foret so if it runs through the studio",
    "start": "1978960",
    "end": "1985919"
  },
  {
    "text": "you are able to just select the St set and unleash HS upon it if you go with the cloud native PG there is no",
    "start": "1985919",
    "end": "1992720"
  },
  {
    "text": "primitive that like WRA the PO so in the studio for example itself you don't know",
    "start": "1992720",
    "end": "1999440"
  },
  {
    "text": "how to proceed probably okay so it sort of depends on what you okay MH cool I think uh that's",
    "start": "1999440",
    "end": "2007279"
  },
  {
    "text": "about it if you have any more questions in the audience you can uh add in the Q&A tab but I think that's about it for",
    "start": "2007279",
    "end": "2013039"
  },
  {
    "text": "now it was a great talk David anyways uh I learned a lot from it and thank you it",
    "start": "2013039",
    "end": "2018840"
  },
  {
    "text": "was very interesting bye yeah thank you so much bye",
    "start": "2018840",
    "end": "2024880"
  }
]