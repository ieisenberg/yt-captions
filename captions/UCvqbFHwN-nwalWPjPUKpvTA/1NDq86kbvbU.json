[
  {
    "start": "0",
    "end": "213000"
  },
  {
    "text": "Oh in this talk I will try to explain why as cloud developers we should care",
    "start": "120",
    "end": "6750"
  },
  {
    "text": "about distributed tracing I will show a demo of CN CF project Jaeger which is a",
    "start": "6750",
    "end": "13080"
  },
  {
    "text": "distributed tracing system and I will speak about the challenges of actually rolling out distributed tracing in a",
    "start": "13080",
    "end": "18960"
  },
  {
    "text": "large organization like uber and some lessons that we've learned from that just as an introduction why you should",
    "start": "18960",
    "end": "26010"
  },
  {
    "text": "care about anything I say so I been doing tracing for about two years I work",
    "start": "26010",
    "end": "31199"
  },
  {
    "text": "at uber in New York on observability team I was a founder of Jaeger project",
    "start": "31199",
    "end": "37980"
  },
  {
    "text": "at uber and also was a sort of a co-conspirator in the open tracing project when we started two years ago",
    "start": "37980",
    "end": "44309"
  },
  {
    "text": "and you can find me on github on Twitter so this is a diagram which Jager can",
    "start": "44309",
    "end": "53610"
  },
  {
    "text": "present which is about like sort of snapshot to fubar architecture business not everything but some of it and so",
    "start": "53610",
    "end": "61530"
  },
  {
    "text": "when you use uber app or any right healing app really every second the app",
    "start": "61530",
    "end": "68700"
  },
  {
    "text": "communicates to the backend right and this communication might look like this so instead of talking to just one single",
    "start": "68700",
    "end": "74819"
  },
  {
    "text": "server every request like spreads out across different number of micro",
    "start": "74819",
    "end": "80069"
  },
  {
    "text": "services potentially hitting hundreds of thousands even of individual service instances and at least at our scale that",
    "start": "80069",
    "end": "87119"
  },
  {
    "text": "happens billions time today right so complex system how do we monitor such a complex system to make sure that",
    "start": "87119",
    "end": "93270"
  },
  {
    "text": "everything is working well how do we traditionally do this we use metrics and login as the like classic monitoring",
    "start": "93270",
    "end": "99929"
  },
  {
    "text": "tools right with metrics is as the counter stats and gauges etc there are",
    "start": "99929",
    "end": "105989"
  },
  {
    "text": "various techniques of people telling you what you should be monitoring to kind of know whether your components are healthy",
    "start": "105989",
    "end": "111450"
  },
  {
    "text": "or not and there is various products like study premises graph on which allow you to collect those metrics visualize",
    "start": "111450",
    "end": "117929"
  },
  {
    "text": "them similar store and login I'm taking about application events log in and also",
    "start": "117929",
    "end": "123989"
  },
  {
    "text": "like errors and stack traces and so as well there's the ecosystem of tools that allow you to grab all the data and sort",
    "start": "123989",
    "end": "131340"
  },
  {
    "text": "of aggregated and present so do these tools actually help well of course they help with certain cases but the",
    "start": "131340",
    "end": "138540"
  },
  {
    "text": "monitoring tools ultimately must tell us a story about what's going on in my system so I was running a demo someone",
    "start": "138540",
    "end": "145260"
  },
  {
    "text": "gave me yesterday and when I reload the webpage I got this the process just",
    "start": "145260",
    "end": "150569"
  },
  {
    "text": "crashed so how do we debug this well I",
    "start": "150569",
    "end": "156659"
  },
  {
    "text": "don't know like the code in that demo didn't even use this scanner class at",
    "start": "156659",
    "end": "162180"
  },
  {
    "text": "all right and so yet it crashed with this message so and the it's very",
    "start": "162180",
    "end": "167640"
  },
  {
    "text": "unusual for program to crash like this because typically you get a stack trace in in any program right and this one",
    "start": "167640",
    "end": "173159"
  },
  {
    "text": "crashed without x-rays which is surprising to me anyway I didn't wanna investigate it but the point here is",
    "start": "173159",
    "end": "178769"
  },
  {
    "text": "that when we are talking about microservices based application metrics and logs are essentially giving you this",
    "start": "178769",
    "end": "185310"
  },
  {
    "text": "one line about one instance of a service somewhere right and how do you debug a",
    "start": "185310",
    "end": "190379"
  },
  {
    "text": "problem without stack traces so tracing distributed tracing is essentially giving you what you couldn't consider a",
    "start": "190379",
    "end": "196469"
  },
  {
    "text": "distributed stack traces what what happens across all your service is in a micro C in in architecture and so really",
    "start": "196469",
    "end": "203819"
  },
  {
    "text": "when we trying to mordor architecture as complex as uber we want to modern monetary disability transaction not just",
    "start": "203819",
    "end": "211049"
  },
  {
    "text": "individual instances and just before I do the Jama I just wanna give a basic",
    "start": "211049",
    "end": "217260"
  },
  {
    "start": "213000",
    "end": "285000"
  },
  {
    "text": "idea of how distributed tracing works so imagine we have a service that requests",
    "start": "217260",
    "end": "222659"
  },
  {
    "text": "coming to our system and then when the request comes what we do is we assign a",
    "start": "222659",
    "end": "227849"
  },
  {
    "text": "unique ID to that request simple thing and we also introduce a notion of a context and the context is something",
    "start": "227849",
    "end": "234420"
  },
  {
    "text": "that we want to keep with this request with this transaction as it travels or the rest of the architecture so if the",
    "start": "234420",
    "end": "239639"
  },
  {
    "text": "service makes a call to another service then we pass that context on and so on it makes more calls we still pass the",
    "start": "239639",
    "end": "245999"
  },
  {
    "text": "same context and as we do in this we kind of now know okay this is the path",
    "start": "245999",
    "end": "251609"
  },
  {
    "text": "the transaction took through the architecture as long as we sort of can identify all the instrumentation within",
    "start": "251609",
    "end": "257849"
  },
  {
    "text": "those service by this unique idea that we assigned at the top right you can modify context -",
    "start": "257849",
    "end": "263919"
  },
  {
    "text": "who else record some causality information like the fact that actually be called C and not just someone called",
    "start": "263919",
    "end": "270250"
  },
  {
    "text": "C in this transaction right and so if we capture all that data in addition it doesn't have to be in the context but",
    "start": "270250",
    "end": "276039"
  },
  {
    "text": "captured in the background somewhere then we can build a trace the timeline which you see on the right here so and",
    "start": "276039",
    "end": "283389"
  },
  {
    "text": "then next thing just before again before the GMO just a quick introduction what Jaeger is a disability rating system we",
    "start": "283389",
    "end": "290800"
  },
  {
    "start": "285000",
    "end": "433000"
  },
  {
    "text": "started the tuber and we open sourced it a few months ago now it's a official CN",
    "start": "290800",
    "end": "296380"
  },
  {
    "text": "CF project from September and now I will show you some demo of of the tracing so",
    "start": "296380",
    "end": "304419"
  },
  {
    "text": "I will start with a kind of show you showing you an application that I want to use for the demo so this is a mock",
    "start": "304419",
    "end": "314680"
  },
  {
    "text": "application hot rod that's like right on demands and what you can do with this",
    "start": "314680",
    "end": "320080"
  },
  {
    "text": "one is you can pick a customer you click a button and the bug back-end just goes and dispatches a car pretend car to you",
    "start": "320080",
    "end": "327669"
  },
  {
    "text": "and it gives you the license number it also says when this car is arriving and",
    "start": "327669",
    "end": "332710"
  },
  {
    "text": "there is some for our purposes debugging information say and this is the unique request ID for that request to the",
    "start": "332710",
    "end": "337990"
  },
  {
    "text": "backend and this is how long it took to execute on the back and from the point of view of the of the front-end right so",
    "start": "337990",
    "end": "345210"
  },
  {
    "text": "that's all I'm going to tell you about this application right and so back to the point of monitoring tools to tell",
    "start": "345210",
    "end": "351340"
  },
  {
    "text": "you the stories about the application so what can I get about this application actually using tracing as a monitoring",
    "start": "351340",
    "end": "357280"
  },
  {
    "text": "tool right so I'll go to to the Yaeger front-end let me reload it so the",
    "start": "357280",
    "end": "365620"
  },
  {
    "text": "instrumentation in that application already sent some data to tracing back on and so one thing I see here that ow I",
    "start": "365620",
    "end": "371680"
  },
  {
    "text": "suddenly got this list of services that I pretend apparently included in this application right so but let's not go",
    "start": "371680",
    "end": "379659"
  },
  {
    "text": "there first let's go to this tab called dependency diagram there's a separate view so purely by monitoring the",
    "start": "379659",
    "end": "386199"
  },
  {
    "text": "interactions between the services of course with instrumentation we got this diagram which actually tell",
    "start": "386199",
    "end": "391740"
  },
  {
    "text": "a lot about the application right away right we can kind of figure out what its architecture we can see how many",
    "start": "391740",
    "end": "397349"
  },
  {
    "text": "requests go to which services we can see that apparently there are two back and database backends within this",
    "start": "397349",
    "end": "403139"
  },
  {
    "text": "application so we have need to do with envy to do anything about like to get",
    "start": "403139",
    "end": "408660"
  },
  {
    "text": "that just to run the application so the second thing is what you've all this gives us turkey T actually doesn't give",
    "start": "408660",
    "end": "414419"
  },
  {
    "text": "us the actual workflow who calls whom what the business logic within this application so for that I can go and I",
    "start": "414419",
    "end": "420419"
  },
  {
    "text": "search for traces so there is one trace here at the top notice it says seven or four milliseconds this is a bit lower",
    "start": "420419",
    "end": "427259"
  },
  {
    "text": "than this one because there's a this is from the client point of view this is from the server point of view so obviously it's shorter but when I click",
    "start": "427259",
    "end": "435300"
  },
  {
    "text": "on the trace so there are a lot of things on this on the screen a lot of information so most important one is you",
    "start": "435300",
    "end": "442380"
  },
  {
    "text": "can see that this the time sequence diagram that I showed you in the previous slide is kind of now for the",
    "start": "442380",
    "end": "447780"
  },
  {
    "text": "real service right and these are individual operations executed by individual services listed on the left",
    "start": "447780",
    "end": "454349"
  },
  {
    "text": "and this evaporation names and how long they took so one thing that we can",
    "start": "454349",
    "end": "459659"
  },
  {
    "text": "immediately say about the service is that okay well this MySQL select operation takes almost 50% of the time",
    "start": "459659",
    "end": "465840"
  },
  {
    "text": "so if you were trying to understand why if your recent production is slow just one look at the trace as well this is",
    "start": "465840",
    "end": "471449"
  },
  {
    "text": "probably well at least a good place to investigate what what is it doing to for that long right after all so Lorraine on",
    "start": "471449",
    "end": "479580"
  },
  {
    "text": "my local machine how much the second time you can spend on the retrieving date from MySQL what you can do as well",
    "start": "479580",
    "end": "485130"
  },
  {
    "text": "is you can actually drill down into this and say okay well this this is the actual statement that was executed so",
    "start": "485130",
    "end": "491340"
  },
  {
    "text": "this is something that's automatically captured by tracing instrumentation and you can see that within this individual",
    "start": "491340",
    "end": "498210"
  },
  {
    "text": "kind of span right span as an iteration within within a trace so very rich data",
    "start": "498210",
    "end": "503699"
  },
  {
    "text": "it also says that there is a log statements here acquiring log blah blah blah whatever we'll see why that is",
    "start": "503699",
    "end": "510659"
  },
  {
    "text": "interesting later so another thing we can see here is if I click at the top this is the kind of the entry level of",
    "start": "510659",
    "end": "517440"
  },
  {
    "text": "the whole application right the so-called root span which spans the whole request there are lots of logs",
    "start": "517440",
    "end": "523260"
  },
  {
    "text": "here if we look at the logs then if you read it all of it you kinda can get a overall",
    "start": "523260",
    "end": "530260"
  },
  {
    "text": "idea and not just the architecture now but what's the actual business flow within this application so like there is",
    "start": "530260",
    "end": "536530"
  },
  {
    "text": "a we were getting a customer then we were finding the like closest drivers we",
    "start": "536530",
    "end": "542230"
  },
  {
    "text": "were calculating the routes to each driver like this and then finally we pick the best driver who is like the closest or the shortest to reach it and",
    "start": "542230",
    "end": "548860"
  },
  {
    "text": "they in the given point that we wanted and they will turn that data so why am i",
    "start": "548860",
    "end": "553870"
  },
  {
    "text": "showing this you could clearly you could get the same thing from the logs however note that these all these applications",
    "start": "553870",
    "end": "563080"
  },
  {
    "text": "could have been running on different instances potentially right and also each application if it was a production",
    "start": "563080",
    "end": "568960"
  },
  {
    "text": "then there'd be a hundred requests going through a single instance so if you try to look at the logs this this 18 entries",
    "start": "568960",
    "end": "576910"
  },
  {
    "text": "are going to be mixed up with gazillion of other entries from the same application just from different threads",
    "start": "576910",
    "end": "582700"
  },
  {
    "text": "and how do you make sense of any of that while tracing actually gives you just this this transaction it ignores",
    "start": "582700",
    "end": "589090"
  },
  {
    "text": "everything else because it can correlate all the logs with this transaction ID or the trace ID and that's very important",
    "start": "589090",
    "end": "595810"
  },
  {
    "text": "basically a feature of the of the tracing is that it can give you a highly contextualized information about all the",
    "start": "595810",
    "end": "601960"
  },
  {
    "text": "things that your application is doing and it also like again note that these",
    "start": "601960",
    "end": "607420"
  },
  {
    "text": "logs are attached to this span because it's really the separation that was doing all these requests from the top",
    "start": "607420",
    "end": "612610"
  },
  {
    "text": "level right the logs for MySQL operations were different because it was",
    "start": "612610",
    "end": "617770"
  },
  {
    "text": "doing something else so not only you get logs for a whole transaction but you get logs and practices like partitioned by",
    "start": "617770",
    "end": "624580"
  },
  {
    "text": "individual operations within that transaction so another thing that we can",
    "start": "624580",
    "end": "629980"
  },
  {
    "start": "628000",
    "end": "1080000"
  },
  {
    "text": "also figure out quite easily from this trace if were like curious about what else could be the performance issue in",
    "start": "629980",
    "end": "636700"
  },
  {
    "text": "this application like well one thing is here well first of all there are a couple of errors",
    "start": "636700",
    "end": "642320"
  },
  {
    "text": "the red button here says there's an error we can actually look at it it was probably like radius time out right so",
    "start": "642320",
    "end": "647960"
  },
  {
    "text": "fine the service retries it increases the latency but even if there are no",
    "start": "647960",
    "end": "653420"
  },
  {
    "text": "errors there's a very clear pattern staircase pattern here which indicates that well all these operations are done",
    "start": "653420",
    "end": "659960"
  },
  {
    "text": "sequentially and now since we didn't write the application we can't really",
    "start": "659960",
    "end": "665030"
  },
  {
    "text": "say whether that's the right thing or not for the application well I wrote it so I do know that it's the wrong thing it could have been like Fenian out all",
    "start": "665030",
    "end": "672020"
  },
  {
    "text": "these requests in parallel because all the detail is basically it loaded all the drivers first and then getting some",
    "start": "672020",
    "end": "677600"
  },
  {
    "text": "additional information for other drivers so you just read pool paralyze it you could reduce this hundred 80",
    "start": "677600",
    "end": "683300"
  },
  {
    "text": "milliseconds to probably what's the longest like 10 milliseconds so another source of latency right away just by",
    "start": "683300",
    "end": "688550"
  },
  {
    "text": "looking at the trace I didn't have to do any sort of measurements anywhere at least oh and the final one so this one",
    "start": "688550",
    "end": "694070"
  },
  {
    "text": "is interesting by the way there's a I can actually do this zoom in onto this section so so here we have a whole bunch",
    "start": "694070",
    "end": "703190"
  },
  {
    "text": "of requests to the route service and actually there are ten of them because",
    "start": "703190",
    "end": "709340"
  },
  {
    "text": "there are ten drivers loaded but the the execution part is a bit strange like we see here that there is some parallelism",
    "start": "709340",
    "end": "715370"
  },
  {
    "text": "the three requests were starting to execute in parallel but then it's not three at a time actually if you if you",
    "start": "715370",
    "end": "722030"
  },
  {
    "text": "look at the vertical lines it's always three at the time because well simply there is a thread pool behind it with the size of three and it's it limits how",
    "start": "722030",
    "end": "729410"
  },
  {
    "text": "much work you can do on doing this particular iteration so this is not a problem in this specific trace but if we",
    "start": "729410",
    "end": "736610"
  },
  {
    "text": "were doing a lot of requests and I can easily show you like if I go here and let's say do this right",
    "start": "736610",
    "end": "744650"
  },
  {
    "text": "notice that the latency keeps climbing so if I pick this one and actually I can search the trace by individual tags so",
    "start": "744650",
    "end": "751400"
  },
  {
    "text": "this was a driver ID I think I can say in the driver should have tried it at",
    "start": "751400",
    "end": "757580"
  },
  {
    "text": "home but should work period so one point six seconds well so now this MySQL is",
    "start": "757580",
    "end": "766010"
  },
  {
    "text": "not just [Music] it got even worse read with with the load obviously my SQL server could have",
    "start": "766010",
    "end": "773070"
  },
  {
    "text": "scaled is it it is not a problem here because it's a simulated series really but we can look at the again and the",
    "start": "773070",
    "end": "778740"
  },
  {
    "text": "span and say oh you know what I was actually waiting on a log for other",
    "start": "778740",
    "end": "784079"
  },
  {
    "text": "transactions and notice the interesting thing it gives you the transaction I just remember this transaction IDs from",
    "start": "784079",
    "end": "789810"
  },
  {
    "text": "here so this service somehow knows this individual request like we're looking at one trace one request but it knows about",
    "start": "789810",
    "end": "796920"
  },
  {
    "text": "other requests we should block in this particular request on a particular resource contention right so that",
    "start": "796920",
    "end": "802740"
  },
  {
    "text": "information is actually hard to come by if without certain features that ll",
    "start": "802740",
    "end": "808350"
  },
  {
    "text": "Devon in in a second India so again speaking of optimizing performance",
    "start": "808350",
    "end": "814399"
  },
  {
    "text": "application clearly this is one of the best thing like this I was actually not able to show you the this this impact on",
    "start": "814399",
    "end": "820769"
  },
  {
    "text": "this thing because we need to solve the my skill problem first but if we solve it to make it fast",
    "start": "820769",
    "end": "826199"
  },
  {
    "text": "then this thing becomes a bottleneck because your thread pool of three obviously is blocking now a bunch of",
    "start": "826199",
    "end": "832920"
  },
  {
    "text": "requests so you can't even two three equations per like in parallel for one transaction you're going to be waiting",
    "start": "832920",
    "end": "838319"
  },
  {
    "text": "on this contention so the whole point of that is like I I'm just tweaking one",
    "start": "838319",
    "end": "843389"
  },
  {
    "text": "single trace about the application and suddenly I know so much about performance profile of this whole",
    "start": "843389",
    "end": "849240"
  },
  {
    "text": "application and I'm not thinking about one single service right that you could potentially who could have done with some profiling tool but I am talking",
    "start": "849240",
    "end": "855420"
  },
  {
    "text": "about the application as a distributed application with multiple micro services which you could run as multiple",
    "start": "855420",
    "end": "860760"
  },
  {
    "text": "instances so one one one last thing I",
    "start": "860760",
    "end": "869130"
  },
  {
    "text": "want to demonstrate here is so this",
    "start": "869130",
    "end": "874680"
  },
  {
    "text": "application also needs metrics and I have this this metric here which is kind",
    "start": "874680",
    "end": "881819"
  },
  {
    "text": "of interesting so this metric says this is a how much time we spent calculating",
    "start": "881819",
    "end": "888329"
  },
  {
    "text": "the route by customer and what's interesting about it was like kind of",
    "start": "888329",
    "end": "894420"
  },
  {
    "text": "easy to calculate but the issue here is that if we look at the at the diagram here right so this is the",
    "start": "894420",
    "end": "901650"
  },
  {
    "text": "the route service the route service actually doesn't know anything about the customer it doesn't need to it's all--it's does",
    "start": "901650",
    "end": "907770"
  },
  {
    "text": "it says like from point A to point B what's the shortest route and yet that service is able to provide a metric",
    "start": "907770",
    "end": "914520"
  },
  {
    "text": "saying all this is how much time I spent per customer right and that's another feature of distributed tracing which is",
    "start": "914520",
    "end": "921600"
  },
  {
    "text": "known as distributed context propagation because well the front end service does know the customer and that front end",
    "start": "921600",
    "end": "928050"
  },
  {
    "text": "service can store the customer in the context remember the context I talked about at the beginning if you store the",
    "start": "928050",
    "end": "933750"
  },
  {
    "text": "customer in the context then that context is available to every single node within your application and then",
    "start": "933750",
    "end": "939300"
  },
  {
    "text": "they can do additional statistic gathering based on that information even though they don't really get that",
    "start": "939300",
    "end": "945060"
  },
  {
    "text": "information in there a direct API call or anything because they really don't care and that provides like very",
    "start": "945060",
    "end": "951000"
  },
  {
    "text": "powerful features if you wanted to cost attribution like at Google most of the requests Google has also very deep stack",
    "start": "951000",
    "end": "957990"
  },
  {
    "text": "so if you have a like a gmail eventually it might reach some storage like a big table so the request actually carried",
    "start": "957990",
    "end": "965340"
  },
  {
    "text": "the fact that this is request coming from Gmail all the way to the storage because then they can attribute that cost to something that makes sense for",
    "start": "965340",
    "end": "972540"
  },
  {
    "text": "the business right so in this case yeah sure I can attribute cost to let's say like this service that's calling me",
    "start": "972540",
    "end": "978750"
  },
  {
    "text": "that's easy but really we want to attribute the cost of doing the work to",
    "start": "978750",
    "end": "983790"
  },
  {
    "text": "some business concept that makes sense for our business for example if it was over we could say okay this is a write",
    "start": "983790",
    "end": "989250"
  },
  {
    "text": "request like for the for the ride-sharing oh this is a uber is delivery so this is a high level",
    "start": "989250",
    "end": "994800"
  },
  {
    "text": "business and then we can say ok well we're spending this many dollars per year on this kind of business by doing",
    "start": "994800",
    "end": "1002300"
  },
  {
    "text": "this attribution right so it's very powerful technique and I will I'll speak about it in a bit more but this is this",
    "start": "1002300",
    "end": "1010070"
  },
  {
    "text": "kind of DM application demonstrates how you can get it and just to prove you that I'm not lying about the fact that",
    "start": "1010070",
    "end": "1016130"
  },
  {
    "text": "route service doesn't know anything about the customer we can go to the root",
    "start": "1016130",
    "end": "1022040"
  },
  {
    "text": "server and we can look at the URL request that it gets this is all it gets right let's just start pick-up and drop-off point",
    "start": "1022040",
    "end": "1030949"
  },
  {
    "text": "that's all it has right so how does it get the customer information well customer information comes from the",
    "start": "1030949",
    "end": "1036630"
  },
  {
    "text": "context and Kyle context is propagated automatically by tracing instrumentation transparently to the service you don't",
    "start": "1036630",
    "end": "1042390"
  },
  {
    "text": "need to change the API all series or anything else imagine if you want to pass this data like for you so that",
    "start": "1042390",
    "end": "1048630"
  },
  {
    "text": "services actually know about that you would have to go and change like a lot of services and change their API so it's",
    "start": "1048630",
    "end": "1053940"
  },
  {
    "text": "very expensive so let me stop here and go back to my slides and by the way this",
    "start": "1053940",
    "end": "1060780"
  },
  {
    "text": "demo there is a walkthrough if you interested in in this link the slides will be shared afterwards so it goes in",
    "start": "1060780",
    "end": "1067770"
  },
  {
    "text": "a lot more details about how you can actually troubleshoot these things using tracing and it it has two aspects is",
    "start": "1067770",
    "end": "1074430"
  },
  {
    "text": "like talks about open tracing and the jäger specifically and and really what you can do with that so to summarize one thing that opened",
    "start": "1074430",
    "end": "1084420"
  },
  {
    "start": "1080000",
    "end": "1391000"
  },
  {
    "text": "that the tracing systems provide is the ability to monitor distributed transactions the other thing is to do",
    "start": "1084420",
    "end": "1090510"
  },
  {
    "text": "root cause analysis right so if you can find a trace which is looking suspicious you can actually easily drill down into",
    "start": "1090510",
    "end": "1095940"
  },
  {
    "text": "all various components that participated in the transaction and figure out what was going wrong you can also do",
    "start": "1095940",
    "end": "1102060"
  },
  {
    "text": "performance and latest optimizations using the same tool and that's not just with individual traces you can if you",
    "start": "1102060",
    "end": "1107280"
  },
  {
    "text": "build some aggregation of the traces then you can see patterns within the applications and that's okay I'm going",
    "start": "1107280",
    "end": "1112740"
  },
  {
    "text": "to be talking more about this and finally service dependency analysis so far it was fairly simple but like",
    "start": "1112740",
    "end": "1118890"
  },
  {
    "text": "it's just a simple diagram I'll show you a more advanced versions of it and all",
    "start": "1118890",
    "end": "1124080"
  },
  {
    "text": "of that functionality is fundamentally built on distributed context propagation and this is something that I want to",
    "start": "1124080",
    "end": "1129450"
  },
  {
    "text": "stress that context propagation in micro service is an extremely important",
    "start": "1129450",
    "end": "1134640"
  },
  {
    "text": "concept concepts many people not doing this and you'll regret if you reach a",
    "start": "1134640",
    "end": "1139980"
  },
  {
    "text": "certain maturity with an organization but you're not doing this so it's easier to start from the from the beginning to",
    "start": "1139980",
    "end": "1145470"
  },
  {
    "text": "have it so like who likes tracing now like after I've given this presentation right so quick poll how many people here",
    "start": "1145470",
    "end": "1155059"
  },
  {
    "text": "in your company organization have distributed tracing system deployed and then use all right pretty good",
    "start": "1155059",
    "end": "1162710"
  },
  {
    "text": "percentage more than I expected so if the trace eNOS was so fun as we",
    "start": "1162710",
    "end": "1169370"
  },
  {
    "text": "saw before how come it's not everyone raising their hands right and well the question is kind of embarrassing a bit",
    "start": "1169370",
    "end": "1176090"
  },
  {
    "text": "for for the industry is that the instrumentation has been too hard so far to do tracing it's like with logging and",
    "start": "1176090",
    "end": "1182990"
  },
  {
    "text": "metrics it's easier it's also work but we're stressing it's it's a bit more work and I want to explain why it's a",
    "start": "1182990",
    "end": "1189409"
  },
  {
    "text": "bit more work so imagine you have a service and it has like a server end",
    "start": "1189409",
    "end": "1194659"
  },
  {
    "text": "point and then there is a downstream call that you make and right and so presumably we add some instrumentation",
    "start": "1194659",
    "end": "1200509"
  },
  {
    "text": "around these things to actually do the tracing at the entry and exit points and",
    "start": "1200509",
    "end": "1206330"
  },
  {
    "text": "presumably some upstream server is already also instrumented and sent in as the trace ID in the request headers",
    "start": "1206330",
    "end": "1211879"
  },
  {
    "text": "right so what the very first thing we do in this application with the instrumentation really what it does it says okay take the headers extract the",
    "start": "1211879",
    "end": "1218779"
  },
  {
    "text": "trace context create a context object in memory that kind of you get that almost",
    "start": "1218779",
    "end": "1224629"
  },
  {
    "text": "for free with the standard frameworks today the second thing you need to do is like as your application doing its work",
    "start": "1224629",
    "end": "1230659"
  },
  {
    "text": "you need to keep that context around so that if you do happen to make a downstream call you can pass that",
    "start": "1230659",
    "end": "1236119"
  },
  {
    "text": "context downstream right because if you lose it then the trace is broken you can't follow the transaction anymore so",
    "start": "1236119",
    "end": "1241279"
  },
  {
    "text": "number two and then the third one is when you actually do to make a call you take that context the",
    "start": "1241279",
    "end": "1246679"
  },
  {
    "text": "instrumentation encodes it again and to the trace headers and passes on to the next request and meanwhile there's a",
    "start": "1246679",
    "end": "1252320"
  },
  {
    "text": "another library which kind of gets the callbacks from all this instrumentation as though I'm collecting tracing data",
    "start": "1252320",
    "end": "1258049"
  },
  {
    "text": "I'm gonna submit it to the tracing back end somewhere for for actual tracing aggregation so so this the this number",
    "start": "1258049",
    "end": "1268490"
  },
  {
    "text": "two thing is what what's known as in process context propagation different from distributed context propagation and",
    "start": "1268490",
    "end": "1275559"
  },
  {
    "text": "this is actually the the thing that was preventing tracing from being wild mainstream these days because it's",
    "start": "1275559",
    "end": "1283279"
  },
  {
    "text": "actually not straightforward to do so it sort of depends on the language as well",
    "start": "1283279",
    "end": "1288440"
  },
  {
    "text": "if you take languages we support thread locals then well you can actually store",
    "start": "1288440",
    "end": "1294620"
  },
  {
    "text": "the context in thread local and sort of get it in the next phase or like in the next layer of your application let's say",
    "start": "1294620",
    "end": "1300020"
  },
  {
    "text": "in the client in the previous example and so it seems like it's a KP case you",
    "start": "1300020",
    "end": "1305120"
  },
  {
    "text": "you can do instrumentation almost without change in your application at all right it's almost KP case except that we don't",
    "start": "1305120",
    "end": "1312500"
  },
  {
    "text": "do software these days anymore like this right we don't write Java applications we request this process by a single",
    "start": "1312500",
    "end": "1318440"
  },
  {
    "text": "thread most applications now become my synchronous they use queues inside the kamati threaded pools etc and so there's",
    "start": "1318440",
    "end": "1324800"
  },
  {
    "text": "actually complicates a lot this whole process of yeah what seems simpler with the thread-local now it's not as simple",
    "start": "1324800",
    "end": "1330910"
  },
  {
    "text": "there's another set of languages where thread-local isn't even anything that can go you can't identify your routine",
    "start": "1330910",
    "end": "1337760"
  },
  {
    "text": "and so what you do in that case well you have to pass context explicitly and",
    "start": "1337760",
    "end": "1343600"
  },
  {
    "text": "that's like a sad story here because in many cases it's if you didn't write your",
    "start": "1343600",
    "end": "1350300"
  },
  {
    "text": "application from the start with passing the context then we'll calculate or you have to rewrite a lot of API calls",
    "start": "1350300",
    "end": "1356030"
  },
  {
    "text": "internally so it's not so happy I mean fortunately in go the context object is",
    "start": "1356030",
    "end": "1363050"
  },
  {
    "text": "a standard language function like object to the class so goal language encourages",
    "start": "1363050",
    "end": "1368540"
  },
  {
    "text": "you to use that all over the application so hopefully as the community will start doing that but it's actually if you do",
    "start": "1368540",
    "end": "1374180"
  },
  {
    "text": "do that then tracing becomes almost easy so like in in a tuber tracing go",
    "start": "1374180",
    "end": "1379610"
  },
  {
    "text": "applications was actually not that hard because most people didn't know how to pass contacts around right and contacts",
    "start": "1379610",
    "end": "1384950"
  },
  {
    "text": "exist for the purposes as well like timeouts and then conciliation and stuff so it was already a mechanism which we",
    "start": "1384950",
    "end": "1390380"
  },
  {
    "text": "can piggyback on so is there a zero trace instrumentation does it exist even as a concept so like I said",
    "start": "1390380",
    "end": "1397880"
  },
  {
    "start": "1391000",
    "end": "1424000"
  },
  {
    "text": "fundamentally it's not impossible in some languages like go but if you do pass context that it kind of becomes",
    "start": "1397880",
    "end": "1403760"
  },
  {
    "text": "almost easier almost like almost free and then with the thread locals as I",
    "start": "1403760",
    "end": "1408860"
  },
  {
    "text": "said it's it's a double-edged sword it's you get some benefits it's sometimes it's easy but sometimes very hard",
    "start": "1408860",
    "end": "1414050"
  },
  {
    "text": "especially if you work in with the customer we're going to do some custom a synchronous processing so we're cube con",
    "start": "1414050",
    "end": "1421679"
  },
  {
    "text": "there's gonna be and have been already a lot of talks about service meshes right and so do they solve the problem",
    "start": "1421679",
    "end": "1428039"
  },
  {
    "start": "1424000",
    "end": "1504000"
  },
  {
    "text": "actually service meshes like enjoy a linker D they run as a sidecar they take care they basically the business of Jun",
    "start": "1428039",
    "end": "1435750"
  },
  {
    "text": "RPC calls away from your application so you can write your applications all kind of languages but sidecar does all the",
    "start": "1435750",
    "end": "1441179"
  },
  {
    "text": "heavy logic of saying like I know how to route requests how to do rate limiting how to do load balancing all this thing",
    "start": "1441179",
    "end": "1447029"
  },
  {
    "text": "right so very nice concept and they do monitoring as well so they'd clearly concerned metrics but they can also do",
    "start": "1447029",
    "end": "1453179"
  },
  {
    "text": "tracing for you like the example lyft I can lift 95 percent of services don't do tracing it's all comes from from envoi",
    "start": "1453179",
    "end": "1460139"
  },
  {
    "text": "right and the the fine print over there is that to enable tracing you just need",
    "start": "1460139",
    "end": "1466350"
  },
  {
    "text": "to pass the header with an application well ironically pass in the header is the exact same program open process",
    "start": "1466350",
    "end": "1472019"
  },
  {
    "text": "context propagation right if you run in the situation with again the thread locals and multi-threaded it becomes the",
    "start": "1472019",
    "end": "1478860"
  },
  {
    "text": "SS challenging as otherwise and so like open tracing as an API now provides a",
    "start": "1478860",
    "end": "1484950"
  },
  {
    "text": "primitives for doing context propagation and because open tracing API is being",
    "start": "1484950",
    "end": "1490289"
  },
  {
    "text": "integrated into a lot of framers like akka which is like actor frameworks with very high I synchronous II it can do the",
    "start": "1490289",
    "end": "1497159"
  },
  {
    "text": "things for you without you change in application but if you write your custom thread pools then you sort of have to do",
    "start": "1497159",
    "end": "1502169"
  },
  {
    "text": "a bit of work for that so now what about kind of what we learnt at uber from",
    "start": "1502169",
    "end": "1508649"
  },
  {
    "start": "1504000",
    "end": "1538000"
  },
  {
    "text": "doing these things like it actually felt like this guy we have by now close to",
    "start": "1508649",
    "end": "1514519"
  },
  {
    "text": "3,000 micro services and about half of them are instrumented for tracing and",
    "start": "1514519",
    "end": "1519750"
  },
  {
    "text": "that half has been a percentage for like a year and a half as far as I remember even though the number of micro service",
    "start": "1519750",
    "end": "1525360"
  },
  {
    "text": "keeps growing so it's a tough and it doesn't help with the fact that we have",
    "start": "1525360",
    "end": "1530970"
  },
  {
    "text": "like four languages at uber so it makes it even harder on my team to actually provide instrumentations for languages",
    "start": "1530970",
    "end": "1536610"
  },
  {
    "text": "and frameworks and write the client libraries so but if you are going to do",
    "start": "1536610",
    "end": "1542070"
  },
  {
    "start": "1538000",
    "end": "1609000"
  },
  {
    "text": "this in your canoes Asian so what what you should do like one thing I would strongly advise using open tracing",
    "start": "1542070",
    "end": "1547529"
  },
  {
    "text": "because it's actually decouples you from the actual tracing system if you don't like Jaeger if you want to switch to commercial vendor",
    "start": "1547529",
    "end": "1553540"
  },
  {
    "text": "which does a lot of work potential Danny ager then you don't need to change your applications that open trace",
    "start": "1553540",
    "end": "1559000"
  },
  {
    "text": "instrumentation stays the same you just flipped in which tracer you use right and obviously it's just common good good",
    "start": "1559000",
    "end": "1567280"
  },
  {
    "text": "programming practice you you should use infrastructure libraries in the organization which are shared across teams so that like you don't reinvent",
    "start": "1567280",
    "end": "1573370"
  },
  {
    "text": "the wheel in every service and if you do that then it becomes a bit easier to enable tracing because that's the only",
    "start": "1573370",
    "end": "1578920"
  },
  {
    "text": "place you had kind of have to go in instrument things and a good thing is many of them already instrumented open",
    "start": "1578920",
    "end": "1584710"
  },
  {
    "text": "tracing because it's an open source API and it's like still vendor independent and one important thing is like don't",
    "start": "1584710",
    "end": "1591310"
  },
  {
    "text": "make configurations for tracing right it should come enabled by default you can have a configuration to disable it but",
    "start": "1591310",
    "end": "1598030"
  },
  {
    "text": "we we made a mistake originally with our Python clients off like you we actually had to go and enable like put a boolean",
    "start": "1598030",
    "end": "1604450"
  },
  {
    "text": "flag and the config and that just like was completely unnecessary friction to to roll in this out education is very",
    "start": "1604450",
    "end": "1611350"
  },
  {
    "start": "1609000",
    "end": "1643000"
  },
  {
    "text": "important distributed context propagation I mean the upper came out what in 2008 10 years ago the concept is",
    "start": "1611350",
    "end": "1618790"
  },
  {
    "text": "still new to many developers so definitely given talks internally in the",
    "start": "1618790",
    "end": "1624340"
  },
  {
    "text": "company and explaining why it's important and showing some use cases helps so I was mentioning this the",
    "start": "1624340",
    "end": "1630760"
  },
  {
    "text": "feature where the customer ID was passed around this is in open tracing it's called baggage because it's something",
    "start": "1630760",
    "end": "1636280"
  },
  {
    "text": "that you carry with the request it's not the actual trace ID but it it's an additional key value where and so what",
    "start": "1636280",
    "end": "1643800"
  },
  {
    "start": "1643000",
    "end": "1747000"
  },
  {
    "text": "we use it for is several things that a tuber so one thing is the we have",
    "start": "1643800",
    "end": "1650440"
  },
  {
    "text": "various sources of synthetic traffic a tuber let's say there's a black box system which keeps like pinging the",
    "start": "1650440",
    "end": "1655540"
  },
  {
    "text": "api's and saying is my services working correctly right and there could be some performance testing or like capacity",
    "start": "1655540",
    "end": "1662410"
  },
  {
    "text": "testing that increases a lot of like create a lot of loads and the services as well so if you if you cannot",
    "start": "1662410",
    "end": "1669220"
  },
  {
    "text": "distinguish the traffic by these sources then a new monetary metric suddenly",
    "start": "1669220",
    "end": "1674620"
  },
  {
    "text": "metrics goes wild and your alerts start firing all because someone ran a performance test somewhere else like not even on your service potential",
    "start": "1674620",
    "end": "1680790"
  },
  {
    "text": "upstream right so that's bad so by using the baggage and propagating this sort of",
    "start": "1680790",
    "end": "1686040"
  },
  {
    "text": "the type of traffic that's getting into your service you can separate metrics regionals at the dimension and then you",
    "start": "1686040",
    "end": "1692010"
  },
  {
    "text": "put alerts on the real production metrics and you say okay all test metrics I'm not going to fire alerts in the middle of night in the similar thing",
    "start": "1692010",
    "end": "1699060"
  },
  {
    "text": "is tendancy this is what essentially the custom information is you pass it around and you can do a lot of cost attribution",
    "start": "1699060",
    "end": "1705630"
  },
  {
    "text": "using that and calcining is another aspect like if we have 3000 micro services and you do the cows monkey",
    "start": "1705630",
    "end": "1712440"
  },
  {
    "text": "approach you're going to like keep killing things forever and not find anything because there's too many permutations of things that you can kill",
    "start": "1712440",
    "end": "1719010"
  },
  {
    "text": "and and figure out what affects the actual reliability of the service so with with tracing you can actually do",
    "start": "1719010",
    "end": "1725670"
  },
  {
    "text": "targeted sort of cows introductions into the architecture based on like you say",
    "start": "1725670",
    "end": "1731220"
  },
  {
    "text": "no queue you know where the request is going you can encode certain parameters saying okay well when it gets to this",
    "start": "1731220",
    "end": "1736770"
  },
  {
    "text": "point just kill that point or like black hole it and so if you pass that information in the baggage in the",
    "start": "1736770",
    "end": "1741900"
  },
  {
    "text": "request it reaches and it's again transaction specific so that's important is here is that transaction specific",
    "start": "1741900",
    "end": "1748850"
  },
  {
    "start": "1747000",
    "end": "1767000"
  },
  {
    "text": "so one other thing is kind of useful we measure the adoption and the trace quality so we wrote the process which",
    "start": "1750050",
    "end": "1756240"
  },
  {
    "text": "kind of looks at all the traces come in from various application and says okay well does this actually trace look",
    "start": "1756240",
    "end": "1762000"
  },
  {
    "text": "correctly the instrumentation makes sense and if it's not we sort of erase",
    "start": "1762000",
    "end": "1767250"
  },
  {
    "start": "1767000",
    "end": "1789000"
  },
  {
    "text": "certain things like you know if you can see that but this is like a dashboard you can get by services just oh these",
    "start": "1767250",
    "end": "1772380"
  },
  {
    "text": "are all the metrics specifically for tracing quality and these metrics like this is good but this is not so good you",
    "start": "1772380",
    "end": "1778140"
  },
  {
    "text": "can improve it and this is how right so we service this information as part of like a standard like a quality metric",
    "start": "1778140",
    "end": "1784890"
  },
  {
    "text": "for or quality dashboard for a service and that every service guess integration",
    "start": "1784890",
    "end": "1789990"
  },
  {
    "text": "with other tools is supremely helpful for rolling out racing because those tools are your additional sort of people",
    "start": "1789990",
    "end": "1797820"
  },
  {
    "text": "who can go and and and and harass other people to implement tracing instead of you doing this so I'm writing to the",
    "start": "1797820",
    "end": "1804900"
  },
  {
    "text": "time but like black box testing I mentioned is like external testing tool but because",
    "start": "1804900",
    "end": "1810370"
  },
  {
    "text": "it's a low traffic you can actually force tracing and make sure that every request from the black box tool is",
    "start": "1810370",
    "end": "1815649"
  },
  {
    "text": "actually traced and then you get to trace ID and suddenly something fails you can raise an alert and say oh and by the way this felt right so as opposed to",
    "start": "1815649",
    "end": "1823450"
  },
  {
    "text": "if you don't have that information all you know that this end point to your total API layers failed with trace you",
    "start": "1823450",
    "end": "1829720"
  },
  {
    "text": "can pinpoint some downstream service that's responsible developer studio is kind of an IDE for developers tuber we",
    "start": "1829720",
    "end": "1835840"
  },
  {
    "text": "have there where you can drag your position on the map put the driver here and simulate the trip and all this fun",
    "start": "1835840",
    "end": "1841000"
  },
  {
    "text": "it captures all kinds of requests going on between the api's and it also does tracing so again very useful people can",
    "start": "1841000",
    "end": "1847510"
  },
  {
    "text": "actually get used to using tracing I mean I'm not a showman or sorry I'm not",
    "start": "1847510",
    "end": "1853389"
  },
  {
    "start": "1849000",
    "end": "1867000"
  },
  {
    "text": "a sales person so this is sort of kind of obvious point but tracing is a product you have to sell it you have to",
    "start": "1853389",
    "end": "1860409"
  },
  {
    "text": "show show value to your customers right and I don't know what this graphics is about really and finally well I can't",
    "start": "1860409",
    "end": "1870250"
  },
  {
    "start": "1867000",
    "end": "1913000"
  },
  {
    "text": "really unfortunately go the service dependence diagram so I mentioned that this is very powerful tool for actually understanding what your application is",
    "start": "1870250",
    "end": "1876159"
  },
  {
    "text": "doing right or how the system is organized and so you can see there are a lot of questions like is my service",
    "start": "1876159",
    "end": "1882309"
  },
  {
    "text": "critical for overall request flow what workflows business workflows my service is participating in right will my",
    "start": "1882309",
    "end": "1888970"
  },
  {
    "text": "service arrive Halloween the big thing for bird like Halloween is super high traffic for us and then we always do",
    "start": "1888970",
    "end": "1894789"
  },
  {
    "text": "this capacity planning to make sure we have enough capacity for services and then but you don't really know without",
    "start": "1894789",
    "end": "1900039"
  },
  {
    "text": "tracing because just because our business number of trips increases by two times doesn't mean you service needs",
    "start": "1900039",
    "end": "1906490"
  },
  {
    "text": "two times capacity it could be ten times it looks like the factor is not clear actually so with tracing you can get",
    "start": "1906490",
    "end": "1912460"
  },
  {
    "text": "that factor right and another thing here is like your sample dependency diagram",
    "start": "1912460",
    "end": "1917490"
  },
  {
    "start": "1913000",
    "end": "1961000"
  },
  {
    "text": "so the previous one you remember that was kind of a simple version because it just measured pairwise connections",
    "start": "1917490",
    "end": "1924039"
  },
  {
    "text": "between services this one actually looks at the path and so when we say this",
    "start": "1924039",
    "end": "1929429"
  },
  {
    "text": "dingoo at the top left is : cursor with shrimp this is not real names and it's",
    "start": "1929429",
    "end": "1935139"
  },
  {
    "text": "calling service dog so my question is is dingo service actually dependent on the door",
    "start": "1935139",
    "end": "1940300"
  },
  {
    "text": "not no way to tell here right we have a tool which I will demo if you come to",
    "start": "1940300",
    "end": "1947140"
  },
  {
    "text": "the Jager dip dive session later tomorrow because I'm running the time",
    "start": "1947140",
    "end": "1953020"
  },
  {
    "text": "but you can actually tell by by this new tool where you wear which services depends like at any depth of the",
    "start": "1953020",
    "end": "1959860"
  },
  {
    "text": "dependency residence the pairwise and finally my closing thought is that monitoring traditionally has been a lot",
    "start": "1959860",
    "end": "1966700"
  },
  {
    "text": "about firefighting like our measure is something the fire alerts I do something really tracing can do that as well it",
    "start": "1966700",
    "end": "1973810"
  },
  {
    "text": "can help you root cause and troubleshoot problems but Tracy also provides a very vast amount of data to do better than",
    "start": "1973810",
    "end": "1980500"
  },
  {
    "text": "that to do like fire prevention to figure out what your capacity constraints how you should optimize the",
    "start": "1980500",
    "end": "1986290"
  },
  {
    "text": "performance and which components in the architects you need to be optimized because they are the actual bottlenecks etc so an improving reliability",
    "start": "1986290",
    "end": "1992740"
  },
  {
    "text": "basically of the service so quick call out so as I said there is going to be",
    "start": "1992740",
    "end": "1998710"
  },
  {
    "start": "1995000",
    "end": "2037000"
  },
  {
    "text": "two more actually three more sessions on Jaeger specifically and we will show",
    "start": "1998710",
    "end": "2003810"
  },
  {
    "text": "some of the demos again there and there's also open tration salon I highly recommend to attend that there's going",
    "start": "2003810",
    "end": "2009090"
  },
  {
    "text": "to be general discussion about racing I also highly recommend not missing than signalmen skin out about tracing in",
    "start": "2009090",
    "end": "2016230"
  },
  {
    "text": "meshes that don't know what it's about super interesting and finally if you",
    "start": "2016230",
    "end": "2022230"
  },
  {
    "text": "have more info if you need more information this is our website some ways to get in touch with us the gym",
    "start": "2022230",
    "end": "2027780"
  },
  {
    "text": "walkthrough and it's an open source project so all contributions are welcome thank you",
    "start": "2027780",
    "end": "2032910"
  },
  {
    "text": "[Applause]",
    "start": "2032910",
    "end": "2039749"
  }
]