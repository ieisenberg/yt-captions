[
  {
    "start": "0",
    "end": "72000"
  },
  {
    "text": "thanks everybody thanks for joining i'm going to be talking about building apps and kubernetes uh and we've got a few demos to run",
    "start": "80",
    "end": "6560"
  },
  {
    "text": "through so i'm going to not try not to spend too much time on slides but i think it's important to acknowledge the",
    "start": "6560",
    "end": "13280"
  },
  {
    "text": "importance of keeping credentials safe the the recent twitter breach is just a",
    "start": "13280",
    "end": "19600"
  },
  {
    "text": "great example where uh some folks got access to some uh to a",
    "start": "19600",
    "end": "24880"
  },
  {
    "text": "slack to an internal slack channel where uh tool credentials were posted uh actually",
    "start": "24880",
    "end": "31199"
  },
  {
    "text": "pinned in a slack channel and that gave them the credentials they needed to do the uh",
    "start": "31199",
    "end": "37120"
  },
  {
    "text": "the bit of mystic that that they did last week uh we've seen similar with tesla",
    "start": "37120",
    "end": "43360"
  },
  {
    "text": "where it was actually a kubernetes console that had been configured to not require",
    "start": "43360",
    "end": "48399"
  },
  {
    "text": "uh any credentials to access uh and someone had uh put eddie was",
    "start": "48399",
    "end": "53760"
  },
  {
    "text": "access keys and kubernetes and they were able to the the hacker was able to access those through the browser through",
    "start": "53760",
    "end": "60000"
  },
  {
    "text": "the uh kubernetes console and see those secrets and and then copy those secrets and use those so",
    "start": "60000",
    "end": "66000"
  },
  {
    "text": "the the point is how do we keep credentials safe we can't actually build applications without secrets but how do",
    "start": "66000",
    "end": "71680"
  },
  {
    "text": "we keep those secrets out of the hands of people who would uh who would do mischief by them",
    "start": "71680",
    "end": "77600"
  },
  {
    "start": "72000",
    "end": "113000"
  },
  {
    "text": "we often see a lot of tension or at least some tension between the application development teams the",
    "start": "77600",
    "end": "83119"
  },
  {
    "text": "devops groups the cloud teams that are trying to move quickly to deliver business value",
    "start": "83119",
    "end": "89040"
  },
  {
    "text": "uh and the security teams who are trying to keep some controls in place uh and and you know this friction",
    "start": "89040",
    "end": "95600"
  },
  {
    "text": "sometimes bears out in um either development going off and doing their own thing that was a kind of a rehash of the shadow i.t that that",
    "start": "95600",
    "end": "102960"
  },
  {
    "text": "we've seen recur in in different forms over the years or the security team owns everything and",
    "start": "102960",
    "end": "108880"
  },
  {
    "text": "becomes a bottleneck and in either cases is that a win-win scenario what we really want to do is enable that devops",
    "start": "108880",
    "end": "115360"
  },
  {
    "start": "113000",
    "end": "161000"
  },
  {
    "text": "collaboration between the security teams and development teams enable developers to be secure as transparently as",
    "start": "115360",
    "end": "122560"
  },
  {
    "text": "possible relieve them of the reporting burdens that security is is used to dealing with in terms of",
    "start": "122560",
    "end": "129520"
  },
  {
    "text": "audit risk compliance uh these types of things um and empower the security team to",
    "start": "129520",
    "end": "134879"
  },
  {
    "text": "deliver a service or deliver a capability that developers won't find cumbersome uh",
    "start": "134879",
    "end": "141040"
  },
  {
    "text": "and and more importantly won't find a bottleneck or an impairment to their workflows",
    "start": "141040",
    "end": "146319"
  },
  {
    "text": "so this you know the whole uh good old shift left mentality is is alive and well here",
    "start": "146319",
    "end": "151760"
  },
  {
    "text": "and this is what we're enabling uh folks to do we want to make development secure",
    "start": "151760",
    "end": "157760"
  },
  {
    "text": "but we want to do it with the oversight of the security team and so it is a shared responsibility",
    "start": "157760",
    "end": "164319"
  },
  {
    "start": "161000",
    "end": "318000"
  },
  {
    "text": "and we have you know sort of itemized these best practices",
    "start": "164319",
    "end": "169599"
  },
  {
    "text": "the first step is absolutely getting hard-coded secrets out of your applications most people have gotten",
    "start": "169599",
    "end": "175760"
  },
  {
    "text": "that memo and and have have at least taken steps to do that but of course as",
    "start": "175760",
    "end": "181760"
  },
  {
    "text": "soon as you start removing secrets you need a place to put those and so there is a tendency to put secrets into",
    "start": "181760",
    "end": "189519"
  },
  {
    "text": "the most at hand place you know if you're in aws you might look at aws",
    "start": "189519",
    "end": "194800"
  },
  {
    "text": "secrets manager if you're in azure you might look at azure key vault if you're in kubernetes obviously you're going to look at kubernetes secrets so we call",
    "start": "194800",
    "end": "201440"
  },
  {
    "text": "these security islands they're little pockets of security and they may be okay in and of themselves",
    "start": "201440",
    "end": "208000"
  },
  {
    "text": "but this this audit risk compliance practice really requires some insight the",
    "start": "208000",
    "end": "214080"
  },
  {
    "text": "security team needs to understand how credentials are being used how they're being secured and it's very difficult",
    "start": "214080",
    "end": "219120"
  },
  {
    "text": "when you have multiple multiples of those islands no in in this time of covid",
    "start": "219120",
    "end": "225200"
  },
  {
    "text": "and the time of very poorest network boundaries it's not been any more obvious that",
    "start": "225200",
    "end": "232400"
  },
  {
    "text": "perimeters don't work anymore so identities really are the only way of securing privilege so we need to create",
    "start": "232400",
    "end": "237920"
  },
  {
    "text": "identities for absolutely everything especially anything that's going to be accessing a sensitive system we need to",
    "start": "237920",
    "end": "244400"
  },
  {
    "text": "authenticate it strongly limit its scope so it it's authorized to",
    "start": "244400",
    "end": "249439"
  },
  {
    "text": "access only what it needs to app the principle at least privilege and we want to eliminate",
    "start": "249439",
    "end": "255120"
  },
  {
    "text": "this problem that i'll speak more to around secret zero how do we secure that bootstrap uh credential that",
    "start": "255120",
    "end": "261759"
  },
  {
    "text": "applications need to kick this this all off credential rotation is a fundamental",
    "start": "261759",
    "end": "267600"
  },
  {
    "text": "best practice for just ensuring that if a secret gets compromised and you have to assume that",
    "start": "267600",
    "end": "273280"
  },
  {
    "text": "they will be you have to assume that credentials will at some point get compromised rotation",
    "start": "273280",
    "end": "278639"
  },
  {
    "text": "effectively nukes that that secret in such a way that whoever has it is no longer of any use so so aggressive uh",
    "start": "278639",
    "end": "286479"
  },
  {
    "text": "regular rotation of secrets especially secrets being used by applications is is",
    "start": "286479",
    "end": "291759"
  },
  {
    "text": "critical but that also then says how do we do that in such a way that applications aren't",
    "start": "291759",
    "end": "296960"
  },
  {
    "text": "disrupted that applications connectivity and ability to connect back in systems",
    "start": "296960",
    "end": "302160"
  },
  {
    "text": "isn't isn't uh impaired because the last thing we want is for application downtime to be",
    "start": "302160",
    "end": "309039"
  },
  {
    "text": "triggered by uh credential you know good credential management so applications always have to be able to",
    "start": "309039",
    "end": "315039"
  },
  {
    "text": "get their secrets they always have to be able to connect back in systems but we want to do all that securely i've spoken to this issue of security",
    "start": "315039",
    "end": "321680"
  },
  {
    "start": "318000",
    "end": "371000"
  },
  {
    "text": "islands but this is the current state we see most organizations in where they have",
    "start": "321680",
    "end": "326880"
  },
  {
    "text": "homegrown solutions or they're using capabilities of the tools of the platforms that they're running in to",
    "start": "326880",
    "end": "332400"
  },
  {
    "text": "store secrets we'll talk a fair bit here today about kubernetes secrets um some of the",
    "start": "332400",
    "end": "337759"
  },
  {
    "text": "challenges with that some of the things that we can do that we can help with in terms of uh mitigating the risk of those",
    "start": "337759",
    "end": "344240"
  },
  {
    "text": "uh but this this is the current state that we're seeing most organizations in",
    "start": "344240",
    "end": "349520"
  },
  {
    "text": "uh and and where we're coming to market as a security company and putting security first but providing that so i",
    "start": "349520",
    "end": "356319"
  },
  {
    "text": "like to say we're a security company that gets devops and so we're empowering the security team to do that governance",
    "start": "356319",
    "end": "362400"
  },
  {
    "text": "risk complying governance risk compliance reporting but not getting in the way of of the",
    "start": "362400",
    "end": "370479"
  },
  {
    "text": "development workflows so we want everything to have an identity whether it's a person or a process",
    "start": "370479",
    "end": "376000"
  },
  {
    "start": "371000",
    "end": "438000"
  },
  {
    "text": "we want strong authentication for all of that we want to authorize with least privilege so we're only granting access",
    "start": "376000",
    "end": "381280"
  },
  {
    "text": "to what the identity needs and no more than that and then we obviously want to audit",
    "start": "381280",
    "end": "387120"
  },
  {
    "text": "everything all activity needs to be audited so that if there is an issue we are able to detect it as",
    "start": "387120",
    "end": "394160"
  },
  {
    "text": "quickly as possible and certainly do that sort of post-mortem analysis to to understand what what happened or or",
    "start": "394160",
    "end": "401120"
  },
  {
    "text": "what identity went rogue the secret zero problem is unique to applications so",
    "start": "401120",
    "end": "407039"
  },
  {
    "text": "humans have a built-in vault where they can mostly remember their own passwords",
    "start": "407039",
    "end": "412160"
  },
  {
    "text": "or at least answers to security questions but the non-humans uh where does that bootstrap password go",
    "start": "412160",
    "end": "418479"
  },
  {
    "text": "or that token or the or the cert or whatever that credential is where do you store that in such a way that the",
    "start": "418479",
    "end": "424479"
  },
  {
    "text": "application can get it but nobody else can how do you secure it but still leave it accessible to the",
    "start": "424479",
    "end": "430479"
  },
  {
    "text": "application we call this the secret zero problem and and we've devised ways around that",
    "start": "430479",
    "end": "436960"
  },
  {
    "text": "so uh this is often one of the first questions i get when i'm talking about this space uh people have wrestled with",
    "start": "436960",
    "end": "443759"
  },
  {
    "start": "438000",
    "end": "569000"
  },
  {
    "text": "this uh and it is it is a a difficult problem there's basically two ways",
    "start": "443759",
    "end": "449599"
  },
  {
    "text": "to do authentication one is credential based and in the human world this is your passport or your driver's license",
    "start": "449599",
    "end": "456560"
  },
  {
    "text": "say thing that you have that vouches for your identity that says you",
    "start": "456560",
    "end": "461599"
  },
  {
    "text": "are who you say you are in the application world we have api keys we have tokens we have certs but these are",
    "start": "461599",
    "end": "466800"
  },
  {
    "text": "all things that have to be stored somewhere and they create that secret zero problem these these credentials can be stolen",
    "start": "466800",
    "end": "473759"
  },
  {
    "text": "and used to impersonate an identity and so a stronger way of doing authentication is to use attributes that",
    "start": "473759",
    "end": "480639"
  },
  {
    "text": "can be validated with a trusted authority and so if we think about biometrics in",
    "start": "480639",
    "end": "486240"
  },
  {
    "text": "the human world if i have my fingerprints on record or if my retina scan is on record then when",
    "start": "486240",
    "end": "491599"
  },
  {
    "text": "i go to the airport and i go through the clear kiosk and i present my fingerprints they can be compared to my fingerprints on record and that's a much",
    "start": "491599",
    "end": "498400"
  },
  {
    "text": "stronger way of authenticating myself it's it's uh it's much harder to steal fingerprints",
    "start": "498400",
    "end": "504479"
  },
  {
    "text": "and so we want to use this same type of of approach with applications but we",
    "start": "504479",
    "end": "510240"
  },
  {
    "text": "need a way to verify these attributes these attributes so the idea is that we",
    "start": "510240",
    "end": "516080"
  },
  {
    "text": "are going to allow list we are going to pre-enroll or pre-define identities along with the attributes that will be",
    "start": "516080",
    "end": "522560"
  },
  {
    "text": "used to validate them and then at runtime when that request comes in we can say is",
    "start": "522560",
    "end": "528720"
  },
  {
    "text": "this an identity we know if it's not even on the list of allowed identities we can reject that",
    "start": "528720",
    "end": "534000"
  },
  {
    "text": "that request outright if it is on the allowed list then we can call back to the platform",
    "start": "534000",
    "end": "540000"
  },
  {
    "text": "uh to validate that identity and this is the approach that we take in kubernetes as well as on the cloud platforms and",
    "start": "540000",
    "end": "546160"
  },
  {
    "text": "even with some tools where we can look at each of these as a trusted authority to understand and know what's running in",
    "start": "546160",
    "end": "553120"
  },
  {
    "text": "it and we can use the attributes uh of of of a jenkins job of a i am role in aws",
    "start": "553120",
    "end": "560839"
  },
  {
    "text": "of uh metadata jot tokens in in azure use those as platform attributes to",
    "start": "560839",
    "end": "567760"
  },
  {
    "text": "validate the these these actors these these pods are these applications",
    "start": "567760",
    "end": "573440"
  },
  {
    "text": "um so the flow and i'm going to be specifically talking about the open source",
    "start": "573440",
    "end": "579279"
  },
  {
    "text": "solution conjurer so cyber arc conjure is an open source vault for storing and",
    "start": "579279",
    "end": "585920"
  },
  {
    "text": "retrieving secrets it is available at conjure.org there's lots of",
    "start": "585920",
    "end": "592720"
  },
  {
    "text": "content here lots of good blog content uh talking about the secret zero problem uh various aspects of",
    "start": "592720",
    "end": "599760"
  },
  {
    "text": "application or secrets management for applications uh the apis are well documented here um and and we we've got",
    "start": "599760",
    "end": "607920"
  },
  {
    "text": "just just a ton of content we'll be referring back to that so uh we're going to be talking about",
    "start": "607920",
    "end": "613120"
  },
  {
    "text": "secrets management in the context of open source conjurer um the workflow here is that you",
    "start": "613120",
    "end": "618640"
  },
  {
    "text": "authenticate using some strategy so we support multiple different strategies for different platforms and different",
    "start": "618640",
    "end": "624079"
  },
  {
    "text": "use cases however authentication happens successful authentication results in us",
    "start": "624079",
    "end": "629279"
  },
  {
    "text": "issuing a short-lived jot token this is a token that has an eight minute time to live",
    "start": "629279",
    "end": "635040"
  },
  {
    "text": "and basically it's a bearer token that can be used to retrieve secrets the secrets are retrieved based on",
    "start": "635040",
    "end": "641279"
  },
  {
    "text": "authorization per policies so we authenticate to validate the the identity of the application that",
    "start": "641279",
    "end": "647760"
  },
  {
    "text": "identity is constrained to access only the things that it's been allowed to access and assuming it's it makes a request for",
    "start": "647760",
    "end": "654880"
  },
  {
    "text": "a secret that it has access to it can retrieve that secret and use it and that secret could be a certificate",
    "start": "654880",
    "end": "660320"
  },
  {
    "text": "it could be an ssh key it could be a password uh it could be a token basically any binary value",
    "start": "660320",
    "end": "666399"
  },
  {
    "text": "uh that we want to use for for credentials can be used to connect to these these target systems these",
    "start": "666399",
    "end": "671920"
  },
  {
    "text": "back-end systems at the end of eight minutes though that token will expire and the application has to",
    "start": "671920",
    "end": "677920"
  },
  {
    "text": "re-authenticate and this will play into some of the use cases that we'll be demoing here shortly",
    "start": "677920",
    "end": "683120"
  },
  {
    "text": "because that access token when it expires basically you've lost access to secrets",
    "start": "683120",
    "end": "688399"
  },
  {
    "text": "and given that we want applications to always have access to their secrets there's certain",
    "start": "688399",
    "end": "693680"
  },
  {
    "text": "certain things that have to be done to to to address that so to dig into kubernetes authentication",
    "start": "693680",
    "end": "701680"
  },
  {
    "start": "697000",
    "end": "895000"
  },
  {
    "text": "in the conjure environment a little bit more uh this is elaborating on that",
    "start": "701680",
    "end": "706720"
  },
  {
    "text": "workflow that i talked through a minute ago basically the the application identity is",
    "start": "706720",
    "end": "712240"
  },
  {
    "text": "allow listed or white listed and it's defined or its attributes are defined in terms of the cluster and the name space",
    "start": "712240",
    "end": "718880"
  },
  {
    "text": "that it's running in so we effectively give an identity to the cluster and of course name spaces are are native in in",
    "start": "718880",
    "end": "726240"
  },
  {
    "text": "kubernetes and so these would be ways of validating an identity now this this means that applications running the",
    "start": "726240",
    "end": "732959"
  },
  {
    "text": "same name space would share the same identity and sometimes you want to go more granular than that so we also give",
    "start": "732959",
    "end": "739279"
  },
  {
    "text": "you the ability to add a service account a kubernetes service account as an attribute that can",
    "start": "739279",
    "end": "745440"
  },
  {
    "text": "be validated for that identity so the identity is just a friendly name but these attributes are annotations on",
    "start": "745440",
    "end": "752160"
  },
  {
    "text": "that identity that we can use to validate it at runtime so that's the identity gets defined via",
    "start": "752160",
    "end": "758560"
  },
  {
    "text": "policy uh gets loaded into conjure and defines that identity along with the",
    "start": "758560",
    "end": "763600"
  },
  {
    "text": "attributes at runtime a a a helper container running either as",
    "start": "763600",
    "end": "770160"
  },
  {
    "text": "a sidecar or as an init container will do what what is effectively a",
    "start": "770160",
    "end": "775279"
  },
  {
    "text": "spiffy workflow this is where the authenticator is going to format a certificate signing request",
    "start": "775279",
    "end": "782079"
  },
  {
    "text": "the ultimate goal is to create a a mutual tls connection with the server",
    "start": "782079",
    "end": "787440"
  },
  {
    "text": "with the conjure contour server the authenticator submits that certificate signing request with the",
    "start": "787440",
    "end": "792639"
  },
  {
    "text": "attributes from the pod metadata attributes from the pod that can be used to validate",
    "start": "792639",
    "end": "798560"
  },
  {
    "text": "that pod with kubernetes so when that request comes in conjurer will parse that csr call back",
    "start": "798560",
    "end": "805279"
  },
  {
    "text": "to the kubernetes api to validate those attributes if those attributes are for an identity that's known and they check",
    "start": "805279",
    "end": "811600"
  },
  {
    "text": "out with with kubernetes then we will issue that access token",
    "start": "811600",
    "end": "816720"
  },
  {
    "text": "that access token then actually we will issue a cert and a private key that can be used for",
    "start": "816720",
    "end": "821920"
  },
  {
    "text": "credentials for authentication using that mutual tls protocol and then uh that authentication gives us",
    "start": "821920",
    "end": "828480"
  },
  {
    "text": "the access token if you're familiar with spiffy this is uh basically that that same",
    "start": "828480",
    "end": "834880"
  },
  {
    "text": "workflow and in fact the certificate that is issued the credentials uh that are",
    "start": "834880",
    "end": "840480"
  },
  {
    "text": "issued here contain a spiffy s bit so we're very bullish on spiffy and the whole idea",
    "start": "840480",
    "end": "847360"
  },
  {
    "text": "of uh of defining identities for workloads not for infrastructure we want to",
    "start": "847360",
    "end": "852560"
  },
  {
    "text": "authenticate workloads not the infrastructure that they're running on spiffy is uh part of the cncf uh",
    "start": "852560",
    "end": "860160"
  },
  {
    "text": "framework the under the umbrella of cncf and they're doing really great work",
    "start": "860160",
    "end": "865360"
  },
  {
    "text": "around how do you establish identities strong identities and strong authentication for applications so we're",
    "start": "865360",
    "end": "872720"
  },
  {
    "text": "basically using that workflow uh where the the authenticator is the",
    "start": "872720",
    "end": "877920"
  },
  {
    "text": "client uh and the the other party is the the conjurer server and and using that spiffy",
    "start": "877920",
    "end": "884959"
  },
  {
    "text": "workflow to create uh a spiffy svid a spiffy verifiable identity document which is that 509 cert",
    "start": "884959",
    "end": "892079"
  },
  {
    "text": "uh so um so that's that's a bit about that so um we're on to the demos now which i",
    "start": "892079",
    "end": "899680"
  },
  {
    "start": "895000",
    "end": "1253000"
  },
  {
    "text": "think is the more interesting part of any presentation um feel free to ask any questions you know",
    "start": "899680",
    "end": "906160"
  },
  {
    "text": "if anything wasn't clear of anything i went over we're basically going to go through some some examples of how authentication",
    "start": "906160",
    "end": "913519"
  },
  {
    "text": "works in various ways of retrieving secrets we've got several different demos here uh i call them labs",
    "start": "913519",
    "end": "920000"
  },
  {
    "text": "this is actually set up to be a multi-user lab if anyone ever wanted to run a clinic or or attend",
    "start": "920000",
    "end": "927760"
  },
  {
    "text": "one of our workshops um and we're going to uh walk through several different ways of retrieving",
    "start": "927760",
    "end": "933519"
  },
  {
    "text": "secrets that are supported by conjurers so sometimes people just want an api and and a lot of times developers were just",
    "start": "933519",
    "end": "940000"
  },
  {
    "text": "saying where's the documentation for your apis well it's it's here you know the api",
    "start": "940000",
    "end": "945199"
  },
  {
    "text": "docs are here uh if you go to the developer uh box here here's our rest apis uh and here",
    "start": "945199",
    "end": "952560"
  },
  {
    "text": "here's all the stuff for how to how to retrieve secrets how to authenticate uh so it's all right there there's no gate",
    "start": "952560",
    "end": "958959"
  },
  {
    "text": "on it um and so you can you can go look at this at your leisure uh so what we're going to show is how to",
    "start": "958959",
    "end": "965839"
  },
  {
    "text": "pull database credentials via the rest api or the app to connect to a database now i",
    "start": "965839",
    "end": "971920"
  },
  {
    "text": "don't actually have a database to connect to except for this last example so we're just going to show retrieval of",
    "start": "971920",
    "end": "977279"
  },
  {
    "text": "the secrets and echoing in those secrets in these first three labs but but to get on with that",
    "start": "977279",
    "end": "983600"
  },
  {
    "text": "um this is my demo environment we do a cube cuddle here i'm just running uh",
    "start": "983600",
    "end": "989199"
  },
  {
    "text": "with docker desktop kubernetes which is is hugely convenient i used to use mini",
    "start": "989199",
    "end": "994399"
  },
  {
    "text": "cube a lot but now that kubernetes is in docker desktop i seem to only use that",
    "start": "994399",
    "end": "999920"
  },
  {
    "text": "anymore if i do get pods here in my test apps namespace",
    "start": "999920",
    "end": "1007759"
  },
  {
    "text": "and what i'm going to do is just alias that so i don't have to keep typing that so so you guys don't have to watch me",
    "start": "1008720",
    "end": "1014480"
  },
  {
    "text": "type that uh now i can say kgp and that's much",
    "start": "1014480",
    "end": "1021120"
  },
  {
    "text": "simpler so you can see these applications have been running for a while um i'm going to first walk through",
    "start": "1021120",
    "end": "1027038"
  },
  {
    "text": "where that helper container is running as a sidecar the authenticator client that initiates that authentication",
    "start": "1027039",
    "end": "1033520"
  },
  {
    "text": "workflow that that spiffy based authentication workflow where where it's running as a sidecar i can",
    "start": "1033520",
    "end": "1040400"
  },
  {
    "text": "exec into the application container using this this handy little script now i'm in the application container",
    "start": "1040400",
    "end": "1047120"
  },
  {
    "text": "and i can run this script which simulates what an application would do using a",
    "start": "1047120",
    "end": "1052480"
  },
  {
    "text": "rest api so here's here's the rest call uh basically this this call here to get",
    "start": "1052480",
    "end": "1058000"
  },
  {
    "text": "secrets um this this notation doesn't include the url but you can see that",
    "start": "1058000",
    "end": "1063679"
  },
  {
    "text": "here's our our url uh and the the endpoint for getting a password",
    "start": "1063679",
    "end": "1070080"
  },
  {
    "text": "basically we're we're doing that here we're using some environment variables so the the authenticator",
    "start": "1070080",
    "end": "1076880"
  },
  {
    "text": "will drop that job token in a shared memory volume so this application container has access to",
    "start": "1076880",
    "end": "1082799"
  },
  {
    "text": "that job token at this location if we want to look at it it's actually in run conjure access",
    "start": "1082799",
    "end": "1089440"
  },
  {
    "text": "token and so there's there is my jot token this is running as a sidecar this token",
    "start": "1089440",
    "end": "1095760"
  },
  {
    "text": "will be refreshed every six minutes so the the authenticator stays running and it's continually refreshing this job",
    "start": "1095760",
    "end": "1102160"
  },
  {
    "text": "token every six minutes so it never goes stale i always have the ability to run",
    "start": "1102160",
    "end": "1107200"
  },
  {
    "text": "my application to retrieve secret so when i run this application it picks up the jaw token",
    "start": "1107200",
    "end": "1112799"
  },
  {
    "text": "it uh basics deforming codes it trims the control characters out of it earl encodes the name of the variable because",
    "start": "1112799",
    "end": "1119440"
  },
  {
    "text": "the variable the variable name has slashes in it so basically converting these these slashes",
    "start": "1119440",
    "end": "1125039"
  },
  {
    "text": "to percent to s and then we we make our call to retrieve the secret get the value echo the value",
    "start": "1125039",
    "end": "1130559"
  },
  {
    "text": "so that all that all happened there i can go back in edit edit my application i'm making air",
    "start": "1130559",
    "end": "1136320"
  },
  {
    "text": "quotes when i say application because it it really is just a bash script but i can say uh",
    "start": "1136320",
    "end": "1141919"
  },
  {
    "text": "username here and retrieve the username just as easily oops",
    "start": "1141919",
    "end": "1147760"
  },
  {
    "text": "wq so now i've got the username so we'll see this in the next uh couple of",
    "start": "1148080",
    "end": "1154799"
  },
  {
    "text": "examples oracle db user is a username here's a good strong password with upper lowercase",
    "start": "1154799",
    "end": "1160799"
  },
  {
    "text": "numerals and special characters so so and this would be the thing that we",
    "start": "1160799",
    "end": "1166559"
  },
  {
    "text": "would want to rotate but now we're dynamically retrieving it it's not part of the application it's being",
    "start": "1166559",
    "end": "1172000"
  },
  {
    "text": "dynamically retrieved from the service the identity of this pod as being very strongly authenticated using that that",
    "start": "1172000",
    "end": "1179200"
  },
  {
    "text": "spiffy based authentication uh protocol that that we walk through um we have the access token here and the",
    "start": "1179200",
    "end": "1185520"
  },
  {
    "text": "application can pick up that access token and use the the rest api or use any of the client libraries that",
    "start": "1185520",
    "end": "1191600"
  },
  {
    "text": "we have because there's there there are other ways um and so basically we have java go ruby and net uh effectively wrappers for the",
    "start": "1191600",
    "end": "1199280"
  },
  {
    "text": "rest api under the covers everything's a rest call but these are little higher level uh bindings for for what you know these",
    "start": "1199280",
    "end": "1206880"
  },
  {
    "text": "languages that you may be using uh provide a little bit higher level interface um but that means that your applications",
    "start": "1206880",
    "end": "1213840"
  },
  {
    "text": "can always pull secrets and so given that the sidecar is running there that token's always going to be there",
    "start": "1213840",
    "end": "1220159"
  },
  {
    "text": "and and fresh and be able to use to retrieve secrets so that's that's our first example here where we've got an",
    "start": "1220159",
    "end": "1226880"
  },
  {
    "text": "exam an application using the api to retrieve secrets and they would simply use that oracle",
    "start": "1226880",
    "end": "1233120"
  },
  {
    "text": "database username and password to connect to the database um second example now is using another",
    "start": "1233120",
    "end": "1239039"
  },
  {
    "text": "open source project that cyberark sponsors called summon summon is a hugely useful tool",
    "start": "1239039",
    "end": "1245600"
  },
  {
    "text": "it is something that um that solves just a ton of problems it is that level of indirection that solves so",
    "start": "1245600",
    "end": "1253440"
  },
  {
    "start": "1253000",
    "end": "1647000"
  },
  {
    "text": "many problems in computer science so summon will retrieve secrets and then",
    "start": "1253440",
    "end": "1258559"
  },
  {
    "text": "call an application with those secrets populated in environment variables or in",
    "start": "1258559",
    "end": "1264000"
  },
  {
    "text": "memory map files the goal is to keep the secrets ephemeral but not require the application to know how to authenticate",
    "start": "1264000",
    "end": "1270000"
  },
  {
    "text": "or how to how to retrieve secrets in other words the application is is kept uh blissfully unaware of where",
    "start": "1270000",
    "end": "1277679"
  },
  {
    "text": "these secrets are coming from and so that means that you may be pulling seekers from",
    "start": "1277679",
    "end": "1282960"
  },
  {
    "text": "different places in different environments so the application can stay immutable",
    "start": "1282960",
    "end": "1288000"
  },
  {
    "text": "the applications configuration doesn't have to know anything about where it's running the secrets are simply injected",
    "start": "1288000",
    "end": "1293679"
  },
  {
    "text": "into its environment by by summoning so summon will call a provider",
    "start": "1293679",
    "end": "1299760"
  },
  {
    "text": "and it's a plug-in architecture so providers we have for key rings for s3 buckets for",
    "start": "1299760",
    "end": "1307280"
  },
  {
    "text": "uh for lots of of different things uh different back-end systems so this creates that level of",
    "start": "1307280",
    "end": "1313520"
  },
  {
    "text": "abstraction where you can pull secrets from different back-end systems provided for an application the application doesn't have",
    "start": "1313520",
    "end": "1319679"
  },
  {
    "text": "to know how to retrieve it doesn't know where it's coming from that way the application and dev maybe you're pulling secrets from a key ring application and",
    "start": "1319679",
    "end": "1326480"
  },
  {
    "text": "test maybe you're pulling it from you know a azure key vault and that in production",
    "start": "1326480",
    "end": "1333200"
  },
  {
    "text": "you could be pulling secrets from a production ball so um just just hugely valuable",
    "start": "1333200",
    "end": "1338960"
  },
  {
    "text": "um so we're going to use summon in an application in a kubernetes application where the",
    "start": "1338960",
    "end": "1344840"
  },
  {
    "text": "authenticator is running as an init container now so",
    "start": "1344840",
    "end": "1350159"
  },
  {
    "text": "uh summon starts up the application and typically someone would be your entry point for the pod where someone would",
    "start": "1350159",
    "end": "1357679"
  },
  {
    "text": "would pull the secrets call the application uh then the application's off and running with this secret so there's",
    "start": "1357679",
    "end": "1363120"
  },
  {
    "text": "never a an opportunity for the application to retrieve secrets once it's started",
    "start": "1363120",
    "end": "1369360"
  },
  {
    "text": "so this lends itself to that init container pattern and if we go over here to my environment",
    "start": "1369360",
    "end": "1375360"
  },
  {
    "text": "and look here we've got the init container here now look it's been running 79 minutes",
    "start": "1375360",
    "end": "1380799"
  },
  {
    "text": "um and so given that the init container is running the authenticator",
    "start": "1380799",
    "end": "1386960"
  },
  {
    "text": "we may have an issue with our our jot token because we we've",
    "start": "1386960",
    "end": "1392000"
  },
  {
    "text": "already established that only list for eight minutes so if i go into this this environment here",
    "start": "1392000",
    "end": "1397360"
  },
  {
    "text": "uh then we can see that i've got a job token over here",
    "start": "1397360",
    "end": "1403760"
  },
  {
    "text": "um but that job token is suspect and so when i run summon so just to give you a",
    "start": "1403760",
    "end": "1410240"
  },
  {
    "text": "little bit more example of how summon works summon will look by default in a local for a local file called",
    "start": "1410240",
    "end": "1416400"
  },
  {
    "text": "secrets.yaml and this describes the names of the secrets to retrieve it",
    "start": "1416400",
    "end": "1421919"
  },
  {
    "text": "doesn't say what provider to use it doesn't say what backend system these are coming from the contract of a summon provider is it",
    "start": "1421919",
    "end": "1428720"
  },
  {
    "text": "takes a name in and returns the value of that so it's taking the name of a secret returning of the value of the secret in",
    "start": "1428720",
    "end": "1435520"
  },
  {
    "text": "this case i'm using the the conjurer summon provider which is going to use",
    "start": "1435520",
    "end": "1440799"
  },
  {
    "text": "that access token to retrieve secrets with this name and place it uh in an environment",
    "start": "1440799",
    "end": "1446480"
  },
  {
    "text": "variable with this name for the username and this for the password we can see this work if i say summon",
    "start": "1446480",
    "end": "1452559"
  },
  {
    "text": "env and then grep for db underbar but",
    "start": "1452559",
    "end": "1459679"
  },
  {
    "text": "it's not returning anything if i say summon env without repping we can see why",
    "start": "1459679",
    "end": "1465840"
  },
  {
    "text": "i've got an invalid access token so what i need to do is just go bounce that so this is this",
    "start": "1465840",
    "end": "1471679"
  },
  {
    "text": "is the upside and the downside of using an init container in this scenario um we have uh",
    "start": "1471679",
    "end": "1478480"
  },
  {
    "text": "we have the potential if the application should ever want to go re-retrieve secrets first off we've kind of built in",
    "start": "1478480",
    "end": "1485679"
  },
  {
    "text": "the fact that it doesn't know how to retrieve secrets but if the application is going to get",
    "start": "1485679",
    "end": "1490880"
  },
  {
    "text": "uh ever get secrets again it has to be restarted um and so this uh we can see now we've",
    "start": "1490880",
    "end": "1496960"
  },
  {
    "text": "got a new init container running here i'm going to exec into that and now if i say summon env and grep for",
    "start": "1496960",
    "end": "1504799"
  },
  {
    "text": "things beginning with db underbar we got a little bit happier path we see that same oracle database user and that",
    "start": "1504799",
    "end": "1511039"
  },
  {
    "text": "same strong password here and now i can use that to call a very simple application which",
    "start": "1511039",
    "end": "1517520"
  },
  {
    "text": "could then connect to a database uh whoops that's not the one i wanted web app",
    "start": "1517520",
    "end": "1523039"
  },
  {
    "text": "summon so here now what could be simpler here i'm simply echoing these environment",
    "start": "1523039",
    "end": "1528400"
  },
  {
    "text": "variables if i run this by itself it doesn't have anything to show",
    "start": "1528400",
    "end": "1533679"
  },
  {
    "text": "because there is nothing in the environment that that has uh db underbar in it",
    "start": "1533679",
    "end": "1540000"
  },
  {
    "text": "unless i run summon first so i can say summon dash web app summon",
    "start": "1540000",
    "end": "1545360"
  },
  {
    "text": "and now we've got the application has access to those credentials but as soon as the",
    "start": "1545360",
    "end": "1551279"
  },
  {
    "text": "application exits those credentials disappear they are completely ephemeral and the cool thing is summon can pull",
    "start": "1551279",
    "end": "1557440"
  },
  {
    "text": "secrets into memory map files so if you have ssh keys or certificates or even configuration files you can store those",
    "start": "1557440",
    "end": "1564880"
  },
  {
    "text": "retrieve those as dynamic in other words non-persistent files",
    "start": "1564880",
    "end": "1570640"
  },
  {
    "text": "um and what summon will do is is put the uh the secret the the environment variable",
    "start": "1570640",
    "end": "1576880"
  },
  {
    "text": "has the path to the memory map file uh so you still pertain file system semantics um and that that's a very cool",
    "start": "1576880",
    "end": "1583200"
  },
  {
    "text": "thing so uh summon is actually our most active i was uh told by uh jerry who runs our our integrations",
    "start": "1583200",
    "end": "1590080"
  },
  {
    "text": "and and open source team um that summon is our most active uh open source project and so uh and it's",
    "start": "1590080",
    "end": "1597520"
  },
  {
    "text": "for good reason it's just enormously useful it's especially useful for doing integrations for tools",
    "start": "1597520",
    "end": "1603679"
  },
  {
    "text": "that can consume environment variables uh and for which it would be very hard to add rest calls into it to pull secrets",
    "start": "1603679",
    "end": "1610799"
  },
  {
    "text": "for itself so we use this a lot where we don't have native integrations with the myriad ci cd tools that are out there",
    "start": "1610799",
    "end": "1618640"
  },
  {
    "text": "many of them can read environment variables or files and we can use summon to populate those and still keep secrets",
    "start": "1618640",
    "end": "1624320"
  },
  {
    "text": "ephemeral so a big big advertisement there for uh for summon but of course someone has to",
    "start": "1624320",
    "end": "1631919"
  },
  {
    "text": "be baked into the application image and i was doing a poc a while ago and",
    "start": "1631919",
    "end": "1637120"
  },
  {
    "text": "someone said well why why don't you just push them to kubernetes secrets you know our we've got all these applications",
    "start": "1637120",
    "end": "1643120"
  },
  {
    "text": "that are already using kubernetes secrets um why don't you give us the option of using kubernetes secrets but",
    "start": "1643120",
    "end": "1649440"
  },
  {
    "start": "1647000",
    "end": "1877000"
  },
  {
    "text": "just you know address some of the concerns that you know some of the issues around kubernetes so",
    "start": "1649440",
    "end": "1655360"
  },
  {
    "text": "this is um again where the authenticator is going to run as an init container but what we're going to do is dynamically",
    "start": "1655360",
    "end": "1662080"
  },
  {
    "text": "populate a kubernetes secret and this is kind of the the best of of both worlds and has proven to be pretty popular um",
    "start": "1662080",
    "end": "1670159"
  },
  {
    "text": "it addresses some of the acknowledged risks that kubernetes secrets have and i don't think you know anybody's underwear",
    "start": "1670159",
    "end": "1676640"
  },
  {
    "text": "hopefully this is this is all uh uh you know firsthand knowledge to you you all ever on the phone but",
    "start": "1676640",
    "end": "1684159"
  },
  {
    "text": "um there there are issues here you know so and security issues so first off they",
    "start": "1684159",
    "end": "1690000"
  },
  {
    "text": "are encrypted at rest in fpd only if you set it up that way so you have to enable encryption and in the scd store",
    "start": "1690000",
    "end": "1697520"
  },
  {
    "text": "for the uh kubernetes secrets to be uh encrypted second",
    "start": "1697520",
    "end": "1702720"
  },
  {
    "text": "this and this is this is the thing that that is probably the most egregious um",
    "start": "1702720",
    "end": "1708399"
  },
  {
    "text": "version managing is mandatory you always want to version manager your stuff right so that's that's version manage",
    "start": "1708399",
    "end": "1713919"
  },
  {
    "text": "everything is kind of devops 101 but now you've got a manifest that only",
    "start": "1713919",
    "end": "1719440"
  },
  {
    "text": "base64 encodes this username and password and you check that into github so now",
    "start": "1719440",
    "end": "1725360"
  },
  {
    "text": "somebody has very easy access to those credentials anybody that can read your github repo can now go through",
    "start": "1725360",
    "end": "1731840"
  },
  {
    "text": "and easily basically for decode your your oracle database username and password",
    "start": "1731840",
    "end": "1737840"
  },
  {
    "text": "this is the problem that we're most uh able to address um applications protecting the value of",
    "start": "1737840",
    "end": "1744640"
  },
  {
    "text": "the secrets now this is a little bit of foreshadowing for the secret list solution that we're going to show in our fourth example",
    "start": "1744640",
    "end": "1750240"
  },
  {
    "text": "because once applications get the secret you don't know what they're going to do with it they could leak it in a log um",
    "start": "1750240",
    "end": "1755760"
  },
  {
    "text": "they can they can exfiltrate it for you know nefarious purposes um and any user that can access a secret",
    "start": "1755760",
    "end": "1762720"
  },
  {
    "text": "sense so um you know applications we can we can address this users and anyone with root",
    "start": "1762720",
    "end": "1768799"
  },
  {
    "text": "permissions this is something that um just your your own native security discipline",
    "start": "1768799",
    "end": "1774880"
  },
  {
    "text": "has to address uh uh keeping people from being rude you know anybody that has root you know",
    "start": "1774880",
    "end": "1780159"
  },
  {
    "text": "we're fond of saying once they're rude it's game over there's really nothing you can do once somebody's rude um",
    "start": "1780159",
    "end": "1785760"
  },
  {
    "text": "because they can do memory scans they can access keychains um there's there's nothing someone can do once they're rude",
    "start": "1785760",
    "end": "1791279"
  },
  {
    "text": "this is this is you know a big part of our core business is just keeping people from being rude on any any system",
    "start": "1791279",
    "end": "1797440"
  },
  {
    "text": "they're not supposed to be rude on um and if they are we know who they are and we know what they're doing so",
    "start": "1797440",
    "end": "1802559"
  },
  {
    "text": "um but you know the user creating a pod also has the ability to look at that secret so so foreshadowing a little bit",
    "start": "1802559",
    "end": "1809760"
  },
  {
    "text": "we'll come back to this when we talk about secret lists but i want to show how we address this concern because i",
    "start": "1809760",
    "end": "1814960"
  },
  {
    "text": "think this is the most common experience most developers have is they do the",
    "start": "1814960",
    "end": "1820080"
  },
  {
    "text": "right thing and i'm gonna bet i'd bet a hundred dollars there's at least one person",
    "start": "1820080",
    "end": "1826960"
  },
  {
    "text": "listening to this webinar that has experienced this where they did the right thing they put their credentials",
    "start": "1826960",
    "end": "1833120"
  },
  {
    "text": "in a file they version manage their file suddenly somebody has act had access to those secrets",
    "start": "1833120",
    "end": "1838720"
  },
  {
    "text": "um and and you know it's it's it's just a",
    "start": "1838720",
    "end": "1843760"
  },
  {
    "text": "it's just the way things happen these days um fortunately github has started adding",
    "start": "1843760",
    "end": "1848880"
  },
  {
    "text": "hooks where they will alert you to the fact that you may have just checked in some credentials but",
    "start": "1848880",
    "end": "1854240"
  },
  {
    "text": "uh but kubernetes as far as i know kubernetes secrets manifests they're not one because their base64 encoded they're",
    "start": "1854240",
    "end": "1860159"
  },
  {
    "text": "not obviously credentials and so this is something that we want to fix",
    "start": "1860159",
    "end": "1865360"
  },
  {
    "text": "what we want to do is get those basics to four encoded values out of the the secret we want to",
    "start": "1865360",
    "end": "1871200"
  },
  {
    "text": "dynamically bind the kubernetes so we want to keep the kubernetes secret we want the",
    "start": "1871200",
    "end": "1876320"
  },
  {
    "text": "application to use kubernetes secrets natively but we don't want the application",
    "start": "1876320",
    "end": "1881840"
  },
  {
    "start": "1877000",
    "end": "2029000"
  },
  {
    "text": "uh we don't want that that manifest to be uh to be um checked in with those",
    "start": "1881840",
    "end": "1888559"
  },
  {
    "text": "credentials intact so the way we do this is",
    "start": "1888559",
    "end": "1893760"
  },
  {
    "text": "i'll have to go find my manifest dvd credentials",
    "start": "1893760",
    "end": "1900639"
  },
  {
    "text": "is by giving you an ability to uh",
    "start": "1903200",
    "end": "1910080"
  },
  {
    "text": "find my secrets manifest",
    "start": "1910480",
    "end": "1918600"
  },
  {
    "text": "okay here we go kate secret template here so this is the uh the manifest that",
    "start": "1920960",
    "end": "1927600"
  },
  {
    "text": "we're using uh and this is what we get checked into github uh we can see now we've got our oracle",
    "start": "1927600",
    "end": "1933200"
  },
  {
    "text": "database username and password the name of the secret here and we've got this annotation here basically this is a yaml",
    "start": "1933200",
    "end": "1939760"
  },
  {
    "text": "array of well and it looks kind of like that secrets.yaml file this that summon use so that the idea is very similar",
    "start": "1939760",
    "end": "1947200"
  },
  {
    "text": "when the uh secrets provider container so this the secrets provider container",
    "start": "1947200",
    "end": "1952320"
  },
  {
    "text": "is an init container that will do the authentication do that that initial authentication in order to retrieve",
    "start": "1952320",
    "end": "1957360"
  },
  {
    "text": "secrets but it will have a directive to this credential to this secrets uh this",
    "start": "1957360",
    "end": "1963200"
  },
  {
    "text": "kubernetes secret uh and it will look for this annotation iterate over this and retrieve the value",
    "start": "1963200",
    "end": "1970320"
  },
  {
    "text": "of this secret and patch this the uh the kubernetes secret with a base64 encoded",
    "start": "1970320",
    "end": "1976159"
  },
  {
    "text": "value of that username and that password so if i go up to here to my environment",
    "start": "1976159",
    "end": "1982480"
  },
  {
    "text": "here and and now you know this this is a great use case for the init container pattern",
    "start": "1982480",
    "end": "1988000"
  },
  {
    "text": "because it's going to instantiate that kubernetes secret and then exit the application has access to the kubernetes",
    "start": "1988000",
    "end": "1994880"
  },
  {
    "text": "secrets just like native kubernetes secrets but they're dynamically instantiated when that pod exits",
    "start": "1994880",
    "end": "2000799"
  },
  {
    "text": "or when when you delete that deployment then those secrets are so so the point is we're never checking",
    "start": "2000799",
    "end": "2006720"
  },
  {
    "text": "in base64 encoded secrets this value here the name of the database",
    "start": "2006720",
    "end": "2012960"
  },
  {
    "text": "is not a secret presumably if it were we could also store it as a secret but but in this case we're just saying that's",
    "start": "2012960",
    "end": "2018960"
  },
  {
    "text": "not a secret it's really those those axis credentials so i'm going to exec into my",
    "start": "2018960",
    "end": "2024799"
  },
  {
    "text": "injector that's the way i did it yeah and so um and i can walk through the",
    "start": "2024799",
    "end": "2031600"
  },
  {
    "text": "manifest if anybody wants to see how this is done but basically um i have mounted these uh",
    "start": "2031600",
    "end": "2038080"
  },
  {
    "text": "the the kubernetes secrets as both actually let me do this let me do a cue cuddle edit",
    "start": "2038080",
    "end": "2044640"
  },
  {
    "text": "uh secret db credentials this this will",
    "start": "2044640",
    "end": "2050079"
  },
  {
    "text": "actually test apps this will just kind of show you the effect so so remember our manifest the",
    "start": "2050639",
    "end": "2056480"
  },
  {
    "text": "username and password here here is our our map down here as an annotation",
    "start": "2056480",
    "end": "2062560"
  },
  {
    "text": "but now we've got the username and password here as base64 encoded values if i take that",
    "start": "2062560",
    "end": "2069358"
  },
  {
    "text": "and echo it and pipe it to base64 decode",
    "start": "2069359",
    "end": "2078158"
  },
  {
    "text": "then and and let me just add a echo here to get a line feed in there i've got my username back so so that was my basics",
    "start": "2078159",
    "end": "2085760"
  },
  {
    "text": "before encoded username but it was dynamically patched that that secret didn't exist",
    "start": "2085760",
    "end": "2091520"
  },
  {
    "text": "it existed only as uh initially as the value without the basics before encoded values the secrets",
    "start": "2091520",
    "end": "2098640"
  },
  {
    "text": "provider iterated over that conjurer map and instantiated those so when i go into",
    "start": "2098640",
    "end": "2104560"
  },
  {
    "text": "my environment now they can be mounted as either environment variables or as as volumes",
    "start": "2104560",
    "end": "2109599"
  },
  {
    "text": "so if i do an env grep for a",
    "start": "2109599",
    "end": "2114960"
  },
  {
    "text": "username actually i i mount them as as for consistency i think",
    "start": "2114960",
    "end": "2121040"
  },
  {
    "text": "grew up for db so there's my oracle db username and password mounted as environment variables with",
    "start": "2121040",
    "end": "2126240"
  },
  {
    "text": "those same environment variables that we've been using in the other examples but they're also mounted as as volumes",
    "start": "2126240",
    "end": "2132640"
  },
  {
    "text": "and we would always recommend mounting them as volumes environment variables are much easier to discover from outside",
    "start": "2132640",
    "end": "2138400"
  },
  {
    "text": "so uh it's it's something that we would always recommend",
    "start": "2138400",
    "end": "2144880"
  },
  {
    "text": "that you you mount them as files and access them as files and that's basically what",
    "start": "2144880",
    "end": "2150960"
  },
  {
    "text": "this this example does for uh see where did i",
    "start": "2150960",
    "end": "2157760"
  },
  {
    "text": "do that uh i guess i don't have a great example here",
    "start": "2157760",
    "end": "2162960"
  },
  {
    "text": "um",
    "start": "2162960",
    "end": "2165200"
  },
  {
    "text": "oh yeah so my web app summon now so so this the simple application that simply uses those environment",
    "start": "2168079",
    "end": "2174720"
  },
  {
    "text": "variables can simply run but now we're using secrets we don't have to use summon to retrieve it we don't have to",
    "start": "2174720",
    "end": "2180240"
  },
  {
    "text": "bake someone into the application image uh we can simply use that um and in",
    "start": "2180240",
    "end": "2185280"
  },
  {
    "text": "another demo i've got a one that actually reads the file and and uses the file uh versions but in this case these",
    "start": "2185280",
    "end": "2191599"
  },
  {
    "text": "environment variables are populated by mounting them from that kubernetes secret so this really gets at this uh",
    "start": "2191599",
    "end": "2198000"
  },
  {
    "start": "2195000",
    "end": "2336000"
  },
  {
    "text": "this aspect of it we're dynamically binding values retrieved from from conjurer into those kubernetes sequence",
    "start": "2198000",
    "end": "2204800"
  },
  {
    "text": "patching those kubernetes secrets from the applications perspective it's just a kubernetes secret it can be used as a",
    "start": "2204800",
    "end": "2210800"
  },
  {
    "text": "kubernetes secret and then when that pod exits and and you delete that kubernetes secret then it's gone",
    "start": "2210800",
    "end": "2217359"
  },
  {
    "text": "the real point is nothing's being checked into uh into github there's no secrets being checked into github in any",
    "start": "2217359",
    "end": "2223359"
  },
  {
    "text": "form whether plain text or in base64 encoding um these other issues remain so",
    "start": "2223359",
    "end": "2228960"
  },
  {
    "text": "um you know this is this is just good discipline in setting up your your cluster uh this is just good security discipline",
    "start": "2228960",
    "end": "2236160"
  },
  {
    "text": "um but let's talk about these couple of things because we we use this uh",
    "start": "2236160",
    "end": "2242560"
  },
  {
    "text": "example here you know you can vault things in storage you can vault thing you can encrypt things on the wire but",
    "start": "2242560",
    "end": "2248240"
  },
  {
    "text": "as soon as the application gets that plain text secret you really don't know what it's going to do with it uh and so",
    "start": "2248240",
    "end": "2253680"
  },
  {
    "text": "we see this as a a general issue our best all our efforts may be for not",
    "start": "2253680",
    "end": "2259760"
  },
  {
    "text": "if the application is irresponsible um and so what we",
    "start": "2259760",
    "end": "2265119"
  },
  {
    "text": "have devised is a solution called secretless it's basically using a proxy",
    "start": "2265119",
    "end": "2272320"
  },
  {
    "text": "connection so that the application never gets the secret the application wants a connection to the database or wants a",
    "start": "2272320",
    "end": "2278400"
  },
  {
    "text": "connection to a web service or it needs to run a script on a remote server over ssh we want to give the application the",
    "start": "2278400",
    "end": "2285680"
  },
  {
    "text": "ability to do that without giving it the keys necessary to do that so we do that",
    "start": "2285680",
    "end": "2290960"
  },
  {
    "text": "with a proxy where the proxy is running as a sidecar and the proxy is the thing",
    "start": "2290960",
    "end": "2297280"
  },
  {
    "text": "that actually retrieves the secret and establishes the connection and brokers that connection for the application",
    "start": "2297280",
    "end": "2304160"
  },
  {
    "text": "so the application never gets a secret the application you know has to do its own authentication for users and and things",
    "start": "2304160",
    "end": "2310240"
  },
  {
    "text": "like that but as far as connecting the back-end systems the applications simply get the connection that they're",
    "start": "2310240",
    "end": "2316160"
  },
  {
    "text": "authorized to get and so if they're if the identity that this pod is running as is authorized and",
    "start": "2316160",
    "end": "2323280"
  },
  {
    "text": "you know successfully authenticates and is authorized to connect to a database it will get the connection to the database but the application never sees",
    "start": "2323280",
    "end": "2330240"
  },
  {
    "text": "those database credentials they stay within the broker and therefore uh can't be leaked",
    "start": "2330240",
    "end": "2336320"
  },
  {
    "text": "so you know you're still suspect as we said once you root you can do anything so keeping people off route but buying that",
    "start": "2336320",
    "end": "2343440"
  },
  {
    "text": "um then we've addressed a lot of these issues where the applications uh",
    "start": "2343440",
    "end": "2349280"
  },
  {
    "text": "don't have access to the secret and can't inadvertently leak it in a uh",
    "start": "2349280",
    "end": "2354800"
  },
  {
    "text": "in a potentially irresponsible manner so i'm going to start up my uh i actually",
    "start": "2354800",
    "end": "2360320"
  },
  {
    "start": "2356000",
    "end": "2436000"
  },
  {
    "text": "should have done this um while i was talking i'm going to start my whole environment here because it",
    "start": "2360320",
    "end": "2366839"
  },
  {
    "text": "deploys multiple back-end systems so the cool thing about secret list is it's",
    "start": "2366839",
    "end": "2371920"
  },
  {
    "text": "multi-protocol it supports http https ssh",
    "start": "2371920",
    "end": "2377119"
  },
  {
    "text": "and then multiple back-end databases a growing list of backend databases so we support postgres mysql and sql server",
    "start": "2377119",
    "end": "2384160"
  },
  {
    "text": "now i'm told oracle is is on its way we get a lot of questions around that um uh oracle and sql server you know the",
    "start": "2384160",
    "end": "2392320"
  },
  {
    "text": "most deployed um uh databases",
    "start": "2392320",
    "end": "2397440"
  },
  {
    "text": "um so what i'm going to do is uh exec into this so i've set up an environment here where this window is going to be my",
    "start": "2397440",
    "end": "2402640"
  },
  {
    "text": "application so i'm going to exact into my secret list app uh",
    "start": "2402640",
    "end": "2411800"
  },
  {
    "text": "yeah and so uh we'll we'll do a few things here and and in here i've got some",
    "start": "2414000",
    "end": "2420400"
  },
  {
    "text": "uh predefined uh connection strings just so i can remember because i can remember all the",
    "start": "2420400",
    "end": "2426160"
  },
  {
    "text": "syntax for all these things so i've got connection strings for http sql server sequel postgres and ssh connections um",
    "start": "2426160",
    "end": "2433520"
  },
  {
    "text": "and so what i'm going to do is walk through some of these so this this this window over here on the left is",
    "start": "2433520",
    "end": "2438880"
  },
  {
    "start": "2436000",
    "end": "2486000"
  },
  {
    "text": "basically my pod this is my application what i'm going to do here is watch the secret list broker",
    "start": "2438880",
    "end": "2445520"
  },
  {
    "text": "uh log so this is just the log for that container we can see that it started up listeners",
    "start": "2445520",
    "end": "2451040"
  },
  {
    "text": "on different ports so the way that the broker knows what to connect to is it's listening it has service connectors",
    "start": "2451040",
    "end": "2457040"
  },
  {
    "text": "listing on different ports 1443 for sql server 3306 from my sql 5432 for",
    "start": "2457040",
    "end": "2463119"
  },
  {
    "text": "postgres 8081 for http 2022 uh 2222 for ssh so we've got listeners",
    "start": "2463119",
    "end": "2469839"
  },
  {
    "text": "we've got we've got uh service connections configured uh such that",
    "start": "2469839",
    "end": "2476880"
  },
  {
    "text": "when we do this connection we're going to watch the uh",
    "start": "2476880",
    "end": "2483040"
  },
  {
    "text": "conjure audit log over here we'll see the connector we'll see the broker authenticate uh see it retrieve",
    "start": "2483040",
    "end": "2490640"
  },
  {
    "start": "2486000",
    "end": "2786000"
  },
  {
    "text": "secrets and then what i'm going to do up here this is one of the only ones that really echoes its its",
    "start": "2490640",
    "end": "2497040"
  },
  {
    "text": "its activity my nginx server i'm going to just watch the log of my nginx server so the first one we'll do",
    "start": "2497040",
    "end": "2503280"
  },
  {
    "text": "is this http connection i'm just going to say curl i'm just going to paste this in because",
    "start": "2503280",
    "end": "2508880"
  },
  {
    "text": "environment variables don't always work it doesn't work for sql server for some reason so i'm going to say i'm going to connect to nginx on",
    "start": "2508880",
    "end": "2515520"
  },
  {
    "text": "8081. now what's really listening there is my my broker",
    "start": "2515520",
    "end": "2521440"
  },
  {
    "text": "and so this is um basically going through an http proxy for localhost",
    "start": "2521440",
    "end": "2527359"
  },
  {
    "text": "um that proxy connection is is going to this port where the broker's listening so this happens very quickly so i'm",
    "start": "2527359",
    "end": "2533440"
  },
  {
    "text": "gonna i'm gonna talk through it and then then i'm going to do it i'm going to hit return we'll see the the broker wake up and",
    "start": "2533440",
    "end": "2540400"
  },
  {
    "text": "authenticate we'll see it hit conjure to retrieve the secrets for the http connection this is",
    "start": "2540400",
    "end": "2546160"
  },
  {
    "text": "using basic auth this is just using basic off back over here we'll see a a 200 message come up here",
    "start": "2546160",
    "end": "2552240"
  },
  {
    "text": "in the nginx log and then we'll see the client echo is just doing a basic uh index get on",
    "start": "2552240",
    "end": "2558319"
  },
  {
    "text": "that uh that top level uh entry point in nginx so so the flow kind of goes like",
    "start": "2558319",
    "end": "2564319"
  },
  {
    "text": "this so it happens quickly so we'll go joint there did happen",
    "start": "2564319",
    "end": "2570079"
  },
  {
    "text": "um oh wait i didn't do my my nginx",
    "start": "2570079",
    "end": "2578359"
  },
  {
    "text": "uh for some reason i'm not i'm not seeing engine x over here so we saw it successfully authenticate we saw",
    "start": "2579440",
    "end": "2585599"
  },
  {
    "text": "it uh return the value over here for some reason i'm not tracing uh nginx nginx",
    "start": "2585599",
    "end": "2591680"
  },
  {
    "text": "log here we saw it authenticate over here we saw it retrieve uh secrets that it needed to do",
    "start": "2591680",
    "end": "2598400"
  },
  {
    "text": "its work um and so this is uh",
    "start": "2598400",
    "end": "2604079"
  },
  {
    "text": "the uh the workflow that we're we're looking at um to to authenticate dynamically retrieve secrets and then",
    "start": "2604079",
    "end": "2611200"
  },
  {
    "text": "use those secrets to connect to a back-end system now we have other things that we can connect to so",
    "start": "2611200",
    "end": "2617920"
  },
  {
    "text": "let's look at ssh so what i've got here are the credentials the ssh keys to",
    "start": "2617920",
    "end": "2624160"
  },
  {
    "text": "uh one of my uh ec2 instances in in",
    "start": "2624160",
    "end": "2629520"
  },
  {
    "text": "in amazon in aws but we can see my connection string is just going to say",
    "start": "2629520",
    "end": "2634560"
  },
  {
    "text": "foo at localhost this is garbage this is just there but so the ssh client works",
    "start": "2634560",
    "end": "2640400"
  },
  {
    "text": "so i'm i'm directing it to port 2222 where the broker is listening uh that",
    "start": "2640400",
    "end": "2645760"
  },
  {
    "text": "broker is that that is the service connector for for ssh so when i hit return here",
    "start": "2645760",
    "end": "2650800"
  },
  {
    "text": "saying hey you haven't connected to this before are you sure you want to connect we saw it hit over here",
    "start": "2650800",
    "end": "2656000"
  },
  {
    "text": "uh now i'm in aws so i have connected to aws without having access to that ssh",
    "start": "2656000",
    "end": "2662400"
  },
  {
    "text": "key the broker had access to it because it retrieved it from conjure it retrieved that ssh key from conjurer and",
    "start": "2662400",
    "end": "2668720"
  },
  {
    "text": "used it to connect to my backend system now i can do stuff up here i can say curl",
    "start": "2668720",
    "end": "2675280"
  },
  {
    "text": "uh you know check check the status of because this is uh something i leave running",
    "start": "2675280",
    "end": "2680880"
  },
  {
    "text": "for doing demos up in in amazon or in aws",
    "start": "2680880",
    "end": "2686880"
  },
  {
    "text": "um and so there's you know i can check the status of my my conjure thing running up there so that's ssh",
    "start": "2686880",
    "end": "2692880"
  },
  {
    "text": "we can do similar things for my sequel so if i look at look at my my sequel connection",
    "start": "2692880",
    "end": "2698560"
  },
  {
    "text": "here um here's i've got a test app running over there so i can say mysql use the my native mysql client",
    "start": "2698560",
    "end": "2706400"
  },
  {
    "text": "local host connection um but now it's connected to the mysql database and i can say show databases",
    "start": "2706400",
    "end": "2713760"
  },
  {
    "text": "um the databases don't do a really good job of showing you the work their logs aren't very interesting from a",
    "start": "2713760",
    "end": "2719520"
  },
  {
    "text": "connection monitoring standpoint so you have to kind of jump through hoops to make them do that um for the last",
    "start": "2719520",
    "end": "2725359"
  },
  {
    "text": "trick we'll just show sql server because a lot of people are really interested in sql server what this will do is just",
    "start": "2725359",
    "end": "2730800"
  },
  {
    "text": "do a real quick uh sql edition so sql cmd is the client for that paste that",
    "start": "2730800",
    "end": "2737839"
  },
  {
    "text": "when i run that um i've got my my sql server answer here so",
    "start": "2737839",
    "end": "2743440"
  },
  {
    "text": "um the if i you know do my kg actually after kgp isn't defined here",
    "start": "2743440",
    "end": "2750079"
  },
  {
    "text": "um if we look at all the uh things that are running in here now um we can see that there's quite a few",
    "start": "2750079",
    "end": "2756480"
  },
  {
    "text": "more uh more pods running in my space here so i've got my postgres database i've got",
    "start": "2756480",
    "end": "2763119"
  },
  {
    "text": "my pet store app i've got my nginx server i got the sql uh my sql server my my sql server then",
    "start": "2763119",
    "end": "2769040"
  },
  {
    "text": "of course um the ssh is going through the ssh protocol to",
    "start": "2769040",
    "end": "2776160"
  },
  {
    "text": "um to aws so the point is though in none of these cases did the application in this space",
    "start": "2776160",
    "end": "2783520"
  },
  {
    "text": "get access to those secrets is able to connect to all these back-end systems without using those",
    "start": "2783520",
    "end": "2789040"
  },
  {
    "start": "2786000",
    "end": "2926000"
  },
  {
    "text": "and if you look at the uh the way this works this is very similar in fact secret list is",
    "start": "2789040",
    "end": "2795839"
  },
  {
    "text": "uh and could be very you know very easily positioned as a",
    "start": "2795839",
    "end": "2802240"
  },
  {
    "text": "a a broker an access control broker for the control plane if you start thinking in service mesh um",
    "start": "2802240",
    "end": "2808640"
  },
  {
    "text": "type type uh situations so um hopefully everybody's familiar with the",
    "start": "2808640",
    "end": "2814240"
  },
  {
    "text": "terms control plane and data plane but the control plane basically is where all the complex stuff happens",
    "start": "2814240",
    "end": "2820240"
  },
  {
    "text": "applications we want to stay in the data plane in other words we want them to be working at a business logic level we",
    "start": "2820240",
    "end": "2826960"
  },
  {
    "text": "don't want them directly involved with the mess of running",
    "start": "2826960",
    "end": "2832240"
  },
  {
    "text": "uh the services and so secrets management kind of kind of has that aspect to it we",
    "start": "2832240",
    "end": "2838000"
  },
  {
    "text": "want to keep applications uh as blissfully unaware as possible of the mechanics of authentication",
    "start": "2838000",
    "end": "2845440"
  },
  {
    "text": "retrieving secrets of the effects of secrets rotation we want to actually keep them away from the secrets entirely",
    "start": "2845440",
    "end": "2851599"
  },
  {
    "text": "and secretless gives us the architecture for doing that and so it is it is that proxy for the",
    "start": "2851599",
    "end": "2857680"
  },
  {
    "text": "control plane that applications can avail themselves of and it also gives us a point where",
    "start": "2857680",
    "end": "2864079"
  },
  {
    "text": "we could put telemetry on that we could start monitoring how applications are are consuming secrets and that then",
    "start": "2864079",
    "end": "2870240"
  },
  {
    "text": "starts informing a lot of the workflows that security can do uh in terms of reacting to anomalous situations and and",
    "start": "2870240",
    "end": "2877359"
  },
  {
    "text": "other you know sort of forward-looking type thing so um this is you know",
    "start": "2877359",
    "end": "2882480"
  },
  {
    "text": "very much a work in progress but secretless is a a big part of the open",
    "start": "2882480",
    "end": "2888480"
  },
  {
    "text": "source initiative that cyborg is sponsoring around conjure uh it's all here under secretless patterns so you go",
    "start": "2888480",
    "end": "2894480"
  },
  {
    "text": "into fundamentals you can see how it works you can see the currently supported service connectors",
    "start": "2894480",
    "end": "2900319"
  },
  {
    "text": "most of which i exercised here so we see our https our database connectors uh our ssh",
    "start": "2900319",
    "end": "2907280"
  },
  {
    "text": "connector etc it also has an sdk which is very cool if you know for some",
    "start": "2907280",
    "end": "2913680"
  },
  {
    "text": "reason you have a back-end system we get questions about things like mongodb and other things uh you can build your own",
    "start": "2913680",
    "end": "2919920"
  },
  {
    "text": "and that's the beauty of open source is we've given you all the tools to to build your own you",
    "start": "2919920",
    "end": "2925359"
  },
  {
    "text": "have to assume that a breach is going to happen and so risk is often",
    "start": "2925359",
    "end": "2931440"
  },
  {
    "start": "2926000",
    "end": "3080000"
  },
  {
    "text": "defined as probability times impact and so you can and you can focus on",
    "start": "2931440",
    "end": "2936640"
  },
  {
    "text": "those two separately so how do you reduce the probability that something's going to happen well you limit access",
    "start": "2936640",
    "end": "2941680"
  },
  {
    "text": "that's good segregation of duties but the impact is also part of that because",
    "start": "2941680",
    "end": "2947520"
  },
  {
    "text": "um the fewer secrets a an application has access to the the smaller the blast radius as we call it so",
    "start": "2947520",
    "end": "2954400"
  },
  {
    "text": "um segregation of duty is is something that you hear about a lot being able to",
    "start": "2954400",
    "end": "2959599"
  },
  {
    "text": "very uh precisely define um the the the uh credentials that",
    "start": "2959599",
    "end": "2965119"
  },
  {
    "text": "something has access to now in terms of identifying an offender that's where your audit logs come in",
    "start": "2965119",
    "end": "2971359"
  },
  {
    "text": "but in many ways audit logs are are backward looking in other words they they record what happened but they don't",
    "start": "2971359",
    "end": "2978000"
  },
  {
    "text": "give you that proactive ability to do something about it and that's what i think is exciting about secretless",
    "start": "2978000",
    "end": "2985119"
  },
  {
    "text": "is that it does give you that monitoring point where you could if you wanted to and of course there'd",
    "start": "2985119",
    "end": "2991280"
  },
  {
    "text": "be some overhead in this but you could monitor the uh the actual real-time usage of",
    "start": "2991280",
    "end": "2996480"
  },
  {
    "text": "secrets and see if things were happening in a much more immediate fashion",
    "start": "2996480",
    "end": "3002400"
  },
  {
    "text": "um but your audit logs and and and you know we we keep audit logs non-repudiation you want you want to be",
    "start": "3002400",
    "end": "3008960"
  },
  {
    "text": "able to prove something did or did not happen and you want to say if something happened you know what was",
    "start": "3008960",
    "end": "3016079"
  },
  {
    "text": "the identity responsible for now that identity you know may move around so an ip",
    "start": "3016079",
    "end": "3022480"
  },
  {
    "text": "address may or may not be useful in that context but fundamentally it comes down to what was the identity in question uh",
    "start": "3022480",
    "end": "3029839"
  },
  {
    "text": "when when we're looking in that doing that kind of sort of forensic analysis the contra solution is in the google",
    "start": "3029839",
    "end": "3036720"
  },
  {
    "text": "marketplace but you can always go to conjure.org i was i was showing a lot of the content",
    "start": "3036720",
    "end": "3041920"
  },
  {
    "text": "that's at conjure.org um there is uh community-based support",
    "start": "3041920",
    "end": "3047119"
  },
  {
    "text": "for the uh conjure open source solution as well as for summon uh and",
    "start": "3047119",
    "end": "3052400"
  },
  {
    "text": "uh and secretless um you can go to discuss.cyberx.coms.org and see some of",
    "start": "3052400",
    "end": "3057920"
  },
  {
    "text": "the back and forth there uh we do uh regular workshops we do regular devops workshops just kind of",
    "start": "3057920",
    "end": "3064319"
  },
  {
    "text": "walking through uh how to secure jenkins workflows and pipelines as well as uh",
    "start": "3064319",
    "end": "3069359"
  },
  {
    "text": "kubernetes examples um the secrets broker we saw a good bit of today as well as summon so lots of",
    "start": "3069359",
    "end": "3076800"
  },
  {
    "text": "places to go lots of content at conga.org for you to consume",
    "start": "3076800",
    "end": "3082800"
  }
]