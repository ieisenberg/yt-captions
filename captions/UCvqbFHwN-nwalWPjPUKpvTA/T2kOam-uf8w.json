[
  {
    "text": "[Music]",
    "start": "5490",
    "end": "13340"
  },
  {
    "text": "he has been working on devops for the",
    "start": "13340",
    "end": "15780"
  },
  {
    "text": "last 10 years and has extensive",
    "start": "15780",
    "end": "17760"
  },
  {
    "text": "experience in managing kubernetes at",
    "start": "17760",
    "end": "19859"
  },
  {
    "text": "scale in the cloud as well as on-prem",
    "start": "19859",
    "end": "21840"
  },
  {
    "text": "for software companies and Enterprises",
    "start": "21840",
    "end": "23699"
  },
  {
    "text": "over to you",
    "start": "23699",
    "end": "25320"
  },
  {
    "text": "thanks thanks pavitra for the intro and",
    "start": "25320",
    "end": "27840"
  },
  {
    "text": "uh",
    "start": "27840",
    "end": "28680"
  },
  {
    "text": "before we start I would like to thank",
    "start": "28680",
    "end": "30539"
  },
  {
    "text": "the organizers for putting together this",
    "start": "30539",
    "end": "32700"
  },
  {
    "text": "event and for allowing me to present a",
    "start": "32700",
    "end": "37200"
  },
  {
    "text": "session here",
    "start": "37200",
    "end": "38840"
  },
  {
    "text": "we'll be talking about or rather I'll be",
    "start": "38840",
    "end": "41340"
  },
  {
    "text": "talking about kubernetes networking",
    "start": "41340",
    "end": "42960"
  },
  {
    "text": "today how do pods talk with each other",
    "start": "42960",
    "end": "46200"
  },
  {
    "text": "uh",
    "start": "46200",
    "end": "48360"
  },
  {
    "text": "in a distributed kind of system which",
    "start": "48360",
    "end": "50879"
  },
  {
    "text": "kubernetes is right",
    "start": "50879",
    "end": "53520"
  },
  {
    "text": "a quick introduction I've been doing",
    "start": "53520",
    "end": "55739"
  },
  {
    "text": "devops SRE platforms platforms",
    "start": "55739",
    "end": "58440"
  },
  {
    "text": "engineering for the last 10 years now",
    "start": "58440",
    "end": "61460"
  },
  {
    "text": "I've been working on kubernetes for",
    "start": "61460",
    "end": "63660"
  },
  {
    "text": "almost four to five years",
    "start": "63660",
    "end": "65239"
  },
  {
    "text": "and I run a company called Lambda we",
    "start": "65240",
    "end": "69119"
  },
  {
    "text": "provide devops sorry Consulting that's",
    "start": "69119",
    "end": "70680"
  },
  {
    "text": "my email address and if you want to",
    "start": "70680",
    "end": "72540"
  },
  {
    "text": "reach out to me on Twitter that's my",
    "start": "72540",
    "end": "73979"
  },
  {
    "text": "handle",
    "start": "73979",
    "end": "76340"
  },
  {
    "text": "the agenda for today so we'll quickly",
    "start": "76680",
    "end": "79380"
  },
  {
    "text": "start with a brief introduction about",
    "start": "79380",
    "end": "81180"
  },
  {
    "text": "kubernetes a very high level",
    "start": "81180",
    "end": "82619"
  },
  {
    "text": "introduction",
    "start": "82619",
    "end": "83759"
  },
  {
    "text": "and after that we'll talk about pods",
    "start": "83759",
    "end": "86700"
  },
  {
    "text": "what are pods",
    "start": "86700",
    "end": "88439"
  },
  {
    "text": "how do pods talk to each other",
    "start": "88439",
    "end": "90540"
  },
  {
    "text": "how do pods running on the same note",
    "start": "90540",
    "end": "92280"
  },
  {
    "text": "talk to each other how do pods running",
    "start": "92280",
    "end": "93960"
  },
  {
    "text": "on different nodes talk to each other",
    "start": "93960",
    "end": "96840"
  },
  {
    "text": "we will quickly see an example of",
    "start": "96840",
    "end": "99180"
  },
  {
    "text": "overlay Networks",
    "start": "99180",
    "end": "100740"
  },
  {
    "text": "and then we'll jump to services and see",
    "start": "100740",
    "end": "103259"
  },
  {
    "text": "how the communication using a service IP",
    "start": "103259",
    "end": "105900"
  },
  {
    "text": "or a cluster IP happens",
    "start": "105900",
    "end": "107579"
  },
  {
    "text": "and what is the role that iptables plays",
    "start": "107579",
    "end": "110399"
  },
  {
    "text": "in it okay and if time permits will also",
    "start": "110399",
    "end": "113220"
  },
  {
    "text": "do some q a at the end",
    "start": "113220",
    "end": "115799"
  },
  {
    "text": "so what is kubernetes kubernetes is an",
    "start": "115799",
    "end": "117720"
  },
  {
    "text": "open source container orchestrator",
    "start": "117720",
    "end": "120560"
  },
  {
    "text": "container orchestrator is nothing but a",
    "start": "120560",
    "end": "123299"
  },
  {
    "text": "piece of software that is able to do",
    "start": "123299",
    "end": "125939"
  },
  {
    "text": "almost anything and everything that you",
    "start": "125939",
    "end": "128640"
  },
  {
    "text": "can do with the container right create",
    "start": "128640",
    "end": "130200"
  },
  {
    "text": "new containers delete containers",
    "start": "130200",
    "end": "133520"
  },
  {
    "text": "fetch logs do some monitoring make sure",
    "start": "133520",
    "end": "137340"
  },
  {
    "text": "that",
    "start": "137340",
    "end": "138300"
  },
  {
    "text": "proper environment variables are",
    "start": "138300",
    "end": "139980"
  },
  {
    "text": "associated with the containers that you",
    "start": "139980",
    "end": "141599"
  },
  {
    "text": "want to run in proper environment",
    "start": "141599",
    "end": "145340"
  },
  {
    "text": "one of the important or like two",
    "start": "145340",
    "end": "147660"
  },
  {
    "text": "important features that that kubernetes",
    "start": "147660",
    "end": "149220"
  },
  {
    "text": "kind of makes available to its users is",
    "start": "149220",
    "end": "152099"
  },
  {
    "text": "auto scaling and self-feeding it allows",
    "start": "152099",
    "end": "154680"
  },
  {
    "text": "you to Auto scale the application as",
    "start": "154680",
    "end": "156900"
  },
  {
    "text": "well as infrastructure so you can use",
    "start": "156900",
    "end": "158520"
  },
  {
    "text": "hpas yeah so Auto scaling am I Audible",
    "start": "158520",
    "end": "162900"
  },
  {
    "text": "hello okay yeah I guess it works so HP",
    "start": "162900",
    "end": "166860"
  },
  {
    "text": "is VPS for your application workload",
    "start": "166860",
    "end": "168480"
  },
  {
    "text": "Auto scaling you can use cluster Auto",
    "start": "168480",
    "end": "170099"
  },
  {
    "text": "scaler and and cada there was a talk",
    "start": "170099",
    "end": "172440"
  },
  {
    "text": "around Keda today for auto scaling your",
    "start": "172440",
    "end": "174959"
  },
  {
    "text": "your infrastructure as well uh there are",
    "start": "174959",
    "end": "178379"
  },
  {
    "text": "tools like Carpenter which are pretty",
    "start": "178379",
    "end": "180540"
  },
  {
    "text": "amazing uh and and you should try it out",
    "start": "180540",
    "end": "183120"
  },
  {
    "text": "if you're using normal cluster Auto",
    "start": "183120",
    "end": "184680"
  },
  {
    "text": "scaler uh self-healing using probes like",
    "start": "184680",
    "end": "188519"
  },
  {
    "text": "liveness probes Readiness probes",
    "start": "188519",
    "end": "190159"
  },
  {
    "text": "kubernetes also provides you",
    "start": "190159",
    "end": "191879"
  },
  {
    "text": "self-healing uh and it will always try",
    "start": "191879",
    "end": "195060"
  },
  {
    "text": "to ensure that the desired state of the",
    "start": "195060",
    "end": "198120"
  },
  {
    "text": "system and the actual state of the",
    "start": "198120",
    "end": "199560"
  },
  {
    "text": "system is in sync right so for example",
    "start": "199560",
    "end": "201540"
  },
  {
    "text": "if you if you want five PODS of your",
    "start": "201540",
    "end": "203940"
  },
  {
    "text": "Ruby application running and one of them",
    "start": "203940",
    "end": "206040"
  },
  {
    "text": "crashes",
    "start": "206040",
    "end": "207200"
  },
  {
    "text": "kubernetes will make sure that it brings",
    "start": "207200",
    "end": "209400"
  },
  {
    "text": "up one more pod on any of the nodes",
    "start": "209400",
    "end": "212280"
  },
  {
    "text": "where there is capacity available",
    "start": "212280",
    "end": "214920"
  },
  {
    "text": "uh cool so let's talk about pods what is",
    "start": "214920",
    "end": "217739"
  },
  {
    "text": "a pod uh a pod in kubernetes is",
    "start": "217739",
    "end": "220560"
  },
  {
    "text": "basically a group of one or many",
    "start": "220560",
    "end": "222239"
  },
  {
    "text": "containers which is guarded by c groups",
    "start": "222239",
    "end": "225120"
  },
  {
    "text": "and isolated by namespaces",
    "start": "225120",
    "end": "227760"
  },
  {
    "text": "uh what do we mean by that",
    "start": "227760",
    "end": "230760"
  },
  {
    "text": "so technically there is no such thing as",
    "start": "230760",
    "end": "232620"
  },
  {
    "text": "a container uh what what we refer to as",
    "start": "232620",
    "end": "235140"
  },
  {
    "text": "a container is is just a process which",
    "start": "235140",
    "end": "237480"
  },
  {
    "text": "which has some c groups and some",
    "start": "237480",
    "end": "239040"
  },
  {
    "text": "namespaces uh you know guarding and",
    "start": "239040",
    "end": "241620"
  },
  {
    "text": "isolating it for example if you if you",
    "start": "241620",
    "end": "244500"
  },
  {
    "text": "want to run an application on a node and",
    "start": "244500",
    "end": "246780"
  },
  {
    "text": "you you want that app to consume no more",
    "start": "246780",
    "end": "249780"
  },
  {
    "text": "than two cores of CPU and 4GB Ram",
    "start": "249780",
    "end": "252780"
  },
  {
    "text": "so you can use c groups which is a Linux",
    "start": "252780",
    "end": "255560"
  },
  {
    "text": "kernel feature you can say right to",
    "start": "255560",
    "end": "258660"
  },
  {
    "text": "ensure that the process will never cross",
    "start": "258660",
    "end": "260760"
  },
  {
    "text": "two cores and 4GB",
    "start": "260760",
    "end": "262699"
  },
  {
    "text": "usage similarly if you want that process",
    "start": "262699",
    "end": "265860"
  },
  {
    "text": "to not be able to look at any other",
    "start": "265860",
    "end": "268080"
  },
  {
    "text": "files on the system right or any other",
    "start": "268080",
    "end": "270720"
  },
  {
    "text": "Network on on the host you can isolate",
    "start": "270720",
    "end": "273240"
  },
  {
    "text": "that process using namespaces which",
    "start": "273240",
    "end": "275160"
  },
  {
    "text": "again is a Linux kernel feature or",
    "start": "275160",
    "end": "277259"
  },
  {
    "text": "functionality so any process that is",
    "start": "277259",
    "end": "279600"
  },
  {
    "text": "bound with these c groups and namespaces",
    "start": "279600",
    "end": "282360"
  },
  {
    "text": "is known as a container right that's",
    "start": "282360",
    "end": "285419"
  },
  {
    "text": "what a container is and in the world of",
    "start": "285419",
    "end": "287280"
  },
  {
    "text": "kubernetes it does not directly deal",
    "start": "287280",
    "end": "289320"
  },
  {
    "text": "with individual containers but rather it",
    "start": "289320",
    "end": "291660"
  },
  {
    "text": "groups the containers together in pods",
    "start": "291660",
    "end": "293639"
  },
  {
    "text": "so pod is a group of one or many",
    "start": "293639",
    "end": "296940"
  },
  {
    "text": "containers pods are Atomic what do you",
    "start": "296940",
    "end": "300120"
  },
  {
    "text": "mean by that a pod cannot be broken down",
    "start": "300120",
    "end": "302699"
  },
  {
    "text": "it is the smallest possible Deployable",
    "start": "302699",
    "end": "304560"
  },
  {
    "text": "unit that that kubernetes has right so",
    "start": "304560",
    "end": "307759"
  },
  {
    "text": "either the entire pod will be deployed",
    "start": "307759",
    "end": "310380"
  },
  {
    "text": "to a node or nothing will be deployed to",
    "start": "310380",
    "end": "312300"
  },
  {
    "text": "a node it will never happen that 30 of",
    "start": "312300",
    "end": "314820"
  },
  {
    "text": "the workload is running on node one for",
    "start": "314820",
    "end": "316800"
  },
  {
    "text": "for a given port and 70 percent of",
    "start": "316800",
    "end": "318419"
  },
  {
    "text": "workload is running on node two right",
    "start": "318419",
    "end": "320040"
  },
  {
    "text": "it's either the full pod or nothing",
    "start": "320040",
    "end": "322800"
  },
  {
    "text": "and pods are ephemeral right pods come",
    "start": "322800",
    "end": "325080"
  },
  {
    "text": "and pods go they they don't have any",
    "start": "325080",
    "end": "327180"
  },
  {
    "text": "individual identity",
    "start": "327180",
    "end": "328820"
  },
  {
    "text": "these points are important and we will",
    "start": "328820",
    "end": "330780"
  },
  {
    "text": "come to them uh probably later",
    "start": "330780",
    "end": "333600"
  },
  {
    "text": "so the networking model kubernetes",
    "start": "333600",
    "end": "335340"
  },
  {
    "text": "networking model uh one of the",
    "start": "335340",
    "end": "337979"
  },
  {
    "text": "properties that uh of kubernetes",
    "start": "337979",
    "end": "340919"
  },
  {
    "text": "networking model is that every pod gets",
    "start": "340919",
    "end": "343440"
  },
  {
    "text": "its own unique IP or rather it's a",
    "start": "343440",
    "end": "346500"
  },
  {
    "text": "requirement more requirement than a",
    "start": "346500",
    "end": "348419"
  },
  {
    "text": "property right so every part gets its",
    "start": "348419",
    "end": "350460"
  },
  {
    "text": "own unique IP it's known as IP per pod",
    "start": "350460",
    "end": "352740"
  },
  {
    "text": "and these IP addresses should be",
    "start": "352740",
    "end": "356280"
  },
  {
    "text": "routable from every other part okay so",
    "start": "356280",
    "end": "359940"
  },
  {
    "text": "ah what does this mean let's take an",
    "start": "359940",
    "end": "362460"
  },
  {
    "text": "example you have a VM vm1 that VM has",
    "start": "362460",
    "end": "365160"
  },
  {
    "text": "has its own IP address",
    "start": "365160",
    "end": "367020"
  },
  {
    "text": "there are two pods running on the VM",
    "start": "367020",
    "end": "369240"
  },
  {
    "text": "these two pods also have their own IP",
    "start": "369240",
    "end": "371280"
  },
  {
    "text": "addresses and every pod should be able",
    "start": "371280",
    "end": "373620"
  },
  {
    "text": "to talk to Every Other Board using the",
    "start": "373620",
    "end": "375479"
  },
  {
    "text": "Pod IP right so pod a should be able to",
    "start": "375479",
    "end": "378720"
  },
  {
    "text": "talk to part C using the powered IP",
    "start": "378720",
    "end": "381319"
  },
  {
    "text": "irrespective of whether this pod C is",
    "start": "381319",
    "end": "383699"
  },
  {
    "text": "running on the same node or different",
    "start": "383699",
    "end": "385860"
  },
  {
    "text": "node now who is responsible for",
    "start": "385860",
    "end": "388440"
  },
  {
    "text": "assigning these IP addresses to the pod",
    "start": "388440",
    "end": "391259"
  },
  {
    "text": "it's not kubernetes right it is a cni",
    "start": "391259",
    "end": "394680"
  },
  {
    "text": "plugin what is the cni plugin a CNA",
    "start": "394680",
    "end": "396960"
  },
  {
    "text": "plugin is a container network interface",
    "start": "396960",
    "end": "399780"
  },
  {
    "text": "plugin right we will talk about it in in",
    "start": "399780",
    "end": "402360"
  },
  {
    "text": "a bit detail later but kubernetes does",
    "start": "402360",
    "end": "405120"
  },
  {
    "text": "not deal with assigning IP addresses it",
    "start": "405120",
    "end": "406979"
  },
  {
    "text": "just assumes that this is the case that",
    "start": "406979",
    "end": "409319"
  },
  {
    "text": "every part will be able to talk to every",
    "start": "409319",
    "end": "410759"
  },
  {
    "text": "other part using the Pod IP all",
    "start": "410759",
    "end": "413340"
  },
  {
    "text": "containers in in a pod share the same",
    "start": "413340",
    "end": "415259"
  },
  {
    "text": "network namespace so we spoke about",
    "start": "415259",
    "end": "418199"
  },
  {
    "text": "Network namespaces right uh so what does",
    "start": "418199",
    "end": "421740"
  },
  {
    "text": "this basically mean is that",
    "start": "421740",
    "end": "423660"
  },
  {
    "text": "pod a has has a dedicated network name",
    "start": "423660",
    "end": "426180"
  },
  {
    "text": "space port C has a dedicated Network",
    "start": "426180",
    "end": "427800"
  },
  {
    "text": "namespace and all the containers running",
    "start": "427800",
    "end": "430380"
  },
  {
    "text": "in Port C are part of the same network",
    "start": "430380",
    "end": "432479"
  },
  {
    "text": "namespace which means the Java",
    "start": "432479",
    "end": "434280"
  },
  {
    "text": "application running here should be able",
    "start": "434280",
    "end": "436020"
  },
  {
    "text": "to talk to the data dog application",
    "start": "436020",
    "end": "437580"
  },
  {
    "text": "using localhost right because it's part",
    "start": "437580",
    "end": "440819"
  },
  {
    "text": "of the same network stack",
    "start": "440819",
    "end": "443099"
  },
  {
    "text": "what it also means is",
    "start": "443099",
    "end": "445340"
  },
  {
    "text": "you cannot have any other application",
    "start": "445340",
    "end": "447720"
  },
  {
    "text": "running on either Port 3000 or port 8126",
    "start": "447720",
    "end": "450840"
  },
  {
    "text": "or import C right although you can have",
    "start": "450840",
    "end": "453360"
  },
  {
    "text": "an application running on Port 3000 on",
    "start": "453360",
    "end": "455580"
  },
  {
    "text": "the same VM but inside a pod you cannot",
    "start": "455580",
    "end": "458940"
  },
  {
    "text": "have clashing ports because it's more",
    "start": "458940",
    "end": "461460"
  },
  {
    "text": "like a VM in itself right it's a",
    "start": "461460",
    "end": "463500"
  },
  {
    "text": "dedicated Network namespace",
    "start": "463500",
    "end": "466139"
  },
  {
    "text": "cool so when when you're dealing with",
    "start": "466139",
    "end": "468539"
  },
  {
    "text": "kubernetes there are three different",
    "start": "468539",
    "end": "469979"
  },
  {
    "text": "types of Ip ranges that you will come",
    "start": "469979",
    "end": "472500"
  },
  {
    "text": "across if you've ever set up a cluster",
    "start": "472500",
    "end": "474120"
  },
  {
    "text": "uh you must have come across this there",
    "start": "474120",
    "end": "477240"
  },
  {
    "text": "is a host IP range which is the IP that",
    "start": "477240",
    "end": "479160"
  },
  {
    "text": "the nodes get assigned and uh",
    "start": "479160",
    "end": "482300"
  },
  {
    "text": "who is responsible for this the cloud",
    "start": "482300",
    "end": "484860"
  },
  {
    "text": "provider is responsible for assigning",
    "start": "484860",
    "end": "486599"
  },
  {
    "text": "this IPS there is a powered IP range",
    "start": "486599",
    "end": "489060"
  },
  {
    "text": "which get assigned to the pod",
    "start": "489060",
    "end": "491520"
  },
  {
    "text": "and who is responsible for powered IPS",
    "start": "491520",
    "end": "495300"
  },
  {
    "text": "I just said the cni plugin right the CNA",
    "start": "495300",
    "end": "498300"
  },
  {
    "text": "plugin is responsible for assigning and",
    "start": "498300",
    "end": "499919"
  },
  {
    "text": "managing powered IPS and there's a third",
    "start": "499919",
    "end": "502020"
  },
  {
    "text": "range of ips which is a service IPS this",
    "start": "502020",
    "end": "505740"
  },
  {
    "text": "is where kubernetes plays some role and",
    "start": "505740",
    "end": "507599"
  },
  {
    "text": "it does you know the job of managing",
    "start": "507599",
    "end": "509879"
  },
  {
    "text": "service IPS so a fundamental question",
    "start": "509879",
    "end": "511500"
  },
  {
    "text": "how does a pod get an IP address okay",
    "start": "511500",
    "end": "514700"
  },
  {
    "text": "don't get scared by this you can just",
    "start": "514700",
    "end": "516959"
  },
  {
    "text": "follow this slide maybe later",
    "start": "516959",
    "end": "519200"
  },
  {
    "text": "top to bottom left to right if you see",
    "start": "519200",
    "end": "522000"
  },
  {
    "text": "when when a pod gets scheduled on the",
    "start": "522000",
    "end": "524039"
  },
  {
    "text": "Node the first thing that it does is it",
    "start": "524039",
    "end": "526620"
  },
  {
    "text": "will make a call to the CRI plugin the",
    "start": "526620",
    "end": "528779"
  },
  {
    "text": "container runtime interface plugin just",
    "start": "528779",
    "end": "531120"
  },
  {
    "text": "like cnis we have Cris right so in this",
    "start": "531120",
    "end": "534060"
  },
  {
    "text": "example we are looking at container dcri",
    "start": "534060",
    "end": "537000"
  },
  {
    "text": "plugin so it makes a call to the CRI",
    "start": "537000",
    "end": "538920"
  },
  {
    "text": "plugin the CRI plugin will basically",
    "start": "538920",
    "end": "541140"
  },
  {
    "text": "create a Sandbox ID a unique ID for that",
    "start": "541140",
    "end": "543660"
  },
  {
    "text": "part and it will also create a namespace",
    "start": "543660",
    "end": "547200"
  },
  {
    "text": "network name space",
    "start": "547200",
    "end": "548700"
  },
  {
    "text": "cool so it will create a Sandbox ID and",
    "start": "548700",
    "end": "550860"
  },
  {
    "text": "a power Network namespace it will pass",
    "start": "550860",
    "end": "553200"
  },
  {
    "text": "on these details to the cni plugin why",
    "start": "553200",
    "end": "555839"
  },
  {
    "text": "does it do that because the Pod needs an",
    "start": "555839",
    "end": "558240"
  },
  {
    "text": "IP address every port should get an get",
    "start": "558240",
    "end": "560700"
  },
  {
    "text": "a unique IP address right and who is",
    "start": "560700",
    "end": "562980"
  },
  {
    "text": "responsible for creating powered IPS the",
    "start": "562980",
    "end": "565200"
  },
  {
    "text": "cni plugin is responsible creating the",
    "start": "565200",
    "end": "567120"
  },
  {
    "text": "powered IPS",
    "start": "567120",
    "end": "568200"
  },
  {
    "text": "there are multiple plugins available in",
    "start": "568200",
    "end": "570240"
  },
  {
    "text": "the market flannel Calico Etc right",
    "start": "570240",
    "end": "573300"
  },
  {
    "text": "flannel is one of the popular ones which",
    "start": "573300",
    "end": "575279"
  },
  {
    "text": "which gets used so when the cni plugin",
    "start": "575279",
    "end": "579540"
  },
  {
    "text": "gets the sandbox ID and the network",
    "start": "579540",
    "end": "581880"
  },
  {
    "text": "namespace it will it will process that",
    "start": "581880",
    "end": "584640"
  },
  {
    "text": "information create an IP address pass it",
    "start": "584640",
    "end": "586500"
  },
  {
    "text": "back to the CRI and you'll see here I",
    "start": "586500",
    "end": "589200"
  },
  {
    "text": "kind of then goes ahead and downloads",
    "start": "589200",
    "end": "590820"
  },
  {
    "text": "the image and runs the the container and",
    "start": "590820",
    "end": "592560"
  },
  {
    "text": "whatever right so this is how the",
    "start": "592560",
    "end": "595440"
  },
  {
    "text": "IP address gets assigned to a pod when",
    "start": "595440",
    "end": "598320"
  },
  {
    "text": "it is created",
    "start": "598320",
    "end": "599519"
  },
  {
    "text": "next fundamental question how does a",
    "start": "599519",
    "end": "601200"
  },
  {
    "text": "port talk to another pod using the Pod",
    "start": "601200",
    "end": "603899"
  },
  {
    "text": "IP right how does the communication",
    "start": "603899",
    "end": "605820"
  },
  {
    "text": "actually happen",
    "start": "605820",
    "end": "607320"
  },
  {
    "text": "so let's take a simple example you have",
    "start": "607320",
    "end": "609600"
  },
  {
    "text": "a VM any C2 instance running on Amazon a",
    "start": "609600",
    "end": "613260"
  },
  {
    "text": "single node which is running two parts",
    "start": "613260",
    "end": "615660"
  },
  {
    "text": "per day pod B right",
    "start": "615660",
    "end": "618540"
  },
  {
    "text": "so as we know that every part will have",
    "start": "618540",
    "end": "620580"
  },
  {
    "text": "its own dedicated Network namespace",
    "start": "620580",
    "end": "623160"
  },
  {
    "text": "right NS is network name space or a has",
    "start": "623160",
    "end": "625620"
  },
  {
    "text": "its own network name space port B has",
    "start": "625620",
    "end": "627360"
  },
  {
    "text": "its own network namespace there's a",
    "start": "627360",
    "end": "629580"
  },
  {
    "text": "special Network namespace here known as",
    "start": "629580",
    "end": "631140"
  },
  {
    "text": "the root Network namespace right now",
    "start": "631140",
    "end": "634080"
  },
  {
    "text": "what does this net root namespace do uh",
    "start": "634080",
    "end": "637740"
  },
  {
    "text": "it is responsible for all the traffic",
    "start": "637740",
    "end": "639839"
  },
  {
    "text": "that comes in and goes out of the node",
    "start": "639839",
    "end": "641700"
  },
  {
    "text": "right and it is associated with the",
    "start": "641700",
    "end": "644459"
  },
  {
    "text": "primary network interface of that",
    "start": "644459",
    "end": "646380"
  },
  {
    "text": "machine so if you want to visualize just",
    "start": "646380",
    "end": "648720"
  },
  {
    "text": "think of this laptop right if you want",
    "start": "648720",
    "end": "650339"
  },
  {
    "text": "to",
    "start": "650339",
    "end": "651019"
  },
  {
    "text": "connect this laptop to the internet you",
    "start": "651019",
    "end": "653519"
  },
  {
    "text": "would one way to do it is you would you",
    "start": "653519",
    "end": "655140"
  },
  {
    "text": "would plug in a lan cable right RJ45",
    "start": "655140",
    "end": "658140"
  },
  {
    "text": "Port whatever and and that would be your",
    "start": "658140",
    "end": "660600"
  },
  {
    "text": "network interface the actual physical",
    "start": "660600",
    "end": "661980"
  },
  {
    "text": "interface for the network and all",
    "start": "661980",
    "end": "664260"
  },
  {
    "text": "traffic has to either that has to go in",
    "start": "664260",
    "end": "667079"
  },
  {
    "text": "or come in or go out has to go through",
    "start": "667079",
    "end": "669660"
  },
  {
    "text": "this cable and that is the root",
    "start": "669660",
    "end": "671880"
  },
  {
    "text": "namespace of your of your node right",
    "start": "671880",
    "end": "675560"
  },
  {
    "text": "one more thing that the the CRI would do",
    "start": "676680",
    "end": "678959"
  },
  {
    "text": "is or rather the cni would do is it",
    "start": "678959",
    "end": "681360"
  },
  {
    "text": "would create virtual ethernet pairs V it",
    "start": "681360",
    "end": "684300"
  },
  {
    "text": "pairs right so uh you can think of this",
    "start": "684300",
    "end": "687300"
  },
  {
    "text": "as a pipe uh one end of this pipe is",
    "start": "687300",
    "end": "690660"
  },
  {
    "text": "attached to the root name space root",
    "start": "690660",
    "end": "693120"
  },
  {
    "text": "network name space and the other end of",
    "start": "693120",
    "end": "695100"
  },
  {
    "text": "this pipe is attached to the Pod",
    "start": "695100",
    "end": "696779"
  },
  {
    "text": "namespace why is this pipe created for",
    "start": "696779",
    "end": "699420"
  },
  {
    "text": "the transfer of data between the root",
    "start": "699420",
    "end": "701700"
  },
  {
    "text": "namespace and the Pod namespace okay so",
    "start": "701700",
    "end": "704459"
  },
  {
    "text": "this is known as virtual ethernet pair",
    "start": "704459",
    "end": "706320"
  },
  {
    "text": "it is always created in in a pair right",
    "start": "706320",
    "end": "708779"
  },
  {
    "text": "because it's a pipe and there are two",
    "start": "708779",
    "end": "710399"
  },
  {
    "text": "ends",
    "start": "710399",
    "end": "712820"
  },
  {
    "text": "so let's say pod a wants to talk to pod",
    "start": "713100",
    "end": "715380"
  },
  {
    "text": "B so the source i p this is a TCP packet",
    "start": "715380",
    "end": "719279"
  },
  {
    "text": "that you see here uh We've stripped out",
    "start": "719279",
    "end": "721500"
  },
  {
    "text": "all the other layers we just interested",
    "start": "721500",
    "end": "723720"
  },
  {
    "text": "in the source and destination address so",
    "start": "723720",
    "end": "725820"
  },
  {
    "text": "there's a source IP of 1.10 there's a",
    "start": "725820",
    "end": "727860"
  },
  {
    "text": "destination IP of 2.10 right the packet",
    "start": "727860",
    "end": "730620"
  },
  {
    "text": "gets placed on the virtual ethernet pair",
    "start": "730620",
    "end": "733220"
  },
  {
    "text": "it then gets transferred to the bridge",
    "start": "733220",
    "end": "737700"
  },
  {
    "text": "what is a bridge uh think of a bridge as",
    "start": "737700",
    "end": "741480"
  },
  {
    "text": "a switch network switch or maybe a",
    "start": "741480",
    "end": "743880"
  },
  {
    "text": "router it's not a router but it's",
    "start": "743880",
    "end": "746940"
  },
  {
    "text": "imagine if there was a router here and",
    "start": "746940",
    "end": "749040"
  },
  {
    "text": "all of our devices would have been",
    "start": "749040",
    "end": "750300"
  },
  {
    "text": "connected to that router if I'm running",
    "start": "750300",
    "end": "751860"
  },
  {
    "text": "nginx on my machine here you can talk to",
    "start": "751860",
    "end": "754380"
  },
  {
    "text": "this nginx via the private IP and how",
    "start": "754380",
    "end": "756899"
  },
  {
    "text": "does this communication happen it",
    "start": "756899",
    "end": "758459"
  },
  {
    "text": "happens via the router so similarly you",
    "start": "758459",
    "end": "761459"
  },
  {
    "text": "have a bridge here right and all",
    "start": "761459",
    "end": "763320"
  },
  {
    "text": "communication between all the network",
    "start": "763320",
    "end": "764880"
  },
  {
    "text": "interfaces on the same node have to",
    "start": "764880",
    "end": "767279"
  },
  {
    "text": "happen via the bridge device okay",
    "start": "767279",
    "end": "770339"
  },
  {
    "text": "so the packet gets placed on the bridge",
    "start": "770339",
    "end": "771899"
  },
  {
    "text": "the bridge checks okay fine this",
    "start": "771899",
    "end": "773760"
  },
  {
    "text": "destination IP I I know about this IP it",
    "start": "773760",
    "end": "776519"
  },
  {
    "text": "is belonging to a virtual ethernet pair",
    "start": "776519",
    "end": "778980"
  },
  {
    "text": "that I've created and there's a pod B",
    "start": "778980",
    "end": "781380"
  },
  {
    "text": "running on the machine let me send the",
    "start": "781380",
    "end": "783120"
  },
  {
    "text": "packet there and Part B happily receives",
    "start": "783120",
    "end": "785579"
  },
  {
    "text": "the packet and processes it okay",
    "start": "785579",
    "end": "789540"
  },
  {
    "text": "that's good enough for a single node",
    "start": "789540",
    "end": "791880"
  },
  {
    "text": "running two pods but what if we have the",
    "start": "791880",
    "end": "795060"
  },
  {
    "text": "two parts running on two different nodes",
    "start": "795060",
    "end": "796860"
  },
  {
    "text": "how how would the packet travel in that",
    "start": "796860",
    "end": "799260"
  },
  {
    "text": "case right in a multi-node setup",
    "start": "799260",
    "end": "802320"
  },
  {
    "text": "you'll see a lot of these diagrams uh",
    "start": "802320",
    "end": "804720"
  },
  {
    "text": "and uh it might get boring but uh yeah I",
    "start": "804720",
    "end": "808139"
  },
  {
    "text": "mean my talk is about networking and",
    "start": "808139",
    "end": "810300"
  },
  {
    "text": "networking is is boring so let's say in",
    "start": "810300",
    "end": "813240"
  },
  {
    "text": "this case you have two nodes two ec2",
    "start": "813240",
    "end": "814980"
  },
  {
    "text": "instances node one and node two uh pod a",
    "start": "814980",
    "end": "819060"
  },
  {
    "text": "wants to talk to Port C in this case",
    "start": "819060",
    "end": "821519"
  },
  {
    "text": "okay and and we'll trace the the route",
    "start": "821519",
    "end": "823680"
  },
  {
    "text": "that the packet takes okay so the packet",
    "start": "823680",
    "end": "826500"
  },
  {
    "text": "starts at the interface of pod 0 it",
    "start": "826500",
    "end": "831000"
  },
  {
    "text": "moves to the bridge",
    "start": "831000",
    "end": "832440"
  },
  {
    "text": "the bridge looks at the destination IP",
    "start": "832440",
    "end": "834839"
  },
  {
    "text": "which is Port C it has no idea about",
    "start": "834839",
    "end": "837600"
  },
  {
    "text": "this IP address because there are only",
    "start": "837600",
    "end": "839160"
  },
  {
    "text": "two pods running here pod and Part B so",
    "start": "839160",
    "end": "841880"
  },
  {
    "text": "it will place that packet on the on the",
    "start": "841880",
    "end": "845339"
  },
  {
    "text": "interface and let the default gateway",
    "start": "845339",
    "end": "847560"
  },
  {
    "text": "decide what to do with it what is the",
    "start": "847560",
    "end": "849660"
  },
  {
    "text": "default gateway",
    "start": "849660",
    "end": "850860"
  },
  {
    "text": "since these are easy to instances the",
    "start": "850860",
    "end": "852959"
  },
  {
    "text": "default gateway here or the router here",
    "start": "852959",
    "end": "855120"
  },
  {
    "text": "is is something that AWS manages for you",
    "start": "855120",
    "end": "857880"
  },
  {
    "text": "so this packet is sent to AWS and AWS",
    "start": "857880",
    "end": "862079"
  },
  {
    "text": "sends this packet to node 2.",
    "start": "862079",
    "end": "864959"
  },
  {
    "text": "okay",
    "start": "864959",
    "end": "866100"
  },
  {
    "text": "now here there's something interesting",
    "start": "866100",
    "end": "867959"
  },
  {
    "text": "that happens",
    "start": "867959",
    "end": "869639"
  },
  {
    "text": "if there are just two nodes in your",
    "start": "869639",
    "end": "871380"
  },
  {
    "text": "cluster node one and node two in that",
    "start": "871380",
    "end": "873360"
  },
  {
    "text": "case maybe this makes sense that a",
    "start": "873360",
    "end": "875399"
  },
  {
    "text": "packet leaves from here and and it gets",
    "start": "875399",
    "end": "877980"
  },
  {
    "text": "placed on node two but let's say if",
    "start": "877980",
    "end": "879959"
  },
  {
    "text": "there are thousand nodes in your cluster",
    "start": "879959",
    "end": "882720"
  },
  {
    "text": "how will this packet know because this",
    "start": "882720",
    "end": "884760"
  },
  {
    "text": "packet just has pod AIP as Source import",
    "start": "884760",
    "end": "888000"
  },
  {
    "text": "cips destination how would this packet",
    "start": "888000",
    "end": "890699"
  },
  {
    "text": "know that it has to go to node 2 and not",
    "start": "890699",
    "end": "892680"
  },
  {
    "text": "node 222 or node 99",
    "start": "892680",
    "end": "896519"
  },
  {
    "text": "so to answer that question if you've",
    "start": "896519",
    "end": "898860"
  },
  {
    "text": "ever looked at",
    "start": "898860",
    "end": "900620"
  },
  {
    "text": "so this is an example node ec2 instance",
    "start": "900620",
    "end": "903500"
  },
  {
    "text": "and the screenshot shows a node which is",
    "start": "903500",
    "end": "906360"
  },
  {
    "text": "attached to a cluster",
    "start": "906360",
    "end": "907980"
  },
  {
    "text": "you see there are two categories of ips",
    "start": "907980",
    "end": "909720"
  },
  {
    "text": "here one is the private IP address and",
    "start": "909720",
    "end": "913320"
  },
  {
    "text": "second one is secondary private IP",
    "start": "913320",
    "end": "915540"
  },
  {
    "text": "address right so these are your your IP",
    "start": "915540",
    "end": "918480"
  },
  {
    "text": "addresses this is the IP address of your",
    "start": "918480",
    "end": "920639"
  },
  {
    "text": "root namespace right the actual IP of",
    "start": "920639",
    "end": "922680"
  },
  {
    "text": "the node itself and these IPS are IPS",
    "start": "922680",
    "end": "925500"
  },
  {
    "text": "that belong to the pods that are",
    "start": "925500",
    "end": "927600"
  },
  {
    "text": "assigned to that node who assigns IP to",
    "start": "927600",
    "end": "930300"
  },
  {
    "text": "a pod",
    "start": "930300",
    "end": "931380"
  },
  {
    "text": "a cni plug-in assigns ip20 pod which CNA",
    "start": "931380",
    "end": "934680"
  },
  {
    "text": "plugin is used in AWS e case",
    "start": "934680",
    "end": "936839"
  },
  {
    "text": "VPC cni plugin by default is used by awp",
    "start": "936839",
    "end": "939779"
  },
  {
    "text": "E case right so the cni plugin already",
    "start": "939779",
    "end": "942839"
  },
  {
    "text": "knows which IP is assigned to which node",
    "start": "942839",
    "end": "945779"
  },
  {
    "text": "and that's how AWS is able to figure out",
    "start": "945779",
    "end": "948480"
  },
  {
    "text": "automatically that if the destination IP",
    "start": "948480",
    "end": "951300"
  },
  {
    "text": "is Port see it has to go to node 2 right",
    "start": "951300",
    "end": "957060"
  },
  {
    "text": "once it's it reaches this node 2 I guess",
    "start": "957060",
    "end": "960420"
  },
  {
    "text": "things are pretty much the same it goes",
    "start": "960420",
    "end": "962339"
  },
  {
    "text": "to the bridge bridge knows the the",
    "start": "962339",
    "end": "964199"
  },
  {
    "text": "destination IP it sends it to the",
    "start": "964199",
    "end": "965880"
  },
  {
    "text": "virtual ethernet pair and Port C",
    "start": "965880",
    "end": "967560"
  },
  {
    "text": "basically processes the packet okay",
    "start": "967560",
    "end": "971279"
  },
  {
    "text": "but there is there is a serious",
    "start": "971279",
    "end": "972839"
  },
  {
    "text": "limitation to this uh",
    "start": "972839",
    "end": "976260"
  },
  {
    "text": "if your pod IPS are being created inside",
    "start": "976260",
    "end": "980399"
  },
  {
    "text": "the same subnet right if you if you look",
    "start": "980399",
    "end": "982560"
  },
  {
    "text": "at this here the subnet is same right",
    "start": "982560",
    "end": "985260"
  },
  {
    "text": "192 152.2",
    "start": "985260",
    "end": "987680"
  },
  {
    "text": "192.152.182 it's picking the IP address",
    "start": "987680",
    "end": "990240"
  },
  {
    "text": "from the same subnet that your VPC is",
    "start": "990240",
    "end": "992100"
  },
  {
    "text": "Created from so if you have a cluster",
    "start": "992100",
    "end": "994620"
  },
  {
    "text": "which is created and now you want to",
    "start": "994620",
    "end": "996839"
  },
  {
    "text": "scale the number of powers that you want",
    "start": "996839",
    "end": "998459"
  },
  {
    "text": "to run inside that cluster",
    "start": "998459",
    "end": "1000500"
  },
  {
    "text": "you might get into a position where you",
    "start": "1000500",
    "end": "1002600"
  },
  {
    "text": "no longer have IPS available in your",
    "start": "1002600",
    "end": "1004399"
  },
  {
    "text": "subnet so in that case something called",
    "start": "1004399",
    "end": "1006860"
  },
  {
    "text": "as an overlay Network helps you now what",
    "start": "1006860",
    "end": "1009320"
  },
  {
    "text": "is an overlay Network",
    "start": "1009320",
    "end": "1010940"
  },
  {
    "text": "uh will not get into the depth of how",
    "start": "1010940",
    "end": "1014060"
  },
  {
    "text": "and what an overlay network does but at",
    "start": "1014060",
    "end": "1016820"
  },
  {
    "text": "a very high level",
    "start": "1016820",
    "end": "1018560"
  },
  {
    "text": "it creates an isolated layer of network",
    "start": "1018560",
    "end": "1020480"
  },
  {
    "text": "on top of your existing Network",
    "start": "1020480",
    "end": "1022759"
  },
  {
    "text": "right so that you get a an abundance of",
    "start": "1022759",
    "end": "1025760"
  },
  {
    "text": "IP addresses uh one way to solve this",
    "start": "1025760",
    "end": "1028520"
  },
  {
    "text": "problem would be to create a new VPC",
    "start": "1028520",
    "end": "1030438"
  },
  {
    "text": "with a larger range and move your entire",
    "start": "1030439",
    "end": "1032540"
  },
  {
    "text": "application to this new VPC sort of a",
    "start": "1032540",
    "end": "1034400"
  },
  {
    "text": "blue green deployment but but it's not",
    "start": "1034400",
    "end": "1036558"
  },
  {
    "text": "feasible and it's not scalable because",
    "start": "1036559",
    "end": "1038839"
  },
  {
    "text": "even that has a limit you might reach a",
    "start": "1038839",
    "end": "1041058"
  },
  {
    "text": "limit there as well",
    "start": "1041059",
    "end": "1042740"
  },
  {
    "text": "OK so let's consider the same example",
    "start": "1042740",
    "end": "1045319"
  },
  {
    "text": "with an overlay Network what happens",
    "start": "1045319",
    "end": "1047540"
  },
  {
    "text": "here so if you see there is an extra",
    "start": "1047540",
    "end": "1050299"
  },
  {
    "text": "block of flannel 0 Block in in your root",
    "start": "1050299",
    "end": "1053600"
  },
  {
    "text": "namespace in in all the devices right so",
    "start": "1053600",
    "end": "1057020"
  },
  {
    "text": "flannel runs as a binary and it is one",
    "start": "1057020",
    "end": "1059480"
  },
  {
    "text": "of the cni plugins open source cni",
    "start": "1059480",
    "end": "1062120"
  },
  {
    "text": "plugins so again pod a wants to talk to",
    "start": "1062120",
    "end": "1064640"
  },
  {
    "text": "Port C so source is part a destination",
    "start": "1064640",
    "end": "1067640"
  },
  {
    "text": "Port C it goes to the width pair it the",
    "start": "1067640",
    "end": "1070640"
  },
  {
    "text": "the packet moves to the bridge",
    "start": "1070640",
    "end": "1072440"
  },
  {
    "text": "now before",
    "start": "1072440",
    "end": "1074179"
  },
  {
    "text": "sending the data out if you are using",
    "start": "1074179",
    "end": "1076880"
  },
  {
    "text": "flannel flannel is going to intercept",
    "start": "1076880",
    "end": "1078919"
  },
  {
    "text": "this packet look at the data see okay",
    "start": "1078919",
    "end": "1081860"
  },
  {
    "text": "fine this is source and destination are",
    "start": "1081860",
    "end": "1084380"
  },
  {
    "text": "both pods let me just add",
    "start": "1084380",
    "end": "1087679"
  },
  {
    "text": "the source and destination node IPS",
    "start": "1087679",
    "end": "1089840"
  },
  {
    "text": "right so instead of AWS deciding what is",
    "start": "1089840",
    "end": "1094580"
  },
  {
    "text": "the destination node for a given pod IP",
    "start": "1094580",
    "end": "1097520"
  },
  {
    "text": "your flannel here is going to make that",
    "start": "1097520",
    "end": "1100460"
  },
  {
    "text": "decision so it will just add or rather",
    "start": "1100460",
    "end": "1103419"
  },
  {
    "text": "encapsulate a source and destination",
    "start": "1103419",
    "end": "1105860"
  },
  {
    "text": "block on top of your existing payload",
    "start": "1105860",
    "end": "1108919"
  },
  {
    "text": "okay",
    "start": "1108919",
    "end": "1110480"
  },
  {
    "text": "so after this is a you know kind of",
    "start": "1110480",
    "end": "1112760"
  },
  {
    "text": "encapsulated this packet leaves the",
    "start": "1112760",
    "end": "1114440"
  },
  {
    "text": "machine through its zero interface on",
    "start": "1114440",
    "end": "1117200"
  },
  {
    "text": "node one it goes to node two",
    "start": "1117200",
    "end": "1119720"
  },
  {
    "text": "and the reverse happens here so it again",
    "start": "1119720",
    "end": "1122960"
  },
  {
    "text": "goes back to flannel 0 or rather the",
    "start": "1122960",
    "end": "1125299"
  },
  {
    "text": "final device running on node 2. since",
    "start": "1125299",
    "end": "1128120"
  },
  {
    "text": "flannel is a distributed setup running",
    "start": "1128120",
    "end": "1129860"
  },
  {
    "text": "throughout your cluster it does keep a",
    "start": "1129860",
    "end": "1132020"
  },
  {
    "text": "track of which packet is encapsulated",
    "start": "1132020",
    "end": "1134539"
  },
  {
    "text": "and you know it will",
    "start": "1134539",
    "end": "1136940"
  },
  {
    "text": "intercept those packet and do the",
    "start": "1136940",
    "end": "1139460"
  },
  {
    "text": "reverse of what happened here on node",
    "start": "1139460",
    "end": "1141440"
  },
  {
    "text": "one right so instead of",
    "start": "1141440",
    "end": "1143559"
  },
  {
    "text": "source and destination node IPS they get",
    "start": "1143559",
    "end": "1146720"
  },
  {
    "text": "replaced with powered IPS right or",
    "start": "1146720",
    "end": "1149240"
  },
  {
    "text": "rather the encapsulation is removed they",
    "start": "1149240",
    "end": "1151039"
  },
  {
    "text": "are not replaced the encapsulation is",
    "start": "1151039",
    "end": "1152539"
  },
  {
    "text": "removed from the packet right and again",
    "start": "1152539",
    "end": "1155179"
  },
  {
    "text": "the same Journey it goes to the virtual",
    "start": "1155179",
    "end": "1157340"
  },
  {
    "text": "ethernet pair which knows about pod C",
    "start": "1157340",
    "end": "1159919"
  },
  {
    "text": "and pod C finally receives the packet",
    "start": "1159919",
    "end": "1162980"
  },
  {
    "text": "okay",
    "start": "1162980",
    "end": "1164980"
  },
  {
    "text": "uh what if the Pod IP address changes uh",
    "start": "1164980",
    "end": "1169280"
  },
  {
    "text": "and this is this is wrongly worded but",
    "start": "1169280",
    "end": "1171140"
  },
  {
    "text": "uh let me put it this way",
    "start": "1171140",
    "end": "1173360"
  },
  {
    "text": "all the examples that we saw they were",
    "start": "1173360",
    "end": "1175520"
  },
  {
    "text": "directly using powered IP addresses",
    "start": "1175520",
    "end": "1177200"
  },
  {
    "text": "right pod a was using the IP address of",
    "start": "1177200",
    "end": "1179299"
  },
  {
    "text": "pod C to communicate but pods are",
    "start": "1179299",
    "end": "1181940"
  },
  {
    "text": "ephemeral right pods can come and go if",
    "start": "1181940",
    "end": "1185000"
  },
  {
    "text": "you want to deploy a new version of a",
    "start": "1185000",
    "end": "1186380"
  },
  {
    "text": "pod the old one gets deleted and new one",
    "start": "1186380",
    "end": "1188419"
  },
  {
    "text": "gets created so it's always",
    "start": "1188419",
    "end": "1191380"
  },
  {
    "text": "not a good idea to use pod IP addresses",
    "start": "1191380",
    "end": "1194419"
  },
  {
    "text": "directly for any sort of communication",
    "start": "1194419",
    "end": "1196039"
  },
  {
    "text": "within your cluster",
    "start": "1196039",
    "end": "1198200"
  },
  {
    "text": "so what should we do in that case we",
    "start": "1198200",
    "end": "1201200"
  },
  {
    "text": "should use something called as a service",
    "start": "1201200",
    "end": "1202580"
  },
  {
    "text": "right I guess if if you have used",
    "start": "1202580",
    "end": "1205400"
  },
  {
    "text": "kubernetes you must have used a service",
    "start": "1205400",
    "end": "1209080"
  },
  {
    "text": "or deployment service these three things",
    "start": "1209080",
    "end": "1211820"
  },
  {
    "text": "are kind of you know the very basic",
    "start": "1211820",
    "end": "1214039"
  },
  {
    "text": "building blocks that that you start with",
    "start": "1214039",
    "end": "1216620"
  },
  {
    "text": "so what is the service services and",
    "start": "1216620",
    "end": "1218120"
  },
  {
    "text": "abstraction for a group of PODS right",
    "start": "1218120",
    "end": "1221179"
  },
  {
    "text": "all of us know that",
    "start": "1221179",
    "end": "1223760"
  },
  {
    "text": "this is a sample yaml for a service so",
    "start": "1223760",
    "end": "1227120"
  },
  {
    "text": "you see that we we named the service",
    "start": "1227120",
    "end": "1229520"
  },
  {
    "text": "hello kubernetes",
    "start": "1229520",
    "end": "1230919"
  },
  {
    "text": "and this is the important block the",
    "start": "1230919",
    "end": "1233299"
  },
  {
    "text": "selector block",
    "start": "1233299",
    "end": "1234380"
  },
  {
    "text": "what does this tell kubernetes it says",
    "start": "1234380",
    "end": "1237620"
  },
  {
    "text": "find all the pods that have label with",
    "start": "1237620",
    "end": "1241160"
  },
  {
    "text": "key equal to app and value equal to",
    "start": "1241160",
    "end": "1243260"
  },
  {
    "text": "hello kubernetes and group this together",
    "start": "1243260",
    "end": "1245720"
  },
  {
    "text": "for me right and what do you do after",
    "start": "1245720",
    "end": "1248120"
  },
  {
    "text": "creating the group create a cluster IP",
    "start": "1248120",
    "end": "1250700"
  },
  {
    "text": "for them now this cluster IP is an",
    "start": "1250700",
    "end": "1253039"
  },
  {
    "text": "interesting concept right uh it's a",
    "start": "1253039",
    "end": "1255140"
  },
  {
    "text": "virtual IP it's it does not point to",
    "start": "1255140",
    "end": "1257179"
  },
  {
    "text": "anything in specific right so if if",
    "start": "1257179",
    "end": "1260240"
  },
  {
    "text": "there are no pods that have these these",
    "start": "1260240",
    "end": "1263360"
  },
  {
    "text": "labels",
    "start": "1263360",
    "end": "1264320"
  },
  {
    "text": "you will still have a cluster IP which",
    "start": "1264320",
    "end": "1266419"
  },
  {
    "text": "will point to nothing right which will",
    "start": "1266419",
    "end": "1268039"
  },
  {
    "text": "point to void because it's a virtual IP",
    "start": "1268039",
    "end": "1270260"
  },
  {
    "text": "so uh when you when you create a service",
    "start": "1270260",
    "end": "1274400"
  },
  {
    "text": "there's one more implementation level",
    "start": "1274400",
    "end": "1276020"
  },
  {
    "text": "detail known as endpoints in kubernetes",
    "start": "1276020",
    "end": "1277820"
  },
  {
    "text": "which is nothing but the list of IP",
    "start": "1277820",
    "end": "1279260"
  },
  {
    "text": "addresses but uh let's not let's not get",
    "start": "1279260",
    "end": "1281960"
  },
  {
    "text": "into that we'll just quickly see how",
    "start": "1281960",
    "end": "1285020"
  },
  {
    "text": "a pod will talk to another pod but this",
    "start": "1285020",
    "end": "1288140"
  },
  {
    "text": "time using a service IP address rather",
    "start": "1288140",
    "end": "1290360"
  },
  {
    "text": "than the powered IP",
    "start": "1290360",
    "end": "1292100"
  },
  {
    "text": "word changes again the same example we",
    "start": "1292100",
    "end": "1295700"
  },
  {
    "text": "are on node one uh pod a again is",
    "start": "1295700",
    "end": "1299059"
  },
  {
    "text": "looking for pod C for some reason but",
    "start": "1299059",
    "end": "1301940"
  },
  {
    "text": "this time we are not using the IP",
    "start": "1301940",
    "end": "1304760"
  },
  {
    "text": "address of pod C we are using the",
    "start": "1304760",
    "end": "1306500"
  },
  {
    "text": "service IP right or the cluster IP or",
    "start": "1306500",
    "end": "1309559"
  },
  {
    "text": "virtual IP for part C okay",
    "start": "1309559",
    "end": "1313159"
  },
  {
    "text": "ah the packet is placed on the virtual",
    "start": "1313159",
    "end": "1316400"
  },
  {
    "text": "ethernet pair",
    "start": "1316400",
    "end": "1318500"
  },
  {
    "text": "it goes to the bridge and before it",
    "start": "1318500",
    "end": "1321200"
  },
  {
    "text": "leaves the machine",
    "start": "1321200",
    "end": "1322880"
  },
  {
    "text": "it gets intercepted by iptables iptables",
    "start": "1322880",
    "end": "1326419"
  },
  {
    "text": "is a is a five we all know iptables as a",
    "start": "1326419",
    "end": "1329059"
  },
  {
    "text": "firewall firewalling solution or a",
    "start": "1329059",
    "end": "1331820"
  },
  {
    "text": "software that does firewall right and",
    "start": "1331820",
    "end": "1334220"
  },
  {
    "text": "any firewall will have access to all",
    "start": "1334220",
    "end": "1336980"
  },
  {
    "text": "incoming and all outgoing data okay but",
    "start": "1336980",
    "end": "1339799"
  },
  {
    "text": "I P tables can do more than just",
    "start": "1339799",
    "end": "1342020"
  },
  {
    "text": "firewalling we'll just quickly look at",
    "start": "1342020",
    "end": "1344179"
  },
  {
    "text": "what it does for us so if there is a",
    "start": "1344179",
    "end": "1346760"
  },
  {
    "text": "rule so when the iptables uh intercepts",
    "start": "1346760",
    "end": "1349880"
  },
  {
    "text": "are packet and if it finds that there is",
    "start": "1349880",
    "end": "1353720"
  },
  {
    "text": "a rule defined for the destination IP",
    "start": "1353720",
    "end": "1355760"
  },
  {
    "text": "right a service IP it will",
    "start": "1355760",
    "end": "1359539"
  },
  {
    "text": "modify the destination IP address and",
    "start": "1359539",
    "end": "1362299"
  },
  {
    "text": "replace it with one of the pods IP for",
    "start": "1362299",
    "end": "1365840"
  },
  {
    "text": "that service right so for example uh we",
    "start": "1365840",
    "end": "1369679"
  },
  {
    "text": "saw the image where there was one",
    "start": "1369679",
    "end": "1371419"
  },
  {
    "text": "service and there were three pods right",
    "start": "1371419",
    "end": "1373400"
  },
  {
    "text": "so it just picked one of the powered IPS",
    "start": "1373400",
    "end": "1376400"
  },
  {
    "text": "at random and it modified or translated",
    "start": "1376400",
    "end": "1380120"
  },
  {
    "text": "the destination IP and it and this this",
    "start": "1380120",
    "end": "1382340"
  },
  {
    "text": "activity is known as dnat why D Nat",
    "start": "1382340",
    "end": "1385280"
  },
  {
    "text": "because we are playing with the",
    "start": "1385280",
    "end": "1387140"
  },
  {
    "text": "destination IP here and we are doing a",
    "start": "1387140",
    "end": "1390140"
  },
  {
    "text": "destination Network address translation",
    "start": "1390140",
    "end": "1393200"
  },
  {
    "text": "okay uh",
    "start": "1393200",
    "end": "1395840"
  },
  {
    "text": "so far so good",
    "start": "1395840",
    "end": "1397760"
  },
  {
    "text": "the packet then eventually goes to the",
    "start": "1397760",
    "end": "1400280"
  },
  {
    "text": "interface the e0 interface and leaves",
    "start": "1400280",
    "end": "1402559"
  },
  {
    "text": "the machine",
    "start": "1402559",
    "end": "1403340"
  },
  {
    "text": "but a thing to note here is that in case",
    "start": "1403340",
    "end": "1406940"
  },
  {
    "text": "of flannel we did not modify the packet",
    "start": "1406940",
    "end": "1409460"
  },
  {
    "text": "we did not change any data we just added",
    "start": "1409460",
    "end": "1411980"
  },
  {
    "text": "one more layer we encapsulated the data",
    "start": "1411980",
    "end": "1414500"
  },
  {
    "text": "and we decapsulated the data so that was",
    "start": "1414500",
    "end": "1416900"
  },
  {
    "text": "fine but here we are actually changing",
    "start": "1416900",
    "end": "1419360"
  },
  {
    "text": "we are making changes to the packet",
    "start": "1419360",
    "end": "1421940"
  },
  {
    "text": "itself right the destination IP is being",
    "start": "1421940",
    "end": "1424640"
  },
  {
    "text": "changed it is being translated so when",
    "start": "1424640",
    "end": "1427400"
  },
  {
    "text": "the packet traverses back uh we have to",
    "start": "1427400",
    "end": "1431059"
  },
  {
    "text": "kind of undo those changes as well right",
    "start": "1431059",
    "end": "1433340"
  },
  {
    "text": "and same IP tables is going to do that",
    "start": "1433340",
    "end": "1436039"
  },
  {
    "text": "for us right so when the packet is",
    "start": "1436039",
    "end": "1438080"
  },
  {
    "text": "coming back it will have source as the",
    "start": "1438080",
    "end": "1441320"
  },
  {
    "text": "Pod c001ip and the destination will be",
    "start": "1441320",
    "end": "1444799"
  },
  {
    "text": "pod a right because this is the backward",
    "start": "1444799",
    "end": "1447260"
  },
  {
    "text": "Journey",
    "start": "1447260",
    "end": "1448700"
  },
  {
    "text": "what what iptables will do it will",
    "start": "1448700",
    "end": "1451059"
  },
  {
    "text": "replace the source IP which is POD",
    "start": "1451059",
    "end": "1454059"
  },
  {
    "text": "c001ip and",
    "start": "1454059",
    "end": "1456500"
  },
  {
    "text": "make it SVC",
    "start": "1456500",
    "end": "1459140"
  },
  {
    "text": "CIP which is the cluster IP",
    "start": "1459140",
    "end": "1461900"
  },
  {
    "text": "now there's one interesting thing that",
    "start": "1461900",
    "end": "1464360"
  },
  {
    "text": "uh we I just skipped in the previous",
    "start": "1464360",
    "end": "1466100"
  },
  {
    "text": "slides is about contracts or rather",
    "start": "1466100",
    "end": "1468620"
  },
  {
    "text": "connection trackers which is again a",
    "start": "1468620",
    "end": "1470600"
  },
  {
    "text": "Linux functionality where the your",
    "start": "1470600",
    "end": "1473059"
  },
  {
    "text": "operating system keeps a track of all",
    "start": "1473059",
    "end": "1475340"
  },
  {
    "text": "the address translations that it does",
    "start": "1475340",
    "end": "1477559"
  },
  {
    "text": "okay and that's how kubernetes will or",
    "start": "1477559",
    "end": "1480799"
  },
  {
    "text": "rather Linux will know the IP tables",
    "start": "1480799",
    "end": "1482780"
  },
  {
    "text": "will know that this is the particular",
    "start": "1482780",
    "end": "1484520"
  },
  {
    "text": "incoming packet that I have to fix or",
    "start": "1484520",
    "end": "1487340"
  },
  {
    "text": "rather do s netting right Source netting",
    "start": "1487340",
    "end": "1490640"
  },
  {
    "text": "Source Network address translation",
    "start": "1490640",
    "end": "1493880"
  },
  {
    "text": "okay and finally the packet comes back",
    "start": "1493880",
    "end": "1496820"
  },
  {
    "text": "to pod a and you know the journey is",
    "start": "1496820",
    "end": "1499820"
  },
  {
    "text": "complete",
    "start": "1499820",
    "end": "1501559"
  },
  {
    "text": "uh this is the algorithm that",
    "start": "1501559",
    "end": "1505100"
  },
  {
    "text": "your your IP tables will will basically",
    "start": "1505100",
    "end": "1507260"
  },
  {
    "text": "just follow simply when you create a new",
    "start": "1507260",
    "end": "1509840"
  },
  {
    "text": "service so if it finds any",
    "start": "1509840",
    "end": "1513559"
  },
  {
    "text": "destination IP to match with an existing",
    "start": "1513559",
    "end": "1516380"
  },
  {
    "text": "service IP",
    "start": "1516380",
    "end": "1518120"
  },
  {
    "text": "it will pick one of the pods for service",
    "start": "1518120",
    "end": "1520220"
  },
  {
    "text": "a and replace the destination IP for",
    "start": "1520220",
    "end": "1522860"
  },
  {
    "text": "that packet right and do the translation",
    "start": "1522860",
    "end": "1527600"
  },
  {
    "text": "so yeah I guess that was it for today",
    "start": "1527600",
    "end": "1530419"
  },
  {
    "text": "and I had to rush a bit because",
    "start": "1530419",
    "end": "1532840"
  },
  {
    "text": "there were some time constraints but if",
    "start": "1532840",
    "end": "1535700"
  },
  {
    "text": "you have any questions feel free to ask",
    "start": "1535700",
    "end": "1537760"
  },
  {
    "text": "now or maybe you know you can reach out",
    "start": "1537760",
    "end": "1540500"
  },
  {
    "text": "to me over email or Twitter or whatever",
    "start": "1540500",
    "end": "1543799"
  },
  {
    "text": "uh am I Audible",
    "start": "1543799",
    "end": "1547240"
  },
  {
    "text": "yeah so actually I had to kind of frame",
    "start": "1547580",
    "end": "1549799"
  },
  {
    "text": "this question in my mind a bit so uh",
    "start": "1549799",
    "end": "1552320"
  },
  {
    "text": "I've been trying to understand uh cni",
    "start": "1552320",
    "end": "1555200"
  },
  {
    "text": "for quite some time I'm assuming cni is",
    "start": "1555200",
    "end": "1558080"
  },
  {
    "text": "a piece of software which allows uh the",
    "start": "1558080",
    "end": "1562100"
  },
  {
    "text": "container to make calls",
    "start": "1562100",
    "end": "1566360"
  },
  {
    "text": "to assign uh to do things like assign IP",
    "start": "1566360",
    "end": "1569659"
  },
  {
    "text": "address and uh so uh in one of yours uh",
    "start": "1569659",
    "end": "1575840"
  },
  {
    "text": "you showed that",
    "start": "1575840",
    "end": "1578500"
  },
  {
    "text": "kubernetes first speaks with container D",
    "start": "1578500",
    "end": "1582020"
  },
  {
    "text": "and then container D makes some call to",
    "start": "1582020",
    "end": "1585340"
  },
  {
    "text": "VPC cni so what happens after that",
    "start": "1585340",
    "end": "1590120"
  },
  {
    "text": "because uh based on what I have uh read",
    "start": "1590120",
    "end": "1593539"
  },
  {
    "text": "so far vpc9 needs additional plugins",
    "start": "1593539",
    "end": "1597020"
  },
  {
    "text": "where uh",
    "start": "1597020",
    "end": "1598960"
  },
  {
    "text": "uh software like we works or",
    "start": "1598960",
    "end": "1603640"
  },
  {
    "text": "you know other such things come and",
    "start": "1603640",
    "end": "1606380"
  },
  {
    "text": "where does VPC cni figure in this whole",
    "start": "1606380",
    "end": "1609620"
  },
  {
    "text": "flow uh I'm not sure if I I totally",
    "start": "1609620",
    "end": "1613100"
  },
  {
    "text": "understand your question here honestly",
    "start": "1613100",
    "end": "1615039"
  },
  {
    "text": "But to answer the first part of your",
    "start": "1615039",
    "end": "1617360"
  },
  {
    "text": "question the the CRI plugin will will",
    "start": "1617360",
    "end": "1620299"
  },
  {
    "text": "send that those sandbox IDs and network",
    "start": "1620299",
    "end": "1623120"
  },
  {
    "text": "namespace data to the cni plugin and the",
    "start": "1623120",
    "end": "1625340"
  },
  {
    "text": "cni plugin eventually will return with",
    "start": "1625340",
    "end": "1627500"
  },
  {
    "text": "the IP address of the pod that's what we",
    "start": "1627500",
    "end": "1629900"
  },
  {
    "text": "saw in the diagram there obviously these",
    "start": "1629900",
    "end": "1632059"
  },
  {
    "text": "these plugins do a lot more than what we",
    "start": "1632059",
    "end": "1634580"
  },
  {
    "text": "just saw here right because we were",
    "start": "1634580",
    "end": "1636500"
  },
  {
    "text": "focused on networking between two pods",
    "start": "1636500",
    "end": "1638240"
  },
  {
    "text": "okay right so uh I mean to answer the",
    "start": "1638240",
    "end": "1641059"
  },
  {
    "text": "first part of the question yes uh the",
    "start": "1641059",
    "end": "1643100"
  },
  {
    "text": "CRI plugin will talk to cni plugin and",
    "start": "1643100",
    "end": "1645500"
  },
  {
    "text": "get the IP address details and if you",
    "start": "1645500",
    "end": "1647179"
  },
  {
    "text": "want to go in Us in slightly more detail",
    "start": "1647179",
    "end": "1648860"
  },
  {
    "text": "the CRI plugin would I guess then create",
    "start": "1648860",
    "end": "1651020"
  },
  {
    "text": "a pause container which does a lot of",
    "start": "1651020",
    "end": "1653480"
  },
  {
    "text": "provisioning for the Pod right setting",
    "start": "1653480",
    "end": "1655820"
  },
  {
    "text": "up the c groups that we spoke about",
    "start": "1655820",
    "end": "1657260"
  },
  {
    "text": "setting up the namespaces right that",
    "start": "1657260",
    "end": "1660080"
  },
  {
    "text": "happens via pause container through CRI",
    "start": "1660080",
    "end": "1662419"
  },
  {
    "text": "plugin right so these two things work",
    "start": "1662419",
    "end": "1665539"
  },
  {
    "text": "very close to each other maybe we can",
    "start": "1665539",
    "end": "1668059"
  },
  {
    "text": "connect offline and you know discuss",
    "start": "1668059",
    "end": "1669919"
  },
  {
    "text": "your VPC cni specific question",
    "start": "1669919",
    "end": "1673460"
  },
  {
    "text": "uh but yeah I hope that answers at least",
    "start": "1673460",
    "end": "1676640"
  },
  {
    "text": "the first part",
    "start": "1676640",
    "end": "1677840"
  },
  {
    "text": "yeah on a high level yeah thanks",
    "start": "1677840",
    "end": "1682539"
  },
  {
    "text": "thank you",
    "start": "1682700",
    "end": "1685360"
  }
]