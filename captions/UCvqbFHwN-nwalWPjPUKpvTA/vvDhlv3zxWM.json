[
  {
    "text": "hello everyone uh welcome to this session where we will be doing our vtus",
    "start": "640",
    "end": "6319"
  },
  {
    "text": "maintainer talk and the talk is titled scaling my squl with",
    "start": "6319",
    "end": "12880"
  },
  {
    "text": "vtus my name is dpti sigi I'm the technical lead and um a maintainer of",
    "start": "12880",
    "end": "21080"
  },
  {
    "text": "vtus he everybody thanks for coming uh my name is Matt Lord I also work at",
    "start": "21080",
    "end": "26800"
  },
  {
    "text": "Planet scale and uh I'm a vest maintainer been focusing on V replication which is one of the the",
    "start": "26800",
    "end": "33320"
  },
  {
    "text": "things we'll be talking about today we'll start with an overview of",
    "start": "33320",
    "end": "38640"
  },
  {
    "text": "witus and then we will go on to the migration part of it and a demo so these",
    "start": "38640",
    "end": "44719"
  },
  {
    "text": "maintainer talks are typically structured as an intro and a deep dive and the first part will be an intro some",
    "start": "44719",
    "end": "51600"
  },
  {
    "text": "of you may have already heard of witus so you can feel free to let your attention wander in that case until we",
    "start": "51600",
    "end": "58320"
  },
  {
    "text": "get to new features because we will be talking about what's",
    "start": "58320",
    "end": "63680"
  },
  {
    "text": "new to start with what is witus witus is a cloud native database it's massively",
    "start": "63680",
    "end": "69840"
  },
  {
    "text": "scalable and the way it achieves scalability is through sharding and there are really no uh theoretical",
    "start": "69840",
    "end": "77840"
  },
  {
    "text": "limits to how big you your Wiest cluster can be or how uh much you can scale with",
    "start": "77840",
    "end": "83159"
  },
  {
    "text": "it it is also highly available and it's compatible with my SQL both 5.7 and 8 AO",
    "start": "83159",
    "end": "90840"
  },
  {
    "text": "so vtis was built as a scaling solution for my SQL and that is its origin",
    "start": "90840",
    "end": "98200"
  },
  {
    "text": "story vus works with various data database Frameworks with ORS with Legacy",
    "start": "98200",
    "end": "104439"
  },
  {
    "text": "code which uh talks directly to my SQL and with thirdparty",
    "start": "104439",
    "end": "110799"
  },
  {
    "text": "applications what witus does is that it presents a logical database view of many",
    "start": "110799",
    "end": "116960"
  },
  {
    "text": "physical MySQL instances to Applications and this logical database is what we",
    "start": "116960",
    "end": "122680"
  },
  {
    "text": "call a key space and the physical databases are basically representing",
    "start": "122680",
    "end": "129399"
  },
  {
    "text": "partitions of your data so if you have a large amount of data they are being the data is being",
    "start": "129399",
    "end": "136319"
  },
  {
    "text": "split up into multiple shards and these terms keyspace and Shard are important",
    "start": "136319",
    "end": "141599"
  },
  {
    "text": "because we'll come back to them and the way to think about A Shard is that every",
    "start": "141599",
    "end": "146840"
  },
  {
    "text": "row in a table lives in ex exactly one Shard and if you combine all of your",
    "start": "146840",
    "end": "152440"
  },
  {
    "text": "shards that is your entire set of data what witus is doing when you have",
    "start": "152440",
    "end": "160360"
  },
  {
    "text": "an architecture like that is that queries are being routed to the correct",
    "start": "160360",
    "end": "165800"
  },
  {
    "text": "correct physical database so as far as application is concerned it looks like a",
    "start": "165800",
    "end": "171040"
  },
  {
    "text": "single monolithic MySQL instance but behind the scenes queries are going to be routed to the appropriate MySQL",
    "start": "171040",
    "end": "178760"
  },
  {
    "text": "instance Wiest supports uh both grpc and MySQL clients basically it speaks the uh",
    "start": "178760",
    "end": "186239"
  },
  {
    "text": "MySQL protocol and clients can have a single connection to aest Cluster which",
    "start": "186239",
    "end": "191920"
  },
  {
    "text": "behind the scenes results in multiple connections to individual MySQL",
    "start": "191920",
    "end": "198400"
  },
  {
    "text": "databases this is what the witas architecture looks like from an application point of view connections",
    "start": "198400",
    "end": "204760"
  },
  {
    "text": "typically go through a load balancer which is not actually part of witus it can be any load balancer and then",
    "start": "204760",
    "end": "212400"
  },
  {
    "text": "queries go to the component that we call VT gate vgate is a lightweight stateless",
    "start": "212400",
    "end": "219280"
  },
  {
    "text": "proxy which understands the myql protocol but Al but can also serve grpc",
    "start": "219280",
    "end": "225879"
  },
  {
    "text": "requests for data and parses the query plans the query",
    "start": "225879",
    "end": "232439"
  },
  {
    "text": "decides where to send it the component to which it ends up sending the queries",
    "start": "232439",
    "end": "237680"
  },
  {
    "text": "is called VT tablet and VT tablet is a sidecar management type of process for",
    "start": "237680",
    "end": "244519"
  },
  {
    "text": "my SQL D so it mediates all access to my SQL and it is how we achieve High",
    "start": "244519",
    "end": "252480"
  },
  {
    "text": "availability so there are typically multiple MySQL instances in a shard in a",
    "start": "252480",
    "end": "260600"
  },
  {
    "text": "replication uh topology and you have many shards so each Shard has a primary",
    "start": "260600",
    "end": "267440"
  },
  {
    "text": "All rights always go to the primary and it may have one or more replicas of one",
    "start": "267440",
    "end": "272600"
  },
  {
    "text": "or more different types so there are there's a specialized type called a only",
    "start": "272600",
    "end": "277720"
  },
  {
    "text": "which is used for long running analytics queries and so on so the primary and",
    "start": "277720",
    "end": "283160"
  },
  {
    "text": "replicas are running in this replication configuration and uh Vitus will monitor",
    "start": "283160",
    "end": "289400"
  },
  {
    "text": "for failures and repair failures and make sure that each Shard is always",
    "start": "289400",
    "end": "295360"
  },
  {
    "text": "serving always available so this management component that tracks the",
    "start": "295360",
    "end": "300680"
  },
  {
    "text": "failures and repairs them is called VTR Orc in addition to that there's a control demon layer called BT CLD",
    "start": "300680",
    "end": "308240"
  },
  {
    "text": "through which users can manage their Wiest clusters so for instance if you",
    "start": "308240",
    "end": "313520"
  },
  {
    "text": "want to run a maintenance operation you may want to actually plan a failover and",
    "start": "313520",
    "end": "318840"
  },
  {
    "text": "move the primary to a different MySQL instance so that you can do an OS upgrade or software upgrade or whatever",
    "start": "318840",
    "end": "324479"
  },
  {
    "text": "it is right and there's also a web UI called VT admin which talks through VT",
    "start": "324479",
    "end": "330600"
  },
  {
    "text": "CLD to all of the other Vitus components to provide a management view of the vitus cluster in addition to that there",
    "start": "330600",
    "end": "338319"
  },
  {
    "text": "is a there is what we call a topo server this is a metadata store that allows different witus components to discover",
    "start": "338319",
    "end": "344720"
  },
  {
    "text": "each other vus is in production in many",
    "start": "344720",
    "end": "350520"
  },
  {
    "text": "places uh some of the notable ones are slack Square HubSpot uh and Planet scale which",
    "start": "350520",
    "end": "358840"
  },
  {
    "text": "provides a database as a service and uh so has many many uh thousands of vest",
    "start": "358840",
    "end": "366160"
  },
  {
    "text": "clusters running GitHub is also an interesting one because it took them a while to uh",
    "start": "366160",
    "end": "373560"
  },
  {
    "text": "migrate into witus and they have a very large amount of",
    "start": "373560",
    "end": "380120"
  },
  {
    "text": "data so I sort of talked about this already a little bit but these are some",
    "start": "380520",
    "end": "385960"
  },
  {
    "text": "of the key adopters slack has been running 100% on for several years now uh",
    "start": "385960",
    "end": "392599"
  },
  {
    "text": "GitHub runs on witus jd.com in China they are running 10,000 plus databases",
    "start": "392599",
    "end": "399280"
  },
  {
    "text": "on vits and then Planet scales database service we have a robust Community we",
    "start": "399280",
    "end": "406280"
  },
  {
    "text": "have about 15 maintainers and um there are 81",
    "start": "406280",
    "end": "412400"
  },
  {
    "text": "companies from which people have contributed to vas in the last two years all of these stats are from Dev stats",
    "start": "412400",
    "end": "418360"
  },
  {
    "text": "and uh feel free to go look at them as well uh out of these 81 companies we got",
    "start": "418360",
    "end": "425400"
  },
  {
    "text": "PRS from 47 companies and there were 200 plus uh PR authors and 400 plus",
    "start": "425400",
    "end": "433560"
  },
  {
    "text": "contributors during that 2-year period and obviously when we say contributions we are counting non-code contributions",
    "start": "433560",
    "end": "440199"
  },
  {
    "text": "as well so these are issues issue comments reviews on PRS documentation",
    "start": "440199",
    "end": "445840"
  },
  {
    "text": "all of those things count uh towards contributions",
    "start": "445840",
    "end": "451319"
  },
  {
    "text": "now let's talk about new",
    "start": "451919",
    "end": "455440"
  },
  {
    "text": "features we just did a ga release that's wits 18.0 uh there are several things which",
    "start": "457680",
    "end": "463840"
  },
  {
    "text": "are new in this release and uh we talk about them in the release blog but I'll",
    "start": "463840",
    "end": "470400"
  },
  {
    "text": "go over a few of those here as well in addition to that I'm actually going to",
    "start": "470400",
    "end": "475720"
  },
  {
    "text": "cover what is new in the last one year so some some of this may be repetitive",
    "start": "475720",
    "end": "480800"
  },
  {
    "text": "for people who went to the cube Con in EU but I just want to make sure that I cover everything that happened since the",
    "start": "480800",
    "end": "486680"
  },
  {
    "text": "last cubeone in North America so we've done three GA releases in the last one year and we've also",
    "start": "486680",
    "end": "494840"
  },
  {
    "text": "done 12 or 15 patch releases",
    "start": "494840",
    "end": "499919"
  },
  {
    "text": "um we typically do a ga release every four months so that ends up being three",
    "start": "499919",
    "end": "505280"
  },
  {
    "text": "releases a year one of the things that's new or not new but new is point in time",
    "start": "505280",
    "end": "512680"
  },
  {
    "text": "recovery so we added support for point in time recovery in Vitus several years",
    "start": "512680",
    "end": "517919"
  },
  {
    "text": "ago but the way it was implemented required people to run a thirdparty bin",
    "start": "517919",
    "end": "523719"
  },
  {
    "text": "log server and all the binlog servers that are available for my SQL are either unmaintained",
    "start": "523719",
    "end": "530920"
  },
  {
    "text": "or difficult to operate or whatever it's it's really not been practical for",
    "start": "530920",
    "end": "536040"
  },
  {
    "text": "people to run those things or it's just an additional thing that that you have to run maintain make sure is highly",
    "start": "536040",
    "end": "542519"
  },
  {
    "text": "available it just adds to the deployment burden so what has happened in Vitas",
    "start": "542519",
    "end": "548120"
  },
  {
    "text": "over the last couple of releases is that we have built out incremental backups within Vitas which basically just depend",
    "start": "548120",
    "end": "555959"
  },
  {
    "text": "on saving the bin logs and using those incremental backups we can now do point in time recovery either to a specified",
    "start": "555959",
    "end": "563640"
  },
  {
    "text": "GTI ID or to a Tim stamp and you can actually do this",
    "start": "563640",
    "end": "569640"
  },
  {
    "text": "across shards for a key space so you can recover every shard in a key space to the same point in time and we'll compute",
    "start": "569640",
    "end": "577240"
  },
  {
    "text": "what GTI that needs to be and replay the bin logs until that point we have experimental support for",
    "start": "577240",
    "end": "584200"
  },
  {
    "text": "foreign keys this is one of the biggest things that's Landing in 18.0 historically vtas has said that",
    "start": "584200",
    "end": "591040"
  },
  {
    "text": "people can run with foreign keys and certain things won't work and um that is",
    "start": "591040",
    "end": "597040"
  },
  {
    "text": "still true that certain things won't work work but the number of things that won't work is much smaller now because",
    "start": "597040",
    "end": "603000"
  },
  {
    "text": "we have actually brought the logic of supporting foreign key relationships into witus and currently it only works",
    "start": "603000",
    "end": "610600"
  },
  {
    "text": "for unshaded or within within a Shard but in the future we plan to support",
    "start": "610600",
    "end": "615959"
  },
  {
    "text": "cross Shard foreign Keys which is something that you simply cannot do with vanilla",
    "start": "615959",
    "end": "623360"
  },
  {
    "text": "MySQL we have also added native View support across shards so a view",
    "start": "623560",
    "end": "628680"
  },
  {
    "text": "definition can span data that's across shards and it will uh work you will get",
    "start": "628680",
    "end": "635160"
  },
  {
    "text": "data when you select from A View that physically lives in different shards this is again something that you can't",
    "start": "635160",
    "end": "642279"
  },
  {
    "text": "possibly do with vanilla MySQL if you are doing some sort of uh application",
    "start": "642279",
    "end": "647920"
  },
  {
    "text": "based sharding or custom sharding we have much better support for",
    "start": "647920",
    "end": "653079"
  },
  {
    "text": "Union queries derived tables subqueries all of those things we've added support for prepare",
    "start": "653079",
    "end": "661040"
  },
  {
    "text": "execute deallocate through the MySQL protocol we already had support for the prepare protocol but now these things",
    "start": "661040",
    "end": "667240"
  },
  {
    "text": "work through the MySQL protocol as well we've built a session aware connection",
    "start": "667240",
    "end": "672839"
  },
  {
    "text": "pool previously if you wanted to override certain system variables on",
    "start": "672839",
    "end": "678240"
  },
  {
    "text": "your session you would end up getting a dedicated connection to the backing MySQL and that could lead to connection",
    "start": "678240",
    "end": "684920"
  },
  {
    "text": "exhaustion at the MySQL level because you were bypassing the connection pool and that created a lot of problems so we",
    "start": "684920",
    "end": "691800"
  },
  {
    "text": "finally said we are going to make the connection pool session aware so that uh",
    "start": "691800",
    "end": "697399"
  },
  {
    "text": "the same connection can be reused by the next client if the settings haven't",
    "start": "697399",
    "end": "703880"
  },
  {
    "text": "changed we can now do query buffering during migration cutovers and get near",
    "start": "703880",
    "end": "709360"
  },
  {
    "text": "zero dtime cutovers for migrations previously this was only supported for resharding within existing Wiest",
    "start": "709360",
    "end": "717959"
  },
  {
    "text": "clusters we also have more efficient replication through support for no blob and",
    "start": "717959",
    "end": "723720"
  },
  {
    "text": "compressed bin logs we have built support for safer uh",
    "start": "723720",
    "end": "730200"
  },
  {
    "text": "safe MySQL minor version upgrades through the vus operator previously we",
    "start": "730200",
    "end": "735399"
  },
  {
    "text": "would be shutting down my SQL with fast shutdown and there were minor versions",
    "start": "735399",
    "end": "740480"
  },
  {
    "text": "where the upgrade won't work so that has been fixed we have built a number of MySQL syntax extensions the one I want",
    "start": "740480",
    "end": "748199"
  },
  {
    "text": "to highlight is V explain vus has a standalone tool called VT explain that",
    "start": "748199",
    "end": "753279"
  },
  {
    "text": "you can use to see how the queries get routed to different shards we explain lets you do that from a MySQL",
    "start": "753279",
    "end": "761519"
  },
  {
    "text": "client we've uh changed our CLI to be to",
    "start": "761519",
    "end": "766680"
  },
  {
    "text": "use Cobra and that just gives a much better user experience for users of the",
    "start": "766680",
    "end": "772240"
  },
  {
    "text": "CLI and along with that we've also built a structured server API on the server",
    "start": "772240",
    "end": "778320"
  },
  {
    "text": "side that that the CLI talks to so that responses are in Json format and are",
    "start": "778320",
    "end": "785160"
  },
  {
    "text": "easy to pass versus just being raw strings that are much harder to",
    "start": "785160",
    "end": "790360"
  },
  {
    "text": "parse we've also implemented or changed our flags to use wiper and this enables",
    "start": "790360",
    "end": "797040"
  },
  {
    "text": "us to autogenerate the docks and in future we can support Dynamic reload of",
    "start": "797040",
    "end": "803160"
  },
  {
    "text": "configuration and we have more efficient connection pooling coming in the next",
    "start": "803160",
    "end": "808240"
  },
  {
    "text": "release it's it's already been merged to main but it didn't get into 18 and that's going to be much better than what",
    "start": "808240",
    "end": "813600"
  },
  {
    "text": "we have today and also non-recursive CTE support is coming soon as",
    "start": "813600",
    "end": "820120"
  },
  {
    "text": "well cross Shard foreign Keys planned I already mentioned that so now I'll turn",
    "start": "820120",
    "end": "825920"
  },
  {
    "text": "it over to Matt to talk about migrating to wits all right thank you deep the so I'm",
    "start": "825920",
    "end": "832839"
  },
  {
    "text": "just going to highlight kind of what features we're going to be leveraging conceptually a little bit about vew",
    "start": "832839",
    "end": "839600"
  },
  {
    "text": "replication and then we're going to jump right into a demo",
    "start": "839600",
    "end": "845040"
  },
  {
    "text": "so what this talk about what this talk is about is as as you can guess from the",
    "start": "845040",
    "end": "850759"
  },
  {
    "text": "title is at what at some point you're going to reach the limits of what you can do with a single myc instance so",
    "start": "850759",
    "end": "856880"
  },
  {
    "text": "normally you'd have a you know a replica set with a primary and one or more",
    "start": "856880",
    "end": "862440"
  },
  {
    "text": "replicas um but eventually you just can't scale that vertically anymore you may literally not be able to get bigger",
    "start": "862440",
    "end": "867839"
  },
  {
    "text": "machines than you c l already have it becomes cost prohibitive because the",
    "start": "867839",
    "end": "873120"
  },
  {
    "text": "cost is exponential as you start getting larger and larger machines or for various operational reason reasons it",
    "start": "873120",
    "end": "879839"
  },
  {
    "text": "might just not be practical anymore it becomes much more difficult to do U online schema changes to manage backups",
    "start": "879839",
    "end": "886399"
  },
  {
    "text": "and a whole host of things at some point once you're managing your entire data set on a single",
    "start": "886399",
    "end": "891720"
  },
  {
    "text": "server and so that's when you you realize at some point okay we're going to have to start partitioning our data",
    "start": "891720",
    "end": "897079"
  },
  {
    "text": "set um and that's when vitess comes in that's when most people start exploring",
    "start": "897079",
    "end": "902320"
  },
  {
    "text": "different options and that's when they um will become interested in vitess and V replication is the technology that",
    "start": "902320",
    "end": "909480"
  },
  {
    "text": "allows you to take that single Standalone myql instance import that into vest and in the process Shard that",
    "start": "909480",
    "end": "916160"
  },
  {
    "text": "data set as well and we'll actually in the demo we're going to do the two types of sharding that people would typically",
    "start": "916160",
    "end": "921600"
  },
  {
    "text": "do at the same time so one is vertical or functional sharding so where you say okay we've got this subset of tables",
    "start": "921600",
    "end": "927800"
  },
  {
    "text": "which are all related to each other but they're not tightly related to the rest of our tables so",
    "start": "927800",
    "end": "933279"
  },
  {
    "text": "they may be product all related to your products or related to orders whatever it is so you can split those out and put",
    "start": "933279",
    "end": "940519"
  },
  {
    "text": "them in a different database and then even that gets you a little bit of the way and then eventually you realize we",
    "start": "940519",
    "end": "946920"
  },
  {
    "text": "still need to horizontally split these tables um and so we're going to do both of those so where you take a half of",
    "start": "946920",
    "end": "953600"
  },
  {
    "text": "your table or a fourth of your table and that's housed in one MySQL server uh the other other Quarters on another and so",
    "start": "953600",
    "end": "959959"
  },
  {
    "text": "on so we're going to look at what how that actually works um in just a second",
    "start": "959959",
    "end": "965440"
  },
  {
    "text": "now V replication is a a framework that supports many different kinds of data flows so we're going to be looking at",
    "start": "965440",
    "end": "971399"
  },
  {
    "text": "migrating into the test there's a move tables command which supports that but",
    "start": "971399",
    "end": "976759"
  },
  {
    "text": "there are other commands as well so once you get into the test and you're there let's say you start with just two shards",
    "start": "976759",
    "end": "982759"
  },
  {
    "text": "and you realize okay sometime in the next year we're actually going to need to split again and go to four shards or",
    "start": "982759",
    "end": "987959"
  },
  {
    "text": "it could be eight shards 16 whatever it is so there's a rehard command which",
    "start": "987959",
    "end": "993040"
  },
  {
    "text": "allows you to do that uh for online schema changes actually leverages vest",
    "start": "993040",
    "end": "998440"
  },
  {
    "text": "under the hood or sorry V replication under the hood to to execute those and there's then there's some additional",
    "start": "998440",
    "end": "1004040"
  },
  {
    "text": "things U vent streams is quite popular as well so I think as you as your",
    "start": "1004040",
    "end": "1009680"
  },
  {
    "text": "company grows you also have to integrate with other systems a data warehouse for example being a typical one and so V",
    "start": "1009680",
    "end": "1015720"
  },
  {
    "text": "replication provides an RPC which then allows you to basically stream you know",
    "start": "1015720",
    "end": "1020839"
  },
  {
    "text": "to copy all of your initial data if needed and then stream changes that are happening across your entire of a test",
    "start": "1020839",
    "end": "1027000"
  },
  {
    "text": "cluster into an external system so the deum connector uh for example is a",
    "start": "1027000",
    "end": "1032360"
  },
  {
    "text": "pretty pretty popular one there's a um deum for vest plug-in that's used by a",
    "start": "1032360",
    "end": "1038400"
  },
  {
    "text": "lot of the larger shops um there's some additional ones like messaging we won't talk much about",
    "start": "1038400",
    "end": "1044199"
  },
  {
    "text": "that but that's if you're using something like uh sidekick for example",
    "start": "1044199",
    "end": "1049840"
  },
  {
    "text": "if um which is reddis space job Q you can use the messaging feature in v test",
    "start": "1049840",
    "end": "1055360"
  },
  {
    "text": "to accomplish that same type of thing without having to spin up a whole you know whole other stack just for that",
    "start": "1055360",
    "end": "1060400"
  },
  {
    "text": "particular purpose okay and again if you have any",
    "start": "1060400",
    "end": "1065840"
  },
  {
    "text": "questions we're going to have time at the end and it can be about what either of us have talked about it can be about the demo that we'll see coming up but",
    "start": "1065840",
    "end": "1071919"
  },
  {
    "text": "that'll be immediately following but this just gives you kind of a visual representation of what the migration",
    "start": "1071919",
    "end": "1077200"
  },
  {
    "text": "will look like so so V replication includes various Primitives U you can see a couple of them here the r streamer",
    "start": "1077200",
    "end": "1083559"
  },
  {
    "text": "is what will handle the copy phase so conceptually you can kind of think of that as uh a MySQL dump uh to copy a",
    "start": "1083559",
    "end": "1091400"
  },
  {
    "text": "snapshot of all your data consistent with a particular GT snapshot and then the bin log streamer",
    "start": "1091400",
    "end": "1098159"
  },
  {
    "text": "is what you might guess from the name and that just allows you to replicate uh data and changes that happen after the",
    "start": "1098159",
    "end": "1104640"
  },
  {
    "text": "fact um which is essentially the same thing as my schol replica",
    "start": "1104640",
    "end": "1110320"
  },
  {
    "text": "so this is just a highle flow of what we're going to be doing so in this example the the Commerce database is",
    "start": "1112400",
    "end": "1119360"
  },
  {
    "text": "where all of our data is so that's what we started with when we first created our application we've gotten to the",
    "start": "1119360",
    "end": "1124720"
  },
  {
    "text": "point now where we we can't manage everything with that single instance and so we're going to split off these",
    "start": "1124720",
    "end": "1131039"
  },
  {
    "text": "customer oriented tables so those the customer and c order tables are specifically related to",
    "start": "1131039",
    "end": "1137480"
  },
  {
    "text": "customers and we can Shard both of those tables by customer ID which is what we're actually doing so that those um so",
    "start": "1137480",
    "end": "1144240"
  },
  {
    "text": "a customer's records are always housed together um our customers orders rather are always housed together so you'll",
    "start": "1144240",
    "end": "1150200"
  },
  {
    "text": "have data locality as well because even though you can do cross Shard uh reads",
    "start": "1150200",
    "end": "1155640"
  },
  {
    "text": "of course there's a performance penalty in doing that as well so data locality that's one of the pretty important",
    "start": "1155640",
    "end": "1161080"
  },
  {
    "text": "things when it comes to Performance and we're going to have two shards you can see that here so I'm",
    "start": "1161080",
    "end": "1168440"
  },
  {
    "text": "going to largely refer to them as Shard one or Shard two but the reason it says Shard -80 and 80- is a six as deepy",
    "start": "1168440",
    "end": "1177120"
  },
  {
    "text": "mentioned there's a a concept of a keyspace which is The Logical database and each keyspace has a 64-bit key range",
    "start": "1177120",
    "end": "1185520"
  },
  {
    "text": "and then each record gets a key key space ID which is what determines which Shard it lives on um so that's",
    "start": "1185520",
    "end": "1194679"
  },
  {
    "text": "represented normally with hex digits so it'll be 16 digits on either side of the dash so the shorthand notation for that",
    "start": "1194679",
    "end": "1201880"
  },
  {
    "text": "-80 is uh 16 zeros and actually -7 and then 15 FS because it doesn't include",
    "start": "1201880",
    "end": "1208799"
  },
  {
    "text": "the upper number and then the next one is8 15 zeros to 16 FS so it's just",
    "start": "1208799",
    "end": "1215120"
  },
  {
    "text": "splitting that particular one in half and uh there's a link here if after",
    "start": "1215120",
    "end": "1221320"
  },
  {
    "text": "the fact you want to look at the the demo what it actually does how it works",
    "start": "1221320",
    "end": "1226480"
  },
  {
    "text": "and then at the end when we get into the Q&A we can also look at uh if you have",
    "start": "1226480",
    "end": "1232000"
  },
  {
    "text": "questions or you want to look at something we can actually peek in a little closer look at the BET test",
    "start": "1232000",
    "end": "1237480"
  },
  {
    "text": "cluster so what we've set up ahead of time just to save some time and I've",
    "start": "1237480",
    "end": "1242760"
  },
  {
    "text": "scripted this so just so that you don't have to watch me fat finger some commands and then have to hunt down where I made the typo and spend a lot of",
    "start": "1242760",
    "end": "1249400"
  },
  {
    "text": "the time on that but we SP started up of a test cluster has all those components that deeply already talked",
    "start": "1249400",
    "end": "1255320"
  },
  {
    "text": "about and we have our single Uncharted Commerce database so we have these three",
    "start": "1255320",
    "end": "1263280"
  },
  {
    "text": "mycol instances and that's the primary and the two replicas so again that's pretty typical of you if you're running",
    "start": "1263280",
    "end": "1270520"
  },
  {
    "text": "wherever you're running uh that's a pretty typical installation where you have a primary one or more replica so",
    "start": "1270520",
    "end": "1276159"
  },
  {
    "text": "you use the replica for uh High availability for additional durability for backups and many different",
    "start": "1276159",
    "end": "1283320"
  },
  {
    "text": "things so the only difference in your case as typically as in that previous",
    "start": "1283320",
    "end": "1288880"
  },
  {
    "text": "slide with an RDS instance is that initial uh Commerce database is not going to be part of the test so in that",
    "start": "1288880",
    "end": "1296279"
  },
  {
    "text": "case it would be an external you would start up an external VT tablet and that VT tablet then will interface with your",
    "start": "1296279",
    "end": "1303120"
  },
  {
    "text": "on Prem or whatever it is your RDS instance in that previous slide and that is what allows that instance to",
    "start": "1303120",
    "end": "1310000"
  },
  {
    "text": "effectively become a part of a test cluster allows you to then migrate uh your data from that external instance",
    "start": "1310000",
    "end": "1316640"
  },
  {
    "text": "into the test cluster so all we have now is that Uncharted key",
    "start": "1316640",
    "end": "1322039"
  },
  {
    "text": "space and we have our Corder customer and product tables and you can see the",
    "start": "1322039",
    "end": "1327159"
  },
  {
    "text": "the schema here uh they're using autoincrement columns which is pretty typical we'll see at the end that we",
    "start": "1327159",
    "end": "1334000"
  },
  {
    "text": "actually leverage of a test feature called sequences that allows us to continue to use the tables in the same",
    "start": "1334000",
    "end": "1340320"
  },
  {
    "text": "way it's charted so you can't use autoincrement anymore directly because then you could have duplicate IDs across",
    "start": "1340320",
    "end": "1346960"
  },
  {
    "text": "your shards so the test sequences allows you to get that same Behavior Uh once we",
    "start": "1346960",
    "end": "1352279"
  },
  {
    "text": "Shard the tables uh we just add a foreign key so",
    "start": "1352279",
    "end": "1357640"
  },
  {
    "text": "as D mentioned one of the big new features in V 18 is foreign key support and again what that really means is that",
    "start": "1357640",
    "end": "1363919"
  },
  {
    "text": "we've moved the management and implementation of that up into the VT gate layer so that's uh what gives you",
    "start": "1363919",
    "end": "1370760"
  },
  {
    "text": "that single logical view of your entire vest cluster and it allows your you as a",
    "start": "1370760",
    "end": "1376159"
  },
  {
    "text": "user but more importantly your applications to work with the test in now your sharded databases as if it was",
    "start": "1376159",
    "end": "1382520"
  },
  {
    "text": "still just a single my skill D instance then we try to add a just to demonstrate it actually working we add",
    "start": "1382520",
    "end": "1389559"
  },
  {
    "text": "an orphan record into the c order table so there's no customer for that ID and",
    "start": "1389559",
    "end": "1395120"
  },
  {
    "text": "then we get the expected forign key constraint failure and just to show what data we",
    "start": "1395120",
    "end": "1400880"
  },
  {
    "text": "currently have in these tables there's not a lot we've got a few customers each customer has one order and there's just",
    "start": "1400880",
    "end": "1407640"
  },
  {
    "text": "a couple of products and now we're going to spend up",
    "start": "1407640",
    "end": "1412720"
  },
  {
    "text": "a second key key space so this is the customer key space and it's going to be starting up BT tablets and mysqld DS so",
    "start": "1412720",
    "end": "1421880"
  },
  {
    "text": "now we've got two shards so in total there's actually going to be six my D processes because we've got one primary",
    "start": "1421880",
    "end": "1428919"
  },
  {
    "text": "and two replicas for each Shard so that's that's what you see starting up",
    "start": "1428919",
    "end": "1434000"
  },
  {
    "text": "here and you'll notice that they each have a unique identifier so the cell",
    "start": "1434000",
    "end": "1440400"
  },
  {
    "text": "which is kind of The Logical Concept in test which kind of maps to an availability zone or more generally a",
    "start": "1440400",
    "end": "1446080"
  },
  {
    "text": "failure domain and then they'll have an unique identifier within that particular",
    "start": "1446080",
    "end": "1451600"
  },
  {
    "text": "uh cell and that'll come into play Because when we start looking at the data and where it actually lives and",
    "start": "1451600",
    "end": "1458120"
  },
  {
    "text": "kind of demonstrating that everything is replicating as we expect across these uh key spaces we can connect directly to",
    "start": "1458120",
    "end": "1465000"
  },
  {
    "text": "the my D instances using the the socket that each of those have so now we can",
    "start": "1465000",
    "end": "1471360"
  },
  {
    "text": "see here we're talking to the VT gate so we've connected to the VT gate process and if you're using the my schill",
    "start": "1471360",
    "end": "1477440"
  },
  {
    "text": "command line client or any other tool whether it be like PHP my admin or my schill workbench whatever it is you can",
    "start": "1477440",
    "end": "1483799"
  },
  {
    "text": "connect directly to the VT gate just like if it was a myc d instance and you can see now we've got our two databases",
    "start": "1483799",
    "end": "1491240"
  },
  {
    "text": "those are our two um key spaces and then you have the other typical ones that you",
    "start": "1491240",
    "end": "1496360"
  },
  {
    "text": "would see when you're talking to a myo D instance information schema and so on so it looks just like we have this cluster",
    "start": "1496360",
    "end": "1502399"
  },
  {
    "text": "that's now spread across nine different my skill D instances as init test but as far as the application is concerned it",
    "start": "1502399",
    "end": "1509440"
  },
  {
    "text": "looks the same as it always did looks like they're connecting to that single my D",
    "start": "1509440",
    "end": "1514520"
  },
  {
    "text": "instance and they're able to query both of them just as they normally would here",
    "start": "1514520",
    "end": "1520760"
  },
  {
    "text": "you can see what the what that looks like uh in the in the cluster and again you can see the IDS",
    "start": "1520760",
    "end": "1526880"
  },
  {
    "text": "here those will come up shortly so 301 is the primary for The -80 Shard and 400",
    "start": "1526880",
    "end": "1533880"
  },
  {
    "text": "is for The 80- Shard so then we're going to actually run a v replication command",
    "start": "1533880",
    "end": "1539240"
  },
  {
    "text": "so this is move tables and this is what's going to migrate our data so it's going to migrate it from from the",
    "start": "1539240",
    "end": "1547200"
  },
  {
    "text": "Commerce keyspace to the customer keyspace for these two tables and it starts up and it goes into the copying",
    "start": "1547200",
    "end": "1554799"
  },
  {
    "text": "state so that's where it's going to initially start copying all of the data in bulk and then once it once that",
    "start": "1554799",
    "end": "1561000"
  },
  {
    "text": "completes we don't we have very little data so it was immediate basically then it goes into the replicating a running",
    "start": "1561000",
    "end": "1567320"
  },
  {
    "text": "phase and at that point it's just going to be replicating changes right so the entire migration could take weeks or",
    "start": "1567320",
    "end": "1573399"
  },
  {
    "text": "even months now it could take if you have you know a terabyte of data it could take a couple days to do the",
    "start": "1573399",
    "end": "1578640"
  },
  {
    "text": "initial data copy and then you may be running where you replicating changes for some time as you plan uh the final",
    "start": "1578640",
    "end": "1585320"
  },
  {
    "text": "migration with your application teams and so on so then we're replicating",
    "start": "1585320",
    "end": "1591440"
  },
  {
    "text": "changes and now the next thing you would typically do is there's another V application related command called",
    "start": "1591760",
    "end": "1597399"
  },
  {
    "text": "V which allows you to then so now we've we've cop this terabyt worth of data we",
    "start": "1597399",
    "end": "1602679"
  },
  {
    "text": "want to be sure before we make any changes uh so the application is actually talking to the vest database",
    "start": "1602679",
    "end": "1608600"
  },
  {
    "text": "that it has all of the data that we expect so V is a very handy tool to just give you that confidence so it'll tell",
    "start": "1608600",
    "end": "1615440"
  },
  {
    "text": "you you know whether there was any mismatch overall and if so uh what what the mismatches",
    "start": "1615440",
    "end": "1621399"
  },
  {
    "text": "were if there was an extra row on the source or if there was a difference between the record somehow on either side then you would see that",
    "start": "1621399",
    "end": "1628679"
  },
  {
    "text": "there um there's safety mechanisms put in place this is just the routing rules just to demonstrate that quickly but the",
    "start": "1628679",
    "end": "1635039"
  },
  {
    "text": "basic idea is that now remember these tables live on two different databases and this will ensure that you",
    "start": "1635039",
    "end": "1642360"
  },
  {
    "text": "can't accidentally now query the wrong one U so however even if you explicitly try to query either of those two tables",
    "start": "1642360",
    "end": "1650679"
  },
  {
    "text": "on the customer database it will get routed in BT gate to the Commerce site",
    "start": "1650679",
    "end": "1656279"
  },
  {
    "text": "because that's where all of our traffic is still gone we haven't switched anything we haven't actually made any",
    "start": "1656279",
    "end": "1662080"
  },
  {
    "text": "application um affecting changes now we're going to",
    "start": "1662080",
    "end": "1667159"
  },
  {
    "text": "insert uh a new customer in a new order so we did this in VT gate so this went",
    "start": "1667159",
    "end": "1672679"
  },
  {
    "text": "to the Commerce database and now if we look at the customer database this is where we're",
    "start": "1672679",
    "end": "1678960"
  },
  {
    "text": "connecting directly to the myc instance remember 301 was the primary for our -80 Shard and 400 for the 80 80- Shard and",
    "start": "1678960",
    "end": "1688080"
  },
  {
    "text": "here uh we can see our new records were replicated as expected from the Commerce",
    "start": "1688080",
    "end": "1694360"
  },
  {
    "text": "database over to the customer database and you can see it's pretty uneven right now between the shards most of it is on",
    "start": "1694360",
    "end": "1699559"
  },
  {
    "text": "The -80 Shard and that can happen of course when you have a small data set but as you uh as your data set size",
    "start": "1699559",
    "end": "1705320"
  },
  {
    "text": "grows it'll be pretty evenly split I won't get into necessarily how that works but there's a vindex concept U but",
    "start": "1705320",
    "end": "1712640"
  },
  {
    "text": "by default we would typically you would use XX hash as kind of a mechanism to generate that keyspace ID uh from your",
    "start": "1712640",
    "end": "1719240"
  },
  {
    "text": "primary sharding columns so we're using customer ID for these tables okay so now we've confirmed",
    "start": "1719240",
    "end": "1725720"
  },
  {
    "text": "everything is working we're going to run you'd run V again typically because you can be in this state for a long period",
    "start": "1725720",
    "end": "1732120"
  },
  {
    "text": "of time as you're building confidence as you're getting things in place and so you'll you you might run the vde",
    "start": "1732120",
    "end": "1738320"
  },
  {
    "text": "immediately after the copy phase ends but then as you get to the point where you think you're ready to actually",
    "start": "1738320",
    "end": "1743679"
  },
  {
    "text": "switch traffic move your applications over you can run it again just to make sure that everything is correct and",
    "start": "1743679",
    "end": "1749399"
  },
  {
    "text": "there's no data mismatches and then you can use the switch traffic command and what that does as you might",
    "start": "1749399",
    "end": "1756320"
  },
  {
    "text": "expect is now it basically flips it so now anytime you're reading from the c",
    "start": "1756320",
    "end": "1761760"
  },
  {
    "text": "order or customer table no matter how you're doing it it's actually going to get routed to the customer database",
    "start": "1761760",
    "end": "1769000"
  },
  {
    "text": "now and you can see that reflected here basically all the traffic has been switched and this is the routing rules",
    "start": "1769000",
    "end": "1775000"
  },
  {
    "text": "again just to show you that now that's flipped even if you explicitly say connect and say select star from",
    "start": "1775000",
    "end": "1781799"
  },
  {
    "text": "commerce. customer it's actually going to get routed to the customer uh",
    "start": "1781799",
    "end": "1787320"
  },
  {
    "text": "database and just to demonstrate that replication now we'll just do a delete so by default V application will set up",
    "start": "1787320",
    "end": "1794279"
  },
  {
    "text": "um replication going back in the other direction um you can opt out of that but",
    "start": "1794279",
    "end": "1799360"
  },
  {
    "text": "but typically you would want that because you want the ability to to revert so let's say you switch traffic",
    "start": "1799360",
    "end": "1804679"
  },
  {
    "text": "and suddenly application starts getting errors you want to be able to cut uh the traffic back over and basically revert",
    "start": "1804679",
    "end": "1811360"
  },
  {
    "text": "that uh so that things continue to work while you can then investigate what what that issue may have",
    "start": "1811360",
    "end": "1817080"
  },
  {
    "text": "been so just to uh demonstrate that that's uh replicating back the other way",
    "start": "1817080",
    "end": "1822159"
  },
  {
    "text": "we delete the customer and now we're connecting directly to the customer",
    "start": "1822159",
    "end": "1827760"
  },
  {
    "text": "the primary for the customer Shard it's Uncharted It's Just A Single Shard and we can see that now that new customer",
    "start": "1827760",
    "end": "1834200"
  },
  {
    "text": "and its record is gone so that's a combination of um the replication and the foreign key that we",
    "start": "1834200",
    "end": "1841360"
  },
  {
    "text": "added so this is where that setting up automatically setting up that reverse",
    "start": "1842039",
    "end": "1847159"
  },
  {
    "text": "replication flow comes in handy again you may realize okay now we've moved uh",
    "start": "1847159",
    "end": "1852480"
  },
  {
    "text": "everything over to vitess but now there's some slight difference in Behavior there's not a 100% compatibility uh yet with my school 8",
    "start": "1852480",
    "end": "1860519"
  },
  {
    "text": "and all of the query related features that it has all the syntax so let's say maybe you realize the something is",
    "start": "1860519",
    "end": "1865600"
  },
  {
    "text": "producing a little bit um results that are slightly different the output is a little different or maybe you didn't",
    "start": "1865600",
    "end": "1871320"
  },
  {
    "text": "realize that the test doesn't support recursive CTE for example is a big one that we're that we're working on now um",
    "start": "1871320",
    "end": "1877799"
  },
  {
    "text": "so then you can reverse the traffic back leave things running you're back to the starting point where you were",
    "start": "1877799",
    "end": "1884120"
  },
  {
    "text": "before um and you can take however long as needed in order to address that particular situation on the application",
    "start": "1884120",
    "end": "1890519"
  },
  {
    "text": "side or whatever it may be and then once you've done that then you can",
    "start": "1890519",
    "end": "1896000"
  },
  {
    "text": "switch traffic again and you can switch back and forth as many times as you need until finally everything is good",
    "start": "1896000",
    "end": "1903480"
  },
  {
    "text": "and then you can complete so these are all uh sub commands for the move tables and you can see the the client binary",
    "start": "1903480",
    "end": "1909039"
  },
  {
    "text": "here and then when you complete it's going to clean everything up so the tables by default on the original",
    "start": "1909039",
    "end": "1914919"
  },
  {
    "text": "Commerce database will be cleaned up along with all of the artifacts from our actual migration so the the workflow",
    "start": "1914919",
    "end": "1921000"
  },
  {
    "text": "itself those um the routing rules that we looked at before all that stuff will be cleaned up",
    "start": "1921000",
    "end": "1927840"
  },
  {
    "text": "and here you can see remember I mentioned the SE vest sequence feature that's what in the demo we added those as well so that's what allows us to",
    "start": "1927840",
    "end": "1934880"
  },
  {
    "text": "remember we were using autoincrement columns which is typical on those tables so you can continue to have that same",
    "start": "1934880",
    "end": "1939919"
  },
  {
    "text": "behavior even though now the table is sharted so VT gate will basically take over the management of those effectively",
    "start": "1939919",
    "end": "1947679"
  },
  {
    "text": "Auto auto incrementing values this just shows the",
    "start": "1947679",
    "end": "1954440"
  },
  {
    "text": "cleanup and that's it um we've got let's switch back to the slides Okay so we've",
    "start": "1954440",
    "end": "1960440"
  },
  {
    "text": "got not quite five minutes but we've got two and a half minutes for slides or for for questions and hopefully answers um",
    "start": "1960440",
    "end": "1968000"
  },
  {
    "text": "and it can be about the demo it can be about the slides if anybody has any",
    "start": "1968000",
    "end": "1973559"
  },
  {
    "text": "questions remember the demo also and the slides which are are already up on onet.com has a link to the demo as well",
    "start": "1973559",
    "end": "1982039"
  },
  {
    "text": "which is just a scripted out ver version of what you would normally run or what you would typically run just as an",
    "start": "1982039",
    "end": "1988559"
  },
  {
    "text": "operator but just saved us some time on one of the on one of the slides",
    "start": "1988559",
    "end": "1995519"
  },
  {
    "text": "it looked like it said CDC I'm assuming you mean change data capture is that correct yeah",
    "start": "1995519",
    "end": "2001279"
  },
  {
    "text": "sorry there's so many acronyms and initialisms my question is that in some",
    "start": "2001279",
    "end": "2007200"
  },
  {
    "text": "environments say if we we have a pipeline that's reading and consuming that and the pipeline itself goes down",
    "start": "2007200",
    "end": "2013279"
  },
  {
    "text": "then you're at risk of you know using your database storage if what is the",
    "start": "2013279",
    "end": "2018519"
  },
  {
    "text": "solution for that do you have to just move the CDC data out of the database itself into some other you know S3",
    "start": "2018519",
    "end": "2025120"
  },
  {
    "text": "buckets or how do you deal with that type so that's that's pretty a pretty common issue so we we handle that",
    "start": "2025120",
    "end": "2032720"
  },
  {
    "text": "through resuming effectively so that was one of the things that I mentioned on",
    "start": "2032720",
    "end": "2038080"
  },
  {
    "text": "the V replication slide so remember VT gate is the component that gives you this single you know this single logical",
    "start": "2038080",
    "end": "2045000"
  },
  {
    "text": "view of your entire data set spread across however many myo instances and",
    "start": "2045000",
    "end": "2050520"
  },
  {
    "text": "shards uh so there's a an RPC that VT gate has which leverages View application which allows you to say you",
    "start": "2050520",
    "end": "2056919"
  },
  {
    "text": "say I want all of the changes well let's say from the beginning you just say I want everything from the beginning for",
    "start": "2056919",
    "end": "2063040"
  },
  {
    "text": "these tables so it'll give you a snapshot effectively of all those tables and their state and then start",
    "start": "2063040",
    "end": "2068839"
  },
  {
    "text": "replicating but each event that gets replicated in that CDC stream also has metadata like the GTI which effectively",
    "start": "2068839",
    "end": "2076118"
  },
  {
    "text": "gives you a position in that stream as well so if your consumer goes down for any period of time you can resume uh",
    "start": "2076119",
    "end": "2083520"
  },
  {
    "text": "from where you left off using that metadata that was in the event stream we are actually out of time so",
    "start": "2083520",
    "end": "2091760"
  },
  {
    "text": "there are some resources that you can uh join okay we have one minute",
    "start": "2091760",
    "end": "2097400"
  },
  {
    "text": "so we have the website link the docs tutorials you can go to the source code",
    "start": "2097400",
    "end": "2102920"
  },
  {
    "text": "on GitHub please do join our slack workspace if you're interested in being a part of the community with us.",
    "start": "2102920",
    "end": "2109480"
  },
  {
    "text": "slack.com should be easy to remember and you can scan this QR code to provide",
    "start": "2109480",
    "end": "2115599"
  },
  {
    "text": "feedback on our session thank you very much for attending and we'll be right here to take more questions if there are",
    "start": "2115599",
    "end": "2123440"
  },
  {
    "text": "any all thank you [Applause]",
    "start": "2123440",
    "end": "2130619"
  }
]