[
  {
    "text": "yeah uh hi everyone thank you for coming uh for this grpc open Telemetry talk uh",
    "start": "1000",
    "end": "9599"
  },
  {
    "text": "I'm pesh dikit I work at Google in the grpc team and I'm the maintainer in grpc",
    "start": "9599",
    "end": "18240"
  },
  {
    "text": "go hi everyone I'm S I also work at Google in the grpc",
    "start": "18240",
    "end": "25039"
  },
  {
    "text": "team uh yeah so today we are going to talk through the gpc's open Telemetry",
    "start": "25279",
    "end": "30640"
  },
  {
    "text": "plug-in that we have recently created and how to achieve distributed tracing",
    "start": "30640",
    "end": "36760"
  },
  {
    "text": "with it so what why do we want observability",
    "start": "36760",
    "end": "42520"
  },
  {
    "text": "well so assume you got some Services deployed in a distributed system and",
    "start": "42520",
    "end": "48680"
  },
  {
    "text": "these Services talk to each other on various user actions or just to achieve",
    "start": "48680",
    "end": "54399"
  },
  {
    "text": "some task so there are often certain questions uh uh we end up asking",
    "start": "54399",
    "end": "61160"
  },
  {
    "text": "ourselves when we are debugging a service uh is the overall system",
    "start": "61160",
    "end": "66520"
  },
  {
    "text": "behaving as expected uh is there something wrong going on if there's something wrong",
    "start": "66520",
    "end": "74080"
  },
  {
    "text": "where do I look at to figure out what is wrong going",
    "start": "74080",
    "end": "78798"
  },
  {
    "text": "on another common scenario is to debug the overall system performance and",
    "start": "80119",
    "end": "86159"
  },
  {
    "text": "figure out where the bottlenecks are so why is something going slow or",
    "start": "86159",
    "end": "93040"
  },
  {
    "text": "whatever okay great so let's say we have set up uh the metrics and we have gotten",
    "start": "93040",
    "end": "100680"
  },
  {
    "text": "a dashboard uh for ourselves to look at but we cannot expect a human to continuously be looking at these",
    "start": "100680",
    "end": "107240"
  },
  {
    "text": "dashboards right so if something goes wrong we want to be notified and so we",
    "start": "107240",
    "end": "113119"
  },
  {
    "text": "set up the alerts as well uh this is a brief intro on or a",
    "start": "113119",
    "end": "121799"
  },
  {
    "text": "very very brief intro on the grpc observability like if you're if you're a grpc if you have grpc application this",
    "start": "121799",
    "end": "128360"
  },
  {
    "text": "this is something uh you will get out of the grp uh out of the box from the grpc",
    "start": "128360",
    "end": "135319"
  },
  {
    "text": "libraries uh so let's say you you have an app developer uh the character the",
    "start": "135319",
    "end": "143319"
  },
  {
    "text": "left in green maybe it's sorup and he's building a grpc",
    "start": "143319",
    "end": "150640"
  },
  {
    "text": "application using the latest grpc artifact supporting observability uh the running apps are",
    "start": "150640",
    "end": "157480"
  },
  {
    "text": "provided with appropriate uh observability configuration by the",
    "start": "157480",
    "end": "162800"
  },
  {
    "text": "developer uh the grpc interceptors so interceptors basically sits right next",
    "start": "162800",
    "end": "168800"
  },
  {
    "text": "to your application uh code and all the rpcs going in and out kind of gets uh",
    "start": "168800",
    "end": "176000"
  },
  {
    "text": "goes through them uh so they they intercept those rpcs pump the",
    "start": "176000",
    "end": "182599"
  },
  {
    "text": "relevant raw data like logs metrics and Trace information and through various uh",
    "start": "182599",
    "end": "189799"
  },
  {
    "text": "exporters uh they will be put into the respective backends uh so here you see a logging",
    "start": "189799",
    "end": "197159"
  },
  {
    "text": "backend a metric backend and a traces back end uh the backends basically",
    "start": "197159",
    "end": "203560"
  },
  {
    "text": "produce uh the required dashboards which are used by the consumer uh in this case",
    "start": "203560",
    "end": "210360"
  },
  {
    "text": "the devops engineer to get visibility into the internal state of",
    "start": "210360",
    "end": "215439"
  },
  {
    "text": "application uh focusing on grpc",
    "start": "215439",
    "end": "220319"
  },
  {
    "text": "traffic now uh I'll invite sorab to talk a little bit about open",
    "start": "220680",
    "end": "227400"
  },
  {
    "text": "telemetric uh thanks punes so at a very basic T open t is a",
    "start": "228080",
    "end": "234319"
  },
  {
    "text": "open-source cncf incubated observability framework which lets you create and",
    "start": "234319",
    "end": "239920"
  },
  {
    "text": "manage your Telemetry data so it allows you to do metrix",
    "start": "239920",
    "end": "246519"
  },
  {
    "text": "tracing logging and this is one of the sample of stes from one of the",
    "start": "246519",
    "end": "254920"
  },
  {
    "text": "service so open tetri solves a very key problem in uh tracing which is vendor",
    "start": "257120",
    "end": "263520"
  },
  {
    "text": "lockin so irrespective of whether you want to export your matrices from Google",
    "start": "263520",
    "end": "269400"
  },
  {
    "text": "or AWS or data dog or you have your own custom solution you can do that using",
    "start": "269400",
    "end": "275520"
  },
  {
    "text": "open Elementary so how does open delary solve",
    "start": "275520",
    "end": "283360"
  },
  {
    "text": "this problem of vendor lockin so basically they provide standard set of",
    "start": "283360",
    "end": "288680"
  },
  {
    "text": "APK uh sdks apis and data formats for collecting and exporting your Telemetry",
    "start": "288680",
    "end": "294639"
  },
  {
    "text": "data and once uh you you have the standard format then you can change your",
    "start": "294639",
    "end": "300440"
  },
  {
    "text": "configuration just to to match which back end you want to export the data to",
    "start": "300440",
    "end": "307880"
  },
  {
    "text": "so imagine you are using a uh proprietary monitoring tool if you decide to switch to a different vendor",
    "start": "307880",
    "end": "314240"
  },
  {
    "text": "then you will have to basically switch to that vendor's APK that vendor's agent",
    "start": "314240",
    "end": "319720"
  },
  {
    "text": "and you will have to make a lot of changes to your code but if you're using open elry then you don't need to make",
    "start": "319720",
    "end": "326039"
  },
  {
    "text": "any changes to your application code what you can do is you you can directly just change the configuration for where",
    "start": "326039",
    "end": "332880"
  },
  {
    "text": "your data uh Telemetry data needs to go so just the configuration for back end needs to be change and then you're good",
    "start": "332880",
    "end": "338840"
  },
  {
    "text": "to go yeah so open dmetry is a industry",
    "start": "338840",
    "end": "344919"
  },
  {
    "text": "standard basically supports uh uh all popular Solutions are supporting open",
    "start": "344919",
    "end": "350440"
  },
  {
    "text": "dmetry and this is the direction in which things are moving so Yer is there",
    "start": "350440",
    "end": "355720"
  },
  {
    "text": "like Gana everyone is there so so all major languages are also",
    "start": "355720",
    "end": "362800"
  },
  {
    "text": "supported uh yeah you you'll see your favorite language",
    "start": "362800",
    "end": "368400"
  },
  {
    "text": "there so we have created a few code Labs uh for like having some quick practical",
    "start": "368400",
    "end": "374319"
  },
  {
    "text": "experience so highly recommend to go ahead and uh follow these code Labs yeah",
    "start": "374319",
    "end": "379800"
  },
  {
    "text": "wait yeah",
    "start": "379800",
    "end": "383240"
  },
  {
    "text": "okay yeah",
    "start": "384880",
    "end": "388880"
  },
  {
    "text": "okay so understanding the life cycle of a request so tra is what helps us to",
    "start": "390400",
    "end": "396919"
  },
  {
    "text": "understand the life cycle of your request within your application so we have tracing which gives a lot of",
    "start": "396919",
    "end": "403880"
  },
  {
    "text": "information what happened when your request went through your application which was like basically a lot of",
    "start": "403880",
    "end": "409800"
  },
  {
    "text": "microservices and uh what happened to that request that is all that information is within a trace so that's",
    "start": "409800",
    "end": "417319"
  },
  {
    "text": "the first part of tracing then uh obviously when you are uh develop",
    "start": "417319",
    "end": "423639"
  },
  {
    "text": "when you are in Dev environment or string environment you can basically Trace all your request but as you will",
    "start": "423639",
    "end": "429319"
  },
  {
    "text": "go move to the production environment you don't want to trace all your request because tracing can be expensive you",
    "start": "429319",
    "end": "436240"
  },
  {
    "text": "basically if you trace every single request it will be expensive on uh like",
    "start": "436240",
    "end": "442360"
  },
  {
    "text": "in on your CPU as well as the data you'll collect so what you do is you sample request one in a th000 or 1 in",
    "start": "442360",
    "end": "448960"
  },
  {
    "text": "10,000 request you sample and then just Trace those and that also will give you",
    "start": "448960",
    "end": "455319"
  },
  {
    "text": "the same amount of information uh to debug your service or see what is",
    "start": "455319",
    "end": "460440"
  },
  {
    "text": "happening in your service uh with a lot less uh kind of expense uh like spending",
    "start": "460440",
    "end": "467960"
  },
  {
    "text": "Less on the resources okay so let's dive into",
    "start": "467960",
    "end": "476840"
  },
  {
    "text": "exactly how the tracing part works so at the heart of",
    "start": "476840",
    "end": "482240"
  },
  {
    "text": "Trace is basically a single request uh going through the application its",
    "start": "482240",
    "end": "487960"
  },
  {
    "text": "journey is tracked by a by a trace and then Trace is further divided into",
    "start": "487960",
    "end": "493840"
  },
  {
    "text": "smaller spans and each span is like a small distinct unit of work it could be",
    "start": "493840",
    "end": "500960"
  },
  {
    "text": "a database query it could be a API request or it could be some other CPU intensive application you're doing and",
    "start": "500960",
    "end": "507440"
  },
  {
    "text": "each of these spans can be individually Rag and then you can figure out exactly what is going wrong or where you have a",
    "start": "507440",
    "end": "514120"
  },
  {
    "text": "performance bottleneck so by piecing together all these spans we have a",
    "start": "514120",
    "end": "519320"
  },
  {
    "text": "comprehensive understanding of what exactly happened in the complete life cycle of the",
    "start": "519320",
    "end": "525959"
  },
  {
    "text": "request yeah so distributed tracing also provides a like very strong",
    "start": "531440",
    "end": "537240"
  },
  {
    "text": "visualization for each of the request so you see like the timeline for the",
    "start": "537240",
    "end": "543560"
  },
  {
    "text": "request and it going through multiple uh micro services within your distributive",
    "start": "543560",
    "end": "549519"
  },
  {
    "text": "system uh it looks like something like this in your timeline I'll",
    "start": "549519",
    "end": "555440"
  },
  {
    "text": "go yeah it looks like this so here you will observe that uh",
    "start": "555440",
    "end": "561519"
  },
  {
    "text": "it's a it's a dummy hipster shop ecosystem service which we created and",
    "start": "561519",
    "end": "567200"
  },
  {
    "text": "uh you can notice that a single request flow uh goes through multiple services like currency conver service product catalog",
    "start": "567200",
    "end": "574360"
  },
  {
    "text": "service get card service and",
    "start": "574360",
    "end": "580120"
  },
  {
    "text": "uh how they are dependent on each",
    "start": "580120",
    "end": "584360"
  },
  {
    "text": "other and if we go like if we drill deep into this timeline we will see that the",
    "start": "585959",
    "end": "592200"
  },
  {
    "text": "get card service is the one which is taking the most amount of time and uh so",
    "start": "592200",
    "end": "598279"
  },
  {
    "text": "now we can focus on this and uh maybe uh working on this will improve the",
    "start": "598279",
    "end": "603959"
  },
  {
    "text": "performance of our overall service the",
    "start": "603959",
    "end": "608079"
  },
  {
    "text": "most yeah so now i' like to invite back punish",
    "start": "610760",
    "end": "616680"
  },
  {
    "text": "for uh thank you s uh so we'll dig a bit little bit deep",
    "start": "620200",
    "end": "626920"
  },
  {
    "text": "into uh what the grpc open Telemetry plug-in uh provides you uh if you are",
    "start": "626920",
    "end": "634240"
  },
  {
    "text": "using that to instrument your grpc applications uh so first we'll talk",
    "start": "634240",
    "end": "639800"
  },
  {
    "text": "about the client so when you instrument your grpc client with open Telemetry",
    "start": "639800",
    "end": "644839"
  },
  {
    "text": "tracing uh you get deep visibility into your service communication because you",
    "start": "644839",
    "end": "651160"
  },
  {
    "text": "are talking to multiple services so that's where the grpc kind of comes in",
    "start": "651160",
    "end": "656519"
  },
  {
    "text": "uh and it automatically uh generates two types of spans for you uh maybe people",
    "start": "656519",
    "end": "662880"
  },
  {
    "text": "who are already using open Telemetry would know about uh these spans uh so",
    "start": "662880",
    "end": "668639"
  },
  {
    "text": "there is one some one one is like call span uh that represent the overall grpc",
    "start": "668639",
    "end": "674600"
  },
  {
    "text": "call end to end and there are attempt spans which detail individual retry",
    "start": "674600",
    "end": "680639"
  },
  {
    "text": "attempts in case you have uh intermittent failures and uh the grpc is",
    "start": "680639",
    "end": "685920"
  },
  {
    "text": "ret trying uh to connect for you uh and these spans uh kind of capture Rich",
    "start": "685920",
    "end": "692399"
  },
  {
    "text": "information about the grpc interaction uh including timing status",
    "start": "692399",
    "end": "698279"
  },
  {
    "text": "and metadata uh crucially uh key context like Trace ID as as sorup showed the",
    "start": "698279",
    "end": "706600"
  },
  {
    "text": "trace ID which was the global key for all the communication that has happened",
    "start": "706600",
    "end": "711839"
  },
  {
    "text": "in the service life cycle uh sorry request life cycle uh is what gets",
    "start": "711839",
    "end": "717440"
  },
  {
    "text": "propagated uh throughout out uh wherever the till where the request is going",
    "start": "717440",
    "end": "723120"
  },
  {
    "text": "throughout the RPC life cycle and there are span IDs as well which are basically",
    "start": "723120",
    "end": "728680"
  },
  {
    "text": "from one service to its next caller where you propagate the span ID of that",
    "start": "728680",
    "end": "735000"
  },
  {
    "text": "particular span that made the call uh and that kind of enable you to trace",
    "start": "735000",
    "end": "741199"
  },
  {
    "text": "requests end to end and understand the complete flow within your distributed",
    "start": "741199",
    "end": "746800"
  },
  {
    "text": "application and that's how you see that hierarchical tree uh kind of structure",
    "start": "746800",
    "end": "752600"
  },
  {
    "text": "that sorab just showed you now first we have is call span uh",
    "start": "752600",
    "end": "760720"
  },
  {
    "text": "that represents as I said the overall grpc call regardless of the retries uh and it contains high level uh",
    "start": "760720",
    "end": "769360"
  },
  {
    "text": "information from call start to call end for example uh if there was a resolu if",
    "start": "769360",
    "end": "776920"
  },
  {
    "text": "there was a delay in name resolution then what was the RPC status whether it failed or it succeeded and this is uh as",
    "start": "776920",
    "end": "785399"
  },
  {
    "text": "I said this uh part gets propagated to the next Service uh and this is crucial",
    "start": "785399",
    "end": "794000"
  },
  {
    "text": "for distributed tracing because that is how you connect the dots from one service to",
    "start": "794000",
    "end": "800480"
  },
  {
    "text": "another uh so suppose you see a delayed name resolution complete event uh when",
    "start": "801440",
    "end": "808440"
  },
  {
    "text": "you have instrument your grpc application you see that event kind of coming in their logs and it let's say it",
    "start": "808440",
    "end": "814680"
  },
  {
    "text": "took like 5 Seconds to resolve the target host what would you do uh so your",
    "start": "814680",
    "end": "821160"
  },
  {
    "text": "first thought would be like okay there is a delay and that could be you know caused by some Network issue or there",
    "start": "821160",
    "end": "826440"
  },
  {
    "text": "are some DNS problems or maybe this uh service service Discovery if I'm using a",
    "start": "826440",
    "end": "832720"
  },
  {
    "text": "service Discovery it might be just overloaded or something uh so you would look for like potential solution",
    "start": "832720",
    "end": "839600"
  },
  {
    "text": "including maybe optimizing your DNS lookups or using a more efficient",
    "start": "839600",
    "end": "844759"
  },
  {
    "text": "service Discovery mechanism or maybe implementing a caching uh",
    "start": "844759",
    "end": "850680"
  },
  {
    "text": "so having this information kind of make you focus on where the bottleneck lies",
    "start": "850680",
    "end": "857120"
  },
  {
    "text": "in uh then there is something called attempt span which I previously",
    "start": "857120",
    "end": "862560"
  },
  {
    "text": "mentioned that contains some more detailed information about what happened in that particular Service uh as part of",
    "start": "862560",
    "end": "872199"
  },
  {
    "text": "the grpc service communication so that this represent a single attempt that was",
    "start": "872199",
    "end": "878800"
  },
  {
    "text": "required to make the call and if there are retress you will see multiple spans",
    "start": "878800",
    "end": "884040"
  },
  {
    "text": "emitted uh and these will be nested within the call span so each attempt",
    "start": "884040",
    "end": "890399"
  },
  {
    "text": "span will be the child of the call span and if there are more retress then uh you will have multiple spans which are",
    "start": "890399",
    "end": "896480"
  },
  {
    "text": "child of which are children of the call span uh and these attempt events in grpc kind",
    "start": "896480",
    "end": "903839"
  },
  {
    "text": "of uh uh help users to pinpoint the root cause of failed calls so you you saw",
    "start": "903839",
    "end": "910600"
  },
  {
    "text": "there is a failed call but you want to know like what exactly uh uh failed or",
    "start": "910600",
    "end": "915920"
  },
  {
    "text": "what exactly made it slow so uh so providing this information",
    "start": "915920",
    "end": "921120"
  },
  {
    "text": "about ret attempt uh it could be like load balancing delays uh message sizes",
    "start": "921120",
    "end": "927800"
  },
  {
    "text": "compression uh so this allow you to Target optimization and troubleshooting",
    "start": "927800",
    "end": "933279"
  },
  {
    "text": "of your grpc applications and this information the attempt span doesn't get",
    "start": "933279",
    "end": "939120"
  },
  {
    "text": "propagated uh to the next service because attempt spans are internal to that particular client which is making",
    "start": "939120",
    "end": "945680"
  },
  {
    "text": "the call and don't directly relate to the server side",
    "start": "945680",
    "end": "951720"
  },
  {
    "text": "processing so let's say you saw something called delayed lb pick",
    "start": "951959",
    "end": "957519"
  },
  {
    "text": "complete so if are using grpc this is a very common uh event that happens in uh",
    "start": "957519",
    "end": "963639"
  },
  {
    "text": "grpc service communication uh and then you will see these how these span traces is helpful",
    "start": "963639",
    "end": "971399"
  },
  {
    "text": "because it is explicitly showing you if your load balancer decisions are slow",
    "start": "971399",
    "end": "977720"
  },
  {
    "text": "and and that is what causing your grpc application to have high latency uh or it could be that you know",
    "start": "977720",
    "end": "985839"
  },
  {
    "text": "the load balancer itself has some performance issues which are uh which",
    "start": "985839",
    "end": "991279"
  },
  {
    "text": "are not under your control so maybe load balancer is overloaded or there are network issues or maybe load balancer is",
    "start": "991279",
    "end": "998639"
  },
  {
    "text": "just misconfigured so if you're seeing this event that's where you have to look",
    "start": "998639",
    "end": "1004720"
  },
  {
    "text": "in similarly like you have uh RPC previous RPC attempts so as I was saying",
    "start": "1004720",
    "end": "1011199"
  },
  {
    "text": "if there are retries you want to see how many retries happened so anytime number of retries happens this will be captured",
    "start": "1011199",
    "end": "1018279"
  },
  {
    "text": "in this field and you will see it uh and these can help you identify the flakiness intermittent failures and",
    "start": "1018279",
    "end": "1025678"
  },
  {
    "text": "examining the sequence of messages that are sent and received across multiple",
    "start": "1025679",
    "end": "1031558"
  },
  {
    "text": "attempts and that kind of reveals the patterns in how the application and its",
    "start": "1031559",
    "end": "1036798"
  },
  {
    "text": "dependencies are handling the errors okay now if you move to the",
    "start": "1036799",
    "end": "1044760"
  },
  {
    "text": "server server view of the grpc open dmetry plugins so the key Point here is",
    "start": "1044760",
    "end": "1050600"
  },
  {
    "text": "there are no attempt span for Server because the server doesn't deal with retry so it only has a single server",
    "start": "1050600",
    "end": "1058320"
  },
  {
    "text": "span per grpc call it because it is just accepting the call uh and the context",
    "start": "1058320",
    "end": "1063960"
  },
  {
    "text": "propagation here is just one way as well so server receives the tracing context",
    "start": "1063960",
    "end": "1070120"
  },
  {
    "text": "from the client but doesn't need to send it back uh it will just send the response back that okay I got the",
    "start": "1070120",
    "end": "1076240"
  },
  {
    "text": "message but it doesn't have to again send the tracing context back to uh back to the client uh so this uh here we",
    "start": "1076240",
    "end": "1084880"
  },
  {
    "text": "basically show a server span captured by open Telemetry during a grpc call so as",
    "start": "1084880",
    "end": "1091440"
  },
  {
    "text": "you can see uh open Telemetry automatically instrument grpc and you",
    "start": "1091440",
    "end": "1098440"
  },
  {
    "text": "can see the message flow and the timing uh based on these",
    "start": "1098440",
    "end": "1104200"
  },
  {
    "text": "events so the outbound message sent for example mark",
    "start": "1104200",
    "end": "1109360"
  },
  {
    "text": "when the server sent a message to the client which is to respond okay I got the uh got the request uh and open",
    "start": "1109360",
    "end": "1117200"
  },
  {
    "text": "Telemetry captures useful attributes here like like basically the plug-in uh that sequence number message size and",
    "start": "1117200",
    "end": "1124440"
  },
  {
    "text": "whether it was compressed similarly the inbound message",
    "start": "1124440",
    "end": "1129720"
  },
  {
    "text": "received event indicates when the server received a message from the client uh with key attributes like size and",
    "start": "1129720",
    "end": "1136799"
  },
  {
    "text": "compression uh so these uh granular level of details helps us understand",
    "start": "1136799",
    "end": "1142039"
  },
  {
    "text": "message exchange patterns and identify potential uh bottleneck related to",
    "start": "1142039",
    "end": "1147440"
  },
  {
    "text": "message size or compression and pinpoint uh any errors that occur during the",
    "start": "1147440",
    "end": "1154919"
  },
  {
    "text": "communication uh yeah finally the stream closed event with its status and description tells us how the grpc call",
    "start": "1156320",
    "end": "1163919"
  },
  {
    "text": "concluded whether it was successful or encountered an an error and then if it",
    "start": "1163919",
    "end": "1169360"
  },
  {
    "text": "is if if there was an error you go back to the previous pans like outboard message send or inbo message received to",
    "start": "1169360",
    "end": "1176240"
  },
  {
    "text": "identify the pattern okay um",
    "start": "1176240",
    "end": "1183280"
  },
  {
    "text": "so this this slide is basically talk a little bit about how the uh open",
    "start": "1183280",
    "end": "1190520"
  },
  {
    "text": "Telemetry plugin in grpc is implemented uh",
    "start": "1190520",
    "end": "1195799"
  },
  {
    "text": "so as you can see the primary piece of inform information uh from the from the",
    "start": "1195799",
    "end": "1201440"
  },
  {
    "text": "grpc service point of view is the span contest and it is the open Telemetry span context so just going back where",
    "start": "1201440",
    "end": "1209679"
  },
  {
    "text": "Sor was mentioning that why grp why open tet is the service",
    "start": "1209679",
    "end": "1215679"
  },
  {
    "text": "standard and this is where the standardization happen this open Telemetry span context is a constant 29",
    "start": "1215679",
    "end": "1223039"
  },
  {
    "text": "bytes header uh which has a standard key called Trace p",
    "start": "1223039",
    "end": "1229640"
  },
  {
    "text": "and that key all the vendors understand all the exporters understand and all the",
    "start": "1229640",
    "end": "1234919"
  },
  {
    "text": "exporters know how to uh and uh know how to uh defer uh these this span context",
    "start": "1234919",
    "end": "1242919"
  },
  {
    "text": "29 bytes and where are the trace ID span ID and how to connect them so that that",
    "start": "1242919",
    "end": "1248240"
  },
  {
    "text": "is how it achieves uh uh portability uh so basically Trace ID is",
    "start": "1248240",
    "end": "1256280"
  },
  {
    "text": "just a unique identifier that uh use saw that link all the related spans across",
    "start": "1256280",
    "end": "1261880"
  },
  {
    "text": "Services then span ID is the ID of the current span uh this allows the next service to",
    "start": "1261880",
    "end": "1269240"
  },
  {
    "text": "create a new span that correctly parented to the incoming call span then there are some Flags uh which are some",
    "start": "1269240",
    "end": "1276279"
  },
  {
    "text": "key value pairs that can carry some additional context that maybe you want as a application user to",
    "start": "1276279",
    "end": "1285120"
  },
  {
    "text": "provide uh so basically when the use from the users point of view what you",
    "start": "1285600",
    "end": "1290640"
  },
  {
    "text": "all uh the only thing you have to do is when you create the grpc client you provide uh the tra text map propagator",
    "start": "1290640",
    "end": "1300039"
  },
  {
    "text": "uh which is basically an open Telemetry uh object uh that carries that allow you",
    "start": "1300039",
    "end": "1306600"
  },
  {
    "text": "to inject the span context and extract the span context and you do it at the time of creating the client so you",
    "start": "1306600",
    "end": "1312840"
  },
  {
    "text": "cannot do it at the run time and once you do that your grpc application is instrumented completely so that's the",
    "start": "1312840",
    "end": "1318840"
  },
  {
    "text": "only thing you provide uh now this is something uh",
    "start": "1318840",
    "end": "1324360"
  },
  {
    "text": "which is the implementation details of open dmetry plug-in so you can see like",
    "start": "1324360",
    "end": "1329559"
  },
  {
    "text": "uh the text map propagators once you have instrumented your code and your RPC is running uh the the open Telemetry",
    "start": "1329559",
    "end": "1337640"
  },
  {
    "text": "plug-in code kind of executes at the Interceptor level so from from the client's perspective when your",
    "start": "1337640",
    "end": "1343400"
  },
  {
    "text": "application logic has finished and your RPC is just about to go uh this plugin",
    "start": "1343400",
    "end": "1349080"
  },
  {
    "text": "will intercept that and it injects uh the open Telemetry span",
    "start": "1349080",
    "end": "1354679"
  },
  {
    "text": "context uh into into the header uh which is basically the metadata header uh and",
    "start": "1354679",
    "end": "1361880"
  },
  {
    "text": "there are two types of keys grpc deals with one is a grpc trace bin key maybe",
    "start": "1361880",
    "end": "1369080"
  },
  {
    "text": "people who are from who are using open senses might know about this because uh",
    "start": "1369080",
    "end": "1375559"
  },
  {
    "text": "this this key basically is like a by binary header uh that captures the",
    "start": "1375559",
    "end": "1380880"
  },
  {
    "text": "information in B in in actual bytes uh so this open Telemetry plug-in",
    "start": "1380880",
    "end": "1387520"
  },
  {
    "text": "that we have designed handles both grpc Trace bin binary header as well as uh",
    "start": "1387520",
    "end": "1393440"
  },
  {
    "text": "Trace parent that is w3c context header which is standardized by the open",
    "start": "1393440",
    "end": "1399559"
  },
  {
    "text": "dmetry uh so this text map propagator once injects uh injects",
    "start": "1399559",
    "end": "1406640"
  },
  {
    "text": "the the uh the the header in the JPC context uh and it uses a carrier object",
    "start": "1406640",
    "end": "1414760"
  },
  {
    "text": "which we will see later in this in this presentation that how it gets used and this carrier is doing nothing but",
    "start": "1414760",
    "end": "1421880"
  },
  {
    "text": "putting the data directly into the grpc metadata and it can be either a string",
    "start": "1421880",
    "end": "1427320"
  },
  {
    "text": "object based on what type of header it is if it's a text header it will uh it will just directly put it at the string",
    "start": "1427320",
    "end": "1433760"
  },
  {
    "text": "if it is and it there are some language specific uh implement M mentation",
    "start": "1433760",
    "end": "1439760"
  },
  {
    "text": "difference uh so if for for example in Java and go we basically base 64 encode",
    "start": "1439760",
    "end": "1445440"
  },
  {
    "text": "and base 64 decode the binary headers uh but in C++ we just directly store the",
    "start": "1445440",
    "end": "1451080"
  },
  {
    "text": "bytes uh and then once uh all this text",
    "start": "1451080",
    "end": "1456640"
  },
  {
    "text": "map propagator and the carrier work finishes this data is just put it into",
    "start": "1456640",
    "end": "1462320"
  },
  {
    "text": "the wire as one one header one of the header in the grpc metadata",
    "start": "1462320",
    "end": "1469278"
  },
  {
    "text": "then at the server side also uh at the start when you are creating your server",
    "start": "1470279",
    "end": "1476000"
  },
  {
    "text": "object you configure your server so basically you will just provide a server",
    "start": "1476000",
    "end": "1481799"
  },
  {
    "text": "option with the text again the text map propagator uh and then your grpc server",
    "start": "1481799",
    "end": "1487640"
  },
  {
    "text": "is instrumented uh and this uh at the server side uh",
    "start": "1487640",
    "end": "1495279"
  },
  {
    "text": "like in the client side we saw there was something called inject in the server site we have something called extract because we are extracting the span",
    "start": "1495279",
    "end": "1502200"
  },
  {
    "text": "context that is coming from the previous",
    "start": "1502200",
    "end": "1506039"
  },
  {
    "text": "service so again uh the grpc open Telemetry module will have uh this uh",
    "start": "1507320",
    "end": "1515480"
  },
  {
    "text": "carrier which will so now you can just mirror the previous image where there was an there was grpc Trace pin there",
    "start": "1515480",
    "end": "1522840"
  },
  {
    "text": "there was JPC propag propagator and carrier now the carrier will come before",
    "start": "1522840",
    "end": "1528919"
  },
  {
    "text": "and it will extract uh extract the header uh which",
    "start": "1528919",
    "end": "1535559"
  },
  {
    "text": "which is basically coming in uh from The Wire whether it's string or bytes and it",
    "start": "1535559",
    "end": "1540600"
  },
  {
    "text": "it will handle both both format and then it will give it to the textmap propagator and then text map",
    "start": "1540600",
    "end": "1546720"
  },
  {
    "text": "propagator uh will uh make sense of it and uh create a open Telemetry span",
    "start": "1546720",
    "end": "1554399"
  },
  {
    "text": "context out of it which will be again those 29 byes uh object and uh it will be",
    "start": "1554399",
    "end": "1563440"
  },
  {
    "text": "readable it will Pro it will be provided to your as an object and then you can create the parent child relationship",
    "start": "1563440",
    "end": "1570159"
  },
  {
    "text": "through that uh the key thing here is that why the text map propagator is a",
    "start": "1570159",
    "end": "1576760"
  },
  {
    "text": "different object I'm I'm sure many of you have that question like why can't you just have get and set inside that",
    "start": "1576760",
    "end": "1583960"
  },
  {
    "text": "right so the reason is that it allows you to bring your own propagator as well",
    "start": "1583960",
    "end": "1589559"
  },
  {
    "text": "because eventually we want to make it more pluggable uh so the the job of the",
    "start": "1589559",
    "end": "1595840"
  },
  {
    "text": "carrier is just to read the metadata and put the meta read the metadata header and put the metadata header what you",
    "start": "1595840",
    "end": "1602960"
  },
  {
    "text": "want to do with that header uh can be different based on what your what are your application requirements so you can",
    "start": "1602960",
    "end": "1610720"
  },
  {
    "text": "either use the text map propagator that grpc provides which will just read it and put it into the grpc context but you",
    "start": "1610720",
    "end": "1618080"
  },
  {
    "text": "can you can also bring your own propagator and do uh some more transformation using that so that makes",
    "start": "1618080",
    "end": "1624919"
  },
  {
    "text": "it more pluggable this is a simple API as you",
    "start": "1624919",
    "end": "1630120"
  },
  {
    "text": "can see there are just two options uh that you provide and both of these",
    "start": "1630120",
    "end": "1635799"
  },
  {
    "text": "options are provided at the time of creating the client or the server so in if it's a client then you will provide",
    "start": "1635799",
    "end": "1641480"
  },
  {
    "text": "it as a dial option uh and if it is a server you'll provide it as a server option so Tracer provider is something",
    "start": "1641480",
    "end": "1649000"
  },
  {
    "text": "which open Telemetry SDK gives you and it allows you to like specify uh how",
    "start": "1649000",
    "end": "1654159"
  },
  {
    "text": "much you want to trace like the sampling logic what type of global key you want to use for the exporter to uh and how",
    "start": "1654159",
    "end": "1662360"
  },
  {
    "text": "you want to configure your exporter whether you want to use a console uh exporter or some you have some endpoint",
    "start": "1662360",
    "end": "1669039"
  },
  {
    "text": "where you want to send all your traces all these things kind of gets configured in Tracer provider and then textmap",
    "start": "1669039",
    "end": "1675919"
  },
  {
    "text": "propagator is something which JPC gives you out of the box you can either use that or bring your own",
    "start": "1675919",
    "end": "1683720"
  },
  {
    "text": "propagator uh then the open Telemetry plug-in code is very simple as well uh",
    "start": "1683919",
    "end": "1691919"
  },
  {
    "text": "you can see that it takes the context and carrier and then it will set uh the",
    "start": "1691919",
    "end": "1698960"
  },
  {
    "text": "header and the span context in in a binary format when it is the client",
    "start": "1698960",
    "end": "1704080"
  },
  {
    "text": "because uh a binary format or the string format uh so so that it can be put into the header uh and at the extract",
    "start": "1704080",
    "end": "1713080"
  },
  {
    "text": "function is for the server it basically uh decode uh the bytes that has come in so",
    "start": "1713080",
    "end": "1720640"
  },
  {
    "text": "it reads the header it decodes the bite and gives you the open dmetry context header uh open Telemetry context",
    "start": "1720640",
    "end": "1727799"
  },
  {
    "text": "object uh you can see the carrier so this this grpc Trac propagator is",
    "start": "1727799",
    "end": "1733399"
  },
  {
    "text": "designed to handle both binary header and the text uh header that is Trace pan",
    "start": "1733399",
    "end": "1739279"
  },
  {
    "text": "Trace parent uh but you can bring your own propagator as well uh the carrier is",
    "start": "1739279",
    "end": "1744799"
  },
  {
    "text": "very simple it just has get and set this is something internal to grpc so",
    "start": "1744799",
    "end": "1750000"
  },
  {
    "text": "whatever propagator you are bringing in uh will be using this carrier and it",
    "start": "1750000",
    "end": "1755320"
  },
  {
    "text": "will only have string headers so that's where uh it will only have string values",
    "start": "1755320",
    "end": "1762399"
  },
  {
    "text": "string key value pair so if it is a binary header we will convert it into a base 64 format and then put it into the",
    "start": "1762399",
    "end": "1770399"
  },
  {
    "text": "grpc metadata if it is a string uh header like which is a w3c context",
    "start": "1770399",
    "end": "1776200"
  },
  {
    "text": "header then we'll just directly put it in the string but open dietry has",
    "start": "1776200",
    "end": "1782080"
  },
  {
    "text": "enforced to deal only with text headers as as of now there is no uh communication or uh whether there will",
    "start": "1782080",
    "end": "1788960"
  },
  {
    "text": "be binary header support okay uh so that's kind of the",
    "start": "1788960",
    "end": "1794919"
  },
  {
    "text": "current status uh of open dmetry tracing we have the design complete and Java",
    "start": "1794919",
    "end": "1801720"
  },
  {
    "text": "already has an experimental API in 1.68 version uh and C++ go and python are in",
    "start": "1801720",
    "end": "1809000"
  },
  {
    "text": "active development so yeah that was a worldwind",
    "start": "1809000",
    "end": "1814960"
  },
  {
    "text": "tour of grpc open dmetry we hope you like to dig some more into this uh and",
    "start": "1814960",
    "end": "1821159"
  },
  {
    "text": "in 2025 we'll be holding a grpc conf in India for the first time likely in",
    "start": "1821159",
    "end": "1826760"
  },
  {
    "text": "Bangalore and details on that will be announced soon we hope you'll be able able to attend and gain an even deeper",
    "start": "1826760",
    "end": "1835320"
  },
  {
    "text": "appreciation for GPC or open Telemetry whatever your interest is uh beyond that there are various ways",
    "start": "1835320",
    "end": "1842799"
  },
  {
    "text": "that you can connect uh with the grpc project uh and yeah we look forward all",
    "start": "1842799",
    "end": "1850399"
  },
  {
    "text": "of you we look forward to see all of you in grpc conf",
    "start": "1850399",
    "end": "1855679"
  }
]