[
  {
    "text": "welcome everybody the next talk on the operation struck it's by Thomas graph he",
    "start": "30",
    "end": "7680"
  },
  {
    "text": "is the creator of psyllium and the CTO I",
    "start": "7680",
    "end": "12929"
  },
  {
    "text": "forgot the name I so violent right I got all right okay so this is this about",
    "start": "12929",
    "end": "19010"
  },
  {
    "text": "transportation with Celia nany BPF EVP F",
    "start": "19010",
    "end": "24269"
  },
  {
    "text": "is a really cool technology I'm already familiar with it on Falco and this looks",
    "start": "24269",
    "end": "30119"
  },
  {
    "text": "very promising so I hope you enjoy it thank you",
    "start": "30119",
    "end": "35270"
  },
  {
    "text": "so hello my name is Thomas Groff thanks for intro some of you may be wondering why am i",
    "start": "39650",
    "end": "46530"
  },
  {
    "text": "speaking about chaos testing I'm usually talking about networking BPF security",
    "start": "46530",
    "end": "51629"
  },
  {
    "text": "and topics like this this talk is kind of coming out of our own chaos testing",
    "start": "51629",
    "end": "56730"
  },
  {
    "text": "that we have been doing and we figured if we have tooling available that we write ourselves why not try and use that",
    "start": "56730",
    "end": "62190"
  },
  {
    "text": "for chaos testing so what I'm sharing with you today is how we do some of our",
    "start": "62190",
    "end": "67920"
  },
  {
    "text": "chaos testing using the components that are listed on the slide so on voice Solomon BPF some of you may be wondering",
    "start": "67920",
    "end": "75149"
  },
  {
    "text": "how are they kind of connected and how does that lead to chaos testing and what is actually transparent chaos testing",
    "start": "75149",
    "end": "81000"
  },
  {
    "text": "that's what we'll dive into today so the",
    "start": "81000",
    "end": "87000"
  },
  {
    "text": "stack we'll build is the following one we will use what we call go extensions",
    "start": "87000",
    "end": "92490"
  },
  {
    "text": "for Envoy if you have never heard about that this will do a quick introduction but in a nutshell it's the ability to",
    "start": "92490",
    "end": "99119"
  },
  {
    "text": "run go code as part of Envoy so you can extend and customize envoy and run go",
    "start": "99119",
    "end": "104939"
  },
  {
    "text": "code instead of writing C++ code there's several other extension mechanisms as well we are using go extension in this",
    "start": "104939",
    "end": "111720"
  },
  {
    "text": "case we'll be using envoy will do a quick deep dive into that as well we'll",
    "start": "111720",
    "end": "117630"
  },
  {
    "text": "be using solely below envoy Asti CNI in the arcing plugin and the still open Lansing plug-in and we will use eb PF as",
    "start": "117630",
    "end": "125880"
  },
  {
    "text": "the powerful technology in the kernel that allows us to do a lot of this transparently",
    "start": "125880",
    "end": "130979"
  },
  {
    "text": "and efficient i will dive into all of those details but i wanted to show you the full stack of what we're using up",
    "start": "130979",
    "end": "136890"
  },
  {
    "text": "front so these are the components that were using to do chaos testing today so",
    "start": "136890",
    "end": "142200"
  },
  {
    "text": "who has been doing chaos testing many hands great who knows what chaos test",
    "start": "142200",
    "end": "150420"
  },
  {
    "text": "again is but has never done it many more hands I'm not sure whether that's good",
    "start": "150420",
    "end": "155760"
  },
  {
    "text": "or bad so if you look up the definition it's like it looks something like this and it's coming a bit from the original",
    "start": "155760",
    "end": "162720"
  },
  {
    "text": "cast testing talk I came out of the of net of Netflix chaos testing monkeys and",
    "start": "162720",
    "end": "167910"
  },
  {
    "text": "it's actually if you if you're very specific it means to entails testing in production I'm not sure if everybody",
    "start": "167910",
    "end": "173520"
  },
  {
    "text": "has this understanding has to be in production but in a nutshell it means you're introducing chaos into your",
    "start": "173520",
    "end": "179460"
  },
  {
    "text": "infrastructure to better understand failure modes right now knowing what chaos testing is who has been doing",
    "start": "179460",
    "end": "186410"
  },
  {
    "text": "unintentional chaos testing many hats that's that's what I fear so what we",
    "start": "186410",
    "end": "193950"
  },
  {
    "text": "specifically focus on today is called fault injection and fault injection is",
    "start": "193950",
    "end": "199500"
  },
  {
    "text": "one subset of chaos testing and it basically means that we inject faults",
    "start": "199500",
    "end": "205830"
  },
  {
    "text": "into software where a fault is not occurring normally so the service is",
    "start": "205830",
    "end": "211440"
  },
  {
    "text": "actually operating regularly and we want to inject a fault to simulate an outage or two similar simulate a service",
    "start": "211440",
    "end": "218550"
  },
  {
    "text": "failure and so on that's what we that's what we focus on today fault injection is really important as you can you can",
    "start": "218550",
    "end": "226140"
  },
  {
    "text": "test your software how it behaves on faults and more importantly on combined",
    "start": "226140",
    "end": "232440"
  },
  {
    "text": "faults on multiple components failing at the same time well dig into that in more details to give you a very simple fault",
    "start": "232440",
    "end": "240570"
  },
  {
    "text": "injection example for those that have never heard about fault injection typically if we simplify it we have",
    "start": "240570",
    "end": "247500"
  },
  {
    "text": "services or micro services talking to each other and this is a very simple example where one service is doing a",
    "start": "247500",
    "end": "253890"
  },
  {
    "text": "rushed API call to another service and is making a put two slash or some API front one and because that service is",
    "start": "253890",
    "end": "260910"
  },
  {
    "text": "operating normally it returns 200 okay right we fault injection what we want to get to is to",
    "start": "260910",
    "end": "267120"
  },
  {
    "text": "this that we can change what is being returned and for example return a 503",
    "start": "267120",
    "end": "272940"
  },
  {
    "text": "application error or we would like to delay the response so for example to",
    "start": "272940",
    "end": "277980"
  },
  {
    "text": "simulate the application or the service is taking longer we may even want to corrupt some of the payload there is",
    "start": "277980",
    "end": "284070"
  },
  {
    "text": "many many more fault injection strategies this is a very simple example but probably the most common that you",
    "start": "284070",
    "end": "290040"
  },
  {
    "text": "simply want to simulate that like let's say a go panic in your service code and you get the five over three because your",
    "start": "290040",
    "end": "296970"
  },
  {
    "text": "API Handler panicked and recovered and returned the 503 so this is what we'll we'll focus on what do we require for",
    "start": "296970",
    "end": "304350"
  },
  {
    "text": "two kind of do fault injection first of all we need a man-in-the-middle Weiss is",
    "start": "304350",
    "end": "310530"
  },
  {
    "text": "important because we need something in between the services that will change what is being returned",
    "start": "310530",
    "end": "316350"
  },
  {
    "text": "so this is our changing things on the fly because we don't want to modify the",
    "start": "316350",
    "end": "321720"
  },
  {
    "text": "application to actually return that failure we want to on behalf of the application change the return code we",
    "start": "321720",
    "end": "329100"
  },
  {
    "text": "need to we need ability to actually simulate a failure so we need ability to translate or turn a 200 okay into a 500",
    "start": "329100",
    "end": "336780"
  },
  {
    "text": "500 for application error or a five or three or a four oh four or whatever whatever you're testing we need to be",
    "start": "336780",
    "end": "344460"
  },
  {
    "text": "able to delay responses typically and then the list could go on many more things could be needed but these are the two most common functionalities we need",
    "start": "344460",
    "end": "351410"
  },
  {
    "text": "then we need a probability aspect we don't actually want to simulate this failure every single time right we want",
    "start": "351410",
    "end": "358440"
  },
  {
    "text": "10% of the requests to actually fail but if it's failing all the time it actually it's probably easier to handle it only",
    "start": "358440",
    "end": "364710"
  },
  {
    "text": "if it's only like 1 if 1% probability that the response is delayed by 500",
    "start": "364710",
    "end": "370260"
  },
  {
    "text": "milliseconds that's a much harder problem to solve than if all responses are always getting delayed so we need a",
    "start": "370260",
    "end": "376770"
  },
  {
    "text": "probability aspect or a probability multiply so yes inject failure 50",
    "start": "376770",
    "end": "383190"
  },
  {
    "text": "percent of the times then we want transparency so and we're getting this is maybe a bit new to some of you we",
    "start": "383190",
    "end": "389460"
  },
  {
    "text": "want to be able to do this completely transparent so we have running applications unmodified running applications they're running a",
    "start": "389460",
    "end": "396270"
  },
  {
    "text": "production or running in your staging environment let's simulate failures in that running environment and see how the",
    "start": "396270",
    "end": "401820"
  },
  {
    "text": "applications behave how your infrastructure behaves all the parts restoring or is auto scaling working and",
    "start": "401820",
    "end": "408030"
  },
  {
    "text": "so on like loop lensing failing over and so on all of these things you want to test and you want to do this",
    "start": "408030",
    "end": "413580"
  },
  {
    "text": "transparently so avoid need to change or restore services and then the last piece",
    "start": "413580",
    "end": "420810"
  },
  {
    "text": "you need visibility right if you have a 50 percent chance of doing a fault",
    "start": "420810",
    "end": "427140"
  },
  {
    "text": "injection you actually need to know whether that fault injection happened or not because the service could actually",
    "start": "427140",
    "end": "432630"
  },
  {
    "text": "fail for real so if you get a 5 of 3 application error you want to understand",
    "start": "432630",
    "end": "437790"
  },
  {
    "text": "whether was done by the Kaos testing framework or whether the application really",
    "start": "437790",
    "end": "442880"
  },
  {
    "text": "crashed or really misbehaved or whether the delay was was done by our testing or",
    "start": "442880",
    "end": "448400"
  },
  {
    "text": "whether it was done by the application itself so what's the failure simulated or real so let's meet those requirements",
    "start": "448400",
    "end": "456290"
  },
  {
    "text": "and this is where we dig into some of the components to figure out what they do specifically so the first and biggest",
    "start": "456290",
    "end": "464810"
  },
  {
    "text": "component we need is envoy envoy is a service and etch proxy and I think many",
    "start": "464810",
    "end": "471260"
  },
  {
    "text": "of you have heard about this either for a while or this cup this cube cone it has understanding of layer 7 protocols",
    "start": "471260",
    "end": "477920"
  },
  {
    "text": "it can also do TCP or elf or mode only but the primary purpose of envoy is to",
    "start": "477920",
    "end": "483740"
  },
  {
    "text": "act as a proxy and to understand application protocols and then perform various services or functions such as",
    "start": "483740",
    "end": "491060"
  },
  {
    "text": "advanced lopa lancing path based routing or layer 7 or outing cannery releases",
    "start": "491060",
    "end": "496940"
  },
  {
    "text": "retries circuit breaking reg limits all of these things envoy as a proxy can",
    "start": "496940",
    "end": "502700"
  },
  {
    "text": "perform it can also provide security services authorization mutual TLS and so",
    "start": "502700",
    "end": "507980"
  },
  {
    "text": "on it can provide observers observability this is where a service match is is I think very important or is",
    "start": "507980",
    "end": "514219"
  },
  {
    "text": "it's very promising giving your visibility in all of the API calls in all of the service",
    "start": "514220",
    "end": "519380"
  },
  {
    "text": "communication that is going on are giving you Tracy and giving you metrics and so on and then envoy is also",
    "start": "519380",
    "end": "524630"
  },
  {
    "text": "extendable we're looking into go extensions today but there's also a web assembly support coming up there's newer",
    "start": "524630",
    "end": "530690"
  },
  {
    "text": "so there's multiple ways to actually extend and customize envoy and air logic that you need but is not in the base",
    "start": "530690",
    "end": "537590"
  },
  {
    "text": "envoy distribution that's a very quick intro into envoy if you want to learn",
    "start": "537590",
    "end": "542840"
  },
  {
    "text": "more about envoy there's many good introductions to envoy online on youtube if you if you can't find them ping me",
    "start": "542840",
    "end": "548240"
  },
  {
    "text": "I'm happy to hand them out or give you the links the last piece the next pieces we need is envoy Gao extensions because",
    "start": "548240",
    "end": "555080"
  },
  {
    "text": "we don't actually want to change envoy C++ code envoy does have fault injection",
    "start": "555080",
    "end": "561170"
  },
  {
    "text": "built in what we do is we custom we want to extend that event and actually get to",
    "start": "561170",
    "end": "566990"
  },
  {
    "text": "the next point and why this is important is because we want to eventually get to the point that we can no longer not just simulate",
    "start": "566990",
    "end": "574460"
  },
  {
    "text": "a generic service failure but that we can actually simulate an application-specific service failure so",
    "start": "574460",
    "end": "581720"
  },
  {
    "text": "if for example your services are doing some sort of building transaction then you want to simulate the trend that the",
    "start": "581720",
    "end": "587360"
  },
  {
    "text": "billing transaction failed you note you'll only want to return it like a common five four three you actually want",
    "start": "587360",
    "end": "593360"
  },
  {
    "text": "to have the transaction fail for example so you want to also be able to do application specific failures in orders",
    "start": "593360",
    "end": "601040"
  },
  {
    "text": "and for this you need the proxy that is parsing the request to understand the actual application payload like what",
    "start": "601040",
    "end": "607400"
  },
  {
    "text": "like the the REST API calls that you make and this is a perfect useful case for go extensions because by running go",
    "start": "607400",
    "end": "615500"
  },
  {
    "text": "extensions we can use the standard HTTP parser of : which gives us the standard",
    "start": "615500",
    "end": "621170"
  },
  {
    "text": "HTTP request and response types and we can bring in all the existing goal based HTTP handlers your code your application",
    "start": "621170",
    "end": "628550"
  },
  {
    "text": "code that's written go and run that as part of Envoy and parse the requests and change them and so on so you can bring",
    "start": "628550",
    "end": "634880"
  },
  {
    "text": "in all of the existing go code that you have which understands the service to service communication that's there",
    "start": "634880",
    "end": "641120"
  },
  {
    "text": "that's the reason why we're running go extensions on top simple envoy example",
    "start": "641120",
    "end": "646970"
  },
  {
    "text": "to kind of illustrate this so this is this example of using a cannery releases so you're running service a running",
    "start": "646970",
    "end": "654440"
  },
  {
    "text": "service B service P is currently version 1.0 you would you could run Envoy in",
    "start": "654440",
    "end": "659780"
  },
  {
    "text": "between them and you could do local acting so already splitting 50% of the traffic across both services you would",
    "start": "659780",
    "end": "667100"
  },
  {
    "text": "then want to deploy a new version of service P and instead of just radically",
    "start": "667100",
    "end": "672380"
  },
  {
    "text": "deploying doing a rolling update and going and sending all of the traffic to the new version of your service you",
    "start": "672380",
    "end": "677660"
  },
  {
    "text": "would do a so called can release which is something like this where you start sending 1% of the traffic to service B",
    "start": "677660",
    "end": "686150"
  },
  {
    "text": "version 2 I'm making sure by making sure that all the connections all the",
    "start": "686150",
    "end": "691370"
  },
  {
    "text": "requests from one particular user from one session or all going to version 2 and then slowly ramping up the",
    "start": "691370",
    "end": "698000"
  },
  {
    "text": "percentage of the traffic that is going going to version 2 of the service this is a typical example why you use envoy",
    "start": "698000",
    "end": "705300"
  },
  {
    "text": "or what you can use envoy for and this is also the mode that we use for our chaos testing later on then the next",
    "start": "705300",
    "end": "713310"
  },
  {
    "text": "component we need is solium and the reason why we need cinema specifically is for the transparency aspect as we",
    "start": "713310",
    "end": "719130"
  },
  {
    "text": "will see later in this case I will give you a quick intro into what cilium dots and what solium stands for first of all",
    "start": "719130",
    "end": "725790"
  },
  {
    "text": "the unique aspect about Salaam is that it is based on EB PF technology as we saw an intro so it's based on and will",
    "start": "725790",
    "end": "732690"
  },
  {
    "text": "do a very quick intro on VP f as well for those that have never heard about it but it's based on next-generation technology called EPF in the kernel",
    "start": "732690",
    "end": "739140"
  },
  {
    "text": "which allows it to be very efficient and transparent and secure so them there's a lot of things it does first of all",
    "start": "739140",
    "end": "745230"
  },
  {
    "text": "networking it has its own psyllium CNI plugin but you can also run it on top of",
    "start": "745230",
    "end": "750360"
  },
  {
    "text": "other CNET plugins you can also run it on top something like flannel or calico or AWS di or lyft V PCC and I so we're",
    "start": "750360",
    "end": "757920"
  },
  {
    "text": "compatible with others in eyes and you can you don't necessarily have to use ours yep Naiya plugin you can you can",
    "start": "757920",
    "end": "763380"
  },
  {
    "text": "also run it on top of others then we implement cuban Edit services we have a full implementation which is very",
    "start": "763380",
    "end": "769980"
  },
  {
    "text": "scalable we can scale to ten thousands of number of services we implement",
    "start": "769980",
    "end": "775110"
  },
  {
    "text": "network policies cuban ettus network policies we also extend them so we have additional functionalities such as dns",
    "start": "775110",
    "end": "781860"
  },
  {
    "text": "aware policies where you can say I'm reaching out of my cluster I want to allow - I want to allow all connections",
    "start": "781860",
    "end": "789180"
  },
  {
    "text": "to go calm or I want to allow all connections to start my core calm and so",
    "start": "789180",
    "end": "794550"
  },
  {
    "text": "on so you can you can define the inner space policies we can do layer seven of our policies we can do service name",
    "start": "794550",
    "end": "800790"
  },
  {
    "text": "policies and so on so we have extended functionality that is not yet in the Cuban Atlas network policy spec that is",
    "start": "800790",
    "end": "806640"
  },
  {
    "text": "currently in our custom resource definition and we're working if the signal org team to get that into the",
    "start": "806640",
    "end": "813330"
  },
  {
    "text": "standard and and fully supported by Auto Center plugins we do identity based",
    "start": "813330",
    "end": "818670"
  },
  {
    "text": "enforcement I will not go into all of the details here that will be too long but it's definitely a change from IP",
    "start": "818670",
    "end": "823860"
  },
  {
    "text": "address or IP based enforcement into identity based enforcement we can do multi cluster we can do encryption we",
    "start": "823860",
    "end": "830640"
  },
  {
    "text": "have not native envoy and is to integration this is some of it what we see today or in this talk particularly on",
    "start": "830640",
    "end": "836700"
  },
  {
    "text": "way integration as part of this that's what we specifically focus on today is the transparent envoy injection so we",
    "start": "836700",
    "end": "844020"
  },
  {
    "text": "can get an envoy proxy in between two services or in front of a service in a completely transparent way without the",
    "start": "844020",
    "end": "850440"
  },
  {
    "text": "service to actually know without the service to even need to run anything inside of the pot so it's completely",
    "start": "850440",
    "end": "856320"
  },
  {
    "text": "transparent to both the service the pod and also the all other system components and then a bit more advanced we can",
    "start": "856320",
    "end": "864180"
  },
  {
    "text": "accelerate service measure sidecar use cases if you're running in SEO service mesh or another service match we can we",
    "start": "864180",
    "end": "870510"
  },
  {
    "text": "can accelerate that communication and in the future this is not released yet we'll be able to do transparent SSL",
    "start": "870510",
    "end": "877170"
  },
  {
    "text": "visibility that's kind of the Salomon show if you want to learn more about solium just hit me up after the talk I'm",
    "start": "877170",
    "end": "882209"
  },
  {
    "text": "happy to provide more details whoever is interested and then the last piece of intro EVP F that's kind of the last big",
    "start": "882209",
    "end": "888420"
  },
  {
    "text": "component we need this is super exciting we're seeing a ton of new e BPF usage in",
    "start": "888420",
    "end": "894360"
  },
  {
    "text": "this year eb PF itself is actually all vp f itself is pretty old but most recently we kind",
    "start": "894360",
    "end": "900149"
  },
  {
    "text": "of the need for what we call a virtual machine that allows to program the kernel has has become very obvious and",
    "start": "900149",
    "end": "907020"
  },
  {
    "text": "there's been a ton of effort that has gone into this so what is this EP PF thing in a nutshell it's actually very",
    "start": "907020",
    "end": "912510"
  },
  {
    "text": "simple it means that you can run a piece of logic a piece of code on certain",
    "start": "912510",
    "end": "918060"
  },
  {
    "text": "events in the inside of Kronik i've put a couple of examples on the slide here for example you can do a run a be PF",
    "start": "918060",
    "end": "926010"
  },
  {
    "text": "program whenever you send or receive packets from a network device this is what Saleem does on the networking side",
    "start": "926010",
    "end": "931770"
  },
  {
    "text": "you can run a BPF program whenever a system call is being made like read or connect this is how SEC comp works right",
    "start": "931770",
    "end": "938279"
  },
  {
    "text": "this is how some of the container runtime protection mechanisms based on vpf work you can run it on block IO",
    "start": "938279",
    "end": "943740"
  },
  {
    "text": "right this is some of how the tracing and metrics work they actually look at every time you your system writes into a",
    "start": "943740",
    "end": "950430"
  },
  {
    "text": "block idea of all bio device it runs a small program and captures some samples and you can run it for so called trace",
    "start": "950430",
    "end": "957420"
  },
  {
    "text": "points for example every time the kernel lost a TCP retransmission every time that event happens we can run a program",
    "start": "957420",
    "end": "963510"
  },
  {
    "text": "so it's really making our core Linux Colonel programmable without requiring to change it and it's done so in a",
    "start": "963510",
    "end": "972000"
  },
  {
    "text": "completely secure and efficient manner which makes this perfect so we can load a program it runs out native execution",
    "start": "972000",
    "end": "978000"
  },
  {
    "text": "speed it is secure so it's basically perfect roll we can we can we can extend and and and customize our Linux kernel",
    "start": "978000",
    "end": "985200"
  },
  {
    "text": "and the like add more functionality without ever having to change it or made having to restore it and so on this is",
    "start": "985200",
    "end": "991320"
  },
  {
    "text": "why so many people are super excited about what PPF will bring in the coming years so what exactly is transparent",
    "start": "991320",
    "end": "999750"
  },
  {
    "text": "chaos testing and we'll go through an example to make this clear I kind of put the whole stack that we introduced and",
    "start": "999750",
    "end": "1006110"
  },
  {
    "text": "put it together so simple example service a talking-to service be there",
    "start": "1006110",
    "end": "1011810"
  },
  {
    "text": "both on two different nodes they could also be in the same no but let's assume they're on two different notes it doing",
    "start": "1011810",
    "end": "1017840"
  },
  {
    "text": "an HTTP request you will talk to each other and the first thing that you will need in this case is you need a C and I",
    "start": "1017840",
    "end": "1023300"
  },
  {
    "text": "plug in F chosen Solem in this case could be any other CNF plug-in as well the CNF plug-in will assure that one",
    "start": "1023300",
    "end": "1029540"
  },
  {
    "text": "part on one node can talk to another part on another node that's pretty much their purpose office dir plug-in that",
    "start": "1029540",
    "end": "1036290"
  },
  {
    "text": "doesn't give us any injection there is no one well yet nothing Todd's can talk now we're introducing",
    "start": "1036290",
    "end": "1041959"
  },
  {
    "text": "unroyal and we're running we want to run envoy in the middle because one viable one will will do the fault injection for",
    "start": "1041959",
    "end": "1048770"
  },
  {
    "text": "us and I've made like simplify the the Envoy architectural locked but in in to",
    "start": "1048770",
    "end": "1056450"
  },
  {
    "text": "keep it very simple envoy knows about listeners those are ports where envoy listens for connections it will accept",
    "start": "1056450",
    "end": "1063050"
  },
  {
    "text": "those connections it will pass it will read on those connections and it will then pass both the data and the HTTP",
    "start": "1063050",
    "end": "1069680"
  },
  {
    "text": "requests through a filter chain where we can do filtering and after filtering has happened it will go through the proxy",
    "start": "1069680",
    "end": "1075500"
  },
  {
    "text": "layer where we will basically decide where do I have to send this all right and we'll decide how to forward this and",
    "start": "1075500",
    "end": "1082220"
  },
  {
    "text": "so on and then on top of that were running the go extensions so the Co",
    "start": "1082220",
    "end": "1088280"
  },
  {
    "text": "extensions are a filter of Envoy that allow us to load go code up here while",
    "start": "1088280",
    "end": "1095570"
  },
  {
    "text": "keeping envoy running and every time the action is receiving data that data will go to the NGO extension and our NGO",
    "start": "1095570",
    "end": "1102320"
  },
  {
    "text": "extension can do something with that data and as we'll see we'll do fault injection with that the reason why this",
    "start": "1102320",
    "end": "1110480"
  },
  {
    "text": "is called transparent injection is because this Envoy injection here they're running envoy in the middle will",
    "start": "1110480",
    "end": "1117530"
  },
  {
    "text": "send the demo this happens without the user or without anybody actually noticing Salim will bring up envoy run",
    "start": "1117530",
    "end": "1123470"
  },
  {
    "text": "it and then using vpf magically or magically it's it's not it's networking but it will look like it's it's",
    "start": "1123470",
    "end": "1129950"
  },
  {
    "text": "magically redirecting all traffic subject to our fault injection policy to go through envoy go through the NGO",
    "start": "1129950",
    "end": "1136880"
  },
  {
    "text": "extension and and perform whatever fault injection we need so that's the when we",
    "start": "1136880",
    "end": "1142520"
  },
  {
    "text": "want to talk about transparency on transparent curves testing it means that you can have existing parts running and",
    "start": "1142520",
    "end": "1148490"
  },
  {
    "text": "we can then go and do fault in to actually get envoy into the middle so without doing actual sidecar injection",
    "start": "1148490",
    "end": "1154610"
  },
  {
    "text": "or without running something anywhere we can simply instruct solium to do",
    "start": "1154610",
    "end": "1160570"
  },
  {
    "text": "transparent and transparent chaos testing yes so this is a simple example",
    "start": "1160570",
    "end": "1169640"
  },
  {
    "text": "of kind of how the configuration looks like so they're the go extension runs",
    "start": "1169640",
    "end": "1176150"
  },
  {
    "text": "and I will go through this example very simple this is the solium custom resource definition for a network policy",
    "start": "1176150",
    "end": "1183260"
  },
  {
    "text": "and you will see a couple of things here you will see that we have a endpoint selector this is basically the pod label",
    "start": "1183260",
    "end": "1189530"
  },
  {
    "text": "selector and we'll select what are the parts where this fault injection policy should apply and in this case it's all",
    "start": "1189530",
    "end": "1196400"
  },
  {
    "text": "parts if the label app my service so all of them will will be subject to default",
    "start": "1196400",
    "end": "1202429"
  },
  {
    "text": "injection then we will define that this is ingress this is a bit of a network specific term but it means this fault",
    "start": "1202429",
    "end": "1207500"
  },
  {
    "text": "injection will be done when this when the request is going into the service so not want to request is leaving the",
    "start": "1207500",
    "end": "1212870"
  },
  {
    "text": "service but it when it's getting into the service then we're taught we're basically specifying that every time the",
    "start": "1212870",
    "end": "1218419"
  },
  {
    "text": "service is receiving a request on port 8000 TCP then run the go extension chaos",
    "start": "1218419",
    "end": "1224900"
  },
  {
    "text": "and this is what a co extension is coming in and then we're defining with a probability of 50%",
    "start": "1224900",
    "end": "1230860"
  },
  {
    "text": "rewrite the status code in to 504 application error and this custom",
    "start": "1230860",
    "end": "1236990"
  },
  {
    "text": "Russell resources all you need to load into your cluster to basically enable this and get transparent care or",
    "start": "1236990",
    "end": "1243650"
  },
  {
    "text": "transparent fault injection so let's",
    "start": "1243650",
    "end": "1248720"
  },
  {
    "text": "recap kind of the requirements we saw on how we solve them so women in middle is US envoy quite simply ability to",
    "start": "1248720",
    "end": "1255440"
  },
  {
    "text": "simulate fault injection and probability aspect that's the co extension chaos",
    "start": "1255440",
    "end": "1260680"
  },
  {
    "text": "transparency kind of loading it on demand for existing parts that's cilium + eb PF visibility HTTP headers and",
    "start": "1260680",
    "end": "1268580"
  },
  {
    "text": "envoy we will see the HTTP headers in the demo what I mean specifically by that and yes let's go",
    "start": "1268580",
    "end": "1275390"
  },
  {
    "text": "and dig in because I've been talking for a long while and I think we should just demo this I think it will make a lot of things a lot clearer so let's move over",
    "start": "1275390",
    "end": "1283250"
  },
  {
    "text": "to the demo and I have yes I have a very",
    "start": "1283250",
    "end": "1290300"
  },
  {
    "text": "simple cluster and we're doing all our demos star wars-themed so in this case",
    "start": "1290300",
    "end": "1295820"
  },
  {
    "text": "yes again it's just def store for those have seen solium demos before and a Millennium Falcon so this is actually",
    "start": "1295820",
    "end": "1303590"
  },
  {
    "text": "just many cubes or very simple cluster the only thing I deployed here on top is sodium so you see the cilium power",
    "start": "1303590",
    "end": "1310070"
  },
  {
    "text": "running as a daemon set this is the one normally cube so it's not much there but that's the only thing we deployed on top",
    "start": "1310070",
    "end": "1316490"
  },
  {
    "text": "of mini cube otherwise this is a standard mini cube so I can go on and I",
    "start": "1316490",
    "end": "1322040"
  },
  {
    "text": "can run curl to the death store and this",
    "start": "1322040",
    "end": "1330650"
  },
  {
    "text": "is actually just as you will see this is just HTTP min so it will return some",
    "start": "1330650",
    "end": "1335660"
  },
  {
    "text": "HTML I can for example curl two headers",
    "start": "1335660",
    "end": "1341000"
  },
  {
    "text": "and headers that headers will return what are the headers we provided in the request I can run curl with - I so the curl will",
    "start": "1341000",
    "end": "1350030"
  },
  {
    "text": "tell me what other HTTP headers that were returned and the HTTP code so so far no fault injection this services",
    "start": "1350030",
    "end": "1356450"
  },
  {
    "text": "returning 200 okay you can see this here is the phone big enough",
    "start": "1356450",
    "end": "1362550"
  },
  {
    "text": "or should I good awesome so there's no fault injection going on this everything is working perfectly so how can we do",
    "start": "1362550",
    "end": "1368460"
  },
  {
    "text": "what which is talked about which is fault injection so we can look at I'm",
    "start": "1368460",
    "end": "1375960"
  },
  {
    "text": "actually in the wrong repositories good I want to be here so this repos public so you can try all",
    "start": "1375960",
    "end": "1381150"
  },
  {
    "text": "of this yourself afterwards I have two simple example here let's look at the first one so this first one is very",
    "start": "1381150",
    "end": "1386700"
  },
  {
    "text": "similar to what we saw on the slide it's a policy that says rewrite the status",
    "start": "1386700",
    "end": "1392220"
  },
  {
    "text": "and rewrite it to 504 application error let's actually increase the probability a bit so we're more likely to hit it so",
    "start": "1392220",
    "end": "1400440"
  },
  {
    "text": "this is the chaos policy basically let's save it and let's applied my query",
    "start": "1400440",
    "end": "1406560"
  },
  {
    "text": "simple my F key stock that's good",
    "start": "1406560",
    "end": "1411980"
  },
  {
    "text": "all right so I applied this policy that's all I did let's rerun curl so we just got lucky in",
    "start": "1417320",
    "end": "1425940"
  },
  {
    "text": "the first hit it actually rewrote the application for the status code two five four four application or we didn't",
    "start": "1425940",
    "end": "1431670"
  },
  {
    "text": "change the application at all but all of a sudden it looks like the application is failing so that's running a couple of more times",
    "start": "1431670",
    "end": "1437340"
  },
  {
    "text": "hit it again hit it again let's see when when are we unlucky so far it's always hitting the",
    "start": "1437340",
    "end": "1443430"
  },
  {
    "text": "80% now it didn't hit it so we're implementing that probability aspect we can easily change that all",
    "start": "1443430",
    "end": "1449430"
  },
  {
    "text": "this is actually too much of a failure let's let's change it let's look at the yanil let's change it to 10% let's apply",
    "start": "1449430",
    "end": "1461190"
  },
  {
    "text": "it all right and let's run it again in",
    "start": "1461190",
    "end": "1472500"
  },
  {
    "text": "this case it should actually pretty much always a return 200 and it does all",
    "start": "1472500",
    "end": "1478200"
  },
  {
    "text": "right what else can we do so we can we can delete the policy this guy I'm just",
    "start": "1478200",
    "end": "1484890"
  },
  {
    "text": "deleting all of them because I only have one loaded I can run it again in this case it will always return 200 okay",
    "start": "1484890",
    "end": "1490200"
  },
  {
    "text": "again so I can in check this take it out again it's completely transparent and your pods don't even know that this is",
    "start": "1490200",
    "end": "1496260"
  },
  {
    "text": "happening it's completed on from the outside let's look at the other one that's an also an interesting one which",
    "start": "1496260",
    "end": "1501360"
  },
  {
    "text": "is delay response so if the policy matches delay the response you can also",
    "start": "1501360",
    "end": "1507750"
  },
  {
    "text": "divert delay the request if you want to in this case we're delaying the roof to response so the service has already",
    "start": "1507750",
    "end": "1512760"
  },
  {
    "text": "responded but we will hold it up so let's hold it up for let's make it a bit",
    "start": "1512760",
    "end": "1518070"
  },
  {
    "text": "more obvious two seconds and let's actually always hit it so I added it for",
    "start": "1518070",
    "end": "1525660"
  },
  {
    "text": "maybe this would be quick so I changed it to 1.0 100% probability to second",
    "start": "1525660",
    "end": "1530970"
  },
  {
    "text": "delay on the response side let's apply that till a response let's do this again",
    "start": "1530970",
    "end": "1540270"
  },
  {
    "text": "and you can see it should block roughly two seconds it will wait to two seconds",
    "start": "1540270",
    "end": "1548340"
  },
  {
    "text": "and if you delete it it's instant again",
    "start": "1548340",
    "end": "1555400"
  },
  {
    "text": "so we can do delay we can do rewrite status and so we can do many more things",
    "start": "1555400",
    "end": "1560650"
  },
  {
    "text": "so quick demo like how simple this is from a usability perspective what's even",
    "start": "1560650",
    "end": "1566470"
  },
  {
    "text": "more important in this case is that this is all gold code so if you need additional functionality it's absolutely",
    "start": "1566470",
    "end": "1573880"
  },
  {
    "text": "trivial to extend this and write whatever additional logic you need because it's all going HTTP parsing code",
    "start": "1573880",
    "end": "1580150"
  },
  {
    "text": "like almost everybody it's not like DPF low-level code is not C++ absolutely",
    "start": "1580150",
    "end": "1585340"
  },
  {
    "text": "trivial to extend this if you want to",
    "start": "1585340",
    "end": "1590710"
  },
  {
    "text": "get started and basically repeat what I just did very simple as well I put all",
    "start": "1590710",
    "end": "1595780"
  },
  {
    "text": "of the examples into a git repo so you can get clone that you can create a cube",
    "start": "1595780",
    "end": "1601720"
  },
  {
    "text": "notice cluster you can use your existing one in this case I'm just using mini cube very simple you install solely on",
    "start": "1601720",
    "end": "1608580"
  },
  {
    "text": "one command and solemn is installed that's just the daemon set this is part of the chaos testing examples repo but",
    "start": "1608580",
    "end": "1615850"
  },
  {
    "text": "you can also follow the standard same installation path you deploy your app in this case it's a def store and the",
    "start": "1615850",
    "end": "1621970"
  },
  {
    "text": "Falcon and then you apply the fault detection policy that's all you need to do so very simple you can try this out",
    "start": "1621970",
    "end": "1628600"
  },
  {
    "text": "using your existing apps or you can use this for development purposes on mini cube you can run this in your staging clusters you can run this in your",
    "start": "1628600",
    "end": "1635380"
  },
  {
    "text": "product testers if you want and so on to go into some more examples you can",
    "start": "1635380",
    "end": "1642730"
  },
  {
    "text": "combine the the probabilities so you can for example have a policy that says with a probability of 80% delay by 50",
    "start": "1642730",
    "end": "1649720"
  },
  {
    "text": "milliseconds and then with an additional probability of 20% delay for one second",
    "start": "1649720",
    "end": "1655090"
  },
  {
    "text": "so it's not just one rule or like you can actually combine them which is kind",
    "start": "1655090",
    "end": "1660460"
  },
  {
    "text": "of a bit of a more realistic example because you can create a distribution that you are more likely to see you can",
    "start": "1660460",
    "end": "1667600"
  },
  {
    "text": "also rewrite or match on path method on the status code so you can basically say",
    "start": "1667600",
    "end": "1673720"
  },
  {
    "text": "only rewrite the HTTP response if the request was a get to /foo so you can",
    "start": "1673720",
    "end": "1680559"
  },
  {
    "text": "become very specific on which responses you want to want to where you want to inject false so you",
    "start": "1680559",
    "end": "1686260"
  },
  {
    "text": "can not only just match on the poor labels you're matching on or the selected services you can also apply",
    "start": "1686260",
    "end": "1691810"
  },
  {
    "text": "filters on what are the requests that you want to inject failures into now",
    "start": "1691810",
    "end": "1696970"
  },
  {
    "text": "obviously you can load as many of these policies as you want no I've only loaded one you can load as many as you want of",
    "start": "1696970",
    "end": "1702280"
  },
  {
    "text": "course with that I'm happy to take",
    "start": "1702280",
    "end": "1708400"
  },
  {
    "text": "questions before we get to that all of this is open source the limits open source the link to the gate up is there",
    "start": "1708400",
    "end": "1714490"
  },
  {
    "text": "the link to the examples with all the chaos testing scripts and policies are up there we have a slack channel so if",
    "start": "1714490",
    "end": "1721360"
  },
  {
    "text": "you want to try this you'll run into issues come to our slack channel feel free to ask questions we're happy to",
    "start": "1721360",
    "end": "1726460"
  },
  {
    "text": "help and we also have a Twitter account if you want to follow updates around solium",
    "start": "1726460",
    "end": "1731500"
  },
  {
    "text": "if that happy to take questions [Applause]",
    "start": "1731500",
    "end": "1744799"
  },
  {
    "text": "thank you for talk that was very interesting can you tell me in the delay method where is the packet being delayed",
    "start": "1744799",
    "end": "1751500"
  },
  {
    "text": "as it is impossible to have a backlog bill W delay too long on the response side first I didn't get the second poll",
    "start": "1751500",
    "end": "1756779"
  },
  {
    "text": "can you repeat the second part of the question if you just explain where it's delayed you'd cover that so my concern",
    "start": "1756779",
    "end": "1762299"
  },
  {
    "text": "would be if you delay a response does that mean that in the kernel or in the responding service there's a gas law",
    "start": "1762299",
    "end": "1768779"
  },
  {
    "text": "container so the delay is caused at the packet the request is currently in envoy and the response has been parsed but",
    "start": "1768779",
    "end": "1775289"
  },
  {
    "text": "it's basically held in there so the Envoy is maintaining a connection to both services and the response is in the",
    "start": "1775289",
    "end": "1782309"
  },
  {
    "text": "exactly the same as if you do envoy rate-limiting it's holding the request it's not actually holding packets like",
    "start": "1782309",
    "end": "1788490"
  },
  {
    "text": "Network packets it's it's parsing the full response holding that for like one second and then sending it back",
    "start": "1788490",
    "end": "1796070"
  },
  {
    "text": "can I do the same with with Qi RPC services in the backend so is this independent from the actual protocol",
    "start": "1802660",
    "end": "1809169"
  },
  {
    "text": "using or so you what the demo I did today this I brought this chaos testing",
    "start": "1809169",
    "end": "1814720"
  },
  {
    "text": "clogging like one day and I'm using : net HTTP so it will support any version of HTTP but the co extension plugging is",
    "start": "1814720",
    "end": "1823120"
  },
  {
    "text": "on data level and the plug-in I'm using is done in a way that you can now hook in any any parcel you have that's using",
    "start": "1823120",
    "end": "1830530"
  },
  {
    "text": "the goal line io reader interface you can just plug it in so you can parse whatever protocol even if your",
    "start": "1830530",
    "end": "1835630"
  },
  {
    "text": "proprietary protocols can all plug it in the demo I did was HTTP specific so",
    "start": "1835630",
    "end": "1842169"
  },
  {
    "text": "where does your city of network plucking I stopped and made when does your go extinct and stop how much work is done",
    "start": "1842169",
    "end": "1848799"
  },
  {
    "text": "in the co extension because psyllium seems to be doing some work on you as well okay so the convoy is actually not",
    "start": "1848799",
    "end": "1855970"
  },
  {
    "text": "running at all until we injected the first network policy so when we did the first apply if the policy envoy will",
    "start": "1855970",
    "end": "1861909"
  },
  {
    "text": "start it and at that point the filter like let's go back to the policy so only",
    "start": "1861909",
    "end": "1870100"
  },
  {
    "text": "the connections that are matching this selector here so all connections so that's only those will go through envoy",
    "start": "1870100",
    "end": "1876669"
  },
  {
    "text": "and then when you unload this policy no connections will go through envoy again so only then neither does it go through",
    "start": "1876669",
    "end": "1882669"
  },
  {
    "text": "envoy and then I think you also had a question about overhead on top of pure envoy Co extension add about 10 percent",
    "start": "1882669",
    "end": "1889210"
  },
  {
    "text": "of overhead choose from context switching and and so on maybe the",
    "start": "1889210",
    "end": "1896559"
  },
  {
    "text": "question is going in the same direction because you are using the cilium network policy which is special to psyllium and",
    "start": "1896559",
    "end": "1903880"
  },
  {
    "text": "provides the sto in to add even more integration what would happen if I would have a network policy and I would add an",
    "start": "1903880",
    "end": "1911409"
  },
  {
    "text": "additional psyllium Network policy for the chaos testing yes it will respect both so all cubanelles never polished in",
    "start": "1911409",
    "end": "1919690"
  },
  {
    "text": "all network policy or so-called whitelist is or whitelisting so there's no denial reject in convenors policy so",
    "start": "1919690",
    "end": "1927880"
  },
  {
    "text": "you cannot even have a conflict but the both will be respected you may not the only reason why we need some network",
    "start": "1927880",
    "end": "1933520"
  },
  {
    "text": "policy is because there is this part here this is a this is just a gold egg map and allows",
    "start": "1933520",
    "end": "1938690"
  },
  {
    "text": "us to parse arbitrary key value pairs into the go extension so you can basically pass whatever configuration",
    "start": "1938690",
    "end": "1944360"
  },
  {
    "text": "you need for your call extension that's why I use Salim Network policy all right so this is a this is a generic Gold Line",
    "start": "1944360",
    "end": "1950630"
  },
  {
    "text": "map key value so as you add more capability you can just make it configurable was another question yeah",
    "start": "1950630",
    "end": "1957880"
  },
  {
    "text": "along the same lines but going towards service mesh because cilium integrates with isseo yes how does will this",
    "start": "1957880",
    "end": "1965660"
  },
  {
    "text": "collide with that or you'll just little go through multiple envoy proxies how does that work you can run this with Sto",
    "start": "1965660",
    "end": "1971390"
  },
  {
    "text": "all you have to do is this the co extension is an envoy filter envoy or is",
    "start": "1971390",
    "end": "1977120"
  },
  {
    "text": "tu has its own we're kind of not for version of envoy choose to add our patch",
    "start": "1977120",
    "end": "1982160"
  },
  {
    "text": "to add our filter because the sto proxy does not have the the go extension",
    "start": "1982160",
    "end": "1987980"
  },
  {
    "text": "filter in but as soon as you add that and sto sidecar proxy becomes capable of",
    "start": "1987980",
    "end": "1993350"
  },
  {
    "text": "running Co extensions this will just work in the pilot managed sidecar as well this is the the go extension patch",
    "start": "1993350",
    "end": "2000490"
  },
  {
    "text": "on top is very small so it's a couple of hundred lines it's not something massive",
    "start": "2000490",
    "end": "2006240"
  },
  {
    "text": "as you mentioned that 10% overhead for a vertical extension does this also apply a few writing extensions in C++",
    "start": "2006240",
    "end": "2013320"
  },
  {
    "text": "would that be done almost native performance from the from extension point the overhead is coming because Co",
    "start": "2013320",
    "end": "2021070"
  },
  {
    "text": "is doing memory a bit different and it has it there's every time you switch contexts it's not really a context which",
    "start": "2021070",
    "end": "2027940"
  },
  {
    "text": "it's not kernel user space but there's a memory context switch between C++ and Co that will that's this 10% but that's not",
    "start": "2027940",
    "end": "2035980"
  },
  {
    "text": "per packet or anything like this is every time it's usually one call per request and then you get the data for",
    "start": "2035980",
    "end": "2042130"
  },
  {
    "text": "the entire HTTP request unless it's really really really large what we measured in the worst case is about ten",
    "start": "2042130",
    "end": "2047320"
  },
  {
    "text": "percent it might actually be less but it's coming that 10 percent is because of switching between C++ okay so if we",
    "start": "2047320",
    "end": "2054158"
  },
  {
    "text": "would write this in C++ oh yeah for sure yes so go extension is primarily for simplicity I've wrote this like less",
    "start": "2054159",
    "end": "2060040"
  },
  {
    "text": "than a day like which was very that's the thinking the peeling part of this",
    "start": "2060040",
    "end": "2065820"
  },
  {
    "text": "are there more questions",
    "start": "2065910",
    "end": "2069139"
  },
  {
    "text": "could you just describe again how psyllium starts envoy does it key off of",
    "start": "2072639",
    "end": "2078200"
  },
  {
    "text": "that l7 proto in the in the network policy that you've got yes so as soon as",
    "start": "2078200",
    "end": "2085429"
  },
  {
    "text": "you have this so up to this point up to protocol it's basically a layer for",
    "start": "2085429",
    "end": "2091039"
  },
  {
    "text": "policy and there's no envoy as soon as you have al seven proto and you choose what layer seven protocol you are using",
    "start": "2091039",
    "end": "2098599"
  },
  {
    "text": "so we're supporting Cassandra Kafka memcache T as soon as you select one and that one is implemented by envoy which",
    "start": "2098599",
    "end": "2104960"
  },
  {
    "text": "is everything except cough Cohn DNS right now then it will automatically start on Royal think no more questions",
    "start": "2104960",
    "end": "2116119"
  },
  {
    "text": "so awesome thanks thank you [Applause]",
    "start": "2116119",
    "end": "2123459"
  }
]