[
  {
    "text": "hello and welcome to our session today it's going to be on persistent storage",
    "start": "199",
    "end": "5730"
  },
  {
    "text": "of Windows work words in kubernetes my name is anusha and presenting with me is",
    "start": "5730",
    "end": "12599"
  },
  {
    "text": "Jean two offices are suffering before I get",
    "start": "12599",
    "end": "20130"
  },
  {
    "text": "started looks like it's a cozy small audience so maybe we can come closer so that we can",
    "start": "20130",
    "end": "28279"
  },
  {
    "text": "we can focus I mean or there's plenty of room in the front so the agenda for",
    "start": "28279",
    "end": "37800"
  },
  {
    "text": "today we're gonna start with talking about persistent storage in kubernetes",
    "start": "37800",
    "end": "42829"
  },
  {
    "text": "this is going to be an OS agnostic session section we'll talk about how",
    "start": "42829",
    "end": "48390"
  },
  {
    "text": "kubernetes handles personal storage in general after that we will move into the",
    "start": "48390",
    "end": "53910"
  },
  {
    "text": "current state of state in Windows in this section we will talk about the",
    "start": "53910",
    "end": "60359"
  },
  {
    "text": "different storage interfaces that work with Windows today and we will also have",
    "start": "60359",
    "end": "66090"
  },
  {
    "text": "a couple of live demos where a stateful applications such as sequel server can",
    "start": "66090",
    "end": "71729"
  },
  {
    "text": "be used to provision volumes can be used with persistent volumes in the backend",
    "start": "71729",
    "end": "78740"
  },
  {
    "text": "finally we will wrap up the talk with some of the work we've been doing around CSI plugins CSI stands for container",
    "start": "78740",
    "end": "86460"
  },
  {
    "text": "storage interface CSI plug-ins for windows first let's talk about",
    "start": "86460",
    "end": "94200"
  },
  {
    "text": "persistent storage in kubernetes you might have seen this architecture diagram before but just to recap on the",
    "start": "94200",
    "end": "101909"
  },
  {
    "text": "top you see the kubernetes master right now this is a linux nerd the kubernetes",
    "start": "101909",
    "end": "108810"
  },
  {
    "text": "master manages the workers the workers can be a mix of both windows workers and",
    "start": "108810",
    "end": "114409"
  },
  {
    "text": "Linux workers the Windows workers need to be 2019 Windows Server 2019 at this",
    "start": "114409",
    "end": "123090"
  },
  {
    "text": "point I'd like to point out that kubernetes version 114 provided GA",
    "start": "123090",
    "end": "128190"
  },
  {
    "text": "support for Windows workers now at bottom of the diagram you see the",
    "start": "128190",
    "end": "135320"
  },
  {
    "text": "network and this storage fabric that are required for the cluster this can be",
    "start": "135320",
    "end": "141980"
  },
  {
    "text": "both on print or on the cloud looking at the master components you have the",
    "start": "141980",
    "end": "148520"
  },
  {
    "text": "kubernetes scheduler the API server as well as a bunch of controllers that work",
    "start": "148520",
    "end": "154190"
  },
  {
    "text": "together we'll talk about the controllers in a bit and the bottom you",
    "start": "154190",
    "end": "159620"
  },
  {
    "text": "actually see the components that are part of a worker node this is typically",
    "start": "159620",
    "end": "165230"
  },
  {
    "text": "the crew blade the coop proxy and the different plugins the C and ICSI and CRI",
    "start": "165230",
    "end": "171400"
  },
  {
    "text": "for Network runtime and storage plugins now notice that the kubernetes master",
    "start": "171400",
    "end": "178760"
  },
  {
    "text": "components are cluster wide components that work for throughout the cluster and",
    "start": "178760",
    "end": "184040"
  },
  {
    "text": "doesn't have any OS specific components all the earth specific components come down to the worker nodes looking at the",
    "start": "184040",
    "end": "195560"
  },
  {
    "text": "components that are specific to storage there are controllers that are running",
    "start": "195560",
    "end": "201920"
  },
  {
    "text": "as part of the master that work together to provide persistent storage for",
    "start": "201920",
    "end": "207590"
  },
  {
    "text": "kubernetes a controller in kubernetes is basically a software loop that looks at the",
    "start": "207590",
    "end": "214730"
  },
  {
    "text": "current state of the cluster and tries to convert that with the desired state",
    "start": "214730",
    "end": "219740"
  },
  {
    "text": "of the cluster the desired state of the cluster is typically provided by the user or operator in the form of a Hamel",
    "start": "219740",
    "end": "225920"
  },
  {
    "text": "file and become controllers that work for persistent storage are typically the",
    "start": "225920",
    "end": "231860"
  },
  {
    "text": "PD controller or the precision volume controller which is in charge of the",
    "start": "231860",
    "end": "238010"
  },
  {
    "text": "creation and deletion of persistent volumes attached attached controller",
    "start": "238010",
    "end": "243260"
  },
  {
    "text": "which is in charge of attaching these created volumes to the nodes in the",
    "start": "243260",
    "end": "248360"
  },
  {
    "text": "cluster and the node controller which is responsible for working with the",
    "start": "248360",
    "end": "255410"
  },
  {
    "text": "attached attached controller to move the volumes alongside the pods when the pods",
    "start": "255410",
    "end": "261140"
  },
  {
    "text": "get rescheduled moving on to our specific logic in the work",
    "start": "261140",
    "end": "266870"
  },
  {
    "text": "we have the couplet the couplet is does a lot of the heavy lifting around mounting and unmounting volumes on",
    "start": "266870",
    "end": "273439"
  },
  {
    "text": "worker nods and it has a lot of OS specific logic container runtimes like",
    "start": "273439",
    "end": "280120"
  },
  {
    "text": "container D or dr. D that has a lot of specific logic as well and finally flex",
    "start": "280120",
    "end": "288319"
  },
  {
    "text": "volume and CSI plugins have node specific attached attached operations as",
    "start": "288319",
    "end": "294409"
  },
  {
    "text": "well as mountain mount operations now",
    "start": "294409",
    "end": "299990"
  },
  {
    "text": "let's look at some storage concepts in kubernetes before we go further these",
    "start": "299990",
    "end": "306740"
  },
  {
    "text": "are basically like building blocks that can that kubernetes overall uses to",
    "start": "306740",
    "end": "312379"
  },
  {
    "text": "provide persistent storage pause as we all know are basically a set of running",
    "start": "312379",
    "end": "317870"
  },
  {
    "text": "containers that represent your workload a persistent volume claim or PVC is",
    "start": "317870",
    "end": "323360"
  },
  {
    "text": "basically a request from the user to access a piece of storage in your",
    "start": "323360",
    "end": "328400"
  },
  {
    "text": "cluster and just like how fast consume CPU and memory PVCs consume storage and just like how",
    "start": "328400",
    "end": "336169"
  },
  {
    "text": "pods can specify number of CPUs and amount of memory",
    "start": "336169",
    "end": "341680"
  },
  {
    "text": "PVCs can specify how much storage they need and what access modes they need it",
    "start": "341680",
    "end": "347240"
  },
  {
    "text": "in and typically a pod will reference a PVC now what happens when a PVC gets",
    "start": "347240",
    "end": "353389"
  },
  {
    "text": "submitted to the kubernetes master api server they there's some magic that",
    "start": "353389",
    "end": "358789"
  },
  {
    "text": "happens and a piece of storage gets provision behind the scenes that piece",
    "start": "358789",
    "end": "365180"
  },
  {
    "text": "of storage is actually represented in kubernetes as an API object called",
    "start": "365180",
    "end": "370219"
  },
  {
    "text": "persistent volume and this PV or persistent volume is bound to the PVC",
    "start": "370219",
    "end": "376129"
  },
  {
    "text": "that the claim that we just mean so they and they're married together they're one or two one on one mapping the lifecycle",
    "start": "376129",
    "end": "382550"
  },
  {
    "text": "of a PV is independent of the lifecycle of the pod using it looking at the life",
    "start": "382550",
    "end": "389000"
  },
  {
    "text": "of a PV this is a very generic diagram of how volume can",
    "start": "389000",
    "end": "394420"
  },
  {
    "text": "the volumes lifecycle you have the storage service on top and the part consuming it in the bottom so the volume",
    "start": "394420",
    "end": "401350"
  },
  {
    "text": "gets created it gets attached to a specific node when the plop part gets scheduled on a specific node once it",
    "start": "401350",
    "end": "408670"
  },
  {
    "text": "gets attached to a specific node the part actually will be able to mount that volume and start using it one when the",
    "start": "408670",
    "end": "416710"
  },
  {
    "text": "part is done with it it can actually the the volume gets unmounted when the pod",
    "start": "416710",
    "end": "422110"
  },
  {
    "text": "gets reschedule to another node the volume will get detached from this node and reattach to another node and",
    "start": "422110",
    "end": "428170"
  },
  {
    "text": "eventually when the volume is not used anymore it can either be deleted or",
    "start": "428170",
    "end": "434590"
  },
  {
    "text": "recycled or retain let's look into pv",
    "start": "434590",
    "end": "439870"
  },
  {
    "text": "provisioning the provisioning is basically fancy word for creating or allocating volumes and there are two",
    "start": "439870",
    "end": "446170"
  },
  {
    "text": "types of provisioning that are supported in cribben it is static and dynamic static is basically creation of these",
    "start": "446170",
    "end": "452860"
  },
  {
    "text": "precision volumes upfront you have a pool of persistent volumes and then when",
    "start": "452860",
    "end": "458500"
  },
  {
    "text": "the user makes a claim you Matt the controller sort of matches the claim with the existing PDS that are available",
    "start": "458500",
    "end": "466120"
  },
  {
    "text": "and the PV and PVC are bound from then on and then the part can basically come",
    "start": "466120",
    "end": "471550"
  },
  {
    "text": "in and use it mounted and so on the other way of provisioning is dynamic",
    "start": "471550",
    "end": "477730"
  },
  {
    "text": "provisioning in this it's basically a on-demand provisioning of Peavey's so",
    "start": "477730",
    "end": "485290"
  },
  {
    "text": "when the user submits a claim is when the TVs get provision in the backend",
    "start": "485290",
    "end": "490920"
  },
  {
    "text": "this is definitely the recommended way because it's on-demand you don't have to",
    "start": "490920",
    "end": "496030"
  },
  {
    "text": "create it ahead of time and you also know what the users specifications are you don't have to sort of guess on your",
    "start": "496030",
    "end": "502450"
  },
  {
    "text": "capacity or the request that is made now",
    "start": "502450",
    "end": "508240"
  },
  {
    "text": "dynamic provisioning is done through a concept of storage classes it's basically our storage passes are nothing",
    "start": "508240",
    "end": "515830"
  },
  {
    "text": "but tiers of storage that are available in your cluster so storage admin comes in and creates different tiers typically",
    "start": "515830",
    "end": "522219"
  },
  {
    "text": "based on performance some SLA requirements and so on and the",
    "start": "522220",
    "end": "528220"
  },
  {
    "text": "storage classes are backed by always backed by a provisioner what is a provisioner provision is nothing but a",
    "start": "528220",
    "end": "535030"
  },
  {
    "text": "piece of software that's constantly listening on incoming persistent volume",
    "start": "535030",
    "end": "540190"
  },
  {
    "text": "claims and if there is a match to itself then it basically creates the position",
    "start": "540190",
    "end": "548500"
  },
  {
    "text": "volumes in the backend the appropriately let's look at the state of State in",
    "start": "548500",
    "end": "555580"
  },
  {
    "text": "Windows which is essentially what the stock is all about with that in the background so to understand that let's",
    "start": "555580",
    "end": "565060"
  },
  {
    "text": "look at what is what are the different storage interfaces available today in kubernetes we have entry plugins which",
    "start": "565060",
    "end": "571210"
  },
  {
    "text": "are basically plugins that are available as part of kubernetes tree and run in",
    "start": "571210",
    "end": "576280"
  },
  {
    "text": "process with kubernetes common core components then then we have flex volume",
    "start": "576280",
    "end": "583540"
  },
  {
    "text": "plugins which are basically out of tree from kubernetes and takes care of some",
    "start": "583540",
    "end": "589270"
  },
  {
    "text": "customization on the worker nodes typically on mount unmount and attach",
    "start": "589270",
    "end": "594880"
  },
  {
    "text": "detach this is basically a host based exact model a approach for flex volumes",
    "start": "594880",
    "end": "602190"
  },
  {
    "text": "external provisioners are live out of tree and out of process from kubernetes",
    "start": "602190",
    "end": "607660"
  },
  {
    "text": "and they take care of the provisioning aspect of it so the create delete of the volumes is handled by external",
    "start": "607660",
    "end": "614320"
  },
  {
    "text": "provisioners and finally CSI is again out of tree and out of process from kubernetes and it managed that manages",
    "start": "614320",
    "end": "621250"
  },
  {
    "text": "the entire lifecycle of a volume search create delete a - a - mount and mount",
    "start": "621250",
    "end": "626590"
  },
  {
    "text": "and there are more customizations that are coming in for CSI now quick pro and",
    "start": "626590",
    "end": "635080"
  },
  {
    "text": "pro's and con's table the advantage of entry is basically you don't have to do",
    "start": "635080",
    "end": "640720"
  },
  {
    "text": "any extra installation the disadvantage is that it's all the entry plug-in work",
    "start": "640720",
    "end": "648100"
  },
  {
    "text": "is tied to kubernetes releases so if you have a bug or a patch release that you want to actually make to your entry",
    "start": "648100",
    "end": "654850"
  },
  {
    "text": "plugins you have to wait until the next Jeff Kober Nettie's is out the future is",
    "start": "654850",
    "end": "660610"
  },
  {
    "text": "superseded by CSI external provisioners the advantage is that you can highly",
    "start": "660610",
    "end": "666970"
  },
  {
    "text": "customize the provisioning aspect of it but the disadvantage is that it's limited customization for the attachment",
    "start": "666970",
    "end": "673990"
  },
  {
    "text": "amount operations flex volume you can actually customize the code for attach",
    "start": "673990",
    "end": "679720"
  },
  {
    "text": "and mount operations but you cannot customize it much for provisioning and",
    "start": "679720",
    "end": "685410"
  },
  {
    "text": "also in Flex Walliams the idea is there is expectation there are certain",
    "start": "685410",
    "end": "692110"
  },
  {
    "text": "assumptions that are being made as far as scripts or binaries to be existent in your nodes at a certain location and so",
    "start": "692110",
    "end": "699700"
  },
  {
    "text": "on and so forth so the portability of this model is very limited there so for",
    "start": "699700",
    "end": "708040"
  },
  {
    "text": "that specific reason flex volume is actually deprecated in window in Linux",
    "start": "708040",
    "end": "713200"
  },
  {
    "text": "it's still used in Windows because there is no better alternative for Windows and",
    "start": "713200",
    "end": "718420"
  },
  {
    "text": "we will see why in a bit in the later half and finally CSI the advantage is",
    "start": "718420",
    "end": "724270"
  },
  {
    "text": "that it's highly customizable almost all of the operations can be customized and it's an industry standard so CSI can be",
    "start": "724270",
    "end": "731470"
  },
  {
    "text": "implemented on in other container orchestrators like me source and cloud foundry and the same storage plugin can",
    "start": "731470",
    "end": "738760"
  },
  {
    "text": "be used across all container orchestrators if they are there to the spec so it's an industry standard which",
    "start": "738760",
    "end": "745030"
  },
  {
    "text": "is which is a great thing but the disadvantage is of course there's the minor disadvantage which is you gotta",
    "start": "745030",
    "end": "751840"
  },
  {
    "text": "install kubernetes and on top of that you've got to maintain install maintain and configure your CSI plugins on top of",
    "start": "751840",
    "end": "757570"
  },
  {
    "text": "it but this is definitely the future now what are some of the considerations",
    "start": "757570",
    "end": "763810"
  },
  {
    "text": "specific for Windows as far as writing a plugin verse now disk the device",
    "start": "763810",
    "end": "769690"
  },
  {
    "text": "enumeration and volumes enumeration interfaces on Windows are very different from that of Linux in Linux all the",
    "start": "769690",
    "end": "777100"
  },
  {
    "text": "devices and volumes end up as a file on your file system but on Windows they are",
    "start": "777100",
    "end": "782680"
  },
  {
    "text": "all object based so you have to make win32 calls to get the enumeration done",
    "start": "782680",
    "end": "788350"
  },
  {
    "text": "in is not like you can actually files off of your file system so as I fear a plugin author you have to make",
    "start": "788350",
    "end": "795500"
  },
  {
    "text": "that take that into account as far as the actual file system support goes in",
    "start": "795500",
    "end": "803240"
  },
  {
    "text": "Linux you basically for block devices you ended up having ext two three four or XFS on Windows you're going to have",
    "start": "803240",
    "end": "811070"
  },
  {
    "text": "NTFS for shared storage in Linux we have support for NFS on Windows we don't have",
    "start": "811070",
    "end": "819620"
  },
  {
    "text": "support for NFS and it's something that has been talked about for the future but",
    "start": "819620",
    "end": "825800"
  },
  {
    "text": "for right now we have Samba support and windows also ends up have having to",
    "start": "825800",
    "end": "832910"
  },
  {
    "text": "heavily depend on powershell command let's and scripts for many of the actions that need to be customized",
    "start": "832910",
    "end": "839770"
  },
  {
    "text": "now what's available today for in pre storage for Windows so Kubla dot exe on",
    "start": "839770",
    "end": "846680"
  },
  {
    "text": "windows basically supports partitioning and formatting using NTFS it also",
    "start": "846680",
    "end": "852050"
  },
  {
    "text": "provides support for linking host volumes into the container so this is similar to there there is a tool called",
    "start": "852050",
    "end": "858860"
  },
  {
    "text": "mate link that is actually being used for this specific linking this is",
    "start": "858860",
    "end": "864200"
  },
  {
    "text": "similar to bind mounting on Linux where you can bind want something on the from the local host onto your container file",
    "start": "864200",
    "end": "871190"
  },
  {
    "text": "system linking samba shares to the containers filesystem is also very is",
    "start": "871190",
    "end": "876590"
  },
  {
    "text": "also supported so with these features it's actually possible to provide some pretty good",
    "start": "876590",
    "end": "882260"
  },
  {
    "text": "entry support so today we actually have",
    "start": "882260",
    "end": "887690"
  },
  {
    "text": "file based cloud volumes on as your file through samba in fact our demo is going",
    "start": "887690",
    "end": "894020"
  },
  {
    "text": "to be that block based Cloud volumes support is also available on both azure",
    "start": "894020",
    "end": "900560"
  },
  {
    "text": "disk and GCE PD on AWS EBS it's a work in progress and for ice cozy entry",
    "start": "900560",
    "end": "909950"
  },
  {
    "text": "support is actually work in progress it's targeted for kubernetes 116",
    "start": "909950",
    "end": "916149"
  },
  {
    "text": "a quick diagram about the entry plug-in architecture so here we see that the PV",
    "start": "917529",
    "end": "923620"
  },
  {
    "text": "claim actually comes into the API server and the it gets dispatched from the",
    "start": "923620",
    "end": "930550"
  },
  {
    "text": "controller to the different entry plugins that are available so basically",
    "start": "930550",
    "end": "936420"
  },
  {
    "text": "there is a inspect of the coming incoming claim and the correct entry",
    "start": "936420",
    "end": "943180"
  },
  {
    "text": "plug-in is basically looked up and dispatched to four create delete and",
    "start": "943180",
    "end": "949209"
  },
  {
    "text": "attach detach volumes those components reside in the master four mount and",
    "start": "949209",
    "end": "954519"
  },
  {
    "text": "unmount the public takes care of it the main point to drive home from in this picture is that all of the operations",
    "start": "954519",
    "end": "963100"
  },
  {
    "text": "are happening within this blue box which represents the core components of kubernetes so and there is no call",
    "start": "963100",
    "end": "969670"
  },
  {
    "text": "outside of the processes the call could come processes for entry plugins now we",
    "start": "969670",
    "end": "979600"
  },
  {
    "text": "will look at the entry storage with as your file demo here I have a three node",
    "start": "979600",
    "end": "988120"
  },
  {
    "text": "cluster with one master and two workers both workers are Windows 2019 hi this is",
    "start": "988120",
    "end": "995050"
  },
  {
    "text": "on as your IKS service I have I'm using",
    "start": "995050",
    "end": "1001139"
  },
  {
    "text": "a KS engine and applying kubernetes 114 and we the part that I am going to be",
    "start": "1001139",
    "end": "1007740"
  },
  {
    "text": "using for I'm basically going to dynamically provisioned volumes and the",
    "start": "1007740",
    "end": "1012779"
  },
  {
    "text": "part I am going to be using to show that it can actually mount those pd's is a sequel server pod",
    "start": "1012779",
    "end": "1020750"
  },
  {
    "text": "so here you can see that my master is a",
    "start": "1033730",
    "end": "1039130"
  },
  {
    "text": "Ubuntu 1604 and I have two workers",
    "start": "1039130",
    "end": "1046709"
  },
  {
    "text": "they're both windows server data center",
    "start": "1047909",
    "end": "1053100"
  },
  {
    "text": "now I'm going to show the storage classes that are available so I actually",
    "start": "1054299",
    "end": "1060039"
  },
  {
    "text": "deployed this as your file storage class earlier let's look at what that looks",
    "start": "1060039",
    "end": "1066100"
  },
  {
    "text": "like",
    "start": "1066100",
    "end": "1068370"
  },
  {
    "text": "so notice that this the provisioner is basically entry the the region you can",
    "start": "1072870",
    "end": "1080320"
  },
  {
    "text": "tell that is the main aiming convention has kubernetes dot io as a prefix which means that it's an entry plugin and",
    "start": "1080320",
    "end": "1088679"
  },
  {
    "text": "let's apply",
    "start": "1091590",
    "end": "1098908"
  },
  {
    "text": "a PVC",
    "start": "1101690",
    "end": "1105639"
  },
  {
    "text": "looks like I forgot to leave the baby",
    "start": "1114880",
    "end": "1120530"
  },
  {
    "text": "she",
    "start": "1120530",
    "end": "1122830"
  },
  {
    "text": "okay what I can do is create another",
    "start": "1190560",
    "end": "1195080"
  },
  {
    "text": "okay so I created another one cuz uh",
    "start": "1227460",
    "end": "1231710"
  },
  {
    "text": "yeah okay so I created as your - file - so let's see",
    "start": "1232700",
    "end": "1239840"
  },
  {
    "text": "okay so the second PvE got created just now that's the PV if you look in let's",
    "start": "1244080",
    "end": "1261120"
  },
  {
    "text": "also change the part to use the new",
    "start": "1261120",
    "end": "1266690"
  },
  {
    "text": "claiming",
    "start": "1272180",
    "end": "1275180"
  },
  {
    "text": "so we just created the two PV and PV C we saw that the PV got created now we're",
    "start": "1285210",
    "end": "1291730"
  },
  {
    "text": "gonna see if the pod",
    "start": "1291730",
    "end": "1294870"
  },
  {
    "text": "yeah okay so sequence over to let's look to see",
    "start": "1316420",
    "end": "1325670"
  },
  {
    "text": "what's happening yeah okay so the part",
    "start": "1325670",
    "end": "1334620"
  },
  {
    "text": "got created and it's running which is good let's look at the man section here",
    "start": "1334620",
    "end": "1343340"
  },
  {
    "text": "so we can see that the man section here shows that we were able to mount from as",
    "start": "1343340",
    "end": "1351450"
  },
  {
    "text": "your volume into C data it mean within the container and",
    "start": "1351450",
    "end": "1357559"
  },
  {
    "text": "so that's the that's that's basically the TV that just got provision in the",
    "start": "1378810",
    "end": "1384990"
  },
  {
    "text": "back end right now so with that we can",
    "start": "1384990",
    "end": "1390090"
  },
  {
    "text": "see that as your file entry actually",
    "start": "1390090",
    "end": "1395790"
  },
  {
    "text": "works today and I'd like to call John to",
    "start": "1395790",
    "end": "1404100"
  },
  {
    "text": "actually continue with external provisioning and CSI information all",
    "start": "1404100",
    "end": "1411090"
  },
  {
    "text": "right thank you just like to switch laptops or a quick",
    "start": "1411090",
    "end": "1418039"
  },
  {
    "text": "all right so initial shot us how entry plugins work and she mentioned also that our external provisioners exists so it's",
    "start": "1469690",
    "end": "1476659"
  },
  {
    "text": "not a prisoner's basically of course cute containers didn't want to have every every single storage plugin that",
    "start": "1476659",
    "end": "1483519"
  },
  {
    "text": "anyone is ever gonna write into the cube codebase that would be bloated reviews",
    "start": "1483519",
    "end": "1489320"
  },
  {
    "text": "would be horrible and so they come they came up with a first idea to try and make it possible to write out of tree",
    "start": "1489320",
    "end": "1495710"
  },
  {
    "text": "storage plugins and so that was external provisioners so baby the basic idea for",
    "start": "1495710",
    "end": "1501320"
  },
  {
    "text": "external partners is you have a national process that's running and when when a",
    "start": "1501320",
    "end": "1506919"
  },
  {
    "text": "person volume claim comes in the person of the person one controller if it",
    "start": "1506919",
    "end": "1512809"
  },
  {
    "text": "doesn't know the provision that it's supposed to be provisioned by just Flags it and that's it it just waits for the",
    "start": "1512809",
    "end": "1518450"
  },
  {
    "text": "external process to come pick it up and actually prove it in the volume and so the external company on the right is the",
    "start": "1518450",
    "end": "1524720"
  },
  {
    "text": "partner actually does that so the entry plug-in at this point delegates created and delete operations to the external",
    "start": "1524720",
    "end": "1531649"
  },
  {
    "text": "provisioners and the next presenter then returns a PD object and that goes back",
    "start": "1531649",
    "end": "1539539"
  },
  {
    "text": "to the IP I master the iPad master takes care of the attach and detach operations",
    "start": "1539539",
    "end": "1545029"
  },
  {
    "text": "so the PV object has to be one of the entry ones and then the amount in",
    "start": "1545029",
    "end": "1550220"
  },
  {
    "text": "unmount volumes can be delegated to a flex volume plugin flexible in plugin is really just a process running on the",
    "start": "1550220",
    "end": "1556340"
  },
  {
    "text": "worker and that's basically the architecture for for this new model that",
    "start": "1556340",
    "end": "1563289"
  },
  {
    "text": "cube came up with so for Windows there's really two sorry there's really two flex",
    "start": "1563289",
    "end": "1572059"
  },
  {
    "text": "volume plugins today that exist for a Samba a nice cozy sample file system and I scuzzy for block devices and I'm gonna",
    "start": "1572059",
    "end": "1579289"
  },
  {
    "text": "show you today a proof of concept for dynamic provisioning with external three generous for ice cozy and so let's see",
    "start": "1579289",
    "end": "1586309"
  },
  {
    "text": "how that works so be patient with me because I have to help to hold my mic at",
    "start": "1586309",
    "end": "1594049"
  },
  {
    "text": "the same time so I have a very simple cube cluster thank you",
    "start": "1594049",
    "end": "1600889"
  },
  {
    "text": "a very simple cube cluster with a gesture master and I'm a Windows worker and ahead of time I deployed an external",
    "start": "1600889",
    "end": "1608899"
  },
  {
    "text": "perimeter so if we go look at that IQ get all that's the solution it's running",
    "start": "1608899",
    "end": "1616519"
  },
  {
    "text": "I made the manifest files available in the hub I'll give you the link register if you want to go look at it but the",
    "start": "1616519",
    "end": "1622070"
  },
  {
    "text": "interesting part is the Suraj class so we have this one storage class here that is a storage bag that targets target the",
    "start": "1622070",
    "end": "1630230"
  },
  {
    "text": "Icicle server that I have running and if I deploy this manifest so that's a",
    "start": "1630230",
    "end": "1640879"
  },
  {
    "text": "really simple pot that's running Microsoft server core does nothing just waits and it has one PVC and that PVC",
    "start": "1640879",
    "end": "1649610"
  },
  {
    "text": "references a PVC that ended that didn't define right above if I can get my SSH",
    "start": "1649610",
    "end": "1656330"
  },
  {
    "text": "to work there we go that's yeah PVC that got defined before",
    "start": "1656330",
    "end": "1661639"
  },
  {
    "text": "and the important part here is the storage class that we define again that's gonna be in my view tab so you",
    "start": "1661639",
    "end": "1667820"
  },
  {
    "text": "can go see the exact details and if we did play this everything had created I",
    "start": "1667820",
    "end": "1678820"
  },
  {
    "text": "have this new PVC that's pending hopefully shouldn't take too long it's the attending there we go",
    "start": "1678820",
    "end": "1687049"
  },
  {
    "text": "it's Pam so it's a hundred Meg's the capacity requested the access most requested and if you go look at the path",
    "start": "1687049",
    "end": "1694309"
  },
  {
    "text": "for running we have this new pod here containers start creating and now it's running and if I describe this pod nope",
    "start": "1694309",
    "end": "1703909"
  },
  {
    "text": "yeah I guess",
    "start": "1703909",
    "end": "1706570"
  },
  {
    "text": "if we go look at the mounts here we can see that we mounted this nice cozy",
    "start": "1713880",
    "end": "1719110"
  },
  {
    "text": "volume onto the pod thank you very much so this shows that you can do today",
    "start": "1719110",
    "end": "1725980"
  },
  {
    "text": "dynamic provisioning a nice cozy on Windows using a slightly modified version of the target D provisioner that",
    "start": "1725980",
    "end": "1733809"
  },
  {
    "text": "is out there and using flexible in plugins if you're interested in the",
    "start": "1733809",
    "end": "1739150"
  },
  {
    "text": "exact detail of demo sorry I went a little fast but this github repo as write up that really explains in details",
    "start": "1739150",
    "end": "1746049"
  },
  {
    "text": "how you can do the same so entry plugins",
    "start": "1746049",
    "end": "1754179"
  },
  {
    "text": "that was pretty much what started story storage and cube then there was external provisioners but you still don't have",
    "start": "1754179",
    "end": "1760179"
  },
  {
    "text": "that much flexibility you're still restricted to exacta but random binaries",
    "start": "1760179",
    "end": "1766419"
  },
  {
    "text": "being in your workers being where you expect them and having weird contract to fulfill so that was not really",
    "start": "1766419",
    "end": "1772450"
  },
  {
    "text": "satisfying and so the Coronas community came up with a CSI which is a standard that defines how plugin should behave in",
    "start": "1772450",
    "end": "1779679"
  },
  {
    "text": "the future so the mole for CSI is basically everything goes to CSI as",
    "start": "1779679",
    "end": "1784960"
  },
  {
    "text": "opposed to exon provisioners where you still had some some part that was in free the pv sources needed to be entry",
    "start": "1784960",
    "end": "1790360"
  },
  {
    "text": "and for for CSI you just have an external process that listens for for",
    "start": "1790360",
    "end": "1796000"
  },
  {
    "text": "that needs to register with the cube api and then that listens for g RPC messages",
    "start": "1796000",
    "end": "1803220"
  },
  {
    "text": "for all the operations that we care about so provisioning volumes creating them and then attaching them to the",
    "start": "1803220",
    "end": "1809500"
  },
  {
    "text": "worker nodes and then mounting them to the for mounting them on the path they",
    "start": "1809500",
    "end": "1815200"
  },
  {
    "text": "actually need them and there's two more",
    "start": "1815200",
    "end": "1820480"
  },
  {
    "text": "operation that are in alpha state right now for a backup for being able to backup running running CSI disk and for",
    "start": "1820480",
    "end": "1828520"
  },
  {
    "text": "restoring that backup but that's really just as I support for now so what a CSI plugin really needs to do",
    "start": "1828520",
    "end": "1836290"
  },
  {
    "text": "it needs to be able to register itself with the API and the cube layer the worker notes in me and then on the",
    "start": "1836290",
    "end": "1843399"
  },
  {
    "text": "worker nodes it needs to be able to make these calls to the workers operating system it needs to be able to mount",
    "start": "1843399",
    "end": "1849640"
  },
  {
    "text": "volumes on that host that are accessible to other processes in the same house typically the processes are going to be",
    "start": "1849640",
    "end": "1855909"
  },
  {
    "text": "running and the PO that you care about and if you look at the seat I plugin that exists today",
    "start": "1855909",
    "end": "1861299"
  },
  {
    "text": "they they all continued rise because you just want cube to be able to run your",
    "start": "1861299",
    "end": "1866980"
  },
  {
    "text": "stuff so they all continue eyes and now I'll pretty much do this operation the same way so the way the register is",
    "start": "1866980",
    "end": "1874360"
  },
  {
    "text": "using a sidecar that Kubek Ramirez provides and so they register your unique socket talking to a sidecar -",
    "start": "1874360",
    "end": "1881770"
  },
  {
    "text": "makes its call to the US they need to run in a privileged mode and to be able to mount volumes on the hosts that are",
    "start": "1881770",
    "end": "1887890"
  },
  {
    "text": "going to be accessible to other parts they need to they use one propagation on docker and the problem with Windows is",
    "start": "1887890",
    "end": "1895659"
  },
  {
    "text": "that you don't have privileged support and you don't have mana propagation so",
    "start": "1895659",
    "end": "1900820"
  },
  {
    "text": "you can't really write CSI plugins the right way on Windows today and that's",
    "start": "1900820",
    "end": "1907840"
  },
  {
    "text": "why I say support for Windows is really very much a work in progress and",
    "start": "1907840",
    "end": "1913140"
  },
  {
    "text": "Microsoft tells us that privileged privileged well is not gonna be",
    "start": "1913140",
    "end": "1918520"
  },
  {
    "text": "supporting Windows before 2020 at best and we're still trying to get them to implement Mon propagation so in the",
    "start": "1918520",
    "end": "1925029"
  },
  {
    "text": "meantime we have to come up with a solution for that and basically the two main ideas we have today is either",
    "start": "1925029",
    "end": "1932559"
  },
  {
    "text": "saying okay like you can't write suicide plug in the windows in a container it's just not possible you have to do a house",
    "start": "1932559",
    "end": "1938320"
  },
  {
    "text": "process or you still can write in a container and somehow workaround the",
    "start": "1938320",
    "end": "1944830"
  },
  {
    "text": "problems that we that we talked about so these solutions the first solution is",
    "start": "1944830",
    "end": "1950140"
  },
  {
    "text": "just saying okay I like sorry you can't use containers for this you just have to run a binary that's gonna be running on",
    "start": "1950140",
    "end": "1956140"
  },
  {
    "text": "the host and that comes to the number of problems because that means you can't",
    "start": "1956140",
    "end": "1961720"
  },
  {
    "text": "register using the sidecar because you can't talk the UNIX socket of a container from the host",
    "start": "1961720",
    "end": "1967400"
  },
  {
    "text": "and and you also have the problem that you need to somehow get this binary in",
    "start": "1967400",
    "end": "1973190"
  },
  {
    "text": "your workers that that's one be able won't be able to be handled by cube you",
    "start": "1973190",
    "end": "1978200"
  },
  {
    "text": "so you need to package it distributes elf and the lifecycle of the process is going to be in different from cube too",
    "start": "1978200",
    "end": "1983420"
  },
  {
    "text": "so you can have to somehow make sure it restarts if it crashes you're gonna have",
    "start": "1983420",
    "end": "1988550"
  },
  {
    "text": "to in all the logs yourself that doesn't seem like a great solution so the second",
    "start": "1988550",
    "end": "1994940"
  },
  {
    "text": "option is to somehow still run containers so that's cool because I mean you have cube there after all so that's",
    "start": "1994940",
    "end": "2001150"
  },
  {
    "text": "a good way to make sure everything runs and to deploy things you don't have to reinvent the wheel for that you can use",
    "start": "2001150",
    "end": "2007059"
  },
  {
    "text": "the register sidecar for this and all the distribution lifecycle is going to",
    "start": "2007059",
    "end": "2012640"
  },
  {
    "text": "be handled by cube and so the problem is how do you how do you get around the lack of pretty much support and",
    "start": "2012640",
    "end": "2017980"
  },
  {
    "text": "multiplication there's two ideas for this the first one is saying okay like the",
    "start": "2017980",
    "end": "2024190"
  },
  {
    "text": "CSI blog in itself is going to be an unprivileged container but as part of kubernetes we're gonna ship a binary",
    "start": "2024190",
    "end": "2030880"
  },
  {
    "text": "that's gonna be basically a house proxy for sis calls to the host so that would",
    "start": "2030880",
    "end": "2037960"
  },
  {
    "text": "be just a raw binary that runs as route on the worker and that exposes the",
    "start": "2037960",
    "end": "2043690"
  },
  {
    "text": "windows name pipe that the CSI parts can connect to and makes its calls through",
    "start": "2043690",
    "end": "2048760"
  },
  {
    "text": "that binary that comes with a number of problems so the first one would be that",
    "start": "2048760",
    "end": "2053770"
  },
  {
    "text": "of course this proxy would have an api that we need to version and maintain backward compatibility across versions",
    "start": "2053770",
    "end": "2059710"
  },
  {
    "text": "and that sounds painful and there's also security concerns you want to make sure that the access to",
    "start": "2059710",
    "end": "2066850"
  },
  {
    "text": "this name pipe is gonna be restricted to only the CSI pods and not any random",
    "start": "2066850",
    "end": "2072040"
  },
  {
    "text": "parts can talk to them that can be solved in part by our back policies but",
    "start": "2072040",
    "end": "2077050"
  },
  {
    "text": "there's still more potential issues to think about there and the second option to say okay like we're still gonna run",
    "start": "2077050",
    "end": "2083110"
  },
  {
    "text": "in containers so that we can leverage what Cube knows how to do it's basically a hack saying okay we're gonna change",
    "start": "2083110",
    "end": "2090940"
  },
  {
    "text": "container D to be able to pretend that we were in a container to run with all",
    "start": "2090940",
    "end": "2097270"
  },
  {
    "text": "the semantics and the external appearance of a container but actually just processing the host so that would be a",
    "start": "2097270",
    "end": "2103680"
  },
  {
    "text": "hack at the continuity level and and that would allow us to use all the goodies that come with cube promise of",
    "start": "2103680",
    "end": "2110520"
  },
  {
    "text": "course it's really hacky and it might resolve in very poor user experience",
    "start": "2110520",
    "end": "2115590"
  },
  {
    "text": "because you're gonna tell you hey like this is pretty much if on Windows and yeah sure but is not a container anymore",
    "start": "2115590",
    "end": "2121850"
  },
  {
    "text": "so we're not really sure what to do there there's no real consensus yep",
    "start": "2121850",
    "end": "2127110"
  },
  {
    "text": "so if you have an opinion and you're interested in this please do come to cig",
    "start": "2127110",
    "end": "2132600"
  },
  {
    "text": "Windows community calls or join the discussion there we have calls every",
    "start": "2132600",
    "end": "2138240"
  },
  {
    "text": "Tuesdays at 9:30 a.m. PST and while we're in the subjective community I'd",
    "start": "2138240",
    "end": "2144000"
  },
  {
    "text": "like to thank deep debris from docker has been working hard and this problem",
    "start": "2144000",
    "end": "2150720"
  },
  {
    "text": "set aside for Windows and the two chairs of the sig Windows interest group Patrick Lang for Microsoft and Michael",
    "start": "2150720",
    "end": "2158100"
  },
  {
    "text": "Michael from VMware and you know in summary you can use today entry and five",
    "start": "2158100",
    "end": "2164610"
  },
  {
    "text": "million plugins you can also use some provision this to some extent",
    "start": "2164610",
    "end": "2169770"
  },
  {
    "text": "like that's the proof of concept I showed you and CSI plugins for Windows should happen at some point in the",
    "start": "2169770",
    "end": "2175890"
  },
  {
    "text": "future but they're not yeah they're not there yet and yeah that's pretty much all we have today",
    "start": "2175890",
    "end": "2181760"
  },
  {
    "text": "any question",
    "start": "2181760",
    "end": "2185180"
  },
  {
    "text": "all right [Applause]",
    "start": "2192220",
    "end": "2198659"
  }
]