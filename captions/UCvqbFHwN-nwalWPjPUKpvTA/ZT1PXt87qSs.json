[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "welcome to the cluster api deep dive session um first things first class api is a sub",
    "start": "399",
    "end": "6799"
  },
  {
    "text": "project of sick cluster life cycle and today i'm here with jason please",
    "start": "6799",
    "end": "11920"
  },
  {
    "text": "introduce us thank you marcel my name is jason to tibbers and i'm one of the maintainers",
    "start": "11920",
    "end": "17440"
  },
  {
    "text": "for the cluster api project and i'm currently at equinix metal helping define cloud native infrastructure management for kubernetes",
    "start": "17440",
    "end": "24160"
  },
  {
    "text": "clusters thank you very much jason and i'm marcel muller i'm a platform engineer at",
    "start": "24160",
    "end": "29599"
  },
  {
    "text": "transform i'm also a cluster api contributor um you can find me on twitter here so let's get into it first things first",
    "start": "29599",
    "end": "37280"
  },
  {
    "start": "35000",
    "end": "69000"
  },
  {
    "text": "let's go over the agenda um so in the beginning i want to give a quick overview over why cluster api and what",
    "start": "37280",
    "end": "45200"
  },
  {
    "text": "are the problems we are trying to solve then we talk a bit about um controller managers and the crds that are currently",
    "start": "45200",
    "end": "51600"
  },
  {
    "text": "provided by cluster api and kind of how they work together then we go on to a demo provided by uh",
    "start": "51600",
    "end": "57440"
  },
  {
    "text": "jason where we look at a more on real world use case then go into like",
    "start": "57440",
    "end": "62879"
  },
  {
    "text": "roadmap for the um cluster api project and finally how you can get involved so let's jump",
    "start": "62879",
    "end": "68400"
  },
  {
    "text": "right in why cluster api um i've narrowed it down to a few points here but obviously",
    "start": "68400",
    "end": "74799"
  },
  {
    "start": "69000",
    "end": "211000"
  },
  {
    "text": "there's a lot more to talk about if we get into like the depth of why we want to do cluster api the first",
    "start": "74799",
    "end": "80000"
  },
  {
    "text": "main thing is that cluster life cycle management is difficult so cluster lifecycle management means not",
    "start": "80000",
    "end": "86720"
  },
  {
    "text": "only the creation of kubernetes clusters but their whole life cycle so from creation to eventual upgrades expansion or making",
    "start": "86720",
    "end": "93920"
  },
  {
    "text": "them smaller again and then finally deletion and that is a very difficult problem to tackle because",
    "start": "93920",
    "end": "99439"
  },
  {
    "text": "has very many varieties and facets that need to be handled",
    "start": "99439",
    "end": "104640"
  },
  {
    "text": "throughout the life cycle of a kubernetes cluster as you might know and um so cluster api really tries to",
    "start": "104640",
    "end": "110880"
  },
  {
    "text": "encompass the whole life cycle management and not only creation or not only some parts of lifecycle management",
    "start": "110880",
    "end": "117280"
  },
  {
    "text": "additionally class api aims to provide building blocks for higher level",
    "start": "117280",
    "end": "122399"
  },
  {
    "text": "or higher order functionality so that means that cluster api tries to set a level of groundwork",
    "start": "122399",
    "end": "130479"
  },
  {
    "text": "which can then be used for other technologies or components to build on top of that so maybe features that could be built on",
    "start": "130479",
    "end": "138160"
  },
  {
    "text": "top would be more automation for auto scaling or better repair and upgrade functionalities while cluster api mainly",
    "start": "138160",
    "end": "145599"
  },
  {
    "text": "is focused on we want to have this core functionality of cluster lifecycle",
    "start": "145599",
    "end": "150800"
  },
  {
    "text": "management and we want to provide building blocks that others then can build on top of and then finally a point i want to",
    "start": "150800",
    "end": "156879"
  },
  {
    "text": "highlight here is the cluster api aims to to have a design that's centered around on interchangeable components",
    "start": "156879",
    "end": "163440"
  },
  {
    "text": "so that we can have many different for example infrastructure providers",
    "start": "163440",
    "end": "168560"
  },
  {
    "text": "supported by having the complete infrastructure part of cluster api be interchangeable so you",
    "start": "168560",
    "end": "174560"
  },
  {
    "text": "can have either one infrastructure provider or you can have a different infrastructure provider and cluster api kind of gives you a nice",
    "start": "174560",
    "end": "181680"
  },
  {
    "text": "api to make that interchangeable and allow the community and to implement different um",
    "start": "181680",
    "end": "187280"
  },
  {
    "text": "for example infrastructure providers but that's also the same for for example bootstrap so there",
    "start": "187280",
    "end": "192480"
  },
  {
    "text": "can be different bootstrap providers that bootstrap nodes in different ways and cluster api",
    "start": "192480",
    "end": "198159"
  },
  {
    "text": "aims to give a nice interface to implement these different providers to an extent so really the",
    "start": "198159",
    "end": "204720"
  },
  {
    "text": "interchangeability is in the focus and obviously that also is for control plane management and other possible api from here i want",
    "start": "204720",
    "end": "212319"
  },
  {
    "start": "211000",
    "end": "360000"
  },
  {
    "text": "to quickly go over how cluster api looks like and how does it work first",
    "start": "212319",
    "end": "219519"
  },
  {
    "text": "from a high level and then we will go deeper into the individual components and controller",
    "start": "219519",
    "end": "224879"
  },
  {
    "text": "managers so from a very very high level we can see that on the left hand we have a user who",
    "start": "224879",
    "end": "230720"
  },
  {
    "text": "supplies crs so on custom resources to the custom resource definitions that",
    "start": "230720",
    "end": "236560"
  },
  {
    "text": "cluster api kind of defines these are then supplied by the user to the management cluster we",
    "start": "236560",
    "end": "243360"
  },
  {
    "text": "have a cli that's called cluster ctl to make generating vcrs easier but in",
    "start": "243360",
    "end": "249280"
  },
  {
    "text": "general you can just do it with cube ctl inside this management cluster there are",
    "start": "249280",
    "end": "254400"
  },
  {
    "text": "then controller managers which in turn um actually manage the",
    "start": "254400",
    "end": "259840"
  },
  {
    "text": "lifecycle of these workload clusters we see on the right so we have components running in the management cluster which the user",
    "start": "259840",
    "end": "266080"
  },
  {
    "text": "interacts with and those result in workload clusters which are managed by the management",
    "start": "266080",
    "end": "271919"
  },
  {
    "text": "cluster seems pretty straightforward so far if we take a deeper look now we can also",
    "start": "271919",
    "end": "278080"
  },
  {
    "text": "realize that okay as i mentioned before we have interchangeable components that also means in the management cluster",
    "start": "278080",
    "end": "284800"
  },
  {
    "text": "we can have for example multiple infrastructure providers which allow us to manage workload clusters on different",
    "start": "284800",
    "end": "291040"
  },
  {
    "text": "infrastructure for example here i just took some examples of the available infrastructure providers",
    "start": "291040",
    "end": "296639"
  },
  {
    "text": "we could have one workload cluster on azure one workload class on a v-sphere and one workbook just on aws",
    "start": "296639",
    "end": "304400"
  },
  {
    "text": "so that is all possible through this declarative approach and this approach of having um these",
    "start": "304400",
    "end": "310080"
  },
  {
    "text": "controller managers and this management inside the management cluster from here let's take a deeper look",
    "start": "310080",
    "end": "316479"
  },
  {
    "text": "inside how the management cluster works internally or what's going on inside there because currently we just define",
    "start": "316479",
    "end": "322240"
  },
  {
    "text": "it as kind of a black box that does all the work files and we can see that cluster api defines",
    "start": "322240",
    "end": "329039"
  },
  {
    "text": "currently four major controller managers which handle basically the crs and the",
    "start": "329039",
    "end": "335520"
  },
  {
    "text": "reconsolation of these crs and then create and manage the lifecycle of the workload",
    "start": "335520",
    "end": "340880"
  },
  {
    "text": "classes these four controller managers are the core controller manager the bootstrap controller manager the",
    "start": "340880",
    "end": "346479"
  },
  {
    "text": "infrastructure controller manager and the control plane controller manager now we can take a deeper look into each",
    "start": "346479",
    "end": "352800"
  },
  {
    "text": "individual controller manager to kind of explain um the structure behind cluster api and how they work",
    "start": "352800",
    "end": "359199"
  },
  {
    "text": "starting off with a core controller manager each block you see here is one cr or one crd which is reconciled",
    "start": "359199",
    "end": "367759"
  },
  {
    "start": "360000",
    "end": "713000"
  },
  {
    "text": "by the core controller manager and therefore each block is also managed by one",
    "start": "367759",
    "end": "373919"
  },
  {
    "text": "controller that's running inside the core controller manager the first block we see here for example",
    "start": "373919",
    "end": "379360"
  },
  {
    "text": "is the cluster block which is just a general definition of",
    "start": "379360",
    "end": "384479"
  },
  {
    "text": "water clusters it contains some metadata about the workload cluster we are managing so",
    "start": "384479",
    "end": "389759"
  },
  {
    "text": "for example that can be the name of the workload cluster is stored in the cid that's just called the cluster crd",
    "start": "389759",
    "end": "396160"
  },
  {
    "text": "you know fcr in this case if it's the instance um and we can also see that we have some um",
    "start": "396160",
    "end": "402960"
  },
  {
    "text": "crds that are focused around machines and here you can see an interesting pattern that is kind of",
    "start": "402960",
    "end": "408240"
  },
  {
    "text": "similar to how kubernetes does it so we see a machine deployment a machine set and a machine and you should very easily",
    "start": "408240",
    "end": "414720"
  },
  {
    "text": "be able to tell that this is similar to in kubernetes you have a deployment you have a replica set and you have a pot",
    "start": "414720",
    "end": "421120"
  },
  {
    "text": "so this is very much a one-to-one relation between the concepts at least and we can very easily also see the",
    "start": "421120",
    "end": "427680"
  },
  {
    "text": "relation here that a machine deployment has a machine set and a machine set contains many machines",
    "start": "427680",
    "end": "434319"
  },
  {
    "text": "and then additionally we also have um the machine health check which is kind of a way to specify how",
    "start": "434319",
    "end": "440720"
  },
  {
    "text": "does the core controller realize that the machine is not healthy or how does it determine if a machine is healthy or",
    "start": "440720",
    "end": "446400"
  },
  {
    "text": "needs and needs to be replaced and for example the machine set um but so far we've only the core provider",
    "start": "446400",
    "end": "453280"
  },
  {
    "text": "is um only showing us um concepts basically or um the glue behind between the",
    "start": "453280",
    "end": "461039"
  },
  {
    "text": "interchangeable components because the core component is itself not interchangeable so when",
    "start": "461039",
    "end": "466160"
  },
  {
    "text": "you're using cluster api the core controller manager is always the same while all the others we talk",
    "start": "466160",
    "end": "471680"
  },
  {
    "text": "about next are interchangeable and the first one i want to talk about is the bootstrap controller manager now",
    "start": "471680",
    "end": "477440"
  },
  {
    "text": "and now we can see here that um bootstrap is handled at least in this example in two places",
    "start": "477440",
    "end": "483039"
  },
  {
    "text": "and one place on the machine set and then the machine because the machine needs bootstrap data",
    "start": "483039",
    "end": "488400"
  },
  {
    "text": "which is provided by the bootstrap controller manager to actually get started and we can see here again",
    "start": "488400",
    "end": "495039"
  },
  {
    "text": "that it follows kind of the um example given by vanilla kubernetes that",
    "start": "495039",
    "end": "500400"
  },
  {
    "text": "the machine set has a bootstrap template where the machine has a bootstrap config which is basically an",
    "start": "500400",
    "end": "506080"
  },
  {
    "text": "instance of the bootstrap template so kind of again similar to how there's",
    "start": "506080",
    "end": "511840"
  },
  {
    "text": "a pod template and the part is then just basically the actual instance of a pot template um",
    "start": "511840",
    "end": "518719"
  },
  {
    "text": "and from here we can now also continue on to infrastructure and here we see the first",
    "start": "518719",
    "end": "525200"
  },
  {
    "text": "um difference a little bit so we again have an infrastructure machine which is actually responsible for",
    "start": "525200",
    "end": "531279"
  },
  {
    "text": "spinning up the actual infrastructure machine so if we go to a real world example for example on aws",
    "start": "531279",
    "end": "538160"
  },
  {
    "text": "infrastructure machine the controller manager contains the controller that handles infrastructure machine",
    "start": "538160",
    "end": "543920"
  },
  {
    "text": "and that controller will be responsible for every infrastructure machine on the left is created",
    "start": "543920",
    "end": "548959"
  },
  {
    "text": "to create an actual machine in your infrastructure provider for example on aws it would spin up an",
    "start": "548959",
    "end": "555120"
  },
  {
    "text": "ec2 instance with the bootstrap data that the bootstrap controller has provided in the bootstrap",
    "start": "555120",
    "end": "562080"
  },
  {
    "text": "config so we can now see that these components are interchangeable and that's kind of logical and we also",
    "start": "562080",
    "end": "569360"
  },
  {
    "text": "see on the right that we again have an info machine template what's a little bit different now is that we also see that there's an",
    "start": "569360",
    "end": "574880"
  },
  {
    "text": "infrastructure cluster um what that or why that's necessary is very simple to explain",
    "start": "574880",
    "end": "580959"
  },
  {
    "text": "there might be infrastructure that is not tied to a machine inside a humanities cluster but it's",
    "start": "580959",
    "end": "587519"
  },
  {
    "text": "just like relevant to the cluster or needs to be there for the cluster to exist so clusters not only a set of machines",
    "start": "587519",
    "end": "594560"
  },
  {
    "text": "for example the infrastructure cluster might create um",
    "start": "594560",
    "end": "600560"
  },
  {
    "text": "different subnets for the machines to then live in or some network setup or some load",
    "start": "600560",
    "end": "607519"
  },
  {
    "text": "balancers which are just unique to one cluster so one cluster might only have like one set of these um",
    "start": "607519",
    "end": "614720"
  },
  {
    "text": "but they need to be created as soon as the cluster is created and they're not directly tied to a machine so you can't",
    "start": "614720",
    "end": "620160"
  },
  {
    "text": "just say for every machine i also create a load balance so that's that's usually not how it works um so so that's why we",
    "start": "620160",
    "end": "626640"
  },
  {
    "text": "need the infrastructure cluster as well and from there we can now come to the final component or the final controller",
    "start": "626640",
    "end": "632880"
  },
  {
    "text": "manager i want to mention here which is the control plane why is the control plane",
    "start": "632880",
    "end": "638800"
  },
  {
    "text": "kind of not just managed like a machine deployment that's very easy to tell if we look into",
    "start": "638800",
    "end": "644800"
  },
  {
    "text": "an example from kubernetes you know that a deployment you can just scale to zero",
    "start": "644800",
    "end": "651200"
  },
  {
    "text": "now for machine deployment in theory you could do the same you could scale it to zero or scale it to one or skeleton two but a control plane um",
    "start": "651200",
    "end": "659360"
  },
  {
    "text": "is usually backed by lcds so to have the stateful storage of lcd",
    "start": "659360",
    "end": "664480"
  },
  {
    "text": "for your master for your control plane you um are running these um these cities in",
    "start": "664480",
    "end": "670480"
  },
  {
    "text": "the background if you scale down your ad cities to zero well your data is kind of getting lost",
    "start": "670480",
    "end": "676320"
  },
  {
    "text": "and if you scale for example to two and then to one that might also not be such a good idea with ad city",
    "start": "676320",
    "end": "682480"
  },
  {
    "text": "so there are some very practical reasons to take out the control plane component",
    "start": "682480",
    "end": "687680"
  },
  {
    "text": "because it needs a different kind of management than for example just a machine deployment",
    "start": "687680",
    "end": "692880"
  },
  {
    "text": "and therefore its own interchangeable component and now we kind of have the full picture",
    "start": "692880",
    "end": "698000"
  },
  {
    "text": "of cluster api on a theoretical level of the controller managers that are running and the different crds that are",
    "start": "698000",
    "end": "704800"
  },
  {
    "text": "provided by cluster api and which cigs of these are completely replaceable which would be the bootstrap",
    "start": "704800",
    "end": "709920"
  },
  {
    "text": "infrastructure and control plane parts now json is going to give us a nice",
    "start": "709920",
    "end": "715360"
  },
  {
    "text": "little demo that shows this a bit more in action and in real life",
    "start": "715360",
    "end": "720639"
  },
  {
    "text": "thanks again marcel for this demo i'm going to actually create a kubernetes cluster on physical hardware that i have here",
    "start": "720720",
    "end": "726800"
  },
  {
    "text": "located with me in order to do that i'm going to leverage the tinkerbell project so what is the tinkerbell project it is",
    "start": "726800",
    "end": "734079"
  },
  {
    "start": "731000",
    "end": "750000"
  },
  {
    "text": "a cncf sandbox project that is looking to bring",
    "start": "734079",
    "end": "739120"
  },
  {
    "text": "cloud native infrastructure management into the data center similar to what kubernetes does for",
    "start": "739120",
    "end": "745040"
  },
  {
    "text": "applications tinkerbell is trying to do similar for the actual infrastructure in the data center",
    "start": "745040",
    "end": "751839"
  },
  {
    "start": "750000",
    "end": "829000"
  },
  {
    "text": "and how does it do this well there are several micro microservices that comprise what we call tinkerbell",
    "start": "751839",
    "end": "757360"
  },
  {
    "text": "the first is the actual tinkerbell service itself it's the underlying workflow engine this is the bit that actually lets you",
    "start": "757360",
    "end": "764079"
  },
  {
    "text": "define what hardware you want to manage with tinkerbell and allows you to find what we call templates and workflows and this is the",
    "start": "764079",
    "end": "770959"
  },
  {
    "text": "bit where you actually tell the hardware what you want it to do there's also the boot service",
    "start": "770959",
    "end": "776639"
  },
  {
    "text": "that provides dhcp and pixie booting services for the hardware this is what helps get the actual",
    "start": "776639",
    "end": "782959"
  },
  {
    "text": "infrastructure up and running into the tinker bell environment there's also a metadata service called",
    "start": "782959",
    "end": "788959"
  },
  {
    "text": "hegel and this allows you to actually define metadata on an instance similar to what",
    "start": "788959",
    "end": "794320"
  },
  {
    "text": "you would have in a public cloud provider you can define user data you can also define other attributes",
    "start": "794320",
    "end": "800720"
  },
  {
    "text": "and then you can actually query and get those attributes from the hardware itself",
    "start": "800720",
    "end": "806399"
  },
  {
    "text": "there's also the worker component and what this does is this is the bit that actually runs on",
    "start": "806399",
    "end": "812560"
  },
  {
    "text": "the hardware reaches out to the tinkerbell service and asks it what do i actually need to do what you",
    "start": "812560",
    "end": "819120"
  },
  {
    "text": "know do i have any active workflows what are the actions that comprise that workflow and that sort of thing",
    "start": "819120",
    "end": "829839"
  },
  {
    "start": "829000",
    "end": "894000"
  },
  {
    "text": "and how does it look when we start putting this together well um with the cluster api provider for",
    "start": "829920",
    "end": "835360"
  },
  {
    "text": "tinkerbell we provide the standard resources that you would expect out of a cluster api infrastructure provider we",
    "start": "835360",
    "end": "840720"
  },
  {
    "text": "have a tinkerbell cluster a tinkerbell machine and a tinkerbell template but we also have a shim layer in there",
    "start": "840720",
    "end": "847519"
  },
  {
    "text": "that provides a small abstraction layer on top of tinkerbella itself and exposes the",
    "start": "847519",
    "end": "853839"
  },
  {
    "text": "tinkerbell resources through the kubernetes api so we also have a hardware",
    "start": "853839",
    "end": "861680"
  },
  {
    "text": "template and a workflow resource and this allows us to specifically say which hardware out of",
    "start": "861680",
    "end": "868959"
  },
  {
    "text": "all the hardware that tinkerbell may be managing that we want to make available for cluster api",
    "start": "868959",
    "end": "875279"
  },
  {
    "text": "but it also allows us to simplify the reconciliation logic a little bit to avoid dealing with any impedance",
    "start": "875279",
    "end": "881040"
  },
  {
    "text": "mismatches that we would hit trying to put all of that directly in the core tinkerbell",
    "start": "881040",
    "end": "887040"
  },
  {
    "text": "provider controllers with that out of the way let me go ahead",
    "start": "887040",
    "end": "892560"
  },
  {
    "text": "and take you into my data center here on the right here is a small form factor",
    "start": "892560",
    "end": "897920"
  },
  {
    "start": "894000",
    "end": "1043000"
  },
  {
    "text": "box that's running the tinkerbell services itself and on the left are five small form factor machines",
    "start": "897920",
    "end": "906000"
  },
  {
    "text": "that are actually going to be the available hardware for our kubernetes cluster",
    "start": "906000",
    "end": "913839"
  },
  {
    "text": "all right so let's go ahead and get started if i come in here right now and use the tank command line i can go ahead",
    "start": "916000",
    "end": "921920"
  },
  {
    "text": "and see that i've already predefined the five hardware resources related to the hardware",
    "start": "921920",
    "end": "928320"
  },
  {
    "text": "and i have not yet defined any workflows or templates yet",
    "start": "929360",
    "end": "940000"
  },
  {
    "text": "that's expected because uh cluster api is going to go ahead and create those resources for me and if i",
    "start": "940000",
    "end": "946160"
  },
  {
    "text": "go ahead and look in here i don't yet have any cluster api related resources",
    "start": "946160",
    "end": "951600"
  },
  {
    "text": "or tinkerbell related resources defined yet in kubernetes either",
    "start": "951600",
    "end": "958160"
  },
  {
    "text": "now um to get started i need to go ahead and tell um create a hardware resource within",
    "start": "966560",
    "end": "974320"
  },
  {
    "text": "my kubernetes cluster so that the cluster api provider will know what hardware to use for that so that",
    "start": "974320",
    "end": "982000"
  },
  {
    "text": "uh the initial control plane instance is a predetermined machine i'm",
    "start": "982000",
    "end": "988399"
  },
  {
    "text": "actually only going to predefine one hardware resource right now and i will define the rest of them after",
    "start": "988399",
    "end": "995040"
  },
  {
    "text": "i've had that hardware defined you know assigned to that control plane so let's go ahead and do that well we",
    "start": "995040",
    "end": "1001680"
  },
  {
    "text": "can go ahead and look at what that looks like first and here we can see",
    "start": "1001680",
    "end": "1007199"
  },
  {
    "text": "we are defining a type of kind of hardware and um we're giving it a name of",
    "start": "1007199",
    "end": "1014399"
  },
  {
    "text": "just hw-a for now and uh most importantly is this id right here",
    "start": "1014399",
    "end": "1020160"
  },
  {
    "text": "and that matches up to the actual id of the resource within tinkerbell itself so let's go ahead and create that",
    "start": "1020160",
    "end": "1028240"
  },
  {
    "text": "and let's go ahead and take a look at the resource now that we've created it",
    "start": "1031520",
    "end": "1039839"
  },
  {
    "start": "1043000",
    "end": "1242000"
  },
  {
    "text": "so now we can see there's actually more information than what we provided and that's because the",
    "start": "1044480",
    "end": "1050000"
  },
  {
    "text": "controller went ahead and reached out to tinkerbell and said tell me what you know about this uh hardware",
    "start": "1050000",
    "end": "1055280"
  },
  {
    "text": "with this id and we can see that in the status here we're pulling in",
    "start": "1055280",
    "end": "1060320"
  },
  {
    "text": "um what disks are defined on that device and we use this so that we can uh",
    "start": "1060320",
    "end": "1066080"
  },
  {
    "text": "basically install the uh pre-built image onto the right hardware device",
    "start": "1066080",
    "end": "1071840"
  },
  {
    "text": "and we see some information about um the network interfaces that are defined",
    "start": "1071840",
    "end": "1077440"
  },
  {
    "text": "for the machine and most importantly for our use case we see that in here netboot is",
    "start": "1077440",
    "end": "1083919"
  },
  {
    "text": "configured to allow pixie booting and uh to allow workflows and if either of these were",
    "start": "1083919",
    "end": "1090240"
  },
  {
    "text": "false this machine wouldn't actually pixie boot when the time comes so that's an important piece of this as",
    "start": "1090240",
    "end": "1096480"
  },
  {
    "text": "well so now that we've already defined the hardware let's go ahead and create our",
    "start": "1096480",
    "end": "1104240"
  },
  {
    "text": "cluster and i'm going to pre-define a few pieces of this here as well but let me go ahead and get",
    "start": "1104240",
    "end": "1109919"
  },
  {
    "text": "this started and go ahead and power on that hardware so that it can actually start",
    "start": "1109919",
    "end": "1114960"
  },
  {
    "text": "bootstrapping while i talk about that so while that's booting i can go ahead",
    "start": "1114960",
    "end": "1122160"
  },
  {
    "text": "and see uh from the command line here i've overridden the pod sider",
    "start": "1122160",
    "end": "1127520"
  },
  {
    "text": "and that's because the default pod sider that aligns with the calico default network configuration",
    "start": "1127520",
    "end": "1135840"
  },
  {
    "text": "will actually collide with the tinkerbell server that i have right here which is defined on",
    "start": "1135840",
    "end": "1141640"
  },
  {
    "text": "192.168.1.1 so i'm overriding that i'm also telling it that i only want one",
    "start": "1141640",
    "end": "1147440"
  },
  {
    "text": "control plane machine and i've set the workers to zero right now because i haven't predefined that hardware yet",
    "start": "1147440",
    "end": "1153760"
  },
  {
    "text": "and i'm also telling it that i want kubernetes version 1.18.15 and that'll come into play when we're trying to do",
    "start": "1153760",
    "end": "1160320"
  },
  {
    "text": "the image lookup and i'll get into that in a bit um so let's go ahead and take a look at what that created",
    "start": "1160320",
    "end": "1168960"
  },
  {
    "text": "so get cluster api here and you may see that there is some content going on on the",
    "start": "1169200",
    "end": "1175840"
  },
  {
    "text": "monitor behind me don't worry about it too much basically what it's doing at this point is it's basically pixie booting getting",
    "start": "1175840",
    "end": "1182480"
  },
  {
    "text": "into the tinkerbell environment and getting ready to run that the workflow that closer api created for it",
    "start": "1182480",
    "end": "1190000"
  },
  {
    "text": "so in here for these resources we can see that we do have a tinkerbell machine here now",
    "start": "1190000",
    "end": "1196160"
  },
  {
    "text": "and it is saying that it's ready and uh we do see that the instance id matches up with that id for the hardware",
    "start": "1196160",
    "end": "1202880"
  },
  {
    "text": "that we predefined um so that machine's now bootstrapping",
    "start": "1202880",
    "end": "1208000"
  },
  {
    "text": "and getting ready to go at the moment so um in addition to those resources we did also create some",
    "start": "1208000",
    "end": "1214559"
  },
  {
    "text": "tinkerbell resources as well so in addition to the hardware that we",
    "start": "1214559",
    "end": "1221120"
  },
  {
    "text": "defined earlier there is now a template and a workflow and um as i mentioned earlier the",
    "start": "1221120",
    "end": "1227200"
  },
  {
    "text": "template actually just kind of tells everything what to do in the workflow ties it all together",
    "start": "1227200",
    "end": "1232240"
  },
  {
    "text": "uh with the actual hardware so let's actually look at the workflow and see what's going on there",
    "start": "1232240",
    "end": "1240320"
  },
  {
    "start": "1242000",
    "end": "1603000"
  },
  {
    "text": "um so here what we can see is is um",
    "start": "1243600",
    "end": "1249520"
  },
  {
    "text": "basically in the spec of this workflow uh we see that it's referencing a specific hardware",
    "start": "1249520",
    "end": "1254720"
  },
  {
    "text": "uh the hwa one that we defined earlier and it's referencing this template and",
    "start": "1254720",
    "end": "1260080"
  },
  {
    "text": "this template is the one that it created um for bootstrapping this instance and",
    "start": "1260080",
    "end": "1265360"
  },
  {
    "text": "we can see that here in the status we see we now have actions defined for that and these actions are actually going to",
    "start": "1265360",
    "end": "1273120"
  },
  {
    "text": "feed into that workflow and say exactly what we want to do to actually bootstrap this instance into a kubernetes cluster",
    "start": "1273120",
    "end": "1282720"
  },
  {
    "text": "so the first action that we're going to do is uh using this image to this action and we're telling it that we want to",
    "start": "1282720",
    "end": "1290000"
  },
  {
    "text": "write the contents of this image url into uh this destination disk which is",
    "start": "1290000",
    "end": "1296880"
  },
  {
    "text": "the same one that was predefined so if i had specified the hardware with a different disk device",
    "start": "1296880",
    "end": "1303039"
  },
  {
    "text": "this would be different in this example and would write to the correct block device for",
    "start": "1303039",
    "end": "1308960"
  },
  {
    "text": "a different type of hardware so after it writes the contents of that",
    "start": "1308960",
    "end": "1314000"
  },
  {
    "text": "disk image to disk the next thing it's going to do is actually write a file to that disk as",
    "start": "1314000",
    "end": "1319679"
  },
  {
    "text": "well and the file that it's writing is uh basically uh and some additional",
    "start": "1319679",
    "end": "1325280"
  },
  {
    "text": "cloud init configuration um to make it work a little bit better so here we're telling it that we want to",
    "start": "1325280",
    "end": "1332960"
  },
  {
    "text": "use the data source the ec2 data source and we want to tell it not to use strict",
    "start": "1332960",
    "end": "1338559"
  },
  {
    "text": "id because the hegel metadata service is not exactly the same as ec2 so if we left",
    "start": "1338559",
    "end": "1345679"
  },
  {
    "text": "this as true it would fail and we're telling it to use this metadata url and this is a link local",
    "start": "1345679",
    "end": "1352480"
  },
  {
    "text": "address that i had configured earlier on the tinkerbell server and pointing at",
    "start": "1352480",
    "end": "1358080"
  },
  {
    "text": "the ego metadata service on port 5061 and",
    "start": "1358080",
    "end": "1364559"
  },
  {
    "text": "that's basically going to give it access to that user data that cluster api had set on that hardware for",
    "start": "1364559",
    "end": "1369840"
  },
  {
    "text": "us the next thing that we're going to see is that we've also defined a default user here with some pseudo access",
    "start": "1369840",
    "end": "1376799"
  },
  {
    "text": "and uh that gives us the ability so that um if we had wanted to with the cluster",
    "start": "1376799",
    "end": "1382320"
  },
  {
    "text": "that we created we could find an ssh key for this user or a password and then we would be able",
    "start": "1382320",
    "end": "1387679"
  },
  {
    "text": "to access this machine um if something had gone wrong uh",
    "start": "1387679",
    "end": "1393360"
  },
  {
    "text": "but i have trust that this is actually going to do the right thing so i haven't done that here",
    "start": "1393360",
    "end": "1398960"
  },
  {
    "text": "um so after throwing that cloud init configuration the next thing it's going to do is uh",
    "start": "1398960",
    "end": "1404559"
  },
  {
    "text": "it's going to use this uh k exec action and the k exec action is basically going to tell it to",
    "start": "1404559",
    "end": "1410320"
  },
  {
    "text": "boot into the kernel for the os image that we just wrote to the desk",
    "start": "1410320",
    "end": "1417520"
  },
  {
    "text": "so now at this point i believe that the machine is already bootstrapped into",
    "start": "1417520",
    "end": "1422640"
  },
  {
    "text": "the ubuntu instance but it's probably not run clouding it yet this hardware is",
    "start": "1422640",
    "end": "1427760"
  },
  {
    "text": "a little slow it's a few years old and doesn't have the fastest fastest discs",
    "start": "1427760",
    "end": "1433360"
  },
  {
    "text": "if this was a newer newer hardware and had nvme drives it would have been",
    "start": "1433360",
    "end": "1438720"
  },
  {
    "text": "bootstrapped already at this point but it looks like things are getting pretty close to bootstrapping there so",
    "start": "1438720",
    "end": "1445520"
  },
  {
    "text": "let's go ahead and get the cube config from that host",
    "start": "1445520",
    "end": "1450320"
  },
  {
    "text": "and let's go ahead and use that to try to get nodes",
    "start": "1451120",
    "end": "1459360"
  },
  {
    "text": "and i can see that i do actually have a node now at this point and the node is not ready so let's go",
    "start": "1459360",
    "end": "1465440"
  },
  {
    "text": "ahead and deploy uh psilium here and that'll go ahead and get the cni solution going",
    "start": "1465440",
    "end": "1472000"
  },
  {
    "text": "and as soon as the cni solution's up that node will change to a ready status but i don't want to quite wait for that",
    "start": "1472000",
    "end": "1478320"
  },
  {
    "text": "yet let's go ahead and create that additional hardware that uh i had mentioned",
    "start": "1478320",
    "end": "1487120"
  },
  {
    "text": "and i've already defined it in this test hardware to yaml file um so here we created hardware b c d and",
    "start": "1487120",
    "end": "1493760"
  },
  {
    "text": "e and that's corresponding to the other instances that i have there and let's go ahead and scale up that machine deployment now",
    "start": "1493760",
    "end": "1501840"
  },
  {
    "text": "so let's go ahead and scale it up to three so if i do a get cluster api now",
    "start": "1508400",
    "end": "1516480"
  },
  {
    "text": "i can see that now it is uh it is associated the three additional hardware resources",
    "start": "1519120",
    "end": "1525360"
  },
  {
    "text": "with those tinkerbell machines so i can see based on the",
    "start": "1525360",
    "end": "1530880"
  },
  {
    "text": "predetermined naming that i used it wants to use hardware b c and d so let's go ahead and get those",
    "start": "1530880",
    "end": "1536799"
  },
  {
    "text": "powered up",
    "start": "1536799",
    "end": "1542240"
  },
  {
    "text": "in just a little bit here um those instances will actually be booted up so um in addition let's go ahead and",
    "start": "1542240",
    "end": "1549679"
  },
  {
    "text": "take a look at the additional um tinkerbell resources that were created",
    "start": "1549679",
    "end": "1556640"
  },
  {
    "text": "and here we can see in addition to the five hardware devices that we've defined",
    "start": "1556640",
    "end": "1562159"
  },
  {
    "text": "we have the template and the workflow related to the control play machine that we previously bootstrapped",
    "start": "1562159",
    "end": "1567440"
  },
  {
    "text": "and we have similar workflows and templates defined for the uh three additional instances here and",
    "start": "1567440",
    "end": "1575200"
  },
  {
    "text": "uh you know the exact same process is going on except instead of doing a cube adm init this time it's doing a",
    "start": "1575200",
    "end": "1581679"
  },
  {
    "text": "join just for a worker node and in just a short while here we will",
    "start": "1581679",
    "end": "1587200"
  },
  {
    "text": "actually be able to see those nodes come up so let's go ahead and run that",
    "start": "1587200",
    "end": "1592960"
  },
  {
    "text": "get nodes one more time",
    "start": "1592960",
    "end": "1599840"
  },
  {
    "text": "all right and we can start to see that hardware coming up now so we can see that hardware bees already",
    "start": "1604640",
    "end": "1610559"
  },
  {
    "text": "starting to uh come up and i expect yep there's hardware d and um hardware c probably isn't very",
    "start": "1610559",
    "end": "1618720"
  },
  {
    "text": "far about behind either um so as these are coming up um the qubit em join uh has now",
    "start": "1618720",
    "end": "1626159"
  },
  {
    "text": "run at this point and now we're basically just waiting on the cni resources to finish",
    "start": "1626159",
    "end": "1632000"
  },
  {
    "text": "uh coming up before these nodes actually report ready",
    "start": "1632000",
    "end": "1637279"
  },
  {
    "text": "so that'll happen here in just a second but i don't think we need to go any",
    "start": "1637279",
    "end": "1642720"
  },
  {
    "text": "further so thanks a lot and back over to you marcel",
    "start": "1642720",
    "end": "1649520"
  },
  {
    "start": "1649000",
    "end": "1889000"
  },
  {
    "text": "thank you very much jason from here from the demo we now come back to the um",
    "start": "1650720",
    "end": "1657120"
  },
  {
    "text": "cluster api project so as i mentioned at the very beginning cluster api is a soft sub project of um sick cluster lifecycle",
    "start": "1657120",
    "end": "1665039"
  },
  {
    "text": "and from here i kind of want to talk about the road map and what our plans are for the future",
    "start": "1665039",
    "end": "1672320"
  },
  {
    "text": "so the next upcoming release will be v1 alpha 4 or version 0.4 in",
    "start": "1672320",
    "end": "1679120"
  },
  {
    "text": "most likely q2 2021 um the focus for this release is mostly on",
    "start": "1679120",
    "end": "1684480"
  },
  {
    "text": "ux and stability with inclusion of some more use cases i",
    "start": "1684480",
    "end": "1689520"
  },
  {
    "text": "have a selection here as well that we will go over um and previous cube cons if you've already seen the deep dives we've talked",
    "start": "1689520",
    "end": "1695919"
  },
  {
    "text": "about this quite a lot and there's now a lot of changes involved so i'm showing only a selection here",
    "start": "1695919",
    "end": "1701200"
  },
  {
    "text": "so the three um inclusions for this release i quickly want to talk about are",
    "start": "1701200",
    "end": "1706640"
  },
  {
    "text": "firstly the management cluster operator as we saw previously um there are a lot of crs involved for",
    "start": "1706640",
    "end": "1713679"
  },
  {
    "text": "creating a cluster and therefore there's also a lot of these controller managers involved",
    "start": "1713679",
    "end": "1718880"
  },
  {
    "text": "that need to kind of handle these gears and these controller managers also have web hooks to do validation and",
    "start": "1718880",
    "end": "1724320"
  },
  {
    "text": "mutation of the crs that you supply to them um deploying the stack of controller",
    "start": "1724320",
    "end": "1730000"
  },
  {
    "text": "managers for cluster api can be a little bit complex especially if you want to update the version of",
    "start": "1730000",
    "end": "1735440"
  },
  {
    "text": "cluster api or you want to kind of keep in touch like which versions are compatible and so on um the management cluster operator aims",
    "start": "1735440",
    "end": "1742480"
  },
  {
    "text": "to make this a little bit more simple so to make the deployment of the components of cluster api",
    "start": "1742480",
    "end": "1748080"
  },
  {
    "text": "more simple by having like an easy to use cr that then uh through the",
    "start": "1748080",
    "end": "1755279"
  },
  {
    "text": "management cluster operator deploys the different um controllers that are necessary um you",
    "start": "1755279",
    "end": "1761440"
  },
  {
    "text": "can kind of equate this to how promethos operator works so i assume most of you know from ethos",
    "start": "1761440",
    "end": "1767600"
  },
  {
    "text": "operator and prometheus operator really makes it easy to deploy pro methods in a",
    "start": "1767600",
    "end": "1772799"
  },
  {
    "text": "simple way by just giving a high level abstraction of what you need to deploy in the cr",
    "start": "1772799",
    "end": "1777919"
  },
  {
    "text": "and this is kind of the similar idea here to make really ux for actually running cluster api a",
    "start": "1777919",
    "end": "1784240"
  },
  {
    "text": "little bit easier then we have the externally managed infrastructure um",
    "start": "1784240",
    "end": "1789600"
  },
  {
    "text": "proposal or change which introduces a way for you to have",
    "start": "1789600",
    "end": "1794799"
  },
  {
    "text": "infrastructure which is not managed by cluster api but still represented in cluster api so",
    "start": "1794799",
    "end": "1800480"
  },
  {
    "text": "one example could be you have a subset of machines so all your machines are managed by some other infrastructure",
    "start": "1800480",
    "end": "1806480"
  },
  {
    "text": "and you can't interact with the life cycle of it but you still want to have the representation cluster api as like the machine crs",
    "start": "1806480",
    "end": "1814159"
  },
  {
    "text": "in your cluster api controller um management cluster and for that we introduced like this",
    "start": "1814159",
    "end": "1820399"
  },
  {
    "text": "concept of externally managed infrastructure so that the controllers of cluster api",
    "start": "1820399",
    "end": "1825760"
  },
  {
    "text": "do not start fighting with the infrastructure that is already managed by an outside system so that should support",
    "start": "1825760",
    "end": "1832240"
  },
  {
    "text": "more use cases in this area and then the final point i want to touch on here is um improved multi-tenancy",
    "start": "1832240",
    "end": "1839039"
  },
  {
    "text": "multi-tenancy in this context means that you for example on azure can have multiple azure",
    "start": "1839039",
    "end": "1845440"
  },
  {
    "text": "subscriptions and the workload clusters you create from your management clusters might end up in different subscriptions",
    "start": "1845440",
    "end": "1852240"
  },
  {
    "text": "so that you have one management cluster that for example spawns three workload clusters in three",
    "start": "1852240",
    "end": "1858080"
  },
  {
    "text": "different um subscriptions for azure and this is currently",
    "start": "1858080",
    "end": "1863840"
  },
  {
    "text": "not super easy to do so we are kind of overhauling it to improve the um",
    "start": "1863840",
    "end": "1869120"
  },
  {
    "text": "ux there and make it a little bit easier to use for um your basic users of cluster api and",
    "start": "1869120",
    "end": "1875679"
  },
  {
    "text": "in the bottom the slides are provided obviously there is also a link to see our full road map",
    "start": "1875679",
    "end": "1880720"
  },
  {
    "text": "if you want to get a full overview of um what all the changes will be in we",
    "start": "1880720",
    "end": "1886159"
  },
  {
    "text": "want alpha 4 or the plan changes and we will offer 4. from that i also want to quickly talk",
    "start": "1886159",
    "end": "1891919"
  },
  {
    "start": "1889000",
    "end": "2046000"
  },
  {
    "text": "about um cluster api versioning so there's kind of a discussion going on right now the",
    "start": "1891919",
    "end": "1897919"
  },
  {
    "text": "link is already at the bottom if you just want to click the link and check it out um",
    "start": "1897919",
    "end": "1903440"
  },
  {
    "text": "that kind of talks about okay cluster api version 1.0 or v1 beta 1 for our apis um what is really",
    "start": "1903440",
    "end": "1910880"
  },
  {
    "text": "necessary what's our road to get there and a realization",
    "start": "1910880",
    "end": "1916320"
  },
  {
    "text": "that um you know maintenance of classifier already made was that we are mostly not fully um already",
    "start": "1916320",
    "end": "1922720"
  },
  {
    "text": "operating like a ga project so that means that um we already support",
    "start": "1922720",
    "end": "1928399"
  },
  {
    "text": "our api in some cases for up to a year not always but there is some support that's nearly a",
    "start": "1928399",
    "end": "1935679"
  },
  {
    "text": "year in most cases and we also support conversions not enough conversions like a ga",
    "start": "1935679",
    "end": "1941519"
  },
  {
    "text": "project but we support conversion webhooks and the conversion between um our apis in a higher level than what",
    "start": "1941519",
    "end": "1948960"
  },
  {
    "text": "would be expected from an alpha project um from so from there the um proposal",
    "start": "1948960",
    "end": "1954240"
  },
  {
    "text": "was kind of like what is actually missing for us to move towards we want beta1 or cluster api yeah yeah 1.0",
    "start": "1954240",
    "end": "1962799"
  },
  {
    "text": "and um in this discussion that was already brought up yeah there needs to be a lot of",
    "start": "1962799",
    "end": "1968000"
  },
  {
    "text": "work on stability even though we're already in a pretty stable place um and the foundations are being kept in",
    "start": "1968000",
    "end": "1974080"
  },
  {
    "text": "place we're not 100 confident right now if that will continue to be that way or which additions need to be",
    "start": "1974080",
    "end": "1980720"
  },
  {
    "text": "made um so for this it would be really valuable for us if you would bring up your use cases or um your ideas for",
    "start": "1980720",
    "end": "1988720"
  },
  {
    "text": "cluster api so we can get a better picture of what actually needs to be improved and",
    "start": "1988720",
    "end": "1993840"
  },
  {
    "text": "also we need to kind of oh there needs to be more work done um to have some technical depth reduce",
    "start": "1993840",
    "end": "1999279"
  },
  {
    "text": "that is currently still in cluster api and then the final things i wanted to say yes",
    "start": "1999279",
    "end": "2005200"
  },
  {
    "text": "obviously production ready means different things for different people yeah so currently in v1 alpha 3 and v1 alpha",
    "start": "2005200",
    "end": "2012799"
  },
  {
    "text": "4 there are already people using cluster api in production and um this is a thing that has been",
    "start": "2012799",
    "end": "2018960"
  },
  {
    "text": "happening for quite a while but the version does not reflect that properly so we want alpha 4",
    "start": "2018960",
    "end": "2024880"
  },
  {
    "text": "we own alpha 3 indicates basically it's not a production ready project but it is being used in production and",
    "start": "2024880",
    "end": "2031760"
  },
  {
    "text": "with our work with conversions we kind of acknowledge that it's being used in production",
    "start": "2031760",
    "end": "2036880"
  },
  {
    "text": "so for that it's very um interesting for you know the project cluster api to kind",
    "start": "2036880",
    "end": "2042080"
  },
  {
    "text": "of have this discussion and we'll be very happy for you to join in and transitioning from that we can",
    "start": "2042080",
    "end": "2048960"
  },
  {
    "start": "2046000",
    "end": "2153000"
  },
  {
    "text": "straight go into well how can you help or how can you get involved in cluster api and there are quite a few different ways",
    "start": "2048960",
    "end": "2054878"
  },
  {
    "text": "to do this the first way would be you know do you have any writing skills we have a documentation book",
    "start": "2054879",
    "end": "2060800"
  },
  {
    "text": "you can read through it and you can kind of improve it however you want provide a pro request that's open for",
    "start": "2060800",
    "end": "2066480"
  },
  {
    "text": "everyone and then also if you have product um skills as i mentioned before we are very",
    "start": "2066480",
    "end": "2072158"
  },
  {
    "text": "happy to get more use cases and and to kind of understand um what users of cluster api",
    "start": "2072159",
    "end": "2077440"
  },
  {
    "text": "might might want or might expect in the future and also obviously there's backlog grooming is always a thing that",
    "start": "2077440",
    "end": "2084320"
  },
  {
    "text": "needs to happen so we have some milestone maintenance going on if you're interested in that feel free to contribute",
    "start": "2084320",
    "end": "2090320"
  },
  {
    "text": "obviously if you have coding skills um there are different ways to get involved the first way would be um just a review",
    "start": "2090320",
    "end": "2096398"
  },
  {
    "text": "proquest we currently always have a lot of open pull requests and um reviews are really valuable to us",
    "start": "2096399",
    "end": "2103040"
  },
  {
    "text": "so you can either review pro requests with a determination or the goal of becoming a reviewer in the cluster api",
    "start": "2103040",
    "end": "2108960"
  },
  {
    "text": "project or you can um search for issues that have the label help wanted or good first",
    "start": "2108960",
    "end": "2114560"
  },
  {
    "text": "issues if you really want to get involved in coding right away so these are two great ways in my",
    "start": "2114560",
    "end": "2120079"
  },
  {
    "text": "opinion to get started and then finally if you have different skills that i didn't mention here",
    "start": "2120079",
    "end": "2125359"
  },
  {
    "text": "or you simply want to get involved we have weekly community meetings as well as a slack channel and a mailing list where you can easily",
    "start": "2125359",
    "end": "2132320"
  },
  {
    "text": "get involved and or obviously on the cluster api repository there's open issues where you",
    "start": "2132320",
    "end": "2137680"
  },
  {
    "text": "can just open an issue or like start a conversation um again all the",
    "start": "2137680",
    "end": "2142880"
  },
  {
    "text": "links are in the slides as well if you want to have an easy to click link and with that",
    "start": "2142880",
    "end": "2148160"
  },
  {
    "text": "um we are done for this deep dive session and we can now go into q a",
    "start": "2148160",
    "end": "2155280"
  }
]