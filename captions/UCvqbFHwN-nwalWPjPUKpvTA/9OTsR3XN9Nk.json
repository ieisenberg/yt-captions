[
  {
    "text": "hey everyone welcome to the talk my name",
    "start": "80",
    "end": "2320"
  },
  {
    "text": "is peter hunt i'm a senior software",
    "start": "2320",
    "end": "3919"
  },
  {
    "text": "engineer at red hat working primarily on",
    "start": "3919",
    "end": "5759"
  },
  {
    "text": "cryo but sometimes on",
    "start": "5759",
    "end": "7440"
  },
  {
    "text": "cubelet and runc and podman and other",
    "start": "7440",
    "end": "9679"
  },
  {
    "text": "container related technologies",
    "start": "9679",
    "end": "12960"
  },
  {
    "text": "my name is orvish monadi and i'm a",
    "start": "13599",
    "end": "15599"
  },
  {
    "text": "senior software engineer on the",
    "start": "15599",
    "end": "16720"
  },
  {
    "text": "openshift containers team at red hat and",
    "start": "16720",
    "end": "18800"
  },
  {
    "text": "a crime maintainer",
    "start": "18800",
    "end": "21520"
  },
  {
    "text": "alright so today we're going to talk",
    "start": "21520",
    "end": "22880"
  },
  {
    "text": "about i'm renault patel i'm a cryo",
    "start": "22880",
    "end": "25359"
  },
  {
    "text": "maintainer and i work for red hat",
    "start": "25359",
    "end": "29119"
  },
  {
    "text": "hey everyone thank you for joining our",
    "start": "29760",
    "end": "31679"
  },
  {
    "text": "talk i'm sasha one of the maintainers of",
    "start": "31679",
    "end": "33920"
  },
  {
    "text": "cryo and i really hope you enjoy this",
    "start": "33920",
    "end": "35920"
  },
  {
    "text": "session i mean secure performant and",
    "start": "35920",
    "end": "38480"
  },
  {
    "text": "boring as ever",
    "start": "38480",
    "end": "42200"
  },
  {
    "text": "is a lightweight oci-based container",
    "start": "44160",
    "end": "46160"
  },
  {
    "text": "engine implementing the kubernetes",
    "start": "46160",
    "end": "47840"
  },
  {
    "text": "container runtime interface",
    "start": "47840",
    "end": "49760"
  },
  {
    "text": "it supports all oci based container",
    "start": "49760",
    "end": "51680"
  },
  {
    "text": "images including older docker formatted",
    "start": "51680",
    "end": "53840"
  },
  {
    "text": "ones and it also supports all oci",
    "start": "53840",
    "end": "55760"
  },
  {
    "text": "container runtimes such as francie",
    "start": "55760",
    "end": "57680"
  },
  {
    "text": "carter geovisor and cran to name a few",
    "start": "57680",
    "end": "61520"
  },
  {
    "text": "cry is built on top of various building",
    "start": "61520",
    "end": "63520"
  },
  {
    "text": "blocks focusing on different aspects",
    "start": "63520",
    "end": "65360"
  },
  {
    "text": "such as storage image and networking",
    "start": "65360",
    "end": "68159"
  },
  {
    "text": "with this structure crow is able to pick",
    "start": "68159",
    "end": "70400"
  },
  {
    "text": "and choose features from the building",
    "start": "70400",
    "end": "71920"
  },
  {
    "text": "blocks while these projects can evolve",
    "start": "71920",
    "end": "73920"
  },
  {
    "text": "at their own rate",
    "start": "73920",
    "end": "75439"
  },
  {
    "text": "this ensures that we maintain stability",
    "start": "75439",
    "end": "77520"
  },
  {
    "text": "while enhancing cry with new features at",
    "start": "77520",
    "end": "79360"
  },
  {
    "text": "the same time",
    "start": "79360",
    "end": "81360"
  },
  {
    "text": "from day one cryo was built with only",
    "start": "81360",
    "end": "83680"
  },
  {
    "text": "kubernetes in mind our versions walk in",
    "start": "83680",
    "end": "86320"
  },
  {
    "text": "lockstep with those of kubernetes and",
    "start": "86320",
    "end": "88000"
  },
  {
    "text": "cry evolves as kubernetes does",
    "start": "88000",
    "end": "90479"
  },
  {
    "text": "cryo also focuses on making workloads",
    "start": "90479",
    "end": "92640"
  },
  {
    "text": "running in production as secure as",
    "start": "92640",
    "end": "94159"
  },
  {
    "text": "possible",
    "start": "94159",
    "end": "95280"
  },
  {
    "text": "a few quick examples are we have fewer",
    "start": "95280",
    "end": "97360"
  },
  {
    "text": "capabilities enabled by default and we",
    "start": "97360",
    "end": "100000"
  },
  {
    "text": "also give the user the ability to run",
    "start": "100000",
    "end": "101759"
  },
  {
    "text": "containers in read-only mode",
    "start": "101759",
    "end": "105280"
  },
  {
    "text": "so let's take a quick look at some of",
    "start": "106240",
    "end": "107759"
  },
  {
    "text": "the updates from the last few months",
    "start": "107759",
    "end": "110240"
  },
  {
    "text": "cryo now supports the v1 implementation",
    "start": "110240",
    "end": "112640"
  },
  {
    "text": "of the cri as a cubelet has finally",
    "start": "112640",
    "end": "114560"
  },
  {
    "text": "transitioned to it",
    "start": "114560",
    "end": "116240"
  },
  {
    "text": "while the cubelet was transitioning from",
    "start": "116240",
    "end": "118159"
  },
  {
    "text": "v1 alpha 2 to v1 cryo had added support",
    "start": "118159",
    "end": "121119"
  },
  {
    "text": "for both cri implementations to ensure",
    "start": "121119",
    "end": "123040"
  },
  {
    "text": "version fewer objects for common",
    "start": "123040",
    "end": "124560"
  },
  {
    "text": "operations by only creating a new object",
    "start": "124560",
    "end": "126640"
  },
  {
    "text": "when a change has been detected",
    "start": "126640",
    "end": "128640"
  },
  {
    "text": "this helps in reducing the overhead cpu",
    "start": "128640",
    "end": "130879"
  },
  {
    "text": "of the goalline garbage collector",
    "start": "130879",
    "end": "132720"
  },
  {
    "text": "helping improve overall performance",
    "start": "132720",
    "end": "135599"
  },
  {
    "text": "and finally a cve regarding this control",
    "start": "135599",
    "end": "138239"
  },
  {
    "text": "was discovered that allowed an attacker",
    "start": "138239",
    "end": "140160"
  },
  {
    "text": "to bypass the safeguards we have in",
    "start": "140160",
    "end": "141920"
  },
  {
    "text": "place and set arbitrary kernel",
    "start": "141920",
    "end": "143520"
  },
  {
    "text": "parameters on the host",
    "start": "143520",
    "end": "145760"
  },
  {
    "text": "cryo uses pin and nest to set kernel",
    "start": "145760",
    "end": "147760"
  },
  {
    "text": "options for a pod and there was a bug in",
    "start": "147760",
    "end": "149680"
  },
  {
    "text": "it which allowed an attacker to sneak in",
    "start": "149680",
    "end": "151360"
  },
  {
    "text": "additional sys controls that would give",
    "start": "151360",
    "end": "152959"
  },
  {
    "text": "them root access on the host",
    "start": "152959",
    "end": "155040"
  },
  {
    "text": "we quickly fixed this up and released",
    "start": "155040",
    "end": "157040"
  },
  {
    "text": "patched versions of cryo starting from",
    "start": "157040",
    "end": "158879"
  },
  {
    "text": "119 which is when the vulnerability was",
    "start": "158879",
    "end": "161519"
  },
  {
    "text": "introduced",
    "start": "161519",
    "end": "163599"
  },
  {
    "text": "and now over to sasha who will give us",
    "start": "163599",
    "end": "165599"
  },
  {
    "text": "an overview and demo of konman rs",
    "start": "165599",
    "end": "170080"
  },
  {
    "text": "thank you let's talk about how we can",
    "start": "170080",
    "end": "171680"
  },
  {
    "text": "rethink container lifecycle management",
    "start": "171680",
    "end": "173360"
  },
  {
    "text": "in cryo so for many releases con mon was",
    "start": "173360",
    "end": "176160"
  },
  {
    "text": "the desired oci runtime monitor which is",
    "start": "176160",
    "end": "178560"
  },
  {
    "text": "able to interact with run c and c run as",
    "start": "178560",
    "end": "181040"
  },
  {
    "text": "lower level container runtime you can",
    "start": "181040",
    "end": "183120"
  },
  {
    "text": "check this project out on the containers",
    "start": "183120",
    "end": "184800"
  },
  {
    "text": "kanban on github if you would like to",
    "start": "184800",
    "end": "187040"
  },
  {
    "text": "but in general this little helper tool",
    "start": "187040",
    "end": "189200"
  },
  {
    "text": "helps us to ensure the communication",
    "start": "189200",
    "end": "190720"
  },
  {
    "text": "between cryo and oci runtime so for",
    "start": "190720",
    "end": "193360"
  },
  {
    "text": "example it takes care of the container",
    "start": "193360",
    "end": "195200"
  },
  {
    "text": "creation it also takes care",
    "start": "195200",
    "end": "197760"
  },
  {
    "text": "of the cleanup when the container",
    "start": "197760",
    "end": "199440"
  },
  {
    "text": "terminates",
    "start": "199440",
    "end": "200640"
  },
  {
    "text": "and it also provides endpoints for",
    "start": "200640",
    "end": "202879"
  },
  {
    "text": "executing processes um inside of",
    "start": "202879",
    "end": "205280"
  },
  {
    "text": "containers and also provides endpoints",
    "start": "205280",
    "end": "207280"
  },
  {
    "text": "for attaching to a containers for",
    "start": "207280",
    "end": "208720"
  },
  {
    "text": "example",
    "start": "208720",
    "end": "210400"
  },
  {
    "text": "um kronman is capable of writing the",
    "start": "210400",
    "end": "212959"
  },
  {
    "text": "container log files for kubernetes and",
    "start": "212959",
    "end": "215120"
  },
  {
    "text": "which have to be written into a special",
    "start": "215120",
    "end": "217040"
  },
  {
    "text": "format and it also",
    "start": "217040",
    "end": "219440"
  },
  {
    "text": "decided for this use cases for podman as",
    "start": "219440",
    "end": "222560"
  },
  {
    "text": "well",
    "start": "222560",
    "end": "224480"
  },
  {
    "text": "conmon is generally designed to have the",
    "start": "224480",
    "end": "226799"
  },
  {
    "text": "lowest possible memory footprint but",
    "start": "226799",
    "end": "228959"
  },
  {
    "text": "there are some drawbacks with this so",
    "start": "228959",
    "end": "231200"
  },
  {
    "text": "it's written in c",
    "start": "231200",
    "end": "232640"
  },
  {
    "text": "and therefore finding new maintainers",
    "start": "232640",
    "end": "234319"
  },
  {
    "text": "for com1 is really hard for us",
    "start": "234319",
    "end": "236720"
  },
  {
    "text": "and the main interface to interact with",
    "start": "236720",
    "end": "239280"
  },
  {
    "text": "con man is the cli so over the past",
    "start": "239280",
    "end": "242159"
  },
  {
    "text": "years we extended the cli in the same",
    "start": "242159",
    "end": "244720"
  },
  {
    "text": "way as we extended features to con mon",
    "start": "244720",
    "end": "247040"
  },
  {
    "text": "which kind of makes the usage a bit more",
    "start": "247040",
    "end": "249200"
  },
  {
    "text": "complicated than we initially thought",
    "start": "249200",
    "end": "252080"
  },
  {
    "text": "adding new features to con man also",
    "start": "252080",
    "end": "254000"
  },
  {
    "text": "increases technical depth therefore so",
    "start": "254000",
    "end": "256639"
  },
  {
    "text": "not we don't only have issues finding",
    "start": "256639",
    "end": "258880"
  },
  {
    "text": "new maintainers for con one but we also",
    "start": "258880",
    "end": "260799"
  },
  {
    "text": "increased like a good app so we are kind",
    "start": "260799",
    "end": "262800"
  },
  {
    "text": "of moving into a sinkhole here",
    "start": "262800",
    "end": "265440"
  },
  {
    "text": "and it besides that it still has some",
    "start": "265440",
    "end": "268160"
  },
  {
    "text": "run time dependencies like glib and this",
    "start": "268160",
    "end": "270880"
  },
  {
    "text": "makes static linking hard so",
    "start": "270880",
    "end": "273120"
  },
  {
    "text": "we provide a for example for cryo we",
    "start": "273120",
    "end": "275040"
  },
  {
    "text": "provide a static binary bundle which",
    "start": "275040",
    "end": "277040"
  },
  {
    "text": "contains all runtime dependencies out of",
    "start": "277040",
    "end": "279280"
  },
  {
    "text": "the box and con m1 relies on g-lab so we",
    "start": "279280",
    "end": "281919"
  },
  {
    "text": "have a",
    "start": "281919",
    "end": "282880"
  },
  {
    "text": "little bit of troubles linking",
    "start": "282880",
    "end": "284560"
  },
  {
    "text": "statically",
    "start": "284560",
    "end": "287120"
  },
  {
    "text": "and today we're happy to announce that a",
    "start": "287280",
    "end": "289120"
  },
  {
    "text": "possible successor of conmon which is",
    "start": "289120",
    "end": "290880"
  },
  {
    "text": "called mono is kanmon is contains a",
    "start": "290880",
    "end": "293360"
  },
  {
    "text": "completely new software architecture for",
    "start": "293360",
    "end": "295280"
  },
  {
    "text": "example we can utilize the programming",
    "start": "295280",
    "end": "297600"
  },
  {
    "text": "language rust and also the asynchronous",
    "start": "297600",
    "end": "299759"
  },
  {
    "text": "took you around time to rethink what we",
    "start": "299759",
    "end": "301680"
  },
  {
    "text": "have done in the past beside that we can",
    "start": "301680",
    "end": "304000"
  },
  {
    "text": "also target the lowest memory usage as",
    "start": "304000",
    "end": "306479"
  },
  {
    "text": "possible we can support something like",
    "start": "306479",
    "end": "309360"
  },
  {
    "text": "having multiple containers like parts in",
    "start": "309360",
    "end": "311759"
  },
  {
    "text": "one instance of kanban and we can",
    "start": "311759",
    "end": "314000"
  },
  {
    "text": "re-engineer the indoor containers",
    "start": "314000",
    "end": "315520"
  },
  {
    "text": "process execution beside that we can",
    "start": "315520",
    "end": "318080"
  },
  {
    "text": "provide an extensible api and the golan",
    "start": "318080",
    "end": "320720"
  },
  {
    "text": "client out of the box to be used from",
    "start": "320720",
    "end": "323199"
  },
  {
    "text": "container end times like cryo apartment",
    "start": "323199",
    "end": "325919"
  },
  {
    "text": "but how to provide an api between rust",
    "start": "325919",
    "end": "327919"
  },
  {
    "text": "and golem well we decided to choose",
    "start": "327919",
    "end": "330720"
  },
  {
    "text": "captain broto for that and captain",
    "start": "330720",
    "end": "333199"
  },
  {
    "text": "brother is an insanely fast data",
    "start": "333199",
    "end": "334800"
  },
  {
    "text": "interchange format and it's in",
    "start": "334800",
    "end": "336639"
  },
  {
    "text": "capability capability-based rpc system",
    "start": "336639",
    "end": "339199"
  },
  {
    "text": "so it's like protocol buffers but a",
    "start": "339199",
    "end": "342080"
  },
  {
    "text": "little bit faster and it also has a",
    "start": "342080",
    "end": "344000"
  },
  {
    "text": "smaller memory footprint so we thought",
    "start": "344000",
    "end": "346400"
  },
  {
    "text": "it would be a great use case for captain",
    "start": "346400",
    "end": "348000"
  },
  {
    "text": "proto to try this out",
    "start": "348000",
    "end": "349759"
  },
  {
    "text": "captain proto is faster than protobuf",
    "start": "349759",
    "end": "351440"
  },
  {
    "text": "and also has a smaller memory footprint",
    "start": "351440",
    "end": "353680"
  },
  {
    "text": "than a grpc runtime",
    "start": "353680",
    "end": "355919"
  },
  {
    "text": "so for example if we want to create a",
    "start": "355919",
    "end": "357440"
  },
  {
    "text": "container here",
    "start": "357440",
    "end": "358720"
  },
  {
    "text": "then",
    "start": "358720",
    "end": "359520"
  },
  {
    "text": "we can do it in the same way as we do it",
    "start": "359520",
    "end": "361520"
  },
  {
    "text": "in grpc so we define a create container",
    "start": "361520",
    "end": "363919"
  },
  {
    "text": "request which contains",
    "start": "363919",
    "end": "366400"
  },
  {
    "text": "the request and as well as the response",
    "start": "366400",
    "end": "369520"
  },
  {
    "text": "and the content create container request",
    "start": "369520",
    "end": "371280"
  },
  {
    "text": "itself requires all the necessary data",
    "start": "371280",
    "end": "374400"
  },
  {
    "text": "we usually have been passed over via the",
    "start": "374400",
    "end": "376639"
  },
  {
    "text": "cli to command before so we need the",
    "start": "376639",
    "end": "378880"
  },
  {
    "text": "container i t the bundle path determine",
    "start": "378880",
    "end": "382080"
  },
  {
    "text": "and we have to decide if we want to",
    "start": "382080",
    "end": "383440"
  },
  {
    "text": "choose a terminal or not and um for",
    "start": "383440",
    "end": "386080"
  },
  {
    "text": "example we can also specify different",
    "start": "386080",
    "end": "387680"
  },
  {
    "text": "log drivers now and this is new so we",
    "start": "387680",
    "end": "389919"
  },
  {
    "text": "can specify multiple log drivers for",
    "start": "389919",
    "end": "391759"
  },
  {
    "text": "example we create a new structure lock",
    "start": "391759",
    "end": "393280"
  },
  {
    "text": "driver which has that type and the path",
    "start": "393280",
    "end": "396080"
  },
  {
    "text": "and for now we only support the",
    "start": "396080",
    "end": "397520"
  },
  {
    "text": "container runtime in the face lockdriver",
    "start": "397520",
    "end": "400160"
  },
  {
    "text": "which provides the necessary looks to",
    "start": "400160",
    "end": "402080"
  },
  {
    "text": "kubernetes",
    "start": "402080",
    "end": "403600"
  },
  {
    "text": "and the response then is the container",
    "start": "403600",
    "end": "405840"
  },
  {
    "text": "pid and from a use case perspective we",
    "start": "405840",
    "end": "408639"
  },
  {
    "text": "would run the common server which then",
    "start": "408639",
    "end": "410880"
  },
  {
    "text": "waits for incoming connections from the",
    "start": "410880",
    "end": "412800"
  },
  {
    "text": "client which would be cryo and cryo has",
    "start": "412800",
    "end": "415440"
  },
  {
    "text": "gone on how to create the container and",
    "start": "415440",
    "end": "417039"
  },
  {
    "text": "how the container lifecycle should work",
    "start": "417039",
    "end": "420319"
  },
  {
    "text": "so cap proto allows us to provide",
    "start": "420319",
    "end": "422240"
  },
  {
    "text": "clients for multiple languages so we can",
    "start": "422240",
    "end": "424880"
  },
  {
    "text": "create a goal incline without having the",
    "start": "424880",
    "end": "427599"
  },
  {
    "text": "user to struggle with the captain",
    "start": "427599",
    "end": "429039"
  },
  {
    "text": "prototypes at all",
    "start": "429039",
    "end": "430560"
  },
  {
    "text": "and it also trims down the cli to only",
    "start": "430560",
    "end": "433360"
  },
  {
    "text": "require runtime diagram c and the",
    "start": "433360",
    "end": "435919"
  },
  {
    "text": "directory for state handling so we only",
    "start": "435919",
    "end": "437840"
  },
  {
    "text": "require two cri arguments to start conon",
    "start": "437840",
    "end": "442319"
  },
  {
    "text": "beside that it allows us to use the",
    "start": "442319",
    "end": "444319"
  },
  {
    "text": "streaming capabilities of captain proto",
    "start": "444319",
    "end": "446560"
  },
  {
    "text": "rather than using the sockets for attach",
    "start": "446560",
    "end": "448800"
  },
  {
    "text": "right now we still rely on sockets",
    "start": "448800",
    "end": "450880"
  },
  {
    "text": "because we kind of want to mimic the old",
    "start": "450880",
    "end": "453199"
  },
  {
    "text": "behavior of kanban",
    "start": "453199",
    "end": "455840"
  },
  {
    "text": "so kanmon is unfortunately not ready for",
    "start": "455840",
    "end": "458160"
  },
  {
    "text": "production uses yet but right now we are",
    "start": "458160",
    "end": "460319"
  },
  {
    "text": "working on the integration into cryo and",
    "start": "460319",
    "end": "463440"
  },
  {
    "text": "this helps us because we are already",
    "start": "463440",
    "end": "466080"
  },
  {
    "text": "having a feature complete implementation",
    "start": "466080",
    "end": "467680"
  },
  {
    "text": "right now but for sure this has to be",
    "start": "467680",
    "end": "470080"
  },
  {
    "text": "battle proof",
    "start": "470080",
    "end": "471280"
  },
  {
    "text": "so in the future we are going to follow",
    "start": "471280",
    "end": "473599"
  },
  {
    "text": "up to make it ready for apartment as",
    "start": "473599",
    "end": "475120"
  },
  {
    "text": "well check the project out on github and",
    "start": "475120",
    "end": "477199"
  },
  {
    "text": "tell us what you think",
    "start": "477199",
    "end": "480080"
  },
  {
    "text": "and i would like to provide you a little",
    "start": "480800",
    "end": "482479"
  },
  {
    "text": "demo about con monae's to actually use",
    "start": "482479",
    "end": "484960"
  },
  {
    "text": "gunman is you would have duranik",
    "start": "484960",
    "end": "486960"
  },
  {
    "text": "modified version of cryo which already",
    "start": "486960",
    "end": "488879"
  },
  {
    "text": "implements the current work and progress",
    "start": "488879",
    "end": "490639"
  },
  {
    "text": "state of kanban is so now let's do that",
    "start": "490639",
    "end": "493759"
  },
  {
    "text": "we start cryo and it starts up as usual",
    "start": "493759",
    "end": "496639"
  },
  {
    "text": "as expected and then we can run via",
    "start": "496639",
    "end": "499360"
  },
  {
    "text": "cryctl a test container inside of a test",
    "start": "499360",
    "end": "502479"
  },
  {
    "text": "sandbox",
    "start": "502479",
    "end": "503680"
  },
  {
    "text": "and if we do that",
    "start": "503680",
    "end": "505520"
  },
  {
    "text": "then everything looks as we would expect",
    "start": "505520",
    "end": "508000"
  },
  {
    "text": "it from cryo so we run a new container",
    "start": "508000",
    "end": "510240"
  },
  {
    "text": "and got the container id and if we run",
    "start": "510240",
    "end": "512518"
  },
  {
    "text": "rcglps and we can see that the container",
    "start": "512519",
    "end": "515279"
  },
  {
    "text": "is up and running",
    "start": "515279",
    "end": "516719"
  },
  {
    "text": "but now let's double check that by",
    "start": "516719",
    "end": "518240"
  },
  {
    "text": "looking at the local processes so",
    "start": "518240",
    "end": "521120"
  },
  {
    "text": "if we look at the current processes",
    "start": "521120",
    "end": "522880"
  },
  {
    "text": "running on my system and grab for common",
    "start": "522880",
    "end": "524720"
  },
  {
    "text": "is",
    "start": "524720",
    "end": "525680"
  },
  {
    "text": "then we can see that we have a con monis",
    "start": "525680",
    "end": "528480"
  },
  {
    "text": "instance now up and running using the",
    "start": "528480",
    "end": "530399"
  },
  {
    "text": "runtime run c and the runtime directory",
    "start": "530399",
    "end": "532959"
  },
  {
    "text": "there",
    "start": "532959",
    "end": "534560"
  },
  {
    "text": "and if we look into this runtime",
    "start": "534560",
    "end": "536000"
  },
  {
    "text": "directory",
    "start": "536000",
    "end": "538320"
  },
  {
    "text": "then we can see that we have a",
    "start": "538320",
    "end": "539839"
  },
  {
    "text": "conventional category up and running",
    "start": "539839",
    "end": "541600"
  },
  {
    "text": "which is the main socket where cryo",
    "start": "541600",
    "end": "543120"
  },
  {
    "text": "connects to",
    "start": "543120",
    "end": "544320"
  },
  {
    "text": "and uses con mana as a server",
    "start": "544320",
    "end": "547600"
  },
  {
    "text": "so now we can for example also",
    "start": "547600",
    "end": "551759"
  },
  {
    "text": "exact into the container and execute a",
    "start": "552480",
    "end": "555680"
  },
  {
    "text": "command",
    "start": "555680",
    "end": "558080"
  },
  {
    "text": "which then gets returned",
    "start": "559040",
    "end": "560880"
  },
  {
    "text": "so this works as intended um",
    "start": "560880",
    "end": "563440"
  },
  {
    "text": "right now our overall plan is to",
    "start": "563440",
    "end": "566160"
  },
  {
    "text": "integrate con mana s in the same way as",
    "start": "566160",
    "end": "567920"
  },
  {
    "text": "we integrate con monitor cryo and make",
    "start": "567920",
    "end": "570399"
  },
  {
    "text": "the process of transitioning from kanban",
    "start": "570399",
    "end": "572320"
  },
  {
    "text": "to commonwealth as easy as possible by",
    "start": "572320",
    "end": "575200"
  },
  {
    "text": "making everything work out of the box",
    "start": "575200",
    "end": "577519"
  },
  {
    "text": "thanks for listening to this demo",
    "start": "577519",
    "end": "580880"
  },
  {
    "text": "thanks sasha",
    "start": "581920",
    "end": "584080"
  },
  {
    "text": "now we'll go over some optimizations",
    "start": "584080",
    "end": "585760"
  },
  {
    "text": "that cryo recently made to its handling",
    "start": "585760",
    "end": "587600"
  },
  {
    "text": "of selinux volume relabeling before we",
    "start": "587600",
    "end": "590240"
  },
  {
    "text": "do so we'll quickly review how east",
    "start": "590240",
    "end": "592080"
  },
  {
    "text": "linux works in kubernetes",
    "start": "592080",
    "end": "594160"
  },
  {
    "text": "pods or containers can be assigned an",
    "start": "594160",
    "end": "596000"
  },
  {
    "text": "selinux option structure in the",
    "start": "596000",
    "end": "597839"
  },
  {
    "text": "structure a user can specify every field",
    "start": "597839",
    "end": "600000"
  },
  {
    "text": "needed to construct an selinux label the",
    "start": "600000",
    "end": "602320"
  },
  {
    "text": "user role type and level",
    "start": "602320",
    "end": "604880"
  },
  {
    "text": "there's a summary of what each of these",
    "start": "604880",
    "end": "606160"
  },
  {
    "text": "fields are here the fields we're most",
    "start": "606160",
    "end": "608240"
  },
  {
    "text": "concerned with is level as the other",
    "start": "608240",
    "end": "609760"
  },
  {
    "text": "fields don't typically change unless a",
    "start": "609760",
    "end": "611440"
  },
  {
    "text": "user specifies otherwise to access a",
    "start": "611440",
    "end": "614320"
  },
  {
    "text": "file on the node",
    "start": "614320",
    "end": "615760"
  },
  {
    "text": "the level field is a way of subdividing",
    "start": "615760",
    "end": "617680"
  },
  {
    "text": "content among like types in this case",
    "start": "617680",
    "end": "619839"
  },
  {
    "text": "it's how different containers cannot",
    "start": "619839",
    "end": "621279"
  },
  {
    "text": "access files they themselves are not",
    "start": "621279",
    "end": "622880"
  },
  {
    "text": "given explicit",
    "start": "622880",
    "end": "624399"
  },
  {
    "text": "permissions to",
    "start": "624399",
    "end": "627120"
  },
  {
    "text": "the sc linux option is passed from the",
    "start": "627519",
    "end": "629279"
  },
  {
    "text": "api to the cubelet and finally to cryo",
    "start": "629279",
    "end": "631120"
  },
  {
    "text": "cryo then takes every unfilled field and",
    "start": "631120",
    "end": "633760"
  },
  {
    "text": "populates it with its storage library",
    "start": "633760",
    "end": "635839"
  },
  {
    "text": "the full label will be generated and the",
    "start": "635839",
    "end": "637680"
  },
  {
    "text": "mount label will be used for the root fs",
    "start": "637680",
    "end": "640000"
  },
  {
    "text": "and volume while the process label will",
    "start": "640000",
    "end": "641760"
  },
  {
    "text": "be used for the container process itself",
    "start": "641760",
    "end": "644240"
  },
  {
    "text": "note the mount label will only be used",
    "start": "644240",
    "end": "646640"
  },
  {
    "text": "if the volume plug-in opts into it and",
    "start": "646640",
    "end": "648880"
  },
  {
    "text": "hostpath as a volume",
    "start": "648880",
    "end": "650640"
  },
  {
    "text": "plug-in doesn't opt into this so you",
    "start": "650640",
    "end": "653040"
  },
  {
    "text": "don't get automatic re-labeling if you",
    "start": "653040",
    "end": "655600"
  },
  {
    "text": "try to mount something from the host",
    "start": "655600",
    "end": "659639"
  },
  {
    "text": "finally important piece of information",
    "start": "660160",
    "end": "661760"
  },
  {
    "text": "is the special type spct or super",
    "start": "661760",
    "end": "664320"
  },
  {
    "text": "privileged containers",
    "start": "664320",
    "end": "666480"
  },
  {
    "text": "which essentially disables selinux for a",
    "start": "666480",
    "end": "668560"
  },
  {
    "text": "pod or a container if possible we",
    "start": "668560",
    "end": "670800"
  },
  {
    "text": "recommend not to use this type though it",
    "start": "670800",
    "end": "672560"
  },
  {
    "text": "can be useful when pods need access to",
    "start": "672560",
    "end": "674560"
  },
  {
    "text": "many files on the host and are trusted",
    "start": "674560",
    "end": "677440"
  },
  {
    "text": "the security profile operator or sbo is",
    "start": "677440",
    "end": "680480"
  },
  {
    "text": "useful for distributing sc linux",
    "start": "680480",
    "end": "681920"
  },
  {
    "text": "profiles that can help avoid setting",
    "start": "681920",
    "end": "684160"
  },
  {
    "text": "your containers to spct if they're",
    "start": "684160",
    "end": "686079"
  },
  {
    "text": "blocked by sc linux",
    "start": "686079",
    "end": "688720"
  },
  {
    "text": "at this point the scada state of",
    "start": "688720",
    "end": "690240"
  },
  {
    "text": "kubernetes and iclinic seems great we",
    "start": "690240",
    "end": "692720"
  },
  {
    "text": "have a way for containers to access",
    "start": "692720",
    "end": "694079"
  },
  {
    "text": "content they're allowed to as well as a",
    "start": "694079",
    "end": "696240"
  },
  {
    "text": "way of disallowing containers from",
    "start": "696240",
    "end": "697600"
  },
  {
    "text": "accessing content they don't own this",
    "start": "697600",
    "end": "699680"
  },
  {
    "text": "prevents the possibility of container",
    "start": "699680",
    "end": "701200"
  },
  {
    "text": "processes breaking out of the root from",
    "start": "701200",
    "end": "703279"
  },
  {
    "text": "affecting anything on the host they're",
    "start": "703279",
    "end": "705680"
  },
  {
    "text": "not allowed to touch",
    "start": "705680",
    "end": "708560"
  },
  {
    "text": "however there's also a problem",
    "start": "708800",
    "end": "711120"
  },
  {
    "text": "note",
    "start": "711120",
    "end": "712079"
  },
  {
    "text": "how before",
    "start": "712079",
    "end": "713279"
  },
  {
    "text": "the user or container storage library",
    "start": "713279",
    "end": "715200"
  },
  {
    "text": "choose a new level for each pod on",
    "start": "715200",
    "end": "716959"
  },
  {
    "text": "startup as each new container gets",
    "start": "716959",
    "end": "719200"
  },
  {
    "text": "created volumes that it has access to",
    "start": "719200",
    "end": "721680"
  },
  {
    "text": "may need to be relabeled so the",
    "start": "721680",
    "end": "723120"
  },
  {
    "text": "container has access to them",
    "start": "723120",
    "end": "724959"
  },
  {
    "text": "since this label is owned by cryo as it",
    "start": "724959",
    "end": "726880"
  },
  {
    "text": "sometimes generates it and is",
    "start": "726880",
    "end": "728160"
  },
  {
    "text": "responsible for creating the container's",
    "start": "728160",
    "end": "729680"
  },
  {
    "text": "root ifes and mounting the host volumes",
    "start": "729680",
    "end": "731360"
  },
  {
    "text": "into it the volume plugin instructs",
    "start": "731360",
    "end": "733839"
  },
  {
    "text": "crowd to relabel the volume each",
    "start": "733839",
    "end": "735680"
  },
  {
    "text": "container creation",
    "start": "735680",
    "end": "737040"
  },
  {
    "text": "the number of files in a volume is not",
    "start": "737040",
    "end": "738720"
  },
  {
    "text": "restricted in any way and thus",
    "start": "738720",
    "end": "740160"
  },
  {
    "text": "relabeling can take an arbitrary amount",
    "start": "740160",
    "end": "741680"
  },
  {
    "text": "of time",
    "start": "741680",
    "end": "742880"
  },
  {
    "text": "when the cubelet asks cryo to create a",
    "start": "742880",
    "end": "744320"
  },
  {
    "text": "container it must cap the amount of time",
    "start": "744320",
    "end": "746000"
  },
  {
    "text": "cryo has and cancel the request after",
    "start": "746000",
    "end": "747920"
  },
  {
    "text": "that time otherwise the request could",
    "start": "747920",
    "end": "750079"
  },
  {
    "text": "have gone to the void and the container",
    "start": "750079",
    "end": "751680"
  },
  {
    "text": "creation could never happen",
    "start": "751680",
    "end": "753600"
  },
  {
    "text": "when cryo can't relabel the volume in",
    "start": "753600",
    "end": "755279"
  },
  {
    "text": "time and the cubit times out it causes",
    "start": "755279",
    "end": "757600"
  },
  {
    "text": "to do the two process to bicker about it",
    "start": "757600",
    "end": "760160"
  },
  {
    "text": "public asks crowd to create container",
    "start": "760160",
    "end": "761920"
  },
  {
    "text": "crowd says i'm working on it and fails",
    "start": "761920",
    "end": "764079"
  },
  {
    "text": "this creates a lot of log churn and",
    "start": "764079",
    "end": "765760"
  },
  {
    "text": "scary messages in the community's event",
    "start": "765760",
    "end": "767600"
  },
  {
    "text": "api",
    "start": "767600",
    "end": "768639"
  },
  {
    "text": "what's worse is this process happens",
    "start": "768639",
    "end": "770480"
  },
  {
    "text": "every container restart as cryo needs to",
    "start": "770480",
    "end": "772639"
  },
  {
    "text": "be sure the volume is labeled fully",
    "start": "772639",
    "end": "774399"
  },
  {
    "text": "correctly",
    "start": "774399",
    "end": "776880"
  },
  {
    "text": "our goals to fix this problem are as",
    "start": "776880",
    "end": "778320"
  },
  {
    "text": "follows a container must still be able",
    "start": "778320",
    "end": "780800"
  },
  {
    "text": "to have a process label that can access",
    "start": "780800",
    "end": "782959"
  },
  {
    "text": "the volume or else what's the point of",
    "start": "782959",
    "end": "785040"
  },
  {
    "text": "mounting that volume",
    "start": "785040",
    "end": "786560"
  },
  {
    "text": "a volume must be labeled so the",
    "start": "786560",
    "end": "788079"
  },
  {
    "text": "authorized containers can access it but",
    "start": "788079",
    "end": "789760"
  },
  {
    "text": "non-authorized containers cannot",
    "start": "789760",
    "end": "791920"
  },
  {
    "text": "and we want to relabel as few times as",
    "start": "791920",
    "end": "793600"
  },
  {
    "text": "possible to ensure container creations",
    "start": "793600",
    "end": "795440"
  },
  {
    "text": "and restarts don't time out if it can be",
    "start": "795440",
    "end": "797440"
  },
  {
    "text": "avoided",
    "start": "797440",
    "end": "800000"
  },
  {
    "text": "satisfy these conditions we came up with",
    "start": "800000",
    "end": "801760"
  },
  {
    "text": "two solutions",
    "start": "801760",
    "end": "803200"
  },
  {
    "text": "the first solution is to conditionally",
    "start": "803200",
    "end": "804720"
  },
  {
    "text": "skip the relabel if the top level",
    "start": "804720",
    "end": "806399"
  },
  {
    "text": "directory is almost correct assuming the",
    "start": "806399",
    "end": "808480"
  },
  {
    "text": "container was specifically allowed to do",
    "start": "808480",
    "end": "810079"
  },
  {
    "text": "so",
    "start": "810079",
    "end": "810880"
  },
  {
    "text": "we use crow's allowed annotations",
    "start": "810880",
    "end": "812639"
  },
  {
    "text": "functionality to ensure an admin wanted",
    "start": "812639",
    "end": "814399"
  },
  {
    "text": "this behavior to be enabled on the node",
    "start": "814399",
    "end": "816240"
  },
  {
    "text": "and that the pod author actually wanted",
    "start": "816240",
    "end": "818480"
  },
  {
    "text": "to opt into it",
    "start": "818480",
    "end": "819920"
  },
  {
    "text": "some advantages to the solution are the",
    "start": "819920",
    "end": "822240"
  },
  {
    "text": "container still gets labeled properly",
    "start": "822240",
    "end": "824000"
  },
  {
    "text": "confining it in the case it isn't",
    "start": "824000",
    "end": "825360"
  },
  {
    "text": "totally trusted it can be enabled on a",
    "start": "825360",
    "end": "827279"
  },
  {
    "text": "per pod granularity so only containers",
    "start": "827279",
    "end": "829199"
  },
  {
    "text": "that need it get this functionality",
    "start": "829199",
    "end": "831839"
  },
  {
    "text": "if it's it is more friendly to restart",
    "start": "831839",
    "end": "834320"
  },
  {
    "text": "than the default behavior if a container",
    "start": "834320",
    "end": "836320"
  },
  {
    "text": "was created once and kept in the same",
    "start": "836320",
    "end": "838079"
  },
  {
    "text": "label then it will inherit the work that",
    "start": "838079",
    "end": "839680"
  },
  {
    "text": "was done previously to relabel the",
    "start": "839680",
    "end": "841120"
  },
  {
    "text": "volume",
    "start": "841120",
    "end": "842800"
  },
  {
    "text": "if multiple containers in a pod all with",
    "start": "842800",
    "end": "844720"
  },
  {
    "text": "the same label access the same volume",
    "start": "844720",
    "end": "846639"
  },
  {
    "text": "only one container incurs the cost of",
    "start": "846639",
    "end": "848240"
  },
  {
    "text": "relabeling",
    "start": "848240",
    "end": "849680"
  },
  {
    "text": "the volume can even be relabeled ahead",
    "start": "849680",
    "end": "851279"
  },
  {
    "text": "of time so no containers include the",
    "start": "851279",
    "end": "852720"
  },
  {
    "text": "cost of re-labeling",
    "start": "852720",
    "end": "854399"
  },
  {
    "text": "however as with any solution there are a",
    "start": "854399",
    "end": "856480"
  },
  {
    "text": "couple of compromises the label does",
    "start": "856480",
    "end": "858560"
  },
  {
    "text": "have to happen once if the volume isn't",
    "start": "858560",
    "end": "860320"
  },
  {
    "text": "relabeled ahead of time the first",
    "start": "860320",
    "end": "862000"
  },
  {
    "text": "container in the pot is liable to time",
    "start": "862000",
    "end": "863680"
  },
  {
    "text": "out however subsequent containers and",
    "start": "863680",
    "end": "865600"
  },
  {
    "text": "restarts will succeed",
    "start": "865600",
    "end": "867360"
  },
  {
    "text": "if a file in the volume was relabeled",
    "start": "867360",
    "end": "869199"
  },
  {
    "text": "outside of this process",
    "start": "869199",
    "end": "870399"
  },
  {
    "text": "then the container will be denied",
    "start": "870399",
    "end": "871680"
  },
  {
    "text": "permission",
    "start": "871680",
    "end": "872720"
  },
  {
    "text": "this isn't in an expected case but we",
    "start": "872720",
    "end": "874720"
  },
  {
    "text": "want to make sure the feature op in to",
    "start": "874720",
    "end": "876639"
  },
  {
    "text": "make it more obvious where to look if a",
    "start": "876639",
    "end": "878320"
  },
  {
    "text": "container spiritually gets denied",
    "start": "878320",
    "end": "879680"
  },
  {
    "text": "permission to something",
    "start": "879680",
    "end": "881440"
  },
  {
    "text": "luckily we've come up with an",
    "start": "881440",
    "end": "882720"
  },
  {
    "text": "alternative that mitigates these issues",
    "start": "882720",
    "end": "885760"
  },
  {
    "text": "our second solution is to skip the",
    "start": "885760",
    "end": "887920"
  },
  {
    "text": "re-label if the container is",
    "start": "887920",
    "end": "889040"
  },
  {
    "text": "sufficiently privileged",
    "start": "889040",
    "end": "890639"
  },
  {
    "text": "remember the special sc linux type super",
    "start": "890639",
    "end": "892399"
  },
  {
    "text": "privileged container we leverage the",
    "start": "892399",
    "end": "894320"
  },
  {
    "text": "fact that the container is essentially",
    "start": "894320",
    "end": "895680"
  },
  {
    "text": "unconfined to avoid re-labels completely",
    "start": "895680",
    "end": "898079"
  },
  {
    "text": "the solution is faster than the default",
    "start": "898079",
    "end": "900720"
  },
  {
    "text": "or the first as no re-labeling is needed",
    "start": "900720",
    "end": "903120"
  },
  {
    "text": "ever simpler because it doesn't require",
    "start": "903120",
    "end": "905760"
  },
  {
    "text": "configuring cryo or adding special",
    "start": "905760",
    "end": "907760"
  },
  {
    "text": "annotations to the pod and portable any",
    "start": "907760",
    "end": "910240"
  },
  {
    "text": "volume can be mounted into any",
    "start": "910240",
    "end": "912000"
  },
  {
    "text": "privileged pod and never incur the cost",
    "start": "912000",
    "end": "913680"
  },
  {
    "text": "of relabeling",
    "start": "913680",
    "end": "915040"
  },
  {
    "text": "however as is likely obvious the",
    "start": "915040",
    "end": "917040"
  },
  {
    "text": "solution is not secure the crowd team",
    "start": "917040",
    "end": "919360"
  },
  {
    "text": "does not typically recommend giving your",
    "start": "919360",
    "end": "921680"
  },
  {
    "text": "pods so much privilege unless you",
    "start": "921680",
    "end": "923199"
  },
  {
    "text": "absolutely trust it otherwise a",
    "start": "923199",
    "end": "925199"
  },
  {
    "text": "container breakout could cause serious",
    "start": "925199",
    "end": "927040"
  },
  {
    "text": "issues on the host",
    "start": "927040",
    "end": "929920"
  },
  {
    "text": "in other words the crowd team has",
    "start": "930800",
    "end": "932240"
  },
  {
    "text": "presented users with three options for",
    "start": "932240",
    "end": "933759"
  },
  {
    "text": "their pods depending on how secure and",
    "start": "933759",
    "end": "935279"
  },
  {
    "text": "safe they want their pods to be versus",
    "start": "935279",
    "end": "936959"
  },
  {
    "text": "how quickly they'd like the relabeling",
    "start": "936959",
    "end": "938480"
  },
  {
    "text": "done the first option the default is the",
    "start": "938480",
    "end": "941120"
  },
  {
    "text": "least performant as it relabels every",
    "start": "941120",
    "end": "943279"
  },
  {
    "text": "time but is the most secure as the",
    "start": "943279",
    "end": "944880"
  },
  {
    "text": "volume is correctly labeled each time",
    "start": "944880",
    "end": "946560"
  },
  {
    "text": "and the pot is fully confined",
    "start": "946560",
    "end": "948560"
  },
  {
    "text": "the second option conditionally skipping",
    "start": "948560",
    "end": "950560"
  },
  {
    "text": "is slightly more performant as it is",
    "start": "950560",
    "end": "953040"
  },
  {
    "text": "more performant as it skips the",
    "start": "953040",
    "end": "954320"
  },
  {
    "text": "relabeling sometimes but is slightly",
    "start": "954320",
    "end": "956480"
  },
  {
    "text": "dangerous to the pod as the contents may",
    "start": "956480",
    "end": "958480"
  },
  {
    "text": "change label underneath",
    "start": "958480",
    "end": "960720"
  },
  {
    "text": "cryo and the pod will be denied",
    "start": "960720",
    "end": "962480"
  },
  {
    "text": "permission if they try to access it",
    "start": "962480",
    "end": "965120"
  },
  {
    "text": "it is however similarly secure as the",
    "start": "965120",
    "end": "967199"
  },
  {
    "text": "first option because the pod is confined",
    "start": "967199",
    "end": "969120"
  },
  {
    "text": "to files that it wants to access",
    "start": "969120",
    "end": "972560"
  },
  {
    "text": "the final option skipping if privileged",
    "start": "972560",
    "end": "975279"
  },
  {
    "text": "is the most performant because the label",
    "start": "975279",
    "end": "977199"
  },
  {
    "text": "never happens however such a powerful",
    "start": "977199",
    "end": "979519"
  },
  {
    "text": "pod must also be trusted",
    "start": "979519",
    "end": "983839"
  },
  {
    "text": "in the future",
    "start": "984160",
    "end": "985680"
  },
  {
    "text": "with cap1710",
    "start": "985680",
    "end": "988399"
  },
  {
    "text": "we hope to avoid this label entirety",
    "start": "988399",
    "end": "990959"
  },
  {
    "text": "the cap",
    "start": "990959",
    "end": "992240"
  },
  {
    "text": "is",
    "start": "992240",
    "end": "993600"
  },
  {
    "text": "basically the way the cap works is it",
    "start": "993600",
    "end": "996480"
  },
  {
    "text": "the cubelet instead of passing down the",
    "start": "996480",
    "end": "998800"
  },
  {
    "text": "relabel option to cryo upon mounting the",
    "start": "998800",
    "end": "1001360"
  },
  {
    "text": "volume will pass a mount flag to the",
    "start": "1001360",
    "end": "1004320"
  },
  {
    "text": "mount command",
    "start": "1004320",
    "end": "1005680"
  },
  {
    "text": "that will do the relabeling for it so",
    "start": "1005680",
    "end": "1008000"
  },
  {
    "text": "none of this overhead will be needed",
    "start": "1008000",
    "end": "1009440"
  },
  {
    "text": "because it'll be relabeled upon mount",
    "start": "1009440",
    "end": "1013440"
  },
  {
    "text": "thank you",
    "start": "1013600",
    "end": "1015920"
  },
  {
    "text": "native containers and linux share the",
    "start": "1015920",
    "end": "1017680"
  },
  {
    "text": "same underlying kernel",
    "start": "1017680",
    "end": "1019680"
  },
  {
    "text": "container security is multi-layered like",
    "start": "1019680",
    "end": "1021759"
  },
  {
    "text": "an onion the more layers you have the",
    "start": "1021759",
    "end": "1024319"
  },
  {
    "text": "more secure you are",
    "start": "1024319",
    "end": "1025839"
  },
  {
    "text": "for example you can think of s linux",
    "start": "1025839",
    "end": "1028558"
  },
  {
    "text": "username spaces and sec compass",
    "start": "1028559",
    "end": "1030400"
  },
  {
    "text": "different layers",
    "start": "1030400",
    "end": "1032000"
  },
  {
    "text": "secomp allows you to restrict the",
    "start": "1032000",
    "end": "1033520"
  },
  {
    "text": "syscalls that your container processors",
    "start": "1033520",
    "end": "1035360"
  },
  {
    "text": "can make",
    "start": "1035360",
    "end": "1036400"
  },
  {
    "text": "effectively reducing the surface area of",
    "start": "1036400",
    "end": "1038319"
  },
  {
    "text": "attack on the underlying column",
    "start": "1038319",
    "end": "1040558"
  },
  {
    "text": "container runtimes allow you to install",
    "start": "1040559",
    "end": "1042558"
  },
  {
    "text": "and pick secomprofiles that specify",
    "start": "1042559",
    "end": "1045280"
  },
  {
    "text": "exactly which syscalls are allowed",
    "start": "1045280",
    "end": "1047918"
  },
  {
    "text": "container runtimes ship with pretty good",
    "start": "1047919",
    "end": "1049600"
  },
  {
    "text": "default profiles",
    "start": "1049600",
    "end": "1051200"
  },
  {
    "text": "that allow only a subset of syscalls",
    "start": "1051200",
    "end": "1053679"
  },
  {
    "text": "that are considered safe",
    "start": "1053679",
    "end": "1055520"
  },
  {
    "text": "i get involved in various container cvs",
    "start": "1055520",
    "end": "1058160"
  },
  {
    "text": "and quite a few of those cvs could have",
    "start": "1058160",
    "end": "1059919"
  },
  {
    "text": "been mitigated if seccomp was enabled",
    "start": "1059919",
    "end": "1063440"
  },
  {
    "text": "unfortunately secomp isn't enabled by",
    "start": "1063440",
    "end": "1065760"
  },
  {
    "text": "default in kubernetes yet",
    "start": "1065760",
    "end": "1068240"
  },
  {
    "text": "by default all pods are unconfined",
    "start": "1068240",
    "end": "1071120"
  },
  {
    "text": "unless they are configured to pick the",
    "start": "1071120",
    "end": "1072720"
  },
  {
    "text": "runtime default or a particular profile",
    "start": "1072720",
    "end": "1076080"
  },
  {
    "text": "we worked upstream on the second default",
    "start": "1076080",
    "end": "1078559"
  },
  {
    "text": "feature gate that allows one to change",
    "start": "1078559",
    "end": "1081120"
  },
  {
    "text": "the default to the runtime default",
    "start": "1081120",
    "end": "1083200"
  },
  {
    "text": "profile",
    "start": "1083200",
    "end": "1084480"
  },
  {
    "text": "this feature gate is still alpha and so",
    "start": "1084480",
    "end": "1086720"
  },
  {
    "text": "isn't enabled by default in production",
    "start": "1086720",
    "end": "1089120"
  },
  {
    "text": "deployments of kubernetes",
    "start": "1089120",
    "end": "1091520"
  },
  {
    "text": "so you can",
    "start": "1091520",
    "end": "1092799"
  },
  {
    "text": "read the linked blog for more details on",
    "start": "1092799",
    "end": "1094720"
  },
  {
    "text": "how to use that feature gate",
    "start": "1094720",
    "end": "1097440"
  },
  {
    "text": "so we decided to enable",
    "start": "1097440",
    "end": "1099840"
  },
  {
    "text": "this by default in cryo till we graduate",
    "start": "1099840",
    "end": "1102559"
  },
  {
    "text": "the feature gate to beta and ga so cryo",
    "start": "1102559",
    "end": "1105120"
  },
  {
    "text": "users are protected by sitcom by default",
    "start": "1105120",
    "end": "1107919"
  },
  {
    "text": "cryo added this",
    "start": "1107919",
    "end": "1109600"
  },
  {
    "text": "flag a few releases ago and is switching",
    "start": "1109600",
    "end": "1112160"
  },
  {
    "text": "it to true by default in 124.",
    "start": "1112160",
    "end": "1116240"
  },
  {
    "text": "okay now let's take a look at what's",
    "start": "1116320",
    "end": "1118240"
  },
  {
    "text": "next for cryo",
    "start": "1118240",
    "end": "1120080"
  },
  {
    "text": "in our previous cube contacts we",
    "start": "1120080",
    "end": "1121840"
  },
  {
    "text": "introduced the concept of runtime",
    "start": "1121840",
    "end": "1123679"
  },
  {
    "text": "classes that can be set in the cry",
    "start": "1123679",
    "end": "1125440"
  },
  {
    "text": "config allowing users to use different",
    "start": "1125440",
    "end": "1127360"
  },
  {
    "text": "container runtimes such as run cc run",
    "start": "1127360",
    "end": "1129919"
  },
  {
    "text": "jivas etc for different workloads in the",
    "start": "1129919",
    "end": "1132080"
  },
  {
    "text": "same cluster",
    "start": "1132080",
    "end": "1133440"
  },
  {
    "text": "we're extending runtime classes to allow",
    "start": "1133440",
    "end": "1135760"
  },
  {
    "text": "users to use multiple storage drivers",
    "start": "1135760",
    "end": "1137679"
  },
  {
    "text": "now a major use case of this is giving",
    "start": "1137679",
    "end": "1140240"
  },
  {
    "text": "vm based containers the ability to use a",
    "start": "1140240",
    "end": "1142559"
  },
  {
    "text": "different storage driver such as device",
    "start": "1142559",
    "end": "1144320"
  },
  {
    "text": "mapper instead of the standard overlay",
    "start": "1144320",
    "end": "1146320"
  },
  {
    "text": "fs making the performance of vm based",
    "start": "1146320",
    "end": "1148400"
  },
  {
    "text": "containers require much better",
    "start": "1148400",
    "end": "1151440"
  },
  {
    "text": "the next one is cosine and six star",
    "start": "1151440",
    "end": "1153039"
  },
  {
    "text": "support which allows signing a container",
    "start": "1153039",
    "end": "1155360"
  },
  {
    "text": "image and storing that signature in the",
    "start": "1155360",
    "end": "1157360"
  },
  {
    "text": "registry that can be used for image",
    "start": "1157360",
    "end": "1159600"
  },
  {
    "text": "verification later on",
    "start": "1159600",
    "end": "1161760"
  },
  {
    "text": "a lot of work is being done in the",
    "start": "1161760",
    "end": "1163760"
  },
  {
    "text": "containers image backing library for",
    "start": "1163760",
    "end": "1165360"
  },
  {
    "text": "this and once that is ready we will be",
    "start": "1165360",
    "end": "1167280"
  },
  {
    "text": "adding support for it to podman and cryo",
    "start": "1167280",
    "end": "1171200"
  },
  {
    "text": "additionally there is work being done in",
    "start": "1171200",
    "end": "1173280"
  },
  {
    "text": "upstream kubernetes to support forensic",
    "start": "1173280",
    "end": "1175200"
  },
  {
    "text": "container checkpointing",
    "start": "1175200",
    "end": "1176880"
  },
  {
    "text": "this will allow users to take a snapshot",
    "start": "1176880",
    "end": "1178960"
  },
  {
    "text": "of a running container that can then be",
    "start": "1178960",
    "end": "1181039"
  },
  {
    "text": "transferred around to another node and",
    "start": "1181039",
    "end": "1182960"
  },
  {
    "text": "the original container will not know",
    "start": "1182960",
    "end": "1184880"
  },
  {
    "text": "that a snapshot of it has been taken",
    "start": "1184880",
    "end": "1187679"
  },
  {
    "text": "only the cubelet api is being extended",
    "start": "1187679",
    "end": "1189840"
  },
  {
    "text": "and only the checkpointing feature is",
    "start": "1189840",
    "end": "1191440"
  },
  {
    "text": "being added to the cubelet",
    "start": "1191440",
    "end": "1193200"
  },
  {
    "text": "which will be an alpha feature in",
    "start": "1193200",
    "end": "1194799"
  },
  {
    "text": "version 1.25",
    "start": "1194799",
    "end": "1196720"
  },
  {
    "text": "the restore portion of this will be",
    "start": "1196720",
    "end": "1198320"
  },
  {
    "text": "implemented in the container engines",
    "start": "1198320",
    "end": "1200559"
  },
  {
    "text": "so once cr once the cri api has been",
    "start": "1200559",
    "end": "1203520"
  },
  {
    "text": "extended for checkpointing cryo will add",
    "start": "1203520",
    "end": "1205600"
  },
  {
    "text": "in the resource support as well",
    "start": "1205600",
    "end": "1208400"
  },
  {
    "text": "and finally crowd can now export open",
    "start": "1208400",
    "end": "1210480"
  },
  {
    "text": "telemetry trace data when needed it is",
    "start": "1210480",
    "end": "1213120"
  },
  {
    "text": "currently an experimental phase as you",
    "start": "1213120",
    "end": "1214799"
  },
  {
    "text": "wait for cubelet to get support for it",
    "start": "1214799",
    "end": "1216400"
  },
  {
    "text": "as well",
    "start": "1216400",
    "end": "1217520"
  },
  {
    "text": "this will be happening in version 1.25",
    "start": "1217520",
    "end": "1221200"
  },
  {
    "text": "so yeah a lot of exciting stuff coming",
    "start": "1221200",
    "end": "1223039"
  },
  {
    "text": "up for cryo",
    "start": "1223039",
    "end": "1224400"
  },
  {
    "text": "and these are all the updates that we",
    "start": "1224400",
    "end": "1226080"
  },
  {
    "text": "have uh for you on how crying continues",
    "start": "1226080",
    "end": "1228240"
  },
  {
    "text": "to remain secure performant and boring",
    "start": "1228240",
    "end": "1230799"
  },
  {
    "text": "as ever we can take any questions now or",
    "start": "1230799",
    "end": "1233280"
  },
  {
    "text": "you can also find us in the cryo channel",
    "start": "1233280",
    "end": "1235120"
  },
  {
    "text": "on the kubernetes slack if you have any",
    "start": "1235120",
    "end": "1236640"
  },
  {
    "text": "questions later",
    "start": "1236640",
    "end": "1237919"
  },
  {
    "text": "thank you for attending our talk",
    "start": "1237919",
    "end": "1241759"
  }
]