[
  {
    "start": "0",
    "end": "74000"
  },
  {
    "text": "okay we're going to get started hello everyone thank you so much for",
    "start": "4799",
    "end": "10080"
  },
  {
    "text": "joining us for today's cncf webinar",
    "start": "10080",
    "end": "15120"
  },
  {
    "text": "event-driven architecture with k-native events i'm jerry fellain and i will be moderating today's webinar and we would",
    "start": "15679",
    "end": "22400"
  },
  {
    "text": "like to welcome our presenters today nicholas lopez senior software engineer at google",
    "start": "22400",
    "end": "28080"
  },
  {
    "text": "and brian zimmerman product manager at google we just have a few housekeeping items before we get started",
    "start": "28080",
    "end": "33920"
  },
  {
    "text": "during the webinar you were not able to talk as an attendee there is a q a box at the bottom of your screen so please",
    "start": "33920",
    "end": "39360"
  },
  {
    "text": "feel free to drop your questions in there and we will get to as many as we can at the end this is an official webinar of the cncf",
    "start": "39360",
    "end": "45680"
  },
  {
    "text": "and as such is subject to the cncf code of conduct so please do not add anything to the",
    "start": "45680",
    "end": "50800"
  },
  {
    "text": "chatter questions that are in violation of the code of conduct please be respectful of your fellow participants and presenters",
    "start": "50800",
    "end": "57360"
  },
  {
    "text": "and please also note that the recording and slides will be posted later today to the cncf webinar page at cncf dot io",
    "start": "57360",
    "end": "63760"
  },
  {
    "text": "slash webinars and with that i will hand it over to nicholas and brian for today's",
    "start": "63760",
    "end": "69759"
  },
  {
    "text": "presentation awesome thank you very much for the great introduction my name is brian",
    "start": "70840",
    "end": "78000"
  },
  {
    "text": "zimmerman and i'm a product manager here at google i focus on the serverless part of our offering",
    "start": "78000",
    "end": "84799"
  },
  {
    "text": "and specifically on our event-based products",
    "start": "84799",
    "end": "89680"
  },
  {
    "text": "hi everyone i'm nick lopez i'm a senior software engineer here at google and i work with a team that builds uh",
    "start": "91680",
    "end": "98320"
  },
  {
    "text": "key native eventing and other related products great so today we're going to be talking",
    "start": "98320",
    "end": "104079"
  },
  {
    "text": "about k-native eventing we'll start out with some basic concepts",
    "start": "104079",
    "end": "109600"
  },
  {
    "text": "uh in in first of all we need to talk about the history of how we got to to this place when it comes to the need for",
    "start": "109600",
    "end": "115680"
  },
  {
    "text": "vendor and architecture and so we'll start talking about the the rise of mark microservices",
    "start": "115680",
    "end": "121200"
  },
  {
    "text": "then we'll talk about the advantages and the place that event driven architecture has in customer ecosystems then we'll introduce",
    "start": "121200",
    "end": "127600"
  },
  {
    "text": "k-native eventing core concepts and its components finally we'll have a demo",
    "start": "127600",
    "end": "133040"
  },
  {
    "text": "that actually goes through this in action and then we'll talk about the vibrant community that is behind cane native and",
    "start": "133040",
    "end": "139599"
  },
  {
    "text": "how you can get involved so to start we'll talk about the rise of",
    "start": "139599",
    "end": "144959"
  },
  {
    "start": "142000",
    "end": "359000"
  },
  {
    "text": "microservices so going back in time most applications",
    "start": "144959",
    "end": "150560"
  },
  {
    "text": "were always built as a monolith and when i say monolith in this case i'm referring to an application where",
    "start": "150560",
    "end": "155840"
  },
  {
    "text": "there's that single application layer that contains everything integrated into that one platform everything required",
    "start": "155840",
    "end": "161920"
  },
  {
    "text": "for the application so take an example of an e-commerce store all of my services whether they be",
    "start": "161920",
    "end": "168319"
  },
  {
    "text": "processing payments serving up the website managing my customers sending recommendations all of that is done by",
    "start": "168319",
    "end": "174400"
  },
  {
    "text": "that one piece of code or large piece of code and not separated",
    "start": "174400",
    "end": "179519"
  },
  {
    "text": "into individual services there are some inherent issues in this particular pattern",
    "start": "179519",
    "end": "185920"
  },
  {
    "text": "most notably this can scale in only one direction that's vertically you can create bigger machines with a",
    "start": "185920",
    "end": "192400"
  },
  {
    "text": "little work you can add more machines but you can't scale out individual components of the application",
    "start": "192400",
    "end": "198879"
  },
  {
    "text": "secondly it can be very overwhelming to build deploy and maintain in terms of the application as it grows",
    "start": "198879",
    "end": "206000"
  },
  {
    "text": "you could imagine as you add more and more features functionality and teams to your application or your application",
    "start": "206000",
    "end": "212400"
  },
  {
    "text": "ecosystem things can become unwieldy in terms of impact from one system to another",
    "start": "212400",
    "end": "217920"
  },
  {
    "text": "this makes deployment management and coordination very very difficult over time",
    "start": "217920",
    "end": "224720"
  },
  {
    "text": "and similarly it can become a nightmare to change anything any change that one team makes by virtue",
    "start": "224720",
    "end": "231440"
  },
  {
    "text": "of it being part of that same system could affect the whole or any of the other related teams",
    "start": "231440",
    "end": "238159"
  },
  {
    "text": "so this can become a nightmare to manage and mitigate the risk of change",
    "start": "238159",
    "end": "243920"
  },
  {
    "text": "so the solution to this is microservices which i'm sure everybody here is familiar with",
    "start": "243920",
    "end": "249519"
  },
  {
    "text": "and talking about the migration path people typically don't flip a switch and go from a monolith to microservices they",
    "start": "249519",
    "end": "255439"
  },
  {
    "text": "typically will migrate in a staged way starting by separating out a couple key components that may benefit most",
    "start": "255439",
    "end": "261759"
  },
  {
    "text": "into their own services attach the core monolith this will happen over time bit by bit",
    "start": "261759",
    "end": "269040"
  },
  {
    "text": "until you reach the end state where you have all of your services in a microservice architecture",
    "start": "269040",
    "end": "275360"
  },
  {
    "text": "in its final look this appears to be a spider web of complex interactions among many microservices",
    "start": "275360",
    "end": "282479"
  },
  {
    "text": "this provides separation of concerns with loosely coupled services that promotes agility",
    "start": "282479",
    "end": "287600"
  },
  {
    "text": "makes it easier to maintain and perhaps most importantly this",
    "start": "287600",
    "end": "294000"
  },
  {
    "text": "creates the ability to scale not just vertically but also horizontally that way you can meet the",
    "start": "294000",
    "end": "300080"
  },
  {
    "text": "demand and need to ensure the best customer experience however that demand pattern appears",
    "start": "300080",
    "end": "307758"
  },
  {
    "text": "services can be scaled independently to meet that demand without impact to the rest of the",
    "start": "308160",
    "end": "313360"
  },
  {
    "text": "application so this is a massively improved pattern but there are some inherent challenges",
    "start": "313360",
    "end": "321280"
  },
  {
    "text": "first of all as i mentioned that spiderweb of point-to-point interactions can be very complex",
    "start": "321280",
    "end": "327840"
  },
  {
    "text": "despite the loose coupling changing any one service can have significant upstream or downstream",
    "start": "327840",
    "end": "333039"
  },
  {
    "text": "impact on other services you could see that adding or removing",
    "start": "333039",
    "end": "338880"
  },
  {
    "text": "services actually would require changing the other services that either expect input from or are",
    "start": "338880",
    "end": "345360"
  },
  {
    "text": "sending input to the downstream services if your teams operate in a true",
    "start": "345360",
    "end": "351520"
  },
  {
    "text": "walled garden distributed model predicting impact may be very difficult and require a lot of coordination",
    "start": "351520",
    "end": "357440"
  },
  {
    "text": "which can be complex so what's the answer to the problems that microservices",
    "start": "357440",
    "end": "363120"
  },
  {
    "start": "359000",
    "end": "521000"
  },
  {
    "text": "create don't get me wrong microservices is a great application pattern that solves all of the problems",
    "start": "363120",
    "end": "368400"
  },
  {
    "text": "we talked about when it comes to monoliths and even more event-driven architecture is an attempt to try and",
    "start": "368400",
    "end": "375360"
  },
  {
    "text": "solve some of those issues with complex spiderweb microservice applications to understand this first let's talk",
    "start": "375360",
    "end": "382000"
  },
  {
    "text": "about what's an event so here's some key concepts to get there",
    "start": "382000",
    "end": "388880"
  },
  {
    "text": "first we start with an occurrence occurrence is something that is incurred within your application or environment",
    "start": "388880",
    "end": "395280"
  },
  {
    "text": "that could warrant an action the event is simply a statement of fact",
    "start": "395280",
    "end": "402160"
  },
  {
    "text": "it contains information about the occurrence as well as context such as where the occurrence resided",
    "start": "402160",
    "end": "409520"
  },
  {
    "text": "because the event represents fact it does not need to include any information about the destination",
    "start": "409520",
    "end": "415599"
  },
  {
    "text": "the producer thus has no expectation of how the event is to be consumed",
    "start": "415599",
    "end": "420720"
  },
  {
    "text": "this kind of pattern is key to the power of this type of architecture",
    "start": "420720",
    "end": "427039"
  },
  {
    "text": "the event is then triggered uh sorry the event then triggers an action",
    "start": "427520",
    "end": "432639"
  },
  {
    "text": "and we'll describe how this works later specifically with k-native eventing in simple terms building in an",
    "start": "432639",
    "end": "438479"
  },
  {
    "text": "event-driven way ensures that you are reacting to the facts in your environment or facts about your application",
    "start": "438479",
    "end": "444720"
  },
  {
    "text": "rather than having to deconstruct every point-to-point interaction as needed",
    "start": "444720",
    "end": "450800"
  },
  {
    "text": "let's consider an example a new user is added to my ecommerce store so in a microservice application",
    "start": "450800",
    "end": "457520"
  },
  {
    "text": "that i would maybe have a new user service or something responsible for that it would then have to write to the",
    "start": "457520",
    "end": "463120"
  },
  {
    "text": "database once complete signal to the email service that would send the welcome email",
    "start": "463120",
    "end": "468479"
  },
  {
    "text": "and likely a host of other onboarding activities that would be required when that new user is added to the system",
    "start": "468479",
    "end": "474800"
  },
  {
    "text": "now let's consider i've entered into a new market and i need to check for compliance against embargoed countries",
    "start": "474800",
    "end": "480319"
  },
  {
    "text": "or user lists this is an incremental addition to my application and in a microservice architecture would",
    "start": "480319",
    "end": "486800"
  },
  {
    "text": "require for you to change that existing application i would need to update the new user service potentially other services that",
    "start": "486800",
    "end": "493520"
  },
  {
    "text": "depend on the completion of that compliance and then build the compliance service as well",
    "start": "493520",
    "end": "498960"
  },
  {
    "text": "and then update them all together because there is the requirement of interaction so i need to manage that",
    "start": "498960",
    "end": "504160"
  },
  {
    "text": "deployment you can imagine how this is very complex in an event-driven pattern i only need",
    "start": "504160",
    "end": "509520"
  },
  {
    "text": "to build my new service and respond to the new user event this makes build and deployment much",
    "start": "509520",
    "end": "514719"
  },
  {
    "text": "simpler and i don't have to manage the concerns of the other services we'll talk in a moment about how this",
    "start": "514719",
    "end": "520800"
  },
  {
    "text": "works specifically with k-native eventing",
    "start": "520800",
    "end": "525519"
  },
  {
    "start": "521000",
    "end": "647000"
  },
  {
    "text": "so in an event-driven pattern there are three key concepts producers the intermediary",
    "start": "525839",
    "end": "532240"
  },
  {
    "text": "and the consumers your services don't communicate directly to each other",
    "start": "532240",
    "end": "538080"
  },
  {
    "text": "instead they communicate to an event intermediary and we'll discuss what that looks like",
    "start": "538080",
    "end": "543440"
  },
  {
    "text": "in canadian eventing specifically that intermediary will then communicate directly with the consumer applications",
    "start": "543440",
    "end": "550399"
  },
  {
    "text": "in some cases there could be several layers of intermediaries but in general for our purposes we'll talk about just",
    "start": "550399",
    "end": "556240"
  },
  {
    "text": "one layer we'll discuss this in a moment but it should be noted that the producer",
    "start": "556240",
    "end": "562720"
  },
  {
    "text": "uh nee does not need to be a service within your application that you create instead",
    "start": "562720",
    "end": "568160"
  },
  {
    "text": "it could be a source that you input to react to the occurrence and deliver the corresponding int event",
    "start": "568160",
    "end": "575200"
  },
  {
    "text": "to the intermediary so a service running in your kubernetes environment can either",
    "start": "575200",
    "end": "580320"
  },
  {
    "text": "be a producer or a consumer or both actually in fact for this pattern to",
    "start": "580320",
    "end": "585839"
  },
  {
    "text": "replace the spiderweb of concerns you saw earlier services may likely have to be both producers and consumers",
    "start": "585839",
    "end": "593920"
  },
  {
    "text": "what are the advantages of this type of system so this creates a fully decoupled architecture it's no longer",
    "start": "596399",
    "end": "602800"
  },
  {
    "text": "required to update upstream or downstream services as they are now fully decoupled having true separation of",
    "start": "602800",
    "end": "609680"
  },
  {
    "text": "concern this also leads to high scalability",
    "start": "609680",
    "end": "615440"
  },
  {
    "text": "and perhaps most importantly it can extend organically we discussed in the earlier example of",
    "start": "615920",
    "end": "621120"
  },
  {
    "text": "having to add that new compliance service in this type of pattern we wouldn't have to affect any",
    "start": "621120",
    "end": "627120"
  },
  {
    "text": "of the other components of our application in a microservices pattern you of course would have to",
    "start": "627120",
    "end": "633200"
  },
  {
    "text": "so in a lot of ways when you are intending to extend your application which most of us are this model offers the",
    "start": "633200",
    "end": "641120"
  },
  {
    "text": "superior ability to do that organically without having to worry about what it could break in the past",
    "start": "641120",
    "end": "647839"
  },
  {
    "text": "so let's see how k native can fit into this candidate of eventing is our",
    "start": "648160",
    "end": "653440"
  },
  {
    "text": "intermediary of choice it is a set of composable primitives to enable late binding of producers and",
    "start": "653440",
    "end": "659200"
  },
  {
    "text": "consumers for an intermediary to work there needs to be some standardization otherwise you",
    "start": "659200",
    "end": "665519"
  },
  {
    "text": "actually still have to build in a shared understanding into your code for example what the messages will look",
    "start": "665519",
    "end": "671200"
  },
  {
    "text": "like how they'll be delivered to address this k-native utilizes the cloud events",
    "start": "671200",
    "end": "677200"
  },
  {
    "text": "format as the message envelope this is of course a cncf project",
    "start": "677200",
    "end": "683040"
  },
  {
    "text": "the producers in this case are referred to as k-native sources a source could be one of your",
    "start": "683600",
    "end": "690160"
  },
  {
    "text": "services by means of raising what we refer to as a custom event delivered directly to the intermediary",
    "start": "690160",
    "end": "696399"
  },
  {
    "text": "however in k-native there is also a vibrant community of sources that allow you to react to facts within",
    "start": "696399",
    "end": "702399"
  },
  {
    "text": "or outside your application without the need to directly communicate or write them yourselves",
    "start": "702399",
    "end": "707519"
  },
  {
    "text": "for example there exists today a k-native source for github kafkasource and many more",
    "start": "707519",
    "end": "715120"
  },
  {
    "text": "the consumer is any service that can receive the event and the broker represents the event mesh",
    "start": "715360",
    "end": "723279"
  },
  {
    "text": "events are sent to the broker and then sent along to any specific consumer the trigger is the entity",
    "start": "723279",
    "end": "729760"
  },
  {
    "text": "that defines the subscription to a particular event by said consumer and thus directs the filtering",
    "start": "729760",
    "end": "735279"
  },
  {
    "text": "appropriately another key concept to talk about is event source registry and event",
    "start": "735279",
    "end": "742959"
  },
  {
    "text": "registry this is a key component to developer experience",
    "start": "742959",
    "end": "748000"
  },
  {
    "text": "if you have to if every developer has to learn from square one what events are available",
    "start": "748000",
    "end": "753600"
  },
  {
    "text": "what sources are available it makes it a lot more difficult so there exists a pattern of an event and source registry where",
    "start": "753600",
    "end": "760240"
  },
  {
    "text": "you can learn what can be added and what events can be reacted upon",
    "start": "760240",
    "end": "765519"
  },
  {
    "text": "there are more primitives to consider such as sequences channels and flows which we'll discuss later on today",
    "start": "765519",
    "end": "773839"
  },
  {
    "start": "780000",
    "end": "1023000"
  },
  {
    "text": "okay so without further ado that's enough talking let's see this in action next i'm going",
    "start": "780959",
    "end": "787760"
  },
  {
    "text": "to hand things over to nick who will show you how this works in real life showing you actual application of the",
    "start": "787760",
    "end": "794160"
  },
  {
    "text": "concepts we talked about then afterwards we're going to deep dive into some of the things you saw to discuss the",
    "start": "794160",
    "end": "799760"
  },
  {
    "text": "concepts in more detail over to you nick thanks brian",
    "start": "799760",
    "end": "806079"
  },
  {
    "text": "so what i'm going to be showing you today is an image processing processing pipeline application we're",
    "start": "806079",
    "end": "812320"
  },
  {
    "text": "going to be seeing some of the concepts that brian just introduced a few slides ago and we're gonna actually uh see how we",
    "start": "812320",
    "end": "818959"
  },
  {
    "text": "can connect the services by a creative event so what we're looking at here is a setup",
    "start": "818959",
    "end": "825040"
  },
  {
    "text": "in which we have a gke cluster uh kubernetes engine cluster running it's an image processing pipeline as i",
    "start": "825040",
    "end": "831760"
  },
  {
    "text": "was mentioning so the purpose of this pipeline is that users uh on the left hand side they can drop",
    "start": "831760",
    "end": "837279"
  },
  {
    "text": "images on uh what we call heal the images input this uh cloud storage bucket and uh",
    "start": "837279",
    "end": "845279"
  },
  {
    "text": "what we will want to do is to connect this via a source that we will be looking in a minute",
    "start": "845279",
    "end": "850399"
  },
  {
    "text": "in detail which will trigger an event that will be received by our filter service",
    "start": "850399",
    "end": "855519"
  },
  {
    "text": "our filter service will be in charge of uh filtering any images that we don't want to process in our system if they have content that",
    "start": "855519",
    "end": "861760"
  },
  {
    "text": "is undesired and we will be using the vision api to do this after this",
    "start": "861760",
    "end": "866880"
  },
  {
    "text": "uh the filter will be producing an event as well it will be a custom event which will be",
    "start": "866880",
    "end": "872399"
  },
  {
    "text": "sent to the broker once again the resizer on the label or service will",
    "start": "872399",
    "end": "878160"
  },
  {
    "text": "be receiving that event and they will be in charge of changing the size of the image and identifying",
    "start": "878160",
    "end": "883760"
  },
  {
    "text": "tags for the image respectively and finally we have a watermarker service",
    "start": "883760",
    "end": "889120"
  },
  {
    "text": "in the middle which will be receiving an image we'll be receiving an event produced by",
    "start": "889120",
    "end": "894160"
  },
  {
    "text": "the resizer service and this service will be adding a watermark",
    "start": "894160",
    "end": "899440"
  },
  {
    "text": "to our images and all of the resizer watermarker and label services",
    "start": "899440",
    "end": "905199"
  },
  {
    "text": "will be dropping the results of their processing into a cloud stretch bucket",
    "start": "905199",
    "end": "910959"
  },
  {
    "text": "as well which we have called here the images output and which would be consumed by end users",
    "start": "910959",
    "end": "917040"
  },
  {
    "text": "of this image processing pipeline",
    "start": "917040",
    "end": "921279"
  },
  {
    "text": "so uh uh we already have the setup for some of these pieces in our current uh running uh cluster",
    "start": "925199",
    "end": "932959"
  },
  {
    "text": "uh what we will be doing specifically during our demo is creating all of this uh arrows that",
    "start": "932959",
    "end": "938160"
  },
  {
    "text": "you see here uh specifically we're going to be creating the arrows to connect via advanced images inputs",
    "start": "938160",
    "end": "945040"
  },
  {
    "text": "with uh services in our gke cluster and to connect the services in this gk",
    "start": "945040",
    "end": "951279"
  },
  {
    "text": "cluster so we'll be setting up all of these in the next few slides the first one that we're going to be",
    "start": "951279",
    "end": "956399"
  },
  {
    "text": "setting specifically is a cloud storage source so what this one will be defining and",
    "start": "956399",
    "end": "961839"
  },
  {
    "text": "we'll look at exactly what it looks like uh in a yaml file in a little bit in the demo uh",
    "start": "961839",
    "end": "968240"
  },
  {
    "text": "this uh cloud storage source it will describe that one and over an object gets stored in our input",
    "start": "968240",
    "end": "974720"
  },
  {
    "text": "bucket uh an event will be sent to our cluster to our broker and our cluster",
    "start": "974720",
    "end": "983120"
  },
  {
    "text": "after that we'll be setting up a trigger the trigger will allow us to uh route the event from",
    "start": "983120",
    "end": "989759"
  },
  {
    "text": "the broker to the filter service and right after that we're going to be",
    "start": "989759",
    "end": "995519"
  },
  {
    "text": "setting up some custom triggers for the events that are produced by these services uh the triggers uh will be configured so",
    "start": "995519",
    "end": "1002560"
  },
  {
    "text": "that their resizer labeler and watermarker services consume the events that they're interested",
    "start": "1002560",
    "end": "1007600"
  },
  {
    "text": "in consuming okay so let's go ahead and jump to",
    "start": "1007600",
    "end": "1015759"
  },
  {
    "text": "my screen brian if you don't mind and i'll show this in action",
    "start": "1015759",
    "end": "1025839"
  },
  {
    "start": "1023000",
    "end": "1412000"
  },
  {
    "text": "okay can you guys see my",
    "start": "1031439",
    "end": "1036159"
  },
  {
    "text": "terminal",
    "start": "1036839",
    "end": "1039839"
  },
  {
    "text": "okay yes thank you so the first one we're going to check is",
    "start": "1042400",
    "end": "1047839"
  },
  {
    "text": "we have our cluster running and what we're going to do is we're going to check that we have our eventing pots running so the bringing up",
    "start": "1047839",
    "end": "1055120"
  },
  {
    "text": "of the cluster and starting up of eventing takes a couple of minutes so we did that before the demo so that we make this a little bit",
    "start": "1055120",
    "end": "1061280"
  },
  {
    "text": "faster and uh what we see here is that we have some controller and work web hook",
    "start": "1061280",
    "end": "1068160"
  },
  {
    "text": "running uh in a couple of namespaces corresponding to our services uh for creative eventing",
    "start": "1068160",
    "end": "1076160"
  },
  {
    "text": "and we're also gonna be listing uh the services that we're",
    "start": "1076160",
    "end": "1083440"
  },
  {
    "text": "going to be connecting via our example so we have the filter the labeler the",
    "start": "1083440",
    "end": "1089039"
  },
  {
    "text": "recessor and the watermarker these are key native services we could list them with that gene cloud command",
    "start": "1089039",
    "end": "1095200"
  },
  {
    "text": "but we could also leave them list them with a cube ctl command",
    "start": "1095200",
    "end": "1100160"
  },
  {
    "text": "and additionally what we have is a couple of buckets",
    "start": "1105200",
    "end": "1110240"
  },
  {
    "text": "where we're going to be leaving our input images which we call the image input bucket and",
    "start": "1110240",
    "end": "1116559"
  },
  {
    "text": "where we're going to leaving our output images where the servers are going to be dropping the output images",
    "start": "1116559",
    "end": "1123840"
  },
  {
    "text": "so these buckets are currently empty",
    "start": "1126559",
    "end": "1130559"
  },
  {
    "text": "and the first thing that we're going to do now is bring up our broker so we're going to use a g-clock",
    "start": "1132400",
    "end": "1138640"
  },
  {
    "text": "command to bring up our broker but behind this g-clock command is a siri uh simple yamo that is just bringing up",
    "start": "1138640",
    "end": "1145039"
  },
  {
    "text": "a default broker and here we're just checking out the",
    "start": "1145039",
    "end": "1150960"
  },
  {
    "text": "status bar broker it's ready to be used",
    "start": "1150960",
    "end": "1156240"
  },
  {
    "text": "next thing that we're going to do is we're going to be creating our cloud storage source the first arrow that we saw in the slides a little bit",
    "start": "1156880",
    "end": "1163440"
  },
  {
    "text": "ago so we're going to be just showing the contents of that file",
    "start": "1163440",
    "end": "1169280"
  },
  {
    "text": "it's a simple yaml for a cloud storage source type of resource it's back it's pointing",
    "start": "1169280",
    "end": "1176960"
  },
  {
    "text": "to a bucket which is our input bucket and it's pointing to sync to our",
    "start": "1176960",
    "end": "1183760"
  },
  {
    "text": "broker that we just created a couple of seconds ago",
    "start": "1183760",
    "end": "1193679"
  },
  {
    "text": "our next demo that we're going to be applying is for the filter trigger the first uh trigger that",
    "start": "1193679",
    "end": "1200240"
  },
  {
    "text": "i showed you so again this is a resource uh here for a trigger we see that it has a",
    "start": "1200240",
    "end": "1208400"
  },
  {
    "text": "filter on a specific type of event which is a cloud storage object",
    "start": "1208400",
    "end": "1215280"
  },
  {
    "text": "finalized and the subscriber for that type of event is the filter service so the cloud storage service",
    "start": "1215280",
    "end": "1222880"
  },
  {
    "text": "that we just uh created a little bit ago we'll be creating events of this type which will be",
    "start": "1222880",
    "end": "1228240"
  },
  {
    "text": "then routed by the broker to our service filter",
    "start": "1228240",
    "end": "1235840"
  },
  {
    "text": "uh now we're going to be applying another trigger for the labeler",
    "start": "1237760",
    "end": "1243120"
  },
  {
    "text": "this is the service that's in charge of uh receiving the image that has been filtered so it is actually receiving the filter",
    "start": "1243120",
    "end": "1251520"
  },
  {
    "text": "here is for that specific type of events that our filter server is going to be producing",
    "start": "1251520",
    "end": "1258320"
  },
  {
    "text": "and it's pointing to the subscriber being the service labeler",
    "start": "1258320",
    "end": "1263840"
  },
  {
    "text": "we're going to be applying a very similar trigger for a resizer",
    "start": "1269440",
    "end": "1274480"
  },
  {
    "text": "so it has the same type of filter in that it filters the same type of events",
    "start": "1274480",
    "end": "1279520"
  },
  {
    "text": "file uploaded but in this case our subscriber is our resizer service",
    "start": "1279520",
    "end": "1286159"
  },
  {
    "text": "so here we can see how with the same type of event uh produced by the filter service we can",
    "start": "1286159",
    "end": "1292559"
  },
  {
    "text": "have two other services downstream that are going to be connected without having any of the knowledge of the other",
    "start": "1292559",
    "end": "1299919"
  },
  {
    "text": "one and uh the last let me just go ahead and clear this for a second",
    "start": "1299919",
    "end": "1307520"
  },
  {
    "text": "our last trigger that we're going to be creating is for the water marker service",
    "start": "1308480",
    "end": "1314240"
  },
  {
    "text": "apologies for the background noise so this is our last trigger uh this one",
    "start": "1314240",
    "end": "1320000"
  },
  {
    "text": "is going to be filtering of events of a type uh file resized",
    "start": "1320000",
    "end": "1325520"
  },
  {
    "text": "so this corresponds to events produced by our resizing service and our subscriber in this case is our",
    "start": "1325520",
    "end": "1331840"
  },
  {
    "text": "water marker service okay so at this point we",
    "start": "1331840",
    "end": "1338480"
  },
  {
    "text": "have all of our services running and we have connected them effectively",
    "start": "1338480",
    "end": "1344240"
  },
  {
    "text": "with our storage source and our triggers so we're going to run uh a cube ctl command to get our",
    "start": "1344240",
    "end": "1351360"
  },
  {
    "text": "storage sources and another one to get our triggers just to make sure that everything is running",
    "start": "1351360",
    "end": "1357360"
  },
  {
    "text": "as expected so we see our storage source here and it's ready and we see our triggers that have been",
    "start": "1357360",
    "end": "1364400"
  },
  {
    "text": "set up for our four services that are also ready and running",
    "start": "1364400",
    "end": "1370799"
  },
  {
    "text": "okay so now this should be ready uh to actually execute our image processing pipeline so",
    "start": "1372559",
    "end": "1378240"
  },
  {
    "text": "at this point what we're gonna be doing is we're gonna be copying",
    "start": "1378240",
    "end": "1384080"
  },
  {
    "text": "a file that i have here prepared let's go ahead and copy a",
    "start": "1384720",
    "end": "1391760"
  },
  {
    "text": "couple of files to our image input",
    "start": "1391760",
    "end": "1395760"
  },
  {
    "text": "buckets and at this point our pipeline should be processing so",
    "start": "1400840",
    "end": "1406400"
  },
  {
    "text": "uh one of the features that k native eventing has is that it also produces traces",
    "start": "1406400",
    "end": "1412720"
  },
  {
    "start": "1412000",
    "end": "1677000"
  },
  {
    "text": "so traces can be consumed by a sipkin or by a stack driver what we're seeing",
    "start": "1412720",
    "end": "1418320"
  },
  {
    "text": "here is what the traces look like in stackdriver let me go ahead and refresh this window to see if we can see",
    "start": "1418320",
    "end": "1424720"
  },
  {
    "text": "the traces for the events that just occurred a little bit ago for these two images",
    "start": "1424720",
    "end": "1430480"
  },
  {
    "text": "that we uploaded to our buckets",
    "start": "1430480",
    "end": "1445279"
  },
  {
    "text": "okay so here are two dots that correspond to our events that we just sent we can go ahead",
    "start": "1445279",
    "end": "1451919"
  },
  {
    "text": "and check one of these out let's go ahead and expand it and we can see here uh the",
    "start": "1451919",
    "end": "1459760"
  },
  {
    "text": "trace of our event as it passed through the broker as it then went to our filter",
    "start": "1459760",
    "end": "1466799"
  },
  {
    "text": "service that's then it went through our trigger",
    "start": "1466799",
    "end": "1473120"
  },
  {
    "text": "for the resizer and then it went through a trigger for a",
    "start": "1473120",
    "end": "1479039"
  },
  {
    "text": "water marker and it was successfully processed we can check details of uh all the time",
    "start": "1479039",
    "end": "1486880"
  },
  {
    "text": "in that interface as well i'm not going to go into many more details here let's go ahead and check out first",
    "start": "1486880",
    "end": "1494240"
  },
  {
    "text": "the output of this processing which should be ready so i'm just listing out the files in our",
    "start": "1494240",
    "end": "1501120"
  },
  {
    "text": "image output bucket and we see that we had three files produced for the paris file that i uploaded and three",
    "start": "1501120",
    "end": "1508240"
  },
  {
    "text": "more files for the river file that i uploaded corresponding to the resize file the",
    "start": "1508240",
    "end": "1515200"
  },
  {
    "text": "file with the labels which is the text file and our watermark file",
    "start": "1515200",
    "end": "1520400"
  },
  {
    "text": "so we can also go ahead and check out here for instance one of these label files",
    "start": "1520400",
    "end": "1527200"
  },
  {
    "text": "which got produced so it has all the labels uh identified from that image and we can",
    "start": "1527200",
    "end": "1534159"
  },
  {
    "text": "also check out n um",
    "start": "1534159",
    "end": "1539520"
  },
  {
    "text": "cloud storage what that resized and water mic file look like",
    "start": "1539520",
    "end": "1557840"
  },
  {
    "text": "so this is the result of our file being resized and watermarked we i also have another tab here with uh",
    "start": "1559440",
    "end": "1566000"
  },
  {
    "text": "what that initial file looked like",
    "start": "1566000",
    "end": "1571840"
  },
  {
    "text": "okay this object is a little bit large but we can have a preview here so the image is actually larger than what it's",
    "start": "1587360",
    "end": "1593440"
  },
  {
    "text": "showing us here so this was our file i got pro system got all those labels",
    "start": "1593440",
    "end": "1598640"
  },
  {
    "text": "and resized and watermarked okay let me just skip here",
    "start": "1598640",
    "end": "1605360"
  },
  {
    "text": "to this last just to wake up for a second",
    "start": "1605360",
    "end": "1611440"
  },
  {
    "text": "before i turn it back to brian what we saw here is this image processing pipeline",
    "start": "1611440",
    "end": "1617760"
  },
  {
    "text": "we had a uh google kubernetes engine running with some services some canadian services",
    "start": "1617760",
    "end": "1624320"
  },
  {
    "text": "already running all of these services were disconnected we had pre-created our storage buckets",
    "start": "1624320",
    "end": "1630000"
  },
  {
    "text": "but these buckets did not have any effect when any action occurred there and we created a",
    "start": "1630000",
    "end": "1636080"
  },
  {
    "text": "storage source and a series of triggers to connect these services and we actually saw this",
    "start": "1636080",
    "end": "1643120"
  },
  {
    "text": "processing happen and we also saw for a couple of minutes",
    "start": "1643120",
    "end": "1648320"
  },
  {
    "text": "there what the tracing of one of those events uh looks like in stackdriver",
    "start": "1648320",
    "end": "1654159"
  },
  {
    "text": "cool so i think with that i'm going to stop sharing my string my screen i'm going to turn it back to you brad",
    "start": "1654159",
    "end": "1662158"
  },
  {
    "text": "thanks nick that was a great demo thank you all right so let's go over at",
    "start": "1662320",
    "end": "1668399"
  },
  {
    "text": "this point uh a few uh concepts that you saw in a in a deeper uh to a deeper level",
    "start": "1668399",
    "end": "1677200"
  },
  {
    "start": "1677000",
    "end": "1744000"
  },
  {
    "text": "but first of all let's just review what you saw here today so in that demo you saw how you can use",
    "start": "1677679",
    "end": "1683600"
  },
  {
    "text": "k-native to set up an event-driven architecture in less than 15 minutes what you saw",
    "start": "1683600",
    "end": "1689520"
  },
  {
    "text": "here was an application with no inter-service communication where we set up the triggers in real time",
    "start": "1689520",
    "end": "1694559"
  },
  {
    "text": "before your eyes and the result was an application that was fully decoupled uh with true separation of concern",
    "start": "1694559",
    "end": "1701840"
  },
  {
    "text": "observability was easy to set up and uh it was easy to understand what was happening with your application as",
    "start": "1701840",
    "end": "1707760"
  },
  {
    "text": "you saw in the tracing as an example you'll notice that we didn't have to update a single line of code",
    "start": "1707760",
    "end": "1714880"
  },
  {
    "text": "or wire up the application during this process obviously your consumer applications do have to be coded to",
    "start": "1714880",
    "end": "1720480"
  },
  {
    "text": "consume the cloud event format but luckily with the cloud event sdk and",
    "start": "1720480",
    "end": "1725760"
  },
  {
    "text": "libraries that's also easy to do and fairly standardized",
    "start": "1725760",
    "end": "1732000"
  },
  {
    "text": "now all of the configuration you saw it wasn't in your code it was other than the consumer that is",
    "start": "1732159",
    "end": "1738399"
  },
  {
    "text": "it was all done via configuring the intermediary so next we're going to talk about some",
    "start": "1738399",
    "end": "1743679"
  },
  {
    "text": "k-native core concepts that you saw today the first and most",
    "start": "1743679",
    "end": "1748960"
  },
  {
    "start": "1744000",
    "end": "1855000"
  },
  {
    "text": "notable is the source so a source is a component that generates or imports",
    "start": "1748960",
    "end": "1754880"
  },
  {
    "text": "events from external sources the main purpose of that source is to produce the event in cloud events",
    "start": "1754880",
    "end": "1761840"
  },
  {
    "text": "format there's lots of different types of sources that come in different packages",
    "start": "1761840",
    "end": "1766880"
  },
  {
    "text": "what they all have in common is that they take care of generating the event so the consumer is fully decoupled from",
    "start": "1766880",
    "end": "1772320"
  },
  {
    "text": "the producer sources are the components that observes",
    "start": "1772320",
    "end": "1777760"
  },
  {
    "text": "and reacts to the fact in the environment or application and delivers the appropriate event to the broker",
    "start": "1777760",
    "end": "1785039"
  },
  {
    "text": "in gcp for example and this is what you saw in in next demo there are many built-in",
    "start": "1785039",
    "end": "1791760"
  },
  {
    "text": "sources related to activity that happens in google cloud such as",
    "start": "1791760",
    "end": "1796960"
  },
  {
    "text": "the source related to the storage bucket this is an example of a vendor-specific source",
    "start": "1796960",
    "end": "1802640"
  },
  {
    "text": "and you didn't have to figure out how to to understand and observe the",
    "start": "1802640",
    "end": "1809440"
  },
  {
    "text": "occurrence that source was built in for you in that vendor-specific way there's also",
    "start": "1809440",
    "end": "1814960"
  },
  {
    "text": "a number of community sources such as github kafka api server source",
    "start": "1814960",
    "end": "1821360"
  },
  {
    "text": "that responds to kubernetes activity and much more and what's really exciting",
    "start": "1821360",
    "end": "1826799"
  },
  {
    "text": "here is as the community grows and that list of sources improves we all benefit from the rapidly expanding way",
    "start": "1826799",
    "end": "1833279"
  },
  {
    "text": "of generating consistent and actionable events we'll talk later about how to get involved",
    "start": "1833279",
    "end": "1838720"
  },
  {
    "text": "with the community but producing your own sources is a really good way to do that",
    "start": "1838720",
    "end": "1844000"
  },
  {
    "text": "especially if what you're if the problem you're solving is likely to be solved by others if we all work together",
    "start": "1844000",
    "end": "1849520"
  },
  {
    "text": "and produce that rich catalog of sources everybody benefits",
    "start": "1849520",
    "end": "1854960"
  },
  {
    "text": "so let's talk about how the sources are implemented k-native is designed to be",
    "start": "1856320",
    "end": "1863120"
  },
  {
    "text": "as native to kubernetes as possible hence the name k-native",
    "start": "1863120",
    "end": "1869200"
  },
  {
    "text": "in that we use the standard way of extending kubernetes the custom resource definition or crd",
    "start": "1869360",
    "end": "1876399"
  },
  {
    "text": "crds define new resource types similar to classes in a programming language these are then instantiated to create",
    "start": "1876399",
    "end": "1883360"
  },
  {
    "text": "custom objects or cos this is similar to an instance in a programming language",
    "start": "1883360",
    "end": "1890320"
  },
  {
    "start": "1890000",
    "end": "1979000"
  },
  {
    "text": "broadly speaking there's two high-level types of sources there's push-based and pull-based push-based sources are",
    "start": "1891519",
    "end": "1899279"
  },
  {
    "text": "where an upstream producer pushes an event directly into an address that",
    "start": "1899279",
    "end": "1904320"
  },
  {
    "text": "must be exposed to the producer so for example if you have a public url exposed",
    "start": "1904320",
    "end": "1909840"
  },
  {
    "text": "and github was to push events into that particular pushed based source that",
    "start": "1909840",
    "end": "1916240"
  },
  {
    "text": "source would then convert it to cloud events format deliver it to the appropriate broker whose trigger would then deliver it to",
    "start": "1916240",
    "end": "1921919"
  },
  {
    "text": "the appropriate consumer these are really easy to scale they can leverage native serving for scale-ups",
    "start": "1921919",
    "end": "1928080"
  },
  {
    "text": "scale down but the disadvantage of course is that you have to expose a public uh",
    "start": "1928080",
    "end": "1935600"
  },
  {
    "text": "url and that that's not the only type of source because for a lot of enterprises that's not going to be possible",
    "start": "1935600",
    "end": "1941279"
  },
  {
    "text": "poll based sources is the solution for that so in a poll based source there is something always running to",
    "start": "1941279",
    "end": "1946880"
  },
  {
    "text": "pull for changes and there's no need to have network access into the source you just have to",
    "start": "1946880",
    "end": "1952559"
  },
  {
    "text": "have network access out from the source to the producer so no endpoint needs to be exposed publicly at",
    "start": "1952559",
    "end": "1958480"
  },
  {
    "text": "all there are some complexities as far as scaling that is handled depending on the",
    "start": "1958480",
    "end": "1964000"
  },
  {
    "text": "implementation that you're using um but these basically allow you to keep",
    "start": "1964000",
    "end": "1969760"
  },
  {
    "text": "your private networks private and they take care of the pulling and then of course delivering to the broker",
    "start": "1969760",
    "end": "1976320"
  },
  {
    "text": "and then ultimately the consumer the next key component we want to talk",
    "start": "1976320",
    "end": "1983200"
  },
  {
    "start": "1979000",
    "end": "2036000"
  },
  {
    "text": "about is the broker and the trigger so these two pieces together make up the event intermediary you saw on previous",
    "start": "1983200",
    "end": "1989600"
  },
  {
    "text": "slides you can treat the broker as a black box that you throw events into",
    "start": "1989600",
    "end": "1995760"
  },
  {
    "text": "and you can think of the trigger as the object that specifies when an event is",
    "start": "1995760",
    "end": "2002240"
  },
  {
    "text": "delivered to the individual consumer a subscription so to speak the event sync",
    "start": "2002240",
    "end": "2009120"
  },
  {
    "text": "can be any addressable candidate of service endpoint etc in our example we were exclusively using",
    "start": "2009120",
    "end": "2014640"
  },
  {
    "text": "k-native services from k-native serving that's the the least amount of friction to get",
    "start": "2014640",
    "end": "2020159"
  },
  {
    "text": "this all started in fact surveying and eventing work really really well together",
    "start": "2020159",
    "end": "2025200"
  },
  {
    "text": "there's a default broker however there are alternate implementations such as the gcb broker and the k-native broker",
    "start": "2025200",
    "end": "2031679"
  },
  {
    "text": "which may be more useful depending on your environment and let's go through a couple of those",
    "start": "2031679",
    "end": "2036880"
  },
  {
    "text": "um examples so here is a brief flow of how things go through the kafka",
    "start": "2036880",
    "end": "2044799"
  },
  {
    "text": "broker as an example so in this case there's the publisher which will then",
    "start": "2044799",
    "end": "2051358"
  },
  {
    "text": "send the request into the multi-tenant ingress from there there are individual kafka",
    "start": "2051359",
    "end": "2058240"
  },
  {
    "text": "topics created for each of these individual events",
    "start": "2058240",
    "end": "2064480"
  },
  {
    "text": "those are sent to the multi-tenant dispatcher that subscribes those topics filters them appropriately and sends",
    "start": "2064800",
    "end": "2071760"
  },
  {
    "text": "them via the configured trigger to the appropriate consumer",
    "start": "2071760",
    "end": "2077520"
  },
  {
    "text": "gcp broker as an example works very similarly the notable differences here are that",
    "start": "2080800",
    "end": "2086960"
  },
  {
    "text": "the pub sub topics uh sorry the topics are pub sub topics",
    "start": "2086960",
    "end": "2092079"
  },
  {
    "text": "that handle the uh the messaging rather than kafka topics but ultimately it's very similar",
    "start": "2092079",
    "end": "2099200"
  },
  {
    "text": "the other fundamental difference here is what happens in the error case when things aren't able to be delivered",
    "start": "2099200",
    "end": "2106000"
  },
  {
    "text": "they're sent to a failure topic and then there is a retry multi-tenant retry service",
    "start": "2106000",
    "end": "2112560"
  },
  {
    "text": "that will watch for those and ensure that they're redelivered to the consumer so that you have at least once delivery",
    "start": "2112560",
    "end": "2120400"
  },
  {
    "start": "2122000",
    "end": "2185000"
  },
  {
    "text": "a couple other pieces to talk about i mentioned this earlier there are additional primitives that are interesting",
    "start": "2123920",
    "end": "2129520"
  },
  {
    "text": "to understand for those looking to extend this model into more complex use cases",
    "start": "2129520",
    "end": "2136000"
  },
  {
    "text": "those are there's messaging they're flows and then there are channels",
    "start": "2136000",
    "end": "2142800"
  },
  {
    "text": "so or sorry sequences so messaging i mentioned earlier um that the channel",
    "start": "2143440",
    "end": "2151440"
  },
  {
    "text": "uh that's an abstraction of a message transport that takes care of things like message persistence",
    "start": "2151440",
    "end": "2157599"
  },
  {
    "text": "the subscription allows listening to messages to a particular channel which allows message delivery many ways",
    "start": "2157599",
    "end": "2164960"
  },
  {
    "text": "to implement this you saw the example of kafka and gcp using pub sub there's also asqs nat",
    "start": "2164960",
    "end": "2172560"
  },
  {
    "text": "etc flows is another interesting concept",
    "start": "2172560",
    "end": "2178240"
  },
  {
    "text": "these allow sequences of events either in sequence or parallel series are parallel rather",
    "start": "2178240",
    "end": "2186240"
  },
  {
    "start": "2185000",
    "end": "2208000"
  },
  {
    "text": "for an example in a sequenced event you could actually have a single event that represents the entire job",
    "start": "2186240",
    "end": "2192960"
  },
  {
    "text": "yet multiple services may have different roles in that particular job they can act on the event and mutate its",
    "start": "2192960",
    "end": "2199520"
  },
  {
    "text": "details to be passed down to the next service allowing you to have that complete unit",
    "start": "2199520",
    "end": "2205200"
  },
  {
    "text": "of work for those who are gcp users you can",
    "start": "2205200",
    "end": "2212320"
  },
  {
    "start": "2208000",
    "end": "2251000"
  },
  {
    "text": "utilize k-native by means of events for cloud run for anthos that has recently been released to beta",
    "start": "2212320",
    "end": "2219040"
  },
  {
    "text": "this product builds on top of the k-native primitives that you saw today to offer an experience but tailored to",
    "start": "2219040",
    "end": "2226839"
  },
  {
    "text": "gcp in particular there's a large number of google provided sources and easy setup so if you're interested",
    "start": "2226839",
    "end": "2234160"
  },
  {
    "text": "in trying out k-native and you're on gcp give it a shot you can find out our quick start start under the",
    "start": "2234160",
    "end": "2240240"
  },
  {
    "text": "documentation at cloud.google.com and we have a link to it later on in the presentation",
    "start": "2240240",
    "end": "2246880"
  },
  {
    "start": "2251000",
    "end": "2295000"
  },
  {
    "text": "so last thing to mention is about the k-native community there is a vibrant community of",
    "start": "2252480",
    "end": "2258320"
  },
  {
    "text": "developers across the globe that are supporting k-native we talked about eventing today however",
    "start": "2258320",
    "end": "2264720"
  },
  {
    "text": "k-native also contains serving and in fact if you use them both it adds additional",
    "start": "2264720",
    "end": "2270000"
  },
  {
    "text": "simplicity and they work really really well together there's over 10 active working groups",
    "start": "2270000",
    "end": "2276160"
  },
  {
    "text": "from 450 contributors there are 15 plus active repositories with over",
    "start": "2276160",
    "end": "2282160"
  },
  {
    "text": "over seven k-native-based offerings from vendors such as google ibm red hat vmware",
    "start": "2282160",
    "end": "2290320"
  },
  {
    "text": "etc okay so what's next",
    "start": "2290320",
    "end": "2298880"
  },
  {
    "start": "2295000",
    "end": "2347000"
  },
  {
    "text": "i'm sure that you've left this presentation being really interested in how canadian of eventing works and perhaps k-native",
    "start": "2298880",
    "end": "2304160"
  },
  {
    "text": "more broadly you can learn about more at k-native.dev docs link provided here this can uh",
    "start": "2304160",
    "end": "2311760"
  },
  {
    "text": "contains everything you need to know on how to get started with k-native if you're a gcp customer and want to do",
    "start": "2311760",
    "end": "2317359"
  },
  {
    "text": "a quick a try of our implementation which will get you familiar with those key concepts and you can extend and",
    "start": "2317359",
    "end": "2323440"
  },
  {
    "text": "play from there here's a link to our quick start documentation which can be found at cloud.google.com",
    "start": "2323440",
    "end": "2330400"
  },
  {
    "text": "dot slash event slash anthoc quickstart link provided here and then to get involved view us on",
    "start": "2330400",
    "end": "2336640"
  },
  {
    "text": "github there you can find out things like uh like how the this is implemented uh and can and",
    "start": "2336640",
    "end": "2343440"
  },
  {
    "text": "start contributing which is really exciting now a couple notes of some other open",
    "start": "2343440",
    "end": "2349920"
  },
  {
    "start": "2347000",
    "end": "2393000"
  },
  {
    "text": "source events that are happening uh provided by google open source live on november 5th we have go day from 9 to 11 pacific time",
    "start": "2349920",
    "end": "2358480"
  },
  {
    "text": "in this session golang experts will share updates on everything from go basics to package discovery and editing tools",
    "start": "2358480",
    "end": "2365280"
  },
  {
    "text": "you'll hear from our partner khan academy who will walk through an interesting use case about how the organization",
    "start": "2365280",
    "end": "2371280"
  },
  {
    "text": "is using go to save time and money on december 3rd there is kubernetes day in this event",
    "start": "2371280",
    "end": "2377520"
  },
  {
    "text": "kubernetes experts at google will cover the life of a kubernetes api admission web hooks how apply works",
    "start": "2377520",
    "end": "2384800"
  },
  {
    "text": "and the distributed value store etcd so we hope to see you all in those events as well they're",
    "start": "2384800",
    "end": "2391680"
  },
  {
    "text": "surely to be interesting again thank you for your time this was great you've been a great audience",
    "start": "2391680",
    "end": "2397839"
  },
  {
    "start": "2393000",
    "end": "2441000"
  },
  {
    "text": "really appreciate it uh if you have questions we want to hear from you feel free to reach out to me directly as",
    "start": "2397839",
    "end": "2404000"
  },
  {
    "text": "i would love to engage with you i'd be happy to answer any questions that you that you have about how you could apply this technology",
    "start": "2404000",
    "end": "2410319"
  },
  {
    "text": "if you want to understand more about the examples and samples we showed you today we're happy to provide and most",
    "start": "2410319",
    "end": "2416880"
  },
  {
    "text": "importantly i'd love to hear about your use cases and scenarios what are you looking for k native eventing to solve",
    "start": "2416880",
    "end": "2423040"
  },
  {
    "text": "do you have a problem and you're not quite sure how to solve it do you have a problem that we're not well positioned to solve yet",
    "start": "2423040",
    "end": "2429680"
  },
  {
    "text": "do you have applications for this technology that you're excited about no matter what i would love to hear from you your",
    "start": "2429680",
    "end": "2435520"
  },
  {
    "text": "feedback really helps us understand where to focus our efforts and it's great to engage with the community",
    "start": "2435520",
    "end": "2442079"
  },
  {
    "start": "2441000",
    "end": "2549000"
  },
  {
    "text": "so brian we already have a few questions here in the q a yeah i can read them out loud and we can",
    "start": "2442079",
    "end": "2447599"
  },
  {
    "text": "go through them if you think that's a good plan the first question is great demo of",
    "start": "2447599",
    "end": "2453359"
  },
  {
    "text": "canadian inventing with gcp just to double check that nothing in demo setup is tied to specific gcp capabilities and",
    "start": "2453359",
    "end": "2459440"
  },
  {
    "text": "it's possible to implement on other clouds using upstream k8 effects",
    "start": "2459440",
    "end": "2466079"
  },
  {
    "text": "so let me answer this first nick and you can add additional color um if i make anything so uh yes",
    "start": "2466079",
    "end": "2472640"
  },
  {
    "text": "everything you saw here can be um can be implemented on uh any on other",
    "start": "2472640",
    "end": "2479520"
  },
  {
    "text": "clouds in fact most of what nick uh showed today was not using the gcpg cloud commands it",
    "start": "2479520",
    "end": "2486240"
  },
  {
    "text": "was using the uh cube cuddle commands um the only exception to that",
    "start": "2486240",
    "end": "2491359"
  },
  {
    "text": "is the source so the gcs bucket was a vendor provided source",
    "start": "2491359",
    "end": "2497920"
  },
  {
    "text": "now you would have to have an equivalent k-native source written for aws or that you wrote yourself for",
    "start": "2497920",
    "end": "2505680"
  },
  {
    "text": "querying another storage location so that would be the only thing you'd have to swap out that was a vendor provided",
    "start": "2505680",
    "end": "2511280"
  },
  {
    "text": "source um but i could imagine that other clouds may have something similar and you could",
    "start": "2511280",
    "end": "2516400"
  },
  {
    "text": "write a source to swap that in and everything else is is all using canadian primitives",
    "start": "2516400",
    "end": "2524720"
  },
  {
    "text": "you saw the implementation we showed was also using the gdcp broker but nothing substantive about the",
    "start": "2524800",
    "end": "2530880"
  },
  {
    "text": "demo you saw required of the gcp broker um the you could be using a",
    "start": "2530880",
    "end": "2537280"
  },
  {
    "text": "uh a different broker as well um there might just be some idiots",
    "start": "2537280",
    "end": "2542319"
  },
  {
    "text": "increasing synchrony's about things like the tracing support",
    "start": "2542319",
    "end": "2550079"
  },
  {
    "start": "2549000",
    "end": "2645000"
  },
  {
    "text": "i don't have anything to add to that that's that's uh a good answer brian let me go ahead and read the next one",
    "start": "2550079",
    "end": "2555200"
  },
  {
    "text": "from rash uh does canadian have any advantage over kafka",
    "start": "2555200",
    "end": "2561440"
  },
  {
    "text": "so again let me start here nick and then you can add more i think i would like to phrase your",
    "start": "2561839",
    "end": "2568560"
  },
  {
    "text": "question slightly differently because the broker which which utilizes the message queue",
    "start": "2568560",
    "end": "2575359"
  },
  {
    "text": "there is a broker right so in that sense it is it can be using kafka right so",
    "start": "2575359",
    "end": "2583520"
  },
  {
    "text": "what does it provide to extend kafka and it's it's all about having that",
    "start": "2583520",
    "end": "2589440"
  },
  {
    "text": "decoupled system where you didn't have to worry about how to communicate with with kafka all of the messages",
    "start": "2589440",
    "end": "2595280"
  },
  {
    "text": "are sent and translated via the source to the cloud events format and then consumed with a cloud event",
    "start": "2595280",
    "end": "2600960"
  },
  {
    "text": "format so that your consumer applications your containers only need to know how to",
    "start": "2600960",
    "end": "2606400"
  },
  {
    "text": "use the cloud sdk the marshalling library in order to understand the details of that event so it was all",
    "start": "2606400",
    "end": "2611760"
  },
  {
    "text": "somewhat standardized and the individual developers of services don't have to",
    "start": "2611760",
    "end": "2617280"
  },
  {
    "text": "have an understanding or appreciation for how that message is delivered nearly as much um and that's a very high",
    "start": "2617280",
    "end": "2624160"
  },
  {
    "text": "level answer um but just the the cole's notes there is it's it's it's not about does it have",
    "start": "2624160",
    "end": "2631280"
  },
  {
    "text": "advantage to kafka it's what does it add on top of maintaining your own kafka implementation",
    "start": "2631280",
    "end": "2636560"
  },
  {
    "text": "and it's it's that we try to maintain uh the the components are maintained for you",
    "start": "2636560",
    "end": "2642480"
  },
  {
    "start": "2645000",
    "end": "2763000"
  },
  {
    "text": "so there's a al also a couple of kafka related questions there uh by managing jingdong the first one is",
    "start": "2646160",
    "end": "2652560"
  },
  {
    "text": "the sk native replacement for other pop-up tools like kafka sure service rabbit mq",
    "start": "2652560",
    "end": "2657760"
  },
  {
    "text": "and the other one which i think you partially answered uh just a bit ago is it possible to elaborate on use cases",
    "start": "2657760",
    "end": "2663359"
  },
  {
    "text": "between using kafka and key native",
    "start": "2663359",
    "end": "2667039"
  },
  {
    "text": "i think you're muted brian right now yeah i think those are similar to the to the to the first",
    "start": "2670480",
    "end": "2676880"
  },
  {
    "text": "question so i'll answer them in the same way you know pub sub for instance is is what's used by the gcp broker kafka is",
    "start": "2676880",
    "end": "2683760"
  },
  {
    "text": "what's used by the kafka broker so it's not a a a replacement thereof it's a",
    "start": "2683760",
    "end": "2689760"
  },
  {
    "text": "an extension extension too",
    "start": "2689760",
    "end": "2693839"
  },
  {
    "text": "thanks brian let's read the next one could you speak to a bit about durability and message",
    "start": "2695920",
    "end": "2702000"
  },
  {
    "text": "processing guarantees support supported by the broker components",
    "start": "2702000",
    "end": "2707440"
  },
  {
    "text": "so i would i don't have specific answers on that one in general i think it depends on which",
    "start": "2709280",
    "end": "2717520"
  },
  {
    "text": "broker component right so in the gcp broker component uh it i i showed in the diagram that there",
    "start": "2717520",
    "end": "2724560"
  },
  {
    "text": "is a a uh an error root topic um that's not the technical name but",
    "start": "2724560",
    "end": "2730720"
  },
  {
    "text": "that's that's the idea and there's also you can utilize a dead letter cue um to react to failures",
    "start": "2730720",
    "end": "2736480"
  },
  {
    "text": "but i think the idiosyncrasies are gonna depend on the broker that you're using what i would suggest is why don't you",
    "start": "2736480",
    "end": "2742000"
  },
  {
    "text": "reach out to me offline so brian zimmerman brian with the y at google.com uh and actually it's if you're still",
    "start": "2742000",
    "end": "2750079"
  },
  {
    "text": "seeing my screen it's there on the screen but uh reach out to me and i will get you a much more well-formed answer",
    "start": "2750079",
    "end": "2757680"
  },
  {
    "text": "very likely pointing to the documentation online that will specifically answer your question",
    "start": "2757680",
    "end": "2763359"
  },
  {
    "start": "2763000",
    "end": "2831000"
  },
  {
    "text": "thanks brian let's go to the next one so does sk native require a broker like kafka to work",
    "start": "2764560",
    "end": "2770079"
  },
  {
    "text": "or is it bundled with its own broker",
    "start": "2770079",
    "end": "2775760"
  },
  {
    "text": "it does require some type of um messaging system right so it doesn't",
    "start": "2775760",
    "end": "2782720"
  },
  {
    "text": "have its own messaging system the channel basically right so there's a kafka channel you can use a pub sub",
    "start": "2782720",
    "end": "2788400"
  },
  {
    "text": "channel and those are implemented in the different brokers like the gcp broker or the kafka broker there's also an in-memory channel so",
    "start": "2788400",
    "end": "2795359"
  },
  {
    "text": "that you don't have to use um a different type of channel which just keeps the the events",
    "start": "2795359",
    "end": "2801359"
  },
  {
    "text": "um in memory it is not recommended for production use but if what you're getting at is",
    "start": "2801359",
    "end": "2807280"
  },
  {
    "text": "i'm trying to develop on my workstation and i don't want to stand up all these extra components just to get my container written",
    "start": "2807280",
    "end": "2813200"
  },
  {
    "text": "that's where the memory channel can help but as far as production implementations",
    "start": "2813200",
    "end": "2818640"
  },
  {
    "text": "to ensure delivery guarantees um you it's not recommended",
    "start": "2818640",
    "end": "2823760"
  },
  {
    "text": "to use in-memory you should use another channel like like calf cut pups of it or etc",
    "start": "2823760",
    "end": "2831520"
  },
  {
    "start": "2831000",
    "end": "2883000"
  },
  {
    "text": "thanks brian last question here on our q a does keynative support",
    "start": "2831520",
    "end": "2837079"
  },
  {
    "text": "amqp 1.0 that's one i'll have to get back to you on so send me an email um",
    "start": "2837079",
    "end": "2844559"
  },
  {
    "text": "brianzamberman at google.com and i will be happy to uh to answer that um offline unless nick",
    "start": "2844559",
    "end": "2851280"
  },
  {
    "text": "you have an answer off top of your head i don't have an answer from the top of my head no sorry",
    "start": "2851280",
    "end": "2858319"
  },
  {
    "text": "i'll answer similarly to the to the next one how does k native compare with other event-driven frameworks such",
    "start": "2858319",
    "end": "2864079"
  },
  {
    "text": "as uh vertex i'm not familiar either with vertex yeah",
    "start": "2864079",
    "end": "2869680"
  },
  {
    "text": "yeah but that reach out to me i'd love to have a conversation of of what are the advantages or disadvantages of vertex that you see",
    "start": "2869680",
    "end": "2877119"
  },
  {
    "text": "and to have a good discussion of what creative eventing does or doesn't compare",
    "start": "2877119",
    "end": "2883599"
  },
  {
    "start": "2883000",
    "end": "3013000"
  },
  {
    "text": "more questions coming in how key native how can kennedy be extended to support",
    "start": "2883760",
    "end": "2889599"
  },
  {
    "text": "serverless event-driven code processing in general i think gcp has the capability already",
    "start": "2889599",
    "end": "2901599"
  },
  {
    "text": "i'm just trying to think through what specifically the use cases you're interested in again",
    "start": "2901599",
    "end": "2907599"
  },
  {
    "text": "i'd be l i'd be happy and love to talk to you about this offline in a deeper way",
    "start": "2907599",
    "end": "2913680"
  },
  {
    "text": "i think the in a high level the approach that we're taking in gcp is that",
    "start": "2913680",
    "end": "2920480"
  },
  {
    "text": "a lot of things that are happening in the environment will uh generate events",
    "start": "2920480",
    "end": "2927280"
  },
  {
    "text": "and the sources that that the vendor-specific sources that we're",
    "start": "2927280",
    "end": "2932960"
  },
  {
    "text": "providing are able to pull from from that event so for instance there's you know i",
    "start": "2932960",
    "end": "2940079"
  },
  {
    "text": "showed on one of the slides there's 60 plus um services that are integrated",
    "start": "2940079",
    "end": "2945680"
  },
  {
    "text": "through cloud audit logs so things like bigquery or firestore etc and so",
    "start": "2945680",
    "end": "2953200"
  },
  {
    "text": "what you can do is that you're writing to a bigquery uh writing to a bigquery instance for example that can generate an event that",
    "start": "2953200",
    "end": "2959920"
  },
  {
    "text": "triggers uh your innate of service in uh in gpa for example",
    "start": "2959920",
    "end": "2968839"
  },
  {
    "text": "so i i'm answering very gcp specific here and and that's just because i have more",
    "start": "2968839",
    "end": "2975599"
  },
  {
    "text": "familiarity there but that approach can can be extended to any kind of implementation",
    "start": "2975599",
    "end": "2981839"
  },
  {
    "text": "um if the sources are there to latch on your workload's action to something that",
    "start": "2981839",
    "end": "2988960"
  },
  {
    "text": "happened in the in the environment whether it be on-premise through sources you built yourself",
    "start": "2988960",
    "end": "2994319"
  },
  {
    "text": "or whether it be in other um or other implementations i think the",
    "start": "2994319",
    "end": "2999839"
  },
  {
    "text": "model i described is going to be consistent what matters there is resources because that's where you can latch on to things",
    "start": "2999839",
    "end": "3006480"
  },
  {
    "text": "that are happening i don't know if i fully answered your question but definitely let's chat offline love to hear from you",
    "start": "3006480",
    "end": "3013760"
  },
  {
    "start": "3013000",
    "end": "3063000"
  },
  {
    "text": "thanks brian we have one more question there it sounds like key native works as an orchestrator for the long-running",
    "start": "3013760",
    "end": "3020079"
  },
  {
    "text": "transaction saga that span across multiple microservices is this the correct understanding",
    "start": "3020079",
    "end": "3027839"
  },
  {
    "text": "the saga pattern is a very specific thing so i don't want to over simplify it um",
    "start": "3030160",
    "end": "3038160"
  },
  {
    "text": "it is an org the basically k-native eventing does function as an orchestration uh",
    "start": "3038480",
    "end": "3045359"
  },
  {
    "text": "feature um i think this is one best help best uh discussed offline if you don't",
    "start": "3045359",
    "end": "3051040"
  },
  {
    "text": "mind reaching out um i don't think there's anything fundamentally",
    "start": "3051040",
    "end": "3056880"
  },
  {
    "text": "wrong in what you're saying however um i think that there's a lot of very specifics there",
    "start": "3056880",
    "end": "3063920"
  },
  {
    "start": "3063000",
    "end": "3127000"
  },
  {
    "text": "thanks brian one more question in there can you please give an overview of how k native eventing fits into the",
    "start": "3064240",
    "end": "3070640"
  },
  {
    "text": "overall serverless community framework yeah so it's just part of it right so",
    "start": "3070640",
    "end": "3075920"
  },
  {
    "text": "k-native has two components serving and eventing and so k-native servicing serving is how those services are um",
    "start": "3075920",
    "end": "3084079"
  },
  {
    "text": "how to control the ingress the scaling the revisions the deployment the management of uh services which",
    "start": "3084079",
    "end": "3091040"
  },
  {
    "text": "running a serverless workflows on on top of uh kubernetes canadian eventing is just the extension of that",
    "start": "3091040",
    "end": "3096880"
  },
  {
    "text": "so in a serverless way um if the only way to",
    "start": "3096880",
    "end": "3104640"
  },
  {
    "text": "execute an endpoint is just by reaching out or execute the services by reaching out to the end point directly",
    "start": "3104640",
    "end": "3110480"
  },
  {
    "text": "that limits the decoupling that you can achieve here hence why canadian eventing",
    "start": "3110480",
    "end": "3115599"
  },
  {
    "text": "was created as that right hand to uh as that right right hand person to uh a",
    "start": "3115599",
    "end": "3122079"
  },
  {
    "text": "k native serving so it really just goes hand-in-hand",
    "start": "3122079",
    "end": "3126480"
  },
  {
    "start": "3127000",
    "end": "3216000"
  },
  {
    "text": "thanks brian we don't have any more questions here on q a right now now is there anything that was mentioned",
    "start": "3128319",
    "end": "3134559"
  },
  {
    "text": "there that nick that you want to add more to or extend out of the questions that were that were answered or anything else you'd like to",
    "start": "3134559",
    "end": "3141839"
  },
  {
    "text": "like to convey i don't think i have anything else to add to what you said that was pretty",
    "start": "3141839",
    "end": "3147200"
  },
  {
    "text": "comprehensive thanks and i will say i know i've said this a few times but uh feel free to reach out um often it's",
    "start": "3147200",
    "end": "3154880"
  },
  {
    "text": "hard to understand the full nuance of a question in the 15 seconds uh and i'd love to give you a lot more",
    "start": "3154880",
    "end": "3161280"
  },
  {
    "text": "time to discuss things openly bring in the developer subject matter experts as as required",
    "start": "3161280",
    "end": "3167280"
  },
  {
    "text": "um so yeah definitely feel free to reach out for follow ups on any of these questions or for anything else that comes up",
    "start": "3167280",
    "end": "3172880"
  },
  {
    "text": "we'd love to hear from you and thank you everyone for uh joining us today we're coming to the",
    "start": "3172880",
    "end": "3178079"
  },
  {
    "text": "end so if there's any other questions happy to answer them uh if not we'll hand things back over to",
    "start": "3178079",
    "end": "3183920"
  },
  {
    "text": "our moderator after athens here thank you from the inmate",
    "start": "3183920",
    "end": "3189040"
  },
  {
    "text": "thanks everyone and thanks jerry thank you all thank you all so much for",
    "start": "3189040",
    "end": "3194720"
  },
  {
    "text": "a wonderful prison uh presentation thank you all for attending today",
    "start": "3194720",
    "end": "3199760"
  },
  {
    "text": "as i said before the recording and slides will be available on the cncf webinar page at cncf dot io slash",
    "start": "3199760",
    "end": "3206559"
  },
  {
    "text": "webinars everyone take care stay safe and we will see you at the next cncf webinar",
    "start": "3206559",
    "end": "3218160"
  }
]