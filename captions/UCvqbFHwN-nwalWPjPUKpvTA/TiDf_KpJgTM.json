[
  {
    "text": "hi Anna Welcome to our talk where we are going to be answering the age-old question what can go wrong when you",
    "start": "0",
    "end": "5940"
  },
  {
    "text": "trust absolutely nobody um AKA threat modeling zero trust my",
    "start": "5940",
    "end": "11400"
  },
  {
    "text": "name is James Callahan I work as a security architect for control plane and I'm here with my esteemed colleague Rick",
    "start": "11400",
    "end": "18900"
  },
  {
    "text": "morning everybody my name is Rick Featherstone um as you can tell uh we are twins",
    "start": "18900",
    "end": "24600"
  },
  {
    "text": "um so I'm the head of engineering at control plane we're a cloud native security consultancy um we're hiring at the moment so if you",
    "start": "24600",
    "end": "31140"
  },
  {
    "text": "want to work on Google uh cool problems with cool people come and have a chat with us if you've got cool problems that you need solving come and have a chat",
    "start": "31140",
    "end": "37320"
  },
  {
    "text": "with us and uh I'll head back to James but yeah thank you for joining us this morning cheers Rick and uh like says we",
    "start": "37320",
    "end": "44100"
  },
  {
    "text": "are a booth su-57 and we'll be here around for for the rest of the day so yes please do come talk to us uh we're",
    "start": "44100",
    "end": "50760"
  },
  {
    "text": "all uh friendly and uh would love to chat so what are we going to talk about today",
    "start": "50760",
    "end": "55860"
  },
  {
    "text": "um this is a kind of a narrative talk we're going to take you on a journey uh first of all we're going to start off by",
    "start": "55860",
    "end": "61620"
  },
  {
    "text": "trying to understand together what uh zero trust means um it can be a bit of a buzzword so we're going to understand uh",
    "start": "61620",
    "end": "68040"
  },
  {
    "text": "starting from a threat modeling perspective and once we have developed our zero",
    "start": "68040",
    "end": "73439"
  },
  {
    "text": "trust philosophy we're going to use this to build a high level architecture once we have a high level architecture we're",
    "start": "73439",
    "end": "80040"
  },
  {
    "text": "going to create a a detailed threat model uh dive into the details and iterate on our controls",
    "start": "80040",
    "end": "86460"
  },
  {
    "text": "um we are going to prototype this so there is a public repo which you can clone and spin up yourselves the message",
    "start": "86460",
    "end": "92880"
  },
  {
    "text": "is uh we will send you the I'll give you the link at the end but the message is really prototype early",
    "start": "92880",
    "end": "99000"
  },
  {
    "text": "um to understand how the components of your system fit together so you can think like an attacker",
    "start": "99000",
    "end": "105659"
  },
  {
    "text": "um this talk will focus on zero trust for workload workload Communications uh worth mentioning that we're not going to",
    "start": "105659",
    "end": "111600"
  },
  {
    "text": "touch on kind of zero trust in the supply chain because that's probably a whole Suite of talks just just on its",
    "start": "111600",
    "end": "116939"
  },
  {
    "text": "own um so yes um what is threat modeling then um we all threat model all the time",
    "start": "116939",
    "end": "123479"
  },
  {
    "text": "intuitively um so when I went to a piano bar last night and The Pianist started playing risk Rick Astley I had to make",
    "start": "123479",
    "end": "130679"
  },
  {
    "text": "the decision do I join in or not and I thought the risk of me not having a voice today was too great so I did a",
    "start": "130679",
    "end": "137280"
  },
  {
    "text": "little threat model I I did derived the control which was don't sing you idiots",
    "start": "137280",
    "end": "142640"
  },
  {
    "text": "and everything was good but if we do this in our personal lives why would we",
    "start": "142640",
    "end": "147720"
  },
  {
    "text": "not do this with our it systems so threat modeling systems is all about",
    "start": "147720",
    "end": "153060"
  },
  {
    "text": "identifying and enumerating threats and vulnerabilities formalizing this in terms of a risk management framework and",
    "start": "153060",
    "end": "159540"
  },
  {
    "text": "escalating risks as part of that framework once they've been Quantified threat modeling gives us loads of",
    "start": "159540",
    "end": "165180"
  },
  {
    "text": "benefits so we identify security flaws early we save time and money by doing this we understand complex risks which",
    "start": "165180",
    "end": "172500"
  },
  {
    "text": "we couldn't understand otherwise and the key message that we want to get across is that everyone should threat model is",
    "start": "172500",
    "end": "177959"
  },
  {
    "text": "not just something for security teams really the people who should be threat modeling are the people who have",
    "start": "177959",
    "end": "183180"
  },
  {
    "text": "developed features Engineers developers who understand code the best because",
    "start": "183180",
    "end": "188220"
  },
  {
    "text": "they can put themselves in the position of an attacker the easiest so threat modeling is an iterative",
    "start": "188220",
    "end": "195540"
  },
  {
    "text": "process following this four question timeline first of all we ask what are we building we draw architecture diagrams",
    "start": "195540",
    "end": "202440"
  },
  {
    "text": "data flow diagrams we understand at a high level and at a detailed level",
    "start": "202440",
    "end": "208019"
  },
  {
    "text": "uh what our system looks like once we have this we ask what can go wrong this is where we put ourselves in the",
    "start": "208019",
    "end": "213480"
  },
  {
    "text": "position of an attacker think up nefarious scenarios and try and brainstorm these using techniques such",
    "start": "213480",
    "end": "219900"
  },
  {
    "text": "as stride and attack trees which we'll do for our example system in a few slides time once we've done this we need to devise",
    "start": "219900",
    "end": "226980"
  },
  {
    "text": "mitigating controls that's the next step we need to minimize our residual risks and then finally threat model threat",
    "start": "226980",
    "end": "234420"
  },
  {
    "text": "modeling is iterative um we need to be constantly asking are we doing a good job are our controls effective do we",
    "start": "234420",
    "end": "241080"
  },
  {
    "text": "have effective automated tests which tell us whether our controls are working",
    "start": "241080",
    "end": "246599"
  },
  {
    "text": "so let's start to make sense of zero trust via a very very very high threat",
    "start": "246599",
    "end": "252239"
  },
  {
    "text": "model so this is a very simple diagram we've got a user interacting with a workload two workloads communicating one",
    "start": "252239",
    "end": "260040"
  },
  {
    "text": "workload persisting data to storage and interacting with persisted data and another workload uh calling cloud",
    "start": "260040",
    "end": "266400"
  },
  {
    "text": "provider apis there's two keys to deriving zero trust principles from this",
    "start": "266400",
    "end": "271800"
  },
  {
    "text": "diagram the first is that we're not specifying anything about these workloads they could be running anywhere",
    "start": "271800",
    "end": "277199"
  },
  {
    "text": "and workload one could be running on a kubernetes eks cluster for example workload 2 could be running on a VM",
    "start": "277199",
    "end": "284520"
  },
  {
    "text": "on-prem so we're not specifying anything the next key is to Define our trust",
    "start": "284520",
    "end": "289620"
  },
  {
    "text": "boundaries so I'm sure lots of you have heard people say things like well workload one and workload 2 are within",
    "start": "289620",
    "end": "295800"
  },
  {
    "text": "our protected Network therefore of course they can communicate by default we say no that is not the way to think",
    "start": "295800",
    "end": "303060"
  },
  {
    "text": "about things shrink your trust boundaries down as small as possible and never trust always verify",
    "start": "303060",
    "end": "310620"
  },
  {
    "text": "so we're going to threat model using stride so can I spoof any Communications can I pretend to be someone or something",
    "start": "310620",
    "end": "317580"
  },
  {
    "text": "which I am not yeah um can I tamper with information flows",
    "start": "317580",
    "end": "324120"
  },
  {
    "text": "and uh and compromise the system that way um repudiation uh can I do something and",
    "start": "324120",
    "end": "329820"
  },
  {
    "text": "then say I didn't do it about Simpson style um information disclosure can I exfiltrate data uh to um parties who",
    "start": "329820",
    "end": "338039"
  },
  {
    "text": "should not be privy to that data denial of service can I take the system down it's going to be very important when",
    "start": "338039",
    "end": "343919"
  },
  {
    "text": "we're talking about workload identity that we have a highly available mechanism for Distributing those identities and finally can I escalate my",
    "start": "343919",
    "end": "351720"
  },
  {
    "text": "privilege and do something I should not be able to do so let's derive our high-level",
    "start": "351720",
    "end": "357960"
  },
  {
    "text": "architectural principles from this very simple threat model a really easy way to do this is draw a table threats down the",
    "start": "357960",
    "end": "363960"
  },
  {
    "text": "left high level architectural controls on the right so we'll go through this line by line um so spoofing first of all user",
    "start": "363960",
    "end": "370800"
  },
  {
    "text": "impersonation like I said we're focusing on workloads in this talk so we won't go into too much of the cool stuff you can",
    "start": "370800",
    "end": "376680"
  },
  {
    "text": "do in the zero trust space around users we're focusing on workloads however we",
    "start": "376680",
    "end": "381900"
  },
  {
    "text": "we need to be cognizant of the the controls there so um user authentication and authorization best practices and",
    "start": "381900",
    "end": "388139"
  },
  {
    "text": "establishing uh provenance of of our users workload smoothing however is where we",
    "start": "388139",
    "end": "393720"
  },
  {
    "text": "come to our first um kind of topic for the talk so this means if we want to do this well we need the concept of a",
    "start": "393720",
    "end": "400319"
  },
  {
    "text": "cryptographically um verifiable workload identity and we're going to use um a",
    "start": "400319",
    "end": "405960"
  },
  {
    "text": "technology called spiffy well a framework called spiffy and the production ready implementation of the",
    "start": "405960",
    "end": "411539"
  },
  {
    "text": "the spiffy workload identity framework called Spire we will show this in the in the Prototype later on when Rick will",
    "start": "411539",
    "end": "418560"
  },
  {
    "text": "give a demo workload spoofing as well we want strong Integrity protection on the client side and the server side of any",
    "start": "418560",
    "end": "425160"
  },
  {
    "text": "communication so um we're going to use mtls we're going to make things easy for ourselves by using istio service mesh",
    "start": "425160",
    "end": "431759"
  },
  {
    "text": "for our two workloads in our example prototype mcls obviously helps us with tampering",
    "start": "431759",
    "end": "438360"
  },
  {
    "text": "risks as well altering information in transit maybe not so much the uh the mutual part but the uh the encryption",
    "start": "438360",
    "end": "445139"
  },
  {
    "text": "part I I guess the um the Integrity checks as well um we could Tamp with stored data um so",
    "start": "445139",
    "end": "450660"
  },
  {
    "text": "this is where we need strong authorization policies everywhere and you can see another a high level control later on is policy as version code",
    "start": "450660",
    "end": "457520"
  },
  {
    "text": "policies always link back to organizational business requirements uh",
    "start": "457520",
    "end": "462539"
  },
  {
    "text": "therefore we need to be able to keep track of who owns a policy how do I make a change to a policy and the way to do",
    "start": "462539",
    "end": "468360"
  },
  {
    "text": "this well is policy as version code now you can hear some good Talks by Christina Chris Nesbitt Smith on this",
    "start": "468360",
    "end": "474360"
  },
  {
    "text": "exact topic um so repudiation risks um this is where we want to tie cryptographically strong",
    "start": "474360",
    "end": "481680"
  },
  {
    "text": "identities back to things which workloads are doing so we maintain audit logs when it comes to policy our demo is",
    "start": "481680",
    "end": "487919"
  },
  {
    "text": "going to use a general purpose policy engine open policy agent so this control will be all about maintaining uh um",
    "start": "487919",
    "end": "495120"
  },
  {
    "text": "decision logs and making sure that those decision logs can't be tampered with exfiltrating data would be an example of",
    "start": "495120",
    "end": "501660"
  },
  {
    "text": "information disclosure so again it comes back to policy in in this case egress control",
    "start": "501660",
    "end": "507060"
  },
  {
    "text": "and network policies preventing workloads from communicating this could be a denial of service risk",
    "start": "507060",
    "end": "513120"
  },
  {
    "text": "if we're using spire and I as an attacker can take the Spy server down How are um workloads going to get their",
    "start": "513120",
    "end": "519599"
  },
  {
    "text": "their identities we need to build something highly available um our demo later will be not a",
    "start": "519599",
    "end": "525540"
  },
  {
    "text": "production ready demo so this would be further work that we would have to do and we would get that work done by doing",
    "start": "525540",
    "end": "531540"
  },
  {
    "text": "more detailed threat models of those sorts of denial of service attacks that could take place and finally a compromise workload could",
    "start": "531540",
    "end": "538860"
  },
  {
    "text": "pivot so workload one may not be able to hit a specific endpoint and least",
    "start": "538860",
    "end": "544680"
  },
  {
    "text": "privilege authorization policies again are the way to enact this",
    "start": "544680",
    "end": "550080"
  },
  {
    "text": "so now we've got our high level principles it's over to Rick to build an architecture",
    "start": "550080",
    "end": "555540"
  },
  {
    "text": "cool thank you James okay so I'm going to try and Associate your desire to see diagrams and code and uh and demos",
    "start": "555540",
    "end": "562440"
  },
  {
    "text": "without drawing too far away from the fact that this is a talk primarily about threat modeling",
    "start": "562440",
    "end": "567899"
  },
  {
    "text": "so uh in our fictitious example here um we've got workloads what kind of requirements have we got where um we've",
    "start": "567899",
    "end": "575279"
  },
  {
    "text": "got a an external facing service we want to make sure that we're using TLS to",
    "start": "575279",
    "end": "580860"
  },
  {
    "text": "expose that service we've got Services communicating we want to use Mutual TLS so we need to be Distributing Keys",
    "start": "580860",
    "end": "587339"
  },
  {
    "text": "certificates and Trust bundles so we can verify those both of the workloads on here are going to be accessing various",
    "start": "587339",
    "end": "593820"
  },
  {
    "text": "AWS services and so they need to get temporary AWS credentials and they're going to be able to do that using web",
    "start": "593820",
    "end": "601019"
  },
  {
    "text": "identity Federation so taking a JWT a jot and using SDS to exchange that for",
    "start": "601019",
    "end": "606959"
  },
  {
    "text": "temporary AWS credentials map to IM roles that grant them access to to the",
    "start": "606959",
    "end": "612240"
  },
  {
    "text": "things that they need to to do so on the left there we've got a very simple service",
    "start": "612240",
    "end": "617600"
  },
  {
    "text": "it's going to be making direct API calls so at the bottom there is spy I'm not",
    "start": "617600",
    "end": "623399"
  },
  {
    "text": "going to go I'm going to keep it kind of high level but if you think of spire as your identity Vending",
    "start": "623399",
    "end": "628980"
  },
  {
    "text": "um so you can get your uh your x509 identity documents or your jot identity documents from Spire the good thing",
    "start": "628980",
    "end": "635100"
  },
  {
    "text": "about it is that the workloads don't need to know anything about their identity they can be a bit amnesiac um",
    "start": "635100",
    "end": "640200"
  },
  {
    "text": "hey who am I I'm spelled you are Service uh uh X",
    "start": "640200",
    "end": "645779"
  },
  {
    "text": "um it's on the left there uh it's gonna get an x509 certificate that it can use",
    "start": "645779",
    "end": "650940"
  },
  {
    "text": "to expose uh the API over TLS and it's going to get a jot uh and exchange that",
    "start": "650940",
    "end": "657240"
  },
  {
    "text": "for for uh AWS credentials and get access to the S3 bucket to download to",
    "start": "657240",
    "end": "663000"
  },
  {
    "text": "retrieve a file and then present that to to the user um and in that in that example we're",
    "start": "663000",
    "end": "668640"
  },
  {
    "text": "kind of because we're using the client apis we're writing all of that so if you move over to the other side we're moving",
    "start": "668640",
    "end": "673920"
  },
  {
    "text": "to the service service mesh type approach so we can kind of remove some of that coding complexity uh from the",
    "start": "673920",
    "end": "680220"
  },
  {
    "text": "developers there we've got istio service mesh there uh istio can retrieve its x509 material from Spire using the",
    "start": "680220",
    "end": "687839"
  },
  {
    "text": "secret recovery service so we've got that plugged in to the right of istio we've just got a",
    "start": "687839",
    "end": "693060"
  },
  {
    "text": "side car there now that's periodically um getting the job from Spire writing that to a shared volume so that the uh",
    "start": "693060",
    "end": "699899"
  },
  {
    "text": "open side car can get temporary AWS credentials to download the bundles from",
    "start": "699899",
    "end": "706320"
  },
  {
    "text": "the S3 bucket and make the policy decision so if you think of uh open in",
    "start": "706320",
    "end": "711839"
  },
  {
    "text": "this case as basically a yes no engine can I do this yes no um we could do some of the authorization",
    "start": "711839",
    "end": "718560"
  },
  {
    "text": "decisions just with istio itself Oprah gives us a bit more kind of flexibility it allows us to make external calls to",
    "start": "718560",
    "end": "726180"
  },
  {
    "text": "bring in additional data and things like that keep keep that in the back of your mind because we'll come back to that in",
    "start": "726180",
    "end": "731760"
  },
  {
    "text": "a sec that's really important um and then we've got uh so so we've got istio we've got opal we've got uh Aspire",
    "start": "731760",
    "end": "739260"
  },
  {
    "text": "we've got kubernetes with and just to make sure that we get our talks approved",
    "start": "739260",
    "end": "745320"
  },
  {
    "text": "accepted we're going to get as many cncs tools as we can so we're going to use caverna over there to inject the",
    "start": "745320",
    "end": "752160"
  },
  {
    "text": "sidecars into our workloads so that's uh that's our example architecture and as James mentioned",
    "start": "752160",
    "end": "760560"
  },
  {
    "text": "what we want to do is we want to be prototyping early why do we want to do that so it helps us understand how the",
    "start": "760560",
    "end": "766260"
  },
  {
    "text": "technologies that we're that we're using work how they integrate with each other think about what can go wrong as James",
    "start": "766260",
    "end": "772200"
  },
  {
    "text": "mentioned we're going to open source the repo and make it available for you to kick the tires and play around with this and so in order to do that we want it to",
    "start": "772200",
    "end": "779519"
  },
  {
    "text": "be simple and reasonably cheap and fast to spin up so instead of using a managed",
    "start": "779519",
    "end": "784920"
  },
  {
    "text": "cloud provider kubernetes cluster we're just going to use a local kind cluster and just some S3 buckets",
    "start": "784920",
    "end": "792440"
  },
  {
    "text": "the uh the the offside of that is that for the OAC Discovery stuff in order for",
    "start": "792440",
    "end": "799680"
  },
  {
    "text": "AWS to to verify the jots it needs to be able to access the discovery document",
    "start": "799680",
    "end": "806760"
  },
  {
    "text": "and the key set to verify the jots and normally if you're running in a public kubernetes cluster you would expose an",
    "start": "806760",
    "end": "813420"
  },
  {
    "text": "oledc Discovery service publicly like that in order to make the demo work we're just going to use an S3 bucket and",
    "start": "813420",
    "end": "819899"
  },
  {
    "text": "we're going to ship the disc every document and the keys up there to get that working",
    "start": "819899",
    "end": "825720"
  },
  {
    "text": "so let's uh let's have a quick check just on the example on the left hand side and make sure it works so this is not a given it's been working fine all",
    "start": "825720",
    "end": "833579"
  },
  {
    "text": "week going in this morning I went to deploy stuff and uh at some point yesterday AWS made a change to the uh",
    "start": "833579",
    "end": "840959"
  },
  {
    "text": "the default policies on S3 buckets you can if they are that you cannot make them public by default and they've",
    "start": "840959",
    "end": "849060"
  },
  {
    "text": "removed the access control lists so as I sat there I just check this works before",
    "start": "849060",
    "end": "854100"
  },
  {
    "text": "we go for the demo and error error error all Panic stations um so uh",
    "start": "854100",
    "end": "860700"
  },
  {
    "text": "and can you all cross your fingers for me no seriously",
    "start": "860700",
    "end": "867680"
  },
  {
    "text": "Okay so let's deploy",
    "start": "868920",
    "end": "875880"
  },
  {
    "text": "example one so remember this is just a simple uh a simple web service exposing uh an API over hcps it's going to get a",
    "start": "875880",
    "end": "884160"
  },
  {
    "text": "file from an S3 bucket and serve that back to the uh to the users",
    "start": "884160",
    "end": "890899"
  },
  {
    "text": "it's the uh a little warning that they sent out in December that at some point in April um probably the day before you",
    "start": "894720",
    "end": "902399"
  },
  {
    "text": "do your presentation at kubecon EU we will we will break things for you",
    "start": "902399",
    "end": "908880"
  },
  {
    "text": "um so uh looking good so far",
    "start": "908880",
    "end": "916620"
  },
  {
    "text": "so uh",
    "start": "916620",
    "end": "920100"
  },
  {
    "text": "all right so now uh it's not just not working",
    "start": "923760",
    "end": "930120"
  },
  {
    "text": "all right",
    "start": "930120",
    "end": "932720"
  },
  {
    "text": "[Music]",
    "start": "942560",
    "end": "945730"
  },
  {
    "text": "there we go now that's a relief okay can I get a woo",
    "start": "949320",
    "end": "958139"
  },
  {
    "text": "foreign thank you very much",
    "start": "958139",
    "end": "963620"
  },
  {
    "text": "okay so that's uh that's working I'll get a woo and a phew",
    "start": "967320",
    "end": "974420"
  },
  {
    "text": "um oh yeah let's uh quickly have a quick look at the uh because I know you want to see some code",
    "start": "976620",
    "end": "982220"
  },
  {
    "text": "it's uh shrink that up so the uh the Spy client libraries have uh I've got some",
    "start": "983279",
    "end": "988440"
  },
  {
    "text": "kind of useful stuff in there um so we can create next 509 Source here",
    "start": "988440",
    "end": "993600"
  },
  {
    "text": "um and then use their TLS server configs we just drop that into the server there and then we'll run up the server and",
    "start": "993600",
    "end": "999600"
  },
  {
    "text": "it'll get it 6509 certificates directly from Spire there um correct jot source and then pass that",
    "start": "999600",
    "end": "1006139"
  },
  {
    "text": "into our flare Handler um and this will",
    "start": "1006139",
    "end": "1011540"
  },
  {
    "text": "um it'll create an AWS configuration and then we've got a custom credentials",
    "start": "1011540",
    "end": "1016699"
  },
  {
    "text": "provider here we're passing in the jot source and exchanging that for uh temporary",
    "start": "1016699",
    "end": "1021980"
  },
  {
    "text": "credentials to create an S3 client which allows us to uh download the object from the bucket and",
    "start": "1021980",
    "end": "1028100"
  },
  {
    "text": "serve it up to our uh to our calling",
    "start": "1028100",
    "end": "1033760"
  },
  {
    "text": "and um we can see that it's been issued from",
    "start": "1033760",
    "end": "1039678"
  },
  {
    "text": "our Spire server",
    "start": "1039679",
    "end": "1042579"
  },
  {
    "text": "resolutions or four and there we go in the URI San we can see it's uh using",
    "start": "1053299",
    "end": "1060200"
  },
  {
    "text": "spiffy protocol you can see it's using the control plane uh trust domain and we've issued",
    "start": "1060200",
    "end": "1065539"
  },
  {
    "text": "this worked out identity to RS3 consumer",
    "start": "1065539",
    "end": "1070179"
  },
  {
    "text": "quite normally um so now we have our detailed architecture and a prototype we",
    "start": "1077720",
    "end": "1083780"
  },
  {
    "text": "can draw data flow diagrams so data flow diagrams are essential to help us threat model what we will do is it's kind of",
    "start": "1083780",
    "end": "1089720"
  },
  {
    "text": "like apply stride like we did to the high level one uh to each individual uh communication but now we can look at",
    "start": "1089720",
    "end": "1096799"
  },
  {
    "text": "these uh network communications in a great deal more detail so much detail in",
    "start": "1096799",
    "end": "1102679"
  },
  {
    "text": "fact that the diagram doesn't fit nicely on a slide so don't pay much attention to the to the nonsense um the GIF is",
    "start": "1102679",
    "end": "1110480"
  },
  {
    "text": "just there to show kind of um our generic workflow so we've got a user at the top coming through Ingress if we follow the",
    "start": "1110480",
    "end": "1117500"
  },
  {
    "text": "purple line down we'll see the user is we've got the Spire stuff in the middle the user is hitting a workload via the",
    "start": "1117500",
    "end": "1125120"
  },
  {
    "text": "workloads onboard proxy um a decision is being made by Opa and this also applies to the workload",
    "start": "1125120",
    "end": "1131299"
  },
  {
    "text": "workload Communications we see the workloads are pulling open policy from the policy management plane in our case",
    "start": "1131299",
    "end": "1137900"
  },
  {
    "text": "it's just the policy is hosted in S3 bucket and then the workload is calling out to a cloud provider API just as a",
    "start": "1137900",
    "end": "1146299"
  },
  {
    "text": "well both both rigs have just uh just shown us",
    "start": "1146299",
    "end": "1152059"
  },
  {
    "text": "um so now we have our data flow diagram let's start threat modeling the detail a",
    "start": "1152059",
    "end": "1157280"
  },
  {
    "text": "really good way to do this is by drawing attack trees and a Kelly Shortridge has shown us how to do this um there's a",
    "start": "1157280",
    "end": "1163220"
  },
  {
    "text": "really cool app called deciduous where you can make these yourself we are just going to use graph is kind of under the",
    "start": "1163220",
    "end": "1169100"
  },
  {
    "text": "hood and draw some pretty basic trees we're going to use this key where um green nodes are oars blue is and the",
    "start": "1169100",
    "end": "1177260"
  },
  {
    "text": "gray ones are kind of just single nodes which uh which kind of end there's no logic underpinning it there and reds are",
    "start": "1177260",
    "end": "1183799"
  },
  {
    "text": "out of scope so things like like we said zero trust supply chain things out of scope for us today",
    "start": "1183799",
    "end": "1189919"
  },
  {
    "text": "so let's build an example tree we're going to walk through a path of the tree and just focus on one risk and show how",
    "start": "1189919",
    "end": "1195860"
  },
  {
    "text": "we would build a control and iterate the control so let's start with a bad outcome an attack tree always starts",
    "start": "1195860",
    "end": "1201559"
  },
  {
    "text": "with um something bad that the attacker wants to do um this will always come down to an",
    "start": "1201559",
    "end": "1207919"
  },
  {
    "text": "attacker wanting to compromise one of the three um Unholy Trinity properties",
    "start": "1207919",
    "end": "1213559"
  },
  {
    "text": "of cyber security confidentiality Integrity or availability so let's take a confidentiality example where what our",
    "start": "1213559",
    "end": "1220940"
  },
  {
    "text": "attacker wants to do is leak sensitive data we're not specifying what this data is they just want to exfiltrate",
    "start": "1220940",
    "end": "1226100"
  },
  {
    "text": "um sensitive data so you can leak data either by sniffing traffic in transit exfiltrating data green node so it's an",
    "start": "1226100",
    "end": "1233600"
  },
  {
    "text": "all we can think of a number of ways to do this we're just going to focus on exfiltrating data",
    "start": "1233600",
    "end": "1239120"
  },
  {
    "text": "so like Rick said um you might want to use Opa you might want to use this um sidecar model with Opa if um why",
    "start": "1239120",
    "end": "1247880"
  },
  {
    "text": "wouldn't we just use a istio standard authorization policies for example well maybe we have really complex decisions",
    "start": "1247880",
    "end": "1254240"
  },
  {
    "text": "to make where we want to pull in external data and make authorization decisions based on that external data so",
    "start": "1254240",
    "end": "1261140"
  },
  {
    "text": "in that case Opa will have access to a data bundle so why don't we just try",
    "start": "1261140",
    "end": "1266660"
  },
  {
    "text": "spitting out data from from the open container itself why don't we try and exfiltrate data via HTTP calls from the",
    "start": "1266660",
    "end": "1274280"
  },
  {
    "text": "open container to an attacker control service and exfiltrate data from our database",
    "start": "1274280",
    "end": "1279620"
  },
  {
    "text": "what would an attacker need to be able to carry this out they would need a an outbound path available to them so this",
    "start": "1279620",
    "end": "1286039"
  },
  {
    "text": "is a blue note so it's an and they also would need to be able to deliberately misconfigure the policy to spit out data",
    "start": "1286039",
    "end": "1293419"
  },
  {
    "text": "in this way what would they need to be able to deliberately misconfigure the policy",
    "start": "1293419",
    "end": "1299000"
  },
  {
    "text": "they would either need to be able to change the code so they would need to steal",
    "start": "1299000",
    "end": "1304100"
  },
  {
    "text": "um or yeah get unauthorized access to the policy repo somehow merge their code",
    "start": "1304100",
    "end": "1310700"
  },
  {
    "text": "um we kind of matching quite a few controls in the in that space so let's think about another way they could do it",
    "start": "1310700",
    "end": "1317000"
  },
  {
    "text": "um they might just have misconfigured right access to um the bundle storage location in this case it's just an S3",
    "start": "1317000",
    "end": "1323419"
  },
  {
    "text": "bucket why would they have right access to this and they of course shouldn't we have a control in place here which is um",
    "start": "1323419",
    "end": "1329720"
  },
  {
    "text": "I am and the principle of least privilege only the policy pipeline should be able to write to that storage",
    "start": "1329720",
    "end": "1336500"
  },
  {
    "text": "location however we never want to be one misconfiguration away from catastrophe",
    "start": "1336500",
    "end": "1342940"
  },
  {
    "text": "maybe something is wrong with a pipeline maybe something is going drastically wrong with our system we need to make an",
    "start": "1342940",
    "end": "1349520"
  },
  {
    "text": "emergency change and someone gets emergency access right access to just write an updated policy we never want to",
    "start": "1349520",
    "end": "1356480"
  },
  {
    "text": "be one misconfiguration away from disaster that that's the message what we do with our tree is we do this",
    "start": "1356480",
    "end": "1362720"
  },
  {
    "text": "lots more times and and draw a kind of a a decision tree um and it would look something like this",
    "start": "1362720",
    "end": "1369080"
  },
  {
    "text": "so we've walked One path of that the details here aren't important you can again look at this in our in our repo",
    "start": "1369080",
    "end": "1374299"
  },
  {
    "text": "we're not going to go through other branches of this tree today just to show you that the real tree here will be way bigger than this",
    "start": "1374299",
    "end": "1380780"
  },
  {
    "text": "so what will we do about it now it's time to design our controls we'll take a",
    "start": "1380780",
    "end": "1386179"
  },
  {
    "text": "simple table based approach like we did before we're going to write our more detailed confidentiality uh",
    "start": "1386179",
    "end": "1391700"
  },
  {
    "text": "confidentiality threats on the left now and write our more detailed controls on the right again let's not go through",
    "start": "1391700",
    "end": "1397940"
  },
  {
    "text": "this line by line because you can see this in um in our repo and in our PDF we're going to just focus on that one",
    "start": "1397940",
    "end": "1405320"
  },
  {
    "text": "um uh walk through the the tatchery that we did before so if we look at the bottom um threat on this table over policy",
    "start": "1405320",
    "end": "1412940"
  },
  {
    "text": "bundle like we said we've got two key controls here cloud provider rbac least privilege and and you can audit as well",
    "start": "1412940",
    "end": "1419600"
  },
  {
    "text": "so automated Audits and things um maybe that's a separate control but um here we just have it as one and then",
    "start": "1419600",
    "end": "1426799"
  },
  {
    "text": "you see c14 policy bundle signing and verification um instead of just relying on um our IM",
    "start": "1426799",
    "end": "1433580"
  },
  {
    "text": "configurations being correct let's add an additional control and say that our",
    "start": "1433580",
    "end": "1439100"
  },
  {
    "text": "policy pipeline should have access to a signing key and opa should only be able",
    "start": "1439100",
    "end": "1444620"
  },
  {
    "text": "to load sign bundles which have been signed by this key so here we have defense in depth",
    "start": "1444620",
    "end": "1451280"
  },
  {
    "text": "um we're saying that we when building custom controls some controls will need further architectural work so if we did",
    "start": "1451280",
    "end": "1457760"
  },
  {
    "text": "look into the details on that bigger attack tree before we would have seen a threat which is compromised Spire data",
    "start": "1457760",
    "end": "1463880"
  },
  {
    "text": "store if I could do this maybe I could add in a fake registration entries and convince one",
    "start": "1463880",
    "end": "1471380"
  },
  {
    "text": "workload that I am a legitimate workload that should be able to talk to it but in reality I'm a malicious workload",
    "start": "1471380",
    "end": "1479240"
  },
  {
    "text": "um however to threat model this in detail we need to make design decisions about uh how Spire is going to access",
    "start": "1479240",
    "end": "1485480"
  },
  {
    "text": "this um this stored data so what we would do at this point is draw a lower level attack tree and do a detailed",
    "start": "1485480",
    "end": "1491539"
  },
  {
    "text": "threat model so going back to our example attack path malicious internal actor exploiting",
    "start": "1491539",
    "end": "1497780"
  },
  {
    "text": "misconfigured I am to overwrite the policy bundle we have a control but we have not yet talked about the",
    "start": "1497780",
    "end": "1504500"
  },
  {
    "text": "implementation how are we going to do this are we going to use a default tools available to us or is our risk profile a",
    "start": "1504500",
    "end": "1510740"
  },
  {
    "text": "little bit more cautious and we want to be additionally secure and design a",
    "start": "1510740",
    "end": "1516140"
  },
  {
    "text": "custom control and this is where I hand it back to uh Rick",
    "start": "1516140",
    "end": "1521620"
  },
  {
    "text": "okay so so this is the final architecture and as we kind of mentioned we want to threat model prototype and",
    "start": "1523220",
    "end": "1529700"
  },
  {
    "text": "threat model again and and keep iterating around this so so as Jones mentioned",
    "start": "1529700",
    "end": "1534799"
  },
  {
    "text": "um we don't want people to be messing with the with the bundles uh so where we start is we go right well okra allows us",
    "start": "1534799",
    "end": "1541100"
  },
  {
    "text": "to sign these bundles so the bundle publishing pipeline can have access to a private key it can sign the bundle",
    "start": "1541100",
    "end": "1547700"
  },
  {
    "text": "um and then the uh the open sidecars can have access to a a public key and they can verify the signatures and we know",
    "start": "1547700",
    "end": "1552860"
  },
  {
    "text": "that those bundles are are Goods uh and nobody's uh um mess with the Integrity",
    "start": "1552860",
    "end": "1558140"
  },
  {
    "text": "of those um so I did that and said that right great I'm I'm done now James and James said uh",
    "start": "1558140",
    "end": "1564020"
  },
  {
    "text": "yeah I'm not sure about that now you've got a now you've got a key distribution problem you've got to be passing this",
    "start": "1564020",
    "end": "1569179"
  },
  {
    "text": "put this this private key around safely you've got to make sure you're passing the public key around how often you're",
    "start": "1569179",
    "end": "1574400"
  },
  {
    "text": "going to update those um so um so he points out that you can create your own uh a custom uh signing",
    "start": "1574400",
    "end": "1581419"
  },
  {
    "text": "procedure um and he goes can you do that I'm like uh yeah yeah I can do that and the rates",
    "start": "1581419",
    "end": "1587299"
  },
  {
    "text": "are you can't do that where do you even start so great thing",
    "start": "1587299",
    "end": "1593659"
  },
  {
    "text": "is in the uh Open Country repo there there is um an example here so it's basically the",
    "start": "1593659",
    "end": "1600860"
  },
  {
    "text": "framework is all there um for everything you need to do to create your own custom Uh custom build",
    "start": "1600860",
    "end": "1607220"
  },
  {
    "text": "of of opa with your own uh signer and verifier in there",
    "start": "1607220",
    "end": "1612760"
  },
  {
    "text": "but they didn't do it for you um so uh what's the signature even look",
    "start": "1613940",
    "end": "1620600"
  },
  {
    "text": "like so have a look on uh uh on the open site there",
    "start": "1620600",
    "end": "1628039"
  },
  {
    "text": "uh Wesley so signatures uh what is the signature",
    "start": "1628039",
    "end": "1635960"
  },
  {
    "text": "uh jar that's handy I know about those from",
    "start": "1635960",
    "end": "1642260"
  },
  {
    "text": "the identity side of things um so it's just uh oh it's just a job in a",
    "start": "1642260",
    "end": "1647360"
  },
  {
    "text": "in a row of signatures um so you've got the standards uh key ID uh the the the",
    "start": "1647360",
    "end": "1653720"
  },
  {
    "text": "uh the algorithm that's used for the encryption there and then the payload itself is just a list of files in the",
    "start": "1653720",
    "end": "1659480"
  },
  {
    "text": "bundle and then a digest and the algorithm that was used to to do the Digest",
    "start": "1659480",
    "end": "1665360"
  },
  {
    "text": "I reckon it might be right now I can uh I can probably pull this one off",
    "start": "1665360",
    "end": "1671020"
  },
  {
    "text": "so uh and we're just we're just implementing uh interfaces so",
    "start": "1672200",
    "end": "1679480"
  },
  {
    "text": "how does that look there so signing it",
    "start": "1679940",
    "end": "1685100"
  },
  {
    "text": "um just going to create a new bundle signature with the uh the algorithm the key ID that comes in in this configuration here",
    "start": "1685100",
    "end": "1691700"
  },
  {
    "text": "and then with the list of files that's provided for the bundle um great",
    "start": "1691700",
    "end": "1697820"
  },
  {
    "text": "um create the message to sign so that's the uh the header base64 URL encoded the payload base 64 URL encoded drawing with",
    "start": "1697820",
    "end": "1705380"
  },
  {
    "text": "the dot uh then we'll sign that base64 URL encode the signature stick another dot in bundle that all up together check",
    "start": "1705380",
    "end": "1712340"
  },
  {
    "text": "it out jobs again um for the verify itself",
    "start": "1712340",
    "end": "1717500"
  },
  {
    "text": "similar kind of thing um we get the signature coming in",
    "start": "1717500",
    "end": "1722919"
  },
  {
    "text": "we'll pause it figure out what what key was used to sign it",
    "start": "1723380",
    "end": "1728779"
  },
  {
    "text": "um and then verify it and pass back there is to file so then we verified the",
    "start": "1728779",
    "end": "1734120"
  },
  {
    "text": "signature the list of files that are in that that signature there pass that back and open those everything's good",
    "start": "1734120",
    "end": "1740059"
  },
  {
    "text": "um so that wasn't uh that wasn't as hard as I thought so let's uh",
    "start": "1740059",
    "end": "1746419"
  },
  {
    "text": "simulate the uh bundle publishing uh",
    "start": "1746419",
    "end": "1752559"
  },
  {
    "text": "bundle publishing pipeline uh you can see uh just using the Alias for a KMS key there I'm signing that I'm",
    "start": "1758179",
    "end": "1766760"
  },
  {
    "text": "pushing the bundle to S3",
    "start": "1766760",
    "end": "1769779"
  },
  {
    "text": "we pop back to here so so basically we've just introduced uh AWS KMS keys for for the signing there",
    "start": "1776899",
    "end": "1783620"
  },
  {
    "text": "um so the open sidecar already had a token could get to AWS credentials exchange that to get access to the",
    "start": "1783620",
    "end": "1789559"
  },
  {
    "text": "bucket um so now the the bundle publishing pipeline needs access to the uh to the",
    "start": "1789559",
    "end": "1794840"
  },
  {
    "text": "key for the sign operation um and open itself needs access to the uh to the verify operation",
    "start": "1794840",
    "end": "1802700"
  },
  {
    "text": "so let's jump back into the risky land",
    "start": "1802700",
    "end": "1807740"
  },
  {
    "text": "of uh demos",
    "start": "1807740",
    "end": "1812980"
  },
  {
    "text": "so just just to put a couple of workloads talking to each other",
    "start": "1815120",
    "end": "1820059"
  },
  {
    "text": "check that [Music]",
    "start": "1820880",
    "end": "1825809"
  },
  {
    "text": "awesome so istio is getting the x59 certificates um from uh from Spy there",
    "start": "1826700",
    "end": "1833779"
  },
  {
    "text": "so we're looking reasonably good so I'm just going to send so we've got a",
    "start": "1833779",
    "end": "1839480"
  },
  {
    "text": "couple of workloads we've got some open policies allowing access on some of your uh on some endpoints and and not on",
    "start": "1839480",
    "end": "1844940"
  },
  {
    "text": "others so we'll just send some requests through and we can see that uh Oprah is allowing",
    "start": "1844940",
    "end": "1851120"
  },
  {
    "text": "and and denying requests uh based on the policies there so uh that leaves us in a reasonable space",
    "start": "1851120",
    "end": "1857179"
  },
  {
    "text": "um I think",
    "start": "1857179",
    "end": "1863919"
  },
  {
    "text": "um so yeah the uh the demo is going to be made available uh bear in mind that uh there's still a little bit of work to",
    "start": "1864140",
    "end": "1870380"
  },
  {
    "text": "do on this this morning based on uh aws's fantastic uh changes at some point yesterday",
    "start": "1870380",
    "end": "1876260"
  },
  {
    "text": "but uh thank you for that [Music]",
    "start": "1876260",
    "end": "1884779"
  },
  {
    "text": "yep we do have a summary but we can go straight to questions just to really quickly summarize even well architected",
    "start": "1884779",
    "end": "1890720"
  },
  {
    "text": "systems can can use threat modeling uh threat Landscapes change Technologies change",
    "start": "1890720",
    "end": "1896480"
  },
  {
    "text": "um keep threat modeling and do it iteratively um obviously with uh in today's world",
    "start": "1896480",
    "end": "1901760"
  },
  {
    "text": "zero trust is more crucial but day by day um we've shown you Spire we've shown you",
    "start": "1901760",
    "end": "1907279"
  },
  {
    "text": "istio external authorization we've shown you open we've shown you some tools that you can use and we've shown how custom",
    "start": "1907279",
    "end": "1912559"
  },
  {
    "text": "controls can be made as well so the last step in the threat modeling process like I said is did we do a good job we don't",
    "start": "1912559",
    "end": "1918620"
  },
  {
    "text": "have time to discuss this today but you can give us feedback by by scanning the QR",
    "start": "1918620",
    "end": "1923960"
  },
  {
    "text": "um so yep thank you and any questions",
    "start": "1923960",
    "end": "1927760"
  },
  {
    "text": "cool okay well um we we like we said both uh su-57 if you want to talk uh",
    "start": "1930620",
    "end": "1936740"
  },
  {
    "text": "middle detail will hang around for a bit now uh just uh yeah let us know if you want to chat thanks for coming and thanks for your",
    "start": "1936740",
    "end": "1942500"
  },
  {
    "text": "support [Applause]",
    "start": "1942500",
    "end": "1947660"
  }
]