[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "okay so for this session I'm very happy to have Eric stanman from Clara um Eric",
    "start": "799",
    "end": "7000"
  },
  {
    "text": "has been working with Aang and at VM for a long time he he got his PhD on with",
    "start": "7000",
    "end": "12559"
  },
  {
    "text": "work on Aang compilation then he went and worked with Scala for a while but he",
    "start": "12559",
    "end": "18840"
  },
  {
    "text": "returned to his roots a few years ago he's been the CTO at clana for several years and now he's the chief scientist",
    "start": "18840",
    "end": "26560"
  },
  {
    "text": "and I believe he's writing a book on the topic he's going to tell us all about so Eric over to",
    "start": "26560",
    "end": "33079"
  },
  {
    "start": "33000",
    "end": "200000"
  },
  {
    "text": "you yes so um topic is the airline",
    "start": "33079",
    "end": "38960"
  },
  {
    "text": "virtual machine and I don't work for Oracle I don't have this fancy disclaimer but um you know the talks",
    "start": "38960",
    "end": "47120"
  },
  {
    "text": "that I like the most are the ones where people have opinions and they probably wrong but at least they're engaged and",
    "start": "47120",
    "end": "54440"
  },
  {
    "text": "and and say their opinion and that's that's always very fun or they show you",
    "start": "54440",
    "end": "60359"
  },
  {
    "text": "lots of code and they managed to get it just right so you can follow all the code except that new thing that he shows",
    "start": "60359",
    "end": "67840"
  },
  {
    "text": "you and you get aha that was great and unfortunately I'm not an opinionated man",
    "start": "67840",
    "end": "75600"
  },
  {
    "text": "and I'm going to talk about the virtual machine and not show you that much code so probably today's most boring",
    "start": "75600",
    "end": "84479"
  },
  {
    "text": "talk so there are some other talks right now where you can learn how",
    "start": "85000",
    "end": "90799"
  },
  {
    "text": "to uh use your keyboard shortcuts and so on and that's great you should know how to",
    "start": "90799",
    "end": "97920"
  },
  {
    "text": "use them but knowing how to use your keyboard shortcut is not going to make you the",
    "start": "97920",
    "end": "104520"
  },
  {
    "text": "most productive programmer what really matters for you",
    "start": "104520",
    "end": "110560"
  },
  {
    "text": "to become successful or productive is how you",
    "start": "110560",
    "end": "117479"
  },
  {
    "text": "think when I was 17 I um went to the states I I'm from",
    "start": "118159",
    "end": "125799"
  },
  {
    "text": "Sweden I'm from somewhere North in Sweden haranda it's uh close to the Arctic",
    "start": "125799",
    "end": "133040"
  },
  {
    "text": "Circle and I went as an exchange student to the U California for one",
    "start": "133040",
    "end": "140519"
  },
  {
    "text": "year I could speak English before I went there but when I started speaking",
    "start": "140519",
    "end": "147040"
  },
  {
    "text": "English every day in every situation after while I started thinking in English and I suddenly realized that I",
    "start": "147040",
    "end": "154680"
  },
  {
    "text": "had become stupid not because you're stupid because",
    "start": "154680",
    "end": "161360"
  },
  {
    "text": "you're thinking English but because my vocabulary was so limited and my grasp",
    "start": "161360",
    "end": "166519"
  },
  {
    "text": "of the language was so limited so I could only think limited thoughts it was",
    "start": "166519",
    "end": "172360"
  },
  {
    "text": "terrible but uh after I had started thinking in English I could couldn't stop so I I was stupid for a year in the",
    "start": "172360",
    "end": "178720"
  },
  {
    "text": "States but it was fun anyway that's I guess the way you should should",
    "start": "178720",
    "end": "184760"
  },
  {
    "text": "be but I learned a lesson from that and that is the language that you're using",
    "start": "184760",
    "end": "192720"
  },
  {
    "text": "affects how you think and this goes for programming languages",
    "start": "192720",
    "end": "198159"
  },
  {
    "text": "also so imagine that you meet some MBA guys",
    "start": "199879",
    "end": "210480"
  },
  {
    "text": "that have This brilliant idea and you decide to form a",
    "start": "210480",
    "end": "215680"
  },
  {
    "text": "startup we're going to build a web service",
    "start": "215680",
    "end": "220760"
  },
  {
    "text": "fantastic so you build a web service",
    "start": "222319",
    "end": "228280"
  },
  {
    "text": "and you start getting some traffic getting",
    "start": "228280",
    "end": "233599"
  },
  {
    "text": "profit um so this is the traffic at different",
    "start": "233599",
    "end": "238920"
  },
  {
    "text": "dates and then suddenly this happens it's Christmas and",
    "start": "238920",
    "end": "244799"
  },
  {
    "text": "your traffic doubles uh in a very short time so this is a really exciting time",
    "start": "244799",
    "end": "252360"
  },
  {
    "text": "for a new startup to meet its first Christmas and then next year it doubles",
    "start": "252360",
    "end": "260440"
  },
  {
    "text": "again and next year it doubles again and now it's starting to get",
    "start": "260440",
    "end": "267360"
  },
  {
    "text": "ridiculous really ridiculous and uh after a while you're pretty happy",
    "start": "267360",
    "end": "275600"
  },
  {
    "text": "that your services are still up and running after this",
    "start": "275600",
    "end": "281680"
  },
  {
    "text": "so this was two years ago last year the graph went up the same way",
    "start": "285160",
    "end": "292000"
  },
  {
    "text": "and this year we're expecting this to happen again so this is what success looks like",
    "start": "292000",
    "end": "299199"
  },
  {
    "text": "this is actual transaction statistics from Clara and we were pretty happy do you",
    "start": "299199",
    "end": "306759"
  },
  {
    "text": "remember that little bump there that was when the traffic doubled for the first time it looked really",
    "start": "306759",
    "end": "315120"
  },
  {
    "text": "scary uh so um in my abstract and and yon also said that we had exponential",
    "start": "316199",
    "end": "323240"
  },
  {
    "text": "growth and this is the business hand wav exponential growth this is of course only polinomial but",
    "start": "323240",
    "end": "330240"
  },
  {
    "text": "um let's call it exponential",
    "start": "330240",
    "end": "334199"
  },
  {
    "text": "growth yeah so in the beginning Happy Days uh when this",
    "start": "335280",
    "end": "343639"
  },
  {
    "text": "happens it's pain so if you want to build a scalable",
    "start": "343639",
    "end": "352120"
  },
  {
    "text": "web service then uh you want to do it in a language which help you",
    "start": "352120",
    "end": "357520"
  },
  {
    "text": "scale and that's of course Aline surprise so what Alan gives you is full",
    "start": "357520",
    "end": "365840"
  },
  {
    "text": "tolerant maintainable and scalable and I'm not going",
    "start": "365840",
    "end": "372360"
  },
  {
    "text": "to uh bash other languages here the previous speaker did that pretty well",
    "start": "372360",
    "end": "378319"
  },
  {
    "text": "but there's uh things in other languages that makes them less fa tolerant",
    "start": "378319",
    "end": "383880"
  },
  {
    "text": "maintainable and scalable so why is Aang fault tolerant well this was",
    "start": "383880",
    "end": "390800"
  },
  {
    "text": "basically what the designers of Aang wanted from the beginning this was back in the 80s at Ericson when Ericson",
    "start": "390800",
    "end": "399080"
  },
  {
    "text": "suddenly realized that 80% of their budgets for new system was not Hardware",
    "start": "399080",
    "end": "404720"
  },
  {
    "text": "as they used to thing but actually software and they knew how to build Reliable Hardware but how would they",
    "start": "404720",
    "end": "411160"
  },
  {
    "text": "build Reliable Software so they uh decided to",
    "start": "411160",
    "end": "417240"
  },
  {
    "text": "uh investigate this uh tried to find out ways to build Reliable Software and uh",
    "start": "417240",
    "end": "424039"
  },
  {
    "text": "the computer science lab at Ericson came up with airline that was designed to",
    "start": "424039",
    "end": "430680"
  },
  {
    "text": "build fault tolerant software uh by having the right concurrency model and doing error and",
    "start": "430680",
    "end": "437680"
  },
  {
    "text": "exception handling uh the right way and providing libraries for the really hard",
    "start": "437680",
    "end": "444319"
  },
  {
    "text": "stuff and I'm going to talk about all these things in detail and is also",
    "start": "444319",
    "end": "451960"
  },
  {
    "text": "maintainable so one reason for that is it's dynamically typed we going to see",
    "start": "451960",
    "end": "458160"
  },
  {
    "text": "that Dynamic type might not be something that you think about making a language",
    "start": "458160",
    "end": "464280"
  },
  {
    "text": "maintainable but it also enables a lot of things in the virtual machine that makes it",
    "start": "464280",
    "end": "470560"
  },
  {
    "text": "maintainable and you have symbolic and transparent data structures so all the",
    "start": "470560",
    "end": "475639"
  },
  {
    "text": "data in your system you can look at at any time and see exactly uh what they",
    "start": "475639",
    "end": "480879"
  },
  {
    "text": "look like in a symbolic way and there's an interactive",
    "start": "480879",
    "end": "486599"
  },
  {
    "text": "shell and airing is scalable so this is the thing that's most hyped about airing",
    "start": "487479",
    "end": "494199"
  },
  {
    "text": "these days and that's also because of the right concurrency model and the good libraries for the hard",
    "start": "494199",
    "end": "500479"
  },
  {
    "text": "stuff and a thing that most people that comes to",
    "start": "500479",
    "end": "505879"
  },
  {
    "text": "Airline uh hate about aine is that it has weird and very stupid strings it",
    "start": "505879",
    "end": "512200"
  },
  {
    "text": "just lists uh but if you're doing a web",
    "start": "512200",
    "end": "517360"
  },
  {
    "text": "service uh you can actually concatenate a lot of stuff and push them out really",
    "start": "517360",
    "end": "523080"
  },
  {
    "text": "really uh quickly with these weird Airline",
    "start": "523080",
    "end": "528320"
  },
  {
    "text": "strings a word from our sponsor before we go into the details",
    "start": "529040",
    "end": "535079"
  },
  {
    "text": "[Music]",
    "start": "535920",
    "end": "543909"
  },
  {
    "text": "I won't forget to keep an open mind cuz I know some things wait for me to find",
    "start": "545040",
    "end": "551279"
  },
  {
    "text": "and I can't help but to apologize cuz I know I act part even when I act kind he",
    "start": "551279",
    "end": "558600"
  },
  {
    "text": "hey I know you feel the same way hey hey and we got to play the game hey I want",
    "start": "558600",
    "end": "566560"
  },
  {
    "text": "you to know that I'll stay and you know I'm not forget to take your breath",
    "start": "566560",
    "end": "572600"
  },
  {
    "text": "away hey",
    "start": "572600",
    "end": "578959"
  },
  {
    "text": "hey [Music] heyy",
    "start": "579399",
    "end": "585839"
  },
  {
    "text": "heyy I thought you needed to be woken up because now we're going to dive into the",
    "start": "586920",
    "end": "593040"
  },
  {
    "start": "587000",
    "end": "1070000"
  },
  {
    "text": "internal of Arling so um just a brief break there and then you get to see some",
    "start": "593040",
    "end": "600200"
  },
  {
    "text": "airline code also there's no",
    "start": "600200",
    "end": "604279"
  },
  {
    "text": "catch so aling is dynamically and strongly",
    "start": "608440",
    "end": "614640"
  },
  {
    "text": "typed oh did you notice I put it on a keyboard the airine typing on a keyboard",
    "start": "614640",
    "end": "620560"
  },
  {
    "text": "that's the Yoke of the presentation sorry um",
    "start": "620560",
    "end": "625880"
  },
  {
    "text": "yeah so by having a dynamically type language we get a lot of benefits one",
    "start": "625880",
    "end": "632399"
  },
  {
    "text": "thing is that we can do hot code loading so while the system is running",
    "start": "632399",
    "end": "638000"
  },
  {
    "text": "we can actually load new code into the system uh you can do this in in many",
    "start": "638000",
    "end": "644920"
  },
  {
    "text": "languages but if you have static typing there's uh some problems so if you",
    "start": "644920",
    "end": "650680"
  },
  {
    "text": "suddenly realize that the types you had were wrong and you need to upgrade to a",
    "start": "650680",
    "end": "656639"
  },
  {
    "text": "new version you cannot really do that because uh you cannot load a new version",
    "start": "656639",
    "end": "664320"
  },
  {
    "text": "of some code which have a different view of the types in the system than uh other",
    "start": "664320",
    "end": "669519"
  },
  {
    "text": "parts of the code it also makes it uh possible to to",
    "start": "669519",
    "end": "679000"
  },
  {
    "text": "have the heaps and stacks movable since everything is uh nicely",
    "start": "679000",
    "end": "685920"
  },
  {
    "text": "tagged uh so this will make it possible to have really small stacks for each",
    "start": "685920",
    "end": "692600"
  },
  {
    "text": "process and we'll come back to that a little bit more and",
    "start": "692600",
    "end": "698040"
  },
  {
    "text": "for uh from a maintenance view you get uh very transparent data so you can log",
    "start": "698040",
    "end": "704480"
  },
  {
    "text": "into the system and look at any piece of memory and from that piece of memory you can actually see what data structures",
    "start": "704480",
    "end": "712000"
  },
  {
    "text": "are in the memory and of course you can do garbage",
    "start": "712000",
    "end": "717160"
  },
  {
    "text": "collection and you can do it with a copying collector so you get nice locality of",
    "start": "717160",
    "end": "724759"
  },
  {
    "text": "things so this is the arang type lce uh there you have something called a",
    "start": "725320",
    "end": "733399"
  },
  {
    "text": "term that's any anything in aing is a term",
    "start": "733399",
    "end": "740720"
  },
  {
    "text": "uh it can be a number and number is either an integer",
    "start": "740839",
    "end": "746959"
  },
  {
    "text": "or a float and typewise there's only the distinction between integers and floats",
    "start": "746959",
    "end": "753480"
  },
  {
    "text": "in the implementation there's actually two types of integers also there's immediate integers that fits in one word",
    "start": "753480",
    "end": "760120"
  },
  {
    "text": "of the machine and big integers which has to be boxed and put",
    "start": "760120",
    "end": "766320"
  },
  {
    "text": "on the Heap but Aline has just a notion of numbers where you can have numbers of",
    "start": "766320",
    "end": "774079"
  },
  {
    "text": "any size basically don't have to worry about",
    "start": "774079",
    "end": "779360"
  },
  {
    "text": "wrapping over word boundaries or anything like this and you have",
    "start": "779360",
    "end": "785560"
  },
  {
    "text": "floats then you have atoms that's a symbolic names that you can use very",
    "start": "786240",
    "end": "792720"
  },
  {
    "text": "practical to tag your code with atoms instead of just",
    "start": "792720",
    "end": "799160"
  },
  {
    "text": "numbers and references are a uh",
    "start": "799160",
    "end": "806279"
  },
  {
    "text": "specific term that you can create one ons to get a unique reference and no one",
    "start": "806279",
    "end": "812519"
  },
  {
    "text": "else should be able to create that one uh a reference that will compare equal to that reference so you can uh tag",
    "start": "812519",
    "end": "821399"
  },
  {
    "text": "messages with these references know that they came from you originally and things like this there's closures it's called",
    "start": "821399",
    "end": "828920"
  },
  {
    "text": "fun in Aang we have much more fun in Aang than in other languages because we don't have closures we have",
    "start": "828920",
    "end": "834360"
  },
  {
    "text": "funds uh there's ports that basically processes",
    "start": "834360",
    "end": "839720"
  },
  {
    "text": "but that are connected to some input output Channel there's PID which is the process",
    "start": "839720",
    "end": "847680"
  },
  {
    "text": "identifier that's your handle to another process in you have tles where you can have an",
    "start": "847680",
    "end": "856120"
  },
  {
    "text": "array of terms and lists of course consisting of",
    "start": "856120",
    "end": "862680"
  },
  {
    "text": "either nil or cons and then there's something called binary which is just a big piece of uh",
    "start": "862680",
    "end": "871959"
  },
  {
    "text": "bite memory so you have a uh a file for example you load it as a binary and you",
    "start": "871959",
    "end": "878440"
  },
  {
    "text": "get all the bytes in the file in memory and you can pass it around and examine",
    "start": "878440",
    "end": "886000"
  },
  {
    "text": "it all these uh terms are also comparable so",
    "start": "888839",
    "end": "894320"
  },
  {
    "text": "you can uh ask the system whether the interor one is less than the atom Fu or",
    "start": "894320",
    "end": "902240"
  },
  {
    "text": "less than the empty list and so on so the values on the left are less than the",
    "start": "902240",
    "end": "909040"
  },
  {
    "text": "values on the right except for integers and floats that have some uh really",
    "start": "909040",
    "end": "914240"
  },
  {
    "text": "special uh comparison semantics but um yeah we all know that we",
    "start": "914240",
    "end": "920440"
  },
  {
    "text": "shouldn't compare integers and floats anyway so but a good thing is that there",
    "start": "920440",
    "end": "925519"
  },
  {
    "text": "is a way to compare all the terms so you can use any term as a key and put it in",
    "start": "925519",
    "end": "931880"
  },
  {
    "text": "a dictionary or something like",
    "start": "931880",
    "end": "935319"
  },
  {
    "text": "that so now we're diving a bit deeper into the uh virtual machine so if you have a",
    "start": "938800",
    "end": "947160"
  },
  {
    "text": "string ining as I said earlier strings are just lists so a",
    "start": "947160",
    "end": "952560"
  },
  {
    "text": "string uh takes a lot of memory in ouring especially if you run on a 64-bit machine uh but a string like the string",
    "start": "952560",
    "end": "963399"
  },
  {
    "text": "hello just consists",
    "start": "964480",
    "end": "968360"
  },
  {
    "text": "of here is a pointer to memory so this is memory addresses",
    "start": "969680",
    "end": "974920"
  },
  {
    "text": "here uh we were very happy and got some very low memory addresses for this",
    "start": "974920",
    "end": "981240"
  },
  {
    "text": "example so uh a memory address and then the tag that says that this is a list",
    "start": "981240",
    "end": "987319"
  },
  {
    "text": "and that's just that the lowest bit is a one so I can go to this place in memory",
    "start": "987319",
    "end": "995519"
  },
  {
    "text": "at any time and I will see that this is a list and I can follow the pointer to address 128 and I will know that there's",
    "start": "995519",
    "end": "1003360"
  },
  {
    "text": "a conell here with the car and cutter or head or tail of this list so on the",
    "start": "1003360",
    "end": "1013519"
  },
  {
    "text": "address 128 there's the character age stored which is the SK value",
    "start": "1013519",
    "end": "1019639"
  },
  {
    "text": "for that character shifted left and then tag that says it's a small in which is",
    "start": "1019639",
    "end": "1026438"
  },
  {
    "text": "for ones and then in the",
    "start": "1026439",
    "end": "1031480"
  },
  {
    "text": "console there's another list tag and the address to the next",
    "start": "1031480",
    "end": "1039199"
  },
  {
    "text": "conso so this is just one process memory the",
    "start": "1044839",
    "end": "1051679"
  },
  {
    "text": "Heap and uh this is how a list would end up",
    "start": "1051679",
    "end": "1059480"
  },
  {
    "text": "and then we have the nil tag which is all ones except uh the third",
    "start": "1059480",
    "end": "1066760"
  },
  {
    "start": "1070000",
    "end": "1376000"
  },
  {
    "text": "bit so that's what we need to know about the types and the representation of them",
    "start": "1070520",
    "end": "1077280"
  },
  {
    "text": "before we go to the right concurrency model so the right concurrency",
    "start": "1077280",
    "end": "1083120"
  },
  {
    "text": "model gives you um the ability to have lightweight",
    "start": "1083120",
    "end": "1089919"
  },
  {
    "text": "processes and they all talk through message passing there is no shared State between them and this means that we can",
    "start": "1089919",
    "end": "1098480"
  },
  {
    "text": "also have a garbage collector that isn't stop the world",
    "start": "1098480",
    "end": "1104080"
  },
  {
    "text": "and they are connected through monitors and signals",
    "start": "1104080",
    "end": "1110760"
  },
  {
    "text": "so a process from the virtual machines point of view is just uh a bit of memory",
    "start": "1114559",
    "end": "1120919"
  },
  {
    "text": "so basically it's the process control block which is",
    "start": "1120919",
    "end": "1126760"
  },
  {
    "text": "a predefined structure with all the information about the process whether it's running where it keeps its deep",
    "start": "1126760",
    "end": "1132559"
  },
  {
    "text": "Heap and stack and um other interesting facts about the process",
    "start": "1132559",
    "end": "1139320"
  },
  {
    "text": "and then it has a mailbox and when it's empty it doesn't take any space except",
    "start": "1139320",
    "end": "1144440"
  },
  {
    "text": "for some space in the PCB which is already accounted for there and then there's a stack where the program",
    "start": "1144440",
    "end": "1153120"
  },
  {
    "text": "execution for um this process is done so each",
    "start": "1153120",
    "end": "1158880"
  },
  {
    "text": "process has its own stack and then there's a",
    "start": "1158880",
    "end": "1164240"
  },
  {
    "text": "heap where the process keeps its own own",
    "start": "1164240",
    "end": "1170840"
  },
  {
    "text": "data and the stack and Heap starts at 233 words or maybe 332",
    "start": "1170840",
    "end": "1178919"
  },
  {
    "text": "words uh so a normal process when it start up",
    "start": "1178919",
    "end": "1184480"
  },
  {
    "text": "it's very very small it's uh under 300 words of",
    "start": "1184480",
    "end": "1190520"
  },
  {
    "text": "memory and the trick here is of course that",
    "start": "1190520",
    "end": "1195960"
  },
  {
    "text": "these Stacks can grow and Shrink as necessary so in many programming",
    "start": "1195960",
    "end": "1201799"
  },
  {
    "text": "languages you would need to create a stack of a page size or something like",
    "start": "1201799",
    "end": "1206919"
  },
  {
    "text": "that and uh you would have uh perhaps one stack per for the",
    "start": "1206919",
    "end": "1213360"
  },
  {
    "text": "whole machine or something like that but the alang mm we use one stack per",
    "start": "1213360",
    "end": "1220280"
  },
  {
    "text": "process and we can reallocate them we know what everything on the stack is and we can move it around and and change the",
    "start": "1220280",
    "end": "1226840"
  },
  {
    "text": "pointers as needed and then the concurrency model uh is",
    "start": "1226840",
    "end": "1235960"
  },
  {
    "text": "done by the virtual machine applying um actually Cooperative",
    "start": "1235960",
    "end": "1242799"
  },
  {
    "text": "multitasking on the side of the virtual machines um uh view of it so for a a",
    "start": "1242799",
    "end": "1253080"
  },
  {
    "text": "process or a programmer you have preemptive multitasking so you run your process and uh it could at any point",
    "start": "1253080",
    "end": "1262280"
  },
  {
    "text": "yield and let some other process run if you're running on a single core machine",
    "start": "1262280",
    "end": "1270559"
  },
  {
    "text": "then the multi- tasking is done by yielding and letting other process run this is of course also true in a",
    "start": "1270559",
    "end": "1277440"
  },
  {
    "text": "multicore machines where you have more processes than you have schedulers but on the virtual machine",
    "start": "1277440",
    "end": "1284120"
  },
  {
    "text": "side it's actually done with uh",
    "start": "1284120",
    "end": "1290520"
  },
  {
    "text": "collaborative yielding so at certain points",
    "start": "1290520",
    "end": "1296960"
  },
  {
    "text": "the virtual machine will check whether the process has used",
    "start": "1296960",
    "end": "1303120"
  },
  {
    "text": "up all its reductions so what a reduction is is a",
    "start": "1303120",
    "end": "1309559"
  },
  {
    "text": "bit hand wavy but usually it's a function call so every function call is",
    "start": "1309559",
    "end": "1315760"
  },
  {
    "text": "uh uh uses one reduction when it comes to builtins in the language it's a",
    "start": "1315760",
    "end": "1323279"
  },
  {
    "text": "little bit more unclear but basically a process cannot execute without using",
    "start": "1323279",
    "end": "1329400"
  },
  {
    "text": "reductions so one reason for this is because there's no Loops in Airline there is no Loop construct the only way",
    "start": "1329400",
    "end": "1336240"
  },
  {
    "text": "to make a loop in Airline is by using tail recursion so then you will actually do a function call so at each function",
    "start": "1336240",
    "end": "1343440"
  },
  {
    "text": "call you will use one reduction and sooner or later the process run out of",
    "start": "1343440",
    "end": "1352320"
  },
  {
    "text": "reductions and then uh at places where the virtual",
    "start": "1352720",
    "end": "1359640"
  },
  {
    "text": "machine knows the full state of the process and it has run out of reductions",
    "start": "1359640",
    "end": "1365039"
  },
  {
    "text": "it will block that process and sched in a new process to",
    "start": "1365039",
    "end": "1372840"
  },
  {
    "text": "run so in reality it's not just four",
    "start": "1374760",
    "end": "1380520"
  },
  {
    "start": "1376000",
    "end": "1709000"
  },
  {
    "text": "pieces of memory but for one thing the stack and the Heap is allocated together",
    "start": "1380520",
    "end": "1387360"
  },
  {
    "text": "as uh one piece of memory so they grow towards each other and this uh saves one",
    "start": "1387360",
    "end": "1393320"
  },
  {
    "text": "pointer in the beam emulator for one thing because you don't need to keep",
    "start": "1393320",
    "end": "1398679"
  },
  {
    "text": "track of where the Heap ends and where the stack ends when those two pointers",
    "start": "1398679",
    "end": "1404120"
  },
  {
    "text": "top of Heap and top of Stack meet uh then you know that you run out of space",
    "start": "1404120",
    "end": "1410080"
  },
  {
    "text": "and there's also an old Heap because there's a generational garbage collector so data that survives",
    "start": "1410080",
    "end": "1418080"
  },
  {
    "text": "for uh couple of garbage collections will move to the old",
    "start": "1418080",
    "end": "1424880"
  },
  {
    "text": "Heap and that Heap will not be garbage collected until there's a new major",
    "start": "1424880",
    "end": "1432799"
  },
  {
    "text": "collection there's also something called a process d dictionary which uh we try",
    "start": "1434840",
    "end": "1441320"
  },
  {
    "text": "to not talk about in the airline world so I will not do that uh there are uh actually two",
    "start": "1441320",
    "end": "1450200"
  },
  {
    "text": "inboxes in the virtual machine and this is so that you can send",
    "start": "1450200",
    "end": "1458039"
  },
  {
    "text": "messages to a process uh even though it's running on another schuer and we'll look at the",
    "start": "1458039",
    "end": "1464919"
  },
  {
    "text": "details for that so imagine that you have the two processes process one and",
    "start": "1464919",
    "end": "1470080"
  },
  {
    "text": "process two and process one wants to call this",
    "start": "1470080",
    "end": "1475880"
  },
  {
    "text": "amazing function say hello which takes this string hello that we know now how",
    "start": "1475880",
    "end": "1481399"
  },
  {
    "text": "it looks on the Heap it's a lot of data on the Heap and it sends this uh to uh",
    "start": "1481399",
    "end": "1487760"
  },
  {
    "text": "some other process which is process two so on the Heap we have the word",
    "start": "1487760",
    "end": "1495600"
  },
  {
    "text": "hello we have some other process here process two uh that's sit in a wait and",
    "start": "1495600",
    "end": "1504000"
  },
  {
    "text": "listen uh loop here so we execute this statement and",
    "start": "1504000",
    "end": "1511440"
  },
  {
    "text": "then the virtual machine will create something called an mbff and then it will copy the whole",
    "start": "1511440",
    "end": "1520440"
  },
  {
    "text": "term to this uff and this is still",
    "start": "1520440",
    "end": "1526200"
  },
  {
    "text": "within a process one's uh memory and process",
    "start": "1526200",
    "end": "1533279"
  },
  {
    "text": "one's uh execution so this process can run and do whatever it want during this",
    "start": "1533279",
    "end": "1540080"
  },
  {
    "text": "copying",
    "start": "1540080",
    "end": "1542799"
  },
  {
    "text": "time and then at the end of this",
    "start": "1546559",
    "end": "1551600"
  },
  {
    "text": "send the emulator grabs a quick lock of this inbox and and just moves the",
    "start": "1551600",
    "end": "1560399"
  },
  {
    "text": "pointer from this inbox to this uff and",
    "start": "1560399",
    "end": "1565559"
  },
  {
    "text": "now it suddenly belongs to this process",
    "start": "1565559",
    "end": "1571720"
  },
  {
    "text": "memory so in this process we do a receive and we wait for the message",
    "start": "1576039",
    "end": "1583600"
  },
  {
    "text": "42 uh this message will not show up but we have this timeout Clause here that",
    "start": "1583600",
    "end": "1591120"
  },
  {
    "text": "after one second we will uh return okay anyway and continue",
    "start": "1591120",
    "end": "1600600"
  },
  {
    "text": "executing so what happens when when we execute this receive Loop is that we",
    "start": "1600600",
    "end": "1608039"
  },
  {
    "text": "move this message to the scene mailbox so this is now part of uh things",
    "start": "1608039",
    "end": "1617600"
  },
  {
    "text": "that has to be garbage collected if uh",
    "start": "1617600",
    "end": "1622760"
  },
  {
    "text": "this process want to do a garbage collection so this",
    "start": "1622760",
    "end": "1628240"
  },
  {
    "text": "inbox uh is not looked at during garbage collection and any new messages coming",
    "start": "1628240",
    "end": "1635279"
  },
  {
    "text": "in can come in even though the other process is doing garbage collection because this uh process has not seen",
    "start": "1635279",
    "end": "1642039"
  },
  {
    "text": "them in any way yet so uh we can get the quick lock to to",
    "start": "1642039",
    "end": "1648200"
  },
  {
    "text": "add something to this inbox and move this uh memory over and then we move it",
    "start": "1648200",
    "end": "1655480"
  },
  {
    "text": "to the scene inbox and then we come to the next receive clause and now we move it from",
    "start": "1655480",
    "end": "1661519"
  },
  {
    "text": "the scene inbox this message hello matches anything so we move it to the",
    "start": "1661519",
    "end": "1668240"
  },
  {
    "text": "Heap",
    "start": "1668240",
    "end": "1671240"
  },
  {
    "text": "instead yeah so that was how message passing in aine",
    "start": "1676360",
    "end": "1682080"
  },
  {
    "text": "works and for the programmer you don't have any shared memory at all and for",
    "start": "1682399",
    "end": "1688760"
  },
  {
    "text": "the virtual machine of course you have to be able to get to the mailbox of the",
    "start": "1688760",
    "end": "1694320"
  },
  {
    "text": "process but it's minimized the time that you actually need to take a lock of the",
    "start": "1694320",
    "end": "1699360"
  },
  {
    "text": "other mailbox and that mailbox is kept apart from the mailbox you have to",
    "start": "1699360",
    "end": "1706159"
  },
  {
    "text": "consider when you do garbage collection so the other great thing about airine is that",
    "start": "1706159",
    "end": "1714000"
  },
  {
    "start": "1709000",
    "end": "1766000"
  },
  {
    "text": "we have uh error handling and exception done right done right and",
    "start": "1714000",
    "end": "1719720"
  },
  {
    "text": "there's uh something called monitors and signals so with these",
    "start": "1719720",
    "end": "1726799"
  },
  {
    "text": "signals you can build a supervision tree so uh what the OTP Library gives",
    "start": "1726799",
    "end": "1735159"
  },
  {
    "text": "you is also a generic supervisor so you can start up the supervisor that monitors two sh",
    "start": "1735159",
    "end": "1743600"
  },
  {
    "text": "supervisors that monitors children and if a child dies",
    "start": "1743600",
    "end": "1749320"
  },
  {
    "text": "then uh a signal will go to the supervisor which can restart it",
    "start": "1749320",
    "end": "1759159"
  },
  {
    "text": "so let's um do a small demo of",
    "start": "1760399",
    "end": "1765440"
  },
  {
    "text": "that so here is a running alang system with the supervision structure of a",
    "start": "1765440",
    "end": "1772919"
  },
  {
    "start": "1766000",
    "end": "1888000"
  },
  {
    "text": "empty system when it started uh so there's a kernel supervisor keeping track of a number of",
    "start": "1772919",
    "end": "1781279"
  },
  {
    "text": "other supervisors uh that's used in the",
    "start": "1781279",
    "end": "1788840"
  },
  {
    "text": "system",
    "start": "1789000",
    "end": "1792000"
  },
  {
    "text": "and now I have uh the wrong",
    "start": "1794399",
    "end": "1801480"
  },
  {
    "text": "keyboard written a small program that starts a supervisor",
    "start": "1803519",
    "end": "1809799"
  },
  {
    "text": "and then it starts a child under supervisor that uh just counts so we",
    "start": "1809799",
    "end": "1815279"
  },
  {
    "text": "started a supervisor um with the PID",
    "start": "1815279",
    "end": "1821320"
  },
  {
    "text": "55 so now uh it shows up under the kernel safe",
    "start": "1821320",
    "end": "1826640"
  },
  {
    "text": "supervisor this uh supervisor 55 and the child",
    "start": "1826640",
    "end": "1832960"
  },
  {
    "text": "56 and now I can actually just go in and kill this child and then you see that it",
    "start": "1832960",
    "end": "1840960"
  },
  {
    "text": "dies but it's restarted so it start counting from uh zero",
    "start": "1840960",
    "end": "1846279"
  },
  {
    "text": "again um I can even kill the supervisor and then it restarts the",
    "start": "1846279",
    "end": "1852640"
  },
  {
    "text": "supervisor and the child and it keeps on Counting um of course when dies it loses",
    "start": "1852640",
    "end": "1858840"
  },
  {
    "text": "its state but it could save its state in uh some database or whatever it needs to",
    "start": "1858840",
    "end": "1864519"
  },
  {
    "text": "if it needs to keep State persistent but just because there's a bug or anything",
    "start": "1864519",
    "end": "1871080"
  },
  {
    "text": "happening to this process doesn't mean that the whole system goes down or that",
    "start": "1871080",
    "end": "1876480"
  },
  {
    "text": "uh my code stops executing it just comes right right back up",
    "start": "1876480",
    "end": "1883639"
  },
  {
    "start": "1888000",
    "end": "2001000"
  },
  {
    "text": "and of course alang has ordinary or sort of ordinary try catch",
    "start": "1889440",
    "end": "1897320"
  },
  {
    "text": "so you can write code to get the file so you send in an file name try to open it",
    "start": "1897320",
    "end": "1905760"
  },
  {
    "text": "and if you get an okay you get a handle and here I don't really want to handle",
    "start": "1905760",
    "end": "1911919"
  },
  {
    "text": "the case that the file doesn't exist so I just ignore that case and that error",
    "start": "1911919",
    "end": "1916960"
  },
  {
    "text": "will then be propagated upwards to some other place where uh hopefully",
    "start": "1916960",
    "end": "1922559"
  },
  {
    "text": "you supply the file name then you can know what you could do with it if it doesn't",
    "start": "1922559",
    "end": "1928120"
  },
  {
    "text": "exist um and then I try to read uh from the file handle and I get",
    "start": "1928120",
    "end": "1933720"
  },
  {
    "text": "the file and return it or I get can catch an error end of file and",
    "start": "1933720",
    "end": "1940720"
  },
  {
    "text": "return uh an empty list in that case and then I do close the file hander with an",
    "start": "1940720",
    "end": "1947039"
  },
  {
    "text": "after clause and this is executed uh whether I go this way with",
    "start": "1947039",
    "end": "1952679"
  },
  {
    "text": "an okay or the error this is always executed but the return value is still",
    "start": "1952679",
    "end": "1959519"
  },
  {
    "text": "the return value of the case that matched so the return value of this after Clause is always thrown",
    "start": "1959519",
    "end": "1966600"
  },
  {
    "text": "away but this way you can write safe handlers and only care about",
    "start": "1966600",
    "end": "1975480"
  },
  {
    "text": "the errors that you uh want to take care care of and the other ones are passed up",
    "start": "1975480",
    "end": "1981399"
  },
  {
    "text": "in the Shain and if there's no catch anywhere in the process stack the",
    "start": "1981399",
    "end": "1990000"
  },
  {
    "text": "process will die and the signal will will be sent to the supervisor",
    "start": "1990000",
    "end": "1995480"
  },
  {
    "text": "instead so uh one other good feature",
    "start": "2000799",
    "end": "2006639"
  },
  {
    "start": "2001000",
    "end": "2113000"
  },
  {
    "text": "with aling is the interactive shell so we saw now that there's actually reppel even for Java and that's a nice thing",
    "start": "2006639",
    "end": "2014399"
  },
  {
    "text": "but Aline assess this for a long time and uh coupled with the",
    "start": "2014399",
    "end": "2020039"
  },
  {
    "text": "transparent um data types data structures it's really easy to go into",
    "start": "2020039",
    "end": "2026399"
  },
  {
    "text": "the shell and look at the state of the system and when you're building your",
    "start": "2026399",
    "end": "2031840"
  },
  {
    "text": "program the shell is fantastic so you write some code go to the Shell test it directly in the shell see if it works or",
    "start": "2031840",
    "end": "2039279"
  },
  {
    "text": "not uh the test and uh right cycle is very very",
    "start": "2039279",
    "end": "2046399"
  },
  {
    "text": "short you just write one line of code go to a shell test it or even write some code in the Shell to test it and so on",
    "start": "2046399",
    "end": "2054480"
  },
  {
    "text": "very nice but it has an one unfortunate drawback that is that there's almost no",
    "start": "2054480",
    "end": "2063638"
  },
  {
    "text": "test driven development in alang the way that it should be well maybe it is you",
    "start": "2063639",
    "end": "2069560"
  },
  {
    "text": "you do write your tests but you throw them away all the time so you write all your test in a shell test your code",
    "start": "2069560",
    "end": "2076720"
  },
  {
    "text": "every little character you write you test it in the Shell it works fine and then you write it your next test and and",
    "start": "2076720",
    "end": "2083358"
  },
  {
    "text": "so on till you get it working but when you're done it's only in the shell and",
    "start": "2083359",
    "end": "2089040"
  },
  {
    "text": "you don't get these nice uh test that you can use",
    "start": "2089040",
    "end": "2095158"
  },
  {
    "text": "later so that um bugs me a lot but",
    "start": "2095159",
    "end": "2100760"
  },
  {
    "text": "that's the way it is with a shell but we have",
    "start": "2100760",
    "end": "2106280"
  },
  {
    "text": "um a short demo of the shell",
    "start": "2106280",
    "end": "2112400"
  },
  {
    "text": "so here are some things that you can do for example get the Heap size of all the",
    "start": "2112400",
    "end": "2120720"
  },
  {
    "start": "2113000",
    "end": "2279000"
  },
  {
    "text": "processes in the system so uh you get all processes in a system",
    "start": "2120720",
    "end": "2128440"
  },
  {
    "text": "system uh in the variable p and then we have a list comprehension here so for",
    "start": "2128440",
    "end": "2135320"
  },
  {
    "text": "each P each process we do process info as for the Heap",
    "start": "2135320",
    "end": "2140800"
  },
  {
    "text": "size and then we fold over it with a",
    "start": "2140800",
    "end": "2146160"
  },
  {
    "text": "function that takes the value uh that we get from process info",
    "start": "2146160",
    "end": "2152800"
  },
  {
    "text": "and we add uh this to the accumulated value and start with zero so if I ask",
    "start": "2152800",
    "end": "2161359"
  },
  {
    "text": "to processes I get all the pids in the",
    "start": "2163880",
    "end": "2169079"
  },
  {
    "text": "system um so if I do",
    "start": "2169079",
    "end": "2173880"
  },
  {
    "text": "I've got an American keyboard on a Swedish one it's always exciting",
    "start": "2209720",
    "end": "2216359"
  },
  {
    "text": "what's",
    "start": "2218319",
    "end": "2220480"
  },
  {
    "text": "that so if I do process info on all processes I can",
    "start": "2228839",
    "end": "2234640"
  },
  {
    "text": "see that I get tles with Heap size and and a size and then I can keep on building my little things for",
    "start": "2234640",
    "end": "2242599"
  },
  {
    "text": "examining uh things in the system or I can just call the buil-in",
    "start": "2242599",
    "end": "2248000"
  },
  {
    "text": "that will give me the names of the processes or what they're running and",
    "start": "2248000",
    "end": "2254240"
  },
  {
    "text": "how many messages they have in their queue and their sizes and so",
    "start": "2254240",
    "end": "2259400"
  },
  {
    "text": "on so this shell is uh amazing when you",
    "start": "2259400",
    "end": "2264440"
  },
  {
    "text": "do maintenance on running system that are behaving badly",
    "start": "2264440",
    "end": "2270240"
  },
  {
    "start": "2279000",
    "end": "2417000"
  },
  {
    "text": "and Ericson spent a lot of time building the OTP",
    "start": "2281079",
    "end": "2286319"
  },
  {
    "text": "libraries uh and this gives you the hard stuff so they have gen server which is a",
    "start": "2286319",
    "end": "2294720"
  },
  {
    "text": "way of building a server that takes care of the things that you need in a server also like maintenance and the ability to",
    "start": "2294720",
    "end": "2301960"
  },
  {
    "text": "do hot code upgrade while the system is running um you have the",
    "start": "2301960",
    "end": "2308040"
  },
  {
    "text": "supervisor Yen supervisor uh",
    "start": "2308040",
    "end": "2313440"
  },
  {
    "text": "that um you can build these supervision trees and have all the settings for if",
    "start": "2313440",
    "end": "2319200"
  },
  {
    "text": "you want um them to kill all the siblings or restart all the siblings or",
    "start": "2319200",
    "end": "2325800"
  },
  {
    "text": "just restart one child and so on when uh a process dies and then there's a phite",
    "start": "2325800",
    "end": "2332000"
  },
  {
    "text": "state machine and it makes it easy to write the phite state machine in the",
    "start": "2332000",
    "end": "2337520"
  },
  {
    "text": "same way so everyone can read what that finite State machine does and handles",
    "start": "2337520",
    "end": "2343560"
  },
  {
    "text": "messages to phite State machine and so on and this makes",
    "start": "2343560",
    "end": "2349079"
  },
  {
    "text": "it uh possible if not easy to build uh fault tolerant scalable",
    "start": "2349079",
    "end": "2357400"
  },
  {
    "text": "systems yes and then we have the we strings so uh strings are just list of",
    "start": "2358440",
    "end": "2364280"
  },
  {
    "text": "integers uh but there's this thing that's called",
    "start": "2364280",
    "end": "2370440"
  },
  {
    "text": "an I list which is actually a nested list of strings and integers and this means that you can in",
    "start": "2370440",
    "end": "2378839"
  },
  {
    "text": "this list you can put binaries or strings or list of strings and that",
    "start": "2378839",
    "end": "2385960"
  },
  {
    "text": "means that you con can concatenate two strings in constant time you",
    "start": "2385960",
    "end": "2391119"
  },
  {
    "text": "just uh uh put them in a list in a console",
    "start": "2391119",
    "end": "2396480"
  },
  {
    "text": "and then you have uh concatenated two strings so if",
    "start": "2396480",
    "end": "2402839"
  },
  {
    "text": "you're uh serving up HTML and you're grabbing uh data from different places",
    "start": "2402839",
    "end": "2409000"
  },
  {
    "text": "to put into your page you can just quickly build this whole structure and then send it to an IOP",
    "start": "2409000",
    "end": "2416880"
  },
  {
    "start": "2417000",
    "end": "2571000"
  },
  {
    "text": "Port so if you can't do airling if your cat don't allow you or whatever is all",
    "start": "2417599",
    "end": "2423560"
  },
  {
    "text": "lost well maybe but one one thing you can do of course is to uh model your",
    "start": "2423560",
    "end": "2431400"
  },
  {
    "text": "programs as Services basically that's what you do in aine with all your little",
    "start": "2431400",
    "end": "2436560"
  },
  {
    "text": "components you model them as services that are independent and that has an API",
    "start": "2436560",
    "end": "2441640"
  },
  {
    "text": "which is based on message passing and that's when you build your components",
    "start": "2441640",
    "end": "2447200"
  },
  {
    "text": "as uh Services then uh uh you get some",
    "start": "2447200",
    "end": "2452920"
  },
  {
    "text": "of that non-shared uh memory from uh your",
    "start": "2452920",
    "end": "2458920"
  },
  {
    "text": "design so you can use message passing and no shared State uh for example in",
    "start": "2458920",
    "end": "2465680"
  },
  {
    "text": "Scala uh you have a whole set of things you can pass around as messages that are",
    "start": "2465680",
    "end": "2471960"
  },
  {
    "text": "immutable and if you stick to that part of Scola you can in Scola",
    "start": "2471960",
    "end": "2477960"
  },
  {
    "text": "get uh almost alang like behavior of things",
    "start": "2477960",
    "end": "2483920"
  },
  {
    "text": "so you don't share any state you just copy uh immutable uh structures or you can go",
    "start": "2483920",
    "end": "2492400"
  },
  {
    "text": "the AA way with scholar done and actually Implement uh OTP and whatever",
    "start": "2492400",
    "end": "2498200"
  },
  {
    "text": "in your favorite language so at alang Workshop in Boston or actually it was at",
    "start": "2498200",
    "end": "2503640"
  },
  {
    "text": "a uh commercial uses of functional programming in Boston last week there was uh some guys that had done this in",
    "start": "2503640",
    "end": "2510319"
  },
  {
    "text": "scheme so they built OTP on top of scheme in order to control uh medical",
    "start": "2510319",
    "end": "2516119"
  },
  {
    "text": "equipment fascinating stuff I just wonder why they didn't use Airline but anyway they they got airline in scheme",
    "start": "2516119",
    "end": "2522920"
  },
  {
    "text": "so that's good but you might lose the Fantastic",
    "start": "2522920",
    "end": "2528720"
  },
  {
    "text": "syntax of arang of course and probably lose some of the multicore",
    "start": "2528720",
    "end": "2534280"
  },
  {
    "text": "advantage and if you do like in Scola there's the problem that uh suddenly you",
    "start": "2534280",
    "end": "2542319"
  },
  {
    "text": "realize that you need some Library that's in Java and you bring in a mutable Library and suddenly there's",
    "start": "2542319",
    "end": "2549240"
  },
  {
    "text": "mutation and state behind your back and uh you're in a bad place uh you might also lose the",
    "start": "2549240",
    "end": "2557000"
  },
  {
    "text": "transparent types and the Fantastic shell and possibly hold code upgrade at",
    "start": "2557000",
    "end": "2562480"
  },
  {
    "text": "least at the granular level that you can get in in",
    "start": "2562480",
    "end": "2567558"
  },
  {
    "text": "Airline but as I said in the beginning the most important aspect of Airline",
    "start": "2570920",
    "end": "2576240"
  },
  {
    "start": "2571000",
    "end": "2612000"
  },
  {
    "text": "isn't this fancy virtual machine and uh whatever it does to run your program in",
    "start": "2576240",
    "end": "2583760"
  },
  {
    "text": "a uh scalable way it's that when you start programming airling you start",
    "start": "2583760",
    "end": "2590359"
  },
  {
    "text": "thinking in a completely new way you start thinking concurrently with processes and how to uh model your",
    "start": "2590359",
    "end": "2598800"
  },
  {
    "text": "system as small services and you get a completely",
    "start": "2598800",
    "end": "2604359"
  },
  {
    "text": "different design of your program when you think Airline than if you think in any other",
    "start": "2604359",
    "end": "2611160"
  },
  {
    "text": "language so another word from our sponsor then hi my name is Sebastian and",
    "start": "2611160",
    "end": "2617079"
  },
  {
    "start": "2612000",
    "end": "2771000"
  },
  {
    "text": "I'm the CEO of claa I know people like me and",
    "start": "2617079",
    "end": "2622800"
  },
  {
    "text": "recruiters all over the world are constantly bugging you stalking you trying to get you to join their company",
    "start": "2622800",
    "end": "2630240"
  },
  {
    "text": "that's why I'm not going to do that instead I'm going to give you the top 10 list why you should not join",
    "start": "2630240",
    "end": "2638480"
  },
  {
    "text": "CL we are not a ping pong playing startup anymore we are actually a",
    "start": "2638480",
    "end": "2644119"
  },
  {
    "text": "growing company where people like getting things done and there's more than 900 of us we don't work with anything sexy such",
    "start": "2644119",
    "end": "2652599"
  },
  {
    "text": "as music we work with boring over complicated stuff like payments moving",
    "start": "2652599",
    "end": "2658920"
  },
  {
    "text": "other people's money back and forth talking about money this is not",
    "start": "2658920",
    "end": "2664400"
  },
  {
    "text": "going to be the Super exciting place where you kind of wonder what's going to happen to this company tomorrow we",
    "start": "2664400",
    "end": "2669960"
  },
  {
    "text": "profitable we've been profitable since day one you will not be the best we have",
    "start": "2669960",
    "end": "2676960"
  },
  {
    "text": "people invented Internet we even have Israeli security officers even worse we",
    "start": "2676960",
    "end": "2683880"
  },
  {
    "text": "have people writing books about compilator and stuff like that I can't even",
    "start": "2683880",
    "end": "2689839"
  },
  {
    "text": "pronounce if you want to build the coolest smoothest payment app the nobody uses",
    "start": "2689839",
    "end": "2698359"
  },
  {
    "text": "this is not the place to be it's not around the corner unless you",
    "start": "2698359",
    "end": "2704480"
  },
  {
    "text": "live beyond the wall don't even think about bringing your partner swed people have been voted",
    "start": "2704480",
    "end": "2711480"
  },
  {
    "text": "the best looking people in the world you won't understand the thing what anybody's saying we all sound like",
    "start": "2711480",
    "end": "2718359"
  },
  {
    "text": "the Swedish Chef we're a socialist country that means like you don't need",
    "start": "2718359",
    "end": "2724880"
  },
  {
    "text": "to pay for anything and worse I get to sit in office where everyone else",
    "start": "2724880",
    "end": "2731440"
  },
  {
    "text": "sits we have six weeks of vacation and months of paid paternity leave I mean",
    "start": "2731440",
    "end": "2738240"
  },
  {
    "text": "it's awful for anybody who loves to work so to sum it all up you're more than",
    "start": "2738240",
    "end": "2743839"
  },
  {
    "text": "welcome to join clana if you find we working at a fast growing profitable company with brilliant Misfits that look",
    "start": "2743839",
    "end": "2750880"
  },
  {
    "text": "awesome and you kind of fine with 6 weeks of vacation I gu gu us out of the question",
    "start": "2750880",
    "end": "2758319"
  },
  {
    "text": "but thank you for [Music]",
    "start": "2758319",
    "end": "2765090"
  },
  {
    "text": "listening yeah that was all I had unless you want to know more gory details I",
    "start": "2770400",
    "end": "2776440"
  },
  {
    "start": "2771000",
    "end": "3081000"
  },
  {
    "text": "have some extra slides but thank you [Applause]",
    "start": "2776440",
    "end": "2787119"
  },
  {
    "text": "so we have a number of questions for you uh let me see so um you talked a lot",
    "start": "2787119",
    "end": "2794240"
  },
  {
    "text": "about the right concurrency model is it always the right one or have you come",
    "start": "2794240",
    "end": "2800240"
  },
  {
    "text": "across situations where you Dr like a different concurrency",
    "start": "2800240",
    "end": "2805480"
  },
  {
    "text": "model no I I I don't think I've come to seen places where the model hasn't",
    "start": "2805480",
    "end": "2813640"
  },
  {
    "text": "been right of course the usage of it have not always been right but for the",
    "start": "2813640",
    "end": "2819960"
  },
  {
    "text": "things that we have been building the the model has fitted perfectly if you",
    "start": "2819960",
    "end": "2826079"
  },
  {
    "text": "build computer games and need to do quick graphic and so on aling is probably not a language for you but for",
    "start": "2826079",
    "end": "2832680"
  },
  {
    "text": "what we're doing it's perfect so airine has lots of message",
    "start": "2832680",
    "end": "2838559"
  },
  {
    "text": "passing lots of processes but what about locality and cach lines doesn't that",
    "start": "2838559",
    "end": "2843800"
  },
  {
    "text": "mess all that up uh yes it does but but um it it's not as important as you think",
    "start": "2843800",
    "end": "2852040"
  },
  {
    "text": "in most cases but when you uh really need that uh it's it's a",
    "start": "2852040",
    "end": "2861000"
  },
  {
    "text": "bit complicated ining to get it right that's true but you have to really think about your program to get it to to use",
    "start": "2861000",
    "end": "2870000"
  },
  {
    "text": "uh less memory and then it it's it's not so fun anymore but uh in most cases",
    "start": "2870000",
    "end": "2877839"
  },
  {
    "text": "uh the the machine does a very good job and uh by having the the model with the",
    "start": "2877839",
    "end": "2886040"
  },
  {
    "text": "processes you will have model your program in such a way that it it scales so if you have many cores or many",
    "start": "2886040",
    "end": "2893920"
  },
  {
    "text": "machines you will distribute your your job on on many of these cores and and",
    "start": "2893920",
    "end": "2900280"
  },
  {
    "text": "one process will run on one core and will uh work pretty well with uh having",
    "start": "2900280",
    "end": "2908960"
  },
  {
    "text": "all its memory on that core",
    "start": "2908960",
    "end": "2913960"
  },
  {
    "text": "also okay so air langang is also used in uh realtime applications what kind of",
    "start": "2914400",
    "end": "2921079"
  },
  {
    "text": "guarantees does the air Lang VM give for timing none well it it guarantees that timeouts",
    "start": "2921079",
    "end": "2927880"
  },
  {
    "text": "will not occur before the time that the timeout says that it will",
    "start": "2927880",
    "end": "2933040"
  },
  {
    "text": "occur and this works okay in real time settings well I wouldn't put it in",
    "start": "2934240",
    "end": "2940119"
  },
  {
    "text": "Brakes in a in a car but it depends on what kind of real time requirements you",
    "start": "2940119",
    "end": "2948480"
  },
  {
    "text": "have okay um now we have another question which is where did Erikson use",
    "start": "2948880",
    "end": "2955079"
  },
  {
    "text": "erlang erang was of course designed at Erikson uh and maybe we can take that both as where did Ericson use adang in",
    "start": "2955079",
    "end": "2961440"
  },
  {
    "text": "the early days and where does Ericson use adang today uh I I never worked at",
    "start": "2961440",
    "end": "2967799"
  },
  {
    "text": "Ericson so I can't really speak uh for them on that but um olves that's sitting",
    "start": "2967799",
    "end": "2974839"
  },
  {
    "text": "here that's been named the first commercial airline user twice during this conference um he knows about this",
    "start": "2974839",
    "end": "2981359"
  },
  {
    "text": "so they build a uh axd 301 which was the",
    "start": "2981359",
    "end": "2986960"
  },
  {
    "text": "first eight uh ATM ATM switch from Ericson and which",
    "start": "2986960",
    "end": "2995119"
  },
  {
    "text": "brsh bought and run for 10 years and then they said that they had N9 nines of up",
    "start": "2995119",
    "end": "3001760"
  },
  {
    "text": "time on this system uh so that was a successful uh use of Airline early on",
    "start": "3001760",
    "end": "3009200"
  },
  {
    "text": "and nowadays Ericson use it a lot in testing they use some quick check tool or whatever that for almost all their",
    "start": "3009200",
    "end": "3015720"
  },
  {
    "text": "projects even though those projects are not in Airline themselves but the Quick",
    "start": "3015720",
    "end": "3021000"
  },
  {
    "text": "Check tool works well for testing apis and protocols and so on",
    "start": "3021000",
    "end": "3027559"
  },
  {
    "text": "okay well we have um a few more minutes and I've asked the questions that have been posted here so are there other",
    "start": "3027559",
    "end": "3033960"
  },
  {
    "text": "questions for",
    "start": "3033960",
    "end": "3036440"
  },
  {
    "text": "Eric well in that Cas oh has",
    "start": "3040000",
    "end": "3044880"
  },
  {
    "text": "one so I don't know if you could hear that up at the back but uh the summary was that Ericson nowadays are not just",
    "start": "3046160",
    "end": "3054400"
  },
  {
    "text": "using adang for new testing but for some very serious projects and uh they're",
    "start": "3054400",
    "end": "3060559"
  },
  {
    "text": "happy to inform us all that they are using Aang for some serious projects but",
    "start": "3060559",
    "end": "3065760"
  },
  {
    "text": "not what they are okay any last",
    "start": "3065760",
    "end": "3072960"
  },
  {
    "text": "question okay well then let's thank Eric for a fascinating talk",
    "start": "3073400",
    "end": "3080440"
  }
]