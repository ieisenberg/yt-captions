[
  {
    "text": "okay well um thank you for coming to my talk on refactoring a monolith to microservices",
    "start": "1979",
    "end": "9120"
  },
  {
    "text": "and hopefully one day I I will make it to London again so I can",
    "start": "9120",
    "end": "14420"
  },
  {
    "text": "actually present in person um smooth the mouse into this window all",
    "start": "14420",
    "end": "20880"
  },
  {
    "text": "right so you know what's really interesting is you know the world is this crazy place today",
    "start": "20880",
    "end": "27060"
  },
  {
    "text": "right you know almost specifically as someone once said it's volatile uncertain complex and ambiguous not only",
    "start": "27060",
    "end": "35700"
  },
  {
    "text": "do businesses need to deal with new competitors like there was lots of",
    "start": "35700",
    "end": "41100"
  },
  {
    "text": "examples of you know Banks having to deal with new online banks and and so on",
    "start": "41100",
    "end": "46500"
  },
  {
    "text": "but there's crazy stuff going on you know most notably covered right",
    "start": "46500",
    "end": "51539"
  },
  {
    "text": "um Wars um and so on and so the world is really this crazy place and in order to thrive",
    "start": "51539",
    "end": "58920"
  },
  {
    "text": "in today's business environment businesses need to be very Nimble agile",
    "start": "58920",
    "end": "64198"
  },
  {
    "text": "and innovated a much faster rate that you know what that means for us in I.T is because software is so Central to",
    "start": "64199",
    "end": "72600"
  },
  {
    "text": "Modern businesses you know if you're responsible for a business critical application you have to deliver software",
    "start": "72600",
    "end": "80100"
  },
  {
    "text": "rapidly frequently reliably and sustainably you know you're under the pressure to deliver you know new",
    "start": "80100",
    "end": "87119"
  },
  {
    "text": "features that are much faster pace and there's actually a really interesting way of quantifying that",
    "start": "87119",
    "end": "94020"
  },
  {
    "text": "these are the Dora or devops metrics you know and there's four of these metrics and you're you know the goal of every",
    "start": "94020",
    "end": "101479"
  },
  {
    "text": "organization really should be to be it should be to be a high performing organization that's measured by these",
    "start": "101479",
    "end": "108659"
  },
  {
    "text": "metrics so you should be deploying changes into production multiple times a day the lead time for changes the time",
    "start": "108659",
    "end": "115920"
  },
  {
    "text": "from commit to deploy should be really short so you're moving at a much faster",
    "start": "115920",
    "end": "121259"
  },
  {
    "text": "Pace but interestingly you're doing this you're delivering software in a much more reliable way so the change",
    "start": "121259",
    "end": "129179"
  },
  {
    "text": "failure percentage of deployments that cause a problem in production should be very low",
    "start": "129179",
    "end": "135180"
  },
  {
    "text": "and if there is a product production problem you should be able to restore changes very quickly so we should all be",
    "start": "135180",
    "end": "141420"
  },
  {
    "text": "striving to be a high performing organization according to these metrics but I think for a lot of organizations",
    "start": "141420",
    "end": "147840"
  },
  {
    "text": "the reality is quite different you know organizations struggle to get changes",
    "start": "147840",
    "end": "153540"
  },
  {
    "text": "into production it's a slow painful process and when it does occur there's",
    "start": "153540",
    "end": "159420"
  },
  {
    "text": "likely to be problems in production that take a long time to fix",
    "start": "159420",
    "end": "164760"
  },
  {
    "text": "um and then not only that let's say we would just assume here of course that your application is a monolith there's a",
    "start": "164760",
    "end": "171120"
  },
  {
    "text": "really good chance that it's technology stack is out of date as well so there's",
    "start": "171120",
    "end": "176280"
  },
  {
    "text": "this big gap from where you need to from where you need to be and from where you actually are and you might have heard",
    "start": "176280",
    "end": "182640"
  },
  {
    "text": "that well you know if you go to Twitter you probably have heard oh you should just use microservices because that will",
    "start": "182640",
    "end": "189360"
  },
  {
    "text": "make a before right you know they're like this little um pixie dust that you sprinkle on",
    "start": "189360",
    "end": "195360"
  },
  {
    "text": "things and make everything wonderful the reality of course is that it's a little bit more complicated than that",
    "start": "195360",
    "end": "203340"
  },
  {
    "text": "um and in this talk I'm going to use dark energy and dark matter with the con",
    "start": "203340",
    "end": "210000"
  },
  {
    "text": "which are these sort of mysterious concepts for astrophysics um that which turn out to be quite good",
    "start": "210000",
    "end": "217680"
  },
  {
    "text": "metaphors for the concerns that you need to think about when trying to decide",
    "start": "217680",
    "end": "223920"
  },
  {
    "text": "whether to refactor a monolith to microservices",
    "start": "223920",
    "end": "229200"
  },
  {
    "text": "um you know sort of over the year past couple of years just figured out that these are excellent metaphors for design",
    "start": "229200",
    "end": "236700"
  },
  {
    "text": "for defining a software architecture and it applies to the refactoring",
    "start": "236700",
    "end": "242159"
  },
  {
    "text": "scenario as well but before we get into that a little bit about me if you don't know you know I've",
    "start": "242159",
    "end": "248580"
  },
  {
    "text": "been building software for what feels like a gazillion years um originally I was building lisp",
    "start": "248580",
    "end": "254700"
  },
  {
    "text": "systems you know more recently I wrote the book pojos of an action seems like a",
    "start": "254700",
    "end": "260880"
  },
  {
    "text": "lifetime ago created the original cloud Foundry and for the past well 10 years now give",
    "start": "260880",
    "end": "268560"
  },
  {
    "text": "or take I've been pretty much focused on what has now become known as the microservice architecture so I help",
    "start": "268560",
    "end": "275639"
  },
  {
    "text": "organizations around the world use microservices more more effectively",
    "start": "275639",
    "end": "283020"
  },
  {
    "text": "um so here's the agenda I'm going to talk about so what kind of architecture you need in order to deliver software",
    "start": "283020",
    "end": "290160"
  },
  {
    "text": "rapidly frequently reliable and sustainably and then after that I'm going to explain how dark energy and",
    "start": "290160",
    "end": "297660"
  },
  {
    "text": "dark matter can be your guide when defining an architecture",
    "start": "297660",
    "end": "303240"
  },
  {
    "text": "and how they can help you decide which parts of your application your",
    "start": "303240",
    "end": "308340"
  },
  {
    "text": "monolithic application if any should would be better if they were migrated",
    "start": "308340",
    "end": "313919"
  },
  {
    "text": "into into microservices so let's get going",
    "start": "313919",
    "end": "319199"
  },
  {
    "text": "um so to deliver software rapidly frequently and reliably I like to use what's known as the success train",
    "start": "319199",
    "end": "326400"
  },
  {
    "text": "but what that means is to to do that you actually need three things you need a process s which is devops which Embraces",
    "start": "326400",
    "end": "334440"
  },
  {
    "text": "continuous delivery and continuous deployment as defined by the devops",
    "start": "334440",
    "end": "339900"
  },
  {
    "text": "handbook you also need an organizational structure that consists of a network of",
    "start": "339900",
    "end": "345600"
  },
  {
    "text": "small Loosely coupled product-centric teams long-lived product-centric teams as defined by the",
    "start": "345600",
    "end": "353580"
  },
  {
    "text": "the must read book team topologies and then of course you need the right architecture but in a way that sort of",
    "start": "353580",
    "end": "360900"
  },
  {
    "text": "kind of the purpose of Architecture is to enable you to do devops effectively",
    "start": "360900",
    "end": "366479"
  },
  {
    "text": "and to enable the network of small Loosely towards the tier to support the",
    "start": "366479",
    "end": "371880"
  },
  {
    "text": "network of loosely coupled teams and it's like what what kind of architecture do you need",
    "start": "371880",
    "end": "378720"
  },
  {
    "text": "well the authors of the of the book accelerate which is really a lot of the",
    "start": "378720",
    "end": "384300"
  },
  {
    "text": "you know the underpinnings of devops have found that you need an architecture that's testable Deployable and then",
    "start": "384300",
    "end": "392100"
  },
  {
    "text": "above all it needs to be Loosely coupled and then on top of that if you're going to build applications that last a long",
    "start": "392100",
    "end": "399060"
  },
  {
    "text": "time you need an evolvable architecture one that one that lets you incrementally",
    "start": "399060",
    "end": "404759"
  },
  {
    "text": "upgrade your technology stack um so and the key thing here is actually",
    "start": "404759",
    "end": "412440"
  },
  {
    "text": "loose coupling um and none of this is sort of specifically microservices for or",
    "start": "412440",
    "end": "419759"
  },
  {
    "text": "monolith um and so one conclusion you can draw from this is that you should really just make",
    "start": "419759",
    "end": "426960"
  },
  {
    "text": "the most of your monolith you shouldn't just automatically assume that you need microservices so in particular if you're",
    "start": "426960",
    "end": "434520"
  },
  {
    "text": "struggling with software delivery perhaps your architecture is okay it's",
    "start": "434520",
    "end": "439620"
  },
  {
    "text": "just that you need to improve your process adopt devops and automate your deployment pipeline or perhaps you need",
    "start": "439620",
    "end": "446880"
  },
  {
    "text": "to organize or restructure your organization to from say siled organized",
    "start": "446880",
    "end": "453960"
  },
  {
    "text": "from Silo teams where there's lots of handoffs into cross-functional teams that can take requirements and and push",
    "start": "453960",
    "end": "461940"
  },
  {
    "text": "them into production um and then maybe you need to improve your your your architecture as well but",
    "start": "461940",
    "end": "469800"
  },
  {
    "text": "perhaps you can stick with a monolith and you just need to modularize it which I'll talk a little bit about later and",
    "start": "469800",
    "end": "476580"
  },
  {
    "text": "and just perhaps modernize the technology stack and you should only really be thinking about microservices",
    "start": "476580",
    "end": "483000"
  },
  {
    "text": "if you've tried all of those other things and that you have found them to be insufficient so and this is likely",
    "start": "483000",
    "end": "490139"
  },
  {
    "text": "very likely to be a scenario where you have a large team that's developing a",
    "start": "490139",
    "end": "496139"
  },
  {
    "text": "large complex application so in other words you should just make the most of your monolith and not",
    "start": "496139",
    "end": "503400"
  },
  {
    "text": "automatically assume that you need the microservice architecture but one really",
    "start": "503400",
    "end": "508800"
  },
  {
    "text": "interesting thing is if you've actually dug yourself into a really deep hole where your monolithic architecture has a",
    "start": "508800",
    "end": "516539"
  },
  {
    "text": "lot of technical depth that is really slowing you down and there's features that you need to implement today",
    "start": "516539",
    "end": "524459"
  },
  {
    "text": "it might actually be best to implement those features as services so there's a",
    "start": "524459",
    "end": "530760"
  },
  {
    "text": "couple of different ways of looking at this where yes you should try perhaps in the long term to improve your your your",
    "start": "530760",
    "end": "536779"
  },
  {
    "text": "monolith but but at the same time it might be quicker to implement brand new",
    "start": "536779",
    "end": "542760"
  },
  {
    "text": "features as services um and part of what I'm going to talk about is kind of how dark energy and",
    "start": "542760",
    "end": "549060"
  },
  {
    "text": "dark matter can actually guide you in this decision-making process so if you are going to go down the path",
    "start": "549060",
    "end": "556380"
  },
  {
    "text": "of migrating your monolith to a microservice architecture the pattern",
    "start": "556380",
    "end": "561600"
  },
  {
    "text": "that of course you need to use is the Strangler fig pattern that's where you're incrementally migrating",
    "start": "561600",
    "end": "567740"
  },
  {
    "text": "functionality out of your monolith into the Strangler application which in this",
    "start": "567740",
    "end": "574980"
  },
  {
    "text": "section in this case is comprised of services so the time you monolith is",
    "start": "574980",
    "end": "580620"
  },
  {
    "text": "gradually shrinking and the number of services that you have running in production is increasing you really",
    "start": "580620",
    "end": "588240"
  },
  {
    "text": "really need to avoid you should you should avoid doing a big bang rewrite of",
    "start": "588240",
    "end": "593339"
  },
  {
    "text": "your application because that just delays when you can actually deliver",
    "start": "593339",
    "end": "598440"
  },
  {
    "text": "anything of value too far in the future and it's extremely risky and then on top",
    "start": "598440",
    "end": "604200"
  },
  {
    "text": "of that if you do have these new features you can Implement them directly as services",
    "start": "604200",
    "end": "610080"
  },
  {
    "text": "so there's some issues here right which is when should you consider migrating to",
    "start": "610080",
    "end": "615180"
  },
  {
    "text": "to the microservice architecture and which parts of your application existing",
    "start": "615180",
    "end": "620760"
  },
  {
    "text": "modules or new features should you actually Implement purposes",
    "start": "620760",
    "end": "626700"
  },
  {
    "text": "and that's where dark energy and dark matter come into play and then sort of originally I used these",
    "start": "626700",
    "end": "633240"
  },
  {
    "text": "forces to actually um Define a microservice architecture",
    "start": "633240",
    "end": "638580"
  },
  {
    "text": "but as you're going to see they can also help you guide it they can also guide you in this refactoring process",
    "start": "638580",
    "end": "645660"
  },
  {
    "text": "so let's have a look a little bit about how I like to define a microservice architecture so the starting point is",
    "start": "645660",
    "end": "651959"
  },
  {
    "text": "your requirements your functional requirements like your user stories also",
    "start": "651959",
    "end": "657079"
  },
  {
    "text": "non-functional requirements like um availability requirements latency",
    "start": "657079",
    "end": "662820"
  },
  {
    "text": "requirements for particular operation scalability and so on and maybe you've got some UI mock-ups you might have done",
    "start": "662820",
    "end": "669720"
  },
  {
    "text": "event storming so the first step of this process is to distill those requirements",
    "start": "669720",
    "end": "675600"
  },
  {
    "text": "down into a set of system operations which basically model the requests or",
    "start": "675600",
    "end": "681360"
  },
  {
    "text": "the behavior that the application must implement at a sort of an abstract level so rather",
    "start": "681360",
    "end": "687540"
  },
  {
    "text": "than just automatically diving into rest endpoints we model the behavior in terms",
    "start": "687540",
    "end": "692640"
  },
  {
    "text": "of these more abstract system operations which act upon entities",
    "start": "692640",
    "end": "699079"
  },
  {
    "text": "um business object and then step two is to essentially group those entities or",
    "start": "699480",
    "end": "706140"
  },
  {
    "text": "Aggregates into subdomains each one of which is a team-sized chunk of business",
    "start": "706140",
    "end": "711660"
  },
  {
    "text": "functionality um so actual code that implements a",
    "start": "711660",
    "end": "717839"
  },
  {
    "text": "business function that is owned by a team and you know I guess you could call them bounded context if you like to use",
    "start": "717839",
    "end": "724740"
  },
  {
    "text": "that word um and then so far this is just sort of",
    "start": "724740",
    "end": "730800"
  },
  {
    "text": "Fairly classic object oriented design but then the third step is where it gets interesting and this is where the core",
    "start": "730800",
    "end": "738420"
  },
  {
    "text": "part of Designing a microservice architecture which is where you're you're grouping these sub domains to",
    "start": "738420",
    "end": "745440"
  },
  {
    "text": "form services um and the one of the output one",
    "start": "745440",
    "end": "752220"
  },
  {
    "text": "potential output of this process is that you have a single service which is also known as a monolith but the more",
    "start": "752220",
    "end": "759180"
  },
  {
    "text": "interesting case of course is where you have two or more services which is where you have a micro service architecture so",
    "start": "759180",
    "end": "766260"
  },
  {
    "text": "you're grouping these subdomains to form services and then if you have operations",
    "start": "766260",
    "end": "771420"
  },
  {
    "text": "that are distributed across multiple Services because they access entities",
    "start": "771420",
    "end": "777480"
  },
  {
    "text": "that are in sub domains that are in different Services then you have to use the apply the various collaboration",
    "start": "777480",
    "end": "784500"
  },
  {
    "text": "patterns like Saga composition and see QRS to design those",
    "start": "784500",
    "end": "790440"
  },
  {
    "text": "system operations so that's that's the process that I like",
    "start": "790440",
    "end": "795720"
  },
  {
    "text": "to use for defining a microservice architecture and at its core sort of the",
    "start": "795720",
    "end": "801000"
  },
  {
    "text": "key decision that you you need to make is here's a pair of sub domains do they",
    "start": "801000",
    "end": "806579"
  },
  {
    "text": "belong together in the same service or should they be in separate services and",
    "start": "806579",
    "end": "812519"
  },
  {
    "text": "to help with this I like to use the metaphors of dark energy and dark matter",
    "start": "812519",
    "end": "817920"
  },
  {
    "text": "so dark energy which in astrophysics is this anti-gravity that's causing the",
    "start": "817920",
    "end": "823579"
  },
  {
    "text": "expansion of the universe to accelerate is a or for the repulsive forces that Ascend",
    "start": "823579",
    "end": "831720"
  },
  {
    "text": "that you can think of as driving sub-domains apart in other words encouraging you to deploy them or",
    "start": "831720",
    "end": "838800"
  },
  {
    "text": "package them in separate services and I'm going to talk about the specific forces in a minute there's five of them",
    "start": "838800",
    "end": "848220"
  },
  {
    "text": "um so this these dark energy forces that are encouraging you to have a",
    "start": "848220",
    "end": "853440"
  },
  {
    "text": "fine-grained microservice architecture yet at the same time there are these",
    "start": "853440",
    "end": "858899"
  },
  {
    "text": "dark matter forces where and and dark matter and astrophysics is this invisible matter",
    "start": "858899",
    "end": "865440"
  },
  {
    "text": "that has a gravitational effect on stars and galaxies and it's a metaphor for the",
    "start": "865440",
    "end": "871680"
  },
  {
    "text": "attractive forces that actually encourage you to put subdomains together",
    "start": "871680",
    "end": "878279"
  },
  {
    "text": "in other words use a more move you in the direction of a monolithic architecture and it turns out there's",
    "start": "878279",
    "end": "885240"
  },
  {
    "text": "five of those as well so we've got a bunch of reasons for putting subdomains inside different services and a bunch of",
    "start": "885240",
    "end": "891660"
  },
  {
    "text": "reasons for putting them together inside the same service um so they're very much in conflict with",
    "start": "891660",
    "end": "897720"
  },
  {
    "text": "one another and your job as an architect is to find the appropriate balance and",
    "start": "897720",
    "end": "903120"
  },
  {
    "text": "make make the appropriate sort of grouping of subdomains",
    "start": "903120",
    "end": "909899"
  },
  {
    "text": "um and then how this applies to the refactoring scenario is",
    "start": "909899",
    "end": "915720"
  },
  {
    "text": "the the dark energy forces are encouraging you to break up the monolith",
    "start": "915720",
    "end": "921480"
  },
  {
    "text": "so in this example they're encouraging you to take the delivery management",
    "start": "921480",
    "end": "926839"
  },
  {
    "text": "module out of the monolith and turn it into a service because that gives you a",
    "start": "926839",
    "end": "931980"
  },
  {
    "text": "set of benefits yet at the same time there's a set of dark matter or attractive forces that are good that are",
    "start": "931980",
    "end": "939300"
  },
  {
    "text": "encouraging you to stick with the monolith because they can actually make it expensive to actually do the work of",
    "start": "939300",
    "end": "947339"
  },
  {
    "text": "extraction in some cases or perhaps the resulting architecture of a monolith",
    "start": "947339",
    "end": "953339"
  },
  {
    "text": "Plus or service isn't actually feasible because of say too much runtime coupling",
    "start": "953339",
    "end": "958740"
  },
  {
    "text": "or inefficient inter-service communication so that's how these dark matter dark",
    "start": "958740",
    "end": "964199"
  },
  {
    "text": "energy forces can be used in in this refactoring scenario to figure out which",
    "start": "964199",
    "end": "970620"
  },
  {
    "text": "parts of your monolith should be services so let's have a look at dark energy",
    "start": "970620",
    "end": "977160"
  },
  {
    "text": "forces the the forces that are encouraging decomposition and so there's five of them simple components team",
    "start": "977160",
    "end": "984060"
  },
  {
    "text": "topology fast deployment pipeline supporting multiple technology stacks",
    "start": "984060",
    "end": "989579"
  },
  {
    "text": "and then there's sort of catch-all category which is saying segregate subdomains by characteristics and these",
    "start": "989579",
    "end": "995820"
  },
  {
    "text": "are all reasons to put subdomains in in different services in other words to use",
    "start": "995820",
    "end": "1000980"
  },
  {
    "text": "microservices so the first um dark energy force is the idea of",
    "start": "1000980",
    "end": "1007339"
  },
  {
    "text": "having simple components um so in other words you know simple",
    "start": "1007339",
    "end": "1013040"
  },
  {
    "text": "components or or simple services or simple more simple monolith in a sense",
    "start": "1013040",
    "end": "1018620"
  },
  {
    "text": "is easier to understand it's easier to develop and it's easier to test and",
    "start": "1018620",
    "end": "1023779"
  },
  {
    "text": "easier to deploy and so for that reason it sort of encourages you to break up",
    "start": "1023779",
    "end": "1030520"
  },
  {
    "text": "large services and or to not put sub-domains together and to put them",
    "start": "1030520",
    "end": "1037280"
  },
  {
    "text": "inside they're separate services so that the services are in fact simple",
    "start": "1037280",
    "end": "1043520"
  },
  {
    "text": "so sort of Simplicity is a key driver here because it's make you know the code",
    "start": "1043520",
    "end": "1049760"
  },
  {
    "text": "base fits in our head and there's less issues to deal with so what does that mean in the context of",
    "start": "1049760",
    "end": "1055580"
  },
  {
    "text": "a monolith um so what's really interesting is you can",
    "start": "1055580",
    "end": "1060799"
  },
  {
    "text": "have a monolith that is actually that can be relatively simple to understand",
    "start": "1060799",
    "end": "1065919"
  },
  {
    "text": "in particular one key strategy is to modularize the monolith so instead of",
    "start": "1065919",
    "end": "1071539"
  },
  {
    "text": "having the usual three-layer architecture you have these vertical slices that are domain oriented modules",
    "start": "1071539",
    "end": "1080660"
  },
  {
    "text": "and each module which implements a business function contains presentation",
    "start": "1080660",
    "end": "1085940"
  },
  {
    "text": "logic business logic persistence logic and so on and is owned by a team and so",
    "start": "1085940",
    "end": "1092299"
  },
  {
    "text": "this sort of modular architecture enables developers to focus on just their module and exclude everything else",
    "start": "1092299",
    "end": "1100520"
  },
  {
    "text": "um so it's a form of simplification sort of reduces cognitive load if you want to",
    "start": "1100520",
    "end": "1106460"
  },
  {
    "text": "sort of put it that way but the challenge you have with the monolith is that you know at some point your",
    "start": "1106460",
    "end": "1113900"
  },
  {
    "text": "monolith can actually become too complex even if you have modularized it and so",
    "start": "1113900",
    "end": "1119660"
  },
  {
    "text": "because of this that you know this is Sim sort of Simplicity is in fact a",
    "start": "1119660",
    "end": "1125299"
  },
  {
    "text": "driver to actually break up your service your monolith into into Services",
    "start": "1125299",
    "end": "1132580"
  },
  {
    "text": "specifically the parts of your your model that are actively being developed yeah you know if there's if parts of",
    "start": "1132580",
    "end": "1140299"
  },
  {
    "text": "your monolith are stable there's minimal value in extracting from a Simplicity",
    "start": "1140299",
    "end": "1145820"
  },
  {
    "text": "point of view there's minimal value in turning them into um services so that's that's Dark Energy",
    "start": "1145820",
    "end": "1153440"
  },
  {
    "text": "Force number one simplicity and then another the second dark energy",
    "start": "1153440",
    "end": "1158480"
  },
  {
    "text": "forces team autonomy you know high performance teams need to be able to",
    "start": "1158480",
    "end": "1164419"
  },
  {
    "text": "develop test um and deploy their code independently",
    "start": "1164419",
    "end": "1170360"
  },
  {
    "text": "of what other teams are doing and because of that this encourages you",
    "start": "1170360",
    "end": "1175640"
  },
  {
    "text": "to put sub-domains that belong to different teams inside in different",
    "start": "1175640",
    "end": "1180980"
  },
  {
    "text": "Services because that makes those teams truly autonomous you know what if you have multiple teams",
    "start": "1180980",
    "end": "1188240"
  },
  {
    "text": "contributing to the same code base there's opportunities for interference and coordination it is required and so",
    "start": "1188240",
    "end": "1195440"
  },
  {
    "text": "on so this is another compelling reason or in fact maybe the main reason for using",
    "start": "1195440",
    "end": "1201620"
  },
  {
    "text": "the microservice architecture is to enable these teams to be autonomous",
    "start": "1201620",
    "end": "1207440"
  },
  {
    "text": "um so from the perspective of a monolith um you can improve autonomy to some extent",
    "start": "1207440",
    "end": "1215000"
  },
  {
    "text": "through modularization but ultimately all everyone is working on the same code",
    "start": "1215000",
    "end": "1220580"
  },
  {
    "text": "base and so sort of autonomy is inversely proportional to the number of developers and so once again this is a",
    "start": "1220580",
    "end": "1228080"
  },
  {
    "text": "compelling reason to move code out of the monolith into services",
    "start": "1228080",
    "end": "1235539"
  },
  {
    "text": "um and then another reason is is force number three fast deployment pipeline",
    "start": "1236419",
    "end": "1242480"
  },
  {
    "text": "you know it's really important to get as far as a developer to get fast feedback",
    "start": "1242480",
    "end": "1247820"
  },
  {
    "text": "feedback from local testing from your deployment Pipeline and then also from",
    "start": "1247820",
    "end": "1253100"
  },
  {
    "text": "your production environment in fact you know some people actually claim that you should you know your lead time the time",
    "start": "1253100",
    "end": "1259640"
  },
  {
    "text": "from commit to deploy or beginning of deployment should be under 15 minutes",
    "start": "1259640",
    "end": "1265840"
  },
  {
    "text": "and to you know which is not long right and so this strongly encourages you to",
    "start": "1265840",
    "end": "1273740"
  },
  {
    "text": "put sub-domains in different services in order to accelerate your deployment",
    "start": "1273740",
    "end": "1278900"
  },
  {
    "text": "Pipeline and get faster feedback um",
    "start": "1278900",
    "end": "1284240"
  },
  {
    "text": "once again there are some things that you can do with your monolith you can accelerate your builds by parallelizing",
    "start": "1284240",
    "end": "1291380"
  },
  {
    "text": "them um or using clustered builds if you can spread them across multiple machines",
    "start": "1291380",
    "end": "1297919"
  },
  {
    "text": "depends precisely on what your build technology is um and then I've also mentioned that you",
    "start": "1297919",
    "end": "1305000"
  },
  {
    "text": "know Uncle Bob's dependency inversion principle and the interface segregation",
    "start": "1305000",
    "end": "1310159"
  },
  {
    "text": "principle and the idea there is by structuring your code base some modules",
    "start": "1310159",
    "end": "1317659"
  },
  {
    "text": "depend upon stable abstract interfaces",
    "start": "1317659",
    "end": "1322940"
  },
  {
    "text": "um you can reduce the amount of work that the build tool have it makes basically makes",
    "start": "1323059",
    "end": "1329360"
  },
  {
    "text": "testing or building and testing much more incremental so you don't have to",
    "start": "1329360",
    "end": "1335000"
  },
  {
    "text": "test parts of your code that have not actually changed directly or indirectly",
    "start": "1335000",
    "end": "1342320"
  },
  {
    "text": "um and then and then another technique that you can use if you've got multiple large numbers of developers committing",
    "start": "1342320",
    "end": "1348799"
  },
  {
    "text": "to the same um get repository which actually just makes doing a get push a challenge you",
    "start": "1348799",
    "end": "1356179"
  },
  {
    "text": "can use a merge cue mechanism that where you submit a PR which then automatically gets tested and merged into the code",
    "start": "1356179",
    "end": "1363200"
  },
  {
    "text": "base but so you can throw a bunch of Technology at your deployment pipeline",
    "start": "1363200",
    "end": "1368840"
  },
  {
    "text": "to me could go faster but you know if your application and team keeps growing then eventually your deployment pipeline",
    "start": "1368840",
    "end": "1375500"
  },
  {
    "text": "will become a bottleneck uh um",
    "start": "1375500",
    "end": "1380659"
  },
  {
    "text": "yeah and and which just slows you down and so for that reason it's actually can",
    "start": "1380659",
    "end": "1386240"
  },
  {
    "text": "be very beneficial to implement parts of to extract out parts of your monolith",
    "start": "1386240",
    "end": "1392120"
  },
  {
    "text": "into services so that they can have have an extremely fast deployment pipeline",
    "start": "1392120",
    "end": "1399700"
  },
  {
    "text": "um so another Force I think this is number four is the need to support multiple technology stacks and there's",
    "start": "1399980",
    "end": "1407840"
  },
  {
    "text": "really two aspects to this different parts of your system should perhaps use different Technologies and then at the",
    "start": "1407840",
    "end": "1414860"
  },
  {
    "text": "set then the other aspect to it is you need to periodically upgrade your",
    "start": "1414860",
    "end": "1420380"
  },
  {
    "text": "technology stack you know for example spring spring Booth 3.0 came out very",
    "start": "1420380",
    "end": "1426500"
  },
  {
    "text": "recently and it's probably a good idea to upgrade to it which means upgrading to the to a to Java 17 up which requires",
    "start": "1426500",
    "end": "1435080"
  },
  {
    "text": "you to upgrade to a version of Gradle that supports John 17. so there's all",
    "start": "1435080",
    "end": "1441020"
  },
  {
    "text": "this work that you have to do and if you have a monolith a large monolithic code base that can be a massive upgrade task",
    "start": "1441020",
    "end": "1449059"
  },
  {
    "text": "versus having um your code base can grow your your application comprised of services which",
    "start": "1449059",
    "end": "1456620"
  },
  {
    "text": "you can upgrade incrementally so it becomes a series of smaller easier to",
    "start": "1456620",
    "end": "1462080"
  },
  {
    "text": "schedule of great tasks um and this is one of the weaknesses of",
    "start": "1462080",
    "end": "1467900"
  },
  {
    "text": "the monolith right is you've just basically got a single code base using a",
    "start": "1467900",
    "end": "1473299"
  },
  {
    "text": "single class path unless you use some sort of exotic technology which means",
    "start": "1473299",
    "end": "1478400"
  },
  {
    "text": "that you have to do these big bang rewrites and limited you don't really have much opportunity to use non-jvm",
    "start": "1478400",
    "end": "1485360"
  },
  {
    "text": "Technologies so this is a compelling reason to actually migrate your",
    "start": "1485360",
    "end": "1490640"
  },
  {
    "text": "monolithic code base to a microservice architecture in order to sort of deal",
    "start": "1490640",
    "end": "1496640"
  },
  {
    "text": "with the technology stack side of things and then the final Dark Energy Force are",
    "start": "1496640",
    "end": "1503539"
  },
  {
    "text": "these um is the segregate subdomains by characteristics and it and sub the the",
    "start": "1503539",
    "end": "1509659"
  },
  {
    "text": "five or six different characters five different characteristics that are",
    "start": "1509659",
    "end": "1514760"
  },
  {
    "text": "relevant here like resource requirements that impact scalability regularly",
    "start": "1514760",
    "end": "1520360"
  },
  {
    "text": "requirements that can dictate exactly how you develop software in some cases",
    "start": "1520360",
    "end": "1527000"
  },
  {
    "text": "business criticality um security requirements and then sort of you could say the domain the DDD core",
    "start": "1527000",
    "end": "1534320"
  },
  {
    "text": "supporting generic thing is is can be relevant as well",
    "start": "1534320",
    "end": "1539419"
  },
  {
    "text": "um so like one great example of this is if you have sub domains with very specific resource requirements like gpus",
    "start": "1539419",
    "end": "1547640"
  },
  {
    "text": "then there's often value in having them deploy the separate services so that you",
    "start": "1547640",
    "end": "1554120"
  },
  {
    "text": "can scale them in a much more cost-effective way um you know for example gpus unlike ec2",
    "start": "1554120",
    "end": "1561860"
  },
  {
    "text": "are incredibly expensive and you don't want to waste them so you know that",
    "start": "1561860",
    "end": "1567679"
  },
  {
    "text": "there's value in being able to scale each part of your system in an optimal",
    "start": "1567679",
    "end": "1574580"
  },
  {
    "text": "most cost effective way and then also um segregating code by business",
    "start": "1574580",
    "end": "1580520"
  },
  {
    "text": "criticality can be really important for improving availability so if you've got like you make your",
    "start": "1580520",
    "end": "1587419"
  },
  {
    "text": "money by handling credit cards sort of or charging um through a credit card charging API",
    "start": "1587419",
    "end": "1595400"
  },
  {
    "text": "there's there's real value in physically separating that that those rest",
    "start": "1595400",
    "end": "1601940"
  },
  {
    "text": "endpoints from the rest of your application you know it can run on its own infrastructure it should have its",
    "start": "1601940",
    "end": "1608600"
  },
  {
    "text": "own code base so there's no opportunity for sort of interference you know a",
    "start": "1608600",
    "end": "1614120"
  },
  {
    "text": "commit to Merchant management Which is less critical you know you don't want",
    "start": "1614120",
    "end": "1619159"
  },
  {
    "text": "that in accidentally breaking Payment Processing um so some of this you can you can sort",
    "start": "1619159",
    "end": "1627919"
  },
  {
    "text": "of deal with in a monolithic architecture so you could have separate deployments handling certain rest",
    "start": "1627919",
    "end": "1634400"
  },
  {
    "text": "endpoints even if even though it's the same code base and that can help address some scalability availability concerns",
    "start": "1634400",
    "end": "1642679"
  },
  {
    "text": "but ultimately you are you know you have a single code base and so you are",
    "start": "1642679",
    "end": "1648080"
  },
  {
    "text": "constrained and there's a lot more rest so once again this can be another compelling reason to",
    "start": "1648080",
    "end": "1654380"
  },
  {
    "text": "um uh carve out parts of your monolith and migrate them into services to",
    "start": "1654380",
    "end": "1660500"
  },
  {
    "text": "improve availability scalability and to properly isolate them from the rest of",
    "start": "1660500",
    "end": "1665840"
  },
  {
    "text": "the application so so those are the criteria",
    "start": "1665840",
    "end": "1671299"
  },
  {
    "text": "um so there's sort of five main forces and then the fifth force is comprised of",
    "start": "1671299",
    "end": "1676640"
  },
  {
    "text": "you know looks at several different characteristics and sort of the key takeaway from this is that some parts of",
    "start": "1676640",
    "end": "1683360"
  },
  {
    "text": "your monolith will benefit more from microservices than others and so you",
    "start": "1683360",
    "end": "1688700"
  },
  {
    "text": "just want to analyze parts of your system through the through the lens of dark energy to identify candidate",
    "start": "1688700",
    "end": "1696380"
  },
  {
    "text": "services and one great example um a colleague told me about recently",
    "start": "1696380",
    "end": "1702260"
  },
  {
    "text": "was um you know a key part of the of his team's application involves sort of",
    "start": "1702260",
    "end": "1710179"
  },
  {
    "text": "let's just say kind of machine learning base for detection service that was developed by data scientists",
    "start": "1710179",
    "end": "1718220"
  },
  {
    "text": "you know and they're not hardcore developers to use a popular term these days right their focus is on complex",
    "start": "1718220",
    "end": "1725419"
  },
  {
    "text": "rocket science algorithms um and he found that there was tremendous value in carving that part of",
    "start": "1725419",
    "end": "1733580"
  },
  {
    "text": "his otherwise monolithic application out into a service because it enabled his",
    "start": "1733580",
    "end": "1739340"
  },
  {
    "text": "data science team to have a much simpler development experience it enabled them",
    "start": "1739340",
    "end": "1745039"
  },
  {
    "text": "to use the technology that they were familiar with namely Python and then they also had a much faster deployment",
    "start": "1745039",
    "end": "1751820"
  },
  {
    "text": "pipeline where they could fine-tune their algorithms without in and and",
    "start": "1751820",
    "end": "1757299"
  },
  {
    "text": "deploying new versions independently of what the rest of the monolith was doing",
    "start": "1757299",
    "end": "1762620"
  },
  {
    "text": "right and it's sort of like a great example of well we're just going to extract out one service out of our",
    "start": "1762620",
    "end": "1769399"
  },
  {
    "text": "monolith and get tremendous business value out of it so sort of illustrates",
    "start": "1769399",
    "end": "1775159"
  },
  {
    "text": "that you don't have to migrate entirely you know your entire monolith to service",
    "start": "1775159",
    "end": "1781220"
  },
  {
    "text": "it okay so that's dark energy which is a",
    "start": "1781220",
    "end": "1786260"
  },
  {
    "text": "bunch of you know which in other words which is a bunch of reasons to migrate in some parts of your application to",
    "start": "1786260",
    "end": "1792620"
  },
  {
    "text": "Services yet at the same time there are these dark matter forces which actually resist decomposition and encourage you",
    "start": "1792620",
    "end": "1801080"
  },
  {
    "text": "to stick with the monolith and in particular they are generated by System",
    "start": "1801080",
    "end": "1806299"
  },
  {
    "text": "operations that span multiple subdomains so if you have an operation that spans",
    "start": "1806299",
    "end": "1812299"
  },
  {
    "text": "subdomains A and B there are several reasons why a and b should be in the",
    "start": "1812299",
    "end": "1818360"
  },
  {
    "text": "same service um and the first one of those reasons is simple interactions",
    "start": "1818360",
    "end": "1824779"
  },
  {
    "text": "all right it's operations that are local to a single service are much easier to",
    "start": "1824779",
    "end": "1831919"
  },
  {
    "text": "understand they're easier to troubleshoot they're actually easier to implement as well",
    "start": "1831919",
    "end": "1837620"
  },
  {
    "text": "and so if you have subdomains you have an operation that spans those subdomains",
    "start": "1837620",
    "end": "1843740"
  },
  {
    "text": "put them together inside the same service though obviously if you took that to the extreme you would actually",
    "start": "1843740",
    "end": "1850039"
  },
  {
    "text": "have you would actually have a monolith so you actually you do need to achieve",
    "start": "1850039",
    "end": "1855320"
  },
  {
    "text": "balance so what that means quite simply is if you start breaking up your monolith you might you might you you",
    "start": "1855320",
    "end": "1862399"
  },
  {
    "text": "might you end up turning some operations into distributed operations which are",
    "start": "1862399",
    "end": "1868640"
  },
  {
    "text": "much more complex um another thing is operations need to",
    "start": "1868640",
    "end": "1875059"
  },
  {
    "text": "be efficient um and once again an operation that is local to a service right is sort of in a",
    "start": "1875059",
    "end": "1882980"
  },
  {
    "text": "sense it's running in memory as opposed to the mineral are the only Network traffic is basically two from the",
    "start": "1882980",
    "end": "1889279"
  },
  {
    "text": "database whereas if it's distributed across Services then the parts of the",
    "start": "1889279",
    "end": "1895340"
  },
  {
    "text": "application are communicating over the network and that has the potential to be",
    "start": "1895340",
    "end": "1901880"
  },
  {
    "text": "to have high latency and also be inefficient",
    "start": "1901880",
    "end": "1908000"
  },
  {
    "text": "um so once again it's another reason to put an operation subdomains inside the",
    "start": "1908000",
    "end": "1913100"
  },
  {
    "text": "same service um and how that what you know in the context of refactoring to to services",
    "start": "1913100",
    "end": "1920779"
  },
  {
    "text": "that means that it might not be practical to extract a module out of",
    "start": "1920779",
    "end": "1926840"
  },
  {
    "text": "your monolith and turn it into a service because it simply will not be efficient",
    "start": "1926840",
    "end": "1932120"
  },
  {
    "text": "you know too many network round trips too much data transferred over the network",
    "start": "1932120",
    "end": "1938899"
  },
  {
    "text": "so that that's sort of a reason to not extract a given module something to",
    "start": "1938899",
    "end": "1945140"
  },
  {
    "text": "always keep in mind and this is you know these kinds of issues help determine your service boundaries",
    "start": "1945140",
    "end": "1951140"
  },
  {
    "text": "another big one is the operations it's easier to implement an operation as a",
    "start": "1951140",
    "end": "1958460"
  },
  {
    "text": "single acid transaction yeah begin commit or begin the transaction make a",
    "start": "1958460",
    "end": "1965179"
  },
  {
    "text": "bunch of changes to the database commit the transaction super simple and very",
    "start": "1965179",
    "end": "1970220"
  },
  {
    "text": "familiar but if you have an operation that spans multiple Services you end up having to use a much more",
    "start": "1970220",
    "end": "1977600"
  },
  {
    "text": "complex eventually consistent mechanism um because transactions are asset",
    "start": "1977600",
    "end": "1983779"
  },
  {
    "text": "transactions need to be local to a single service um doable you just use the Saga pattern",
    "start": "1983779",
    "end": "1991340"
  },
  {
    "text": "and then usually it's not too bad um but interestingly in the case of",
    "start": "1991340",
    "end": "1996440"
  },
  {
    "text": "refactoring the monolith you might find that if you try to extract out a service",
    "start": "1996440",
    "end": "2002880"
  },
  {
    "text": "then some of those operations that are impacted might need to use what are",
    "start": "2002880",
    "end": "2008740"
  },
  {
    "text": "known as comp compensating transactions in the monolith which it is not designed",
    "start": "2008740",
    "end": "2014679"
  },
  {
    "text": "to implement um and that could be a really expensive change that could all actually prevent",
    "start": "2014679",
    "end": "2021640"
  },
  {
    "text": "you from extracting out that service um so that's another key key factor you",
    "start": "2021640",
    "end": "2027940"
  },
  {
    "text": "need to take in mind um another one is runtime coupling",
    "start": "2027940",
    "end": "2033940"
  },
  {
    "text": "um you know you know a runtime coupling occurs when one service cannot respond",
    "start": "2033940",
    "end": "2039580"
  },
  {
    "text": "to a request without some other service responding to it so in other words both",
    "start": "2039580",
    "end": "2045100"
  },
  {
    "text": "Services need to be available um and which reduces the availability of",
    "start": "2045100",
    "end": "2051520"
  },
  {
    "text": "that operation and so for that reason it's it's the you know it's beneficial",
    "start": "2051520",
    "end": "2056858"
  },
  {
    "text": "to make an operation local to eliminate any runtime coupling",
    "start": "2056859",
    "end": "2062378"
  },
  {
    "text": "um obviously it's not not totally black and white but this is another thing you have to think about when doing design",
    "start": "2062379",
    "end": "2068398"
  },
  {
    "text": "and that from a from the perspective of extracting Services you might end up",
    "start": "2068399",
    "end": "2074618"
  },
  {
    "text": "with an architecture that has excessive runtime coupling and therefore it it's",
    "start": "2074619",
    "end": "2080378"
  },
  {
    "text": "not practical to extract out a given module into a service",
    "start": "2080379",
    "end": "2086878"
  },
  {
    "text": "and then the last one is the Dark Matter force is the um desire to minimize",
    "start": "2087099",
    "end": "2094240"
  },
  {
    "text": "design time coupling so you know the degree of design time coupling between",
    "start": "2094240",
    "end": "2099940"
  },
  {
    "text": "well two software Elements which includes Services is the likelihood of a change to one set",
    "start": "2099940",
    "end": "2108339"
  },
  {
    "text": "one of those elements requiring a change to another one and in the case of",
    "start": "2108339",
    "end": "2113800"
  },
  {
    "text": "services what that actually means is you know if I change say the customer service that requires a change to the",
    "start": "2113800",
    "end": "2121660"
  },
  {
    "text": "customer service API which then requires the order service to change we have a we",
    "start": "2121660",
    "end": "2128140"
  },
  {
    "text": "have tight design time coupling if that is a frequent occurrence uh some kind of degree of coupling is",
    "start": "2128140",
    "end": "2136300"
  },
  {
    "text": "inevitable whenever whenever one service depends upon another but you should make",
    "start": "2136300",
    "end": "2141640"
  },
  {
    "text": "sure through use of stable apis that um and well-designed apis that that",
    "start": "2141640",
    "end": "2147640"
  },
  {
    "text": "coupling is minimized from the perspective of refactoring a",
    "start": "2147640",
    "end": "2152980"
  },
  {
    "text": "monolith there's a couple of interesting things is you you have to any service you extract out must have loose design",
    "start": "2152980",
    "end": "2160540"
  },
  {
    "text": "time coupling with the monolith right but then the other really interesting aspect to this as well because the",
    "start": "2160540",
    "end": "2167619"
  },
  {
    "text": "monolith you've written the monolith you have domain expertise right and you can",
    "start": "2167619",
    "end": "2174040"
  },
  {
    "text": "apply that that expertise in and Design Services with stable apis so it's sort",
    "start": "2174040",
    "end": "2181359"
  },
  {
    "text": "of this double-edged sword where because you've you've built this system before as a monolith you have you have",
    "start": "2181359",
    "end": "2188380"
  },
  {
    "text": "domain knowledge and you can apply that to create some well-designed Services",
    "start": "2188380",
    "end": "2194099"
  },
  {
    "text": "unlike in a system where um you know you're building it for the",
    "start": "2194099",
    "end": "2199180"
  },
  {
    "text": "first time you don't really know what your domain boundaries are so in summary right you've got these",
    "start": "2199180",
    "end": "2205660"
  },
  {
    "text": "dark-handed or dark matter forces um that might make your",
    "start": "2205660",
    "end": "2211780"
  },
  {
    "text": "that might actually prevent you from extracting a module out of a",
    "start": "2211780",
    "end": "2218980"
  },
  {
    "text": "um monolith and turning it into a service or might prevent you from implementing a new feature directly as a",
    "start": "2218980",
    "end": "2226599"
  },
  {
    "text": "service because of say runtime coupling or inefficient communication",
    "start": "2226599",
    "end": "2232660"
  },
  {
    "text": "um and then in some cases you might find that the transaction management aspects",
    "start": "2232660",
    "end": "2238240"
  },
  {
    "text": "of it might require your monolith to implement compensating transactions",
    "start": "2238240",
    "end": "2243460"
  },
  {
    "text": "which is not what it's designed to do and that would prevent you from extracting that module out as well",
    "start": "2243460",
    "end": "2252280"
  },
  {
    "text": "um so those are the Dark Matter forces that you actually need to consider",
    "start": "2252280",
    "end": "2258240"
  },
  {
    "text": "um so that's my talk remarkably um so kind of one key point right is the",
    "start": "2258640",
    "end": "2265420"
  },
  {
    "text": "rapid frequent and reliable and sustainable software delivery requires the right process the right organization",
    "start": "2265420",
    "end": "2272440"
  },
  {
    "text": "and the right architecture you shouldn't automatically assume that you you need microservices you want to",
    "start": "2272440",
    "end": "2279520"
  },
  {
    "text": "make the most of your monolith perhaps by modularizing it and also importantly by adopting the proper",
    "start": "2279520",
    "end": "2286800"
  },
  {
    "text": "devops continuous delivery continuous deployment based process and having the",
    "start": "2286800",
    "end": "2292720"
  },
  {
    "text": "right team structure um but you know an application that's",
    "start": "2292720",
    "end": "2298300"
  },
  {
    "text": "continually growing with an organization that is continually growing is will most",
    "start": "2298300",
    "end": "2305079"
  },
  {
    "text": "likely outgrow its monolithic architecture and so that's when you want to incrementally refactor your monolith",
    "start": "2305079",
    "end": "2312820"
  },
  {
    "text": "to microservices and you'd use the dark energy forces to help identify candidate",
    "start": "2312820",
    "end": "2319240"
  },
  {
    "text": "services and then also take into account the Dark Matter forces which might make",
    "start": "2319240",
    "end": "2325599"
  },
  {
    "text": "make it impossible to extract out a given a service or make it rather",
    "start": "2325599",
    "end": "2331720"
  },
  {
    "text": "expensive so that's my talk um thank you for listening and I hope",
    "start": "2331720",
    "end": "2337599"
  },
  {
    "text": "that you found it useful foreign",
    "start": "2337599",
    "end": "2342940"
  }
]