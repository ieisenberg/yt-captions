[
  {
    "start": "0",
    "end": "258000"
  },
  {
    "text": "[Music]",
    "start": "3520",
    "end": "7840"
  },
  {
    "text": "good morning I will start in the way that I have started I think every conference a newsgroup talk I have given",
    "start": "12950",
    "end": "19619"
  },
  {
    "text": "for the last couple of years which is to say that this room is not diverse enough so you're not alone in this but",
    "start": "19619",
    "end": "26960"
  },
  {
    "text": "apparently I need to go to China if you give a talk at Alibaba and hopefully 50%",
    "start": "26960",
    "end": "33149"
  },
  {
    "text": "of the attendees would be women I was giving a talk at a user group in London recently where the diversity was 50/50",
    "start": "33149",
    "end": "39450"
  },
  {
    "text": "but that was 50% of the room had beards and the other 50 didn't we can do better",
    "start": "39450",
    "end": "46710"
  },
  {
    "text": "and we must do better I will end my rent at that point so see shop 8 I have been",
    "start": "46710",
    "end": "53910"
  },
  {
    "text": "giving see shop 8 talks for it feels like now a very very long time and the whole of c-sharp 8 is far far",
    "start": "53910",
    "end": "61559"
  },
  {
    "text": "too big to give in one talk or in 150 minutes lot so I've broken this up so",
    "start": "61559",
    "end": "68580"
  },
  {
    "text": "today we're just talking about nullable reference sites now for most of the time that I've been talking about c-sharp 8",
    "start": "68580",
    "end": "74250"
  },
  {
    "text": "it hasn't been out but it now is if you've got Visual Studio 2019 and you've kept it up to date then you have",
    "start": "74250",
    "end": "81600"
  },
  {
    "text": "nullable reference types out of interest how many people have already played around with them a bit okay I'm sort of",
    "start": "81600",
    "end": "88229"
  },
  {
    "text": "glad that it isn't all of you because otherwise you might not need this talk at all and yeah if any of you suddenly",
    "start": "88229",
    "end": "93900"
  },
  {
    "text": "decide actually I know all of this then feel free to to leave that's fine if you have questions unlike most of the talks",
    "start": "93900",
    "end": "102180"
  },
  {
    "text": "here I'm not going to wait to take questions at the end please just ask them in the app I can see we've already",
    "start": "102180",
    "end": "108899"
  },
  {
    "text": "got a couple about Stack Overflow on there if you could keep it to c-sharp eights and Noble reference types that",
    "start": "108899",
    "end": "114390"
  },
  {
    "text": "would be great but yeah please do ask and if if I haven't noticed that you've",
    "start": "114390",
    "end": "120450"
  },
  {
    "text": "asked because I need to look over there just shout look at the questions and I will do so because there's nothing worse",
    "start": "120450",
    "end": "125939"
  },
  {
    "text": "than waiting 10 minutes until the code that is relevant to your question is off the screen before I actually notice so",
    "start": "125939",
    "end": "134310"
  },
  {
    "text": "nullable reference types in c-sharp 8 you may think that the title of the talk",
    "start": "134310",
    "end": "141040"
  },
  {
    "text": "is odd big cars C sharp has had nullable reference types since day 1 all",
    "start": "141040",
    "end": "146770"
  },
  {
    "text": "reference types are nullable and c-sharp 8 sort of half changes that but brings",
    "start": "146770",
    "end": "153640"
  },
  {
    "text": "them back again it will become slightly clearer why the feature is called nullable reference types rather than non",
    "start": "153640",
    "end": "160150"
  },
  {
    "text": "nullable reference types as we go along but I do want to give a little bit of background as to the purpose and I'll",
    "start": "160150",
    "end": "168160"
  },
  {
    "text": "draw a an analogy with generics so back",
    "start": "168160",
    "end": "173590"
  },
  {
    "text": "in c-sharp 1 if you wanted a collection of things you might use ArrayList and",
    "start": "173590",
    "end": "178810"
  },
  {
    "text": "you couldn't say what it was an ArrayList of and your code worked fine but once you started trying to access",
    "start": "178810",
    "end": "186670"
  },
  {
    "text": "the values in the list then you would have to cast them so if you documented",
    "start": "186670",
    "end": "192190"
  },
  {
    "text": "right this is an ArrayList of strings and then everyone would have to cast and there be no protection against someone",
    "start": "192190",
    "end": "198040"
  },
  {
    "text": "adding something else and the interesting thing is during that period before generics I very rarely got an",
    "start": "198040",
    "end": "205630"
  },
  {
    "text": "invalid cast exception because I was trying to do the wrong thing with elements of the list or someone had added the wrong thing so adding generics",
    "start": "205630",
    "end": "213730"
  },
  {
    "text": "did not improve the actual bug freeness",
    "start": "213730",
    "end": "218980"
  },
  {
    "text": "of my code but it did allow my code to be much much more expressive so I could",
    "start": "218980",
    "end": "224260"
  },
  {
    "text": "be more confident than there weren't bugs nullable reference types are very",
    "start": "224260",
    "end": "229269"
  },
  {
    "text": "similar there are significant differences as well but if you hear people talking about nullable reference",
    "start": "229269",
    "end": "235870"
  },
  {
    "text": "type says great this means we'll have no more null reference exceptions that's kind of true but not the point in",
    "start": "235870",
    "end": "242620"
  },
  {
    "text": "particular if you don't get null reference exceptions now you shouldn't think that means I don't need nullable",
    "start": "242620",
    "end": "248680"
  },
  {
    "text": "reference types ok it's primarily about allowing your code to express more in",
    "start": "248680",
    "end": "255430"
  },
  {
    "text": "the type system it's probably best if we dive into some code at this point and I",
    "start": "255430",
    "end": "263500"
  },
  {
    "start": "258000",
    "end": "408000"
  },
  {
    "text": "once I've given the most basic of demos I will give a few takeaways that I'll probably",
    "start": "263500",
    "end": "269720"
  },
  {
    "text": "repeat several times so that if you leave with nothing else you'll get those few so let's start off with a simple",
    "start": "269720",
    "end": "276380"
  },
  {
    "text": "person type and this is just it's immutable it's not sealed I could seal",
    "start": "276380",
    "end": "281599"
  },
  {
    "text": "it it takes first name last name of a middle name in a constructor and copies",
    "start": "281599",
    "end": "287750"
  },
  {
    "text": "them this is using c-sharp seven tupple",
    "start": "287750",
    "end": "293210"
  },
  {
    "text": "literal on the right-hand side and deconstruction to the properties on the left-hand side really handy if you're if",
    "start": "293210",
    "end": "300620"
  },
  {
    "text": "you're not familiar with that syntax become familiar another way as I sort of",
    "start": "300620",
    "end": "306500"
  },
  {
    "text": "highlighted earlier on all of this code is available on github look under the C sharp 8 bit of it so we have a person",
    "start": "306500",
    "end": "314960"
  },
  {
    "text": "constructor that accepts the first last and middle name and just copies them into properties I should note if you're ever trying to",
    "start": "314960",
    "end": "320840"
  },
  {
    "text": "model names don't do this because it's very if I say culturally insensitive that sounds a bit kind of snow flaky",
    "start": "320840",
    "end": "327470"
  },
  {
    "text": "it really doesn't model the way that people have names in the world but it's",
    "start": "327470",
    "end": "334280"
  },
  {
    "text": "really useful for the demo so we're going to construct two person objects myself with a middle name of Leslie ma",
    "start": "334280",
    "end": "341860"
  },
  {
    "text": "Miguel de Icaza who does not have a middle name so we're passing in null",
    "start": "341860",
    "end": "347110"
  },
  {
    "text": "okay these lines of code both work this is currently think c-sharp seven which this",
    "start": "347110",
    "end": "354349"
  },
  {
    "text": "effectively is in terms of nullable reference types because although I have enabled nullable reference types in the",
    "start": "354349",
    "end": "360919"
  },
  {
    "text": "project file as we can see here this nullable enable I've disabled it again",
    "start": "360919",
    "end": "367789"
  },
  {
    "text": "at the top so this is not using the level reference types yet so so far so",
    "start": "367789",
    "end": "374990"
  },
  {
    "text": "good we construct the person we've got a null middle name for Miguel and then we call this print name length method and",
    "start": "374990",
    "end": "382150"
  },
  {
    "text": "there's nothing special about this I'm not using interpolated string literals",
    "start": "382150",
    "end": "387469"
  },
  {
    "text": "not because they won't work it's just it makes it easier to highlight bits of things and change just just some aspects",
    "start": "387469",
    "end": "394789"
  },
  {
    "text": "of it likewise I could just do person dot first name dot length person dot last name dot length but again",
    "start": "394789",
    "end": "401270"
  },
  {
    "text": "all the purposes of teaching for the moment I've separated it out so there's no reason other than the teaching aspect",
    "start": "401270",
    "end": "408130"
  },
  {
    "start": "408000",
    "end": "580000"
  },
  {
    "text": "so what's going to happen when I run this the it will print first equals John",
    "start": "408130",
    "end": "413330"
  },
  {
    "text": "last equals skeet middle equals Lesley and then it will try to do this film a gal de Caza and it will go bang because",
    "start": "413330",
    "end": "420890"
  },
  {
    "text": "of middle dot length and let's just prove that and sort of show how we're going to run this and there's a little",
    "start": "420890",
    "end": "427520"
  },
  {
    "text": "app chooser that I've got hopefully white-on-black is still okay so if we run basic demo we get a null reference",
    "start": "427520",
    "end": "434240"
  },
  {
    "text": "exception just looking at the questions I won't talk about default",
    "start": "434240",
    "end": "442580"
  },
  {
    "text": "implementation for interfaces in c-sharp eight in terms of c-sharp community and failed to use good design to solve the",
    "start": "442580",
    "end": "449810"
  },
  {
    "text": "null problem you can't because before c-sharp eight you couldn't express that",
    "start": "449810",
    "end": "455990"
  },
  {
    "text": "something couldn't be no even if you designed code so that nothing ever was now that wasn't available in the type",
    "start": "455990",
    "end": "462950"
  },
  {
    "text": "system so that's a a good relevant question because it's showing that the communicate community can't do anything",
    "start": "462950",
    "end": "469280"
  },
  {
    "text": "about a reference can be null if you create an array that will be full of null references and we needed more power",
    "start": "469280",
    "end": "478280"
  },
  {
    "text": "in the type system itself right so we've",
    "start": "478280",
    "end": "484220"
  },
  {
    "text": "got broken code right now it throws a null reference exception we're going to",
    "start": "484220",
    "end": "490070"
  },
  {
    "text": "turn on nullable reference types and suddenly we will get a warning it does",
    "start": "490070",
    "end": "499250"
  },
  {
    "text": "actually come up as a warning cannot convert null literal to nan na level reference type now that's a fairly wordy",
    "start": "499250",
    "end": "507830"
  },
  {
    "text": "way of saying you're using Dahlan you shouldn't be and it's it's because by",
    "start": "507830",
    "end": "514460"
  },
  {
    "text": "just disabling that removing that has none of all disabled has changed the",
    "start": "514460",
    "end": "520250"
  },
  {
    "text": "meaning of all of this code and that should be slightly alarming to you",
    "start": "520250",
    "end": "526060"
  },
  {
    "text": "previous versions of c-sharp have always tried to be very backward compatible you know where everything works the same way",
    "start": "526060",
    "end": "532280"
  },
  {
    "text": "as it did before it's all fine and here we're saying if you turn this feature on the meaning of all",
    "start": "532280",
    "end": "537529"
  },
  {
    "text": "of your code changes that is alarming but it's a good thing really I hope that",
    "start": "537529",
    "end": "543649"
  },
  {
    "text": "part of the point of this talk is to persuade you that it is a good thing you may not feel it's a good thing when you",
    "start": "543649",
    "end": "549200"
  },
  {
    "text": "turn it on because not only will the meaning of your code change but the compiler will shout at you a lot with",
    "start": "549200",
    "end": "554899"
  },
  {
    "text": "many many many warnings this is entirely to be expected I really got one here because I've designed this demo around",
    "start": "554899",
    "end": "561500"
  },
  {
    "text": "all of this when you turn it on in your code how many errors how many warnings you get will probably",
    "start": "561500",
    "end": "569180"
  },
  {
    "text": "depend on what you've got the limit or number of reported warnings and the size",
    "start": "569180",
    "end": "575420"
  },
  {
    "text": "of your code base we'll talk more about migration later on ok so we've got a",
    "start": "575420",
    "end": "581480"
  },
  {
    "text": "problem and one really important takeaway is the compiler is not saying ok here's how to",
    "start": "581480",
    "end": "590540"
  },
  {
    "text": "solve this you can't tell the tell Rozlyn please fix all of my code so it's",
    "start": "590540",
    "end": "595730"
  },
  {
    "text": "null safe again and get rid of all of those warnings and it could do that but",
    "start": "595730",
    "end": "600800"
  },
  {
    "text": "it would have to make choices for you and it could make choices to make everything nullable and it would be",
    "start": "600800",
    "end": "605899"
  },
  {
    "text": "equivalent to your C sharp 7 code and you'd hate it because it wouldn't be giving you anything there are options",
    "start": "605899",
    "end": "613399"
  },
  {
    "text": "here there are two choices we could decide that we're bored and want to go",
    "start": "613399",
    "end": "619339"
  },
  {
    "text": "straight out for coffee and we'll just say well we don't want that to be no fine I'll use an empty string instead at",
    "start": "619339",
    "end": "625850"
  },
  {
    "text": "which point no warnings job done off we get coffee and more interesting is to",
    "start": "625850",
    "end": "631220"
  },
  {
    "text": "say you know what sometimes I want things to be nullable so if we say I",
    "start": "631220",
    "end": "638029"
  },
  {
    "text": "want middle name to be nullable we need to make the parameter in the constructor",
    "start": "638029",
    "end": "644120"
  },
  {
    "text": "nullable which we do in the obvious way if you've done any c-sharp and used",
    "start": "644120",
    "end": "649790"
  },
  {
    "text": "nullable value types you would immediately reach for a question mark here it's worth noting that it's not",
    "start": "649790",
    "end": "656890"
  },
  {
    "text": "nullable string ok that that's still trying to construct a nullable value",
    "start": "656890",
    "end": "663440"
  },
  {
    "text": "type but strings a reference type I'll come back to the differences when",
    "start": "663440",
    "end": "670220"
  },
  {
    "text": "we talk about Derrick's so um note that now now that the parameter is nullable",
    "start": "670220",
    "end": "676300"
  },
  {
    "text": "the warning has gone away from our passing a null argument yay",
    "start": "676300",
    "end": "681379"
  },
  {
    "text": "we've got another warning instead we now when we're trying to copy from the",
    "start": "681379",
    "end": "687230"
  },
  {
    "text": "nullable parameter to the non nullable property we we're told hey yo you're",
    "start": "687230",
    "end": "693829"
  },
  {
    "text": "doing something that may be wrong there okay so let's make the property nullable",
    "start": "693829",
    "end": "698980"
  },
  {
    "text": "bomb and now we've got two warnings now",
    "start": "698980",
    "end": "704329"
  },
  {
    "start": "700000",
    "end": "750000"
  },
  {
    "text": "what i find interesting is you laughed then and every audience I've ever done this with laughs but this is the",
    "start": "704329",
    "end": "711889"
  },
  {
    "text": "experience you should absolutely expect okay not only do you get a load of warnings when you start but you fix",
    "start": "711889",
    "end": "718970"
  },
  {
    "text": "things up and you will have more warnings in different places it's like playing whack-a-mole with warnings and",
    "start": "718970",
    "end": "727420"
  },
  {
    "text": "the reason for that is that you are propagating more information through the system and the other bits of you've got",
    "start": "727420",
    "end": "736189"
  },
  {
    "text": "the code over here that you've suddenly said this is nullable this bit of code is reacting to that bit of code and it's",
    "start": "736189",
    "end": "742790"
  },
  {
    "text": "changing its mind about how it feels about that knowing that that might be null and I thought it wasn't going to be null and this is where we finally got to",
    "start": "742790",
    "end": "751759"
  },
  {
    "start": "750000",
    "end": "800000"
  },
  {
    "text": "the cause of our null reference exception earlier is when we were doing middle dot length where middle was null",
    "start": "751759",
    "end": "758600"
  },
  {
    "text": "and now the compiler knows that middle might be null so it's saying hey this is a bad idea",
    "start": "758600",
    "end": "764290"
  },
  {
    "text": "so this warning whack Amole is a good thing but you need to be prepared for it",
    "start": "764290",
    "end": "770329"
  },
  {
    "text": "and understand it and don't just get dispirited so there are two warnings here and they're kind of interesting so",
    "start": "770329",
    "end": "778339"
  },
  {
    "text": "the first is that we're trying to assign from person dot middle name which is",
    "start": "778339",
    "end": "786079"
  },
  {
    "text": "nullable to a non nullable local variable okay we would expect that to",
    "start": "786079",
    "end": "792230"
  },
  {
    "text": "have a warning because we've already seen warnings like that but what about this warning for middle dot length",
    "start": "792230",
    "end": "799689"
  },
  {
    "text": "that's a little weird because we've said here that middle is non nullable okay it shouldn't be no and",
    "start": "799689",
    "end": "809830"
  },
  {
    "start": "800000",
    "end": "860000"
  },
  {
    "text": "the compiler is warning us anyway because it might mean oh and it's now",
    "start": "809830",
    "end": "815870"
  },
  {
    "text": "time for big takeaways the aisle that is generated other than adding some",
    "start": "815870",
    "end": "823190"
  },
  {
    "text": "annotations on methods and properties and things to say hey this might be now lul this might not be Knoll the aisle",
    "start": "823190",
    "end": "829730"
  },
  {
    "text": "that's executed does not change at all when you do nullable reference types",
    "start": "829730",
    "end": "834970"
  },
  {
    "text": "it's really really important to understand that it is not changing the behavior of your code if you turn noble",
    "start": "834970",
    "end": "842360"
  },
  {
    "text": "reference types on and ignore the warnings so you don't change your code at all and if you dumped that with a old",
    "start": "842360",
    "end": "850310"
  },
  {
    "text": "azzam before and after the only difference you would see is in attributes your code would still run and",
    "start": "850310",
    "end": "856580"
  },
  {
    "text": "if it had bugs before it will still have bugs if it didn't have bugs then even",
    "start": "856580",
    "end": "861800"
  },
  {
    "text": "with all of those warnings it still won't have bugs and the sort of",
    "start": "861800",
    "end": "869410"
  },
  {
    "text": "corollary of that is that nullable reference types are really a",
    "start": "869410",
    "end": "874940"
  },
  {
    "text": "compile-time thing they leave some metadata lying around in attributes but",
    "start": "874940",
    "end": "881230"
  },
  {
    "text": "there's no representation in the CLR the CLR has not changed at all which means",
    "start": "881230",
    "end": "887450"
  },
  {
    "text": "the type safety is also only compile-time if you persuade the compiler or ignore",
    "start": "887450",
    "end": "894860"
  },
  {
    "text": "the warnings then unlike with our ArrayList example earlier on if I try to",
    "start": "894860",
    "end": "901520"
  },
  {
    "text": "cast something to string because I thought well this is an ArrayList of strings and someone have put something that isn't a string in there it would",
    "start": "901520",
    "end": "908360"
  },
  {
    "text": "have gone bang the compiler sorry the CLR would have been checking things for me that is not present with nullable",
    "start": "908360",
    "end": "915410"
  },
  {
    "text": "reference types the value of a nan nullable local variable can absolutely be null and in fact you can sometimes",
    "start": "915410",
    "end": "922670"
  },
  {
    "start": "920000",
    "end": "940000"
  },
  {
    "text": "get it without any warnings I mentioned arrays earlier on and string array equals new string",
    "start": "922670",
    "end": "929080"
  },
  {
    "text": "10 I'm not entirely confident that this",
    "start": "929080",
    "end": "935210"
  },
  {
    "text": "will not worn but yeah no warnings that",
    "start": "935210",
    "end": "941390"
  },
  {
    "start": "940000",
    "end": "980000"
  },
  {
    "text": "will go bang the behavior has not changed okay I am gonna keep saying this I'm afraid the behavior has not changed",
    "start": "941390",
    "end": "948350"
  },
  {
    "text": "so array zero is null the compiler isn't warning you in this particular case because it's kind of hard to reason",
    "start": "948350",
    "end": "954170"
  },
  {
    "text": "about strings it's very easy this time because we can see we just created it of course everything's going to be null but",
    "start": "954170",
    "end": "960800"
  },
  {
    "text": "what if this was string array equals get array four in some method we'd have no",
    "start": "960800",
    "end": "968029"
  },
  {
    "text": "idea whether it was null or not so we the compiler trusts us in this",
    "start": "968029",
    "end": "975470"
  },
  {
    "text": "particular case here we can say it's it's an array of nullable strings and at that point it says whoa that might be no",
    "start": "975470",
    "end": "981620"
  },
  {
    "start": "980000",
    "end": "1015000"
  },
  {
    "text": "don't dereference it okay so it's not bulletproof it's not enforced at",
    "start": "981620",
    "end": "988250"
  },
  {
    "text": "execution time it doesn't change your oil it may sound like I'm really trying",
    "start": "988250",
    "end": "993470"
  },
  {
    "text": "to sell this down and say it's a useless feature it's really really not being able to know when things might or might",
    "start": "993470",
    "end": "1000040"
  },
  {
    "text": "not be null even when it's only to 90% confidence it's still a lot better than",
    "start": "1000040",
    "end": "1006040"
  },
  {
    "text": "0% confidence or just relying on documentation which we all know gets out",
    "start": "1006040",
    "end": "1012040"
  },
  {
    "text": "today easily so back to this middle dot length the compiler isn't trusting that",
    "start": "1012040",
    "end": "1019930"
  },
  {
    "start": "1015000",
    "end": "1090000"
  },
  {
    "text": "just because we've put something into a variable middle it it's definitely not",
    "start": "1019930",
    "end": "1025360"
  },
  {
    "text": "null because it's given us a warning here but we could have turned that warning off or we're clearly not doing",
    "start": "1025360",
    "end": "1030550"
  },
  {
    "text": "anything with the warning at this point so we need to do something else to get",
    "start": "1030550",
    "end": "1036339"
  },
  {
    "text": "rid of this warning let's make that a nullable local variable that's an easy warning to get rid of and let's just use",
    "start": "1036339",
    "end": "1044160"
  },
  {
    "text": "the null conditional operator so middle",
    "start": "1044160",
    "end": "1051160"
  },
  {
    "text": "question mark dot length so that that expression is narrow of type nullable int and this code will now work in the",
    "start": "1051160",
    "end": "1060640"
  },
  {
    "text": "it won't go bang and we end up with middle equals blank",
    "start": "1060640",
    "end": "1066190"
  },
  {
    "text": "now I am useless at user interfaces but I still think that's bad here I can spot",
    "start": "1066190",
    "end": "1073090"
  },
  {
    "text": "that that's not an ideal user interface let's see if we can fix that to not",
    "start": "1073090",
    "end": "1078940"
  },
  {
    "text": "bother printing middle equals at all if we if middle is non null so there are we",
    "start": "1078940",
    "end": "1089980"
  },
  {
    "text": "could say if let's do something if the middle name is null else do the the full",
    "start": "1089980",
    "end": "1096220"
  },
  {
    "text": "thing or we could use if it's not null and these days the sort of blessed way",
    "start": "1096220",
    "end": "1102970"
  },
  {
    "text": "by the c-sharp team of determining whether a reference is not or not if it's if you want to match against null",
    "start": "1102970",
    "end": "1109390"
  },
  {
    "text": "is null to say not null is object okay",
    "start": "1109390",
    "end": "1115560"
  },
  {
    "text": "yes you can use equals equals null and not equal to null they don't actually do",
    "start": "1115560",
    "end": "1121870"
  },
  {
    "text": "the same thing as is null is null is a really efficient way of doing it says is",
    "start": "1121870",
    "end": "1128980"
  },
  {
    "start": "1125000",
    "end": "1190000"
  },
  {
    "text": "this reference null anyone care to think what the difference is with that",
    "start": "1128980",
    "end": "1135990"
  },
  {
    "text": "overloaded operators yes exactly that's cheating you've heard Madson talk about this so yep that's calling an",
    "start": "1136470",
    "end": "1145720"
  },
  {
    "text": "overloaded operator for no good reason we we're fairly confident that the string overload is doing the right thing",
    "start": "1145720",
    "end": "1151480"
  },
  {
    "text": "but why invoke more code than we need let's just use is null so if it's null",
    "start": "1151480",
    "end": "1159330"
  },
  {
    "text": "we'll print out just the first and last names get rid of that okay now here's",
    "start": "1161580",
    "end": "1172330"
  },
  {
    "text": "the magic bit observe the lack of",
    "start": "1172330",
    "end": "1177880"
  },
  {
    "text": "warning now I'm just going to get rid of",
    "start": "1177880",
    "end": "1183310"
  },
  {
    "text": "the the list of warnings here so you can see more of this at a time that's enough",
    "start": "1183310",
    "end": "1188650"
  },
  {
    "text": "okay so middle is a nullable reference type it can be null so you would expect",
    "start": "1188650",
    "end": "1196360"
  },
  {
    "start": "1190000",
    "end": "1330000"
  },
  {
    "text": "the compiler to say you're not allowed to do that because it might be null but the compilers smart enough to say",
    "start": "1196360",
    "end": "1202929"
  },
  {
    "text": "hey it's okay we've just checked whether it's null and the only way we can get into the else block is if it's not null",
    "start": "1202929",
    "end": "1211138"
  },
  {
    "text": "so this validation this checking is not just based on the type of the variable",
    "start": "1211739",
    "end": "1218850"
  },
  {
    "text": "it's a little bit like the compiler keeping track of definite assignment and saying you can't read a variable unless",
    "start": "1218850",
    "end": "1225759"
  },
  {
    "text": "every possible execution path says it's already been assigned it's like that but",
    "start": "1225759",
    "end": "1231460"
  },
  {
    "text": "with null ability and it doesn't matter what the type of the variable is it will still keep track of I think that might",
    "start": "1231460",
    "end": "1238059"
  },
  {
    "text": "be null or I don't think that will be null and will warn you appropriately so",
    "start": "1238059",
    "end": "1244899"
  },
  {
    "text": "that's fine we've got something similar in terms of definite assignment for local variables now let me scare you a",
    "start": "1244899",
    "end": "1251259"
  },
  {
    "text": "little more let's get rid of it let's say we don't like these local variables will say if person dot middle name is",
    "start": "1251259",
    "end": "1258820"
  },
  {
    "text": "null will write person dot first name dot length person dot last name dot",
    "start": "1258820",
    "end": "1265989"
  },
  {
    "text": "length no problem so far",
    "start": "1265989",
    "end": "1270359"
  },
  {
    "text": "and still no warnings and the first time I saw that it terrified me because this",
    "start": "1277400",
    "end": "1284990"
  },
  {
    "text": "is definitely definitely not safe code we were reasonably confident if the",
    "start": "1284990",
    "end": "1290330"
  },
  {
    "text": "middle local variable wasn't null when we checked it it's not gonna be no later",
    "start": "1290330",
    "end": "1295940"
  },
  {
    "text": "on but these are properties we're talking about now these are this is",
    "start": "1295940",
    "end": "1304040"
  },
  {
    "text": "executing some code here and it's executing the same code again who knows whether it'll get the same answer it",
    "start": "1304040",
    "end": "1310670"
  },
  {
    "text": "might have an implementation like this",
    "start": "1310670",
    "end": "1314830"
  },
  {
    "text": "so this is a similar a smaller example of the same kind of code and again it",
    "start": "1318070",
    "end": "1324170"
  },
  {
    "text": "compiles without any warnings and this is a really bad idea this is not safe",
    "start": "1324170",
    "end": "1331970"
  },
  {
    "start": "1330000",
    "end": "1375000"
  },
  {
    "text": "this could I'm not going to run it thousands and thousands of times but this could absolutely throw null",
    "start": "1331970",
    "end": "1338690"
  },
  {
    "text": "reference exception because if you call it first just before the start of a",
    "start": "1338690",
    "end": "1344600"
  },
  {
    "text": "minute and then by the time it reaches this bit of code and let's face it these will be nanoseconds apart in terms of",
    "start": "1344600",
    "end": "1351680"
  },
  {
    "text": "execution but the second time it calls the name property it could then the clock ticks over to the start of a",
    "start": "1351680",
    "end": "1358610"
  },
  {
    "text": "minute it returns null bang null reference exception this was bad code",
    "start": "1358610",
    "end": "1364940"
  },
  {
    "text": "before c-sharp ate it's still bad code in c-sharp ate and the compiler isn't",
    "start": "1364940",
    "end": "1370880"
  },
  {
    "text": "warning you about it okay it doesn't try to be bulletproof now you know no one's",
    "start": "1370880",
    "end": "1377060"
  },
  {
    "start": "1375000",
    "end": "1440000"
  },
  {
    "text": "actually got code quite this bad I hope in their production systems but there are other ways that properties can",
    "start": "1377060",
    "end": "1383120"
  },
  {
    "text": "change if you are doing things if you are mutating an object in one thread and",
    "start": "1383120",
    "end": "1388450"
  },
  {
    "text": "doing other stuff in another thread then you could easily have this kind of situation don't do that it's a really",
    "start": "1388450",
    "end": "1395840"
  },
  {
    "text": "bad idea to do unguarded mutation across multiple threads let me do a few more",
    "start": "1395840",
    "end": "1406610"
  },
  {
    "text": "things with this code base first to show you the the second bit of new syntax so I've shown you one",
    "start": "1406610",
    "end": "1412330"
  },
  {
    "text": "bit of new syntax so far which is adding question mark to a type name actually",
    "start": "1412330",
    "end": "1418330"
  },
  {
    "text": "I'll I there's a couple more bits within generics as well but note that I've got a to do here validate arguments let's do that now so",
    "start": "1418330",
    "end": "1427090"
  },
  {
    "text": "I'm going to at this point go into a block body because otherwise it ends up",
    "start": "1427090",
    "end": "1432309"
  },
  {
    "text": "looking a little awkward and I'm going",
    "start": "1432309",
    "end": "1438040"
  },
  {
    "text": "to do first name equals and then I've got another another class elsewhere in",
    "start": "1438040",
    "end": "1445210"
  },
  {
    "start": "1440000",
    "end": "1490000"
  },
  {
    "text": "this called precondition where they check not null and normally so I've had",
    "start": "1445210",
    "end": "1452290"
  },
  {
    "text": "several classes like this over time normally I have a second parameter that's the name of the parameter as it",
    "start": "1452290",
    "end": "1459820"
  },
  {
    "text": "were and I would normally write name or first name and it gets a little bit annoying but it's really useful for",
    "start": "1459820",
    "end": "1465040"
  },
  {
    "text": "diagnostic purposes I've kept it simple just for this talk say precondition check not null last",
    "start": "1465040",
    "end": "1473320"
  },
  {
    "text": "name and then we don't need to do any checks for middle name because it's",
    "start": "1473320",
    "end": "1480030"
  },
  {
    "text": "noble okay that's fine",
    "start": "1480030",
    "end": "1486870"
  },
  {
    "text": "that is I've changed the code what should I have done before changing the",
    "start": "1486870",
    "end": "1492429"
  },
  {
    "start": "1490000",
    "end": "1585000"
  },
  {
    "text": "code I should have written a test how",
    "start": "1492429",
    "end": "1498910"
  },
  {
    "text": "would I test that this code now behaves where I wanted it to before I haven't",
    "start": "1498910",
    "end": "1506200"
  },
  {
    "text": "got any nougat package any tests installed right",
    "start": "1506200",
    "end": "1511240"
  },
  {
    "text": "now but let's just because every time I do this talk I think why didn't I",
    "start": "1511240",
    "end": "1517660"
  },
  {
    "text": "install any unit did it to do that we'll take a little bit so let's do I'll just",
    "start": "1517660",
    "end": "1526390"
  },
  {
    "text": "do the class at the bottom so it doesn't get in the way of other demos but in the",
    "start": "1526390",
    "end": "1531580"
  },
  {
    "text": "same file right so public class and person test fact nope test",
    "start": "1531580",
    "end": "1541360"
  },
  {
    "text": "I'm not X unit sorry I use different tests environments depending on whether I'm",
    "start": "1541360",
    "end": "1547070"
  },
  {
    "text": "doing things personally or not so we'll say first and they constructor first",
    "start": "1547070",
    "end": "1556160"
  },
  {
    "text": "name must not be no however you want to",
    "start": "1556160",
    "end": "1561470"
  },
  {
    "text": "name your tests that's fine by me and it's now got that so we're going to do assert throws and argument null",
    "start": "1561470",
    "end": "1569690"
  },
  {
    "text": "exception and then what are we going to do here we need a new person null last middle",
    "start": "1569690",
    "end": "1581980"
  },
  {
    "text": "newline and the trouble is that gives us",
    "start": "1582310",
    "end": "1588620"
  },
  {
    "start": "1585000",
    "end": "1700000"
  },
  {
    "text": "a warning and I don't want warnings even in my test code so I'm going to use what",
    "start": "1588620",
    "end": "1593870"
  },
  {
    "text": "Microsoft what the man wants you to call the null forgiving operator and what I",
    "start": "1593870",
    "end": "1599630"
  },
  {
    "text": "want you to call the damnit operator it's basically saying no I want this to",
    "start": "1599630",
    "end": "1605330"
  },
  {
    "text": "be null damn it so we use an exclamation mark",
    "start": "1605330",
    "end": "1610570"
  },
  {
    "text": "so can I trust all of you we'll call it the damnit operator every time you need to refer to it yes yes thank you",
    "start": "1610570",
    "end": "1618070"
  },
  {
    "text": "what compiler am I using am I using the Microsoft compiler framework no I'm",
    "start": "1618070",
    "end": "1623300"
  },
  {
    "text": "using Rosling that's what the communities always called it and what's work what we're going to keep calling it we will keep calling this the damnit",
    "start": "1623300",
    "end": "1629690"
  },
  {
    "text": "operator so the damnit operator just tells the compiler whatever you thought about the",
    "start": "1629690",
    "end": "1635600"
  },
  {
    "text": "null ability of this expression and it doesn't have to be a null literal I could have done you know",
    "start": "1635600",
    "end": "1640850"
  },
  {
    "text": "string this is null equals null you know",
    "start": "1640850",
    "end": "1646070"
  },
  {
    "text": "it can be any expression and it just says whatever you thought pretend it's",
    "start": "1646070",
    "end": "1651890"
  },
  {
    "text": "not null it's you this is not the null you're looking for and I want to know",
    "start": "1651890",
    "end": "1660980"
  },
  {
    "text": "what's the key takeaway that I asked you to remember before as well as the damn",
    "start": "1660980",
    "end": "1667130"
  },
  {
    "text": "it but from earlier on it doesn't change the meaning of your code even though",
    "start": "1667130",
    "end": "1672230"
  },
  {
    "text": "damnit operator does not change the meaning of your code it's a little bit like a cast in that you're telling the",
    "start": "1672230",
    "end": "1678590"
  },
  {
    "text": "I know better than you trust me on this but it's saying no really really trust me you don't even need to check because",
    "start": "1678590",
    "end": "1685610"
  },
  {
    "text": "it would be awful if the compiler inserted a check in here to say you know if it's null I'm gonna go bang early",
    "start": "1685610",
    "end": "1692480"
  },
  {
    "text": "because we like exceptions happening early no we really really want to pass null into this code so that we can check",
    "start": "1692480",
    "end": "1699740"
  },
  {
    "text": "that it throws argument null exception and this is I'm gonna heart back again because this all links back to it",
    "start": "1699740",
    "end": "1706460"
  },
  {
    "start": "1700000",
    "end": "1780000"
  },
  {
    "text": "doesn't change the meaning of your at the behavior of your code you need to",
    "start": "1706460",
    "end": "1711980"
  },
  {
    "text": "check for this not being null because if you don't some code could pass null in",
    "start": "1711980",
    "end": "1717200"
  },
  {
    "text": "and you had end up with a person object that was violating its own contract and",
    "start": "1717200",
    "end": "1722240"
  },
  {
    "text": "you don't want to do that don't be that developer you know it's much better to",
    "start": "1722240",
    "end": "1728780"
  },
  {
    "text": "find them find the problem early on and throw an exception then you've passed the person through multiple levels of",
    "start": "1728780",
    "end": "1736220"
  },
  {
    "text": "all kinds of stuff maybe serialize it to JSON deserialized it on an entirely different system and then you find out",
    "start": "1736220",
    "end": "1742190"
  },
  {
    "text": "it's null no you really want to say sure this isn't meant to be now I will make sure it's not null ways that it could be",
    "start": "1742190",
    "end": "1750050"
  },
  {
    "text": "no r1 someone ignores warnings to they disable warnings because hey it's only a",
    "start": "1750050",
    "end": "1755570"
  },
  {
    "text": "warning three they haven't enabled nullable reference types at all or four",
    "start": "1755570",
    "end": "1760910"
  },
  {
    "text": "they may not be able to enable nullable reference types you can still call in to",
    "start": "1760910",
    "end": "1766100"
  },
  {
    "text": "c-sharp eight code from c-sharp 7 code because i can create a new get package with this with this person class in and",
    "start": "1766100",
    "end": "1774440"
  },
  {
    "text": "I don't care what version of the language someone's using when they try to use it now that is all kind of",
    "start": "1774440",
    "end": "1781760"
  },
  {
    "text": "annoying to do having this precondition everywhere so it is possible that in a",
    "start": "1781760",
    "end": "1786920"
  },
  {
    "text": "future version of c-sharp I'm kind of hoping c-sharp 8.1 that we'll be able to",
    "start": "1786920",
    "end": "1793430"
  },
  {
    "text": "add some syntax to the parameter itself and the the thing that has been proposed",
    "start": "1793430",
    "end": "1798890"
  },
  {
    "text": "by the team is adding an exclamation mark there and note that it's on the",
    "start": "1798890",
    "end": "1804770"
  },
  {
    "text": "name of the parameter not on the type you might expect and frankly so would I",
    "start": "1804770",
    "end": "1809950"
  },
  {
    "text": "that you would put it there sort of this isn't just not null it's not null and checked to be not null and",
    "start": "1809950",
    "end": "1816890"
  },
  {
    "text": "I would quite like that to be honest but the the team has at least been arguing",
    "start": "1816890",
    "end": "1822679"
  },
  {
    "text": "that no it makes more sense because it's not about the type of the parameter but what we do with the parameter inside and",
    "start": "1822679",
    "end": "1828440"
  },
  {
    "text": "something and if this becomes a thing then we could get rid of the",
    "start": "1828440",
    "end": "1834049"
  },
  {
    "text": "precondition check not null because the compiler would be adding code that effectively does that for us",
    "start": "1834049",
    "end": "1839570"
  },
  {
    "text": "and that would be a lovely lovely thing okay I believe that's all the basics and",
    "start": "1839570",
    "end": "1849500"
  },
  {
    "start": "1845000",
    "end": "1930000"
  },
  {
    "text": "I've now just remembered I haven't looked at these for ages so quickly how",
    "start": "1849500",
    "end": "1855020"
  },
  {
    "text": "does one code like a girl by doing it well off topic copy/paste that's",
    "start": "1855020",
    "end": "1860149"
  },
  {
    "text": "horrible didn't see a witch copy/paste come why",
    "start": "1860149",
    "end": "1866210"
  },
  {
    "text": "don't we just avoid doing mutation yeah sure I prefer using immutable types",
    "start": "1866210",
    "end": "1873260"
  },
  {
    "text": "where possible a it's not always possible and be the c-sharp programming language is not in the business of",
    "start": "1873260",
    "end": "1879409"
  },
  {
    "text": "dictating how you code someone's asked",
    "start": "1879409",
    "end": "1884659"
  },
  {
    "text": "about house value which is fantastic because it lets me come back to a difference between noble value types and",
    "start": "1884659",
    "end": "1891710"
  },
  {
    "text": "nullable reference types nullable value types have an entirely different representation in the CLR they are a",
    "start": "1891710",
    "end": "1898460"
  },
  {
    "text": "whole different type nullable of T where T is the non nullable value type so",
    "start": "1898460",
    "end": "1903740"
  },
  {
    "text": "nullable event and int look entirely different to the CLR so you can do if",
    "start": "1903740",
    "end": "1909399"
  },
  {
    "text": "food has value and that uses the has value property from the nullable value",
    "start": "1909399",
    "end": "1914720"
  },
  {
    "text": "type I can't do I'm assuming that this question came in when I was writing if",
    "start": "1914720",
    "end": "1921620"
  },
  {
    "text": "person got middle name is null or earlier on I can't do middle name that",
    "start": "1921620",
    "end": "1928220"
  },
  {
    "text": "has null because there isn't such property it would have to be a property in person itself sorry in string and it",
    "start": "1928220",
    "end": "1936380"
  },
  {
    "text": "would go bang if but if middle name is null because there's no separate type here the the the opposite of that is I",
    "start": "1936380",
    "end": "1944299"
  },
  {
    "text": "don't need to do person dot middle name dot value dot length because I'm not trying to get at",
    "start": "1944299",
    "end": "1949679"
  },
  {
    "text": "the underlying not null value there is no nullable string it's just string as far as the IL is",
    "start": "1949679",
    "end": "1956279"
  },
  {
    "text": "concerned as far as the CLR is concerned and I do apologize to my sign language",
    "start": "1956279",
    "end": "1962129"
  },
  {
    "text": "interpreter here for all the acronyms going around I hope it's not too too difficult for people watching is there a",
    "start": "1962129",
    "end": "1975210"
  },
  {
    "start": "1975000",
    "end": "2005000"
  },
  {
    "text": "shorthand for throw if not null no there isn't there might be four parameters in",
    "start": "1975210",
    "end": "1980940"
  },
  {
    "text": "c-sharp 8.1 but I think that there's still room for being able to do things in imagine you could do middle is person",
    "start": "1980940",
    "end": "1990929"
  },
  {
    "text": "dot middle name and well I'd imagine that that would inject something saying",
    "start": "1990929",
    "end": "1998220"
  },
  {
    "text": "whoa just check that it's not null as I go but I don't think there's anything even planned for that right I'm now",
    "start": "1998220",
    "end": "2005539"
  },
  {
    "text": "going to move away from the questions and come back to my script as it were and so we've got a few things a person",
    "start": "2005539",
    "end": "2014239"
  },
  {
    "text": "is exposing some properties two of which and non nullable one of which is knowable you can do the same for method",
    "start": "2014239",
    "end": "2022759"
  },
  {
    "text": "parameters those can be nullable or not nullable you can do the same for return types i would ask you what do you think",
    "start": "2022759",
    "end": "2031279"
  },
  {
    "text": "the the signature for string dot is null",
    "start": "2031279",
    "end": "2037460"
  },
  {
    "text": "or empty should look like so if we had you know class string utils public",
    "start": "2037460",
    "end": "2046399"
  },
  {
    "text": "static well what are we going to put let's put bull is null or empty string",
    "start": "2046399",
    "end": "2054490"
  },
  {
    "text": "text okay we need that to be nullable because there's no point in saying is",
    "start": "2054490",
    "end": "2060770"
  },
  {
    "start": "2055000",
    "end": "2100000"
  },
  {
    "text": "this null or empty by the way it can't be null that would be foolish that would have warnings all over the",
    "start": "2060770",
    "end": "2067339"
  },
  {
    "text": "place and in fact ironically in no time at the moment i've got a bunch of null forgiving operators damnit operators",
    "start": "2067339",
    "end": "2074260"
  },
  {
    "text": "where i call string dot is null or empty with something that i know might be",
    "start": "2074260",
    "end": "2080500"
  },
  {
    "text": "precisely because I know it will handle it and the version of the framework that I'm targeting doesn't have the",
    "start": "2080500",
    "end": "2086899"
  },
  {
    "text": "annotations to say the right things so it wants it to be not nullable and it might be no so yeah that's just cool",
    "start": "2086900",
    "end": "2095270"
  },
  {
    "text": "string dot is null or empty for the moment and that that is absolutely",
    "start": "2095270",
    "end": "2101930"
  },
  {
    "start": "2100000",
    "end": "2140000"
  },
  {
    "text": "correct but it is not giving us all the information we want so the type system",
    "start": "2101930",
    "end": "2108170"
  },
  {
    "text": "is not rich enough to convey the meaning of the method and when it comes to null",
    "start": "2108170",
    "end": "2114230"
  },
  {
    "text": "ability that's really really useful now I have a slightly bigger version of this with some calling code that shows you",
    "start": "2114230",
    "end": "2120980"
  },
  {
    "text": "why so it's not it's conditional return",
    "start": "2120980",
    "end": "2126800"
  },
  {
    "text": "right so I've got my own version of string string dot is null or empty so",
    "start": "2126800",
    "end": "2132470"
  },
  {
    "text": "that I can show you in a minute how it how the magic actually happens but",
    "start": "2132470",
    "end": "2137590"
  },
  {
    "text": "suppose we have this so we've got something that you imagine we're getting this from somewhere else it might or",
    "start": "2137590",
    "end": "2144080"
  },
  {
    "text": "might not be null if it's null or empty we're just gonna print is null or empty",
    "start": "2144080",
    "end": "2149210"
  },
  {
    "text": "otherwise we'll print text length no warning and I haven't disabled warnings",
    "start": "2149210",
    "end": "2155960"
  },
  {
    "text": "or anything there's magic going on the compiler has to know that if string dot",
    "start": "2155960",
    "end": "2162050"
  },
  {
    "text": "is null or empty returned false that means the argument text in this case was",
    "start": "2162050",
    "end": "2168380"
  },
  {
    "text": "not null it can't get that from the signature itself that's just not part of",
    "start": "2168380",
    "end": "2174740"
  },
  {
    "text": "you know it's it's not gonna magically say oh it starts with is null therefore I'll work it out from that I've heard",
    "start": "2174740",
    "end": "2183080"
  },
  {
    "text": "strange of things so what actually happens in in early versions of the",
    "start": "2183080",
    "end": "2190040"
  },
  {
    "text": "c-sharp ate compiler the compiler had hard-coded I know what C sure what string dot is another empty means and it",
    "start": "2190040",
    "end": "2197030"
  },
  {
    "text": "did the right thing at one point the c-sharp team were going to introduce a sort of little meta language that you",
    "start": "2197030",
    "end": "2203330"
  },
  {
    "text": "could put in an attribute above the method to say the relation between inputs and outputs and what it what it",
    "start": "2203330",
    "end": "2210530"
  },
  {
    "text": "would all mean but I believe they I suspect what happened is they started",
    "start": "2210530",
    "end": "2216080"
  },
  {
    "text": "doing that and then found that they all boiled down to a relatively small number of cases so instead of one",
    "start": "2216080",
    "end": "2223880"
  },
  {
    "text": "general-purpose attribute with a whole extra language inside which would have been a nightmare to design and then",
    "start": "2223880",
    "end": "2229430"
  },
  {
    "start": "2225000",
    "end": "2275000"
  },
  {
    "text": "specify instead we have some very specific attributes so string dot is",
    "start": "2229430",
    "end": "2236810"
  },
  {
    "text": "null or empty its first attribute which is of type nullable string has this not",
    "start": "2236810",
    "end": "2243710"
  },
  {
    "text": "null when false so this means when the output of the method the return value of",
    "start": "2243710",
    "end": "2250940"
  },
  {
    "text": "the method is false then the attributed parameter text was not null and that's",
    "start": "2250940",
    "end": "2259430"
  },
  {
    "text": "how it knows that's how the compiler knows to feed that into its idea of whether the variable was null or not",
    "start": "2259430",
    "end": "2267010"
  },
  {
    "text": "let's look at a slightly odd or example of dictionary try get value so",
    "start": "2267010",
    "end": "2275680"
  },
  {
    "start": "2275000",
    "end": "2325000"
  },
  {
    "text": "dictionary T key T value T key and T value can be any types you like",
    "start": "2275680",
    "end": "2281349"
  },
  {
    "text": "including non nullable reference types so we could have a dictionary ball",
    "start": "2281349",
    "end": "2287420"
  },
  {
    "text": "string okay and we know about the try gate value method that was designed a",
    "start": "2287420",
    "end": "2294080"
  },
  {
    "text": "long time before nullable reference types came along try gate value will",
    "start": "2294080",
    "end": "2299540"
  },
  {
    "text": "return false if the key is not in the dictionary and the out parameter out",
    "start": "2299540",
    "end": "2305839"
  },
  {
    "text": "string value here out T value value in the real site will have the default",
    "start": "2305839",
    "end": "2313310"
  },
  {
    "text": "value for the value type for T value this isn't value types as indelible",
    "start": "2313310",
    "end": "2319700"
  },
  {
    "text": "value types etc I apologize for the overloading of the terminology so that",
    "start": "2319700",
    "end": "2326290"
  },
  {
    "start": "2325000",
    "end": "2385000"
  },
  {
    "text": "leads to the question so what's the default value of non nullable string what do you think the default value is",
    "start": "2326290",
    "end": "2332859"
  },
  {
    "text": "now it's a real problem it's very odd",
    "start": "2332859",
    "end": "2339230"
  },
  {
    "text": "that default of T is not really a T or violates its own contract but the",
    "start": "2339230",
    "end": "2345980"
  },
  {
    "text": "compiler needs to no in order to make things safe it needs to know that if tri-gate value returned",
    "start": "2345980",
    "end": "2351290"
  },
  {
    "text": "false then even if I've got an on nullable out parameter it might be null",
    "start": "2351290",
    "end": "2357560"
  },
  {
    "text": "after all in fact it definitely will be but this",
    "start": "2357560",
    "end": "2362750"
  },
  {
    "text": "is saying may be null when false so it's saying again when this returns false the",
    "start": "2362750",
    "end": "2370610"
  },
  {
    "text": "out parameter will be null and therefore",
    "start": "2370610",
    "end": "2376790"
  },
  {
    "text": "the the compiler warns us if we try to use it come on yes there are a bunch",
    "start": "2376790",
    "end": "2384890"
  },
  {
    "text": "more attributes I will show you one more so this is quite related to link to XML",
    "start": "2384890",
    "end": "2393260"
  },
  {
    "start": "2385000",
    "end": "2480000"
  },
  {
    "text": "where there are a bunch of operations in link to XML particularly with operators where say X element you can cast the",
    "start": "2393260",
    "end": "2402740"
  },
  {
    "text": "next element to string and that will return null if you actually passed in to",
    "start": "2402740",
    "end": "2409880"
  },
  {
    "text": "the conversion a null x element so not an element that's got no text value but",
    "start": "2409880",
    "end": "2416000"
  },
  {
    "text": "you passed in a null reference it doesn't go bang it just returns you know this sort of null propagation is really",
    "start": "2416000",
    "end": "2421910"
  },
  {
    "text": "useful and here's a sort of trivial example for it so if we pass in null to",
    "start": "2421910",
    "end": "2427610"
  },
  {
    "text": "the method it will return null if we pass in something non null it will",
    "start": "2427610",
    "end": "2432710"
  },
  {
    "text": "return the same string twice and that's clearly going to be not null so non",
    "start": "2432710",
    "end": "2438770"
  },
  {
    "text": "input leads to null output not null input leads to not null output the",
    "start": "2438770",
    "end": "2444760"
  },
  {
    "text": "signature has to be this because we definitely want to be able to accept null and the output well it kind of",
    "start": "2444760",
    "end": "2450890"
  },
  {
    "text": "depends on the input but there's no way we're specifying that in the signature itself so we have this slightly bizarre",
    "start": "2450890",
    "end": "2457150"
  },
  {
    "text": "not null if not null so it's saying the",
    "start": "2457150",
    "end": "2462470"
  },
  {
    "text": "return is not null if the specified thing input is not null as an aside it's",
    "start": "2462470",
    "end": "2468740"
  },
  {
    "text": "kind of annoying that we can't do name of input but input is not in scope in",
    "start": "2468740",
    "end": "2474920"
  },
  {
    "text": "the attribute declaration okay",
    "start": "2474920",
    "end": "2480110"
  },
  {
    "start": "2480000",
    "end": "2610000"
  },
  {
    "text": "there are other attributes that are interesting and if I had lots of time I would go into them but I won't because",
    "start": "2480110",
    "end": "2487220"
  },
  {
    "text": "we don't have time I will talk a little bit about generics and about how they are a nightmare and you get certain",
    "start": "2487220",
    "end": "2493580"
  },
  {
    "text": "aspects of language design that sort of butt up against each other and generics and nullable reference types clash in a",
    "start": "2493580",
    "end": "2500360"
  },
  {
    "text": "fairly unpleasant kind of way there are other things that do this dynamic typing",
    "start": "2500360",
    "end": "2505610"
  },
  {
    "text": "and explicit interface implementation are likewise not friends I will very",
    "start": "2505610",
    "end": "2513440"
  },
  {
    "text": "quickly do questions first so the CLR could have changed instead",
    "start": "2513440",
    "end": "2520630"
  },
  {
    "text": "the question is could the CLR and language have changed instead so that things could have been done in the same",
    "start": "2520630",
    "end": "2527840"
  },
  {
    "text": "kind of type safety way that we have for other things and it certainly could have",
    "start": "2527840",
    "end": "2533570"
  },
  {
    "text": "been done but a I think it would probably be now I don't know about",
    "start": "2533570",
    "end": "2538940"
  },
  {
    "text": "efficiency they could probably make it efficient I suspect it would mean that adopting c-sharp eight would become much",
    "start": "2538940",
    "end": "2546710"
  },
  {
    "text": "more of a big deal much much harder basically we've been going for 20 years",
    "start": "2546710",
    "end": "2552710"
  },
  {
    "text": "it's too late to change something quite that radically if this had been back in 2005 yeah maybe but there's a lot of",
    "start": "2552710",
    "end": "2562040"
  },
  {
    "text": "code that this way of allowing you to migrate and fix the warnings and maybe",
    "start": "2562040",
    "end": "2567530"
  },
  {
    "text": "disable the warnings if you want for the moment and you know that you haven't made your code any worse so you can do",
    "start": "2567530",
    "end": "2574370"
  },
  {
    "text": "things a bit at a time it's far more pragmatic this whole feature reeks of",
    "start": "2574370",
    "end": "2580820"
  },
  {
    "text": "being pragmatic as opposed to dogmatic so it's trying to get let's make the",
    "start": "2580820",
    "end": "2586190"
  },
  {
    "text": "world better for loads of people rather than giving something that no one can use but anyone who does use it has a",
    "start": "2586190",
    "end": "2592130"
  },
  {
    "text": "perfect experience let's maximize the value yeah that should just be his null",
    "start": "2592130",
    "end": "2603490"
  },
  {
    "text": "thank you for that today I went talk",
    "start": "2603490",
    "end": "2611560"
  },
  {
    "start": "2610000",
    "end": "2650000"
  },
  {
    "text": "would I recommend making the warnings for knowable reference types appear as errors that's a good question in terms",
    "start": "2611560",
    "end": "2617050"
  },
  {
    "text": "of migration I would say do that after you've done the migration when you've",
    "start": "2617050",
    "end": "2622900"
  },
  {
    "text": "got it down to zero warnings then make it an error that makes the migration",
    "start": "2622900",
    "end": "2628150"
  },
  {
    "text": "easier when you've got multiple projects referring to each other you don't want stop one project from building entirely",
    "start": "2628150",
    "end": "2633610"
  },
  {
    "text": "before you can sort of see the impact of things but yes warning says errors is generally a good thing and I would",
    "start": "2633610",
    "end": "2640600"
  },
  {
    "text": "encourage that you know regardless of whether you're using the little reference types it does mean that things",
    "start": "2640600",
    "end": "2647950"
  },
  {
    "text": "that API designers may viewers not breaking changes like making a property",
    "start": "2647950",
    "end": "2653680"
  },
  {
    "start": "2650000",
    "end": "2670000"
  },
  {
    "text": "obsolete will give you a warning if you've got warnings as errors turned on you'll get an error but you've kind of opted into",
    "start": "2653680",
    "end": "2660730"
  },
  {
    "text": "that you've said I'm willing to address that problem as it comes up and that's I think a responsible attitude to take but",
    "start": "2660730",
    "end": "2668350"
  },
  {
    "text": "you know there needs to be a bit of give-and-take with API producers right onto generics so there are this is one",
    "start": "2668350",
    "end": "2676720"
  },
  {
    "start": "2670000",
    "end": "2770000"
  },
  {
    "text": "other little bit of new syntax we can have a not null constraint and it's not",
    "start": "2676720",
    "end": "2684610"
  },
  {
    "text": "quite as useful as you you might want it to be so it basically says T here has to be a not null non null abour value type",
    "start": "2684610",
    "end": "2691420"
  },
  {
    "text": "or a non nullable reference type which you would expect to then be able to say",
    "start": "2691420",
    "end": "2696520"
  },
  {
    "text": "you know that's fine I can now have a property of the nullable version because",
    "start": "2696520",
    "end": "2701710"
  },
  {
    "text": "there definitely will be a null available version for any T but it will",
    "start": "2701710",
    "end": "2707590"
  },
  {
    "text": "be different depending on whether T is an honorable value type on a non nullable reference type so if the",
    "start": "2707590",
    "end": "2713890"
  },
  {
    "text": "compiler had to try to get that to compile there is no il that could actually represent it because nullable",
    "start": "2713890",
    "end": "2722650"
  },
  {
    "text": "value types were added in as part of generics with a separate type and knowable reference types really weren't",
    "start": "2722650",
    "end": "2728110"
  },
  {
    "text": "added into the CLR at all so I'm sure that is a useful constraint in some",
    "start": "2728110",
    "end": "2733930"
  },
  {
    "text": "situations but it doesn't do what you might to be able to do if you have I'm gonna",
    "start": "2733930",
    "end": "2740209"
  },
  {
    "text": "move this up as a more familiar one so not nullable of t not nullable r ft",
    "start": "2740209",
    "end": "2746839"
  },
  {
    "text": "just has our old friend where t : class so by default any time that you've got",
    "start": "2746839",
    "end": "2753079"
  },
  {
    "text": "hey this has to be a reference type in nullable reference enabled code that",
    "start": "2753079",
    "end": "2759170"
  },
  {
    "text": "means it has to be a non nullable reference type so I've got some examples of invalid code later on so you can",
    "start": "2759170",
    "end": "2773719"
  },
  {
    "start": "2770000",
    "end": "2890000"
  },
  {
    "text": "create not nullable ref of string question mark that's only a warning but",
    "start": "2773719",
    "end": "2780949"
  },
  {
    "text": "the idea is obviously you're getting rid of all the warnings if you want something and you won't say it's",
    "start": "2780949",
    "end": "2786499"
  },
  {
    "text": "explicitly it might be a nullable reference type you put class question mark and one interesting difference is",
    "start": "2786499",
    "end": "2795699"
  },
  {
    "text": "you can put if you know that T is an honourable reference type you can then",
    "start": "2795699",
    "end": "2801859"
  },
  {
    "text": "accept the nullable form of it so you could have a a null ignoring list of T",
    "start": "2801859",
    "end": "2811459"
  },
  {
    "text": "where T is class and then having a maybe add method that accepts a t question",
    "start": "2811459",
    "end": "2816949"
  },
  {
    "text": "mark because maybe you've got a lot of callers that have that and don't want to have to check themselves all the time",
    "start": "2816949",
    "end": "2822079"
  },
  {
    "text": "and that could say well if it's null I'll ignore it otherwise I'll add its -",
    "start": "2822079",
    "end": "2827539"
  },
  {
    "text": "okay you can't do that I believe this is where I find out that it actually works",
    "start": "2827539",
    "end": "2833869"
  },
  {
    "text": "anyway right that's an error whew because if",
    "start": "2833869",
    "end": "2839630"
  },
  {
    "text": "you've got nullable of string as T sorry Oh string question mark as T then string",
    "start": "2839630",
    "end": "2847130"
  },
  {
    "text": "question mark question mark you know it really really might I'm not feeling good about this it might be null it probably is no no you can't do multiple strings",
    "start": "2847130",
    "end": "2855799"
  },
  {
    "text": "okay string",
    "start": "2855799",
    "end": "2859900"
  },
  {
    "text": "now there's nothing like that so you can't do maybe nullable ref of string",
    "start": "2862870",
    "end": "2869460"
  },
  {
    "text": "question mark and then have a string question mark question mark so that's",
    "start": "2869460",
    "end": "2874900"
  },
  {
    "text": "generic constraints there are oddities as soon as you start using generics you will you'll want to think about these",
    "start": "2874900",
    "end": "2881260"
  },
  {
    "text": "constraints because you'll have things like default of t and you need to be",
    "start": "2881260",
    "end": "2886750"
  },
  {
    "text": "aware that that might not be a t because if it's non nullable you get null",
    "start": "2886750",
    "end": "2893160"
  },
  {
    "start": "2890000",
    "end": "3040000"
  },
  {
    "text": "finally i have one minute and i will",
    "start": "2893160",
    "end": "2898390"
  },
  {
    "text": "just mention the other options i've shown that we can enable or disable",
    "start": "2898390",
    "end": "2904320"
  },
  {
    "text": "novel originally these were just true and false but there are other options as well you can have annotations I believe",
    "start": "2904320",
    "end": "2913510"
  },
  {
    "text": "that's valid and warnings and that's because null ability has effectively",
    "start": "2913510",
    "end": "2920500"
  },
  {
    "text": "been and implemented as two different aspects one is am I allowed to use the",
    "start": "2920500",
    "end": "2926380"
  },
  {
    "text": "new sink tax the the damnit operator and the question marks and stuff and that's called the annotation side and you can",
    "start": "2926380",
    "end": "2933550"
  },
  {
    "text": "have that on kind of alarmingly without the warnings part so here is annotated",
    "start": "2933550",
    "end": "2940630"
  },
  {
    "text": "code that is going to go bang no warnings nothing and I've explicitly said disable",
    "start": "2940630",
    "end": "2946660"
  },
  {
    "text": "warnings enable annotations so all of this you can do on just a region or in",
    "start": "2946660",
    "end": "2952780"
  },
  {
    "text": "the the overall project file and you can have the opposite thing where you're not",
    "start": "2952780",
    "end": "2958000"
  },
  {
    "text": "allowed to say that it might be null but you can still do it you can still get",
    "start": "2958000",
    "end": "2966490"
  },
  {
    "text": "warnings I'd expected to get warnings oh yes if I put if I copy this line of code here then yes we get a warning saying",
    "start": "2966490",
    "end": "2977230"
  },
  {
    "text": "whoa you're dereferencing something that might be null and I think we'd still get",
    "start": "2977230",
    "end": "2982660"
  },
  {
    "text": "it up here as well because we haven't checked yet that it isn't null nope I",
    "start": "2982660",
    "end": "2988570"
  },
  {
    "text": "near ate this code yesterday I haven't been experimenting with it as much but this this annotations",
    "start": "2988570",
    "end": "2994329"
  },
  {
    "text": "the warnings only without annotations or annotations only without warnings are a little odd situations so I'm 35 seconds",
    "start": "2994329",
    "end": "3002549"
  },
  {
    "text": "over time already thank you for all the questions that I couldn't get so I'm really sorry about that I will hang around here as long as I don't get",
    "start": "3002549",
    "end": "3008039"
  },
  {
    "text": "booted out so come and talk to me in person so things to take away this is primarily",
    "start": "3008039",
    "end": "3013259"
  },
  {
    "text": "so that your code can express itself better the il that is generated by",
    "start": "3013259",
    "end": "3019309"
  },
  {
    "text": "turning on nullable reference types doesn't change the behavior of your code",
    "start": "3019309",
    "end": "3024839"
  },
  {
    "text": "it just changes what's attributed expect loads of warnings and go through and fix them as an iterative process and we can",
    "start": "3024839",
    "end": "3031799"
  },
  {
    "text": "and must do better on diversity thank you very much [Applause]",
    "start": "3031799",
    "end": "3041359"
  }
]