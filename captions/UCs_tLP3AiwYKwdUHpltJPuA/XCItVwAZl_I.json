[
  {
    "start": "0",
    "end": "258000"
  },
  {
    "text": "[Music] what I'm going to be talking about today",
    "start": "6990",
    "end": "12480"
  },
  {
    "text": "is spring cloud and obviously as uh we could just see with the show of hands a lot of you will have already seen Josh's",
    "start": "12480",
    "end": "19160"
  },
  {
    "text": "talk and I was actually counting on that and you can also Imagine probably that a little bit challenging to follow up Josh",
    "start": "19160",
    "end": "26359"
  },
  {
    "text": "long to talk a little bit more about spring cloud after what you've seen already so um what am I going to talk",
    "start": "26359",
    "end": "33800"
  },
  {
    "text": "about today well I'm going to very quickly uh cover the idea of spring Cloud but then I'm actually going to",
    "start": "33800",
    "end": "39920"
  },
  {
    "text": "dive into some details on how some of the stuff that you've just seen demo how it actually works why it works that way",
    "start": "39920",
    "end": "47600"
  },
  {
    "text": "and how you could apply it to your own projects so in essence when you're talking about spring Cloud what it is",
    "start": "47600",
    "end": "53640"
  },
  {
    "text": "it's really a set of projects it's not a single project it's a whole collection and actually it's only becoming more and",
    "start": "53640",
    "end": "59640"
  },
  {
    "text": "more with every major release Trin uh that will help you to build distributed",
    "start": "59640",
    "end": "65040"
  },
  {
    "text": "systems and these can be distributed systems of any sort and any type of nature right obviously lots of people",
    "start": "65040",
    "end": "72439"
  },
  {
    "text": "will be using this and thinking about this in terms of micro services and that's definitely one of the more",
    "start": "72439",
    "end": "78600"
  },
  {
    "text": "obvious use cases um but uh it doesn't have to be something that necessarily runs in a cloud for example thisp the",
    "start": "78600",
    "end": "85240"
  },
  {
    "text": "name spring Cloud um it you even have new terms coming up like the guy from inq calling things like self uh",
    "start": "85240",
    "end": "92920"
  },
  {
    "text": "self-contained systems um those are all use cases where you",
    "start": "92920",
    "end": "98479"
  },
  {
    "text": "could use some of the stuff uh like spring Cloud even if you have a big fat monolith sitting inside of your",
    "start": "98479",
    "end": "104759"
  },
  {
    "text": "organization but it's calling out to external systems right over the Internet maybe you're partnering with other",
    "start": "104759",
    "end": "110040"
  },
  {
    "text": "organizations you need to consume some of their restful services for example you can use spring Cloud for systems",
    "start": "110040",
    "end": "116479"
  },
  {
    "text": "like that so what do I want to cover today well for those of you who did not",
    "start": "116479",
    "end": "122200"
  },
  {
    "text": "attend um joses Talk um basically my agenda is thinking as a service as a",
    "start": "122200",
    "end": "130640"
  },
  {
    "text": "spring Cloud application uh I'm going to answer three questions um so from a Services point of view the first",
    "start": "130640",
    "end": "136519"
  },
  {
    "text": "question I will I will answer is who am I right service wakes up it's being bootstrapped bootstrapped and it needs",
    "start": "136519",
    "end": "142840"
  },
  {
    "text": "to know who it is that may sound a bit weird who am I but what I mostly mean is who am I this time because you can have",
    "start": "142840",
    "end": "150040"
  },
  {
    "text": "have the same service running in very different configurations you might have multiple instances of it running in the",
    "start": "150040",
    "end": "156879"
  },
  {
    "text": "same environment you might actually have it running over different environments you may have it running locally on your",
    "start": "156879",
    "end": "162440"
  },
  {
    "text": "laptop because you're developing uh and we're going to talk a little bit about how you can find that out and how you",
    "start": "162440",
    "end": "168159"
  },
  {
    "text": "can then do different things depending on who you are and the next thing it needs to know since it's a connected",
    "start": "168159",
    "end": "173920"
  },
  {
    "text": "service right we're talking about distributed systems is where are all the other services what services are there",
    "start": "173920",
    "end": "180680"
  },
  {
    "text": "where can I find them how can I talk to them basically right so that's the last",
    "start": "180680",
    "end": "186519"
  },
  {
    "text": "Point how do I talk to them there are multiple ways typically in a distributed application to have Services communicate",
    "start": "186519",
    "end": "193280"
  },
  {
    "text": "with each other um to primary ways or sync and async and I'm going to talk a little bit about those things for those",
    "start": "193280",
    "end": "200840"
  },
  {
    "text": "of you that did see Josh's talk I made a separate agenda actually basically I'm",
    "start": "200840",
    "end": "206959"
  },
  {
    "text": "going to talk about what the hell just happened right this is a guy who's going really fast showing you everything there",
    "start": "206959",
    "end": "213080"
  },
  {
    "text": "is in the kitchen sink called Spring Cloud but by uh by intent not explaining",
    "start": "213080",
    "end": "218519"
  },
  {
    "text": "a lot about it so hopefully after this talk if you were there as well you'll understand a little bit more uh about",
    "start": "218519",
    "end": "223920"
  },
  {
    "text": "how this stuff actually works so to start with that first question that I posed like who am I this time what we're",
    "start": "223920",
    "end": "230480"
  },
  {
    "text": "really talking about here is centralized configuration right every application uh",
    "start": "230480",
    "end": "236680"
  },
  {
    "text": "being it a microservice or not or being a big monolith need some form of configuration at startup and if you've",
    "start": "236680",
    "end": "244159"
  },
  {
    "text": "been working with spring for a while then probably uh the traditional way that you've been doing is is through something like a properties file that",
    "start": "244159",
    "end": "250519"
  },
  {
    "text": "you uh put maybe on your class path or next to your application somewhere on the file system and you read it from",
    "start": "250519",
    "end": "256400"
  },
  {
    "text": "there um when we're talking about distributed systems and we're talking about multiple instances of applications",
    "start": "256400",
    "end": "264000"
  },
  {
    "start": "258000",
    "end": "400000"
  },
  {
    "text": "running then actually uh in many cases um you will",
    "start": "264000",
    "end": "271720"
  },
  {
    "text": "let's try that again um in many cases what you will want is you will want to take that configuration away from just",
    "start": "275680",
    "end": "282199"
  },
  {
    "text": "the local file system of a single service for example and you will want to put it somewhere centrally so this is uh",
    "start": "282199",
    "end": "289320"
  },
  {
    "text": "for multiple reasons one of the reasons is that if you have something like 10 different instances just for",
    "start": "289320",
    "end": "294759"
  },
  {
    "text": "availability reasons of your service you don't really want to copy over the same",
    "start": "294759",
    "end": "300759"
  },
  {
    "text": "configuration file to 10 different servers to make sure that when your application starts up it can actually",
    "start": "300759",
    "end": "306199"
  },
  {
    "text": "find the correct configuration for that particular environment that it's running in another thing is that configuration",
    "start": "306199",
    "end": "312919"
  },
  {
    "text": "may not actually be specific to a single application you might have some shared",
    "start": "312919",
    "end": "318000"
  },
  {
    "text": "configuration for a number of reasons um simple example even though it's best",
    "start": "318000",
    "end": "324199"
  },
  {
    "text": "practice to have microservices use uh have their own database that may not actually mean that they're all going to",
    "start": "324199",
    "end": "330919"
  },
  {
    "text": "have their own dbms instance running right companies typically spend a lot of money on buying good Hardware with lots",
    "start": "330919",
    "end": "338479"
  },
  {
    "text": "of fast discs and lots of memory to run their databases so you probably just want to have a dedicated schema in there",
    "start": "338479",
    "end": "345400"
  },
  {
    "text": "so you're going to end up in case you have a lot of data heavy services with lots of applications that need to",
    "start": "345400",
    "end": "350960"
  },
  {
    "text": "connect to your database now I've actually had the case in one of the applications that I'm working on where we don't have this stuff in place yet um",
    "start": "350960",
    "end": "358720"
  },
  {
    "text": "where our hosting company said well you know we made you happy and rather than having the old boxes in there for my SQL",
    "start": "358720",
    "end": "365759"
  },
  {
    "text": "we're running an active active setup of my SQL there uh we have replaced the whole thing with bare metal boxes uh",
    "start": "365759",
    "end": "372919"
  },
  {
    "text": "very fast uh lots of RAM and this is new IP addresses and what I had to do I had",
    "start": "372919",
    "end": "378759"
  },
  {
    "text": "to log in in like a dozen services and I think I changed over two dozen configuration files for all of the",
    "start": "378759",
    "end": "384479"
  },
  {
    "text": "various applications Chrome jobs scripts uh things that we had running that",
    "start": "384479",
    "end": "390160"
  },
  {
    "text": "needed to somehow connect to the database right so it makes a lot of sense for all of those cases to say well",
    "start": "390160",
    "end": "396000"
  },
  {
    "text": "let's just put that in a single place and when it changes we can let everyone know",
    "start": "396000",
    "end": "402319"
  },
  {
    "start": "400000",
    "end": "1180000"
  },
  {
    "text": "um so um the same thing obviously is true for running in different environments right on an acceptance",
    "start": "402319",
    "end": "408319"
  },
  {
    "text": "environment or when you're running locally on your machine you're probably going to have some different requirements uh than you have when",
    "start": "408319",
    "end": "414360"
  },
  {
    "text": "you're running in production you might even have Services running through a special spring profile for example where",
    "start": "414360",
    "end": "420319"
  },
  {
    "text": "you want dedicated configuration there and finally if your configuration does",
    "start": "420319",
    "end": "425400"
  },
  {
    "text": "change then what are you going to do typically if you're using something like a properties file with spring uh it",
    "start": "425400",
    "end": "431400"
  },
  {
    "text": "actually you're forced to just restart the whole application when configuration changes so that would mean that even if you have Central configuration but only",
    "start": "431400",
    "end": "438240"
  },
  {
    "text": "that that you would still need to know okay I changed this one configuration key now I have to know which",
    "start": "438240",
    "end": "444000"
  },
  {
    "text": "applications are actually relying on that key and I have to find those instances and I have to manually restart",
    "start": "444000",
    "end": "449240"
  },
  {
    "text": "and so it would also be nice to be able to push out configuration updates back to the services right so springcloud has",
    "start": "449240",
    "end": "457960"
  },
  {
    "text": "support for this and they have support in two ways they actually provide a product uh that you can use as a",
    "start": "457960",
    "end": "463840"
  },
  {
    "text": "centralized configuration server this is called springcloud config server and Josh briefly demoed it in his previous",
    "start": "463840",
    "end": "470080"
  },
  {
    "text": "talk um but they also have an abstraction for clients that connect to such a configuration service and",
    "start": "470080",
    "end": "476759"
  },
  {
    "text": "springcloud config server is not the only service that is supported uh there are a couple of other ones actually so",
    "start": "476759",
    "end": "483560"
  },
  {
    "text": "um I'll be demoing if uh if it actually works because like I said my computer just crashed I have no idea what is",
    "start": "483560",
    "end": "489720"
  },
  {
    "text": "still on my file system and what isn't so we'll have a look uh but I'm going to demo that through another product of a",
    "start": "489720",
    "end": "495639"
  },
  {
    "text": "company called Hashi Corp um called console right they make a number of free tools that are very popular in the cloud",
    "start": "495639",
    "end": "502759"
  },
  {
    "text": "and services space um so to first start with",
    "start": "502759",
    "end": "507960"
  },
  {
    "text": "that console um I'm just going to start it up locally",
    "start": "507960",
    "end": "513120"
  },
  {
    "text": "here um this thing can actually be uh configured to expose a user",
    "start": "513120",
    "end": "519599"
  },
  {
    "text": "interface and that's going to start up right",
    "start": "519599",
    "end": "523959"
  },
  {
    "text": "now there we go it's a bit too small so it's switching to mobile view there we",
    "start": "528839",
    "end": "534680"
  },
  {
    "text": "go um so what you see here is an overview I have some services but actually my services are not not running",
    "start": "534680",
    "end": "540200"
  },
  {
    "text": "yet so that's why you see a bunch of orange things here but I'll talk about that later on but here we actually have key value pairs um this is literally key",
    "start": "540200",
    "end": "550079"
  },
  {
    "text": "value pairs that you can simply store inside of console and that you can then expose so what do I have here I have",
    "start": "550079",
    "end": "556079"
  },
  {
    "text": "like a directory uh called config and under that I have a bunch of",
    "start": "556079",
    "end": "561399"
  },
  {
    "text": "subdirectories um corresponding to a number of applications that I have plus",
    "start": "561399",
    "end": "566880"
  },
  {
    "text": "one extra that is simply called application which is for configuration that applies to all services right so if",
    "start": "566880",
    "end": "573440"
  },
  {
    "text": "we have a look here at application you can for example see that I have a key configured called login. pattern.",
    "start": "573440",
    "end": "579120"
  },
  {
    "text": "console where I where I'm changing the default logging pattern that is uh that is used by",
    "start": "579120",
    "end": "586440"
  },
  {
    "text": "Spring boots for producing it logging output when it's writing to the console",
    "start": "586440",
    "end": "591720"
  },
  {
    "text": "um also for a service that I'm about to",
    "start": "591720",
    "end": "597160"
  },
  {
    "text": "start uh I've actually changed the default log level you can do these sort of things with spring boot quite",
    "start": "597160",
    "end": "605040"
  },
  {
    "text": "easily",
    "start": "606839",
    "end": "609839"
  },
  {
    "text": "yeah this should be it right okay um so that's the server side of things this is",
    "start": "615920",
    "end": "622920"
  },
  {
    "text": "where we can put our configuration now how do we actually access this from an application now I thought about doing",
    "start": "622920",
    "end": "629120"
  },
  {
    "text": "something some live coding actually now I'm really glad that I didn't do that but in anyways following up on Josh Long",
    "start": "629120",
    "end": "635160"
  },
  {
    "text": "Live coding is not going to be impressive anyways so I have some code set up here um I have a service that",
    "start": "635160",
    "end": "641600"
  },
  {
    "text": "will expose uh conference talks right because we're in a conference and uh we",
    "start": "641600",
    "end": "646760"
  },
  {
    "text": "actually have some internal applications that do these sort of things so what I have here is a simple spring boot",
    "start": "646760",
    "end": "653399"
  },
  {
    "text": "application um and the application um basically just uh",
    "start": "653399",
    "end": "659560"
  },
  {
    "text": "shows a number of talks from this particular track exposed as restful resources right there's a simple",
    "start": "659560",
    "end": "665680"
  },
  {
    "text": "controller for that doing that I'm not going to go over the entire code because it's not actually all that interesting",
    "start": "665680",
    "end": "670880"
  },
  {
    "text": "um the thing that's interesting first of all is when we go to the maven pal here",
    "start": "670880",
    "end": "676079"
  },
  {
    "text": "and look at the dependencies that this thing has now apart from just a regular boot uh configuration you can see this",
    "start": "676079",
    "end": "682279"
  },
  {
    "text": "thing spring Cloud starter console all this means I want all of the console",
    "start": "682279",
    "end": "688040"
  },
  {
    "text": "support provided by by Spring Cloud so what is that well if I click through on that you can see it's actually two",
    "start": "688040",
    "end": "693399"
  },
  {
    "text": "things it's spring Cloud starter console uh config and starter console Discovery",
    "start": "693399",
    "end": "699519"
  },
  {
    "text": "so this thing is about the config part simply by putting this on my class path",
    "start": "699519",
    "end": "704959"
  },
  {
    "text": "at startup it will discover that we need to connect to a console server for",
    "start": "704959",
    "end": "710720"
  },
  {
    "text": "configuration purposes question is how does it know how to connect to console right it cannot actually get the configuration from that from console",
    "start": "710720",
    "end": "717480"
  },
  {
    "text": "this is a bootstrap problem and um as Josh actually uh showed already during his talk uh there is a mechanism for",
    "start": "717480",
    "end": "723720"
  },
  {
    "text": "this in Spring Cloud where next to an application properties file you can actually have a bootstrap properties",
    "start": "723720",
    "end": "729839"
  },
  {
    "text": "file and typically you configure this with two things you configure a name for the application so that it knows for",
    "start": "729839",
    "end": "736680"
  },
  {
    "text": "example what to ask for from the configuration server and you configure it with the actual location of the",
    "start": "736680",
    "end": "743240"
  },
  {
    "text": "configuration service now in a cloud environment of of sorts you would probably get this from an environment",
    "start": "743240",
    "end": "748680"
  },
  {
    "text": "variable so that's why you have the config server URL there that could come from a system property or an environment",
    "start": "748680",
    "end": "754079"
  },
  {
    "text": "variable but I'm having a fallback here as a default which is just uh the console running here on Local Host so um",
    "start": "754079",
    "end": "762560"
  },
  {
    "text": "what I'm going to do over here is uh I'm going to uh start the",
    "start": "762560",
    "end": "769519"
  },
  {
    "text": "application uh like this now the reason I'm doing it here",
    "start": "769519",
    "end": "775160"
  },
  {
    "text": "from the uh command line is that later on I want to actually have a second instance run next to it in two consoles",
    "start": "775160",
    "end": "781079"
  },
  {
    "text": "and I want to show you some output of that um hopefully what this will do is",
    "start": "781079",
    "end": "787040"
  },
  {
    "text": "uh it startup it will find the bootstrap properties configuration it will connect to console uh it will then find its",
    "start": "787040",
    "end": "793639"
  },
  {
    "text": "configuration and then using that configuration it will bootstrap the rest of the spring",
    "start": "793639",
    "end": "799600"
  },
  {
    "text": "application so let's make it a bit bigger here we go so the first thing",
    "start": "799600",
    "end": "806120"
  },
  {
    "text": "that's happening is uh it's just uh using to start up the application I'll make this a bit",
    "start": "806120",
    "end": "813040"
  },
  {
    "text": "bigger uh this is bigger yes thank you very much so we see a number of things",
    "start": "816360",
    "end": "822600"
  },
  {
    "text": "happening here I'm sorry yeah it's responding really slowly so when I'm thinking I'm making it bigger it's",
    "start": "822600",
    "end": "827760"
  },
  {
    "text": "actually becoming smaller there we go that's better um we see a number of interesting things here happening there",
    "start": "827760",
    "end": "832800"
  },
  {
    "text": "is a custom boot logo here I I didn't just put that in because it looks so nice I'm actually putting that in to",
    "start": "832800",
    "end": "838480"
  },
  {
    "text": "make a point later on um and then we see it starting up um if you look very",
    "start": "838480",
    "end": "843800"
  },
  {
    "text": "carefully you can actually see that the logging is in uh has changed uh there is",
    "start": "843800",
    "end": "848959"
  },
  {
    "text": "no date in front there is only uh the time stamp here and that is because it's getting its logging pattern from this",
    "start": "848959",
    "end": "856079"
  },
  {
    "text": "remote configuration server so okay you",
    "start": "856079",
    "end": "861120"
  },
  {
    "text": "have to believe me now that this work so how would you actually no this right what what is actually happening here when we do this so one of the things",
    "start": "861120",
    "end": "868560"
  },
  {
    "text": "that you can do with spring boot application is you can expose these actuator endpoints and this thing is",
    "start": "868560",
    "end": "875360"
  },
  {
    "text": "exposing an environment actuator endpoint that will actually show uh all of the uh settings that it has oh I",
    "start": "875360",
    "end": "882079"
  },
  {
    "text": "missed an a there I'm sorry so um closing some of",
    "start": "882079",
    "end": "889240"
  },
  {
    "text": "this here what you can see here is that we actually have different uh",
    "start": "889240",
    "end": "895759"
  },
  {
    "text": "configuration sets here these things are called property sources in spring so at",
    "start": "895759",
    "end": "900880"
  },
  {
    "text": "the top we can see that uh I have some local configuration for my server Port that's actually coming from my uh my",
    "start": "900880",
    "end": "907920"
  },
  {
    "text": "application. properties file then you can see there is a console based config Talk service one that sets my debug",
    "start": "907920",
    "end": "915120"
  },
  {
    "text": "level um then you see there is another one config application uh to override",
    "start": "915120",
    "end": "920399"
  },
  {
    "text": "that logging pattern um then there are also the configurations that uh the",
    "start": "920399",
    "end": "926160"
  },
  {
    "text": "application can read from the system properties Java system properties as well as the environment and then finally",
    "start": "926160",
    "end": "932199"
  },
  {
    "text": "you see some local uh uh data sources as well so these things are ordered actually so this will tell you exactly",
    "start": "932199",
    "end": "939279"
  },
  {
    "text": "what configuration your application is using first of all but also where it's getting it from right so that's an an",
    "start": "939279",
    "end": "945759"
  },
  {
    "text": "important concept now another thing that's interesting um I had a browser",
    "start": "945759",
    "end": "952000"
  },
  {
    "text": "tab open for that but obviously everything crashed so I'm just going to tell you um I talked about um",
    "start": "952000",
    "end": "959800"
  },
  {
    "text": "refreshing and pushing out updates right if you were now to look at the latest documentation of spring cloud and you",
    "start": "959800",
    "end": "966560"
  },
  {
    "text": "check out the console support it actually says console has a really nice",
    "start": "966560",
    "end": "971680"
  },
  {
    "text": "hook that you can use to be informed about configuration updates but unfortunately we don't support it yet",
    "start": "971680",
    "end": "978519"
  },
  {
    "text": "this will come in a future version now you may have heard the expression of um",
    "start": "978519",
    "end": "983720"
  },
  {
    "text": "uh under promise and overd deliver that seems to be exactly what they did when they wrote this documentation it does",
    "start": "983720",
    "end": "989120"
  },
  {
    "text": "actually work um so let me quickly show you that if I go over",
    "start": "989120",
    "end": "995279"
  },
  {
    "text": "here and I change this log level here for example to info and I update I can go",
    "start": "995279",
    "end": "1004399"
  },
  {
    "text": "here and actually when I scroll down a bit here",
    "start": "1004399",
    "end": "1010959"
  },
  {
    "text": "then what you can see here uh maybe a bit hard to read but I'll just tell you here is an application context is being",
    "start": "1010959",
    "end": "1017839"
  },
  {
    "text": "closed and started again and we see refresh Keys changed login. level. talk",
    "start": "1017839",
    "end": "1024120"
  },
  {
    "text": "so this application does know that the configuration changed and it's reconfiguring itself now the final thing",
    "start": "1024120",
    "end": "1030038"
  },
  {
    "text": "I wanted to explain in a little bit more detail here is how does this even work right because if you are used to Spring",
    "start": "1030039",
    "end": "1037240"
  },
  {
    "text": "applications but you haven't worked with this then you probably know that typically when you when you've read",
    "start": "1037240",
    "end": "1042600"
  },
  {
    "text": "something like a properties file at startup that's it right these things are just cached in memory and the the only",
    "start": "1042600",
    "end": "1048038"
  },
  {
    "text": "thing you can do to refresh a configuration is to just restart the entire application so they use a little trick for this um and that's also why",
    "start": "1048039",
    "end": "1054760"
  },
  {
    "text": "you have the dedicated bootstrap properties file basically what will happen with a spring cloud-based",
    "start": "1054760",
    "end": "1059919"
  },
  {
    "text": "application is when you start it up it creates a separate application context so it's like a little spring application",
    "start": "1059919",
    "end": "1065640"
  },
  {
    "text": "inside of your application and this thing is only responsible for uh basically going out to the configuration",
    "start": "1065640",
    "end": "1071840"
  },
  {
    "text": "server getting all of that configuration and creating custom property sources and when that's done your usual spring boot",
    "start": "1071840",
    "end": "1078120"
  },
  {
    "text": "application starts up with its own application context which has a reference to this cloud-based root",
    "start": "1078120",
    "end": "1084600"
  },
  {
    "text": "context and when stuff changes like you're seeing here that that ultimate",
    "start": "1084600",
    "end": "1089799"
  },
  {
    "text": "cloud-based application context is being recreated so it's not the entire application that's being restarted it's",
    "start": "1089799",
    "end": "1096159"
  },
  {
    "text": "only that part of the application context in addition to that but Josh already showed that so I'm not going to",
    "start": "1096159",
    "end": "1102400"
  },
  {
    "text": "do it again you can annotate your beans with at refresh scope and you can actually have objects in application",
    "start": "1102400",
    "end": "1109559"
  },
  {
    "text": "being restarted as well if they rely on certain configuration properties that you would like to be able to change at",
    "start": "1109559",
    "end": "1116640"
  },
  {
    "text": "runtime now there's some other stuff you can do um for demo purposes like this it's actually nice to have individual",
    "start": "1116640",
    "end": "1123000"
  },
  {
    "text": "key value pairs in console if you have really big applications that take like 50 properties that's not really going to",
    "start": "1123000",
    "end": "1129000"
  },
  {
    "text": "scale so you can actually tell this thing I just want to have a single key value pair for every application where",
    "start": "1129000",
    "end": "1134600"
  },
  {
    "text": "the value is just going to be the contents of a properties file or a ml file right those things are fully",
    "start": "1134600",
    "end": "1140360"
  },
  {
    "text": "supported you can even have your configuration in git and run a script called git to console that will actually",
    "start": "1140360",
    "end": "1146360"
  },
  {
    "text": "export all of that configuration and load it up into console which I think makes perfect sense right because",
    "start": "1146360",
    "end": "1151840"
  },
  {
    "text": "configuration is definitely something you will want to put inv verion control",
    "start": "1151840",
    "end": "1157120"
  },
  {
    "text": "so even though I'm not actually showing it these things are fully supported so that's the configuration",
    "start": "1157120",
    "end": "1165280"
  },
  {
    "text": "part then so that's nice now we can start up we know who we are where are the other ones and for those of you that",
    "start": "1165280",
    "end": "1171240"
  },
  {
    "text": "were at J's talk uh you've probably seen already that uh spring Cloud supports the notion of a service registry so",
    "start": "1171240",
    "end": "1179880"
  },
  {
    "text": "what's the idea there with the service registry well uh obviously when you're actually building a distributed system",
    "start": "1179880",
    "end": "1185640"
  },
  {
    "start": "1180000",
    "end": "1604000"
  },
  {
    "text": "uh is distributed because these things are not Islands by themselves right they need to communicate with each other so",
    "start": "1185640",
    "end": "1192559"
  },
  {
    "text": "uh the first thing a service needs to do when it starts up and it has its configuration it needs to advertise its presence it needs to tell the World hey",
    "start": "1192559",
    "end": "1199720"
  },
  {
    "text": "I'm here this is my name this is where you can find me um and even things like",
    "start": "1199720",
    "end": "1205480"
  },
  {
    "text": "this is where you can check if I'm doing okay then obviously as a client it also",
    "start": "1205480",
    "end": "1210840"
  },
  {
    "text": "needs to find out where all of the other services are that it wants to connect with now you may use something like DNS",
    "start": "1210840",
    "end": "1218080"
  },
  {
    "text": "for that and for a particular certain use case that actually works really well right I don't really have to know where",
    "start": "1218080",
    "end": "1223480"
  },
  {
    "text": "other services are I just need to know their logical DNS name and there will be something that then provides with an",
    "start": "1223480",
    "end": "1229520"
  },
  {
    "text": "actual IP address and and stuff like that but there are a lot of use cases for which that doesn't really work um",
    "start": "1229520",
    "end": "1236200"
  },
  {
    "text": "one obvious use case and again just mentioned this in passing is that uh",
    "start": "1236200",
    "end": "1241840"
  },
  {
    "text": "when you're um finding out that there are multiple instances of a single service and you want to talk with one of",
    "start": "1241840",
    "end": "1247080"
  },
  {
    "text": "them you may want to choose which instance you're talking to yourself rather than living that up to some",
    "start": "1247080",
    "end": "1252960"
  },
  {
    "text": "middleware based load balancer that you have absolutely zero control over Netflix actually uses this for example",
    "start": "1252960",
    "end": "1258600"
  },
  {
    "text": "example to find out which of the service instances uh that are reachable are um",
    "start": "1258600",
    "end": "1265200"
  },
  {
    "text": "the fastest to talk to which have the lowest latency a load balancer doesn't know that because a load balancer",
    "start": "1265200",
    "end": "1270799"
  },
  {
    "text": "doesn't talk to the service itself it's your client who is talking to a service and there may be all sorts of things",
    "start": "1270799",
    "end": "1275919"
  },
  {
    "text": "happening especially in cloud-based environments that cause that to be slower or faster so if you can actually",
    "start": "1275919",
    "end": "1281080"
  },
  {
    "text": "measure how fast you can connect to a service then you are in the best position to actually make that choice",
    "start": "1281080",
    "end": "1287960"
  },
  {
    "text": "right so in that case you need a complete overview of all of the services that are there um from an operations",
    "start": "1287960",
    "end": "1293960"
  },
  {
    "text": "point of view also it's important to have an overview of what services are actually there and are those the",
    "start": "1293960",
    "end": "1299039"
  },
  {
    "text": "services that we expect to be there or is there stuff missing and if a service is there how do we actually check that",
    "start": "1299039",
    "end": "1305120"
  },
  {
    "text": "it's running successfully that it's completely operational that it can talk to its middleware like its database like",
    "start": "1305120",
    "end": "1311279"
  },
  {
    "text": "its message broker that sort of thing so that's Health checking basically and with a service registry whenever a",
    "start": "1311279",
    "end": "1317200"
  },
  {
    "text": "service registers itself it actually talk to the service register and say oh by the way this is how you can check if",
    "start": "1317200",
    "end": "1323240"
  },
  {
    "text": "I'm doing okay right so that's that's handy now Netflix has actually open",
    "start": "1323240",
    "end": "1329880"
  },
  {
    "text": "sourced their service registry which is called jica um just demoed it so I'm not",
    "start": "1329880",
    "end": "1335000"
  },
  {
    "text": "going to do that again but uh if you want to run Eureka the most convenient way to do that is through a special",
    "start": "1335000",
    "end": "1341000"
  },
  {
    "text": "starter that uh spring Cloud provides and then you can just run it as a spring boot application basically obviously you",
    "start": "1341000",
    "end": "1347000"
  },
  {
    "text": "should be running these things with multiple instances because it needs to be highly available but the um the",
    "start": "1347000",
    "end": "1352520"
  },
  {
    "text": "console product I just demoed uh is actually also a service regory so you can have both your configuration and",
    "start": "1352520",
    "end": "1358520"
  },
  {
    "text": "your services in a single place so to have a quick look at that um if I",
    "start": "1358520",
    "end": "1364120"
  },
  {
    "text": "currently go here I can actually see already that uh",
    "start": "1364120",
    "end": "1370480"
  },
  {
    "text": "I have an overview here uh but some things seem to be not so okay now that",
    "start": "1370480",
    "end": "1376320"
  },
  {
    "text": "is because this thing is actually remembering what Services were running before it shut down now everything shut",
    "start": "1376320",
    "end": "1382559"
  },
  {
    "text": "down in let's say a not so very clean way just now on my computer so it says I",
    "start": "1382559",
    "end": "1387679"
  },
  {
    "text": "have these Services they they said that they would be here they've never officially said to me I'm going away uh",
    "start": "1387679",
    "end": "1394039"
  },
  {
    "text": "but they're not there so I'm getting failures which in this case is a good thing right I know that certain services",
    "start": "1394039",
    "end": "1399600"
  },
  {
    "text": "are not running you can see that here I'm actually supposed to have two instances of this particular service",
    "start": "1399600",
    "end": "1406880"
  },
  {
    "text": "running here what you can see is one of the services that is",
    "start": "1406880",
    "end": "1412120"
  },
  {
    "text": "running why is that not working here we go one of the services that's running is",
    "start": "1412120",
    "end": "1417400"
  },
  {
    "text": "uh on Port 881 skip that um and that's okay that's green but the other one uh",
    "start": "1417400",
    "end": "1423640"
  },
  {
    "text": "on Port 882 is currently failing now let me fix that for you uh what I'm going to",
    "start": "1423640",
    "end": "1429840"
  },
  {
    "text": "do here is I'm going to start up another instance but I'm going to say uh server.",
    "start": "1429840",
    "end": "1437080"
  },
  {
    "text": "Port equal equals 882 and then say spring boot run and in",
    "start": "1437080",
    "end": "1444600"
  },
  {
    "text": "my ID here in the same time I'm going to start up some other services because what I've been doing is I've I've wrote",
    "start": "1444600",
    "end": "1450320"
  },
  {
    "text": "a very small sample application by the way I'll put a URL to the source code on",
    "start": "1450320",
    "end": "1455840"
  },
  {
    "text": "Twitter after the talk so you can download the code as well um that will",
    "start": "1455840",
    "end": "1461120"
  },
  {
    "text": "simply bootstrap a number of services that's one and that's one",
    "start": "1461120",
    "end": "1469639"
  },
  {
    "text": "there we go it's a bit sluggish but it will be there in a",
    "start": "1472399",
    "end": "1478520"
  },
  {
    "text": "second now while it's doing that um going back",
    "start": "1478520",
    "end": "1486559"
  },
  {
    "text": "here you can see this one's still failing",
    "start": "1489120",
    "end": "1494320"
  },
  {
    "text": "uh yeah it should be up in a moment let's see if this this is going okay yep that's working",
    "start": "1494520",
    "end": "1501200"
  },
  {
    "text": "fine this is running yeah it's just a bit slow so just to get ahead of myself a",
    "start": "1501200",
    "end": "1508880"
  },
  {
    "text": "little bit and make the demo go a bit more fluent um I said that uh these Services can register health check",
    "start": "1508880",
    "end": "1516120"
  },
  {
    "text": "endpoint so that's how console actually knows if my service is there it's going to talk to an endpoint um I can show you",
    "start": "1516120",
    "end": "1523080"
  },
  {
    "text": "for my endpoint that's already up and running what that looks like so that's the SL Health endpoint by default and",
    "start": "1523080",
    "end": "1528120"
  },
  {
    "text": "this is this is provided by Spring boot right so what you see here is that first of all my service is actually saying I'm",
    "start": "1528120",
    "end": "1534240"
  },
  {
    "text": "up that's the key thing here the service itself is expressing the fact that it's up and sending back a 200 okay with this",
    "start": "1534240",
    "end": "1540200"
  },
  {
    "text": "Json response uh but it's also showing you some of the things it did to check that so it's not just saying I'm here",
    "start": "1540200",
    "end": "1546640"
  },
  {
    "text": "it's actually checking some of its own dependencies as well so it's it has automatically received a database check because I'm using an memory database um",
    "start": "1546640",
    "end": "1554279"
  },
  {
    "text": "uh it it actually is going to check if it can talk to console right because this is if this is a client to your",
    "start": "1554279",
    "end": "1559799"
  },
  {
    "text": "service registry well it it better be able to talk to that service registry um it better have dis space left running on",
    "start": "1559799",
    "end": "1566960"
  },
  {
    "text": "the device that you're on right so those are some of the checks as you can see here uh that are automatically provided",
    "start": "1566960",
    "end": "1573200"
  },
  {
    "text": "there now that seems to be going in the right",
    "start": "1573200",
    "end": "1579120"
  },
  {
    "text": "direction so in the meantime let me check if my demo application is already up and running there",
    "start": "1579120",
    "end": "1587720"
  },
  {
    "text": "no not yet well it will be there in a second um I'm going to show you a little bit more of that service register in a",
    "start": "1590640",
    "end": "1596799"
  },
  {
    "text": "moment in the meantime um let's talk a little bit more about what happens when we are actually registered and now we",
    "start": "1596799",
    "end": "1604440"
  },
  {
    "start": "1604000",
    "end": "1666000"
  },
  {
    "text": "want to talk to some other services right now uh in general this is not",
    "start": "1604440",
    "end": "1609720"
  },
  {
    "text": "specific to services or cloud or anything um there's two ways to modes of",
    "start": "1609720",
    "end": "1615320"
  },
  {
    "text": "interaction when it comes to um talking to to other pieces of software running",
    "start": "1615320",
    "end": "1620799"
  },
  {
    "text": "somewhere you can do it synchronously right this is typically something you would do over HTTP for example you make",
    "start": "1620799",
    "end": "1627279"
  },
  {
    "text": "a request you wait for a response to come back or um you can do it",
    "start": "1627279",
    "end": "1632399"
  },
  {
    "text": "asynchronously and this is typically done through messaging right I'm going to send the message and as soon as the",
    "start": "1632399",
    "end": "1637760"
  },
  {
    "text": "message has reached some centralized message broker I'm done I don't have to wait anymore some other service and this",
    "start": "1637760",
    "end": "1644159"
  },
  {
    "text": "could be a single service but it it could be a whole bunch of services can then process that message maybe they",
    "start": "1644159",
    "end": "1649960"
  },
  {
    "text": "want to produce a response that's okay if they want to they can send me a response back but they will again do",
    "start": "1649960",
    "end": "1655960"
  },
  {
    "text": "that on some queue and eventually I'll just pick up that message from some other queue and both are typically very",
    "start": "1655960",
    "end": "1663080"
  },
  {
    "text": "important in in an application architecture to have so synchronous like blocking communication is is often done",
    "start": "1663080",
    "end": "1669279"
  },
  {
    "start": "1666000",
    "end": "1835000"
  },
  {
    "text": "for things like queries right if I want to check a database I'm expecting a result now I I don't say I would like",
    "start": "1669279",
    "end": "1676720"
  },
  {
    "text": "you to figure that out and maybe just later on you'll get back to me with results no I actually have a user",
    "start": "1676720",
    "end": "1683080"
  },
  {
    "text": "waiting for this result so I'm going to go it immediately synchronously uh other",
    "start": "1683080",
    "end": "1689399"
  },
  {
    "text": "things like uh sending maybe a command to a service saying I want you to do something but I I'm willing to wait on",
    "start": "1689399",
    "end": "1696000"
  },
  {
    "text": "the result because the result is very important for me I need to process that somehow right now some concerns that",
    "start": "1696000",
    "end": "1701799"
  },
  {
    "text": "come into play when you're doing this is are you going to just do a block and call which is in Java at least is is the",
    "start": "1701799",
    "end": "1707919"
  },
  {
    "text": "most most obvious thing to do typically right you're just going to block your threat to make an SCP request for example and nothing will happen until uh",
    "start": "1707919",
    "end": "1715080"
  },
  {
    "text": "that has either worked out or has timed out um nowadays uh there are is a lot of",
    "start": "1715080",
    "end": "1721279"
  },
  {
    "text": "effort in actually making these sort of things non-blocking so that's the whole reactive thing now you can say whatever",
    "start": "1721279",
    "end": "1727720"
  },
  {
    "text": "you like about reactive and it's a very important thing but it's still obviously synchronous communication right don't",
    "start": "1727720",
    "end": "1733640"
  },
  {
    "text": "think that all of a sudden doing non-blocking communication makes it asynchronous those are two very",
    "start": "1733640",
    "end": "1739320"
  },
  {
    "text": "different things um some things that come into play as I said already are things like load balancing right if I'm",
    "start": "1739320",
    "end": "1744880"
  },
  {
    "text": "calling out to some service instance which one is it going to be and if that thing goes down another one goes up how do I make sure that I actually route my",
    "start": "1744880",
    "end": "1751320"
  },
  {
    "text": "request to this other instance uh the other thing and and this is typically uh",
    "start": "1751320",
    "end": "1756600"
  },
  {
    "text": "where um uh the whole robustness or rugged thing comes in is that I want to make sure that when I call something and",
    "start": "1756600",
    "end": "1763279"
  },
  {
    "text": "something is wrong then I'm not going to be affected as an application myself",
    "start": "1763279",
    "end": "1768440"
  },
  {
    "text": "right so there's a number of things there that are important obviously things like timeouts right if you're",
    "start": "1768440",
    "end": "1773880"
  },
  {
    "text": "going to connect to some external service don't wait forever for the connection to come there if you have a",
    "start": "1773880",
    "end": "1779559"
  },
  {
    "text": "connection and you actually make the request don't block Forever Until some response comes back over the socket",
    "start": "1779559",
    "end": "1785559"
  },
  {
    "text": "right you need time out for all of these things um and and in many cases it's actually much worse if a service that",
    "start": "1785559",
    "end": "1791919"
  },
  {
    "text": "you're talking to just responds really slowly rather than is simply completely unavailable because you will find that",
    "start": "1791919",
    "end": "1798360"
  },
  {
    "text": "out immediately right I'm going to try to connect immediately I'm going to get an IO exception there is no socket there",
    "start": "1798360",
    "end": "1804159"
  },
  {
    "text": "but it's much much worse if it if it actually does respond but it simply takes minutes rather than hours uh also",
    "start": "1804159",
    "end": "1810360"
  },
  {
    "text": "if something goes wrong then I cannot simply fail right I need to have some kind of way of falling back uh and I",
    "start": "1810360",
    "end": "1817440"
  },
  {
    "text": "also need to make sure that I don't I don't overload other services maybe if for whatever reason my service all of a",
    "start": "1817440",
    "end": "1823320"
  },
  {
    "text": "sudden comes under a really high load I don't simply want to push all of that load out to the rest of the system and",
    "start": "1823320",
    "end": "1828679"
  },
  {
    "text": "then maybe kill everyone in the process right I need some way to throttle that so those are some things that come into",
    "start": "1828679",
    "end": "1835000"
  },
  {
    "start": "1835000",
    "end": "1914000"
  },
  {
    "text": "play with synchronous uh inter service calls and the interesting thing is that",
    "start": "1835000",
    "end": "1840200"
  },
  {
    "text": "uh Netflix has open source another library of theirs called historics that will actually allow you to do a lot of",
    "start": "1840200",
    "end": "1845600"
  },
  {
    "text": "these things that I just mentioned so I want to show you a little bit about that some other things that they have open",
    "start": "1845600",
    "end": "1851399"
  },
  {
    "text": "source that are very much used in tandem with this are something called ribbon this is a client side load balancer",
    "start": "1851399",
    "end": "1858639"
  },
  {
    "text": "right so this is a thing where you can say I would like to make a request to a service you figure out what service",
    "start": "1858639",
    "end": "1864720"
  },
  {
    "text": "instance and it can do just trivial round robin load balancing which if the",
    "start": "1864720",
    "end": "1870360"
  },
  {
    "text": "demo Gods will allow me to I will actually show you in a moment uh but you can do fancier things as well like for",
    "start": "1870360",
    "end": "1875919"
  },
  {
    "text": "example the example I mentioned where you're doing um you're doing routing based on measured latency and that those",
    "start": "1875919",
    "end": "1882639"
  },
  {
    "text": "kind of things right it could be particular tags that are being set on request as well there's all all sort of",
    "start": "1882639",
    "end": "1888320"
  },
  {
    "text": "options there and finally but I'm not going to show you this because J did that already there is zul which is a",
    "start": "1888320",
    "end": "1895240"
  },
  {
    "text": "proxy based approach that allows you to say I have a bunch of backend services and I'd like to expose them through a",
    "start": "1895240",
    "end": "1901919"
  },
  {
    "text": "single HTTP endpoint right and that single HTTP endpoint may have some additional uh things on top like",
    "start": "1901919",
    "end": "1908720"
  },
  {
    "text": "security requirements but after that it's just going to propagate my requests to those uh backing",
    "start": "1908720",
    "end": "1914399"
  },
  {
    "start": "1914000",
    "end": "2299000"
  },
  {
    "text": "services so what I'm going to show you in historics first of all is something called a circuit breaker circuit breaker",
    "start": "1914399",
    "end": "1920120"
  },
  {
    "text": "is a pattern that says if I find out that some service that I'm talking to is not there or it's not responding",
    "start": "1920120",
    "end": "1927240"
  },
  {
    "text": "properly I'm not going to just keep on trying right I'm going to give up after a while I'm going to remember the fact",
    "start": "1927240",
    "end": "1932600"
  },
  {
    "text": "that this service was not there and then for a configurable period of time I will simply not try I will immediately fail",
    "start": "1932600",
    "end": "1939120"
  },
  {
    "text": "if someone tries to call the service and say sorry the service is currently not there then after a while I will try",
    "start": "1939120",
    "end": "1944679"
  },
  {
    "text": "again I will try once and then if that request actually works out I said okay we're back but if it doesn't then",
    "start": "1944679",
    "end": "1950039"
  },
  {
    "text": "immediately it's just going to remember that uh this is not going anywhere um let me first",
    "start": "1950039",
    "end": "1958360"
  },
  {
    "text": "check if things have loaded",
    "start": "1958360",
    "end": "1962519"
  },
  {
    "text": "already",
    "start": "1963480",
    "end": "1966480"
  },
  {
    "text": "oops no it's simply hasn't started yet that's okay",
    "start": "1970200",
    "end": "1975399"
  },
  {
    "text": "then so what I've done in the meantime uh let me just quickly explain the setup here we have two instances of a talk",
    "start": "1976360",
    "end": "1982039"
  },
  {
    "text": "service we have one instance of a review service that will allow me to find out if there are any reviews for particular",
    "start": "1982039",
    "end": "1988320"
  },
  {
    "text": "talks that we have in the system and I have a single web application in front of those two or three services um the",
    "start": "1988320",
    "end": "1996320"
  },
  {
    "text": "web application uh will need to talk to both services and it's going to do that",
    "start": "1996320",
    "end": "2001480"
  },
  {
    "text": "in a synchronous matter um for example",
    "start": "2001480",
    "end": "2006880"
  },
  {
    "text": "wow things are really really slow",
    "start": "2009120",
    "end": "2013120"
  },
  {
    "text": "here yeah there we go so what I have here is um a service",
    "start": "2018080",
    "end": "2026639"
  },
  {
    "text": "in the web application right so this thing is part of my web application and um it has a method here called all talks",
    "start": "2026639",
    "end": "2033679"
  },
  {
    "text": "that simply returns all of the talks that are uh available in system for this",
    "start": "2033679",
    "end": "2038760"
  },
  {
    "text": "particular conference or this particular track um and it does that by using a rest template here that says get me that",
    "start": "2038760",
    "end": "2046639"
  },
  {
    "text": "URL there and it's talking to/ talk service now that's not a DNS name that's",
    "start": "2046639",
    "end": "2051679"
  },
  {
    "text": "a service name so what this thing will do at startup is it's going to connect",
    "start": "2051679",
    "end": "2056919"
  },
  {
    "text": "to my console",
    "start": "2056919",
    "end": "2061320"
  },
  {
    "text": "and when everything is up and running it should show up here",
    "start": "2062000",
    "end": "2068280"
  },
  {
    "text": "but I seem to be having some issues here so let's see if this actually",
    "start": "2068280",
    "end": "2074078"
  },
  {
    "text": "works yep here we go so first request actually fails as you can see here now I",
    "start": "2083200",
    "end": "2088398"
  },
  {
    "text": "I get a page so my web app works but there's nothing there so what happened here well",
    "start": "2088399",
    "end": "2095320"
  },
  {
    "text": "apparently this method got called but there was a problem talking to that",
    "start": "2095320",
    "end": "2100760"
  },
  {
    "text": "backing Talk service notice that there is an at historics command annotation here with a",
    "start": "2100760",
    "end": "2105920"
  },
  {
    "text": "fallback attribute so what's that saying is that if you somehow fail to",
    "start": "2105920",
    "end": "2110960"
  },
  {
    "text": "successfully complete this method execution there is some exception just call the cast talks method instead and",
    "start": "2110960",
    "end": "2117920"
  },
  {
    "text": "this method can have any visibility but apart from that it needs to have the same method signature at the original",
    "start": "2117920",
    "end": "2123200"
  },
  {
    "text": "method and that one is just going to return a cached version of all of the talks but since I've never made a",
    "start": "2123200",
    "end": "2129000"
  },
  {
    "text": "successful request yet my cach is empty so I'm not actually seeing anything now",
    "start": "2129000",
    "end": "2134359"
  },
  {
    "text": "it does worry me a little bit obviously that I'm not seeing anything so hopefully that was just part of the",
    "start": "2134359",
    "end": "2140720"
  },
  {
    "text": "slowness yes here we go so now you see that it's doing another attempt and it's seeing okay stuff is back up I can now",
    "start": "2140720",
    "end": "2147280"
  },
  {
    "text": "call these services and I can click through and I can for example find out some information about Josh's talk",
    "start": "2147280",
    "end": "2154920"
  },
  {
    "text": "and it's actually interesting he has the way long long EST uh presentation summary of of all of the speakers in",
    "start": "2154920",
    "end": "2161440"
  },
  {
    "text": "this track that's probably because he talks so fast right so this is my application now now the thing I wanted",
    "start": "2161440",
    "end": "2167480"
  },
  {
    "text": "to really show you because that was the demo I had prepared is this if you look",
    "start": "2167480",
    "end": "2172599"
  },
  {
    "text": "here at the botton you can see my two instances of the same Talk service running right one on Port 881 one on",
    "start": "2172599",
    "end": "2180160"
  },
  {
    "text": "Port 882 now if console has successfully picked up on the fact that these things",
    "start": "2180160",
    "end": "2185440"
  },
  {
    "text": "are both running we which I'm having some doubts about but we'll see then what we should be seeing now is",
    "start": "2185440",
    "end": "2191800"
  },
  {
    "text": "automatic load balancing by ribbon so I'm making a first request and that was on the right it says returning all talks it just popped up I'm doing another oh",
    "start": "2191800",
    "end": "2198440"
  },
  {
    "text": "that was on the left I'm doing another on the right on the left on the right on the left right so this is Ribbon In",
    "start": "2198440",
    "end": "2204920"
  },
  {
    "text": "Action so this is a combination of making sure that we have a service registry in place that we have historics",
    "start": "2204920",
    "end": "2211119"
  },
  {
    "text": "in place and that we have ribbon in place and it's simply a matter of putting this stuff on the class path",
    "start": "2211119",
    "end": "2216400"
  },
  {
    "text": "putting an at enable annotation in there and this is the behavior that you get now if I now kill a",
    "start": "2216400",
    "end": "2221440"
  },
  {
    "text": "service boom and I make another request here then this first request is already",
    "start": "2221440",
    "end": "2226480"
  },
  {
    "text": "done but I'm not actually seeing anything there now this one goes there oh nothing oh there again boom nothing",
    "start": "2226480",
    "end": "2234359"
  },
  {
    "text": "so it doesn't know yet that this other service is no longer there it will find out very quickly and that then it's just",
    "start": "2234359",
    "end": "2240920"
  },
  {
    "text": "routing all of the requests to the thing on the left but if you actually look at the output of my web application now",
    "start": "2240920",
    "end": "2248960"
  },
  {
    "text": "here then what you will see is that there are actually some exceptions here because it was trying to",
    "start": "2248960",
    "end": "2255880"
  },
  {
    "text": "connect to a service that I simply killed but we didn't see any errors or",
    "start": "2255880",
    "end": "2260960"
  },
  {
    "text": "exceptions in the web application that's because if you're looking at some of the output here you can see that sometimes",
    "start": "2260960",
    "end": "2267000"
  },
  {
    "text": "it says stock service unavailable I'm returning the cash stocks right so that's the circuit breaker in action",
    "start": "2267000",
    "end": "2272599"
  },
  {
    "text": "there now going back to this uh many people think of circuit breakers has the",
    "start": "2272599",
    "end": "2278400"
  },
  {
    "text": "main feature of of historics right this is the thing that everyone demos um this is from a guy called Ben Ben Christensen",
    "start": "2278400",
    "end": "2285640"
  },
  {
    "text": "he used to be one of the chief Architects at Netflix and he was responsible for a lot of the stuff that I'm showing you here today he's",
    "start": "2285640",
    "end": "2292040"
  },
  {
    "text": "currently working at Facebook but um he has said in the past that actually circuit breakers are highly overrated we",
    "start": "2292040",
    "end": "2297240"
  },
  {
    "text": "could drop it from historics hardly miss it the most important thing is actually concurrency limits or bulkheading right",
    "start": "2297240",
    "end": "2303520"
  },
  {
    "start": "2299000",
    "end": "2626000"
  },
  {
    "text": "so this is another feature and it's something that not many people I think talk about so I thought it would be interesting to show you at least a",
    "start": "2303520",
    "end": "2309440"
  },
  {
    "text": "little bit of it a bulkhead is something they use in ships to protect it from sinking if there is a leak so if there's",
    "start": "2309440",
    "end": "2316160"
  },
  {
    "text": "a leak in this ship only one compartment will actually flood with water but the rest of the compartments will stay",
    "start": "2316160",
    "end": "2322839"
  },
  {
    "text": "filled with air and the ship will stay afloat that's the whole idea so how does this translate into uh software",
    "start": "2322839",
    "end": "2330839"
  },
  {
    "text": "well let me show you something I'll just keep this instance down that's fine for",
    "start": "2330839",
    "end": "2335960"
  },
  {
    "text": "now um what I'm going to do is I'm going to make some requests to my application",
    "start": "2335960",
    "end": "2342079"
  },
  {
    "text": "that's currently still running but I'm going to do it using a little test generation tool from Apache Benchmark so",
    "start": "2342079",
    "end": "2347760"
  },
  {
    "text": "I'm going to say do a th requests do 10 concurrent requests and I want to make them to Local Host 80 80 now this should",
    "start": "2347760",
    "end": "2357560"
  },
  {
    "text": "work fine right everything is running you can see lots of outputs for my controller returning all of these talks",
    "start": "2357560",
    "end": "2363800"
  },
  {
    "text": "and then in a moment's time this thing will say oh yeah I've just done 1,000 request and it was all a okay how can we",
    "start": "2363800",
    "end": "2370440"
  },
  {
    "text": "see this well uh there's actually an application that exposes my circuit breaker State um so here we have failed",
    "start": "2370440",
    "end": "2378359"
  },
  {
    "text": "requests zero on the right uh so everything works as expected it's not terribly exciting actually",
    "start": "2378359",
    "end": "2385359"
  },
  {
    "text": "but I want to show you something else now while this thing is starting",
    "start": "2385359",
    "end": "2393160"
  },
  {
    "text": "up let's see what happens if we try the same thing again as we just did so doing",
    "start": "2393160",
    "end": "2399119"
  },
  {
    "text": "a th requests but this time we're going to increase the concurrency level to 15",
    "start": "2399119",
    "end": "2404680"
  },
  {
    "text": "rather than",
    "start": "2404680",
    "end": "2407359"
  },
  {
    "text": "10 there it goes spawning",
    "start": "2410440",
    "end": "2414920"
  },
  {
    "text": "away almost done and now on that side everything",
    "start": "2416839",
    "end": "2422680"
  },
  {
    "text": "looks okay right because every request that actually makes it to my talk service is is handled just fine that's",
    "start": "2422680",
    "end": "2428440"
  },
  {
    "text": "okay but now on the right if this thing completes in a in a moment's time you",
    "start": "2428440",
    "end": "2433760"
  },
  {
    "text": "will see that it actually got a lot of Errors now that's interesting because",
    "start": "2433760",
    "end": "2438880"
  },
  {
    "text": "it's getting errors my service is running um I have historics configured I have a fallback uh but still in this",
    "start": "2438880",
    "end": "2446319"
  },
  {
    "text": "case uh let's see where are the errors completed do",
    "start": "2446319",
    "end": "2453040"
  },
  {
    "text": "request yeah there were 115 failed requests so that's that's not even like",
    "start": "2453040",
    "end": "2458880"
  },
  {
    "text": "some request right that's a very significant portion of requests completely failing and not going through",
    "start": "2458880",
    "end": "2464160"
  },
  {
    "text": "the fallback so what's happening here well it turns out that if you're using hyri you're actually getting a second",
    "start": "2464160",
    "end": "2470440"
  },
  {
    "text": "feature and it's a feature but you have to know about it otherwise it's a bug um",
    "start": "2470440",
    "end": "2475599"
  },
  {
    "text": "and what this thing is going to do is it's going to limit the amount of concurrent requests that you are allowed",
    "start": "2475599",
    "end": "2481880"
  },
  {
    "text": "to make to any service guarded by a circuit breaker right um You can see",
    "start": "2481880",
    "end": "2487480"
  },
  {
    "text": "that here this is the hyic dashboard on the I can see my circuit breakers here so my all talks for example but I can",
    "start": "2487480",
    "end": "2494040"
  },
  {
    "text": "also see the threat pools below that and this is actually the bulk heading in action now",
    "start": "2494040",
    "end": "2501640"
  },
  {
    "text": "um oh actually I can see that I already increased the pool size somewhat but",
    "start": "2501640",
    "end": "2507960"
  },
  {
    "text": "still this thing has a fixed pool size and this is to prevent you from",
    "start": "2507960",
    "end": "2513560"
  },
  {
    "text": "overloading other services right and the default actually in histri is only 10 you get a threat pool of 10 threats you",
    "start": "2513560",
    "end": "2520960"
  },
  {
    "text": "can never make more than 10 threads at the same time to some service and if you are trying to make another request while",
    "start": "2520960",
    "end": "2526680"
  },
  {
    "text": "those 10 requests are already in action it's just going to fail completely immediately and it's not even going to go through your fallback because the",
    "start": "2526680",
    "end": "2533160"
  },
  {
    "text": "idea is you're being overloaded you need to tell whatever client you have that you're simply not available because the",
    "start": "2533160",
    "end": "2539880"
  },
  {
    "text": "system is too busy this prevents the whole system from actually going down and being overloaded but if you don't know about",
    "start": "2539880",
    "end": "2547440"
  },
  {
    "text": "this it's very easy to say um I have um I have configured everything I think I",
    "start": "2547440",
    "end": "2552599"
  },
  {
    "text": "can go to production and then before you know it you're doing a denial of service on yourself because you're only allowing",
    "start": "2552599",
    "end": "2557760"
  },
  {
    "text": "yourself to make time request to all of your backing services at the same time right so to configure this stuff and",
    "start": "2557760",
    "end": "2563920"
  },
  {
    "text": "that's really what I wanted to show you uh in my talk service",
    "start": "2563920",
    "end": "2570838"
  },
  {
    "text": "here you can do things like configure the size of this threat pool so see that",
    "start": "2570920",
    "end": "2576160"
  },
  {
    "text": "here you can see I have set the thread pool properties here I've set the core size to 20 now even that's not enough",
    "start": "2576160",
    "end": "2581400"
  },
  {
    "text": "right if I'm using a tool that I like a load balancing tool I was just using even saying 15 those requests come in so",
    "start": "2581400",
    "end": "2587200"
  },
  {
    "text": "fast that even uh a thread pool of 20 here is not even enough uh but this is something to be aware of and you can see",
    "start": "2587200",
    "end": "2593280"
  },
  {
    "text": "the thing going down if I do it again if we now go to this dashboard here you can",
    "start": "2593280",
    "end": "2598520"
  },
  {
    "text": "see it it looks fine for a while but then boom everything goes red and um you can see that the threat pool",
    "start": "2598520",
    "end": "2605559"
  },
  {
    "text": "um a lot of the threads are becoming active it's starting to queue up things and after a while things just go hwire",
    "start": "2605559",
    "end": "2612480"
  },
  {
    "text": "then they go back down again right the requests are made are made you can actually make a thousand request really quick if you just let them fail",
    "start": "2612480",
    "end": "2618440"
  },
  {
    "text": "immediately as it turns out um but this is very much something to be aware of it's an important feature but if you if",
    "start": "2618440",
    "end": "2624599"
  },
  {
    "text": "you don't know about the feature things will just break now finally um there's also async messaging um through uh or",
    "start": "2624599",
    "end": "2632480"
  },
  {
    "start": "2626000",
    "end": "2673000"
  },
  {
    "text": "support for async messaging and this is typically used for things like broadcasting events right if if something happened in your application",
    "start": "2632480",
    "end": "2638319"
  },
  {
    "text": "and you would like other applications to know you don't need to tell them one by one explicitly that something happens",
    "start": "2638319",
    "end": "2644440"
  },
  {
    "text": "what you would like to do is just broadcast a message and that's particularly suitable for message",
    "start": "2644440",
    "end": "2649520"
  },
  {
    "text": "Brokers also request responses where you don't actually have to block and wait for the response because there is no",
    "start": "2649520",
    "end": "2655720"
  },
  {
    "text": "user performing an ACP request for example that you need to result for you can just send a request and then",
    "start": "2655720",
    "end": "2661480"
  },
  {
    "text": "whenever the response comes back you say okay thanks for the response I'll just process it perfect for async now there's",
    "start": "2661480",
    "end": "2667280"
  },
  {
    "text": "a lot of products out there there's a lot of different protocols that you can use for this uh but there are a number of common patterns so um you can have",
    "start": "2667280",
    "end": "2674880"
  },
  {
    "start": "2673000",
    "end": "2773000"
  },
  {
    "text": "Point topoint messaging where you're sending a message to only one single receiver or you can do pubs up where you",
    "start": "2674880",
    "end": "2680040"
  },
  {
    "text": "can subscribe to a topic and then whenever a message is sent to a topic every",
    "start": "2680040",
    "end": "2685839"
  },
  {
    "text": "subscriptores applications listening to that picking up messages to distribute workload for example that's called",
    "start": "2687400",
    "end": "2692520"
  },
  {
    "text": "competing consumers um and these patterns are now being supported by by another member of the spring Cloud",
    "start": "2692520",
    "end": "2699559"
  },
  {
    "text": "family called Spring Cloud stream now I don't actually have time to demo that anymore uh but there is code in my uh",
    "start": "2699559",
    "end": "2706680"
  },
  {
    "text": "demo code that I'll like I said I'll put on Twitter in uh after the presentation that you can check out for yourself um",
    "start": "2706680",
    "end": "2713319"
  },
  {
    "text": "that supports these Notions as in an abstraction where you don't have to actually configure the actual broker",
    "start": "2713319",
    "end": "2720280"
  },
  {
    "text": "anymore so you're not using JMS directly or amqp directly or some kovka client",
    "start": "2720280",
    "end": "2725839"
  },
  {
    "text": "directly or a reddish client directly um you can actually say I would just like to have a notion of uh some some topic",
    "start": "2725839",
    "end": "2733920"
  },
  {
    "text": "that I can publish on and something that I can listen to and it will figure this out for you it even supports some more",
    "start": "2733920",
    "end": "2739079"
  },
  {
    "text": "fancy Concepts partitioning for example means producer actually tags certain messages and then they will always",
    "start": "2739079",
    "end": "2745200"
  },
  {
    "text": "arrive with the same competing consumer this is cool for things like sensor data right if I'm keeping track of a moving",
    "start": "2745200",
    "end": "2751599"
  },
  {
    "text": "average of certain sensors I really don't want my sensor information to end up with lots of different",
    "start": "2751599",
    "end": "2757480"
  },
  {
    "text": "uh listeners because they will not have the previous information so you can actually tag it so it always reaches the same one or you can make sure that if a",
    "start": "2757480",
    "end": "2764040"
  },
  {
    "text": "consumer goes away temporarily it will still receive the messaging right so this is a fairly new edition like I said",
    "start": "2764040",
    "end": "2770760"
  },
  {
    "text": "running out of time to to actually demo this but just so you know that it's there so this gave you hopefully a bit",
    "start": "2770760",
    "end": "2777720"
  },
  {
    "start": "2773000",
    "end": "2961000"
  },
  {
    "text": "of a bit more insight into the main components of spring Cloud uh namely the",
    "start": "2777720",
    "end": "2783079"
  },
  {
    "text": "configuration stuff the services registration and the uh synchronous in invocation through all of the Netflix",
    "start": "2783079",
    "end": "2789960"
  },
  {
    "text": "libraries um of course there are many other things that come into play right when you're building a distributed application like if something is really",
    "start": "2789960",
    "end": "2796559"
  },
  {
    "text": "slow what is actually making it slow um maybe uh what if I have to do things like oal authentication I need to",
    "start": "2796559",
    "end": "2803200"
  },
  {
    "text": "actually propagate that info to backing services or uh what if I want to know about other service instances of my",
    "start": "2803200",
    "end": "2809240"
  },
  {
    "text": "service and I want to know how many are there like significant others so there's there's projects for that as well so",
    "start": "2809240",
    "end": "2814480"
  },
  {
    "text": "there's the sleuth stuff that's for distributed Trace um there is something called Spring Cloud bus that will actually allow it to",
    "start": "2814480",
    "end": "2820200"
  },
  {
    "text": "propagate commands to Services uh there is a part uh that integrates with",
    "start": "2820200",
    "end": "2825440"
  },
  {
    "text": "security particular for ooth and there is something called Spring out cluster for coordination right so this is a big",
    "start": "2825440",
    "end": "2832119"
  },
  {
    "text": "topic area obviously not something that you can cover in any depth in 45 minutes",
    "start": "2832119",
    "end": "2837480"
  },
  {
    "text": "but um I encourage you to check it out if you're interested um also switching",
    "start": "2837480",
    "end": "2842640"
  },
  {
    "text": "back to track host mode here um please remember to uh to rate this session uh",
    "start": "2842640",
    "end": "2847800"
  },
  {
    "text": "uh when you leave the room or preferably before you leave the room um I'm sorry that some of the things that I planned",
    "start": "2847800",
    "end": "2853559"
  },
  {
    "text": "didn't quite work out but it was a bit stressful here with all of the crashing and slowness here um but uh I hope you",
    "start": "2853559",
    "end": "2859640"
  },
  {
    "text": "learned something um I hope to see you all at the last keynote of today Simon Singh I'm actually looking very much",
    "start": "2859640",
    "end": "2865160"
  },
  {
    "text": "forward to that if you have any questions left do we have time now there's um there's time for questions",
    "start": "2865160",
    "end": "2872559"
  },
  {
    "text": "okay well in that there's a few questions from the from the audience um",
    "start": "2872559",
    "end": "2877599"
  },
  {
    "text": "and one I think it's a short one uh your first request earlier failed is it intended that every first request fails",
    "start": "2877599",
    "end": "2884800"
  },
  {
    "text": "no no that was uh very much uh some slowness weirdness issue on my laptop that just recovered from a crash uh that",
    "start": "2884800",
    "end": "2891880"
  },
  {
    "text": "was not expected what is the suggested fallback if the remote configuration isn't",
    "start": "2891880",
    "end": "2897720"
  },
  {
    "text": "available when bootstrapping a service um I would say it depends um normally",
    "start": "2897720",
    "end": "2902800"
  },
  {
    "text": "the remote configuration should be available it should be a highly available component so uh normally it",
    "start": "2902800",
    "end": "2908400"
  },
  {
    "text": "will actually just prevent your service from starting you can actually configure it to ignore uh that remote service not",
    "start": "2908400",
    "end": "2915680"
  },
  {
    "text": "being available and then you can fall back on some local defaults that is fully supported but that's more intended",
    "start": "2915680",
    "end": "2921359"
  },
  {
    "text": "for development purposes rather than for production purposes so my recommendation would be if the highly available you",
    "start": "2921359",
    "end": "2928200"
  },
  {
    "text": "should make it highly available configuration service is not there that's actually reason enough to Simply fail at startup config server itself may",
    "start": "2928200",
    "end": "2936119"
  },
  {
    "text": "actually cat certain things if you're using something like spring Cloud config server which is backed by a git repository it does a clone of the remote",
    "start": "2936119",
    "end": "2943640"
  },
  {
    "text": "git repository so the git repository itself doesn't actually need to be highly available it will use a copy but for your service clients I would just",
    "start": "2943640",
    "end": "2950240"
  },
  {
    "text": "fail in production yeah I think gu that's it looking at the time so uh",
    "start": "2950240",
    "end": "2955760"
  },
  {
    "text": "thank you Yus okay and thank you",
    "start": "2955760",
    "end": "2960599"
  }
]