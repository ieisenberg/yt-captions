[
  {
    "start": "0",
    "end": "92000"
  },
  {
    "text": "[Applause] so it's uh thank you for such kind words",
    "start": "2070",
    "end": "7600"
  },
  {
    "text": "it's so nice to be here I would love to say that it's my first uh talk in Australia but no because I just did it a",
    "start": "7600",
    "end": "13880"
  },
  {
    "text": "few days ago in Melbourne and I hope this one would be even better and uh",
    "start": "13880",
    "end": "19160"
  },
  {
    "text": "thank you for having me here I hope you'll enjoy it and today we're going to talk about the stattic code analysis for",
    "start": "19160",
    "end": "25080"
  },
  {
    "text": "cotlin the thing that I'm doing my like so I'm going to share with you what I'm",
    "start": "25080",
    "end": "30519"
  },
  {
    "text": "doing for my everyday job so before uh that was a nice bio so I don't want to",
    "start": "30519",
    "end": "37440"
  },
  {
    "text": "spend much time uh like explaining who I am I'm software engineer at sonar so you",
    "start": "37440",
    "end": "42600"
  },
  {
    "text": "can follow me this is my Twitter handle and there is one more important thing you should know about me that I'm",
    "start": "42600",
    "end": "48879"
  },
  {
    "text": "Ukrainian and currently we have huge problems with our neighbors some some people tell me that",
    "start": "48879",
    "end": "56160"
  },
  {
    "text": "that the reason why I went to Australia to be as far away as possible from Russia but yeah so currently we have we",
    "start": "56160",
    "end": "64040"
  },
  {
    "text": "need all the help that people around the world can provide to us so if you feel that you want to support Ukraine you",
    "start": "64040",
    "end": "70439"
  },
  {
    "text": "want to do some donation here's um a link to the charity fund so feel free to",
    "start": "70439",
    "end": "76960"
  },
  {
    "text": "donate if you feel like and of course there are a lot of other charity funds",
    "start": "76960",
    "end": "82320"
  },
  {
    "text": "that are helping Ukraine to fight for our freedom so the most important part",
    "start": "82320",
    "end": "87439"
  },
  {
    "text": "of my talk is done now we can and a little bit relax and have some fun so",
    "start": "87439",
    "end": "94759"
  },
  {
    "start": "92000",
    "end": "133000"
  },
  {
    "text": "what we are going to have today uh first of all we'll talk a little bit about the history of static code analysis and",
    "start": "94759",
    "end": "100640"
  },
  {
    "text": "static code analysis for cotlin in the company that they work and then we'll talk a little bit about why we need to",
    "start": "100640",
    "end": "106680"
  },
  {
    "text": "do something else for cotlin why cotlin then we'll talk about one of the most",
    "start": "106680",
    "end": "111759"
  },
  {
    "text": "important cotlin like one of the most important releases in my career in sonar",
    "start": "111759",
    "end": "116880"
  },
  {
    "text": "it's sonar cotlin 2.0 and feedback that we received some achievements and of",
    "start": "116880",
    "end": "122280"
  },
  {
    "text": "course takeaways because I do know that you're not going to write the static analyzer by yourself but there are",
    "start": "122280",
    "end": "128720"
  },
  {
    "text": "probably some hints some stuff that you're going to learn during this talk so history uh raise raise your hands if",
    "start": "128720",
    "end": "137000"
  },
  {
    "start": "133000",
    "end": "664000"
  },
  {
    "text": "you know this UI like if You' ever seen such a UI oh it's interesting like",
    "start": "137000",
    "end": "142959"
  },
  {
    "text": "usually people recognize it so this is a sonar Cube 8.9 this is our previous long-term",
    "start": "142959",
    "end": "149519"
  },
  {
    "text": "support release and this is the um analysis of",
    "start": "149519",
    "end": "155560"
  },
  {
    "text": "some random cotlin project I want you to memorize this numbers like 46 uh 64",
    "start": "155560",
    "end": "161840"
  },
  {
    "text": "sorry bugs zero vulnerabilities so on security side it's perfect 39 hotspots",
    "start": "161840",
    "end": "167599"
  },
  {
    "text": "400 C smells and soar calculated that we can fix it in 4 days so technically",
    "start": "167599",
    "end": "174040"
  },
  {
    "text": "technical depth is not that big so project is sort of a fine then one and a",
    "start": "174040",
    "end": "180800"
  },
  {
    "text": "half years later the sonar Cube 9.9 is released nothing changed about the",
    "start": "180800",
    "end": "186760"
  },
  {
    "text": "project it's exactly the same project but look there are three times more bugs",
    "start": "186760",
    "end": "192280"
  },
  {
    "text": "200 vulnerabilities and you remember there were zero uh 120 hotspots and 800",
    "start": "192280",
    "end": "198360"
  },
  {
    "text": "C smells which is like two times more and average technical depth is 29 days",
    "start": "198360",
    "end": "204440"
  },
  {
    "text": "so from 4 days it became a month interesting uh what actually Happ",
    "start": "204440",
    "end": "209799"
  },
  {
    "text": "happened the only thing that changed is the version of sonar cube is the version of the analyzers that we shipped with",
    "start": "209799",
    "end": "216319"
  },
  {
    "text": "this product so nothing changed about the project you may think that this is",
    "start": "216319",
    "end": "221879"
  },
  {
    "text": "my job to make your project worse however that's not true uh all",
    "start": "221879",
    "end": "227560"
  },
  {
    "text": "these bugs all this vulnerability they were already there they just weren't discovered so you didn't know about them",
    "start": "227560",
    "end": "233640"
  },
  {
    "text": "and you were not able to fix them now you know now you can fix them and your code will be more reliable secure and M",
    "start": "233640",
    "end": "240360"
  },
  {
    "text": "maintainable so my job is to make your code better so and in order to",
    "start": "240360",
    "end": "246959"
  },
  {
    "text": "understand more precisely what actually happened with the Scotland analyzer in sonar um we need to forward to the",
    "start": "246959",
    "end": "254680"
  },
  {
    "text": "past and uh talk a little bit about the static analysis in",
    "start": "254680",
    "end": "260479"
  },
  {
    "text": "general um please raise your hands if you're familiar with the concept what static analysis is I like not a lot of",
    "start": "260479",
    "end": "268000"
  },
  {
    "text": "people so I would try to explain it briefly um so when we are talking about static",
    "start": "268000",
    "end": "274120"
  },
  {
    "text": "analysis let's imagine some uh function that has input and",
    "start": "274120",
    "end": "279280"
  },
  {
    "text": "output and input for static analysis is your source code most likely you wrote",
    "start": "279280",
    "end": "285479"
  },
  {
    "text": "classes functions and probably that was the first uh class that you wrote in goland when you just started learning it",
    "start": "285479",
    "end": "291880"
  },
  {
    "text": "this is printing hello world looks nice and the static analyzer",
    "start": "291880",
    "end": "298000"
  },
  {
    "text": "takes this code transform this into the structure called abstruct syntax 3 so",
    "start": "298000",
    "end": "305120"
  },
  {
    "text": "you can see that in this structure we can see some functions some parentheses",
    "start": "305120",
    "end": "310360"
  },
  {
    "text": "some arguments Expressions blocks and all this structure called tree and I",
    "start": "310360",
    "end": "317479"
  },
  {
    "text": "know that uh this structure is not really nice and every time we refer to this in this presentation you're going",
    "start": "317479",
    "end": "324720"
  },
  {
    "text": "see this one but uh under the hood it's that tree and with developers we know",
    "start": "324720",
    "end": "330919"
  },
  {
    "text": "what to do with trees we know how to Traverse them and the analyzer does exactly this traverses the tree and",
    "start": "330919",
    "end": "339400"
  },
  {
    "text": "Report some issues so once we found some patterns in the tree we can say that okay there is something unused here you",
    "start": "339400",
    "end": "346240"
  },
  {
    "text": "can refactor this code because it's dead code and so on so this is in simple words what static analysis is we are",
    "start": "346240",
    "end": "353319"
  },
  {
    "text": "taking your source code transforming into into the tree and then running some",
    "start": "353319",
    "end": "358520"
  },
  {
    "text": "checks visiting industry and Reporting issues and what is the problem the",
    "start": "358520",
    "end": "366720"
  },
  {
    "text": "problem that this abstract syntax tree is very specific to every language in",
    "start": "366720",
    "end": "372560"
  },
  {
    "text": "Java we have Java St in goland we have kland a in go and Ruby in Scala in SQL",
    "start": "372560",
    "end": "379440"
  },
  {
    "text": "we have all different ests this means that technically similar rules like",
    "start": "379440",
    "end": "385319"
  },
  {
    "text": "unused stuff here unused stuff there we have to reimplement them like 20 times",
    "start": "385319",
    "end": "390520"
  },
  {
    "text": "because we support like know 20 30 languages which doesn't sound like a good idea like technically there was a",
    "start": "390520",
    "end": "396840"
  },
  {
    "text": "lot of repeating so for a long time in sonar we had a dream that we should we",
    "start": "396840",
    "end": "402199"
  },
  {
    "text": "need to run three to rule them all and it was actually",
    "start": "402199",
    "end": "407560"
  },
  {
    "text": "implemented so this is the general stuff how stud analysis worked and then we",
    "start": "407560",
    "end": "412919"
  },
  {
    "text": "implemented some sort of intermediate representation uh called like",
    "start": "412919",
    "end": "418240"
  },
  {
    "text": "generalized three this intermediate representation is the same for many languages and we can run",
    "start": "418240",
    "end": "425440"
  },
  {
    "text": "the the checks on this intermediate representation and it means that we",
    "start": "425440",
    "end": "430720"
  },
  {
    "text": "don't need to write like uh 30 times the same rule we just write it once and then",
    "start": "430720",
    "end": "435840"
  },
  {
    "text": "we just need to write a converter and this worked for in production for some time for these four",
    "start": "435840",
    "end": "442680"
  },
  {
    "text": "languages cotlin Scala go in Ruby so and I think for some of the",
    "start": "442680",
    "end": "448960"
  },
  {
    "text": "languages it's still like this and of course every approach had its pros and cons for the pros of this",
    "start": "448960",
    "end": "456440"
  },
  {
    "text": "approach we have one rule many languages so you write it only once and you have",
    "start": "456440",
    "end": "461800"
  },
  {
    "text": "immediately it available in many languages uh then if you want to add a new language you just need to write a",
    "start": "461800",
    "end": "468919"
  },
  {
    "text": "converter and then you have some uh rules out of the box sounds like a great",
    "start": "468919",
    "end": "474240"
  },
  {
    "text": "solution and this is it with the pros then cons maintenance there were a few",
    "start": "474240",
    "end": "480440"
  },
  {
    "text": "times when some change in Ruby um caused the change in this intermediate",
    "start": "480440",
    "end": "485680"
  },
  {
    "text": "representation because of this change we had to rewrite how we do this conversion",
    "start": "485680",
    "end": "490720"
  },
  {
    "text": "in cotlin and Scala and go so instead of maintaining like one language we",
    "start": "490720",
    "end": "496400"
  },
  {
    "text": "maintain like n multipied n minus one divided by two branches which is like",
    "start": "496400",
    "end": "503159"
  },
  {
    "text": "insane so change in one language can affect other languages another problem",
    "start": "503159",
    "end": "509599"
  },
  {
    "text": "rules Precision because this languages they are all different they have different syntax and we have like need",
    "start": "509599",
    "end": "516399"
  },
  {
    "text": "to find something generalized for all of them and that's why we need to cut some branches for cotlin for example we did",
    "start": "516399",
    "end": "523159"
  },
  {
    "text": "not support extension functions we didn't support object and a lot of other small stuff that didn't work and that",
    "start": "523159",
    "end": "530200"
  },
  {
    "text": "was uh a little bit sad because we had a lot of false positives a lot of problems with this language specific rules",
    "start": "530200",
    "end": "537800"
  },
  {
    "text": "exactly the same issue we of the rules Precision if something is not supported we cannot write rules about this and",
    "start": "537800",
    "end": "545360"
  },
  {
    "text": "testing was hard because now you have to test it like five times every single",
    "start": "545360",
    "end": "550600"
  },
  {
    "text": "rule and another big problem this model did not uh contain",
    "start": "550600",
    "end": "557440"
  },
  {
    "text": "semantic model so we could not write some Advanced some nice rules only",
    "start": "557440",
    "end": "562800"
  },
  {
    "text": "stupid simple rules about the syntax and that's why we thought that okay",
    "start": "562800",
    "end": "569560"
  },
  {
    "text": "probably this solution is not ideal for the language that we need to want to support properly so the decision was",
    "start": "569560",
    "end": "575839"
  },
  {
    "text": "made to get away from this approach and",
    "start": "575839",
    "end": "581600"
  },
  {
    "text": "then yeah one more important thing I touched the subject of semantic model",
    "start": "581600",
    "end": "587040"
  },
  {
    "text": "please raise your hands if you understand what it is so not really let me explain it like briefly uh",
    "start": "587040",
    "end": "594640"
  },
  {
    "text": "so imagine that you write source code like Hello World function here and there RA in another file another function like",
    "start": "594640",
    "end": "602279"
  },
  {
    "text": "G function G that takes X parameter of type hello world and executes the calls",
    "start": "602279",
    "end": "609560"
  },
  {
    "text": "the function f with semantic model we can actually build this connection to",
    "start": "609560",
    "end": "614839"
  },
  {
    "text": "understand that this hello world type is actually that hello world type and this F function is that F function so with",
    "start": "614839",
    "end": "622360"
  },
  {
    "text": "semantic model we can resolve types we can go jump from uh method calls to",
    "start": "622360",
    "end": "628120"
  },
  {
    "text": "Method declarations we can explore the annotations and everything that is",
    "start": "628120",
    "end": "633640"
  },
  {
    "text": "around so semantic model is a very powerful stuff that we need if we want to write Advanced rules so in simple",
    "start": "633640",
    "end": "641519"
  },
  {
    "text": "words when we are talking about abstruct syntax 3 the semantic model here are the",
    "start": "641519",
    "end": "647320"
  },
  {
    "text": "relations between different syntax trees and different nodes of the syntax trees",
    "start": "647320",
    "end": "653360"
  },
  {
    "text": "all this together we have uh by having all this together we have the whole picture like sem model and with this we",
    "start": "653360",
    "end": "661120"
  },
  {
    "text": "can build nice rules then another question like okay",
    "start": "661120",
    "end": "667200"
  },
  {
    "start": "664000",
    "end": "749000"
  },
  {
    "text": "this approach doesn't work but we need to start from somewhere why cotlin why should we start with the",
    "start": "667200",
    "end": "672600"
  },
  {
    "text": "cotlin first of all there is like non deniable growing popularity of the",
    "start": "672600",
    "end": "677680"
  },
  {
    "text": "language raise your hands if you like know cotlin like okay not a lot here",
    "start": "677680",
    "end": "685200"
  },
  {
    "text": "but that's interesting because I think in Melbourne almost the whole uh room so",
    "start": "685200",
    "end": "691240"
  },
  {
    "text": "I was surprised that the whole room ra their hands so maybe in Brisbane you need to have more bigger",
    "start": "691240",
    "end": "697160"
  },
  {
    "text": "Community yeah and then user feedback we have a lot of users that were using",
    "start": "697160",
    "end": "702560"
  },
  {
    "text": "cotlin liked cotlin and they were complaining that our support of cotlin is not really nice we have a lot of",
    "start": "702560",
    "end": "709240"
  },
  {
    "text": "false positives the approach is bad and we don't really have some Advanced roles another thing that we wanted to use",
    "start": "709240",
    "end": "715000"
  },
  {
    "text": "Scotland ourselves like we want to be modern to use some Modern languages but we didn't have proper static analysis so",
    "start": "715000",
    "end": "722320"
  },
  {
    "text": "like we don't know how to write a nice cotland Cod and that's we need to write some tools for",
    "start": "722320",
    "end": "727680"
  },
  {
    "text": "ourselves and another point from business perspective there was a huge Market of Android and application",
    "start": "727680",
    "end": "734600"
  },
  {
    "text": "security that we wanted to enter and it was impossible with slang because slang",
    "start": "734600",
    "end": "740560"
  },
  {
    "text": "that's how this approach previous was called this approach is limited so that's why",
    "start": "740560",
    "end": "748000"
  },
  {
    "text": "cotl and and uh after some work some huge work of some people working on this",
    "start": "748000",
    "end": "755560"
  },
  {
    "start": "749000",
    "end": "1392000"
  },
  {
    "text": "we brought to the life the next generation of sonar cotland analyzer sonar cotland 2.0 they extracted to",
    "start": "755560",
    "end": "762519"
  },
  {
    "text": "separate repository we did a lot of nice stuff and uh let's maybe summarize what we did",
    "start": "762519",
    "end": "770639"
  },
  {
    "text": "initially as I told you we had something like this this is what we wanted to do like",
    "start": "770639",
    "end": "779000"
  },
  {
    "text": "we wanted to get rid of this generalized tree and just get back to the normal cotland",
    "start": "779000",
    "end": "784399"
  },
  {
    "text": "tree however that's not that easy than just to remove the branch we had some",
    "start": "784399",
    "end": "790760"
  },
  {
    "text": "time boxes we had management that we need to deliver we cannot stop the world and this were the compromise that we",
    "start": "790760",
    "end": "798760"
  },
  {
    "text": "implemented so we still had an old path with old rules going through the generalized tree but everything new was",
    "start": "798760",
    "end": "806560"
  },
  {
    "text": "going through the new approach that we built of course we understood that this is ugly we don't want to live like this",
    "start": "806560",
    "end": "813800"
  },
  {
    "text": "and we marked it as a technical depth and promised ourselves that we are going to remove it remove this one day and now",
    "start": "813800",
    "end": "821199"
  },
  {
    "text": "raise your hands if you think that we got rid of this come on raise your hands if you",
    "start": "821199",
    "end": "828800"
  },
  {
    "text": "think that it's still there what others are thinking that's funny that I did this",
    "start": "828800",
    "end": "836240"
  },
  {
    "text": "talk in melbour and in melbour like nobody read their hand when they said like who think that we got rid of this",
    "start": "836240",
    "end": "842040"
  },
  {
    "text": "and I was thinking okay maybe in brisban they are like a little bit more generous to my team believe in my team but",
    "start": "842040",
    "end": "848839"
  },
  {
    "text": "no so probably you should believe in people more because we got rid of this",
    "start": "848839",
    "end": "854120"
  },
  {
    "text": "there is no slang remainings in sonar cotland anymore and this reserves some",
    "start": "854120",
    "end": "860079"
  },
  {
    "text": "Applause so we got rid of this now sonar cotlin had nothing to do with",
    "start": "860079",
    "end": "866040"
  },
  {
    "text": "generalized tree uh it's now scalar Ruby and go job to maintain the stuff so but",
    "start": "866040",
    "end": "873720"
  },
  {
    "text": "of course our journey wouldn't be that nice that exciting if not the cotlin",
    "start": "873720",
    "end": "878880"
  },
  {
    "text": "compiler cotlin compiler is amazing and now I'll explain to you why first thing",
    "start": "878880",
    "end": "884839"
  },
  {
    "text": "that we discovered is now called as they call it nullability hell if you heard about cotland you probably heard this",
    "start": "884839",
    "end": "890839"
  },
  {
    "text": "promise that you're never going to have n pointer anymore like use cotlin and forget about NS null pointers because",
    "start": "890839",
    "end": "897240"
  },
  {
    "text": "actually nullability is a part of their Ty system yeah that's right that it is",
    "start": "897240",
    "end": "903079"
  },
  {
    "text": "however in goland compiler that's too much why when we are writing some rules",
    "start": "903079",
    "end": "910120"
  },
  {
    "text": "we are using some visitor pattern over the tree and for example we need to visit some binary expression and binary",
    "start": "910120",
    "end": "916959"
  },
  {
    "text": "expression is the expression that has right and left it literally could not be",
    "start": "916959",
    "end": "922199"
  },
  {
    "text": "pared as binary expression it it doesn't have right or doesn't have left however this all stuff is nullable",
    "start": "922199",
    "end": "929720"
  },
  {
    "text": "the point is that this is coming from the intellig from the cotland compiler",
    "start": "929720",
    "end": "936480"
  },
  {
    "text": "that is a little bit coupled with intellig idea because initially the API that they used was coming from intelligy",
    "start": "936480",
    "end": "943920"
  },
  {
    "text": "and that's why from the case of IDE there is no like uh guarantee that you won't have the situation however in the",
    "start": "943920",
    "end": "951360"
  },
  {
    "text": "case of sonar there is guarantee that if we were not able to parse it we are not",
    "start": "951360",
    "end": "957000"
  },
  {
    "text": "going to visit this so in our case this this can never be null however we have",
    "start": "957000",
    "end": "962160"
  },
  {
    "text": "to deal with this somehow so how do we deal with this the first idea was to go like",
    "start": "962160",
    "end": "967480"
  },
  {
    "text": "this this looks okay so we have some code like this in our code base but",
    "start": "967480",
    "end": "972600"
  },
  {
    "text": "what's the problem if you have just two of them then that's fine but if you have",
    "start": "972600",
    "end": "978199"
  },
  {
    "text": "10 12 and like you need to go deeper and deeper and deeper then it doesn't look",
    "start": "978199",
    "end": "985360"
  },
  {
    "text": "nice it doesn't look readable and we didn't want to go like this so we needed something",
    "start": "985360",
    "end": "991040"
  },
  {
    "text": "else another possible idea was to go with early returns and Elis operator",
    "start": "991040",
    "end": "997720"
  },
  {
    "text": "that looks amazing so actually I love this approach very much however there is",
    "start": "997720",
    "end": "1002800"
  },
  {
    "text": "one problem by doing this we are introducing unreachable path in our code",
    "start": "1002800",
    "end": "1009279"
  },
  {
    "text": "which might lead to like questions from our teammates once they get back to this",
    "start": "1009279",
    "end": "1014759"
  },
  {
    "text": "code and they need to read what's going on and another point is coverage because actually the jco tool that we are using",
    "start": "1014759",
    "end": "1022160"
  },
  {
    "text": "it doesn't give like doesn't understand that this is not reachable in our case",
    "start": "1022160",
    "end": "1027360"
  },
  {
    "text": "so Jos screams like please cover this and we cannot of course we can Mo we can",
    "start": "1027360",
    "end": "1032880"
  },
  {
    "text": "write some uh expose some stupid tests but that's not what we wanted to do",
    "start": "1032880",
    "end": "1039640"
  },
  {
    "text": "so what do you think is the next approach next approach is using non-al",
    "start": "1039640",
    "end": "1045798"
  },
  {
    "text": "assertions please raise your hands if you ever Ed them oh don't be shy I'm using it I'm sorry",
    "start": "1045799",
    "end": "1054120"
  },
  {
    "text": "I'm guilty at every time I'm putting non assertion on some code like something inside me that was like please don't do",
    "start": "1054120",
    "end": "1061840"
  },
  {
    "text": "it you're not right like it's going to happen that it's going to be now there and I don't know what to do with this my",
    "start": "1061840",
    "end": "1068440"
  },
  {
    "text": "internal voice and after a lot of communications and U arguments with my",
    "start": "1068440",
    "end": "1074760"
  },
  {
    "text": "colleagues on such an important subject uh we decided to resolve these cases",
    "start": "1074760",
    "end": "1080600"
  },
  {
    "text": "like this we still put non- null assertion however we always add a",
    "start": "1080600",
    "end": "1086240"
  },
  {
    "text": "comment we always WR the comment what was the assumption why we think that this is never going to be null and if",
    "start": "1086240",
    "end": "1093080"
  },
  {
    "text": "this assumption was wrong then it's at least it's easy for other developer to read this comment and understand that",
    "start": "1093080",
    "end": "1099600"
  },
  {
    "text": "okay this is not true probably we need to refactor uh so if you have similar",
    "start": "1099600",
    "end": "1104799"
  },
  {
    "text": "situation in your code base this could be an option for you",
    "start": "1104799",
    "end": "1110400"
  },
  {
    "text": "so okay somehow fix this nullability hell another point is lack of documentation and naming click who likes",
    "start": "1110400",
    "end": "1117159"
  },
  {
    "text": "documentation who likes to read documentation and I was surprised like",
    "start": "1117159",
    "end": "1122240"
  },
  {
    "text": "not a lot of people likes to read this like say two people in the whole room but even less people likes to write",
    "start": "1122240",
    "end": "1129640"
  },
  {
    "text": "documentation and uh my favorite stuff here is like KT named function what do you think KT named",
    "start": "1129640",
    "end": "1137120"
  },
  {
    "text": "function in cotland compiler uh a a is we as same people like",
    "start": "1137120",
    "end": "1143960"
  },
  {
    "text": "developers that probably know how to name our variables how to name classes assumed that KT named function is",
    "start": "1143960",
    "end": "1150679"
  },
  {
    "text": "function with a name like how there we are like function with a name so when we implemented bad function name rule it's",
    "start": "1150679",
    "end": "1158280"
  },
  {
    "text": "a very stupid rule that say that okay your function uh doesn't have a proper name we visited named functions and we",
    "start": "1158280",
    "end": "1167080"
  },
  {
    "text": "assume that okay named function should always have name and we use non null assertion it worked and then one",
    "start": "1167080",
    "end": "1173799"
  },
  {
    "text": "colleague came to us and say like your code doesn't work it RS now pointer like",
    "start": "1173799",
    "end": "1178960"
  },
  {
    "text": "that's like that's insane it's named function this's name and then they showed code like this what is did this",
    "start": "1178960",
    "end": "1186480"
  },
  {
    "text": "is anonymous function which literally means function without a name however in goland compiler function",
    "start": "1186480",
    "end": "1194280"
  },
  {
    "text": "without a name is a named function just stop for one second and listen to it",
    "start": "1194280",
    "end": "1199880"
  },
  {
    "text": "function without a name is a named function because function um it named function by",
    "start": "1199880",
    "end": "1208400"
  },
  {
    "text": "the way see there is a commment here so we were able to understand what was the",
    "start": "1208400",
    "end": "1213480"
  },
  {
    "text": "Assumption so from cotland compiler developers KT",
    "start": "1213480",
    "end": "1218760"
  },
  {
    "text": "named function is the function that was declared with keyword fun in Anonymous function you have keyword fun so it's",
    "start": "1218760",
    "end": "1225600"
  },
  {
    "text": "named function like why don't you understand this and that's not like the only gem in this",
    "start": "1225600",
    "end": "1232480"
  },
  {
    "text": "compiler it's just my favorite one that's yeah so we have to deal with things like this that are not really",
    "start": "1232480",
    "end": "1239240"
  },
  {
    "text": "nice documented another thing interesting thing were compiler",
    "start": "1239240",
    "end": "1244360"
  },
  {
    "text": "Diagnostics um I don't know how about you but in my team I have some lazy developers and usually they don't want",
    "start": "1244360",
    "end": "1250720"
  },
  {
    "text": "to write Rules by themselves if they already implemented by somebody and in cotland compiler we have some",
    "start": "1250720",
    "end": "1257039"
  },
  {
    "text": "warnings so for example example there are some warning on deprecated code used",
    "start": "1257039",
    "end": "1262320"
  },
  {
    "text": "warning and we can just reuse it and show it to user instead of implementing by ourselves so how do we do it we just",
    "start": "1262320",
    "end": "1269440"
  },
  {
    "text": "iterate over the Diagnostics and report this issues and the element that was",
    "start": "1269440",
    "end": "1275000"
  },
  {
    "text": "reported is coming from cotland compiler so technically like there shouldn't be",
    "start": "1275000",
    "end": "1280760"
  },
  {
    "text": "no problem because it's all coming from cin compiler and then it worked for some",
    "start": "1280760",
    "end": "1285960"
  },
  {
    "text": "time in production and then one user came to us and say like I have this code and it throws index out of bounds",
    "start": "1285960",
    "end": "1292640"
  },
  {
    "text": "exception with your analyzer and we started to think like how where from like how it could be",
    "start": "1292640",
    "end": "1299919"
  },
  {
    "text": "index out of bounds exception then after some investigation we realized when you",
    "start": "1299919",
    "end": "1305480"
  },
  {
    "text": "put deprecated annotation on some class you're not just deprecating the class",
    "start": "1305480",
    "end": "1311279"
  },
  {
    "text": "you're deprecating primary Constructor in in when you call uh when",
    "start": "1311279",
    "end": "1317400"
  },
  {
    "text": "you initialize some entry you're not just like creating an entry you",
    "start": "1317400",
    "end": "1322880"
  },
  {
    "text": "calling primary Constructor here while it's not visible it's still there and",
    "start": "1322880",
    "end": "1329120"
  },
  {
    "text": "this primary Constructor is deprecated so a compiler produces the warning",
    "start": "1329120",
    "end": "1335360"
  },
  {
    "text": "however there is no representation in the code because you haven't written this and we started to think what we can",
    "start": "1335360",
    "end": "1341279"
  },
  {
    "text": "do in this case after some like investigation we had to look into what intelligent does so we decided to be con",
    "start": "1341279",
    "end": "1348640"
  },
  {
    "text": "consistent with intelligy and just highlight the opening parenthesis just in this exact case but",
    "start": "1348640",
    "end": "1356480"
  },
  {
    "text": "that mean that we should always be careful because there could be some stuff that is not visible in the source",
    "start": "1356480",
    "end": "1362000"
  },
  {
    "text": "code but uh implicitly added by the compiler so okay we fixed a lot of",
    "start": "1362000",
    "end": "1368799"
  },
  {
    "text": "problems a lot of user feedback and we released sonar cotland 2.0 in",
    "start": "1368799",
    "end": "1374400"
  },
  {
    "text": "2021 with this we improved existing rules because we changed the approach we added new rules with semantic model so",
    "start": "1374400",
    "end": "1382320"
  },
  {
    "text": "some more advanced rules we updated uh external lters so sounds like impressive",
    "start": "1382320",
    "end": "1389240"
  },
  {
    "text": "work so we expected that the feedback would be like this like because we did",
    "start": "1389240",
    "end": "1396039"
  },
  {
    "start": "1392000",
    "end": "2404000"
  },
  {
    "text": "great job we tested everything but the feedback was like",
    "start": "1396039",
    "end": "1401720"
  },
  {
    "text": "this what happened uh the day maybe the next day",
    "start": "1401720",
    "end": "1407480"
  },
  {
    "text": "after we released it we C like a huge spamming thread in our",
    "start": "1407480",
    "end": "1412640"
  },
  {
    "text": "community Forum about that uh cotland sensor is too slow out of memory fails",
    "start": "1412640",
    "end": "1418360"
  },
  {
    "text": "like uh time dramatically increased so on analysis taking too long you're like",
    "start": "1418360",
    "end": "1423799"
  },
  {
    "text": "how what we we tested it like what the problem we could not reproduce this problem so what do you usually do if you",
    "start": "1423799",
    "end": "1431640"
  },
  {
    "text": "have such problem like this there are managers there are some uh Community people people from Paid customer they're",
    "start": "1431640",
    "end": "1437840"
  },
  {
    "text": "saying that we broke something we need to fix it and we have no idea what to do so we decided to do the most logical",
    "start": "1437840",
    "end": "1444720"
  },
  {
    "text": "stuff together meeting so you see that there is a PM on this meeting who is asking like we have a performance",
    "start": "1444720",
    "end": "1451159"
  },
  {
    "text": "degradation have no idea how to fix it like maybe you you have any ideas of course there were a lot of",
    "start": "1451159",
    "end": "1457600"
  },
  {
    "text": "smart ideas like parallelization caching there was one guy who told us like maybe",
    "start": "1457600",
    "end": "1463120"
  },
  {
    "text": "we can find the bottle I can actually fix it of course we threw him out of the window",
    "start": "1463120",
    "end": "1469679"
  },
  {
    "text": "but then like okay maybe he was right and we investigated and we found out the",
    "start": "1469679",
    "end": "1475240"
  },
  {
    "text": "first like the the bottle neck so the bottl neck was commanded out code rule",
    "start": "1475240",
    "end": "1481799"
  },
  {
    "text": "why why such rule can C the whole the big problem and why we could not find it",
    "start": "1481799",
    "end": "1487799"
  },
  {
    "text": "previously um this rule in order to understand what this rule like let's have a look into some code and you see",
    "start": "1487799",
    "end": "1495240"
  },
  {
    "text": "that here we have some Commons some Commons are like real commments are",
    "start": "1495240",
    "end": "1500399"
  },
  {
    "text": "natural language other commments are actually commanded code so this rule goes through all the comments and marks",
    "start": "1500399",
    "end": "1507120"
  },
  {
    "text": "the one that our code as an issue because we don't want you to comment out your code because it's probably a",
    "start": "1507120",
    "end": "1514200"
  },
  {
    "text": "mistake okay how it works before 2.0 so before the release that we did it works",
    "start": "1514200",
    "end": "1521600"
  },
  {
    "text": "stupid simple we iterated over all the comments we try to parse them if parsing was successful means it's C so we report",
    "start": "1521600",
    "end": "1528039"
  },
  {
    "text": "initi if person was not successful we do nothing and uh there was one interesting",
    "start": "1528039",
    "end": "1535159"
  },
  {
    "text": "problem here can you spot a problem here like when I look this into this uh line",
    "start": "1535159",
    "end": "1541760"
  },
  {
    "text": "I think okay it's obviously not a code however from cotlin parser it is a valid",
    "start": "1541760",
    "end": "1547600"
  },
  {
    "text": "code because world could be an infix function so every sentence with three or more words could be a valid cotlin code",
    "start": "1547600",
    "end": "1556399"
  },
  {
    "text": "so we had to do some ugly work around to fix this issue once we added semantic",
    "start": "1556399",
    "end": "1562880"
  },
  {
    "text": "in 2.0 like okay now we can fix this issue without this ugly working around so we fixed it by doing this instead of",
    "start": "1562880",
    "end": "1570480"
  },
  {
    "text": "just parsing we sort of compiled every commment and it worked but it was very",
    "start": "1570480",
    "end": "1578120"
  },
  {
    "text": "slow it was extremely slow and uh of course imagine you have",
    "start": "1578120",
    "end": "1583440"
  },
  {
    "text": "your Source uh code base with thousands of files in each of these files you have",
    "start": "1583440",
    "end": "1589720"
  },
  {
    "text": "hundreds of comments and every single comment is compiled and of course it's like a lot",
    "start": "1589720",
    "end": "1597840"
  },
  {
    "text": "of work for nothing and it was not like just this problems and other problems were",
    "start": "1597840",
    "end": "1604200"
  },
  {
    "text": "compiler box why because we started like using compiler on the input that is not",
    "start": "1604200",
    "end": "1609600"
  },
  {
    "text": "supposed to be compiled we found a few compiler bugs and of now they're fixed",
    "start": "1609600",
    "end": "1615320"
  },
  {
    "text": "but uh that was fun that these bugs led to out of memory in cotland",
    "start": "1615320",
    "end": "1620600"
  },
  {
    "text": "compiler another point is cot with mistakes it's obvious false negative",
    "start": "1620600",
    "end": "1625679"
  },
  {
    "text": "because like it is not compiled however we still want to report this then cot",
    "start": "1625679",
    "end": "1631720"
  },
  {
    "text": "not and cotland also not supported and of course like very slow so having all this problems having",
    "start": "1631720",
    "end": "1638919"
  },
  {
    "text": "all this management like saying like we need to fix it quickly we didn't know what to do and we made the decision that",
    "start": "1638919",
    "end": "1646080"
  },
  {
    "text": "we are not proud of we decided to comment out commented out",
    "start": "1646080",
    "end": "1653039"
  },
  {
    "text": "CAD it was like this in production for like one year and do you think how many",
    "start": "1653559",
    "end": "1659880"
  },
  {
    "text": "complaints we had zero because like the rule is not",
    "start": "1659880",
    "end": "1664919"
  },
  {
    "text": "working and it's not reporting issues like why should we complain we only complain when people have false",
    "start": "1664919",
    "end": "1670880"
  },
  {
    "text": "positives when they have false negative they're usually happy so yeah so the",
    "start": "1670880",
    "end": "1676320"
  },
  {
    "text": "best implementation of the rule just for your information is the rule that does nothing so then we started talking about",
    "start": "1676320",
    "end": "1684960"
  },
  {
    "text": "this at the conferences and there was first complaint they're like okay let's fix it so we implemented more ristics",
    "start": "1684960",
    "end": "1693279"
  },
  {
    "text": "algorithm probabilistic one so we try to understand whether there is a high probability that the code is uh that",
    "start": "1693279",
    "end": "1700720"
  },
  {
    "text": "this is a code and only after we have we calculated that the probability that",
    "start": "1700720",
    "end": "1706320"
  },
  {
    "text": "this is a code is high enough we parse it and this works pretty fast we so far",
    "start": "1706320",
    "end": "1713279"
  },
  {
    "text": "didn't spot a lot of false positives false negatives so I'm inviting you to",
    "start": "1713279",
    "end": "1718640"
  },
  {
    "text": "challenge and uh try to find when this doesn't work so yeah so far we are pretty happy",
    "start": "1718640",
    "end": "1726080"
  },
  {
    "text": "with this implementation okay that's it with the commented out code rule we fixed it people are happy but that's of course",
    "start": "1726080",
    "end": "1733240"
  },
  {
    "text": "not the whole story because of course we have to maintain what we did so what I think is the most reported rule that we",
    "start": "1733240",
    "end": "1740519"
  },
  {
    "text": "maintained like we released a lot of fixes most of the time this is unnecessary import rule so",
    "start": "1740519",
    "end": "1748640"
  },
  {
    "text": "something that is so stupid so like not important it's not any bug it's not like",
    "start": "1748640",
    "end": "1754200"
  },
  {
    "text": "critical issue but it cost so much harm and so much work for us so how do we",
    "start": "1754200",
    "end": "1760640"
  },
  {
    "text": "usually Implement a necessary import Ru in the languages we try to collect some references in the code and try to map",
    "start": "1760640",
    "end": "1768159"
  },
  {
    "text": "whether there is an import of this reference then we know that in cotland there is some problems with aring",
    "start": "1768159",
    "end": "1773640"
  },
  {
    "text": "Imports some problems with K dos so we have to treat them separately but other",
    "start": "1773640",
    "end": "1780000"
  },
  {
    "text": "than that looks fine so all remaining Imports that were not found in the code are un used and this worked for some",
    "start": "1780000",
    "end": "1788000"
  },
  {
    "text": "time and then one of our colleague came to us they're like I have companion object and it doesn't work it reports",
    "start": "1788000",
    "end": "1795000"
  },
  {
    "text": "the issues un used here in this code you can see that there is a class from here",
    "start": "1795000",
    "end": "1800320"
  },
  {
    "text": "we are calling my constant from a combion object and it's obviously used but we",
    "start": "1800320",
    "end": "1805799"
  },
  {
    "text": "report it as an unused one what's the problem the problem here",
    "start": "1805799",
    "end": "1811640"
  },
  {
    "text": "that actually the my class the name of my class importable name is not my class",
    "start": "1811640",
    "end": "1819120"
  },
  {
    "text": "the importable name is like my class Point companion and uh we have to somehow",
    "start": "1819120",
    "end": "1824919"
  },
  {
    "text": "figure this out okay we figured this out we mented the fix and immediately like",
    "start": "1824919",
    "end": "1830640"
  },
  {
    "text": "the next hour after we uh rele the fix now uh like not in the production but",
    "start": "1830640",
    "end": "1837000"
  },
  {
    "text": "for our uh colleagues the same colleague came to us okay but it doesn't work with named companion",
    "start": "1837000",
    "end": "1843080"
  },
  {
    "text": "object some people they're not just using companion object they're giving it a name because you know like if you have",
    "start": "1843080",
    "end": "1849960"
  },
  {
    "text": "your favorite variable you're giving it a name so it's like a pet so what we are",
    "start": "1849960",
    "end": "1855960"
  },
  {
    "text": "going to do the problem that here we were uh like hardcoded we hardcoded the",
    "start": "1855960",
    "end": "1861000"
  },
  {
    "text": "companion stuff but in reality if it's named we cannot guess what the name is",
    "start": "1861000",
    "end": "1867039"
  },
  {
    "text": "it the name that the people gave to us and like Okay sounds like an issue what we're",
    "start": "1867039",
    "end": "1872320"
  },
  {
    "text": "going to do and then after like talking and I'm not completely sure if it was",
    "start": "1872320",
    "end": "1879519"
  },
  {
    "text": "implemented just in between but however we found out that in the new version of",
    "start": "1879519",
    "end": "1884600"
  },
  {
    "text": "cotland compiler there is a function called is companion object so we can",
    "start": "1884600",
    "end": "1889880"
  },
  {
    "text": "just use it and forget about all the issues so sometimes cotland compiler when they face issues they improve it",
    "start": "1889880",
    "end": "1897240"
  },
  {
    "text": "and improve the API so okay that was it we were happy",
    "start": "1897240",
    "end": "1903159"
  },
  {
    "text": "for some time and then another problem came out it's unresolved Imports why in",
    "start": "1903159",
    "end": "1909480"
  },
  {
    "text": "order to build the semantic model we need a class pass like in order to compile project you need a class pass",
    "start": "1909480",
    "end": "1915200"
  },
  {
    "text": "and it's obvious that we need a class pass in some cases in some situations class past might be lost because people",
    "start": "1915200",
    "end": "1922559"
  },
  {
    "text": "might not configure properly properly their project or something else happened",
    "start": "1922559",
    "end": "1927639"
  },
  {
    "text": "so for some reason it was not picked up and it means that some classes were not",
    "start": "1927639",
    "end": "1933799"
  },
  {
    "text": "resolved if classes were not resolved there is no way how we can map the UT to",
    "start": "1933799",
    "end": "1939120"
  },
  {
    "text": "the usage Because the actual type would be undefined so technically you can see",
    "start": "1939120",
    "end": "1945639"
  },
  {
    "text": "that my class is used and if everything is fine with class pass it won't be reported but because",
    "start": "1945639",
    "end": "1953159"
  },
  {
    "text": "type was not resolved it's reported unfortunately we cannot do much here",
    "start": "1953159",
    "end": "1958799"
  },
  {
    "text": "because we cannot produce produce the class pass if we we only can get it and",
    "start": "1958799",
    "end": "1965399"
  },
  {
    "text": "uh the thing is like what we did we decided to do some safe measure if we",
    "start": "1965399",
    "end": "1970880"
  },
  {
    "text": "found some unresolved Imports we try to filter them out and not report anything",
    "start": "1970880",
    "end": "1977039"
  },
  {
    "text": "on them on the one head it fixes the issue because we don't report false",
    "start": "1977039",
    "end": "1982360"
  },
  {
    "text": "positives on the other hand if there is issue in such and resolved import we are",
    "start": "1982360",
    "end": "1988200"
  },
  {
    "text": "not reporting it to so it's sort of a trade-off that we had to accept Okay do",
    "start": "1988200",
    "end": "1994399"
  },
  {
    "text": "you think that's it with unused import rule of course no another thing are",
    "start": "1994399",
    "end": "2001720"
  },
  {
    "text": "delegates I raise your hands if you use delegate in goland oh not a lot of",
    "start": "2001720",
    "end": "2008919"
  },
  {
    "text": "people I think Android people they love delegates a lot for some reasons so",
    "start": "2008919",
    "end": "2015559"
  },
  {
    "text": "what's the problem with delegates uh in when you write delegate you use keyword",
    "start": "2015559",
    "end": "2021639"
  },
  {
    "text": "by however what you see in import it's absolutely not what you write in the",
    "start": "2021639",
    "end": "2027159"
  },
  {
    "text": "code however we need to somehow find the mapping between",
    "start": "2027159",
    "end": "2032440"
  },
  {
    "text": "this and we're like okay we forgot about delegates we need to treat them",
    "start": "2032440",
    "end": "2037880"
  },
  {
    "text": "separately way so I'm not going to share with you how exactly to fix this because",
    "start": "2037880",
    "end": "2044000"
  },
  {
    "text": "the code is ugly uh there is one my open source project uh that I did for uh more",
    "start": "2044000",
    "end": "2050118"
  },
  {
    "text": "Hands-On version of the stock you can check this I'll share the link however like uh in simple words we",
    "start": "2050119",
    "end": "2058358"
  },
  {
    "text": "can find it from semantic with a few more steps but if there is no semantic",
    "start": "2058359",
    "end": "2063599"
  },
  {
    "text": "model we again can just skip skip delegates import of delegates because we",
    "start": "2063599",
    "end": "2069800"
  },
  {
    "text": "cannot guess uh without semantic okay that was it without with",
    "start": "2069800",
    "end": "2077158"
  },
  {
    "text": "the delegates we thought like okay we're almost done but no we forgot another",
    "start": "2077159",
    "end": "2083200"
  },
  {
    "text": "interesting feature of cotlin which are overloaded operators um I love this",
    "start": "2083200",
    "end": "2088960"
  },
  {
    "text": "feature in C++ um then I used Java and they really",
    "start": "2088960",
    "end": "2094280"
  },
  {
    "text": "what really said that we don't have it then I switched to SCA and I enjoyed like for the first time I enjoyed that I",
    "start": "2094280",
    "end": "2100920"
  },
  {
    "text": "can do whatever I want in Scola and then for the rest three years of my career in Scola I hated this feature",
    "start": "2100920",
    "end": "2108320"
  },
  {
    "text": "so and the point is like in cotland they try to they have some tradeoff you",
    "start": "2108320",
    "end": "2113880"
  },
  {
    "text": "cannot overload everything but at some point some functions you can overload and it leads to nice dsls so what the",
    "start": "2113880",
    "end": "2121000"
  },
  {
    "text": "problem here uh the same problem as we have as delegates what's written in the",
    "start": "2121000",
    "end": "2126280"
  },
  {
    "text": "use case it's it's absolutely not what is in the import so we again need to",
    "start": "2126280",
    "end": "2132520"
  },
  {
    "text": "somehow map find out it from semantic and um especially if these uh",
    "start": "2132520",
    "end": "2139880"
  },
  {
    "text": "operators are in separate file that you have to import so okay we can find this",
    "start": "2139880",
    "end": "2145520"
  },
  {
    "text": "information is semantic again the code is ugly but we can do it and uh we fixed this with contains",
    "start": "2145520",
    "end": "2154800"
  },
  {
    "text": "but this is my favorite another operator which is and V why it's my favorite one",
    "start": "2154800",
    "end": "2160800"
  },
  {
    "text": "because from the parcer point of view there is no difference between the call with invoke and like ordinary function",
    "start": "2160800",
    "end": "2168440"
  },
  {
    "text": "call so if we want to visit like the references and understand that this reference is actually the call of invoke",
    "start": "2168440",
    "end": "2175560"
  },
  {
    "text": "we need to visit all the function calls in the file and it's sort of expensive",
    "start": "2175560",
    "end": "2181200"
  },
  {
    "text": "because we need to like visit them and we need to somehow save them uh so we made the decision that we are doing it",
    "start": "2181200",
    "end": "2189359"
  },
  {
    "text": "lazy we are only visiting all the function calls to check for invoke if",
    "start": "2189359",
    "end": "2194520"
  },
  {
    "text": "there is at least one invoke import because usually people don't use it and it brought us a little bit of a",
    "start": "2194520",
    "end": "2201040"
  },
  {
    "text": "performance benefit so yeah we fixed this stuff and a bunch of other stuff",
    "start": "2201040",
    "end": "2207760"
  },
  {
    "text": "that like do you think that's it because we like are short on",
    "start": "2207760",
    "end": "2212839"
  },
  {
    "text": "time okay I won't keep the Intrigue for so long no that's not",
    "start": "2212839",
    "end": "2219000"
  },
  {
    "text": "the another the another problem came from where we didn't expect it at all",
    "start": "2219000",
    "end": "2224760"
  },
  {
    "text": "like Java 16 come on we are talking about cotland here like how there like what the problem how Java could be",
    "start": "2224760",
    "end": "2232240"
  },
  {
    "text": "here unfortunately or fortunately golin is a language that could be compiled to bite",
    "start": "2232240",
    "end": "2238359"
  },
  {
    "text": "code so technically they can use Java API and we can use Scotland everywhere where we can use Java and it means that",
    "start": "2238359",
    "end": "2244920"
  },
  {
    "text": "we still depend on Java if we are talking about about cotlin gvm",
    "start": "2244920",
    "end": "2250800"
  },
  {
    "text": "so what was the problem uh one user came to us and said like I have this code",
    "start": "2250800",
    "end": "2257680"
  },
  {
    "text": "that is using cotlin um an extension function from cotlin streams to list and",
    "start": "2257680",
    "end": "2263680"
  },
  {
    "text": "your analyzer complains that this import is not used however it's definitely used",
    "start": "2263680",
    "end": "2269920"
  },
  {
    "text": "and you're like yes it's used so then my first thought that okay probably some semantic was not resolved properly but",
    "start": "2269920",
    "end": "2276680"
  },
  {
    "text": "then when I checked it like oh no it's indeed not working like this so after some investigation I found",
    "start": "2276680",
    "end": "2284359"
  },
  {
    "text": "out that okay there is an extension function to to list starting cotlin 1.2",
    "start": "2284359",
    "end": "2290319"
  },
  {
    "text": "why because Java streams had very poor API and cotlin wanted to extend it which makes sense then in Java 16 Java was a",
    "start": "2290319",
    "end": "2299560"
  },
  {
    "text": "little bit late to understand that we need to do something with an API and add it to list function as a member function",
    "start": "2299560",
    "end": "2306920"
  },
  {
    "text": "if you know cotland you know that member functions have a priority over extension",
    "start": "2306920",
    "end": "2312400"
  },
  {
    "text": "functions so when the analysis is performed we resolve the list function",
    "start": "2312400",
    "end": "2317599"
  },
  {
    "text": "to the Java 1 instead of um the list extension",
    "start": "2317599",
    "end": "2323440"
  },
  {
    "text": "function but like it sounds like logical except that the user is on Java",
    "start": "2323440",
    "end": "2329240"
  },
  {
    "text": "11 so the point is that we were not taken the right version of java we were taking Java from runtime but we should",
    "start": "2329240",
    "end": "2336319"
  },
  {
    "text": "have taken the Java from uh release version so okay we still have this",
    "start": "2336319",
    "end": "2342880"
  },
  {
    "text": "problem but we know how to fix it and to fix this coming soon and the fun fact",
    "start": "2342880",
    "end": "2348119"
  },
  {
    "text": "that I discovered that intelligy had the same problem Scotland that I reported",
    "start": "2348119",
    "end": "2354000"
  },
  {
    "text": "this issue to them uh so um and it's also not fixed",
    "start": "2354000",
    "end": "2360160"
  },
  {
    "text": "yet so do you think that's it with a new import",
    "start": "2360160",
    "end": "2366079"
  },
  {
    "text": "Ru of of course it isn't and I think while I'm speaking here uh my colleagues are answering some Community threats",
    "start": "2366079",
    "end": "2374200"
  },
  {
    "text": "however uh our talk time is limited so I just wanted to let you know that this is",
    "start": "2374200",
    "end": "2381560"
  },
  {
    "text": "a writing static code analyzer is the sort of an endless story of balancing between false positives false negatives",
    "start": "2381560",
    "end": "2388079"
  },
  {
    "text": "we can try to achieve as good precision as possible but we cannot like perfectly",
    "start": "2388079",
    "end": "2393200"
  },
  {
    "text": "solve this problem because it's unsolvable problem uh so yeah but we",
    "start": "2393200",
    "end": "2398720"
  },
  {
    "text": "really appreciate your feedback and we try to improve our products so let's talk about our",
    "start": "2398720",
    "end": "2406760"
  },
  {
    "start": "2404000",
    "end": "2487000"
  },
  {
    "text": "achievements so we have improved precisions because now we are using",
    "start": "2406760",
    "end": "2412200"
  },
  {
    "text": "proper engine and don't use the generalized one we have 133 rules we did",
    "start": "2412200",
    "end": "2418440"
  },
  {
    "text": "18 releases actually it's outdated information because once when I'm in Australia my colleagues just released",
    "start": "2418440",
    "end": "2425359"
  },
  {
    "text": "the 19th cotland version so we implemented rules for regular",
    "start": "2425359",
    "end": "2430920"
  },
  {
    "text": "Expressions some security rules rules for coroutines and rules for grade cotland DSL it was a huge milestone for",
    "start": "2430920",
    "end": "2437760"
  },
  {
    "text": "us of course updated external lter mappings and now it's a part of the process so users of detect Android L and",
    "start": "2437760",
    "end": "2445200"
  },
  {
    "text": "KY Lind uh will always have the latest mappings and we improved our community",
    "start": "2445200",
    "end": "2450319"
  },
  {
    "text": "handling we try to answer fast we try to react and try to be nice with our users",
    "start": "2450319",
    "end": "2456280"
  },
  {
    "text": "uh so a lot of cases that I showed you are actually coming from our community",
    "start": "2456280",
    "end": "2461520"
  },
  {
    "text": "Forum from the real users so don't hesitate to go and share your bugs false",
    "start": "2461520",
    "end": "2467560"
  },
  {
    "text": "positives complaints because we try to fix it try to listen to you and of",
    "start": "2467560",
    "end": "2473040"
  },
  {
    "text": "course don't hesitate to write some praise if you like what we do because you know in community we only have",
    "start": "2473040",
    "end": "2478880"
  },
  {
    "text": "complaints and sometimes it feel like actually do we do at least something",
    "start": "2478880",
    "end": "2484040"
  },
  {
    "text": "right and uh yeah and some takeaways",
    "start": "2484040",
    "end": "2489119"
  },
  {
    "start": "2487000",
    "end": "2557000"
  },
  {
    "text": "sonar supports cotland static analysis for cotland is fun sometimes pain",
    "start": "2489119",
    "end": "2494720"
  },
  {
    "text": "sometimes huge pain but still fun uh be active Community member or as somebody",
    "start": "2494720",
    "end": "2500480"
  },
  {
    "text": "said like never underestimate the power of complaining and RI if needed in the very",
    "start": "2500480",
    "end": "2506920"
  },
  {
    "text": "beginning I showed you the approach that seemed to work but it was not extensible",
    "start": "2506920",
    "end": "2512240"
  },
  {
    "text": "and we could not move out of there don't try to like build some a L monster out",
    "start": "2512240",
    "end": "2518560"
  },
  {
    "text": "of this if you face a situation like this sometimes there is an option of just getting rid of this and write",
    "start": "2518560",
    "end": "2524440"
  },
  {
    "text": "something from scratch and some special things this is",
    "start": "2524440",
    "end": "2529920"
  },
  {
    "text": "our initial cotlin quote uh like the two people that believed in this project together with me and draw it to cotlin",
    "start": "2529920",
    "end": "2538920"
  },
  {
    "text": "2.0 and this is the actually the gvm sad in sonar who takes care of the sonar",
    "start": "2538920",
    "end": "2545880"
  },
  {
    "text": "cotlin at the moment answering Community threats fixing false positives together with uh Java analyzer with go analyzer",
    "start": "2545880",
    "end": "2553480"
  },
  {
    "text": "and a bunch of other stuff so that this guys and of course thank you for",
    "start": "2553480",
    "end": "2559200"
  },
  {
    "start": "2557000",
    "end": "2572000"
  },
  {
    "text": "listening to me for being here and I hope you enjoyed this talk and learn something",
    "start": "2559200",
    "end": "2566440"
  },
  {
    "text": "new",
    "start": "2570240",
    "end": "2573240"
  }
]