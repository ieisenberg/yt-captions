[
  {
    "text": "[Music]",
    "start": "2550",
    "end": "9880"
  },
  {
    "text": "so uh um we'll be talking about how uh modern C++ we'll go over what that what",
    "start": "9880",
    "end": "15120"
  },
  {
    "text": "that means here in a little bit um using it uh in a non-trivial very latency",
    "start": "15120",
    "end": "20519"
  },
  {
    "text": "sensitive kind of application what it what it tends to do and and sort of lessons learned from it um so a little",
    "start": "20519",
    "end": "27279"
  },
  {
    "text": "bit about me uh my name is Tod Montgomery uh co-founder and CTO of 29",
    "start": "27279",
    "end": "32640"
  },
  {
    "text": "West doing some high performance messaging uh acquired by Informatica in",
    "start": "32640",
    "end": "37760"
  },
  {
    "text": "2010 and uh probably for the last year I've been doing my own independent Consulting um and Aaron is actually one",
    "start": "37760",
    "end": "44200"
  },
  {
    "text": "of those pieces of Consulting so s of what we'll go over here is uh Aaron and",
    "start": "44200",
    "end": "49680"
  },
  {
    "text": "C++ we'll give a little bit of a primer of what Aaron is I give a little bit of background about the kind of environment",
    "start": "49680",
    "end": "55440"
  },
  {
    "text": "that it looks like and we'll talk about what constitutes modern C+ there's actually a term for this defined by the",
    "start": "55440",
    "end": "61840"
  },
  {
    "text": "the author Scott Meyer and we'll talk about how it's adopted in Aaron and",
    "start": "61840",
    "end": "67479"
  },
  {
    "text": "lessons we learn and then sort of what's next so Aaron and",
    "start": "67479",
    "end": "73080"
  },
  {
    "text": "C++ Aaron tries to provide a really modern messaging transport so you know",
    "start": "73080",
    "end": "79159"
  },
  {
    "text": "if you think about the protocols that we have out there that that are mostly used in most applications we use things like",
    "start": "79159",
    "end": "85720"
  },
  {
    "text": "TCP if we're in doing Telecom we may be using things like SCP p and a few other",
    "start": "85720",
    "end": "91479"
  },
  {
    "text": "based protocols um and if we are doing something in that's more latency sensitive we may be using a vast array",
    "start": "91479",
    "end": "98439"
  },
  {
    "text": "of different protocols 29 West provided you know several of them but there's other vendors who have provided them as",
    "start": "98439",
    "end": "105040"
  },
  {
    "text": "well typ go with FTL uh you know Sol us with theirs uh you know and lots of",
    "start": "105040",
    "end": "110520"
  },
  {
    "text": "others as well and so lot of the things that are sort of inherent in those",
    "start": "110520",
    "end": "117000"
  },
  {
    "text": "protocols and the way that they work is that they're actually built on most technology that at best is little more",
    "start": "117000",
    "end": "123200"
  },
  {
    "text": "than 10 years old so modern approaches have changed drastically in terms of you",
    "start": "123200",
    "end": "130679"
  },
  {
    "text": "know basically the architecture of our CPUs how systems basically work so",
    "start": "130679",
    "end": "136280"
  },
  {
    "text": "adopting a more modern approach is really what Aaron tries to do it's a very different architecture than most",
    "start": "136280",
    "end": "141959"
  },
  {
    "text": "other implementations so the first thing is you know being one who's looked at",
    "start": "141959",
    "end": "147400"
  },
  {
    "text": "messaging for a large number of years most products are you know loaded with features and they're complex and they're",
    "start": "147400",
    "end": "154720"
  },
  {
    "text": "simply just not fast enough uh you know if you are in trading Technologies you'll know that you know they're okay",
    "start": "154720",
    "end": "162200"
  },
  {
    "text": "they're better than they were but from where they could be they're still quite a bit a ways and it's not about just low",
    "start": "162200",
    "end": "168720"
  },
  {
    "text": "latency it's also about predictable latency and sorry it's a little cut off cut off the top there um so it's not",
    "start": "168720",
    "end": "176519"
  },
  {
    "text": "just that latency is low it's that latency is is predictable at all",
    "start": "176519",
    "end": "181760"
  },
  {
    "text": "percentiles or as many as you can get and it's also not simply about you know",
    "start": "181760",
    "end": "188760"
  },
  {
    "text": "being predictable in low latency when there's hardly anything running it's also having that when the system is",
    "start": "188760",
    "end": "194200"
  },
  {
    "text": "operating at high throughput as well so we live in a world which is basically",
    "start": "194200",
    "end": "200360"
  },
  {
    "text": "multi everything multi cor multi-socket cloud and we have a vast array of other",
    "start": "200360",
    "end": "206080"
  },
  {
    "text": "kinds of transports that we need to run over um you know IP and UDP uh IPC but",
    "start": "206080",
    "end": "212519"
  },
  {
    "text": "we also have things like ban RDMA pcie we have others that are also coming so just ignoring those or not treating them",
    "start": "212519",
    "end": "219080"
  },
  {
    "text": "as first class citizens doesn't help right so Aaron tries to take this a new",
    "start": "219080",
    "end": "224879"
  },
  {
    "text": "approach and so the team is you know myself Martin Thompson and Richard waron whove worked on this for about the last",
    "start": "224879",
    "end": "231280"
  },
  {
    "text": "two years a little bit over two years from a messaging perspective messaging is fairly simple you have Publishers you",
    "start": "231280",
    "end": "238200"
  },
  {
    "text": "have subscribers you're going to connect them they operate over some sort of channnel and within that you may have multiple",
    "start": "238200",
    "end": "243680"
  },
  {
    "text": "streams within a channel and we took the stpoint that we didn't want to have a",
    "start": "243680",
    "end": "248920"
  },
  {
    "text": "new framework we didn't want to create something like JMS you know 3.0 because we already have jmss 2.0 and it's it's a",
    "start": "248920",
    "end": "255120"
  },
  {
    "text": "big disaster anyway so we wanted to make something which was not a framework but a library something which was very easy",
    "start": "255120",
    "end": "260320"
  },
  {
    "text": "to integrate and it provided the right extractions that applications can be built on and from a composable design",
    "start": "260320",
    "end": "267400"
  },
  {
    "text": "perspective we wanted something was much more closer instead of to a messaging system much more as I mentioned a",
    "start": "267400",
    "end": "273880"
  },
  {
    "text": "messaging transport so an OSI layer for transport for message oriented streams that actually has some",
    "start": "273880",
    "end": "280479"
  },
  {
    "text": "connotations we wanted to basically have these five properties that are part of the OSI layer for transport services",
    "start": "280479",
    "end": "287759"
  },
  {
    "text": "connection or communication reliability flow control flow control in most messaging systems um is at best a second",
    "start": "287759",
    "end": "295840"
  },
  {
    "text": "class concern and in most cases it has no concern whatsoever at all um congestion control and avoidance some",
    "start": "295840",
    "end": "302840"
  },
  {
    "text": "situations you want it some you don't so you want it to basically be something that can be turned off if necessary any",
    "start": "302840",
    "end": "309120"
  },
  {
    "text": "the idea of multiplexing as I mentioned it's a multi everything world so you just don't have",
    "start": "309120",
    "end": "315080"
  },
  {
    "text": "a single publisher or a single set subscriber you have varying demands some",
    "start": "315080",
    "end": "320120"
  },
  {
    "text": "Publishers that are very active some subscribers are very active and you also",
    "start": "320120",
    "end": "326160"
  },
  {
    "text": "want have multiple channels multiple streams within them so we started Aaron",
    "start": "326160",
    "end": "331440"
  },
  {
    "text": "with the idea of java because we wanted something that we could iterate on and evolve very very",
    "start": "331440",
    "end": "337000"
  },
  {
    "text": "rapidly and so we came up originally with a set of design principles that helped us to basically decide if we had",
    "start": "337000",
    "end": "344479"
  },
  {
    "text": "two different things which one to pick right and so these are ranked in order",
    "start": "344479",
    "end": "349919"
  },
  {
    "text": "of Priority First garbage free and steady state running was something that",
    "start": "349919",
    "end": "355319"
  },
  {
    "text": "you know for Java not new if you're doing anything with latency but for most of the Java community Community is not something that is much of a concern",
    "start": "355319",
    "end": "362759"
  },
  {
    "text": "smart batching basically being able to do high throughput and low latency at the same time wave free algorithms in",
    "start": "362759",
    "end": "368919"
  },
  {
    "text": "the message path originally we to looked at this is lck free but we decided we could do wave free and then changed it",
    "start": "368919",
    "end": "375639"
  },
  {
    "text": "non-blocking IO no exceptional cases apply the s writer principle preferred",
    "start": "375639",
    "end": "380759"
  },
  {
    "text": "unshared State avoid unnecessary data copies these are these different principles actually helped us to when",
    "start": "380759",
    "end": "386560"
  },
  {
    "text": "given a choice figure out which one would be the best because it basically led us to believe it any choice would",
    "start": "386560",
    "end": "393280"
  },
  {
    "text": "fit into one of these and let us rank them it's a very interesting thing this",
    "start": "393280",
    "end": "398479"
  },
  {
    "text": "also carries over from not just the Java but into the C++ side where we have the",
    "start": "398479",
    "end": "403639"
  },
  {
    "text": "ability to basically look at different things and come up with what would be the best way of handling it we'll talk about that in a little",
    "start": "403639",
    "end": "409800"
  },
  {
    "text": "bit architecturally um what Aaron is doing",
    "start": "409800",
    "end": "415400"
  },
  {
    "text": "is replicating a log from a publisher to a set of subscribers",
    "start": "415400",
    "end": "420440"
  },
  {
    "text": "okay same kind of idea as kofka in that you're replicating a log however Aaron",
    "start": "420440",
    "end": "426199"
  },
  {
    "text": "is a little different in that it really means replicating the log replicating every single thing including the",
    "start": "426199",
    "end": "431520"
  },
  {
    "text": "protocol that is associated with getting that log over to the other side or the other sides so if we look at here we",
    "start": "431520",
    "end": "438720"
  },
  {
    "text": "look at what something we call a log buffer that is setting on the publisher it needs to get to the subscriber and by",
    "start": "438720",
    "end": "444560"
  },
  {
    "text": "extension we also have other Publishers who need to get them to other subscribers so we need to have the ability to go go in both",
    "start": "444560",
    "end": "451120"
  },
  {
    "text": "directions so to do that you have to put something in the middle you have to have some sort of media that allows a center",
    "start": "451120",
    "end": "457360"
  },
  {
    "text": "to send to a receiver and that media could be UDP infin band PCI all kinds of",
    "start": "457360",
    "end": "463479"
  },
  {
    "text": "different Technologies so the idea of having the media be something which is pluggable was important to us and as I",
    "start": "463479",
    "end": "470479"
  },
  {
    "text": "said you're just replicating that same log buffer or that log on the subscriber that is on the",
    "start": "470479",
    "end": "476960"
  },
  {
    "text": "publisher but to do that you have a lot of different housekeeping to do so we",
    "start": "476960",
    "end": "482319"
  },
  {
    "text": "separated that housekeeping into something called a conductor that conductor takes events and administration commands and basically",
    "start": "482319",
    "end": "489960"
  },
  {
    "text": "does the you know the administration of those buffers and then we wrap this into",
    "start": "489960",
    "end": "496800"
  },
  {
    "text": "the different pieces or architecturally the pieces that we see the client is",
    "start": "496800",
    "end": "502039"
  },
  {
    "text": "what integrates with the application and the media driver does the nasty job of sending things to the network uh and and",
    "start": "502039",
    "end": "508479"
  },
  {
    "text": "also has its own you know Administration and everything else it's own conductor this is basically the architecture and",
    "start": "508479",
    "end": "515320"
  },
  {
    "text": "if you look at the code you know we've we also believe that",
    "start": "515320",
    "end": "520800"
  },
  {
    "text": "you should be able to look at the code and see names of classes names of components that fit into this so all the",
    "start": "520800",
    "end": "527320"
  },
  {
    "text": "components have these names so there may be some you know a",
    "start": "527320",
    "end": "532560"
  },
  {
    "text": "little bit of uh information that's clarifying here such as we have client conductor and Driver conductor but those",
    "start": "532560",
    "end": "538839"
  },
  {
    "text": "by themselves you know should give you an idea of what what they what their jobs are and what",
    "start": "538839",
    "end": "543880"
  },
  {
    "text": "they do so that's basically erron but how does C++ fit into this I mentioned",
    "start": "543880",
    "end": "550200"
  },
  {
    "text": "that we did this in in Java first and that we've it iterated on the design in",
    "start": "550200",
    "end": "555560"
  },
  {
    "text": "Java we've also iterated on the design of C++ but we've started by doing this",
    "start": "555560",
    "end": "562000"
  },
  {
    "text": "taking the architecture and C++ goes on the client side and basically that's it so that",
    "start": "562000",
    "end": "570079"
  },
  {
    "text": "gives the ability to have a C++ application that talks to a job application or job application that talk",
    "start": "570079",
    "end": "576320"
  },
  {
    "text": "to C++ or C++ that talks to C++ the media driver itself you know can",
    "start": "576320",
    "end": "583079"
  },
  {
    "text": "be just Java basically and that's what's currently available the media driver",
    "start": "583079",
    "end": "588920"
  },
  {
    "text": "itself is currently Java so the first thing is don't panic okay just because",
    "start": "588920",
    "end": "594000"
  },
  {
    "text": "it's Java doesn't mean it's slow in fact it's quite fast but we do intentionally plan to do a C++ version of the driver",
    "start": "594000",
    "end": "601000"
  },
  {
    "text": "in fact it's in it's in the works and it's one of our side projects so for the moment don't be too",
    "start": "601000",
    "end": "608680"
  },
  {
    "text": "put off by the fact that the C that it's not C++ all the way your application is",
    "start": "608680",
    "end": "614279"
  },
  {
    "text": "simply writing into share memory reading from share memory if it's doing C++ and",
    "start": "614279",
    "end": "619800"
  },
  {
    "text": "if it's doing IPC the driver is just there as an Administration tool it's creating files it's removing them it's",
    "start": "619800",
    "end": "626880"
  },
  {
    "text": "sort of orchestrating things but it's not in the message pack have so again don't",
    "start": "626880",
    "end": "633839"
  },
  {
    "text": "panic so what constitutes modern C++ so we'll talk about what that really",
    "start": "633839",
    "end": "640680"
  },
  {
    "text": "means and the first thing is throughout this whole thing I'll try not the batch okay I'm not going to try to bash",
    "start": "640680",
    "end": "646360"
  },
  {
    "text": "C++ I'm going to try not to bash Java I'm going to try not to bash any other languages it's going to be hard it's",
    "start": "646360",
    "end": "653320"
  },
  {
    "text": "going to be real hard but we're going to try to do this in a you know a good spirit so the first thing is modern C++",
    "start": "653320",
    "end": "660880"
  },
  {
    "text": "is basically Scott Meyer's book this is a fantastic book if you how many of you",
    "start": "660880",
    "end": "666240"
  },
  {
    "text": "know this book okay if you if you do use C++ and",
    "start": "666240",
    "end": "672360"
  },
  {
    "text": "you're thinking about using some of the newer features in C++ 11 get this book",
    "start": "672360",
    "end": "677839"
  },
  {
    "text": "it has a lot of really good examples and a lot of good clarifications um and when you think",
    "start": "677839",
    "end": "683279"
  },
  {
    "text": "about C++ modern C++ which means basically C++ 11 and on then this is the",
    "start": "683279",
    "end": "689839"
  },
  {
    "text": "book to have um it's not a reference it's more of a here's what this means",
    "start": "689839",
    "end": "696279"
  },
  {
    "text": "here's how to use it here's how to not use it which is just as important and here's how to think about it so all that",
    "start": "696279",
    "end": "702760"
  },
  {
    "text": "is very very good so modern C++ if I had to sum up",
    "start": "702760",
    "end": "709200"
  },
  {
    "text": "what modern C++ really means is resource ownership in lifetime",
    "start": "709200",
    "end": "715720"
  },
  {
    "text": "is made a lot more explicit it also has encapsulated much much better this is the the sort of the",
    "start": "715720",
    "end": "723160"
  },
  {
    "text": "founding difference between basically C++ 98 and previous and C++ 11 and all",
    "start": "723160",
    "end": "730959"
  },
  {
    "text": "the years in between those two standards a lot had been learned in terms of how",
    "start": "730959",
    "end": "736040"
  },
  {
    "text": "to basically look at object lifetime resource ownership things like that a",
    "start": "736040",
    "end": "741560"
  },
  {
    "text": "lot of the best practices got wrapped up and codified into idioms within C++",
    "start": "741560",
    "end": "747040"
  },
  {
    "text": "11 so that's the first thing the idioms that are involved the first",
    "start": "747040",
    "end": "752560"
  },
  {
    "text": "idiom here is resource acquisition is initialization",
    "start": "752560",
    "end": "757880"
  },
  {
    "text": "R and this is permeated throughout the whole Library uh and and the language",
    "start": "757880",
    "end": "764560"
  },
  {
    "text": "here's just a couple examples a lock guard is a mechanism where when it is",
    "start": "764560",
    "end": "770199"
  },
  {
    "text": "instantiated it lock it it takes a lock and when it is destructed it releases a lock so you can put it on the stack you",
    "start": "770199",
    "end": "777760"
  },
  {
    "text": "can also put it in an object you can put it wherever you like and wherever it's constructed it acquires a",
    "start": "777760",
    "end": "784160"
  },
  {
    "text": "lock and when it is destroyed it releases it simple right that has a kind",
    "start": "784160",
    "end": "790800"
  },
  {
    "text": "of a profound look now this is not new this has been around since actually in the early 90s um if you look at some of",
    "start": "790800",
    "end": "797760"
  },
  {
    "text": "the work that was done by Doug Schmidt and others um you know they were using guards for locks and things like this",
    "start": "797760",
    "end": "803920"
  },
  {
    "text": "for a long time but having them as part of the library took a long time it it",
    "start": "803920",
    "end": "809199"
  },
  {
    "text": "wasn't hard so much as it was just it just took a while for that to permeate to that level where it affected the",
    "start": "809199",
    "end": "816160"
  },
  {
    "text": "language itself um unique pointer another one",
    "start": "816160",
    "end": "821279"
  },
  {
    "text": "smart pointer and all the ones that we'll talk about here in a minute all these are concerned with scope so when",
    "start": "821279",
    "end": "827320"
  },
  {
    "text": "you have the resource acquisition is analization you acquire you create you",
    "start": "827320",
    "end": "833360"
  },
  {
    "text": "know a unique object when it is you know basically comes into scope and when it goes out of scope it's automatically",
    "start": "833360",
    "end": "840600"
  },
  {
    "text": "released that would be what unique pointer does for a Unique Piece so there's no sharing and that brings us to",
    "start": "840600",
    "end": "846440"
  },
  {
    "text": "the second part which is smart pointers smart pointers have a large impact on",
    "start": "846440",
    "end": "851519"
  },
  {
    "text": "the way that you think about you know uh resource ownership and Lifetime and here's the three that make it up you got",
    "start": "851519",
    "end": "859480"
  },
  {
    "text": "you know share pointer which basically is an object which has a reference count",
    "start": "859480",
    "end": "865440"
  },
  {
    "text": "but it's more than that if you're familiar with auto point it's kind of like Auto pointer and kind",
    "start": "865440",
    "end": "870959"
  },
  {
    "text": "of not um it means that this object is shared in some way there will be two at",
    "start": "870959",
    "end": "878800"
  },
  {
    "text": "least two uh you know connections to it at any one time so the ownership what is",
    "start": "878800",
    "end": "884480"
  },
  {
    "text": "the ownership it's an aggregate ownership at that point right it's if you have two different owners you can",
    "start": "884480",
    "end": "891480"
  },
  {
    "text": "only reclaim the object if both of them go away it's basically codifying automatic reference C and it's very",
    "start": "891480",
    "end": "899399"
  },
  {
    "text": "useful for that purpose you can move a Shar pointer you can copy a Shar pointer",
    "start": "899399",
    "end": "906399"
  },
  {
    "text": "what does copy look like well it means increment the reference count and decrement right when you're done with",
    "start": "906399",
    "end": "912160"
  },
  {
    "text": "the copy um things like that so when you use something like a share pointer it",
    "start": "912160",
    "end": "917880"
  },
  {
    "text": "has those semantics and it does it very effectively and it very efficiently accessing it is you know very",
    "start": "917880",
    "end": "924920"
  },
  {
    "text": "efficient sorry um unique pointer means that you're going to have exactly one owner of this object right so it",
    "start": "924920",
    "end": "932199"
  },
  {
    "text": "prevents copying it prevents you know other things ah but it can be moved right so this is codifying those",
    "start": "932199",
    "end": "940279"
  },
  {
    "text": "practices weak pointer weak pointer is Created from a SharePoint so you can",
    "start": "940279",
    "end": "945399"
  },
  {
    "text": "create a soft reference effectively it's okay to make a very general statement",
    "start": "945399",
    "end": "951399"
  },
  {
    "text": "it's effectively like a soft reference in something like you know J now but it's a little different you can use it",
    "start": "951399",
    "end": "957519"
  },
  {
    "text": "the same way that you would normally think about and if you're thinking okay well",
    "start": "957519",
    "end": "965040"
  },
  {
    "text": "shared I get reference counting uh okay unique that makes sense okay weak",
    "start": "965040",
    "end": "970240"
  },
  {
    "text": "pointer is kind of okay a soft reference what happens if I have something that's non-trivial like a graph right how do I",
    "start": "970240",
    "end": "977480"
  },
  {
    "text": "how do I how do I manage that Well turns out that this is actually not a bad",
    "start": "977480",
    "end": "984519"
  },
  {
    "text": "place to begin some languages you know are built like this automatic reference counting for rust for example and other",
    "start": "984519",
    "end": "990920"
  },
  {
    "text": "things it's not a bad thing to limit yourself in a design in fact it gives",
    "start": "990920",
    "end": "996279"
  },
  {
    "text": "you some very good ideas and how to handle them we'll talk a little bit about that and S Lessons Learned but",
    "start": "996279",
    "end": "1002959"
  },
  {
    "text": "effectively weak pointer is there so you can create cyc graphs how many of you are familiar with game",
    "start": "1002959",
    "end": "1009839"
  },
  {
    "text": "engines okay here's a question in a game engine you may have a physics object",
    "start": "1009839",
    "end": "1015399"
  },
  {
    "text": "that physics object may also have textures don't ask me why they just sometimes do textures may also have physics objects",
    "start": "1015399",
    "end": "1021079"
  },
  {
    "text": "don't ask me why they just sometimes do what you get a lot of times in game engines is a very cyclic graph of",
    "start": "1021079",
    "end": "1028480"
  },
  {
    "text": "dependencies game engines are primarily done in C how in the world do they deal with",
    "start": "1028480",
    "end": "1034319"
  },
  {
    "text": "Cycles they break it so that when you have to actually access something like that you do it through some intermediary",
    "start": "1034319",
    "end": "1040880"
  },
  {
    "text": "a lot of times it's a lookup table so you don't access just the pointer you access a lookup tap for example just one",
    "start": "1040880",
    "end": "1046918"
  },
  {
    "text": "thing we pointer is like this weak pointer sets there and if shared pointer",
    "start": "1046919",
    "end": "1052400"
  },
  {
    "text": "goes away you try to access the weak pointer it says uhuh can't do that it's gone so that technique has influenced",
    "start": "1052400",
    "end": "1060559"
  },
  {
    "text": "for example this design uh I've seen firsthand some fairly complex graphs and dependencies",
    "start": "1060559",
    "end": "1068240"
  },
  {
    "text": "that are modeled with this quite elegantly so it's not it's not a hindrance at",
    "start": "1068240",
    "end": "1074120"
  },
  {
    "text": "all C++ 11 introduce lambas and function objects you know these are nice they",
    "start": "1074120",
    "end": "1080360"
  },
  {
    "text": "make things uh very clean um they also can be a little tricky they are very",
    "start": "1080360",
    "end": "1086960"
  },
  {
    "text": "powerful to use and they just actually clean up code quite a bit enough's been",
    "start": "1086960",
    "end": "1093039"
  },
  {
    "text": "said about those don't really have to talk too much about them atomics Atomic operations that Atomic is a is a part of",
    "start": "1093039",
    "end": "1100080"
  },
  {
    "text": "the library uh that allows you to do some very interesting Atomic things with it and here's an example suppose you",
    "start": "1100080",
    "end": "1107320"
  },
  {
    "text": "have a Boolean you want to do Atomic operations on that Boolean you can just basically say it's a atomic and templi",
    "start": "1107320",
    "end": "1115640"
  },
  {
    "text": "it with that what that Atomic um Atomic flag is also another",
    "start": "1115640",
    "end": "1121840"
  },
  {
    "text": "example that has some more Tes and sets and some other things on it that are just more convenient in other words it's a specialization of St Atomic gold but",
    "start": "1121840",
    "end": "1129440"
  },
  {
    "text": "you have all kinds of different ones you can do except ones that you really need to do sometimes so there is a hole that",
    "start": "1129440",
    "end": "1136240"
  },
  {
    "text": "we'll talk about here that has an impact on air so I keep sorry about the headset here",
    "start": "1136240",
    "end": "1145000"
  },
  {
    "text": "um the idioms uh smart pointers lambdas atomics",
    "start": "1145000",
    "end": "1150360"
  },
  {
    "text": "but we also have thread support so it was very annoying for many years to have posic threads but not have them as first",
    "start": "1150360",
    "end": "1156400"
  },
  {
    "text": "class citizens within the language well now they are so whatever threading you",
    "start": "1156400",
    "end": "1162000"
  },
  {
    "text": "have underneath you have access to uh the standard library has thread newex promises Futures pretty much everything",
    "start": "1162000",
    "end": "1168360"
  },
  {
    "text": "you would normally think of in a modern kind of setting",
    "start": "1168360",
    "end": "1173240"
  },
  {
    "text": "now move construction and assignment is another big part of C++ 11 that",
    "start": "1173960",
    "end": "1179919"
  },
  {
    "text": "basically means is uh how many of you familiar with copy Constructors things like that okay move Constructors don't",
    "start": "1179919",
    "end": "1186720"
  },
  {
    "text": "have to copy you just move what you have from one to another you transfer ownership that's how it kind of comes",
    "start": "1186720",
    "end": "1193039"
  },
  {
    "text": "back to things like you know the smart pointers and everything else that idea of ownership and lifetime has a lot to",
    "start": "1193039",
    "end": "1199360"
  },
  {
    "text": "do with move construction and assignment we'll talk a little bit about Lessons Learned From that and you know within",
    "start": "1199360",
    "end": "1206799"
  },
  {
    "text": "the C and C++ you know Community things like um you know tool chains have always",
    "start": "1206799",
    "end": "1213240"
  },
  {
    "text": "been evolving you know it just may have taken a l long time now we have some",
    "start": "1213240",
    "end": "1218480"
  },
  {
    "text": "actually very niceo use tool chains you know cmake is great it can be used on",
    "start": "1218480",
    "end": "1224159"
  },
  {
    "text": "very large projects with very good effect um you know you may not like the syntax",
    "start": "1224159",
    "end": "1229240"
  },
  {
    "text": "or you may like the syntax depending on you know how it looks but it's useful Google test Google mock um and even IDs",
    "start": "1229240",
    "end": "1237760"
  },
  {
    "text": "that that are out there like Seine from jet brains which I use uh very heavily",
    "start": "1237760",
    "end": "1243080"
  },
  {
    "text": "uh I'm a big emac guy I've used emac for way way too long and it took it took",
    "start": "1243080",
    "end": "1250200"
  },
  {
    "text": "actually Seine for me to look at an actual ID when I used Eclipse I actually",
    "start": "1250200",
    "end": "1255919"
  },
  {
    "text": "could not use it I mean I could use it it's just I didn't want to um and so you",
    "start": "1255919",
    "end": "1262400"
  },
  {
    "text": "know it took something like Seine which is a lot better integrated a lot cleaner",
    "start": "1262400",
    "end": "1267480"
  },
  {
    "text": "uh you know for me to really jump and you know actually stop using emac for most of c and C++ development so if you",
    "start": "1267480",
    "end": "1274679"
  },
  {
    "text": "how many of you do use C make okay if you have it and you're",
    "start": "1274679",
    "end": "1279760"
  },
  {
    "text": "doing something with C or C++ just take a look you you know use it a couple times it pays for itself how many have",
    "start": "1279760",
    "end": "1286640"
  },
  {
    "text": "you used other things like autoc comp and and stuff like that okay first thing if you're using autocom don't fight it",
    "start": "1286640",
    "end": "1293679"
  },
  {
    "text": "give in um to what it wants you to do um and then look at C okay that's just",
    "start": "1293679",
    "end": "1299279"
  },
  {
    "text": "coming from a long time aut comp user um you know just for example so how does",
    "start": "1299279",
    "end": "1305000"
  },
  {
    "text": "Aaron adopt the C++ uh the modern C++ way of doing things well the first thing",
    "start": "1305000",
    "end": "1310960"
  },
  {
    "text": "is you know shared pointers unique pointers they're all the way through the",
    "start": "1310960",
    "end": "1316679"
  },
  {
    "text": "actual code so here's just a here's just an example if you call something like Aaron and you connect which is the idea",
    "start": "1316679",
    "end": "1323200"
  },
  {
    "text": "of actually having an object that you can now add Publications and add subscriptions to you get back a share",
    "start": "1323200",
    "end": "1328720"
  },
  {
    "text": "pointer of Aon so the idea of the API giving you back already a wrapped item",
    "start": "1328720",
    "end": "1335720"
  },
  {
    "text": "that says here's how you're to use this it's reference counted that's kind of Handy",
    "start": "1335720",
    "end": "1341760"
  },
  {
    "text": "right so that's that's kind of the way that this is done in fact this also",
    "start": "1341760",
    "end": "1347440"
  },
  {
    "text": "pertains to things like publication you add a publication you then try to find it it's a non-blocking",
    "start": "1347440",
    "end": "1353360"
  },
  {
    "text": "API so you add it it may immediately return but it probably won't but it gives you back an idea that you can then",
    "start": "1353360",
    "end": "1358480"
  },
  {
    "text": "find it with and giving you a shared pointer that kind of idea is throughout",
    "start": "1358480",
    "end": "1364640"
  },
  {
    "text": "the whole API and it's used internally as well it's very efficient it also means that when a publication goes out",
    "start": "1364640",
    "end": "1371400"
  },
  {
    "text": "of scope for example here once you would leave that scope that publication then is",
    "start": "1371400",
    "end": "1376919"
  },
  {
    "text": "closed in the job version there's an explicit close that the publication has",
    "start": "1376919",
    "end": "1382080"
  },
  {
    "text": "to do and for Java developers this is painful because it's something that",
    "start": "1382080",
    "end": "1387200"
  },
  {
    "text": "they're not used to now you could put a cleaner and other things attached to it and it'll go away sometime but you know",
    "start": "1387200",
    "end": "1392880"
  },
  {
    "text": "if you're in a environment where you want to know when things happen and control them you have to do it",
    "start": "1392880",
    "end": "1398400"
  },
  {
    "text": "explicitly it's kind of nice to have these these kind of things these are the ownership in lifetime sort of you know",
    "start": "1398400",
    "end": "1404559"
  },
  {
    "text": "built into the language a little bit closer L is in front objects uh there's",
    "start": "1404559",
    "end": "1409640"
  },
  {
    "text": "a couple different ways of specifying callbacks and things like that so having this is a just a Lambda that is in",
    "start": "1409640",
    "end": "1416320"
  },
  {
    "text": "pasted into the new subscription Handler so when a new subscription is seen it calls this call back and in the",
    "start": "1416320",
    "end": "1423159"
  },
  {
    "text": "including code there it makes things a little bit simpler instead of specifying you know a an old style function object",
    "start": "1423159",
    "end": "1429320"
  },
  {
    "text": "doing something with a class an object thread support um is is used",
    "start": "1429320",
    "end": "1437400"
  },
  {
    "text": "standard thread now now most C++ 11 and on uh developers will say that I'm doing",
    "start": "1437400",
    "end": "1443600"
  },
  {
    "text": "this exactly wrong you should be not actually creating a new thread you should be doing it with an executive or",
    "start": "1443600",
    "end": "1448760"
  },
  {
    "text": "something like that sometimes that works sometimes that's not this is just an example you know where you can have a",
    "start": "1448760",
    "end": "1454400"
  },
  {
    "text": "thread you can specify what to running that thread with a l uh you know when it goes out of scope it gets clean it it's",
    "start": "1454400",
    "end": "1460360"
  },
  {
    "text": "closed things like that um and also just an example of a lock guard and how a lock guard would look with acquiring",
    "start": "1460360",
    "end": "1467960"
  },
  {
    "text": "that m text that recursing new text when it inter scope and getting rid of it when it U when it exits so that's just a",
    "start": "1467960",
    "end": "1476360"
  },
  {
    "text": "a couple of examples so it's basically you know permeated through the idioms",
    "start": "1476360",
    "end": "1481480"
  },
  {
    "text": "and everything else that whole list that we looked at has actually been there so",
    "start": "1481480",
    "end": "1487600"
  },
  {
    "text": "you know what kind of lessons were learned this is the the real meat what I wanted to really talk about the most here so you know if we look at this list",
    "start": "1487600",
    "end": "1496440"
  },
  {
    "text": "what kind of things do you think we learned a lot from what kind of things do you think",
    "start": "1496440",
    "end": "1501559"
  },
  {
    "text": "were painful well the first thing is kind of giving you an idea that you know the",
    "start": "1501559",
    "end": "1507760"
  },
  {
    "text": "these first three things are going to have a profound impact right lambas and function objects it's really kind of",
    "start": "1507760",
    "end": "1514840"
  },
  {
    "text": "syntactic sugar in a way but it it actually does have some you know clarifying",
    "start": "1514840",
    "end": "1520799"
  },
  {
    "text": "effects but think about things like atomics okay what about thread support",
    "start": "1520799",
    "end": "1527159"
  },
  {
    "text": "thread support is probably a little a little cleaner but doesn't have much of an impact move construction assignment",
    "start": "1527159",
    "end": "1533480"
  },
  {
    "text": "oh latency sensitive supp that may have an impact right tool chain well I can tell you that we use cmake we use Google",
    "start": "1533480",
    "end": "1540039"
  },
  {
    "text": "test we use Google Mack you know to make sure that we're doing things appropriately and to do unit",
    "start": "1540039",
    "end": "1546720"
  },
  {
    "text": "tests let's just start down this list first these three cannot be kind of",
    "start": "1546720",
    "end": "1554000"
  },
  {
    "text": "taken apart they all have things to do with one another",
    "start": "1554000",
    "end": "1559320"
  },
  {
    "text": "so stack allocation stack allocation is a big one and the thing I will tell you about smart pointers is give in to your",
    "start": "1559320",
    "end": "1566360"
  },
  {
    "text": "anchor give in to Smart pointers don't try to fight it okay don't try to mold",
    "start": "1566360",
    "end": "1573000"
  },
  {
    "text": "your thinking of what you would normally do in other languages and then use Smart",
    "start": "1573000",
    "end": "1578120"
  },
  {
    "text": "pointers for it because you're you're going to get twisted trying to do what you would normally",
    "start": "1578120",
    "end": "1584200"
  },
  {
    "text": "do so as we were doing a in C++ we had Aaron Java that was being",
    "start": "1584200",
    "end": "1590399"
  },
  {
    "text": "iterated on and we were working on and we wanted to take C++ and just Port it",
    "start": "1590399",
    "end": "1596000"
  },
  {
    "text": "you could do that but how does ownership work and what happens with any cycles",
    "start": "1596000",
    "end": "1602320"
  },
  {
    "text": "and how does that how does that you know kind of come about but once you give",
    "start": "1602320",
    "end": "1608880"
  },
  {
    "text": "in to the anger you actually come out with something which is much cleaner so",
    "start": "1608880",
    "end": "1614799"
  },
  {
    "text": "if you just start you look at it and say these are the tools that I have and let's see what happens you notice a",
    "start": "1614799",
    "end": "1621120"
  },
  {
    "text": "couple things so as this was being done there's a lot of explicit coupling that",
    "start": "1621120",
    "end": "1627720"
  },
  {
    "text": "is in there and it's explicit because you got Shar pointer you got unique pointer and weak pointer how do they",
    "start": "1627720",
    "end": "1634440"
  },
  {
    "text": "interact if you got an object that sometimes a share book is kind of unique because it's one place where it should",
    "start": "1634440",
    "end": "1640240"
  },
  {
    "text": "be you know sort of kept around how does that work makes it makes C very explicit",
    "start": "1640240",
    "end": "1647200"
  },
  {
    "text": "because it's not just that there's a reference from here to here it means that there is this type of reference",
    "start": "1647200",
    "end": "1652559"
  },
  {
    "text": "from here to here which is a very different thing think about that it",
    "start": "1652559",
    "end": "1657840"
  },
  {
    "text": "makes it it makes it so that you can see oh you know what yeah this there isn't one place where this is owned Shar",
    "start": "1657840",
    "end": "1665440"
  },
  {
    "text": "pointer is probably the right thing or is it really the right thing because really shouldn't there just be one place where it's",
    "start": "1665440",
    "end": "1671480"
  },
  {
    "text": "controlled scoping is also a really good thing to look at because it's explicit",
    "start": "1671480",
    "end": "1676960"
  },
  {
    "text": "in this regard so having it where you know what the scope of an object is can",
    "start": "1676960",
    "end": "1682960"
  },
  {
    "text": "lead you down paths to clean up and to get rid of some things that you don't really need to worry about because you",
    "start": "1682960",
    "end": "1690159"
  },
  {
    "text": "know what the explicit scope is you know when it gets created you know what it",
    "start": "1690159",
    "end": "1695240"
  },
  {
    "text": "gets destroyed so I said I wouldn't bash but",
    "start": "1695240",
    "end": "1700399"
  },
  {
    "text": "I'm going to I'm going to bash every other language it doesn't have stack allocation so the lack of Stack",
    "start": "1700399",
    "end": "1705919"
  },
  {
    "text": "allocation whenever you talk to two other language designers um and you say why doesn't",
    "start": "1705919",
    "end": "1712200"
  },
  {
    "text": "your language provide stack allocation you get a lot of excuses and I'm going to say these are really",
    "start": "1712200",
    "end": "1718240"
  },
  {
    "text": "excuses you're going to see things like well we have Escape analysis you know what analysis of Escape analysis always",
    "start": "1718240",
    "end": "1724000"
  },
  {
    "text": "returns yes it escaped that's what it always returns there are so many ways to",
    "start": "1724000",
    "end": "1730960"
  },
  {
    "text": "defeat you know Escape analysis just take a look at go and Escape analysis",
    "start": "1730960",
    "end": "1736039"
  },
  {
    "text": "there's a whole doc that keeps getting added to about how many ways it can be defeated in other words how something",
    "start": "1736039",
    "end": "1743440"
  },
  {
    "text": "leaks and can't be basically put on the stack another thing value types you",
    "start": "1743440",
    "end": "1750919"
  },
  {
    "text": "don't need stack allocation when you have value types these are like saying I don't need an orange because I have an",
    "start": "1750919",
    "end": "1757360"
  },
  {
    "text": "apple just because you have a use doesn't mean you have the mechanism so it makes me want to do this",
    "start": "1757399",
    "end": "1766600"
  },
  {
    "text": "okay stack is so useful because you don't have to actually allocate it also",
    "start": "1766600",
    "end": "1771679"
  },
  {
    "text": "is useful because it's dead reckoned by the compiler it's what do we want we want",
    "start": "1771679",
    "end": "1777000"
  },
  {
    "text": "that there is no data dependent load there's nothing else that is involved in that it knows where it is it can figure",
    "start": "1777000",
    "end": "1782679"
  },
  {
    "text": "it out that compile time so this doesn't help you right Escape",
    "start": "1782679",
    "end": "1790080"
  },
  {
    "text": "analysis if it gets defeated well guess what it's not on the stack right value type I don't okay that's one use of",
    "start": "1790080",
    "end": "1797200"
  },
  {
    "text": "Stack allocation it is not the mechanism of Stack allocation that gives you all the other benefits in fact it's it's",
    "start": "1797200",
    "end": "1803480"
  },
  {
    "text": "it's C like this right when you don't have it you really really miss it especially if you're doing anything that",
    "start": "1803480",
    "end": "1809440"
  },
  {
    "text": "has to be fast um okay enough",
    "start": "1809440",
    "end": "1814600"
  },
  {
    "text": "fashion from that list we're not going to take these in order um it might",
    "start": "1814600",
    "end": "1820720"
  },
  {
    "text": "surprise you that Mo construction and assignment is actually one of those areas that is exceedingly tricky and the",
    "start": "1820720",
    "end": "1827159"
  },
  {
    "text": "advice I would give here here is sometimes you just don't want to move it okay sometimes you really don't want to",
    "start": "1827159",
    "end": "1833240"
  },
  {
    "text": "use a move Constructor or a move assignment operator and the reason here is covered",
    "start": "1833240",
    "end": "1838919"
  },
  {
    "text": "in depth um and I'm going to summarize this in a very poor way for you know lots of different talks to talk about",
    "start": "1838919",
    "end": "1845200"
  },
  {
    "text": "move Constructors and how you don't want to use them and move Constructors and why you want to use them essentially",
    "start": "1845200",
    "end": "1851320"
  },
  {
    "text": "it's much more than you think the concept of move Constructors and move assignment operators actually has a very",
    "start": "1851320",
    "end": "1859120"
  },
  {
    "text": "deeper meaning than just simply providing you with that mechanism just like stack allocation it can be used in",
    "start": "1859120",
    "end": "1864840"
  },
  {
    "text": "a lot of different ways it also has a very deep impact on the language itself so the first thing is you know if you're",
    "start": "1864840",
    "end": "1871880"
  },
  {
    "text": "thinking about using it think about just a second what it implies it implies that",
    "start": "1871880",
    "end": "1877159"
  },
  {
    "text": "you're moving one object to replace another that may not be what you",
    "start": "1877159",
    "end": "1885080"
  },
  {
    "text": "want it's sometimes often better to copy if you're doing something where the",
    "start": "1885080",
    "end": "1891200"
  },
  {
    "text": "scope of what you have to replace is basically going to go off on its own you might as well copy it okay",
    "start": "1891200",
    "end": "1899960"
  },
  {
    "text": "then to move it that is you know a fairly interesting way of thinking about",
    "start": "1899960",
    "end": "1906399"
  },
  {
    "text": "the way that optimizations interact with one another when you use a move Constructor you can effectively are",
    "start": "1906399",
    "end": "1913000"
  },
  {
    "text": "saying to the compiler gross over exaggeration I know what I want to do here so don't you know do X or Y and",
    "start": "1913000",
    "end": "1922840"
  },
  {
    "text": "sometimes X and Y could be actually good things so there is actually the way that this",
    "start": "1922840",
    "end": "1929399"
  },
  {
    "text": "is codified in the standard there is the rule of three the rule of five and the rule of zero that in that basically has",
    "start": "1929399",
    "end": "1936200"
  },
  {
    "text": "the interaction of different Constructors copy Constructors move Constructors and assignment operators",
    "start": "1936200",
    "end": "1942240"
  },
  {
    "text": "and everything else they give you certain rules I don't think you need to go to that L to sort of understand what to do",
    "start": "1942240",
    "end": "1950120"
  },
  {
    "text": "if you just do one more thing if you think you need to move an object because it's heavy weight but you",
    "start": "1950120",
    "end": "1957080"
  },
  {
    "text": "need to basically have that state somewhere else why think about it from a",
    "start": "1957080",
    "end": "1962840"
  },
  {
    "text": "higher level for a minute what is prompting you know the exercise of having to take the internal state of",
    "start": "1962840",
    "end": "1969320"
  },
  {
    "text": "this object and move it somewhere else you might think that there is a better solution for that and I give you",
    "start": "1969320",
    "end": "1977000"
  },
  {
    "text": "a reason why within within Aaron one of the things that we ran into was the ability to",
    "start": "1977000",
    "end": "1984679"
  },
  {
    "text": "iterate over a set of images or the replication of those log",
    "start": "1984679",
    "end": "1991000"
  },
  {
    "text": "buffers and we originally maintaining this",
    "start": "1991000",
    "end": "1997080"
  },
  {
    "text": "array was being used by move Constructors we would just move them from one old array to the next one the",
    "start": "1997080",
    "end": "2003480"
  },
  {
    "text": "objects themselves were just overlays there was no ownership them there didn't",
    "start": "2003480",
    "end": "2008840"
  },
  {
    "text": "need to be they could be copied freely so doing some micro benchmarks it",
    "start": "2008840",
    "end": "2014360"
  },
  {
    "text": "turned out instead of moving them that there are other optimizations that kick in and it would be better to copy them",
    "start": "2014360",
    "end": "2021840"
  },
  {
    "text": "and that was by looking at it and just sitting there thinking why do these need to be moved they're just overlaying the",
    "start": "2021840",
    "end": "2027559"
  },
  {
    "text": "memory they're not actually owning anything they could go away on the stack",
    "start": "2027559",
    "end": "2032600"
  },
  {
    "text": "so how do they get how do they get managed but the biggest lesson we learned Learned was that sometimes",
    "start": "2032600",
    "end": "2039559"
  },
  {
    "text": "language features aren't built for the things you need to do statom for",
    "start": "2039559",
    "end": "2045600"
  },
  {
    "text": "example so it kind of led us to think of this anybody know this reference by the way anybody seen the movie",
    "start": "2045600",
    "end": "2054040"
  },
  {
    "text": "Dune okay I'm a big geek what can I say um",
    "start": "2054560",
    "end": "2060560"
  },
  {
    "text": "architecturally let's think about look look again at sort of the architecture the C++ pieces",
    "start": "2060560",
    "end": "2068720"
  },
  {
    "text": "you know the client pieces here they interact with the media driver at this layer which means these are ring and",
    "start": "2068720",
    "end": "2076358"
  },
  {
    "text": "broadcast buffers shared memory and these are log buffers which are shared",
    "start": "2076359",
    "end": "2081720"
  },
  {
    "text": "memory so you know we had these different data structures that operated",
    "start": "2081720",
    "end": "2086800"
  },
  {
    "text": "on Shar memory that needed to sort of work together now really quickly what does Aaron do well it replicates a",
    "start": "2086800",
    "end": "2093520"
  },
  {
    "text": "persistent log how does it do that well it has a file and it operates on that file by putting messages in let's slow",
    "start": "2093520",
    "end": "2100280"
  },
  {
    "text": "it down it increments tail then writes the message then it writes the header in",
    "start": "2100280",
    "end": "2106320"
  },
  {
    "text": "that specific order into memory we lay these things out with",
    "start": "2106320",
    "end": "2112160"
  },
  {
    "text": "multiple sort of terms that's you know sort of the the area that we just talked",
    "start": "2112160",
    "end": "2117280"
  },
  {
    "text": "about with metadata and even log metadata all of these have Atomic and",
    "start": "2117280",
    "end": "2123599"
  },
  {
    "text": "ordered memory operations for them so you would think Atomic that's you need",
    "start": "2123599",
    "end": "2129240"
  },
  {
    "text": "that right in there right but it's even worse than that so we have the concept of a position within the law which is basically a unique identification of a",
    "start": "2129240",
    "end": "2135599"
  },
  {
    "text": "bite within each stream the publisher centers receivers and subscribers all keep position",
    "start": "2135599",
    "end": "2142040"
  },
  {
    "text": "counters in memory they're key to flow control and monitoring they're shared",
    "start": "2142040",
    "end": "2148640"
  },
  {
    "text": "memory pieces that have an order to them there's Atomic operations on them",
    "start": "2148640",
    "end": "2154400"
  },
  {
    "text": "there's also ordered you know memory order semantics that are attached to them so you would think St St Atomic you",
    "start": "2154400",
    "end": "2161680"
  },
  {
    "text": "know all over the place right well looking at stomic you have multiple challenges the first size and layout is",
    "start": "2161680",
    "end": "2170440"
  },
  {
    "text": "it the same between Java and C is it the same from different C compilers to one",
    "start": "2170440",
    "end": "2178280"
  },
  {
    "text": "another okay and the memory models C++ 11 to Cha because C++ 11 actually has a",
    "start": "2178280",
    "end": "2184880"
  },
  {
    "text": "mem model so what does it look like Well turns out Size",
    "start": "2184880",
    "end": "2191400"
  },
  {
    "text": "Matters okay I'm a big guy too sometimes I do feel like this um and uh basically",
    "start": "2191400",
    "end": "2197920"
  },
  {
    "text": "Size Matters in a couple different ways stud atomic was not designed for arbitrary memory access so you can't say",
    "start": "2197920",
    "end": "2204560"
  },
  {
    "text": "something like I want to Atomic and I want to put it at this memory location you can kind of fudge that but you don't",
    "start": "2204560",
    "end": "2211599"
  },
  {
    "text": "want to because it's very you know compiler specific to do that and beyond that the size may not be",
    "start": "2211599",
    "end": "2220319"
  },
  {
    "text": "the size of the type so you may say something like I want a 32-bit integer and St atomical say that's great I'm",
    "start": "2220319",
    "end": "2226400"
  },
  {
    "text": "going to give you a 64 bit because there's nothing in the standard that says that it's laid out as",
    "start": "2226400",
    "end": "2231440"
  },
  {
    "text": "a particular way it says it has to have particular layout but it doesn't have to have the exact",
    "start": "2231440",
    "end": "2238560"
  },
  {
    "text": "layout some compilers do this differently than others mostly it's okay mostly they are",
    "start": "2238560",
    "end": "2245880"
  },
  {
    "text": "you know the same layout but they're not guaranteed to be and some compilers can get very",
    "start": "2245880",
    "end": "2252680"
  },
  {
    "text": "interesting when you talk about undefined Behavior which is where this starts to basically come into play the thing is St Atomic is concerned",
    "start": "2252680",
    "end": "2260119"
  },
  {
    "text": "only with the operations and provide you with a variable they're not interested in looking at a particular memory location okay so that that makes it very",
    "start": "2260119",
    "end": "2267040"
  },
  {
    "text": "hard what about the interoperability with the Java memory model well the",
    "start": "2267040",
    "end": "2272680"
  },
  {
    "text": "memory order stood memory order allows you to sort of specify different ways that things should oper",
    "start": "2272680",
    "end": "2279000"
  },
  {
    "text": "Java's memory model and here here's the real big difference C++ 11 memory model",
    "start": "2279000",
    "end": "2284160"
  },
  {
    "text": "says this generates this set of instructions on these you know architectures so it's basically here's",
    "start": "2284160",
    "end": "2289800"
  },
  {
    "text": "what gets generated Java memory model says if these this thing happens before this thing it has this relationship and",
    "start": "2289800",
    "end": "2295960"
  },
  {
    "text": "it happens after this relationship it has this relationship these are two different ways of specifying things which means",
    "start": "2295960",
    "end": "2302640"
  },
  {
    "text": "that you can't really take and say these set of instructions you know go to go to",
    "start": "2302640",
    "end": "2309079"
  },
  {
    "text": "this they are slightly different so they're a little bit it's like looking at memory order and saying it's not",
    "start": "2309079",
    "end": "2314200"
  },
  {
    "text": "really fit for purpose with the job memory model it's not that it's wrong so",
    "start": "2314200",
    "end": "2321240"
  },
  {
    "text": "much as what turns out is C++ 11 is much more conservative with what it allows",
    "start": "2321240",
    "end": "2328040"
  },
  {
    "text": "code to migrate up and before and after operations so what did this lead to well",
    "start": "2328040",
    "end": "2333800"
  },
  {
    "text": "we tried different things we tried metomic uh momic actually um and we had various problems with",
    "start": "2333800",
    "end": "2341040"
  },
  {
    "text": "getting that to work until um we had a contributor who basically said you know",
    "start": "2341040",
    "end": "2347680"
  },
  {
    "text": "what let's just go through the jvm take the instructions of your generator for all the different types and unsafe and",
    "start": "2347680",
    "end": "2354040"
  },
  {
    "text": "Port them over so that's what we did we basically took you know and have our own operations C++ C++ functions that are J",
    "start": "2354040",
    "end": "2361920"
  },
  {
    "text": "Java memory model compatible So when you say something like put int volatile",
    "start": "2361920",
    "end": "2368160"
  },
  {
    "text": "it does effectively the same instruction on the you know on x86 that that would",
    "start": "2368160",
    "end": "2373960"
  },
  {
    "text": "be do that would do with the Java every",
    "start": "2373960",
    "end": "2379520"
  },
  {
    "text": "so we identified this up front that we kind of needed this we played around with various things this is where we",
    "start": "2379520",
    "end": "2386119"
  },
  {
    "text": "landed um if you're doing this with Windows you have to do things slightly differently but effectively it generates",
    "start": "2386119",
    "end": "2392079"
  },
  {
    "text": "the same code uh visual C++ is good about that so up here give us a little",
    "start": "2392079",
    "end": "2398119"
  },
  {
    "text": "bit of time for questions sort of what's next um and I'll cover sort of you know",
    "start": "2398119",
    "end": "2403440"
  },
  {
    "text": "where we stand it says IPC 32 bite messages at",
    "start": "2403440",
    "end": "2408720"
  },
  {
    "text": "the top there so where does C++ stand if you're looking at IPC you're looking at just a language a message is sent it",
    "start": "2408720",
    "end": "2415280"
  },
  {
    "text": "goes it's it goes through you know a set of operations that append to a log buffer a receiver reads that and that's",
    "start": "2415280",
    "end": "2424319"
  },
  {
    "text": "all that there is the driver has no impact on that so the fact that your Java has no impact on that message path",
    "start": "2424319",
    "end": "2430800"
  },
  {
    "text": "okay for the driver C++ to C++ 32 million messages per second okay that's not bad how does",
    "start": "2430800",
    "end": "2437480"
  },
  {
    "text": "that stack up with the rest of the things well Java is 30 and we actually have a net port that's just just",
    "start": "2437480",
    "end": "2445240"
  },
  {
    "text": "starting to within the last week you know have the capability of running these and it's a 15 million actually C",
    "start": "2445240",
    "end": "2452040"
  },
  {
    "text": "uh C coming at 15 million is actually about where we started with job so this",
    "start": "2452040",
    "end": "2457720"
  },
  {
    "text": "will only get better but still notice that C++ is a little bit better why do",
    "start": "2457720",
    "end": "2463480"
  },
  {
    "text": "you think that might be other than the fact that we're",
    "start": "2463480",
    "end": "2468519"
  },
  {
    "text": "awesome mostly it's mostly it's compiler optimization so there's a lot of compiler optimizations that are done in",
    "start": "2469079",
    "end": "2475040"
  },
  {
    "text": "C++ and C that haven't made their way to you know the jet compilers eventually",
    "start": "2475040",
    "end": "2481119"
  },
  {
    "text": "they will but there are optimizations that are done there's also a few things that we that we do that know we can",
    "start": "2481119",
    "end": "2487920"
  },
  {
    "text": "elicit more optimizations so you know what's next",
    "start": "2487920",
    "end": "2493760"
  },
  {
    "text": "well we've been working on persistence and replication uh we've been also talking about you know doing encryption",
    "start": "2493760",
    "end": "2500319"
  },
  {
    "text": "and security various aspects um efficient FC forward error correction uh the design of the log buffer structure",
    "start": "2500319",
    "end": "2506880"
  },
  {
    "text": "allows us to do some very naring things from a from an error correcting code standpoint um Aaron 1.0 uh is something",
    "start": "2506880",
    "end": "2514480"
  },
  {
    "text": "that uh is is imminent um and uh there's always performance things",
    "start": "2514480",
    "end": "2520599"
  },
  {
    "text": "um and there's actually quite a few things that can be done here I figure there's probably just with some C++",
    "start": "2520599",
    "end": "2526839"
  },
  {
    "text": "specific things that could get another 3 million out of this just conservatively so I think this can actually get better",
    "start": "2526839",
    "end": "2533720"
  },
  {
    "text": "um and uh uh also we've been working on a C++ driver for a while um in multiple",
    "start": "2533720",
    "end": "2542680"
  },
  {
    "text": "uni cast SS most of this aside you know most of this actually things that we've",
    "start": "2542680",
    "end": "2547760"
  },
  {
    "text": "been doing in our own time uh you know some of the there's some sponsored work",
    "start": "2547760",
    "end": "2553559"
  },
  {
    "text": "uh that we've been looking at for persistence and replication um so there's there's interesting things so in",
    "start": "2553559",
    "end": "2560440"
  },
  {
    "text": "closing so we we went after Aaron with a very different design um I've written a",
    "start": "2560440",
    "end": "2567079"
  },
  {
    "text": "lot of protocols and you know when you think you know how to do something you probably should actually ask someone",
    "start": "2567079",
    "end": "2572559"
  },
  {
    "text": "else how would they do it because they'll come up with ideas that you never would have thought of um working",
    "start": "2572559",
    "end": "2577960"
  },
  {
    "text": "with Martin has been is a real joy in that he's not afraid to try new things and he drives you to try new things and",
    "start": "2577960",
    "end": "2584280"
  },
  {
    "text": "see what see what happens and that's what really has evolved with a is trying",
    "start": "2584280",
    "end": "2589720"
  },
  {
    "text": "new things different things seeing what happens and you know seeing what you can do so if I had to say one thing is try",
    "start": "2589720",
    "end": "2596920"
  },
  {
    "text": "to put this up for every air on talk that we give um you know try new things",
    "start": "2596920",
    "end": "2602480"
  },
  {
    "text": "and and see what happens you can find Aaron you can find the C+ plus uh code as well uh at at",
    "start": "2602480",
    "end": "2610280"
  },
  {
    "text": "GitHub here and U I think we have about five six minutes for",
    "start": "2610280",
    "end": "2616520"
  },
  {
    "text": "[Applause]",
    "start": "2621230",
    "end": "2624340"
  },
  {
    "text": "questions",
    "start": "2628559",
    "end": "2631559"
  }
]