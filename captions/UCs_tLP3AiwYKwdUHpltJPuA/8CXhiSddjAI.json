[
  {
    "start": "0",
    "end": "250000"
  },
  {
    "text": "hello everyone and uh thanks to the organizers for inviting",
    "start": "12440",
    "end": "17560"
  },
  {
    "text": "me um so I'm Leonard auson and I work for epic",
    "start": "17560",
    "end": "23519"
  },
  {
    "text": "games and you might wonder what a games company is doing here talking about",
    "start": "23519",
    "end": "30199"
  },
  {
    "text": "programming languages I hope to explain a little bit so the guy you see in the picture here is uh Tim Sweeney who is",
    "start": "30199",
    "end": "37879"
  },
  {
    "text": "the uh majority owner and CEO of epic games and this language is mer very much",
    "start": "37879",
    "end": "44039"
  },
  {
    "text": "his vision so unusually for a CEO he's a pro programming language geek which is",
    "start": "44039",
    "end": "51640"
  },
  {
    "text": "kind of interesting to work for a company that where someone the top",
    "start": "51640",
    "end": "56840"
  },
  {
    "text": "person really likes programming languages so epic games as the name implies makes",
    "start": "56840",
    "end": "63120"
  },
  {
    "text": "games and uh fortnite is one of the more popular",
    "start": "63120",
    "end": "68880"
  },
  {
    "text": "games of all time and it was made by epic and there are some other examples",
    "start": "68880",
    "end": "74960"
  },
  {
    "text": "here so that's one thing that epic makes and then uh there's also Unreal Engine",
    "start": "74960",
    "end": "80680"
  },
  {
    "text": "which is an game engine that many many uh game developers use for uh making",
    "start": "80680",
    "end": "88920"
  },
  {
    "text": "games and since the rest of this talk is going to be very boring with only letters and numbers so I thought I'd",
    "start": "88920",
    "end": "95600"
  },
  {
    "text": "show you something nice first so this is an example of something",
    "start": "95600",
    "end": "103920"
  },
  {
    "text": "that was done with Unreal Engine and everything you see here in this clip it",
    "start": "103920",
    "end": "110479"
  },
  {
    "text": "was rendered in real time on a PlayStation 5 I'm Thomas",
    "start": "110479",
    "end": "117240"
  },
  {
    "text": "Anderson like many of you I work with computers I like the freedom I feel",
    "start": "117240",
    "end": "122439"
  },
  {
    "text": "outside the limitations of the real world but computers are also",
    "start": "122439",
    "end": "128119"
  },
  {
    "text": "mirrors reflecting back who and what we are in the choices we make this is not a",
    "start": "128119",
    "end": "133440"
  },
  {
    "text": "real person this is a model they also confront us with questions that is animated in real time about why we want",
    "start": "133440",
    "end": "139440"
  },
  {
    "text": "to choose this over that why we want to make X instead of the why where do ideas",
    "start": "139440",
    "end": "146720"
  },
  {
    "text": "of who we are and what we want even come from you take the red pill and I show you how",
    "start": "146720",
    "end": "154000"
  },
  {
    "text": "deep the rabbit hole goes this isn't real what is real how do",
    "start": "154000",
    "end": "161440"
  },
  {
    "text": "you define real for instance I'm not even sure why I'm",
    "start": "161440",
    "end": "167120"
  },
  {
    "text": "here I remember waking up and thinking that I'm Thomas Anderson",
    "start": "167120",
    "end": "172959"
  },
  {
    "text": "stop I'll show you one more little clip just to see that you can render other things than people so I can take",
    "start": "172959",
    "end": "181239"
  },
  {
    "text": "absolutely no credit for this I find it astonishing that this can be done at all",
    "start": "181239",
    "end": "187319"
  },
  {
    "text": "so we clearly there we have some talented",
    "start": "187319",
    "end": "192879"
  },
  {
    "text": "people what just happened yeah this is what they wanted they said they were",
    "start": "195519",
    "end": "201120"
  },
  {
    "text": "fine with your theoretical mumbo jumbo but they needed some sexy",
    "start": "201120",
    "end": "207519"
  },
  {
    "text": "action who said the marketing people marketing",
    "start": "208760",
    "end": "216000"
  },
  {
    "text": "I thought we were supposed to have total creative control welcome to the",
    "start": "216000",
    "end": "221390"
  },
  {
    "text": "[Music] Matrix so this is actually a 2-year-old",
    "start": "221390",
    "end": "229200"
  },
  {
    "text": "demo and it's it's a playable demo that you can download if you have a PlayStation 5 or an Xbox or something",
    "start": "229200",
    "end": "236280"
  },
  {
    "text": "like that okay so that's it for the fun part",
    "start": "236280",
    "end": "241720"
  },
  {
    "text": "so why would a games company make a new programming language well Tim Sweeney",
    "start": "245200",
    "end": "252400"
  },
  {
    "start": "250000",
    "end": "347000"
  },
  {
    "text": "has a a vision for the metaverse unfortunately the the metaverse has",
    "start": "252400",
    "end": "258880"
  },
  {
    "text": "become something that sounds a bit um not so nice anymore I mean meta kind of",
    "start": "258880",
    "end": "265440"
  },
  {
    "text": "ruined the metaverse so what he thinks is that it should be social interaction in some",
    "start": "265440",
    "end": "272320"
  },
  {
    "text": "realtime 3D simulation like fortnite is for instance",
    "start": "272320",
    "end": "277919"
  },
  {
    "text": "that has an open economy where people can contribute things so that should be",
    "start": "277919",
    "end": "283280"
  },
  {
    "text": "it should be open for people to add things to this uh to the metaverse to make new things and they should be able",
    "start": "283280",
    "end": "290000"
  },
  {
    "text": "to make money on it and if since there's going to be code",
    "start": "290000",
    "end": "295320"
  },
  {
    "text": "from a lot of different programmers in there you need some safety guarantees so",
    "start": "295320",
    "end": "301560"
  },
  {
    "text": "part of it is that uh this will be a statically type checked language so",
    "start": "301560",
    "end": "306680"
  },
  {
    "text": "that's give you certain guarantees um the idea is that verse",
    "start": "306680",
    "end": "312440"
  },
  {
    "text": "will not be uh something that only uh epic will use but anyone who wants to",
    "start": "312440",
    "end": "317680"
  },
  {
    "text": "use it can use it it's going to be open I mean we don't we haven't published any sort of language standards yet but uh",
    "start": "317680",
    "end": "325319"
  },
  {
    "text": "there everything all the development is is open",
    "start": "325319",
    "end": "331080"
  },
  {
    "text": "uh yeah we have published some papers or at least one paper about it and when",
    "start": "331080",
    "end": "338360"
  },
  {
    "text": "we've worked a bit more we will release a compiler and runtime and things like that for it as",
    "start": "338360",
    "end": "345560"
  },
  {
    "text": "well so do we really need a new programming",
    "start": "346039",
    "end": "351240"
  },
  {
    "start": "347000",
    "end": "468000"
  },
  {
    "text": "language well I guess no I mean there are so many we could have picked one but",
    "start": "351240",
    "end": "357759"
  },
  {
    "text": "I mean it's fun to make a new programming language so um and and it has some some",
    "start": "357759",
    "end": "365120"
  },
  {
    "text": "interesting features that uh makes it a little more adaptable for",
    "start": "365120",
    "end": "371599"
  },
  {
    "text": "for gameplay maybe so there are lots of of big goals",
    "start": "371599",
    "end": "376840"
  },
  {
    "text": "here that that it should be very scalable both in terms of the number of",
    "start": "376840",
    "end": "383319"
  },
  {
    "text": "programmers and in the number of players that play these games and uh we promise that if you've",
    "start": "383319",
    "end": "392720"
  },
  {
    "text": "compiled something today it will work in the future too so it's things are not",
    "start": "392720",
    "end": "398280"
  },
  {
    "text": "going to just break in the future so where will this language be",
    "start": "398280",
    "end": "406800"
  },
  {
    "text": "used then so of course the game engine itself will not be written in verse it",
    "start": "406800",
    "end": "412520"
  },
  {
    "text": "will be written in C++ like it is today and there will probably be some graphical language to do simple things",
    "start": "412520",
    "end": "420960"
  },
  {
    "text": "while you drag and drop and connect things together but if you want to give Behavior to",
    "start": "420960",
    "end": "427639"
  },
  {
    "text": "your your items that you have created if someone say makes a car that you you",
    "start": "427639",
    "end": "434479"
  },
  {
    "text": "want other people to use you want to have this car you want it to have some behavior",
    "start": "434479",
    "end": "440479"
  },
  {
    "text": "and that's where verse comes in where you can program it to it it doesn't have",
    "start": "440479",
    "end": "445680"
  },
  {
    "text": "to be this sort of super Real Time stuff that you done in C++ it can be a bit slower you instead you want it to be",
    "start": "445680",
    "end": "452720"
  },
  {
    "text": "very safe because the people who uh are doing this they don't know about seg",
    "start": "452720",
    "end": "460160"
  },
  {
    "text": "faults and things like that we don't want them to cause that and take down the whole game",
    "start": "460160",
    "end": "466440"
  },
  {
    "text": "engine so uh where are we with this well so one version of verse was released in",
    "start": "467759",
    "end": "475759"
  },
  {
    "start": "468000",
    "end": "563000"
  },
  {
    "text": "April of this year in something called unreal editor for 4 night so this ufn",
    "start": "475759",
    "end": "482039"
  },
  {
    "text": "allows anyone who wants to add new things called Islands to to fortnite so",
    "start": "482039",
    "end": "489080"
  },
  {
    "text": "you can make your own little game and it will be sort of part of the fortnite",
    "start": "489080",
    "end": "494720"
  },
  {
    "text": "experience you people can go there and they can play it and there are B thousands of these",
    "start": "494720",
    "end": "502000"
  },
  {
    "text": "islands have been created not by epic by people outside epic by thousands of different",
    "start": "502000",
    "end": "507639"
  },
  {
    "text": "people and if they make something that's good and they get a lot of Engagement a lot of players then we share Revenue",
    "start": "507639",
    "end": "515200"
  },
  {
    "text": "with them so uh you can make money there are quite a few people who make a living",
    "start": "515200",
    "end": "522760"
  },
  {
    "text": "on writing these kind of things extensions to to fortnite and get people",
    "start": "522760",
    "end": "528480"
  },
  {
    "text": "to play them but this version of verse that um",
    "start": "528480",
    "end": "534920"
  },
  {
    "text": "was released this year is very much a subset of the the language that Tim",
    "start": "534920",
    "end": "542120"
  },
  {
    "text": "envisioned and that I'm going to tell you about in the rest of this talk by the way if you have any",
    "start": "542120",
    "end": "549279"
  },
  {
    "text": "questions you can shout them out or you can save them to the end I'll try to",
    "start": "549279",
    "end": "555160"
  },
  {
    "text": "save a few minutes at the end for",
    "start": "555160",
    "end": "558759"
  },
  {
    "text": "questions so it's a functional logic language what",
    "start": "561240",
    "end": "566839"
  },
  {
    "start": "563000",
    "end": "699000"
  },
  {
    "text": "does that mean well I'm going to uh show you so it has functional programming as a",
    "start": "566839",
    "end": "573440"
  },
  {
    "text": "subset but it also has logic programming like prologue or data",
    "start": "573440",
    "end": "578880"
  },
  {
    "text": "log there are other such languages like Curry and Mercury that are both",
    "start": "578880",
    "end": "583920"
  },
  {
    "text": "functional and logic but verse is a bit different from those so it's a declarative language or",
    "start": "583920",
    "end": "593000"
  },
  {
    "text": "at least that's the default you don't have assignable variables you it's like",
    "start": "593000",
    "end": "599000"
  },
  {
    "text": "aun so like doing const in C++ something that everything you give it the value",
    "start": "599000",
    "end": "604760"
  },
  {
    "text": "and then it remains having that value for all time just like normal variables",
    "start": "604760",
    "end": "610760"
  },
  {
    "text": "in a functional language it is a weird mix between uh",
    "start": "610760",
    "end": "617560"
  },
  {
    "text": "being strict or lazy so strict means you evaluate things you evaluate function",
    "start": "617560",
    "end": "622880"
  },
  {
    "text": "arguments before you call the function and being lazy like hascal is",
    "start": "622880",
    "end": "628880"
  },
  {
    "text": "means that you don't evaluate function arguments before calling the function",
    "start": "628880",
    "end": "634600"
  },
  {
    "text": "you delay it until you know that you need them and versus lenient so",
    "start": "634600",
    "end": "640240"
  },
  {
    "text": "everything is evaluated eventually but not necessarily in the order that you",
    "start": "640240",
    "end": "645600"
  },
  {
    "text": "think I'll show you some examples and it has a static type system",
    "start": "645600",
    "end": "652079"
  },
  {
    "text": "which a very unusual static type system which I'm not going to tell you anything about it also has an effect system",
    "start": "652079",
    "end": "659360"
  },
  {
    "text": "system so you keep track of of effects so if you're doing something like doing",
    "start": "659360",
    "end": "665360"
  },
  {
    "text": "IO or assigning variables and things like that the effect system will keep track of that and make sure that those",
    "start": "665360",
    "end": "673040"
  },
  {
    "text": "effects don't mix in a bad way so it's",
    "start": "673040",
    "end": "679560"
  },
  {
    "text": "um a little bit like having monads in Haskell but without all the the",
    "start": "679560",
    "end": "686279"
  },
  {
    "text": "cumbersome stuff where you have to sort of keep track back of oh am I in the monadic setting or not for those who",
    "start": "686279",
    "end": "693320"
  },
  {
    "text": "know anything about hascal or monads if you don't ignore what I",
    "start": "693320",
    "end": "698320"
  },
  {
    "start": "699000",
    "end": "746000"
  },
  {
    "text": "said so it's very much an expression oriented",
    "start": "700880",
    "end": "706600"
  },
  {
    "text": "language so there it has a fairly ordinary functional language in there so I'm",
    "start": "706600",
    "end": "713880"
  },
  {
    "text": "showing you some example here with some integers you can make two PS",
    "start": "713880",
    "end": "720120"
  },
  {
    "text": "tupes and arrays are kind of the same thing in verse but they have somewhat different types but you can operate on",
    "start": "720120",
    "end": "727839"
  },
  {
    "text": "both tupes and arrays in the same way so here's some example you take the",
    "start": "727839",
    "end": "733040"
  },
  {
    "text": "first component of 3 comma 4 that would be three or a indexed by",
    "start": "733040",
    "end": "738480"
  },
  {
    "text": "seven there's also a longer way to write arrays can ignore",
    "start": "738480",
    "end": "745720"
  },
  {
    "start": "746000",
    "end": "825000"
  },
  {
    "text": "that um here is what how variable binding is done",
    "start": "746519",
    "end": "752880"
  },
  {
    "text": "inverse so this x colon equals 3 you should not think of that as some kind of",
    "start": "752880",
    "end": "759199"
  },
  {
    "text": "old-fashioned Pascal assignment operator this",
    "start": "759199",
    "end": "764360"
  },
  {
    "text": "binds uh X to three so X will be three in this",
    "start": "764360",
    "end": "771480"
  },
  {
    "text": "expression there are I'll show you some variations of this in a moment there are",
    "start": "772560",
    "end": "778199"
  },
  {
    "text": "some interesting other ways to write this inverse so x = 3 x plus X or you can",
    "start": "778199",
    "end": "785160"
  },
  {
    "text": "sayal 3 and yal x + 1 x * Y and the",
    "start": "785160",
    "end": "790959"
  },
  {
    "text": "Order of these things uh usually don't matter so you I could have said Y = X +",
    "start": "790959",
    "end": "796880"
  },
  {
    "text": "1 and then x = 3 after that that's fine uh order only matters for certain",
    "start": "796880",
    "end": "804560"
  },
  {
    "text": "things and not for just uh giving values to",
    "start": "804560",
    "end": "810760"
  },
  {
    "text": "variables so this is like uh some functional languages like",
    "start": "810760",
    "end": "816279"
  },
  {
    "text": "haskal for instance where you can put your your bindings in any order you",
    "start": "816279",
    "end": "823319"
  },
  {
    "start": "825000",
    "end": "887000"
  },
  {
    "text": "like unsurprisingly you can make uh functions so here's a function f takes",
    "start": "829240",
    "end": "836079"
  },
  {
    "text": "an X so that is an INT and it returns an",
    "start": "836079",
    "end": "841360"
  },
  {
    "text": "INT and then you can say what it does it does x + one so I'm not going to go into any",
    "start": "841360",
    "end": "849079"
  },
  {
    "text": "details of what this actually means I mean you you see this and you think you know what it means and it does what you",
    "start": "849079",
    "end": "855680"
  },
  {
    "text": "think it does but it does it in a very weird way so there's a lot more",
    "start": "855680",
    "end": "862839"
  },
  {
    "text": "Machinery under the surface here than you think when you see something like X colon in but in the end it it means",
    "start": "862839",
    "end": "869720"
  },
  {
    "text": "exactly what you think it means but it also means that there is a lot of of extra power inversed that unfortunately",
    "start": "869720",
    "end": "877240"
  },
  {
    "text": "I don't have time to talk much about so I can only sort of uh peque your",
    "start": "877240",
    "end": "883320"
  },
  {
    "text": "interest maybe well I mean this is",
    "start": "883320",
    "end": "889800"
  },
  {
    "start": "887000",
    "end": "909000"
  },
  {
    "text": "a some little functional programming here so you have to have",
    "start": "889800",
    "end": "894959"
  },
  {
    "text": "factorial here it is if x is zero then one Ln time time factorial of nus1 so",
    "start": "894959",
    "end": "902920"
  },
  {
    "text": "completely unremarkable so now we come to something",
    "start": "902920",
    "end": "909240"
  },
  {
    "start": "909000",
    "end": "964000"
  },
  {
    "text": "that is uh a little more unusual there is a choice operator so in",
    "start": "909240",
    "end": "916720"
  },
  {
    "text": "most languages an expression only denotes a single",
    "start": "916720",
    "end": "923480"
  },
  {
    "text": "value but that's not so inverse so three denotes just three it's means three but",
    "start": "923480",
    "end": "930880"
  },
  {
    "text": "three Choice four it means three or",
    "start": "930880",
    "end": "936920"
  },
  {
    "text": "four uh there's also a way to make no uh values at",
    "start": "936920",
    "end": "942440"
  },
  {
    "text": "all this is written false question mark I'll come back to why it looks exactly",
    "start": "942440",
    "end": "948399"
  },
  {
    "text": "like that and there's also some dot dot operators of one do do 10 is a choice",
    "start": "948399",
    "end": "954360"
  },
  {
    "text": "between 1 2 3 4 up to 10",
    "start": "954360",
    "end": "960160"
  },
  {
    "text": "so what does this mean this Choice operator",
    "start": "960160",
    "end": "965360"
  },
  {
    "start": "964000",
    "end": "1039000"
  },
  {
    "text": "well if you write something like this x is 1 or 7 or 2 that doesn't mean that X",
    "start": "965360",
    "end": "974120"
  },
  {
    "text": "becomes this choice of things no X is",
    "start": "974120",
    "end": "979279"
  },
  {
    "text": "only one value at the time so what it means is that you will evaluate this whole thing there three times once when",
    "start": "979279",
    "end": "987079"
  },
  {
    "text": "X is equal to one and then when X X is seven and then when X is 2 and so the whole thing here will be a choice",
    "start": "987079",
    "end": "994000"
  },
  {
    "text": "between 2 8 and three so in in Haskell or python or any",
    "start": "994000",
    "end": "1001880"
  },
  {
    "text": "language with the that has some kind of list comprehensions you would probably like write it like in that little yellow",
    "start": "1001880",
    "end": "1007920"
  },
  {
    "text": "box there x + 1 where X is drawn from 1 7 or",
    "start": "1007920",
    "end": "1013399"
  },
  {
    "text": "two but as a key point the there is no",
    "start": "1013399",
    "end": "1020839"
  },
  {
    "text": "multivalued uh things that you can bind to variable they variables only have one",
    "start": "1021160",
    "end": "1027678"
  },
  {
    "text": "value at a time so you should really see it as some kind of of repetition when you see these",
    "start": "1027679",
    "end": "1037199"
  },
  {
    "start": "1039000",
    "end": "1142000"
  },
  {
    "text": "choices to make it a little more interesting you can Nest them so now",
    "start": "1039039",
    "end": "1044918"
  },
  {
    "text": "order matters X is one or two Y is seven or eight if you swap places with those it",
    "start": "1044919",
    "end": "1051559"
  },
  {
    "text": "means something slightly different and so what is it well the outermost Choice",
    "start": "1051559",
    "end": "1057640"
  },
  {
    "text": "varies most slowly so it's one 17 and then y becomes 8 so then it's 18 and",
    "start": "1057640",
    "end": "1064160"
  },
  {
    "text": "then X becomes two so it's 27 and then 28 and I mean this is not uh",
    "start": "1064160",
    "end": "1071200"
  },
  {
    "text": "particularly unusual for any language that has some kind of of comprehension syntax",
    "start": "1071200",
    "end": "1079679"
  },
  {
    "text": "but it's very much built into verse the choice is a fundamental building",
    "start": "1079679",
    "end": "1086000"
  },
  {
    "text": "block here uh yeah so that's the same one as before well I mean you",
    "start": "1088480",
    "end": "1096360"
  },
  {
    "text": "don't have to give names to these things you could write one or two comma seven",
    "start": "1096360",
    "end": "1101640"
  },
  {
    "text": "or eight and it would mean exactly the same thing the leftmost choice varies",
    "start": "1101640",
    "end": "1107480"
  },
  {
    "text": "most slowly and then the that are done in order and if you write something like 77",
    "start": "1107480",
    "end": "1114480"
  },
  {
    "text": "+ 1 or three well that's like having a choice between 77 + 1 and or 77 +",
    "start": "1114480",
    "end": "1122919"
  },
  {
    "text": "3 and if you say 77 plus there false question mark if you remember I had a",
    "start": "1122919",
    "end": "1129159"
  },
  {
    "text": "couple of slides ago that means there are no choices so if you add 77 to no choices",
    "start": "1129159",
    "end": "1137080"
  },
  {
    "text": "you get no choices",
    "start": "1137080",
    "end": "1140720"
  },
  {
    "start": "1142000",
    "end": "1255000"
  },
  {
    "text": "so here is a slightly more mindbending uh example so stare at this for a moment",
    "start": "1143600",
    "end": "1150679"
  },
  {
    "text": "it says that X is y or two and then we get to know that Y is",
    "start": "1150679",
    "end": "1158320"
  },
  {
    "text": "seven or8 and so the First Choice there will",
    "start": "1158320",
    "end": "1163720"
  },
  {
    "text": "vary more slowly and the Y will vary more quickly so first X is equal to",
    "start": "1163720",
    "end": "1172159"
  },
  {
    "text": "Y and Y will be 7 so we get",
    "start": "1172159",
    "end": "1177600"
  },
  {
    "text": "77 then y will be 8 and since X was equal to Y we get",
    "start": "1177600",
    "end": "1183960"
  },
  {
    "text": "88 and then we get 27 and 28 so here sort of the order in which things are",
    "start": "1183960",
    "end": "1190200"
  },
  {
    "text": "iterated go from left to right but you are still allowed to have data flowing",
    "start": "1190200",
    "end": "1195640"
  },
  {
    "text": "from right to left if you want to so we using Y in the expression for X which is",
    "start": "1195640",
    "end": "1202720"
  },
  {
    "text": "a bit um um hard to to wrap your head around I",
    "start": "1202720",
    "end": "1210559"
  },
  {
    "text": "wouldn't recommend doing this yes yes if you have a circular data",
    "start": "1210559",
    "end": "1220320"
  },
  {
    "text": "dependency the the verifier as it's called the thing that sort of",
    "start": "1220320",
    "end": "1225720"
  },
  {
    "text": "corresponds to a type Checker will look at your program and say uh this doesn't look right of course uh",
    "start": "1225720",
    "end": "1234440"
  },
  {
    "text": "you can confuse it I mean it's possible to construct a program that does not",
    "start": "1234440",
    "end": "1240080"
  },
  {
    "text": "have a circular dependency but it's too complicated to figure that out and then the verifier will complain and say I",
    "start": "1240080",
    "end": "1246600"
  },
  {
    "text": "couldn't prove that this was uh free of",
    "start": "1246600",
    "end": "1252039"
  },
  {
    "start": "1255000",
    "end": "1311000"
  },
  {
    "text": "circularities conditionals are also uh a bit unusual in in",
    "start": "1256039",
    "end": "1264000"
  },
  {
    "text": "verse has anyone here heard of the language",
    "start": "1264000",
    "end": "1269080"
  },
  {
    "text": "icon no no I think it was late 60s or something like that it had the same idea",
    "start": "1269080",
    "end": "1276600"
  },
  {
    "text": "so there are no booleans well I you can make booleans if you want to but the if construct does not use",
    "start": "1276600",
    "end": "1284320"
  },
  {
    "text": "booleans instead you have this notion of success and failure so failure is when",
    "start": "1284320",
    "end": "1291320"
  },
  {
    "text": "you have some Choice thing and there are no choices and success is when there's at least one",
    "start": "1291320",
    "end": "1297960"
  },
  {
    "text": "choice so this expression e here if it succeeds if there's at least one thing",
    "start": "1297960",
    "end": "1304760"
  },
  {
    "text": "there that that is okay then you get E1 and if it fails you get E2 so let's see",
    "start": "1304760",
    "end": "1311200"
  },
  {
    "start": "1311000",
    "end": "1454000"
  },
  {
    "text": "an example so how does something like X less than 20 work well if s X is Le less",
    "start": "1311200",
    "end": "1320200"
  },
  {
    "text": "than 20 then you'll get the leftmost oper and you will get X so if say you you compare",
    "start": "1320200",
    "end": "1327840"
  },
  {
    "text": "five less than 20 the result of that is five if you compare 30 less than 20 well",
    "start": "1327840",
    "end": "1335559"
  },
  {
    "text": "it's not so that will it will fail so the if there does exactly what",
    "start": "1335559",
    "end": "1342080"
  },
  {
    "text": "you think it does but it does it maybe in a slightly different way it also means means that you can",
    "start": "1342080",
    "end": "1349400"
  },
  {
    "text": "write certain cute things like that if further below there if 0 less than x",
    "start": "1349400",
    "end": "1355840"
  },
  {
    "text": "less than 20 so uh less than is Right associative",
    "start": "1355840",
    "end": "1361159"
  },
  {
    "text": "so it will compare x with 20 first that fail then it all fails if x is less than",
    "start": "1361159",
    "end": "1369000"
  },
  {
    "text": "20 then X less than 20 will return X and then that will be compared with zero and",
    "start": "1369000",
    "end": "1376440"
  },
  {
    "text": "if that fails well then you failed but if that succeeds well then you'll get zero but you don't care what you get",
    "start": "1376440",
    "end": "1382679"
  },
  {
    "text": "you'll get to the expression",
    "start": "1382679",
    "end": "1386039"
  },
  {
    "text": "E1 I don't know if you are just flabbergasted or if everything",
    "start": "1391440",
    "end": "1397279"
  },
  {
    "text": "is clear if x is",
    "start": "1397279",
    "end": "1404640"
  },
  {
    "text": "false um if x is false question mark was the thing that fails that that that",
    "start": "1404640",
    "end": "1413679"
  },
  {
    "text": "fails uh if it's the Boolean value of false if you have created some Boolean",
    "start": "1415360",
    "end": "1421400"
  },
  {
    "text": "yes then false succeeds yes it",
    "start": "1421400",
    "end": "1426840"
  },
  {
    "text": "it I'm not saying this is necessarily the best",
    "start": "1426840",
    "end": "1432200"
  },
  {
    "text": "choice but Tim is the CEO",
    "start": "1432720",
    "end": "1440440"
  },
  {
    "text": "joking aside I think this is kind of cool it's it's not an unnatural thing",
    "start": "1445799",
    "end": "1451080"
  },
  {
    "text": "and I show you in a moment here on something that is that you can do that is very nice with this just",
    "start": "1451080",
    "end": "1459840"
  },
  {
    "start": "1454000",
    "end": "1513000"
  },
  {
    "text": "uh showing you and and or first so X less than 20 comma y greater",
    "start": "1459840",
    "end": "1467320"
  },
  {
    "text": "than zero that comma is the same thing that builds uh",
    "start": "1467320",
    "end": "1472720"
  },
  {
    "text": "tuples so I'm creating the Tuple of X less than 20 and y greater than zero so",
    "start": "1472720",
    "end": "1478720"
  },
  {
    "text": "if both succeed it will be the Tuple with X and Y in it but if one of them fails then the whole thing fails because",
    "start": "1478720",
    "end": "1485600"
  },
  {
    "text": "then you can't make any tuples or if you wanted to have or well",
    "start": "1485600",
    "end": "1491640"
  },
  {
    "text": "then you can just use choice this will be a choice between X or X less than",
    "start": "1491640",
    "end": "1498679"
  },
  {
    "text": "which might fail and then you try the Y one or if it succeeded well then you you",
    "start": "1498679",
    "end": "1504360"
  },
  {
    "text": "might succeed in two ways but it doesn't really matter you get E1",
    "start": "1504360",
    "end": "1510279"
  },
  {
    "start": "1513000",
    "end": "1576000"
  },
  {
    "text": "regardless so you can of course compare with an",
    "start": "1515840",
    "end": "1522360"
  },
  {
    "text": "equal as well um so you can say x equals z so",
    "start": "1522360",
    "end": "1527880"
  },
  {
    "text": "we'll come back more to to the equal sign because it's an important operator",
    "start": "1527880",
    "end": "1533520"
  },
  {
    "text": "and it's not quite what you think um but it does exactly what you",
    "start": "1533520",
    "end": "1539720"
  },
  {
    "text": "think here if it's a is X is zero it succeed otherwise it",
    "start": "1539720",
    "end": "1546200"
  },
  {
    "text": "fails but you can write these uh kind of cool things like x equals 2 or three",
    "start": "1546200",
    "end": "1552679"
  },
  {
    "text": "which means exactly what you were hoping it would mean it will compare we will",
    "start": "1552679",
    "end": "1558559"
  },
  {
    "text": "try to evaluate this twice one uh doing xal 2 and once x equal 3 and if either",
    "start": "1558559",
    "end": "1565480"
  },
  {
    "text": "of them succeeds then it succeeds so some idioms look a lot nicer in verse",
    "start": "1565480",
    "end": "1572240"
  },
  {
    "text": "than they do in most other programming",
    "start": "1572240",
    "end": "1575760"
  },
  {
    "start": "1576000",
    "end": "1624000"
  },
  {
    "text": "languages okay so what can you do with choices you can turn them into tuples or",
    "start": "1577600",
    "end": "1583320"
  },
  {
    "text": "arrays whichever you want to call them with something that's called four four",
    "start": "1583320",
    "end": "1588640"
  },
  {
    "text": "so four with some expression will turn that into an array which could be an",
    "start": "1588640",
    "end": "1594240"
  },
  {
    "text": "empty array if it doesn't succeed at all or it could be like three or four you",
    "start": "1594240",
    "end": "1600120"
  },
  {
    "text": "get the the tle 3 comma 4 1 do 10 you get 1 2 three up to 10 and false",
    "start": "1600120",
    "end": "1607000"
  },
  {
    "text": "question mark which uh fails so this false is not the Boolean",
    "start": "1607000",
    "end": "1612440"
  },
  {
    "text": "false this is so badly named that we have objected but you know know why it's",
    "start": "1612440",
    "end": "1619520"
  },
  {
    "text": "not",
    "start": "1619520",
    "end": "1621799"
  },
  {
    "start": "1624000",
    "end": "1641000"
  },
  {
    "text": "changed um yeah so order matters so four three or four get turns into three comma",
    "start": "1625159",
    "end": "1632559"
  },
  {
    "text": "four and four or three turns into 4 comma 3 so it's not a commutative",
    "start": "1632559",
    "end": "1640880"
  },
  {
    "start": "1641000",
    "end": "1698000"
  },
  {
    "text": "operator you can also go the other way if you have a tuple and you want to have",
    "start": "1641960",
    "end": "1647360"
  },
  {
    "text": "choices you can put the question mark after it so 3 comma 4 is the choice",
    "start": "1647360",
    "end": "1653360"
  },
  {
    "text": "between three and four which means that sort of four and question marks do the",
    "start": "1653360",
    "end": "1658600"
  },
  {
    "text": "opposite things so if you do four e that will take the choices in E and turn them",
    "start": "1658600",
    "end": "1664360"
  },
  {
    "text": "into an array and question mark would turn it back into a choice so that's the same as e or doing the other other way",
    "start": "1664360",
    "end": "1670559"
  },
  {
    "text": "around splitting it into choices and then wrapping them up again so that's",
    "start": "1670559",
    "end": "1676399"
  },
  {
    "text": "also the uh same as e there in the third",
    "start": "1676399",
    "end": "1681960"
  },
  {
    "text": "case and false is actually the empty",
    "start": "1681960",
    "end": "1687039"
  },
  {
    "text": "Tuple and so that's why false question mark is the thing that fails because the",
    "start": "1687039",
    "end": "1692320"
  },
  {
    "text": "empty Tuple there are no alternatives to make out of it so it",
    "start": "1692320",
    "end": "1698480"
  },
  {
    "start": "1698000",
    "end": "1815000"
  },
  {
    "text": "fails and you can do more interesting things uh yeah I I'll show you a couple of",
    "start": "1699200",
    "end": "1707120"
  },
  {
    "text": "these so this what what I showed you before was the most simple version of four where you only had something in the",
    "start": "1707120",
    "end": "1714720"
  },
  {
    "text": "sort of What's called the domain of the four you can also have separate the",
    "start": "1714720",
    "end": "1720159"
  },
  {
    "text": "domain and the body and then like four Loops in C or",
    "start": "1720159",
    "end": "1726480"
  },
  {
    "text": "well or C++ I guess no I guess modern c as well you can you can make a variable",
    "start": "1726480",
    "end": "1731880"
  },
  {
    "text": "binding in this first part so I equals 1 do do3 and then you compute I time I so",
    "start": "1731880",
    "end": "1738840"
  },
  {
    "text": "I will be in scope in the body of the for Loop and uh you can do all kinds of sort",
    "start": "1738840",
    "end": "1748000"
  },
  {
    "text": "of same kind of things that you can do in with the list comprehension syntax",
    "start": "1748000",
    "end": "1753880"
  },
  {
    "text": "you can put multiple generators in there if you want and you have can have conditions you can say 1 do. four and if",
    "start": "1753880",
    "end": "1761279"
  },
  {
    "text": "you have some function is even that fails for odd numbers and succeeds for",
    "start": "1761279",
    "end": "1767240"
  },
  {
    "text": "even numbers then you'll just get the evens you can also have tests in in the",
    "start": "1767240",
    "end": "1776799"
  },
  {
    "text": "body and that means that it will check that the body is succeeds for all of the",
    "start": "1776799",
    "end": "1784720"
  },
  {
    "text": "iterations of the loop so IAL 1 do4 I less than three well you will get same",
    "start": "1784720",
    "end": "1790679"
  },
  {
    "text": "as 1 less than three 2 less than three 3 less than three four less than three which of course two of those fail so the",
    "start": "1790679",
    "end": "1797600"
  },
  {
    "text": "whole thing fails so with a nice combination of of these kind of filters",
    "start": "1797600",
    "end": "1804200"
  },
  {
    "text": "you can filter out some things or you can check that if you have some Universal",
    "start": "1804200",
    "end": "1810760"
  },
  {
    "text": "Property you want to test let's skip",
    "start": "1810760",
    "end": "1816559"
  },
  {
    "start": "1815000",
    "end": "1879000"
  },
  {
    "text": "that um yeah you can do indexing like this I'm not going",
    "start": "1817399",
    "end": "1826080"
  },
  {
    "text": "to oh the last the last line is is nice I think so",
    "start": "1826080",
    "end": "1832559"
  },
  {
    "text": "this um square brackets which you can use for",
    "start": "1832559",
    "end": "1839840"
  },
  {
    "text": "indexing uh indexing fails if you're out of bounds it's not an error it just fails",
    "start": "1839840",
    "end": "1847159"
  },
  {
    "text": "which means you can write something like if x equals your index into this array",
    "start": "1847159",
    "end": "1852600"
  },
  {
    "text": "as with with I well if you were inbounds then X will get the value and that will",
    "start": "1852600",
    "end": "1859320"
  },
  {
    "text": "you can use that in the then branch and if it was out of bounds then you get to",
    "start": "1859320",
    "end": "1866279"
  },
  {
    "text": "the else Branch where X is not bound of course because it was there was",
    "start": "1866279",
    "end": "1871480"
  },
  {
    "text": "nothing there was no value to that",
    "start": "1871480",
    "end": "1876240"
  },
  {
    "start": "1879000",
    "end": "1947000"
  },
  {
    "text": "succeeded so you can do things that are maybe slightly unexpected",
    "start": "1883000",
    "end": "1888600"
  },
  {
    "text": "uh that you certainly couldn't do in in C or C++ or hasar for that",
    "start": "1888600",
    "end": "1896320"
  },
  {
    "text": "matter you can have a for Loop that says four I is an integer and then I index",
    "start": "1896320",
    "end": "1903360"
  },
  {
    "text": "into as with I well uh I can be any integer but",
    "start": "1903360",
    "end": "1912360"
  },
  {
    "text": "clearly it will the the indexing will fail for all numbers except 0 one and",
    "start": "1912360",
    "end": "1917960"
  },
  {
    "text": "two if since as only has three elements so this thing works it will index into",
    "start": "1917960",
    "end": "1924320"
  },
  {
    "text": "as with 012 and you will get the result that you expect and you didn't have to know how many elements there was in as",
    "start": "1924320",
    "end": "1932080"
  },
  {
    "text": "you just say ah let's index with all the integers some of them might",
    "start": "1932080",
    "end": "1937919"
  },
  {
    "text": "succeed yeah so I'll skip that um so what about this thing with",
    "start": "1942000",
    "end": "1950320"
  },
  {
    "start": "1947000",
    "end": "2013000"
  },
  {
    "text": "failure well so uh it's usually pretty easy to look",
    "start": "1950320",
    "end": "1956480"
  },
  {
    "text": "at an expression to see if it can fail or not um so the comparisons you already saw",
    "start": "1956480",
    "end": "1963880"
  },
  {
    "text": "they can fail and if you do a function call and you use round parentheses that",
    "start": "1963880",
    "end": "1968919"
  },
  {
    "text": "means this cannot fail if f for some reason could fail then this verifier the",
    "start": "1968919",
    "end": "1976799"
  },
  {
    "text": "type checker thing will tell you that no you can't do that F might fail you have",
    "start": "1976799",
    "end": "1982000"
  },
  {
    "text": "to handle that if you use square brackets then you're this is allowed to",
    "start": "1982000",
    "end": "1987720"
  },
  {
    "text": "fail and if things that are allowed to fail they have to be in a context where",
    "start": "1987720",
    "end": "1993320"
  },
  {
    "text": "failure is allowed like in the condition of an if or in a for Loop that's where you're allowed to fail in a sort of top",
    "start": "1993320",
    "end": "2000720"
  },
  {
    "text": "level in a function you're normally not allowed to fail you can declare that the",
    "start": "2000720",
    "end": "2006679"
  },
  {
    "text": "function can fail if you want want to have that",
    "start": "2006679",
    "end": "2014480"
  },
  {
    "start": "2013000",
    "end": "2109000"
  },
  {
    "text": "okay few more minutes for the few more weirdnesses of",
    "start": "2014799",
    "end": "2022960"
  },
  {
    "text": "verse so here's some uh expression or",
    "start": "2022960",
    "end": "2028440"
  },
  {
    "text": "not express well it is an expression xal 7 or colon equals",
    "start": "2028440",
    "end": "2033480"
  },
  {
    "text": "7 you can write it that way but you could also just write it as",
    "start": "2033480",
    "end": "2038519"
  },
  {
    "text": "well X is an INT I'm not telling you yet which int it is and then you can say well X is must be equal to",
    "start": "2038519",
    "end": "2046960"
  },
  {
    "text": "7 so those two are exactly the same and you could have more than one of",
    "start": "2046960",
    "end": "2053760"
  },
  {
    "text": "these you could say also xal 6 of course that program will fail",
    "start": "2053760",
    "end": "2061599"
  },
  {
    "text": "because X can't be both seven and six so if you try to make something have more",
    "start": "2061599",
    "end": "2068599"
  },
  {
    "text": "than one value then that's a",
    "start": "2068599",
    "end": "2072399"
  },
  {
    "text": "failure um you can declare variables pretty much anywhere you like and they will have a certain scope that is sort",
    "start": "2075560",
    "end": "2082878"
  },
  {
    "text": "of defined by the different language constructs so if you wanted to not say x colon int out there you could put it in",
    "start": "2082879",
    "end": "2091320"
  },
  {
    "text": "in where you mention X in that last expression that's fine or you could say",
    "start": "2091320",
    "end": "2096398"
  },
  {
    "text": "x = 7 in there if you want that's also fine",
    "start": "2096399",
    "end": "2102440"
  },
  {
    "text": "um may be useful I don't",
    "start": "2102440",
    "end": "2107200"
  },
  {
    "start": "2109000",
    "end": "2170000"
  },
  {
    "text": "know um here is a nice thing you can do with these kind of things",
    "start": "2111599",
    "end": "2118000"
  },
  {
    "text": "um you can say why is an INT and Zed is an INT and then you can have some",
    "start": "2118000",
    "end": "2124960"
  },
  {
    "text": "condition where you give them different values these are not you shouldn't think of them as assignments I mean it's",
    "start": "2124960",
    "end": "2132680"
  },
  {
    "text": "before you've said anything about them they don't they could have any value and then you sort of nail them down to what",
    "start": "2132680",
    "end": "2139960"
  },
  {
    "text": "that they three and four or 232 and 913 and you can never change them after that",
    "start": "2139960",
    "end": "2145960"
  },
  {
    "text": "they are those values if you try to have an equal sign with some other value that",
    "start": "2145960",
    "end": "2151480"
  },
  {
    "text": "will simply fail saying no it's not that",
    "start": "2151480",
    "end": "2156400"
  },
  {
    "text": "value and you can do this in all kinds of ways where you can sort of have partial",
    "start": "2156640",
    "end": "2162079"
  },
  {
    "text": "values and uh yeah that's just more of the same",
    "start": "2162079",
    "end": "2168760"
  },
  {
    "text": "and since it's only four minutes left I think I'll leave that to questions",
    "start": "2168760",
    "end": "2174720"
  },
  {
    "start": "2170000",
    "end": "2190000"
  },
  {
    "text": "[Applause]",
    "start": "2174720",
    "end": "2180790"
  },
  {
    "text": "now",
    "start": "2186560",
    "end": "2189560"
  }
]