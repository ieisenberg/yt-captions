[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "[Music]",
    "start": "3670",
    "end": "8760"
  },
  {
    "text": "great thanks Peter uh and uh happy to be with everybody uh you know virtually",
    "start": "9000",
    "end": "14120"
  },
  {
    "text": "coming at you from the California coast thousands of miles away uh so today we're going to talk about scaling your",
    "start": "14120",
    "end": "20359"
  },
  {
    "text": "architecture with services and events um and as Peter said uh I've spent a bunch",
    "start": "20359",
    "end": "26119"
  },
  {
    "text": "of time as an engineering leader at eBay at Google I'm at eBay in right now as a",
    "start": "26119",
    "end": "31240"
  },
  {
    "text": "Chief Architect and I I also uh LED engineering at Stitch fix and was a VP of engineering at wework and a bunch of",
    "start": "31240",
    "end": "37559"
  },
  {
    "text": "the stories and sort of lessons that we're going to talk about today come from a bunch of these experiences so I",
    "start": "37559",
    "end": "43039"
  },
  {
    "start": "42000",
    "end": "372000"
  },
  {
    "text": "want to talk about four different things first I want to talk about the kind of architecture as as your kind of product",
    "start": "43039",
    "end": "50719"
  },
  {
    "text": "and uh company evolves like what kind of architecture should you have at your different phases of development uh and",
    "start": "50719",
    "end": "56480"
  },
  {
    "text": "then we're going to focus in on uh when it's appropriate to have a service architecture we'll talk about a lot of",
    "start": "56480",
    "end": "62000"
  },
  {
    "text": "details around there um what it looks like to migrate from a monolithic architecture into Services then we're",
    "start": "62000",
    "end": "68360"
  },
  {
    "text": "going to spend a little bit of time talking about event-driven communication and then finally we're going to spend most of the talk the remaining part of",
    "start": "68360",
    "end": "74640"
  },
  {
    "text": "the talk combining services and events together as Tools in our architectural toolbox to do some really interesting",
    "start": "74640",
    "end": "81079"
  },
  {
    "text": "things so let's start by talking about architecture Evolution and I like to think about uh you know this the phases",
    "start": "81079",
    "end": "88880"
  },
  {
    "text": "of a company or product growth in sort of these uh in these areas so when we're",
    "start": "88880",
    "end": "94360"
  },
  {
    "text": "starting out as a product or as a company we probably have a single team we probably all fit around a conference",
    "start": "94360",
    "end": "100040"
  },
  {
    "text": "table at least when we're able to be all together in the same room safely um we want to optimize for Rapid iteration",
    "start": "100040",
    "end": "107079"
  },
  {
    "text": "because maybe we haven't even found product Market fit maybe we we haven't even found our business model yet and",
    "start": "107079",
    "end": "112960"
  },
  {
    "text": "typically the the uh the appropriate architecture for this uh this phase of development is absolutely monolithic so",
    "start": "112960",
    "end": "119840"
  },
  {
    "text": "you know I don't I'm not a believer that people should anywhere uh start with uh with microservices or any aspect of a a",
    "start": "119840",
    "end": "125920"
  },
  {
    "text": "distributed system but over time you will have found that product Market fit you'll you'll have engaged your initial",
    "start": "125920",
    "end": "132400"
  },
  {
    "text": "customers and you'll really start hopefully scaling um and so now you've grown to uh many teams not just one uh",
    "start": "132400",
    "end": "140519"
  },
  {
    "text": "now instead of Rapid iteration we're trying we're adding in the uh the requirements to have a lot more velocity",
    "start": "140519",
    "end": "146519"
  },
  {
    "text": "and a lot more scalability about the software that we build and then here's when it's more appropriate for us to start introducing a monolithic or a",
    "start": "146519",
    "end": "154400"
  },
  {
    "text": "microservice architecture instead of a monolith and then uh nothing uh continues up forever so everything's",
    "start": "154400",
    "end": "161519"
  },
  {
    "text": "always an scurve so you know in the Twilight Twilight years of your company or your product you're in what I'll call",
    "start": "161519",
    "end": "167440"
  },
  {
    "text": "the optimizing phase where maybe we'll start to consolidate down from many teams to fewer teams rather than",
    "start": "167440",
    "end": "173560"
  },
  {
    "text": "velocity and scalability you're thinking about efficiency and sustainability um and then you're",
    "start": "173560",
    "end": "179000"
  },
  {
    "text": "probably consolid Val ating your architecture into something smaller what I want to focus on today is this uh is",
    "start": "179000",
    "end": "184760"
  },
  {
    "text": "this scaling phase in the center but the thing I want to I want to be super clear on is maybe 1% of the applications on",
    "start": "184760",
    "end": "191519"
  },
  {
    "text": "the planet uh are you know are in this scaling phase and you know you can imagine that they're the people that you",
    "start": "191519",
    "end": "197280"
  },
  {
    "text": "you know you'd think the Googles the Netflix's the Amazon the ebays of the world um so I want to make you know",
    "start": "197280",
    "end": "202400"
  },
  {
    "text": "we're going to talk a lot about um about microservices we're going to talk a lot about events but I'm really talking",
    "start": "202400",
    "end": "208080"
  },
  {
    "text": "about this phase of development of ay not you know starting out um so let's",
    "start": "208080",
    "end": "213200"
  },
  {
    "text": "talk let's uh uh explore some of the examples of those companies that are now big that started off uh really small so",
    "start": "213200",
    "end": "221000"
  },
  {
    "text": "eBay where I work again today is on it is on maybe depending on how you count its fifth complete rewrite of its",
    "start": "221000",
    "end": "226519"
  },
  {
    "text": "infrastructure so it started out famously almost exactly 25 years ago when the founder prier midar took a",
    "start": "226519",
    "end": "233400"
  },
  {
    "text": "three-day Labor Day weekend and built the first thing in monolithic Pearl application on his little probably 386",
    "start": "233400",
    "end": "240760"
  },
  {
    "text": "tower under his desk um and built the first thing that ultimately became eBay",
    "start": "240760",
    "end": "246000"
  },
  {
    "text": "and he was trying out in 1995 this new cool thing called the web uh the next iteration of eBay was a monolithic",
    "start": "246000",
    "end": "253840"
  },
  {
    "text": "C++ uh monster it grew to 3.4 million lines of code in a single isapp dll uh",
    "start": "253840",
    "end": "261840"
  },
  {
    "text": "so that was pretty horrible they were actually hitting compiler limits on the number of methods per class which I'm",
    "start": "261840",
    "end": "267520"
  },
  {
    "text": "horrified to say that I actually know that at least at the time you could only have 16,000 or 16k more precisely",
    "start": "267520",
    "end": "274080"
  },
  {
    "text": "methods in a class and they were actually hitting that limit uh the next iteration was a breaking it up up of",
    "start": "274080",
    "end": "279960"
  },
  {
    "text": "that monolith into I wouldn't call it microservices but maybe many applications so maybe several hundred",
    "start": "279960",
    "end": "286039"
  },
  {
    "text": "individual Java applications one that was maybe for the selling part of the site for the search part of the site for",
    "start": "286039",
    "end": "291840"
  },
  {
    "text": "the buying part Etc and then now it's fair to characterize eBay as a polyglot set of",
    "start": "291840",
    "end": "297680"
  },
  {
    "text": "microservices Twitter has gone through a similar Evolution so you maybe call it on its third generation it started",
    "start": "297680",
    "end": "304120"
  },
  {
    "text": "famously as the world's largest Ruby on Rails application which I love the fact that they codename that the monil uh the",
    "start": "304120",
    "end": "310680"
  },
  {
    "text": "next iteration was breaking out the front end uh mostly into JavaScript the back end out into Services mostly",
    "start": "310680",
    "end": "316800"
  },
  {
    "text": "written in Scala and now it's fair to characterize Twitter as a polyglot set of microservices Amazon has gone through a",
    "start": "316800",
    "end": "323680"
  },
  {
    "text": "similar Evolution so when it started out in 1995 it was a monolithic front and pearl SE hybrid front end monolithic C",
    "start": "323680",
    "end": "332080"
  },
  {
    "text": "backend um they spent most of the years the year 2000 to 2005 breaking up that",
    "start": "332080",
    "end": "338479"
  },
  {
    "text": "monolith into a service oriented architecture which we would Now call microservices a lot of those uh Services",
    "start": "338479",
    "end": "344560"
  },
  {
    "text": "then written in Java and C++ and now it's fair to call Amazon a polyglot set of microservices so it sounds like",
    "start": "344560",
    "end": "351520"
  },
  {
    "text": "there's a pattern here and but the pattern has two elements to it or actually three one is no one starts with",
    "start": "351520",
    "end": "357800"
  },
  {
    "text": "microservices past a certain scale almost everybody ends up with something or co-evolve to something that we now",
    "start": "357800",
    "end": "364120"
  },
  {
    "text": "call microservices but again I want to caution a lot of companies maybe most companies never reached that scale that",
    "start": "364120",
    "end": "370560"
  },
  {
    "text": "that requires that so um so given that kind of background I'd like to dig a",
    "start": "370560",
    "end": "376039"
  },
  {
    "start": "372000",
    "end": "830000"
  },
  {
    "text": "Little Deeper dive into what it means to have a service architecture and what what we get out of it and what are some",
    "start": "376039",
    "end": "381599"
  },
  {
    "text": "what are some of the issues there so again let's think about the problem that we're trying to solve we're trying to",
    "start": "381599",
    "end": "387199"
  },
  {
    "text": "solve not just a technology problem but also an organizational problem so you know in our in our growing organization",
    "start": "387199",
    "end": "394680"
  },
  {
    "text": "we don't just have one team we have a bunch of different teams again if you were early eBay you'd have the buying team and the selling team and a bunch of",
    "start": "394680",
    "end": "401440"
  },
  {
    "text": "other individual teams and they all need to be able to make uh very rapid changes independently of each other so uh what",
    "start": "401440",
    "end": "409599"
  },
  {
    "text": "you want is for this for the architecture of the system to sort of mirror or be a duel of the",
    "start": "409599",
    "end": "416000"
  },
  {
    "text": "organizational architecture so where we have one domain uh we should probably have one team and then that one team",
    "start": "416000",
    "end": "422919"
  },
  {
    "text": "should uh build and maintain one or maybe a small number of services and I and I'm sure a bunch of us here are",
    "start": "422919",
    "end": "429080"
  },
  {
    "text": "familiar with Conway's law which is the idea that our organization is reflected or should be reflected in our",
    "start": "429080",
    "end": "435440"
  },
  {
    "text": "architecture in fact the law itself is that you can't help but ship your org chart that your organization is almost",
    "start": "435440",
    "end": "441599"
  },
  {
    "text": "naturally going to get reflected in the architecture that you build so with Services we're we're we",
    "start": "441599",
    "end": "447680"
  },
  {
    "text": "give the ability for those individual teams to have sep to be autonomous from each other and also be accountable end",
    "start": "447680",
    "end": "453360"
  },
  {
    "text": "to endend for uh for the capabilities that they write so teams are able to independently design develop deploy and",
    "start": "453360",
    "end": "460560"
  },
  {
    "text": "operate their individual services and then in in ideally service teams are going to own their services end to end",
    "start": "460560",
    "end": "467159"
  },
  {
    "text": "uh uh all the way along the other thing that we're getting out of this service service architecture at this phase is is",
    "start": "467159",
    "end": "474319"
  },
  {
    "text": "abstraction and encapsulation which is a great thing in software engineering in general but particularly appropriate",
    "start": "474319",
    "end": "479680"
  },
  {
    "text": "when we're building a large scale system like this so that service boundary is giving us fault isolation so you know",
    "start": "479680",
    "end": "486199"
  },
  {
    "text": "within that service boundary we're able to catch and hopefully uh hopefully deal with uh issues that come up errors that",
    "start": "486199",
    "end": "492879"
  },
  {
    "text": "come up uh it's also a boundary within which we can make good performance optimizations behind that uh behind that",
    "start": "492879",
    "end": "499280"
  },
  {
    "text": "interface that we expose to the outside world and then uh particularly in the modern world and I think less widely",
    "start": "499280",
    "end": "505919"
  },
  {
    "text": "appreciated as it uh as it should be uh it's actually a security boundary so if you're doing any kind of regulated stuff",
    "start": "505919",
    "end": "513880"
  },
  {
    "text": "anything with payments or anything with people's personal information being able to isolate parts of the system where we",
    "start": "513880",
    "end": "519399"
  },
  {
    "text": "deal with financial information or private information for example separate from other things it allows us to have",
    "start": "519399",
    "end": "525600"
  },
  {
    "text": "um uh put more stringent uh you know operator operating uh requirements",
    "start": "525600",
    "end": "530760"
  },
  {
    "text": "around those areas uh you know that again deal with financial or private information and then you know what I",
    "start": "530760",
    "end": "536959"
  },
  {
    "text": "have found over and over again is a critical aspect to making one of these service or architectures work is to have",
    "start": "536959",
    "end": "542560"
  },
  {
    "text": "a really strict discipline around that interface boundary so we want to uh we want to make sure that we have a really",
    "start": "542560",
    "end": "548440"
  },
  {
    "text": "wellp specified interface contract uh and then because we have that contract we can uh we can leverage that to build",
    "start": "548440",
    "end": "555680"
  },
  {
    "text": "tests that test that component separately and we can mock out the other services that this service integrates",
    "start": "555680",
    "end": "561560"
  },
  {
    "text": "with and as I'm sure Mo most of us know one of the great uh uh tools that a lot",
    "start": "561560",
    "end": "566760"
  },
  {
    "text": "of people use is packed which is of course an Australian original thing um and then the the last",
    "start": "566760",
    "end": "573560"
  },
  {
    "text": "thing I want to point out here is the importance of using that published service interface as the only mechanism",
    "start": "573560",
    "end": "579680"
  },
  {
    "text": "that gets data into or out of the service and one thing that was a huge problem in eBay about 12 years ago uh",
    "start": "579680",
    "end": "587360"
  },
  {
    "text": "was before they went to a fuller a more um uh more correct service architecture",
    "start": "587360",
    "end": "593120"
  },
  {
    "text": "um people were able to kind of have backdoor access to databases so you would you know people would use services",
    "start": "593120",
    "end": "599120"
  },
  {
    "text": "but there were but it was they were also able to like read and write directly from databases uh and as you can imagine",
    "start": "599120",
    "end": "605480"
  },
  {
    "text": "if I'm able to read and write uh your your data from behind your back what",
    "start": "605480",
    "end": "611160"
  },
  {
    "text": "what kind of service uh what kind of operating guarantees uh or uh can you make in your service basically none",
    "start": "611160",
    "end": "617440"
  },
  {
    "text": "because again I'm able to you know do things behind your back um so where we are with this is we want to have an",
    "start": "617440",
    "end": "623560"
  },
  {
    "text": "architecture where we have services that are single purpose they have a simple well-defined interface that we've",
    "start": "623560",
    "end": "629120"
  },
  {
    "text": "negotiated with our customer teams they're modular and independent and then critically to that last point I was",
    "start": "629120",
    "end": "634720"
  },
  {
    "text": "talking about is they are they have isolated persistence so we don't share the database for one service with with",
    "start": "634720",
    "end": "641279"
  },
  {
    "text": "another service so now I want to talk a little bit about how do we get to this service",
    "start": "641279",
    "end": "646320"
  },
  {
    "text": "architecture so how do we get from a monolithic say database to a more service oriented architecture where we",
    "start": "646320",
    "end": "652720"
  },
  {
    "text": "have separate databases and I'll use a specific set of examples from when I uh when I worked at Stitch fix so Stitch s",
    "start": "652720",
    "end": "659240"
  },
  {
    "text": "fix if you're not familiar with it is a clothing retailer um and uh you know at",
    "start": "659240",
    "end": "664680"
  },
  {
    "text": "the time that I worked there uh almost all of uh Stitch fix's data lived in a monolithic shared database that um was",
    "start": "664680",
    "end": "671720"
  },
  {
    "text": "used by a lot of different application so the problem was that if that database was down or slow the entire uh site and",
    "start": "671720",
    "end": "678399"
  },
  {
    "text": "the entire company would go down so our problem here was that we wanted to decouple applications and services from",
    "start": "678399",
    "end": "684720"
  },
  {
    "text": "that shared database so let's see how how that would work um and I'm going to try to make it a little bit simpler di",
    "start": "684720",
    "end": "691160"
  },
  {
    "text": "diagrammatically uh by imagining that there are only two applications and only three tables and as a practical matter",
    "start": "691160",
    "end": "698040"
  },
  {
    "text": "there were 80 applications and services and 175 tables but that's way too many lines to have on a diagram so let's",
    "start": "698040",
    "end": "705240"
  },
  {
    "text": "imagine that there's just an application that uh where people uh choose the clothes that we're going to send to our",
    "start": "705240",
    "end": "710320"
  },
  {
    "text": "customers called styling and then there's a warehouse application where we maintain the inventory in our warehouses",
    "start": "710320",
    "end": "716000"
  },
  {
    "text": "and that they're each using these common uh common tables around clients around SKS and around items in inventory so the",
    "start": "716000",
    "end": "723200"
  },
  {
    "text": "first thing that we want to do is we want to create a service uh a a service",
    "start": "723200",
    "end": "728360"
  },
  {
    "text": "interface uh around the client uh the client object um and then um uh then",
    "start": "728360",
    "end": "735560"
  },
  {
    "text": "what we want to make sure is that instead of having those two applications use the client table in the database",
    "start": "735560",
    "end": "742600"
  },
  {
    "text": "instead they uh they access client information through the service and so when I arrived at Stitch fix we had done",
    "start": "742600",
    "end": "748519"
  },
  {
    "text": "a bunch of these things so I said hey how are we on our service migration oh great well you know we have all these",
    "start": "748519",
    "end": "754040"
  },
  {
    "text": "services and applications are using the services um and then I asked well but did we remove actually the tables from",
    "start": "754040",
    "end": "759880"
  },
  {
    "text": "the shared database oh no we didn't get there so we're nowhere near done yet and in fact if we stop at this point we're",
    "start": "759880",
    "end": "766040"
  },
  {
    "text": "worse off than if we hadn't started at all because we have all the problems of a distributed system between these",
    "start": "766040",
    "end": "771519"
  },
  {
    "text": "applications talking to services and we have all the problems of a shared database and we have none of the",
    "start": "771519",
    "end": "777160"
  },
  {
    "text": "benefits that we want to get that we just talked about from microservices so please please please if you're breaking",
    "start": "777160",
    "end": "782519"
  },
  {
    "text": "up your monolithic database don't stop at this phase keep on moving so what keep on keeping on moving means is that",
    "start": "782519",
    "end": "789160"
  },
  {
    "text": "we is that we move uh that table out from you know that shared database into",
    "start": "789160",
    "end": "794399"
  },
  {
    "text": "what I'll call a private database that's associated only with this particular service and then we'll do the same thing",
    "start": "794399",
    "end": "799839"
  },
  {
    "text": "for items we'll do the same thing for SKS um and then we'll just keep uh continuing on and keep pulling out",
    "start": "799839",
    "end": "806720"
  },
  {
    "text": "pieces of the pieces of the monolithic database into um uh into these separate",
    "start": "806720",
    "end": "811839"
  },
  {
    "text": "databases and I want to be super clear that these are the service boundaries right the service boundary is not just",
    "start": "811839",
    "end": "817399"
  },
  {
    "text": "the code that we have in the service it also includes the the data in the database uh and then again as we said",
    "start": "817399",
    "end": "824000"
  },
  {
    "text": "before there should be no way to get to the database except through the publ the publish service",
    "start": "824000",
    "end": "829560"
  },
  {
    "text": "interface so now we've talked a little bit about service architecture now I want to move on a little bit and talk",
    "start": "829560",
    "end": "834959"
  },
  {
    "start": "830000",
    "end": "968000"
  },
  {
    "text": "about event-driven communication and then again just as a telegraph uh we're going to use what we learned about",
    "start": "834959",
    "end": "840639"
  },
  {
    "text": "services and about events and combine them together to do some really interesting things in the last section so uh in terms of events um those",
    "start": "840639",
    "end": "848839"
  },
  {
    "text": "Services you uh when the state changes around an item around a user or",
    "start": "848839",
    "end": "854199"
  },
  {
    "text": "something like that uh we want to publish an event that other parts of the system can then react to and the best",
    "start": "854199",
    "end": "860560"
  },
  {
    "text": "way I have found to think about an an event in one of these systems is an event is a statement that something",
    "start": "860560",
    "end": "866560"
  },
  {
    "text": "interesting occurred so I item purchased user uh upgraded something like that uh",
    "start": "866560",
    "end": "873320"
  },
  {
    "text": "and so different you know the cons consumer uh services and consumer applications in the system are going to",
    "start": "873320",
    "end": "878440"
  },
  {
    "text": "subscribe to that event and then the critical component for me is that we we want to make sure that events are a",
    "start": "878440",
    "end": "884000"
  },
  {
    "text": "first class entity in our system and so uh for any of those Services uh so the",
    "start": "884000",
    "end": "889959"
  },
  {
    "text": "service interface doesn't just include you know the synchronous request response front door that's you know rest",
    "start": "889959",
    "end": "895560"
  },
  {
    "text": "and Json or grpc or something like that but the the but the service interface also includes all the events that that",
    "start": "895560",
    "end": "902800"
  },
  {
    "text": "service consumes and all the events that that service produces for others to consume uh and why are we doing this",
    "start": "902800",
    "end": "909399"
  },
  {
    "text": "we're doing this because we want to be able to decouple those separate domains and teams from each other that we give",
    "start": "909399",
    "end": "914480"
  },
  {
    "text": "them a well-defined interface for them to interact with one another and they can actually interact with each other asynchronously so that allows us to",
    "start": "914480",
    "end": "921519"
  },
  {
    "text": "decouple the producer services that are producing one of the events from the consumer services and so they have what",
    "start": "921519",
    "end": "928240"
  },
  {
    "text": "I'll call decoupled availability where you know the producing service can be up or down and the consuming service can",
    "start": "928240",
    "end": "934120"
  },
  {
    "text": "still work and vice versa so the producer can be producing events even if the consumer service is down and we can",
    "start": "934120",
    "end": "940319"
  },
  {
    "text": "also scale them independently which has really nice properties as you get to large scale uh and then the last thing very",
    "start": "940319",
    "end": "946360"
  },
  {
    "text": "much just like in just like in the service aspect is we want to make sure that we have a really strict interface discipline around those events so just",
    "start": "946360",
    "end": "953279"
  },
  {
    "text": "like we had a really a well specified service interface we want to have a wellp specified event schema which again",
    "start": "953279",
    "end": "959240"
  },
  {
    "text": "allows us to test uh event production and event consumption separately and also mock out the other the other part",
    "start": "959240",
    "end": "966079"
  },
  {
    "text": "of that interaction okay so now that we've got sort of the basics out of the way of",
    "start": "966079",
    "end": "971680"
  },
  {
    "start": "968000",
    "end": "1061000"
  },
  {
    "text": "services and events let's combine them together in interesting ways um so the first thing I want to talk about is uh",
    "start": "971680",
    "end": "978440"
  },
  {
    "text": "leveraging the idea that um the service at any any interesting piece of data in",
    "start": "978440",
    "end": "984560"
  },
  {
    "text": "our system whether it's about items or about users or something like that should be owned by one and only one",
    "start": "984560",
    "end": "991120"
  },
  {
    "text": "service and that service is going to be what I'll call the canonical system of record for that data so in this example",
    "start": "991120",
    "end": "996959"
  },
  {
    "text": "let's imagine we maintain customer data so we're going to have a customer service which owns uh the customer",
    "start": "996959",
    "end": "1002680"
  },
  {
    "text": "information but as you can imagine there are tons of places around a system like Stitch fix or a system like eBay where",
    "start": "1002680",
    "end": "1008519"
  },
  {
    "text": "we need to know information about customers so the way I like to think about that in large scale is uh the",
    "start": "1008519",
    "end": "1015079"
  },
  {
    "text": "customer information is owned by the customer service um but then we produce events that are",
    "start": "1015079",
    "end": "1021000"
  },
  {
    "text": "then consumed by all the other services that need customer information and those events that we have uh produced as state",
    "start": "1021000",
    "end": "1027720"
  },
  {
    "text": "changes uh produce copies of uh of the customer information in other places but",
    "start": "1027720",
    "end": "1033079"
  },
  {
    "text": "every one of those other copies is a readonly non-authoritative cache and every one of those words is important",
    "start": "1033079",
    "end": "1039240"
  },
  {
    "text": "it's readon so if I want to update customer data I should be going to the customer service rather than doing it",
    "start": "1039240",
    "end": "1044839"
  },
  {
    "text": "somewhere else and it's non-authoritative meaning that the bill system or The Styling system might be",
    "start": "1044839",
    "end": "1051240"
  },
  {
    "text": "slightly stale or out of date from uh from the information that's in the customer service and anybody who's",
    "start": "1051240",
    "end": "1056720"
  },
  {
    "text": "familiar with DNS knows this is exactly how the DNS system works globally so the other thing I want to",
    "start": "1056720",
    "end": "1062840"
  },
  {
    "text": "talk about is um producer is a producing",
    "start": "1062840",
    "end": "1067880"
  },
  {
    "text": "service making sure that it doesn't uh that it produces an that when it changes",
    "start": "1067880",
    "end": "1073360"
  },
  {
    "text": "its own state that it produces an event uh or it doesn't like it either cons it",
    "start": "1073360",
    "end": "1078480"
  },
  {
    "text": "either changes its state and produces the event or it does not change its state and does not produce the event and",
    "start": "1078480",
    "end": "1083760"
  },
  {
    "text": "there are two ways that uh I've seen do that that be done very uh very effectively at Large Scale so the first",
    "start": "1083760",
    "end": "1090000"
  },
  {
    "text": "thing is called the first way to do it is called change data capture so how that works is the producer uh system is",
    "start": "1090000",
    "end": "1096960"
  },
  {
    "text": "going to write uh its update or insert its uh you know new uh new object into",
    "start": "1096960",
    "end": "1102400"
  },
  {
    "text": "its local database that database is going to write a change to its transaction log whether it's the bin log",
    "start": "1102400",
    "end": "1107919"
  },
  {
    "text": "for SQL or uh something like that um and then uh we'll have a connector like deum",
    "start": "1107919",
    "end": "1114919"
  },
  {
    "text": "or Kafka connector something like that that's sitting there tailing that transactional log and of the database",
    "start": "1114919",
    "end": "1121080"
  },
  {
    "text": "and then sending the event and again the re the the the problem that we're trying to solve here is we want to make sure that anytime we update the database that",
    "start": "1121080",
    "end": "1127640"
  },
  {
    "text": "we guarantee that we're also going to send the event so this is one approach this change data capture this works in a",
    "start": "1127640",
    "end": "1133600"
  },
  {
    "text": "lot of situations but um often uh this can be a little bit uh low level so",
    "start": "1133600",
    "end": "1139520"
  },
  {
    "text": "another another uh common model is What's called the transactional outbox so instead the uh in this model the",
    "start": "1139520",
    "end": "1146559"
  },
  {
    "text": "producer is going to write its uh State changes in its normal you know table for",
    "start": "1146559",
    "end": "1152039"
  },
  {
    "text": "users or items or something like that and then it would also potentially write to an outbox which I'll call an event",
    "start": "1152039",
    "end": "1157840"
  },
  {
    "text": "table in that same database and that will cue up all the events that need to be",
    "start": "1157840",
    "end": "1163200"
  },
  {
    "text": "produced and then uh that service or another service would be looking in that event table to make sure that um those",
    "start": "1163200",
    "end": "1169559"
  },
  {
    "text": "events uh uh ultimately eventually get delivered and so again that would allow us to make sure that we have updated the",
    "start": "1169559",
    "end": "1176919"
  },
  {
    "text": "state in our of our you know item or user or something like that and that we guarantee at least eventually to have",
    "start": "1176919",
    "end": "1182600"
  },
  {
    "text": "produced uh the event that other people can then listen to so the next interesting combination",
    "start": "1182600",
    "end": "1189960"
  },
  {
    "start": "1188000",
    "end": "1348000"
  },
  {
    "text": "we're going to talk about is how how we can use services and events in a microservices ecosystem to deal with",
    "start": "1189960",
    "end": "1195880"
  },
  {
    "text": "shared data so when we were in that nice safe comfortable monolithic world that",
    "start": "1195880",
    "end": "1201840"
  },
  {
    "text": "monolithic database made it really easy to share to have shared data between the different parts of our system we just",
    "start": "1201840",
    "end": "1207960"
  },
  {
    "text": "simply created a new table that other other parts of the system could use and join to but where does shared data go in",
    "start": "1207960",
    "end": "1215440"
  },
  {
    "text": "the microservices world right we've broken everything up and so there's no one database for us to put the shared data in so two options here that I've",
    "start": "1215440",
    "end": "1223320"
  },
  {
    "text": "seen work effectively so the first which is pretty straightforward and simple is just simply looking at up synchronously",
    "start": "1223320",
    "end": "1228960"
  },
  {
    "text": "whenever we need the information so in this particular example let's imagine that we have a fulfillment service which",
    "start": "1228960",
    "end": "1234400"
  },
  {
    "text": "is going to send packages out through the physical mail to to people that arrive at their doorstep and that",
    "start": "1234400",
    "end": "1240360"
  },
  {
    "text": "fulfillment service is going to need to know the current address of uh Michelle or Peter let's say um and so a perfectly",
    "start": "1240360",
    "end": "1249280"
  },
  {
    "text": "legitimate approach is for the Fulfillment service to ask the customer service in real time you know what's",
    "start": "1249280",
    "end": "1254760"
  },
  {
    "text": "Michelle's address or what's Peter's address so that it can it can send there um but this might not this is a",
    "start": "1254760",
    "end": "1260919"
  },
  {
    "text": "legitimate approach but it might not have the operational characteristics we like maybe uh where it takes too long",
    "start": "1260919",
    "end": "1267840"
  },
  {
    "text": "for the customer service to respond with somebody's address so there's a latency issue or maybe there's an availability",
    "start": "1267840",
    "end": "1273640"
  },
  {
    "text": "issue because we're putting a lot of load on the customer service and it's not able to keep up with all the all the",
    "start": "1273640",
    "end": "1279039"
  },
  {
    "text": "requests from the Fulfillment service or maybe we just simply want to uh have the Fulfillment service operate when the",
    "start": "1279039",
    "end": "1285440"
  },
  {
    "text": "customer services is not available so if any of those things are true we can use a slightly more complicated uh approach",
    "start": "1285440",
    "end": "1292039"
  },
  {
    "text": "that leverages events so I'll call this option asynchronous event and a local cache so how this works is the cons the",
    "start": "1292039",
    "end": "1298919"
  },
  {
    "text": "customer service still is the canonical owner of customer data that doesn't change but uh what happens is the",
    "start": "1298919",
    "end": "1306039"
  },
  {
    "text": "customer service will send what I'll call an ad address updated event whenever you know Michelle's address",
    "start": "1306039",
    "end": "1313039"
  },
  {
    "text": "updates or is changed or Peter's address uh changes whenever somebody moves house for example",
    "start": "1313039",
    "end": "1318679"
  },
  {
    "text": "um and uh that fulfillment service is going to Cache the current customer address for those uh those people and",
    "start": "1318679",
    "end": "1325240"
  },
  {
    "text": "then uh then we can ask the Fulfillment service to send packages and the Fulfillment service always has the",
    "start": "1325240",
    "end": "1331039"
  },
  {
    "text": "updated uh updated uh um uh customer address cool so that's how we do that's",
    "start": "1331039",
    "end": "1338919"
  },
  {
    "text": "how we can leverage events to solve some of the problems that we introduce in the microservices uh ecosystem around shared",
    "start": "1338919",
    "end": "1346640"
  },
  {
    "text": "data so now let's talk a little bit of how how we can do joins so again in a",
    "start": "1346640",
    "end": "1351840"
  },
  {
    "start": "1348000",
    "end": "1554000"
  },
  {
    "text": "monolithic database it's really easy to join tables together uh so we just you know modify our SQL statements so we'll",
    "start": "1351840",
    "end": "1359080"
  },
  {
    "text": "say you know select from a injoin B on some join condition uh and then we have our join super easy um but again if you",
    "start": "1359080",
    "end": "1367200"
  },
  {
    "text": "know the one half of the join and the other half of the join are living in different services and therefore in different databases we really don't have",
    "start": "1367200",
    "end": "1373559"
  },
  {
    "text": "this option in the microservices world so splitting data between those microservices makes joins more",
    "start": "1373559",
    "end": "1379279"
  },
  {
    "text": "complicated so again we have a couple of options about how to tackle this problem so the first way to do it is again",
    "start": "1379279",
    "end": "1386440"
  },
  {
    "text": "simply you know join the two parts of it in real time so let's imagine that we uh",
    "start": "1386440",
    "end": "1392640"
  },
  {
    "text": "we want to show uh our customer an order history page so all of the all of the orders that uh she has made with us so",
    "start": "1392640",
    "end": "1400159"
  },
  {
    "text": "we're going to we're going to need to go over to the customer service and get some information about about her and",
    "start": "1400159",
    "end": "1405720"
  },
  {
    "text": "then we're going to need to go over to the order service and using her customer id id we're going to need to find all",
    "start": "1405720",
    "end": "1411080"
  },
  {
    "text": "the orders that you know she's made with us in the last you know while um so uh",
    "start": "1411080",
    "end": "1416880"
  },
  {
    "text": "again super simple this uh so we're going to get get the customer from one side query the matching orders on the",
    "start": "1416880",
    "end": "1422520"
  },
  {
    "text": "other side join it in real time in in the client application and by the way this is basically every web page on the",
    "start": "1422520",
    "end": "1428600"
  },
  {
    "text": "planet right so this is every web page where you have more than one request that fills fills in details on the",
    "start": "1428600",
    "end": "1435000"
  },
  {
    "text": "page so uh but again uh maybe uh it's it's too uh maybe operationally it's",
    "start": "1435000",
    "end": "1442039"
  },
  {
    "text": "takes too long to join these things in real time maybe it would put too much pressure on the customer service or on",
    "start": "1442039",
    "end": "1448720"
  },
  {
    "text": "the order service to do this all the time so again maybe there are operational reasons why we don't want to do this in real time so now we have uh",
    "start": "1448720",
    "end": "1456440"
  },
  {
    "text": "the second option which is a service that's going to be what I'll call materializes the view so uh in this",
    "start": "1456440",
    "end": "1463120"
  },
  {
    "text": "example I'm giving a slightly different example where um let's imagine uh in the Stitch fix case where we have a bunch of",
    "start": "1463120",
    "end": "1470120"
  },
  {
    "text": "items in our inventory and we want to uh hear about people's feedback when we",
    "start": "1470120",
    "end": "1475559"
  },
  {
    "text": "send them that particular item we want to remember whether you know they like them they liked it or not uh but the way",
    "start": "1475559",
    "end": "1481320"
  },
  {
    "text": "that we currently get feedback is you know we send them a box and with five items in it and so we we get those kind",
    "start": "1481320",
    "end": "1487760"
  },
  {
    "text": "of things in bulk so what we ultimately want to do here is we want to join together the items with the feedback",
    "start": "1487760",
    "end": "1494000"
  },
  {
    "text": "that we got uh at order level so the way that we can do that is we have uh we're",
    "start": "1494000",
    "end": "1499440"
  },
  {
    "text": "listening to events that come from the item service we're listening to another set of events that come from the order",
    "start": "1499440",
    "end": "1504960"
  },
  {
    "text": "service and we're maintaining a denormalized join of items and orders together in local storage that's",
    "start": "1504960",
    "end": "1511480"
  },
  {
    "text": "associated with this new item feedback service that represents the join uh and so we've basically materialized The View",
    "start": "1511480",
    "end": "1517960"
  },
  {
    "text": "here and so now we can uh we can make queries to the item feedback Service uh directly and we don't we're not joining",
    "start": "1517960",
    "end": "1523880"
  },
  {
    "text": "it in real time uh December 20 20 asterisk here uh in AWS reinvent last",
    "start": "1523880",
    "end": "1531480"
  },
  {
    "text": "week they introduced some new interesting service that does this which I think is called AWS glue elastic views",
    "start": "1531480",
    "end": "1538600"
  },
  {
    "text": "or something like that so you know maybe you actually don't even have to write a service uh uh but but the concept is the",
    "start": "1538600",
    "end": "1544360"
  },
  {
    "text": "same where you're um you're getting updates from one side of the join you're getting updates from the other side of",
    "start": "1544360",
    "end": "1549720"
  },
  {
    "text": "the join and essentially materializing The View and using that so if that",
    "start": "1549720",
    "end": "1555360"
  },
  {
    "start": "1554000",
    "end": "1619000"
  },
  {
    "text": "sounds weird and hard um I want to kind of disabuse you of that notion because there are tons of common systems that we",
    "start": "1555360",
    "end": "1561520"
  },
  {
    "text": "use every day that materialize joins in this way so I mean I'm using the term materialized view very intentionally",
    "start": "1561520",
    "end": "1568279"
  },
  {
    "text": "because lots of Enterprise database systems by which I mean the ones that you pay for uh have this concept of",
    "start": "1568279",
    "end": "1574720"
  },
  {
    "text": "materialized view um most nosql systems actually are asking you to do joins so",
    "start": "1574720",
    "end": "1580440"
  },
  {
    "text": "if you use Cassandra or react or Voldemort or you know one of the nosql systems typically those systems are",
    "start": "1580440",
    "end": "1587799"
  },
  {
    "text": "asking you to materialize views ahead of time to make things a little bit more",
    "start": "1587799",
    "end": "1592919"
  },
  {
    "text": "painful on the right side but make things a lot easier to do on the read side uh any search engine on the planet",
    "start": "1592919",
    "end": "1599200"
  },
  {
    "text": "is is essentially a materialized view of lots of different uh uh lots of",
    "start": "1599200",
    "end": "1604440"
  },
  {
    "text": "different things all joined together uh and then again any analytic system on the planet is uh is a join of lots of",
    "start": "1604440",
    "end": "1610840"
  },
  {
    "text": "data from lots of different places so even if you don't think that you're doing the technique that I just talked about you probably are somewhere in your",
    "start": "1610840",
    "end": "1616559"
  },
  {
    "text": "INF in uh some in your company okay so the last interesting uh thing I want to",
    "start": "1616559",
    "end": "1623120"
  },
  {
    "start": "1619000",
    "end": "1713000"
  },
  {
    "text": "solve here with uh services and events is transactions so in a monolithic",
    "start": "1623120",
    "end": "1628600"
  },
  {
    "text": "database it makes transactions across multiple entities really easy so let you",
    "start": "1628600",
    "end": "1633720"
  },
  {
    "text": "know we could construct this uh this transaction where we begin it we do some inserts into table a we do some updates",
    "start": "1633720",
    "end": "1640720"
  },
  {
    "text": "to table B and then we either commit or roll back and that happens in this nice beautiful acid way so it either all",
    "start": "1640720",
    "end": "1647679"
  },
  {
    "text": "happens altogether or it doesn't happen at all uh but once we've split you know a",
    "start": "1647679",
    "end": "1654159"
  },
  {
    "text": "into one service and B into another service and they're in different databases doing transactions like this",
    "start": "1654159",
    "end": "1659640"
  },
  {
    "text": "is is really challenging and so you might think that the strategy would be well you know I've heard of these things",
    "start": "1659640",
    "end": "1665039"
  },
  {
    "text": "called distributed transactions maybe we should do that um so Pat Helen who one of my favorite you know great thinkers",
    "start": "1665039",
    "end": "1672080"
  },
  {
    "text": "and thought leaders in our industry wrote this wonderful paper in 2007 called life after distribut Ed",
    "start": "1672080",
    "end": "1677840"
  },
  {
    "text": "transactions and apostates opinion and the reason why he's an apostate that's like a heretic is he spent most of his",
    "start": "1677840",
    "end": "1684919"
  },
  {
    "text": "career 20 years or so building distributed transactions and transactional systems in SQL in SQL",
    "start": "1684919",
    "end": "1690880"
  },
  {
    "text": "server and uh and Tandem and so on anyway so what he says is you know what he learned over time trying to do this",
    "start": "1690880",
    "end": "1696200"
  },
  {
    "text": "at Large Scale is in General application developers do not Implement large scale applications with distributed",
    "start": "1696200",
    "end": "1702240"
  },
  {
    "text": "transactions and uh Pat being very clever said that even more uh even more concisely he says grown-ups don't use",
    "start": "1702240",
    "end": "1708799"
  },
  {
    "text": "distributed transactions uh all right well what do grown-ups do um they do it",
    "start": "1708799",
    "end": "1714080"
  },
  {
    "start": "1713000",
    "end": "2007000"
  },
  {
    "text": "this way so instead of thinking about it as a trans as an asset transaction think",
    "start": "1714080",
    "end": "1719200"
  },
  {
    "text": "about modeling that thing that we wanted to do Allin one go as a workflow or something that we'll call a saga so",
    "start": "1719200",
    "end": "1725880"
  },
  {
    "text": "let's take that transaction and think about it as a state machine of individual Atomic events um so let's",
    "start": "1725880",
    "end": "1733240"
  },
  {
    "text": "reimplement this thing like I say as a workflow so let's imagine that we up update uh uh we change or update uh a a",
    "start": "1733240",
    "end": "1741919"
  },
  {
    "text": "you know service a that's going to produce an event which is then consumed by service B it's going to do some",
    "start": "1741919",
    "end": "1747519"
  },
  {
    "text": "updates locally produce one or more events that are then consumed by C and so you have this chain of you know where",
    "start": "1747519",
    "end": "1754120"
  },
  {
    "text": "you wanted to originally like update A and B and C Al together you do it uh more as a workflow and so uh you might",
    "start": "1754120",
    "end": "1762279"
  },
  {
    "text": "be looking at this and saying yeah but what what if something goes wrong that uh how do we deal with that so we do",
    "start": "1762279",
    "end": "1767919"
  },
  {
    "text": "that we deal with that through compensating operations in Reverse so we do the equivalent of a roll back uh by",
    "start": "1767919",
    "end": "1775120"
  },
  {
    "text": "uh uh by uh undoing our operations in the reverse order so maybe we get to see",
    "start": "1775120",
    "end": "1780559"
  },
  {
    "text": "and we realize that we want to you know not continue this workflow we want to we want to make it go back to the beginning",
    "start": "1780559",
    "end": "1786880"
  },
  {
    "text": "so we would in Reverse you know produce some events B would undo its stuff we might produce some more events and a",
    "start": "1786880",
    "end": "1792919"
  },
  {
    "text": "would under Undo It stuff so again this uh this might sound a little bit complicated in a little bit over much",
    "start": "1792919",
    "end": "1798519"
  },
  {
    "text": "but I'm going to disabuse you of that notion that this is actually a very natural fit for lots of problems that we deal with every day so there are tons of",
    "start": "1798519",
    "end": "1806080"
  },
  {
    "text": "Real World Systems where the straightforward modeling of the domain is exactly a workflow so let's take the",
    "start": "1806080",
    "end": "1813000"
  },
  {
    "text": "example of payment processing so let's imagine that I wanted to pay Peter uh hundred Australian dollars and so what",
    "start": "1813000",
    "end": "1820840"
  },
  {
    "text": "would one would like to have happen is I agree to pay him that and it is immediately and atomically uh extracted",
    "start": "1820840",
    "end": "1827320"
  },
  {
    "text": "from my account and shows up in his account as everybody probably knows that is not how it works any place on the",
    "start": "1827320",
    "end": "1833120"
  },
  {
    "text": "planet instead there's a whole bunch of complicated uh uh uh events that go back",
    "start": "1833120",
    "end": "1839039"
  },
  {
    "text": "and forth between my bank and his bank and you know if you live in the backward us it takes three days for that to",
    "start": "1839039",
    "end": "1844600"
  },
  {
    "text": "happen so you know that's not good um but you can but the payment processing itself is an actual is an actual",
    "start": "1844600",
    "end": "1850600"
  },
  {
    "text": "workflow expense approval so if I had if I I would love to be visiting you uh",
    "start": "1850600",
    "end": "1856880"
  },
  {
    "text": "physically instead of virtually and if I had done that I'd probably accumulate some expenses because I'd you know be",
    "start": "1856880",
    "end": "1862600"
  },
  {
    "text": "having some wonderful food in Australia um and so I would you know when I got back to got back to California I would",
    "start": "1862600",
    "end": "1868960"
  },
  {
    "text": "try to get those expenses approved and get reimbursed for them and again there's a workflow there right so you know I submit my expenses it goes up my",
    "start": "1868960",
    "end": "1876320"
  },
  {
    "text": "management chain you know my boss approves it and then her boss approves it Etc or doesn't um and then it come",
    "start": "1876320",
    "end": "1882720"
  },
  {
    "text": "back comes back down but again it doesn't happen automically uh in a transactional way",
    "start": "1882720",
    "end": "1888440"
  },
  {
    "text": "the other uh maybe the most uh like striking example of where things are a",
    "start": "1888440",
    "end": "1894320"
  },
  {
    "text": "workflow is the actual software development process itself the stuff that most of us are actually doing",
    "start": "1894320",
    "end": "1899399"
  },
  {
    "text": "day-to-day in our jobs so if we were all physically together in a room I would ask everybody to raise their hand if",
    "start": "1899399",
    "end": "1906559"
  },
  {
    "text": "whenever you were finished building something in your IDE when you hit return in your IDE that it went that it",
    "start": "1906559",
    "end": "1913240"
  },
  {
    "text": "immediately and atomically was deployed to production and if we were all together nobody would raise uh her hand",
    "start": "1913240",
    "end": "1920159"
  },
  {
    "text": "because literally no software development works that way um so instead as we well know we build uh we uh run a",
    "start": "1920159",
    "end": "1928679"
  },
  {
    "text": "bunch of code hopefully we're you know writing uh uh running writing and running tests locally um we're uh We've",
    "start": "1928679",
    "end": "1935399"
  },
  {
    "text": "accumulated a bunch of changes we commit those changes they get code reviewed by one of our colleagues they get uh they",
    "start": "1935399",
    "end": "1942200"
  },
  {
    "text": "get merged they enter a pipeline where they get tested further that they get",
    "start": "1942200",
    "end": "1947279"
  },
  {
    "text": "deployed to production Etc but there's this whole you know again workflow or series of events that happens that",
    "start": "1947279",
    "end": "1953639"
  },
  {
    "text": "starts on my laptop and ends up uh somewhere else so uh whenever I talk to",
    "start": "1953639",
    "end": "1960080"
  },
  {
    "text": "developers that are kind of new to these ideas and they say well you know Randy I can't possibly like visualize in my head",
    "start": "1960080",
    "end": "1966639"
  },
  {
    "text": "this idea of well you know this eventual consistency idea where one part of the system has you know one view of the",
    "start": "1966639",
    "end": "1972679"
  },
  {
    "text": "world and another part of the system has another view of the world and I asked them to think about what they do every",
    "start": "1972679",
    "end": "1978159"
  },
  {
    "text": "day right because of course the not the natural state of events is that if",
    "start": "1978159",
    "end": "1983440"
  },
  {
    "text": "there's version 10 on of uh of our code you know running in our service on the",
    "start": "1983440",
    "end": "1988679"
  },
  {
    "text": "site I am working on version 11 or version 12 or something like that locally and so that's not something that",
    "start": "1988679",
    "end": "1993760"
  },
  {
    "text": "we have any difficult uh any difficulty dealing with so um you know sometimes we",
    "start": "1993760",
    "end": "1998960"
  },
  {
    "text": "need to expand our brain a little bit cool so many Real World Systems use workflows and sagas to solve uh to solve",
    "start": "1998960",
    "end": "2005639"
  },
  {
    "text": "these problems um but what you'll also notice about these systems which is different from you know that asset",
    "start": "2005639",
    "end": "2012000"
  },
  {
    "start": "2007000",
    "end": "2107000"
  },
  {
    "text": "transaction situation is that we're able to able to observe intermediate States",
    "start": "2012000",
    "end": "2017279"
  },
  {
    "text": "so you can observe the fact that I have attempted to pay Peter 100 Australian",
    "start": "2017279",
    "end": "2023399"
  },
  {
    "text": "dollars but they have not actually you know but they've not actually gotten to Peter so there's this intermediate State",
    "start": "2023399",
    "end": "2028480"
  },
  {
    "text": "there where that payment is pending um so one the uh the huge um uh problem is",
    "start": "2028480",
    "end": "2038799"
  },
  {
    "text": "if we try to hide that intermediate state so I strongly recommend that part of that well-defined interface that",
    "start": "2038799",
    "end": "2044200"
  },
  {
    "text": "we're going to create for our service is that we Embrace these intermediate States we model them explicitly and we",
    "start": "2044200",
    "end": "2049919"
  },
  {
    "text": "expose them uh in our interface because it's part of the domain it's part of our model so in the in the payment example",
    "start": "2049919",
    "end": "2057118"
  },
  {
    "text": "we're going to model a payment could be started a payment might be pending and then ultimately the payment is complete",
    "start": "2057119",
    "end": "2064000"
  },
  {
    "text": "um and then for expenses again as I mentioned you know again it's a set of intermediate States so we're going to",
    "start": "2064000",
    "end": "2069158"
  },
  {
    "text": "model an expense could be is submitted an expense is approved or rejected an",
    "start": "2069159",
    "end": "2074599"
  },
  {
    "text": "expense is ultimately paid which by the way will then kick off one of those payment workflows that we just talked",
    "start": "2074599",
    "end": "2079638"
  },
  {
    "text": "about uh for that uh um for the uh software development process example",
    "start": "2079639",
    "end": "2085320"
  },
  {
    "text": "again a feature uh or a commit might be being developed it might be reviewed it",
    "start": "2085320",
    "end": "2091440"
  },
  {
    "text": "might be deployed it might be released if we're using something like feature Flags you know we deploy it separately",
    "start": "2091440",
    "end": "2097079"
  },
  {
    "text": "from releasing it so again this idea of uh modeling and embracing the intermediate States in our interface is",
    "start": "2097079",
    "end": "2103240"
  },
  {
    "text": "a is a really good really good practice cool uh so I had mentioned in",
    "start": "2103240",
    "end": "2108599"
  },
  {
    "start": "2107000",
    "end": "2158000"
  },
  {
    "text": "the in the abstract that I wanted to talk about how server lless fits in here so if you think about how um the",
    "start": "2108599",
    "end": "2115079"
  },
  {
    "text": "transactional workflows or these sagas that we're talking about they are simple event-driven processing they have very",
    "start": "2115079",
    "end": "2122040"
  },
  {
    "text": "lightweight logic they are stateless and they're triggered by an event so this is",
    "start": "2122040",
    "end": "2127599"
  },
  {
    "text": "almost the the the uh the definition of a great application for something like",
    "start": "2127599",
    "end": "2133320"
  },
  {
    "text": "Lambda or Google Cloud functions or Azure functions um because as one of these you know stages in the workflow",
    "start": "2133320",
    "end": "2139960"
  },
  {
    "text": "they're very simple and they're very easily modeled by by something in servus so this is a great a great opportunity",
    "start": "2139960",
    "end": "2145200"
  },
  {
    "text": "if people are still you know in 2020 trying to figure out maybe what serus is good for like I think it's good for a",
    "start": "2145200",
    "end": "2150720"
  },
  {
    "text": "lot of things but this is one thing that it's very obviously uh a great match for okay",
    "start": "2150720",
    "end": "2157400"
  },
  {
    "text": "so uh uh we did a quick Whirlwind tour we talked about uh the architecture",
    "start": "2157400",
    "end": "2163119"
  },
  {
    "start": "2158000",
    "end": "2205000"
  },
  {
    "text": "Evolution over time we started with the the uh the starting phase we talked about the scaling phase we talked about",
    "start": "2163119",
    "end": "2169720"
  },
  {
    "text": "the optimizing phase uh we talked about some uh best practices around service architecture uh we talked about uh how",
    "start": "2169720",
    "end": "2176680"
  },
  {
    "text": "to do event driven communication and then we spent a bunch of time using these two architectural tools that we",
    "start": "2176680",
    "end": "2182920"
  },
  {
    "text": "now have have in our toolbox the tools of services and events combining them together to do some really interesting",
    "start": "2182920",
    "end": "2188839"
  },
  {
    "text": "things so uh thank you very much this was a lot of fun for me um and I think",
    "start": "2188839",
    "end": "2194119"
  },
  {
    "text": "we can uh do some",
    "start": "2194119",
    "end": "2197119"
  },
  {
    "text": "questions",
    "start": "2204960",
    "end": "2207960"
  }
]