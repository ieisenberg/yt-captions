[
  {
    "text": "so I plan on talking about functions in reactive programming today but never",
    "start": "2280",
    "end": "7799"
  },
  {
    "text": "using the word monad so uh the intent will be to uh stick to uh the practice",
    "start": "7799",
    "end": "15839"
  },
  {
    "text": "of functional functionally styled programming and reactive programming or",
    "start": "15839",
    "end": "21080"
  },
  {
    "text": "asynchronous and so basically by the end of this I want you to be able to understand the approach that we've taken",
    "start": "21080",
    "end": "27160"
  },
  {
    "text": "to compose functions in a reactive manner Manner and uh what this means is",
    "start": "27160",
    "end": "33120"
  },
  {
    "text": "that you can take a a flow of data transform it from one to another as it's asynchronously flowing through a system",
    "start": "33120",
    "end": "39960"
  },
  {
    "text": "but more interestingly that you can start to combine that together and uh again do that all in a reactive Manner",
    "start": "39960",
    "end": "46360"
  },
  {
    "text": "and uh there's a whole lot of debate as to what we should be calling this um we",
    "start": "46360",
    "end": "51800"
  },
  {
    "text": "started using functional reactive to name it before any of us really had any clue about the Academia behind it uh and",
    "start": "51800",
    "end": "58480"
  },
  {
    "text": "I'm fully aware of RP and Connell Elliot and Fran and those things um if anyone can give me a better name for what we're",
    "start": "58480",
    "end": "64960"
  },
  {
    "text": "doing here today I'd love to hear it um but uh the functional aspects of it are",
    "start": "64960",
    "end": "70600"
  },
  {
    "text": "you're going to see a lot of uh lamb disclosures the functions are going to be mostly pure the only part where uh",
    "start": "70600",
    "end": "76799"
  },
  {
    "text": "they are not pure is typically at the very end uh very similar to the iio monad in hcll and you're going to see",
    "start": "76799",
    "end": "83720"
  },
  {
    "text": "them as composable and the reactive side what that's referring to is that it's all async that uh you've got values and",
    "start": "83720",
    "end": "90799"
  },
  {
    "text": "events that are being pushed through the system and you're you're reacting to it as they flow through uh when we started",
    "start": "90799",
    "end": "96479"
  },
  {
    "text": "working on this we wanted to Target a polyglot environment and we targeted the jvm uh as a whole not any one particular",
    "start": "96479",
    "end": "104240"
  },
  {
    "text": "language at Netflix it's primarily still the Java language uh with quite a bit of",
    "start": "104240",
    "end": "111040"
  },
  {
    "text": "groovy and um a fair amount of Scala there are bits and pieces of closure",
    "start": "111040",
    "end": "116600"
  },
  {
    "text": "showing up um and uh we're looking forward to what Java 8 will bring as",
    "start": "116600",
    "end": "122680"
  },
  {
    "text": "well it's going to significantly change how that language is used particularly as we've adopted functional principles",
    "start": "122680",
    "end": "128319"
  },
  {
    "text": "most of the examples I'm going to give today are shown in groovy with a few in Java 8 um but there are plenty of",
    "start": "128319",
    "end": "134040"
  },
  {
    "text": "examples of these elsewhere um and the scalla side has really in the last six",
    "start": "134040",
    "end": "139959"
  },
  {
    "text": "weeks has has dramatically improved as the type Safe Community has gotten",
    "start": "139959",
    "end": "145800"
  },
  {
    "text": "involved in working on the scalla adapters to make them very idiomatic uh for Scala",
    "start": "145800",
    "end": "151519"
  },
  {
    "text": "itself so what is rx Java the it is a library that we implemented as a port",
    "start": "151519",
    "end": "159720"
  },
  {
    "text": "not a a direct Port but uh we're trying to be quite faithful to the rx.net",
    "start": "159720",
    "end": "165319"
  },
  {
    "text": "version of RX uh that was built at Microsoft and uh there's also a",
    "start": "165319",
    "end": "171560"
  },
  {
    "text": "JavaScript implementation rxjs and so you're you're starting to see the RX and",
    "start": "171560",
    "end": "176640"
  },
  {
    "text": "then language name show up in various languages PHP is getting one there's one for Coco um they didn't stick to the",
    "start": "176640",
    "end": "183519"
  },
  {
    "text": "convention though they called their's reactive Coco um and what it is is it's",
    "start": "183519",
    "end": "188680"
  },
  {
    "text": "basically the principles of an asynchronous observable with a lot of high order functions on top of it and so",
    "start": "188680",
    "end": "195080"
  },
  {
    "text": "I'm going to start to go through that but before we get there I want to give you context as to why Netflix ended up",
    "start": "195080",
    "end": "200400"
  },
  {
    "text": "down going down this path so Netflix is a TV a movie uh company and we are",
    "start": "200400",
    "end": "206200"
  },
  {
    "text": "currently in uh 50 plus countries and territories with over 37 million customers in North America we have a",
    "start": "206200",
    "end": "214200"
  },
  {
    "text": "pretty big impact on the last mile Downstream internet consumption and over a billion hours of video are consumed",
    "start": "214200",
    "end": "221599"
  },
  {
    "text": "every month the API growth and this is the team I work on has looked like that over the last few",
    "start": "221599",
    "end": "227879"
  },
  {
    "text": "years and the API is you can think of it as just it like any other API it's the",
    "start": "227879",
    "end": "234319"
  },
  {
    "text": "facade on top of the service oriented architecture internally to Netflix which is um lots of machines and that facade",
    "start": "234319",
    "end": "243760"
  },
  {
    "text": "is basically there to provide access to all the functionality to the thousand plus different devices that can access",
    "start": "243760",
    "end": "249439"
  },
  {
    "text": "us and RX was discovered when we uh as we",
    "start": "249439",
    "end": "255040"
  },
  {
    "text": "were going up that growth curve and as the number of devices accessing us increased we started to run into the",
    "start": "255040",
    "end": "260759"
  },
  {
    "text": "limits of what our restful API was doing we had a typical restful API it was as",
    "start": "260759",
    "end": "267600"
  },
  {
    "text": "typical as you can expect of a Java stack it was using restlet and the annotations and all imperative and it",
    "start": "267600",
    "end": "274639"
  },
  {
    "text": "was very fine grained API calls and the devices each interacted with them uh but",
    "start": "274639",
    "end": "281680"
  },
  {
    "text": "what this meant is that it was optimized for nobody it was generic and you had",
    "start": "281680",
    "end": "288000"
  },
  {
    "text": "devices that would have to make 12 Network calls to render one user experience and the insanity of arguments",
    "start": "288000",
    "end": "295600"
  },
  {
    "text": "that we were starting to pass into these web service calls to try and customize",
    "start": "295600",
    "end": "300720"
  },
  {
    "text": "the data that was being delivered for different user experiences was just getting out of hand and so we wanted to",
    "start": "300720",
    "end": "306120"
  },
  {
    "text": "be able to take this kind of experience and reduce it down to a single Network call for a single user experience and",
    "start": "306120",
    "end": "311800"
  },
  {
    "text": "push all of the the the network calls from the wan to the landan inside our",
    "start": "311800",
    "end": "317000"
  },
  {
    "text": "data center which happens to be all in uh Amazon AWS services and leverage the",
    "start": "317000",
    "end": "322520"
  },
  {
    "text": "low latency of the network communication of that layer reduce all the replication",
    "start": "322520",
    "end": "327680"
  },
  {
    "text": "of effort on every Network call authenticating the user fetching metadata those things and be able to",
    "start": "327680",
    "end": "332960"
  },
  {
    "text": "Leverage The far better concurrency characteristics of servers over the small devices that um we we support an",
    "start": "332960",
    "end": "340600"
  },
  {
    "text": "iPhone or an iPad or something like that is an incredibly powerful device compared with the broad uh scope of the",
    "start": "340600",
    "end": "347000"
  },
  {
    "text": "devices that we target uh $40 silicon sitting on a set toop box is a far",
    "start": "347000",
    "end": "352319"
  },
  {
    "text": "different experience than a laptop or uh a modern uh phone so this nested conditional uh",
    "start": "352319",
    "end": "361680"
  },
  {
    "text": "logic all had to be done concurrently parallel execution otherwise we were going to take a step backwards from",
    "start": "361680",
    "end": "367360"
  },
  {
    "text": "where we were before where at least we had the implicit concurrency that was happening through all the multiple",
    "start": "367360",
    "end": "372560"
  },
  {
    "text": "Network calls most of the htb clients from devices could at least you know sustain like four Network calls in",
    "start": "372560",
    "end": "378720"
  },
  {
    "text": "parallel and we needed at least to be that good but we wanted also to allow",
    "start": "378720",
    "end": "384120"
  },
  {
    "text": "anybody to create these endpoints not just the API team because if it was just that one team we would be a bottleneck",
    "start": "384120",
    "end": "390080"
  },
  {
    "text": "for creating these customized endpoints so we wanted to allow each of the different device teams to build their own web services we wanted to be poly",
    "start": "390080",
    "end": "397680"
  },
  {
    "text": "lot to support the different languages that teams might want to use and we wanted to solve the concurrency problem",
    "start": "397680",
    "end": "404720"
  },
  {
    "text": "without everyone having to read this book over and over again I love this book it's a great book I I have read it",
    "start": "404720",
    "end": "411560"
  },
  {
    "text": "multiple times but the point was that we didn't want that to be the prerequisite for people being able to successfully",
    "start": "411560",
    "end": "417919"
  },
  {
    "text": "build highly concurrent systems uh at Netflix and so what this meant for us is",
    "start": "417919",
    "end": "423400"
  },
  {
    "text": "that the owner of the API had to retain control of the concurrency Behavior whoever was exposing that facade we had",
    "start": "423400",
    "end": "429440"
  },
  {
    "text": "to be able to maintain control of was this making blocking or non-blocking network calls was it fetching something",
    "start": "429440",
    "end": "435080"
  },
  {
    "text": "from memory and synchronously fire hosing it with you know microsc lookup",
    "start": "435080",
    "end": "440120"
  },
  {
    "text": "or was this something that was going to take tens or hundreds of milliseconds so we're going to have it in a thread or a non-blocking IO event we had to retain",
    "start": "440120",
    "end": "446919"
  },
  {
    "text": "control of those things and what this meant for us is that our API if we had a",
    "start": "446919",
    "end": "452840"
  },
  {
    "text": "method signature like that all of a sudden this was baking into the contract of our service layer a",
    "start": "452840",
    "end": "459759"
  },
  {
    "text": "lot of decisions that impeded our ability to make change and also for the clients consuming the data so what if at",
    "start": "459759",
    "end": "468360"
  },
  {
    "text": "one point that was either a very fast Network call that we pretended to trust",
    "start": "468360",
    "end": "473560"
  },
  {
    "text": "or it was something we were fetching in memory and that had to change all of a sudden we have no choice but to break",
    "start": "473560",
    "end": "479039"
  },
  {
    "text": "the signal to make that return something asynchronously also if the client",
    "start": "479039",
    "end": "484240"
  },
  {
    "text": "actually wants to be able to kick off two of these things concurrently because they know that they should be what are",
    "start": "484240",
    "end": "489639"
  },
  {
    "text": "we going to make them do do we really want them making decisions like spawning uh threads and the answer to that was",
    "start": "489639",
    "end": "495479"
  },
  {
    "text": "very much no and so very quickly we went down the path of taking a look at well obviously",
    "start": "495479",
    "end": "501919"
  },
  {
    "text": "we could start to put callbacks in we could return things as Futures and if we have list of things do we have a future",
    "start": "501919",
    "end": "507639"
  },
  {
    "text": "with a list of Futures and it starts to get messy but this is where",
    "start": "507639",
    "end": "513039"
  },
  {
    "text": "we were starting to to be and uh luckily we have a very diverse U mixture of",
    "start": "513039",
    "end": "519959"
  },
  {
    "text": "Engineers and programming languages and backgrounds in Netflix and so there was there were folks there that as I",
    "start": "519959",
    "end": "526080"
  },
  {
    "text": "interacted with them I was able to be uh taught about the the concepts of RX that",
    "start": "526080",
    "end": "532200"
  },
  {
    "text": "Eric Meyer had invented at Microsoft through an engineer that had been at Microsoft and come over to Netflix and",
    "start": "532200",
    "end": "538240"
  },
  {
    "text": "took him a while to get through my thick Java skull and get me to think like this and also 15 years of imperative",
    "start": "538240",
    "end": "544880"
  },
  {
    "text": "programming um I was not yet thinking that that inversion of thinking",
    "start": "544880",
    "end": "549920"
  },
  {
    "text": "to move into the functional World it took me a little bit of time um but over",
    "start": "549920",
    "end": "555480"
  },
  {
    "text": "the the month or two in during that uh Discovery stage the the concepts of RX um start to",
    "start": "555480",
    "end": "563720"
  },
  {
    "text": "become clear as a very pure theory around how to do asynchronous programming and it ends up being a very",
    "start": "563720",
    "end": "572320"
  },
  {
    "text": "simple enhancement to the gang of four Observer pattern to Move It from an",
    "start": "572320",
    "end": "577839"
  },
  {
    "text": "imperative synchronous world into a declarative asynchronous world and so it",
    "start": "577839",
    "end": "583360"
  },
  {
    "text": "ends up being a duel of iterable so if you ever hear Eric Meer talk about it he'll talk about The Duality and and he",
    "start": "583360",
    "end": "588760"
  },
  {
    "text": "can walk you through all the category Theory and math behind this um I will",
    "start": "588760",
    "end": "594440"
  },
  {
    "text": "skip over all of that because I honestly don't even understand it all yet but everywhere that you would have",
    "start": "594440",
    "end": "600800"
  },
  {
    "text": "an iterable that is push uh uh where you pull data from it you can now have an observable and push data down and you",
    "start": "600800",
    "end": "607440"
  },
  {
    "text": "can work with it in the same way the two additions to it now are so next on an",
    "start": "607440",
    "end": "613839"
  },
  {
    "text": "interal is on next with an observable and then because it's all async you now need two new things to tell it the",
    "start": "613839",
    "end": "620160"
  },
  {
    "text": "terminal state so the terminal state is either going to be on completed successfully and so that's telling you",
    "start": "620160",
    "end": "625480"
  },
  {
    "text": "don't expect to receive any new events being emitted or an on error event which is the terminal state says you're not",
    "start": "625480",
    "end": "631640"
  },
  {
    "text": "going to receive any new events but we ended with this exception it's actually a",
    "start": "631640",
    "end": "636880"
  },
  {
    "text": "throwable and so if you look at an iterable with higher order functions",
    "start": "636880",
    "end": "642360"
  },
  {
    "text": "applied to it such as um basically all of the jvm languages that have been",
    "start": "642360",
    "end": "647920"
  },
  {
    "text": "built in the last few years have and then recently with Java 8 uh stream interface you can build up uh higher",
    "start": "647920",
    "end": "655000"
  },
  {
    "text": "order functions on top of an iterable so that as you are you uh declaratively can",
    "start": "655000",
    "end": "661480"
  },
  {
    "text": "tell it how to process the data well you can do the exact same thing with the",
    "start": "661480",
    "end": "666800"
  },
  {
    "text": "observable except it's now all asynchronous and so it's all non-blocking and the only difference",
    "start": "666800",
    "end": "672519"
  },
  {
    "text": "between them is that instead of a for each at the end which by definition is a blocking uh event you subscribe to it",
    "start": "672519",
    "end": "679639"
  },
  {
    "text": "you can also do a forre on an observable if you want to break out into blocking um but this Duality between them started",
    "start": "679639",
    "end": "687279"
  },
  {
    "text": "to lead us towards this this decision as to what abstraction do we want to use over our data in our service layer and",
    "start": "687279",
    "end": "693839"
  },
  {
    "text": "so we have uh this quadrant of different choices of how to deal with our data so the first and simplest one that",
    "start": "693839",
    "end": "701440"
  },
  {
    "text": "we have all been using since the first time we touched Aline of code is synchronous uh scalar values and you",
    "start": "701440",
    "end": "708000"
  },
  {
    "text": "fetch it and when you're doing some conditional Logic on it you get that value uh and you perform the logic on it",
    "start": "708000",
    "end": "715000"
  },
  {
    "text": "imperatively and synchronously when you have multiple values you do similar similarly except you iterate over uh an iterator iterable",
    "start": "715000",
    "end": "723360"
  },
  {
    "text": "in a loop and then you conditionally do your logic within it and I'm showing the conditional piece because it's important",
    "start": "723360",
    "end": "728720"
  },
  {
    "text": "in the next steps we move into wanting to behave",
    "start": "728720",
    "end": "733839"
  },
  {
    "text": "asynchronously and futures or promises uh they they've existed for",
    "start": "733839",
    "end": "739959"
  },
  {
    "text": "quite a long time and in Java we've got the Futures and at first glance they seem like they're a pretty good solution",
    "start": "739959",
    "end": "746360"
  },
  {
    "text": "but they they're flawed in lots of fun ways once you start trying to do nested",
    "start": "746360",
    "end": "751760"
  },
  {
    "text": "conditional Logic the first thing any Java developer does with future is they block on it um they get",
    "start": "751760",
    "end": "759800"
  },
  {
    "text": "the future back and then as soon as they want to do something with it they they dreference the value within it and then the system blocks and this is actually",
    "start": "759800",
    "end": "768040"
  },
  {
    "text": "hard to avoid if you're doing any sort of nested conditional logic it's okay in",
    "start": "768040",
    "end": "773440"
  },
  {
    "text": "the same way that call backs are quite simple if you only have one level if you don't need to dreference it until the final output but if you need to make do",
    "start": "773440",
    "end": "781440"
  },
  {
    "text": "nested logic at some point you need to immediately block on it and to not block you end up wrapping threads around",
    "start": "781440",
    "end": "787639"
  },
  {
    "text": "threads and it becomes really sad really fast there are better Solutions though",
    "start": "787639",
    "end": "793680"
  },
  {
    "text": "uh the guava Library gives us um Futures with callback so listenable Futures and",
    "start": "793680",
    "end": "799839"
  },
  {
    "text": "so this starts to solve that problem where we don't block instead we asynchronously have a call back and then within that we have call back handlers",
    "start": "799839",
    "end": "806920"
  },
  {
    "text": "where we can asynchronously do that Logic on it completable future in Java 8 gives",
    "start": "806920",
    "end": "814720"
  },
  {
    "text": "this just with new names to everything they apparently didn't want to use any of the conventions from the industry and",
    "start": "814720",
    "end": "820160"
  },
  {
    "text": "so they have different names for everything but perform in the exact same way and so that you can apply a call",
    "start": "820160",
    "end": "826920"
  },
  {
    "text": "back uh to a function to it afterwards closure and sorry not closure",
    "start": "826920",
    "end": "833839"
  },
  {
    "text": "uh Scala and AA Futures are very elegant uh the composable Futures that they have",
    "start": "833839",
    "end": "840000"
  },
  {
    "text": "actually get us very very close to where we want to be if I had not discovered RX we would probably be using these Futures",
    "start": "840000",
    "end": "846800"
  },
  {
    "text": "and this gives us a very elegant future where we can then map over the response",
    "start": "846800",
    "end": "852079"
  },
  {
    "text": "and transform it do whatever Nest logic we're going to do and uh it gives us the",
    "start": "852079",
    "end": "857480"
  },
  {
    "text": "exact composition and transformation capabilities that we want on scalar values however if we take that future",
    "start": "857480",
    "end": "864120"
  },
  {
    "text": "and just change it over to an observable we get all the exact same behavior but we can now work on",
    "start": "864120",
    "end": "869880"
  },
  {
    "text": "vectors as well as scalar responses and so what we found is that the best of the",
    "start": "869880",
    "end": "875000"
  },
  {
    "text": "implementations of the future and the observable give us similar abstractions but the observable was one",
    "start": "875000",
    "end": "882959"
  },
  {
    "text": "step further of the in the abstraction and so to simplify our environment we we",
    "start": "882959",
    "end": "890040"
  },
  {
    "text": "have chosen to adopt observable across the board for dealing with asynchronous programming because it allows us to uh",
    "start": "890040",
    "end": "897600"
  },
  {
    "text": "achieve these higher order function fun for transformation and composition on both vectors and scalar uh",
    "start": "897600",
    "end": "903920"
  },
  {
    "text": "responses and so what this meant for us at a practical implementation level is that instead of blocking apis every on",
    "start": "903920",
    "end": "909680"
  },
  {
    "text": "our service layer we went around and change them all to observable apis and so what this means for us is that this",
    "start": "909680",
    "end": "916880"
  },
  {
    "text": "abstraction now frees up the implementation to say perhaps I want to",
    "start": "916880",
    "end": "922320"
  },
  {
    "text": "just synchronously I know I've been talking asynchronously all along but this same interface I could synchronously return a value but the",
    "start": "922320",
    "end": "929680"
  },
  {
    "text": "developer who's consuming this consumes it asynchronously but maybe I've got that sitting in Cache already and so I'm",
    "start": "929680",
    "end": "936480"
  },
  {
    "text": "going to just emit it immediately without the overhead of a thread or I could back it with a separate thread",
    "start": "936480",
    "end": "942040"
  },
  {
    "text": "from a thread pool or I could have multiple threads from a threadpool each emitting different values as they're",
    "start": "942040",
    "end": "947440"
  },
  {
    "text": "processed or I could use an actor or multiple actors to do that work or I could do do an nio call with an event",
    "start": "947440",
    "end": "954279"
  },
  {
    "text": "Loop or I could decouple a thread pull or an actor with an event Loop if I didn't want my call backs happening on",
    "start": "954279",
    "end": "959399"
  },
  {
    "text": "the worker threads and all of these abstractions all these implementation",
    "start": "959399",
    "end": "965279"
  },
  {
    "text": "details are abstracted away from how the data is consumed and so the client code",
    "start": "965279",
    "end": "970720"
  },
  {
    "text": "treats all the interactions asynchronously but the owner of that that API is free to uh change the",
    "start": "970720",
    "end": "978920"
  },
  {
    "text": "implementation however they wish and they're also even in control of whether it's blocking or non-blocking so this",
    "start": "978920",
    "end": "984519"
  },
  {
    "text": "the abstraction appears as non-blocking asynchronous and then the implementation",
    "start": "984519",
    "end": "990079"
  },
  {
    "text": "detail gets to choose what resources it is using so I'm going to start getting into",
    "start": "990079",
    "end": "995880"
  },
  {
    "text": "code now and to walk you through code examples and some of the more common",
    "start": "995880",
    "end": "1001040"
  },
  {
    "text": "higher order functions that are applied to this and so that thing at the top we call them marble diagrams I'm going to",
    "start": "1001040",
    "end": "1006519"
  },
  {
    "text": "use a lot of those in the rest of the presentation to try and give a visual representation of how the data is",
    "start": "1006519",
    "end": "1011759"
  },
  {
    "text": "Flowing so if you've never done uh functional programming or uh reactive",
    "start": "1011759",
    "end": "1017319"
  },
  {
    "text": "programming the hope is that you can start to visualize the data flowing through and if you start to think of the",
    "start": "1017319",
    "end": "1023399"
  },
  {
    "text": "data as literally like pipes of of data flowing together and then these higher",
    "start": "1023399",
    "end": "1028798"
  },
  {
    "text": "order functions are like the connectors that you uh have with the pipes and that",
    "start": "1028799",
    "end": "1035400"
  },
  {
    "text": "visual image can start to help you recognize basically what's going on with",
    "start": "1035400",
    "end": "1040918"
  },
  {
    "text": "the data as it flows to the system and uh so I'm going to start with the the",
    "start": "1040919",
    "end": "1046079"
  },
  {
    "text": "basics of how you create And subscribe uh to the observables so an observable",
    "start": "1046079",
    "end": "1051440"
  },
  {
    "text": "is really just a function that can accept an observer and when it receives",
    "start": "1051440",
    "end": "1056640"
  },
  {
    "text": "that Observer then it will emit via on next sorry",
    "start": "1056640",
    "end": "1063000"
  },
  {
    "text": "right once you've got that Observer and it is subscribed to you can emit zero or",
    "start": "1063000",
    "end": "1069280"
  },
  {
    "text": "more events to it via the on next event and then you have a terminal state of oncompleted of success or an onerror",
    "start": "1069280",
    "end": "1076799"
  },
  {
    "text": "terminal state if there's a failure and so here are some examples these are",
    "start": "1076799",
    "end": "1082919"
  },
  {
    "text": "purposefully verbose in showing where the concurrency comes from normally there are much better ways of",
    "start": "1082919",
    "end": "1088080"
  },
  {
    "text": "introducing the concurrency but I'm doing it here to be explicit in demonstrating that it's up to the observable itself as to where the source",
    "start": "1088080",
    "end": "1095960"
  },
  {
    "text": "of uh uh concurrency or asynchronous execution comes from and so in this case",
    "start": "1095960",
    "end": "1101600"
  },
  {
    "text": "the actual interesting part is just right there and what it does is this observable is a function that one",
    "start": "1101600",
    "end": "1108159"
  },
  {
    "text": "subscribed to we'll fetch one video rating object data",
    "start": "1108159",
    "end": "1113720"
  },
  {
    "text": "uh object over a network call and then emit it and then complete that observable sequence and you'll notice",
    "start": "1113720",
    "end": "1120799"
  },
  {
    "text": "that in this case I am explicitly doing it within a Java executor that executes",
    "start": "1120799",
    "end": "1126559"
  },
  {
    "text": "it on some background thread and uh typically in our production code we",
    "start": "1126559",
    "end": "1131960"
  },
  {
    "text": "don't do that so again just want to be clear that that is just to demonstrate that it's fully the choice of the",
    "start": "1131960",
    "end": "1137280"
  },
  {
    "text": "observable as to what's going on here's a a synchronous example just",
    "start": "1137280",
    "end": "1142320"
  },
  {
    "text": "showing that the observable can be blocking and synchronous if it wants to be and so this one just fire hoses data",
    "start": "1142320",
    "end": "1149760"
  },
  {
    "text": "U Back out and the subscription will in fact block I don't recommend doing this",
    "start": "1149760",
    "end": "1154840"
  },
  {
    "text": "typically but if you have something that's in in a cache and it takes you know a microsc to fetch it out and emit",
    "start": "1154840",
    "end": "1161039"
  },
  {
    "text": "it it's generally actually better to do that than spawn off a thread or or",
    "start": "1161039",
    "end": "1166280"
  },
  {
    "text": "something of that nature so in this case we're actually returning multiple values and we emit them and then complete",
    "start": "1166280",
    "end": "1172840"
  },
  {
    "text": "here's an asynchronous one with multiple values generally you probably aren't",
    "start": "1172840",
    "end": "1177880"
  },
  {
    "text": "doing a network call in a loop like this but if you had some reason to do so you can um typically you have some a more",
    "start": "1177880",
    "end": "1185440"
  },
  {
    "text": "efficient streaming approach where it's a single Network call and you're streaming the the data off the line but",
    "start": "1185440",
    "end": "1191000"
  },
  {
    "text": "the the whichever implementation it is it's on nexting the values they're received and uh then you complete and so",
    "start": "1191000",
    "end": "1199440"
  },
  {
    "text": "these are very trivial examples of the source of the data the the observable",
    "start": "1199440",
    "end": "1204640"
  },
  {
    "text": "itself so the simplest Observer now so we flip from the producer to the consumer side is the consumer has three",
    "start": "1204640",
    "end": "1211559"
  },
  {
    "text": "possible events that it can receive typically you actually don't need the uncompleted at the very end uh",
    "start": "1211559",
    "end": "1218280"
  },
  {
    "text": "it's kind of implicit typically and so generally looks sorry I'm skipping uh",
    "start": "1218280",
    "end": "1225720"
  },
  {
    "text": "just shortening it up to show what it looks like when you're not doing the full uh uh verbose implementation that's",
    "start": "1225720",
    "end": "1231600"
  },
  {
    "text": "what it looks like when you're using lambdas typically you don't need the completed and the error handling um this",
    "start": "1231600",
    "end": "1239360"
  },
  {
    "text": "is error handling just at the very end I'm going to get into the asynchronous error handling a little bit more detail later that's one of the biggest",
    "start": "1239360",
    "end": "1245360"
  },
  {
    "text": "challenges in async programming typically but this is the the basic Observer that you would pass in and you",
    "start": "1245360",
    "end": "1251480"
  },
  {
    "text": "don't always need to have the air handler if you don't want to worry about them but generally this would be where you're at but all all we've done so far",
    "start": "1251480",
    "end": "1258640"
  },
  {
    "text": "is just make a glorified U Pub sub and nothing interesting at this point where",
    "start": "1258640",
    "end": "1264720"
  },
  {
    "text": "it gets interesting is where we start to have composable functions and so some of those types of functions this is a list",
    "start": "1264720",
    "end": "1270760"
  },
  {
    "text": "of some of the more common ones and I'm going to walk you through now some of the ones that are just critical to",
    "start": "1270760",
    "end": "1277240"
  },
  {
    "text": "pretty well any application so we going to start with how you combine multiple streams of data",
    "start": "1277240",
    "end": "1282320"
  },
  {
    "text": "using the merge operator so what the merge operator does is it allows you to take two observable sequences of the",
    "start": "1282320",
    "end": "1288240"
  },
  {
    "text": "same type and merge them into one sequence one observable sequence that has all of those uh all the events",
    "start": "1288240",
    "end": "1295840"
  },
  {
    "text": "combined and so here we have two sequences get data A and B and they both",
    "start": "1295840",
    "end": "1301720"
  },
  {
    "text": "return the same data object some data and so these two lines across the top represent two sequences of data over",
    "start": "1301720",
    "end": "1308440"
  },
  {
    "text": "time they're both emitting values at different points in time and the top one emits an error event as it's the third",
    "start": "1308440",
    "end": "1314600"
  },
  {
    "text": "event there that X represents an onerror call you want to take these two and pass",
    "start": "1314600",
    "end": "1319880"
  },
  {
    "text": "them through a merge operator and that merge operator is is this is how it",
    "start": "1319880",
    "end": "1325799"
  },
  {
    "text": "looks and that merge operator out the other side what you want is a single observable sequence that combines that",
    "start": "1325799",
    "end": "1331919"
  },
  {
    "text": "output and so you'll see that it combines the the the first four events and then the terminal state of on aor",
    "start": "1331919",
    "end": "1337720"
  },
  {
    "text": "and then once that terminal State occurs no further events will will arrive and then out the other side you",
    "start": "1337720",
    "end": "1344360"
  },
  {
    "text": "have a single subscription that receives all those events merge together another common one is Zip Zip is used",
    "start": "1344360",
    "end": "1351279"
  },
  {
    "text": "when you are combining multiple sequences of data multiple uh observables of different types so here",
    "start": "1351279",
    "end": "1358240"
  },
  {
    "text": "we have two observables of two different data types some data and string so the difference here is that you cannot just",
    "start": "1358240",
    "end": "1364000"
  },
  {
    "text": "combine these together H with an assumption of to their as their type and so if we have these circles and diamond",
    "start": "1364000",
    "end": "1371880"
  },
  {
    "text": "or triangles upside down triangles and we want to combine them together we need",
    "start": "1371880",
    "end": "1377440"
  },
  {
    "text": "to pass them through a function that then knows what to do about those and so that function here is we we pass in a",
    "start": "1377440",
    "end": "1384480"
  },
  {
    "text": "and b as the as the sequences and then uh this this is groovy syntax here so",
    "start": "1384480",
    "end": "1390679"
  },
  {
    "text": "the first two are the the names of those parameters they come in X and Y and then the other side of it all it's doing is",
    "start": "1390679",
    "end": "1397240"
  },
  {
    "text": "it's returning a tuple of X and Y and this is about the simplest thing you can do with a zip and so all we want to do",
    "start": "1397240",
    "end": "1403480"
  },
  {
    "text": "is just combine them into a tuple and so we end up then emitting these two",
    "start": "1403480",
    "end": "1409159"
  },
  {
    "text": "of these values combined together and then we can get out that that tupal and retrieve the two values from those pairs",
    "start": "1409159",
    "end": "1415520"
  },
  {
    "text": "as we wish error handling so the simplest way",
    "start": "1415520",
    "end": "1421640"
  },
  {
    "text": "is you you declare your composition of all the the sequences and at the very",
    "start": "1421640",
    "end": "1426840"
  },
  {
    "text": "end when you subscribe to it you pass in your error Handler this is equivalent to having a big Tri catch around an entire",
    "start": "1426840",
    "end": "1433480"
  },
  {
    "text": "block of imperative code um it's almost like having the tri catch around like in your your main method just around your",
    "start": "1433480",
    "end": "1439799"
  },
  {
    "text": "entire application uh call and or like if you have a web service and in your B",
    "start": "1439799",
    "end": "1445760"
  },
  {
    "text": "in the the POR we doing the body the TR catches around the entire thing now that can be very useful and what you what you",
    "start": "1445760",
    "end": "1453279"
  },
  {
    "text": "want to catch anything that goes wrong and that exception will wherever it",
    "start": "1453279",
    "end": "1459679"
  },
  {
    "text": "occurs will just be passed through and then the whole sequence terminates however it's far more common",
    "start": "1459679",
    "end": "1465600"
  },
  {
    "text": "that you want to be able to catch errors surgically where they're occurring in the sequence of events and so there are",
    "start": "1465600",
    "end": "1471120"
  },
  {
    "text": "a variety of different operators that you can apply to that and one of them is on aor resume next and it does what it",
    "start": "1471120",
    "end": "1477799"
  },
  {
    "text": "says it says on error I want to resume with this other sequence of data so let's say that I had that am",
    "start": "1477799",
    "end": "1484360"
  },
  {
    "text": "andb sequences and I want to add some kind of error handling to the B sequence",
    "start": "1484360",
    "end": "1490200"
  },
  {
    "text": "and so whenever if B fails at any point in time instead of it causing the whole",
    "start": "1490200",
    "end": "1495320"
  },
  {
    "text": "thing to fail I want to be able to handle that in some way so this would be equivalent to having like a git method",
    "start": "1495320",
    "end": "1501279"
  },
  {
    "text": "in in normal imperative object draing a code that internally has a tri catch that if it fails then it returns some",
    "start": "1501279",
    "end": "1508520"
  },
  {
    "text": "other value and so in this case what H if that b sequence is is moving along it",
    "start": "1508520",
    "end": "1514760"
  },
  {
    "text": "emits three values and then fails with an onerror event when that error occurs",
    "start": "1514760",
    "end": "1520399"
  },
  {
    "text": "it's going to trigger this onerror resume next function and what that will do is it's the equivalent of in the in",
    "start": "1520399",
    "end": "1526559"
  },
  {
    "text": "the catch block it would then say execute this other sequence of data I'm going to subscribe to it and then it's",
    "start": "1526559",
    "end": "1533399"
  },
  {
    "text": "almost like it just switches the flows or like if you think of train tracks and you had that lever that switches the",
    "start": "1533399",
    "end": "1539120"
  },
  {
    "text": "tracks it moves the the subscription to another uh stream of data and allows you then to emit whatever the the backup or",
    "start": "1539120",
    "end": "1546880"
  },
  {
    "text": "fallback data would be so in this case that backup is here and it's pass in is this other function",
    "start": "1546880",
    "end": "1553520"
  },
  {
    "text": "get fallback for b um for Simplicity on the slide I don't have what that would be that would be another observable",
    "start": "1553520",
    "end": "1559640"
  },
  {
    "text": "function that you pass into it and so what that function does is it gets subscribed to and then it admits to",
    "start": "1559640",
    "end": "1565679"
  },
  {
    "text": "events successfully and then terminates now what might those be those",
    "start": "1565679",
    "end": "1570720"
  },
  {
    "text": "can sometimes sometimes just means that you just want to just immediately terminate you could just oncomplete",
    "start": "1570720",
    "end": "1576720"
  },
  {
    "text": "immediately and you just want to take let's say that you were expecting a list of 50 movies it's common thing in",
    "start": "1576720",
    "end": "1581960"
  },
  {
    "text": "Netflix but you only got to like 37 of them and failed well we might just then",
    "start": "1581960",
    "end": "1587279"
  },
  {
    "text": "resume next with an immediate completion and we will say we would rather the user interface gets 37 movies and misses",
    "start": "1587279",
    "end": "1594000"
  },
  {
    "text": "those last uh 13 rather than blow up the entire user experience or you may have some Tombstone object you pass down or",
    "start": "1594000",
    "end": "1600880"
  },
  {
    "text": "you may have some legit legitimate uh fallback data to to return on error",
    "start": "1600880",
    "end": "1606360"
  },
  {
    "text": "return is a simpler version of this all it does is it when that error occurs you've passed in an actual value for it",
    "start": "1606360",
    "end": "1612880"
  },
  {
    "text": "to just immediately return so this is much more common for just tombstoning or just immediate mediately",
    "start": "1612880",
    "end": "1619320"
  },
  {
    "text": "completing so now I'm going to start to dig into some actual use cases instead of just going over the operators so very",
    "start": "1619320",
    "end": "1625279"
  },
  {
    "text": "very simple use case is HTTP call so I want to handle it asynchronously so in",
    "start": "1625279",
    "end": "1630480"
  },
  {
    "text": "this case I want to fetch uh from Wikipedia in this case and",
    "start": "1630480",
    "end": "1637279"
  },
  {
    "text": "it's going to return back to me this is all just declarative at this point nothing's actually executing when this",
    "start": "1637279",
    "end": "1642640"
  },
  {
    "text": "is done I create this observable out of it and I'm in the comments I'm going to",
    "start": "1642640",
    "end": "1649360"
  },
  {
    "text": "just show what the static typing is and I purposefully in some places I'm being a little bit more verbose just so you",
    "start": "1649360",
    "end": "1655240"
  },
  {
    "text": "see what the types are um but most of these things including Java 8 it's all",
    "start": "1655240",
    "end": "1660279"
  },
  {
    "text": "just inferred throughout the chains this observable then that returns an observable htttp response you can flat",
    "start": "1660279",
    "end": "1668240"
  },
  {
    "text": "map over it and I'll get back a little bit more later to what that flat map does you what this is basically saying",
    "start": "1668240",
    "end": "1673919"
  },
  {
    "text": "is when I receive back this response I then want to do nested logic on it all",
    "start": "1673919",
    "end": "1678960"
  },
  {
    "text": "asynchronously and within that then I want to say I want to from that response",
    "start": "1678960",
    "end": "1684159"
  },
  {
    "text": "I want to get the content so that response object at that point contains it's the way HTTP works is it returns",
    "start": "1684159",
    "end": "1690679"
  },
  {
    "text": "back like the header uh information so you get the status code the the headers and those things and then you can start",
    "start": "1690679",
    "end": "1696279"
  },
  {
    "text": "consuming the rest of the the data and so this two-step response I'm able to",
    "start": "1696279",
    "end": "1702159"
  },
  {
    "text": "validate the the status and those things and then I can get this response that contains an observable of bite array",
    "start": "1702159",
    "end": "1708919"
  },
  {
    "text": "and in this case I just want to then map over it transform it into a string um if",
    "start": "1708919",
    "end": "1714120"
  },
  {
    "text": "it was Data you'd want to leave as a bay do what you wish with it and then it would be in this step that you could then do your Json transformation",
    "start": "1714120",
    "end": "1722039"
  },
  {
    "text": "Etc when you subscribe to it is when it actually does the work and so everything",
    "start": "1722039",
    "end": "1727159"
  },
  {
    "text": "in RX is lazy it do it's all just declarative until the point that a subscription occurs so it's the",
    "start": "1727159",
    "end": "1733480"
  },
  {
    "text": "equivalent of you you connect all the pipes and then you turn on the the water at the end and so once everything's",
    "start": "1733480",
    "end": "1740240"
  },
  {
    "text": "connected then you turn it on the flow and then everything happens at that point and what this would then emit is",
    "start": "1740240",
    "end": "1747200"
  },
  {
    "text": "asynchronously it would just receive the response from the in this case Wikipedia now just for to allow breaking",
    "start": "1747200",
    "end": "1755120"
  },
  {
    "text": "out of an async World sometimes you need to break out of it there is this ability to to switch back into a blocking",
    "start": "1755120",
    "end": "1761720"
  },
  {
    "text": "observable which then exposes a lot of uh blocking operators such as for each this is useful for if you're just doing",
    "start": "1761720",
    "end": "1768320"
  },
  {
    "text": "demo apps or uh unit tests and those types of things now that one wasn't all that much",
    "start": "1768320",
    "end": "1774760"
  },
  {
    "text": "more interesting than a a typical async client this one's a little bit more interesting if I flip this from",
    "start": "1774760",
    "end": "1780799"
  },
  {
    "text": "Wikipedia over to in this case it's a product it's another open source Library we use at Netflix uh for fault tolerance",
    "start": "1780799",
    "end": "1790000"
  },
  {
    "text": "but this particular thing it's a the stream of data the metrics that come out of each each of our servers and so this",
    "start": "1790000",
    "end": "1796440"
  },
  {
    "text": "uses the HTML 5 server % EV event spec and when you connect to this HTTP uh",
    "start": "1796440",
    "end": "1802880"
  },
  {
    "text": "connection it's it will stay alive as long as you hold it open and it just constantly emits events well now what",
    "start": "1802880",
    "end": "1809039"
  },
  {
    "text": "this will do is because the observable um supports vectors of data this will",
    "start": "1809039",
    "end": "1814399"
  },
  {
    "text": "now actually just start emitting every single event that comes down the wire it will emit uh as an observable event and",
    "start": "1814399",
    "end": "1822200"
  },
  {
    "text": "so it will just keep calling on next so in this case I want to filter out the pings uh in the we send these ping down",
    "start": "1822200",
    "end": "1829080"
  },
  {
    "text": "every like 15 seconds um it's part of the Network Health stuff and so in this",
    "start": "1829080",
    "end": "1834440"
  },
  {
    "text": "case you can apply an operator to filter those out and then let's say that I'm just at I just want to get a a sampling",
    "start": "1834440",
    "end": "1841960"
  },
  {
    "text": "of what's going on I could take 30 of them and then disconnect and this is an example of how",
    "start": "1841960",
    "end": "1847000"
  },
  {
    "text": "the same interface now I've just used it for a scaler response where the Wikipedia page returns a single response",
    "start": "1847000",
    "end": "1852360"
  },
  {
    "text": "back or I can consume from a stream of data and and it will just keep emitting the the results as they come",
    "start": "1852360",
    "end": "1859760"
  },
  {
    "text": "in I want to now go into uh a more complicated use case which is this is",
    "start": "1859760",
    "end": "1864960"
  },
  {
    "text": "the use case that actually drove our adoption of functional reactive programming uh this is uh it's a",
    "start": "1864960",
    "end": "1870840"
  },
  {
    "text": "simplified version of what we do when we render uh the UI that has the grid of movies on it and that involves a lot of",
    "start": "1870840",
    "end": "1878039"
  },
  {
    "text": "nested behavior and uh lots of different network calls to render it and so the",
    "start": "1878039",
    "end": "1885240"
  },
  {
    "text": "marble diagram is a little bit more complicated and and the way it starts out is at the very top the first thing",
    "start": "1885240",
    "end": "1891720"
  },
  {
    "text": "that we would do after you've gotten all your user credentials and all those things is we ask the video service for a",
    "start": "1891720",
    "end": "1897720"
  },
  {
    "text": "list of movies there's actually one level above this still um where you get",
    "start": "1897720",
    "end": "1903000"
  },
  {
    "text": "the grid of movies first and then you start once you get back to grid then you go over each list um for Simplicity I'm",
    "start": "1903000",
    "end": "1908840"
  },
  {
    "text": "just on a single list at this point and so this video Service uh you fetch it",
    "start": "1908840",
    "end": "1916760"
  },
  {
    "text": "and this is going to return an OB observable the next thing we do is let's say that we're on a a smaller screened",
    "start": "1916760",
    "end": "1922679"
  },
  {
    "text": "uh UI and we actually only want to take 10 not the 50 or 75 or 100 that can",
    "start": "1922679",
    "end": "1929000"
  },
  {
    "text": "exist on a row and so you want to take 10 well what's happening when that operator triggers is that behind the",
    "start": "1929000",
    "end": "1934559"
  },
  {
    "text": "scenes this is lazily uh emitting data and then that take operator once it hits",
    "start": "1934559",
    "end": "1940519"
  },
  {
    "text": "the 10th item it's going to unsubscribe from the previous one and so that unsubscribe event will then propagate up",
    "start": "1940519",
    "end": "1947519"
  },
  {
    "text": "the synchronous uh sequence and tell the the parent in the chain to stop working",
    "start": "1947519",
    "end": "1954120"
  },
  {
    "text": "and then this if this is however many levels deep is this propagates up and so what this would mean is that if you were",
    "start": "1954120",
    "end": "1961639"
  },
  {
    "text": "continually doing network activity behind the scenes You' be able to stop that network activity and so it's only",
    "start": "1961639",
    "end": "1967919"
  },
  {
    "text": "doing the work up to the point you actually need it lazily rather than eagerly fetching it all now that",
    "start": "1967919",
    "end": "1973200"
  },
  {
    "text": "implementation may have fetched it all in batch it may have already fetched 100 of them in one network call in that case",
    "start": "1973200",
    "end": "1978919"
  },
  {
    "text": "all you're going to do is you're going to stop the inmemory uh iteration um but the principle is that it always emits",
    "start": "1978919",
    "end": "1985720"
  },
  {
    "text": "the it carries the unsubscribe all the way up to allow the resource cleanup and the The Lazy execution of the work and",
    "start": "1985720",
    "end": "1992639"
  },
  {
    "text": "then it's the implementation Choice as to what work am I doing that actually needs to be cleaned",
    "start": "1992639",
    "end": "1998919"
  },
  {
    "text": "up when I receive that data I then want to map over it to transform it so what",
    "start": "1998919",
    "end": "2004200"
  },
  {
    "text": "map does is it transforms type T to Type R and so it lets me do whatever I want within there to to to manipulate my",
    "start": "2004200",
    "end": "2011880"
  },
  {
    "text": "data however we we're going to do something condition nested and so we're going to use flat map instead um it's",
    "start": "2011880",
    "end": "2018600"
  },
  {
    "text": "also known as map many or in the net World select many uh We've adopted flat map as a naming convention on the jvm",
    "start": "2018600",
    "end": "2025120"
  },
  {
    "text": "since that's more common in the Java world and it actually is more descriptive of as to what it's doing so",
    "start": "2025120",
    "end": "2030399"
  },
  {
    "text": "flatmap is basically what it is is it's the same thing as map except that you're returning an observable of r instead of",
    "start": "2030399",
    "end": "2037399"
  },
  {
    "text": "r and so you could think of it as a map returning sequences and then flat map is",
    "start": "2037399",
    "end": "2043960"
  },
  {
    "text": "just merging them together so it's the equivalent of doing a map and then a merge and so you end up with um if if",
    "start": "2043960",
    "end": "2052200"
  },
  {
    "text": "it's emitting these sequences it just merges them into one sequence otherwise you would get a sequence of sequences",
    "start": "2052200",
    "end": "2058118"
  },
  {
    "text": "which sometimes you want but generally you're not and so what this what we're going to do in this flat map is that",
    "start": "2058119",
    "end": "2063760"
  },
  {
    "text": "we're now going to receive 10 calls of this for each of the video objects are going going to be emitted we're going to receive 10 video objects for each of",
    "start": "2063760",
    "end": "2070480"
  },
  {
    "text": "those 10 we want to then do some nested logic and so the first one we want to do is we want to go get some metadata for",
    "start": "2070480",
    "end": "2077158"
  },
  {
    "text": "that video and so we we go off and fetch that and we also want to fetch bookmarks",
    "start": "2077159",
    "end": "2083520"
  },
  {
    "text": "and ratings there's other ones we fetch but these are three very common ones and each of these three things are going to",
    "start": "2083520",
    "end": "2088638"
  },
  {
    "text": "be done asynchronously they may or may not result in network calls and all of",
    "start": "2088639",
    "end": "2093878"
  },
  {
    "text": "these are returning uh observables so they're all a think and then we want to",
    "start": "2093879",
    "end": "2099960"
  },
  {
    "text": "on them transform them into some data that is ready to be delivered to our client and so again we map over it and",
    "start": "2099960",
    "end": "2107079"
  },
  {
    "text": "in this case we're transforming it into just a very simple dictionary of key value Pairs and we want to do that for",
    "start": "2107079",
    "end": "2114520"
  },
  {
    "text": "each of them and so inside that map many or flat map we will then conditional",
    "start": "2114520",
    "end": "2120480"
  },
  {
    "text": "sorry we will then in a nested manner fetch the metadata and map over it and do the same thing for the bookmarks and",
    "start": "2120480",
    "end": "2125800"
  },
  {
    "text": "ratings we'll squish all this up on the screen and so we've got the the metadata",
    "start": "2125800",
    "end": "2131520"
  },
  {
    "text": "bookmark and rating what we've just defined there are three observable sequences all we've done is declare them",
    "start": "2131520",
    "end": "2136760"
  },
  {
    "text": "we've declared these sequences with map transforms and if we were to execute the code like this right now they would",
    "start": "2136760",
    "end": "2142640"
  },
  {
    "text": "never actually get executed because they're declared but never actually subscribed to and so the because it's",
    "start": "2142640",
    "end": "2149119"
  },
  {
    "text": "all lazy I would run this and I would actually emit nothing it would be like my application did nothing I would do",
    "start": "2149119",
    "end": "2155040"
  },
  {
    "text": "the initial Network call um to get the video it would emit the videos into this and then it would just kind of like",
    "start": "2155040",
    "end": "2161440"
  },
  {
    "text": "return empty data so I need to subscribe to them in a way that combines them together and so I",
    "start": "2161440",
    "end": "2168240"
  },
  {
    "text": "want to zip these together and uh you you could do a there's other there's",
    "start": "2168240",
    "end": "2174280"
  },
  {
    "text": "variants that you could do like a merge with a list and things like that but zip works very well in this case and so I want to zip the mbnr because I want to",
    "start": "2174280",
    "end": "2181560"
  },
  {
    "text": "get them together in one place and the function that I apply to it is uh going",
    "start": "2181560",
    "end": "2187599"
  },
  {
    "text": "to take those three and sorry and it's going to combine them together into a",
    "start": "2187599",
    "end": "2194119"
  },
  {
    "text": "single dictionary and so again what zip is doing is it's taking those input values and applying a function and I'm",
    "start": "2194119",
    "end": "2200880"
  },
  {
    "text": "going to I could return them as a tuple but what I actually want to do here is I want to transform them into a dictionary",
    "start": "2200880",
    "end": "2207599"
  },
  {
    "text": "this is groovy Syntax for the first one is a map literal so I'm creating a dictionary that just contains the uh key",
    "start": "2207599",
    "end": "2214119"
  },
  {
    "text": "ID and then the video ID and then the uh the three off to the uh side of it are",
    "start": "2214119",
    "end": "2220960"
  },
  {
    "text": "just being concatenated into it so it's very very um concise representation of",
    "start": "2220960",
    "end": "2226319"
  },
  {
    "text": "concatenating three dictionaries into a newly created one so what I get out of the bottom of",
    "start": "2226319",
    "end": "2232640"
  },
  {
    "text": "this now is I'm going to be returning an observable map or dictionary and that",
    "start": "2232640",
    "end": "2238560"
  },
  {
    "text": "that zip operator is the last piece of this declaration as to how I want to",
    "start": "2238560",
    "end": "2243680"
  },
  {
    "text": "consume a list of videos transform it manipulate it do nested logic to actually go and fetch other do other",
    "start": "2243680",
    "end": "2249760"
  },
  {
    "text": "network calls and out the bottom I just want to emit a dictionary of data for each of my videos and what I get out of that is for",
    "start": "2249760",
    "end": "2257319"
  },
  {
    "text": "each of those 10 videos I now will get a a dictionary that looks like that where I have key values uh combined from the",
    "start": "2257319",
    "end": "2264960"
  },
  {
    "text": "three nested uh Network calls and the parent Network call of the video ID obviously in the real in real life",
    "start": "2264960",
    "end": "2271240"
  },
  {
    "text": "they're this is a much bigger dictionary um and what this",
    "start": "2271240",
    "end": "2277960"
  },
  {
    "text": "what this all shows is that all the interactions with the the API they were",
    "start": "2277960",
    "end": "2283240"
  },
  {
    "text": "treated as if they were async and it was all done in a lazy declarative Manner",
    "start": "2283240",
    "end": "2288720"
  },
  {
    "text": "and all of the details as to what's happening behind the scenes are controlled by the API and so in in our",
    "start": "2288720",
    "end": "2294240"
  },
  {
    "text": "production environment that whole process would have resulted in three Network calls even though it it",
    "start": "2294240",
    "end": "2301480"
  },
  {
    "text": "could be done inefficiently with 31 31 Network calls if we were to do it in the",
    "start": "2301480",
    "end": "2308480"
  },
  {
    "text": "naive way and so the metadata is always pulled from in memory cache because that's so active we've got that all",
    "start": "2308480",
    "end": "2314040"
  },
  {
    "text": "cached the bookmarks and ratings we collapse those into single batch calls behind the scenes and the video list is",
    "start": "2314040",
    "end": "2322200"
  },
  {
    "text": "all pulled in in batch as well but those implementation details are completely up",
    "start": "2322200",
    "end": "2328079"
  },
  {
    "text": "to us to choose how to do and we can change that uh without ever affecting",
    "start": "2328079",
    "end": "2334400"
  },
  {
    "text": "the what the API looks like because it's all done in a declarative asynchron manner so as we look back uh on our a on",
    "start": "2334400",
    "end": "2342680"
  },
  {
    "text": "our architecture we feel that we have successfully achieved what we aimed for what what the reality of our struct of",
    "start": "2342680",
    "end": "2349839"
  },
  {
    "text": "our uh architecture is now is that the various UI teams actually build their",
    "start": "2349839",
    "end": "2355359"
  },
  {
    "text": "own endpoints their web services and deploy them on top of us in production the API team at Netflix has gotten out",
    "start": "2355359",
    "end": "2361079"
  },
  {
    "text": "of the business of building web services and we now just build and maintain the platform upon which all the various",
    "start": "2361079",
    "end": "2367040"
  },
  {
    "text": "teams of within Netflix build their own web services on top of us and they're able to deploy them uh dynamically in",
    "start": "2367040",
    "end": "2373400"
  },
  {
    "text": "prod it it takes about 30 seconds from the time you deploy it for it to propagate across our Fleet of hundreds",
    "start": "2373400",
    "end": "2379119"
  },
  {
    "text": "of servers and they can rev through and and do whatever they wish with it and",
    "start": "2379119",
    "end": "2384240"
  },
  {
    "text": "all of that code at that layer is all done using uh RX um functionally styled",
    "start": "2384240",
    "end": "2389920"
  },
  {
    "text": "reactive programming underneath we use hisis for all of our backend uh",
    "start": "2389920",
    "end": "2395240"
  },
  {
    "text": "bulkheading of our underlying systems and we liked the reactive model so much",
    "start": "2395240",
    "end": "2400599"
  },
  {
    "text": "that we have recently retrofitted uh hiss to be non-blocking top to bottom",
    "start": "2400599",
    "end": "2407040"
  },
  {
    "text": "and exposed observable mechanisms for interacting with it and over time we're",
    "start": "2407040",
    "end": "2412400"
  },
  {
    "text": "seeing the the approach of this reactive style pushing deeper and deeper into our",
    "start": "2412400",
    "end": "2418200"
  },
  {
    "text": "stack so that we are getting closer and closer to the point now that when uh an incoming request comes in the",
    "start": "2418200",
    "end": "2423920"
  },
  {
    "text": "Declaration of all the work uh actually then connects into a next level down of",
    "start": "2423920",
    "end": "2430119"
  },
  {
    "text": "all observable sequences and top to bottom to the from incoming Network call",
    "start": "2430119",
    "end": "2435599"
  },
  {
    "text": "to the underlying Network call out the other side and then back is uh one single reactive",
    "start": "2435599",
    "end": "2443560"
  },
  {
    "text": "declaration and so we feel pretty good about how the observable apis have worked and I think that the most",
    "start": "2443560",
    "end": "2448839"
  },
  {
    "text": "interesting part about this uh some of the Lessons Learned is the the developer",
    "start": "2448839",
    "end": "2454240"
  },
  {
    "text": "training was a pretty big key for us in adopting this so when I was involved in the original design and architecture of",
    "start": "2454240",
    "end": "2460200"
  },
  {
    "text": "this of this new approach for our API platform and it took me a while to to grock the the ideas and it took um a lot",
    "start": "2460200",
    "end": "2469400"
  },
  {
    "text": "of shedding of biases and unlearning of approaches that were just the status quo",
    "start": "2469400",
    "end": "2476560"
  },
  {
    "text": "and once a core group of us had figured that out and iterated enough it took us a couple months to really feel convinced",
    "start": "2476560",
    "end": "2481760"
  },
  {
    "text": "that we had it the next level of of working with developers was the next hard part of taking developers who have",
    "start": "2481760",
    "end": "2489240"
  },
  {
    "text": "10 15 20 years of U entrenched just thinking on how to go about implementing",
    "start": "2489240",
    "end": "2496640"
  },
  {
    "text": "code like this and so what we found is that uh the first couple developers took",
    "start": "2496640",
    "end": "2502480"
  },
  {
    "text": "a month four to six to eight weeks for them to really get up to speed with really thinking like this and that was",
    "start": "2502480",
    "end": "2508599"
  },
  {
    "text": "the first two Monon like Alpha stage of it after that we found it took about two weeks for any given developer to get",
    "start": "2508599",
    "end": "2515119"
  },
  {
    "text": "over that hurdle of grumbling and mumbling and complaining and really wondering why on Earth they were being",
    "start": "2515119",
    "end": "2521119"
  },
  {
    "text": "asked to do functional style programming to coming out the other side going I get it I do not want to go back to the other",
    "start": "2521119",
    "end": "2527160"
  },
  {
    "text": "way and to um facilitate that we uh we actually hired a technical writer to",
    "start": "2527160",
    "end": "2534319"
  },
  {
    "text": "come in and write documentation for it and it was one of the best decisions we made it's some of the best internal uh documentation I've ever seen in a",
    "start": "2534319",
    "end": "2540440"
  },
  {
    "text": "company because we we recognized that this shouldn't just be a few Engineers just trying to like throw some stuff in a Wiki but we actually brought in",
    "start": "2540440",
    "end": "2546640"
  },
  {
    "text": "someone to help write that up and that was a big deal and then we also do uh just internal training uh for new",
    "start": "2546640",
    "end": "2553520"
  },
  {
    "text": "developers coming on board and this is not just a group of like 10 or 15 people because this is know all the different",
    "start": "2553520",
    "end": "2559720"
  },
  {
    "text": "UI teams who want to support their devices and so this is Javascript engineers",
    "start": "2559720",
    "end": "2565880"
  },
  {
    "text": "and uh C engineers and Java Engineers closer scalla groovy all these different",
    "start": "2565880",
    "end": "2573319"
  },
  {
    "text": "people from different backgrounds who are all potentially building web services for their devices that we're on",
    "start": "2573319",
    "end": "2578960"
  },
  {
    "text": "boarding onto this the next thing is that debugging and tracing of async is definitely different um setting a break",
    "start": "2578960",
    "end": "2586359"
  },
  {
    "text": "point it's just different in async code one some of the nice things that RX does though is uh see in production you can't",
    "start": "2586359",
    "end": "2592800"
  },
  {
    "text": "do this as nearly as easily but when you're uh in your IDE uh RX supports the",
    "start": "2592800",
    "end": "2598720"
  },
  {
    "text": "idea of virtual schedulers or test schedulers what removes all the concurrency and you can increment time",
    "start": "2598720",
    "end": "2604880"
  },
  {
    "text": "artificially and so it makes unit testing actually very effective and so that you can uh have deterministic",
    "start": "2604880",
    "end": "2612040"
  },
  {
    "text": "approaches to U thinking through the sequences of data and incrementing time",
    "start": "2612040",
    "end": "2617480"
  },
  {
    "text": "as you expect and then uh performing the assertions there is definitely still work to go uh in this space and we're",
    "start": "2617480",
    "end": "2624119"
  },
  {
    "text": "looking at having console similar to what uh Chrome has for viewing",
    "start": "2624119",
    "end": "2629440"
  },
  {
    "text": "asynchronous events over time but being able to run that against our servers and that's stuff that we're exploring",
    "start": "2629440",
    "end": "2635200"
  },
  {
    "text": "today the Only Rule that we had to really uh just enforce on people it ends",
    "start": "2635200",
    "end": "2640559"
  },
  {
    "text": "up self- enforcing eventually once youve stubbed your toe enough times but is because we are on the jvm and the most",
    "start": "2640559",
    "end": "2647839"
  },
  {
    "text": "of the languages we're using they don't enforce this themselves is to not mutate State outside of your um generally don't",
    "start": "2647839",
    "end": "2655680"
  },
  {
    "text": "mutate state but if you are going to mutate it mutate it within your function and that's it if you want to do some sort of imperative thing inside we're",
    "start": "2655680",
    "end": "2661640"
  },
  {
    "text": "fine but within the barriers of a function um as long as people stick to",
    "start": "2661640",
    "end": "2666800"
  },
  {
    "text": "that it it it uh all the concurrency and parallelism just takes care of itself",
    "start": "2666800",
    "end": "2672680"
  },
  {
    "text": "and this actually fits well with some of the other earlier presentations today about mutable State being a very bad",
    "start": "2672680",
    "end": "2678680"
  },
  {
    "text": "thing when you start getting into these highly concurrent systems and so in a nutshell this combination of functional",
    "start": "2678680",
    "end": "2685440"
  },
  {
    "text": "style and reactive asynchronous processing has proven to be a very effective approach for us in handling uh",
    "start": "2685440",
    "end": "2693400"
  },
  {
    "text": "large scale high volume systems where we have a lot of nestic conditional logic and it's very Network driven and there's",
    "start": "2693400",
    "end": "2700640"
  },
  {
    "text": "a lot more that's been written about this and the open source projects that are available we've had we've got about",
    "start": "2700640",
    "end": "2706079"
  },
  {
    "text": "we've got over 30 contributors so far um to RX Java rxjs I'm not directly",
    "start": "2706079",
    "end": "2711240"
  },
  {
    "text": "involved in but we use that a lot at Netflix as well and um love to have your",
    "start": "2711240",
    "end": "2716480"
  },
  {
    "text": "involvement on the project if you are interested in this stuff uh or just so you can go and just learn more about the",
    "start": "2716480",
    "end": "2723240"
  },
  {
    "text": "approach even if you don't use this particular Library there's lots of different uh approaches to functional and reactive",
    "start": "2723240",
    "end": "2730040"
  },
  {
    "text": "Styles and if nothing else I would recommend you learning the the ideas",
    "start": "2730040",
    "end": "2737040"
  },
  {
    "text": "because I think you'll find that it really changes your coding habits for the better thank you so there quite a",
    "start": "2737040",
    "end": "2743599"
  },
  {
    "text": "few questions um there were several people during the talk who were thought that it might be rather challenging to",
    "start": "2743599",
    "end": "2749480"
  },
  {
    "text": "test and the short answer has been that that",
    "start": "2749480",
    "end": "2755800"
  },
  {
    "text": "actually has not been as an issue as what we first thought you you unit test them the same way as any other code um",
    "start": "2755800",
    "end": "2763119"
  },
  {
    "text": "and so at the end of the day it's just code and it actually ends up being simpler for the same reasons that uh",
    "start": "2763119",
    "end": "2768200"
  },
  {
    "text": "earlier presentations like by B and others where once you start removing all",
    "start": "2768200",
    "end": "2774079"
  },
  {
    "text": "of the mutable State and have these these sequences of Transformations it actually becomes very easy to read",
    "start": "2774079",
    "end": "2780160"
  },
  {
    "text": "through and understand and then it just becomes normal coding practices if you have just a big ball of code that is",
    "start": "2780160",
    "end": "2786599"
  },
  {
    "text": "like 20 Transformations all in one then it makes it a little harder to test if you use good coding practices and break",
    "start": "2786599",
    "end": "2792839"
  },
  {
    "text": "these into functions and you test each function independently and do normal uh good coding it uh it's the same Concepts",
    "start": "2792839",
    "end": "2800559"
  },
  {
    "text": "the only real thing is that if you are using operators that by definition need sort some sort of concurrency like",
    "start": "2800559",
    "end": "2806319"
  },
  {
    "text": "window or buffering those start to involve time elements and then that's where the ability to pass in all of",
    "start": "2806319",
    "end": "2813079"
  },
  {
    "text": "those decisions are abstracted to schedulers in RX and so you can in your unit test use test schedulers which then",
    "start": "2813079",
    "end": "2820079"
  },
  {
    "text": "allow you to remove all the actual concurrency and then you can increment",
    "start": "2820079",
    "end": "2825599"
  },
  {
    "text": "or move the time to where you want assert at that point and it allows you to reason about time without all the",
    "start": "2825599",
    "end": "2831599"
  },
  {
    "text": "non-determinism of thread schedulers you say a little bit more",
    "start": "2831599",
    "end": "2836960"
  },
  {
    "text": "about parallelism in observables parallelism in observables so by by",
    "start": "2836960",
    "end": "2843440"
  },
  {
    "text": "the each observable sequence the contract is that it will not inter leave any of the on next calls and so it",
    "start": "2843440",
    "end": "2850480"
  },
  {
    "text": "that's the contract that it gives you but then it allows you then to if you",
    "start": "2850480",
    "end": "2855640"
  },
  {
    "text": "merge for example multiple observables it will subscribe to them all in parallel there's also like parallel",
    "start": "2855640",
    "end": "2861880"
  },
  {
    "text": "operators very similar to like the parallel stream uh in Java 8 or parallel par map and every language has some",
    "start": "2861880",
    "end": "2868400"
  },
  {
    "text": "variation of it um so that you can tell it explicitly that it's okay to go",
    "start": "2868400",
    "end": "2874000"
  },
  {
    "text": "parallel within an observable sequence and the schedulers allow you to access",
    "start": "2874000",
    "end": "2879400"
  },
  {
    "text": "thread pools or whatever you may choose and so the def by definition because you're using a functional style without",
    "start": "2879400",
    "end": "2886400"
  },
  {
    "text": "mutability you're able to be very free about uh about executing things in",
    "start": "2886400",
    "end": "2892040"
  },
  {
    "text": "parallel and using the full capacity of the number of cores on your machine by default if you just never even think",
    "start": "2892040",
    "end": "2898880"
  },
  {
    "text": "about it though it will just generally do the right thing um on your behalf and it will just use however many cores are",
    "start": "2898880",
    "end": "2903920"
  },
  {
    "text": "on the machine correctly uh can we use this on Android yes it is coded to Java 6 standards",
    "start": "2903920",
    "end": "2911960"
  },
  {
    "text": "which work on uh so we're keeping it that level specifically so it works on Android obviously you don't get the",
    "start": "2911960",
    "end": "2918000"
  },
  {
    "text": "niceties of lambdas but um there are some pretty big names such as SoundCloud who are using this in production on",
    "start": "2918000",
    "end": "2923319"
  },
  {
    "text": "their app on the on Android and they've written some really great articles about it and done some presentations on it if",
    "start": "2923319",
    "end": "2928760"
  },
  {
    "text": "you wanted to go just search for search for SoundCloud RX Java and uh I know",
    "start": "2928760",
    "end": "2934799"
  },
  {
    "text": "there's some others at some other fairly large companies I don't think they're in production yet but they're kind of following the lead of what soundcloud's",
    "start": "2934799",
    "end": "2940960"
  },
  {
    "text": "done on Android okay I don't understand this question but how would you create a",
    "start": "2940960",
    "end": "2946079"
  },
  {
    "text": "bracket bird a bracket bird y good question you got me you can come talk to",
    "start": "2946079",
    "end": "2952880"
  },
  {
    "text": "me after okay I think we'll we'll bring the questions to a close so let's than then",
    "start": "2952880",
    "end": "2958880"
  },
  {
    "text": "again [Applause]",
    "start": "2958880",
    "end": "2966949"
  }
]