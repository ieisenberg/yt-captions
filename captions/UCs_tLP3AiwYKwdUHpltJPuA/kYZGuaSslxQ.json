[
  {
    "text": "so uh let me start by introducing you to Sid Sid is a Beagle from Austin Texas",
    "start": "4440",
    "end": "13799"
  },
  {
    "text": "and he has this thing I don't know if it's a fetish or just something he does where he just he likes to hold food in",
    "start": "13799",
    "end": "20880"
  },
  {
    "text": "his mouth he doesn't eat it he just holds it there just sitting there wagging his tail and and salivating a",
    "start": "20880",
    "end": "26400"
  },
  {
    "text": "lot actually uh if you notice just before the video Loops right at the",
    "start": "26400",
    "end": "32558"
  },
  {
    "text": "corner of his Map There's a bit of drool coming out like right there did you see",
    "start": "32559",
    "end": "38120"
  },
  {
    "text": "it it's amazing so essentially right there s is the most",
    "start": "38120",
    "end": "45520"
  },
  {
    "text": "excited creature in the whole world I think which which is why I picked this",
    "start": "45520",
    "end": "50600"
  },
  {
    "text": "this gift to open my talk because I really excited about this thing in in in",
    "start": "50600",
    "end": "55840"
  },
  {
    "text": "uh JavaScript in es6 called generators and and Sid definitely mirrors my excitement here let's get",
    "start": "55840",
    "end": "62640"
  },
  {
    "text": "back to S later so I would like to show you generators but to get there I need to",
    "start": "62640",
    "end": "68320"
  },
  {
    "text": "show you another new thing in n6 which is called iterator and essentially",
    "start": "68320",
    "end": "76439"
  },
  {
    "text": "so you have aray in JavaScript right and the way you would dis rased",
    "start": "76439",
    "end": "82400"
  },
  {
    "text": "over them is you would probably use something like a for leap if you're a functional programming you might go",
    "start": "82400",
    "end": "88240"
  },
  {
    "text": "like a fold or whatever but a new thing in n6 is sort",
    "start": "88240",
    "end": "94759"
  },
  {
    "text": "of a standardized way of of of iterating of recollection",
    "start": "94759",
    "end": "99960"
  },
  {
    "text": "and there is now a method on arrays for instance called values which will get",
    "start": "99960",
    "end": "106840"
  },
  {
    "text": "you an iterator object for iterating over the array and",
    "start": "106840",
    "end": "112719"
  },
  {
    "text": "essentially what that is if I store it somewhere it has a method called next on",
    "start": "112719",
    "end": "118640"
  },
  {
    "text": "it which you can call and it will give you an object containing uh the first",
    "start": "118640",
    "end": "124159"
  },
  {
    "text": "value of the array that's Apple Jack and",
    "start": "124159",
    "end": "129160"
  },
  {
    "text": "a property called done which will be a Boolean telling you whether or not you're done is",
    "start": "129160",
    "end": "134640"
  },
  {
    "text": "racing and you can keep calling that you get flutter sh you get Pinky Pie you get Rainbow Dash you get Rarity you Twilight",
    "start": "134640",
    "end": "140480"
  },
  {
    "text": "Sparkle and you are done so that was a lot of",
    "start": "140480",
    "end": "145719"
  },
  {
    "text": "Point uh what's the rapple it's uh something I WR",
    "start": "145840",
    "end": "151280"
  },
  {
    "text": "no big deal um so anything that has iterate is",
    "start": "151280",
    "end": "158879"
  },
  {
    "text": "or is iterable there is a new for",
    "start": "158879",
    "end": "165000"
  },
  {
    "text": "construct letter I of ponies that you can use to to uh get a for Loop of",
    "start": "165920",
    "end": "172519"
  },
  {
    "text": "everything that is iterable so I can go like console logi",
    "start": "172519",
    "end": "180519"
  },
  {
    "text": "which should get me a list of all six bonies it's very nice so that's the",
    "start": "180519",
    "end": "187040"
  },
  {
    "text": "basics of was an is race race a race at least oh what's",
    "start": "187040",
    "end": "193560"
  },
  {
    "text": "IDE stop go back there we are",
    "start": "195959",
    "end": "201519"
  },
  {
    "text": "so computers you know what it is okay so I didn't test that just use",
    "start": "201519",
    "end": "208920"
  },
  {
    "text": "that a mind right sorry about that so um so we have iterated of arrays but the",
    "start": "208920",
    "end": "215280"
  },
  {
    "text": "iterator is is really just an arbitrary interface it just essentially is",
    "start": "215280",
    "end": "220760"
  },
  {
    "text": "something that can give you an iterator object with the next method so you can Implement uh iterables and iterators",
    "start": "220760",
    "end": "228120"
  },
  {
    "text": "anyway you like really can I made a little custom one here uh essentially a very simple State machine which uh",
    "start": "228120",
    "end": "237000"
  },
  {
    "text": "starts at the number zero and the first time you next for it increments to one it gets you Pinkie Pie then it",
    "start": "237000",
    "end": "243319"
  },
  {
    "text": "increments to two it gets you Rainbow Dash and then I couldn't be asked to put put in more pennies but you get the",
    "start": "243319",
    "end": "248599"
  },
  {
    "text": "idea so you'll notice there is a symbol do iterator method this is another new",
    "start": "248599",
    "end": "255200"
  },
  {
    "text": "feature in in es6 called symbols which are essentially exactly like symbols in",
    "start": "255200",
    "end": "260680"
  },
  {
    "text": "lisp and and symbols in addition to Strings and numbers can be keys on",
    "start": "260680",
    "end": "265840"
  },
  {
    "text": "JavaScript objects and they've decided for whatever reason that iterator should be the method name for",
    "start": "265840",
    "end": "273720"
  },
  {
    "text": "getting you an iterator out of something that is iterable so un iterable is any object that has a symbol iterator method",
    "start": "273720",
    "end": "281360"
  },
  {
    "text": "so we can go on our custom iterable Sy do",
    "start": "281360",
    "end": "290400"
  },
  {
    "text": "iterator and we call that function we should get an iterator and I call I do",
    "start": "290759",
    "end": "296880"
  },
  {
    "text": "next c is now zero it's not one it says Pinkie Pie it's not",
    "start": "296880",
    "end": "303360"
  },
  {
    "text": "two it says Remo Dash and we're done so yay we can write",
    "start": "303360",
    "end": "308880"
  },
  {
    "text": "custom um iterators some of them could be more useful than this like say here's",
    "start": "308880",
    "end": "316160"
  },
  {
    "text": "my Infinity iterator that is essentially um anator",
    "start": "316160",
    "end": "321759"
  },
  {
    "text": "that would come forever so if we go infinity symbol do iterator",
    "start": "321759",
    "end": "331639"
  },
  {
    "text": "and we go on next and it goes goes on like that",
    "start": "332199",
    "end": "337440"
  },
  {
    "text": "forever of course you can also do a for Loop over",
    "start": "337440",
    "end": "342240"
  },
  {
    "text": "this what you think do I press return that actually going to crash my",
    "start": "345479",
    "end": "351880"
  },
  {
    "text": "browser and since that since this is uh a Chromebook that means I crashed the entire operating system so let's not",
    "start": "351880",
    "end": "361639"
  },
  {
    "text": "so this is where I should probably introduce it to to a little amendment I made to JavaScript in my rapper",
    "start": "361840",
    "end": "368160"
  },
  {
    "text": "essentially if I start a line with an ENT and I give",
    "start": "368160",
    "end": "374440"
  },
  {
    "text": "it um aable it will resolve it for me but only",
    "start": "374440",
    "end": "379919"
  },
  {
    "text": "up to 10 values so that's the safe version of this but essentially what I got here is",
    "start": "379919",
    "end": "387280"
  },
  {
    "text": "I've got a la sequence and that's if you're doing functional",
    "start": "387280",
    "end": "393199"
  },
  {
    "text": "programming that could be fairly useful like say um if you're doing closure closure has three main selling points",
    "start": "393199",
    "end": "398560"
  },
  {
    "text": "right it's got uh persistent data structures it's got lazy sequences and it's got lots of",
    "start": "398560",
    "end": "404360"
  },
  {
    "text": "parentheses so we're at one three in JavaScript now actually we could go like",
    "start": "404360",
    "end": "410360"
  },
  {
    "text": "I don't know you can certainly add the parentheses in if you like as well and",
    "start": "410360",
    "end": "416319"
  },
  {
    "text": "so we're nearly at closure at this point um more usefully though we",
    "start": "416319",
    "end": "423199"
  },
  {
    "text": "could perhaps build a little library of of functions that work in iterators they",
    "start": "423199",
    "end": "429120"
  },
  {
    "text": "will have a take function because right now if we try and and get all over infinity that's not going to work out",
    "start": "429120",
    "end": "435879"
  },
  {
    "text": "say well so supp we have a take function instead so we can go like take five out",
    "start": "435879",
    "end": "441039"
  },
  {
    "text": "of infinity that gets us 0 to four that's",
    "start": "441039",
    "end": "448000"
  },
  {
    "text": "cool it's a bit boiler platey but it works we",
    "start": "448000",
    "end": "453160"
  },
  {
    "text": "could go further we could have a map function we could go like",
    "start": "453160",
    "end": "459080"
  },
  {
    "text": "map uh I to I + 5",
    "start": "459080",
    "end": "464199"
  },
  {
    "text": "over take five out of infinity and that gets us um essentially",
    "start": "464199",
    "end": "472240"
  },
  {
    "text": "five numbers starting with five and counting up once we could even just do this over",
    "start": "472240",
    "end": "479000"
  },
  {
    "text": "infinity and it will take uh 10 numbers out of that and it doesn't compute the values",
    "start": "479000",
    "end": "487000"
  },
  {
    "text": "for the rest of them of course because we are having lazy sequences here they're composable you'll notice I fed",
    "start": "487000",
    "end": "493199"
  },
  {
    "text": "the result of T which is an iterator into map and that goes us the inator out",
    "start": "493199",
    "end": "498960"
  },
  {
    "text": "with the function applied so it works it's expected that's quite",
    "start": "498960",
    "end": "504280"
  },
  {
    "text": "useful now the problem though is these functions are really ugly there's a lot",
    "start": "504280",
    "end": "510319"
  },
  {
    "text": "of boiler going on you got a function that returns an object that has a symbol AS iterator method which is a function",
    "start": "510319",
    "end": "517560"
  },
  {
    "text": "that returns an object and so on and it's just it's like being back in Java isn't",
    "start": "517560",
    "end": "522959"
  },
  {
    "text": "it so um pause for a second just to rest",
    "start": "522959",
    "end": "529680"
  },
  {
    "text": "your mind with s that said with bacon still looking quite pleased",
    "start": "529680",
    "end": "536760"
  },
  {
    "text": "um but let's move on to generators so these iterators are amazingly useful",
    "start": "536760",
    "end": "545360"
  },
  {
    "text": "because they give you things like La sequences but um kind of sucks to write",
    "start": "545360",
    "end": "550560"
  },
  {
    "text": "them in this way this is where generators come in essentially the um a",
    "start": "550560",
    "end": "556240"
  },
  {
    "text": "special sort of function that helps you WR iterate it",
    "start": "556240",
    "end": "561360"
  },
  {
    "text": "like the special sort that's a function with a star on it and it can take arguments as",
    "start": "561519",
    "end": "567760"
  },
  {
    "text": "usual and so let's reimplement Infinity using iterators sort of the same thing",
    "start": "567760",
    "end": "574519"
  },
  {
    "text": "except without the boiler plate I start out with number zero and I go into an infinite Loop what",
    "start": "574519",
    "end": "581399"
  },
  {
    "text": "true and I go yield C++ that means C and then increment C by",
    "start": "581399",
    "end": "587760"
  },
  {
    "text": "one it's not the language that would suck even more so um",
    "start": "587760",
    "end": "594480"
  },
  {
    "text": "what's going on here is essentially the yield statement is sort of like a return statement except",
    "start": "594480",
    "end": "600160"
  },
  {
    "text": "uh the function doesn't stop it just pauses at this point um it takes the value that you pass into",
    "start": "600160",
    "end": "606519"
  },
  {
    "text": "yield which is going to be C and it returns that as a result of the iterator when you when you call next so what you",
    "start": "606519",
    "end": "613399"
  },
  {
    "text": "get out better if I show you if I call this function what I get out is not",
    "start": "613399",
    "end": "622839"
  },
  {
    "text": "my browser going into an infinite Loop because the wild true it's an iterator and currently this this",
    "start": "622839",
    "end": "629440"
  },
  {
    "text": "function hasn't actually started running yet it sort of paused right at the start of it and the first time I call it it",
    "start": "629440",
    "end": "636880"
  },
  {
    "text": "starts running it assigns zero to the C and it",
    "start": "636880",
    "end": "642160"
  },
  {
    "text": "hits the loop one time three it will return zero and increment",
    "start": "642160",
    "end": "647639"
  },
  {
    "text": "C and at this point it's ped at the eel statement statement has told us to to",
    "start": "647639",
    "end": "655160"
  },
  {
    "text": "put the zero back out and now this function is posted and if I call it again it will continue running through",
    "start": "655160",
    "end": "661959"
  },
  {
    "text": "the infinite Loop and it goes on forever so that was the infinity um",
    "start": "661959",
    "end": "669880"
  },
  {
    "text": "iterator function without the boil plate implemented as a",
    "start": "669880",
    "end": "675160"
  },
  {
    "text": "generator and that was too",
    "start": "675160",
    "end": "680000"
  },
  {
    "text": "far actually yeah that's not let's not watch me reimplement these so these are",
    "start": "680519",
    "end": "686560"
  },
  {
    "text": "the take map functions implemented as uh generator functions",
    "start": "686560",
    "end": "692200"
  },
  {
    "text": "they work the same way except you'll notice a distinct lack of boiler plate",
    "start": "692200",
    "end": "697800"
  },
  {
    "text": "they're a lot easier to work with they work of course in the same way you can",
    "start": "697800",
    "end": "703800"
  },
  {
    "text": "go take five out of infinity and you get",
    "start": "703800",
    "end": "709200"
  },
  {
    "text": "first five numbers we can get them",
    "start": "709200",
    "end": "714800"
  },
  {
    "text": "up 5 + five I to take five out of infinity are my parentheses balanced no",
    "start": "714800",
    "end": "720959"
  },
  {
    "text": "they are and it has the same effect except now we're using generators",
    "start": "720959",
    "end": "727279"
  },
  {
    "text": "instead just a quick look at the implementation essentially whenever you have um so we're taking an iterator",
    "start": "727279",
    "end": "734839"
  },
  {
    "text": "in and we have a y Loop that keeps going until the iterator tells us it's",
    "start": "734839",
    "end": "739959"
  },
  {
    "text": "done in the case of infinity will be never but in the case of the take it's",
    "start": "739959",
    "end": "745680"
  },
  {
    "text": "whatever many values we put in",
    "start": "745680",
    "end": "750880"
  },
  {
    "text": "and that's the same thing except using generators now so generators are a nice",
    "start": "750880",
    "end": "757079"
  },
  {
    "text": "way of of helping us raise iterators that with bit of syntactic",
    "start": "757079",
    "end": "762519"
  },
  {
    "text": "sugar but we can go further",
    "start": "762519",
    "end": "768680"
  },
  {
    "text": "because we can have iterators where instead of just things coming out of them which is rather boring we can also",
    "start": "768680",
    "end": "776320"
  },
  {
    "text": "put things in like I've implemented this uh five up function which essentially",
    "start": "776320",
    "end": "783800"
  },
  {
    "text": "um will keep going forever and it will keep returning uh whatever you put into",
    "start": "783800",
    "end": "790680"
  },
  {
    "text": "it plus five you'll notice at this point we are actually storing the result of",
    "start": "790680",
    "end": "796120"
  },
  {
    "text": "the yield as if that is an expression and indeed let me just show you how that",
    "start": "796120",
    "end": "803160"
  },
  {
    "text": "works so when we call it we get an itat as usual and the first time we call it there's no",
    "start": "804519",
    "end": "812040"
  },
  {
    "text": "point in putting a value in because we haven't started running the function yet so we haven't gotten to the point where",
    "start": "812040",
    "end": "818399"
  },
  {
    "text": "we actually will assign this to something so the first thing that happens is we assign C to zero and we",
    "start": "818399",
    "end": "824399"
  },
  {
    "text": "use the zero so zero comes out and now we can start putting other things in",
    "start": "824399",
    "end": "830440"
  },
  {
    "text": "like next five we get a 10 back because that's 5 + 5 to that we can go like a",
    "start": "830440",
    "end": "838279"
  },
  {
    "text": "100 105 - 50 is - 45 you're starting to get",
    "start": "838279",
    "end": "844040"
  },
  {
    "text": "the idea not a number is null that's",
    "start": "844040",
    "end": "850120"
  },
  {
    "text": "interesting of course string five is 55 because why not",
    "start": "850120",
    "end": "856759"
  },
  {
    "text": "JavaScript and and so on the idea is these are actually two way generators",
    "start": "856759",
    "end": "863440"
  },
  {
    "text": "aren't just syntactic sugar for iterators they're actually real co-routines uh",
    "start": "863440",
    "end": "869600"
  },
  {
    "text": "so I'm sure that having seen this you're all pondering more useful applications",
    "start": "869600",
    "end": "875560"
  },
  {
    "text": "of this I'm sure that You' all uh thought the same thought that I had the first time I saw this what if we're put",
    "start": "875560",
    "end": "883759"
  },
  {
    "text": "in promises pause for Sid this a sid with",
    "start": "883759",
    "end": "891720"
  },
  {
    "text": "pizza I think that's his most famous performance cheering a bit on it there",
    "start": "891720",
    "end": "896759"
  },
  {
    "text": "cheating okay what if we put in promises so",
    "start": "896759",
    "end": "903399"
  },
  {
    "text": "promises in in is6 um promises are now standard in E6",
    "start": "903399",
    "end": "910360"
  },
  {
    "text": "and essentially promises are an attempt at getting getting us out of call back hell if you've seen any sort of node",
    "start": "911440",
    "end": "918720"
  },
  {
    "text": "code you know that that starts to look a bit nasty so promises is sort of a form's way of doing asynchronous",
    "start": "918720",
    "end": "925240"
  },
  {
    "text": "operations and so let me just so I've got this unit function here which creates the promise",
    "start": "925240",
    "end": "932360"
  },
  {
    "text": "that's already resolved so if I got unit of five I get a",
    "start": "932360",
    "end": "937399"
  },
  {
    "text": "promise and my erson trick also extends to promises it will resol the promise",
    "start": "937399",
    "end": "943319"
  },
  {
    "text": "and print the result value so this should be five yeah and they take premises have a method",
    "start": "943319",
    "end": "951880"
  },
  {
    "text": "called then which is essentially for registering a call back for when the promise has",
    "start": "951880",
    "end": "957440"
  },
  {
    "text": "resolved so I can know something like this to log five when we have a",
    "start": "957440",
    "end": "964560"
  },
  {
    "text": "value and suppose we have something",
    "start": "964560",
    "end": "971600"
  },
  {
    "text": "like a generator function which",
    "start": "971600",
    "end": "978160"
  },
  {
    "text": "yields promises like just a couple of common common words in strings like",
    "start": "978160",
    "end": "985360"
  },
  {
    "text": "OMG WTF pbq like normal words uh so what",
    "start": "986959",
    "end": "996160"
  },
  {
    "text": "if I iterate over this so the first next of course it's just a primate we should",
    "start": "997959",
    "end": "1003399"
  },
  {
    "text": "get a promise out you'll notice it's it's fulfilled OMG so it would",
    "start": "1003399",
    "end": "1009800"
  },
  {
    "text": "expect us to resolve it with OMG calling the value that came out of the",
    "start": "1009800",
    "end": "1015880"
  },
  {
    "text": "promise uh or passing the value that came out of the promise to the iterator so it will then hit the first",
    "start": "1015880",
    "end": "1023519"
  },
  {
    "text": "con log logg and give give us the next promise art",
    "start": "1023519",
    "end": "1028600"
  },
  {
    "text": "WTF it's a nasty word so let's go L instead and it will look",
    "start": "1028600",
    "end": "1035640"
  },
  {
    "text": "L our our promises function didn't know that we actually passed something else",
    "start": "1035640",
    "end": "1040720"
  },
  {
    "text": "back that's that's irrelevant at this point we could go completely crer we can go like negative infinity and it would",
    "start": "1040720",
    "end": "1047798"
  },
  {
    "text": "look negative Infinity this point note it's done it returns done true because we ran out of",
    "start": "1047799",
    "end": "1054160"
  },
  {
    "text": "promises so we could we could sort",
    "start": "1054160",
    "end": "1059640"
  },
  {
    "text": "of um not do this manually we could make make a function called run which simply takes one of these",
    "start": "1059640",
    "end": "1067799"
  },
  {
    "text": "iterators and does this whole process for us waiting for a promise to resolve",
    "start": "1067799",
    "end": "1073160"
  },
  {
    "text": "than continuing iterator when it does so I'm going to implement that",
    "start": "1073160",
    "end": "1079879"
  },
  {
    "text": "first we Prime the iterator notice what I'm doing here um I'm going to be doing",
    "start": "1082559",
    "end": "1087679"
  },
  {
    "text": "a bit of recursion here so um this is another new feature in E6 uh where I give the second argument a default value",
    "start": "1087679",
    "end": "1095120"
  },
  {
    "text": "so if you call it without a second argument it will be initialized to n and",
    "start": "1095120",
    "end": "1100840"
  },
  {
    "text": "because the first time we call the iterator it's irrelevant what we pass in it's not going to actually use it for",
    "start": "1100840",
    "end": "1107559"
  },
  {
    "text": "anything that work out and the second time we call it we we just recurse on the on the Val and values will be",
    "start": "1107559",
    "end": "1114720"
  },
  {
    "text": "inserted so if we are not done yet",
    "start": "1114720",
    "end": "1120679"
  },
  {
    "text": "then we take the promise that's an exit value and we call then on it to register",
    "start": "1120679",
    "end": "1126480"
  },
  {
    "text": "a call back and that's a function that takes the result and calls run on the iterator",
    "start": "1126480",
    "end": "1134559"
  },
  {
    "text": "and the next result",
    "start": "1134559",
    "end": "1138520"
  },
  {
    "text": "now if we go run",
    "start": "1139880",
    "end": "1145640"
  },
  {
    "text": "promises it does what we expect but notice what's happened here",
    "start": "1145880",
    "end": "1151400"
  },
  {
    "text": "these are actually I mean they're free result but they are asynchronous functions we are we are getting there",
    "start": "1151400",
    "end": "1156840"
  },
  {
    "text": "through callbacks but this code isn't callback held this code isn't even promis held",
    "start": "1156840",
    "end": "1163480"
  },
  {
    "text": "this looks just like synchronous code like blocking I",
    "start": "1163480",
    "end": "1169559"
  },
  {
    "text": "and the gooday of c and Java except the use statement tells us we have to wait",
    "start": "1169559",
    "end": "1174640"
  },
  {
    "text": "for this thing to finish so that's pretty cool we can go further so there's",
    "start": "1174640",
    "end": "1179880"
  },
  {
    "text": "a new thing in in in not is6 but in in browsers in general called the fetch",
    "start": "1179880",
    "end": "1187360"
  },
  {
    "text": "API and that replaces um the wonderfully named XML uh HTTP request which is how",
    "start": "1187360",
    "end": "1195080"
  },
  {
    "text": "you would make um HTTP requests in the old",
    "start": "1195080",
    "end": "1200200"
  },
  {
    "text": "days um what it does let me show",
    "start": "1200200",
    "end": "1206520"
  },
  {
    "text": "you is it just takes um a URL and it will return as a promise which will",
    "start": "1206520",
    "end": "1213440"
  },
  {
    "text": "resolve to the contents of that Ur actually what it resols to is a response",
    "start": "1213440",
    "end": "1219000"
  },
  {
    "text": "object which should have a method called text which will return",
    "start": "1219000",
    "end": "1226960"
  },
  {
    "text": "another promise with the actual content as a text string so this is the first paragraph of",
    "start": "1226960",
    "end": "1236679"
  },
  {
    "text": "the famous literary work forart Equestria which is a mashup of uh a",
    "start": "1236679",
    "end": "1242240"
  },
  {
    "text": "fanfiction mashup of uh The Fallout franchise and My Little Pony because why",
    "start": "1242240",
    "end": "1248080"
  },
  {
    "text": "not um it's actually a wonderful novel you should absolutely read it kept me captivated for a very long time might",
    "start": "1248080",
    "end": "1254840"
  },
  {
    "text": "just be me I don't know um so anyway",
    "start": "1254840",
    "end": "1260000"
  },
  {
    "text": "we can actually try our own function on on this fetch API thing because we are able",
    "start": "1260000",
    "end": "1268559"
  },
  {
    "text": "to resolve promises now so let's see what happens uh whoa oh my",
    "start": "1268559",
    "end": "1276399"
  },
  {
    "text": "CS so first we get the response object by yielding on a regular",
    "start": "1276799",
    "end": "1285559"
  },
  {
    "text": "f a text and then we need to get the text out of",
    "start": "1286320",
    "end": "1291559"
  },
  {
    "text": "the response so that's yield response to",
    "start": "1291559",
    "end": "1297840"
  },
  {
    "text": "text and then finally we can so look",
    "start": "1297840",
    "end": "1302640"
  },
  {
    "text": "that so we now have what",
    "start": "1303600",
    "end": "1309679"
  },
  {
    "text": "hopefully will be for out a bit of legitimate asynchronous IO",
    "start": "1309679",
    "end": "1318679"
  },
  {
    "text": "but it's written uh in a style that looks completely synchronized no call back in site and it",
    "start": "1318679",
    "end": "1327960"
  },
  {
    "text": "works it's quite neat I think so one problem though",
    "start": "1328159",
    "end": "1334720"
  },
  {
    "text": "um we're not able to deal with return values from this we actually have to do a console log at the end which is sort",
    "start": "1334720",
    "end": "1340640"
  },
  {
    "text": "of not ideal so wonder if we could change the Run function a bit so we're able to generalize",
    "start": "1340640",
    "end": "1347200"
  },
  {
    "text": "this so so essentially we want to return a value when we are done iterating so if",
    "start": "1347200",
    "end": "1353960"
  },
  {
    "text": "we put a return statement in in the generator we should get a value out so",
    "start": "1353960",
    "end": "1361159"
  },
  {
    "text": "what Ren should actually do is it should return a promise that's going to resolve to this eventual return value so I'm",
    "start": "1361159",
    "end": "1367520"
  },
  {
    "text": "just going to add another default argument which is going to be a deferred",
    "start": "1367520",
    "end": "1375679"
  },
  {
    "text": "promise and going to expand the if statement a bit oh and we",
    "start": "1375679",
    "end": "1382720"
  },
  {
    "text": "should also of course keep passing that on when we are",
    "start": "1382720",
    "end": "1388919"
  },
  {
    "text": "recursing and so when we are not done we keep feeding values back into the the",
    "start": "1388919",
    "end": "1394039"
  },
  {
    "text": "iterator when we are done then there is a property on on the",
    "start": "1394039",
    "end": "1399480"
  },
  {
    "text": "generator function where if you actually return something at the end of it you don't just get the done true object you",
    "start": "1399480",
    "end": "1405200"
  },
  {
    "text": "get the done true object with a value and we're going to take the value out and we're going to resolve the",
    "start": "1405200",
    "end": "1411440"
  },
  {
    "text": "promise with that value next to value and at the end of course we have",
    "start": "1411440",
    "end": "1418640"
  },
  {
    "text": "to return the promise that we're eventually going to",
    "start": "1418640",
    "end": "1424120"
  },
  {
    "text": "resolve so this should allow",
    "start": "1424120",
    "end": "1429400"
  },
  {
    "text": "us to write a completely generic function for fetching a piece of text",
    "start": "1429400",
    "end": "1437960"
  },
  {
    "text": "so a generator function which takes an argument with the URL that we want to",
    "start": "1438840",
    "end": "1444039"
  },
  {
    "text": "fetch [Music] and let's just dive straight in and write some",
    "start": "1444039",
    "end": "1450559"
  },
  {
    "text": "nice looking HC code here instead of actually just storing the the intermediate values I'm just going to",
    "start": "1450559",
    "end": "1456480"
  },
  {
    "text": "use them directly just L State",
    "start": "1456480",
    "end": "1461640"
  },
  {
    "text": "ones that's about the same thing except without uh storing the response in the text anywhere Point Freestyle",
    "start": "1462799",
    "end": "1470520"
  },
  {
    "text": "right um so let's see if this thing work I should now be able to",
    "start": "1470520",
    "end": "1477520"
  },
  {
    "text": "run fatch texts with an arbitrary value",
    "start": "1477520",
    "end": "1483480"
  },
  {
    "text": "that's the text and it should now actually uh give",
    "start": "1483480",
    "end": "1489279"
  },
  {
    "text": "us a promise that it's going to resolve directly to the contents of that file",
    "start": "1489279",
    "end": "1495360"
  },
  {
    "text": "and we're going the Ampersand of course prints the value of that promise and oh that's private I'm sorry that's not the",
    "start": "1495360",
    "end": "1501960"
  },
  {
    "text": "Fallout text it's actually I was writing a novel I don't think it's I don't",
    "start": "1501960",
    "end": "1508080"
  },
  {
    "text": "know no uh that's for much",
    "start": "1508080",
    "end": "1516200"
  },
  {
    "text": "better so at least now I I proved that I I can both arbitrary URLs and and get",
    "start": "1516200",
    "end": "1521919"
  },
  {
    "text": "the contents of that you're allowed it's not hardcoded to fall out anymore so",
    "start": "1521919",
    "end": "1530080"
  },
  {
    "text": "we are now doing a synchronous iio fairly",
    "start": "1530080",
    "end": "1536600"
  },
  {
    "text": "neatly we've even we we were even able to to write generic functions that we",
    "start": "1536600",
    "end": "1542240"
  },
  {
    "text": "can compose uh using this technique it's pretty cool um it's not restricted to",
    "start": "1542240",
    "end": "1549440"
  },
  {
    "text": "just doing it like I with promises day suppose we have",
    "start": "1549440",
    "end": "1554720"
  },
  {
    "text": "this function here called things which",
    "start": "1554720",
    "end": "1560039"
  },
  {
    "text": "essentially I have an object called ponies which contain two ponies p and dash KY p and dash so this function",
    "start": "1560039",
    "end": "1567760"
  },
  {
    "text": "should return the fact that Rainbow Dash is friend with",
    "start": "1567760",
    "end": "1574200"
  },
  {
    "text": "Pinkie things so this Rainbow Dash is friends with Pinkie now",
    "start": "1576880",
    "end": "1583799"
  },
  {
    "text": "suppose that instead of Pinky Pine we are interested in Twilight Sparkle who is also coincidentally rh's",
    "start": "1583799",
    "end": "1591000"
  },
  {
    "text": "friend of course H pule is not in the object so what does JavaScript",
    "start": "1591000",
    "end": "1596240"
  },
  {
    "text": "do of course um it should catch this at compile time right it's an obvious type",
    "start": "1596240",
    "end": "1602240"
  },
  {
    "text": "error yeah so at least we should get a runtime",
    "start": "1602240",
    "end": "1607279"
  },
  {
    "text": "error because obviously the JavaScript runtime is able to detect that the key Twi is not in the object actually",
    "start": "1607279",
    "end": "1615200"
  },
  {
    "text": "Rainbow Dash is friends with undefined the joys of",
    "start": "1615200",
    "end": "1621240"
  },
  {
    "text": "JavaScript um what I'd actually like to do is I'd like to handle this this uh",
    "start": "1621240",
    "end": "1626840"
  },
  {
    "text": "problem if not more gracefully then at least I'd like to handle it so I'm going",
    "start": "1626840",
    "end": "1631880"
  },
  {
    "text": "to introduce um something that looks like a promise it'll have a then method but behaves",
    "start": "1631880",
    "end": "1638480"
  },
  {
    "text": "slightly differently going to call it maybe it takes a value and it returns",
    "start": "1638480",
    "end": "1646799"
  },
  {
    "text": "um some thing V shaped like promise it has a then method which of course takes a callback",
    "start": "1646799",
    "end": "1653320"
  },
  {
    "text": "function and now um what I want to do if this value is null or",
    "start": "1653320",
    "end": "1662200"
  },
  {
    "text": "undefined then I should like to do nothing but if it is something I should like to just return the value directly",
    "start": "1662200",
    "end": "1670760"
  },
  {
    "text": "so if it's uh not equal to null in JavaScript p uh the tri Tri",
    "start": "1670760",
    "end": "1678399"
  },
  {
    "text": "equals which J would tenden you to always use will uh match this with null",
    "start": "1678399",
    "end": "1684640"
  },
  {
    "text": "the double equals in this case which you you should never use in any other case will match to null or undefined which is",
    "start": "1684640",
    "end": "1690880"
  },
  {
    "text": "what I want so if it is not n null or undefined I want to call the function",
    "start": "1690880",
    "end": "1695960"
  },
  {
    "text": "with a value that is stored inside the maybe inside this closure and if it is",
    "start": "1695960",
    "end": "1701760"
  },
  {
    "text": "null I just want to not call the function and just go null as a return value so essentially",
    "start": "1701760",
    "end": "1708679"
  },
  {
    "text": "processing will stop at this point the call back will never be called it's just going to vanish out in the void and",
    "start": "1708679",
    "end": "1714559"
  },
  {
    "text": "eventually hopefully get garbage collected",
    "start": "1714559",
    "end": "1719919"
  },
  {
    "text": "uh well yeah Samy",
    "start": "1720159",
    "end": "1725960"
  },
  {
    "text": "Cen it was a reflex I said Douglas crockford and I automatically added the Sami Cen I thought I",
    "start": "1725960",
    "end": "1732159"
  },
  {
    "text": "forgotten so that's not what I wanted to show you so maybe five",
    "start": "1732159",
    "end": "1738679"
  },
  {
    "text": "if I resolve it is five if I chain that with maybe of six",
    "start": "1738679",
    "end": "1745200"
  },
  {
    "text": "it should resolve to six now if I change the five to a",
    "start": "1745200",
    "end": "1750240"
  },
  {
    "text": "null it should get us a null and no final",
    "start": "1750240",
    "end": "1756440"
  },
  {
    "text": "result if I change it to string null I honestly I'm not sure what will",
    "start": "1756440",
    "end": "1762960"
  },
  {
    "text": "happen in JavaScript this is such a wonderful language is that is that actually um null",
    "start": "1762960",
    "end": "1768880"
  },
  {
    "text": "value now I get the six out so evidently string null is surprisingly not",
    "start": "1768880",
    "end": "1776679"
  },
  {
    "text": "null um so that's how the maybe Works I'd also like to add a prop",
    "start": "1778080",
    "end": "1783799"
  },
  {
    "text": "function which takes advantage of this it will be a function that takes a key",
    "start": "1783799",
    "end": "1789880"
  },
  {
    "text": "and an object and it will return us a maybe of the contents of that key",
    "start": "1789880",
    "end": "1798840"
  },
  {
    "text": "now I can rewrite the things function um",
    "start": "1798840",
    "end": "1804519"
  },
  {
    "text": "to instead of just getting pony dash out I should like to",
    "start": "1804519",
    "end": "1811760"
  },
  {
    "text": "yield on the prop call with Dash on",
    "start": "1811760",
    "end": "1818760"
  },
  {
    "text": "ponies and do the same thing here except not Dash but",
    "start": "1818799",
    "end": "1825559"
  },
  {
    "text": "pi and then go return Dash as fr with Pi",
    "start": "1825559",
    "end": "1832679"
  },
  {
    "text": "Pi so now if I run",
    "start": "1832679",
    "end": "1836840"
  },
  {
    "text": "it it says rainbow Das with Pinkie Pie so in the correct case it still works",
    "start": "1838480",
    "end": "1843720"
  },
  {
    "text": "now if I go to Y I should be getting nothing instead of",
    "start": "1843720",
    "end": "1852440"
  },
  {
    "text": "getting the unpredictable error so I mean this isn't a great way of handling it what I'd actually like is to get an",
    "start": "1852440",
    "end": "1858639"
  },
  {
    "text": "error and a promise can return an error and I could extend the Run function to deal with that but I'm not going to",
    "start": "1858639",
    "end": "1864279"
  },
  {
    "text": "leave that as an exercise for you if you want to do it but at least I'm not getting um getting into a strange State",
    "start": "1864279",
    "end": "1870559"
  },
  {
    "text": "instead of of that I'm just doing nothing nothing is",
    "start": "1870559",
    "end": "1875639"
  },
  {
    "text": "happening so I've shown you that uh I can use the Run function with things that aren't just",
    "start": "1875639",
    "end": "1881080"
  },
  {
    "text": "uh just IO operations it's remarkably flexible where you can do with a thing but maybe",
    "start": "1881080",
    "end": "1887120"
  },
  {
    "text": "it's it's as simple as example so let's summarize this is what an a",
    "start": "1887120",
    "end": "1893679"
  },
  {
    "text": "incorporation looks like in in JavaScript it's just something which has a then method which will take a callback",
    "start": "1893679",
    "end": "1899440"
  },
  {
    "text": "function which will eventually receive a value of type A this is typescript notation",
    "start": "1899440",
    "end": "1905000"
  },
  {
    "text": "incidentally uh this is for a ace incorporation of type A the callout",
    "start": "1905000",
    "end": "1911120"
  },
  {
    "text": "function will will receive a value of type A and it should return a promise of",
    "start": "1911120",
    "end": "1917240"
  },
  {
    "text": "type B uh the then function will also",
    "start": "1917240",
    "end": "1922279"
  },
  {
    "text": "immediately return a promise that will eventually resolve to the type B that you return from the comback",
    "start": "1922279",
    "end": "1928840"
  },
  {
    "text": "function we can add the uh unit function that I showed you earlier to get to get straight into a promise uh value that",
    "start": "1928840",
    "end": "1935760"
  },
  {
    "text": "has a resolved value of type A",
    "start": "1935760",
    "end": "1941679"
  },
  {
    "text": "and now we got the shape of the promise so let's review we chain",
    "start": "1941679",
    "end": "1948519"
  },
  {
    "text": "operations using then this is uh straight promises we can make the then chains go",
    "start": "1948519",
    "end": "1954360"
  },
  {
    "text": "by using yield combining it with with our run function and this is where it gets a little more interesting than just promises because this allows us to",
    "start": "1954360",
    "end": "1961600"
  },
  {
    "text": "forget that we eracing just putting the Y keyword in what where you need to actually wait for a value and you'll",
    "start": "1961600",
    "end": "1967279"
  },
  {
    "text": "write code um straight up synchronous looking",
    "start": "1967279",
    "end": "1972880"
  },
  {
    "text": "um imperative looking blocking looking what have you and it it is actually a",
    "start": "1972880",
    "end": "1977919"
  },
  {
    "text": "think it works very neatly in JavaScript that's was a bit of a revelation to me that you can do this um",
    "start": "1977919",
    "end": "1985559"
  },
  {
    "text": "and as I as I showed you with a maybe we can do this with anything that has a then method it doesn't need to be like a",
    "start": "1985559",
    "end": "1991080"
  },
  {
    "text": "specific acing fetch operation or anything like that because it have changeed the semantics a little bit of",
    "start": "1991080",
    "end": "1996399"
  },
  {
    "text": "it using things like maybe so imagine the world without",
    "start": "1996399",
    "end": "2003519"
  },
  {
    "text": "callbacks this is note imagine at least if if node uh API",
    "start": "2003519",
    "end": "2010120"
  },
  {
    "text": "functions return promises so this is how you would now write um a function that",
    "start": "2010120",
    "end": "2016039"
  },
  {
    "text": "reads two files aex and BX takes the contents of these files concat them",
    "start": "2016039",
    "end": "2021840"
  },
  {
    "text": "together and writes them out in a file called both. text it will look a lot nastier in in",
    "start": "2021840",
    "end": "2028159"
  },
  {
    "text": "regular coolback style node now I can do this instead that is quite a Brave New World",
    "start": "2028159",
    "end": "2035799"
  },
  {
    "text": "Isn't it actually it's just like in hll this is the exact same thing in hll",
    "start": "2035799",
    "end": "2043880"
  },
  {
    "text": "read a file aex and file B text and you conate them and get both text out and",
    "start": "2043880",
    "end": "2049000"
  },
  {
    "text": "they have sort of the same syntax this this do thing which is sort of like a run function couple with a with a",
    "start": "2049000",
    "end": "2055040"
  },
  {
    "text": "generator and the thing with hll is it's all callbacks because H is this special",
    "start": "2055040",
    "end": "2062200"
  },
  {
    "text": "property that no side effects are allowed so a function is not allowed to cause the side effect the only thing he",
    "start": "2062200",
    "end": "2068240"
  },
  {
    "text": "allowed to do is return a value based on his inputs which means that all side effects",
    "start": "2068240",
    "end": "2074480"
  },
  {
    "text": "must be async essentially when you want to do an i operation in hll um you will",
    "start": "2074480",
    "end": "2080320"
  },
  {
    "text": "return a value that will arrange with a run time to eventually produce a result and call a",
    "start": "2080320",
    "end": "2087800"
  },
  {
    "text": "call back that you've passed to it to let you process the result of the the",
    "start": "2087800",
    "end": "2093760"
  },
  {
    "text": "operation it has to be like this in hll this is something that that H has been",
    "start": "2093760",
    "end": "2099240"
  },
  {
    "text": "doing for almost 25 years now is not new and unique node uh they were actually there 25",
    "start": "2099240",
    "end": "2106480"
  },
  {
    "text": "years ago they hadn't figured out this do notation bit yet this is no callback actually hell's callback H was a little",
    "start": "2106480",
    "end": "2113240"
  },
  {
    "text": "nastier call was was neat compared to what haon used to do before they figured",
    "start": "2113240",
    "end": "2118760"
  },
  {
    "text": "out how to do iio properly and there was one man in particular who proposed the solution for",
    "start": "2118760",
    "end": "2126280"
  },
  {
    "text": "this I've actually photoshopped his head onto this um painting from maybe dick",
    "start": "2126280",
    "end": "2133040"
  },
  {
    "text": "this is Philip wooder um hunting the great white whale",
    "start": "2133040",
    "end": "2138440"
  },
  {
    "text": "hunting the solution to to Asing goo in hll and this the solution that he came",
    "start": "2138440",
    "end": "2143960"
  },
  {
    "text": "up with of course was",
    "start": "2143960",
    "end": "2148000"
  },
  {
    "text": "moats and I know what you're thinking right now oh my God she's going to do monad tutorial isn't",
    "start": "2149200",
    "end": "2154520"
  },
  {
    "text": "she thing is though this is a monad in has it's something that has these two",
    "start": "2154520",
    "end": "2162160"
  },
  {
    "text": "functions um the function return which takes a value of a and returns a monad of a and a function",
    "start": "2162160",
    "end": "2169720"
  },
  {
    "text": "called bind this is how you write bind in hll the greater than greater greater than equal is obviously pronounced",
    "start": "2169720",
    "end": "2176440"
  },
  {
    "text": "bind and it takes the mo out of a it takes a callback function that will get an A and return under B and it returns",
    "start": "2176440",
    "end": "2184400"
  },
  {
    "text": "under B this I I assume that you don't all read ha so I've translated this into",
    "start": "2184400",
    "end": "2191160"
  },
  {
    "text": "typescript for you does that look familiar so um I've changed the return",
    "start": "2191160",
    "end": "2197880"
  },
  {
    "text": "of course because return is a resered keyword in JavaScript I've changed it to unit and because you're not allowed to",
    "start": "2197880",
    "end": "2204200"
  },
  {
    "text": "have um funny characters in function names I have I've had to change the bind to then",
    "start": "2204200",
    "end": "2212240"
  },
  {
    "text": "arbitrarily actually this is exactly like our R interface isn't it exactly like a promise",
    "start": "2212240",
    "end": "2219520"
  },
  {
    "text": "so you've actually seen the IAD that's the promise you've seen the maybe manad that",
    "start": "2219800",
    "end": "2227160"
  },
  {
    "text": "was my weird little little maybe thing though the maybe manad is slightly more",
    "start": "2227160",
    "end": "2233079"
  },
  {
    "text": "useful and this is monai comprehension in hll this is monai comprehension in",
    "start": "2233160",
    "end": "2241520"
  },
  {
    "text": "JavaScript if you can believe it it's exactly the same principle just using",
    "start": "2241520",
    "end": "2247319"
  },
  {
    "text": "that thing shaped like a promise and we're using the the Run function and a convenient Co routine to get the same",
    "start": "2247319",
    "end": "2257280"
  },
  {
    "text": "effect so mind you I I say that that this is all a monad is uh are there there any",
    "start": "2257440",
    "end": "2265280"
  },
  {
    "text": "actual High schol programmers in the audience couple of you I'm sure all of you are just jumping off your seats",
    "start": "2265280",
    "end": "2270920"
  },
  {
    "text": "going well actually there's more to it than than just this this shape like a promise you do of course have to have",
    "start": "2270920",
    "end": "2276079"
  },
  {
    "text": "the free monal so I in cluding them um for completeness left identity right",
    "start": "2276079",
    "end": "2282400"
  },
  {
    "text": "identity associativity and if these equations don't hold true is technically not a",
    "start": "2282400",
    "end": "2289319"
  },
  {
    "text": "moad but that's not really important the important bit is that promises are essentially",
    "start": "2289319",
    "end": "2297560"
  },
  {
    "text": "monads uh that's how they look combine them with uh your friendly neighborhood",
    "start": "2297560",
    "end": "2303359"
  },
  {
    "text": "co- routine and the Run function you got mon comprehension there's nothing more to it",
    "start": "2303359",
    "end": "2308920"
  },
  {
    "text": "and it allows you to do IO uh async code",
    "start": "2308920",
    "end": "2314440"
  },
  {
    "text": "in JavaScript extremely neatly we've had it all the time we just didn't talk talk",
    "start": "2314440",
    "end": "2320200"
  },
  {
    "text": "about uh the MW we don't use that word for things like",
    "start": "2320200",
    "end": "2325400"
  },
  {
    "text": "promises that's really all there is to it so I'm terribly sorry I've just T you",
    "start": "2325400",
    "end": "2331200"
  },
  {
    "text": "m not that's um right at the end I'd like to actually mention the co Library which",
    "start": "2331200",
    "end": "2337240"
  },
  {
    "text": "uh is where where this actually get gets useful because my run function is is fairly basic one thing I mentioned it it",
    "start": "2337240",
    "end": "2344520"
  },
  {
    "text": "doesn't handle errors um the co library is a better",
    "start": "2344520",
    "end": "2350760"
  },
  {
    "text": "implementation of the Run function that deals with all this stuff it's freely",
    "start": "2350760",
    "end": "2357079"
  },
  {
    "text": "available on npm on GitHub if you want to try this out in real code that's the thing that I should be using or copying",
    "start": "2357079",
    "end": "2363480"
  },
  {
    "text": "my run function and that's it",
    "start": "2363480",
    "end": "2369040"
  },
  {
    "text": "thank you",
    "start": "2369040",
    "end": "2372280"
  }
]