[
  {
    "start": "0",
    "end": "149000"
  },
  {
    "text": "Hello, everyone, and welcome back to \"GOTO \nBook Club\". My name's James Lewis. And I'm here  ",
    "start": "4240",
    "end": "9280"
  },
  {
    "text": "today with the author of Data-Oriented or Data, \n\"Data-Oriented Programming,\" Yehonathan Sharvit.  ",
    "start": "9280",
    "end": "17560"
  },
  {
    "text": "Welcome to \"GOTO Book Club.\"\nHappy to be here.  So, we're here to talk about your book. Can you \njust give us a brief introduction to the content? ",
    "start": "20840",
    "end": "31160"
  },
  {
    "text": "First of all, it's my first tech book. Maybe \nit'll be the last one. I'm not sure. I did it  ",
    "start": "31160",
    "end": "38360"
  },
  {
    "text": "with Manning, and I quite enjoyed it. It took \naround two years to write the book. Manning has  ",
    "start": "38360",
    "end": "45680"
  },
  {
    "text": "this very interesting early adoption program. So, \nI didn't have to wait until the book was completed  ",
    "start": "45680",
    "end": "55800"
  },
  {
    "text": "to get feedback and see how many book copies I \nsold. I'm a developer and I'm in the Agile world,  ",
    "start": "55800",
    "end": "64360"
  },
  {
    "text": "so I need immediate feedback. I'm not sure I \ncould have waited for two years before getting   any hints. So, after three chapters were \npublished, it was launched and people bought  ",
    "start": "64360",
    "end": "75040"
  },
  {
    "text": "it and wrote about the book, what they liked, \nand what they didn't like, and I was able even   to change a little bit the table of contents \nbased on feedback. So, I enjoyed the process. ",
    "start": "75040",
    "end": "85920"
  },
  {
    "text": "It's almost like a Leanpub type process where \nyou get very, very early feedback. Yeah. Awesome.  Yes.\nMaybe you could  ",
    "start": "85920",
    "end": "91680"
  },
  {
    "text": "just give us a brief introduction to yourself as \nwell, for the folk out there who don’t know you.  So, I'm around 40-something years old. I have a \nfamily. I live in Israel. I've been a developer  ",
    "start": "91680",
    "end": "103880"
  },
  {
    "text": "for more than 20 years. I started with, you \nknow, C, C++, and then got upgraded to Java,  ",
    "start": "103880",
    "end": "112479"
  },
  {
    "text": "and then upgraded to JavaScript. But I started \nto see the light when I discovered Clojure 10  ",
    "start": "112480",
    "end": "119640"
  },
  {
    "text": "years ago. I like to say that there is a before \nand after Clojure for me. Before 10 years ago,  ",
    "start": "119640",
    "end": "135160"
  },
  {
    "text": "programming was just, you know, my job. \nBut since then, it has become my passion.   I enjoy programming. I like to write insight in \nblog posts. Programming has become fun again. ",
    "start": "135160",
    "end": "148720"
  },
  {
    "text": "What is it you think about the Clojure \nprogramming language in particular that   gives you that kind of, that real buzz?\nThat was kind of difficult to nail down. I  ",
    "start": "148720",
    "end": "160680"
  },
  {
    "start": "149000",
    "end": "224000"
  },
  {
    "text": "discussed that with the Clojure community after \nI attempted to write a book about Clojure with  ",
    "start": "160680",
    "end": "167280"
  },
  {
    "text": "Manning, an attempt that didn't succeed. So, there \nwas an early program launch, but 100 people bought  ",
    "start": "167280",
    "end": "176520"
  },
  {
    "text": "the book overall. So, Manning told me, \"Look, we \nlike you, but we cannot do business with you. So,  ",
    "start": "176520",
    "end": "183280"
  },
  {
    "text": "can you come up with another topic for the \nbook?\" And I say, okay I cannot convince   people to adopt Clojure, but I like it so \nmuch that there must be something in Clojure,  ",
    "start": "184080",
    "end": "194080"
  },
  {
    "text": "like a universal paradigm that I could share with \nthe community of developers. So, I spent a couple  ",
    "start": "194080",
    "end": "201440"
  },
  {
    "text": "of weeks and months with Manning folks, and with \nClojure developers to figure out if is there a way  ",
    "start": "201440",
    "end": "208360"
  },
  {
    "text": "to formulate Clojure principles in a non-Clojure \nway. That's what \"Data-Oriented Programming\" is  ",
    "start": "208360",
    "end": "216880"
  },
  {
    "text": "about. So, it is a way to get all the Clojure \ngoodies without learning Clojure syntax.",
    "start": "216880",
    "end": "224880"
  },
  {
    "start": "224000",
    "end": "705000"
  },
  {
    "text": "So, when we were talking before, you \ntalked about the principles that you set   out. Maybe you could talk through some \nof those principles, that would be... ",
    "start": "224880",
    "end": "233040"
  },
  {
    "text": "Yes. So, just before the principles, what \nis the goal of... each program partner  ",
    "start": "233040",
    "end": "239640"
  },
  {
    "text": "has a goal. It's not that it's the best thing \nfor everything. So, the goal of data-oriented  ",
    "start": "239640",
    "end": "246160"
  },
  {
    "text": "programming is to reduce the complexity of \ninformation systems and complexity, you know,  ",
    "start": "246160",
    "end": "254160"
  },
  {
    "text": "not of thing, not the computational complexity, \nbut more the system complexity. By that I mean  ",
    "start": "254160",
    "end": "263000"
  },
  {
    "text": "the amount of suffering that you experience when \nyou try to understand the system or to add new  ",
    "start": "263000",
    "end": "268960"
  },
  {
    "text": "features to a system. So, that's complexity. My \nclaim is that if you write your code following  ",
    "start": "268960",
    "end": "276520"
  },
  {
    "text": "data-oriented programming principles, then you \nwill reduce the level of complexity. Make sense? ",
    "start": "276520",
    "end": "283960"
  },
  {
    "text": "No, it does make sense. When we talk about \ncomplexity, we often talk about the difference   between accidental versus essential complexity, so \nare you talking about the same sort of complexity,  ",
    "start": "283960",
    "end": "295360"
  },
  {
    "text": "the sort of stuff around the problem?\nThe essential complexity if you want to reduce it,   you have to move to another problem. Assuming \nthat you are forced to solve the current problem,  ",
    "start": "295360",
    "end": "308120"
  },
  {
    "text": "you cannot reduce the essential complexity, \nbut you can reduce the amount of accidental   complexity that you add to your work. So, \nyeah, we deal with accidental complexity. ",
    "start": "308120",
    "end": "319680"
  },
  {
    "text": "I mean, I think maybe some other people would \nargue as well that some programming languages  ",
    "start": "320600",
    "end": "326640"
  },
  {
    "text": "are better at dealing with certain types \nof essential complexity as well. I mean,  ",
    "start": "326640",
    "end": "332080"
  },
  {
    "text": "if you find that with Clojure you get to solve \nproblems in a slightly different way when you...  Right.\nA full disclaimer here. I have  ",
    "start": "332080",
    "end": "339720"
  },
  {
    "text": "written Clojure codes. I'm not entirely ignorant \nof writing Clojure. But when you write Clojure,  ",
    "start": "339720",
    "end": "346040"
  },
  {
    "text": "do you find that certain problems fit it more?\nYes. So, this kind of problem is what we call  ",
    "start": "346040",
    "end": "351760"
  },
  {
    "text": "the information system. For example, a backend \nsoftware that takes data from the database,  ",
    "start": "351760",
    "end": "359480"
  },
  {
    "text": "manipulates it a little bit, and passes it \nforward, or front front-end application with   a state that we need to manage. I don't think \nit's a good fit, for data-oriented programming,  ",
    "start": "360120",
    "end": "372280"
  },
  {
    "text": "for writing databases or writing embedded \nsystems or routers or stuff like that, where  ",
    "start": "372280",
    "end": "381560"
  },
  {
    "text": "you need highly computational things and when \nperformance is the key. But when you manipulate  ",
    "start": "381560",
    "end": "391560"
  },
  {
    "text": "data here and there and when you... Also, one \nimportant aspect of it is that when your program  ",
    "start": "391560",
    "end": "398919"
  },
  {
    "text": "manipulates data that it doesn't own, when the \nowner of the data is another system, for example,  ",
    "start": "398920",
    "end": "405000"
  },
  {
    "text": "the database is the owner of your data and your \nbackend only has to pass data around. If you write  ",
    "start": "405000",
    "end": "412960"
  },
  {
    "text": "a compiler, for example, you own the data. You \nknow exactly what is the structure of your data. ",
    "start": "412960",
    "end": "419360"
  },
  {
    "text": "Yes.\nThere is no surprise. So,   for that kind of problem, I'm not sure that \ndata-oriented programming is a perfect fit,  ",
    "start": "419360",
    "end": "425800"
  },
  {
    "text": "but for dealing with the real world and surprises \nof the real world, I think it's a good fit. ",
    "start": "425800",
    "end": "431479"
  },
  {
    "text": "We have a sort of old joke in Thoughtworks, \nwhich is maybe even 90% of our job is taking  ",
    "start": "431480",
    "end": "437680"
  },
  {
    "text": "data from A and moving it to B. And the other 10% \nis showing it at C, right? I mean, that's pretty  ",
    "start": "437680",
    "end": "445160"
  },
  {
    "text": "much what most enterprise developers do.\nExactly. So, for that kind of stuff,   I think Clojure has been known to be good, \nbut the problem with Clojure is that it has  ",
    "start": "445160",
    "end": "456560"
  },
  {
    "text": "a reputation for being hard to learn, or it's a \ndifferent mindset. So, it's hard for, let's say,  ",
    "start": "456560",
    "end": "465440"
  },
  {
    "text": "Java developers to move to Clojure. So, I hope \nthat DOP, 'll bring Clojure's way of thinking  ",
    "start": "465440",
    "end": "476920"
  },
  {
    "text": "to non-Clojure developers. And we have the tools \nfor that, as we will maybe talk about later. The  ",
    "start": "476920",
    "end": "483440"
  },
  {
    "text": "key thing in terms of code that we need is the \nimmutable data structures that were invented  ",
    "start": "483440",
    "end": "491080"
  },
  {
    "text": "by Rich Hickey when he developed Clojure or \ndiscovered, but since then, it was in 2009,  ",
    "start": "491080",
    "end": "496360"
  },
  {
    "text": "since then, they have been ported to any \nprogramming language, you know, to Java,   Ruby, Python, JavaScript. So, we have all \nthe tools for that. We just need to leap.",
    "start": "496360",
    "end": "507780"
  },
  {
    "text": "So, I guess to recap a bit, the goal of the book \nis to introduce the way of thinking that Clojure  ",
    "start": "507780",
    "end": "514520"
  },
  {
    "text": "developers use, if you like, when they're once in \nClojure, to introduce that to a wider audience and  ",
    "start": "514520",
    "end": "520280"
  },
  {
    "text": "to give a wider audience the sort of tools, the \nmental tools, to think about problems in a way   that and solve problems in a way that you might \nsolve with them with a function programming. ",
    "start": "520280",
    "end": "528960"
  },
  {
    "text": "Right. Both the mental tools and the technical \ntools that you can implement. In the book,   I use JavaScript as an example. And when it \nmatters, I illustrate also how to do it in  ",
    "start": "528960",
    "end": "539280"
  },
  {
    "text": "Java. But, you know, JavaScript is easy to read by \nanybody. All the code examples in the book work,  ",
    "start": "539280",
    "end": "548640"
  },
  {
    "text": "but it's more like you can read it as pseudocode \nto get a real sense of that it's not only abstract  ",
    "start": "548640",
    "end": "555800"
  },
  {
    "text": "principles, it's pragmatic, it's things that \nyou can do tomorrow morning. So, it's both the  ",
    "start": "555800",
    "end": "561279"
  },
  {
    "text": "mental tools and the technical tools and also the \nmotivation. The way I wrote the book is... So,  ",
    "start": "561280",
    "end": "573280"
  },
  {
    "text": "I had a problem. When I started to write the book, \nI was overenthusiastic. I thought it was the best  ",
    "start": "573280",
    "end": "578680"
  },
  {
    "text": "thing. The material was the best in the world, \nand I wanted to convince, and when you are too  ",
    "start": "578680",
    "end": "585279"
  },
  {
    "text": "convinced and you want too much to convince, you \nare not convincing. So, the publisher told me,  ",
    "start": "585280",
    "end": "592480"
  },
  {
    "text": "\"Keep quiet.\" And then they asked questions, \nthe person that worked with me for Manning asked  ",
    "start": "592480",
    "end": "601120"
  },
  {
    "text": "questions, objections. \"Here we have a problem. \nHere we have a problem. It's not a perfect fit.\"  ",
    "start": "601120",
    "end": "607080"
  },
  {
    "text": "And then I kind of become schizophrenic. So, on \nthe one hand, I'm enthusiastic, on the other hand,  ",
    "start": "607080",
    "end": "612160"
  },
  {
    "text": "I have lots of questions. How am I going to \nmanage it? And I came up with this interesting  ",
    "start": "612160",
    "end": "618160"
  },
  {
    "text": "idea to give voice to both sides of the book.\nI wrote the book as a story, as a meeting  ",
    "start": "618160",
    "end": "627279"
  },
  {
    "text": "between an old or a 5 or 10-year-old Java \ndeveloper who struggles at work. He works  ",
    "start": "627280",
    "end": "634680"
  },
  {
    "text": "for a consulting company like yours, but another, \nthe name is Albatross, I think, in the book. He  ",
    "start": "634680",
    "end": "642160"
  },
  {
    "text": "has a problem meeting deadlines because of their \ncomplexity. And then he meets Joe, a Clojure guy,  ",
    "start": "642160",
    "end": "651680"
  },
  {
    "text": "that is very enthusiastic and wants to \nreveal all the mental models from Clojure,  ",
    "start": "651680",
    "end": "657839"
  },
  {
    "text": "but to formulate them in a non-Clojure way. The \nbook is the story of their meeting. And the guy  ",
    "start": "657840",
    "end": "665200"
  },
  {
    "text": "is not a yes man, the Java developer. So, he \nasks many questions, and the Clojure coach,  ",
    "start": "665200",
    "end": "671040"
  },
  {
    "text": "the DOP coach has to refine his insights and \nteachings, and it allowed me to manage the two  ",
    "start": "671040",
    "end": "677199"
  },
  {
    "text": "voices inside me to make it, you know, a dialogue.\nThat sounds like a really interesting approach.  ",
    "start": "677200",
    "end": "683240"
  },
  {
    "text": "So, it's almost like what we would \ncall a business fable in some senses. ",
    "start": "683240",
    "end": "687760"
  },
  {
    "text": "Like \"The Goal.\"\nLike \"The Goal,\" exactly,   like that sort of structure where you \nhave someone who's sort of taking the  ",
    "start": "688360",
    "end": "694320"
  },
  {
    "text": "individual on a journey towards enlightenment.\nYes. And, you know it goes back to Socrates. ",
    "start": "694320",
    "end": "700840"
  },
  {
    "text": "Yes. Then the dialogues.\nLike the dialogues. Super interesting. So, we've heard a bit about \nwhat the goal is, as it were. But also, I mean,  ",
    "start": "700840",
    "end": "713000"
  },
  {
    "start": "705000",
    "end": "1874000"
  },
  {
    "text": "so you sort of said about some of the tools the \nsort of mental and the sort of the technical   tools and principles and things. Maybe you \ncould talk to us a little bit about those. ",
    "start": "713000",
    "end": "722200"
  },
  {
    "text": "So, there are four principles that we could \nsummarize as one meta-principle that can  ",
    "start": "722200",
    "end": "731320"
  },
  {
    "text": "be expressed in four words, \"Treat data as \ndata.\" So, that's data-oriented programming.  ",
    "start": "731320",
    "end": "737520"
  },
  {
    "text": "That's very simple. \"Treat data as data.\"\nI would say data. So, I would say, \"Treat data  ",
    "start": "737520",
    "end": "742600"
  },
  {
    "text": "as data.\" Though data is...I get shivers.\nOr treat data as data. ",
    "start": "742600",
    "end": "748319"
  },
  {
    "text": "So, treat data as data. Treat data as data. \nSo, maybe you could unpick some of that for us. ",
    "start": "748880",
    "end": "755320"
  },
  {
    "text": "Basically, what does it mean to treat data \nas data or data as data? It means that data   is a first-class citizen, like in object data \nprogramming, objects or classes are first-class  ",
    "start": "757440",
    "end": "768000"
  },
  {
    "text": "citizens. In functional programming, functions \nare first-class citizens. In business class,  ",
    "start": "768000",
    "end": "775680"
  },
  {
    "text": "rich people are first class, you know. So, \nhere data is the first class citizen1 . And   what does it take? So, it takes four principles. \nPrinciple number one is to separate between code  ",
    "start": "775680",
    "end": "787320"
  },
  {
    "text": "and data. Unlike what OP teaches or has taught \nfor years, we don't want to encapsulate data and  ",
    "start": "787320",
    "end": "796480"
  },
  {
    "text": "functionality together in objects. We want \ndata to have the right to live on its own. ",
    "start": "796480",
    "end": "802000"
  },
  {
    "text": "And then the cool thing is that the behavioral \npart of the system becomes stateless, stateless  ",
    "start": "802000",
    "end": "810720"
  },
  {
    "text": "functions or stateless methods. As you probably \nknow, the state is the number one enemy. So,  ",
    "start": "810720",
    "end": "817800"
  },
  {
    "text": "we cannot avoid the state, but we want to tame it \nby localizing it. So, only some slight pieces of  ",
    "start": "817800",
    "end": "827040"
  },
  {
    "text": "our code will deal with the state. But all \nthe other pieces are stateless. It's like  ",
    "start": "827040",
    "end": "834120"
  },
  {
    "text": "a dream for unit tests for debug ability for \ncode reuse. So, that's principle number one.  ",
    "start": "834120",
    "end": "841760"
  },
  {
    "text": "We separate between code and...\nAnd treat data as a first-class,  ",
    "start": "841760",
    "end": "847120"
  },
  {
    "text": "as the first class.\nIt's not enough. It's not there. It's a   required condition, but it's not enough. So, after \nwe have done that, that's principle number one,  ",
    "start": "847120",
    "end": "856600"
  },
  {
    "text": "comes the question, how are we going to \nrepresent data? Would we use structs like  ",
    "start": "856600",
    "end": "861880"
  },
  {
    "text": "in C? Will we use records like in modern Java? \nWill we use dictionaries like in Python? So,  ",
    "start": "861880",
    "end": "873240"
  },
  {
    "text": "the answer that DOP gives is generic. We \nuse generic data structures, hash maps,  ",
    "start": "873240",
    "end": "880080"
  },
  {
    "text": "dictionaries, arrays, lists, and stuff like \nthat. We don't need anything more to represent  ",
    "start": "880080",
    "end": "886040"
  },
  {
    "text": "our data. Principle number four will deal with \nits limitations. But before the limitation,  ",
    "start": "886040",
    "end": "894079"
  },
  {
    "text": "let's down to the advantages of it. So, first \nof all, you can create data as you go. You don't  ",
    "start": "894080",
    "end": "901160"
  },
  {
    "text": "have a ceremony before you create data, right?\nLike with numbers, when you create a number 42 and  ",
    "start": "901160",
    "end": "906519"
  },
  {
    "text": "you want to add one, you are not creating a class \nof even numbers or even numbers bigger than 40,  ",
    "start": "906520",
    "end": "913920"
  },
  {
    "text": "or even numbers bigger than 40 and less \nthan 50, right? You just create the number,   you have the right to create it. And you can \nmanipulate it, and you can pass it around. It  ",
    "start": "913920",
    "end": "923920"
  },
  {
    "text": "gives you lots of dynamics and flexibility. Also, \nyou can manipulate 42 with all the operations that  ",
    "start": "923920",
    "end": "937160"
  },
  {
    "text": "are there for you, multiplication, addition, \nlogarithm, exponentiation, and any complex  ",
    "start": "937160",
    "end": "944480"
  },
  {
    "text": "math function is available to you no matter if \nit's part of the language, like the basic one,   or it's written with the library. So, the \nsame, if you represent data with generic  ",
    "start": "944480",
    "end": "954280"
  },
  {
    "text": "data structures, you can leverage any piece of \nfunctionality that has been written by anybody. ",
    "start": "954280",
    "end": "960720"
  },
  {
    "text": "For example, in JavaScript we have this \nLodash library that gives you, I don't know,  ",
    "start": "960720",
    "end": "966639"
  },
  {
    "text": "hundreds of data manipulation functions that you \ndon't need to write, group by sort, frequency,  ",
    "start": "966640",
    "end": "974720"
  },
  {
    "text": "remove key, add key, rename keys, map, reduce, all \nthese things. You don't have to be a functional  ",
    "start": "974720",
    "end": "980839"
  },
  {
    "text": "programming wizard to leverage them. So, it's \nthere for you. You don't have to reinvent the   wheel for every business entity of your system.\nThat's super interesting actually because, I mean,  ",
    "start": "980840",
    "end": "992480"
  },
  {
    "text": "in my mind, I have been for a very, very long \ntime, super interested in domain-driven design,  ",
    "start": "992480",
    "end": "999000"
  },
  {
    "text": "right? I'm sure you've come across domain-driven \ndesign. You're essentially trying to solve similar  ",
    "start": "999000",
    "end": "1005360"
  },
  {
    "text": "problems with domain-driven design, but sort of \ntrying to solve them in very different ways. So,   for example, one could argue that tiny types would \nbe a sort of almost the opposite approach, right?  ",
    "start": "1005360",
    "end": "1018080"
  },
  {
    "text": "So, rather than just treat data as generic, it's \na number, or it's a, I guess a string or whatever  ",
    "start": "1018080",
    "end": "1024640"
  },
  {
    "text": "it is, right? With tiny types, you would try and \nyou would create a type that encapsulates the... ",
    "start": "1024640",
    "end": "1031880"
  },
  {
    "text": "The specifics.\nExactly. You're right. The specifics of the thing   you're trying to describe. I mean, I remember \nyears ago, back in 2005, you turn up at a bank,  ",
    "start": "1031880",
    "end": "1043480"
  },
  {
    "text": "or even later you turn up at a big, big project \nand you'd see a big code base, and it was all hash   maps and it was all dictionaries. And the problem \nwas, it was really hard to reason about all these  ",
    "start": "1043480",
    "end": "1055600"
  },
  {
    "text": "things in amongst all this, you know, all this \nsort of giant sort of object-oriented sort  ",
    "start": "1055600",
    "end": "1061160"
  },
  {
    "text": "of, with these object-oriented structures. That's \nwhy, sort of, I think back in 2009, I did a talk  ",
    "start": "1061160",
    "end": "1068800"
  },
  {
    "text": "with Daniel Terhorst-North on programming in the \nlarge, where we talked about, one of the things to  ",
    "start": "1068800",
    "end": "1074240"
  },
  {
    "text": "do is to introduce a domain model, right? Because \nthat allows you to reason about the things that  ",
    "start": "1074240",
    "end": "1079800"
  },
  {
    "text": "you're working with. I mean, how do you solve \nthat problem in data-oriented programming   where you want to be able to reason about the \nbusinessy things that your code is doing as well?",
    "start": "1079800",
    "end": "1089400"
  },
  {
    "text": "Yes. So, that's a great question. That's the most \nchallenging question. And that's principle number  ",
    "start": "1089400",
    "end": "1095480"
  },
  {
    "text": "four. So, let's go to it. And then we come back to \nprinciple number three. Who cares about order? So,  ",
    "start": "1095480",
    "end": "1103160"
  },
  {
    "text": "right, when you have small code, when you write \nyour...and you do homework for university,  ",
    "start": "1103160",
    "end": "1111440"
  },
  {
    "text": "that's fine. You have a hash map and you know what \nthe hash map what are the fields. You don't have  ",
    "start": "1111440",
    "end": "1117840"
  },
  {
    "text": "surprises, but when the team grows, when the code \nbase grows, you have a function. I don't know,  ",
    "start": "1117840",
    "end": "1125720"
  },
  {
    "text": "the amount that receives something called user. \nMaybe it's called user, maybe it'll be called U.  ",
    "start": "1125720",
    "end": "1134960"
  },
  {
    "text": "And it's a hash map. So, how do I know what are \nthe fields in this hash map? If you're lucky,  ",
    "start": "1134960",
    "end": "1140600"
  },
  {
    "text": "you have a documentation string that says, \nin this user thing, you have a user ID,  ",
    "start": "1140600",
    "end": "1145840"
  },
  {
    "text": "you have an email address, you have blah, blah, \nblah. But documentation is sometimes not there  ",
    "start": "1145840",
    "end": "1151679"
  },
  {
    "text": "and sometimes is inaccurate. The code evolved \nand someone forgot to update the documentation. ",
    "start": "1151680",
    "end": "1156560"
  },
  {
    "text": "And for that object, the programming shines \nbecause you have no mistakes. For each part, you  ",
    "start": "1158600",
    "end": "1166080"
  },
  {
    "text": "can inspect the type, and you have autocompletion. \nSo, that seems to be a problem. So, we want data  ",
    "start": "1166080",
    "end": "1176000"
  },
  {
    "text": "validation. Right? Another problem is that if you \ndon't do data validation and you make mistakes,  ",
    "start": "1176000",
    "end": "1182200"
  },
  {
    "text": "you will encounter errors down the stream. So, \ninstead of having the error in the amount function  ",
    "start": "1182200",
    "end": "1188440"
  },
  {
    "text": "and saying, oh, the user is invalid, you will have \na full function that says the X is not defined.  ",
    "start": "1188440",
    "end": "1194759"
  },
  {
    "text": "Where the hell does it come from? And I've seen \nthat. That's the problem of dynamic languages. ",
    "start": "1194760",
    "end": "1199840"
  },
  {
    "text": "Yes.\nAnd quite recently, I would say over the last five  ",
    "start": "1199840",
    "end": "1207039"
  },
  {
    "text": "years, there have been development and awareness \nin the dynamic programming language community that  ",
    "start": "1207040",
    "end": "1212880"
  },
  {
    "text": "we need something. We don't want the limitation \nof static types, but we don't want the far west  ",
    "start": "1212880",
    "end": "1220880"
  },
  {
    "text": "of the dynamic type. We want something in the \nmiddle, or maybe we want both. And there are ways  ",
    "start": "1220880",
    "end": "1226440"
  },
  {
    "text": "to have... How do you say it? To cut the cake?\nYes. Both, have your cake and eat it or something. ",
    "start": "1226440",
    "end": "1235559"
  },
  {
    "text": "Yes. So, there is a way.\nYes.  And the key is to separate between data \nrepresentation and data validation. So,  ",
    "start": "1235560",
    "end": "1244200"
  },
  {
    "text": "we want both, but we don't want them to \nbe entangled. Right? Someone commented in  ",
    "start": "1244200",
    "end": "1249360"
  },
  {
    "text": "my book that every paradigm or good design \nprinciple is about separating things. So,  ",
    "start": "1249360",
    "end": "1258880"
  },
  {
    "text": "here again, we want both data representation \nand data validation, but we don't want them  ",
    "start": "1258880",
    "end": "1264280"
  },
  {
    "text": "entangled. We want them separate. We will decide, \nand we, the developers will decide when we want  ",
    "start": "1264280",
    "end": "1270680"
  },
  {
    "text": "to validate this piece of data. Sometimes we don't \nwant to. Sometimes we have a function that is just  ",
    "start": "1270680",
    "end": "1276000"
  },
  {
    "text": "a utility function, and it could handle various \nkinds of data. Let me give you an example of that,  ",
    "start": "1276000",
    "end": "1282240"
  },
  {
    "text": "you could write a function that receives a \nhash map and receive a list of keys that need  ",
    "start": "1282240",
    "end": "1288840"
  },
  {
    "text": "to be renamed or removed. So, it works with \nany hash map, not only with users and books.  So, this function, you want is generic. You don't \nwant to limit yourself in any way. On the other  ",
    "start": "1288840",
    "end": "1299880"
  },
  {
    "text": "hand, you have a function called checkout, and you \nreceive a card, and you don't want this function   to work with a user., It has to be a card. So, \nthere are schema languages like JSON Schema that  ",
    "start": "1299880",
    "end": "1314480"
  },
  {
    "text": "allow you to express the schema, the expected \nschema of your data as data. And some libraries  ",
    "start": "1314480",
    "end": "1322640"
  },
  {
    "text": "allow you to say, \"Here, I have a piece of data. \nI have a schema. Could you please validate for  ",
    "start": "1322640",
    "end": "1328600"
  },
  {
    "text": "me that the data is conforming to the schema? And \nif not, tell me exactly why. What are the missing  ",
    "start": "1328600",
    "end": "1335000"
  },
  {
    "text": "fields? What are the invalid fields?\" And we could \nuse it in areas where it's the only way to go. ",
    "start": "1335000",
    "end": "1344080"
  },
  {
    "text": "Let me give you an example. If you have an HTTP \nserver that receives a request, you cannot force  ",
    "start": "1344080",
    "end": "1349559"
  },
  {
    "text": "the user to send you a valid request. You \nhave no compiler over the wire, right? So,  ",
    "start": "1349560",
    "end": "1356160"
  },
  {
    "text": "how are you going to manage that? Here, you have \nthe schema, you have the payload schema that could  ",
    "start": "1356160",
    "end": "1363920"
  },
  {
    "text": "be expressed in JSON Schema or something else. And \nyou have the user request, which is a string. So,  ",
    "start": "1363920",
    "end": "1369040"
  },
  {
    "text": "first, you deserialize the JSON string. If you can \nmake it an object, you move forward. If you're not  ",
    "start": "1369040",
    "end": "1376360"
  },
  {
    "text": "able, you send an error to the user in valid \nJSON, but then you have a valid map that might  ",
    "start": "1376360",
    "end": "1382320"
  },
  {
    "text": "or might not conform to your schema. So, you use \nthese JSON schema libraries and you validate data  ",
    "start": "1382320",
    "end": "1388679"
  },
  {
    "text": "with the schema. And if it's not valid, you are \nable dynamically to send in the response body of  ",
    "start": "1388680",
    "end": "1394840"
  },
  {
    "text": "the error, \"Hey,\" to send back the error that \nis created by the library. Like, here I expect  ",
    "start": "1394840",
    "end": "1403080"
  },
  {
    "text": "a user. It should have a user ID, and it should be \na number. Here is an email. It's an invalid email. ",
    "start": "1403080",
    "end": "1409960"
  },
  {
    "text": "That's super interesting because, I mean, \nso how does that work with... I mean, so,   full disclosure, you know, I've done a lot of \nsort of integration work over the years. And,  ",
    "start": "1409960",
    "end": "1419440"
  },
  {
    "text": "you know, what I'm thinking about here is \nPostel's law that's coming into my mind. Right.  What?\nSo, Postel's law, so from TCP of IP. ",
    "start": "1419440",
    "end": "1425880"
  },
  {
    "text": "Be generic in what you receive \nand be hard in what you sense.  Yes. That's the paraphrasing.\nYes. I mention it in the book Chapter 12, I think. ",
    "start": "1428360",
    "end": "1435880"
  },
  {
    "text": "That's it. And it's one of these things where, \nover the years when I was involved with building  ",
    "start": "1435880",
    "end": "1444240"
  },
  {
    "text": "systems that were doing things like passing, \nlots of XML, or JSON these days, you know,   we developed lots of techniques which were to \nonly bind to the things that you need in the  ",
    "start": "1444240",
    "end": "1456200"
  },
  {
    "text": "response that you're getting, right? So say you \nget a user, and the user has a first name and  ",
    "start": "1456200",
    "end": "1462039"
  },
  {
    "text": "last name, a full name, a first-line address, a \nsecond-line address, and a full address, right? ",
    "start": "1462040",
    "end": "1467800"
  },
  {
    "text": "Right.\nDepending on what you want, you   either buy into the first name and last name, or \nyou buy into the full name. But you don't expect  ",
    "start": "1467800",
    "end": "1476520"
  },
  {
    "text": "necessarily everything to be there because you \ndon't necessarily need everything. And what that   allows you to do is to use patterns like expand \ncontract for, you know, interfaces where you say,  ",
    "start": "1476520",
    "end": "1485840"
  },
  {
    "text": "okay, you know, as long as you're only buying to \nthe things you need, I can add extra fields in  ",
    "start": "1485840",
    "end": "1492120"
  },
  {
    "text": "without breaking my consumers, if you like.\nAnd you don't have to create a new class. ",
    "start": "1492120",
    "end": "1497160"
  },
  {
    "text": "No, exactly.\nProbably people know from Java, you   have user, user and database, user for controller \nA, user for controller B, you have thousands of  ",
    "start": "1497160",
    "end": "1505280"
  },
  {
    "text": "classes that are just a subset of the field.\nYes, exactly. And so, you have that problem,  ",
    "start": "1505280",
    "end": "1513160"
  },
  {
    "text": "but then you also have this thing about how you \nevolve interfaces between systems. How are you  ",
    "start": "1513160",
    "end": "1521200"
  },
  {
    "text": "able to add new fields? You should be able to add \nnew fields to a response without breaking things. ",
    "start": "1521200",
    "end": "1526600"
  },
  {
    "text": "Breaking, exactly.\nBut that only works,   if you are using straight schema validation\nYes. ",
    "start": "1526600",
    "end": "1533200"
  },
  {
    "text": "That's gonna blow up, right?\nRight.  Does this make sense?\nAnd in JSON Schema,  ",
    "start": "1533200",
    "end": "1538320"
  },
  {
    "text": "there is natively this concept of required or \nnon-required field. I think that still in Java,  ",
    "start": "1538320",
    "end": "1545159"
  },
  {
    "text": "the nullability is a problem, right? If a field \ncould be there or could not be there, you have  ",
    "start": "1545160",
    "end": "1552240"
  },
  {
    "text": "problems. In a hash map, either you have it or you \ndon't have it. It's not nullable. In the schema,  ",
    "start": "1552240",
    "end": "1559800"
  },
  {
    "text": "it could be required or non-required. So, it seems \nto me that it's the proper mental model to deal  ",
    "start": "1559800",
    "end": "1567720"
  },
  {
    "text": "with systems that communicate over the wire. I \nmust admit that in terms of tools, we are not  ",
    "start": "1567720",
    "end": "1573640"
  },
  {
    "text": "there yet. This means that if you have a function \nthat receives the user and you have the JSON  ",
    "start": "1573640",
    "end": "1579920"
  },
  {
    "text": "Schema of the user, your ID will not completely \nbe able to auto-complete the field based on the  ",
    "start": "1579920",
    "end": "1587280"
  },
  {
    "text": "JSON schema. But we are starting to get there.\nFor example, in the VS code, some configuration  ",
    "start": "1587280",
    "end": "1595640"
  },
  {
    "text": "file for an extension or for VS code itself has \na JSON Schema defined for it that is somewhere on  ",
    "start": "1595640",
    "end": "1604800"
  },
  {
    "text": "the internet. And VS code is smart enough to give \nyou as you type mistakes about the configuration  ",
    "start": "1604800",
    "end": "1612680"
  },
  {
    "text": "data. So, I envision that things like that \nwill happen shortly in our programs. So,  ",
    "start": "1613400",
    "end": "1622120"
  },
  {
    "text": "you'd be able to write JavaScript, not TypeScript, \nor Java with hash maps, or Clojure, or Python,  ",
    "start": "1622120",
    "end": "1631160"
  },
  {
    "text": "or whatever. And without having to bind your types \nto your code, like new Python encourages us or  ",
    "start": "1631160",
    "end": "1640240"
  },
  {
    "text": "like TypeScript, you'd be able to somehow express \nit via JSON Schema or another language. The idea  ",
    "start": "1640240",
    "end": "1649240"
  },
  {
    "text": "will be smart enough to give you errors and \nfeedback as you type. And then it's what I call,  ",
    "start": "1649240",
    "end": "1657240"
  },
  {
    "text": "you have the cake and you have cut it.\nI find it super interesting because we're  ",
    "start": "1657240",
    "end": "1664080"
  },
  {
    "text": "obviously, we're in the world of dynamic \nlanguages here, right? And obviously,   there's a whole different set of functional \nprogramming languages that are static types, the  ",
    "start": "1664080",
    "end": "1672080"
  },
  {
    "text": "sort of Haskells of this world, the TypeScripts \nin the end now, I guess. And they're all trying   to solve similar problems, but they're solving it \nin very, very different ways. What is it you think  ",
    "start": "1672080",
    "end": "1680679"
  },
  {
    "text": "about data-oriented programming in particular, \nthat gives you something extra that gives you  ",
    "start": "1680680",
    "end": "1685800"
  },
  {
    "text": "something different from the other solutions?\nI think it gives you the freedom because  ",
    "start": "1685800",
    "end": "1693160"
  },
  {
    "text": "even in TypeScript when you want to write a \ngeneric function, it's difficult. TypeScript,  ",
    "start": "1693160",
    "end": "1698920"
  },
  {
    "text": "you have to work against TypeScript. I try to use \na library like Lodash in TypeScript, and for most  ",
    "start": "1698920",
    "end": "1707200"
  },
  {
    "text": "of the functions, it works. But for some of them, \nthe types are too dynamic that you have to tell,  ",
    "start": "1707200",
    "end": "1712320"
  },
  {
    "text": "\"Okay, you know what? It's any type. Don't care. \nI don't care.\" And so, back to what you said about  ",
    "start": "1712320",
    "end": "1721320"
  },
  {
    "text": "the tiny types and the big types, I think that we \nwant the ability to have when you have low-level  ",
    "start": "1721320",
    "end": "1730039"
  },
  {
    "text": "pieces of data that are generic, to have the \nability to say, \"I don't mind.\" I don't want   the compiler to bother me, and I don't have \nto do things like that to convince the type  ",
    "start": "1730040",
    "end": "1740120"
  },
  {
    "text": "system that it's okay here. I want to decide.\nAnd for the big things, for the high-level  ",
    "start": "1740120",
    "end": "1745960"
  },
  {
    "text": "business entities where there are no surprises, \nyou want validation, but you want also the ability  ",
    "start": "1745960",
    "end": "1755640"
  },
  {
    "text": "to deal with surprises or nullability, which \nI'm not sure that TypeScript or Java are yet  ",
    "start": "1756240",
    "end": "1764720"
  },
  {
    "text": "there. But I think both communities have to learn \nfrom each other instead of fighting and saying,  ",
    "start": "1764720",
    "end": "1772919"
  },
  {
    "text": "\"Types are good. Types are bad. We are \nbetter. You are better.\" No, there is a  ",
    "start": "1772920",
    "end": "1779040"
  },
  {
    "text": "sweet spot in the middle. And I've been in touch \nwith James Clark from Ballerina. Ballerina is an  ",
    "start": "1779040",
    "end": "1787520"
  },
  {
    "text": "interesting language that leverages something \ncalled a flexible type system, which tries to  ",
    "start": "1787520",
    "end": "1796840"
  },
  {
    "text": "bring the best from both worlds. It's not static. \nIt's not dynamic. It's somewhere in the middle. ",
    "start": "1796840",
    "end": "1803000"
  },
  {
    "text": "And James gave me this great analogy that types \nare not maps. They are glasses through which you  ",
    "start": "1803000",
    "end": "1813120"
  },
  {
    "text": "look at reality. But the reality is untyped. And \nsometimes you could look at the same reality with  ",
    "start": "1813120",
    "end": "1820000"
  },
  {
    "text": "pink glasses or with blue glasses. And it's \nthe same reality. So, back to your example,  ",
    "start": "1820000",
    "end": "1825840"
  },
  {
    "text": "you have a hash map, and from my perspective, it's \na user with just the first name and the last name.  ",
    "start": "1825840",
    "end": "1831640"
  },
  {
    "text": "So, that's my glasses. And from your perspective, \nit's a user with first name, last name, full name,  ",
    "start": "1831640",
    "end": "1837040"
  },
  {
    "text": "and address. But the reality is the same. \nIt is just you change glasses. And I think  ",
    "start": "1837040",
    "end": "1843200"
  },
  {
    "text": "that traditionally, languages and static-type \nsystems tend to confuse maps with reality. And  ",
    "start": "1843200",
    "end": "1851039"
  },
  {
    "text": "you superimpose your mental thinking of the \nreality and you consider it as the reality,  ",
    "start": "1851040",
    "end": "1857600"
  },
  {
    "text": "and that's the source of suffering.\nWho is it? James? ",
    "start": "1857600",
    "end": "1863960"
  },
  {
    "text": "James Clark.\nJames Clark. So, thank you, James.   I'm gonna steal that. That's going into my toolkit \nfor explaining stuff. Because that's brilliant. ",
    "start": "1863960",
    "end": "1873880"
  },
  {
    "text": "James Lewis:  So, we talked about the, well, \nthe first two and then the fourth principle.   We said we'd come back to the third principle.\nYes. So, the third one I think is the easiest  ",
    "start": "1873880",
    "end": "1883200"
  },
  {
    "start": "1874000",
    "end": "2318000"
  },
  {
    "text": "one to convince, it's immutability. And I think \nevery experienced developer, no matter if you are  ",
    "start": "1883200",
    "end": "1890559"
  },
  {
    "text": "from Java or C or JavaScript would agree that \nimmutability is a value. If you can afford it,  ",
    "start": "1890560",
    "end": "1899320"
  },
  {
    "text": "it's better. What's the problem? The problem is \nperformance. And because when we say immutability,  ",
    "start": "1899320",
    "end": "1907080"
  },
  {
    "text": "we don't mean things that never change. We mean \nmanaging changes in an immutable way. And what  ",
    "start": "1907080",
    "end": "1915880"
  },
  {
    "text": "does it mean? It means, let's say we have a cart \nwith two items. We represent this cart as a piece  ",
    "start": "1915880",
    "end": "1924760"
  },
  {
    "text": "of data, and now the user adds a third item. So, \nmanaging it in an immutable way would be to create  ",
    "start": "1924760",
    "end": "1932560"
  },
  {
    "text": "a new cart with the third item. Now we have two \ncarts, one with two, and one with three. And then  ",
    "start": "1932560",
    "end": "1938200"
  },
  {
    "text": "you use another one with four or five. We have \ntwo potential problems, a memory problem. We could  ",
    "start": "1938200",
    "end": "1945080"
  },
  {
    "text": "have millions of carts and computational problems, \nbecause each time we create a new cart, we have to  ",
    "start": "1945080",
    "end": "1952399"
  },
  {
    "text": "kind of deep clone the previous card. So, it takes \ntime. So, until 2009, that was the biggest problem  ",
    "start": "1952400",
    "end": "1961800"
  },
  {
    "text": "with immutable data. But still, in many cases, \nperformance is not a problem because your data  ",
    "start": "1961800",
    "end": "1968840"
  },
  {
    "text": "is not as big as you might think. If you have a \ncard with 10 items up to 100 items, it won't be a   problem to deep clone. But when it gets to another \nthousands of items, and in the book, I used the  ",
    "start": "1968840",
    "end": "1980080"
  },
  {
    "text": "example of a library catalog, which could have \nmillions of books. And now, you add another book. ",
    "start": "1980080",
    "end": "1985799"
  },
  {
    "text": "So, since the event of Clojure in 2009, we have \npersistent data structures, which is an efficient  ",
    "start": "1985800",
    "end": "1994200"
  },
  {
    "text": "implementation of managing chains. I won't go \ninto the details because I want you guys to  ",
    "start": "1994200",
    "end": "2000480"
  },
  {
    "text": "read the book, but, I give you just a hint, it's \nvery similar to what Git does. In Git, you have  ",
    "start": "2000480",
    "end": "2008080"
  },
  {
    "text": "this magic that you can create a new commit \nand it's fast as light, but the whole history  ",
    "start": "2008080",
    "end": "2013720"
  },
  {
    "text": "is available. And when you create a new commit and \nyou push it, you don't have a replica of the whole  ",
    "start": "2013720",
    "end": "2022240"
  },
  {
    "text": "database. Right? And you don't have Deltas. It \nworks differently. It's called structural sharing  ",
    "start": "2022240",
    "end": "2029080"
  },
  {
    "text": "and persistent data structures leverage it in a \nvery smart way. And it's smart in the sense that,  ",
    "start": "2029080",
    "end": "2035080"
  },
  {
    "text": "like in Git as a developer, you don't need \nto understand the technical details. So,  ",
    "start": "2035080",
    "end": "2040519"
  },
  {
    "text": "it just works. And since 2009, those persistent \ndata structures, sometimes we call them HAMT,  ",
    "start": "2040520",
    "end": "2049560"
  },
  {
    "text": "Hash Array Mapped Tries, T-R-I-E-S, have been \nported to virtually any programming language.  ",
    "start": "2049560",
    "end": "2058240"
  },
  {
    "text": "Facebook ported them to JavaScript, ImmutableJS. \nIt has been ported to Scala, to Python, to C++,  ",
    "start": "2058240",
    "end": "2068639"
  },
  {
    "text": "to Ruby, to Erlang, to whatever. So, we have \nno reason to tolerate the data mutation.  ",
    "start": "2068640",
    "end": "2077480"
  },
  {
    "text": "And I will just mention it's another way to \ntame the state because if data is immutable,  ",
    "start": "2077480",
    "end": "2083320"
  },
  {
    "text": "we have less state to care about. So, that's \nprinciple number three to keep data immutable. ",
    "start": "2083320",
    "end": "2090000"
  },
  {
    "text": "Cool. Well, I mean, it sounds super interesting. \nI mean, my background is in distributed systems  ",
    "start": "2090000",
    "end": "2097640"
  },
  {
    "text": "and that kind of thing. And one of the things \nthat attracted me about distributed systems was  ",
    "start": "2097640",
    "end": "2103319"
  },
  {
    "text": "that it was another way of managing complexity. \nSo, when faced with a big problem, chop up into  ",
    "start": "2103320",
    "end": "2109600"
  },
  {
    "text": "lots of really small problems and solve the small \nproblems, you know? Sam Newman a good friend of  ",
    "start": "2109600",
    "end": "2114880"
  },
  {
    "text": "mine and author of \"Building Microservices,\" sort \nof says that quite a lot. That was one way I sort  ",
    "start": "2114880",
    "end": "2120759"
  },
  {
    "text": "of settled on in the world of solving the problem \nof having big things that were complicated and  ",
    "start": "2120760",
    "end": "2127520"
  },
  {
    "text": "complex with lots of accidental complexity to take \nthose things and break them up into smaller bits.",
    "start": "2127520",
    "end": "2133720"
  },
  {
    "text": "This is a different approach to \ntry and tackle the same problem,   the sort of cognitive overloads you get when \nyou're trying to think about these large code  ",
    "start": "2133720",
    "end": "2142160"
  },
  {
    "text": "bases and trying to work with them and so \non. I mean, there's one thing that always,   and maybe this is a bit mean, I don't know, but \none thing that I always struggled with Clojure,  ",
    "start": "2142160",
    "end": "2155000"
  },
  {
    "text": "and I think it's because I'm stupid. I think \nthat's why is like more so than any other  ",
    "start": "2155000",
    "end": "2162080"
  },
  {
    "text": "language I've ever written, maybe barring \nFortran 77 back in university, when I came  ",
    "start": "2162080",
    "end": "2173600"
  },
  {
    "text": "back to Clojure after I'd written it and looked \nat what I'd written, it was the language I find  ",
    "start": "2173600",
    "end": "2180000"
  },
  {
    "text": "most difficult to understand the code that I had \nwritten. Does that make sense? It's almost like  ",
    "start": "2180000",
    "end": "2186720"
  },
  {
    "text": "I'd write some Clojure and I'd solve a problem in \na really elegant, beautiful way, in a really small  ",
    "start": "2187360",
    "end": "2193240"
  },
  {
    "text": "number of lines of code. And then I'd come back a \nweek later and I would have no idea what it did. ",
    "start": "2193240",
    "end": "2198600"
  },
  {
    "text": "Oh, I think, yeah.\nDoes that resonate?  Yes. I think I had the same kind of thing when I \ndiscovered functional programming and the power  ",
    "start": "2198600",
    "end": "2208000"
  },
  {
    "text": "of anonymous functions. And I would write the \nwhole data pipeline with 10 lines of anonymous  ",
    "start": "2208000",
    "end": "2213720"
  },
  {
    "text": "function that made me feel very smart, but that \nnobody could read. It took me a while to discover  ",
    "start": "2213720",
    "end": "2221400"
  },
  {
    "text": "that probably the better way to write it is to \ngive a name to each step to give a name to the  ",
    "start": "2221400",
    "end": "2229920"
  },
  {
    "text": "function and to call them one after the other. So, \nit might be less elegant and might be a little bit   more verbose, but I think it's much more readable \nfor other people or other versions of myself. ",
    "start": "2229920",
    "end": "2241640"
  },
  {
    "text": "Exactly. Future versions.\nFuture version of myself,   immutable version of myself. But, in data-oriented \nprogramming, the interesting thing about it is  ",
    "start": "2241640",
    "end": "2252640"
  },
  {
    "text": "that you don't have to leave your zone of comfort \nin terms of the way your habits, the way you write  ",
    "start": "2252640",
    "end": "2260920"
  },
  {
    "text": "code, the way you encapsulate...\nYour favorite language.  ...modules for language, it's a different way \nto represent your data. And if you take into  ",
    "start": "2260920",
    "end": "2274960"
  },
  {
    "text": "account principle number four about schema \nand data validation, and don't go too much  ",
    "start": "2274960",
    "end": "2283640"
  },
  {
    "text": "into the wild I don't think you will have this \nproblem. You will write code in a way that should  ",
    "start": "2283640",
    "end": "2290559"
  },
  {
    "text": "feel familiar to you. And hopefully, you'll have \nfewer bugs. Or when you want to add a new feature,  ",
    "start": "2290560",
    "end": "2301760"
  },
  {
    "text": "it'll take less headache to figure \nout what's going on. You won't have  ",
    "start": "2301760",
    "end": "2308160"
  },
  {
    "text": "to understand the whole system to modify a bit \nthe functionality of a small part of the system. ",
    "start": "2308160",
    "end": "2318480"
  },
  {
    "start": "2318000",
    "end": "2379000"
  },
  {
    "text": "So, what I'm hearing is we should buy the book \nbecause it'll teach us how to write code that's   gonna better able us to add new features and \nmodify existing codes more easily. We'll hopefully  ",
    "start": "2318480",
    "end": "2330200"
  },
  {
    "text": "have fewer bugs. These are big promises. I'm \ncertainly gonna take a look at your book. It  ",
    "start": "2330200",
    "end": "2335920"
  },
  {
    "text": "sounds super, super interesting. But thank you \nvery much. I think we'll call it a day here. ",
    "start": "2335920",
    "end": "2342359"
  },
  {
    "text": "Thank you.\nThank you very much for coming to the   \"GOTO Book Club.\" It's been a pleasure.\nPerfect.",
    "start": "2342360",
    "end": "2350880"
  }
]