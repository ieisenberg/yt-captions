[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "[Applause] as he said my name is Ben Darnell I'm the co-founder and CTO of cockroach labs",
    "start": "12490",
    "end": "19689"
  },
  {
    "text": "and I'm here today to talk to you about how and why you should run your database",
    "start": "19689",
    "end": "24880"
  },
  {
    "text": "like a CDN to optimize your applications performance for a global audience so to",
    "start": "24880",
    "end": "31720"
  },
  {
    "start": "30000",
    "end": "57000"
  },
  {
    "text": "give you a preview of the of the rest of the talk I'm going to first explain what it is exactly I'm talking about when I",
    "start": "31720",
    "end": "37720"
  },
  {
    "text": "say run your database like a CDN and then I'll walk through an example using",
    "start": "37720",
    "end": "43030"
  },
  {
    "text": "a fictional startup called mover and and then explain some of the different",
    "start": "43030",
    "end": "49510"
  },
  {
    "text": "replication strategies that you may want to use to keep your keep your data distributed across the globe and then",
    "start": "49510",
    "end": "56230"
  },
  {
    "text": "I'll wrap everything up so for those of you that haven't heard of cockroach TB with it's a distributed consistent",
    "start": "56230",
    "end": "63969"
  },
  {
    "text": "sequel transactional database so we're for OLTP workloads open source with with",
    "start": "63969",
    "end": "70450"
  },
  {
    "text": "an Enterprise Edition available this is not not strictly a talk about cockroach",
    "start": "70450",
    "end": "75459"
  },
  {
    "text": "DB it's more about general principles that you can you can apply to any database of course including including",
    "start": "75459",
    "end": "81130"
  },
  {
    "text": "cockroach so first of all just to get everyone on the same page what is a CDN",
    "start": "81130",
    "end": "88500"
  },
  {
    "start": "82000",
    "end": "210000"
  },
  {
    "text": "so a CDN or content delivery network is a global network of servers and caches",
    "start": "88500",
    "end": "94649"
  },
  {
    "text": "these are commonly used for static content you're probably familiar with them they're available for many",
    "start": "94649",
    "end": "101050"
  },
  {
    "text": "commercial providers including CloudFlare fastly Akamai Amazon and",
    "start": "101050",
    "end": "106209"
  },
  {
    "text": "other cloud providers and so the goal with the CDN is to get your data distributed around the world so that so",
    "start": "106209",
    "end": "112690"
  },
  {
    "text": "that the data can come from a server that's closest to to the user now why is this important well if we consider the",
    "start": "112690",
    "end": "119619"
  },
  {
    "text": "the alternative if you didn't have a CDN if you just had a single web server somewhere in the world then although all",
    "start": "119619",
    "end": "125679"
  },
  {
    "text": "the traffic from all of your users has to come to that to that one place and the problem with this is the speed of",
    "start": "125679",
    "end": "131950"
  },
  {
    "text": "light it takes it takes a significant enough amount of time for data to travel",
    "start": "131950",
    "end": "137410"
  },
  {
    "text": "the globe so from Amsterdam to New York it takes about 80 milliseconds 170",
    "start": "137410",
    "end": "143290"
  },
  {
    "text": "milliseconds in South Africa over a quarter of a second to two parts of Asia or the or the southern hemisphere and so",
    "start": "143290",
    "end": "150640"
  },
  {
    "text": "this is this is really noticeable it's Amazon and Google have done a lot of",
    "start": "150640",
    "end": "155830"
  },
  {
    "text": "studies to show that that that a quarter of a second delay in serving serving",
    "start": "155830",
    "end": "161380"
  },
  {
    "text": "requests actually meaningfully changes your your applications conversion rate and this can this can cost you sales and",
    "start": "161380",
    "end": "167950"
  },
  {
    "text": "business and in a database this can be compounded by the fact that many",
    "start": "167950",
    "end": "173080"
  },
  {
    "text": "applications have to make multiple round trips to their database while servicing a single request and this can can cause",
    "start": "173080",
    "end": "179440"
  },
  {
    "text": "these these delays to be multiplied so so for static content the the usual",
    "start": "179440",
    "end": "186160"
  },
  {
    "text": "solution for this is a CDM this gives you a network of servers distributed around the world so that so that users",
    "start": "186160",
    "end": "192640"
  },
  {
    "text": "always have a nearby nearby post to talk to and this is all that this has become",
    "start": "192640",
    "end": "198850"
  },
  {
    "text": "a lot easier than it used to be with the with the rise of cloud providers because it's it's very easy now to get to get",
    "start": "198850",
    "end": "206050"
  },
  {
    "text": "machines set up in in many different different locations around the world",
    "start": "206050",
    "end": "211380"
  },
  {
    "start": "210000",
    "end": "569000"
  },
  {
    "text": "so CD ends are a nice solution to this problem for static content and why your",
    "start": "211380",
    "end": "217210"
  },
  {
    "text": "database is different why do we why do we still have this problem for for databases well the first reason is that",
    "start": "217210",
    "end": "224470"
  },
  {
    "text": "it comes down to how how this data gets updated with a content delivery network it's used for mostly static content it",
    "start": "224470",
    "end": "232120"
  },
  {
    "text": "can be updated you know frequently many many times a day potentially but that's still not",
    "start": "232120",
    "end": "237130"
  },
  {
    "text": "very common in the in the grand scheme of computer speeds and it's also a",
    "start": "237130",
    "end": "243580"
  },
  {
    "text": "mostly centralized process you have a content management system running",
    "start": "243580",
    "end": "249040"
  },
  {
    "text": "somewhere which is responsible for feeding feeding your updated content into the into the CDN and this is this",
    "start": "249040",
    "end": "256359"
  },
  {
    "text": "is a relatively relatively centralized process the details can vary depending on how you how you work but it's it's",
    "start": "256359",
    "end": "265960"
  },
  {
    "text": "mostly controlled from from within your within your organization finally CD n CD",
    "start": "265960",
    "end": "274810"
  },
  {
    "text": "ends can generally get by with a fairly relaxed consistency model they they",
    "start": "274810",
    "end": "280090"
  },
  {
    "text": "sometimes need to do do atomic swaps of multiple units but for the most part you",
    "start": "280090",
    "end": "285520"
  },
  {
    "text": "can you're okay with asynchronous replication and the fact that it may take it may take a fraction of a second",
    "start": "285520",
    "end": "291940"
  },
  {
    "text": "or or many seconds potentially for your for your data to make it make it around the globe in a transactional database on",
    "start": "291940",
    "end": "300490"
  },
  {
    "text": "the other hand your updates are very frequent often in the thousands per second they're typically consumer",
    "start": "300490",
    "end": "308099"
  },
  {
    "text": "initiated so this would be whenever a user adds something to their shopping cart for example this is this is a",
    "start": "308099",
    "end": "315039"
  },
  {
    "text": "typical transaction that needs to be needs to be very fast and it's it's used in very",
    "start": "315039",
    "end": "320949"
  },
  {
    "text": "complex ways by your application which is easiest to build if you can if you can rely on consistency from the",
    "start": "320949",
    "end": "327610"
  },
  {
    "text": "database if you don't have if you don't have consistency if you're working in an eventually consistent model then then it",
    "start": "327610",
    "end": "335319"
  },
  {
    "text": "becomes a lot harder to develop your application because you don't you can never be sure whether whether what",
    "start": "335319",
    "end": "340630"
  },
  {
    "text": "you're seeing is the is the latest data and so and the the second the second",
    "start": "340630",
    "end": "347979"
  },
  {
    "text": "reason why what why CD ends are not are not applicable to or we can't just",
    "start": "347979",
    "end": "353349"
  },
  {
    "text": "directly take the lessons of CD ends and apply it to databases is that for a long time databases just weren't weren't cut",
    "start": "353349",
    "end": "358840"
  },
  {
    "text": "out for this for this kind of task in the 90s you you might replicate your",
    "start": "358840",
    "end": "364120"
  },
  {
    "text": "data for fault tolerance and and that would be it that you do have two servers right next",
    "start": "364120",
    "end": "370210"
  },
  {
    "text": "to each other or maybe in two different in two different data centers but you weren't really thinking about about getting getting your data distributed",
    "start": "370210",
    "end": "378150"
  },
  {
    "text": "for performance reasons the same thing in the 2000s with the rise of the no",
    "start": "378150",
    "end": "383289"
  },
  {
    "text": "sequel movement you would charge your data for scalability and no sequel in fact made significant sacrifices in data",
    "start": "383289",
    "end": "390219"
  },
  {
    "text": "model and flexibility in order to make that sharding easy to do but again it",
    "start": "390219",
    "end": "395259"
  },
  {
    "text": "was performance was a was a secondary concern and in both of these in both of these scenarios yet you would think",
    "start": "395259",
    "end": "401710"
  },
  {
    "text": "about distributing distributing your database as a price to be paid in terms of performance it",
    "start": "401710",
    "end": "407560"
  },
  {
    "text": "wasn't necessarily giving you get given you better performance on your user",
    "start": "407560",
    "end": "412840"
  },
  {
    "text": "facing queries but now in in 2018 we think it's time to distribute your data",
    "start": "412840",
    "end": "420070"
  },
  {
    "text": "around the world - for explicitly for performance and improving latency for your for your users and the capabilities",
    "start": "420070",
    "end": "428440"
  },
  {
    "text": "both in terms of cloud infrastructure and specific database technologies have gotten to the point where this is this",
    "start": "428440",
    "end": "434740"
  },
  {
    "text": "is a good idea and so now with a distributed database you can you can achieve better latency for your users",
    "start": "434740",
    "end": "441460"
  },
  {
    "text": "than than is possible with a more centralized solution so the big lesson",
    "start": "441460",
    "end": "446740"
  },
  {
    "text": "that I want to impart in this talk is that a database is not just a place to store your data it's a tool to get that",
    "start": "446740",
    "end": "451900"
  },
  {
    "text": "data where it's where it's going to be needed so now I'm going to walk you",
    "start": "451900",
    "end": "458380"
  },
  {
    "text": "through the story of mover which is a fictional vehicle sharing startup this",
    "start": "458380",
    "end": "464710"
  },
  {
    "text": "is that they do have vehicle sharing cars bikes scooters skis ice skates",
    "start": "464710",
    "end": "469720"
  },
  {
    "text": "boats basically any kind of vehicle that the Unicode consortium has decided to make into an emoji and they launched in",
    "start": "469720",
    "end": "476950"
  },
  {
    "text": "Amsterdam last year and are looking at expanding globally so the reason that",
    "start": "476950",
    "end": "483670"
  },
  {
    "text": "that we chose a vehicle sharing application as as an example here is",
    "start": "483670",
    "end": "489250"
  },
  {
    "text": "because it's a good illustration of a couple of different types of data that we can we can explore in in some detail",
    "start": "489250",
    "end": "496300"
  },
  {
    "text": "here so that they're the two main categories of data are exemplified by",
    "start": "496300",
    "end": "501510"
  },
  {
    "text": "the vehicle data which is tied to a particular city it's updated very frequently and this is really the most",
    "start": "501510",
    "end": "508660"
  },
  {
    "text": "important data that mover has in terms of the user that the user perceived",
    "start": "508660",
    "end": "513669"
  },
  {
    "text": "performance of the app because every time you start up the app it's got to load up a list of the available vehicles",
    "start": "513670",
    "end": "520090"
  },
  {
    "text": "and show you where where they are the second category of user data of data is",
    "start": "520090",
    "end": "526960"
  },
  {
    "text": "user data users are also are also associated with a home city but they",
    "start": "526960",
    "end": "532990"
  },
  {
    "text": "also they can move around when you're on holiday in another country you want to be able to use your",
    "start": "532990",
    "end": "538399"
  },
  {
    "text": "your same mover account to get a to get a bike even when you're far away from",
    "start": "538399",
    "end": "543470"
  },
  {
    "text": "from home this data is also updated generally less frequently than the than",
    "start": "543470",
    "end": "549230"
  },
  {
    "text": "the vehicle data and it can be cached pretty aggressively in the app because the user is only modifying their own",
    "start": "549230",
    "end": "555290"
  },
  {
    "text": "data they're not not there's not as many updates that cross from one user to another so will be what we'll be talking",
    "start": "555290",
    "end": "563300"
  },
  {
    "text": "about different replication strategies for these these two types of data as we as we walk through this example so phase",
    "start": "563300",
    "end": "570620"
  },
  {
    "start": "569000",
    "end": "633000"
  },
  {
    "text": "one of movers launch they were in a single city so mover launched in Amsterdam with with",
    "start": "570620",
    "end": "577070"
  },
  {
    "text": "one data center just because you're using a distributed database doesn't mean you have to distribute everything",
    "start": "577070",
    "end": "582709"
  },
  {
    "text": "from day one it can be a lot simpler to start out with a with a single a single location and scale up from there as you",
    "start": "582709",
    "end": "590240"
  },
  {
    "text": "need it the first reason that that mover decided to to scale out or and and replicate",
    "start": "590240",
    "end": "596450"
  },
  {
    "text": "their data was actually for fault tolerance because because their operations people were getting paged in",
    "start": "596450",
    "end": "602450"
  },
  {
    "text": "the middle of the night and that was that was no good so you want to make sure that the the application is always",
    "start": "602450",
    "end": "607670"
  },
  {
    "text": "available and so you can can replicate across across multiple data centers in",
    "start": "607670",
    "end": "612709"
  },
  {
    "text": "in a single region and so here you have Amsterdam Berlin and Paris it's all",
    "start": "612709",
    "end": "618320"
  },
  {
    "text": "pretty pretty close together in terms of as far as the speed of light goes it's only only a few milliseconds or tens of",
    "start": "618320",
    "end": "624829"
  },
  {
    "text": "milliseconds between between these locations and so that is not not going to be much of a performance problem for",
    "start": "624829",
    "end": "631579"
  },
  {
    "text": "your for your users in the next phase mover expanded into into more cities so",
    "start": "631579",
    "end": "641480"
  },
  {
    "start": "633000",
    "end": "656000"
  },
  {
    "text": "starting out elsewhere in Europe and the latency is still is pretty good from from Stockholm Rome Madrid anywhere else",
    "start": "641480",
    "end": "649610"
  },
  {
    "text": "in Europe it's a pretty good pretty good latency just within the within the",
    "start": "649610",
    "end": "654740"
  },
  {
    "text": "region but when you when you expand further out to the rest of the world",
    "start": "654740",
    "end": "659899"
  },
  {
    "start": "656000",
    "end": "728000"
  },
  {
    "text": "then things start to get more complicated because now you have the speed of light coming back into the",
    "start": "659899",
    "end": "666700"
  },
  {
    "text": "equation if you just keep your keep your setup with a few servers in Europe then",
    "start": "666700",
    "end": "672010"
  },
  {
    "text": "you're back to having two hundred millisecond plus latencies for your users on the other side of the world and",
    "start": "672010",
    "end": "680320"
  },
  {
    "text": "if you just take take your three your three-day data centers out of Europe and",
    "start": "680320",
    "end": "685329"
  },
  {
    "text": "spread them around put one in New York one in Tokyo and leave one in Europe then that that addresses part of the",
    "start": "685329",
    "end": "692920"
  },
  {
    "text": "problem it lets you read your data from from all of these all of these different",
    "start": "692920",
    "end": "698230"
  },
  {
    "text": "locations much more quickly but if you're writing the data then that data still has to be replicated across long",
    "start": "698230",
    "end": "704019"
  },
  {
    "text": "distances and that is expensive and so the solution for that the the what I",
    "start": "704019",
    "end": "711610"
  },
  {
    "text": "think is that is the best solution for that that preserves both read and write performance is to subdivide your your",
    "start": "711610",
    "end": "717970"
  },
  {
    "text": "system into multiple multiple sub clusters that can be within within a region and put your put your local what",
    "start": "717970",
    "end": "726279"
  },
  {
    "text": "localized data there so now I'm going to",
    "start": "726279",
    "end": "731320"
  },
  {
    "start": "728000",
    "end": "808000"
  },
  {
    "text": "go into into some more detail about how how exactly you can you can achieve this by replicating your rate of both within",
    "start": "731320",
    "end": "737709"
  },
  {
    "text": "and across regions as appropriate one",
    "start": "737709",
    "end": "743019"
  },
  {
    "text": "way you could do this is just by using completely separate databases you could have a mover Europe database a mover",
    "start": "743019",
    "end": "748630"
  },
  {
    "text": "Asia database and a mover America database which would which would serve the different the different regions but",
    "start": "748630",
    "end": "756850"
  },
  {
    "text": "this is a very very cumbersome solution because it's it's operationally complicated to manage the three separate",
    "start": "756850",
    "end": "764380"
  },
  {
    "text": "clusters and you can't do you can't do transactions across your different your different databases which can be a",
    "start": "764380",
    "end": "770589"
  },
  {
    "text": "problem when you're dealing with with users that can move around and want to be able to use the use the service when",
    "start": "770589",
    "end": "775750"
  },
  {
    "text": "they're when they're traveling internationally so in cockroach DB we",
    "start": "775750",
    "end": "781630"
  },
  {
    "text": "have the the solution that you can have all of you can have everything's replicated in both ways you can have one",
    "start": "781630",
    "end": "789670"
  },
  {
    "text": "giant cluster that spans the globe and you can also subdivide specific tables",
    "start": "789670",
    "end": "795220"
  },
  {
    "text": "and and locate data in different in different regions and so this gives",
    "start": "795220",
    "end": "800230"
  },
  {
    "text": "you the flexibility to to choose the right replication model for particular types of data in your in your",
    "start": "800230",
    "end": "806949"
  },
  {
    "text": "application so to explain in more detail what how exactly replication works in",
    "start": "806949",
    "end": "812949"
  },
  {
    "start": "808000",
    "end": "926000"
  },
  {
    "text": "cockroach DB first of all from the applications perspective it looks just like one big database there's no there's",
    "start": "812949",
    "end": "820209"
  },
  {
    "text": "no user visible distinction that that you're having to cross these these",
    "start": "820209",
    "end": "825339"
  },
  {
    "text": "regions or other boundaries there's no restrictions on what you can do in transactions your tables can scale can",
    "start": "825339",
    "end": "832029"
  },
  {
    "text": "scale up and down as much as as much as you need and you can you can do transactions that span span the entire",
    "start": "832029",
    "end": "837939"
  },
  {
    "text": "globe if you if you need to but we also give you fine-grained control over where exactly your data lives we have this",
    "start": "837939",
    "end": "845199"
  },
  {
    "text": "both in the in the at the table level and at the at the row level and as I",
    "start": "845199",
    "end": "852819"
  },
  {
    "text": "said Trant transactions can can include include data even when it when it spans different different regions cockroach",
    "start": "852819",
    "end": "860829"
  },
  {
    "text": "DVS replication is based on quorum or consensus model this means that each",
    "start": "860829",
    "end": "866769"
  },
  {
    "text": "record has three or more replicas one of these is the leader at any time you",
    "start": "866769",
    "end": "872500"
  },
  {
    "text": "typically have odd numbers of replicas because that that gives you a way to break ties so typically you'd use three",
    "start": "872500",
    "end": "878050"
  },
  {
    "text": "or five or maybe seven replicas depending on depending on your applications needs and whenever you want",
    "start": "878050",
    "end": "884290"
  },
  {
    "text": "to write to the data that right has to go to a majority of the replicas we",
    "start": "884290",
    "end": "889449"
  },
  {
    "text": "replicate data synchronously as part of our guarantee of fault tolerance and consistency this means that by the time",
    "start": "889449",
    "end": "896139"
  },
  {
    "text": "your your commit statement has returned to the application your data is is",
    "start": "896139",
    "end": "901779"
  },
  {
    "text": "persisted on multiple in on multiple data centers and so you can be sure that it will be available even in the event",
    "start": "901779",
    "end": "907839"
  },
  {
    "text": "of machine or datacenter failure so",
    "start": "907839",
    "end": "913120"
  },
  {
    "text": "write writes talk to a majority of nodes reads go to the leader because the leader is guaranteed to be up to date",
    "start": "913120",
    "end": "919750"
  },
  {
    "text": "but it may not necessarily be the nearest replicas in the in the in the replicas set so",
    "start": "919750",
    "end": "929450"
  },
  {
    "start": "926000",
    "end": "1012000"
  },
  {
    "text": "go through a a specific example of this using using data from mover we have",
    "start": "929450",
    "end": "934730"
  },
  {
    "text": "we're gonna look at the vehicle data first this is the data that is most strongly localized in in the system it's",
    "start": "934730",
    "end": "941060"
  },
  {
    "text": "the vehicles are tied to a city for the purposes of our data model they never that they never moved from one from one",
    "start": "941060",
    "end": "947840"
  },
  {
    "text": "city to another and and so here it's it's really important that the reads",
    "start": "947840",
    "end": "953300"
  },
  {
    "text": "that the reads and writes are both are both fast from within the region of the region and so you don't want to just",
    "start": "953300",
    "end": "959420"
  },
  {
    "text": "replicate the data globally because then you may have to talk talk remotely to get your your two out of three or three",
    "start": "959420",
    "end": "964850"
  },
  {
    "text": "out of five majority in order to commit the right and so in a in a simple global",
    "start": "964850",
    "end": "973250"
  },
  {
    "text": "replication set up your reads can still be can still be good because if you're reading from Vancouver for example and",
    "start": "973250",
    "end": "979910"
  },
  {
    "text": "that read can be served from from New York you're still not crossing crossing an ocean and so that that can be done",
    "start": "979910",
    "end": "985370"
  },
  {
    "text": "within within about 70 milliseconds but when you want to write this is this is",
    "start": "985370",
    "end": "990950"
  },
  {
    "text": "more complicated it's because the writes have to go to a majority and so your",
    "start": "990950",
    "end": "995960"
  },
  {
    "text": "write is going to go first to New York to get into the system and then to Amsterdam or whatever your next closest",
    "start": "995960",
    "end": "1001990"
  },
  {
    "text": "replica is and so then you have to add this up and so writing to a to a",
    "start": "1001990",
    "end": "1007360"
  },
  {
    "text": "globally replicated table is going to take in this case 150 milliseconds and",
    "start": "1007360",
    "end": "1014770"
  },
  {
    "text": "so that's that's not ideal so we want to we want to get that down get that down to something that can be",
    "start": "1014770",
    "end": "1020110"
  },
  {
    "text": "done within within the the North American region so the way we set this",
    "start": "1020110",
    "end": "1025660"
  },
  {
    "text": "up is a three step process first you can figure the server's this is an",
    "start": "1025660",
    "end": "1031000"
  },
  {
    "text": "abbreviated look at what it takes to start up a cockroach DB cluster you can",
    "start": "1031000",
    "end": "1036040"
  },
  {
    "text": "give each each server a locality parameter which which tells the server where it fits in your your data",
    "start": "1036040",
    "end": "1042550"
  },
  {
    "text": "arrangement and this this gives you a custom customizable hierarchy to",
    "start": "1042550",
    "end": "1048580"
  },
  {
    "text": "distribute your data across across different different data centers and and different different regions and",
    "start": "1048580",
    "end": "1054250"
  },
  {
    "text": "availability zones and whenever you start up a cockroach cluster it's very",
    "start": "1054250",
    "end": "1060280"
  },
  {
    "text": "it's really simple you just it's a single process that you run and you give each node a join parameter",
    "start": "1060280",
    "end": "1066430"
  },
  {
    "text": "that tells it where it can find the other other members of the cluster step 2 is is to partition the data so we have",
    "start": "1066430",
    "end": "1074080"
  },
  {
    "text": "a some sequel extensions that we use to to change the change the table for a for",
    "start": "1074080",
    "end": "1080830"
  },
  {
    "text": "a partition use case the first the first thing to note about this about this create table statement is that we have",
    "start": "1080830",
    "end": "1087730"
  },
  {
    "text": "composite primary key that includes both the the country code and the and the",
    "start": "1087730",
    "end": "1093880"
  },
  {
    "text": "UUID for the vehicle this is important because we see the that the partitioning",
    "start": "1093880",
    "end": "1100240"
  },
  {
    "text": "and the location information as the as the first part of the primary key primary key or in some databases that's",
    "start": "1100240",
    "end": "1108310"
  },
  {
    "text": "it's called a cluster key is is used to determine where a record lives on on",
    "start": "1108310",
    "end": "1113380"
  },
  {
    "text": "disk in a in a non distributed database and so we've we've extended that concept to control where the data lives in our",
    "start": "1113380",
    "end": "1120130"
  },
  {
    "text": "distributed database so in so first of all in order to partition a table you need to give it a a primary key such",
    "start": "1120130",
    "end": "1127060"
  },
  {
    "text": "that the first part of the key is gives you the location and then you tell you",
    "start": "1127060",
    "end": "1132820"
  },
  {
    "text": "tell the server a little bit more about how exactly you want to partition it in this case we want to map map our country",
    "start": "1132820",
    "end": "1139780"
  },
  {
    "text": "codes into a into a couple of own names and this is this is a convenient a",
    "start": "1139780",
    "end": "1146800"
  },
  {
    "text": "convenience that you can use so that you don't have to you don't have to refer to",
    "start": "1146800",
    "end": "1152130"
  },
  {
    "text": "dozens of different of different configurations per country you can do this just based on based on the number",
    "start": "1152130",
    "end": "1159580"
  },
  {
    "text": "of regions that you have and and then you have the flexibility to change that that mapping so that as you add new",
    "start": "1159580",
    "end": "1165640"
  },
  {
    "text": "regions you can that you can change this later finally you configure the the",
    "start": "1165640",
    "end": "1172600"
  },
  {
    "text": "replication itself and so this is this is a simple but relatively simple it's a",
    "start": "1172600",
    "end": "1179470"
  },
  {
    "text": "little little ugly we're working on better better syntax for this but it's a it's a single invocation to set the",
    "start": "1179470",
    "end": "1185860"
  },
  {
    "text": "configuration for the for the Europe partition of the mover dot vehicles table to give it a constraint that it",
    "start": "1185860",
    "end": "1193210"
  },
  {
    "text": "needs three replicas with region equals EU and so this this is what heis the locality flags from the server",
    "start": "1193210",
    "end": "1200620"
  },
  {
    "text": "configurations together with the partition names in the table definition",
    "start": "1200620",
    "end": "1205710"
  },
  {
    "text": "so with this set with this configuration what does what does our replication time",
    "start": "1205710",
    "end": "1210730"
  },
  {
    "text": "look like now so now we have we have three servers in the US in New York",
    "start": "1210730",
    "end": "1216129"
  },
  {
    "text": "Denver and Miami and so when you when you now try to write from Vancouver that",
    "start": "1216129",
    "end": "1221710"
  },
  {
    "text": "write goes to Denver and New York instead of New York and Amsterdam and so this this takes about 85 milliseconds",
    "start": "1221710",
    "end": "1228309"
  },
  {
    "text": "instead of the 150 milliseconds that we saw previously so we've almost almost cut the latency",
    "start": "1228309",
    "end": "1233679"
  },
  {
    "text": "in half and this by the way is it's kind of an artificial example I chose these",
    "start": "1233679",
    "end": "1240549"
  },
  {
    "text": "cities to give you a nice big triangle on the map that's easily visible but in practice you could move these move these",
    "start": "1240549",
    "end": "1246759"
  },
  {
    "text": "data centers closer together and and typically get even better even better performance so second second type of",
    "start": "1246759",
    "end": "1255580"
  },
  {
    "start": "1252000",
    "end": "1426000"
  },
  {
    "text": "data that we look at is the user data so the user data as I said the users are associated with a with a home home city",
    "start": "1255580",
    "end": "1263289"
  },
  {
    "text": "generally so you could replicate it the same way give them a give them a city or",
    "start": "1263289",
    "end": "1268389"
  },
  {
    "text": "country code in their primary key and store the store the data tied to a particular region and that's going to",
    "start": "1268389",
    "end": "1275230"
  },
  {
    "text": "get that's going to be the best thing for write performance and so if you're writing to this user data a lot that that may be the way you want to go but I",
    "start": "1275230",
    "end": "1282850"
  },
  {
    "text": "think that the interesting case here is that if you care more about read performance than write performance and",
    "start": "1282850",
    "end": "1288490"
  },
  {
    "text": "your users are are mobile and may may travel around the world a lot then you can actually get better better read",
    "start": "1288490",
    "end": "1294610"
  },
  {
    "text": "performance by replicating them globally and one of the things that that empowers",
    "start": "1294610",
    "end": "1300159"
  },
  {
    "text": "this what's that sorry so what the reason that this is that this is",
    "start": "1300159",
    "end": "1305789"
  },
  {
    "text": "important is because the read performance depends on where the leader is reads go to a single node and this",
    "start": "1305789",
    "end": "1312580"
  },
  {
    "text": "this node is going to vary on a range by range or record by record basis and so",
    "start": "1312580",
    "end": "1320019"
  },
  {
    "text": "the really powerful thing that makes this it makes it possible to use this as",
    "start": "1320019",
    "end": "1325720"
  },
  {
    "text": "a as a strategy for for your user data is a is a trick that the cockroach TV",
    "start": "1325720",
    "end": "1332990"
  },
  {
    "text": "supports called follow the Sun and so this is that this is based on the",
    "start": "1332990",
    "end": "1338570"
  },
  {
    "text": "observation that any sort of application is is going to have daily patterns in its in its usage it's going to be tied",
    "start": "1338570",
    "end": "1345740"
  },
  {
    "text": "to two time zones and and daytime around the world user depending on your",
    "start": "1345740",
    "end": "1352850"
  },
  {
    "text": "application that peak may not always be the same some applications have a peak during the work day some applications",
    "start": "1352850",
    "end": "1358850"
  },
  {
    "text": "like Netflix have their peak in the evenings but it's still going to follow a follow a global daily cycle in which",
    "start": "1358850",
    "end": "1366320"
  },
  {
    "text": "you see the traffic kind of moving in a wave around the globe and so so in",
    "start": "1366320",
    "end": "1372679"
  },
  {
    "text": "cockroach DB we recognize this and for your data that is replicated globally we can move the leadership from one from",
    "start": "1372679",
    "end": "1379669"
  },
  {
    "text": "one region to another and so that as the as the Sun moves or moves around the world the the road can move with it and",
    "start": "1379669",
    "end": "1386539"
  },
  {
    "text": "so when the when the when most of your traffic is coming from from Europe and Europe and Africa then that then the",
    "start": "1386539",
    "end": "1394640"
  },
  {
    "text": "leaders leadership is going to be placed in in Europe when it's coming from the",
    "start": "1394640",
    "end": "1400039"
  },
  {
    "text": "Americas then then the leadership will be in that region and and so on when it comes back around to to Asia and so this",
    "start": "1400039",
    "end": "1408350"
  },
  {
    "text": "is this is a very powerful technique that's very very straightforward to use in fact you don't really have to do",
    "start": "1408350",
    "end": "1414500"
  },
  {
    "text": "anything it happens automatically in cockroach DB as long as you're as long",
    "start": "1414500",
    "end": "1419960"
  },
  {
    "text": "as your data is your access patterns follow this this sort of distribution so",
    "start": "1419960",
    "end": "1428030"
  },
  {
    "start": "1426000",
    "end": "1531000"
  },
  {
    "text": "in conclusion you were your users are global so your data should be too you",
    "start": "1428030",
    "end": "1435049"
  },
  {
    "text": "should think of think of Geographic replication of your database as a tool to improve your performance and not just",
    "start": "1435049",
    "end": "1440750"
  },
  {
    "text": "a way to get to get fault-tolerance and and scalability and also to think about",
    "start": "1440750",
    "end": "1446510"
  },
  {
    "text": "the fact that different different tables may need different replication strategies so it's important to understand your your applications",
    "start": "1446510",
    "end": "1453429"
  },
  {
    "text": "requirements and access patterns in order to get the get the best performance so we've looked at we've",
    "start": "1453429",
    "end": "1459830"
  },
  {
    "text": "looked at three different replication patterns in this talk so to recap if you're if",
    "start": "1459830",
    "end": "1466520"
  },
  {
    "text": "you're mainly concerned about high availability then you actually don't want to don't want to bother with with",
    "start": "1466520",
    "end": "1472100"
  },
  {
    "text": "global geographic distribution you want to just keep your keep your servers close together in a single region this",
    "start": "1472100",
    "end": "1478940"
  },
  {
    "text": "is going to give you the best that the best write performance and and as long",
    "start": "1478940",
    "end": "1484940"
  },
  {
    "text": "as you're as long as your data or your users are mostly coming from a particular region then then that's all",
    "start": "1484940",
    "end": "1490580"
  },
  {
    "text": "you all you need for data that that can take advantage of the follow the Sun",
    "start": "1490580",
    "end": "1497120"
  },
  {
    "text": "workload pattern then you want to replicate that globally across regions to give to give that to give the the",
    "start": "1497120",
    "end": "1505960"
  },
  {
    "text": "rebalancing process enough tools to find the right the right place to put the the",
    "start": "1505960",
    "end": "1512240"
  },
  {
    "text": "data and and its leader and finally if your data is is very strongly associated",
    "start": "1512240",
    "end": "1517640"
  },
  {
    "text": "with a particular location and you you want to optimize for write performance then you can replicate within within",
    "start": "1517640",
    "end": "1524720"
  },
  {
    "text": "separate regional groups to keep that keep that data in in place so and",
    "start": "1524720",
    "end": "1534580"
  },
  {
    "start": "1531000",
    "end": "1550000"
  },
  {
    "text": "finally cockroach DB is is a great database to use if you're looking to",
    "start": "1534580",
    "end": "1539930"
  },
  {
    "text": "explore this strategy it was designed for global replication from the ground up and it gives you gives you this kind",
    "start": "1539930",
    "end": "1545300"
  },
  {
    "text": "of control over where the data is placed to let you bring the data to the user and and now I know I'm the last thing",
    "start": "1545300",
    "end": "1553970"
  },
  {
    "start": "1550000",
    "end": "1577000"
  },
  {
    "text": "standing between you and lunch so I'll wrap this up and be happy to take take",
    "start": "1553970",
    "end": "1559760"
  },
  {
    "text": "some questions also these are our websites we have our main website is cockroach labs calm and we have a blog",
    "start": "1559760",
    "end": "1566240"
  },
  {
    "text": "post at cockroach eh / CD in lessons where that which talks more about this",
    "start": "1566240",
    "end": "1571760"
  },
  {
    "text": "about this particular topic thank you very much [Applause]",
    "start": "1571760",
    "end": "1583350"
  },
  {
    "start": "1577000",
    "end": "1639000"
  },
  {
    "text": "Thank You Ben I have a few questions if anyone wants to ask please touch the mic how do you",
    "start": "1583350",
    "end": "1592600"
  },
  {
    "text": "deal with multi-tenancy are there out-of-the-box features it's in how do I",
    "start": "1592600",
    "end": "1599860"
  },
  {
    "text": "deal with multi-tenancy as you as in cockroach DB well currently you know we",
    "start": "1599860",
    "end": "1606160"
  },
  {
    "text": "have we have the standard sorts of sequel permission permission system so you can create create databases and",
    "start": "1606160",
    "end": "1613360"
  },
  {
    "text": "tables and users and grant permissions on on them we don't we don't yet have a",
    "start": "1613360",
    "end": "1620440"
  },
  {
    "text": "good enforcement of quotas and and things like that so it's not it's not",
    "start": "1620440",
    "end": "1626170"
  },
  {
    "text": "not yet ideal for a significant multi-tenant usage but but you know",
    "start": "1626170",
    "end": "1632020"
  },
  {
    "text": "that's that's an on the roadmap for future development I want to ask what",
    "start": "1632020",
    "end": "1642160"
  },
  {
    "start": "1639000",
    "end": "1713000"
  },
  {
    "text": "application strategies do support for replication in globally like is it a",
    "start": "1642160",
    "end": "1649360"
  },
  {
    "text": "synchronous replication a synchronous replication how many replicas do you need to receive data for consensus right",
    "start": "1649360",
    "end": "1660640"
  },
  {
    "text": "so so in terms of replication strategies for for global usage all of our",
    "start": "1660640",
    "end": "1665800"
  },
  {
    "text": "replication is synchronous so by the time your your transaction commit returns the data will be will be fully",
    "start": "1665800",
    "end": "1672640"
  },
  {
    "text": "fully replicated to a majority of nodes so that it'll be durable and and persistent and we require we require an",
    "start": "1672640",
    "end": "1681550"
  },
  {
    "text": "odd number of nodes just for for tiebreaking purposes so the minimum number of replicas well you can run in a",
    "start": "1681550",
    "end": "1689500"
  },
  {
    "text": "single node but as soon as you have more than one node then the minimum is three in order to make sure that you can have",
    "start": "1689500",
    "end": "1696190"
  },
  {
    "text": "a tie breaking vote in in the leadership elections and and then yeah so from",
    "start": "1696190",
    "end": "1703510"
  },
  {
    "text": "there it's every right goes to two out of three or three out of five or so on",
    "start": "1703510",
    "end": "1708600"
  },
  {
    "text": "is that that answer the question",
    "start": "1708600",
    "end": "1712710"
  },
  {
    "text": "so it's the only strategy yeah this is this is the only option you can choose",
    "start": "1713670",
    "end": "1718960"
  },
  {
    "text": "you can choose how many replicas you want and where those where those replicas we don't we don't offer",
    "start": "1718960",
    "end": "1727830"
  },
  {
    "text": "eventual consistency or asynchronous options thank you if you want if you",
    "start": "1727830",
    "end": "1734080"
  },
  {
    "text": "want eventual consent that model then you can just just do you perform your",
    "start": "1734080",
    "end": "1740110"
  },
  {
    "text": "commit in in like a background thread and just return to the user before it's done and that's basically the same thing",
    "start": "1740110",
    "end": "1747149"
  },
  {
    "start": "1747000",
    "end": "1815000"
  },
  {
    "text": "okay I've also question for you for my own interest are you aware of the atomic",
    "start": "1747690",
    "end": "1754450"
  },
  {
    "text": "database and if so can you highlight some of the differences yeah so I'm",
    "start": "1754450",
    "end": "1760930"
  },
  {
    "text": "aware of dynamic I'm not it's been a while since I've looked at it in enough",
    "start": "1760930",
    "end": "1767020"
  },
  {
    "text": "detail to to be able to say much about it I think the biggest and most obvious",
    "start": "1767020",
    "end": "1773470"
  },
  {
    "text": "difference is just that cockroach DB is is a sequel database and so that is our is our application interface and so that",
    "start": "1773470",
    "end": "1781080"
  },
  {
    "text": "that gives you something that's much more compatible with with a lot of existing applications and frameworks",
    "start": "1781080",
    "end": "1786930"
  },
  {
    "text": "that there's I know that diatomic is built on on immutability and and sort of",
    "start": "1786930",
    "end": "1795520"
  },
  {
    "text": "the the functional programming style of immutable objects and we don't but we",
    "start": "1795520",
    "end": "1800530"
  },
  {
    "text": "don't have that we're more in the sequel model where rows and tuples can be updated that's those are the those are",
    "start": "1800530",
    "end": "1809800"
  },
  {
    "text": "the things that I the differences that I'm aware of off the top of my head what",
    "start": "1809800",
    "end": "1817030"
  },
  {
    "text": "about domestic looking to reduce latency to the device devices from quorum decide",
    "start": "1817030",
    "end": "1823090"
  },
  {
    "text": "on transaction consistency yeah so so",
    "start": "1823090",
    "end": "1828730"
  },
  {
    "text": "cockroaches so optimistic locking is is a surprisingly deep and and complex",
    "start": "1828730",
    "end": "1835510"
  },
  {
    "text": "subject here in cockroach DB we our transaction model has always used a",
    "start": "1835510",
    "end": "1841120"
  },
  {
    "text": "combination of optimistic and pessimistic locks and over time we initially described our",
    "start": "1841120",
    "end": "1847350"
  },
  {
    "text": "transaction model as mostly based on optimistic concurrency control over time we've we've shifted more in the",
    "start": "1847350",
    "end": "1853770"
  },
  {
    "text": "direction of of pessimism and locking and that has that has caught a few",
    "start": "1853770",
    "end": "1860490"
  },
  {
    "text": "people by surprise but all of this that there's no that there's no potential for",
    "start": "1860490",
    "end": "1865520"
  },
  {
    "text": "inconsistency here in the sense that the transaction model because everything",
    "start": "1865520",
    "end": "1870720"
  },
  {
    "text": "goes to a majority or because all rights go to a majority and all reads go to the leader there are always there always",
    "start": "1870720",
    "end": "1878850"
  },
  {
    "text": "guarantees that that no data will be will be lost or be and no transaction will be allowed to commit in if it's",
    "start": "1878850",
    "end": "1885690"
  },
  {
    "text": "inconsistent with with another transaction that's already committed the one the one case where our use of",
    "start": "1885690",
    "end": "1891780"
  },
  {
    "text": "optimistic concurrency can be an issue is that this this is why we're currently unable to offer the C for select for",
    "start": "1891780",
    "end": "1898440"
  },
  {
    "text": "update statement in the in a way that that a lot of people like to use as an advisory lock that's just not not",
    "start": "1898440",
    "end": "1905700"
  },
  {
    "text": "compatible with the amount of optimism in our transaction model because your transaction can be aborted out from",
    "start": "1905700",
    "end": "1912270"
  },
  {
    "text": "under you by by a conflicting transaction and have to be aborted and retried for a single region region and",
    "start": "1912270",
    "end": "1922980"
  },
  {
    "start": "1920000",
    "end": "1995000"
  },
  {
    "text": "no need for application within the region is cockroach to be more suitable than postgis on my signal so is",
    "start": "1922980",
    "end": "1931140"
  },
  {
    "text": "cockroach key be more suitable than Postgres or my sequel for within region use I think that's that's going to be up",
    "start": "1931140",
    "end": "1939330"
  },
  {
    "text": "to your up to your application but I think it it certainly can be a good a good solution even even when you're just",
    "start": "1939330",
    "end": "1945960"
  },
  {
    "text": "replicating locally we've put a lot of work into making it much easier to set up replication in cockroach DB than in",
    "start": "1945960",
    "end": "1952410"
  },
  {
    "text": "in either my sequel or Postgres and and then it it scales horizontally",
    "start": "1952410",
    "end": "1958170"
  },
  {
    "text": "transparently you can just add add more nodes and it scales both up and and down",
    "start": "1958170",
    "end": "1963570"
  },
  {
    "text": "you can run run an instance of cockroach DB on your on your laptop which is a",
    "start": "1963570",
    "end": "1970620"
  },
  {
    "text": "nice point of comparison against against something like dynamo or cosmos DB",
    "start": "1970620",
    "end": "1976470"
  },
  {
    "text": "we don't have if that's not not an advantage in comparison to my sequel or",
    "start": "1976470",
    "end": "1981659"
  },
  {
    "text": "Postgres but yeah I think we've we've tried to make the make the database scale both both up and down so that it's",
    "start": "1981659",
    "end": "1988260"
  },
  {
    "text": "it's a viable solution at every at every level what do you use for to maintain",
    "start": "1988260",
    "end": "1997860"
  },
  {
    "text": "quorum state a console calf zookeeper console right so the the quorum state is",
    "start": "1997860",
    "end": "2006230"
  },
  {
    "text": "used with a raft library that is embedded in the application so raft is a is a consensus algorithm it's a it's an",
    "start": "2006230",
    "end": "2013520"
  },
  {
    "text": "alternative to Paxos and so that's what we use we actually share the implementation of raft with core os's at",
    "start": "2013520",
    "end": "2020960"
  },
  {
    "text": "CD but we don't we don't use an external service like zookeeper or console or at",
    "start": "2020960",
    "end": "2026929"
  },
  {
    "text": "cd4 or anything everything is managed internally to cockroach it's just a single process that does everything",
    "start": "2026929",
    "end": "2034720"
  },
  {
    "start": "2037000",
    "end": "2092000"
  },
  {
    "text": "how does Coco's to be compared to dynamodb global tables right so dynamodb",
    "start": "2038110",
    "end": "2045260"
  },
  {
    "text": "is a is a non sequel database so again it's got a very different very different",
    "start": "2045260",
    "end": "2051290"
  },
  {
    "text": "programming model and in so I used I",
    "start": "2051290",
    "end": "2056599"
  },
  {
    "text": "used DynamoDB on my on my previous project but this but that's that's been",
    "start": "2056599",
    "end": "2062000"
  },
  {
    "text": "four years ago now so my information here may be a little out of date I know that four years ago it didn't have it",
    "start": "2062000",
    "end": "2068750"
  },
  {
    "text": "didn't have good support for for transactions and we ended up having to work around work around that a lot in",
    "start": "2068750",
    "end": "2075290"
  },
  {
    "text": "our in our application I believe it does have transactions now and so it's to",
    "start": "2075290",
    "end": "2080929"
  },
  {
    "text": "become a lot closer but it still doesn't have the these sorts of global replication that that you can do with",
    "start": "2080929",
    "end": "2087770"
  },
  {
    "text": "that with cockroach DB as far as I know how does cockroach to be find out about",
    "start": "2087770",
    "end": "2096050"
  },
  {
    "start": "2092000",
    "end": "2154000"
  },
  {
    "text": "follow-the-sun do configure GPS coordinate so no so the follow-the-sun",
    "start": "2096050",
    "end": "2102920"
  },
  {
    "text": "is not based on GPS coordinates cockroach doesn't know anything about about where the Sun is it just knows",
    "start": "2102920",
    "end": "2109580"
  },
  {
    "text": "where the where the traffic is coming from and so if a if a node that the nodes are in",
    "start": "2109580",
    "end": "2115460"
  },
  {
    "text": "constant communication and exchanging metrics and so if a node discovers that it's getting that a lot of queries for a",
    "start": "2115460",
    "end": "2123800"
  },
  {
    "text": "particular piece of data are being routed through a through a particular region then it will then it will detect",
    "start": "2123800",
    "end": "2130970"
  },
  {
    "text": "this and move the leadership from one from one place to another the only reason the only reason",
    "start": "2130970",
    "end": "2137960"
  },
  {
    "text": "cockroach needs to know about about latitude longitude coordinates is if you want to have things displayed nicely on",
    "start": "2137960",
    "end": "2144140"
  },
  {
    "text": "a map in our in our admin web UI any",
    "start": "2144140",
    "end": "2151310"
  },
  {
    "text": "other questions the last one is what",
    "start": "2151310",
    "end": "2157670"
  },
  {
    "start": "2154000",
    "end": "2230000"
  },
  {
    "text": "other dynamic leader linear selection method next to fold the Sun do you",
    "start": "2157670",
    "end": "2165859"
  },
  {
    "text": "expect to have in the future so after",
    "start": "2165859",
    "end": "2171200"
  },
  {
    "text": "after follow the Sun I think the the general so I mean it's not it's not just",
    "start": "2171200",
    "end": "2177230"
  },
  {
    "text": "follow the Sun it's follow that follow the traffic or fall with the workload so it does it does work you know whether",
    "start": "2177230",
    "end": "2183290"
  },
  {
    "text": "whether your traffic patterns shift for for you know reasons of reasons of",
    "start": "2183290",
    "end": "2190930"
  },
  {
    "text": "daytime or or something else so it is a little more a little more general than",
    "start": "2190930",
    "end": "2196849"
  },
  {
    "text": "that but other than that I think we have the next thing on the list is that is",
    "start": "2196849",
    "end": "2204560"
  },
  {
    "text": "that right now follow the Sun works for changing the removing the leader of a range but it can only it can only choose",
    "start": "2204560",
    "end": "2211490"
  },
  {
    "text": "a leader from among the replicas that from the nodes that happen to have a replica of the range and so sort of our",
    "start": "2211490",
    "end": "2218510"
  },
  {
    "text": "next our next generation dynamic balancing balancing system will be able to move the data itself to a more",
    "start": "2218510",
    "end": "2225859"
  },
  {
    "text": "suitable location based on based on where the traffic is coming from yeah so",
    "start": "2225859",
    "end": "2231890"
  },
  {
    "start": "2230000",
    "end": "2324000"
  },
  {
    "text": "you mentioned before that you Cho that cockroach DB is also viable as a normal",
    "start": "2231890",
    "end": "2238010"
  },
  {
    "text": "database and that is not necessarily around the whole world but did you make a need",
    "start": "2238010",
    "end": "2243559"
  },
  {
    "text": "design or architecture trade-offs that towards a fully distributed system where",
    "start": "2243559",
    "end": "2250819"
  },
  {
    "text": "you suffer penalties on the local set ups yeah I think there there are there",
    "start": "2250819",
    "end": "2260359"
  },
  {
    "text": "are some things where we may not be we're not we're not optimal at at",
    "start": "2260359",
    "end": "2268099"
  },
  {
    "text": "smaller scales because because of some of the decisions that we've made to",
    "start": "2268099",
    "end": "2273380"
  },
  {
    "text": "support distributed execution so yeah like you you can if you've run if you run cockroach DB as a as a single node",
    "start": "2273380",
    "end": "2280309"
  },
  {
    "text": "instance it's not going to be able to match the performance of a single node of my sequel or Postgres and that's just",
    "start": "2280309",
    "end": "2287059"
  },
  {
    "text": "because there's that there's a lot more internal overhead because everything is designed to be able to work over the",
    "start": "2287059",
    "end": "2293150"
  },
  {
    "text": "over the network so yeah you do pay a bit of a performance price at the at the",
    "start": "2293150",
    "end": "2298369"
  },
  {
    "text": "smaller scales but in return you get the ability to to scale up very very easily",
    "start": "2298369",
    "end": "2304549"
  },
  {
    "text": "and and relatively cheaply as you as you need more more performance thank you Ben",
    "start": "2304549",
    "end": "2316479"
  },
  {
    "text": "you",
    "start": "2320049",
    "end": "2322109"
  }
]