[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "thank you",
    "start": "6180",
    "end": "8839"
  },
  {
    "text": "welcome everyone to this session today I'm going to talk about uh springboot the new version springboot 3 and how to",
    "start": "11700",
    "end": "18600"
  },
  {
    "text": "build Cloud native applications I'm curious how many of you are Java developers",
    "start": "18600",
    "end": "23880"
  },
  {
    "text": "quite a few very nice so you heard them Thomas I work at systematic here in oros I'm a software engineer and Cloud",
    "start": "23880",
    "end": "30180"
  },
  {
    "text": "architect really passionate about anything Java spring Boot and Cloud native related and I combined all these",
    "start": "30180",
    "end": "36600"
  },
  {
    "text": "passions to write a book it's called Cloud native spring in action with spring Boot and kubernetes I'm also a",
    "start": "36600",
    "end": "42180"
  },
  {
    "text": "big supporter of Open Source Technologies and try to contribute as much as I can both in the Java space and",
    "start": "42180",
    "end": "47520"
  },
  {
    "text": "in the cloud native ecosystem so spring how many of you are spring",
    "start": "47520",
    "end": "53579"
  },
  {
    "start": "51000",
    "end": "97000"
  },
  {
    "text": "users Well Spring is a great framework probably the most used framework in the Java ecosystem and we can use spring to",
    "start": "53579",
    "end": "61559"
  },
  {
    "text": "build any kind of application really using Java we can build microservices web applications reactive applications",
    "start": "61559",
    "end": "67740"
  },
  {
    "text": "Cloud native serverless batch so it's quite a",
    "start": "67740",
    "end": "73020"
  },
  {
    "text": "it's quite a big landscape that we have in the spring ecosystem where we have different solutions to build different",
    "start": "73020",
    "end": "78420"
  },
  {
    "text": "types of application and very recently a few months ago there was a new major release springboot 3",
    "start": "78420",
    "end": "84180"
  },
  {
    "text": "that introduced a lot of news and a lot of new functionality and today I want to talk a bit about that and I want to",
    "start": "84180",
    "end": "90420"
  },
  {
    "text": "start by looking at the Baseline for springboot 3 because with spring with three now the minimum supported version",
    "start": "90420",
    "end": "96119"
  },
  {
    "text": "of java is Java 17. that's the new Baseline and I want to ask you how many of you",
    "start": "96119",
    "end": "102119"
  },
  {
    "start": "97000",
    "end": "289000"
  },
  {
    "text": "are already using Java 17 in production and how about Java 11",
    "start": "102119",
    "end": "110359"
  },
  {
    "text": "and then do I dare to ask how many of you are using Java 8",
    "start": "111840",
    "end": "117360"
  },
  {
    "text": "yeah I get it it might be difficult to to upgrade maybe a legacy application",
    "start": "117360",
    "end": "123360"
  },
  {
    "text": "and find even the right approval and budgets to do that sometimes I hear saying yeah it's almost okay you want",
    "start": "123360",
    "end": "130259"
  },
  {
    "text": "the latest version of java you want the new features but here we need to consider our customers and producing",
    "start": "130259",
    "end": "135720"
  },
  {
    "text": "value but actually upgrading to the latest version of java is how we think about customers and increase the value",
    "start": "135720",
    "end": "142379"
  },
  {
    "text": "just think about performance for example I took a spring Boot 2 application and I",
    "start": "142379",
    "end": "148920"
  },
  {
    "text": "ran it with Java 8 and I got these numbers a very slow startup time quite a",
    "start": "148920",
    "end": "154620"
  },
  {
    "text": "lot of memory usage and that was doing nothing so that's the application addressed without processing any",
    "start": "154620",
    "end": "159900"
  },
  {
    "text": "requests nothing is going on but still I need a 113 megabytes of Heap and the",
    "start": "159900",
    "end": "165959"
  },
  {
    "text": "startup time is almost 4 seconds that's not that good then without changing anything in my code just",
    "start": "165959",
    "end": "172620"
  },
  {
    "text": "replacing the Java 8 version with Java 11 I get quite the Boost there because",
    "start": "172620",
    "end": "178620"
  },
  {
    "text": "now the start of time is faster than maybe a second and a half and if you",
    "start": "178620",
    "end": "184019"
  },
  {
    "text": "look at the memory it's more than a half than what it used to be with Java 8. so without changing anything in my code I'm",
    "start": "184019",
    "end": "190500"
  },
  {
    "text": "getting all these performance improvements that's amazing and then I can do it with Java 17 and that's even",
    "start": "190500",
    "end": "196560"
  },
  {
    "text": "better even less memory usage even reduced start of time",
    "start": "196560",
    "end": "201720"
  },
  {
    "text": "now don't take this as a benchmark I run a standard application on my laptop with rest endpoints integration with the",
    "start": "201720",
    "end": "208980"
  },
  {
    "text": "database but it's uh it's uh like the important part is the comparison without changing code I managed to get all these",
    "start": "208980",
    "end": "215879"
  },
  {
    "text": "improvements and I should probably add Java 20 which is the current version of java because Java 20 in some scenarios",
    "start": "215879",
    "end": "222120"
  },
  {
    "text": "you can gain even more than 20 25 performance improvements",
    "start": "222120",
    "end": "227159"
  },
  {
    "text": "and that's incredible without changing anything in my code so who does it want for free less resource usage and faster",
    "start": "227159",
    "end": "234480"
  },
  {
    "text": "start of time right so it's not just about getting new features when we upgrade to a new Java version",
    "start": "234480",
    "end": "239700"
  },
  {
    "text": "it's also about performance and also about security for example Java 17 comes with the new functionality to",
    "start": "239700",
    "end": "246180"
  },
  {
    "text": "encapsulate even more the internals of the Java virtual machine so that a lot of operations unsecure unsafe operations",
    "start": "246180",
    "end": "253080"
  },
  {
    "text": "that before were possible now they are forbidden so upgrading to a new version of java is",
    "start": "253080",
    "end": "260760"
  },
  {
    "text": "also thinking about our customer and producing more value because if we get so much improvements on the memory usage",
    "start": "260760",
    "end": "267000"
  },
  {
    "text": "it means that using the same infrastructure we have now we can now we can start serving more customers without",
    "start": "267000",
    "end": "273180"
  },
  {
    "text": "upgrading our infrastructure because the memory usage is lower or we can even",
    "start": "273180",
    "end": "278460"
  },
  {
    "text": "reduce our infrastructure if we don't have we have new customers for now and save money on that especially if we are",
    "start": "278460",
    "end": "285180"
  },
  {
    "text": "in the cloud so let's have a look at how to start the new application I'm gonna create a new",
    "start": "285180",
    "end": "292500"
  },
  {
    "start": "289000",
    "end": "762000"
  },
  {
    "text": "spring boot application I'm going to start.spring.io and from here I create a new Gradle",
    "start": "292500",
    "end": "298380"
  },
  {
    "text": "project with Java 17 and the latest spring boot version 3.1 I want to build",
    "start": "298380",
    "end": "303479"
  },
  {
    "text": "a simple web application to manage books since we are in a library so I'm gonna",
    "start": "303479",
    "end": "309479"
  },
  {
    "text": "add the spring web dependency and I'm gonna add the spring boots",
    "start": "309479",
    "end": "314520"
  },
  {
    "text": "devtools library now with the Springwood Dev tools I get a lot of convenient tools that I can use as part of my",
    "start": "314520",
    "end": "321419"
  },
  {
    "text": "development workflow to optimize uh yeah to optimize my iteration Loop so how I",
    "start": "321419",
    "end": "328080"
  },
  {
    "text": "either through the code and implementing new features and fixing bugs so let's have a look I have already opened the",
    "start": "328080",
    "end": "333720"
  },
  {
    "text": "application in my IDE this is how it looks an empty spring boot application we have the main method",
    "start": "333720",
    "end": "339840"
  },
  {
    "text": "initializing the up and right now it's doing nothing but let me run it",
    "start": "339840",
    "end": "346139"
  },
  {
    "text": "for starters so it's running it's doing nothing let's",
    "start": "346139",
    "end": "351180"
  },
  {
    "text": "start doing something and I said I want to manage books so since I'm using Java 17 I can model the domain using records",
    "start": "351180",
    "end": "358860"
  },
  {
    "text": "so I can say record book with two fills an ID and the title",
    "start": "358860",
    "end": "365460"
  },
  {
    "text": "and that's it that's my domain object using records and then I can use that object and",
    "start": "365460",
    "end": "372780"
  },
  {
    "text": "expose it via a rest controller so I can create a rest API",
    "start": "372780",
    "end": "377940"
  },
  {
    "text": "let's call it book controller and I want to expose an endpoint for",
    "start": "377940",
    "end": "385380"
  },
  {
    "text": "sending gets requests and return a list of books",
    "start": "385380",
    "end": "390780"
  },
  {
    "text": "get all books and for now I return a hard-coded list so I'll say",
    "start": "390780",
    "end": "398580"
  },
  {
    "text": "list of and then we create one first book",
    "start": "398580",
    "end": "405240"
  },
  {
    "text": "let's say The Hobbit and one second book",
    "start": "405240",
    "end": "411199"
  },
  {
    "text": "the Lord of the Rings all right",
    "start": "412740",
    "end": "419780"
  },
  {
    "text": "let me do this so it's more readable and now without restarting the application",
    "start": "419780",
    "end": "424919"
  },
  {
    "text": "since I'm using spring boot Dev tools maybe you notice that immediately my application reloaded in just a few",
    "start": "424919",
    "end": "430979"
  },
  {
    "text": "milliseconds so I didn't have to restart it manually and I can directly verify",
    "start": "430979",
    "end": "436380"
  },
  {
    "text": "that it's working so I send an HTTP request to port 8080 where my application is exposed slash books and",
    "start": "436380",
    "end": "443819"
  },
  {
    "text": "not found of course I'm missing the most important part here",
    "start": "443819",
    "end": "449720"
  },
  {
    "text": "I want to map this to slash books otherwise Springwood doesn't know",
    "start": "449720",
    "end": "455460"
  },
  {
    "text": "so let's try that again and there it is we have the list of books",
    "start": "455460",
    "end": "461099"
  },
  {
    "text": "so I have this live reload Loop going so I can modify my code and changes will be",
    "start": "461099",
    "end": "468660"
  },
  {
    "text": "reloaded automatically let's add the silmarillion",
    "start": "468660",
    "end": "474360"
  },
  {
    "text": "and if I run the request again then I get the updated result",
    "start": "474360",
    "end": "480120"
  },
  {
    "text": "without me restarting the application again so records are one of the new features",
    "start": "480120",
    "end": "485520"
  },
  {
    "text": "that I can use using Java 17 another one is probably one of my favorite let me show you I'm gonna create a book object",
    "start": "485520",
    "end": "493860"
  },
  {
    "text": "which is null and now I'm gonna try to print the title from that book",
    "start": "493860",
    "end": "500699"
  },
  {
    "text": "probably you guessed that if I do that I'll get the null pointer exception because the object is null",
    "start": "500699",
    "end": "507240"
  },
  {
    "text": "so let's see what happens let me expand this and send the request and of course I get an exception but the",
    "start": "507240",
    "end": "515219"
  },
  {
    "text": "important thing I want to show you is the stack Trace in particular the message here saying null pointer",
    "start": "515219",
    "end": "521760"
  },
  {
    "text": "exception cannot invoke that method because book is null now you might be",
    "start": "521760",
    "end": "526860"
  },
  {
    "text": "wondering yeah what's exciting about that well before Java 17 every time we",
    "start": "526860",
    "end": "532080"
  },
  {
    "text": "get an all pointer exception the message just says oh something isn't all at this line",
    "start": "532080",
    "end": "537120"
  },
  {
    "text": "and we never know what is null like this is one thing that I really",
    "start": "537120",
    "end": "542700"
  },
  {
    "text": "like the most about Java 17 and the funny thing is before upgrading to Java 17 every time getting your pointer",
    "start": "542700",
    "end": "548580"
  },
  {
    "text": "exceptions I hated them because I never knew what was null it would always require more investigation after",
    "start": "548580",
    "end": "555060"
  },
  {
    "text": "upgrading to Java 17 I was so excited to get some low pointer exceptions but then my code didn't throw any no pointer",
    "start": "555060",
    "end": "561420"
  },
  {
    "text": "exception so it wasn't really that is satisfying so I had to create introduce purposely no pointer exceptions just to",
    "start": "561420",
    "end": "568320"
  },
  {
    "text": "see this message and be happy you know it's the small things in life yeah",
    "start": "568320",
    "end": "574519"
  },
  {
    "text": "I want to show you one more feature in Java 17 that also is quite convenient let me stop the application first",
    "start": "574740",
    "end": "583140"
  },
  {
    "text": "all right so we have this endpoint I created a domain object what happens",
    "start": "583140",
    "end": "589140"
  },
  {
    "text": "when I send a request to the application let me also remove these two is that spring boot automatically",
    "start": "589140",
    "end": "595860"
  },
  {
    "text": "serialize this Java record into Json using a library called Jackson that's",
    "start": "595860",
    "end": "601320"
  },
  {
    "text": "something that happens out of the box so that's why I'm getting a Json object Whenever I send the request",
    "start": "601320",
    "end": "607140"
  },
  {
    "text": "so it's a good idea to test that that serialization and this realization works correctly",
    "start": "607140",
    "end": "613260"
  },
  {
    "text": "so I can create a test let me uncomment this because Springwood",
    "start": "613260",
    "end": "620880"
  },
  {
    "text": "provides a convenient feature is called slice test it's kind of integration test but very",
    "start": "620880",
    "end": "628140"
  },
  {
    "text": "focused on a specific slice of your application in this case I want to test the serialization and this realization",
    "start": "628140",
    "end": "634680"
  },
  {
    "text": "slice of my application so I use this Json test annotation and I can use a",
    "start": "634680",
    "end": "640800"
  },
  {
    "text": "tester object provided by the spring boot framework in order to test that this realization happens as it should so",
    "start": "640800",
    "end": "647760"
  },
  {
    "text": "it's a good test to have so that we know that we don't introduce breaking changes",
    "start": "647760",
    "end": "652860"
  },
  {
    "text": "when we update the record object so what I can do here is starting by defining a",
    "start": "652860",
    "end": "658200"
  },
  {
    "text": "Json object and usually I do it as a string and here starts the pane because",
    "start": "658200",
    "end": "663420"
  },
  {
    "text": "now I need to add a Json object and the Json object if I want to have a field",
    "start": "663420",
    "end": "669060"
  },
  {
    "text": "called ID I have quotes within quotes So I need to start introducing all these",
    "start": "669060",
    "end": "674820"
  },
  {
    "text": "escaping characters and then probably I want to put it on multiple lines so that",
    "start": "674820",
    "end": "680880"
  },
  {
    "text": "it's more readable it's really not that nice but I'm using Java 17 so let's",
    "start": "680880",
    "end": "685920"
  },
  {
    "text": "forget about that because I can use a new feature called text blocks so with three quotes I enable this",
    "start": "685920",
    "end": "691620"
  },
  {
    "text": "feature and then I can directly insert my Json object ID",
    "start": "691620",
    "end": "697620"
  },
  {
    "text": "one comma title",
    "start": "697620",
    "end": "702959"
  },
  {
    "text": "his dark materials and that's it I love this functionality",
    "start": "702959",
    "end": "708959"
  },
  {
    "text": "so now all the tests where you need to insert some Json file or some other text objects it's both readable and used out",
    "start": "708959",
    "end": "716279"
  },
  {
    "text": "of the box in Java so now that I have this Json object I can say assertions",
    "start": "716279",
    "end": "722040"
  },
  {
    "text": "after that and asserting that when we parse that Json into an object",
    "start": "722040",
    "end": "729600"
  },
  {
    "text": "so I parse the book into an object using the Jackson Library I want to verify",
    "start": "729600",
    "end": "734700"
  },
  {
    "text": "that that object is equal to a proper book",
    "start": "734700",
    "end": "740700"
  },
  {
    "text": "record with ID 1 the type is long and",
    "start": "740700",
    "end": "746040"
  },
  {
    "text": "the title is dark materials all right let's see if it's working",
    "start": "746040",
    "end": "754380"
  },
  {
    "text": "and it's green awesome let's move on",
    "start": "754380",
    "end": "761339"
  },
  {
    "text": "because at this point I have a working application it's running correctly let's have a look at how to package it and",
    "start": "761339",
    "end": "767820"
  },
  {
    "start": "762000",
    "end": "777000"
  },
  {
    "text": "deploy it and what options do we have standard option is packaging the",
    "start": "767820",
    "end": "773519"
  },
  {
    "text": "application as a jar file so I can actually directly from here",
    "start": "773519",
    "end": "779420"
  },
  {
    "start": "777000",
    "end": "847000"
  },
  {
    "text": "I'll switch branch yes yes okay so using either Gradle or",
    "start": "779760",
    "end": "787440"
  },
  {
    "text": "Maven I can build a jar file so in Gradle I can say boot jar I obtain a jar",
    "start": "787440",
    "end": "794459"
  },
  {
    "text": "file that I can call directly from the Java command so I can say Libs and jar",
    "start": "794459",
    "end": "801120"
  },
  {
    "text": "so this jar file is self-contained it doesn't need anything else other than the jvm in order to run the application",
    "start": "801120",
    "end": "808019"
  },
  {
    "text": "it contains everything that is needed for my application to run and I can run it anywhere I have a Java filter machine",
    "start": "808019",
    "end": "813480"
  },
  {
    "text": "the application is running let's verify that it works",
    "start": "813480",
    "end": "818660"
  },
  {
    "text": "slash books and it's working perfect but sometimes if especially if I want to",
    "start": "818880",
    "end": "825839"
  },
  {
    "text": "go to the cloud or kubernetes I need to build a container image and package my application as a container image and in",
    "start": "825839",
    "end": "831720"
  },
  {
    "text": "a similar way so earlier I ran bootjar I can say boot build image",
    "start": "831720",
    "end": "837420"
  },
  {
    "text": "and springwoods will containerize my application without me providing any additional configuration or Docker file",
    "start": "837420",
    "end": "844200"
  },
  {
    "text": "and there I want to pause a second just to recap because something is interesting is happening now under the hoods we can",
    "start": "844200",
    "end": "851040"
  },
  {
    "start": "847000",
    "end": "981000"
  },
  {
    "text": "build the jar artifact from Gradle or Maven this is a standard way of doing it we can also containerize it in a very",
    "start": "851040",
    "end": "859200"
  },
  {
    "text": "similar way from Gradle or Maven what happens under the hood is that spring boot is using a project called Cloud",
    "start": "859200",
    "end": "865500"
  },
  {
    "text": "native buildbox so that we can containerize the application without writing a Docker file",
    "start": "865500",
    "end": "870959"
  },
  {
    "text": "and why it's so important that we don't write a Docker file well friends don't",
    "start": "870959",
    "end": "876000"
  },
  {
    "text": "let friends write Docker files to quote Josh long and why is that well writing Docker",
    "start": "876000",
    "end": "882120"
  },
  {
    "text": "files is simple but writing Docker files that are production rate is really not",
    "start": "882120",
    "end": "887820"
  },
  {
    "text": "we need to take care of performance of security and as a developer I don't want to deal with that I want to focus on my",
    "start": "887820",
    "end": "893699"
  },
  {
    "text": "Spring with application on the business logic and writing and maintaining a Docker file keeping it up to date and",
    "start": "893699",
    "end": "899760"
  },
  {
    "text": "patched it's something that I really don't want to do so that's why I really like working with Cloud native",
    "start": "899760",
    "end": "905220"
  },
  {
    "text": "buildbacks also for a security from a security point of view this is from the software supply chain security paper",
    "start": "905220",
    "end": "911399"
  },
  {
    "text": "from the security group in the cloud native Computing foundations and they also advise against Docker fives they",
    "start": "911399",
    "end": "918000"
  },
  {
    "text": "say there is it right but the current development guidelines do not produce containers that are repeatable and",
    "start": "918000",
    "end": "923639"
  },
  {
    "text": "hardened so we need some other way to build production grade applications",
    "start": "923639",
    "end": "928880"
  },
  {
    "text": "containerized and we can do it with Cloud native buildbox which is a specification to transform application",
    "start": "928880",
    "end": "934920"
  },
  {
    "text": "source code into container image without Docker files without additional configuration and then the nice thing",
    "start": "934920",
    "end": "940860"
  },
  {
    "text": "here is that it works no matter the language or the framework so independently from what kind of",
    "start": "940860",
    "end": "946500"
  },
  {
    "text": "application you have it could be a dotnet PHP Ruby python Java also with",
    "start": "946500",
    "end": "952860"
  },
  {
    "text": "different Frameworks golang it works the same way we run one command and we obtain a production ready container",
    "start": "952860",
    "end": "959040"
  },
  {
    "text": "image the buildbox project provides a CLI for doing that so we can run pack build",
    "start": "959040",
    "end": "965160"
  },
  {
    "text": "command but in Springwood it's even better because it's already embedded inside the spring boot plugin for Gradle",
    "start": "965160",
    "end": "971100"
  },
  {
    "text": "Maven so we don't need to install anything else we can just say Gradle boot build image and I get a container",
    "start": "971100",
    "end": "977820"
  },
  {
    "text": "image let's see if it's working I built the image let's run it on docker",
    "start": "977820",
    "end": "985860"
  },
  {
    "start": "981000",
    "end": "1008000"
  },
  {
    "text": "Docker run I expose it through port 8080 the image is book service",
    "start": "985860",
    "end": "992899"
  },
  {
    "text": "it's running let's see that it's also working and it is",
    "start": "994380",
    "end": "1000380"
  },
  {
    "text": "so no Docker file no extra configuration I can focus on my application",
    "start": "1000380",
    "end": "1007240"
  },
  {
    "start": "1008000",
    "end": "1351000"
  },
  {
    "text": "another strategy that I can use to containerize my application is based on a technology",
    "start": "1008839",
    "end": "1014779"
  },
  {
    "text": "called grlvm yesterday there was a presentation about girl VM how many of you attended that you might have heard",
    "start": "1014779",
    "end": "1020899"
  },
  {
    "text": "how that technology works today I'm going to talk about how it relates and how it's integrated with spring boots",
    "start": "1020899",
    "end": "1026900"
  },
  {
    "text": "ground VM or actually standard job applications what happens is that we as",
    "start": "1026900",
    "end": "1033260"
  },
  {
    "text": "I showed earlier we package it as a jar file the jar file runs on the Java virtual machine and then at runtime",
    "start": "1033260",
    "end": "1039798"
  },
  {
    "text": "dynamically the Java virtual machine compiles that intermediate code which is called bytecode into machine code that's",
    "start": "1039799",
    "end": "1047178"
  },
  {
    "text": "why we say that Java we write it once and run everywhere because as long as we have the Java",
    "start": "1047179",
    "end": "1053179"
  },
  {
    "text": "virtual machine the executable will be the same across operating systems across architectures and then the Java virtual",
    "start": "1053179",
    "end": "1059299"
  },
  {
    "text": "machine takes care of dynamically converting to the lower machine code specific for Linux for Mac OS for",
    "start": "1059299",
    "end": "1065840"
  },
  {
    "text": "Windows and that's very convenient but it also has some downsides because now we need",
    "start": "1065840",
    "end": "1070880"
  },
  {
    "text": "to do all these expensive operations while we run the application ground VM provides a solution to that so",
    "start": "1070880",
    "end": "1077059"
  },
  {
    "text": "that we can compile the application directly to machine code just like we would do with the c application for",
    "start": "1077059",
    "end": "1083299"
  },
  {
    "text": "example and in spring with three we get this support out of the box across the whole spring portfolio let's have a look",
    "start": "1083299",
    "end": "1090559"
  },
  {
    "text": "at the benefits that we get first of all we get instant start of time so instead of starting up in a few",
    "start": "1090559",
    "end": "1096679"
  },
  {
    "text": "seconds it starts up in a few milliseconds because again we move all that uh",
    "start": "1096679",
    "end": "1102440"
  },
  {
    "text": "all that expensive computation from runtime to build time and that's also why we get instant Peak",
    "start": "1102440",
    "end": "1108440"
  },
  {
    "text": "Performance there's no warm-up usually when we run a spring a Java application in general we consume a lot of CPU",
    "start": "1108440",
    "end": "1114679"
  },
  {
    "text": "there's a warm up it's slow because it needs to load all the classes dynamically convert them to machine code",
    "start": "1114679",
    "end": "1119720"
  },
  {
    "text": "but since we compile everything at build time to machine codes we have instant startup time and instant Peak",
    "start": "1119720",
    "end": "1126140"
  },
  {
    "text": "Performance we also get low resource usage because now the native executable",
    "start": "1126140",
    "end": "1131900"
  },
  {
    "text": "can use the memory more efficiently and the CPU more efficiently without the warm-up we don't have those CPU spikes",
    "start": "1131900",
    "end": "1138200"
  },
  {
    "text": "that usually we have when starting up a job application furthermore we get reducer surface",
    "start": "1138200",
    "end": "1144320"
  },
  {
    "text": "attack now the way that Grill VM compiles a job application is that it starts from the",
    "start": "1144320",
    "end": "1149600"
  },
  {
    "text": "main method and then from the main method he finds all the reachable classes all the reachable methods and in only includes",
    "start": "1149600",
    "end": "1156919"
  },
  {
    "text": "in the final executable what is reachable from the main methods everything else is discarded",
    "start": "1156919",
    "end": "1163340"
  },
  {
    "text": "that means that you only get inside this executable what is actually used by the application",
    "start": "1163340",
    "end": "1168740"
  },
  {
    "text": "now you probably remember a while back we got this we got this log 4J security",
    "start": "1168740",
    "end": "1173840"
  },
  {
    "text": "vulnerability like the whole Java ecosystem was uh really scared about",
    "start": "1173840",
    "end": "1179539"
  },
  {
    "text": "this vulnerability and the vulnerability in this logging Library used everywhere in Java applications was actually",
    "start": "1179539",
    "end": "1186340"
  },
  {
    "text": "affecting a feature that very few people were using but because all job",
    "start": "1186340",
    "end": "1191419"
  },
  {
    "text": "applications had that library inside the application through an exploit some code that was",
    "start": "1191419",
    "end": "1197720"
  },
  {
    "text": "wasn't actually used by the application could have been executed resulting in the vulnerability being exploited but if",
    "start": "1197720",
    "end": "1205280"
  },
  {
    "text": "we use growl VM in that case we we don't use that functionality of log4j in our",
    "start": "1205280",
    "end": "1211039"
  },
  {
    "text": "application so what happens is that it doesn't end up in the final executable so even if log 4J was vulnerable our",
    "start": "1211039",
    "end": "1218179"
  },
  {
    "text": "application was not because that piece of vulnerable code wasn't part of the executable again because we were not",
    "start": "1218179",
    "end": "1224419"
  },
  {
    "text": "using it so you get reduced surface attack because you only get the code that you're actually using in your",
    "start": "1224419",
    "end": "1230120"
  },
  {
    "text": "application which also results in more compact packaging because you might have a hundred libraries in your application",
    "start": "1230120",
    "end": "1236240"
  },
  {
    "text": "but you discard all the classes all the methods that are not used at runtime",
    "start": "1236240",
    "end": "1243020"
  },
  {
    "text": "of course everything is a trade-off like there's no Silver Bullet solution so",
    "start": "1243020",
    "end": "1248360"
  },
  {
    "text": "there are also some downsides doing that because if we move all these Dynamic computation from runtime to build time",
    "start": "1248360",
    "end": "1255620"
  },
  {
    "text": "now building a native executable out of a job application takes more time and",
    "start": "1255620",
    "end": "1260900"
  },
  {
    "text": "takes more resources more memory and more CPU now this downside is getting",
    "start": "1260900",
    "end": "1266059"
  },
  {
    "text": "less and less relevant over time because ground VM keeps improving this part so",
    "start": "1266059",
    "end": "1271220"
  },
  {
    "text": "for example the time for compiling a native executable went from minutes to",
    "start": "1271220",
    "end": "1276500"
  },
  {
    "text": "seconds now on my laptop and in the next version of ground VM out next month they",
    "start": "1276500",
    "end": "1281960"
  },
  {
    "text": "also added a lot of improvements to reduce the memory and CPU used during the compilation so it's getting better",
    "start": "1281960",
    "end": "1288740"
  },
  {
    "text": "but it's worth noticing this because it means that perhaps as part of our",
    "start": "1288740",
    "end": "1293960"
  },
  {
    "text": "development Loop maybe we don't want to work with Native images this is something we can push to the build pipeline to generate the native",
    "start": "1293960",
    "end": "1300559"
  },
  {
    "text": "executable but locally we're still working with a standard Java virtual machine and another downside is that depending",
    "start": "1300559",
    "end": "1307039"
  },
  {
    "text": "on how you use Java there might be some additional configuration needed",
    "start": "1307039",
    "end": "1312260"
  },
  {
    "text": "and here is where springboot 3 really comes handy because spring boots takes care of probably of 95 of the situations",
    "start": "1312260",
    "end": "1318559"
  },
  {
    "text": "in order to configure ground VM to generate the native executable without us as developers to configure anything",
    "start": "1318559",
    "end": "1325159"
  },
  {
    "text": "but there's that five percent where we might need to help the compiler",
    "start": "1325159",
    "end": "1330380"
  },
  {
    "text": "understand how to build a native executable and in that case spring would provide some very convenient tools to do",
    "start": "1330380",
    "end": "1336919"
  },
  {
    "text": "that but still something to consider so it's a trade-off it's an option we have",
    "start": "1336919",
    "end": "1342020"
  },
  {
    "text": "this tool available and we can decide if it makes sense depending on the use case",
    "start": "1342020",
    "end": "1348020"
  },
  {
    "text": "all right we have our application we know all the",
    "start": "1348020",
    "end": "1353360"
  },
  {
    "start": "1351000",
    "end": "1437000"
  },
  {
    "text": "different options to package it and deploy it but it's not really doing much because I'm returning a hard-coded list",
    "start": "1353360",
    "end": "1359059"
  },
  {
    "text": "so I want to talk a bit about data persistence in particular I want to store all these books in a relational",
    "start": "1359059",
    "end": "1365179"
  },
  {
    "text": "database in postgres so if you look at some options in spring for this data integration with relational databases",
    "start": "1365179",
    "end": "1371600"
  },
  {
    "text": "one of the most popular projects is spring data jpa which relies on jpa and hibernate specifically to integrate with",
    "start": "1371600",
    "end": "1379280"
  },
  {
    "text": "the a data store but we also have another project called springdata.jdbc which is quite useful if you're working",
    "start": "1379280",
    "end": "1385700"
  },
  {
    "text": "with microservices and Cloud native applications it's very focused and actually implements domain-driven design",
    "start": "1385700",
    "end": "1392299"
  },
  {
    "text": "principles so when you use spring data jdbc you work with Concepts like Aggregates like repositories bounded",
    "start": "1392299",
    "end": "1398299"
  },
  {
    "text": "context which Maps perfectly to the way we design modern applications and it",
    "start": "1398299",
    "end": "1403880"
  },
  {
    "text": "comes into flavors there's the jdbc flavor which is for imperative traditional applications but we also",
    "start": "1403880",
    "end": "1410059"
  },
  {
    "text": "have an R r2dbc flavor which is for reactive application so these two flavors starting from",
    "start": "1410059",
    "end": "1416240"
  },
  {
    "text": "Springwood 3 actually have been combined into one single project that is now called Spring data relational",
    "start": "1416240",
    "end": "1423020"
  },
  {
    "text": "because it's the same framework and supporting both imperative and reactive applications in my case I'm working with",
    "start": "1423020",
    "end": "1429500"
  },
  {
    "text": "a small application Cloud native so I want to use spring data relational",
    "start": "1429500",
    "end": "1434720"
  },
  {
    "text": "let's do that I go back to the initializer and add a",
    "start": "1434720",
    "end": "1440419"
  },
  {
    "start": "1437000",
    "end": "2107000"
  },
  {
    "text": "few dependencies first of all I need to add spring data jdbc",
    "start": "1440419",
    "end": "1445880"
  },
  {
    "text": "for the persistence I need to add the postgresql driver",
    "start": "1445880",
    "end": "1451039"
  },
  {
    "text": "I want to manage schema with Flyway so that I can version my database just like",
    "start": "1451039",
    "end": "1456980"
  },
  {
    "text": "I do it I do versioning for my code and then I add test containers and I'll talk about that in a few minutes",
    "start": "1456980",
    "end": "1465919"
  },
  {
    "text": "so let's go back to our code and let's start adding data persistence",
    "start": "1465919",
    "end": "1472520"
  },
  {
    "text": "to our application so one of the nice things I like about spring data jdbc is that it works with",
    "start": "1472520",
    "end": "1478880"
  },
  {
    "text": "immutable objects objects and records are immutable objects so I can use regulars directly with spring data jdbc",
    "start": "1478880",
    "end": "1485780"
  },
  {
    "text": "I can't use records with jpa or hibernate because hibernate requires mutating objects so if you're using jpa",
    "start": "1485780",
    "end": "1492980"
  },
  {
    "text": "or hibernate you need to replace the record with a traditional Java class",
    "start": "1492980",
    "end": "1499299"
  },
  {
    "text": "and in order to convert this into an entity that can be persisted into a database I just need to add the ID",
    "start": "1499340",
    "end": "1505820"
  },
  {
    "text": "annotation in here i d there it is so now I can persist",
    "start": "1505820",
    "end": "1511880"
  },
  {
    "text": "trackers I can persist books in a database and then another way to access the database and again we have this",
    "start": "1511880",
    "end": "1518299"
  },
  {
    "text": "concept of repository that comes from the domain driven design terminology I",
    "start": "1518299",
    "end": "1523940"
  },
  {
    "text": "Define it as an interface I say Book Repository and then I extend one of the interfaces",
    "start": "1523940",
    "end": "1530299"
  },
  {
    "text": "provided by the spring data framework list crowd repository that will give me",
    "start": "1530299",
    "end": "1535820"
  },
  {
    "text": "will give me access to books and I need to specify the primary key which is of",
    "start": "1535820",
    "end": "1540980"
  },
  {
    "text": "type long now this is it's this is my data persistence layer it's two lines like",
    "start": "1540980",
    "end": "1548539"
  },
  {
    "text": "how cool is that because I can use records since spring data.jdbc works with immutable data and spring data will",
    "start": "1548539",
    "end": "1556640"
  },
  {
    "text": "implement this interface and provide implementation for all the methods that I can use to create read update and",
    "start": "1556640",
    "end": "1562820"
  },
  {
    "text": "delete books so that's it I don't have to do anything else in my code which is really cool",
    "start": "1562820",
    "end": "1568940"
  },
  {
    "text": "and next I need to create a schema I said I'm using Flyway so what Flyway does is basically versioning for a",
    "start": "1568940",
    "end": "1575779"
  },
  {
    "text": "database so every time you want to make a change to the database you create a new file you increase the version number so",
    "start": "1575779",
    "end": "1582200"
  },
  {
    "text": "there's a conversion in the naming in this case V1 and I can use it to initialize the schema",
    "start": "1582200",
    "end": "1587600"
  },
  {
    "text": "so create well create table book I have two Fields I have an ID of",
    "start": "1587600",
    "end": "1594679"
  },
  {
    "text": "type big serial and this is the primary key and then I have the title of the",
    "start": "1594679",
    "end": "1600140"
  },
  {
    "text": "book which is a string two five five and I also want it to be not null",
    "start": "1600140",
    "end": "1607100"
  },
  {
    "text": "alright that's it now final step I have a Docker compose file here with my",
    "start": "1607100",
    "end": "1613340"
  },
  {
    "text": "postgresql definition that I want to use and the last step I need to tell",
    "start": "1613340",
    "end": "1618380"
  },
  {
    "text": "springboots to connect to my local database here so I would need to go in",
    "start": "1618380",
    "end": "1623480"
  },
  {
    "text": "my application property file and specify three parameters I need a URL I need a",
    "start": "1623480",
    "end": "1629600"
  },
  {
    "text": "username and I need a password but actually I don't need that anymore",
    "start": "1629600",
    "end": "1635659"
  },
  {
    "text": "because starting from springboot 3.1 I can just remove this one",
    "start": "1635659",
    "end": "1640760"
  },
  {
    "text": "I can add a dependency to Spring boot toggle compose you can see there is only for",
    "start": "1640760",
    "end": "1648020"
  },
  {
    "text": "development and now when I run the application springboot will find my Docker compose",
    "start": "1648020",
    "end": "1653600"
  },
  {
    "text": "file and automatically start postgres and automatically Define a configure URL",
    "start": "1653600",
    "end": "1659059"
  },
  {
    "text": "username and password for springboots let's see how it works so I want to show you that I'm not",
    "start": "1659059",
    "end": "1665240"
  },
  {
    "text": "kidding so there's no postgresql container running right now let's say Docker PS grab postgres",
    "start": "1665240",
    "end": "1672559"
  },
  {
    "text": "so no container running for the database and now I can run bootron as I usually",
    "start": "1672559",
    "end": "1678919"
  },
  {
    "text": "do and what happens is that springboot will",
    "start": "1678919",
    "end": "1684140"
  },
  {
    "text": "find out my Docker compose file will start a postgresql container image we'll",
    "start": "1684140",
    "end": "1689419"
  },
  {
    "text": "wait for postgres to be ready and then it will start my application so if we go back up in the logs",
    "start": "1689419",
    "end": "1696080"
  },
  {
    "text": "we should be able to see that springboot found the docker compose file",
    "start": "1696080",
    "end": "1701600"
  },
  {
    "text": "created the postgresql container waited for it to be ready",
    "start": "1701600",
    "end": "1706820"
  },
  {
    "text": "and after it was healthy then it started the application so now I don't have to do that manually anymore I can just",
    "start": "1706820",
    "end": "1713900"
  },
  {
    "text": "focus on my business logic let's verify that it works also",
    "start": "1713900",
    "end": "1719360"
  },
  {
    "text": "8080 books and it does of course we have no date and notebooks in the database for now",
    "start": "1719360",
    "end": "1725779"
  },
  {
    "text": "but we get a 200 reply and the database is integrated correctly",
    "start": "1725779",
    "end": "1731900"
  },
  {
    "text": "this is one of the new features in springboot 3.1 now",
    "start": "1731900",
    "end": "1737840"
  },
  {
    "text": "of course if we are aiming at production we need to be good at writing tests and I have already prepared an",
    "start": "1737840",
    "end": "1745159"
  },
  {
    "text": "integration test I use The annotation spring boot test to spin up a full spring boot application",
    "start": "1745159",
    "end": "1751340"
  },
  {
    "text": "with the web server and I use this webtest client object in order to query my application and verify that I can",
    "start": "1751340",
    "end": "1758600"
  },
  {
    "text": "correctly send post requests to create books and retrieve books using a get",
    "start": "1758600",
    "end": "1765020"
  },
  {
    "text": "request the problem is that if I run this test now this will fail",
    "start": "1765020",
    "end": "1771320"
  },
  {
    "text": "let's see and it fails because you won't find the",
    "start": "1771320",
    "end": "1776360"
  },
  {
    "text": "database because the docker compost part was only for my development environment now I'm writing a test I need a database",
    "start": "1776360",
    "end": "1783140"
  },
  {
    "text": "for testing and the common thing or yeah the standard thing that we usually do",
    "start": "1783140",
    "end": "1788419"
  },
  {
    "text": "here is we introduce an in-memory database like H2 now that is an option but it's not",
    "start": "1788419",
    "end": "1795140"
  },
  {
    "text": "really a good option because if you're using postgresql in production I really want to use postgres also while testing",
    "start": "1795140",
    "end": "1801260"
  },
  {
    "text": "and developing in order to achieve environment parity otherwise I cannot trust my test H2 has a different syntax",
    "start": "1801260",
    "end": "1806659"
  },
  {
    "text": "H2 is a different database if I want to be sure that my code really works without additional manual testing I need",
    "start": "1806659",
    "end": "1814039"
  },
  {
    "text": "to use postgres and that's where test containers comes really handy because test containers provide a feature to",
    "start": "1814039",
    "end": "1820520"
  },
  {
    "text": "spin up and manage containers while running tests so it's an extension on top of junit",
    "start": "1820520",
    "end": "1826640"
  },
  {
    "text": "so what I can do is configure a postgresql container in this in a test",
    "start": "1826640",
    "end": "1831980"
  },
  {
    "text": "class annotated as test configuration let me zoom in a bit",
    "start": "1831980",
    "end": "1837260"
  },
  {
    "text": "and I'll create it as a bin in springwoods I have the postgresql",
    "start": "1837260",
    "end": "1842500"
  },
  {
    "text": "container object from task container",
    "start": "1842500",
    "end": "1847659"
  },
  {
    "text": "and then I create a new one a specified image same one I used before postgres",
    "start": "1847940",
    "end": "1853899"
  },
  {
    "text": "version 15. so this will have test containers start",
    "start": "1853899",
    "end": "1860120"
  },
  {
    "text": "a postgresql container when I run my test but Springwood doesn't know how to connect to this container I need to",
    "start": "1860120",
    "end": "1867559"
  },
  {
    "text": "configure URL username and password but that's provided dynamically by test containers so what I can do starting",
    "start": "1867559",
    "end": "1873860"
  },
  {
    "text": "from springboot 3.1 is adding a second annotation called service connection and",
    "start": "1873860",
    "end": "1879020"
  },
  {
    "text": "now automatically springboots will know what URL username and password to use in",
    "start": "1879020",
    "end": "1884539"
  },
  {
    "text": "order to connect to this test container instance which is a throwaway instance it runs as part of the test and then is",
    "start": "1884539",
    "end": "1890360"
  },
  {
    "text": "destroyed so let's verify that it's actually working I'm importing that configuration",
    "start": "1890360",
    "end": "1895880"
  },
  {
    "text": "in my integration test let's give it a try I run the test now under the who test",
    "start": "1895880",
    "end": "1902840"
  },
  {
    "text": "containers should start a postgresql database let's see",
    "start": "1902840",
    "end": "1908620"
  },
  {
    "text": "uh huh expect you know to be null",
    "start": "1909080",
    "end": "1916059"
  },
  {
    "text": "oh yeah yeah I was so excited about two lines of data persistent that actually didn't use",
    "start": "1917120",
    "end": "1923360"
  },
  {
    "text": "the repository right so let's do that Book Repository",
    "start": "1923360",
    "end": "1931600"
  },
  {
    "text": "and then I can inject it via Constructor injection",
    "start": "1931760",
    "end": "1938120"
  },
  {
    "text": "let's do that and then this Book Repository equal Book",
    "start": "1938120",
    "end": "1945620"
  },
  {
    "text": "Repository and finally I can use Book Repository to implement my controller so I can say find all find by ID and all",
    "start": "1945620",
    "end": "1953419"
  },
  {
    "text": "these method are implemented by the framework so I just defined an interface I don't have to do anything myself",
    "start": "1953419",
    "end": "1960320"
  },
  {
    "text": "just make sure that I'm actually calling the repository right okay that is",
    "start": "1960320",
    "end": "1965720"
  },
  {
    "text": "running that's why it's important to have test let's run the application",
    "start": "1965720",
    "end": "1972799"
  },
  {
    "text": "and now we expect the result not to be null and the test is green",
    "start": "1972799",
    "end": "1978200"
  },
  {
    "text": "amazing now we have a problem though because we have two places where we Define a postgresql container we have it",
    "start": "1978200",
    "end": "1986179"
  },
  {
    "text": "in here for testing and we have it in Docker compose so if I want to upgrade to postgres 16 or change the",
    "start": "1986179",
    "end": "1993260"
  },
  {
    "text": "configuration I have to do it in two places so what if we could use only one of",
    "start": "1993260",
    "end": "1998360"
  },
  {
    "text": "these two methods in both places both for development and testing well it turns out I can actually do that",
    "start": "1998360",
    "end": "2004480"
  },
  {
    "text": "so I can use this test configuration also where running my application in development so what I'm going to do now",
    "start": "2004480",
    "end": "2010600"
  },
  {
    "text": "is removing the docker compose dependency and I'm gonna extend my application in",
    "start": "2010600",
    "end": "2017980"
  },
  {
    "text": "order to run in order to include this test configuration during development only so this is only for development and",
    "start": "2017980",
    "end": "2024700"
  },
  {
    "text": "I can do it by creating a new public static void method in here",
    "start": "2024700",
    "end": "2030100"
  },
  {
    "text": "where I point to my application spring application that is called book service",
    "start": "2030100",
    "end": "2035380"
  },
  {
    "text": "application and I extend it with my test environment",
    "start": "2035380",
    "end": "2040600"
  },
  {
    "text": "configuration and finally I can run it so now instead",
    "start": "2040600",
    "end": "2046240"
  },
  {
    "text": "of running my application as I normally would do with the boot run I would run it with the task called boot",
    "start": "2046240",
    "end": "2053679"
  },
  {
    "text": "test run which will run my application normal application with the additional",
    "start": "2053679",
    "end": "2059800"
  },
  {
    "text": "configuration for test containers so now if I run this",
    "start": "2059800",
    "end": "2064898"
  },
  {
    "text": "um yeah with Gradle if I run this now my application will",
    "start": "2064899",
    "end": "2070358"
  },
  {
    "text": "ignore the docker compose file but it will use the test containers configuration to start a postgresql",
    "start": "2070359",
    "end": "2076898"
  },
  {
    "text": "database there it is so let's check the logs so",
    "start": "2076899",
    "end": "2082358"
  },
  {
    "text": "we can see that test containers is creating a postgresql container so this is a huge Improvement for",
    "start": "2082359",
    "end": "2089020"
  },
  {
    "text": "developer experience because now we can have all these services that we need at",
    "start": "2089020",
    "end": "2094060"
  },
  {
    "text": "development time and the testing time we use test containers to Define them and then we can use them both for testing",
    "start": "2094060",
    "end": "2099520"
  },
  {
    "text": "and development so let me recap what we've done so I",
    "start": "2099520",
    "end": "2107380"
  },
  {
    "start": "2107000",
    "end": "2174000"
  },
  {
    "text": "used Flyway to manage the schema and data so Flyway we basically apply",
    "start": "2107380",
    "end": "2112599"
  },
  {
    "text": "Version Control to the database so every time we need the change on the database we create a new it's called a migration",
    "start": "2112599",
    "end": "2119680"
  },
  {
    "text": "so it's a version file so we can always reproduce the current state of the database because everything is struck",
    "start": "2119680",
    "end": "2125440"
  },
  {
    "text": "everything is Version Control and we can do it both for schema changes like I did that I created a table but also for",
    "start": "2125440",
    "end": "2131859"
  },
  {
    "text": "migrating data if we make some non-back or compatible changes and then I talked about test",
    "start": "2131859",
    "end": "2138099"
  },
  {
    "text": "containers and test containers can be used both at development and for testing to run these external dependencies so",
    "start": "2138099",
    "end": "2145540"
  },
  {
    "text": "it's it's just plain containers that we can run very useful for testing the data",
    "start": "2145540",
    "end": "2150760"
  },
  {
    "text": "persistence layer to ensure environment parity but you can use it for any kind",
    "start": "2150760",
    "end": "2156160"
  },
  {
    "text": "of service for example if you use key clock for authentication you can run a",
    "start": "2156160",
    "end": "2161440"
  },
  {
    "text": "Kegler container as a test container and have full integration test or with rabbitmq for example if you're using a",
    "start": "2161440",
    "end": "2167920"
  },
  {
    "text": "message broker so really really convenient um the final thing I want to talk about",
    "start": "2167920",
    "end": "2173460"
  },
  {
    "text": "is observability because a very important part especially when we",
    "start": "2173460",
    "end": "2179140"
  },
  {
    "start": "2174000",
    "end": "2286000"
  },
  {
    "text": "work with Cloud native applications with distributed system is being able to track what is going on in production if",
    "start": "2179140",
    "end": "2185619"
  },
  {
    "text": "we get a bug if we get an incident reported by a customer we need to know what is going on in our application and",
    "start": "2185619",
    "end": "2191800"
  },
  {
    "text": "we need to get full visibility into how a request is flowing through the system",
    "start": "2191800",
    "end": "2197200"
  },
  {
    "text": "and starting from Springville 3 we have we've had a new initiative called Spring observability to enhance observability",
    "start": "2197200",
    "end": "2203859"
  },
  {
    "text": "capabilities across the full spring portfolio and in particular we have two main projects that are relevant for us",
    "start": "2203859",
    "end": "2210339"
  },
  {
    "text": "the first one is spring boot actuator it's a dependency that I add to my application and out of the box it",
    "start": "2210339",
    "end": "2217359"
  },
  {
    "text": "provides a lot of different endpoints that I can use to Monitor and manage my application for example you can expose",
    "start": "2217359",
    "end": "2223540"
  },
  {
    "text": "metrics out of the box using Prometheus you can expose health information liveness and Readiness probes if you're",
    "start": "2223540",
    "end": "2229780"
  },
  {
    "text": "working with kubernetes you can use it to take a thread dump or hip dump it's very very convenient and then on top of",
    "start": "2229780",
    "end": "2236859"
  },
  {
    "text": "that and that's the big news in springboot 3 is that we have a new enhanced micrometer project that unifies",
    "start": "2236859",
    "end": "2243940"
  },
  {
    "text": "both metrics and traces in a single API called Observation API and that API is",
    "start": "2243940",
    "end": "2251260"
  },
  {
    "text": "used now across all the spring projects in order to instrument the code and produce both metrics and traces and then",
    "start": "2251260",
    "end": "2258160"
  },
  {
    "text": "you can use the specific implementation that your organization is using in my case it's Prometheus and open Telemetry",
    "start": "2258160",
    "end": "2264940"
  },
  {
    "text": "but maybe you want to use open Zipkin and use the send Matrix to datadoc that",
    "start": "2264940",
    "end": "2271000"
  },
  {
    "text": "that's fine this is an abstraction it produces metrics and traces and then you can have your own specific",
    "start": "2271000",
    "end": "2276640"
  },
  {
    "text": "implementation to export it depending on the format that you actually need and that you're using in your organization",
    "start": "2276640",
    "end": "2283420"
  },
  {
    "text": "let me show you that back to the spring initializer we need a",
    "start": "2283420",
    "end": "2288579"
  },
  {
    "start": "2286000",
    "end": "2339000"
  },
  {
    "text": "couple more dependency I said spring boot actuator that's one",
    "start": "2288579",
    "end": "2293619"
  },
  {
    "text": "then I need Prometheus because I want to export export metrics in the Prometheus",
    "start": "2293619",
    "end": "2299020"
  },
  {
    "text": "format I want support for distributed tracing",
    "start": "2299020",
    "end": "2304300"
  },
  {
    "text": "there it is and then I'm using open Telemetry now from here you cannot select open",
    "start": "2304300",
    "end": "2310240"
  },
  {
    "text": "Telemetry only Zipkin but it should arrive soon also from here I'm using",
    "start": "2310240",
    "end": "2315579"
  },
  {
    "text": "open Telemetry for this example and I need to change Branch let's do",
    "start": "2315579",
    "end": "2322180"
  },
  {
    "text": "that yes so I haven't changed anything in my code",
    "start": "2322180",
    "end": "2328900"
  },
  {
    "text": "I just configured in the application property files where to send uh the",
    "start": "2328900",
    "end": "2334359"
  },
  {
    "text": "traces and I have I'll show you here I have a grafana",
    "start": "2334359",
    "end": "2340060"
  },
  {
    "start": "2339000",
    "end": "2359000"
  },
  {
    "text": "observability stack it's all open source it's running on my machine by the way all the code is on GitHub so you can run",
    "start": "2340060",
    "end": "2345640"
  },
  {
    "text": "it yourself if you want to try I'm using rafana tempo for storing traces grafana Loki for storing logs and Prometheus for",
    "start": "2345640",
    "end": "2352720"
  },
  {
    "text": "storing metrics this is part of the this open source observability tool based on",
    "start": "2352720",
    "end": "2357760"
  },
  {
    "text": "rafana so now that I have that let me run the application",
    "start": "2357760",
    "end": "2363760"
  },
  {
    "start": "2359000",
    "end": "2632000"
  },
  {
    "text": "because we want to start tracking what is going on under the hood",
    "start": "2363760",
    "end": "2369700"
  },
  {
    "text": "boot test run I will start my postgresql database I don't have to do it explicitly very convenient and now let's",
    "start": "2369700",
    "end": "2377380"
  },
  {
    "text": "send the request HTTP 8080 books I expect no books to be there perfect",
    "start": "2377380",
    "end": "2383400"
  },
  {
    "text": "let's add a couple of books title The Hobbit",
    "start": "2383400",
    "end": "2389800"
  },
  {
    "text": "and then let's add another one the Lord of the Rings",
    "start": "2389800",
    "end": "2395800"
  },
  {
    "text": "all right so let's go to grafana now",
    "start": "2395800",
    "end": "2402240"
  },
  {
    "text": "and the first thing let me zoom in yes the first thing I want to look at is the logs I'm using Loki so I want to",
    "start": "2402400",
    "end": "2409780"
  },
  {
    "text": "check the logs for my book service application let's check that and I can see my log",
    "start": "2409780",
    "end": "2416200"
  },
  {
    "text": "message for example adding new book The Lord of the Rings so I get logs automatically exported to Logie and I",
    "start": "2416200",
    "end": "2423280"
  },
  {
    "text": "can query them from here and since I'm using one single solution now I have correlation across all these different",
    "start": "2423280",
    "end": "2429220"
  },
  {
    "text": "data so from the logs I can directly jump to the trace I get this Trace ID out of the box coming from micrometer",
    "start": "2429220",
    "end": "2436839"
  },
  {
    "text": "that allows me to track a specific process across different applications",
    "start": "2436839",
    "end": "2442119"
  },
  {
    "text": "now I'm using only one but the concept is the same so if I click on this Temple",
    "start": "2442119",
    "end": "2447640"
  },
  {
    "text": "link I will go to the tempo GUI let me close this so it's clear and I can",
    "start": "2447640",
    "end": "2453520"
  },
  {
    "text": "inspect the trace so you can see there are three different operations that happened when I created a book the first",
    "start": "2453520",
    "end": "2460480"
  },
  {
    "text": "one is the web server receiving a post request to slash books then a connection to the database in",
    "start": "2460480",
    "end": "2467859"
  },
  {
    "text": "particular postgres has been done so I even get additional attributes about what kind of driver I'm using and the",
    "start": "2467859",
    "end": "2474400"
  },
  {
    "text": "connection pool and then I can see the result so I",
    "start": "2474400",
    "end": "2479440"
  },
  {
    "text": "executed a query insert into book so I can even troubleshoot that to verify",
    "start": "2479440",
    "end": "2485079"
  },
  {
    "text": "that the query that has been generated by Spring data jdbc is correct",
    "start": "2485079",
    "end": "2490660"
  },
  {
    "text": "and again I didn't have to change my code or do like instrument the code",
    "start": "2490660",
    "end": "2495880"
  },
  {
    "text": "myself this is all out of the box on top of that of course I can always customize it maybe I want to add I have a",
    "start": "2495880",
    "end": "2502060"
  },
  {
    "text": "multi-tenant application and I want to add as part of these attributes a tenant ID I can do that so the observation API",
    "start": "2502060",
    "end": "2508540"
  },
  {
    "text": "provided by micrometer is very extensible and then last I want to show you the",
    "start": "2508540",
    "end": "2514540"
  },
  {
    "text": "Matrix so since I'm exporting Prometheus metrics then I can draw dashboards like this and keep track of like the i o the",
    "start": "2514540",
    "end": "2521740"
  },
  {
    "text": "jvm memory usage for example and yeah and use it any in any way I",
    "start": "2521740",
    "end": "2529540"
  },
  {
    "text": "need to ensure that I always have the right information to troubleshoot applications in production and to get",
    "start": "2529540",
    "end": "2535060"
  },
  {
    "text": "alerts if something is going wrong and then I mentioned uh actuator earlier",
    "start": "2535060",
    "end": "2541180"
  },
  {
    "text": "so I want to show you that because localhost 8080 so actuator",
    "start": "2541180",
    "end": "2549599"
  },
  {
    "text": "I have exposed some of these endpoints Now by default you don't get them all exposed for security reasons so I have I",
    "start": "2550119",
    "end": "2557800"
  },
  {
    "text": "had enabled them in the properties but we can see the list of all the endpoints that are automatically exported for",
    "start": "2557800",
    "end": "2564099"
  },
  {
    "text": "example I get a Prometheus endpoint this is what Prometheus is using again it's coming out of the box for me",
    "start": "2564099",
    "end": "2570520"
  },
  {
    "text": "another interesting one is the health endpoint where I can verify the overall status of",
    "start": "2570520",
    "end": "2577599"
  },
  {
    "text": "my application so I can see the overall status is up but I also have information for example about the database oh",
    "start": "2577599",
    "end": "2583359"
  },
  {
    "text": "postgresql is valid I can connect to it successfully I get the liveness and reading estate and here I would get",
    "start": "2583359",
    "end": "2589780"
  },
  {
    "text": "additional information based on what I have in my class path like if I'm integrating with rabbitmq then I would",
    "start": "2589780",
    "end": "2595720"
  },
  {
    "text": "also see the status in here so we can see the information about Flyway migrations or I can even for",
    "start": "2595720",
    "end": "2602800"
  },
  {
    "text": "example take a heap dump so taking if you ever had to troubleshoot memory",
    "start": "2602800",
    "end": "2608800"
  },
  {
    "text": "leaks in your job applications that's a complicated way to take a hip dump but you get these endpoint that you can call",
    "start": "2608800",
    "end": "2614500"
  },
  {
    "text": "and then get a hip dump downloaded there it is now I can load it into my I don't know J profiler a visual VM and then I",
    "start": "2614500",
    "end": "2621640"
  },
  {
    "text": "can troubleshoot my memory leak in the application",
    "start": "2621640",
    "end": "2626520"
  },
  {
    "text": "and that was it I want to mention one last thing is that spring boot 3 is has",
    "start": "2628119",
    "end": "2633700"
  },
  {
    "start": "2632000",
    "end": "2752000"
  },
  {
    "text": "also a baseline on Jakarta ee10 that's the successor of java EE and the main",
    "start": "2633700",
    "end": "2639099"
  },
  {
    "text": "change there that happened is new package names so all the Java X package names that you",
    "start": "2639099",
    "end": "2645220"
  },
  {
    "text": "have for example with jpa with the validation API now have to be changed to Jakarta dot something now this is this",
    "start": "2645220",
    "end": "2653380"
  },
  {
    "text": "should be as simple as find and replace the IDS can help you with that I can recommend looking at the project it's",
    "start": "2653380",
    "end": "2659859"
  },
  {
    "text": "open source it's called open rewrite that you can use you can add it as a Gradle or Maven plugin and automatically",
    "start": "2659859",
    "end": "2666579"
  },
  {
    "text": "we'll upgrade your application you can use it to upgrade to springboot 3 out of the box you can use it to upgrade from",
    "start": "2666579",
    "end": "2673060"
  },
  {
    "text": "junit 4 to junit 5. you can use it upgrade from java ee to Jakarta ee so",
    "start": "2673060",
    "end": "2678400"
  },
  {
    "text": "check it out it's very interesting on top of this there's a project called Springwood migrator that is actually",
    "start": "2678400",
    "end": "2684040"
  },
  {
    "text": "based on oven rewrite that can help you upgrade your applications to springboot 3 and to Java 17 so that we get even",
    "start": "2684040",
    "end": "2692079"
  },
  {
    "text": "more uh yeah we get even more chances to actually start upgrading because if we",
    "start": "2692079",
    "end": "2697900"
  },
  {
    "text": "can prove also that it's not that expensive to do it then when we're gonna get authorized to do it and jump on the",
    "start": "2697900",
    "end": "2705520"
  },
  {
    "text": "latest Java version and get all those performance improvements security improvements and by the way today's",
    "start": "2705520",
    "end": "2710619"
  },
  {
    "text": "Java's 28th birthday I mean it's been out there for 28 years and I think it's",
    "start": "2710619",
    "end": "2717760"
  },
  {
    "text": "still so exciting to be a Java developer in September we're gonna get Java 21 the new long-term support version I'm really",
    "start": "2717760",
    "end": "2725200"
  },
  {
    "text": "looking forward to that one of the great features coming there is virtual threads so for performance that's amazing so",
    "start": "2725200",
    "end": "2732940"
  },
  {
    "text": "remember to check that out and that was it I'll share the slides",
    "start": "2732940",
    "end": "2738160"
  },
  {
    "text": "and share the source code is all on GitHub I also maintain a separate repo it's called awesome spring with a lot of",
    "start": "2738160",
    "end": "2743740"
  },
  {
    "text": "different resources events podcast books articles you might find it useful if you",
    "start": "2743740",
    "end": "2748780"
  },
  {
    "text": "want to learn something more about specific spring topics um and that was it thank you very much",
    "start": "2748780",
    "end": "2754660"
  },
  {
    "start": "2752000",
    "end": "2769000"
  },
  {
    "text": "for joining",
    "start": "2754660",
    "end": "2757260"
  }
]