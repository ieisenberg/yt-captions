[
  {
    "start": "0",
    "end": "137000"
  },
  {
    "text": "[Music]",
    "start": "2550",
    "end": "10960"
  },
  {
    "text": "okay um hello everybody yeah um as all of us just said my name is Tim Fox",
    "start": "10960",
    "end": "16520"
  },
  {
    "text": "um just say a few brief words about myself um I'm employed by Red Hat um",
    "start": "16520",
    "end": "22840"
  },
  {
    "text": "been there for quite a while although I kind of took a bit of time out went to Spring SCE for a while back at Red Hat again like Martin I've been involved in",
    "start": "22840",
    "end": "30199"
  },
  {
    "text": "messaging systems for quite a long time although the kind of messing system I'm involved were less the kind of low latency Financial Service messaging",
    "start": "30199",
    "end": "37600"
  },
  {
    "text": "systems which a lot arguably is a more niche market and more the kind of um Mass Market open source messaging",
    "start": "37600",
    "end": "43800"
  },
  {
    "text": "systems so I've worked in I work exclusively in open source software I",
    "start": "43800",
    "end": "49000"
  },
  {
    "text": "don't do anything else there's no proprietary stuff at all for the last for the last 10 years of my career has been open source",
    "start": "49000",
    "end": "56440"
  },
  {
    "text": "exclusively other than vertex other projects um I've been in involved with I work with the rabbit mq team um I'm the",
    "start": "56600",
    "end": "63039"
  },
  {
    "text": "creator of the Hornet Q messaging system which is the one inside Jus application server um that's about to be merged",
    "start": "63039",
    "end": "69280"
  },
  {
    "text": "who's heard of active mq there's another one not many people okay surprising all right so basically hornetq is going to",
    "start": "69280",
    "end": "76119"
  },
  {
    "text": "be merge of v mq and that's going to become another so anyway I've been involved with the three biggest open source messaging systems um rabbit mq",
    "start": "76119",
    "end": "83759"
  },
  {
    "text": "hornetq xmq um and various other projects anyway we're not talking about messaging",
    "start": "83759",
    "end": "88960"
  },
  {
    "text": "systems here though today so say unlike Martin's talked before we um this is more of a um general purpose stuff so",
    "start": "88960",
    "end": "94840"
  },
  {
    "text": "I've kind of moved away from the messaging system stuff more to kind of like how do you build application the more kind of API design kind of stuff",
    "start": "94840",
    "end": "100880"
  },
  {
    "text": "and how do you scale applications so who's actually heard of",
    "start": "100880",
    "end": "106280"
  },
  {
    "text": "vertex okay and how many people have actually used it so far right",
    "start": "106280",
    "end": "112799"
  },
  {
    "text": "okay yeah how many people have heard of um reactive application development",
    "start": "112799",
    "end": "120360"
  },
  {
    "text": "okay so this is a kind of like buzz word at the moment a lot of people are claiming to be reactive which means a lot of different things but um we",
    "start": "120360",
    "end": "127119"
  },
  {
    "text": "definitely fit into that kind of mold um who said of node.js okay so you're in the right kind of area",
    "start": "127119",
    "end": "133720"
  },
  {
    "text": "although we're not no I got to get into that in a minute yeah so vertex right now kind of we have a production release which is",
    "start": "133720",
    "end": "140160"
  },
  {
    "start": "137000",
    "end": "172000"
  },
  {
    "text": "vertex 2 but right now most of the developments going on in vertex 3 and we're doing loads and loads of new stuff",
    "start": "140160",
    "end": "145879"
  },
  {
    "text": "we're making vertex much more embeddable we're getting away from the kind of like making everything like a container and",
    "start": "145879",
    "end": "151840"
  },
  {
    "text": "making it much more embeddable like a library and loads of new features and really cool stuff and I'll talk more",
    "start": "151840",
    "end": "157599"
  },
  {
    "text": "about that in this talk so a lot of this talk is really about um you know a lot",
    "start": "157599",
    "end": "163680"
  },
  {
    "text": "of the features are in only available in vertex 3 or some of the features are only available in vertex 3 other ones they're not necessarily available in the",
    "start": "163680",
    "end": "169800"
  },
  {
    "text": "current production version so what is vertex um it's quite",
    "start": "169800",
    "end": "176040"
  },
  {
    "start": "172000",
    "end": "345000"
  },
  {
    "text": "hard to describe because it's a very general purpose kind of thing um it say",
    "start": "176040",
    "end": "181640"
  },
  {
    "text": "runs on the jvm it say framework um framework is kind of a dirty word to some people I think people kind of say",
    "start": "181640",
    "end": "188480"
  },
  {
    "text": "Frameworks dat well they're kind of thinking more of a container right so when I say framework I'm not necessarily talking about a container some i' you",
    "start": "188480",
    "end": "195360"
  },
  {
    "text": "know some libraries can be Frameworks too right so and certainly in vertex 3 it's 100% embeddable you can use it with",
    "start": "195360",
    "end": "201920"
  },
  {
    "text": "with whatever you want we're not saying you know you have to run it inside a Vertex container",
    "start": "201920",
    "end": "208200"
  },
  {
    "text": "okay um yeah very general purpose we take a lot of inspiration from so when I",
    "start": "208200",
    "end": "214000"
  },
  {
    "text": "was at springsource I worked the rabbit mq team for a while and rabbit mq has written in llang erang is probably the",
    "start": "214000",
    "end": "219480"
  },
  {
    "text": "most um one of the most famous implementations of the actor model and",
    "start": "219480",
    "end": "224519"
  },
  {
    "text": "and a functional language as well um so that that was definitely a source of inspiration another source of",
    "start": "224519",
    "end": "230439"
  },
  {
    "text": "inspiration was and I kind of um when I say inspiration doesn't",
    "start": "230439",
    "end": "236200"
  },
  {
    "text": "mean I I think it's done everything right and actually one of the reasons for vertexes existing is because we",
    "start": "236200",
    "end": "241920"
  },
  {
    "text": "didn't want to do stuff in exactly that way and we thought we could do it better and that's no JS so in some ways you can",
    "start": "241920",
    "end": "247840"
  },
  {
    "text": "think of vertex as a kind of like polyglot bastard love child of kind of erlang OTP and OJs on the jvm",
    "start": "247840",
    "end": "257359"
  },
  {
    "text": "okay we are polyglot right so you can develop your vertex applications in in",
    "start": "257359",
    "end": "262759"
  },
  {
    "text": "multiple languages and the jvm I'll get to that in a bit as well very high performance everybody says high",
    "start": "262759",
    "end": "269160"
  },
  {
    "text": "performance right so but but vertex is you know objectively we've been measured",
    "start": "269160",
    "end": "275720"
  },
  {
    "text": "there's been a set of Frameworks who said of tech and power Frameworks U sorry Tech and power",
    "start": "275720",
    "end": "281600"
  },
  {
    "text": "benchmarks okay so there's a set of benchmarks done by a company nothing to do with us and they did admittedly quite",
    "start": "281600",
    "end": "287680"
  },
  {
    "text": "trivial benchmarks um and they pretty much measured every single anything everything on the market just about in",
    "start": "287680",
    "end": "294160"
  },
  {
    "text": "some very simple htdp style benchmarks and we're right at the top not just jvm stuff like no JM stuff and Ruby stuff",
    "start": "294160",
    "end": "301560"
  },
  {
    "text": "and SE stuff and whatever so very high performance but what I would say about",
    "start": "301560",
    "end": "307120"
  },
  {
    "text": "performance people can get a bit obsessed about performance right and the reality is everyone everyone says oh I",
    "start": "307120",
    "end": "312400"
  },
  {
    "text": "want the framework I use to be the fastest one but actually most people don't actually need that most people aren't writing high low",
    "start": "312400",
    "end": "319280"
  },
  {
    "text": "latency Financial systems that have need sub you know microc response times most people are writing websites and stuff",
    "start": "319280",
    "end": "325319"
  },
  {
    "text": "like that they don't need it right so actually you can go a bit up your own ass when it comes to performance so I'm",
    "start": "325319",
    "end": "330520"
  },
  {
    "text": "kind of stepping away from that as long as it's good enough that's what you know that's uh good enough for most people",
    "start": "330520",
    "end": "337600"
  },
  {
    "text": "and we won the Jax Innovation award this year for the most um Innovative Java technology right so that's kind of",
    "start": "337600",
    "end": "342919"
  },
  {
    "text": "introduction of what vertex is um I mentioned polyglot so we um yeah we",
    "start": "342919",
    "end": "349319"
  },
  {
    "start": "345000",
    "end": "393000"
  },
  {
    "text": "support Java JavaScript uh we in in vertex 3 we use the the naon JavaScript",
    "start": "349319",
    "end": "355840"
  },
  {
    "text": "engine has anyone actually played with that it's available in Java 8 right now now okay no one's played with that okay",
    "start": "355840",
    "end": "362280"
  },
  {
    "text": "couple of people so this is kind of really cool it's a very fast JavaScript engine much faster than the old Rhino",
    "start": "362280",
    "end": "368080"
  },
  {
    "text": "engine um so we use that we have Ruby groovy python just using jython gyan's",
    "start": "368080",
    "end": "375840"
  },
  {
    "text": "kind of been a bit kind of stalled for a long time but uh it's probably not the best uh language to use but uh closure",
    "start": "375840",
    "end": "383160"
  },
  {
    "text": "Scala um actually you can actually use PHP with vertex as well um and Salon",
    "start": "383160",
    "end": "388319"
  },
  {
    "text": "which the new language from JB so we support a lot of different",
    "start": "388319",
    "end": "393720"
  },
  {
    "start": "393000",
    "end": "474000"
  },
  {
    "text": "languages um at the core of vertex a set of asynchronous apis",
    "start": "395120",
    "end": "400160"
  },
  {
    "text": "so by you know what I mean by asynchronous so kind of vent vent style",
    "start": "400160",
    "end": "405319"
  },
  {
    "text": "API so instead of saying do this now and then blocking waiting for a response you",
    "start": "405319",
    "end": "411759"
  },
  {
    "text": "say go and do this here's a Handler call me back in some way when when when the",
    "start": "411759",
    "end": "417440"
  },
  {
    "text": "response is ready so the core API and vertex are pretty much all asynchronous",
    "start": "417440",
    "end": "423120"
  },
  {
    "text": "and we've got stuff and if you used noj before it's kind of similar idea so we have kind of very small set of core apis",
    "start": "423120",
    "end": "428960"
  },
  {
    "text": "very you know quite lowlevel stuff you know like HTTP and TCP and we have like",
    "start": "428960",
    "end": "435240"
  },
  {
    "text": "SSL support we actually have websocket support in there as well we have asynchronous file system support um and",
    "start": "435240",
    "end": "442840"
  },
  {
    "text": "we have kind of DNS UDP we have a thing called the event bus which is a very core feature in vertex",
    "start": "442840",
    "end": "450479"
  },
  {
    "text": "uh and probably the most important feature and this is actually a um a distributed messaging system built into vertex and I'll get to I'll show you",
    "start": "450479",
    "end": "457479"
  },
  {
    "text": "some demonstrations um of that a bit later on we also have support for distributed data we have distributed map",
    "start": "457479",
    "end": "464319"
  },
  {
    "text": "support so you can kind of on your network you can have different nodes putting stuff into Maps distributed maps",
    "start": "464319",
    "end": "470159"
  },
  {
    "text": "and getting data out anyway we'll get to that so why asynchronous why I just said",
    "start": "470159",
    "end": "479599"
  },
  {
    "start": "474000",
    "end": "1044000"
  },
  {
    "text": "the core apis in vertex are asynchronous so why why do we do that why don't we have synchronous API that you're",
    "start": "479599",
    "end": "486000"
  },
  {
    "text": "probably familiar with most apis in the jdk tend to be synchronous um and most",
    "start": "486000",
    "end": "491400"
  },
  {
    "text": "other languages arguably dealing with asynchronous API is harder to reason",
    "start": "491400",
    "end": "496680"
  },
  {
    "text": "about harder to debug harder to test and there's a certain amount of Truth in that it's not actually there's quite a",
    "start": "496680",
    "end": "502039"
  },
  {
    "text": "lot of myth actually in there as well um so why are we going down this route okay",
    "start": "502039",
    "end": "508080"
  },
  {
    "text": "and it's all about scaling a lot of concurrency um not all applications",
    "start": "508080",
    "end": "513120"
  },
  {
    "text": "actually need a lot of concurrencies but a lot of modern applications do so where do those where does that",
    "start": "513120",
    "end": "519399"
  },
  {
    "text": "concurrency come come from it may be that you have a lot of messages flying around from you know different uh",
    "start": "519399",
    "end": "525600"
  },
  {
    "text": "Publishers different subscribers um it might just be maybe you have a lot of connections maybe you",
    "start": "525600",
    "end": "531080"
  },
  {
    "text": "have kind of um maybe you're writing a web server and you have a keep alive even with you know most web servers you",
    "start": "531080",
    "end": "536120"
  },
  {
    "text": "have a keep alive time of like 5 10 seconds so any one time time you know a lot of traffic you're going have a lot of connections you need to support",
    "start": "536120",
    "end": "543040"
  },
  {
    "text": "websocket server lots of connections again you know Long Live Connections",
    "start": "543040",
    "end": "548200"
  },
  {
    "text": "internet of things mqtt again Long Live connection so a lot of modern applications characterize having to",
    "start": "548200",
    "end": "554279"
  },
  {
    "text": "support a lot of connections and you know connections can introduce a lot of",
    "start": "554279",
    "end": "560640"
  },
  {
    "text": "concurrency and if you're using a kind of a blocking IO the connection level",
    "start": "560640",
    "end": "565920"
  },
  {
    "text": "then you're not going to scale because you know if you have a million connections you need a million threads and even though threads are a lot",
    "start": "565920",
    "end": "571240"
  },
  {
    "text": "cheaper than they used to be on Modern Opera systems there's still a lot of overhead there okay so it's all about",
    "start": "571240",
    "end": "576839"
  },
  {
    "text": "scalability and um dealing with a lot of",
    "start": "576839",
    "end": "582040"
  },
  {
    "text": "concurrency so how do you actually write a Vertex",
    "start": "583959",
    "end": "588440"
  },
  {
    "text": "application well you can just embed it you just embed you know use those core",
    "start": "589800",
    "end": "595160"
  },
  {
    "text": "apis directly in your application if you like and use your your own threading model do what you",
    "start": "595160",
    "end": "600600"
  },
  {
    "text": "want but we also provide this thing called a vertical which basically gives you a concurrency model okay and we kind",
    "start": "600600",
    "end": "607920"
  },
  {
    "text": "of recommend you use this concurrence we don't say you have to use it but we recommend you use this concurrency model",
    "start": "607920",
    "end": "613560"
  },
  {
    "text": "with the very actor likee concurrency model so the code you write in vertex is",
    "start": "613560",
    "end": "620640"
  },
  {
    "text": "written in the form of these things called verticals and vertical are just lumps of code they're kind of the the basic execution unit of vertex and they",
    "start": "620640",
    "end": "627720"
  },
  {
    "text": "can be written in any language you like so Java JavaScript Ruby whatever yeah so",
    "start": "627720",
    "end": "632959"
  },
  {
    "text": "and you can mix and match them in a in an application you can have different vertical written in different",
    "start": "632959",
    "end": "638000"
  },
  {
    "text": "languages and an important thing about a vertical particular vertical instance is always single threaded well there is",
    "start": "638000",
    "end": "644560"
  },
  {
    "text": "actually an edge case I won't an advanced case I won't go into that right now but you can assume for now they're all single",
    "start": "644560",
    "end": "650360"
  },
  {
    "text": "threaded and what this gives you as a developer you don't have to worry about you know um synchronized and volatile",
    "start": "650360",
    "end": "657760"
  },
  {
    "text": "and locking and all well lots of L you know lots of race conditions that just don't occur it's a a much nicer way to",
    "start": "657760",
    "end": "664880"
  },
  {
    "text": "write replication so we're moving away from this kind of like um multi-threaded concurrency model to more of an actor",
    "start": "664880",
    "end": "671560"
  },
  {
    "text": "model yeah so these you can almost kind of they're not we're not strictly an actor model but you can kind of think of",
    "start": "671560",
    "end": "677160"
  },
  {
    "text": "the verticals as a bit like actors and they communicate with each other by sending messages over the event bus and",
    "start": "677160",
    "end": "683360"
  },
  {
    "text": "you scale by having more instances but a particular instance of be vertical is always single threaded yeah so kind of",
    "start": "683360",
    "end": "689519"
  },
  {
    "text": "like the active model who's heard of the active model by the way okay it's kind of popular you've got like um Roland um",
    "start": "689519",
    "end": "695800"
  },
  {
    "text": " was here just now and he's obviously the AA lead um there obviously another actor model",
    "start": "695800",
    "end": "702360"
  },
  {
    "text": "implementation um so I'll show you a vertical in just a minute um you can run these verticals at",
    "start": "702360",
    "end": "708639"
  },
  {
    "text": "the command line or you can like package them up into your maybe you have a gradal or Maven build system you know",
    "start": "708639",
    "end": "714839"
  },
  {
    "text": "you can you can use all these tools directly with vertex we're not trying to reinvent vent the wheel okay so let me show you a very",
    "start": "714839",
    "end": "721920"
  },
  {
    "text": "simple vertical so um what's the font size like there it's probably a bit big actually well you can see it so that's",
    "start": "721920",
    "end": "727959"
  },
  {
    "text": "all right so let's have a look at a hello world vertical so I have a directory",
    "start": "727959",
    "end": "733240"
  },
  {
    "text": "here and I have two files in it a Java file and a Javascript file uh let's have a look at the Java",
    "start": "733240",
    "end": "741839"
  },
  {
    "text": "one now I'm got a feeling this font size might be a bit too big Oh wrong",
    "start": "741839",
    "end": "747320"
  },
  {
    "text": "one my shift key doesn't work for some reason there we go yeah let me just adjust that font",
    "start": "747320",
    "end": "753959"
  },
  {
    "text": "size uh",
    "start": "753959",
    "end": "756959"
  },
  {
    "text": "edit it just depends from projector to projector really so let's go down a bit",
    "start": "759519",
    "end": "765920"
  },
  {
    "text": "to 20 okay still overlapping a bit but",
    "start": "765920",
    "end": "771760"
  },
  {
    "text": "anyway this is a kind of the simp one of the simplest possible vertical you can write this time in Java this particular",
    "start": "771760",
    "end": "778279"
  },
  {
    "text": "ver this particular ver we use Java R in vertex 3 exclusively and all you're doing here",
    "start": "778279",
    "end": "784320"
  },
  {
    "text": "you basically you have a thing vertical has got a start method and then inside that we're going to create an HTTP",
    "start": "784320",
    "end": "790560"
  },
  {
    "text": "server and I'll just scroll across a bit you can't quite see it all on there but",
    "start": "790560",
    "end": "796120"
  },
  {
    "text": "um but basically we just creating HP server and we're setting a response Handler on the server and we're using",
    "start": "796120",
    "end": "801800"
  },
  {
    "text": "lambdas for that how do I scroll across let me just change the font size again so you can",
    "start": "801800",
    "end": "807600"
  },
  {
    "text": "actually see it",
    "start": "807600",
    "end": "811079"
  },
  {
    "text": "right hopefully it's time yeah so we're setting we're",
    "start": "817360",
    "end": "823199"
  },
  {
    "text": "creating HP server we're setting a a Handler on the server and that handle is going to be called when a request arrives it's just a Lambda Java rate",
    "start": "823199",
    "end": "830040"
  },
  {
    "text": "Lambda and then we're just going to put out some static HTML so it's a very kind of trivial example right so let's run",
    "start": "830040",
    "end": "836320"
  },
  {
    "text": "that how do we actually run that and have you seen this if you used before you've seen a similar kind of thing",
    "start": "836320",
    "end": "842399"
  },
  {
    "text": "right so to run it you can run it on the command line if you like and you can do that by saying vertex run oh hang on a",
    "start": "842399",
    "end": "849920"
  },
  {
    "text": "second it's a Java source file so we have to compile it first right because you can't run Java Source fils directly",
    "start": "849920",
    "end": "856560"
  },
  {
    "text": "actually no you can you can R run Java source files directly with vertex so we just run it",
    "start": "856560",
    "end": "862040"
  },
  {
    "text": "directly and let's go to our browser F5 go hello well from java it's running",
    "start": "862040",
    "end": "867759"
  },
  {
    "text": "okay this kind of nice feature of java you can run you don't have to go through this whole kind of like build compile",
    "start": "867759",
    "end": "875000"
  },
  {
    "text": "you know cycle for prototyping so if you're kind of knocking stuff together really is you know creating a demo or",
    "start": "875000",
    "end": "881560"
  },
  {
    "text": "doing a bit quick prototyping you can just run Java Stu directly we obviously support running class files too so in a",
    "start": "881560",
    "end": "888079"
  },
  {
    "text": "in a bigger application you would typically compile as well have it as part of a build but it's good for prototyping stuff like that it's kind of",
    "start": "888079",
    "end": "893600"
  },
  {
    "text": "a nice feature so it's all about kind of one of the main things I've getting away from this kind of complexity of like you",
    "start": "893600",
    "end": "899320"
  },
  {
    "text": "know um we want you to get have real power to do stuff directly run stuff where you want directly without having",
    "start": "899320",
    "end": "905839"
  },
  {
    "text": "to go through this um complex packaging okay let's take a look at the JavaScript",
    "start": "905839",
    "end": "912320"
  },
  {
    "text": "one actually learn to type and this is the same thing R in",
    "start": "916880",
    "end": "923000"
  },
  {
    "text": "JavaScript a bit less AOS again if youve know J before it kind",
    "start": "923000",
    "end": "928399"
  },
  {
    "text": "of it's kind of similar right so you're creating a server and you're setting a request Handler we can run that too so",
    "start": "928399",
    "end": "935040"
  },
  {
    "text": "uh so when we run verticals directly on the command line that's called raw verticals we call them raw",
    "start": "935040",
    "end": "942360"
  },
  {
    "text": "verticals okay five there we go right so that's kind of a Hello World",
    "start": "942800",
    "end": "948040"
  },
  {
    "text": "thing I mentioned before um we have this thing called the event bus in vertex and the event bus so a little vertical like",
    "start": "948040",
    "end": "953680"
  },
  {
    "text": "that by itself is not much use and a real application is going to be composed of many many different verticals doing",
    "start": "953680",
    "end": "959000"
  },
  {
    "text": "different things usually doing one thing and doing one thing well it's kind of the microservices model really okay so",
    "start": "959000",
    "end": "965720"
  },
  {
    "text": "you can kind of think verticals T typically um Implement your microservices for your application yeah",
    "start": "965720",
    "end": "972279"
  },
  {
    "text": "and they then talk to each other either on an event bath or maybe via HTTP depending what style of microservices",
    "start": "972279",
    "end": "978800"
  },
  {
    "text": "you like maybe you prefer kind of HTTP microservices that's fine but um we also provide something",
    "start": "978800",
    "end": "984959"
  },
  {
    "text": "called an event bus so the event bus is the nervous system a vertex and it's really a um it's basically a a transient",
    "start": "984959",
    "end": "993120"
  },
  {
    "text": "published subscribed messaging system it's built into vertex and you can send message you can",
    "start": "993120",
    "end": "1000199"
  },
  {
    "text": "send pretty much very very simple the messages you actually send there no complicated kind of message format you can send a primitive type or a string or",
    "start": "1000199",
    "end": "1008680"
  },
  {
    "text": "you know more complex objects if you want one thing we kind of recommend for most interactions is to send Jason and",
    "start": "1008680",
    "end": "1015800"
  },
  {
    "text": "the reason for that is Jason's really well understood by all the different languages it's really easy to create",
    "start": "1015800",
    "end": "1020880"
  },
  {
    "text": "Json it's really easy to you know to pass it understand it you know if we were sending some sort of serialized",
    "start": "1020880",
    "end": "1026880"
  },
  {
    "text": "Java object to a ruby vertical it's going to go what the what do I do with this right it's be very hard for it",
    "start": "1026880",
    "end": "1032038"
  },
  {
    "text": "to understand so that's why we kind of say Jason although it's um it's not a strict rule you can use whatever you",
    "start": "1032039",
    "end": "1038280"
  },
  {
    "text": "want maybe you're an application you don't have any Ruby verticals maybe it's all Java in which case you can send whatever you",
    "start": "1038280",
    "end": "1044839"
  },
  {
    "start": "1044000",
    "end": "1132000"
  },
  {
    "text": "want so the event B inside a particular jvm instance you have many different vertexes running and use event you use",
    "start": "1044839",
    "end": "1051600"
  },
  {
    "text": "the event buff to communicate but it actually I mentioned before it's actually distributed messaging system so it actually joins together multiple",
    "start": "1051600",
    "end": "1057720"
  },
  {
    "text": "vertex instances running on the same network and they'll discover each other and form this kind of like big um",
    "start": "1057720",
    "end": "1063600"
  },
  {
    "text": "distributed peer-to-peer event um event uh event bus there's no there's no",
    "start": "1063600",
    "end": "1068840"
  },
  {
    "text": "master server it's not like kind of your typical JMS server or something where you've got kind of like a master server",
    "start": "1068840",
    "end": "1073880"
  },
  {
    "text": "you start up and everybody connects through it and send stuff",
    "start": "1073880",
    "end": "1079320"
  },
  {
    "text": "so where are we going here we're basically going towards a more microservices model for application development we're moving away from this",
    "start": "1079320",
    "end": "1086240"
  },
  {
    "text": "kind of like applica you know uh application server style so there's no kind of like monolithic application",
    "start": "1086240",
    "end": "1092240"
  },
  {
    "text": "server where you deploy verticals into you just run them wherever you want yeah and actually you can run them",
    "start": "1092240",
    "end": "1099880"
  },
  {
    "text": "without even having vertex installed and I'll get to that in a minute and you have these different parts of your application communicating",
    "start": "1099880",
    "end": "1106159"
  },
  {
    "text": "over the event bus to form your application so if you had a large application you can comp decompose that",
    "start": "1106159",
    "end": "1111640"
  },
  {
    "text": "into different languages maybe you have different teams who want to do different parts of the application maybe you got a web team who wants to use JavaScript um",
    "start": "1111640",
    "end": "1118880"
  },
  {
    "text": "because of their skill set maybe you have like a backend team wants to use Java or scolar or something they can do that yeah and they can be Loosely",
    "start": "1118880",
    "end": "1125320"
  },
  {
    "text": "coupled living on different parts of your network talking to each other so no application",
    "start": "1125320",
    "end": "1131480"
  },
  {
    "start": "1132000",
    "end": "1533000"
  },
  {
    "text": "server and we take the event bus a step further still not only can you use the event bus to to join together these",
    "start": "1132559",
    "end": "1140120"
  },
  {
    "text": "services on your on your own on your own network we can extend that into the browser",
    "start": "1140120",
    "end": "1146360"
  },
  {
    "text": "too uh so you can have use the same API or very similar API inside your browser",
    "start": "1146360",
    "end": "1151679"
  },
  {
    "text": "in in in client side JavaScript to interact on the event bus as it would do on the server",
    "start": "1151679",
    "end": "1157760"
  },
  {
    "text": "side so now you have this kind of like big uh you know address space which well",
    "start": "1157760",
    "end": "1163679"
  },
  {
    "text": "it's actually a completely flat address space which encompasses you know your your stuff in",
    "start": "1163679",
    "end": "1168840"
  },
  {
    "text": "your server stuff in your client and they can all talk to each other exactly the same way so this makes it really",
    "start": "1168840",
    "end": "1174159"
  },
  {
    "text": "easy to do this whole kind of like this whole generation of so-called realtime web",
    "start": "1174159",
    "end": "1181158"
  },
  {
    "text": "applications um so kind of pushing stuff to browsers you know and we find a lot of people using vertex in the gaming",
    "start": "1181200",
    "end": "1187440"
  },
  {
    "text": "industry for example lot kind of like mobile games that kind of stuff it's proven very popular for that kind of thing um we don't force you to use the",
    "start": "1187440",
    "end": "1196640"
  },
  {
    "text": "event I know right now for instance http rest rest microservices are very popular stuff like Drop Wizard and and you can",
    "start": "1196640",
    "end": "1203159"
  },
  {
    "text": "also use vertex in that way so especially in vertex through bring a lot of uh really cool rest support in we can",
    "start": "1203159",
    "end": "1210159"
  },
  {
    "text": "already do rest web services in vertex but vertex 3 it's going to be a lot",
    "start": "1210159",
    "end": "1215360"
  },
  {
    "text": "easier so we're going to so this is kind of interesting thing about ver we're very unopinionated we don't say this is",
    "start": "1215360",
    "end": "1221520"
  },
  {
    "text": "how you write web application it's a toolkit you can use it in a thousand different ways yeah and it supports it's",
    "start": "1221520",
    "end": "1228760"
  },
  {
    "text": "kind of like no JS in that respect no Jess itself doesn't say this is how you write web application that's kind of",
    "start": "1228760",
    "end": "1233799"
  },
  {
    "text": "done by the modules that the mpm modules that sit on top of no right and it's similar a Vertex the core of vertex is",
    "start": "1233799",
    "end": "1240200"
  },
  {
    "text": "pretty is is very unopinionated so let me show you the event",
    "start": "1240200",
    "end": "1246159"
  },
  {
    "text": "bus okay so let me shut down that one so we're in um let's move to a different directory called event bus I have a very",
    "start": "1246159",
    "end": "1253320"
  },
  {
    "text": "simple example here I have um let's take a look at receiver JS again again",
    "start": "1253320",
    "end": "1258840"
  },
  {
    "text": "another raw vertical so let me actually use less there might be a bit easier to",
    "start": "1258840",
    "end": "1265799"
  },
  {
    "text": "view okay so this um vertical is very trivial it's basically doing the",
    "start": "1266600",
    "end": "1273080"
  },
  {
    "text": "subscribed part of publish subscribe messaging okay it's uh registering a",
    "start": "1273080",
    "end": "1278760"
  },
  {
    "text": "Handler on the event B against a an address called Newsfeed it's just a string it could be anything whenever it",
    "start": "1278760",
    "end": "1285840"
  },
  {
    "text": "receives data on that address it's just going to log it out to the console so whenever it receives a message it's going to log it",
    "start": "1285840",
    "end": "1292400"
  },
  {
    "text": "out okay uh so let's run that vertex run receive J now this time we're going to",
    "start": "1292400",
    "end": "1299039"
  },
  {
    "text": "add a switch called cluster and this tells vertex when it step starts up because obviously each",
    "start": "1299039",
    "end": "1304960"
  },
  {
    "text": "when I run in the command line they're all running in their own jvm yeah this tells vertex a cluster switch Tails",
    "start": "1304960",
    "end": "1310480"
  },
  {
    "text": "vertex look when you start up look out for any other vertexes and might appear on the network and if they do then form",
    "start": "1310480",
    "end": "1316159"
  },
  {
    "text": "a cluster with them okay so it takes a few seconds to you know there we go it's starting it's running",
    "start": "1316159",
    "end": "1322720"
  },
  {
    "text": "now so let's go to another console uh where are",
    "start": "1322720",
    "end": "1327360"
  },
  {
    "text": "we and we have a um a vertical sender.",
    "start": "1327880",
    "end": "1333720"
  },
  {
    "text": "Java this time written Java obviously and this is this is going to",
    "start": "1333720",
    "end": "1339679"
  },
  {
    "text": "do the published part of of publish subcribe messaging and what it's going to do we're setting a timer that's going",
    "start": "1339679",
    "end": "1345960"
  },
  {
    "text": "to fire every thousand milliseconds every second and when it does it's just going to send",
    "start": "1345960",
    "end": "1352080"
  },
  {
    "text": "that message to that same address okay let's run",
    "start": "1352080",
    "end": "1357480"
  },
  {
    "text": "that minus",
    "start": "1357480",
    "end": "1360799"
  },
  {
    "text": "cluster all right so and going back to the other console you can see the other one's picked it up",
    "start": "1365919",
    "end": "1371600"
  },
  {
    "text": "and that would work wherever it is on the network okay so let's make it a bit more interesting let's go to another",
    "start": "1371600",
    "end": "1377520"
  },
  {
    "text": "console and oh where am I uh pwj ah",
    "start": "1377520",
    "end": "1385240"
  },
  {
    "text": "okay let's push that into the browser too so in order to push into the browser",
    "start": "1385240",
    "end": "1391720"
  },
  {
    "text": "we need to serve a page the browser so we need a web server so we've got a web server written also in",
    "start": "1391720",
    "end": "1398679"
  },
  {
    "text": "vertex called bridge server.js and actually the top part of it is the web server it's very simple to",
    "start": "1398679",
    "end": "1404880"
  },
  {
    "text": "write a web server in vertex um I can if it's not obvious to you what's",
    "start": "1404880",
    "end": "1411320"
  },
  {
    "text": "going on there I'll just step through it very quickly we're creating a an HTTP server and then we're setting this",
    "start": "1411320",
    "end": "1417120"
  },
  {
    "text": "request Handler on it again when we get a request in we're just going to look at the path of that request if it's for the",
    "start": "1417120",
    "end": "1423480"
  },
  {
    "text": "rout we're going to serve index HTML otherwise we're just going to serve whatever has been asked for don't run",
    "start": "1423480",
    "end": "1430600"
  },
  {
    "text": "that in production there's an obvious obvious security problem there okay I think some of you will have spotted that",
    "start": "1430600",
    "end": "1436600"
  },
  {
    "text": "already but it's just kind of demo for demo purpose pures right now the bit at the bottom says",
    "start": "1436600",
    "end": "1443159"
  },
  {
    "text": "create a stock J but this is kind of the magic I'm not going to go into that at the moment because we haven't got enough time um there a lot of features to get",
    "start": "1443159",
    "end": "1449240"
  },
  {
    "text": "through in this presentation this kind of does the bridging between the event bus the client Side Event bus and the",
    "start": "1449240",
    "end": "1454440"
  },
  {
    "text": "server side event bus so let's run that uh so we go vertex",
    "start": "1454440",
    "end": "1461000"
  },
  {
    "text": "run oh before we run actually let me show you the index HTML page we're going to serve",
    "start": "1461000",
    "end": "1467840"
  },
  {
    "text": "very trivial example it's just a basically a blank page that's got a bit of JavaScript in",
    "start": "1470279",
    "end": "1477159"
  },
  {
    "text": "it the JavaScript opens a connection to the event bus and then when it's open we",
    "start": "1477159",
    "end": "1483679"
  },
  {
    "text": "are registering a Handler on the event bus and we're just kind of you know doing the same as we did on the server",
    "start": "1483679",
    "end": "1488840"
  },
  {
    "text": "basically and then we got a little bit of jQuery we're just going to Output what we get to the actual page it's uh",
    "start": "1488840",
    "end": "1495440"
  },
  {
    "text": "as you can see I'm a server side developer not a client side developer so it's very Unpretty",
    "start": "1495440",
    "end": "1500480"
  },
  {
    "text": "okay so let's run that uh Bridge Ser oh I forgot the",
    "start": "1500480",
    "end": "1507960"
  },
  {
    "text": "cluster switch so I need to run it again with the cluster switch because all these three parts they could be running anywhere in your network they have to be",
    "start": "1507960",
    "end": "1513399"
  },
  {
    "text": "in the same same place",
    "start": "1513399",
    "end": "1517080"
  },
  {
    "text": "okay right let's go back to our browser F5 and as you can see the browser picked",
    "start": "1519360",
    "end": "1525360"
  },
  {
    "text": "up that same sender so it's all working on the same event bus right so this kind of a nice feature of",
    "start": "1525360",
    "end": "1532480"
  },
  {
    "start": "1533000",
    "end": "1777000"
  },
  {
    "text": "vertex okay so yeah I mentioned how to you've seen already how to run verticals what I call Raw verticals that can be",
    "start": "1533399",
    "end": "1539200"
  },
  {
    "text": "run on the command line but for many applications you don't want to do it that way you maybe you're kind of more used to the Java you know Maven build",
    "start": "1539200",
    "end": "1546600"
  },
  {
    "text": "process or you have a gradal build and you want to package stuff up into jars and do the kind of like standard Maven",
    "start": "1546600",
    "end": "1552039"
  },
  {
    "text": "kind of thing and push stuff to MAV you can do all that with vertex too you don't have to do everything like I just",
    "start": "1552039",
    "end": "1558080"
  },
  {
    "text": "said you it works very well with the standard Maven builds and standard gradal builds",
    "start": "1558080",
    "end": "1563600"
  },
  {
    "text": "okay and vert is completely embeddable as well you can embed it in your own applications say you've got an existing",
    "start": "1563600",
    "end": "1569279"
  },
  {
    "text": "application you can just embed it and use the parts you want okay so we're not kind of preaching if we don't want to",
    "start": "1569279",
    "end": "1574640"
  },
  {
    "text": "we're not saying this is a this is like the container you have to run everything inside",
    "start": "1574640",
    "end": "1580520"
  },
  {
    "text": "okay okay oh yeah let me just show you an example of a maven project that's used in vertex vertex three just so you",
    "start": "1583320",
    "end": "1589399"
  },
  {
    "text": "can see how simple it is um oh my refresh has gone a bit weird",
    "start": "1589399",
    "end": "1596039"
  },
  {
    "text": "there let me just okay in tell why are you doing",
    "start": "1596039",
    "end": "1604240"
  },
  {
    "text": "that some reason the refresh is going to weird on",
    "start": "1604240",
    "end": "1608919"
  },
  {
    "text": "that what is it doing let me just open that project",
    "start": "1609679",
    "end": "1616120"
  },
  {
    "text": "again that's very weird tell you what let me let me restart in",
    "start": "1617240",
    "end": "1623240"
  },
  {
    "text": "tell yeah so you can basically have what I've G to show you a minute it's basically a stand who's used Maven here",
    "start": "1623240",
    "end": "1628360"
  },
  {
    "text": "before who uses regularly uses Maven as part of your standard build process yeah",
    "start": "1628360",
    "end": "1634000"
  },
  {
    "text": "probably most people right so what I show you here is it's a standard Maven project nothing it's very",
    "start": "1634000",
    "end": "1639720"
  },
  {
    "text": "vanilla project it shows you how easy it to to use vertex in that way as well um that's a completely different project",
    "start": "1639720",
    "end": "1645240"
  },
  {
    "text": "it's just open we just uh uh is it this",
    "start": "1645240",
    "end": "1651320"
  },
  {
    "text": "one yeah yeah so I've got a um it's actually",
    "start": "1651320",
    "end": "1657279"
  },
  {
    "text": "the same you know that same vertical I just showed you in the command line but this time it's in you know part of a maven build you know saying hello world and",
    "start": "1657279",
    "end": "1665200"
  },
  {
    "text": "the pom XML is you know very very vanilla basically",
    "start": "1665200",
    "end": "1670559"
  },
  {
    "text": "just including the vertex dependency uh just set in the compiler to",
    "start": "1670559",
    "end": "1676640"
  },
  {
    "text": "1.8 and have a little bit at the end here I'm going to show you in a minute what we're going to do we're going to we're going to build it into a fat jar",
    "start": "1676640",
    "end": "1682600"
  },
  {
    "text": "who's used to the idea of having a fat executable jar it's kind of fashionable at the moment so the idea here is you're",
    "start": "1682600",
    "end": "1688840"
  },
  {
    "text": "going to compile everything into one jar and just deploy it you know with all the dependencies including the vertex",
    "start": "1688840",
    "end": "1694279"
  },
  {
    "text": "dependency inside the jar so you can copy that jar to any server with a jdk in it and just run it yeah so you can",
    "start": "1694279",
    "end": "1700159"
  },
  {
    "text": "have your micro service all all packaged up into one little unit and then just copy it wherever you want and we use the",
    "start": "1700159",
    "end": "1705279"
  },
  {
    "text": "maven shade jar for doing that it's kind of a common um common thing right so let me show you",
    "start": "1705279",
    "end": "1711519"
  },
  {
    "text": "that so let's shut down these servers",
    "start": "1711519",
    "end": "1716159"
  },
  {
    "text": "here yeah so I'm in the right directory so let me just run it so I'm just go mve and",
    "start": "1718559",
    "end": "1723640"
  },
  {
    "text": "install create the um package it up and actually install it into the local",
    "start": "1723640",
    "end": "1729200"
  },
  {
    "text": "repository now if we actually look in the Target directory you'll see um we've",
    "start": "1729200",
    "end": "1734720"
  },
  {
    "text": "got a example project fat Java this is the fat executable jar and we can just",
    "start": "1734720",
    "end": "1740320"
  },
  {
    "text": "run it with Java minus jar so oh I'm in the wrong",
    "start": "1740320",
    "end": "1747799"
  },
  {
    "text": "directory okay go back to our browser F5 so it's working same example from before",
    "start": "1748760",
    "end": "1753880"
  },
  {
    "text": "but that's all packaged up so what I'm demonstrating there is we're not trying to reinvent the wheel when you've",
    "start": "1753880",
    "end": "1758960"
  },
  {
    "text": "already got your own build process at your company and you can put vertex components can be pushed into any moving",
    "start": "1758960",
    "end": "1765039"
  },
  {
    "text": "repository and resolved like that in vertex 3 we also do very cool thing you can actually resolve Maven dependencies",
    "start": "1765039",
    "end": "1770559"
  },
  {
    "text": "at runtime if you want as well but I haven't got time to go into",
    "start": "1770559",
    "end": "1777600"
  },
  {
    "start": "1777000",
    "end": "1870000"
  },
  {
    "text": "that all right so how how am I doing for time actually halfway",
    "start": "1777600",
    "end": "1783760"
  },
  {
    "text": "through vertex also has um High availability built in ha support so you",
    "start": "1783760",
    "end": "1789679"
  },
  {
    "text": "can run um your services say say you've got um you want you want redundant services",
    "start": "1789679",
    "end": "1796440"
  },
  {
    "text": "from the server side so you can run your microservices on the server side and if one of them fails another vertex node",
    "start": "1796440",
    "end": "1802919"
  },
  {
    "text": "can take over responsibility for that for that failed service and that's built into",
    "start": "1802919",
    "end": "1808720"
  },
  {
    "text": "vertex we support um qu we we we basically um detect Network partitions",
    "start": "1808720",
    "end": "1814600"
  },
  {
    "text": "using a quorum approach I'm sure most of you are familiar with that um who's heard who's heard of the Quorum approach",
    "start": "1814600",
    "end": "1820320"
  },
  {
    "text": "for okay so basically just start up a number of nodes and you say I want I",
    "start": "1820320",
    "end": "1825519"
  },
  {
    "text": "don't want them the network to continue functioning unless there's a certain number of nodes still alive and if they",
    "start": "1825519",
    "end": "1831039"
  },
  {
    "text": "can't see that number of nodes then it'll automatically shut down",
    "start": "1831039",
    "end": "1836320"
  },
  {
    "text": "okay I don't think I've got I have I actually have an ha demo I could show you but I don't think I'm G to have time if I do that I probably won't have time",
    "start": "1837760",
    "end": "1844000"
  },
  {
    "text": "to show you the rest of the presentation so I'm going to miss that today but um",
    "start": "1844000",
    "end": "1849640"
  },
  {
    "text": "but like most things in vertex the ha is really simple to use you're not you're not editing complex XML files you",
    "start": "1849640",
    "end": "1855000"
  },
  {
    "text": "literally the way you enable ha in vertex you just put h switch on the command line that's it right so when you",
    "start": "1855000",
    "end": "1861000"
  },
  {
    "text": "that vertex run minus ha I mean there are some more advanced settings you can provide but again we're not doing that",
    "start": "1861000",
    "end": "1866960"
  },
  {
    "text": "via XML config okay all right",
    "start": "1866960",
    "end": "1874240"
  },
  {
    "start": "1870000",
    "end": "2185000"
  },
  {
    "text": "so one um interesting feature in in vertex 3",
    "start": "1874240",
    "end": "1880120"
  },
  {
    "text": "is basically solving a problem we had in vertex 2 about keeping all our apis up",
    "start": "1880120",
    "end": "1885559"
  },
  {
    "text": "to date so in vertex 2 we you know we support all these like I mentioned before we support all these different",
    "start": "1885559",
    "end": "1891240"
  },
  {
    "text": "languages and we have like a core Java API and then we have kind of like a version of the API for each of these",
    "start": "1891240",
    "end": "1897279"
  },
  {
    "text": "languages and as you can imagine keeping that all up to date is quite a pain so every time we add something or change",
    "start": "1897279",
    "end": "1902639"
  },
  {
    "text": "something in the Java we need to update the equivalent or add the equivalent in the JavaScript and the Ruby and The",
    "start": "1902639",
    "end": "1908440"
  },
  {
    "text": "Groovy and the closure and the python blah blah blah and add all the tests and everything right so it's very um it's",
    "start": "1908440",
    "end": "1914960"
  },
  {
    "text": "proved to be quite hard to manage and it's been very consuming and it's made meant that it's really slowed us down in",
    "start": "1914960",
    "end": "1921320"
  },
  {
    "text": "innovating those apis and also we have a very small team although we have a good Community as",
    "start": "1921320",
    "end": "1927559"
  },
  {
    "text": "well even so there's a lot of work to do that so we thought invertex 3 we really need to solve that problem and the way we're doing inex",
    "start": "1927559",
    "end": "1934120"
  },
  {
    "text": "vertex 3 instead of manually maintaining those other language apis we're generating them now from the Java API so",
    "start": "1934120",
    "end": "1941399"
  },
  {
    "text": "all we have to maintain now is the Java API and everything else gets generated including the",
    "start": "1941399",
    "end": "1946519"
  },
  {
    "text": "documentation yeah and it's proved to be quite a difficult job people when we went into that a lot",
    "start": "1946519",
    "end": "1951840"
  },
  {
    "text": "of people said well you're not that's not going to work how are you going to create idiomatic other language API that",
    "start": "1951840",
    "end": "1956919"
  },
  {
    "text": "the key isn't being idiomatic anyone can can do Coden right but making that actually look like an API that somebody",
    "start": "1956919",
    "end": "1964399"
  },
  {
    "text": "would actually want to use in Ruby or JavaScript is much more difficult and the way we attacked that was by Pro",
    "start": "1964399",
    "end": "1972240"
  },
  {
    "text": "putting constraints on the Java API just generating you know generating idiomatic",
    "start": "1972240",
    "end": "1977880"
  },
  {
    "text": "javascripts for for example from any Java API would be too hard of task to do so we said our Java API has there's a",
    "start": "1977880",
    "end": "1985720"
  },
  {
    "text": "subset of things you can do in those apis so you made the problem more tractable by doing that so we have a set",
    "start": "1985720",
    "end": "1991200"
  },
  {
    "text": "of constraints on our Java apis which makes it a lot easier to do and we have kind of like a so when we as",
    "start": "1991200",
    "end": "1998200"
  },
  {
    "text": "part of our build we kind of check the have like a we have effectively an annotation processor it checks all the",
    "start": "1998200",
    "end": "2003440"
  },
  {
    "text": "Java apis and it basically won't compile it if if if you're doing something you're not allowed to do in the",
    "start": "2003440",
    "end": "2009039"
  },
  {
    "text": "coure anyway so we use um yeah to actually generate generate it we use mvel templates it's kind of",
    "start": "2009039",
    "end": "2015840"
  },
  {
    "text": "implementation detail but it works pretty well and so far we've done vertex Tre is kind of like we're not there yet",
    "start": "2015840",
    "end": "2021480"
  },
  {
    "text": "but we've already done JavaScript groovy um salon and we uh start we're basically",
    "start": "2021480",
    "end": "2028120"
  },
  {
    "text": "starting the Scala one at the moment as",
    "start": "2028120",
    "end": "2032120"
  },
  {
    "text": "well another thing we learned in vertex to is all about who's head of callback",
    "start": "2034080",
    "end": "2040960"
  },
  {
    "text": "hell okay the Pyramid of Doom right who's actually who kind of works day-to-day with asynchronous",
    "start": "2040960",
    "end": "2047679"
  },
  {
    "text": "apis okay and how do you compose those apis",
    "start": "2047679",
    "end": "2054000"
  },
  {
    "text": "sorry okay so it depends on which language you're using different approaches people",
    "start": "2054000",
    "end": "2060398"
  },
  {
    "text": "use and there are various different approaches in the Scala world and you have you know so so yeah one one big criticism of",
    "start": "2060399",
    "end": "2068560"
  },
  {
    "text": "using raw call back based apis is it's quite hard to well for simple things it's simple but as soon as you say have",
    "start": "2068560",
    "end": "2074679"
  },
  {
    "text": "multiple different streams of data and you want to compose them in more complicated ways and it starts to become",
    "start": "2074679",
    "end": "2080320"
  },
  {
    "text": "a difficult problem to solve and it becomes very error prone how do you deal with errors and all that kind of stuff as well um there are different ways of",
    "start": "2080320",
    "end": "2088480"
  },
  {
    "text": "mitigating that some people um there are various promises libraries that allow to compose promises in different",
    "start": "2088480",
    "end": "2094358"
  },
  {
    "text": "ways there's another uh Library called uh RX Java who's heard of RX Java okay",
    "start": "2094359",
    "end": "2102119"
  },
  {
    "text": "so RX Java is based on the original RX technology for Microsoft and it's kind",
    "start": "2102119",
    "end": "2107680"
  },
  {
    "text": "of like a sort of a port of that to the Java World okay and what the idea is it's kind of like promises but promises",
    "start": "2107680",
    "end": "2114400"
  },
  {
    "text": "generally have one value one you know they're either the result happens and they're finished right but with RX it's",
    "start": "2114400",
    "end": "2120079"
  },
  {
    "text": "streams of values okay that's kind of the fundament the main limitation of the promise based approach it's it's okay",
    "start": "2120079",
    "end": "2125680"
  },
  {
    "text": "with single value events single single shot events but it's not much good for streams so with vertex 3 we have a set",
    "start": "2125680",
    "end": "2134359"
  },
  {
    "text": "of libraries you can so sorry a a sorry an API that allows you to com automatically convert the Callback based",
    "start": "2134359",
    "end": "2141920"
  },
  {
    "text": "API into an RX ified API so anything in vertex 3 if you wish you can then use RX",
    "start": "2141920",
    "end": "2148119"
  },
  {
    "text": "with it so you can say compose everything so RX provides also provides um a set of kind like functional like",
    "start": "2148119",
    "end": "2155880"
  },
  {
    "text": "operations that you can apply to the data like map and Flat map and all those kind of things that you're",
    "start": "2155880",
    "end": "2161280"
  },
  {
    "text": "probably familiar with if you've done any functional stuff so it's a really nice way of",
    "start": "2161280",
    "end": "2167079"
  },
  {
    "text": "mitigating against that call but hell again vertex is unopinionated this is just one thing you could use not",
    "start": "2167079",
    "end": "2172800"
  },
  {
    "text": "everybody uses this will use this other people use different techniques it's up to you we're not preaching about it but",
    "start": "2172800",
    "end": "2179319"
  },
  {
    "text": "we do provide it and we think it's going to be very useful um for more complex applications",
    "start": "2179319",
    "end": "2186319"
  },
  {
    "start": "2185000",
    "end": "2319000"
  },
  {
    "text": "another feature new feature in vertex 3 is distributed what I call distributed",
    "start": "2187960",
    "end": "2195240"
  },
  {
    "text": "data supports",
    "start": "2195240",
    "end": "2200960"
  },
  {
    "text": "so what we provide in ver 3 is ability who's who's used like distributed Maps",
    "start": "2202319",
    "end": "2207480"
  },
  {
    "text": "before okay who's heard things like um Oracle coherence infin uh infin span",
    "start": "2207480",
    "end": "2213480"
  },
  {
    "text": "blah there various different projects out there do that kind of thing so the idea is you can kind of put stuff you",
    "start": "2213480",
    "end": "2219119"
  },
  {
    "text": "have different part different nodes in network you can put stuff into like a distributed map and then you can get it out again and different",
    "start": "2219119",
    "end": "2224440"
  },
  {
    "text": "nodes so we have this support in vertex fre okay um it's kind of useful for you",
    "start": "2224440",
    "end": "2231680"
  },
  {
    "text": "know maybe you have some sort of session state in your application you want it to survive survive failure so you have your",
    "start": "2231680",
    "end": "2238079"
  },
  {
    "text": "your service for example could put some State into a distributed map when it fails the other one comes up the ha you",
    "start": "2238079",
    "end": "2244680"
  },
  {
    "text": "can get that stayed out again we also provide ID um as well as map we have an asynchronous lock so it's quite common",
    "start": "2244680",
    "end": "2251640"
  },
  {
    "text": "in distributed systems to want to do something but only do it in one place or only do it once and that's kind of fairly hard problem to solve in dist in",
    "start": "2251640",
    "end": "2258480"
  },
  {
    "text": "a distributed system how do you actually guarantee the only one thing is doing that so to solve that we provide a very",
    "start": "2258480",
    "end": "2264480"
  },
  {
    "text": "simple API so you can basically get out an asynchronous lock so by asynchronous",
    "start": "2264480",
    "end": "2270040"
  },
  {
    "text": "means it doesn't block you're not sort of saying block until get you know you're not blocking a thread until you",
    "start": "2270040",
    "end": "2276560"
  },
  {
    "text": "get the lock and you're not holding that thread until you finish with the lock you're just saying get me a lock and",
    "start": "2276560",
    "end": "2282240"
  },
  {
    "text": "then you go off and do something else sometime later it comes back with with the lock for you when it's ready when when it's available you then do your",
    "start": "2282240",
    "end": "2289000"
  },
  {
    "text": "stuff and while you're doing your stuff nobody else can get that lock and then when you finish you just release it okay so asynchronous lock non 100%",
    "start": "2289000",
    "end": "2295599"
  },
  {
    "text": "non-blocking like like everything in vertex and we have another thing it's also very useful in many many",
    "start": "2295599",
    "end": "2300760"
  },
  {
    "text": "distributed applications the counter the 3 counter functionality again it's kind of tricky fiddly problem to solve",
    "start": "2300760",
    "end": "2306720"
  },
  {
    "text": "usually if you're doing it from first principles how do you you know have a counter that that you can automically",
    "start": "2306720",
    "end": "2313280"
  },
  {
    "text": "increment across a cluster we provide that stuff again asynchronous as well non-blocking all non-",
    "start": "2313280",
    "end": "2320400"
  },
  {
    "start": "2319000",
    "end": "2369000"
  },
  {
    "text": "blocking another thing in vertex 3 we have uh management support we have um we",
    "start": "2321960",
    "end": "2329119"
  },
  {
    "text": "use um uh the codale metric which is now",
    "start": "2329119",
    "end": "2334319"
  },
  {
    "text": "part of drop wizard metric basically it's kind of renamed but um so we use that internally again it's",
    "start": "2334319",
    "end": "2341480"
  },
  {
    "text": "an optional add-on to vertex you don't have to use it you don't want to but if you do then vert then the then basically",
    "start": "2341480",
    "end": "2347800"
  },
  {
    "text": "the vertex core objects produce various different events like the HTTP server will produce events how many requests",
    "start": "2347800",
    "end": "2353480"
  },
  {
    "text": "per second all this kind of stuff and you can expose that via jmx and we're also going to allow you to expose it via",
    "start": "2353480",
    "end": "2359359"
  },
  {
    "text": "the event bus so you can have some a listener on the event bus anywhere on the network so they tuning into those",
    "start": "2359359",
    "end": "2364440"
  },
  {
    "text": "events management events and getting data",
    "start": "2364440",
    "end": "2369359"
  },
  {
    "start": "2369000",
    "end": "2474000"
  },
  {
    "text": "so where are we actually uh where are we going with this so with vertex trait it's all about we're trying to build this like official stack trying to build",
    "start": "2372319",
    "end": "2378800"
  },
  {
    "text": "a endtoend asynchronous stack of stuff that you can",
    "start": "2378800",
    "end": "2384760"
  },
  {
    "text": "use that you kind of want most it's very commonly wanted in a lot of different applications so like I said before the",
    "start": "2384760",
    "end": "2390200"
  },
  {
    "text": "vertex core itself is a bit low level and you know you can't just use the core in most applications you probably want",
    "start": "2390200",
    "end": "2395640"
  },
  {
    "text": "database access you email you want maybe integration with the messaging system um",
    "start": "2395640",
    "end": "2400920"
  },
  {
    "text": "you know distributed data already mentioned maybe you're doing iot stuff you want mqtt COA whatever you want or",
    "start": "2400920",
    "end": "2408560"
  },
  {
    "text": "another classic thing you want is or right pretty much every app needs orth so as well as the core vertex we were we",
    "start": "2408560",
    "end": "2415560"
  },
  {
    "text": "basically producing the set of components that sit on top of vertex that you know kind of Lego bricks",
    "start": "2415560",
    "end": "2421359"
  },
  {
    "text": "that allow you to plug these things together and make real 100% asynchronous applications",
    "start": "2421359",
    "end": "2428640"
  },
  {
    "text": "we also have a very active Community um vertex so a lot of stuff is kind of we have a lot of components written by the",
    "start": "2428640",
    "end": "2434520"
  },
  {
    "text": "community too certainly in vertex 2 and we hope the same continues in vertex 3 but the idea of the official stack is we",
    "start": "2434520",
    "end": "2439800"
  },
  {
    "text": "kind of given the stamp of QA approval make certainly in the nodejs world you have thousands of components in npm but",
    "start": "2439800",
    "end": "2446640"
  },
  {
    "text": "how many of those do you really trust to use in production it's a big problem in the nodejs world actually you know being",
    "start": "2446640",
    "end": "2453200"
  },
  {
    "text": "you know getting making sure the quality is up to scratch",
    "start": "2453200",
    "end": "2458280"
  },
  {
    "text": "yeah and also yeah stuff about loads more stuff to do with rest microservices in vertex 3 so we're basically you know",
    "start": "2460119",
    "end": "2466760"
  },
  {
    "text": "going very strongly in in that direction as well but again non opinion it so if you want use your event bus that's fine",
    "start": "2466760",
    "end": "2473760"
  },
  {
    "start": "2474000",
    "end": "2619000"
  },
  {
    "text": "too okay so what's all about so it's all about",
    "start": "2476040",
    "end": "2483480"
  },
  {
    "text": "we're moving away from this kind of application server model of of development to more to a microservices style model microservices is kind of",
    "start": "2483480",
    "end": "2491160"
  },
  {
    "text": "like mean so many different things to different people to a lot of people it means HTTP microservices but that's not",
    "start": "2491160",
    "end": "2497359"
  },
  {
    "text": "the only kind of microservice you can have event bus style microservices so instead of interacting with HTP they",
    "start": "2497359",
    "end": "2503160"
  },
  {
    "text": "interact and the event bus We Don't Preach about that you can do all those different styles if you want you could have a mqtt microservice if you wanted",
    "start": "2503160",
    "end": "2510079"
  },
  {
    "text": "or any other or maybe just a TCP one okay the but the architectural style is you do each you you split your",
    "start": "2510079",
    "end": "2516839"
  },
  {
    "text": "application into bits components that do one thing and one thing only those are the micros servic I don't care if they",
    "start": "2516839",
    "end": "2522119"
  },
  {
    "text": "interact on HTTP or event bus mqdt whatever that's up to you yeah uh and",
    "start": "2522119",
    "end": "2527520"
  },
  {
    "text": "your own preferences but we're moving away from this application s more that's that's the key thing to take home um yeah",
    "start": "2527520",
    "end": "2535480"
  },
  {
    "text": "polyglot we're not preaching about the language you're not saying oh our one language is better than any other language it depends everyone has a",
    "start": "2535480",
    "end": "2541280"
  },
  {
    "text": "different opinion so he's try and support um a lot of different languages so you can use depending on your",
    "start": "2541280",
    "end": "2547559"
  },
  {
    "text": "personal preferences depending on the job at hand you know what are you actually building what's the appropriate",
    "start": "2547559",
    "end": "2552839"
  },
  {
    "text": "tool and also depending on the skill set of your teams you know you're not having to tell everybody retrain everybody to",
    "start": "2552839",
    "end": "2558520"
  },
  {
    "text": "to JavaScript or scholar or whatever and I mentioned before yeah so we want to produce this library of Lego",
    "start": "2558520",
    "end": "2565280"
  },
  {
    "text": "bricks for this official stack so you can put everything together",
    "start": "2565280",
    "end": "2571920"
  },
  {
    "text": "and vertex right now we're getting a lot um my employer Red Hat it's been",
    "start": "2571920",
    "end": "2577319"
  },
  {
    "text": "investment into vertex it's kind of strategic project for red hat so we kind of see this the future in some ways the",
    "start": "2577319",
    "end": "2582960"
  },
  {
    "text": "future of the app server um what I would say it's not a red hat project vertex is actually an eclipse",
    "start": "2582960",
    "end": "2589200"
  },
  {
    "text": "project in terms of Ip they Eclipse control the trademark all that stuff and",
    "start": "2589200",
    "end": "2595400"
  },
  {
    "text": "that's because of the history of vertex I started it when I was at VMware and there's a lot there's kind of like a legal battle and stuff and we ended up",
    "start": "2595400",
    "end": "2600800"
  },
  {
    "text": "in anyway um so but the key point there I was trying to make was it's not owned",
    "start": "2600800",
    "end": "2606480"
  },
  {
    "text": "by redhead it's not completely it's not red hat doesn't say you do it this way okay Red Hat don't control the direction",
    "start": "2606480",
    "end": "2611839"
  },
  {
    "text": "of the project yeah although they do invest in",
    "start": "2611839",
    "end": "2618040"
  },
  {
    "start": "2619000",
    "end": "3076000"
  },
  {
    "text": "it and yeah so you know we're 100% everything's open source everything's in the open we're not developing anything",
    "start": "2619599",
    "end": "2625960"
  },
  {
    "text": "behind closed doors everything's in the open so you're interested in getting involved please get involved we're on",
    "start": "2625960",
    "end": "2632640"
  },
  {
    "text": "GitHub um I haven't actually looked to the statistics for a lot for a while but were at one point we were one of the",
    "start": "2632640",
    "end": "2639040"
  },
  {
    "text": "most popular Java projects on GitHub own the whole of GitHub um but you know if",
    "start": "2639040",
    "end": "2646280"
  },
  {
    "text": "you want we're doing we're doing a lot of cool stuff now actually with vertex 3 we're",
    "start": "2646280",
    "end": "2651520"
  },
  {
    "text": "probably doing you know I'm actually more excited now than any time during the development",
    "start": "2651520",
    "end": "2657200"
  },
  {
    "text": "of vertex with the cool stuff we're doing we we think it's going to be really big and take vertex to the next level so if you want to get involved",
    "start": "2657200",
    "end": "2663000"
  },
  {
    "text": "with that there's loads of stuff to do and just you know come to our Google group or send me Anil email or or",
    "start": "2663000",
    "end": "2668240"
  },
  {
    "text": "whatever or is we have um ISC channel on free.net and you know basically the",
    "start": "2668240",
    "end": "2674040"
  },
  {
    "text": "whole team hangs out there and that's basically what I just",
    "start": "2674040",
    "end": "2679520"
  },
  {
    "text": "said isn't it yeah so um free vertex IC",
    "start": "2679520",
    "end": "2684720"
  },
  {
    "text": "channel so if you're interested in getting involved please do and that's it thanks uh thank you",
    "start": "2684720",
    "end": "2692400"
  },
  {
    "text": "everyone thank you so",
    "start": "2695280",
    "end": "2699040"
  },
  {
    "text": "start yeah good question so the question is um so in the actor model you have you basically have this like the concept of",
    "start": "2714800",
    "end": "2720520"
  },
  {
    "text": "supervision you delegate the restarting and stuff to to something other than the actual actor",
    "start": "2720520",
    "end": "2727280"
  },
  {
    "text": "so in vertex 3 we are introducing a similar idea we don't have it right now in vertex 2 but we are we're going to",
    "start": "2727280",
    "end": "2732640"
  },
  {
    "text": "introduce a similar idea to a supervision Tree in vertex 3 but we don't have that right",
    "start": "2732640",
    "end": "2739400"
  },
  {
    "text": "now so the question is how do you is it possible to",
    "start": "2753119",
    "end": "2758240"
  },
  {
    "text": "have interrupt between vertex and go I have no idea sorry but what probably what you could",
    "start": "2758240",
    "end": "2765079"
  },
  {
    "text": "do I mean obviously Go's not jvm but what you could do is um what you can do with vertex with any non jvm stuff you",
    "start": "2765079",
    "end": "2771800"
  },
  {
    "text": "can pretty much Bridge into it just by opening a web if you have websocket support imagine go probably has",
    "start": "2771800",
    "end": "2776880"
  },
  {
    "text": "websocket client support most things do so you could create a websocket into",
    "start": "2776880",
    "end": "2782680"
  },
  {
    "text": "vertex and then basically interact on the event bus from that that would be possible I imagine as assuming go has",
    "start": "2782680",
    "end": "2787800"
  },
  {
    "text": "client side websocket support I'd say a few more words on that in vertex 3 we're going to try and um this idea of",
    "start": "2787800",
    "end": "2793599"
  },
  {
    "text": "interoperability with non jvm staff is quite important so we want to have interrupt sa node.js and and you know",
    "start": "2793599",
    "end": "2799880"
  },
  {
    "text": "MRI Ruby environments and other non jvm stuff so we're thinking of exposing some",
    "start": "2799880",
    "end": "2805960"
  },
  {
    "text": "sort of wire protocol of a kind of simple socket based protocol that you can actually connect up into vertex wi",
    "start": "2805960",
    "end": "2813079"
  },
  {
    "text": "so that's something we're thinking about at the moment we're not quite sure how it's going to go",
    "start": "2813079",
    "end": "2818839"
  },
  {
    "text": "but so the question is how do you handle um synchronous stuff like jdbc so J jdbc",
    "start": "2825240",
    "end": "2831319"
  },
  {
    "text": "is inherently synchronous and obviously we can't change the jdpc API so how do we deal with that it's actually a",
    "start": "2831319",
    "end": "2836800"
  },
  {
    "text": "general problem a lot of apis traditional apis in Java world are synchronous so we have a concept of a",
    "start": "2836800",
    "end": "2842720"
  },
  {
    "text": "worker to deal with that so if you're on a standard vertical",
    "start": "2842720",
    "end": "2848480"
  },
  {
    "text": "you're on the event Loop you must not block that event Loop because if you do that then your system becomes",
    "start": "2848480",
    "end": "2853640"
  },
  {
    "text": "unresponsive because you can't do anything else while it's blocked so if you want to call a blocking API what we do is we we have a",
    "start": "2853640",
    "end": "2860160"
  },
  {
    "text": "thing called a worker vertical you so you put that blocking code in the worker vertical and then you run it as a worker",
    "start": "2860160",
    "end": "2865960"
  },
  {
    "text": "vertical what that means is it runs instead of running on the event Loop it runs on a thread from a thread pole yeah so so you can block that and",
    "start": "2865960",
    "end": "2874119"
  },
  {
    "text": "then it communicates back to the other vertical again via by messaging",
    "start": "2874119",
    "end": "2881400"
  },
  {
    "text": "yeah but a but sorry async jdbc would I would love to have async jdbc and I've been asking for it for ages but I'm not",
    "start": "2881400",
    "end": "2888240"
  },
  {
    "text": "I'm not holding my breath",
    "start": "2888240",
    "end": "2891880"
  },
  {
    "text": "yep question is um what parts you know all these different features do we you know where what do we use stuff internally to actually Implement that",
    "start": "2907160",
    "end": "2913760"
  },
  {
    "text": "yeah so we use um for a lot of the io especially the socket iio we use NTI um the file sayem stuff we us do",
    "start": "2913760",
    "end": "2921680"
  },
  {
    "text": "directly with the jdk API um the event bath we um well the discovery part of",
    "start": "2921680",
    "end": "2928400"
  },
  {
    "text": "the event bath so the kind of the you know how to know see each other that we delegate to something called the cluster",
    "start": "2928400",
    "end": "2934240"
  },
  {
    "text": "manager which is like an SPI yeah and we have a default implementation of the SPI which uses hazelcast by",
    "start": "2934240",
    "end": "2941119"
  },
  {
    "text": "default but you can use you could basically create your own implementation that uses something different and we",
    "start": "2941119",
    "end": "2946480"
  },
  {
    "text": "already have people they've we've got a zookeeper implementation as well um I think somebody's I think there like two",
    "start": "2946480",
    "end": "2952440"
  },
  {
    "text": "or three different implementations but the default one in the distribution is is Hazel cost um what else yes um",
    "start": "2952440",
    "end": "2958200"
  },
  {
    "text": "distributed Maps again that delegates to the cluster manager so in the default case that uses hazelcast but you could",
    "start": "2958200",
    "end": "2964839"
  },
  {
    "text": "say plugin infin span or something for that if you wanted or actually there's going to be another implementation of that that uses um J groups there's going",
    "start": "2964839",
    "end": "2972960"
  },
  {
    "text": "to be another implementation so you have to choose basically which one you want yeah yes so we're not we're not re we're not reimplementing every single thing",
    "start": "2972960",
    "end": "2979640"
  },
  {
    "text": "from scratch that'd be that'd be a lot of work",
    "start": "2979640",
    "end": "2983640"
  },
  {
    "text": "yeah when will version three be available um good question there's a lot to do I'm hoping it's not a promise I'm",
    "start": "2986640",
    "end": "2994240"
  },
  {
    "text": "hoping like the beginning of next year at some point maybe the first quarter of next year",
    "start": "2994240",
    "end": "2999280"
  },
  {
    "text": "realistically um we have a lot to do I mean the main thing is really just building out those components that you",
    "start": "2999280",
    "end": "3004680"
  },
  {
    "text": "know database support and all that kind of stuff a lot of stuff already exists we have to kind of Port it to vertex 3",
    "start": "3004680",
    "end": "3011280"
  },
  {
    "text": "and do all the documentation all that stuff kind of takes",
    "start": "3011280",
    "end": "3016078"
  },
  {
    "text": "time ah yeah good question so are we supporting the reactive streams API so the reactive streams API there's a cross",
    "start": "3018960",
    "end": "3026280"
  },
  {
    "text": "company um effort that's been led by typ safe it also includes Red Hat um various other groups um pivotal and various",
    "start": "3026280",
    "end": "3033520"
  },
  {
    "text": "other companies the idea is to provide an a um basically a way to interoperate between different reactive systems and",
    "start": "3033520",
    "end": "3039599"
  },
  {
    "text": "provide um be able to you know push back back pressure between the systems which is very important when you're dealing",
    "start": "3039599",
    "end": "3045680"
  },
  {
    "text": "with asynchron systems now we already signed up to that uh to that that you know we we're one of the um people",
    "start": "3045680",
    "end": "3053480"
  },
  {
    "text": "involved with that we already have a reactive streams implementation vertex 3 you can already use that yeah thank you",
    "start": "3053480",
    "end": "3061480"
  },
  {
    "text": "[Music]",
    "start": "3062860",
    "end": "3071940"
  }
]