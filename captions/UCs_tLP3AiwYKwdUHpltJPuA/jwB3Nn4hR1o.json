[
  {
    "start": "0",
    "end": "207000"
  },
  {
    "text": "[Music]",
    "start": "2540",
    "end": "11080"
  },
  {
    "text": "[Applause] so it's late in the afternoon so energy is kind of low you've all just had",
    "start": "11080",
    "end": "16480"
  },
  {
    "text": "something to eat so hello say hello back come on fill the room hello okay great great um as you probably know by now",
    "start": "16480",
    "end": "22560"
  },
  {
    "text": "we're going be talking about mutation testing and it's in mutation testing in Python because I'll be talking about an implementation in Python but most of",
    "start": "22560",
    "end": "29320"
  },
  {
    "text": "this talk is more broadly applicable it doesn't have anything to do necessarily with python I just happen to write a lot",
    "start": "29320",
    "end": "34800"
  },
  {
    "text": "of python code and that's what I wrote here who has done mutation testing or even knows what it is just raise your",
    "start": "34800",
    "end": "39840"
  },
  {
    "text": "hand okay so not everybody good how how many have have experience with something like pit the Java testing the python",
    "start": "39840",
    "end": "45600"
  },
  {
    "text": "testing tool nobody interesting okay because that's that's the gold standard it mine is very researchy compared to",
    "start": "45600",
    "end": "50879"
  },
  {
    "text": "theirs um I work for in part own 60 North a small software consulting company in in Norway we're based in Oslo",
    "start": "50879",
    "end": "58320"
  },
  {
    "text": "and in Stanger where I'm from on the West CO Coast represent um right so there's an app you probably all know",
    "start": "58320",
    "end": "64239"
  },
  {
    "text": "about it by now um the only thing you need to know about it is the green smiley face you can ignore the rest of it um including the questions but we'll",
    "start": "64239",
    "end": "71000"
  },
  {
    "text": "take the questions at the end I'm going to try to save time for those um a little bit about myself um this is my",
    "start": "71000",
    "end": "78200"
  },
  {
    "text": "world uh that orange dot in Texas is Austin Texas where I'm from originally about seven well Austin's a great city",
    "start": "78200",
    "end": "83840"
  },
  {
    "text": "right the University of Texas the the US's largest uh University um and the",
    "start": "83840",
    "end": "89040"
  },
  {
    "text": "US's top ranked repu University is where I went to graduate school it's a wonderful place go horns um Austin's a",
    "start": "89040",
    "end": "95240"
  },
  {
    "text": "beautiful city and it's got a real personality to it it's the best part of Texas if you ever go to Texas go to Austin this is a statue of Stevie Ron a",
    "start": "95240",
    "end": "101799"
  },
  {
    "text": "famous guitar player from Austin who died tragically and this is a statue the City built this is kind of represents",
    "start": "101799",
    "end": "107439"
  },
  {
    "text": "how they feel about themselves they're really big into live music rock and roll blues that kind of stuff and it's a really pretty city if you get a chance",
    "start": "107439",
    "end": "112840"
  },
  {
    "text": "go to visit it about seven years ago I moved to a place that's very different this is Stanger this is lucif yord from",
    "start": "112840",
    "end": "118360"
  },
  {
    "text": "the pulpit Rock if you've ever been to St you've probably been to exactly that view it's the prettiest place in Norway",
    "start": "118360",
    "end": "123479"
  },
  {
    "text": "no arguments um we have different kinds of statues there these are 20 M tall Stone swords rammed in the earth to",
    "start": "123479",
    "end": "129679"
  },
  {
    "text": "represent the unification of the kingdoms of Norway hundreds of years ago um about 20 minutes from my house all",
    "start": "129679",
    "end": "135760"
  },
  {
    "text": "this stuff it's a beautiful place to visit if you've never been Stanger is great um and that's where I founded 60 North a few years ago so enough about me",
    "start": "135760",
    "end": "142840"
  },
  {
    "text": "let's um move on mutation testing um I first heard about mutation testing maybe",
    "start": "142840",
    "end": "148239"
  },
  {
    "text": "two years ago from a guy named Seb Rose who if you ever if you go to conferences you may have heard of him he's a really",
    "start": "148239",
    "end": "153640"
  },
  {
    "text": "great speaker if you get a chance see him talk on any topic um and ask him what he's passionate about that'll wind",
    "start": "153640",
    "end": "158800"
  },
  {
    "text": "him up um he's a good guy um and it was something that resonated with me",
    "start": "158800",
    "end": "164440"
  },
  {
    "text": "mutation testing which I'll describe in great detail resonated with the way I think about programming and kind of just",
    "start": "164440",
    "end": "169560"
  },
  {
    "text": "the way my brain works and I got very interested in it and set about to write some mutation testing stuff in Python uh",
    "start": "169560",
    "end": "175599"
  },
  {
    "text": "which is the language that I use given given the choice um it's a a really neat technique it's kind of researchy not",
    "start": "175599",
    "end": "182200"
  },
  {
    "text": "entirely practical but I think you'll all find that the ideas in it are really good and something that we should strive",
    "start": "182200",
    "end": "188040"
  },
  {
    "text": "to have good tools for so mostly what I'm hoping to do in this talk is to get across what mutation testing is what are",
    "start": "188040",
    "end": "193799"
  },
  {
    "text": "the challenges and how and to get you interested in it enough that you might start thinking about it as well in contributing your own tools contributing",
    "start": "193799",
    "end": "200400"
  },
  {
    "text": "to these tools to the other tools and making it a better ecosystem because that's kind of where we are in the world with mutation testing I think um so what",
    "start": "200400",
    "end": "207720"
  },
  {
    "start": "207000",
    "end": "278000"
  },
  {
    "text": "is mutation testing you start off with two premises you have your code under test your your application or your",
    "start": "207720",
    "end": "213239"
  },
  {
    "text": "library whatever it's code that is presumed to work and you have a test Suite that you presume fully tests the",
    "start": "213239",
    "end": "219640"
  },
  {
    "text": "functionality of that body of code you then introduce a single",
    "start": "219640",
    "end": "225480"
  },
  {
    "text": "controlled change and we'll discuss these in a fair amount of detail but a single small change to the code only one",
    "start": "225480",
    "end": "230799"
  },
  {
    "text": "at a time because this is science right one at a time you want to Decon flate your your changes you then run your test",
    "start": "230799",
    "end": "237519"
  },
  {
    "text": "suite and if your test Suite is perfect it will it will detect it will fail it will say no something's broken you've",
    "start": "237519",
    "end": "243439"
  },
  {
    "text": "made a change and your test Suite will detect it this is the ideal the mutation testing kind of works on this basis the",
    "start": "243439",
    "end": "248680"
  },
  {
    "text": "assumption that your test Suite catches all defects well it actually helps you make a better test Suite in the process",
    "start": "248680",
    "end": "255439"
  },
  {
    "text": "but when you get these test fail when you don't get test failures this is when you know you have a problem you've made",
    "start": "255439",
    "end": "261120"
  },
  {
    "text": "a change to your code but your test Suite hasn't figured it out so this has ramifications for either your test Suite",
    "start": "261120",
    "end": "267120"
  },
  {
    "text": "or your code and we'll talk about that in a bit of detail but this is the fundamental idea Small Change run the",
    "start": "267120",
    "end": "272199"
  },
  {
    "text": "test Suite see if it fails and if it doesn't then examine your code or your",
    "start": "272199",
    "end": "277440"
  },
  {
    "text": "tests the basic algorithm is really simple um at least the basic algorithm as I've implemented you have some set of",
    "start": "277440",
    "end": "283160"
  },
  {
    "start": "278000",
    "end": "312000"
  },
  {
    "text": "operators operators are the things that make the small changes to your code you have a number of sites in your code",
    "start": "283160",
    "end": "288320"
  },
  {
    "text": "where those operators can be applied and then so you have this this this two space that you work through operators",
    "start": "288320",
    "end": "293479"
  },
  {
    "text": "and sites that the operators work on and you mutate the code and you run your tests that's the basic idea and you",
    "start": "293479",
    "end": "298880"
  },
  {
    "text": "probably immediate these that okay this is going to result in a lot of stuff happening and you're right this does result in a lot of stuff happening it",
    "start": "298880",
    "end": "304560"
  },
  {
    "text": "takes a long time to do a full mutation testing Suite on anything of appreciable size but this is the basic idea very",
    "start": "304560",
    "end": "311039"
  },
  {
    "text": "very simple so what happens when we when we run this test Suite what what are the",
    "start": "311039",
    "end": "316240"
  },
  {
    "start": "312000",
    "end": "451000"
  },
  {
    "text": "possible outcomes there are three classes of outcomes when I run my test Suite one is what we call killed this is",
    "start": "316240",
    "end": "322039"
  },
  {
    "text": "this is from the research literature really so you've killed the mutant your test Suite has failed and it's failed",
    "start": "322039",
    "end": "327440"
  },
  {
    "text": "because it has detected the change that you made and some way shape or form your test Suite is performing its job and",
    "start": "327440",
    "end": "332800"
  },
  {
    "text": "this is good it's properly detected the mutant and we're going to start using words like mutant and killed and survived and stuff and it sounds very",
    "start": "332800",
    "end": "338440"
  },
  {
    "text": "brutal and it is it's kind of like a comic book which is kind of why it's fun um another class of results are what we",
    "start": "338440",
    "end": "344280"
  },
  {
    "text": "call incompetent you get a mutant that's incompetent and this these are typically cases where the modification causes your",
    "start": "344280",
    "end": "350520"
  },
  {
    "text": "program or your test Suite to just Segal or to throw an exception or do something where just can't continue so your test Suite doesn't actually finish and give",
    "start": "350520",
    "end": "356720"
  },
  {
    "text": "you results it just dies in some horrible way that's normally what incompetent mutants are like there's a",
    "start": "356720",
    "end": "363319"
  },
  {
    "text": "much worse class of incompetent mutants though and those are the ones that go into Infinite loops and we'll discuss those in a little bit and they're",
    "start": "363319",
    "end": "369199"
  },
  {
    "text": "they're difficult um technically impossible to deal with finally you have the things that survive the the mutants",
    "start": "369199",
    "end": "375840"
  },
  {
    "text": "that aren't detected by your test Suite um this is what you don't want to happen this is what you're trying to avoid",
    "start": "375840",
    "end": "381000"
  },
  {
    "text": "you're trying to reduce the number of survivors you have in any run and there are any Survivor you get means one of",
    "start": "381000",
    "end": "387240"
  },
  {
    "text": "two things and this it requires your analysis to determine which of these two things it is but it it shines a spotlight on your code either your tests",
    "start": "387240",
    "end": "394599"
  },
  {
    "text": "are inadequate and this is very typical none of us really in real life have perfect test Suites so mutation testing",
    "start": "394599",
    "end": "400120"
  },
  {
    "text": "helps us identify the weaknesses in our test Suites and and tighten them up another real possibility though and",
    "start": "400120",
    "end": "405520"
  },
  {
    "text": "especially on Legacy systems or systems that are under heavy development is that you've got you've mutated some code that",
    "start": "405520",
    "end": "411080"
  },
  {
    "text": "doesn't have any tests and it doesn't have any tests because nobody cares about that code it's not doing anything it doesn't represent a feature or",
    "start": "411080",
    "end": "416479"
  },
  {
    "text": "support any feature in your code and so the spotlight that mutation testing shines in your code says either you need",
    "start": "416479",
    "end": "421919"
  },
  {
    "text": "more or better tests or you need to zap that code if you care about uh getting rid of extraneous code because code I",
    "start": "421919",
    "end": "427759"
  },
  {
    "text": "mean as I think we all agree now is um it's a liability it's not an asset you don't want more code around that just gets in the way of things so you want to",
    "start": "427759",
    "end": "434000"
  },
  {
    "text": "remove code if indeed it doesn't support any important features so the goal of course is to",
    "start": "434000",
    "end": "439960"
  },
  {
    "text": "kill all the mutants you want 100% death rate 0% survival rate and so I hope by using a meme I engage all the the people",
    "start": "439960",
    "end": "446360"
  },
  {
    "text": "in the audience right a famous meme kill all the something the mutants um what are the goals then of mutation",
    "start": "446360",
    "end": "453120"
  },
  {
    "start": "451000",
    "end": "509000"
  },
  {
    "text": "disting why would you go through the trouble of of doing this um the goal number one is is coverage analysis A lot",
    "start": "453120",
    "end": "459759"
  },
  {
    "text": "of people already do some kind of coverage analysis where they run their test suite and they get a little checkbox by each line of code that says",
    "start": "459759",
    "end": "465159"
  },
  {
    "text": "this line was executed this line was executed and that's great that is a kind of coverage but that's that's purely",
    "start": "465159",
    "end": "470960"
  },
  {
    "text": "telling you was the line executed it doesn't tell you anything about whether your tests meaningfully checked the functionality or the the logic of that",
    "start": "470960",
    "end": "477599"
  },
  {
    "text": "line of code so what mutation testing lets you do is verify the functionality verify the logic the meaning of that",
    "start": "477599",
    "end": "484400"
  },
  {
    "text": "line of code it tells you if I've made an arbitrary effectively arbitrary change to this line of code does my test",
    "start": "484400",
    "end": "490639"
  },
  {
    "text": "Suite detected and that's really important I I love this graphic because it somehow communicates this sort of um",
    "start": "490639",
    "end": "495840"
  },
  {
    "text": "kind of blind stupid optimism of yeah you know we covered all our lines of code our test suite's Perfect When in fact generally they're not there a lot",
    "start": "495840",
    "end": "501720"
  },
  {
    "text": "of test Suites just waste time because they do okay execute a line of code but don't tell you anything about the",
    "start": "501720",
    "end": "507080"
  },
  {
    "text": "quality of your software that's goal number one and that's that's probably the most common goal that's that's what",
    "start": "507080",
    "end": "512200"
  },
  {
    "start": "509000",
    "end": "603000"
  },
  {
    "text": "people will think of most often when they think about um mutation testing the other one of course is is",
    "start": "512200",
    "end": "518000"
  },
  {
    "text": "detecting a necessary code what I mentioned earlier getting rid of the code that you no longer need um so this",
    "start": "518000",
    "end": "524720"
  },
  {
    "text": "this picture a lot of you probably recognize it is is a picture of part of the gastrointestinal system and the important bit is down here at the end",
    "start": "524720",
    "end": "531800"
  },
  {
    "text": "the vermiform process the worm shaped process or the appendix right we've all gotten well most of us at least have an",
    "start": "531800",
    "end": "537920"
  },
  {
    "text": "appendix um so statistically most of us have an appendix and when I was growing up I was taught you know that the",
    "start": "537920",
    "end": "543320"
  },
  {
    "text": "appendix is is a vestigial part of the body we don't need it for anything and in fact if you go have an append uh an",
    "start": "543320",
    "end": "548880"
  },
  {
    "text": "appendectomy and have it removed you'll survive you'll be just fine um and so in some sense this is kind of what mutation",
    "start": "548880",
    "end": "555320"
  },
  {
    "text": "testing is doing is finding the things that we no longer need so we can get rid of them interestingly kind of the the",
    "start": "555320",
    "end": "560560"
  },
  {
    "text": "the twist moral to the story is you know in the past few years we're starting to find doctors are saying well actually",
    "start": "560560",
    "end": "566040"
  },
  {
    "text": "something is kind of going on in the appendix it's not terribly important anymore but it actually does do something",
    "start": "566040",
    "end": "571640"
  },
  {
    "text": "so I guess the moral here is that when mutation testing shines a light on your",
    "start": "571640",
    "end": "577040"
  },
  {
    "text": "code you have to really think hard about is it a problem in the test Suite or is",
    "start": "577040",
    "end": "582399"
  },
  {
    "text": "it a is it a bit of code that I no longer need it's not always that cut and dry and this is where your your reasoning your skills as a developer uh",
    "start": "582399",
    "end": "589680"
  },
  {
    "text": "come into play so don't necessarily always cut out the appendix think about whether or not you actually need the appendix um and I like the graphic it's",
    "start": "589680",
    "end": "596640"
  },
  {
    "text": "kind of a cool picture I think it's from gry's Anatomy so it's kind of famous um gra Anatomy the book not the TV show",
    "start": "596640",
    "end": "602920"
  },
  {
    "text": "which I've never watched um so what are some examples of mutations I've talked about this notion of operators right um",
    "start": "602920",
    "end": "610240"
  },
  {
    "start": "603000",
    "end": "776000"
  },
  {
    "text": "does anybody know what this moth is and why I might have it up there it's it's called the pepper moth um it may have a",
    "start": "610240",
    "end": "616000"
  },
  {
    "text": "different name in other languages but in during the Industrial Revolution or pre-industrial revolution in the UK",
    "start": "616000",
    "end": "621760"
  },
  {
    "text": "these moths were largely white and they could sit on Limestone buildings and be largely camouflaged the Industrial",
    "start": "621760",
    "end": "627480"
  },
  {
    "text": "Revolution comes along burn a lot of coal everything is covered in coold dust and turns black and these mods mutated",
    "start": "627480",
    "end": "632760"
  },
  {
    "text": "to be black almost within the span of a few Generations because the white ones got eaten right so it's up there because",
    "start": "632760",
    "end": "639160"
  },
  {
    "text": "they evolved and we kind of studied this and it was proof of evolution so forth so forth a cute picture um one typical",
    "start": "639160",
    "end": "646639"
  },
  {
    "text": "example of an operator is replace relational operator in this case we're replacing greater than with less than so",
    "start": "646639",
    "end": "651880"
  },
  {
    "text": "we're literally going through the code looking for greater than symbols and swapping them out you would hope that",
    "start": "651880",
    "end": "656959"
  },
  {
    "text": "your test Suite can catch something like this this is a pretty just change right um you'd be surprised but um this is an",
    "start": "656959",
    "end": "665040"
  },
  {
    "text": "this is a typical example of the kind of thing that a mutation operator would do um not rocket science really really",
    "start": "665040",
    "end": "670880"
  },
  {
    "text": "simple things and remember you're doing these one at a time and then running your full test Suite so you can imagine",
    "start": "670880",
    "end": "676160"
  },
  {
    "text": "how this inflates into a huge amount of runtime necessary to do a full mutation testing run another great example is uh",
    "start": "676160",
    "end": "683320"
  },
  {
    "text": "break continue replacement where you have a break somewhere in the code I assume everybody knows what break and continue are in their language of choice",
    "start": "683320",
    "end": "689720"
  },
  {
    "text": "um and replace it with a continue and this is a great way to introduce of course infinite Loops right a break is supposed to kick you out of the loop and",
    "start": "689720",
    "end": "695760"
  },
  {
    "text": "it continue says oh just keep Ono so this is a great way to create a a surv a",
    "start": "695760",
    "end": "701079"
  },
  {
    "text": "mutant that is incompetent because the test Suite never ends but um you can't",
    "start": "701079",
    "end": "706360"
  },
  {
    "text": "really detect that and we need to talk about ways to ameliorate that problem this is the list of um operators",
    "start": "706360",
    "end": "713360"
  },
  {
    "text": "that I plan to implement for the python um for the python implementation and I mean I'm not going to go over all of",
    "start": "713360",
    "end": "718800"
  },
  {
    "text": "these you have some sense of what they are but you see things about like um exception swallowing so adding some code",
    "start": "718800",
    "end": "724440"
  },
  {
    "text": "that just grabs an exception and and doesn't let any of the handlers work things like um I think there's yeah",
    "start": "724440",
    "end": "730079"
  },
  {
    "text": "super calling deletion where you you um remove calls to Base Class implementations of functions things like",
    "start": "730079",
    "end": "735240"
  },
  {
    "text": "that and okay if you're programming in vastly different languages from python you'll say these don't apply to me and you're right a kind of a research area",
    "start": "735240",
    "end": "741600"
  },
  {
    "text": "for mutation testing is deciding what are the reasonable operators for a given language what applies in lisp is not",
    "start": "741600",
    "end": "747199"
  },
  {
    "text": "going to apply in C is not going to apply in has etc etc etc so these These are necessarily python specific but um",
    "start": "747199",
    "end": "754360"
  },
  {
    "text": "some of these would apply to Java you know things about exceptions and classes and so forth but these give you a sense of what kind of operators you would face",
    "start": "754360",
    "end": "761680"
  },
  {
    "text": "in um a full-blown mutation testing suite and you could Advent your own and we'll look at actually the implementation I've got used as a",
    "start": "761680",
    "end": "767160"
  },
  {
    "text": "plug-in system for operators so if you have special ones maybe for a specific API you're developing you could consider",
    "start": "767160",
    "end": "772839"
  },
  {
    "text": "adding those into the system as well if that makes sense for your um for your use case so what are the complexi a",
    "start": "772839",
    "end": "779399"
  },
  {
    "start": "776000",
    "end": "951000"
  },
  {
    "text": "mutation uh testing it's you know it's conceptually quite simple in many ways make a change on your test Suite record",
    "start": "779399",
    "end": "784480"
  },
  {
    "text": "the results but it doing this blindly and naively results in some pretty",
    "start": "784480",
    "end": "789720"
  },
  {
    "text": "severe difficulties does anybody know what that is it's the Queenland pitch experiment and that's a a filter full of",
    "start": "789720",
    "end": "796120"
  },
  {
    "text": "pitch draining down into a jar and a drop happens every once once every about two years and I don't really know what",
    "start": "796120",
    "end": "802279"
  },
  {
    "text": "the goal of the experiment is but it's been running for a long long time I think the goal of the experiment is for the guy who's running it to actually see",
    "start": "802279",
    "end": "808199"
  },
  {
    "text": "it happen I think he's never seen it so um you know he always goes for a coffee break and comes back and it's dropped",
    "start": "808199",
    "end": "813320"
  },
  {
    "text": "poor guy um but it represents things that take a long long time pitch falling",
    "start": "813320",
    "end": "818519"
  },
  {
    "text": "out of a funnel takes a long time um what do we do to account for this you obviously can't be running this every",
    "start": "818519",
    "end": "824720"
  },
  {
    "text": "day if it takes more than a day to run one thing is that you can parallelize it as much as possible it's an embarrassingly parallel say that 10",
    "start": "824720",
    "end": "831959"
  },
  {
    "text": "times embarrassingly parallel problem you can if you have a thousand cores you can run a thousand tests at the same",
    "start": "831959",
    "end": "837600"
  },
  {
    "text": "time you might kill your disc at that point but conceptually you can span it out that much and and that's that's all",
    "start": "837600",
    "end": "844160"
  },
  {
    "text": "the tools that I know about do this to some degree mine just counts how many cores your system has and runs that many at a time",
    "start": "844160",
    "end": "850800"
  },
  {
    "text": "um another thing you can do is run a run a full Baseline you have to start with a full Baseline where you run the full test Suite mutation testing suite and",
    "start": "850800",
    "end": "857720"
  },
  {
    "text": "get some stats from that you know 5% survival rate or whatever that is after",
    "start": "857720",
    "end": "863000"
  },
  {
    "text": "that you can do things like only run the tests that you think touch modified code and that drastically reduces the the",
    "start": "863000",
    "end": "869279"
  },
  {
    "text": "test space you have to run a little bit more easy is to only mutate code that you know has been",
    "start": "869279",
    "end": "874880"
  },
  {
    "text": "modified or added the reason the reason that's a bit easier the second one is a bit easier than the first is this first",
    "start": "874880",
    "end": "880000"
  },
  {
    "text": "one that could be a bit difficult to get I know in Python the tools for determining that are somewhat iffy the",
    "start": "880000",
    "end": "885639"
  },
  {
    "text": "ones I've tried at least um this on the other hand is really straightforward you just look at your git diff and say okay",
    "start": "885639",
    "end": "892120"
  },
  {
    "text": "this line this line this line only mutate those lines and that will again drastically reduce the uh space you have to search through in your mutation",
    "start": "892120",
    "end": "899759"
  },
  {
    "text": "neither one of these is exactly perfect though because you can imagine that any change you make actually changes say in",
    "start": "899759",
    "end": "905680"
  },
  {
    "text": "this case only running tests on modified code well if I've modified my code and I think I know the path through the code",
    "start": "905680",
    "end": "913000"
  },
  {
    "text": "that a test is going to go I might have modified that path which means that now there's other code that I'm not testing",
    "start": "913000",
    "end": "918240"
  },
  {
    "text": "that I should be testing and it's it's iffy to go down either one of these routes this has the same same problems",
    "start": "918240",
    "end": "923480"
  },
  {
    "text": "but you can use these at least as heris to really drastically reduce the amount of time you need to do",
    "start": "923480",
    "end": "929480"
  },
  {
    "text": "subsequent runs after a baseline finally you can speed up your test Suites um if you ever seen like Dan",
    "start": "929480",
    "end": "936000"
  },
  {
    "text": "North or any of the bdd tdd stard DD guys they'll tell you you need fast test Suites anyways and this is another",
    "start": "936000",
    "end": "941079"
  },
  {
    "text": "reason so that you you can do um mutation testing in in some reasonable way if your test Suites take two days",
    "start": "941079",
    "end": "947519"
  },
  {
    "text": "you might have other problems um so speeding up test Suites is generally speaking a good thing although it's not",
    "start": "947519",
    "end": "952759"
  },
  {
    "start": "951000",
    "end": "1032000"
  },
  {
    "text": "always possible I admit the second complexity is incompetence detection you know I I mentioned that most competent",
    "start": "952759",
    "end": "959360"
  },
  {
    "text": "mutants these are the ones that just kind of Segal or just crash arbitrarily they don't they don't actually complete the test suite and those are really easy",
    "start": "959360",
    "end": "965759"
  },
  {
    "text": "to detect of course you just say oh died incompetent great um but then there's the class of those that potentially run",
    "start": "965759",
    "end": "972279"
  },
  {
    "text": "forever right so who's that that's Allan Turing right and he said yeah it's not really all and Turing that's really all",
    "start": "972279",
    "end": "977560"
  },
  {
    "text": "and Turing um and apocryphally he said yeah good luck with that good luck with detecting whether or not the program",
    "start": "977560",
    "end": "983240"
  },
  {
    "text": "you're running is ever going to end I mean he famously proved the the halting problem is is undecidable you can't know",
    "start": "983240",
    "end": "989160"
  },
  {
    "text": "ahead of time of program is going to end um so you can't in principle take a",
    "start": "989160",
    "end": "996000"
  },
  {
    "text": "mutant and say oh yeah well he's going to run forever so I'm just going to kill him off you have to have some heris some",
    "start": "996000",
    "end": "1001560"
  },
  {
    "text": "other kind of analysis that says okay he's run too long kill it now so the the typical thing to do is you run uh some",
    "start": "1001560",
    "end": "1007519"
  },
  {
    "text": "baseline of the test Suite just over the healthy mut the healthy unmutated code and say that takes 10 seconds and you",
    "start": "1007519",
    "end": "1013880"
  },
  {
    "text": "say any Mutant for which the test Suite takes more than 30 seconds we'll just call that at infinite Loop and will kill",
    "start": "1013880",
    "end": "1019319"
  },
  {
    "text": "it call it incompetent so that's that's the kind of strategy you have to apply this is again kind of part of the researchy element of mutation testing",
    "start": "1019319",
    "end": "1026079"
  },
  {
    "text": "kind of what makes it interesting on some level and a little bit impractical um and the third complexity is what we",
    "start": "1026079",
    "end": "1033678"
  },
  {
    "start": "1032000",
    "end": "1194000"
  },
  {
    "text": "call equivalent mutants and now okay there's some code and and most of it you don't have to really grock um but this",
    "start": "1033679",
    "end": "1040600"
  },
  {
    "text": "an equivalent mutant is a mutant that is practically undetectable when I say practically undetectable it means that",
    "start": "1040600",
    "end": "1047079"
  },
  {
    "text": "you could potentially to test to detect mutants of certain classes but doing so would be ridiculous and I and when I go",
    "start": "1047079",
    "end": "1054080"
  },
  {
    "text": "through this example you'll understand maybe a bit better why this this comes out of the Python documentation actually",
    "start": "1054080",
    "end": "1059840"
  },
  {
    "text": "and the function consume just takes in some sequence of things and iterates through it effectively for the side",
    "start": "1059840",
    "end": "1065760"
  },
  {
    "text": "effects that's what consume is all about don't worry about most of what this does this is the important bit here it",
    "start": "1065760",
    "end": "1071400"
  },
  {
    "text": "constructs a double-ended queue and passes that iterable thing into it and that effectively iterates through the",
    "start": "1071400",
    "end": "1076640"
  },
  {
    "text": "thing as fast as possible because double-ended Q is written in C not in Python and the interesting bit here is",
    "start": "1076640",
    "end": "1082679"
  },
  {
    "text": "at the end Max Lan zero so we're saying the double-ended Q can never be larger than zero so you're really not doing",
    "start": "1082679",
    "end": "1087960"
  },
  {
    "text": "anything except forcing iteration now what's going to happen when you do mutation testing is mutation the",
    "start": "1087960",
    "end": "1093000"
  },
  {
    "text": "mutation testing algorithm will eventually get to this zero and it'll have an operator called constant replacement which looks for constants",
    "start": "1093000",
    "end": "1098720"
  },
  {
    "text": "and replaces them with a different constant and we replace this with a one or a TH or a ne6 or something like that",
    "start": "1098720",
    "end": "1105559"
  },
  {
    "text": "and if it replaces it with one which is what cosmic ray does right now mutation testing tool everything still works just",
    "start": "1105559",
    "end": "1111960"
  },
  {
    "text": "fine and the only way to detect that that's been changed to a one is if you can dig into your memory allocator and",
    "start": "1111960",
    "end": "1117400"
  },
  {
    "text": "not just your OS but Python's memory allocator and determine that an extra int or object has been allocated",
    "start": "1117400",
    "end": "1123159"
  },
  {
    "text": "somewhere and nobody has tests to do that it's it's a it's such a ridiculous tester right that you would never do it and that's why it's practically",
    "start": "1123159",
    "end": "1129320"
  },
  {
    "text": "undetectable no you wouldn't waste time to do it so that's that's the kind of thing that that's that's an equivalent",
    "start": "1129320",
    "end": "1135320"
  },
  {
    "text": "mutant that's a good example of an equivalent mutant and I like this example because this is idiomatic python this is what you're told to do by the",
    "start": "1135320",
    "end": "1141360"
  },
  {
    "text": "official whoa official documentation um if um if you want to consume some",
    "start": "1141360",
    "end": "1147480"
  },
  {
    "text": "iterable so three complexities with um mutation testing so that is sort of the",
    "start": "1147480",
    "end": "1154760"
  },
  {
    "text": "the quick overview of mutation testing in general and this what we just talked",
    "start": "1154760",
    "end": "1159840"
  },
  {
    "text": "about there applies essentially to every instance of mutation testing tool for every language in the world that's the theory of mutation testing okay we're",
    "start": "1159840",
    "end": "1166559"
  },
  {
    "text": "doing pretty good here um the rest of this talk is about cosmic ray a mutation testing tool for python",
    "start": "1166559",
    "end": "1174120"
  },
  {
    "text": "again this tool is not you know it's not industrial strength it's not really ready for anything other than other",
    "start": "1174120",
    "end": "1180480"
  },
  {
    "text": "people kind of hacking around on it other hobbyists perhaps but again I want to get these ideas out there because I",
    "start": "1180480",
    "end": "1185559"
  },
  {
    "text": "think they're really they're kind of neat and I'm hoping that some of you get grabbed by the ideas as much as I was grabbed by them when I saw Seb talk um",
    "start": "1185559",
    "end": "1194280"
  },
  {
    "start": "1194000",
    "end": "1345000"
  },
  {
    "text": "so and and again we're going to start looking at some python code here but it really doesn't matter that much me is easy to read but you can hopefully kind",
    "start": "1194280",
    "end": "1200480"
  },
  {
    "text": "of translate what you see here to your language of choice um the very first thing that cosm",
    "start": "1200480",
    "end": "1207559"
  },
  {
    "text": "inquery has to do again don't worry about grocking all of that code is figure out what it is it's going to be mutating and what we what we do is we",
    "start": "1207559",
    "end": "1213520"
  },
  {
    "text": "ask the user please give us the name of the package you want to work against so that's kind of the granularity and this",
    "start": "1213520",
    "end": "1218880"
  },
  {
    "text": "fine modules function does um does all that work the the the neat things in here are where the red arrows are so let",
    "start": "1218880",
    "end": "1225760"
  },
  {
    "text": "me back up a second one of the things that really grabbed me about the whole develop process of cosmic ray was how",
    "start": "1225760",
    "end": "1231559"
  },
  {
    "text": "python seemed to have all the bits and pieces that I need there's a lot of things that can be really really difficult in mutation testing finding",
    "start": "1231559",
    "end": "1236760"
  },
  {
    "text": "the code to be tested modifying the code maybe having to recompile the code um running test SES dynamically spawning",
    "start": "1236760",
    "end": "1243000"
  },
  {
    "text": "things out multiple processes and so forth and python kind of made that um relatively straightforward pleasingly so",
    "start": "1243000",
    "end": "1249200"
  },
  {
    "text": "and a lot of that comes down to the kind of the architecture of how the language is put together if you um take a little",
    "start": "1249200",
    "end": "1254880"
  },
  {
    "text": "diversion into software architecture if or actually physical architecture there's there's a guy named vvus from",
    "start": "1254880",
    "end": "1260880"
  },
  {
    "text": "ancient Rome and he wrote the you know the thing on architecture back in the day and he said there were three things",
    "start": "1260880",
    "end": "1265960"
  },
  {
    "text": "about architecture that were important the the the durability of it effectively the commodity of it whether it did what it was supposed to do and whether or not",
    "start": "1265960",
    "end": "1272400"
  },
  {
    "text": "it was delightful and yeah I forget the Latin of it but um the delightful part is what got me here I was continually",
    "start": "1272400",
    "end": "1278880"
  },
  {
    "text": "delighted as I wrote this code to find that the hard Parts had at least been thought about by the designers of the",
    "start": "1278880",
    "end": "1284080"
  },
  {
    "text": "language and I hope that if you do this kind of work in your own language you find the same thing because otherwise I would have given up if these hard Parts",
    "start": "1284080",
    "end": "1290000"
  },
  {
    "text": "hadn't been written for me I would have said it's not worth the effort um because I'm lazy and don't have infinite",
    "start": "1290000",
    "end": "1295039"
  },
  {
    "text": "time so one thing that was really neat is this um this API access to the the",
    "start": "1295039",
    "end": "1301120"
  },
  {
    "text": "import system so there's a keyword called import and you give it a name and it Imports a package and binds names and stuff for you all of that is",
    "start": "1301120",
    "end": "1307039"
  },
  {
    "text": "programmatically accessible through this thing called import lib which is part of the standard Library so I can pass it the module name and it Imports the",
    "start": "1307039",
    "end": "1312679"
  },
  {
    "text": "module for me great that's one really difficult thing out of the way now I can scan this module object for sub modules",
    "start": "1312679",
    "end": "1319240"
  },
  {
    "text": "which is really all this function is doing so now I've got the module and I look up its path on the file system and",
    "start": "1319240",
    "end": "1325400"
  },
  {
    "text": "use package util to iterate its subm modules so I don't want to spend too much time on this except to say this",
    "start": "1325400",
    "end": "1330600"
  },
  {
    "text": "this was a piece of code that I was worried about writing and I found that it was actually pleasantly simple and I",
    "start": "1330600",
    "end": "1335679"
  },
  {
    "text": "learned quite a bit about how python does Imports under the hood which is good because I do a lot of python",
    "start": "1335679",
    "end": "1340760"
  },
  {
    "text": "training it helps if I know this kind of stuff right um yeah the kind of next moving part is is",
    "start": "1340760",
    "end": "1348760"
  },
  {
    "start": "1345000",
    "end": "1510000"
  },
  {
    "text": "how do you run tests this is one of the primary things of course that uh cosmic ray has to",
    "start": "1348760",
    "end": "1355158"
  },
  {
    "text": "do now there are about a thousand different unit test or test automation",
    "start": "1355919",
    "end": "1361080"
  },
  {
    "text": "systems and packages and Frameworks for python so I couldn't obviously Implement support for all of them so I implemented",
    "start": "1361080",
    "end": "1366559"
  },
  {
    "text": "a a plug-in system that lets um lets you provide an implementation for your your",
    "start": "1366559",
    "end": "1371600"
  },
  {
    "text": "flavor of unit testing I I have two uh two that I provide inhouse unit test which is the or not inh housee but as",
    "start": "1371600",
    "end": "1377880"
  },
  {
    "text": "part of cosmic right one is unit test itself the standard libraries unit testing system and P test which is probably the most popular one out there",
    "start": "1377880",
    "end": "1384520"
  },
  {
    "text": "but because of the plug-in system I'm using you can provide whichever one you want if you have an in-house testing system you can pretty trivially provide",
    "start": "1384520",
    "end": "1391720"
  },
  {
    "text": "uh support for it um if you're using Python and you want a good plugin system I want to give a",
    "start": "1391720",
    "end": "1397799"
  },
  {
    "text": "little shout out to St Ador part of the openstack um system it's wonderful it's a great plug-in system and it made this",
    "start": "1397799",
    "end": "1403120"
  },
  {
    "text": "job very very easy um the only thing you really have to do to implement a new one is Implement a sub class of what's",
    "start": "1403120",
    "end": "1409039"
  },
  {
    "text": "called testr Runner and and in that class Implement a underscore run function and its job is to just run all",
    "start": "1409039",
    "end": "1415679"
  },
  {
    "text": "the tests it finds under a directory it's really that simple it's probably simplistic I'll probably run into eventually some unit testing system for",
    "start": "1415679",
    "end": "1421720"
  },
  {
    "text": "which this is insu insufficient in which case we'll just modify the plug-in API a little bit but um again the details are",
    "start": "1421720",
    "end": "1427919"
  },
  {
    "text": "not all that important but it is an important element of any mutation system finding the tests that are going to be run it's something you have to",
    "start": "1427919",
    "end": "1435640"
  },
  {
    "text": "tackle this is where it gets really fun and cool right this this is when we get into computer sciency stuff now as is",
    "start": "1435640",
    "end": "1440799"
  },
  {
    "text": "abstract syntax tree sounds very scientific and it kind of is um this is very technical this is this is when you",
    "start": "1440799",
    "end": "1446640"
  },
  {
    "text": "think about mutation testing the kind of the meat of the problem the fun stuff manipulating code manipulating your",
    "start": "1446640",
    "end": "1451919"
  },
  {
    "text": "executable environment and so forth um python provides a thing called a module",
    "start": "1451919",
    "end": "1457240"
  },
  {
    "text": "called as of abstract syntax tree it's part of the standard library and it can do two fundamentally very important",
    "start": "1457240",
    "end": "1463720"
  },
  {
    "text": "things for cosmic ray one is it can take source code just a string with source code in it and turn it into an a give",
    "start": "1463720",
    "end": "1469720"
  },
  {
    "text": "you a tree structure that you can then Traverse in various ways and it provides a set of uh essentially visitor pattern",
    "start": "1469720",
    "end": "1476600"
  },
  {
    "text": "implementations these little visitors called node Transformers that can be made to Traverse the tree and be given a",
    "start": "1476600",
    "end": "1481880"
  },
  {
    "text": "chance to replace nodes as they go and these two bits here are essentially how we Implement U the mutation phase of um",
    "start": "1481880",
    "end": "1490840"
  },
  {
    "text": "of cosmic ray we find the source code file slurp up read the read the code out of it pass it into the as generator get",
    "start": "1490840",
    "end": "1497159"
  },
  {
    "text": "the and then Traverse it and let the operators operate on the nodes as we go and we'll look at that in a bit of detail but this is this is in some sense",
    "start": "1497159",
    "end": "1504440"
  },
  {
    "text": "the the core the the neat guts of any mutation uh testing Suite so that leads",
    "start": "1504440",
    "end": "1510640"
  },
  {
    "start": "1510000",
    "end": "1575000"
  },
  {
    "text": "us directly to what is an operator what what do we mean when we say uh operator operators are essentially the things",
    "start": "1510640",
    "end": "1517399"
  },
  {
    "text": "responsible for manipulating the they use the as module to replace nodes you know change a plus to a minus you can",
    "start": "1517399",
    "end": "1524039"
  },
  {
    "text": "see in this case this all an operator does given this little bit of the tree and if his job is to replace play plus with minus that's what he does he spits",
    "start": "1524039",
    "end": "1530360"
  },
  {
    "text": "that out and shoves it in the tree and then somebody runs the code um it's really simple to create a new operator",
    "start": "1530360",
    "end": "1535919"
  },
  {
    "text": "if you want to you just subclass from operator which in turn subclasses from the node Transformer we mentioned earlier um and you can provide these",
    "start": "1535919",
    "end": "1543080"
  },
  {
    "text": "also as plugins also using stevor which again wonderful Library um they have two primary jobs one is to identify the",
    "start": "1543080",
    "end": "1549440"
  },
  {
    "text": "places in the tree that they're allowed that they know how to mutate so this guy would report uh when he sees a plus node",
    "start": "1549440",
    "end": "1555320"
  },
  {
    "text": "you say oh yeah I know how to modify that report it back to cosmic ray and cos would say okay well I want you to then go ahead and modify that um that's",
    "start": "1555320",
    "end": "1562080"
  },
  {
    "text": "how operators work fundamentally they're very very simple no no single operator is really all that complex because they",
    "start": "1562080",
    "end": "1567120"
  },
  {
    "text": "only ever make very very small control changes um and typically that is to replace a node or delete an entire",
    "start": "1567120",
    "end": "1572600"
  },
  {
    "text": "subtree out of the uh this is a full example of a",
    "start": "1572600",
    "end": "1578600"
  },
  {
    "start": "1575000",
    "end": "1622000"
  },
  {
    "text": "typical operator um really the whole point here is just to see that it's actually very very small um it",
    "start": "1578600",
    "end": "1584840"
  },
  {
    "text": "subclasses from operator which is something part of cosmic ray this visit unary op as part of the node Transformer",
    "start": "1584840",
    "end": "1590600"
  },
  {
    "text": "API and it's given a node and we check to see okay is this node an instance of unary subtraction if so we want to",
    "start": "1590600",
    "end": "1596760"
  },
  {
    "text": "signal that this is a site we know how to mutate and if the Machinery wants us to actually do the mutation we get this",
    "start": "1596760",
    "end": "1602159"
  },
  {
    "text": "gets called and the node is replaced essentially replaced in place with a un Edition and spit back this is the flavor",
    "start": "1602159",
    "end": "1609000"
  },
  {
    "text": "of almost all the operators and all the ones I thought about as well I haven't implemented all the operators I mentioned earlier U very very simple",
    "start": "1609000",
    "end": "1615919"
  },
  {
    "text": "very straightforward and the kind of thing you could peace meal add to your system as you",
    "start": "1615919",
    "end": "1621200"
  },
  {
    "text": "go now before we get into some of the um the next bits of cosmic ray I want to",
    "start": "1621200",
    "end": "1626240"
  },
  {
    "start": "1622000",
    "end": "1743000"
  },
  {
    "text": "give a quick overview of how Python's uh module loading system works because without knowing that the rest of it",
    "start": "1626240",
    "end": "1631799"
  },
  {
    "text": "doesn't make any sense so this is getting into a bit of python specifics um but it is a nice sophisticated pretty",
    "start": "1631799",
    "end": "1637760"
  },
  {
    "text": "elegant system I found as I was researching into this stuff there's three main parts the first one is these",
    "start": "1637760",
    "end": "1644200"
  },
  {
    "text": "things called finders and a finder is just an object that when given a name responds with yes or no I know how to",
    "start": "1644200",
    "end": "1650000"
  },
  {
    "text": "load up a module of that name so you can have finders that know know how to load modules out of zip files off of network",
    "start": "1650000",
    "end": "1656000"
  },
  {
    "text": "stores HTTP off the hard disk or wherever there's all sorts of methods for importing modules in Python and you",
    "start": "1656000",
    "end": "1662960"
  },
  {
    "text": "have different finders for each of those methods um when a finder does know how to load something when it says yeah that",
    "start": "1662960",
    "end": "1668200"
  },
  {
    "text": "that's name that name is something I recognize it's supposed to spit back a loader a loader is the next bit it's",
    "start": "1668200",
    "end": "1674000"
  },
  {
    "text": "responsible for taking what's what amounts to an empty module object um just kind an empty shell and filling up",
    "start": "1674000",
    "end": "1679440"
  },
  {
    "text": "its name space with name bindings name to class name to function name to whatever um so the finder says yeah I",
    "start": "1679440",
    "end": "1686320"
  },
  {
    "text": "know how to do something with that that import the loader does the actual work of filling up the Nam space the last bit is this thing called cism metapath and",
    "start": "1686320",
    "end": "1693360"
  },
  {
    "text": "CIS metapath is just a list literally a list of finders and when somebody in",
    "start": "1693360",
    "end": "1698720"
  },
  {
    "text": "Python says import Foo python goes okay first finder do you know how to import Foo no okay next finder do you know how",
    "start": "1698720",
    "end": "1705200"
  },
  {
    "text": "to import Fu goes down the list until somebody says yes and uh if nobody says yes then you get an exception you can't",
    "start": "1705200",
    "end": "1711120"
  },
  {
    "text": "import that so all these put together basically give you complete control over",
    "start": "1711120",
    "end": "1716360"
  },
  {
    "text": "how the import keyword Maps the names it gets to the things it actually does and this is what we need complete control",
    "start": "1716360",
    "end": "1722159"
  },
  {
    "text": "over to make the tests work to make uh mutation testing work because the tests the test Suite themselves we never",
    "start": "1722159",
    "end": "1728039"
  },
  {
    "text": "modify the test Suite need to be able to say import Fu and get mutated Fu when we",
    "start": "1728039",
    "end": "1733440"
  },
  {
    "text": "want mutated Fu to be in place and so we need to have fine grain control over this entire chain",
    "start": "1733440",
    "end": "1738960"
  },
  {
    "text": "and so that's that's what cosmic ray does um the first thing we Implement is a finder of course and the finder does",
    "start": "1738960",
    "end": "1745679"
  },
  {
    "start": "1743000",
    "end": "1847000"
  },
  {
    "text": "nothing more then associate a name a module name with an a mutated so we as",
    "start": "1745679",
    "end": "1752360"
  },
  {
    "text": "part of the algorithm take the pristine a mutate it in some way create a finder",
    "start": "1752360",
    "end": "1757679"
  },
  {
    "text": "that binds the module name to that and stick it up in CIS metapath so that when somebody says when a test says import",
    "start": "1757679",
    "end": "1764399"
  },
  {
    "text": "that module it gets the mutated version this is this struck me as really kind of neat and elegant and kind of a present",
    "start": "1764399",
    "end": "1770840"
  },
  {
    "text": "with a little you know bow tide on top he just felt really nice when this when this all started working um the code is",
    "start": "1770840",
    "end": "1776399"
  },
  {
    "text": "incredibly simple uh this is all of it right here minus documentation of course which I have copious amounts of because",
    "start": "1776399",
    "end": "1782000"
  },
  {
    "text": "I'm a good programmer um the the only thing that they really need to understand is that so find spec is what",
    "start": "1782000",
    "end": "1788519"
  },
  {
    "text": "python calls when it's asking for whether this finder can load the module and we just say you know is the name",
    "start": "1788519",
    "end": "1794080"
  },
  {
    "text": "that they want equal to the name that I've been given if so pass back the right here in the context of a loader no",
    "start": "1794080",
    "end": "1800760"
  },
  {
    "text": "big deal this is really really simple and the fact that it was so simple it gives you the sense that the designers",
    "start": "1800760",
    "end": "1806159"
  },
  {
    "text": "of this system really thought ahead they probably didn't think about mutation testing itself but they they they didn't think too narrowly they really thought",
    "start": "1806159",
    "end": "1812480"
  },
  {
    "text": "broadly about giving programmers at runtime full control over the guts the Machinery of the language itself and",
    "start": "1812480",
    "end": "1818679"
  },
  {
    "text": "this is what we're getting into really the guts of how python works at Toto this is the bottom basement of how python works except for a bunch of C",
    "start": "1818679",
    "end": "1825559"
  },
  {
    "text": "code which um come on the next bit is loaders um so",
    "start": "1825559",
    "end": "1832240"
  },
  {
    "text": "the finder when it recognizes a name spits back a loader and this loader all it does is take the as object compile it",
    "start": "1832240",
    "end": "1838919"
  },
  {
    "text": "into a code object and then execute that code object in the namespace of the module okay that's a bunch of verbage",
    "start": "1838919",
    "end": "1844279"
  },
  {
    "text": "basically it just fills up a module thing for you using the mutated as oh",
    "start": "1844279",
    "end": "1849519"
  },
  {
    "start": "1847000",
    "end": "1893000"
  },
  {
    "text": "again super super dirt simple this is the entire implementation minus again comments of the um of the as loader and",
    "start": "1849519",
    "end": "1858000"
  },
  {
    "text": "you can see this is kind of the magic of the magic down here we have the a some mutated as we compile it this produces a",
    "start": "1858000",
    "end": "1865960"
  },
  {
    "text": "code object we execute that code object in the name space of the module that's passed into us and that gets bound to",
    "start": "1865960",
    "end": "1871840"
  },
  {
    "text": "the module name in the callers context and this is how the tests get access to",
    "start": "1871840",
    "end": "1876960"
  },
  {
    "text": "mutated asts and this yeah again this is this kind of warm fuzzy feelings I get",
    "start": "1876960",
    "end": "1882320"
  },
  {
    "text": "when I when I think about this code and how kind of pleasant it was to write it what a neat project it was to to get to",
    "start": "1882320",
    "end": "1887360"
  },
  {
    "text": "work on um because I didn't have to do a whole lot of work and I got a neat tool out of it um there's some other bits and",
    "start": "1887360",
    "end": "1893760"
  },
  {
    "start": "1893000",
    "end": "2130000"
  },
  {
    "text": "pieces that um are not too python specific there are things you'll need to think about if you end up you know",
    "start": "1893760",
    "end": "1898960"
  },
  {
    "text": "thinking about mutation testing on your own one is sandboxing potentially a mutant can do all sorts of wacky things",
    "start": "1898960",
    "end": "1905360"
  },
  {
    "text": "like the mutant could start doing things like manipulating cyop metapath or deleting files or sending pings to an",
    "start": "1905360",
    "end": "1911519"
  },
  {
    "text": "orbiting space station or you don't you know you don't know what it's going to do right because you've mutated it's probably not going to Ping a space station but um I me we got rocket",
    "start": "1911519",
    "end": "1918159"
  },
  {
    "text": "scientists here so who knows um basically though you want to avoid what I call cross mutant interference the",
    "start": "1918159",
    "end": "1924440"
  },
  {
    "text": "potential that they can influence how each other works and therefore pollute and corrupt the the output from your your testing um so there's this Library",
    "start": "1924440",
    "end": "1932639"
  },
  {
    "text": "called multiprocessing which has a kind of a threads likee API that lets me actually spawn out processes in a very simple way and that's how I do",
    "start": "1932639",
    "end": "1938960"
  },
  {
    "text": "sandboxing each time I do a run for each mutant and each test Suite pair that I have I create a separate process to run",
    "start": "1938960",
    "end": "1945399"
  },
  {
    "text": "that and that way I can guarantee that nobody is stom on anybody else's name space nobody else's module space or",
    "start": "1945399",
    "end": "1950600"
  },
  {
    "text": "anything like that um it's a bit heavy-handed and a bit of a hack but it works or seems to work really really",
    "start": "1950600",
    "end": "1956080"
  },
  {
    "text": "well and I'm comfortable that it's doing the right thing at least until somebody tells me otherwise",
    "start": "1956080",
    "end": "1961919"
  },
  {
    "text": "um piika um this is very python specific except well Pi is an actor actor model",
    "start": "1961919",
    "end": "1968559"
  },
  {
    "text": "implementation in Python is anybody here I mean if you're a scholar program I guess you probably who knows actor model",
    "start": "1968559",
    "end": "1973880"
  },
  {
    "text": "at all you should all know actor model I mean this is this is one of the most important things um in in my opinion",
    "start": "1973880",
    "end": "1980960"
  },
  {
    "text": "that that we should all be thinking about it's it's a great Paradigm for developing programs especially programs that can take advantage of massive you",
    "start": "1980960",
    "end": "1987960"
  },
  {
    "text": "know parallelism and all the cores we've got available nowadays actors are they're simple to think about they're",
    "start": "1987960",
    "end": "1994200"
  },
  {
    "text": "robust they scale out really well they scale up really well um they're proven",
    "start": "1994200",
    "end": "1999279"
  },
  {
    "text": "mathematically you can read some fascinating books on um on actor model um Theory there's one called the black",
    "start": "1999279",
    "end": "2005720"
  },
  {
    "text": "book by a guy named ghoul AA from MIT and um he you know he explains actor",
    "start": "2005720",
    "end": "2010960"
  },
  {
    "text": "model theory in terms of general relativity and things like that it's just really fascinating to read it and you come away thinking yes this is the",
    "start": "2010960",
    "end": "2016840"
  },
  {
    "text": "answer it really is um but you know for me actor model stuff it's really",
    "start": "2016840",
    "end": "2022880"
  },
  {
    "text": "simplifies design it simplifies the cognitive space that I have to work in as a programmer because I don't have to",
    "start": "2022880",
    "end": "2028320"
  },
  {
    "text": "think about things like locks and threads and um as so many race conditions and all these things that if",
    "start": "2028320",
    "end": "2034559"
  },
  {
    "text": "you're doing thread programming you have to worry about it all just disappears because it vastly simplifies the model you're allowed to work with Without",
    "start": "2034559",
    "end": "2040799"
  },
  {
    "text": "Really binding your hands too tight um so I I really suggest looking into it the um the benefits I see from it how",
    "start": "2040799",
    "end": "2047200"
  },
  {
    "text": "much time do I have I okay 10 minutes good um is that these mutant testers",
    "start": "2047200",
    "end": "2052800"
  },
  {
    "text": "each of these this this these are my actors that are actually running the tests so each of these is responsible for launching a process that then runs",
    "start": "2052800",
    "end": "2058919"
  },
  {
    "text": "the tests and I just make as many of these actors as I need and they each feed from this thing called the process",
    "start": "2058919",
    "end": "2064760"
  },
  {
    "text": "que or the the Q manager actor and they just pull pull the next bit of work to be done off of that queue and they do it",
    "start": "2064760",
    "end": "2070638"
  },
  {
    "text": "and there's no way they can interfere with one another all they can do is is talk to these little messages and I could scale up I I can scale that out",
    "start": "2070639",
    "end": "2077320"
  },
  {
    "text": "just by creating more mutant testers if I have 16 cores I create 16 mutant testers on this I only make four or five",
    "start": "2077320",
    "end": "2082919"
  },
  {
    "text": "or whatever the number is um I really I I've seen this pattern over and over",
    "start": "2082919",
    "end": "2088560"
  },
  {
    "text": "again that the that you start with some program that has some inherent concurrency in it and you try to cat it up with threads or some other Paradigm",
    "start": "2088560",
    "end": "2096000"
  },
  {
    "text": "and then you step back and go this is a real mess this really ought to be simple because conceptually it's very simple and then you apply the actor model to it",
    "start": "2096000",
    "end": "2101640"
  },
  {
    "text": "and your code becomes simple it becomes something you can reason about something you can test much more easily because testing actors is Trivial you just",
    "start": "2101640",
    "end": "2107560"
  },
  {
    "text": "instantiate the actor and throw messages at it and see what messages come out that's the only thing actors can do so",
    "start": "2107560",
    "end": "2112920"
  },
  {
    "text": "they become really easy to test um and they're really robust and go on and on but I'm running out of time so look into",
    "start": "2112920",
    "end": "2119200"
  },
  {
    "text": "the actor model whatever language you're using whatever stuff you do it's really really important I think um and it's fun",
    "start": "2119200",
    "end": "2126560"
  },
  {
    "text": "it really is fun um finally I use a feature in Python called acing guo a relatively new",
    "start": "2126560",
    "end": "2132839"
  },
  {
    "start": "2130000",
    "end": "2163000"
  },
  {
    "text": "feature it's just an event Loop uh that's designed to support uh high performance concurrent IO and I just",
    "start": "2132839",
    "end": "2138960"
  },
  {
    "text": "have this event Loop sit in a loop checking the testers and he says are you all dead are you all dead are you all",
    "start": "2138960",
    "end": "2145119"
  },
  {
    "text": "dead and once they're all dead the program is done so this is really a python implementation detail of how do we determine when all the actors are",
    "start": "2145119",
    "end": "2150760"
  },
  {
    "text": "done um but if you're using python you should be learning about async iio because it is it's the future for many",
    "start": "2150760",
    "end": "2156119"
  },
  {
    "text": "many things for event driven programming reactive programming that kind of stuff in Python",
    "start": "2156119",
    "end": "2161280"
  },
  {
    "text": "um right so how does this all sort of fit together um the first thing that",
    "start": "2161280",
    "end": "2167599"
  },
  {
    "start": "2163000",
    "end": "2683000"
  },
  {
    "text": "cosmic ray does is figure out which test Runner it's going to use unit test Pi test whatever it's a command line option",
    "start": "2167599",
    "end": "2173040"
  },
  {
    "text": "that the user passes in it then figures out the modules that's going to mutate it scans the the package directory it",
    "start": "2173040",
    "end": "2179319"
  },
  {
    "text": "figures out all the operators it's going to use because of course the operators could be provided by external uh plugins",
    "start": "2179319",
    "end": "2184599"
  },
  {
    "text": "it then lazily generates a sequence of mutated ests and the laziest important because if you try to generate the full sequence it would be really really big",
    "start": "2184599",
    "end": "2190720"
  },
  {
    "text": "and there's no reason to have it all in memory at the same time anyway uh they just they just get generated as the",
    "start": "2190720",
    "end": "2195760"
  },
  {
    "text": "mutant tester actors decide they need another one they go hey give me another one give me another one give me another one and the Q manager is responsible for",
    "start": "2195760",
    "end": "2201280"
  },
  {
    "text": "essentially cranking those out as they're needed and then for each mutant we run the tests um each test runs in a new",
    "start": "2201280",
    "end": "2207560"
  },
  {
    "text": "process and each manipulates its local cy. metapath in its own process and this is really important um to make sure that",
    "start": "2207560",
    "end": "2214960"
  },
  {
    "text": "I mean this this this is the sandboxing here this that that each process has its own cisap paath and that's critical if they all shared a cisap paath there",
    "start": "2214960",
    "end": "2220800"
  },
  {
    "text": "would just be complete chaos and figuring out how to do this correctly um was yeah it was complete chaos for a",
    "start": "2220800",
    "end": "2227280"
  },
  {
    "text": "while I was losing my mind excuse me um all right that's about it I there I",
    "start": "2227280",
    "end": "2234359"
  },
  {
    "text": "could do a quick demo but it it's really just me on the command line kind of showing you how the the program runs um",
    "start": "2234359",
    "end": "2240359"
  },
  {
    "text": "I think maybe it's better use of time to take questions um so if anybody has any questions um now is the time and and I",
    "start": "2240359",
    "end": "2247800"
  },
  {
    "text": "can do a demo later like after anybody wants to see it I'm happy to show you um before we do the questions let me just",
    "start": "2247800",
    "end": "2252920"
  },
  {
    "text": "say remember to rate the session and the only important button is the the great smiley face um and thank",
    "start": "2252920",
    "end": "2259880"
  },
  {
    "text": "you yeah have I thought about using as manipulation for other things um not not",
    "start": "2259880",
    "end": "2268760"
  },
  {
    "text": "really I mean it's it's it is a general the question was have I thought about using the module for things Beyond",
    "start": "2268760",
    "end": "2274000"
  },
  {
    "text": "mutation testing um not really I mean it's it is a general purpose tool it's not mutation testing specific in any",
    "start": "2274000",
    "end": "2281160"
  },
  {
    "text": "sense and it's kind of a cool thing if you want to do code generation and stuff like that you can certainly use as to do",
    "start": "2281160",
    "end": "2286960"
  },
  {
    "text": "that but um I don't have any uh plans right now to use it for anything else but if you've got NE ideas you know it's",
    "start": "2286960",
    "end": "2292680"
  },
  {
    "text": "it's an easy module to use so yeah right the the question was are there any other",
    "start": "2292680",
    "end": "2298040"
  },
  {
    "text": "tools mutation testing tools that I know about the only one that I know about is called pit or maybe it's pronounced pit",
    "start": "2298040",
    "end": "2303560"
  },
  {
    "text": "but it's a Java tool it's apparently full-featured robust industrial strength ready for use um it's got a lot of fans",
    "start": "2303560",
    "end": "2310160"
  },
  {
    "text": "and a lot of users and a really smart guy behind the project um I think it's Pi test.org maybe is the name of the is",
    "start": "2310160",
    "end": "2317960"
  },
  {
    "text": "is the URL but it's pit mutation testing Java that that Google that and you'll find it um it is uh yeah it's apparently",
    "start": "2317960",
    "end": "2325400"
  },
  {
    "text": "a great tool um and just kind of light years beyond anything else that's available right now so the question was",
    "start": "2325400",
    "end": "2331480"
  },
  {
    "text": "have I have I thought about how to assist the users in interpreting the output that they get because yeah the the mutation testing just kind of shines",
    "start": "2331480",
    "end": "2337440"
  },
  {
    "text": "the light and says okay this test um failed or this test you know everything passed and blah blah blah",
    "start": "2337440",
    "end": "2344000"
  },
  {
    "text": "um typically when you get the results out of cosmic ray the results tell you the line that was changed and it tells",
    "start": "2344000",
    "end": "2351079"
  },
  {
    "text": "you the nature of the operator so it's pretty easy to figure out what was changed and so it's not always all that difficult um to figure it out what what",
    "start": "2351079",
    "end": "2358079"
  },
  {
    "text": "could be really difficult is to figure out sometimes if what you've got in is equivalent to mutant that you can ignore or if it's something you really have to",
    "start": "2358079",
    "end": "2364359"
  },
  {
    "text": "worry about because you could imagine situations where you replace greater than with greater than equal that's a",
    "start": "2364359",
    "end": "2370599"
  },
  {
    "text": "pretty small logical change and it's can be really it can actually be impossible in like C++ in a private method to",
    "start": "2370599",
    "end": "2376440"
  },
  {
    "text": "actually test that in a direct way um so I guess to answer your question I",
    "start": "2376440",
    "end": "2383000"
  },
  {
    "text": "haven't thought too hard about providing assistance because it seems that just having the location of the change that",
    "start": "2383000",
    "end": "2388040"
  },
  {
    "text": "survived is typically enough and beyond that you would have to have a really really smart system to be able to assist",
    "start": "2388040",
    "end": "2394680"
  },
  {
    "text": "beyond that I think um I had something else I was going to say and it's flown out of my brain I",
    "start": "2394680",
    "end": "2400280"
  },
  {
    "text": "apologize okay the question what's what's a typical failure rate what's or a typical survival rate um I don't know",
    "start": "2400280",
    "end": "2406839"
  },
  {
    "text": "I I would feel like I'd be lying if I told you there was a typical number but on the tests that I've run um I see",
    "start": "2406839",
    "end": "2412000"
  },
  {
    "text": "everything from you know 100% 100% uh mortality rate which is what you want and that's a really good test Suite but",
    "start": "2412000",
    "end": "2417720"
  },
  {
    "text": "typically that's on small projects to um you if you got a poor and this means",
    "start": "2417720",
    "end": "2424200"
  },
  {
    "text": "kind of typical test Suite you could have a really really high survival rate you're like 90 plus% because because",
    "start": "2424200",
    "end": "2429720"
  },
  {
    "text": "test Suites are not that sensitive it turns out very often um one one thing",
    "start": "2429720",
    "end": "2435680"
  },
  {
    "text": "that that I I puzzle about and ponder about in the we hours of the morning is how much if if mutation testing takes",
    "start": "2435680",
    "end": "2441440"
  },
  {
    "text": "off and becomes a more popular tool will let start to guide the way we write tests I wonder about that because things",
    "start": "2441440",
    "end": "2448720"
  },
  {
    "text": "like equivalent mutants and stuff if if we worry about those that might modify the way we write our code to make it more testable in a mutation testing",
    "start": "2448720",
    "end": "2454960"
  },
  {
    "text": "sense and is is that a good thing or a bad thing that this this kind of Arcane testing system is forcing us to write",
    "start": "2454960",
    "end": "2460839"
  },
  {
    "text": "code in a certain way and um I've gone off on a bit of a tangent there but I I I there's not a there's not a number I",
    "start": "2460839",
    "end": "2466319"
  },
  {
    "text": "could give you it really depends heavily on the kind of code you've got um the number of tests and the quality of your",
    "start": "2466319",
    "end": "2472280"
  },
  {
    "text": "test Suite A related interesting question and one that I don't have an answer to but I I hope somebody someday figures out is how much language",
    "start": "2472280",
    "end": "2479400"
  },
  {
    "text": "determines the um the efficacy of M of mutant testing you know if you talk to",
    "start": "2479400",
    "end": "2484520"
  },
  {
    "text": "uh hascal afficianados they will tell you that of course hasal it's the perfect language and if it if it compiles it works and mutation testing",
    "start": "2484520",
    "end": "2490280"
  },
  {
    "text": "should not even be necessary or and Ada users might tell you the same thing that the code is so tight that any mut any",
    "start": "2490280",
    "end": "2496040"
  },
  {
    "text": "mutation is going to cause things to just collapse and I'd be interesting interested to see Research into that",
    "start": "2496040",
    "end": "2501400"
  },
  {
    "text": "area just on a sort of personal level yeah yeah the question was how is this related to sort of standard code",
    "start": "2501400",
    "end": "2507119"
  },
  {
    "text": "coverage analysis it's actually it's like code coverage analysis on steroids um standard code coverage analysis most",
    "start": "2507119",
    "end": "2512280"
  },
  {
    "text": "tools will simply tell you okay I've run my test suite and every line of code was executed whether that line of code did",
    "start": "2512280",
    "end": "2518200"
  },
  {
    "text": "the right thing or whether our our test Suite is sensitive enough to to tell us that we've broken something I mean",
    "start": "2518200",
    "end": "2524119"
  },
  {
    "text": "because a mutation is just a standin for yeah that's a good question I mean generally the the follow-up was is there",
    "start": "2524119",
    "end": "2530640"
  },
  {
    "text": "a good reason to use one over the other i u coverage analysis tools are generally much faster so there's a reason to use them uh but I wouldn't I",
    "start": "2530640",
    "end": "2537640"
  },
  {
    "text": "wouldn't wait to get 100% coverage um with a standard tool and then start using mutation testing I would maybe use",
    "start": "2537640",
    "end": "2543520"
  },
  {
    "text": "them in parallel um they can work together because often coverage analysis tools also tell you which tests exercise",
    "start": "2543520",
    "end": "2548920"
  },
  {
    "text": "which line of code and if you want to use those that information to reduce your mutation testing space um on a per",
    "start": "2548920",
    "end": "2555640"
  },
  {
    "text": "change basis that can be really useful so they can work in tandem I suppose in that way yes you say that you only modify one",
    "start": "2555640",
    "end": "2563960"
  },
  {
    "text": "small thing and then run tests yeah is that because it doesn't make sense to modify multiple things or just just to",
    "start": "2563960",
    "end": "2571200"
  },
  {
    "text": "take too long to get all it the the reason you do that is so that you can",
    "start": "2571200",
    "end": "2576440"
  },
  {
    "text": "you can be gu guaranteed that the results you know which change caused the failure in your test Suite if I if I",
    "start": "2576440",
    "end": "2581800"
  },
  {
    "text": "change 10 things at once and my test Suite starts to fail I'm left scratching my head going well which change yeah but",
    "start": "2581800",
    "end": "2588599"
  },
  {
    "text": "I I I was thinking just doing that on top of changing one thing changing multiple things to see if if that",
    "start": "2588599",
    "end": "2596359"
  },
  {
    "text": "would oh so doing some kind of binary space reduction like doing a bunch of tests and then if uh we get a failure",
    "start": "2596359",
    "end": "2602640"
  },
  {
    "text": "then only half and then only half or something like that yeah maybe yeah I I that's that's a that's a good question",
    "start": "2602640",
    "end": "2608960"
  },
  {
    "text": "um I'm sure I've thought about this to some degree but and and concluded that you doing one test at a time is the way",
    "start": "2608960",
    "end": "2614000"
  },
  {
    "text": "to go and maybe there's a mathematical reason for that but um I think the the ultimate explanation is it's it's the",
    "start": "2614000",
    "end": "2619280"
  },
  {
    "text": "scientific way only change one variable at a time um but I guess in the end it",
    "start": "2619280",
    "end": "2625240"
  },
  {
    "text": "if you're not too concerned about conflating mutations like maybe I have one mutation that made on its own would cause a failure but then in in if it's",
    "start": "2625240",
    "end": "2632160"
  },
  {
    "text": "made in change with this guy then there's no failures and all of a sudden you're you're really confident in your code but in fact it's crap",
    "start": "2632160",
    "end": "2637720"
  },
  {
    "text": "yeah you don't want to be in that position yeah um so so the question was could we speed things up essentially by",
    "start": "2637720",
    "end": "2643280"
  },
  {
    "text": "reducing the scope of the test we're running and I I suppose that's that's that that would be a refinement to the way um cosmic ray runs now you could say",
    "start": "2643280",
    "end": "2650000"
  },
  {
    "text": "instead of test testing a whole package test just this class I think that's reasonable but since it's generally your",
    "start": "2650000",
    "end": "2655119"
  },
  {
    "text": "test suite's responsibility to insert the mocks and stuff you get all that for free when you test the class it's not",
    "start": "2655119",
    "end": "2660599"
  },
  {
    "text": "that's not some new responsibility of of the mutation testing Suite but yeah they can work in concert very well",
    "start": "2660599",
    "end": "2667319"
  },
  {
    "text": "um okay um thanks again and if you want to talk about this later just just grab me in the halls thanks",
    "start": "2667319",
    "end": "2675240"
  }
]