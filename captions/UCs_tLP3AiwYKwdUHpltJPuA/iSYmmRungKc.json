[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "[Music] welcome to the go-to podcast each",
    "start": "310",
    "end": "7560"
  },
  {
    "text": "episode covers the brightest and boldest ideas from the world's leading experts in software development tune in for",
    "start": "7560",
    "end": "14120"
  },
  {
    "text": "practical lessons compelling theories and plenty of",
    "start": "14120",
    "end": "19279"
  },
  {
    "text": "inspiration go to gathers the brightest Minds in the software Community to help developers tackle projects today plan",
    "start": "20000",
    "end": "26760"
  },
  {
    "text": "for tomorrow and create a better future stay up to date with the latest in Tech through go-to's top rated events held",
    "start": "26760",
    "end": "33360"
  },
  {
    "text": "online and in person in cities like Amsterdam London Copenhagen and Chicago",
    "start": "33360",
    "end": "39200"
  },
  {
    "text": "and by subscribing to the go-to conferences YouTube channel where you can find thousands more highquality de",
    "start": "39200",
    "end": "44760"
  },
  {
    "text": "talks learn more otopia [Music]",
    "start": "44760",
    "end": "51280"
  },
  {
    "start": "51000",
    "end": "515000"
  },
  {
    "text": "Tech hello everyone and welcome back to goto unscripted my name is James Lewis",
    "start": "51280",
    "end": "56520"
  },
  {
    "text": "and I'll be talking today I'll be in conversation with Richard Felman welcome Richard uh I think we're just going to",
    "start": "56520",
    "end": "62960"
  },
  {
    "text": "explore some ideas around things like language design because Richard will introduce himself but in a moment but is the creator of the programming language",
    "start": "62960",
    "end": "69280"
  },
  {
    "text": "rock uh and author of The wildly successful I'm told he paid me to say that Al in action um but yeah so we",
    "start": "69280",
    "end": "76200"
  },
  {
    "text": "we'll just have a conversation about some about languages and uh programing General I guess uh but welcome Richard maybe you could introduce yourself yeah",
    "start": "76200",
    "end": "82759"
  },
  {
    "text": "thanks I mean yeah uh created The Rock programming language which is still kind of work in progress uh but um wrote the",
    "start": "82759",
    "end": "89360"
  },
  {
    "text": "book Elman action and also spent a lot of time with rust and uh later in the conference somebody talking about rust and zigg and sort of together um but",
    "start": "89360",
    "end": "97920"
  },
  {
    "text": "yeah very interesting language design you were you were telling earlier before the cameras were rolling about uh you were there when when Rich hickey",
    "start": "97920",
    "end": "103640"
  },
  {
    "text": "announced closure uh at at the conference I was I was at Yu I think it was still Yu at the time um in in ohus",
    "start": "103640",
    "end": "111520"
  },
  {
    "text": "in Denmark and yeah Rich Ed up and blew over and Away with this with this announcement of uh of of of closure and",
    "start": "111520",
    "end": "117560"
  },
  {
    "text": "obviously it's been uh pretty successful since I I've I've we've had many projects in thoughtworks that have used",
    "start": "117560",
    "end": "123960"
  },
  {
    "text": "closure over the years and I know there's a um there's a consultancy ju in London that is very s successful with",
    "start": "123960",
    "end": "130879"
  },
  {
    "text": "with as as a pure closure consultancy actually in the fintech mainly in the fintech industry what do you think",
    "start": "130879",
    "end": "136040"
  },
  {
    "text": "actually I mean be interested to get your take on that do you think there are different domains where different languages are more or less suited well",
    "start": "136040",
    "end": "143800"
  },
  {
    "text": "there certainly seems to be an element of suitability but there also seems to be an element of just sort of cultural",
    "start": "143800",
    "end": "149560"
  },
  {
    "text": "moment like something will get Traction in a particular domain maybe it is maybe it isn't like especially well suited for",
    "start": "149560",
    "end": "156160"
  },
  {
    "text": "it but then it just sort of perpetuates so the example that comes immediately to mind is rails and Ruby right I mean if",
    "start": "156160",
    "end": "161920"
  },
  {
    "text": "you're to zoom out and say you know aliens land and they're going to pick which of the languages the programming languages are going to become really big",
    "start": "161920",
    "end": "168120"
  },
  {
    "text": "in web development I don't know why anyone would say well it's going to be the one created by the Japanese guy that's only big in Japan right now",
    "start": "168120",
    "end": "173640"
  },
  {
    "text": "that's the tagline is let's let's make programming fun that's what's going to be used widely in Industry you know and",
    "start": "173640",
    "end": "178840"
  },
  {
    "text": "blow up in the next 10 years I don't think anyone would have predicted that um so I don't think it's necessarily",
    "start": "178840",
    "end": "184480"
  },
  {
    "text": "just about you know like how well suited is it's like perfect fit as much as it is like well you know one person like",
    "start": "184480",
    "end": "190640"
  },
  {
    "text": "dhh made rails uh that that really resonated with a lot of people and uh",
    "start": "190640",
    "end": "195959"
  },
  {
    "text": "and because Ruby was the language that he chose to make that in um yeah could have made it in Python he would probably say nothing else but Ruby would have",
    "start": "195959",
    "end": "202920"
  },
  {
    "text": "inspired me to make rails um but but I think you could pretty easily make the case that someone could have made",
    "start": "202920",
    "end": "208439"
  },
  {
    "text": "something that was as successful as in a different language I think you mentioned python that's super interesting because",
    "start": "208439",
    "end": "214040"
  },
  {
    "text": "I remember when rails was massively taken off and in Forks North America in",
    "start": "214040",
    "end": "219360"
  },
  {
    "text": "particular and in India rails became a huge thing I mean our founder at the time he he was very taken with it and",
    "start": "219360",
    "end": "227200"
  },
  {
    "text": "was there were some very persuasive people who were talking about it Obie Fernandez for example um and it seemed",
    "start": "227200",
    "end": "234360"
  },
  {
    "text": "that we we suddenly had a load of projects in North America and India using using rails and we still do",
    "start": "234360",
    "end": "239439"
  },
  {
    "text": "actually the world's largest rails project was the thought project in in in Atlantic City maybe really but the weird",
    "start": "239439",
    "end": "246360"
  },
  {
    "text": "thing is it didn't didn't spread to the rest of uh of of the countries that were present in so the UK was still and",
    "start": "246360",
    "end": "254079"
  },
  {
    "text": "remains still very much a python shop so maybe there's it's not just a a domain specific application it's also there's",
    "start": "254079",
    "end": "260720"
  },
  {
    "text": "there's also like a geographical thing going on well I think you could generalize that to culture it's like there there's certain pockets of culture",
    "start": "260720",
    "end": "267320"
  },
  {
    "text": "that might be Geographic or might be just other things uh that that contribute to those things there's I",
    "start": "267320",
    "end": "272440"
  },
  {
    "text": "I've spent an increasing amount of time over my career like learning about like why things get adopted and why they",
    "start": "272440",
    "end": "278320"
  },
  {
    "text": "don't and the more I learn about it the more reasons I discover and it seems like there's just an inordinate amount",
    "start": "278320",
    "end": "284320"
  },
  {
    "text": "of variables and as programmers we like to look for Simple Solutions and simple explanations for things but uh much like",
    "start": "284320",
    "end": "290639"
  },
  {
    "text": "with I would say another thing that has been true uh where I the more I get into it the more variables I discover has been like performance optimization where",
    "start": "290639",
    "end": "297720"
  },
  {
    "text": "like when I was in school you know all the focus was on bigo notation and like what's the asmic complexity of this",
    "start": "297720",
    "end": "304240"
  },
  {
    "text": "algorithm stuff like that and now I'm like that's like the this much of it that's the tip of an extremely large",
    "start": "304240",
    "end": "311880"
  },
  {
    "text": "Iceberg um and all the stuff I just had no idea about and similarly with adoption languages or Technologies in",
    "start": "311880",
    "end": "318639"
  },
  {
    "text": "general it's like you know I would have thought you know early on it's like oh well people use that because that's the best thing for it what what else is",
    "start": "318639",
    "end": "324639"
  },
  {
    "text": "there and it's all these cultural and you know all these timing factors that",
    "start": "324639",
    "end": "330520"
  },
  {
    "text": "it I remember thing I remember doing a a thing with one of my colleagues about you know adop programming language adoption and certainly it was as much",
    "start": "330520",
    "end": "336880"
  },
  {
    "text": "about culture availability and um as anything else it seemed you know you are",
    "start": "336880",
    "end": "342680"
  },
  {
    "text": "you better off picking something that where where you know there's a lot of people out there who are going you can",
    "start": "342680",
    "end": "348039"
  },
  {
    "text": "just hire for it yeah or uh another example would be a kind example you know",
    "start": "348039",
    "end": "353400"
  },
  {
    "text": "we had uh a publishing client who deliberately chose Scala because it",
    "start": "353400",
    "end": "359639"
  },
  {
    "text": "meant that they could offer a really fun or more potentially more fun program you know environment for developers to come",
    "start": "359639",
    "end": "365520"
  },
  {
    "text": "in because they couldn't pay the same rates as the banks so there's this almost like tradeoff is do you offer",
    "start": "365520",
    "end": "370960"
  },
  {
    "text": "this like more interesting exciting environment versus okay just you whatever it is th years a day for just a",
    "start": "370960",
    "end": "376800"
  },
  {
    "text": "standard job for developer in a bank yeah I I think that's a that's an underrated trade-off is that um if",
    "start": "376800",
    "end": "382520"
  },
  {
    "text": "you're a company and you're you're considering a novel technology and i' I've talked about this before in other settings but um I mean this is something",
    "start": "382520",
    "end": "388360"
  },
  {
    "text": "like uh you know my my previous job and my current job we uh both have used Elm on the front end as like the entire",
    "start": "388360",
    "end": "394319"
  },
  {
    "text": "front end not just like a little part of it um and really embracing that means that you know you get uh you get to be",
    "start": "394319",
    "end": "401360"
  },
  {
    "text": "very selective about who you hire like we just filled a front- end roll and uh the recruiter was talking to me about yeah we you know hired this guy and it",
    "start": "401360",
    "end": "407759"
  },
  {
    "text": "was really close we had to decide between him and like you know a couple of other people who who really wanted this role and you know usually it's the",
    "start": "407759",
    "end": "414000"
  },
  {
    "text": "other way around where employers are like I just want to find anybody who can fit this description actually meets our",
    "start": "414000",
    "end": "419599"
  },
  {
    "text": "criteria and it's really hard to find people but um but you flip the script when you're when you're offering a technology that people want to use but",
    "start": "419599",
    "end": "426319"
  },
  {
    "text": "that not a lot of employers are using and that's almost um sort of like a you know a self-fulfilling prophecy in the",
    "start": "426319",
    "end": "433520"
  },
  {
    "text": "sense that if enough employers do that then it it flips back around but then by",
    "start": "433520",
    "end": "438560"
  },
  {
    "text": "by then it's mainstream so that it's not notable anymore and and now you're you are saying oh well I can just find lots",
    "start": "438560",
    "end": "443919"
  },
  {
    "text": "of people to do it because it's become mainstream but I think most people are aware of that side of the dynamic but they're not familiar with what happens",
    "start": "443919",
    "end": "450000"
  },
  {
    "text": "before a language gets mainstream and what the Dynamics like over there yeah did did the I guess the big question is did did the person you hire have 25",
    "start": "450000",
    "end": "456360"
  },
  {
    "text": "years of elm experience let's see El almost created in 2011 so yes of",
    "start": "456360",
    "end": "462720"
  },
  {
    "text": "course which I guess comes to Elma I'm going to put my you throw my hands up and uh profess to not generally being",
    "start": "462720",
    "end": "470000"
  },
  {
    "text": "any good at all at front end sof not something I've done in my career to be honest any front end that I program",
    "start": "470000",
    "end": "476039"
  },
  {
    "text": "tends to look like a bad implementation of excel that's pretty much it not an easy not an easy thing to implement so",
    "start": "476039",
    "end": "482039"
  },
  {
    "text": "you know well that well funnny enough coming back to Ruby uh a creator of",
    "start": "482039",
    "end": "487360"
  },
  {
    "text": "aspect Nicholas neelson he showed me an implementation of a spreadsheet written entirely in the constant Missing",
    "start": "487360",
    "end": "496120"
  },
  {
    "text": "Method wow because think about how spreadsheets you have you addressing the you know by by capital letter first and",
    "start": "496120",
    "end": "503159"
  },
  {
    "text": "if you didn't have that defined as a as a oh that's hilarious and you can do all the calculation in Conant Miss anyway",
    "start": "503159",
    "end": "509240"
  },
  {
    "text": "that's by the by um yeah I mean so I mean have you been surprised at the adoption of el and",
    "start": "509240",
    "end": "515039"
  },
  {
    "start": "515000",
    "end": "840000"
  },
  {
    "text": "how successful it's been hm uh yes but maybe not in the way you might guess so",
    "start": "515039",
    "end": "520240"
  },
  {
    "text": "I would have thought that it would have been sort of all or nothing I would have thought that either a language like Elm would just take over the world or it",
    "start": "520240",
    "end": "527399"
  },
  {
    "text": "would just Peter out into non-existence and people would you know walk away from it because I've seen that happen with",
    "start": "527399",
    "end": "532880"
  },
  {
    "text": "you know various different languages like they like typescript would be an example of taking over the world uh that's that's happening right now um and",
    "start": "532880",
    "end": "539000"
  },
  {
    "text": "then coffee script would be an example of something that's sort of petered out and you know uh is basically not really used anymore um Elm seems to have sort",
    "start": "539000",
    "end": "546160"
  },
  {
    "text": "of like found a solid Niche there's just like a chunk of people who are like yes this is how I want to do front end development but it's not it doesn't seem",
    "start": "546160",
    "end": "552640"
  },
  {
    "text": "like it's it's on track to take over the world it seems like it's it's on track to be well it already is like a self-sustaining thing and it seems like",
    "start": "552640",
    "end": "558680"
  },
  {
    "text": "it's on track to sustain um so that's something that we've seen with a lot of backend languages there are plenty of",
    "start": "558680",
    "end": "564640"
  },
  {
    "text": "backend languages that are not like Tak no language is taken over the whole back end it's just like people have",
    "start": "564640",
    "end": "569720"
  },
  {
    "text": "preferences on the backend World um whereas on the front end it's it's very much been like you know uh you can you",
    "start": "569720",
    "end": "574839"
  },
  {
    "text": "can use any programming language you want as long as it's a JavaScript dialect like it can be JavaScript or it",
    "start": "574839",
    "end": "579880"
  },
  {
    "text": "could be typescript or it can be coffee script all of which have the tagline it's just JavaScript or implicitly the case of JS itself um and then all the",
    "start": "579880",
    "end": "587440"
  },
  {
    "text": "other ones have have been really like kind of Niche players but if you think about it I mean like on the back end",
    "start": "587440",
    "end": "592680"
  },
  {
    "text": "it's really common to have a language that has like you know low market share but is like quite a healthy active Community with lots of people in it um",
    "start": "592680",
    "end": "599519"
  },
  {
    "text": "it's just on the front end that's like a weird thing to be and Elm being a front end Focus language um I I just never",
    "start": "599519",
    "end": "606240"
  },
  {
    "text": "guessed that I I thought it was like oh it's either going to take over or it's or it's going to Peter out I didn't expect it to become more like a backend",
    "start": "606240",
    "end": "611959"
  },
  {
    "text": "language and that it's just yeah there's a chunk of people who like like to do it this way and it's fine it's you mentioned typescript so that's the um",
    "start": "611959",
    "end": "618079"
  },
  {
    "text": "elephant in the room in some ways right so what what what what do you what would",
    "start": "618079",
    "end": "623279"
  },
  {
    "text": "you ascribe to can you see sort of any particular reasons that typescript has sort of eaten the world or there's some",
    "start": "623279",
    "end": "629959"
  },
  {
    "text": "discussion about it at the moment but you know in comparison because I mean they're both on the surface surface yeah",
    "start": "629959",
    "end": "636680"
  },
  {
    "text": "fairly similar ideas really uh Elman type script or uh or which two things",
    "start": "636680",
    "end": "642680"
  },
  {
    "text": "well so um essentially taking taking something that's going to be um imp able to be used in the in the browser but",
    "start": "642680",
    "end": "648639"
  },
  {
    "text": "offers maybe a a safer allegedly more productive uh perspective on programming",
    "start": "648639",
    "end": "653920"
  },
  {
    "text": "front end so yeah so I I think like when I think about um comparing El to JavaScript and typescript to JavaScript",
    "start": "653920",
    "end": "659360"
  },
  {
    "text": "RT and I guess also typescript to Elm um like typescript and JavaScript I mean typescript is really like this is going",
    "start": "659360",
    "end": "665040"
  },
  {
    "text": "to feel like JavaScript but with types Elm is like I am a programming language and I run in the browser it really has",
    "start": "665040",
    "end": "670399"
  },
  {
    "text": "no relation to JavaScript other than like as a compilation Target so actually you mentioned like closure earlier I",
    "start": "670399",
    "end": "675519"
  },
  {
    "text": "would like an Elm to closure except uh like even even more separated from the hosts like closure is very much like I'm",
    "start": "675519",
    "end": "681880"
  },
  {
    "text": "a programming language but I intentionally have some Java like elements inside but I don't think anyone",
    "start": "681880",
    "end": "687360"
  },
  {
    "text": "who's written closure and would WR has written Java would say like oh this is a Java dialect you know um but they do",
    "start": "687360",
    "end": "693120"
  },
  {
    "text": "like share data structures and things whereas Elm it's even less than that it's really just kind of like well we",
    "start": "693120",
    "end": "698240"
  },
  {
    "text": "use the same like string representation under the hood and stuff like that but that's that's kind of about it it's really like this feels like a totally",
    "start": "698240",
    "end": "703920"
  },
  {
    "text": "different programming language whereas typescript feels like this is a new take on JavaScript I would say um and I guess",
    "start": "703920",
    "end": "710279"
  },
  {
    "text": "that's maybe it's a good comparison I think with closure as well because if you look at something like a two different jvm languages like closure and",
    "start": "710279",
    "end": "716000"
  },
  {
    "text": "Scala say I mean most people's enry pointing to Scala was was programming Java without semicolons that was the old",
    "start": "716000",
    "end": "721839"
  },
  {
    "text": "J was thing um and whereas closure is if fundamentally different fundamentally",
    "start": "721839",
    "end": "728000"
  },
  {
    "text": "different way of approaching writing code that's a good point yeah I've talked to people in the scolar community",
    "start": "728000",
    "end": "733519"
  },
  {
    "text": "who who talk about there being sort of three different ways people do Scala so one is like Java Plus+ or Java without",
    "start": "733519",
    "end": "740160"
  },
  {
    "text": "semicolons maybe another is I want a hybrid o FP language I want a language",
    "start": "740160",
    "end": "746560"
  },
  {
    "text": "that has a lot of oo support and a lot of FP support I'm use them together and I can't get that from java so Scala is",
    "start": "746560",
    "end": "752480"
  },
  {
    "text": "the way to go and then third group is I want hll but my boss won't let me use it so I'm going to use Scala as my hasal",
    "start": "752480",
    "end": "758600"
  },
  {
    "text": "standard that's uh also a popular way of using it um but I don't I don't see the",
    "start": "758600",
    "end": "764560"
  },
  {
    "text": "same thing in closure or an Elm it's like pretty much it's like no nobody's using closure as like lisy Java uh",
    "start": "764560",
    "end": "770399"
  },
  {
    "text": "everyone's using it as like closure the same thing at Elm maybe a bit random but when Google first s of publish is the",
    "start": "770399",
    "end": "776839"
  },
  {
    "text": "wrong word but created and then started talking about D yeah the programming language um we actually had that in we",
    "start": "776839",
    "end": "782600"
  },
  {
    "text": "have a thing called the thought technology radar which we every six months we sort of take new stuff and sort of think about it and you know",
    "start": "782600",
    "end": "789120"
  },
  {
    "text": "assign it uh like an assess or trial or hold whatever and actually at the time we sort of said uh we put dart on hold",
    "start": "789120",
    "end": "796720"
  },
  {
    "text": "um on the basis that um we were super worried that you know adoption was going to be limited by the fact that other",
    "start": "796720",
    "end": "802600"
  },
  {
    "text": "branes weren't going to be able to you know weren't going to jump on board right because it was a very the VM part",
    "start": "802600",
    "end": "808279"
  },
  {
    "text": "yeah yeah yeah of course that's now come back right I mean shows what we knew like some years later we now have",
    "start": "808279",
    "end": "815320"
  },
  {
    "text": "flutter which is kind of you know very much being adopted quite quite rapidly at the moment actually um I I kind of",
    "start": "815320",
    "end": "820880"
  },
  {
    "text": "find find that kind of interesting where you've got you've got something that sort of one point in time wasn't",
    "start": "820880",
    "end": "827480"
  },
  {
    "text": "actually you know wasn't really the right time for it to for it to be uh",
    "start": "827480",
    "end": "833279"
  },
  {
    "text": "adopted but then later on it suddenly is the right time well I think I think that's that's a great story that that's",
    "start": "833279",
    "end": "839720"
  },
  {
    "text": "really one of the I mean um Dart to me fits the same category of adoption as",
    "start": "839720",
    "end": "845000"
  },
  {
    "start": "840000",
    "end": "950000"
  },
  {
    "text": "Ruby where it existed for quite a while like Ruby was just big in Japan for a while um Ruby was created to be like",
    "start": "845000",
    "end": "851320"
  },
  {
    "text": "let's make a langu I mean Matt was like I want to make a language that's fun to program that was the that was the word he used um I mean Dart as I understand",
    "start": "851320",
    "end": "857519"
  },
  {
    "text": "it was created basically because of the VM because Lars boach you know had done V8 and was frustrated by how difficult",
    "start": "857519",
    "end": "864399"
  },
  {
    "text": "it was to do certain optimizations around JavaScript and he was thinking if we just had a a different language that",
    "start": "864399",
    "end": "870120"
  },
  {
    "text": "felt a lot like JavaScript but which was different in certain very specific ways we could make a much more efficient VM",
    "start": "870120",
    "end": "876320"
  },
  {
    "text": "implementation out of it um and that was kind of the motivation behind creating Dart and you know if you think about it",
    "start": "876320",
    "end": "882720"
  },
  {
    "text": "why would people want to adopt that unless you're a VM author like it's like okay but I'm I'm over here doing my web",
    "start": "882720",
    "end": "887959"
  },
  {
    "text": "development job what's what's the pitch to me I don't I don't you know care about how easy it is to optimize the VM or how optimized it can be um I just",
    "start": "887959",
    "end": "895120"
  },
  {
    "text": "especially since you know you and your team Lars did such a good job making BM a lot FAS V8 a lot faster right yeah um",
    "start": "895120",
    "end": "903399"
  },
  {
    "text": "so uh so you know like what's in it for me to switch from JavaScript or coffee script which was big at the time to Dart",
    "start": "903399",
    "end": "910079"
  },
  {
    "text": "um but then the answer comes with flutter and again you could make the point flutter didn't have to be",
    "start": "910079",
    "end": "915199"
  },
  {
    "text": "implemented in Dart but it was same way the rails didn't have to be implemented in Ruby but it was um and that I mean if",
    "start": "915199",
    "end": "920600"
  },
  {
    "text": "you look at like what percentage of Dart usage in industry is not flutter I would",
    "start": "920600",
    "end": "925759"
  },
  {
    "text": "guess it's very small um similarly to Ruby and rails I mean it's like overwhelmingly rails it's overwhelmingly",
    "start": "925759",
    "end": "931880"
  },
  {
    "text": "flutter so this is I the term I use for this is like this is like the killer app adoption explanation is like there's",
    "start": "931880",
    "end": "937600"
  },
  {
    "text": "some application of the language that's so popular that it just brings the language's popularity along for the ride",
    "start": "937600",
    "end": "943639"
  },
  {
    "text": "because people want to use that thing and that thing is implemented in that language and they want it so bad they'll use whatever language that happens to be",
    "start": "943639",
    "end": "949319"
  },
  {
    "text": "implemented in that's actually a quite a nice um sag wve for me to go to talk want to talk a little bit about rust",
    "start": "949319",
    "end": "954880"
  },
  {
    "start": "950000",
    "end": "1100000"
  },
  {
    "text": "maybe okay cuz you mentioned about the new your new language rock that you're writing come on to that maybe sure yeah",
    "start": "954880",
    "end": "960759"
  },
  {
    "text": "but you mentioned about the fact the compil is written in written in Russ and that's another I mean I think well we",
    "start": "960759",
    "end": "966199"
  },
  {
    "text": "are starting to see in terms of thorx and our clients adoption in very specific areas yeah for rust um",
    "start": "966199",
    "end": "972920"
  },
  {
    "text": "specifically there's lots of interest for example in automotive or you know uh sort of safety critical systems and",
    "start": "972920",
    "end": "978839"
  },
  {
    "text": "these kinds of things um what made you choose rust yourself ah so uh this is a",
    "start": "978839",
    "end": "984560"
  },
  {
    "text": "little bit of I'm going to bring a little of my talk into this conversation this will be published a later yeah EXA",
    "start": "984560",
    "end": "991160"
  },
  {
    "text": "it'll be fine so uh so basically I uh really really it's really really important to me that the rock compiler",
    "start": "991160",
    "end": "997319"
  },
  {
    "text": "be very very fast um I really wanted to run as fast as possible and I I certainly did not want to get to a point",
    "start": "997319",
    "end": "1002360"
  },
  {
    "text": "where I'd built this whole compiler out um I say me because that's what I was thinking at the time now it's a bunch of",
    "start": "1002360",
    "end": "1007560"
  },
  {
    "text": "people working on and a lot of them are better at this stuff than I am but um you know I didn't want to end up with a",
    "start": "1007560",
    "end": "1013480"
  },
  {
    "text": "compiler that was very feature complete and very done and then we're like and we can't really eek any more performance",
    "start": "1013480",
    "end": "1018680"
  },
  {
    "text": "out of language' that ised what and there's just this we canned matter how manys of",
    "start": "1018680",
    "end": "1026480"
  },
  {
    "text": "performance we put into it unless we rewrite it in like a rust or a c or C++ or something and I really thought I",
    "start": "1026480",
    "end": "1032480"
  },
  {
    "text": "don't want that to happen I want this to be as fast as it can be and I don't want to hit that ceiling so um that meant one",
    "start": "1032480",
    "end": "1039319"
  },
  {
    "text": "of a couple different options one was do C or C++ which I'd had some really bad experiences with earlier in my life",
    "start": "1039319",
    "end": "1044678"
  },
  {
    "text": "around like uh getting memory unsafety related bugs that were really really",
    "start": "1044679",
    "end": "1049760"
  },
  {
    "text": "painful to track down um and I basically was like well the pitch of rust is that",
    "start": "1049760",
    "end": "1054960"
  },
  {
    "text": "you have the maximum memory ceiling but somehow and I didn't really know how at the time um somehow they do compiler",
    "start": "1054960",
    "end": "1061480"
  },
  {
    "text": "things to help you not run into those problems and so I thought well that seems like kind of the only game in town",
    "start": "1061480",
    "end": "1067160"
  },
  {
    "text": "that fits all my criteria there's no performance ceiling and uh and yet I'm not going to get these memory un safety",
    "start": "1067160",
    "end": "1072280"
  },
  {
    "text": "bugs that are a nightmare to track down so uh kind of took the plunge and um I I",
    "start": "1072280",
    "end": "1077520"
  },
  {
    "text": "done I done a little like toy thing in rust or i' built a little command line app uh that I never quite finished",
    "start": "1077520",
    "end": "1083080"
  },
  {
    "text": "before so I had a feeling for the language and I was like okay I can I can get this uh I can stumble through it and now I feel very comfortable in Rust but",
    "start": "1083080",
    "end": "1089919"
  },
  {
    "text": "when I started out it was like just because I had this list of criteria and that was the one language out right and",
    "start": "1089919",
    "end": "1096240"
  },
  {
    "text": "you got to choose as well which is the nice thing right very important yeah I I remember my colleague Eric dunberg um he",
    "start": "1096240",
    "end": "1105000"
  },
  {
    "start": "1100000",
    "end": "1230000"
  },
  {
    "text": "B basic Germany he's a head of Tech at the moment in Germany and he he did a really great talk on at one of these events on Rust um and it was back at the",
    "start": "1105000",
    "end": "1113000"
  },
  {
    "text": "time when not that many people were adopting it so it was quite early on um and you know there's a bit of an overview and why rust and again actually",
    "start": "1113000",
    "end": "1120120"
  },
  {
    "text": "why some of the other languages that have started started to appear around which you know like go and um oh God I",
    "start": "1120120",
    "end": "1126840"
  },
  {
    "text": "always forget the apple one swift is it yeah Swift uh and why they you know what what problems they were attempting to to",
    "start": "1126840",
    "end": "1133840"
  },
  {
    "text": "solve you know issues around memory safety it's something like I can't remember the exact number but some very High proportion of",
    "start": "1133840",
    "end": "1140960"
  },
  {
    "text": "bugs right so yeah I mean this this was was was around that he he did this lovely little thing at the end of it",
    "start": "1140960",
    "end": "1146919"
  },
  {
    "text": "where I think he he didn't it wasn't Conway's it wasn't game of life but it was a similar kind of um agian based",
    "start": "1146919",
    "end": "1153080"
  },
  {
    "text": "kind of um uh implementation and he he always uses that when he's learning a new language right you need you need",
    "start": "1153080",
    "end": "1159280"
  },
  {
    "text": "something you know you need some framework to understand when you're learning a new new language um and he started running it and he he running",
    "start": "1159280",
    "end": "1166000"
  },
  {
    "text": "multiple iterations of it and he was looking at the performance he was like getting really he like this this is actually a lot lot faster than the I",
    "start": "1166000",
    "end": "1171919"
  },
  {
    "text": "think it was a JavaScript implementation ridiculously you FAS orders of magnitude faster um but he thought actually I",
    "start": "1171919",
    "end": "1178760"
  },
  {
    "text": "thought it'd be better than this and he realized he hadn't turned off and I'm going to get this wrong but he hadn't",
    "start": "1178760",
    "end": "1183960"
  },
  {
    "text": "turned off the uh there's some kind of like um setting in Rust I think which",
    "start": "1183960",
    "end": "1189679"
  },
  {
    "text": "you can turn off it's like production mode versus this is an optimization flag yeah yeah yeah and he'd forgotten to use",
    "start": "1189679",
    "end": "1195760"
  },
  {
    "text": "that and then sudden it was like three orders and four orders first quite like as an idea yeah yeah that",
    "start": "1195760",
    "end": "1201760"
  },
  {
    "text": "sounds about right that flag makes a big difference that's right yeah yeah um how I mean how",
    "start": "1201760",
    "end": "1207240"
  },
  {
    "text": "did you go how okay maybe let's generalize it there's rust in particular yeah but which is spiky I'm told I've",
    "start": "1207240",
    "end": "1213480"
  },
  {
    "text": "only like read some books I've not really done any um serious attempt to learn it um but I'm I'm informed it's",
    "start": "1213480",
    "end": "1220280"
  },
  {
    "text": "quite spiky there's quite a quite a adoption curve um how do you go about",
    "start": "1220280",
    "end": "1225360"
  },
  {
    "text": "adopting or learning new languages you know enough now that you just that sort of thing well it's funny cuz you",
    "start": "1225360",
    "end": "1231280"
  },
  {
    "start": "1230000",
    "end": "1380000"
  },
  {
    "text": "mentioned like um I I know a lot of people who like to do the same like I'm going to learn a new language I'm going",
    "start": "1231280",
    "end": "1236520"
  },
  {
    "text": "to pick a project like game of life that I'm very familiar with and Implement that in the new language I'm almost the",
    "start": "1236520",
    "end": "1241840"
  },
  {
    "text": "opposite where I always need to to have some specific project in mind first",
    "start": "1241840",
    "end": "1247240"
  },
  {
    "text": "right where I'm like I want to build this in this language uh or or this whatever the new technology is um and",
    "start": "1247240",
    "end": "1252400"
  },
  {
    "text": "then that motivates me to push through whatever the learning curve is because I'm like well I I can't get it any other way so I got to do it um whereas uh so I",
    "start": "1252400",
    "end": "1259760"
  },
  {
    "text": "I guess maybe I don't tend to just seek out to learn languages just for the sake of learning them it's more like um",
    "start": "1259760",
    "end": "1266559"
  },
  {
    "text": "there's some problem I want to solve this seems like the right tool all right let's go uh so I don't think I've ever done the and obviously picking the easy",
    "start": "1266559",
    "end": "1272960"
  },
  {
    "text": "easy things right a compiler uh yeah right WR a",
    "start": "1272960",
    "end": "1278120"
  },
  {
    "text": "compiler which i' never done before either um but I I guess uh I don't know",
    "start": "1278120",
    "end": "1284039"
  },
  {
    "text": "at least for me the hard part of learning something new is is generally sort of finding the motivation to to",
    "start": "1284039",
    "end": "1290000"
  },
  {
    "text": "climb over these obstacles that I hit whatever they might be um and I also aware of uh there's definitely an",
    "start": "1290000",
    "end": "1295720"
  },
  {
    "text": "element of if you pick a project that's too hard and a language that's too hard and you know like th those can kind of",
    "start": "1295720",
    "end": "1301000"
  },
  {
    "text": "compound for sure um but I had previously done this little commandline app and rust where where actually the",
    "start": "1301000",
    "end": "1306360"
  },
  {
    "text": "motivation there was um it was the the elm test test Runner and now there actually is somebody else uh separately",
    "start": "1306360",
    "end": "1312960"
  },
  {
    "text": "went off and like and did a different um Elm test Runner implementation and rust uh but at that point it was mostly just",
    "start": "1312960",
    "end": "1319799"
  },
  {
    "text": "frustration with nodejs apis which is what the the the one I I'd written um previously was in and I one day because",
    "start": "1319799",
    "end": "1326960"
  },
  {
    "text": "not is blazingly fast uh no not it was nothing to do with performance it was really just like I was like I want to",
    "start": "1326960",
    "end": "1332240"
  },
  {
    "text": "write this in something that has a different set of apis shall we say um",
    "start": "1332240",
    "end": "1337480"
  },
  {
    "text": "and I didn't really want to use go because I didn't have any particular interest in go and I was like well I want to learn rust and I want I want to",
    "start": "1337480",
    "end": "1343200"
  },
  {
    "text": "have a code base that I can maintain that's not no. JS anymore so ah I'm just gonna rage rewrite it and rust and I got",
    "start": "1343200",
    "end": "1349039"
  },
  {
    "text": "like 70% of the way through that and I was like okay I I I have a feel for this language now and I you know feels uh not",
    "start": "1349039",
    "end": "1354840"
  },
  {
    "text": "I'm not great at it but I I I at least can stumble my way through doing things um and I have this code based then as",
    "start": "1354840",
    "end": "1361360"
  },
  {
    "text": "happens with many projects at around the 70% Mark I was sort of like okay yeah but do I really want to do the rest of the work to to get this over the Finish",
    "start": "1361360",
    "end": "1367799"
  },
  {
    "text": "Line then maintain that code base and then new contributors are not going to know what they're doing and so on and so forth so I ended up kind of putting it",
    "start": "1367799",
    "end": "1373520"
  },
  {
    "text": "on the shelf and not finishing it but somebody else separately went and did it um but uh but yeah I I uh I definitely",
    "start": "1373520",
    "end": "1380880"
  },
  {
    "start": "1380000",
    "end": "1535000"
  },
  {
    "text": "would agree with um the the the learning curve on rust is definitely a downside it's it's quite high and it's also it's",
    "start": "1380880",
    "end": "1388480"
  },
  {
    "text": "not um like some languages I think have a high learning curve because like like hll for example um hll I would say has a",
    "start": "1388480",
    "end": "1395240"
  },
  {
    "text": "high learning curve in part because a lot of the things uh are you're encountering for the the first time like",
    "start": "1395240",
    "end": "1401760"
  },
  {
    "text": "I've never heard of these Concepts before I don't know what what they're about and there's just kind of a lot of stuff to learn um in Rust I would say",
    "start": "1401760",
    "end": "1409000"
  },
  {
    "text": "the thing that's the hardest about the learning curve and people often talk about fighting the borrow Checker um so",
    "start": "1409000",
    "end": "1414400"
  },
  {
    "text": "the borrow Checker is kind of rust it's like Marquee feature it's what sets it apart from other languages what gives you the memory safety um but at the same",
    "start": "1414400",
    "end": "1421080"
  },
  {
    "text": "time uh it's not so much like you can just sit down and like once you wrap your head around the borrow Checker you",
    "start": "1421080",
    "end": "1426360"
  },
  {
    "text": "got it and it clicks um it's more like there's just a whole lot of things like that that all fall into the the umbrella",
    "start": "1426360",
    "end": "1432600"
  },
  {
    "text": "of borrow Checker with their various different scenarios and I remember one time I it took me I'm embarrassed to say",
    "start": "1432600",
    "end": "1438679"
  },
  {
    "text": "like I think it was like like two months or something where I couldn't figure out how this part of the compiler was blocked and I couldn't figure out how to",
    "start": "1438679",
    "end": "1445600"
  },
  {
    "text": "do the thing I wanted to do and you know bar Checker gave me an error said you can't do this I was like but why not I",
    "start": "1445600",
    "end": "1451080"
  },
  {
    "text": "know I know this is possible if this were in like C or something I I would just be like here take this thing and",
    "start": "1451080",
    "end": "1456400"
  },
  {
    "text": "put it over there put it on this thread and I was like no you can't do that and I was like why not why why can't I do that and I eventually realized I was",
    "start": "1456400",
    "end": "1462559"
  },
  {
    "text": "like wait a minute do I just need to use it was itter mut versus itter and what",
    "start": "1462559",
    "end": "1467880"
  },
  {
    "text": "itter the difference is um iterating over these iter is like I want to iterate through these things and iter",
    "start": "1467880",
    "end": "1472960"
  },
  {
    "text": "mud is I want to iterate with the possibility of mutating them but it didn't occured me to use it or mut because I didn't want to mutate them at",
    "start": "1472960",
    "end": "1479399"
  },
  {
    "text": "all but the problem was I needed to use it mut in order to prove to the borrow Checker that I had permission to mutate",
    "start": "1479399",
    "end": "1485240"
  },
  {
    "text": "it which meant that it was safe to put it on a thread so in this case mutable was sort of a standin for is uniquely",
    "start": "1485240",
    "end": "1491640"
  },
  {
    "text": "owned by this particular instance and I switched it to itter and it mut this thing that I'd been stuck on for like two months it was like okay right and I",
    "start": "1491640",
    "end": "1499279"
  },
  {
    "text": "would love to the room at the time um but I bring this up as an",
    "start": "1499279",
    "end": "1505520"
  },
  {
    "text": "analogy of like you know even though I had that I already knew the mental model of like you know mutable means is",
    "start": "1505520",
    "end": "1511240"
  },
  {
    "text": "uniquely owned and therefore has permission to do certain things it hadn't occurred to me that I I didn't like put two and two together with the",
    "start": "1511240",
    "end": "1517120"
  },
  {
    "text": "implications of that that like oh if I want to put these things on threads I need to it or mut even though I'm not",
    "start": "1517120",
    "end": "1522159"
  },
  {
    "text": "going to mutate um so there just a lot of stuff it's almost like you're being more restrictive than you need to in some senses right but because the mental",
    "start": "1522159",
    "end": "1528960"
  },
  {
    "text": "model is okay I need this is a really restrictive memory model so I need so I want to be overly",
    "start": "1528960",
    "end": "1534640"
  },
  {
    "text": "restrictive and and I think in this case um it was more of a a language terminology thing in the sense that I",
    "start": "1534640",
    "end": "1540960"
  },
  {
    "start": "1535000",
    "end": "1670000"
  },
  {
    "text": "think if if instead of calling it it or mut they called it you know it or unique um I'm not saying that was the they",
    "start": "1540960",
    "end": "1547640"
  },
  {
    "text": "should rename it I'm it's more just like if they called it that I think I would have more quickly realized like oh yeah",
    "start": "1547640",
    "end": "1552799"
  },
  {
    "text": "I need to in order to hand these things out to the threads they have to be unique because the whole point is I I don't want them to be shed across the",
    "start": "1552799",
    "end": "1558320"
  },
  {
    "text": "threads um that's like another aspect of rust that makes it tricky is that part of what the Bor Checker does has to do",
    "start": "1558320",
    "end": "1564039"
  },
  {
    "text": "with uh when things are like available in memory um like when they're in in the",
    "start": "1564039",
    "end": "1569320"
  },
  {
    "text": "lifetimes of like when they're alive and when they're you know can be reclaimed um also about mutation access like this",
    "start": "1569320",
    "end": "1575279"
  },
  {
    "text": "thing can or cannot mutate it also multi-threading and like which things have permission to mutate things which",
    "start": "1575279",
    "end": "1581120"
  },
  {
    "text": "has to do with like preventing data races in addition to um memory safety so there's just a lot of different things",
    "start": "1581120",
    "end": "1587039"
  },
  {
    "text": "that all kind of come together and uh and put it all together you get a big learning so so I mean you see you've",
    "start": "1587039",
    "end": "1594200"
  },
  {
    "text": "obviously you spent a lot of time building this compil clearly um because the two months um but the aim of it presumably",
    "start": "1594200",
    "end": "1601960"
  },
  {
    "text": "is to compile this new language so maybe talk a bit about about about rock unique",
    "start": "1601960",
    "end": "1607080"
  },
  {
    "text": "and why why why you decided to new language yeah so so rock the tagline is a fast friendly functional and uh I I",
    "start": "1607080",
    "end": "1614200"
  },
  {
    "text": "was just talking to Dave Thomas and he mentioned that he he knows someone who made another language I think it was was it K maybe um which the tagline was fast",
    "start": "1614200",
    "end": "1622240"
  },
  {
    "text": "fun functional which I did not know existed U but it's very very close to what I independently came up with um but",
    "start": "1622240",
    "end": "1629159"
  },
  {
    "text": "the basic idea is I I really wanted a language that um felt like Elm in terms of uh the ergonomics and the overall",
    "start": "1629159",
    "end": "1636159"
  },
  {
    "text": "user experience but which is for uh instead of being focused on browser based uis which is sort of elm's bread",
    "start": "1636159",
    "end": "1641840"
  },
  {
    "text": "and butter um I wanted if for sort of not just like one other domain but sort of like the long tail of domains so um",
    "start": "1641840",
    "end": "1648200"
  },
  {
    "text": "I'm not just thinking about like servers and command line apps although those are the two things that people are most interested in for um or or desktop goey",
    "start": "1648200",
    "end": "1655880"
  },
  {
    "text": "applications which I'm also interested in um but also things like if you can replace electron the world will be a",
    "start": "1655880",
    "end": "1661480"
  },
  {
    "text": "happier place anyway well that's I mean it's that's that's a very big challenge right it's it's not an easy thing",
    "start": "1661480",
    "end": "1667039"
  },
  {
    "text": "there's a reason electron so popular um but uh but definitely uh I I've always",
    "start": "1667039",
    "end": "1672679"
  },
  {
    "start": "1670000",
    "end": "1910000"
  },
  {
    "text": "run into these little cases where it would be and Vim script is going to be the one that comes first to mind like I want to write a Vim plugin",
    "start": "1672679",
    "end": "1678840"
  },
  {
    "text": "uh I don't want to learn Vim script I don't want to use Vim script I've heard you know it doesn't have a good reputation as a language um but what I",
    "start": "1678840",
    "end": "1685600"
  },
  {
    "text": "want to use is I want to have like an Elm like experience this this uh this really pleasant experience I'd had with Elm um but but Elm being a focused",
    "start": "1685600",
    "end": "1692320"
  },
  {
    "text": "language is not ever going to get into that there's never going to be an Elm for Vim script um so I wanted to make a",
    "start": "1692320",
    "end": "1697519"
  },
  {
    "text": "language that was capable of being used in lots of different domains while still feeling like it was to some extent",
    "start": "1697519",
    "end": "1703960"
  },
  {
    "text": "domain focused um like how Elm is um so without getting too much to how how we achieve that um there's there's this",
    "start": "1703960",
    "end": "1710960"
  },
  {
    "text": "basic highle concept of uh platforms and applications so what we mean by that and application is basically just like you",
    "start": "1710960",
    "end": "1716760"
  },
  {
    "text": "know my project I'm building a thing um yeah a platform is something like a framework uh in the sense that it's sort",
    "start": "1716760",
    "end": "1723240"
  },
  {
    "text": "of the foundation that you build on you never have more than one platform you always have one um but unlike most",
    "start": "1723240",
    "end": "1728360"
  },
  {
    "text": "languages in rock you have to pick a platform there's no such thing as like a platform lless Rock application or like a you know framework list if you will um",
    "start": "1728360",
    "end": "1735919"
  },
  {
    "text": "and the reason for that is that platforms although they kind of feel like Frameworks they're scoped",
    "start": "1735919",
    "end": "1741159"
  },
  {
    "text": "differently so a framework typically um like let's use rails for example rails will be in charge of things like",
    "start": "1741159",
    "end": "1746679"
  },
  {
    "text": "database access and how do you do routing and like request handling and and stuff like that um in rock sure that",
    "start": "1746679",
    "end": "1753080"
  },
  {
    "text": "would be true too but also uh it's going to be in charge of all of your low-level IO Primitives so it's going to say here",
    "start": "1753080",
    "end": "1759559"
  },
  {
    "text": "is all the things you can do in terms of HTTP and you know database access and this and that um and for a web server",
    "start": "1759559",
    "end": "1765559"
  },
  {
    "text": "maybe you have like the full range but you probably don't have reading from standard in on a web server does that",
    "start": "1765559",
    "end": "1770720"
  },
  {
    "text": "really make sense maybe you leave that one out um now a better example though is let's say that you want to make a platform for like a database extension",
    "start": "1770720",
    "end": "1777720"
  },
  {
    "text": "well not you're you're writing like a postgress extension do you even want to have like network access do you want to have arbitrary file system access does",
    "start": "1777720",
    "end": "1784080"
  },
  {
    "text": "that Mak sense um so the way most languages do this is like the standard library has all these really lowlevel IO",
    "start": "1784080",
    "end": "1789760"
  },
  {
    "text": "Primitives and then there's certain use cases where it's like don't don't do that don't don't don't write to that but",
    "start": "1789760",
    "end": "1795919"
  },
  {
    "text": "a problem this creates in the ecosystem for these sort of long tale of use cases is that you use a library and that",
    "start": "1795919",
    "end": "1801480"
  },
  {
    "text": "library is like oh I can just like create a tempter and put stuff in there right and it's like I don't know if I want you doing that on my database",
    "start": "1801480",
    "end": "1807240"
  },
  {
    "text": "server you know um and so the idea is that by basically making it so that you",
    "start": "1807240",
    "end": "1812760"
  },
  {
    "text": "have to pick a platform the platform says which Primitives are available you can the ecosystem will sort of naturally design itself to be accommodating to",
    "start": "1812760",
    "end": "1819640"
  },
  {
    "text": "that and to be aware of that and to be like oh if I choose to you know use a tempter or whatever um that's going to",
    "start": "1819640",
    "end": "1825480"
  },
  {
    "text": "restrict which platforms I can potentially run on if I if I from standard in that's going to restrict which platforms I can run on um another",
    "start": "1825480",
    "end": "1831360"
  },
  {
    "text": "thing is that the platforms because they're in charge of the io Primitives um they can Implement certain like sandboxing features so one example of",
    "start": "1831360",
    "end": "1838120"
  },
  {
    "text": "something that I'd be I personally hope someone builds in rock because they now can um which I would love to use is a",
    "start": "1838120",
    "end": "1843760"
  },
  {
    "text": "sort of sandbox script Runner so for example like this is something that Dino has at the language level but in rock",
    "start": "1843760",
    "end": "1850080"
  },
  {
    "text": "you can just anyone can implement it in user space which is basically like you know if I download a script from the internet and I run it I know it might",
    "start": "1850080",
    "end": "1856919"
  },
  {
    "text": "mess up my machine like give me a virus and I write to you know places on my disc that I didn't want it to write to but because in rock you have uh this",
    "start": "1856919",
    "end": "1864080"
  },
  {
    "text": "this platform application split if I have an a platform that's like I'm a command line Runner but I'm a Sandbox",
    "start": "1864080",
    "end": "1869240"
  },
  {
    "text": "command line Runner and because I'm in charge of every single one of the io Primitives I can say yeah look I give you all access to all the io Primitives",
    "start": "1869240",
    "end": "1875919"
  },
  {
    "text": "but guess what if you try to write to this part of the file system or you try to read from there I'm going to prompt the user and there's nothing you can do",
    "start": "1875919",
    "end": "1882240"
  },
  {
    "text": "about it so it's it's now as safe as a web browser in terms of you know yeah but but but command line and I would",
    "start": "1882240",
    "end": "1888600"
  },
  {
    "text": "love to have that because I run stuff that I download from the internet all the time and I'm either doing it in VM",
    "start": "1888600",
    "end": "1893720"
  },
  {
    "text": "you hear it here here first folks stuff he last well we all do right um and I",
    "start": "1893720",
    "end": "1901480"
  },
  {
    "text": "would love to have something where I just had this confidence that I don't need to audit the whole thing I just need to look what platform you're using",
    "start": "1901480",
    "end": "1906639"
  },
  {
    "text": "okay it's a Sandbox one great done I think this is a really interesting idea because I mean I've already sort of come",
    "start": "1906639",
    "end": "1912120"
  },
  {
    "start": "1910000",
    "end": "2245000"
  },
  {
    "text": "across this maybe a couple of times before but like it seems to have people aren't really talking about it and",
    "start": "1912120",
    "end": "1919200"
  },
  {
    "text": "now but 5 years ago there were lots of people talking about unic kernels for different reason this was about security",
    "start": "1919200",
    "end": "1924919"
  },
  {
    "text": "and about the kind of you know um the different uh uh you know the the the",
    "start": "1924919",
    "end": "1931480"
  },
  {
    "text": "surface the tax surface area essentially can we limit um limit the amount of stuff we compile into R RS so that it's",
    "start": "1931480",
    "end": "1938000"
  },
  {
    "text": "not available you can't even use any of it right it's just not there um and I think you know I had a had a line at one",
    "start": "1938000",
    "end": "1943399"
  },
  {
    "text": "point that Docker 30% of the way to un was 5 years ago um talking about it but it seems like in",
    "start": "1943399",
    "end": "1950320"
  },
  {
    "text": "some ways a similar idea but coming at it from a different perspective yeah yeah it's it's definitely about I mean I",
    "start": "1950320",
    "end": "1955799"
  },
  {
    "text": "think I would say the thing that you have in common there is the idea of security through just like absolutely",
    "start": "1955799",
    "end": "1961000"
  },
  {
    "text": "not making things available in the first place rather than having them be available and trying to make sure you played whacka and knocked locked",
    "start": "1961000",
    "end": "1967200"
  },
  {
    "text": "everything down right just saying like it's not even there by default and we only going to opt into giving you access",
    "start": "1967200",
    "end": "1972639"
  },
  {
    "text": "to the the the minimal set of things necessary to do whatever you need to do cool and and what sort of language is it",
    "start": "1972639",
    "end": "1978279"
  },
  {
    "text": "is it is it a purely functional language you said it's functional it's right it's functional and and I would say um like",
    "start": "1978279",
    "end": "1984320"
  },
  {
    "text": "like Elm there's a very heavy focus on usability and user friendliness and stuff like that um so uh it's it's I",
    "start": "1984320",
    "end": "1991000"
  },
  {
    "text": "mean there's different sort of schools of thought of like functional programming languages so I would say that like uh like has schol is very",
    "start": "1991000",
    "end": "1996840"
  },
  {
    "text": "focused on like mathematics or at least like it culturally feels that way um you know maybe different people would would",
    "start": "1996840",
    "end": "2003279"
  },
  {
    "text": "disagree with that but um and I would say like you know closure is is a very like you know all about lisp and like",
    "start": "2003279",
    "end": "2009200"
  },
  {
    "text": "macros and like these particular set of Primitives that are not necessarily required for functional programming but",
    "start": "2009200",
    "end": "2015000"
  },
  {
    "text": "um like fit together in interesting ways with functional programming um and like El and rock are very much like typed",
    "start": "2015000",
    "end": "2020320"
  },
  {
    "text": "pure functional very uh focused on like having a small set of simple language Primitives that work well together and",
    "start": "2020320",
    "end": "2025799"
  },
  {
    "text": "then really nice compiler error messages and ergonomics and stuff like that um so we do stuff like and and also I I would",
    "start": "2025799",
    "end": "2031760"
  },
  {
    "text": "say we're um on the tooling side we're drawing a lot of inspiration from go where we're like we have the test Runner",
    "start": "2031760",
    "end": "2036799"
  },
  {
    "text": "built in we have the format it download thein and then you",
    "start": "2036799",
    "end": "2043039"
  },
  {
    "text": "just Pi ACH of things off the sh you to um get things that everybody agrees you should have a testing system um but you",
    "start": "2043039",
    "end": "2050000"
  },
  {
    "text": "don't need to go pick one off the shelf it's like it's there it's right there built in and have you taking the same",
    "start": "2050000",
    "end": "2055599"
  },
  {
    "text": "talking of of Go I mean if you taking the same decisions around things like testing with or is it rust with rust you",
    "start": "2055599",
    "end": "2060720"
  },
  {
    "text": "test in line you have the test in the same file you can do that um yeah so we do have inline tests uh you just it's",
    "start": "2060720",
    "end": "2066200"
  },
  {
    "text": "the keyword is called expect so you can just like write your function right below it next line expect whatever and then and then you're done super um",
    "start": "2066200",
    "end": "2072520"
  },
  {
    "text": "actually I guess a nice example of ergonomics um this is always something I'd liked uh Power assert is the one",
    "start": "2072520",
    "end": "2077679"
  },
  {
    "text": "that comes to mind that I use and I also um back in the day I did a little bit of uh um development with groovy and they",
    "start": "2077679",
    "end": "2085679"
  },
  {
    "text": "had that built into their tester and I always thought it was cool is that basically uh when you run your tests in rock uh you can just write normal",
    "start": "2085679",
    "end": "2091919"
  },
  {
    "text": "booleans like you don't need to do like excert assert this or that you just say like you know expect x equal you know f",
    "start": "2091919",
    "end": "2098359"
  },
  {
    "text": "x equals 5 and that's it um and what it'll do is uh if if that test fails is it'll um show first of all it'll print",
    "start": "2098359",
    "end": "2105200"
  },
  {
    "text": "out the source code of the actual test that you wrote and then also any named variables that you had it'll just tell",
    "start": "2105200",
    "end": "2110680"
  },
  {
    "text": "you what their values were like so you don't have to go back and be like oh wait what was this just trying to give you and we've also talked about maybe",
    "start": "2110680",
    "end": "2116599"
  },
  {
    "text": "expanding that a little bit to tell you like what's on either side of the equals or if you did like a less than you know show you those things because you might",
    "start": "2116599",
    "end": "2121800"
  },
  {
    "text": "want to know basically just try to give you the info that you want anyway and don't make you go back and like you know debug log the the the test yes which",
    "start": "2121800",
    "end": "2129599"
  },
  {
    "text": "yeah that's the first thing you usually do anyway right so so might as well save you the trouble yeah yeah I was always",
    "start": "2129599",
    "end": "2135119"
  },
  {
    "text": "of the opinion when when I I don't write so as much code as I used to anymore has to be said um but I was always of the",
    "start": "2135119",
    "end": "2141400"
  },
  {
    "text": "opinion if you use the debug or you're failing somehow but it was a I come from a very sort of Pur purist tdd kind of uh",
    "start": "2141400",
    "end": "2149960"
  },
  {
    "text": "background if you like to say um well regressions still happen of course know I know yeah oh cool so I mean um so are",
    "start": "2149960",
    "end": "2157400"
  },
  {
    "text": "you seeing so is it out rock out uh it's I would say it's pre-released so we don't we we don't have a numbered",
    "start": "2157400",
    "end": "2163880"
  },
  {
    "text": "version yet you can download a nightly release um we're we're uh in the process of uh making a real website right now",
    "start": "2163880",
    "end": "2170040"
  },
  {
    "text": "depending on when you watch this maybe it'll be out but um right now like as of this exact moment there's like kind of a",
    "start": "2170040",
    "end": "2175359"
  },
  {
    "text": "placeholder website that sort of describes the language but it's it's very Bare Bones um but now we've got to",
    "start": "2175359",
    "end": "2180760"
  },
  {
    "text": "the point where it's uh it's actually useful for things so prior to this point like like last year I would say like well you can try it out and play around",
    "start": "2180760",
    "end": "2186800"
  },
  {
    "text": "with it but it's not know uh really that useful but now it actually is useful I would say it's useful but very immature",
    "start": "2186800",
    "end": "2192520"
  },
  {
    "text": "and early and definitely there's bugs and stuff like that but um but you can like build stuff with it for real now uh",
    "start": "2192520",
    "end": "2198000"
  },
  {
    "text": "and uh now that we're at that point we're like okay now we need like a real website and you know uh so it's it's",
    "start": "2198000",
    "end": "2203839"
  },
  {
    "text": "ready to be used by early adopters who aren't afraid to sort of roll up their sleeves with the new technology um but",
    "start": "2203839",
    "end": "2210680"
  },
  {
    "text": "actually like um I have a lot of f fondness for my time at the beginning of elm because on the one hand when you",
    "start": "2210680",
    "end": "2216000"
  },
  {
    "text": "have a small set of people using technology um yes there's there's sharp edges and bugs and stuff and things",
    "start": "2216000",
    "end": "2221359"
  },
  {
    "text": "aren't the ecosystem's not there yet but on the other hand um you know I I used to work with Bill veners who made a",
    "start": "2221359",
    "end": "2227599"
  },
  {
    "text": "scolar test and I remember thinking like how how could you have made something that's used by so many people and I asked him about that he's like oh that's",
    "start": "2227599",
    "end": "2233160"
  },
  {
    "text": "very easy back then there was no testing thing so I made one that's how it is in the early stages of a language",
    "start": "2233160",
    "end": "2239119"
  },
  {
    "text": "somebody's got to be the first person to write whatever X is for that particular uh you know use case my programming",
    "start": "2239119",
    "end": "2245560"
  },
  {
    "start": "2245000",
    "end": "2662000"
  },
  {
    "text": "career goes back through you know before job Java essentially um and that sort of completely changed my life right so Java",
    "start": "2245560",
    "end": "2252240"
  },
  {
    "text": "came out with and the internet essentially the worldwide web um and uh",
    "start": "2252240",
    "end": "2257560"
  },
  {
    "text": "and Java really sort of changed pretty much the way I think most many programmers went about their job yeah um",
    "start": "2257560",
    "end": "2264319"
  },
  {
    "text": "but the interesting thing with that especially in thorx is everything was a first you know everything you were doing",
    "start": "2264319",
    "end": "2270440"
  },
  {
    "text": "was a first in a lot of ways the kind of the testing Frameworks were were first The Continuous integration servers were",
    "start": "2270440",
    "end": "2276280"
  },
  {
    "text": "first the you know the the the you know well the yeah the acceptance testing Frameworks like selenium and these they",
    "start": "2276280",
    "end": "2282480"
  },
  {
    "text": "were first all these sort of things were um the innovations that were happening were because people were facing were",
    "start": "2282480",
    "end": "2288079"
  },
  {
    "text": "hitting these issues and then kind of trying to come up with a way of solving a a problem that they experienced on a",
    "start": "2288079",
    "end": "2294560"
  },
  {
    "text": "day-to-day basis and I do sort of Wonder now are we still seeing are we still seeing that or all these sort of solv",
    "start": "2294560",
    "end": "2301119"
  },
  {
    "text": "problems now it's just when we have a new thing new language say like rock we need to create the test runner for them",
    "start": "2301119",
    "end": "2308240"
  },
  {
    "text": "you know and there's someone who's going to be the first person to do that there's someone who's going to be the first person to do X rather than it",
    "start": "2308240",
    "end": "2313520"
  },
  {
    "text": "being or another example would be things like machine learning you know applying engineering discipline to machine",
    "start": "2313520",
    "end": "2319400"
  },
  {
    "text": "learning so you know there was there was a period not so long ago where the idea that you might Version Control your",
    "start": "2319400",
    "end": "2325520"
  },
  {
    "text": "model was like a crazy idea why would you why would you think about but that's now a kind of normal thing so things are",
    "start": "2325520",
    "end": "2330640"
  },
  {
    "text": "repeatable and so on um is this a case of sort of we're applying I guess a set of tested known",
    "start": "2330640",
    "end": "2338200"
  },
  {
    "text": "patterns to to the new things is that a kind of I I I'd say it's a mix um so an",
    "start": "2338200",
    "end": "2343240"
  },
  {
    "text": "example that comes to mind is uh so in rock we we have uh as far as I know unique I don't know of any other",
    "start": "2343240",
    "end": "2348920"
  },
  {
    "text": "language that does it this way approach to uh serialization and deserialization so uh two different ways that this is",
    "start": "2348920",
    "end": "2355160"
  },
  {
    "text": "like commonly done today so there's like the JavaScript way the Ruby way where you you get some Json in and you just",
    "start": "2355160",
    "end": "2360839"
  },
  {
    "text": "say like json.parse it's like cool now you have a JavaScript object of course the downside of this is uh you know you",
    "start": "2360839",
    "end": "2366200"
  },
  {
    "text": "get partway through your jaas yeah and then like well you know what if the Json doesn't match what you",
    "start": "2366200",
    "end": "2371640"
  },
  {
    "text": "thought it was going to match um you're going to find out about that eventually but it might be pretty distant from where that original problem happened um",
    "start": "2371640",
    "end": "2378200"
  },
  {
    "text": "so that's one way of doing things another way of doing things is uh let's I'm thinking of Russ but I mean I know",
    "start": "2378200",
    "end": "2383760"
  },
  {
    "text": "in Java you can do it the same way where you basically have a schema up front and you say so this would be like Jackson",
    "start": "2383760",
    "end": "2388800"
  },
  {
    "text": "Java um so you say here's exactly what I expect it to look like and uh and you",
    "start": "2388800",
    "end": "2393880"
  },
  {
    "text": "know come in parse the Json and if it doesn't match that fail right away right there um so that in terms of uh you know",
    "start": "2393880",
    "end": "2400359"
  },
  {
    "text": "how easy it is to debug later I would say that's easier to debug later um but a downside of that is that you do need",
    "start": "2400359",
    "end": "2405680"
  },
  {
    "text": "to actually write out the whole schema and you know sort of keep it in sync with your program and so forth um so something we've introduced in rock that",
    "start": "2405680",
    "end": "2411839"
  },
  {
    "text": "I as far as I know is novel um is that we kind of have uh both so you can write",
    "start": "2411839",
    "end": "2416880"
  },
  {
    "text": "um at the same time so you write the equivalent of like json.parse um and uh and it does just you know you don't have",
    "start": "2416880",
    "end": "2423040"
  },
  {
    "text": "to write a schema but what it does is it uses type inference to infer the type that you're parsing into and based on",
    "start": "2423040",
    "end": "2428839"
  },
  {
    "text": "how it's used in the rest of the program and so it actually will decode it right there at the call site and if it doesn't match how you're going to be using it",
    "start": "2428839",
    "end": "2434800"
  },
  {
    "text": "throughout the rest the program it fails right away that's super interesting yeah now what's interesting about that is",
    "start": "2434800",
    "end": "2440520"
  },
  {
    "text": "that that's not specific to Json it's uh it's something that's just like we call it you know decoding is is the general",
    "start": "2440520",
    "end": "2446480"
  },
  {
    "text": "term for it um so in order to make it work for let's say Json somebody needs to write a particular like Json aware",
    "start": "2446480",
    "end": "2453800"
  },
  {
    "text": "parer that works with this framework so that uh it can you know translate between Json and rock values um so on",
    "start": "2453800",
    "end": "2461720"
  },
  {
    "text": "the one hand you could look at that and say well this is just somebody needs to write a Json parser for rock but on the other hand structurally it's different",
    "start": "2461720",
    "end": "2467520"
  },
  {
    "text": "from how it's done in other languages it's not like you're just transla into like a normal um Lal dos or something like that I've",
    "start": "2467520",
    "end": "2475040"
  },
  {
    "text": "heard of this yeah and now I believe that that works like it works in Java and uh and like Elm and rust where where",
    "start": "2475040",
    "end": "2481800"
  },
  {
    "text": "you you do make a schema and you know somehow you define in code like you write some code that you know does this",
    "start": "2481800",
    "end": "2487440"
  },
  {
    "text": "um I I assume I don't know for sure but I assume that uh you either write it by hand or there's like a you run a some",
    "start": "2487440",
    "end": "2494599"
  },
  {
    "text": "some code that generates it or something like that um but as far as I know in typescript it's either you do that or else um you just say json. Parson you",
    "start": "2494599",
    "end": "2502400"
  },
  {
    "text": "know it's that part's just not type checked yeah right um but uh yeah but the point being like you know if if",
    "start": "2502400",
    "end": "2508119"
  },
  {
    "text": "you're writing this it's like you're doing it in a different way than has been done before uh but on the other hand it is still just you know for Json",
    "start": "2508119",
    "end": "2514520"
  },
  {
    "text": "for XML for CSV whatever um it's it's good we're talking about functional programming languages and we finally got",
    "start": "2514520",
    "end": "2520839"
  },
  {
    "text": "to the point where something's a bit monad likee which is good right because that",
    "start": "2520839",
    "end": "2526079"
  },
  {
    "text": "is interesting right like that's why I found it interesting about typescript and um you passing stuff over the wire",
    "start": "2526079",
    "end": "2531359"
  },
  {
    "text": "uh and you've got all this you've got this lovely sort of type safety within the environment you're working in which is the the the front end but as you say",
    "start": "2531359",
    "end": "2538240"
  },
  {
    "text": "like you could be that could be sent garbage that is essentially you've got no way of knowing until you try and",
    "start": "2538240",
    "end": "2544720"
  },
  {
    "text": "pause it decode it whatever so I kind the idea that actually there's there's there's maybe an attempt to solve some",
    "start": "2544720",
    "end": "2550800"
  },
  {
    "text": "of those problems we actually being type type safe across the entire uh I guess back front end Etc yeah and across the",
    "start": "2550800",
    "end": "2558160"
  },
  {
    "text": "wire and one one thing I do I I did a lot of integration lot of",
    "start": "2558160",
    "end": "2563880"
  },
  {
    "text": "of lot of XML ping in my day um yeah we used to use XML um we used what's it",
    "start": "2563880",
    "end": "2569839"
  },
  {
    "text": "called xath that was the thing where you rather than rather than do the kind of like take the schema basically have a B",
    "start": "2569839",
    "end": "2576640"
  },
  {
    "text": "have a client that's generated from the schema and you you kind of you know when you receive uh a message you you turn",
    "start": "2576640",
    "end": "2584160"
  },
  {
    "text": "that into the object if if it doesn't match SCH you blow up You' say instead of that You' use x paath to just pick out and schematron was with the thing",
    "start": "2584160",
    "end": "2590760"
  },
  {
    "text": "you pick out just the bits from the message that you wanted and then therefore you would know you were",
    "start": "2590760",
    "end": "2596480"
  },
  {
    "text": "insulated from changes to the schema if you like so um you know if someone change the scheme which suddenly going",
    "start": "2596480",
    "end": "2602599"
  },
  {
    "text": "to blow up because this is the main problem right I mean how do you avoid that that issue of ESS just falling over",
    "start": "2602599",
    "end": "2607800"
  },
  {
    "text": "in a heap if the thing that turns up isn't what you're expecting so if he doesn't conform to yeah so if you can't",
    "start": "2607800",
    "end": "2614559"
  },
  {
    "text": "decode it right you just blow up and just like sorry we're done that's that's well the default is I mean it's not like a throwing exception it's just like you",
    "start": "2614559",
    "end": "2621240"
  },
  {
    "text": "you get back a value that says either it's succeeded and here's your answer or uh it failed and then here's you know",
    "start": "2621240",
    "end": "2626599"
  },
  {
    "text": "the error that that it failed with such as like you know this field was missing or something like that so uh recovery is sort of up to you as the application",
    "start": "2626599",
    "end": "2632640"
  },
  {
    "text": "auth it's not you know um I don't think there's a one- siiz fits-all way to recover from that",
    "start": "2632640",
    "end": "2637680"
  },
  {
    "text": "from data being missing um it's it's the bill time versus it's the compile time versus um versus runtime check of these",
    "start": "2637680",
    "end": "2644319"
  },
  {
    "text": "things right so that's what we used to do we used to do it at build time so we'll we we'll generate a library based off a schema and then that library is",
    "start": "2644319",
    "end": "2651280"
  },
  {
    "text": "going to be quite fragile in the face of changes elsewhere um if you like and you'd have to rebuild recompile",
    "start": "2651280",
    "end": "2656920"
  },
  {
    "text": "recompile your your application if someone schema changed somewhere like suck yeah now having said that if you",
    "start": "2656920",
    "end": "2662880"
  },
  {
    "start": "2662000",
    "end": "2763000"
  },
  {
    "text": "want to write something that is more flexible at runtime like you can say well it's okay if this feel is is missing I I want to default to this or",
    "start": "2662880",
    "end": "2669680"
  },
  {
    "text": "that you can do that but then at that point you need to at least in Rock's case you would need to sort of um use",
    "start": "2669680",
    "end": "2675480"
  },
  {
    "text": "the term eject like eject you know like translate the automatic thing that's happening into um uh like an actual like",
    "start": "2675480",
    "end": "2682160"
  },
  {
    "text": "written out schema like a decoder that you can then customize so this is how we do it in uh in Elm is like it's always",
    "start": "2682160",
    "end": "2687400"
  },
  {
    "text": "done that way which makes it very easy to customize um another nice thing about that is uh if you have it all written",
    "start": "2687400",
    "end": "2692839"
  },
  {
    "text": "out that it means that uh if you want to change your variable names or something like like that you can do that without",
    "start": "2692839",
    "end": "2698319"
  },
  {
    "text": "worrying that you're accidentally causing a regression in in the decoding which you know hopefully a test catches",
    "start": "2698319",
    "end": "2703640"
  },
  {
    "text": "but it might not um yeah but then again there's another trade-off there which is that uh when you have it all written out",
    "start": "2703640",
    "end": "2709839"
  },
  {
    "text": "it becomes a little bit more brittle to uh internal changes like so if I need to like you know add a field somewhere to",
    "start": "2709839",
    "end": "2716440"
  },
  {
    "text": "um that's that happens to be in a data structure that's used quite often throughout this thing I have to go through and change it in a bunch of",
    "start": "2716440",
    "end": "2721960"
  },
  {
    "text": "different places um and uh so so certain things like being synchronized either",
    "start": "2721960",
    "end": "2727280"
  },
  {
    "text": "can be a source of bugs or can be a source of convenience and it's just an innate tradeoff um but yeah if you do",
    "start": "2727280",
    "end": "2733359"
  },
  {
    "text": "sort of eject the decoder and and have it all written out then uh then you can be a lot more flexible in terms of if",
    "start": "2733359",
    "end": "2739480"
  },
  {
    "text": "the runtime value is this or that or this is missing but that's not or you know I can say well I'll accept any of",
    "start": "2739480",
    "end": "2744640"
  },
  {
    "text": "these three names here and I'll just internally convert them to the same thing um so a lot more flexibility if",
    "start": "2744640",
    "end": "2749720"
  },
  {
    "text": "you go that route I feel like uh we've gone quite deep into some random part of the language which is like passing",
    "start": "2749720",
    "end": "2755800"
  },
  {
    "text": "passing responses from um but let's maybe chunk it up a bit so what are you excited about in terms of features for",
    "start": "2755800",
    "end": "2760960"
  },
  {
    "text": "rock for rock yeah um yeah great question so uh I mean that is to be fair one one of the things I'm excited about",
    "start": "2760960",
    "end": "2767079"
  },
  {
    "start": "2763000",
    "end": "3234000"
  },
  {
    "text": "um so in general like uh it's it's 100% type inference so you can you know uh you don't need to write any type",
    "start": "2767079",
    "end": "2772520"
  },
  {
    "text": "annotations if you don't want to um I mentioned that like you know it's fast friendly functional so in terms of fast",
    "start": "2772520",
    "end": "2778240"
  },
  {
    "text": "the thing that I'm excited about uh there's two parts to that one is really fast compile time so we spent a lot of time doing that we still have a number",
    "start": "2778240",
    "end": "2784440"
  },
  {
    "text": "of projects to go but um I uh one of the things that I mean you mentioned like tddd earlier one of one of my hypotheses",
    "start": "2784440",
    "end": "2791640"
  },
  {
    "text": "for why there's a really strong testing culture in Ruby like for example um and and I I think in Python also um more so",
    "start": "2791640",
    "end": "2799680"
  },
  {
    "text": "than I've seen in like type checked languages uh I think part of the reason for that is that um you get a really",
    "start": "2799680",
    "end": "2805880"
  },
  {
    "text": "fast feedback loop when you have a dynamic language for two reasons one is that there's no compile step so we want to just make our compilers so fast that",
    "start": "2805880",
    "end": "2811720"
  },
  {
    "text": "you don't notice it um but the other part of that is that from a workflows perspective if I am a test in Ruby uh or",
    "start": "2811720",
    "end": "2819680"
  },
  {
    "text": "let's say I've got a bunch of tests and I'm I'm I'm refactoring something all my tests go red because you know I've changed this thing okay fine well I can",
    "start": "2819680",
    "end": "2826079"
  },
  {
    "text": "go and fix them one at a time I can go like change my implementation and fix whatever and and they go green one at a time now in a type check language the",
    "start": "2826079",
    "end": "2833599"
  },
  {
    "text": "norm today is that I make my changes and I get a bunch of type errors and all my tests are not runnable anymore until I",
    "start": "2833599",
    "end": "2839760"
  },
  {
    "text": "fix every single one of the type errors um so the whole like make the test green one at a time by fixing implementation",
    "start": "2839760",
    "end": "2844920"
  },
  {
    "text": "details that workflow is inaccessible until you fixed every single one of the type err but quite often I don't want to",
    "start": "2844920",
    "end": "2850960"
  },
  {
    "text": "do that I want to go through and like you know change the behavior one at a time and make sure that the new Behavior actually passes all the tests and then",
    "start": "2850960",
    "end": "2857280"
  },
  {
    "text": "maybe there's still some leftover type eras because I changed the interface but those are just going through and updating you know callers to to do the",
    "start": "2857280",
    "end": "2863280"
  },
  {
    "text": "new thing um in isolation I still want to just do this thing or let's say I'm",
    "start": "2863280",
    "end": "2868359"
  },
  {
    "text": "uh trying something out because I I think the new implementation will have better performance or I'm trying something out and I just want to see how",
    "start": "2868359",
    "end": "2874559"
  },
  {
    "text": "it feels to use it again I don't want to have to go and fix every single implication of that so this gets me to",
    "start": "2874559",
    "end": "2880079"
  },
  {
    "text": "another thing that I'm excited about is that we've designed the compiler it doesn't 100% work this way yet but we've at least designed it and uh you know",
    "start": "2880079",
    "end": "2886480"
  },
  {
    "text": "will get to a point where where this does work this way where basically the compiler always type checks your code",
    "start": "2886480",
    "end": "2892559"
  },
  {
    "text": "and always tells you about problems but they don't block you so you can still run even if it's got type errors or naming errors or whatever so the idea is",
    "start": "2892559",
    "end": "2899319"
  },
  {
    "text": "that much like a dynamic language you still have those workflows available so I want to get that same experience this",
    "start": "2899319",
    "end": "2904880"
  },
  {
    "text": "is always something I missed when going from Dynamic to to sa type languages is that workflow of like I can always run",
    "start": "2904880",
    "end": "2910359"
  },
  {
    "text": "my tests no matter what's going on and I can see which ones fail and you know if they have a tipe mismatch fine that's a failure failed test and but only if that",
    "start": "2910359",
    "end": "2917680"
  },
  {
    "text": "affects that test if if the tip mismatch is some distant part of the code base I don't want to see that I don't don't don't block me just let me let me run",
    "start": "2917680",
    "end": "2923400"
  },
  {
    "text": "these tests and I'll come back to that later um so that requires sort of building the whole compiler with that in",
    "start": "2923400",
    "end": "2928800"
  },
  {
    "text": "mind um and it's when I say it's not ready yet it's cuz like there's stuff that's like has bugs that we need to fix",
    "start": "2928800",
    "end": "2934440"
  },
  {
    "text": "but um but really I'm really excited to use that like when I get to a bigger rockes sound like a really interesting",
    "start": "2934440",
    "end": "2939839"
  },
  {
    "text": "feature really cool feature yeah yeah cuz I I I I like both I like having the workflow where I you know tell me about",
    "start": "2939839",
    "end": "2945200"
  },
  {
    "text": "the type errors up front and I also like the workflow where I you know sometimes I I just want to run the thing see what",
    "start": "2945200",
    "end": "2950520"
  },
  {
    "text": "the answers are yeah well I mean this I mean it it's become quite common or",
    "start": "2950520",
    "end": "2956000"
  },
  {
    "text": "certainly I quite like using you know kind of B basically monitoring the file system for changes and running your",
    "start": "2956000",
    "end": "2961119"
  },
  {
    "text": "tests every time there's a file system change which kind of blows that completely out of the water right if you if if if suddenly a type ER is going to",
    "start": "2961119",
    "end": "2968160"
  },
  {
    "text": "St everything's going right cuz I just yeah zero successes 100% failure yeah thanks no that's that's that's actually",
    "start": "2968160",
    "end": "2974960"
  },
  {
    "text": "pretty cool yeah so one one more that um this is in the design stage but it's again something that we've designed the language around and the platforms and",
    "start": "2974960",
    "end": "2981040"
  },
  {
    "text": "applications and and also the fast runtime performance is a big part of this but something that I really want to exist in the world and we're we're going",
    "start": "2981040",
    "end": "2987119"
  },
  {
    "text": "to make it happen um is so package ecosystems I think are one of the after",
    "start": "2987119",
    "end": "2992280"
  },
  {
    "text": "like garbage collection have been like one of the biggest like levers for for making programming like a lot easier and",
    "start": "2992280",
    "end": "2998559"
  },
  {
    "text": "and making people more productive um and when you get a package like I install a new package I always get uh the code and",
    "start": "2998559",
    "end": "3005400"
  },
  {
    "text": "I get the uh documentation um and then sometimes occasionally there might be if",
    "start": "3005400",
    "end": "3010720"
  },
  {
    "text": "it's like a really popular widely used package I might get separately from all that some editor tooling for my",
    "start": "3010720",
    "end": "3016319"
  },
  {
    "text": "particular editor so you get like a I think like the react Community has done some cool stuff with this so like I remember like the Redux Dev tools and",
    "start": "3016319",
    "end": "3023119"
  },
  {
    "text": "know Redux is not like falling out of favor but I do remember like oh people built tooling for that and like but it",
    "start": "3023119",
    "end": "3028200"
  },
  {
    "text": "didn't run in people's editors it ran in the browser and I think that was like kind of a hint of like hey our packages",
    "start": "3028200",
    "end": "3034000"
  },
  {
    "text": "and stuff we could be a lot more productive with them if we had tooling for them but in a lot of cases people don't integrate them into editors",
    "start": "3034000",
    "end": "3039960"
  },
  {
    "text": "because it's like well what I'm going to write you like vs code and this person likes intellig and this person likes emac and this person likes Vim I'm not",
    "start": "3039960",
    "end": "3045760"
  },
  {
    "text": "going to write you know 10 different implementations of this um and so what ends up happening is that you get zero",
    "start": "3045760",
    "end": "3051040"
  },
  {
    "text": "implementations people just don't bother doing it at all so what we want to do is we want to solve this at like the language level and my my specific",
    "start": "3051040",
    "end": "3057280"
  },
  {
    "text": "concrete goal is to make it as easy to write editor tooling as it is to write a function in rock like you can just write",
    "start": "3057280",
    "end": "3063599"
  },
  {
    "text": "a function and press enter go down a line and write like a piece of editor tooling right there and that gets",
    "start": "3063599",
    "end": "3068640"
  },
  {
    "text": "distributed with packages so it's just part of the language and when someone implements like the vs code you know",
    "start": "3068640",
    "end": "3074960"
  },
  {
    "text": "rock extension um part of what they do is they Implement a way to handle these",
    "start": "3074960",
    "end": "3080440"
  },
  {
    "text": "things because we have sort of a um it has to be kind of a simple vocabulary for this I I realize that of course we",
    "start": "3080440",
    "end": "3086200"
  },
  {
    "text": "want to be accessible and if you if you're thinking with accessibility in mind you already have to have the language for describing these tools be",
    "start": "3086200",
    "end": "3092520"
  },
  {
    "text": "pretty General so that it can either be rended on the screen or render for a screen read or something like that and at that point you can sort of adapt that",
    "start": "3092520",
    "end": "3099400"
  },
  {
    "text": "to whatever Primitives like dim has different Primitives and vs code which has different par than intell J but if you're describing the functionality that",
    "start": "3099400",
    "end": "3105839"
  },
  {
    "text": "you want at a sufficiently high level the hope is that I can you know we talked earlier about like um uh",
    "start": "3105839",
    "end": "3111599"
  },
  {
    "text": "exporting Json right or ejecting it right I would love for the Json package that I installed just to add like",
    "start": "3111599",
    "end": "3117280"
  },
  {
    "text": "something to my context menu where I can just say hey see this like you know type inference based Json decoder I want to",
    "start": "3117280",
    "end": "3122839"
  },
  {
    "text": "just right click on that and say extract explicit decoder it's like here it is right and then that works in vim and it",
    "start": "3122839",
    "end": "3128960"
  },
  {
    "text": "works in emac it works in this and it's like nobody needed to write a a a separate plugin for each of those it's",
    "start": "3128960",
    "end": "3134880"
  },
  {
    "text": "just the rock extension means that when the author of that Json package shipped they included that little bit of",
    "start": "3134880",
    "end": "3140280"
  },
  {
    "text": "functionality and now everybody gets that and if they want to do the customized version they can do that it's totally trivial um that's EX of the type",
    "start": "3140280",
    "end": "3146920"
  },
  {
    "text": "of thing that I think could make the rock ecosystem just do unprecedented things where you have this like",
    "start": "3146920",
    "end": "3152920"
  },
  {
    "text": "everybody can not only ship the code but also these this tooling that's like a a force multiplier for everybody else and",
    "start": "3152920",
    "end": "3158480"
  },
  {
    "text": "then everybody's a multiplier for everybody else that can be a compounding effect that I think would be really powerful and that's one of the things",
    "start": "3158480",
    "end": "3164920"
  },
  {
    "text": "I'm most excited about with the language I can go on but that's very cool it reminds me I think there's something",
    "start": "3164920",
    "end": "3170200"
  },
  {
    "text": "called the principle of least surprise right the reason I love certain tooling over other tooling is because it just",
    "start": "3170200",
    "end": "3176000"
  },
  {
    "text": "lets me I can almost guess like how how to achieve a particular thing I need to",
    "start": "3176000",
    "end": "3182440"
  },
  {
    "text": "extract a method I wonder if I do that oh cool it works you I like and it's sort of like um tooling that's designed",
    "start": "3182440",
    "end": "3188359"
  },
  {
    "text": "that way I think is incredibly powerful because it it just as you say it act as a force multiplier so the idea of",
    "start": "3188359",
    "end": "3193960"
  },
  {
    "text": "building that actually into the language to it I think that's super interesting yeah yeah um maybe we should CH chunk up",
    "start": "3193960",
    "end": "3200200"
  },
  {
    "text": "again um what else are you excited about that's going on uh in rocker or",
    "start": "3200200",
    "end": "3205599"
  },
  {
    "text": "elsewhere elere just in general maybe maybe one or two things I'm very excited right now about uh learning more about",
    "start": "3205599",
    "end": "3213079"
  },
  {
    "text": "performance optimization on a personal level so this was something where like when I was in uh as you would say University in Americans we always say",
    "start": "3213079",
    "end": "3219400"
  },
  {
    "text": "college for some reason even though it says University in the title whatever so bizarrely I was actually in a college",
    "start": "3219400",
    "end": "3224640"
  },
  {
    "text": "but it was a university so it's who knows uh I don't even know what the formal difference is to be honest we use",
    "start": "3224640",
    "end": "3231760"
  },
  {
    "text": "kind of interchangeably but um I when I learned about performance optimization there there was a very heavy focus on ASM",
    "start": "3231760",
    "end": "3238799"
  },
  {
    "text": "totic complexity and like you know as n gets bigger the number of elements get bigger what is the you know what is the",
    "start": "3238799",
    "end": "3244119"
  },
  {
    "text": "behavior look like um and uh the sort of the stated reason was for for doing all",
    "start": "3244119",
    "end": "3249520"
  },
  {
    "text": "that was um well uh this is some knowledge you can have that uh translates across Hardware because you",
    "start": "3249520",
    "end": "3255319"
  },
  {
    "text": "know different CPUs have different optimizations and y y and that was sort of handwaved away and the more that I've",
    "start": "3255319",
    "end": "3261079"
  },
  {
    "text": "gotten into because like I said I'm trying to make rocks compiler really fast um the more that I've learned about",
    "start": "3261079",
    "end": "3266440"
  },
  {
    "text": "okay but but actually you want to make it run fast on you know particular Hardware like you know the modern Apple",
    "start": "3266440",
    "end": "3272520"
  },
  {
    "text": "laptops or or you know Intel servers or whatever um it there's a particular set",
    "start": "3272520",
    "end": "3277960"
  },
  {
    "text": "of like techniques that you use that do need to know about the hardware and there's like uh as as I have more and",
    "start": "3277960",
    "end": "3284119"
  },
  {
    "text": "more come to learn like the stuff that we learned about the asmic complexity is really just the tip of the iceberg and if you really want to get stuff going",
    "start": "3284119",
    "end": "3290000"
  },
  {
    "text": "fast it's like now I'm learning about like you know CPU memory caches and tlbs and uh like you know virtual memory and",
    "start": "3290000",
    "end": "3297559"
  },
  {
    "text": "paging and simd and um there's there's this great talk by Andrew Kelly who made",
    "start": "3297559",
    "end": "3303240"
  },
  {
    "text": "Zig um a couple years ago uh where he talks it was at handmade Seattle foret what what year like 2021 maybe something",
    "start": "3303240",
    "end": "3309839"
  },
  {
    "text": "like that maybe maybe was pre- pandemic might have been 2019 um but he basically talks about how he made zig's compiler a",
    "start": "3309839",
    "end": "3315880"
  },
  {
    "text": "lot faster and he's not talking about any of that like asmic complexity stuff he's talking about like you know here's",
    "start": "3315880",
    "end": "3321240"
  },
  {
    "text": "here's the memory management techniques that strategies that we used and data oriented design and structure of arrays",
    "start": "3321240",
    "end": "3326359"
  },
  {
    "text": "and like we're trying to avoid CPU cash misses that's the name of the game and all these things um it's this whole",
    "start": "3326359",
    "end": "3331960"
  },
  {
    "text": "world that I had a I didn't realize how superficial my understanding of it was and it's been really exciting to like",
    "start": "3331960",
    "end": "3337480"
  },
  {
    "text": "get into it and be like wow I can make things so much faster than I realized this I mean are you familiar with Martin Thompson's work on this he talks about",
    "start": "3337480",
    "end": "3343920"
  },
  {
    "text": "the idea of mechanical sympathy has for many years I heard that ter yeah mechan mechanical sympathy which is this idea",
    "start": "3343920",
    "end": "3349319"
  },
  {
    "text": "of being sympathetic to the to the to the hardware right um but it's what I find fascinating is because we moved",
    "start": "3349319",
    "end": "3355039"
  },
  {
    "text": "away there were of there were so many levels of abstraction between the code that you're writing and the hardware",
    "start": "3355039",
    "end": "3360920"
  },
  {
    "text": "that's running on these days um that actually that's sort of I want to say fall out of fashion but people I'm not I",
    "start": "3360920",
    "end": "3367720"
  },
  {
    "text": "don't think people think enough about it certainly but of course way you want to think about it is in the compiler right",
    "start": "3367720",
    "end": "3373799"
  },
  {
    "text": "you don't want to be second guessing that I mean the way I think about it is I uh something that's been pretty consistent in my career for the last",
    "start": "3373799",
    "end": "3379039"
  },
  {
    "text": "like I don't know 10 20 years has has been like trying to work backwards from the user experience I want and for some",
    "start": "3379039",
    "end": "3385720"
  },
  {
    "text": "applications the performance is not a big concern there it's just like well you're going to be bottlenecked on the database and",
    "start": "3385720",
    "end": "3391119"
  },
  {
    "text": "the database is going to be about as fast as the indices you set up for it and that's kind of it um I guess if you wanted to I mean now I know enough that",
    "start": "3391119",
    "end": "3397359"
  },
  {
    "text": "I'm like okay if you really wanted to you could roll your own database alternative that's highly optimized for your specific use case but in a lot of",
    "start": "3397359",
    "end": "3403039"
  },
  {
    "text": "cases it's like yeah but people don't people don't care about that performance difference they're like you know it's they're going to be waiting for the",
    "start": "3403039",
    "end": "3408480"
  },
  {
    "text": "network anyway so you're never going to get sub millisecond you know I probably wouldn't pass the japson test anyway",
    "start": "3408480",
    "end": "3414640"
  },
  {
    "text": "so no chance yeah um yeah your handrolled database",
    "start": "3414640",
    "end": "3420640"
  },
  {
    "text": "probably um but um but there's a lot of uh use cases that I can think of where I",
    "start": "3420640",
    "end": "3426359"
  },
  {
    "text": "really do want like performance is part of ux it's and it's a big part and uh and a compiler is absolutely one of them",
    "start": "3426359",
    "end": "3431960"
  },
  {
    "text": "where um I mean I like rust in a lot of ways I'm I'm very frustrated by the compile times a lot of the time um",
    "start": "3431960",
    "end": "3438440"
  },
  {
    "text": "especially the caching like one of one I there's part of it is like how fast is the compiler but also like which work is",
    "start": "3438440",
    "end": "3443799"
  },
  {
    "text": "it doing and I and some on some level wish almost wish they didn't tell me this but sometimes I'll be rebuilding my",
    "start": "3443799",
    "end": "3450079"
  },
  {
    "text": "project and I I just made one little change and it's like hey I'm recompiling your like you know Json crate and I'm",
    "start": "3450079",
    "end": "3455160"
  },
  {
    "text": "like what I didn't do anything what why are you rebuilding that it's nothing has changed and I'm sure there's some",
    "start": "3455160",
    "end": "3460799"
  },
  {
    "text": "someone could explain to me why it needed to do that um but there's a now that I have more of an appreciation for",
    "start": "3460799",
    "end": "3467359"
  },
  {
    "text": "like oh it doesn't have to be this slow I don't have to be sitting here waiting for this it's all the more frustrating when the tools I use you know whether",
    "start": "3467359",
    "end": "3472960"
  },
  {
    "text": "they're compilers or otherwise um are slow and I know they could be they don't have to be I think there's another I",
    "start": "3472960",
    "end": "3478400"
  },
  {
    "text": "mean I think uh there's another reason I think quite serious reason actually these days to think about mechanical sympathy as well as usually user",
    "start": "3478400",
    "end": "3484440"
  },
  {
    "text": "experience is a fantastic example but I think actually the amount of energy we're using is a super super important",
    "start": "3484440",
    "end": "3490400"
  },
  {
    "text": "um consideration now if we can be more sympathetic to the hardware we're running on then potentially we need less of it right and that's that's that that",
    "start": "3490400",
    "end": "3497240"
  },
  {
    "text": "can only be good I think the state of state of the world at the moment so I I'm I'm curious about how people measure",
    "start": "3497240",
    "end": "3503000"
  },
  {
    "text": "that because um uh so we one of the Rock server projects that's in progress right now um we got a research Grant to do it",
    "start": "3503000",
    "end": "3510520"
  },
  {
    "text": "this we don't probably don't have time to go into the reasons why it's novel and interesting but that does like interesting memory management behind the",
    "start": "3510520",
    "end": "3516920"
  },
  {
    "text": "scenes um and uh and basically so it never has like garbage collection pauses or or things like that um and there was",
    "start": "3516920",
    "end": "3524000"
  },
  {
    "text": "a researcher who was uh not directly related to the project but who became interested in it because of the question",
    "start": "3524000",
    "end": "3530280"
  },
  {
    "text": "of could this mean that you have servers that use less energy because you know garbage collector in addition to slowing down your ux o requires energy to use",
    "start": "3530280",
    "end": "3537880"
  },
  {
    "text": "and that L then led to the question was how do we measure what what the difference energy is and I I guess that",
    "start": "3537880",
    "end": "3542960"
  },
  {
    "text": "researcher knows more than I do about that um but it's something i' never even thought about is like yeah like put a number on it what number do you put on",
    "start": "3542960",
    "end": "3548520"
  },
  {
    "text": "it how do you measure that number I have no idea yeah um yeah yeah I mean it's it's it's it's it's certainly something",
    "start": "3548520",
    "end": "3554240"
  },
  {
    "text": "we've been looking at in Thor because it sort of um there's some interesting design decisions around things like even",
    "start": "3554240",
    "end": "3560559"
  },
  {
    "text": "like how often you build right so you know we used to you know well hey we'll commit and build and deploy thousand",
    "start": "3560559",
    "end": "3565760"
  },
  {
    "text": "times day yeah well that's actually like pushing like that's that's actually pushing your carry through quite quite a",
    "start": "3565760",
    "end": "3571799"
  },
  {
    "text": "few potential stages of a pipeline that's quite a lot of CPU Cycles you're doing every time you're doing that so is this is there some well there will be a",
    "start": "3571799",
    "end": "3578640"
  },
  {
    "text": "fun there there's going to be a function probably a urve optimization where you're going to be looking at like the",
    "start": "3578640",
    "end": "3583880"
  },
  {
    "text": "optimum number of deploys per day um in order to you when you go over that you're going to be like using too much",
    "start": "3583880",
    "end": "3590480"
  },
  {
    "text": "uh too much or more energy than you need to for the amount of value you're getting from the software anyway um I",
    "start": "3590480",
    "end": "3595520"
  },
  {
    "text": "think probably which we should probably call it a day though we've covered an awful lot so thank you so much for",
    "start": "3595520",
    "end": "3601319"
  },
  {
    "text": "coming along and chatting with us today it's been brilliant thanks for having me it's been it's been awesome really interesting I'm super excited and",
    "start": "3601319",
    "end": "3606760"
  },
  {
    "text": "looking forward to to checking out rock awesome um uh yeah so thank you uh thank you this is uh James and Richard saying",
    "start": "3606760",
    "end": "3612559"
  },
  {
    "text": "goodbye from goto on scripes at go Copenhagen thanks very much thanks",
    "start": "3612559",
    "end": "3617880"
  },
  {
    "text": "thanks for listening to this episode of the goto podcast head over to",
    "start": "3617880",
    "end": "3623599"
  },
  {
    "text": "goop.in and software development",
    "start": "3624079",
    "end": "3627960"
  },
  {
    "text": "[Music]",
    "start": "3629160",
    "end": "3637549"
  }
]