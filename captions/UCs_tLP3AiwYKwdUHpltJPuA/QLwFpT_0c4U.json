[
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "well hi happy to see that some people",
    "start": "12639",
    "end": "19730"
  },
  {
    "text": "decided that this would be more interesting than listening to Steve Wozniak short pause to allow those who",
    "start": "19730",
    "end": "27740"
  },
  {
    "text": "realize they're in the wrong room - okay I'm going to talk about building a",
    "start": "27740",
    "end": "34579"
  },
  {
    "text": "blockchain in Erlang and a quick",
    "start": "34579",
    "end": "40010"
  },
  {
    "text": "reminder for those of you who haven't realized that you can rate sessions",
    "start": "40010",
    "end": "46120"
  },
  {
    "text": "remember to rate the session afterwards I haven't been around in in the",
    "start": "46120",
    "end": "55069"
  },
  {
    "text": "conference circuit in a in a while so I thought I may present myself I started",
    "start": "55069",
    "end": "64790"
  },
  {
    "text": "basically back in 89 working in the US with command and control Disaster",
    "start": "64790",
    "end": "70939"
  },
  {
    "text": "Response in Alaska of all places I discovered Erlang when I was back in",
    "start": "70939",
    "end": "77469"
  },
  {
    "text": "in Sweden which is my home country back",
    "start": "77469",
    "end": "83899"
  },
  {
    "text": "in 92 I joined Ericsson expressly to develop to code in Erlang back in 96 and",
    "start": "83899",
    "end": "91969"
  },
  {
    "text": "I was there until 2008 and then joined erlang solutions as their CTO and since",
    "start": "91969",
    "end": "102500"
  },
  {
    "text": "about 2011 I've been freelancing I have my own",
    "start": "102500",
    "end": "107630"
  },
  {
    "text": "company also try to be a little bit of an entrepreneur mostly on the singing",
    "start": "107630",
    "end": "113450"
  },
  {
    "text": "site actually I I have a side career as",
    "start": "113450",
    "end": "118850"
  },
  {
    "text": "an opera singer and for the last two years I've been in the blockchain space",
    "start": "118850",
    "end": "126520"
  },
  {
    "text": "with the Eternity blockchain core team and in the Erlang community all you will",
    "start": "126520",
    "end": "135830"
  },
  {
    "text": "find a some component so on github that I'm responsible for a",
    "start": "135830",
    "end": "141260"
  },
  {
    "text": "fairly popular process registry called G proc load regulation framework called",
    "start": "141260",
    "end": "147830"
  },
  {
    "text": "jobs metrics package called X meter",
    "start": "147830",
    "end": "153220"
  },
  {
    "text": "slightly weird distributed Locker and a small experiment called unsplit which is",
    "start": "154209",
    "end": "162670"
  },
  {
    "text": "surprisingly used by a lot of people who worried about net splits in the Erlang",
    "start": "162670",
    "end": "167780"
  },
  {
    "text": "database I also have a couple of contributions that are actually part of",
    "start": "167780",
    "end": "173390"
  },
  {
    "text": "OTP one called XML and apologies to those who have tried to use it and don't",
    "start": "173390",
    "end": "180709"
  },
  {
    "text": "like it much I'm not terribly proud of that but I was the first to build an XML",
    "start": "180709",
    "end": "187579"
  },
  {
    "text": "package in Erlang and a few other things partly related to an easier the database",
    "start": "187579",
    "end": "195310"
  },
  {
    "text": "which has been a special interest of mine now how many of you have actually",
    "start": "195310",
    "end": "205060"
  },
  {
    "text": "coded in Erlang show hands okay about",
    "start": "205060",
    "end": "210739"
  },
  {
    "text": "half I would say okay how many of you is",
    "start": "210739",
    "end": "217310"
  },
  {
    "text": "clicker there how many of you are familiar with block chains that is know",
    "start": "217310",
    "end": "222379"
  },
  {
    "text": "basically how they work okay also slightly less than half I will give you",
    "start": "222379",
    "end": "230540"
  },
  {
    "text": "a one slide Erlang primer so after this you will actually know what Erlang is",
    "start": "230540",
    "end": "236209"
  },
  {
    "text": "and how to code in it it's a mostly functional language you could also call",
    "start": "236209",
    "end": "242209"
  },
  {
    "text": "it declarative or symbolic it is dynamically typed you could specify more",
    "start": "242209",
    "end": "251900"
  },
  {
    "text": "specifically it is strongly typed in that you can't subvert the type system but it doesn't have any static type",
    "start": "251900",
    "end": "258979"
  },
  {
    "text": "shape any static type checking to speak of it is garbage collected it is",
    "start": "258979",
    "end": "265479"
  },
  {
    "text": "concurrency oriented which is a bit rare it's also fault tolerant and I",
    "start": "265479",
    "end": "271700"
  },
  {
    "text": "we'll show a few things to indicate what what that means one of the things that",
    "start": "271700",
    "end": "278090"
  },
  {
    "text": "will trip up beginners is the punctuation which is you could say a bit",
    "start": "278090",
    "end": "284480"
  },
  {
    "text": "anal but very regular it's what I would",
    "start": "284480",
    "end": "291950"
  },
  {
    "text": "call an opinionated language it has a fairly clear style and you will tend to",
    "start": "291950",
    "end": "300170"
  },
  {
    "text": "know if your ideas are not in line with how Erlang wants you to code and so",
    "start": "300170",
    "end": "308860"
  },
  {
    "text": "beginners coming from the object-oriented world will probably spend a couple of months trying to make",
    "start": "308860",
    "end": "314900"
  },
  {
    "text": "Erlang object-oriented and then they will give up and either go with the flow",
    "start": "314900",
    "end": "320240"
  },
  {
    "text": "or go with another language Erlang is not object-oriented so here's a little",
    "start": "320240",
    "end": "327950"
  },
  {
    "text": "bit of code it's actually mainly an example but you can see this pattern in",
    "start": "327950",
    "end": "334630"
  },
  {
    "text": "some code I use it a couple of times occasionally myself I will go through it",
    "start": "334630",
    "end": "341690"
  },
  {
    "text": "because it contains most of the things that may be of interest so kind of like",
    "start": "341690",
    "end": "351040"
  },
  {
    "text": "you you use modules as a structuring concept and from modules you export the",
    "start": "351040",
    "end": "360350"
  },
  {
    "text": "functions there's this number of arguments function name and number of arguments and those will be the",
    "start": "360350",
    "end": "367850"
  },
  {
    "text": "functions that are callable from the outside and here I have an implementation of a parallel map those",
    "start": "367850",
    "end": "375500"
  },
  {
    "text": "of you familiar with functional programming know about the map function",
    "start": "375500",
    "end": "381200"
  },
  {
    "text": "essentially you will take a list of inputs and an anonymous function a",
    "start": "381200",
    "end": "389090"
  },
  {
    "text": "function object you apply that function object to all values in the list and",
    "start": "389090",
    "end": "395510"
  },
  {
    "text": "then you get a result but the weirdness of this one is that it",
    "start": "395510",
    "end": "401780"
  },
  {
    "text": "actually does all those applications parallel or concurrently and then",
    "start": "401780",
    "end": "407779"
  },
  {
    "text": "collects the results and produces a list that is actually in the same order as",
    "start": "407779",
    "end": "414469"
  },
  {
    "text": "the input arguments so how do you do that this is called a list comprehension",
    "start": "414469",
    "end": "422659"
  },
  {
    "text": "it means for all every value V in the list of values you do this and you",
    "start": "422659",
    "end": "433009"
  },
  {
    "text": "present you produce a list which is this",
    "start": "433009",
    "end": "439069"
  },
  {
    "text": "expression applied to each V and here you form a topple which is like an array",
    "start": "439069",
    "end": "445789"
  },
  {
    "text": "essentially with the value and here we spawn a process we spawn and monitor the",
    "start": "445789",
    "end": "454129"
  },
  {
    "text": "process a monitor in Erlang is a one-way supervision essentially we will no be",
    "start": "454129",
    "end": "462429"
  },
  {
    "text": "notified if that process dies otherwise there is a plane spawn function which",
    "start": "462429",
    "end": "469639"
  },
  {
    "text": "spawns a process and we have no connection to it we just get the process",
    "start": "469639",
    "end": "475099"
  },
  {
    "text": "ID here we get the process ID and a monitor reference I will get back to",
    "start": "475099",
    "end": "480439"
  },
  {
    "text": "that and the process we spawn will start in this function it will apply this",
    "start": "480439",
    "end": "488149"
  },
  {
    "text": "function object and what this does surprisingly perhaps it simply exits but",
    "start": "488149",
    "end": "498369"
  },
  {
    "text": "it's allowed to produce an exit reason and here we apply the function f on the",
    "start": "498369",
    "end": "507229"
  },
  {
    "text": "value V that we inherited from the context and then we wrap it in a topple",
    "start": "507229",
    "end": "517179"
  },
  {
    "text": "this will become clear later on and then comma and of expression next is another",
    "start": "518439",
    "end": "527209"
  },
  {
    "text": "list comprehension where PS is this the",
    "start": "527209",
    "end": "533480"
  },
  {
    "text": "result from the first operation here where for each",
    "start": "533480",
    "end": "538770"
  },
  {
    "text": "the value V and process reference P return or we returned the value and then",
    "start": "538770",
    "end": "546570"
  },
  {
    "text": "we collect the result we get here this is another function in Erlang you often",
    "start": "546570",
    "end": "552839"
  },
  {
    "text": "do pattern matching in function heads so here we expect we is basically assert",
    "start": "552839",
    "end": "561540"
  },
  {
    "text": "that the input is a to topple a total of two elements where the first is P the",
    "start": "561540",
    "end": "569520"
  },
  {
    "text": "other is called ref at this point we don't know what the types are Erlang is dynamically typed there are type",
    "start": "569520",
    "end": "577440"
  },
  {
    "text": "specifications but they're mainly for documentation now we go into a blocking",
    "start": "577440",
    "end": "582930"
  },
  {
    "text": "receive statement this is another weirdness of Erlang it has what's called",
    "start": "582930",
    "end": "589080"
  },
  {
    "text": "selective receive so we provide a pattern to the received statement",
    "start": "589080",
    "end": "595250"
  },
  {
    "text": "basically saying we will wait for this exact message which is a tuple of five",
    "start": "595250",
    "end": "603570"
  },
  {
    "text": "elements where this first one is the label down this is what's produced from",
    "start": "603570",
    "end": "610079"
  },
  {
    "text": "the monitor the second is ref now ref in",
    "start": "610079",
    "end": "616200"
  },
  {
    "text": "this context is already bound we bound that there so this has to match that",
    "start": "616200",
    "end": "621620"
  },
  {
    "text": "this is just a label process and this is the process ID P which we bound there so",
    "start": "621620",
    "end": "629940"
  },
  {
    "text": "we're gonna wait for exactly the process P with the monitor reference ref that we",
    "start": "629940",
    "end": "637649"
  },
  {
    "text": "called from here anything else is going to stay in the message Q so this",
    "start": "637649",
    "end": "644490"
  },
  {
    "text": "actually then preserves order we had the order valves and here we went through",
    "start": "644490",
    "end": "650550"
  },
  {
    "text": "the list in order here we went through the next list in order the these",
    "start": "650550",
    "end": "658290"
  },
  {
    "text": "messages may not come in in order but we don't care we actually reorder the",
    "start": "658290",
    "end": "663570"
  },
  {
    "text": "results here implicitly and",
    "start": "663570",
    "end": "669030"
  },
  {
    "text": "here we assert that the reason is ok comma something which is actually the",
    "start": "669030",
    "end": "677130"
  },
  {
    "text": "result from up here so this is actually",
    "start": "677130",
    "end": "684870"
  },
  {
    "text": "quite common as a pattern in Erlang you",
    "start": "684870",
    "end": "690060"
  },
  {
    "text": "do pattern matching as a form of assertion if reason is anything else this means",
    "start": "690060",
    "end": "697350"
  },
  {
    "text": "that this function application up here crashed and then it will exit in this",
    "start": "697350",
    "end": "705470"
  },
  {
    "text": "inside this function as a runtime error so it will not be this expression that",
    "start": "705470",
    "end": "711420"
  },
  {
    "text": "we exit with but the actual reason for the exit here and then this will not",
    "start": "711420",
    "end": "716760"
  },
  {
    "text": "match because this will not match any actual exit reason from a runtime error",
    "start": "716760",
    "end": "724520"
  },
  {
    "text": "but so if we get a runtime error from this function up here that this function",
    "start": "724520",
    "end": "732300"
  },
  {
    "text": "will raise an exception and this one will so then the map function as it",
    "start": "732300",
    "end": "738060"
  },
  {
    "text": "should will actually raise an exception to the caller and the result of the",
    "start": "738060",
    "end": "746250"
  },
  {
    "text": "function is whatever the last expression returned all clear that's a lot of",
    "start": "746250",
    "end": "756390"
  },
  {
    "text": "function packed into a few lines but this is sort of it illustrates a lot of",
    "start": "756390",
    "end": "764430"
  },
  {
    "text": "the key aspects of Erlang it really wants you to use processes now in this",
    "start": "764430",
    "end": "770100"
  },
  {
    "text": "case spawning a function takes about a microsecond so you wouldn't want to do",
    "start": "770100",
    "end": "777390"
  },
  {
    "text": "this there we go but just for demonstration I compile the function or",
    "start": "777390",
    "end": "785550"
  },
  {
    "text": "the module and then I call it with an anonymous function that just takes X and multiplies it by 2",
    "start": "785550",
    "end": "791790"
  },
  {
    "text": "and then I input a list sequence 1 2 5",
    "start": "791790",
    "end": "797520"
  },
  {
    "text": "and it returns the input value and the",
    "start": "797520",
    "end": "802980"
  },
  {
    "text": "output value all in order as you can see now obviously spawning a process takes",
    "start": "802980",
    "end": "809519"
  },
  {
    "text": "longer than multiplying an integer so in this case it would be extremely stupid",
    "start": "809519",
    "end": "815910"
  },
  {
    "text": "to use a parallel map but it only takes on a modern machine roughly one",
    "start": "815910",
    "end": "822930"
  },
  {
    "text": "microsecond to spawn a process so it doesn't have to be an incredible amount",
    "start": "822930",
    "end": "829949"
  },
  {
    "text": "of work for this to actually pay off so but it's so easy to write that there is",
    "start": "829949",
    "end": "837630"
  },
  {
    "text": "no library function that does this so if you want to do this you can you can",
    "start": "837630",
    "end": "843449"
  },
  {
    "text": "write it by hand and this is essentially the pattern that you would use now the",
    "start": "843449",
    "end": "852630"
  },
  {
    "text": "monitor function is actually quite important because it allows you to",
    "start": "852630",
    "end": "858500"
  },
  {
    "text": "supervise even very lightweight dialogues so if a process for example wants to call another process and",
    "start": "858769",
    "end": "865620"
  },
  {
    "text": "request some operation or a value what the standard generic server call",
    "start": "865620",
    "end": "872880"
  },
  {
    "text": "function does is that it actually creates a one-way monitor first and then",
    "start": "872880",
    "end": "879630"
  },
  {
    "text": "it passes that to the other process and say it says well by convention the",
    "start": "879630",
    "end": "884670"
  },
  {
    "text": "server will pass that reference back so then you can do this sort of pattern",
    "start": "884670",
    "end": "891180"
  },
  {
    "text": "matching on the reply so you know that that reply is an answer to your question",
    "start": "891180",
    "end": "896579"
  },
  {
    "text": "but also you have a supervision so if that process dies trying to provide a",
    "start": "896579",
    "end": "901769"
  },
  {
    "text": "reply you get an immediate notification so this is extremely useful and allows",
    "start": "901769",
    "end": "909899"
  },
  {
    "text": "you to write very robust code now that",
    "start": "909899",
    "end": "916470"
  },
  {
    "text": "was Erlang in one slide",
    "start": "916470",
    "end": "919939"
  },
  {
    "text": "this clicker is not working very well",
    "start": "922589",
    "end": "929160"
  },
  {
    "text": "maybe the battery or so blockchain you",
    "start": "929160",
    "end": "935129"
  },
  {
    "text": "could say that block chains are extremely slow append-only file systems",
    "start": "935129",
    "end": "942680"
  },
  {
    "text": "performance is not a thing with block",
    "start": "942680",
    "end": "947939"
  },
  {
    "text": "chains or at least not high performance the thing that is really key to blockchain is no trust so you have",
    "start": "947939",
    "end": "956600"
  },
  {
    "text": "essentially a peer-to-peer network of nodes participating in a chain so it's",
    "start": "956600",
    "end": "961769"
  },
  {
    "text": "fully distributed and you don't have to trust any other participant in the",
    "start": "961769",
    "end": "967620"
  },
  {
    "text": "network now that is quite a disruptive",
    "start": "967620",
    "end": "973949"
  },
  {
    "text": "requirement because it means that pretty much no algorithms distributed",
    "start": "973949",
    "end": "979620"
  },
  {
    "text": "algorithms that you're familiar with except gossip perhaps will actually work",
    "start": "979620",
    "end": "984980"
  },
  {
    "text": "because just about every distributed algorithm for consensus for example a",
    "start": "984980",
    "end": "995029"
  },
  {
    "text": "leader election whatever practically every algorithm ever invented assumes",
    "start": "995029",
    "end": "1001939"
  },
  {
    "text": "that you can at least trust the other parties that are talking in the protocol",
    "start": "1001939",
    "end": "1007420"
  },
  {
    "text": "with blockchain you throw that out the window so what do you trust basically",
    "start": "1007420",
    "end": "1014240"
  },
  {
    "text": "the only thing you trust is cryptographic proofs so you pass",
    "start": "1014240",
    "end": "1020360"
  },
  {
    "text": "information to each other and you rely on cryptography to provide you with the",
    "start": "1020360",
    "end": "1028250"
  },
  {
    "text": "opportunity to to verify to prove that what you got is actually correct I will",
    "start": "1028250",
    "end": "1035298"
  },
  {
    "text": "show you sort of a simplified chain of events here so say you have a",
    "start": "1035299",
    "end": "1041270"
  },
  {
    "text": "transaction the simple transaction would be I want to spend some tokens here to",
    "start": "1041270",
    "end": "1046730"
  },
  {
    "text": "which in blockchain world is an extremely small amount from some account",
    "start": "1046730",
    "end": "1053360"
  },
  {
    "text": "identified by a public key to another account identified by a public key usually if that to account",
    "start": "1053360",
    "end": "1062059"
  },
  {
    "text": "doesn't exist it will be created as soon as that transaction makes it onto the",
    "start": "1062059",
    "end": "1068330"
  },
  {
    "text": "chain so what you do is you serialize that you sign it cryptographically and",
    "start": "1068330",
    "end": "1075340"
  },
  {
    "text": "then you throw it into something called a mempool where all transactions pending",
    "start": "1075340",
    "end": "1081590"
  },
  {
    "text": "transactions live someone could be you these are typically called miners will",
    "start": "1081590",
    "end": "1089389"
  },
  {
    "text": "create a block that consists of a bunch of transactions you hash them all",
    "start": "1089389",
    "end": "1095029"
  },
  {
    "text": "together you get a hash identifying the block and a hash identifying the top",
    "start": "1095029",
    "end": "1100460"
  },
  {
    "text": "block on the chain all that is hashed together and then you try to solve a",
    "start": "1100460",
    "end": "1110539"
  },
  {
    "text": "crypto puzzle now this is a new these",
    "start": "1110539",
    "end": "1116330"
  },
  {
    "text": "look different in different block chains the simple way would be to just try to",
    "start": "1116330",
    "end": "1122269"
  },
  {
    "text": "hash these you can tweak one little counter in this block it's called the",
    "start": "1122269",
    "end": "1127429"
  },
  {
    "text": "nonce and then you hash everything and you try to get the hash result to fit a",
    "start": "1127429",
    "end": "1133399"
  },
  {
    "text": "small window this would be the simplest crypto puzzle and that window is shrunk",
    "start": "1133399",
    "end": "1139970"
  },
  {
    "text": "if you have lots of miners making the puzzle more difficult to to solve and if",
    "start": "1139970",
    "end": "1147649"
  },
  {
    "text": "you solve it then you have a valid block and you can append that to the chain",
    "start": "1147649",
    "end": "1156759"
  },
  {
    "text": "eventually collect a reward if once you've got that block to Pierce to your",
    "start": "1156759",
    "end": "1166549"
  },
  {
    "text": "peers and they accept that as a valid block and the next valid block because",
    "start": "1166549",
    "end": "1172730"
  },
  {
    "text": "there can be other miners who have also solved the puzzle in the same time and this is an optimistic concurrency",
    "start": "1172730",
    "end": "1178669"
  },
  {
    "text": "problem but eventually one will win and",
    "start": "1178669",
    "end": "1184570"
  },
  {
    "text": "if your block has been on the chain for a number of blocks",
    "start": "1184570",
    "end": "1190870"
  },
  {
    "text": "iterations you will collect an award for being able to put a block on the chain this is essentially how it works so this",
    "start": "1190870",
    "end": "1198380"
  },
  {
    "text": "block chain keeps growing but you can",
    "start": "1198380",
    "end": "1203390"
  },
  {
    "text": "also understand now that this is a very very costly operation this is called",
    "start": "1203390",
    "end": "1211220"
  },
  {
    "text": "proof of work it's supposed to be really difficult to solve and really cheap to",
    "start": "1211220",
    "end": "1220880"
  },
  {
    "text": "verify that's a key so you get a lot of candidate blocks from other peers and",
    "start": "1220880",
    "end": "1227090"
  },
  {
    "text": "you can very quickly verify if it is a valid solution to the puzzle at that",
    "start": "1227090",
    "end": "1236720"
  },
  {
    "text": "specific height okay thank you oh look",
    "start": "1236720",
    "end": "1244430"
  },
  {
    "text": "at that so I represent the Eternity block chain and the Eternity block chain",
    "start": "1244430",
    "end": "1250460"
  },
  {
    "text": "is one of the few new block chains that actually is developed from scratch",
    "start": "1250460",
    "end": "1256120"
  },
  {
    "text": "almost the only proof-of-work block chain that's developed from scratch",
    "start": "1256120",
    "end": "1262790"
  },
  {
    "text": "most block chains that you find out there are essentially spin-offs of Bitcoin or aetherium and then there are",
    "start": "1262790",
    "end": "1270980"
  },
  {
    "text": "some block chains that are trying for high performance but they use a",
    "start": "1270980",
    "end": "1278240"
  },
  {
    "text": "different consensus algorithm called proof of stake which is different I'm",
    "start": "1278240",
    "end": "1285680"
  },
  {
    "text": "not going to get into which one is best but it's of course proof of work we use",
    "start": "1285680",
    "end": "1291200"
  },
  {
    "text": "a consensus model that's similar to Bitcoin but it's called Bitcoin and G and that means we mined for what we call",
    "start": "1291200",
    "end": "1301250"
  },
  {
    "text": "key blocks they actually don't contain any transactions and if you're lucky and you get to mine key block then you are",
    "start": "1301250",
    "end": "1310880"
  },
  {
    "text": "the designated leader for a generation until a new key block is mined and",
    "start": "1310880",
    "end": "1316100"
  },
  {
    "text": "during that time you can produce blocks and sign them and distribute them every",
    "start": "1316100",
    "end": "1321980"
  },
  {
    "text": "third every three seconds so it may take three minutes we tuned",
    "start": "1321980",
    "end": "1328340"
  },
  {
    "text": "the puzzle so that it takes about three minutes to to solve a puzzle on average",
    "start": "1328340",
    "end": "1335240"
  },
  {
    "text": "and then every three seconds once you've become the leader you can generate",
    "start": "1335240",
    "end": "1341210"
  },
  {
    "text": "what's called a micro block so if you post a transaction you can get",
    "start": "1341210",
    "end": "1347960"
  },
  {
    "text": "notification ootah fication within about three seconds and we can push about a",
    "start": "1347960",
    "end": "1353180"
  },
  {
    "text": "hundred transactions per second which in the blockchain world is a lot in the",
    "start": "1353180",
    "end": "1358370"
  },
  {
    "text": "database world not so much we have a smart contract language called Sofia",
    "start": "1358370",
    "end": "1366400"
  },
  {
    "text": "it's a functional language that we designed quite nice I would say ml",
    "start": "1366400",
    "end": "1376000"
  },
  {
    "text": "variety now the smart contract is essentially code that you compile and",
    "start": "1376000",
    "end": "1383390"
  },
  {
    "text": "you can put into a transaction that gets on the blockchain and you can actually then call a contract that's on the",
    "start": "1383390",
    "end": "1389750"
  },
  {
    "text": "blockchain and the result also ends up on the blockchain also then the world's",
    "start": "1389750",
    "end": "1398300"
  },
  {
    "text": "slowest cloud computing environment but no trust which is nice so what we've",
    "start": "1398300",
    "end": "1407330"
  },
  {
    "text": "done in in eternity is to try to take some interesting use cases that are",
    "start": "1407330",
    "end": "1414020"
  },
  {
    "text": "built on blockchain and make them into first-class objects on the chain so one of those things would be state channels",
    "start": "1414020",
    "end": "1420980"
  },
  {
    "text": "I'll get into those a little bit more Oracle's which are essentially ports to the outside world you can request a",
    "start": "1420980",
    "end": "1427970"
  },
  {
    "text": "query out to say a web page or a market or whatever and the result gets fed into a contract which it which is executed",
    "start": "1427970",
    "end": "1435110"
  },
  {
    "text": "and you pay for that and you get the result naming system kind of like DNS so",
    "start": "1435110",
    "end": "1441410"
  },
  {
    "text": "you can register a name on the on the blockchain and then you can refer to",
    "start": "1441410",
    "end": "1448130"
  },
  {
    "text": "contracts by name in your domain for example generalized accounts which is if",
    "start": "1448130",
    "end": "1454670"
  },
  {
    "text": "you don't like our way of authenticating transactions and you would like say the",
    "start": "1454670",
    "end": "1461510"
  },
  {
    "text": "etherium way of authenticating you could actually plug that in or you could make",
    "start": "1461510",
    "end": "1467960"
  },
  {
    "text": "more fancier say context-sensitive or",
    "start": "1467960",
    "end": "1473620"
  },
  {
    "text": "transaction specific authentication which means you could actually have a",
    "start": "1473620",
    "end": "1479990"
  },
  {
    "text": "contract that automates automatically authenticates transactions which would",
    "start": "1479990",
    "end": "1485750"
  },
  {
    "text": "be interesting in a server environment for example so that's what we do this is",
    "start": "1485750",
    "end": "1492170"
  },
  {
    "text": "all written in Erlang well the core of it is the then we have SDKs in go in",
    "start": "1492170",
    "end": "1501470"
  },
  {
    "text": "JavaScript whatever we also have a state channel client environment in Aleks here",
    "start": "1501470",
    "end": "1507290"
  },
  {
    "text": "not going to talk about those today now so when you pick a language like Erlang",
    "start": "1507290",
    "end": "1514940"
  },
  {
    "text": "I would assume that most people would think that as an initial objection that",
    "start": "1514940",
    "end": "1522200"
  },
  {
    "text": "it's gonna be slow but if you think about blockchains in terms of performance there are very",
    "start": "1522200",
    "end": "1529070"
  },
  {
    "text": "few parts that are performance critical the the proof-of-work aspect is",
    "start": "1529070",
    "end": "1534550"
  },
  {
    "text": "performance critical hashing and",
    "start": "1534550",
    "end": "1539600"
  },
  {
    "text": "signatures but the thing there is that not only do you want to use C for that",
    "start": "1539600",
    "end": "1547210"
  },
  {
    "text": "you want to use a specific C library that is well known and trusted by users",
    "start": "1547210",
    "end": "1555559"
  },
  {
    "text": "so if you roll your own crypto few people are gonna want to use your",
    "start": "1555559",
    "end": "1561770"
  },
  {
    "text": "blockchain so you want to use Lib sodium for example because that's actually a",
    "start": "1561770",
    "end": "1567100"
  },
  {
    "text": "trusted crypto library so what we do in",
    "start": "1567100",
    "end": "1572890"
  },
  {
    "text": "in Erlang then is that we we link in Lib",
    "start": "1572890",
    "end": "1580070"
  },
  {
    "text": "sodium for example the proof-of-work the mining aspect we don't link that into",
    "start": "1580070",
    "end": "1587720"
  },
  {
    "text": "the Erlang VM that's actually run as a separate process and as it turns out it probably doesn't",
    "start": "1587720",
    "end": "1593600"
  },
  {
    "text": "even run on your computer you may want to form that out to GPUs for example so",
    "start": "1593600",
    "end": "1602390"
  },
  {
    "text": "then you have a separate application outside the Erlang world or possibly",
    "start": "1602390",
    "end": "1611120"
  },
  {
    "text": "inside are allowing that interfaces two GPUs and they do the mining and you collect the results from there so the",
    "start": "1611120",
    "end": "1618830"
  },
  {
    "text": "mining code yes there is a C implementation that's mainly for testing because mining on a CPU is useless in",
    "start": "1618830",
    "end": "1627700"
  },
  {
    "text": "blockchain world mining on GPUs is almost useless usually you mine on Asics",
    "start": "1627700",
    "end": "1635470"
  },
  {
    "text": "sometimes on GPU still there is a lot of networking and quite chatty networking",
    "start": "1635470",
    "end": "1642140"
  },
  {
    "text": "because remember you can't trust anyone so then you can't trust anyone to relay the information that you want others to",
    "start": "1642140",
    "end": "1648620"
  },
  {
    "text": "know so you actually have to talk to pretty much everyone or you have a",
    "start": "1648620",
    "end": "1653930"
  },
  {
    "text": "number of peers that you send all the information to and then you rely on at",
    "start": "1653930",
    "end": "1660110"
  },
  {
    "text": "least not all of them being malicious so if you send information to enough peers",
    "start": "1660110",
    "end": "1666050"
  },
  {
    "text": "and they are supposed to gossip it further eventually information will actually",
    "start": "1666050",
    "end": "1672890"
  },
  {
    "text": "spread to the entire network so you get a lot of communication on the network so",
    "start": "1672890",
    "end": "1679990"
  },
  {
    "text": "and also this is a moving target we're still trying to figure out not only what",
    "start": "1679990",
    "end": "1685940"
  },
  {
    "text": "we're supposed to use blockchains for there are some ideas but not so many",
    "start": "1685940",
    "end": "1694520"
  },
  {
    "text": "applications that are that have taken off yet but also how to take the next",
    "start": "1694520",
    "end": "1700550"
  },
  {
    "text": "steps to make this a really useful technology personally I think that it's",
    "start": "1700550",
    "end": "1706190"
  },
  {
    "text": "going to be it's going to be disruptive in some ways it's hard to know exactly",
    "start": "1706190",
    "end": "1711860"
  },
  {
    "text": "how yet so how does Erlang help them in",
    "start": "1711860",
    "end": "1720620"
  },
  {
    "text": "this Erlang is designed to model loosely coupled systems this is",
    "start": "1720620",
    "end": "1730140"
  },
  {
    "text": "a very important part of fault tolerance it was originally designed for building",
    "start": "1730140",
    "end": "1735870"
  },
  {
    "text": "telecom systems and specifically control",
    "start": "1735870",
    "end": "1741000"
  },
  {
    "text": "systems inside telephone switches for example so you have you may not know how",
    "start": "1741000",
    "end": "1748830"
  },
  {
    "text": "telephone switches work but usually you have tons of different physical devices",
    "start": "1748830",
    "end": "1754110"
  },
  {
    "text": "that need to be managed supervised and you also need to allocate resources in",
    "start": "1754110",
    "end": "1764580"
  },
  {
    "text": "down on in the data plane and this is what the control system does it negotiates data resources essentially in",
    "start": "1764580",
    "end": "1773610"
  },
  {
    "text": "the in the data plane and you need to do this in a way where all these devices",
    "start": "1773610",
    "end": "1781440"
  },
  {
    "text": "are isolated from each other so that if one breaks that doesn't break the entire system and also you want this to evolve",
    "start": "1781440",
    "end": "1788490"
  },
  {
    "text": "over time because you're selling a system that may actually be on the market for 20 years needs to be upgraded",
    "start": "1788490",
    "end": "1794040"
  },
  {
    "text": "in service so it's part of erlangs DNA to be loosely coupled with components",
    "start": "1794040",
    "end": "1801840"
  },
  {
    "text": "that are fairly isolated from each other so that is kind of nice when you're",
    "start": "1801840",
    "end": "1808410"
  },
  {
    "text": "actually doing exploratory programming and you don't know exactly how the system is going to evolve over time so",
    "start": "1808410",
    "end": "1815550"
  },
  {
    "text": "we've done a lot of refactoring we've added things as we've gone along and so",
    "start": "1815550",
    "end": "1824429"
  },
  {
    "text": "essentially a lot of blockchains will have mostly this and of course the",
    "start": "1824429",
    "end": "1829860"
  },
  {
    "text": "mining component and transaction support aetherium has contracts Bitcoin doesn't",
    "start": "1829860",
    "end": "1836010"
  },
  {
    "text": "and then these things are often built on top not part of the actual blockchain it",
    "start": "1836010",
    "end": "1843420"
  },
  {
    "text": "doesn't know about them they are usually implemented as contracts or as services",
    "start": "1843420",
    "end": "1849330"
  },
  {
    "text": "on the side we've baked them into the system so then this kind of becomes the",
    "start": "1849330",
    "end": "1857970"
  },
  {
    "text": "end higher blockchain core that we were building it's about a hundred thousand lines of Erlang code right now and I",
    "start": "1857970",
    "end": "1866700"
  },
  {
    "text": "think this is an area where Erlang actually helps quite a lot I will argue",
    "start": "1866700",
    "end": "1874529"
  },
  {
    "text": "that Erlang does concurrency extremely",
    "start": "1874529",
    "end": "1880739"
  },
  {
    "text": "well that is is its main claim to fame and the fairly unique part is that it",
    "start": "1880739",
    "end": "1886950"
  },
  {
    "text": "has a very elegant and efficient concurrency a construct or set of",
    "start": "1886950",
    "end": "1893519"
  },
  {
    "text": "concurrency constructs that are very useful for structuring the system and",
    "start": "1893519",
    "end": "1899369"
  },
  {
    "text": "very convenient when you're programming but also combining this with the",
    "start": "1899369",
    "end": "1909809"
  },
  {
    "text": "monitoring aspects the fault tolerance that whole package allowing you to build",
    "start": "1909809",
    "end": "1917009"
  },
  {
    "text": "self-healing systems essentially is extremely powerful you will as far as I",
    "start": "1917009",
    "end": "1927029"
  },
  {
    "text": "know if you want to look for something similar I guess akka in a sense it was",
    "start": "1927029",
    "end": "1933599"
  },
  {
    "text": "actually modeled after Erlang and cloud Haskell which was also modeled after",
    "start": "1933599",
    "end": "1939119"
  },
  {
    "text": "Erlang they - they have more or less similar constructs",
    "start": "1939119",
    "end": "1945889"
  },
  {
    "text": "although the concurrency model in the JVM is not quite the same",
    "start": "1945889",
    "end": "1952349"
  },
  {
    "text": "Erlang is also quite nice for protocol programming not too surprisingly because",
    "start": "1952349",
    "end": "1958259"
  },
  {
    "text": "that is also what it was initially designed for so it allows you to open",
    "start": "1958259",
    "end": "1965519"
  },
  {
    "text": "what's called ports and just basically have processes running state machines",
    "start": "1965519",
    "end": "1972479"
  },
  {
    "text": "and doing encode decode very efficiently",
    "start": "1972479",
    "end": "1979709"
  },
  {
    "text": "and very expressively so you can write program logic for protocol programming",
    "start": "1979709",
    "end": "1987929"
  },
  {
    "text": "that allows you to evolve the protocols very easily as well",
    "start": "1987929",
    "end": "1992749"
  },
  {
    "text": "I'll get back to that a little bit later when I talk to talk about the complex",
    "start": "1993050",
    "end": "1998820"
  },
  {
    "text": "state machine support now complex state machines how many of you have experience",
    "start": "1998820",
    "end": "2004429"
  },
  {
    "text": "actually doing complex state machines a few like one or two state machine",
    "start": "2004429",
    "end": "2014780"
  },
  {
    "text": "programming can become like go-to programming that once your problem",
    "start": "2014780",
    "end": "2020030"
  },
  {
    "text": "expands it can it can pretty much explode in your face and become so",
    "start": "2020030",
    "end": "2027320"
  },
  {
    "text": "complicated that you simply lose your thread you you don't understand your",
    "start": "2027320",
    "end": "2034040"
  },
  {
    "text": "code anymore and it can essentially kill your entire product if you're unlucky",
    "start": "2034040",
    "end": "2039460"
  },
  {
    "text": "that is actually I've seen that happen several times in the telecom world where they have extremely complicated state",
    "start": "2039460",
    "end": "2046670"
  },
  {
    "text": "machines often now the functional programming part actually it helps a lot",
    "start": "2046670",
    "end": "2052190"
  },
  {
    "text": "I don't know if I need to talk about that so much anymore because I also saw on the DNA with the threads out there",
    "start": "2052190",
    "end": "2060980"
  },
  {
    "text": "that a lot of people nowadays if they don't favor functional programming they",
    "start": "2060980",
    "end": "2067760"
  },
  {
    "text": "may favor actually both functional and so I will assume that you are that you",
    "start": "2067760",
    "end": "2075200"
  },
  {
    "text": "are familiar with the benefits of functional programming now Erlang",
    "start": "2075200",
    "end": "2080690"
  },
  {
    "text": "doesn't enforce purity like for example Haskell does it's mostly by convention",
    "start": "2080690",
    "end": "2087830"
  },
  {
    "text": "and also part of being opinionated and that it's reasonably clear how you want",
    "start": "2087830",
    "end": "2096888"
  },
  {
    "text": "to manage side-effects in Erlang so theoretically you can sprinkle them all",
    "start": "2096889",
    "end": "2102560"
  },
  {
    "text": "over the place that's not what people do partly because Erlang has something",
    "start": "2102560",
    "end": "2108859"
  },
  {
    "text": "called behaviors that are essentially manifestations of design patterns so you",
    "start": "2108859",
    "end": "2115880"
  },
  {
    "text": "will have a module that implements for example a generic server behavior a supervisor behavior state machine",
    "start": "2115880",
    "end": "2122359"
  },
  {
    "text": "behavior and the have prescribed callbacks and they do",
    "start": "2122359",
    "end": "2128089"
  },
  {
    "text": "most of the heavy lifting and you you basically inject your program logic and",
    "start": "2128089",
    "end": "2134170"
  },
  {
    "text": "that actually gives a lot of our line components a very uniform style which",
    "start": "2134170",
    "end": "2144560"
  },
  {
    "text": "also helps with reuse I haven't looked",
    "start": "2144560",
    "end": "2149839"
  },
  {
    "text": "at it in a while but actually the reuse aspect of Erlang is quite quite high I",
    "start": "2149839",
    "end": "2155960"
  },
  {
    "text": "don't know how it compares to the other modern languages but if you compare two older languages there is a tremendous",
    "start": "2155960",
    "end": "2162380"
  },
  {
    "text": "amount of reuse in Erlang and it's fairly easy to read other people's code",
    "start": "2162380",
    "end": "2170109"
  },
  {
    "text": "so another thing that's unusual about",
    "start": "2170890",
    "end": "2177170"
  },
  {
    "text": "Erlang is what I would call a carrier class product mentality since Erlang grew out of the telecoms world and then",
    "start": "2177170",
    "end": "2184730"
  },
  {
    "text": "you had other users like or Facebook chaps came out and then you had whatsapp",
    "start": "2184730",
    "end": "2191330"
  },
  {
    "text": "you had people who picked up Erlang where people who were really serious",
    "start": "2191330",
    "end": "2197150"
  },
  {
    "text": "about building stuff that would stay up always and you know if you're looking",
    "start": "2197150",
    "end": "2205040"
  },
  {
    "text": "for a programming language for fancy gooeys don't look at it don't look to Erlang it's not so much that you",
    "start": "2205040",
    "end": "2212480"
  },
  {
    "text": "couldn't write that kind of code in Erlang it's just nobody does so you",
    "start": "2212480",
    "end": "2218150"
  },
  {
    "text": "don't have great library support for it you don't have great community support but if you're looking at fault tolerance",
    "start": "2218150",
    "end": "2226420"
  },
  {
    "text": "robustness you have awesome support because that's what everyone in the",
    "start": "2226420",
    "end": "2232099"
  },
  {
    "text": "community does the Erlang VM has been",
    "start": "2232099",
    "end": "2237260"
  },
  {
    "text": "around for about 20 years it's extremely stable it's extremely efficient Ericsson",
    "start": "2237260",
    "end": "2245450"
  },
  {
    "text": "has a team of 20 programmers who have essentially the same programmers who were there 20 years ago",
    "start": "2245450",
    "end": "2251470"
  },
  {
    "text": "they're still working on it and they're doing a wonderful job Ericsson is",
    "start": "2251470",
    "end": "2257510"
  },
  {
    "text": "actually using this in their radio base stations it's a pretty good guarantee that they're gonna keep",
    "start": "2257510",
    "end": "2263289"
  },
  {
    "text": "quality up on this I put they're basically attacked proof",
    "start": "2263289",
    "end": "2272900"
  },
  {
    "text": "networking support there have been some web servers out there you know there are security advisories around web servers",
    "start": "2272900",
    "end": "2280760"
  },
  {
    "text": "yours for example has been around for years it's an Erlang based web server if you",
    "start": "2280760",
    "end": "2286700"
  },
  {
    "text": "go out looking for security advisories on that there will be like one or two ever one reason for that is that you",
    "start": "2286700",
    "end": "2297380"
  },
  {
    "text": "have this port concept and that that's a",
    "start": "2297380",
    "end": "2302539"
  },
  {
    "text": "bit of C code that runs in the VM extremely carefully tested and",
    "start": "2302539",
    "end": "2307630"
  },
  {
    "text": "maintained and in your Erlang code well you don't have buffer overflows you have",
    "start": "2307630",
    "end": "2314049"
  },
  {
    "text": "essentially a nice functional declarative language where you write your protocol code and that makes it",
    "start": "2314049",
    "end": "2321140"
  },
  {
    "text": "really really hard to attack protocol implementations written in Erlang and",
    "start": "2321140",
    "end": "2328509"
  },
  {
    "text": "that's very nice now for the bad parts",
    "start": "2328509",
    "end": "2336440"
  },
  {
    "text": "well not that many other projects are actually using block chain or Erlang for",
    "start": "2336440",
    "end": "2343400"
  },
  {
    "text": "block chains which means we have to build pretty much everything from scratch but and we ported some things",
    "start": "2343400",
    "end": "2350900"
  },
  {
    "text": "from go for example then again if you",
    "start": "2350900",
    "end": "2356690"
  },
  {
    "text": "want to have full responsibility for your application porting something is a",
    "start": "2356690",
    "end": "2361910"
  },
  {
    "text": "really good way of of learning that code from the inside out",
    "start": "2361910",
    "end": "2367960"
  },
  {
    "text": "Erlang doesn't run on iOS certainly not on iOS and not really on Android you can",
    "start": "2367960",
    "end": "2376519"
  },
  {
    "text": "run Erlang in term ox if you want to but it's not really a solution this is not",
    "start": "2376519",
    "end": "2383960"
  },
  {
    "text": "so much of a disadvantage a lot of people for some reason want to mine on their mobile I have absolutely no idea",
    "start": "2383960",
    "end": "2391849"
  },
  {
    "text": "why you would to do that but essentially running a",
    "start": "2391849",
    "end": "2398690"
  },
  {
    "text": "blockchain node on your mobile is a terrible terrible terrible idea you",
    "start": "2398690",
    "end": "2404570"
  },
  {
    "text": "might want to run state channels though let me talk about those later let's see",
    "start": "2404570",
    "end": "2410110"
  },
  {
    "text": "this is just the dependencies we use we I'm gonna skip that these are the build",
    "start": "2410110",
    "end": "2420170"
  },
  {
    "text": "and test tools we use are lying specific",
    "start": "2420170",
    "end": "2426100"
  },
  {
    "text": "they're okay they're not fantastic quick check is I'll mention that briefly here",
    "start": "2426100",
    "end": "2434360"
  },
  {
    "text": "quick check how many of you have heard of quick check okay",
    "start": "2434360",
    "end": "2439730"
  },
  {
    "text": "about a third quick check is a tool actually invented in the Haskell world",
    "start": "2439730",
    "end": "2445330"
  },
  {
    "text": "there is a commercial implementation in Erlang and the company Kubik actually",
    "start": "2445330",
    "end": "2451910"
  },
  {
    "text": "maintains it this is part of our quick check code a lot to read on a single",
    "start": "2451910",
    "end": "2461810"
  },
  {
    "text": "slide what this does this is this particular test will for the two",
    "start": "2461810",
    "end": "2471590"
  },
  {
    "text": "different the contract VMs that we have implemented it will generate chunks of",
    "start": "2471590",
    "end": "2481310"
  },
  {
    "text": "actual source code for various things",
    "start": "2481310",
    "end": "2486340"
  },
  {
    "text": "aspects in the so it will generate code random code on the fly and make sure",
    "start": "2486340",
    "end": "2494840"
  },
  {
    "text": "that it can compile and run now",
    "start": "2494840",
    "end": "2501280"
  },
  {
    "text": "generating random code would be a terrible idea unless you could do",
    "start": "2501370",
    "end": "2506810"
  },
  {
    "text": "controlled Random randomness so that you are actually fully in charge of whether",
    "start": "2506810",
    "end": "2514670"
  },
  {
    "text": "the output is constitutes valid code or optionally with some probability invalid",
    "start": "2514670",
    "end": "2522890"
  },
  {
    "text": "code in ways that are interesting and you have full control of this and it",
    "start": "2522890",
    "end": "2528750"
  },
  {
    "text": "will generate lots and lots of hundreds or thousands usually we will run this overnight so it will generate hundreds",
    "start": "2528750",
    "end": "2535770"
  },
  {
    "text": "of thousands of tests and if it finds some problem or some generated code in",
    "start": "2535770",
    "end": "2544650"
  },
  {
    "text": "this case some input that should work but doesn't it will start going backwards it will simplify that it will",
    "start": "2544650",
    "end": "2551670"
  },
  {
    "text": "start reducing it in different ways in a using a specific heuristic until it",
    "start": "2551670",
    "end": "2559410"
  },
  {
    "text": "finds a minimal example where there is basically nothing you can reduce and",
    "start": "2559410",
    "end": "2564810"
  },
  {
    "text": "still have it fail and then it presents that this is extremely powerful and",
    "start": "2564810",
    "end": "2571170"
  },
  {
    "text": "we've found quite a few of the kind of bugs that would normally bite you a",
    "start": "2571170",
    "end": "2578250"
  },
  {
    "text": "couple of years down the line when some nerd figured out that you could exploit",
    "start": "2578250",
    "end": "2587130"
  },
  {
    "text": "a piece of code in some really unintuitive way and then started making",
    "start": "2587130",
    "end": "2593760"
  },
  {
    "text": "money that way or printing money as you could do on that on a blockchain quickcheck has saved us number of times",
    "start": "2593760",
    "end": "2600930"
  },
  {
    "text": "now you can actually use this for other there are a quick Chek implementations for other languages and the Erlang quick",
    "start": "2600930",
    "end": "2607200"
  },
  {
    "text": "check actually also can operate on C code where it automatically generates",
    "start": "2607200",
    "end": "2614700"
  },
  {
    "text": "the stub code to test your C code this is pretty amazing",
    "start": "2614700",
    "end": "2620569"
  },
  {
    "text": "now the VM why would you want to run write a VM in a language like Erlang",
    "start": "2620569",
    "end": "2627420"
  },
  {
    "text": "turns out that it's not such a bad idea this is a virtual machine the fast",
    "start": "2627420",
    "end": "2635490"
  },
  {
    "text": "eternity transaction engine is a virtual machine for the Sofya contract language now first we implemented a VM that was",
    "start": "2635490",
    "end": "2643530"
  },
  {
    "text": "more or less compatible with the etherium VM which is a typical VM",
    "start": "2643530",
    "end": "2649589"
  },
  {
    "text": "low-level instruction set VM fate is a",
    "start": "2649589",
    "end": "2654900"
  },
  {
    "text": "different beast it essentially builds on the the realization that if",
    "start": "2654900",
    "end": "2668160"
  },
  {
    "text": "you have a contract running in a blockchain the thing that's going to be really expensive is when it interacts",
    "start": "2668160",
    "end": "2674160"
  },
  {
    "text": "with the chain the crypto the dealing with the transactions calling out the",
    "start": "2674160",
    "end": "2680070"
  },
  {
    "text": "contracts and just dealing with the environment there is going to be the",
    "start": "2680070",
    "end": "2687140"
  },
  {
    "text": "costly part as it turns out we have already implemented all those so we have",
    "start": "2687140",
    "end": "2693300"
  },
  {
    "text": "then instruction codes that are at the level of the first-class objects that we",
    "start": "2693300",
    "end": "2698940"
  },
  {
    "text": "have and those are by doing it that way we can I had that on the previous slide",
    "start": "2698940",
    "end": "2705750"
  },
  {
    "text": "we could actually reduce the code size of the compiled code by 90%",
    "start": "2705750",
    "end": "2711800"
  },
  {
    "text": "now code size is also a cost because that goes into the block and the blocks",
    "start": "2711800",
    "end": "2718230"
  },
  {
    "text": "are expensive remember they're very slow therefore they're expensive so this",
    "start": "2718230",
    "end": "2724260"
  },
  {
    "text": "actually makes it a lot cheaper a lot more efficient and we can have more",
    "start": "2724260",
    "end": "2731160"
  },
  {
    "text": "contracts in a block and we can execute them more cheaply so you know about 10",
    "start": "2731160",
    "end": "2738450"
  },
  {
    "text": "spawns green spawns 10th rule and he's sufficiently complicated C or Fortran",
    "start": "2738450",
    "end": "2744030"
  },
  {
    "text": "program can that contains an ad hoc informally specified bug-ridden slow implementation of half of Common Lisp",
    "start": "2744030",
    "end": "2753349"
  },
  {
    "text": "essentially if you want to implement a VM from scratch the advice would be",
    "start": "2753770",
    "end": "2760020"
  },
  {
    "text": "don't because it's too hard but when you think of it what is Erlang well it's a",
    "start": "2760020",
    "end": "2767070"
  },
  {
    "text": "very robust an efficient VM with a",
    "start": "2767070",
    "end": "2772530"
  },
  {
    "text": "fairly tiny symbolic language on top that happens to be quite good at meta",
    "start": "2772530",
    "end": "2777690"
  },
  {
    "text": "programming and symbolic evaluation so essentially you have your VM already so",
    "start": "2777690",
    "end": "2785220"
  },
  {
    "text": "that in that sense it actually makes a lot of sense to do it this way and the",
    "start": "2785220",
    "end": "2791640"
  },
  {
    "text": "whole VM is about 8,000 it's a code not much and it works quite",
    "start": "2791640",
    "end": "2797050"
  },
  {
    "text": "well and I think the latest version was written in two months by admittedly",
    "start": "2797050",
    "end": "2803500"
  },
  {
    "text": "great programmers so oh I'm running out",
    "start": "2803500",
    "end": "2812950"
  },
  {
    "text": "of time state channels this is actually where Lang starts shining so very quickly the",
    "start": "2812950",
    "end": "2819910"
  },
  {
    "text": "ideal state channel since block chains are extremely slow is you take somebody",
    "start": "2819910",
    "end": "2825010"
  },
  {
    "text": "it's like your coffee card you load some money into a separate channel that's off",
    "start": "2825010",
    "end": "2830260"
  },
  {
    "text": "chain and in that channel you can transact very quickly you have to",
    "start": "2830260",
    "end": "2835420"
  },
  {
    "text": "co-sign everything because it's still no trust and eventually you can pull your your money back out you can also run",
    "start": "2835420",
    "end": "2842320"
  },
  {
    "text": "contracts in that channel and basically you can do it for free because it",
    "start": "2842320",
    "end": "2848200"
  },
  {
    "text": "doesn't hit the chain so it's not expensive so this allows you to still",
    "start": "2848200",
    "end": "2854860"
  },
  {
    "text": "have the know trust and still have the connection to the chain and it's all",
    "start": "2854860",
    "end": "2859870"
  },
  {
    "text": "great except people have tried to do this for several years now and there are",
    "start": "2859870",
    "end": "2865900"
  },
  {
    "text": "no really usable implementations of state channels so because they're",
    "start": "2865900",
    "end": "2874360"
  },
  {
    "text": "extremely complex what we've done is that we decided that we will implement",
    "start": "2874360",
    "end": "2883330"
  },
  {
    "text": "the finite state machine and we will let the client simply just tell us what it",
    "start": "2883330",
    "end": "2892810"
  },
  {
    "text": "wants done we'll do all the state machine programming and then we'll tell the client when it needs to sign",
    "start": "2892810",
    "end": "2899290"
  },
  {
    "text": "something so that's essentially the API I want to transfer some tokens okay sign",
    "start": "2899290",
    "end": "2904660"
  },
  {
    "text": "this and you sign send it back signed and then it's all done essentially this",
    "start": "2904660",
    "end": "2910770"
  },
  {
    "text": "complicates the state machine tremendously our bed is that Erlang will",
    "start": "2910770",
    "end": "2918040"
  },
  {
    "text": "help us enough with a complicated state machine design that we will be able to",
    "start": "2918040",
    "end": "2924100"
  },
  {
    "text": "do this I have a whole talk Q call and was in fill queue about the problems",
    "start": "2924100",
    "end": "2931020"
  },
  {
    "text": "of complicated state machine design complex state machine design I will just",
    "start": "2931020",
    "end": "2937829"
  },
  {
    "text": "refer to that talk on on that now this is where Erlang really pays off",
    "start": "2937829",
    "end": "2943500"
  },
  {
    "text": "essentially this would be the processes some of them for one state machine",
    "start": "2943500",
    "end": "2949650"
  },
  {
    "text": "session where you have the WebSocket handler is one process the state channel",
    "start": "2949650",
    "end": "2956160"
  },
  {
    "text": "FSM here that does the complex state machine work you have a process that",
    "start": "2956160",
    "end": "2961170"
  },
  {
    "text": "simply watches the chain because you could subvert the channel by posting transactions directly on the chain and",
    "start": "2961170",
    "end": "2967260"
  },
  {
    "text": "you have to detect that this is an encrypted protocol similar to TLS but",
    "start": "2967260",
    "end": "2974460"
  },
  {
    "text": "it's called noise very nice this process terminates the noise protocol but also",
    "start": "2974460",
    "end": "2980789"
  },
  {
    "text": "encodes and decodes the messages so that this FSM can actually pattern match",
    "start": "2980789",
    "end": "2986250"
  },
  {
    "text": "directly on the decoded message which",
    "start": "2986250",
    "end": "2991309"
  },
  {
    "text": "simplifies the FSM design greatly and so",
    "start": "2991309",
    "end": "2997680"
  },
  {
    "text": "then on the other side you have the same thing so essentially it's what eight",
    "start": "2997680",
    "end": "3003619"
  },
  {
    "text": "processes per session and we're hoping that maybe we could handle tens of thousands of sessions on on one node",
    "start": "3003619",
    "end": "3012220"
  },
  {
    "text": "that will not be a big problem so not",
    "start": "3012220",
    "end": "3018109"
  },
  {
    "text": "have time to get into this but essentially this is what the state",
    "start": "3018109",
    "end": "3023329"
  },
  {
    "text": "machine would see a pattern match with the message decoded everything ready so",
    "start": "3023329",
    "end": "3029420"
  },
  {
    "text": "then you just jump directly from the pattern matching into the state machine",
    "start": "3029420",
    "end": "3035779"
  },
  {
    "text": "coding and this is extremely powerful",
    "start": "3035779",
    "end": "3041839"
  },
  {
    "text": "and we're still trying to figure out how deep this hole is with state machine",
    "start": "3041839",
    "end": "3049250"
  },
  {
    "text": "programming or state channel programming it is extremely extremely complicated",
    "start": "3049250",
    "end": "3054339"
  },
  {
    "text": "but we're doing reasonably well actually so far so",
    "start": "3054339",
    "end": "3060380"
  },
  {
    "text": "I would say blockchain technology is a moving target and when you're dealing",
    "start": "3060380",
    "end": "3067310"
  },
  {
    "text": "with that it's very nice to have a dynamic symbolic language like Erlang",
    "start": "3067310",
    "end": "3072830"
  },
  {
    "text": "that gives you the loose coupling the support for basically evolving",
    "start": "3072830",
    "end": "3080690"
  },
  {
    "text": "components reasonably freely separately and still have the very tight runtime",
    "start": "3080690",
    "end": "3087260"
  },
  {
    "text": "Copland coupling without sacrificing isolation or robustness so it's actually",
    "start": "3087260",
    "end": "3093620"
  },
  {
    "text": "turned out reasonably well so far we're respected at least for our we're",
    "start": "3093620",
    "end": "3100730"
  },
  {
    "text": "considering considered to be one of the most productive block chains in the",
    "start": "3100730",
    "end": "3106190"
  },
  {
    "text": "market right now so we're getting a lot of compliments on our quality or",
    "start": "3106190",
    "end": "3112720"
  },
  {
    "text": "productivity and vision I guess then we'll see how much that is worth in the",
    "start": "3112720",
    "end": "3119090"
  },
  {
    "text": "end all the things I've talked about are open-source except for the cubic quick",
    "start": "3119090",
    "end": "3125000"
  },
  {
    "text": "check the you can look at our our test code that's open source the tool itself",
    "start": "3125000",
    "end": "3132160"
  },
  {
    "text": "you'd have to pay for there is an open source equivalent reasonably equivalent",
    "start": "3132160",
    "end": "3138740"
  },
  {
    "text": "called proper in Erlang and for other languages you'd have to you'd have to",
    "start": "3138740",
    "end": "3145340"
  },
  {
    "text": "look at what's out there for them the the whole Eternity state channel or",
    "start": "3145340",
    "end": "3153550"
  },
  {
    "text": "blockchain is open source we have a foundation with incubators and and where",
    "start": "3153550",
    "end": "3164750"
  },
  {
    "text": "you can actually apply for grants if you want to do something interesting on it so I invite you to take a look at that",
    "start": "3164750",
    "end": "3172370"
  },
  {
    "text": "if you're interested in this field you",
    "start": "3172370",
    "end": "3179210"
  }
]