[
  {
    "start": "0",
    "end": "147000"
  },
  {
    "text": "[Music]",
    "start": "2550",
    "end": "10559"
  },
  {
    "text": "I want to talk a little bit about history and how we got here and then where I think we're going and how Nomad",
    "start": "10559",
    "end": "15920"
  },
  {
    "text": "can uh solve those problems and specifically how it's different than the other schedulers we've heard about like",
    "start": "15920",
    "end": "21320"
  },
  {
    "text": "Apache mesos and kubernetes so my name is Seth Vargo uh I am the director of evangelism at Hashi",
    "start": "21320",
    "end": "27640"
  },
  {
    "text": "Corp uh I'm an engineer by trade so I I previously worked at a number of engineering companies you might",
    "start": "27640",
    "end": "33239"
  },
  {
    "text": "recognize my face uh from the chef Community I've done a lot of work there um and more recently I've moved into",
    "start": "33239",
    "end": "38680"
  },
  {
    "text": "kind of this full-time role of evangelizing all of the Hashi Corp tools how many people are familiar with",
    "start": "38680",
    "end": "45559"
  },
  {
    "text": "Hashi Corp cool I like when the numbers go up because that means I'm doing my job uh",
    "start": "45559",
    "end": "51719"
  },
  {
    "text": "for those of you that aren't familiar with Hashi Corp uh we make a number of Open Source tools we're an open source company uh so we make vagrant which is a",
    "start": "51719",
    "end": "57920"
  },
  {
    "text": "really popular uh tool for automated development environments Packer which is a tool for building Automated machine",
    "start": "57920",
    "end": "62960"
  },
  {
    "text": "images Surf and console which is our uh our service Discovery and distributed key value Frameworks built on top of",
    "start": "62960",
    "end": "69840"
  },
  {
    "text": "raft and gossip uh terraform which is our infrastructure provisioning and management tool it's our infrastructure",
    "start": "69840",
    "end": "75040"
  },
  {
    "text": "is code Vault uh Secrets management Nomad which is what I'll talk about today it's our distributed application",
    "start": "75040",
    "end": "81159"
  },
  {
    "text": "scheduler Auto um which is our opinionated take on all of our other tools and um Atlas which is actually not",
    "start": "81159",
    "end": "87840"
  },
  {
    "text": "open source that's our commercial product but like I said I want to talk about Nomad today so what is Nomad how many",
    "start": "87840",
    "end": "95960"
  },
  {
    "text": "people have heard of nomad cool I don't know if you got this yet but I like engagement so I might ask",
    "start": "95960",
    "end": "101240"
  },
  {
    "text": "you to raise your hand lots of times it's okay thanks for bearing with me so Nomad is a globally distributed",
    "start": "101240",
    "end": "107240"
  },
  {
    "text": "optimistically concurrent Schuler and we've heard this word a number of times",
    "start": "107240",
    "end": "112439"
  },
  {
    "text": "nower but like we've never really defined it in the context of technology",
    "start": "112439",
    "end": "117920"
  },
  {
    "text": "so I want to take a step back and if you look up like the dictionary.com which is",
    "start": "117920",
    "end": "123320"
  },
  {
    "text": "you know the source for everything definition of auler it says that it's a program that arranges jobs or computer's",
    "start": "123320",
    "end": "130160"
  },
  {
    "text": "operations into an appropriate sequence so I thought that was too specific so I took it a step back even",
    "start": "130160",
    "end": "136680"
  },
  {
    "text": "further and I wanted to get the definition of auler in the real world so",
    "start": "136680",
    "end": "141840"
  },
  {
    "text": "auler is a person or machine that organizes or maintains schedules so that's pretty pretty",
    "start": "141840",
    "end": "148040"
  },
  {
    "start": "147000",
    "end": "313000"
  },
  {
    "text": "standard schedulers are just a way to map a set of work onto a set of",
    "start": "148040",
    "end": "154879"
  },
  {
    "text": "resources so this is auler uh this is Microsoft Excel Circa",
    "start": "154879",
    "end": "162200"
  },
  {
    "text": "before I was born and uh at the very basic level a spreadsheet is auler it",
    "start": "162200",
    "end": "168640"
  },
  {
    "text": "provides a way for us to map values uh map resources onto",
    "start": "168640",
    "end": "174280"
  },
  {
    "text": "values so uh I don't know why my clicker is misbehaving so traditionally if we",
    "start": "174280",
    "end": "180400"
  },
  {
    "text": "take a step back into like the 90s for a little bit um everybody had their own data center um and I Ed the word air",
    "start": "180400",
    "end": "186720"
  },
  {
    "text": "quotes there because some of the data centers were like the closet in the office um and you gave all of your",
    "start": "186720",
    "end": "193120"
  },
  {
    "text": "servers names because you had to because you had to refer to them so in this case I've chosen Star Wars themed you always",
    "start": "193120",
    "end": "198599"
  },
  {
    "text": "picked a theme like parts of the eye or your favorite movie that way you could remember them so in this case we have",
    "start": "198599",
    "end": "204000"
  },
  {
    "text": "four servers we have Skywalker Vader Leia and solo and you or an operator",
    "start": "204000",
    "end": "210319"
  },
  {
    "text": "would put applications onto those machines so in this case we have some Python and we have some go and then you",
    "start": "210319",
    "end": "217959"
  },
  {
    "text": "know Ruby and nodejs take up a lot more memory so they have to get their own server um but you also had the like you",
    "start": "217959",
    "end": "224120"
  },
  {
    "text": "personified these servers so for example you knew that",
    "start": "224120",
    "end": "229439"
  },
  {
    "text": "um that Vader was was not good um so you also had your little spreadsheet",
    "start": "229439",
    "end": "236360"
  },
  {
    "text": "um you know your Excel spreadsheet or whether it was like a little notepad and you taped it up to the wall and you have",
    "start": "236360",
    "end": "241560"
  },
  {
    "text": "the IP addresses and the Mac addresses and then that notes column and like in this case Vader just randomly kills",
    "start": "241560",
    "end": "246640"
  },
  {
    "text": "applications um haven't really figured out why don't really have time to address the issue but we just know that",
    "start": "246640",
    "end": "252239"
  },
  {
    "text": "happens so when a server goes offline or catches fire the operator was",
    "start": "252239",
    "end": "258359"
  },
  {
    "text": "responsible for rescheduling that application Andor fixing the machine",
    "start": "258359",
    "end": "264080"
  },
  {
    "text": "minimizing downtime so in this case we might reschedule the Ruby application",
    "start": "264080",
    "end": "269759"
  },
  {
    "text": "onto Skywalker we might reschedule the python application uh the node application and python application onto",
    "start": "269759",
    "end": "275000"
  },
  {
    "text": "solo you know we're still not at resource maximization but we don't have downtime anymore then when that server is",
    "start": "275000",
    "end": "282560"
  },
  {
    "text": "repaired so whether it's replaced or repaired um we have to make sure that we",
    "start": "282560",
    "end": "287840"
  },
  {
    "text": "update the spreadsheet because it's going to have a new IP address and then we say like you know rebuilt on you know",
    "start": "287840",
    "end": "293240"
  },
  {
    "text": "420 2016 and then we can start scheduling applications back on top of that and this workflow",
    "start": "293240",
    "end": "300240"
  },
  {
    "text": "was quite common and then we later learned that if you give these operators",
    "start": "300240",
    "end": "305400"
  },
  {
    "text": "pagers they become highly available and you don't have downtime",
    "start": "305400",
    "end": "311120"
  },
  {
    "text": "anymore so this obviously does not scale um it didn't scale in 1990 it doesn't",
    "start": "312039",
    "end": "318960"
  },
  {
    "start": "313000",
    "end": "715000"
  },
  {
    "text": "scale in today's modern Computing infrastructure but it doesn't scale even",
    "start": "318960",
    "end": "324560"
  },
  {
    "text": "worse because we've moved into the era of cloud we've moved into the era of on demand applications we've seen a lot of",
    "start": "324560",
    "end": "330560"
  },
  {
    "text": "talks about like Lambda and serverless architecture so having an operator have to make a decision about where an",
    "start": "330560",
    "end": "336520"
  },
  {
    "text": "application should live doesn't scale in today's architecture so let's talk about",
    "start": "336520",
    "end": "342919"
  },
  {
    "text": "schedulers that have been around for a really long time so I think this was brought up earlier but uh a CPU is a",
    "start": "342919",
    "end": "349720"
  },
  {
    "text": "like the CPU schuer part of your operating system its responsibility is to map particular processes to a CPU so",
    "start": "349720",
    "end": "356800"
  },
  {
    "text": "here we have a four core machine I have four processes I have the colel itself uh Apache rtis and Bash and that's all",
    "start": "356800",
    "end": "363160"
  },
  {
    "text": "great but let's pretend I have like a two core machine so no longer do we have a one toone mapping instead we have",
    "start": "363160",
    "end": "369639"
  },
  {
    "text": "those resources that are vying for the same core so it's the Schuler's",
    "start": "369639",
    "end": "374720"
  },
  {
    "text": "responsibility to prioritize those so in this case what has the highest",
    "start": "374720",
    "end": "381160"
  },
  {
    "text": "priority anybody want to take a guess the kernel right because if the",
    "start": "381160",
    "end": "386360"
  },
  {
    "text": "kernel is not running neither is anything else so and that case the colonel might get a dedicated core and",
    "start": "386360",
    "end": "391759"
  },
  {
    "text": "we might be shifting between the other three applications on the second core but we might also move the Kernel's",
    "start": "391759",
    "end": "397639"
  },
  {
    "text": "operations to the second core at some point because that's what the Schuler does and the way it makes that decision",
    "start": "397639",
    "end": "403319"
  },
  {
    "text": "is up to that particular Schuler and the constraints it's given so schedulers aren't A New Concept",
    "start": "403319",
    "end": "410560"
  },
  {
    "text": "they've been around for quite a long time so CPU schedulers map threads to uh",
    "start": "410560",
    "end": "417039"
  },
  {
    "text": "so the the work that they have to do is threads they map onto physical cores uh in the context of like ec2 or Open",
    "start": "417039",
    "end": "423520"
  },
  {
    "text": "Stacks Nova uh we're mapping virtual machines the work is a virtual machine and we're mapping that onto a hypervisor",
    "start": "423520",
    "end": "430680"
  },
  {
    "text": "in the case of like Hadoop yarn we're mapping jobs big map reduced jobs onto a series of nodes and then more recently",
    "start": "430680",
    "end": "438800"
  },
  {
    "text": "where we start to see the word scheduler pop up it seems like it's been defined a little bit more is a clusterer and",
    "start": "438800",
    "end": "445919"
  },
  {
    "text": "that's where we're mapping applications things like Docker containers or um a goang library or a Java jar onto a",
    "start": "445919",
    "end": "453759"
  },
  {
    "text": "series of machines or servers some of the advantages of auler",
    "start": "453759",
    "end": "461360"
  },
  {
    "text": "are very straightforward so high resource utilization how does a scheduler accomplish High resource",
    "start": "461360",
    "end": "467759"
  },
  {
    "text": "utilization well within the context of a cluster scheduler increasing resource",
    "start": "467759",
    "end": "472879"
  },
  {
    "text": "utilization is done using techniques like bin packing over subscription and having a consistent cue for",
    "start": "472879",
    "end": "481199"
  },
  {
    "text": "jobs the second and uh kind of more important thing that a scheduler does for us is decoupling the work from",
    "start": "481199",
    "end": "488159"
  },
  {
    "text": "resources so everybody always talks about higher resource utilization because it's the easiest way to sell a scheduler you can walk into your manager",
    "start": "488159",
    "end": "494599"
  },
  {
    "text": "and say we're going to cut your cost by 60% and they're like cool make it happen and they don't care about the actual",
    "start": "494599",
    "end": "500080"
  },
  {
    "text": "technical trade-offs of doing so what schedulers have actually enabled us to do is decouple our work from the",
    "start": "500080",
    "end": "507000"
  },
  {
    "text": "resources themselves so no longer are we operating system dependent are we particular versioning dependent instead",
    "start": "507000",
    "end": "514518"
  },
  {
    "text": "um schedulers provide us an abstraction of the work that needs to be done and that abstraction is important",
    "start": "514519",
    "end": "521680"
  },
  {
    "text": "because it's consistent across any type of job so it doesn't matter whether you're doing a large map reduce job or",
    "start": "521680",
    "end": "527240"
  },
  {
    "text": "running a single static binary it doesn't matter if you're running a batch job that's processing some billing information that's relatively shortlived",
    "start": "527240",
    "end": "534320"
  },
  {
    "text": "or if you have a long running service like redus or mongodb that needs to be up all of the time",
    "start": "534320",
    "end": "541440"
  },
  {
    "text": "um it also includes certain API contracts and standardization across them so um one of the great things that",
    "start": "541680",
    "end": "547440"
  },
  {
    "text": "Docker brought to the community is standardization around containers providing a consistent and reliable API",
    "start": "547440",
    "end": "553720"
  },
  {
    "text": "wrapper around containers and schedulers are doing the same thing around applications right they're providing",
    "start": "553720",
    "end": "559279"
  },
  {
    "text": "that standard API around how to deploy and manage an application at",
    "start": "559279",
    "end": "564880"
  },
  {
    "text": "scale and lastly and and somewhat intangibly is quality of service and",
    "start": "565360",
    "end": "570720"
  },
  {
    "text": "this is something that's really hard to measure everybody talks about nines how many nines do you have how many nines do you have right but um there are",
    "start": "570720",
    "end": "577959"
  },
  {
    "text": "intrinsic things that we can't measure with quality of service like you know the 99th percentile latency or how does",
    "start": "577959",
    "end": "584600"
  },
  {
    "text": "your application behave for a user in like subser Africa who has 56 kilobytes",
    "start": "584600",
    "end": "590600"
  },
  {
    "text": "per second can they access your application how do you measure that and schedulers provide us with a better",
    "start": "590600",
    "end": "596800"
  },
  {
    "text": "quality of service coupled with things like CDN where we can scale out globally to make sure that our applications are",
    "start": "596800",
    "end": "603240"
  },
  {
    "text": "accessible all across the world we do this by providing job priorities so",
    "start": "603240",
    "end": "608600"
  },
  {
    "text": "earlier I gave the example of reddis versus some billing architecture one is a batch job that runs for maybe 15",
    "start": "608600",
    "end": "614399"
  },
  {
    "text": "minutes one is a long running process that's critical to the application without priorities a scheduler can't",
    "start": "614399",
    "end": "620959"
  },
  {
    "text": "make the decision of which is more important so it'll just randomly choose or do like whichever one was submitted",
    "start": "620959",
    "end": "626360"
  },
  {
    "text": "first and that's obviously not ideal because as an operator or an engineer you're aware that the map reduce job",
    "start": "626360",
    "end": "632560"
  },
  {
    "text": "that's doing all of the billing could probably wait a day or an hour or even 10 minutes if it means that the reddish",
    "start": "632560",
    "end": "639760"
  },
  {
    "text": "job or the mongod DB job can continue running because the application the customer facing application or the",
    "start": "639760",
    "end": "645720"
  },
  {
    "text": "business facing application that is critical has to be up and running and so do all of its dependencies so if auler",
    "start": "645720",
    "end": "652240"
  },
  {
    "text": "doesn't have the ability to specify priority and say a is more important than b then those decisions can't be",
    "start": "652240",
    "end": "658000"
  },
  {
    "text": "made adequately and you can't provide a better quality of service the second is resource isolation so you don't want",
    "start": "658000",
    "end": "665480"
  },
  {
    "text": "your applications clobbering on top of one another and this was a problem that was experienced a lot in in the past 20",
    "start": "665480",
    "end": "671720"
  },
  {
    "text": "years it's the reason why tools like chef and puppet and anible and salt are so popular are because we had to install",
    "start": "671720",
    "end": "677360"
  },
  {
    "text": "like 20 different applications onto a machine and without containers uh or Docker containers or containerization we",
    "start": "677360",
    "end": "684399"
  },
  {
    "text": "had multiple ruby versions multiple python versions managing all of that was quite a nightmare and that's where configuration management really became",
    "start": "684399",
    "end": "690839"
  },
  {
    "text": "popular because managing that by hand was difficult schedulers and containers",
    "start": "690839",
    "end": "695920"
  },
  {
    "text": "and VMS provide us with that level of resource isolation so we don't have to worry about you know Ruby 192",
    "start": "695920",
    "end": "702519"
  },
  {
    "text": "conflicting with Ruby 193 and is our application using the correct version um is our rubian uh conflicting with the",
    "start": "702519",
    "end": "708680"
  },
  {
    "text": "system version right these are so many questions that have come up and schedulers are really solving those problems for",
    "start": "708680",
    "end": "715800"
  },
  {
    "start": "715000",
    "end": "913000"
  },
  {
    "text": "us schedulers also aren't A New Concept um I think they're A New Concept to what",
    "start": "715800",
    "end": "721760"
  },
  {
    "text": "I call mid-tier organizations um but they're not A New Concept to large scale organizations so we already talked about",
    "start": "721760",
    "end": "728200"
  },
  {
    "text": "like ec2 and Nova being um auler it's a VM scheduler but Amazon also has ECS",
    "start": "728200",
    "end": "733680"
  },
  {
    "text": "which is their container scheduler Google has Borg um and then some of the research Google did also for sparrow",
    "start": "733680",
    "end": "740320"
  },
  {
    "text": "that uh or Berkeley did for Sparrow as well and then Twitter and Netflix um Netflix has Titan Twitter has their own",
    "start": "740320",
    "end": "746320"
  },
  {
    "text": "scheduler and these have been around for quite a long time um they're more recently being evangelized and popularized um because",
    "start": "746320",
    "end": "753880"
  },
  {
    "text": "they're becoming more relevant as we move to cloud-based architecture serverless architecture and we start",
    "start": "753880",
    "end": "759560"
  },
  {
    "text": "focusing on applications instead of machines themselves so when we talk about",
    "start": "759560",
    "end": "765480"
  },
  {
    "text": "Nomad and this might be a little bit redundant but nomad's also not alone in the scheduler Market um so you have",
    "start": "765480",
    "end": "772199"
  },
  {
    "text": "kubernetes uh mesos mesosphere containership .io and a number of other schedulers are continuously being",
    "start": "772199",
    "end": "778839"
  },
  {
    "text": "created the primary difference as Adrian said between Nomad and all of these other is",
    "start": "778839",
    "end": "785120"
  },
  {
    "text": "that Nomad is AER Nomad doesn't provide you with service Discovery it doesn't",
    "start": "785120",
    "end": "791000"
  },
  {
    "text": "provide you with all of the bits and pieces so the reason Nomad is is really",
    "start": "791000",
    "end": "796040"
  },
  {
    "text": "popular is gaining and popularity is that it's really easy to adopt into your existing organization without taking an",
    "start": "796040",
    "end": "802079"
  },
  {
    "text": "entire bite of a particular pie so you can adopt Nomad and continue using your",
    "start": "802079",
    "end": "807399"
  },
  {
    "text": "existing service Discovery tool whether that's console which happens to be something that we make or something like",
    "start": "807399",
    "end": "812480"
  },
  {
    "text": "zookeeper the Integrations are there for it so you can adopt purely auler",
    "start": "812480",
    "end": "818560"
  },
  {
    "text": "avoiding that vendor lockin and avoiding um all of the refactoring that might",
    "start": "818560",
    "end": "824160"
  },
  {
    "text": "need to occur to bring your applications into the modern era another key difference between Nomad and these other",
    "start": "824160",
    "end": "831800"
  },
  {
    "text": "tools uh are the types of applications that can be scheduled and I'll get into that a little bit",
    "start": "831800",
    "end": "837480"
  },
  {
    "text": "more so there are three main points of nomad that I want to discuss um the",
    "start": "837480",
    "end": "842600"
  },
  {
    "text": "first is the cluster scheduling part uh the second is the deployments and then the job specification itself so this is",
    "start": "842600",
    "end": "849560"
  },
  {
    "text": "the job specification and uh we think this is what sets Nomad apart from a lot of the competitors we have a very",
    "start": "849560",
    "end": "855920"
  },
  {
    "text": "humanfriendly um configuration it's Json compatible so you can generate this as",
    "start": "855920",
    "end": "861480"
  },
  {
    "text": "Json and The Nomad parser will actually read it as Json so you can still do machine readable on machine output but",
    "start": "861480",
    "end": "867800"
  },
  {
    "text": "we have a very friendly config that looks a lot like engine X if you're familiar with it um key value pairs very",
    "start": "867800",
    "end": "873399"
  },
  {
    "text": "human friendly support for comments um very Version Control friendly and they're designed to be checked into",
    "start": "873399",
    "end": "879120"
  },
  {
    "text": "Version Control because your job files are really the description of your architecture in this example we have a",
    "start": "879120",
    "end": "885639"
  },
  {
    "text": "job named redus the data center that we want to run redus in and the task specifies how we want to run it where we",
    "start": "885639",
    "end": "892240"
  },
  {
    "text": "want to get it from what driver we want to use and the set of resources optionally that are required so so in",
    "start": "892240",
    "end": "899240"
  },
  {
    "text": "this case we're specifically saying that this Docker container which is just pulling down the latest Reed rdus image",
    "start": "899240",
    "end": "904680"
  },
  {
    "text": "needs half of a CPU and 256 megabytes of Ram with a minimum network of 10 megabits per",
    "start": "904680",
    "end": "911959"
  },
  {
    "text": "second the job specification declares what to run and then nomad's responsibility is to determine how and",
    "start": "911959",
    "end": "918800"
  },
  {
    "start": "913000",
    "end": "1396000"
  },
  {
    "text": "where to run it so in this way Nomad is responsible for abstracting the work",
    "start": "918800",
    "end": "924600"
  },
  {
    "text": "from the resources themselves",
    "start": "924600",
    "end": "928759"
  },
  {
    "text": "so one of the really interesting things about Nomad is the design and the architecture because it's similar but",
    "start": "930839",
    "end": "938000"
  },
  {
    "text": "also very different from some of the other schedulers out there so understanding the goals and constraints",
    "start": "938000",
    "end": "943360"
  },
  {
    "text": "of a problem are super important when we consider the design um at Hashi Corp we are a academic white paper focused",
    "start": "943360",
    "end": "950480"
  },
  {
    "text": "company um we have ideas and then whenever we're ready to build something we go out and research all of the latest",
    "start": "950480",
    "end": "956360"
  },
  {
    "text": "and greatest academic papers Scholars who are writing about these particular",
    "start": "956360",
    "end": "961759"
  },
  {
    "text": "topics for nomad we had a number of requirements and these included support for multiple data centers and multiple",
    "start": "961759",
    "end": "967240"
  },
  {
    "text": "Regional deployments we wanted the flexibility to support any type of workload so not just Docker containers",
    "start": "967240",
    "end": "972880"
  },
  {
    "text": "not just VMS we already talked about why job priorities were so important we wanted to use the latest and greatest",
    "start": "972880",
    "end": "978399"
  },
  {
    "text": "bin packing algorithms and it needed to be able to support large massive scale Twitter scale Google scale Facebook",
    "start": "978399",
    "end": "984680"
  },
  {
    "text": "scale but it also needed to be operationally simple such that you could get it up and running in one or two",
    "start": "984680",
    "end": "991759"
  },
  {
    "text": "commands when we talk about scaling uh I want to like better Define scaling we want Nomad to be able to scale to",
    "start": "991800",
    "end": "998519"
  },
  {
    "text": "thousands of regions with tens of thousands of clients per region with thousands of jobs per client and I'll",
    "start": "998519",
    "end": "1004959"
  },
  {
    "text": "talk about the million container Challenge in a little bit and how Nomad performed but if you do the math that's a million",
    "start": "1004959",
    "end": "1012639"
  },
  {
    "text": "jobs in designing Nomad we turn to our own experience first so Hashi Corp makes Surf and cons which are distributed",
    "start": "1013360",
    "end": "1020000"
  },
  {
    "text": "systems which run at scale in production today um surf gives us cluster membership um gossip based peer-to-peer",
    "start": "1020000",
    "end": "1026558"
  },
  {
    "text": "membership um detection failure detection without a single point of failure or ttls and it provides an",
    "start": "1026559",
    "end": "1032600"
  },
  {
    "text": "event-based distribution system it works at massive scale um tens of thousands of",
    "start": "1032600",
    "end": "1038640"
  },
  {
    "text": "machines in a single data center its production hardened for a number of years now used by some of the largest companies on the internet and it's",
    "start": "1038640",
    "end": "1045280"
  },
  {
    "text": "operationally simple console is buil buil on top of surf and it's our service Discovery",
    "start": "1045280",
    "end": "1051080"
  },
  {
    "text": "framework it allows for a distributed key Value Store it also it also includes a number of features that are important",
    "start": "1051080",
    "end": "1057280"
  },
  {
    "text": "in a distributed system such as a centralized locking mechanism and it uses an architecture for centralized",
    "start": "1057280",
    "end": "1062600"
  },
  {
    "text": "servers and distributed clients console itself is multi- dat",
    "start": "1062600",
    "end": "1068280"
  },
  {
    "text": "Center aware it uses raft for consensus it also has been tested at incredibly",
    "start": "1068280",
    "end": "1073400"
  },
  {
    "text": "large scale and is very production hardened so Surf and console provide us",
    "start": "1073400",
    "end": "1080320"
  },
  {
    "text": "the gossip and consensus layers and they are also very mature libraries with powerful design",
    "start": "1080320",
    "end": "1085919"
  },
  {
    "text": "patterns the problem is that they all lacked scheduling logic and at Hashi Corp we believe in the Unix philosophy",
    "start": "1085919",
    "end": "1092679"
  },
  {
    "text": "which is you should do one thing and you should do it very well and it doesn't make sense for a service Discovery framework to be responsible for",
    "start": "1092679",
    "end": "1098480"
  },
  {
    "text": "scheduling just like it doesn't make sense for auler to be a service Discovery framework so for this we turned to",
    "start": "1098480",
    "end": "1105400"
  },
  {
    "text": "Academia we wanted cuttingedge technology we wanted cuttingedge research in the field of scheduling and",
    "start": "1105400",
    "end": "1110919"
  },
  {
    "text": "we primarily were done uh Guided by work done by um Google and amplab at Berkeley",
    "start": "1110919",
    "end": "1116480"
  },
  {
    "text": "so uh a number of people have talked about Borg already but Borg is Google's internal scheduler um I think part of",
    "start": "1116480",
    "end": "1122559"
  },
  {
    "text": "Borg also runs Google Cloud platform and then uh Berkeley uh Sparrow was coming",
    "start": "1122559",
    "end": "1127640"
  },
  {
    "text": "out of Berkeley uh which was a similar scheduler so doing a survey of the the",
    "start": "1127640",
    "end": "1134280"
  },
  {
    "text": "the current Academia at the time um schedulers are either optimistic or pessimistic based on their concurrency",
    "start": "1134280",
    "end": "1140720"
  },
  {
    "text": "and they choose whether they want to manage State internally or if they want to push it off to something like ETD or some other service and then they're",
    "start": "1140720",
    "end": "1146960"
  },
  {
    "text": "either single or multi-level so Borg is fixed in its scheduling logic um so like the scheduler built-in a borg whereas",
    "start": "1146960",
    "end": "1153520"
  },
  {
    "text": "Omega has a pluggable architecture so you can bring your own scheduler some schedulers are highly optimized for",
    "start": "1153520",
    "end": "1159360"
  },
  {
    "text": "batch workloads so billing processing one-off jobs the like 5 10 20 minute jobs whereas others are more optimized",
    "start": "1159360",
    "end": "1165480"
  },
  {
    "text": "for Long Live Services redus database job application Etc so ultimately Nomad is more inspired",
    "start": "1165480",
    "end": "1173280"
  },
  {
    "text": "by Omega than it is um Sparrow uh it's optimistically concurrent which allows",
    "start": "1173280",
    "end": "1178440"
  },
  {
    "text": "it to make scheduling decisions in parallel across many of the servers it uses internal state for coordination",
    "start": "1178440",
    "end": "1184400"
  },
  {
    "text": "both for Speed and to make it more operationally simple we didn't want the first step out of the box to be go",
    "start": "1184400",
    "end": "1189960"
  },
  {
    "text": "install this other tool so that we can store State we wanted it to be operationally simple out of the box we",
    "start": "1189960",
    "end": "1195159"
  },
  {
    "text": "focus on both service and batch workloads and we're going to support a plugable architecture um for drivers",
    "start": "1195159",
    "end": "1201559"
  },
  {
    "text": "very shortly in starting our system design we turned to console console is very",
    "start": "1201559",
    "end": "1206679"
  },
  {
    "text": "familiar we knew it scaled um this is console's architecture at a very high level so up on the top you can see all",
    "start": "1206679",
    "end": "1212200"
  },
  {
    "text": "of the clients the clients communicate with each other over uh RPC on the land gossip they communicate with servers",
    "start": "1212200",
    "end": "1218679"
  },
  {
    "text": "those servers are responsible for uh three things they're responsible for responding to RPC requests they're",
    "start": "1218679",
    "end": "1224120"
  },
  {
    "text": "responsible for leader election and then they're responsible for forwarding requests to the leader if in the event",
    "start": "1224120",
    "end": "1229559"
  },
  {
    "text": "they are a follower uh within a data center the nodes talk to their local servers but",
    "start": "1229559",
    "end": "1236039"
  },
  {
    "text": "the servers also participate in the WAN gossip or the public internet gossip so across multiple data centers the servers",
    "start": "1236039",
    "end": "1242159"
  },
  {
    "text": "are communicating with each other over the public internet or some resemblance of the public internet in this architecture the",
    "start": "1242159",
    "end": "1249200"
  },
  {
    "text": "failure is isolated the failure domain is isolated to the data center so your failure domain is the data center itself",
    "start": "1249200",
    "end": "1256240"
  },
  {
    "text": "and this was because each data center is completely isolated from its peer nomad's architecture is very",
    "start": "1256240",
    "end": "1263880"
  },
  {
    "text": "similar but we've introduced this concept of a region so a region is a collection of data centers and has only",
    "start": "1263880",
    "end": "1270200"
  },
  {
    "text": "a single set of servers so whereas in console each data center has a collection of servers in Nomad each",
    "start": "1270200",
    "end": "1276840"
  },
  {
    "text": "region has a collection of servers and each region is a collection of data centers so as an example you may have um",
    "start": "1276840",
    "end": "1284559"
  },
  {
    "text": "you know Frankfurt uh Frankfurt Ireland and I don't know Scandinavia as your three",
    "start": "1284559",
    "end": "1291159"
  },
  {
    "text": "data centers right those are where your data centers are physically located that region might be Europe so region is just",
    "start": "1291159",
    "end": "1298039"
  },
  {
    "text": "a higher level abstraction of a Data Center and the reason for that is that scheduling decisions typically aren't made at the data center layer they're",
    "start": "1298039",
    "end": "1304400"
  },
  {
    "text": "made at the regional layer so the way I like to describe it is that um I like to think of data centers as countries and",
    "start": "1304400",
    "end": "1310919"
  },
  {
    "text": "regions or continents um that obviously doesn't map one to one but it gives you a good representation in your mind in",
    "start": "1310919",
    "end": "1318200"
  },
  {
    "text": "the m region architecture the region is the failure domain and the servers within that region communicate with each",
    "start": "1318200",
    "end": "1324240"
  },
  {
    "text": "other so if the United States region goes down the failure domain is isolated to that continent the European region is",
    "start": "1324240",
    "end": "1333880"
  },
  {
    "text": "unaffected so the region is the failure domain this allows for n or more data centers per region giving the user the",
    "start": "1334799",
    "end": "1340880"
  },
  {
    "text": "flexibility to run a single region per data center or hundreds of thousands of regions um or hundreds of thousands of",
    "start": "1340880",
    "end": "1347360"
  },
  {
    "text": "data centers per region as if the world was one Global region the region is also the scheduling boundary so you can't",
    "start": "1347360",
    "end": "1354279"
  },
  {
    "text": "schedule a job across multiple regions um in one submission you can schedule it but they're isolated jobs they're",
    "start": "1354279",
    "end": "1360480"
  },
  {
    "text": "independent of one another otherwise that would break the failure isolation so next it's important to talk",
    "start": "1360480",
    "end": "1367880"
  },
  {
    "text": "about nomad's data model and this is critical for understanding how the system actually operates so users submit",
    "start": "1367880",
    "end": "1374000"
  },
  {
    "text": "work in the form of a job or a job file and that can either be done via the API so you can build your own tooling around",
    "start": "1374000",
    "end": "1379799"
  },
  {
    "text": "it or you can use the command line directly the client nodes are joined to run the tasks and then the mapping of",
    "start": "1379799",
    "end": "1386320"
  },
  {
    "text": "the tasks from a job to a node is done with what's called an allocation it's a a glossery term and these allocations",
    "start": "1386320",
    "end": "1393159"
  },
  {
    "text": "are only created by evaluations an evaluation is basically a state change in the system so some",
    "start": "1393159",
    "end": "1399520"
  },
  {
    "start": "1396000",
    "end": "1523000"
  },
  {
    "text": "example evaluations are like I added a new client node a node went down I've deleted a job I've created a job or an",
    "start": "1399520",
    "end": "1407440"
  },
  {
    "text": "allocation failed meaning a previously successful allocation is now failing and that might be like let's just say",
    "start": "1407440",
    "end": "1414120"
  },
  {
    "text": "somebody ripped a hard drive out of a physical data center U physical data center node and now you have less disk",
    "start": "1414120",
    "end": "1419880"
  },
  {
    "text": "space than you originally did that causes a reallocation to occur so in this way if we want to get technical a",
    "start": "1419880",
    "end": "1426960"
  },
  {
    "text": "scheduler can be modeled in functional notation as a a function that takes an evaluation and returns a set of",
    "start": "1426960",
    "end": "1433279"
  },
  {
    "text": "allocation updates or an array of allocation updates and those allocation updates are either created updated or",
    "start": "1433279",
    "end": "1440520"
  },
  {
    "text": "deleted and that evaluation itself can be a specialized system so it can be a",
    "start": "1440520",
    "end": "1445559"
  },
  {
    "text": "service job a batch job a system job whatever it might be in this way it allows our architecture to be",
    "start": "1445559",
    "end": "1452919"
  },
  {
    "text": "pluggable so this means this makes N Out an Omega class Schuler it allows it to support the pluggable schedulers with",
    "start": "1452919",
    "end": "1459080"
  },
  {
    "text": "custom logic but makes use of the internal coordination and state system the heavily uh inspired console",
    "start": "1459080",
    "end": "1465720"
  },
  {
    "text": "architecture allows it to support multiple regions and multiple data centers very easily and at massive",
    "start": "1465720",
    "end": "1472159"
  },
  {
    "text": "scale in terms of the client Nomad is written in go um and it relies on clients to actually run tasks the client",
    "start": "1472159",
    "end": "1478720"
  },
  {
    "text": "supports a broad range of operating systems including Windows uh Linux FreeBSD and Darwin um the clients make",
    "start": "1478720",
    "end": "1486039"
  },
  {
    "text": "use of fingerprinting which if you're familiar with like Chef or puppet it's like um very similar to like ohigh or",
    "start": "1486039",
    "end": "1491480"
  },
  {
    "text": "factor collecting data about the system that's used in the scheduling decisions and uh pushes that information up to the",
    "start": "1491480",
    "end": "1497679"
  },
  {
    "text": "Nomad servers so here are some examples of the fingerprinting so for example the",
    "start": "1497679",
    "end": "1503039"
  },
  {
    "text": "operating system kernel OS version Hardware how much CPU do we have um both",
    "start": "1503039",
    "end": "1508120"
  },
  {
    "text": "Total and available memory disk the capabilities of the system itself is Docker installed is Java installed is",
    "start": "1508120",
    "end": "1514919"
  },
  {
    "text": "console installed and then the environment itself is it on idos is it on GCE is it on openstack",
    "start": "1514919",
    "end": "1523159"
  },
  {
    "start": "1523000",
    "end": "1616000"
  },
  {
    "text": "Etc the information from the fingerprints is uh provided to the servers to constrain task place ments",
    "start": "1523159",
    "end": "1528640"
  },
  {
    "text": "and support bin packing so for example in human terms you would say this task requires Linux",
    "start": "1528640",
    "end": "1536039"
  },
  {
    "text": "and then as a result implicitly Docker and PCI Compliant hardware and all of that is expressed as a constraint in the",
    "start": "1536039",
    "end": "1542679"
  },
  {
    "text": "job file it's codified it's inversion control when you say that my task needs",
    "start": "1542679",
    "end": "1548679"
  },
  {
    "text": "half a gig of RAM and exactly one CPU core that's expressed as a resource ask in the job file again codified inversion",
    "start": "1548679",
    "end": "1556320"
  },
  {
    "text": "control you get the same type of collabor that you have on applications on infrastructure",
    "start": "1556320",
    "end": "1561720"
  },
  {
    "text": "changes task drivers live on the client and they're responsible for executing tasks and providing resource",
    "start": "1561720",
    "end": "1568159"
  },
  {
    "text": "isolation so right now nomad has support for Docker and rocket on the containerization level but one of the",
    "start": "1568159",
    "end": "1574440"
  },
  {
    "text": "things that sets Nomad apart from some of the other schedulers on the market is that it supports more than just Docker",
    "start": "1574440",
    "end": "1579960"
  },
  {
    "text": "we support virtualized workloads with Kimu and KVM and we support Standalone static binaries such as Java jars or go",
    "start": "1579960",
    "end": "1586640"
  },
  {
    "text": "binaries so when you're only only requirement is you need the jvm or you need something that's capable of running",
    "start": "1586640",
    "end": "1591880"
  },
  {
    "text": "an elf binary Nomad can schedule that directly for you without the overhead of Docker without the need to install",
    "start": "1591880",
    "end": "1597880"
  },
  {
    "text": "Docker on the system freeing up additional resources to maximize",
    "start": "1597880",
    "end": "1603039"
  },
  {
    "text": "utilization we are also actively working on support for Windows Server containers",
    "start": "1603480",
    "end": "1608600"
  },
  {
    "text": "Zen and hyperv and C Standalone applications so these are some of the things that you might see in the",
    "start": "1608600",
    "end": "1616039"
  },
  {
    "start": "1616000",
    "end": "1750000"
  },
  {
    "text": "pipeline ultimately Nomad is designed to be incredibly flexible and it does so with the pluggable architecture",
    "start": "1616039",
    "end": "1621399"
  },
  {
    "text": "fingerprinting drivers and the job specification format it's a single binary like almost all hashy cour",
    "start": "1621399",
    "end": "1627600"
  },
  {
    "text": "products so you curl you move it to user local bin and you give it executable and you have installed it it's usually four",
    "start": "1627600",
    "end": "1633360"
  },
  {
    "text": "lines of bash code um or 100 lines of puppet and um there's no dependencies",
    "start": "1633360",
    "end": "1639320"
  },
  {
    "text": "absolutely no system level dependencies and it's highly available so one of the last things I",
    "start": "1639320",
    "end": "1644720"
  },
  {
    "text": "want to talk about and I hinted at it earlier is The Nomad million container challenge how many people have seen the million container",
    "start": "1644720",
    "end": "1650720"
  },
  {
    "text": "challenge cool one person um so we recently did a thing um where we",
    "start": "1650720",
    "end": "1657799"
  },
  {
    "text": "scheduled a thousand jobs with a th tasks per job on 5,000 hosts on uh",
    "start": "1657799",
    "end": "1663960"
  },
  {
    "text": "Google compute engine and they graciously provided that for free so if you do the math there that's 1 million",
    "start": "1663960",
    "end": "1670039"
  },
  {
    "text": "uh they happen to be Docker containers running across 5,000 hosts on Google Cloud platform and we added constraints",
    "start": "1670039",
    "end": "1677519"
  },
  {
    "text": "to all of the job some of them arbitrary just to make scheduling more difficult the hosts themselves all had different",
    "start": "1677519",
    "end": "1683039"
  },
  {
    "text": "resources so some were like two me or 2 GB of RAM some were 64 gabt of ram just",
    "start": "1683039",
    "end": "1688080"
  },
  {
    "text": "to make the scheduling as hard as",
    "start": "1688080",
    "end": "1691600"
  },
  {
    "text": "possible so the results were pretty amazing uh as you can see from this graph Nomad scheduled over a million",
    "start": "1694960",
    "end": "1701880"
  },
  {
    "text": "containers I'll talk about why over a million in a second in just under 5 minutes uh so if you can't see that",
    "start": "1701880",
    "end": "1707600"
  },
  {
    "text": "that's 200 267 seconds is when all of the containers were scheduled what's interesting to note is that Nomad",
    "start": "1707600",
    "end": "1713600"
  },
  {
    "text": "actually scheduled more than a million containers um this is due to uh at that",
    "start": "1713600",
    "end": "1719480"
  },
  {
    "text": "scale you have like actual Hardware failure like machines literally died um we also found a bug or two in the docker",
    "start": "1719480",
    "end": "1726039"
  },
  {
    "text": "Damon that have since been fixed that at that massive scale cause race conditions when Nomad detects that a job is no",
    "start": "1726039",
    "end": "1732279"
  },
  {
    "text": "longer running it reschedules it that's one of the responsibilities of Aer so this is not only showing the massive",
    "start": "1732279",
    "end": "1738399"
  },
  {
    "text": "scale at which Nomad can operate but also at that scale it's still capable of making fundamental scheduling decisions",
    "start": "1738399",
    "end": "1745120"
  },
  {
    "text": "like is this job still running no okay I'm going to start it again so Negative Nancy always says no",
    "start": "1745120",
    "end": "1752039"
  },
  {
    "start": "1750000",
    "end": "1875000"
  },
  {
    "text": "one would ever need to schedule a million containers like someone was thinking it who was thinking",
    "start": "1752039",
    "end": "1757840"
  },
  {
    "text": "it yeah someone was thinking it so I'm about to show you a video um and this is",
    "start": "1757840",
    "end": "1763080"
  },
  {
    "text": "a video of a stress test performed on an Airbus A320 so that's an airplane uh as",
    "start": "1763080",
    "end": "1768159"
  },
  {
    "text": "you can see the wings Bend uh significantly further than any traditional flight would ever",
    "start": "1768159",
    "end": "1774600"
  },
  {
    "text": "encounter um however uh there's pretty much added safety and confidence in",
    "start": "1774600",
    "end": "1780480"
  },
  {
    "text": "knowing that this airplane's Wings can bend to I think it's like 39° or",
    "start": "1780480",
    "end": "1787360"
  },
  {
    "text": "something beyond their parallel right that's pretty awesome I'm going to show you another video",
    "start": "1787360",
    "end": "1794360"
  },
  {
    "text": "now so this is a video of another type of plane",
    "start": "1794360",
    "end": "1800000"
  },
  {
    "text": "maybe there we go this is a another type of plane which",
    "start": "1802480",
    "end": "1807840"
  },
  {
    "text": "snaps the wing at about a 17° incline so I ask you this both of these",
    "start": "1807840",
    "end": "1816320"
  },
  {
    "text": "scenarios are highly unlikely but which plane would you rather fly in so do you need to schedule a million",
    "start": "1816320",
    "end": "1823760"
  },
  {
    "text": "applications no but whicher would you rather use the one that can only schedule a thousand or the one that can",
    "start": "1823760",
    "end": "1830679"
  },
  {
    "text": "schedule a million at scale and be highly performant as with everything we do",
    "start": "1830679",
    "end": "1837919"
  },
  {
    "text": "Hashi Corp is uh Nomad is open source and so is the contain the million container challenge so Hashi Corp uh /cm",
    "start": "1837919",
    "end": "1845200"
  },
  {
    "text": "on GitHub is the million container challenge all of the scripts are open source you're free to run this against Nomad or any other scheduler um not just",
    "start": "1845200",
    "end": "1853640"
  },
  {
    "text": "Nomad so to conclude uh Nomad is a globally distributed optimistically concurrent scheduler it uses uh the goal",
    "start": "1853640",
    "end": "1863200"
  },
  {
    "text": "was ultimately to allow users to dramatically increase their resource utilization decouple applications from",
    "start": "1863200",
    "end": "1869279"
  },
  {
    "text": "resources or work from resources to improve their overall quality of service so that's all I have I do have a",
    "start": "1869279",
    "end": "1877200"
  },
  {
    "start": "1875000",
    "end": "2118000"
  },
  {
    "text": "really quick demo but I don't know if I have time uh you do you do have time okay look at that I was hoping he said",
    "start": "1877200",
    "end": "1883120"
  },
  {
    "text": "no um thanks Adrian cool so um what I have here is a",
    "start": "1883120",
    "end": "1891039"
  },
  {
    "text": "really small font size so what I have here is uh a nomad",
    "start": "1891039",
    "end": "1897720"
  },
  {
    "text": "server that's running somewhere on a cloud somewhere um so I have this job that's running called web app and I'm",
    "start": "1897720",
    "end": "1903639"
  },
  {
    "text": "not going to dive into the job file but it's just a Docker container um there's two Docker containers one's an ha proxy",
    "start": "1903639",
    "end": "1909320"
  },
  {
    "text": "load balancer and one's an Apache 2 serving up a static web page and it is currently running uh if I",
    "start": "1909320",
    "end": "1916799"
  },
  {
    "text": "ask for more information so we can see that um we can see that I screwed this up a bunch of times because",
    "start": "1916799",
    "end": "1922760"
  },
  {
    "text": "you get the whole job history but uh you can see that it's currently running on um I scrolled too far it's currently",
    "start": "1922760",
    "end": "1930320"
  },
  {
    "text": "running on uh this particular node here so node whatever DC um whatever and I'm",
    "start": "1930320",
    "end": "1936120"
  },
  {
    "text": "intentionally doing this without service Discovery so if there were console installed on these machines it would automatically discover them for us but",
    "start": "1936120",
    "end": "1942399"
  },
  {
    "text": "I'm doing this like pure Nomad so what I can do is I can ask for the status of that node by its ID so I can see",
    "start": "1942399",
    "end": "1950399"
  },
  {
    "text": "everything that Nomad knows about this node so it currently has uh what 750 uh",
    "start": "1950399",
    "end": "1957279"
  },
  {
    "text": "mehz of the CPU is is currently allocated 512 megabytes of memory 600 megabytes of dis and there are zero IO",
    "start": "1957279",
    "end": "1963880"
  },
  {
    "text": "operations currently taking place so what I want to show you is um so this is",
    "start": "1963880",
    "end": "1969120"
  },
  {
    "text": "running on 101 this is where I have to cheat and uh",
    "start": "1969120",
    "end": "1974360"
  },
  {
    "text": "log in the AWS console to get the IP address of this node",
    "start": "1974360",
    "end": "1979559"
  },
  {
    "text": "what I'm going to do is I'm going to kill this node um and I'm going to show you that when this node goes down uh NAD",
    "start": "1981120",
    "end": "1987120"
  },
  {
    "text": "is going to detect that and reschedule it on another machine so what did I say this was",
    "start": "1987120",
    "end": "1994159"
  },
  {
    "text": "111 all right",
    "start": "2003039",
    "end": "2007240"
  },
  {
    "text": "what was it t now I don't know H yeah see I'm not AIS",
    "start": "2009039",
    "end": "2016519"
  },
  {
    "text": "admin okay so that node is now down and it's shutting down and as soon as Nomad",
    "start": "2016639",
    "end": "2021919"
  },
  {
    "text": "is made aware of that node's departure from the cluster and and this was a",
    "start": "2021919",
    "end": "2026960"
  },
  {
    "text": "Docker container so we also have to wait for Docker to report that the the service is no longer running and unfortunately that's a pull-based model",
    "start": "2026960",
    "end": "2033440"
  },
  {
    "text": "not a push based model right now so we do have to wait for the node to leave the cluster once the node leaves the",
    "start": "2033440",
    "end": "2038639"
  },
  {
    "text": "cluster nomad's going to automatically schedule that job on another machine and it's going to do that using the same bin",
    "start": "2038639",
    "end": "2044440"
  },
  {
    "text": "packing it's going to do another allocation so when we run um the status again we'll see another allocation take",
    "start": "2044440",
    "end": "2050679"
  },
  {
    "text": "place which will form another evaluation and hopefully it'll schedule it on another machine so let's take a look at",
    "start": "2050679",
    "end": "2056800"
  },
  {
    "text": "this job status just ask for the total status so",
    "start": "2056800",
    "end": "2063839"
  },
  {
    "text": "it says the job is running so let's ask for the status of the web app job",
    "start": "2063839",
    "end": "2069720"
  },
  {
    "text": "so here I don't know if you remember but 9 dc820 was the previously running node",
    "start": "2069839",
    "end": "2076599"
  },
  {
    "text": "that was the node that we killed now it happens to be running on a node uh 3724 so for example if I run uh Nomad",
    "start": "2076599",
    "end": "2084240"
  },
  {
    "text": "node status with no arguments you can see that um that happens to correspond",
    "start": "2084240",
    "end": "2089480"
  },
  {
    "text": "to um node 57 um doesn't really have a name or anything special so it's this last note in the list you can see that",
    "start": "2089480",
    "end": "2095760"
  },
  {
    "text": "noat is reporting our original Noe is down so it's no longer accessible um and this",
    "start": "2095760",
    "end": "2100800"
  },
  {
    "text": "application has been rescheduled onto that particular machine uh in this case 57 so if we uh hit up 57 in the and",
    "start": "2100800",
    "end": "2110119"
  },
  {
    "text": "again I'm doing this without service Discovery um but if there was service Discovery you would be able to use you",
    "start": "2110119",
    "end": "2115480"
  },
  {
    "text": "know DNS or some type of interfacing to query this but this is actually that application itself so this is that",
    "start": "2115480",
    "end": "2122040"
  },
  {
    "start": "2118000",
    "end": "2396000"
  },
  {
    "text": "application that got rescheduled onto this host it's uh two or three darker containers running behind a load balancer um so nothing really special I",
    "start": "2122040",
    "end": "2129160"
  },
  {
    "text": "don't have a really cool demo but I think it's super cool to Showcase what happens when an application dies and auler is responsible for making sure",
    "start": "2129160",
    "end": "2135920"
  },
  {
    "text": "that it's still available to the client that's all I have uh any questions there",
    "start": "2135920",
    "end": "2142000"
  },
  {
    "text": "are questions yes crap uh",
    "start": "2142000",
    "end": "2146960"
  },
  {
    "text": "so um there's a question here about uh Windows support okay uh you mentioned",
    "start": "2147320",
    "end": "2153000"
  },
  {
    "text": "that uh all your different applications run on Windows right but do you have any",
    "start": "2153000",
    "end": "2158319"
  },
  {
    "text": "examples of it running uh companies running on Windows in production and at",
    "start": "2158319",
    "end": "2163599"
  },
  {
    "text": "Large Scale um definitely not at large scale for nomad we do have a couple companies who are running some small",
    "start": "2163599",
    "end": "2169720"
  },
  {
    "text": "scale stuff on Windows um the The Nomad client runs on Windows but the Nomad",
    "start": "2169720",
    "end": "2174880"
  },
  {
    "text": "server has to run on a Linux based operating system right now that's something that we're trying to get rid of so we can schedule work onto a",
    "start": "2174880",
    "end": "2181359"
  },
  {
    "text": "Windows machine but right now it's not possible to run the server on Windows there's some uh Unix ism deep down in",
    "start": "2181359",
    "end": "2188200"
  },
  {
    "text": "the core that we have to remove before we can Port that to Windows um I don't have any examples of companies that are",
    "start": "2188200",
    "end": "2193280"
  },
  {
    "text": "that are doing it that I can really talk about um but we do have an examples repo um it's open source on GitHub where you",
    "start": "2193280",
    "end": "2199200"
  },
  {
    "text": "can see some of the job files and um things that are like Windows Windows specific okay so um do you see a future",
    "start": "2199200",
    "end": "2208560"
  },
  {
    "text": "for configuration management like chef and puppet uh I do I think that um Chef",
    "start": "2208560",
    "end": "2214720"
  },
  {
    "text": "puppet anible salt I think they still play a very vital role in this space um I think that but a different role yeah I",
    "start": "2214720",
    "end": "2220599"
  },
  {
    "text": "think they're just going to play a very different role um I think as we move towards containerization this notion of",
    "start": "2220599",
    "end": "2226040"
  },
  {
    "text": "having multiple applications on a system without some type of resource isolation from either auler or a container engine",
    "start": "2226040",
    "end": "2232599"
  },
  {
    "text": "goes away so um things like chef and puppet become crucial for provisioning the initial systems um building like",
    "start": "2232599",
    "end": "2240079"
  },
  {
    "text": "these larger um cluster machines the clients themselves that have you know gigabytes of memory gigabytes of RAM G",
    "start": "2240079",
    "end": "2246720"
  },
  {
    "text": "you know CPU dis space and provisioning those initial instances um I don't think we're going to see them as popular in",
    "start": "2246720",
    "end": "2252079"
  },
  {
    "text": "like the cron based or um you know you run Chef on some interval or pop it on some interval I think it's going to be",
    "start": "2252079",
    "end": "2257359"
  },
  {
    "text": "purely more of a bootstrapping process and then we're probably going to rely on the schedulers or or the container",
    "start": "2257359",
    "end": "2262680"
  },
  {
    "text": "engines to make the decisions from there okay so uh you mentioned the concept bin",
    "start": "2262680",
    "end": "2268280"
  },
  {
    "text": "packing uh a couple of times what exactly does that mean there were three people who asked this oh jeez okay so um",
    "start": "2268280",
    "end": "2275680"
  },
  {
    "text": "the easiest way and I'm going to steal Kelsey Towers um description the easiest way to describe bin packing is Tetris so",
    "start": "2275680",
    "end": "2281880"
  },
  {
    "text": "how many people have ever played Tetris right so that's bin packing next question okay um so the idea is that in",
    "start": "2281880",
    "end": "2289760"
  },
  {
    "text": "bin packing you you reserve um effectively large chunks of space such",
    "start": "2289760",
    "end": "2295560"
  },
  {
    "text": "that you don't you don't always pick like the best solution uh in Tetris you don't pick like the piece that exactly",
    "start": "2295560",
    "end": "2300960"
  },
  {
    "text": "fits instead you pick the piece that forms uh another shape that you know might be coming in the future so you",
    "start": "2300960",
    "end": "2307200"
  },
  {
    "text": "might form a gap that perfectly fits the t-shape even though you don't have a t-shape on your map it's not the next",
    "start": "2307200",
    "end": "2313040"
  },
  {
    "text": "one then when the t-shape becomes available you can clear three rows out instead of just one so that's kind of",
    "start": "2313040",
    "end": "2318960"
  },
  {
    "text": "the the metaphor I like to use there good metaphor so do you uh do you have",
    "start": "2318960",
    "end": "2324079"
  },
  {
    "text": "any sort of visualization of the cluster like we saw with dcos previously so we",
    "start": "2324079",
    "end": "2329200"
  },
  {
    "text": "do have a visualization tool um it's currently in beta um it is not going to be open source first um we're going to",
    "start": "2329200",
    "end": "2336079"
  },
  {
    "text": "have an open source UI um in the future but um part of our commercial offering",
    "start": "2336079",
    "end": "2342079"
  },
  {
    "text": "uh we'll have a UI but I don't I don't want to talk about it because it's paid",
    "start": "2342079",
    "end": "2347280"
  },
  {
    "text": "okay um what are you guys using nomat 4 at hashicorp right now uh so we have",
    "start": "2347280",
    "end": "2353800"
  },
  {
    "text": "more than guys we have female employees too so we are uh we are running our entire production infrastructure on",
    "start": "2353800",
    "end": "2359560"
  },
  {
    "text": "Nomad so we uh we believe in dog fooding for those of you that haven't heard that term it's like eating your own products",
    "start": "2359560",
    "end": "2367119"
  },
  {
    "text": "um so internally we use all of our own products we use console for service Discovery Nomad runs our production and staging environments it also runs our",
    "start": "2367119",
    "end": "2373680"
  },
  {
    "text": "on- premise um tool so if you buy on Prem we actually install Nomad on your",
    "start": "2373680",
    "end": "2379560"
  },
  {
    "text": "infrastructure and that's what runs the commercial product cool thank you that's all the questions give them hand",
    "start": "2379560",
    "end": "2388040"
  }
]