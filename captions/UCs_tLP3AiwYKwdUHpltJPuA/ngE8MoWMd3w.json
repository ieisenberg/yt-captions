[
  {
    "text": "hello everybody uh so today I'm going to talk about timeouts uh timeouts you",
    "start": "9120",
    "end": "14799"
  },
  {
    "text": "cannot trust them just because they give you misconceptions sort of like how this is",
    "start": "14799",
    "end": "20480"
  },
  {
    "text": "called a green room but it's not green right but you keep believing that it's the Green Room so uh it's a it's a",
    "start": "20480",
    "end": "27320"
  },
  {
    "text": "mostly based on um my experience working at Twitter so let me just tell you a",
    "start": "27320",
    "end": "33559"
  },
  {
    "text": "little bit of story so this is a very famous at least at Twitter this is a very famous tweet uh coming from 2014",
    "start": "33559",
    "end": "42879"
  },
  {
    "text": "Oscars uh where Alan called her followers to retweet and favorite this",
    "start": "42879",
    "end": "49239"
  },
  {
    "text": "tweet as much as possible while I do not believe that this is the best photo ever",
    "start": "49239",
    "end": "54960"
  },
  {
    "text": "uh this was the Tweet of the year in 2014 for Twitter and for anybody who was",
    "start": "54960",
    "end": "60440"
  },
  {
    "text": "actually on call that night uh they remembered it as the tweet",
    "start": "60440",
    "end": "67600"
  },
  {
    "text": "that caused a spectacular incident that kept everybody busy for the next several",
    "start": "67600",
    "end": "73400"
  },
  {
    "text": "months so um as much as Ellen wants to believe that she single-handedly brought",
    "start": "73400",
    "end": "79360"
  },
  {
    "text": "on Twitter uh I think the reality is she started it she had very enthusi",
    "start": "79360",
    "end": "85640"
  },
  {
    "text": "enthusiastic followers who participated well but quickly the whole play out took",
    "start": "85640",
    "end": "91600"
  },
  {
    "text": "got to taken over by retries timeouts and all those mechanisms in our data",
    "start": "91600",
    "end": "97479"
  },
  {
    "text": "centers that were supposed to prevent you know bad things from happening and in the center of that storm was actually",
    "start": "97479",
    "end": "105399"
  },
  {
    "text": "cash this uh brought us to who who I am so I was working on cash at Twitter for",
    "start": "105399",
    "end": "113079"
  },
  {
    "text": "uh six and some years so I've been there for seven years and it's I for the majority of that time I was working on",
    "start": "113079",
    "end": "119119"
  },
  {
    "text": "cash so made me a dinosaur especially by Silicon Valley standards um now I have",
    "start": "119119",
    "end": "124680"
  },
  {
    "text": "carried the spirit of cash onto my new team which is working on performance in general but cash is an interesting",
    "start": "124680",
    "end": "131640"
  },
  {
    "text": "example because it's such a simple in concept but critical in terms of",
    "start": "131640",
    "end": "137160"
  },
  {
    "text": "performance piece so allowed me to observe a lot of the the distributed system",
    "start": "137160",
    "end": "142680"
  },
  {
    "text": "behaviors just at play at very high scale so why do I want to give this talk",
    "start": "142680",
    "end": "150080"
  },
  {
    "text": "you see for a number of years I was on cash and that means I was on call for cash for all those years so every time",
    "start": "150080",
    "end": "157720"
  },
  {
    "text": "something happens and and inevitably the things that matter use cash right so so",
    "start": "157720",
    "end": "163040"
  },
  {
    "text": "someone would observe that their cash requests started timing out and they're retried kicked in and they say oh the",
    "start": "163040",
    "end": "171000"
  },
  {
    "text": "cash is not behaving quite well let's page the cash on call so so often I got",
    "start": "171000",
    "end": "176599"
  },
  {
    "text": "woken up in the middle of the night and I had to look at a bunch of Dash dashboards and I say you know what I",
    "start": "176599",
    "end": "182800"
  },
  {
    "text": "don't think this is cash so if anybody watches House MD it happened about as as",
    "start": "182800",
    "end": "188040"
  },
  {
    "text": "much as when they say it's not lupus right it's never lupus except when it is",
    "start": "188040",
    "end": "193560"
  },
  {
    "text": "it's like once or twice so uh you can you can imagine when I go to uh the",
    "start": "193560",
    "end": "199120"
  },
  {
    "text": "incident room or the chat room telling people it's not my fault they they're not the happiest about it so they they",
    "start": "199120",
    "end": "205200"
  },
  {
    "text": "kept pressing they say okay if it's not cash why are my cash requests timing out",
    "start": "205200",
    "end": "211319"
  },
  {
    "text": "why am I re retrying cash requests you got to have an explanation for this and",
    "start": "211319",
    "end": "216720"
  },
  {
    "text": "if you think if you think it's something else tell us what that thing is right so",
    "start": "216720",
    "end": "221920"
  },
  {
    "text": "that's when I started actually looking at other people's code because I realize",
    "start": "221920",
    "end": "226959"
  },
  {
    "text": "this will kept happening if I if I don't tell them exactly what's going on so I",
    "start": "226959",
    "end": "233040"
  },
  {
    "text": "did that for a number of years and after telling about 20 or 30 or who knows how",
    "start": "233040",
    "end": "238079"
  },
  {
    "text": "many teams that this is happening I realized you know what maybe it's not just this one or two or three maybe it's",
    "start": "238079",
    "end": "245120"
  },
  {
    "text": "worth telling more people about what actually happened if you see Behavior like that and the reason I'm here at the",
    "start": "245120",
    "end": "252959"
  },
  {
    "text": "conference called Yao is it's literally calling my name so when I got an invitation I'm like I have to come here",
    "start": "252959",
    "end": "259720"
  },
  {
    "text": "to my knowledge I'm the first ya speaking at Ya so very proud so what do I know so I I think you",
    "start": "259720",
    "end": "267040"
  },
  {
    "text": "need to know my know my limitations to sort of take the right message away I've only really worked on cach in any kind",
    "start": "267040",
    "end": "274560"
  },
  {
    "text": "of depth so so that really shapes my view if you have a system that's very very different it may behave differently",
    "start": "274560",
    "end": "280720"
  },
  {
    "text": "so this may not matter as much and the other thing to note is I have been working on Twitter's environment which",
    "start": "280720",
    "end": "288000"
  },
  {
    "text": "have may have some similarities to what you're familiar with but maybe not so let's uh look a little bit uh closely at",
    "start": "288000",
    "end": "294960"
  },
  {
    "text": "what I mean by those two things first is what is cach in data centers so caching",
    "start": "294960",
    "end": "300720"
  },
  {
    "text": "data really is just very large distributed in memory key value store and the operations is extremely simple",
    "start": "300720",
    "end": "306880"
  },
  {
    "text": "you send atcp create create a connection send a request in some very cheap to",
    "start": "306880",
    "end": "312280"
  },
  {
    "text": "encode format and you get a response back and uh the the the catch here",
    "start": "312280",
    "end": "317560"
  },
  {
    "text": "really is we're serving many many requests in a given time so uh I'm",
    "start": "317560",
    "end": "323680"
  },
  {
    "text": "talking about single cluster serving tens of millions of requests per second or collectively hundreds of minims of",
    "start": "323680",
    "end": "330840"
  },
  {
    "text": "request per second so to give you an idea of the scale we can do this because it's really dumb right I'm not trying to",
    "start": "330840",
    "end": "336039"
  },
  {
    "text": "say I'm doing working on super fancy stuff it's very simple uh the other thing is it's it has very tight latency",
    "start": "336039",
    "end": "343319"
  },
  {
    "text": "expectations people do expect cash request to come back usually under a",
    "start": "343319",
    "end": "348479"
  },
  {
    "text": "millisecond but in the worst cases only a few milliseconds or or tens of milliseconds right so so this means that",
    "start": "348479",
    "end": "355880"
  },
  {
    "text": "there is much less room for all kinds of weird things",
    "start": "355880",
    "end": "361240"
  },
  {
    "text": "so uh what does Twitter's environment mean Twitter's environment went through architectural changes where we started",
    "start": "361240",
    "end": "366960"
  },
  {
    "text": "with uh Ruby on Rails which we call the monor rail and then get broken down into",
    "start": "366960",
    "end": "372039"
  },
  {
    "text": "uh SOA and today everybody wants to say that's called microservices we will come to that later and uh because we own data",
    "start": "372039",
    "end": "380080"
  },
  {
    "text": "centers uh there's a lot of things we can do right uh we we have access to physical hardware and uh Twitter is",
    "start": "380080",
    "end": "388000"
  },
  {
    "text": "known as a scholar shop but in reality we have both Java Scala the commonality is most of the heavy lifting happens on",
    "start": "388000",
    "end": "394840"
  },
  {
    "text": "top of jvm so if you don't have jvm things may be different and we have been",
    "start": "394840",
    "end": "400360"
  },
  {
    "text": "very aggressively moved to a containerized environment so our container solution of choice is Aurora",
    "start": "400360",
    "end": "406400"
  },
  {
    "text": "mesos I think kubernetes actually share a lot of the same constraint when it comes to resources and in terms of scale",
    "start": "406400",
    "end": "414319"
  },
  {
    "text": "what I have seen is you know thousands of nodes per service Maybe 10,000 but",
    "start": "414319",
    "end": "421360"
  },
  {
    "text": "that's the largest we have so to give you an idea of scale so let's take a step back and and",
    "start": "421360",
    "end": "428199"
  },
  {
    "text": "and and say and see why we are talking about timeouts Al together right it's",
    "start": "428199",
    "end": "433240"
  },
  {
    "text": "it's a very short intro don't worry about it so I I think it boils down to the real word is not perfect in the 70s",
    "start": "433240",
    "end": "440879"
  },
  {
    "text": "there were papers and there were discussions about uh what is formalized as two general problem what it actually",
    "start": "440879",
    "end": "447639"
  },
  {
    "text": "says is essentially you cannot have uh you cannot have consensus over links",
    "start": "447639",
    "end": "455160"
  },
  {
    "text": "that are unreliable so theoretically you know the system can end in any state",
    "start": "455160",
    "end": "460319"
  },
  {
    "text": "it's just not going to be happy um but that did not stop Engineers Engineers uh say you know",
    "start": "460319",
    "end": "467720"
  },
  {
    "text": "theoretically we're not going to reach a consensus but that doesn't matter in practice we can get to very very close",
    "start": "467720",
    "end": "473919"
  },
  {
    "text": "to the ideal and the way they do that is they use a timer say I will bond my",
    "start": "473919",
    "end": "480840"
  },
  {
    "text": "attempt by this amount of time if things don't work out I'll do it again so this",
    "start": "480840",
    "end": "486360"
  },
  {
    "text": "gives us three tries and of course the uh failure could happen on either",
    "start": "486360",
    "end": "491800"
  },
  {
    "text": "direction of the communication so in this case it doesn't make a difference for uh the person on the left she will",
    "start": "491800",
    "end": "498400"
  },
  {
    "text": "still retry upon the time of fing and there are other system in which",
    "start": "498400",
    "end": "504599"
  },
  {
    "text": "you would just proactively send out many messages and hoping the majority of them or some number of them will come back",
    "start": "504599",
    "end": "510360"
  },
  {
    "text": "and this is known as Quorum it's not used super well because sending a lot of requests instead of one and waight is a",
    "start": "510360",
    "end": "517039"
  },
  {
    "text": "lot more costly so really um that's the essence",
    "start": "517039",
    "end": "522560"
  },
  {
    "text": "of the engineering approach to this problem of imperfect communication is is",
    "start": "522560",
    "end": "527680"
  },
  {
    "text": "Timeout and retri that's why we're talking about it and finally uh because we a lot of us run Services here nothing",
    "start": "527680",
    "end": "534680"
  },
  {
    "text": "is done only once you keep doing the same thing over and over again so if you have try the same request a bunch of",
    "start": "534680",
    "end": "540959"
  },
  {
    "text": "times and the remote service doesn't seem to be responding you decide that you need to do something smarter right",
    "start": "540959",
    "end": "547519"
  },
  {
    "text": "instead of trying to hit the dead beat the dead horse maybe you should go to someone else or maybe you just give a",
    "start": "547519",
    "end": "554279"
  },
  {
    "text": "alt together say I cannot do this right now you return a 404 return a 500 what not and just live with",
    "start": "554279",
    "end": "560959"
  },
  {
    "text": "it so uh we have timeouts we have retries and we sometimes take more uh",
    "start": "560959",
    "end": "568040"
  },
  {
    "text": "sort of larger scale action as our mechanisms to coping with failure",
    "start": "568040",
    "end": "573680"
  },
  {
    "text": "in distributed systems and and anybody who has worked on large scale distribut systems know that the business Logic the",
    "start": "573680",
    "end": "580800"
  },
  {
    "text": "happy you can hack a prototype doing something cool in a very short amount of time to bring that system to production",
    "start": "580800",
    "end": "587120"
  },
  {
    "text": "is actually the vast majority of the work so right so the complexity of distributed systems some say would you",
    "start": "587120",
    "end": "593040"
  },
  {
    "text": "know is is mostly in the AG cases or failure handling cases and a Vari a",
    "start": "593040",
    "end": "598760"
  },
  {
    "text": "different Vari of that quote would be the first 90% of the project takes 90%",
    "start": "598760",
    "end": "604000"
  },
  {
    "text": "of the time and the last 10% of the project also takes 90% of the time right so this gives you that tells you a lot",
    "start": "604000",
    "end": "610800"
  },
  {
    "text": "about how tricky and difficult it is to to get the fater cases ironed",
    "start": "610800",
    "end": "616040"
  },
  {
    "text": "out so just to Let's uh I I just want to have make sure everybody has sort of a mentor model of how this is usually",
    "start": "616040",
    "end": "623399"
  },
  {
    "text": "seeing right you have a request you usually go to a remote service you have a timer and you usually want to retry",
    "start": "623399",
    "end": "630360"
  },
  {
    "text": "because you intuitively know that if you try it again it may succeed so improve your overall success rate and if the the",
    "start": "630360",
    "end": "639160"
  },
  {
    "text": "result from that is unsatisfactory you may or may not decide to do something else to prevent future failures from",
    "start": "639160",
    "end": "645040"
  },
  {
    "text": "happening right so this is the sort of the a very intuitive naive failure handling model that a lot of Engineers",
    "start": "645040",
    "end": "651839"
  },
  {
    "text": "would keep in mind so how do we character characterize these mechanisms I think there are",
    "start": "651839",
    "end": "657760"
  },
  {
    "text": "certain things that sort of stood out and and is worth mentioning first because there's no way of getting a",
    "start": "657760",
    "end": "664240"
  },
  {
    "text": "perfect knowledge of the communication over link uh timeout is p merely uh",
    "start": "664240",
    "end": "669760"
  },
  {
    "text": "approximation right so so I feel like people know this in theory they often forget about it in practice is that when",
    "start": "669760",
    "end": "677240"
  },
  {
    "text": "you say something has timed out you're calling it a failure and and it may may",
    "start": "677240",
    "end": "682720"
  },
  {
    "text": "or may not actually have failed so so the thing to know to remember about",
    "start": "682720",
    "end": "687760"
  },
  {
    "text": "timeouts is when you have a timeout there is a chance of false positive so",
    "start": "687760",
    "end": "693639"
  },
  {
    "text": "the request may be just perfectly fine you just have a time out that's too short or something that's not expected",
    "start": "693639",
    "end": "700279"
  },
  {
    "text": "so on and so forth and the thing about retry is retry is an effort that means",
    "start": "700279",
    "end": "706320"
  },
  {
    "text": "your service is actually doing work this work is something that you may or may not have budgeted for because maybe",
    "start": "706320",
    "end": "713440"
  },
  {
    "text": "normally you don't need it right so and the other thing that is uh even a less",
    "start": "713440",
    "end": "719720"
  },
  {
    "text": "obvious is retry often changes the state of the system so we'll come back to that",
    "start": "719720",
    "end": "725880"
  },
  {
    "text": "later because but this is important because when you have a system and it's in retry and it's in a different state",
    "start": "725880",
    "end": "733480"
  },
  {
    "text": "whatever benchmarking or testing or reasoning you do for the normal state may not apply the characteristics of the",
    "start": "733480",
    "end": "740519"
  },
  {
    "text": "system may change so you may not get the same behavior if the state is different",
    "start": "740519",
    "end": "745760"
  },
  {
    "text": "finally failure prevention uh it's it's a uh I would characterize it as an",
    "start": "745760",
    "end": "751639"
  },
  {
    "text": "escalation meaning that if you made a good decision you are now making a good decision for a bigger system if you if",
    "start": "751639",
    "end": "759720"
  },
  {
    "text": "you made a bad decision there's also a chance that you are bringing that bad decision to your entire system right so",
    "start": "759720",
    "end": "766040"
  },
  {
    "text": "so it can go either way so I think what we have seen uh at",
    "start": "766040",
    "end": "772720"
  },
  {
    "text": "least in our production is with regard to these mechanism is what works",
    "start": "772720",
    "end": "779240"
  },
  {
    "text": "intuitively what works in our mind or what works when we are doing small local tests often ends up leading to",
    "start": "779240",
    "end": "786160"
  },
  {
    "text": "catastrophic outcomes as in the case of the Oscar tweet so uh why exactly is",
    "start": "786160",
    "end": "793000"
  },
  {
    "text": "that happening this way first let's look at",
    "start": "793000",
    "end": "801560"
  },
  {
    "text": "timeouts timeout is uh in this in this uh in this illustration time out you're",
    "start": "803199",
    "end": "809959"
  },
  {
    "text": "uh it shows as something happening in the middle right so that's how a lot of people perceive it is communication has",
    "start": "809959",
    "end": "816519"
  },
  {
    "text": "been interrupted between these two services so I think one of the common M",
    "start": "816519",
    "end": "821600"
  },
  {
    "text": "misconception is Timeout informs us about the communication to remote services but is that always",
    "start": "821600",
    "end": "829240"
  },
  {
    "text": "true that requires a deeper look at the sort of close-up look at what a modern service means a modern service doesn't",
    "start": "829240",
    "end": "836519"
  },
  {
    "text": "run on bare metal like almost never runs on bare metal just by itself it runs on a very deep",
    "start": "836519",
    "end": "842040"
  },
  {
    "text": "stack right you have your service application Logic on the top you may be using a number of libraries you may be",
    "start": "842040",
    "end": "848160"
  },
  {
    "text": "running on a virtual machine uh by virtual machine I mean you know jvm or other VM language VMS then it will run",
    "start": "848160",
    "end": "855600"
  },
  {
    "text": "on the operating system run on the Kernel and then it runs on physical hardware and underneath that you have",
    "start": "855600",
    "end": "861199"
  },
  {
    "text": "your shared INF Network infrastructure in the data center and if you scale this out to look",
    "start": "861199",
    "end": "867199"
  },
  {
    "text": "at the service that's local that's the service you care about that's your service and the service that you are",
    "start": "867199",
    "end": "873160"
  },
  {
    "text": "talking to uh I think the construct is often symmetrical so you have very deep",
    "start": "873160",
    "end": "879199"
  },
  {
    "text": "stack on both the local side and the remote side and for the discussion of",
    "start": "879199",
    "end": "884560"
  },
  {
    "text": "you know for this discussion we actually don't care so much about the remote side because if the remote stack is screwed I",
    "start": "884560",
    "end": "891279"
  },
  {
    "text": "don't really care where the error happens I would just you know consider the remote service being bad and I would",
    "start": "891279",
    "end": "897440"
  },
  {
    "text": "do something about it right but the import interesting thing here is for",
    "start": "897440",
    "end": "903399"
  },
  {
    "text": "your service you live on this very deep stack and there's nothing you can do about it right you cannot say I don't",
    "start": "903399",
    "end": "910680"
  },
  {
    "text": "like the kernel that I'm currently running on apparently it's doing something stupid I'm just going to swap",
    "start": "910680",
    "end": "916680"
  },
  {
    "text": "it out and and get a better kernel right that like I have heard of sort of failure ma pre prevention mechanisms",
    "start": "916680",
    "end": "923360"
  },
  {
    "text": "where you would just a service would just kill itself hoping that you'll move to somewhere else but I don't think that's a common practice most people",
    "start": "923360",
    "end": "929639"
  },
  {
    "text": "don't do that so this basically is the family that you're born into and then you can never get",
    "start": "929639",
    "end": "935800"
  },
  {
    "text": "up so if you have a request it has to Traverse this very deep stack go to the",
    "start": "935800",
    "end": "942040"
  },
  {
    "text": "remote service and come back and you have a if you have a timer chances are that your timer is at the very top and",
    "start": "942040",
    "end": "949639"
  },
  {
    "text": "you're measuring this whole trip not just the part that SP that's spent on network not just the part that's spent",
    "start": "949639",
    "end": "956240"
  },
  {
    "text": "on the remote service and there are so many things that could go wrong in that stack oh boy um so say",
    "start": "956240",
    "end": "964920"
  },
  {
    "text": "you have uh you know application is there anywhere where",
    "start": "964920",
    "end": "970000"
  },
  {
    "text": "resource can be contended like you know a queue that has a shared lock or you know some head of light blocking if",
    "start": "970000",
    "end": "976399"
  },
  {
    "text": "things are processed in order if you use libraries you know do you ever call Malo",
    "start": "976399",
    "end": "981600"
  },
  {
    "text": "Malo actually has indeterministic completion time right it can be very very fast if it comes from through loal",
    "start": "981600",
    "end": "988560"
  },
  {
    "text": "store memory it can be very slow if it it goes all the way to the kernel get a new page do some paging so so so a lot",
    "start": "988560",
    "end": "996240"
  },
  {
    "text": "of things could happen and when it comes down to Kernel the kernel does not only",
    "start": "996240",
    "end": "1001399"
  },
  {
    "text": "support your application it also needs to handle interrupts do IO all those things that are completely out of your",
    "start": "1001399",
    "end": "1007720"
  },
  {
    "text": "control also completely out of your view and when it comes to Hardware there's",
    "start": "1007720",
    "end": "1013079"
  },
  {
    "text": "blocking IO again there's congestion on the network potentially and there's psychos steing I have a uh a year years",
    "start": "1013079",
    "end": "1020120"
  },
  {
    "text": "ago there was a amazing incident in which it turns out the firmware uh on",
    "start": "1020120",
    "end": "1026160"
  },
  {
    "text": "the on the server that we're using are actually stopping all the CPUs in our",
    "start": "1026160",
    "end": "1033079"
  },
  {
    "text": "server you know without with no good reason so you will see the server basically Frozen for a number of seconds",
    "start": "1033079",
    "end": "1039760"
  },
  {
    "text": "without doing anything and and the konel cannot tell you anything because the kernel is entirely stopped and this is",
    "start": "1039760",
    "end": "1044918"
  },
  {
    "text": "all done by the by the you know firmer that's sort of underneath the kernel right so so all these complexities are",
    "start": "1044919",
    "end": "1051120"
  },
  {
    "text": "completely hidden away from from modern modern developers and of course there's",
    "start": "1051120",
    "end": "1056160"
  },
  {
    "text": "the network you can drop a packet the the deep quebe can overflow it can have",
    "start": "1056160",
    "end": "1061200"
  },
  {
    "text": "significant delay all those things so there's the Deep SC stack but things",
    "start": "1061200",
    "end": "1068039"
  },
  {
    "text": "get even more interesting when you are on uh a multi-tenant host this is true",
    "start": "1068039",
    "end": "1073840"
  },
  {
    "text": "if you are inside a container and Co co-owning or co- living in a in a",
    "start": "1073840",
    "end": "1080960"
  },
  {
    "text": "hardware with multiple containers so you have no visibility into anything any anybody else is doing",
    "start": "1080960",
    "end": "1088080"
  },
  {
    "text": "but all these Services still share the underlying kernel and under underlying hardware and unless you have your own VM",
    "start": "1088080",
    "end": "1096000"
  },
  {
    "text": "the protection between these services are actually not that great right so everybody knows that in a m tenant",
    "start": "1096000",
    "end": "1103200"
  },
  {
    "text": "environment your service is the good one everybody else is potentially bad and uh and what they do what do they do they",
    "start": "1103200",
    "end": "1109320"
  },
  {
    "text": "steal they steal your cycles and uh and you like no no no it's a container I'm I",
    "start": "1109320",
    "end": "1115039"
  },
  {
    "text": "have my assurances of these are the two CPUs that are mine and these are the memory that are mine someone is going to",
    "start": "1115039",
    "end": "1121320"
  },
  {
    "text": "enforce the policy yes but if you look carefully at how that policy is enforced",
    "start": "1121320",
    "end": "1127919"
  },
  {
    "text": "the guarantees are not as good as you think right so so for example both kubernetes and mesos use C group to",
    "start": "1127919",
    "end": "1135000"
  },
  {
    "text": "enforce CPU quota so you are in the long run supposed to get the fair share that",
    "start": "1135000",
    "end": "1140960"
  },
  {
    "text": "you declared but CP cgroup CPU policies are enforced by the schedu or every 100",
    "start": "1140960",
    "end": "1148720"
  },
  {
    "text": "millisecond so someone can swoop in and and steal all the cyclos for that 100 millisecond now they will be punished",
    "start": "1148720",
    "end": "1155559"
  },
  {
    "text": "they they you know they shove it in the corner and probably stay there for five five five cycles and they can come back",
    "start": "1155559",
    "end": "1161200"
  },
  {
    "text": "out but during those 100 milliseconds you are punished so your stuff is not",
    "start": "1161200",
    "end": "1166400"
  },
  {
    "text": "running someone else is stealing your cycle and and 100 minutes second in the data center is incredibly long amount of",
    "start": "1166400",
    "end": "1172360"
  },
  {
    "text": "time the the typical end to endend run trip in the single data center is well",
    "start": "1172360",
    "end": "1177400"
  },
  {
    "text": "under one misec right it's on the order of 400 500 microseconds so you can",
    "start": "1177400",
    "end": "1183280"
  },
  {
    "text": "send 200 request back and forth in the ideal condition by the time you are freed from this prison which is C group",
    "start": "1183280",
    "end": "1191240"
  },
  {
    "text": "so so just keep that in mind that actually multi tendency makes things a lot",
    "start": "1191240",
    "end": "1196600"
  },
  {
    "text": "worse and then we have this uh what I call timeout Cascade it's it's it's F",
    "start": "1196600",
    "end": "1203120"
  },
  {
    "text": "this is a little sort of there are a lot of pieces on this but essentially it's what happens when you have uh",
    "start": "1203120",
    "end": "1210360"
  },
  {
    "text": "dependencies that goes more than one step right so the first RPC call will go to from go from service a to service B",
    "start": "1210360",
    "end": "1217799"
  },
  {
    "text": "it will wait in some que that's inevitable there's Network Q there's on you know TCP socket buffer etc etc where",
    "start": "1217799",
    "end": "1224720"
  },
  {
    "text": "time is basically uncounted for you don't even know that exists and then you need to do some preparation computation",
    "start": "1224720",
    "end": "1230960"
  },
  {
    "text": "to handle this request and then you may send out another uh RPC request for the",
    "start": "1230960",
    "end": "1236720"
  },
  {
    "text": "second dependency and here what happens in real life is often time spent in these the",
    "start": "1236720",
    "end": "1244880"
  },
  {
    "text": "first two steps are not really carefully tracked so people have no visibility into how long it takes before they even",
    "start": "1244880",
    "end": "1251919"
  },
  {
    "text": "see the requests and that contributes to some of the misconceptions about timeout as well so to put things about timeout",
    "start": "1251919",
    "end": "1259200"
  },
  {
    "text": "together so the unfortunate truth is that timeouts often do not indicate the health of remote service even though",
    "start": "1259200",
    "end": "1265440"
  },
  {
    "text": "people sort seem to uh assume that because that's the natural thing to do and the optimal timeout is sort of a",
    "start": "1265440",
    "end": "1271919"
  },
  {
    "text": "moving Target because if you your environment changes often things sort of get pulled out from under your feet",
    "start": "1271919",
    "end": "1279159"
  },
  {
    "text": "right there's not much you can do about it so the characterization of that environment mind change over time and if",
    "start": "1279159",
    "end": "1284880"
  },
  {
    "text": "you use uh you live in a shared environment which is very cost efficient you have to deal with all these aspects",
    "start": "1284880",
    "end": "1291720"
  },
  {
    "text": "that makes your around time much less predict predictable and if you try to have a a global view of where you spend",
    "start": "1291720",
    "end": "1298240"
  },
  {
    "text": "time there are all these gaps where there's basically no light sh shown into and and you have black holes in your",
    "start": "1298240",
    "end": "1305400"
  },
  {
    "text": "timeline so here is a sort of a practical um exercise say we have a",
    "start": "1305400",
    "end": "1312559"
  },
  {
    "text": "chain dependency not too complicated just ABC and uh A's requests are timing out",
    "start": "1312559",
    "end": "1318799"
  },
  {
    "text": "but not bees you you are the you're let's say you're in the control tower you get to page don't calls for any of",
    "start": "1318799",
    "end": "1326159"
  },
  {
    "text": "the service owners who should you",
    "start": "1326159",
    "end": "1330720"
  },
  {
    "text": "page well in this case actually I think c c usually does not",
    "start": "1331240",
    "end": "1337919"
  },
  {
    "text": "get paged right so it's clear that you know C is actually returning request to be but between A and B either of them",
    "start": "1337919",
    "end": "1345880"
  },
  {
    "text": "can be at fault right so so it could be either a or b or both of them so what",
    "start": "1345880",
    "end": "1352960"
  },
  {
    "text": "the control tower would do is they would page both of them all right so so that's a easy run now A and B are both timing",
    "start": "1352960",
    "end": "1360000"
  },
  {
    "text": "out who should you page so now that come so if you just look at B and C you get the same",
    "start": "1360000",
    "end": "1365600"
  },
  {
    "text": "conclusion could be either B or C or B and C now you just add a to the F Formula you get basically all the",
    "start": "1365600",
    "end": "1372520"
  },
  {
    "text": "combinations right you can be it can be AC AB ABC BC or B or C like like like at",
    "start": "1372520",
    "end": "1380720"
  },
  {
    "text": "that point the person on course like I I don't know like it I just call everybody so so that's how I ended up in",
    "start": "1380720",
    "end": "1387200"
  },
  {
    "text": "the room every time right is I'm the C here and if B is timing out I can almost",
    "start": "1387200",
    "end": "1392840"
  },
  {
    "text": "be sure that I will be there because nobody can't figure out what's going on so that's just one chain now modern",
    "start": "1392840",
    "end": "1403000"
  },
  {
    "text": "application architecture is a is a is a wonderful place where you will have a mesh of dependen",
    "start": "1403000",
    "end": "1409120"
  },
  {
    "text": "right that's the promise of the microservice architecture Ora architecture is you can have all these",
    "start": "1409120",
    "end": "1414960"
  },
  {
    "text": "services in independently evolve and you can just call your dependencies when you need to and you often end up with a mess",
    "start": "1414960",
    "end": "1423440"
  },
  {
    "text": "and if you think that's spagetti is bad this is an actual sort of dependency",
    "start": "1423440",
    "end": "1429400"
  },
  {
    "text": "or call chart graph of Twitter and I stole this picture from uh Katie's",
    "start": "1429400",
    "end": "1434600"
  },
  {
    "text": "slides who she spoke at Yao last year so so if you go look at the archive this",
    "start": "1434600",
    "end": "1440480"
  },
  {
    "text": "was in her slides as well so compared to this the spaghetti actually didn't look so bad did",
    "start": "1440480",
    "end": "1447679"
  },
  {
    "text": "it so what does it mean it means you know uh so uh I'm pushing the wrong",
    "start": "1447679",
    "end": "1455520"
  },
  {
    "text": "button here so I think a lot of people uh I think this has been drilled into",
    "start": "1455520",
    "end": "1460559"
  },
  {
    "text": "scientists over a number of years saying correlation is not does not equal to causality so what I think should happen",
    "start": "1460559",
    "end": "1467919"
  },
  {
    "text": "for distributed systems Engineers is sort of just repeat this to yourself every time something like this happens",
    "start": "1467919",
    "end": "1474440"
  },
  {
    "text": "is Time Out does not cause that does not equal to a causality if you want to figure out what causes what you really",
    "start": "1474440",
    "end": "1481600"
  },
  {
    "text": "need to find the signal somewhere else all right so that's time out now",
    "start": "1481600",
    "end": "1486919"
  },
  {
    "text": "let's talk about retry uh unfortunately it doesn't really get better it's it's going to get",
    "start": "1486919",
    "end": "1493000"
  },
  {
    "text": "worse so we still have our mental model um and the intuitive understanding is we",
    "start": "1493000",
    "end": "1498720"
  },
  {
    "text": "tries to improve the success rate of my service because the first time it failed the second time it may not right this is",
    "start": "1498720",
    "end": "1505919"
  },
  {
    "text": "true if the failures are actually entirely independent and you start from the same place and neither of these two",
    "start": "1505919",
    "end": "1512880"
  },
  {
    "text": "assumptions are are necessarily true in your reproduction system so what ends up",
    "start": "1512880",
    "end": "1518679"
  },
  {
    "text": "happening is so there are three few things to consider first we said retri",
    "start": "1518679",
    "end": "1523840"
  },
  {
    "text": "exra work right so clearly the person sending the request needs to do twice as much work if not more if they want to do",
    "start": "1523840",
    "end": "1530600"
  },
  {
    "text": "the same request twice and if the communication is sort of sabotaged on",
    "start": "1530600",
    "end": "1535840"
  },
  {
    "text": "the on the way back now both sides needs to do twice as much",
    "start": "1535840",
    "end": "1542159"
  },
  {
    "text": "work right so uh that's number one number two retry it doesn't even equal",
    "start": "1542159",
    "end": "1547520"
  },
  {
    "text": "to replay it's not the same thing twice unless unlike the simple illustration potentially you actually change the",
    "start": "1547520",
    "end": "1553320"
  },
  {
    "text": "behavior so it's very common for example when you have RPC timeout to say I'm going to close the connection because I",
    "start": "1553320",
    "end": "1559360"
  },
  {
    "text": "have no idea at this point what data is in the pipe right so I'm going to have a cling slate so now you're reopening a",
    "start": "1559360",
    "end": "1564919"
  },
  {
    "text": "new connection and open your connection is actually work right so that's not the same as just sending a request over",
    "start": "1564919",
    "end": "1570399"
  },
  {
    "text": "existing connection the other thing is the state has changed okay so you have a new connection new object you have guess",
    "start": "1570399",
    "end": "1577080"
  },
  {
    "text": "what you have more garbage if you are running on top of jbm and there's also",
    "start": "1577080",
    "end": "1583000"
  },
  {
    "text": "hidden retries in the lower stack TCP retries nobody ever thinks about it so you think you're doing one retry at the",
    "start": "1583000",
    "end": "1589000"
  },
  {
    "text": "top it could be three packets going out on the wire right so all these things are happening without everybody noticing",
    "start": "1589000",
    "end": "1596120"
  },
  {
    "text": "and also retry is not as simple a decision as timeouts timeouts you have one number that's pretty much it retry",
    "start": "1596120",
    "end": "1602320"
  },
  {
    "text": "you need to consider how many times do you retry and how do you side the time set the timeout for subsequent retries",
    "start": "1602320",
    "end": "1608440"
  },
  {
    "text": "how much do you wait between retries and how do you write the retry logic exactly because it can be different and where do",
    "start": "1608440",
    "end": "1614960"
  },
  {
    "text": "you go because you may not go to the original service so all these are fiddly tuning knobs that you need to be aware",
    "start": "1614960",
    "end": "1621480"
  },
  {
    "text": "of so finally uh let's say uh for retries it is extra work and therefore",
    "start": "1621480",
    "end": "1629480"
  },
  {
    "text": "it can create a positive feedback loop where you're loading an overloaded system and it can change the system",
    "start": "1629480",
    "end": "1635760"
  },
  {
    "text": "behavior and it can change the system state so you're looking at an entirely different service from the one you are",
    "start": "1635760",
    "end": "1641760"
  },
  {
    "text": "familiar with in steady state and to configure retry in a sophisticated way",
    "start": "1641760",
    "end": "1647440"
  },
  {
    "text": "actually has to deal with a lot of parameters so if you have chained",
    "start": "1647440",
    "end": "1654640"
  },
  {
    "text": "dependencies here's another uh fun sort of exercise well I guess the answer is",
    "start": "1654640",
    "end": "1660120"
  },
  {
    "text": "given out already so if C is slow it's it's straightforward right B would time out and B will retry and if you don't",
    "start": "1660120",
    "end": "1666760"
  },
  {
    "text": "set your timeout for a correctly B timing out could actually result in a",
    "start": "1666760",
    "end": "1671880"
  },
  {
    "text": "timing out as well so a decides to retry so now you suddenly have four times as much traffic to a service that",
    "start": "1671880",
    "end": "1679679"
  },
  {
    "text": "overloaded and if B is slow things actually can look strikingly similar to",
    "start": "1679679",
    "end": "1685279"
  },
  {
    "text": "if C is slow right B is slow and therefore B times out B says oh c must",
    "start": "1685279",
    "end": "1690360"
  },
  {
    "text": "be bad so it it does twice as much work trying to send more across to C and of course because B is slow a is going to",
    "start": "1690360",
    "end": "1696840"
  },
  {
    "text": "time out you still end up four times with four times as much traffic to C so",
    "start": "1696840",
    "end": "1702200"
  },
  {
    "text": "otherwise would be healthy service can be dragged into Oblivion even even if something you know",
    "start": "1702200",
    "end": "1709120"
  },
  {
    "text": "just depends on it as slow so now we can talk about the uh famous",
    "start": "1709120",
    "end": "1718799"
  },
  {
    "text": "incident um I think it was interesting because it basically it was a perfect storm to to facilitate this kind of Fe",
    "start": "1718799",
    "end": "1726640"
  },
  {
    "text": "positive feedback loop let's look at what those conditions were so first when we have timeouts at the time we decided",
    "start": "1726640",
    "end": "1733440"
  },
  {
    "text": "we want to tear down the connection and have a clean start right and the second thing is we have a large number of",
    "start": "1733440",
    "end": "1739480"
  },
  {
    "text": "clients you can you can imagine the service uh responsible for tweet would be one of the more uh prominent services",
    "start": "1739480",
    "end": "1746679"
  },
  {
    "text": "at Twitter and and and each one of these clients actually have multiple connections and a variable number of",
    "start": "1746679",
    "end": "1751960"
  },
  {
    "text": "connections to to cat because the lad can go up and down and we have a full connectivity mesh because we don't want",
    "start": "1751960",
    "end": "1757600"
  },
  {
    "text": "the middleman it's cheaper to run that way so every front end just talks to every cach and uh finally uh we already",
    "start": "1757600",
    "end": "1764679"
  },
  {
    "text": "moved on to container based deploy so everything is run on container subject to the cgroup rules that I talked about",
    "start": "1764679",
    "end": "1771679"
  },
  {
    "text": "earlier so the thing the event went out as this so Allan you know successfully",
    "start": "1771679",
    "end": "1778559"
  },
  {
    "text": "brought introduced a hotspot on one of the cash back ends and of course that cash back end is going to be a little",
    "start": "1778559",
    "end": "1784080"
  },
  {
    "text": "slower so so there's timeout happening on the on the client for that particular",
    "start": "1784080",
    "end": "1789279"
  },
  {
    "text": "uh tweet so what they do is they say oh let's clean up these connections and",
    "start": "1789279",
    "end": "1794480"
  },
  {
    "text": "then you have a initial connect storm right so they still want the Tweet they",
    "start": "1794480",
    "end": "1799519"
  },
  {
    "text": "will reconnect and resend request now you have a lot of outstanding connection",
    "start": "1799519",
    "end": "1805039"
  },
  {
    "text": "requests to the same host and and and and connecting turns out to be actually more expensive than the actual requests",
    "start": "1805039",
    "end": "1811840"
  },
  {
    "text": "themselves so now you have even more timeouts now because we have a full mesh",
    "start": "1811840",
    "end": "1817880"
  },
  {
    "text": "the time timeouts is going to affect every single front and server trying to",
    "start": "1817880",
    "end": "1823240"
  },
  {
    "text": "talk to cash and and then you get more more clients doing the same thing we end",
    "start": "1823240",
    "end": "1828360"
  },
  {
    "text": "up with a bigger stom and in the end the Nick is saturated with just TCP sing",
    "start": "1828360",
    "end": "1837200"
  },
  {
    "text": "packets that's when we declare bankruptcy so um so you can see that in",
    "start": "1837559",
    "end": "1843840"
  },
  {
    "text": "the in a in a service mesh the top level retries really have a lot of power right you can trigger a lot of work deeper",
    "start": "1843840",
    "end": "1850720"
  },
  {
    "text": "down the stack and the lower you are in the stack actually there a bigger multiplier that potentially could be if",
    "start": "1850720",
    "end": "1857519"
  },
  {
    "text": "the if the timeouts tend to compound and it's very hard to predict where the original bottleneck is because things",
    "start": "1857519",
    "end": "1863519"
  },
  {
    "text": "are connected in such a way that anywhere either side of the of the link could be the cause and and the cause can",
    "start": "1863519",
    "end": "1870440"
  },
  {
    "text": "propagate to other parts so reasoning about it is really hard",
    "start": "1870440",
    "end": "1875840"
  },
  {
    "text": "so after all that we still want to do more we want to prevent failures from",
    "start": "1875840",
    "end": "1881559"
  },
  {
    "text": "affecting future requests so I'm not going to spend too much time here because how people do",
    "start": "1881559",
    "end": "1888240"
  },
  {
    "text": "failure prevention actually it's highly service specific right so the way you",
    "start": "1888240",
    "end": "1893720"
  },
  {
    "text": "prevent future failures for a stateful service would be very different from a stateless service but what tends to",
    "start": "1893720",
    "end": "1899200"
  },
  {
    "text": "happen is you have a bit of information you try to make a decision on behalf of the entire system um with this uh with",
    "start": "1899200",
    "end": "1905880"
  },
  {
    "text": "the information you have so it's there's always the possibility of propagating",
    "start": "1905880",
    "end": "1911519"
  },
  {
    "text": "what is a local failure to to Global if you only act on a local information you",
    "start": "1911519",
    "end": "1917240"
  },
  {
    "text": "can make what would otherwise be a Transit failure if you think that's severe enough you can promote that to be",
    "start": "1917240",
    "end": "1922880"
  },
  {
    "text": "a global failure so you now are are actually making things worse for a longer time and if you make uh failure",
    "start": "1922880",
    "end": "1930200"
  },
  {
    "text": "prevention decisions on local nodes individually they may end up in different places causing inconsistency",
    "start": "1930200",
    "end": "1937720"
  },
  {
    "text": "in the entire system so none of the intuitive",
    "start": "1937720",
    "end": "1943039"
  },
  {
    "text": "understandings of the uh failure coping mechanisms are actually true if you look at them closely",
    "start": "1943039",
    "end": "1948519"
  },
  {
    "text": "and I think this is so because uh because fundamentally is because of the",
    "start": "1948519",
    "end": "1953600"
  },
  {
    "text": "limitations of very little input as well as having your logic actually dominated",
    "start": "1953600",
    "end": "1960399"
  },
  {
    "text": "by a single uh feedback loop that is prone to positive having becoming a",
    "start": "1960399",
    "end": "1966080"
  },
  {
    "text": "positive feedback loop right so if you are familiar with systems the theory then it's actually inevitable that if",
    "start": "1966080",
    "end": "1972440"
  },
  {
    "text": "you only have one Loop in your system that Loop can sometimes dominate The behavior and you can only reach",
    "start": "1972440",
    "end": "1978360"
  },
  {
    "text": "equilbrium when you have multiple Loops that are sort of uh constraining each other so really this is where we want to",
    "start": "1978360",
    "end": "1985799"
  },
  {
    "text": "be is we want to bring in more information and we want to bring in more",
    "start": "1985799",
    "end": "1992120"
  },
  {
    "text": "different mechanisms into our system so I think uh we should always",
    "start": "1992120",
    "end": "1999159"
  },
  {
    "text": "start with uh what I would call the Baseline so so understand what's the reality if you run services in data data",
    "start": "1999159",
    "end": "2004799"
  },
  {
    "text": "centers right I I'm not I'm not saying you not looking at this I'm actually fairly confident that everybody in this",
    "start": "2004799",
    "end": "2010919"
  },
  {
    "text": "room already knows what it's like to have a machine going down what it's like to have a rack going down but what",
    "start": "2010919",
    "end": "2017639"
  },
  {
    "text": "people uh don't think about often is are there things that happen just as often",
    "start": "2017639",
    "end": "2023679"
  },
  {
    "text": "as machine going down or more often for example do you GC you probably GC way more than Services going down have you",
    "start": "2023679",
    "end": "2030399"
  },
  {
    "text": "ever characterized the behavior of GC how much do you get you know Frozen or hold up because of GC how much does you",
    "start": "2030399",
    "end": "2037919"
  },
  {
    "text": "know some kernel background task run every time and how often does it run does it happen more or less than hard",
    "start": "2037919",
    "end": "2044919"
  },
  {
    "text": "failure so a lot of times those things happen way more often but people don't look at it because these are the sort of",
    "start": "2044919",
    "end": "2050240"
  },
  {
    "text": "commonly known failures but I think these are great uh baselines so if you're considering these events you",
    "start": "2050240",
    "end": "2056760"
  },
  {
    "text": "should definitely consider events that happen even more often so uh the other thing is so so if",
    "start": "2056760",
    "end": "2063000"
  },
  {
    "text": "you have a common understanding of what is uh what is the com what are the common events then you're on a good",
    "start": "2063000",
    "end": "2068839"
  },
  {
    "text": "footing for building good timeouts so so I think for good timeouts the goal",
    "start": "2068839",
    "end": "2074480"
  },
  {
    "text": "really is to minimize the chance of having false positives which um means we",
    "start": "2074480",
    "end": "2080440"
  },
  {
    "text": "actually need to look down and see what's the behavior of the library what's the behavior of the kernel what's",
    "start": "2080440",
    "end": "2086560"
  },
  {
    "text": "the behavior of the hardware and know how long all these sort of anomalies",
    "start": "2086560",
    "end": "2092440"
  },
  {
    "text": "take and knowing that you cannot really avoid not talking to the layers that you",
    "start": "2092440",
    "end": "2098560"
  },
  {
    "text": "depend on then the the the timeouts should take care of those right you shouldn't punish a remote server if you",
    "start": "2098560",
    "end": "2105320"
  },
  {
    "text": "know your local allocation is going to take you know uh 20 milliseconds you you",
    "start": "2105320",
    "end": "2110520"
  },
  {
    "text": "should you should tolerate that kind of behavior if it's local and uh um and another thing is",
    "start": "2110520",
    "end": "2116960"
  },
  {
    "text": "sort of uh if possible pulling other information to understand what's really",
    "start": "2116960",
    "end": "2122000"
  },
  {
    "text": "going on so so most Services say oh something happened and the request times",
    "start": "2122000",
    "end": "2127040"
  },
  {
    "text": "out I'm going to raise a timeout exception if you think about it it's kind of funny like why is it not a oh I",
    "start": "2127040",
    "end": "2134400"
  },
  {
    "text": "just gcd for 100 m second therefore things a slow exception why is it not oh Malo actually returns super slowly this",
    "start": "2134400",
    "end": "2140920"
  },
  {
    "text": "time exception like like timeout exception is not very informative and",
    "start": "2140920",
    "end": "2146079"
  },
  {
    "text": "sometimes there are information readily available that helps you just understanding nature of the failure",
    "start": "2146079",
    "end": "2152440"
  },
  {
    "text": "better I think this is something that was also mentioned in the talk earlier in this room right in the morning so so",
    "start": "2152440",
    "end": "2157800"
  },
  {
    "text": "so understanding what's going on is actually very very powerful and whenever possible Trace so you have I said",
    "start": "2157800",
    "end": "2164200"
  },
  {
    "text": "timeouts that's not equal to causality so what does equal to causality if you can trace the life cycle of when it goes",
    "start": "2164200",
    "end": "2170920"
  },
  {
    "text": "out when it comes in of a request establish the timeline of request that",
    "start": "2170920",
    "end": "2176000"
  },
  {
    "text": "actually tells you definitively what is the causal relationship between all these events and uh if you are actually",
    "start": "2176000",
    "end": "2184160"
  },
  {
    "text": "using microservices I have bad news for you because microservices actually is makes this type of reasoning much harder",
    "start": "2184160",
    "end": "2191480"
  },
  {
    "text": "so as much as monolith is unwieldy and and you know slow to develop uh there",
    "start": "2191480",
    "end": "2196920"
  },
  {
    "text": "are a lot of tools readily available if you want to reason about the events that's happening inside a single",
    "start": "2196920",
    "end": "2202400"
  },
  {
    "text": "monolith once you leave the service boundary often means you're leaving uh",
    "start": "2202400",
    "end": "2207839"
  },
  {
    "text": "the user space or or at least leaving the host host um that helps you reason",
    "start": "2207839",
    "end": "2214000"
  },
  {
    "text": "about these things so the visibility in the microservice architecture actually comes comes to you at a much higher cost",
    "start": "2214000",
    "end": "2221160"
  },
  {
    "text": "you need to put in extra actual effort into getting that visibility and that's",
    "start": "2221160",
    "end": "2226280"
  },
  {
    "text": "an aspect of the microservice architecture that I don't see mentioning very much right that this this uh this",
    "start": "2226280",
    "end": "2231960"
  },
  {
    "text": "bigger blind spot is not mentioned enough and if you want to make retries",
    "start": "2231960",
    "end": "2238440"
  },
  {
    "text": "better so I would say just start from not copying someone else's",
    "start": "2238440",
    "end": "2244200"
  },
  {
    "text": "configuration this this happens surprisingly often right my favorite",
    "start": "2244200",
    "end": "2249240"
  },
  {
    "text": "service is using three retries they must have a good reason for it I will use three three retries as well right so so",
    "start": "2249240",
    "end": "2256359"
  },
  {
    "text": "that so even just trying to understand why they use three retries and who are they talking to am I talking to the same",
    "start": "2256359",
    "end": "2262480"
  },
  {
    "text": "service do I send the same amount of traffic this is actually very very close",
    "start": "2262480",
    "end": "2267960"
  },
  {
    "text": "to the the the heart of distributed system is to understand this kind of behavior right so so it's not really you",
    "start": "2267960",
    "end": "2275200"
  },
  {
    "text": "know the thing you do the day before you launch to F fill out this form about configuration the configuration is",
    "start": "2275200",
    "end": "2281839"
  },
  {
    "text": "important and if you can be more conservative instead of aggressive right",
    "start": "2281839",
    "end": "2287640"
  },
  {
    "text": "so it's this this is kind of inuitive because we think if we retry more we have a better chance of succeed but in",
    "start": "2287640",
    "end": "2293680"
  },
  {
    "text": "reality is just do at the least amount of retrying you can to get the same success rate is better because you are",
    "start": "2293680",
    "end": "2300760"
  },
  {
    "text": "not feeding ammunition into that positive feedback loop as much so",
    "start": "2300760",
    "end": "2305880"
  },
  {
    "text": "finally if there are r rules that are not based on timeouts There are rules",
    "start": "2305880",
    "end": "2311079"
  },
  {
    "text": "that that are based on the state of the system whatever the sayate that is you know am I going into GC soon am I",
    "start": "2311079",
    "end": "2316839"
  },
  {
    "text": "holding too many outstanding requests am I retrying too much in the recent past these are the states that will help you",
    "start": "2316839",
    "end": "2323000"
  },
  {
    "text": "determine the health these will serve as breaks for the feat right so if you have",
    "start": "2323000",
    "end": "2328160"
  },
  {
    "text": "this kind of rules in place you are much less likely to go over the top and over the edge of the",
    "start": "2328160",
    "end": "2334160"
  },
  {
    "text": "cliff so um another thing is you have if if you have dependency it's good to",
    "start": "2334160",
    "end": "2339599"
  },
  {
    "text": "always have uh sort of uh have a global view on on your dependencies if you have",
    "start": "2339599",
    "end": "2345880"
  },
  {
    "text": "a budget start the budget from Top even if there are there's this accountability",
    "start": "2345880",
    "end": "2351319"
  },
  {
    "text": "Gap where you don't know how the time is spent having a budget and budget breakdown by your dependencies is better",
    "start": "2351319",
    "end": "2357000"
  },
  {
    "text": "than not having that and another thing is if you can apply brck pressure definitely do it because who knows",
    "start": "2357000",
    "end": "2363720"
  },
  {
    "text": "better about a service that's underload than the Lo service that's underload itself right if your remote service",
    "start": "2363720",
    "end": "2368920"
  },
  {
    "text": "tells you it's underload it must be true so that's actually highly valuable information to have but this is",
    "start": "2368920",
    "end": "2374400"
  },
  {
    "text": "something I also don't see too much in modern protocol design right so there's a lot of uh remote procedure protocols",
    "start": "2374400",
    "end": "2382440"
  },
  {
    "text": "very I would see a very large percentage of them actually don't have baked in back pressure mechanism so next time if",
    "start": "2382440",
    "end": "2389359"
  },
  {
    "text": "you're designing a protocol you may consider adding back pressure as one of the default features it may save you",
    "start": "2389359",
    "end": "2396119"
  },
  {
    "text": "down down the road when you scale to a a certain level so in terms of failure prevention",
    "start": "2396119",
    "end": "2403480"
  },
  {
    "text": "again there's nothing too specific but the two things that worked out well in my experience has been you know if you",
    "start": "2403480",
    "end": "2409920"
  },
  {
    "text": "want to make a global decision try not to act on uh local information only we",
    "start": "2409920",
    "end": "2415680"
  },
  {
    "text": "we definitely made this mistake in our in our own experience and often sort of escalates",
    "start": "2415680",
    "end": "2422359"
  },
  {
    "text": "in the wrong way and the other thing is sort of suppress the urge of oh I I know",
    "start": "2422359",
    "end": "2427560"
  },
  {
    "text": "something is wrong I'm going to fix it for everybody right just wait on it wait on it for a littleit longer so you may",
    "start": "2427560",
    "end": "2433839"
  },
  {
    "text": "ask my system is suffering while I wait what do I do I think what could happen",
    "start": "2433839",
    "end": "2438960"
  },
  {
    "text": "is you have a local mechanism that's fast in reacting but it is shortlived in",
    "start": "2438960",
    "end": "2447200"
  },
  {
    "text": "its effect and you can have another Global mechanism that is taking",
    "start": "2447200",
    "end": "2453280"
  },
  {
    "text": "bigger you know strides but will make wait much longer and therefore be much sure about the global state of the",
    "start": "2453280",
    "end": "2460160"
  },
  {
    "text": "service using a combination of these two in generally will give you pretty good reliable",
    "start": "2460160",
    "end": "2465680"
  },
  {
    "text": "results and finally you know nothing can um nothing can compare sort of uh uh",
    "start": "2465680",
    "end": "2473000"
  },
  {
    "text": "replace the value of testing so for the first one I think you everybody knows about these things you need to test",
    "start": "2473000",
    "end": "2478800"
  },
  {
    "text": "everything you need to test pressure files and you need to test you know Common failures often but the last one",
    "start": "2478800",
    "end": "2485319"
  },
  {
    "text": "is something so originally what I said is you need to try test um",
    "start": "2485319",
    "end": "2491720"
  },
  {
    "text": "catastrophic scenarios and I realized no no no that's stupid why would anybody introduce incidents to their services",
    "start": "2491720",
    "end": "2497640"
  },
  {
    "text": "just just on purpose right there's a good chance your service may fail so so I think one thing that would be",
    "start": "2497640",
    "end": "2503000"
  },
  {
    "text": "interesting to test is you think you need this kind of retri policy or timeouts to get to a certain uh service",
    "start": "2503000",
    "end": "2509920"
  },
  {
    "text": "level objective can you do the same with more relaxed timeouts and with more",
    "start": "2509920",
    "end": "2517240"
  },
  {
    "text": "relaxed retry because again this actually gives much less fuel to the potential feedback look that can bite",
    "start": "2517240",
    "end": "2523760"
  },
  {
    "text": "you in a in a incident so uh to to basically give you an idea of of what we are doing U to the",
    "start": "2523760",
    "end": "2531520"
  },
  {
    "text": "service that I owned is over the years we put all these sort of insights and",
    "start": "2531520",
    "end": "2537760"
  },
  {
    "text": "experiences into what we call a configuration guide for cash that is",
    "start": "2537760",
    "end": "2543240"
  },
  {
    "text": "only for one type of client which is f cach that's the one that Twitter uses but the guide alone is 2,000 words not",
    "start": "2543240",
    "end": "2551400"
  },
  {
    "text": "including all the sample sample code so you need actually a lot of work put into",
    "start": "2551400",
    "end": "2556839"
  },
  {
    "text": "doing this type of confusion properly and our timeout is also fairly nuanced right you can see we think we can do we",
    "start": "2556839",
    "end": "2564680"
  },
  {
    "text": "actually no not we think we tested that we can do 5 millisecond at P9 but if you look at the time out they're super",
    "start": "2564680",
    "end": "2570720"
  },
  {
    "text": "lenient they're on the order of hundreds of milliseconds why because all our jvm",
    "start": "2570720",
    "end": "2576440"
  },
  {
    "text": "you know applications can go into GC for that long and also the C group rules are enforced under at a 100 millisecond",
    "start": "2576440",
    "end": "2582680"
  },
  {
    "text": "interval so it doesn't make any sense to do anything less than 100 so so so so this is something that's quite",
    "start": "2582680",
    "end": "2588640"
  },
  {
    "text": "counterintuitive to all the people using cash because they expect what's on the right but actually they need to do",
    "start": "2588640",
    "end": "2594200"
  },
  {
    "text": "what's on the left and we have different retri policies for read and write just because you know the syntax is different",
    "start": "2594200",
    "end": "2601079"
  },
  {
    "text": "this the the centic is different and the purpose is different and we decided that we can actually protect the system",
    "start": "2601079",
    "end": "2606760"
  },
  {
    "text": "better if if we treat them differently and they have different back off and there's also a re overall retry budget",
    "start": "2606760",
    "end": "2612800"
  },
  {
    "text": "to break the the circuit right when we are retrying too much and we have two",
    "start": "2612800",
    "end": "2618040"
  },
  {
    "text": "levels of failure prevention the local failure rule is fairly fast in",
    "start": "2618040",
    "end": "2623200"
  },
  {
    "text": "engagement but it only live only in the fact for a short amount of time and you",
    "start": "2623200",
    "end": "2628280"
  },
  {
    "text": "can make a global uh you can make a global decision by someone else in the system who is a third party Observer and",
    "start": "2628280",
    "end": "2635359"
  },
  {
    "text": "the change doesn't kick into wealth after a minute right so so these and for as something as simple as cach if you",
    "start": "2635359",
    "end": "2642359"
  },
  {
    "text": "want to make it work actually somewhat reliably um you actually need to do a",
    "start": "2642359",
    "end": "2647440"
  },
  {
    "text": "fairly sophistic configuration so I want to close by briefly mentioning uh something else we",
    "start": "2647440",
    "end": "2654559"
  },
  {
    "text": "did and that is not quite along the lines of configuring timeouts and c and",
    "start": "2654559",
    "end": "2659839"
  },
  {
    "text": "and retries but at some point you realize that you know properly configuring timeouts and ret are just",
    "start": "2659839",
    "end": "2666359"
  },
  {
    "text": "too hard right that's often an indicator of you actually need to do something to",
    "start": "2666359",
    "end": "2672400"
  },
  {
    "text": "reduce the variance and to improve the reliability of your system right so so",
    "start": "2672400",
    "end": "2678440"
  },
  {
    "text": "quickly to give you an example what we did with cash we actually changed the application in a number of ways to",
    "start": "2678440",
    "end": "2684000"
  },
  {
    "text": "remove some of the contentions and we uh removed the blocking CA and at the",
    "start": "2684000",
    "end": "2689240"
  },
  {
    "text": "system level we actually did uh a lot of sort of lowlevel tuning so we can cap R",
    "start": "2689240",
    "end": "2696640"
  },
  {
    "text": "limit the the number of connections and we're not on shared host because shared host simply was not doing good enough",
    "start": "2696640",
    "end": "2702240"
  },
  {
    "text": "for us and we are even setting CPU affinities so that we know the behavior",
    "start": "2702240",
    "end": "2707280"
  },
  {
    "text": "of the kernel is is a lot more deterministic right so so timeouts retries get you very far but when when",
    "start": "2707280",
    "end": "2715119"
  },
  {
    "text": "that becomes too hard you know you have more interesting work to do to make the system behave in a more predictable",
    "start": "2715119",
    "end": "2721800"
  },
  {
    "text": "way so to close uh my talk what I want to say is we know theoretically that",
    "start": "2721800",
    "end": "2729599"
  },
  {
    "text": "perfect perfect Perfection is not possible and in practice as as Engineers",
    "start": "2729599",
    "end": "2734800"
  },
  {
    "text": "I think we need to sort of and sort of internalize and just know that it's okay to fail sometimes and it's okay to give",
    "start": "2734800",
    "end": "2741760"
  },
  {
    "text": "up sometimes and it's actually better to give up and fail in a deterministic way",
    "start": "2741760",
    "end": "2747119"
  },
  {
    "text": "than retrying and retrying until we end up in catastrophe right so so if you",
    "start": "2747119",
    "end": "2753200"
  },
  {
    "text": "understand what is the common behavior of your system including dig down the stack that's not owned by you but where",
    "start": "2753200",
    "end": "2759480"
  },
  {
    "text": "you depend on and you can have a bigger picture about the health and the state",
    "start": "2759480",
    "end": "2764960"
  },
  {
    "text": "of the service and act accordingly introducing a second U feedback Lo to to",
    "start": "2764960",
    "end": "2770520"
  },
  {
    "text": "counter counteract the the primary one that that's the one everybody understands then you probably will be in",
    "start": "2770520",
    "end": "2777079"
  },
  {
    "text": "a state where you are happy most of the time and that's what happens to cash is we haven't got a single incident in the",
    "start": "2777079",
    "end": "2783880"
  },
  {
    "text": "past year knock on wood that's not going to happen anytime soon but but uh um so so can it fail yes it can but compared",
    "start": "2783880",
    "end": "2791640"
  },
  {
    "text": "to a few number of years ago we're way better right and that's the result of all these exercise that we did just",
    "start": "2791640",
    "end": "2798400"
  },
  {
    "text": "about configuration and just about you know understanding what's going on in our system so that's everything I have",
    "start": "2798400",
    "end": "2805359"
  },
  {
    "text": "uh thank you for listening if you have any questions I think we have five minutes",
    "start": "2805359",
    "end": "2811160"
  }
]