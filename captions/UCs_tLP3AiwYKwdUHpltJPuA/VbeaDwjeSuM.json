[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "[Music] allow me to introduce myself my name is TK and I work for a company called open",
    "start": "6990",
    "end": "13920"
  },
  {
    "text": "Credo which is London based consultancy um I'm Dominic Fox I'm a",
    "start": "13920",
    "end": "19320"
  },
  {
    "start": "15000",
    "end": "97000"
  },
  {
    "text": "senior consultant to Credo um hello again if you were here on Wednesday night I know at least one of you was um",
    "start": "19320",
    "end": "27400"
  },
  {
    "text": "so yeah this is more the kind of background to the stuff I was showing then around the the cocket API for",
    "start": "27400",
    "end": "32680"
  },
  {
    "text": "concursus okay so we're going to talk about concursus today and uh we have a page all the details and that contains",
    "start": "32680",
    "end": "39480"
  },
  {
    "text": "blog a technical paper and uh it's an open source project so you can go and find the um the code on",
    "start": "39480",
    "end": "48559"
  },
  {
    "text": "GitHub So the plan for today is um I'll be presenting the S of background of",
    "start": "48559",
    "end": "54520"
  },
  {
    "text": "concourses what uh is it why we created it the main Concepts uh then uh Dominic basically",
    "start": "54520",
    "end": "61440"
  },
  {
    "text": "will go through a detailed example and will describe the programming model behind it so that's roughly the",
    "start": "61440",
    "end": "67880"
  },
  {
    "text": "plan okay um what is concursus so concursus",
    "start": "67880",
    "end": "74600"
  },
  {
    "text": "for us is a toolkit for processing and organizing messy data in a distributed",
    "start": "74600",
    "end": "80400"
  },
  {
    "text": "context um we call it a toolkit not a framework because we basically provide",
    "start": "80400",
    "end": "85799"
  },
  {
    "text": "you with different sort of modules that you can put together in different ways to to um accommodate the specific case",
    "start": "85799",
    "end": "92159"
  },
  {
    "text": "use case you have um so I'll go through that in a bit uh the question is why we created",
    "start": "92159",
    "end": "99960"
  },
  {
    "start": "97000",
    "end": "203000"
  },
  {
    "text": "concursus obviously yes we wanted to create something new but um just to give you a bit bit of a background about um",
    "start": "99960",
    "end": "106719"
  },
  {
    "text": "what we do it's not a plug it's just to give you the context of concursus so um",
    "start": "106719",
    "end": "111759"
  },
  {
    "text": "we work on different projects with different sort of organizations um traditional large organizations but also",
    "start": "111759",
    "end": "117680"
  },
  {
    "text": "uh smaller startups and and um we basically independently on different projects",
    "start": "117680",
    "end": "123399"
  },
  {
    "text": "Dominic and I made some observations about the type of applications we are um",
    "start": "123399",
    "end": "128599"
  },
  {
    "text": "uh building these days obviously you're aware of all the uh Trend behind microservices and that people are trying",
    "start": "128599",
    "end": "134760"
  },
  {
    "text": "to do a lot of realtime analytics and so on uh the problem with that is the um we",
    "start": "134760",
    "end": "140319"
  },
  {
    "text": "come from a development background and the abstractions given to developers are a bit too simplistic uh to build these",
    "start": "140319",
    "end": "147040"
  },
  {
    "text": "sort of distributed high volume scalable applications uh there are tools so there are all the",
    "start": "147040",
    "end": "152599"
  },
  {
    "text": "stream processing tools and so on but the tools tend to be very complex and they're very unfamiliar for someone",
    "start": "152599",
    "end": "158319"
  },
  {
    "text": "coming from a more traditional sort of development background so we found this gap between the two because we're very",
    "start": "158319",
    "end": "164680"
  },
  {
    "text": "pragmatic and try to focus on Working Solutions we started thinking about uh how to make this work uh again it's it's",
    "start": "164680",
    "end": "171440"
  },
  {
    "text": "not the description of some sort of waterfall process it's just a rough timeline of how we approach the problem",
    "start": "171440",
    "end": "177200"
  },
  {
    "text": "um so we went into a phase where basically tried to put IDE years together then we had the first implementation that we uh have running",
    "start": "177200",
    "end": "184239"
  },
  {
    "text": "on a project uh then from what we learned we created an open source uh implementation",
    "start": "184239",
    "end": "190519"
  },
  {
    "text": "and we also wanted to share all the thinking behind what we did and why we did it uh so we published a technical",
    "start": "190519",
    "end": "196280"
  },
  {
    "text": "report and a number of blogs to explain more the technical details behind uh",
    "start": "196280",
    "end": "202159"
  },
  {
    "text": "concursus the main uh abstraction the core abstraction uh in concourses is",
    "start": "202560",
    "end": "208720"
  },
  {
    "start": "203000",
    "end": "246000"
  },
  {
    "text": "event sourcing who's who's familiar with event sourcing cool okay so this is the",
    "start": "208720",
    "end": "215159"
  },
  {
    "text": "definition from uh Martin Fowler's um website basically it's it's a way where",
    "start": "215159",
    "end": "221040"
  },
  {
    "text": "the changes to the applications are stored as a sequence of events as",
    "start": "221040",
    "end": "226560"
  },
  {
    "text": "opposed to more traditional where you have state and then you go and mutate the state directly okay so the approach",
    "start": "226560",
    "end": "233000"
  },
  {
    "text": "has been around and I think what we noticed is that this approach Now is really meaningful and useful for the new",
    "start": "233000",
    "end": "239000"
  },
  {
    "text": "type of application we we trying to handle so",
    "start": "239000",
    "end": "246000"
  },
  {
    "start": "246000",
    "end": "370000"
  },
  {
    "text": "okay um let me bit tell you about these sort of um uh problems uh we need to handle",
    "start": "246000",
    "end": "253319"
  },
  {
    "text": "these days so again a good analogy for the moment is think of um an application in",
    "start": "253319",
    "end": "260079"
  },
  {
    "text": "The Internet of Things domain it doesn't need to be the internet of things but it's a nice analogy where you can understand that there's number of high",
    "start": "260079",
    "end": "266240"
  },
  {
    "text": "number of participants and there a lot of events naturally to the system and just having a three tiered web",
    "start": "266240",
    "end": "271880"
  },
  {
    "text": "application will not do the job basically to to handle the complexity so obviously assuming that uh the first",
    "start": "271880",
    "end": "279039"
  },
  {
    "text": "thing you need to do in the application is to process reliably high volume of events this is the first thing you need",
    "start": "279039",
    "end": "285199"
  },
  {
    "text": "to do okay uh the other thing is uh basically the events they come this is",
    "start": "285199",
    "end": "291000"
  },
  {
    "text": "the bit about the messy data they come from The Real World so the events can be uh out of order they can never arrive",
    "start": "291000",
    "end": "297400"
  },
  {
    "text": "they can be delayed they can arrive twice and so on so these things we cannot ignore and if we try to ignore",
    "start": "297400",
    "end": "304120"
  },
  {
    "text": "these things it will result in an application that does not perform or in very complex uh programming",
    "start": "304120",
    "end": "310160"
  },
  {
    "text": "model um so the other thing obviously you can say okay let's use a stream",
    "start": "310160",
    "end": "316120"
  },
  {
    "text": "processing application then or approach to do that um for example um Flink or",
    "start": "316120",
    "end": "321360"
  },
  {
    "text": "storm and something like that we do use use these tools but in many cases we're",
    "start": "321360",
    "end": "326720"
  },
  {
    "text": "not looking for a real time analytics use case what we're trying to do is to build meaningful domain models you can",
    "start": "326720",
    "end": "332000"
  },
  {
    "text": "build business Logic on and reason about and these tools in general tend to have a lower level abstraction basically and",
    "start": "332000",
    "end": "340520"
  },
  {
    "text": "uh be easier to use with a sort of free time analytics uh context so uh the last problem we have",
    "start": "340520",
    "end": "347440"
  },
  {
    "text": "is flexibility so in in this sort of application there's an assumption that you collect all the data and there might",
    "start": "347440",
    "end": "353479"
  },
  {
    "text": "be a number of use uh business use cases you want to implement however often there are other things you might need to",
    "start": "353479",
    "end": "359639"
  },
  {
    "text": "to do in the future and you want to be able to do these without basically refactoring or reworking the whole model",
    "start": "359639",
    "end": "365440"
  },
  {
    "text": "so this is part of the the idea we have okay so I'll go more in detail now",
    "start": "365440",
    "end": "371599"
  },
  {
    "start": "370000",
    "end": "936000"
  },
  {
    "text": "about these things so this is more like the philosophical part behind why we build concourses so to go more in detail",
    "start": "371599",
    "end": "378360"
  },
  {
    "text": "in these Tendencies we notice mainly three things there's a tendency to move from an internet of users to an Internet",
    "start": "378360",
    "end": "385280"
  },
  {
    "text": "of Things Paradigm uh there's what we call the tendency to move from a presence-based",
    "start": "385280",
    "end": "390479"
  },
  {
    "text": "um programming model or computation model to present I'll explain that and",
    "start": "390479",
    "end": "395720"
  },
  {
    "text": "obviously probably all familiar with microservices and the move from monolith to",
    "start": "395720",
    "end": "401560"
  },
  {
    "text": "microservices so uh I mentioned that um if if you just basically follow a more",
    "start": "401919",
    "end": "408880"
  },
  {
    "text": "traditional approach you get a number of problems so let me just go more in detail uh about these so um the the",
    "start": "408880",
    "end": "416400"
  },
  {
    "text": "internet of users is your traditional model uh where you have a number of users they interact in a request",
    "start": "416400",
    "end": "423440"
  },
  {
    "text": "response fashion with the system and they might have some uh state that is maintained between the different",
    "start": "423440",
    "end": "430000"
  },
  {
    "text": "transactions uh think of your shopping trolley for example that is a very common uh use case now this is fine the",
    "start": "430000",
    "end": "438360"
  },
  {
    "text": "problem is that if you look at more Internet of Things type applications you have a shift in the Paradigm so what",
    "start": "438360",
    "end": "445160"
  },
  {
    "text": "that means is that you have a much higher number of participants they tend to be more independent and you have a",
    "start": "445160",
    "end": "453280"
  },
  {
    "text": "higher level or an extreme level of decoupling between the users and between each other and the",
    "start": "453280",
    "end": "459120"
  },
  {
    "text": "system um and typically you don't have this idea of a state you're trying to preserve between uh two s of uh um when",
    "start": "459120",
    "end": "467199"
  },
  {
    "text": "you executing a business transaction um so that is um one main",
    "start": "467199",
    "end": "473520"
  },
  {
    "text": "difference and the other thing is that the internet of users assume a very synchronous interaction model whereas",
    "start": "473520",
    "end": "480360"
  },
  {
    "text": "The Internet of Things is more about asynchronous computation and doing things Downstream in the background and",
    "start": "480360",
    "end": "485479"
  },
  {
    "text": "so on as I said you don't need to be building an Internet of Things type of application to benefit from concourses",
    "start": "485479",
    "end": "491319"
  },
  {
    "text": "but it's a it's a nice way of sort of imagining it and thinking about it so uh",
    "start": "491319",
    "end": "497479"
  },
  {
    "text": "and and we think the existing models do not accommodate the Internet of Things Paradigm okay so the other tendency is",
    "start": "497479",
    "end": "506240"
  },
  {
    "text": "the movement from pres to presents okay if I say present this is a page from a",
    "start": "506240",
    "end": "511560"
  },
  {
    "text": "dictionary obviously uh there are two aspects to present there's the fact of being present in a a physical location",
    "start": "511560",
    "end": "519680"
  },
  {
    "text": "like in this room and there's the idea of being present at the same time so",
    "start": "519680",
    "end": "526200"
  },
  {
    "text": "having a presence now it means all of us here being in the same place at the same",
    "start": "526200",
    "end": "531920"
  },
  {
    "text": "time so this is what you call a model of presence okay if you're building a",
    "start": "531920",
    "end": "538440"
  },
  {
    "text": "system and you're working with one database a relational database with a",
    "start": "538440",
    "end": "544120"
  },
  {
    "text": "global model where you have distributed transactions and Global constraints this is what we call a model",
    "start": "544120",
    "end": "550000"
  },
  {
    "text": "of presence because you're assuming that the whole truth is in one place and you can suspend the",
    "start": "550000",
    "end": "556680"
  },
  {
    "text": "system uh change it mutate the data and transition it from one Global state to another okay um so the relation datase",
    "start": "556680",
    "end": "565000"
  },
  {
    "text": "is one example but also if you're using distributed locks it's the same thing you're trying to do the same thing thing so you're trying to have this fiction",
    "start": "565000",
    "end": "571000"
  },
  {
    "text": "that the time can be suspended you can make everything all right and then resume the time now this has a couple of",
    "start": "571000",
    "end": "576920"
  },
  {
    "text": "problems one is that this doesn't really uh perform uh it's probably wellknown uh",
    "start": "576920",
    "end": "583079"
  },
  {
    "text": "sort of fact now the other problem if you have if you have a system that is naturally event",
    "start": "583079",
    "end": "588760"
  },
  {
    "text": "driven it's it's not sufficient just to ignore the fact that you have things that can arrive out of order in a repeated way because these things will",
    "start": "588760",
    "end": "595680"
  },
  {
    "text": "happen so you end up having a very complex uh business logic to compensate",
    "start": "595680",
    "end": "601120"
  },
  {
    "text": "for these things happening so this is what we call operating under a model of presence and we think it",
    "start": "601120",
    "end": "607240"
  },
  {
    "text": "doesn't fit uh so funnny enough there's another definition about the impressive",
    "start": "607240",
    "end": "613279"
  },
  {
    "text": "manner of appearance of person this is totally unrelated to the two of us here in this room okay so now if we move to",
    "start": "613279",
    "end": "621000"
  },
  {
    "text": "microservices now microservices do not abandon totally the idea of this model of presence but what you have is bounded",
    "start": "621000",
    "end": "629560"
  },
  {
    "text": "contexts so each microservice responsible for a well defined part of the domain and you have a small island",
    "start": "629560",
    "end": "637040"
  },
  {
    "text": "of presence that each service can control through a well- defined interface so you have for example user",
    "start": "637040",
    "end": "644360"
  },
  {
    "text": "and you have verbs on this user and you can change it or update it and so on and so on and now the uh executing your full",
    "start": "644360",
    "end": "651959"
  },
  {
    "text": "business logic is not about um moving a global state from one um s of a global",
    "start": "651959",
    "end": "657440"
  },
  {
    "text": "state from one state to another it becomes about these microservices",
    "start": "657440",
    "end": "662639"
  },
  {
    "text": "collaborating and actually moving the system but each microservice is responsible for its own island of uh",
    "start": "662639",
    "end": "670760"
  },
  {
    "text": "present um so you no more have this idea of having to have a global consistency",
    "start": "670760",
    "end": "675920"
  },
  {
    "text": "across the system each microservice can ensure its own consistency and then communicate with the",
    "start": "675920",
    "end": "681800"
  },
  {
    "text": "others um so yeah again these in domain driven",
    "start": "681800",
    "end": "687800"
  },
  {
    "text": "design each microservice is responsible for part of the domain or bounded",
    "start": "687800",
    "end": "693720"
  },
  {
    "text": "context okay so what does that mean so applying that to our approach",
    "start": "693720",
    "end": "701920"
  },
  {
    "text": "plus event sourcing and this is an example where we'll go through the example in detail",
    "start": "701920",
    "end": "707399"
  },
  {
    "text": "but we're assuming an application that needs to handle a number of parcels so rather than um having one",
    "start": "707399",
    "end": "714639"
  },
  {
    "text": "model with the whole state synchronized what we try to ensure is just BAS basically sufficient consistency so we",
    "start": "714639",
    "end": "721720"
  },
  {
    "text": "have each parcel has a history and the history is consistent within this",
    "start": "721720",
    "end": "726880"
  },
  {
    "text": "history but we don't care about consistency across the different entities basically so when we get a new event it's just appended to where it",
    "start": "726880",
    "end": "734120"
  },
  {
    "text": "fits uh for for for its own entity and therefore you end up with this so rather than just one Global State you can think",
    "start": "734120",
    "end": "740440"
  },
  {
    "text": "of this as an infinite or highly scalable um number of buckets each",
    "start": "740440",
    "end": "746040"
  },
  {
    "text": "bucket is basically dedicated to one entity in the system and the buckets are free to move or to be updated",
    "start": "746040",
    "end": "753440"
  },
  {
    "text": "independently okay so um obviously once you do that",
    "start": "753440",
    "end": "760199"
  },
  {
    "text": "you have naturally an audit log of everything that happen in the system for each entity and you are able to",
    "start": "760199",
    "end": "767279"
  },
  {
    "text": "calculate Downstream any other query so obviously one weakness is that this will just tell you what happens it's not very",
    "start": "767279",
    "end": "773160"
  },
  {
    "text": "good to give you an sort of aggregation of the system but uh with the flexibility side of uh our system you",
    "start": "773160",
    "end": "779839"
  },
  {
    "text": "can then have queries Downstream to aggregate the data uh what you can also do is just replay the history fully or",
    "start": "779839",
    "end": "785839"
  },
  {
    "text": "partially if you want to reestablish the state of the system so this is what we call right first Freez and later the",
    "start": "785839",
    "end": "791720"
  },
  {
    "text": "first thing you need to do is capture the data the data need to be organized in a sufficient way to allow you to do",
    "start": "791720",
    "end": "797000"
  },
  {
    "text": "what you want to do later Downstream and in a sufficient way organize means just partial ordering basically which is",
    "start": "797000",
    "end": "803440"
  },
  {
    "text": "sufficient here again if you contrast that to the global presence model",
    "start": "803440",
    "end": "810279"
  },
  {
    "text": "um this might be the equivalent in some sort of relational schema where you have a very big complex model with uh Global",
    "start": "810279",
    "end": "816680"
  },
  {
    "text": "constraints the problem is that whenever you get any update to the system you have to ensure that everything is fine",
    "start": "816680",
    "end": "823320"
  },
  {
    "text": "and still consistent so you need to do all your um validation and updates in",
    "start": "823320",
    "end": "828360"
  },
  {
    "text": "one go which restricts um uh as I said um performance but also can be very",
    "start": "828360",
    "end": "833839"
  },
  {
    "text": "complex because uh this assume slightly more orderly word than uh the ones that um we typically work with okay so um",
    "start": "833839",
    "end": "843440"
  },
  {
    "text": "before going to the example um so I mentioned now i' would like to go into the details of uh these",
    "start": "843440",
    "end": "849560"
  },
  {
    "text": "problems that you need to handle so what does concursus try to do for you the first problem we have is",
    "start": "849560",
    "end": "855360"
  },
  {
    "text": "handling the events and as I said the the first thing to deal with is the how the events are delivered to the system",
    "start": "855360",
    "end": "862000"
  },
  {
    "text": "and the events can be delivered out of order in a repeated way delayed or totally missed okay additionally some",
    "start": "862000",
    "end": "869240"
  },
  {
    "text": "events have a special meaning some events might indicate the start of a sequence some other events might",
    "start": "869240",
    "end": "874320"
  },
  {
    "text": "indicate that the sequence of events are now finished and these things can arrive in any order as well uh so these things",
    "start": "874320",
    "end": "880720"
  },
  {
    "text": "we need to be able to reason about and um as Dominic will will show in his examples uh the other thing in this sort",
    "start": "880720",
    "end": "887120"
  },
  {
    "text": "of system if you're talking about a distributed system are the processing guarantees so ideally what we want to",
    "start": "887120",
    "end": "892720"
  },
  {
    "text": "have is exactly once's processing guarantees but if events are repeated you need to be able to detect duplicates",
    "start": "892720",
    "end": "899199"
  },
  {
    "text": "and this can happen by a number of PHS so but you need to have clear um proing guarantees and ideally um exactly one's",
    "start": "899199",
    "end": "906680"
  },
  {
    "text": "proing guaranties so uh the last point is the one I uh explained on the previous",
    "start": "906680",
    "end": "912360"
  },
  {
    "text": "example which is the bit about ordering so rather than enforcing Global ordering which is very expensive it's probably",
    "start": "912360",
    "end": "918880"
  },
  {
    "text": "sufficient to have just partial ordering and consistent ordering for each entity and that is probably it's a simplifying",
    "start": "918880",
    "end": "925040"
  },
  {
    "text": "assumption but it's most of the time it's good enough and gives you this flexibility and the ability still to",
    "start": "925040",
    "end": "930399"
  },
  {
    "text": "write business Logic on each entity okay",
    "start": "930399",
    "end": "936279"
  },
  {
    "start": "936000",
    "end": "1089000"
  },
  {
    "text": "so um the next point is about the types of data we process okay we have a very",
    "start": "936279",
    "end": "941959"
  },
  {
    "text": "modular system and we're trying to allow you to use the sort of new technologies",
    "start": "941959",
    "end": "947839"
  },
  {
    "text": "like CFA but at the same time to have a microservices architecture and to give you the",
    "start": "947839",
    "end": "953440"
  },
  {
    "text": "possibility when you want to choose your own technology so in the system we noticed that",
    "start": "953440",
    "end": "959560"
  },
  {
    "text": "um there are three type of data we get okay and we try to find the technology that works with each type of these um so",
    "start": "959560",
    "end": "967560"
  },
  {
    "text": "the first typ the first type is what we call the durable uh uh sort of",
    "start": "967560",
    "end": "973000"
  },
  {
    "text": "processing so in your system when the data arrives what you need is a sort of buffer to put the data to so that it's",
    "start": "973000",
    "end": "979759"
  },
  {
    "text": "persistent sufficiently so that you can acknowledge the transaction or the operation to the client and then you can",
    "start": "979759",
    "end": "985160"
  },
  {
    "text": "do all your things Downstream or you are able to redo these things if if there's a partial failure so obviously something",
    "start": "985160",
    "end": "992959"
  },
  {
    "text": "like Kafka works very well here and this is basically the what's happening now in the system uh Zone uh there's another",
    "start": "992959",
    "end": "1001319"
  },
  {
    "text": "type of state that is needed which is the persistent state so um a place where",
    "start": "1001319",
    "end": "1007000"
  },
  {
    "text": "you have a permanent record of everything that happen so the place where you store that the buckets I showed a bit earlier so this is",
    "start": "1007000",
    "end": "1013199"
  },
  {
    "text": "typically referred to as the event store if you want basically um the fact that we have",
    "start": "1013199",
    "end": "1019279"
  },
  {
    "text": "actually durable and persistent State and we distinguish between the two is quite interesting because it gives us a choice we can say that if the data has",
    "start": "1019279",
    "end": "1026400"
  },
  {
    "text": "been durably sort of um saved by the system uh then we can update the",
    "start": "1026400",
    "end": "1031880"
  },
  {
    "text": "persistent State later we it gives us options about what to do and when in terms of scalability so all that is nice but then",
    "start": "1031880",
    "end": "1038720"
  },
  {
    "text": "there's another type which is the transient um state so there are a number of operations where it's not good enough",
    "start": "1038720",
    "end": "1045640"
  },
  {
    "text": "to have um eventual consistency for example where you want a fast and consistent",
    "start": "1045640",
    "end": "1052559"
  },
  {
    "text": "State I can give you a couple of examples caching is one is a very obvious one you might want some sort of",
    "start": "1052559",
    "end": "1058559"
  },
  {
    "text": "cache of a transformed form of the data that you can serve very quickly in a query but there's another one which is",
    "start": "1058559",
    "end": "1064360"
  },
  {
    "text": "um add potency filters so we might need to keep for U specifics of duration all",
    "start": "1064360",
    "end": "1070760"
  },
  {
    "text": "the uh IDs of events we've seen coming from the outside so that if we have a resubmission we can identify that and we",
    "start": "1070760",
    "end": "1076640"
  },
  {
    "text": "can D duplicate the the events so this is another type of State uh that",
    "start": "1076640",
    "end": "1081840"
  },
  {
    "text": "requires a different s of sort of um underpinning technology to to store it so what are the building",
    "start": "1081840",
    "end": "1089159"
  },
  {
    "start": "1089000",
    "end": "1206000"
  },
  {
    "text": "blocks the system is mainly written in Java 8 and we have Java 8 and cotlin",
    "start": "1089159",
    "end": "1095159"
  },
  {
    "text": "apis Dominic was presenting the cotlin apis two days ago yeah",
    "start": "1095159",
    "end": "1100520"
  },
  {
    "text": "Wednesday um and we'll go through that uh we chose Cassandra for the persistent",
    "start": "1100520",
    "end": "1106159"
  },
  {
    "text": "state so for the event store side of things we'll go into technical details in a bit uh Kafka naturally provides the",
    "start": "1106159",
    "end": "1112600"
  },
  {
    "text": "durable State bit so this uh sort of um um log uh that is durable enough for",
    "start": "1112600",
    "end": "1118720"
  },
  {
    "text": "anything to be fully processed in the system it's not a database but it's durable enough and then something like hazelcast",
    "start": "1118720",
    "end": "1126480"
  },
  {
    "text": "for the transient state so think of for example a distributed map across the system where we have the list of events",
    "start": "1126480",
    "end": "1132880"
  },
  {
    "text": "we've seen the last minute so that we can duplicate if we have resubmission now this is our recommended",
    "start": "1132880",
    "end": "1139280"
  },
  {
    "text": "stack but as I said we built uh concourses so that you can use it in different uh contexts uh we have an",
    "start": "1139280",
    "end": "1146360"
  },
  {
    "text": "implementation with rabbit mq amqp now it's interesting because if you have",
    "start": "1146360",
    "end": "1152159"
  },
  {
    "text": "amqp then amqp is not CFA so it doesn't provide the full uh durable State",
    "start": "1152159",
    "end": "1159559"
  },
  {
    "text": "support So in this case to to be able to achieve that and maintain the semantics",
    "start": "1159559",
    "end": "1164960"
  },
  {
    "text": "you might want to use amqp to write into Cassandra to achieve that which is is also an example you're going to to go",
    "start": "1164960",
    "end": "1170960"
  },
  {
    "text": "through so this is why we call the toolkit not a framework we're not providing uh interfaces with",
    "start": "1170960",
    "end": "1177600"
  },
  {
    "text": "implementation for every popular technology Under the Sun and that we can choose randomly we're trying to preserve",
    "start": "1177600",
    "end": "1183799"
  },
  {
    "text": "some semantics across the system but we realize that not everyone is able to adopt the latest and greatest now or",
    "start": "1183799",
    "end": "1190159"
  },
  {
    "text": "that people have different preferences so there's a lot of work that has gone into clarifying what that means at the",
    "start": "1190159",
    "end": "1195919"
  },
  {
    "text": "system level in terms of the semantics you'd want to have all of that with what we consider a very simple actually",
    "start": "1195919",
    "end": "1201559"
  },
  {
    "text": "programming model that we'll go through okay so um just some sources of",
    "start": "1201559",
    "end": "1208640"
  },
  {
    "start": "1206000",
    "end": "1340000"
  },
  {
    "text": "inspiration because I'm I'm sure you're familiar with a number of these ideas and I think part of the work we did is just to bring these ideas together in a",
    "start": "1208640",
    "end": "1214880"
  },
  {
    "text": "coherent way so some source of inspiration have been the streen processing framework such as Apache",
    "start": "1214880",
    "end": "1220320"
  },
  {
    "text": "storm and Spark uh the Google papers um for example the idea that enforce some",
    "start": "1220320",
    "end": "1226760"
  },
  {
    "text": "metadata in each message not keep it uh free form the distinction between event",
    "start": "1226760",
    "end": "1232720"
  },
  {
    "text": "uh time and processing time the idea of watermarks as well uh and and other",
    "start": "1232720",
    "end": "1238440"
  },
  {
    "text": "sources of inspiration domain driven design obviously and uh functional programming I added that because there",
    "start": "1238440",
    "end": "1245720"
  },
  {
    "text": "has been attempts to do things are similar to concourses but we didn't like the programming model because it was",
    "start": "1245720",
    "end": "1250799"
  },
  {
    "text": "very clunky and relied on the Poo abstraction as we try to keep this more",
    "start": "1250799",
    "end": "1255880"
  },
  {
    "text": "s of fluid abstraction that we'll go through using interfaces and so on okay so in summary concursus is event",
    "start": "1255880",
    "end": "1266360"
  },
  {
    "text": "sourcing and it's the core abstraction we are opinionated about that bit but then you have a number of modules that",
    "start": "1266360",
    "end": "1272480"
  },
  {
    "text": "you can add to make the system more usable and useful according to your context so for example um um we can use",
    "start": "1272480",
    "end": "1281360"
  },
  {
    "text": "kfka streams for the stream processing bit um uh spring boot we have integration with spring to allow you to",
    "start": "1281360",
    "end": "1287320"
  },
  {
    "text": "basically write microservices that use concourses uh directly and integration with Cassandra backend we have redis as",
    "start": "1287320",
    "end": "1293279"
  },
  {
    "text": "well and so on so uh Dominic will go now uh into the",
    "start": "1293279",
    "end": "1298880"
  },
  {
    "text": "um example okay I wonder to answer here um",
    "start": "1298880",
    "end": "1304400"
  },
  {
    "text": "so we've got a kind of very simplified example simplified domain which is tracking parcel delivery um and we've",
    "start": "1304400",
    "end": "1311559"
  },
  {
    "text": "got four kinds of things that can happen to a parcel it can arrive at a Depot somewhere from that Depot it can get",
    "start": "1311559",
    "end": "1318240"
  },
  {
    "text": "loaded onto a truck that truck can either successfully deliver it to some final location or if delivery fails",
    "start": "1318240",
    "end": "1325200"
  },
  {
    "text": "there's no one there to receive it it might wind up back at a Depot and then we might repeat the attempt to deliver",
    "start": "1325200",
    "end": "1330400"
  },
  {
    "text": "it and in this model we have no idea what happens if you know could repeatedly fail to deliver it we just",
    "start": "1330400",
    "end": "1336080"
  },
  {
    "text": "assume that we cycle round and round um so fundamentally you have your",
    "start": "1336080",
    "end": "1344039"
  },
  {
    "start": "1340000",
    "end": "1464000"
  },
  {
    "text": "package your your um thing to which events happen and you have a stream of events that happen to it um and we have",
    "start": "1344039",
    "end": "1351240"
  },
  {
    "text": "um some the method is kind of divided into two pieces",
    "start": "1351240",
    "end": "1357080"
  },
  {
    "text": "um first of all each item to which events can occur which we call an",
    "start": "1357080",
    "end": "1362159"
  },
  {
    "text": "Aggregates borrowing from domain of design terminology um has a type and a",
    "start": "1362159",
    "end": "1367279"
  },
  {
    "text": "globally unique ID and that allows us to identify it within within the system as a whole this is the thing to which these",
    "start": "1367279",
    "end": "1373120"
  },
  {
    "text": "events are happening each event has an event Tim stamp which obviously says",
    "start": "1373120",
    "end": "1378600"
  },
  {
    "text": "when it happened um and possibly some parameters associated with it so if a pelist received it to Depo we presumably",
    "start": "1378600",
    "end": "1385279"
  },
  {
    "text": "want to know which Depo it is it's arrived at the leisan Depo if a parcel has been loaded onto a truck um then our",
    "start": "1385279",
    "end": "1392360"
  },
  {
    "text": "problem is with the the truck ID might be the vehicle registration or something like that so we have a sequence of time",
    "start": "1392360",
    "end": "1398720"
  },
  {
    "text": "stamped events associated with a a uniquely identified",
    "start": "1398720",
    "end": "1403880"
  },
  {
    "text": "aggregate when we capture these events into an event history for that aggregate",
    "start": "1403880",
    "end": "1410039"
  },
  {
    "text": "um it's much the same data except that we also have a processing time stamp which is different from the event time",
    "start": "1410039",
    "end": "1415240"
  },
  {
    "text": "stamp so the event time stamp is when does the source of the event say that it happened um and we expect event time",
    "start": "1415240",
    "end": "1422360"
  },
  {
    "text": "stamps to be consistent for a given Event Source in the given aggregate the processing Tim stamp is when did our",
    "start": "1422360",
    "end": "1428679"
  },
  {
    "text": "system observe this event and we can use the gap between the two to determine some kind of ad hoc Watermark you know",
    "start": "1428679",
    "end": "1435799"
  },
  {
    "text": "some sense of what the the latency in processing is and we can use that to kind of shape processing windows for",
    "start": "1435799",
    "end": "1441640"
  },
  {
    "text": "example if we're doing item potency filtering or other operations like that",
    "start": "1441640",
    "end": "1446760"
  },
  {
    "text": "um the other thing to notice the event history here is ordered with the most recent event first which is a an aspect",
    "start": "1446760",
    "end": "1452480"
  },
  {
    "text": "of how things are stored um in the underlying data store quite often we want to know what the most recent event",
    "start": "1452480",
    "end": "1458400"
  },
  {
    "text": "on an object is and so it going of make sense to store things in that order um so in summary every event",
    "start": "1458400",
    "end": "1465399"
  },
  {
    "start": "1464000",
    "end": "1539000"
  },
  {
    "text": "occurs to an aggregate which is identified by type and ID it has an event time stamp which is",
    "start": "1465399",
    "end": "1470720"
  },
  {
    "text": "generated by the source of the event and every aggregate has an event history which is a log of events ordered by",
    "start": "1470720",
    "end": "1477000"
  },
  {
    "text": "timestamp with an additional processing time stamp which records when the event was captured that's a kind of",
    "start": "1477000",
    "end": "1482240"
  },
  {
    "text": "fundamental model and it's it should be fairly um obvious and trivial so one of the things we have to",
    "start": "1482240",
    "end": "1489520"
  },
  {
    "text": "do with events um is process them in a way that um maintains or recaptures",
    "start": "1489520",
    "end": "1496120"
  },
  {
    "text": "their ordering so we have a number of event sources all emitting events in a particular order and I've colored them",
    "start": "1496120",
    "end": "1502559"
  },
  {
    "text": "so as to indicate that the blue ones are initial events they're the first thing that happens to the aggregate the red",
    "start": "1502559",
    "end": "1507679"
  },
  {
    "text": "ones are terminal events they're the last thing that's ever going to happen to it and the yellow ones are anything that happens in between but once these",
    "start": "1507679",
    "end": "1514399"
  },
  {
    "text": "all hit the network and rooted through load balances and so on the likelihood is that they'll arrive at event",
    "start": "1514399",
    "end": "1520399"
  },
  {
    "text": "processes um partitions um into leaves and out of order so events for different things",
    "start": "1520399",
    "end": "1526159"
  },
  {
    "text": "will get rooted to different event proc processes unless we actually enforce some kind of rooting by ID um things",
    "start": "1526159",
    "end": "1532520"
  },
  {
    "text": "might arrive out of order and basically we've got a kind of a jumble of events from different sources and our task basically is to",
    "start": "1532520",
    "end": "1540399"
  },
  {
    "start": "1539000",
    "end": "1562000"
  },
  {
    "text": "reorder those back into event histories organized by aggregate ID and in the",
    "start": "1540399",
    "end": "1545960"
  },
  {
    "text": "right order so we're basically sorting events into kind of buckets of event history um so our event log is",
    "start": "1545960",
    "end": "1552880"
  },
  {
    "text": "partitioned by aggregate ID and it's ordered by event timestamp and what we need is a mechanism to do that",
    "start": "1552880",
    "end": "1558760"
  },
  {
    "text": "that so one of the ways that we can do this is by pushing things into Cassandra",
    "start": "1558760",
    "end": "1564799"
  },
  {
    "start": "1562000",
    "end": "1635000"
  },
  {
    "text": "and making use of Cassandra's two dimensional addressing so um in",
    "start": "1564799",
    "end": "1570480"
  },
  {
    "text": "Cassandra each piece of each kind of record within the system has basically two keys that identify it you've got a",
    "start": "1570480",
    "end": "1577480"
  },
  {
    "text": "partition key which in this case we use the aggregate type and ID which says what row that ASA is stored in and",
    "start": "1577480",
    "end": "1584159"
  },
  {
    "text": "that's also used to determine um what node within the Cassandra cluster is a it actually determines its physical",
    "start": "1584159",
    "end": "1590640"
  },
  {
    "text": "location uh you also have a cluster ID which within a row identifies a cluster of columns it's basically cons gives us",
    "start": "1590640",
    "end": "1597520"
  },
  {
    "text": "our our record our particular piece of data um and we use the event Tim stamp and something called The Stream ID which",
    "start": "1597520",
    "end": "1604120"
  },
  {
    "text": "allows us to disambiguate time stamps coming from different sources um we use",
    "start": "1604120",
    "end": "1609240"
  },
  {
    "text": "that as our clustering key and we ask Cassandra to order things by in a time stamp in descending order and what that",
    "start": "1609240",
    "end": "1616120"
  },
  {
    "text": "means is that whenever we write into this table um things are rooted first of all to a row by agregate ID and then placed",
    "start": "1616120",
    "end": "1622679"
  },
  {
    "text": "within the within the row by a cluster ID which is based on the time stamp so Cassandra station model going",
    "start": "1622679",
    "end": "1628559"
  },
  {
    "text": "automatically orders these things for us which is obviously very",
    "start": "1628559",
    "end": "1634399"
  },
  {
    "text": "handy so we've got a couple of different um ways that we can manage our our processing one is if we're using amqp as",
    "start": "1634399",
    "end": "1642480"
  },
  {
    "start": "1635000",
    "end": "1685000"
  },
  {
    "text": "events come into an event process so we can first of all log them into Cassandra and then we can publish them out to for",
    "start": "1642480",
    "end": "1648320"
  },
  {
    "text": "example a a rabbit mq topic so that some Downstream processing can occur on them",
    "start": "1648320",
    "end": "1655559"
  },
  {
    "text": "um and with that model we can then later on pull our ordered query results out of",
    "start": "1655559",
    "end": "1661279"
  },
  {
    "text": "katandra and play them into some State model in order to retrieve an image of the current state of some",
    "start": "1661279",
    "end": "1666840"
  },
  {
    "text": "aggregate the only um possible downside with this is that the events as they go through the rabbitmq topic are still out",
    "start": "1666840",
    "end": "1673519"
  },
  {
    "text": "of order they haven't been through the ordering as occurs with the event store so our Downstream process again we'll",
    "start": "1673519",
    "end": "1678880"
  },
  {
    "text": "have to do some ordering on the middle just to make sense of them another possibility is that we can",
    "start": "1678880",
    "end": "1686600"
  },
  {
    "start": "1685000",
    "end": "1729000"
  },
  {
    "text": "publish our events onto a CFA topic and then drive writing them into the event store and downstream processing off the",
    "start": "1686600",
    "end": "1693519"
  },
  {
    "text": "same topic we have an event store listener that picks up events from Kafka and writes them into permanent storage",
    "start": "1693519",
    "end": "1700080"
  },
  {
    "text": "and we have other um Downstream processes also running off the same topic and this is quite appealing",
    "start": "1700080",
    "end": "1706039"
  },
  {
    "text": "because it means that from the point of view of the process uh all it needs to do is to have written the event into the Cal topic and its work is done it can go",
    "start": "1706039",
    "end": "1713360"
  },
  {
    "text": "back to to pick up another event from the incoming stream and our Downstream processing then can include things like",
    "start": "1713360",
    "end": "1719880"
  },
  {
    "text": "indexing events um or building up career optimized views of of agregates for",
    "start": "1719880",
    "end": "1724919"
  },
  {
    "text": "later use so in summary in our processing",
    "start": "1724919",
    "end": "1730360"
  },
  {
    "start": "1729000",
    "end": "1805000"
  },
  {
    "text": "model um events will arrive we assume partitions and Inter Leed and out of order they're sorted into event",
    "start": "1730360",
    "end": "1737159"
  },
  {
    "text": "histories by type on ID they're sorted within event history by event Tim stamp",
    "start": "1737159",
    "end": "1742480"
  },
  {
    "text": "and not by processing timestamp um this is important because if events survive out of order we want to put earlier",
    "start": "1742480",
    "end": "1748240"
  },
  {
    "text": "events back in the right place we don't want to be if we use processing time stamp then um events from earlier in the",
    "start": "1748240",
    "end": "1754279"
  },
  {
    "text": "history will place will be place at the end of it and we won't get that kind of retroactive information",
    "start": "1754279",
    "end": "1759440"
  },
  {
    "text": "effect um and our event consumers are going to need to take into account the possibility that the event history might",
    "start": "1759440",
    "end": "1764760"
  },
  {
    "text": "be incomplete at the time it's read in other words we might get later information which changes our view of",
    "start": "1764760",
    "end": "1770600"
  },
  {
    "text": "the state of something uh in which case we might want to consider using a a water mark or some kind of window to",
    "start": "1770600",
    "end": "1776279"
  },
  {
    "text": "give incoming events time to settle and even if you do do that you will also have to cater for the possibility that",
    "start": "1776279",
    "end": "1782159"
  },
  {
    "text": "events will arrive so much out of time that you simply have to reject them and compensate for the fact that um you know",
    "start": "1782159",
    "end": "1788760"
  },
  {
    "text": "they they they're treated effectively as if they've been lost so there are some complexities in the um the sort of time",
    "start": "1788760",
    "end": "1795440"
  },
  {
    "text": "domain here which you need to keep in mind okay I'm going to go on and talk about",
    "start": "1795440",
    "end": "1800919"
  },
  {
    "text": "the programming model so this is how we've made life easier for programmers",
    "start": "1800919",
    "end": "1805960"
  },
  {
    "start": "1805000",
    "end": "1823000"
  },
  {
    "text": "it to Emit and consume events so the core metaphor assuming that we've got a",
    "start": "1805960",
    "end": "1811240"
  },
  {
    "text": "stream of events is that we have a consumer of event literally in ja eight",
    "start": "1811240",
    "end": "1817120"
  },
  {
    "text": "that's the that's the interface so something that simply consumes events one at a time and if we want to emit events what",
    "start": "1817120",
    "end": "1825519"
  },
  {
    "start": "1823000",
    "end": "1873000"
  },
  {
    "text": "happens is you give me a consumer event and I call the accept method on it to",
    "start": "1825519",
    "end": "1831000"
  },
  {
    "text": "send events to it one at a time so given an event consumer which we've got from somewhere we construct an event package",
    "start": "1831000",
    "end": "1838760"
  },
  {
    "text": "received giving it an aggregate ID a stream Tim stamp the name of the event and some um attributes associated with",
    "start": "1838760",
    "end": "1845840"
  },
  {
    "text": "it and we hand it off to that consumer and once that consumer once that method",
    "start": "1845840",
    "end": "1850880"
  },
  {
    "text": "call returns we know that the events has been perceived by the system and will subsequently be written into storage and",
    "start": "1850880",
    "end": "1857000"
  },
  {
    "text": "all of the downstream processing will occur we don't guarantee that all of the processing will have occurred by the",
    "start": "1857000",
    "end": "1862320"
  },
  {
    "text": "time the methods returned so the method might simply be pushing something onto a cafka um topic and then coming",
    "start": "1862320",
    "end": "1870639"
  },
  {
    "text": "back if you want to handle events it's much the same we Implement consumer of event and we handle events that are sent",
    "start": "1870639",
    "end": "1877279"
  },
  {
    "start": "1873000",
    "end": "1966000"
  },
  {
    "text": "to us so here we've got a very simple one which takes an event we're assuming it's a package received event and just",
    "start": "1877279",
    "end": "1883600"
  },
  {
    "text": "print something out to the console and once we've got that Handler we can pass it into our right events method um and",
    "start": "1883600",
    "end": "1890639"
  },
  {
    "text": "the event will be sent out to it so that's the the kind of un the underlying",
    "start": "1890639",
    "end": "1896159"
  },
  {
    "text": "or kind of low level model for how we do it at a slightly higher level we've got",
    "start": "1896159",
    "end": "1901320"
  },
  {
    "text": "a mapping within Java 8 where we map the entire um event protocol for an",
    "start": "1901320",
    "end": "1906720"
  },
  {
    "text": "aggregate so the complete set of events that can occur to it using a single interface now some systems do this um by",
    "start": "1906720",
    "end": "1914320"
  },
  {
    "text": "having a separate pojo for each event type may or may not them all kind of inherit from the same class um I have a",
    "start": "1914320",
    "end": "1921440"
  },
  {
    "text": "viscal dislike of poos as value types um and I quite like being able to define",
    "start": "1921440",
    "end": "1926679"
  },
  {
    "text": "the entire um protocol for an aggregate in a single interface like this so we have um an annotation that tells us what",
    "start": "1926679",
    "end": "1934679"
  },
  {
    "text": "type of aggregat the interface handles events for and then a single method for each event type and by convention unless",
    "start": "1934679",
    "end": "1941720"
  },
  {
    "text": "you write it with an annotation the name of the method is the name of the event the first two parameters are always the",
    "start": "1941720",
    "end": "1947559"
  },
  {
    "text": "time stamp and the aggregate ID and then these subsequent parameters are the um",
    "start": "1947559",
    "end": "1953240"
  },
  {
    "text": "attributes of the event and so they are that when you make a call to one of",
    "start": "1953240",
    "end": "1958320"
  },
  {
    "text": "these methods the idea is we want to convert it into concursus as internal representation of an",
    "start": "1958320",
    "end": "1964200"
  },
  {
    "text": "event and the way we use that is given an a playing old event consumer we get a",
    "start": "1964200",
    "end": "1969679"
  },
  {
    "start": "1966000",
    "end": "2049000"
  },
  {
    "text": "proxy so we use event intermitting proxy and we say um proxy parcel events class",
    "start": "1969679",
    "end": "1975240"
  },
  {
    "text": "which is our interface to this event consumer and we get back a paral events object that we can call these methods on",
    "start": "1975240",
    "end": "1981600"
  },
  {
    "text": "and when we call these events it creates a suitable events representing the method call that's just occurred and it",
    "start": "1981600",
    "end": "1987880"
  },
  {
    "text": "gives it to the event consumer on the other end if we want to",
    "start": "1987880",
    "end": "1993919"
  },
  {
    "text": "handle events again we implement the interface and we get something to dispatch events to it by calling the",
    "start": "1993919",
    "end": "1999919"
  },
  {
    "text": "methods on the interface and in this example I only really want to handle one type of event so I've actually created",
    "start": "1999919",
    "end": "2006360"
  },
  {
    "text": "another interface which presents just the per received at Depo event type because then I can Implement that with a",
    "start": "2006360",
    "end": "2012480"
  },
  {
    "text": "a Lambda because it's a single method interface and what we do um is we get a",
    "start": "2012480",
    "end": "2018880"
  },
  {
    "text": "dispatching event out Channel which says I know how to when I receive an event",
    "start": "2018880",
    "end": "2024200"
  },
  {
    "text": "convert that into a method call on this interface we Supply a Handler that receives the event and then we pass that",
    "start": "2024200",
    "end": "2030399"
  },
  {
    "text": "into our to our Handler so we can then receive incoming method CS like that so",
    "start": "2030399",
    "end": "2036279"
  },
  {
    "text": "that's the Java 8 mapping um which is which we found to be very convenient um",
    "start": "2036279",
    "end": "2041679"
  },
  {
    "text": "for kind of it makes life easy for um programmers to understand what they're what they're doing the cotlin mapping um",
    "start": "2041679",
    "end": "2049599"
  },
  {
    "start": "2049000",
    "end": "2161000"
  },
  {
    "text": "is kind of similar but different we have a similar kind of shape which is you've got a sort of outer context which says",
    "start": "2049599",
    "end": "2056000"
  },
  {
    "text": "these are events for this Aggregate and then all of the possible events are defined within that context but we do it",
    "start": "2056000",
    "end": "2061320"
  },
  {
    "text": "using sealed classes which are like sealed case classes in Scala um so the",
    "start": "2061320",
    "end": "2067000"
  },
  {
    "text": "idea is that with a sealed class the only possible subclasses of that class are those which are defined within the",
    "start": "2067000",
    "end": "2073200"
  },
  {
    "text": "scope of the class it's a bit like having an enum so we know that the only possible implementations of parcel",
    "start": "2073200",
    "end": "2079358"
  },
  {
    "text": "events are these four classes received at Depo loaded on truck delivered delivery failed and each of those",
    "start": "2079359",
    "end": "2086200"
  },
  {
    "text": "captures the the attributes and the type of the event you'll notice that we no longer include the um the aggregate ID",
    "start": "2086200",
    "end": "2093679"
  },
  {
    "text": "or the time stamp those get added on later on um so if we want to dispatch some events we",
    "start": "2093679",
    "end": "2101160"
  },
  {
    "text": "have something called an event bus and we ask it to dispatch events to a particular aggregate ID and then we just",
    "start": "2101160",
    "end": "2106280"
  },
  {
    "text": "give it the events just construct them using cot's Constructors so received at",
    "start": "2106280",
    "end": "2111400"
  },
  {
    "text": "depo and then tell we tell it when it happened using the at anix operator there and that's quite a nice little DSL",
    "start": "2111400",
    "end": "2118200"
  },
  {
    "text": "for defining and limiting events on the other side um cotlin has a",
    "start": "2118200",
    "end": "2123560"
  },
  {
    "text": "very nice um mechanism for um pattern matching again this is similar to",
    "start": "2123560",
    "end": "2129079"
  },
  {
    "text": "pattern matching in Scala against Case classes so given that we've received a pass paral event we can match all that",
    "start": "2129079",
    "end": "2135560"
  },
  {
    "text": "event type using the when operator um it will be able the compiler will be able to tell whether or not",
    "start": "2135560",
    "end": "2141680"
  },
  {
    "text": "we've got a complete set of matches again as if we were doing a switch case against an enum or something like that",
    "start": "2141680",
    "end": "2147760"
  },
  {
    "text": "so it will match against it um automatically cast the events to the type on the left hand side and then we",
    "start": "2147760",
    "end": "2153240"
  },
  {
    "text": "can do whatever we want with it on the right hand side so that's kind of a neat um um API for",
    "start": "2153240",
    "end": "2159480"
  },
  {
    "text": "cotlin in between emitting and receiving events um is where most of the the",
    "start": "2159480",
    "end": "2164720"
  },
  {
    "start": "2161000",
    "end": "2467000"
  },
  {
    "text": "interesting stuff happens so we have what I call event handling middleware which is basically a chain of event",
    "start": "2164720",
    "end": "2170359"
  },
  {
    "text": "consumers that transform rot persist and dispatch events so a single event",
    "start": "2170359",
    "end": "2175880"
  },
  {
    "text": "submitted to this chain might be checked against a n imp poeny filter like a hazelcast distributed to cash it might",
    "start": "2175880",
    "end": "2182119"
  },
  {
    "text": "be serialized to Jason it might be written out to a message CU topic it might be retrieved from topic and de",
    "start": "2182119",
    "end": "2188240"
  },
  {
    "text": "serialized persist to an event store like Cassandra it might be published to some event handler which maintains a",
    "start": "2188240",
    "end": "2194560"
  },
  {
    "text": "query optimized view a part of the system or it might be published to an event handler which maintains an in an",
    "start": "2194560",
    "end": "2200200"
  },
  {
    "text": "index of Aggregates by event property values so Parcels by Depo ID if we want",
    "start": "2200200",
    "end": "2205240"
  },
  {
    "text": "to know where our Parcels currently are or if it was light bulbs might be light bulbs by wattage or whatever so",
    "start": "2205240",
    "end": "2210839"
  },
  {
    "text": "automatic indexing is kind of a a useful thing that we can build off the back of this model okay and on the hand back to T to",
    "start": "2210839",
    "end": "2218560"
  },
  {
    "text": "talk about some of the future directions that we have okay this is the last Slide by the way so launch soon um okay so um",
    "start": "2218560",
    "end": "2227200"
  },
  {
    "text": "there are a couple of things we're looking into um cfus streams was announced after we um developed most of",
    "start": "2227200",
    "end": "2233640"
  },
  {
    "text": "concourses and we actually was very excited about that because it's really the perfect fit um to to underpin the",
    "start": "2233640",
    "end": "2239720"
  },
  {
    "text": "concourses logic uh so we looking at uh closer integration with kfka streams and",
    "start": "2239720",
    "end": "2244920"
  },
  {
    "text": "using some of the lower level features like the local storage and the um um",
    "start": "2244920",
    "end": "2250400"
  },
  {
    "text": "table and log abstraction basically look how we can uh take advantage of that so on the technical side but at the S of",
    "start": "2250400",
    "end": "2258599"
  },
  {
    "text": "system um side of things as you saw one one weakness is that the events are",
    "start": "2258599",
    "end": "2264640"
  },
  {
    "text": "organized by um siloed buckets which means that when you want to write",
    "start": "2264640",
    "end": "2269960"
  },
  {
    "text": "queries that are across the system then the exercise is left to the reader it",
    "start": "2269960",
    "end": "2275119"
  },
  {
    "text": "does work and we tried that a number of times there's a lot of work that needs to be done and you need to think about",
    "start": "2275119",
    "end": "2280319"
  },
  {
    "text": "the semantics of what you're doing so looking at ways of basically implementing narrative threads threads",
    "start": "2280319",
    "end": "2286960"
  },
  {
    "text": "as in Threads timelines or lines rather than threads across the event histories",
    "start": "2286960",
    "end": "2292720"
  },
  {
    "text": "to be able to reason um uh at at the system level and write interesting queries so you can think about it",
    "start": "2292720",
    "end": "2298839"
  },
  {
    "text": "concursus does a lot now to organize data that you get uh but we haven't told",
    "start": "2298839",
    "end": "2304800"
  },
  {
    "text": "the story behind the entities yet and this what we're looking in too um so would you like Dominic to talk",
    "start": "2304800",
    "end": "2311319"
  },
  {
    "text": "about the next couple of things so generic attribute indexing this is something I mentioned already because",
    "start": "2311319",
    "end": "2316760"
  },
  {
    "text": "each event comes with a bundle of attributes can name value pairs um we can drive an index off the back of that",
    "start": "2316760",
    "end": "2322960"
  },
  {
    "text": "we can save for each event um are we interested in this particular attribute on this particular type of event is the",
    "start": "2322960",
    "end": "2329000"
  },
  {
    "text": "value that we have for it newer than the older value that we have for it if so update our index and then we can say",
    "start": "2329000",
    "end": "2334560"
  },
  {
    "text": "okay give me all of the package IDs which are currently in a Depo with this Depo ID so it just gives you a some kind",
    "start": "2334560",
    "end": "2340560"
  },
  {
    "text": "of search functionality based on the um attributes you're putting into the system um State Management and caching",
    "start": "2340560",
    "end": "2347480"
  },
  {
    "text": "is quite an interesting one because we can construct the state of of an aggregant by replaying its event history",
    "start": "2347480",
    "end": "2353200"
  },
  {
    "text": "into some kind of state Model A logical thing to do is to actually keep a cache of the current state and then when an",
    "start": "2353200",
    "end": "2359599"
  },
  {
    "text": "event comes in say again is this event more recent than the last event we have for the system if so update the state if",
    "start": "2359599",
    "end": "2366280"
  },
  {
    "text": "it's older then we need to go and fetch the state's history insert this event into that history and then rebuild the",
    "start": "2366280",
    "end": "2371680"
  },
  {
    "text": "state based on that and of course if we don't have any state in the cast and again we need to load the history from",
    "start": "2371680",
    "end": "2377359"
  },
  {
    "text": "the persistent store Write Our event into it and construct the state but that then gives us the ability to query um",
    "start": "2377359",
    "end": "2384200"
  },
  {
    "text": "the state of an aggregate directly pull it out of the cach if it's actually in there and also we can use the um State",
    "start": "2384200",
    "end": "2391359"
  },
  {
    "text": "transition model to validate events so we can say actually this event isn't um valid for an object State and refus to",
    "start": "2391359",
    "end": "2398480"
  },
  {
    "text": "process the event at that point um and finally improved Cloud tooling at the moment if you want to run",
    "start": "2398480",
    "end": "2406040"
  },
  {
    "text": "up um you know Cassandra and spring boot service based on concursus and the CAA",
    "start": "2406040",
    "end": "2411760"
  },
  {
    "text": "topic and so on um you have to know how to do all of that yourself and uh we think it would be quite neat to have",
    "start": "2411760",
    "end": "2417440"
  },
  {
    "text": "some terraform scripts some anible scripts and some kind of General kind of quick start stuff maybe even some vant",
    "start": "2417440",
    "end": "2424079"
  },
  {
    "text": "boxes that would help you get started quickly with a concursus space system yes the the workr now is using something",
    "start": "2424079",
    "end": "2429760"
  },
  {
    "text": "like Docker and Docker compos to start these things on your machine in the background and this is sufficient to have a full environment and to try and",
    "start": "2429760",
    "end": "2436640"
  },
  {
    "text": "develop against it but you still need to do a couple of things manually and we're looking at a more coherent approach",
    "start": "2436640",
    "end": "2441720"
  },
  {
    "text": "where you get something out of the box that is actually meaningful uh to make it easier for everyone to uh try it",
    "start": "2441720",
    "end": "2448200"
  },
  {
    "text": "hopefully so thank you for listening and thank you very much okay thank you",
    "start": "2448200",
    "end": "2457240"
  }
]