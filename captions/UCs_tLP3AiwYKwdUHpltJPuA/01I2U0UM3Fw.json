[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "thank you everyone for being here and thank you go to Amsterdam for having me as a speaker this is my first time at",
    "start": "12040",
    "end": "17680"
  },
  {
    "text": "this conference um so as Frank said feel free to ask any questions through the",
    "start": "17680",
    "end": "23400"
  },
  {
    "text": "app I can take some questions at the end of my session as well uh that's all good and of course leave some feedback as",
    "start": "23400",
    "end": "30039"
  },
  {
    "text": "well because as much as we are speakers we cannot improve and we can we cannot",
    "start": "30039",
    "end": "35760"
  },
  {
    "text": "keep improving our content and the way we deliver our sessions without some feedback from the wonderful audience um",
    "start": "35760",
    "end": "42960"
  },
  {
    "text": "so the next 50 minutes we'll focus on grpc specifically the implementation of grpc in.net we'll go through grpc modes",
    "start": "42960",
    "end": "50920"
  },
  {
    "start": "45000",
    "end": "133000"
  },
  {
    "text": "we'll speak about versioning because at the end of the day grpc is an API uh",
    "start": "50920",
    "end": "56120"
  },
  {
    "text": "we'll speak about hosting uh so the the idea is is you go from learning about",
    "start": "56120",
    "end": "61440"
  },
  {
    "text": "grpc all the way to how we can host grpc uh consume the API as well and maybe if",
    "start": "61440",
    "end": "67720"
  },
  {
    "text": "you have time we'll go through some bonus tips and uh other things at the end as well and why should you listen to",
    "start": "67720",
    "end": "73360"
  },
  {
    "text": "me who am I I am Pima ner I am a software engineer at particular software",
    "start": "73360",
    "end": "78400"
  },
  {
    "text": "where we build n service bus and the entire platform around n service bus I have come all the way from UK I live in",
    "start": "78400",
    "end": "85320"
  },
  {
    "text": "baksh with my husband and 10-year-old daughter I'm a Microsoft MVP for",
    "start": "85320",
    "end": "90400"
  },
  {
    "text": "developer Technologies um and nonwork me I read a lot I spend a lot of time with my daughter and I speak at a lot of",
    "start": "90400",
    "end": "97680"
  },
  {
    "text": "conferences and meetups and I do have a daily job and all that was not enough I'm also a student of karnatic Music",
    "start": "97680",
    "end": "104200"
  },
  {
    "text": "vocals which is a stream of Indian classical music should you wish to reach out to me via DMs I am on LinkedIn as",
    "start": "104200",
    "end": "111320"
  },
  {
    "text": "for Nim manayer that is how I am on Twitter as well so straight into the topic grpc it is a modern open source",
    "start": "111320",
    "end": "118680"
  },
  {
    "text": "high performance remote procedure call framework straight out of the docs this is what grpc is termed as it is open",
    "start": "118680",
    "end": "125399"
  },
  {
    "text": "source it's meant for high performance remote procedure calls and that's an entire framework around it a little bit",
    "start": "125399",
    "end": "132440"
  },
  {
    "text": "of G uh history about grpc it's Google's implementation of RPC so remote",
    "start": "132440",
    "end": "138040"
  },
  {
    "start": "133000",
    "end": "247000"
  },
  {
    "text": "procedure calls that such kind of Frameworks are not new if you look back at RPC Frameworks you might actually",
    "start": "138040",
    "end": "145120"
  },
  {
    "text": "date back all the way to 970s or 80s however you look at it but GR PC Google",
    "start": "145120",
    "end": "151080"
  },
  {
    "text": "remote procedure call that is pretty new it was called project stubby and it was",
    "start": "151080",
    "end": "156239"
  },
  {
    "text": "made open source and called grpc in 2015 March and with net we started getting",
    "start": "156239",
    "end": "164200"
  },
  {
    "text": "official support for grpc from net core 3.0 onwards so if you're looking at",
    "start": "164200",
    "end": "169879"
  },
  {
    "text": "remote procedure call requirements for your project in modern. net this is the way to go because we had WCF in the past",
    "start": "169879",
    "end": "177680"
  },
  {
    "text": "which was NET Framework and we have code WCF which is a community kind of supported project but if you are after",
    "start": "177680",
    "end": "184640"
  },
  {
    "text": "something more officially supported grpc is the way to go ahead grpc Favors",
    "start": "184640",
    "end": "190239"
  },
  {
    "text": "contract based API development that is designed for HTTP 2 and Beyond now if you are migrating from WCF world you",
    "start": "190239",
    "end": "197640"
  },
  {
    "text": "will actually see similarities in fact that was one of the ways that Microsoft was pitching this and that's how the",
    "start": "197640",
    "end": "203599"
  },
  {
    "text": "transition kind of happens as well and where is grpc used microser to",
    "start": "203599",
    "end": "210080"
  },
  {
    "text": "microservice communication how can one service get data and information from",
    "start": "210080",
    "end": "215239"
  },
  {
    "text": "another most efficiently and in the most performant way that's where grpc comes in iot devices that's a regular platform",
    "start": "215239",
    "end": "223879"
  },
  {
    "text": "where grpc used polyglot environments when you want to support multiple",
    "start": "223879",
    "end": "229040"
  },
  {
    "text": "languages and Frameworks if you have streaming requirements for your project that's a good way to use grpc grpc is a",
    "start": "229040",
    "end": "235640"
  },
  {
    "text": "good candidate but it's not the ideal candidate for browser based apps we'll",
    "start": "235640",
    "end": "241239"
  },
  {
    "text": "we'll talk about that briefly as well so straight into some action with grpc let",
    "start": "241239",
    "end": "247319"
  },
  {
    "start": "247000",
    "end": "823000"
  },
  {
    "text": "us have a look at some code Okie doie can you read the code",
    "start": "247319",
    "end": "254079"
  },
  {
    "text": "correctly so this is not what I want at this point of time um so I have this code available on my GitHub uh repo so",
    "start": "254079",
    "end": "262240"
  },
  {
    "text": "this is a public repo if you want to go and have a look at it so in this basic demo I have a basic protos project which",
    "start": "262240",
    "end": "268600"
  },
  {
    "text": "is a class Library with absolutely no dependencies as of now but what I have in here is a Proto",
    "start": "268600",
    "end": "276639"
  },
  {
    "text": "file a a file with a dopro extension and that is where you have the contract of",
    "start": "276639",
    "end": "282320"
  },
  {
    "text": "your API so grpc with the contract based API development this is the contract",
    "start": "282320",
    "end": "287720"
  },
  {
    "text": "this is the Holy Grail when it comes to grpc and and how you put together that",
    "start": "287720",
    "end": "293759"
  },
  {
    "text": "contract is very specific in grpc it cannot be in anything that you know it is very specific to Google and it has a",
    "start": "293759",
    "end": "301560"
  },
  {
    "text": "certain syntax and at this point of time what we are looking at is Proto 3 so",
    "start": "301560",
    "end": "306840"
  },
  {
    "text": "everything that you see in this file confirms to the proto3 syntax with grpc",
    "start": "306840",
    "end": "312199"
  },
  {
    "text": "there's code generation and the code that is generator in my case that is C I",
    "start": "312199",
    "end": "317759"
  },
  {
    "text": "can say Hey Google generate the code for me and put it into this name space that",
    "start": "317759",
    "end": "323120"
  },
  {
    "text": "is suggest here with the option C namespace so that is for the generated",
    "start": "323120",
    "end": "328600"
  },
  {
    "text": "code now now Proto files itself can be put into namespaces and to avoid",
    "start": "328600",
    "end": "334080"
  },
  {
    "text": "namespace clashes you can specify a namespace per Proto file and this and",
    "start": "334080",
    "end": "340000"
  },
  {
    "text": "that is done using the package keyword if you do not specify the C namespace",
    "start": "340000",
    "end": "345440"
  },
  {
    "text": "what you specify as the package name here also doubles up as the C Nam space",
    "start": "345440",
    "end": "351360"
  },
  {
    "text": "in fact it is considered a good practice to have the package name in place with every Proto file that you have at least",
    "start": "351360",
    "end": "358240"
  },
  {
    "text": "the package name even though if you don't have the C name name space and",
    "start": "358240",
    "end": "363400"
  },
  {
    "text": "then you have your service definition it is typically one service per Proto file and inside your service you can have as",
    "start": "363400",
    "end": "370080"
  },
  {
    "text": "many RPC definitions as you want so every RPC begins with the RPC keyword",
    "start": "370080",
    "end": "376360"
  },
  {
    "text": "and then you have your name and then the requests and returns a response so with",
    "start": "376360",
    "end": "382800"
  },
  {
    "text": "grpc the RPC definitions it is always a single encapsulated object that is your",
    "start": "382800",
    "end": "388639"
  },
  {
    "text": "request as well as the response you cannot have multiple parameters like you have in a typical function or method it",
    "start": "388639",
    "end": "394639"
  },
  {
    "text": "is always a single encapsulated object and the request and responses they also",
    "start": "394639",
    "end": "401280"
  },
  {
    "text": "part of for uh form a part of the contract and it is against this contract",
    "start": "401280",
    "end": "406599"
  },
  {
    "text": "that you see here that everything is passed serialized and deserialized this",
    "start": "406599",
    "end": "411880"
  },
  {
    "text": "is language neutral and platform neutral and everything is passed against this",
    "start": "411880",
    "end": "416960"
  },
  {
    "text": "particular contract that we put in place which is the reason why you can have grpc in polyglot frame uh polyglot",
    "start": "416960",
    "end": "423680"
  },
  {
    "text": "environments so this is the contract now how do I create a service out of it so I start with a asp.net core",
    "start": "423680",
    "end": "432319"
  },
  {
    "text": "project with this package in place that is grpc aspn net core which is a meta",
    "start": "432319",
    "end": "437800"
  },
  {
    "text": "package which has got references to ASP net core server which is a serers side library and the tooling which helps me",
    "start": "437800",
    "end": "444919"
  },
  {
    "text": "create or generate the code that I want for the code generation to happen I need",
    "start": "444919",
    "end": "450639"
  },
  {
    "text": "to refer to my contract as an artifact so sharing that contract file is very",
    "start": "450639",
    "end": "455919"
  },
  {
    "text": "important be the server or the client so here I am adding my Proto file using the",
    "start": "455919",
    "end": "462240"
  },
  {
    "text": "Proto buff attribute here so the presence of a Proto buff attribute referencing to a Proto file is an",
    "start": "462240",
    "end": "468759"
  },
  {
    "text": "indication that code must be generated and the kind of code that gets generated depends upon the grpc services attribute",
    "start": "468759",
    "end": "476039"
  },
  {
    "text": "here so it can be client or the service s side coded or it can be both client and server s side code that gets",
    "start": "476039",
    "end": "482400"
  },
  {
    "text": "generated it is the value here that drives it so we get some initial code",
    "start": "482400",
    "end": "487479"
  },
  {
    "text": "generated and you can see that in the obj folder here where for every Proto",
    "start": "487479",
    "end": "494039"
  },
  {
    "text": "file that you have two different classes gets created in the Greet docs so if you",
    "start": "494039",
    "end": "499840"
  },
  {
    "text": "if I have to follow the naming convention it is basically the name of the Proto file. CS class here you have",
    "start": "499840",
    "end": "507800"
  },
  {
    "text": "all the messages so if you look here you have the hello request uh somewhere",
    "start": "507800",
    "end": "513000"
  },
  {
    "text": "there you have the hello reply as well so all the messages that you saw in the Proto file gets written down as pocos",
    "start": "513000",
    "end": "520479"
  },
  {
    "text": "and there is a Proto file grpc docs class where uh the code generation the",
    "start": "520479",
    "end": "526360"
  },
  {
    "text": "actual service code generation happens so for every service that I have in my f",
    "start": "526360",
    "end": "531959"
  },
  {
    "text": "sorry not every service for the service I have in my Proto file an abstract class gets created here so if I say",
    "start": "531959",
    "end": "539480"
  },
  {
    "text": "greet uh base so that is the abstract class that gets created so the naming",
    "start": "539480",
    "end": "546040"
  },
  {
    "text": "convention is again the service name dot uh sorry service name followed by the keyword base and every RPC definition",
    "start": "546040",
    "end": "553360"
  },
  {
    "text": "becomes a virtual method in that abstract class at this point I do not have any implementation so the minute I",
    "start": "553360",
    "end": "559600"
  },
  {
    "text": "consume this service as such I get an RPC exception so we are following um the",
    "start": "559600",
    "end": "566240"
  },
  {
    "text": "language paradigms that we know here abstract classes with virual methods which means that I can create a class",
    "start": "566240",
    "end": "572839"
  },
  {
    "text": "which inherits from the greab based class and override uh the virtual method to give",
    "start": "572839",
    "end": "578600"
  },
  {
    "text": "it my own implementation now the method signature varies when it comes to grpc mode but one thing that is available to",
    "start": "578600",
    "end": "585839"
  },
  {
    "text": "every grpc service out the box is a server called context object this is",
    "start": "585839",
    "end": "591000"
  },
  {
    "text": "where you can access the contextual information about the call like if you have authentication information the",
    "start": "591000",
    "end": "597279"
  },
  {
    "text": "underlying HTTP context information about the uh request headers all of that",
    "start": "597279",
    "end": "602720"
  },
  {
    "text": "is available in here and at the end of the day grpc is a middleware and it is a",
    "start": "602720",
    "end": "608760"
  },
  {
    "text": "part of asp.net core so which means your di authentication authorization the",
    "start": "608760",
    "end": "614440"
  },
  {
    "text": "logging functionality all of that is available to you and to tie it all up in asp.net core in program.cs we need to",
    "start": "614440",
    "end": "621959"
  },
  {
    "text": "add the grpc services to the DI container and also add the service that",
    "start": "621959",
    "end": "627160"
  },
  {
    "text": "I have implemented uh to the requ EST pipeline using the map grpc service method so that is a service side aspect",
    "start": "627160",
    "end": "634480"
  },
  {
    "text": "covered for me and to consume this service in my client I have a console",
    "start": "634480",
    "end": "639800"
  },
  {
    "text": "app again I have referred to the Proto file using a Proto buff attribute but",
    "start": "639800",
    "end": "645560"
  },
  {
    "text": "this time the generated code is a client side code and to support the code generation I need these three packages",
    "start": "645560",
    "end": "652279"
  },
  {
    "text": "the Google Proto above which generates the corresponding cop types the net client library and the grpc tools which",
    "start": "652279",
    "end": "659560"
  },
  {
    "text": "is where the actual tooling leaves to generate the code for me similar to the",
    "start": "659560",
    "end": "664639"
  },
  {
    "text": "server side code generation there is client side code generation happening all the messages are pocos but there is",
    "start": "664639",
    "end": "671760"
  },
  {
    "text": "something special that gets created in the client side which is in greet grpc",
    "start": "671760",
    "end": "676959"
  },
  {
    "text": "there is a greeter client that gets generated there we go this generated",
    "start": "676959",
    "end": "682600"
  },
  {
    "text": "client is important for us to communicate with the server so if I am",
    "start": "682600",
    "end": "687920"
  },
  {
    "text": "to see the implementation part of it uh",
    "start": "687920",
    "end": "693200"
  },
  {
    "text": "program.cs I start with creating what is known as a grpc channel which points to",
    "start": "693200",
    "end": "698800"
  },
  {
    "text": "my local host server so grpc channel is something like a long-standing connection between the client and the",
    "start": "698800",
    "end": "704760"
  },
  {
    "text": "server that part is where the system knows where is the server the rest of",
    "start": "704760",
    "end": "710279"
  },
  {
    "text": "the system doesn't care about the server it only invokes the method grpc channel",
    "start": "710279",
    "end": "715480"
  },
  {
    "text": "is quite an expensive object to create so um whenever you create a channel it's",
    "start": "715480",
    "end": "721399"
  },
  {
    "text": "often kind of reused across multiple clients or even multiple types of clients and all the requests can be",
    "start": "721399",
    "end": "728519"
  },
  {
    "text": "simultaneously multiplexed that same http2 request uh and we use once we",
    "start": "728519",
    "end": "735199"
  },
  {
    "text": "create a grpc channel we use that channel to create an instance of our",
    "start": "735199",
    "end": "740440"
  },
  {
    "text": "greeta client and using the client I can invoke my stub method so in my greeta",
    "start": "740440",
    "end": "748000"
  },
  {
    "text": "client class there's also the stop methods in uh that gets generated for me the stop methods are nothing but a",
    "start": "748000",
    "end": "754519"
  },
  {
    "text": "representation of the actual service side method so in reality this part",
    "start": "754519",
    "end": "759920"
  },
  {
    "text": "looks like a local function call I invoking a local function but it",
    "start": "759920",
    "end": "765160"
  },
  {
    "text": "actually goes and executes in the server because the underlying grpc Channel takes care of it so this location",
    "start": "765160",
    "end": "772600"
  },
  {
    "text": "transparency trying to program something trying to make a function call as though it was a local function call but in",
    "start": "772600",
    "end": "779639"
  },
  {
    "text": "reality it jumps the network and executes somewhere that is remote procedure call for you so let us run",
    "start": "779639",
    "end": "786839"
  },
  {
    "text": "this program and see so the first thing to do is grpc basic",
    "start": "786839",
    "end": "792480"
  },
  {
    "text": "service that is up and running now at any point let's",
    "start": "792480",
    "end": "798320"
  },
  {
    "text": "see whe the demo goes are with me yep that's running and the client uh debug start",
    "start": "798320",
    "end": "806519"
  },
  {
    "text": "without debugging that should that has actually spoken to the server and got",
    "start": "806519",
    "end": "812839"
  },
  {
    "text": "got back some response for me so the basic demo is working um so let us move",
    "start": "812839",
    "end": "818600"
  },
  {
    "text": "on so that is grpc in in nutshell but moving on to other things uh just",
    "start": "818600",
    "end": "824000"
  },
  {
    "start": "823000",
    "end": "1305000"
  },
  {
    "text": "reviewing what we just saw we have the contract definition in proto file and the Proto files must be shared between",
    "start": "824000",
    "end": "830440"
  },
  {
    "text": "the server and the client as some kind of an artifact for you to communicate with the grpc service there's code",
    "start": "830440",
    "end": "837480"
  },
  {
    "text": "generated on server as well as client we went through the abstract Base Class as well as the client's tub",
    "start": "837480",
    "end": "843120"
  },
  {
    "text": "methods you always require that generated grpc client to communicate with the server and the code generation",
    "start": "843120",
    "end": "850639"
  },
  {
    "text": "that happens behind the scenes is done using a special compiler called the protoc C compiler and the grpc tools",
    "start": "850639",
    "end": "857839"
  },
  {
    "text": "package that we just saw has this compiler baked in along with a protoc plug-in which understands C that",
    "start": "857839",
    "end": "864920"
  },
  {
    "text": "generates the C code for me so all that code that is generated confirms to the microsoft.net standards that's been laed",
    "start": "864920",
    "end": "871839"
  },
  {
    "text": "out for C so that shouldn't be a worry there in fact Proto C understands a lot",
    "start": "871839",
    "end": "877600"
  },
  {
    "text": "more languages than we think all of these languages are uh languages which",
    "start": "877600",
    "end": "883160"
  },
  {
    "text": "protos natively understands and Google supports it out of the box and there are about 90 different third-party add-ons",
    "start": "883160",
    "end": "890759"
  },
  {
    "text": "available as well if you want so you have your contract which is language neutral and platform neutral and you",
    "start": "890759",
    "end": "897079"
  },
  {
    "text": "generate your code based on that and you have everything passed and validated and",
    "start": "897079",
    "end": "902800"
  },
  {
    "text": "serialized and deserialized against that language neutral platform which is what makes grpc a good candidate for polyglot",
    "start": "902800",
    "end": "910959"
  },
  {
    "text": "uh Frameworks and uh environments so talking about one of the key terms with grpc that is protocol",
    "start": "910959",
    "end": "918279"
  },
  {
    "text": "buffers the name actually originates from the class that Google had which used to be a buffer but in reality",
    "start": "918279",
    "end": "926360"
  },
  {
    "text": "protocol buffer is Google's open source mechanism to realize structured data and as I said it is platform neutral",
    "start": "926360",
    "end": "933040"
  },
  {
    "text": "language neutral and this is incredibly smart because you can actually tame it to be both backwards as well as forward",
    "start": "933040",
    "end": "939519"
  },
  {
    "text": "compatible and everything you saw in that Proto file that is the service",
    "start": "939519",
    "end": "944759"
  },
  {
    "text": "alongside the messages all of that together forms protuff this is an",
    "start": "944759",
    "end": "950399"
  },
  {
    "text": "extensive Topic in itself you have a entire website of documentation just on",
    "start": "950399",
    "end": "956279"
  },
  {
    "text": "protuff uh it's not something that you can actually read and digest with a cup of tea it's it's quite uh Advanced but",
    "start": "956279",
    "end": "964199"
  },
  {
    "text": "for Simplicity sake let us talk about it today as a interface definition language as well as the message exchange format",
    "start": "964199",
    "end": "971319"
  },
  {
    "text": "and the request and responses with grpc are in the form of messages so this is",
    "start": "971319",
    "end": "977040"
  },
  {
    "text": "what you saw in the Proto file as message an example is here and each",
    "start": "977040",
    "end": "982199"
  },
  {
    "text": "message is a record of key value pairs with each field having a special type a",
    "start": "982199",
    "end": "988160"
  },
  {
    "text": "name and and a number attached to it that number must be unique per field and",
    "start": "988160",
    "end": "993519"
  },
  {
    "text": "once your messages are in use that is your service is alive and running that",
    "start": "993519",
    "end": "998839"
  },
  {
    "text": "number must not be changed because breaking that leads to bad things happening because messages are",
    "start": "998839",
    "end": "1006000"
  },
  {
    "text": "transmitted in binary format with grpc and unlike Json where you actually have",
    "start": "1006000",
    "end": "1011120"
  },
  {
    "text": "the value transmitted on The Wire against the name of the field here the value of the field is actually",
    "start": "1011120",
    "end": "1017839"
  },
  {
    "text": "transmitted against the number so that is how protocol buffers the messages are transmitted across the wire and the fun",
    "start": "1017839",
    "end": "1025038"
  },
  {
    "text": "part is as a client if I don't set say the temperature name on the client and",
    "start": "1025039",
    "end": "1030760"
  },
  {
    "text": "when I issue the request that field is not even transmitted across the wire when it gets to the server side what",
    "start": "1030760",
    "end": "1037240"
  },
  {
    "text": "happens is the server has the contract so it actually tries to pass it in pass",
    "start": "1037240",
    "end": "1042558"
  },
  {
    "text": "the incoming request and deserialize it against the contract that is in place it finds ha temperature is so what I'm",
    "start": "1042559",
    "end": "1049720"
  },
  {
    "text": "going to do is before I go and hand it over to the next step that is the me the",
    "start": "1049720",
    "end": "1054760"
  },
  {
    "text": "invocation and execution that field is set to the default value for that type",
    "start": "1054760",
    "end": "1060360"
  },
  {
    "text": "so in this case temperature will be set to default value for uh for double in",
    "start": "1060360",
    "end": "1065520"
  },
  {
    "text": "this case so with scalar types in protuff there's no concept of null that",
    "start": "1065520",
    "end": "1070720"
  },
  {
    "text": "is something new to me as a developer as well but there are cases where it can be where null is possible as well um some",
    "start": "1070720",
    "end": "1079360"
  },
  {
    "text": "some other things you can technically have message numbers sorry not field",
    "start": "1079360",
    "end": "1084600"
  },
  {
    "text": "numbers ranging from one to that big number uh with 19,000 to 9",
    "start": "1084600",
    "end": "1092400"
  },
  {
    "text": "19,999 those numbers those field numbers specifically reserved for protocol",
    "start": "1092400",
    "end": "1098039"
  },
  {
    "text": "buffer implementation but of course when you start having this kind of field numbers consider readability",
    "start": "1098039",
    "end": "1105159"
  },
  {
    "text": "maintainability as well as encoding efficiency because when message en codes",
    "start": "1105159",
    "end": "1110240"
  },
  {
    "text": "field numbers 1 to 15 takes up one bite and the rest takes up more so the higher",
    "start": "1110240",
    "end": "1116679"
  },
  {
    "text": "the field numbers it takes up more space for encoding as well and that's not",
    "start": "1116679",
    "end": "1122120"
  },
  {
    "text": "something that we need because grpc is meant for performance service to service",
    "start": "1122120",
    "end": "1127880"
  },
  {
    "text": "communication and what are the types available for Proto Buffs these are the various different types and these are",
    "start": "1127880",
    "end": "1134600"
  },
  {
    "text": "the corresponding C type uh with bytes you can see that it is not something in the net space that we have it's a",
    "start": "1134600",
    "end": "1140919"
  },
  {
    "text": "special class that gets generated another word about the first",
    "start": "1140919",
    "end": "1146159"
  },
  {
    "text": "six types the int32s to the fixed uh sorry s in 64 they use what is known as",
    "start": "1146159",
    "end": "1152880"
  },
  {
    "text": "variable encoding so it only takes up as much space as it needs to it's not your",
    "start": "1152880",
    "end": "1158600"
  },
  {
    "text": "typical 4 byte and 8 byte integers and numbers uh if you have a Hello reply",
    "start": "1158600",
    "end": "1165440"
  },
  {
    "text": "message in that format you can represent that in C like so that is plain old uh",
    "start": "1165440",
    "end": "1171320"
  },
  {
    "text": "c.net for us you can also have enums in phob Buffs and they get generated as c",
    "start": "1171320",
    "end": "1178280"
  },
  {
    "text": "enums um you can have nested types so in this example I have a message called",
    "start": "1178280",
    "end": "1183919"
  },
  {
    "text": "nested message which actually forms a field of the hello reply that is also",
    "start": "1183919",
    "end": "1189600"
  },
  {
    "text": "possible uh so in this instance you have to create a new instead of nested message when I form a hello reply object",
    "start": "1189600",
    "end": "1197159"
  },
  {
    "text": "otherwise it can be null so you have to instantiate before you use it again plain uh old. net for us you can have",
    "start": "1197159",
    "end": "1204480"
  },
  {
    "text": "collections as well in your message the first type is repeated repeated represent a list or an array uh and to",
    "start": "1204480",
    "end": "1212559"
  },
  {
    "text": "make sure that again there is not no null values that is possible the way that is achieved it it doesn't have any",
    "start": "1212559",
    "end": "1219200"
  },
  {
    "text": "public Setters there's only Getters so which means that you can only append to the list you cannot rewrite the list you",
    "start": "1219200",
    "end": "1226320"
  },
  {
    "text": "cannot set it to null you can only append it all always but any scalar type or a nested message can be",
    "start": "1226320",
    "end": "1232960"
  },
  {
    "text": "repeated you also have dictionaries or dictionaries uh like things uh with",
    "start": "1232960",
    "end": "1239799"
  },
  {
    "text": "protuff that is using the map keyword uh and again it doesn't have a Setter only",
    "start": "1239799",
    "end": "1246080"
  },
  {
    "text": "a geta which means you can only append and of course the key always needs to be a integer or string type but the value",
    "start": "1246080",
    "end": "1254000"
  },
  {
    "text": "can be anything uh you might have noticed there is no date time that is supported for",
    "start": "1254000",
    "end": "1260200"
  },
  {
    "text": "that we need to bring in what is known as the Google well-known types this is just one of the Google well-known types",
    "start": "1260200",
    "end": "1266760"
  },
  {
    "text": "there are many other Google well-known types in this example I'm importing what is known as Tim stamp. prototo so using",
    "start": "1266760",
    "end": "1274480"
  },
  {
    "text": "the import keyword and the path that is how you import a well-known type into",
    "start": "1274480",
    "end": "1279799"
  },
  {
    "text": "your project and timestamp dopro gives you access to timestamp and duration",
    "start": "1279799",
    "end": "1285720"
  },
  {
    "text": "Proto types and you can convert any date time any net based datee time into",
    "start": "1285720",
    "end": "1291960"
  },
  {
    "text": "timestamp or duration uh for you the underlying classes are again Google protuff types it's not the net",
    "start": "1291960",
    "end": "1299279"
  },
  {
    "text": "types uh so that is uh messages and Proto Buffs in a nutshell and now we can",
    "start": "1299279",
    "end": "1304400"
  },
  {
    "text": "talk about grpc modes so grpc of course there's client and server but there is",
    "start": "1304400",
    "end": "1309919"
  },
  {
    "start": "1305000",
    "end": "1621000"
  },
  {
    "text": "beyond client and server there's multiple ways in which you have client and serve with grpc the first one is",
    "start": "1309919",
    "end": "1316840"
  },
  {
    "text": "unary that we just uh spoke about the the the actual average client server",
    "start": "1316840",
    "end": "1323799"
  },
  {
    "text": "response here the client sends a request message to the",
    "start": "1323799",
    "end": "1328919"
  },
  {
    "text": "server and the server responds back with a response message and the RPC",
    "start": "1329080",
    "end": "1334120"
  },
  {
    "text": "definition can look something like this um it's a single object that goes in and",
    "start": "1334120",
    "end": "1339440"
  },
  {
    "text": "a single message that comes back the idea that I'm trying to build around the demo is some kind of a device sending a",
    "start": "1339440",
    "end": "1345919"
  },
  {
    "text": "reading to the service for processing that that is the idea that I'm building here so the call starts with the client",
    "start": "1345919",
    "end": "1352600"
  },
  {
    "text": "sending the message the server processes it sends back some kind of a response and that is call done that is called",
    "start": "1352600",
    "end": "1359760"
  },
  {
    "text": "complete and with the net grpc implementation on the client's side when",
    "start": "1359760",
    "end": "1364799"
  },
  {
    "text": "the step methods are generated you get access to two different step methods one is the asynchronous non blocking call",
    "start": "1364799",
    "end": "1372520"
  },
  {
    "text": "and the synchronous blocking call so if you want access to the response headers you need to make use of the async",
    "start": "1372520",
    "end": "1378200"
  },
  {
    "text": "version for that uh I'll do all the modes and then show you the demo behind the scenes uh the next mode is server",
    "start": "1378200",
    "end": "1385159"
  },
  {
    "text": "streaming this is where the streaming capabilities comes in the client sends a request message and the server sends a",
    "start": "1385159",
    "end": "1391799"
  },
  {
    "text": "stream of responses so this is perceived performance that is breaking big chunks",
    "start": "1391799",
    "end": "1396840"
  },
  {
    "text": "of data into small pieces and sending back to the client the RPC definition Remains the",
    "start": "1396840",
    "end": "1402919"
  },
  {
    "text": "Same except for the uh fact that there's a stream keyword in front of the message",
    "start": "1402919",
    "end": "1408559"
  },
  {
    "text": "that is the response message here the idea is that maybe the device or some kind of a dashboard is actually asking",
    "start": "1408559",
    "end": "1415960"
  },
  {
    "text": "for all the readings on a particular date there might be huge amount of readings so the server is streaming that",
    "start": "1415960",
    "end": "1422120"
  },
  {
    "text": "information back to the client some notes so with this scenario that is the",
    "start": "1422120",
    "end": "1427880"
  },
  {
    "text": "client and the server streaming sorry server streaming the client sends in a request message to the server at that",
    "start": "1427880",
    "end": "1434880"
  },
  {
    "text": "point the stream is open uh the server can then Place messages into the stream",
    "start": "1434880",
    "end": "1440120"
  },
  {
    "text": "at which point immediately it is available to the client once the streaming has started the client cannot",
    "start": "1440120",
    "end": "1446600"
  },
  {
    "text": "send in any further messages so which means that it can go into a kind of scenario where it is a long running",
    "start": "1446600",
    "end": "1453360"
  },
  {
    "text": "server process so in in order to tackle that what clients can do is clients can",
    "start": "1453360",
    "end": "1459159"
  },
  {
    "text": "specify either a deadline or send in cancellation tokens so deadline is saying like I will wait for this amount",
    "start": "1459159",
    "end": "1465799"
  },
  {
    "text": "of time after that I won't wait for you so at which point a cancellation token",
    "start": "1465799",
    "end": "1471080"
  },
  {
    "text": "is actually issued on the server and then you can cancel all the child operations or explicitly the client",
    "start": "1471080",
    "end": "1477440"
  },
  {
    "text": "cancels the call using a cancellation token um so that is a server streaming",
    "start": "1477440",
    "end": "1485440"
  },
  {
    "text": "then you can have client streaming where the client streams information to the server and the server processes it and",
    "start": "1485440",
    "end": "1492360"
  },
  {
    "text": "then send some kind of a response message back here the stream keyword is front is in front of the request message",
    "start": "1492360",
    "end": "1499640"
  },
  {
    "text": "so the idea here is that I am streaming readings to the server for processing I don't know for what reason I I actually",
    "start": "1499640",
    "end": "1506720"
  },
  {
    "text": "thought of such a kind of scenario but hey that's fine for the day I guess so",
    "start": "1506720",
    "end": "1512600"
  },
  {
    "text": "with this there's no actual message sent to the C server to actually start the",
    "start": "1512600",
    "end": "1518080"
  },
  {
    "text": "streaming method the method is simply invoked and then the client keeps placing messages into the stream and",
    "start": "1518080",
    "end": "1525200"
  },
  {
    "text": "then when the client is done with all the streaming it it actually tells the server that hey I I am done with all the",
    "start": "1525200",
    "end": "1532080"
  },
  {
    "text": "streaming from my end you can go do whatever you need to do now so at that point server processes the messages and",
    "start": "1532080",
    "end": "1539799"
  },
  {
    "text": "sends back the request uh sorry the response to the uh client along with the status and maybe some trailers as well",
    "start": "1539799",
    "end": "1547559"
  },
  {
    "text": "so this is ideal if you want to say upload a large file or video encoding so you can send dat data in chunks to the",
    "start": "1547559",
    "end": "1555159"
  },
  {
    "text": "server and then there is a mixture of these two scenar arios that is client and service side streaming where the",
    "start": "1555159",
    "end": "1561399"
  },
  {
    "text": "client streams as well as server streams uh here you have the stream keyword in front of both the request as well well",
    "start": "1561399",
    "end": "1567960"
  },
  {
    "text": "as the response message um it's probably something like processing a stream of readings from the client and the server",
    "start": "1567960",
    "end": "1574679"
  },
  {
    "text": "saying that y I have acknowledged your message or something of that sort so",
    "start": "1574679",
    "end": "1579840"
  },
  {
    "text": "again the client invokes the streaming or the method here you can have independent client and server streams in",
    "start": "1579840",
    "end": "1586640"
  },
  {
    "text": "this process either the client and server can stream simultaneously which is a more complex scenario or the client",
    "start": "1586640",
    "end": "1594159"
  },
  {
    "text": "can send in a stream of information or a message of uh a single message and for",
    "start": "1594159",
    "end": "1599240"
  },
  {
    "text": "every packet of information received the server can uh send some response back as",
    "start": "1599240",
    "end": "1604399"
  },
  {
    "text": "well and the method is complete when the server also has completed the streaming",
    "start": "1604399",
    "end": "1610000"
  },
  {
    "text": "and all the response and the metadata the head as everything is sent back so",
    "start": "1610000",
    "end": "1615159"
  },
  {
    "text": "let's have a look at some code here",
    "start": "1615159",
    "end": "1619880"
  },
  {
    "start": "1621000",
    "end": "2106000"
  },
  {
    "text": "so that is in my modes 2 project so it's",
    "start": "1621960",
    "end": "1627120"
  },
  {
    "text": "the same Proto files that I have except for the fact fact that I have broken them down into four different Proto",
    "start": "1627120",
    "end": "1632919"
  },
  {
    "text": "files so startings with reading readings Proto this is where I have the unary one",
    "start": "1632919",
    "end": "1638200"
  },
  {
    "text": "where I'm sending in a reading and then uh accepting a response I have the uh server streaming",
    "start": "1638200",
    "end": "1645760"
  },
  {
    "text": "where we are getting readings for a particular dat we have the client streaming where",
    "start": "1645760",
    "end": "1652120"
  },
  {
    "text": "client is sending some data to the server for the for it to be processed and then you have bidirectional",
    "start": "1652120",
    "end": "1657960"
  },
  {
    "text": "streaming some kind of readings being processed in both directions and streaming happening so it is consumed in",
    "start": "1657960",
    "end": "1663720"
  },
  {
    "text": "the same way on my asp.net core application the way I showed it to you before so in my",
    "start": "1663720",
    "end": "1670159"
  },
  {
    "text": "service uh is this is the one starting with the un uh it it is nothing big in",
    "start": "1670159",
    "end": "1677000"
  },
  {
    "text": "implementation all I'm sending is a response back but as you have seen in my basic demo it is a simple uh request and",
    "start": "1677000",
    "end": "1684799"
  },
  {
    "text": "the server called context object available to me and what I'm responding with is a sent reading",
    "start": "1684799",
    "end": "1690360"
  },
  {
    "text": "response and on the client that is the unary client",
    "start": "1690360",
    "end": "1696880"
  },
  {
    "text": "here I create a channel based on a um based on a address so I have already",
    "start": "1696880",
    "end": "1702720"
  },
  {
    "text": "deployed my service to Azure so this is where I have uh deployed it to I create",
    "start": "1702720",
    "end": "1709480"
  },
  {
    "text": "a channel and a un client and send my reading in and uh let's have a quick",
    "start": "1709480",
    "end": "1715519"
  },
  {
    "text": "look at the demo and see whether that works grpc",
    "start": "1715519",
    "end": "1721518"
  },
  {
    "text": "un it should send and give me a response it has um if you want the asynchronous",
    "start": "1721720",
    "end": "1728720"
  },
  {
    "text": "blocking call you have to implement something like this uh control KU so I store the call",
    "start": "1728720",
    "end": "1737519"
  },
  {
    "text": "in a able using the async method and then I can wait for the response and",
    "start": "1737519",
    "end": "1744320"
  },
  {
    "text": "await that call to get the response if I want access to the headers again I can a await a call to",
    "start": "1744320",
    "end": "1751840"
  },
  {
    "text": "the response headers a sync and I can then write that out into the console as",
    "start": "1751840",
    "end": "1757159"
  },
  {
    "text": "well so if I comment this out Cas",
    "start": "1757159",
    "end": "1762279"
  },
  {
    "text": "see oh what did I do let's delete that",
    "start": "1762279",
    "end": "1768519"
  },
  {
    "text": "now I deleted the wrong bit there we",
    "start": "1768519",
    "end": "1773880"
  },
  {
    "text": "go so that is that should print out",
    "start": "1776120",
    "end": "1784840"
  },
  {
    "text": "um did that run yeah so it has given me some",
    "start": "1784840",
    "end": "1791440"
  },
  {
    "text": "response and these are the headers that are coming back along with my response header so that is also getting printed",
    "start": "1791440",
    "end": "1797519"
  },
  {
    "text": "out now going back to the server streaming method on the Ser server here you can",
    "start": "1797519",
    "end": "1804640"
  },
  {
    "text": "see that the method signature is slightly different I am sending back a task but I have access to the request",
    "start": "1804640",
    "end": "1810840"
  },
  {
    "text": "message that comes in I also have a server stream writer that is the response stream to which the server",
    "start": "1810840",
    "end": "1817200"
  },
  {
    "text": "places the messages and also the server called context object which is available in any mode of grpc for me I have a",
    "start": "1817200",
    "end": "1825320"
  },
  {
    "text": "little bit more code here because I'm trying to add add something to the request headers as well uh find me after",
    "start": "1825320",
    "end": "1831840"
  },
  {
    "text": "the talk if you want me to go through that code but I'll keep it to just the uh streaming call for now so",
    "start": "1831840",
    "end": "1839919"
  },
  {
    "text": "here what I'm doing is I'm checking whether there's a cancellation token that has come in as a part of deadlines",
    "start": "1839919",
    "end": "1846039"
  },
  {
    "text": "if there's no cancellation requested then I am creating a get readings",
    "start": "1846039",
    "end": "1851159"
  },
  {
    "text": "response instance object and then placing that directly to the response stream and when it is placed here it is",
    "start": "1851159",
    "end": "1857200"
  },
  {
    "text": "immediately a available to my client which is here where is it server streaming so in the program.cs again it",
    "start": "1857200",
    "end": "1865200"
  },
  {
    "text": "starts with creating a channel and creating a call and I can",
    "start": "1865200",
    "end": "1871240"
  },
  {
    "text": "await the call uh to get the response headers and uh here where is it and",
    "start": "1871240",
    "end": "1878880"
  },
  {
    "text": "using the read all async method which is on the streaming called response stream that is where the stream data appears",
    "start": "1878880",
    "end": "1885399"
  },
  {
    "text": "from the server I can keep iterating till the the end of the stream to uh actually write the response into my",
    "start": "1885399",
    "end": "1892080"
  },
  {
    "text": "console so if I have to see that in action it should get me that information",
    "start": "1892080",
    "end": "1898880"
  },
  {
    "text": "back quite steadily so it should I think go through some 10 readings or",
    "start": "1898880",
    "end": "1904880"
  },
  {
    "text": "something so that is the grpc and that is the metadata that is coming back the",
    "start": "1906039",
    "end": "1911559"
  },
  {
    "text": "trailers and the status code so that is server streaming similarly you have",
    "start": "1911559",
    "end": "1917039"
  },
  {
    "text": "client streaming where I have access to the incoming request stream and I send back a readings uh response uh again the",
    "start": "1917039",
    "end": "1925320"
  },
  {
    "text": "main part of the code here is moving through or looping through that request stream so I'm using the move next method",
    "start": "1925320",
    "end": "1933080"
  },
  {
    "text": "here so with client streaming the client actually notifies the server that I am done with the streaming at which point",
    "start": "1933080",
    "end": "1940200"
  },
  {
    "text": "this move next will turn to false will give a false value till then this will",
    "start": "1940200",
    "end": "1945639"
  },
  {
    "text": "continue looping and when it false uh this response is sent back to",
    "start": "1945639",
    "end": "1951399"
  },
  {
    "text": "the uh to the client so to see that in action before the code program.cs again there is the grpc",
    "start": "1951399",
    "end": "1960240"
  },
  {
    "text": "channel and invoking the call um so here is where I am sending the readings and",
    "start": "1960240",
    "end": "1966480"
  },
  {
    "text": "for sending the readings and placing the data into the uh request stream I just",
    "start": "1966480",
    "end": "1972799"
  },
  {
    "text": "simply Loop through 1 to 10 and then into the request stream of the call I",
    "start": "1972799",
    "end": "1978159"
  },
  {
    "text": "keep on writing some data and to notify the server that I'm done with streaming",
    "start": "1978159",
    "end": "1983559"
  },
  {
    "text": "this is the this is the line of code that does it that I have completed the streaming from my end uh go do whatever",
    "start": "1983559",
    "end": "1990559"
  },
  {
    "text": "you need to do so to see this in action uh the client streaming is here it is",
    "start": "1990559",
    "end": "1996360"
  },
  {
    "text": "sending the message it should send up to 10 messages I think and then send me back some",
    "start": "1996360",
    "end": "2002679"
  },
  {
    "text": "information that's it and that's the trade uh the response metadata that is",
    "start": "2004080",
    "end": "2009840"
  },
  {
    "text": "received from the server uh finally bidirectional streaming here the method",
    "start": "2009840",
    "end": "2015840"
  },
  {
    "text": "signature has a stream reader as well as a stream writer and the scenario that",
    "start": "2015840",
    "end": "2021080"
  },
  {
    "text": "I'm sticking to is very simple that is for every input message that comes in from the stream I'm writing back to the",
    "start": "2021080",
    "end": "2027639"
  },
  {
    "text": "response stream so I'm using the request stream. move next to ensure that I haven't reached the end of the stream",
    "start": "2027639",
    "end": "2033919"
  },
  {
    "text": "and for every time I Loop I'm writing something to the response the code on the client is a little bit",
    "start": "2033919",
    "end": "2040399"
  },
  {
    "text": "more involved here which is here in program.cs I invoke the method I",
    "start": "2040399",
    "end": "2047960"
  },
  {
    "text": "immediately start listening to the server and for anything that is placed in the response stream I'm directly",
    "start": "2047960",
    "end": "2054440"
  },
  {
    "text": "writing to the uh response stream and showing it on the console because we never know depending upon your scenario",
    "start": "2054440",
    "end": "2060560"
  },
  {
    "text": "the server might have started streaming even before the client has started streaming and uh to stream from the",
    "start": "2060560",
    "end": "2067839"
  },
  {
    "text": "client again I have a loop and then placing something to the request stream here in in this case too I need to",
    "start": "2067839",
    "end": "2075158"
  },
  {
    "text": "inform the server that the client has uh entered the request stream so that is the bir directional stream code for you",
    "start": "2075159",
    "end": "2081919"
  },
  {
    "text": "and if I need to show you that in action so Sending",
    "start": "2081919",
    "end": "2088078"
  },
  {
    "text": "message so that is client as well as server streaming uh",
    "start": "2088520",
    "end": "2094919"
  },
  {
    "text": "one after another you can have the simultaneous independent completely independent streams as well but",
    "start": "2094919",
    "end": "2101440"
  },
  {
    "text": "regardless of the grpc mode because we are using http2 the order of messages even in a",
    "start": "2101440",
    "end": "2109040"
  },
  {
    "start": "2106000",
    "end": "2202000"
  },
  {
    "text": "stream that is preserved for you talking about metadata uh the just like you have",
    "start": "2109040",
    "end": "2115200"
  },
  {
    "text": "request and response headers in an HTTP API call you have access to that in grpc",
    "start": "2115200",
    "end": "2121440"
  },
  {
    "text": "as well uh there's also response headers that are sent alongside the response but",
    "start": "2121440",
    "end": "2127079"
  },
  {
    "text": "there is more information that you can have as metadata with grpc because grpc makes use of the http2 trailers trailers",
    "start": "2127079",
    "end": "2135800"
  },
  {
    "text": "are uh information or it's it's a it's a part of the H HTTP toolkit HTTP 1.1 has",
    "start": "2135800",
    "end": "2142720"
  },
  {
    "text": "it as well but it is in grpc that it is properly made use of there's a",
    "start": "2142720",
    "end": "2148000"
  },
  {
    "text": "difference between the headers and trailers when it comes to response headers and trailers because response",
    "start": "2148000",
    "end": "2153160"
  },
  {
    "text": "trailers are served once the um the response is complete complete it's",
    "start": "2153160",
    "end": "2158200"
  },
  {
    "text": "always served after the response is gone back that is probably server has finished streaming in server streaming",
    "start": "2158200",
    "end": "2164520"
  },
  {
    "text": "and bidirectional streaming response headers it actually contains information about the co itself so if you looked at",
    "start": "2164520",
    "end": "2171440"
  },
  {
    "text": "one of the demos that I had it is information like date and the host that goes back with the response headers you",
    "start": "2171440",
    "end": "2178160"
  },
  {
    "text": "can have more but response trailers are about the response itself probably",
    "start": "2178160",
    "end": "2183400"
  },
  {
    "text": "during the streaming process the server kind of timed out or maybe had had some kind of an error all such exceptions can",
    "start": "2183400",
    "end": "2190599"
  },
  {
    "text": "go into the response trailers that is where you have that information so the code is in the uh",
    "start": "2190599",
    "end": "2197200"
  },
  {
    "text": "GitHub repo if you want to have a look or we can talk after the session talking",
    "start": "2197200",
    "end": "2202520"
  },
  {
    "start": "2202000",
    "end": "2456000"
  },
  {
    "text": "about versioning of course grpc is an API so we need versioning to make sure that we do not explicitly Force the",
    "start": "2202520",
    "end": "2210520"
  },
  {
    "text": "client to update it should be a choice given to client and that is a good practice when it comes to any kind of",
    "start": "2210520",
    "end": "2216960"
  },
  {
    "text": "API de velopment so with versioning of of services the client and server can",
    "start": "2216960",
    "end": "2222520"
  },
  {
    "text": "iterate at their own pace the clients are not forced to updates and we can gradually introduce breaking changes at",
    "start": "2222520",
    "end": "2229359"
  },
  {
    "text": "a pace the client can digest them and update them it's not like hey drop everything that you're doing update your",
    "start": "2229359",
    "end": "2235760"
  },
  {
    "text": "client because I'm going to introduce breaking changes and the best thing about grpc is that versioning is",
    "start": "2235760",
    "end": "2241319"
  },
  {
    "text": "something they have baked into the the whole API contract itself so a little",
    "start": "2241319",
    "end": "2247760"
  },
  {
    "text": "thing that you need to take take care of and the versioning can go a long way for you uh before we look at the course some",
    "start": "2247760",
    "end": "2254319"
  },
  {
    "text": "things to know what contributes to Breaking as well as non-breaking changes the non-breaking changes um of course if",
    "start": "2254319",
    "end": "2261319"
  },
  {
    "text": "you add a new field to the request or the response that's not a breaking change if the server adds something to",
    "start": "2261319",
    "end": "2267280"
  },
  {
    "text": "the request message the client might not be setting that because the client is not updated so when it gets to the",
    "start": "2267280",
    "end": "2273640"
  },
  {
    "text": "server it is set to default value for that particular field type before it is",
    "start": "2273640",
    "end": "2278920"
  },
  {
    "text": "uh moved onto the execution similarly if server actually sets something in the response um a new field is added to the",
    "start": "2278920",
    "end": "2285760"
  },
  {
    "text": "response on the client side it has a contract as well so it tries to deserialize the message that it has",
    "start": "2285760",
    "end": "2292119"
  },
  {
    "text": "received it doesn't find the field it cannot understand it so it is marked as unknown field and then just discarded so",
    "start": "2292119",
    "end": "2298800"
  },
  {
    "text": "generally speaking um adding a new field a method or service is considered a",
    "start": "2298800",
    "end": "2304079"
  },
  {
    "text": "non-breaking change I think this is the same with regards to any other API out there but it can have binary breaking",
    "start": "2304079",
    "end": "2310400"
  },
  {
    "text": "changes which means that you need your client to update if they get the latest Proto file for example removing a field",
    "start": "2310400",
    "end": "2318520"
  },
  {
    "text": "removing a field means introducing default value but what happens when you introduce default value there could be a",
    "start": "2318520",
    "end": "2325160"
  },
  {
    "text": "behavior change for example if you're using a Boolean field the for Boolean",
    "start": "2325160",
    "end": "2330720"
  },
  {
    "text": "value of false might actually mean different from a default value for Boolean which is also false so BAS based",
    "start": "2330720",
    "end": "2337680"
  },
  {
    "text": "on that you might have behavioral changes so you need to be careful in such cases so removing a change is a",
    "start": "2337680",
    "end": "2344200"
  },
  {
    "text": "binary breaking change if you rename a field or a message in certain instances",
    "start": "2344200",
    "end": "2350400"
  },
  {
    "text": "it can be a binary breaking change so with prot buff you can actually have like a catchall kind of field I can Mark",
    "start": "2350400",
    "end": "2358839"
  },
  {
    "text": "a field with a type a special well-known type called any and I can pass in any",
    "start": "2358839",
    "end": "2365200"
  },
  {
    "text": "any type as the value of that Fe and that's probably the only instance",
    "start": "2365200",
    "end": "2370560"
  },
  {
    "text": "where the protocol buffer when it transmits over the wire the name of the field is also transmitted so in such",
    "start": "2370560",
    "end": "2377720"
  },
  {
    "text": "cases renaming a field or message can be a binary braking change and needs the client to update changing C namespace of",
    "start": "2377720",
    "end": "2386280"
  },
  {
    "text": "course it changes all the code layout so again a binary braking change nesting and un nesting a message can be a binary",
    "start": "2386280",
    "end": "2393760"
  },
  {
    "text": "braking change because it changes the message name so if you have a m message that is explicitly marked a message and",
    "start": "2393760",
    "end": "2399960"
  },
  {
    "text": "then it is referred like I show you in my example that is fine but there are",
    "start": "2399960",
    "end": "2405240"
  },
  {
    "text": "instances where you can have the message a part of another message so you can have the message defin definition inside",
    "start": "2405240",
    "end": "2413000"
  },
  {
    "text": "another message definition in such cases if you unest or Nest something the message name changes so you need to",
    "start": "2413000",
    "end": "2419760"
  },
  {
    "text": "update the client and what constitutes complete breaking change is changing the",
    "start": "2419760",
    "end": "2424880"
  },
  {
    "text": "field data type certain field data types are compatible but if you have known compatible stuff then things are going",
    "start": "2424880",
    "end": "2431520"
  },
  {
    "text": "to break changing field number because the field numbers are transmitted over the wire constitute braking change",
    "start": "2431520",
    "end": "2439480"
  },
  {
    "text": "renaming package service or method is a breaking change completely breaks things",
    "start": "2439480",
    "end": "2445520"
  },
  {
    "text": "so is removing the service or a method or even renaming a uh uh as I said renaming a package so why is this",
    "start": "2445520",
    "end": "2452520"
  },
  {
    "text": "package keyword important let's have a look short",
    "start": "2452520",
    "end": "2457880"
  },
  {
    "start": "2456000",
    "end": "2690000"
  },
  {
    "text": "bar and into my versioning demo which is here so here I have got two protos in V1",
    "start": "2457880",
    "end": "2465480"
  },
  {
    "text": "and V2 for Simplicity sake I have kept everything in a single project in the Greet dopro uh it is out of the box",
    "start": "2465480",
    "end": "2472880"
  },
  {
    "text": "Visual Studio template the most important thing is the package name that I have got here I don't have a c name",
    "start": "2472880",
    "end": "2479480"
  },
  {
    "text": "space so the Greet dov1 is going to double up as my C namespace as well so",
    "start": "2479480",
    "end": "2484599"
  },
  {
    "text": "this is my V1 Proto and suppose I go live with this and I have a V1",
    "start": "2484599",
    "end": "2490839"
  },
  {
    "text": "implementation of this uh which is a very simple implementation nothing special about it a un recall and of",
    "start": "2490839",
    "end": "2497880"
  },
  {
    "text": "course I have got it all mapped to my grpc service middleware as well and",
    "start": "2497880",
    "end": "2503880"
  },
  {
    "text": "let's run this and then have a look at the client which is also based on this",
    "start": "2503880",
    "end": "2510560"
  },
  {
    "text": "particular prot file uh which is here so in here I cons",
    "start": "2510560",
    "end": "2517240"
  },
  {
    "text": "consuming the same V1 Proto and I have some generated code all",
    "start": "2517240",
    "end": "2522280"
  },
  {
    "text": "of that and I have a unary call making a call to the server the V1 version of the server so if I now try and run",
    "start": "2522280",
    "end": "2532240"
  },
  {
    "text": "it is gone and spoken to my server but what happens behind the scene is it is",
    "start": "2532240",
    "end": "2538800"
  },
  {
    "text": "doing an http2 post to a path that it has worked out so it is the base URL of",
    "start": "2538800",
    "end": "2544280"
  },
  {
    "text": "my server followed by greet Dov one which is nothing but this package name",
    "start": "2544280",
    "end": "2550680"
  },
  {
    "text": "that you see here and then you have greeter which is the service name that",
    "start": "2550680",
    "end": "2558000"
  },
  {
    "text": "you see here finally the say hello which is the RPC name so the package name the",
    "start": "2558000",
    "end": "2566240"
  },
  {
    "text": "service name and the RPC name are all a part of the URL that is worked out by",
    "start": "2566240",
    "end": "2571920"
  },
  {
    "text": "the middleware so changing any of that breaks the system but how is this",
    "start": "2571920",
    "end": "2578200"
  },
  {
    "text": "package keyword important now suppose we have another greet dopro with a package",
    "start": "2578200",
    "end": "2583760"
  },
  {
    "text": "name called V2 I have my own implementation greet service V2 uh which is again very simple",
    "start": "2583760",
    "end": "2591680"
  },
  {
    "text": "uh and I've got it all mapped and suppose I have another client consuming",
    "start": "2591680",
    "end": "2596760"
  },
  {
    "text": "the V2 version of the greed. prototo uh is it still running this okay and let us",
    "start": "2596760",
    "end": "2605720"
  },
  {
    "text": "start the V1 class client as well as the V2",
    "start": "2605720",
    "end": "2611160"
  },
  {
    "text": "client so both of the clients have communicated with the server in the first case it has communicated with the",
    "start": "2611160",
    "end": "2618040"
  },
  {
    "text": "V1 version and then it is with the V2 version so there are two different clients each having references to two",
    "start": "2618040",
    "end": "2625559"
  },
  {
    "text": "different Proto files consuming two different versions of the Proto file and the middleware is making sure that it is",
    "start": "2625559",
    "end": "2631839"
  },
  {
    "text": "to two different services that it is communicating so just with the presence of the package key name package uh",
    "start": "2631839",
    "end": "2639240"
  },
  {
    "text": "keyword we have managed to have that extensibility and versioning baked into our services so the by the nature of",
    "start": "2639240",
    "end": "2647720"
  },
  {
    "text": "grpc it is impossible for a client in V2 version to communicate with the V1 or a",
    "start": "2647720",
    "end": "2654000"
  },
  {
    "text": "V1 based client to communicate with the V2 version of the service so having that package keyword is a best practice to",
    "start": "2654000",
    "end": "2661280"
  },
  {
    "text": "have it is a best best practice right from day one to have it on your service and that is",
    "start": "2661280",
    "end": "2667720"
  },
  {
    "text": "the kind of foundational Stone to your versioning or services so as I said versioning is something that grpc takes",
    "start": "2667720",
    "end": "2675079"
  },
  {
    "text": "care of for you and it is a simple way to achieve that of course understand where you actually need to implement",
    "start": "2675079",
    "end": "2681599"
  },
  {
    "text": "versioning and of course Sunset your versions when you don't need them anymore um so finally the hosting grpc",
    "start": "2681599",
    "end": "2690920"
  },
  {
    "start": "2690000",
    "end": "2735000"
  },
  {
    "text": "Services I have played around with hosting grpc services on Azure uh I have",
    "start": "2690920",
    "end": "2696319"
  },
  {
    "text": "got it working on on Azure container container apps of course you need to go through some publish action with the net",
    "start": "2696319",
    "end": "2703480"
  },
  {
    "text": "support that we have for docka and get it um out into container apps but you",
    "start": "2703480",
    "end": "2708839"
  },
  {
    "text": "have Azure app service with Linux plans completely capable of Hosting g u grpc",
    "start": "2708839",
    "end": "2715280"
  },
  {
    "text": "Based Services uh that is generally a available at this point and with the windows plan it is still in preview it",
    "start": "2715280",
    "end": "2722400"
  },
  {
    "text": "is something that we can look forward into in future I haven't played around with kubernetes service in grpc but the",
    "start": "2722400",
    "end": "2728359"
  },
  {
    "text": "doc says it is possible so I'm going to leave it that way but uh as you can see",
    "start": "2728359",
    "end": "2734280"
  },
  {
    "text": "in my grpc modes um when I explained all of that all my client apps are talking",
    "start": "2734280",
    "end": "2741240"
  },
  {
    "start": "2735000",
    "end": "2831000"
  },
  {
    "text": "to a deployed version of the app of the service and there are three things three",
    "start": "2741240",
    "end": "2747200"
  },
  {
    "text": "very simple things that I have to do to get grpc up and running on a Linux based app service I actually deployed using",
    "start": "2747200",
    "end": "2753800"
  },
  {
    "text": "visual studio to Azure directly but in the GR PC Linux app Service uh there are",
    "start": "2753800",
    "end": "2760839"
  },
  {
    "text": "three things in the configuration I need to make sure that it is the HTTP mode is",
    "start": "2760839",
    "end": "2766520"
  },
  {
    "text": "set to version two Come on load and um there's a special U app",
    "start": "2766520",
    "end": "2775520"
  },
  {
    "text": "setting that you need to set so that all the incoming http2 traffic listens on that oh there we go so the HTTP version",
    "start": "2775520",
    "end": "2783880"
  },
  {
    "text": "is set to two and there should be sorry this is not the one that I was",
    "start": "2783880",
    "end": "2791880"
  },
  {
    "text": "looking for this is the one I was looking for uh sorry for",
    "start": "2791880",
    "end": "2797680"
  },
  {
    "text": "that uh configuration Lord Lord load",
    "start": "2797680",
    "end": "2803960"
  },
  {
    "text": "yeah so this is the one where the http2 proxy should be set to grpc only and in",
    "start": "2803960",
    "end": "2810640"
  },
  {
    "text": "the environment variable I need to have an http2 O port and it can be set to any",
    "start": "2810640",
    "end": "2816599"
  },
  {
    "text": "kind of arbitrary value but that sets the port to listen for any http2",
    "start": "2816599",
    "end": "2821720"
  },
  {
    "text": "requests um how are we doing for time over over okay there there was some",
    "start": "2821720",
    "end": "2827720"
  },
  {
    "text": "bonus information but um if you want to have a look at",
    "start": "2827720",
    "end": "2834400"
  },
  {
    "start": "2831000",
    "end": "2855000"
  },
  {
    "text": "the resources for the day it's here so there's a lot more stuff in my demo for",
    "start": "2834839",
    "end": "2842000"
  },
  {
    "text": "the day which contains all things like grpc web and grpc Json trans coding all",
    "start": "2842000",
    "end": "2847839"
  },
  {
    "text": "of that but all of the information that I have is available in this um URL for",
    "start": "2847839",
    "end": "2854559"
  },
  {
    "text": "you if you have any questions I can speak to you now um or if you want",
    "start": "2854559",
    "end": "2861599"
  },
  {
    "start": "2855000",
    "end": "2880000"
  },
  {
    "text": "anything more from the demo to be showed I'm happy to show that as well",
    "start": "2861599",
    "end": "2867640"
  }
]