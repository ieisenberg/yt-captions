[
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "so this is my talk on on developing asynchronous micro services and sort of",
    "start": "11870",
    "end": "17880"
  },
  {
    "text": "the motivation for the talk is really you know today we hear a lot about event-driven micro-services and an in",
    "start": "17880",
    "end": "25560"
  },
  {
    "text": "reality the the patterns of communication between micro services are",
    "start": "25560",
    "end": "30990"
  },
  {
    "text": "a little more general than that and so in this talk I'm gonna describe how to",
    "start": "30990",
    "end": "36630"
  },
  {
    "text": "use asynchronous messaging which includes events but also includes asynchronous request response to",
    "start": "36630",
    "end": "45030"
  },
  {
    "text": "implement transactions and queries in a micro service architecture and along the",
    "start": "45030",
    "end": "50610"
  },
  {
    "text": "way I'm going to talk about well micro services are more than rest you know it's another common sort of anti pad and",
    "start": "50610",
    "end": "57270"
  },
  {
    "text": "in a sense anti power micro services are more than just events and also micro",
    "start": "57270",
    "end": "63300"
  },
  {
    "text": "services are not equivalent to just event sourcing because I often I see event sourcing and micro services get",
    "start": "63300",
    "end": "70110"
  },
  {
    "text": "mixed up together and I might also mention that Kafka is not an event store",
    "start": "70110",
    "end": "75500"
  },
  {
    "text": "despite claims to the contrary so before I get going a little bit about me so",
    "start": "75500",
    "end": "83970"
  },
  {
    "text": "I've been programming for a very long time in fact my first paid job was actually back in 1982 so kind of a while",
    "start": "83970",
    "end": "90840"
  },
  {
    "text": "ago first significant job was implementing Lisp systems I also at lea",
    "start": "90840",
    "end": "96689"
  },
  {
    "text": "ended up programming in Java and 13 years ago my book pojos in action came out which was all about spring and",
    "start": "96689",
    "end": "102780"
  },
  {
    "text": "hibernate which are great they're still going strong back in 2007 started tinkering around",
    "start": "102780",
    "end": "108780"
  },
  {
    "text": "with this obscure API from an online book store namely AWS ec2 created the",
    "start": "108780",
    "end": "116399"
  },
  {
    "text": "original Cloud Foundry and then that back in o 9 got acquired by spring sauce",
    "start": "116399",
    "end": "121590"
  },
  {
    "text": "which then got acquired by VMware spent part of you know four and a half years that spring source VMware and then",
    "start": "121590",
    "end": "128489"
  },
  {
    "text": "pivotal and then pretty much for the past five and a half years I've been folk",
    "start": "128489",
    "end": "133830"
  },
  {
    "text": "just on the micro service architecture traveling around the world helping clients adopt the micro certain adopt",
    "start": "133830",
    "end": "139380"
  },
  {
    "text": "micro services also have a start up building a platform to simplify the",
    "start": "139380",
    "end": "144840"
  },
  {
    "text": "development of transactional business applications using a lot of the concepts that I'm going to cover today and the s",
    "start": "144840",
    "end": "151890"
  },
  {
    "text": "my book micro services patterns came out back in November and if you want to get",
    "start": "151890",
    "end": "157140"
  },
  {
    "text": "a 40% discount of it then just follow that link go to CH go 2019 - micro",
    "start": "157140",
    "end": "164970"
  },
  {
    "text": "services and also have the website micro services dot IO I have that link at the",
    "start": "164970",
    "end": "170940"
  },
  {
    "text": "end as well so yeah if you there's a pattern language their articles code and",
    "start": "170940",
    "end": "177750"
  },
  {
    "text": "also a platform that lets you assess your vert your micro service",
    "start": "177750",
    "end": "183630"
  },
  {
    "text": "architecture and identify areas to improve so that's me let's get started",
    "start": "183630",
    "end": "189390"
  },
  {
    "text": "we're talking about micro services so I first want to begin by describing one of",
    "start": "189390",
    "end": "196170"
  },
  {
    "text": "the key challenges that you will face when using the micro service architecture and it's in the area of",
    "start": "196170",
    "end": "203220"
  },
  {
    "text": "transaction management and querying and then I'm going to describe the solutions",
    "start": "203220",
    "end": "208410"
  },
  {
    "text": "to those problems which all involve some form of inter in asynchronous messaging",
    "start": "208410",
    "end": "214230"
  },
  {
    "text": "between the services so let's look at the problem so if we look at the",
    "start": "214230",
    "end": "219480"
  },
  {
    "text": "definition of them of the micro service architecture so it's an architectural style that structures an application as",
    "start": "219480",
    "end": "226830"
  },
  {
    "text": "a set of loosely coupled services you're basically applying functional",
    "start": "226830",
    "end": "232650"
  },
  {
    "text": "decomposition to break apart what would otherwise be a large complex monolith if",
    "start": "232650",
    "end": "238890"
  },
  {
    "text": "we look at an individual service you know it's an independently deployable component you know and today that",
    "start": "238890",
    "end": "246030"
  },
  {
    "text": "typically means it gets packaged as a docker container but that's merely one possible way of deploying your services",
    "start": "246030",
    "end": "252630"
  },
  {
    "text": "the key part of a service is its API and that that's its reason for existing is",
    "start": "252630",
    "end": "259380"
  },
  {
    "text": "to provide an API to its clients the API consists of two parts there are",
    "start": "259380",
    "end": "266580"
  },
  {
    "text": "operations things that can be invoked and there are two types of operations there are",
    "start": "266580",
    "end": "272790"
  },
  {
    "text": "commands which mutate data so if this was the order service you could place orders revise orders cancel orders there",
    "start": "272790",
    "end": "280830"
  },
  {
    "text": "are also queries which retrieve data find orders find order history and so on",
    "start": "280830",
    "end": "287820"
  },
  {
    "text": "there's a couple of different ways of invoking operations you can use",
    "start": "287820",
    "end": "293310"
  },
  {
    "text": "something like rest or G RPC synchronous protocols but as you're going to see in",
    "start": "293310",
    "end": "298680"
  },
  {
    "text": "this talk it's quite common to use asynchronous messaging in fact perhaps",
    "start": "298680",
    "end": "304949"
  },
  {
    "text": "you might use synchronous communication to talk to clients of the of the system but internally a lot of the interactions",
    "start": "304949",
    "end": "312419"
  },
  {
    "text": "between the services is done using asynchronous messaging the other key",
    "start": "312419",
    "end": "318240"
  },
  {
    "text": "part of a service API are the events that the service emit so if this was the",
    "start": "318240",
    "end": "323910"
  },
  {
    "text": "order service it were typically amid events like order created order revised order cancelled and so on and then",
    "start": "323910",
    "end": "331590"
  },
  {
    "text": "services can invoke the operations of other services and they can also",
    "start": "331590",
    "end": "336780"
  },
  {
    "text": "subscribe to the event of those other services as well so we've got this sort",
    "start": "336780",
    "end": "342840"
  },
  {
    "text": "of rich patterns of collaboration between between these services oh yes and the service has its own database its",
    "start": "342840",
    "end": "350039"
  },
  {
    "text": "own private data which as I'm going to explain in a minute is actually the source of a lot of these challenges and",
    "start": "350039",
    "end": "357090"
  },
  {
    "text": "the reason we're doing this the reason we have we want to pursue the micro service architecture is basically to",
    "start": "357090",
    "end": "363479"
  },
  {
    "text": "enable DevOps which includes continuous delivery and continuous deployment the",
    "start": "363479",
    "end": "368520"
  },
  {
    "text": "rapid frequent reliable delivery of software and the micro service architecture enables that in two ways it",
    "start": "368520",
    "end": "375389"
  },
  {
    "text": "enables it directly by giving you the testability and deploy ability that you",
    "start": "375389",
    "end": "380729"
  },
  {
    "text": "need in order to do continuous delivery and deployment it also enables you to",
    "start": "380729",
    "end": "386220"
  },
  {
    "text": "have loosely coupled autonomous teams the so-called to pizza teams that are",
    "start": "386220",
    "end": "392789"
  },
  {
    "text": "highly productive so that that's sort of the micro service architecture and the",
    "start": "392789",
    "end": "398729"
  },
  {
    "text": "motivations for it so if we now look at like a really simple example so imagine that you're",
    "start": "398729",
    "end": "403980"
  },
  {
    "text": "building an online store and I'm sort of ignoring the the sort of kind of",
    "start": "403980",
    "end": "411990"
  },
  {
    "text": "front-end stuff so just imagine that in your honour in your online store there's",
    "start": "411990",
    "end": "417150"
  },
  {
    "text": "a REST API somewhere that lets you create customers create orders and then",
    "start": "417150",
    "end": "422160"
  },
  {
    "text": "find orders for a customer and find recent customers so that's sort of the",
    "start": "422160",
    "end": "428400"
  },
  {
    "text": "general idea now if we broke that apart into a micro service architecture you",
    "start": "428400",
    "end": "434460"
  },
  {
    "text": "might have a customer service that's responsible for customer management and you'd also have an order service that's",
    "start": "434460",
    "end": "440990"
  },
  {
    "text": "responsible for managing orders so simple decomposition each one of those",
    "start": "440990",
    "end": "447210"
  },
  {
    "text": "services has its own database so the customer service has its own customer",
    "start": "447210",
    "end": "452970"
  },
  {
    "text": "database which might by the way just be a schema on a shared database server that's more of a capacity planning issue",
    "start": "452970",
    "end": "460380"
  },
  {
    "text": "the order service will also have the order database you know it seems fairly",
    "start": "460380",
    "end": "465600"
  },
  {
    "text": "simple sitting in front of them you might have an API gateway that exposes",
    "start": "465600",
    "end": "471780"
  },
  {
    "text": "the public API and then is responsible for routing requests to the appropriate",
    "start": "471780",
    "end": "477210"
  },
  {
    "text": "service so for instance if there's a request to create a customer that's",
    "start": "477210",
    "end": "482310"
  },
  {
    "text": "going to get routed to the customer service likewise if there's a request to create an order that will get routed to the",
    "start": "482310",
    "end": "489510"
  },
  {
    "text": "order service seems all kind of simple and straightforward but if you dig into",
    "start": "489510",
    "end": "494730"
  },
  {
    "text": "this a little further one of the key requirements is that customers have a",
    "start": "494730",
    "end": "500190"
  },
  {
    "text": "credit limit and so what that means is in order for the order service to create",
    "start": "500190",
    "end": "506490"
  },
  {
    "text": "an order it actually has to go and interact with the customer service so",
    "start": "506490",
    "end": "512490"
  },
  {
    "text": "something that appears on the surface to just be you know localized to the to the",
    "start": "512490",
    "end": "518130"
  },
  {
    "text": "order service actually spans both services and requires basically a",
    "start": "518130",
    "end": "524520"
  },
  {
    "text": "transaction of some form and likewise if you look at the queries there they're",
    "start": "524520",
    "end": "530730"
  },
  {
    "text": "actually doing the equivalent they need to do the equivalent of joins between these multiple service",
    "start": "530730",
    "end": "538260"
  },
  {
    "text": "databases and that's challenging so you know if we go back and we look at",
    "start": "538260",
    "end": "543600"
  },
  {
    "text": "transaction management in a monolithic application you could enforce the credit",
    "start": "543600",
    "end": "549000"
  },
  {
    "text": "limit with some simple sequel like this right you begin the transaction you know",
    "start": "549000",
    "end": "554340"
  },
  {
    "text": "find the existing orders find the event find the credit calculate the available credit if it's sufficient insert an",
    "start": "554340",
    "end": "561660"
  },
  {
    "text": "order commit the transaction and then the acid properties of database transactions means that even if there",
    "start": "561660",
    "end": "568500"
  },
  {
    "text": "were simultaneous attempts to create orders for the same customer this",
    "start": "568500",
    "end": "573780"
  },
  {
    "text": "business rule would be enforced but in a microservice architecture this is a",
    "start": "573780",
    "end": "578940"
  },
  {
    "text": "challenge orders are in one server orders are in one database customers are",
    "start": "578940",
    "end": "584130"
  },
  {
    "text": "in another or to be more precise they're actually private to the respective services so you can't straightforwardly",
    "start": "584130",
    "end": "591210"
  },
  {
    "text": "implement database transactions that look like this and if you did you need",
    "start": "591210",
    "end": "596640"
  },
  {
    "text": "some form of distributed transaction two-phase commit or XA which for a whole",
    "start": "596640",
    "end": "603060"
  },
  {
    "text": "bunch of reasons is kind of fallen out of fashion and is not practical in many",
    "start": "603060",
    "end": "608100"
  },
  {
    "text": "modern systems likewise querying is no longer straightforward in a monolithic",
    "start": "608100",
    "end": "614580"
  },
  {
    "text": "system it just be trivial to do a join between the customer and order table to",
    "start": "614580",
    "end": "619740"
  },
  {
    "text": "find the customer in their orders once again customer table is private to the customer service the order table is",
    "start": "619740",
    "end": "626640"
  },
  {
    "text": "private to the order service can't do something like this so yes so as you can",
    "start": "626640",
    "end": "634290"
  },
  {
    "text": "see transaction management and querying is sort of no longer straightforward in",
    "start": "634290",
    "end": "639690"
  },
  {
    "text": "a micro service architecture at least as far as transaction or when chased and",
    "start": "639690",
    "end": "644910"
  },
  {
    "text": "say when transactions or queries need to span services so I'm going to talk about",
    "start": "644910",
    "end": "650790"
  },
  {
    "text": "transaction management first and then later on talk about querying so the",
    "start": "650790",
    "end": "656700"
  },
  {
    "text": "solution to transaction management in a micro service architecture is to use the saga patent this is not a new idea it",
    "start": "656700",
    "end": "664650"
  },
  {
    "text": "came from a paper back in 1987 and sort of as the name suggests it's",
    "start": "664650",
    "end": "671110"
  },
  {
    "text": "sort of this notion of long-running kind of sort of transaction in a sense basic",
    "start": "671110",
    "end": "677259"
  },
  {
    "text": "idea with sagas is instead of a distributed transaction spanning multiple services you break up the",
    "start": "677259",
    "end": "685120"
  },
  {
    "text": "transaction into a series of local transactions in each one of the",
    "start": "685120",
    "end": "690759"
  },
  {
    "text": "participating services so it has some local transaction happens in service a",
    "start": "690759",
    "end": "696940"
  },
  {
    "text": "then it happens in B and then it happens in C so that's the basic idea if we look",
    "start": "696940",
    "end": "704019"
  },
  {
    "text": "at the order the Creator the saga for creating an order it would work something like this you know the order",
    "start": "704019",
    "end": "711009"
  },
  {
    "text": "service gets the request that initiates the saga the first step of the saga",
    "start": "711009",
    "end": "716639"
  },
  {
    "text": "creates the order and actually creates it in a pending state which indicates",
    "start": "716639",
    "end": "722920"
  },
  {
    "text": "that it is in the process of being created so actually known as a semantic",
    "start": "722920",
    "end": "729069"
  },
  {
    "text": "lock which I don't have time to talk about more but it's a really key key issue with saga design the order that",
    "start": "729069",
    "end": "737560"
  },
  {
    "text": "once that transaction has is executed that cut the the reserve credit",
    "start": "737560",
    "end": "744100"
  },
  {
    "text": "transaction occurs in the customer service and then assuming that the",
    "start": "744100",
    "end": "749639"
  },
  {
    "text": "customers credit can be successfully reserved the order is approved so it's a",
    "start": "749639",
    "end": "755230"
  },
  {
    "text": "transact so we've instead of one global transaction it's three local transactions to in the order service one",
    "start": "755230",
    "end": "761680"
  },
  {
    "text": "in the customer service and so that's sort of the basic idea you have to break things down into this series of steps it",
    "start": "761680",
    "end": "770529"
  },
  {
    "text": "actually creates several problems that I don't have time to go into in a lot of",
    "start": "770529",
    "end": "776470"
  },
  {
    "text": "details and just in this talk it's just focusing on the high level aspects but number one one challenge is sagas as",
    "start": "776470",
    "end": "784000"
  },
  {
    "text": "you're gonna see are asynchronous yeah they might be initiated by a synchronous",
    "start": "784000",
    "end": "790060"
  },
  {
    "text": "opera request such as an HTTP POST so you then have the challenge as to when",
    "start": "790060",
    "end": "796449"
  },
  {
    "text": "to send back the response another challenge is implementing row backs",
    "start": "796449",
    "end": "802160"
  },
  {
    "text": "right you know like in an acid transaction traditional database",
    "start": "802160",
    "end": "807380"
  },
  {
    "text": "transaction you can execute a rollback statement that just undoes essentially",
    "start": "807380",
    "end": "813170"
  },
  {
    "text": "all of the updates that you've made so far the challenge that you have in a",
    "start": "813170",
    "end": "818330"
  },
  {
    "text": "saga is that if say the fifth step of the saga fails the first four steps have",
    "start": "818330",
    "end": "824330"
  },
  {
    "text": "actually already committed their changes to each of their local databases so you actually have to explicitly undo those",
    "start": "824330",
    "end": "831680"
  },
  {
    "text": "changes which is sort of an interesting little challenge and then also sagas a",
    "start": "831680",
    "end": "838160"
  },
  {
    "text": "not acid they actually are a CD they lack the isolation property of what you",
    "start": "838160",
    "end": "846380"
  },
  {
    "text": "have some sort of regular database transactions that means that the ex the execution of saga steps can be in of one",
    "start": "846380",
    "end": "854540"
  },
  {
    "text": "saga steps can be interleaved with the execution of other of steps of other",
    "start": "854540",
    "end": "861020"
  },
  {
    "text": "sagas that opens up the possibility of database anomalies such as lost updates",
    "start": "861020",
    "end": "868100"
  },
  {
    "text": "and fuzzy reads if anyone can remember sort of database theory from from college so you actually have to use",
    "start": "868100",
    "end": "875270"
  },
  {
    "text": "water known as countermeasures such as the semantic lock like the the state of",
    "start": "875270",
    "end": "880460"
  },
  {
    "text": "the order is pending until it has been approved or rejected and I've got a",
    "start": "880460",
    "end": "886430"
  },
  {
    "text": "whole other talk about that that goes into this in a lot more detail but here I'm just going to focus on sort of the",
    "start": "886430",
    "end": "892810"
  },
  {
    "text": "asynchronous aspects of Sagas so not so",
    "start": "892810",
    "end": "898730"
  },
  {
    "text": "that's the basic idea with sagas sequence of steps so next question is",
    "start": "898730",
    "end": "904310"
  },
  {
    "text": "how do the Saga participants communicate so you might think that you could use",
    "start": "904310",
    "end": "910670"
  },
  {
    "text": "rest but there's a number of challenges with rest so any form of synchronous",
    "start": "910670",
    "end": "915680"
  },
  {
    "text": "communication introduces temporal coupling the client making the request",
    "start": "915680",
    "end": "921710"
  },
  {
    "text": "and the service have to be up simultaneously for that request response",
    "start": "921710",
    "end": "927290"
  },
  {
    "text": "cycle to complete effective to complete successfully so that that immediately",
    "start": "927290",
    "end": "933860"
  },
  {
    "text": "reduces the availability of system and then there's sort of really interesting failure scenarios so imagine",
    "start": "933860",
    "end": "940190"
  },
  {
    "text": "the order service makes a rest request to the customer service which is temporarily unavailable it could keep",
    "start": "940190",
    "end": "946220"
  },
  {
    "text": "retrying assuming it you know it has time within its deadline to keep keep",
    "start": "946220",
    "end": "953000"
  },
  {
    "text": "retrying and you can make that work right but then let's imagine that the",
    "start": "953000",
    "end": "958850"
  },
  {
    "text": "order service makes a request to the customer service and then fails right so",
    "start": "958850",
    "end": "965840"
  },
  {
    "text": "the customer service is going to reserve credit but the order service is not able to receive that response and so your",
    "start": "965840",
    "end": "972410"
  },
  {
    "text": "system is in this potentially inconsistent state you could rely on whoever is invoking the order service to",
    "start": "972410",
    "end": "979460"
  },
  {
    "text": "keep retrying but that might just be a user you know",
    "start": "979460",
    "end": "984890"
  },
  {
    "text": "who walks away and closes their browser so it's really challenging to to implement sagas using synchronous",
    "start": "984890",
    "end": "992750"
  },
  {
    "text": "communication in a way that guarantees that the saga will run to completion so",
    "start": "992750",
    "end": "999620"
  },
  {
    "text": "for that reason it makes a lot more sense for sagas to be implemented using",
    "start": "999620",
    "end": "1005460"
  },
  {
    "text": "asynchronous messaging so the participants communicate through a message broker that gives you at least",
    "start": "1005460",
    "end": "1013030"
  },
  {
    "text": "once guaranteed delivery because if you have those properties it means that even",
    "start": "1013030",
    "end": "1019060"
  },
  {
    "text": "if a sug a participant is temporarily unavailable the message broker is going",
    "start": "1019060",
    "end": "1025420"
  },
  {
    "text": "to keep retrying the delivery of that message until it's processed so that",
    "start": "1025420",
    "end": "1031839"
  },
  {
    "text": "that will guarantee that the saga will eventually run to completion so think of",
    "start": "1031839",
    "end": "1039310"
  },
  {
    "text": "these saga participants as ex as exchanging messages through some kind of",
    "start": "1039310",
    "end": "1044380"
  },
  {
    "text": "message broker you also need other properties of the message broker in order for this to work namely the",
    "start": "1044380",
    "end": "1049990"
  },
  {
    "text": "message broker has to have ordered delivery messages need to be received in",
    "start": "1049990",
    "end": "1055480"
  },
  {
    "text": "the order in which they were said otherwise things could get really confusing like an order canceled mess",
    "start": "1055480",
    "end": "1062530"
  },
  {
    "text": "event arriving before an ordered created event for example and there's also a",
    "start": "1062530",
    "end": "1069310"
  },
  {
    "text": "the technical requirement around you need a message broker that lets you scale out consumers while preserving",
    "start": "1069310",
    "end": "1076480"
  },
  {
    "text": "ordering some message brokers have that built in like Apache Kafka consumer",
    "start": "1076480",
    "end": "1081850"
  },
  {
    "text": "groups and ActiveMQ other ones don't but that's sort of a whole other technical",
    "start": "1081850",
    "end": "1087610"
  },
  {
    "text": "detail so now if you think about a step of a saga it's basically consists of this pattern",
    "start": "1087610",
    "end": "1094210"
  },
  {
    "text": "repeated over and over again so the service execute the transaction that",
    "start": "1094210",
    "end": "1099580"
  },
  {
    "text": "updates its database and then it will also send a message or publish an event",
    "start": "1099580",
    "end": "1104980"
  },
  {
    "text": "which will then trigger the next participant in the saga to execute its",
    "start": "1104980",
    "end": "1110350"
  },
  {
    "text": "local transaction and there's an interesting sort of sub problem here about how to make those two things",
    "start": "1110350",
    "end": "1117580"
  },
  {
    "text": "atomic how to atomically update the database and and send a message friar",
    "start": "1117580",
    "end": "1123970"
  },
  {
    "text": "the message broker and I'm going to get back to that at the end of the talk so",
    "start": "1123970",
    "end": "1129790"
  },
  {
    "text": "then the next question is how to kind of coordinate the transactions or how to coordinate the saga because after after",
    "start": "1129790",
    "end": "1137920"
  },
  {
    "text": "each step of the saga execute some logic has to run to decide what to do next and",
    "start": "1137920",
    "end": "1147100"
  },
  {
    "text": "if there's success which direction to go if there's failure which direction to go",
    "start": "1147100",
    "end": "1154350"
  },
  {
    "text": "so you need some logic somewhere to decide to kind of coordinate this and",
    "start": "1154350",
    "end": "1160240"
  },
  {
    "text": "there's two different patterns for doing this one is choreography which is where",
    "start": "1160240",
    "end": "1166240"
  },
  {
    "text": "the decision-making is distributed amongst the participants in the system or you can have orchestration where it's",
    "start": "1166240",
    "end": "1173770"
  },
  {
    "text": "centralized in one place there's literally as you're gonna see there is",
    "start": "1173770",
    "end": "1178840"
  },
  {
    "text": "literally a class called create order saga that defines the steps of the saga",
    "start": "1178840",
    "end": "1184980"
  },
  {
    "text": "if we look at what choreography it's actually event based and it's actually a",
    "start": "1184980",
    "end": "1192970"
  },
  {
    "text": "very common pattern which I think has led to why people think of Micra",
    "start": "1192970",
    "end": "1200800"
  },
  {
    "text": "services as being event driven and it works like this so a",
    "start": "1200800",
    "end": "1206620"
  },
  {
    "text": "request comes in to create the order the order service creates the order and it",
    "start": "1206620",
    "end": "1212380"
  },
  {
    "text": "publishes an order created event and that event goes to the order events",
    "start": "1212380",
    "end": "1218200"
  },
  {
    "text": "Channel the consumer service subscribes to that channel receives the event was",
    "start": "1218200",
    "end": "1224649"
  },
  {
    "text": "and then attempts to reserve credit it then publishes an event indicating the",
    "start": "1224649",
    "end": "1230799"
  },
  {
    "text": "outcome which is either the credit has been reserved or the credit limit has been exceeded that goes to the customer",
    "start": "1230799",
    "end": "1238360"
  },
  {
    "text": "events channel and I should say channels are an abstraction over whatever the message broker provides I know we all",
    "start": "1238360",
    "end": "1246610"
  },
  {
    "text": "want to use Kafka but really in reality that's not the only option but think when you see channel think Kafka topic",
    "start": "1246610",
    "end": "1253210"
  },
  {
    "text": "JMS message queue or total JMS topic and",
    "start": "1253210",
    "end": "1258610"
  },
  {
    "text": "and so on it all depends on what message broker you using the order service then",
    "start": "1258610",
    "end": "1264309"
  },
  {
    "text": "gets that event and then either approves or rejected or rejects the order so with",
    "start": "1264309",
    "end": "1270370"
  },
  {
    "text": "this pattern the participants are just exchanging messages each one is saying",
    "start": "1270370",
    "end": "1276250"
  },
  {
    "text": "I've done this and the other one goes oh okay I'll go and do my part and then it",
    "start": "1276250",
    "end": "1281679"
  },
  {
    "text": "announces what it's done and that that's basically the pattern with choreography and it's actually quite sort of natural",
    "start": "1281679",
    "end": "1290230"
  },
  {
    "text": "and intuitive in many ways and when I first started building micro services I was doing this even though I didn't know",
    "start": "1290230",
    "end": "1297510"
  },
  {
    "text": "what it was I was doing it took like a year couple hits before I figured out",
    "start": "1297510",
    "end": "1303610"
  },
  {
    "text": "that these this pattern that I was using was known as choreography based sagas so",
    "start": "1303610",
    "end": "1310299"
  },
  {
    "text": "you know they're very sort of various benefits and drawbacks of choreography one is it's kind of simple especially if",
    "start": "1310299",
    "end": "1317889"
  },
  {
    "text": "you're using event sourcing in fact I was using event sourcing and it was just like yeah everyone's omitting events and",
    "start": "1317889",
    "end": "1324279"
  },
  {
    "text": "people is subscribing and and there was only later that I realized that that was a specific instance of how to do",
    "start": "1324279",
    "end": "1331539"
  },
  {
    "text": "choreography and as you're gonna see choreography is not the only way and since everyone is communicating",
    "start": "1331539",
    "end": "1338399"
  },
  {
    "text": "through events there they're fairly loosely coupled at least in a sort of",
    "start": "1338399",
    "end": "1345539"
  },
  {
    "text": "temporal run time sense right they're not there's no synchronous communication",
    "start": "1345539",
    "end": "1350989"
  },
  {
    "text": "the drawbacks however to choreography are really interesting so one is the",
    "start": "1350989",
    "end": "1357629"
  },
  {
    "text": "implementation is decentralized if you want to understand how a given sagar is",
    "start": "1357629",
    "end": "1363599"
  },
  {
    "text": "implemented you have to go look at the source code for a whole bunch of services because some of them are",
    "start": "1363599",
    "end": "1369059"
  },
  {
    "text": "publishing events other others are subscribing to the events there's no one",
    "start": "1369059",
    "end": "1374099"
  },
  {
    "text": "place in your code that describes that saga there's also cyclic dependencies they're",
    "start": "1374099",
    "end": "1380339"
  },
  {
    "text": "listening to one another at one another's events an input which in",
    "start": "1380339",
    "end": "1386549"
  },
  {
    "text": "itself is potentially a challenge but in this example the customer service has to",
    "start": "1386549",
    "end": "1392219"
  },
  {
    "text": "know about all of the order events that could affect the credit and that's kind",
    "start": "1392219",
    "end": "1397499"
  },
  {
    "text": "of strange because the customer service should be an expert on customers right it shouldn't have to have detailed",
    "start": "1397499",
    "end": "1404249"
  },
  {
    "text": "knowledge of all of the things that you",
    "start": "1404249",
    "end": "1409319"
  },
  {
    "text": "know it shouldn't have deep need to have detailed knowledge of orders that's the responsibility of the order service and",
    "start": "1409319",
    "end": "1415879"
  },
  {
    "text": "then sometimes when you're using this pad and you just want to tell one of the services to go do something whereas with",
    "start": "1415879",
    "end": "1424139"
  },
  {
    "text": "this pattern you can only sort of say what you have done which is it's like a very passive-aggressive way of",
    "start": "1424139",
    "end": "1430739"
  },
  {
    "text": "communicating in a sense which as you know can lead to can lead to problems so",
    "start": "1430739",
    "end": "1438509"
  },
  {
    "text": "the other option you can use is orchestration which works quite differently with orchestration there is",
    "start": "1438509",
    "end": "1446069"
  },
  {
    "text": "a centralized coordinator or Orchestrator that is telling the",
    "start": "1446069",
    "end": "1451949"
  },
  {
    "text": "participants what to do it's actually invoking them but not with",
    "start": "1451949",
    "end": "1457259"
  },
  {
    "text": "rest or some synchronous protocol it's using asynchronous request response it's",
    "start": "1457259",
    "end": "1463049"
  },
  {
    "text": "sending a command message to a participant saying do this and then the participant is sending back a response",
    "start": "1463049",
    "end": "1469499"
  },
  {
    "text": "message but at the heart of it is a saga Orchestrator which I end up abbreviating",
    "start": "1469499",
    "end": "1476130"
  },
  {
    "text": "to just saga that's a persistent object so it lives in the database of the of",
    "start": "1476130",
    "end": "1482040"
  },
  {
    "text": "whatever service is owns that saga and it implements a state machine and it",
    "start": "1482040",
    "end": "1489390"
  },
  {
    "text": "invokes participants and the basic way it works is pretty straightforward when",
    "start": "1489390",
    "end": "1494490"
  },
  {
    "text": "a saga is created it figures out which participant to first send a request to",
    "start": "1494490",
    "end": "1502430"
  },
  {
    "text": "sends it a command message then it just gets saved in the database where where",
    "start": "1502430",
    "end": "1507660"
  },
  {
    "text": "it waits until a reply comes back and then when a reply comes back it gets",
    "start": "1507660",
    "end": "1515010"
  },
  {
    "text": "loaded from the database handed the reply message that triggers a transition",
    "start": "1515010",
    "end": "1522060"
  },
  {
    "text": "of the state machine and it figures out what participants invoke next invokes it",
    "start": "1522060",
    "end": "1528330"
  },
  {
    "text": "and then it gets saved back into the database and it just keeps going around",
    "start": "1528330",
    "end": "1533730"
  },
  {
    "text": "this reply processing loop until the saga has run to completion so it's sort",
    "start": "1533730",
    "end": "1542430"
  },
  {
    "text": "of kind of like a workflow and I know some people are sort of using workflow engines for this kind of thing though I",
    "start": "1542430",
    "end": "1549000"
  },
  {
    "text": "would argue that the come this is like such a race the SOG is a very very",
    "start": "1549000",
    "end": "1555090"
  },
  {
    "text": "short-lived you know unlike a business process that's you know that worked which is lasting hours minutes days sagas should",
    "start": "1555090",
    "end": "1564660"
  },
  {
    "text": "last tens of milliseconds right so it's sort of like a distributed transaction just done done with asynchronous",
    "start": "1564660",
    "end": "1572010"
  },
  {
    "text": "messaging so if you're using what's at BPM to describe your SOG as you're",
    "start": "1572010",
    "end": "1577110"
  },
  {
    "text": "probably doing it wrong they should not be that complicated so the way the way",
    "start": "1577110",
    "end": "1584130"
  },
  {
    "text": "the orchestration based version of saga should work is like this where the order",
    "start": "1584130",
    "end": "1590040"
  },
  {
    "text": "service gets invoked it creates the create order saga that persistent object",
    "start": "1590040",
    "end": "1596880"
  },
  {
    "text": "that implements the state machine which lives in the database that immediately",
    "start": "1596880",
    "end": "1602070"
  },
  {
    "text": "turns around and creates the order is that sort of step number one and then",
    "start": "1602070",
    "end": "1607600"
  },
  {
    "text": "it sends a command message to a customer command channel telling requesting the",
    "start": "1607600",
    "end": "1613960"
  },
  {
    "text": "customer service to reserve credit so it's not an if so even though they're communicating via a message broker the",
    "start": "1613960",
    "end": "1621250"
  },
  {
    "text": "pattern of communication is radically different it's request reply not sort of",
    "start": "1621250",
    "end": "1626830"
  },
  {
    "text": "pub/sub event so it's sending a request to do something the customer service",
    "start": "1626830",
    "end": "1632890"
  },
  {
    "text": "processes that sends back a reply message which is received by the create",
    "start": "1632890",
    "end": "1638410"
  },
  {
    "text": "order saga which will then assuming it's successful approve the order so yeah if",
    "start": "1638410",
    "end": "1646720"
  },
  {
    "text": "you didn't look too closely you'd see message channels and messages going back and forth but once again the the meaning",
    "start": "1646720",
    "end": "1653980"
  },
  {
    "text": "of those messages is very very different its request reply as opposed to domain",
    "start": "1653980",
    "end": "1659950"
  },
  {
    "text": "events which is like I've done this so",
    "start": "1659950",
    "end": "1665410"
  },
  {
    "text": "there's a bunch of benefits to this and I should say that there's links at the bottom of the slides where you can go",
    "start": "1665410",
    "end": "1671380"
  },
  {
    "text": "look at the code that implements this I realize this shortened version of the",
    "start": "1671380",
    "end": "1677710"
  },
  {
    "text": "talk I actually don't have code in the slides but I've implemented customers",
    "start": "1677710",
    "end": "1683530"
  },
  {
    "text": "and orders at least two different ways possibly three with choreography",
    "start": "1683530",
    "end": "1690610"
  },
  {
    "text": "orchestration and I think there's also an event sourcing version as well but",
    "start": "1690610",
    "end": "1697630"
  },
  {
    "text": "the benefits of orchestration is that the definition of the saga is",
    "start": "1697630",
    "end": "1704740"
  },
  {
    "text": "centralized in one place in the example code there is a class called create order saga which lists the steps another",
    "start": "1704740",
    "end": "1713500"
  },
  {
    "text": "benefit of this pattern is that it reduces the coupling the customer service is focused in this in this",
    "start": "1713500",
    "end": "1721120"
  },
  {
    "text": "example on customers it knows nothing about events and of the that are emitted",
    "start": "1721120",
    "end": "1728590"
  },
  {
    "text": "by the order service and instead it simply has an API for managing the",
    "start": "1728590",
    "end": "1733990"
  },
  {
    "text": "available credit reserve credit release credit and so it also gets rid of cyclic",
    "start": "1733990",
    "end": "1740230"
  },
  {
    "text": "dependencies at least in this example the one drawback if any where it",
    "start": "1740230",
    "end": "1746470"
  },
  {
    "text": "requires a little bit more complex requires some kind of SOG orchestration framework but coincidentally I've",
    "start": "1746470",
    "end": "1753430"
  },
  {
    "text": "written an open source one called eventuates so that's not a problem is",
    "start": "1753430",
    "end": "1759100"
  },
  {
    "text": "that there's a risk that you put all of this business logic you you start",
    "start": "1759100",
    "end": "1764110"
  },
  {
    "text": "putting business logic into the saga class and you end up having sort of dumb",
    "start": "1764110",
    "end": "1769650"
  },
  {
    "text": "services that are just sort of performing crud and you want to just don't do that right just push the",
    "start": "1769650",
    "end": "1776380"
  },
  {
    "text": "business logic down into the services where it where it belongs so that's like",
    "start": "1776380",
    "end": "1784300"
  },
  {
    "text": "a super quick sort of whirlwind tour of transaction management you know as you",
    "start": "1784300",
    "end": "1791440"
  },
  {
    "text": "can see it it's you use sagas sagas can either use events or asynchronous",
    "start": "1791440",
    "end": "1797410"
  },
  {
    "text": "request response to communicate and there's a lot more depth there I mean in",
    "start": "1797410",
    "end": "1802570"
  },
  {
    "text": "particular around the designing compensating transactions that's a challenge and also using countermeasures",
    "start": "1802570",
    "end": "1810880"
  },
  {
    "text": "to deal with the lack of isolation between sagas is is another challenge and yeah I'd refer you to",
    "start": "1810880",
    "end": "1818860"
  },
  {
    "text": "I should say go read my book but also",
    "start": "1818860",
    "end": "1824220"
  },
  {
    "text": "the other presentation so the next thing",
    "start": "1824220",
    "end": "1830440"
  },
  {
    "text": "I want to talk about is queries right specifically queries that retrieve data",
    "start": "1830440",
    "end": "1835930"
  },
  {
    "text": "that is scattered across multiple services so with this simple example you",
    "start": "1835930",
    "end": "1844510"
  },
  {
    "text": "know if you want to find the orders for a customer you kind of have to go to the",
    "start": "1844510",
    "end": "1849640"
  },
  {
    "text": "customer service to get some information about the customer service you have to go to the order service to get those",
    "start": "1849640",
    "end": "1855250"
  },
  {
    "text": "orders now one way to do that is to employ the one way you can implement",
    "start": "1855250",
    "end": "1861070"
  },
  {
    "text": "this query is with API composition which is where the you have an API composer",
    "start": "1861070",
    "end": "1867910"
  },
  {
    "text": "which in this example is the API gateway just simply turns around and invokes the",
    "start": "1867910",
    "end": "1873340"
  },
  {
    "text": "respective services and just get gathers the data and in a lot of cases it works",
    "start": "1873340",
    "end": "1880600"
  },
  {
    "text": "quite well and in fact it's the preferred pattern for implementing queries in a micro service architecture",
    "start": "1880600",
    "end": "1887700"
  },
  {
    "text": "the problem is is that you can very easily run into scenario you can have",
    "start": "1887700",
    "end": "1893410"
  },
  {
    "text": "queries that cannot efficiently be implemented using API composition so",
    "start": "1893410",
    "end": "1901570"
  },
  {
    "text": "here's an example where we want to find all customers who have recently been created that have placed orders over a",
    "start": "1901570",
    "end": "1909970"
  },
  {
    "text": "certain amount like high dollar value orders that have shipped so it's doing a join between these two services trivial",
    "start": "1909970",
    "end": "1917560"
  },
  {
    "text": "in a MOT in a monolithic architecture but it's an example of a query that is",
    "start": "1917560",
    "end": "1924160"
  },
  {
    "text": "not that efficiently implemented in a micro service architecture so like one",
    "start": "1924160",
    "end": "1930160"
  },
  {
    "text": "way of doing it for example is you find the recent customers by querying the",
    "start": "1930160",
    "end": "1935740"
  },
  {
    "text": "customer service that gets you gets you a list of customers and then you then",
    "start": "1935740",
    "end": "1940780"
  },
  {
    "text": "the API composer could iterate through that list of customers getting their respective orders so that's sort of a",
    "start": "1940780",
    "end": "1947020"
  },
  {
    "text": "one plus an execution strategy where you've got lots of round trips which is likely to be inefficient the other",
    "start": "1947020",
    "end": "1955810"
  },
  {
    "text": "strategy is you find the recent customers you find the recent orders",
    "start": "1955810",
    "end": "1960820"
  },
  {
    "text": "that have been shipped so you two queries to each of the services and then",
    "start": "1960820",
    "end": "1965860"
  },
  {
    "text": "you basically do an in-memory join but that's to potentially large data sets",
    "start": "1965860",
    "end": "1972820"
  },
  {
    "text": "and you're sort of going down this slippery slope of basically building a",
    "start": "1972820",
    "end": "1979210"
  },
  {
    "text": "distributed query engine and even if you could come up with a good way of",
    "start": "1979210",
    "end": "1985200"
  },
  {
    "text": "implementing this particular example there are many others where it just sort of doesn't work efficiently and so for",
    "start": "1985200",
    "end": "1993940"
  },
  {
    "text": "that reason you want to use this other pattern known as CQRS command or a command query responsibility segregation",
    "start": "1993940",
    "end": "2002400"
  },
  {
    "text": "which is a really complicated way just simply saying maintain a replica of",
    "start": "2002400",
    "end": "2008430"
  },
  {
    "text": "your data in a format that can be efficiently queried so in this example",
    "start": "2008430",
    "end": "2015540"
  },
  {
    "text": "there's a customer order of you service that implements fiying customers and orders and it's got its own database a",
    "start": "2015540",
    "end": "2023070"
  },
  {
    "text": "replica of the data in a format that is best suited for that query and that",
    "start": "2023070",
    "end": "2028520"
  },
  {
    "text": "replica is kept up to date by subscribing to the event that are being emitted by the services that own the",
    "start": "2028520",
    "end": "2036240"
  },
  {
    "text": "data in this example the customer service and the order service and you",
    "start": "2036240",
    "end": "2042360"
  },
  {
    "text": "know this is a good fit for no sequel databases it's mutable up there I can",
    "start": "2042360",
    "end": "2047430"
  },
  {
    "text": "barely read it here so for instance you could use something like MongoDB which is really good for storing blobs",
    "start": "2047430",
    "end": "2054450"
  },
  {
    "text": "of JSON right so you know you can imagine a design where for each customer",
    "start": "2054450",
    "end": "2059970"
  },
  {
    "text": "there is a MongoDB document that stores information about the customer and and",
    "start": "2059970",
    "end": "2066330"
  },
  {
    "text": "that's kept up to date by subscribing to customer events and then you it stores information about the customers orders",
    "start": "2066330",
    "end": "2072659"
  },
  {
    "text": "as well which is kept up to date by subscribing to the order events and the neat thing about this is one primary key",
    "start": "2072660",
    "end": "2079860"
  },
  {
    "text": "based lookup and you get back all of this information about the customer and their orders and you can do something",
    "start": "2079860",
    "end": "2086340"
  },
  {
    "text": "similar with Redis or just pick your favorite no sequel database and the",
    "start": "2086340",
    "end": "2093000"
  },
  {
    "text": "origin of the term comes from the fact that in a traditional system you have",
    "start": "2093000",
    "end": "2099180"
  },
  {
    "text": "the sit one data model is used for commands and for queries the idea with",
    "start": "2099180",
    "end": "2105090"
  },
  {
    "text": "this is you segregate the data models and you got a command side data model",
    "start": "2105090",
    "end": "2110250"
  },
  {
    "text": "and a query side data model and the query side data model is kept up to date",
    "start": "2110250",
    "end": "2115500"
  },
  {
    "text": "by subscribing to events and in a real world system you might end up with",
    "start": "2115500",
    "end": "2121740"
  },
  {
    "text": "multiple query side data models each one is optimized for a particular query or",
    "start": "2121740",
    "end": "2129420"
  },
  {
    "text": "set of queries and you could also choose the database that's the best fit so if",
    "start": "2129420",
    "end": "2135330"
  },
  {
    "text": "you're storing blobs of JSON MongoDB or if you're doing text searches maybe",
    "start": "2135330",
    "end": "2142890"
  },
  {
    "text": "it's elasticsearch or if you are you doing graph searches it's neo4j so you so not only are you",
    "start": "2142890",
    "end": "2150119"
  },
  {
    "text": "designing the schema that's the best fit for the queries it's you're you're also picking the",
    "start": "2150119",
    "end": "2158850"
  },
  {
    "text": "database that's the best fit as well though there is you know that concept of like multimodal databases so it gets all",
    "start": "2158850",
    "end": "2166140"
  },
  {
    "text": "a little blurry because there for instance like with Redis there are add-ons to Redis that can do text",
    "start": "2166140",
    "end": "2172830"
  },
  {
    "text": "searches and graph searches and and so you might just have one one type of",
    "start": "2172830",
    "end": "2178830"
  },
  {
    "text": "database implementing all of these different views you know one thing to note about these views is that they are",
    "start": "2178830",
    "end": "2185550"
  },
  {
    "text": "disposable they are replicas so if you need to change the schema of one of them you can",
    "start": "2185550",
    "end": "2193859"
  },
  {
    "text": "just throw them away and throw it away and rebuild it from scratch one",
    "start": "2193859",
    "end": "2199230"
  },
  {
    "text": "challenge with this architecture though is that there is a replication lag between updating the command side right",
    "start": "2199230",
    "end": "2208890"
  },
  {
    "text": "issuing the I don't know creating an order or revising an order and and when",
    "start": "2208890",
    "end": "2215850"
  },
  {
    "text": "the query side is updated because an event gets published then goes through the message broker and then the view",
    "start": "2215850",
    "end": "2223350"
  },
  {
    "text": "gets updated so maybe there's like a 20 millisecond lag between the two but",
    "start": "2223350",
    "end": "2228390"
  },
  {
    "text": "that's forever in computer terms and so you could imagine a client issuing an",
    "start": "2228390",
    "end": "2234210"
  },
  {
    "text": "update request and then immediately turning around and doing a query and it might get back the old version of the",
    "start": "2234210",
    "end": "2241080"
  },
  {
    "text": "data no different than updating the my sequel master and then querying the my",
    "start": "2241080",
    "end": "2247500"
  },
  {
    "text": "sequel slave and not seeing what you just wrote see you have if you're",
    "start": "2247500",
    "end": "2253590"
  },
  {
    "text": "designing say the UI for sure you have to take this into account you know in",
    "start": "2253590",
    "end": "2259560"
  },
  {
    "text": "the comment Rick say in an angular application or a react application as you update the browser side data model",
    "start": "2259560",
    "end": "2267000"
  },
  {
    "text": "after you know that the command has executed successfully and skip of querying issuing a query to the",
    "start": "2267000",
    "end": "2276199"
  },
  {
    "text": "server with the idea that eventually when the user sort of navigates away and",
    "start": "2276199",
    "end": "2281449"
  },
  {
    "text": "triggers the query the the the query databases has been updated so there are",
    "start": "2281449",
    "end": "2288799"
  },
  {
    "text": "solutions to that so that's CQRS really really useful in a",
    "start": "2288799",
    "end": "2295339"
  },
  {
    "text": "micro service architecture although it obviously does add complexity because",
    "start": "2295339",
    "end": "2300649"
  },
  {
    "text": "you've got replicas and you potentially have polygon persistence as well so the",
    "start": "2300649",
    "end": "2308419"
  },
  {
    "text": "next thing i want to talk about is sort of kind of the tet it's sort of a technical foundation with some of this",
    "start": "2308419",
    "end": "2314869"
  },
  {
    "text": "know and which goes by the name of transactional messaging if you remember",
    "start": "2314869",
    "end": "2322099"
  },
  {
    "text": "I said each step of a saga needs to update the database and then publish and",
    "start": "2322099",
    "end": "2329509"
  },
  {
    "text": "publish an event or send a message and the challenge is how to do those two",
    "start": "2329509",
    "end": "2335269"
  },
  {
    "text": "things atomically we can't use two-phase commit because that's sort of a tech",
    "start": "2335269",
    "end": "2340909"
  },
  {
    "text": "like JTA with JMS and JDBC because that's the kind of technology we're trying to avoid by using sagas in the",
    "start": "2340909",
    "end": "2347719"
  },
  {
    "text": "first place right so some folks say well just publish to the publish to the",
    "start": "2347719",
    "end": "2356059"
  },
  {
    "text": "message broker first and then have a message consumer that updates the",
    "start": "2356059",
    "end": "2361999"
  },
  {
    "text": "database that that gives you a guarantee of atomicity but it doesn't work with a",
    "start": "2361999",
    "end": "2369409"
  },
  {
    "text": "whole bunch of scenarios because the service can't read its own writes basically the you know it reads and then",
    "start": "2369409",
    "end": "2376089"
  },
  {
    "text": "eventually the database gets updated but there are many scenarios where you need",
    "start": "2376089",
    "end": "2381319"
  },
  {
    "text": "to be out of read and write as part of an asset transaction locally so that",
    "start": "2381319",
    "end": "2388459"
  },
  {
    "text": "this pattern generally does not work well so another approach which is",
    "start": "2388459",
    "end": "2395419"
  },
  {
    "text": "actually the one I first started with one building micro services is event sourcing which is an event centric",
    "start": "2395419",
    "end": "2401869"
  },
  {
    "text": "approach to business logic and persistence and in many ways it's kind of a radical",
    "start": "2401869",
    "end": "2408839"
  },
  {
    "text": "way of doing things basically your domain objects your orders your",
    "start": "2408839",
    "end": "2414990"
  },
  {
    "text": "customers are persisted in the database as a sequence of events conceptually",
    "start": "2414990",
    "end": "2420869"
  },
  {
    "text": "there's an event table so when an order is created and it an order created event",
    "start": "2420869",
    "end": "2427049"
  },
  {
    "text": "is inserted into the table when it's approved an event is inserted when it",
    "start": "2427049",
    "end": "2432180"
  },
  {
    "text": "shipped an event is inserted as well and this is the source of truth capturing",
    "start": "2432180",
    "end": "2437700"
  },
  {
    "text": "the state of your orders so a very",
    "start": "2437700",
    "end": "2443069"
  },
  {
    "text": "radical radically different approach to persistence as well and the way in which you write your business logic it's all",
    "start": "2443069",
    "end": "2450180"
  },
  {
    "text": "in terms of generate a kind of generating events basically and then",
    "start": "2450180",
    "end": "2456299"
  },
  {
    "text": "when you need to recreate in memory the state of the order you the system will",
    "start": "2456299",
    "end": "2463890"
  },
  {
    "text": "load those events and replay them so where I say hibernate today right will",
    "start": "2463890",
    "end": "2469530"
  },
  {
    "text": "reconstruct the in-memory state of an object by querying a bunch of tables and stitching those rows together into",
    "start": "2469530",
    "end": "2475559"
  },
  {
    "text": "domain objects with the event sourcing this the events are queried and then",
    "start": "2475559",
    "end": "2481290"
  },
  {
    "text": "they're replayed on the domain object and that the great example of that is if",
    "start": "2481290",
    "end": "2486510"
  },
  {
    "text": "you have a bank account where the events are account debited and credited replay is really just summing up the debits and",
    "start": "2486510",
    "end": "2493559"
  },
  {
    "text": "credits to reconstruct the balance but the same approach applies to all other",
    "start": "2493559",
    "end": "2501599"
  },
  {
    "text": "domain objects as well one key requirement for your events store is",
    "start": "2501599",
    "end": "2507150"
  },
  {
    "text": "that you need to load event by ID and just sort of one thing that I bet find",
    "start": "2507150",
    "end": "2514260"
  },
  {
    "text": "irritating is like a lot of Kafka people describe Kafka as an event store but it does not it's an excellent message",
    "start": "2514260",
    "end": "2521099"
  },
  {
    "text": "broker but it does not let you retrieve events by ID which is an essential",
    "start": "2521099",
    "end": "2527099"
  },
  {
    "text": "requirement for for an event store the other part of the event store which",
    "start": "2527099",
    "end": "2532500"
  },
  {
    "text": "Kafka is actually really really good at is the event store acts as a message",
    "start": "2532500",
    "end": "2537930"
  },
  {
    "text": "broker click services can subscribe to those events so when they're inserted that",
    "start": "2537930",
    "end": "2544170"
  },
  {
    "text": "they're simultaneously published at the same time however the message however",
    "start": "2544170",
    "end": "2549930"
  },
  {
    "text": "the events store actually implements that and does it in an atomic fashion so",
    "start": "2549930",
    "end": "2559350"
  },
  {
    "text": "so that that's basically satisfying the requirements that of kind of the saga",
    "start": "2559350",
    "end": "2566280"
  },
  {
    "text": "patent as well where you've got an event where you need a message broker like",
    "start": "2566280",
    "end": "2571350"
  },
  {
    "text": "functionality that guarantees ordering and so on so when I first started",
    "start": "2571350",
    "end": "2577950"
  },
  {
    "text": "building micro services this was how I built them and then it was like oh they're using events and that then later",
    "start": "2577950",
    "end": "2584190"
  },
  {
    "text": "on I realized oh wait this is choreography based sagas and as you're gonna see it's like oh wait event",
    "start": "2584190",
    "end": "2591240"
  },
  {
    "text": "sourcing isn't the only way of publishing event but event sourcing has some interesting characteristics it does",
    "start": "2591240",
    "end": "2598070"
  },
  {
    "text": "preserve the history of domain objects which lets you kind of do auditing it",
    "start": "2598070",
    "end": "2603540"
  },
  {
    "text": "lets you kind of ask answer the question what was the state of this domain object",
    "start": "2603540",
    "end": "2609270"
  },
  {
    "text": "two weeks ago which might be good for auditing and so on but then it is a very",
    "start": "2609270",
    "end": "2615510"
  },
  {
    "text": "different way of programming also you've got potentially long-lived events and",
    "start": "2615510",
    "end": "2622320"
  },
  {
    "text": "they're at allinger's around managing the the schema evolution and then the",
    "start": "2622320",
    "end": "2629760"
  },
  {
    "text": "events store basically work forces you to use CQRS it's not directly querying",
    "start": "2629760",
    "end": "2636530"
  },
  {
    "text": "unless you want to know give me the events by primary key and then it's implementing choreography",
    "start": "2636530",
    "end": "2644700"
  },
  {
    "text": "based sagas is really really natural but other kinds of orchestration based sagas",
    "start": "2644700",
    "end": "2652260"
  },
  {
    "text": "are more challenging so for that reason another approach that's really really",
    "start": "2652260",
    "end": "2659670"
  },
  {
    "text": "appealing is to use the traditional persistence JPA mybatis",
    "start": "2659670",
    "end": "2664950"
  },
  {
    "text": "pick your favorite with what's known as the transactional outbox pattern so the",
    "start": "2664950",
    "end": "2670170"
  },
  {
    "text": "way that works is you know like here's you this is like spring data for JPA example",
    "start": "2670170",
    "end": "2675359"
  },
  {
    "text": "or to get saved and then it just explicitly publishes an event or so it",
    "start": "2675359",
    "end": "2683040"
  },
  {
    "text": "thinks in reality what's happening that event is being inserted into an outbox",
    "start": "2683040",
    "end": "2690510"
  },
  {
    "text": "table as part of the database transaction that is updating the order",
    "start": "2690510",
    "end": "2697230"
  },
  {
    "text": "and because it's part of the same asset transaction you have the atomicity",
    "start": "2697230",
    "end": "2702500"
  },
  {
    "text": "guarantee that you need so all messages that the that the track that the service",
    "start": "2702500",
    "end": "2709440"
  },
  {
    "text": "wants to send ends up in this outbox table there's then a separate process",
    "start": "2709440",
    "end": "2716099"
  },
  {
    "text": "that is reading the outbox table somehow and publishing those messages to the",
    "start": "2716099",
    "end": "2722819"
  },
  {
    "text": "message broker so it's like a two-step process and I first actually heard about",
    "start": "2722819",
    "end": "2731430"
  },
  {
    "text": "this in the context or something very analogous to this in the context of ebay",
    "start": "2731430",
    "end": "2737630"
  },
  {
    "text": "like ten years ago so in many ways this is not a radical idea so there's two",
    "start": "2737630",
    "end": "2745710"
  },
  {
    "text": "ways of actually getting the messages out of the outbox table and publishing",
    "start": "2745710",
    "end": "2751020"
  },
  {
    "text": "them to the message broker so one option is to tail the database transaction log",
    "start": "2751020",
    "end": "2758839"
  },
  {
    "text": "which sounds like kind of like weird and crazy I mean it the challenges is that",
    "start": "2758839",
    "end": "2764670"
  },
  {
    "text": "it's it's very how you do that is very very database specific you know do you",
    "start": "2764670",
    "end": "2771180"
  },
  {
    "text": "it's with my sequel it's the bin log with Postgres it's the right ahead log DynamoDB has table streams and so on but",
    "start": "2771180",
    "end": "2779550"
  },
  {
    "text": "once you kind of just accept that it's a it's a legitimate approach it ends up being quite straightforward to do that",
    "start": "2779550",
    "end": "2786599"
  },
  {
    "text": "and just one of the things that my open source project does the other option",
    "start": "2786599",
    "end": "2794310"
  },
  {
    "text": "which is sort of universally applicable to jdb save JDBC databases is pull the",
    "start": "2794310",
    "end": "2802020"
  },
  {
    "text": "message table every n milliseconds do a select star from passage where message is unpublished",
    "start": "2802020",
    "end": "2808260"
  },
  {
    "text": "published the message to the mess to the message broker and then update those messages to mark them as having been",
    "start": "2808260",
    "end": "2815790"
  },
  {
    "text": "published and so but there are issues",
    "start": "2815790",
    "end": "2821490"
  },
  {
    "text": "around this like with well what about poling frequency and so on and some of you might be wondering well what happens",
    "start": "2821490",
    "end": "2827430"
  },
  {
    "text": "if you crash before after querying the method well after publishing the messages to the message broker and but",
    "start": "2827430",
    "end": "2835740"
  },
  {
    "text": "before marking them as having been updated and what that means is sort of",
    "start": "2835740",
    "end": "2842850"
  },
  {
    "text": "two things yes in a failure scenario with once with sort of a simple",
    "start": "2842850",
    "end": "2848850"
  },
  {
    "text": "implementation yes that does mean that messages might get written to the message broker more than once but given",
    "start": "2848850",
    "end": "2857460"
  },
  {
    "text": "that message handlers are almost always written to detect and discard duplicates",
    "start": "2857460",
    "end": "2863840"
  },
  {
    "text": "because message brokers anyway can deliver the same message more than once",
    "start": "2863840",
    "end": "2869900"
  },
  {
    "text": "it ends up not being a problem for the",
    "start": "2869900",
    "end": "2875010"
  },
  {
    "text": "most part so anyway so that that so you've got those two approaches so like",
    "start": "2875010",
    "end": "2880050"
  },
  {
    "text": "the open source project I work on we support Postgres right ahead log my",
    "start": "2880050",
    "end": "2886560"
  },
  {
    "text": "sequel bin log but then you can just use polling for like Microsoft sequel server",
    "start": "2886560",
    "end": "2892080"
  },
  {
    "text": "or Oracle or pick whatever database anyway so that sort of transactional",
    "start": "2892080",
    "end": "2899610"
  },
  {
    "text": "messaging is sort of that kind of the technical foundation for making sagas",
    "start": "2899610",
    "end": "2904950"
  },
  {
    "text": "and making CQRS work so that's my talk",
    "start": "2904950",
    "end": "2910200"
  },
  {
    "text": "so it's sort of in summary right in a micro service architecture you you're",
    "start": "2910200",
    "end": "2916080"
  },
  {
    "text": "using asynchronous messaging to kind of solve these the distributed data management problems in a micro service",
    "start": "2916080",
    "end": "2922800"
  },
  {
    "text": "architecture service is a publishing event so this is the event-driven part",
    "start": "2922800",
    "end": "2928140"
  },
  {
    "text": "to implement choreography based sagas and and CQ and CQRS",
    "start": "2928140",
    "end": "2935240"
  },
  {
    "text": "but orchestration based sagas use asynchronous",
    "start": "2935240",
    "end": "2940440"
  },
  {
    "text": "to request reply so an entirely different form of messaging and then",
    "start": "2940440",
    "end": "2951060"
  },
  {
    "text": "sort of one of the key technical foundation for this is that services need to be a need to atomically update",
    "start": "2951060",
    "end": "2958859"
  },
  {
    "text": "state and send a message so one way to do that is event sourcing but a more",
    "start": "2958859",
    "end": "2965609"
  },
  {
    "text": "sort of general approach what I think is like if you're adopting micro services",
    "start": "2965609",
    "end": "2970950"
  },
  {
    "text": "is far easier to to embrace is actually the transactional outbox pattern so yeah",
    "start": "2970950",
    "end": "2978960"
  },
  {
    "text": "so that's my talk thank you for listening and uh yeah my book if you",
    "start": "2978960",
    "end": "2985680"
  },
  {
    "text": "want a discount on it got a plug my book right and go to that link and I should",
    "start": "2985680",
    "end": "2995040"
  },
  {
    "text": "say oh don't forget to vote provided you like this talk of course and you can ask",
    "start": "2995040",
    "end": "3000829"
  },
  {
    "text": "questions and if I don't answer them today I promise I will write a blog post within the next 50 years that will",
    "start": "3000829",
    "end": "3007940"
  },
  {
    "text": "answer them I get around to things eventually and I'm doing a book signing",
    "start": "3007940",
    "end": "3013280"
  },
  {
    "text": "later today to a client and I'm in the break this afternoon and tomorrow",
    "start": "3013280",
    "end": "3018530"
  },
  {
    "text": "lunchtime there's like some micro service discussion table thing hang out",
    "start": "3018530",
    "end": "3025069"
  },
  {
    "text": "so anyway thanks thanks for listening hope that you found this useful",
    "start": "3025069",
    "end": "3030480"
  },
  {
    "text": "[Applause]",
    "start": "3030480",
    "end": "3035690"
  }
]