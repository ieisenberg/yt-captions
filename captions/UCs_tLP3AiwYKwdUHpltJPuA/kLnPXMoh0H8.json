[
  {
    "text": "so there either okay good morning this is absolutely wonderful um",
    "start": "4500",
    "end": "10080"
  },
  {
    "text": "my wife and I love traveling to Asia and um until",
    "start": "10080",
    "end": "15360"
  },
  {
    "text": "about three days ago if you asked her she would tell you that her favorite city in the world is Hong Kong",
    "start": "15360",
    "end": "20460"
  },
  {
    "text": "we'd been to Singapore before um but having then just spent a bit of",
    "start": "20460",
    "end": "25560"
  },
  {
    "text": "time in Hong Kong by the time in Singapore yesterday she announced that she changed her mind and now her",
    "start": "25560",
    "end": "30599"
  },
  {
    "text": "favorite city is Singapore so thank you so I'll be back",
    "start": "30599",
    "end": "37079"
  },
  {
    "text": "okay so um let me start with a question how many",
    "start": "37079",
    "end": "42540"
  },
  {
    "text": "people here do oo programming and hold your hand up and keep it up please",
    "start": "42540",
    "end": "48899"
  },
  {
    "text": "all right up keep it up keep it up keep it up okay put it in your hand no keep it up what's",
    "start": "48899",
    "end": "56039"
  },
  {
    "text": "wrong put your hands up right okay put your hand down if you have classes",
    "start": "56039",
    "end": "61379"
  },
  {
    "text": "that have public data public instance variables put your hand down if you have classes",
    "start": "61379",
    "end": "68159"
  },
  {
    "text": "that have Getters and setters that's about right put your hand down if",
    "start": "68159",
    "end": "74700"
  },
  {
    "text": "you use inheritance all right one two three three people do",
    "start": "74700",
    "end": "82020"
  },
  {
    "text": "oo programming everybody else you're doing class-based programming not",
    "start": "82020",
    "end": "88080"
  },
  {
    "text": "object-based programming yeah and that's not your fault it's how you've been taught when you think about",
    "start": "88080",
    "end": "94799"
  },
  {
    "text": "it when you first start designing an application what do you do you may sketch out a class diagram",
    "start": "94799",
    "end": "101520"
  },
  {
    "text": "all right that's how you program it you use Frameworks any rails developers here",
    "start": "101520",
    "end": "108119"
  },
  {
    "text": "okay one two that's actually unusual the Frameworks insist that you use",
    "start": "108119",
    "end": "114299"
  },
  {
    "text": "things like inheritance well it's the wrong thing to do",
    "start": "114299",
    "end": "119340"
  },
  {
    "text": "so we're trained to do all these bad things and it's very hard to throw that",
    "start": "119340",
    "end": "125939"
  },
  {
    "text": "training out because it's so deeply ingrained in the way we code",
    "start": "125939",
    "end": "131160"
  },
  {
    "text": "so I've been playing around a bit with how to kind of reclaim that Purity how to",
    "start": "131160",
    "end": "137400"
  },
  {
    "text": "get back to doing proper oo development and I've come to the conclusion that the",
    "start": "137400",
    "end": "144120"
  },
  {
    "text": "best way of doing that is to use functional languages but I'm not saying to you throw away the",
    "start": "144120",
    "end": "150900"
  },
  {
    "text": "concepts of a woe I'm just saying throw away the current implementation that's a lot better right",
    "start": "150900",
    "end": "157980"
  },
  {
    "text": "so I have been experimenting with code and I've been experimenting with a couple of aspects one experimenting with",
    "start": "157980",
    "end": "166319"
  },
  {
    "text": "code AS transformation of changing state in code",
    "start": "166319",
    "end": "173819"
  },
  {
    "text": "and then the second thing I've been playing with is State itself how do we represent the state of our program in a",
    "start": "173819",
    "end": "181260"
  },
  {
    "text": "way that doesn't couple everything together",
    "start": "181260",
    "end": "186019"
  },
  {
    "text": "now my motivation here is I want to produce well-designed code",
    "start": "186840",
    "end": "192959"
  },
  {
    "text": "and to me there's only one definition of",
    "start": "192959",
    "end": "198480"
  },
  {
    "text": "well-designed code well-designed code is code that is easy to change",
    "start": "198480",
    "end": "203580"
  },
  {
    "text": "all right everything else is irrelevant if your code is easy to change then all",
    "start": "203580",
    "end": "210900"
  },
  {
    "text": "the other good rules of design fall out from that you try to avoid duplication because",
    "start": "210900",
    "end": "217080"
  },
  {
    "text": "duplication makes your code hard to change you try to avoid coupling",
    "start": "217080",
    "end": "222420"
  },
  {
    "text": "coupling things together in your code because that makes it really hard to change",
    "start": "222420",
    "end": "227459"
  },
  {
    "text": "and so I've been looking at how do I represent state in such a way that I can eliminate a lot of that coupling and",
    "start": "227459",
    "end": "234299"
  },
  {
    "text": "make my code easier so let's start off",
    "start": "234299",
    "end": "239340"
  },
  {
    "text": "with the idea as of code as a transformation",
    "start": "239340",
    "end": "245120"
  },
  {
    "text": "[Applause] School it's a university to learn programming",
    "start": "246640",
    "end": "252900"
  },
  {
    "text": "the chances are that somewhere in the first month someone stood up before a board and drew a picture that looked",
    "start": "252900",
    "end": "259859"
  },
  {
    "text": "something like this how does a computer work they say well you have the input and then you have this thing called a",
    "start": "259859",
    "end": "266759"
  },
  {
    "text": "processor and the processor does the stuff and then it produces output",
    "start": "266759",
    "end": "272759"
  },
  {
    "text": "and along the way it's probably going to be using some storage device to store",
    "start": "272759",
    "end": "278040"
  },
  {
    "text": "the data and this is how computers worked in the 1960s and this is kind of",
    "start": "278040",
    "end": "283080"
  },
  {
    "text": "like the model we all have in our heads of what they're doing I mean the reality nowadays is like totally different but",
    "start": "283080",
    "end": "288540"
  },
  {
    "text": "it doesn't really matter this is the model we have in our heads so let's tidy this up just a little bit",
    "start": "288540",
    "end": "294120"
  },
  {
    "text": "and let's make it more relevant to today so rather than processor speak to me",
    "start": "294120",
    "end": "302000"
  },
  {
    "text": "let's have process because the same thing applies right and rather than having storage",
    "start": "302639",
    "end": "309300"
  },
  {
    "text": "let's think of it as state so what we have is our programs",
    "start": "309300",
    "end": "316620"
  },
  {
    "text": "are simply a process that takes an input produces an output",
    "start": "316620",
    "end": "321900"
  },
  {
    "text": "and manages State at the same time so in the process of taking your input",
    "start": "321900",
    "end": "328860"
  },
  {
    "text": "and producing your output you may or may not update some local state to that",
    "start": "328860",
    "end": "334380"
  },
  {
    "text": "process and that's kind of like an object as well hmm",
    "start": "334380",
    "end": "340940"
  },
  {
    "text": "now princesses can share state but you only want them to share state if",
    "start": "342780",
    "end": "349740"
  },
  {
    "text": "they are effectively the same process if they're related processes so you can actually have a chain like",
    "start": "349740",
    "end": "356039"
  },
  {
    "text": "this a chain of Transformations where processes are updating a common state or",
    "start": "356039",
    "end": "361800"
  },
  {
    "text": "reading from a common state and of course you can have multiple sets of",
    "start": "361800",
    "end": "367199"
  },
  {
    "text": "this common state yeah and then if you actually look inside one",
    "start": "367199",
    "end": "374280"
  },
  {
    "text": "of those processors you'll find that we actually have the same thing going on",
    "start": "374280",
    "end": "379380"
  },
  {
    "text": "so inside there we have the potential to have another set of Transformations",
    "start": "379380",
    "end": "385800"
  },
  {
    "text": "inside that process so what we have here is a perfectly",
    "start": "385800",
    "end": "391860"
  },
  {
    "text": "viable programming model we have the ability to have sequences of steps and we have the ability to have composition",
    "start": "391860",
    "end": "399600"
  },
  {
    "text": "so clearly we can actually design code this way we can actually write our programs using this model",
    "start": "399600",
    "end": "405479"
  },
  {
    "text": "and what that is is just Transformations all the way down so we start off",
    "start": "405479",
    "end": "411360"
  },
  {
    "text": "with our overall program input goes to output and we say to ourselves how can",
    "start": "411360",
    "end": "416699"
  },
  {
    "text": "we Implement that using nothing more than Transformations that sometimes",
    "start": "416699",
    "end": "422160"
  },
  {
    "text": "share state and that's where I got to so maybe 18 months ago I started",
    "start": "422160",
    "end": "428940"
  },
  {
    "text": "thinking about can we write a non-trivial as in any program",
    "start": "428940",
    "end": "435960"
  },
  {
    "text": "as nothing more than a set of single line transformations",
    "start": "435960",
    "end": "441960"
  },
  {
    "text": "and I set myself the goal of single line Transformations because I wanted to guarantee that I wasn't cheating",
    "start": "441960",
    "end": "449400"
  },
  {
    "text": "so every transformation had to be a single line and the answer I came up with was yes",
    "start": "449400",
    "end": "455400"
  },
  {
    "text": "I could not find an example that I couldn't do that way however it's a stupid thing to do",
    "start": "455400",
    "end": "463319"
  },
  {
    "text": "because it makes your programs really really verbose and really quite hard to deal with",
    "start": "463319",
    "end": "469139"
  },
  {
    "text": "and I was a bit disappointed because I really did want to have you know this kind of very tidy very neat thing",
    "start": "469139",
    "end": "476819"
  },
  {
    "text": "so let me change my criteria somewhat I said is it possible to write a",
    "start": "476819",
    "end": "483360"
  },
  {
    "text": "non-trivial program where parts of it are nothing more than single line",
    "start": "483360",
    "end": "488940"
  },
  {
    "text": "Transformations and obviously the answer is yes but it turns out that in this case it's a really good thing to do",
    "start": "488940",
    "end": "497599"
  },
  {
    "text": "and I'll show you why I think it's a good thing",
    "start": "497880",
    "end": "502400"
  },
  {
    "text": "as Dave said the thing I would most most like to be",
    "start": "504120",
    "end": "509819"
  },
  {
    "text": "doing is programming and so whenever I have an idea it's always an excuse to go away and do some",
    "start": "509819",
    "end": "516120"
  },
  {
    "text": "coding um so in this case I tried to come up with a kind of a library or a framework",
    "start": "516120",
    "end": "523200"
  },
  {
    "text": "that would let me create these transformations in a nice easy way",
    "start": "523200",
    "end": "529140"
  },
  {
    "text": "and so I came up with this framework called diet uh it's called diet because each one of",
    "start": "529140",
    "end": "535440"
  },
  {
    "text": "these Transformations is actually technically a reduction so if you apply a series of reductions it's a diet",
    "start": "535440",
    "end": "542880"
  },
  {
    "text": "um and so a diet allows me to create these Transformers or reductions and each one",
    "start": "542880",
    "end": "550260"
  },
  {
    "text": "is a series of specifications and the specifications",
    "start": "550260",
    "end": "556500"
  },
  {
    "text": "can share a common state they don't have to but they can share a common state",
    "start": "556500",
    "end": "561779"
  },
  {
    "text": "and each specification is no more than that little picture that we saw at the beginning it's an input that goes to an",
    "start": "561779",
    "end": "568980"
  },
  {
    "text": "output or it's an input that updates the state and then goes to an output",
    "start": "568980",
    "end": "577519"
  },
  {
    "text": "and using just those two things you can program anything",
    "start": "577560",
    "end": "583459"
  },
  {
    "text": "but the cool thing is that I'm going to program this in a language called elixir",
    "start": "584640",
    "end": "590459"
  },
  {
    "text": "and elixir has this thing called pattern matching now it's not like in python or",
    "start": "590459",
    "end": "596580"
  },
  {
    "text": "Java where patents are to do with regular expressions it's more like a language where you can",
    "start": "596580",
    "end": "603600"
  },
  {
    "text": "have many methods of the same name and the one it calls depends on the parameters that you give it yeah",
    "start": "603600",
    "end": "610620"
  },
  {
    "text": "so you can do that kind of polymorphic pattern matching into methods in languages such as Java",
    "start": "610620",
    "end": "617160"
  },
  {
    "text": "well in Elixir I can do way more powerful pattern matching so I can match",
    "start": "617160",
    "end": "623220"
  },
  {
    "text": "based on the type but also on the values of the arguments that I pass and that's",
    "start": "623220",
    "end": "628680"
  },
  {
    "text": "what I'm going to do here and that's called pattern matching so we have a transformation",
    "start": "628680",
    "end": "634860"
  },
  {
    "text": "which consists of a number of these specifications the specifications match some input and they produce an output",
    "start": "634860",
    "end": "643140"
  },
  {
    "text": "what then happens is that output gets fed back in to see if it could match",
    "start": "643140",
    "end": "648360"
  },
  {
    "text": "another one of those specifications and if it does it runs that and then",
    "start": "648360",
    "end": "653519"
  },
  {
    "text": "again comes back around and it stops when it cannot find a match",
    "start": "653519",
    "end": "658860"
  },
  {
    "text": "so once you get into one of these reductions it's going to go reduce reduce reduce until it can no longer do",
    "start": "658860",
    "end": "664680"
  },
  {
    "text": "anything at that point it exits back out again",
    "start": "664680",
    "end": "669200"
  },
  {
    "text": "so trivial example and this is like in no way compelling so please Don't Judge",
    "start": "670700",
    "end": "676680"
  },
  {
    "text": "Too harshly the sum of an empty list is zero",
    "start": "676680",
    "end": "683040"
  },
  {
    "text": "in the sum of any other list that has a head which is H and then the tail that's",
    "start": "683040",
    "end": "688680"
  },
  {
    "text": "T is simply h plus the sum of the tail",
    "start": "688680",
    "end": "694920"
  },
  {
    "text": "yeah pretty straightforward so you could represent that in diet now",
    "start": "694920",
    "end": "702240"
  },
  {
    "text": "ignore the little housekeeping he stops right all we really care about is those bottom two lines",
    "start": "702240",
    "end": "709019"
  },
  {
    "text": "and what that's saying is that if my input is the atom sum that's just",
    "start": "709019",
    "end": "714720"
  },
  {
    "text": "basically a placeholder to say this is what I want you to do so if it's the atom sum followed by the empty list and",
    "start": "714720",
    "end": "722399"
  },
  {
    "text": "the result so far then the output from that transformation is going to be the result",
    "start": "722399",
    "end": "729899"
  },
  {
    "text": "otherwise the output from the transformation is going to be another",
    "start": "729899",
    "end": "735720"
  },
  {
    "text": "request to sum the tail of the list and the result so far is going to be the",
    "start": "735720",
    "end": "741120"
  },
  {
    "text": "result so far plus the head so this is just your normal uh",
    "start": "741120",
    "end": "746700"
  },
  {
    "text": "functional definition of sum it's recursive but you'll notice that it's",
    "start": "746700",
    "end": "753360"
  },
  {
    "text": "done purely in terms of input and output there's no actual code in the middle apart from that little result plus h",
    "start": "753360",
    "end": "760079"
  },
  {
    "text": "there and so if you give this a list of three elements the first time through is going",
    "start": "760079",
    "end": "766920"
  },
  {
    "text": "to say okay then it's going to be the head of that list and the tail is going to split it out on the last line it's",
    "start": "766920",
    "end": "772920"
  },
  {
    "text": "going to do that next time the next time and all the while it'll build up the result and then finally when the list is",
    "start": "772920",
    "end": "778680"
  },
  {
    "text": "empty it will return the result so I can run that code and to run one of",
    "start": "778680",
    "end": "787440"
  },
  {
    "text": "these reductions I have something called a stepper and all a stepper does is it",
    "start": "787440",
    "end": "792959"
  },
  {
    "text": "goes in there and it does that pattern match and produces the output and then does that over and over again until it's",
    "start": "792959",
    "end": "799380"
  },
  {
    "text": "finished so here I create a stepper and I do it on my module up there which is",
    "start": "799380",
    "end": "806760"
  },
  {
    "text": "example.list sum the nil ignore for now and so if I run my stepper on Psalm 1357",
    "start": "806760",
    "end": "815220"
  },
  {
    "text": "then I get the result 16. this is not earth-shattering you may be",
    "start": "815220",
    "end": "821160"
  },
  {
    "text": "going okay Dave why am I going to all of this extra work to do something as",
    "start": "821160",
    "end": "826200"
  },
  {
    "text": "simple as this well let's take it up a step",
    "start": "826200",
    "end": "831200"
  },
  {
    "text": "let's look at run length encoding this is where I'm going to take a sequence of values",
    "start": "832920",
    "end": "838440"
  },
  {
    "text": "and if I have two or more identical values next to each other I'm going to compress it down into one value and",
    "start": "838440",
    "end": "846120"
  },
  {
    "text": "account so this list starts with two A's so my output is going to be it's that's",
    "start": "846120",
    "end": "853440"
  },
  {
    "text": "a tuple with the braces a followed by the count which is two and then we have a b because there's",
    "start": "853440",
    "end": "858959"
  },
  {
    "text": "only one B but there's four C's so the next element is going to be the Tuple C",
    "start": "858959",
    "end": "864480"
  },
  {
    "text": "comma four and you look at that and think hey I'm a programmer that's an easy thing to do well I look at that and I say I'm a",
    "start": "864480",
    "end": "872040"
  },
  {
    "text": "programmer it must be easy if I try to do that in a regular language it's about 50 50 I'll get it wrong first time",
    "start": "872040",
    "end": "879540"
  },
  {
    "text": "and the things that go wrong are the kind of weird Edge conditions like whether or not you have the end of a",
    "start": "879540",
    "end": "886440"
  },
  {
    "text": "sequence at the end of the list and this kind of stuff it's a very good little exercise to run",
    "start": "886440",
    "end": "893940"
  },
  {
    "text": "using a conventional programming language because it's very easy to make those little off by one errors",
    "start": "893940",
    "end": "900120"
  },
  {
    "text": "but you can specify this really easily using these reductions",
    "start": "900120",
    "end": "905699"
  },
  {
    "text": "so I start off with um I pass in to my reductions the",
    "start": "905699",
    "end": "912000"
  },
  {
    "text": "command I want you to encode this list and that all that's going to do is",
    "start": "912000",
    "end": "919260"
  },
  {
    "text": "return another Tuple that says okay I need somewhere to put the result",
    "start": "919260",
    "end": "925740"
  },
  {
    "text": "so it's going to return a new Tuple that includes a space for the result that's",
    "start": "925740",
    "end": "930839"
  },
  {
    "text": "that last parameter so now we have to handle those three",
    "start": "930839",
    "end": "936839"
  },
  {
    "text": "element tuples rle list and the result so if I have a list that comes in where",
    "start": "936839",
    "end": "944760"
  },
  {
    "text": "the first two elements are the same so this is a pattern match and what happens",
    "start": "944760",
    "end": "950100"
  },
  {
    "text": "is the first time it comes across an Unbound variable which is a in this case it will bind it to the head of the list",
    "start": "950100",
    "end": "956579"
  },
  {
    "text": "at this point a has a bound value so the pattern will only match if the second",
    "start": "956579",
    "end": "962339"
  },
  {
    "text": "element of the list also equals the value in a so this will only match a",
    "start": "962339",
    "end": "968040"
  },
  {
    "text": "list where the first two elements are the same and what it does is it then replaces",
    "start": "968040",
    "end": "974880"
  },
  {
    "text": "that in the input with that Tuple of a and two",
    "start": "974880",
    "end": "981060"
  },
  {
    "text": "so if I have a list that has two identical elements then it'll be replaced by an element in the count",
    "start": "981060",
    "end": "989160"
  },
  {
    "text": "the next thing I have to think about is what happens if my list starts with one of those",
    "start": "989160",
    "end": "994620"
  },
  {
    "text": "um tuples and is followed by another value which is the same as a value in the Tuple so",
    "start": "994620",
    "end": "1002000"
  },
  {
    "text": "in this case if I have a tuple that has a and then some count and the next element is a I'm going to replace both",
    "start": "1002000",
    "end": "1008779"
  },
  {
    "text": "of those with a single element which is a n plus one I've increased the count",
    "start": "1008779",
    "end": "1015199"
  },
  {
    "text": "and then finally in other cases all I have to do is to copy the input to the output",
    "start": "1015199",
    "end": "1022579"
  },
  {
    "text": "and that takes care of everything now there's only one small issue with this that is if you run it it'll run",
    "start": "1022579",
    "end": "1029600"
  },
  {
    "text": "perfectly well but the result will be backwards it'll be reversed so you have to have one extra little",
    "start": "1029600",
    "end": "1035418"
  },
  {
    "text": "step there and that is when your list becomes empty then you have to take the result and reverse it",
    "start": "1035419",
    "end": "1041959"
  },
  {
    "text": "and if you've done any functional programming you'll guarantee have to come across situations like this where",
    "start": "1041959",
    "end": "1047240"
  },
  {
    "text": "you have to do the reverse yeah now you'll notice there isn't a single",
    "start": "1047240",
    "end": "1054020"
  },
  {
    "text": "if statement in there there isn't an explicit Loop basically there's nothing to go wrong",
    "start": "1054020",
    "end": "1061940"
  },
  {
    "text": "all you're saying is if you're given this produce that",
    "start": "1061940",
    "end": "1067280"
  },
  {
    "text": "and the cool thing about that is that I can sit here and code that I Live code",
    "start": "1067280",
    "end": "1072919"
  },
  {
    "text": "that sometimes and it always works because you can just look at it and say",
    "start": "1072919",
    "end": "1078140"
  },
  {
    "text": "yeah obviously it has to work obviously anytime I have a list that has two things the same at the front I'm",
    "start": "1078140",
    "end": "1084260"
  },
  {
    "text": "going to replace it with that Tuple it just works how do I know it terminates",
    "start": "1084260",
    "end": "1090200"
  },
  {
    "text": "because at every step it removes one element from the list",
    "start": "1090200",
    "end": "1095600"
  },
  {
    "text": "So eventually it has to terminate there's no option so in terms of code it's really really",
    "start": "1095600",
    "end": "1102440"
  },
  {
    "text": "easy to do",
    "start": "1102440",
    "end": "1106179"
  },
  {
    "text": "and so if you run that again we're going to use that stepper thing",
    "start": "1114860",
    "end": "1120080"
  },
  {
    "text": "and we feed it into a list feed into it sorry a list and it's going to go run through and do",
    "start": "1120080",
    "end": "1126679"
  },
  {
    "text": "all of those steps until it finishes and it finishes when it gets that thing that does the reverse and the result that",
    "start": "1126679",
    "end": "1133400"
  },
  {
    "text": "comes back is going to be our run length encoded list",
    "start": "1133400",
    "end": "1140200"
  },
  {
    "text": "so when I started seeing things like this I started thinking okay there's some Merit to this it's actually kind of",
    "start": "1141799",
    "end": "1147320"
  },
  {
    "text": "a nice way of programming I don't know if anybody's done any logic programming with languages like prologue",
    "start": "1147320",
    "end": "1154460"
  },
  {
    "text": "but if you have you'll recognize this kind of style of writing using these reductions",
    "start": "1154460",
    "end": "1162260"
  },
  {
    "text": "it's a very kind of it's just a natural way of thinking about programming if you can throw away your if statements it's",
    "start": "1162260",
    "end": "1168380"
  },
  {
    "text": "really good so then I said okay let's give ourselves a bigger challenge right",
    "start": "1168380",
    "end": "1175280"
  },
  {
    "text": "so is everybody familiar with the game of hangman I guess nowadays we should say hang",
    "start": "1175280",
    "end": "1180559"
  },
  {
    "text": "person um so the idea here is you have a word someone's trying to guess the guest",
    "start": "1180559",
    "end": "1186799"
  },
  {
    "text": "letters every time they get it right you show them where the letter is and every time they get it wrong you get one step",
    "start": "1186799",
    "end": "1193640"
  },
  {
    "text": "closer to death and again this is not you know rocket",
    "start": "1193640",
    "end": "1199580"
  },
  {
    "text": "science but it's non-trivial to code it up so I said how can I do this using this",
    "start": "1199580",
    "end": "1206660"
  },
  {
    "text": "style using the style of just nothing more than transformations",
    "start": "1206660",
    "end": "1211820"
  },
  {
    "text": "and to do it you have to think about state what is the state of our Hangman game",
    "start": "1211820",
    "end": "1218480"
  },
  {
    "text": "and I mean the details don't matter too much but you know that you're going to need the word that you're trying to",
    "start": "1218480",
    "end": "1225320"
  },
  {
    "text": "guess you know you're going to have to keep a track of all the letters that have already been used and you probably",
    "start": "1225320",
    "end": "1231260"
  },
  {
    "text": "have to count the number of turns that are left you also need what I call the business",
    "start": "1231260",
    "end": "1237860"
  },
  {
    "text": "logic of hangman that's basically the stuff that does all of the transformations of State",
    "start": "1237860",
    "end": "1244039"
  },
  {
    "text": "so things like I'm recording that someone has guessed the letter or I am",
    "start": "1244039",
    "end": "1249320"
  },
  {
    "text": "counting the number of turns or I'm saying have some has somebody won or not",
    "start": "1249320",
    "end": "1254840"
  },
  {
    "text": "this is all what I call business logic it belongs in the model because it's all to do with the state",
    "start": "1254840",
    "end": "1261980"
  },
  {
    "text": "and then totally separately from the model I have the transformations",
    "start": "1261980",
    "end": "1267440"
  },
  {
    "text": "and the Transformations are what drives the model so let's try and make that a bit more",
    "start": "1267440",
    "end": "1272900"
  },
  {
    "text": "concrete so here is the model at the top here I have the state so I",
    "start": "1272900",
    "end": "1278960"
  },
  {
    "text": "have word to guess guess so far and turns left those are those three things I mentioned and then I have kind of functions that",
    "start": "1278960",
    "end": "1286640"
  },
  {
    "text": "are used to manipulate that state so have I already used this letter",
    "start": "1286640",
    "end": "1291980"
  },
  {
    "text": "or recall the fact that I have used this letter is this letter in the word to be guessed etc etc and these typically are",
    "start": "1291980",
    "end": "1299419"
  },
  {
    "text": "just like little one-line functions they're not part of my overall transformation scheme they're purely to",
    "start": "1299419",
    "end": "1305360"
  },
  {
    "text": "do with a model and the cool thing about that is that when I'm doing testing or more",
    "start": "1305360",
    "end": "1311960"
  },
  {
    "text": "accurately if I'm doing testing then I can test this model totally",
    "start": "1311960",
    "end": "1318620"
  },
  {
    "text": "independently it has nothing to do with hangman all it is it's recording the state of a game",
    "start": "1318620",
    "end": "1325280"
  },
  {
    "text": "and I can use that you know anywhere I wanted to but I could definitely test it without having to go through and run a",
    "start": "1325280",
    "end": "1332240"
  },
  {
    "text": "game to test it it's purely the model",
    "start": "1332240",
    "end": "1336940"
  },
  {
    "text": "then I'm going to Define my Transformations and in this case I want my",
    "start": "1337820",
    "end": "1344120"
  },
  {
    "text": "transformations to share a model because I want that state to exist",
    "start": "1344120",
    "end": "1351140"
  },
  {
    "text": "between the turns so for each turn I'm going to go into my little transformation set and you know run",
    "start": "1351140",
    "end": "1358460"
  },
  {
    "text": "through it see what to do but at the end of it I want to maintain the state so I tell my little framework that I want to",
    "start": "1358460",
    "end": "1366440"
  },
  {
    "text": "use hangman model as the state and because I'm lazy I'm",
    "start": "1366440",
    "end": "1372500"
  },
  {
    "text": "going to call it hm so all that's doing is giving me an alias",
    "start": "1372500",
    "end": "1377780"
  },
  {
    "text": "and inside the actual reductions I'll be able to reference instances of that",
    "start": "1377780",
    "end": "1384260"
  },
  {
    "text": "state using the name game this doesn't make too much sense now but",
    "start": "1384260",
    "end": "1390140"
  },
  {
    "text": "we can have a look at some of the code or in fact that's all of the code so",
    "start": "1390140",
    "end": "1396140"
  },
  {
    "text": "we're starting off playing our game and we've already loaded the word into our state so now what's happening is the",
    "start": "1396140",
    "end": "1402980"
  },
  {
    "text": "player is making guesses so they are going to make a guess by",
    "start": "1402980",
    "end": "1408020"
  },
  {
    "text": "calling in to the reductions and say I want to make a move and they give me the letter to be",
    "start": "1408020",
    "end": "1415460"
  },
  {
    "text": "guessed so the first thing I do is I transform that input into a three element Tuple",
    "start": "1415460",
    "end": "1422360"
  },
  {
    "text": "which still has the move and the make move but it also is now going to have a Boolean to say have I already used that",
    "start": "1422360",
    "end": "1429799"
  },
  {
    "text": "letter so now we're going to try and match make",
    "start": "1429799",
    "end": "1434960"
  },
  {
    "text": "move move and then a Boolean and that next line does just that make move and",
    "start": "1434960",
    "end": "1440840"
  },
  {
    "text": "if the Boolean is true then my transformation is going to be simply to this value already tried",
    "start": "1440840",
    "end": "1447980"
  },
  {
    "text": "nothing else matches already tried here so our process is going to stop and",
    "start": "1447980",
    "end": "1453799"
  },
  {
    "text": "return already tried back to the caller",
    "start": "1453799",
    "end": "1458960"
  },
  {
    "text": "but if that's not the case now we're actually going to start recording the move and doing the actual work so we're",
    "start": "1458960",
    "end": "1466100"
  },
  {
    "text": "going to transform ourselves into record move and then the move we want to record so here record move needs to update the",
    "start": "1466100",
    "end": "1473600"
  },
  {
    "text": "model so it calls update model and then it uses this function hm newsletter that's",
    "start": "1473600",
    "end": "1480260"
  },
  {
    "text": "one of those functions that we had to find in the model and it says record that move in this",
    "start": "1480260",
    "end": "1486140"
  },
  {
    "text": "game and having updated the state we're now going to return the value maybe match",
    "start": "1486140",
    "end": "1492679"
  },
  {
    "text": "move and then maybe match move says is this in the letters to be guessed yes in",
    "start": "1492679",
    "end": "1498440"
  },
  {
    "text": "that case it's a good guess otherwise it's a bad guess etc etc",
    "start": "1498440",
    "end": "1503559"
  },
  {
    "text": "so that is the entire code for game of hangman",
    "start": "1503780",
    "end": "1509000"
  },
  {
    "text": "again no if statements no loops all it is is if this then that if this",
    "start": "1509000",
    "end": "1517940"
  },
  {
    "text": "then that it takes a different way of thinking",
    "start": "1517940",
    "end": "1526279"
  },
  {
    "text": "but if you can think that way then it's so much easier",
    "start": "1526279",
    "end": "1533059"
  },
  {
    "text": "it's a code I promise you I've been coding like where are we now",
    "start": "1533059",
    "end": "1538960"
  },
  {
    "text": "45 years or something stupid yes there were computers back then",
    "start": "1539779",
    "end": "1545480"
  },
  {
    "text": "and you know for me this is turning out to be what I've been looking for it",
    "start": "1545480",
    "end": "1552380"
  },
  {
    "text": "really does help me think about my programming goodbye",
    "start": "1552380",
    "end": "1558740"
  },
  {
    "text": "so uh we kind of talked about that let's move on so here's the interesting thing and this",
    "start": "1558740",
    "end": "1565640"
  },
  {
    "text": "is why I think functional languages are an interesting approach",
    "start": "1565640",
    "end": "1572960"
  },
  {
    "text": "to doing oo development the functional lie although nowadays",
    "start": "1572960",
    "end": "1579080"
  },
  {
    "text": "we're supposed to call it the functional fake news is that functional programming has no side effects",
    "start": "1579080",
    "end": "1586159"
  },
  {
    "text": "right you've all heard that right the big benefit of functional programming is it has no side effects",
    "start": "1586159",
    "end": "1594140"
  },
  {
    "text": "you can just call a function it lowers return the same value therefore it has no side effects",
    "start": "1594140",
    "end": "1600080"
  },
  {
    "text": "so here's a piece of functional code ignore the i o dot put us at the end",
    "start": "1600080",
    "end": "1605120"
  },
  {
    "text": "there because that clearly has a side effect but if you look at just that piece of code there is a massive massive",
    "start": "1605120",
    "end": "1611720"
  },
  {
    "text": "massive side effect that every single piece of code on the planet has",
    "start": "1611720",
    "end": "1617600"
  },
  {
    "text": "that nobody ever talks about what's the side effect",
    "start": "1617600",
    "end": "1624159"
  },
  {
    "text": "you don't have to read the code you can just cross your eyes and say there's lines of code there and as a side effect",
    "start": "1632539",
    "end": "1641019"
  },
  {
    "text": "the side effect is that the computer is executing it",
    "start": "1643760",
    "end": "1651080"
  },
  {
    "text": "and on every line of execution it updates the program counter the ex the",
    "start": "1651080",
    "end": "1656960"
  },
  {
    "text": "the instruction point or whatever you want to call it right as the program is executing the computer is going through",
    "start": "1656960",
    "end": "1663980"
  },
  {
    "text": "it code you know instruction by instruction that is a side effect",
    "start": "1663980",
    "end": "1669799"
  },
  {
    "text": "it's a massive side effect because it's the side effect that says",
    "start": "1669799",
    "end": "1675080"
  },
  {
    "text": "you can't go back in time it's the side effect that says",
    "start": "1675080",
    "end": "1681460"
  },
  {
    "text": "the state may be immutable but guess what it's the only state you've got",
    "start": "1681460",
    "end": "1687919"
  },
  {
    "text": "I can't swing my state back in time",
    "start": "1687919",
    "end": "1692200"
  },
  {
    "text": "again I think that is",
    "start": "1693380",
    "end": "1698260"
  },
  {
    "text": "that's a big cause of problems on your programming the idea of time is kind of like almost",
    "start": "1698600",
    "end": "1705440"
  },
  {
    "text": "implicit in everything we do but then it comes and bites us with things like race conditions and we have",
    "start": "1705440",
    "end": "1712340"
  },
  {
    "text": "to put semaphores and locks and this kind of stuff into our code we have to use promises to wait for results to come",
    "start": "1712340",
    "end": "1718279"
  },
  {
    "text": "along all of these kind of things are to do with time and they're always ugly",
    "start": "1718279",
    "end": "1724640"
  },
  {
    "text": "whenever you have to think of time so",
    "start": "1724640",
    "end": "1730720"
  },
  {
    "text": "like I said this laptop kind of died just before the talk I'm not 100 sure",
    "start": "1731900",
    "end": "1737299"
  },
  {
    "text": "I've got it set up correctly to do this but let me just see what happens if I try",
    "start": "1737299",
    "end": "1742400"
  },
  {
    "text": "and I need my glasses because I'm old all right",
    "start": "1742400",
    "end": "1747470"
  },
  {
    "text": "[Music] what do we have oh yeah look at that",
    "start": "1747470",
    "end": "1753220"
  },
  {
    "text": "um that needs to be bigger doesn't it so what I'm going to hear I'm inside",
    "start": "1759980",
    "end": "1767480"
  },
  {
    "text": "um The Elixir shell this is basically just a um a thing I can use from the command",
    "start": "1767480",
    "end": "1774260"
  },
  {
    "text": "line and I can type Elixir code into it so I could do like one",
    "start": "1774260",
    "end": "1779419"
  },
  {
    "text": "plus two and it says three okay so I can just execute arbitrary Elixir commands",
    "start": "1779419",
    "end": "1785419"
  },
  {
    "text": "it's like if you've used Ruby it's like IRB um so let us uh actually I don't need my",
    "start": "1785419",
    "end": "1792980"
  },
  {
    "text": "glasses because I can't see what I'm typing on the screen and that's far enough away I can see it so let's create",
    "start": "1792980",
    "end": "1798140"
  },
  {
    "text": "ourselves a new Hangman game so I'm going to say s that's my stepper equals",
    "start": "1798140",
    "end": "1805399"
  },
  {
    "text": "stepper door new and I'm going to call it on the hangman",
    "start": "1805399",
    "end": "1810620"
  },
  {
    "text": "module and let's pass in the word to guess",
    "start": "1810620",
    "end": "1818260"
  },
  {
    "text": "as wombat because wombats are the coolest marsupial",
    "start": "1818539",
    "end": "1824980"
  },
  {
    "text": "okay and what comes back is my state effectively so now",
    "start": "1825080",
    "end": "1831919"
  },
  {
    "text": "um I can start making guesses so I could say uh the result and the updated stepper",
    "start": "1831919",
    "end": "1839179"
  },
  {
    "text": "equals stepper dot run and let's make a guess of a",
    "start": "1839179",
    "end": "1847039"
  },
  {
    "text": "you know and",
    "start": "1847039",
    "end": "1852140"
  },
  {
    "text": "oh I'm sorry that shouldn't be a that should be",
    "start": "1852140",
    "end": "1857860"
  },
  {
    "text": "hey okay so wow that's a lot of stuff that",
    "start": "1860899",
    "end": "1866720"
  },
  {
    "text": "came back right we scrolled back up and I can't scroll well",
    "start": "1866720",
    "end": "1872960"
  },
  {
    "text": "all right I'm going to show you another trick",
    "start": "1875179",
    "end": "1880299"
  },
  {
    "text": "what you're looking at here is the various steps that it went through",
    "start": "1880520",
    "end": "1886520"
  },
  {
    "text": "when it was evaluating a make move for a",
    "start": "1886520",
    "end": "1891620"
  },
  {
    "text": "and that's kind of hard to read so I created a little debugger so I can say",
    "start": "1891620",
    "end": "1897220"
  },
  {
    "text": "uh diet Dot debug on and then I can do it on that",
    "start": "1897220",
    "end": "1905360"
  },
  {
    "text": "particular state and now it tells me that the diet debugger is looking at hangman",
    "start": "1905360",
    "end": "1911120"
  },
  {
    "text": "I may just shrink the font down just a little there we go if I ask for a trace of what's happened",
    "start": "1911120",
    "end": "1917600"
  },
  {
    "text": "so far then that a goes to a was my initial mistake but then you can see it's gone",
    "start": "1917600",
    "end": "1925520"
  },
  {
    "text": "through a make move on a and what that's done is the make move on a initially",
    "start": "1925520",
    "end": "1931100"
  },
  {
    "text": "says have I already used a and that comes back false so now I'm going to do a make move a false and that's going to",
    "start": "1931100",
    "end": "1937460"
  },
  {
    "text": "say I need to record the move a record the move a then goes maybe match a because it's already recorded it notice",
    "start": "1937460",
    "end": "1943880"
  },
  {
    "text": "there's a little diamond or a triangle next to a 2.3 that means that the state has been",
    "start": "1943880",
    "end": "1950960"
  },
  {
    "text": "changed and if I want to have a look at that I can just type in",
    "start": "1950960",
    "end": "1956440"
  },
  {
    "text": "2.3 and you'll see that the a there is highlighted that shows me the update to",
    "start": "1956440",
    "end": "1963260"
  },
  {
    "text": "the state so I can tell what's happened then it's look to see if there's a match",
    "start": "1963260",
    "end": "1970340"
  },
  {
    "text": "there is a match so it's going to come back with good guess so my result of",
    "start": "1970340",
    "end": "1975380"
  },
  {
    "text": "this is going to be good guess and inside the debugger I can actually",
    "start": "1975380",
    "end": "1980659"
  },
  {
    "text": "run these transitions a little bit more easily so I can say make",
    "start": "1980659",
    "end": "1986419"
  },
  {
    "text": "move B",
    "start": "1986419",
    "end": "1991360"
  },
  {
    "text": "and the result comes back good guess and if I want I can do have a look at the trace and now I have that three",
    "start": "1991460",
    "end": "1998539"
  },
  {
    "text": "series and it's going through the same series with a B so I've had a that was good I've had B",
    "start": "1998539",
    "end": "2005320"
  },
  {
    "text": "that was good so mathematics proves that c should be good as well right",
    "start": "2005320",
    "end": "2011019"
  },
  {
    "text": "so let's go back and do c oh no",
    "start": "2011019",
    "end": "2017140"
  },
  {
    "text": "it's a bad guess I hate that right because I'm perfect I",
    "start": "2017140",
    "end": "2023559"
  },
  {
    "text": "can't have a bad guess up on the screen like that I have to fix this so how do I fix this well",
    "start": "2023559",
    "end": "2029500"
  },
  {
    "text": "in most programming languages at this point I've already gone through that remember time was always going forward",
    "start": "2029500",
    "end": "2035980"
  },
  {
    "text": "my instruction counter is always going forward so I can't go back and change the past",
    "start": "2035980",
    "end": "2043419"
  },
  {
    "text": "but when you have a system like this you can so I can simply say hey Let's do",
    "start": "2043419",
    "end": "2049658"
  },
  {
    "text": "let's let's create a new history and we'll end it at 2.8",
    "start": "2049659",
    "end": "2056080"
  },
  {
    "text": "yeah and now you'll notice my prompt has changed to one that means I'm in a copy",
    "start": "2056080",
    "end": "2062980"
  },
  {
    "text": "of my history if I have a look at the trace now it finishes at 2.8 with a good",
    "start": "2062980",
    "end": "2069040"
  },
  {
    "text": "guess so now I can start making moves",
    "start": "2069040",
    "end": "2073500"
  },
  {
    "text": "so w should be good uh o should be good",
    "start": "2076359",
    "end": "2083638"
  },
  {
    "text": "M should be good with any look t",
    "start": "2084639",
    "end": "2089980"
  },
  {
    "text": "oh what am I missing",
    "start": "2089980",
    "end": "2093419"
  },
  {
    "text": "sorry Shout B oh thank you",
    "start": "2095320",
    "end": "2101279"
  },
  {
    "text": "yay game one thank you crowdsourcing a game of hangman I love it okay so here I",
    "start": "2105040",
    "end": "2110560"
  },
  {
    "text": "have my game and all the various transitions that got me to that state and if I want",
    "start": "2110560",
    "end": "2116920"
  },
  {
    "text": "to see details of what's going on I can have a look at any of these uh record moves and actually see the change so",
    "start": "2116920",
    "end": "2123400"
  },
  {
    "text": "it's 7.3 for example I can see that I added the letter b",
    "start": "2123400",
    "end": "2129760"
  },
  {
    "text": "to The Guest State yeah but this is just one history because we",
    "start": "2129760",
    "end": "2135880"
  },
  {
    "text": "no longer care about time I can switch back to zero I could have I could spell",
    "start": "2135880",
    "end": "2143400"
  },
  {
    "text": "and now I'm back in the history where I made a bad guess",
    "start": "2148599",
    "end": "2154619"
  },
  {
    "text": "because I don't care about time anymore the Practical sides of this are actually",
    "start": "2155500",
    "end": "2161380"
  },
  {
    "text": "quite amazing first of all debugging and stuff like that they get really really easy",
    "start": "2161380",
    "end": "2166780"
  },
  {
    "text": "but there's other issues say for example I have an application that takes a lot of initialization but once it gets",
    "start": "2166780",
    "end": "2172780"
  },
  {
    "text": "running it's then going to handle lots of requests so maybe taking a web a web",
    "start": "2172780",
    "end": "2178839"
  },
  {
    "text": "framework and a web server it takes a while to get up it's got to get database connections and all the rest but then it",
    "start": "2178839",
    "end": "2185740"
  },
  {
    "text": "can start taking handling requests and it'll be running five ten a hundred of these things well with this approach I",
    "start": "2185740",
    "end": "2191619"
  },
  {
    "text": "could do that initialization just once and then do my clone",
    "start": "2191619",
    "end": "2196900"
  },
  {
    "text": "and then run independent threads past that kind of cool",
    "start": "2196900",
    "end": "2204460"
  },
  {
    "text": "anyway",
    "start": "2204460",
    "end": "2206940"
  },
  {
    "text": "if I was professional I'd know the key sequences",
    "start": "2212640",
    "end": "2217440"
  },
  {
    "text": "if you do this kind of coding you can go back",
    "start": "2219099",
    "end": "2224920"
  },
  {
    "text": "you can take a history and fork",
    "start": "2224920",
    "end": "2230859"
  },
  {
    "text": "and split it into two or four or seven or whatever you want",
    "start": "2230859",
    "end": "2236980"
  },
  {
    "text": "so this kind of approach gives you a whole bunch of interesting",
    "start": "2236980",
    "end": "2242800"
  },
  {
    "text": "advantages you can get reusability down to the single line of code if you really",
    "start": "2242800",
    "end": "2247960"
  },
  {
    "text": "really want to you can have parallelism at a single",
    "start": "2247960",
    "end": "2253119"
  },
  {
    "text": "line of code so you can choose to have bits of your thing running in parallel literally",
    "start": "2253119",
    "end": "2258880"
  },
  {
    "text": "right the way down to the single line of code as we've seen I can reload not just code",
    "start": "2258880",
    "end": "2266800"
  },
  {
    "text": "but I can reload my flow through the code so I could checkpoint off where I am and",
    "start": "2266800",
    "end": "2273280"
  },
  {
    "text": "later on bring my program back to exactly the same state",
    "start": "2273280",
    "end": "2278440"
  },
  {
    "text": "and clearly if you've got all of these things we have World Peace so who needs anything more",
    "start": "2278440",
    "end": "2285040"
  },
  {
    "text": "so that's part one and that's to do with programming as",
    "start": "2285040",
    "end": "2290200"
  },
  {
    "text": "Transformations I think that's really really important",
    "start": "2290200",
    "end": "2294960"
  },
  {
    "text": "step two is to do with state how do we represent state",
    "start": "2295540",
    "end": "2302380"
  },
  {
    "text": "and to look at that we need to look at Moore's Law and everybody by now knows Moore's Law the",
    "start": "2302380",
    "end": "2308800"
  },
  {
    "text": "number of gates on a wafer silicon the the most economical number of gates",
    "start": "2308800",
    "end": "2314800"
  },
  {
    "text": "and away from a single doubles every n months it doesn't matter whether n is 18",
    "start": "2314800",
    "end": "2320380"
  },
  {
    "text": "or 24 it is still exponential growth is it true",
    "start": "2320380",
    "end": "2327280"
  },
  {
    "text": "well it certainly seems to be because if you plot the number of transistors on a slab of silicon over time and you use a",
    "start": "2327280",
    "end": "2334060"
  },
  {
    "text": "logarithmic axis then you get a really very strong fit to a straight line",
    "start": "2334060",
    "end": "2340960"
  },
  {
    "text": "it's amazing the very first microprocessor I used was a Intel 4004",
    "start": "2340960",
    "end": "2346900"
  },
  {
    "text": "and I think it's the second blob up on the left hand side there and this laptop",
    "start": "2346900",
    "end": "2353440"
  },
  {
    "text": "is like one of the cluster at the top there it has a billion transistors on",
    "start": "2353440",
    "end": "2358599"
  },
  {
    "text": "its processor I want to stop and think about that for a second because we get very blase about",
    "start": "2358599",
    "end": "2365020"
  },
  {
    "text": "this thing the processor in just about all of your",
    "start": "2365020",
    "end": "2370359"
  },
  {
    "text": "laptops has one billion transistors in it",
    "start": "2370359",
    "end": "2376800"
  },
  {
    "text": "that's a lot of transistors however Moore's Law",
    "start": "2376900",
    "end": "2383440"
  },
  {
    "text": "does not apply to precision speed you'll notice that come about boom 2005",
    "start": "2383440",
    "end": "2391240"
  },
  {
    "text": "2006 we didn't see much improvement in speed that really bummed me out because when I",
    "start": "2391240",
    "end": "2397599"
  },
  {
    "text": "started off every couple of years I could buy a new computer and it would be twice as fast as my old one sometimes",
    "start": "2397599",
    "end": "2403900"
  },
  {
    "text": "even faster and then that stopped and sometimes now I buy a new machine and",
    "start": "2403900",
    "end": "2409720"
  },
  {
    "text": "its clock speed is actually lower than my old machine and I kind of feel cheated you know",
    "start": "2409720",
    "end": "2415839"
  },
  {
    "text": "everyone says this is more powerful don't worry it's slower well it's not slower because",
    "start": "2415839",
    "end": "2423339"
  },
  {
    "text": "we get more calls so rather than having a five gigahertz processor we have four",
    "start": "2423339",
    "end": "2430240"
  },
  {
    "text": "three gigahertz processors it's not a bad trade of it but I got to wondering why that is why",
    "start": "2430240",
    "end": "2437380"
  },
  {
    "text": "is it that we've lost the increase in clock speed and instead we have more processors and so",
    "start": "2437380",
    "end": "2443920"
  },
  {
    "text": "I did a bit of digging around and it turns out that the power used by a uh basically a",
    "start": "2443920",
    "end": "2452260"
  },
  {
    "text": "slab of silicon goes up by the cube of the clock speed",
    "start": "2452260",
    "end": "2458200"
  },
  {
    "text": "now engineering can explain why it goes up by the square of the clock speed because",
    "start": "2458200",
    "end": "2464500"
  },
  {
    "text": "each of those little transistors is actually like effectively a mosfet gate it's a capacitor and if you've done any",
    "start": "2464500",
    "end": "2470740"
  },
  {
    "text": "Electronics you know the capacitors charge really quickly to start with but then get slower and slower and slower",
    "start": "2470740",
    "end": "2476500"
  },
  {
    "text": "so to switch a capacitor quickly you have to apply a higher voltage to it",
    "start": "2476500",
    "end": "2482020"
  },
  {
    "text": "and so you increase the voltage to increase the speed and power consumption goes up as the square of the voltage",
    "start": "2482020",
    "end": "2488980"
  },
  {
    "text": "the other term though that takes it from a square to a cube is kind of a lot of",
    "start": "2488980",
    "end": "2494200"
  },
  {
    "text": "hand waving because as you make these circuits smaller and smaller you start getting",
    "start": "2494200",
    "end": "2499960"
  },
  {
    "text": "secondary effects like the interconnects between the gates get so thin that you actually have problems with getting",
    "start": "2499960",
    "end": "2506560"
  },
  {
    "text": "electrons down them right so you have effectively increased resistance and that burns up power",
    "start": "2506560",
    "end": "2512079"
  },
  {
    "text": "you get Quantum tunneling between the gates because they're so close together",
    "start": "2512079",
    "end": "2517300"
  },
  {
    "text": "and that uses up power and there's all these other effects so this Cube thing is not a scientific formula it's purely",
    "start": "2517300",
    "end": "2524740"
  },
  {
    "text": "empirical but it seems to work so here's the cool part you take a",
    "start": "2524740",
    "end": "2531820"
  },
  {
    "text": "a processor and you increase its speed by just 10 does anybody here built a gaming",
    "start": "2531820",
    "end": "2538540"
  },
  {
    "text": "computer yeah Fred yeah okay and do you overclock it",
    "start": "2538540",
    "end": "2544240"
  },
  {
    "text": "yeah you overclock it too and what's your big worry when you overclock it",
    "start": "2544240",
    "end": "2549640"
  },
  {
    "text": "heat heat okay why why is heat such a big deal well",
    "start": "2549640",
    "end": "2555760"
  },
  {
    "text": "take a processor and overclock it by 10 percent it's power consumption is going to go up",
    "start": "2555760",
    "end": "2561579"
  },
  {
    "text": "by 1.1 cubed which is effectively 1.3 which means that your power consumption",
    "start": "2561579",
    "end": "2569440"
  },
  {
    "text": "is going up 33 and what is the end result of power consumption",
    "start": "2569440",
    "end": "2575320"
  },
  {
    "text": "Heat and so a mere 10 increase means that",
    "start": "2575320",
    "end": "2582220"
  },
  {
    "text": "your processor is going to be running 33 hotter my son's built a",
    "start": "2582220",
    "end": "2588579"
  },
  {
    "text": "um uh gaming computer and they the chip on it is maybe I don't know that square",
    "start": "2588579",
    "end": "2595720"
  },
  {
    "text": "right the heatsink is the size of a toaster I mean literally it's about that",
    "start": "2595720",
    "end": "2601240"
  },
  {
    "text": "by that it has four fans it has all sorts of unbelievable just to keep the",
    "start": "2601240",
    "end": "2607119"
  },
  {
    "text": "thing cool so heat is the enemy of processors",
    "start": "2607119",
    "end": "2614700"
  },
  {
    "text": "it's also the enemy of polar bears because all that heat we're generating",
    "start": "2615160",
    "end": "2620920"
  },
  {
    "text": "is going somewhere in the United States data centers use about three percent of the power of the",
    "start": "2620920",
    "end": "2628720"
  },
  {
    "text": "country so when we say oh just throw Hardware at",
    "start": "2628720",
    "end": "2636579"
  },
  {
    "text": "it what we're really doing is taking ice out from underneath that polar bear",
    "start": "2636579",
    "end": "2642838"
  },
  {
    "text": "so this is why we use multi-cools because we can do the same thing backwards we'll take a processor and",
    "start": "2643720",
    "end": "2649240"
  },
  {
    "text": "we'll reduce it down to 70 percent if it's clock speed so if it's currently running at one gigahertz we'll run it at",
    "start": "2649240",
    "end": "2656140"
  },
  {
    "text": "700 megahertz so now what happens to its power well the power drops to 0.7 cubed which",
    "start": "2656140",
    "end": "2663040"
  },
  {
    "text": "is 34 of what it used to take so now I can run three of these",
    "start": "2663040",
    "end": "2671460"
  },
  {
    "text": "and I will have 3 times 70 so I'll have 210 percent of my initial processing",
    "start": "2673720",
    "end": "2680619"
  },
  {
    "text": "power for exactly the same Heat that's why we do multi-core",
    "start": "2680619",
    "end": "2688240"
  },
  {
    "text": "because I can use I can get more and more processor sorry more and more",
    "start": "2688240",
    "end": "2694599"
  },
  {
    "text": "yeah instructions per second across more processors and not use any more power",
    "start": "2694599",
    "end": "2701200"
  },
  {
    "text": "and to me that's that's a magical thing to be able to do",
    "start": "2701200",
    "end": "2706500"
  },
  {
    "text": "speak to me ah this is going to be a fun time him",
    "start": "2708099",
    "end": "2715019"
  },
  {
    "text": "there we go Maybe",
    "start": "2717040",
    "end": "2722280"
  },
  {
    "text": "the problem is that in order to be effective we actually have to use those processors if you've got a 16 core machine that's",
    "start": "2724240",
    "end": "2732160"
  },
  {
    "text": "running at one gigahertz then you don't have a 16 gigahertz machine you have 16 one gigahertz",
    "start": "2732160",
    "end": "2738640"
  },
  {
    "text": "machines and as a result unless you're actually using all of those cores you're not going to be getting the most out of all",
    "start": "2738640",
    "end": "2744700"
  },
  {
    "text": "this expensive Hardware and because of that I can guarantee you that our future is going to be parallel",
    "start": "2744700",
    "end": "2751960"
  },
  {
    "text": "and because it's parallel it's going to be concurrent right if you're not currently writing",
    "start": "2751960",
    "end": "2757599"
  },
  {
    "text": "parallel code then you are not currently using the computer to its best advantage",
    "start": "2757599",
    "end": "2766300"
  },
  {
    "text": "now the interesting thing is that erlang developers have been doing this",
    "start": "2766300",
    "end": "2772000"
  },
  {
    "text": "since 1986 seven something like that",
    "start": "2772000",
    "end": "2777579"
  },
  {
    "text": "they have been writing parallel code initially on single processor machines",
    "start": "2777579",
    "end": "2785380"
  },
  {
    "text": "but they've been doing it because it makes a lot of sense in their particular environment they wanted to be able to",
    "start": "2785380",
    "end": "2791920"
  },
  {
    "text": "grow an incredibly efficient code on some complicated hardware and they wanted it to be incredibly reliable",
    "start": "2791920",
    "end": "2799420"
  },
  {
    "text": "so they wanted to be able to use multiple processes not operating system processes but their own processes way",
    "start": "2799420",
    "end": "2806740"
  },
  {
    "text": "way faster right you can create an airline process in a matter of microseconds",
    "start": "2806740",
    "end": "2812079"
  },
  {
    "text": "they use a couple of K of memory each you compare that to the operating system it's at least two orders of magnitude",
    "start": "2812079",
    "end": "2819099"
  },
  {
    "text": "better in both directions so erlang has had this capability for a",
    "start": "2819099",
    "end": "2826119"
  },
  {
    "text": "long time the trouble is no one uses erlang and why because it is a",
    "start": "2826119",
    "end": "2831940"
  },
  {
    "text": "ugly language to use right this is if you ask emacs to create a skeleton gen",
    "start": "2831940",
    "end": "2839440"
  },
  {
    "text": "server which is kind of like the specification of one of these processes it looks like this",
    "start": "2839440",
    "end": "2845319"
  },
  {
    "text": "without any of your code at all there are I think it's 129 lines of code in",
    "start": "2845319",
    "end": "2853060"
  },
  {
    "text": "there just boilerplate I know admittedly a lot of its comments but it's still",
    "start": "2853060",
    "end": "2858579"
  },
  {
    "text": "boilerplate and that's puts people off even if you strip out all the boilerplate and just",
    "start": "2858579",
    "end": "2865839"
  },
  {
    "text": "write a simple server that generate that implements a stack so it has push and pop operations",
    "start": "2865839",
    "end": "2872740"
  },
  {
    "text": "it's still that long which is ridiculous and again it puts",
    "start": "2872740",
    "end": "2879099"
  },
  {
    "text": "people off so Elixir is a programming language that",
    "start": "2879099",
    "end": "2886180"
  },
  {
    "text": "runs on top of the same virtual machine that erlang uses so in the same way that",
    "start": "2886180",
    "end": "2891579"
  },
  {
    "text": "Java has the jvm uh Elixir erlang has something called the beam",
    "start": "2891579",
    "end": "2897359"
  },
  {
    "text": "and elixir runs on top of the beam and in the same way that any language on the",
    "start": "2897359",
    "end": "2902920"
  },
  {
    "text": "jvm can call into for example Java libraries then Elixir can take advantage",
    "start": "2902920",
    "end": "2908859"
  },
  {
    "text": "of the 30 years worth of erlang libraries it's a very deep set of libraries",
    "start": "2908859",
    "end": "2917380"
  },
  {
    "text": "so when I looked at this I said there must be a simpler way",
    "start": "2917380",
    "end": "2923020"
  },
  {
    "text": "and so that's the second part of this little exercise I wrote a thing called Jeeves",
    "start": "2923020",
    "end": "2929319"
  },
  {
    "text": "and Jeeves because it like helps you make servants and that is the implementation of a",
    "start": "2929319",
    "end": "2936700"
  },
  {
    "text": "server that implements a stack what happens is that because in Elixir",
    "start": "2936700",
    "end": "2942760"
  },
  {
    "text": "the entire language is basically meta programmed so things like def to define",
    "start": "2942760",
    "end": "2947859"
  },
  {
    "text": "a function is not actually syntax it's simply a macro so my code can actually override that",
    "start": "2947859",
    "end": "2954339"
  },
  {
    "text": "and re-implement Def so it works it looks through this code and says Ah okay you want to export",
    "start": "2954339",
    "end": "2960760"
  },
  {
    "text": "these two functions and it converts that effectively into this",
    "start": "2960760",
    "end": "2967540"
  },
  {
    "text": "all right so by doing that I've it's a lot simpler to write these",
    "start": "2967540",
    "end": "2973960"
  },
  {
    "text": "single servers and to call that I've got some conventions as well so if",
    "start": "2973960",
    "end": "2980020"
  },
  {
    "text": "I want to create a new stack that has initially just a value end in it I can say stack.new end then I can do",
    "start": "2980020",
    "end": "2986619"
  },
  {
    "text": "stack.push open close and I can do a pop so at this point",
    "start": "2986619",
    "end": "2993460"
  },
  {
    "text": "do you notice any similarity with another programming paradigm",
    "start": "2993460",
    "end": "2999299"
  },
  {
    "text": "this could be python code or it could be any other object-oriented",
    "start": "3000060",
    "end": "3006960"
  },
  {
    "text": "language I'm doing stack.new instead of creating an object I'm creating a process",
    "start": "3006960",
    "end": "3014099"
  },
  {
    "text": "and then I'm interacting with that object by passing it messages",
    "start": "3014099",
    "end": "3019880"
  },
  {
    "text": "here I can create a named service so again it's a background process but this",
    "start": "3024660",
    "end": "3030359"
  },
  {
    "text": "time I can access it by name and in that case I can just say say here's a Twitter",
    "start": "3030359",
    "end": "3035579"
  },
  {
    "text": "feed Handler I can just run my Twitter feed and then go and just call it",
    "start": "3035579",
    "end": "3040800"
  },
  {
    "text": "Twitter feed.fetch Twitter feed.fetch and that's just going to go and call that single process to do the fetching",
    "start": "3040800",
    "end": "3048119"
  },
  {
    "text": "now maybe I want to get some parallelism in here so if I just change that one word there named",
    "start": "3048119",
    "end": "3055380"
  },
  {
    "text": "changed pool and now it's going to create a pool of these Twitter feed",
    "start": "3055380",
    "end": "3060420"
  },
  {
    "text": "processes and I can do things in parallel and it's automatically going to handle load balancing to them and everything",
    "start": "3060420",
    "end": "3066180"
  },
  {
    "text": "else so what I have here",
    "start": "3066180",
    "end": "3073400"
  },
  {
    "text": "is servers and each server manages its own state",
    "start": "3075660",
    "end": "3082920"
  },
  {
    "text": "and the only way of interacting with that server is by sending it messages and receiving messages back in reply",
    "start": "3082920",
    "end": "3092099"
  },
  {
    "text": "and if you go back and you read um",
    "start": "3092099",
    "end": "3096859"
  },
  {
    "text": "about pure object origin languages and particularly if you read about small talk",
    "start": "3098339",
    "end": "3104040"
  },
  {
    "text": "Alan K talks about the essence of object orientation it's not classes it's not",
    "start": "3104040",
    "end": "3111599"
  },
  {
    "text": "objects it's message passing right he emphasizes over and over again",
    "start": "3111599",
    "end": "3118500"
  },
  {
    "text": "the most important thing is that objects pass messages to each",
    "start": "3118500",
    "end": "3124200"
  },
  {
    "text": "other because if you can constrain that to be the only interaction between your",
    "start": "3124200",
    "end": "3129900"
  },
  {
    "text": "objects you guarantee that there is no coupling between those objects there's no shared state",
    "start": "3129900",
    "end": "3137160"
  },
  {
    "text": "it's pure and this model is exactly that the only",
    "start": "3137160",
    "end": "3143160"
  },
  {
    "text": "way to talk between these objects these independent servers is by sending messages",
    "start": "3143160",
    "end": "3149700"
  },
  {
    "text": "it is the purest form of oo that we have and it's done in a functional language",
    "start": "3149700",
    "end": "3158220"
  },
  {
    "text": "but it's also done in such a way that you can write parallel code automatically because in small talk when",
    "start": "3158220",
    "end": "3165119"
  },
  {
    "text": "they talk about messages they're really talking about kind of like an abstraction of message right this is",
    "start": "3165119",
    "end": "3170640"
  },
  {
    "text": "kind of like think of it as a message in Elixir and erlang it is a message it",
    "start": "3170640",
    "end": "3176940"
  },
  {
    "text": "is an inter-process message it's first you measure the time taken in",
    "start": "3176940",
    "end": "3183660"
  },
  {
    "text": "nanoseconds but it's still an inter-process message so this is pure oh",
    "start": "3183660",
    "end": "3191480"
  },
  {
    "text": "so we have state held in our service we know that we can write our program",
    "start": "3192300",
    "end": "3198980"
  },
  {
    "text": "using transformations and those Transformations are invoked by",
    "start": "3198980",
    "end": "3206520"
  },
  {
    "text": "message handling by Patent matches by message handling so what we end up with is we have our",
    "start": "3206520",
    "end": "3213480"
  },
  {
    "text": "state we have our Transformations and so we have objects",
    "start": "3213480",
    "end": "3218700"
  },
  {
    "text": "and the cool thing about this is that over the last 20 30 years we've learned a lot about how to program using objects",
    "start": "3218700",
    "end": "3228059"
  },
  {
    "text": "we have a whole bunch of rules that make it not rules as the you know suggestions on how to structure our code",
    "start": "3228059",
    "end": "3235559"
  },
  {
    "text": "well using objects one of the key ones in this context and I think one of the",
    "start": "3235559",
    "end": "3241680"
  },
  {
    "text": "drivers in this context is the single responsibility principle okay where a class should only have one",
    "start": "3241680",
    "end": "3249000"
  },
  {
    "text": "reason to change same thing here a server should only have one reason to change",
    "start": "3249000",
    "end": "3254520"
  },
  {
    "text": "so all of these things we know we can start applying here except design pens because design",
    "start": "3254520",
    "end": "3260760"
  },
  {
    "text": "patterns are crap but apart from that everything we know we can apply here so",
    "start": "3260760",
    "end": "3266099"
  },
  {
    "text": "now we can do object orientation but in the modern world",
    "start": "3266099",
    "end": "3271680"
  },
  {
    "text": "and we can do it better than we've ever done before",
    "start": "3271680",
    "end": "3276740"
  },
  {
    "text": "so this is really the purest form of oo where an object is a running process and",
    "start": "3276780",
    "end": "3283020"
  },
  {
    "text": "objects communicate only by messages and what I take away from this",
    "start": "3283020",
    "end": "3289619"
  },
  {
    "text": "it's something as an industry we do really poorly we need to start learning from the past",
    "start": "3289619",
    "end": "3296819"
  },
  {
    "text": "we need to look backwards at where we've come from and say okay how can we apply this erlang is way older than Java right",
    "start": "3296819",
    "end": "3304619"
  },
  {
    "text": "but people dismiss it as oh it's a good language for writing telephone switches or something look back and say what can",
    "start": "3304619",
    "end": "3311640"
  },
  {
    "text": "I learn from this how can I apply it now don't worship what you see just learn",
    "start": "3311640",
    "end": "3317160"
  },
  {
    "text": "from it because that way you can synthesize the best of that and the best of now",
    "start": "3317160",
    "end": "3323940"
  },
  {
    "text": "and of course the most important thing to do when you're programming is you always have to remember to have fun",
    "start": "3323940",
    "end": "3330000"
  },
  {
    "text": "so with that I am done thank you",
    "start": "3330000",
    "end": "3334400"
  },
  {
    "text": "okay",
    "start": "3335760",
    "end": "3337880"
  }
]