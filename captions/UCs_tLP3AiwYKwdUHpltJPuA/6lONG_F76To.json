[
  {
    "text": "[Music] hello everyone thank you all for coming",
    "start": "6990",
    "end": "14340"
  },
  {
    "text": "on this final session at goatee I hope you guys have had a a good conference",
    "start": "14340",
    "end": "19949"
  },
  {
    "text": "I've certainly enjoyed it so today we're going to be talking about two subjects",
    "start": "19949",
    "end": "25680"
  },
  {
    "text": "which I I find pretty interesting which is concepts of services mic receivers",
    "start": "25680",
    "end": "31410"
  },
  {
    "text": "which this whole tracks about and then this concept of stream processing and particularly actually around this this",
    "start": "31410",
    "end": "38399"
  },
  {
    "text": "idea of a retentive log so my name is Ben Stopford you can get me on Twitter there and I work at this company called",
    "start": "38399",
    "end": "45539"
  },
  {
    "text": "confluent anyone heard a confluent a few anyone heard of apache kafka got a lot",
    "start": "45539",
    "end": "53280"
  },
  {
    "text": "more from that okay cool so this is this is the company that runs it was set up by the original authors of Kafka so we",
    "start": "53280",
    "end": "61230"
  },
  {
    "text": "sort of provide services around it and I'm work as an engineer why I should do",
    "start": "61230",
    "end": "66420"
  },
  {
    "text": "a few things have a slightly strange role I do a little bit of this this kind of talking stuff and I work primarily as",
    "start": "66420",
    "end": "73710"
  },
  {
    "text": "an engineer on the distributed log part there's a few different parts of Kafka a",
    "start": "73710",
    "end": "78770"
  },
  {
    "text": "man used to work at thought works and a few other companies in the UK so yes",
    "start": "78770",
    "end": "85020"
  },
  {
    "text": "just talking you thinking about Mike reservas there's been a really good set of talks so far where we've looked at",
    "start": "85020",
    "end": "92100"
  },
  {
    "text": "event-driven approaches and we've looked at requests driven approaches and we're",
    "start": "92100",
    "end": "97320"
  },
  {
    "text": "gonna think of it a little bit about how these things kind of pan out over time particularly from a kind of",
    "start": "97320",
    "end": "103320"
  },
  {
    "text": "architectural perspective so microservices people like slightly",
    "start": "103320",
    "end": "108540"
  },
  {
    "text": "polarizing in terms of what people think of them and there's a good reason for",
    "start": "108540",
    "end": "113579"
  },
  {
    "text": "this they can go very wrong which has been talks about that too so for a lot",
    "start": "113579",
    "end": "119310"
  },
  {
    "text": "of people they're about splitting the monolith so spreading the monolith is",
    "start": "119310",
    "end": "124490"
  },
  {
    "text": "important as no idea simply because you're probably gonna start with a monolith right if you're sensible you",
    "start": "124490",
    "end": "130200"
  },
  {
    "text": "will start with the monolith if you're trying to get something delivers for your business if you quite often want to extend that",
    "start": "130200",
    "end": "135680"
  },
  {
    "text": "so I think Randy Shoop did quite and had a quite a nice quote on this which is if",
    "start": "135680",
    "end": "142140"
  },
  {
    "text": "you're if you don't regret the architectural decisions that you made previously then you're probably over",
    "start": "142140",
    "end": "148830"
  },
  {
    "text": "engineering and I think that's very true but this idea of just splitting a modulus isn't really what mike reverses",
    "start": "148830",
    "end": "155010"
  },
  {
    "text": "are about from my perspective for me it's really about this idea of autonomy so autonomy it's a little slightly",
    "start": "155010",
    "end": "162090"
  },
  {
    "text": "abstract concept but what it really means is that each service evolves",
    "start": "162090",
    "end": "168330"
  },
  {
    "text": "independently that's to say it is its own master and having a sense of",
    "start": "168330",
    "end": "174840"
  },
  {
    "text": "Independence allows us to basically spread an application across many",
    "start": "174840",
    "end": "180959"
  },
  {
    "text": "different teams so that they can all move independently so its independence",
    "start": "180959",
    "end": "187650"
  },
  {
    "text": "this concept of independence particularly around code bases release process etc which really kind of give",
    "start": "187650",
    "end": "193860"
  },
  {
    "text": "services their value and it allows them to scale so when we say scale I don't",
    "start": "193860",
    "end": "199709"
  },
  {
    "text": "really mean from the from the perspective of petabytes of data or",
    "start": "199709",
    "end": "205400"
  },
  {
    "text": "billions of users or whatever I really mean scaling from the perspective of people terms like scaling your",
    "start": "205400",
    "end": "212790"
  },
  {
    "text": "organization as it grows because that's actually one of the most challenging parts I mean we'll be talking about Kafka and K streams a bit in this talk",
    "start": "212790",
    "end": "220200"
  },
  {
    "text": "and these are technologies that really can deal with scale in the sort of traditional sense but actually one of",
    "start": "220200",
    "end": "226799"
  },
  {
    "text": "the harder problems is scaling in people terms I mean if we think about scaling a",
    "start": "226799",
    "end": "233459"
  },
  {
    "text": "monolith we have many examples from the pinup companies like Facebook through to",
    "start": "233459",
    "end": "240780"
  },
  {
    "text": "many other smaller examples I think where this is a difficult thing to do what happens as we grow but in fact all",
    "start": "240780",
    "end": "251040"
  },
  {
    "text": "companies are to some extent collections of applications if you look at any",
    "start": "251040",
    "end": "257039"
  },
  {
    "text": "company over maybe a thousand people you'll find there's a whole bunch of different applications that have to connect together in order to progress",
    "start": "257039",
    "end": "263610"
  },
  {
    "text": "some kind of business goal and typically we'll do this with something like enterprise messaging or",
    "start": "263610",
    "end": "269440"
  },
  {
    "text": "FTP file transfers these applications will kind of talk to one another but it's often an afterthought it's often",
    "start": "269440",
    "end": "274750"
  },
  {
    "text": "just something that we kind of bolted on the end in an attempt to kind of make this thing work if we think about micro",
    "start": "274750",
    "end": "282400"
  },
  {
    "text": "services or SOA which is sort of similar certainly historically very similar patterns they're really about this idea",
    "start": "282400",
    "end": "288669"
  },
  {
    "text": "of reacting for a multi-team architectures architectures where each",
    "start": "288669",
    "end": "293800"
  },
  {
    "text": "service can actually have a degree of independence so Pat Helen's wrote a",
    "start": "293800",
    "end": "299410"
  },
  {
    "text": "really interesting paper about it's entitled data on the inside and or data",
    "start": "299410",
    "end": "304900"
  },
  {
    "text": "on the outside anyone read it no there's a reference to it at the end and I would really encourage it it's great paper but",
    "start": "304900",
    "end": "311889"
  },
  {
    "text": "he talks about thinking about services in terms of the data that they hold inside them inside the service itself",
    "start": "311889",
    "end": "318790"
  },
  {
    "text": "and the data that they expose and really one of the things that we have to think about when we move to a service based",
    "start": "318790",
    "end": "326200"
  },
  {
    "text": "approach it's actually the data that we share with other services it seems kind of obvious but actually we're not",
    "start": "326200",
    "end": "331900"
  },
  {
    "text": "typically that good at dealing with this problem so this external world the world that sits outside a service and particularly",
    "start": "331900",
    "end": "338080"
  },
  {
    "text": "the data that exists within it is something that we really should design for so this idea of our independence",
    "start": "338080",
    "end": "346720"
  },
  {
    "text": "this idea of keeping service didn't amendment comes at a cost if we think",
    "start": "346720",
    "end": "352750"
  },
  {
    "text": "about it from an oo perspective we've all been taught about the concepts of encapsulation probably had you've",
    "start": "352750",
    "end": "358539"
  },
  {
    "text": "probably learned about Parnassus at university or learned object-oriented modeling as you kind of grew up and we",
    "start": "358539",
    "end": "365770"
  },
  {
    "text": "know that if we have an object's it contains States and behavior so here we have an always orders objects on the",
    "start": "365770",
    "end": "372070"
  },
  {
    "text": "left and a statement objects on the right and we know that we will encapsulate our state and our behavior",
    "start": "372070",
    "end": "378100"
  },
  {
    "text": "behind a nice clean interface this gives us loose coupling something which allows us to change this is just this is a sort",
    "start": "378100",
    "end": "386050"
  },
  {
    "text": "of relatively intuitive thing to do now if we use if we do this into a monolithic application it's pretty easy",
    "start": "386050",
    "end": "392530"
  },
  {
    "text": "to get releases out so let's say let's say we have a requirement from the business and it involves changing both",
    "start": "392530",
    "end": "399159"
  },
  {
    "text": "sides of an interface we can put those changes in we can implement those JIRA's or",
    "start": "399159",
    "end": "404979"
  },
  {
    "text": "however we however we go about implementing our requirements and we can deploy the whole thing together and it's",
    "start": "404979",
    "end": "411490"
  },
  {
    "text": "pretty easy if we have the same problem in a distributed world where different",
    "start": "411490",
    "end": "418810"
  },
  {
    "text": "teams run different services it's a little bit more tricky because if we have a change which cross cut several",
    "start": "418810",
    "end": "424419"
  },
  {
    "text": "set across cuts to services we have to kind of think ranae's the releases of these of these code changes so that it",
    "start": "424419",
    "end": "431770"
  },
  {
    "text": "all works harmoniously together so a synchronization problem is a little bit",
    "start": "431770",
    "end": "437529"
  },
  {
    "text": "painful so services work best where requirements",
    "start": "437529",
    "end": "443879"
  },
  {
    "text": "change is isolated to a single bounded context let's take an example of that",
    "start": "443879",
    "end": "451060"
  },
  {
    "text": "imagine something like single sign-on this is like a really good service example it has a very simple interface",
    "start": "451060",
    "end": "457270"
  },
  {
    "text": "right authorites and the key point here is that it's really unlikely no matter",
    "start": "457270",
    "end": "464169"
  },
  {
    "text": "what change happens to it in in terms of our business requirements for a variety",
    "start": "464169",
    "end": "469719"
  },
  {
    "text": "of different services sorry unlike you that any of them are going to affect this single sign-on interface it exists",
    "start": "469719",
    "end": "476289"
  },
  {
    "text": "in a tightly bounded context a little world unto itself but business services",
    "start": "476289",
    "end": "482159"
  },
  {
    "text": "services that we actually build and change on a day to day basis these are a",
    "start": "482159",
    "end": "487870"
  },
  {
    "text": "bit different so to take a kind of example from online retail if we had a",
    "start": "487870",
    "end": "495300"
  },
  {
    "text": "data set of customers that data set of orders a data set of the product catalog these will lightly proliferate into many",
    "start": "495300",
    "end": "503770"
  },
  {
    "text": "of our different services these are effectively caught shared called core data sets so they're just much more",
    "start": "503770",
    "end": "512260"
  },
  {
    "text": "there's much more intertwined authorization sits over over over here and tightly bounded context so the point",
    "start": "512260",
    "end": "520539"
  },
  {
    "text": "is is that the futures the future of business services end up being far more",
    "start": "520539",
    "end": "525730"
  },
  {
    "text": "tightly intertwined simply because they have these shared data sets that flow",
    "start": "525730",
    "end": "531010"
  },
  {
    "text": "and proliferate through different services so we need this idea of encapsulation",
    "start": "531010",
    "end": "539110"
  },
  {
    "text": "which we all understand intuitively so that we can hide our internal state and",
    "start": "539110",
    "end": "544780"
  },
  {
    "text": "remain loosely coupled but we also kind of need this ability to slice and dice",
    "start": "544780",
    "end": "550180"
  },
  {
    "text": "the share datasets we need to better get access to them to write new services etc and these two forces kind of compete",
    "start": "550180",
    "end": "558310"
  },
  {
    "text": "against one another in the services that we build and the rub is essentially that",
    "start": "558310",
    "end": "563590"
  },
  {
    "text": "data systems databases Hadoop clusters whichever one you want to pick they have",
    "start": "563590",
    "end": "570070"
  },
  {
    "text": "a little to do it with encapsulation in fact quite the opposite databases which",
    "start": "570070",
    "end": "577540"
  },
  {
    "text": "are wonderful pieces of technology and they wonder are wonderful pieces of technology because they contort the data",
    "start": "577540",
    "end": "585850"
  },
  {
    "text": "that they hold into a whole variety of different shapes and sizes so if we think about a service we have an",
    "start": "585850",
    "end": "593290"
  },
  {
    "text": "interface which hides the data on the inside so this nought there's less data on the outside and there is data on the",
    "start": "593290",
    "end": "599530"
  },
  {
    "text": "inside whereas databases have this massive amplifying interface that allows",
    "start": "599530",
    "end": "604600"
  },
  {
    "text": "you to contort the data that they hold into a whole variety of different shapes and sizes",
    "start": "604600",
    "end": "610139"
  },
  {
    "text": "this leads this kind of idea of this data diet dichotomy so data systems are",
    "start": "610500",
    "end": "616480"
  },
  {
    "text": "really about this idea of exposing data allowing you to iterate quickly and get your work done the services are really",
    "start": "616480",
    "end": "622690"
  },
  {
    "text": "about the idea of encapsulation the antithesis of that hiding data from",
    "start": "622690",
    "end": "628090"
  },
  {
    "text": "other people from other services so that we can protect ourselves against future change so who's heard this said",
    "start": "628090",
    "end": "639330"
  },
  {
    "text": "microservices shouldn't share a database probably quite a few I would imagine sami newman talks about this a lot",
    "start": "639330",
    "end": "646330"
  },
  {
    "text": "matter of fact he basically wrote a whole book on it this is good advice and it's good advice for that real reason",
    "start": "646330",
    "end": "654690"
  },
  {
    "text": "databases form one of the one of the richest forms of coupling they have an amplifying interface and they also",
    "start": "654690",
    "end": "661660"
  },
  {
    "text": "represent shared mutable state we all know as programmers that we've been trying to get rid of shared mutable",
    "start": "661660",
    "end": "667330"
  },
  {
    "text": "state from our from our programs for many years so this is good advice but",
    "start": "667330",
    "end": "673300"
  },
  {
    "text": "what so what do we do instead for independently import deployable applications well one thing we do is we",
    "start": "673300",
    "end": "679960"
  },
  {
    "text": "temp we typically wrap our database in a service interface of some description so",
    "start": "679960",
    "end": "686620"
  },
  {
    "text": "we have that data on the outside that's nice and combined and this data on the inside and we cleverly create this interface that's nice and clean and",
    "start": "686620",
    "end": "692890"
  },
  {
    "text": "everything looks rosy so what happens when we when we release these things",
    "start": "692890",
    "end": "698650"
  },
  {
    "text": "into production and we let them evolve a bit over time so typically you get kind",
    "start": "698650",
    "end": "704650"
  },
  {
    "text": "of one of two eventualities and hopefully these will these things will resonate with you somewhat so the first",
    "start": "704650",
    "end": "712420"
  },
  {
    "text": "one is that we cannot just end up growing the interface over time so you",
    "start": "712420",
    "end": "719050"
  },
  {
    "text": "might be adding a variety of different parameters onto the end of this interface so that we can kind of get",
    "start": "719050",
    "end": "725350"
  },
  {
    "text": "more precise data out of our data service and this data sets on the",
    "start": "725350",
    "end": "732070"
  },
  {
    "text": "outside slowly grows over time all",
    "start": "732070",
    "end": "737170"
  },
  {
    "text": "alternative maybe we just add more and more methods right so we I'll start off with get or but get order and then we",
    "start": "737170",
    "end": "743020"
  },
  {
    "text": "have get ordered by user ID and then we get get orders unfulfilled by ID and you",
    "start": "743020",
    "end": "749500"
  },
  {
    "text": "know two years later you look at your service interface and it's got like 50 different methods all doing really weird",
    "start": "749500",
    "end": "755140"
  },
  {
    "text": "like kooky little things and you start to wonder if you should have just implemented a declarative language so",
    "start": "755140",
    "end": "762940"
  },
  {
    "text": "this is kind of one way that things kind of go wrong and actually as your datasets grow these problems compounds",
    "start": "762940",
    "end": "769270"
  },
  {
    "text": "these data services which have to serve as many different other services have to have to deal with larger volume that",
    "start": "769270",
    "end": "775450"
  },
  {
    "text": "volume that means they have to be more specific in terms of the way that they slice and dice data it means that they",
    "start": "775450",
    "end": "780760"
  },
  {
    "text": "have more data to vend they have scaling issues so that's kind of option one",
    "start": "780760",
    "end": "787630"
  },
  {
    "text": "option one is we just kind of end up growing this interface over time being very specific about the data that we've",
    "start": "787630",
    "end": "792670"
  },
  {
    "text": "end option two is that we just give up and we just move the",
    "start": "792670",
    "end": "797870"
  },
  {
    "text": "whole dataset so in this case we might have a method get all open orders where",
    "start": "797870",
    "end": "804230"
  },
  {
    "text": "we just hold this service the order service pull all of the open orders and we just keep them locally in a database",
    "start": "804230",
    "end": "810080"
  },
  {
    "text": "we might also do this with a messaging system and this gives us a couple of advantages firstly it allows us to",
    "start": "810080",
    "end": "818570"
  },
  {
    "text": "perform joins and it allows us to kind of iterate quickly on the data sets that we've got but it actually leads to a",
    "start": "818570",
    "end": "826940"
  },
  {
    "text": "different problem if we go down this approach and this is actually really been Tobias messaging problem and that's",
    "start": "826940",
    "end": "832850"
  },
  {
    "text": "that we end up with many many mutable copies in all the different services around our organization and these things",
    "start": "832850",
    "end": "839839"
  },
  {
    "text": "diverge over time and one of the reasons that this becomes really tricky is this",
    "start": "839839",
    "end": "845330"
  },
  {
    "text": "um what actually happens is each service so data in companies is generally pretty",
    "start": "845330",
    "end": "852589"
  },
  {
    "text": "crappy it's just the facts of life right data sets tend to be pretty crappy one",
    "start": "852589",
    "end": "858980"
  },
  {
    "text": "of the main reasons for this is that the way that we interpret data is somewhat subjective and big organizations have",
    "start": "858980",
    "end": "866000"
  },
  {
    "text": "whole departments which will kind of try and work try and disseminate the debt the definition of various different",
    "start": "866000",
    "end": "872690"
  },
  {
    "text": "attributes so that you can understand what data means what this really means is services end up actually writing",
    "start": "872690",
    "end": "878720"
  },
  {
    "text": "software which fixes the problems in the data that they're getting converting it to their own domain model cleaning",
    "start": "878720",
    "end": "885410"
  },
  {
    "text": "things up and by doing so they actually become dependent on the very problems",
    "start": "885410",
    "end": "892750"
  },
  {
    "text": "that they're trying to avoid the very idiosyncratic in those data sets and",
    "start": "892750",
    "end": "898459"
  },
  {
    "text": "this makes them very hard to change because if you change something at source then you've got a variety of different services they're effectively",
    "start": "898459",
    "end": "904490"
  },
  {
    "text": "dependent on those those the previous broken version of the data so it's very",
    "start": "904490",
    "end": "909770"
  },
  {
    "text": "hard to fix these kind of problems in retrospect so the more mutable copies of",
    "start": "909770",
    "end": "916220"
  },
  {
    "text": "data that we have spread around our different services the more data will likely diverge over time so what we end",
    "start": "916220",
    "end": "922790"
  },
  {
    "text": "up with is this cycle of inadequacy so",
    "start": "922790",
    "end": "928520"
  },
  {
    "text": "we start over here on the left you know we've got only project we've done our design it looks really",
    "start": "928520",
    "end": "935960"
  },
  {
    "text": "cool and we're really happy with it I've got design on a white board we do a",
    "start": "935960",
    "end": "941180"
  },
  {
    "text": "proof-of-concept it's still looking pretty sexy and we have a start to put it into production and things kind of",
    "start": "941180",
    "end": "947450"
  },
  {
    "text": "change and can't work out whether or not we can change our services well",
    "start": "947450",
    "end": "954530"
  },
  {
    "text": "initially we can it all works quite well so we just keep broadening this contract and maybe we've we're probably doing",
    "start": "954530",
    "end": "962810"
  },
  {
    "text": "okay at this point so we probably iterate a few times on that if we've ended up creating a massive shared dated",
    "start": "962810",
    "end": "969710"
  },
  {
    "text": "god service somebody might notice that they're spending rather a lot of money in which case we'll end up going back to",
    "start": "969710",
    "end": "976370"
  },
  {
    "text": "this light let's encapsulate and returning back to our Knights and services through some cycle of",
    "start": "976370",
    "end": "981940"
  },
  {
    "text": "regeneration and alternatively we just",
    "start": "981940",
    "end": "987260"
  },
  {
    "text": "go frack it we'll just get all the data so everyone ends up having a copy and we end up with this divergence over time",
    "start": "987260",
    "end": "992930"
  },
  {
    "text": "and then the divergence causes a redesign and we end up going around this",
    "start": "992930",
    "end": "998120"
  },
  {
    "text": "circle again and I've actually I've seen this happen a few times in a few different companies and the thing about",
    "start": "998120",
    "end": "1006900"
  },
  {
    "text": "the thing about change is that when you reinvent something when you do something",
    "start": "1006900",
    "end": "1012610"
  },
  {
    "text": "for a second time the thing that's really important is that you actually change the context in a way that implies",
    "start": "1012610",
    "end": "1023140"
  },
  {
    "text": "you're going to succeed the second time so yeah yeah you might argue that doing",
    "start": "1023140",
    "end": "1032650"
  },
  {
    "text": "the same thing again and again in the same with the same tool set is somewhat",
    "start": "1032650",
    "end": "1041110"
  },
  {
    "text": "idiotic in that you're you're you're constantly trying to bang your head",
    "start": "1041110",
    "end": "1047650"
  },
  {
    "text": "against the same brick wall so the roots out of this is to try and change something we need to change the way that",
    "start": "1047650",
    "end": "1053920"
  },
  {
    "text": "we actually approach these problems of disseminating data and controlling data",
    "start": "1053920",
    "end": "1059560"
  },
  {
    "text": "across a variety of different services so these forces are fundamental",
    "start": "1059560",
    "end": "1065080"
  },
  {
    "text": "excessive the divergence coupling they effects all of the systems that we build there's not",
    "start": "1065080",
    "end": "1071149"
  },
  {
    "text": "much we can do about them because they're fundamental all we can really do is reposition ourselves on the tradeoff",
    "start": "1071149",
    "end": "1079669"
  },
  {
    "text": "curve between them so is there a better way is there a way that we could do this",
    "start": "1079669",
    "end": "1085330"
  },
  {
    "text": "attack this problem in a slightly different way so this is um this is a an",
    "start": "1085330",
    "end": "1094100"
  },
  {
    "text": "approach which been working on for a few years with a few different companies and",
    "start": "1094100",
    "end": "1101210"
  },
  {
    "text": "it's actually similar in some ways to a lot of things we've been talking about today it's the first step is that we",
    "start": "1101210",
    "end": "1108590"
  },
  {
    "text": "build on a backbone of events so rather than starting with sort of quests and",
    "start": "1108590",
    "end": "1114379"
  },
  {
    "text": "commands and queries we start with an asynchronous protocol one that embraces a synchronicity both in terms of a",
    "start": "1114379",
    "end": "1121700"
  },
  {
    "text": "technical perspective but also from the perspective of real-world asynchronous problems like taking it order and",
    "start": "1121700",
    "end": "1128659"
  },
  {
    "text": "getting it to your door and then we layer in request where we're necessary",
    "start": "1128659",
    "end": "1134169"
  },
  {
    "text": "so requests driven approaches have high coupling because effectively a single",
    "start": "1134169",
    "end": "1142850"
  },
  {
    "text": "call snack is coupled throughout the dissemination of that call stack whereas this event broadcast approach",
    "start": "1142850",
    "end": "1150379"
  },
  {
    "text": "which is like traditional messaging providers with less coupling with decoupling ourselves by adding a broker",
    "start": "1150379",
    "end": "1157250"
  },
  {
    "text": "and then using a broadcast protocol so we want to start with something like",
    "start": "1157250",
    "end": "1163309"
  },
  {
    "text": "this and layer the request response approach on top so what we end up with is",
    "start": "1163309",
    "end": "1170899"
  },
  {
    "text": "something an event-driven architecture essentially so we have an asynchronous message flow in this case we have an",
    "start": "1170899",
    "end": "1177799"
  },
  {
    "text": "order which goes through a variety of different states we have a number of different services which are which are",
    "start": "1177799",
    "end": "1183259"
  },
  {
    "text": "collaborating to progress that thing forwards all using an asynchronous protocol and this is a this is termed",
    "start": "1183259",
    "end": "1190190"
  },
  {
    "text": "event collaboration and then we'll layer queries on where we need to so in this",
    "start": "1190190",
    "end": "1197179"
  },
  {
    "text": "case we have a basket service which responds to a user interface in a request response mechanism and we're",
    "start": "1197179",
    "end": "1203870"
  },
  {
    "text": "gonna layer that on to our asynchronous architecture so that's step one step two",
    "start": "1203870",
    "end": "1211600"
  },
  {
    "text": "this is the bit there's a little bit different to a sort of traditional approach is to make this data on the",
    "start": "1211600",
    "end": "1217850"
  },
  {
    "text": "outside the shared data sets the first-class citizen so this idea of",
    "start": "1217850",
    "end": "1223400"
  },
  {
    "text": "there being data which we exposed to other services and data lat which we internalize so we're going to focus on",
    "start": "1223400",
    "end": "1229340"
  },
  {
    "text": "designing for this and making these data sets available to any service that needs",
    "start": "1229340",
    "end": "1234530"
  },
  {
    "text": "them so stateful streams help us with this so this is a effective effectively",
    "start": "1234530",
    "end": "1243380"
  },
  {
    "text": "a messaging system we're obviously talking about Kafka in this instance because it's the one that I know best",
    "start": "1243380",
    "end": "1248540"
  },
  {
    "text": "but there are others so we have stateful strange streams at the center and we",
    "start": "1248540",
    "end": "1254150"
  },
  {
    "text": "have a variety of different views which we're going to embed into our various services and actually what we're gonna",
    "start": "1254150",
    "end": "1260510"
  },
  {
    "text": "do is we're gonna use this tool set as a way for manufacturing views based on a",
    "start": "1260510",
    "end": "1267830"
  },
  {
    "text": "central essential canonical set of streams so Kafka is the tool that helps",
    "start": "1267830",
    "end": "1275419"
  },
  {
    "text": "for this certainly from the point of view of this talk categories our streaming platform if you're not",
    "start": "1275419",
    "end": "1280940"
  },
  {
    "text": "familiar with it at the center of it is a distributed log and then around that there are ways to get data in and out",
    "start": "1280940",
    "end": "1287330"
  },
  {
    "text": "this connectors which will allow you to to pull data from a whole variety of",
    "start": "1287330",
    "end": "1292400"
  },
  {
    "text": "different data sources or push them into a whole variety of other data sources or",
    "start": "1292400",
    "end": "1297470"
  },
  {
    "text": "data sinks and a streaming engine which you can bolt over the top or embed right",
    "start": "1297470",
    "end": "1303799"
  },
  {
    "text": "inside your service so the log a distributed log is effectively a",
    "start": "1303799",
    "end": "1309919"
  },
  {
    "text": "messaging system it's a little bit different to a traditional messaging system because it's designed to scale",
    "start": "1309919",
    "end": "1316130"
  },
  {
    "text": "linearly both for actually from from all three layers so regardless of whether",
    "start": "1316130",
    "end": "1322669"
  },
  {
    "text": "you're producing you're talking about the actual log itself the distributed log itself or occlusive services which",
    "start": "1322669",
    "end": "1330320"
  },
  {
    "text": "are consuming from it we can take a single type and spread it across as many machines as we need to it's linearly",
    "start": "1330320",
    "end": "1336990"
  },
  {
    "text": "scalable with while retaining strong ordering guarantees within a single",
    "start": "1336990",
    "end": "1342270"
  },
  {
    "text": "partition it also provides transactional",
    "start": "1342270",
    "end": "1349590"
  },
  {
    "text": "guarantees in the next release so that's coming out this this this summer in a",
    "start": "1349590",
    "end": "1356490"
  },
  {
    "text": "month and this is quite interesting because one of the big problems with with building distributed asynchronous",
    "start": "1356490",
    "end": "1364740"
  },
  {
    "text": "systems is you really don't have a lot of transactional guarantees and actually you have to implement idempotence in",
    "start": "1364740",
    "end": "1370890"
  },
  {
    "text": "pretty much any voice in any asynchronous service so having a scalable mechanism for handling",
    "start": "1370890",
    "end": "1378120"
  },
  {
    "text": "transactions is pretty useful so what we end up with this is this kind of service",
    "start": "1378120",
    "end": "1384600"
  },
  {
    "text": "backbone it gives us a few different things we have the ability to naturally low balance we have fault tolerance both",
    "start": "1384600",
    "end": "1392040"
  },
  {
    "text": "built into the broker itself as well as built into your services because data is effectively routed to different",
    "start": "1392040",
    "end": "1397620"
  },
  {
    "text": "instances if she's an instance of a service fail we have this idea of transactions which allows us to",
    "start": "1397620",
    "end": "1403950"
  },
  {
    "text": "implement both idempotence as well as transactionally submitting different or",
    "start": "1403950",
    "end": "1409679"
  },
  {
    "text": "so missing different messages to different topics and then bringing them back together in a transactional way but",
    "start": "1409679",
    "end": "1415890"
  },
  {
    "text": "these these are the two things that are probably most formative for what I want to talk about today one is the idea of",
    "start": "1415890",
    "end": "1423780"
  },
  {
    "text": "the log itself it's a very simple data structure right it's a it's basically",
    "start": "1423780",
    "end": "1429690"
  },
  {
    "text": "just like an append-only file and the nice thing about append-only files is they are oh of one for read and",
    "start": "1429690",
    "end": "1435780"
  },
  {
    "text": "oh of one for write and that's very different to a traditional messaging system so a traditional messaging system",
    "start": "1435780",
    "end": "1441780"
  },
  {
    "text": "is basically built on a b-tree and it's a b-tree which means that you kind of",
    "start": "1441780",
    "end": "1446940"
  },
  {
    "text": "have to keep that tree in memory if you're going to have efficient performance or if you have a log you can",
    "start": "1446940",
    "end": "1452910"
  },
  {
    "text": "you can traverse it has a very simple very simple interface there's like seek or scan but you can you can implement",
    "start": "1452910",
    "end": "1460410"
  },
  {
    "text": "that in a very efficient way from asset whether you're in memory or on desk",
    "start": "1460410",
    "end": "1466110"
  },
  {
    "text": "and then you have this other feature which allows you to compact the log based on a key and this is kind of",
    "start": "1466110",
    "end": "1473640"
  },
  {
    "text": "interesting so a log is literally just an immutable stream of messages but you",
    "start": "1473640",
    "end": "1478860"
  },
  {
    "text": "can compact it based on a primary key and when you compact a look what you get is something that looks like a table so",
    "start": "1478860",
    "end": "1487080"
  },
  {
    "text": "this is an interesting place for us to keep data on the outside data that lives between our services somewhere we can",
    "start": "1487080",
    "end": "1493920"
  },
  {
    "text": "leave it and refer back to it later so we would we might have our orders",
    "start": "1493920",
    "end": "1500280"
  },
  {
    "text": "customers payments and stock we might keep those inside the distributed lock and what we'll actually do is we'll lay",
    "start": "1500280",
    "end": "1509670"
  },
  {
    "text": "our views inside our services either directly inside the service process itself or is this sort of separate",
    "start": "1509670",
    "end": "1515700"
  },
  {
    "text": "service that we refer to inside some bounded context this kind of starts to",
    "start": "1515700",
    "end": "1521640"
  },
  {
    "text": "change the way that we think about data and the problem of managing shared data",
    "start": "1521640",
    "end": "1527460"
  },
  {
    "text": "in the service architectures that we build so stream processing is a sort of",
    "start": "1527460",
    "end": "1536130"
  },
  {
    "text": "layer on top of this and this really helps us do a number of things because",
    "start": "1536130",
    "end": "1541470"
  },
  {
    "text": "it allows us to introspect the streams in a way that's kind of that's very",
    "start": "1541470",
    "end": "1547740"
  },
  {
    "text": "efficient and lightweight we're really not taking a deep long-lived copy of the",
    "start": "1547740",
    "end": "1553950"
  },
  {
    "text": "data so a little primer on stream processing assume processing is really",
    "start": "1553950",
    "end": "1560340"
  },
  {
    "text": "just this this problem of working out how to bring together various different",
    "start": "1560340",
    "end": "1566250"
  },
  {
    "text": "continuous streams of data so it's a machine for combining and processing",
    "start": "1566250",
    "end": "1572100"
  },
  {
    "text": "streams of events it's a stateful stream processing is",
    "start": "1572100",
    "end": "1577500"
  },
  {
    "text": "actually a sub branch of stream processing and the reason it's called stateful is because it has a bunch of",
    "start": "1577500",
    "end": "1583650"
  },
  {
    "text": "tools which allow you to maintain States and what that really ends up being meaning is that you can treat streams as",
    "start": "1583650",
    "end": "1590880"
  },
  {
    "text": "an infinite thing which you chop up into windows or alternatively you can treat a",
    "start": "1590880",
    "end": "1597690"
  },
  {
    "text": "stream as a table so think which is deduplicated by a primary key so we've always got this flow of",
    "start": "1597690",
    "end": "1605670"
  },
  {
    "text": "data coming towards us but there's a stream or a table it doesn't really matter and what we're actually doing",
    "start": "1605670",
    "end": "1610920"
  },
  {
    "text": "inside the stream processing engine is just accumulating for some data and the difference between a windowed stream and",
    "start": "1610920",
    "end": "1618180"
  },
  {
    "text": "a and a keyed stream a table it's just how we accumulate that data so in a",
    "start": "1618180",
    "end": "1624690"
  },
  {
    "text": "windowed sense we might keep you know a week's worth of data inside accumulated",
    "start": "1624690",
    "end": "1630840"
  },
  {
    "text": "inside our service or inside our streaming engine or alternatively we",
    "start": "1630840",
    "end": "1636120"
  },
  {
    "text": "might accumulate that data by key and actually have the entire data set so for example if we wanted to have a lookup",
    "start": "1636120",
    "end": "1643740"
  },
  {
    "text": "table of customer information we just accumulate the customer stream by",
    "start": "1643740",
    "end": "1649530"
  },
  {
    "text": "customer ID and then we can refer to it within our service within our engine so",
    "start": "1649530",
    "end": "1655980"
  },
  {
    "text": "beyond that obviously you have the the basic primitives of a database you can",
    "start": "1655980",
    "end": "1662250"
  },
  {
    "text": "take a view you can join different streams together streams and tables you",
    "start": "1662250",
    "end": "1667320"
  },
  {
    "text": "can apply predicate filters you can aggregate you can translate something to",
    "start": "1667320",
    "end": "1672780"
  },
  {
    "text": "your internal domain model it's really",
    "start": "1672780",
    "end": "1677880"
  },
  {
    "text": "basically just a database embedded inside your service which allows you to",
    "start": "1677880",
    "end": "1683400"
  },
  {
    "text": "slice and dice these various different streams because this is basically a way",
    "start": "1683400",
    "end": "1688410"
  },
  {
    "text": "that we can get access to and process data from lots of different services without having to a put responsibility",
    "start": "1688410",
    "end": "1697320"
  },
  {
    "text": "on them for providing scalability properties etc but it also most",
    "start": "1697320",
    "end": "1702450"
  },
  {
    "text": "importantly it allows each service to retain control of the queries that it",
    "start": "1702450",
    "end": "1709260"
  },
  {
    "text": "runs right so the data is shared but the queries themselves they're totally owned by each service so each service has",
    "start": "1709260",
    "end": "1715950"
  },
  {
    "text": "autonomy so stateful stream processing",
    "start": "1715950",
    "end": "1721080"
  },
  {
    "text": "has this idea of streams and tables on the way in so here we have an example of",
    "start": "1721080",
    "end": "1727200"
  },
  {
    "text": "a query this is again an online retail example where we're calculating how long",
    "start": "1727200",
    "end": "1733500"
  },
  {
    "text": "hates a payment to occur - to complete inside a bunch of different regions so",
    "start": "1733500",
    "end": "1739650"
  },
  {
    "text": "maybe a payment takes I don't know a few seconds to process in India and five",
    "start": "1739650",
    "end": "1745080"
  },
  {
    "text": "seconds to process in South Africa or somewhere so it's that kind of query and which in this case going to do it over a",
    "start": "1745080",
    "end": "1751590"
  },
  {
    "text": "one day window and we're actually joining two streams which are gonna be windowed and we're referring to a single",
    "start": "1751590",
    "end": "1757710"
  },
  {
    "text": "table all within the stream processing engine so we have two streams on the way",
    "start": "1757710",
    "end": "1763260"
  },
  {
    "text": "in tables on the way in and then likewise on the way out we have a choice we can either have a stream on the way",
    "start": "1763260",
    "end": "1770640"
  },
  {
    "text": "out which is the result of that query comes constantly updated or alternatively we can materialize that as",
    "start": "1770640",
    "end": "1776940"
  },
  {
    "text": "a table we can query so we can put like a rest interface over it and just query it from a browser so we have this idea",
    "start": "1776940",
    "end": "1789080"
  },
  {
    "text": "so I guess yes at the important point about this is that we're overflowing data to rocks DB that's the internal",
    "start": "1789080",
    "end": "1797370"
  },
  {
    "text": "implementation inside the streaming engine that's really just an optimization so that we don't have to",
    "start": "1797370",
    "end": "1803400"
  },
  {
    "text": "keep all of this data in memory and we cannot spread this over many instances of a service so to take a little example",
    "start": "1803400",
    "end": "1812450"
  },
  {
    "text": "imagine we want to trigger an email every time a prayer attainment is confirmed so we send the user an email",
    "start": "1812450",
    "end": "1820050"
  },
  {
    "text": "that says your payments confirm for this particular order that you just made we",
    "start": "1820050",
    "end": "1825930"
  },
  {
    "text": "might want to do a join between payments which would be we probably treat a stream orders which we would also treat",
    "start": "1825930",
    "end": "1833520"
  },
  {
    "text": "as a stream because those two things are likely to come at the same time or within a defined window and then we",
    "start": "1833520",
    "end": "1840630"
  },
  {
    "text": "might just use a lookup against the stock table and the stock table is so this whole thing would be",
    "start": "1840630",
    "end": "1846510"
  },
  {
    "text": "done inside this one service and we're joining I said two streams and a table",
    "start": "1846510",
    "end": "1851760"
  },
  {
    "text": "and then sending an email so we might not want to do this with a streaming",
    "start": "1851760",
    "end": "1857520"
  },
  {
    "text": "engine streaming engines have a an API which you have to learn or we might have",
    "start": "1857520",
    "end": "1865110"
  },
  {
    "text": "a database we might have a requirement for doing ad-hoc queries something that we were",
    "start": "1865110",
    "end": "1870120"
  },
  {
    "text": "where we want something like movie elasticsearch or maybe we want a relational model whatever it might be so we can always just go back or evolve",
    "start": "1870120",
    "end": "1876660"
  },
  {
    "text": "to using a standalone database which use a connector and do the join there it's just a slightly heavier weight process",
    "start": "1876660",
    "end": "1883260"
  },
  {
    "text": "because we're gonna have to then curate that data over time but the interesting thing about this is that if we take even",
    "start": "1883260",
    "end": "1891480"
  },
  {
    "text": "just this approach of the database if we did this in a traditional messaging way we basically have to keep all of the",
    "start": "1891480",
    "end": "1899190"
  },
  {
    "text": "data we have to keep all of the data over time so that we can work out also",
    "start": "1899190",
    "end": "1906000"
  },
  {
    "text": "we can answer the questions that we might need to answer in order in this case to solve this problem and actually any future problem whereas the nice",
    "start": "1906000",
    "end": "1912630"
  },
  {
    "text": "thing about having the shared streams is that the connector can basically just take the view that we need right now we",
    "start": "1912630",
    "end": "1919260"
  },
  {
    "text": "let's just take the the bits the the very specific query a very very specific",
    "start": "1919260",
    "end": "1926040"
  },
  {
    "text": "materialized view that we need to solve our problem today because we can always regenerate it we can always go back and",
    "start": "1926040",
    "end": "1932310"
  },
  {
    "text": "regenerate it again and actually a lot of the a lot of the the mechanics of getting this pattern",
    "start": "1932310",
    "end": "1939900"
  },
  {
    "text": "right and I'm not going to go into this today because it's a much bigger talk but a lot of the mechanics of getting this particular way are about having an",
    "start": "1939900",
    "end": "1947730"
  },
  {
    "text": "iterative process for rebuilding these data sets that's really about having the machine the machinery it's more like a",
    "start": "1947730",
    "end": "1954150"
  },
  {
    "text": "kind of continuous to put to kind-- continuous deployment approach so we",
    "start": "1954150",
    "end": "1960360"
  },
  {
    "text": "have this idea of shared storage inside a look and we have this query engine which we can embed inside our services",
    "start": "1960360",
    "end": "1965970"
  },
  {
    "text": "so data storage plus query engine is the kind of database write data inside Kafka",
    "start": "1965970",
    "end": "1974130"
  },
  {
    "text": "query engine sitting on top it's kind of a database but we had to have many",
    "start": "1974130",
    "end": "1979980"
  },
  {
    "text": "services right so we have one central set of canonical streams and then we",
    "start": "1979980",
    "end": "1986550"
  },
  {
    "text": "have a whole bunch of different services they're all using the same same retentive set of streams but they're all",
    "start": "1986550",
    "end": "1993210"
  },
  {
    "text": "implementing their own views their own interpretation of that shared data set",
    "start": "1993210",
    "end": "2000370"
  },
  {
    "text": "this is like a shared database it's",
    "start": "2000370",
    "end": "2005570"
  },
  {
    "text": "basically a database inside out as anyone seen Mouse in plaquemines talk on turning a database inside out we've got",
    "start": "2005570",
    "end": "2012409"
  },
  {
    "text": "a few yeah that's a really good talk and I would encourage you to see that also it's a kind of quite a powerful idea so",
    "start": "2012409",
    "end": "2022240"
  },
  {
    "text": "we sort of started with this idea right micro-services shouldn't share a",
    "start": "2022240",
    "end": "2027710"
  },
  {
    "text": "database um this is kind of a shared database but it's not a normal database",
    "start": "2027710",
    "end": "2035500"
  },
  {
    "text": "we can actually prove not by me by the way and people have done a fair bit of",
    "start": "2035500",
    "end": "2042259"
  },
  {
    "text": "research to prove that event broadcast is the lowest form of coupling and the",
    "start": "2042259",
    "end": "2048470"
  },
  {
    "text": "reason for this intuitively the reason event broadcast is the lowest form of coupling is because each service only",
    "start": "2048470",
    "end": "2054440"
  },
  {
    "text": "really receives a stream of events and they can basically do whatever it wants",
    "start": "2054440",
    "end": "2059950"
  },
  {
    "text": "but if we centralize something that's immutable we don't actually affect coupling so this isn't any kind of",
    "start": "2059950",
    "end": "2067490"
  },
  {
    "text": "shared database we certainly can't make a coupling put a coupling argument for why this would be a problematic approach",
    "start": "2067490",
    "end": "2073270"
  },
  {
    "text": "so to share a database we should think about turning it inside out what we end",
    "start": "2073270",
    "end": "2082099"
  },
  {
    "text": "up with is basically a machine which allows us to create these kind of",
    "start": "2082099",
    "end": "2087858"
  },
  {
    "text": "materialized views so we have the orders the payments the customers in the stock",
    "start": "2087859",
    "end": "2093888"
  },
  {
    "text": "these are the canonical data sets and we have a variety of services we simply have a process for manufacturing the",
    "start": "2093889",
    "end": "2100430"
  },
  {
    "text": "views that they need to do their job in a very lightweight way in a very lightweight manner you can always go",
    "start": "2100430",
    "end": "2106609"
  },
  {
    "text": "back to the shared streams if they need it so let's look at these different so",
    "start": "2106609",
    "end": "2112910"
  },
  {
    "text": "I've got basically four different approaches to sharing data we have shared database service interfaces event",
    "start": "2112910",
    "end": "2119630"
  },
  {
    "text": "broadcast stream data platform and then up here we have ease of change I can't",
    "start": "2119630",
    "end": "2124849"
  },
  {
    "text": "how easy how easy is it for us to evolve our our system there exists a bit accessibility how easy is it to get",
    "start": "2124849",
    "end": "2131000"
  },
  {
    "text": "something up and running quickly and then data erosion issue of things",
    "start": "2131000",
    "end": "2136610"
  },
  {
    "text": "diverging over time because they're effectively mutable so share database it's pretty bad from ease of change",
    "start": "2136610",
    "end": "2144110"
  },
  {
    "text": "it's like shared shared mutable state not good great from a day to accessibility point of view because",
    "start": "2144110",
    "end": "2151160"
  },
  {
    "text": "anyone can just dip into it great from a data of erosion point of view because there's just one canonical copy service",
    "start": "2151160",
    "end": "2158510"
  },
  {
    "text": "interfaces for a little bit better from the perspective of ease of change but not much right because we still have to",
    "start": "2158510",
    "end": "2165530"
  },
  {
    "text": "if we have got a new requirement we still have to get our service centers for interfaces to change in order to",
    "start": "2165530",
    "end": "2171500"
  },
  {
    "text": "give us the answer to the new question that we have from a data accessibility",
    "start": "2171500",
    "end": "2177110"
  },
  {
    "text": "point of view yes okay and from a data erosion perspective it's get one",
    "start": "2177110",
    "end": "2184280"
  },
  {
    "text": "canonical copy and thank event event broadcast great from the point of view of ease of change because everyone's",
    "start": "2184280",
    "end": "2191390"
  },
  {
    "text": "basically got everything they can do whatever they want not so great from the perspective of accessibility because if you weren't",
    "start": "2191390",
    "end": "2198710"
  },
  {
    "text": "listening to the message when it was sent then you don't have it anymore and",
    "start": "2198710",
    "end": "2203960"
  },
  {
    "text": "from a data erosion age perspective is poor because you have to maintain these copies of you love shared data sets over",
    "start": "2203960",
    "end": "2210950"
  },
  {
    "text": "time but if we do use this kind of a log backed stream data platform approach",
    "start": "2210950",
    "end": "2217360"
  },
  {
    "text": "it's easy to make changes it's easy to get access to data and it's it's we",
    "start": "2217360",
    "end": "2223580"
  },
  {
    "text": "don't have this issue of data erosion in the same way because we're actually building these very focused views which",
    "start": "2223580",
    "end": "2229730"
  },
  {
    "text": "are backed by this shared data set so",
    "start": "2229730",
    "end": "2237610"
  },
  {
    "text": "for me good architecture actually has very little do to do with drawing something on a whiteboard or coming up",
    "start": "2237610",
    "end": "2245420"
  },
  {
    "text": "with the design and good architecture is really about providing a set of",
    "start": "2245420",
    "end": "2252860"
  },
  {
    "text": "technology stack which you can evolve over time that's actually the hard bit",
    "start": "2252860",
    "end": "2258020"
  },
  {
    "text": "Hobbit is going how do I start from something small and evolving to",
    "start": "2258020",
    "end": "2263210"
  },
  {
    "text": "something that's complicated that's hard for me request driven approaches aren't",
    "start": "2263210",
    "end": "2271170"
  },
  {
    "text": "enough and I think as that's fairly well understood today hi coupling it's hard",
    "start": "2271170",
    "end": "2277500"
  },
  {
    "text": "to handle physically asynchronous flows things that happen these synchronously in the real world and it's hard to move and",
    "start": "2277500",
    "end": "2283980"
  },
  {
    "text": "join datasets so we want to embrace this data that flows between services this",
    "start": "2283980",
    "end": "2290100"
  },
  {
    "text": "data that sits on the design on the outside and actually make it something we're designed for so that we can give",
    "start": "2290100",
    "end": "2296070"
  },
  {
    "text": "our services independence all right so each service has the freedom to change",
    "start": "2296070",
    "end": "2303320"
  },
  {
    "text": "and manage its own data based on but based on a canonical set three building",
    "start": "2303320",
    "end": "2310980"
  },
  {
    "text": "on a single stream data platform that everyone can access and share so this is",
    "start": "2310980",
    "end": "2318060"
  },
  {
    "text": "a mechanism for evolving and architecture efficiently over time and",
    "start": "2318060",
    "end": "2324440"
  },
  {
    "text": "there are kind of a set of principles that sort of back this idea up its wimpy",
    "start": "2324440",
    "end": "2330630"
  },
  {
    "text": "where we start simple lightweight and fault tolerant immutable because we want to build on retentive shared narrative",
    "start": "2330630",
    "end": "2337220"
  },
  {
    "text": "reactive because we want to leverage a synchronicity I want to focus on events",
    "start": "2337220",
    "end": "2342720"
  },
  {
    "text": "which are coming now evolutionary that's that's actually pretty important is this idea that we",
    "start": "2342720",
    "end": "2349920"
  },
  {
    "text": "only take the data that we need today that keeps this lightweight and nimble and deep and decentralized so we receive",
    "start": "2349920",
    "end": "2357870"
  },
  {
    "text": "a receiver driven you can really talk about that today but that says that's that sir that's what gives a venture of an",
    "start": "2357870",
    "end": "2365640"
  },
  {
    "text": "architect as their decoupling properties we're avoiding coordination and we're avoiding God services and that's all I",
    "start": "2365640",
    "end": "2373380"
  },
  {
    "text": "had to say there's a number of references here we've been working on a",
    "start": "2373380",
    "end": "2378390"
  },
  {
    "text": "series of blog articles on this and there's the turning the database inside",
    "start": "2378390",
    "end": "2383820"
  },
  {
    "text": "out talk which is excellent two papers there from Pat Holland which are really",
    "start": "2383820",
    "end": "2390120"
  },
  {
    "text": "good and a couple of things from from Jai and Neha who work at confluent um thank you very much for staying for this",
    "start": "2390120",
    "end": "2396330"
  },
  {
    "text": "talk I hope this has been useful if you have any questions then maybe you've got some through the app you can",
    "start": "2396330",
    "end": "2402970"
  },
  {
    "text": "ask them now I'll be around for the drinks and stuff so I love talking about this so please come and talk to me give",
    "start": "2402970",
    "end": "2409750"
  },
  {
    "text": "me your thoughts argue whatever you like I love to talk about it so please do and",
    "start": "2409750",
    "end": "2415810"
  },
  {
    "text": "I said you can get me on Twitter thanks for watch [Applause]",
    "start": "2415810",
    "end": "2424760"
  }
]